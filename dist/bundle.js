/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var e={4308:(e,t,n)=>{"use strict";n.d(t,{Z:()=>i});var l=n(4015),a=n.n(l),o=n(3645),r=n.n(o)()(a());r.push([e.id,".app {\n  border: 1px solid #ccc;\n}\n","",{version:3,sources:["webpack://./src/App.vue","webpack://./App.vue"],names:[],mappings:"AACA;EACE,sBAAA;ACAF",sourcesContent:["\n.app{\n  border:1px solid #ccc;\n}\n",".app {\n  border: 1px solid #ccc;\n}\n"],sourceRoot:""}]);const i=r},2108:(e,t,n)=>{"use strict";n.d(t,{Z:()=>i});var l=n(4015),a=n.n(l),o=n(3645),r=n.n(o)()(a());r.push([e.id,"button {\n  background: #fff;\n  padding: 20px;\n}\n.btn {\n  background: rebeccapurple;\n}\n","",{version:3,sources:["webpack://./src/components/Helloworld.vue","webpack://./Helloworld.vue"],names:[],mappings:"AACA;EACE,gBAAA;EACA,aAAA;ACAF;ADEA;EACE,yBAAA;ACAF",sourcesContent:["\nbutton{\n  background :#fff;\n  padding: 20px;\n}\n.btn{\n  background: rebeccapurple;\n}\n","button {\n  background: #fff;\n  padding: 20px;\n}\n.btn {\n  background: rebeccapurple;\n}\n"],sourceRoot:""}]);const i=r},4247:(e,t,n)=>{"use strict";n.d(t,{Z:()=>i});var l=n(4015),a=n.n(l),o=n(3645),r=n.n(o)()(a());r.push([e.id,"html,\nbody {\n  padding: 0;\n  margin: 0;\n  height: 100%;\n}\n#app {\n  height: 100%;\n}\n.main {\n  position: relative;\n  height: 100%;\n  display: flex;\n}\n.side {\n  -webkit-app-region: drag;\n  z-index: 1;\n  width: 200px;\n  height: 100%;\n  overflow-y: hidden;\n  padding: 12px;\n  background: #f0f0f0;\n  border-right: 1px solid #dedede;\n  box-sizing: border-box;\n}\n.side button {\n  width: 100%;\n  border-radius: 5em;\n  padding: 0.6em;\n  border: none;\n  box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);\n  transition: box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);\n}\n.side .entry {\n  padding: 0 12px;\n}\n.side .entry input {\n  width: 100%;\n  font-size: 14px;\n}\n.side .entry .select-file {\n  position: relative;\n}\n.side .entry .select-file .input-file {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  padding: 0;\n  margin: 0;\n  opacity: 0;\n}\n.side .entry .select-file button {\n  background: #4b5cc4;\n  color: #fff;\n}\n.side .entry .select-file:hover button {\n  background: #5e6bc0;\n  box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2), 0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 15px 0px rgba(0, 0, 0, 0.18);\n}\n.side .catalog {\n  height: calc(100% - 176px);\n}\n.side .catalog h4 {\n  color: #999;\n  padding: 0 4px;\n  margin: 0.8em 0;\n  font-size: 12px;\n  font-weight: normal;\n  cursor: default;\n}\n.side .catalog .search-text {\n  margin-bottom: 0.5rem;\n}\n.side .catalog .el-tree {\n  height: calc(100% - 70px);\n  overflow-y: auto;\n  border: 1px solid #dcdfe6;\n  border-radius: 4px;\n}\n.side .catalog .el-tree-node_expand-icon.is-leaf {\n  color: #c0c4cc;\n}\n.side .output {\n  padding: 0 12px;\n  text-align: center;\n  bottom: 0;\n}\n.side .output p {\n  font-size: 12px;\n  color: #999;\n  font-family: '幼圆';\n  margin: 0;\n  padding-top: 0.2em;\n  cursor: default;\n}\n.side .output p a {\n  color: #999;\n  font-weight: normal;\n}\n.content {\n  height: 100%;\n  flex: 1;\n}\n.content .main-heade {\n  display: flex;\n  box-shadow: 1px 2px 3px rgba(0, 0, 0, 0.08);\n  border-bottom: 1px solid #ddd;\n  position: relative;\n  z-index: 999;\n  background: #f0f0f0;\n}\n.content .main-heade h3 {\n  width: calc(50% - 9px);\n  height: 30px;\n  line-height: 30px;\n  font-size: 14px;\n  box-sizing: border-box;\n  text-indent: 10px;\n  position: relative;\n  text-align: center;\n  cursor: default;\n}\n.content .main-heade h3 .gray {\n  font-size: 12px;\n  color: #999;\n}\n.content section {\n  overflow-y: auto;\n  display: flex;\n  padding-left: 10px;\n  padding-right: 5px;\n  height: calc(100% - 59px);\n}\n.content section .nodata {\n  padding: 40px;\n  padding-top: 120px;\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n  color: #ccc;\n  text-align: center;\n  font-size: 14px;\n  cursor: default;\n}\n.logo {\n  -webkit-app-region: drag;\n  text-align: center;\n  padding: 10px 0;\n}\n.logo h1 {\n  font-size: 14px;\n  color: #999;\n  font-weight: normal;\n  cursor: default;\n  margin: 0.3em;\n}\n.logo a {\n  color: #999;\n}\n.mini {\n  padding: 0.2em 0.5em;\n  font-size: 12px;\n  margin: 0;\n  background: transparent;\n  color: #118bee;\n  border-width: 1px;\n  line-height: 1;\n  border-radius: 2px;\n}\nul {\n  list-style: none;\n}\n.main-heade h3:nth-child(1) {\n  text-indent: 20px;\n}\n.kv:nth-child(1) dl::after {\n  content: '';\n  width: 1px;\n  height: 100%;\n  border-right: 1px dashed #ccc;\n  position: absolute;\n  top: 2px;\n  right: 0px;\n}\n.kv {\n  position: relative;\n  width: 50%;\n}\n.kv em {\n  color: teal;\n  opacity: 0.8;\n}\n.kv dl {\n  position: relative;\n  margin: 0;\n}\n.kv dl:nth-child(even) {\n  background: #f5f6f9;\n}\n.kv dl dt {\n  width: 100%;\n  line-height: 1.4;\n}\n.kv dl dt em {\n  display: inline-block;\n  padding: 5px;\n}\n.kv dl dd {\n  padding-bottom: 10px;\n  padding-right: 10px;\n}\n.kv dl dd > div {\n  display: flex;\n}\n.kv dl dd > div label {\n  font-size: 12px;\n  font-weight: normal;\n  color: #ccc;\n  display: inline-block;\n  min-width: 20px;\n  padding: 4px;\n  text-align: right;\n}\n.kv dl dd ul {\n  padding-left: 10px;\n  margin: 0;\n}\n.kv dl dd ul em {\n  font-size: 12px;\n  opacity: 0.5;\n}\n.kv dl dd .child-item li {\n  align-items: center;\n}\n.kv dl dd .child-item li em {\n  padding: 4px;\n  display: inline-block;\n  width: 60px;\n  text-align: right;\n}\n.kv textarea {\n  width: 96%;\n  resize: vertical;\n  transition: height 0.1s;\n  font-size: 12px;\n  margin-bottom: 0;\n  height: 30px;\n  padding: 4px 8px;\n  line-height: 1.6;\n  border-radius: 0px;\n  background: #fffff1;\n}\n.kv textarea:focus {\n  outline: 1px solid #9d9d9d;\n  outline-offset: -1px;\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);\n  background: #ffffdf;\n}\n.el-dialog {\n  background: #ECECEC;\n}\n.el-dialog .dialog-title em {\n  font-size: small;\n  font-style: normal;\n}\n.el-dialog button {\n  margin: 0;\n}\n.el-dialog .el-dialog__header {\n  padding-top: 10px;\n}\n.el-dialog .el-dialog__headerbtn {\n  top: 10px;\n}\n.el-dialog .el-dialog__body {\n  padding: 20px 40px 0;\n}\n.el-dialog .el-dialog__footer {\n  padding-right: 40px;\n}\n::-webkit-scrollbar {\n  width: 4px;\n  height: 4px;\n  background-color: transparent;\n  /* or add it to the track */\n}\n::-webkit-scrollbar-thumb {\n  background: #118bee;\n  border-radius: 5px;\n}\n::-webkit-scrollbar-corner {\n  background-color: transparent;\n  /* or add it to the track */\n}\n","",{version:3,sources:["webpack://./src/page/home.less","webpack://./home.vue"],names:[],mappings:"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",sourcesContent:["html,\nbody{\n  padding:0;\n  margin: 0;\n  height: 100%;\n}\n#app{\n  height: 100%;\n}\n\n.main{\n  position: relative;\n  height: 100%;\n  display: flex;\n}\n.side{\n  -webkit-app-region: drag;\n  z-index: 1;\n  width: 200px;\n  height: 100%;\n  overflow-y: hidden;\n  padding: 12px;\n  background: #f0f0f0;\n  border-right: 1px solid #dedede;\n  box-sizing: border-box;\n  button{\n    width: 100%;\n    border-radius: 5em;\n    padding: .6em;\n    border:none;\n    box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0,0,0,.12);\n    transition: box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);\n  }\n  .entry{\n    padding:0 12px;\n    input{\n      width: 100%;\n      font-size: 14px;\n    }\n    .select-file{\n      position: relative;\n      .input-file{\n        width: 100%;\n        height: 100%;\n        position: absolute;\n        left: 0;\n        top: 0;\n        padding: 0;\n        margin: 0;\n        opacity: 0;\n      }\n      button{\n        background: #4b5cc4;\n        color: #fff;\n      }\n      &:hover{\n        button{\n          background: #5e6bc0;\n          box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2), 0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 15px 0px rgba(0,0,0,.18);\n        }\n      }\n    }\n    \n  }\n  .catalog{\n    height: calc(100% - 176px);\n    h4{\n      color: #999;\n      padding: 0 4px;\n      margin: .8em 0;\n      font-size: 12px;\n      font-weight: normal;\n      cursor: default;\n    }\n    .search-text{\n      margin-bottom: .5rem;\n    }\n    .el-tree{\n      height: calc(100% - 70px);\n      overflow-y: auto;\n      border:1px solid #dcdfe6;\n      border-radius: 4px;\n    }\n    .el-tree-node_expand-icon.is-leaf{\n      color:#c0c4cc;\n    }\n  }\n  .output{\n    padding:0 12px;\n    // position:absolute;\n    // width: 152px;\n    text-align: center;\n    bottom: 0;\n    p{\n      font-size: 12px;\n      color: #999;\n      font-family: '幼圆';\n      margin: 0;\n      padding-top: .2em;\n      cursor: default;\n      a{\n        color: #999;\n        font-weight: normal;\n      }\n    }\n  }\n}\n.content{\n  height: 100%;\n  flex: 1;\n  .main-heade{\n    display: flex;\n    box-shadow: 1px 2px 3px rgba(0,0,0,.08);\n    border-bottom: 1px solid #ddd;\n    position: relative;\n    z-index: 999;\n    background: #f0f0f0;\n    h3{\n      width: calc(50% - 9px);\n      height: 30px;\n      line-height: 30px;\n      font-size: 14px;\n      box-sizing: border-box;\n      text-indent: 10px;\n      position: relative;\n      text-align: center;\n      cursor: default;\n      .gray{\n        font-size: 12px;\n        color: #999;\n      }\n    }\n  }\n  section{\n    overflow-y: auto;\n    display: flex;\n    padding-left: 10px;\n    padding-right: 5px;\n    height: calc(100% - 59px);\n    \n    //scroll-behavior: instant;//smooth\n    .nodata{\n      padding: 40px;\n      padding-top: 120px;\n      width: 100%;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      flex-direction: column;\n      color: #ccc;\n      text-align: center;\n      font-size: 14px;\n      cursor: default;\n    }\n  }\n}\n.logo{\n  -webkit-app-region: drag;\n  text-align: center;\n  padding: 10px 0;\n  h1{\n    font-size: 14px;\n    color: #999;\n    font-weight: normal;\n    cursor: default;\n    margin: .3em;\n  }\n  a{color: #999;}\n}\n.mini{\n  padding: .2em .5em;\n  font-size: 12px;\n  margin: 0;\n  background: transparent;\n  color: #118bee;\n  border-width: 1px;\n  line-height: 1;\n  border-radius: 2px;\n}\nul{list-style: none;}\n\n.main-heade h3:nth-child(1){\n  text-indent: 20px;\n}\n//.main-heade h3:nth-child(1),\n.kv:nth-child(1) dl{\n  &::after{\n    content: '';\n    width: 1px;\n    height: 100%;\n    border-right: 1px dashed #ccc;\n    position: absolute;\n    top: 2px;\n    right: 0px;\n  }\n}\n.kv{\n  position: relative;\n  width: 50%;\n  em{color: teal;opacity: .8;}\n  dl{\n    position: relative;\n    margin: 0;\n    &:nth-child(even){\n      background: #f5f6f9;\n    }\n    dt{\n      width: 100%;\n      line-height: 1.4;\n      \n      em{\n        display: inline-block;\n        padding: 5px;\n      }\n    }\n    dd{\n      padding-bottom: 10px;\n      padding-right: 10px;\n      &>div{\n        display: flex;\n        label{\n          font-size: 12px;\n          font-weight: normal;\n          color: #ccc;\n          display: inline-block;\n          min-width: 20px;\n          padding: 4px;\n          text-align: right;\n        }\n      }\n      ul{\n        padding-left: 10px;\n        margin: 0;\n        em{font-size: 12px;opacity: 0.5;}\n      }\n      .child-item{\n        li{\n          align-items: center;\n          em{\n            padding: 4px;\n            display: inline-block;\n            width: 60px;\n            text-align: right;\n          }\n        }\n      }\n    }\n  }\n  textarea{\n    width: 96%;\n    resize: vertical;\n    transition: height .1s;\n    font-size: 12px;\n    margin-bottom: 0;\n    height: 30px;\n    padding: 4px 8px;\n    line-height: 1.6;\n    border-radius: 0px;\n    background: #fffff1;\n    &:focus{\n      outline: 1px solid #9d9d9d;\n      outline-offset: -1px;\n      box-shadow: 0 0 10px rgba(0,0,0,.2);\n      background: #ffffdf;\n    }\n  }\n}\n.el-dialog{\n  background: #ECECEC;\n  .dialog-title{\n    em{\n      font-size: small;\n      font-style: normal;\n    }\n  }\n  button{\n    margin: 0;\n  }\n  .el-dialog__header{\n    padding-top: 10px;\n  }\n  .el-dialog__headerbtn{\n    top:10px;\n  }\n  .el-dialog__body{\n    padding: 20px 40px 0;\n  }\n  .el-dialog__footer{\n    padding-right: 40px;\n  }\n}\n\n//scrollbar style\n::-webkit-scrollbar {\n  width: 4px;\n  height: 4px;\n  background-color: transparent;\n  /* or add it to the track */\n}\n\n::-webkit-scrollbar-thumb {\n  background:#118bee;\n  border-radius: 5px;\n}\n\n::-webkit-scrollbar-corner {\n  background-color: transparent;\n  /* or add it to the track */\n}","html,\nbody {\n  padding: 0;\n  margin: 0;\n  height: 100%;\n}\n#app {\n  height: 100%;\n}\n.main {\n  position: relative;\n  height: 100%;\n  display: flex;\n}\n.side {\n  -webkit-app-region: drag;\n  z-index: 1;\n  width: 200px;\n  height: 100%;\n  overflow-y: hidden;\n  padding: 12px;\n  background: #f0f0f0;\n  border-right: 1px solid #dedede;\n  box-sizing: border-box;\n}\n.side button {\n  width: 100%;\n  border-radius: 5em;\n  padding: 0.6em;\n  border: none;\n  box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);\n  transition: box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);\n}\n.side .entry {\n  padding: 0 12px;\n}\n.side .entry input {\n  width: 100%;\n  font-size: 14px;\n}\n.side .entry .select-file {\n  position: relative;\n}\n.side .entry .select-file .input-file {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  padding: 0;\n  margin: 0;\n  opacity: 0;\n}\n.side .entry .select-file button {\n  background: #4b5cc4;\n  color: #fff;\n}\n.side .entry .select-file:hover button {\n  background: #5e6bc0;\n  box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2), 0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 15px 0px rgba(0, 0, 0, 0.18);\n}\n.side .catalog {\n  height: calc(100% - 176px);\n}\n.side .catalog h4 {\n  color: #999;\n  padding: 0 4px;\n  margin: 0.8em 0;\n  font-size: 12px;\n  font-weight: normal;\n  cursor: default;\n}\n.side .catalog .search-text {\n  margin-bottom: 0.5rem;\n}\n.side .catalog .el-tree {\n  height: calc(100% - 70px);\n  overflow-y: auto;\n  border: 1px solid #dcdfe6;\n  border-radius: 4px;\n}\n.side .catalog .el-tree-node_expand-icon.is-leaf {\n  color: #c0c4cc;\n}\n.side .output {\n  padding: 0 12px;\n  text-align: center;\n  bottom: 0;\n}\n.side .output p {\n  font-size: 12px;\n  color: #999;\n  font-family: '幼圆';\n  margin: 0;\n  padding-top: 0.2em;\n  cursor: default;\n}\n.side .output p a {\n  color: #999;\n  font-weight: normal;\n}\n.content {\n  height: 100%;\n  flex: 1;\n}\n.content .main-heade {\n  display: flex;\n  box-shadow: 1px 2px 3px rgba(0, 0, 0, 0.08);\n  border-bottom: 1px solid #ddd;\n  position: relative;\n  z-index: 999;\n  background: #f0f0f0;\n}\n.content .main-heade h3 {\n  width: calc(50% - 9px);\n  height: 30px;\n  line-height: 30px;\n  font-size: 14px;\n  box-sizing: border-box;\n  text-indent: 10px;\n  position: relative;\n  text-align: center;\n  cursor: default;\n}\n.content .main-heade h3 .gray {\n  font-size: 12px;\n  color: #999;\n}\n.content section {\n  overflow-y: auto;\n  display: flex;\n  padding-left: 10px;\n  padding-right: 5px;\n  height: calc(100% - 59px);\n}\n.content section .nodata {\n  padding: 40px;\n  padding-top: 120px;\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n  color: #ccc;\n  text-align: center;\n  font-size: 14px;\n  cursor: default;\n}\n.logo {\n  -webkit-app-region: drag;\n  text-align: center;\n  padding: 10px 0;\n}\n.logo h1 {\n  font-size: 14px;\n  color: #999;\n  font-weight: normal;\n  cursor: default;\n  margin: 0.3em;\n}\n.logo a {\n  color: #999;\n}\n.mini {\n  padding: 0.2em 0.5em;\n  font-size: 12px;\n  margin: 0;\n  background: transparent;\n  color: #118bee;\n  border-width: 1px;\n  line-height: 1;\n  border-radius: 2px;\n}\nul {\n  list-style: none;\n}\n.main-heade h3:nth-child(1) {\n  text-indent: 20px;\n}\n.kv:nth-child(1) dl::after {\n  content: '';\n  width: 1px;\n  height: 100%;\n  border-right: 1px dashed #ccc;\n  position: absolute;\n  top: 2px;\n  right: 0px;\n}\n.kv {\n  position: relative;\n  width: 50%;\n}\n.kv em {\n  color: teal;\n  opacity: 0.8;\n}\n.kv dl {\n  position: relative;\n  margin: 0;\n}\n.kv dl:nth-child(even) {\n  background: #f5f6f9;\n}\n.kv dl dt {\n  width: 100%;\n  line-height: 1.4;\n}\n.kv dl dt em {\n  display: inline-block;\n  padding: 5px;\n}\n.kv dl dd {\n  padding-bottom: 10px;\n  padding-right: 10px;\n}\n.kv dl dd > div {\n  display: flex;\n}\n.kv dl dd > div label {\n  font-size: 12px;\n  font-weight: normal;\n  color: #ccc;\n  display: inline-block;\n  min-width: 20px;\n  padding: 4px;\n  text-align: right;\n}\n.kv dl dd ul {\n  padding-left: 10px;\n  margin: 0;\n}\n.kv dl dd ul em {\n  font-size: 12px;\n  opacity: 0.5;\n}\n.kv dl dd .child-item li {\n  align-items: center;\n}\n.kv dl dd .child-item li em {\n  padding: 4px;\n  display: inline-block;\n  width: 60px;\n  text-align: right;\n}\n.kv textarea {\n  width: 96%;\n  resize: vertical;\n  transition: height 0.1s;\n  font-size: 12px;\n  margin-bottom: 0;\n  height: 30px;\n  padding: 4px 8px;\n  line-height: 1.6;\n  border-radius: 0px;\n  background: #fffff1;\n}\n.kv textarea:focus {\n  outline: 1px solid #9d9d9d;\n  outline-offset: -1px;\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);\n  background: #ffffdf;\n}\n.el-dialog {\n  background: #ECECEC;\n}\n.el-dialog .dialog-title em {\n  font-size: small;\n  font-style: normal;\n}\n.el-dialog button {\n  margin: 0;\n}\n.el-dialog .el-dialog__header {\n  padding-top: 10px;\n}\n.el-dialog .el-dialog__headerbtn {\n  top: 10px;\n}\n.el-dialog .el-dialog__body {\n  padding: 20px 40px 0;\n}\n.el-dialog .el-dialog__footer {\n  padding-right: 40px;\n}\n::-webkit-scrollbar {\n  width: 4px;\n  height: 4px;\n  background-color: transparent;\n  /* or add it to the track */\n}\n::-webkit-scrollbar-thumb {\n  background: #118bee;\n  border-radius: 5px;\n}\n::-webkit-scrollbar-corner {\n  background-color: transparent;\n  /* or add it to the track */\n}\n"],sourceRoot:""}]);const i=r},3645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=e(t);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,l){"string"==typeof e&&(e=[[null,e,""]]);var a={};if(l)for(var o=0;o<this.length;o++){var r=this[o][0];null!=r&&(a[r]=!0)}for(var i=0;i<e.length;i++){var s=[].concat(e[i]);l&&a[s[0]]||(n&&(s[2]?s[2]="".concat(n," and ").concat(s[2]):s[2]=n),t.push(s))}},t}},4015:e=>{"use strict";function t(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,l=new Array(t);n<t;n++)l[n]=e[n];return l}e.exports=function(e){var n,l,a=(l=4,function(e){if(Array.isArray(e))return e}(n=e)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],l=!0,a=!1,o=void 0;try{for(var r,i=e[Symbol.iterator]();!(l=(r=i.next()).done)&&(n.push(r.value),!t||n.length!==t);l=!0);}catch(e){a=!0,o=e}finally{try{l||null==i.return||i.return()}finally{if(a)throw o}}return n}}(n,l)||function(e,n){if(e){if("string"==typeof e)return t(e,n);var l=Object.prototype.toString.call(e).slice(8,-1);return"Object"===l&&e.constructor&&(l=e.constructor.name),"Map"===l||"Set"===l?Array.from(e):"Arguments"===l||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(l)?t(e,n):void 0}}(n,l)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=a[1],r=a[3];if("function"==typeof btoa){var i=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(i),u="/*# ".concat(s," */"),c=r.sources.map((function(e){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(e," */")}));return[o].concat(c).concat([u]).join("\n")}return[o].join("\n")}},7484:function(e){e.exports=function(){"use strict";var e="millisecond",t="second",n="minute",l="hour",a="day",o="week",r="month",i="quarter",s="year",u="date",c=/^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[^0-9]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?.?(\d+)?$/,d=/\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g,p={name:"en",weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_")},f=function(e,t,n){var l=String(e);return!l||l.length>=t?e:""+Array(t+1-l.length).join(n)+e},h={s:f,z:function(e){var t=-e.utcOffset(),n=Math.abs(t),l=Math.floor(n/60),a=n%60;return(t<=0?"+":"-")+f(l,2,"0")+":"+f(a,2,"0")},m:function e(t,n){if(t.date()<n.date())return-e(n,t);var l=12*(n.year()-t.year())+(n.month()-t.month()),a=t.clone().add(l,r),o=n-a<0,i=t.clone().add(l+(o?-1:1),r);return+(-(l+(n-a)/(o?a-i:i-a))||0)},a:function(e){return e<0?Math.ceil(e)||0:Math.floor(e)},p:function(c){return{M:r,y:s,w:o,d:a,D:u,h:l,m:n,s:t,ms:e,Q:i}[c]||String(c||"").toLowerCase().replace(/s$/,"")},u:function(e){return void 0===e}},v="en",m={};m[v]=p;var g=function(e){return e instanceof k},b=function(e,t,n){var l;if(!e)return v;if("string"==typeof e)m[e]&&(l=e),t&&(m[e]=t,l=e);else{var a=e.name;m[a]=e,l=a}return!n&&l&&(v=l),l||!n&&v},y=function(e,t){if(g(e))return e.clone();var n="object"==typeof t?t:{};return n.date=e,n.args=arguments,new k(n)},x=h;x.l=b,x.i=g,x.w=function(e,t){return y(e,{locale:t.$L,utc:t.$u,x:t.$x,$offset:t.$offset})};var k=function(){function p(e){this.$L=b(e.locale,null,!0),this.parse(e)}var f=p.prototype;return f.parse=function(e){this.$d=function(e){var t=e.date,n=e.utc;if(null===t)return new Date(NaN);if(x.u(t))return new Date;if(t instanceof Date)return new Date(t);if("string"==typeof t&&!/Z$/i.test(t)){var l=t.match(c);if(l){var a=l[2]-1||0,o=(l[7]||"0").substring(0,3);return n?new Date(Date.UTC(l[1],a,l[3]||1,l[4]||0,l[5]||0,l[6]||0,o)):new Date(l[1],a,l[3]||1,l[4]||0,l[5]||0,l[6]||0,o)}}return new Date(t)}(e),this.$x=e.x||{},this.init()},f.init=function(){var e=this.$d;this.$y=e.getFullYear(),this.$M=e.getMonth(),this.$D=e.getDate(),this.$W=e.getDay(),this.$H=e.getHours(),this.$m=e.getMinutes(),this.$s=e.getSeconds(),this.$ms=e.getMilliseconds()},f.$utils=function(){return x},f.isValid=function(){return!("Invalid Date"===this.$d.toString())},f.isSame=function(e,t){var n=y(e);return this.startOf(t)<=n&&n<=this.endOf(t)},f.isAfter=function(e,t){return y(e)<this.startOf(t)},f.isBefore=function(e,t){return this.endOf(t)<y(e)},f.$g=function(e,t,n){return x.u(e)?this[t]:this.set(n,e)},f.unix=function(){return Math.floor(this.valueOf()/1e3)},f.valueOf=function(){return this.$d.getTime()},f.startOf=function(e,i){var c=this,d=!!x.u(i)||i,p=x.p(e),f=function(e,t){var n=x.w(c.$u?Date.UTC(c.$y,t,e):new Date(c.$y,t,e),c);return d?n:n.endOf(a)},h=function(e,t){return x.w(c.toDate()[e].apply(c.toDate("s"),(d?[0,0,0,0]:[23,59,59,999]).slice(t)),c)},v=this.$W,m=this.$M,g=this.$D,b="set"+(this.$u?"UTC":"");switch(p){case s:return d?f(1,0):f(31,11);case r:return d?f(1,m):f(0,m+1);case o:var y=this.$locale().weekStart||0,k=(v<y?v+7:v)-y;return f(d?g-k:g+(6-k),m);case a:case u:return h(b+"Hours",0);case l:return h(b+"Minutes",1);case n:return h(b+"Seconds",2);case t:return h(b+"Milliseconds",3);default:return this.clone()}},f.endOf=function(e){return this.startOf(e,!1)},f.$set=function(o,i){var c,d=x.p(o),p="set"+(this.$u?"UTC":""),f=(c={},c[a]=p+"Date",c[u]=p+"Date",c[r]=p+"Month",c[s]=p+"FullYear",c[l]=p+"Hours",c[n]=p+"Minutes",c[t]=p+"Seconds",c[e]=p+"Milliseconds",c)[d],h=d===a?this.$D+(i-this.$W):i;if(d===r||d===s){var v=this.clone().set(u,1);v.$d[f](h),v.init(),this.$d=v.set(u,Math.min(this.$D,v.daysInMonth())).$d}else f&&this.$d[f](h);return this.init(),this},f.set=function(e,t){return this.clone().$set(e,t)},f.get=function(e){return this[x.p(e)]()},f.add=function(e,i){var u,c=this;e=Number(e);var d=x.p(i),p=function(t){var n=y(c);return x.w(n.date(n.date()+Math.round(t*e)),c)};if(d===r)return this.set(r,this.$M+e);if(d===s)return this.set(s,this.$y+e);if(d===a)return p(1);if(d===o)return p(7);var f=(u={},u[n]=6e4,u[l]=36e5,u[t]=1e3,u)[d]||1,h=this.$d.getTime()+e*f;return x.w(h,this)},f.subtract=function(e,t){return this.add(-1*e,t)},f.format=function(e){var t=this;if(!this.isValid())return"Invalid Date";var n=e||"YYYY-MM-DDTHH:mm:ssZ",l=x.z(this),a=this.$locale(),o=this.$H,r=this.$m,i=this.$M,s=a.weekdays,u=a.months,c=function(e,l,a,o){return e&&(e[l]||e(t,n))||a[l].substr(0,o)},p=function(e){return x.s(o%12||12,e,"0")},f=a.meridiem||function(e,t,n){var l=e<12?"AM":"PM";return n?l.toLowerCase():l},h={YY:String(this.$y).slice(-2),YYYY:this.$y,M:i+1,MM:x.s(i+1,2,"0"),MMM:c(a.monthsShort,i,u,3),MMMM:c(u,i),D:this.$D,DD:x.s(this.$D,2,"0"),d:String(this.$W),dd:c(a.weekdaysMin,this.$W,s,2),ddd:c(a.weekdaysShort,this.$W,s,3),dddd:s[this.$W],H:String(o),HH:x.s(o,2,"0"),h:p(1),hh:p(2),a:f(o,r,!0),A:f(o,r,!1),m:String(r),mm:x.s(r,2,"0"),s:String(this.$s),ss:x.s(this.$s,2,"0"),SSS:x.s(this.$ms,3,"0"),Z:l};return n.replace(d,(function(e,t){return t||h[e]||l.replace(":","")}))},f.utcOffset=function(){return 15*-Math.round(this.$d.getTimezoneOffset()/15)},f.diff=function(e,u,c){var d,p=x.p(u),f=y(e),h=6e4*(f.utcOffset()-this.utcOffset()),v=this-f,m=x.m(this,f);return m=(d={},d[s]=m/12,d[r]=m,d[i]=m/3,d[o]=(v-h)/6048e5,d[a]=(v-h)/864e5,d[l]=v/36e5,d[n]=v/6e4,d[t]=v/1e3,d)[p]||v,c?m:x.a(m)},f.daysInMonth=function(){return this.endOf(r).$D},f.$locale=function(){return m[this.$L]},f.locale=function(e,t){if(!e)return this.$L;var n=this.clone(),l=b(e,t,!0);return l&&(n.$L=l),n},f.clone=function(){return x.w(this.$d,this)},f.toDate=function(){return new Date(this.valueOf())},f.toJSON=function(){return this.isValid()?this.toISOString():null},f.toISOString=function(){return this.$d.toISOString()},f.toString=function(){return this.$d.toUTCString()},p}(),w=k.prototype;return y.prototype=w,[["$ms",e],["$s",t],["$m",n],["$H",l],["$W",a],["$M",r],["$y",s],["$D",u]].forEach((function(e){w[e[1]]=function(t){return this.$g(t,e[0],e[1])}})),y.extend=function(e,t){return e.$i||(e(t,k,y),e.$i=!0),y},y.locale=b,y.isDayjs=g,y.unix=function(e){return y(1e3*e)},y.en=m[v],y.Ls=m,y.p={},y}()},8734:function(e){e.exports=function(){"use strict";return function(e,t,n){var l=t.prototype,a=l.format;n.en.ordinal=function(e){var t=["th","st","nd","rd"],n=e%100;return"["+e+(t[(n-20)%10]||t[n]||t[0])+"]"},l.format=function(e){var t=this,n=this.$locale(),l=this.$utils(),o=(e||"YYYY-MM-DDTHH:mm:ssZ").replace(/\[([^\]]+)]|Q|wo|ww|w|zzz|z|gggg|Do|X|x|k{1,2}|S/g,(function(e){switch(e){case"Q":return Math.ceil((t.$M+1)/3);case"Do":return n.ordinal(t.$D);case"gggg":return t.weekYear();case"wo":return n.ordinal(t.week(),"W");case"w":case"ww":return l.s(t.week(),"w"===e?1:2,"0");case"k":case"kk":return l.s(String(0===t.$H?24:t.$H),"k"===e?1:2,"0");case"X":return Math.floor(t.$d.getTime()/1e3);case"x":return t.$d.getTime();case"z":return"["+t.offsetName()+"]";case"zzz":return"["+t.offsetName("long")+"]";default:return e}}));return a.bind(this)(o)}}}()},285:function(e){e.exports=function(){"use strict";var e,t={LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},n=function(e,n){return e.replace(/(\[[^\]]+])|(LTS?|l{1,4}|L{1,4})/g,(function(e,l,a){var o=a&&a.toUpperCase();return l||n[a]||t[a]||n[o].replace(/(\[[^\]]+])|(MMMM|MM|DD|dddd)/g,(function(e,t,n){return t||n.slice(1)}))}))},l=/(\[[^[]*\])|([-:/.()\s]+)|(A|a|YYYY|YY?|MM?M?M?|Do|DD?|hh?|HH?|mm?|ss?|S{1,3}|z|ZZ?)/g,a=/\d\d/,o=/\d\d?/,r=/\d*[^\s\d-:/()]+/,i=function(e){return function(t){this[e]=+t}},s=[/[+-]\d\d:?(\d\d)?/,function(e){(this.zone||(this.zone={})).offset=function(e){if(!e)return 0;var t=e.match(/([+-]|\d\d)/g),n=60*t[1]+(+t[2]||0);return 0===n?0:"+"===t[0]?-n:n}(e)}],u=function(t){var n=e[t];return n&&(n.indexOf?n:n.s.concat(n.f))},c=function(t,n){var l,a=e.meridiem;if(a){for(var o=1;o<=24;o+=1)if(t.indexOf(a(o,0,n))>-1){l=o>12;break}}else l=t===(n?"pm":"PM");return l},d={A:[r,function(e){this.afternoon=c(e,!1)}],a:[r,function(e){this.afternoon=c(e,!0)}],S:[/\d/,function(e){this.milliseconds=100*+e}],SS:[a,function(e){this.milliseconds=10*+e}],SSS:[/\d{3}/,function(e){this.milliseconds=+e}],s:[o,i("seconds")],ss:[o,i("seconds")],m:[o,i("minutes")],mm:[o,i("minutes")],H:[o,i("hours")],h:[o,i("hours")],HH:[o,i("hours")],hh:[o,i("hours")],D:[o,i("day")],DD:[a,i("day")],Do:[r,function(t){var n=e.ordinal,l=t.match(/\d+/);if(this.day=l[0],n)for(var a=1;a<=31;a+=1)n(a).replace(/\[|\]/g,"")===t&&(this.day=a)}],M:[o,i("month")],MM:[a,i("month")],MMM:[r,function(e){var t=u("months"),n=(u("monthsShort")||t.map((function(e){return e.substr(0,3)}))).indexOf(e)+1;if(n<1)throw new Error;this.month=n%12||n}],MMMM:[r,function(e){var t=u("months").indexOf(e)+1;if(t<1)throw new Error;this.month=t%12||t}],Y:[/[+-]?\d+/,i("year")],YY:[a,function(e){e=+e,this.year=e+(e>68?1900:2e3)}],YYYY:[/\d{4}/,i("year")],Z:s,ZZ:s},p=function(t,a,o){try{var r=function(t){for(var a=(t=n(t,e&&e.formats)).match(l),o=a.length,r=0;r<o;r+=1){var i=a[r],s=d[i],u=s&&s[0],c=s&&s[1];a[r]=c?{regex:u,parser:c}:i.replace(/^\[|\]$/g,"")}return function(e){for(var t={},n=0,l=0;n<o;n+=1){var r=a[n];if("string"==typeof r)l+=r.length;else{var i=r.regex,s=r.parser,u=e.substr(l),c=i.exec(u)[0];s.call(t,c),e=e.replace(c,"")}}return function(e){var t=e.afternoon;if(void 0!==t){var n=e.hours;t?n<12&&(e.hours+=12):12===n&&(e.hours=0),delete e.afternoon}}(t),t}}(a)(t),i=r.year,s=r.month,u=r.day,c=r.hours,p=r.minutes,f=r.seconds,h=r.milliseconds,v=r.zone,m=new Date,g=u||(i||s?1:m.getDate()),b=i||m.getFullYear(),y=0;i&&!s||(y=s>0?s-1:m.getMonth());var x=c||0,k=p||0,w=f||0,C=h||0;return v?new Date(Date.UTC(b,y,g,x,k,w,C+60*v.offset*1e3)):o?new Date(Date.UTC(b,y,g,x,k,w,C)):new Date(b,y,g,x,k,w,C)}catch(e){return new Date("")}};return function(t,n,l){l.p.customParseFormat=!0;var a=n.prototype,o=a.parse;a.parse=function(t){var n=t.date,a=t.utc,r=t.args;this.$u=a;var i=r[1];if("string"==typeof i){var s=!0===r[2],u=!0===r[3],c=s||u,d=r[2];u&&(d=r[2]),s||(e=d?l.Ls[d]:this.$locale()),this.$d=p(n,i,a),this.init(),d&&!0!==d&&(this.$L=this.locale(d).$L),c&&n!==this.format(i)&&(this.$d=new Date("")),e=void 0}else if(i instanceof Array)for(var f=i.length,h=1;h<=f;h+=1){r[1]=i[h-1];var v=l.apply(this,r);if(v.isValid()){this.$d=v.$d,this.$L=v.$L,this.init();break}h===f&&(this.$d=new Date(""))}else o.call(this,t)}}}()},423:function(e){e.exports=function(){"use strict";return function(e,t){t.prototype.isLeapYear=function(){return this.$y%4==0&&this.$y%100!=0||this.$y%400==0}}}()},9212:function(e){e.exports=function(){"use strict";return function(e,t){t.prototype.isSameOrAfter=function(e,t){return this.isSame(e,t)||this.isAfter(e,t)}}}()},7412:function(e){e.exports=function(){"use strict";return function(e,t){t.prototype.isSameOrBefore=function(e,t){return this.isSame(e,t)||this.isBefore(e,t)}}}()},6036:function(e){e.exports=function(){"use strict";return function(e,t,n){var l=function(e){return e&&(e.indexOf?e:e.s)},a=function(e,t,n,a,o){var r=e.name?e:e.$locale(),i=l(r[t]),s=l(r[n]),u=i||s.map((function(e){return e.substr(0,a)}));if(!o)return u;var c=r.weekStart;return u.map((function(e,t){return u[(t+(c||0))%7]}))},o=function(){return n.Ls[n.locale()]},r=function(e,t){return e.formats[t]||function(e){return e.replace(/(\[[^\]]+])|(MMMM|MM|DD|dddd)/g,(function(e,t,n){return t||n.slice(1)}))}(e.formats[t.toUpperCase()])};t.prototype.localeData=function(){return function(){var e=this;return{months:function(t){return t?t.format("MMMM"):a(e,"months")},monthsShort:function(t){return t?t.format("MMM"):a(e,"monthsShort","months",3)},firstDayOfWeek:function(){return e.$locale().weekStart||0},weekdays:function(t){return t?t.format("dddd"):a(e,"weekdays")},weekdaysMin:function(t){return t?t.format("dd"):a(e,"weekdaysMin","weekdays",2)},weekdaysShort:function(t){return t?t.format("ddd"):a(e,"weekdaysShort","weekdays",3)},longDateFormat:function(t){return r(e.$locale(),t)},meridiem:this.$locale().meridiem}}.bind(this)()},n.localeData=function(){var e=o();return{firstDayOfWeek:function(){return e.weekStart||0},weekdays:function(){return n.weekdays()},weekdaysShort:function(){return n.weekdaysShort()},weekdaysMin:function(){return n.weekdaysMin()},months:function(){return n.months()},monthsShort:function(){return n.monthsShort()},longDateFormat:function(t){return r(e,t)},meridiem:e.meridiem}},n.months=function(){return a(o(),"months")},n.monthsShort=function(){return a(o(),"monthsShort","months",3)},n.weekdays=function(e){return a(o(),"weekdays",null,null,e)},n.weekdaysShort=function(e){return a(o(),"weekdaysShort","weekdays",3,e)},n.weekdaysMin=function(e){return a(o(),"weekdaysMin","weekdays",2,e)}}}()},5183:function(e){e.exports=function(){"use strict";var e="week",t="year";return function(n,l,a){var o=l.prototype;o.week=function(n){if(void 0===n&&(n=null),null!==n)return this.add(7*(n-this.week()),"day");var l=this.$locale().yearStart||1;if(11===this.month()&&this.date()>25){var o=a(this).startOf(t).add(1,t).date(l),r=a(this).endOf(e);if(o.isBefore(r))return 1}var i=a(this).startOf(t).date(l).startOf(e).subtract(1,"millisecond"),s=this.diff(i,e,!0);return s<0?a(this).startOf("week").week():Math.ceil(s)},o.weeks=function(e){return void 0===e&&(e=null),this.week(e)}}}()},172:function(e){e.exports=function(){"use strict";return function(e,t){t.prototype.weekYear=function(){var e=this.month(),t=this.week(),n=this.year();return 1===t&&11===e?n+1:n}}}()},8552:(e,t,n)=>{var l=n(852)(n(5639),"DataView");e.exports=l},1989:(e,t,n)=>{var l=n(1789),a=n(401),o=n(7667),r=n(1327),i=n(1866);function s(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var l=e[t];this.set(l[0],l[1])}}s.prototype.clear=l,s.prototype.delete=a,s.prototype.get=o,s.prototype.has=r,s.prototype.set=i,e.exports=s},8407:(e,t,n)=>{var l=n(7040),a=n(4125),o=n(2117),r=n(7518),i=n(4705);function s(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var l=e[t];this.set(l[0],l[1])}}s.prototype.clear=l,s.prototype.delete=a,s.prototype.get=o,s.prototype.has=r,s.prototype.set=i,e.exports=s},7071:(e,t,n)=>{var l=n(852)(n(5639),"Map");e.exports=l},3369:(e,t,n)=>{var l=n(4785),a=n(1285),o=n(6e3),r=n(9916),i=n(5265);function s(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var l=e[t];this.set(l[0],l[1])}}s.prototype.clear=l,s.prototype.delete=a,s.prototype.get=o,s.prototype.has=r,s.prototype.set=i,e.exports=s},3818:(e,t,n)=>{var l=n(852)(n(5639),"Promise");e.exports=l},8525:(e,t,n)=>{var l=n(852)(n(5639),"Set");e.exports=l},8668:(e,t,n)=>{var l=n(3369),a=n(619),o=n(2385);function r(e){var t=-1,n=null==e?0:e.length;for(this.__data__=new l;++t<n;)this.add(e[t])}r.prototype.add=r.prototype.push=a,r.prototype.has=o,e.exports=r},6384:(e,t,n)=>{var l=n(8407),a=n(7465),o=n(3779),r=n(7599),i=n(4758),s=n(4309);function u(e){var t=this.__data__=new l(e);this.size=t.size}u.prototype.clear=a,u.prototype.delete=o,u.prototype.get=r,u.prototype.has=i,u.prototype.set=s,e.exports=u},2705:(e,t,n)=>{var l=n(5639).Symbol;e.exports=l},1149:(e,t,n)=>{var l=n(5639).Uint8Array;e.exports=l},577:(e,t,n)=>{var l=n(852)(n(5639),"WeakMap");e.exports=l},6874:e=>{e.exports=function(e,t,n){switch(n.length){case 0:return e.call(t);case 1:return e.call(t,n[0]);case 2:return e.call(t,n[0],n[1]);case 3:return e.call(t,n[0],n[1],n[2])}return e.apply(t,n)}},4963:e=>{e.exports=function(e,t){for(var n=-1,l=null==e?0:e.length,a=0,o=[];++n<l;){var r=e[n];t(r,n,e)&&(o[a++]=r)}return o}},7443:(e,t,n)=>{var l=n(2118);e.exports=function(e,t){return!(null==e||!e.length)&&l(e,t,0)>-1}},1196:e=>{e.exports=function(e,t,n){for(var l=-1,a=null==e?0:e.length;++l<a;)if(n(t,e[l]))return!0;return!1}},4636:(e,t,n)=>{var l=n(2545),a=n(5694),o=n(1469),r=n(4144),i=n(5776),s=n(6719),u=Object.prototype.hasOwnProperty;e.exports=function(e,t){var n=o(e),c=!n&&a(e),d=!n&&!c&&r(e),p=!n&&!c&&!d&&s(e),f=n||c||d||p,h=f?l(e.length,String):[],v=h.length;for(var m in e)!t&&!u.call(e,m)||f&&("length"==m||d&&("offset"==m||"parent"==m)||p&&("buffer"==m||"byteLength"==m||"byteOffset"==m)||i(m,v))||h.push(m);return h}},2488:e=>{e.exports=function(e,t){for(var n=-1,l=t.length,a=e.length;++n<l;)e[a+n]=t[n];return e}},2908:e=>{e.exports=function(e,t){for(var n=-1,l=null==e?0:e.length;++n<l;)if(t(e[n],n,e))return!0;return!1}},8470:(e,t,n)=>{var l=n(7813);e.exports=function(e,t){for(var n=e.length;n--;)if(l(e[n][0],t))return n;return-1}},1848:e=>{e.exports=function(e,t,n,l){for(var a=e.length,o=n+(l?1:-1);l?o--:++o<a;)if(t(e[o],o,e))return o;return-1}},1078:(e,t,n)=>{var l=n(2488),a=n(7285);e.exports=function e(t,n,o,r,i){var s=-1,u=t.length;for(o||(o=a),i||(i=[]);++s<u;){var c=t[s];n>0&&o(c)?n>1?e(c,n-1,o,r,i):l(i,c):r||(i[i.length]=c)}return i}},8866:(e,t,n)=>{var l=n(2488),a=n(1469);e.exports=function(e,t,n){var o=t(e);return a(e)?o:l(o,n(e))}},4239:(e,t,n)=>{var l=n(2705),a=n(9607),o=n(2333),r=l?l.toStringTag:void 0;e.exports=function(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":r&&r in Object(e)?a(e):o(e)}},2118:(e,t,n)=>{var l=n(1848),a=n(2722),o=n(2351);e.exports=function(e,t,n){return t==t?o(e,t,n):l(e,a,n)}},9454:(e,t,n)=>{var l=n(4239),a=n(7005);e.exports=function(e){return a(e)&&"[object Arguments]"==l(e)}},939:(e,t,n)=>{var l=n(2492),a=n(7005);e.exports=function e(t,n,o,r,i){return t===n||(null==t||null==n||!a(t)&&!a(n)?t!=t&&n!=n:l(t,n,o,r,e,i))}},2492:(e,t,n)=>{var l=n(6384),a=n(7114),o=n(8351),r=n(6096),i=n(4160),s=n(1469),u=n(4144),c=n(6719),d="[object Arguments]",p="[object Array]",f="[object Object]",h=Object.prototype.hasOwnProperty;e.exports=function(e,t,n,v,m,g){var b=s(e),y=s(t),x=b?p:i(e),k=y?p:i(t),w=(x=x==d?f:x)==f,C=(k=k==d?f:k)==f,_=x==k;if(_&&u(e)){if(!u(t))return!1;b=!0,w=!1}if(_&&!w)return g||(g=new l),b||c(e)?a(e,t,n,v,m,g):o(e,t,x,n,v,m,g);if(!(1&n)){var A=w&&h.call(e,"__wrapped__"),S=C&&h.call(t,"__wrapped__");if(A||S){var E=A?e.value():e,M=S?t.value():t;return g||(g=new l),m(E,M,n,v,g)}}return!!_&&(g||(g=new l),r(e,t,n,v,m,g))}},2722:e=>{e.exports=function(e){return e!=e}},8458:(e,t,n)=>{var l=n(3560),a=n(5346),o=n(3218),r=n(346),i=/^\[object .+?Constructor\]$/,s=Function.prototype,u=Object.prototype,c=s.toString,d=u.hasOwnProperty,p=RegExp("^"+c.call(d).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");e.exports=function(e){return!(!o(e)||a(e))&&(l(e)?p:i).test(r(e))}},8749:(e,t,n)=>{var l=n(4239),a=n(1780),o=n(7005),r={};r["[object Float32Array]"]=r["[object Float64Array]"]=r["[object Int8Array]"]=r["[object Int16Array]"]=r["[object Int32Array]"]=r["[object Uint8Array]"]=r["[object Uint8ClampedArray]"]=r["[object Uint16Array]"]=r["[object Uint32Array]"]=!0,r["[object Arguments]"]=r["[object Array]"]=r["[object ArrayBuffer]"]=r["[object Boolean]"]=r["[object DataView]"]=r["[object Date]"]=r["[object Error]"]=r["[object Function]"]=r["[object Map]"]=r["[object Number]"]=r["[object Object]"]=r["[object RegExp]"]=r["[object Set]"]=r["[object String]"]=r["[object WeakMap]"]=!1,e.exports=function(e){return o(e)&&a(e.length)&&!!r[l(e)]}},280:(e,t,n)=>{var l=n(5726),a=n(6916),o=Object.prototype.hasOwnProperty;e.exports=function(e){if(!l(e))return a(e);var t=[];for(var n in Object(e))o.call(e,n)&&"constructor"!=n&&t.push(n);return t}},5976:(e,t,n)=>{var l=n(6557),a=n(5357),o=n(61);e.exports=function(e,t){return o(a(e,t,l),e+"")}},6560:(e,t,n)=>{var l=n(5703),a=n(8777),o=n(6557),r=a?function(e,t){return a(e,"toString",{configurable:!0,enumerable:!1,value:l(t),writable:!0})}:o;e.exports=r},2545:e=>{e.exports=function(e,t){for(var n=-1,l=Array(e);++n<e;)l[n]=t(n);return l}},1717:e=>{e.exports=function(e){return function(t){return e(t)}}},5652:(e,t,n)=>{var l=n(8668),a=n(7443),o=n(1196),r=n(4757),i=n(3593),s=n(1814);e.exports=function(e,t,n){var u=-1,c=a,d=e.length,p=!0,f=[],h=f;if(n)p=!1,c=o;else if(d>=200){var v=t?null:i(e);if(v)return s(v);p=!1,c=r,h=new l}else h=t?[]:f;e:for(;++u<d;){var m=e[u],g=t?t(m):m;if(m=n||0!==m?m:0,p&&g==g){for(var b=h.length;b--;)if(h[b]===g)continue e;t&&h.push(g),f.push(m)}else c(h,g,n)||(h!==f&&h.push(g),f.push(m))}return f}},4757:e=>{e.exports=function(e,t){return e.has(t)}},4429:(e,t,n)=>{var l=n(5639)["__core-js_shared__"];e.exports=l},3593:(e,t,n)=>{var l=n(8525),a=n(308),o=n(1814),r=l&&1/o(new l([,-0]))[1]==1/0?function(e){return new l(e)}:a;e.exports=r},8777:(e,t,n)=>{var l=n(852),a=function(){try{var e=l(Object,"defineProperty");return e({},"",{}),e}catch(e){}}();e.exports=a},7114:(e,t,n)=>{var l=n(8668),a=n(2908),o=n(4757);e.exports=function(e,t,n,r,i,s){var u=1&n,c=e.length,d=t.length;if(c!=d&&!(u&&d>c))return!1;var p=s.get(e),f=s.get(t);if(p&&f)return p==t&&f==e;var h=-1,v=!0,m=2&n?new l:void 0;for(s.set(e,t),s.set(t,e);++h<c;){var g=e[h],b=t[h];if(r)var y=u?r(b,g,h,t,e,s):r(g,b,h,e,t,s);if(void 0!==y){if(y)continue;v=!1;break}if(m){if(!a(t,(function(e,t){if(!o(m,t)&&(g===e||i(g,e,n,r,s)))return m.push(t)}))){v=!1;break}}else if(g!==b&&!i(g,b,n,r,s)){v=!1;break}}return s.delete(e),s.delete(t),v}},8351:(e,t,n)=>{var l=n(2705),a=n(1149),o=n(7813),r=n(7114),i=n(8776),s=n(1814),u=l?l.prototype:void 0,c=u?u.valueOf:void 0;e.exports=function(e,t,n,l,u,d,p){switch(n){case"[object DataView]":if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case"[object ArrayBuffer]":return!(e.byteLength!=t.byteLength||!d(new a(e),new a(t)));case"[object Boolean]":case"[object Date]":case"[object Number]":return o(+e,+t);case"[object Error]":return e.name==t.name&&e.message==t.message;case"[object RegExp]":case"[object String]":return e==t+"";case"[object Map]":var f=i;case"[object Set]":var h=1&l;if(f||(f=s),e.size!=t.size&&!h)return!1;var v=p.get(e);if(v)return v==t;l|=2,p.set(e,t);var m=r(f(e),f(t),l,u,d,p);return p.delete(e),m;case"[object Symbol]":if(c)return c.call(e)==c.call(t)}return!1}},6096:(e,t,n)=>{var l=n(8234),a=Object.prototype.hasOwnProperty;e.exports=function(e,t,n,o,r,i){var s=1&n,u=l(e),c=u.length;if(c!=l(t).length&&!s)return!1;for(var d=c;d--;){var p=u[d];if(!(s?p in t:a.call(t,p)))return!1}var f=i.get(e),h=i.get(t);if(f&&h)return f==t&&h==e;var v=!0;i.set(e,t),i.set(t,e);for(var m=s;++d<c;){var g=e[p=u[d]],b=t[p];if(o)var y=s?o(b,g,p,t,e,i):o(g,b,p,e,t,i);if(!(void 0===y?g===b||r(g,b,n,o,i):y)){v=!1;break}m||(m="constructor"==p)}if(v&&!m){var x=e.constructor,k=t.constructor;x==k||!("constructor"in e)||!("constructor"in t)||"function"==typeof x&&x instanceof x&&"function"==typeof k&&k instanceof k||(v=!1)}return i.delete(e),i.delete(t),v}},1957:e=>{var t="object"==typeof global&&global&&global.Object===Object&&global;e.exports=t},8234:(e,t,n)=>{var l=n(8866),a=n(9551),o=n(3674);e.exports=function(e){return l(e,o,a)}},5050:(e,t,n)=>{var l=n(7019);e.exports=function(e,t){var n=e.__data__;return l(t)?n["string"==typeof t?"string":"hash"]:n.map}},852:(e,t,n)=>{var l=n(8458),a=n(7801);e.exports=function(e,t){var n=a(e,t);return l(n)?n:void 0}},9607:(e,t,n)=>{var l=n(2705),a=Object.prototype,o=a.hasOwnProperty,r=a.toString,i=l?l.toStringTag:void 0;e.exports=function(e){var t=o.call(e,i),n=e[i];try{e[i]=void 0;var l=!0}catch(e){}var a=r.call(e);return l&&(t?e[i]=n:delete e[i]),a}},9551:(e,t,n)=>{var l=n(4963),a=n(479),o=Object.prototype.propertyIsEnumerable,r=Object.getOwnPropertySymbols,i=r?function(e){return null==e?[]:(e=Object(e),l(r(e),(function(t){return o.call(e,t)})))}:a;e.exports=i},4160:(e,t,n)=>{var l=n(8552),a=n(7071),o=n(3818),r=n(8525),i=n(577),s=n(4239),u=n(346),c="[object Map]",d="[object Promise]",p="[object Set]",f="[object WeakMap]",h="[object DataView]",v=u(l),m=u(a),g=u(o),b=u(r),y=u(i),x=s;(l&&x(new l(new ArrayBuffer(1)))!=h||a&&x(new a)!=c||o&&x(o.resolve())!=d||r&&x(new r)!=p||i&&x(new i)!=f)&&(x=function(e){var t=s(e),n="[object Object]"==t?e.constructor:void 0,l=n?u(n):"";if(l)switch(l){case v:return h;case m:return c;case g:return d;case b:return p;case y:return f}return t}),e.exports=x},7801:e=>{e.exports=function(e,t){return null==e?void 0:e[t]}},1789:(e,t,n)=>{var l=n(4536);e.exports=function(){this.__data__=l?l(null):{},this.size=0}},401:e=>{e.exports=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t}},7667:(e,t,n)=>{var l=n(4536),a=Object.prototype.hasOwnProperty;e.exports=function(e){var t=this.__data__;if(l){var n=t[e];return"__lodash_hash_undefined__"===n?void 0:n}return a.call(t,e)?t[e]:void 0}},1327:(e,t,n)=>{var l=n(4536),a=Object.prototype.hasOwnProperty;e.exports=function(e){var t=this.__data__;return l?void 0!==t[e]:a.call(t,e)}},1866:(e,t,n)=>{var l=n(4536);e.exports=function(e,t){var n=this.__data__;return this.size+=this.has(e)?0:1,n[e]=l&&void 0===t?"__lodash_hash_undefined__":t,this}},7285:(e,t,n)=>{var l=n(2705),a=n(5694),o=n(1469),r=l?l.isConcatSpreadable:void 0;e.exports=function(e){return o(e)||a(e)||!!(r&&e&&e[r])}},5776:e=>{var t=/^(?:0|[1-9]\d*)$/;e.exports=function(e,n){var l=typeof e;return!!(n=null==n?9007199254740991:n)&&("number"==l||"symbol"!=l&&t.test(e))&&e>-1&&e%1==0&&e<n}},7019:e=>{e.exports=function(e){var t=typeof e;return"string"==t||"number"==t||"symbol"==t||"boolean"==t?"__proto__"!==e:null===e}},5346:(e,t,n)=>{var l,a=n(4429),o=(l=/[^.]+$/.exec(a&&a.keys&&a.keys.IE_PROTO||""))?"Symbol(src)_1."+l:"";e.exports=function(e){return!!o&&o in e}},5726:e=>{var t=Object.prototype;e.exports=function(e){var n=e&&e.constructor;return e===("function"==typeof n&&n.prototype||t)}},7040:e=>{e.exports=function(){this.__data__=[],this.size=0}},4125:(e,t,n)=>{var l=n(8470),a=Array.prototype.splice;e.exports=function(e){var t=this.__data__,n=l(t,e);return!(n<0||(n==t.length-1?t.pop():a.call(t,n,1),--this.size,0))}},2117:(e,t,n)=>{var l=n(8470);e.exports=function(e){var t=this.__data__,n=l(t,e);return n<0?void 0:t[n][1]}},7518:(e,t,n)=>{var l=n(8470);e.exports=function(e){return l(this.__data__,e)>-1}},4705:(e,t,n)=>{var l=n(8470);e.exports=function(e,t){var n=this.__data__,a=l(n,e);return a<0?(++this.size,n.push([e,t])):n[a][1]=t,this}},4785:(e,t,n)=>{var l=n(1989),a=n(8407),o=n(7071);e.exports=function(){this.size=0,this.__data__={hash:new l,map:new(o||a),string:new l}}},1285:(e,t,n)=>{var l=n(5050);e.exports=function(e){var t=l(this,e).delete(e);return this.size-=t?1:0,t}},6e3:(e,t,n)=>{var l=n(5050);e.exports=function(e){return l(this,e).get(e)}},9916:(e,t,n)=>{var l=n(5050);e.exports=function(e){return l(this,e).has(e)}},5265:(e,t,n)=>{var l=n(5050);e.exports=function(e,t){var n=l(this,e),a=n.size;return n.set(e,t),this.size+=n.size==a?0:1,this}},8776:e=>{e.exports=function(e){var t=-1,n=Array(e.size);return e.forEach((function(e,l){n[++t]=[l,e]})),n}},4536:(e,t,n)=>{var l=n(852)(Object,"create");e.exports=l},6916:(e,t,n)=>{var l=n(5569)(Object.keys,Object);e.exports=l},1167:(e,t,n)=>{e=n.nmd(e);var l=n(1957),a=t&&!t.nodeType&&t,o=a&&e&&!e.nodeType&&e,r=o&&o.exports===a&&l.process,i=function(){try{return o&&o.require&&o.require("util").types||r&&r.binding&&r.binding("util")}catch(e){}}();e.exports=i},2333:e=>{var t=Object.prototype.toString;e.exports=function(e){return t.call(e)}},5569:e=>{e.exports=function(e,t){return function(n){return e(t(n))}}},5357:(e,t,n)=>{var l=n(6874),a=Math.max;e.exports=function(e,t,n){return t=a(void 0===t?e.length-1:t,0),function(){for(var o=arguments,r=-1,i=a(o.length-t,0),s=Array(i);++r<i;)s[r]=o[t+r];r=-1;for(var u=Array(t+1);++r<t;)u[r]=o[r];return u[t]=n(s),l(e,this,u)}}},5639:(e,t,n)=>{var l=n(1957),a="object"==typeof self&&self&&self.Object===Object&&self,o=l||a||Function("return this")();e.exports=o},619:e=>{e.exports=function(e){return this.__data__.set(e,"__lodash_hash_undefined__"),this}},2385:e=>{e.exports=function(e){return this.__data__.has(e)}},1814:e=>{e.exports=function(e){var t=-1,n=Array(e.size);return e.forEach((function(e){n[++t]=e})),n}},61:(e,t,n)=>{var l=n(6560),a=n(1275)(l);e.exports=a},1275:e=>{var t=Date.now;e.exports=function(e){var n=0,l=0;return function(){var a=t(),o=16-(a-l);if(l=a,o>0){if(++n>=800)return arguments[0]}else n=0;return e.apply(void 0,arguments)}}},7465:(e,t,n)=>{var l=n(8407);e.exports=function(){this.__data__=new l,this.size=0}},3779:e=>{e.exports=function(e){var t=this.__data__,n=t.delete(e);return this.size=t.size,n}},7599:e=>{e.exports=function(e){return this.__data__.get(e)}},4758:e=>{e.exports=function(e){return this.__data__.has(e)}},4309:(e,t,n)=>{var l=n(8407),a=n(7071),o=n(3369);e.exports=function(e,t){var n=this.__data__;if(n instanceof l){var r=n.__data__;if(!a||r.length<199)return r.push([e,t]),this.size=++n.size,this;n=this.__data__=new o(r)}return n.set(e,t),this.size=n.size,this}},2351:e=>{e.exports=function(e,t,n){for(var l=n-1,a=e.length;++l<a;)if(e[l]===t)return l;return-1}},346:e=>{var t=Function.prototype.toString;e.exports=function(e){if(null!=e){try{return t.call(e)}catch(e){}try{return e+""}catch(e){}}return""}},5703:e=>{e.exports=function(e){return function(){return e}}},3279:(e,t,n)=>{var l=n(3218),a=n(7771),o=n(4841),r=Math.max,i=Math.min;e.exports=function(e,t,n){var s,u,c,d,p,f,h=0,v=!1,m=!1,g=!0;if("function"!=typeof e)throw new TypeError("Expected a function");function b(t){var n=s,l=u;return s=u=void 0,h=t,d=e.apply(l,n)}function y(e){return h=e,p=setTimeout(k,t),v?b(e):d}function x(e){var n=e-f;return void 0===f||n>=t||n<0||m&&e-h>=c}function k(){var e=a();if(x(e))return w(e);p=setTimeout(k,function(e){var n=t-(e-f);return m?i(n,c-(e-h)):n}(e))}function w(e){return p=void 0,g&&s?b(e):(s=u=void 0,d)}function C(){var e=a(),n=x(e);if(s=arguments,u=this,f=e,n){if(void 0===p)return y(f);if(m)return clearTimeout(p),p=setTimeout(k,t),b(f)}return void 0===p&&(p=setTimeout(k,t)),d}return t=o(t)||0,l(n)&&(v=!!n.leading,c=(m="maxWait"in n)?r(o(n.maxWait)||0,t):c,g="trailing"in n?!!n.trailing:g),C.cancel=function(){void 0!==p&&clearTimeout(p),h=0,s=f=u=p=void 0},C.flush=function(){return void 0===p?d:w(a())},C}},7813:e=>{e.exports=function(e,t){return e===t||e!=e&&t!=t}},6557:e=>{e.exports=function(e){return e}},5694:(e,t,n)=>{var l=n(9454),a=n(7005),o=Object.prototype,r=o.hasOwnProperty,i=o.propertyIsEnumerable,s=l(function(){return arguments}())?l:function(e){return a(e)&&r.call(e,"callee")&&!i.call(e,"callee")};e.exports=s},1469:e=>{var t=Array.isArray;e.exports=t},8612:(e,t,n)=>{var l=n(3560),a=n(1780);e.exports=function(e){return null!=e&&a(e.length)&&!l(e)}},9246:(e,t,n)=>{var l=n(8612),a=n(7005);e.exports=function(e){return a(e)&&l(e)}},4144:(e,t,n)=>{e=n.nmd(e);var l=n(5639),a=n(5062),o=t&&!t.nodeType&&t,r=o&&e&&!e.nodeType&&e,i=r&&r.exports===o?l.Buffer:void 0,s=(i?i.isBuffer:void 0)||a;e.exports=s},8446:(e,t,n)=>{var l=n(939);e.exports=function(e,t){return l(e,t)}},3560:(e,t,n)=>{var l=n(4239),a=n(3218);e.exports=function(e){if(!a(e))return!1;var t=l(e);return"[object Function]"==t||"[object GeneratorFunction]"==t||"[object AsyncFunction]"==t||"[object Proxy]"==t}},1780:e=>{e.exports=function(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=9007199254740991}},3218:e=>{e.exports=function(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}},7005:e=>{e.exports=function(e){return null!=e&&"object"==typeof e}},3448:(e,t,n)=>{var l=n(4239),a=n(7005);e.exports=function(e){return"symbol"==typeof e||a(e)&&"[object Symbol]"==l(e)}},6719:(e,t,n)=>{var l=n(8749),a=n(1717),o=n(1167),r=o&&o.isTypedArray,i=r?a(r):l;e.exports=i},3674:(e,t,n)=>{var l=n(4636),a=n(280),o=n(8612);e.exports=function(e){return o(e)?l(e):a(e)}},308:e=>{e.exports=function(){}},7771:(e,t,n)=>{var l=n(5639);e.exports=function(){return l.Date.now()}},479:e=>{e.exports=function(){return[]}},5062:e=>{e.exports=function(){return!1}},3493:(e,t,n)=>{var l=n(3279),a=n(3218);e.exports=function(e,t,n){var o=!0,r=!0;if("function"!=typeof e)throw new TypeError("Expected a function");return a(n)&&(o="leading"in n?!!n.leading:o,r="trailing"in n?!!n.trailing:r),l(e,t,{leading:o,maxWait:t,trailing:r})}},4841:(e,t,n)=>{var l=n(3218),a=n(3448),o=/^\s+|\s+$/g,r=/^[-+]0x[0-9a-f]+$/i,i=/^0b[01]+$/i,s=/^0o[0-7]+$/i,u=parseInt;e.exports=function(e){if("number"==typeof e)return e;if(a(e))return NaN;if(l(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=l(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(o,"");var n=i.test(e);return n||s.test(e)?u(e.slice(2),n?2:8):r.test(e)?NaN:+e}},3386:(e,t,n)=>{var l=n(1078),a=n(5976),o=n(5652),r=n(9246),i=a((function(e){return o(l(e,1,r,!0))}));e.exports=i},2796:(e,t,n)=>{e.exports=n(643)},3264:e=>{"use strict";var t=!("undefined"==typeof window||!window.document||!window.document.createElement),n={canUseDOM:t,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:t&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:t&&!!window.screen,isInWorker:!t};e.exports=n},4518:e=>{var t,n,l,a,o,r,i,s,u,c,d,p,f,h,v,m=!1;function g(){if(!m){m=!0;var e=navigator.userAgent,g=/(?:MSIE.(\d+\.\d+))|(?:(?:Firefox|GranParadiso|Iceweasel).(\d+\.\d+))|(?:Opera(?:.+Version.|.)(\d+\.\d+))|(?:AppleWebKit.(\d+(?:\.\d+)?))|(?:Trident\/\d+\.\d+.*rv:(\d+\.\d+))/.exec(e),b=/(Mac OS X)|(Windows)|(Linux)/.exec(e);if(p=/\b(iPhone|iP[ao]d)/.exec(e),f=/\b(iP[ao]d)/.exec(e),c=/Android/i.exec(e),h=/FBAN\/\w+;/i.exec(e),v=/Mobile/i.exec(e),d=!!/Win64/.exec(e),g){(t=g[1]?parseFloat(g[1]):g[5]?parseFloat(g[5]):NaN)&&document&&document.documentMode&&(t=document.documentMode);var y=/(?:Trident\/(\d+.\d+))/.exec(e);r=y?parseFloat(y[1])+4:t,n=g[2]?parseFloat(g[2]):NaN,l=g[3]?parseFloat(g[3]):NaN,(a=g[4]?parseFloat(g[4]):NaN)?(g=/(?:Chrome\/(\d+\.\d+))/.exec(e),o=g&&g[1]?parseFloat(g[1]):NaN):o=NaN}else t=n=l=o=a=NaN;if(b){if(b[1]){var x=/(?:Mac OS X (\d+(?:[._]\d+)?))/.exec(e);i=!x||parseFloat(x[1].replace("_","."))}else i=!1;s=!!b[2],u=!!b[3]}else i=s=u=!1}}var b={ie:function(){return g()||t},ieCompatibilityMode:function(){return g()||r>t},ie64:function(){return b.ie()&&d},firefox:function(){return g()||n},opera:function(){return g()||l},webkit:function(){return g()||a},safari:function(){return b.webkit()},chrome:function(){return g()||o},windows:function(){return g()||s},osx:function(){return g()||i},linux:function(){return g()||u},iphone:function(){return g()||p},mobile:function(){return g()||p||f||c||v},nativeApp:function(){return g()||h},android:function(){return g()||c},ipad:function(){return g()||f}};e.exports=b},6534:(e,t,n)=>{"use strict";var l,a=n(3264);a.canUseDOM&&(l=document.implementation&&document.implementation.hasFeature&&!0!==document.implementation.hasFeature("","")),e.exports=function(e,t){if(!a.canUseDOM||t&&!("addEventListener"in document))return!1;var n="on"+e,o=n in document;if(!o){var r=document.createElement("div");r.setAttribute(n,"return;"),o="function"==typeof r[n]}return!o&&l&&"wheel"===e&&(o=document.implementation.hasFeature("Events.wheel","3.0")),o}},643:(e,t,n)=>{"use strict";var l=n(4518),a=n(6534);function o(e){var t=0,n=0,l=0,a=0;return"detail"in e&&(n=e.detail),"wheelDelta"in e&&(n=-e.wheelDelta/120),"wheelDeltaY"in e&&(n=-e.wheelDeltaY/120),"wheelDeltaX"in e&&(t=-e.wheelDeltaX/120),"axis"in e&&e.axis===e.HORIZONTAL_AXIS&&(t=n,n=0),l=10*t,a=10*n,"deltaY"in e&&(a=e.deltaY),"deltaX"in e&&(l=e.deltaX),(l||a)&&e.deltaMode&&(1==e.deltaMode?(l*=40,a*=40):(l*=800,a*=800)),l&&!t&&(t=l<1?-1:1),a&&!n&&(n=a<1?-1:1),{spinX:t,spinY:n,pixelX:l,pixelY:a}}o.getEventType=function(){return l.firefox()?"DOMMouseScroll":a("wheel")?"wheel":"mousewheel"},e.exports=o},3379:(e,t,n)=>{"use strict";var l,a=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),o=[];function r(e){for(var t=-1,n=0;n<o.length;n++)if(o[n].identifier===e){t=n;break}return t}function i(e,t){for(var n={},l=[],a=0;a<e.length;a++){var i=e[a],s=t.base?i[0]+t.base:i[0],u=n[s]||0,c="".concat(s," ").concat(u);n[s]=u+1;var d=r(c),p={css:i[1],media:i[2],sourceMap:i[3]};-1!==d?(o[d].references++,o[d].updater(p)):o.push({identifier:c,updater:v(p,t),references:1}),l.push(c)}return l}function s(e){var t=document.createElement("style"),l=e.attributes||{};if(void 0===l.nonce){var o=n.nc;o&&(l.nonce=o)}if(Object.keys(l).forEach((function(e){t.setAttribute(e,l[e])})),"function"==typeof e.insert)e.insert(t);else{var r=a(e.insert||"head");if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}return t}var u,c=(u=[],function(e,t){return u[e]=t,u.filter(Boolean).join("\n")});function d(e,t,n,l){var a=n?"":l.media?"@media ".concat(l.media," {").concat(l.css,"}"):l.css;if(e.styleSheet)e.styleSheet.cssText=c(t,a);else{var o=document.createTextNode(a),r=e.childNodes;r[t]&&e.removeChild(r[t]),r.length?e.insertBefore(o,r[t]):e.appendChild(o)}}function p(e,t,n){var l=n.css,a=n.media,o=n.sourceMap;if(a?e.setAttribute("media",a):e.removeAttribute("media"),o&&"undefined"!=typeof btoa&&(l+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleSheet)e.styleSheet.cssText=l;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(l))}}var f=null,h=0;function v(e,t){var n,l,a;if(t.singleton){var o=h++;n=f||(f=s(t)),l=d.bind(null,n,o,!1),a=d.bind(null,n,o,!0)}else n=s(t),l=p.bind(null,n,t),a=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return l(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;l(e=t)}else a()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=(void 0===l&&(l=Boolean(window&&document&&document.all&&!window.atob)),l));var n=i(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var l=0;l<n.length;l++){var a=r(n[l]);o[a].references--}for(var s=i(e,t),u=0;u<n.length;u++){var c=r(n[u]);0===o[c].references&&(o[c].updater(),o.splice(c,1))}n=s}}}},8933:e=>{"use strict";e.exports=require("electron")},5747:e=>{"use strict";e.exports=require("fs")}},t={};function n(l){if(t[l])return t[l].exports;var a=t[l]={id:l,loaded:!1,exports:{}};return e[l].call(a.exports,a,a.exports,n),a.loaded=!0,a.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var l in t)n.o(t,l)&&!n.o(e,l)&&Object.defineProperty(e,l,{enumerable:!0,get:t[l]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),(()=>{"use strict";function e(e,t){const n=Object.create(null),l=e.split(",");for(let e=0;e<l.length;e++)n[l[e]]=!0;return t?e=>!!n[e.toLowerCase()]:e=>!!n[e]}const t=e("Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl"),l=e("itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly");function a(e){if(_(e)){const t={};for(let n=0;n<e.length;n++){const l=e[n],o=a(O(l)?i(l):l);if(o)for(const e in o)t[e]=o[e]}return t}if(T(e))return e}const o=/;(?![^(]*\))/g,r=/:(.+)/;function i(e){const t={};return e.split(o).forEach((e=>{if(e){const n=e.split(r);n.length>1&&(t[n[0].trim()]=n[1].trim())}})),t}function s(e){let t="";if(O(e))t=e;else if(_(e))for(let n=0;n<e.length;n++)t+=s(e[n])+" ";else if(T(e))for(const n in e)e[n]&&(t+=n+" ");return t.trim()}function u(e,t){if(e===t)return!0;let n=E(e),l=E(t);if(n||l)return!(!n||!l)&&e.getTime()===t.getTime();if(n=_(e),l=_(t),n||l)return!(!n||!l)&&function(e,t){if(e.length!==t.length)return!1;let n=!0;for(let l=0;n&&l<e.length;l++)n=u(e[l],t[l]);return n}(e,t);if(n=T(e),l=T(t),n||l){if(!n||!l)return!1;if(Object.keys(e).length!==Object.keys(t).length)return!1;for(const n in e){const l=e.hasOwnProperty(n),a=t.hasOwnProperty(n);if(l&&!a||!l&&a||!u(e[n],t[n]))return!1}}return String(e)===String(t)}function c(e,t){return e.findIndex((e=>u(e,t)))}const d=e=>null==e?"":T(e)?JSON.stringify(e,p,2):String(e),p=(e,t)=>A(t)?{[`Map(${t.size})`]:[...t.entries()].reduce(((e,[t,n])=>(e[`${t} =>`]=n,e)),{})}:S(t)?{[`Set(${t.size})`]:[...t.values()]}:!T(t)||_(t)||V(t)?t:String(t),f={},h=[],v=()=>{},m=()=>!1,g=/^on[^a-z]/,b=e=>g.test(e),y=e=>e.startsWith("onUpdate:"),x=Object.assign,k=(e,t)=>{const n=e.indexOf(t);n>-1&&e.splice(n,1)},w=Object.prototype.hasOwnProperty,C=(e,t)=>w.call(e,t),_=Array.isArray,A=e=>"[object Map]"===P(e),S=e=>"[object Set]"===P(e),E=e=>e instanceof Date,M=e=>"function"==typeof e,O=e=>"string"==typeof e,D=e=>"symbol"==typeof e,T=e=>null!==e&&"object"==typeof e,N=e=>T(e)&&M(e.then)&&M(e.catch),B=Object.prototype.toString,P=e=>B.call(e),V=e=>"[object Object]"===P(e),I=e=>O(e)&&"NaN"!==e&&"-"!==e[0]&&""+parseInt(e,10)===e,L=e(",key,ref,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"),z=e=>{const t=Object.create(null);return n=>t[n]||(t[n]=e(n))},F=/-(\w)/g,$=z((e=>e.replace(F,((e,t)=>t?t.toUpperCase():"")))),R=/\B([A-Z])/g,j=z((e=>e.replace(R,"-$1").toLowerCase())),H=z((e=>e.charAt(0).toUpperCase()+e.slice(1))),W=z((e=>e?`on${H(e)}`:"")),q=(e,t)=>e!==t&&(e==e||t==t),Y=(e,t)=>{for(let n=0;n<e.length;n++)e[n](t)},K=(e,t,n)=>{Object.defineProperty(e,t,{configurable:!0,enumerable:!1,value:n})},U=e=>{const t=parseFloat(e);return isNaN(t)?e:t};let G;const X=()=>G||(G="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{}),J=new WeakMap,Z=[];let Q;const ee=Symbol(""),te=Symbol("");function ne(e,t=f){(function(e){return e&&!0===e._isEffect})(e)&&(e=e.raw);const n=function(e,t){const n=function(){if(!n.active)return t.scheduler?void 0:e();if(!Z.includes(n)){oe(n);try{return ie.push(re),re=!0,Z.push(n),Q=n,e()}finally{Z.pop(),ue(),Q=Z[Z.length-1]}}};return n.id=ae++,n.allowRecurse=!!t.allowRecurse,n._isEffect=!0,n.active=!0,n.raw=e,n.deps=[],n.options=t,n}(e,t);return t.lazy||n(),n}function le(e){e.active&&(oe(e),e.options.onStop&&e.options.onStop(),e.active=!1)}let ae=0;function oe(e){const{deps:t}=e;if(t.length){for(let n=0;n<t.length;n++)t[n].delete(e);t.length=0}}let re=!0;const ie=[];function se(){ie.push(re),re=!1}function ue(){const e=ie.pop();re=void 0===e||e}function ce(e,t,n){if(!re||void 0===Q)return;let l=J.get(e);l||J.set(e,l=new Map);let a=l.get(n);a||l.set(n,a=new Set),a.has(Q)||(a.add(Q),Q.deps.push(a))}function de(e,t,n,l,a,o){const r=J.get(e);if(!r)return;const i=new Set,s=e=>{e&&e.forEach((e=>{(e!==Q||e.allowRecurse)&&i.add(e)}))};if("clear"===t)r.forEach(s);else if("length"===n&&_(e))r.forEach(((e,t)=>{("length"===t||t>=l)&&s(e)}));else switch(void 0!==n&&s(r.get(n)),t){case"add":_(e)?I(n)&&s(r.get("length")):(s(r.get(ee)),A(e)&&s(r.get(te)));break;case"delete":_(e)||(s(r.get(ee)),A(e)&&s(r.get(te)));break;case"set":A(e)&&s(r.get(ee))}i.forEach((e=>{e.options.scheduler?e.options.scheduler(e):e()}))}const pe=new Set(Object.getOwnPropertyNames(Symbol).map((e=>Symbol[e])).filter(D)),fe=be(),he=be(!1,!0),ve=be(!0),me=be(!0,!0),ge={};function be(e=!1,t=!1){return function(n,l,a){if("__v_isReactive"===l)return!e;if("__v_isReadonly"===l)return e;if("__v_raw"===l&&a===(e?qe:We).get(n))return n;const o=_(n);if(!e&&o&&C(ge,l))return Reflect.get(ge,l,a);const r=Reflect.get(n,l,a);return(D(l)?pe.has(l):"__proto__"===l||"__v_isRef"===l)?r:(e||ce(n,0,l),t?r:et(r)?o&&I(l)?r:r.value:T(r)?e?Ke(r):Ye(r):r)}}function ye(e=!1){return function(t,n,l,a){const o=t[n];if(!e&&(l=Ze(l),!_(t)&&et(o)&&!et(l)))return o.value=l,!0;const r=_(t)&&I(n)?Number(n)<t.length:C(t,n),i=Reflect.set(t,n,l,a);return t===Ze(a)&&(r?q(l,o)&&de(t,"set",n,l):de(t,"add",n,l)),i}}["includes","indexOf","lastIndexOf"].forEach((e=>{const t=Array.prototype[e];ge[e]=function(...e){const n=Ze(this);for(let e=0,t=this.length;e<t;e++)ce(n,0,e+"");const l=t.apply(n,e);return-1===l||!1===l?t.apply(n,e.map(Ze)):l}})),["push","pop","shift","unshift","splice"].forEach((e=>{const t=Array.prototype[e];ge[e]=function(...e){se();const n=t.apply(this,e);return ue(),n}}));const xe={get:fe,set:ye(),deleteProperty:function(e,t){const n=C(e,t),l=(e[t],Reflect.deleteProperty(e,t));return l&&n&&de(e,"delete",t,void 0),l},has:function(e,t){const n=Reflect.has(e,t);return D(t)&&pe.has(t)||ce(e,0,t),n},ownKeys:function(e){return ce(e,0,_(e)?"length":ee),Reflect.ownKeys(e)}},ke={get:ve,set:(e,t)=>!0,deleteProperty:(e,t)=>!0},we=x({},xe,{get:he,set:ye(!0)}),Ce=(x({},ke,{get:me}),e=>T(e)?Ye(e):e),_e=e=>T(e)?Ke(e):e,Ae=e=>e,Se=e=>Reflect.getPrototypeOf(e);function Ee(e,t,n=!1,l=!1){const a=Ze(e=e.__v_raw),o=Ze(t);t!==o&&!n&&ce(a,0,t),!n&&ce(a,0,o);const{has:r}=Se(a),i=n?_e:l?Ae:Ce;return r.call(a,t)?i(e.get(t)):r.call(a,o)?i(e.get(o)):void 0}function Me(e,t=!1){const n=this.__v_raw,l=Ze(n),a=Ze(e);return e!==a&&!t&&ce(l,0,e),!t&&ce(l,0,a),e===a?n.has(e):n.has(e)||n.has(a)}function Oe(e,t=!1){return e=e.__v_raw,!t&&ce(Ze(e),0,ee),Reflect.get(e,"size",e)}function De(e){e=Ze(e);const t=Ze(this),n=Se(t).has.call(t,e);return t.add(e),n||de(t,"add",e,e),this}function Te(e,t){t=Ze(t);const n=Ze(this),{has:l,get:a}=Se(n);let o=l.call(n,e);o||(e=Ze(e),o=l.call(n,e));const r=a.call(n,e);return n.set(e,t),o?q(t,r)&&de(n,"set",e,t):de(n,"add",e,t),this}function Ne(e){const t=Ze(this),{has:n,get:l}=Se(t);let a=n.call(t,e);a||(e=Ze(e),a=n.call(t,e)),l&&l.call(t,e);const o=t.delete(e);return a&&de(t,"delete",e,void 0),o}function Be(){const e=Ze(this),t=0!==e.size,n=e.clear();return t&&de(e,"clear",void 0,void 0),n}function Pe(e,t){return function(n,l){const a=this,o=a.__v_raw,r=Ze(o),i=e?_e:t?Ae:Ce;return!e&&ce(r,0,ee),o.forEach(((e,t)=>n.call(l,i(e),i(t),a)))}}function Ve(e,t,n){return function(...l){const a=this.__v_raw,o=Ze(a),r=A(o),i="entries"===e||e===Symbol.iterator&&r,s="keys"===e&&r,u=a[e](...l),c=t?_e:n?Ae:Ce;return!t&&ce(o,0,s?te:ee),{next(){const{value:e,done:t}=u.next();return t?{value:e,done:t}:{value:i?[c(e[0]),c(e[1])]:c(e),done:t}},[Symbol.iterator](){return this}}}}function Ie(e){return function(...t){return"delete"!==e&&this}}const Le={get(e){return Ee(this,e)},get size(){return Oe(this)},has:Me,add:De,set:Te,delete:Ne,clear:Be,forEach:Pe(!1,!1)},ze={get(e){return Ee(this,e,!1,!0)},get size(){return Oe(this)},has:Me,add:De,set:Te,delete:Ne,clear:Be,forEach:Pe(!1,!0)},Fe={get(e){return Ee(this,e,!0)},get size(){return Oe(this,!0)},has(e){return Me.call(this,e,!0)},add:Ie("add"),set:Ie("set"),delete:Ie("delete"),clear:Ie("clear"),forEach:Pe(!0,!1)};function $e(e,t){const n=t?ze:e?Fe:Le;return(t,l,a)=>"__v_isReactive"===l?!e:"__v_isReadonly"===l?e:"__v_raw"===l?t:Reflect.get(C(n,l)&&l in t?n:t,l,a)}["keys","values","entries",Symbol.iterator].forEach((e=>{Le[e]=Ve(e,!1,!1),Fe[e]=Ve(e,!0,!1),ze[e]=Ve(e,!1,!0)}));const Re={get:$e(!1,!1)},je={get:$e(!1,!0)},He={get:$e(!0,!1)},We=new WeakMap,qe=new WeakMap;function Ye(e){return e&&e.__v_isReadonly?e:Ue(e,!1,xe,Re)}function Ke(e){return Ue(e,!0,ke,He)}function Ue(e,t,n,l){if(!T(e))return e;if(e.__v_raw&&(!t||!e.__v_isReactive))return e;const a=t?qe:We,o=a.get(e);if(o)return o;const r=(i=e).__v_skip||!Object.isExtensible(i)?0:function(e){switch(e){case"Object":case"Array":return 1;case"Map":case"Set":case"WeakMap":case"WeakSet":return 2;default:return 0}}((e=>P(e).slice(8,-1))(i));var i;if(0===r)return e;const s=new Proxy(e,2===r?l:n);return a.set(e,s),s}function Ge(e){return Xe(e)?Ge(e.__v_raw):!(!e||!e.__v_isReactive)}function Xe(e){return!(!e||!e.__v_isReadonly)}function Je(e){return Ge(e)||Xe(e)}function Ze(e){return e&&Ze(e.__v_raw)||e}const Qe=e=>T(e)?Ye(e):e;function et(e){return Boolean(e&&!0===e.__v_isRef)}function tt(e){return at(e)}function nt(e){return at(e,!0)}class lt{constructor(e,t=!1){this._rawValue=e,this._shallow=t,this.__v_isRef=!0,this._value=t?e:Qe(e)}get value(){return ce(Ze(this),0,"value"),this._value}set value(e){q(Ze(e),this._rawValue)&&(this._rawValue=e,this._value=this._shallow?e:Qe(e),de(Ze(this),"set","value",e))}}function at(e,t=!1){return et(e)?e:new lt(e,t)}function ot(e){return et(e)?e.value:e}const rt={get:(e,t,n)=>ot(Reflect.get(e,t,n)),set:(e,t,n,l)=>{const a=e[t];return et(a)&&!et(n)?(a.value=n,!0):Reflect.set(e,t,n,l)}};function it(e){return Ge(e)?e:new Proxy(e,rt)}function st(e){const t=_(e)?new Array(e.length):{};for(const n in e)t[n]=ct(e,n);return t}class ut{constructor(e,t){this._object=e,this._key=t,this.__v_isRef=!0}get value(){return this._object[this._key]}set value(e){this._object[this._key]=e}}function ct(e,t){return et(e[t])?e[t]:new ut(e,t)}class dt{constructor(e,t,n){this._setter=t,this._dirty=!0,this.__v_isRef=!0,this.effect=ne(e,{lazy:!0,scheduler:()=>{this._dirty||(this._dirty=!0,de(Ze(this),"set","value"))}}),this.__v_isReadonly=n}get value(){return this._dirty&&(this._value=this.effect(),this._dirty=!1),ce(Ze(this),0,"value"),this._value}set value(e){this._setter(e)}}function pt(e,t,n,l){let a;try{a=l?e(...l):e()}catch(e){ht(e,t,n)}return a}function ft(e,t,n,l){if(M(e)){const a=pt(e,t,n,l);return a&&N(a)&&a.catch((e=>{ht(e,t,n)})),a}const a=[];for(let o=0;o<e.length;o++)a.push(ft(e[o],t,n,l));return a}function ht(e,t,n,l=!0){if(t&&t.vnode,t){let l=t.parent;const a=t.proxy,o=n;for(;l;){const t=l.ec;if(t)for(let n=0;n<t.length;n++)if(!1===t[n](e,a,o))return;l=l.parent}const r=t.appContext.config.errorHandler;if(r)return void pt(r,null,10,[e,a,o])}!function(e,t,n,l=!0){console.error(e)}(e,0,0,l)}let vt=!1,mt=!1;const gt=[];let bt=0;const yt=[];let xt=null,kt=0;const wt=[];let Ct=null,_t=0;const At=Promise.resolve();let St=null,Et=null;function Mt(e){const t=St||At;return e?t.then(this?e.bind(this):e):t}function Ot(e){gt.length&&gt.includes(e,vt&&e.allowRecurse?bt+1:bt)||e===Et||(gt.push(e),Dt())}function Dt(){vt||mt||(mt=!0,St=At.then(Vt))}function Tt(e,t,n,l){_(e)?n.push(...e):t&&t.includes(e,e.allowRecurse?l+1:l)||n.push(e),Dt()}function Nt(e,t=null){if(yt.length){for(Et=t,xt=[...new Set(yt)],yt.length=0,kt=0;kt<xt.length;kt++)xt[kt]();xt=null,kt=0,Et=null,Nt(e,t)}}function Bt(e){if(wt.length){const e=[...new Set(wt)];if(wt.length=0,Ct)return void Ct.push(...e);for(Ct=e,Ct.sort(((e,t)=>Pt(e)-Pt(t))),_t=0;_t<Ct.length;_t++)Ct[_t]();Ct=null,_t=0}}const Pt=e=>null==e.id?1/0:e.id;function Vt(e){mt=!1,vt=!0,Nt(e),gt.sort(((e,t)=>Pt(e)-Pt(t)));try{for(bt=0;bt<gt.length;bt++){const e=gt[bt];e&&pt(e,null,14)}}finally{bt=0,gt.length=0,Bt(),vt=!1,St=null,(gt.length||wt.length)&&Vt(e)}}new Set,new Map;const It=Ft("component:added"),Lt=Ft("component:updated"),zt=Ft("component:removed");function Ft(e){return e=>{}}function $t(e,t,...n){const l=e.vnode.props||f;let a=n;const o=t.startsWith("update:"),r=o&&t.slice(7);if(r&&r in l){const e=`${"modelValue"===r?"model":r}Modifiers`,{number:t,trim:o}=l[e]||f;o?a=n.map((e=>e.trim())):t&&(a=n.map(U))}__VUE_PROD_DEVTOOLS__;let i=W($(t)),s=l[i];!s&&o&&(i=W(j(t)),s=l[i]),s&&ft(s,e,6,a);const u=l[i+"Once"];if(u){if(e.emitted){if(e.emitted[i])return}else(e.emitted={})[i]=!0;ft(u,e,6,a)}}function Rt(e,t,n=!1){if(!t.deopt&&void 0!==e.__emits)return e.__emits;const l=e.emits;let a={},o=!1;if(__VUE_OPTIONS_API__&&!M(e)){const l=e=>{o=!0,x(a,Rt(e,t,!0))};!n&&t.mixins.length&&t.mixins.forEach(l),e.extends&&l(e.extends),e.mixins&&e.mixins.forEach(l)}return l||o?(_(l)?l.forEach((e=>a[e]=null)):x(a,l),e.__emits=a):e.__emits=null}function jt(e,t){return!(!e||!b(t))&&(t=t.slice(2).replace(/Once$/,""),C(e,t[0].toLowerCase()+t.slice(1))||C(e,j(t))||C(e,t))}let Ht=null;function Wt(e){Ht=e}function qt(e){const{type:t,vnode:n,proxy:l,withProxy:a,props:o,propsOptions:[r],slots:i,attrs:s,emit:u,render:c,renderCache:d,data:p,setupState:f,ctx:h}=e;let v;Ht=e;try{let e;if(4&n.shapeFlag){const t=a||l;v=Vl(c.call(t,t,d,o,f,p,h)),e=s}else{const n=t;v=Vl(n.length>1?n(o,{attrs:s,slots:i,emit:u}):n(o,null)),e=t.props?s:Yt(s)}let m=v;if(!1!==t.inheritAttrs&&e){const t=Object.keys(e),{shapeFlag:n}=m;t.length&&(1&n||6&n)&&(r&&t.some(y)&&(e=Kt(e,r)),m=Nl(m,e))}n.dirs&&(m.dirs=m.dirs?m.dirs.concat(n.dirs):n.dirs),n.transition&&(m.transition=n.transition),v=m}catch(t){ht(t,e,1),v=Tl(yl)}return Ht=null,v}const Yt=e=>{let t;for(const n in e)("class"===n||"style"===n||b(n))&&((t||(t={}))[n]=e[n]);return t},Kt=(e,t)=>{const n={};for(const l in e)y(l)&&l.slice(9)in t||(n[l]=e[l]);return n};function Ut(e,t,n){const l=Object.keys(t);if(l.length!==Object.keys(e).length)return!0;for(let a=0;a<l.length;a++){const o=l[a];if(t[o]!==e[o]&&!jt(n,o))return!0}return!1}function Gt(e){return M(e)&&(e=e()),_(e)&&(e=function(e){let t;for(let n=0;n<e.length;n++){const l=e[n];if(!Sl(l))return;if(l.type!==yl||"v-if"===l.children){if(t)return;t=l}}return t}(e)),Vl(e)}let Xt=0;const Jt=e=>Xt+=e;function Zt(e,t,n={},l){let a=e[t];Xt++,Cl();const o=a&&Qt(a(n)),r=Al(gl,{key:n.key||`_${t}`},o||(l?l():[]),o&&1===e._?64:-2);return Xt--,r}function Qt(e){return e.some((e=>!Sl(e)||e.type!==yl&&!(e.type===gl&&!Qt(e.children))))?e:null}function en(e,t=Ht){if(!t)return e;const n=(...n)=>{Xt||Cl(!0);const l=Ht;Wt(t);const a=e(...n);return Wt(l),Xt||_l(),a};return n._c=!0,n}let tn=null;const nn=[];function ln(e){nn.push(tn=e)}function an(){nn.pop(),tn=nn[nn.length-1]||null}function on(e,t,n,l){const[a,o]=e.propsOptions;if(t)for(const o in t){const r=t[o];if(L(o))continue;let i;a&&C(a,i=$(o))?n[i]=r:jt(e.emitsOptions,o)||(l[o]=r)}if(o){const t=Ze(n);for(let l=0;l<o.length;l++){const r=o[l];n[r]=rn(a,t,r,t[r],e)}}}function rn(e,t,n,l,a){const o=e[n];if(null!=o){const e=C(o,"default");if(e&&void 0===l){const e=o.default;o.type!==Function&&M(e)?(aa(a),l=e(t),aa(null)):l=e}o[0]&&(C(t,n)||e?!o[1]||""!==l&&l!==j(n)||(l=!0):l=!1)}return l}function sn(e,t,n=!1){if(!t.deopt&&e.__props)return e.__props;const l=e.props,a={},o=[];let r=!1;if(__VUE_OPTIONS_API__&&!M(e)){const l=e=>{r=!0;const[n,l]=sn(e,t,!0);x(a,n),l&&o.push(...l)};!n&&t.mixins.length&&t.mixins.forEach(l),e.extends&&l(e.extends),e.mixins&&e.mixins.forEach(l)}if(!l&&!r)return e.__props=h;if(_(l))for(let e=0;e<l.length;e++){const t=$(l[e]);un(t)&&(a[t]=f)}else if(l)for(const e in l){const t=$(e);if(un(t)){const n=l[e],r=a[t]=_(n)||M(n)?{type:n}:n;if(r){const e=pn(Boolean,r.type),n=pn(String,r.type);r[0]=e>-1,r[1]=n<0||e<n,(e>-1||C(r,"default"))&&o.push(t)}}}return e.__props=[a,o]}function un(e){return"$"!==e[0]}function cn(e){const t=e&&e.toString().match(/^\s*function (\w+)/);return t?t[1]:""}function dn(e,t){return cn(e)===cn(t)}function pn(e,t){if(_(t)){for(let n=0,l=t.length;n<l;n++)if(dn(t[n],e))return n}else if(M(t))return dn(t,e)?0:-1;return-1}function fn(e,t,n=na,l=!1){if(n){const a=n[e]||(n[e]=[]),o=t.__weh||(t.__weh=(...l)=>{if(n.isUnmounted)return;se(),aa(n);const a=ft(t,n,e,l);return aa(null),ue(),a});return l?a.unshift(o):a.push(o),o}}const hn=e=>(t,n=na)=>!oa&&fn(e,t,n),vn=hn("bm"),mn=hn("m"),gn=hn("bu"),bn=hn("u"),yn=hn("bum"),xn=hn("um"),kn=hn("rtg"),wn=hn("rtc");function Cn(e,t){return Sn(e,null,t)}const _n={};function An(e,t,n){return Sn(e,t,n)}function Sn(e,t,{immediate:n,deep:l,flush:a,onTrack:o,onTrigger:r}=f,i=na){let s,u,c=!1;if(et(e)?(s=()=>e.value,c=!!e._shallow):Ge(e)?(s=()=>e,l=!0):s=_(e)?()=>e.map((e=>et(e)?e.value:Ge(e)?Mn(e):M(e)?pt(e,i,2):void 0)):M(e)?t?()=>pt(e,i,2):()=>{if(!i||!i.isUnmounted)return u&&u(),pt(e,i,3,[d])}:v,t&&l){const e=s;s=()=>Mn(e())}const d=e=>{u=g.options.onStop=()=>{pt(e,i,4)}};let p=_(e)?[]:_n;const h=()=>{if(g.active)if(t){const e=g();(l||c||q(e,p))&&(u&&u(),ft(t,i,3,[e,p===_n?void 0:p,d]),p=e)}else g()};let m;h.allowRecurse=!!t,m="sync"===a?h:"post"===a?()=>tl(h,i&&i.suspense):()=>{!i||i.isMounted?function(e){Tt(e,xt,yt,kt)}(h):h()};const g=ne(s,{lazy:!0,onTrack:o,onTrigger:r,scheduler:m});return sa(g,i),t?n?h():p=g():"post"===a?tl(g,i&&i.suspense):g(),()=>{le(g),i&&k(i.effects,g)}}function En(e,t,n){const l=this.proxy;return Sn(O(e)?()=>l[e]:e.bind(l),t.bind(l),n,this)}function Mn(e,t=new Set){if(!T(e)||t.has(e))return e;if(t.add(e),et(e))Mn(e.value,t);else if(_(e))for(let n=0;n<e.length;n++)Mn(e[n],t);else if(S(e)||A(e))e.forEach((e=>{Mn(e,t)}));else for(const n in e)Mn(e[n],t);return e}function On(){const e={isMounted:!1,isLeaving:!1,isUnmounting:!1,leavingVNodes:new Map};return mn((()=>{e.isMounted=!0})),yn((()=>{e.isUnmounting=!0})),e}const Dn=[Function,Array],Tn={name:"BaseTransition",props:{mode:String,appear:Boolean,persisted:Boolean,onBeforeEnter:Dn,onEnter:Dn,onAfterEnter:Dn,onEnterCancelled:Dn,onBeforeLeave:Dn,onLeave:Dn,onAfterLeave:Dn,onLeaveCancelled:Dn,onBeforeAppear:Dn,onAppear:Dn,onAfterAppear:Dn,onAppearCancelled:Dn},setup(e,{slots:t}){const n=la(),l=On();let a;return()=>{const o=t.default&&Ln(t.default(),!0);if(!o||!o.length)return;const r=Ze(e),{mode:i}=r,s=o[0];if(l.isLeaving)return Pn(s);const u=Vn(s);if(!u)return Pn(s);const c=Bn(u,r,l,n);In(u,c);const d=n.subTree,p=d&&Vn(d);let f=!1;const{getTransitionKey:h}=u.type;if(h){const e=h();void 0===a?a=e:e!==a&&(a=e,f=!0)}if(p&&p.type!==yl&&(!El(u,p)||f)){const e=Bn(p,r,l,n);if(In(p,e),"out-in"===i)return l.isLeaving=!0,e.afterLeave=()=>{l.isLeaving=!1,n.update()},Pn(s);"in-out"===i&&(e.delayLeave=(e,t,n)=>{Nn(l,p)[String(p.key)]=p,e._leaveCb=()=>{t(),e._leaveCb=void 0,delete c.delayedLeave},c.delayedLeave=n})}return s}}};function Nn(e,t){const{leavingVNodes:n}=e;let l=n.get(t.type);return l||(l=Object.create(null),n.set(t.type,l)),l}function Bn(e,t,n,l){const{appear:a,mode:o,persisted:r=!1,onBeforeEnter:i,onEnter:s,onAfterEnter:u,onEnterCancelled:c,onBeforeLeave:d,onLeave:p,onAfterLeave:f,onLeaveCancelled:h,onBeforeAppear:v,onAppear:m,onAfterAppear:g,onAppearCancelled:b}=t,y=String(e.key),x=Nn(n,e),k=(e,t)=>{e&&ft(e,l,9,t)},w={mode:o,persisted:r,beforeEnter(t){let l=i;if(!n.isMounted){if(!a)return;l=v||i}t._leaveCb&&t._leaveCb(!0);const o=x[y];o&&El(e,o)&&o.el._leaveCb&&o.el._leaveCb(),k(l,[t])},enter(e){let t=s,l=u,o=c;if(!n.isMounted){if(!a)return;t=m||s,l=g||u,o=b||c}let r=!1;const i=e._enterCb=t=>{r||(r=!0,k(t?o:l,[e]),w.delayedLeave&&w.delayedLeave(),e._enterCb=void 0)};t?(t(e,i),t.length<=1&&i()):i()},leave(t,l){const a=String(e.key);if(t._enterCb&&t._enterCb(!0),n.isUnmounting)return l();k(d,[t]);let o=!1;const r=t._leaveCb=n=>{o||(o=!0,l(),k(n?h:f,[t]),t._leaveCb=void 0,x[a]===e&&delete x[a])};x[a]=e,p?(p(t,r),p.length<=1&&r()):r()},clone:e=>Bn(e,t,n,l)};return w}function Pn(e){if(zn(e))return(e=Nl(e)).children=null,e}function Vn(e){return zn(e)?e.children?e.children[0]:void 0:e}function In(e,t){6&e.shapeFlag&&e.component?In(e.component.subTree,t):128&e.shapeFlag?(e.ssContent.transition=t.clone(e.ssContent),e.ssFallback.transition=t.clone(e.ssFallback)):e.transition=t}function Ln(e,t=!1){let n=[],l=0;for(let a=0;a<e.length;a++){const o=e[a];o.type===gl?(128&o.patchFlag&&l++,n=n.concat(Ln(o.children,t))):(t||o.type!==yl)&&n.push(o)}if(l>1)for(let e=0;e<n.length;e++)n[e].patchFlag=-2;return n}const zn=e=>e.type.__isKeepAlive;function Fn(e,t){Rn(e,"a",t)}function $n(e,t){Rn(e,"da",t)}function Rn(e,t,n=na){const l=e.__wdc||(e.__wdc=()=>{let t=n;for(;t;){if(t.isDeactivated)return;t=t.parent}e()});if(fn(t,l,n),n){let e=n.parent;for(;e&&e.parent;)zn(e.parent.vnode)&&jn(l,t,n,e),e=e.parent}}function jn(e,t,n,l){const a=fn(t,e,l,!0);xn((()=>{k(l[t],a)}),n)}RegExp,RegExp;const Hn=e=>"_"===e[0]||"$stable"===e,Wn=e=>_(e)?e.map(Vl):[Vl(e)],qn=(e,t,n)=>en((e=>Wn(t(e))),n),Yn=(e,t)=>{const n=e._ctx;for(const l in e){if(Hn(l))continue;const a=e[l];if(M(a))t[l]=qn(0,a,n);else if(null!=a){const e=Wn(a);t[l]=()=>e}}},Kn=(e,t)=>{const n=Wn(t);e.slots.default=()=>n};function Un(e,t){if(null===Ht)return e;const n=Ht.proxy,l=e.dirs||(e.dirs=[]);for(let e=0;e<t.length;e++){let[a,o,r,i=f]=t[e];M(a)&&(a={mounted:a,updated:a}),l.push({dir:a,instance:n,value:o,oldValue:void 0,arg:r,modifiers:i})}return e}function Gn(e,t,n,l){const a=e.dirs,o=t&&t.dirs;for(let r=0;r<a.length;r++){const i=a[r];o&&(i.oldValue=o[r].value);const s=i.dir[l];s&&ft(s,n,8,[e.el,i,e,t])}}function Xn(){return{app:null,config:{isNativeTag:m,performance:!1,globalProperties:{},optionMergeStrategies:{},isCustomElement:m,errorHandler:void 0,warnHandler:void 0},mixins:[],components:{},directives:{},provides:Object.create(null)}}let Jn=0;function Zn(e,t){return function(n,l=null){null==l||T(l)||(l=null);const a=Xn(),o=new Set;let r=!1;const i=a.app={_uid:Jn++,_component:n,_props:l,_container:null,_context:a,version:ha,get config(){return a.config},set config(e){},use:(e,...t)=>(o.has(e)||(e&&M(e.install)?(o.add(e),e.install(i,...t)):M(e)&&(o.add(e),e(i,...t))),i),mixin:e=>(__VUE_OPTIONS_API__&&(a.mixins.includes(e)||(a.mixins.push(e),(e.props||e.emits)&&(a.deopt=!0))),i),component:(e,t)=>t?(a.components[e]=t,i):a.components[e],directive:(e,t)=>t?(a.directives[e]=t,i):a.directives[e],mount(o,s){if(!r){const u=Tl(n,l);return u.appContext=a,s&&t?t(u,o):e(u,o),r=!0,i._container=o,o.__vue_app__=i,__VUE_PROD_DEVTOOLS__,u.component.proxy}},unmount(){r&&(e(null,i._container),__VUE_PROD_DEVTOOLS__)},provide:(e,t)=>(a.provides[e]=t,i)};return i}}function Qn(e){return M(e)?{setup:e,name:e.name}:e}const el={scheduler:Ot,allowRecurse:!0},tl=function(e,t){t&&t.pendingBranch?_(e)?t.effects.push(...e):t.effects.push(e):Tt(e,Ct,wt,_t)},nl=(e,t,n,l)=>{if(_(e))return void e.forEach(((e,a)=>nl(e,t&&(_(t)?t[a]:t),n,l)));let a;a=!l||l.type.__asyncLoader?null:4&l.shapeFlag?l.component.exposed||l.component.proxy:l.el;const{i:o,r}=e,i=t&&t.r,s=o.refs===f?o.refs={}:o.refs,u=o.setupState;if(null!=i&&i!==r&&(O(i)?(s[i]=null,C(u,i)&&(u[i]=null)):et(i)&&(i.value=null)),O(r)){const e=()=>{s[r]=a,C(u,r)&&(u[r]=a)};a?(e.id=-1,tl(e,n)):e()}else if(et(r)){const e=()=>{r.value=a};a?(e.id=-1,tl(e,n)):e()}else M(r)&&pt(r,o,12,[a,s])};function ll(e,t){!function(){let e=!1;"boolean"!=typeof __VUE_OPTIONS_API__&&(e=!0,X().__VUE_OPTIONS_API__=!0),"boolean"!=typeof __VUE_PROD_DEVTOOLS__&&(e=!0,X().__VUE_PROD_DEVTOOLS__=!1)}();const{insert:n,remove:l,patchProp:a,forcePatchProp:o,createElement:r,createText:i,createComment:s,setText:u,setElementText:c,parentNode:d,nextSibling:p,setScopeId:m=v,cloneNode:g,insertStaticContent:b}=e,y=(e,t,n,l=null,a=null,o=null,r=!1,i=!1)=>{e&&!El(e,t)&&(l=ee(e),U(e,a,o,!0),e=null),-2===t.patchFlag&&(i=!1,t.dynamicChildren=null);const{type:s,ref:u,shapeFlag:c}=t;switch(s){case bl:k(e,t,n,l);break;case yl:w(e,t,n,l);break;case xl:null==e&&_(t,n,l,r);break;case gl:B(e,t,n,l,a,o,r,i);break;default:1&c?A(e,t,n,l,a,o,r,i):6&c?P(e,t,n,l,a,o,r,i):(64&c||128&c)&&s.process(e,t,n,l,a,o,r,i,ae)}null!=u&&a&&nl(u,e&&e.ref,o,t)},k=(e,t,l,a)=>{if(null==e)n(t.el=i(t.children),l,a);else{const n=t.el=e.el;t.children!==e.children&&u(n,t.children)}},w=(e,t,l,a)=>{null==e?n(t.el=s(t.children||""),l,a):t.el=e.el},_=(e,t,n,l)=>{[e.el,e.anchor]=b(e.children,t,n,l)},A=(e,t,n,l,a,o,r,i)=>{r=r||"svg"===t.type,null==e?S(t,n,l,a,o,r,i):O(e,t,a,o,r,i)},S=(e,t,l,o,i,s,u)=>{let d,p;const{type:f,props:h,shapeFlag:v,transition:m,scopeId:b,patchFlag:y,dirs:x}=e;if(e.el&&void 0!==g&&-1===y)d=e.el=g(e.el);else{if(d=e.el=r(e.type,s,h&&h.is),8&v?c(d,e.children):16&v&&M(e.children,d,null,o,i,s&&"foreignObject"!==f,u||!!e.dynamicChildren),x&&Gn(e,null,o,"created"),h){for(const t in h)L(t)||a(d,t,null,h[t],s,e.children,o,i,Q);(p=h.onVnodeBeforeMount)&&al(p,o,e)}E(d,b,e,o)}__VUE_PROD_DEVTOOLS__&&(Object.defineProperty(d,"__vnode",{value:e,enumerable:!1}),Object.defineProperty(d,"__vueParentComponent",{value:o,enumerable:!1})),x&&Gn(e,null,o,"beforeMount");const k=(!i||i&&!i.pendingBranch)&&m&&!m.persisted;k&&m.beforeEnter(d),n(d,t,l),((p=h&&h.onVnodeMounted)||k||x)&&tl((()=>{p&&al(p,o,e),k&&m.enter(d),x&&Gn(e,null,o,"mounted")}),i)},E=(e,t,n,l)=>{if(t&&m(e,t),l){const a=l.type.__scopeId;a&&a!==t&&m(e,a+"-s"),n===l.subTree&&E(e,l.vnode.scopeId,l.vnode,l.parent)}},M=(e,t,n,l,a,o,r,i=0)=>{for(let s=i;s<e.length;s++){const i=e[s]=r?Il(e[s]):Vl(e[s]);y(null,i,t,n,l,a,o,r)}},O=(e,t,n,l,r,i)=>{const s=t.el=e.el;let{patchFlag:u,dynamicChildren:d,dirs:p}=t;u|=16&e.patchFlag;const h=e.props||f,v=t.props||f;let m;if((m=v.onVnodeBeforeUpdate)&&al(m,n,t,e),p&&Gn(t,e,n,"beforeUpdate"),u>0){if(16&u)T(s,t,h,v,n,l,r);else if(2&u&&h.class!==v.class&&a(s,"class",null,v.class,r),4&u&&a(s,"style",h.style,v.style,r),8&u){const i=t.dynamicProps;for(let t=0;t<i.length;t++){const u=i[t],c=h[u],d=v[u];(d!==c||o&&o(s,u))&&a(s,u,c,d,r,e.children,n,l,Q)}}1&u&&e.children!==t.children&&c(s,t.children)}else i||null!=d||T(s,t,h,v,n,l,r);const g=r&&"foreignObject"!==t.type;d?D(e.dynamicChildren,d,s,n,l,g):i||R(e,t,s,null,n,l,g),((m=v.onVnodeUpdated)||p)&&tl((()=>{m&&al(m,n,t,e),p&&Gn(t,e,n,"updated")}),l)},D=(e,t,n,l,a,o)=>{for(let r=0;r<t.length;r++){const i=e[r],s=t[r],u=i.type===gl||!El(i,s)||6&i.shapeFlag||64&i.shapeFlag?d(i.el):n;y(i,s,u,null,l,a,o,!0)}},T=(e,t,n,l,r,i,s)=>{if(n!==l){for(const u in l){if(L(u))continue;const c=l[u],d=n[u];(c!==d||o&&o(e,u))&&a(e,u,d,c,s,t.children,r,i,Q)}if(n!==f)for(const o in n)L(o)||o in l||a(e,o,n[o],null,s,t.children,r,i,Q)}},B=(e,t,l,a,o,r,s,u)=>{const c=t.el=e?e.el:i(""),d=t.anchor=e?e.anchor:i("");let{patchFlag:p,dynamicChildren:f}=t;p>0&&(u=!0),null==e?(n(c,l,a),n(d,l,a),M(t.children,l,d,o,r,s,u)):p>0&&64&p&&f?(D(e.dynamicChildren,f,l,o,r,s),(null!=t.key||o&&t===o.subTree)&&ol(e,t,!0)):R(e,t,l,d,o,r,s,u)},P=(e,t,n,l,a,o,r,i)=>{null==e?512&t.shapeFlag?a.ctx.activate(t,n,l,r,i):V(t,n,l,a,o,r,i):I(e,t,i)},V=(e,t,n,l,a,o,r)=>{const i=e.component=function(e,t,n){const l=e.type,a=(t?t.appContext:e.appContext)||ea,o={uid:ta++,vnode:e,type:l,parent:t,appContext:a,root:null,next:null,subTree:null,update:null,render:null,proxy:null,exposed:null,withProxy:null,effects:null,provides:t?t.provides:Object.create(a.provides),accessCache:null,renderCache:[],components:null,directives:null,propsOptions:sn(l,a),emitsOptions:Rt(l,a),emit:null,emitted:null,ctx:f,data:f,props:f,attrs:f,slots:f,refs:f,setupState:f,setupContext:null,suspense:n,suspenseId:n?n.pendingId:0,asyncDep:null,asyncResolved:!1,isMounted:!1,isUnmounted:!1,isDeactivated:!1,bc:null,c:null,bm:null,m:null,bu:null,u:null,um:null,bum:null,da:null,a:null,rtg:null,rtc:null,ec:null};return o.ctx={_:o},o.root=t?t.root:o,o.emit=$t.bind(null,o),__VUE_PROD_DEVTOOLS__&&It(o),o}(e,l,a);if(zn(e)&&(i.ctx.renderer=ae),function(e,t=!1){oa=t;const{props:n,children:l,shapeFlag:a}=e.vnode,o=4&a;(function(e,t,n,l=!1){const a={},o={};K(o,Ml,1),on(e,t,a,o),n?e.props=l?a:Ue(a,!1,we,je):e.type.props?e.props=a:e.props=o,e.attrs=o})(e,n,o,t),((e,t)=>{if(32&e.vnode.shapeFlag){const n=t._;n?(e.slots=t,K(t,"_",n)):Yn(t,e.slots={})}else e.slots={},t&&Kn(e,t);K(e.slots,Ml,1)})(e,l);o&&function(e,t){const n=e.type;e.accessCache=Object.create(null),e.proxy=new Proxy(e.ctx,Zl);const{setup:l}=n;if(l){const n=e.setupContext=l.length>1?function(e){const t=t=>{e.exposed=it(t)};return{attrs:e.attrs,slots:e.slots,emit:e.emit,expose:t}}(e):null;na=e,se();const a=pt(l,e,0,[e.props,n]);if(ue(),na=null,N(a)){if(t)return a.then((t=>{ra(e,t)}));e.asyncDep=a}else ra(e,a)}else ia(e)}(e,t);oa=!1}(i),i.asyncDep){if(a&&a.registerDep(i,z),!e.el){const e=i.subTree=Tl(yl);w(null,e,t,n)}}else z(i,e,t,n,a,o,r)},I=(e,t,n)=>{const l=t.component=e.component;if(function(e,t,n){const{props:l,children:a,component:o}=e,{props:r,children:i,patchFlag:s}=t,u=o.emitsOptions;if(t.dirs||t.transition)return!0;if(!(n&&s>=0))return!(!a&&!i||i&&i.$stable)||l!==r&&(l?!r||Ut(l,r,u):!!r);if(1024&s)return!0;if(16&s)return l?Ut(l,r,u):!!r;if(8&s){const e=t.dynamicProps;for(let t=0;t<e.length;t++){const n=e[t];if(r[n]!==l[n]&&!jt(u,n))return!0}}return!1}(e,t,n)){if(l.asyncDep&&!l.asyncResolved)return void F(l,t,n);l.next=t,function(e){const t=gt.indexOf(e);t>-1&&gt.splice(t,1)}(l.update),l.update()}else t.component=e.component,t.el=e.el,l.vnode=t},z=(e,t,n,l,a,o,r)=>{e.update=ne((function(){if(e.isMounted){let t,{next:n,bu:l,u:i,parent:s,vnode:u}=e,c=n;n?(n.el=u.el,F(e,n,r)):n=u,l&&Y(l),(t=n.props&&n.props.onVnodeBeforeUpdate)&&al(t,s,n,u);const p=qt(e),f=e.subTree;e.subTree=p,y(f,p,d(f.el),ee(f),e,a,o),n.el=p.el,null===c&&function({vnode:e,parent:t},n){for(;t&&t.subTree===e;)(e=t.vnode).el=n,t=t.parent}(e,p.el),i&&tl(i,a),(t=n.props&&n.props.onVnodeUpdated)&&tl((()=>{al(t,s,n,u)}),a),__VUE_PROD_DEVTOOLS__&&Lt(e)}else{let r;const{el:i,props:s}=t,{bm:u,m:c,parent:d}=e;u&&Y(u),(r=s&&s.onVnodeBeforeMount)&&al(r,d,t);const p=e.subTree=qt(e);i&&re?re(t.el,p,e,a):(y(null,p,n,l,e,a,o),t.el=p.el),c&&tl(c,a),(r=s&&s.onVnodeMounted)&&tl((()=>{al(r,d,t)}),a);const{a:f}=e;f&&256&t.shapeFlag&&tl(f,a),e.isMounted=!0}}),el)},F=(e,t,n)=>{t.component=e;const l=e.vnode.props;e.vnode=t,e.next=null,function(e,t,n,l){const{props:a,attrs:o,vnode:{patchFlag:r}}=e,i=Ze(a),[s]=e.propsOptions;if(!(l||r>0)||16&r){let l;on(e,t,a,o);for(const o in i)t&&(C(t,o)||(l=j(o))!==o&&C(t,l))||(s?!n||void 0===n[o]&&void 0===n[l]||(a[o]=rn(s,t||f,o,void 0,e)):delete a[o]);if(o!==i)for(const e in o)t&&C(t,e)||delete o[e]}else if(8&r){const n=e.vnode.dynamicProps;for(let l=0;l<n.length;l++){const r=n[l],u=t[r];if(s)if(C(o,r))o[r]=u;else{const t=$(r);a[t]=rn(s,i,t,u,e)}else o[r]=u}}de(e,"set","$attrs")}(e,t.props,l,n),((e,t)=>{const{vnode:n,slots:l}=e;let a=!0,o=f;if(32&n.shapeFlag){const e=t._;e?1===e?a=!1:x(l,t):(a=!t.$stable,Yn(t,l)),o=t}else t&&(Kn(e,t),o={default:1});if(a)for(const e in l)Hn(e)||e in o||delete l[e]})(e,t.children),Nt(void 0,e.update)},R=(e,t,n,l,a,o,r,i=!1)=>{const s=e&&e.children,u=e?e.shapeFlag:0,d=t.children,{patchFlag:p,shapeFlag:f}=t;if(p>0){if(128&p)return void W(s,d,n,l,a,o,r,i);if(256&p)return void H(s,d,n,l,a,o,r,i)}8&f?(16&u&&Q(s,a,o),d!==s&&c(n,d)):16&u?16&f?W(s,d,n,l,a,o,r,i):Q(s,a,o,!0):(8&u&&c(n,""),16&f&&M(d,n,l,a,o,r,i))},H=(e,t,n,l,a,o,r,i)=>{t=t||h;const s=(e=e||h).length,u=t.length,c=Math.min(s,u);let d;for(d=0;d<c;d++){const l=t[d]=i?Il(t[d]):Vl(t[d]);y(e[d],l,n,null,a,o,r,i)}s>u?Q(e,a,o,!0,!1,c):M(t,n,l,a,o,r,i,c)},W=(e,t,n,l,a,o,r,i)=>{let s=0;const u=t.length;let c=e.length-1,d=u-1;for(;s<=c&&s<=d;){const l=e[s],u=t[s]=i?Il(t[s]):Vl(t[s]);if(!El(l,u))break;y(l,u,n,null,a,o,r,i),s++}for(;s<=c&&s<=d;){const l=e[c],s=t[d]=i?Il(t[d]):Vl(t[d]);if(!El(l,s))break;y(l,s,n,null,a,o,r,i),c--,d--}if(s>c){if(s<=d){const e=d+1,c=e<u?t[e].el:l;for(;s<=d;)y(null,t[s]=i?Il(t[s]):Vl(t[s]),n,c,a,o,r),s++}}else if(s>d)for(;s<=c;)U(e[s],a,o,!0),s++;else{const p=s,f=s,v=new Map;for(s=f;s<=d;s++){const e=t[s]=i?Il(t[s]):Vl(t[s]);null!=e.key&&v.set(e.key,s)}let m,g=0;const b=d-f+1;let x=!1,k=0;const w=new Array(b);for(s=0;s<b;s++)w[s]=0;for(s=p;s<=c;s++){const l=e[s];if(g>=b){U(l,a,o,!0);continue}let u;if(null!=l.key)u=v.get(l.key);else for(m=f;m<=d;m++)if(0===w[m-f]&&El(l,t[m])){u=m;break}void 0===u?U(l,a,o,!0):(w[u-f]=s+1,u>=k?k=u:x=!0,y(l,t[u],n,null,a,o,r,i),g++)}const C=x?function(e){const t=e.slice(),n=[0];let l,a,o,r,i;const s=e.length;for(l=0;l<s;l++){const s=e[l];if(0!==s){if(a=n[n.length-1],e[a]<s){t[l]=a,n.push(l);continue}for(o=0,r=n.length-1;o<r;)i=(o+r)/2|0,e[n[i]]<s?o=i+1:r=i;s<e[n[o]]&&(o>0&&(t[l]=n[o-1]),n[o]=l)}}for(o=n.length,r=n[o-1];o-- >0;)n[o]=r,r=t[r];return n}(w):h;for(m=C.length-1,s=b-1;s>=0;s--){const e=f+s,i=t[e],c=e+1<u?t[e+1].el:l;0===w[s]?y(null,i,n,c,a,o,r):x&&(m<0||s!==C[m]?q(i,n,c,2):m--)}}},q=(e,t,l,a,o=null)=>{const{el:r,type:i,transition:s,children:u,shapeFlag:c}=e;if(6&c)q(e.component.subTree,t,l,a);else if(128&c)e.suspense.move(t,l,a);else if(64&c)i.move(e,t,l,ae);else if(i!==gl)if(i!==xl)if(2!==a&&1&c&&s)if(0===a)s.beforeEnter(r),n(r,t,l),tl((()=>s.enter(r)),o);else{const{leave:e,delayLeave:a,afterLeave:o}=s,i=()=>n(r,t,l),u=()=>{e(r,(()=>{i(),o&&o()}))};a?a(r,i,u):u()}else n(r,t,l);else(({el:e,anchor:t},l,a)=>{let o;for(;e&&e!==t;)o=p(e),n(e,l,a),e=o;n(t,l,a)})(e,t,l);else{n(r,t,l);for(let e=0;e<u.length;e++)q(u[e],t,l,a);n(e.anchor,t,l)}},U=(e,t,n,l=!1,a=!1)=>{const{type:o,props:r,ref:i,children:s,dynamicChildren:u,shapeFlag:c,patchFlag:d,dirs:p}=e;if(null!=i&&nl(i,null,n,null),256&c)return void t.ctx.deactivate(e);const f=1&c&&p;let h;if((h=r&&r.onVnodeBeforeUnmount)&&al(h,t,e),6&c)Z(e.component,n,l);else{if(128&c)return void e.suspense.unmount(n,l);f&&Gn(e,null,t,"beforeUnmount"),u&&(o!==gl||d>0&&64&d)?Q(u,t,n,!1,!0):(o===gl&&(128&d||256&d)||!a&&16&c)&&Q(s,t,n),64&c&&(l||!rl(e.props))&&e.type.remove(e,ae),l&&G(e)}((h=r&&r.onVnodeUnmounted)||f)&&tl((()=>{h&&al(h,t,e),f&&Gn(e,null,t,"unmounted")}),n)},G=e=>{const{type:t,el:n,anchor:a,transition:o}=e;if(t===gl)return void J(n,a);if(t===xl)return void(({el:e,anchor:t})=>{let n;for(;e&&e!==t;)n=p(e),l(e),e=n;l(t)})(e);const r=()=>{l(n),o&&!o.persisted&&o.afterLeave&&o.afterLeave()};if(1&e.shapeFlag&&o&&!o.persisted){const{leave:t,delayLeave:l}=o,a=()=>t(n,r);l?l(e.el,r,a):a()}else r()},J=(e,t)=>{let n;for(;e!==t;)n=p(e),l(e),e=n;l(t)},Z=(e,t,n)=>{const{bum:l,effects:a,update:o,subTree:r,um:i}=e;if(l&&Y(l),a)for(let e=0;e<a.length;e++)le(a[e]);o&&(le(o),U(r,e,t,n)),i&&tl(i,t),tl((()=>{e.isUnmounted=!0}),t),t&&t.pendingBranch&&!t.isUnmounted&&e.asyncDep&&!e.asyncResolved&&e.suspenseId===t.pendingId&&(t.deps--,0===t.deps&&t.resolve()),__VUE_PROD_DEVTOOLS__&&zt(e)},Q=(e,t,n,l=!1,a=!1,o=0)=>{for(let r=o;r<e.length;r++)U(e[r],t,n,l,a)},ee=e=>6&e.shapeFlag?ee(e.component.subTree):128&e.shapeFlag?e.suspense.next():p(e.anchor||e.el),te=(e,t)=>{null==e?t._vnode&&U(t._vnode,null,null,!0):y(t._vnode||null,e,t),Bt(),t._vnode=e},ae={p:y,um:U,m:q,r:G,mt:V,mc:M,pc:R,pbc:D,n:ee,o:e};let oe,re;return t&&([oe,re]=t(ae)),{render:te,hydrate:oe,createApp:Zn(te,oe)}}function al(e,t,n,l=null){ft(e,t,7,[n,l])}function ol(e,t,n=!1){const l=e.children,a=t.children;if(_(l)&&_(a))for(let e=0;e<l.length;e++){const t=l[e];let o=a[e];1&o.shapeFlag&&!o.dynamicChildren&&((o.patchFlag<=0||32===o.patchFlag)&&(o=a[e]=Il(a[e]),o.el=t.el),n||ol(t,o))}}const rl=e=>e&&(e.disabled||""===e.disabled),il=e=>"undefined"!=typeof SVGElement&&e instanceof SVGElement,sl=(e,t)=>{const n=e&&e.to;if(O(n)){if(t){return t(n)}return null}return n};function ul(e,t,n,{o:{insert:l},m:a},o=2){0===o&&l(e.targetAnchor,t,n);const{el:r,anchor:i,shapeFlag:s,children:u,props:c}=e,d=2===o;if(d&&l(r,t,n),(!d||rl(c))&&16&s)for(let e=0;e<u.length;e++)a(u[e],t,n,2);d&&l(i,t,n)}const cl={__isTeleport:!0,process(e,t,n,l,a,o,r,i,s){const{mc:u,pc:c,pbc:d,o:{insert:p,querySelector:f,createText:h,createComment:v}}=s,m=rl(t.props),{shapeFlag:g,children:b}=t;if(null==e){const e=t.el=h(""),s=t.anchor=h("");p(e,n,l),p(s,n,l);const c=t.target=sl(t.props,f),d=t.targetAnchor=h("");c&&(p(d,c),r=r||il(c));const v=(e,t)=>{16&g&&u(b,e,t,a,o,r,i)};m?v(n,s):c&&v(c,d)}else{t.el=e.el;const l=t.anchor=e.anchor,u=t.target=e.target,p=t.targetAnchor=e.targetAnchor,h=rl(e.props),v=h?n:u,g=h?l:p;if(r=r||il(u),t.dynamicChildren?(d(e.dynamicChildren,t.dynamicChildren,v,a,o,r),ol(e,t,!0)):i||c(e,t,v,g,a,o,r),m)h||ul(t,n,l,s,1);else if((t.props&&t.props.to)!==(e.props&&e.props.to)){const e=t.target=sl(t.props,f);e&&ul(t,e,null,s,0)}else h&&ul(t,u,p,s,1)}},remove(e,{r:t,o:{remove:n}}){const{shapeFlag:l,children:a,anchor:o}=e;if(n(o),16&l)for(let e=0;e<a.length;e++)t(a[e])},move:ul,hydrate:function(e,t,n,l,a,{o:{nextSibling:o,parentNode:r,querySelector:i}},s){const u=t.target=sl(t.props,i);if(u){const i=u._lpa||u.firstChild;16&t.shapeFlag&&(rl(t.props)?(t.anchor=s(o(e),t,r(e),n,l,a),t.targetAnchor=i):(t.anchor=o(e),t.targetAnchor=s(i,t,u,n,l,a)),u._lpa=t.targetAnchor&&o(t.targetAnchor))}return t.anchor&&o(t.anchor)}},dl="components";function pl(e){return vl(dl,e)||e}const fl=Symbol();function hl(e){return vl("directives",e)}function vl(e,t,n=!0){const l=Ht||na;if(l){const n=l.type;if(e===dl){if("_self"===t)return n;const e=n.displayName||n.name;if(e&&(e===t||e===$(t)||e===H($(t))))return n}return ml(l[e]||n[e],t)||ml(l.appContext[e],t)}}function ml(e,t){return e&&(e[t]||e[$(t)]||e[H($(t))])}const gl=Symbol(void 0),bl=Symbol(void 0),yl=Symbol(void 0),xl=Symbol(void 0),kl=[];let wl=null;function Cl(e=!1){kl.push(wl=e?null:[])}function _l(){kl.pop(),wl=kl[kl.length-1]||null}function Al(e,t,n,l,a){const o=Tl(e,t,n,l,a,!0);return o.dynamicChildren=wl||h,_l(),wl&&wl.push(o),o}function Sl(e){return!!e&&!0===e.__v_isVNode}function El(e,t){return e.type===t.type&&e.key===t.key}const Ml="__vInternal",Ol=({key:e})=>null!=e?e:null,Dl=({ref:e})=>null!=e?O(e)||et(e)||M(e)?{i:Ht,r:e}:e:null,Tl=function(e,t=null,n=null,l=0,o=null,r=!1){if(e&&e!==fl||(e=yl),Sl(e)){const l=Nl(e,t,!0);return n&&Ll(l,n),l}if(i=e,M(i)&&"__vccOpts"in i&&(e=e.__vccOpts),t){(Je(t)||Ml in t)&&(t=x({},t));let{class:e,style:n}=t;e&&!O(e)&&(t.class=s(e)),T(n)&&(Je(n)&&!_(n)&&(n=x({},n)),t.style=a(n))}var i;const u=O(e)?1:(e=>e.__isSuspense)(e)?128:(e=>e.__isTeleport)(e)?64:T(e)?4:M(e)?2:0,c={__v_isVNode:!0,__v_skip:!0,type:e,props:t,key:t&&Ol(t),ref:t&&Dl(t),scopeId:tn,children:null,component:null,suspense:null,ssContent:null,ssFallback:null,dirs:null,transition:null,el:null,anchor:null,target:null,targetAnchor:null,staticCount:0,shapeFlag:u,patchFlag:l,dynamicProps:o,dynamicChildren:null,appContext:null};if(Ll(c,n),128&u){const{content:e,fallback:t}=function(e){const{shapeFlag:t,children:n}=e;let l,a;return 32&t?(l=Gt(n.default),a=Gt(n.fallback)):(l=Gt(n),a=Vl(null)),{content:l,fallback:a}}(c);c.ssContent=e,c.ssFallback=t}return!r&&wl&&(l>0||6&u)&&32!==l&&wl.push(c),c};function Nl(e,t,n=!1){const{props:l,ref:a,patchFlag:o}=e,r=t?zl(l||{},t):l;return{__v_isVNode:!0,__v_skip:!0,type:e.type,props:r,key:r&&Ol(r),ref:t&&t.ref?n&&a?_(a)?a.concat(Dl(t)):[a,Dl(t)]:Dl(t):a,scopeId:e.scopeId,children:e.children,target:e.target,targetAnchor:e.targetAnchor,staticCount:e.staticCount,shapeFlag:e.shapeFlag,patchFlag:t&&e.type!==gl?-1===o?16:16|o:o,dynamicProps:e.dynamicProps,dynamicChildren:e.dynamicChildren,appContext:e.appContext,dirs:e.dirs,transition:e.transition,component:e.component,suspense:e.suspense,ssContent:e.ssContent&&Nl(e.ssContent),ssFallback:e.ssFallback&&Nl(e.ssFallback),el:e.el,anchor:e.anchor}}function Bl(e=" ",t=0){return Tl(bl,null,e,t)}function Pl(e="",t=!1){return t?(Cl(),Al(yl,null,e)):Tl(yl,null,e)}function Vl(e){return null==e||"boolean"==typeof e?Tl(yl):_(e)?Tl(gl,null,e):"object"==typeof e?null===e.el?e:Nl(e):Tl(bl,null,String(e))}function Il(e){return null===e.el?e:Nl(e)}function Ll(e,t){let n=0;const{shapeFlag:l}=e;if(null==t)t=null;else if(_(t))n=16;else if("object"==typeof t){if(1&l||64&l){const n=t.default;return void(n&&(n._c&&Jt(1),Ll(e,n()),n._c&&Jt(-1)))}{n=32;const l=t._;l||Ml in t?3===l&&Ht&&(1024&Ht.vnode.patchFlag?(t._=2,e.patchFlag|=1024):t._=1):t._ctx=Ht}}else M(t)?(t={default:t,_ctx:Ht},n=32):(t=String(t),64&l?(n=16,t=[Bl(t)]):n=8);e.children=t,e.shapeFlag|=n}function zl(...e){const t=x({},e[0]);for(let n=1;n<e.length;n++){const l=e[n];for(const e in l)if("class"===e)t.class!==l.class&&(t.class=s([t.class,l.class]));else if("style"===e)t.style=a([t.style,l.style]);else if(b(e)){const n=t[e],a=l[e];n!==a&&(t[e]=n?[].concat(n,l[e]):a)}else""!==e&&(t[e]=l[e])}return t}function Fl(e,t){if(na){let n=na.provides;const l=na.parent&&na.parent.provides;l===n&&(n=na.provides=Object.create(l)),n[e]=t}}function $l(e,t,n=!1){const l=na||Ht;if(l){const a=null==l.parent?l.vnode.appContext&&l.vnode.appContext.provides:l.parent.provides;if(a&&e in a)return a[e];if(arguments.length>1)return n&&M(t)?t():t}}let Rl=!1;function jl(e,t,n=[],l=[],a=[],o=!1){const{mixins:r,extends:i,data:s,computed:u,methods:c,watch:d,provide:p,inject:h,components:m,directives:g,beforeMount:b,mounted:y,beforeUpdate:k,updated:w,activated:C,deactivated:A,beforeDestroy:S,beforeUnmount:E,destroyed:O,unmounted:D,render:N,renderTracked:B,renderTriggered:P,errorCaptured:V,expose:I}=t,L=e.proxy,z=e.ctx,F=e.appContext.mixins;if(o&&N&&e.render===v&&(e.render=N),o||(Rl=!0,Hl("beforeCreate","bc",t,e,F),Rl=!1,Yl(e,F,n,l,a)),i&&jl(e,i,n,l,a,!0),r&&Yl(e,r,n,l,a),h)if(_(h))for(let e=0;e<h.length;e++){const t=h[e];z[t]=$l(t)}else for(const e in h){const t=h[e];T(t)?z[e]=$l(t.from||e,t.default,!0):z[e]=$l(t)}if(c)for(const e in c){const t=c[e];M(t)&&(z[e]=t.bind(L))}if(o?s&&n.push(s):(n.length&&n.forEach((t=>Kl(e,t,L))),s&&Kl(e,s,L)),u)for(const e in u){const t=u[e],n=ua({get:M(t)?t.bind(L,L):M(t.get)?t.get.bind(L,L):v,set:!M(t)&&M(t.set)?t.set.bind(L):v});Object.defineProperty(z,e,{enumerable:!0,configurable:!0,get:()=>n.value,set:e=>n.value=e})}if(d&&l.push(d),!o&&l.length&&l.forEach((e=>{for(const t in e)Ul(e[t],z,L,t)})),p&&a.push(p),!o&&a.length&&a.forEach((e=>{const t=M(e)?e.call(L):e;Reflect.ownKeys(t).forEach((e=>{Fl(e,t[e])}))})),o&&(m&&x(e.components||(e.components=x({},e.type.components)),m),g&&x(e.directives||(e.directives=x({},e.type.directives)),g)),o||Hl("created","c",t,e,F),b&&vn(b.bind(L)),y&&mn(y.bind(L)),k&&gn(k.bind(L)),w&&bn(w.bind(L)),C&&Fn(C.bind(L)),A&&$n(A.bind(L)),V&&((e,t=na)=>{fn("ec",e,t)})(V.bind(L)),B&&wn(B.bind(L)),P&&kn(P.bind(L)),E&&yn(E.bind(L)),D&&xn(D.bind(L)),_(I))if(o);else if(I.length){const t=e.exposed||(e.exposed=it({}));I.forEach((e=>{t[e]=ct(L,e)}))}else e.exposed||(e.exposed=f)}function Hl(e,t,n,l,a){ql(e,t,a,l);const{extends:o,mixins:r}=n;o&&Wl(e,t,o,l),r&&ql(e,t,r,l);const i=n[e];i&&ft(i.bind(l.proxy),l,t)}function Wl(e,t,n,l){n.extends&&Wl(e,t,n.extends,l);const a=n[e];a&&ft(a.bind(l.proxy),l,t)}function ql(e,t,n,l){for(let a=0;a<n.length;a++){const o=n[a].mixins;o&&ql(e,t,o,l);const r=n[a][e];r&&ft(r.bind(l.proxy),l,t)}}function Yl(e,t,n,l,a){for(let o=0;o<t.length;o++)jl(e,t[o],n,l,a,!0)}function Kl(e,t,n){const l=t.call(n,n);T(l)&&(e.data===f?e.data=Ye(l):x(e.data,l))}function Ul(e,t,n,l){const a=l.includes(".")?function(e,t){const n=t.split(".");return()=>{let t=e;for(let e=0;e<n.length&&t;e++)t=t[n[e]];return t}}(n,l):()=>n[l];if(O(e)){const n=t[e];M(n)&&An(a,n)}else if(M(e))An(a,e.bind(n));else if(T(e))if(_(e))e.forEach((e=>Ul(e,t,n,l)));else{const l=M(e.handler)?e.handler.bind(n):t[e.handler];M(l)&&An(a,l,e)}}function Gl(e,t,n){const l=n.appContext.config.optionMergeStrategies,{mixins:a,extends:o}=t;o&&Gl(e,o,n),a&&a.forEach((t=>Gl(e,t,n)));for(const a in t)l&&C(l,a)?e[a]=l[a](e[a],t[a],n.proxy,a):e[a]=t[a]}const Xl=e=>e&&(e.proxy?e.proxy:Xl(e.parent)),Jl=x(Object.create(null),{$:e=>e,$el:e=>e.vnode.el,$data:e=>e.data,$props:e=>e.props,$attrs:e=>e.attrs,$slots:e=>e.slots,$refs:e=>e.refs,$parent:e=>Xl(e.parent),$root:e=>e.root&&e.root.proxy,$emit:e=>e.emit,$options:e=>__VUE_OPTIONS_API__?function(e){const t=e.type,{__merged:n,mixins:l,extends:a}=t;if(n)return n;const o=e.appContext.mixins;if(!o.length&&!l&&!a)return t;const r={};return o.forEach((t=>Gl(r,t,e))),Gl(r,t,e),t.__merged=r}(e):e.type,$forceUpdate:e=>()=>Ot(e.update),$nextTick:e=>Mt.bind(e.proxy),$watch:e=>__VUE_OPTIONS_API__?En.bind(e):v}),Zl={get({_:e},t){const{ctx:n,setupState:l,data:a,props:o,accessCache:r,type:i,appContext:s}=e;if("__v_skip"===t)return!0;let u;if("$"!==t[0]){const i=r[t];if(void 0!==i)switch(i){case 0:return l[t];case 1:return a[t];case 3:return n[t];case 2:return o[t]}else{if(l!==f&&C(l,t))return r[t]=0,l[t];if(a!==f&&C(a,t))return r[t]=1,a[t];if((u=e.propsOptions[0])&&C(u,t))return r[t]=2,o[t];if(n!==f&&C(n,t))return r[t]=3,n[t];__VUE_OPTIONS_API__&&Rl||(r[t]=4)}}const c=Jl[t];let d,p;return c?("$attrs"===t&&ce(e,0,t),c(e)):(d=i.__cssModules)&&(d=d[t])?d:n!==f&&C(n,t)?(r[t]=3,n[t]):(p=s.config.globalProperties,C(p,t)?p[t]:void 0)},set({_:e},t,n){const{data:l,setupState:a,ctx:o}=e;if(a!==f&&C(a,t))a[t]=n;else if(l!==f&&C(l,t))l[t]=n;else if(t in e.props)return!1;return!("$"===t[0]&&t.slice(1)in e||(o[t]=n,0))},has({_:{data:e,setupState:t,accessCache:n,ctx:l,appContext:a,propsOptions:o}},r){let i;return void 0!==n[r]||e!==f&&C(e,r)||t!==f&&C(t,r)||(i=o[0])&&C(i,r)||C(l,r)||C(Jl,r)||C(a.config.globalProperties,r)}},Ql=x({},Zl,{get(e,t){if(t!==Symbol.unscopables)return Zl.get(e,t,e)},has:(e,n)=>"_"!==n[0]&&!t(n)}),ea=Xn();let ta=0,na=null;const la=()=>na||Ht,aa=e=>{na=e};let oa=!1;function ra(e,t,n){M(t)?e.render=t:T(t)&&(__VUE_PROD_DEVTOOLS__&&(e.devtoolsRawSetupState=t),e.setupState=it(t)),ia(e)}function ia(e,t){const n=e.type;e.render||(e.render=n.render||v,e.render._rc&&(e.withProxy=new Proxy(e.ctx,Ql))),__VUE_OPTIONS_API__&&(na=e,se(),jl(e,n),ue(),na=null)}function sa(e,t=na){t&&(t.effects||(t.effects=[])).push(e)}function ua(e){const t=function(e){let t,n;return M(e)?(t=e,n=v):(t=e.get,n=e.set),new dt(t,n,M(e)||!e.set)}(e);return sa(t.effect),t}function ca(e,t,n){const l=arguments.length;return 2===l?T(t)&&!_(t)?Sl(t)?Tl(e,null,[t]):Tl(e,t):Tl(e,null,t):(l>3?n=Array.prototype.slice.call(arguments,2):3===l&&Sl(n)&&(n=[n]),Tl(e,t,n))}function da(e,t){let n;if(_(e)||O(e)){n=new Array(e.length);for(let l=0,a=e.length;l<a;l++)n[l]=t(e[l],l)}else if("number"==typeof e){n=new Array(e);for(let l=0;l<e;l++)n[l]=t(l+1,l)}else if(T(e))if(e[Symbol.iterator])n=Array.from(e,t);else{const l=Object.keys(e);n=new Array(l.length);for(let a=0,o=l.length;a<o;a++){const o=l[a];n[a]=t(e[o],o,a)}}else n=[];return n}function pa(e){const t={};for(const n in e)t[W(n)]=e[n];return t}function fa(e,t){for(let n=0;n<t.length;n++){const l=t[n];if(_(l))for(let t=0;t<l.length;t++)e[l[t].name]=l[t].fn;else l&&(e[l.name]=l.fn)}return e}Symbol("");const ha="3.0.4",va="http://www.w3.org/2000/svg",ma="undefined"!=typeof document?document:null;let ga,ba;const ya={insert:(e,t,n)=>{t.insertBefore(e,n||null)},remove:e=>{const t=e.parentNode;t&&t.removeChild(e)},createElement:(e,t,n)=>t?ma.createElementNS(va,e):ma.createElement(e,n?{is:n}:void 0),createText:e=>ma.createTextNode(e),createComment:e=>ma.createComment(e),setText:(e,t)=>{e.nodeValue=t},setElementText:(e,t)=>{e.textContent=t},parentNode:e=>e.parentNode,nextSibling:e=>e.nextSibling,querySelector:e=>ma.querySelector(e),setScopeId(e,t){e.setAttribute(t,"")},cloneNode:e=>e.cloneNode(!0),insertStaticContent(e,t,n,l){const a=l?ba||(ba=ma.createElementNS(va,"svg")):ga||(ga=ma.createElement("div"));a.innerHTML=e;const o=a.firstChild;let r=o,i=r;for(;r;)i=r,ya.insert(r,t,n),r=a.firstChild;return[o,i]}},xa=/\s*!important$/;function ka(e,t,n){if(_(n))n.forEach((n=>ka(e,t,n)));else if(t.startsWith("--"))e.setProperty(t,n);else{const l=function(e,t){const n=Ca[t];if(n)return n;let l=$(t);if("filter"!==l&&l in e)return Ca[t]=l;l=H(l);for(let n=0;n<wa.length;n++){const a=wa[n]+l;if(a in e)return Ca[t]=a}return t}(e,t);xa.test(n)?e.setProperty(j(l),n.replace(xa,""),"important"):e[l]=n}}const wa=["Webkit","Moz","ms"],Ca={},_a="http://www.w3.org/1999/xlink";let Aa=Date.now;"undefined"!=typeof document&&Aa()>document.createEvent("Event").timeStamp&&(Aa=()=>performance.now());let Sa=0;const Ea=Promise.resolve(),Ma=()=>{Sa=0};function Oa(e,t,n,l){e.addEventListener(t,n,l)}const Da=/(?:Once|Passive|Capture)$/,Ta=/^on[a-z]/,Na="transition",Ba="animation",Pa=(e,{slots:t})=>ca(Tn,La(e),t);Pa.displayName="Transition";const Va={name:String,type:String,css:{type:Boolean,default:!0},duration:[String,Number,Object],enterFromClass:String,enterActiveClass:String,enterToClass:String,appearFromClass:String,appearActiveClass:String,appearToClass:String,leaveFromClass:String,leaveActiveClass:String,leaveToClass:String},Ia=Pa.props=x({},Tn.props,Va);function La(e){let{name:t="v",type:n,css:l=!0,duration:a,enterFromClass:o=`${t}-enter-from`,enterActiveClass:r=`${t}-enter-active`,enterToClass:i=`${t}-enter-to`,appearFromClass:s=o,appearActiveClass:u=r,appearToClass:c=i,leaveFromClass:d=`${t}-leave-from`,leaveActiveClass:p=`${t}-leave-active`,leaveToClass:f=`${t}-leave-to`}=e;const h={};for(const t in e)t in Va||(h[t]=e[t]);if(!l)return h;const v=function(e){if(null==e)return null;if(T(e))return[za(e.enter),za(e.leave)];{const t=za(e);return[t,t]}}(a),m=v&&v[0],g=v&&v[1],{onBeforeEnter:b,onEnter:y,onEnterCancelled:k,onLeave:w,onLeaveCancelled:C,onBeforeAppear:_=b,onAppear:A=y,onAppearCancelled:S=k}=h,E=(e,t,n)=>{$a(e,t?c:i),$a(e,t?u:r),n&&n()},M=(e,t)=>{$a(e,f),$a(e,p),t&&t()},O=e=>(t,l)=>{const a=e?A:y,r=()=>E(t,e,l);a&&a(t,r),Ra((()=>{$a(t,e?s:o),Fa(t,e?c:i),a&&a.length>1||Ha(t,n,m,r)}))};return x(h,{onBeforeEnter(e){b&&b(e),Fa(e,r),Fa(e,o)},onBeforeAppear(e){_&&_(e),Fa(e,u),Fa(e,s)},onEnter:O(!1),onAppear:O(!0),onLeave(e,t){const l=()=>M(e,t);Fa(e,p),Fa(e,d);const a=e.style.transitionProperty;e.style.transitionProperty="none",Ra((()=>{e.style.transitionProperty=a,$a(e,d),Fa(e,f),w&&w.length>1||Ha(e,n,g,l)})),w&&w(e,l)},onEnterCancelled(e){E(e,!1),k&&k(e)},onAppearCancelled(e){E(e,!0),S&&S(e)},onLeaveCancelled(e){M(e),C&&C(e)}})}function za(e){return U(e)}function Fa(e,t){t.split(/\s+/).forEach((t=>t&&e.classList.add(t))),(e._vtc||(e._vtc=new Set)).add(t)}function $a(e,t){t.split(/\s+/).forEach((t=>t&&e.classList.remove(t)));const{_vtc:n}=e;n&&(n.delete(t),n.size||(e._vtc=void 0))}function Ra(e){requestAnimationFrame((()=>{requestAnimationFrame(e)}))}let ja=0;function Ha(e,t,n,l){const a=e._endId=++ja,o=()=>{a===e._endId&&l()};if(n)return setTimeout(o,n);const{type:r,timeout:i,propCount:s}=Wa(e,t);if(!r)return l();const u=r+"end";let c=0;const d=()=>{e.removeEventListener(u,p),o()},p=t=>{t.target===e&&++c>=s&&d()};setTimeout((()=>{c<s&&d()}),i+1),e.addEventListener(u,p)}function Wa(e,t){const n=window.getComputedStyle(e),l=e=>(n[e]||"").split(", "),a=l("transitionDelay"),o=l("transitionDuration"),r=qa(a,o),i=l("animationDelay"),s=l("animationDuration"),u=qa(i,s);let c=null,d=0,p=0;return t===Na?r>0&&(c=Na,d=r,p=o.length):t===Ba?u>0&&(c=Ba,d=u,p=s.length):(d=Math.max(r,u),c=d>0?r>u?Na:Ba:null,p=c?c===Na?o.length:s.length:0),{type:c,timeout:d,propCount:p,hasTransform:c===Na&&/\b(transform|all)(,|$)/.test(n.transitionProperty)}}function qa(e,t){for(;e.length<t.length;)e=e.concat(e);return Math.max(...t.map(((t,n)=>Ya(t)+Ya(e[n]))))}function Ya(e){return 1e3*Number(e.slice(0,-1).replace(",","."))}const Ka=new WeakMap,Ua=new WeakMap,Ga={name:"TransitionGroup",props:x({},Ia,{tag:String,moveClass:String}),setup(e,{slots:t}){const n=la(),l=On();let a,o;return bn((()=>{if(!a.length)return;const t=e.moveClass||`${e.name||"v"}-move`;if(!function(e,t,n){const l=e.cloneNode();e._vtc&&e._vtc.forEach((e=>{e.split(/\s+/).forEach((e=>e&&l.classList.remove(e)))})),n.split(/\s+/).forEach((e=>e&&l.classList.add(e))),l.style.display="none";const a=1===t.nodeType?t:t.parentNode;a.appendChild(l);const{hasTransform:o}=Wa(l);return a.removeChild(l),o}(a[0].el,n.vnode.el,t))return;a.forEach(Xa),a.forEach(Ja);const l=a.filter(Za);document.body.offsetHeight,l.forEach((e=>{const n=e.el,l=n.style;Fa(n,t),l.transform=l.webkitTransform=l.transitionDuration="";const a=n._moveCb=e=>{e&&e.target!==n||e&&!/transform$/.test(e.propertyName)||(n.removeEventListener("transitionend",a),n._moveCb=null,$a(n,t))};n.addEventListener("transitionend",a)}))})),()=>{const r=Ze(e),i=La(r),s=r.tag||gl;a=o,o=t.default?Ln(t.default()):[];for(let e=0;e<o.length;e++){const t=o[e];null!=t.key&&In(t,Bn(t,i,l,n))}if(a)for(let e=0;e<a.length;e++){const t=a[e];In(t,Bn(t,i,l,n)),Ka.set(t,t.el.getBoundingClientRect())}return Tl(s,null,o)}}};function Xa(e){const t=e.el;t._moveCb&&t._moveCb(),t._enterCb&&t._enterCb()}function Ja(e){Ua.set(e,e.el.getBoundingClientRect())}function Za(e){const t=Ka.get(e),n=Ua.get(e),l=t.left-n.left,a=t.top-n.top;if(l||a){const t=e.el.style;return t.transform=t.webkitTransform=`translate(${l}px,${a}px)`,t.transitionDuration="0s",e}}const Qa=e=>{const t=e.props["onUpdate:modelValue"];return _(t)?e=>Y(t,e):t};function eo(e){e.target.composing=!0}function to(e){const t=e.target;t.composing&&(t.composing=!1,function(e,t){const n=document.createEvent("HTMLEvents");n.initEvent("input",!0,!0),e.dispatchEvent(n)}(t))}const no={created(e,{modifiers:{lazy:t,trim:n,number:l}},a){e._assign=Qa(a);const o=l||"number"===e.type;Oa(e,t?"change":"input",(t=>{if(t.target.composing)return;let l=e.value;n?l=l.trim():o&&(l=U(l)),e._assign(l)})),n&&Oa(e,"change",(()=>{e.value=e.value.trim()})),t||(Oa(e,"compositionstart",eo),Oa(e,"compositionend",to),Oa(e,"change",to))},mounted(e,{value:t}){e.value=null==t?"":t},beforeUpdate(e,{value:t,modifiers:{trim:n,number:l}},a){if(e._assign=Qa(a),e.composing)return;if(document.activeElement===e){if(n&&e.value.trim()===t)return;if((l||"number"===e.type)&&U(e.value)===t)return}const o=null==t?"":t;e.value!==o&&(e.value=o)}},lo={created(e,t,n){e._assign=Qa(n),Oa(e,"change",(()=>{const t=e._modelValue,n=ro(e),l=e.checked,a=e._assign;if(_(t)){const e=c(t,n),o=-1!==e;if(l&&!o)a(t.concat(n));else if(!l&&o){const n=[...t];n.splice(e,1),a(n)}}else if(S(t)){const e=new Set(t);l?e.add(n):e.delete(n),a(e)}else a(io(e,l))}))},mounted:ao,beforeUpdate(e,t,n){e._assign=Qa(n),ao(e,t,n)}};function ao(e,{value:t,oldValue:n},l){e._modelValue=t,_(t)?e.checked=c(t,l.props.value)>-1:S(t)?e.checked=t.has(l.props.value):t!==n&&(e.checked=u(t,io(e,!0)))}const oo={created(e,{value:t},n){e.checked=u(t,n.props.value),e._assign=Qa(n),Oa(e,"change",(()=>{e._assign(ro(e))}))},beforeUpdate(e,{value:t,oldValue:n},l){e._assign=Qa(l),t!==n&&(e.checked=u(t,l.props.value))}};function ro(e){return"_value"in e?e._value:e.value}function io(e,t){const n=t?"_trueValue":"_falseValue";return n in e?e[n]:t}const so=["ctrl","shift","alt","meta"],uo={stop:e=>e.stopPropagation(),prevent:e=>e.preventDefault(),self:e=>e.target!==e.currentTarget,ctrl:e=>!e.ctrlKey,shift:e=>!e.shiftKey,alt:e=>!e.altKey,meta:e=>!e.metaKey,left:e=>"button"in e&&0!==e.button,middle:e=>"button"in e&&1!==e.button,right:e=>"button"in e&&2!==e.button,exact:(e,t)=>so.some((n=>e[`${n}Key`]&&!t.includes(n)))},co=(e,t)=>(n,...l)=>{for(let e=0;e<t.length;e++){const l=uo[t[e]];if(l&&l(n,t))return}return e(n,...l)},po={esc:"escape",space:" ",up:"arrow-up",left:"arrow-left",right:"arrow-right",down:"arrow-down",delete:"backspace"},fo=(e,t)=>n=>{if(!("key"in n))return;const l=j(n.key);return t.some((e=>e===l||po[e]===l))?e(n):void 0},ho={beforeMount(e,{value:t},{transition:n}){e._vod="none"===e.style.display?"":e.style.display,n&&t?n.beforeEnter(e):vo(e,t)},mounted(e,{value:t},{transition:n}){n&&t&&n.enter(e)},updated(e,{value:t,oldValue:n},{transition:l}){l&&t!==n?t?(l.beforeEnter(e),vo(e,!0),l.enter(e)):l.leave(e,(()=>{vo(e,!1)})):vo(e,t)},beforeUnmount(e,{value:t}){vo(e,t)}};function vo(e,t){e.style.display=t?e._vod:"none"}const mo=x({patchProp:(e,t,n,a,o=!1,r,i,s,u)=>{switch(t){case"class":!function(e,t,n){if(null==t&&(t=""),n)e.setAttribute("class",t);else{const n=e._vtc;n&&(t=(t?[t,...n]:[...n]).join(" ")),e.className=t}}(e,a,o);break;case"style":!function(e,t,n){const l=e.style;if(n)if(O(n))t!==n&&(l.cssText=n);else{for(const e in n)ka(l,e,n[e]);if(t&&!O(t))for(const e in t)null==n[e]&&ka(l,e,"")}else e.removeAttribute("style")}(e,n,a);break;default:b(t)?y(t)||function(e,t,n,l,a=null){const o=e._vei||(e._vei={}),r=o[t];if(l&&r)r.value=l;else{const[n,i]=function(e){let t;if(Da.test(e)){let n;for(t={};n=e.match(Da);)e=e.slice(0,e.length-n[0].length),t[n[0].toLowerCase()]=!0}return[e.slice(2).toLowerCase(),t]}(t);l?Oa(e,n,o[t]=function(e,t){const n=e=>{(e.timeStamp||Aa())>=n.attached-1&&ft(function(e,t){if(_(t)){const n=e.stopImmediatePropagation;return e.stopImmediatePropagation=()=>{n.call(e),e._stopped=!0},t.map((e=>t=>!t._stopped&&e(t)))}return t}(e,n.value),t,5,[e])};return n.value=e,n.attached=Sa||(Ea.then(Ma),Sa=Aa()),n}(l,a),i):r&&(function(e,t,n,l){e.removeEventListener(t,n,l)}(e,n,r,i),o[t]=void 0)}}(e,t,0,a,i):function(e,t,n,l){return l?"innerHTML"===t||!!(t in e&&Ta.test(t)&&M(n)):"spellcheck"!==t&&"draggable"!==t&&(("form"!==t||"string"!=typeof n)&&(("list"!==t||"INPUT"!==e.tagName)&&((!Ta.test(t)||!O(n))&&t in e)))}(e,t,a,o)?function(e,t,n,l,a,o,r){if("innerHTML"===t||"textContent"===t)return l&&r(l,a,o),void(e[t]=null==n?"":n);if("value"!==t||"PROGRESS"===e.tagName){if(""===n||null==n){const l=typeof e[t];if(""===n&&"boolean"===l)return void(e[t]=!0);if(null==n&&"string"===l)return e[t]="",void e.removeAttribute(t);if("number"===l)return e[t]=0,void e.removeAttribute(t)}try{e[t]=n}catch(e){}}else{e._value=n;const t=null==n?"":n;e.value!==t&&(e.value=t)}}(e,t,a,r,i,s,u):("true-value"===t?e._trueValue=a:"false-value"===t&&(e._falseValue=a),function(e,t,n,a){if(a&&t.startsWith("xlink:"))null==n?e.removeAttributeNS(_a,t.slice(6,t.length)):e.setAttributeNS(_a,t,n);else{const a=l(t);null==n||a&&!1===n?e.removeAttribute(t):e.setAttribute(t,a?"":n)}}(e,t,a,o))}},forcePatchProp:(e,t)=>"value"===t},ya);let go;function bo(){return go||(go=function(e){return ll(e)}(mo))}const yo=(...e)=>{bo().render(...e)};var xo=n(3279),ko=n.n(xo),wo=n(2796),Co=n.n(wo);function _o(e){return{all:e=e||new Map,on:function(t,n){var l=e.get(t);l&&l.push(n)||e.set(t,[n])},off:function(t,n){var l=e.get(t);l&&l.splice(l.indexOf(n)>>>0,1)},emit:function(t,n){(e.get(t)||[]).slice().map((function(e){e(n)})),(e.get("*")||[]).slice().map((function(e){e(t,n)}))}}}var Ao=function(){if("undefined"!=typeof Map)return Map;function e(e,t){var n=-1;return e.some((function(e,l){return e[0]===t&&(n=l,!0)})),n}return function(){function t(){this.__entries__=[]}return Object.defineProperty(t.prototype,"size",{get:function(){return this.__entries__.length},enumerable:!0,configurable:!0}),t.prototype.get=function(t){var n=e(this.__entries__,t),l=this.__entries__[n];return l&&l[1]},t.prototype.set=function(t,n){var l=e(this.__entries__,t);~l?this.__entries__[l][1]=n:this.__entries__.push([t,n])},t.prototype.delete=function(t){var n=this.__entries__,l=e(n,t);~l&&n.splice(l,1)},t.prototype.has=function(t){return!!~e(this.__entries__,t)},t.prototype.clear=function(){this.__entries__.splice(0)},t.prototype.forEach=function(e,t){void 0===t&&(t=null);for(var n=0,l=this.__entries__;n<l.length;n++){var a=l[n];e.call(t,a[1],a[0])}},t}()}(),So="undefined"!=typeof window&&"undefined"!=typeof document&&window.document===document,Eo="undefined"!=typeof global&&global.Math===Math?global:"undefined"!=typeof self&&self.Math===Math?self:"undefined"!=typeof window&&window.Math===Math?window:Function("return this")(),Mo="function"==typeof requestAnimationFrame?requestAnimationFrame.bind(Eo):function(e){return setTimeout((function(){return e(Date.now())}),1e3/60)},Oo=["top","right","bottom","left","width","height","size","weight"],Do="undefined"!=typeof MutationObserver,To=function(){function e(){this.connected_=!1,this.mutationEventsAdded_=!1,this.mutationsObserver_=null,this.observers_=[],this.onTransitionEnd_=this.onTransitionEnd_.bind(this),this.refresh=function(e,t){var n=!1,l=!1,a=0;function o(){n&&(n=!1,e()),l&&i()}function r(){Mo(o)}function i(){var e=Date.now();if(n){if(e-a<2)return;l=!0}else n=!0,l=!1,setTimeout(r,20);a=e}return i}(this.refresh.bind(this))}return e.prototype.addObserver=function(e){~this.observers_.indexOf(e)||this.observers_.push(e),this.connected_||this.connect_()},e.prototype.removeObserver=function(e){var t=this.observers_,n=t.indexOf(e);~n&&t.splice(n,1),!t.length&&this.connected_&&this.disconnect_()},e.prototype.refresh=function(){this.updateObservers_()&&this.refresh()},e.prototype.updateObservers_=function(){var e=this.observers_.filter((function(e){return e.gatherActive(),e.hasActive()}));return e.forEach((function(e){return e.broadcastActive()})),e.length>0},e.prototype.connect_=function(){So&&!this.connected_&&(document.addEventListener("transitionend",this.onTransitionEnd_),window.addEventListener("resize",this.refresh),Do?(this.mutationsObserver_=new MutationObserver(this.refresh),this.mutationsObserver_.observe(document,{attributes:!0,childList:!0,characterData:!0,subtree:!0})):(document.addEventListener("DOMSubtreeModified",this.refresh),this.mutationEventsAdded_=!0),this.connected_=!0)},e.prototype.disconnect_=function(){So&&this.connected_&&(document.removeEventListener("transitionend",this.onTransitionEnd_),window.removeEventListener("resize",this.refresh),this.mutationsObserver_&&this.mutationsObserver_.disconnect(),this.mutationEventsAdded_&&document.removeEventListener("DOMSubtreeModified",this.refresh),this.mutationsObserver_=null,this.mutationEventsAdded_=!1,this.connected_=!1)},e.prototype.onTransitionEnd_=function(e){var t=e.propertyName,n=void 0===t?"":t;Oo.some((function(e){return!!~n.indexOf(e)}))&&this.refresh()},e.getInstance=function(){return this.instance_||(this.instance_=new e),this.instance_},e.instance_=null,e}(),No=function(e,t){for(var n=0,l=Object.keys(t);n<l.length;n++){var a=l[n];Object.defineProperty(e,a,{value:t[a],enumerable:!1,writable:!1,configurable:!0})}return e},Bo=function(e){return e&&e.ownerDocument&&e.ownerDocument.defaultView||Eo},Po=Fo(0,0,0,0);function Vo(e){return parseFloat(e)||0}function Io(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];return t.reduce((function(t,n){return t+Vo(e["border-"+n+"-width"])}),0)}var Lo="undefined"!=typeof SVGGraphicsElement?function(e){return e instanceof Bo(e).SVGGraphicsElement}:function(e){return e instanceof Bo(e).SVGElement&&"function"==typeof e.getBBox};function zo(e){return So?Lo(e)?function(e){var t=e.getBBox();return Fo(0,0,t.width,t.height)}(e):function(e){var t=e.clientWidth,n=e.clientHeight;if(!t&&!n)return Po;var l=Bo(e).getComputedStyle(e),a=function(e){for(var t={},n=0,l=["top","right","bottom","left"];n<l.length;n++){var a=l[n],o=e["padding-"+a];t[a]=Vo(o)}return t}(l),o=a.left+a.right,r=a.top+a.bottom,i=Vo(l.width),s=Vo(l.height);if("border-box"===l.boxSizing&&(Math.round(i+o)!==t&&(i-=Io(l,"left","right")+o),Math.round(s+r)!==n&&(s-=Io(l,"top","bottom")+r)),!function(e){return e===Bo(e).document.documentElement}(e)){var u=Math.round(i+o)-t,c=Math.round(s+r)-n;1!==Math.abs(u)&&(i-=u),1!==Math.abs(c)&&(s-=c)}return Fo(a.left,a.top,i,s)}(e):Po}function Fo(e,t,n,l){return{x:e,y:t,width:n,height:l}}var $o=function(){function e(e){this.broadcastWidth=0,this.broadcastHeight=0,this.contentRect_=Fo(0,0,0,0),this.target=e}return e.prototype.isActive=function(){var e=zo(this.target);return this.contentRect_=e,e.width!==this.broadcastWidth||e.height!==this.broadcastHeight},e.prototype.broadcastRect=function(){var e=this.contentRect_;return this.broadcastWidth=e.width,this.broadcastHeight=e.height,e},e}(),Ro=function(e,t){var n=function(e){var t=e.x,n=e.y,l=e.width,a=e.height,o="undefined"!=typeof DOMRectReadOnly?DOMRectReadOnly:Object,r=Object.create(o.prototype);return No(r,{x:t,y:n,width:l,height:a,top:n,right:t+l,bottom:a+n,left:t}),r}(t);No(this,{target:e,contentRect:n})},jo=function(){function e(e,t,n){if(this.activeObservations_=[],this.observations_=new Ao,"function"!=typeof e)throw new TypeError("The callback provided as parameter 1 is not a function.");this.callback_=e,this.controller_=t,this.callbackCtx_=n}return e.prototype.observe=function(e){if(!arguments.length)throw new TypeError("1 argument required, but only 0 present.");if("undefined"!=typeof Element&&Element instanceof Object){if(!(e instanceof Bo(e).Element))throw new TypeError('parameter 1 is not of type "Element".');var t=this.observations_;t.has(e)||(t.set(e,new $o(e)),this.controller_.addObserver(this),this.controller_.refresh())}},e.prototype.unobserve=function(e){if(!arguments.length)throw new TypeError("1 argument required, but only 0 present.");if("undefined"!=typeof Element&&Element instanceof Object){if(!(e instanceof Bo(e).Element))throw new TypeError('parameter 1 is not of type "Element".');var t=this.observations_;t.has(e)&&(t.delete(e),t.size||this.controller_.removeObserver(this))}},e.prototype.disconnect=function(){this.clearActive(),this.observations_.clear(),this.controller_.removeObserver(this)},e.prototype.gatherActive=function(){var e=this;this.clearActive(),this.observations_.forEach((function(t){t.isActive()&&e.activeObservations_.push(t)}))},e.prototype.broadcastActive=function(){if(this.hasActive()){var e=this.callbackCtx_,t=this.activeObservations_.map((function(e){return new Ro(e.target,e.broadcastRect())}));this.callback_.call(e,t,e),this.clearActive()}},e.prototype.clearActive=function(){this.activeObservations_.splice(0)},e.prototype.hasActive=function(){return this.activeObservations_.length>0},e}(),Ho="undefined"!=typeof WeakMap?new WeakMap:new Ao,Wo=function e(t){if(!(this instanceof e))throw new TypeError("Cannot call a class as a function.");if(!arguments.length)throw new TypeError("1 argument required, but only 0 present.");var n=To.getInstance(),l=new jo(t,n,this);Ho.set(this,l)};["observe","unobserve","disconnect"].forEach((function(e){Wo.prototype[e]=function(){var t;return(t=Ho.get(this))[e].apply(t,arguments)}}));const qo=void 0!==Eo.ResizeObserver?Eo.ResizeObserver:Wo;function Yo(e){var t=e.getBoundingClientRect();return{width:t.width,height:t.height,top:t.top,right:t.right,bottom:t.bottom,left:t.left,x:t.left,y:t.top}}function Ko(e){if("[object Window]"!==e.toString()){var t=e.ownerDocument;return t&&t.defaultView||window}return e}function Uo(e){var t=Ko(e);return{scrollLeft:t.pageXOffset,scrollTop:t.pageYOffset}}function Go(e){return e instanceof Ko(e).Element||e instanceof Element}function Xo(e){return e instanceof Ko(e).HTMLElement||e instanceof HTMLElement}function Jo(e){return e?(e.nodeName||"").toLowerCase():null}function Zo(e){return((Go(e)?e.ownerDocument:e.document)||window.document).documentElement}function Qo(e){return Yo(Zo(e)).left+Uo(e).scrollLeft}function er(e){return Ko(e).getComputedStyle(e)}function tr(e){var t=er(e),n=t.overflow,l=t.overflowX,a=t.overflowY;return/auto|scroll|overlay|hidden/.test(n+a+l)}function nr(e,t,n){void 0===n&&(n=!1);var l,a,o=Zo(t),r=Yo(e),i=Xo(t),s={scrollLeft:0,scrollTop:0},u={x:0,y:0};return(i||!i&&!n)&&(("body"!==Jo(t)||tr(o))&&(s=(l=t)!==Ko(l)&&Xo(l)?{scrollLeft:(a=l).scrollLeft,scrollTop:a.scrollTop}:Uo(l)),Xo(t)?((u=Yo(t)).x+=t.clientLeft,u.y+=t.clientTop):o&&(u.x=Qo(o))),{x:r.left+s.scrollLeft-u.x,y:r.top+s.scrollTop-u.y,width:r.width,height:r.height}}function lr(e){return{x:e.offsetLeft,y:e.offsetTop,width:e.offsetWidth,height:e.offsetHeight}}function ar(e){return"html"===Jo(e)?e:e.assignedSlot||e.parentNode||e.host||Zo(e)}function or(e){return["html","body","#document"].indexOf(Jo(e))>=0?e.ownerDocument.body:Xo(e)&&tr(e)?e:or(ar(e))}function rr(e,t){void 0===t&&(t=[]);var n=or(e),l="body"===Jo(n),a=Ko(n),o=l?[a].concat(a.visualViewport||[],tr(n)?n:[]):n,r=t.concat(o);return l?r:r.concat(rr(ar(o)))}function ir(e){return["table","td","th"].indexOf(Jo(e))>=0}function sr(e){if(!Xo(e)||"fixed"===er(e).position)return null;var t=e.offsetParent;if(t){var n=Zo(t);if("body"===Jo(t)&&"static"===er(t).position&&"static"!==er(n).position)return n}return t}function ur(e){for(var t=Ko(e),n=sr(e);n&&ir(n)&&"static"===er(n).position;)n=sr(n);return n&&"body"===Jo(n)&&"static"===er(n).position?t:n||function(e){for(var t=ar(e);Xo(t)&&["html","body"].indexOf(Jo(t))<0;){var n=er(t);if("none"!==n.transform||"none"!==n.perspective||n.willChange&&"auto"!==n.willChange)return t;t=t.parentNode}return null}(e)||t}var cr="top",dr="bottom",pr="right",fr="left",hr="auto",vr=[cr,dr,pr,fr],mr="start",gr="end",br="viewport",yr="popper",xr=vr.reduce((function(e,t){return e.concat([t+"-"+mr,t+"-"+gr])}),[]),kr=[].concat(vr,[hr]).reduce((function(e,t){return e.concat([t,t+"-"+mr,t+"-"+gr])}),[]),wr=["beforeRead","read","afterRead","beforeMain","main","afterMain","beforeWrite","write","afterWrite"];function Cr(e){var t=new Map,n=new Set,l=[];function a(e){n.add(e.name),[].concat(e.requires||[],e.requiresIfExists||[]).forEach((function(e){if(!n.has(e)){var l=t.get(e);l&&a(l)}})),l.push(e)}return e.forEach((function(e){t.set(e.name,e)})),e.forEach((function(e){n.has(e.name)||a(e)})),l}function _r(e){var t;return function(){return t||(t=new Promise((function(n){Promise.resolve().then((function(){t=void 0,n(e())}))}))),t}}var Ar={placement:"bottom",modifiers:[],strategy:"absolute"};function Sr(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return!t.some((function(e){return!(e&&"function"==typeof e.getBoundingClientRect)}))}function Er(e){void 0===e&&(e={});var t=e,n=t.defaultModifiers,l=void 0===n?[]:n,a=t.defaultOptions,o=void 0===a?Ar:a;return function(e,t,n){void 0===n&&(n=o);var a={placement:"bottom",orderedModifiers:[],options:Object.assign(Object.assign({},Ar),o),modifiersData:{},elements:{reference:e,popper:t},attributes:{},styles:{}},r=[],i=!1,s={state:a,setOptions:function(n){u(),a.options=Object.assign(Object.assign(Object.assign({},o),a.options),n),a.scrollParents={reference:Go(e)?rr(e):e.contextElement?rr(e.contextElement):[],popper:rr(t)};var i,c,d=function(e){var t=Cr(e);return wr.reduce((function(e,n){return e.concat(t.filter((function(e){return e.phase===n})))}),[])}((i=[].concat(l,a.options.modifiers),c=i.reduce((function(e,t){var n=e[t.name];return e[t.name]=n?Object.assign(Object.assign(Object.assign({},n),t),{},{options:Object.assign(Object.assign({},n.options),t.options),data:Object.assign(Object.assign({},n.data),t.data)}):t,e}),{}),Object.keys(c).map((function(e){return c[e]}))));return a.orderedModifiers=d.filter((function(e){return e.enabled})),a.orderedModifiers.forEach((function(e){var t=e.name,n=e.options,l=void 0===n?{}:n,o=e.effect;if("function"==typeof o){var i=o({state:a,name:t,instance:s,options:l});r.push(i||function(){})}})),s.update()},forceUpdate:function(){if(!i){var e=a.elements,t=e.reference,n=e.popper;if(Sr(t,n)){a.rects={reference:nr(t,ur(n),"fixed"===a.options.strategy),popper:lr(n)},a.reset=!1,a.placement=a.options.placement,a.orderedModifiers.forEach((function(e){return a.modifiersData[e.name]=Object.assign({},e.data)}));for(var l=0;l<a.orderedModifiers.length;l++)if(!0!==a.reset){var o=a.orderedModifiers[l],r=o.fn,u=o.options,c=void 0===u?{}:u,d=o.name;"function"==typeof r&&(a=r({state:a,options:c,name:d,instance:s})||a)}else a.reset=!1,l=-1}}},update:_r((function(){return new Promise((function(e){s.forceUpdate(),e(a)}))})),destroy:function(){u(),i=!0}};if(!Sr(e,t))return s;function u(){r.forEach((function(e){return e()})),r=[]}return s.setOptions(n).then((function(e){!i&&n.onFirstUpdate&&n.onFirstUpdate(e)})),s}}var Mr={passive:!0};function Or(e){return e.split("-")[0]}function Dr(e){return e.split("-")[1]}function Tr(e){return["top","bottom"].indexOf(e)>=0?"x":"y"}function Nr(e){var t,n=e.reference,l=e.element,a=e.placement,o=a?Or(a):null,r=a?Dr(a):null,i=n.x+n.width/2-l.width/2,s=n.y+n.height/2-l.height/2;switch(o){case cr:t={x:i,y:n.y-l.height};break;case dr:t={x:i,y:n.y+n.height};break;case pr:t={x:n.x+n.width,y:s};break;case fr:t={x:n.x-l.width,y:s};break;default:t={x:n.x,y:n.y}}var u=o?Tr(o):null;if(null!=u){var c="y"===u?"height":"width";switch(r){case mr:t[u]=t[u]-(n[c]/2-l[c]/2);break;case gr:t[u]=t[u]+(n[c]/2-l[c]/2)}}return t}var Br={top:"auto",right:"auto",bottom:"auto",left:"auto"};function Pr(e){var t,n=e.popper,l=e.popperRect,a=e.placement,o=e.offsets,r=e.position,i=e.gpuAcceleration,s=e.adaptive,u=e.roundOffsets?function(e){var t=e.x,n=e.y,l=window.devicePixelRatio||1;return{x:Math.round(t*l)/l||0,y:Math.round(n*l)/l||0}}(o):o,c=u.x,d=void 0===c?0:c,p=u.y,f=void 0===p?0:p,h=o.hasOwnProperty("x"),v=o.hasOwnProperty("y"),m=fr,g=cr,b=window;if(s){var y=ur(n);y===Ko(n)&&(y=Zo(n)),a===cr&&(g=dr,f-=y.clientHeight-l.height,f*=i?1:-1),a===fr&&(m=pr,d-=y.clientWidth-l.width,d*=i?1:-1)}var x,k=Object.assign({position:r},s&&Br);return i?Object.assign(Object.assign({},k),{},((x={})[g]=v?"0":"",x[m]=h?"0":"",x.transform=(b.devicePixelRatio||1)<2?"translate("+d+"px, "+f+"px)":"translate3d("+d+"px, "+f+"px, 0)",x)):Object.assign(Object.assign({},k),{},((t={})[g]=v?f+"px":"",t[m]=h?d+"px":"",t.transform="",t))}var Vr={left:"right",right:"left",bottom:"top",top:"bottom"};function Ir(e){return e.replace(/left|right|bottom|top/g,(function(e){return Vr[e]}))}var Lr={start:"end",end:"start"};function zr(e){return e.replace(/start|end/g,(function(e){return Lr[e]}))}function Fr(e,t){var n,l=t.getRootNode&&t.getRootNode();if(e.contains(t))return!0;if(l&&((n=l)instanceof Ko(n).ShadowRoot||n instanceof ShadowRoot)){var a=t;do{if(a&&e.isSameNode(a))return!0;a=a.parentNode||a.host}while(a)}return!1}function $r(e){return Object.assign(Object.assign({},e),{},{left:e.x,top:e.y,right:e.x+e.width,bottom:e.y+e.height})}function Rr(e,t){return t===br?$r(function(e){var t=Ko(e),n=Zo(e),l=t.visualViewport,a=n.clientWidth,o=n.clientHeight,r=0,i=0;return l&&(a=l.width,o=l.height,/^((?!chrome|android).)*safari/i.test(navigator.userAgent)||(r=l.offsetLeft,i=l.offsetTop)),{width:a,height:o,x:r+Qo(e),y:i}}(e)):Xo(t)?function(e){var t=Yo(e);return t.top=t.top+e.clientTop,t.left=t.left+e.clientLeft,t.bottom=t.top+e.clientHeight,t.right=t.left+e.clientWidth,t.width=e.clientWidth,t.height=e.clientHeight,t.x=t.left,t.y=t.top,t}(t):$r(function(e){var t=Zo(e),n=Uo(e),l=e.ownerDocument.body,a=Math.max(t.scrollWidth,t.clientWidth,l?l.scrollWidth:0,l?l.clientWidth:0),o=Math.max(t.scrollHeight,t.clientHeight,l?l.scrollHeight:0,l?l.clientHeight:0),r=-n.scrollLeft+Qo(e),i=-n.scrollTop;return"rtl"===er(l||t).direction&&(r+=Math.max(t.clientWidth,l?l.clientWidth:0)-a),{width:a,height:o,x:r,y:i}}(Zo(e)))}function jr(e){return Object.assign(Object.assign({},{top:0,right:0,bottom:0,left:0}),e)}function Hr(e,t){return t.reduce((function(t,n){return t[n]=e,t}),{})}function Wr(e,t){void 0===t&&(t={});var n=t,l=n.placement,a=void 0===l?e.placement:l,o=n.boundary,r=void 0===o?"clippingParents":o,i=n.rootBoundary,s=void 0===i?br:i,u=n.elementContext,c=void 0===u?yr:u,d=n.altBoundary,p=void 0!==d&&d,f=n.padding,h=void 0===f?0:f,v=jr("number"!=typeof h?h:Hr(h,vr)),m=c===yr?"reference":yr,g=e.elements.reference,b=e.rects.popper,y=e.elements[p?m:c],x=function(e,t,n){var l="clippingParents"===t?function(e){var t=rr(ar(e)),n=["absolute","fixed"].indexOf(er(e).position)>=0&&Xo(e)?ur(e):e;return Go(n)?t.filter((function(e){return Go(e)&&Fr(e,n)&&"body"!==Jo(e)})):[]}(e):[].concat(t),a=[].concat(l,[n]),o=a[0],r=a.reduce((function(t,n){var l=Rr(e,n);return t.top=Math.max(l.top,t.top),t.right=Math.min(l.right,t.right),t.bottom=Math.min(l.bottom,t.bottom),t.left=Math.max(l.left,t.left),t}),Rr(e,o));return r.width=r.right-r.left,r.height=r.bottom-r.top,r.x=r.left,r.y=r.top,r}(Go(y)?y:y.contextElement||Zo(e.elements.popper),r,s),k=Yo(g),w=Nr({reference:k,element:b,strategy:"absolute",placement:a}),C=$r(Object.assign(Object.assign({},b),w)),_=c===yr?C:k,A={top:x.top-_.top+v.top,bottom:_.bottom-x.bottom+v.bottom,left:x.left-_.left+v.left,right:_.right-x.right+v.right},S=e.modifiersData.offset;if(c===yr&&S){var E=S[a];Object.keys(A).forEach((function(e){var t=[pr,dr].indexOf(e)>=0?1:-1,n=[cr,dr].indexOf(e)>=0?"y":"x";A[e]+=E[n]*t}))}return A}function qr(e,t,n){return Math.max(e,Math.min(t,n))}function Yr(e,t,n){return void 0===n&&(n={x:0,y:0}),{top:e.top-t.height-n.y,right:e.right-t.width+n.x,bottom:e.bottom-t.height+n.y,left:e.left-t.width-n.x}}function Kr(e){return[cr,pr,dr,fr].some((function(t){return e[t]>=0}))}var Ur=Er({defaultModifiers:[{name:"eventListeners",enabled:!0,phase:"write",fn:function(){},effect:function(e){var t=e.state,n=e.instance,l=e.options,a=l.scroll,o=void 0===a||a,r=l.resize,i=void 0===r||r,s=Ko(t.elements.popper),u=[].concat(t.scrollParents.reference,t.scrollParents.popper);return o&&u.forEach((function(e){e.addEventListener("scroll",n.update,Mr)})),i&&s.addEventListener("resize",n.update,Mr),function(){o&&u.forEach((function(e){e.removeEventListener("scroll",n.update,Mr)})),i&&s.removeEventListener("resize",n.update,Mr)}},data:{}},{name:"popperOffsets",enabled:!0,phase:"read",fn:function(e){var t=e.state,n=e.name;t.modifiersData[n]=Nr({reference:t.rects.reference,element:t.rects.popper,strategy:"absolute",placement:t.placement})},data:{}},{name:"computeStyles",enabled:!0,phase:"beforeWrite",fn:function(e){var t=e.state,n=e.options,l=n.gpuAcceleration,a=void 0===l||l,o=n.adaptive,r=void 0===o||o,i=n.roundOffsets,s=void 0===i||i,u={placement:Or(t.placement),popper:t.elements.popper,popperRect:t.rects.popper,gpuAcceleration:a};null!=t.modifiersData.popperOffsets&&(t.styles.popper=Object.assign(Object.assign({},t.styles.popper),Pr(Object.assign(Object.assign({},u),{},{offsets:t.modifiersData.popperOffsets,position:t.options.strategy,adaptive:r,roundOffsets:s})))),null!=t.modifiersData.arrow&&(t.styles.arrow=Object.assign(Object.assign({},t.styles.arrow),Pr(Object.assign(Object.assign({},u),{},{offsets:t.modifiersData.arrow,position:"absolute",adaptive:!1,roundOffsets:s})))),t.attributes.popper=Object.assign(Object.assign({},t.attributes.popper),{},{"data-popper-placement":t.placement})},data:{}},{name:"applyStyles",enabled:!0,phase:"write",fn:function(e){var t=e.state;Object.keys(t.elements).forEach((function(e){var n=t.styles[e]||{},l=t.attributes[e]||{},a=t.elements[e];Xo(a)&&Jo(a)&&(Object.assign(a.style,n),Object.keys(l).forEach((function(e){var t=l[e];!1===t?a.removeAttribute(e):a.setAttribute(e,!0===t?"":t)})))}))},effect:function(e){var t=e.state,n={popper:{position:t.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};return Object.assign(t.elements.popper.style,n.popper),t.elements.arrow&&Object.assign(t.elements.arrow.style,n.arrow),function(){Object.keys(t.elements).forEach((function(e){var l=t.elements[e],a=t.attributes[e]||{},o=Object.keys(t.styles.hasOwnProperty(e)?t.styles[e]:n[e]).reduce((function(e,t){return e[t]="",e}),{});Xo(l)&&Jo(l)&&(Object.assign(l.style,o),Object.keys(a).forEach((function(e){l.removeAttribute(e)})))}))}},requires:["computeStyles"]},{name:"offset",enabled:!0,phase:"main",requires:["popperOffsets"],fn:function(e){var t=e.state,n=e.options,l=e.name,a=n.offset,o=void 0===a?[0,0]:a,r=kr.reduce((function(e,n){return e[n]=function(e,t,n){var l=Or(e),a=[fr,cr].indexOf(l)>=0?-1:1,o="function"==typeof n?n(Object.assign(Object.assign({},t),{},{placement:e})):n,r=o[0],i=o[1];return r=r||0,i=(i||0)*a,[fr,pr].indexOf(l)>=0?{x:i,y:r}:{x:r,y:i}}(n,t.rects,o),e}),{}),i=r[t.placement],s=i.x,u=i.y;null!=t.modifiersData.popperOffsets&&(t.modifiersData.popperOffsets.x+=s,t.modifiersData.popperOffsets.y+=u),t.modifiersData[l]=r}},{name:"flip",enabled:!0,phase:"main",fn:function(e){var t=e.state,n=e.options,l=e.name;if(!t.modifiersData[l]._skip){for(var a=n.mainAxis,o=void 0===a||a,r=n.altAxis,i=void 0===r||r,s=n.fallbackPlacements,u=n.padding,c=n.boundary,d=n.rootBoundary,p=n.altBoundary,f=n.flipVariations,h=void 0===f||f,v=n.allowedAutoPlacements,m=t.options.placement,g=Or(m),b=s||(g!==m&&h?function(e){if(Or(e)===hr)return[];var t=Ir(e);return[zr(e),t,zr(t)]}(m):[Ir(m)]),y=[m].concat(b).reduce((function(e,n){return e.concat(Or(n)===hr?function(e,t){void 0===t&&(t={});var n=t,l=n.placement,a=n.boundary,o=n.rootBoundary,r=n.padding,i=n.flipVariations,s=n.allowedAutoPlacements,u=void 0===s?kr:s,c=Dr(l),d=c?i?xr:xr.filter((function(e){return Dr(e)===c})):vr,p=d.filter((function(e){return u.indexOf(e)>=0}));0===p.length&&(p=d);var f=p.reduce((function(t,n){return t[n]=Wr(e,{placement:n,boundary:a,rootBoundary:o,padding:r})[Or(n)],t}),{});return Object.keys(f).sort((function(e,t){return f[e]-f[t]}))}(t,{placement:n,boundary:c,rootBoundary:d,padding:u,flipVariations:h,allowedAutoPlacements:v}):n)}),[]),x=t.rects.reference,k=t.rects.popper,w=new Map,C=!0,_=y[0],A=0;A<y.length;A++){var S=y[A],E=Or(S),M=Dr(S)===mr,O=[cr,dr].indexOf(E)>=0,D=O?"width":"height",T=Wr(t,{placement:S,boundary:c,rootBoundary:d,altBoundary:p,padding:u}),N=O?M?pr:fr:M?dr:cr;x[D]>k[D]&&(N=Ir(N));var B=Ir(N),P=[];if(o&&P.push(T[E]<=0),i&&P.push(T[N]<=0,T[B]<=0),P.every((function(e){return e}))){_=S,C=!1;break}w.set(S,P)}if(C)for(var V=function(e){var t=y.find((function(t){var n=w.get(t);if(n)return n.slice(0,e).every((function(e){return e}))}));if(t)return _=t,"break"},I=h?3:1;I>0&&"break"!==V(I);I--);t.placement!==_&&(t.modifiersData[l]._skip=!0,t.placement=_,t.reset=!0)}},requiresIfExists:["offset"],data:{_skip:!1}},{name:"preventOverflow",enabled:!0,phase:"main",fn:function(e){var t=e.state,n=e.options,l=e.name,a=n.mainAxis,o=void 0===a||a,r=n.altAxis,i=void 0!==r&&r,s=n.boundary,u=n.rootBoundary,c=n.altBoundary,d=n.padding,p=n.tether,f=void 0===p||p,h=n.tetherOffset,v=void 0===h?0:h,m=Wr(t,{boundary:s,rootBoundary:u,padding:d,altBoundary:c}),g=Or(t.placement),b=Dr(t.placement),y=!b,x=Tr(g),k="x"===x?"y":"x",w=t.modifiersData.popperOffsets,C=t.rects.reference,_=t.rects.popper,A="function"==typeof v?v(Object.assign(Object.assign({},t.rects),{},{placement:t.placement})):v,S={x:0,y:0};if(w){if(o){var E="y"===x?cr:fr,M="y"===x?dr:pr,O="y"===x?"height":"width",D=w[x],T=w[x]+m[E],N=w[x]-m[M],B=f?-_[O]/2:0,P=b===mr?C[O]:_[O],V=b===mr?-_[O]:-C[O],I=t.elements.arrow,L=f&&I?lr(I):{width:0,height:0},z=t.modifiersData["arrow#persistent"]?t.modifiersData["arrow#persistent"].padding:{top:0,right:0,bottom:0,left:0},F=z[E],$=z[M],R=qr(0,C[O],L[O]),j=y?C[O]/2-B-R-F-A:P-R-F-A,H=y?-C[O]/2+B+R+$+A:V+R+$+A,W=t.elements.arrow&&ur(t.elements.arrow),q=W?"y"===x?W.clientTop||0:W.clientLeft||0:0,Y=t.modifiersData.offset?t.modifiersData.offset[t.placement][x]:0,K=w[x]+j-Y-q,U=w[x]+H-Y,G=qr(f?Math.min(T,K):T,D,f?Math.max(N,U):N);w[x]=G,S[x]=G-D}if(i){var X="x"===x?cr:fr,J="x"===x?dr:pr,Z=w[k],Q=qr(Z+m[X],Z,Z-m[J]);w[k]=Q,S[k]=Q-Z}t.modifiersData[l]=S}},requiresIfExists:["offset"]},{name:"arrow",enabled:!0,phase:"main",fn:function(e){var t,n=e.state,l=e.name,a=n.elements.arrow,o=n.modifiersData.popperOffsets,r=Or(n.placement),i=Tr(r),s=[fr,pr].indexOf(r)>=0?"height":"width";if(a&&o){var u=n.modifiersData[l+"#persistent"].padding,c=lr(a),d="y"===i?cr:fr,p="y"===i?dr:pr,f=n.rects.reference[s]+n.rects.reference[i]-o[i]-n.rects.popper[s],h=o[i]-n.rects.reference[i],v=ur(a),m=v?"y"===i?v.clientHeight||0:v.clientWidth||0:0,g=f/2-h/2,b=u[d],y=m-c[s]-u[p],x=m/2-c[s]/2+g,k=qr(b,x,y),w=i;n.modifiersData[l]=((t={})[w]=k,t.centerOffset=k-x,t)}},effect:function(e){var t=e.state,n=e.options,l=e.name,a=n.element,o=void 0===a?"[data-popper-arrow]":a,r=n.padding,i=void 0===r?0:r;null!=o&&("string"!=typeof o||(o=t.elements.popper.querySelector(o)))&&Fr(t.elements.popper,o)&&(t.elements.arrow=o,t.modifiersData[l+"#persistent"]={padding:jr("number"!=typeof i?i:Hr(i,vr))})},requires:["popperOffsets"],requiresIfExists:["preventOverflow"]},{name:"hide",enabled:!0,phase:"main",requiresIfExists:["preventOverflow"],fn:function(e){var t=e.state,n=e.name,l=t.rects.reference,a=t.rects.popper,o=t.modifiersData.preventOverflow,r=Wr(t,{elementContext:"reference"}),i=Wr(t,{altBoundary:!0}),s=Yr(r,l),u=Yr(i,a,o),c=Kr(s),d=Kr(u);t.modifiersData[n]={referenceClippingOffsets:s,popperEscapeOffsets:u,isReferenceHidden:c,hasPopperEscaped:d},t.attributes.popper=Object.assign(Object.assign({},t.attributes.popper),{},{"data-popper-reference-hidden":c,"data-popper-escaped":d})}}]}),Gr=n(3493),Xr=n.n(Gr),Jr=n(7484),Zr=n.n(Jr),Qr=n(6036),ei=n.n(Qr),ti=n(285),ni=n.n(ti),li=n(3386),ai=n.n(li),oi=n(8446),ri=n.n(oi),ii=n(8734),si=n.n(ii),ui=n(5183),ci=n.n(ui),di=n(172),pi=n.n(di),fi=n(423),hi=n.n(fi),vi=n(9212),mi=n.n(vi),gi=n(7412),bi=n.n(gi);function yi(){return(yi=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var l in n)Object.prototype.hasOwnProperty.call(n,l)&&(e[l]=n[l])}return e}).apply(this,arguments)}function xi(e){return(xi=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function ki(e,t){return(ki=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function wi(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function Ci(e,t,n){return(Ci=wi()?Reflect.construct:function(e,t,n){var l=[null];l.push.apply(l,t);var a=new(Function.bind.apply(e,l));return n&&ki(a,n.prototype),a}).apply(null,arguments)}function _i(e){var t="function"==typeof Map?new Map:void 0;return(_i=function(e){if(null===e||!function(e){return-1!==Function.toString.call(e).indexOf("[native code]")}(e))return e;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,n)}function n(){return Ci(e,arguments,xi(this).constructor)}return n.prototype=Object.create(e.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),ki(n,e)})(e)}var Ai=/%[sdj%]/g;function Si(e){if(!e||!e.length)return null;var t={};return e.forEach((function(e){var n=e.field;t[n]=t[n]||[],t[n].push(e)})),t}function Ei(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];var l=1,a=t[0],o=t.length;if("function"==typeof a)return a.apply(null,t.slice(1));if("string"==typeof a){var r=String(a).replace(Ai,(function(e){if("%%"===e)return"%";if(l>=o)return e;switch(e){case"%s":return String(t[l++]);case"%d":return Number(t[l++]);case"%j":try{return JSON.stringify(t[l++])}catch(e){return"[Circular]"}break;default:return e}}));return r}return a}function Mi(e,t){return null==e||!("array"!==t||!Array.isArray(e)||e.length)||!(!function(e){return"string"===e||"url"===e||"hex"===e||"email"===e||"date"===e||"pattern"===e}(t)||"string"!=typeof e||e)}function Oi(e,t,n){var l=0,a=e.length;!function o(r){if(r&&r.length)n(r);else{var i=l;l+=1,i<a?t(e[i],o):n([])}}([])}"undefined"!=typeof process&&process.env;var Di=function(e){var t,n;function l(t,n){var l;return(l=e.call(this,"Async Validation Error")||this).errors=t,l.fields=n,l}return n=e,(t=l).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n,l}(_i(Error));function Ti(e){return function(t){return t&&t.message?(t.field=t.field||e.fullField,t):{message:"function"==typeof t?t():t,field:t.field||e.fullField}}}function Ni(e,t){if(t)for(var n in t)if(t.hasOwnProperty(n)){var l=t[n];"object"==typeof l&&"object"==typeof e[n]?e[n]=yi(yi({},e[n]),l):e[n]=l}return e}function Bi(e,t,n,l,a,o){!e.required||n.hasOwnProperty(e.field)&&!Mi(t,o||e.type)||l.push(Ei(a.messages.required,e.fullField))}var Pi={email:/^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/,url:new RegExp("^(?!mailto:)(?:(?:http|https|ftp)://|//)(?:\\S+(?::\\S*)?@)?(?:(?:(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[0-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]+-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]+-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))|localhost)(?::\\d{2,5})?(?:(/|\\?|#)[^\\s]*)?$","i"),hex:/^#?([a-f0-9]{6}|[a-f0-9]{3})$/i},Vi={integer:function(e){return Vi.number(e)&&parseInt(e,10)===e},float:function(e){return Vi.number(e)&&!Vi.integer(e)},array:function(e){return Array.isArray(e)},regexp:function(e){if(e instanceof RegExp)return!0;try{return!!new RegExp(e)}catch(e){return!1}},date:function(e){return"function"==typeof e.getTime&&"function"==typeof e.getMonth&&"function"==typeof e.getYear&&!isNaN(e.getTime())},number:function(e){return!isNaN(e)&&"number"==typeof e},object:function(e){return"object"==typeof e&&!Vi.array(e)},method:function(e){return"function"==typeof e},email:function(e){return"string"==typeof e&&!!e.match(Pi.email)&&e.length<255},url:function(e){return"string"==typeof e&&!!e.match(Pi.url)},hex:function(e){return"string"==typeof e&&!!e.match(Pi.hex)}},Ii={required:Bi,whitespace:function(e,t,n,l,a){(/^\s+$/.test(t)||""===t)&&l.push(Ei(a.messages.whitespace,e.fullField))},type:function(e,t,n,l,a){if(e.required&&void 0===t)Bi(e,t,n,l,a);else{var o=e.type;["integer","float","array","regexp","object","method","email","number","date","url","hex"].indexOf(o)>-1?Vi[o](t)||l.push(Ei(a.messages.types[o],e.fullField,e.type)):o&&typeof t!==e.type&&l.push(Ei(a.messages.types[o],e.fullField,e.type))}},range:function(e,t,n,l,a){var o="number"==typeof e.len,r="number"==typeof e.min,i="number"==typeof e.max,s=t,u=null,c="number"==typeof t,d="string"==typeof t,p=Array.isArray(t);if(c?u="number":d?u="string":p&&(u="array"),!u)return!1;p&&(s=t.length),d&&(s=t.replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g,"_").length),o?s!==e.len&&l.push(Ei(a.messages[u].len,e.fullField,e.len)):r&&!i&&s<e.min?l.push(Ei(a.messages[u].min,e.fullField,e.min)):i&&!r&&s>e.max?l.push(Ei(a.messages[u].max,e.fullField,e.max)):r&&i&&(s<e.min||s>e.max)&&l.push(Ei(a.messages[u].range,e.fullField,e.min,e.max))},enum:function(e,t,n,l,a){e.enum=Array.isArray(e.enum)?e.enum:[],-1===e.enum.indexOf(t)&&l.push(Ei(a.messages.enum,e.fullField,e.enum.join(", ")))},pattern:function(e,t,n,l,a){e.pattern&&(e.pattern instanceof RegExp?(e.pattern.lastIndex=0,e.pattern.test(t)||l.push(Ei(a.messages.pattern.mismatch,e.fullField,t,e.pattern))):"string"==typeof e.pattern&&(new RegExp(e.pattern).test(t)||l.push(Ei(a.messages.pattern.mismatch,e.fullField,t,e.pattern))))}};function Li(e,t,n,l,a){var o=e.type,r=[];if(e.required||!e.required&&l.hasOwnProperty(e.field)){if(Mi(t,o)&&!e.required)return n();Ii.required(e,t,l,r,a,o),Mi(t,o)||Ii.type(e,t,l,r,a)}n(r)}var zi={string:function(e,t,n,l,a){var o=[];if(e.required||!e.required&&l.hasOwnProperty(e.field)){if(Mi(t,"string")&&!e.required)return n();Ii.required(e,t,l,o,a,"string"),Mi(t,"string")||(Ii.type(e,t,l,o,a),Ii.range(e,t,l,o,a),Ii.pattern(e,t,l,o,a),!0===e.whitespace&&Ii.whitespace(e,t,l,o,a))}n(o)},method:function(e,t,n,l,a){var o=[];if(e.required||!e.required&&l.hasOwnProperty(e.field)){if(Mi(t)&&!e.required)return n();Ii.required(e,t,l,o,a),void 0!==t&&Ii.type(e,t,l,o,a)}n(o)},number:function(e,t,n,l,a){var o=[];if(e.required||!e.required&&l.hasOwnProperty(e.field)){if(""===t&&(t=void 0),Mi(t)&&!e.required)return n();Ii.required(e,t,l,o,a),void 0!==t&&(Ii.type(e,t,l,o,a),Ii.range(e,t,l,o,a))}n(o)},boolean:function(e,t,n,l,a){var o=[];if(e.required||!e.required&&l.hasOwnProperty(e.field)){if(Mi(t)&&!e.required)return n();Ii.required(e,t,l,o,a),void 0!==t&&Ii.type(e,t,l,o,a)}n(o)},regexp:function(e,t,n,l,a){var o=[];if(e.required||!e.required&&l.hasOwnProperty(e.field)){if(Mi(t)&&!e.required)return n();Ii.required(e,t,l,o,a),Mi(t)||Ii.type(e,t,l,o,a)}n(o)},integer:function(e,t,n,l,a){var o=[];if(e.required||!e.required&&l.hasOwnProperty(e.field)){if(Mi(t)&&!e.required)return n();Ii.required(e,t,l,o,a),void 0!==t&&(Ii.type(e,t,l,o,a),Ii.range(e,t,l,o,a))}n(o)},float:function(e,t,n,l,a){var o=[];if(e.required||!e.required&&l.hasOwnProperty(e.field)){if(Mi(t)&&!e.required)return n();Ii.required(e,t,l,o,a),void 0!==t&&(Ii.type(e,t,l,o,a),Ii.range(e,t,l,o,a))}n(o)},array:function(e,t,n,l,a){var o=[];if(e.required||!e.required&&l.hasOwnProperty(e.field)){if(null==t&&!e.required)return n();Ii.required(e,t,l,o,a,"array"),null!=t&&(Ii.type(e,t,l,o,a),Ii.range(e,t,l,o,a))}n(o)},object:function(e,t,n,l,a){var o=[];if(e.required||!e.required&&l.hasOwnProperty(e.field)){if(Mi(t)&&!e.required)return n();Ii.required(e,t,l,o,a),void 0!==t&&Ii.type(e,t,l,o,a)}n(o)},enum:function(e,t,n,l,a){var o=[];if(e.required||!e.required&&l.hasOwnProperty(e.field)){if(Mi(t)&&!e.required)return n();Ii.required(e,t,l,o,a),void 0!==t&&Ii.enum(e,t,l,o,a)}n(o)},pattern:function(e,t,n,l,a){var o=[];if(e.required||!e.required&&l.hasOwnProperty(e.field)){if(Mi(t,"string")&&!e.required)return n();Ii.required(e,t,l,o,a),Mi(t,"string")||Ii.pattern(e,t,l,o,a)}n(o)},date:function(e,t,n,l,a){var o=[];if(e.required||!e.required&&l.hasOwnProperty(e.field)){if(Mi(t,"date")&&!e.required)return n();var r;Ii.required(e,t,l,o,a),Mi(t,"date")||(r=t instanceof Date?t:new Date(t),Ii.type(e,r,l,o,a),r&&Ii.range(e,r.getTime(),l,o,a))}n(o)},url:Li,hex:Li,email:Li,required:function(e,t,n,l,a){var o=[],r=Array.isArray(t)?"array":typeof t;Ii.required(e,t,l,o,a,r),n(o)},any:function(e,t,n,l,a){var o=[];if(e.required||!e.required&&l.hasOwnProperty(e.field)){if(Mi(t)&&!e.required)return n();Ii.required(e,t,l,o,a)}n(o)}};function Fi(){return{default:"Validation error on field %s",required:"%s is required",enum:"%s must be one of %s",whitespace:"%s cannot be empty",date:{format:"%s date %s is invalid for format %s",parse:"%s date could not be parsed, %s is invalid ",invalid:"%s date %s is invalid"},types:{string:"%s is not a %s",method:"%s is not a %s (function)",array:"%s is not an %s",object:"%s is not an %s",number:"%s is not a %s",date:"%s is not a %s",boolean:"%s is not a %s",integer:"%s is not an %s",float:"%s is not a %s",regexp:"%s is not a valid %s",email:"%s is not a valid %s",url:"%s is not a valid %s",hex:"%s is not a valid %s"},string:{len:"%s must be exactly %s characters",min:"%s must be at least %s characters",max:"%s cannot be longer than %s characters",range:"%s must be between %s and %s characters"},number:{len:"%s must equal %s",min:"%s cannot be less than %s",max:"%s cannot be greater than %s",range:"%s must be between %s and %s"},array:{len:"%s must be exactly %s in length",min:"%s cannot be less than %s in length",max:"%s cannot be greater than %s in length",range:"%s must be between %s and %s in length"},pattern:{mismatch:"%s value %s does not match pattern %s"},clone:function(){var e=JSON.parse(JSON.stringify(this));return e.clone=this.clone,e}}}var $i=Fi();function Ri(e){this.rules=null,this._messages=$i,this.define(e)}Ri.prototype={messages:function(e){return e&&(this._messages=Ni(Fi(),e)),this._messages},define:function(e){if(!e)throw new Error("Cannot configure a schema with no rules");if("object"!=typeof e||Array.isArray(e))throw new Error("Rules must be an object");var t,n;for(t in this.rules={},e)e.hasOwnProperty(t)&&(n=e[t],this.rules[t]=Array.isArray(n)?n:[n])},validate:function(e,t,n){var l=this;void 0===t&&(t={}),void 0===n&&(n=function(){});var a,o,r=e,i=t,s=n;if("function"==typeof i&&(s=i,i={}),!this.rules||0===Object.keys(this.rules).length)return s&&s(),Promise.resolve();if(i.messages){var u=this.messages();u===$i&&(u=Fi()),Ni(u,i.messages),i.messages=u}else i.messages=this.messages();var c={};(i.keys||Object.keys(this.rules)).forEach((function(t){a=l.rules[t],o=r[t],a.forEach((function(n){var a=n;"function"==typeof a.transform&&(r===e&&(r=yi({},r)),o=r[t]=a.transform(o)),(a="function"==typeof a?{validator:a}:yi({},a)).validator=l.getValidationMethod(a),a.field=t,a.fullField=a.fullField||t,a.type=l.getType(a),a.validator&&(c[t]=c[t]||[],c[t].push({rule:a,value:o,source:r,field:t}))}))}));var d={};return function(e,t,n,l){if(t.first){var a=new Promise((function(t,a){Oi(function(e){var t=[];return Object.keys(e).forEach((function(n){t.push.apply(t,e[n])})),t}(e),n,(function(e){return l(e),e.length?a(new Di(e,Si(e))):t()}))}));return a.catch((function(e){return e})),a}var o=t.firstFields||[];!0===o&&(o=Object.keys(e));var r=Object.keys(e),i=r.length,s=0,u=[],c=new Promise((function(t,a){var c=function(e){if(u.push.apply(u,e),++s===i)return l(u),u.length?a(new Di(u,Si(u))):t()};r.length||(l(u),t()),r.forEach((function(t){var l=e[t];-1!==o.indexOf(t)?Oi(l,n,c):function(e,t,n){var l=[],a=0,o=e.length;function r(e){l.push.apply(l,e),++a===o&&n(l)}e.forEach((function(e){t(e,r)}))}(l,n,c)}))}));return c.catch((function(e){return e})),c}(c,i,(function(e,t){var n,l=e.rule,a=!("object"!==l.type&&"array"!==l.type||"object"!=typeof l.fields&&"object"!=typeof l.defaultField);function o(e,t){return yi(yi({},t),{},{fullField:l.fullField+"."+e})}function r(n){void 0===n&&(n=[]);var r=n;if(Array.isArray(r)||(r=[r]),!i.suppressWarning&&r.length&&Ri.warning("async-validator:",r),r.length&&void 0!==l.message&&(r=[].concat(l.message)),r=r.map(Ti(l)),i.first&&r.length)return d[l.field]=1,t(r);if(a){if(l.required&&!e.value)return void 0!==l.message?r=[].concat(l.message).map(Ti(l)):i.error&&(r=[i.error(l,Ei(i.messages.required,l.field))]),t(r);var s={};if(l.defaultField)for(var u in e.value)e.value.hasOwnProperty(u)&&(s[u]=l.defaultField);for(var c in s=yi(yi({},s),e.rule.fields))if(s.hasOwnProperty(c)){var p=Array.isArray(s[c])?s[c]:[s[c]];s[c]=p.map(o.bind(null,c))}var f=new Ri(s);f.messages(i.messages),e.rule.options&&(e.rule.options.messages=i.messages,e.rule.options.error=i.error),f.validate(e.value,e.rule.options||i,(function(e){var n=[];r&&r.length&&n.push.apply(n,r),e&&e.length&&n.push.apply(n,e),t(n.length?n:null)}))}else t(r)}a=a&&(l.required||!l.required&&e.value),l.field=e.field,l.asyncValidator?n=l.asyncValidator(l,e.value,r,e.source,i):l.validator&&(!0===(n=l.validator(l,e.value,r,e.source,i))?r():!1===n?r(l.message||l.field+" fails"):n instanceof Array?r(n):n instanceof Error&&r(n.message)),n&&n.then&&n.then((function(){return r()}),(function(e){return r(e)}))}),(function(e){!function(e){var t,n,l,a=[],o={};for(t=0;t<e.length;t++)n=e[t],l=void 0,Array.isArray(n)?a=(l=a).concat.apply(l,n):a.push(n);a.length?o=Si(a):(a=null,o=null),s(a,o)}(e)}))},getType:function(e){if(void 0===e.type&&e.pattern instanceof RegExp&&(e.type="pattern"),"function"!=typeof e.validator&&e.type&&!zi.hasOwnProperty(e.type))throw new Error(Ei("Unknown rule type %s",e.type));return e.type||"string"},getValidationMethod:function(e){if("function"==typeof e.validator)return e.validator;var t=Object.keys(e),n=t.indexOf("message");return-1!==n&&t.splice(n,1),1===t.length&&"required"===t[0]?zi.required:zi[this.getType(e)]||!1}},Ri.register=function(e,t){if("function"!=typeof t)throw new Error("Cannot register a validator by type, validator is not a function");zi[e]=t},Ri.warning=function(){},Ri.messages=$i,Ri.validators=zi;const ji=Ri,Hi={success:"el-icon-success",warning:"el-icon-warning",error:"el-icon-error"};var Wi=Qn({name:"ElAlert",props:{title:{type:String,default:""},description:{type:String,default:""},type:{type:String,default:"info"},closable:{type:Boolean,default:!0},closeText:{type:String,default:""},showIcon:Boolean,center:Boolean,effect:{type:String,default:"light",validator:e=>["light","dark"].indexOf(e)>-1}},emits:["close"],setup(e,t){const n=tt(!0),l=ua((()=>"el-alert--"+e.type)),a=ua((()=>Hi[e.type]||"el-icon-info")),o=ua((()=>e.description||t.slots.default?"is-big":"")),r=ua((()=>e.description||t.slots.default?"is-bold":""));return{visible:n,typeClass:l,iconClass:a,isBigIcon:o,isBoldTitle:r,close:e=>{n.value=!1,t.emit("close",e)}}}});const qi={class:"el-alert__content"},Yi={key:1,class:"el-alert__description"};Wi.render=function(e,t,n,l,a,o){return Cl(),Al(Pa,{name:"el-alert-fade"},{default:en((()=>[Un(Tl("div",{class:["el-alert",[e.typeClass,e.center?"is-center":"","is-"+e.effect]],role:"alert"},[e.showIcon?(Cl(),Al("i",{key:0,class:["el-alert__icon",[e.iconClass,e.isBigIcon]]},null,2)):Pl("v-if",!0),Tl("div",qi,[e.title||e.$slots.title?(Cl(),Al("span",{key:0,class:["el-alert__title",[e.isBoldTitle]]},[Zt(e.$slots,"title",{},(()=>[Bl(d(e.title),1)]))],2)):Pl("v-if",!0),e.$slots.default||e.description?(Cl(),Al("p",Yi,[Zt(e.$slots,"default",{},(()=>[Bl(d(e.description),1)]))])):Pl("v-if",!0),e.closable?(Cl(),Al("i",{key:2,class:["el-alert__closebtn",{"is-customed":""!==e.closeText,"el-icon-close":""===e.closeText}],onClick:t[1]||(t[1]=(...t)=>e.close(...t))},d(e.closeText),3)):Pl("v-if",!0)])],2),[[ho,e.visible]])])),_:1})},Wi.__file="packages/alert/src/index.vue",Wi.install=e=>{e.component(Wi.name,Wi)};var Ki=Qn({name:"ElAside",props:{width:{type:String,default:"300px"}}});Ki.render=function(e,t,n,l,a,o){return Cl(),Al("aside",{class:"el-aside",style:{width:e.width}},[Zt(e.$slots,"default")],4)},Ki.__file="packages/container/src/aside.vue",Ki.install=e=>{e.component(Ki.name,Ki)};const Ui=()=>{},Gi=Object.assign,Xi=Array.isArray,Ji=e=>"function"==typeof e,Zi=e=>"string"==typeof e,Qi=e=>null!==e&&"object"==typeof e,es=Object.prototype.toString,ts=e=>es.call(e),ns=e=>ts(e).slice(8,-1),ls=e=>{const t=Object.create(null);return n=>t[n]||(t[n]=e(n))},as=/-(\w)/g,os=ls((e=>e.replace(as,((e,t)=>t?t.toUpperCase():"")))),rs=ls((e=>e.charAt(0).toUpperCase()+e.slice(1)));var is="undefined"==typeof window;const ss=(e,t="")=>{let n=e;return t.split(".").map((e=>{n=null==n?void 0:n[e]})),n};function us(e,t,n){let l=e;const a=(t=(t=t.replace(/\[(\w+)\]/g,".$1")).replace(/^\./,"")).split(".");let o=0;for(;o<a.length-1&&(l||n);o++){const e=a[o];if(!(e in l)){if(n)throw new Error("please transfer a valid prop path to form item!");break}l=l[e]}return{o:l,k:a[o],v:null==l?void 0:l[a[o]]}}const cs=()=>Math.floor(1e4*Math.random()),ds=e=>e||0===e?Array.isArray(e)?e:[e]:[],ps=e=>"boolean"==typeof e;function fs(e){let t=!1;return function(...n){t||(t=!0,window.requestAnimationFrame((()=>{e.apply(this,n),t=!1})))}}const hs=e=>{clearTimeout(e.value),e.value=null};function vs(e){return Object.keys(e).map((t=>[t,e[t]]))}function ms(){const e=la();return"$ELEMENT"in e.proxy?e.proxy.$ELEMENT:{}}const gs=function(e,t){return e.find(t)};function bs(e){return!!(!e&&0!==e||Xi(e)&&!e.length||Qi(e)&&!Object.keys(e).length)}function ys(e){return e.reduce(((e,t)=>{const n=Array.isArray(t)?ys(t):t;return e.concat(n)}),[])}function xs(e){return Array.from(new Set(e))}function ks(e){return e.value}const ws=["class","style"],Cs=/^on[A-Z]/;var _s=(e={})=>{const{excludeListeners:t=!1,excludeKeys:n=[]}=e,l=la(),a=nt({}),o=n.concat(ws);return l.attrs=Ye(l.attrs),Cn((()=>{const e=vs(l.attrs).reduce(((e,[n,l])=>(o.includes(n)||t&&Cs.test(n)||(e[n]=l),e)),{});a.value=e})),a};const As=function(e,t,n,l=!1){e&&t&&n&&e.addEventListener(t,n,l)},Ss=function(e,t,n){e&&t&&n&&e.removeEventListener(t,n,!1)};function Es(e,t){if(!e||!t)return!1;if(-1!==t.indexOf(" "))throw new Error("className should not contain space.");return e.classList?e.classList.contains(t):(" "+e.className+" ").indexOf(" "+t+" ")>-1}function Ms(e,t){if(!e)return;let n=e.className;const l=(t||"").split(" ");for(let t=0,a=l.length;t<a;t++){const a=l[t];a&&(e.classList?e.classList.add(a):Es(e,a)||(n+=" "+a))}e.classList||(e.className=n)}function Os(e,t){if(!e||!t)return;const n=t.split(" ");let l=" "+e.className+" ";for(let t=0,a=n.length;t<a;t++){const a=n[t];a&&(e.classList?e.classList.remove(a):Es(e,a)&&(l=l.replace(" "+a+" "," ")))}e.classList||(e.className=(l||"").replace(/^[\s\uFEFF]+|[\s\uFEFF]+$/g,""))}const Ds=function(e,t){if(!is){if(!e||!t)return null;"float"===(t=os(t))&&(t="cssFloat");try{const n=e.style[t];if(n)return n;const l=document.defaultView.getComputedStyle(e,"");return l?l[t]:""}catch(n){return e.style[t]}}},Ts=(e,t)=>{if(!is)return Ds(e,null==t?"overflow":t?"overflow-y":"overflow-x").match(/(scroll|auto)/)},Ns=(e,t)=>{if(is)return;let n=e;for(;n;){if([window,document,document.documentElement].includes(n))return window;if(Ts(n,t))return n;n=n.parentNode}return n},Bs=e=>{let t=0,n=e;for(;n;)t+=n.offsetTop,n=n.offsetParent;return t},Ps=e=>e.stopPropagation();let Vs;function Is(){if(is)return 0;if(void 0!==Vs)return Vs;const e=document.createElement("div");e.className="el-scrollbar__wrap",e.style.visibility="hidden",e.style.width="100px",e.style.position="absolute",e.style.top="-9999px",document.body.appendChild(e);const t=e.offsetWidth;e.style.overflow="scroll";const n=document.createElement("div");n.style.width="100%",e.appendChild(n);const l=n.offsetWidth;return e.parentNode.removeChild(e),Vs=t-l,Vs}class Ls extends Error{constructor(e){super(e),this.name="ElementPlusError"}}var zs=(e,t)=>{throw new Ls(`[${e}] ${t}`)};const Fs={tab:"Tab",enter:"Enter",space:"Space",left:"ArrowLeft",up:"ArrowUp",right:"ArrowRight",down:"ArrowDown",esc:"Escape",delete:"Delete",backspace:"Backspace"},$s=e=>"fixed"!==getComputedStyle(e).position&&null!==e.offsetParent,Rs=e=>Array.from(e.querySelectorAll('a[href],button:not([disabled]),button:not([hidden]),:not([tabindex="-1"]),input:not([disabled]),input:not([type="hidden"]),select:not([disabled]),textarea:not([disabled])')).filter(js).filter($s),js=e=>{if(e.tabIndex>0||0===e.tabIndex&&null!==e.getAttribute("tabIndex"))return!0;if(e.disabled)return!1;switch(e.nodeName){case"A":return!!e.href&&"ignore"!==e.rel;case"INPUT":return!("hidden"===e.type||"file"===e.type);case"BUTTON":case"SELECT":case"TEXTAREA":return!0;default:return!1}},Hs=e=>{var t;return!!js(e)&&(qs.IgnoreUtilFocusChanges=!0,null===(t=e.focus)||void 0===t||t.call(e),qs.IgnoreUtilFocusChanges=!1,document.activeElement===e)},Ws=function(e,t,...n){let l;l=t.includes("mouse")||t.includes("click")?"MouseEvents":t.includes("key")?"KeyboardEvent":"HTMLEvents";const a=document.createEvent(l);return a.initEvent(t,...n),e.dispatchEvent(a),e},qs={IgnoreUtilFocusChanges:!1,focusFirstDescendant:function(e){for(let t=0;t<e.childNodes.length;t++){const n=e.childNodes[t];if(Hs(n)||this.focusFirstDescendant(n))return!0}return!1},focusLastDescendant:function(e){for(let t=e.childNodes.length-1;t>=0;t--){const n=e.childNodes[t];if(Hs(n)||this.focusLastDescendant(n))return!0}return!1}},Ys=[];is||As(document,"keydown",(e=>{0!==Ys.length&&e.code===Fs.esc&&Ys[Ys.length-1].handleClose()}));const Ks=new Map;let Us;function Gs(e,t){let n=[];return Array.isArray(t.arg)?n=t.arg:n.push(t.arg),function(l,a){const o=t.instance.popperRef,r=l.target,i=a.target,s=!t||!t.instance,u=!r||!i,c=e.contains(r)||e.contains(i),d=e===r,p=n.length&&n.some((e=>null==e?void 0:e.contains(r)))||n.length&&n.includes(i),f=o&&(o.contains(r)||o.contains(i));s||u||c||d||p||f||t.value()}}is||(As(document,"mousedown",(e=>Us=e)),As(document,"mouseup",(e=>{for(const{documentHandler:t}of Ks.values())t(e,Us)})));const Xs={beforeMount(e,t){Ks.set(e,{documentHandler:Gs(e,t),bindingFn:t.value})},updated(e,t){Ks.set(e,{documentHandler:Gs(e,t),bindingFn:t.value})},unmounted(e){Ks.delete(e)}};var Js={beforeMount(e,t){let n,l=null;const a=()=>t.value&&t.value(),o=()=>{Date.now()-n<100&&a(),clearInterval(l),l=null};As(e,"mousedown",(e=>{0===e.button&&(n=Date.now(),function(e,t,n){const l=function(...a){n&&n.apply(this,a),Ss(e,t,l)};As(e,t,l)}(document,"mouseup",o),clearInterval(l),l=setInterval(a,100))}))}};const Zs={beforeMount(e){e["_trap-focus-children"]=Rs(e),e["_trap-focus-handler"]=t=>{const n=e["_trap-focus-children"];if(n.length>0&&t.code===Fs.tab){if(1===n.length)return t.preventDefault(),void(document.activeElement!==n[0]&&n[0].focus());const e=t.shiftKey,l=t.target===n[0],a=t.target===n[n.length-1];l&&e&&(t.preventDefault(),n[n.length-1].focus()),a&&!e&&(t.preventDefault(),n[0].focus())}},As(document,"keydown",e["_trap-focus-handler"])},updated(e){Mt((()=>{e["_trap-focus-children"]=Rs(e)}))},unmounted(e){Ss(document,"keydown",e["_trap-focus-handler"])}},Qs="undefined"!=typeof navigator&&navigator.userAgent.toLowerCase().indexOf("firefox")>-1,eu={beforeMount(e,t){!function(e,t){if(e&&e.addEventListener){const n=function(e){const n=Co()(e);t&&t.apply(this,[e,n])};Qs?e.addEventListener("DOMMouseScroll",n):e.onmousewheel=n}}(e,t.value)}},tu="update:modelValue",nu={validating:"el-icon-loading",success:"el-icon-circle-check",error:"el-icon-circle-close"};function lu(e){return/([(\uAC00-\uD7AF)|(\u3130-\u318F)])+/gi.test(e)}const au=e=>["","large","medium","small","mini"].includes(e);var ou=Qn({name:"ElForm",props:{model:Object,rules:Object,labelPosition:String,labelWidth:String,labelSuffix:{type:String,default:""},inline:Boolean,inlineMessage:Boolean,statusIcon:Boolean,showMessage:{type:Boolean,default:!0},size:String,disabled:Boolean,validateOnRuleChange:{type:Boolean,default:!0},hideRequiredAsterisk:{type:Boolean,default:!1}},setup(e,{emit:t}){const n=_o(),l=[];An((()=>e.rules),(()=>{l.forEach((e=>{e.removeValidateEvents(),e.addValidateEvents()})),e.validateOnRuleChange&&r((()=>({})))})),n.on("el.form.addField",(e=>{e&&l.push(e)})),n.on("el.form.removeField",(e=>{e.prop&&l.splice(l.indexOf(e),1)}));const a=()=>{e.model?l.forEach((e=>{e.resetField()})):console.warn("[Element Warn][Form]model is required for resetFields to work.")},o=(e=[])=>{(e.length?"string"==typeof e?l.filter((t=>e===t.prop)):l.filter((t=>e.indexOf(t.prop)>-1)):l).forEach((e=>{e.clearValidate()}))},r=t=>{if(!e.model)return void console.warn("[Element Warn][Form]model is required for validate to work!");let n;"function"!=typeof t&&(n=new Promise(((e,n)=>{t=function(t,l){t?e(!0):n(l)}}))),0===l.length&&t(!0);let a=!0,o=0,r={};for(const e of l)e.validate("",((e,n)=>{e&&(a=!1),r=Object.assign(Object.assign({},r),n),++o===l.length&&t(a,r)}));return n},i=(e,t)=>{e=[].concat(e);const n=l.filter((t=>-1!==e.indexOf(t.prop)));l.length?n.forEach((e=>{e.validate("",t)})):console.warn("[Element Warn]please pass correct props!")};return Fl("elForm",Ye(Object.assign(Object.assign(Object.assign({formMitt:n},st(e)),{resetFields:a,clearValidate:o,validateField:i,emit:t}),function(){const e=tt([]);function t(t){const n=e.value.indexOf(t);return-1===n&&console.warn("[Element Warn][ElementForm]unexpected width "+t),n}return{autoLabelWidth:ua((()=>{if(!e.value.length)return"0";const t=Math.max(...e.value);return t?t+"px":""})),registerLabelWidth:function(n,l){if(n&&l){const a=t(l);e.value.splice(a,1,n)}else n&&e.value.push(n)},deregisterLabelWidth:function(n){const l=t(n);l>-1&&e.value.splice(l,1)}}}()))),{validate:r,resetFields:a,clearValidate:o,validateField:i}}});let ru;ou.render=function(e,t,n,l,a,o){return Cl(),Al("form",{class:["el-form",[e.labelPosition?"el-form--label-"+e.labelPosition:"",{"el-form--inline":e.inline}]]},[Zt(e.$slots,"default")],2)},ou.__file="packages/form/src/form.vue",ou.install=e=>{e.component(ou.name,ou)};const iu=["letter-spacing","line-height","padding-top","padding-bottom","font-family","font-weight","font-size","text-rendering","text-transform","width","text-indent","padding-left","padding-right","border-width","box-sizing"];function su(e,t=1,n=null){var l;ru||(ru=document.createElement("textarea"),document.body.appendChild(ru));const{paddingSize:a,borderSize:o,boxSizing:r,contextStyle:i}=function(e){const t=window.getComputedStyle(e),n=t.getPropertyValue("box-sizing"),l=parseFloat(t.getPropertyValue("padding-bottom"))+parseFloat(t.getPropertyValue("padding-top")),a=parseFloat(t.getPropertyValue("border-bottom-width"))+parseFloat(t.getPropertyValue("border-top-width"));return{contextStyle:iu.map((e=>`${e}:${t.getPropertyValue(e)}`)).join(";"),paddingSize:l,borderSize:a,boxSizing:n}}(e);ru.setAttribute("style",i+";\n  height:0 !important;\n  visibility:hidden !important;\n  overflow:hidden !important;\n  position:absolute !important;\n  z-index:-1000 !important;\n  top:0 !important;\n  right:0 !important;\n"),ru.value=e.value||e.placeholder||"";let s=ru.scrollHeight;const u={};"border-box"===r?s+=o:"content-box"===r&&(s-=a),ru.value="";const c=ru.scrollHeight-a;if(null!==t){let e=c*t;"border-box"===r&&(e=e+a+o),s=Math.max(e,s),u.minHeight=e+"px"}if(null!==n){let e=c*n;"border-box"===r&&(e=e+a+o),s=Math.min(e,s)}return u.height=s+"px",null===(l=ru.parentNode)||void 0===l||l.removeChild(ru),ru=null,u}const uu={suffix:"append",prefix:"prepend"};var cu=Qn({name:"ElInput",inheritAttrs:!1,props:{modelValue:{type:[String,Number],default:""},type:{type:String,default:"text"},size:{type:String,validator:au},resize:{type:String,validator:e=>["none","both","horizontal","vertical"].includes(e)},autosize:{type:[Boolean,Object],default:!1},autocomplete:{type:String,default:"off",validator:e=>["on","off"].includes(e)},placeholder:{type:String},form:{type:String,default:""},disabled:{type:Boolean,default:!1},readonly:{type:Boolean,default:!1},clearable:{type:Boolean,default:!1},showPassword:{type:Boolean,default:!1},showWordLimit:{type:Boolean,default:!1},suffixIcon:{type:String,default:""},prefixIcon:{type:String,default:""},label:{type:String,default:""},tabindex:{type:String,default:""},validateEvent:{type:Boolean,default:!0}},emits:[tu,"input","change","focus","blur","clear","mouseleave","mouseenter","keydown"],setup(e,t){const n=la(),l=_s(),a=ms(),o=$l("elForm",{}),r=$l("elFormItem",{}),i=tt(null),s=tt(null),u=tt(!1),c=tt(!1),d=tt(!1),p=tt(!1),f=nt({}),h=ua((()=>i.value||s.value)),v=ua((()=>e.size||r.size||a.size)),m=ua((()=>o.statusIcon)),g=ua((()=>r.validateState||"")),b=ua((()=>nu[g.value])),y=ua((()=>Object.assign(Object.assign({},f.value),{resize:e.resize}))),x=ua((()=>e.disabled||o.disabled)),k=ua((()=>null===e.modelValue||void 0===e.modelValue?"":String(e.modelValue))),w=ua((()=>t.attrs.maxlength)),C=ua((()=>e.clearable&&!x.value&&!e.readonly&&k.value&&(u.value||c.value))),_=ua((()=>e.showPassword&&!x.value&&!e.readonly&&(!!k.value||u.value))),A=ua((()=>e.showWordLimit&&t.attrs.maxlength&&("text"===e.type||"textarea"===e.type)&&!x.value&&!e.readonly&&!e.showPassword)),S=ua((()=>"number"==typeof e.modelValue?String(e.modelValue).length:(e.modelValue||"").length)),E=ua((()=>A.value&&S.value>w.value)),M=()=>{const{type:t,autosize:n}=e;if(!is&&"textarea"===t)if(n){const e=Qi(n)?n.minRows:void 0,t=Qi(n)?n.maxRows:void 0;f.value=su(s.value,e,t)}else f.value={minHeight:su(s.value).minHeight}},O=()=>{const e=h.value;e&&e.value!==k.value&&(e.value=k.value)},D=e=>{const{el:l}=n.vnode,a=Array.from(l.querySelectorAll(".el-input__"+e)).find((e=>e.parentNode===l));if(!a)return;const o=uu[e];t.slots[o]?a.style.transform=`translateX(${"suffix"===e?"-":""}${l.querySelector(".el-input-group__"+o).offsetWidth}px)`:a.removeAttribute("style")},T=()=>{D("prefix"),D("suffix")},N=e=>{const{value:n}=e.target;d.value||n!==k.value&&(t.emit(tu,n),t.emit("input",n),Mt(O))},B=()=>{Mt((()=>{h.value.focus()}))};return An((()=>e.modelValue),(t=>{var n;Mt(M),e.validateEvent&&(null===(n=r.formItemMitt)||void 0===n||n.emit("el.form.change",[t]))})),An(k,(()=>{O()})),An((()=>e.type),(()=>{Mt((()=>{O(),M(),T()}))})),mn((()=>{O(),T(),Mt(M)})),bn((()=>{Mt(T)})),{input:i,textarea:s,attrs:l,inputSize:v,validateState:g,validateIcon:b,textareaStyle:y,inputDisabled:x,showClear:C,showPwdVisible:_,isWordLimitVisible:A,upperLimit:w,textLength:S,hovering:c,inputExceed:E,passwordVisible:p,inputOrTextarea:h,handleInput:N,handleChange:e=>{t.emit("change",e.target.value)},handleFocus:e=>{u.value=!0,t.emit("focus",e)},handleBlur:n=>{var l;u.value=!1,t.emit("blur",n),e.validateEvent&&(null===(l=r.formItemMitt)||void 0===l||l.emit("el.form.blur",[e.modelValue]))},handleCompositionStart:()=>{d.value=!0},handleCompositionUpdate:e=>{const t=e.target.value,n=t[t.length-1]||"";d.value=!lu(n)},handleCompositionEnd:e=>{d.value&&(d.value=!1,N(e))},handlePasswordVisible:()=>{p.value=!p.value,B()},clear:()=>{t.emit(tu,""),t.emit("change",""),t.emit("clear")},select:()=>{h.value.select()},focus:B,blur:()=>{h.value.blur()},getSuffixVisible:()=>t.slots.suffix||e.suffixIcon||C.value||e.showPassword||A.value||g.value&&m.value,onMouseLeave:e=>{c.value=!1,t.emit("mouseleave",e)},onMouseEnter:e=>{c.value=!0,t.emit("mouseenter",e)},handleKeydown:e=>{t.emit("keydown",e)}}}});const du={key:0,class:"el-input-group__prepend"},pu={key:2,class:"el-input__prefix"},fu={key:3,class:"el-input__suffix"},hu={class:"el-input__suffix-inner"},vu={key:3,class:"el-input__count"},mu={class:"el-input__count-inner"},gu={key:4,class:"el-input-group__append"},bu={key:2,class:"el-input__count"};cu.render=function(e,t,n,l,a,o){return Cl(),Al("div",{class:["textarea"===e.type?"el-textarea":"el-input",e.inputSize?"el-input--"+e.inputSize:"",{"is-disabled":e.inputDisabled,"is-exceed":e.inputExceed,"el-input-group":e.$slots.prepend||e.$slots.append,"el-input-group--append":e.$slots.append,"el-input-group--prepend":e.$slots.prepend,"el-input--prefix":e.$slots.prefix||e.prefixIcon,"el-input--suffix":e.$slots.suffix||e.suffixIcon||e.clearable||e.showPassword},e.$attrs.class],style:e.$attrs.style,onMouseenter:t[19]||(t[19]=(...t)=>e.onMouseEnter(...t)),onMouseleave:t[20]||(t[20]=(...t)=>e.onMouseLeave(...t))},["textarea"!==e.type?(Cl(),Al(gl,{key:0},[Pl(" 前置元素 "),e.$slots.prepend?(Cl(),Al("div",du,[Zt(e.$slots,"prepend")])):Pl("v-if",!0),"textarea"!==e.type?(Cl(),Al("input",zl({key:1,ref:"input",class:"el-input__inner"},e.attrs,{type:e.showPassword?e.passwordVisible?"text":"password":e.type,disabled:e.inputDisabled,readonly:e.readonly,autocomplete:e.autocomplete,tabindex:e.tabindex,"aria-label":e.label,placeholder:e.placeholder,onCompositionstart:t[1]||(t[1]=(...t)=>e.handleCompositionStart(...t)),onCompositionupdate:t[2]||(t[2]=(...t)=>e.handleCompositionUpdate(...t)),onCompositionend:t[3]||(t[3]=(...t)=>e.handleCompositionEnd(...t)),onInput:t[4]||(t[4]=(...t)=>e.handleInput(...t)),onFocus:t[5]||(t[5]=(...t)=>e.handleFocus(...t)),onBlur:t[6]||(t[6]=(...t)=>e.handleBlur(...t)),onChange:t[7]||(t[7]=(...t)=>e.handleChange(...t)),onKeydown:t[8]||(t[8]=(...t)=>e.handleKeydown(...t))}),null,16,["type","disabled","readonly","autocomplete","tabindex","aria-label","placeholder"])):Pl("v-if",!0),Pl(" 前置内容 "),e.$slots.prefix||e.prefixIcon?(Cl(),Al("span",pu,[Zt(e.$slots,"prefix"),e.prefixIcon?(Cl(),Al("i",{key:0,class:["el-input__icon",e.prefixIcon]},null,2)):Pl("v-if",!0)])):Pl("v-if",!0),Pl(" 后置内容 "),e.getSuffixVisible()?(Cl(),Al("span",fu,[Tl("span",hu,[e.showClear&&e.showPwdVisible&&e.isWordLimitVisible?Pl("v-if",!0):(Cl(),Al(gl,{key:0},[Zt(e.$slots,"suffix"),e.suffixIcon?(Cl(),Al("i",{key:0,class:["el-input__icon",e.suffixIcon]},null,2)):Pl("v-if",!0)],64)),e.showClear?(Cl(),Al("i",{key:1,class:"el-input__icon el-icon-circle-close el-input__clear",onMousedown:t[9]||(t[9]=co((()=>{}),["prevent"])),onClick:t[10]||(t[10]=(...t)=>e.clear(...t))},null,32)):Pl("v-if",!0),e.showPwdVisible?(Cl(),Al("i",{key:2,class:"el-input__icon el-icon-view el-input__clear",onClick:t[11]||(t[11]=(...t)=>e.handlePasswordVisible(...t))})):Pl("v-if",!0),e.isWordLimitVisible?(Cl(),Al("span",vu,[Tl("span",mu,d(e.textLength)+"/"+d(e.upperLimit),1)])):Pl("v-if",!0)]),e.validateState?(Cl(),Al("i",{key:0,class:["el-input__icon","el-input__validateIcon",e.validateIcon]},null,2)):Pl("v-if",!0)])):Pl("v-if",!0),Pl(" 后置元素 "),e.$slots.append?(Cl(),Al("div",gu,[Zt(e.$slots,"append")])):Pl("v-if",!0)],64)):(Cl(),Al("textarea",zl({key:1,ref:"textarea",class:"el-textarea__inner"},e.attrs,{tabindex:e.tabindex,disabled:e.inputDisabled,readonly:e.readonly,autocomplete:e.autocomplete,style:e.textareaStyle,"aria-label":e.label,onCompositionstart:t[12]||(t[12]=(...t)=>e.handleCompositionStart(...t)),onCompositionupdate:t[13]||(t[13]=(...t)=>e.handleCompositionUpdate(...t)),onCompositionend:t[14]||(t[14]=(...t)=>e.handleCompositionEnd(...t)),onInput:t[15]||(t[15]=(...t)=>e.handleInput(...t)),onFocus:t[16]||(t[16]=(...t)=>e.handleFocus(...t)),onBlur:t[17]||(t[17]=(...t)=>e.handleBlur(...t)),onChange:t[18]||(t[18]=(...t)=>e.handleChange(...t))}),null,16,["tabindex","disabled","readonly","autocomplete","aria-label"])),e.isWordLimitVisible&&"textarea"===e.type?(Cl(),Al("span",bu,d(e.textLength)+"/"+d(e.upperLimit),1)):Pl("v-if",!0)],38)},cu.__file="packages/input/src/index.vue",cu.install=e=>{e.component(cu.name,cu)};const yu=function(e){for(const t of e){const e=t.target.__resizeListeners__||[];e.length&&e.forEach((e=>{e()}))}},xu=function(e,t){!is&&e&&(e.__resizeListeners__||(e.__resizeListeners__=[],e.__ro__=new qo(yu),e.__ro__.observe(e)),e.__resizeListeners__.push(t))},ku=function(e,t){e&&e.__resizeListeners__&&(e.__resizeListeners__.splice(e.__resizeListeners__.indexOf(t),1),e.__resizeListeners__.length||e.__ro__.disconnect())},wu={vertical:{offset:"offsetHeight",scroll:"scrollTop",scrollSize:"scrollHeight",size:"height",key:"vertical",axis:"Y",client:"clientY",direction:"top"},horizontal:{offset:"offsetWidth",scroll:"scrollLeft",scrollSize:"scrollWidth",size:"width",key:"horizontal",axis:"X",client:"clientX",direction:"left"}};function Cu({move:e,size:t,bar:n}){const l={},a=`translate${n.axis}(${e}%)`;return l[n.size]=t,l.transform=a,l.msTransform=a,l.webkitTransform=a,l}var _u=Qn({name:"Bar",props:{vertical:Boolean,size:String,move:Number},setup(e){const t=la(),n=tt(null),l=$l("scroll-bar-wrap",{}),a=ua((()=>wu[e.vertical?"vertical":"horizontal"])),o=tt({}),r=tt(null),i=e=>{e.ctrlKey||2===e.button||(u(e),o.value[a.value.axis]=e.currentTarget[a.value.offset]-(e[a.value.client]-e.currentTarget.getBoundingClientRect()[a.value.direction]))},s=e=>{const o=100*(Math.abs(e.target.getBoundingClientRect()[a.value.direction]-e[a.value.client])-n.value[a.value.offset]/2)/t.vnode.el[a.value.offset];l.value[a.value.scroll]=o*l.value[a.value.scrollSize]/100},u=e=>{e.stopImmediatePropagation(),r.value=!0,As(document,"mousemove",c),As(document,"mouseup",d),document.onselectstart=()=>!1},c=e=>{if(!1===r.value)return;const i=o.value[a.value.axis];if(!i)return;const s=100*(-1*(t.vnode.el.getBoundingClientRect()[a.value.direction]-e[a.value.client])-(n.value[a.value.offset]-i))/t.vnode.el[a.value.offset];l.value[a.value.scroll]=s*l.value[a.value.scrollSize]/100};function d(){r.value=!1,o.value[a.value.axis]=0,Ss(document,"mousemove",c),document.onselectstart=null}return xn((()=>{Ss(document,"mouseup",d)})),()=>ca("div",{class:["el-scrollbar__bar","is-"+a.value.key],onMousedown:s},ca("div",{ref:n,class:"el-scrollbar__thumb",onMousedown:i,style:Cu({size:e.size,move:e.move,bar:a.value})}))}}),Au=Qn({name:"ElScrollbar",components:{Bar:_u},props:{native:{type:Boolean,default:!1},wrapStyle:{type:[String,Array],default:""},wrapClass:{type:[String,Array],default:""},viewClass:{type:[String,Array],default:""},viewStyle:{type:[String,Array],default:""},noresize:Boolean,tag:{type:String,default:"div"}},setup(e){const t=tt("0"),n=tt("0"),l=tt(0),a=tt(0),o=tt(null),r=tt(null);Fl("scroll-bar-wrap",o);const i=()=>{if(!o.value)return;const e=100*o.value.clientHeight/o.value.scrollHeight,l=100*o.value.clientWidth/o.value.scrollWidth;n.value=e<100?e+"%":"",t.value=l<100?l+"%":""};mn((()=>{e.native||(Mt(i),!e.noresize&&xu(r.value,i))})),yn((()=>{e.native||!e.noresize&&ku(r.value,i)}));const s=ua((()=>Is())),u=ua((()=>{const t=Is();let n=e.wrapStyle;if(t){const l=`-${t}px`,a=`margin-bottom: ${l}; margin-right: ${l};`;Array.isArray(e.wrapStyle)?(n=function(e){const t={};for(let n=0;n<e.length;n++)e[n]&&Gi(t,e[n]);return t}(e.wrapStyle),n.marginRight=n.marginBottom=l):"string"==typeof e.wrapStyle?n+=a:n=a}return n}));return{moveX:l,moveY:a,sizeWidth:t,sizeHeight:n,style:u,gutter:s,wrap:o,resize:r,update:i,handleScroll:()=>{e.native||(a.value=100*o.value.scrollTop/o.value.clientHeight,l.value=100*o.value.scrollLeft/o.value.clientWidth)}}}});const Su={class:"el-scrollbar"};var Eu,Mu;function Ou(e,t){if(!(e=>e.type===yl)(e))return(e=>e.type===gl)(e)||(e=>"template"===e.type)(e)?t>0?Du(e.children,t-1):void 0:e}Au.render=function(e,t,n,l,a,o){const r=pl("bar");return Cl(),Al("div",Su,[Tl("div",{ref:"wrap",class:[e.wrapClass,"el-scrollbar__wrap",e.native?"":"el-scrollbar__wrap--hidden-default"],style:e.style,onScroll:t[1]||(t[1]=(...t)=>e.handleScroll(...t))},[(Cl(),Al((i=e.tag,O(i)?vl(dl,i,!1)||i:i||fl),{ref:"resize",class:["el-scrollbar__view",e.viewClass],style:e.viewStyle},{default:en((()=>[Zt(e.$slots,"default")])),_:3},8,["class","style"]))],38),e.native?Pl("v-if",!0):(Cl(),Al(gl,{key:0},[Tl(r,{move:e.moveX,size:e.sizeWidth},null,8,["move","size"]),Tl(r,{vertical:"",move:e.moveY,size:e.sizeHeight},null,8,["move","size"])],64))]);var i},Au.__file="packages/scrollbar/src/index.vue",Au.install=e=>{e.component(Au.name,Au)},(Mu=Eu||(Eu={}))[Mu.TEXT=1]="TEXT",Mu[Mu.CLASS=2]="CLASS",Mu[Mu.STYLE=4]="STYLE",Mu[Mu.PROPS=8]="PROPS",Mu[Mu.FULL_PROPS=16]="FULL_PROPS",Mu[Mu.HYDRATE_EVENTS=32]="HYDRATE_EVENTS",Mu[Mu.STABLE_FRAGMENT=64]="STABLE_FRAGMENT",Mu[Mu.KEYED_FRAGMENT=128]="KEYED_FRAGMENT",Mu[Mu.UNKEYED_FRAGMENT=256]="UNKEYED_FRAGMENT",Mu[Mu.NEED_PATCH=512]="NEED_PATCH",Mu[Mu.DYNAMIC_SLOTS=1024]="DYNAMIC_SLOTS",Mu[Mu.HOISTED=-1]="HOISTED",Mu[Mu.BAIL=-2]="BAIL";const Du=(e,t=3)=>Array.isArray(e)?Ou(e[0],t):Ou(e,t);function Tu(e,t,n,l,a){return Cl(),Al(e,t,n,l,a)}let Nu={};const Bu=e=>{e.preventDefault(),e.stopPropagation()},Pu=()=>{null==Fu||Fu.doOnModalClick()};let Vu,Iu=!1;const Lu=function(){if(is)return;let e=Fu.modalDom;return e?Iu=!0:(Iu=!1,e=document.createElement("div"),Fu.modalDom=e,As(e,"touchmove",Bu),As(e,"click",Pu)),e},zu={},Fu={modalFade:!0,modalDom:void 0,zIndex:Vu,getInstance:function(e){return zu[e]},register:function(e,t){e&&t&&(zu[e]=t)},deregister:function(e){e&&(zu[e]=null,delete zu[e])},nextZIndex:function(){return++Fu.zIndex},modalStack:[],doOnModalClick:function(){const e=Fu.modalStack[Fu.modalStack.length-1];if(!e)return;const t=Fu.getInstance(e.id);t&&t.closeOnClickModal.value&&t.close()},openModal:function(e,t,n,l,a){if(is)return;if(!e||void 0===t)return;this.modalFade=a;const o=this.modalStack;for(let t=0,n=o.length;t<n;t++)if(o[t].id===e)return;const r=Lu();Ms(r,"v-modal"),this.modalFade&&!Iu&&Ms(r,"v-modal-enter"),l&&l.trim().split(/\s+/).forEach((e=>Ms(r,e))),setTimeout((()=>{Os(r,"v-modal-enter")}),200),n&&n.parentNode&&11!==n.parentNode.nodeType?n.parentNode.appendChild(r):document.body.appendChild(r),t&&(r.style.zIndex=String(t)),r.tabIndex=0,r.style.display="",this.modalStack.push({id:e,zIndex:t,modalClass:l})},closeModal:function(e){const t=this.modalStack,n=Lu();if(t.length>0){const l=t[t.length-1];if(l.id===e)l.modalClass&&l.modalClass.trim().split(/\s+/).forEach((e=>Os(n,e))),t.pop(),t.length>0&&(n.style.zIndex=t[t.length-1].zIndex);else for(let n=t.length-1;n>=0;n--)if(t[n].id===e){t.splice(n,1);break}}0===t.length&&(this.modalFade&&Ms(n,"v-modal-leave"),setTimeout((()=>{0===t.length&&(n.parentNode&&n.parentNode.removeChild(n),n.style.display="none",Fu.modalDom=void 0),Os(n,"v-modal-leave")}),200))}};function $u(e,t=[]){const{arrow:n,arrowOffset:l,offset:a,gpuAcceleration:o}=e,r=[{name:"offset",options:{offset:[0,null!=a?a:12]}},{name:"preventOverflow",options:{padding:{top:2,bottom:2,left:5,right:5}}},{name:"flip",options:{padding:5}},{name:"computeStyles",options:{gpuAcceleration:o,adaptive:o}}];return n&&r.push({name:"arrow",options:{element:n,padding:null!=l?l:5}}),r.push(...t),r}var Ru;Object.defineProperty(Fu,"zIndex",{configurable:!0,get:()=>(void 0===Vu&&(Vu=Nu.zIndex||2e3),Vu),set(e){Vu=e}}),is||As(window,"keydown",(function(e){if(e.code===Fs.esc){const e=function(){if(!is&&Fu.modalStack.length>0){const e=Fu.modalStack[Fu.modalStack.length-1];if(!e)return;return Fu.getInstance(e.id)}}();e&&e.closeOnPressEscape.value&&(e.handleClose?e.handleClose():e.handleAction?e.handleAction("cancel"):e.close())}})),function(e){e.DARK="dark",e.LIGHT="light"}(Ru||(Ru={}));var ju={arrowOffset:{type:Number,default:5},appendToBody:{type:Boolean,default:!0},boundariesPadding:{type:Number,default:0},content:{type:String,default:""},class:{type:String,default:""},style:Object,closeDelay:{type:Number,default:200},cutoff:{type:Boolean,default:!1},disabled:{type:Boolean,default:!1},effect:{type:String,default:Ru.DARK},enterable:{type:Boolean,default:!0},hideAfter:{type:Number,default:0},manualMode:{type:Boolean,default:!1},showAfter:{type:Number,default:0},offset:{type:Number,default:12},placement:{type:String,default:"bottom"},popperClass:{type:String,default:""},pure:{type:Boolean,default:!1},popperOptions:{type:Object,default:()=>null},showArrow:{type:Boolean,default:!0},strategy:{type:String,default:"fixed"},transition:{type:String,default:"el-fade-in-linear"},trigger:{type:[String,Array],default:"hover"},visible:{type:Boolean,default:void 0},stopPopperMouseEvent:{type:Boolean,default:!0},gpuAcceleration:{type:Boolean,default:!0}};function Hu(e,{emit:t}){const n=tt(null),l=tt(null),a=tt(null),o="el-popper-"+cs();let r=null,i=null,s=null,u=!1;const c=()=>e.manualMode||"manual"===e.trigger,d=tt({zIndex:Fu.nextZIndex()}),p=function(e,t){return ua((()=>{var n;return Object.assign(Object.assign({placement:e.placement},e.popperOptions),{modifiers:$u({arrow:t.arrow.value,arrowOffset:e.arrowOffset,offset:e.offset,gpuAcceleration:e.gpuAcceleration},null===(n=e.popperOptions)||void 0===n?void 0:n.modifiers)})}))}(e,{arrow:n}),f=Ye({visible:!!e.visible}),h=ua({get:()=>!e.disabled&&(ps(e.visible)?e.visible:f.visible),set(n){c()||(ps(e.visible)?t("update:visible",n):f.visible=n)}});function v(){e.hideAfter>0&&(s=window.setTimeout((()=>{m()}),e.hideAfter)),h.value=!0}function m(){h.value=!1}function g(){clearTimeout(i),clearTimeout(s)}const b=()=>{c()||e.disabled||(g(),0===e.showAfter?v():i=window.setTimeout((()=>{v()}),e.showAfter))},y=()=>{c()||(g(),e.closeDelay>0?s=window.setTimeout((()=>{x()}),e.closeDelay):x())},x=()=>{m(),e.disabled&&w(!0)};function k(){if(!ks(h))return;const e=ks(l),t=ns(e).startsWith("HTML")?e:e.$el;r=Ur(t,ks(a),ks(p)),r.update()}function w(e){!r||ks(h)&&!e||C()}function C(){var e;null===(e=null==r?void 0:r.destroy)||void 0===e||e.call(r),r=null}const _={};if(!c()){const t=()=>{ks(h)?y():b()},n=e=>{switch(e.stopPropagation(),e.type){case"click":u?u=!1:t();break;case"mouseenter":b();break;case"mouseleave":y();break;case"focus":u=!0,b();break;case"blur":u=!1,y()}},l=e=>{switch(e){case"click":_.onClick=n;break;case"hover":_.onMouseEnter=n,_.onMouseLeave=n;break;case"focus":_.onFocus=n,_.onBlur=n}};Xi(e.trigger)?Object.values(e.trigger).map(l):l(e.trigger)}return An(p,(e=>{r&&(r.setOptions(e),r.update())})),An(h,(function(e){e&&(d.value.zIndex=Fu.nextZIndex(),k())})),{update:function(){ks(h)&&(r?r.update():k())},doDestroy:w,show:b,hide:y,onPopperMouseEnter:function(){e.enterable&&"click"!==e.trigger&&clearTimeout(s)},onPopperMouseLeave:function(){const{trigger:t}=e;Zi(t)&&("click"===t||"focus"===t)||1===t.length&&("click"===t[0]||"focus"===t[0])||y()},onAfterEnter:()=>{t("after-enter")},onAfterLeave:()=>{C(),t("after-leave")},onBeforeEnter:()=>{t("before-enter")},onBeforeLeave:()=>{t("before-leave")},initializePopper:k,isManualMode:c,arrowRef:n,events:_,popperId:o,popperInstance:r,popperRef:a,popperStyle:d,triggerRef:l,visibility:h}}function Wu(e,t){const{effect:n,name:l,stopPopperMouseEvent:a,popperClass:o,popperStyle:r,popperRef:i,pure:s,popperId:u,visibility:c,onMouseEnter:d,onMouseLeave:p,onAfterEnter:f,onAfterLeave:h,onBeforeEnter:v,onBeforeLeave:m}=e,g=[o,"el-popper","is-"+n,s?"is-pure":""],b=a?Ps:Ui;return Tl(Pa,{name:l,onAfterEnter:f,onAfterLeave:h,onBeforeEnter:v,onBeforeLeave:m},{default:en((()=>[Un(Tl("div",{"aria-hidden":String(!c),class:g,style:null!=r?r:{},id:u,ref:null!=i?i:"popperRef",role:"tooltip",onMouseEnter:d,onMouseLeave:p,onClick:Ps,onMouseDown:b,onMouseUp:b},t,Eu.CLASS|Eu.STYLE|Eu.PROPS|Eu.HYDRATE_EVENTS,["aria-hidden","onMouseenter","onMouseleave","onMouseDown","onMouseUp","onClick","id"]),[[ho,c]])]))},Eu.PROPS,["name","onAfterEnter","onAfterLeave","onBeforeEnter","onBeforeLeave"])}function qu(e,t){const n=Du(e,1);return n||zs("renderTrigger","trigger expects single rooted node"),Nl(n,t)}function Yu(e){return e?(Cl(),Al("div",{ref:"arrowRef",class:"el-popper__arrow","data-popper-arrow":""},null,Eu.NEED_PATCH)):(Cl(),Al(yl,null,""))}var Ku=Qn({name:"ElPopper",props:ju,emits:["update:visible","after-enter","after-leave","before-enter","before-leave"],setup(e,t){t.slots.trigger||zs("ElPopper","Trigger must be provided");const n=Hu(e,t),l=()=>n.doDestroy(!0);return mn(n.initializePopper),yn(l),Fn(n.initializePopper),$n(l),n},render(){var e;const{$slots:t,appendToBody:n,class:l,style:a,effect:o,hide:r,onPopperMouseEnter:i,onPopperMouseLeave:s,onAfterEnter:u,onAfterLeave:c,onBeforeEnter:p,onBeforeLeave:f,popperClass:h,popperId:v,popperStyle:m,pure:g,showArrow:b,transition:y,visibility:x,stopPopperMouseEvent:k}=this,w=this.isManualMode(),C=Yu(b),_=Wu({effect:o,name:y,popperClass:h,popperId:v,popperStyle:m,pure:g,stopPopperMouseEvent:k,onMouseEnter:i,onMouseLeave:s,onAfterEnter:u,onAfterLeave:c,onBeforeEnter:p,onBeforeLeave:f,visibility:x},[Zt(t,"default",{},(()=>[d(this.content)])),C]),A=null===(e=t.trigger)||void 0===e?void 0:e.call(t),S=Object.assign({ariaDescribedby:v,class:l,style:a,ref:"triggerRef"},this.events),E=w?qu(A,S):Un(qu(A,S),[[Xs,r]]);return Tu(gl,null,[E,Tl(cl,{to:"body",disabled:!n},[_],Eu.PROPS,["disabled"])])}});Ku.__file="packages/popper/src/index.vue",Ku.install=e=>{e.component(Ku.name,Ku)};var Uu=Qn({name:"ElAutocomplete",components:{ElPopper:Ku,ElInput:cu,ElScrollbar:Au},directives:{clickoutside:Xs},inheritAttrs:!1,props:{valueKey:{type:String,default:"value"},modelValue:{type:[String,Number],default:""},debounce:{type:Number,default:300},placement:{type:String,validator:e=>["top","top-start","top-end","bottom","bottom-start","bottom-end"].includes(e),default:"bottom-start"},fetchSuggestions:{type:Function,default:Ui},popperClass:{type:String,default:""},triggerOnFocus:{type:Boolean,default:!0},selectWhenUnmatched:{type:Boolean,default:!1},hideLoading:{type:Boolean,default:!1},popperAppendToBody:{type:Boolean,default:!0},highlightFirstItem:{type:Boolean,default:!1}},emits:[tu,"input","change","focus","blur","clear","select"],setup(e,t){const n=_s(),l=tt([]),a=tt(-1),o=tt(""),r=tt(!1),i=tt(!1),s=tt(!1),u=tt(null),c=tt(null),d=tt(null),p=ua((()=>"el-autocomplete-"+cs())),f=ua((()=>(Xi(l.value)&&l.value.length>0||s.value)&&r.value)),h=ua((()=>!e.hideLoading&&s.value)),v=()=>{Mt(d.value.update)};An(f,(()=>{o.value=u.value.$el.offsetWidth+"px"})),mn((()=>{u.value.inputOrTextarea.setAttribute("role","textbox"),u.value.inputOrTextarea.setAttribute("aria-autocomplete","list"),u.value.inputOrTextarea.setAttribute("aria-controls","id"),u.value.inputOrTextarea.setAttribute("aria-activedescendant",`${p.value}-item-${a.value}`);const e=c.value.querySelector(".el-autocomplete-suggestion__list");e.setAttribute("role","listbox"),e.setAttribute("id",p.value)})),bn(v);const m=t=>{i.value||(s.value=!0,v(),e.fetchSuggestions(t,(t=>{s.value=!1,i.value||(Xi(t)?(l.value=t,a.value=e.highlightFirstItem?0:-1):zs("ElAutocomplete","autocomplete suggestions must be an array"))})))},g=ko()(m,e.debounce),b=n=>{t.emit("input",n[e.valueKey]),t.emit(tu,n[e.valueKey]),t.emit("select",n),Mt((()=>{l.value=[],a.value=-1}))};return{attrs:n,suggestions:l,highlightedIndex:a,dropdownWidth:o,activated:r,suggestionDisabled:i,loading:s,inputRef:u,regionRef:c,popper:d,id:p,suggestionVisible:f,suggestionLoading:h,getData:m,handleInput:n=>{if(t.emit("input",n),t.emit(tu,n),i.value=!1,!e.triggerOnFocus&&!n)return i.value=!0,void(l.value=[]);g(n)},handleChange:e=>{t.emit("change",e)},handleFocus:n=>{r.value=!0,t.emit("focus",n),e.triggerOnFocus&&g(e.modelValue)},handleBlur:e=>{t.emit("blur",e)},handleClear:()=>{r.value=!1,t.emit(tu,""),t.emit("clear")},handleKeyEnter:()=>{f.value&&a.value>=0&&a.value<l.value.length?b(l.value[a.value]):e.selectWhenUnmatched&&(t.emit("select",{value:e.modelValue}),Mt((()=>{l.value=[],a.value=-1})))},close:()=>{r.value=!1},focus:()=>{u.value.focus()},select:b,highlight:e=>{if(!f.value||s.value)return;if(e<0)return void(a.value=-1);e>=l.value.length&&(e=l.value.length-1);const t=c.value.querySelector(".el-autocomplete-suggestion__wrap"),n=t.querySelectorAll(".el-autocomplete-suggestion__list li")[e],o=t.scrollTop,r=n.offsetTop;r+n.scrollHeight>o+t.clientHeight&&(t.scrollTop+=n.scrollHeight),r<o&&(t.scrollTop-=n.scrollHeight),a.value=e,u.value.inputOrTextarea.setAttribute("aria-activedescendant",`${p.value}-item-${a.value}`)}}}});const Gu={key:0},Xu=Tl("i",{class:"el-icon-loading"},null,-1);Uu.render=function(e,t,n,l,a,o){const r=pl("el-input"),i=pl("el-scrollbar"),s=pl("el-popper"),u=hl("clickoutside");return Cl(),Al(s,{ref:"popper",visible:e.suggestionVisible,"onUpdate:visible":t[3]||(t[3]=t=>e.suggestionVisible=t),placement:e.placement,"popper-class":"el-autocomplete__popper "+e.popperClass,"append-to-body":e.popperAppendToBody,pure:"","manual-mode":"",effect:"light",trigger:"click",transition:"el-zoom-in-top","gpu-acceleration":!1},{trigger:en((()=>[Un(Tl("div",{class:["el-autocomplete",e.$attrs.class],style:e.$attrs.style,role:"combobox","aria-haspopup":"listbox","aria-expanded":e.suggestionVisible,"aria-owns":e.id},[Tl(r,zl({ref:"inputRef"},e.attrs,{"model-value":e.modelValue,onInput:e.handleInput,onChange:e.handleChange,onFocus:e.handleFocus,onBlur:e.handleBlur,onClear:e.handleClear,onKeydown:[t[1]||(t[1]=fo(co((t=>e.highlight(e.highlightedIndex-1)),["prevent"]),["up"])),t[2]||(t[2]=fo(co((t=>e.highlight(e.highlightedIndex+1)),["prevent"]),["down"])),fo(co(e.handleKeyEnter,["prevent"]),["enter"]),fo(co(e.close,["prevent"]),["tab"])]}),fa({_:2},[e.$slots.prepend?{name:"prepend",fn:en((()=>[Zt(e.$slots,"prepend")]))}:void 0,e.$slots.append?{name:"append",fn:en((()=>[Zt(e.$slots,"append")]))}:void 0,e.$slots.prefix?{name:"prefix",fn:en((()=>[Zt(e.$slots,"prefix")]))}:void 0,e.$slots.suffix?{name:"suffix",fn:en((()=>[Zt(e.$slots,"suffix")]))}:void 0]),1040,["model-value","onInput","onChange","onFocus","onBlur","onClear","onKeydown"])],14,["aria-expanded","aria-owns"]),[[u,e.close]])])),default:en((()=>[Tl("div",{ref:"regionRef",class:["el-autocomplete-suggestion",e.suggestionLoading&&"is-loading"],style:{width:e.dropdownWidth,outline:"none"},role:"region"},[Tl(i,{tag:"ul","wrap-class":"el-autocomplete-suggestion__wrap","view-class":"el-autocomplete-suggestion__list"},{default:en((()=>[e.suggestionLoading?(Cl(),Al("li",Gu,[Xu])):(Cl(!0),Al(gl,{key:1},da(e.suggestions,((t,n)=>(Cl(),Al("li",{id:`${e.id}-item-${n}`,key:n,class:{highlighted:e.highlightedIndex===n},role:"option","aria-selected":e.highlightedIndex===n,onClick:n=>e.select(t)},[Zt(e.$slots,"default",{item:t},(()=>[Bl(d(t[e.valueKey]),1)]))],10,["id","aria-selected","onClick"])))),128))])),_:1})],6)])),_:1},8,["visible","placement","popper-class","append-to-body"])},Uu.__file="packages/autocomplete/src/index.vue",Uu.install=e=>{e.component(Uu.name,Uu)};var Ju=Qn({name:"ElAvatar",props:{size:{type:[Number,String],validator:e=>"string"==typeof e?["large","medium","small"].includes(e):"number"==typeof e,default:"large"},shape:{type:String,default:"circle",validator:e=>["circle","square"].includes(e)},icon:String,src:String,alt:String,srcSet:String,fit:{type:String,default:"cover"}},emits:["error"],setup(e,{emit:t}){const n=tt(!1),l=ua((()=>{const{size:t,icon:n,shape:l}=e;let a=["el-avatar"];return t&&"string"==typeof t&&a.push("el-avatar--"+t),n&&a.push("el-avatar--icon"),l&&a.push("el-avatar--"+l),a})),a=ua((()=>{const{size:t}=e;return"number"==typeof t?{height:t+"px",width:t+"px",lineHeight:t+"px"}:{}})),o=ua((()=>({objectFit:e.fit})));return{hasLoadError:n,avatarClass:l,sizeStyle:a,handleError:function(e){n.value=!0,t("error",e)},fitStyle:o}}});Ju.render=function(e,t,n,l,a,o){return Cl(),Al("span",{class:e.avatarClass,style:e.sizeStyle},[!e.src&&!e.srcSet||e.hasLoadError?e.icon?(Cl(),Al("i",{key:1,class:e.icon},null,2)):Zt(e.$slots,"default",{key:2}):(Cl(),Al("img",{key:0,src:e.src,alt:e.alt,srcset:e.srcSet,style:e.fitStyle,onError:t[1]||(t[1]=(...t)=>e.handleError(...t))},null,44,["src","alt","srcset"]))],6)},Ju.__file="packages/avatar/src/index.vue",Ju.install=e=>{e.component(Ju.name,Ju)};const Zu=e=>Math.pow(e,3);var Qu=Qn({name:"ElBacktop",props:{visibilityHeight:{type:Number,default:200},target:{type:String,default:""},right:{type:Number,default:40},bottom:{type:Number,default:40}},emits:["click"],setup(e,t){const n=tt(null),l=tt(null),a=tt(!1),o=ua((()=>e.bottom+"px")),r=ua((()=>e.right+"px")),i=Xr()((()=>{a.value=n.value.scrollTop>=e.visibilityHeight}),300);return mn((()=>{if(l.value=document,n.value=document.documentElement,e.target){if(n.value=document.querySelector(e.target),!n.value)throw new Error("target is not existed: "+e.target);l.value=n.value}As(l.value,"scroll",i)})),yn((()=>{Ss(l.value,"scroll",i)})),{el:n,container:l,visible:a,styleBottom:o,styleRight:r,handleClick:e=>{(()=>{const e=Date.now(),t=n.value.scrollTop,l=window.requestAnimationFrame||(e=>setTimeout(e,16)),a=()=>{const o=(Date.now()-e)/500;var r;o<1?(n.value.scrollTop=t*(1-((r=o)<.5?Zu(2*r)/2:1-Zu(2*(1-r))/2)),l(a)):n.value.scrollTop=0};l(a)})(),t.emit("click",e)}}}});const ec=Tl("i",{class:"el-icon-caret-top"},null,-1);Qu.render=function(e,t,n,l,a,o){return Cl(),Al(Pa,{name:"el-fade-in"},{default:en((()=>[e.visible?(Cl(),Al("div",{key:0,style:{right:e.styleRight,bottom:e.styleBottom},class:"el-backtop",onClick:t[1]||(t[1]=co(((...t)=>e.handleClick(...t)),["stop"]))},[Zt(e.$slots,"default",{},(()=>[ec]))],4)):Pl("v-if",!0)])),_:1})},Qu.__file="packages/backtop/src/index.vue",Qu.install=e=>{e.component(Qu.name,Qu)};var tc=Qn({name:"ElBadge",props:{value:{type:[String,Number],default:""},max:{type:Number,default:99},isDot:Boolean,hidden:Boolean,type:{type:String,default:"primary",validator:e=>["primary","success","warning","info","danger"].includes(e)}},setup:e=>({content:ua((()=>{if(e.isDot)return;const{value:t,max:n}=e;return"number"==typeof t&&"number"==typeof n&&n<t?n+"+":t}))})});const nc={class:"el-badge"};tc.render=function(e,t,n,l,a,o){return Cl(),Al("div",nc,[Zt(e.$slots,"default"),Tl(Pa,{name:"el-zoom-in-center"},{default:en((()=>[Un(Tl("sup",{class:["el-badge__content",["el-badge__content--"+e.type,{"is-fixed":e.$slots.default,"is-dot":e.isDot}]],textContent:d(e.content)},null,10,["textContent"]),[[ho,!e.hidden&&(e.content||0===e.content||e.isDot)]])])),_:1})])},tc.__file="packages/badge/src/index.vue",tc.install=e=>{e.component(tc.name,tc)};var lc=Qn({name:"ElBreadcrumb",props:{separator:{type:String,default:"/"},separatorClass:{type:String,default:""}},setup(e){const t=tt(null);return Fl("breadcrumb",e),mn((()=>{const e=t.value.querySelectorAll(".el-breadcrumb__item");e.length&&e[e.length-1].setAttribute("aria-current","page")})),{breadcrumb:t}}});const ac={ref:"breadcrumb",class:"el-breadcrumb","aria-label":"Breadcrumb",role:"navigation"};lc.render=function(e,t,n,l,a,o){return Cl(),Al("div",ac,[Zt(e.$slots,"default")],512)},lc.__file="packages/breadcrumb/src/index.vue",lc.install=e=>{e.component(lc.name,lc)};var oc=Qn({name:"ElBreadcrumbItem",props:{to:{type:[String,Object],default:""},replace:{type:Boolean,default:!1}},setup(e){const t=tt(null),n=$l("breadcrumb"),l=la().appContext.config.globalProperties.$router;return mn((()=>{t.value.setAttribute("role","link"),t.value.addEventListener("click",(()=>{e.to&&l&&(e.replace?l.replace(e.to):l.push(e.to))}))})),{link:t,separator:null==n?void 0:n.separator,separatorClass:null==n?void 0:n.separatorClass}}});const rc={class:"el-breadcrumb__item"},ic={key:1,class:"el-breadcrumb__separator",role:"presentation"};oc.render=function(e,t,n,l,a,o){return Cl(),Al("span",rc,[Tl("span",{ref:"link",class:["el-breadcrumb__inner",e.to?"is-link":""],role:"link"},[Zt(e.$slots,"default")],2),e.separatorClass?(Cl(),Al("i",{key:0,class:["el-breadcrumb__separator",e.separatorClass]},null,2)):(Cl(),Al("span",ic,d(e.separator),1))])},oc.__file="packages/breadcrumb/src/item.vue",oc.install=e=>{e.component(oc.name,oc)};var sc=Qn({name:"ElButton",props:{type:{type:String,default:"default",validator:e=>["default","primary","success","warning","info","danger","text"].includes(e)},size:{type:String,validator:au},icon:{type:String,default:""},nativeType:{type:String,default:"button",validator:e=>["button","submit","reset"].includes(e)},loading:Boolean,disabled:Boolean,plain:Boolean,autofocus:Boolean,round:Boolean,circle:Boolean},emits:["click"],setup(e,t){const n=ms(),l=$l("elForm",{}),a=$l("elFormItem",{});return{buttonSize:ua((()=>e.size||a.size||n.size)),buttonDisabled:ua((()=>e.disabled||l.disabled)),handleClick:e=>{t.emit("click",e)}}}});const uc={key:0,class:"el-icon-loading"},cc={key:2};sc.render=function(e,t,n,l,a,o){return Cl(),Al("button",{class:["el-button",e.type?"el-button--"+e.type:"",e.buttonSize?"el-button--"+e.buttonSize:"",{"is-disabled":e.buttonDisabled,"is-loading":e.loading,"is-plain":e.plain,"is-round":e.round,"is-circle":e.circle}],disabled:e.buttonDisabled||e.loading,autofocus:e.autofocus,type:e.nativeType,onClick:t[1]||(t[1]=(...t)=>e.handleClick(...t))},[e.loading?(Cl(),Al("i",uc)):Pl("v-if",!0),e.icon&&!e.loading?(Cl(),Al("i",{key:1,class:e.icon},null,2)):Pl("v-if",!0),e.$slots.default?(Cl(),Al("span",cc,[Zt(e.$slots,"default")])):Pl("v-if",!0)],10,["disabled","autofocus","type"])},sc.__file="packages/button/src/button.vue",sc.install=e=>{e.component(sc.name,sc)};var dc=Qn({name:"ElButtonGroup"});const pc={class:"el-button-group"};dc.render=function(e,t,n,l,a,o){return Cl(),Al("div",pc,[Zt(e.$slots,"default")])},dc.__file="packages/button/src/button-group.vue",dc.install=e=>{e.component(dc.name,dc)};let fc={name:"en",el:{colorpicker:{confirm:"OK",clear:"Clear"},datepicker:{now:"Now",today:"Today",cancel:"Cancel",clear:"Clear",confirm:"OK",selectDate:"Select date",selectTime:"Select time",startDate:"Start Date",startTime:"Start Time",endDate:"End Date",endTime:"End Time",prevYear:"Previous Year",nextYear:"Next Year",prevMonth:"Previous Month",nextMonth:"Next Month",year:"",month1:"January",month2:"February",month3:"March",month4:"April",month5:"May",month6:"June",month7:"July",month8:"August",month9:"September",month10:"October",month11:"November",month12:"December",week:"week",weeks:{sun:"Sun",mon:"Mon",tue:"Tue",wed:"Wed",thu:"Thu",fri:"Fri",sat:"Sat"},months:{jan:"Jan",feb:"Feb",mar:"Mar",apr:"Apr",may:"May",jun:"Jun",jul:"Jul",aug:"Aug",sep:"Sep",oct:"Oct",nov:"Nov",dec:"Dec"}},select:{loading:"Loading",noMatch:"No matching data",noData:"No data",placeholder:"Select"},cascader:{noMatch:"No matching data",loading:"Loading",placeholder:"Select",noData:"No data"},pagination:{goto:"Go to",pagesize:"/page",total:"Total {total}",pageClassifier:""},messagebox:{title:"Message",confirm:"OK",cancel:"Cancel",error:"Illegal input"},upload:{deleteTip:"press delete to remove",delete:"Delete",preview:"Preview",continue:"Continue"},table:{emptyText:"No Data",confirmFilter:"Confirm",resetFilter:"Reset",clearFilter:"All",sumText:"Sum"},tree:{emptyText:"No Data"},transfer:{noMatch:"No matching data",noData:"No data",titles:["List 1","List 2"],filterPlaceholder:"Enter keyword",noCheckedFormat:"{total} items",hasCheckedFormat:"{checked}/{total} checked"},image:{error:"FAILED"},pageHeader:{title:"Back"},popconfirm:{confirmButtonText:"Yes",cancelButtonText:"No"}}};function hc(e,t){return e&&t?e.replace(/\{(\w+)\}/g,((e,n)=>t[n])):e}const vc=(e,t)=>{let n;const l=e.split(".");let a=fc;for(let e=0,o=l.length;e<o;e++){if(n=a[l[e]],e===o-1)return hc(n,t);if(!n)return"";a=n}return""},mc={date:"YYYY-MM-DD",week:"gggg[w]ww",year:"YYYY",month:"YYYY-MM",datetime:"YYYY-MM-DD HH:mm:ss",monthrange:"YYYY-MM",daterange:"YYYY-MM-DD",datetimerange:"YYYY-MM-DD HH:mm:ss"},gc={name:{type:[Array,String],default:""},format:{type:String},type:{type:String,default:""},clearable:{type:Boolean,default:!0},clearIcon:{type:String,default:"el-icon-circle-close"},editable:{type:Boolean,default:!0},prefixIcon:{type:String,default:""},size:{type:String,validator:au},readonly:{type:Boolean,default:!1},disabled:{type:Boolean,default:!1},placeholder:{type:String,default:""},modelValue:{type:[Date,Array,String],default:""},rangeSeparator:{type:String,default:"-"},startPlaceholder:String,endPlaceholder:String,defaultValue:{type:[Date,Array]},defaultTime:{type:[Date,Array]},isRange:{type:Boolean,default:!1},disabledHours:{type:Function},disabledMinutes:{type:Function},disabledSeconds:{type:Function},disabledDate:{type:Function},cellClassName:{type:Function},shortcuts:{type:Array,default:()=>[]},arrowControl:{type:Boolean,default:!1},validateEvent:{type:Boolean,default:!0}},bc=function(e,t){const n=e instanceof Date,l=t instanceof Date;return n&&l?e.getTime()===t.getTime():!n&&!l&&e===t},yc=function(e,t){const n=e instanceof Array,l=t instanceof Array;return n&&l?e.length===t.length&&e.every(((e,n)=>bc(e,t[n]))):!n&&!l&&bc(e,t)};var xc=Qn({name:"Picker",components:{ElInput:cu,ElPopper:Ku},directives:{clickoutside:Xs},props:gc,emits:["update:modelValue","change","focus","blur"],setup(e,t){const n=ms(),l=$l("elForm",{}),a=$l("elFormItem",{}),o=tt(null),r=tt(!1),i=tt(!1),s=tt(null);An(r,(n=>{var l;n?s.value=e.modelValue:(C.value=null,t.emit("blur"),A(),e.validateEvent&&(null===(l=a.formItemMitt)||void 0===l||l.emit("el.form.blur")))}));const u=n=>{var l;yc(n,s.value)||(t.emit("change",n),e.validateEvent&&(null===(l=a.formItemMitt)||void 0===l||l.emit("el.form.change",n)))},c=n=>{yc(e.modelValue,n)||t.emit("update:modelValue",n)},d=ua((()=>{if(o.value){const e=k.value?o.value:o.value.$el;return[].slice.call(e.querySelectorAll("input"))}return[]})),p=ua((()=>e.disabled||l.disabled)),f=ua((()=>{let t;return x.value?O.value.getDefaultValue&&(t=O.value.getDefaultValue()):t=Array.isArray(e.modelValue)?e.modelValue.map((e=>Zr()(e))):Zr()(e.modelValue),O.value.getRangeAvaliableTime&&(t=O.value.getRangeAvaliableTime(t)),t})),h=ua((()=>{if(!O.value.panelReady)return;if(!m.value&&x.value)return;if(!r.value&&x.value)return;const e=E(f.value);return Array.isArray(C.value)?[C.value[0]||e&&e[0]||"",C.value[1]||e&&e[1]||""]:null!==C.value?C.value:e?g.value?e.join(", "):e:""})),v=ua((()=>-1!==e.type.indexOf("time"))),m=ua((()=>0===e.type.indexOf("time"))),g=ua((()=>"dates"===e.type)),b=ua((()=>e.prefixIcon||(v.value?"el-icon-time":"el-icon-date"))),y=tt(!1),x=ua((()=>!e.modelValue||Array.isArray(e.modelValue)&&!e.modelValue.length)),k=ua((()=>e.type.indexOf("range")>-1)),w=ua((()=>e.size||a.size||n.size)),C=tt(null),_=()=>{if(C.value){const e=S(h.value);e&&M(e)&&(c(e.toDate()),C.value=null)}""===C.value&&(c(null),u(null),C.value=null)},A=()=>{d.value.forEach((e=>e.blur()))},S=e=>e?O.value.parseUserInput(e):null,E=e=>e?O.value.formatToString(e):null,M=e=>O.value.isValidValue(e),O=tt({});return Fl("EP_PICKER_BASE",{props:e}),{isDatesPicker:g,handleEndChange:()=>{const e=S(C.value&&C.value[1]);if(e){C.value=[h.value[0],E(e)];const t=[f.value&&f.value[0],e];M(t)&&(c(t),C.value=null)}},handleStartChange:()=>{const e=S(C.value&&C.value[0]);if(e){C.value=[E(e),h.value[1]];const t=[e,f.value&&f.value[1]];M(t)&&(c(t),C.value=null)}},handleStartInput:e=>{C.value?C.value=[e.target.value,C.value[1]]:C.value=[e.target.value,null]},handleEndInput:e=>{C.value?C.value=[C.value[0],e.target.value]:C.value=[null,e.target.value]},onUserInput:e=>{C.value=e},handleChange:_,handleKeydown:e=>{const t=e.code;return t===Fs.esc?(r.value=!1,void e.stopPropagation()):t!==Fs.tab?t===Fs.enter?((""===C.value||M(S(h.value)))&&(_(),r.value=!1),void e.stopPropagation()):void(C.value?e.stopPropagation():O.value.handleKeydown&&O.value.handleKeydown(e)):void(k.value?setTimeout((()=>{-1===d.value.indexOf(document.activeElement)&&(r.value=!1,A())}),0):(_(),r.value=!1,e.stopPropagation()))},onClickOutside:()=>{r.value&&(r.value=!1)},pickerSize:w,isRangeInput:k,onMouseLeave:()=>{y.value=!1},onMouseEnter:()=>{e.readonly||p.value||!x.value&&e.clearable&&(y.value=!0)},onClearIconClick:t=>{e.readonly||p.value||y.value&&(t.stopPropagation(),c(null),u(null),y.value=!1,r.value=!1)},showClose:y,triggerClass:b,onPick:(e="",t=!1)=>{let n;r.value=t,n=Array.isArray(e)?e.map((e=>e.toDate())):e?e.toDate():e,C.value=null,c(n),u(n)},handleFocus:n=>{e.readonly||p.value||(r.value=!0,t.emit("focus",n))},pickerVisible:r,pickerActualVisible:i,displayValue:h,parsedValue:f,setSelectionRange:(e,t,n)=>{const l=d.value;l.length&&(n&&"min"!==n?"max"===n&&(l[1].setSelectionRange(e,t),l[1].focus()):(l[0].setSelectionRange(e,t),l[0].focus()))},refContainer:o,pickerDisabled:p,onSetPickerOption:e=>{O.value[e[0]]=e[1],O.value.panelReady=!0}}}});const kc={class:"el-range-separator"};xc.render=function(e,t,n,l,a,o){const r=pl("el-input"),i=pl("el-popper"),s=hl("clickoutside");return Cl(),Al(gl,null,[Pl(" todo popper props align left  "),Pl(" todo popper custom popper-class  "),Pl(" todo bug handleKeydown event twice  "),Tl(i,{ref:"popper",visible:e.pickerVisible,"onUpdate:visible":t[18]||(t[18]=t=>e.pickerVisible=t),"manual-mode":"",effect:"light",pure:"",trigger:"click","popper-class":"el-picker__popper",transition:"el-zoom-in-top","gpu-acceleration":!1,"stop-popper-mouse-event":!1,"append-to-body":"",onBeforeEnter:t[19]||(t[19]=t=>e.pickerActualVisible=!0),onAfterLeave:t[20]||(t[20]=t=>e.pickerActualVisible=!1)},{trigger:en((()=>[e.isRangeInput?Un((Cl(),Al("div",{key:1,ref:"refContainer",class:["el-date-editor el-range-editor el-input__inner",["el-date-editor--"+e.type,e.pickerSize?"el-range-editor--"+e.pickerSize:"",e.pickerDisabled?"is-disabled":"",e.pickerVisible?"is-active":""]],onClick:t[10]||(t[10]=(...t)=>e.handleFocus(...t)),onMouseenter:t[11]||(t[11]=(...t)=>e.onMouseEnter(...t)),onMouseleave:t[12]||(t[12]=(...t)=>e.onMouseLeave(...t)),onKeydown:t[13]||(t[13]=(...t)=>e.handleKeydown(...t))},[Tl("i",{class:["el-input__icon","el-range__icon",e.triggerClass]},null,2),Tl("input",{autocomplete:"off",name:e.name&&e.name[0],placeholder:e.startPlaceholder,value:e.displayValue&&e.displayValue[0],disabled:e.pickerDisabled,readonly:!e.editable||e.readonly,class:"el-range-input",onInput:t[3]||(t[3]=(...t)=>e.handleStartInput(...t)),onChange:t[4]||(t[4]=(...t)=>e.handleStartChange(...t)),onFocus:t[5]||(t[5]=(...t)=>e.handleFocus(...t))},null,40,["name","placeholder","value","disabled","readonly"]),Zt(e.$slots,"range-separator",{},(()=>[Tl("span",kc,d(e.rangeSeparator),1)])),Tl("input",{autocomplete:"off",name:e.name&&e.name[1],placeholder:e.endPlaceholder,value:e.displayValue&&e.displayValue[1],disabled:e.pickerDisabled,readonly:!e.editable||e.readonly,class:"el-range-input",onFocus:t[6]||(t[6]=(...t)=>e.handleFocus(...t)),onInput:t[7]||(t[7]=(...t)=>e.handleEndInput(...t)),onChange:t[8]||(t[8]=(...t)=>e.handleEndChange(...t))},null,40,["name","placeholder","value","disabled","readonly"]),Tl("i",{class:[[e.showClose?""+e.clearIcon:""],"el-input__icon el-range__close-icon"],onClick:t[9]||(t[9]=(...t)=>e.onClearIconClick(...t))},null,2)],34)),[[s,e.onClickOutside]]):Un((Cl(),Al(r,{key:0,ref:"refContainer","model-value":e.displayValue,name:e.name,size:e.pickerSize,disabled:e.pickerDisabled,placeholder:e.placeholder,class:["el-date-editor","el-date-editor--"+e.type],readonly:!e.editable||e.readonly||e.isDatesPicker||"week"===e.type,onInput:e.onUserInput,onFocus:e.handleFocus,onKeydown:e.handleKeydown,onChange:e.handleChange,onMouseenter:e.onMouseEnter,onMouseleave:e.onMouseLeave},{prefix:en((()=>[Tl("i",{class:["el-input__icon",e.triggerClass],onClick:t[1]||(t[1]=(...t)=>e.handleFocus(...t))},null,2)])),suffix:en((()=>[Tl("i",{class:["el-input__icon",[e.showClose?""+e.clearIcon:""]],onClick:t[2]||(t[2]=(...t)=>e.onClearIconClick(...t))},null,2)])),_:1},8,["model-value","name","size","disabled","placeholder","class","readonly","onInput","onFocus","onKeydown","onChange","onMouseenter","onMouseleave"])),[[s,e.onClickOutside]])])),default:en((()=>[Zt(e.$slots,"default",zl({visible:e.pickerVisible,"actual-visible":e.pickerActualVisible,"parsed-value":e.parsedValue,format:e.format,type:e.type,"default-value":e.defaultValue},e.$attrs,{onPick:t[14]||(t[14]=(...t)=>e.onPick(...t)),onSelectRange:t[15]||(t[15]=(...t)=>e.setSelectionRange(...t)),onSetPickerOption:t[16]||(t[16]=(...t)=>e.onSetPickerOption(...t)),onMousedown:t[17]||(t[17]=co((()=>{}),["stop"]))}))])),_:1},8,["visible"])],64)},xc.__file="packages/time-picker/src/common/picker.vue";const wc=(e,t,n)=>{const l=[],a=t&&n();for(let t=0;t<e;t++)l[t]=!!a&&a.includes(t);return l},Cc=e=>e.map(((e,t)=>e||t)).filter((e=>!0!==e)),_c=(e,t,n)=>({getHoursList:(t,n)=>wc(24,e,(()=>e(t,n))),getMinutesList:(e,n,l)=>wc(60,t,(()=>t(e,n,l))),getSecondsList:(e,t,l,a)=>wc(60,n,(()=>n(e,t,l,a)))}),Ac=(e,t,n)=>{const{getHoursList:l,getMinutesList:a,getSecondsList:o}=_c(e,t,n);return{getAvaliableHours:(e,t)=>Cc(l(e,t)),getAvaliableMinutes:(e,t,n)=>Cc(a(e,t,n)),getAvaliableSeconds:(e,t,n,l)=>Cc(o(e,t,n,l))}};var Sc=Qn({directives:{repeatClick:Js},components:{ElScrollbar:Au},props:{role:{type:String,required:!0},spinnerDate:{type:Object,required:!0},showSeconds:{type:Boolean,default:!0},arrowControl:Boolean,amPmMode:{type:String,default:""},disabledHours:{type:Function},disabledMinutes:{type:Function},disabledSeconds:{type:Function}},emits:["change","select-range","set-option"],setup(e,t){const n=tt(null),l=tt(null),a=tt(null),o=tt(null),r={hours:l,minutes:a,seconds:o},i=ua((()=>{const t=["hours","minutes","seconds"];return e.showSeconds?t:t.slice(0,2)})),s=ua((()=>e.spinnerDate.hour())),u=ua((()=>e.spinnerDate.minute())),c=ua((()=>e.spinnerDate.second())),d=ua((()=>({hours:s,minutes:u,seconds:c}))),p=ua((()=>E(e.role))),f=ua((()=>M(s.value,e.role))),h=ua((()=>O(s.value,u.value,e.role))),v=ua((()=>({hours:p,minutes:f,seconds:h}))),m=ua((()=>{const e=s.value;return[e>0?e-1:void 0,e,e<23?e+1:void 0]})),g=ua((()=>{const e=u.value;return[e>0?e-1:void 0,e,e<59?e+1:void 0]})),b=ua((()=>{const e=c.value;return[e>0?e-1:void 0,e,e<59?e+1:void 0]})),y=ua((()=>({hours:m,minutes:g,seconds:b}))),x=e=>{"hours"===e?t.emit("select-range",0,2):"minutes"===e?t.emit("select-range",3,5):"seconds"===e&&t.emit("select-range",6,8),n.value=e},k=e=>{C(e,d.value[e].value)},w=()=>{k("hours"),k("minutes"),k("seconds")},C=(t,n)=>{if(e.arrowControl)return;const l=r[t];l.value&&(l.value.$el.querySelector(".el-scrollbar__wrap").scrollTop=Math.max(0,n*_(t)))},_=e=>r[e].value.$el.querySelector("li").offsetHeight,A=e=>{n.value||x("hours");const t=n.value;let l=d.value[t].value;const a="hours"===n.value?24:60;l=(l+e+a)%a,S(t,l),C(t,l),Mt((()=>x(n.value)))},S=(n,l)=>{if(!v.value[n].value[l])switch(n){case"hours":t.emit("change",e.spinnerDate.hour(l).minute(u.value).second(c.value));break;case"minutes":t.emit("change",e.spinnerDate.hour(s.value).minute(l).second(c.value));break;case"seconds":t.emit("change",e.spinnerDate.hour(s.value).minute(u.value).second(l))}};mn((()=>{Mt((()=>{!e.arrowControl&&(()=>{const e=e=>{r[e].value&&(r[e].value.$el.querySelector(".el-scrollbar__wrap").onscroll=()=>{(e=>{const t=Math.min(Math.round((r[e].value.$el.querySelector(".el-scrollbar__wrap").scrollTop-(.5*(e=>r[e].value.$el.offsetHeight)(e)-10)/_(e)+3)/_(e)),"hours"===e?23:59);S(e,t)})(e)})};e("hours"),e("minutes"),e("seconds")})(),w(),"start"===e.role&&x("hours")}))})),t.emit("set-option",[e.role+"_scrollDown",A]),t.emit("set-option",[e.role+"_emitSelectRange",x]);const{getHoursList:E,getMinutesList:M,getSecondsList:O}=_c(e.disabledHours,e.disabledMinutes,e.disabledSeconds);return An((()=>e.spinnerDate),w),{getRefId:e=>`list${e.charAt(0).toUpperCase()+e.slice(1)}Ref`,spinnerItems:i,currentScrollbar:n,hours:s,minutes:u,seconds:c,hoursList:p,minutesList:f,arrowHourList:m,arrowMinuteList:g,arrowSecondList:b,getAmPmFlag:t=>{if(!e.amPmMode)return"";let n=t<12?" am":" pm";return"A"===e.amPmMode&&(n=n.toUpperCase()),n},emitSelectRange:x,adjustCurrentSpinner:k,typeItemHeight:_,listHoursRef:l,listMinutesRef:a,listSecondsRef:o,onIncreaseClick:()=>{A(1)},onDecreaseClick:()=>{A(-1)},handleClick:(e,{value:t,disabled:n})=>{n||(S(e,t),x(e),C(e,t))},secondsList:h,timePartsMap:d,arrowListMap:y,listMap:v}}});const Ec={class:"el-time-spinner__arrow el-icon-arrow-up"},Mc={class:"el-time-spinner__arrow el-icon-arrow-down"},Oc={class:"el-time-spinner__list"};Sc.render=function(e,t,n,l,a,o){const r=pl("el-scrollbar"),i=hl("repeat-click");return Cl(),Al("div",{class:["el-time-spinner",{"has-seconds":e.showSeconds}]},[e.arrowControl?Pl("v-if",!0):(Cl(!0),Al(gl,{key:0},da(e.spinnerItems,(t=>(Cl(),Al(r,{key:t,ref:e.getRefId(t),class:"el-time-spinner__wrapper","wrap-style":"max-height: inherit;","view-class":"el-time-spinner__list",noresize:"",tag:"ul",onMouseenter:n=>e.emitSelectRange(t),onMousemove:n=>e.adjustCurrentSpinner(t)},{default:en((()=>[(Cl(!0),Al(gl,null,da(e.listMap[t].value,((n,l)=>(Cl(),Al("li",{key:l,class:["el-time-spinner__item",{active:l===e.timePartsMap[t].value,disabled:n}],onClick:a=>e.handleClick(t,{value:l,disabled:n})},["hours"===t?(Cl(),Al(gl,{key:0},[Bl(d(("0"+(e.amPmMode?l%12||12:l)).slice(-2))+d(e.getAmPmFlag(l)),1)],64)):(Cl(),Al(gl,{key:1},[Bl(d(("0"+l).slice(-2)),1)],64))],10,["onClick"])))),128))])),_:2},1032,["onMouseenter","onMousemove"])))),128)),e.arrowControl?(Cl(!0),Al(gl,{key:1},da(e.spinnerItems,(t=>(Cl(),Al("div",{key:t,class:"el-time-spinner__wrapper is-arrow",onMouseenter:n=>e.emitSelectRange(t)},[Un(Tl("i",Ec,null,512),[[i,e.onDecreaseClick]]),Un(Tl("i",Mc,null,512),[[i,e.onIncreaseClick]]),Tl("ul",Oc,[(Cl(!0),Al(gl,null,da(e.arrowListMap[t].value,((n,l)=>(Cl(),Al("li",{key:l,class:["el-time-spinner__item",{active:n===e.timePartsMap[t].value,disabled:e.listMap[t].value[n]}]},d(void 0===n?"":("0"+(e.amPmMode?n%12||12:n)).slice(-2)+e.getAmPmFlag(n)),3)))),128))])],40,["onMouseenter"])))),128)):Pl("v-if",!0)],2)},Sc.__file="packages/time-picker/src/time-picker-com/basic-time-spinner.vue";var Dc=Qn({components:{TimeSpinner:Sc},props:{visible:Boolean,actualVisible:{type:Boolean,default:void 0},datetimeRole:{type:String},parsedValue:{type:[Object,String]},format:{type:String,default:""}},emits:["pick","select-range","set-picker-option"],setup(e,t){const n=tt([0,2]),l=tt(e.parsedValue),a=ua((()=>void 0===e.actualVisible?"el-zoom-in-top":"")),o=ua((()=>e.format.includes("ss"))),r=ua((()=>e.format.includes("A")?"A":e.format.includes("a")?"a":"")),i=t=>{const n={hour:v,minute:m,second:g};let l=t;return["hour","minute","second"].forEach((t=>{if(n[t]){let a;const o=n[t];a="minute"===t?o(l.hour(),e.datetimeRole):"second"===t?o(l.hour(),l.minute(),e.datetimeRole):o(e.datetimeRole),a&&a.length&&!a.includes(l[t]())&&(l=l[t](a[0]))}})),l};t.emit("set-picker-option",["isValidValue",e=>{const t=Zr()(e),n=i(t);return t.isSame(n)}]),t.emit("set-picker-option",["formatToString",t=>t?t.format(e.format):null]),t.emit("set-picker-option",["parseUserInput",t=>t?Zr()(t,e.format):null]),t.emit("set-picker-option",["handleKeydown",e=>{const t=e.code;if(t===Fs.left||t===Fs.right)return(e=>{const t=[0,3].concat(o.value?[6]:[]),l=["hours","minutes"].concat(o.value?["seconds"]:[]),a=(t.indexOf(n.value[0])+e+t.length)%t.length;s.start_emitSelectRange(l[a])})(t===Fs.left?-1:1),void e.preventDefault();if(t===Fs.up||t===Fs.down){const n=t===Fs.up?-1:1;return s.min_scrollDown(n),void e.preventDefault()}}]),t.emit("set-picker-option",["getRangeAvaliableTime",i]),t.emit("set-picker-option",["getDefaultValue",()=>Zr()(h)]);const s={},u=$l("EP_PICKER_BASE"),{arrowControl:c,disabledHours:d,disabledMinutes:p,disabledSeconds:f,defaultValue:h}=u.props,{getAvaliableHours:v,getAvaliableMinutes:m,getAvaliableSeconds:g}=Ac(d,p,f);return{transitionName:a,arrowControl:c,onSetOption:e=>{s[e[0]]=e[1]},t:vc,handleConfirm:(n=!1,l)=>{l||t.emit("pick",e.parsedValue,n)},handleChange:n=>{if(!e.visible)return;const l=i(n).millisecond(0);t.emit("pick",l,!0)},setSelectionRange:(e,l)=>{t.emit("select-range",e,l),n.value=[e,l]},amPmMode:r,showSeconds:o,handleCancel:()=>{t.emit("pick",l.value,!1)},disabledHours:d,disabledMinutes:p,disabledSeconds:f}}});const Tc={key:0,class:"el-time-panel"},Nc={class:"el-time-panel__footer"};Dc.render=function(e,t,n,l,a,o){const r=pl("time-spinner");return Cl(),Al(Pa,{name:e.transitionName},{default:en((()=>[e.actualVisible||e.visible?(Cl(),Al("div",Tc,[Tl("div",{class:["el-time-panel__content",{"has-seconds":e.showSeconds}]},[Tl(r,{ref:"spinner",role:e.datetimeRole||"start","arrow-control":e.arrowControl,"show-seconds":e.showSeconds,"am-pm-mode":e.amPmMode,"spinner-date":e.parsedValue,"disabled-hours":e.disabledHours,"disabled-minutes":e.disabledMinutes,"disabled-seconds":e.disabledSeconds,onChange:e.handleChange,onSetOption:e.onSetOption,onSelectRange:e.setSelectionRange},null,8,["role","arrow-control","show-seconds","am-pm-mode","spinner-date","disabled-hours","disabled-minutes","disabled-seconds","onChange","onSetOption","onSelectRange"])],2),Tl("div",Nc,[Tl("button",{type:"button",class:"el-time-panel__btn cancel",onClick:t[1]||(t[1]=(...t)=>e.handleCancel(...t))},d(e.t("el.datepicker.cancel")),1),Tl("button",{type:"button",class:"el-time-panel__btn confirm",onClick:t[2]||(t[2]=t=>e.handleConfirm())},d(e.t("el.datepicker.confirm")),1)])])):Pl("v-if",!0)])),_:1},8,["name"])},Dc.__file="packages/time-picker/src/time-picker-com/panel-time-pick.vue";const Bc=(e,t)=>{const n=[];for(let l=e;l<=t;l++)n.push(l);return n};var Pc=Qn({components:{TimeSpinner:Sc},props:{visible:Boolean,actualVisible:Boolean,parsedValue:{type:[Array,String]},format:{type:String,default:""}},emits:["pick","select-range","set-picker-option"],setup(e,t){const n=ua((()=>e.parsedValue[0])),l=ua((()=>e.parsedValue[1])),a=tt(e.parsedValue),o=ua((()=>e.format.includes("ss"))),r=ua((()=>e.format.includes("A")?"A":e.format.includes("a")?"a":"")),i=tt([]),s=tt([]),u=(e,n)=>{t.emit("pick",[e,n],!0)},c=ua((()=>n.value>l.value)),d=tt([0,2]),p=ua((()=>o.value?11:8)),f=(e,t)=>{const a=_?_(e):[],o="start"===e,r=(t||(o?l.value:n.value)).hour(),i=o?Bc(r+1,23):Bc(0,r-1);return ai()(a,i)},h=(e,t,a)=>{const o=A?A(e,t):[],r="start"===t,i=a||(r?l.value:n.value);if(e!==i.hour())return o;const s=i.minute(),u=r?Bc(s+1,59):Bc(0,s-1);return ai()(o,u)},v=(e,t,a,o)=>{const r=S?S(e,t,a):[],i="start"===a,s=o||(i?l.value:n.value),u=s.hour(),c=s.minute();if(e!==u||t!==c)return r;const d=s.second(),p=i?Bc(d+1,59):Bc(0,d-1);return ai()(r,p)},m=e=>e.map(((t,n)=>x(e[0],e[1],0===n?"start":"end"))),{getAvaliableHours:g,getAvaliableMinutes:b,getAvaliableSeconds:y}=Ac(f,h,v),x=(e,t,n)=>{const l={hour:g,minute:b,second:y},a="start"===n;let o=a?e:t;const r=a?t:e;return["hour","minute","second"].forEach((e=>{if(l[e]){let t;const i=l[e];if(t="minute"===e?i(o.hour(),n,r):"second"===e?i(o.hour(),o.minute(),n,r):i(n,r),t&&t.length&&!t.includes(o[e]())){const n=a?0:t.length-1;o=o[e](t[n])}}})),o};t.emit("set-picker-option",["formatToString",t=>t?Array.isArray(t)?t.map((t=>t.format(e.format))):t.format(e.format):null]),t.emit("set-picker-option",["parseUserInput",t=>t?Array.isArray(t)?t.map((t=>Zr()(t,e.format))):Zr()(t,e.format):null]),t.emit("set-picker-option",["isValidValue",e=>{const t=e.map((e=>Zr()(e))),n=m(t);return t[0].isSame(n[0])&&t[1].isSame(n[1])}]),t.emit("set-picker-option",["handleKeydown",e=>{const t=e.code;if(t===Fs.left||t===Fs.right)return(e=>{const t=o.value?[0,3,6,11,14,17]:[0,3,8,11],n=["hours","minutes"].concat(o.value?["seconds"]:[]),l=(t.indexOf(d.value[0])+e+t.length)%t.length,a=t.length/2;l<a?k.start_emitSelectRange(n[l]):k.end_emitSelectRange(n[l-a])})(t===Fs.left?-1:1),void e.preventDefault();if(t===Fs.up||t===Fs.down){const n=t===Fs.up?-1:1,l=d.value[0]<p.value?"start":"end";return k[l+"_scrollDown"](n),void e.preventDefault()}}]),t.emit("set-picker-option",["getDefaultValue",()=>Array.isArray(E)?E.map((e=>Zr()(e))):[Zr()(E),Zr()(E).add(60,"m")]]),t.emit("set-picker-option",["getRangeAvaliableTime",m]);const k={},w=$l("EP_PICKER_BASE"),{arrowControl:C,disabledHours:_,disabledMinutes:A,disabledSeconds:S,defaultValue:E}=w.props;return{arrowControl:C,onSetOption:e=>{k[e[0]]=e[1]},setMaxSelectionRange:(e,n)=>{t.emit("select-range",e,n,"max"),d.value=[e+p.value,n+p.value]},setMinSelectionRange:(e,n)=>{t.emit("select-range",e,n,"min"),d.value=[e,n]},btnConfirmDisabled:c,handleCancel:()=>{t.emit("pick",a.value,null)},handleConfirm:(e=!1)=>{t.emit("pick",[n.value,l.value],e)},t:vc,showSeconds:o,minDate:n,maxDate:l,amPmMode:r,handleMinChange:e=>{u(e.millisecond(0),l.value)},handleMaxChange:e=>{u(n.value,e.millisecond(0))},minSelectableRange:i,maxSelectableRange:s,disabledHours_:f,disabledMinutes_:h,disabledSeconds_:v}}});const Vc={key:0,class:"el-time-range-picker el-picker-panel"},Ic={class:"el-time-range-picker__content"},Lc={class:"el-time-range-picker__cell"},zc={class:"el-time-range-picker__header"},Fc={class:"el-time-range-picker__cell"},$c={class:"el-time-range-picker__header"},Rc={class:"el-time-panel__footer"};Pc.render=function(e,t,n,l,a,o){const r=pl("time-spinner");return e.actualVisible?(Cl(),Al("div",Vc,[Tl("div",Ic,[Tl("div",Lc,[Tl("div",zc,d(e.t("el.datepicker.startTime")),1),Tl("div",{class:[{"has-seconds":e.showSeconds,"is-arrow":e.arrowControl},"el-time-range-picker__body el-time-panel__content"]},[Tl(r,{ref:"minSpinner",role:"start","show-seconds":e.showSeconds,"am-pm-mode":e.amPmMode,"arrow-control":e.arrowControl,"spinner-date":e.minDate,"disabled-hours":e.disabledHours_,"disabled-minutes":e.disabledMinutes_,"disabled-seconds":e.disabledSeconds_,onChange:e.handleMinChange,onSetOption:e.onSetOption,onSelectRange:e.setMinSelectionRange},null,8,["show-seconds","am-pm-mode","arrow-control","spinner-date","disabled-hours","disabled-minutes","disabled-seconds","onChange","onSetOption","onSelectRange"])],2)]),Tl("div",Fc,[Tl("div",$c,d(e.t("el.datepicker.endTime")),1),Tl("div",{class:[{"has-seconds":e.showSeconds,"is-arrow":e.arrowControl},"el-time-range-picker__body el-time-panel__content"]},[Tl(r,{ref:"maxSpinner",role:"end","show-seconds":e.showSeconds,"am-pm-mode":e.amPmMode,"arrow-control":e.arrowControl,"spinner-date":e.maxDate,"disabled-hours":e.disabledHours_,"disabled-minutes":e.disabledMinutes_,"disabled-seconds":e.disabledSeconds_,onChange:e.handleMaxChange,onSetOption:e.onSetOption,onSelectRange:e.setMaxSelectionRange},null,8,["show-seconds","am-pm-mode","arrow-control","spinner-date","disabled-hours","disabled-minutes","disabled-seconds","onChange","onSetOption","onSelectRange"])],2)])]),Tl("div",Rc,[Tl("button",{type:"button",class:"el-time-panel__btn cancel",onClick:t[1]||(t[1]=t=>e.handleCancel())},d(e.t("el.datepicker.cancel")),1),Tl("button",{type:"button",class:"el-time-panel__btn confirm",disabled:e.btnConfirmDisabled,onClick:t[2]||(t[2]=t=>e.handleConfirm())},d(e.t("el.datepicker.confirm")),9,["disabled"])])])):Pl("v-if",!0)},Pc.__file="packages/time-picker/src/time-picker-com/panel-time-range.vue",Zr().extend(ni());var jc=Qn({name:"ElTimePicker",install:null,props:Object.assign(Object.assign({},gc),{isRange:{type:Boolean,default:!1}}),setup(e,t){const n=e.isRange?"timerange":"time",l=e.isRange?Pc:Dc;return()=>ca(xc,Object.assign(Object.assign({format:"HH:mm:ss"},e),{type:n,"onUpdate:modelValue":e=>t.emit("update:modelValue",e)}),{default:e=>ca(l,e)})}});const Hc=e=>Array.from(Array(e).keys()),Wc=e=>e.replace(/\W?m{1,2}|\W?ZZ/g,"").replace(/\W?h{1,2}|\W?s{1,3}|\W?a/gi,"").trim(),qc=e=>e.replace(/\W?D{1,2}|\W?Do|\W?d{1,4}|\W?M{1,4}|\W?Y{2,4}/g,"").trim();jc.install=e=>{e.component(jc.name,jc)},Zr().extend(ei());var Yc=Qn({props:{selectedDay:{type:Object},range:{type:Array},date:{type:Object},hideHeader:{type:Boolean}},emits:["pick"],setup(e,t){const n=tt(Zr()().localeData().weekdaysShort()),l=Zr()(),a=l.$locale().weekStart||0,o=(t,n)=>{let l;return l="prev"===n?e.date.startOf("month").subtract(1,"month").date(t):"next"===n?e.date.startOf("month").add(1,"month").date(t):e.date.date(t),l},r=ua((()=>e.range&&e.range.length)),i=ua((()=>{let t=[];if(r.value){const[n,l]=e.range,a=Hc(l.date()-n.date()+1).map(((e,t)=>({text:n.date()+t,type:"current"})));let o=a.length%7;o=0===o?0:7-o;const r=Hc(o).map(((e,t)=>({text:t+1,type:"next"})));t=a.concat(r)}else{const n=e.date.startOf("month").day()||7;t=[...((e,t)=>{const n=e.subtract(1,"month").endOf("month").date();return Hc(t).map(((e,l)=>n-(t-l-1)))})(e.date,n-a).map((e=>({text:e,type:"prev"}))),...(e=>{const t=e.daysInMonth();return Hc(t).map(((e,t)=>t+1))})(e.date).map((e=>({text:e,type:"current"})))];const l=Hc(42-t.length).map(((e,t)=>({text:t+1,type:"next"})));t=t.concat(l)}return(e=>Hc(e.length/7).map(((t,n)=>{const l=7*n;return e.slice(l,l+7)})))(t)})),s=ua((()=>{const e=a;return 0===e?n.value:n.value.slice(e).concat(n.value.slice(0,e))}));return{isInRange:r,weekDays:s,rows:i,getCellClass:({text:t,type:n})=>{const a=[n];if("current"===n){const r=o(t,n);r.isSame(e.selectedDay,"day")&&a.push("is-selected"),r.isSame(l,"day")&&a.push("is-today")}return a},pickDay:({text:e,type:n})=>{const l=o(e,n);t.emit("pick",l)},getSlotData:({text:t,type:n})=>{const l=o(t,n);return{isSelected:l.isSame(e.selectedDay),type:n+"-month",day:l.format("YYYY-MM-DD"),date:l.toDate()}}}}});const Kc={key:0},Uc={class:"el-calendar-day"};Yc.render=function(e,t,n,l,a,o){return Cl(),Al("table",{class:{"el-calendar-table":!0,"is-range":e.isInRange},cellspacing:"0",cellpadding:"0"},[e.hideHeader?Pl("v-if",!0):(Cl(),Al("thead",Kc,[(Cl(!0),Al(gl,null,da(e.weekDays,(e=>(Cl(),Al("th",{key:e},d(e),1)))),128))])),Tl("tbody",null,[(Cl(!0),Al(gl,null,da(e.rows,((t,n)=>(Cl(),Al("tr",{key:n,class:{"el-calendar-table__row":!0,"el-calendar-table__row--hide-border":0===n&&e.hideHeader}},[(Cl(!0),Al(gl,null,da(t,((t,n)=>(Cl(),Al("td",{key:n,class:e.getCellClass(t),onClick:n=>e.pickDay(t)},[Tl("div",Uc,[Zt(e.$slots,"dateCell",{data:e.getSlotData(t)},(()=>[Tl("span",null,d(t.text),1)]))])],10,["onClick"])))),128))],2)))),128))])],2)},Yc.__file="packages/calendar/src/date-table.vue";var Gc=Qn({name:"ElCalendar",components:{DateTable:Yc,ElButton:sc,ElButtonGroup:dc},props:{modelValue:{type:Date},range:{type:Array,validator:e=>!!Array.isArray(e)&&2===e.length&&e.every((e=>e instanceof Date))}},emits:["input","update:modelValue"],setup(e,t){const n=tt(null),l=Zr()(),a=ua((()=>u.value.subtract(1,"month"))),o=ua((()=>Zr()(u.value).format("YYYY-MM"))),r=ua((()=>u.value.add(1,"month"))),i=ua((()=>{const e="el.datepicker.month"+u.value.format("M");return`${u.value.year()} ${vc("el.datepicker.year")} ${vc(e)}`})),s=ua({get:()=>e.modelValue?u.value:n.value,set(e){n.value=e;const l=e.toDate();t.emit("input",l),t.emit("update:modelValue",l)}}),u=ua((()=>e.modelValue?Zr()(e.modelValue):s.value?s.value:c.value.length?c.value[0][0]:l)),c=ua((()=>{if(!e.range)return[];const t=e.range.map((e=>Zr()(e))),[n,l]=t;if(n.isAfter(l))return console.warn("[ElementCalendar]end time should be greater than start time"),[];if(n.isSame(l,"month"))return[[n.startOf("week"),l.endOf("week")]];{if(n.add(1,"month").month()!==l.month())return console.warn("[ElementCalendar]start time and end time interval must not exceed two months"),[];const e=l.startOf("month"),t=e.startOf("week");let a=e;return e.isSame(t,"month")||(a=e.endOf("week").add(1,"day")),[[n.startOf("week"),n.endOf("month")],[a,l.endOf("week")]]}})),d=e=>{s.value=e};return{selectedDay:n,curMonthDatePrefix:o,i18nDate:i,realSelectedDay:s,date:u,validatedRange:c,pickDay:d,selectDate:e=>{let t;t="prev-month"===e?a.value:"next-month"===e?r.value:l,t.isSame(u.value,"day")||d(t)},t:vc}}});const Xc={class:"el-calendar"},Jc={class:"el-calendar__header"},Zc={class:"el-calendar__title"},Qc={key:0,class:"el-calendar__button-group"},ed={key:0,class:"el-calendar__body"},td={key:1,class:"el-calendar__body"};Gc.render=function(e,t,n,l,a,o){const r=pl("el-button"),i=pl("el-button-group"),s=pl("date-table");return Cl(),Al("div",Xc,[Tl("div",Jc,[Tl("div",Zc,d(e.i18nDate),1),0===e.validatedRange.length?(Cl(),Al("div",Qc,[Tl(i,null,{default:en((()=>[Tl(r,{size:"mini",onClick:t[1]||(t[1]=t=>e.selectDate("prev-month"))},{default:en((()=>[Bl(d(e.t("el.datepicker.prevMonth")),1)])),_:1}),Tl(r,{size:"mini",onClick:t[2]||(t[2]=t=>e.selectDate("today"))},{default:en((()=>[Bl(d(e.t("el.datepicker.today")),1)])),_:1}),Tl(r,{size:"mini",onClick:t[3]||(t[3]=t=>e.selectDate("next-month"))},{default:en((()=>[Bl(d(e.t("el.datepicker.nextMonth")),1)])),_:1})])),_:1})])):Pl("v-if",!0)]),0===e.validatedRange.length?(Cl(),Al("div",ed,[Tl(s,{date:e.date,"selected-day":e.realSelectedDay,onPick:e.pickDay},fa({_:2},[e.$slots.dateCell?{name:"dateCell",fn:en((t=>[Zt(e.$slots,"dateCell",t)]))}:void 0]),1032,["date","selected-day","onPick"])])):(Cl(),Al("div",td,[(Cl(!0),Al(gl,null,da(e.validatedRange,((t,n)=>(Cl(),Al(s,{key:n,date:t[0],"selected-day":e.realSelectedDay,range:t,"hide-header":0!==n,onPick:e.pickDay},fa({_:2},[e.$slots.dateCell?{name:"dateCell",fn:en((t=>[Zt(e.$slots,"dateCell",t)]))}:void 0]),1032,["date","selected-day","range","hide-header","onPick"])))),128))]))])},Gc.__file="packages/calendar/src/index.vue",Gc.install=e=>{e.component(Gc.name,Gc)};var nd=Qn({name:"ElCard",props:{header:{type:String,default:""},bodyStyle:{type:[String,Object,Array],default:""},shadow:{type:String,default:""}}});const ld={key:0,class:"el-card__header"};nd.render=function(e,t,n,l,a,o){return Cl(),Al("div",null,[Tl("div",{class:["el-card",e.shadow?"is-"+e.shadow+"-shadow":"is-always-shadow"]},[e.$slots.header||e.header?(Cl(),Al("div",ld,[Zt(e.$slots,"header",{},(()=>[Bl(d(e.header),1)]))])):Pl("v-if",!0),Tl("div",{class:"el-card__body",style:e.bodyStyle},[Zt(e.$slots,"default")],4)],2)])},nd.__file="packages/card/src/index.vue",nd.install=e=>{e.component(nd.name,nd)};var ad=Qn({name:"ElCarousel",props:{initialIndex:{type:Number,default:0},height:{type:String,default:""},trigger:{type:String,default:"hover"},autoplay:{type:Boolean,default:!0},interval:{type:Number,default:3e3},indicatorPosition:{type:String,default:""},indicator:{type:Boolean,default:!0},arrow:{type:String,default:"hover"},type:{type:String,default:""},loop:{type:Boolean,default:!0},direction:{type:String,default:"horizontal",validator:e=>["horizontal","vertical"].includes(e)}},emits:["change"],setup(e,{emit:t}){const n=Ye({activeIndex:-1,containerWidth:0,timer:null,hover:!1}),l=tt(null),a=tt([]),o=tt(0),r=tt(0),i=ua((()=>"never"!==e.arrow&&"vertical"!==e.direction)),s=ua((()=>a.value.some((e=>e.label.toString().length>0)))),u=ua((()=>{const t=["el-carousel","el-carousel--"+e.direction];return"card"===e.type&&t.push("el-carousel--card"),t})),c=ua((()=>{const t=["el-carousel__indicators","el-carousel__indicators--"+e.direction];return s.value&&t.push("el-carousel__indicators--labels"),"outside"!==e.indicatorPosition&&"card"!==e.type||t.push("el-carousel__indicators--outside"),t})),d=Xr()((e=>{m(e)}),300,{trailing:!0}),p=Xr()((t=>{!function(t){"hover"===e.trigger&&t!==n.activeIndex&&(n.activeIndex=t)}(t)}),300);function f(){n.timer&&(clearInterval(n.timer),n.timer=null)}function h(){e.interval<=0||!e.autoplay||n.timer||(n.timer=setInterval((()=>v()),e.interval))}const v=()=>{n.activeIndex<a.value.length-1?n.activeIndex=n.activeIndex+1:e.loop&&(n.activeIndex=0)};function m(t){if("string"==typeof t){const e=a.value.filter((e=>e.name===t));e.length>0&&(t=a.value.indexOf(e[0]))}if(t=Number(t),isNaN(t)||t!==Math.floor(t))return void console.warn("[Element Warn][Carousel]index must be an integer.");let l=a.value.length;const o=n.activeIndex;n.activeIndex=t<0?e.loop?l-1:0:t>=l?e.loop?0:l-1:t,o===n.activeIndex&&g(o)}function g(e){a.value.forEach(((t,l)=>{t.translateItem(l,n.activeIndex,e)}))}return An((()=>n.activeIndex),((e,n)=>{g(n),n>-1&&t("change",e,n)})),An((()=>e.autoplay),(e=>{e?h():f()})),An((()=>e.loop),(()=>{m(n.activeIndex)})),mn((()=>{Mt((()=>{xu(l.value,g),l.value&&(o.value=l.value.offsetWidth,r.value=l.value.offsetHeight),e.initialIndex<a.value.length&&e.initialIndex>=0&&(n.activeIndex=e.initialIndex),h()}))})),yn((()=>{l.value&&ku(l.value,g),f()})),Fl("injectCarouselScope",{direction:e.direction,offsetWidth:o,offsetHeight:r,type:e.type,items:a,loop:e.loop,updateItems:function(e){a.value.push(e)},setActiveItem:m}),{data:n,props:e,items:a,arrowDisplay:i,carouselClasses:u,indicatorsClasses:c,hasLabel:s,handleMouseEnter:function(){n.hover=!0,f()},handleMouseLeave:function(){n.hover=!1,h()},handleIndicatorClick:function(e){n.activeIndex=e},throttledArrowClick:d,throttledIndicatorHover:p,handleButtonEnter:function(t){"vertical"!==e.direction&&a.value.forEach(((e,n)=>{t===function(e,t){const n=a.value.length;return t===n-1&&e.inStage&&a.value[0].active||e.inStage&&a.value[t+1]&&a.value[t+1].active?"left":!!(0===t&&e.inStage&&a.value[n-1].active||e.inStage&&a.value[t-1]&&a.value[t-1].active)&&"right"}(e,n)&&(e.hover=!0)}))},handleButtonLeave:function(){"vertical"!==e.direction&&a.value.forEach((e=>{e.hover=!1}))},prev:function(){m(n.activeIndex-1)},next:function(){m(n.activeIndex+1)},setActiveItem:m,root:l}}});const od=Tl("i",{class:"el-icon-arrow-left"},null,-1),rd=Tl("i",{class:"el-icon-arrow-right"},null,-1),id={class:"el-carousel__button"},sd={key:0};ad.render=function(e,t,n,l,a,o){return Cl(),Al("div",{ref:"root",class:e.carouselClasses,onMouseenter:t[7]||(t[7]=co(((...t)=>e.handleMouseEnter(...t)),["stop"])),onMouseleave:t[8]||(t[8]=co(((...t)=>e.handleMouseLeave(...t)),["stop"]))},[Tl("div",{class:"el-carousel__container",style:{height:e.height}},[e.arrowDisplay?(Cl(),Al(Pa,{key:0,name:"carousel-arrow-left"},{default:en((()=>[Un(Tl("button",{type:"button",class:"el-carousel__arrow el-carousel__arrow--left",onMouseenter:t[1]||(t[1]=t=>e.handleButtonEnter("left")),onMouseleave:t[2]||(t[2]=(...t)=>e.handleButtonLeave(...t)),onClick:t[3]||(t[3]=co((t=>e.throttledArrowClick(e.data.activeIndex-1)),["stop"]))},[od],544),[[ho,("always"===e.arrow||e.data.hover)&&(e.props.loop||e.data.activeIndex>0)]])])),_:1})):Pl("v-if",!0),e.arrowDisplay?(Cl(),Al(Pa,{key:1,name:"carousel-arrow-right"},{default:en((()=>[Un(Tl("button",{type:"button",class:"el-carousel__arrow el-carousel__arrow--right",onMouseenter:t[4]||(t[4]=t=>e.handleButtonEnter("right")),onMouseleave:t[5]||(t[5]=(...t)=>e.handleButtonLeave(...t)),onClick:t[6]||(t[6]=co((t=>e.throttledArrowClick(e.data.activeIndex+1)),["stop"]))},[rd],544),[[ho,("always"===e.arrow||e.data.hover)&&(e.props.loop||e.data.activeIndex<e.items.length-1)]])])),_:1})):Pl("v-if",!0),Zt(e.$slots,"default")],4),"none"!==e.indicatorPosition?(Cl(),Al("ul",{key:0,class:e.indicatorsClasses},[(Cl(!0),Al(gl,null,da(e.items,((t,n)=>(Cl(),Al("li",{key:n,class:["el-carousel__indicator","el-carousel__indicator--"+e.direction,{"is-active":n===e.data.activeIndex}],onMouseenter:t=>e.throttledIndicatorHover(n),onClick:co((t=>e.handleIndicatorClick(n)),["stop"])},[Tl("button",id,[e.hasLabel?(Cl(),Al("span",sd,d(t.label),1)):Pl("v-if",!0)])],42,["onMouseenter","onClick"])))),128))],2)):Pl("v-if",!0)],34)},ad.__file="packages/carousel/src/main.vue",ad.install=e=>{e.component(ad.name,ad)};var ud=Qn({name:"ElCarouselItem",props:{name:{type:String,default:""},label:{type:[String,Number],default:""}},setup(e){const t=la();t.uid;const n=Ye({hover:!1,translate:0,scale:1,active:!1,ready:!1,inStage:!1,animating:!1}),l=$l("injectCarouselScope"),a=ua((()=>l.direction)),o=ua((()=>function(e){const t=["ms-","webkit-"];return["transform","transition","animation"].forEach((n=>{const l=e[n];n&&l&&t.forEach((t=>{e[t+n]=l}))})),e}({transform:`${"vertical"===a.value?"translateY":"translateX"}(${n.translate}px) scale(${n.scale})`}))),r=(e,t,o)=>{const r=l.type,i=l.items.value.length;if("card"!==r&&void 0!==o&&(n.animating=e===t||e===o),e!==t&&i>2&&l.loop&&(e=function(e,t,n){return 0===t&&e===n-1?-1:t===n-1&&0===e?n:e<t-1&&t-e>=n/2?n+1:e>t+1&&e-t>=n/2?-2:e}(e,t,i)),"card"===r)"vertical"===a.value&&console.warn("[Element Warn][Carousel]vertical direction is not supported in card mode"),n.inStage=Math.round(Math.abs(e-t))<=1,n.active=e===t,n.translate=function(e,t){const a=l.offsetWidth.value;return n.inStage?a*(1.17*(e-t)+1)/4:e<t?-1.83*a/4:3.83*a/4}(e,t),n.scale=n.active?1:.83;else{n.active=e===t;const o="vertical"===a.value;n.translate=function(e,t,n){return l[n?"offsetHeight":"offsetWidth"].value*(e-t)}(e,t,o)}n.ready=!0};return mn((()=>{l.updateItems&&l.updateItems(Object.assign(Object.assign(Object.assign({uid:t.uid},e),st(n)),{translateItem:r}))})),{data:n,itemStyle:o,translateItem:r,type:l.type,handleItemClick:function(){if(l&&"card"===l.type){const e=l.items.value.map((e=>e.uid)).indexOf(t.uid);l.setActiveItem(e)}}}}});const cd={key:0,class:"el-carousel__mask"};ud.render=function(e,t,n,l,a,o){return Un((Cl(),Al("div",{class:["el-carousel__item",{"is-active":e.data.active,"el-carousel__item--card":"card"===e.type,"is-in-stage":e.data.inStage,"is-hover":e.data.hover,"is-animating":e.data.animating}],style:e.itemStyle,onClick:t[1]||(t[1]=(...t)=>e.handleItemClick(...t))},["card"===e.type?Un((Cl(),Al("div",cd,null,512)),[[ho,!e.data.active]]):Pl("v-if",!0),Zt(e.$slots,"default")],6)),[[ho,e.data.ready]])},ud.__file="packages/carousel/src/item.vue",ud.install=e=>{e.component(ud.name,ud)};const dd=()=>{const e=ms(),t=$l("elForm",{}),n=$l("elFormItem",{}),l=$l("CheckboxGroup",{}),a=ua((()=>l&&"ElCheckboxGroup"===(null==l?void 0:l.name))),o=ua((()=>n.size));return{isGroup:a,checkboxGroup:l,elForm:t,ELEMENT:e,elFormItemSize:o,elFormItem:n}},pd=e=>{const{model:t,isLimitExceeded:n}=(e=>{let t=!1;const{emit:n}=la(),{isGroup:l,checkboxGroup:a}=dd(),o=tt(!1),r=ua((()=>{var t;return a?null===(t=a.modelValue)||void 0===t?void 0:t.value:e.modelValue}));return{model:ua({get(){var n;return l.value?r.value:null!==(n=e.modelValue)&&void 0!==n?n:t},set(e){var r;l.value&&Array.isArray(e)?(o.value=!1,void 0!==a.min&&e.length<a.min.value&&(o.value=!0),void 0!==a.max&&e.length>a.max.value&&(o.value=!0),!1===o.value&&(null===(r=null==a?void 0:a.changeEvent)||void 0===r||r.call(a,e))):(n(tu,e),t=e)}}),isLimitExceeded:o}})(e),{focus:l,size:a,isChecked:o,checkboxSize:r}=((e,{model:t})=>{const{isGroup:n,checkboxGroup:l,elFormItemSize:a,ELEMENT:o}=dd(),r=tt(!1),i=ua((()=>{var e;return(null===(e=null==l?void 0:l.checkboxGroupSize)||void 0===e?void 0:e.value)||a.value||o.size}));return{isChecked:ua((()=>{const n=t.value;return"[object Boolean]"===ts(n)?n:Array.isArray(n)?n.includes(e.label):null!=n?n===e.trueLabel:void 0})),focus:r,size:i,checkboxSize:ua((()=>{var t;const r=e.size||a.value||o.size;return n.value&&(null===(t=null==l?void 0:l.checkboxGroupSize)||void 0===t?void 0:t.value)||r}))}})(e,{model:t}),{isDisabled:i}=((e,{model:t,isChecked:n})=>{const{elForm:l,isGroup:a,checkboxGroup:o}=dd(),r=ua((()=>{var e,l;const a=null===(e=o.max)||void 0===e?void 0:e.value,r=null===(l=o.min)||void 0===l?void 0:l.value;return!(!a&&!r)&&t.value.length>=a&&!n.value||t.value.length<=r&&n.value}));return{isDisabled:ua((()=>{var t;const n=e.disabled||l.disabled;return a.value?(null===(t=o.disabled)||void 0===t?void 0:t.value)||n||r.value:e.disabled||l.disabled})),isLimitDisabled:r}})(e,{model:t,isChecked:o}),{handleChange:s}=((e,{isLimitExceeded:t})=>{const{elFormItem:n}=dd(),{emit:l}=la();return An((()=>e.modelValue),(e=>{var t;null===(t=n.formItemMitt)||void 0===t||t.emit("el.form.change",[e])})),{handleChange:function(n){var a,o;if(t.value)return;const r=n.target.checked?null===(a=e.trueLabel)||void 0===a||a:null!==(o=e.falseLabel)&&void 0!==o&&o;l("change",r,n)}}})(e,{isLimitExceeded:n});return((e,{model:t})=>{e.checked&&(Array.isArray(t.value)&&!t.value.includes(e.label)?t.value.push(e.label):t.value=e.trueLabel||!0)})(e,{model:t}),{isChecked:o,isDisabled:i,checkboxSize:r,model:t,handleChange:s,focus:l,size:a}};var fd=Qn({name:"ElCheckbox",props:{modelValue:{type:[Boolean,Number,String],default:()=>{}},label:{type:[Boolean,Number,String]},indeterminate:Boolean,disabled:Boolean,checked:Boolean,name:{type:String,default:void 0},trueLabel:{type:[String,Number],default:void 0},falseLabel:{type:[String,Number],default:void 0},id:{type:String,default:void 0},controls:{type:String,default:void 0},border:Boolean,size:{type:String,validator:au}},emits:[tu,"change"],setup(e){const{focus:t,isChecked:n,isDisabled:l,checkboxSize:a,model:o,handleChange:r}=pd(e),i=la();return mn((()=>{i.vnode.el.setAttribute("aria-controls",e.controls)})),{focus:t,isChecked:n,isDisabled:l,checkboxSize:a,model:o,handleChange:r}}});const hd=Tl("span",{class:"el-checkbox__inner"},null,-1),vd={key:0,class:"el-checkbox__label"};fd.render=function(e,t,n,l,a,o){return Cl(),Al("label",{id:e.id,class:["el-checkbox",[e.border&&e.checkboxSize?"el-checkbox--"+e.checkboxSize:"",{"is-disabled":e.isDisabled},{"is-bordered":e.border},{"is-checked":e.isChecked}]]},[Tl("span",{class:["el-checkbox__input",{"is-disabled":e.isDisabled,"is-checked":e.isChecked,"is-indeterminate":e.indeterminate,"is-focus":e.focus}],tabindex:!!e.indeterminate&&0,role:!!e.indeterminate&&"checkbox","aria-checked":!!e.indeterminate&&"mixed"},[hd,e.trueLabel||e.falseLabel?Un((Cl(),Al("input",{key:0,"onUpdate:modelValue":t[1]||(t[1]=t=>e.model=t),checked:e.isChecked,class:"el-checkbox__original",type:"checkbox","aria-hidden":e.indeterminate?"true":"false",name:e.name,disabled:e.isDisabled,"true-value":e.trueLabel,"false-value":e.falseLabel,onChange:t[2]||(t[2]=(...t)=>e.handleChange(...t)),onFocus:t[3]||(t[3]=t=>e.focus=!0),onBlur:t[4]||(t[4]=t=>e.focus=!1)},null,40,["checked","aria-hidden","name","disabled","true-value","false-value"])),[[lo,e.model]]):Un((Cl(),Al("input",{key:1,"onUpdate:modelValue":t[5]||(t[5]=t=>e.model=t),class:"el-checkbox__original",type:"checkbox","aria-hidden":e.indeterminate?"true":"false",disabled:e.isDisabled,value:e.label,name:e.name,onChange:t[6]||(t[6]=(...t)=>e.handleChange(...t)),onFocus:t[7]||(t[7]=t=>e.focus=!0),onBlur:t[8]||(t[8]=t=>e.focus=!1)},null,40,["aria-hidden","disabled","value","name"])),[[lo,e.model]])],10,["tabindex","role","aria-checked"]),e.$slots.default||e.label?(Cl(),Al("span",vd,[Zt(e.$slots,"default"),e.$slots.default?Pl("v-if",!0):(Cl(),Al(gl,{key:0},[Bl(d(e.label),1)],64))])):Pl("v-if",!0)],10,["id"])},fd.__file="packages/checkbox/src/checkbox.vue",fd.install=e=>{e.component(fd.name,fd)};const md=()=>{const e=ms(),t=$l("elForm",{}),n=$l("elFormItem",{}),l=$l("RadioGroup",{}),a=tt(!1),o=ua((()=>"ElRadioGroup"===(null==l?void 0:l.name))),r=ua((()=>n.size||e.size));return{isGroup:o,focus:a,radioGroup:l,elForm:t,ELEMENT:e,elFormItemSize:r}},gd=(e,{isGroup:t,radioGroup:n,elForm:l,model:a})=>{const o=ua((()=>t.value?n.disabled||e.disabled||l.disabled:e.disabled||l.disabled)),r=ua((()=>o.value||t.value&&a.value!==e.label?-1:0));return{isDisabled:o,tabIndex:r}};var bd=Qn({name:"ElRadio",componentName:"ElRadio",props:{modelValue:{type:[Boolean,String,Number],default:""},label:{type:[Boolean,String,Number],default:""},disabled:Boolean,name:{type:String,default:""},border:Boolean,size:{type:String,validator:au}},emits:[tu,"change"],setup(e,t){const{isGroup:n,radioGroup:l,elFormItemSize:a,ELEMENT:o,focus:r,elForm:i}=md(),s=tt(),u=ua({get:()=>n.value?l.modelValue:e.modelValue,set(a){n.value?l.changeEvent(a):t.emit(tu,a),s.value.checked=e.modelValue===e.label}}),{tabIndex:c,isDisabled:d}=gd(e,{isGroup:n,radioGroup:l,elForm:i,model:u}),p=ua((()=>{const t=e.size||a.value||o.size;return n.value&&l.radioGroupSize||t}));return{focus:r,isGroup:n,isDisabled:d,model:u,tabIndex:c,radioSize:p,handleChange:function(){Mt((()=>{t.emit("change",u.value)}))},radioRef:s}}});const yd=Tl("span",{class:"el-radio__inner"},null,-1);var xd;bd.render=function(e,t,n,l,a,o){return Cl(),Al("label",{class:["el-radio",{["el-radio--"+(e.radioSize||"")]:e.border&&e.radioSize,"is-disabled":e.isDisabled,"is-focus":e.focus,"is-bordered":e.border,"is-checked":e.model===e.label}],role:"radio","aria-checked":e.model===e.label,"aria-disabled":e.isDisabled,tabindex:e.tabIndex,onKeydown:t[6]||(t[6]=fo(co((t=>e.model=e.isDisabled?e.model:e.label),["stop","prevent"]),["space"]))},[Tl("span",{class:["el-radio__input",{"is-disabled":e.isDisabled,"is-checked":e.model===e.label}]},[yd,Un(Tl("input",{ref:"radioRef","onUpdate:modelValue":t[1]||(t[1]=t=>e.model=t),class:"el-radio__original",value:e.label,type:"radio","aria-hidden":"true",name:e.name,disabled:e.isDisabled,tabindex:"-1",onFocus:t[2]||(t[2]=t=>e.focus=!0),onBlur:t[3]||(t[3]=t=>e.focus=!1),onChange:t[4]||(t[4]=(...t)=>e.handleChange(...t))},null,40,["value","name","disabled"]),[[oo,e.model]])],2),Tl("span",{class:"el-radio__label",onKeydown:t[5]||(t[5]=co((()=>{}),["stop"]))},[Zt(e.$slots,"default",{},(()=>[Bl(d(e.label),1)]))],32)],42,["aria-checked","aria-disabled","tabindex"])},bd.__file="packages/radio/src/radio.vue",bd.install=e=>{e.component(bd.name,bd)},function(e){e.CLICK="click",e.HOVER="hover"}(xd||(xd={}));const kd=Symbol();var wd=Qn({name:"ElCascaderNode",components:{ElCheckbox:fd,ElRadio:bd,NodeContent:{render(){const{node:e,panel:t}=this.$parent,{data:n,label:l}=e,{renderLabelFn:a}=t;return ca("span",{class:"el-cascader-node__label"},a?a({node:e,data:n}):l)}}},props:{node:{type:Object,required:!0},menuId:String},emits:["expand"],setup(e,{emit:t}){const n=$l(kd),l=ua((()=>n.isHoverMenu)),a=ua((()=>n.config.multiple)),o=ua((()=>n.config.checkStrictly)),r=ua((()=>{var e;return null===(e=n.checkedNodes[0])||void 0===e?void 0:e.uid})),i=ua((()=>e.node.isDisabled)),s=ua((()=>e.node.isLeaf)),u=ua((()=>o.value&&!s.value||!i.value)),c=ua((()=>p(n.expandingNode))),d=ua((()=>o.value&&n.checkedNodes.some(p))),p=t=>{var n;const{level:l,uid:a}=e.node;return(null===(n=null==t?void 0:t.pathNodes[l-1])||void 0===n?void 0:n.uid)===a},f=()=>{c.value||n.expandNode(e.node)},h=()=>{n.lazyLoad(e.node,(()=>{s.value||f()}))},v=()=>{const{node:t}=e;u.value&&!t.loading&&(t.loaded?f():h())},m=t=>{e.node.loaded?((t=>{const{node:l}=e;t!==l.checked&&n.handleCheckChange(l,t)})(t),!o.value&&f()):h()};return{panel:n,isHoverMenu:l,multiple:a,checkStrictly:o,checkedNodeId:r,isDisabled:i,isLeaf:s,expandable:u,inExpandingPath:c,inCheckedPath:d,handleHoverExpand:e=>{l.value&&(v(),!s.value&&t("expand",e))},handleExpand:v,handleClick:()=>{l.value&&!s.value||(!s.value||i.value||o.value||a.value?v():m(!0))},handleCheck:m}}});const Cd=Tl("span",null,null,-1),_d={key:2,class:"el-icon-check el-cascader-node__prefix"},Ad={key:0,class:"el-icon-loading el-cascader-node__postfix"},Sd={key:1,class:"el-icon-arrow-right el-cascader-node__postfix"};wd.render=function(e,t,n,l,a,o){const r=pl("el-checkbox"),i=pl("el-radio"),s=pl("node-content");return Cl(),Al("li",{id:`${e.menuId}-${e.node.uid}`,role:"menuitem","aria-haspopup":!e.isLeaf,"aria-owns":e.isLeaf?null:e.menuId,"aria-expanded":e.inExpandingPath,tabindex:e.expandable?-1:null,class:["el-cascader-node",e.checkStrictly&&"is-selectable",e.inExpandingPath&&"in-active-path",e.inCheckedPath&&"in-checked-path",e.node.checked&&"is-active",!e.expandable&&"is-disabled"],onMouseenter:t[3]||(t[3]=(...t)=>e.handleHoverExpand(...t)),onFocus:t[4]||(t[4]=(...t)=>e.handleHoverExpand(...t)),onClick:t[5]||(t[5]=(...t)=>e.handleClick(...t))},[Pl(" prefix "),e.multiple?(Cl(),Al(r,{key:0,"model-value":e.node.checked,indeterminate:e.node.indeterminate,disabled:e.isDisabled,onClick:t[1]||(t[1]=co((()=>{}),["stop"])),"onUpdate:modelValue":e.handleCheck},null,8,["model-value","indeterminate","disabled","onUpdate:modelValue"])):e.checkStrictly?(Cl(),Al(i,{key:1,"model-value":e.checkedNodeId,label:e.node.uid,disabled:e.isDisabled,"onUpdate:modelValue":e.handleCheck,onClick:t[2]||(t[2]=co((()=>{}),["stop"]))},{default:en((()=>[Pl("\n        Add an empty element to avoid render label,\n        do not use empty fragment here for https://github.com/vuejs/vue-next/pull/2485\n      "),Cd])),_:1},8,["model-value","label","disabled","onUpdate:modelValue"])):e.isLeaf&&e.node.checked?(Cl(),Al("i",_d)):Pl("v-if",!0),Pl(" content "),Tl(s),Pl(" postfix "),e.isLeaf?Pl("v-if",!0):(Cl(),Al(gl,{key:3},[e.node.loading?(Cl(),Al("i",Ad)):(Cl(),Al("i",Sd))],64))],42,["id","aria-haspopup","aria-owns","aria-expanded","tabindex"])},wd.__file="packages/cascader-panel/src/node.vue";var Ed=Qn({name:"ElCascaderMenu",components:{ElScrollbar:Au,ElCascaderNode:wd},props:{nodes:{type:Array,required:!0},index:{type:Number,required:!0}},setup(e){const t=la(),n=cs();let l=null,a=null;const o=$l(kd),r=tt(null),i=ua((()=>!e.nodes.length)),s=ua((()=>`cascader-menu-${n}-${e.index}`)),u=()=>{a&&(clearTimeout(a),a=null)},c=()=>{r.value&&(r.value.innerHTML="",u())};return{panel:o,hoverZone:r,isEmpty:i,menuId:s,t:vc,handleExpand:e=>{l=e.target},handleMouseMove:e=>{if(o.isHoverMenu&&l&&r.value)if(l.contains(e.target)){u();const n=t.vnode.el,{left:a}=n.getBoundingClientRect(),{offsetWidth:o,offsetHeight:i}=n,s=e.clientX-a,c=l.offsetTop,d=c+l.offsetHeight;r.value.innerHTML=`\n          <path style="pointer-events: auto;" fill="transparent" d="M${s} ${c} L${o} 0 V${c} Z" />\n          <path style="pointer-events: auto;" fill="transparent" d="M${s} ${d} L${o} ${i} V${d} Z" />\n        `}else a||(a=window.setTimeout(c,o.config.hoverThreshold))},clearHoverZone:c}}});const Md={key:0,class:"el-cascader-menu__empty-text"},Od={key:1,ref:"hoverZone",class:"el-cascader-menu__hover-zone"};Ed.render=function(e,t,n,l,a,o){const r=pl("el-cascader-node"),i=pl("el-scrollbar");return Cl(),Al(i,{id:e.menuId,tag:"ul",role:"menu",class:"el-cascader-menu","wrap-class":"el-cascader-menu__wrap","view-class":["el-cascader-menu__list",e.isEmpty&&"is-empty"],onMousemove:e.handleMouseMove,onMouseleave:e.clearHoverZone},{default:en((()=>[(Cl(!0),Al(gl,null,da(e.nodes,(t=>(Cl(),Al(r,{key:t.uid,node:t,"menu-id":e.menuId,onExpand:e.handleExpand},null,8,["node","menu-id","onExpand"])))),128)),e.isEmpty?(Cl(),Al("div",Md,d(e.t("el.cascader.noData")),1)):e.panel.isHoverMenu?(Cl(),Al("svg",Od,null,512)):Pl("v-if",!0)])),_:1},8,["id","view-class","onMousemove","onMouseleave"])},Ed.__file="packages/cascader-panel/src/menu.vue";let Dd=0;class Td{constructor(e,t,n,l=!1){this.data=e,this.config=t,this.parent=n,this.root=l,this.uid=Dd++,this.checked=!1,this.indeterminate=!1,this.loading=!1;const{value:a,label:o,children:r}=t,i=e[r],s=(e=>{const t=[e];let{parent:n}=e;for(;n;)t.unshift(n),n=n.parent;return t})(this);this.level=l?0:n?n.level+1:1,this.value=e[a],this.label=e[o],this.pathNodes=s,this.pathValues=s.map((e=>e.value)),this.pathLabels=s.map((e=>e.label)),this.childrenData=i,this.children=(i||[]).map((e=>new Td(e,t,this))),this.loaded=!t.lazy||this.isLeaf||!bs(i)}get isDisabled(){const{data:e,parent:t,config:n}=this,{disabled:l,checkStrictly:a}=n;return(Ji(l)?l(e,this):!!e[l])||!a&&(null==t?void 0:t.isDisabled)}get isLeaf(){const{data:e,config:t,childrenData:n,loaded:l}=this,{lazy:a,leaf:o}=t,r=Ji(o)?o(e,this):e[o];return void 0===r?!(a&&!l||Array.isArray(n)):!!r}get valueByOption(){return this.config.emitPath?this.pathValues:this.value}appendChild(e){const{childrenData:t,children:n}=this,l=new Td(e,this.config,this);return Array.isArray(t)?t.push(e):this.childrenData=[e],n.push(l),l}calcText(e,t){const n=e?this.pathLabels.join(t):this.label;return this.text=n,n}broadcast(e,...t){const n="onParent"+rs(e);this.children.forEach((l=>{l&&(l.broadcast(e,...t),l[n]&&l[n](...t))}))}emit(e,...t){const{parent:n}=this,l="onChild"+rs(e);n&&(n[l]&&n[l](...t),n.emit(e,...t))}onParentCheck(e){this.isDisabled||this.setCheckState(e)}onChildCheck(){const{children:e}=this,t=e.filter((e=>!e.isDisabled)),n=!!t.length&&t.every((e=>e.checked));this.setCheckState(n)}setCheckState(e){const t=this.children.length,n=this.children.reduce(((e,t)=>e+(t.checked?1:t.indeterminate?.5:0)),0);this.checked=e,this.indeterminate=n!==t&&n>0}doCheck(e){if(this.checked===e)return;const{checkStrictly:t,multiple:n}=this.config;t||!n?this.checked=e:(this.broadcast("check",e),this.setCheckState(e),this.emit("check"))}}const Nd=(e,t)=>e.reduce(((e,n)=>(n.isLeaf?e.push(n):(!t&&e.push(n),e=e.concat(Nd(n.children,t))),e)),[]);class Bd{constructor(e,t){this.config=t;const n=(e||[]).map((e=>new Td(e,this.config)));this.nodes=n,this.allNodes=Nd(n,!1),this.leafNodes=Nd(n,!0)}getNodes(){return this.nodes}getFlattedNodes(e){return e?this.leafNodes:this.allNodes}appendNode(e,t){const n=t?t.appendChild(e):new Td(e,this.config);t||this.nodes.push(n),this.allNodes.push(n),n.isLeaf&&this.leafNodes.push(n)}appendNodes(e,t){e.forEach((e=>this.appendNode(e,t)))}getNodeByValue(e,t=!1){return(e||0===e)&&this.getFlattedNodes(t).filter((t=>t.value===e||ri()(t.pathValues,e)))[0]||null}getSameNode(e){return e&&this.getFlattedNodes(!1).filter((({value:t,level:n})=>e.value===t&&e.level===n))[0]||null}}function Pd(e,t){if(is)return;if(!t)return void(e.scrollTop=0);const n=[];let l=t.offsetParent;for(;null!==l&&e!==l&&e.contains(l);)n.push(l),l=l.offsetParent;const a=t.offsetTop+n.reduce(((e,t)=>e+t.offsetTop),0),o=a+t.offsetHeight,r=e.scrollTop,i=r+e.clientHeight;a<r?e.scrollTop=a:o>i&&(e.scrollTop=o-e.clientHeight)}const Vd={modelValue:[Number,String,Array],options:{type:Array,default:()=>[]},props:{type:Object,default:()=>({})}},Id={expandTrigger:xd.CLICK,multiple:!1,checkStrictly:!1,emitPath:!0,lazy:!1,lazyLoad:Ui,value:"value",label:"label",children:"children",leaf:"leaf",disabled:"disabled",hoverThreshold:500},Ld=e=>!e.getAttribute("aria-owns"),zd=e=>{if(!e)return 0;const t=e.id.split("-");return Number(t[t.length-2])},Fd=e=>{e&&(e.focus(),!Ld(e)&&e.click())};var $d=Qn({name:"ElCascaderPanel",components:{ElCascaderMenu:Ed},props:Object.assign(Object.assign({},Vd),{border:{type:Boolean,default:!0},renderLabel:Function}),emits:[tu,"change","close","expand-change"],setup(e,{emit:t,slots:n}){let l=!0,a=!1;const o=(e=>ua((()=>Object.assign(Object.assign({},Id),e.props))))(e),r=tt(null),i=tt([]),s=tt(null),u=tt([]),c=tt(null),d=tt([]),p=ua((()=>o.value.expandTrigger===xd.HOVER)),f=ua((()=>e.renderLabel||n.default)),h=(e,t)=>{const n=o.value;(e=e||new Td({},n,null,!0)).loading=!0,n.lazyLoad(e,(n=>{const l=e.root?null:e;n&&r.value.appendNodes(n,l),e.loading=!1,e.loaded=!0,t&&t(n)}))},v=(e,n)=>{var l;const{level:a}=e,o=u.value.slice(0,a);let r;e.isLeaf?r=e.pathNodes[a-2]:(r=e,o.push(e.children)),(null===(l=c.value)||void 0===l?void 0:l.uid)!==(null==r?void 0:r.uid)&&(c.value=e,u.value=o,!n&&t("expand-change",(null==e?void 0:e.pathValues)||[]))},m=(e,n,l=!0)=>{const{checkStrictly:r,multiple:i}=o.value,s=d.value[0];a=!0,!i&&(null==s||s.doCheck(!1)),e.doCheck(n),y(),l&&!i&&!r&&t("close")},g=e=>r.value.getFlattedNodes(e),b=e=>g(e).filter((e=>e.checked)),y=()=>{const{checkStrictly:e,multiple:t}=o.value,n=((e,t)=>{const n=t.slice(0),l=n.map((e=>e.uid)),a=e.reduce(((e,t)=>{const a=l.indexOf(t.uid);return a>-1&&(e.push(t),n.splice(a,1),l.splice(a,1)),e}),[]);return a.push(...n),a})(d.value,b(!e)),l=n.map((e=>e.valueByOption));d.value=n,s.value=t?l:l[0]||null},x=(t=!1,n=!1)=>{const{modelValue:i}=e,{lazy:u,multiple:c,checkStrictly:d}=o.value,p=!d;if(l&&!a&&(n||!ri()(i,s.value)))if(u&&!t){const e=xs(ys(ds(i))).map((e=>r.value.getNodeByValue(e))).filter((e=>!!e&&!e.loaded&&!e.loading));e.length?e.forEach((e=>{h(e,(()=>x(!1,n)))})):x(!0,n)}else{const e=xs((c?ds(i):[i]).map((e=>r.value.getNodeByValue(e,p))));k(e,!1),s.value=i}},k=(e,t=!0)=>{const{checkStrictly:n}=o.value,l=d.value,a=e.filter((e=>!!e&&(n||e.isLeaf))),i=r.value.getSameNode(c.value),s=t&&i||a[0];s?s.pathNodes.forEach((e=>v(e,!0))):c.value=null,l.forEach((e=>e.doCheck(!1))),a.forEach((e=>e.doCheck(!0))),d.value=a,Mt(w)},w=()=>{is||i.value.forEach((e=>{const t=null==e?void 0:e.$el;t&&Pd(t.querySelector(".el-scrollbar__wrap"),t.querySelector(".el-cascader-node.is-active")||t.querySelector(".el-cascader-node.in-active-path"))}))};return Fl(kd,Ye({config:o,expandingNode:c,checkedNodes:d,isHoverMenu:p,renderLabelFn:f,lazyLoad:h,expandNode:v,handleCheckChange:m})),An([o,()=>e.options],(()=>{const{options:t}=e,n=o.value;a=!1,r.value=new Bd(t,n),u.value=[r.value.getNodes()],n.lazy&&bs(e.options)?(l=!1,h(null,(()=>{l=!0,x(!1,!0)}))):x(!1,!0)}),{deep:!0,immediate:!0}),An((()=>e.modelValue),(()=>{a=!1,x()})),An(s,(n=>{ri()(n,e.modelValue)||(t(tu,n),t("change",n))})),gn((()=>i.value=[])),mn((()=>!bs(e.modelValue)&&x())),{menuList:i,menus:u,checkedNodes:d,handleKeyDown:e=>{const n=e.target,{code:l}=e;switch(l){case Fs.up:case Fs.down:const e=l===Fs.up?-1:1;Fd(((e,t)=>{const{parentNode:n}=e;if(!n)return null;const l=n.querySelectorAll('.el-cascader-node[tabindex="-1"]');return l[Array.prototype.indexOf.call(l,e)+t]||null})(n,e));break;case Fs.left:const a=i.value[zd(n)-1],o=null==a?void 0:a.$el.querySelector('.el-cascader-node[aria-expanded="true"]');Fd(o);break;case Fs.right:const r=i.value[zd(n)+1],s=null==r?void 0:r.$el.querySelector('.el-cascader-node[tabindex="-1"]');Fd(s);break;case Fs.enter:(e=>{if(!e)return;const t=e.querySelector("input");t?t.click():Ld(e)&&e.click()})(n);break;case Fs.esc:case Fs.tab:t("close")}},handleCheckChange:m,getFlattedNodes:g,getCheckedNodes:b,clearCheckedNodes:()=>{d.value.forEach((e=>e.doCheck(!1))),y()},calculateCheckedValue:y,scrollToExpandingNode:w}}});$d.render=function(e,t,n,l,a,o){const r=pl("el-cascader-menu");return Cl(),Al("div",{class:["el-cascader-panel",e.border&&"is-bordered"],onKeydown:t[1]||(t[1]=(...t)=>e.handleKeyDown(...t))},[(Cl(!0),Al(gl,null,da(e.menus,((t,n)=>(Cl(),Al(r,{key:n,ref:t=>e.menuList[n]=t,index:n,nodes:t},null,8,["index","nodes"])))),128))],34)},$d.__file="packages/cascader-panel/src/index.vue",$d.install=e=>{e.component($d.name,$d)};var Rd=Qn({name:"ElTag",props:{closable:Boolean,type:{type:String,default:""},hit:Boolean,disableTransitions:Boolean,color:{type:String,default:""},size:{type:String,validator:au},effect:{type:String,default:"light",validator:e=>-1!==["dark","light","plain"].indexOf(e)}},emits:["close","click"],setup(e,t){const n=ms(),l=ua((()=>e.size||n.size)),a=ua((()=>{const{type:t,hit:n,effect:a}=e;return["el-tag",t?"el-tag--"+t:"",l.value?"el-tag--"+l.value:"",a?"el-tag--"+a:"",n&&"is-hit"]}));return{tagSize:l,classes:a,handleClose:e=>{e.stopPropagation(),t.emit("close",e)},handleClick:e=>{t.emit("click",e)}}}});Rd.render=function(e,t,n,l,a,o){return e.disableTransitions?(Cl(),Al(Pa,{key:1,name:"el-zoom-in-center"},{default:en((()=>[Tl("span",{class:e.classes,style:{backgroundColor:e.color},onClick:t[4]||(t[4]=(...t)=>e.handleClick(...t))},[Zt(e.$slots,"default"),e.closable?(Cl(),Al("i",{key:0,class:"el-tag__close el-icon-close",onClick:t[3]||(t[3]=(...t)=>e.handleClose(...t))})):Pl("v-if",!0)],6)])),_:3})):(Cl(),Al("span",{key:0,class:e.classes,style:{backgroundColor:e.color},onClick:t[2]||(t[2]=(...t)=>e.handleClick(...t))},[Zt(e.$slots,"default"),e.closable?(Cl(),Al("i",{key:0,class:"el-tag__close el-icon-close",onClick:t[1]||(t[1]=(...t)=>e.handleClose(...t))})):Pl("v-if",!0)],6))},Rd.__file="packages/tag/src/index.vue",Rd.install=e=>{e.component(Rd.name,Rd)};const jd={medium:36,small:32,mini:28},Hd={modifiers:[{name:"arrowPosition",enabled:!0,phase:"main",fn:({state:e})=>{const{modifiersData:t,elements:n}=e,{reference:l,arrow:a}=n;t.arrow.x=t.arrow.x-(l.clientWidth-a.clientWidth)/2+35},requires:["arrow"]}]};var Wd=Qn({name:"ElCascader",components:{ElCascaderPanel:$d,ElInput:cu,ElPopper:Ku,ElScrollbar:Au,ElTag:Rd},directives:{Clickoutside:Xs},props:Object.assign(Object.assign({},Vd),{size:{type:String,validator:au},placeholder:{type:String,default:()=>vc("el.cascader.placeholder")},disabled:Boolean,clearable:Boolean,filterable:Boolean,filterMethod:{type:Function,default:(e,t)=>e.text.includes(t)},separator:{type:String,default:" / "},showAllLevels:{type:Boolean,default:!0},collapseTags:Boolean,debounce:{type:Number,default:300},beforeFilter:{type:Function,default:()=>!0},popperClass:{type:String,default:""}}),emits:[tu,"change","focus","blur","visible-change","expand-change","remove-tag"],setup(e,{emit:t}){let n=0,l=0;const a=ms(),o=$l("elForm",{}),r=$l("elFormItem",{}),i=tt(null),s=tt(null),u=tt(null),c=tt(null),d=tt(null),p=tt(!1),f=tt(!1),h=tt(!1),v=tt(""),m=tt(""),g=tt([]),b=tt([]),y=ua((()=>e.disabled||o.disabled)),x=ua((()=>e.size||r.size||a.size)),k=ua((()=>["small","mini"].includes(x.value)?"mini":"small")),w=ua((()=>!!e.props.multiple)),C=ua((()=>!e.filterable||w.value)),_=ua((()=>w.value?m.value:v.value)),A=ua((()=>{var e;return(null===(e=c.value)||void 0===e?void 0:e.checkedNodes)||[]})),S=ua((()=>!(!e.clearable||y.value||h.value||!f.value||!A.value.length))),E=ua((()=>{const{showAllLevels:t,separator:n}=e,l=A.value;return l.length?w.value?" ":l[0].calcText(t,n):""})),M=ua({get:()=>e.modelValue,set(e){var n;t(tu,e),t("change",e),null===(n=r.formItemMitt)||void 0===n||n.emit("el.form.change",[e])}}),O=n=>{if(!y.value&&(n=null!=n?n:!p.value)!==p.value){if(p.value=n,s.value.input.setAttribute("aria-expanded",n),n)D(),Mt(c.value.scrollToExpandingNode);else if(e.filterable){const{value:e}=E;v.value=e,m.value=e}t("visible-change",n)}},D=()=>{Mt(i.value.update)},T=()=>{h.value=!1},N=t=>{const{showAllLevels:n,separator:l}=e;return{node:t,key:t.uid,text:t.calcText(n,l),hitState:!1,closable:!y.value&&!t.isDisabled}},B=e=>{const{node:n}=e;n.doCheck(!1),c.value.calculateCheckedValue(),t("remove-tag",n.valueByOption)},P=()=>{const{filterMethod:t,showAllLevels:n,separator:l}=e,a=c.value.getFlattedNodes(!e.props.checkStrictly).filter((e=>!e.isDisabled&&(e.calcText(n,l),t(e,_.value))));w.value&&g.value.forEach((e=>{e.hitState=!1})),h.value=!0,b.value=a,D()},V=()=>{var e;let t=null;t=h.value&&d.value?d.value.$el.querySelector(".el-cascader__suggestion-item"):null===(e=c.value)||void 0===e?void 0:e.$el.querySelector('.el-cascader-node[tabindex="-1"]'),t&&(t.focus(),!h.value&&t.click())},I=()=>{var e;const t=s.value.input,l=u.value,a=null===(e=d.value)||void 0===e?void 0:e.$el;if(!is&&t&&(a&&(a.querySelector(".el-cascader__suggestion-list").style.minWidth=t.offsetWidth+"px"),l)){const{offsetHeight:e}=l,a=Math.max(e+6,n)+"px";t.style.height=a,D()}},L=ko()((()=>{const{value:t}=_;if(!t)return;const n=e.beforeFilter(t);var l;Qi(l=n)&&Ji(l.then)&&Ji(l.catch)?n.then(P):!1!==n?P():T()}),e.debounce);return An(h,D),An([A,y],(()=>{if(!w.value)return;const t=A.value,n=[];if(t.length){const[l,...a]=t,o=a.length;n.push(N(l)),o&&(e.collapseTags?n.push({key:-1,text:"+ "+o,closable:!1}):a.forEach((e=>n.push(N(e)))))}g.value=n})),An(g,(()=>Mt(I))),An(E,(e=>v.value=e),{immediate:!0}),mn((()=>{const e=s.value.$el;n=(null==e?void 0:e.offsetHeight)||jd[x.value]||40,xu(e,I)})),yn((()=>{ku(s.value.$el,I)})),{popperOptions:Hd,popper:i,input:s,tagWrapper:u,panel:c,suggestionPanel:d,popperVisible:p,inputHover:f,filtering:h,presentText:E,checkedValue:M,inputValue:v,searchInputValue:m,presentTags:g,suggestions:b,isDisabled:y,realSize:x,tagSize:k,multiple:w,readonly:C,clearBtnVisible:S,t:vc,togglePopperVisible:O,hideSuggestionPanel:T,deleteTag:B,focusFirstNode:V,getCheckedNodes:e=>c.value.getCheckedNodes(e),handleExpandChange:e=>{D(),t("expand-change",e)},handleKeyDown:e=>{switch(e.code){case Fs.enter:O();break;case Fs.down:O(!0),Mt(V),event.preventDefault();break;case Fs.esc:case Fs.tab:O(!1)}},handleClear:()=>{c.value.clearCheckedNodes(),O(!1)},handleSuggestionClick:e=>{const{checked:t}=e;w.value?c.value.handleCheckChange(e,!t,!1):(!t&&c.value.handleCheckChange(e,!0,!1),O(!1))},handleDelete:()=>{const e=g.value,t=e[e.length-1];l=m.value?0:l+1,t&&l&&(t.hitState?B(t):t.hitState=!0)},handleInput:(e,t)=>{!p.value&&O(!0),(null==t?void 0:t.isComposing)||(e?L():T())}}}});const qd={key:0,ref:"tagWrapper",class:"el-cascader__tags"},Yd={key:0,class:"el-icon-check"},Kd={class:"el-cascader__empty-text"};Wd.render=function(e,t,n,l,a,o){const r=pl("el-input"),i=pl("el-tag"),s=pl("el-cascader-panel"),u=pl("el-scrollbar"),c=pl("el-popper"),p=hl("clickoutside");return Cl(),Al(c,{ref:"popper",visible:e.popperVisible,"onUpdate:visible":t[16]||(t[16]=t=>e.popperVisible=t),trigger:"manual",placement:"bottom-start","popper-class":"el-cascader__dropdown "+e.popperClass,"popper-options":e.popperOptions,transition:"el-zoom-in-top","gpu-acceleration":!1,effect:"light",pure:"",onAfterLeave:e.hideSuggestionPanel},{trigger:en((()=>[Un(Tl("div",{class:["el-cascader",e.realSize&&"el-cascader--"+e.realSize,{"is-disabled":e.isDisabled}],onClick:t[10]||(t[10]=()=>e.togglePopperVisible(!e.readonly||void 0)),onKeydown:t[11]||(t[11]=(...t)=>e.handleKeyDown(...t)),onMouseenter:t[12]||(t[12]=t=>e.inputHover=!0),onMouseleave:t[13]||(t[13]=t=>e.inputHover=!1)},[Tl(r,{ref:"input",modelValue:e.inputValue,"onUpdate:modelValue":t[3]||(t[3]=t=>e.inputValue=t),modelModifiers:{trim:!0},placeholder:e.placeholder,readonly:e.readonly,disabled:e.isDisabled,"validate-event":!1,size:e.realSize,class:{"is-focus":e.popperVisible},onFocus:t[4]||(t[4]=t=>e.$emit("focus",t)),onBlur:t[5]||(t[5]=t=>e.$emit("blur",t)),onInput:e.handleInput},{suffix:en((()=>[e.clearBtnVisible?(Cl(),Al("i",{key:"clear",class:"el-input__icon el-icon-circle-close",onClick:t[1]||(t[1]=co(((...t)=>e.handleClear(...t)),["stop"]))})):(Cl(),Al("i",{key:"arrow-down",class:["el-input__icon","el-icon-arrow-down",e.popperVisible&&"is-reverse"],onClick:t[2]||(t[2]=co((t=>e.togglePopperVisible()),["stop"]))},null,2))])),_:1},8,["modelValue","placeholder","readonly","disabled","size","class","onInput"]),e.multiple?(Cl(),Al("div",qd,[(Cl(!0),Al(gl,null,da(e.presentTags,(t=>(Cl(),Al(i,{key:t.key,type:"info",size:e.tagSize,hit:t.hitState,closable:t.closable,"disable-transitions":"",onClose:n=>e.deleteTag(t)},{default:en((()=>[Tl("span",null,d(t.text),1)])),_:2},1032,["size","hit","closable","onClose"])))),128)),e.filterable&&!e.isDisabled?Un((Cl(),Al("input",{key:0,"onUpdate:modelValue":t[6]||(t[6]=t=>e.searchInputValue=t),type:"text",class:"el-cascader__search-input",placeholder:e.presentText?"":e.placeholder,onInput:t[7]||(t[7]=t=>e.handleInput(e.searchInputValue,t)),onClick:t[8]||(t[8]=co((t=>e.togglePopperVisible(!0)),["stop"])),onKeydown:t[9]||(t[9]=fo(((...t)=>e.handleDelete(...t)),["delete"]))},null,40,["placeholder"])),[[no,e.searchInputValue,void 0,{trim:!0}]]):Pl("v-if",!0)],512)):Pl("v-if",!0)],34),[[p,()=>e.togglePopperVisible(!1)]])])),default:en((()=>[Un(Tl(s,{ref:"panel",modelValue:e.checkedValue,"onUpdate:modelValue":t[14]||(t[14]=t=>e.checkedValue=t),options:e.options,props:e.props,border:!1,"render-label":e.$slots.default,onExpandChange:e.handleExpandChange,onClose:t[15]||(t[15]=t=>e.togglePopperVisible(!1))},null,8,["modelValue","options","props","render-label","onExpandChange"]),[[ho,!e.filtering]]),e.filterable?Un((Cl(),Al(u,{key:0,ref:"suggestionPanel",tag:"ul",class:"el-cascader__suggestion-panel","view-class":"el-cascader__suggestion-list"},{default:en((()=>[e.suggestions.length?(Cl(!0),Al(gl,{key:0},da(e.suggestions,(t=>(Cl(),Al("li",{key:t.uid,class:["el-cascader__suggestion-item",t.checked&&"is-checked"],tabindex:-1,onClick:n=>e.handleSuggestionClick(t)},[Tl("span",null,d(t.text),1),t.checked?(Cl(),Al("i",Yd)):Pl("v-if",!0)],10,["onClick"])))),128)):Zt(e.$slots,"empty",{key:1},(()=>[Tl("li",Kd,d(e.t("el.cascader.noMatch")),1)]))])),_:1},512)),[[ho,e.filtering]]):Pl("v-if",!0)])),_:1},8,["visible","popper-class","popper-options","onAfterLeave"])},Wd.__file="packages/cascader/src/index.vue",Wd.install=e=>{e.component(Wd.name,Wd)};var Ud=Qn({name:"ElCheckboxButton",props:{modelValue:{type:[Boolean,Number,String],default:()=>{}},label:{type:[Boolean,Number,String]},indeterminate:Boolean,disabled:Boolean,checked:Boolean,name:{type:String,default:void 0},trueLabel:{type:[String,Number],default:void 0},falseLabel:{type:[String,Number],default:void 0}},emits:[tu,"change"],setup(e){const{focus:t,isChecked:n,isDisabled:l,size:a,model:o,handleChange:r}=pd(e),{checkboxGroup:i}=dd();return{focus:t,isChecked:n,isDisabled:l,model:o,handleChange:r,activeStyle:ua((()=>{var e,t,n,l,a,o,r,s;return{backgroundColor:null!==(t=null===(e=null==i?void 0:i.fill)||void 0===e?void 0:e.value)&&void 0!==t?t:"",borderColor:null!==(l=null===(n=null==i?void 0:i.fill)||void 0===n?void 0:n.value)&&void 0!==l?l:"",color:null!==(o=null===(a=null==i?void 0:i.textColor)||void 0===a?void 0:a.value)&&void 0!==o?o:"",boxShadow:null!==(s="-1px 0 0 0 "+(null===(r=null==i?void 0:i.fill)||void 0===r?void 0:r.value))&&void 0!==s?s:""}})),size:a}}});Ud.render=function(e,t,n,l,a,o){return Cl(),Al("label",{class:["el-checkbox-button",[e.size?"el-checkbox-button--"+e.size:"",{"is-disabled":e.isDisabled},{"is-checked":e.isChecked},{"is-focus":e.focus}]],role:"checkbox","aria-checked":e.isChecked,"aria-disabled":e.isDisabled},[e.trueLabel||e.falseLabel?Un((Cl(),Al("input",{key:0,"onUpdate:modelValue":t[1]||(t[1]=t=>e.model=t),checked:e.isChecked,class:"el-checkbox-button__original",type:"checkbox",name:e.name,disabled:e.isDisabled,"true-value":e.trueLabel,"false-value":e.falseLabel,onChange:t[2]||(t[2]=(...t)=>e.handleChange(...t)),onFocus:t[3]||(t[3]=t=>e.focus=!0),onBlur:t[4]||(t[4]=t=>e.focus=!1)},null,40,["checked","name","disabled","true-value","false-value"])),[[lo,e.model]]):Un((Cl(),Al("input",{key:1,"onUpdate:modelValue":t[5]||(t[5]=t=>e.model=t),class:"el-checkbox-button__original",type:"checkbox",name:e.name,disabled:e.isDisabled,value:e.label,onChange:t[6]||(t[6]=(...t)=>e.handleChange(...t)),onFocus:t[7]||(t[7]=t=>e.focus=!0),onBlur:t[8]||(t[8]=t=>e.focus=!1)},null,40,["name","disabled","value"])),[[lo,e.model]]),e.$slots.default||e.label?(Cl(),Al("span",{key:2,class:"el-checkbox-button__inner",style:e.isChecked?e.activeStyle:null},[Zt(e.$slots,"default",{},(()=>[Bl(d(e.label),1)]))],4)):Pl("v-if",!0)],10,["aria-checked","aria-disabled"])},Ud.__file="packages/checkbox/src/checkbox-button.vue",Ud.install=e=>{e.component(Ud.name,Ud)};var Gd=Qn({name:"ElCheckboxGroup",props:{modelValue:{type:[Object,Boolean,Array],default:()=>{}},disabled:Boolean,min:{type:Number,default:void 0},max:{type:Number,default:void 0},size:{type:String,validator:au},fill:{type:String,default:void 0},textColor:{type:String,default:void 0}},emits:[tu,"change"],setup(e,t){const{elFormItem:n,elFormItemSize:l,ELEMENT:a}=dd(),o=ua((()=>e.size||l.value||a.size)),r=e=>{t.emit(tu,e),Mt((()=>{t.emit("change",e)}))},i=ua({get:()=>e.modelValue,set(e){r(e)}});Fl("CheckboxGroup",Object.assign(Object.assign({name:"ElCheckboxGroup",modelValue:i},st(e)),{checkboxGroupSize:o,changeEvent:r})),An((()=>e.modelValue),(e=>{var t;null===(t=n.formItemMitt)||void 0===t||t.emit("el.form.change",[e])}))}});const Xd={class:"el-checkbox-group",role:"group","aria-label":"checkbox-group"};Gd.render=function(e,t,n,l,a,o){return Cl(),Al("div",Xd,[Zt(e.$slots,"default")])},Gd.__file="packages/checkbox/src/checkbox-group.vue",Gd.install=e=>{e.component(Gd.name,Gd)};const Jd=Qn({name:"ElCol",props:{span:{type:Number,default:24},offset:{type:Number,default:0},pull:{type:Number,default:0},push:{type:Number,default:0},xs:{type:[Number,Object],default:()=>({})},sm:{type:[Number,Object],default:()=>({})},md:{type:[Number,Object],default:()=>({})},lg:{type:[Number,Object],default:()=>({})},xl:{type:[Number,Object],default:()=>({})}},setup(e,{slots:t}){const n=$l("ElRow",0),l=ua((()=>n?{display:"block",minHeight:"1px",paddingLeft:n/2+"px",paddingRight:n/2+"px"}:{})),a=ua((()=>{const t=[];return["span","offset","pull","push"].forEach((n=>{const l=e[n];"number"==typeof l&&l>=0&&t.push("span"!==n?`el-col-${n}-${e[n]}`:"el-col-"+e[n])})),["xs","sm","md","lg","xl"].forEach((n=>{if("number"==typeof e[n])t.push(`el-col-${n}-${e[n]}`);else if("object"==typeof e[n]){const l=e[n];Object.keys(l).forEach((e=>{t.push("span"!==e?`el-col-${n}-${e}-${l[e]}`:`el-col-${n}-${l[e]}`)}))}})),t}));return()=>{var e;return ca("div",{class:["el-col",a.value],style:l.value},null===(e=t.default)||void 0===e?void 0:e.call(t))}}});Jd.install=e=>{e.component(Jd.name,Jd)};var Zd=Qn({name:"ElCollapse",props:{accordion:Boolean,modelValue:{type:[Array,String,Number],default:()=>[]}},emits:[tu,"change"],setup(e,{emit:t}){const n=tt([].concat(e.modelValue)),l=_o(),a=l=>{n.value=[].concat(l);const a=e.accordion?n.value[0]:n.value;t(tu,a),t("change",a)},o=t=>{if(e.accordion)a(!n.value[0]&&0!==n.value[0]||n.value[0]!==t?t:"");else{let e=n.value.slice(0);const l=e.indexOf(t);l>-1?e.splice(l,1):e.push(t),a(e)}};return An((()=>e.modelValue),(()=>{n.value=[].concat(e.modelValue)})),l.on("item-click",o),xn((()=>{l.all.clear()})),Fl("collapse",{activeNames:n,collapseMitt:l}),{activeNames:n,setActiveNames:a,handleItemClick:o}}});const Qd={class:"el-collapse",role:"tablist","aria-multiselectable":"true"};Zd.render=function(e,t,n,l,a,o){return Cl(),Al("div",Qd,[Zt(e.$slots,"default")])},Zd.__file="packages/collapse/src/collapse.vue",Zd.install=e=>{e.component(Zd.name,Zd)};var ep=Qn({name:"ElCollapseTransition",setup:()=>({on:{beforeEnter(e){Ms(e,"collapse-transition"),e.dataset||(e.dataset={}),e.dataset.oldPaddingTop=e.style.paddingTop,e.dataset.oldPaddingBottom=e.style.paddingBottom,e.style.height="0",e.style.paddingTop=0,e.style.paddingBottom=0},enter(e){e.dataset.oldOverflow=e.style.overflow,0!==e.scrollHeight?(e.style.height=e.scrollHeight+"px",e.style.paddingTop=e.dataset.oldPaddingTop,e.style.paddingBottom=e.dataset.oldPaddingBottom):(e.style.height="",e.style.paddingTop=e.dataset.oldPaddingTop,e.style.paddingBottom=e.dataset.oldPaddingBottom),e.style.overflow="hidden"},afterEnter(e){Os(e,"collapse-transition"),e.style.height="",e.style.overflow=e.dataset.oldOverflow},beforeLeave(e){e.dataset||(e.dataset={}),e.dataset.oldPaddingTop=e.style.paddingTop,e.dataset.oldPaddingBottom=e.style.paddingBottom,e.dataset.oldOverflow=e.style.overflow,e.style.height=e.scrollHeight+"px",e.style.overflow="hidden"},leave(e){0!==e.scrollHeight&&(Ms(e,"collapse-transition"),e.style.transitionProperty="height",e.style.height=0,e.style.paddingTop=0,e.style.paddingBottom=0)},afterLeave(e){Os(e,"collapse-transition"),e.style.height="",e.style.overflow=e.dataset.oldOverflow,e.style.paddingTop=e.dataset.oldPaddingTop,e.style.paddingBottom=e.dataset.oldPaddingBottom}}})});ep.render=function(e,t,n,l,a,o){return Cl(),Al(Pa,pa(e.on),{default:en((()=>[Zt(e.$slots,"default")])),_:3},16)},ep.__file="packages/transition/collapse-transition/index.vue",ep.install=e=>{e.component(ep.name,ep)};var tp=Qn({name:"ElCollapseItem",components:{ElCollapseTransition:ep},props:{title:{type:String,default:""},name:{type:[String,Number],default:()=>cs()},disabled:Boolean},setup(e){const t=$l("collapse"),n=null==t?void 0:t.collapseMitt,l=tt({height:"auto",display:"block"}),a=tt(0),o=tt(!1),r=tt(!1),i=tt(cs());return{isActive:ua((()=>(null==t?void 0:t.activeNames.value.indexOf(e.name))>-1)),contentWrapStyle:l,contentHeight:a,focusing:o,isClick:r,id:i,handleFocus:()=>{setTimeout((()=>{r.value?r.value=!1:o.value=!0}),50)},handleHeaderClick:()=>{e.disabled||(null==n||n.emit("item-click",e.name),o.value=!1,r.value=!0)},handleEnterClick:()=>{null==n||n.emit("item-click",e.name)},collapse:t}}});const np={class:"el-collapse-item__content"};tp.render=function(e,t,n,l,a,o){const r=pl("el-collapse-transition");return Cl(),Al("div",{class:["el-collapse-item",{"is-active":e.isActive,"is-disabled":e.disabled}]},[Tl("div",{role:"tab","aria-expanded":e.isActive,"aria-controls":"el-collapse-content-"+e.id,"aria-describedby":"el-collapse-content-"+e.id},[Tl("div",{id:"el-collapse-head-"+e.id,class:["el-collapse-item__header",{focusing:e.focusing,"is-active":e.isActive}],role:"button",tabindex:e.disabled?-1:0,onClick:t[1]||(t[1]=(...t)=>e.handleHeaderClick(...t)),onKeyup:t[2]||(t[2]=fo(co(((...t)=>e.handleEnterClick(...t)),["stop"]),["space","enter"])),onFocus:t[3]||(t[3]=(...t)=>e.handleFocus(...t)),onBlur:t[4]||(t[4]=t=>e.focusing=!1)},[Zt(e.$slots,"title",{},(()=>[Bl(d(e.title),1)])),Tl("i",{class:["el-collapse-item__arrow el-icon-arrow-right",{"is-active":e.isActive}]},null,2)],42,["id","tabindex"])],8,["aria-expanded","aria-controls","aria-describedby"]),Tl(r,null,{default:en((()=>[Un(Tl("div",{id:"el-collapse-content-"+e.id,class:"el-collapse-item__wrap",role:"tabpanel","aria-hidden":!e.isActive,"aria-labelledby":"el-collapse-head-"+e.id},[Tl("div",np,[Zt(e.$slots,"default")])],8,["id","aria-hidden","aria-labelledby"]),[[ho,e.isActive]])])),_:3})],2)},tp.__file="packages/collapse/src/collapse-item.vue",tp.install=e=>{e.component(tp.name,tp)};const lp=function(e,t,n){return[e,t*n/((e=(2-t)*n)<1?e:2-e)||0,e/2]},ap=function(e,t){var n;"string"==typeof(n=e)&&-1!==n.indexOf(".")&&1===parseFloat(n)&&(e="100%");const l=function(e){return"string"==typeof e&&-1!==e.indexOf("%")}(e);return e=Math.min(t,Math.max(0,parseFloat(e+""))),l&&(e=parseInt(e*t+"",10)/100),Math.abs(e-t)<1e-6?1:e%t/parseFloat(t)},op={10:"A",11:"B",12:"C",13:"D",14:"E",15:"F"},rp={A:10,B:11,C:12,D:13,E:14,F:15},ip=function(e){return 2===e.length?16*(rp[e[0].toUpperCase()]||+e[0])+(rp[e[1].toUpperCase()]||+e[1]):rp[e[1].toUpperCase()]||+e[1]},sp=function(e,t,n){e=ap(e,255),t=ap(t,255),n=ap(n,255);const l=Math.max(e,t,n),a=Math.min(e,t,n);let o;const r=l,i=l-a,s=0===l?0:i/l;if(l===a)o=0;else{switch(l){case e:o=(t-n)/i+(t<n?6:0);break;case t:o=(n-e)/i+2;break;case n:o=(e-t)/i+4}o/=6}return{h:360*o,s:100*s,v:100*r}},up=function(e,t,n){e=6*ap(e,360),t=ap(t,100),n=ap(n,100);const l=Math.floor(e),a=e-l,o=n*(1-t),r=n*(1-a*t),i=n*(1-(1-a)*t),s=l%6,u=[n,r,o,o,i,n][s],c=[i,n,n,r,o,o][s],d=[o,o,i,n,n,r][s];return{r:Math.round(255*u),g:Math.round(255*c),b:Math.round(255*d)}};class cp{constructor(e){this._hue=0,this._saturation=100,this._value=100,this._alpha=100,this.enableAlpha=!1,this.format="hex",this.value="",e=e||{};for(const t in e)e.hasOwnProperty(t)&&(this[t]=e[t]);this.doOnChange()}set(e,t){if(1!==arguments.length||"object"!=typeof e)this["_"+e]=t,this.doOnChange();else for(const t in e)e.hasOwnProperty(t)&&this.set(t,e[t])}get(e){return this["_"+e]}toRgb(){return up(this._hue,this._saturation,this._value)}fromString(e){if(!e)return this._hue=0,this._saturation=100,this._value=100,void this.doOnChange();const t=(e,t,n)=>{this._hue=Math.max(0,Math.min(360,e)),this._saturation=Math.max(0,Math.min(100,t)),this._value=Math.max(0,Math.min(100,n)),this.doOnChange()};if(-1!==e.indexOf("hsl")){const n=e.replace(/hsla|hsl|\(|\)/gm,"").split(/\s|,/g).filter((e=>""!==e)).map(((e,t)=>t>2?parseFloat(e):parseInt(e,10)));if(4===n.length?this._alpha=Math.floor(100*parseFloat(n[3])):3===n.length&&(this._alpha=100),n.length>=3){const{h:e,s:l,v:a}=function(e,t,n){n/=100;let l=t/=100;const a=Math.max(n,.01);return t*=(n*=2)<=1?n:2-n,l*=a<=1?a:2-a,{h:e,s:100*(0===n?2*l/(a+l):2*t/(n+t)),v:(n+t)/2*100}}(n[0],n[1],n[2]);t(e,l,a)}}else if(-1!==e.indexOf("hsv")){const n=e.replace(/hsva|hsv|\(|\)/gm,"").split(/\s|,/g).filter((e=>""!==e)).map(((e,t)=>t>2?parseFloat(e):parseInt(e,10)));4===n.length?this._alpha=Math.floor(100*parseFloat(n[3])):3===n.length&&(this._alpha=100),n.length>=3&&t(n[0],n[1],n[2])}else if(-1!==e.indexOf("rgb")){const n=e.replace(/rgba|rgb|\(|\)/gm,"").split(/\s|,/g).filter((e=>""!==e)).map(((e,t)=>t>2?parseFloat(e):parseInt(e,10)));if(4===n.length?this._alpha=Math.floor(100*parseFloat(n[3])):3===n.length&&(this._alpha=100),n.length>=3){const{h:e,s:l,v:a}=sp(n[0],n[1],n[2]);t(e,l,a)}}else if(-1!==e.indexOf("#")){const n=e.replace("#","").trim();if(!/^(?:[0-9a-fA-F]{3}){1,2}$/.test(n))return;let l,a,o;3===n.length?(l=ip(n[0]+n[0]),a=ip(n[1]+n[1]),o=ip(n[2]+n[2])):6!==n.length&&8!==n.length||(l=ip(n.substring(0,2)),a=ip(n.substring(2,4)),o=ip(n.substring(4,6))),8===n.length?this._alpha=Math.floor(ip(n.substring(6))/255*100):3!==n.length&&6!==n.length||(this._alpha=100);const{h:r,s:i,v:s}=sp(l,a,o);t(r,i,s)}}compare(e){return Math.abs(e._hue-this._hue)<2&&Math.abs(e._saturation-this._saturation)<1&&Math.abs(e._value-this._value)<1&&Math.abs(e._alpha-this._alpha)<1}doOnChange(){const{_hue:e,_saturation:t,_value:n,_alpha:l,format:a}=this;if(this.enableAlpha)switch(a){case"hsl":const a=lp(e,t/100,n/100);this.value=`hsla(${e}, ${Math.round(100*a[1])}%, ${Math.round(100*a[2])}%, ${l/100})`;break;case"hsv":this.value=`hsva(${e}, ${Math.round(t)}%, ${Math.round(n)}%, ${l/100})`;break;default:const{r:o,g:r,b:i}=up(e,t,n);this.value=`rgba(${o}, ${r}, ${i}, ${l/100})`}else switch(a){case"hsl":const l=lp(e,t/100,n/100);this.value=`hsl(${e}, ${Math.round(100*l[1])}%, ${Math.round(100*l[2])}%)`;break;case"hsv":this.value=`hsv(${e}, ${Math.round(t)}%, ${Math.round(n)}%)`;break;case"rgb":const{r:a,g:o,b:r}=up(e,t,n);this.value=`rgb(${a}, ${o}, ${r})`;break;default:this.value=function({r:e,g:t,b:n}){const l=function(e){e=Math.min(Math.round(e),255);const t=Math.floor(e/16),n=e%16;return""+(op[t]||t)+(op[n]||n)};return isNaN(e)||isNaN(t)||isNaN(n)?"":"#"+l(e)+l(t)+l(n)}(up(e,t,n))}}}let dp=!1;const pp=()=>!1;function fp(e,t){if(is)return;const n=function(e){var n;null===(n=t.drag)||void 0===n||n.call(t,e)},l=function(e){var a;Ss(document,"mousemove",n),Ss(document,"mouseup",l),Ss(document,"selectstart",pp),Ss(document,"dragstart",pp),dp=!1,null===(a=t.end)||void 0===a||a.call(t,e)};As(e,"mousedown",(function(e){var a;dp||(As(document,"selectstart",pp),As(document,"dragstart",pp),As(document,"mousemove",n),As(document,"mouseup",l),dp=!0,null===(a=t.start)||void 0===a||a.call(t,e))}))}var hp=Qn({name:"ElSlPanel",props:{color:{type:Object,required:!0}},setup(e){const t=la(),n=tt(0),l=tt(0),a=tt("hsl(0, 100%, 50%)"),o=ua((()=>({hue:e.color.get("hue"),value:e.color.get("value")})));function r(){const o=e.color.get("saturation"),r=e.color.get("value"),i=t.vnode.el;let{clientWidth:s,clientHeight:u}=i;l.value=o*s/100,n.value=(100-r)*u/100,a.value="hsl("+e.color.get("hue")+", 100%, 50%)"}function i(a){const o=t.vnode.el.getBoundingClientRect();let r=a.clientX-o.left,i=a.clientY-o.top;r=Math.max(0,r),r=Math.min(r,o.width),i=Math.max(0,i),i=Math.min(i,o.height),l.value=r,n.value=i,e.color.set({saturation:r/o.width*100,value:100-i/o.height*100})}return An(o,(()=>{r()})),mn((()=>{fp(t.vnode.el,{drag:e=>{i(e)},end:e=>{i(e)}}),r()})),{cursorTop:n,cursorLeft:l,background:a,colorValue:o,handleDrag:i,update:r}}});const vp=Tl("div",{class:"el-color-svpanel__white"},null,-1),mp=Tl("div",{class:"el-color-svpanel__black"},null,-1),gp=Tl("div",null,null,-1);hp.render=function(e,t,n,l,a,o){return Cl(),Al("div",{class:"el-color-svpanel",style:{backgroundColor:e.background}},[vp,mp,Tl("div",{class:"el-color-svpanel__cursor",style:{top:e.cursorTop+"px",left:e.cursorLeft+"px"}},[gp],4)],4)},hp.__file="packages/color-picker/src/components/sv-panel.vue";var bp=Qn({name:"ElColorHueSlider",props:{color:{type:Object,required:!0},vertical:Boolean},setup(e){const t=la(),n=tt(null),l=tt(null),a=tt(0),o=tt(0),r=ua((()=>e.color.get("hue")));function i(l){const a=t.vnode.el.getBoundingClientRect();let o;if(e.vertical){let e=l.clientY-a.top;e=Math.min(e,a.height-n.value.offsetHeight/2),e=Math.max(n.value.offsetHeight/2,e),o=Math.round((e-n.value.offsetHeight/2)/(a.height-n.value.offsetHeight)*360)}else{let e=l.clientX-a.left;e=Math.min(e,a.width-n.value.offsetWidth/2),e=Math.max(n.value.offsetWidth/2,e),o=Math.round((e-n.value.offsetWidth/2)/(a.width-n.value.offsetWidth)*360)}e.color.set("hue",o)}function s(){a.value=function(){const l=t.vnode.el;if(e.vertical)return 0;const a=e.color.get("hue");return l?Math.round(a*(l.offsetWidth-n.value.offsetWidth/2)/360):0}(),o.value=function(){const l=t.vnode.el;if(!e.vertical)return 0;const a=e.color.get("hue");return l?Math.round(a*(l.offsetHeight-n.value.offsetHeight/2)/360):0}()}return An(r,(()=>{s()})),mn((()=>{const e={drag:e=>{i(e)},end:e=>{i(e)}};fp(l.value,e),fp(n.value,e),s()})),{bar:l,thumb:n,thumbLeft:a,thumbTop:o,hueValue:r,handleClick:function(e){e.target!==n.value&&i(e)},update:s}}});bp.render=function(e,t,n,l,a,o){return Cl(),Al("div",{class:["el-color-hue-slider",{"is-vertical":e.vertical}]},[Tl("div",{ref:"bar",class:"el-color-hue-slider__bar",onClick:t[1]||(t[1]=(...t)=>e.handleClick(...t))},null,512),Tl("div",{ref:"thumb",class:"el-color-hue-slider__thumb",style:{left:e.thumbLeft+"px",top:e.thumbTop+"px"}},null,4)],2)},bp.__file="packages/color-picker/src/components/hue-slider.vue";var yp=Qn({name:"ElColorAlphaSlider",props:{color:{type:Object,required:!0},vertical:{type:Boolean,default:!1}},setup(e){const t=la(),n=tt(null),l=tt(null),a=tt(0),o=tt(0),r=tt(null);function i(l){const a=t.vnode.el.getBoundingClientRect();if(e.vertical){let t=l.clientY-a.top;t=Math.max(n.value.offsetHeight/2,t),t=Math.min(t,a.height-n.value.offsetHeight/2),e.color.set("alpha",Math.round((t-n.value.offsetHeight/2)/(a.height-n.value.offsetHeight)*100))}else{let t=l.clientX-a.left;t=Math.max(n.value.offsetWidth/2,t),t=Math.min(t,a.width-n.value.offsetWidth/2),e.color.set("alpha",Math.round((t-n.value.offsetWidth/2)/(a.width-n.value.offsetWidth)*100))}}function s(){a.value=function(){if(e.vertical)return 0;const l=t.vnode.el,a=e.color.get("alpha");return l?Math.round(a*(l.offsetWidth-n.value.offsetWidth/2)/100):0}(),o.value=function(){const l=t.vnode.el;if(!e.vertical)return 0;const a=e.color.get("alpha");return l?Math.round(a*(l.offsetHeight-n.value.offsetHeight/2)/100):0}(),r.value=function(){if(e.color&&e.color.value){const{r:t,g:n,b:l}=e.color.toRgb();return`linear-gradient(to right, rgba(${t}, ${n}, ${l}, 0) 0%, rgba(${t}, ${n}, ${l}, 1) 100%)`}return null}()}return An((()=>e.color.get("alpha")),(()=>{s()})),An((()=>e.color.value),(()=>{s()})),mn((()=>{const e={drag:e=>{i(e)},end:e=>{i(e)}};fp(l.value,e),fp(n.value,e),s()})),{thumb:n,bar:l,thumbLeft:a,thumbTop:o,background:r,handleClick:function(e){e.target!==n.value&&i(e)},update:s}}});yp.render=function(e,t,n,l,a,o){return Cl(),Al("div",{class:["el-color-alpha-slider",{"is-vertical":e.vertical}]},[Tl("div",{ref:"bar",class:"el-color-alpha-slider__bar",style:{background:e.background},onClick:t[1]||(t[1]=(...t)=>e.handleClick(...t))},null,4),Tl("div",{ref:"thumb",class:"el-color-alpha-slider__thumb",style:{left:e.thumbLeft+"px",top:e.thumbTop+"px"}},null,4)],2)},yp.__file="packages/color-picker/src/components/alpha-slider.vue";var xp=Qn({props:{colors:{type:Array,required:!0},color:{type:Object,required:!0}},setup(e){const{currentColor:t}=_p(),n=tt(l(e.colors,e.color));function l(e,t){return e.map((e=>{const n=new cp;return n.enableAlpha=!0,n.format="rgba",n.fromString(e),n.selected=n.value===t.value,n}))}return An(t,(e=>{const t=new cp;t.fromString(e),n.value.forEach((e=>{e.selected=t.compare(e)}))})),Cn((()=>{n.value=l(e.colors,e.color)})),{rgbaColors:n,handleSelect:function(t){e.color.fromString(e.colors[t])}}}});const kp={class:"el-color-predefine"},wp={class:"el-color-predefine__colors"};xp.render=function(e,t,n,l,a,o){return Cl(),Al("div",kp,[Tl("div",wp,[(Cl(!0),Al(gl,null,da(e.rgbaColors,((t,n)=>(Cl(),Al("div",{key:e.colors[n],class:["el-color-predefine__color-selector",{selected:t.selected,"is-alpha":t._alpha<100}],onClick:t=>e.handleSelect(n)},[Tl("div",{style:{"background-color":t.value}},null,4)],10,["onClick"])))),128))])])},xp.__file="packages/color-picker/src/components/predefine.vue";const Cp=Symbol(),_p=()=>$l(Cp);var Ap=Qn({name:"ElColorPicker",components:{ElPopper:Ku,ElInput:cu,SvPanel:hp,HueSlider:bp,AlphaSlider:yp,ElButton:sc,Predefine:xp},directives:{ClickOutside:Xs},props:{modelValue:String,showAlpha:Boolean,colorFormat:String,disabled:Boolean,size:{type:String,validator:au},popperClass:String,predefine:Array},emits:{change:null,"active-change":null,[tu]:null},setup(e,{emit:t}){const n=ms(),l=$l("elForm",{}),a=$l("elFormItem",{}),o=tt(null),r=tt(null),i=tt(null),s=tt(null),u=Ye(new cp({enableAlpha:e.showAlpha,format:e.colorFormat})),c=tt(!1),d=tt(!1),p=tt(""),f=ua((()=>e.modelValue||d.value?function(e,t){if(!(e instanceof cp))throw Error("color should be instance of _color Class");const{r:n,g:l,b:a}=e.toRgb();return t?`rgba(${n}, ${l}, ${a}, ${e.get("alpha")/100})`:`rgb(${n}, ${l}, ${a})`}(u,e.showAlpha):"transparent")),h=ua((()=>e.size||a.size||n.size)),v=ua((()=>e.disabled||l.disabled)),m=ua((()=>e.modelValue||d.value?u.value:""));An((()=>e.modelValue),(e=>{e?e&&e!==u.value&&u.fromString(e):d.value=!1})),An(m,(e=>{p.value=e,t("active-change",e)})),An((()=>u.value),(()=>{e.modelValue||d.value||(d.value=!0)}));const g=ko()((function(e){c.value=e}),100);function b(){Mt((()=>{e.modelValue?u.fromString(e.modelValue):d.value=!1}))}return mn((()=>{e.modelValue&&(u.fromString(e.modelValue),p.value=m.value)})),An(c,(()=>{Mt((()=>{var e,t,n;null===(e=o.value)||void 0===e||e.update(),null===(t=r.value)||void 0===t||t.update(),null===(n=i.value)||void 0===n||n.update()}))})),Fl(Cp,{currentColor:m}),{color:u,colorDisabled:v,colorSize:h,displayedColor:f,showPanelColor:d,showPicker:c,customInput:p,handleConfirm:function(){u.fromString(p.value)},hide:function(){g(!1),b()},handleTrigger:function(){v.value||g(!c.value)},clear:function(){var n;g(!1),t(tu,null),t("change",null),null!==e.modelValue&&(null===(n=a.formItemMitt)||void 0===n||n.emit("el.form.change",null)),b()},confirmValue:function(){var e;const n=u.value;t(tu,n),t("change",n),null===(e=a.formItemMitt)||void 0===e||e.emit("el.form.change",n),g(!1)},t:vc,hue:o,svPanel:r,alpha:i,popper:s}}});const Sp={class:"el-color-dropdown__main-wrapper"},Ep={class:"el-color-dropdown__btns"},Mp={class:"el-color-dropdown__value"},Op={key:0,class:"el-color-picker__mask"},Dp={key:0,class:"el-color-picker__empty el-icon-close"},Tp={class:"el-color-picker__icon el-icon-arrow-down"};Ap.render=function(e,t,n,l,a,o){const r=pl("hue-slider"),i=pl("sv-panel"),s=pl("alpha-slider"),u=pl("predefine"),c=pl("el-input"),p=pl("el-button"),f=pl("el-popper"),h=hl("click-outside");return Cl(),Al(f,{ref:"popper",visible:e.showPicker,"onUpdate:visible":t[3]||(t[3]=t=>e.showPicker=t),effect:"light","manual-mode":"",trigger:"click","show-arrow":!1,offset:0,transition:"el-zoom-in-top","gpu-acceleration":!1,"popper-class":"el-color-picker__panel el-color-dropdown "+e.popperClass,"stop-popper-mouse-event":!1},{default:en((()=>[Un(Tl("div",null,[Tl("div",Sp,[Tl(r,{ref:"hue",class:"hue-slider",color:e.color,vertical:""},null,8,["color"]),Tl(i,{ref:"svPanel",color:e.color},null,8,["color"])]),e.showAlpha?(Cl(),Al(s,{key:0,ref:"alpha",color:e.color},null,8,["color"])):Pl("v-if",!0),e.predefine?(Cl(),Al(u,{key:1,ref:"predefine",color:e.color,colors:e.predefine},null,8,["color","colors"])):Pl("v-if",!0),Tl("div",Ep,[Tl("span",Mp,[Tl(c,{modelValue:e.customInput,"onUpdate:modelValue":t[1]||(t[1]=t=>e.customInput=t),"validate-event":!1,size:"mini",onKeyup:fo(e.handleConfirm,["enter"]),onBlur:e.handleConfirm},null,8,["modelValue","onKeyup","onBlur"])]),Tl(p,{size:"mini",type:"text",class:"el-color-dropdown__link-btn",onClick:e.clear},{default:en((()=>[Bl(d(e.t("el.colorpicker.clear")),1)])),_:1},8,["onClick"]),Tl(p,{plain:"",size:"mini",class:"el-color-dropdown__btn",onClick:e.confirmValue},{default:en((()=>[Bl(d(e.t("el.colorpicker.confirm")),1)])),_:1},8,["onClick"])])],512),[[h,e.hide]])])),trigger:en((()=>[Tl("div",{class:["el-color-picker",e.colorDisabled?"is-disabled":"",e.colorSize?"el-color-picker--"+e.colorSize:""]},[e.colorDisabled?(Cl(),Al("div",Op)):Pl("v-if",!0),Tl("div",{class:"el-color-picker__trigger",onClick:t[2]||(t[2]=(...t)=>e.handleTrigger(...t))},[Tl("span",{class:["el-color-picker__color",{"is-alpha":e.showAlpha}]},[Tl("span",{class:"el-color-picker__color-inner",style:{backgroundColor:e.displayedColor}},null,4),e.modelValue||e.showPanelColor?Pl("v-if",!0):(Cl(),Al("span",Dp))],2),Un(Tl("span",Tp,null,512),[[ho,e.modelValue||e.showPanelColor]])])],2)])),_:1},8,["visible","popper-class"])},Ap.__file="packages/color-picker/src/index.vue",Ap.install=e=>{e.component(Ap.name,Ap)};var Np=Qn({name:"ElContainer",props:{direction:{type:String,default:""}},setup:(e,{slots:t})=>({isVertical:ua((()=>"vertical"===e.direction||"horizontal"!==e.direction&&!(!t||!t.default)&&t.default().some((e=>{const t=e.type.name;return"ElHeader"===t||"ElFooter"===t}))))})});Np.render=function(e,t,n,l,a,o){return Cl(),Al("section",{class:["el-container",{"is-vertical":e.isVertical}]},[Zt(e.$slots,"default")],2)},Np.__file="packages/container/src/container.vue",Np.install=e=>{e.component(Np.name,Np)};var Bp=Qn({props:{date:{type:Object},minDate:{type:Object},maxDate:{type:Object},parsedValue:{type:[Object,Array]},selectionMode:{type:String,default:"day"},showWeekNumber:{type:Boolean,default:!1},disabledDate:{type:Function},cellClassName:{type:Function},rangeState:{type:Object,default:()=>({endDate:null,selecting:!1})}},emits:["changerange","pick","select"],setup(e,t){const n=tt(null),l=tt(null),a=tt([[],[],[],[],[],[]]),o=e.date.$locale().weekStart||7,r=e.date.locale("en").localeData().weekdaysShort().map((e=>e.toLowerCase())),i=ua((()=>o>3?7-o:-o)),s=ua((()=>{const t=e.date.startOf("month");return t.subtract(t.day()||7,"day")})),u=ua((()=>r.concat(r).slice(o,o+7))),c=ua((()=>{const t=e.date.startOf("month"),n=t.day()||7,l=t.daysInMonth(),o=t.subtract(1,"month").daysInMonth(),r=i.value,u=a.value;let c=1;const d="dates"===e.selectionMode?ds(e.parsedValue):[],f=Zr()().startOf("day");for(let t=0;t<6;t++){const a=u[t];e.showWeekNumber&&(a[0]||(a[0]={type:"week",text:s.value.add(7*t+1,"day").week()}));for(let i=0;i<7;i++){let u=a[e.showWeekNumber?i+1:i];u||(u={row:t,column:i,type:"normal",inRange:!1,start:!1,end:!1});const p=7*t+i,h=s.value.add(p-r,"day");u.type="normal";const v=e.rangeState.endDate||e.maxDate||e.rangeState.selecting&&e.minDate;if(u.inRange=e.minDate&&h.isSameOrAfter(e.minDate,"day")&&v&&h.isSameOrBefore(v,"day"),u.start=e.minDate&&h.isSame(e.minDate,"day"),u.end=v&&h.isSame(v,"day"),h.isSame(f,"day")&&(u.type="today"),t>=0&&t<=1){const e=n+r<0?7+n+r:n+r;i+7*t>=e?u.text=c++:(u.text=o-(e-i%7)+1+7*t,u.type="prev-month")}else c<=l?u.text=c++:(u.text=c++-l,u.type="next-month");const m=h.toDate();u.selected=d.find((e=>e.valueOf()===h.valueOf())),u.disabled=e.disabledDate&&e.disabledDate(m),u.customClass=e.cellClassName&&e.cellClassName(m),a[e.showWeekNumber?i+1:i]=u}if("week"===e.selectionMode){const t=e.showWeekNumber?1:0,n=e.showWeekNumber?7:6,l=p(a[t+1]);a[t].inRange=l,a[t].start=l,a[n].inRange=l,a[n].end=l}}return u})),d=(t,n)=>{const l=7*t+(n-(e.showWeekNumber?1:0))-i.value;return s.value.add(l,"day")},p=t=>{if("week"!==e.selectionMode)return!1;let n=e.date.startOf("day");if("prev-month"===t.type&&(n=n.subtract(1,"month")),"next-month"===t.type&&(n=n.add(1,"month")),n=n.date(parseInt(t.text,10)),e.parsedValue&&!Array.isArray(e.parsedValue)){const t=(e.parsedValue.day()-o+7)%7-1;return e.parsedValue.subtract(t,"day").isSame(n,"day")}return!1};return{handleMouseMove:a=>{if(!e.rangeState.selecting)return;let o=a.target;if("SPAN"===o.tagName&&(o=o.parentNode.parentNode),"DIV"===o.tagName&&(o=o.parentNode),"TD"!==o.tagName)return;const r=o.parentNode.rowIndex-1,i=o.cellIndex;c.value[r][i].disabled||r===n.value&&i===l.value||(n.value=r,l.value=i,t.emit("changerange",{selecting:!0,endDate:d(r,i)}))},t:vc,rows:c,isWeekActive:p,getCellClasses:t=>{let n=[];return"normal"!==t.type&&"today"!==t.type||t.disabled?n.push(t.type):(n.push("available"),"today"===t.type&&n.push("today")),"day"!==e.selectionMode||"normal"!==t.type&&"today"!==t.type||!((t,n)=>!!n&&Zr()(n).isSame(e.date.date(Number(t.text)),"day"))(t,e.parsedValue)||n.push("current"),!t.inRange||"normal"!==t.type&&"today"!==t.type&&"week"!==e.selectionMode||(n.push("in-range"),t.start&&n.push("start-date"),t.end&&n.push("end-date")),t.disabled&&n.push("disabled"),t.selected&&n.push("selected"),t.customClass&&n.push(t.customClass),n.join(" ")},WEEKS:u,handleClick:n=>{let l=n.target;if("SPAN"===l.tagName&&(l=l.parentNode.parentNode),"DIV"===l.tagName&&(l=l.parentNode),"TD"!==l.tagName)return;const a=l.parentNode.rowIndex-1,o="week"===e.selectionMode?1:l.cellIndex,r=c.value[a][o];if(r.disabled||"week"===r.type)return;const i=d(a,o);if("range"===e.selectionMode)e.rangeState.selecting?(i>=e.minDate?t.emit("pick",{minDate:e.minDate,maxDate:i}):t.emit("pick",{minDate:i,maxDate:e.minDate}),t.emit("select",!1)):(t.emit("pick",{minDate:i,maxDate:null}),t.emit("select",!0));else if("day"===e.selectionMode)t.emit("pick",i);else if("week"===e.selectionMode){const e=i.week(),n=i.year()+"w"+e;t.emit("pick",{year:i.year(),week:e,value:n,date:i})}else if("dates"===e.selectionMode){const n=r.selected?ds(e.parsedValue).filter((e=>e.valueOf()!==i.valueOf())):ds(e.parsedValue).concat([i]);t.emit("pick",n)}}}}});const Pp={key:0};Bp.render=function(e,t,n,l,a,o){return Cl(),Al("table",{cellspacing:"0",cellpadding:"0",class:["el-date-table",{"is-week-mode":"week"===e.selectionMode}],onClick:t[1]||(t[1]=(...t)=>e.handleClick(...t)),onMousemove:t[2]||(t[2]=(...t)=>e.handleMouseMove(...t))},[Tl("tbody",null,[Tl("tr",null,[e.showWeekNumber?(Cl(),Al("th",Pp,d(e.t("el.datepicker.week")),1)):Pl("v-if",!0),(Cl(!0),Al(gl,null,da(e.WEEKS,((t,n)=>(Cl(),Al("th",{key:n},d(e.t("el.datepicker.weeks."+t)),1)))),128))]),(Cl(!0),Al(gl,null,da(e.rows,((t,n)=>(Cl(),Al("tr",{key:n,class:["el-date-table__row",{current:e.isWeekActive(t[1])}]},[(Cl(!0),Al(gl,null,da(t,((t,n)=>(Cl(),Al("td",{key:n,class:e.getCellClasses(t)},[Tl("div",null,[Tl("span",null,d(t.text),1)])],2)))),128))],2)))),128))])],34)},Bp.__file="packages/date-picker/src/date-picker-com/basic-date-table.vue";var Vp=Qn({props:{disabledDate:{type:Function},selectionMode:{type:String,default:"month"},minDate:{type:Object},maxDate:{type:Object},date:{type:Object},parsedValue:{type:Object},rangeState:{type:Object,default:()=>({endDate:null,selecting:!1})}},emits:["changerange","pick","select"],setup(e,t){const n=tt(e.date.locale("en").localeData().monthsShort().map((e=>e.toLowerCase()))),l=tt([[],[],[]]),a=tt(null),o=tt(null),r=ua((()=>{const t=l.value,n=Zr()().startOf("month");for(let l=0;l<3;l++){const a=t[l];for(let t=0;t<4;t++){let o=a[t];o||(o={row:l,column:t,type:"normal",inRange:!1,start:!1,end:!1}),o.type="normal";const r=4*l+t,i=e.date.startOf("year").month(r),s=e.rangeState.endDate||e.maxDate||e.rangeState.selecting&&e.minDate;o.inRange=e.minDate&&i.isSameOrAfter(e.minDate,"month")&&s&&i.isSameOrBefore(s,"month"),o.start=e.minDate&&i.isSame(e.minDate,"month"),o.end=s&&i.isSame(s,"month"),n.isSame(i)&&(o.type="today"),o.text=r;let u=i.toDate();o.disabled=e.disabledDate&&e.disabledDate(u),a[t]=o}}return t}));return{handleMouseMove:n=>{if(!e.rangeState.selecting)return;let l=n.target;if("A"===l.tagName&&(l=l.parentNode.parentNode),"DIV"===l.tagName&&(l=l.parentNode),"TD"!==l.tagName)return;const i=l.parentNode.rowIndex,s=l.cellIndex;r.value[i][s].disabled||i===a.value&&s===o.value||(a.value=i,o.value=s,t.emit("changerange",{selecting:!0,endDate:e.date.startOf("year").month(4*i+s)}))},handleMonthTableClick:n=>{let l=n.target;if("A"===l.tagName&&(l=l.parentNode.parentNode),"DIV"===l.tagName&&(l=l.parentNode),"TD"!==l.tagName)return;if(Es(l,"disabled"))return;const a=l.cellIndex,o=4*l.parentNode.rowIndex+a,r=e.date.startOf("year").month(o);"range"===e.selectionMode?e.rangeState.selecting?(r>=e.minDate?t.emit("pick",{minDate:e.minDate,maxDate:r}):t.emit("pick",{minDate:r,maxDate:e.minDate}),t.emit("select",!1)):(t.emit("pick",{minDate:r,maxDate:null}),t.emit("select",!0)):t.emit("pick",o)},rows:r,getCellStyle:t=>{const n={},l=e.date.year(),a=new Date,o=t.text;return n.disabled=!!e.disabledDate&&((e,t)=>{const n=Zr()().startOf("month").month(t).year(e),l=n.daysInMonth();return Hc(l).map((e=>n.add(e,"day").toDate()))})(l,o).every(e.disabledDate),n.current=ds(e.parsedValue).findIndex((e=>e.year()===l&&e.month()===o))>=0,n.today=a.getFullYear()===l&&a.getMonth()===o,t.inRange&&(n["in-range"]=!0,t.start&&(n["start-date"]=!0),t.end&&(n["end-date"]=!0)),n},t:vc,months:n}}});const Ip={class:"cell"};Vp.render=function(e,t,n,l,a,o){return Cl(),Al("table",{class:"el-month-table",onClick:t[1]||(t[1]=(...t)=>e.handleMonthTableClick(...t)),onMousemove:t[2]||(t[2]=(...t)=>e.handleMouseMove(...t))},[Tl("tbody",null,[(Cl(!0),Al(gl,null,da(e.rows,((t,n)=>(Cl(),Al("tr",{key:n},[(Cl(!0),Al(gl,null,da(t,((t,n)=>(Cl(),Al("td",{key:n,class:e.getCellStyle(t)},[Tl("div",null,[Tl("a",Ip,d(e.t("el.datepicker.months."+e.months[t.text])),1)])],2)))),128))])))),128))])],32)},Vp.__file="packages/date-picker/src/date-picker-com/basic-month-table.vue";var Lp=Qn({props:{disabledDate:{type:Function},parsedValue:{type:Object},date:{type:Object}},emits:["pick"],setup:(e,t)=>({startYear:ua((()=>10*Math.floor(e.date.year()/10))),getCellStyle:t=>{const n={},l=Zr()();return n.disabled=!!e.disabledDate&&(e=>{const t=Zr()().startOf("year"),n=Zr()(e).isLeapYear()?366:365;return Hc(n).map((e=>t.add(e,"day").toDate()))})(t).every(e.disabledDate),n.current=ds(e.parsedValue).findIndex((e=>e.year()===t))>=0,n.today=l.year()===t,n},handleYearTableClick:e=>{const n=e.target;if("A"===n.tagName){if(Es(n.parentNode,"disabled"))return;const e=n.textContent||n.innerText;t.emit("pick",Number(e))}}})});const zp={class:"cell"},Fp={class:"cell"},$p={class:"cell"},Rp={class:"cell"},jp={class:"cell"},Hp={class:"cell"},Wp={class:"cell"},qp={class:"cell"},Yp={class:"cell"},Kp={class:"cell"},Up=Tl("td",null,null,-1),Gp=Tl("td",null,null,-1);Lp.render=function(e,t,n,l,a,o){return Cl(),Al("table",{class:"el-year-table",onClick:t[1]||(t[1]=(...t)=>e.handleYearTableClick(...t))},[Tl("tbody",null,[Tl("tr",null,[Tl("td",{class:["available",e.getCellStyle(e.startYear+0)]},[Tl("a",zp,d(e.startYear),1)],2),Tl("td",{class:["available",e.getCellStyle(e.startYear+1)]},[Tl("a",Fp,d(e.startYear+1),1)],2),Tl("td",{class:["available",e.getCellStyle(e.startYear+2)]},[Tl("a",$p,d(e.startYear+2),1)],2),Tl("td",{class:["available",e.getCellStyle(e.startYear+3)]},[Tl("a",Rp,d(e.startYear+3),1)],2)]),Tl("tr",null,[Tl("td",{class:["available",e.getCellStyle(e.startYear+4)]},[Tl("a",jp,d(e.startYear+4),1)],2),Tl("td",{class:["available",e.getCellStyle(e.startYear+5)]},[Tl("a",Hp,d(e.startYear+5),1)],2),Tl("td",{class:["available",e.getCellStyle(e.startYear+6)]},[Tl("a",Wp,d(e.startYear+6),1)],2),Tl("td",{class:["available",e.getCellStyle(e.startYear+7)]},[Tl("a",qp,d(e.startYear+7),1)],2)]),Tl("tr",null,[Tl("td",{class:["available",e.getCellStyle(e.startYear+8)]},[Tl("a",Yp,d(e.startYear+8),1)],2),Tl("td",{class:["available",e.getCellStyle(e.startYear+9)]},[Tl("a",Kp,d(e.startYear+9),1)],2),Up,Gp])])])},Lp.__file="packages/date-picker/src/date-picker-com/basic-year-table.vue";var Xp=Qn({components:{DateTable:Bp,ElInput:cu,ElButton:sc,TimePickPanel:Dc,MonthTable:Vp,YearTable:Lp},directives:{clickoutside:Xs},props:{visible:{type:Boolean,default:!1},parsedValue:{type:[Object,Array]},format:{type:String,default:""},type:{type:String,required:!0}},emits:["pick","set-picker-option"],setup(e,t){const n=tt(Zr()()),l=ua((()=>n.value.month())),a=ua((()=>n.value.year())),o=tt([]),r=tt(null),i=tt(null),s=t=>!(o.value.length>0&&(o.value,e.format,0)),u=e=>v.value?e.millisecond(0):M?Zr()(M).year(e.year()).month(e.month()).date(e.date()):e.startOf("day"),c=(e,...n)=>{if(e)if(Array.isArray(e)){const l=e.map(u);t.emit("pick",l,...n)}else t.emit("pick",u(e),...n);else t.emit("pick",e,...n);r.value=null,i.value=null},d=tt("date"),p=ua((()=>{const e=vc("el.datepicker.year");if("year"===d.value){const t=10*Math.floor(a.value/10);return e?t+" "+e+" - "+(t+9)+" "+e:t+" - "+(t+9)}return a.value+" "+e})),f=ua((()=>["week","month","year","dates"].includes(e.type)?e.type:"day"));An((()=>f.value),(e=>{["month","year"].includes(e)?d.value=e:d.value="date"}),{immediate:!0});const h=ua((()=>!!A.length)),v=ua((()=>"datetime"===e.type||"datetimerange"===e.type)),m=ua((()=>v.value||"dates"===f.value)),g=ua((()=>qc(e.format))),b=ua((()=>Wc(e.format))),y=ua((()=>i.value?i.value:e.parsedValue||O?(e.parsedValue||n.value).format(g.value):void 0)),x=ua((()=>r.value?r.value:e.parsedValue||O?(e.parsedValue||n.value).format(b.value):void 0)),k=tt(!1),w=()=>Zr()(O),C=e=>{const l={year:{38:-4,40:4,37:-1,39:1,offset:(e,t)=>e.setFullYear(e.getFullYear()+t)},month:{38:-4,40:4,37:-1,39:1,offset:(e,t)=>e.setMonth(e.getMonth()+t)},week:{38:-1,40:1,37:-1,39:1,offset:(e,t)=>e.setDate(e.getDate()+7*t)},day:{38:-7,40:7,37:-1,39:1,offset:(e,t)=>e.setDate(e.getDate()+t)}},a=n.value.toDate();for(;Math.abs(n.value.diff(a,"year",!0))<1;){const o=l[f.value];if(o.offset(a,o[e]),S&&S(a))continue;const r=Zr()(a);n.value=r,t.emit("pick",r,!0);break}};t.emit("set-picker-option",["isValidValue",e=>e.isValid()&&(!S||!S(e.toDate()))]),t.emit("set-picker-option",["formatToString",t=>"dates"===f.value?t.map((t=>t.format(e.format))):t.format(e.format)]),t.emit("set-picker-option",["parseUserInput",t=>Zr()(t,e.format)]),t.emit("set-picker-option",["handleKeydown",t=>{const{code:l,keyCode:a}=t,o=[Fs.up,Fs.down,Fs.left,Fs.right];e.visible&&!k.value&&(o.includes(l)&&(C(a),t.stopPropagation(),t.preventDefault()),l===Fs.enter&&null===r.value&&null===i.value&&c(n,!1))}]);const _=$l("EP_PICKER_BASE"),{shortcuts:A,disabledDate:S,cellClassName:E,defaultTime:M,defaultValue:O,arrowControl:D}=_.props;return An((()=>e.parsedValue),(e=>{if(e){if("dates"===f.value)return;if(Array.isArray(e))return;n.value=e}else n.value=w()}),{immediate:!0}),{handleTimePick:(t,l,a)=>{const o=e.parsedValue?e.parsedValue.hour(t.hour()).minute(t.minute()).second(t.second()):t;n.value=o,c(n.value,!0),a||(k.value=l)},handleTimePickClose:()=>{k.value=!1},onTimePickerInputFocus:()=>{k.value=!0},timePickerVisible:k,visibleTime:y,visibleDate:x,showTime:v,changeToNow:()=>{const e=Zr()().toDate();S&&S(e)||!s()||(n.value=Zr()(),c(n.value))},onConfirm:()=>{if("dates"===f.value)c(e.parsedValue);else{let t=e.parsedValue;if(!t){const e=Zr()(M),n=w();t=e.year(n.year()).month(n.month()).date(n.date())}n.value=t,c(t)}},footerVisible:m,handleYearPick:e=>{"year"===f.value?(n.value=n.value.startOf("year").year(e),c(n.value)):(n.value=n.value.year(e),d.value="month")},showMonthPicker:()=>{d.value="month"},showYearPicker:()=>{d.value="year"},handleMonthPick:e=>{n.value=n.value.startOf("month").month(e),"month"===f.value?c(n.value):d.value="date"},hasShortcuts:h,shortcuts:A,arrowControl:D,disabledDate:S,cellClassName:E,selectionMode:f,handleShortcutClick:e=>{e.value?c(Zr()(e.value)):e.onClick&&e.onClick(t)},prevYear_:()=>{"year"===d.value?n.value=n.value.subtract(10,"year"):n.value=n.value.subtract(1,"year")},nextYear_:()=>{"year"===d.value?n.value=n.value.add(10,"year"):n.value=n.value.add(1,"year")},prevMonth_:()=>{n.value=n.value.subtract(1,"month")},nextMonth_:()=>{n.value=n.value.add(1,"month")},innerDate:n,t:vc,yearLabel:p,currentView:d,month:l,handleDatePick:t=>{if("day"===f.value){let l=e.parsedValue?e.parsedValue.year(t.year()).month(t.month()).date(t.date()):t;s()||(l=o.value[0][0].year(t.year()).month(t.month()).date(t.date())),n.value=l,c(l,v.value)}else"week"===f.value?c(t.date):"dates"===f.value&&c(t,!0)},handleVisibleTimeChange:e=>{const t=Zr()(e,g.value);t.isValid()&&s()&&(n.value=t.year(n.value.year()).month(n.value.month()).date(n.value.date()),i.value=null,k.value=!1,c(n.value,!0))},handleVisibleDateChange:e=>{const t=Zr()(e,b.value);if(t.isValid()){if(S&&S(t.toDate()))return;n.value=t.hour(n.value.hour()).minute(n.value.minute()).second(n.value.second()),r.value=null,c(n.value,!0)}},timeFormat:g,userInputTime:i,userInputDate:r}}});const Jp={class:"el-picker-panel__body-wrapper"},Zp={key:0,class:"el-picker-panel__sidebar"},Qp={class:"el-picker-panel__body"},ef={key:0,class:"el-date-picker__time-header"},tf={class:"el-date-picker__editor-wrap"},nf={class:"el-date-picker__editor-wrap"},lf={class:"el-picker-panel__content"},af={class:"el-picker-panel__footer"};Xp.render=function(e,t,n,l,a,o){const r=pl("el-input"),i=pl("time-pick-panel"),s=pl("date-table"),u=pl("year-table"),c=pl("month-table"),p=pl("el-button"),f=hl("clickoutside");return Cl(),Al("div",{class:["el-picker-panel el-date-picker",[{"has-sidebar":e.$slots.sidebar||e.hasShortcuts,"has-time":e.showTime}]]},[Tl("div",Jp,[Zt(e.$slots,"sidebar",{class:"el-picker-panel__sidebar"}),e.hasShortcuts?(Cl(),Al("div",Zp,[(Cl(!0),Al(gl,null,da(e.shortcuts,((t,n)=>(Cl(),Al("button",{key:n,type:"button",class:"el-picker-panel__shortcut",onClick:n=>e.handleShortcutClick(t)},d(t.text),9,["onClick"])))),128))])):Pl("v-if",!0),Tl("div",Qp,[e.showTime?(Cl(),Al("div",ef,[Tl("span",tf,[Tl(r,{placeholder:e.t("el.datepicker.selectDate"),"model-value":e.visibleDate,size:"small",onInput:t[1]||(t[1]=t=>e.userInputDate=t),onChange:e.handleVisibleDateChange},null,8,["placeholder","model-value","onChange"])]),Un(Tl("span",nf,[Tl(r,{placeholder:e.t("el.datepicker.selectTime"),"model-value":e.visibleTime,size:"small",onFocus:e.onTimePickerInputFocus,onInput:t[2]||(t[2]=t=>e.userInputTime=t),onChange:e.handleVisibleTimeChange},null,8,["placeholder","model-value","onFocus","onChange"]),Tl(i,{visible:e.timePickerVisible,format:e.timeFormat,"time-arrow-control":e.arrowControl,"parsed-value":e.innerDate,onPick:e.handleTimePick},null,8,["visible","format","time-arrow-control","parsed-value","onPick"])],512),[[f,e.handleTimePickClose]])])):Pl("v-if",!0),Un(Tl("div",{class:["el-date-picker__header",{"el-date-picker__header--bordered":"year"===e.currentView||"month"===e.currentView}]},[Tl("button",{type:"button","aria-label":e.t("el.datepicker.prevYear"),class:"el-picker-panel__icon-btn el-date-picker__prev-btn el-icon-d-arrow-left",onClick:t[3]||(t[3]=(...t)=>e.prevYear_(...t))},null,8,["aria-label"]),Un(Tl("button",{type:"button","aria-label":e.t("el.datepicker.prevMonth"),class:"el-picker-panel__icon-btn el-date-picker__prev-btn el-icon-arrow-left",onClick:t[4]||(t[4]=(...t)=>e.prevMonth_(...t))},null,8,["aria-label"]),[[ho,"date"===e.currentView]]),Tl("span",{role:"button",class:"el-date-picker__header-label",onClick:t[5]||(t[5]=(...t)=>e.showYearPicker(...t))},d(e.yearLabel),1),Un(Tl("span",{role:"button",class:["el-date-picker__header-label",{active:"month"===e.currentView}],onClick:t[6]||(t[6]=(...t)=>e.showMonthPicker(...t))},d(e.t("el.datepicker.month"+(e.month+1))),3),[[ho,"date"===e.currentView]]),Tl("button",{type:"button","aria-label":e.t("el.datepicker.nextYear"),class:"el-picker-panel__icon-btn el-date-picker__next-btn el-icon-d-arrow-right",onClick:t[7]||(t[7]=(...t)=>e.nextYear_(...t))},null,8,["aria-label"]),Un(Tl("button",{type:"button","aria-label":e.t("el.datepicker.nextMonth"),class:"el-picker-panel__icon-btn el-date-picker__next-btn el-icon-arrow-right",onClick:t[8]||(t[8]=(...t)=>e.nextMonth_(...t))},null,8,["aria-label"]),[[ho,"date"===e.currentView]])],2),[[ho,"time"!==e.currentView]]),Tl("div",lf,["date"===e.currentView?(Cl(),Al(s,{key:0,"selection-mode":e.selectionMode,date:e.innerDate,"parsed-value":e.parsedValue,"disabled-date":e.disabledDate,onPick:e.handleDatePick},null,8,["selection-mode","date","parsed-value","disabled-date","onPick"])):Pl("v-if",!0),"year"===e.currentView?(Cl(),Al(u,{key:1,date:e.innerDate,"disabled-date":e.disabledDate,"parsed-value":e.parsedValue,onPick:e.handleYearPick},null,8,["date","disabled-date","parsed-value","onPick"])):Pl("v-if",!0),"month"===e.currentView?(Cl(),Al(c,{key:2,date:e.innerDate,"parsed-value":e.parsedValue,"disabled-date":e.disabledDate,onPick:e.handleMonthPick},null,8,["date","parsed-value","disabled-date","onPick"])):Pl("v-if",!0)])])]),Un(Tl("div",af,[Un(Tl(p,{size:"mini",type:"text",class:"el-picker-panel__link-btn",onClick:e.changeToNow},{default:en((()=>[Bl(d(e.t("el.datepicker.now")),1)])),_:1},8,["onClick"]),[[ho,"dates"!==e.selectionMode]]),Tl(p,{plain:"",size:"mini",class:"el-picker-panel__link-btn",onClick:e.onConfirm},{default:en((()=>[Bl(d(e.t("el.datepicker.confirm")),1)])),_:1},8,["onClick"])],512),[[ho,e.footerVisible&&"date"===e.currentView]])],2)},Xp.__file="packages/date-picker/src/date-picker-com/panel-date-pick.vue";var of=Qn({directives:{clickoutside:Xs},components:{TimePickPanel:Dc,DateTable:Bp,ElInput:cu,ElButton:sc},props:{unlinkPanels:Boolean,parsedValue:{type:Array},type:{type:String,required:!0}},emits:["pick","set-picker-option"],setup(e,t){const n=tt(Zr()()),l=tt(Zr()().add(1,"month")),a=tt(null),o=tt(null),r=tt({min:null,max:null}),i=tt({min:null,max:null}),s=ua((()=>n.value.year()+" "+vc("el.datepicker.year")+" "+vc("el.datepicker.month"+(n.value.month()+1)))),u=ua((()=>l.value.year()+" "+vc("el.datepicker.year")+" "+vc("el.datepicker.month"+(l.value.month()+1)))),c=ua((()=>n.value.year())),d=ua((()=>n.value.month())),p=ua((()=>l.value.year())),f=ua((()=>l.value.month())),h=ua((()=>!!B.length)),v=ua((()=>null!==r.value.min?r.value.min:a.value?a.value.format(x.value):"")),m=ua((()=>null!==r.value.max?r.value.max:o.value||a.value?(o.value||a.value).format(x.value):"")),g=ua((()=>null!==i.value.min?i.value.min:a.value?a.value.format(y.value):"")),b=ua((()=>null!==i.value.max?i.value.max:o.value||a.value?(o.value||a.value).format(y.value):"")),y=ua((()=>qc(I))),x=ua((()=>Wc(I))),k=ua((()=>{const t=(d.value+1)%12,n=d.value+1>=12?1:0;return e.unlinkPanels&&new Date(c.value+n,t)<new Date(p.value,f.value)})),w=ua((()=>e.unlinkPanels&&12*p.value+f.value-(12*c.value+d.value+1)>=12)),C=e=>Array.isArray(e)&&e&&e[0]&&e[1]&&e[0].valueOf()<=e[1].valueOf(),_=tt({endDate:null,selecting:!1}),A=ua((()=>!(a.value&&o.value&&!_.value.selecting&&C([a.value,o.value])))),S=ua((()=>"datetime"===e.type||"datetimerange"===e.type)),E=(e=!1)=>{C([a.value,o.value])&&t.emit("pick",[a.value,o.value],e)},M=(e,t)=>{if(e)return L?Zr()(L[t]||L).year(e.year()).month(e.month()).date(e.date()):e},O=tt(!1),D=tt(!1),T=()=>{let t;if(Array.isArray(z)){const t=Zr()(z[0]);let n=Zr()(z[1]);return e.unlinkPanels||(n=t.add(1,"month")),[t,n]}return t=z?Zr()(z):Zr()(),[t,t.add(1,"month")]};t.emit("set-picker-option",["formatToString",e=>e.map((e=>e.format(I)))]);const N=$l("EP_PICKER_BASE"),{shortcuts:B,disabledDate:P,cellClassName:V,format:I,defaultTime:L,defaultValue:z,arrowControl:F}=N.props;return An((()=>e.parsedValue),(t=>{if(t&&2===t.length)if(a.value=t[0],o.value=t[1],n.value=a.value,e.unlinkPanels&&o.value){const e=a.value.year(),t=a.value.month(),n=o.value.year(),r=o.value.month();l.value=e===n&&t===r?o.value.add(1,"month"):o.value}else l.value=n.value.add(1,"month");else{const e=T();n.value=e[0],l.value=e[1]}}),{immediate:!0}),{shortcuts:B,disabledDate:P,cellClassName:V,minTimePickerVisible:O,maxTimePickerVisible:D,handleMinTimeClose:()=>{O.value=!1},handleMaxTimeClose:()=>{D.value=!1},handleShortcutClick:e=>{e.value?t.emit("pick",[Zr()(e.value[0]),Zr()(e.value[1])]):e.onClick&&e.onClick(t)},rangeState:_,minDate:a,maxDate:o,handleRangePick:(e,t=!0)=>{const n=M(e.minDate,0),l=M(e.maxDate,1);o.value===l&&a.value===n||(o.value=l,a.value=n,t&&!S.value&&E())},onSelect:e=>{_.value.selecting=e,e||(_.value.endDate=null)},handleChangeRange:e=>{_.value=e},btnDisabled:A,enableYearArrow:w,enableMonthArrow:k,rightPrevMonth:()=>{l.value=l.value.subtract(1,"month")},rightPrevYear:()=>{l.value=l.value.subtract(1,"year")},rightNextMonth:()=>{e.unlinkPanels?l.value=l.value.add(1,"month"):(n.value=n.value.add(1,"month"),l.value=n.value.add(1,"month"))},rightNextYear:()=>{e.unlinkPanels?l.value=l.value.add(1,"year"):(n.value=n.value.add(1,"year"),l.value=n.value.add(1,"month"))},leftPrevMonth:()=>{n.value=n.value.subtract(1,"month"),e.unlinkPanels||(l.value=n.value.add(1,"month"))},leftPrevYear:()=>{n.value=n.value.subtract(1,"year"),e.unlinkPanels||(l.value=n.value.add(1,"month"))},leftNextMonth:()=>{n.value=n.value.add(1,"month")},leftNextYear:()=>{n.value=n.value.add(1,"year")},hasShortcuts:h,leftLabel:s,rightLabel:u,leftDate:n,rightDate:l,showTime:S,t:vc,minVisibleDate:v,maxVisibleDate:m,minVisibleTime:g,maxVisibleTime:b,arrowControl:F,handleDateInput:(t,i)=>{r.value[i]=t;const s=Zr()(t,x.value);if(s.isValid()){if(P&&P(s.toDate()))return;"min"===i?(n.value=s,a.value=(a.value||n.value).year(s.year()).month(s.month()).date(s.date()),e.unlinkPanels||(l.value=s.add(1,"month"),o.value=a.value.add(1,"month"))):(l.value=s,o.value=(o.value||l.value).year(s.year()).month(s.month()).date(s.date()),e.unlinkPanels||(n.value=s.subtract(1,"month"),a.value=o.value.subtract(1,"month")))}},handleDateChange:(e,t)=>{r.value[t]=null},handleTimeInput:(e,t)=>{i.value[t]=e;const r=Zr()(e,y.value);r.isValid()&&("min"===t?(O.value=!0,a.value=(a.value||n.value).hour(r.hour()).minute(r.minute()).second(r.second()),o.value&&!o.value.isBefore(a.value)||(o.value=a.value)):(D.value=!0,o.value=(o.value||l.value).hour(r.hour()).minute(r.minute()).second(r.second()),l.value=o.value,o.value&&o.value.isBefore(a.value)&&(a.value=o.value)))},handleTimeChange:(e,t)=>{i.value[t]=null,"min"===t?(n.value=a.value,O.value=!1):(l.value=o.value,D.value=!1)},handleMinTimePick:(e,t,l)=>{i.value.min||(e&&(n.value=e,a.value=(a.value||n.value).hour(e.hour()).minute(e.minute()).second(e.second())),l||(O.value=t),o.value&&!o.value.isBefore(a.value)||(o.value=a.value))},handleMaxTimePick:(e,t,n)=>{i.value.max||(e&&(l.value=e,o.value=(o.value||l.value).hour(e.hour()).minute(e.minute()).second(e.second())),n||(D.value=t),o.value&&o.value.isBefore(a.value)&&(a.value=o.value))},handleClear:()=>{a.value=null,o.value=null,n.value=T()[0],l.value=n.value.add(1,"month"),t.emit("pick",null)},handleConfirm:E,timeFormat:y}}});const rf={class:"el-picker-panel__body-wrapper"},sf={key:0,class:"el-picker-panel__sidebar"},uf={class:"el-picker-panel__body"},cf={key:0,class:"el-date-range-picker__time-header"},df={class:"el-date-range-picker__editors-wrap"},pf={class:"el-date-range-picker__time-picker-wrap"},ff={class:"el-date-range-picker__time-picker-wrap"},hf=Tl("span",{class:"el-icon-arrow-right"},null,-1),vf={class:"el-date-range-picker__editors-wrap is-right"},mf={class:"el-date-range-picker__time-picker-wrap"},gf={class:"el-date-range-picker__time-picker-wrap"},bf={class:"el-picker-panel__content el-date-range-picker__content is-left"},yf={class:"el-date-range-picker__header"},xf={class:"el-picker-panel__content el-date-range-picker__content is-right"},kf={class:"el-date-range-picker__header"},wf={key:0,class:"el-picker-panel__footer"};of.render=function(e,t,n,l,a,o){const r=pl("el-input"),i=pl("time-pick-panel"),s=pl("date-table"),u=pl("el-button"),c=hl("clickoutside");return Cl(),Al("div",{class:["el-picker-panel el-date-range-picker",[{"has-sidebar":e.$slots.sidebar||e.hasShortcuts,"has-time":e.showTime}]]},[Tl("div",rf,[Zt(e.$slots,"sidebar",{class:"el-picker-panel__sidebar"}),e.hasShortcuts?(Cl(),Al("div",sf,[(Cl(!0),Al(gl,null,da(e.shortcuts,((t,n)=>(Cl(),Al("button",{key:n,type:"button",class:"el-picker-panel__shortcut",onClick:n=>e.handleShortcutClick(t)},d(t.text),9,["onClick"])))),128))])):Pl("v-if",!0),Tl("div",uf,[e.showTime?(Cl(),Al("div",cf,[Tl("span",df,[Tl("span",pf,[Tl(r,{size:"small",disabled:e.rangeState.selecting,placeholder:e.t("el.datepicker.startDate"),class:"el-date-range-picker__editor","model-value":e.minVisibleDate,onInput:t[1]||(t[1]=t=>e.handleDateInput(t,"min")),onChange:t[2]||(t[2]=t=>e.handleDateChange(t,"min"))},null,8,["disabled","placeholder","model-value"])]),Un(Tl("span",ff,[Tl(r,{size:"small",class:"el-date-range-picker__editor",disabled:e.rangeState.selecting,placeholder:e.t("el.datepicker.startTime"),"model-value":e.minVisibleTime,onFocus:t[3]||(t[3]=t=>e.minTimePickerVisible=!0),onInput:t[4]||(t[4]=t=>e.handleTimeInput(t,"min")),onChange:t[5]||(t[5]=t=>e.handleTimeChange(t,"min"))},null,8,["disabled","placeholder","model-value"]),Tl(i,{visible:e.minTimePickerVisible,format:e.timeFormat,"datetime-role":"start","time-arrow-control":e.arrowControl,"parsed-value":e.leftDate,onPick:e.handleMinTimePick},null,8,["visible","format","time-arrow-control","parsed-value","onPick"])],512),[[c,e.handleMinTimeClose]])]),hf,Tl("span",vf,[Tl("span",mf,[Tl(r,{size:"small",class:"el-date-range-picker__editor",disabled:e.rangeState.selecting,placeholder:e.t("el.datepicker.endDate"),"model-value":e.maxVisibleDate,readonly:!e.minDate,onInput:t[6]||(t[6]=t=>e.handleDateInput(t,"max")),onChange:t[7]||(t[7]=t=>e.handleDateChange(t,"max"))},null,8,["disabled","placeholder","model-value","readonly"])]),Un(Tl("span",gf,[Tl(r,{size:"small",class:"el-date-range-picker__editor",disabled:e.rangeState.selecting,placeholder:e.t("el.datepicker.endTime"),"model-value":e.maxVisibleTime,readonly:!e.minDate,onFocus:t[8]||(t[8]=t=>e.minDate&&(e.maxTimePickerVisible=!0)),onInput:t[9]||(t[9]=t=>e.handleTimeInput(t,"max")),onChange:t[10]||(t[10]=t=>e.handleTimeChange(t,"max"))},null,8,["disabled","placeholder","model-value","readonly"]),Tl(i,{"datetime-role":"end",visible:e.maxTimePickerVisible,format:e.timeFormat,"time-arrow-control":e.arrowControl,"parsed-value":e.rightDate,onPick:e.handleMaxTimePick},null,8,["visible","format","time-arrow-control","parsed-value","onPick"])],512),[[c,e.handleMaxTimeClose]])])])):Pl("v-if",!0),Tl("div",bf,[Tl("div",yf,[Tl("button",{type:"button",class:"el-picker-panel__icon-btn el-icon-d-arrow-left",onClick:t[11]||(t[11]=(...t)=>e.leftPrevYear(...t))}),Tl("button",{type:"button",class:"el-picker-panel__icon-btn el-icon-arrow-left",onClick:t[12]||(t[12]=(...t)=>e.leftPrevMonth(...t))}),e.unlinkPanels?(Cl(),Al("button",{key:0,type:"button",disabled:!e.enableYearArrow,class:[{"is-disabled":!e.enableYearArrow},"el-picker-panel__icon-btn el-icon-d-arrow-right"],onClick:t[13]||(t[13]=(...t)=>e.leftNextYear(...t))},null,10,["disabled"])):Pl("v-if",!0),e.unlinkPanels?(Cl(),Al("button",{key:1,type:"button",disabled:!e.enableMonthArrow,class:[{"is-disabled":!e.enableMonthArrow},"el-picker-panel__icon-btn el-icon-arrow-right"],onClick:t[14]||(t[14]=(...t)=>e.leftNextMonth(...t))},null,10,["disabled"])):Pl("v-if",!0),Tl("div",null,d(e.leftLabel),1)]),Tl(s,{"selection-mode":"range",date:e.leftDate,"min-date":e.minDate,"max-date":e.maxDate,"range-state":e.rangeState,"disabled-date":e.disabledDate,"cell-class-name":e.cellClassName,onChangerange:e.handleChangeRange,onPick:e.handleRangePick,onSelect:e.onSelect},null,8,["date","min-date","max-date","range-state","disabled-date","cell-class-name","onChangerange","onPick","onSelect"])]),Tl("div",xf,[Tl("div",kf,[e.unlinkPanels?(Cl(),Al("button",{key:0,type:"button",disabled:!e.enableYearArrow,class:[{"is-disabled":!e.enableYearArrow},"el-picker-panel__icon-btn el-icon-d-arrow-left"],onClick:t[15]||(t[15]=(...t)=>e.rightPrevYear(...t))},null,10,["disabled"])):Pl("v-if",!0),e.unlinkPanels?(Cl(),Al("button",{key:1,type:"button",disabled:!e.enableMonthArrow,class:[{"is-disabled":!e.enableMonthArrow},"el-picker-panel__icon-btn el-icon-arrow-left"],onClick:t[16]||(t[16]=(...t)=>e.rightPrevMonth(...t))},null,10,["disabled"])):Pl("v-if",!0),Tl("button",{type:"button",class:"el-picker-panel__icon-btn el-icon-d-arrow-right",onClick:t[17]||(t[17]=(...t)=>e.rightNextYear(...t))}),Tl("button",{type:"button",class:"el-picker-panel__icon-btn el-icon-arrow-right",onClick:t[18]||(t[18]=(...t)=>e.rightNextMonth(...t))}),Tl("div",null,d(e.rightLabel),1)]),Tl(s,{"selection-mode":"range",date:e.rightDate,"min-date":e.minDate,"max-date":e.maxDate,"range-state":e.rangeState,"disabled-date":e.disabledDate,"cell-class-name":e.cellClassName,onChangerange:e.handleChangeRange,onPick:e.handleRangePick,onSelect:e.onSelect},null,8,["date","min-date","max-date","range-state","disabled-date","cell-class-name","onChangerange","onPick","onSelect"])])])]),e.showTime?(Cl(),Al("div",wf,[Tl(u,{size:"mini",type:"text",class:"el-picker-panel__link-btn",onClick:e.handleClear},{default:en((()=>[Bl(d(e.t("el.datepicker.clear")),1)])),_:1},8,["onClick"]),Tl(u,{plain:"",size:"mini",class:"el-picker-panel__link-btn",disabled:e.btnDisabled,onClick:t[19]||(t[19]=t=>e.handleConfirm(!1))},{default:en((()=>[Bl(d(e.t("el.datepicker.confirm")),1)])),_:1},8,["disabled"])])):Pl("v-if",!0)],2)},of.__file="packages/date-picker/src/date-picker-com/panel-date-range.vue";var Cf=Qn({components:{MonthTable:Vp},props:{unlinkPanels:Boolean,parsedValue:{type:Array}},emits:["pick","set-picker-option"],setup(e,t){const n=tt(Zr()()),l=tt(Zr()().add(1,"year")),a=ua((()=>!!v.length)),o=ua((()=>`${n.value.year()} ${vc("el.datepicker.year")}`)),r=ua((()=>`${l.value.year()} ${vc("el.datepicker.year")}`)),i=ua((()=>n.value.year())),s=ua((()=>l.value.year()===n.value.year()?n.value.year()+1:l.value.year())),u=ua((()=>e.unlinkPanels&&s.value>i.value+1)),c=tt(null),d=tt(null),p=tt({endDate:null,selecting:!1}),f=(e=!1)=>{var n;n=[c.value,d.value],Array.isArray(n)&&n&&n[0]&&n[1]&&n[0].valueOf()<=n[1].valueOf()&&t.emit("pick",[c.value,d.value],e)};t.emit("set-picker-option",["formatToString",e=>e.map((e=>e.format(g)))]);const h=$l("EP_PICKER_BASE"),{shortcuts:v,disabledDate:m,format:g,defaultValue:b}=h.props;return An((()=>e.parsedValue),(t=>{if(t&&2===t.length)if(c.value=t[0],d.value=t[1],n.value=c.value,e.unlinkPanels&&d.value){const e=c.value.year(),t=d.value.year();l.value=e===t?d.value.add(1,"year"):d.value}else l.value=n.value.add(1,"year");else{const t=(()=>{let t;if(Array.isArray(b)){const t=Zr()(b[0]);let n=Zr()(b[1]);return e.unlinkPanels||(n=t.add(1,"year")),[t,n]}return t=b?Zr()(b):Zr()(),[t,t.add(1,"year")]})();n.value=t[0],l.value=t[1]}}),{immediate:!0}),{shortcuts:v,disabledDate:m,onSelect:e=>{p.value.selecting=e,e||(p.value.endDate=null)},handleRangePick:(e,t=!0)=>{const n=e.minDate,l=e.maxDate;d.value===l&&c.value===n||(d.value=l,c.value=n,t&&f())},rangeState:p,handleChangeRange:e=>{p.value=e},minDate:c,maxDate:d,enableYearArrow:u,leftLabel:o,rightLabel:r,leftNextYear:()=>{n.value=n.value.add(1,"year")},leftPrevYear:()=>{n.value=n.value.subtract(1,"year"),e.unlinkPanels||(l.value=l.value.subtract(1,"year"))},rightNextYear:()=>{e.unlinkPanels||(n.value=n.value.add(1,"year")),l.value=l.value.add(1,"year")},rightPrevYear:()=>{l.value=l.value.subtract(1,"year")},t:vc,leftDate:n,rightDate:l,hasShortcuts:a,handleShortcutClick:e=>{e.value?t.emit("pick",[Zr()(e.value[0]),Zr()(e.value[1])]):e.onClick&&e.onClick(t)}}}});const _f={class:"el-picker-panel__body-wrapper"},Af={key:0,class:"el-picker-panel__sidebar"},Sf={class:"el-picker-panel__body"},Ef={class:"el-picker-panel__content el-date-range-picker__content is-left"},Mf={class:"el-date-range-picker__header"},Of={class:"el-picker-panel__content el-date-range-picker__content is-right"},Df={class:"el-date-range-picker__header"};Cf.render=function(e,t,n,l,a,o){const r=pl("month-table");return Cl(),Al("div",{class:["el-picker-panel el-date-range-picker",[{"has-sidebar":e.$slots.sidebar||e.hasShortcuts}]]},[Tl("div",_f,[Zt(e.$slots,"sidebar",{class:"el-picker-panel__sidebar"}),e.hasShortcuts?(Cl(),Al("div",Af,[(Cl(!0),Al(gl,null,da(e.shortcuts,((t,n)=>(Cl(),Al("button",{key:n,type:"button",class:"el-picker-panel__shortcut",onClick:n=>e.handleShortcutClick(t)},d(t.text),9,["onClick"])))),128))])):Pl("v-if",!0),Tl("div",Sf,[Tl("div",Ef,[Tl("div",Mf,[Tl("button",{type:"button",class:"el-picker-panel__icon-btn el-icon-d-arrow-left",onClick:t[1]||(t[1]=(...t)=>e.leftPrevYear(...t))}),e.unlinkPanels?(Cl(),Al("button",{key:0,type:"button",disabled:!e.enableYearArrow,class:[{"is-disabled":!e.enableYearArrow},"el-picker-panel__icon-btn el-icon-d-arrow-right"],onClick:t[2]||(t[2]=(...t)=>e.leftNextYear(...t))},null,10,["disabled"])):Pl("v-if",!0),Tl("div",null,d(e.leftLabel),1)]),Tl(r,{"selection-mode":"range",date:e.leftDate,"min-date":e.minDate,"max-date":e.maxDate,"range-state":e.rangeState,"disabled-date":e.disabledDate,onChangerange:e.handleChangeRange,onPick:e.handleRangePick,onSelect:e.onSelect},null,8,["date","min-date","max-date","range-state","disabled-date","onChangerange","onPick","onSelect"])]),Tl("div",Of,[Tl("div",Df,[e.unlinkPanels?(Cl(),Al("button",{key:0,type:"button",disabled:!e.enableYearArrow,class:[{"is-disabled":!e.enableYearArrow},"el-picker-panel__icon-btn el-icon-d-arrow-left"],onClick:t[3]||(t[3]=(...t)=>e.rightPrevYear(...t))},null,10,["disabled"])):Pl("v-if",!0),Tl("button",{type:"button",class:"el-picker-panel__icon-btn el-icon-d-arrow-right",onClick:t[4]||(t[4]=(...t)=>e.rightNextYear(...t))}),Tl("div",null,d(e.rightLabel),1)]),Tl(r,{"selection-mode":"range",date:e.rightDate,"min-date":e.minDate,"max-date":e.maxDate,"range-state":e.rangeState,"disabled-date":e.disabledDate,onChangerange:e.handleChangeRange,onPick:e.handleRangePick,onSelect:e.onSelect},null,8,["date","min-date","max-date","range-state","disabled-date","onChangerange","onPick","onSelect"])])])])],2)},Cf.__file="packages/date-picker/src/date-picker-com/panel-month-range.vue",Zr().extend(hi()),Zr().extend(ei()),Zr().extend(si()),Zr().extend(ni()),Zr().extend(ci()),Zr().extend(pi()),Zr().extend(mi()),Zr().extend(bi());var Tf=Qn({name:"ElDatePicker",install:null,props:Object.assign(Object.assign({},gc),{type:{type:String,default:"date"}}),setup(e,t){const n=mc[e.type]||"YYYY-MM-DD";return()=>ca(xc,Object.assign(Object.assign({format:n},e),{type:e.type,"onUpdate:modelValue":e=>t.emit("update:modelValue",e)}),{default:t=>{return ca("daterange"===(n=e.type)||"datetimerange"===n?of:"monthrange"===n?Cf:Xp,t);var n}})}});Tf.install=e=>{e.component(Tf.name,Tf)};var Nf=Qn({name:"ElOverlay",props:{mask:{type:Boolean,default:!0},overlayClass:{type:String},zIndex:{type:Number}},emits:["click"],setup(e,{slots:t,emit:n}){const l=()=>{n("click")};return()=>e.mask?Tl("div",{class:["el-overlay",e.overlayClass],style:{zIndex:e.zIndex},onClick:l},[Zt(t,"default")],Eu.STYLE|Eu.CLASS|Eu.PROPS,["onClick"]):Zt(t,"default")}});function Bf(e,t,n){const l=tt(!1),a=tt(!1),o=tt(null),r=tt(null),i=tt(null),s=tt(!1),u=tt(e.zIndex||Fu.nextZIndex()),c=tt(null),d=ua((()=>{const t={};return e.fullscreen||(t.marginTop=e.top,e.width&&(t.width=e.width)),t}));function p(){hs(i),hs(r),e.openDelay&&e.openDelay>0?r.value=window.setTimeout((()=>{r.value=null,m()}),e.openDelay):m()}function f(){hs(r),hs(i),e.closeDelay&&e.closeDelay>0?i.value=window.setTimeout((()=>{i.value=null,g()}),e.closeDelay):g()}function h(e){e||(a.value=!0,l.value=!1)}function v(){e.beforeClose?e.beforeClose(h):f()}function m(){is||(l.value=!0)}function g(){l.value=!1}return e.lockScroll&&(e=>{et(e)||zs("[useLockScreen]","You need to pass a ref param to this function");let t=0,n=!1,l="0",a=0;An(e,(e=>{if(e){n=!Es(document.body,"el-popup-parent--hidden"),n&&(l=document.body.style.paddingRight,a=parseInt(Ds(document.body,"paddingRight"),10)),t=Is();const e=document.documentElement.clientHeight<document.body.scrollHeight,o=Ds(document.body,"overflowY");t>0&&(e||"scroll"===o)&&n&&(document.body.style.paddingRight=a+t+"px"),Ms(document.body,"el-popup-parent--hidden")}else n&&(document.body.style.paddingRight=l,Os(document.body,"el-popup-parent--hidden")),n=!0}))})(l),e.closeOnPressEscape&&((e,t)=>{An((()=>t.value),(t=>{t?Ys.push(e):Ys.splice(Ys.findIndex((t=>t===e)),1)}))})({handleClose:v},l),((e,t)=>{let n;An((()=>e.value),(e=>{var l,a;e?(n=document.activeElement,et(t)&&(null===(a=(l=t.value).focus)||void 0===a||a.call(l))):n.focus()}))})(l),An((()=>e.modelValue),(l=>{l?(a.value=!1,s.value=!0,p(),t.emit("open"),u.value=e.zIndex?u.value++:Fu.nextZIndex(),Mt((()=>{n.value&&(n.value.scrollTop=0)}))):(f(),a.value||t.emit("close"))})),mn((()=>{e.modelValue&&(l.value=!0,s.value=!0,p())})),{afterEnter:function(){t.emit("opened")},afterLeave:function(){t.emit("closed"),t.emit(tu,!1),e.destroyOnClose&&(s.value=!1)},handleClose:v,onModalClick:function(){e.closeOnClickModal&&v()},closed:a,dialogRef:o,style:d,rendered:s,modalRef:c,visible:l,zIndex:u}}Nf.__file="packages/overlay/src/index.vue";var Pf=Qn({name:"ElDialog",components:{"el-overlay":Nf},directives:{TrapFocus:Zs},props:{appendToBody:{type:Boolean,default:!1},beforeClose:{type:Function},destroyOnClose:{type:Boolean,default:!1},center:{type:Boolean,default:!1},customClass:{type:String,default:""},closeOnClickModal:{type:Boolean,default:!0},closeOnPressEscape:{type:Boolean,default:!0},fullscreen:{type:Boolean,default:!1},lockScroll:{type:Boolean,default:!0},modal:{type:Boolean,default:!0},showClose:{type:Boolean,default:!0},title:{type:String,default:""},openDelay:{type:Number,default:0},closeDelay:{type:Number,default:0},top:{type:String,default:"15vh"},modelValue:{type:Boolean,required:!0},modalClass:String,width:{type:String,default:"50%",validator:e=>["px","rem","em","vw","%","vmin","vmax"].some((t=>e.endsWith(t)))},zIndex:{type:Number}},emits:["open","opened","close","closed",tu],setup(e,t){const n=tt(null);return Object.assign(Object.assign({},Bf(e,t,n)),{dialogRef:n})}});const Vf={class:"el-dialog__header"},If={class:"el-dialog__title"},Lf=Tl("i",{class:"el-dialog__close el-icon el-icon-close"},null,-1),zf={key:0,class:"el-dialog__body"},Ff={key:1,class:"el-dialog__footer"};Pf.render=function(e,t,n,l,a,o){const r=pl("el-overlay"),i=hl("trap-focus");return Cl(),Al(cl,{to:"body",disabled:!e.appendToBody},[Tl(Pa,{name:"dialog-fade",onAfterEnter:e.afterEnter,onAfterLeave:e.afterLeave},{default:en((()=>[Un(Tl(r,{mask:e.modal,"overlay-class":e.modalClass,"z-index":e.zIndex,onClick:e.onModalClick},{default:en((()=>[Un(Tl("div",{ref:"dialogRef",class:["el-dialog",{"is-fullscreen":e.fullscreen,"el-dialog--center":e.center},e.customClass],"aria-modal":"true",role:"dialog","aria-label":e.title||"dialog",style:e.style,onClick:t[2]||(t[2]=e=>e.stopPropagation())},[Tl("div",Vf,[Zt(e.$slots,"title",{},(()=>[Tl("span",If,d(e.title),1)])),e.showClose?(Cl(),Al("button",{key:0,"aria-label":"close",class:"el-dialog__headerbtn",type:"button",onClick:t[1]||(t[1]=(...t)=>e.handleClose(...t))},[Lf])):Pl("v-if",!0)]),e.rendered?(Cl(),Al("div",zf,[Zt(e.$slots,"default")])):Pl("v-if",!0),e.$slots.footer?(Cl(),Al("div",Ff,[Zt(e.$slots,"footer")])):Pl("v-if",!0)],14,["aria-label"]),[[i]])])),_:3},8,["mask","overlay-class","z-index","onClick"]),[[ho,e.visible]])])),_:1},8,["onAfterEnter","onAfterLeave"])],8,["disabled"])},Pf.__file="packages/dialog/src/index.vue",Pf.install=e=>{e.component(Pf.name,Pf)};var $f=Qn({name:"ElDivider",props:{direction:{type:String,default:"horizontal",validator:e=>-1!==["horizontal","vertical"].indexOf(e)},contentPosition:{type:String,default:"center",validator:e=>-1!==["left","center","right"].indexOf(e)}}});$f.render=function(e,t,n,l,a,o){return Cl(),Al("div",{class:["el-divider","el-divider--"+e.direction]},[e.$slots.default&&"vertical"!==e.direction?(Cl(),Al("div",{key:0,class:["el-divider__text","is-"+e.contentPosition]},[Zt(e.$slots,"default")],2)):Pl("v-if",!0)],2)},$f.__file="packages/divider/src/index.vue",$f.install=e=>{e.component($f.name,$f)};var Rf=Qn({name:"ElDrawer",components:{[Nf.name]:Nf},directives:{TrapFocus:Zs},props:{modelValue:{type:Boolean,required:!0},appendToBody:{type:Boolean,default:!1},beforeClose:Function,customClass:{type:String,default:""},direction:{type:String,default:"rtl",validator:e=>-1!==["ltr","rtl","ttb","btt"].indexOf(e)},showClose:{type:Boolean,default:!0},size:{type:String,default:"30%"},title:{type:String,default:""},closeOnClickModal:{type:Boolean,default:!0},withHeader:{type:Boolean,default:!0},openDelay:{type:Number,default:0},closeDelay:{type:Number,default:0},zIndex:Number,modal:{type:Boolean,default:!0},modalFade:{type:Boolean,default:!0},modalClass:String,lockScroll:{type:Boolean,default:!0},closeOnPressEscape:{type:Boolean,default:!0},destroyOnClose:{type:Boolean,default:!1}},emits:["open","opened","close","closed","update:modelValue"],setup(e,t){const n=tt(null);return Object.assign(Object.assign({},Bf(e,t,n)),{drawerRef:n,isHorizontal:ua((()=>"rtl"===e.direction||"ltr"===e.direction))})}});const jf={key:0,id:"el-drawer__title",class:"el-drawer__header"},Hf=Tl("i",{class:"el-drawer__close el-icon el-icon-close"},null,-1),Wf={key:1,class:"el-drawer__body"};Rf.render=function(e,t,n,l,a,o){const r=pl("el-overlay"),i=hl("trap-focus");return Cl(),Al(cl,{to:"body",disabled:!e.appendToBody},[Tl(Pa,{name:"el-drawer-fade",onAfterEnter:e.afterEnter,onAfterLeave:e.afterLeave},{default:en((()=>[Un(Tl(r,{mask:e.modal,"overlay-class":e.modalClass,"z-index":e.zIndex,onClick:e.onModalClick},{default:en((()=>[Tl("div",{class:["el-drawer__container",{"el-drawer__open":e.visible}],tabindex:"-1",role:"document"},[Un(Tl("div",{ref:"drawerRef","aria-modal":"true","aria-labelledby":"el-drawer__title","aria-label":e.title,class:["el-drawer",[e.direction,e.customClass]],style:e.isHorizontal?"width: "+e.size:"height: "+e.size,role:"dialog",tabindex:"-1",onClick:t[2]||(t[2]=co((()=>{}),["stop"]))},[e.withHeader?(Cl(),Al("header",jf,[Zt(e.$slots,"title",{},(()=>[Tl("span",{role:"heading",tabindex:"-1",title:e.title},d(e.title),9,["title"])])),e.showClose?(Cl(),Al("button",{key:0,"aria-label":"close "+(e.title||"drawer"),class:"el-drawer__close-btn",type:"button",onClick:t[1]||(t[1]=(...t)=>e.handleClose(...t))},[Hf],8,["aria-label"])):Pl("v-if",!0)])):Pl("v-if",!0),e.rendered?(Cl(),Al("section",Wf,[Zt(e.$slots,"default")])):Pl("v-if",!0)],14,["aria-label"]),[[i]])],2)])),_:1},8,["mask","overlay-class","z-index","onClick"]),[[ho,e.visible]])])),_:1},8,["onAfterEnter","onAfterLeave"])],8,["disabled"])},Rf.__file="packages/drawer/src/index.vue",Rf.install=e=>{e.component(Rf.name,Rf)};const qf=()=>{const e=ms(),t=$l("elDropdown",{}),n=ua((()=>null==t?void 0:t.dropdownSize));return{ELEMENT:e,elDropdown:t,_elDropdownSize:n}};var Yf=Qn({name:"ElDropdown",components:{ElButton:sc,ElButtonGroup:dc,ElPopper:Ku},props:{trigger:{type:String,default:"hover"},type:String,size:{type:String,default:""},splitButton:Boolean,hideOnClick:{type:Boolean,default:!0},placement:{type:String,default:"bottom"},showTimeout:{type:Number,default:150},hideTimeout:{type:Number,default:150},tabindex:{type:Number,default:0},effect:{type:String,default:"light"}},emits:["visible-change","click","command"],setup(e,{emit:t}){const n=la(),{ELEMENT:l}=qf(),a=tt(null),o=tt(!1);An((()=>o.value),(e=>{var n,l;e&&(null===(l=null===(n=s.value)||void 0===n?void 0:n.focus)||void 0===l||l.call(n)),e||function(){var e,t;null===(t=null===(e=s.value)||void 0===e?void 0:e.blur)||void 0===t||t.call(e)}(),t("visible-change",e)}));const r=tt(!1);An((()=>r.value),(e=>{const t=s.value;t&&(e?Ms(t,"focusing"):Os(t,"focusing"))}));const i=tt(null),s=ua((()=>{var t,n,l,a;const o=null!==(l=null===(n=null===(t=i.value)||void 0===t?void 0:t.$refs.triggerRef)||void 0===n?void 0:n.children[0])&&void 0!==l?l:{};return e.splitButton?null===(a=o.children)||void 0===a?void 0:a[1]:o}));function u(){var e;(null===(e=s.value)||void 0===e?void 0:e.disabled)||(o.value?d():c())}function c(){var t;(null===(t=s.value)||void 0===t?void 0:t.disabled)||(a.value&&clearTimeout(a.value),a.value=window.setTimeout((()=>{o.value=!0}),"click"===e.trigger?0:e.showTimeout))}function d(){var t;(null===(t=s.value)||void 0===t?void 0:t.disabled)||(p(),e.tabindex>=0&&f(s.value),clearTimeout(a.value),a.value=window.setTimeout((()=>{o.value=!1}),"click"===e.trigger?0:e.hideTimeout))}function p(){var e;null===(e=s.value)||void 0===e||e.setAttribute("tabindex","-1")}function f(e){p(),null==e||e.setAttribute("tabindex","0")}const h=ua((()=>e.size||l.size));return Fl("elDropdown",{instance:n,dropdownSize:h,visible:o,handleClick:u,commandHandler:function(...e){t("command",...e)},show:c,hide:d,trigger:ua((()=>e.trigger)),hideOnClick:ua((()=>e.hideOnClick)),triggerElm:s}),mn((()=>{e.splitButton||(As(s.value,"focus",(()=>{r.value=!0})),As(s.value,"blur",(()=>{r.value=!1})),As(s.value,"click",(()=>{r.value=!1}))),"hover"===e.trigger?(As(s.value,"mouseenter",c),As(s.value,"mouseleave",d)):"click"===e.trigger&&As(s.value,"click",u),Object.assign(n,{handleClick:u,hide:d,resetTabindex:f})})),{visible:o,dropdownSize:h,handlerMainButtonClick:e=>{t("click",e),d()},triggerVnode:i}}});const Kf={class:"el-dropdown"},Uf=Tl("i",{class:"el-dropdown__icon el-icon-arrow-down"},null,-1);Yf.render=function(e,t,n,l,a,o){const r=pl("el-button"),i=pl("el-button-group"),s=pl("el-popper");return Cl(),Al(s,{ref:"triggerVnode",visible:e.visible,"onUpdate:visible":t[1]||(t[1]=t=>e.visible=t),placement:e.placement,effect:e.effect,pure:"","manual-mode":!0,trigger:[e.trigger],"popper-class":"el-dropdown__popper","append-to-body":"",transition:"el-zoom-in-top","gpu-acceleration":!1},{default:en((()=>[Zt(e.$slots,"dropdown")])),trigger:en((()=>[Tl("div",Kf,[e.splitButton?(Cl(),Al(i,{key:1},{default:en((()=>[Tl(r,{size:e.dropdownSize,type:e.type,onClick:e.handlerMainButtonClick},{default:en((()=>[Zt(e.$slots,"default")])),_:3},8,["size","type","onClick"]),Tl(r,{size:e.dropdownSize,type:e.type,class:"el-dropdown__caret-button"},{default:en((()=>[Uf])),_:1},8,["size","type"])])),_:1})):Zt(e.$slots,"default",{key:0})])])),_:1},8,["visible","placement","effect","trigger"])},Yf.__file="packages/dropdown/src/dropdown.vue",Yf.install=e=>{e.component(Yf.name,Yf)};var Gf=Qn({name:"ElDropdownItem",props:{command:{type:[Object,String,Number],default:()=>({})},disabled:Boolean,divided:Boolean,icon:String},setup(e){const{elDropdown:t}=qf(),n=la();return{handleClick:function(l){var a,o;t.hideOnClick.value&&(null===(a=t.handleClick)||void 0===a||a.call(t)),null===(o=t.commandHandler)||void 0===o||o.call(t,e.command,n,l)}}}});Gf.render=function(e,t,n,l,a,o){return Cl(),Al("li",{class:["el-dropdown-menu__item",{"is-disabled":e.disabled,"el-dropdown-menu__item--divided":e.divided}],"aria-disabled":e.disabled,tabindex:e.disabled?null:-1,onClick:t[1]||(t[1]=(...t)=>e.handleClick(...t))},[e.icon?(Cl(),Al("i",{key:0,class:e.icon},null,2)):Pl("v-if",!0),Zt(e.$slots,"default")],10,["aria-disabled","tabindex"])},Gf.__file="packages/dropdown/src/dropdown-item.vue",Gf.install=e=>{e.component(Gf.name,Gf)};var Xf=Qn({name:"ElDropdownMenu",directives:{ClickOutside:Xs},setup(){const{_elDropdownSize:e,elDropdown:t}=qf(),n=e.value;function l(){var e;null===(e=t.hide)||void 0===e||e.call(t)}return mn((()=>{((e,t,n)=>{const l=tt(null),a=tt(null),o=tt(null),r=tt("dropdown-menu-"+cs());function i(){var e;t.setAttribute("tabindex","-1"),null===(e=a.value)||void 0===e||e.forEach((e=>{e.setAttribute("tabindex","-1")}))}function s(e){i(),null==e||e.setAttribute("tabindex","0")}function u(){t.focus()}o.value=null==e?void 0:e.subTree.el,l.value=o.value.querySelectorAll("[tabindex='-1']"),a.value=[].slice.call(l.value),As(t,"keydown",(function(e){const t=e.code;[Fs.up,Fs.down].includes(t)?(i(),s(l.value[0]),l.value[0].focus(),e.preventDefault(),e.stopPropagation()):t===Fs.enter?n.handleClick():[Fs.tab,Fs.esc].includes(t)&&n.hide()})),As(o.value,"keydown",(function(e){const t=e.code,o=e.target,r=a.value.indexOf(o),c=a.value.length-1;let d;[Fs.up,Fs.down].includes(t)?(d=t===Fs.up?0!==r?r-1:0:r<c?r+1:c,i(),s(l.value[d]),l.value[d].focus(),e.preventDefault(),e.stopPropagation()):t===Fs.enter?(u(),o.click(),n.props.hideOnClick&&n.hide()):[Fs.tab,Fs.esc].includes(t)&&(n.hide(),u())}),!0),o.value.setAttribute("id",r.value),t.setAttribute("aria-haspopup","list"),t.setAttribute("aria-controls",r.value),n.props.splitButton||(t.setAttribute("role","button"),t.setAttribute("tabindex",n.props.tabindex),Ms(t,"el-dropdown-selfdefine"))})(la(),t.triggerElm.value,t.instance)})),{size:n,show:function(){var e;null===(e=t.show)||void 0===e||e.call(t)},hide:function(){"click"!==t.trigger.value&&l()},innerHide:l,triggerElm:t.triggerElm}}});Xf.render=function(e,t,n,l,a,o){const r=hl("clickOutside");return Un((Cl(),Al("ul",{class:[[e.size&&"el-dropdown-menu--"+e.size],"el-dropdown-menu"],onMouseenter:t[1]||(t[1]=co(((...t)=>e.show(...t)),["stop"])),onMouseleave:t[2]||(t[2]=co(((...t)=>e.hide(...t)),["stop"]))},[Zt(e.$slots,"default")],34)),[[r,e.innerHide,e.triggerElm]])},Xf.__file="packages/dropdown/src/dropdown-menu.vue",Xf.install=e=>{e.component(Xf.name,Xf)};var Jf=Qn({name:"ElFooter",props:{height:{type:String,default:"60px"}}});Jf.render=function(e,t,n,l,a,o){return Cl(),Al("footer",{class:"el-footer",style:{height:e.height}},[Zt(e.$slots,"default")],4)},Jf.__file="packages/container/src/footer.vue",Jf.install=e=>{e.component(Jf.name,Jf)};var Zf=Qn({name:"ElLabelWrap",props:{isAutoWidth:Boolean,updateAll:Boolean},setup(e,{slots:t}){const n=tt(null),l=$l("elForm"),a=$l("elFormItem"),o=tt(0);An(o,((t,n)=>{e.updateAll&&(l.registerLabelWidth(t,n),a.updateComputedLabelWidth(t))}));const r=(a="update")=>{Mt((()=>{t.default&&e.isAutoWidth&&("update"===a?o.value=(()=>{var e;if(null===(e=n.value)||void 0===e?void 0:e.firstElementChild){const e=window.getComputedStyle(n.value.firstElementChild).width;return Math.ceil(parseFloat(e))}return 0})():"remove"===a&&l.deregisterLabelWidth(o.value))}))},i=()=>r("update");return mn((()=>{xu(n.value.firstElementChild,i),i()})),bn(i),yn((()=>{r("remove"),ku(n.value.firstElementChild,i)})),function(){var a,r;if(!t)return null;if(e.isAutoWidth){const e=l.autoLabelWidth,r={};if(e&&"auto"!==e){const t=parseInt(e,10)-o.value;t&&(r.marginLeft=t+"px")}return ca("div",{ref:n,class:["el-form-item__label-wrap"],style:r},null===(a=t.default)||void 0===a?void 0:a.call(t))}return ca(gl,{ref:n},null===(r=t.default)||void 0===r?void 0:r.call(t))}}}),Qf=Qn({name:"ElFormItem",componentName:"ElFormItem",components:{LabelWrap:Zf},props:{label:String,labelWidth:String,prop:String,required:{type:Boolean,default:void 0},rules:[Object,Array],error:String,validateStatus:String,for:String,inlineMessage:{type:[String,Boolean],default:""},showMessage:{type:Boolean,default:!0},size:{types:String,validator:au}},setup(e){const t=_o(),n=ms(),l=$l("elForm",{}),a=tt(""),o=tt(""),r=tt(!1),i=tt(""),s=la(),u=ua((()=>{let e=s.parent;for(;e&&"ElForm"!==e.type.name;){if("ElFormItem"===e.type.name)return!0;e=e.parent}return!1}));let c;An((()=>e.error),(e=>{o.value=e,a.value=e?"error":""}),{immediate:!0}),An((()=>e.validateStatus),(e=>{a.value=e}));const d=ua((()=>e.for||e.prop)),p=ua((()=>{if("top"===l.labelPosition)return{};const t=e.labelWidth||l.labelWidth;return t?{width:t}:{}})),f=ua((()=>{if("top"===l.labelPosition||l.inline)return{};if(!e.label&&!e.labelWidth&&u.value)return{};const t=e.labelWidth||l.labelWidth,n={};return"auto"===t?"auto"===e.labelWidth?n.marginLeft=i.value:"auto"===l.labelWidth&&(n.marginLeft=l.autoLabelWidth):n.marginLeft=t,n})),h=ua((()=>{const t=l.model;if(!t||!e.prop)return;let n=e.prop;return-1!==n.indexOf(":")&&(n=n.replace(/:/,".")),us(t,n,!0).v})),v=ua((()=>{let e=y(),t=!1;return e&&e.length&&e.every((e=>!e.required||(t=!0,!1))),t})),m=ua((()=>e.size||l.size)),g=ua((()=>m.value||n.size)),b=(t,n=Ui)=>{r.value=!1;const i=x(t);if((!i||0===i.length)&&void 0===e.required)return void n();a.value="validating";const s={};i&&i.length>0&&i.forEach((e=>{delete e.trigger})),s[e.prop]=i;const u=new ji(s),c={};c[e.prop]=h.value,u.validate(c,{firstFields:!0},((t,r)=>{var i;a.value=t?"error":"success",o.value=t?t[0].message:"",n(o.value,r),null===(i=l.emit)||void 0===i||i.call(l,"validate",e.prop,!t,o.value||null)}))},y=()=>{const t=l.rules,n=e.rules,a=void 0!==e.required?{required:!!e.required}:[],o=us(t,e.prop||"",!1),r=t?o.o[e.prop||""]||o.v:[];return[].concat(n||r||[]).concat(a)},x=e=>y().filter((t=>!t.trigger||""===e||(Array.isArray(t.trigger)?t.trigger.indexOf(e)>-1:t.trigger===e))).map((e=>Object.assign({},e))),k=()=>{b("blur")},w=()=>{r.value?r.value=!1:b("change")},C=()=>{(y().length||void 0!==e.required)&&(t.on("el.form.blur",k),t.on("el.form.change",w))},_=Ye(Object.assign(Object.assign({},st(e)),{size:g,validateState:a,removeValidateEvents:()=>{t.off("el.form.blur",k),t.off("el.form.change",w)},addValidateEvents:C,resetField:()=>{a.value="",o.value="";let t=l.model,n=h.value,i=e.prop;-1!==i.indexOf(":")&&(i=i.replace(/:/,"."));let s=us(t,i,!0);r.value=!0,Array.isArray(n)?s.o[s.k]=[].concat(c):s.o[s.k]=c,Mt((()=>{r.value=!1}))},clearValidate:()=>{a.value="",o.value="",r.value=!1},validate:b,formItemMitt:t,updateComputedLabelWidth:e=>{i.value=e?e+"px":""}}));return mn((()=>{var t;if(e.prop){null===(t=l.formMitt)||void 0===t||t.emit("el.form.addField",_);let e=h.value;c=Array.isArray(e)?[...e]:e,C()}})),yn((()=>{var e;null===(e=l.formMitt)||void 0===e||e.emit("el.form.removeField",_)})),Fl("elFormItem",_),{formItemClass:ua((()=>[{"el-form-item--feedback":l.statusIcon,"is-error":"error"===a.value,"is-validating":"validating"===a.value,"is-success":"success"===a.value,"is-required":v.value||e.required,"is-no-asterisk":l.hideRequiredAsterisk},g.value?"el-form-item--"+g.value:""])),shouldShowError:ua((()=>"error"===a.value&&e.showMessage&&l.showMessage)),elForm:l,labelStyle:p,contentStyle:f,validateMessage:o,labelFor:d}}});Qf.render=function(e,t,n,l,a,o){const r=pl("LabelWrap");return Cl(),Al("div",{class:["el-form-item",e.formItemClass]},[Tl(r,{"is-auto-width":"auto"===e.labelStyle.width,"update-all":"auto"===e.elForm.labelWidth},{default:en((()=>[e.label||e.$slots.label?(Cl(),Al("label",{key:0,for:e.labelFor,class:"el-form-item__label",style:e.labelStyle},[Zt(e.$slots,"label",{},(()=>[Bl(d(e.label+e.elForm.labelSuffix),1)]))],12,["for"])):Pl("v-if",!0)])),_:1},8,["is-auto-width","update-all"]),Tl("div",{class:"el-form-item__content",style:e.contentStyle},[Zt(e.$slots,"default"),Tl(Pa,{name:"el-zoom-in-top"},{default:en((()=>[e.shouldShowError?Zt(e.$slots,"error",{key:0,error:e.validateMessage},(()=>[Tl("div",{class:["el-form-item__error",{"el-form-item__error--inline":"boolean"==typeof e.inlineMessage?e.inlineMessage:e.elForm.inlineMessage||!1}]},d(e.validateMessage),3)])):Pl("v-if",!0)])),_:1})],4)],2)},Qf.__file="packages/form/src/form-item.vue",Qf.install=e=>{e.component(Qf.name,Qf)};var eh=Qn({name:"ElHeader",props:{height:{type:String,default:"60px"}}});eh.render=function(e,t,n,l,a,o){return Cl(),Al("header",{class:"el-header",style:{height:e.height}},[Zt(e.$slots,"default")],4)},eh.__file="packages/container/src/header.vue",eh.install=e=>{e.component(eh.name,eh)};var th=Qn({name:"ElIcon",props:{name:{type:String,default:""}}});th.render=function(e,t,n,l,a,o){return Cl(),Al("i",{class:"el-icon-"+e.name},null,2)},th.__file="packages/icon/src/index.vue",th.install=e=>{e.component(th.name,th)};const nh={CONTAIN:{name:"contain",icon:"el-icon-full-screen"},ORIGINAL:{name:"original",icon:"el-icon-c-scale-to-original"}},lh=!is&&window.navigator.userAgent.match(/firefox/i)?"DOMMouseScroll":"mousewheel";var ah=Qn({name:"ElImageViewer",props:{urlList:{type:Array,default:()=>[]},zIndex:{type:Number,default:2e3},onSwitch:{type:Function,default:()=>({})},onClose:{type:Function,default:()=>({})},initialIndex:{type:Number,default:0}},setup(e){let t=null,n=null,l=null;const a=tt(!0),o=tt(e.initialIndex),r=tt(!0),i=tt(null),s=tt(null),u=tt(nh.CONTAIN);let c=tt({scale:1,deg:0,offsetX:0,offsetY:0,enableTransition:!1});const d=ua((()=>{const{urlList:t}=e;return t.length<=1})),p=ua((()=>0===o.value)),f=ua((()=>0===o.value)),h=ua((()=>e.urlList[o.value])),v=ua((()=>{const{scale:e,deg:t,offsetX:n,offsetY:l,enableTransition:a}=c.value,o={transform:`scale(${e}) rotate(${t}deg)`,transition:a?"transform .3s":"","margin-left":n+"px","margin-top":l+"px"};return u.value.name===nh.CONTAIN.name&&(o.maxWidth=o.maxHeight="100%"),o}));function m(){Ss(document,"keydown",t),Ss(document,lh,n),t=null,n=null,e.onClose()}function g(){c.value={scale:1,deg:0,offsetX:0,offsetY:0,enableTransition:!1}}function b(){if(a.value)return;const e=Object.keys(nh),t=Object.values(nh),n=u.value.name,l=(t.findIndex((e=>e.name===n))+1)%e.length;u.value=nh[e[l]],g()}function y(){if(p.value&&!r.value)return;const t=e.urlList.length;o.value=(o.value-1+t)%t}function x(){if(f.value&&!r.value)return;const t=e.urlList.length;o.value=(o.value+1)%t}function k(e,t={}){if(a.value)return;const{zoomRate:n,rotateDeg:l,enableTransition:o}=Object.assign({zoomRate:.2,rotateDeg:90,enableTransition:!0},t);switch(e){case"zoomOut":c.value.scale>.2&&(c.value.scale=parseFloat((c.value.scale-n).toFixed(3)));break;case"zoomIn":c.value.scale=parseFloat((c.value.scale+n).toFixed(3));break;case"clocelise":c.value.deg+=l;break;case"anticlocelise":c.value.deg-=l}c.value.enableTransition=o}return An(h,(()=>{Mt((()=>{s.value.complete||(a.value=!0)}))})),An(o,(t=>{g(),e.onSwitch(t)})),mn((()=>{var e;t=fs((e=>{switch(e.code){case Fs.esc:m();break;case Fs.space:b();break;case Fs.left:y();break;case Fs.up:k("zoomIn");break;case Fs.right:x();break;case Fs.down:k("zoomOut")}})),n=fs((e=>{k((e.wheelDelta?e.wheelDelta:-e.detail)>0?"zoomIn":"zoomOut",{zoomRate:.015,enableTransition:!1})})),As(document,"keydown",t),As(document,lh,n),null===(e=i.value)||void 0===e||e.focus()})),{index:o,wrapper:i,img:s,infinite:!0,loading:!1,isSingle:d,isFirst:p,isLast:f,currentImg:h,imgStyle:v,mode:u,handleActions:k,prev:y,next:x,hide:m,toggleMode:b,handleImgLoad:function(){a.value=!1},handleImgError:function(e){a.value=!1,e.target.alt=vc("el.image.error")},handleMouseDown:function(e){if(a.value||0!==e.button)return;const{offsetX:t,offsetY:n}=c.value,o=e.pageX,r=e.pageY;l=fs((e=>{c.value=Object.assign(Object.assign({},c.value),{offsetX:t+e.pageX-o,offsetY:n+e.pageY-r})})),As(document,"mousemove",l),As(document,"mouseup",(()=>{Ss(document,"mousemove",l)})),e.preventDefault()}}}});const oh=Tl("div",{class:"el-image-viewer__mask"},null,-1),rh=Tl("i",{class:"el-icon-circle-close"},null,-1),ih=Tl("i",{class:"el-icon-arrow-left"},null,-1),sh=Tl("i",{class:"el-icon-arrow-right"},null,-1),uh={class:"el-image-viewer__btn el-image-viewer__actions"},ch={class:"el-image-viewer__actions__inner"},dh=Tl("i",{class:"el-image-viewer__actions__divider"},null,-1),ph=Tl("i",{class:"el-image-viewer__actions__divider"},null,-1),fh={class:"el-image-viewer__canvas"};ah.render=function(e,t,n,l,a,o){return Cl(),Al(Pa,{name:"viewer-fade"},{default:en((()=>[Tl("div",{ref:"wrapper",tabindex:"-1",class:"el-image-viewer__wrapper",style:{"z-index":e.zIndex}},[oh,Pl(" CLOSE "),Tl("span",{class:"el-image-viewer__btn el-image-viewer__close",onClick:t[1]||(t[1]=(...t)=>e.hide(...t))},[rh]),Pl(" ARROW "),e.isSingle?Pl("v-if",!0):(Cl(),Al(gl,{key:0},[Tl("span",{class:["el-image-viewer__btn el-image-viewer__prev",{"is-disabled":!e.infinite&&e.isFirst}],onClick:t[2]||(t[2]=(...t)=>e.prev(...t))},[ih],2),Tl("span",{class:["el-image-viewer__btn el-image-viewer__next",{"is-disabled":!e.infinite&&e.isLast}],onClick:t[3]||(t[3]=(...t)=>e.next(...t))},[sh],2)],64)),Pl(" ACTIONS "),Tl("div",uh,[Tl("div",ch,[Tl("i",{class:"el-icon-zoom-out",onClick:t[4]||(t[4]=t=>e.handleActions("zoomOut"))}),Tl("i",{class:"el-icon-zoom-in",onClick:t[5]||(t[5]=t=>e.handleActions("zoomIn"))}),dh,Tl("i",{class:e.mode.icon,onClick:t[6]||(t[6]=(...t)=>e.toggleMode(...t))},null,2),ph,Tl("i",{class:"el-icon-refresh-left",onClick:t[7]||(t[7]=t=>e.handleActions("anticlocelise"))}),Tl("i",{class:"el-icon-refresh-right",onClick:t[8]||(t[8]=t=>e.handleActions("clocelise"))})])]),Pl(" CANVAS "),Tl("div",fh,[(Cl(!0),Al(gl,null,da(e.urlList,((n,l)=>Un((Cl(),Al("img",{ref:"img",key:n,src:e.currentImg,style:e.imgStyle,class:"el-image-viewer__img",onLoad:t[9]||(t[9]=(...t)=>e.handleImgLoad(...t)),onError:t[10]||(t[10]=(...t)=>e.handleImgError(...t)),onMousedown:t[11]||(t[11]=(...t)=>e.handleMouseDown(...t))},null,44,["src"])),[[ho,l===e.index]]))),128))])],4)])),_:1})},ah.__file="packages/image/src/image-viewer.vue";const hh=()=>void 0!==document.documentElement.style.objectFit,vh="none",mh="contain";let gh="";var bh=Qn({name:"ElImage",components:{ImageViewer:ah},inheritAttrs:!1,props:{src:{type:String,default:""},fit:{type:String,default:""},lazy:{type:Boolean,default:!1},scrollContainer:{type:[String,Object],default:null},previewSrcList:{type:Array,default:()=>[]},zIndex:{type:Number,default:2e3}},emits:["error"],setup(e,{emit:t}){const n=_s(),l=tt(!1),a=tt(!0),o=tt(0),r=tt(0),i=tt(!1),s=tt(null);let u=null,c=null;const d=ua((()=>{const{fit:t}=e;return!is&&t?hh()?{"object-fit":t}:function(e){const t=o.value,n=r.value;if(!s.value)return{};const{clientWidth:l,clientHeight:a}=s.value;if(!(t&&n&&l&&a))return{};const i=t/n<1;switch("scale-down"===e&&(e=t<l&&n<a?vh:mh),e){case vh:return{width:"auto",height:"auto"};case mh:return i?{width:"auto"}:{height:"auto"};case"cover":return i?{height:"auto"}:{width:"auto"};default:return{}}}(t):{}})),p=ua((()=>{const{fit:t}=e;return!is&&!hh()&&"fill"!==t})),f=ua((()=>{const{previewSrcList:t}=e;return Array.isArray(t)&&t.length>0})),h=ua((()=>{const{src:t,previewSrcList:n}=e;let l=0;const a=n.indexOf(t);return a>=0&&(l=a),l})),v=()=>{if(is)return;const t=n.value;a.value=!0,l.value=!1;const i=new Image;i.onload=e=>function(e,t){o.value=t.width,r.value=t.height,a.value=!1,l.value=!1}(0,i),i.onerror=m,Object.keys(t).forEach((e=>{const n=t[e];i.setAttribute(e,n)})),i.src=e.src};function m(e){a.value=!1,l.value=!0,t("error",e)}function g(){((e,t)=>{if(is||!e||!t)return!1;const n=e.getBoundingClientRect();let l;return l=[window,document,document.documentElement,null,void 0].includes(t)?{top:0,right:window.innerWidth,bottom:window.innerHeight,left:0}:t.getBoundingClientRect(),n.top<l.bottom&&n.bottom>l.top&&n.right>l.left&&n.left<l.right})(s.value,u)&&(v(),y())}function b(){if(is)return;const{scrollContainer:t}=e;var n;u=(n=t)&&1===n.nodeType?t:Zi(t)&&""!==t?document.querySelector(t):Ns(s.value),u&&(c=Xr()(g,200),As(u,"scroll",c),setTimeout((()=>g()),100))}function y(){!is&&u&&c&&(Ss(u,"scroll",c),u=null,c=null)}return An((()=>e.src),(()=>{v()})),mn((()=>{e.lazy?Mt(b):v()})),yn((()=>{e.lazy&&y()})),{attrs:n,loading:a,hasLoadError:l,showViewer:i,imgWidth:o,imgHeight:r,imageStyle:d,alignCenter:p,preview:f,imageIndex:h,clickHandler:function(){f.value&&(gh=document.body.style.overflow,document.body.style.overflow="hidden",i.value=!0)},closeViewer:function(){document.body.style.overflow=gh,i.value=!1},container:s,handleError:m,t:vc}}});const yh=Tl("div",{class:"el-image__placeholder"},null,-1),xh={class:"el-image__error"};function kh(e,t,n,l){return new(n||(n=Promise))((function(a,o){function r(e){try{s(l.next(e))}catch(e){o(e)}}function i(e){try{s(l.throw(e))}catch(e){o(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(r,i)}s((l=l.apply(e,t||[])).next())}))}bh.render=function(e,t,n,l,a,o){const r=pl("image-viewer");return Cl(),Al("div",{ref:"container",class:["el-image",e.$attrs.class],style:e.$attrs.style},[e.loading?Zt(e.$slots,"placeholder",{key:0},(()=>[yh])):e.hasLoadError?Zt(e.$slots,"error",{key:1},(()=>[Tl("div",xh,d(e.t("el.image.error")),1)])):(Cl(),Al("img",zl({key:2,class:"el-image__inner"},e.attrs,{src:e.src,style:e.imageStyle,class:{"el-image__inner--center":e.alignCenter,"el-image__preview":e.preview},onClick:t[1]||(t[1]=(...t)=>e.clickHandler(...t))}),null,16,["src"])),e.preview?(Cl(),Al(gl,{key:3},[e.showViewer?(Cl(),Al(r,{key:0,"z-index":e.zIndex,"initial-index":e.imageIndex,"on-close":e.closeViewer,"url-list":e.previewSrcList},null,8,["z-index","initial-index","on-close","url-list"])):Pl("v-if",!0)],64)):Pl("v-if",!0)],6)},bh.__file="packages/image/src/index.vue",bh.install=e=>{e.component(bh.name,bh)};const wh="ElInfiniteScroll",Ch={delay:{type:Number,default:200},distance:{type:Number,default:0},disabled:{type:Boolean,default:!1},immediate:{type:Boolean,default:!0}},_h=(e,t)=>vs(Ch).reduce(((n,[l,a])=>{var o,r;const{type:i,default:s}=a,u=e.getAttribute("infinite-scroll-"+l);let c=null!==(r=null!==(o=t[u])&&void 0!==o?o:u)&&void 0!==r?r:s;return c="false"!==c&&c,c=i(c),n[l]=Number.isNaN(c)?s:c,n}),{}),Ah=e=>{const{observer:t}=e[wh];t&&(t.disconnect(),delete e[wh].observer)},Sh=(e,t)=>{const{container:n,containerEl:l,instance:a,observer:o,lastScrollTop:r}=e[wh],{disabled:i,distance:s}=_h(e,a),{clientHeight:u,scrollHeight:c,scrollTop:d}=l,p=d-r;if(e[wh].lastScrollTop=d,o||i||p<0)return;let f=!1;if(n===e)f=c-(u+d)<=s;else{const{clientTop:t,scrollHeight:n}=e;f=d+u>=((e,t)=>Math.abs(Bs(e)-Bs(t)))(e,l)+t+n-s}f&&t.call(a)};function Eh(e,t){const{containerEl:n,instance:l}=e[wh],{disabled:a}=_h(e,l);a||(n.scrollHeight<=n.clientHeight?t.call(l):Ah(e))}const Mh={mounted(e,t){return kh(this,void 0,void 0,(function*(){const{instance:n,value:l}=t;Ji(l)||zs(wh,"'v-infinite-scroll' binding value must be a function"),yield Mt();const{delay:a,immediate:o}=_h(e,n),r=Ns(e,!0),i=r===window?document.documentElement:r,s=Xr()(Sh.bind(null,e,l),a);if(r){if(e[wh]={instance:n,container:r,containerEl:i,delay:a,cb:l,onScroll:s,lastScrollTop:i.scrollTop},o){const t=new MutationObserver(Xr()(Eh.bind(null,e,l),50));e[wh].observer=t,t.observe(e,{childList:!0,subtree:!0}),Eh(e,l)}r.addEventListener("scroll",s)}}))},unmounted(e){const{container:t,onScroll:n}=e[wh];null==t||t.removeEventListener("scroll",n),Ah(e)},install:e=>{e.directive("InfiniteScroll",Mh)}};var Oh=Qn({name:"ElInputNumber",components:{ElInput:cu},directives:{RepeatClick:Js},props:{step:{type:Number,default:1},stepStrictly:{type:Boolean,default:!1},max:{type:Number,default:1/0},min:{type:Number,default:-1/0},modelValue:{type:Number,default:0},disabled:{type:Boolean,default:!1},size:{type:String,validator:au},controls:{type:Boolean,default:!0},controlsPosition:{type:String,default:""},name:String,label:String,placeholder:String,precision:{type:Number,validator:e=>e>=0&&e===parseInt(e+"",10)}},emits:["update:modelValue","change","input","blur","focus"],setup(e,{emit:t}){const n=ms(),l=$l("elForm",{}),a=$l("elFormItem",{}),o=tt(null),r=Ye({currentValue:0,userInput:null}),i=ua((()=>g(e.modelValue)<e.min)),s=ua((()=>m(e.modelValue)>e.max)),u=ua((()=>{const t=v(e.step);return void 0!==e.precision?(t>e.precision&&console.warn("[Element Warn][InputNumber]precision should not be less than the decimal places of step"),e.precision):Math.max(v(e.modelValue),t)})),c=ua((()=>e.controls&&"right"===e.controlsPosition)),d=ua((()=>e.size||a.size||n.size)),p=ua((()=>e.disabled||l.disabled)),f=ua((()=>{if(null!==r.userInput)return r.userInput;let t=r.currentValue;return"number"==typeof t&&void 0!==e.precision&&(t=t.toFixed(e.precision)),t})),h=(e,t)=>(void 0===t&&(t=u.value),parseFloat(Math.round(e*Math.pow(10,t))/Math.pow(10,t)+"")),v=e=>{if(void 0===e)return 0;const t=e.toString(),n=t.indexOf(".");let l=0;return-1!==n&&(l=t.length-n-1),l},m=t=>{if("number"!=typeof t&&void 0!==t)return r.currentValue;const n=Math.pow(10,u.value);return h((n*t+n*e.step)/n)},g=t=>{if("number"!=typeof t&&void 0!==t)return r.currentValue;const n=Math.pow(10,u.value);return h((n*t-n*e.step)/n)},b=n=>{const l=r.currentValue;"number"==typeof n&&void 0!==e.precision&&(n=h(n,e.precision)),n>=e.max&&(n=e.max),n<=e.min&&(n=e.min),l!==n&&(r.userInput=null,t("update:modelValue",n),t("input",n),t("change",n,l),r.currentValue=n)};return An((()=>e.modelValue),(t=>{let n=void 0===t?t:Number(t);if(void 0!==n){if(isNaN(n))return;if(e.stepStrictly){const t=v(e.step),l=Math.pow(10,t);n=Math.round(n/e.step)*l*e.step/l}void 0!==e.precision&&(n=h(n,e.precision))}n>=e.max&&(n=e.max),n<=e.min&&(n=e.min),r.currentValue=n,r.userInput=null}),{immediate:!0}),mn((()=>{let t=o.value.input;t.setAttribute("role","spinbutton"),t.setAttribute("aria-valuemax",e.max),t.setAttribute("aria-valuemin",e.min),t.setAttribute("aria-valuenow",r.currentValue),t.setAttribute("aria-disabled",p.value)})),bn((()=>{o.value.input.setAttribute("aria-valuenow",r.currentValue)})),{input:o,displayValue:f,handleInput:e=>r.userInput=e,handleInputChange:e=>{const t=""===e?void 0:Number(e);isNaN(t)&&""!==e||b(t),r.userInput=null},controlsAtRight:c,decrease:()=>{if(p.value||i.value)return;const t=e.modelValue||0,n=g(t);b(n)},increase:()=>{if(p.value||s.value)return;const t=e.modelValue||0,n=m(t);b(n)},inputNumberSize:d,inputNumberDisabled:p,maxDisabled:s,minDisabled:i}}});Oh.render=function(e,t,n,l,a,o){const r=pl("el-input"),i=hl("repeat-click");return Cl(),Al("div",{class:["el-input-number",e.inputNumberSize?"el-input-number--"+e.inputNumberSize:"",{"is-disabled":e.inputNumberDisabled},{"is-without-controls":!e.controls},{"is-controls-right":e.controlsAtRight}],onDragstart:t[5]||(t[5]=co((()=>{}),["prevent"]))},[e.controls?Un((Cl(),Al("span",{key:0,class:["el-input-number__decrease",{"is-disabled":e.minDisabled}],role:"button",onKeydown:t[1]||(t[1]=fo(((...t)=>e.decrease(...t)),["enter"]))},[Tl("i",{class:"el-icon-"+(e.controlsAtRight?"arrow-down":"minus")},null,2)],34)),[[i,e.decrease]]):Pl("v-if",!0),e.controls?Un((Cl(),Al("span",{key:1,class:["el-input-number__increase",{"is-disabled":e.maxDisabled}],role:"button",onKeydown:t[2]||(t[2]=fo(((...t)=>e.increase(...t)),["enter"]))},[Tl("i",{class:"el-icon-"+(e.controlsAtRight?"arrow-up":"plus")},null,2)],34)),[[i,e.increase]]):Pl("v-if",!0),Tl(r,{ref:"input","model-value":e.displayValue,placeholder:e.placeholder,disabled:e.inputNumberDisabled,size:e.inputNumberSize,max:e.max,min:e.min,name:e.name,label:e.label,onKeydown:[fo(co(e.increase,["prevent"]),["up"]),fo(co(e.decrease,["prevent"]),["down"])],onBlur:t[3]||(t[3]=t=>e.$emit("blur",t)),onFocus:t[4]||(t[4]=t=>e.$emit("focus",t)),onInput:e.handleInput,onChange:e.handleInputChange},null,8,["model-value","placeholder","disabled","size","max","min","name","label","onKeydown","onInput","onChange"])],34)},Oh.__file="packages/input-number/src/index.vue",Oh.install=e=>{e.component(Oh.name,Oh)};var Dh=Qn({name:"ElLink",props:{type:{type:String,default:"default",validator:e=>["default","primary","success","warning","info","danger"].includes(e)},underline:{type:Boolean,default:!0},disabled:{type:Boolean,default:!1},href:{type:String,default:""},icon:{type:String,default:""}},emits:["click"],setup:(e,{emit:t})=>({handleClick:function(n){e.disabled||t("click",n)}})});const Th={key:1,class:"el-link--inner"};Dh.render=function(e,t,n,l,a,o){return Cl(),Al("a",{class:["el-link",e.type?"el-link--"+e.type:"",e.disabled&&"is-disabled",e.underline&&!e.disabled&&"is-underline"],href:e.disabled?null:e.href,onClick:t[1]||(t[1]=(...t)=>e.handleClick(...t))},[e.icon?(Cl(),Al("i",{key:0,class:e.icon},null,2)):Pl("v-if",!0),e.$slots.default?(Cl(),Al("span",Th,[Zt(e.$slots,"default")])):Pl("v-if",!0),e.$slots.icon?Zt(e.$slots,"icon",{key:2}):Pl("v-if",!0)],10,["href"])},Dh.__file="packages/link/src/index.vue",Dh.install=e=>{e.component(Dh.name,Dh)};const Nh={parent:null,background:"",spinner:!1,text:null,fullscreen:!0,body:!1,lock:!1,customClass:""},Bh={fullscreenLoading:null},Ph=(e,t,n)=>{"absolute"!==n.originalPosition.value&&"fixed"!==n.originalPosition.value?Ms(t,"el-loading-parent--relative"):Os(t,"el-loading-parent--relative"),e.fullscreen&&e.lock?Ms(t,"el-loading-parent--hidden"):Os(t,"el-loading-parent--hidden")},Vh=function(e={}){if(is)return;"string"==typeof(e=Object.assign(Object.assign({},Nh),e)).target&&(e.target=document.querySelector(e.target)),e.target=e.target||document.body,e.target!==document.body?e.fullscreen=!1:e.body=!0,e.fullscreen&&Bh.fullscreenLoading&&Bh.fullscreenLoading.close();const t=e.body?document.body:e.target;e.parent=t;const n=function({options:e,globalLoadingOption:t}){let n=null,l=null;const a=tt(!1),o=Ye(Object.assign(Object.assign({},e),{originalPosition:"",originalOverflow:"",visible:!e.hasOwnProperty("visible")||e.visible}));function r(){const e=o.parent;e.vLoadingAddClassList||(Os(e,"el-loading-parent--relative"),Os(e,"el-loading-parent--hidden")),n.el&&n.el.parentNode&&n.el.parentNode.removeChild(n.el)}const i=Object.assign(Object.assign({},st(o)),{setText:function(e){o.text=e},close:function(){o.parent.vLoadingAddClassList=null,o.fullscreen&&(t.fullscreenLoading=void 0),a.value=!0,clearTimeout(l),l=window.setTimeout((()=>{a.value&&(a.value=!1,r())}),400),o.visible=!1},handleAfterLeave:function(){a.value&&(a.value=!1,r())}});return n=Tl({name:"ElLoading",setup:()=>i,render(){const e=ca("svg",{class:"circular",viewBox:"25 25 50 50"},[ca("circle",{class:"path",cx:"50",cy:"50",r:"20",fill:"none"})]),t=ca("i",{class:this.spinner}),n=ca("p",{class:"el-loading-text"},[this.text]);return ca(Pa,{name:"el-loading-fade",onAfterLeave:this.handleAfterLeave},{default:()=>ca("div",{style:{backgroundColor:this.background||"",display:this.visible?"inherit":"none"},class:["el-loading-mask",this.customClass,this.fullscreen?"is-fullscreen":""]},[ca("div",{class:"el-loading-spinner"},[this.spinner?t:e,this.text?n:null])])})}}),yo(n,document.createElement("div")),Object.assign(Object.assign({},i),{vm:n,get $el(){return n.el}})}({options:e,globalLoadingOption:Bh});return((e,t,n)=>{const l={};e.fullscreen?(n.originalPosition.value=Ds(document.body,"position"),n.originalOverflow.value=Ds(document.body,"overflow"),l.zIndex=String(Fu.nextZIndex())):e.body?(n.originalPosition.value=Ds(document.body,"position"),["top","left"].forEach((t=>{const n="top"===t?"scrollTop":"scrollLeft";l[t]=e.target.getBoundingClientRect()[t]+document.body[n]+document.documentElement[n]-parseInt(Ds(document.body,"margin-"+t),10)+"px"})),["height","width"].forEach((t=>{l[t]=e.target.getBoundingClientRect()[t]+"px"}))):n.originalPosition.value=Ds(t,"position"),Object.keys(l).forEach((e=>{n.$el.style[e]=l[e]}))})(e,t,n),Ph(e,t,n),e.parent.vLoadingAddClassList=()=>{Ph(e,t,n)},t.appendChild(n.$el),e.fullscreen&&(Bh.fullscreenLoading=n),n},Ih={mounted(e,t){const n=e.getAttribute("element-loading-text"),l=e.getAttribute("element-loading-spinner"),a=e.getAttribute("element-loading-background"),o=e.getAttribute("element-loading-custom-class"),r=t.instance,i=Vh({text:r&&r[n]||n,spinner:r&&r[l]||l,background:r&&r[a]||a,customClass:r&&r[o]||o,fullscreen:!!t.modifiers.fullscreen,target:t.modifiers.fullscreen?null:e,body:!!t.modifiers.body,visible:!!t.value,lock:!!t.modifiers.lock});e.instance=i},updated(e,t){const n=e.instance;n&&(n.setText(e.getAttribute("element-loading-text")),t.oldValue!==t.value&&(t.value&&!n.visible.value?n.visible.value=!0:n.visible.value=!1))},unmounted(e){var t;null===(t=null==e?void 0:e.instance)||void 0===t||t.close()}};var Lh={install(e){e.directive("loading",Ih),e.config.globalProperties.$loading=Vh},directive:Ih,service:Vh},zh=Qn({name:"ElMain"});const Fh={class:"el-main"};zh.render=function(e,t,n,l,a,o){return Cl(),Al("main",Fh,[Zt(e.$slots,"default")])},zh.__file="packages/container/src/main.vue",zh.install=e=>{e.component(zh.name,zh)};class $h{constructor(e,t){this.parent=e,this.domNode=t,this.subIndex=0,this.subIndex=0,this.init()}init(){this.subMenuItems=this.domNode.querySelectorAll("li"),this.addListeners()}gotoSubIndex(e){e===this.subMenuItems.length?e=0:e<0&&(e=this.subMenuItems.length-1),this.subMenuItems[e].focus(),this.subIndex=e}addListeners(){const e=this.parent.domNode;Array.prototype.forEach.call(this.subMenuItems,(t=>{t.addEventListener("keydown",(t=>{let n=!1;switch(t.code){case Fs.down:this.gotoSubIndex(this.subIndex+1),n=!0;break;case Fs.up:this.gotoSubIndex(this.subIndex-1),n=!0;break;case Fs.tab:Ws(e,"mouseleave");break;case Fs.enter:case Fs.space:n=!0,t.currentTarget.click()}return n&&(t.preventDefault(),t.stopPropagation()),!1}))}))}}class Rh{constructor(e){this.domNode=e,this.submenu=null,this.submenu=null,this.init()}init(){this.domNode.setAttribute("tabindex","0");const e=this.domNode.querySelector(".el-menu");e&&(this.submenu=new $h(this,e)),this.addListeners()}addListeners(){this.domNode.addEventListener("keydown",(e=>{let t=!1;switch(e.code){case Fs.down:Ws(e.currentTarget,"mouseenter"),this.submenu&&this.submenu.gotoSubIndex(0),t=!0;break;case Fs.up:Ws(e.currentTarget,"mouseenter"),this.submenu&&this.submenu.gotoSubIndex(this.submenu.subMenuItems.length-1),t=!0;break;case Fs.tab:Ws(e.currentTarget,"mouseleave");break;case Fs.enter:case Fs.space:t=!0,e.currentTarget.click()}t&&e.preventDefault()}))}}class jh{constructor(e){this.domNode=e,this.init()}init(){const e=this.domNode.childNodes;[].filter.call(e,(e=>1===e.nodeType)).forEach((e=>{new Rh(e)}))}}var Hh=Qn({name:"ElMenuCollapseTransition",setup:()=>({on:{beforeEnter(e){e.style.opacity=.2},enter(e){Ms(e,"el-opacity-transition"),e.style.opacity=1},afterEnter(e){Os(e,"el-opacity-transition"),e.style.opacity=""},beforeLeave(e){e.dataset||(e.dataset={}),Es(e,"el-menu--collapse")?(Os(e,"el-menu--collapse"),e.dataset.oldOverflow=e.style.overflow,e.dataset.scrollWidth=e.clientWidth,Ms(e,"el-menu--collapse")):(Ms(e,"el-menu--collapse"),e.dataset.oldOverflow=e.style.overflow,e.dataset.scrollWidth=e.clientWidth,Os(e,"el-menu--collapse")),e.style.width=e.scrollWidth+"px",e.style.overflow="hidden"},leave(e){Ms(e,"horizontal-collapse-transition"),e.style.width=e.dataset.scrollWidth+"px"}}})});Hh.render=function(e,t,n,l,a,o){return Cl(),Al(Pa,zl({mode:"out-in"},pa(e.on)),{default:en((()=>[Zt(e.$slots,"default")])),_:3},16)},Hh.__file="packages/menu/src/menu-collapse-transition.vue";var Wh=Qn({name:"ElMenu",componentName:"ElMenu",components:{ElMenuCollapseTransition:Hh},props:{mode:{type:String,default:"vertical"},defaultActive:{type:String,default:""},defaultOpeneds:Array,uniqueOpened:Boolean,router:Boolean,menuTrigger:{type:String,default:"hover"},collapse:Boolean,backgroundColor:{type:String},textColor:{type:String},activeTextColor:{type:String},collapseTransition:{type:Boolean,default:!0}},emits:["close","open","select"],setup(e,t){const n=tt(e.defaultOpeneds&&!e.collapse?e.defaultOpeneds.slice(0):[]),l=la(),a=tt(e.defaultActive),o=tt({}),r=tt({}),i=tt(!1),s=_o(),u=l.appContext.config.globalProperties.$router,c=function(e=""){const t=tt("");return e?(t.value=function(e,t=.2){let{red:n,green:l,blue:a}=function(e){let t=e.replace("#","");if(/^[0-9a-fA-F]{3}$/.test(t)){const e=t.split("");for(let t=2;t>=0;t--)e.splice(t,0,e[t]);t=e.join("")}return/^[0-9a-fA-F]{6}$/.test(t)?{red:parseInt(t.slice(0,2),16),green:parseInt(t.slice(2,4),16),blue:parseInt(t.slice(4,6),16)}:{red:255,green:255,blue:255}}(e);return t>0?(n*=1-t,l*=1-t,a*=1-t):(n+=(255-n)*t,l+=(255-l)*t,a+=(255-a)*t),`rgb(${Math.round(n)}, ${Math.round(l)}, ${Math.round(a)})`}(e),t):t}(e.backgroundColor),d=ua((()=>"horizontal"===e.mode||"vertical"===e.mode&&e.collapse)),p=()=>{const t=a.value,n=o.value[t];n&&"horizontal"!==e.mode&&!e.collapse&&n.indexPath.forEach((e=>{let t=r.value[e];t&&v(e,null==t?void 0:t.indexPath)}))},f=e=>{r.value[e.index]=e},h=e=>{delete r.value[e.index]},v=(t,l)=>{n.value.includes(t)||(e.uniqueOpened&&(n.value=n.value.filter((e=>-1!==(et(l)?l.value:l).indexOf(e)))),n.value.push(t))},m=e=>{const t=n.value.indexOf(e);-1!==t&&n.value.splice(t,1)},g=e=>{const{index:l,indexPath:a}=e;n.value.includes(l)?(m(l),t.emit("close",l,a.value)):(v(l,a),t.emit("open",l,a.value))},b=l=>{const{index:o,indexPath:r}=l,i=null!==l.index,s=a.value;i&&(a.value=l.index),t.emit("select",o,r.value,l),("horizontal"===e.mode||e.collapse)&&(n.value=[]),e.router&&u&&i&&y(l,(e=>{if(a.value=s,e){if("NavigationDuplicated"===e.name)return;console.error(e)}}))},y=(e,t)=>{let n=e.route||e.index;try{null==u||u.push(n,(()=>null),t)}catch(e){console.error(e)}},x=t=>{const n=o.value,l=n[t]||n[a.value]||n[e.defaultActive];l?(a.value=l.index,p()):i.value?i.value=!1:a.value=null};return An((()=>e.defaultActive),(e=>{o[e]||(a.value=""),x(e)})),An(o.value,(()=>{x()})),An((()=>e.collapse),((t,l)=>{t!==l&&(i.value=!0),t&&(n.value=[]),s.emit("rootMenu:toggle-collapse",Boolean(e.collapse))})),Fl("rootMenu",{props:e,openedMenus:n,items:o,submenus:r,hoverBackground:c,activeIndex:a,isMenuPopup:d,methods:{addMenuItem:e=>{o.value[e.index]=e},removeMenuItem:e=>{delete o.value[e.index]},addSubMenu:f,removeSubMenu:h,openMenu:v,closeMenu:m},rootMenuEmit:s.emit,rootMenuOn:s.on}),Fl("subMenu:"+l.uid,{addSubMenu:f,removeSubMenu:h}),mn((()=>{p(),s.on("menuItem:item-click",b),s.on("submenu:submenu-click",g),"horizontal"===e.mode&&new jh(l.vnode.el)})),{hoverBackground:c,isMenuPopup:d,props:e,open:e=>{const{indexPath:t}=r.value[e.toString()];t.forEach((e=>v(e,t)))},close:e=>{m(e)}}}});function qh(e,t){const n=$l("rootMenu"),l=ua((()=>{let n=e.parent;const l=[t];for(;"ElMenu"!==n.type.name;)n.props.index&&l.unshift(n.props.index),n=n.parent;return l}));return{parentMenu:ua((()=>{let t=e.parent;for(;t&&-1===["ElMenu","ElSubmenu"].indexOf(t.type.name);)t=t.parent;return t})),paddingStyle:ua((()=>{let t=e.parent;if("vertical"!==n.props.mode)return{};let l=20;if(n.props.collapse)l=20;else for(;t&&"ElMenu"!==t.type.name;)"ElSubmenu"===t.type.name&&(l+=20),t=t.parent;return{paddingLeft:l+"px"}})),indexPath:l}}Wh.render=function(e,t,n,l,a,o){const r=pl("el-menu-collapse-transition");return e.props.collapseTransition?(Cl(),Al(r,{key:0},{default:en((()=>[(Cl(),Al("ul",{key:+e.props.collapse,role:"menubar",style:{backgroundColor:e.props.backgroundColor||""},class:{"el-menu":!0,"el-menu--horizontal":"horizontal"===e.mode,"el-menu--collapse":e.props.collapse}},[Zt(e.$slots,"default")],6))])),_:3})):(Cl(),Al("ul",{key:+e.props.collapse,role:"menubar",style:{backgroundColor:e.props.backgroundColor||""},class:{"el-menu":!0,"el-menu--horizontal":"horizontal"===e.mode,"el-menu--collapse":e.props.collapse}},[Zt(e.$slots,"default")],6))},Wh.__file="packages/menu/src/menu.vue",Wh.install=e=>{e.component(Wh.name,Wh)};var Yh=Qn({name:"ElTooltip",components:{ElPopper:Ku},props:{effect:{type:String,default:"dark"},class:{type:String,default:""},content:{type:String,default:""},disabled:{type:Boolean,default:!1},enterable:{type:Boolean,default:!0},hideAfter:{type:Number,default:0},manual:{type:Boolean,default:!1},modelValue:{type:Boolean,validator:e=>"boolean"==typeof e,default:void 0},offset:{type:Number,default:12},openDelay:{type:Number,default:0},placement:{type:String,default:"bottom"},popperOptions:{type:Object,default:()=>null},showAfter:{type:Number,default:0},transition:{type:String,default:"el-fade-in-linear"},trigger:{type:[String,Array],default:()=>["hover"]},visibleArrow:{type:Boolean,default:!0}},emits:[tu],setup(e,t){e.manual&&void 0===e.modelValue&&zs("[ElTooltip]","You need to pass a v-model to el-tooltip when `manual` is true");const n=tt(null);return{popper:n,onUpdateVisible:e=>{t.emit(tu,e)},updatePopper:()=>n.value.update()}},render(){const{$slots:e,content:t,disabled:n,effect:l,enterable:a,hideAfter:o,manual:r,offset:i,openDelay:s,onUpdateVisible:u,placement:c,popperOptions:d,showAfter:p,transition:f,trigger:h,visibleArrow:v}=this;return ca(Ku,{ref:"popper",appendToBody:!0,class:this.class,disabled:n,effect:l,enterable:a,hideAfter:o,manualMode:r,offset:i,placement:c,showAfter:s||p,showArrow:v,transition:f,trigger:h,popperOptions:d,visible:this.modelValue,"onUpdate:visible":u},{default:()=>e.content?e.content():t,trigger:()=>e.default()})}});Yh.install=e=>{e.component(Yh.name,Yh)};var Kh=Qn({name:"ElMenuItem",componentName:"ElMenuItem",components:{ElTooltip:Yh},props:{index:{default:null,validator:e=>"string"==typeof e||null===e},route:[String,Object],disabled:Boolean},emits:["click"],setup(e,{emit:t,slots:n}){const l=la(),a=$l("rootMenu"),{parentMenu:o,paddingStyle:r,indexPath:i}=qh(l,e.index),{addSubMenu:s,removeSubMenu:u}=$l("subMenu:"+o.value.uid),c=ua((()=>e.index===a.activeIndex.value)),d=ua((()=>a.hoverBackground.value)),p=ua((()=>a.props.backgroundColor||"")),f=ua((()=>a.props.activeTextColor||"")),h=ua((()=>a.props.textColor||"")),v=ua((()=>a.props.mode)),m=ua((()=>"ElMenu"!==o.value.type.name)),g=ua((()=>{const e={color:c.value?f.value:h.value,borderBottomColor:""};return"horizontal"!==v.value||m.value||(e.borderBottomColor=c.value?a.props.activeTextColor?f.value:"":"transparent"),e}));return mn((()=>{s({index:e.index,indexPath:i,active:c}),a.methods.addMenuItem({index:e.index,indexPath:i,active:c})})),yn((()=>{u({index:e.index,indexPath:i,active:c}),a.methods.removeMenuItem({index:e.index,indexPath:i,active:c})})),{parentMenu:o,rootMenu:a,slots:n,paddingStyle:r,itemStyle:g,backgroundColor:p,active:c,handleClick:()=>{e.disabled||(a.rootMenuEmit("menuItem:item-click",{index:e.index,indexPath:i,route:e.route}),t("click",{index:e.index,indexPath:i.value}))},onMouseEnter:()=>{("horizontal"!==v.value||a.props.backgroundColor)&&(l.vnode.el.style.backgroundColor=d.value)},onMouseLeave:()=>{("horizontal"!==v.value||a.props.backgroundColor)&&(l.vnode.el.style.backgroundColor=p.value)}}}});const Uh={style:{position:"absolute",left:"0",top:"0",height:"100%",width:"100%",display:"inline-block","box-sizing":"border-box",padding:"0 20px"}};Kh.render=function(e,t,n,l,a,o){const r=pl("el-tooltip");return Cl(),Al("li",{class:["el-menu-item",{"is-active":e.active,"is-disabled":e.disabled}],role:"menuitem",tabindex:"-1",style:[e.paddingStyle,e.itemStyle,{backgroundColor:e.backgroundColor}],onClick:t[1]||(t[1]=(...t)=>e.handleClick(...t)),onMouseenter:t[2]||(t[2]=(...t)=>e.onMouseEnter(...t)),onFocus:t[3]||(t[3]=(...t)=>e.onMouseEnter(...t)),onBlur:t[4]||(t[4]=(...t)=>e.onMouseLeave(...t)),onMouseleave:t[5]||(t[5]=(...t)=>e.onMouseLeave(...t))},["ElMenu"===e.parentMenu.type.name&&e.rootMenu.props.collapse&&e.slots.title?(Cl(),Al(r,{key:0,effect:"dark",placement:"right"},{content:en((()=>[Zt(e.$slots,"title")])),default:en((()=>[Tl("div",Uh,[Zt(e.$slots,"default")])])),_:3})):(Cl(),Al(gl,{key:1},[Zt(e.$slots,"default"),Zt(e.$slots,"title")],64))],38)},Kh.__file="packages/menu/src/menuItem.vue",Kh.install=e=>{e.component(Kh.name,Kh)};var Gh=Qn({name:"ElMenuItemGroup",props:{}});Gh.render=function(e,t,n,l,a,o){return Cl(),Al("div",null,[Zt(e.$slots,"default")])},Gh.__file="packages/menu/src/menuItemGroup.vue",Gh.install=e=>{e.component(Gh.name,Gh)};const Xh={success:"success",info:"info",warning:"warning",error:"error"};var Jh=Qn({name:"ElMessage",props:{customClass:{type:String,default:""},center:{type:Boolean,default:!1},dangerouslyUseHTMLString:{type:Boolean,default:!1},duration:{type:Number,default:3e3},iconClass:{type:String,default:""},id:{type:String,default:""},message:{type:[String,Object],default:""},onClose:{type:Function,required:!0},showClose:{type:Boolean,default:!1},type:{type:String,default:"info"},offset:{type:Number,default:20},zIndex:{type:Number,default:0}},setup:e=>({typeClass:ua((()=>{const t=e.type;return t&&Xh[t]?"el-message__icon el-icon-"+Xh[t]:""})),customStyle:ua((()=>({top:e.offset+"px",zIndex:e.zIndex}))),visible:tt(!1),closed:tt(!1),timer:tt(null)}),watch:{closed(e){e&&(this.visible=!1,As(this.$el,"transitionend",this.destroyElement))}},mounted(){this.startTimer(),this.visible=!0,As(document,"keydown",this.keydown)},beforeUnmount(){Ss(document,"keydown",this.keydown)},methods:{destroyElement(){this.visible=!1,Ss(this.$el,"transitionend",this.destroyElement),this.onClose()},startTimer(){this.duration>0&&(this.timer=setTimeout((()=>{this.closed||this.close()}),this.duration))},clearTimer(){clearTimeout(this.timer),this.timer=null},close(){this.closed=!0,this.timer=null},keydown({code:e}){e===Fs.esc?this.closed||this.close():this.startTimer()}}});const Zh={key:0,class:"el-message__content"};let Qh;Jh.render=function(e,t,n,l,a,o){return Cl(),Al(Pa,{name:"el-message-fade"},{default:en((()=>[Un(Tl("div",{id:e.id,class:["el-message",e.type&&!e.iconClass?"el-message--"+e.type:"",e.center?"is-center":"",e.showClose?"is-closable":"",e.customClass],style:e.customStyle,role:"alert",onMouseenter:t[2]||(t[2]=(...t)=>e.clearTimer(...t)),onMouseleave:t[3]||(t[3]=(...t)=>e.startTimer(...t))},[e.type||e.iconClass?(Cl(),Al("i",{key:0,class:[e.typeClass,e.iconClass]},null,2)):Pl("v-if",!0),Zt(e.$slots,"default",{},(()=>[e.dangerouslyUseHTMLString?(Cl(),Al(gl,{key:1},[Pl(" Caution here, message could've been compromised, never use user's input as message "),Pl("  eslint-disable-next-line "),Tl("p",{class:"el-message__content",innerHTML:e.message},null,8,["innerHTML"])],64)):(Cl(),Al("p",Zh,d(e.message),1))])),e.showClose?(Cl(),Al("div",{key:1,class:"el-message__closeBtn el-icon-close",onClick:t[1]||(t[1]=co(((...t)=>e.close(...t)),["stop"]))})):Pl("v-if",!0)],46,["id"]),[[ho,e.visible]])])),_:3})},Jh.__file="packages/message/src/index.vue";const ev=[];let tv=1;const nv=function(e={}){if(is)return;"string"==typeof e&&(e={message:e});let t=e,n=e.offset||20;ev.forEach((({vm:e})=>{n+=(e.el.offsetHeight||0)+16})),n+=16;const l="message_"+tv++,a=t.onClose;t=Object.assign(Object.assign({},t),{onClose:()=>{!function(e,t){const n=ev.findIndex((({vm:t})=>{const{id:n}=t.component.props;return e===n}));if(-1===n)return;const{vm:l,$el:a}=ev[n];if(!l)return;null==t||t(l);const o=l.el.offsetHeight;yo(null,a),Mt((()=>{document.body.removeChild(a)})),ev.splice(n,1);const r=ev.length;if(!(r<1))for(let e=n;e<r;e++){const t=parseInt(ev[e].vm.el.style.top,10)-o-16;ev[e].vm.component.props.offset=t,ev[e].vm.component.props.vertOffset=t}}(l,a)},offset:n,id:l,zIndex:Fu.nextZIndex()});const o=document.createElement("div");o.className="container_"+l;const r=t.message;return Qh=Tl(Jh,t,Sl(t.message)?{default:()=>r}:null),yo(Qh,o),ev.push({vm:Qh,$el:o}),document.body.appendChild(o),{close:t.onClose}};let lv;["success","warning","info","error"].forEach((e=>{nv[e]=t=>("string"==typeof t?t={message:t,type:e}:t.type=e,nv(t))})),nv.closeAll=function(){for(let e=ev.length-1;e>=0;e--)ev[e].vm.component.ctx.close()},nv.install=e=>{e.config.globalProperties.$message=nv};class av{constructor(e,t,n){if(this.dialogNode=e,this.focusAfterClosed=t,this.focusFirst=n,this.lastFocus=null,null===this.dialogNode||"dialog"!==this.dialogNode.getAttribute("role"))throw new Error("Dialog() requires a DOM element with ARIA role of dialog.");this.focusAfterClosed="string"==typeof t?document.getElementById(t):"object"==typeof t?t:null,this.focusFirst="string"==typeof n?document.getElementById(n):"object"==typeof n?n:null,this.focusFirst?this.focusFirst.focus():qs.focusFirstDescendant(this.dialogNode),this.lastFocus=document.activeElement,lv=e=>{this.trapFocus(e)},this.addListeners()}addListeners(){document.addEventListener("focus",lv,!0)}removeListeners(){document.removeEventListener("focus",lv,!0)}closeDialog(){this.removeListeners(),this.focusAfterClosed&&setTimeout((()=>{this.focusAfterClosed.focus()}))}trapFocus(e){qs.IgnoreUtilFocusChanges||(this.dialogNode.contains(e.target)?this.lastFocus=e.target:(qs.focusFirstDescendant(this.dialogNode),this.lastFocus===document.activeElement&&qs.focusLastDescendant(this.dialogNode),this.lastFocus=document.activeElement))}}let ov,rv,iv=1;const sv={success:"success",info:"info",warning:"warning",error:"error"};var uv=Qn({name:"ElMessageBox",components:{ElButton:sc,ElInput:cu},props:{openDelay:{type:Number,default:0},closeDelay:{type:Number,default:0},zIndex:Number,modalFade:{type:Boolean,default:!0},modalClass:{type:String,default:""},modalAppendToBody:{type:Boolean,default:!1},modal:{type:Boolean,default:!0},lockScroll:{type:Boolean,default:!0},showClose:{type:Boolean,default:!0},closeOnClickModal:{type:Boolean,default:!0},closeOnPressEscape:{type:Boolean,default:!0},closeOnHashChange:{type:Boolean,default:!0},center:{default:!1,type:Boolean},roundButton:{default:!1,type:Boolean}},setup(e){let t;const n=((e,t,n="root")=>{let l,a=!1,o=!1,r=null,i=null;const s=la(),u=Ye({opened:!1,bodyPaddingRight:null,computedBodyPaddingRight:0,withoutHiddenClass:!0,rendered:!1,visible:!1});vn((()=>{const{handleClose:t,handleAction:n}=s.proxy;l="popup-"+iv++,Fu.register(l,Object.assign(Object.assign({},st(e)),{close:p,handleClose:t,handleAction:n}))})),yn((()=>{Fu.deregister(l),Fu.closeModal(l),h()}));const c=t=>{if(is)return;if(u.opened)return;a=!0;const r=s.refs[n],i=t.modal,c=t.zIndex;if(c&&(Fu.zIndex=c),i&&(o&&(Fu.closeModal(l),o=!1),Fu.openModal(l,Fu.nextZIndex(),e.modalAppendToBody?void 0:r,t.modalClass,t.modalFade),t.lockScroll)){u.withoutHiddenClass=!Es(document.body,"el-popup-parent--hidden"),u.withoutHiddenClass&&(u.bodyPaddingRight=document.body.style.paddingRight,u.computedBodyPaddingRight=parseInt(Ds(document.body,"paddingRight"),10)),ov=Is();const e=document.documentElement.clientHeight<document.body.scrollHeight,t=Ds(document.body,"overflowY");ov>0&&(e||"scroll"===t)&&u.withoutHiddenClass&&(document.body.style.paddingRight=u.computedBodyPaddingRight+ov+"px"),Ms(document.body,"el-popup-parent--hidden")}"static"===getComputedStyle(r).position&&(r.style.position="absolute"),r.style.zIndex=String(Fu.nextZIndex()),u.opened=!0,f()},d=function(t){u.rendered||(u.rendered=!0);const n=Object.assign({},e||s.proxy,t);r&&(clearTimeout(r),r=null),clearTimeout(i);const l=Number(n.openDelay);l>0?i=setTimeout((()=>{i=null,c(n)}),l):c(n)},p=()=>{null!==i&&(clearTimeout(i),i=null),clearTimeout(r);const n=Number(e.closeDelay);n>0?r=setTimeout((()=>{r=null,t()}),n):t()},f=()=>{a=!1},h=()=>{e.modal&&u.withoutHiddenClass&&(document.body.style.paddingRight=u.bodyPaddingRight,Os(document.body,"el-popup-parent--hidden")),u.withoutHiddenClass=!0};return An((()=>u.visible),(e=>kh(void 0,void 0,void 0,(function*(){if(e){if(a)return;u.rendered||(u.rendered=!0,yield Mt()),d()}else p()})))),{state:u,open:d,close:p,doAfterClose:()=>{Fu.closeModal(l),o=!1},updateClosingFlag:e=>{o=e},restoreBodyStyle:h}})(e,i),l=Ye({uid:1,title:void 0,message:"",type:"",iconClass:"",customClass:"",showInput:!1,inputValue:null,inputPlaceholder:"",inputType:"text",inputPattern:null,inputValidator:null,inputErrorMessage:"",showConfirmButton:!0,showCancelButton:!1,action:"",confirmButtonText:"",cancelButtonText:"",confirmButtonLoading:!1,cancelButtonLoading:!1,confirmButtonClass:"",confirmButtonDisabled:!1,cancelButtonClass:"",editorErrorMessage:null,callback:null,dangerouslyUseHTMLString:!1,focusAfterClosed:null,isOnComposition:!1,distinguishCancelAndClose:!1,type$:"",visible:!1,validateError:!1}),a=ua((()=>l.iconClass||(l.type&&sv[l.type]?"el-icon-"+sv[l.type]:""))),o=ua((()=>!!l.message)),r=ua((()=>"el-button--primary "+l.confirmButtonClass));function i(){l.visible&&(l.visible=!1,n.updateClosingFlag(!0),rv.closeDialog(),e.lockScroll&&setTimeout(n.restoreBodyStyle,200),n.state.opened=!1,n.doAfterClose(),setTimeout((()=>{l.action&&l.callback(l.action,l)})))}An((()=>l.inputValue),(e=>kh(this,void 0,void 0,(function*(){yield Mt(),"prompt"===l.type$&&null!==e&&c()}))),{immediate:!0}),An((()=>l.visible),(e=>{n.state.visible=e,e&&(l.uid++,"alert"!==l.type$&&"confirm"!==l.type$||Mt().then((()=>{t.refs.confirm.$el.focus()})),l.focusAfterClosed=document.activeElement,rv=new av(t.vnode.el,l.focusAfterClosed,s())),"prompt"===l.type$&&(e?Mt().then((()=>{t.refs.input&&t.refs.input.$el&&d().focus()})):(l.editorErrorMessage="",l.validateError=!1))})),vn((()=>{t=la(),t.setupInstall={state:l,doClose:i}})),mn((()=>kh(this,void 0,void 0,(function*(){yield Mt(),e.closeOnHashChange&&As(window,"hashchange",n.close)})))),yn((()=>{e.closeOnHashChange&&Ss(window,"hashchange",n.close),setTimeout((()=>{rv.closeDialog()}))}));const s=()=>{const e=t.vnode.el.querySelector(".el-message-box__btns .el-button"),n=t.vnode.el.querySelector(".el-message-box__btns .el-message-box__title");return e||n},u=e=>{("prompt"!==l.type$||"confirm"!==e||c())&&(l.action=e,"function"==typeof t.setupInstall.state.beforeClose?(t.setupInstall.state.close=function(){const e=l.uid;return()=>kh(this,void 0,void 0,(function*(){yield Mt(),e===l.uid&&i()}))}(),t.setupInstall.state.beforeClose(e,l,n.close)):i())},c=()=>{if("prompt"===l.type$){const e=l.inputPattern;if(e&&!e.test(l.inputValue||""))return l.editorErrorMessage=l.inputErrorMessage||vc("el.messagebox.error"),l.validateError=!0,!1;const t=l.inputValidator;if("function"==typeof t){const e=t(l.inputValue);if(!1===e)return l.editorErrorMessage=l.inputErrorMessage||vc("el.messagebox.error"),l.validateError=!0,!1;if("string"==typeof e)return l.editorErrorMessage=e,l.validateError=!0,!1}}return l.editorErrorMessage="",l.validateError=!1,!0},d=()=>{const e=t.refs.input.$refs;return e.input||e.textarea};return Object.assign(Object.assign({},st(l)),{hasMessage:o,icon:a,confirmButtonClasses:r,handleWrapperClick:()=>{e.closeOnClickModal&&u(l.distinguishCancelAndClose?"close":"cancel")},handleInputEnter:()=>{if("textarea"!==l.inputType)return u("confirm")},handleAction:u,handleClose:()=>{u("close")},t:vc,doClose:i})}});const cv={key:0,class:"el-message-box__header"},dv={class:"el-message-box__title"},pv=Tl("i",{class:"el-message-box__close el-icon-close"},null,-1),fv={class:"el-message-box__content"},hv={class:"el-message-box__container"},vv={key:1,class:"el-message-box__message"},mv={key:0},gv={class:"el-message-box__input"},bv={class:"el-message-box__btns"};let yv,xv;uv.render=function(e,t,n,l,a,o){const r=pl("el-input"),i=pl("el-button");return Cl(),Al(Pa,{name:"msgbox-fade"},{default:en((()=>[Un(Tl("div",{ref:"root","aria-label":e.title||"dialog",class:"el-message-box__wrapper",tabindex:"-1",role:"dialog","aria-modal":"true",onClick:t[8]||(t[8]=co(((...t)=>e.handleWrapperClick(...t)),["self"]))},[Tl("div",{class:["el-message-box",[e.customClass,e.center&&"el-message-box--center"]]},[null!==e.title&&void 0!==e.title?(Cl(),Al("div",cv,[Tl("div",dv,[e.icon&&e.center?(Cl(),Al("div",{key:0,class:["el-message-box__status",e.icon]},null,2)):Pl("v-if",!0),Tl("span",null,d(e.title),1)]),e.showClose?(Cl(),Al("button",{key:0,type:"button",class:"el-message-box__headerbtn","aria-label":"Close",onClick:t[1]||(t[1]=t=>e.handleAction(e.distinguishCancelAndClose?"close":"cancel")),onKeydown:t[2]||(t[2]=fo((t=>e.handleAction(e.distinguishCancelAndClose?"close":"cancel")),["enter"]))},[pv],32)):Pl("v-if",!0)])):Pl("v-if",!0),Tl("div",fv,[Tl("div",hv,[e.icon&&!e.center&&e.hasMessage?(Cl(),Al("div",{key:0,class:["el-message-box__status",e.icon]},null,2)):Pl("v-if",!0),e.hasMessage?(Cl(),Al("div",vv,[Zt(e.$slots,"default",{},(()=>[e.dangerouslyUseHTMLString?(Cl(),Al("p",{key:1,innerHTML:e.message},null,8,["innerHTML"])):(Cl(),Al("p",mv,d(e.message),1))]))])):Pl("v-if",!0)]),Un(Tl("div",gv,[Tl(r,{ref:"input",modelValue:e.inputValue,"onUpdate:modelValue":t[3]||(t[3]=t=>e.inputValue=t),type:e.inputType,placeholder:e.inputPlaceholder,class:{invalid:e.validateError},onKeydown:fo(e.handleInputEnter,["enter"])},null,8,["modelValue","type","placeholder","class","onKeydown"]),Tl("div",{class:"el-message-box__errormsg",style:{visibility:e.editorErrorMessage?"visible":"hidden"}},d(e.editorErrorMessage),5)],512),[[ho,e.showInput]])]),Tl("div",bv,[e.showCancelButton?(Cl(),Al(i,{key:0,loading:e.cancelButtonLoading,class:[e.cancelButtonClass],round:e.roundButton,size:"small",onClick:t[4]||(t[4]=t=>e.handleAction("cancel")),onKeydown:t[5]||(t[5]=fo((t=>e.handleAction("cancel")),["enter"]))},{default:en((()=>[Bl(d(e.cancelButtonText||e.t("el.messagebox.cancel")),1)])),_:1},8,["loading","class","round"])):Pl("v-if",!0),Un(Tl(i,{ref:"confirm",loading:e.confirmButtonLoading,class:[e.confirmButtonClasses],round:e.roundButton,disabled:e.confirmButtonDisabled,size:"small",onClick:t[6]||(t[6]=t=>e.handleAction("confirm")),onKeydown:t[7]||(t[7]=fo((t=>e.handleAction("confirm")),["enter"]))},{default:en((()=>[Bl(d(e.confirmButtonText||e.t("el.messagebox.confirm")),1)])),_:1},8,["loading","class","round","disabled"]),[[ho,e.showConfirmButton]])])],2)],8,["aria-label"]),[[ho,e.visible]])])),_:1})},uv.__file="packages/message-box/src/index.vue";const kv=["lockScroll","showClose","closeOnClickModal","closeOnPressEscape","closeOnHashChange","center","roundButton","closeDelay","zIndex","modal","modalFade","modalClass","modalAppendToBody","lockScroll"],wv={title:null,message:"",type:"",iconClass:"",showInput:!1,showClose:!0,modalFade:!0,lockScroll:!0,closeOnClickModal:!0,closeOnPressEscape:!0,closeOnHashChange:!0,inputValue:null,inputPlaceholder:"",inputType:"text",inputPattern:null,inputValidator:null,inputErrorMessage:"",showConfirmButton:!0,showCancelButton:!1,confirmButtonPosition:"right",confirmButtonHighlight:!1,cancelButtonHighlight:!1,confirmButtonText:"",cancelButtonText:"",confirmButtonClass:"",cancelButtonClass:"",customClass:"",beforeClose:null,dangerouslyUseHTMLString:!1,center:!1,roundButton:!1,distinguishCancelAndClose:!1};let Cv=[];const _v=(e,t)=>{if(yv){const n=yv.callback;"function"==typeof n&&(t.showInput?n(t.inputValue,e):n(e)),yv.resolve&&("confirm"===e?t.showInput?yv.resolve({value:t.inputValue,action:e}):yv.resolve(e):!yv.reject||"cancel"!==e&&"close"!==e||yv.reject(e))}},Av=()=>kh(void 0,void 0,void 0,(function*(){if(xv||(()=>{const e=document.createElement("div"),t=Tl(uv);yo(t,e),xv=t.component})(),(!xv||!xv.setupInstall.state.visible)&&Cv.length>0){const e={},t={};yv=Cv.shift();const n=yv.options;Object.keys(n).forEach((l=>{kv.includes(l)?e[l]=n[l]:t[l]=n[l]}));const l=xv.props;for(const t in e)e.hasOwnProperty(t)&&(l[t]=e[t]);const a=xv.setupInstall.state;a.action="",void 0===n.callback&&(n.callback=_v);for(const e in t)t.hasOwnProperty(e)&&(a[e]=t[e]);Sl(n.message)&&(xv.slots.default=()=>[n.message]);const o=n.callback;a.callback=(e,t)=>{o(e,t),Av()},document.body.appendChild(xv.vnode.el),a.visible=!0}})),Sv=function(e,t){if(!is){if("string"==typeof e||Sl(e)?(e={message:e},"string"==typeof t&&(e.title=t)):e.callback&&!t&&(t=e.callback),"undefined"!=typeof Promise)return new Promise(((n,l)=>{Cv.push({options:Object.assign({},wv,e),callback:t,resolve:n,reject:l}),Av()}));Cv.push({options:Object.assign({},wv,e),callback:t}),Av()}};Sv.alert=(e,t,n)=>("object"==typeof t?(n=t,t=""):void 0===t&&(t=""),Sv(Object.assign({title:t,message:e,type$:"alert",closeOnPressEscape:!1,closeOnClickModal:!1},n))),Sv.confirm=(e,t,n)=>("object"==typeof t?(n=t,t=""):void 0===t&&(t=""),Sv(Object.assign({title:t,message:e,type$:"confirm",showCancelButton:!0},n))),Sv.prompt=(e,t,n)=>("object"==typeof t?(n=t,t=""):void 0===t&&(t=""),Sv(Object.assign({title:t,message:e,showCancelButton:!0,showInput:!0,type$:"prompt"},n))),Sv.close=()=>{xv.setupInstall.doClose(),xv.setupInstall.state.visible=!1,Cv=[],yv=null},Sv.install=e=>{e.config.globalProperties.$msgbox=Sv,e.config.globalProperties.$messageBox=Sv,e.config.globalProperties.$alert=Sv.alert,e.config.globalProperties.$confirm=Sv.confirm,e.config.globalProperties.$prompt=Sv.prompt};const Ev={success:"success",info:"info",warning:"warning",error:"error"};var Mv=Qn({name:"ElNotification",props:{customClass:{type:String,default:""},dangerouslyUseHTMLString:{type:Boolean,default:!1},duration:{type:Number,default:4500},iconClass:{type:String,default:""},id:{type:String,default:""},message:{type:[String,Object],default:""},offset:{type:Number,default:0},onClick:{type:Function,default:()=>{}},onClose:{type:Function,required:!0},position:{type:String,default:"top-right"},showClose:{type:Boolean,default:!0},title:{type:String,default:""},type:{type:String,default:""},zIndex:{type:Number,default:0}},emits:["close","click"],setup(e){const t=ua((()=>{const t=e.type;return t&&Ev[t]?"el-icon-"+Ev[t]:""})),n=ua((()=>e.position.indexOf("right")>1?"right":"left")),l=ua((()=>e.position.startsWith("top")?"top":"bottom")),a=ua((()=>({[l.value]:e.offset+"px"}))),o=tt(!1),r=tt(!1),i=tt(null);return{horizontalClass:n,typeClass:t,positionStyle:a,verticalProperty:l,visible:o,closed:r,timer:i}},watch:{closed(e){e&&(this.visible=!1,As(this.$el,"transitionend",this.destroyElement))}},mounted(){this.duration>0&&(this.timer=setTimeout((()=>{this.closed||this.close()}),this.duration)),this.visible=!0,As(document,"keydown",this.keydown)},beforeUnmount(){Ss(document,"keydown",this.keydown)},methods:{destroyElement(){this.visible=!1,Ss(this.$el,"transitionend",this.destroyElement),this.onClose()},startTimer(){this.duration>0&&(this.timer=setTimeout((()=>{this.closed||this.close()}),this.duration))},clearTimer(){clearTimeout(this.timer),this.timer=null},click(){null==this||this.onClick()},close(){this.closed=!0,this.timer=null},keydown({code:e}){e===Fs.delete||e===Fs.backspace?this.clearTimer():e===Fs.esc?this.closed||this.close():this.startTimer()}}});const Ov={class:"el-notification__content"},Dv={key:0};let Tv;Mv.render=function(e,t,n,l,a,o){return Cl(),Al(Pa,{name:"el-notification-fade"},{default:en((()=>[Un(Tl("div",{id:e.id,class:["el-notification",e.customClass,e.horizontalClass],style:e.positionStyle,role:"alert",onMouseenter:t[2]||(t[2]=t=>e.clearTimer()),onMouseleave:t[3]||(t[3]=t=>e.startTimer()),onClick:t[4]||(t[4]=(...t)=>e.click(...t))},[e.type||e.iconClass?(Cl(),Al("i",{key:0,class:["el-notification__icon",[e.typeClass,e.iconClass]]},null,2)):Pl("v-if",!0),Tl("div",{class:["el-notification__group",{"is-with-icon":e.typeClass||e.iconClass}]},[Tl("h2",{class:"el-notification__title",textContent:d(e.title)},null,8,["textContent"]),Un(Tl("div",Ov,[Zt(e.$slots,"default",{},(()=>[e.dangerouslyUseHTMLString?(Cl(),Al(gl,{key:1},[Pl(" Caution here, message could've been compromized, nerver use user's input as message "),Pl(" eslint-disable-next-line "),Tl("p",{innerHTML:e.message},null,8,["innerHTML"])],64)):(Cl(),Al("p",Dv,d(e.message),1))]))],512),[[ho,e.message]]),e.showClose?(Cl(),Al("div",{key:0,class:"el-notification__closeBtn el-icon-close",onClick:t[1]||(t[1]=co(((...t)=>e.close(...t)),["stop"]))})):Pl("v-if",!0)],2)],46,["id"]),[[ho,e.visible]])])),_:3})},Mv.__file="packages/notification/src/index.vue";const Nv=[];let Bv=1;const Pv=function(e={}){if(is)return;const t=e.position||"top-right";let n=e.offset||0;Nv.filter((({vm:e})=>e.component.props.position===t)).forEach((({vm:e})=>{n+=(e.el.offsetHeight||0)+16})),n+=16;const l="notification_"+Bv++,a=e.onClose;e=Object.assign(Object.assign({dangerouslyUseHTMLString:!1,duration:4500,position:"top-right",showClose:!0},e),{onClose:()=>{!function(e,t){const n=Nv.findIndex((({vm:t})=>{const{id:n}=t.component.props;return e===n}));if(-1===n)return;const{vm:l,$el:a}=Nv[n];if(!l)return;null==t||t(l);const o=l.el.offsetHeight;yo(null,a),Nv.splice(n,1);const r=Nv.length;if(Mt((()=>{document.body.removeChild(a)})),r<1)return;const i=l.props.position;for(let e=n;e<r;e++)if(Nv[e].vm.component.props.position===i){const t=l.props.position.split("-")[0],n=parseInt(Nv[e].vm.el.style[t],10)-o-16;Nv[e].vm.component.props.offset=n,requestAnimationFrame((()=>{yo(Nv[e].vm,Nv[e].$el)}))}}(l,a)},offset:n,id:l,zIndex:Fu.nextZIndex()});const o=document.createElement("div");return o.className="container_"+l,o.style.zIndex=String(),Tv=Tl(Mv,e,Sl(e.message)?{default:()=>e.message}:null),yo(Tv,o),Nv.push({vm:Tv,$el:o}),document.body.appendChild(o),{close:e.onClose}};["success","warning","info","error"].forEach((e=>{Object.assign(Pv,{[e]:(t={})=>(("string"==typeof t||Sl(t))&&(t={message:t}),t.type=e,Pv(t))})})),Pv.install=e=>{e.config.globalProperties.$notify=Pv};const Vv=Symbol("SelectGroup"),Iv=Symbol("Select");var Lv=Qn({name:"ElOption",componentName:"ElOption",props:{value:{required:!0,type:[String,Number,Object]},label:[String,Number],created:Boolean,disabled:{type:Boolean,default:!1}},setup(e){const t=Ye({index:-1,groupDisabled:!1,visible:!0,hitState:!1,hover:!1}),{currentLabel:n,itemSelected:l,isDisabled:a,select:o,hoverItem:r}=function(e,t){const n=$l(Iv),l=$l(Vv,{disabled:!1}),a=ua((()=>"[object object]"===Object.prototype.toString.call(e.value).toLowerCase())),o=ua((()=>n.props.multiple?d(n.props.modelValue,e.value):p(e.value,n.props.modelValue))),r=ua((()=>{if(n.props.multiple){const e=n.props.modelValue||[];return!o.value&&e.length>=n.props.multipleLimit&&n.props.multipleLimit>0}return!1})),i=ua((()=>e.label||(a.value?"":e.value))),s=ua((()=>e.value||e.label||"")),u=ua((()=>e.disabled||t.groupDisabled||r.value)),c=la(),d=(e=[],t)=>{if(a.value){const l=n.props.valueKey;return e&&e.some((e=>ss(e,l)===ss(t,l)))}return e&&e.indexOf(t)>-1},p=(e,t)=>{if(a.value){const{valueKey:l}=n.props;return ss(e,l)===ss(t,l)}return e===t};return An((()=>i.value),(()=>{e.created||n.props.remote||n.setSelected()})),An((()=>e.value),((t,l)=>{const{remote:a,valueKey:o}=n.props;if(!e.created&&!a){if(o&&"object"==typeof t&&"object"==typeof l&&t[o]===l[o])return;n.setSelected()}})),n.selectEmitter.on("elOptionQueryChange",(l=>{const a=new RegExp(((e="")=>String(e).replace(/[|\\{}()[\]^$+*?.]/g,"\\$&"))(l),"i");t.visible=a.test(i.value)||e.created,t.visible||n.filteredOptionsCount--})),{select:n,currentLabel:i,currentValue:s,itemSelected:o,isDisabled:u,hoverItem:()=>{e.disabled||l.disabled||(n.hoverIndex=n.options.indexOf(c))}}}(e,t),{visible:i,hover:s}=st(t),u=la().proxy;return o.onOptionCreate(u),yn((()=>{const{selected:t}=o;let n=o.props.multiple?t:[t],l=o.cachedOptions.indexOf(u),a=null==n?void 0:n.indexOf(u);l>-1&&a<0&&o.cachedOptions.splice(l,1),o.onOptionDestroy(o.options.map((e=>e.value)).indexOf(e.value))})),{currentLabel:n,itemSelected:l,isDisabled:a,select:o,hoverItem:r,visible:i,hover:s,selectOptionClick:function(){!0!==e.disabled&&!0!==t.groupDisabled&&o.handleOptionSelect(u,!0)}}}});Lv.render=function(e,t,n,l,a,o){return Un((Cl(),Al("li",{class:["el-select-dropdown__item",{selected:e.itemSelected,"is-disabled":e.isDisabled,hover:e.hover}],onMouseenter:t[1]||(t[1]=(...t)=>e.hoverItem(...t)),onClick:t[2]||(t[2]=co(((...t)=>e.selectOptionClick(...t)),["stop"]))},[Zt(e.$slots,"default",{},(()=>[Tl("span",null,d(e.currentLabel),1)]))],34)),[[ho,e.visible]])},Lv.__file="packages/select/src/option.vue";var zv=Qn({name:"ElSelectDropdown",componentName:"ElSelectDropdown",setup(){const e=$l(Iv),t=ua((()=>e.props.popperClass)),n=ua((()=>e.props.multiple)),l=tt("");function a(){var t;l.value=(null===(t=e.selectWrapper)||void 0===t?void 0:t.getBoundingClientRect().width)+"px"}return mn((()=>{xu(e.selectWrapper,a)})),yn((()=>{ku(e.selectWrapper,a)})),{minWidth:l,popperClass:t,isMultiple:n}}});zv.render=function(e,t,n,l,a,o){return Cl(),Al("div",{class:["el-select-dropdown",[{"is-multiple":e.isMultiple},e.popperClass]],style:{minWidth:e.minWidth}},[Zt(e.$slots,"default")],6)},zv.__file="packages/select/src/select-dropdown.vue";var Fv=Qn({name:"ElSelect",componentName:"ElSelect",components:{ElInput:cu,ElSelectMenu:zv,ElOption:Lv,ElTag:Rd,ElScrollbar:Au,ElPopper:Ku},directives:{ClickOutside:Xs},props:{name:String,id:String,modelValue:[Array,String,Number],autocomplete:{type:String,default:"off"},automaticDropdown:Boolean,size:{type:String,validator:au},disabled:Boolean,clearable:Boolean,filterable:Boolean,allowCreate:Boolean,loading:Boolean,popperClass:{type:String,default:""},remote:Boolean,loadingText:String,noMatchText:String,noDataText:String,remoteMethod:Function,filterMethod:Function,multiple:Boolean,multipleLimit:{type:Number,default:0},placeholder:{type:String},defaultFirstOption:Boolean,reserveKeyword:Boolean,valueKey:{type:String,default:"value"},collapseTags:Boolean,popperAppendToBody:{type:Boolean,default:!0},clearIcon:{type:String,default:"el-icon-circle-close"}},emits:[tu,"change","remove-tag","clear","visible-change","focus","blur"],setup(e,t){const n=function(e){const t=_o();return Ye({options:[],cachedOptions:[],createdLabel:null,createdSelected:!1,selected:e.multiple?[]:{},inputLength:20,inputWidth:0,initialInputHeight:0,optionsCount:0,filteredOptionsCount:0,visible:!1,softFocus:!1,selectedLabel:"",hoverIndex:-1,query:"",previousQuery:null,inputHovering:!1,cachedPlaceHolder:"",currentPlaceholder:vc("el.select.placeholder"),menuVisibleOnFocus:!1,isOnComposition:!1,isSilentBlur:!1,selectEmitter:t})}(e),{selectSize:l,readonly:a,handleResize:o,collapseTagSize:r,debouncedOnInputChange:i,debouncedQueryChange:s,deletePrevTag:u,deleteTag:c,deleteSelected:d,handleOptionSelect:p,scrollToOption:f,setSelected:h,resetInputHeight:v,managePlaceholder:m,showClose:g,selectDisabled:b,iconClass:y,showNewOption:x,emptyText:k,toggleLastOptionHitState:w,resetInputState:C,handleComposition:_,onOptionCreate:A,onOptionDestroy:S,handleMenuEnter:E,handleFocus:M,blur:O,handleBlur:D,handleClearClick:T,handleClose:N,toggleMenu:B,selectOption:P,getValueKey:V,navigateOptions:I,dropMenuVisible:L,reference:z,input:F,popper:$,tags:R,selectWrapper:j,scrollbar:H}=((e,t,n)=>{const l=ms(),a=tt(null),o=tt(null),r=tt(null),i=tt(null),s=tt(null),u=tt(null),c=tt(-1),d=$l("elForm",{}),p=$l("elFormItem",{}),f=ua((()=>!e.filterable||e.multiple||!(!is&&!isNaN(Number(document.DOCUMENT_NODE)))&&!(!is&&navigator.userAgent.indexOf("Edge")>-1)&&!t.visible)),h=ua((()=>e.disabled||d.disabled)),v=ua((()=>{const n=e.multiple?Array.isArray(e.modelValue)&&e.modelValue.length>0:void 0!==e.modelValue&&null!==e.modelValue&&""!==e.modelValue;return e.clearable&&!h.value&&t.inputHovering&&n})),m=ua((()=>e.remote&&e.filterable?"":t.visible?"arrow-up is-reverse":"arrow-up")),g=ua((()=>e.remote?300:0)),b=ua((()=>e.loading?e.loadingText||vc("el.select.loading"):(!e.remote||""!==t.query||0!==t.options.length)&&(e.filterable&&t.query&&t.options.length>0&&0===t.filteredOptionsCount?e.noMatchText||vc("el.select.noMatch"):0===t.options.length?e.noDataText||vc("el.select.noData"):null))),y=ua((()=>{const n=t.options.filter((e=>!e.created)).some((e=>e.currentLabel===t.query));return e.filterable&&e.allowCreate&&""!==t.query&&!n})),x=ua((()=>e.size||p.size||l.size)),k=ua((()=>["small","mini"].indexOf(x.value)>-1?"mini":"small")),w=ua((()=>t.visible&&!1!==b.value));An((()=>h.value),(()=>{Mt((()=>{C()}))})),An((()=>e.placeholder),(e=>{t.cachedPlaceHolder=t.currentPlaceholder=e})),An((()=>e.modelValue),((n,l)=>{var a;e.multiple&&(C(),n&&n.length>0||o.value&&""!==t.query?t.currentPlaceholder="":t.currentPlaceholder=t.cachedPlaceHolder,e.filterable&&!e.reserveKeyword&&(t.query="",_(t.query))),E(),e.filterable&&!e.multiple&&(t.inputLength=20),ri()(n,l)||null===(a=p.formItemMitt)||void 0===a||a.emit("el.form.change",n)}),{flush:"post"}),An((()=>t.visible),(l=>{var a,i;l?(null===(i=null===(a=r.value)||void 0===a?void 0:a.update)||void 0===i||i.call(a),e.filterable&&(t.query=e.remote?"":t.selectedLabel,_(t.query),e.multiple?o.value.focus():(e.remote||(t.selectEmitter.emit("elOptionQueryChange",""),t.selectEmitter.emit("elOptionGroupQueryChange")),t.selectedLabel&&(t.currentPlaceholder=t.selectedLabel,t.selectedLabel="")))):(o.value&&o.value.blur(),t.query="",t.previousQuery=null,t.selectedLabel="",t.inputLength=20,t.menuVisibleOnFocus=!1,O(),Mt((()=>{o.value&&""===o.value.value&&0===t.selected.length&&(t.currentPlaceholder=t.cachedPlaceHolder)})),e.multiple||(t.selected&&(e.filterable&&e.allowCreate&&t.createdSelected&&t.createdLabel?t.selectedLabel=t.createdLabel:t.selectedLabel=t.selected.currentLabel,e.filterable&&(t.query=t.selectedLabel)),e.filterable&&(t.currentPlaceholder=t.cachedPlaceHolder))),n.emit("visible-change",l)})),An((()=>[...t.options]),(()=>{var n,l,a;if(is)return;null===(l=null===(n=r.value)||void 0===n?void 0:n.update)||void 0===l||l.call(n),e.multiple&&C();const o=(null===(a=s.value)||void 0===a?void 0:a.querySelectorAll("input"))||[];-1===[].indexOf.call(o,document.activeElement)&&E(),e.defaultFirstOption&&(e.filterable||e.remote)&&t.filteredOptionsCount&&S()})),An((()=>t.hoverIndex),(e=>{"number"==typeof e&&e>-1&&(c.value=t.options[e]||{}),t.options.forEach((e=>{e.hover=c.value===e}))}));const C=()=>{e.collapseTags&&!e.filterable||Mt((()=>{var e,n;if(!a.value)return;const l=a.value.$el.childNodes,o=[].filter.call(l,(e=>"INPUT"===e.tagName))[0],s=i.value,u=t.initialInputHeight||40;o.style.height=0===t.selected.length?u+"px":Math.max(s?s.clientHeight+(s.clientHeight>u?6:0):0,u)+"px",t.visible&&!1!==b.value&&(null===(n=null===(e=r.value)||void 0===e?void 0:e.update)||void 0===n||n.call(e))}))},_=n=>{t.previousQuery===n||t.isOnComposition||(null!==t.previousQuery||"function"!=typeof e.filterMethod&&"function"!=typeof e.remoteMethod?(t.previousQuery=n,Mt((()=>{var e,n;t.visible&&(null===(n=null===(e=r.value)||void 0===e?void 0:e.update)||void 0===n||n.call(e))})),t.hoverIndex=-1,e.multiple&&e.filterable&&Mt((()=>{const n=15*o.value.length+20;t.inputLength=e.collapseTags?Math.min(50,n):n,A(),C()})),e.remote&&"function"==typeof e.remoteMethod?(t.hoverIndex=-1,e.remoteMethod(n)):"function"==typeof e.filterMethod?(e.filterMethod(n),t.selectEmitter.emit("elOptionGroupQueryChange")):(t.filteredOptionsCount=t.optionsCount,t.selectEmitter.emit("elOptionQueryChange",n),t.selectEmitter.emit("elOptionGroupQueryChange")),e.defaultFirstOption&&(e.filterable||e.remote)&&t.filteredOptionsCount&&S()):t.previousQuery=n)},A=()=>{""!==t.currentPlaceholder&&(t.currentPlaceholder=o.value?"":t.cachedPlaceHolder)},S=()=>{t.hoverIndex=-1;let e=!1;for(let n=t.options.length-1;n>=0;n--)if(t.options[n].created){e=!0,t.hoverIndex=n;break}if(!e)for(let e=0;e!==t.options.length;++e){const n=t.options[e];if(t.query){if(!n.disabled&&!n.groupDisabled&&n.visible){t.hoverIndex=e;break}}else if(n.itemSelected){t.hoverIndex=e;break}}},E=()=>{var n;if(!e.multiple){const l=M(e.modelValue);return(null===(n=l.props)||void 0===n?void 0:n.created)?(t.createdLabel=l.props.value,t.createdSelected=!0):t.createdSelected=!1,t.selectedLabel=l.currentLabel,t.selected=l,void(e.filterable&&(t.query=t.selectedLabel))}const l=[];Array.isArray(e.modelValue)&&e.modelValue.forEach((e=>{l.push(M(e))})),t.selected=l,Mt((()=>{C()}))},M=n=>{let l;const a="object"===ns(n).toLowerCase(),o="null"===ns(n).toLowerCase(),r="undefined"===ns(n).toLowerCase();for(let o=t.cachedOptions.length-1;o>=0;o--){const r=t.cachedOptions[o];if(a?ss(r.value,e.valueKey)===ss(n,e.valueKey):r.value===n){l={value:n,currentLabel:r.currentLabel};break}}if(l)return l;const i={value:n,currentLabel:a||o||r?"":n};return e.multiple&&(i.hitState=!1),i},O=()=>{setTimeout((()=>{e.multiple?t.selected.length>0?t.hoverIndex=Math.min.apply(null,t.selected.map((e=>t.options.indexOf(e)))):t.hoverIndex=-1:t.hoverIndex=t.options.indexOf(t.selected)}),300)},D=ko()((()=>{e.filterable&&t.query!==t.selectedLabel&&(t.query=t.selectedLabel,_(t.query))}),g.value),T=ko()((e=>{_(e.target.value)}),g.value),N=t=>{ri()(e.modelValue,t)||n.emit("change",t)},B=l=>{l.stopPropagation();const a=e.multiple?[]:"";n.emit(tu,a),N(a),t.visible=!1,n.emit("clear")},P=(l,a)=>{if(e.multiple){const a=(e.modelValue||[]).slice(),r=V(a,l.value);r>-1?a.splice(r,1):(e.multipleLimit<=0||a.length<e.multipleLimit)&&a.push(l.value),n.emit(tu,a),N(a),l.created&&(t.query="",_(""),t.inputLength=20),e.filterable&&o.value.focus()}else n.emit(tu,l.value),N(l.value),t.visible=!1;t.isSilentBlur=a,I(),t.visible||Mt((()=>{L(l)}))},V=(t=[],n)=>{if(!Qi(n))return t.indexOf(n);const l=e.valueKey;let a=-1;return t.some(((e,t)=>ss(e,l)===ss(n,l)&&(a=t,!0))),a},I=()=>{t.softFocus=!0;const e=o.value||a.value;e&&e.focus()},L=e=>{var t,n,l,a;const o=Array.isArray(e)?null===(t=e[0])||void 0===t?void 0:t.$el:e.$el;if(r.value&&o){const e=null===(a=null===(l=null===(n=r.value)||void 0===n?void 0:n.$el)||void 0===l?void 0:l.querySelector)||void 0===a?void 0:a.call(l,".el-select-dropdown__wrap");e&&Pd(e,o)}},z=e=>{if(!Array.isArray(t.selected))return;const n=t.selected[t.selected.length-1];return n?!0===e||!1===e?(n.hitState=e,e):(n.hitState=!n.hitState,n.hitState):void 0},F=()=>{e.automaticDropdown||h.value||(t.menuVisibleOnFocus?t.menuVisibleOnFocus=!1:t.visible=!t.visible,t.visible&&(o.value||a.value).focus())},$=ua((()=>t.options.filter((e=>e.visible)).every((e=>e.disabled)))),R=e=>{if(t.visible){if(0!==t.options.length&&0!==t.filteredOptionsCount&&!$.value){"next"===e?(t.hoverIndex++,t.hoverIndex===t.options.length&&(t.hoverIndex=0)):"prev"===e&&(t.hoverIndex--,t.hoverIndex<0&&(t.hoverIndex=t.options.length-1));const n=t.options[t.hoverIndex];!0!==n.disabled&&!0!==n.groupDisabled&&n.visible||R(e),Mt((()=>L(c.value)))}}else t.visible=!0};return{selectSize:x,handleResize:()=>{var n,l;(()=>{var e;t.inputWidth=null===(e=a.value)||void 0===e?void 0:e.$el.getBoundingClientRect().width})(),null===(l=null===(n=r.value)||void 0===n?void 0:n.update)||void 0===l||l.call(n),e.multiple&&C()},debouncedOnInputChange:D,debouncedQueryChange:T,deletePrevTag:t=>{if(t.target.value.length<=0&&!z()){const t=e.modelValue.slice();t.pop(),n.emit(tu,t),N(t)}},deleteTag:(l,a)=>{const o=t.selected.indexOf(a);if(o>-1&&!h.value){const t=e.modelValue.slice();t.splice(o,1),n.emit(tu,t),N(t),n.emit("remove-tag",a.value)}l.stopPropagation()},deleteSelected:B,handleOptionSelect:P,scrollToOption:L,readonly:f,resetInputHeight:C,showClose:v,iconClass:m,showNewOption:y,collapseTagSize:k,setSelected:E,managePlaceholder:A,selectDisabled:h,emptyText:b,toggleLastOptionHitState:z,resetInputState:e=>{e.code!==Fs.backspace&&z(!1),t.inputLength=15*o.value.length+20,C()},handleComposition:e=>{const n=e.target.value;if("compositionend"===e.type)t.isOnComposition=!1,Mt((()=>_(n)));else{const e=n[n.length-1]||"";t.isOnComposition=!lu(e)}},onOptionCreate:e=>{t.optionsCount++,t.filteredOptionsCount++,t.options.push(e),t.cachedOptions.push(e)},onOptionDestroy:e=>{e>-1&&(t.optionsCount--,t.filteredOptionsCount--,t.options.splice(e,1))},handleMenuEnter:()=>{Mt((()=>L(t.selected)))},handleFocus:l=>{t.softFocus?t.softFocus=!1:((e.automaticDropdown||e.filterable)&&(t.visible=!0,e.filterable&&(t.menuVisibleOnFocus=!0)),n.emit("focus",l))},blur:()=>{t.visible=!1,a.value.blur()},handleBlur:e=>{Mt((()=>{t.isSilentBlur?t.isSilentBlur=!1:n.emit("blur",e)})),t.softFocus=!1},handleClearClick:e=>{B(e)},handleClose:()=>{t.visible=!1},toggleMenu:F,selectOption:()=>{t.visible?t.options[t.hoverIndex]&&P(t.options[t.hoverIndex],void 0):F()},getValueKey:t=>Qi(t.value)?ss(t.value,e.valueKey):t.value,navigateOptions:R,dropMenuVisible:w,reference:a,input:o,popper:r,tags:i,selectWrapper:s,scrollbar:u}})(e,n,t),{focus:W}=(q=z,{focus:()=>{var e,t;null===(t=null===(e=q.value)||void 0===e?void 0:e.focus)||void 0===t||t.call(e)}});var q;const{inputWidth:Y,selected:K,inputLength:U,filteredOptionsCount:G,visible:X,softFocus:J,selectedLabel:Z,hoverIndex:Q,query:ee,inputHovering:te,currentPlaceholder:ne,menuVisibleOnFocus:le,isOnComposition:ae,isSilentBlur:oe,options:re,cachedOptions:ie,optionsCount:se}=st(n);return Fl(Iv,Ye({props:e,options:re,cachedOptions:ie,optionsCount:se,filteredOptionsCount:G,hoverIndex:Q,handleOptionSelect:p,selectEmitter:n.selectEmitter,onOptionCreate:A,onOptionDestroy:S,selectWrapper:j,selected:K,setSelected:h})),mn((()=>{if(n.cachedPlaceHolder=ne.value=e.placeholder||vc("el.select.placeholder"),e.multiple&&Array.isArray(e.modelValue)&&e.modelValue.length>0&&(ne.value=""),xu(j.value,o),z.value&&z.value.$el){const e={medium:36,small:32,mini:28},t=z.value.input;n.initialInputHeight=t.getBoundingClientRect().height||e[l.value]}e.remote&&e.multiple&&v(),Mt((()=>{z.value.$el&&(Y.value=z.value.$el.getBoundingClientRect().width)})),h()})),yn((()=>{ku(j.value,o)})),e.multiple&&!Array.isArray(e.modelValue)&&t.emit(tu,[]),!e.multiple&&Array.isArray(e.modelValue)&&t.emit(tu,""),{selectSize:l,readonly:a,handleResize:o,collapseTagSize:r,debouncedOnInputChange:i,debouncedQueryChange:s,deletePrevTag:u,deleteTag:c,deleteSelected:d,handleOptionSelect:p,scrollToOption:f,inputWidth:Y,selected:K,inputLength:U,filteredOptionsCount:G,visible:X,softFocus:J,selectedLabel:Z,hoverIndex:Q,query:ee,inputHovering:te,currentPlaceholder:ne,menuVisibleOnFocus:le,isOnComposition:ae,isSilentBlur:oe,options:re,resetInputHeight:v,managePlaceholder:m,showClose:g,selectDisabled:b,iconClass:y,showNewOption:x,emptyText:k,toggleLastOptionHitState:w,resetInputState:C,handleComposition:_,handleMenuEnter:E,handleFocus:M,blur:O,handleBlur:D,handleClearClick:T,handleClose:N,toggleMenu:B,selectOption:P,getValueKey:V,navigateOptions:I,dropMenuVisible:L,focus:W,reference:z,input:F,popper:$,tags:R,selectWrapper:j,scrollbar:H}}});const $v={class:"select-trigger"},Rv={key:0},jv={class:"el-select__tags-text"},Hv={class:"el-select__tags-text"},Wv={class:"el-select__tags-text"},qv={key:1,class:"el-select-dropdown__empty"};Fv.render=function(e,t,n,l,a,o){const r=pl("el-tag"),i=pl("el-input"),s=pl("el-option"),u=pl("el-scrollbar"),c=pl("el-select-menu"),p=pl("el-popper"),f=hl("clickOutside");return Un((Cl(),Al("div",{ref:"selectWrapper",class:["el-select",[e.selectSize?"el-select--"+e.selectSize:""]],onClick:t[26]||(t[26]=co(((...t)=>e.toggleMenu(...t)),["stop"]))},[Tl(p,{ref:"popper",visible:e.dropMenuVisible,"onUpdate:visible":t[25]||(t[25]=t=>e.dropMenuVisible=t),placement:"bottom-start","append-to-body":e.popperAppendToBody,"popper-class":"el-select__popper "+e.popperClass,"manual-mode":"",effect:"light",pure:"",trigger:"click",transition:"el-zoom-in-top","gpu-acceleration":!1,onBeforeEnter:e.handleMenuEnter},{trigger:en((()=>[Tl("div",$v,[e.multiple?(Cl(),Al("div",{key:0,ref:"tags",class:"el-select__tags",style:{"max-width":e.inputWidth-32+"px",width:"100%"}},[e.collapseTags&&e.selected.length?(Cl(),Al("span",Rv,[Tl(r,{closable:!e.selectDisabled,size:e.collapseTagSize,hit:e.selected[0].hitState,type:"info","disable-transitions":"",onClose:t[1]||(t[1]=t=>e.deleteTag(t,e.selected[0]))},{default:en((()=>[Tl("span",jv,d(e.selected[0].currentLabel),1)])),_:1},8,["closable","size","hit"]),e.selected.length>1?(Cl(),Al(r,{key:0,closable:!1,size:e.collapseTagSize,type:"info","disable-transitions":""},{default:en((()=>[Tl("span",Hv,"+ "+d(e.selected.length-1),1)])),_:1},8,["size"])):Pl("v-if",!0)])):Pl("v-if",!0),Pl(" <div> "),e.collapseTags?Pl("v-if",!0):(Cl(),Al(Pa,{key:1,onAfterLeave:e.resetInputHeight},{default:en((()=>[Tl("span",null,[(Cl(!0),Al(gl,null,da(e.selected,(t=>(Cl(),Al(r,{key:e.getValueKey(t),closable:!e.selectDisabled,size:e.collapseTagSize,hit:t.hitState,type:"info","disable-transitions":"",onClose:n=>e.deleteTag(n,t)},{default:en((()=>[Tl("span",Wv,d(t.currentLabel),1)])),_:2},1032,["closable","size","hit","onClose"])))),128))])])),_:1},8,["onAfterLeave"])),Pl(" </div> "),e.filterable?Un((Cl(),Al("input",{key:2,ref:"input","onUpdate:modelValue":t[2]||(t[2]=t=>e.query=t),type:"text",class:["el-select__input",[e.selectSize?"is-"+e.selectSize:""]],disabled:e.selectDisabled,autocomplete:e.autocomplete,style:{"flex-grow":"1",width:e.inputLength/(e.inputWidth-32)+"%","max-width":e.inputWidth-42+"px"},onFocus:t[3]||(t[3]=(...t)=>e.handleFocus(...t)),onBlur:t[4]||(t[4]=t=>e.softFocus=!1),onKeyup:t[5]||(t[5]=(...t)=>e.managePlaceholder(...t)),onKeydown:[t[6]||(t[6]=(...t)=>e.resetInputState(...t)),t[7]||(t[7]=fo(co((t=>e.navigateOptions("next")),["prevent"]),["down"])),t[8]||(t[8]=fo(co((t=>e.navigateOptions("prev")),["prevent"]),["up"])),t[9]||(t[9]=fo(co((t=>e.visible=!1),["stop","prevent"]),["esc"])),t[10]||(t[10]=fo(co(((...t)=>e.selectOption(...t)),["stop","prevent"]),["enter"])),t[11]||(t[11]=fo(((...t)=>e.deletePrevTag(...t)),["delete"])),t[12]||(t[12]=fo((t=>e.visible=!1),["tab"]))],onCompositionstart:t[13]||(t[13]=(...t)=>e.handleComposition(...t)),onCompositionupdate:t[14]||(t[14]=(...t)=>e.handleComposition(...t)),onCompositionend:t[15]||(t[15]=(...t)=>e.handleComposition(...t)),onInput:t[16]||(t[16]=(...t)=>e.debouncedQueryChange(...t))},null,46,["disabled","autocomplete"])),[[no,e.query]]):Pl("v-if",!0)],4)):Pl("v-if",!0),Tl(i,{id:e.id,ref:"reference",modelValue:e.selectedLabel,"onUpdate:modelValue":t[18]||(t[18]=t=>e.selectedLabel=t),type:"text",placeholder:e.currentPlaceholder,name:e.name,autocomplete:e.autocomplete,size:e.selectSize,disabled:e.selectDisabled,readonly:e.readonly,"validate-event":!1,class:{"is-focus":e.visible},tabindex:e.multiple&&e.filterable?"-1":null,onFocus:e.handleFocus,onBlur:e.handleBlur,onInput:e.debouncedOnInputChange,onPaste:e.debouncedOnInputChange,onKeydown:[t[19]||(t[19]=fo(co((t=>e.navigateOptions("next")),["stop","prevent"]),["down"])),t[20]||(t[20]=fo(co((t=>e.navigateOptions("prev")),["stop","prevent"]),["up"])),fo(co(e.selectOption,["stop","prevent"]),["enter"]),t[21]||(t[21]=fo(co((t=>e.visible=!1),["stop","prevent"]),["esc"])),t[22]||(t[22]=fo((t=>e.visible=!1),["tab"]))],onMouseenter:t[23]||(t[23]=t=>e.inputHovering=!0),onMouseleave:t[24]||(t[24]=t=>e.inputHovering=!1)},fa({suffix:en((()=>[Un(Tl("i",{class:["el-select__caret","el-input__icon","el-icon-"+e.iconClass]},null,2),[[ho,!e.showClose]]),e.showClose?(Cl(),Al("i",{key:0,class:"el-select__caret el-input__icon "+e.clearIcon,onClick:t[17]||(t[17]=(...t)=>e.handleClearClick(...t))},null,2)):Pl("v-if",!0)])),_:2},[e.$slots.prefix?{name:"prefix",fn:en((()=>[Zt(e.$slots,"prefix")]))}:void 0]),1032,["id","modelValue","placeholder","name","autocomplete","size","disabled","readonly","class","tabindex","onFocus","onBlur","onInput","onPaste","onKeydown"])])])),default:en((()=>[Tl(c,null,{default:en((()=>[Un(Tl(u,{ref:"scrollbar",tag:"ul","wrap-class":"el-select-dropdown__wrap","view-class":"el-select-dropdown__list",class:{"is-empty":!e.allowCreate&&e.query&&0===e.filteredOptionsCount}},{default:en((()=>[e.showNewOption?(Cl(),Al(s,{key:0,value:e.query,created:!0},null,8,["value"])):Pl("v-if",!0),Zt(e.$slots,"default")])),_:3},8,["class"]),[[ho,e.options.length>0&&!e.loading]]),e.emptyText&&(!e.allowCreate||e.loading||e.allowCreate&&0===e.options.length)?(Cl(),Al(gl,{key:0},[e.$slots.empty?Zt(e.$slots,"empty",{key:0}):(Cl(),Al("p",qv,d(e.emptyText),1))],64)):Pl("v-if",!0)])),_:1})])),_:1},8,["visible","append-to-body","popper-class","onBeforeEnter"])],2)),[[f,e.handleClose]])},Fv.__file="packages/select/src/select.vue",Fv.install=e=>{e.component(Fv.name,Fv)},Lv.install=e=>{e.component(Lv.name,Lv)};var Yv=Qn({name:"ElOptionGroup",componentName:"ElOptionGroup",props:{label:String,disabled:{type:Boolean,default:!1}},setup(e){const t=tt(!0);Fl(Vv,Ye(Object.assign({},st(e))));const n=$l(Iv);return n.selectEmitter.on("elOptionGroupQueryChange",(()=>{var e;t.value=null===(e=null==n?void 0:n.options)||void 0===e?void 0:e.some((e=>!0===e.visible))})),{visible:t}}});const Kv={class:"el-select-group__wrap"},Uv={class:"el-select-group__title"},Gv={class:"el-select-group"};Yv.render=function(e,t,n,l,a,o){return Un((Cl(),Al("ul",Kv,[Tl("li",Uv,d(e.label),1),Tl("li",null,[Tl("ul",Gv,[Zt(e.$slots,"default")])])],512)),[[ho,e.visible]])},Yv.__file="packages/select/src/option-group.vue",Yv.install=e=>{e.component(Yv.name,Yv)};var Xv=Qn({name:"ElPageHeader",props:{title:{type:String,default:()=>vc("el.pageHeader.title")},content:{type:String,default:""}},emits:["back"],setup:(e,{emit:t})=>({handleClick:function(){t("back")}})});const Jv={class:"el-page-header"},Zv=Tl("i",{class:"el-icon-back"},null,-1),Qv={class:"el-page-header__title"},em={class:"el-page-header__content"};Xv.render=function(e,t,n,l,a,o){return Cl(),Al("div",Jv,[Tl("div",{class:"el-page-header__left",onClick:t[1]||(t[1]=(...t)=>e.handleClick(...t))},[Zv,Tl("div",Qv,[Zt(e.$slots,"title",{},(()=>[Bl(d(e.title),1)]))])]),Tl("div",em,[Zt(e.$slots,"content",{},(()=>[Bl(d(e.content),1)]))])])},Xv.__file="packages/page-header/src/index.vue",Xv.install=e=>{e.component(Xv.name,Xv)};var tm=Qn({name:"Prev",props:{disabled:Boolean,currentPage:{type:Number,default:1},prevText:{type:String,default:""}},setup:e=>({internalDisabled:ua((()=>e.disabled||e.currentPage<=1))})});const nm={key:0},lm={key:1,class:"el-icon el-icon-arrow-left"};tm.render=function(e,t,n,l,a,o){return Cl(),Al("button",{type:"button",class:"btn-prev",disabled:e.internalDisabled,onClick:t[1]||(t[1]=co((()=>{}),["self","prevent"]))},[e.prevText?(Cl(),Al("span",nm,d(e.prevText),1)):(Cl(),Al("i",lm))],8,["disabled"])},tm.__file="packages/pagination/src/prev.vue";var am=Qn({name:"Next",props:{disabled:Boolean,currentPage:{type:Number,default:1},pageCount:{type:Number,default:50},nextText:{type:String,default:""}},setup:e=>({internalDisabled:ua((()=>e.disabled||e.currentPage===e.pageCount||0===e.pageCount))})});const om={key:0},rm={key:1,class:"el-icon el-icon-arrow-right"};am.render=function(e,t,n,l,a,o){return Cl(),Al("button",{type:"button",class:"btn-next",disabled:e.internalDisabled,onClick:t[1]||(t[1]=co((()=>{}),["self","prevent"]))},[e.nextText?(Cl(),Al("span",om,d(e.nextText),1)):(Cl(),Al("i",rm))],8,["disabled"])},am.__file="packages/pagination/src/next.vue";const im=()=>{const e=$l("pagination",{});return{pagination:e,pageCount:e.pageCount,disabled:e.disabled,currentPage:e.currentPage}};var sm=Qn({name:"Sizes",components:{ElSelect:Fv,ElOption:Lv},props:{pageSize:Number,pageSizes:{type:Array,default:()=>[10,20,30,40,50,100]},popperClass:{type:String,default:""},disabled:Boolean},emits:["page-size-change"],setup(e,{emit:t}){const{pagination:n}=im(),l=tt(e.pageSize);An((()=>e.pageSizes),((n,l)=>{if(!ri()(n,l)&&Array.isArray(n)){const l=n.indexOf(e.pageSize)>-1?e.pageSize:e.pageSizes[0];t("page-size-change",l)}})),An((()=>e.pageSize),(e=>{l.value=e}));const a=ua((()=>e.pageSizes));return{t:vc,innerPagesizes:a,innerPageSize:l,handleChange:function(e){e!==l.value&&(l.value=e,null==n||n.handleSizesChange(Number(e)))}}}});const um={class:"el-pagination__sizes"};sm.render=function(e,t,n,l,a,o){const r=pl("el-option"),i=pl("el-select");return Cl(),Al("span",um,[Tl(i,{"model-value":e.innerPageSize,disabled:e.disabled,"popper-class":e.popperClass,size:"mini",onChange:e.handleChange},{default:en((()=>[(Cl(!0),Al(gl,null,da(e.innerPagesizes,(t=>(Cl(),Al(r,{key:t,value:t,label:t+e.t("el.pagination.pagesize")},null,8,["value","label"])))),128))])),_:1},8,["model-value","disabled","popper-class","onChange"])])},sm.__file="packages/pagination/src/sizes.vue";var cm=Qn({components:{ElInput:cu},setup(){const{pagination:e,pageCount:t,disabled:n,currentPage:l}=im(),a=tt(null),o=ua((()=>{var e;return null!==(e=a.value)&&void 0!==e?e:l.value}));return{t:vc,userInput:a,pageCount:t,disabled:n,handleInput:function(e){a.value=Number(e)},handleChange:function(t){null==e||e.changeEvent(Number(t)),a.value=null},innerValue:o}}});const dm={class:"el-pagination__jump"};cm.render=function(e,t,n,l,a,o){const r=pl("el-input");return Cl(),Al("span",dm,[Bl(d(e.t("el.pagination.goto"))+" ",1),Tl(r,{class:"el-pagination__editor is-in-pagination",min:1,max:e.pageCount,disabled:e.disabled,"model-value":e.innerValue,type:"number","onUpdate:modelValue":e.handleInput,onChange:e.handleChange},null,8,["max","disabled","model-value","onUpdate:modelValue","onChange"]),Bl(" "+d(e.t("el.pagination.pageClassifier")),1)])},cm.__file="packages/pagination/src/jumper.vue";var pm=Qn({name:"Total",props:{total:{type:Number,default:1e3}},setup:()=>({t:vc})});const fm={class:"el-pagination__total"};pm.render=function(e,t,n,l,a,o){return Cl(),Al("span",fm,d(e.t("el.pagination.total",{total:e.total})),1)},pm.__file="packages/pagination/src/total.vue";var hm=Qn({name:"ElPager",props:{currentPage:{type:Number,default:1},pageCount:{type:Number},pagerCount:{type:Number,default:7},disabled:Boolean},emits:["change"],setup(e,{emit:t}){const n=tt(!1),l=tt(!1),a=tt("el-icon-more"),o=tt("el-icon-more"),r=ua((()=>{const t=e.pagerCount,n=(t-1)/2,l=Number(e.currentPage),a=Number(e.pageCount);let o=!1,r=!1;a>t&&(l>t-n&&(o=!0),l<a-n&&(r=!0));const i=[];if(o&&!r)for(let e=a-(t-2);e<a;e++)i.push(e);else if(!o&&r)for(let e=2;e<t;e++)i.push(e);else if(o&&r){const e=Math.floor(t/2)-1;for(let t=l-e;t<=l+e;t++)i.push(t)}else for(let e=2;e<a;e++)i.push(e);return i}));return Cn((()=>{const t=(e.pagerCount-1)/2;n.value=!1,l.value=!1,e.pageCount>e.pagerCount&&(e.currentPage>e.pagerCount-t&&(n.value=!0),e.currentPage<e.pageCount-t&&(l.value=!0))})),Cn((()=>{n.value||(o.value="el-icon-more")})),Cn((()=>{l.value||(a.value="el-icon-more")})),{showPrevMore:n,showNextMore:l,quicknextIconClass:a,quickprevIconClass:o,pagers:r,onMouseenter:function(t){e.disabled||("left"===t?o.value="el-icon-d-arrow-left":a.value="el-icon-d-arrow-right")},onPagerClick:function(n){const l=n.target;if("ul"===l.tagName.toLowerCase()||e.disabled)return;let a=Number(l.textContent);const o=e.pageCount,r=e.currentPage,i=e.pagerCount-2;l.className.includes("more")&&(l.className.includes("quickprev")?a=r-i:l.className.includes("quicknext")&&(a=r+i)),isNaN(a)||(a<1&&(a=1),a>o&&(a=o)),a!==r&&t("change",a)}}}});hm.render=function(e,t,n,l,a,o){return Cl(),Al("ul",{class:"el-pager",onClick:t[5]||(t[5]=(...t)=>e.onPagerClick(...t))},[e.pageCount>0?(Cl(),Al("li",{key:0,class:[{active:1===e.currentPage,disabled:e.disabled},"number"]}," 1 ",2)):Pl("v-if",!0),e.showPrevMore?(Cl(),Al("li",{key:1,class:["el-icon more btn-quickprev",[e.quickprevIconClass,{disabled:e.disabled}]],onMouseenter:t[1]||(t[1]=t=>e.onMouseenter("left")),onMouseleave:t[2]||(t[2]=t=>e.quickprevIconClass="el-icon-more")},null,34)):Pl("v-if",!0),(Cl(!0),Al(gl,null,da(e.pagers,(t=>(Cl(),Al("li",{key:t,class:[{active:e.currentPage===t,disabled:e.disabled},"number"]},d(t),3)))),128)),e.showNextMore?(Cl(),Al("li",{key:2,class:["el-icon more btn-quicknext",[e.quicknextIconClass,{disabled:e.disabled}]],onMouseenter:t[3]||(t[3]=t=>e.onMouseenter("right")),onMouseleave:t[4]||(t[4]=t=>e.quicknextIconClass="el-icon-more")},null,34)):Pl("v-if",!0),e.pageCount>1?(Cl(),Al("li",{key:3,class:[{active:e.currentPage===e.pageCount,disabled:e.disabled},"number"]},d(e.pageCount),3)):Pl("v-if",!0)])},hm.__file="packages/pagination/src/pager.vue";const vm=e=>Number.isNaN(e)?10:e;var mm=Qn({name:"ElPagination",components:{Prev:tm,Next:am,Sizes:sm,Jumper:cm,Total:pm,Pager:hm},props:{pageSize:{type:Number,default:10},small:Boolean,total:{type:Number},pageCount:{type:Number},pagerCount:{type:Number,validator:e=>(0|e)===e&&e>4&&e<22&&e%2==1,default:7},currentPage:{type:Number,default:1},layout:{type:String,default:"prev, pager, next, jumper, ->, total"},pageSizes:{type:Array,default:()=>[10,20,30,40,50,100]},popperClass:{type:String,default:""},prevText:{type:String,default:""},nextText:{type:String,default:""},background:Boolean,disabled:Boolean,hideOnSinglePage:Boolean},emits:["size-change","current-change","prev-click","next-click","update:currentPage","update:pageSize"],setup(e,{emit:t}){const n=tt(-1),l=tt(!1),a=tt(vm(e.pageSize)),o=ua((()=>"number"==typeof e.total?Math.max(1,Math.ceil(e.total/a.value)):"number"==typeof e.pageCount?Math.max(1,e.pageCount):null)),r=tt(u(e.currentPage));function i(){Mt((()=>{(r.value!==n.value||l.value)&&(n.value=r.value,l.value=!1)}))}function s(e){r.value=u(e),l.value=!0}function u(e){let t;return"string"==typeof e&&(e=parseInt(e,10)),"number"==typeof o.value?e<1?t=1:e>o.value&&(t=o.value):(isNaN(e)||e<1)&&(t=1),(void 0===t&&isNaN(e)||0===t)&&(t=1),void 0===t?e:t}return An((()=>u(e.currentPage)),(e=>{r.value=e})),An((()=>e.pageSize),(e=>{a.value=vm(e)})),An(r,(e=>{t("update:currentPage",e),t("current-change",e)})),An((()=>o.value),(e=>{const t=r.value;e>0&&0===t?r.value=1:t>e&&(r.value=0===e?1:e,l.value&&i()),l.value=!1})),Fl("pagination",{pageCount:ua((()=>e.pageCount)),disabled:ua((()=>e.disabled)),currentPage:ua((()=>r.value)),changeEvent:s,handleSizesChange:function(e){l.value=!0,a.value=e,t("size-change",e)}}),{internalCurrentPage:r,internalPageSize:a,lastEmittedPage:n,userChangePageSize:l,internalPageCount:o,getValidCurrentPage:u,emitChange:i,handleCurrentChange:s,prev:function(){if(e.disabled)return;const n=r.value-1;r.value=u(n),t("prev-click",r),i()},next:function(){if(e.disabled)return;const n=r.value+1;r.value=u(n),t("next-click",r.value),i()}}},render(){var e,t,n;const l=this.layout;if(!l)return null;if(this.hideOnSinglePage&&(!this.internalPageCount||1===this.internalPageCount))return null;const a=ca("div",{class:["el-pagination",{"is-background":this.background,"el-pagination--small":this.small}]}),o=[],r=ca("div",{class:"el-pagination__rightwrapper"}),i={prev:ca(tm,{disabled:this.disabled,currentPage:this.internalCurrentPage,prevText:this.prevText,onClick:this.prev}),jumper:ca(cm),pager:ca(hm,{currentPage:this.internalCurrentPage,pageCount:this.internalPageCount,pagerCount:this.pagerCount,onChange:this.handleCurrentChange,disabled:this.disabled}),next:ca(am,{disabled:this.disabled,currentPage:this.internalCurrentPage,pageCount:this.internalPageCount,nextText:this.nextText,onClick:this.next}),sizes:ca(sm,{pageSize:this.pageSize,pageSizes:this.pageSizes,popperClass:this.popperClass,disabled:this.disabled}),slot:null!==(n=null===(t=null===(e=this.$slots)||void 0===e?void 0:e.default)||void 0===t?void 0:t.call(e))&&void 0!==n?n:null,total:ca(pm,{total:this.total})},s=l.split(",").map((e=>e.trim()));let u=!1;return s.forEach((e=>{"->"!==e?u||o.push(i[e]):u=!0})),u&&o.unshift(r),ca(a,{},o)}});mm.install=e=>{e.component(mm.name,mm)};var gm=Qn({name:"ElPopconfirm",components:{ElButton:sc,ElPopper:Ku},props:{title:{type:String},confirmButtonText:{type:String},cancelButtonText:{type:String},confirmButtonType:{type:String,default:"primary"},cancelButtonType:{type:String,default:"text"},icon:{type:String,default:"el-icon-question"},iconColor:{type:String,default:"#f90"},hideIcon:{type:Boolean,default:!1}},emits:["confirm","cancel"],setup(e,{emit:t}){const n=tt(!1),l=ua((()=>e.confirmButtonText||vc("el.popconfirm.confirmButtonText"))),a=ua((()=>e.cancelButtonText||vc("el.popconfirm.cancelButtonText")));return{visible:n,confirm:()=>{n.value=!1,t("confirm")},cancel:()=>{n.value=!1,t("cancel")},confirmButtonText_:l,cancelButtonText_:a}}});const bm={class:"el-popconfirm"},ym={class:"el-popconfirm__main"},xm={class:"el-popconfirm__action"};gm.render=function(e,t,n,l,a,o){const r=pl("el-button"),i=pl("el-popper");return Cl(),Al(i,{visible:e.visible,"onUpdate:visible":t[1]||(t[1]=t=>e.visible=t),trigger:["click"],effect:"light","popper-class":"el-popover","append-to-body":""},{trigger:en((()=>[Zt(e.$slots,"reference")])),default:en((()=>[Tl("div",bm,[Tl("p",ym,[e.hideIcon?Pl("v-if",!0):(Cl(),Al("i",{key:0,class:[e.icon,"el-popconfirm__icon"],style:{color:e.iconColor}},null,6)),Bl(" "+d(e.title),1)]),Tl("div",xm,[Tl(r,{size:"mini",type:e.cancelButtonType,onClick:e.cancel},{default:en((()=>[Bl(d(e.cancelButtonText_),1)])),_:1},8,["type","onClick"]),Tl(r,{size:"mini",type:e.confirmButtonType,onClick:e.confirm},{default:en((()=>[Bl(d(e.confirmButtonText_),1)])),_:1},8,["type","onClick"])])])])),_:1},8,["visible"])},gm.__file="packages/popconfirm/src/index.vue",gm.install=e=>{e.component(gm.name,gm)};const km={key:0,class:"el-popover__title",role:"title"};var wm=Qn({name:"ElPopover",components:{ElPopper:Ku},props:Object.assign(Object.assign({},ju),{content:{type:String},trigger:{type:String,default:"click"},title:{type:String},transition:{type:String,default:"fade-in-linear"},width:{type:[String,Number],default:150},appendToBody:{type:Boolean,default:!0}}),emits:["update:visible","after-enter","after-leave","show","hide"],setup:(e,t)=>("production"!==process.env.NODE_EVN&&e.visible&&!t.slots.reference&&console.warn(new Ls("[ElPopover] \n        You cannot init popover without given reference\n      ")),function(e,t){const n=ua((()=>{let t;return t=Zi(e.width)?e.width:e.width+"px",{width:t,zIndex:Fu.nextZIndex()}})),l=Hu(e,t);return An(l.visibility,(e=>{t.emit(e?"show":"hide")})),Object.assign(Object.assign({},l),{popperStyle:n})}(e,t)),render(){const{$slots:e}=this,t=e.reference?e.reference():null,n=(l=this.title,a=km,o=d(this.title),r=Eu.TEXT,l?Tu("div",a,o,r,void 0):Pl("v-if",!0));var l,a,o,r;const i=Zt(e,"default",{},(()=>[Bl(d(this.content),Eu.TEXT)])),{events:s,onAfterEnter:u,onAfterLeave:c,onPopperMouseEnter:p,onPopperMouseLeave:f,popperStyle:h,popperId:v,popperClass:m,showArrow:g,transition:b,visibility:y}=this,x=[this.content?"el-popover--plain":"","el-popover",m].join(" ");let k=Wu({effect:Ru.LIGHT,name:b,popperClass:x,popperStyle:h,popperId:v,visibility:y,onMouseEnter:p,onMouseLeave:f,onAfterEnter:u,onAfterLeave:c,stopPopperMouseEvent:!0},[n,i,Yu(g)]);const w=t?qu(t,Object.assign({ariaDescribedby:v,ref:"triggerRef",onMouseDown:Ps,onMouseUp:Ps},s)):Pl("v-if",!0);return Tu(gl,null,["click"===this.trigger?Un(w,[[Xs,this.hide]]):w,Tl(cl,{disabled:!this.appendToBody,to:"body"},[k],Eu.PROPS,["disabled"])])}});wm.__file="packages/popover/src/index.vue";const Cm=(e,t,n)=>{const l=t.arg||t.value,a=n.dirs[0].instance.$refs[l];a&&(a.triggerRef=e,Object.entries(a.events).map((([t,n])=>{As(e,t.toLowerCase().slice(2),n)})))};var _m={mounted(e,t,n){Cm(e,t,n)},updated(e,t,n){Cm(e,t,n)}};wm.install=e=>{e.component(wm.name,wm),e.directive("popover",_m)},wm.directive=_m;var Am=Qn({name:"ElProgress",props:{type:{type:String,default:"line",validator:e=>["line","circle","dashboard"].indexOf(e)>-1},percentage:{type:Number,default:0,required:!0,validator:e=>e>=0&&e<=100},status:{type:String,default:"",validator:e=>["","success","exception","warning"].indexOf(e)>-1},strokeWidth:{type:Number,default:6},strokeLinecap:{type:String,default:"round"},textInside:{type:Boolean,default:!1},width:{type:Number,default:126},showText:{type:Boolean,default:!0},color:{type:[String,Array,Function],default:""},format:{type:Function,default:e=>e+"%"}},setup(e){const t=ua((()=>({width:e.percentage+"%",backgroundColor:h(e.percentage)}))),n=ua((()=>(e.strokeWidth/e.width*100).toFixed(1))),l=ua((()=>"circle"===e.type||"dashboard"===e.type?parseInt(""+(50-parseFloat(n.value)/2),10):0)),a=ua((()=>{const t=l.value,n="dashboard"===e.type;return`\n          M 50 50\n          m 0 ${n?"":"-"}${t}\n          a ${t} ${t} 0 1 1 0 ${n?"-":""}${2*t}\n          a ${t} ${t} 0 1 1 0 ${n?"":"-"}${2*t}\n          `})),o=ua((()=>2*Math.PI*l.value)),r=ua((()=>"dashboard"===e.type?.75:1)),i=ua((()=>-1*o.value*(1-r.value)/2+"px")),s=ua((()=>({strokeDasharray:`${o.value*r.value}px, ${o.value}px`,strokeDashoffset:i.value}))),u=ua((()=>({strokeDasharray:`${o.value*r.value*(e.percentage/100)}px, ${o.value}px`,strokeDashoffset:i.value,transition:"stroke-dasharray 0.6s ease 0s, stroke 0.6s ease"}))),c=ua((()=>{let t;if(e.color)t=h(e.percentage);else switch(e.status){case"success":t="#13ce66";break;case"exception":t="#ff4949";break;case"warning":t="#e6a23c";break;default:t="#20a0ff"}return t})),d=ua((()=>"warning"===e.status?"el-icon-warning":"line"===e.type?"success"===e.status?"el-icon-circle-check":"el-icon-circle-close":"success"===e.status?"el-icon-check":"el-icon-close")),p=ua((()=>"line"===e.type?12+.4*e.strokeWidth:.111111*e.width+2)),f=ua((()=>e.format(e.percentage))),h=t=>{var n;const{color:l}=e;if("function"==typeof l)return l(t);if("string"==typeof l)return l;{const e=100/l.length,a=l.map(((t,n)=>"string"==typeof t?{color:t,percentage:(n+1)*e}:t)).sort(((e,t)=>e.percentage-t.percentage));for(let e=0;e<a.length;e++)if(a[e].percentage>t)return a[e].color;return null===(n=a[a.length-1])||void 0===n?void 0:n.color}};return{barStyle:t,relativeStrokeWidth:n,radius:l,trackPath:a,perimeter:o,rate:r,strokeDashoffset:i,trailPathStyle:s,circlePathStyle:u,stroke:c,iconClass:d,progressTextSize:p,content:f,getCurrentColor:h}}});const Sm={key:0,class:"el-progress-bar"},Em={key:0,class:"el-progress-bar__innerText"},Mm={viewBox:"0 0 100 100"};Am.render=function(e,t,n,l,a,o){return Cl(),Al("div",{class:["el-progress",["el-progress--"+e.type,e.status?"is-"+e.status:"",{"el-progress--without-text":!e.showText,"el-progress--text-inside":e.textInside}]],role:"progressbar","aria-valuenow":e.percentage,"aria-valuemin":"0","aria-valuemax":"100"},["line"===e.type?(Cl(),Al("div",Sm,[Tl("div",{class:"el-progress-bar__outer",style:{height:e.strokeWidth+"px"}},[Tl("div",{class:"el-progress-bar__inner",style:e.barStyle},[e.showText&&e.textInside?(Cl(),Al("div",Em,d(e.content),1)):Pl("v-if",!0)],4)],4)])):(Cl(),Al("div",{key:1,class:"el-progress-circle",style:{height:e.width+"px",width:e.width+"px"}},[(Cl(),Al("svg",Mm,[Tl("path",{class:"el-progress-circle__track",d:e.trackPath,stroke:"#e5e9f2","stroke-width":e.relativeStrokeWidth,fill:"none",style:e.trailPathStyle},null,12,["d","stroke-width"]),Tl("path",{class:"el-progress-circle__path",d:e.trackPath,stroke:e.stroke,fill:"none","stroke-linecap":e.strokeLinecap,"stroke-width":e.percentage?e.relativeStrokeWidth:0,style:e.circlePathStyle},null,12,["d","stroke","stroke-linecap","stroke-width"])]))],4)),e.showText&&!e.textInside?(Cl(),Al("div",{key:2,class:"el-progress__text",style:{fontSize:e.progressTextSize+"px"}},[e.status?(Cl(),Al("i",{key:1,class:e.iconClass},null,2)):(Cl(),Al(gl,{key:0},[Bl(d(e.content),1)],64))],4)):Pl("v-if",!0)],10,["aria-valuenow"])},Am.__file="packages/progress/src/index.vue",Am.install=e=>{e.component(Am.name,Am)};var Om=Qn({name:"ElRadioButton",props:{label:{type:[Boolean,String,Number],default:""},disabled:Boolean,name:{type:String,default:""}},setup(e){const{isGroup:t,radioGroup:n,elFormItemSize:l,ELEMENT:a,focus:o,elForm:r}=md(),i=ua((()=>n.radioGroupSize||l.value||a.size)),s=ua({get:()=>n.modelValue,set(e){n.changeEvent(e)}}),{isDisabled:u,tabIndex:c}=gd(e,{model:s,elForm:r,radioGroup:n,isGroup:t});return{isGroup:t,size:i,isDisabled:u,tabIndex:c,value:s,focus:o,activeStyle:ua((()=>({backgroundColor:n.fill||"",borderColor:n.fill||"",boxShadow:n.fill?"-1px 0 0 0 "+n.fill:"",color:n.textColor||""})))}}});Om.render=function(e,t,n,l,a,o){return Cl(),Al("label",{class:["el-radio-button",[e.size?"el-radio-button--"+e.size:"",{"is-active":e.value===e.label,"is-disabled":e.isDisabled,"is-focus":e.focus}]],role:"radio","aria-checked":e.value===e.label,"aria-disabled":e.isDisabled,tabindex:e.tabIndex,onKeydown:t[5]||(t[5]=fo(co((t=>e.value=e.isDisabled?e.value:e.label),["stop","prevent"]),["space"]))},[Un(Tl("input",{"onUpdate:modelValue":t[1]||(t[1]=t=>e.value=t),class:"el-radio-button__orig-radio",value:e.label,type:"radio",name:e.name,disabled:e.isDisabled,tabindex:"-1",onFocus:t[2]||(t[2]=t=>e.focus=!0),onBlur:t[3]||(t[3]=t=>e.focus=!1)},null,40,["value","name","disabled"]),[[oo,e.value]]),Tl("span",{class:"el-radio-button__inner",style:e.value===e.label?e.activeStyle:null,onKeydown:t[4]||(t[4]=co((()=>{}),["stop"]))},[Zt(e.$slots,"default",{},(()=>[Bl(d(e.label),1)]))],36)],42,["aria-checked","aria-disabled","tabindex"])},Om.__file="packages/radio/src/radio-button.vue",Om.install=e=>{e.component(Om.name,Om)};var Dm=Qn({name:"ElRadioGroup",componentName:"ElRadioGroup",props:{modelValue:{type:[Boolean,String,Number],default:""},size:{type:String,validator:au},fill:{type:String,default:""},textColor:{type:String,default:""},disabled:Boolean},emits:[tu,"change"],setup(e,t){const n=tt(null),l=$l("elFormItem",{}),a=ua((()=>e.size||l.size));return Fl("RadioGroup",Ye(Object.assign(Object.assign({name:"ElRadioGroup"},st(e)),{radioGroupSize:a,changeEvent:e=>{t.emit(tu,e),Mt((()=>{t.emit("change",e)}))}}))),An((()=>e.modelValue),(e=>{var t;null===(t=l.formItemMitt)||void 0===t||t.emit("el.form.change",[e])})),mn((()=>{const e=n.value.querySelectorAll("[type=radio]"),t=e[0];!Array.from(e).some((e=>e.checked))&&t&&(t.tabIndex=0)})),{handleKeydown:e=>{const t=e.target,l="INPUT"===t.nodeName?"[type=radio]":"[role=radio]",a=n.value.querySelectorAll(l),o=a.length,r=Array.from(a).indexOf(t),i=n.value.querySelectorAll("[role=radio]");let s=null;switch(e.code){case Fs.left:case Fs.up:e.stopPropagation(),e.preventDefault(),s=0===r?o-1:r-1;break;case Fs.right:case Fs.down:e.stopPropagation(),e.preventDefault(),s=r===o-1?0:r+1}null!==s&&(i[s].click(),i[s].focus())},radioGroupSize:a,radioGroup:n}}});Dm.render=function(e,t,n,l,a,o){return Cl(),Al("div",{ref:"radioGroup",class:"el-radio-group",role:"radiogroup",onKeydown:t[1]||(t[1]=(...t)=>e.handleKeydown(...t))},[Zt(e.$slots,"default")],544)},Dm.__file="packages/radio/src/radio-group.vue",Dm.install=e=>{e.component(Dm.name,Dm)};var Tm=Qn({name:"ElRate",props:{modelValue:{type:Number,default:0},lowThreshold:{type:Number,default:2},highThreshold:{type:Number,default:4},max:{type:Number,default:5},colors:{type:[Array,Object],default:()=>["#F7BA2A","#F7BA2A","#F7BA2A"]},voidColor:{type:String,default:"#C6D1DE"},disabledVoidColor:{type:String,default:"#EFF2F7"},iconClasses:{type:[Array,Object],default:()=>["el-icon-star-on","el-icon-star-on","el-icon-star-on"]},voidIconClass:{type:String,default:"el-icon-star-off"},disabledVoidIconClass:{type:String,default:"el-icon-star-on"},disabled:{type:Boolean,default:!1},allowHalf:{type:Boolean,default:!1},showText:{type:Boolean,default:!1},showScore:{type:Boolean,default:!1},textColor:{type:String,default:"#1f2d3d"},texts:{type:Array,default:()=>["Extremely bad","Disappointed","Fair","Satisfied","Surprise"]},scoreTemplate:{type:String,default:"{value}"}},emits:["update:modelValue","change"],setup(e,{emit:t}){const n=$l("elForm",{}),l=tt(e.modelValue),a=ua((()=>e.disabled||n.disabled)),o=ua((()=>{let t="";return e.showScore?t=e.scoreTemplate.replace(/\{\s*value\s*\}/,a.value?""+e.modelValue:""+l.value):e.showText&&(t=e.texts[Math.ceil(l.value)-1]),t}));function r(e,t){const n=Object.keys(t).filter((n=>{const l=t[n];return Qi(l)&&l.excluded?e<n:e<=n})).sort(((e,t)=>e-t)),l=t[n[0]];return Qi(l)?l.value:l||""}const i=ua((()=>100*e.modelValue-100*Math.floor(e.modelValue))),s=ua((()=>Xi(e.colors)?{[e.lowThreshold]:e.colors[0],[e.highThreshold]:{value:e.colors[1],excluded:!0},[e.max]:e.colors[2]}:e.colors)),u=ua((()=>r(l.value,s.value))),c=ua((()=>{let t="";return a.value?t=i.value+"%":e.allowHalf&&(t="50%"),{color:u.value,width:t}})),d=ua((()=>Xi(e.iconClasses)?{[e.lowThreshold]:e.iconClasses[0],[e.highThreshold]:{value:e.iconClasses[1],excluded:!0},[e.max]:e.iconClasses[2]}:e.iconClasses)),p=ua((()=>r(e.modelValue,d.value))),f=ua((()=>a.value?e.disabledVoidIconClass:e.voidIconClass)),h=ua((()=>r(l.value,d.value))),v=ua((()=>{let t=Array(e.max),n=l.value;return t.fill(h.value,0,n),t.fill(f.value,n,e.max),t})),m=tt(!0);An((()=>e.modelValue),(t=>{l.value=t,m.value=e.modelValue!==Math.floor(e.modelValue)}));const g=tt(-1);return e.modelValue||t("update:modelValue",0),{hoverIndex:g,currentValue:l,rateDisabled:a,text:o,decimalStyle:c,decimalIconClass:p,classes:v,showDecimalIcon:function(t){let n=a.value&&i.value>0&&t-1<e.modelValue&&t>e.modelValue,o=e.allowHalf&&m.value&&t-.5<=l.value&&t>l.value;return n||o},getIconStyle:function(t){const n=a.value?e.disabledVoidColor:e.voidColor;return{color:t<=l.value?u.value:n}},selectValue:function(n){a.value||(e.allowHalf&&m.value?(t("update:modelValue",l.value),t("change",this.currentValue)):(t("update:modelValue",n),t("change",n)))},handleKey:function(n){if(a.value)return;let o=l.value;const r=n.code;return r===Fs.up||r===Fs.right?(e.allowHalf?o+=.5:o+=1,n.stopPropagation(),n.preventDefault()):r!==Fs.left&&r!==Fs.down||(e.allowHalf?o-=.5:o-=1,n.stopPropagation(),n.preventDefault()),o=o<0?0:o,o=o>e.max?e.max:o,t("update:modelValue",o),t("change",o),o},setCurrentValue:function(t,n){if(!a.value){if(e.allowHalf){let e=n.target;Es(e,"el-rate__item")&&(e=e.querySelector(".el-rate__icon")),Es(e,"el-rate__decimal")&&(e=e.parentNode),m.value=2*n.offsetX<=e.clientWidth,l.value=m.value?t-.5:t}else l.value=t;g.value=t}},resetCurrentValue:function(){a.value||(e.allowHalf&&(m.value=e.modelValue!==Math.floor(e.modelValue)),l.value=e.modelValue,g.value=-1)}}}});Tm.render=function(e,t,n,l,a,o){return Cl(),Al("div",{class:"el-rate",role:"slider","aria-valuenow":e.currentValue,"aria-valuetext":e.text,"aria-valuemin":"0","aria-valuemax":e.max,tabindex:"0",onKeydown:t[2]||(t[2]=(...t)=>e.handleKey(...t))},[(Cl(!0),Al(gl,null,da(e.max,((n,l)=>(Cl(),Al("span",{key:l,class:"el-rate__item",style:{cursor:e.rateDisabled?"auto":"pointer"},onMousemove:t=>e.setCurrentValue(n,t),onMouseleave:t[1]||(t[1]=(...t)=>e.resetCurrentValue(...t)),onClick:t=>e.selectValue(n)},[Tl("i",{class:[[e.classes[n-1],{hover:e.hoverIndex===n}],"el-rate__icon"],style:e.getIconStyle(n)},[e.showDecimalIcon(n)?(Cl(),Al("i",{key:0,class:[e.decimalIconClass,"el-rate__decimal"],style:e.decimalStyle},null,6)):Pl("v-if",!0)],6)],44,["onMousemove","onClick"])))),128)),e.showText||e.showScore?(Cl(),Al("span",{key:0,class:"el-rate__text",style:{color:e.textColor}},d(e.text),5)):Pl("v-if",!0)],40,["aria-valuenow","aria-valuetext","aria-valuemax"])},Tm.__file="packages/rate/src/index.vue",Tm.install=e=>{e.component(Tm.name,Tm)};var Nm=Qn({name:"ElRow",props:{tag:{type:String,default:"div"},gutter:{type:Number,default:0},type:{type:String,default:""},justify:{type:String,default:"start"},align:{type:String,default:"top"}},setup(e,{slots:t}){Fl("ElRow",e.gutter);const n=ua((()=>{const t={display:"flex",flexWrap:"wrap",marginLeft:"",marginRight:""};return e.gutter&&(t.marginLeft=`-${e.gutter/2}px`,t.marginRight=t.marginLeft),t}));return()=>{var l;return ca(e.tag,{class:["el-row","start"!==e.justify?"is-justify-"+e.justify:"","top"!==e.align?"is-align-"+e.align:"","flex"===e.type?"el-row--flex":""],style:n.value},null===(l=t.default)||void 0===l?void 0:l.call(t))}}});Nm.install=e=>{e.component(Nm.name,Nm)};var Bm=Qn({name:"ElSliderButton",components:{ElTooltip:Yh},props:{modelValue:{type:Number,default:0},vertical:{type:Boolean,default:!1},tooltipClass:{type:String,default:""}},emits:[tu],setup(e,{emit:t}){const n=Ye({hovering:!1,dragging:!1,isClick:!1,startX:0,currentX:0,startY:0,currentY:0,startPosition:0,newPosition:0,oldValue:e.modelValue}),{tooltip:l,showTooltip:a,tooltipVisible:o,wrapperStyle:r,formatValue:i,handleMouseEnter:s,handleMouseLeave:u,onButtonDown:c,onLeftKeyDown:d,onRightKeyDown:p,setPosition:f}=((e,t,n)=>{const{disabled:l,min:a,max:o,step:r,showTooltip:i,precision:s,sliderSize:u,formatTooltip:c,emitChange:d,resetSize:p,updateDragging:f}=$l("SliderProvider"),{tooltip:h,tooltipVisible:v,formatValue:m,displayTooltip:g,hideTooltip:b}=((e,t,n)=>{const l=tt(null),a=tt(!1),o=ua((()=>t.value instanceof Function)),r=ua((()=>o.value&&t.value(e.modelValue)||e.modelValue));return{tooltip:l,tooltipVisible:a,formatValue:r,displayTooltip:()=>{n.value&&(a.value=!0)},hideTooltip:()=>{n.value&&(a.value=!1)}}})(e,c,i),y=ua((()=>(e.modelValue-a.value)/(o.value-a.value)*100+"%")),x=ua((()=>e.vertical?{bottom:y.value}:{left:y.value})),k=e=>{let t,n;return"touchstart"===e.type?(n=e.touches[0].clientY,t=e.touches[0].clientX):(n=e.clientY,t=e.clientX),{clientX:t,clientY:n}},w=n=>{t.dragging=!0,t.isClick=!0;const{clientX:l,clientY:a}=k(n);e.vertical?t.startY=a:t.startX=l,t.startPosition=parseFloat(y.value),t.newPosition=t.startPosition},C=n=>{if(t.dragging){let l;t.isClick=!1,g(),p();const{clientX:a,clientY:o}=k(n);e.vertical?(t.currentY=o,l=(t.startY-t.currentY)/u.value*100):(t.currentX=a,l=(t.currentX-t.startX)/u.value*100),t.newPosition=t.startPosition+l,A(t.newPosition)}},_=()=>{t.dragging&&(setTimeout((()=>{t.dragging=!1,b(),t.isClick||(A(t.newPosition),d())}),0),Ss(window,"mousemove",C),Ss(window,"touchmove",C),Ss(window,"mouseup",_),Ss(window,"touchend",_),Ss(window,"contextmenu",_))},A=l=>kh(void 0,void 0,void 0,(function*(){if(null===l||isNaN(l))return;l<0?l=0:l>100&&(l=100);const i=100/((o.value-a.value)/r.value);let u=Math.round(l/i)*i*(o.value-a.value)*.01+a.value;u=parseFloat(u.toFixed(s.value)),n(tu,u),t.dragging||e.modelValue===t.oldValue||(t.oldValue=e.modelValue),yield Mt(),t.dragging&&g(),h.value.updatePopper()}));return An((()=>t.dragging),(e=>{f(e)})),{tooltip:h,tooltipVisible:v,showTooltip:i,wrapperStyle:x,formatValue:m,handleMouseEnter:()=>{t.hovering=!0,g()},handleMouseLeave:()=>{t.hovering=!1,b()},onButtonDown:e=>{l.value||(e.preventDefault(),w(e),As(window,"mousemove",C),As(window,"touchmove",C),As(window,"mouseup",_),As(window,"touchend",_),As(window,"contextmenu",_))},onLeftKeyDown:()=>{l.value||(t.newPosition=parseFloat(y.value)-r.value/(o.value-a.value)*100,A(t.newPosition),d())},onRightKeyDown:()=>{l.value||(t.newPosition=parseFloat(y.value)+r.value/(o.value-a.value)*100,A(t.newPosition),d())},setPosition:A}})(e,n,t),{hovering:h,dragging:v}=st(n);return{tooltip:l,tooltipVisible:o,showTooltip:a,wrapperStyle:r,formatValue:i,handleMouseEnter:s,handleMouseLeave:u,onButtonDown:c,onLeftKeyDown:d,onRightKeyDown:p,setPosition:f,hovering:h,dragging:v}}});Bm.render=function(e,t,n,l,a,o){const r=pl("el-tooltip");return Cl(),Al("div",{ref:"button",class:["el-slider__button-wrapper",{hover:e.hovering,dragging:e.dragging}],style:e.wrapperStyle,tabindex:"0",onMouseenter:t[2]||(t[2]=(...t)=>e.handleMouseEnter(...t)),onMouseleave:t[3]||(t[3]=(...t)=>e.handleMouseLeave(...t)),onMousedown:t[4]||(t[4]=(...t)=>e.onButtonDown(...t)),onTouchstart:t[5]||(t[5]=(...t)=>e.onButtonDown(...t)),onFocus:t[6]||(t[6]=(...t)=>e.handleMouseEnter(...t)),onBlur:t[7]||(t[7]=(...t)=>e.handleMouseLeave(...t)),onKeydown:[t[8]||(t[8]=fo(((...t)=>e.onLeftKeyDown(...t)),["left"])),t[9]||(t[9]=fo(((...t)=>e.onRightKeyDown(...t)),["right"])),t[10]||(t[10]=fo(co(((...t)=>e.onLeftKeyDown(...t)),["prevent"]),["down"])),t[11]||(t[11]=fo(co(((...t)=>e.onRightKeyDown(...t)),["prevent"]),["up"]))]},[Tl(r,{ref:"tooltip",modelValue:e.tooltipVisible,"onUpdate:modelValue":t[1]||(t[1]=t=>e.tooltipVisible=t),placement:"top","popper-class":e.tooltipClass,disabled:!e.showTooltip,manual:""},{content:en((()=>[Tl("span",null,d(e.formatValue),1)])),default:en((()=>[Tl("div",{class:["el-slider__button",{hover:e.hovering,dragging:e.dragging}]},null,2)])),_:1},8,["modelValue","popper-class","disabled"])],38)},Bm.__file="packages/slider/src/button.vue";var Pm=Qn({name:"ElMarker",props:{mark:{type:[String,Object],default:()=>{}}},setup:e=>({label:ua((()=>"string"==typeof e.mark?e.mark:e.mark.label))}),render(){var e;return ca("div",{class:"el-slider__marks-text",style:null===(e=this.mark)||void 0===e?void 0:e.style},this.label)}});Pm.__file="packages/slider/src/marker.vue";var Vm=Qn({name:"ElSlider",components:{ElInputNumber:Oh,SliderButton:Bm,SliderMarker:Pm},props:{modelValue:{type:[Number,Array],default:0},min:{type:Number,default:0},max:{type:Number,default:100},step:{type:Number,default:1},showInput:{type:Boolean,default:!1},showInputControls:{type:Boolean,default:!0},inputSize:{type:String,default:"small"},showStops:{type:Boolean,default:!1},showTooltip:{type:Boolean,default:!0},formatTooltip:{type:Function,default:void 0},disabled:{type:Boolean,default:!1},range:{type:Boolean,default:!1},vertical:{type:Boolean,default:!1},height:{type:String,default:""},debounce:{type:Number,default:300},label:{type:String,default:void 0},tooltipClass:{type:String,default:void 0},marks:Object},emits:[tu,"change"],setup(e,{emit:t}){const n=Ye({firstValue:null,secondValue:null,oldValue:null,dragging:!1,sliderSize:1}),{elFormItem:l,slider:a,firstButton:o,secondButton:r,sliderDisabled:i,minValue:s,maxValue:u,runwayStyle:c,barStyle:d,resetSize:p,emitChange:f,onSliderClick:h}=((e,t,n)=>{const l=$l("elForm",{}),a=$l("elFormItem",{}),o=tt(null),r=tt(null),i=tt(null),s={firstButton:r,secondButton:i},u=ua((()=>e.disabled||l.disabled||!1)),c=ua((()=>Math.min(t.firstValue,t.secondValue))),d=ua((()=>Math.max(t.firstValue,t.secondValue))),p=ua((()=>e.range?100*(d.value-c.value)/(e.max-e.min)+"%":100*(t.firstValue-e.min)/(e.max-e.min)+"%")),f=ua((()=>e.range?100*(c.value-e.min)/(e.max-e.min)+"%":"0%")),h=ua((()=>e.vertical?{height:e.height}:{})),v=ua((()=>e.vertical?{height:p.value,bottom:f.value}:{width:p.value,left:f.value})),m=()=>{o.value&&(t.sliderSize=o.value["client"+(e.vertical?"Height":"Width")])},g=n=>{const l=e.min+n*(e.max-e.min)/100;if(!e.range)return void r.value.setPosition(n);let a;a=Math.abs(c.value-l)<Math.abs(d.value-l)?t.firstValue<t.secondValue?"firstButton":"secondButton":t.firstValue>t.secondValue?"firstButton":"secondButton",s[a].value.setPosition(n)},b=()=>kh(void 0,void 0,void 0,(function*(){yield Mt(),n("change",e.range?[c.value,d.value]:e.modelValue)}));return{elFormItem:a,slider:o,firstButton:r,secondButton:i,sliderDisabled:u,minValue:c,maxValue:d,runwayStyle:h,barStyle:v,resetSize:m,setPosition:g,emitChange:b,onSliderClick:n=>{if(!u.value&&!t.dragging){if(m(),e.vertical){const e=o.value.getBoundingClientRect().bottom;g((e-n.clientY)/t.sliderSize*100)}else{const e=o.value.getBoundingClientRect().left;g((n.clientX-e)/t.sliderSize*100)}b()}}}})(e,n,t),{stops:v,getStopStyle:m}=((e,t,n,l)=>({stops:ua((()=>{if(!e.showStops||e.min>e.max)return[];if(0===e.step)return[];const a=(e.max-e.min)/e.step,o=100*e.step/(e.max-e.min),r=Array.from({length:a-1}).map(((e,t)=>(t+1)*o));return e.range?r.filter((t=>t<100*(n.value-e.min)/(e.max-e.min)||t>100*(l.value-e.min)/(e.max-e.min))):r.filter((n=>n>100*(t.firstValue-e.min)/(e.max-e.min)))})),getStopStyle:t=>e.vertical?{bottom:t+"%"}:{left:t+"%"}}))(e,n,s,u),g=(e=>ua((()=>e.marks?Object.keys(e.marks).map(parseFloat).sort(((e,t)=>e-t)).filter((t=>t<=e.max&&t>=e.min)).map((t=>({point:t,position:100*(t-e.min)/(e.max-e.min),mark:e.marks[t]}))):[])))(e);Im(e,n,s,u,t,l);const b=ua((()=>{let t=[e.min,e.max,e.step].map((e=>{let t=(""+e).split(".")[1];return t?t.length:0}));return Math.max.apply(null,t)})),{sliderWrapper:y}=Lm(e,n,p),{firstValue:x,secondValue:k,oldValue:w,dragging:C,sliderSize:_}=st(n);return Fl("SliderProvider",Object.assign(Object.assign({},st(e)),{sliderSize:_,disabled:i,precision:b,emitChange:f,resetSize:p,updateDragging:e=>{n.dragging=e}})),{firstValue:x,secondValue:k,oldValue:w,dragging:C,sliderSize:_,slider:a,firstButton:o,secondButton:r,sliderDisabled:i,runwayStyle:c,barStyle:d,emitChange:f,onSliderClick:h,getStopStyle:m,stops:v,markList:g,sliderWrapper:y}}});const Im=(e,t,n,l,a,o)=>{const r=e=>{a(tu,e)},i=()=>e.range?![n.value,l.value].every(((e,n)=>e===t.oldValue[n])):e.modelValue!==t.oldValue,s=()=>{var a,s;if(e.min>e.max)return void zs("Slider","min should not be greater than max.");const u=e.modelValue;e.range&&Array.isArray(u)?u[1]<e.min?r([e.min,e.min]):u[0]>e.max?r([e.max,e.max]):u[0]<e.min?r([e.min,u[1]]):u[1]>e.max?r([u[0],e.max]):(t.firstValue=u[0],t.secondValue=u[1],i()&&(null===(a=o.formItemMitt)||void 0===a||a.emit("el.form.change",[n.value,l.value]),t.oldValue=u.slice())):e.range||"number"!=typeof u||isNaN(u)||(u<e.min?r(e.min):u>e.max?r(e.max):(t.firstValue=u,i()&&(null===(s=o.formItemMitt)||void 0===s||s.emit("el.form.change",u),t.oldValue=u)))};An((()=>t.dragging),(e=>{e||s()})),An((()=>t.firstValue),(t=>{e.range?r([n.value,l.value]):r(t)})),An((()=>t.secondValue),(()=>{e.range&&r([n.value,l.value])})),An((()=>e.modelValue),((e,n)=>{t.dragging||Array.isArray(e)&&Array.isArray(n)&&e.every(((e,t)=>e===n[t]))||s()})),An((()=>[e.min,e.max]),(()=>{s()}))},Lm=(e,t,n)=>{const l=tt(null);return mn((()=>kh(void 0,void 0,void 0,(function*(){let a;e.range?(Array.isArray(e.modelValue)?(t.firstValue=Math.max(e.min,e.modelValue[0]),t.secondValue=Math.min(e.max,e.modelValue[1])):(t.firstValue=e.min,t.secondValue=e.max),t.oldValue=[t.firstValue,t.secondValue],a=`${t.firstValue}-${t.secondValue}`):("number"!=typeof e.modelValue||isNaN(e.modelValue)?t.firstValue=e.min:t.firstValue=Math.min(e.max,Math.max(e.min,e.modelValue)),t.oldValue=t.firstValue,a=t.firstValue),l.value.setAttribute("aria-valuetext",a),l.value.setAttribute("aria-label",e.label?e.label:`slider between ${e.min} and ${e.max}`),As(window,"resize",n),yield Mt(),n()})))),yn((()=>{Ss(window,"resize",n)})),{sliderWrapper:l}},zm={key:1},Fm={class:"el-slider__marks"};Vm.render=function(e,t,n,l,a,o){const r=pl("el-input-number"),i=pl("slider-button"),s=pl("slider-marker");return Cl(),Al("div",{ref:"sliderWrapper",class:["el-slider",{"is-vertical":e.vertical,"el-slider--with-input":e.showInput}],role:"slider","aria-valuemin":e.min,"aria-valuemax":e.max,"aria-orientation":e.vertical?"vertical":"horizontal","aria-disabled":e.sliderDisabled},[e.showInput&&!e.range?(Cl(),Al(r,{key:0,ref:"input",modelValue:e.firstValue,"onUpdate:modelValue":t[1]||(t[1]=t=>e.firstValue=t),class:"el-slider__input",step:e.step,disabled:e.sliderDisabled,controls:e.showInputControls,min:e.min,max:e.max,debounce:e.debounce,size:e.inputSize,onChange:e.emitChange},null,8,["modelValue","step","disabled","controls","min","max","debounce","size","onChange"])):Pl("v-if",!0),Tl("div",{ref:"slider",class:["el-slider__runway",{"show-input":e.showInput,disabled:e.sliderDisabled}],style:e.runwayStyle,onClick:t[4]||(t[4]=(...t)=>e.onSliderClick(...t))},[Tl("div",{class:"el-slider__bar",style:e.barStyle},null,4),Tl(i,{ref:"firstButton",modelValue:e.firstValue,"onUpdate:modelValue":t[2]||(t[2]=t=>e.firstValue=t),vertical:e.vertical,"tooltip-class":e.tooltipClass},null,8,["modelValue","vertical","tooltip-class"]),e.range?(Cl(),Al(i,{key:0,ref:"secondButton",modelValue:e.secondValue,"onUpdate:modelValue":t[3]||(t[3]=t=>e.secondValue=t),vertical:e.vertical,"tooltip-class":e.tooltipClass},null,8,["modelValue","vertical","tooltip-class"])):Pl("v-if",!0),e.showStops?(Cl(),Al("div",zm,[(Cl(!0),Al(gl,null,da(e.stops,((t,n)=>(Cl(),Al("div",{key:n,class:"el-slider__stop",style:e.getStopStyle(t)},null,4)))),128))])):Pl("v-if",!0),e.markList.length>0?(Cl(),Al(gl,{key:2},[Tl("div",null,[(Cl(!0),Al(gl,null,da(e.markList,((t,n)=>(Cl(),Al("div",{key:n,style:e.getStopStyle(t.position),class:"el-slider__stop el-slider__marks-stop"},null,4)))),128))]),Tl("div",Fm,[(Cl(!0),Al(gl,null,da(e.markList,((t,n)=>(Cl(),Al(s,{key:n,mark:t.mark,style:e.getStopStyle(t.position)},null,8,["mark","style"])))),128))])],64)):Pl("v-if",!0)],6)],10,["aria-valuemin","aria-valuemax","aria-orientation","aria-disabled"])},Vm.__file="packages/slider/src/index.vue",Vm.install=e=>{e.component(Vm.name,Vm)};var $m=Qn({name:"ElStep",props:{title:{type:String,default:""},icon:{type:String,default:""},description:{type:String,default:""},status:{type:String,default:"",validator:e=>["","wait","process","finish","error","success"].includes(e)}},setup(e){const t=tt(-1),n=tt({}),l=tt(""),a=$l("ElSteps"),o=la();mn((()=>{An([()=>a.props.active,()=>a.props.processStatus,()=>a.props.finishStatus],(([e])=>{g(e)}),{immediate:!0})})),yn((()=>{a.steps.value=a.steps.value.filter((e=>e.uid!==o.uid))}));const r=ua((()=>e.status||l.value)),i=ua((()=>{const e=a.steps.value[t.value-1];return e?e.currentStatus:"wait"})),s=ua((()=>a.props.alignCenter)),u=ua((()=>"vertical"===a.props.direction)),c=ua((()=>a.props.simple)),d=ua((()=>a.steps.value.length)),p=ua((()=>{var e;return(null===(e=a.steps.value[d.value-1])||void 0===e?void 0:e.uid)===o.uid})),f=ua((()=>c.value?"":a.props.space)),h=ua((()=>{const e={flexBasis:"number"==typeof f.value?f.value+"px":f.value?f.value:100/(d.value-(s.value?0:1))+"%"};return u.value||p.value&&(e.maxWidth=100/d.value+"%"),e})),v=e=>{t.value=e},m=e=>{let l=100;const o={};o.transitionDelay=150*t.value+"ms",e===a.props.processStatus?l=0:"wait"===e&&(l=0,o.transitionDelay=-150*t.value+"ms"),o.borderWidth=l&&!c.value?"1px":0,o["vertical"===a.props.direction?"height":"width"]=l+"%",n.value=o},g=e=>{e>t.value?l.value=a.props.finishStatus:e===t.value&&"error"!==i.value?l.value=a.props.processStatus:l.value="wait";const n=a.steps.value[d.value-1];n&&n.calcProgress(l.value)},b=Ye({uid:ua((()=>o.uid)),currentStatus:r,setIndex:v,calcProgress:m});return a.steps.value=[...a.steps.value,b],{index:t,lineStyle:n,currentStatus:r,isCenter:s,isVertical:u,isSimple:c,isLast:p,space:f,style:h,parent:a,setIndex:v,calcProgress:m,updateStatus:g}}});const Rm={class:"el-step__line"},jm={key:1,class:"el-step__icon-inner"},Hm={class:"el-step__main"},Wm={key:0,class:"el-step__arrow"};$m.render=function(e,t,n,l,a,o){return Cl(),Al("div",{style:e.style,class:["el-step",e.isSimple?"is-simple":"is-"+e.parent.props.direction,e.isLast&&!e.space&&!e.isCenter&&"is-flex",e.isCenter&&!e.isVertical&&!e.isSimple&&"is-center"]},[Pl(" icon & line "),Tl("div",{class:["el-step__head","is-"+e.currentStatus]},[Tl("div",Rm,[Tl("i",{class:"el-step__line-inner",style:e.lineStyle},null,4)]),Tl("div",{class:["el-step__icon","is-"+(e.icon?"icon":"text")]},["success"!==e.currentStatus&&"error"!==e.currentStatus?Zt(e.$slots,"icon",{key:0},(()=>[e.icon?(Cl(),Al("i",{key:0,class:["el-step__icon-inner",e.icon]},null,2)):Pl("v-if",!0),e.icon||e.isSimple?Pl("v-if",!0):(Cl(),Al("div",jm,d(e.index+1),1))])):(Cl(),Al("i",{key:1,class:["el-step__icon-inner","is-status","el-icon-"+("success"===e.currentStatus?"check":"close")]},null,2))],2)],2),Pl(" title & description "),Tl("div",Hm,[Tl("div",{class:["el-step__title","is-"+e.currentStatus]},[Zt(e.$slots,"title",{},(()=>[Bl(d(e.title),1)]))],2),e.isSimple?(Cl(),Al("div",Wm)):(Cl(),Al("div",{key:1,class:["el-step__description","is-"+e.currentStatus]},[Zt(e.$slots,"description",{},(()=>[Bl(d(e.description),1)]))],2))])],6)},$m.__file="packages/steps/src/item.vue",$m.install=e=>{e.component($m.name,$m)};var qm=Qn({name:"ElSteps",props:{space:{type:[Number,String],default:""},active:{type:Number,default:0},direction:{type:String,default:"horizontal",validator:e=>["horizontal","vertical"].includes(e)},alignCenter:{type:Boolean,default:!1},simple:{type:Boolean,default:!1},finishStatus:{type:String,default:"finish",validator:e=>["wait","process","finish","error","success"].includes(e)},processStatus:{type:String,default:"process",validator:e=>["wait","process","finish","error","success"].includes(e)}},emits:["change"],setup(e,{emit:t}){const n=tt([]);return An(n,(()=>{n.value.forEach(((e,t)=>{e.setIndex(t)}))})),Fl("ElSteps",{props:e,steps:n}),An((()=>e.active),((e,n)=>{t("change",e,n)})),{steps:n}}});qm.render=function(e,t,n,l,a,o){return Cl(),Al("div",{class:["el-steps",e.simple?"el-steps--simple":"el-steps--"+e.direction]},[Zt(e.$slots,"default")],2)},qm.__file="packages/steps/src/index.vue",qm.install=e=>{e.component(qm.name,qm)};var Ym=Qn({name:"ElSubmenu",componentName:"ElSubmenu",components:{ElCollapseTransition:ep,ElPopper:Ku},props:{index:{type:String,required:!0},showTimeout:{type:Number,default:300},hideTimeout:{type:Number,default:300},popperClass:String,disabled:Boolean,popperAppendToBody:{type:Boolean,default:void 0}},setup(e){const t=Ye({popperJS:null,timeout:null,items:{},submenus:{},currentPlacement:"",mouseInChild:!1,opened:!1}),n=tt(null),l=tt(null),a=la(),{paddingStyle:o,indexPath:r,parentMenu:i}=qh(a,e.index),{openedMenus:s,isMenuPopup:u,hoverBackground:c,methods:d,props:p,methods:{closeMenu:f},rootMenuOn:h,rootMenuEmit:v}=$l("rootMenu"),{addSubMenu:m,removeSubMenu:g,handleMouseleave:b}=$l("subMenu:"+i.value.uid),y=ua((()=>"horizontal"===M.value&&x.value||"vertical"===M.value&&!p.collapse?"el-icon-arrow-down":"el-icon-arrow-right")),x=ua((()=>{let e=!0,t=a.parent;for(;t&&"ElMenu"!==t.type.name;){if(["ElSubmenu","ElMenuItemGroup"].includes(t.type.name)){e=!1;break}t=t.parent}return e})),k=ua((()=>void 0===e.popperAppendToBody?x.value:Boolean(e.popperAppendToBody))),w=ua((()=>p.collapse?"el-zoom-in-left":"el-zoom-in-top")),C=ua((()=>s.value.includes(e.index))),_=ua((()=>{let e=!1;const n=t.submenus,l=t.items;return Object.keys(l).forEach((t=>{l[t].active&&(e=!0)})),Object.keys(n).forEach((t=>{n[t].active&&(e=!0)})),e})),A=ua((()=>p.backgroundColor||"")),S=ua((()=>p.activeTextColor||"")),E=ua((()=>p.textColor||"")),M=ua((()=>p.mode)),O=ua((()=>"horizontal"!==M.value?{color:E.value}:{borderBottomColor:_.value?p.activeTextColor?S.value:"":"transparent",color:_.value?S.value:E.value})),D=_o(),T=e=>{t.submenus[e.index]=e},N=e=>{delete t.submenus[e.index]},B=(n=!1)=>{"click"===p.menuTrigger&&"horizontal"===p.mode||!p.collapse&&"vertical"===p.mode||(D.emit("submenu:mouse-leave-child"),clearTimeout(t.timeout),t.timeout=setTimeout((()=>{!t.mouseInChild&&f(e.index)}),e.hideTimeout),k.value&&n&&"ElSubmenu"===a.parent.type.name&&b(!0))},P=()=>{t.currentPlacement="horizontal"===M.value&&x.value?"bottom-start":"right-start"};return Fl("subMenu:"+a.uid,{addSubMenu:T,removeSubMenu:N,handleMouseleave:B}),vn((()=>{h("rootMenu:toggle-collapse",(e=>{(e=>{var t;e?P():null===(t=l.value)||void 0===t||t.doDestroy()})(e)})),D.on("submenu:mouse-enter-child",(()=>{t.mouseInChild=!0,clearTimeout(t.timeout)})),D.on("submenu:mouse-leave-child",(()=>{t.mouseInChild=!1,clearTimeout(t.timeout)}))})),mn((()=>{d.addSubMenu({index:e.index,indexPath:r,active:_}),m({index:e.index,indexPath:r,active:_}),P()})),yn((()=>{g({index:e.index,indexPath:r,active:_}),d.removeSubMenu({index:e.index,indexPath:r,active:_})})),{data:t,props:e,mode:M,active:_,isMenuPopup:u,opened:C,paddingStyle:o,titleStyle:O,backgroundColor:A,rootProps:p,menuTransitionName:w,submenuTitleIcon:y,appendToBody:k,handleClick:()=>{const t=e.disabled;"hover"===p.menuTrigger&&"horizontal"===p.mode||p.collapse&&"vertical"===p.mode||t||v("submenu:submenu-click",{index:e.index,indexPath:r})},handleMouseenter:(n,l=e.showTimeout)=>{if(!("ActiveXObject"in window)&&"focus"===n.type&&!n.relatedTarget)return;const a=e.disabled;"click"===p.menuTrigger&&"horizontal"===p.mode||!p.collapse&&"vertical"===p.mode||a||(D.emit("submenu:mouse-enter-child"),clearTimeout(t.timeout),t.timeout=setTimeout((()=>{d.openMenu(e.index,r)}),l),k.value&&i.value.vnode.el.dispatchEvent(new MouseEvent("mouseenter")))},handleMouseleave:B,handleTitleMouseenter:()=>{var e;if("horizontal"===M.value&&!p.backgroundColor)return;const t=(null===(e=l.value)||void 0===e?void 0:e.triggerRef)||n.value;t&&(t.style.backgroundColor=c.value)},handleTitleMouseleave:()=>{var e;if("horizontal"===M.value&&!p.backgroundColor)return;const t=(null===(e=l.value)||void 0===e?void 0:e.triggerRef)||n.value;t&&(t.style.backgroundColor=p.backgroundColor||"")},addItem:e=>{t.items[e.index]=e},removeItem:e=>{delete t.items[e.index]},addSubMenu:T,removeSubMenu:N,popperVnode:l,verticalTitleRef:n}}});Ym.render=function(e,t,n,l,a,o){const r=pl("el-popper"),i=pl("el-collapse-transition");return Cl(),Al("li",{class:["el-submenu",e.active&&"is-active",e.opened&&"is-opened",e.disabled&&"is-disabled"],role:"menuitem","aria-haspopup":"true","aria-expanded":"opened",onMouseenter:t[11]||(t[11]=(...t)=>e.handleMouseenter(...t)),onMouseleave:t[12]||(t[12]=()=>e.handleMouseleave(!1)),onFocus:t[13]||(t[13]=(...t)=>e.handleMouseenter(...t))},[e.isMenuPopup?(Cl(),Al(r,{key:0,ref:"popperVnode",visible:e.opened,"onUpdate:visible":t[7]||(t[7]=t=>e.opened=t),"manual-mode":!0,effect:"light",pure:!0,offset:6,"show-arrow":!1,"popper-class":e.props.popperClass,placement:e.data.currentPlacement,"append-to-body":e.appendToBody},{default:en((()=>[Tl(Pa,{name:e.menuTransitionName},{default:en((()=>[Un(Tl("div",{ref:"menu",class:["el-menu--"+e.mode,e.props.popperClass],onMouseenter:t[1]||(t[1]=t=>e.handleMouseenter(t,100)),onMouseleave:t[2]||(t[2]=()=>e.handleMouseleave(!0)),onFocus:t[3]||(t[3]=t=>e.handleMouseenter(t,100))},[Tl("ul",{role:"menu",class:["el-menu el-menu--popup","el-menu--popup-"+e.data.currentPlacement],style:{backgroundColor:e.rootProps.backgroundColor||""}},[Zt(e.$slots,"default")],6)],34),[[ho,e.opened]])])),_:3},8,["name"])])),trigger:en((()=>[Tl("div",{class:"el-submenu__title",style:[e.paddingStyle,e.titleStyle,{backgroundColor:e.backgroundColor}],onClick:t[4]||(t[4]=(...t)=>e.handleClick(...t)),onMouseenter:t[5]||(t[5]=(...t)=>e.handleTitleMouseenter(...t)),onMouseleave:t[6]||(t[6]=(...t)=>e.handleTitleMouseleave(...t))},[Zt(e.$slots,"title"),Tl("i",{class:["el-submenu__icon-arrow",e.submenuTitleIcon]},null,2)],36)])),_:1},8,["visible","popper-class","placement","append-to-body"])):Pl("v-if",!0),e.isMenuPopup?Pl("v-if",!0):(Cl(),Al("div",{key:1,ref:"verticalTitleRef",class:"el-submenu__title",style:[e.paddingStyle,e.titleStyle,{backgroundColor:e.backgroundColor}],onClick:t[8]||(t[8]=(...t)=>e.handleClick(...t)),onMouseenter:t[9]||(t[9]=(...t)=>e.handleTitleMouseenter(...t)),onMouseleave:t[10]||(t[10]=(...t)=>e.handleTitleMouseleave(...t))},[Zt(e.$slots,"title"),Tl("i",{class:["el-submenu__icon-arrow",e.submenuTitleIcon]},null,2)],36)),e.isMenuPopup?Pl("v-if",!0):(Cl(),Al(i,{key:2},{default:en((()=>[Un(Tl("ul",{role:"menu",class:"el-menu el-menu--inline",style:{backgroundColor:e.rootProps.backgroundColor||""}},[Zt(e.$slots,"default")],4),[[ho,e.opened]])])),_:3}))],34)},Ym.__file="packages/menu/src/submenu.vue",Ym.install=e=>{e.component(Ym.name,Ym)};var Km=Qn({name:"ElSwitch",props:{modelValue:{type:[Boolean,String,Number],default:!1},value:{type:[Boolean,String,Number],default:!1},disabled:{type:Boolean,default:!1},width:{type:Number,default:40},activeIconClass:{type:String,default:""},inactiveIconClass:{type:String,default:""},activeText:{type:String,default:""},inactiveText:{type:String,default:""},activeColor:{type:String,default:""},inactiveColor:{type:String,default:""},activeValue:{type:[Boolean,String,Number],default:!0},inactiveValue:{type:[Boolean,String,Number],default:!1},name:{type:String,default:""},validateEvent:{type:Boolean,default:!0},id:{type:String,default:""},loading:{type:Boolean,default:!1}},emits:["update:modelValue","change","input"],setup(e,t){const n=$l("elForm",{}),l=$l("elFormItem",{}),a=tt(e.width),o=tt(!1!==e.modelValue),r=tt(null),i=tt(null);An((()=>e.modelValue),(()=>{o.value=!0})),An((()=>e.value),(()=>{o.value=!1}));const s=ua((()=>o.value?e.modelValue:e.value)),u=ua((()=>s.value===e.activeValue));~[e.activeValue,e.inactiveValue].indexOf(s.value)||(t.emit("update:modelValue",e.inactiveValue),t.emit("change",e.inactiveValue),t.emit("input",e.inactiveValue)),An(u,(()=>{var t;r.value.checked=u.value,(e.activeColor||e.inactiveColor)&&p(),e.validateEvent&&(null===(t=l.formItemMitt)||void 0===t||t.emit("el.form.change",[s.value]))}));const c=ua((()=>e.disabled||e.loading||(n||{}).disabled)),d=()=>{const n=u.value?e.inactiveValue:e.activeValue;t.emit("update:modelValue",n),t.emit("change",n),t.emit("input",n),Mt((()=>{r.value.checked=u.value}))},p=()=>{const t=u.value?e.activeColor:e.inactiveColor,n=i.value;n.style.borderColor=t,n.style.backgroundColor=t,n.children[0].style.color=t};return mn((()=>{a.value=a.value||40,(e.activeValue||e.inactiveValue)&&p(),r.value.checked=u.value})),{input:r,core:i,coreWidth:a,switchDisabled:c,checked:u,handleChange:d,switchValue:()=>{!c.value&&d()}}}});const Um={class:"el-switch__action"},Gm={key:0,class:"el-icon-loading"};Km.render=function(e,t,n,l,a,o){return Cl(),Al("div",{class:["el-switch",{"is-disabled":e.switchDisabled,"is-checked":e.checked}],role:"switch","aria-checked":e.checked,"aria-disabled":e.switchDisabled,onClick:t[3]||(t[3]=co(((...t)=>e.switchValue(...t)),["prevent"]))},[Tl("input",{id:e.id,ref:"input",class:"el-switch__input",type:"checkbox",name:e.name,"true-value":e.activeValue,"false-value":e.inactiveValue,disabled:e.switchDisabled,onChange:t[1]||(t[1]=(...t)=>e.handleChange(...t)),onKeydown:t[2]||(t[2]=fo(((...t)=>e.switchValue(...t)),["enter"]))},null,40,["id","name","true-value","false-value","disabled"]),e.inactiveIconClass||e.inactiveText?(Cl(),Al("span",{key:0,class:["el-switch__label","el-switch__label--left",e.checked?"":"is-active"]},[e.inactiveIconClass?(Cl(),Al("i",{key:0,class:[e.inactiveIconClass]},null,2)):Pl("v-if",!0),!e.inactiveIconClass&&e.inactiveText?(Cl(),Al("span",{key:1,"aria-hidden":e.checked},d(e.inactiveText),9,["aria-hidden"])):Pl("v-if",!0)],2)):Pl("v-if",!0),Tl("span",{ref:"core",class:"el-switch__core",style:{width:e.coreWidth+"px"}},[Tl("div",Um,[e.loading?(Cl(),Al("i",Gm)):Pl("v-if",!0)])],4),e.activeIconClass||e.activeText?(Cl(),Al("span",{key:1,class:["el-switch__label","el-switch__label--right",e.checked?"is-active":""]},[e.activeIconClass?(Cl(),Al("i",{key:0,class:[e.activeIconClass]},null,2)):Pl("v-if",!0),!e.activeIconClass&&e.activeText?(Cl(),Al("span",{key:1,"aria-hidden":!e.checked},d(e.activeText),9,["aria-hidden"])):Pl("v-if",!0)],2)):Pl("v-if",!0)],10,["aria-checked","aria-disabled"])},Km.__file="packages/switch/src/index.vue",Km.install=e=>{e.component(Km.name,Km)};var Xm=Qn({name:"ElTabPane",props:{label:{type:String,default:""},name:{type:String,default:""},closable:Boolean,disabled:Boolean,lazy:Boolean},setup(e){const t=tt(null),n=tt(!1),l=$l("rootTabs"),a=$l("updatePaneState");if(!l||!a)throw new Error("ElTabPane must use with ElTabs");const o=ua((()=>e.closable||l.props.closable)),r=ua((()=>{const a=l.currentName.value===(e.name||t.value);return a&&(n.value=!0),a})),i=ua((()=>e.name||t.value)),s=ua((()=>!e.lazy||n.value||r.value)),u=la();return a({uid:u.uid,instance:u,props:e,paneName:i,active:r,index:t,isClosable:o}),{index:t,loaded:n,isClosable:o,active:r,paneName:i,shouldBeRender:s}}});Xm.render=function(e,t,n,l,a,o){return e.shouldBeRender?Un((Cl(),Al("div",{key:0,id:"pane-"+e.paneName,class:"el-tab-pane",role:"tabpanel","aria-hidden":!e.active,"aria-labelledby":"tab-"+e.paneName},[Zt(e.$slots,"default")],8,["id","aria-hidden","aria-labelledby"])),[[ho,e.active]]):Pl("v-if",!0)},Xm.__file="packages/tabs/src/tab-pane.vue",Xm.install=e=>{e.component(Xm.name,Xm)};const Jm=function(e){let t=e.target;for(;t&&"HTML"!==t.tagName.toUpperCase();){if("TD"===t.tagName.toUpperCase())return t;t=t.parentNode}return null},Zm=function(e){return null!==e&&"object"==typeof e},Qm=function(e,t){let n=null;return e.columns.forEach((function(e){e.id===t&&(n=e)})),n},eg=function(e,t){const n=(t.className||"").match(/el-table_[^\s]+/gm);return n?Qm(e,n[0]):null},tg=(e,t)=>{if(!e)throw new Error("row is required when get row identity");if("string"==typeof t){if(t.indexOf(".")<0)return e[t];const n=t.split(".");let l=e;for(let e=0;e<n.length;e++)l=l[n[e]];return l}if("function"==typeof t)return t.call(null,e)},ng=function(e,t){const n={};return(e||[]).forEach(((e,l)=>{n[tg(e,t)]={row:e,index:l}})),n};function lg(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function ag(e){return void 0!==e&&(e=parseInt(e,10),isNaN(e)&&(e=null)),e}function og(e){return"number"==typeof e?e:"string"==typeof e?/^\d+(?:px)?$/.test(e)?parseInt(e,10):e:null}function rg(e,t,n){let l=!1;const a=e.indexOf(t),o=-1!==a,r=()=>{e.push(t),l=!0},i=()=>{e.splice(a,1),l=!0};return"boolean"==typeof n?n&&!o?r():!n&&o&&i():o?i():r(),l}function ig(e,t,n="children",l="hasChildren"){const a=e=>!(Array.isArray(e)&&e.length);function o(e,r,i){t(e,r,i),r.forEach((e=>{if(e[l])return void t(e,null,i+1);const r=e[n];a(r)||o(e,r,i+1)}))}e.forEach((e=>{if(e[l])return void t(e,null,0);const r=e[n];a(r)||o(e,r,0)}))}const sg=e=>{const t=[];return e.forEach((e=>{e.children?t.push.apply(t,sg(e.children)):t.push(e)})),t};function ug(e,t){return e.map((e=>{var n;return e.id===t.id?t:((null===(n=e.children)||void 0===n?void 0:n.length)>0&&(e.children=ug(e.children,t)),e)}))}class cg{constructor(e){this.observers=[],this.table=null,this.store=null,this.columns=[],this.fit=!0,this.showHeader=!0,this.height=tt(null),this.scrollX=tt(!1),this.scrollY=tt(!1),this.bodyWidth=tt(null),this.fixedWidth=tt(null),this.rightFixedWidth=tt(null),this.tableHeight=tt(null),this.headerHeight=tt(44),this.appendHeight=tt(0),this.footerHeight=tt(44),this.viewportHeight=tt(null),this.bodyHeight=tt(null),this.fixedBodyHeight=tt(null),this.gutterWidth=Is();for(const t in e)e.hasOwnProperty(t)&&(et(this[t])?this[t].value=e[t]:this[t]=e[t]);if(!this.table)throw new Error("table is required for Table Layout");if(!this.store)throw new Error("store is required for Table Layout")}updateScrollY(){if(null===this.height.value)return!1;const e=this.table.refs.bodyWrapper;if(this.table.vnode.el&&e){const t=e.querySelector(".el-table__body"),n=this.scrollY.value,l=t.offsetHeight>this.bodyHeight.value;return this.scrollY.value=l,n!==l}return!1}setHeight(e,t="height"){if(is)return;const n=this.table.vnode.el;if(e=og(e),this.height.value=Number(e),!n&&(e||0===e))return Mt((()=>this.setHeight(e,t)));"number"==typeof e?(n.style[t]=e+"px",this.updateElsHeight()):"string"==typeof e&&(n.style[t]=e,this.updateElsHeight())}setMaxHeight(e){this.setHeight(e,"max-height")}getFlattenColumns(){const e=[];return this.table.store.states.columns.value.forEach((t=>{t.isColumnGroup?e.push.apply(e,t.columns):e.push(t)})),e}updateElsHeight(){if(!this.table.$ready)return Mt((()=>this.updateElsHeight()));const{headerWrapper:e,appendWrapper:t,footerWrapper:n}=this.table.refs,l=t,a=e,o=n;if(this.appendHeight.value=l?l.offsetHeight:0,this.showHeader&&!a)return;const r=a?a.querySelector(".el-table__header tr"):null,i=this.headerDisplayNone(r),s=this.headerHeight.value=this.showHeader?a.offsetHeight:0;if(this.showHeader&&!i&&a.offsetWidth>0&&(this.table.store.states.columns.value||[]).length>0&&s<2)return Mt((()=>this.updateElsHeight()));const u=this.tableHeight.value=this.table.vnode.el.clientHeight,c=this.footerHeight.value=o?o.offsetHeight:0;null!==this.height.value&&(this.bodyHeight.value=u-s-c+(o?1:0)),this.fixedBodyHeight.value=this.scrollX.value?this.bodyHeight.value-this.gutterWidth:this.bodyHeight.value;const d=!(this.store.states.data.value&&this.store.states.data.value.length);this.viewportHeight.value=this.scrollX.value?u-(d?0:this.gutterWidth):u,this.updateScrollY(),this.notifyObservers("scrollable")}headerDisplayNone(e){if(!e)return!0;let t=e;for(;"DIV"!==t.tagName;){if("none"===getComputedStyle(t).display)return!0;t=t.parentElement}return!1}updateColumnsWidth(){if(is)return;const e=this.fit,t=this.table.vnode.el.clientWidth;let n=0;const l=this.getFlattenColumns(),a=l.filter((e=>"number"!=typeof e.width));if(l.forEach((e=>{"number"==typeof e.width&&e.realWidth&&(e.realWidth=null)})),a.length>0&&e){l.forEach((e=>{n+=e.width||e.minWidth||80}));const e=this.scrollY.value?this.gutterWidth:0;if(n<=t-e){this.scrollX.value=!1;const l=t-e-n;if(1===a.length)a[0].realWidth=(a[0].minWidth||80)+l;else{const e=l/a.reduce(((e,t)=>e+(t.minWidth||80)),0);let t=0;a.forEach(((n,l)=>{if(0===l)return;const a=Math.floor((n.minWidth||80)*e);t+=a,n.realWidth=(n.minWidth||80)+a})),a[0].realWidth=(a[0].minWidth||80)+l-t}}else this.scrollX.value=!0,a.forEach((function(e){e.realWidth=e.minWidth}));this.bodyWidth.value=Math.max(n,t),this.table.state.resizeState.value.width=this.bodyWidth.value}else l.forEach((e=>{e.width||e.minWidth?e.realWidth=e.width||e.minWidth:e.realWidth=80,n+=e.realWidth})),this.scrollX.value=n>t,this.bodyWidth.value=n;const o=this.store.states.fixedColumns.value;if(o.length>0){let e=0;o.forEach((function(t){e+=t.realWidth||t.width})),this.fixedWidth.value=e}const r=this.store.states.rightFixedColumns.value;if(r.length>0){let e=0;r.forEach((function(t){e+=t.realWidth||t.width})),this.rightFixedWidth.value=e}this.notifyObservers("columns"),this.updateElsHeight()}addObserver(e){this.observers.push(e)}removeObserver(e){const t=this.observers.indexOf(e);-1!==t&&this.observers.splice(t,1)}notifyObservers(e){this.observers.forEach((t=>{var n,l;switch(e){case"columns":null===(n=t.state)||void 0===n||n.onColumnsChange(this);break;case"scrollable":null===(l=t.state)||void 0===l||l.onScrollableChange(this);break;default:throw new Error(`Table Layout don't have event ${e}.`)}}))}}var dg=Qn({name:"ElTableFilterPanel",components:{ElCheckbox:fd,ElCheckboxGroup:Gd,ElScrollbar:Au,ElPopper:Ku},props:{placement:{type:String,default:"bottom-start"},store:{type:Object},column:{type:Object},upDataColumn:{type:Function}},setup(e){const t=la(),n=t.parent;n.filterPanels.value[e.column.id]||(n.filterPanels.value[e.column.id]=t);const l=tt(!1),a=ua((()=>e.column&&e.column.filters)),o=ua({get:()=>(e.column.filteredValue||[])[0],set:e=>{r.value&&(null!=e?r.value.splice(0,1,e):r.value.splice(0,1))}}),r=ua({get:()=>e.column&&e.column.filteredValue||[],set(t){e.column&&e.upDataColumn("filteredValue",t)}}),i=ua((()=>!e.column||e.column.filterMultiple)),s=()=>{l.value=!1},u=t=>{e.store.commit("filterChange",{column:e.column,values:t}),e.store.updateAllSelected()};return An(l,(t=>{e.column&&e.upDataColumn("filterOpened",t)}),{immediate:!0}),{tooltipVisible:l,multiple:i,filteredValue:r,filterValue:o,filters:a,handleConfirm:()=>{u(r.value),s()},handleReset:()=>{r.value=[],u(r.value),s()},handleSelect:e=>{o.value=e,u(null!=e?r.value:[]),s()},isActive:e=>e.value===o.value,t:vc,showFilterPanel:e=>{e.stopPropagation(),l.value=!0}}}});const pg={key:0},fg={class:"el-table-filter__content"},hg={class:"el-table-filter__bottom"},vg={key:1,class:"el-table-filter__list"};function mg(e){const t=la();vn((()=>{n.value.addObserver(t)})),mn((()=>{l(n.value),a(n.value)})),bn((()=>{l(n.value),a(n.value)})),xn((()=>{n.value.removeObserver(t)}));const n=ua((()=>{const t=e.layout;if(!t)throw new Error("Can not find table layout.");return t})),l=t=>{var n;const l=null===(n=e.vnode.el)||void 0===n?void 0:n.querySelectorAll("colgroup > col");if(!l.length)return;const a=t.getFlattenColumns(),o={};a.forEach((e=>{o[e.id]=e}));for(let e=0,t=l.length;e<t;e++){const t=l[e],n=t.getAttribute("name"),a=o[n];a&&t.setAttribute("width",a.realWidth||a.width)}},a=t=>{const n=e.vnode.el.querySelectorAll("colgroup > col[name=gutter]");for(let e=0,l=n.length;e<l;e++)n[e].setAttribute("width",t.scrollY.value?t.gutterWidth:"0");const l=e.vnode.el.querySelectorAll("th.gutter");for(let e=0,n=l.length;e<n;e++){const n=l[e];n.style.width=t.scrollY.value?t.gutterWidth+"px":"0",n.style.display=t.scrollY.value?"":"none"}};return{tableLayout:n.value,onColumnsChange:l,onScrollableChange:a}}dg.render=function(e,t,n,l,a,o){const r=pl("el-checkbox"),i=pl("el-checkbox-group"),s=pl("el-scrollbar"),u=pl("el-popper");return Cl(),Al(u,{ref:"tooltip",visible:e.tooltipVisible,"onUpdate:visible":t[6]||(t[6]=t=>e.tooltipVisible=t),offset:0,placement:e.placement,"show-arrow":!1,trigger:"click",effect:"light",pure:"","popper-class":"el-table-filter","append-to-body":""},{default:en((()=>[e.multiple?(Cl(),Al("div",pg,[Tl("div",fg,[Tl(s,{"wrap-class":"el-table-filter__wrap"},{default:en((()=>[Tl(i,{modelValue:e.filteredValue,"onUpdate:modelValue":t[1]||(t[1]=t=>e.filteredValue=t),class:"el-table-filter__checkbox-group"},{default:en((()=>[(Cl(!0),Al(gl,null,da(e.filters,(e=>(Cl(),Al(r,{key:e.value,label:e.value},{default:en((()=>[Bl(d(e.text),1)])),_:2},1032,["label"])))),128))])),_:1},8,["modelValue"])])),_:1})]),Tl("div",hg,[Tl("button",{class:{"is-disabled":0===e.filteredValue.length},disabled:0===e.filteredValue.length,type:"",onClick:t[2]||(t[2]=(...t)=>e.handleConfirm(...t))},d(e.t("el.table.confirmFilter")),11,["disabled"]),Tl("button",{type:"",onClick:t[3]||(t[3]=(...t)=>e.handleReset(...t))},d(e.t("el.table.resetFilter")),1)])])):(Cl(),Al("ul",vg,[Tl("li",{class:[{"is-active":void 0===e.filterValue||null===e.filterValue},"el-table-filter__list-item"],onClick:t[4]||(t[4]=t=>e.handleSelect(null))},d(e.t("el.table.clearFilter")),3),(Cl(!0),Al(gl,null,da(e.filters,(t=>(Cl(),Al("li",{key:t.value,class:[{"is-active":e.isActive(t)},"el-table-filter__list-item"],label:t.value,onClick:n=>e.handleSelect(t.value)},d(t.text),11,["label","onClick"])))),128))]))])),trigger:en((()=>[Tl("span",{class:"el-table__column-filter-trigger el-none-outline",onClick:t[5]||(t[5]=(...t)=>e.showFilterPanel(...t))},[Tl("i",{class:["el-icon-arrow-down",e.column.filterOpened?"el-icon-arrow-up":""]},null,2)])])),_:1},8,["visible","placement"])},dg.__file="packages/table/src/filter-panel.vue";const gg=e=>{const t=[];return e.forEach((e=>{e.children?(t.push(e),t.push.apply(t,gg(e.children))):t.push(e)})),t};function bg(){return ca("col",{name:"gutter"})}function yg(e,t=!1){return ca("colgroup",{},[...e.map((e=>ca("col",{name:e.id,key:e.id}))),t&&bg()])}var xg=Qn({name:"ElTableHeader",components:{ElCheckbox:fd},props:{fixed:{type:String,default:""},store:{required:!0,type:Object},border:Boolean,defaultSort:{type:Object,default:()=>({prop:"",order:""})}},setup(e,{emit:t}){const n=la(),l=n.parent,a=l.store.states,o=tt({}),{tableLayout:r,onColumnsChange:i,onScrollableChange:s}=mg(l),u=ua((()=>!e.fixed&&r.gutterWidth));mn((()=>{Mt((()=>{const{prop:t,order:n}=e.defaultSort;l.store.commit("sort",{prop:t,order:n,init:!0})}))}));const{handleHeaderClick:c,handleHeaderContextMenu:d,handleMouseDown:p,handleMouseMove:f,handleMouseOut:h,handleSortClick:v,handleFilterClick:m}=function(e,t){const n=la(),l=n.parent,a=e=>{e.stopPropagation()},o=tt(null),r=tt(!1),i=tt({}),s=(t,n,a)=>{t.stopPropagation();const o=n.order===a?null:a||(({order:e,sortOrders:t})=>{if(""===e)return t[0];const n=t.indexOf(e||null);return t[n>t.length-2?0:n+1]})(n);let r=t.target;for(;r&&"TH"!==r.tagName;)r=r.parentNode;if(r&&"TH"===r.tagName&&Es(r,"noclick"))return void Os(r,"noclick");if(!n.sortable)return;const i=e.store.states;let s,u=i.sortProp.value;const c=i.sortingColumn.value;(c!==n||c===n&&null===c.order)&&(c&&(c.order=null),i.sortingColumn.value=n,u=n.property),s=n.order=o||null,i.sortProp.value=u,i.sortOrder.value=s,l.store.commit("changeSortCondition")};return{handleHeaderClick:(e,t)=>{!t.filters&&t.sortable?s(e,t,!1):t.filterable&&!t.sortable&&a(e),l.emit("header-click",t,e)},handleHeaderContextMenu:(e,t)=>{l.emit("header-contextmenu",t,e)},handleMouseDown:(a,s)=>{if(!is&&!(s.children&&s.children.length>0)&&o.value&&e.border){r.value=!0;const u=l;t("set-drag-visible",!0);const c=u.vnode.el.getBoundingClientRect().left,d=n.vnode.el.querySelector("th."+s.id),p=d.getBoundingClientRect(),f=p.left-c+30;Ms(d,"noclick"),i.value={startMouseLeft:a.clientX,startLeft:p.right-c,startColumnLeft:p.left-c,tableLeft:c};const h=u.refs.resizeProxy;h.style.left=i.value.startLeft+"px",document.onselectstart=function(){return!1},document.ondragstart=function(){return!1};const v=e=>{const t=e.clientX-i.value.startMouseLeft,n=i.value.startLeft+t;h.style.left=Math.max(f,n)+"px"},m=()=>{if(r.value){const{startColumnLeft:n,startLeft:l}=i.value,c=parseInt(h.style.left,10)-n;s.width=s.realWidth=c,u.emit("header-dragend",s.width,l-n,s,a),e.store.scheduleLayout(!1,!0),document.body.style.cursor="",r.value=!1,o.value=null,i.value={},t("set-drag-visible",!1)}document.removeEventListener("mousemove",v),document.removeEventListener("mouseup",m),document.onselectstart=null,document.ondragstart=null,setTimeout((function(){Os(d,"noclick")}),0)};document.addEventListener("mousemove",v),document.addEventListener("mouseup",m)}},handleMouseMove:(t,n)=>{if(n.children&&n.children.length>0)return;let l=t.target;for(;l&&"TH"!==l.tagName;)l=l.parentNode;if(n&&n.resizable&&!r.value&&e.border){const e=l.getBoundingClientRect(),a=document.body.style;e.width>12&&e.right-t.pageX<8?(a.cursor="col-resize",Es(l,"is-sortable")&&(l.style.cursor="col-resize"),o.value=n):r.value||(a.cursor="",Es(l,"is-sortable")&&(l.style.cursor="pointer"),o.value=null)}},handleMouseOut:()=>{is||(document.body.style.cursor="")},handleSortClick:s,handleFilterClick:a}}(e,t),{getHeaderRowStyle:g,getHeaderRowClass:b,getHeaderCellStyle:y,getHeaderCellClass:x}=function(e){const t=la().parent,n=t.store.states;return{getHeaderRowStyle:e=>{const n=t.props.headerRowStyle;return"function"==typeof n?n.call(null,{rowIndex:e}):n},getHeaderRowClass:e=>{const n=[],l=t.props.headerRowClassName;return"string"==typeof l?n.push(l):"function"==typeof l&&n.push(l.call(null,{rowIndex:e})),n.join(" ")},getHeaderCellStyle:(e,n,l,a)=>{const o=t.props.headerCellStyle;return"function"==typeof o?o.call(null,{rowIndex:e,columnIndex:n,row:l,column:a}):o},getHeaderCellClass:(l,a,o,r)=>{const i=[r.id,r.order,r.headerAlign,r.className,r.labelClassName];0===l&&((t,l)=>{let a=0;for(let e=0;e<t;e++)a+=l[e].colSpan;const o=a+l[t].colSpan-1;return"left"===e.fixed?o>=n.fixedLeafColumnsLength.value:"right"===e.fixed?a<n.columns.value.length-n.rightFixedLeafColumnsLength.value:o<n.fixedLeafColumnsLength.value||a>=n.columns.value.length-n.rightFixedLeafColumnsLength.value})(a,o)&&i.push("is-hidden"),r.children||i.push("is-leaf"),r.sortable&&i.push("is-sortable");const s=t.props.headerCellClassName;return"string"==typeof s?i.push(s):"function"==typeof s&&i.push(s.call(null,{rowIndex:l,columnIndex:a,row:o,column:r})),i.join(" ")}}}(e),{isGroup:k,toggleAllSelection:w,columnRows:C}=function(e){const t=la().parent,n=ua((()=>(e=>{let t=1;const n=(e,l)=>{if(l&&(e.level=l.level+1,t<e.level&&(t=e.level)),e.children){let t=0;e.children.forEach((l=>{n(l,e),t+=l.colSpan})),e.colSpan=t}else e.colSpan=1};e.forEach((e=>{e.level=1,n(e,void 0)}));const l=[];for(let e=0;e<t;e++)l.push([]);return gg(e).forEach((e=>{e.children?e.rowSpan=1:e.rowSpan=t-e.level+1,l[e.level-1].push(e)})),l})(e.store.states.originColumns.value)));return{isGroup:ua((()=>{const e=n.value.length>1;return e&&(t.state.isGroup.value=!0),e})),toggleAllSelection:e=>{e.stopPropagation(),t.store.commit("toggleAllSelection")},columnRows:n}}(e);return n.state={onColumnsChange:i,onScrollableChange:s},n.filterPanels=o,{columns:a.columns,filterPanels:o,hasGutter:u,onColumnsChange:i,onScrollableChange:s,columnRows:C,getHeaderRowClass:b,getHeaderRowStyle:g,getHeaderCellClass:x,getHeaderCellStyle:y,handleHeaderClick:c,handleHeaderContextMenu:d,handleMouseDown:p,handleMouseMove:f,handleMouseOut:h,handleSortClick:v,handleFilterClick:m,isGroup:k,toggleAllSelection:w}},render(){return ca("table",{border:"0",cellpadding:"0",cellspacing:"0",class:"el-table__header"},[yg(this.columns,this.hasGutter),ca("thead",{class:{"is-group":this.isGroup,"has-gutter":this.hasGutter}},this.columnRows.map(((e,t)=>ca("tr",{class:this.getHeaderRowClass(t),key:t,style:this.getHeaderRowStyle(t)},e.map(((n,l)=>ca("th",{class:this.getHeaderCellClass(t,l,e,n),colspan:n.colSpan,key:n.id+"-thead",rowSpan:n.rowSpan,style:this.getHeaderCellStyle(t,l,e,n),onClick:e=>this.handleHeaderClick(e,n),onContextmenu:e=>this.handleHeaderContextMenu(e,n),onMousedown:e=>this.handleMouseDown(e,n),onMouseMove:e=>this.handleMouseMove(e,n),onMouseout:this.handleMouseOut},[ca("div",{class:["cell",n.filteredValue&&n.filteredValue.length>0?"highlight":"",n.labelClassName]},[n.renderHeader?n.renderHeader({column:n,$index:l,store:this.store,_self:this.$parent}):n.label,n.sortable&&ca("span",{onClick:e=>this.handleSortClick(e,n),class:"caret-wrapper"},[ca("i",{onClick:e=>this.handleSortClick(e,n,"ascending"),class:"sort-caret ascending"}),ca("i",{onClick:e=>this.handleSortClick(e,n,"descending"),class:"sort-caret descending"})]),n.filterable&&ca(dg,{store:this.$parent.store,placement:n.filterPlacement||"bottom-start",column:n,upDataColumn:(e,t)=>{n[e]=t}})])])))))))])}});var kg=Qn({name:"ElTableBody",props:{store:{required:!0,type:Object},stripe:Boolean,context:{default:()=>({}),type:Object},rowClassName:[String,Function],rowStyle:[Object,Function],fixed:{type:String,default:""},highlight:Boolean},setup(e){const t=la(),n=t.parent,{wrappedRowRender:l,tooltipVisible:a,tooltipContent:o,tooltipTrigger:r}=function(e){const t=la().parent,{handleDoubleClick:n,handleClick:l,handleContextMenu:a,handleMouseEnter:o,handleMouseLeave:r,handleCellMouseEnter:i,handleCellMouseLeave:s,tooltipVisible:u,tooltipContent:c,tooltipTrigger:d}=function(e){const t=la().parent,n=tt(!1),l=tt(""),a=tt(ca("div")),o=(n,l,a)=>{const o=t,r=Jm(n);let i;r&&(i=eg({columns:e.store.states.columns.value},r),i&&o.emit("cell-"+a,l,i,r,n)),o.emit("row-"+a,l,i,n)};return{handleDoubleClick:(e,t)=>{o(e,t,"dblclick")},handleClick:(t,n)=>{e.store.commit("setCurrentRow",n),o(t,n,"click")},handleContextMenu:(e,t)=>{o(e,t,"contextmenu")},handleMouseEnter:ko()((function(t){e.store.commit("setHoverRow",t)}),30),handleMouseLeave:ko()((function(){e.store.commit("setHoverRow",null)}),30),handleCellMouseEnter:(n,l)=>{const a=t,o=Jm(n);if(o){const t=eg({columns:e.store.states.columns.value},o),r=a.hoverState={cell:o,column:t,row:l};a.emit("cell-mouse-enter",r.row,r.column,r.cell,n)}const r=n.target.querySelector(".cell");if(!Es(r,"el-tooltip")||!r.childNodes.length)return;const i=document.createRange();i.setStart(r,0),i.setEnd(r,r.childNodes.length),(i.getBoundingClientRect().width+((parseInt(Ds(r,"paddingLeft"),10)||0)+(parseInt(Ds(r,"paddingRight"),10)||0))>r.offsetWidth||r.scrollWidth>r.offsetWidth)&&function(e,t,n){function l(){o&&o.update()}function a(){try{o&&o.destroy(),r&&document.body.removeChild(r),Ss(e,"mouseenter",l)}catch(e){}}Ss(e,"mouseleave",a);let o=null;const r=function(){const e=document.createElement("div");return e.className="el-tooltip__popper is-dark",e.innerHTML=t,document.body.appendChild(e),e}(),i=function(){const e=document.createElement("div");return e.className="el-popper__arrow",e.style.bottom="-4px",e}();r.appendChild(i),o=Ur(e,r,Object.assign({modifiers:[{name:"offset",options:{offset:[0,8]}},{name:"arrow",options:{element:i,padding:10}}]},{placement:"top",strategy:"fixed"})),As(e,"mouseenter",l),As(e,"mouseleave",a)}(o,o.innerText||o.textContent)},handleCellMouseLeave:e=>{if(n.value=!1,!Jm(e))return;const l=t.hoverState;t.emit("cell-mouse-leave",null==l?void 0:l.row,null==l?void 0:l.column,null==l?void 0:l.cell,e)},tooltipVisible:n,tooltipContent:l,tooltipTrigger:a}}(e),{getRowStyle:p,getRowClass:f,getCellStyle:h,getCellClass:v,getSpan:m,getColspanRealWidth:g}=function(e){const t=la().parent,n=t=>"left"===e.fixed?t>=e.store.states.fixedLeafColumnsLength.value:"right"===e.fixed?t<e.store.states.columns.value.length-e.store.states.rightFixedLeafColumnsLength.value:t<e.store.states.fixedLeafColumnsLength.value||t>=e.store.states.columns.value.length-e.store.states.rightFixedLeafColumnsLength.value;return{getRowStyle:(e,n)=>{const l=t.props.rowStyle;return"function"==typeof l?l.call(null,{row:e,rowIndex:n}):l||null},getRowClass:(n,l)=>{const a=["el-table__row"];t.props.highlightCurrentRow&&n===e.store.states.currentRow.value&&a.push("current-row"),e.stripe&&l%2==1&&a.push("el-table__row--striped");const o=t.props.rowClassName;return"string"==typeof o?a.push(o):"function"==typeof o&&a.push(o.call(null,{row:n,rowIndex:l})),e.store.states.expandRows.value.indexOf(n)>-1&&a.push("expanded"),a},getCellStyle:(e,n,l,a)=>{const o=t.props.cellStyle;return"function"==typeof o?o.call(null,{rowIndex:e,columnIndex:n,row:l,column:a}):o},getCellClass:(e,l,a,o)=>{const r=[o.id,o.align,o.className];n(l)&&r.push("is-hidden");const i=t.props.cellClassName;return"string"==typeof i?r.push(i):"function"==typeof i&&r.push(i.call(null,{rowIndex:e,columnIndex:l,row:a,column:o})),r.join(" ")},getSpan:(e,n,l,a)=>{let o=1,r=1;const i=t.props.spanMethod;if("function"==typeof i){const t=i({row:e,column:n,rowIndex:l,columnIndex:a});Array.isArray(t)?(o=t[0],r=t[1]):"object"==typeof t&&(o=t.rowspan,r=t.colspan)}return{rowspan:o,colspan:r}},getColspanRealWidth:(e,t,n)=>t<1?e[n].realWidth:e.map((({realWidth:e})=>e)).slice(n,n+t).reduce(((e,t)=>e+t),-1),isColumnHidden:n}}(e),b=ua((()=>{return t=({type:e})=>"default"===e,e.store.states.columns.value.findIndex(t);var t})),y=(e,n)=>{const l=t.props.rowKey;return l?tg(e,l):n},x=(u,c,d)=>{const{indent:x,columns:k}=e.store.states,w=f(u,c);let C=!0;return d&&(w.push("el-table__row--level-"+d.level),C=d.display),ca("tr",{style:[C?null:{display:"none"},p(u,c)],class:w,key:y(u,c),onDblclick:e=>n(e,u),onClick:e=>l(e,u),onContextmenu:e=>a(e,u),onMouseenter:()=>o(c),onMouseleave:r},k.value.map(((n,l)=>{const{rowspan:a,colspan:o}=m(u,n,c,l);if(!a||!o)return null;const r=Object.assign({},n);r.realWidth=g(k.value,o,l);const p={store:e.store,_self:e.context||t,column:r,row:u,$index:c};return l===b.value&&d&&(p.treeNode={indent:d.level*x.value,level:d.level},"boolean"==typeof d.expanded&&(p.treeNode.expanded=d.expanded,"loading"in d&&(p.treeNode.loading=d.loading),"noLazyChildren"in d&&(p.treeNode.noLazyChildren=d.noLazyChildren))),ca("td",{style:h(c,l,u,n),class:v(c,l,u,n),rowspan:a,colspan:o,onMouseenter:e=>i(e,u),onMouseleave:s},[n.renderCell(p)])})))};return{wrappedRowRender:(n,l)=>{const a=e.store,{isRowExpanded:o,assertRowKey:r}=a,{treeData:i,lazyTreeNodeMap:s,childrenColumnName:u,rowKey:c}=a.states;if(a.states.columns.value.some((({type:e})=>"expand"===e))&&o(n)){const e=t.renderExpanded,o=x(n,l,void 0);return e?[[o,ca("tr",{key:"expanded-row__"+o.key},[ca("td",{colspan:a.states.columns.value.length,class:"el-table__expanded-cell"},[e({row:n,$index:l,store:a})])])]]:(console.error("[Element Error]renderExpanded is required."),o)}if(Object.keys(i.value).length){r();const e=tg(n,c.value);let t=i.value[e],a=null;t&&(a={expanded:t.expanded,level:t.level,display:!0},"boolean"==typeof t.lazy&&("boolean"==typeof t.loaded&&t.loaded&&(a.noLazyChildren=!(t.children&&t.children.length)),a.loading=t.loading));const o=[x(n,l,a)];if(t){let a=0;const r=(e,n)=>{e&&e.length&&n&&e.forEach((e=>{const d={display:n.display&&n.expanded,level:n.level+1,expanded:!1,noLazyChildren:!1,loading:!1},p=tg(e,c.value);if(null==p)throw new Error("for nested data item, row-key is required.");if(t=Object.assign({},i.value[p]),t&&(d.expanded=t.expanded,t.level=t.level||d.level,t.display=!(!t.expanded||!d.display),"boolean"==typeof t.lazy&&("boolean"==typeof t.loaded&&t.loaded&&(d.noLazyChildren=!(t.children&&t.children.length)),d.loading=t.loading)),a++,o.push(x(e,l+a,d)),t){const n=s.value[p]||e[u.value];r(n,t)}}))};t.display=!0;const d=s.value[e]||n[u.value];r(d,t)}return o}return x(n,l,void 0)},tooltipVisible:u,tooltipContent:c,tooltipTrigger:d}}(e),{onColumnsChange:i,onScrollableChange:s}=mg(n);return An(e.store.states.hoverRow,((n,l)=>{if(!e.store.states.isComplex.value||is)return;let a=window.requestAnimationFrame;a||(a=e=>window.setTimeout(e,16)),a((()=>{const e=t.vnode.el.querySelectorAll(".el-table__row"),a=e[l],o=e[n];a&&Os(a,"hover-row"),o&&Ms(o,"hover-row")}))})),{onColumnsChange:i,onScrollableChange:s,wrappedRowRender:l,tooltipVisible:a,tooltipContent:o,tooltipTrigger:r}},render(){const e=this.store.states.data.value||[];return ca("table",{class:"el-table__body",cellspacing:"0",cellpadding:"0",border:"0"},[yg(this.store.states.columns.value),ca("tbody",{},[e.reduce(((e,t)=>e.concat(this.wrappedRowRender(t,e.length))),[])])])}}),wg=Qn({name:"ElTableFooter",props:{fixed:{type:String,default:""},store:{required:!0,type:Object},summaryMethod:Function,sumText:String,border:Boolean,defaultSort:{type:Object,default:()=>({prop:"",order:""})}},setup(e){const{hasGutter:t,getRowClasses:n,columns:l}=function(e){const t=la().parent,n=t.store,{leftFixedLeafCount:l,rightFixedLeafCount:a,columnsCount:o,leftFixedCount:r,rightFixedCount:i,columns:s}=function(){const e=la().parent.store;return{leftFixedLeafCount:ua((()=>e.states.fixedLeafColumnsLength.value)),rightFixedLeafCount:ua((()=>e.states.rightFixedColumns.value.length)),columnsCount:ua((()=>e.states.columns.value.length)),leftFixedCount:ua((()=>e.states.fixedColumns.value.length)),rightFixedCount:ua((()=>e.states.rightFixedColumns.value.length)),columns:e.states.columns}}();return{hasGutter:ua((()=>!e.fixed&&t.layout.gutterWidth)),getRowClasses:(t,s)=>{const u=[t.id,t.align,t.labelClassName];return t.className&&u.push(t.className),((t,n,s)=>{if(e.fixed||"left"===e.fixed)return t>=l.value;if("right"===e.fixed){let e=0;for(let l=0;l<t;l++)e+=n[l].colSpan;return e<o.value-a.value}return!(e.fixed||!s.fixed)||t<r.value||t>=o.value-i.value})(s,n.states.columns.value,t)&&u.push("is-hidden"),t.children||u.push("is-leaf"),u},columns:s}}(e);return{getRowClasses:n,hasGutter:t,columns:l}},render(){let e=[];return this.summaryMethod?e=this.summaryMethod({columns:this.columns,data:this.store.states.data.value}):this.columns.forEach(((t,n)=>{if(0===n)return void(e[n]=this.sumText);const l=this.store.states.data.value.map((e=>Number(e[t.property]))),a=[];let o=!0;l.forEach((e=>{if(!isNaN(e)){o=!1;const t=(""+e).split(".")[1];a.push(t?t.length:0)}}));const r=Math.max.apply(null,a);e[n]=o?"":l.reduce(((e,t)=>{const n=Number(t);return isNaN(n)?e:parseFloat((e+t).toFixed(Math.min(r,20)))}),0)})),ca("table",{class:"el-table__footer",cellspacing:"0",cellpadding:"0",border:"0"},[yg(this.columns,this.hasGutter),ca("tbody",{class:[{"has-gutter":this.hasGutter}]},[ca("tr",{},[...this.columns.map(((t,n)=>ca("td",{key:n,colspan:t.colSpan,rowspan:t.rowSpan,class:this.getRowClasses(t,n)},[ca("div",{class:["cell",t.labelClassName]},[e[n]])]))),this.hasGutter&&bg()])])])}});let Cg=1;var _g=Qn({name:"ElTable",directives:{Mousewheel:eu},components:{TableHeader:xg,TableBody:kg,TableFooter:wg},props:{data:{type:Array,default:function(){return[]}},size:String,width:[String,Number],height:[String,Number],maxHeight:[String,Number],fit:{type:Boolean,default:!0},stripe:Boolean,border:Boolean,rowKey:[String,Function],showHeader:{type:Boolean,default:!0},showSummary:Boolean,sumText:String,summaryMethod:Function,rowClassName:[String,Function],rowStyle:[Object,Function],cellClassName:[String,Function],cellStyle:[Object,Function],headerRowClassName:[String,Function],headerRowStyle:[Object,Function],headerCellClassName:[String,Function],headerCellStyle:[Object,Function],highlightCurrentRow:Boolean,currentRowKey:[String,Number],emptyText:String,expandRowKeys:Array,defaultExpandAll:Boolean,defaultSort:Object,tooltipEffect:String,spanMethod:Function,selectOnIndeterminate:{type:Boolean,default:!0},indent:{type:Number,default:16},treeProps:{type:Object,default:()=>({hasChildren:"hasChildren",children:"children"})},lazy:Boolean,load:Function},emits:["select","select-all","selection-change","cell-mouse-enter","cell-mouse-leave","cell-click","cell-dblclick","row-click","row-contextmenu","row-dblclick","header-click","header-contextmenu","sort-change","filter-change","current-change","header-dragend","expand-change"],setup(e){let t=la();const n=function(e,t={}){if(!e)throw new Error("Table is required.");const n=function(){const e=la(),t={setData(t,n){const l=ot(t.data)!==n;t.data.value=n,t._data.value=n,e.store.execQuery(),e.store.updateCurrentRowData(),e.store.updateExpandRows(),ot(t.reserveSelection)?(e.store.assertRowKey(),e.store.updateSelectionByRowKey()):l?e.store.clearSelection():e.store.cleanSelection(),e.store.updateAllSelected(),e.store.updateTableScrollY()},insertColumn(t,n,l,a){if(l<-1)return;const o=ot(t._columns);if(a){a&&!a.children&&(a.children=[]),a.children.push(n);const e=ug(o,a);t._columns.value=e}else o.splice(l,0,n),t._columns.value=o;"selection"===n.type&&(t.selectable.value=n.selectable,t.reserveSelection.value=n.reserveSelection),e.$ready&&(e.store.updateColumns(),e.store.scheduleLayout())},removeColumn(t,n,l){const a=ot(t._columns)||[];l?(l.children.splice(l.children.findIndex((e=>e.id===n.id)),1),t._columns.value=ug(a,l)):(a.splice(a.indexOf(n),1),t._columns.value=a),e.$ready&&(e.store.updateColumns(),e.store.scheduleLayout())},sort(t,n){const{prop:l,order:a,init:o}=n;if(l){const n=gs(ot(t.columns),(e=>e.property===l));n&&(n.order=a,e.store.updateSort(n,l,a),e.store.commit("changeSortCondition",{init:o}))}},changeSortCondition(t,n){const{sortingColumn:l,sortProp:a,sortOrder:o}=t;null===ot(o)&&(t.sortingColumn.value=null,t.sortProp.value=null),e.store.execQuery({filter:!0}),n&&(n.silent||n.init)||e.emit("sort-change",{column:ot(l),prop:ot(a),order:ot(o)}),e.store.updateTableScrollY()},filterChange(t,n){const{column:l,values:a,silent:o}=n,r=e.store.updateFilters(l,a);e.store.execQuery(),o||e.emit("filter-change",r),e.store.updateTableScrollY()},toggleAllSelection(){e.store.toggleAllSelection()},rowSelectedChanged(t,n){e.store.toggleRowSelection(n),e.store.updateAllSelected()},setHoverRow(e,t){e.hoverRow.value=t},setCurrentRow(t,n){e.store.updateCurrentRow(n)}},n=function(){const e=la(),t=tt(null),n=tt([]),l=tt([]),a=tt(!1),o=tt([]),r=tt([]),i=tt([]),s=tt([]),u=tt([]),c=tt([]),d=tt([]),p=tt([]),f=tt(0),h=tt(0),v=tt(0),m=tt(!1),g=tt([]),b=tt(!1),y=tt(!1),x=tt(null),k=tt({}),w=tt(null),C=tt(null),_=tt(null),A=tt(null),S=tt(null),E=()=>{s.value=o.value.filter((e=>!0===e.fixed||"left"===e.fixed)),u.value=o.value.filter((e=>"right"===e.fixed)),s.value.length>0&&o.value[0]&&"selection"===o.value[0].type&&!o.value[0].fixed&&(o.value[0].fixed=!0,s.value.unshift(o.value[0]));const e=o.value.filter((e=>!e.fixed));r.value=[].concat(s.value).concat(e).concat(u.value);const t=sg(e),n=sg(s.value),l=sg(u.value);f.value=t.length,h.value=n.length,v.value=l.length,i.value=[].concat(n).concat(t).concat(l),a.value=s.value.length>0||u.value.length>0},M=(e,t,n)=>{C.value&&C.value!==e&&(C.value.order=null),C.value=e,_.value=t,A.value=n},O=()=>{let e=ot(l);Object.keys(k.value).forEach((t=>{const n=k.value[t];if(!n||0===n.length)return;const l=Qm({columns:i.value},t);l&&l.filterMethod&&(e=e.filter((e=>n.some((t=>l.filterMethod.call(null,t,e,l))))))})),w.value=e},D=()=>{n.value=((e,t)=>{const n=t.sortingColumn;return n&&"string"!=typeof n.sortable?function(e,t,n,l,a){if(!t&&!l&&(!a||Array.isArray(a)&&!a.length))return e;n="string"==typeof n?"descending"===n?-1:1:n&&n<0?-1:1;const o=l?null:function(n,l){return a?(Array.isArray(a)||(a=[a]),a.map((function(t){return"string"==typeof t?ss(n,t):t(n,l,e)}))):("$key"!==t&&Zm(n)&&"$value"in n&&(n=n.$value),[Zm(n)?ss(n,t):n])};return e.map((function(e,t){return{value:e,index:t,key:o?o(e,t):null}})).sort((function(e,t){let a=function(e,t){if(l)return l(e.value,t.value);for(let n=0,l=e.key.length;n<l;n++){if(e.key[n]<t.key[n])return-1;if(e.key[n]>t.key[n])return 1}return 0}(e,t);return a||(a=e.index-t.index),a*n})).map((e=>e.value))}(e,t.sortProp,t.sortOrder,n.sortMethod,n.sortBy):e})(w.value,{sortingColumn:C.value,sortProp:_.value,sortOrder:A.value})},{setExpandRowKeys:T,toggleRowExpansion:N,updateExpandRows:B,states:P,isRowExpanded:V}=function(e){const t=la(),n=tt(!1),l=tt([]);return{updateExpandRows:()=>{const t=e.data.value||[],a=e.rowKey.value;if(n.value)l.value=t.slice();else if(a){const e=ng(l.value,a);l.value=t.reduce(((t,n)=>{const l=tg(n,a);return e[l]&&t.push(n),t}),[])}else l.value=[]},toggleRowExpansion:(e,n)=>{rg(l.value,e,n)&&(t.emit("expand-change",e,l.value.slice()),t.store.scheduleLayout())},setExpandRowKeys:n=>{t.store.assertRowKey();const a=e.data.value||[],o=e.rowKey.value,r=ng(a,o);l.value=n.reduce(((e,t)=>{const n=r[t];return n&&e.push(n.row),e}),[])},isRowExpanded:t=>{const n=e.rowKey.value;return n?!!ng(l.value,n)[tg(t,n)]:-1!==l.value.indexOf(t)},states:{expandRows:l,defaultExpandAll:n}}}({data:n,rowKey:t}),{updateTreeExpandKeys:I,toggleTreeExpansion:L,loadOrToggle:z,states:F}=function(e){const t=tt([]),n=tt({}),l=tt(16),a=tt(!1),o=tt({}),r=tt("hasChildren"),i=tt("children"),s=la(),u=ua((()=>{if(!e.rowKey.value)return{};const t=e.data.value||[];return d(t)})),c=ua((()=>{const t=e.rowKey.value,n=Object.keys(o.value),l={};return n.length?(n.forEach((e=>{if(o.value[e].length){const n={children:[]};o.value[e].forEach((e=>{const a=tg(e,t);n.children.push(a),e[r.value]&&!l[a]&&(l[a]={children:[]})})),l[e]=n}})),l):l})),d=t=>{const n=e.rowKey.value,l={};return ig(t,((e,t,o)=>{const r=tg(e,n);Array.isArray(t)?l[r]={children:t.map((e=>tg(e,n))),level:o}:a.value&&(l[r]={children:[],lazy:!0,level:o})}),i.value,r.value),l},p=()=>{var e,l;const o=u.value,r=c.value,i=Object.keys(o),d={};if(i.length){const l=ot(n),u=null===(e=s.store)||void 0===e?void 0:e.states.defaultExpandAll.value,c=[],p=(e,n)=>{const l=u||t.value&&-1!==t.value.indexOf(n);return!!(e&&e.expanded||l)};i.forEach((e=>{const t=l[e],n=Object.assign({},o[e]);if(n.expanded=p(t,e),n.lazy){const{loaded:l=!1,loading:a=!1}=t||{};n.loaded=!!l,n.loading=!!a,c.push(e)}d[e]=n}));const f=Object.keys(r);a.value&&f.length&&c.length&&f.forEach((e=>{const t=l[e],n=r[e].children;if(-1!==c.indexOf(e)){if(0!==d[e].children.length)throw new Error("[ElTable]children must be an empty array.");d[e].children=n}else{const{loaded:l=!1,loading:a=!1}=t||{};d[e]={lazy:!0,loaded:!!l,loading:!!a,expanded:p(t,e),children:n,level:""}}}))}n.value=d,null===(l=s.store)||void 0===l||l.updateTableScrollY()};An((()=>u.value),p),An((()=>c.value),p);const f=(t,l)=>{s.store.assertRowKey();const a=e.rowKey.value,o=tg(t,a),r=o&&n.value[o];if(o&&r&&"expanded"in r){const e=r.expanded;l=void 0===l?!r.expanded:l,n.value[o].expanded=l,e!==l&&s.emit("expand-change",t,l),s.store.updateTableScrollY()}},h=(e,t,l)=>{const{load:a}=s.props;a&&!n.value[t].loaded&&(n.value[t].loading=!0,a(e,l,(l=>{if(!Array.isArray(l))throw new Error("[ElTable] data must be an array");n.value[t].loading=!1,n.value[t].loaded=!0,n.value[t].expanded=!0,l.length&&(o.value[t]=l),s.emit("expand-change",e,!0)})))};return{loadData:h,loadOrToggle:t=>{s.store.assertRowKey();const l=e.rowKey.value,o=tg(t,l),r=n.value[o];a.value&&r&&"loaded"in r&&!r.loaded?h(t,o,r):f(t,void 0)},toggleTreeExpansion:f,updateTreeExpandKeys:e=>{t.value=e,p()},updateTreeData:p,normalize:d,states:{expandRowKeys:t,treeData:n,indent:l,lazy:a,lazyTreeNodeMap:o,lazyColumnIdentifier:r,childrenColumnName:i}}}({data:n,rowKey:t}),{updateCurrentRowData:$,updateCurrentRow:R,setCurrentRowKey:j,states:H}=function(e){const t=la(),n=tt(null),l=tt(null),a=()=>{n.value=null},o=t=>{const{data:n=[],rowKey:a}=e;let o=null;a.value&&(o=gs(ot(n),(e=>tg(e,a.value)===t))),l.value=o};return{setCurrentRowKey:e=>{t.store.assertRowKey(),n.value=e,o(e)},restoreCurrentRowKey:a,setCurrentRowByKey:o,updateCurrentRow:e=>{const n=l.value;if(e&&e!==n)return l.value=e,void t.emit("current-change",l.value,n);!e&&n&&(l.value=null,t.emit("current-change",null,n))},updateCurrentRowData:()=>{const r=e.rowKey.value,i=e.data.value||[],s=l.value;if(-1===i.indexOf(s)&&s){if(r){const e=tg(s,r);o(e)}else l.value=null;null===l.value&&t.emit("current-change",null,s)}else n.value&&(o(n.value),a())},states:{_currentRowKey:n,currentRow:l}}}({data:n,rowKey:t});return{assertRowKey:()=>{if(!t.value)throw new Error("[ElTable] prop row-key is required")},updateColumns:E,scheduleLayout:(t,n=!1)=>{t&&E(),n?e.state.doLayout():e.state.debouncedUpdateLayout()},isSelected:e=>g.value.indexOf(e)>-1,clearSelection:()=>{m.value=!1,g.value.length&&(g.value=[],e.emit("selection-change",[]))},cleanSelection:()=>{let l;if(t.value){l=[];const e=ng(g.value,t.value),a=ng(n.value,t.value);for(const t in e)e.hasOwnProperty(t)&&!a[t]&&l.push(e[t].row)}else l=g.value.filter((e=>-1===n.value.indexOf(e)));if(l.length){const t=g.value.filter((e=>-1===l.indexOf(e)));g.value=t,e.emit("selection-change",t.slice())}},toggleRowSelection:(t,n,l=!0)=>{if(rg(g.value,t,n)){const n=(g.value||[]).slice();l&&e.emit("select",n,t),e.emit("selection-change",n)}},_toggleAllSelection:()=>{const t=y.value?!m.value:!(m.value||g.value.length);m.value=t;let l=!1;n.value.forEach(((e,n)=>{x.value?x.value.call(null,e,n)&&rg(g.value,e,t)&&(l=!0):rg(g.value,e,t)&&(l=!0)})),l&&e.emit("selection-change",g.value?g.value.slice():[]),e.emit("select-all",g.value)},updateSelectionByRowKey:()=>{const e=ng(g.value,t.value);n.value.forEach((n=>{const l=tg(n,t.value),a=e[l];a&&(g.value[a.index]=n)}))},updateAllSelected:()=>{var e;if(0===(null===(e=n.value)||void 0===e?void 0:e.length))return void(m.value=!1);let l;t.value&&(l=ng(g.value,t.value));let a=!0,o=0;for(let e=0,i=(n.value||[]).length;e<i;e++){const i=n.value[e],s=x.value&&x.value.call(null,i,e);if(r=i,l?l[tg(r,t.value)]:-1!==g.value.indexOf(r))o++;else if(!x.value||s){a=!1;break}}var r;0===o&&(a=!1),m.value=a},updateFilters:(e,t)=>{Array.isArray(e)||(e=[e]);const n={};return e.forEach((e=>{k.value[e.id]=t,n[e.columnKey||e.id]=t})),n},updateCurrentRow:R,updateSort:M,execFilter:O,execSort:D,execQuery:e=>{e&&e.filter||O(),D()},clearFilter:t=>{const{tableHeader:n,fixedTableHeader:l,rightFixedTableHeader:a}=e.refs;let o={};n&&(o=Object.assign(o,n.filterPanels)),l&&(o=Object.assign(o,l.filterPanels)),a&&(o=Object.assign(o,a.filterPanels));const r=Object.keys(o);if(r.length)if("string"==typeof t&&(t=[t]),Array.isArray(t)){const n=t.map((e=>function(e,t){let n=null;for(let l=0;l<e.columns.length;l++){const a=e.columns[l];if(a.columnKey===t){n=a;break}}return n}({columns:i.value},e)));r.forEach((e=>{const t=n.find((t=>t.id===e));t&&(t.filteredValue=[])})),e.store.commit("filterChange",{column:n,values:[],silent:!0,multi:!0})}else r.forEach((e=>{const t=i.value.find((t=>t.id===e));t&&(t.filteredValue=[])})),k.value={},e.store.commit("filterChange",{column:{},values:[],silent:!0})},clearSort:()=>{C.value&&(M(null,null,null),e.store.commit("changeSortCondition",{silent:!0}))},toggleRowExpansion:N,setExpandRowKeysAdapter:e=>{T(e),I(e)},setCurrentRowKey:j,toggleRowExpansionAdapter:(e,t)=>{i.value.some((({type:e})=>"expand"===e))?N(e,t):L(e,t)},isRowExpanded:V,updateExpandRows:B,updateCurrentRowData:$,loadOrToggle:z,states:Object.assign(Object.assign(Object.assign({rowKey:t,data:n,_data:l,isComplex:a,_columns:o,originColumns:r,columns:i,fixedColumns:s,rightFixedColumns:u,leafColumns:c,fixedLeafColumns:d,rightFixedLeafColumns:p,leafColumnsLength:f,fixedLeafColumnsLength:h,rightFixedLeafColumnsLength:v,isAllSelected:m,selection:g,reserveSelection:b,selectOnIndeterminate:y,selectable:x,filters:k,filteredData:w,sortingColumn:C,sortProp:_,sortOrder:A,hoverRow:S},P),F),H)}}();return Object.assign(Object.assign({},n),{mutations:t,commit:function(t,...n){const l=e.store.mutations;if(!l[t])throw new Error("Action not found: "+t);l[t].apply(e,[e.store.states].concat(n))},updateTableScrollY:function(){Mt(e.layout.updateScrollY.apply(e.layout))}})}();return n.toggleAllSelection=ko()(n._toggleAllSelection,10),Object.keys(t).forEach((e=>{n.states[e].value=t[e]})),n}(t,{rowKey:e.rowKey,defaultExpandAll:e.defaultExpandAll,selectOnIndeterminate:e.selectOnIndeterminate,indent:e.indent,lazy:e.lazy,lazyColumnIdentifier:e.treeProps.hasChildren||"hasChildren",childrenColumnName:e.treeProps.children||"children",data:e.data});t.store=n;const l=new cg({store:t.store,table:t,fit:e.fit,showHeader:e.showHeader});t.layout=l;const a=ua((()=>e.height||e.maxHeight||n.states.fixedColumns.value.length>0||n.states.rightFixedColumns.value.length>0)),{setCurrentRow:o,toggleRowSelection:r,clearSelection:i,clearFilter:s,toggleAllSelection:u,toggleRowExpansion:c,clearSort:d,doLayout:p,sort:f}=function(e,t,n){return{setCurrentRow:t=>{e.commit("setCurrentRow",t)},toggleRowSelection:(t,n)=>{e.toggleRowSelection(t,n,!1),e.updateAllSelected()},clearSelection:()=>{e.clearSelection()},clearFilter:t=>{e.clearFilter(t)},toggleAllSelection:()=>{e.commit("toggleAllSelection")},toggleRowExpansion:(t,n)=>{e.toggleRowExpansionAdapter(t,n)},clearSort:()=>{e.clearSort()},doLayout:()=>{n.value&&t.updateElsHeight(),t.updateColumnsWidth()},sort:(t,n)=>{e.commit("sort",{prop:t,order:n})}}}(n,l,a),{isHidden:h,renderExpanded:v,setDragVisible:m,isGroup:g,handleMouseLeave:b,handleHeaderFooterMousewheel:y,tableSize:x,bodyHeight:k,emptyBlockStyle:w,handleFixedMousewheel:C,fixedHeight:_,fixedBodyHeight:A,resizeProxyVisible:S,bodyWidth:E,resizeState:M,scrollPosition:O}=function(e,t,n,l,a){const o=tt(!1),r=tt(null),i=tt(!1),s=tt({width:null,height:null}),u=tt(!1),c=tt("left");Cn((()=>{t.setHeight(e.height)})),Cn((()=>{t.setMaxHeight(e.maxHeight)})),Cn((()=>{n.states.rowKey.value&&n.setCurrentRowKey(e.currentRowKey)})),An((()=>e.data),(()=>{l.store.commit("setData",e.data)}),{immediate:!0}),Cn((()=>{e.expandRowKeys&&n.setExpandRowKeysAdapter(e.expandRowKeys)}));const d=ua((()=>e.height||e.maxHeight||n.states.fixedColumns.value.length>0||n.states.rightFixedColumns.value.length>0));mn((()=>{f(),n.updateColumns(),a(),s.value={width:l.vnode.el.offsetWidth,height:l.vnode.el.offsetHeight},n.states.columns.value.forEach((e=>{e.filteredValue&&e.filteredValue.length&&l.store.commit("filterChange",{column:e,values:e.filteredValue,silent:!0})})),l.$ready=!0}));const p=Xr()((function(){const{scrollLeft:e,scrollTop:t,offsetWidth:n,scrollWidth:a}=l.refs.bodyWrapper,{headerWrapper:o,footerWrapper:r,fixedBodyWrapper:i,rightFixedBodyWrapper:s}=l.refs;o&&(o.scrollLeft=e),r&&(r.scrollLeft=e),i&&(i.scrollTop=t),s&&(s.scrollTop=t);const u=a-n-1;c.value=e>=u?"right":0===e?"left":"middle"}),10),f=()=>{l.refs.bodyWrapper.addEventListener("scroll",p,{passive:!0}),e.fit&&xu(l.vnode.el,v)};xn((()=>{h()}));const h=()=>{var t;null===(t=l.refs.bodyWrapper)||void 0===t||t.removeEventListener("scroll",p,!0),e.fit&&ku(l.vnode.el,v)},v=()=>{if(!l.$ready)return;let t=!1;const n=l.vnode.el,{width:o,height:r}=s.value,i=n.offsetWidth;o!==i&&(t=!0);const u=n.offsetHeight;(e.height||d.value)&&r!==u&&(t=!0),t&&(s.value={width:i,height:u},a())},m=ua((()=>e.size)),g=ua((()=>{const{bodyWidth:e,scrollY:n,gutterWidth:l}=t;return e.value?e.value-(n.value?l:0)+"px":""}));return{isHidden:o,renderExpanded:r,setDragVisible:e=>{i.value=e},isGroup:u,handleMouseLeave:()=>{l.store.commit("setHoverRow",null),l.hoverState&&(l.hoverState=null)},handleHeaderFooterMousewheel:(e,t)=>{const{pixelX:n,pixelY:a}=t;Math.abs(n)>=Math.abs(a)&&(l.refs.bodyWrapper.scrollLeft+=t.pixelX/5)},tableSize:m,bodyHeight:ua((()=>{const n=t.headerHeight.value||0,l=t.bodyHeight.value,a=t.footerHeight.value||0;if(e.height)return{height:l?l+"px":""};if(e.maxHeight){const t=og(e.maxHeight);if("number"==typeof t)return{"max-height":t-a-(e.showHeader?n:0)+"px"}}return{}})),emptyBlockStyle:ua((()=>{if(e.data&&e.data.length)return null;let n="100%";return t.appendHeight.value&&(n=`calc(100% - ${t.appendHeight.value}px)`),{width:g.value,height:n}})),handleFixedMousewheel:(e,t)=>{const n=l.refs.bodyWrapper;if(Math.abs(t.spinY)>0){const l=n.scrollTop;t.pixelY<0&&0!==l&&e.preventDefault(),t.pixelY>0&&n.scrollHeight-n.clientHeight>l&&e.preventDefault(),n.scrollTop+=Math.ceil(t.pixelY/5)}else n.scrollLeft+=Math.ceil(t.pixelX/5)},fixedHeight:ua((()=>e.maxHeight?e.showSummary?{bottom:0}:{bottom:t.scrollX.value&&e.data.length?t.gutterWidth+"px":""}:e.showSummary?{height:t.tableHeight.value?t.tableHeight.value+"px":""}:{height:t.viewportHeight.value?t.viewportHeight.value+"px":""})),fixedBodyHeight:ua((()=>{if(e.height)return{height:t.fixedBodyHeight.value?t.fixedBodyHeight.value+"px":""};if(e.maxHeight){let n=og(e.maxHeight);if("number"==typeof n)return n=t.scrollX.value?n-t.gutterWidth:n,e.showHeader&&(n-=t.headerHeight.value),n-=t.footerHeight.value,{"max-height":n+"px"}}return{}})),resizeProxyVisible:i,bodyWidth:g,resizeState:s,scrollPosition:c}}(e,l,n,t,p),D=ko()((()=>p()),50),T="el-table_"+Cg++;return t.tableId=T,t.state={isGroup:g,resizeState:M,doLayout:p,debouncedUpdateLayout:D},{layout:l,store:n,handleHeaderFooterMousewheel:y,handleMouseLeave:b,tableId:T,tableSize:x,isHidden:h,renderExpanded:v,resizeProxyVisible:S,resizeState:M,isGroup:g,scrollPosition:O,bodyWidth:E,bodyHeight:k,emptyBlockStyle:w,debouncedUpdateLayout:D,handleFixedMousewheel:C,fixedHeight:_,fixedBodyHeight:A,setCurrentRow:o,toggleRowSelection:r,clearSelection:i,clearFilter:s,toggleAllSelection:u,toggleRowExpansion:c,clearSort:d,doLayout:p,sort:f,t:vc,setDragVisible:m,context:t}}});const Ag={ref:"hiddenColumns",class:"hidden-columns"},Sg={key:0,ref:"headerWrapper",class:"el-table__header-wrapper"},Eg={class:"el-table__empty-text"},Mg={key:1,ref:"appendWrapper",class:"el-table__append-wrapper"},Og={key:1,ref:"footerWrapper",class:"el-table__footer-wrapper"},Dg={key:0,ref:"fixedHeaderWrapper",class:"el-table__fixed-header-wrapper"},Tg={key:1,ref:"fixedFooterWrapper",class:"el-table__fixed-footer-wrapper"},Ng={key:0,ref:"rightFixedHeaderWrapper",class:"el-table__fixed-header-wrapper"},Bg={key:1,ref:"rightFixedFooterWrapper",class:"el-table__fixed-footer-wrapper"},Pg={ref:"resizeProxy",class:"el-table__column-resize-proxy"};_g.render=function(e,t,n,l,a,o){const r=pl("table-header"),i=pl("table-body"),s=pl("table-footer"),u=hl("mousewheel");return Cl(),Al("div",{class:[[{"el-table--fit":e.fit,"el-table--striped":e.stripe,"el-table--border":e.border||e.isGroup,"el-table--hidden":e.isHidden,"el-table--group":e.isGroup,"el-table--fluid-height":e.maxHeight,"el-table--scrollable-x":e.layout.scrollX.value,"el-table--scrollable-y":e.layout.scrollY.value,"el-table--enable-row-hover":!e.store.states.isComplex.value,"el-table--enable-row-transition":0!==(e.store.states.data.value||[]).length&&(e.store.states.data.value||[]).length<100},e.tableSize?"el-table--"+e.tableSize:""],"el-table"],onMouseleave:t[1]||(t[1]=t=>e.handleMouseLeave())},[Tl("div",Ag,[Zt(e.$slots,"default")],512),e.showHeader?Un((Cl(),Al("div",Sg,[Tl(r,{ref:"tableHeader",border:e.border,"default-sort":e.defaultSort,store:e.store,style:{width:e.layout.bodyWidth.value?e.layout.bodyWidth.value+"px":""},onSetDragVisible:e.setDragVisible},null,8,["border","default-sort","store","style","onSetDragVisible"])],512)),[[u,e.handleHeaderFooterMousewheel]]):Pl("v-if",!0),Tl("div",{ref:"bodyWrapper",class:[[e.layout.scrollX.value?"is-scrolling-"+e.scrollPosition:"is-scrolling-none"],"el-table__body-wrapper"],style:[e.bodyHeight]},[Tl(i,{context:e.context,highlight:e.highlightCurrentRow,"row-class-name":e.rowClassName,"row-style":e.rowStyle,store:e.store,stripe:e.stripe,style:{width:e.bodyWidth}},null,8,["context","highlight","row-class-name","row-style","store","stripe","style"]),e.data&&0!==e.data.length?Pl("v-if",!0):(Cl(),Al("div",{key:0,ref:"emptyBlock",style:e.emptyBlockStyle,class:"el-table__empty-block"},[Tl("span",Eg,[Zt(e.$slots,"empty",{},(()=>[Bl(d(e.emptyText||e.t("el.table.emptyText")),1)]))])],4)),e.$slots.append?(Cl(),Al("div",Mg,[Zt(e.$slots,"append")],512)):Pl("v-if",!0)],6),e.showSummary?Un((Cl(),Al("div",Og,[Tl(s,{border:e.border,"default-sort":e.defaultSort,store:e.store,style:{width:e.layout.bodyWidth.value?e.layout.bodyWidth.value+"px":""},"sum-text":e.sumText||e.t("el.table.sumText"),"summary-method":e.summaryMethod},null,8,["border","default-sort","store","style","sum-text","summary-method"])],512)),[[ho,e.data&&e.data.length>0],[u,e.handleHeaderFooterMousewheel]]):Pl("v-if",!0),e.store.states.fixedColumns.value.length>0?Un((Cl(),Al("div",{key:2,ref:"fixedWrapper",style:[{width:e.layout.fixedWidth.value?e.layout.fixedWidth.value+"px":""},e.fixedHeight],class:"el-table__fixed"},[e.showHeader?(Cl(),Al("div",Dg,[Tl(r,{ref:"fixedTableHeader",border:e.border,store:e.store,style:{width:e.bodyWidth},fixed:"left",onSetDragVisible:e.setDragVisible},null,8,["border","store","style","onSetDragVisible"])],512)):Pl("v-if",!0),Tl("div",{ref:"fixedBodyWrapper",style:[{top:e.layout.headerHeight.value+"px"},e.fixedBodyHeight],class:"el-table__fixed-body-wrapper"},[Tl(i,{highlight:e.highlightCurrentRow,"row-class-name":e.rowClassName,"row-style":e.rowStyle,store:e.store,stripe:e.stripe,style:{width:e.bodyWidth},fixed:"left"},null,8,["highlight","row-class-name","row-style","store","stripe","style"]),e.$slots.append?(Cl(),Al("div",{key:0,style:{height:e.layout.appendHeight.value+"px"},class:"el-table__append-gutter"},null,4)):Pl("v-if",!0)],4),e.showSummary?Un((Cl(),Al("div",Tg,[Tl(s,{border:e.border,store:e.store,style:{width:e.bodyWidth},"sum-text":e.sumText||e.t("el.table.sumText"),"summary-method":e.summaryMethod,fixed:"left"},null,8,["border","store","style","sum-text","summary-method"])],512)),[[ho,e.data&&e.data.length>0]]):Pl("v-if",!0)],4)),[[u,e.handleFixedMousewheel]]):Pl("v-if",!0),e.store.states.rightFixedColumns.value.length>0?Un((Cl(),Al("div",{key:3,ref:"rightFixedWrapper",style:[{width:e.layout.rightFixedWidth.value?e.layout.rightFixedWidth.value+"px":"",right:e.layout.scrollY.value?(e.border?e.layout.gutterWidth:e.layout.gutterWidth||0)+"px":""},e.fixedHeight],class:"el-table__fixed-right"},[e.showHeader?(Cl(),Al("div",Ng,[Tl(r,{ref:"rightFixedTableHeader",border:e.border,store:e.store,style:{width:e.bodyWidth},fixed:"right",onSetDragVisible:e.setDragVisible},null,8,["border","store","style","onSetDragVisible"])],512)):Pl("v-if",!0),Tl("div",{ref:"rightFixedBodyWrapper",style:[{top:e.layout.headerHeight.value+"px"},e.fixedBodyHeight],class:"el-table__fixed-body-wrapper"},[Tl(i,{highlight:e.highlightCurrentRow,"row-class-name":e.rowClassName,"row-style":e.rowStyle,store:e.store,stripe:e.stripe,style:{width:e.bodyWidth},fixed:"right"},null,8,["highlight","row-class-name","row-style","store","stripe","style"]),e.$slots.append?(Cl(),Al("div",{key:0,style:{height:e.layout.appendHeight.value+"px"},class:"el-table__append-gutter"},null,4)):Pl("v-if",!0)],4),e.showSummary?Un((Cl(),Al("div",Bg,[Tl(s,{border:e.border,store:e.store,style:{width:e.bodyWidth},"sum-text":e.sumText||e.t("el.table.sumText"),"summary-method":e.summaryMethod,fixed:"right"},null,8,["border","store","style","sum-text","summary-method"])],512)),[[ho,e.data&&e.data.length>0]]):Pl("v-if",!0)],4)),[[u,e.handleFixedMousewheel]]):Pl("v-if",!0),e.store.states.rightFixedColumns.value.length>0?(Cl(),Al("div",{key:4,ref:"rightFixedPatch",style:{width:e.layout.scrollY.value?e.layout.gutterWidth+"px":"0",height:e.layout.headerHeight.value+"px"},class:"el-table__fixed-right-patch"},null,4)):Pl("v-if",!0),Un(Tl("div",Pg,null,512),[[ho,e.resizeProxyVisible]])],34)},_g.__file="packages/table/src/table.vue",_g.install=e=>{e.component(_g.name,_g)};const Vg={default:{order:""},selection:{width:48,minWidth:48,realWidth:48,order:"",className:"el-table-column--selection"},expand:{width:48,minWidth:48,realWidth:48,order:""},index:{width:48,minWidth:48,realWidth:48,order:""}},Ig={selection:{renderHeader:function({store:e}){const t=e;return ca(fd,{disabled:t.states.data.value&&0===t.states.data.value.length,indeterminate:t.states.selection.value.length>0&&!t.states.isAllSelected.value,onClick:t.toggleAllSelection,modelValue:t.states.isAllSelected.value})},renderCell:function({row:e,column:t,store:n,$index:l}){return ca(fd,{disabled:!!t.selectable&&!t.selectable.call(null,e,l),onInput:()=>{n.commit("rowSelectedChanged",e)},nativeOnClick:e=>e.stopPropagation(),modelValue:n.isSelected(e)})},sortable:!1,resizable:!1},index:{renderHeader:function({column:e}){return e.label||"#"},renderCell:function({column:e,$index:t}){let n=t+1;const l=e.index;return"number"==typeof l?n=t+l:"function"==typeof l&&(n=l(t)),ca("div",{},[n])},sortable:!1},expand:{renderHeader:function({column:e}){return e.label||""},renderCell:function({row:e,store:t}){const n=t,l=e,a=["el-table__expand-icon"];return n.states.expandRows.value.indexOf(l)>-1&&a.push("el-table__expand-icon--expanded"),ca("div",{class:a,onClick:function(e){e.stopPropagation(),n.toggleRowExpansion(l)}},[ca("i",{class:"el-icon el-icon-arrow-right"})])},sortable:!1,resizable:!1,className:"el-table__expand-column"}};function Lg({row:e,column:t,$index:n}){const l=t.property,a=l&&us(e,l,!1).v;return t&&t.formatter?t.formatter(e,t,a,n):a}let zg=1;var Fg=Qn({name:"ElTableColumn",components:{ElCheckbox:fd},props:{type:{type:String,default:"default"},label:String,className:String,labelClassName:String,property:String,prop:String,width:{type:[Object,Number,String],default:()=>({})},minWidth:{type:[Object,Number,String],default:()=>({})},renderHeader:Function,sortable:{type:[Boolean,String],default:!1},sortMethod:Function,sortBy:[String,Function,Array],resizable:{type:Boolean,default:!0},columnKey:String,align:String,headerAlign:String,showTooltipWhenOverflow:Boolean,showOverflowTooltip:Boolean,fixed:[Boolean,String],formatter:Function,selectable:Function,reserveSelection:Boolean,filterMethod:Function,filteredValue:Array,filters:Array,filterPlacement:String,filterMultiple:{type:Boolean,default:!0},index:[Number,Function],sortOrders:{type:Array,default:()=>["ascending","descending",null],validator:e=>e.every((e=>["ascending","descending",null].indexOf(e)>-1))}},setup(e,{slots:t}){const n=la(),l=tt({}),a=e,o=ua((()=>{let e=n.parent;for(;e&&!e.tableId;)e=e.parent;return e})),{registerNormalWatchers:r,registerComplexWatchers:i}=function(e,t){const n=la();return{registerComplexWatchers:()=>{const l={realWidth:"width",realMinWidth:"minWidth"},a=["fixed"].reduce(((e,t)=>(e[t]=t,e)),l);Object.keys(a).forEach((a=>{const o=l[a];t.hasOwnProperty(o)&&An((()=>t[o]),(t=>{n.columnConfig.value[o]=t;const l="fixed"===o;e.value.store.scheduleLayout(l)}))}))},registerNormalWatchers:()=>{const e={prop:"property",realAlign:"align",realHeaderAlign:"headerAlign"},l=["label","property","filters","filterMultiple","sortable","index","formatter","className","labelClassName","showOverflowTooltip"].reduce(((e,t)=>(e[t]=t,e)),e);Object.keys(l).forEach((l=>{const a=e[l];t.hasOwnProperty(a)&&An((()=>t[a]),(e=>{n.columnConfig.value[a]=e}))}))}}}(o,a),{columnId:s,isSubColumn:u,realHeaderAlign:c,columnOrTableParent:d,setColumnWidth:p,setColumnForcedProps:f,setColumnRenders:h,getPropsData:v,getColumnElIndex:m,realAlign:g}=function(e,t,n){const l=la(),a=tt(""),o=tt(!1),r=tt(),i=tt();Cn((()=>{r.value=e.align?"is-"+e.align:null,r.value})),Cn((()=>{i.value=e.headerAlign?"is-"+e.headerAlign:r.value,i.value}));const s=ua((()=>{let e=l.vnode.vParent||l.parent;for(;e&&!e.tableId&&!e.columnId;)e=e.vnode.vParent||e.parent;return e})),u=tt(ag(e.width)),c=tt((void 0!==(d=e.minWidth)&&(d=ag(d),isNaN(d)&&(d=80)),d));var d;return{columnId:a,realAlign:r,isSubColumn:o,realHeaderAlign:i,columnOrTableParent:s,setColumnWidth:e=>(u.value&&(e.width=u.value),c.value&&(e.minWidth=c.value),e.minWidth||(e.minWidth=80),e.realWidth=void 0===e.width?e.minWidth:e.width,e),setColumnForcedProps:e=>{const t=e.type,n=Ig[t]||{};return Object.keys(n).forEach((t=>{const l=n[t];void 0!==l&&(e[t]="className"===t?`${e[t]} ${l}`:l)})),e},setColumnRenders:a=>{e.renderHeader?console.warn("[Element Warn][TableColumn]Comparing to render-header, scoped-slot header is easier to use. We recommend users to use scoped-slot header."):"selection"!==a.type&&(a.renderHeader=e=>{l.columnConfig.value.label;const n=t.header;return n?n(e):a.label});let o=a.renderCell;return"expand"===a.type?(a.renderCell=e=>ca("div",{class:"cell"},[o(e)]),n.value.renderExpanded=e=>t.default?t.default(e):t.default):(o=o||Lg,a.renderCell=e=>{let n=null;n=t.default?t.default(e):o(e);const r=function({row:e,treeNode:t,store:n}){const l=e,a=n,o=t;if(!o)return null;const r=[],i=function(e){e.stopPropagation(),a.loadOrToggle(l)};if(o.indent&&r.push(ca("span",{class:"el-table__indent",style:{"padding-left":o.indent+"px"}})),"boolean"!=typeof o.expanded||o.noLazyChildren)r.push(ca("span",{class:"el-table__placeholder"}));else{const e=["el-table__expand-icon",o.expanded?"el-table__expand-icon--expanded":""];let t=["el-icon-arrow-right"];o.loading&&(t=["el-icon-loading"]),r.push(ca("div",{class:e,onClick:i},[ca("i",{class:t})]))}return r}(e),i={class:"cell",style:{}};return a.showOverflowTooltip&&(i.class+=" el-tooltip",i.style={width:(e.column.realWidth||e.column.width)-1+"px"}),(e=>{function t(e){var t;"ElTableColumn"===(null===(t=null==e?void 0:e.type)||void 0===t?void 0:t.name)&&(e.vParent=l)}e instanceof Array?e.forEach((e=>t(e))):t(e)})(n),ca("div",i,[r,n])}),a},getPropsData:(...t)=>t.reduce(((t,n)=>(Array.isArray(n)&&n.forEach((n=>{t[n]=e[n]})),t)),{}),getColumnElIndex:(e,t)=>[].indexOf.call(e,t)}}(a,t,o),b=d.value;s.value=(b.tableId||b.columnId)+"_column_"+zg++,vn((()=>{u.value=o.value!==b;const e=a.type||"default",t=""===a.sortable||a.sortable,n=Object.assign(Object.assign({},Vg[e]),{id:s.value,type:e,property:a.prop||a.property,align:g,headerAlign:c,showOverflowTooltip:a.showOverflowTooltip||a.showTooltipWhenOverflow,filterable:a.filters||a.filterMethod,filteredValue:[],filterPlacement:"",isColumnGroup:!1,filterOpened:!1,sortable:t,index:a.index});let d=v(["columnKey","label","className","labelClassName","type","renderHeader","formatter","fixed","resizable"],["sortMethod","sortBy","sortOrders"],["selectable","reserveSelection"],["filterMethod","filters","filterMultiple","filterOpened","filteredValue","filterPlacement"]);d=function(e,t){const n={};let l;for(l in e)n[l]=e[l];for(l in t)if(lg(t,l)){const e=t[l];void 0!==e&&(n[l]=e)}return n}(n,d),d=function(...e){return 0===e.length?e=>e:1===e.length?e[0]:e.reduce(((e,t)=>(...n)=>e(t(...n))))}(h,p,f)(d),l.value=d,r(),i()})),mn((()=>{var e;const t=d.value,a=u.value?t.vnode.el.children:null===(e=t.refs.hiddenColumns)||void 0===e?void 0:e.children,r=m(a||[],n.vnode.el);o.value.store.commit("insertColumn",l.value,r,u.value?t.columnConfig.value:null)})),n.columnId=s.value,n.columnConfig=l},render(){var e,t;try{return ca("div",null===(t=(e=this.$slots).default)||void 0===t?void 0:t.call(e,{store:{},_self:{},column:{},row:{},$index:-1}))}catch(e){return ca("div")}}});Fg.install=e=>{e.component(Fg.name,Fg)};var $g=Qn({name:"ElTabBar",props:{tabs:{type:Array,default:()=>[]}},setup(e){const t=$l("rootTabs");if(!t)throw new Error("ElTabBar must use with ElTabs");const n=la(),l=()=>{let l={},a=0,o=0;const r=["top","bottom"].includes(t.props.tabPosition)?"width":"height",i="width"===r?"x":"y";e.tabs.every((t=>{var l;let i=null===(l=n.parent.refs)||void 0===l?void 0:l["tab-"+t.paneName];if(!i)return!1;if(t.active){o=i["client"+rs(r)];const t=window.getComputedStyle(i);return"width"===r&&(e.tabs.length>1&&(o-=parseFloat(t.paddingLeft)+parseFloat(t.paddingRight)),a+=parseFloat(t.paddingLeft)),!1}return a+=i["client"+rs(r)],!0}));const s=`translate${rs(i)}(${a}px)`;return l[r]=o+"px",l.transform=s,l.msTransform=s,l.webkitTransform=s,l},a=tt(l());return An((()=>e.tabs),(()=>{Mt((()=>{a.value=l()}))})),{rootTabs:t,barStyle:a}}});$g.render=function(e,t,n,l,a,o){return Cl(),Al("div",{class:["el-tabs__active-bar","is-"+e.rootTabs.props.tabPosition],style:e.barStyle},null,6)},$g.__file="packages/tabs/src/tab-bar.vue";var Rg=Qn({name:"ElTabNav",components:{TabBar:$g},props:{panes:{type:Array,default:()=>[]},currentName:{type:String,default:""},editable:Boolean,onTabClick:{type:Function,default:Ui},onTabRemove:{type:Function,default:Ui},type:{type:String,default:""},stretch:Boolean},setup(){const e=$l("rootTabs");if(!e)throw new Error("ElTabNav must use with ElTabs");const t=tt(!1),n=tt(0),l=tt(!1),a=tt(!0),o=tt(null),r=tt(null),i=tt(null),s=ua((()=>["top","bottom"].includes(e.props.tabPosition)?"width":"height")),u=ua((()=>({transform:`translate${"width"===s.value?"X":"Y"}(-${n.value}px)`}))),c=()=>{if(!t.value)return;const l=r.value,a=i.value.querySelector(".is-active");if(!a)return;const s=o.value,u=["top","bottom"].includes(e.props.tabPosition),c=a.getBoundingClientRect(),d=s.getBoundingClientRect(),p=u?l.offsetWidth-d.width:l.offsetHeight-d.height,f=n.value;let h=f;u?(c.left<d.left&&(h=f-(d.left-c.left)),c.right>d.right&&(h=f+c.right-d.right)):(c.top<d.top&&(h=f-(d.top-c.top)),c.bottom>d.bottom&&(h=f+(c.bottom-d.bottom))),h=Math.max(h,0),n.value=Math.min(h,p)},d=()=>{if(!r.value)return;const e=r.value["offset"+rs(s.value)],l=o.value["offset"+rs(s.value)],a=n.value;if(l<e){const a=n.value;t.value=t.value||{},t.value.prev=a,t.value.next=a+l<e,e-a<l&&(n.value=e-l)}else t.value=!1,a>0&&(n.value=0)},p=()=>{a.value&&(l.value=!0)},f=()=>{const e=document.visibilityState;"hidden"===e?a.value=!1:"visible"===e&&setTimeout((()=>{a.value=!0}),50)},h=()=>{a.value=!1},v=()=>{setTimeout((()=>{a.value=!0}),50)};return bn((()=>{d()})),mn((()=>{xu(i.value,d),As(document,"visibilitychange",f),As(window,"blur",h),As(window,"focus",v),setTimeout((()=>{c()}),0)})),yn((()=>{i.value&&ku(i.value,d),Ss(document,"visibilitychange",f),Ss(window,"blur",h),Ss(window,"focus",v)})),{rootTabs:e,scrollable:t,navOffset:n,isFocus:l,focusable:a,navScroll$:o,nav$:r,el$:i,sizeName:s,navStyle:u,scrollPrev:()=>{const e=o.value["offset"+rs(s.value)],t=n.value;if(!t)return;let l=t>e?t-e:0;n.value=l},scrollNext:()=>{const e=r.value["offset"+rs(s.value)],t=o.value["offset"+rs(s.value)],l=n.value;if(e-l<=t)return;let a=e-l>2*t?l+t:e-t;n.value=a},scrollToActiveTab:c,update:d,changeTab:e=>{const t=e.code;let n,l,a;const{up:o,down:r,left:i,right:s}=Fs;-1!==[o,r,i,s].indexOf(t)&&(a=e.currentTarget.querySelectorAll("[role=tab]"),l=Array.prototype.indexOf.call(a,e.target),n=t===i||t===o?0===l?a.length-1:l-1:l<a.length-1?l+1:0,a[n].focus(),a[n].click(),p())},setFocus:p,removeFocus:()=>{l.value=!1},visibilityChangeHandler:f,windowBlurHandler:h,windowFocusHandler:v}},render(){const{type:e,panes:t,editable:n,stretch:l,onTabClick:a,onTabRemove:o,navStyle:r,scrollable:i,scrollNext:s,scrollPrev:u,changeTab:c,setFocus:d,removeFocus:p,rootTabs:f,isFocus:h}=this,v=i?[ca("span",{class:["el-tabs__nav-prev",i.prev?"":"is-disabled"],onClick:u},[ca("i",{class:"el-icon-arrow-left"})]),ca("span",{class:["el-tabs__nav-next",i.next?"":"is-disabled"],onClick:s},[ca("i",{class:"el-icon-arrow-right"})])]:null,m=t.map(((e,t)=>{var l,r;let i=e.props.name||e.index||""+t;const s=e.isClosable||n;e.index=""+t;const u=s?ca("span",{class:"el-icon-close",onClick:t=>{o(e,t)}}):null,c=(null===(r=(l=e.instance.slots).label)||void 0===r?void 0:r.call(l))||e.props.label,v=e.active?0:-1;return ca("div",{class:{"el-tabs__item":!0,["is-"+f.props.tabPosition]:!0,"is-active":e.active,"is-disabled":e.props.disabled,"is-closable":s,"is-focus":h},id:"tab-"+i,key:"tab-"+i,"aria-controls":"pane-"+i,role:"tab","aria-selected":e.active,ref:"tab-"+i,tabindex:v,onFocus:()=>{d()},onBlur:()=>{p()},onClick:t=>{p(),a(e,i,t)},onKeydown:t=>{!s||t.code!==Fs.delete&&t.code!==Fs.backspace||o(e,t)}},[c,u])}));return ca("div",{ref:"el$",class:["el-tabs__nav-wrap",i?"is-scrollable":"","is-"+f.props.tabPosition]},[v,ca("div",{class:"el-tabs__nav-scroll",ref:"navScroll$"},[ca("div",{class:["el-tabs__nav","is-"+f.props.tabPosition,l&&["top","bottom"].includes(f.props.tabPosition)?"is-stretch":""],ref:"nav$",style:r,role:"tablist",onKeydown:c},[e?null:ca($g,{tabs:t}),m])])])}});Rg.__file="packages/tabs/src/tab-nav.vue";var jg=Qn({name:"ElTabs",components:{TabNav:Rg},props:{type:{type:String,default:""},activeName:{type:String,default:""},closable:Boolean,addable:Boolean,modelValue:{type:String,default:""},editable:Boolean,tabPosition:{type:String,default:"top"},beforeLeave:{type:Function,default:null},stretch:Boolean},emits:["tab-click","edit","tab-remove","tab-add","input","update:modelValue"],setup(e,t){const n=tt(null),l=tt(e.modelValue||e.activeName||"0"),a=tt([]),o=la(),r={};Fl("rootTabs",{props:e,currentName:l}),Fl("updatePaneState",(e=>{r[e.uid]=e})),An((()=>e.activeName),(e=>{c(e)})),An((()=>e.modelValue),(e=>{c(e)})),An(l,(()=>{n.value&&Mt((()=>{n.value.$nextTick((()=>{n.value.scrollToActiveTab()}))})),s(!0)}));const i=(e,t=[])=>(Array.from(e.children||[]).forEach((e=>{let n=e.type;n=n.name||n,"ElTabPane"===n&&e.component?t.push(e.component):n!==gl&&"template"!==n||i(e,t)})),t),s=(e=!1)=>{if(t.slots.default){const t=o.subTree.children,n=Array.from(t).find((({props:e})=>"el-tabs__content"===e.class));if(!n)return;const l=i(n).map((e=>r[e.uid])),s=!(l.length===a.value.length&&l.every(((e,t)=>e.uid===a.value[t].uid)));(e||s)&&(a.value=l)}else 0!==a.value.length&&(a.value=[])},u=e=>{l.value=e,t.emit("input",e),t.emit("update:modelValue",e)},c=t=>{if(l.value!==t&&e.beforeLeave){const a=e.beforeLeave(t,l.value);a&&a.then?a.then((()=>{u(t),n.value&&n.value.removeFocus()}),(()=>{})):!1!==a&&u(t)}else u(t)};return bn((()=>{s()})),mn((()=>{s()})),{nav$:n,handleTabClick:(e,n,l)=>{e.props.disabled||(c(n),t.emit("tab-click",e,l))},handleTabRemove:(e,n)=>{e.props.disabled||(n.stopPropagation(),t.emit("edit",e.props.name,"remove"),t.emit("tab-remove",e.props.name))},handleTabAdd:()=>{t.emit("edit",null,"add"),t.emit("tab-add")},currentName:l,panes:a}},render(){var e;let{type:t,handleTabClick:n,handleTabRemove:l,handleTabAdd:a,currentName:o,panes:r,editable:i,addable:s,tabPosition:u,stretch:c}=this;const d=i||s?ca("span",{class:"el-tabs__new-tab",tabindex:"0",onClick:a,onKeydown:e=>{e.code===Fs.enter&&a()}},[ca("i",{class:"el-icon-plus"})]):null,p=ca("div",{class:["el-tabs__header","is-"+u]},[d,ca(Rg,{currentName:o,editable:i,type:t,panes:r,stretch:c,ref:"nav$",onTabClick:n,onTabRemove:l})]),f=ca("div",{class:"el-tabs__content"},null===(e=this.$slots)||void 0===e?void 0:e.default());return ca("div",{class:{"el-tabs":!0,"el-tabs--card":"card"===t,["el-tabs--"+u]:!0,"el-tabs--border-card":"border-card"===t}},"bottom"!==u?[p,f]:[f,p])}});jg.__file="packages/tabs/src/tabs.vue",jg.install=e=>{e.component(jg.name,jg)};const Hg=e=>{const t=(e||"").split(":");return t.length>=2?{hours:parseInt(t[0],10),minutes:parseInt(t[1],10)}:null},Wg=(e,t)=>{const n=Hg(e),l=Hg(t),a=n.minutes+60*n.hours,o=l.minutes+60*l.hours;return a===o?0:a>o?1:-1},qg=(e,t)=>{const n=Hg(e),l=Hg(t),a={hours:n.hours,minutes:n.minutes};return a.minutes+=l.minutes,a.hours+=l.hours,a.hours+=Math.floor(a.minutes/60),a.minutes=a.minutes%60,(e=>(e.hours<10?"0"+e.hours:e.hours)+":"+(e.minutes<10?"0"+e.minutes:e.minutes))(a)};var Yg=Qn({name:"ElTimeSelect",components:{ElSelect:Fv,ElOption:Lv},model:{prop:"value",event:"change"},props:{modelValue:String,editable:{type:Boolean,default:!0},clearable:{type:Boolean,default:!0},size:{type:String,default:"",validator:e=>!e||-1!==["medium","small","mini"].indexOf(e)},placeholder:{type:String,default:""},start:{type:String,default:"09:00"},end:{type:String,default:"18:00"},step:{type:String,default:"00:30"},minTime:{type:String,default:""},maxTime:{type:String,default:""},name:{type:String,default:""},prefixIcon:{type:String,default:"el-icon-time"},clearIcon:{type:String,default:"el-icon-circle-close"}},emits:["change","blur","focus","update:modelValue"],setup:e=>({value:tt(e.modelValue),items:ua((()=>{const t=[];if(e.start&&e.end&&e.step){let n=e.start;for(;Wg(n,e.end)<=0;)t.push({value:n,disabled:Wg(n,e.minTime||"-1:-1")<=0||Wg(n,e.maxTime||"100:100")>=0}),n=qg(n,e.step)}return t}))})});Yg.render=function(e,t,n,l,a,o){const r=pl("el-option"),i=pl("el-select");return Cl(),Al(i,{modelValue:e.value,"onUpdate:modelValue":t[1]||(t[1]=t=>e.value=t),disabled:!e.editable,clearable:e.clearable,"clear-icon":e.clearIcon,size:e.size,placeholder:e.placeholder,"default-first-option":"",filterable:"",onChange:t[2]||(t[2]=t=>{e.$emit("change",t),e.$emit("update:modelValue",t)}),onBlur:t[3]||(t[3]=t=>e.$emit("blur",t)),onFocus:t[4]||(t[4]=t=>e.$emit("focus",t))},{prefix:en((()=>[Tl("i",{class:"el-input__icon "+e.prefixIcon},null,2)])),default:en((()=>[(Cl(!0),Al(gl,null,da(e.items,(e=>(Cl(),Al(r,{key:e.value,label:e.value,value:e.value,disabled:e.disabled},null,8,["label","value","disabled"])))),128))])),_:1},8,["modelValue","disabled","clearable","clear-icon","size","placeholder"])},Yg.__file="packages/time-select/src/time-select.vue",Yg.install=e=>{e.component(Yg.name,Yg)};var Kg=Qn({name:"ElTimeline",setup:(e,t)=>(Fl("timeline",t),()=>{var e,n;return ca("ul",{class:{"el-timeline":!0}},null===(n=(e=t.slots).default)||void 0===n?void 0:n.call(e))})});Kg.__file="packages/timeline/src/index.vue",Kg.install=e=>{e.component(Kg.name,Kg)};var Ug=Qn({name:"ElTimelineItem",props:{timestamp:{type:String,default:""},hideTimestamp:{type:Boolean,default:!1},placement:{type:String,default:"bottom"},type:{type:String,default:""},color:{type:String,default:""},size:{type:String,default:"normal"},icon:{type:String,default:""}},setup(){$l("timeline")}});const Gg={class:"el-timeline-item"},Xg=Tl("div",{class:"el-timeline-item__tail"},null,-1),Jg={key:1,class:"el-timeline-item__dot"},Zg={class:"el-timeline-item__wrapper"},Qg={key:0,class:"el-timeline-item__timestamp is-top"},eb={class:"el-timeline-item__content"},tb={key:1,class:"el-timeline-item__timestamp is-bottom"};Ug.render=function(e,t,n,l,a,o){return Cl(),Al("li",Gg,[Xg,e.$slots.dot?Pl("v-if",!0):(Cl(),Al("div",{key:0,class:["el-timeline-item__node",["el-timeline-item__node--"+(e.size||""),"el-timeline-item__node--"+(e.type||"")]],style:{backgroundColor:e.color}},[e.icon?(Cl(),Al("i",{key:0,class:["el-timeline-item__icon",e.icon]},null,2)):Pl("v-if",!0)],6)),e.$slots.dot?(Cl(),Al("div",Jg,[Zt(e.$slots,"dot")])):Pl("v-if",!0),Tl("div",Zg,[e.hideTimestamp||"top"!==e.placement?Pl("v-if",!0):(Cl(),Al("div",Qg,d(e.timestamp),1)),Tl("div",eb,[Zt(e.$slots,"default")]),e.hideTimestamp||"bottom"!==e.placement?Pl("v-if",!0):(Cl(),Al("div",tb,d(e.timestamp),1))])])},Ug.__file="packages/timeline/src/item.vue",Ug.install=e=>{e.component(Ug.name,Ug)};var nb=Qn({name:"ElTransferPanel",components:{ElCheckboxGroup:Gd,ElCheckbox:fd,ElInput:cu,OptionContent:({option:e})=>e},props:{data:{type:Array,default:()=>[]},optionRender:Function,placeholder:String,title:String,filterable:Boolean,format:Object,filterMethod:Function,defaultChecked:Array,props:Object},emits:["checked-change"],setup(e,{emit:t,slots:n}){const l=Ye({checked:[],allChecked:!1,query:"",inputHover:!1,checkChangeByUser:!0}),{labelProp:a,keyProp:o,disabledProp:r,filteredData:i,checkedSummary:s,isIndeterminate:u,handleAllCheckedChange:c}=((e,t,n)=>{const l=ua((()=>e.props.label||"label")),a=ua((()=>e.props.key||"key")),o=ua((()=>e.props.disabled||"disabled")),r=ua((()=>e.data.filter((n=>"function"==typeof e.filterMethod?e.filterMethod(t.query,n):(n[l.value]||n[a.value].toString()).toLowerCase().includes(t.query.toLowerCase()))))),i=ua((()=>r.value.filter((e=>!e[o.value])))),s=ua((()=>{const n=t.checked.length,l=e.data.length,{noChecked:a,hasChecked:o}=e.format;return a&&o?n>0?o.replace(/\${checked}/g,n.toString()).replace(/\${total}/g,l.toString()):a.replace(/\${total}/g,l.toString()):`${n}/${l}`})),u=ua((()=>{const e=t.checked.length;return e>0&&e<i.value.length})),c=()=>{const e=i.value.map((e=>e[a.value]));t.allChecked=e.length>0&&e.every((e=>t.checked.includes(e)))};return An((()=>t.checked),((e,l)=>{if(c(),t.checkChangeByUser){const t=e.concat(l).filter((t=>!e.includes(t)||!l.includes(t)));n("checked-change",e,t)}else n("checked-change",e),t.checkChangeByUser=!0})),An(i,(()=>{c()})),An((()=>e.data),(()=>{const e=[],n=r.value.map((e=>e[a.value]));t.checked.forEach((t=>{n.includes(t)&&e.push(t)})),t.checkChangeByUser=!1,t.checked=e})),An((()=>e.defaultChecked),((e,n)=>{if(n&&e.length===n.length&&e.every((e=>n.includes(e))))return;const l=[],o=i.value.map((e=>e[a.value]));e.forEach((e=>{o.includes(e)&&l.push(e)})),t.checkChangeByUser=!1,t.checked=l}),{immediate:!0}),{labelProp:l,keyProp:a,disabledProp:o,filteredData:r,checkableData:i,checkedSummary:s,isIndeterminate:u,updateAllChecked:c,handleAllCheckedChange:e=>{t.checked=e?i.value.map((e=>e[a.value])):[]}}})(e,l,t),d=ua((()=>l.query.length>0&&0===i.value.length)),p=ua((()=>l.query.length>0&&l.inputHover?"circle-close":"search")),f=ua((()=>!!n.default()[0].children.length)),{checked:h,allChecked:v,query:m,inputHover:g,checkChangeByUser:b}=st(l);return{labelProp:a,keyProp:o,disabledProp:r,filteredData:i,checkedSummary:s,isIndeterminate:u,handleAllCheckedChange:c,checked:h,allChecked:v,query:m,inputHover:g,checkChangeByUser:b,hasNoMatch:d,inputIcon:p,hasFooter:f,clearQuery:()=>{"circle-close"===p.value&&(l.query="")},t:vc}}});const lb={class:"el-transfer-panel"},ab={class:"el-transfer-panel__header"},ob={key:0,class:"el-transfer-panel__footer"};nb.render=function(e,t,n,l,a,o){const r=pl("el-checkbox"),i=pl("el-input"),s=pl("option-content"),u=pl("el-checkbox-group");return Cl(),Al("div",lb,[Tl("p",ab,[Tl(r,{modelValue:e.allChecked,"onUpdate:modelValue":t[1]||(t[1]=t=>e.allChecked=t),indeterminate:e.isIndeterminate,onChange:e.handleAllCheckedChange},{default:en((()=>[Bl(d(e.title)+" ",1),Tl("span",null,d(e.checkedSummary),1)])),_:1},8,["modelValue","indeterminate","onChange"])]),Tl("div",{class:["el-transfer-panel__body",e.hasFooter?"is-with-footer":""]},[e.filterable?(Cl(),Al(i,{key:0,modelValue:e.query,"onUpdate:modelValue":t[3]||(t[3]=t=>e.query=t),class:"el-transfer-panel__filter",size:"small",placeholder:e.placeholder,onMouseenter:t[4]||(t[4]=t=>e.inputHover=!0),onMouseleave:t[5]||(t[5]=t=>e.inputHover=!1)},{prefix:en((()=>[Tl("i",{class:["el-input__icon","el-icon-"+e.inputIcon],onClick:t[2]||(t[2]=(...t)=>e.clearQuery(...t))},null,2)])),_:1},8,["modelValue","placeholder"])):Pl("v-if",!0),Un(Tl(u,{modelValue:e.checked,"onUpdate:modelValue":t[6]||(t[6]=t=>e.checked=t),class:[{"is-filterable":e.filterable},"el-transfer-panel__list"]},{default:en((()=>[(Cl(!0),Al(gl,null,da(e.filteredData,(t=>(Cl(),Al(r,{key:t[e.keyProp],class:"el-transfer-panel__item",label:t[e.keyProp],disabled:t[e.disabledProp]},{default:en((()=>[Tl(s,{option:e.optionRender(t)},null,8,["option"])])),_:2},1032,["label","disabled"])))),128))])),_:1},8,["modelValue","class"]),[[ho,!e.hasNoMatch&&e.data.length>0]]),Un(Tl("p",{class:"el-transfer-panel__empty"},d(e.hasNoMatch?e.t("el.transfer.noMatch"):e.t("el.transfer.noData")),513),[[ho,e.hasNoMatch||0===e.data.length]])],2),e.hasFooter?(Cl(),Al("p",ob,[Zt(e.$slots,"default")])):Pl("v-if",!0)])},nb.__file="packages/transfer/src/transfer-panel.vue";const rb="change";var ib=Qn({name:"ElTransfer",components:{TransferPanel:nb,ElButton:sc},props:{data:{type:Array,default:()=>[]},titles:{type:Array,default:()=>[]},buttonTexts:{type:Array,default:()=>[]},filterPlaceholder:{type:String,default:""},filterMethod:Function,leftDefaultChecked:{type:Array,default:()=>[]},rightDefaultChecked:{type:Array,default:()=>[]},renderContent:Function,modelValue:{type:Array,default:()=>[]},format:{type:Object,default:()=>({})},filterable:{type:Boolean,default:!1},props:{type:Object,default:()=>({label:"label",key:"key",disabled:"disabled"})},targetOrder:{type:String,default:"original",validator:e=>["original","push","unshift"].includes(e)}},emits:[tu,rb,"left-check-change","right-check-change"],setup(e,{emit:t,slots:n}){const l=$l("elFormItem",{}),a=Ye({leftChecked:[],rightChecked:[]}),{propsKey:o,sourceData:r,targetData:i}=(e=>{const t=ua((()=>e.props.key)),n=ua((()=>e.data.reduce(((e,n)=>(e[n[t.value]]=n)&&e),{}))),l=ua((()=>e.data.filter((n=>!e.modelValue.includes(n[t.value]))))),a=ua((()=>"original"===e.targetOrder?e.data.filter((n=>e.modelValue.includes(n[t.value]))):e.modelValue.reduce(((e,t)=>{const l=n.value[t];return l&&e.push(l),e}),[])));return{propsKey:t,sourceData:l,targetData:a}})(e),{onSourceCheckedChange:s,onTargetCheckedChange:u}=((e,t)=>({onSourceCheckedChange:(n,l)=>{e.leftChecked=n,void 0!==l&&t("left-check-change",n,l)},onTargetCheckedChange:(n,l)=>{e.rightChecked=n,void 0!==l&&t("right-check-change",n,l)}}))(a,t),{addToLeft:c,addToRight:d}=((e,t,n,l)=>{const a=(e,t,n)=>{l(tu,e),l(rb,e,t,n)};return{addToLeft:()=>{const n=e.modelValue.slice();t.rightChecked.forEach((e=>{const t=n.indexOf(e);t>-1&&n.splice(t,1)})),a(n,"left",t.rightChecked)},addToRight:()=>{let l=e.modelValue.slice();const o=e.data.filter((l=>{const a=l[n.value];return t.leftChecked.includes(a)&&!e.modelValue.includes(a)})).map((e=>e[n.value]));l="unshift"===e.targetOrder?o.concat(l):l.concat(o),a(l,"right",t.leftChecked)}}})(e,a,o,t),p=tt(null),f=tt(null),h=ua((()=>2===e.buttonTexts.length)),v=ua((()=>e.titles[0]||vc("el.transfer.titles.0"))),m=ua((()=>e.titles[1]||vc("el.transfer.titles.1"))),g=ua((()=>e.filterPlaceholder||vc("el.transfer.filterPlaceholder")));An((()=>e.modelValue),(e=>{var t;null===(t=l.formItemMitt)||void 0===t||t.emit("el.form.change",e)}));const b=ua((()=>t=>e.renderContent?e.renderContent(ca,t):n.default?n.default({option:t}):ca("span",t[e.props.label]||t[e.props.key])));return Object.assign(Object.assign({sourceData:r,targetData:i,onSourceCheckedChange:s,onTargetCheckedChange:u,addToLeft:c,addToRight:d},st(a)),{hasButtonTexts:h,leftPanelTitle:v,rightPanelTitle:m,panelFilterPlaceholder:g,clearQuery:e=>{"left"===e?p.value.query="":"right"===e&&(f.value.query="")},optionRender:b})}});const sb={class:"el-transfer"},ub={class:"el-transfer__buttons"},cb=Tl("i",{class:"el-icon-arrow-left"},null,-1),db={key:0},pb={key:0},fb=Tl("i",{class:"el-icon-arrow-right"},null,-1);ib.render=function(e,t,n,l,a,o){const r=pl("transfer-panel"),i=pl("el-button");return Cl(),Al("div",sb,[Tl(r,{ref:"leftPanel",data:e.sourceData,"option-render":e.optionRender,placeholder:e.panelFilterPlaceholder,title:e.leftPanelTitle,filterable:e.filterable,format:e.format,"filter-method":e.filterMethod,"default-checked":e.leftDefaultChecked,props:e.props,onCheckedChange:e.onSourceCheckedChange},{default:en((()=>[Zt(e.$slots,"left-footer")])),_:3},8,["data","option-render","placeholder","title","filterable","format","filter-method","default-checked","props","onCheckedChange"]),Tl("div",ub,[Tl(i,{type:"primary",class:["el-transfer__button",e.hasButtonTexts?"is-with-texts":""],disabled:0===e.rightChecked.length,onClick:e.addToLeft},{default:en((()=>[cb,void 0!==e.buttonTexts[0]?(Cl(),Al("span",db,d(e.buttonTexts[0]),1)):Pl("v-if",!0)])),_:1},8,["class","disabled","onClick"]),Tl(i,{type:"primary",class:["el-transfer__button",e.hasButtonTexts?"is-with-texts":""],disabled:0===e.leftChecked.length,onClick:e.addToRight},{default:en((()=>[void 0!==e.buttonTexts[1]?(Cl(),Al("span",pb,d(e.buttonTexts[1]),1)):Pl("v-if",!0),fb])),_:1},8,["class","disabled","onClick"])]),Tl(r,{ref:"rightPanel",data:e.targetData,"option-render":e.optionRender,placeholder:e.panelFilterPlaceholder,filterable:e.filterable,format:e.format,"filter-method":e.filterMethod,title:e.rightPanelTitle,"default-checked":e.rightDefaultChecked,props:e.props,onCheckedChange:e.onTargetCheckedChange},{default:en((()=>[Zt(e.$slots,"right-footer")])),_:3},8,["data","option-render","placeholder","filterable","format","filter-method","title","default-checked","props","onCheckedChange"])])},ib.__file="packages/transfer/src/index.vue",ib.install=e=>{e.component(ib.name,ib)};const hb="$treeNodeId",vb=function(e,t){t&&!t[hb]&&Object.defineProperty(t,hb,{value:e.id,enumerable:!1,configurable:!1,writable:!1})},mb=function(e,t){return e?t[e]:t[hb]},gb=e=>{let t=!0,n=!0,l=!0;for(let a=0,o=e.length;a<o;a++){const o=e[a];(!0!==o.checked||o.indeterminate)&&(t=!1,o.disabled||(l=!1)),(!1!==o.checked||o.indeterminate)&&(n=!1)}return{all:t,none:n,allWithoutDisable:l,half:!t&&!n}},bb=function(e){if(0===e.childNodes.length)return;const{all:t,none:n,half:l}=gb(e.childNodes);t?(e.checked=!0,e.indeterminate=!1):l?(e.checked=!1,e.indeterminate=!0):n&&(e.checked=!1,e.indeterminate=!1);const a=e.parent;a&&0!==a.level&&(e.store.checkStrictly||bb(a))},yb=function(e,t){const n=e.store.props,l=e.data||{},a=n[t];if("function"==typeof a)return a(l,e);if("string"==typeof a)return l[a];if(void 0===a){const e=l[t];return void 0===e?"":e}};let xb=0;class kb{constructor(e){this.id=xb++,this.text=null,this.checked=!1,this.indeterminate=!1,this.data=null,this.expanded=!1,this.parent=null,this.visible=!0,this.isCurrent=!1,this.canFocus=!1;for(const t in e)e.hasOwnProperty(t)&&(this[t]=e[t]);this.level=0,this.loaded=!1,this.childNodes=[],this.loading=!1,this.parent&&(this.level=this.parent.level+1);const t=this.store;if(!t)throw new Error("[Node]store is required!");t.registerNode(this);const n=t.props;if(n&&void 0!==n.isLeaf){const e=yb(this,"isLeaf");"boolean"==typeof e&&(this.isLeafByUser=e)}if(!0!==t.lazy&&this.data?(this.setData(this.data),t.defaultExpandAll&&(this.expanded=!0,this.canFocus=!0)):this.level>0&&t.lazy&&t.defaultExpandAll&&this.expand(),Array.isArray(this.data)||vb(this,this.data),!this.data)return;const l=t.defaultExpandedKeys,a=t.key;a&&l&&-1!==l.indexOf(this.key)&&this.expand(null,t.autoExpandParent),a&&void 0!==t.currentNodeKey&&this.key===t.currentNodeKey&&(t.currentNode=this,t.currentNode.isCurrent=!0),t.lazy&&t._initDefaultCheckedNode(this),this.updateLeafState(),!this.parent||1!==this.level&&!0!==this.parent.expanded||(this.canFocus=!0)}setData(e){let t;Array.isArray(e)||vb(this,e),this.data=e,this.childNodes=[],t=0===this.level&&this.data instanceof Array?this.data:yb(this,"children")||[];for(let e=0,n=t.length;e<n;e++)this.insertChild({data:t[e]})}get label(){return yb(this,"label")}get key(){const e=this.store.key;return this.data?this.data[e]:null}get disabled(){return yb(this,"disabled")}get nextSibling(){const e=this.parent;if(e){const t=e.childNodes.indexOf(this);if(t>-1)return e.childNodes[t+1]}return null}get previousSibling(){const e=this.parent;if(e){const t=e.childNodes.indexOf(this);if(t>-1)return t>0?e.childNodes[t-1]:null}return null}contains(e,t=!0){return(this.childNodes||[]).some((n=>n===e||t&&n.contains(e)))}remove(){const e=this.parent;e&&e.removeChild(this)}insertChild(e,t,n){if(!e)throw new Error("insertChild error: child is required.");if(!(e instanceof kb)){if(!n){const n=this.getChildren(!0);-1===n.indexOf(e.data)&&(void 0===t||t<0?n.push(e.data):n.splice(t,0,e.data))}Object.assign(e,{parent:this,store:this.store}),e=new kb(e)}e.level=this.level+1,void 0===t||t<0?this.childNodes.push(e):this.childNodes.splice(t,0,e),this.updateLeafState()}insertBefore(e,t){let n;t&&(n=this.childNodes.indexOf(t)),this.insertChild(e,n)}insertAfter(e,t){let n;t&&(n=this.childNodes.indexOf(t),-1!==n&&(n+=1)),this.insertChild(e,n)}removeChild(e){const t=this.getChildren()||[],n=t.indexOf(e.data);n>-1&&t.splice(n,1);const l=this.childNodes.indexOf(e);l>-1&&(this.store&&this.store.deregisterNode(e),e.parent=null,this.childNodes.splice(l,1)),this.updateLeafState()}removeChildByData(e){let t=null;for(let n=0;n<this.childNodes.length;n++)if(this.childNodes[n].data===e){t=this.childNodes[n];break}t&&this.removeChild(t)}expand(e,t){const n=()=>{if(t){let e=this.parent;for(;e.level>0;)e.expanded=!0,e=e.parent}this.expanded=!0,e&&e(),this.childNodes.forEach((e=>{e.canFocus=!0}))};this.shouldLoadData()?this.loadData((e=>{Array.isArray(e)&&(this.checked?this.setChecked(!0,!0):this.store.checkStrictly||bb(this),n())})):n()}doCreateChildren(e,t={}){e.forEach((e=>{this.insertChild(Object.assign({data:e},t),void 0,!0)}))}collapse(){this.expanded=!1,this.childNodes.forEach((e=>{e.canFocus=!1}))}shouldLoadData(){return!0===this.store.lazy&&this.store.load&&!this.loaded}updateLeafState(){if(!0===this.store.lazy&&!0!==this.loaded&&void 0!==this.isLeafByUser)return void(this.isLeaf=this.isLeafByUser);const e=this.childNodes;!this.store.lazy||!0===this.store.lazy&&!0===this.loaded?this.isLeaf=!e||0===e.length:this.isLeaf=!1}setChecked(e,t,n,l){if(this.indeterminate="half"===e,this.checked=!0===e,this.store.checkStrictly)return;if(!this.shouldLoadData()||this.store.checkDescendants){const{all:n,allWithoutDisable:a}=gb(this.childNodes);this.isLeaf||n||!a||(this.checked=!1,e=!1);const o=()=>{if(t){const n=this.childNodes;for(let a=0,o=n.length;a<o;a++){const o=n[a];l=l||!1!==e;const r=o.disabled?o.checked:l;o.setChecked(r,t,!0,l)}const{half:a,all:o}=gb(n);o||(this.checked=o,this.indeterminate=a)}};if(this.shouldLoadData())return void this.loadData((()=>{o(),bb(this)}),{checked:!1!==e});o()}const a=this.parent;a&&0!==a.level&&(n||bb(a))}getChildren(e=!1){if(0===this.level)return this.data;const t=this.data;if(!t)return null;const n=this.store.props;let l="children";return n&&(l=n.children||"children"),void 0===t[l]&&(t[l]=null),e&&!t[l]&&(t[l]=[]),t[l]}updateChildren(){const e=this.getChildren()||[],t=this.childNodes.map((e=>e.data)),n={},l=[];e.forEach(((e,a)=>{const o=e[hb];o&&t.findIndex((e=>e[hb]===o))>=0?n[o]={index:a,data:e}:l.push({index:a,data:e})})),this.store.lazy||t.forEach((e=>{n[e[hb]]||this.removeChildByData(e)})),l.forEach((({index:e,data:t})=>{this.insertChild({data:t},e)})),this.updateLeafState()}loadData(e,t={}){if(!0!==this.store.lazy||!this.store.load||this.loaded||this.loading&&!Object.keys(t).length)e&&e.call(this);else{this.loading=!0;const n=n=>{this.loaded=!0,this.loading=!1,this.childNodes=[],this.doCreateChildren(n,t),this.updateLeafState(),e&&e.call(this,n)};this.store.load(this,n)}}}class wb{constructor(e){this.currentNode=null,this.currentNodeKey=null;for(const t in e)e.hasOwnProperty(t)&&(this[t]=e[t]);this.nodesMap={},this.root=new kb({data:this.data,store:this}),this.lazy&&this.load?(0,this.load)(this.root,(e=>{this.root.doCreateChildren(e),this._initDefaultCheckedNodes()})):this._initDefaultCheckedNodes()}filter(e){const t=this.filterNodeMethod,n=this.lazy,l=function(a){const o=a.root?a.root.childNodes:a.childNodes;if(o.forEach((n=>{n.visible=t.call(n,e,n.data,n),l(n)})),!a.visible&&o.length){let e=!0;e=!o.some((e=>e.visible)),a.root?a.root.visible=!1===e:a.visible=!1===e}e&&(!a.visible||a.isLeaf||n||a.expand())};l(this)}setData(e){e!==this.root.data?(this.root.setData(e),this._initDefaultCheckedNodes()):this.root.updateChildren()}getNode(e){if(e instanceof kb)return e;const t="object"!=typeof e?e:mb(this.key,e);return this.nodesMap[t]||null}insertBefore(e,t){const n=this.getNode(t);n.parent.insertBefore({data:e},n)}insertAfter(e,t){const n=this.getNode(t);n.parent.insertAfter({data:e},n)}remove(e){const t=this.getNode(e);t&&t.parent&&(t===this.currentNode&&(this.currentNode=null),t.parent.removeChild(t))}append(e,t){const n=t?this.getNode(t):this.root;n&&n.insertChild({data:e})}_initDefaultCheckedNodes(){const e=this.defaultCheckedKeys||[],t=this.nodesMap;e.forEach((e=>{const n=t[e];n&&n.setChecked(!0,!this.checkStrictly)}))}_initDefaultCheckedNode(e){-1!==(this.defaultCheckedKeys||[]).indexOf(e.key)&&e.setChecked(!0,!this.checkStrictly)}setDefaultCheckedKey(e){e!==this.defaultCheckedKeys&&(this.defaultCheckedKeys=e,this._initDefaultCheckedNodes())}registerNode(e){const t=this.key;e&&e.data&&(t?void 0!==e.key&&(this.nodesMap[e.key]=e):this.nodesMap[e.id]=e)}deregisterNode(e){this.key&&e&&e.data&&(e.childNodes.forEach((e=>{this.deregisterNode(e)})),delete this.nodesMap[e.key])}getCheckedNodes(e=!1,t=!1){const n=[],l=function(a){(a.root?a.root.childNodes:a.childNodes).forEach((a=>{(a.checked||t&&a.indeterminate)&&(!e||e&&a.isLeaf)&&n.push(a.data),l(a)}))};return l(this),n}getCheckedKeys(e=!1){return this.getCheckedNodes(e).map((e=>(e||{})[this.key]))}getHalfCheckedNodes(){const e=[],t=function(n){(n.root?n.root.childNodes:n.childNodes).forEach((n=>{n.indeterminate&&e.push(n.data),t(n)}))};return t(this),e}getHalfCheckedKeys(){return this.getHalfCheckedNodes().map((e=>(e||{})[this.key]))}_getAllNodes(){const e=[],t=this.nodesMap;for(const n in t)t.hasOwnProperty(n)&&e.push(t[n]);return e}updateChildren(e,t){const n=this.nodesMap[e];if(!n)return;const l=n.childNodes;for(let e=l.length-1;e>=0;e--){const t=l[e];this.remove(t.data)}for(let e=0,l=t.length;e<l;e++){const l=t[e];this.append(l,n.data)}}_setCheckedKeys(e,t=!1,n){const l=this._getAllNodes().sort(((e,t)=>t.level-e.level)),a=Object.create(null),o=Object.keys(n);l.forEach((e=>e.setChecked(!1,!1)));for(let n=0,r=l.length;n<r;n++){const r=l[n],i=r.data[e].toString();if(!(o.indexOf(i)>-1)){r.checked&&!a[i]&&r.setChecked(!1,!1);continue}let s=r.parent;for(;s&&s.level>0;)a[s.data[e]]=!0,s=s.parent;if(r.isLeaf||this.checkStrictly)r.setChecked(!0,!1);else if(r.setChecked(!0,!0),t){r.setChecked(!1,!1);const e=function(t){t.childNodes.forEach((t=>{t.isLeaf||t.setChecked(!1,!1),e(t)}))};e(r)}}}setCheckedNodes(e,t=!1){const n=this.key,l={};e.forEach((e=>{l[(e||{})[n]]=!0})),this._setCheckedKeys(n,t,l)}setCheckedKeys(e,t=!1){this.defaultCheckedKeys=e;const n=this.key,l={};e.forEach((e=>{l[e]=!0})),this._setCheckedKeys(n,t,l)}setDefaultExpandedKeys(e){e=e||[],this.defaultExpandedKeys=e,e.forEach((e=>{const t=this.getNode(e);t&&t.expand(null,this.autoExpandParent)}))}setChecked(e,t,n){const l=this.getNode(e);l&&l.setChecked(!!t,n)}getCurrentNode(){return this.currentNode}setCurrentNode(e){const t=this.currentNode;t&&(t.isCurrent=!1),this.currentNode=e,this.currentNode.isCurrent=!0}setUserCurrentNode(e){const t=e[this.key],n=this.nodesMap[t];this.setCurrentNode(n)}setCurrentNodeKey(e){if(null==e)return this.currentNode&&(this.currentNode.isCurrent=!1),void(this.currentNode=null);const t=this.getNode(e);t&&this.setCurrentNode(t)}}var Cb=Qn({name:"ElTreeNodeContent",props:{node:{type:Object,required:!0},renderContent:Function},setup(e){const t=$l("NodeInstance"),n=$l("RootTree");return()=>{const l=e.node,{data:a,store:o}=l;return e.renderContent?e.renderContent(ca,{_self:t,node:l,data:a,store:o}):n.ctx.slots.default?n.ctx.slots.default({node:l,data:a}):ca("span",{class:"el-tree-node__label"},[l.label])}}});function _b(e){const t=$l("TreeNodeMap",null),n={treeNodeExpand:t=>{e.node!==t&&e.node.collapse()},children:[]};return t&&t.children.push(n),Fl("TreeNodeMap",n),{broadcastExpanded:t=>{if(e.accordion)for(const e of n.children)e.treeNodeExpand(t)}}}Cb.__file="packages/tree/src/tree-node-content.vue";var Ab=Qn({name:"ElTreeNode",components:{ElCollapseTransition:ep,ElCheckbox:fd,NodeContent:Cb},props:{node:{type:kb,default:()=>({})},props:{type:Object,default:()=>({})},renderContent:Function,renderAfterExpand:Boolean,showCheckbox:{type:Boolean,default:!1}},emits:["node-expand"],setup(e,t){const{broadcastExpanded:n}=_b(e),l=$l("RootTree"),a=tt(!1),o=tt(!1),r=tt(null),i=tt(null),s=tt(null),{emitter:u}={emitter:$l("DragNodeEmitter")},c=la();Fl("NodeInstance",c),l||console.warn("Can not find node's tree."),e.node.expanded&&(a.value=!0,o.value=!0);const d=l.props.children||"children";An((()=>e.node.data[d]),(()=>{e.node.updateChildren()})),An((()=>e.node.indeterminate),(t=>{p(e.node.checked,t)})),An((()=>e.node.checked),(t=>{p(t,e.node.indeterminate)})),An((()=>e.node.expanded),(e=>{Mt((()=>a.value=e)),e&&(o.value=!0)}));const p=(t,n)=>{r.value!==t&&i.value!==n&&l.ctx.emit("check-change",e.node.data,t,n),r.value=t,i.value=n},f=()=>{e.node.isLeaf||(a.value?(l.ctx.emit("node-collapse",e.node.data,e.node,c),e.node.collapse()):(e.node.expand(),t.emit("node-expand",e.node.data,e.node,c)))},h=(t,n)=>{e.node.setChecked(n.target.checked,!l.props.checkStrictly),Mt((()=>{const t=l.store.value;l.ctx.emit("check",e.node.data,{checkedNodes:t.getCheckedNodes(),checkedKeys:t.getCheckedKeys(),halfCheckedNodes:t.getHalfCheckedNodes(),halfCheckedKeys:t.getHalfCheckedKeys()})}))};return{node$:s,tree:l,expanded:a,childNodeRendered:o,oldChecked:r,oldIndeterminate:i,emitter:u,parent,getNodeKey:e=>mb(l.props.nodeKey,e.data),handleSelectChange:p,handleClick:()=>{const t=l.store.value;t.setCurrentNode(e.node),l.ctx.emit("current-change",t.currentNode?t.currentNode.data:null,t.currentNode),l.currentNode.value=e.node,l.props.expandOnClickNode&&f(),l.props.checkOnClickNode&&!e.node.disabled&&h(0,{target:{checked:!e.node.checked}}),l.ctx.emit("node-click",e.node.data,e.node,c)},handleContextMenu:t=>{l.instance.vnode.props.onNodeContextmenu&&(t.stopPropagation(),t.preventDefault()),l.ctx.emit("node-contextmenu",t,e.node.data,e.node,c)},handleExpandIconClick:f,handleCheckChange:h,handleChildNodeExpand:(e,t,a)=>{n(t),l.ctx.emit("node-expand",e,t,a)},handleDragStart:t=>{l.props.draggable&&u.emit("tree-node-drag-start",{event:t,treeNode:e})},handleDragOver:t=>{l.props.draggable&&(u.emit("tree-node-drag-over",{event:t,treeNode:{$el:s.value,node:e.node}}),t.preventDefault())},handleDrop:e=>{e.preventDefault()},handleDragEnd:e=>{l.props.draggable&&u.emit("tree-node-drag-end",e)}}}});const Sb={key:1,class:"el-tree-node__loading-icon el-icon-loading"};Ab.render=function(e,t,n,l,a,o){const r=pl("el-checkbox"),i=pl("node-content"),s=pl("el-tree-node"),u=pl("el-collapse-transition");return Un((Cl(),Al("div",{ref:"node$",class:["el-tree-node",{"is-expanded":e.expanded,"is-current":e.node.isCurrent,"is-hidden":!e.node.visible,"is-focusable":!e.node.disabled,"is-checked":!e.node.disabled&&e.node.checked}],role:"treeitem",tabindex:"-1","aria-expanded":e.expanded,"aria-disabled":e.node.disabled,"aria-checked":e.node.checked,draggable:e.tree.props.draggable,"data-key":e.getNodeKey(e.node),onClick:t[3]||(t[3]=co(((...t)=>e.handleClick(...t)),["stop"])),onContextmenu:t[4]||(t[4]=(...t)=>e.handleContextMenu(...t)),onDragstart:t[5]||(t[5]=co(((...t)=>e.handleDragStart(...t)),["stop"])),onDragover:t[6]||(t[6]=co(((...t)=>e.handleDragOver(...t)),["stop"])),onDragend:t[7]||(t[7]=co(((...t)=>e.handleDragEnd(...t)),["stop"])),onDrop:t[8]||(t[8]=co(((...t)=>e.handleDrop(...t)),["stop"]))},[Tl("div",{class:"el-tree-node__content",style:{"padding-left":(e.node.level-1)*e.tree.props.indent+"px"}},[Tl("span",{class:[{"is-leaf":e.node.isLeaf,expanded:!e.node.isLeaf&&e.expanded},"el-tree-node__expand-icon",e.tree.props.iconClass?e.tree.props.iconClass:"el-icon-caret-right"],onClick:t[1]||(t[1]=co(((...t)=>e.handleExpandIconClick(...t)),["stop"]))},null,2),e.showCheckbox?(Cl(),Al(r,{key:0,"model-value":e.node.checked,indeterminate:e.node.indeterminate,disabled:!!e.node.disabled,onClick:t[2]||(t[2]=co((()=>{}),["stop"])),onChange:e.handleCheckChange},null,8,["model-value","indeterminate","disabled","onChange"])):Pl("v-if",!0),e.node.loading?(Cl(),Al("span",Sb)):Pl("v-if",!0),Tl(i,{node:e.node,"render-content":e.renderContent},null,8,["node","render-content"])],4),Tl(u,null,{default:en((()=>[!e.renderAfterExpand||e.childNodeRendered?Un((Cl(),Al("div",{key:0,class:"el-tree-node__children",role:"group","aria-expanded":e.expanded},[(Cl(!0),Al(gl,null,da(e.node.childNodes,(t=>(Cl(),Al(s,{key:e.getNodeKey(t),"render-content":e.renderContent,"render-after-expand":e.renderAfterExpand,"show-checkbox":e.showCheckbox,node:t,onNodeExpand:e.handleChildNodeExpand},null,8,["render-content","render-after-expand","show-checkbox","node","onNodeExpand"])))),128))],8,["aria-expanded"])),[[ho,e.expanded]]):Pl("v-if",!0)])),_:1})],42,["aria-expanded","aria-disabled","aria-checked","draggable","data-key"])),[[ho,e.node.visible]])},Ab.__file="packages/tree/src/tree-node.vue";var Eb=Qn({name:"ElTree",components:{ElTreeNode:Ab},props:{data:{type:Array},emptyText:{type:String,default:()=>vc("el.tree.emptyText")},renderAfterExpand:{type:Boolean,default:!0},nodeKey:String,checkStrictly:Boolean,defaultExpandAll:Boolean,expandOnClickNode:{type:Boolean,default:!0},checkOnClickNode:Boolean,checkDescendants:{type:Boolean,default:!1},autoExpandParent:{type:Boolean,default:!0},defaultCheckedKeys:Array,defaultExpandedKeys:Array,currentNodeKey:[String,Number],renderContent:Function,showCheckbox:{type:Boolean,default:!1},draggable:{type:Boolean,default:!1},allowDrag:Function,allowDrop:Function,props:{type:Object,default:()=>({children:"children",label:"label",disabled:"disabled"})},lazy:{type:Boolean,default:!1},highlightCurrent:Boolean,load:Function,filterNodeMethod:Function,accordion:Boolean,indent:{type:Number,default:18},iconClass:String},emits:["check-change","current-change","node-click","node-contextmenu","node-collapse","node-expand","check","node-drag-start","node-drag-end","node-drop","node-drag-leave","node-drag-enter","node-drag-over"],setup(e,t){const n=tt(new wb({key:e.nodeKey,data:e.data,lazy:e.lazy,props:e.props,load:e.load,currentNodeKey:e.currentNodeKey,checkStrictly:e.checkStrictly,checkDescendants:e.checkDescendants,defaultCheckedKeys:e.defaultCheckedKeys,defaultExpandedKeys:e.defaultExpandedKeys,autoExpandParent:e.autoExpandParent,defaultExpandAll:e.defaultExpandAll,filterNodeMethod:e.filterNodeMethod})),l=tt(n.value.root),a=tt(null),o=tt(null),r=tt(null),{broadcastExpanded:i}=_b(e),{dragState:s}=function({props:e,ctx:t,el$:n,dropIndicator$:l,store:a}){const o=_o();Fl("DragNodeEmitter",o);const r=tt({showDropIndicator:!1,draggingNode:null,dropNode:null,allowDrop:!0,dropType:null});return o.on("tree-node-drag-start",(({event:n,treeNode:l})=>{if(console.log(n,l),"function"==typeof e.allowDrag&&!e.allowDrag(l.node))return n.preventDefault(),!1;n.dataTransfer.effectAllowed="move";try{n.dataTransfer.setData("text/plain","")}catch(e){}r.value.draggingNode=l,t.emit("node-drag-start",l.node,n)})),o.on("tree-node-drag-over",(({event:a,treeNode:o})=>{const i=o,s=r.value.dropNode;s&&s!==i&&Os(s.$el,"is-drop-inner");const u=r.value.draggingNode;if(!u||!i)return;let c=!0,d=!0,p=!0,f=!0;"function"==typeof e.allowDrop&&(c=e.allowDrop(u.node,i.node,"prev"),f=d=e.allowDrop(u.node,i.node,"inner"),p=e.allowDrop(u.node,i.node,"next")),a.dataTransfer.dropEffect=d?"move":"none",(c||d||p)&&s!==i&&(s&&t.emit("node-drag-leave",u.node,s.node,a),t.emit("node-drag-enter",u.node,i.node,a)),(c||d||p)&&(r.value.dropNode=i),i.node.nextSibling===u.node&&(p=!1),i.node.previousSibling===u.node&&(c=!1),i.node.contains(u.node,!1)&&(d=!1),(u.node===i.node||u.node.contains(i.node))&&(c=!1,d=!1,p=!1);const h=i.$el.getBoundingClientRect(),v=n.value.getBoundingClientRect();let m;const g=c?d?.25:p?.45:1:-1,b=p?d?.75:c?.55:0:1;let y=-9999;const x=a.clientY-h.top;m=x<h.height*g?"before":x>h.height*b?"after":d?"inner":"none";const k=i.$el.querySelector(".el-tree-node__expand-icon").getBoundingClientRect(),w=l.value;"before"===m?y=k.top-v.top:"after"===m&&(y=k.bottom-v.top),w.style.top=y+"px",w.style.left=k.right-v.left+"px","inner"===m?Ms(i.$el,"is-drop-inner"):Os(i.$el,"is-drop-inner"),r.value.showDropIndicator="before"===m||"after"===m,r.value.allowDrop=r.value.showDropIndicator||f,r.value.dropType=m,t.emit("node-drag-over",u.node,i.node,a)})),o.on("tree-node-drag-end",(e=>{const{draggingNode:n,dropType:l,dropNode:o}=r.value;if(e.preventDefault(),e.dataTransfer.dropEffect="move",n&&o){const r={data:n.node.data};"none"!==l&&n.node.remove(),"before"===l?o.node.parent.insertBefore(r,o.node):"after"===l?o.node.parent.insertAfter(r,o.node):"inner"===l&&o.node.insertChild(r),"none"!==l&&a.value.registerNode(r),Os(o.$el,"is-drop-inner"),t.emit("node-drag-end",n.node,o.node,l,e),"none"!==l&&t.emit("node-drop",n.node,o.node,l,e)}n&&!o&&t.emit("node-drag-end",n.node,null,l,e),r.value.showDropIndicator=!1,r.value.draggingNode=null,r.value.dropNode=null,r.value.allowDrop=!0})),{dragState:r}}({props:e,ctx:t,el$:o,dropIndicator$:r,store:n});!function({el$:e},t){const n=tt([]),l=tt([]);mn((()=>{o(),As(e.value,"keydown",a)})),yn((()=>{Ss(e.value,"keydown",a)})),bn((()=>{n.value=Array.from(e.value.querySelectorAll("[role=treeitem]")),l.value=Array.from(e.value.querySelectorAll("input[type=checkbox]"))})),An(l,(e=>{e.forEach((e=>{e.setAttribute("tabindex","-1")}))}));const a=l=>{const a=l.target;if(-1===a.className.indexOf("el-tree-node"))return;const o=l.code;n.value=Array.from(e.value.querySelectorAll(".is-focusable[role=treeitem]"));const r=n.value.indexOf(a);let i;if([Fs.up,Fs.down].indexOf(o)>-1){if(l.preventDefault(),o===Fs.up){i=-1===r?0:0!==r?r-1:n.value.length-1;const e=i;for(;!t.value.getNode(n.value[i].dataset.key).canFocus;){if(i--,i===e){i=-1;break}i<0&&(i=n.value.length-1)}}else{i=-1===r?0:r<n.value.length-1?r+1:0;const e=i;for(;!t.value.getNode(n.value[i].dataset.key).canFocus;){if(i++,i===e){i=-1;break}i>=n.value.length&&(i=0)}}-1!==i&&n.value[i].focus()}[Fs.left,Fs.right].indexOf(o)>-1&&(l.preventDefault(),a.click());const s=a.querySelector('[type="checkbox"]');[Fs.enter,Fs.space].indexOf(o)>-1&&s&&(l.preventDefault(),s.click())},o=()=>{var t;n.value=Array.from(e.value.querySelectorAll(".is-focusable[role=treeitem]")),l.value=Array.from(e.value.querySelectorAll("input[type=checkbox]"));const a=e.value.querySelectorAll(".is-checked[role=treeitem]");a.length?a[0].setAttribute("tabindex","0"):null===(t=n.value[0])||void 0===t||t.setAttribute("tabindex","0")}}({el$:o},n);const u=ua((()=>{const{childNodes:e}=l.value;return!e||0===e.length||e.every((({visible:e})=>!e))}));An((()=>e.defaultCheckedKeys),(e=>{n.value.setDefaultCheckedKey(e)})),An((()=>e.defaultExpandedKeys),(e=>{n.value.defaultExpandedKeys=e,n.value.setDefaultExpandedKeys(e)})),An((()=>e.data),(e=>{n.value.setData(e)})),An((()=>e.checkStrictly),(e=>{n.value.checkStrictly=e}));const c=()=>{const e=n.value.getCurrentNode();return e?e.data:null};return Fl("RootTree",{ctx:t,props:e,store:n,root:l,currentNode:a,instance:la()}),{store:n,root:l,currentNode:a,dragState:s,el$:o,dropIndicator$:r,isEmpty:u,filter:t=>{if(!e.filterNodeMethod)throw new Error("[Tree] filterNodeMethod is required when filter");n.value.filter(t)},getNodeKey:t=>mb(e.nodeKey,t.data),getNodePath:t=>{if(!e.nodeKey)throw new Error("[Tree] nodeKey is required in getNodePath");const a=n.value.getNode(t);if(!a)return[];const o=[a.data];let r=a.parent;for(;r&&r!==l.value;)o.push(r.data),r=r.parent;return o.reverse()},getCheckedNodes:(e,t)=>n.value.getCheckedNodes(e,t),getCheckedKeys:e=>n.value.getCheckedKeys(e),getCurrentNode:c,getCurrentKey:()=>{if(!e.nodeKey)throw new Error("[Tree] nodeKey is required in getCurrentKey");const t=c();return t?t[e.nodeKey]:null},setCheckedNodes:(t,l)=>{if(!e.nodeKey)throw new Error("[Tree] nodeKey is required in setCheckedNodes");n.value.setCheckedNodes(t,l)},setCheckedKeys:(t,l)=>{if(!e.nodeKey)throw new Error("[Tree] nodeKey is required in setCheckedKeys");n.value.setCheckedKeys(t,l)},setChecked:(e,t,l)=>{n.value.setChecked(e,t,l)},getHalfCheckedNodes:()=>n.value.getHalfCheckedNodes(),getHalfCheckedKeys:()=>n.value.getHalfCheckedKeys(),setCurrentNode:t=>{if(!e.nodeKey)throw new Error("[Tree] nodeKey is required in setCurrentNode");n.value.setUserCurrentNode(t)},setCurrentKey:t=>{if(!e.nodeKey)throw new Error("[Tree] nodeKey is required in setCurrentKey");n.value.setCurrentNodeKey(t)},getNode:e=>n.value.getNode(e),remove:e=>{n.value.remove(e)},append:(e,t)=>{n.value.append(e,t)},insertBefore:(e,t)=>{n.value.insertBefore(e,t)},insertAfter:(e,t)=>{n.value.insertAfter(e,t)},handleNodeExpand:(e,n,l)=>{i(n),t.emit("node-expand",e,n,l)},updateKeyChildren:(t,l)=>{if(!e.nodeKey)throw new Error("[Tree] nodeKey is required in updateKeyChild");n.value.updateChildren(t,l)}}}});const Mb={key:0,class:"el-tree__empty-block"},Ob={class:"el-tree__empty-text"},Db={ref:"dropIndicator$",class:"el-tree__drop-indicator"};function Tb(e,t,n){let l;l=n.response?""+(n.response.error||n.response):n.responseText?""+n.responseText:`fail to post ${e} ${n.status}`;const a=new Error(l);return a.status=n.status,a.method="post",a.url=e,a}function Nb(e){if("undefined"==typeof XMLHttpRequest)return;const t=new XMLHttpRequest,n=e.action;t.upload&&(t.upload.onprogress=function(t){t.total>0&&(t.percent=t.loaded/t.total*100),e.onProgress(t)});const l=new FormData;e.data&&Object.keys(e.data).forEach((t=>{l.append(t,e.data[t])})),l.append(e.filename,e.file,e.file.name),t.onerror=function(){e.onError(Tb(n,0,t))},t.onload=function(){if(t.status<200||t.status>=300)return e.onError(Tb(n,0,t));e.onSuccess(function(e){const t=e.responseText||e.response;if(!t)return t;try{return JSON.parse(t)}catch(e){return t}}(t))},t.open("post",n,!0),e.withCredentials&&"withCredentials"in t&&(t.withCredentials=!0);const a=e.headers||{};for(const e in a)a.hasOwnProperty(e)&&null!==a[e]&&t.setRequestHeader(e,a[e]);return t.send(l),t}Eb.render=function(e,t,n,l,a,o){const r=pl("el-tree-node");return Cl(),Al("div",{ref:"el$",class:["el-tree",{"el-tree--highlight-current":e.highlightCurrent,"is-dragging":!!e.dragState.draggingNode,"is-drop-not-allow":!e.dragState.allowDrop,"is-drop-inner":"inner"===e.dragState.dropType}],role:"tree"},[(Cl(!0),Al(gl,null,da(e.root.childNodes,(t=>(Cl(),Al(r,{key:e.getNodeKey(t),node:t,props:e.props,"render-after-expand":e.renderAfterExpand,"show-checkbox":e.showCheckbox,"render-content":e.renderContent,onNodeExpand:e.handleNodeExpand},null,8,["node","props","render-after-expand","show-checkbox","render-content","onNodeExpand"])))),128)),e.isEmpty?(Cl(),Al("div",Mb,[Tl("span",Ob,d(e.emptyText),1)])):Pl("v-if",!0),Un(Tl("div",Db,null,512),[[ho,e.dragState.showDropIndicator]])],2)},Eb.__file="packages/tree/src/tree.vue",Eb.install=e=>{e.component(Eb.name,Eb)};var Bb=Qn({name:"ElUploadList",components:{ElProgress:Am},props:{files:{type:Array,default:()=>[]},disabled:{type:Boolean,default:!1},handlePreview:{type:Function,default:()=>Ui},listType:{type:String,default:"text"}},emits:["remove"],setup:(e,{emit:t})=>({focusing:tt(!1),parsePercentage:e=>parseInt(e,10),handleClick:t=>{e.handlePreview(t)},handleRemove:(e,n)=>{t("remove",n)},onFileClicked:e=>{e.target.focus()},t:vc})});const Pb=Tl("i",{class:"el-icon-document"},null,-1),Vb={class:"el-upload-list__item-status-label"},Ib={key:2,class:"el-icon-close-tip"},Lb={key:4,class:"el-upload-list__item-actions"},zb=Tl("i",{class:"el-icon-zoom-in"},null,-1),Fb=Tl("i",{class:"el-icon-delete"},null,-1);Bb.render=function(e,t,n,l,a,o){const r=pl("el-progress");return Cl(),Al(Ga,{tag:"ul",class:["el-upload-list","el-upload-list--"+e.listType,{"is-disabled":e.disabled}],name:"el-list"},{default:en((()=>[(Cl(!0),Al(gl,null,da(e.files,((n,l)=>(Cl(),Al("li",{key:l,class:["el-upload-list__item","is-"+n.status,e.focusing?"focusing":""],tabindex:"0",onKeydown:fo((t=>!e.disabled&&e.handleRemove(t,n)),["delete"]),onFocus:t[1]||(t[1]=t=>e.focusing=!0),onBlur:t[2]||(t[2]=t=>e.focusing=!1),onClick:t[3]||(t[3]=(...t)=>e.onFileClicked(...t))},[Zt(e.$slots,"default",{file:n},(()=>["uploading"!==n.status&&["picture-card","picture"].includes(e.listType)?(Cl(),Al("img",{key:0,class:"el-upload-list__item-thumbnail",src:n.url,alt:""},null,8,["src"])):Pl("v-if",!0),Tl("a",{class:"el-upload-list__item-name",onClick:t=>e.handleClick(n)},[Pb,Bl(d(n.name),1)],8,["onClick"]),Tl("label",Vb,[Tl("i",{class:{"el-icon-upload-success":!0,"el-icon-circle-check":"text"===e.listType,"el-icon-check":["picture-card","picture"].includes(e.listType)}},null,2)]),e.disabled?Pl("v-if",!0):(Cl(),Al("i",{key:1,class:"el-icon-close",onClick:t=>e.handleRemove(t,n)},null,8,["onClick"])),Pl(" Due to close btn only appears when li gets focused disappears after li gets blurred, thus keyboard navigation can never reach close btn"),Pl(" This is a bug which needs to be fixed "),Pl(" TODO: Fix the incorrect navigation interaction "),e.disabled?Pl("v-if",!0):(Cl(),Al("i",Ib,d(e.t("el.upload.deleteTip")),1)),"uploading"===n.status?(Cl(),Al(r,{key:3,type:"picture-card"===e.listType?"circle":"line","stroke-width":"picture-card"===e.listType?6:2,percentage:e.parsePercentage(n.percentage)},null,8,["type","stroke-width","percentage"])):Pl("v-if",!0),"picture-card"===e.listType?(Cl(),Al("span",Lb,[Tl("span",{class:"el-upload-list__item-preview",onClick:t=>e.handlePreview(n)},[zb],8,["onClick"]),e.disabled?Pl("v-if",!0):(Cl(),Al("span",{key:0,class:"el-upload-list__item-delete",onClick:t=>e.handleRemove(t,n)},[Fb],8,["onClick"]))])):Pl("v-if",!0)]))],42,["onKeydown"])))),128))])),_:1},8,["class"])},Bb.__file="packages/upload/src/upload-list.vue";var $b=Qn({name:"ElUploadDrag",props:{disabled:{type:Boolean,default:!1}},emits:["file"],setup(e,{emit:t}){const n=$l("uploader",{}),l=tt(!1);return{dragover:l,onDrop:function(a){if(e.disabled||!n)return;const o=n.accept;l.value=!1,t("file",o?Array.from(a.dataTransfer.files).filter((e=>{const{type:t,name:n}=e,l=n.indexOf(".")>-1?"."+n.split(".").pop():"",a=t.replace(/\/.*$/,"");return o.split(",").map((e=>e.trim())).filter((e=>e)).some((e=>e.startsWith(".")?l===e:/\/\*$/.test(e)?a===e.replace(/\/\*$/,""):!!/^[^\/]+\/[^\/]+$/.test(e)&&t===e))})):a.dataTransfer.files)},onDragover:function(){e.disabled||(l.value=!0)}}}});$b.render=function(e,t,n,l,a,o){return Cl(),Al("div",{class:{"el-upload-dragger":!0,"is-dragover":e.dragover},onDrop:t[1]||(t[1]=co(((...t)=>e.onDrop(...t)),["prevent"])),onDragover:t[2]||(t[2]=co(((...t)=>e.onDragover(...t)),["prevent"])),onDragleave:t[3]||(t[3]=co((t=>e.dragover=!1),["prevent"]))},[Zt(e.$slots,"default")],34)},$b.__file="packages/upload/src/upload-dragger.vue";var Rb=Qn({components:{UploadDragger:$b},props:{type:{type:String,default:""},action:{type:String,required:!0},name:{type:String,default:"file"},data:{type:Object,default:()=>null},headers:{type:Object,default:()=>null},withCredentials:{type:Boolean,default:!1},multiple:{type:Boolean,default:null},accept:{type:String,default:""},onStart:{type:Function,default:Ui},onProgress:{type:Function,default:Ui},onSuccess:{type:Function,default:Ui},onError:{type:Function,default:Ui},beforeUpload:{type:Function,default:Ui},drag:{type:Boolean,default:!1},onPreview:{type:Function,default:Ui},onRemove:{type:Function,default:Ui},fileList:{type:Array,default:()=>[]},autoUpload:{type:Boolean,default:!0},listType:{type:String,default:"text"},httpRequest:{type:Function,default:()=>Nb},disabled:Boolean,limit:{type:Number,default:null},onExceed:{type:Function,default:Ui}},setup(e){const t=tt({}),n=tt(!1),l=tt(null);function a(t){if(e.limit&&e.fileList.length+t.length>e.limit)return void e.onExceed(t,e.fileList);let n=Array.from(t);e.multiple||(n=n.slice(0,1)),0!==n.length&&n.forEach((t=>{e.onStart(t),e.autoUpload&&o(t)}))}function o(t){if(l.value.value=null,!e.beforeUpload)return r(t);const n=e.beforeUpload(t);n instanceof Promise?n.then((e=>{const n=Object.prototype.toString.call(e);if("[object File]"===n||"[object Blob]"===n){"[object Blob]"===n&&(e=new File([e],t.name,{type:t.type}));for(const n in t)t.hasOwnProperty(n)&&(e[n]=t[n]);r(e)}else r(t)})).catch((()=>{e.onRemove(null,t)})):!1!==n?r(t):e.onRemove(null,t)}function r(n){const{uid:l}=n,a={headers:e.headers,withCredentials:e.withCredentials,file:n,data:e.data,filename:e.name,action:e.action,onProgress:t=>{e.onProgress(t,n)},onSuccess:a=>{e.onSuccess(a,n),delete t.value[l]},onError:a=>{e.onError(a,n),delete t.value[l]}},o=e.httpRequest(a);t.value[l]=o,o instanceof Promise&&o.then(a.onSuccess,a.onError)}function i(){e.disabled||(l.value.value=null,l.value.click())}return{reqs:t,mouseover:n,inputRef:l,abort:function(e){const n=t.value;if(e){let t=e;e.uid&&(t=e.uid),n[t]&&n[t].abort()}else Object.keys(n).forEach((e=>{n[e]&&n[e].abort(),delete n[e]}))},post:r,handleChange:function(e){const t=e.target.files;t&&a(t)},handleClick:i,handleKeydown:function(){i()},upload:o,uploadFiles:a}}});function jb(e,t){return t.find((t=>t.uid===e.uid))}function Hb(e){return Date.now()+e}Rb.render=function(e,t,n,l,a,o){const r=pl("upload-dragger");return Cl(),Al("div",{class:["el-upload","el-upload--"+e.listType],tabindex:"0",onClick:t[2]||(t[2]=(...t)=>e.handleClick(...t)),onKeydown:t[3]||(t[3]=fo(co(((...t)=>e.handleKeydown(...t)),["self"]),["enter","space"]))},[e.drag?(Cl(),Al(r,{key:0,disabled:e.disabled,onFile:e.uploadFiles},{default:en((()=>[Zt(e.$slots,"default")])),_:3},8,["disabled","onFile"])):Zt(e.$slots,"default",{key:1}),Tl("input",{ref:"inputRef",class:"el-upload__input",type:"file",name:e.name,multiple:e.multiple,accept:e.accept,onChange:t[1]||(t[1]=(...t)=>e.handleChange(...t))},null,40,["name","multiple","accept"])],34)},Rb.__file="packages/upload/src/upload.vue";var Wb=Qn({name:"ElUpload",components:{Upload:Rb,UploadList:Bb},props:{action:{type:String,required:!0},headers:{type:Object,default:()=>({})},data:{type:Object,default:()=>({})},multiple:{type:Boolean,default:!1},name:{type:String,default:"file"},drag:{type:Boolean,default:!1},withCredentials:Boolean,showFileList:{type:Boolean,default:!0},accept:{type:String,default:""},type:{type:String,default:"select"},beforeUpload:{type:Function,default:Ui},beforeRemove:{type:Function,default:Ui},onRemove:{type:Function,default:Ui},onChange:{type:Function,default:Ui},onPreview:{type:Function,default:Ui},onSuccess:{type:Function,default:Ui},onProgress:{type:Function,default:Ui},onError:{type:Function,default:Ui},fileList:{type:Array,default:()=>[]},autoUpload:{type:Boolean,default:!0},listType:{type:String,default:"text"},httpRequest:{type:Function,default:Nb},disabled:Boolean,limit:{type:Number,default:null},onExceed:{type:Function,default:()=>Ui}},setup(e){const t=$l("elForm",{}),n=ua((()=>e.disabled||t.disabled)),{clearFiles:l,handleError:a,handleProgress:o,handleStart:r,handleSuccess:i,handleRemove:s,submit:u,uploadRef:c,uploadFiles:d}=(e=>{const t=tt([]),n=tt(null);let l=1;return An((()=>e.listType),(n=>{"picture-card"!==n&&"picture"!==n||(t.value=t.value.map((n=>{if(!n.url&&n.raw)try{n.url=URL.createObjectURL(n.raw)}catch(l){e.onError(l,n,t.value)}return n})))})),An((()=>e.fileList),(e=>{t.value=e.map((e=>(e.uid=e.uid||Hb(l++),e.status=e.status||"success",e)))}),{immediate:!0,deep:!0}),{clearFiles:function(){t.value=[]},handleError:function(n,l){const a=jb(l,t.value);a.status="fail",t.value.splice(t.value.indexOf(a),1),e.onError(n,a,t.value),e.onChange(a,t.value)},handleProgress:function(n,l){const a=jb(l,t.value);e.onProgress(n,a,t.value),a.status="uploading",a.percentage=n.percent||0},handleStart:function(n){const a=Hb(l++);n.uid=a;const o={name:n.name,percentage:0,status:"ready",size:n.size,raw:n,uid:a};if("picture-card"===e.listType||"picture"===e.listType)try{o.url=URL.createObjectURL(n)}catch(n){console.error("[Element Error][Upload]",n),e.onError(n,o,t.value)}t.value.push(o),e.onChange(o,t.value)},handleSuccess:function(n,l){const a=jb(l,t.value);a&&(a.status="success",a.response=n,e.onSuccess(n,a,t.value),e.onChange(a,t.value))},handleRemove:function(l,a){a&&(l=jb(a,t.value));const o=()=>{!function(e){n.value.abort(e)}(l);const a=t.value;a.splice(a.indexOf(l),1),e.onRemove(l,a)};if(e.beforeRemove){if("function"==typeof e.beforeRemove){const n=e.beforeRemove(l,t.value);n instanceof Promise?n.then((()=>{o()})).catch(Ui):!1!==n&&o()}}else o()},submit:function(){t.value.filter((e=>"ready"===e.status)).forEach((e=>{n.value.upload(e.raw)}))},uploadFiles:t,uploadRef:n}})(e);return Fl("uploader",la()),yn((()=>{d.value.forEach((e=>{e.url&&0===e.url.indexOf("blob:")&&URL.revokeObjectURL(e.url)}))})),{dragOver:tt(!1),draging:tt(!1),handleError:a,handleProgress:o,handleRemove:s,handleStart:r,handleSuccess:i,uploadDisabled:n,uploadFiles:d,uploadRef:c,submit:u,clearFiles:l}},render(){var e,t;let n;n=this.showFileList?ca(Bb,{disabled:this.uploadDisabled,listType:this.listType,files:this.uploadFiles,onRemove:this.handleRemove,handlePreview:this.onPreview},this.$slots.file?{default:e=>this.$slots.file({file:e.file})}:null):null;const l={type:this.type,drag:this.drag,action:this.action,multiple:this.multiple,"before-upload":this.beforeUpload,"with-credentials":this.withCredentials,headers:this.headers,name:this.name,data:this.data,accept:this.accept,fileList:this.uploadFiles,autoUpload:this.autoUpload,listType:this.listType,disabled:this.uploadDisabled,limit:this.limit,"on-exceed":this.onExceed,"on-start":this.handleStart,"on-progress":this.handleProgress,"on-success":this.handleSuccess,"on-error":this.handleError,"on-preview":this.onPreview,"on-remove":this.handleRemove,"http-request":this.httpRequest,ref:"uploadRef"},a=this.$slots.trigger||this.$slots.default,o=ca(Rb,l,{default:()=>null==a?void 0:a()});return ca("div",["picture-card"===this.listType?n:null,this.$slots.trigger?[o,this.$slots.default()]:o,null===(t=(e=this.$slots).tip)||void 0===t?void 0:t.call(e),"picture-card"!==this.listType?n:null])}});Wb.__file="packages/upload/src/index.vue",Wb.install=e=>{e.component(Wb.name,Wb)};var qb=Qn({name:"ElVirtualListItem",props:{},setup(){const e=tt();return mn((()=>{})),bn((()=>{})),{itemRef:e}}});const Yb=function(e){return t=>en((function(){ln(e);const n=t.apply(this,arguments);return an(),n}))}("data-v-09d1eddb");ln("data-v-09d1eddb");const Kb={ref:"itemRef",class:"el-vl__item"};an();const Ub=Yb(((e,t,n,l,a,o)=>(Cl(),Al("div",Kb,[Zt(e.$slots,"default")],512))));qb.render=Ub,qb.__scopeId="data-v-09d1eddb",qb.__file="packages/virtual-list/src/virtual-item.vue";var Gb=Qn({name:"ElVirtualList",components:{[qb.name]:qb},props:{direction:{type:String,default:"v"},data:{type:Array,required:!0},itemSize:{type:Number,required:!0},windowSize:{type:Number,required:!0},poolSize:{type:Number,default:20}},setup:e=>function(e){const t=tt(),n=tt(0),l=tt(0),a=tt(!0),o=tt(""),r=tt(""),i=tt(),s=tt("");An((()=>e.direction),(e=>{const t="v"===e;a.value=t,o.value="client"+(t?"Height":"Width"),r.value="scroll"+(t?"Top":"Left"),i.value=t?"Y":"X",s.value=t?"height":"width"}),{immediate:!0}),An((()=>e.poolSize),(e=>{l.value=Math.floor(e/3)}),{immediate:!0});const u=ua((()=>e.poolSize+2*ks(l))),c=ua((()=>Math.max(0,Math.floor(ks(n)/e.itemSize)-ks(l)))),d=ua((()=>({[ks(s)]:e.windowSize+"px"}))),p=ua((()=>({[ks(s)]:e.data.length*e.itemSize+"px"}))),f=ua((()=>{const t=ks(c)*e.itemSize;return{transform:`translate${ks(i)}(${t}px)`}})),h=ua((()=>({[ks(s)]:e.itemSize+"px"})));let v=null;const m=ua((()=>{const t=ks(c),n=Math.min(e.data.length-t,ks(u));return e.data.slice(t,t+n)}));return{viewportRef:t,contentStyle:p,itemContainerStyle:f,itemStyle:h,viewportStyle:d,startNode:c,renderingItems:u,window:m,onScroll:e=>{v&&cancelAnimationFrame(v),v=requestAnimationFrame((()=>{n.value=e.target[ks(r)]}))},scrollTo:(l,a="head")=>{if(is)return;let o;switch((l<0||l>e.data.length)&&zs("ElVirtualList]","Out of list range"),a){case"head":o=l*e.itemSize;break;case"center":o=(l-Math.floor(Math.floor(e.windowSize/e.itemSize)/2))*e.itemSize;break;case"tail":o=(l-Math.floor(e.windowSize/e.itemSize)+1)*e.itemSize;break;default:zs("[ElVirtualList]","Unsupported alignment")}requestAnimationFrame((()=>{n.value=o,t.value[ks(r)]=o}))}}}(e)});Gb.render=function(e,t,n,l,a,o){const r=pl("el-virtual-list-item");return Cl(),Al("div",{ref:"viewportRef",class:"el-vl__viewport",style:e.viewportStyle,onScrollPassive:t[1]||(t[1]=(...t)=>e.onScroll(...t))},[Tl("div",{class:"el-vl__content",style:e.contentStyle},[Tl("div",{class:"el-vl__item-container",style:e.itemContainerStyle,"data-direction":e.direction},[(Cl(!0),Al(gl,null,da(e.window,((t,n)=>(Cl(),Al(r,{key:n,class:"el-vl__item",style:e.itemStyle},{default:en((()=>[Zt(e.$slots,"default",{item:t})])),_:2},1032,["style"])))),128))],12,["data-direction"])],4)],36)},Gb.__file="packages/virtual-list/src/index.vue",Gb.install=e=>{e.component(Gb.name,Gb)};const Xb={size:"",zIndex:2e3},Jb=[Wi,Ki,Uu,Ju,Qu,tc,lc,oc,sc,dc,Gc,nd,ad,ud,Wd,$d,fd,Ud,Gd,Jd,Zd,tp,ep,Ap,Np,Tf,Pf,$f,Rf,Yf,Gf,Xf,Jf,ou,Qf,eh,th,bh,cu,Oh,Dh,zh,Wh,Kh,Gh,Lv,Yv,Xv,mm,gm,wm,Ku,Am,bd,Om,Dm,Tm,Nm,Au,Fv,Vm,$m,qm,Ym,Km,Xm,_g,Fg,jg,Rd,jc,Yg,Kg,Ug,Yh,ib,Eb,Wb,Gb],Zb=[Mh,Lh,nv,Sv,Pv],Qb={version:"1.0.1-beta.9",install:(e,t)=>{const n=Object.assign(Xb,t);(e=>{fc=e||fc,fc.name&&Zr().locale(fc.name)})(n.locale),e.config.globalProperties.$ELEMENT=n,(e=>{Nu=e})(n),Jb.forEach((t=>{e.component(t.name,t)})),Zb.forEach((t=>{e.use(t)}))}},ey=Tl("button",{class:"btn"},"点击",-1),ty={name:"HelloWorld",props:{msg:String}};var ny=n(3379),ly=n.n(ny),ay=n(2108);ly()(ay.Z,{insert:"head",singleton:!1}),ay.Z.locals,ty.render=function(e,t,n,l,a,o){return Cl(),Al(gl,null,[Tl("p",null,d(n.msg),1),ey],64)};const oy=ty,ry={class:"main"},iy={class:"side",style:{"-webkit-app-region":"drag"}},sy=Tl("div",{class:"logo",style:{"-webkit-app-region":"drag"}},[Tl("svg",{viewBox:"0 0 1024 1024",width:"50",height:"56"},[Tl("path",{d:"M958.136 192h-432.64l-45.03 174.2-16.166 114.484 86.658 241.69 13.914 293.278h393.266c36.368 0 65.864-29.496 65.864-65.864V257.864C1024 221.496 994.504 192 958.136 192z",fill:"#E6E6E6","p-id":"6311"}),Tl("path",{d:"M737.392 832l-172.522 183.652L503.764 832l24.932-66.958z",fill:"#3A5BBC","p-id":"6312"}),Tl("path",{d:"M939.13 488.348v-41.74h-158.608v-58.434h-41.74v58.434H595.84v41.74h231.78c-12.892 27.144-35.242 70.43-65.956 116.07-28.264-35.298-46.124-59.862-46.336-60.154l-12.258-16.89-33.784 24.51 12.254 16.89c0.954 1.316 21.752 29.926 54.676 70.6-22.444 27.498-63.616 72.212-85.31 93.904l29.512 29.512c18.724-18.724 57.548-60.428 82.852-90.654 32.918 39.106 65.046 74.388 95.708 105.052l14.756 14.756 29.516-29.51-14.756-14.756C856.816 716 823.456 679.15 789.2 638.08c44.266-63.646 72.96-123.912 84.4-149.732h65.53z",fill:"#808080","p-id":"6313"}),Tl("path",{d:"M698.658 715.046L737.392 832H65.864C29.468 832 0 802.504 0 766.136V74.212C0 37.844 29.468 8.348 65.864 8.348h398.832L525.496 192l91.214 275.478 81.948 247.568z",fill:"#518EF8","p-id":"6314"}),Tl("path",{d:"M298.602 574.748c-85.54 0-155.13-69.59-155.13-155.13s69.59-155.13 155.13-155.13c41.408 0 80.364 16.13 109.69 45.424l-29.498 29.532c-21.446-21.42-49.922-33.216-80.194-33.216-62.526 0-113.392 50.866-113.392 113.392s50.866 113.392 113.392 113.392c55.396 0 101.64-39.934 111.466-92.522h-111.462v-41.74h155.13v20.87c-0.002 85.538-69.592 155.128-155.132 155.128z",fill:"#FFFFFF","p-id":"6315"})]),Tl("h1",null,"可视化翻译")],-1),uy={class:"entry"},cy={class:"select-file"},dy=Tl("button",null,"+ 导入语言包",-1),py={class:"catalog"},fy=Tl("h4",null,"模块目录",-1),hy={class:"output"},vy={title:"技术支持"},my=Bl("with "),gy=Bl(" by MuFeng"),by={class:"content"},yy={class:"main-heade"},xy=Bl("中文包"),ky={key:0},wy=Bl(": "),Cy={class:"gray"},_y=Bl(),Ay=Bl("英文包"),Sy={key:0},Ey=Bl(": "),My={class:"gray"},Oy=Bl(),Dy={ref:"pageCon"},Ty={key:0,class:"nodata"},Ny=Bl(" 请先导入语言包文件:"),By=Tl("br",null,null,-1),Py=Tl("span",null,"支持.json，或json格式的(.js/.ts)文件。",-1),Vy={class:"kv"},Iy={key:0},Ly={key:1},zy={key:0},Fy={key:1,class:"child-item"},$y=Tl("br",null,null,-1),Ry={class:"kv"},jy={key:0},Hy={key:1},Wy={key:0},qy={key:1,class:"child-item"},{ipcRenderer:Yy}=n(8933),{remote:Ky}=n(8933),{Menu:Uy,MenuItem:Gy}=Ky,Xy=(n(8933).shell,n(5747)),Jy=Qn({setup(e,t){const n=Ye({form:{key:"",enValue:"",zhValue:""},formLabelWidth:"80px",regionRules:{key:[{required:!0,trigger:"blur"},{max:40,message:"",trigger:"blur"}],enValue:[{required:!0,trigger:"blur"},{max:40,message:"",trigger:"blur"}],zhValue:[{required:!0,trigger:"blur"},{max:40,message:"",trigger:"blur"}]},isSubmit:!1,currentModule:"",name:"首页",path:"/home",lang:{en:{},zh:{}},langFile:{en:{name:"",file:""},zh:{name:"",file:""}},filterText:"",treeData:[],contextMenu:new Uy,dialogShowVisible:!1}),l=(e,t)=>{var l;n.treeData=[],l=JSON.parse(JSON.stringify(t)),Object.entries(l).map((e=>{if("object"==typeof e[1]){let t={label:e[0],value:""};n.treeData.push(t)}})),console.log(n.treeData)};return{...st(n),entryFile:e=>{let t=e.target.files[0];console.log(t);let a=t.name,o="";(a.includes("zh")||a.includes("cn"))&&(o="zh"),(a.includes("en")||a.includes("EN"))&&(o="en"),n.langFile[o].file=a,n.langFile[o].name=o,Xy.readFile(t.path,"utf-8",((e,t)=>{let a=t.substring(t.indexOf("{"));console.log(a),e?console.log("出错",e):(n.lang[o]=JSON.parse(a),l(0,JSON.parse(a)))}))},treeInit:l,clickLocalNode:function(e,t,n){console.log(e,t,n),console.log(e.label)},creatMenu:function(e,t,n,l){e.preventDefault(),this.currentModule=t.label,this.contextMenu.popup({window:Ky.getCurrentWindow()})},filterNode:function(e,t){return!e||-1!==t.label.indexOf(e)},exportLang:function(e){let t=`export default ${JSON.stringify(this.lang[e.name],"","\t")}`;console.log(t),Yy.send("save-dialog",e.file),Yy.on("save-file",((e,n)=>{if(!n.canceled){let e=n.filePath;Xy.writeFile(e,t,"utf-8",((t,n)=>{if(t)throw t;console.log("文件已被保存");const l={title:"导出成功",body:"导出目录为:"+e};new window.Notification(l.title,l)}))}}))}}}});var Zy=n(4247);ly()(Zy.Z,{insert:"head",singleton:!1}),Zy.Z.locals,Jy.render=function(e,t,n,l,a,o){const r=pl("el-input"),i=pl("el-tree"),s=hl("tresize");return Cl(),Al("div",ry,[Tl("div",iy,[sy,Tl("div",uy,[Tl("div",cy,[Tl("input",{class:"input-file",onChange:t[1]||(t[1]=(...t)=>e.entryFile&&e.entryFile(...t)),type:"file",name:"导入"},null,32),dy])]),Tl("div",py,[fy,Tl(r,{class:"search-text",placeholder:"输入关键字进行过滤",size:"mini",modelValue:e.filterText,"onUpdate:modelValue":t[2]||(t[2]=t=>e.filterText=t)},null,8,["modelValue"]),Tl(i,{ref:"tree",data:e.treeData,"node-key":"id","highlight-current":"",onNodeContextmenu:e.creatMenu,onCurrentChange:e.clickLocalNode,"filter-node-method":e.filterNode},null,8,["data","onNodeContextmenu","onCurrentChange","filter-node-method"])]),Tl("div",hy,[Pl(' <button class="fixedlb" @click="exportLang">导出</button> '),Tl("p",vy,[my,Tl("a",{onClick:t[3]||(t[3]=t=>e.aboutMe(this)),href:"javascript:"},"♥"),gy])])]),Tl("div",by,[Pl(" <h2>SenseGuard i18n-tools</h2> "),Tl("div",yy,[Tl("h3",null,[xy,e.langFile.zh.name?(Cl(),Al("span",ky,[wy,Tl("span",Cy,d(e.langFile.zh.file),1),_y,Tl("button",{title:"导出中文语言包",class:"mini",onClick:t[4]||(t[4]=t=>e.exportLang(e.langFile.zh))},"➥导出")])):Pl("v-if",!0)]),Tl("h3",null,[Ay,e.langFile.en.name?(Cl(),Al("span",Sy,[Ey,Tl("span",My,d(e.langFile.en.file),1),Oy,Tl("button",{title:"导出英文语言包",class:"mini",onClick:t[5]||(t[5]=t=>e.exportLang(e.langFile.en))},"➥导出")])):Pl("v-if",!0)])]),Tl("section",Dy,[0==Object.keys(e.lang.zh).length&&0==Object.keys(e.lang.en).length?(Cl(),Al("div",Ty,[Ny,By,Py])):Pl("v-if",!0),Tl("div",Vy,[(Cl(!0),Al(gl,null,da(e.lang.zh,((t,n)=>(Cl(),Al("dl",{key:n},[Tl("dt",{ref:n,name:n},[Tl("em",{textContent:d(n),onInput:e=>n=e.target.innerText},null,40,["textContent","onInput"])],8,["name"]),Tl("dd",null,["string"==typeof t?(Cl(),Al("div",Iy,[Pl(" <label></label> "),Un(Tl("textarea",{class:n,placeholder:"请输入",autoHeight:"true","onUpdate:modelValue":t=>e.lang.zh[n]=t},null,10,["onUpdate:modelValue"]),[[s,e.changed],[no,e.lang.zh[n]]])])):(Cl(),Al("ul",Ly,[(Cl(!0),Al(gl,null,da(e.lang.zh[n],((t,l)=>(Cl(),Al("li",{key:l},[Tl("em",null,d(l),1),"string"==typeof e.lang.zh[n][l]?(Cl(),Al("div",zy,[Un(Tl("textarea",{class:l,placeholder:"请输入",autoHeight:"true","onUpdate:modelValue":t=>e.lang.zh[n][l]=t},null,10,["onUpdate:modelValue"]),[[s,e.changed],[no,e.lang.zh[n][l]]])])):(Cl(),Al("div",Fy,[Tl("ul",null,[(Cl(!0),Al(gl,null,da(e.lang.zh[n][l],((t,a)=>(Cl(),Al("li",{key:a},[Tl("em",null,d(a),1),$y,Un(Tl("textarea",{class:l,placeholder:"请输入",autoHeight:"true","onUpdate:modelValue":t=>e.lang.zh[n][l][a]=t},null,10,["onUpdate:modelValue"]),[[s,e.changed],[no,e.lang.zh[n][l][a]]])])))),128))])]))])))),128))]))])])))),128))]),Tl("div",Ry,[(Cl(!0),Al(gl,null,da(e.lang.en,((t,n)=>(Cl(),Al("dl",{key:n},[Tl("dt",null,[Tl("em",null,d(n),1)]),Tl("dd",null,["string"==typeof e.lang.en[n]?(Cl(),Al("div",jy,[Pl(' <label for=""></label> '),Un(Tl("textarea",{style:{resize:"none"},class:n,placeholder:"请输入",autoHeight:"true","onUpdate:modelValue":t=>e.lang.en[n]=t},null,10,["onUpdate:modelValue"]),[[s,e.changed],[no,e.lang.en[n]]])])):(Cl(),Al("ul",Hy,[(Cl(!0),Al(gl,null,da(e.lang.en[n],((t,l)=>(Cl(),Al("li",{key:l},[Tl("em",null,d(l),1),"string"==typeof e.lang.en[n][l]?(Cl(),Al("div",Wy,[Un(Tl("textarea",{class:l,placeholder:"请输入",autoHeight:"true","onUpdate:modelValue":t=>e.lang.en[n][l]=t},null,10,["onUpdate:modelValue"]),[[s,e.changed],[no,e.lang.en[n][l]]])])):(Cl(),Al("div",qy,[Tl("ul",null,[(Cl(!0),Al(gl,null,da(e.lang.en[n][l],((t,a)=>(Cl(),Al("li",{key:a},[Tl("em",null,d(a),1),Un(Tl("textarea",{class:l,placeholder:"请输入",autoHeight:"true","onUpdate:modelValue":t=>e.lang.en[n][l][a]=t},null,10,["onUpdate:modelValue"]),[[s,e.changed],[no,e.lang.en[n][l][a]]])])))),128))])]))])))),128))]))])])))),128))]),Pl(' <el-dialog\r\n          width="500px"\r\n          :visible.sync="dialogShowVisible">\r\n          <div class="dialog-title" slot="title">{{currentModule}}: <em>添加子项</em></div>\r\n          <el-form :model="form" ref="regionRules" :rules="regionRules">\r\n            <el-form-item label="key:" :label-width="formLabelWidth" prop="key">\r\n              <el-input size="small" v-model="form.key" maxlength="40" autocomplete="off"></el-input>\r\n            </el-form-item>\r\n            <el-form-item label="中文:" :label-width="formLabelWidth" prop="zhValue">\r\n              <el-input size="small" v-model="form.zhValue" maxlength="100" autocomplete="off"></el-input>\r\n            </el-form-item>\r\n            <el-form-item label="英文:" :label-width="formLabelWidth" prop="enValue">\r\n              <el-input size="small" v-model="form.enValue" maxlength="100" autocomplete="off"></el-input>\r\n            </el-form-item>\r\n          </el-form>\r\n          <div slot="footer" class="dialog-footer">\r\n            <el-button size="small" type="primary" :loading="isSubmit" @click="addItem">确定</el-button>\r\n            <el-button size="small" type="info" @click="dialogShowVisible = false">取消</el-button>\r\n          </div>\r\n        </el-dialog> ')],512)])])};const Qy={name:"App",components:{HelloWorld:oy,HomePage:Jy}};var ex=n(4308);ly()(ex.Z,{insert:"head",singleton:!1}),ex.Z.locals,Qy.render=function(e,t,n,l,a,o){const r=pl("HomePage");return Cl(),Al(gl,null,[Pl(' <HelloWorld msg="hello Vue3"></HelloWorld> '),Tl(r)],2112)};let tx=((...e)=>{const t=bo().createApp(...e),{mount:n}=t;return t.mount=e=>{const l=function(e){return O(e)?document.querySelector(e):e}(e);if(!l)return;const a=t._component;M(a)||a.render||a.template||(a.template=l.innerHTML),l.innerHTML="";const o=n(l);return l.removeAttribute("v-cloak"),l.setAttribute("data-v-app",""),o},t})(Qy);tx.use(Qb),tx.directive("tresize",{bind(e,t){let n="",l="",a="";e.__vueReize__=setInterval((function(){const o=document.defaultView.getComputedStyle(e);n===o.width&&l===o.height||(a=e.classList[0],t.value({width:n,height:l,className:a})),n=o.width,l=o.height,a=o.className}),400)},unbind(e){clearInterval(e.__vueReize__)}}),tx.mount("#app")})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvQXBwLnZ1ZT8yOTI2Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0hlbGxvd29ybGQudnVlP2ZmY2QiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BhZ2UvaG9tZS52dWU/ZTE0MCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9jc3NXaXRoTWFwcGluZ1RvU3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kYXlqcy9kYXlqcy5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RheWpzL3BsdWdpbi9hZHZhbmNlZEZvcm1hdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGF5anMvcGx1Z2luL2N1c3RvbVBhcnNlRm9ybWF0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kYXlqcy9wbHVnaW4vaXNMZWFwWWVhci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGF5anMvcGx1Z2luL2lzU2FtZU9yQWZ0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RheWpzL3BsdWdpbi9pc1NhbWVPckJlZm9yZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGF5anMvcGx1Z2luL2xvY2FsZURhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RheWpzL3BsdWdpbi93ZWVrT2ZZZWFyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kYXlqcy9wbHVnaW4vd2Vla1llYXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fRGF0YVZpZXcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fSGFzaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19MaXN0Q2FjaGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fTWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX01hcENhY2hlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX1Byb21pc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fU2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX1NldENhY2hlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX1N0YWNrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX1N5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19VaW50OEFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX1dlYWtNYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXBwbHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXJyYXlGaWx0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXJyYXlJbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hcnJheUluY2x1ZGVzV2l0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hcnJheUxpa2VLZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2FycmF5UHVzaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hcnJheVNvbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXNzb2NJbmRleE9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VGaW5kSW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUZsYXR0ZW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUdldEFsbEtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUdldFRhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSW5kZXhPZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSXNBcmd1bWVudHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUlzRXF1YWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUlzRXF1YWxEZWVwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VJc05hTi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSXNOYXRpdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUlzVHlwZWRBcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlS2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlUmVzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlU2V0VG9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVRpbWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VVbmFyeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlVW5pcS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jYWNoZUhhcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jb3JlSnNEYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2NyZWF0ZVNldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19kZWZpbmVQcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19lcXVhbEFycmF5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19lcXVhbEJ5VGFnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2VxdWFsT2JqZWN0cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19mcmVlR2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldEFsbEtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0TWFwRGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXROYXRpdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0UmF3VGFnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldFN5bWJvbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0VGFnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldFZhbHVlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2hhc2hDbGVhci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19oYXNoRGVsZXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2hhc2hHZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faGFzaEhhcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19oYXNoU2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2lzRmxhdHRlbmFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faXNJbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19pc0tleWFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faXNNYXNrZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faXNQcm90b3R5cGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbGlzdENhY2hlQ2xlYXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbGlzdENhY2hlRGVsZXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2xpc3RDYWNoZUdldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19saXN0Q2FjaGVIYXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbGlzdENhY2hlU2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX21hcENhY2hlQ2xlYXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbWFwQ2FjaGVEZWxldGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbWFwQ2FjaGVHZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbWFwQ2FjaGVIYXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbWFwQ2FjaGVTZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbWFwVG9BcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19uYXRpdmVDcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbmF0aXZlS2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19ub2RlVXRpbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19vYmplY3RUb1N0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19vdmVyQXJnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX292ZXJSZXN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3Jvb3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc2V0Q2FjaGVBZGQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc2V0Q2FjaGVIYXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc2V0VG9BcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19zZXRUb1N0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19zaG9ydE91dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19zdGFja0NsZWFyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3N0YWNrRGVsZXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3N0YWNrR2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3N0YWNrSGFzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3N0YWNrU2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3N0cmljdEluZGV4T2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fdG9Tb3VyY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9jb25zdGFudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2RlYm91bmNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvZXEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pZGVudGl0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzQXJndW1lbnRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNBcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzQXJyYXlMaWtlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNBcnJheUxpa2VPYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0J1ZmZlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzRXF1YWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0Z1bmN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNMZW5ndGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc09iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzT2JqZWN0TGlrZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzU3ltYm9sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNUeXBlZEFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gva2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL25vb3AuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9ub3cuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9zdHViQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9zdHViRmFsc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC90aHJvdHRsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL3RvTnVtYmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvdW5pb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL25vcm1hbGl6ZS13aGVlbC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbm9ybWFsaXplLXdoZWVsL3NyYy9FeGVjdXRpb25FbnZpcm9ubWVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbm9ybWFsaXplLXdoZWVsL3NyYy9Vc2VyQWdlbnRfREVQUkVDQVRFRC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbm9ybWFsaXplLXdoZWVsL3NyYy9pc0V2ZW50U3VwcG9ydGVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ub3JtYWxpemUtd2hlZWwvc3JjL25vcm1hbGl6ZVdoZWVsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJlbGVjdHJvblwiIiwid2VicGFjazovLy9leHRlcm5hbCBcImZzXCIiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovLy93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovLy93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovLy93ZWJwYWNrL3J1bnRpbWUvbm9kZSBtb2R1bGUgZGVjb3JhdG9yIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AdnVlL3NoYXJlZC9kaXN0L3NoYXJlZC5lc20tYnVuZGxlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHZ1ZS9yZWFjdGl2aXR5L2Rpc3QvcmVhY3Rpdml0eS5lc20tYnVuZGxlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHZ1ZS9ydW50aW1lLWNvcmUvZGlzdC9ydW50aW1lLWNvcmUuZXNtLWJ1bmRsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B2dWUvcnVudGltZS1kb20vZGlzdC9ydW50aW1lLWRvbS5lc20tYnVuZGxlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWl0dC9kaXN0L21pdHQuZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Jlc2l6ZS1vYnNlcnZlci1wb2x5ZmlsbC9kaXN0L1Jlc2l6ZU9ic2VydmVyLmVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldEJvdW5kaW5nQ2xpZW50UmVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRXaW5kb3cuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0V2luZG93U2Nyb2xsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2luc3RhbmNlT2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0Tm9kZU5hbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0RG9jdW1lbnRFbGVtZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldFdpbmRvd1Njcm9sbEJhclguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0Q29tcHV0ZWRTdHlsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9pc1Njcm9sbFBhcmVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRDb21wb3NpdGVSZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldE5vZGVTY3JvbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0SFRNTEVsZW1lbnRTY3JvbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0TGF5b3V0UmVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRQYXJlbnROb2RlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldFNjcm9sbFBhcmVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9saXN0U2Nyb2xsUGFyZW50cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9pc1RhYmxlRWxlbWVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRPZmZzZXRQYXJlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9lbnVtcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL29yZGVyTW9kaWZpZXJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvZGVib3VuY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9jcmVhdGVQb3BwZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9tZXJnZUJ5TmFtZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL21vZGlmaWVycy9ldmVudExpc3RlbmVycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2dldEJhc2VQbGFjZW1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9nZXRWYXJpYXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9nZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9jb21wdXRlT2Zmc2V0cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL21vZGlmaWVycy9jb21wdXRlU3R5bGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvZ2V0T3Bwb3NpdGVQbGFjZW1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9nZXRPcHBvc2l0ZVZhcmlhdGlvblBsYWNlbWVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9jb250YWlucy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL3JlY3RUb0NsaWVudFJlY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0Q2xpcHBpbmdSZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldFZpZXdwb3J0UmVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXREb2N1bWVudFJlY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9tZXJnZVBhZGRpbmdPYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9nZXRGcmVzaFNpZGVPYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9leHBhbmRUb0hhc2hNYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9kZXRlY3RPdmVyZmxvdy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL3dpdGhpbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL21vZGlmaWVycy9oaWRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvcG9wcGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvbW9kaWZpZXJzL3BvcHBlck9mZnNldHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9tb2RpZmllcnMvYXBwbHlTdHlsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9tb2RpZmllcnMvb2Zmc2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvbW9kaWZpZXJzL2ZsaXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9jb21wdXRlQXV0b1BsYWNlbWVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL21vZGlmaWVycy9wcmV2ZW50T3ZlcmZsb3cuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9nZXRBbHRBeGlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvbW9kaWZpZXJzL2Fycm93LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hc3luYy12YWxpZGF0b3IvZGlzdC13ZWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VsZW1lbnQtcGx1cy9saWIvaW5kZXguZXNtLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0hlbGxvd29ybGQudnVlIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0hlbGxvd29ybGQudnVlPzE1NmIiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvSGVsbG93b3JsZC52dWU/OGY0NyIsIndlYnBhY2s6Ly8vLi9zcmMvcGFnZS9ob21lLnZ1ZSIsIndlYnBhY2s6Ly8vLi9zcmMvcGFnZS9ob21lLnZ1ZT82NWQ5Iiwid2VicGFjazovLy8uL3NyYy9wYWdlL2hvbWUudnVlPzdiMmMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0FwcC52dWUiLCJ3ZWJwYWNrOi8vLy4vc3JjL0FwcC52dWU/ZDAzMCIsIndlYnBhY2s6Ly8vLi9zcmMvQXBwLnZ1ZT8yYjYxIiwid2VicGFjazovLy8uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJfX19DU1NfTE9BREVSX0VYUE9SVF9fXyIsInB1c2giLCJtb2R1bGUiLCJpZCIsImV4cG9ydHMiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibGlzdCIsInRvU3RyaW5nIiwidGhpcyIsIm1hcCIsIml0ZW0iLCJjb250ZW50IiwiY29uY2F0Iiwiam9pbiIsImkiLCJtb2R1bGVzIiwibWVkaWFRdWVyeSIsImRlZHVwZSIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJsZW5ndGgiLCJfaSIsIl9hcnJheUxpa2VUb0FycmF5IiwiYXJyIiwibGVuIiwiYXJyMiIsIkFycmF5IiwiX2l0ZW0iLCJpc0FycmF5IiwiX2FycmF5V2l0aEhvbGVzIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJPYmplY3QiLCJfYXJyIiwiX24iLCJfZCIsIl9lIiwidW5kZWZpbmVkIiwiX3MiLCJuZXh0IiwiZG9uZSIsInZhbHVlIiwiZXJyIiwiX2l0ZXJhYmxlVG9BcnJheUxpbWl0IiwibyIsIm1pbkxlbiIsIm4iLCJwcm90b3R5cGUiLCJjYWxsIiwic2xpY2UiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJmcm9tIiwidGVzdCIsIl91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSIsIlR5cGVFcnJvciIsIl9ub25JdGVyYWJsZVJlc3QiLCJjc3NNYXBwaW5nIiwiYnRvYSIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJzb3VyY2VNYXBwaW5nIiwic291cmNlVVJMcyIsInNvdXJjZXMiLCJzb3VyY2UiLCJzb3VyY2VSb290IiwidCIsImUiLCJyIiwicyIsInUiLCJhIiwiZiIsImgiLCJjIiwiZCIsIndlZWtkYXlzIiwic3BsaXQiLCJtb250aHMiLCIkIiwiU3RyaW5nIiwibCIsInoiLCJ1dGNPZmZzZXQiLCJNYXRoIiwiYWJzIiwiZmxvb3IiLCJtIiwiZGF0ZSIsInllYXIiLCJtb250aCIsImNsb25lIiwiYWRkIiwiY2VpbCIsInAiLCJNIiwieSIsInciLCJEIiwibXMiLCJRIiwidG9Mb3dlckNhc2UiLCJyZXBsYWNlIiwiUyIsInYiLCJhcmdzIiwiYXJndW1lbnRzIiwiZyIsImxvY2FsZSIsIiRMIiwidXRjIiwiJHUiLCJ4IiwiJHgiLCIkb2Zmc2V0IiwicGFyc2UiLCIkZCIsIkRhdGUiLCJOYU4iLCJtYXRjaCIsInN1YnN0cmluZyIsIlVUQyIsImluaXQiLCIkeSIsImdldEZ1bGxZZWFyIiwiJE0iLCJnZXRNb250aCIsIiREIiwiZ2V0RGF0ZSIsIiRXIiwiZ2V0RGF5IiwiJEgiLCJnZXRIb3VycyIsIiRtIiwiZ2V0TWludXRlcyIsIiRzIiwiZ2V0U2Vjb25kcyIsIiRtcyIsImdldE1pbGxpc2Vjb25kcyIsIiR1dGlscyIsImlzVmFsaWQiLCJpc1NhbWUiLCJzdGFydE9mIiwiZW5kT2YiLCJpc0FmdGVyIiwiaXNCZWZvcmUiLCIkZyIsInNldCIsInVuaXgiLCJ2YWx1ZU9mIiwiZ2V0VGltZSIsInRvRGF0ZSIsImFwcGx5IiwiJGxvY2FsZSIsIndlZWtTdGFydCIsIiRzZXQiLCJtaW4iLCJkYXlzSW5Nb250aCIsImdldCIsIk51bWJlciIsInJvdW5kIiwic3VidHJhY3QiLCJmb3JtYXQiLCJzdWJzdHIiLCJtZXJpZGllbSIsIllZIiwiWVlZWSIsIk1NIiwiTU1NIiwibW9udGhzU2hvcnQiLCJNTU1NIiwiREQiLCJkZCIsIndlZWtkYXlzTWluIiwiZGRkIiwid2Vla2RheXNTaG9ydCIsImRkZGQiLCJIIiwiSEgiLCJoaCIsIkEiLCJtbSIsInNzIiwiU1NTIiwiWiIsImdldFRpbWV6b25lT2Zmc2V0IiwiZGlmZiIsInRvSlNPTiIsInRvSVNPU3RyaW5nIiwidG9VVENTdHJpbmciLCJmb3JFYWNoIiwiZXh0ZW5kIiwiJGkiLCJpc0RheWpzIiwiZW4iLCJMcyIsIm9yZGluYWwiLCJ3ZWVrWWVhciIsIndlZWsiLCJvZmZzZXROYW1lIiwiYmluZCIsIkxUUyIsIkxUIiwiTCIsIkxMIiwiTExMIiwiTExMTCIsInRvVXBwZXJDYXNlIiwiem9uZSIsIm9mZnNldCIsImluZGV4T2YiLCJhZnRlcm5vb24iLCJtaWxsaXNlY29uZHMiLCJTUyIsIkRvIiwiZGF5IiwiRXJyb3IiLCJZIiwiWloiLCJmb3JtYXRzIiwicmVnZXgiLCJwYXJzZXIiLCJleGVjIiwiaG91cnMiLCJtaW51dGVzIiwic2Vjb25kcyIsImN1c3RvbVBhcnNlRm9ybWF0IiwiaXNMZWFwWWVhciIsImlzU2FtZU9yQWZ0ZXIiLCJpc1NhbWVPckJlZm9yZSIsImxvY2FsZURhdGEiLCJmaXJzdERheU9mV2VlayIsImxvbmdEYXRlRm9ybWF0IiwieWVhclN0YXJ0Iiwid2Vla3MiLCJEYXRhVmlldyIsImdldE5hdGl2ZSIsImhhc2hDbGVhciIsImhhc2hEZWxldGUiLCJoYXNoR2V0IiwiaGFzaEhhcyIsImhhc2hTZXQiLCJIYXNoIiwiZW50cmllcyIsImluZGV4IiwiY2xlYXIiLCJlbnRyeSIsImhhcyIsImxpc3RDYWNoZUNsZWFyIiwibGlzdENhY2hlRGVsZXRlIiwibGlzdENhY2hlR2V0IiwibGlzdENhY2hlSGFzIiwibGlzdENhY2hlU2V0IiwiTGlzdENhY2hlIiwiTWFwIiwibWFwQ2FjaGVDbGVhciIsIm1hcENhY2hlRGVsZXRlIiwibWFwQ2FjaGVHZXQiLCJtYXBDYWNoZUhhcyIsIm1hcENhY2hlU2V0IiwiTWFwQ2FjaGUiLCJQcm9taXNlIiwiU2V0Iiwic2V0Q2FjaGVBZGQiLCJzZXRDYWNoZUhhcyIsIlNldENhY2hlIiwidmFsdWVzIiwiX19kYXRhX18iLCJzdGFja0NsZWFyIiwic3RhY2tEZWxldGUiLCJzdGFja0dldCIsInN0YWNrSGFzIiwic3RhY2tTZXQiLCJTdGFjayIsInNpemUiLCJVaW50OEFycmF5IiwiV2Vha01hcCIsImZ1bmMiLCJ0aGlzQXJnIiwiYXJyYXkiLCJwcmVkaWNhdGUiLCJyZXNJbmRleCIsInJlc3VsdCIsImJhc2VJbmRleE9mIiwiY29tcGFyYXRvciIsImJhc2VUaW1lcyIsImlzQXJndW1lbnRzIiwiaXNCdWZmZXIiLCJpc0luZGV4IiwiaXNUeXBlZEFycmF5IiwiaGFzT3duUHJvcGVydHkiLCJpbmhlcml0ZWQiLCJpc0FyciIsImlzQXJnIiwiaXNCdWZmIiwiaXNUeXBlIiwic2tpcEluZGV4ZXMiLCJrZXkiLCJlcSIsImZyb21JbmRleCIsImZyb21SaWdodCIsImFycmF5UHVzaCIsImlzRmxhdHRlbmFibGUiLCJiYXNlRmxhdHRlbiIsImRlcHRoIiwiaXNTdHJpY3QiLCJvYmplY3QiLCJrZXlzRnVuYyIsInN5bWJvbHNGdW5jIiwiZ2V0UmF3VGFnIiwib2JqZWN0VG9TdHJpbmciLCJzeW1Ub1N0cmluZ1RhZyIsInRvU3RyaW5nVGFnIiwiYmFzZUZpbmRJbmRleCIsImJhc2VJc05hTiIsInN0cmljdEluZGV4T2YiLCJiYXNlR2V0VGFnIiwiaXNPYmplY3RMaWtlIiwiYmFzZUlzRXF1YWxEZWVwIiwiYmFzZUlzRXF1YWwiLCJvdGhlciIsImJpdG1hc2siLCJjdXN0b21pemVyIiwic3RhY2siLCJlcXVhbEFycmF5cyIsImVxdWFsQnlUYWciLCJlcXVhbE9iamVjdHMiLCJnZXRUYWciLCJhcmdzVGFnIiwiYXJyYXlUYWciLCJvYmplY3RUYWciLCJlcXVhbEZ1bmMiLCJvYmpJc0FyciIsIm90aElzQXJyIiwib2JqVGFnIiwib3RoVGFnIiwib2JqSXNPYmoiLCJvdGhJc09iaiIsImlzU2FtZVRhZyIsIm9iaklzV3JhcHBlZCIsIm90aElzV3JhcHBlZCIsIm9ialVud3JhcHBlZCIsIm90aFVud3JhcHBlZCIsImlzRnVuY3Rpb24iLCJpc01hc2tlZCIsImlzT2JqZWN0IiwidG9Tb3VyY2UiLCJyZUlzSG9zdEN0b3IiLCJmdW5jUHJvdG8iLCJGdW5jdGlvbiIsIm9iamVjdFByb3RvIiwiZnVuY1RvU3RyaW5nIiwicmVJc05hdGl2ZSIsIlJlZ0V4cCIsImlzTGVuZ3RoIiwidHlwZWRBcnJheVRhZ3MiLCJpc1Byb3RvdHlwZSIsIm5hdGl2ZUtleXMiLCJpZGVudGl0eSIsIm92ZXJSZXN0Iiwic2V0VG9TdHJpbmciLCJzdGFydCIsImNvbnN0YW50IiwiZGVmaW5lUHJvcGVydHkiLCJiYXNlU2V0VG9TdHJpbmciLCJzdHJpbmciLCJpdGVyYXRlZSIsImFycmF5SW5jbHVkZXMiLCJhcnJheUluY2x1ZGVzV2l0aCIsImNhY2hlSGFzIiwiY3JlYXRlU2V0Iiwic2V0VG9BcnJheSIsImluY2x1ZGVzIiwiaXNDb21tb24iLCJzZWVuIiwib3V0ZXIiLCJjb21wdXRlZCIsInNlZW5JbmRleCIsImNhY2hlIiwiY29yZUpzRGF0YSIsIm5vb3AiLCJhcnJheVNvbWUiLCJpc1BhcnRpYWwiLCJhcnJMZW5ndGgiLCJvdGhMZW5ndGgiLCJhcnJTdGFja2VkIiwib3RoU3RhY2tlZCIsImFyclZhbHVlIiwib3RoVmFsdWUiLCJjb21wYXJlZCIsIm90aEluZGV4IiwibWFwVG9BcnJheSIsInN5bWJvbFByb3RvIiwic3ltYm9sVmFsdWVPZiIsInRhZyIsImJ5dGVMZW5ndGgiLCJieXRlT2Zmc2V0IiwiYnVmZmVyIiwibWVzc2FnZSIsImNvbnZlcnQiLCJzdGFja2VkIiwiZ2V0QWxsS2V5cyIsIm9ialByb3BzIiwib2JqTGVuZ3RoIiwib2JqU3RhY2tlZCIsInNraXBDdG9yIiwib2JqVmFsdWUiLCJvYmpDdG9yIiwib3RoQ3RvciIsImZyZWVHbG9iYWwiLCJnbG9iYWwiLCJiYXNlR2V0QWxsS2V5cyIsImdldFN5bWJvbHMiLCJrZXlzIiwiaXNLZXlhYmxlIiwiYmFzZUlzTmF0aXZlIiwiZ2V0VmFsdWUiLCJuYXRpdmVPYmplY3RUb1N0cmluZyIsImlzT3duIiwidW5tYXNrZWQiLCJhcnJheUZpbHRlciIsInN0dWJBcnJheSIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwibmF0aXZlR2V0U3ltYm9scyIsImdldE93blByb3BlcnR5U3ltYm9scyIsInN5bWJvbCIsIm1hcFRhZyIsInByb21pc2VUYWciLCJzZXRUYWciLCJ3ZWFrTWFwVGFnIiwiZGF0YVZpZXdUYWciLCJkYXRhVmlld0N0b3JTdHJpbmciLCJtYXBDdG9yU3RyaW5nIiwicHJvbWlzZUN0b3JTdHJpbmciLCJzZXRDdG9yU3RyaW5nIiwid2Vha01hcEN0b3JTdHJpbmciLCJBcnJheUJ1ZmZlciIsInJlc29sdmUiLCJDdG9yIiwiY3RvclN0cmluZyIsIm5hdGl2ZUNyZWF0ZSIsInNwcmVhZGFibGVTeW1ib2wiLCJpc0NvbmNhdFNwcmVhZGFibGUiLCJyZUlzVWludCIsInR5cGUiLCJ1aWQiLCJtYXNrU3JjS2V5IiwiSUVfUFJPVE8iLCJhc3NvY0luZGV4T2YiLCJzcGxpY2UiLCJwb3AiLCJnZXRNYXBEYXRhIiwib3ZlckFyZyIsImZyZWVFeHBvcnRzIiwibm9kZVR5cGUiLCJmcmVlTW9kdWxlIiwiZnJlZVByb2Nlc3MiLCJwcm9jZXNzIiwibm9kZVV0aWwiLCJyZXF1aXJlIiwidHlwZXMiLCJiaW5kaW5nIiwidHJhbnNmb3JtIiwiYXJnIiwibmF0aXZlTWF4IiwibWF4Iiwib3RoZXJBcmdzIiwiZnJlZVNlbGYiLCJzZWxmIiwicm9vdCIsInNob3J0T3V0IiwibmF0aXZlTm93Iiwibm93IiwiY291bnQiLCJsYXN0Q2FsbGVkIiwic3RhbXAiLCJyZW1haW5pbmciLCJwYWlycyIsIkxBUkdFX0FSUkFZX1NJWkUiLCJ0b051bWJlciIsIm5hdGl2ZU1pbiIsIndhaXQiLCJvcHRpb25zIiwibGFzdEFyZ3MiLCJsYXN0VGhpcyIsIm1heFdhaXQiLCJ0aW1lcklkIiwibGFzdENhbGxUaW1lIiwibGFzdEludm9rZVRpbWUiLCJsZWFkaW5nIiwibWF4aW5nIiwidHJhaWxpbmciLCJpbnZva2VGdW5jIiwidGltZSIsImxlYWRpbmdFZGdlIiwic2V0VGltZW91dCIsInRpbWVyRXhwaXJlZCIsInNob3VsZEludm9rZSIsInRpbWVTaW5jZUxhc3RDYWxsIiwidHJhaWxpbmdFZGdlIiwidGltZVdhaXRpbmciLCJyZW1haW5pbmdXYWl0IiwiZGVib3VuY2VkIiwiaXNJbnZva2luZyIsImNsZWFyVGltZW91dCIsImNhbmNlbCIsImZsdXNoIiwiYmFzZUlzQXJndW1lbnRzIiwiaXNBcnJheUxpa2UiLCJzdHViRmFsc2UiLCJCdWZmZXIiLCJiYXNlSXNUeXBlZEFycmF5IiwiYmFzZVVuYXJ5Iiwibm9kZUlzVHlwZWRBcnJheSIsImFycmF5TGlrZUtleXMiLCJiYXNlS2V5cyIsImRlYm91bmNlIiwiaXNTeW1ib2wiLCJyZVRyaW0iLCJyZUlzQmFkSGV4IiwicmVJc0JpbmFyeSIsInJlSXNPY3RhbCIsImZyZWVQYXJzZUludCIsInBhcnNlSW50IiwiaXNCaW5hcnkiLCJiYXNlUmVzdCIsImJhc2VVbmlxIiwiaXNBcnJheUxpa2VPYmplY3QiLCJ1bmlvbiIsImFycmF5cyIsImNhblVzZURPTSIsIndpbmRvdyIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsIkV4ZWN1dGlvbkVudmlyb25tZW50IiwiY2FuVXNlV29ya2VycyIsIldvcmtlciIsImNhblVzZUV2ZW50TGlzdGVuZXJzIiwiYWRkRXZlbnRMaXN0ZW5lciIsImF0dGFjaEV2ZW50IiwiY2FuVXNlVmlld3BvcnQiLCJzY3JlZW4iLCJpc0luV29ya2VyIiwiX2llIiwiX2ZpcmVmb3giLCJfb3BlcmEiLCJfd2Via2l0IiwiX2Nocm9tZSIsIl9pZV9yZWFsX3ZlcnNpb24iLCJfb3N4IiwiX3dpbmRvd3MiLCJfbGludXgiLCJfYW5kcm9pZCIsIl93aW42NCIsIl9pcGhvbmUiLCJfaXBhZCIsIl9uYXRpdmUiLCJfbW9iaWxlIiwiX3BvcHVsYXRlZCIsIl9wb3B1bGF0ZSIsInVhcyIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsImFnZW50Iiwib3MiLCJwYXJzZUZsb2F0IiwiZG9jdW1lbnRNb2RlIiwidHJpZGVudCIsInZlciIsIlVzZXJBZ2VudF9ERVBSRUNBVEVEIiwiaWUiLCJpZUNvbXBhdGliaWxpdHlNb2RlIiwiaWU2NCIsImZpcmVmb3giLCJvcGVyYSIsIndlYmtpdCIsInNhZmFyaSIsImNocm9tZSIsIndpbmRvd3MiLCJvc3giLCJsaW51eCIsImlwaG9uZSIsIm1vYmlsZSIsIm5hdGl2ZUFwcCIsImFuZHJvaWQiLCJpcGFkIiwidXNlSGFzRmVhdHVyZSIsImltcGxlbWVudGF0aW9uIiwiaGFzRmVhdHVyZSIsImV2ZW50TmFtZVN1ZmZpeCIsImNhcHR1cmUiLCJldmVudE5hbWUiLCJpc1N1cHBvcnRlZCIsImVsZW1lbnQiLCJzZXRBdHRyaWJ1dGUiLCJpc0V2ZW50U3VwcG9ydGVkIiwibm9ybWFsaXplV2hlZWwiLCJldmVudCIsInNYIiwic1kiLCJwWCIsInBZIiwiZGV0YWlsIiwid2hlZWxEZWx0YSIsIndoZWVsRGVsdGFZIiwid2hlZWxEZWx0YVgiLCJheGlzIiwiSE9SSVpPTlRBTF9BWElTIiwiZGVsdGFZIiwiZGVsdGFYIiwiZGVsdGFNb2RlIiwic3BpblgiLCJzcGluWSIsInBpeGVsWCIsInBpeGVsWSIsImdldEV2ZW50VHlwZSIsIm1lbW8iLCJnZXRUYXJnZXQiLCJ0YXJnZXQiLCJzdHlsZVRhcmdldCIsInF1ZXJ5U2VsZWN0b3IiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJzdHlsZXNJbkRvbSIsImdldEluZGV4QnlJZGVudGlmaWVyIiwiaWRlbnRpZmllciIsIm1vZHVsZXNUb0RvbSIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImJhc2UiLCJvYmoiLCJjc3MiLCJtZWRpYSIsInNvdXJjZU1hcCIsInJlZmVyZW5jZXMiLCJ1cGRhdGVyIiwiYWRkU3R5bGUiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZSIsImF0dHJpYnV0ZXMiLCJub25jZSIsImluc2VydCIsImFwcGVuZENoaWxkIiwidGV4dFN0b3JlIiwicmVwbGFjZVRleHQiLCJyZXBsYWNlbWVudCIsImZpbHRlciIsIkJvb2xlYW4iLCJhcHBseVRvU2luZ2xldG9uVGFnIiwicmVtb3ZlIiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJjc3NOb2RlIiwiY3JlYXRlVGV4dE5vZGUiLCJjaGlsZE5vZGVzIiwicmVtb3ZlQ2hpbGQiLCJpbnNlcnRCZWZvcmUiLCJhcHBseVRvVGFnIiwicmVtb3ZlQXR0cmlidXRlIiwiZmlyc3RDaGlsZCIsInNpbmdsZXRvbiIsInNpbmdsZXRvbkNvdW50ZXIiLCJ1cGRhdGUiLCJzdHlsZUluZGV4IiwicGFyZW50Tm9kZSIsInJlbW92ZVN0eWxlRWxlbWVudCIsIm5ld09iaiIsImFsbCIsImF0b2IiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2luZGV4IiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwibG9hZGVkIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImdldHRlciIsIl9fZXNNb2R1bGUiLCJkZWZpbml0aW9uIiwiZW51bWVyYWJsZSIsInByb3AiLCJubWQiLCJwYXRocyIsImNoaWxkcmVuIiwic3RyIiwiZXhwZWN0c0xvd2VyQ2FzZSIsImNyZWF0ZSIsInZhbCIsImlzR2xvYmFsbHlXaGl0ZWxpc3RlZCIsImlzU3BlY2lhbEJvb2xlYW5BdHRyIiwibm9ybWFsaXplU3R5bGUiLCJyZXMiLCJub3JtYWxpemVkIiwiaXNTdHJpbmciLCJwYXJzZVN0cmluZ1N0eWxlIiwibGlzdERlbGltaXRlclJFIiwicHJvcGVydHlEZWxpbWl0ZXJSRSIsInJldCIsInRtcCIsInRyaW0iLCJub3JtYWxpemVDbGFzcyIsImxvb3NlRXF1YWwiLCJiIiwiYVZhbGlkVHlwZSIsImlzRGF0ZSIsImJWYWxpZFR5cGUiLCJlcXVhbCIsImxvb3NlQ29tcGFyZUFycmF5cyIsImFIYXNLZXkiLCJiSGFzS2V5IiwibG9vc2VJbmRleE9mIiwiZmluZEluZGV4IiwidG9EaXNwbGF5U3RyaW5nIiwicmVwbGFjZXIiLCJfa2V5IiwiaXNNYXAiLCJyZWR1Y2UiLCJpc1NldCIsImlzUGxhaW5PYmplY3QiLCJFTVBUWV9BUlIiLCJvblJFIiwiaXNNb2RlbExpc3RlbmVyIiwic3RhcnRzV2l0aCIsImFzc2lnbiIsImVsIiwidG9UeXBlU3RyaW5nIiwiaXNQcm9taXNlIiwidGhlbiIsImNhdGNoIiwiaXNJbnRlZ2VyS2V5IiwiY2FjaGVTdHJpbmdGdW5jdGlvbiIsImZuIiwiY2FtZWxpemVSRSIsImNhbWVsaXplIiwiXyIsImh5cGhlbmF0ZVJFIiwiaHlwaGVuYXRlIiwiY2hhckF0IiwidG9IYW5kbGVyS2V5IiwiaGFzQ2hhbmdlZCIsIm9sZFZhbHVlIiwiZm5zIiwiY29uZmlndXJhYmxlIiwiaXNOYU4iLCJfZ2xvYmFsVGhpcyIsImdsb2JhbFRoaXMiLCJ0YXJnZXRNYXAiLCJlZmZlY3RTdGFjayIsImFjdGl2ZUVmZmVjdCIsIklURVJBVEVfS0VZIiwiTUFQX0tFWV9JVEVSQVRFX0tFWSIsImVmZmVjdCIsIl9pc0VmZmVjdCIsImlzRWZmZWN0IiwicmF3IiwiYWN0aXZlIiwic2NoZWR1bGVyIiwiY2xlYW51cCIsInRyYWNrU3RhY2siLCJzaG91bGRUcmFjayIsInJlc2V0VHJhY2tpbmciLCJhbGxvd1JlY3Vyc2UiLCJkZXBzIiwiY3JlYXRlUmVhY3RpdmVFZmZlY3QiLCJsYXp5Iiwic3RvcCIsIm9uU3RvcCIsImRlbGV0ZSIsInBhdXNlVHJhY2tpbmciLCJsYXN0IiwidHJhY2siLCJkZXBzTWFwIiwiZGVwIiwidHJpZ2dlciIsIm5ld1ZhbHVlIiwib2xkVGFyZ2V0IiwiZWZmZWN0cyIsImVmZmVjdHNUb0FkZCIsImJ1aWx0SW5TeW1ib2xzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImNyZWF0ZUdldHRlciIsInNoYWxsb3dHZXQiLCJyZWFkb25seUdldCIsInNoYWxsb3dSZWFkb25seUdldCIsImFycmF5SW5zdHJ1bWVudGF0aW9ucyIsImlzUmVhZG9ubHkiLCJzaGFsbG93IiwicmVjZWl2ZXIiLCJyZWFkb25seU1hcCIsInJlYWN0aXZlTWFwIiwidGFyZ2V0SXNBcnJheSIsIlJlZmxlY3QiLCJyZWFkb25seSIsInJlYWN0aXZlIiwiY3JlYXRlU2V0dGVyIiwiaGFkS2V5IiwibWV0aG9kIiwibXV0YWJsZUhhbmRsZXJzIiwiZGVsZXRlUHJvcGVydHkiLCJvd25LZXlzIiwicmVhZG9ubHlIYW5kbGVycyIsInNoYWxsb3dSZWFjdGl2ZUhhbmRsZXJzIiwidG9SZWFjdGl2ZSIsInRvUmVhZG9ubHkiLCJ0b1NoYWxsb3ciLCJnZXRQcm90byIsImdldFByb3RvdHlwZU9mIiwiZ2V0JDEiLCJpc1NoYWxsb3ciLCJyYXdUYXJnZXQiLCJyYXdLZXkiLCJ3cmFwIiwiaGFzJDEiLCJzZXQkMSIsImRlbGV0ZUVudHJ5IiwiaGFkSXRlbXMiLCJjcmVhdGVGb3JFYWNoIiwiY2FsbGJhY2siLCJvYnNlcnZlZCIsImNyZWF0ZUl0ZXJhYmxlTWV0aG9kIiwidGFyZ2V0SXNNYXAiLCJpc1BhaXIiLCJpc0tleU9ubHkiLCJpbm5lckl0ZXJhdG9yIiwiY3JlYXRlUmVhZG9ubHlNZXRob2QiLCJtdXRhYmxlSW5zdHJ1bWVudGF0aW9ucyIsInNoYWxsb3dJbnN0cnVtZW50YXRpb25zIiwicmVhZG9ubHlJbnN0cnVtZW50YXRpb25zIiwiY3JlYXRlSW5zdHJ1bWVudGF0aW9uR2V0dGVyIiwiaW5zdHJ1bWVudGF0aW9ucyIsIm11dGFibGVDb2xsZWN0aW9uSGFuZGxlcnMiLCJzaGFsbG93Q29sbGVjdGlvbkhhbmRsZXJzIiwicmVhZG9ubHlDb2xsZWN0aW9uSGFuZGxlcnMiLCJjcmVhdGVSZWFjdGl2ZU9iamVjdCIsImJhc2VIYW5kbGVycyIsImNvbGxlY3Rpb25IYW5kbGVycyIsInByb3h5TWFwIiwiZXhpc3RpbmdQcm94eSIsInRhcmdldFR5cGUiLCJpc0V4dGVuc2libGUiLCJyYXdUeXBlIiwidGFyZ2V0VHlwZU1hcCIsInByb3h5IiwiUHJveHkiLCJpc1Byb3h5IiwiX192X2lzUmVmIiwiY3JlYXRlUmVmIiwic2hhbGxvd1JlZiIsIlJlZkltcGwiLCJfcmF3VmFsdWUiLCJfc2hhbGxvdyIsIl92YWx1ZSIsIm5ld1ZhbCIsInJhd1ZhbHVlIiwidW5yZWYiLCJyZWYiLCJzaGFsbG93VW53cmFwSGFuZGxlcnMiLCJwcm94eVJlZnMiLCJvYmplY3RXaXRoUmVmcyIsInRvUmVmcyIsInRvUmVmIiwiT2JqZWN0UmVmSW1wbCIsIl9vYmplY3QiLCJDb21wdXRlZFJlZkltcGwiLCJfc2V0dGVyIiwiX2RpcnR5IiwiY2FsbFdpdGhFcnJvckhhbmRsaW5nIiwiaW5zdGFuY2UiLCJoYW5kbGVFcnJvciIsImNhbGxXaXRoQXN5bmNFcnJvckhhbmRsaW5nIiwidGhyb3dJbkRldiIsInZub2RlIiwiY3VyIiwicGFyZW50IiwiZXhwb3NlZEluc3RhbmNlIiwiZXJyb3JJbmZvIiwiZXJyb3JDYXB0dXJlZEhvb2tzIiwiZWMiLCJhcHBFcnJvckhhbmRsZXIiLCJhcHBDb250ZXh0IiwiY29uZmlnIiwiZXJyb3JIYW5kbGVyIiwiY29udGV4dFZOb2RlIiwiY29uc29sZSIsImVycm9yIiwibG9nRXJyb3IiLCJpc0ZsdXNoaW5nIiwiaXNGbHVzaFBlbmRpbmciLCJxdWV1ZSIsImZsdXNoSW5kZXgiLCJwZW5kaW5nUHJlRmx1c2hDYnMiLCJhY3RpdmVQcmVGbHVzaENicyIsInByZUZsdXNoSW5kZXgiLCJwZW5kaW5nUG9zdEZsdXNoQ2JzIiwiYWN0aXZlUG9zdEZsdXNoQ2JzIiwicG9zdEZsdXNoSW5kZXgiLCJyZXNvbHZlZFByb21pc2UiLCJjdXJyZW50Rmx1c2hQcm9taXNlIiwiY3VycmVudFByZUZsdXNoUGFyZW50Sm9iIiwibmV4dFRpY2siLCJxdWV1ZUpvYiIsImpvYiIsInF1ZXVlRmx1c2giLCJmbHVzaEpvYnMiLCJxdWV1ZUNiIiwiY2IiLCJhY3RpdmVRdWV1ZSIsInBlbmRpbmdRdWV1ZSIsImZsdXNoUHJlRmx1c2hDYnMiLCJwYXJlbnRKb2IiLCJmbHVzaFBvc3RGbHVzaENicyIsImRlZHVwZWQiLCJzb3J0IiwiZ2V0SWQiLCJJbmZpbml0eSIsImRldnRvb2xzQ29tcG9uZW50QWRkZWQiLCJjcmVhdGVEZXZ0b29sc0NvbXBvbmVudEhvb2siLCJkZXZ0b29sc0NvbXBvbmVudFVwZGF0ZWQiLCJkZXZ0b29sc0NvbXBvbmVudFJlbW92ZWQiLCJob29rIiwiY29tcG9uZW50IiwiZW1pdCIsInJhd0FyZ3MiLCJwcm9wcyIsIm1vZGVsQXJnIiwibW9kaWZpZXJzS2V5IiwibnVtYmVyIiwiX19WVUVfUFJPRF9ERVZUT09MU19fIiwiaGFuZGxlck5hbWUiLCJoYW5kbGVyIiwib25jZUhhbmRsZXIiLCJlbWl0dGVkIiwibm9ybWFsaXplRW1pdHNPcHRpb25zIiwiY29tcCIsImFzTWl4aW4iLCJkZW9wdCIsIl9fZW1pdHMiLCJlbWl0cyIsImhhc0V4dGVuZHMiLCJfX1ZVRV9PUFRJT05TX0FQSV9fIiwiZXh0ZW5kRW1pdHMiLCJtaXhpbnMiLCJleHRlbmRzIiwiaXNFbWl0TGlzdGVuZXIiLCJjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UiLCJzZXRDdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UiLCJyZW5kZXJDb21wb25lbnRSb290IiwiQ29tcG9uZW50Iiwid2l0aFByb3h5IiwicHJvcHNPcHRpb25zIiwic2xvdHMiLCJhdHRycyIsInJlbmRlciIsInJlbmRlckNhY2hlIiwic2V0dXBTdGF0ZSIsImN0eCIsImZhbGx0aHJvdWdoQXR0cnMiLCJzaGFwZUZsYWciLCJwcm94eVRvVXNlIiwibm9ybWFsaXplVk5vZGUiLCJnZXRGdW5jdGlvbmFsRmFsbHRocm91Z2giLCJpbmhlcml0QXR0cnMiLCJzb21lIiwiZmlsdGVyTW9kZWxMaXN0ZW5lcnMiLCJjbG9uZVZOb2RlIiwiZGlycyIsInRyYW5zaXRpb24iLCJjcmVhdGVWTm9kZSIsIkNvbW1lbnQiLCJoYXNQcm9wc0NoYW5nZWQiLCJwcmV2UHJvcHMiLCJuZXh0UHJvcHMiLCJlbWl0c09wdGlvbnMiLCJuZXh0S2V5cyIsIm5vcm1hbGl6ZVN1c3BlbnNlU2xvdCIsInNpbmdsZVJvb3QiLCJjaGlsZCIsImlzVk5vZGUiLCJmaWx0ZXJTaW5nbGVSb290IiwiaXNSZW5kZXJpbmdDb21waWxlZFNsb3QiLCJzZXRDb21waWxlZFNsb3RSZW5kZXJpbmciLCJyZW5kZXJTbG90IiwiZmFsbGJhY2siLCJzbG90Iiwib3BlbkJsb2NrIiwidmFsaWRTbG90Q29udGVudCIsImVuc3VyZVZhbGlkVk5vZGUiLCJyZW5kZXJlZCIsImNyZWF0ZUJsb2NrIiwidm5vZGVzIiwid2l0aEN0eCIsInJlbmRlckZuV2l0aENvbnRleHQiLCJvd25lciIsImNsb3NlQmxvY2siLCJfYyIsImN1cnJlbnRTY29wZUlkIiwic2NvcGVJZFN0YWNrIiwicHVzaFNjb3BlSWQiLCJwb3BTY29wZUlkIiwic2V0RnVsbFByb3BzIiwicmF3UHJvcHMiLCJuZWVkQ2FzdEtleXMiLCJjYW1lbEtleSIsInJhd0N1cnJlbnRQcm9wcyIsInJlc29sdmVQcm9wVmFsdWUiLCJvcHQiLCJoYXNEZWZhdWx0IiwiZGVmYXVsdFZhbHVlIiwiZGVmYXVsdCIsInNldEN1cnJlbnRJbnN0YW5jZSIsIm5vcm1hbGl6ZVByb3BzT3B0aW9ucyIsIl9fcHJvcHMiLCJleHRlbmRQcm9wcyIsIm5vcm1hbGl6ZWRLZXkiLCJ2YWxpZGF0ZVByb3BOYW1lIiwiYm9vbGVhbkluZGV4IiwiZ2V0VHlwZUluZGV4Iiwic3RyaW5nSW5kZXgiLCJnZXRUeXBlIiwiY3RvciIsImlzU2FtZVR5cGUiLCJleHBlY3RlZFR5cGVzIiwiaW5qZWN0SG9vayIsImN1cnJlbnRJbnN0YW5jZSIsInByZXBlbmQiLCJob29rcyIsIndyYXBwZWRIb29rIiwiX193ZWgiLCJpc1VubW91bnRlZCIsInVuc2hpZnQiLCJjcmVhdGVIb29rIiwibGlmZWN5Y2xlIiwiaXNJblNTUkNvbXBvbmVudFNldHVwIiwib25CZWZvcmVNb3VudCIsIm9uQmVmb3JlVXBkYXRlIiwib25CZWZvcmVVbm1vdW50Iiwib25Vbm1vdW50ZWQiLCJvblJlbmRlclRyaWdnZXJlZCIsIm9uUmVuZGVyVHJhY2tlZCIsImRvV2F0Y2giLCJJTklUSUFMX1dBVENIRVJfVkFMVUUiLCJ3YXRjaCIsImltbWVkaWF0ZSIsImRlZXAiLCJvblRyYWNrIiwib25UcmlnZ2VyIiwiZm9yY2VUcmlnZ2VyIiwidHJhdmVyc2UiLCJvbkludmFsaWRhdGUiLCJiYXNlR2V0dGVyIiwicnVubmVyIiwicXVldWVQb3N0UmVuZGVyRWZmZWN0Iiwic3VzcGVuc2UiLCJpc01vdW50ZWQiLCJxdWV1ZVByZUZsdXNoQ2IiLCJyZWNvcmRJbnN0YW5jZUJvdW5kRWZmZWN0IiwiaW5zdGFuY2VXYXRjaCIsInB1YmxpY1RoaXMiLCJ1c2VUcmFuc2l0aW9uU3RhdGUiLCJzdGF0ZSIsImlzTGVhdmluZyIsImlzVW5tb3VudGluZyIsImxlYXZpbmdWTm9kZXMiLCJUcmFuc2l0aW9uSG9va1ZhbGlkYXRvciIsIkJhc2VUcmFuc2l0aW9uIiwibW9kZSIsImFwcGVhciIsInBlcnNpc3RlZCIsIm9uQmVmb3JlRW50ZXIiLCJvbkVudGVyIiwib25BZnRlckVudGVyIiwib25FbnRlckNhbmNlbGxlZCIsIm9uQmVmb3JlTGVhdmUiLCJvbkxlYXZlIiwib25BZnRlckxlYXZlIiwib25MZWF2ZUNhbmNlbGxlZCIsIm9uQmVmb3JlQXBwZWFyIiwib25BcHBlYXIiLCJvbkFmdGVyQXBwZWFyIiwib25BcHBlYXJDYW5jZWxsZWQiLCJwcmV2VHJhbnNpdGlvbktleSIsImdldFRyYW5zaXRpb25SYXdDaGlsZHJlbiIsImVtcHR5UGxhY2Vob2xkZXIiLCJpbm5lckNoaWxkIiwiZ2V0S2VlcEFsaXZlQ2hpbGQiLCJlbnRlckhvb2tzIiwicmVzb2x2ZVRyYW5zaXRpb25Ib29rcyIsInNldFRyYW5zaXRpb25Ib29rcyIsIm9sZENoaWxkIiwic3ViVHJlZSIsIm9sZElubmVyQ2hpbGQiLCJ0cmFuc2l0aW9uS2V5Q2hhbmdlZCIsImdldFRyYW5zaXRpb25LZXkiLCJpc1NhbWVWTm9kZVR5cGUiLCJsZWF2aW5nSG9va3MiLCJhZnRlckxlYXZlIiwiZGVsYXlMZWF2ZSIsImVhcmx5UmVtb3ZlIiwiZGVsYXllZExlYXZlIiwiZ2V0TGVhdmluZ05vZGVzRm9yVHlwZSIsIl9sZWF2ZUNiIiwibGVhdmluZ1ZOb2Rlc0NhY2hlIiwiY2FsbEhvb2siLCJsZWF2aW5nVk5vZGUiLCJhZnRlckhvb2siLCJjYW5jZWxIb29rIiwiY2FsbGVkIiwiX2VudGVyQ2IiLCJjYW5jZWxsZWQiLCJpc0tlZXBBbGl2ZSIsInNzQ29udGVudCIsInNzRmFsbGJhY2siLCJrZWVwQ29tbWVudCIsImtleWVkRnJhZ21lbnRDb3VudCIsInBhdGNoRmxhZyIsIl9faXNLZWVwQWxpdmUiLCJvbkFjdGl2YXRlZCIsInJlZ2lzdGVyS2VlcEFsaXZlSG9vayIsIm9uRGVhY3RpdmF0ZWQiLCJfX3dkYyIsImN1cnJlbnQiLCJpc0RlYWN0aXZhdGVkIiwiaW5qZWN0VG9LZWVwQWxpdmVSb290Iiwia2VlcEFsaXZlUm9vdCIsImluamVjdGVkIiwiaXNJbnRlcm5hbEtleSIsIm5vcm1hbGl6ZVNsb3RWYWx1ZSIsIm5vcm1hbGl6ZVNsb3QiLCJyYXdTbG90Iiwibm9ybWFsaXplT2JqZWN0U2xvdHMiLCJyYXdTbG90cyIsIl9jdHgiLCJub3JtYWxpemVWTm9kZVNsb3RzIiwid2l0aERpcmVjdGl2ZXMiLCJkaXJlY3RpdmVzIiwiYmluZGluZ3MiLCJkaXIiLCJtb2RpZmllcnMiLCJtb3VudGVkIiwidXBkYXRlZCIsImludm9rZURpcmVjdGl2ZUhvb2siLCJwcmV2Vk5vZGUiLCJvbGRCaW5kaW5ncyIsImNyZWF0ZUFwcENvbnRleHQiLCJhcHAiLCJpc05hdGl2ZVRhZyIsInBlcmZvcm1hbmNlIiwiZ2xvYmFsUHJvcGVydGllcyIsIm9wdGlvbk1lcmdlU3RyYXRlZ2llcyIsImlzQ3VzdG9tRWxlbWVudCIsIndhcm5IYW5kbGVyIiwiY29tcG9uZW50cyIsInByb3ZpZGVzIiwiY3JlYXRlQXBwQVBJIiwiaHlkcmF0ZSIsInJvb3RDb21wb25lbnQiLCJyb290UHJvcHMiLCJjb250ZXh0IiwiaW5zdGFsbGVkUGx1Z2lucyIsIl91aWQiLCJfY29tcG9uZW50IiwiX3Byb3BzIiwiX2NvbnRhaW5lciIsIl9jb250ZXh0IiwidmVyc2lvbiIsInVzZSIsInBsdWdpbiIsImluc3RhbGwiLCJtaXhpbiIsImRpcmVjdGl2ZSIsInJvb3RDb250YWluZXIiLCJpc0h5ZHJhdGUiLCJfX3Z1ZV9hcHBfXyIsInByb3ZpZGUiLCJkZWZpbmVDb21wb25lbnQiLCJzZXR1cCIsInByb2RFZmZlY3RPcHRpb25zIiwicGVuZGluZ0JyYW5jaCIsInNldFJlZiIsInJhd1JlZiIsIm9sZFJhd1JlZiIsInBhcmVudFN1c3BlbnNlIiwiX19hc3luY0xvYWRlciIsImV4cG9zZWQiLCJvbGRSZWYiLCJyZWZzIiwiZG9TZXQiLCJiYXNlQ3JlYXRlUmVuZGVyZXIiLCJjcmVhdGVIeWRyYXRpb25GbnMiLCJuZWVkV2FybiIsImluaXRGZWF0dXJlRmxhZ3MiLCJob3N0SW5zZXJ0IiwiaG9zdFJlbW92ZSIsInBhdGNoUHJvcCIsImhvc3RQYXRjaFByb3AiLCJmb3JjZVBhdGNoUHJvcCIsImhvc3RGb3JjZVBhdGNoUHJvcCIsImhvc3RDcmVhdGVFbGVtZW50IiwiY3JlYXRlVGV4dCIsImhvc3RDcmVhdGVUZXh0IiwiY3JlYXRlQ29tbWVudCIsImhvc3RDcmVhdGVDb21tZW50Iiwic2V0VGV4dCIsImhvc3RTZXRUZXh0Iiwic2V0RWxlbWVudFRleHQiLCJob3N0U2V0RWxlbWVudFRleHQiLCJob3N0UGFyZW50Tm9kZSIsIm5leHRTaWJsaW5nIiwiaG9zdE5leHRTaWJsaW5nIiwic2V0U2NvcGVJZCIsImhvc3RTZXRTY29wZUlkIiwiY2xvbmVOb2RlIiwiaG9zdENsb25lTm9kZSIsImluc2VydFN0YXRpY0NvbnRlbnQiLCJob3N0SW5zZXJ0U3RhdGljQ29udGVudCIsInBhdGNoIiwibjEiLCJuMiIsImNvbnRhaW5lciIsImFuY2hvciIsInBhcmVudENvbXBvbmVudCIsImlzU1ZHIiwib3B0aW1pemVkIiwiZ2V0TmV4dEhvc3ROb2RlIiwidW5tb3VudCIsImR5bmFtaWNDaGlsZHJlbiIsIlRleHQiLCJwcm9jZXNzVGV4dCIsInByb2Nlc3NDb21tZW50Tm9kZSIsIlN0YXRpYyIsIm1vdW50U3RhdGljTm9kZSIsInByb2Nlc3NGcmFnbWVudCIsInByb2Nlc3NFbGVtZW50IiwicHJvY2Vzc0NvbXBvbmVudCIsImludGVybmFscyIsIm1vdW50RWxlbWVudCIsInBhdGNoRWxlbWVudCIsInZub2RlSG9vayIsInNjb3BlSWQiLCJpcyIsIm1vdW50Q2hpbGRyZW4iLCJ1bm1vdW50Q2hpbGRyZW4iLCJvblZub2RlQmVmb3JlTW91bnQiLCJpbnZva2VWTm9kZUhvb2siLCJuZWVkQ2FsbFRyYW5zaXRpb25Ib29rcyIsImJlZm9yZUVudGVyIiwib25Wbm9kZU1vdW50ZWQiLCJlbnRlciIsInRyZWVPd25lcklkIiwiX19zY29wZUlkIiwiY2xvbmVJZk1vdW50ZWQiLCJvbGRQcm9wcyIsIm5ld1Byb3BzIiwib25Wbm9kZUJlZm9yZVVwZGF0ZSIsInBhdGNoUHJvcHMiLCJjbGFzcyIsInByb3BzVG9VcGRhdGUiLCJkeW5hbWljUHJvcHMiLCJwcmV2IiwiYXJlQ2hpbGRyZW5TVkciLCJwYXRjaEJsb2NrQ2hpbGRyZW4iLCJwYXRjaENoaWxkcmVuIiwib25Wbm9kZVVwZGF0ZWQiLCJvbGRDaGlsZHJlbiIsIm5ld0NoaWxkcmVuIiwiZmFsbGJhY2tDb250YWluZXIiLCJvbGRWTm9kZSIsIm5ld1ZOb2RlIiwiZnJhZ21lbnRTdGFydEFuY2hvciIsImZyYWdtZW50RW5kQW5jaG9yIiwidHJhdmVyc2VTdGF0aWNDaGlsZHJlbiIsImFjdGl2YXRlIiwibW91bnRDb21wb25lbnQiLCJ1cGRhdGVDb21wb25lbnQiLCJpbml0aWFsVk5vZGUiLCJlbXB0eUFwcENvbnRleHQiLCJ1aWQkMSIsImFjY2Vzc0NhY2hlIiwic2V0dXBDb250ZXh0Iiwic3VzcGVuc2VJZCIsInBlbmRpbmdJZCIsImFzeW5jRGVwIiwiYXN5bmNSZXNvbHZlZCIsImJjIiwiYm0iLCJidSIsInVtIiwiYnVtIiwiZGEiLCJydGciLCJydGMiLCJjcmVhdGVDb21wb25lbnRJbnN0YW5jZSIsInJlbmRlcmVyIiwiaXNTU1IiLCJpc1N0YXRlZnVsIiwiSW50ZXJuYWxPYmplY3RLZXkiLCJpbml0UHJvcHMiLCJpbml0U2xvdHMiLCJQdWJsaWNJbnN0YW5jZVByb3h5SGFuZGxlcnMiLCJleHBvc2UiLCJjcmVhdGVTZXR1cENvbnRleHQiLCJzZXR1cFJlc3VsdCIsInJlc29sdmVkUmVzdWx0IiwiaGFuZGxlU2V0dXBSZXN1bHQiLCJmaW5pc2hDb21wb25lbnRTZXR1cCIsInNldHVwU3RhdGVmdWxDb21wb25lbnQiLCJzZXR1cENvbXBvbmVudCIsInJlZ2lzdGVyRGVwIiwic2V0dXBSZW5kZXJFZmZlY3QiLCJwbGFjZWhvbGRlciIsIm5leHRWTm9kZSIsInByZXZDaGlsZHJlbiIsIm5leHRDaGlsZHJlbiIsIiRzdGFibGUiLCJzaG91bGRVcGRhdGVDb21wb25lbnQiLCJ1cGRhdGVDb21wb25lbnRQcmVSZW5kZXIiLCJpbnZhbGlkYXRlSm9iIiwib3JpZ2luTmV4dCIsIm5leHRUcmVlIiwicHJldlRyZWUiLCJ1cGRhdGVIT0NIb3N0RWwiLCJoeWRyYXRlTm9kZSIsInJhd1ByZXZQcm9wcyIsImtlYmFiS2V5IiwiY2FtZWxpemVkS2V5IiwidXBkYXRlUHJvcHMiLCJuZWVkRGVsZXRpb25DaGVjayIsImRlbGV0aW9uQ29tcGFyaXNvblRhcmdldCIsInVwZGF0ZVNsb3RzIiwiYzEiLCJwcmV2U2hhcGVGbGFnIiwiYzIiLCJwYXRjaEtleWVkQ2hpbGRyZW4iLCJwYXRjaFVua2V5ZWRDaGlsZHJlbiIsIm9sZExlbmd0aCIsIm5ld0xlbmd0aCIsImNvbW1vbkxlbmd0aCIsIm5leHRDaGlsZCIsInBhcmVudEFuY2hvciIsImwyIiwiZTEiLCJlMiIsIm5leHRQb3MiLCJzMSIsInMyIiwia2V5VG9OZXdJbmRleE1hcCIsImoiLCJwYXRjaGVkIiwidG9CZVBhdGNoZWQiLCJtb3ZlZCIsIm1heE5ld0luZGV4U29GYXIiLCJuZXdJbmRleFRvT2xkSW5kZXhNYXAiLCJwcmV2Q2hpbGQiLCJuZXdJbmRleCIsImluY3JlYXNpbmdOZXdJbmRleFNlcXVlbmNlIiwiYXJySSIsImdldFNlcXVlbmNlIiwibmV4dEluZGV4IiwibW92ZSIsIm1vdmVUeXBlIiwibGVhdmUiLCJwZXJmb3JtTGVhdmUiLCJtb3ZlU3RhdGljTm9kZSIsImRvUmVtb3ZlIiwiZGVhY3RpdmF0ZSIsInNob3VsZEludm9rZURpcnMiLCJvblZub2RlQmVmb3JlVW5tb3VudCIsInVubW91bnRDb21wb25lbnQiLCJpc1RlbGVwb3J0RGlzYWJsZWQiLCJvblZub2RlVW5tb3VudGVkIiwicmVtb3ZlRnJhZ21lbnQiLCJyZW1vdmVTdGF0aWNOb2RlIiwicGVyZm9ybVJlbW92ZSIsImVuZCIsIl92bm9kZSIsIm10IiwibWMiLCJwYyIsInBiYyIsImNyZWF0ZUFwcCIsImNoMSIsImNoMiIsImRpc2FibGVkIiwiaXNUYXJnZXRTVkciLCJTVkdFbGVtZW50IiwicmVzb2x2ZVRhcmdldCIsInNlbGVjdCIsInRhcmdldFNlbGVjdG9yIiwidG8iLCJtb3ZlVGVsZXBvcnQiLCJ0YXJnZXRBbmNob3IiLCJpc1Jlb3JkZXIiLCJUZWxlcG9ydCIsIl9faXNUZWxlcG9ydCIsIm1haW5BbmNob3IiLCJtb3VudCIsIndhc0Rpc2FibGVkIiwiY3VycmVudENvbnRhaW5lciIsImN1cnJlbnRBbmNob3IiLCJuZXh0VGFyZ2V0Iiwibm9kZSIsImh5ZHJhdGVDaGlsZHJlbiIsInRhcmdldE5vZGUiLCJfbHBhIiwiQ09NUE9ORU5UUyIsInJlc29sdmVDb21wb25lbnQiLCJyZXNvbHZlQXNzZXQiLCJOVUxMX0RZTkFNSUNfQ09NUE9ORU5UIiwicmVzb2x2ZURpcmVjdGl2ZSIsIndhcm5NaXNzaW5nIiwic2VsZk5hbWUiLCJkaXNwbGF5TmFtZSIsInJlZ2lzdHJ5IiwiYmxvY2tTdGFjayIsImN1cnJlbnRCbG9jayIsImRpc2FibGVUcmFja2luZyIsIl9fdl9pc1ZOb2RlIiwibm9ybWFsaXplS2V5Iiwibm9ybWFsaXplUmVmIiwiaXNCbG9ja05vZGUiLCJjbG9uZWQiLCJub3JtYWxpemVDaGlsZHJlbiIsIl9fdmNjT3B0cyIsImtsYXNzIiwiX19pc1N1c3BlbnNlIiwiaXNTdXNwZW5zZSIsImlzVGVsZXBvcnQiLCJzdGF0aWNDb3VudCIsIm5vcm1hbGl6ZVN1c3BlbnNlQ2hpbGRyZW4iLCJleHRyYVByb3BzIiwibWVyZ2VSZWYiLCJtZXJnZWRQcm9wcyIsIm1lcmdlUHJvcHMiLCJjcmVhdGVUZXh0Vk5vZGUiLCJ0ZXh0IiwiZmxhZyIsImNyZWF0ZUNvbW1lbnRWTm9kZSIsImFzQmxvY2siLCJzbG90RmxhZyIsInRvTWVyZ2UiLCJleGlzdGluZyIsImluY29taW5nIiwicGFyZW50UHJvdmlkZXMiLCJpbmplY3QiLCJ0cmVhdERlZmF1bHRBc0ZhY3RvcnkiLCJpc0luQmVmb3JlQ3JlYXRlIiwiYXBwbHlPcHRpb25zIiwiZGVmZXJyZWREYXRhIiwiZGVmZXJyZWRXYXRjaCIsImRlZmVycmVkUHJvdmlkZSIsImV4dGVuZHNPcHRpb25zIiwiZGF0YU9wdGlvbnMiLCJjb21wdXRlZE9wdGlvbnMiLCJtZXRob2RzIiwid2F0Y2hPcHRpb25zIiwicHJvdmlkZU9wdGlvbnMiLCJpbmplY3RPcHRpb25zIiwiYmVmb3JlTW91bnQiLCJiZWZvcmVVcGRhdGUiLCJhY3RpdmF0ZWQiLCJkZWFjdGl2YXRlZCIsImJlZm9yZURlc3Ryb3kiLCJiZWZvcmVVbm1vdW50IiwiZGVzdHJveWVkIiwidW5tb3VudGVkIiwicmVuZGVyVHJhY2tlZCIsInJlbmRlclRyaWdnZXJlZCIsImVycm9yQ2FwdHVyZWQiLCJnbG9iYWxNaXhpbnMiLCJjYWxsU3luY0hvb2siLCJhcHBseU1peGlucyIsIm1ldGhvZEhhbmRsZXIiLCJkYXRhRm4iLCJyZXNvbHZlRGF0YSIsImNyZWF0ZVdhdGNoZXIiLCJvbkVycm9yQ2FwdHVyZWQiLCJjYWxsSG9va0Zyb21NaXhpbnMiLCJjYWxsSG9va0Zyb21FeHRlbmRzIiwic2VsZkhvb2siLCJiYXNlSG9vayIsImNoYWluZWRNaXhpbnMiLCJwYXRoIiwic2VnbWVudHMiLCJjcmVhdGVQYXRoR2V0dGVyIiwibWVyZ2VPcHRpb25zIiwic3RyYXRzIiwiZ2V0UHVibGljSW5zdGFuY2UiLCJwdWJsaWNQcm9wZXJ0aWVzTWFwIiwiJGVsIiwiJGRhdGEiLCIkcHJvcHMiLCIkYXR0cnMiLCIkc2xvdHMiLCIkcmVmcyIsIiRwYXJlbnQiLCIkcm9vdCIsIiRlbWl0IiwiJG9wdGlvbnMiLCJfX21lcmdlZCIsInJlc29sdmVNZXJnZWRPcHRpb25zIiwiJGZvcmNlVXBkYXRlIiwiJG5leHRUaWNrIiwiJHdhdGNoIiwibm9ybWFsaXplZFByb3BzIiwicHVibGljR2V0dGVyIiwiY3NzTW9kdWxlIiwiX19jc3NNb2R1bGVzIiwiUnVudGltZUNvbXBpbGVkUHVibGljSW5zdGFuY2VQcm94eUhhbmRsZXJzIiwidW5zY29wYWJsZXMiLCJkZXZ0b29sc1Jhd1NldHVwU3RhdGUiLCJfcmMiLCJnZXR0ZXJPck9wdGlvbnMiLCJzZXR0ZXIiLCJwcm9wc09yQ2hpbGRyZW4iLCJyZW5kZXJMaXN0IiwicmVuZGVySXRlbSIsInRvSGFuZGxlcnMiLCJjcmVhdGVTbG90cyIsImR5bmFtaWNTbG90cyIsInN2Z05TIiwiZG9jIiwidGVtcENvbnRhaW5lciIsInRlbXBTVkdDb250YWluZXIiLCJub2RlT3BzIiwiY3JlYXRlRWxlbWVudE5TIiwibm9kZVZhbHVlIiwidGV4dENvbnRlbnQiLCJzZWxlY3RvciIsInRlbXAiLCJpbm5lckhUTUwiLCJmaXJzdCIsImltcG9ydGFudFJFIiwic2V0U3R5bGUiLCJzZXRQcm9wZXJ0eSIsInByZWZpeGVkIiwicmF3TmFtZSIsImNhY2hlZCIsInByZWZpeENhY2hlIiwicHJlZml4ZXMiLCJhdXRvUHJlZml4IiwieGxpbmtOUyIsIl9nZXROb3ciLCJjcmVhdGVFdmVudCIsInRpbWVTdGFtcCIsImNhY2hlZE5vdyIsIm9wdGlvbnNNb2RpZmllclJFIiwibmF0aXZlT25SRSIsIlRSQU5TSVRJT04iLCJBTklNQVRJT04iLCJUcmFuc2l0aW9uIiwicmVzb2x2ZVRyYW5zaXRpb25Qcm9wcyIsIkRPTVRyYW5zaXRpb25Qcm9wc1ZhbGlkYXRvcnMiLCJkdXJhdGlvbiIsImVudGVyRnJvbUNsYXNzIiwiZW50ZXJBY3RpdmVDbGFzcyIsImVudGVyVG9DbGFzcyIsImFwcGVhckZyb21DbGFzcyIsImFwcGVhckFjdGl2ZUNsYXNzIiwiYXBwZWFyVG9DbGFzcyIsImxlYXZlRnJvbUNsYXNzIiwibGVhdmVBY3RpdmVDbGFzcyIsImxlYXZlVG9DbGFzcyIsIlRyYW5zaXRpb25Qcm9wc1ZhbGlkYXRvcnMiLCJiYXNlUHJvcHMiLCJkdXJhdGlvbnMiLCJOdW1iZXJPZiIsIm5vcm1hbGl6ZUR1cmF0aW9uIiwiZW50ZXJEdXJhdGlvbiIsImxlYXZlRHVyYXRpb24iLCJmaW5pc2hFbnRlciIsImlzQXBwZWFyIiwicmVtb3ZlVHJhbnNpdGlvbkNsYXNzIiwiZmluaXNoTGVhdmUiLCJtYWtlRW50ZXJIb29rIiwibmV4dEZyYW1lIiwiYWRkVHJhbnNpdGlvbkNsYXNzIiwid2hlblRyYW5zaXRpb25FbmRzIiwiY2FjaGVkVHJhbnNpdGlvbiIsInRyYW5zaXRpb25Qcm9wZXJ0eSIsImNscyIsImNsYXNzTGlzdCIsIl92dGMiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJlbmRJZCIsImV4cGVjdGVkVHlwZSIsImV4cGxpY2l0VGltZW91dCIsIl9lbmRJZCIsInJlc29sdmVJZk5vdFN0YWxlIiwidGltZW91dCIsInByb3BDb3VudCIsImdldFRyYW5zaXRpb25JbmZvIiwiZW5kRXZlbnQiLCJlbmRlZCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJvbkVuZCIsInN0eWxlcyIsImdldENvbXB1dGVkU3R5bGUiLCJnZXRTdHlsZVByb3BlcnRpZXMiLCJ0cmFuc2l0aW9uRGVsYXlzIiwidHJhbnNpdGlvbkR1cmF0aW9ucyIsInRyYW5zaXRpb25UaW1lb3V0IiwiZ2V0VGltZW91dCIsImFuaW1hdGlvbkRlbGF5cyIsImFuaW1hdGlvbkR1cmF0aW9ucyIsImFuaW1hdGlvblRpbWVvdXQiLCJoYXNUcmFuc2Zvcm0iLCJkZWxheXMiLCJ0b01zIiwicG9zaXRpb25NYXAiLCJuZXdQb3NpdGlvbk1hcCIsIlRyYW5zaXRpb25Hcm91cCIsIm1vdmVDbGFzcyIsImRpc3BsYXkiLCJoYXNDU1NUcmFuc2Zvcm0iLCJjYWxsUGVuZGluZ0NicyIsInJlY29yZFBvc2l0aW9uIiwibW92ZWRDaGlsZHJlbiIsImFwcGx5VHJhbnNsYXRpb24iLCJib2R5Iiwib2Zmc2V0SGVpZ2h0Iiwid2Via2l0VHJhbnNmb3JtIiwidHJhbnNpdGlvbkR1cmF0aW9uIiwiX21vdmVDYiIsInByb3BlcnR5TmFtZSIsImNzc1RyYW5zaXRpb25Qcm9wcyIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsIm9sZFBvcyIsIm5ld1BvcyIsImR4IiwibGVmdCIsImR5IiwidG9wIiwiZ2V0TW9kZWxBc3NpZ25lciIsIm9uQ29tcG9zaXRpb25TdGFydCIsImNvbXBvc2luZyIsIm9uQ29tcG9zaXRpb25FbmQiLCJpbml0RXZlbnQiLCJkaXNwYXRjaEV2ZW50Iiwidk1vZGVsVGV4dCIsIl9hc3NpZ24iLCJjYXN0VG9OdW1iZXIiLCJkb21WYWx1ZSIsImFjdGl2ZUVsZW1lbnQiLCJ2TW9kZWxDaGVja2JveCIsIm1vZGVsVmFsdWUiLCJfbW9kZWxWYWx1ZSIsImVsZW1lbnRWYWx1ZSIsImNoZWNrZWQiLCJmb3VuZCIsImZpbHRlcmVkIiwiZ2V0Q2hlY2tib3hWYWx1ZSIsInNldENoZWNrZWQiLCJ2TW9kZWxSYWRpbyIsInN5c3RlbU1vZGlmaWVycyIsIm1vZGlmaWVyR3VhcmRzIiwic3RvcFByb3BhZ2F0aW9uIiwicHJldmVudCIsInByZXZlbnREZWZhdWx0IiwiY3VycmVudFRhcmdldCIsImN0cmwiLCJjdHJsS2V5Iiwic2hpZnQiLCJzaGlmdEtleSIsImFsdCIsImFsdEtleSIsIm1ldGEiLCJtZXRhS2V5IiwiYnV0dG9uIiwibWlkZGxlIiwicmlnaHQiLCJleGFjdCIsIndpdGhNb2RpZmllcnMiLCJndWFyZCIsImtleU5hbWVzIiwiZXNjIiwic3BhY2UiLCJ1cCIsImRvd24iLCJ3aXRoS2V5cyIsImV2ZW50S2V5IiwiayIsInZTaG93IiwiX3ZvZCIsInNldERpc3BsYXkiLCJyZW5kZXJlck9wdGlvbnMiLCJwcmV2VmFsdWUiLCJuZXh0VmFsdWUiLCJ0cmFuc2l0aW9uQ2xhc3NlcyIsImNsYXNzTmFtZSIsInBhdGNoQ2xhc3MiLCJwYXRjaFN0eWxlIiwiaW52b2tlcnMiLCJfdmVpIiwiZXhpc3RpbmdJbnZva2VyIiwicGFyc2VOYW1lIiwiaW5pdGlhbFZhbHVlIiwiaW52b2tlciIsImF0dGFjaGVkIiwib3JpZ2luYWxTdG9wIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwiX3N0b3BwZWQiLCJwYXRjaFN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsImNyZWF0ZUludm9rZXIiLCJwYXRjaEV2ZW50IiwidGFnTmFtZSIsInNob3VsZFNldEFzUHJvcCIsInBhdGNoRE9NUHJvcCIsIl90cnVlVmFsdWUiLCJfZmFsc2VWYWx1ZSIsInJlbW92ZUF0dHJpYnV0ZU5TIiwic2V0QXR0cmlidXRlTlMiLCJpc0Jvb2xlYW4iLCJwYXRjaEF0dHIiLCJlbnN1cmVSZW5kZXJlciIsImNyZWF0ZVJlbmRlcmVyIiwib24iLCJvZmYiLCJNYXBTaGltIiwiZ2V0SW5kZXgiLCJjbGFzc18xIiwiX19lbnRyaWVzX18iLCJfYSIsImlzQnJvd3NlciIsImdsb2JhbCQxIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lJDEiLCJ0cmFuc2l0aW9uS2V5cyIsIm11dGF0aW9uT2JzZXJ2ZXJTdXBwb3J0ZWQiLCJNdXRhdGlvbk9ic2VydmVyIiwiUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyIiwiY29ubmVjdGVkXyIsIm11dGF0aW9uRXZlbnRzQWRkZWRfIiwibXV0YXRpb25zT2JzZXJ2ZXJfIiwib2JzZXJ2ZXJzXyIsIm9uVHJhbnNpdGlvbkVuZF8iLCJyZWZyZXNoIiwiZGVsYXkiLCJsZWFkaW5nQ2FsbCIsInRyYWlsaW5nQ2FsbCIsInJlc29sdmVQZW5kaW5nIiwidGltZW91dENhbGxiYWNrIiwidGhyb3R0bGUiLCJhZGRPYnNlcnZlciIsIm9ic2VydmVyIiwiY29ubmVjdF8iLCJyZW1vdmVPYnNlcnZlciIsIm9ic2VydmVycyIsImRpc2Nvbm5lY3RfIiwidXBkYXRlT2JzZXJ2ZXJzXyIsImFjdGl2ZU9ic2VydmVycyIsImdhdGhlckFjdGl2ZSIsImhhc0FjdGl2ZSIsImJyb2FkY2FzdEFjdGl2ZSIsIm9ic2VydmUiLCJjaGlsZExpc3QiLCJjaGFyYWN0ZXJEYXRhIiwic3VidHJlZSIsImRpc2Nvbm5lY3QiLCJfYiIsImdldEluc3RhbmNlIiwiaW5zdGFuY2VfIiwiZGVmaW5lQ29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJnZXRXaW5kb3dPZiIsIm93bmVyRG9jdW1lbnQiLCJkZWZhdWx0VmlldyIsImVtcHR5UmVjdCIsImNyZWF0ZVJlY3RJbml0IiwidG9GbG9hdCIsImdldEJvcmRlcnNTaXplIiwicG9zaXRpb25zIiwicG9zaXRpb24iLCJpc1NWR0dyYXBoaWNzRWxlbWVudCIsIlNWR0dyYXBoaWNzRWxlbWVudCIsImdldEJCb3giLCJnZXRDb250ZW50UmVjdCIsImJib3giLCJ3aWR0aCIsImhlaWdodCIsImdldFNWR0NvbnRlbnRSZWN0IiwiY2xpZW50V2lkdGgiLCJjbGllbnRIZWlnaHQiLCJwYWRkaW5ncyIsInBvc2l0aW9uc18xIiwiZ2V0UGFkZGluZ3MiLCJob3JpelBhZCIsInZlcnRQYWQiLCJib3R0b20iLCJib3hTaXppbmciLCJkb2N1bWVudEVsZW1lbnQiLCJpc0RvY3VtZW50RWxlbWVudCIsInZlcnRTY3JvbGxiYXIiLCJob3JpelNjcm9sbGJhciIsImdldEhUTUxFbGVtZW50Q29udGVudFJlY3QiLCJSZXNpemVPYnNlcnZhdGlvbiIsImJyb2FkY2FzdFdpZHRoIiwiYnJvYWRjYXN0SGVpZ2h0IiwiY29udGVudFJlY3RfIiwiaXNBY3RpdmUiLCJyZWN0IiwiYnJvYWRjYXN0UmVjdCIsIlJlc2l6ZU9ic2VydmVyRW50cnkiLCJyZWN0SW5pdCIsImNvbnRlbnRSZWN0IiwiQ29uc3RyIiwiRE9NUmVjdFJlYWRPbmx5IiwiY3JlYXRlUmVhZE9ubHlSZWN0IiwiUmVzaXplT2JzZXJ2ZXJTUEkiLCJjb250cm9sbGVyIiwiY2FsbGJhY2tDdHgiLCJhY3RpdmVPYnNlcnZhdGlvbnNfIiwib2JzZXJ2YXRpb25zXyIsImNhbGxiYWNrXyIsImNvbnRyb2xsZXJfIiwiY2FsbGJhY2tDdHhfIiwiRWxlbWVudCIsIm9ic2VydmF0aW9ucyIsInVub2JzZXJ2ZSIsImNsZWFyQWN0aXZlIiwiX3RoaXMiLCJvYnNlcnZhdGlvbiIsIlJlc2l6ZU9ic2VydmVyIiwiZ2V0V2luZG93IiwiZ2V0V2luZG93U2Nyb2xsIiwid2luIiwic2Nyb2xsTGVmdCIsInBhZ2VYT2Zmc2V0Iiwic2Nyb2xsVG9wIiwicGFnZVlPZmZzZXQiLCJpc0VsZW1lbnQiLCJpc0hUTUxFbGVtZW50IiwiSFRNTEVsZW1lbnQiLCJnZXROb2RlTmFtZSIsIm5vZGVOYW1lIiwiZ2V0RG9jdW1lbnRFbGVtZW50IiwiZ2V0V2luZG93U2Nyb2xsQmFyWCIsImlzU2Nyb2xsUGFyZW50IiwiX2dldENvbXB1dGVkU3R5bGUiLCJvdmVyZmxvdyIsIm92ZXJmbG93WCIsIm92ZXJmbG93WSIsImdldENvbXBvc2l0ZVJlY3QiLCJlbGVtZW50T3JWaXJ0dWFsRWxlbWVudCIsIm9mZnNldFBhcmVudCIsImlzRml4ZWQiLCJpc09mZnNldFBhcmVudEFuRWxlbWVudCIsInNjcm9sbCIsIm9mZnNldHMiLCJjbGllbnRMZWZ0IiwiY2xpZW50VG9wIiwiZ2V0TGF5b3V0UmVjdCIsIm9mZnNldExlZnQiLCJvZmZzZXRUb3AiLCJvZmZzZXRXaWR0aCIsImdldFBhcmVudE5vZGUiLCJhc3NpZ25lZFNsb3QiLCJob3N0IiwiZ2V0U2Nyb2xsUGFyZW50IiwibGlzdFNjcm9sbFBhcmVudHMiLCJzY3JvbGxQYXJlbnQiLCJpc0JvZHkiLCJ2aXN1YWxWaWV3cG9ydCIsInVwZGF0ZWRMaXN0IiwiaXNUYWJsZUVsZW1lbnQiLCJnZXRUcnVlT2Zmc2V0UGFyZW50IiwiaHRtbCIsImdldE9mZnNldFBhcmVudCIsImN1cnJlbnROb2RlIiwicGVyc3BlY3RpdmUiLCJ3aWxsQ2hhbmdlIiwiZ2V0Q29udGFpbmluZ0Jsb2NrIiwiYXV0byIsImJhc2VQbGFjZW1lbnRzIiwidmlld3BvcnQiLCJwb3BwZXIiLCJ2YXJpYXRpb25QbGFjZW1lbnRzIiwiYWNjIiwicGxhY2VtZW50IiwibW9kaWZpZXJQaGFzZXMiLCJvcmRlciIsInZpc2l0ZWQiLCJtb2RpZmllciIsInJlcXVpcmVzIiwicmVxdWlyZXNJZkV4aXN0cyIsImRlcE1vZGlmaWVyIiwicGVuZGluZyIsIkRFRkFVTFRfT1BUSU9OUyIsInN0cmF0ZWd5IiwiYXJlVmFsaWRFbGVtZW50cyIsIl9sZW4iLCJwb3BwZXJHZW5lcmF0b3IiLCJnZW5lcmF0b3JPcHRpb25zIiwiX2dlbmVyYXRvck9wdGlvbnMiLCJfZ2VuZXJhdG9yT3B0aW9ucyRkZWYiLCJkZWZhdWx0TW9kaWZpZXJzIiwiX2dlbmVyYXRvck9wdGlvbnMkZGVmMiIsImRlZmF1bHRPcHRpb25zIiwicmVmZXJlbmNlIiwib3JkZXJlZE1vZGlmaWVycyIsIm1vZGlmaWVyc0RhdGEiLCJlbGVtZW50cyIsImVmZmVjdENsZWFudXBGbnMiLCJpc0Rlc3Ryb3llZCIsInNldE9wdGlvbnMiLCJjbGVhbnVwTW9kaWZpZXJFZmZlY3RzIiwic2Nyb2xsUGFyZW50cyIsImNvbnRleHRFbGVtZW50IiwibWVyZ2VkIiwicGhhc2UiLCJvcmRlck1vZGlmaWVycyIsImVuYWJsZWQiLCJfcmVmMyIsIl9yZWYzJG9wdGlvbnMiLCJjbGVhbnVwRm4iLCJmb3JjZVVwZGF0ZSIsIl9zdGF0ZSRlbGVtZW50cyIsInJlY3RzIiwicmVzZXQiLCJfc3RhdGUkb3JkZXJlZE1vZGlmaWUiLCJfc3RhdGUkb3JkZXJlZE1vZGlmaWUyIiwiX29wdGlvbnMiLCJkZXN0cm95Iiwib25GaXJzdFVwZGF0ZSIsInBhc3NpdmUiLCJnZXRCYXNlUGxhY2VtZW50IiwiZ2V0VmFyaWF0aW9uIiwiZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50IiwiY29tcHV0ZU9mZnNldHMiLCJfcmVmIiwiYmFzZVBsYWNlbWVudCIsInZhcmlhdGlvbiIsImNvbW1vblgiLCJjb21tb25ZIiwibWFpbkF4aXMiLCJ1bnNldFNpZGVzIiwibWFwVG9TdHlsZXMiLCJfcmVmMiIsIl9PYmplY3QkYXNzaWduMiIsInBvcHBlclJlY3QiLCJncHVBY2NlbGVyYXRpb24iLCJhZGFwdGl2ZSIsInJvdW5kT2Zmc2V0cyIsImRwciIsImRldmljZVBpeGVsUmF0aW8iLCJyb3VuZE9mZnNldHNCeURQUiIsIl9yZWYzJHgiLCJfcmVmMyR5IiwiaGFzWCIsImhhc1kiLCJzaWRlWCIsInNpZGVZIiwiX09iamVjdCRhc3NpZ24iLCJjb21tb25TdHlsZXMiLCJoYXNoIiwiZ2V0T3Bwb3NpdGVQbGFjZW1lbnQiLCJtYXRjaGVkIiwiZ2V0T3Bwb3NpdGVWYXJpYXRpb25QbGFjZW1lbnQiLCJjb250YWlucyIsInJvb3ROb2RlIiwiZ2V0Um9vdE5vZGUiLCJTaGFkb3dSb290IiwiaXNTYW1lTm9kZSIsInJlY3RUb0NsaWVudFJlY3QiLCJnZXRDbGllbnRSZWN0RnJvbU1peGVkVHlwZSIsImNsaXBwaW5nUGFyZW50IiwiZ2V0Vmlld3BvcnRSZWN0IiwiZ2V0SW5uZXJCb3VuZGluZ0NsaWVudFJlY3QiLCJ3aW5TY3JvbGwiLCJzY3JvbGxXaWR0aCIsInNjcm9sbEhlaWdodCIsImRpcmVjdGlvbiIsImdldERvY3VtZW50UmVjdCIsIm1lcmdlUGFkZGluZ09iamVjdCIsInBhZGRpbmdPYmplY3QiLCJleHBhbmRUb0hhc2hNYXAiLCJoYXNoTWFwIiwiZGV0ZWN0T3ZlcmZsb3ciLCJfb3B0aW9ucyRwbGFjZW1lbnQiLCJfb3B0aW9ucyRib3VuZGFyeSIsImJvdW5kYXJ5IiwiX29wdGlvbnMkcm9vdEJvdW5kYXJ5Iiwicm9vdEJvdW5kYXJ5IiwiX29wdGlvbnMkZWxlbWVudENvbnRlIiwiZWxlbWVudENvbnRleHQiLCJfb3B0aW9ucyRhbHRCb3VuZGFyeSIsImFsdEJvdW5kYXJ5IiwiX29wdGlvbnMkcGFkZGluZyIsInBhZGRpbmciLCJhbHRDb250ZXh0IiwicmVmZXJlbmNlRWxlbWVudCIsImNsaXBwaW5nQ2xpZW50UmVjdCIsIm1haW5DbGlwcGluZ1BhcmVudHMiLCJjbGlwcGluZ1BhcmVudHMiLCJjbGlwcGVyRWxlbWVudCIsImdldENsaXBwaW5nUGFyZW50cyIsImZpcnN0Q2xpcHBpbmdQYXJlbnQiLCJjbGlwcGluZ1JlY3QiLCJhY2NSZWN0IiwiZ2V0Q2xpcHBpbmdSZWN0IiwicmVmZXJlbmNlQ2xpZW50UmVjdCIsInBvcHBlck9mZnNldHMiLCJwb3BwZXJDbGllbnRSZWN0IiwiZWxlbWVudENsaWVudFJlY3QiLCJvdmVyZmxvd09mZnNldHMiLCJvZmZzZXREYXRhIiwibXVsdGlwbHkiLCJ3aXRoaW4iLCJnZXRTaWRlT2Zmc2V0cyIsInByZXZlbnRlZE9mZnNldHMiLCJpc0FueVNpZGVGdWxseUNsaXBwZWQiLCJzaWRlIiwiX29wdGlvbnMkc2Nyb2xsIiwiX29wdGlvbnMkcmVzaXplIiwicmVzaXplIiwiX3JlZjQiLCJfb3B0aW9ucyRncHVBY2NlbGVyYXQiLCJfb3B0aW9ucyRhZGFwdGl2ZSIsIl9vcHRpb25zJHJvdW5kT2Zmc2V0cyIsImFycm93IiwiaW5pdGlhbFN0eWxlcyIsIm1hcmdpbiIsInByb3BlcnR5IiwiYXR0cmlidXRlIiwiX29wdGlvbnMkb2Zmc2V0IiwiaW52ZXJ0RGlzdGFuY2UiLCJza2lkZGluZyIsImRpc3RhbmNlIiwiZGlzdGFuY2VBbmRTa2lkZGluZ1RvWFkiLCJfZGF0YSRzdGF0ZSRwbGFjZW1lbnQiLCJfc2tpcCIsIl9vcHRpb25zJG1haW5BeGlzIiwiY2hlY2tNYWluQXhpcyIsIl9vcHRpb25zJGFsdEF4aXMiLCJhbHRBeGlzIiwiY2hlY2tBbHRBeGlzIiwic3BlY2lmaWVkRmFsbGJhY2tQbGFjZW1lbnRzIiwiZmFsbGJhY2tQbGFjZW1lbnRzIiwiX29wdGlvbnMkZmxpcFZhcmlhdGlvIiwiZmxpcFZhcmlhdGlvbnMiLCJhbGxvd2VkQXV0b1BsYWNlbWVudHMiLCJwcmVmZXJyZWRQbGFjZW1lbnQiLCJvcHBvc2l0ZVBsYWNlbWVudCIsImdldEV4cGFuZGVkRmFsbGJhY2tQbGFjZW1lbnRzIiwicGxhY2VtZW50cyIsIl9vcHRpb25zJGFsbG93ZWRBdXRvUCIsImFsbG93ZWRQbGFjZW1lbnRzIiwib3ZlcmZsb3dzIiwiY29tcHV0ZUF1dG9QbGFjZW1lbnQiLCJyZWZlcmVuY2VSZWN0IiwiY2hlY2tzTWFwIiwibWFrZUZhbGxiYWNrQ2hlY2tzIiwiZmlyc3RGaXR0aW5nUGxhY2VtZW50IiwiX2Jhc2VQbGFjZW1lbnQiLCJpc1N0YXJ0VmFyaWF0aW9uIiwiaXNWZXJ0aWNhbCIsIm1haW5WYXJpYXRpb25TaWRlIiwiYWx0VmFyaWF0aW9uU2lkZSIsImNoZWNrcyIsImV2ZXJ5IiwiY2hlY2siLCJfbG9vcCIsImZpdHRpbmdQbGFjZW1lbnQiLCJmaW5kIiwiX29wdGlvbnMkdGV0aGVyIiwidGV0aGVyIiwiX29wdGlvbnMkdGV0aGVyT2Zmc2V0IiwidGV0aGVyT2Zmc2V0IiwiaXNCYXNlUGxhY2VtZW50IiwidGV0aGVyT2Zmc2V0VmFsdWUiLCJtYWluU2lkZSIsImFsdFNpZGUiLCJhZGRpdGl2ZSIsIm1heExlbiIsImFycm93RWxlbWVudCIsImFycm93UmVjdCIsImFycm93UGFkZGluZ09iamVjdCIsImFycm93UGFkZGluZ01pbiIsImFycm93UGFkZGluZ01heCIsImFycm93TGVuIiwibWluT2Zmc2V0IiwibWF4T2Zmc2V0IiwiYXJyb3dPZmZzZXRQYXJlbnQiLCJjbGllbnRPZmZzZXQiLCJvZmZzZXRNb2RpZmllclZhbHVlIiwidGV0aGVyTWluIiwidGV0aGVyTWF4IiwicHJldmVudGVkT2Zmc2V0IiwiX21haW5TaWRlIiwiX2FsdFNpZGUiLCJfb2Zmc2V0IiwiX3ByZXZlbnRlZE9mZnNldCIsIl9zdGF0ZSRtb2RpZmllcnNEYXRhJCIsIm1pblByb3AiLCJtYXhQcm9wIiwiZW5kRGlmZiIsInN0YXJ0RGlmZiIsImNsaWVudFNpemUiLCJjZW50ZXJUb1JlZmVyZW5jZSIsImNlbnRlciIsImF4aXNQcm9wIiwiY2VudGVyT2Zmc2V0IiwiX29wdGlvbnMkZWxlbWVudCIsInByZXZlbnRPdmVyZmxvdyIsInJlZmVyZW5jZU92ZXJmbG93IiwicG9wcGVyQWx0T3ZlcmZsb3ciLCJyZWZlcmVuY2VDbGlwcGluZ09mZnNldHMiLCJwb3BwZXJFc2NhcGVPZmZzZXRzIiwiaXNSZWZlcmVuY2VIaWRkZW4iLCJoYXNQb3BwZXJFc2NhcGVkIiwiX2V4dGVuZHMiLCJfZ2V0UHJvdG90eXBlT2YiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIl9zZXRQcm90b3R5cGVPZiIsIl9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QiLCJjb25zdHJ1Y3QiLCJzaGFtIiwiX2NvbnN0cnVjdCIsIlBhcmVudCIsIkNsYXNzIiwiX3dyYXBOYXRpdmVTdXBlciIsIl9jYWNoZSIsIl9pc05hdGl2ZUZ1bmN0aW9uIiwiV3JhcHBlciIsImZvcm1hdFJlZ0V4cCIsImNvbnZlcnRGaWVsZHNFcnJvciIsImVycm9ycyIsImZpZWxkcyIsImZpZWxkIiwiaXNFbXB0eVZhbHVlIiwiaXNOYXRpdmVTdHJpbmdUeXBlIiwiYXN5bmNTZXJpYWxBcnJheSIsIm9yaWdpbmFsIiwiZW52IiwiQXN5bmNWYWxpZGF0aW9uRXJyb3IiLCJfRXJyb3IiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJjb21wbGVtZW50RXJyb3IiLCJydWxlIiwib2UiLCJmdWxsRmllbGQiLCJkZWVwTWVyZ2UiLCJyZXF1aXJlZCIsIm1lc3NhZ2VzIiwicGF0dGVybiIsImVtYWlsIiwidXJsIiwiaGV4IiwiaW50ZWdlciIsInJlZ2V4cCIsImdldFllYXIiLCJydWxlcyIsIndoaXRlc3BhY2UiLCJydWxlVHlwZSIsInJhbmdlIiwibnVtIiwibGFzdEluZGV4IiwibWlzbWF0Y2giLCJ0eXBlJDEiLCJ2YWxpZGF0b3JzIiwiZGF0ZU9iamVjdCIsImFueSIsIm5ld01lc3NhZ2VzIiwiaW52YWxpZCIsIlNjaGVtYSIsImRlc2NyaXB0b3IiLCJfbWVzc2FnZXMiLCJkZWZpbmUiLCJ2YWxpZGF0ZSIsInNvdXJjZV8iLCJvYyIsIm1lc3NhZ2VzJDEiLCJzZXJpZXMiLCJ2YWxpZGF0b3IiLCJnZXRWYWxpZGF0aW9uTWV0aG9kIiwiZXJyb3JGaWVsZHMiLCJvYmpBcnIiLCJvcHRpb24iLCJfcGVuZGluZyIsInJlamVjdCIsImZsYXR0ZW5PYmpBcnIiLCJmaXJzdEZpZWxkcyIsIm9iakFycktleXMiLCJvYmpBcnJMZW5ndGgiLCJ0b3RhbCIsInJlc3VsdHMiLCJhc3luY1BhcmFsbGVsQXJyYXkiLCJhc3luY01hcCIsImRvSXQiLCJkZWZhdWx0RmllbGQiLCJhZGRGdWxsZmllbGQiLCJzY2hlbWEiLCJzdXBwcmVzc1dhcm5pbmciLCJ3YXJuaW5nIiwiZmllbGRzU2NoZW1hIiwiZmllbGRTY2hlbWEiLCJlcnJzIiwiZmluYWxFcnJvcnMiLCJhc3luY1ZhbGlkYXRvciIsIl9lcnJvcnMiLCJjb21wbGV0ZSIsIm1lc3NhZ2VJbmRleCIsInJlZ2lzdGVyIiwia2UiLCJzdWNjZXNzIiwiQ2UiLCJ0aXRsZSIsImRlc2NyaXB0aW9uIiwiY2xvc2FibGUiLCJjbG9zZVRleHQiLCJzaG93SWNvbiIsInZpc2libGUiLCJ0eXBlQ2xhc3MiLCJpY29uQ2xhc3MiLCJpc0JpZ0ljb24iLCJpc0JvbGRUaXRsZSIsImNsb3NlIiwieGUiLCJ3ZSIsInJvbGUiLCJvbkNsaWNrIiwiX19maWxlIiwiU2UiLCJFZSIsIk1lIiwiVGUiLCJOZSIsIkRlIiwiT2UiLCJQZSIsIlZlIiwiSWUiLCJBZSIsIkJlIiwiTGUiLCJ6ZSIsIkZlIiwiJGUiLCJSZSIsInJhbmRvbSIsIkhlIiwiV2UiLCJqZSIsIktlIiwiWWUiLCJxZSIsIiRFTEVNRU5UIiwiVWUiLCJHZSIsIlhlIiwiUWUiLCJaZSIsIkplIiwiZXQiLCJ0dCIsImV4Y2x1ZGVMaXN0ZW5lcnMiLCJleGNsdWRlS2V5cyIsImx0IiwiYXQiLCJudCIsIm90IiwiaXQiLCJydCIsInN0IiwidXQiLCJkdCIsImN0IiwicHQiLCJodCIsInZpc2liaWxpdHkiLCJ2dCIsInN1cGVyIiwiZnQiLCJ0YWIiLCJiYWNrc3BhY2UiLCJndCIsImJ0IiwicXVlcnlTZWxlY3RvckFsbCIsInl0IiwidGFiSW5kZXgiLCJnZXRBdHRyaWJ1dGUiLCJocmVmIiwicmVsIiwia3QiLCJ4dCIsIklnbm9yZVV0aWxGb2N1c0NoYW5nZXMiLCJmb2N1cyIsIkN0IiwiZm9jdXNGaXJzdERlc2NlbmRhbnQiLCJmb2N1c0xhc3REZXNjZW5kYW50Iiwid3QiLCJjb2RlIiwiaGFuZGxlQ2xvc2UiLCJfdCIsIlN0IiwiRXQiLCJwb3BwZXJSZWYiLCJkb2N1bWVudEhhbmRsZXIiLCJNdCIsImJpbmRpbmdGbiIsIlR0IiwiY2xlYXJJbnRlcnZhbCIsInNldEludGVydmFsIiwiTnQiLCJEdCIsIk90Iiwib25tb3VzZXdoZWVsIiwiUHQiLCJWdCIsInZhbGlkYXRpbmciLCJJdCIsIkF0IiwienQiLCJtb2RlbCIsImxhYmVsUG9zaXRpb24iLCJsYWJlbFdpZHRoIiwibGFiZWxTdWZmaXgiLCJpbmxpbmUiLCJpbmxpbmVNZXNzYWdlIiwic3RhdHVzSWNvbiIsInNob3dNZXNzYWdlIiwidmFsaWRhdGVPblJ1bGVDaGFuZ2UiLCJoaWRlUmVxdWlyZWRBc3RlcmlzayIsInJlbW92ZVZhbGlkYXRlRXZlbnRzIiwiYWRkVmFsaWRhdGVFdmVudHMiLCJyZXNldEZpZWxkIiwid2FybiIsImNsZWFyVmFsaWRhdGUiLCJmb3JtTWl0dCIsInJlc2V0RmllbGRzIiwidmFsaWRhdGVGaWVsZCIsImF1dG9MYWJlbFdpZHRoIiwicmVnaXN0ZXJMYWJlbFdpZHRoIiwiZGVyZWdpc3RlckxhYmVsV2lkdGgiLCJGdCIsIiR0IiwiUnQiLCJwYWRkaW5nU2l6ZSIsImJvcmRlclNpemUiLCJjb250ZXh0U3R5bGUiLCJnZXRQcm9wZXJ0eVZhbHVlIiwibWluSGVpZ2h0IiwiSHQiLCJzdWZmaXgiLCJwcmVmaXgiLCJXdCIsImF1dG9zaXplIiwiYXV0b2NvbXBsZXRlIiwiZm9ybSIsImNsZWFyYWJsZSIsInNob3dQYXNzd29yZCIsInNob3dXb3JkTGltaXQiLCJzdWZmaXhJY29uIiwicHJlZml4SWNvbiIsImxhYmVsIiwidGFiaW5kZXgiLCJ2YWxpZGF0ZUV2ZW50IiwiQyIsIkUiLCJ2YWxpZGF0ZVN0YXRlIiwiVCIsIk4iLCJPIiwibWF4bGVuZ3RoIiwiUCIsIlYiLCJJIiwiQiIsIm1pblJvd3MiLCJtYXhSb3dzIiwiRiIsIlIiLCJmb3JtSXRlbU1pdHQiLCJpbnB1dCIsInRleHRhcmVhIiwiaW5wdXRTaXplIiwidmFsaWRhdGVJY29uIiwidGV4dGFyZWFTdHlsZSIsImlucHV0RGlzYWJsZWQiLCJzaG93Q2xlYXIiLCJzaG93UHdkVmlzaWJsZSIsImlzV29yZExpbWl0VmlzaWJsZSIsInVwcGVyTGltaXQiLCJ0ZXh0TGVuZ3RoIiwiaG92ZXJpbmciLCJpbnB1dEV4Y2VlZCIsInBhc3N3b3JkVmlzaWJsZSIsImlucHV0T3JUZXh0YXJlYSIsImhhbmRsZUlucHV0IiwiaGFuZGxlQ2hhbmdlIiwiaGFuZGxlRm9jdXMiLCJoYW5kbGVCbHVyIiwiaGFuZGxlQ29tcG9zaXRpb25TdGFydCIsImhhbmRsZUNvbXBvc2l0aW9uVXBkYXRlIiwiaGFuZGxlQ29tcG9zaXRpb25FbmQiLCJoYW5kbGVQYXNzd29yZFZpc2libGUiLCJibHVyIiwiZ2V0U3VmZml4VmlzaWJsZSIsIm9uTW91c2VMZWF2ZSIsIm9uTW91c2VFbnRlciIsImhhbmRsZUtleWRvd24iLCJqdCIsIkt0IiwiWXQiLCJxdCIsIlV0IiwiR3QiLCJYdCIsIlF0IiwiYXBwZW5kIiwib25Nb3VzZWVudGVyIiwib25Nb3VzZWxlYXZlIiwib25Db21wb3NpdGlvbnN0YXJ0Iiwib25Db21wb3NpdGlvbnVwZGF0ZSIsIm9uQ29tcG9zaXRpb25lbmQiLCJvbklucHV0Iiwib25Gb2N1cyIsIm9uQmx1ciIsIm9uQ2hhbmdlIiwib25LZXlkb3duIiwib25Nb3VzZWRvd24iLCJadCIsIl9fcmVzaXplTGlzdGVuZXJzX18iLCJKdCIsIl9fcm9fXyIsInRsIiwidmVydGljYWwiLCJzY3JvbGxTaXplIiwiY2xpZW50IiwiaG9yaXpvbnRhbCIsImxsIiwiYmFyIiwibXNUcmFuc2Zvcm0iLCJhbCIsIm9uc2VsZWN0c3RhcnQiLCJubCIsIkJhciIsIm5hdGl2ZSIsIndyYXBTdHlsZSIsIndyYXBDbGFzcyIsInZpZXdDbGFzcyIsInZpZXdTdHlsZSIsIm5vcmVzaXplIiwibWFyZ2luUmlnaHQiLCJtYXJnaW5Cb3R0b20iLCJtb3ZlWCIsIm1vdmVZIiwic2l6ZVdpZHRoIiwic2l6ZUhlaWdodCIsImd1dHRlciIsImhhbmRsZVNjcm9sbCIsIm9sIiwiaWwiLCJybCIsInNsIiwib25TY3JvbGwiLCJURVhUIiwiQ0xBU1MiLCJTVFlMRSIsIlBST1BTIiwiRlVMTF9QUk9QUyIsIkhZRFJBVEVfRVZFTlRTIiwiU1RBQkxFX0ZSQUdNRU5UIiwiS0VZRURfRlJBR01FTlQiLCJVTktFWUVEX0ZSQUdNRU5UIiwiTkVFRF9QQVRDSCIsIkRZTkFNSUNfU0xPVFMiLCJIT0lTVEVEIiwiQkFJTCIsInVsIiwiZGwiLCJjbCIsInBsIiwiZ2wiLCJkb09uTW9kYWxDbGljayIsImhsIiwidmwiLCJtbCIsIm1vZGFsRG9tIiwiZmwiLCJtb2RhbEZhZGUiLCJ6SW5kZXgiLCJkZXJlZ2lzdGVyIiwibmV4dFpJbmRleCIsIm1vZGFsU3RhY2siLCJjbG9zZU9uQ2xpY2tNb2RhbCIsIm9wZW5Nb2RhbCIsIm1vZGFsQ2xhc3MiLCJjbG9zZU1vZGFsIiwiYmwiLCJhcnJvd09mZnNldCIsInlsIiwiY2xvc2VPblByZXNzRXNjYXBlIiwiaGFuZGxlQWN0aW9uIiwiREFSSyIsIkxJR0hUIiwia2wiLCJhcHBlbmRUb0JvZHkiLCJib3VuZGFyaWVzUGFkZGluZyIsImNsb3NlRGVsYXkiLCJjdXRvZmYiLCJlbnRlcmFibGUiLCJoaWRlQWZ0ZXIiLCJtYW51YWxNb2RlIiwic2hvd0FmdGVyIiwicG9wcGVyQ2xhc3MiLCJwdXJlIiwicG9wcGVyT3B0aW9ucyIsInNob3dBcnJvdyIsInN0b3BQb3BwZXJNb3VzZUV2ZW50IiwiQ2wiLCJkb0Rlc3Ryb3kiLCJzaG93IiwiaGlkZSIsIm9uUG9wcGVyTW91c2VFbnRlciIsIm9uUG9wcGVyTW91c2VMZWF2ZSIsImluaXRpYWxpemVQb3BwZXIiLCJpc01hbnVhbE1vZGUiLCJhcnJvd1JlZiIsImV2ZW50cyIsInBvcHBlcklkIiwicG9wcGVySW5zdGFuY2UiLCJwb3BwZXJTdHlsZSIsInRyaWdnZXJSZWYiLCJ4bCIsIm9uTW91c2VEb3duIiwib25Nb3VzZVVwIiwid2wiLCJfbCIsIlNsIiwiYXJpYURlc2NyaWJlZGJ5IiwiRWwiLCJFbFBvcHBlciIsIkVsSW5wdXQiLCJFbFNjcm9sbGJhciIsImNsaWNrb3V0c2lkZSIsInZhbHVlS2V5IiwiZmV0Y2hTdWdnZXN0aW9ucyIsInRyaWdnZXJPbkZvY3VzIiwic2VsZWN0V2hlblVubWF0Y2hlZCIsImhpZGVMb2FkaW5nIiwicG9wcGVyQXBwZW5kVG9Cb2R5IiwiaGlnaGxpZ2h0Rmlyc3RJdGVtIiwic3VnZ2VzdGlvbnMiLCJoaWdobGlnaHRlZEluZGV4IiwiZHJvcGRvd25XaWR0aCIsInN1Z2dlc3Rpb25EaXNhYmxlZCIsImxvYWRpbmciLCJpbnB1dFJlZiIsInJlZ2lvblJlZiIsInN1Z2dlc3Rpb25WaXNpYmxlIiwic3VnZ2VzdGlvbkxvYWRpbmciLCJnZXREYXRhIiwiaGFuZGxlQ2xlYXIiLCJoYW5kbGVLZXlFbnRlciIsImhpZ2hsaWdodCIsIk1sIiwiVGwiLCJvbkNsZWFyIiwib3V0bGluZSIsImhpZ2hsaWdodGVkIiwiTmwiLCJzaGFwZSIsImljb24iLCJzcmMiLCJzcmNTZXQiLCJmaXQiLCJsaW5lSGVpZ2h0Iiwib2JqZWN0Rml0IiwiaGFzTG9hZEVycm9yIiwiYXZhdGFyQ2xhc3MiLCJzaXplU3R5bGUiLCJmaXRTdHlsZSIsInNyY3NldCIsIm9uRXJyb3IiLCJEbCIsInBvdyIsIk9sIiwidmlzaWJpbGl0eUhlaWdodCIsInN0eWxlQm90dG9tIiwic3R5bGVSaWdodCIsImhhbmRsZUNsaWNrIiwiUGwiLCJWbCIsImlzRG90IiwiaGlkZGVuIiwiSWwiLCJBbCIsInNlcGFyYXRvciIsInNlcGFyYXRvckNsYXNzIiwiYnJlYWRjcnVtYiIsIkJsIiwiTGwiLCIkcm91dGVyIiwibGluayIsInpsIiwiRmwiLCIkbCIsIm5hdGl2ZVR5cGUiLCJwbGFpbiIsImF1dG9mb2N1cyIsImNpcmNsZSIsImJ1dHRvblNpemUiLCJidXR0b25EaXNhYmxlZCIsIlJsIiwiSGwiLCJXbCIsImpsIiwiS2wiLCJjb2xvcnBpY2tlciIsImNvbmZpcm0iLCJkYXRlcGlja2VyIiwidG9kYXkiLCJzZWxlY3REYXRlIiwic2VsZWN0VGltZSIsInN0YXJ0RGF0ZSIsInN0YXJ0VGltZSIsImVuZERhdGUiLCJlbmRUaW1lIiwicHJldlllYXIiLCJuZXh0WWVhciIsInByZXZNb250aCIsIm5leHRNb250aCIsIm1vbnRoMSIsIm1vbnRoMiIsIm1vbnRoMyIsIm1vbnRoNCIsIm1vbnRoNSIsIm1vbnRoNiIsIm1vbnRoNyIsIm1vbnRoOCIsIm1vbnRoOSIsIm1vbnRoMTAiLCJtb250aDExIiwibW9udGgxMiIsInN1biIsIm1vbiIsInR1ZSIsIndlZCIsInRodSIsImZyaSIsInNhdCIsImphbiIsImZlYiIsIm1hciIsImFwciIsIm1heSIsImp1biIsImp1bCIsImF1ZyIsInNlcCIsIm9jdCIsIm5vdiIsImRlYyIsIm5vTWF0Y2giLCJub0RhdGEiLCJjYXNjYWRlciIsInBhZ2luYXRpb24iLCJnb3RvIiwicGFnZXNpemUiLCJwYWdlQ2xhc3NpZmllciIsIm1lc3NhZ2Vib3giLCJ1cGxvYWQiLCJkZWxldGVUaXAiLCJwcmV2aWV3IiwiY29udGludWUiLCJ0YWJsZSIsImVtcHR5VGV4dCIsImNvbmZpcm1GaWx0ZXIiLCJyZXNldEZpbHRlciIsImNsZWFyRmlsdGVyIiwic3VtVGV4dCIsInRyZWUiLCJ0cmFuc2ZlciIsInRpdGxlcyIsImZpbHRlclBsYWNlaG9sZGVyIiwibm9DaGVja2VkRm9ybWF0IiwiaGFzQ2hlY2tlZEZvcm1hdCIsImltYWdlIiwicGFnZUhlYWRlciIsInBvcGNvbmZpcm0iLCJjb25maXJtQnV0dG9uVGV4dCIsImNhbmNlbEJ1dHRvblRleHQiLCJZbCIsInFsIiwiVWwiLCJkYXRldGltZSIsIm1vbnRocmFuZ2UiLCJkYXRlcmFuZ2UiLCJkYXRldGltZXJhbmdlIiwiR2wiLCJjbGVhckljb24iLCJlZGl0YWJsZSIsInJhbmdlU2VwYXJhdG9yIiwic3RhcnRQbGFjZWhvbGRlciIsImVuZFBsYWNlaG9sZGVyIiwiZGVmYXVsdFRpbWUiLCJpc1JhbmdlIiwiZGlzYWJsZWRIb3VycyIsImRpc2FibGVkTWludXRlcyIsImRpc2FibGVkU2Vjb25kcyIsImRpc2FibGVkRGF0ZSIsImNlbGxDbGFzc05hbWUiLCJzaG9ydGN1dHMiLCJhcnJvd0NvbnRyb2wiLCJYbCIsIlFsIiwiWmwiLCJnZXREZWZhdWx0VmFsdWUiLCJnZXRSYW5nZUF2YWxpYWJsZVRpbWUiLCJwYW5lbFJlYWR5IiwicGFyc2VVc2VySW5wdXQiLCJmb3JtYXRUb1N0cmluZyIsImlzVmFsaWRWYWx1ZSIsImlzRGF0ZXNQaWNrZXIiLCJoYW5kbGVFbmRDaGFuZ2UiLCJoYW5kbGVTdGFydENoYW5nZSIsImhhbmRsZVN0YXJ0SW5wdXQiLCJoYW5kbGVFbmRJbnB1dCIsIm9uVXNlcklucHV0Iiwib25DbGlja091dHNpZGUiLCJwaWNrZXJTaXplIiwiaXNSYW5nZUlucHV0Iiwib25DbGVhckljb25DbGljayIsInNob3dDbG9zZSIsInRyaWdnZXJDbGFzcyIsIm9uUGljayIsInBpY2tlclZpc2libGUiLCJwaWNrZXJBY3R1YWxWaXNpYmxlIiwiZGlzcGxheVZhbHVlIiwicGFyc2VkVmFsdWUiLCJzZXRTZWxlY3Rpb25SYW5nZSIsInJlZkNvbnRhaW5lciIsInBpY2tlckRpc2FibGVkIiwib25TZXRQaWNrZXJPcHRpb24iLCJKbCIsIm9uU2VsZWN0UmFuZ2UiLCJlYSIsInRhIiwibGEiLCJnZXRIb3Vyc0xpc3QiLCJnZXRNaW51dGVzTGlzdCIsImdldFNlY29uZHNMaXN0IiwiYWEiLCJnZXRBdmFsaWFibGVIb3VycyIsImdldEF2YWxpYWJsZU1pbnV0ZXMiLCJnZXRBdmFsaWFibGVTZWNvbmRzIiwibmEiLCJyZXBlYXRDbGljayIsInNwaW5uZXJEYXRlIiwic2hvd1NlY29uZHMiLCJhbVBtTW9kZSIsImhvdXIiLCJtaW51dGUiLCJzZWNvbmQiLCJvbnNjcm9sbCIsImdldFJlZklkIiwic3Bpbm5lckl0ZW1zIiwiY3VycmVudFNjcm9sbGJhciIsImhvdXJzTGlzdCIsIm1pbnV0ZXNMaXN0IiwiYXJyb3dIb3VyTGlzdCIsImFycm93TWludXRlTGlzdCIsImFycm93U2Vjb25kTGlzdCIsImdldEFtUG1GbGFnIiwiZW1pdFNlbGVjdFJhbmdlIiwiYWRqdXN0Q3VycmVudFNwaW5uZXIiLCJ0eXBlSXRlbUhlaWdodCIsImxpc3RIb3Vyc1JlZiIsImxpc3RNaW51dGVzUmVmIiwibGlzdFNlY29uZHNSZWYiLCJvbkluY3JlYXNlQ2xpY2siLCJvbkRlY3JlYXNlQ2xpY2siLCJzZWNvbmRzTGlzdCIsInRpbWVQYXJ0c01hcCIsImFycm93TGlzdE1hcCIsImxpc3RNYXAiLCJvYSIsImlhIiwicmEiLCJvbk1vdXNlbW92ZSIsInNhIiwiVGltZVNwaW5uZXIiLCJhY3R1YWxWaXNpYmxlIiwiZGF0ZXRpbWVSb2xlIiwic3RhcnRfZW1pdFNlbGVjdFJhbmdlIiwibWluX3Njcm9sbERvd24iLCJ0cmFuc2l0aW9uTmFtZSIsIm9uU2V0T3B0aW9uIiwiaGFuZGxlQ29uZmlybSIsIm1pbGxpc2Vjb25kIiwiaGFuZGxlQ2FuY2VsIiwidWEiLCJjYSIsInBhIiwiZW5kX2VtaXRTZWxlY3RSYW5nZSIsInNldE1heFNlbGVjdGlvblJhbmdlIiwic2V0TWluU2VsZWN0aW9uUmFuZ2UiLCJidG5Db25maXJtRGlzYWJsZWQiLCJtaW5EYXRlIiwibWF4RGF0ZSIsImhhbmRsZU1pbkNoYW5nZSIsImhhbmRsZU1heENoYW5nZSIsIm1pblNlbGVjdGFibGVSYW5nZSIsIm1heFNlbGVjdGFibGVSYW5nZSIsImRpc2FibGVkSG91cnNfIiwiZGlzYWJsZWRNaW51dGVzXyIsImRpc2FibGVkU2Vjb25kc18iLCJoYSIsInZhIiwibWEiLCJmYSIsImdhIiwiYmEiLCJ5YSIsImthIiwiQ2EiLCJ4YSIsIndhIiwic2VsZWN0ZWREYXkiLCJoaWRlSGVhZGVyIiwiaXNJblJhbmdlIiwid2Vla0RheXMiLCJyb3dzIiwiZ2V0Q2VsbENsYXNzIiwicGlja0RheSIsImdldFNsb3REYXRhIiwiaXNTZWxlY3RlZCIsIlNhIiwiRWEiLCJjZWxsc3BhY2luZyIsImNlbGxwYWRkaW5nIiwiTWEiLCJEYXRlVGFibGUiLCJFbEJ1dHRvbiIsIkVsQnV0dG9uR3JvdXAiLCJjdXJNb250aERhdGVQcmVmaXgiLCJpMThuRGF0ZSIsInJlYWxTZWxlY3RlZERheSIsInZhbGlkYXRlZFJhbmdlIiwiVGEiLCJOYSIsIkRhIiwiT2EiLCJQYSIsIlZhIiwiZGF0ZUNlbGwiLCJJYSIsImhlYWRlciIsImJvZHlTdHlsZSIsInNoYWRvdyIsIkFhIiwiQmEiLCJpbml0aWFsSW5kZXgiLCJhdXRvcGxheSIsImludGVydmFsIiwiaW5kaWNhdG9yUG9zaXRpb24iLCJpbmRpY2F0b3IiLCJsb29wIiwiYWN0aXZlSW5kZXgiLCJjb250YWluZXJXaWR0aCIsInRpbWVyIiwiaG92ZXIiLCJ0cmFuc2xhdGVJdGVtIiwiaXRlbXMiLCJ1cGRhdGVJdGVtcyIsInNldEFjdGl2ZUl0ZW0iLCJhcnJvd0Rpc3BsYXkiLCJjYXJvdXNlbENsYXNzZXMiLCJpbmRpY2F0b3JzQ2xhc3NlcyIsImhhc0xhYmVsIiwiaGFuZGxlTW91c2VFbnRlciIsImhhbmRsZU1vdXNlTGVhdmUiLCJoYW5kbGVJbmRpY2F0b3JDbGljayIsInRocm90dGxlZEFycm93Q2xpY2siLCJ0aHJvdHRsZWRJbmRpY2F0b3JIb3ZlciIsImhhbmRsZUJ1dHRvbkVudGVyIiwiaW5TdGFnZSIsImhhbmRsZUJ1dHRvbkxlYXZlIiwiTGEiLCJ6YSIsIkZhIiwiJGEiLCJSYSIsInRyYW5zbGF0ZSIsInNjYWxlIiwicmVhZHkiLCJhbmltYXRpbmciLCJpdGVtU3R5bGUiLCJoYW5kbGVJdGVtQ2xpY2siLCJIYSIsIldhIiwiaXNHcm91cCIsImNoZWNrYm94R3JvdXAiLCJlbEZvcm0iLCJFTEVNRU5UIiwiZWxGb3JtSXRlbVNpemUiLCJlbEZvcm1JdGVtIiwiamEiLCJpc0xpbWl0RXhjZWVkZWQiLCJjaGFuZ2VFdmVudCIsImlzQ2hlY2tlZCIsImNoZWNrYm94U2l6ZSIsImNoZWNrYm94R3JvdXBTaXplIiwidHJ1ZUxhYmVsIiwiaXNEaXNhYmxlZCIsImlzTGltaXREaXNhYmxlZCIsImZhbHNlTGFiZWwiLCJLYSIsImluZGV0ZXJtaW5hdGUiLCJjb250cm9scyIsImJvcmRlciIsIllhIiwicWEiLCJVYSIsInJhZGlvR3JvdXAiLCJHYSIsIlhhIiwiY29tcG9uZW50TmFtZSIsInJhZGlvR3JvdXBTaXplIiwicmFkaW9TaXplIiwicmFkaW9SZWYiLCJRYSIsIlphIiwiQ0xJQ0siLCJIT1ZFUiIsIkphIiwiRWxDaGVja2JveCIsIkVsUmFkaW8iLCJOb2RlQ29udGVudCIsInBhbmVsIiwicmVuZGVyTGFiZWxGbiIsIm1lbnVJZCIsImlzSG92ZXJNZW51IiwibXVsdGlwbGUiLCJjaGVja1N0cmljdGx5IiwiY2hlY2tlZE5vZGVzIiwiaXNMZWFmIiwiZXhwYW5kaW5nTm9kZSIsImxldmVsIiwicGF0aE5vZGVzIiwiZXhwYW5kTm9kZSIsImxhenlMb2FkIiwiaGFuZGxlQ2hlY2tDaGFuZ2UiLCJjaGVja2VkTm9kZUlkIiwiZXhwYW5kYWJsZSIsImluRXhwYW5kaW5nUGF0aCIsImluQ2hlY2tlZFBhdGgiLCJoYW5kbGVIb3ZlckV4cGFuZCIsImhhbmRsZUV4cGFuZCIsImhhbmRsZUNoZWNrIiwidG4iLCJsbiIsImFuIiwibm4iLCJFbENhc2NhZGVyTm9kZSIsIm5vZGVzIiwiaG92ZXJab25lIiwiaXNFbXB0eSIsImhhbmRsZU1vdXNlTW92ZSIsImNsaWVudFgiLCJob3ZlclRocmVzaG9sZCIsImNsZWFySG92ZXJab25lIiwicm4iLCJzbiIsIm9uRXhwYW5kIiwidW4iLCJkbiIsInBhdGhWYWx1ZXMiLCJwYXRoTGFiZWxzIiwiY2hpbGRyZW5EYXRhIiwibGVhZiIsImVtaXRQYXRoIiwiYnJvYWRjYXN0Iiwic2V0Q2hlY2tTdGF0ZSIsImNuIiwicG4iLCJhbGxOb2RlcyIsImxlYWZOb2RlcyIsImFwcGVuZE5vZGUiLCJnZXRGbGF0dGVkTm9kZXMiLCJobiIsInZuIiwibW4iLCJleHBhbmRUcmlnZ2VyIiwiZ24iLCJibiIsImNsaWNrIiwieW4iLCJFbENhc2NhZGVyTWVudSIsInJlbmRlckxhYmVsIiwiYXBwZW5kTm9kZXMiLCJkb0NoZWNrIiwidmFsdWVCeU9wdGlvbiIsImdldE5vZGVCeVZhbHVlIiwiZ2V0U2FtZU5vZGUiLCJnZXROb2RlcyIsIm1lbnVMaXN0IiwibWVudXMiLCJoYW5kbGVLZXlEb3duIiwiZ2V0Q2hlY2tlZE5vZGVzIiwiY2xlYXJDaGVja2VkTm9kZXMiLCJjYWxjdWxhdGVDaGVja2VkVmFsdWUiLCJzY3JvbGxUb0V4cGFuZGluZ05vZGUiLCJrbiIsImhpdCIsImRpc2FibGVUcmFuc2l0aW9ucyIsImNvbG9yIiwidGFnU2l6ZSIsImNsYXNzZXMiLCJiYWNrZ3JvdW5kQ29sb3IiLCJDbiIsIm1lZGl1bSIsInNtYWxsIiwibWluaSIsInhuIiwid24iLCJFbENhc2NhZGVyUGFuZWwiLCJFbFRhZyIsIkNsaWNrb3V0c2lkZSIsImZpbHRlcmFibGUiLCJmaWx0ZXJNZXRob2QiLCJzaG93QWxsTGV2ZWxzIiwiY29sbGFwc2VUYWdzIiwiYmVmb3JlRmlsdGVyIiwiY2FsY1RleHQiLCJoaXRTdGF0ZSIsIlciLCJtaW5XaWR0aCIsInRhZ1dyYXBwZXIiLCJzdWdnZXN0aW9uUGFuZWwiLCJwb3BwZXJWaXNpYmxlIiwiaW5wdXRIb3ZlciIsImZpbHRlcmluZyIsInByZXNlbnRUZXh0IiwiY2hlY2tlZFZhbHVlIiwiaW5wdXRWYWx1ZSIsInNlYXJjaElucHV0VmFsdWUiLCJwcmVzZW50VGFncyIsInJlYWxTaXplIiwiY2xlYXJCdG5WaXNpYmxlIiwidG9nZ2xlUG9wcGVyVmlzaWJsZSIsImhpZGVTdWdnZXN0aW9uUGFuZWwiLCJkZWxldGVUYWciLCJmb2N1c0ZpcnN0Tm9kZSIsImhhbmRsZUV4cGFuZENoYW5nZSIsImhhbmRsZVN1Z2dlc3Rpb25DbGljayIsImhhbmRsZURlbGV0ZSIsImlzQ29tcG9zaW5nIiwiU24iLCJFbiIsIm1vZGVsTW9kaWZpZXJzIiwib25DbG9zZSIsIm9uRXhwYW5kQ2hhbmdlIiwiTW4iLCJhY3RpdmVTdHlsZSIsImZpbGwiLCJib3JkZXJDb2xvciIsInRleHRDb2xvciIsImJveFNoYWRvdyIsIlRuIiwiTm4iLCJEbiIsInNwYW4iLCJwdWxsIiwieHMiLCJzbSIsIm1kIiwibGciLCJwYWRkaW5nTGVmdCIsInBhZGRpbmdSaWdodCIsIk9uIiwiYWNjb3JkaW9uIiwiYWN0aXZlTmFtZXMiLCJjb2xsYXBzZU1pdHQiLCJzZXRBY3RpdmVOYW1lcyIsIlBuIiwiVm4iLCJkYXRhc2V0Iiwib2xkUGFkZGluZ1RvcCIsInBhZGRpbmdUb3AiLCJvbGRQYWRkaW5nQm90dG9tIiwicGFkZGluZ0JvdHRvbSIsIm9sZE92ZXJmbG93IiwiSW4iLCJFbENvbGxhcHNlVHJhbnNpdGlvbiIsImNvbnRlbnRXcmFwU3R5bGUiLCJjb250ZW50SGVpZ2h0IiwiZm9jdXNpbmciLCJpc0NsaWNrIiwiaGFuZGxlSGVhZGVyQ2xpY2siLCJoYW5kbGVFbnRlckNsaWNrIiwiY29sbGFwc2UiLCJBbiIsIm9uS2V5dXAiLCJCbiIsIkxuIiwiem4iLCIxMCIsIjExIiwiMTIiLCIxMyIsIjE0IiwiMTUiLCJGbiIsIiRuIiwiUm4iLCJIbiIsIlduIiwiX2h1ZSIsIl9zYXR1cmF0aW9uIiwiX2FscGhhIiwiZW5hYmxlQWxwaGEiLCJkb09uQ2hhbmdlIiwiam4iLCJLbiIsIlluIiwiZHJhZyIsInFuIiwiaHVlIiwiY2xpZW50WSIsInNhdHVyYXRpb24iLCJjdXJzb3JUb3AiLCJjdXJzb3JMZWZ0IiwiYmFja2dyb3VuZCIsImNvbG9yVmFsdWUiLCJoYW5kbGVEcmFnIiwiVW4iLCJHbiIsIlhuIiwiUW4iLCJ0aHVtYiIsInRodW1iTGVmdCIsInRodW1iVG9wIiwiaHVlVmFsdWUiLCJabiIsInRvUmdiIiwiSm4iLCJjb2xvcnMiLCJjdXJyZW50Q29sb3IiLCJhbyIsImZyb21TdHJpbmciLCJzZWxlY3RlZCIsImNvbXBhcmUiLCJyZ2JhQ29sb3JzIiwiaGFuZGxlU2VsZWN0IiwiZW8iLCJsbyIsIm5vIiwiU3ZQYW5lbCIsIkh1ZVNsaWRlciIsIkFscGhhU2xpZGVyIiwiUHJlZGVmaW5lIiwiQ2xpY2tPdXRzaWRlIiwic2hvd0FscGhhIiwiY29sb3JGb3JtYXQiLCJwcmVkZWZpbmUiLCJjaGFuZ2UiLCJjb2xvckRpc2FibGVkIiwiY29sb3JTaXplIiwiZGlzcGxheWVkQ29sb3IiLCJzaG93UGFuZWxDb2xvciIsInNob3dQaWNrZXIiLCJjdXN0b21JbnB1dCIsImhhbmRsZVRyaWdnZXIiLCJjb25maXJtVmFsdWUiLCJzdlBhbmVsIiwiYWxwaGEiLCJvbyIsImlvIiwicm8iLCJzbyIsInVvIiwiY28iLCJwbyIsImhvIiwic2VsZWN0aW9uTW9kZSIsInNob3dXZWVrTnVtYmVyIiwicmFuZ2VTdGF0ZSIsInNlbGVjdGluZyIsInJvdyIsImNvbHVtbiIsImluUmFuZ2UiLCJjdXN0b21DbGFzcyIsInJvd0luZGV4IiwiY2VsbEluZGV4IiwiaXNXZWVrQWN0aXZlIiwiZ2V0Q2VsbENsYXNzZXMiLCJXRUVLUyIsInZvIiwibW8iLCJoYW5kbGVNb250aFRhYmxlQ2xpY2siLCJnZXRDZWxsU3R5bGUiLCJmbyIsImdvIiwic3RhcnRZZWFyIiwiaGFuZGxlWWVhclRhYmxlQ2xpY2siLCJpbm5lclRleHQiLCJibyIsInlvIiwia28iLCJDbyIsInhvIiwid28iLCJfbyIsIlNvIiwiRW8iLCJNbyIsIlRvIiwiTm8iLCJUaW1lUGlja1BhbmVsIiwiTW9udGhUYWJsZSIsIlllYXJUYWJsZSIsIjM4IiwiNDAiLCIzNyIsIjM5Iiwic2V0RnVsbFllYXIiLCJzZXRNb250aCIsInNldERhdGUiLCJrZXlDb2RlIiwiaGFuZGxlVGltZVBpY2siLCJoYW5kbGVUaW1lUGlja0Nsb3NlIiwib25UaW1lUGlja2VySW5wdXRGb2N1cyIsInRpbWVQaWNrZXJWaXNpYmxlIiwidmlzaWJsZVRpbWUiLCJ2aXNpYmxlRGF0ZSIsInNob3dUaW1lIiwiY2hhbmdlVG9Ob3ciLCJvbkNvbmZpcm0iLCJmb290ZXJWaXNpYmxlIiwiaGFuZGxlWWVhclBpY2siLCJzaG93TW9udGhQaWNrZXIiLCJzaG93WWVhclBpY2tlciIsImhhbmRsZU1vbnRoUGljayIsImhhc1Nob3J0Y3V0cyIsImhhbmRsZVNob3J0Y3V0Q2xpY2siLCJwcmV2WWVhcl8iLCJuZXh0WWVhcl8iLCJwcmV2TW9udGhfIiwibmV4dE1vbnRoXyIsImlubmVyRGF0ZSIsInllYXJMYWJlbCIsImN1cnJlbnRWaWV3IiwiaGFuZGxlRGF0ZVBpY2siLCJoYW5kbGVWaXNpYmxlVGltZUNoYW5nZSIsImhhbmRsZVZpc2libGVEYXRlQ2hhbmdlIiwidGltZUZvcm1hdCIsInVzZXJJbnB1dFRpbWUiLCJ1c2VySW5wdXREYXRlIiwiT28iLCJQbyIsIlZvIiwiSW8iLCJBbyIsIkJvIiwiTG8iLCJ6byIsInNpZGViYXIiLCJGbyIsInVubGlua1BhbmVscyIsIm1pblRpbWVQaWNrZXJWaXNpYmxlIiwibWF4VGltZVBpY2tlclZpc2libGUiLCJoYW5kbGVNaW5UaW1lQ2xvc2UiLCJoYW5kbGVNYXhUaW1lQ2xvc2UiLCJoYW5kbGVSYW5nZVBpY2siLCJvblNlbGVjdCIsImhhbmRsZUNoYW5nZVJhbmdlIiwiYnRuRGlzYWJsZWQiLCJlbmFibGVZZWFyQXJyb3ciLCJlbmFibGVNb250aEFycm93IiwicmlnaHRQcmV2TW9udGgiLCJyaWdodFByZXZZZWFyIiwicmlnaHROZXh0TW9udGgiLCJyaWdodE5leHRZZWFyIiwibGVmdFByZXZNb250aCIsImxlZnRQcmV2WWVhciIsImxlZnROZXh0TW9udGgiLCJsZWZ0TmV4dFllYXIiLCJsZWZ0TGFiZWwiLCJyaWdodExhYmVsIiwibGVmdERhdGUiLCJyaWdodERhdGUiLCJtaW5WaXNpYmxlRGF0ZSIsIm1heFZpc2libGVEYXRlIiwibWluVmlzaWJsZVRpbWUiLCJtYXhWaXNpYmxlVGltZSIsImhhbmRsZURhdGVJbnB1dCIsImhhbmRsZURhdGVDaGFuZ2UiLCJoYW5kbGVUaW1lSW5wdXQiLCJoYW5kbGVUaW1lQ2hhbmdlIiwiaGFuZGxlTWluVGltZVBpY2siLCJoYW5kbGVNYXhUaW1lUGljayIsIiRvIiwiUm8iLCJIbyIsIldvIiwiam8iLCJLbyIsIllvIiwicW8iLCJVbyIsIkdvIiwiWG8iLCJRbyIsIlpvIiwiSm8iLCJlaSIsInRpIiwib25DaGFuZ2VyYW5nZSIsImxpIiwiYWkiLCJuaSIsIm9pIiwiaWkiLCJyaSIsInNpIiwidWkiLCJkaSIsImNpIiwibWFzayIsIm92ZXJsYXlDbGFzcyIsInBpIiwiZnVsbHNjcmVlbiIsIm1hcmdpblRvcCIsIm9wZW5EZWxheSIsImJlZm9yZUNsb3NlIiwibG9ja1Njcm9sbCIsImFmdGVyRW50ZXIiLCJkZXN0cm95T25DbG9zZSIsIm9uTW9kYWxDbGljayIsImNsb3NlZCIsImRpYWxvZ1JlZiIsIm1vZGFsUmVmIiwiaGkiLCJUcmFwRm9jdXMiLCJtb2RhbCIsImVuZHNXaXRoIiwidmkiLCJtaSIsImZpIiwiZ2kiLCJiaSIsImZvb3RlciIsInlpIiwiY29udGVudFBvc2l0aW9uIiwia2kiLCJ3aXRoSGVhZGVyIiwiZHJhd2VyUmVmIiwiaXNIb3Jpem9udGFsIiwiQ2kiLCJ4aSIsIndpIiwiZHJvcGRvd25TaXplIiwiZWxEcm9wZG93biIsIl9lbERyb3Bkb3duU2l6ZSIsIkVpIiwic3BsaXRCdXR0b24iLCJoaWRlT25DbGljayIsInNob3dUaW1lb3V0IiwiaGlkZVRpbWVvdXQiLCJjb21tYW5kSGFuZGxlciIsInRyaWdnZXJFbG0iLCJyZXNldFRhYmluZGV4IiwiaGFuZGxlck1haW5CdXR0b25DbGljayIsInRyaWdnZXJWbm9kZSIsIk1pIiwiVGkiLCJOaSIsImNvbW1hbmQiLCJkaXZpZGVkIiwiRGkiLCJTaSIsImlubmVySGlkZSIsIk9pIiwiUGkiLCJpc0F1dG9XaWR0aCIsInVwZGF0ZUFsbCIsInVwZGF0ZUNvbXB1dGVkTGFiZWxXaWR0aCIsImZpcnN0RWxlbWVudENoaWxkIiwibWFyZ2luTGVmdCIsIlZpIiwiTGFiZWxXcmFwIiwidmFsaWRhdGVTdGF0dXMiLCJmb3IiLCJmb3JtSXRlbUNsYXNzIiwic2hvdWxkU2hvd0Vycm9yIiwibGFiZWxTdHlsZSIsImNvbnRlbnRTdHlsZSIsInZhbGlkYXRlTWVzc2FnZSIsImxhYmVsRm9yIiwiSWkiLCJBaSIsIkJpIiwiQ09OVEFJTiIsIk9SSUdJTkFMIiwiTGkiLCJ6aSIsInVybExpc3QiLCJvblN3aXRjaCIsImRlZyIsIm9mZnNldFgiLCJvZmZzZXRZIiwiZW5hYmxlVHJhbnNpdGlvbiIsIm1heFdpZHRoIiwibWF4SGVpZ2h0Iiwiem9vbVJhdGUiLCJyb3RhdGVEZWciLCJ0b0ZpeGVkIiwid3JhcHBlciIsImltZyIsImluZmluaXRlIiwiaXNTaW5nbGUiLCJpc0ZpcnN0IiwiaXNMYXN0IiwiY3VycmVudEltZyIsImltZ1N0eWxlIiwiaGFuZGxlQWN0aW9ucyIsInRvZ2dsZU1vZGUiLCJoYW5kbGVJbWdMb2FkIiwiaGFuZGxlSW1nRXJyb3IiLCJoYW5kbGVNb3VzZURvd24iLCJwYWdlWCIsInBhZ2VZIiwiRmkiLCJSaSIsIkhpIiwiV2kiLCJqaSIsIktpIiwiWWkiLCJxaSIsIm9uTG9hZCIsIlVpIiwiR2kiLCJYaSIsImVyIiwidHIiLCJJbWFnZVZpZXdlciIsInNjcm9sbENvbnRhaW5lciIsInByZXZpZXdTcmNMaXN0IiwiSW1hZ2UiLCJvbmxvYWQiLCJvbmVycm9yIiwiaW5uZXJXaWR0aCIsImlubmVySGVpZ2h0Iiwic2hvd1ZpZXdlciIsImltZ1dpZHRoIiwiaW1nSGVpZ2h0IiwiaW1hZ2VTdHlsZSIsImFsaWduQ2VudGVyIiwiaW1hZ2VJbmRleCIsImNsaWNrSGFuZGxlciIsImNsb3NlVmlld2VyIiwibHIiLCJhciIsIm5yIiwidGhyb3ciLCJvciIsImlyIiwicnIiLCJzciIsInVyIiwiY29udGFpbmVyRWwiLCJsYXN0U2Nyb2xsVG9wIiwiZHIiLCJjciIsInByIiwiUmVwZWF0Q2xpY2siLCJzdGVwIiwic3RlcFN0cmljdGx5IiwiY29udHJvbHNQb3NpdGlvbiIsInByZWNpc2lvbiIsImN1cnJlbnRWYWx1ZSIsInVzZXJJbnB1dCIsImhhbmRsZUlucHV0Q2hhbmdlIiwiY29udHJvbHNBdFJpZ2h0IiwiZGVjcmVhc2UiLCJpbmNyZWFzZSIsImlucHV0TnVtYmVyU2l6ZSIsImlucHV0TnVtYmVyRGlzYWJsZWQiLCJtYXhEaXNhYmxlZCIsIm1pbkRpc2FibGVkIiwib25EcmFnc3RhcnQiLCJociIsInVuZGVybGluZSIsInZyIiwibXIiLCJzcGlubmVyIiwibG9jayIsImZyIiwiZnVsbHNjcmVlbkxvYWRpbmciLCJnciIsIm9yaWdpbmFsUG9zaXRpb24iLCJiciIsImdsb2JhbExvYWRpbmdPcHRpb24iLCJvcmlnaW5hbE92ZXJmbG93IiwidkxvYWRpbmdBZGRDbGFzc0xpc3QiLCJoYW5kbGVBZnRlckxlYXZlIiwidmlld0JveCIsImN4IiwiY3kiLCJ2bSIsInlyIiwia3IiLCIkbG9hZGluZyIsInNlcnZpY2UiLCJDciIsInhyIiwid3IiLCJkb21Ob2RlIiwic3ViSW5kZXgiLCJzdWJNZW51SXRlbXMiLCJhZGRMaXN0ZW5lcnMiLCJnb3RvU3ViSW5kZXgiLCJfciIsInN1Ym1lbnUiLCJTciIsIkVyIiwib3BhY2l0eSIsIlRyIiwiRWxNZW51Q29sbGFwc2VUcmFuc2l0aW9uIiwiZGVmYXVsdEFjdGl2ZSIsImRlZmF1bHRPcGVuZWRzIiwidW5pcXVlT3BlbmVkIiwicm91dGVyIiwibWVudVRyaWdnZXIiLCJhY3RpdmVUZXh0Q29sb3IiLCJjb2xsYXBzZVRyYW5zaXRpb24iLCJyZWQiLCJncmVlbiIsImJsdWUiLCJNciIsImluZGV4UGF0aCIsInJvdXRlIiwib3BlbmVkTWVudXMiLCJzdWJtZW51cyIsImhvdmVyQmFja2dyb3VuZCIsImlzTWVudVBvcHVwIiwiYWRkTWVudUl0ZW0iLCJyZW1vdmVNZW51SXRlbSIsImFkZFN1Yk1lbnUiLCJyZW1vdmVTdWJNZW51Iiwib3Blbk1lbnUiLCJjbG9zZU1lbnUiLCJyb290TWVudUVtaXQiLCJyb290TWVudU9uIiwib3BlbiIsIk5yIiwicGFyZW50TWVudSIsInBhZGRpbmdTdHlsZSIsIkRyIiwibWFudWFsIiwidmlzaWJsZUFycm93Iiwib25VcGRhdGVWaXNpYmxlIiwidXBkYXRlUG9wcGVyIiwiT3IiLCJFbFRvb2x0aXAiLCJib3JkZXJCb3R0b21Db2xvciIsInJvb3RNZW51IiwiUHIiLCJWciIsIklyIiwiaW5mbyIsIkFyIiwiZGFuZ2Vyb3VzbHlVc2VIVE1MU3RyaW5nIiwiY3VzdG9tU3R5bGUiLCJkZXN0cm95RWxlbWVudCIsInN0YXJ0VGltZXIiLCJrZXlkb3duIiwiQnIiLCJMciIsImNsZWFyVGltZXIiLCJ6ciIsIkZyIiwiJHIiLCJ2ZXJ0T2Zmc2V0IiwiUnIiLCJjbG9zZUFsbCIsIiRtZXNzYWdlIiwiSHIiLCJkaWFsb2dOb2RlIiwiZm9jdXNBZnRlckNsb3NlZCIsImZvY3VzRmlyc3QiLCJsYXN0Rm9jdXMiLCJnZXRFbGVtZW50QnlJZCIsInRyYXBGb2N1cyIsInJlbW92ZUxpc3RlbmVycyIsIldyIiwiS3IiLCJqciIsIllyIiwicXIiLCJtb2RhbEFwcGVuZFRvQm9keSIsImNsb3NlT25IYXNoQ2hhbmdlIiwicm91bmRCdXR0b24iLCJvcGVuZWQiLCJib2R5UGFkZGluZ1JpZ2h0IiwiY29tcHV0ZWRCb2R5UGFkZGluZ1JpZ2h0Iiwid2l0aG91dEhpZGRlbkNsYXNzIiwiZG9BZnRlckNsb3NlIiwidXBkYXRlQ2xvc2luZ0ZsYWciLCJyZXN0b3JlQm9keVN0eWxlIiwic2hvd0lucHV0IiwiaW5wdXRQbGFjZWhvbGRlciIsImlucHV0VHlwZSIsImlucHV0UGF0dGVybiIsImlucHV0VmFsaWRhdG9yIiwiaW5wdXRFcnJvck1lc3NhZ2UiLCJzaG93Q29uZmlybUJ1dHRvbiIsInNob3dDYW5jZWxCdXR0b24iLCJhY3Rpb24iLCJjb25maXJtQnV0dG9uTG9hZGluZyIsImNhbmNlbEJ1dHRvbkxvYWRpbmciLCJjb25maXJtQnV0dG9uQ2xhc3MiLCJjb25maXJtQnV0dG9uRGlzYWJsZWQiLCJjYW5jZWxCdXR0b25DbGFzcyIsImVkaXRvckVycm9yTWVzc2FnZSIsImlzT25Db21wb3NpdGlvbiIsImRpc3Rpbmd1aXNoQ2FuY2VsQW5kQ2xvc2UiLCJ0eXBlJCIsInZhbGlkYXRlRXJyb3IiLCJjbG9zZURpYWxvZyIsInNldHVwSW5zdGFsbCIsImRvQ2xvc2UiLCJoYXNNZXNzYWdlIiwiY29uZmlybUJ1dHRvbkNsYXNzZXMiLCJoYW5kbGVXcmFwcGVyQ2xpY2siLCJoYW5kbGVJbnB1dEVudGVyIiwiVXIiLCJHciIsIlhyIiwiUXIiLCJaciIsIkpyIiwiZXMiLCJ0cyIsImxzIiwiYXMiLCJucyIsImNvbmZpcm1CdXR0b25Qb3NpdGlvbiIsImNvbmZpcm1CdXR0b25IaWdobGlnaHQiLCJjYW5jZWxCdXR0b25IaWdobGlnaHQiLCJycyIsInVzIiwiZHMiLCJhbGVydCIsInByb21wdCIsIiRtc2dib3giLCIkbWVzc2FnZUJveCIsIiRhbGVydCIsIiRjb25maXJtIiwiJHByb21wdCIsImNzIiwicHMiLCJob3Jpem9udGFsQ2xhc3MiLCJwb3NpdGlvblN0eWxlIiwidmVydGljYWxQcm9wZXJ0eSIsImhzIiwidnMiLCJmcyIsImdzIiwiYnMiLCIkbm90aWZ5IiwieXMiLCJrcyIsImNyZWF0ZWQiLCJncm91cERpc2FibGVkIiwiY3VycmVudExhYmVsIiwiaXRlbVNlbGVjdGVkIiwiaG92ZXJJdGVtIiwibXVsdGlwbGVMaW1pdCIsInJlbW90ZSIsInNldFNlbGVjdGVkIiwic2VsZWN0RW1pdHRlciIsImZpbHRlcmVkT3B0aW9uc0NvdW50IiwiaG92ZXJJbmRleCIsIndzIiwib25PcHRpb25DcmVhdGUiLCJjYWNoZWRPcHRpb25zIiwib25PcHRpb25EZXN0cm95Iiwic2VsZWN0T3B0aW9uQ2xpY2siLCJoYW5kbGVPcHRpb25TZWxlY3QiLCJTcyIsInNlbGVjdFdyYXBwZXIiLCJpc011bHRpcGxlIiwiTXMiLCJFbFNlbGVjdE1lbnUiLCJFbE9wdGlvbiIsImF1dG9tYXRpY0Ryb3Bkb3duIiwiYWxsb3dDcmVhdGUiLCJsb2FkaW5nVGV4dCIsIm5vTWF0Y2hUZXh0Iiwibm9EYXRhVGV4dCIsInJlbW90ZU1ldGhvZCIsImRlZmF1bHRGaXJzdE9wdGlvbiIsInJlc2VydmVLZXl3b3JkIiwiY3JlYXRlZExhYmVsIiwiY3JlYXRlZFNlbGVjdGVkIiwiaW5wdXRMZW5ndGgiLCJpbnB1dFdpZHRoIiwiaW5pdGlhbElucHV0SGVpZ2h0Iiwib3B0aW9uc0NvdW50Iiwic29mdEZvY3VzIiwic2VsZWN0ZWRMYWJlbCIsInF1ZXJ5IiwicHJldmlvdXNRdWVyeSIsImlucHV0SG92ZXJpbmciLCJjYWNoZWRQbGFjZUhvbGRlciIsImN1cnJlbnRQbGFjZWhvbGRlciIsIm1lbnVWaXNpYmxlT25Gb2N1cyIsImlzU2lsZW50Qmx1ciIsInNlbGVjdFNpemUiLCJoYW5kbGVSZXNpemUiLCJjb2xsYXBzZVRhZ1NpemUiLCJkZWJvdW5jZWRPbklucHV0Q2hhbmdlIiwiZGVib3VuY2VkUXVlcnlDaGFuZ2UiLCJkZWxldGVQcmV2VGFnIiwiZGVsZXRlU2VsZWN0ZWQiLCJzY3JvbGxUb09wdGlvbiIsInJlc2V0SW5wdXRIZWlnaHQiLCJtYW5hZ2VQbGFjZWhvbGRlciIsInNlbGVjdERpc2FibGVkIiwic2hvd05ld09wdGlvbiIsInRvZ2dsZUxhc3RPcHRpb25IaXRTdGF0ZSIsInJlc2V0SW5wdXRTdGF0ZSIsImhhbmRsZUNvbXBvc2l0aW9uIiwiaGFuZGxlTWVudUVudGVyIiwiaGFuZGxlQ2xlYXJDbGljayIsInRvZ2dsZU1lbnUiLCJzZWxlY3RPcHRpb24iLCJnZXRWYWx1ZUtleSIsIm5hdmlnYXRlT3B0aW9ucyIsImRyb3BNZW51VmlzaWJsZSIsIksiLCJ0YWdzIiwicSIsIlUiLCJzY3JvbGxiYXIiLCJHIiwiRE9DVU1FTlRfTk9ERSIsIkVzIiwiWCIsIkoiLCJlZSIsInRlIiwibGUiLCJhZSIsInJlIiwic2UiLCJ1ZSIsImRlIiwiY2UiLCJwZSIsImhlIiwidmUiLCJtZSIsIlRzIiwiTnMiLCJEcyIsIk9zIiwiUHMiLCJWcyIsIm9uUGFzdGUiLCJlbXB0eSIsIklzIiwiQXMiLCJCcyIsInpzIiwiRnMiLCJScyIsIkhzIiwiV3MiLCJjdXJyZW50UGFnZSIsInByZXZUZXh0IiwiaW50ZXJuYWxEaXNhYmxlZCIsImpzIiwiS3MiLCJZcyIsInBhZ2VDb3VudCIsIm5leHRUZXh0IiwicXMiLCJVcyIsIkdzIiwiWHMiLCJFbFNlbGVjdCIsInBhZ2VTaXplIiwicGFnZVNpemVzIiwiaW5uZXJQYWdlc2l6ZXMiLCJpbm5lclBhZ2VTaXplIiwiaGFuZGxlU2l6ZXNDaGFuZ2UiLCJRcyIsIlpzIiwiaW5uZXJWYWx1ZSIsIkpzIiwiZXUiLCJ0dSIsImx1IiwicGFnZXJDb3VudCIsInNob3dQcmV2TW9yZSIsInNob3dOZXh0TW9yZSIsInF1aWNrbmV4dEljb25DbGFzcyIsInF1aWNrcHJldkljb25DbGFzcyIsInBhZ2VycyIsIm9uUGFnZXJDbGljayIsImF1IiwibnUiLCJQcmV2IiwiTmV4dCIsIlNpemVzIiwiSnVtcGVyIiwiVG90YWwiLCJQYWdlciIsImxheW91dCIsImhpZGVPblNpbmdsZVBhZ2UiLCJpbnRlcm5hbEN1cnJlbnRQYWdlIiwiaW50ZXJuYWxQYWdlU2l6ZSIsImxhc3RFbWl0dGVkUGFnZSIsInVzZXJDaGFuZ2VQYWdlU2l6ZSIsImludGVybmFsUGFnZUNvdW50IiwiZ2V0VmFsaWRDdXJyZW50UGFnZSIsImVtaXRDaGFuZ2UiLCJoYW5kbGVDdXJyZW50Q2hhbmdlIiwianVtcGVyIiwicGFnZXIiLCJzaXplcyIsIm91IiwiY29uZmlybUJ1dHRvblR5cGUiLCJjYW5jZWxCdXR0b25UeXBlIiwiaWNvbkNvbG9yIiwiaGlkZUljb24iLCJjb25maXJtQnV0dG9uVGV4dF8iLCJjYW5jZWxCdXR0b25UZXh0XyIsIml1IiwicnUiLCJzdSIsImR1IiwiY3UiLCJOT0RFX0VWTiIsInB1IiwiaHUiLCJ2dSIsInBlcmNlbnRhZ2UiLCJzdGF0dXMiLCJzdHJva2VXaWR0aCIsInN0cm9rZUxpbmVjYXAiLCJ0ZXh0SW5zaWRlIiwic2hvd1RleHQiLCJQSSIsInN0cm9rZURhc2hhcnJheSIsInN0cm9rZURhc2hvZmZzZXQiLCJiYXJTdHlsZSIsInJlbGF0aXZlU3Ryb2tlV2lkdGgiLCJyYWRpdXMiLCJ0cmFja1BhdGgiLCJwZXJpbWV0ZXIiLCJyYXRlIiwidHJhaWxQYXRoU3R5bGUiLCJjaXJjbGVQYXRoU3R5bGUiLCJzdHJva2UiLCJwcm9ncmVzc1RleHRTaXplIiwiZ2V0Q3VycmVudENvbG9yIiwibXUiLCJmdSIsImd1IiwiZm9udFNpemUiLCJ5dSIsImt1IiwibG93VGhyZXNob2xkIiwiaGlnaFRocmVzaG9sZCIsInZvaWRDb2xvciIsImRpc2FibGVkVm9pZENvbG9yIiwiaWNvbkNsYXNzZXMiLCJ2b2lkSWNvbkNsYXNzIiwiZGlzYWJsZWRWb2lkSWNvbkNsYXNzIiwiYWxsb3dIYWxmIiwic2hvd1Njb3JlIiwidGV4dHMiLCJzY29yZVRlbXBsYXRlIiwiZXhjbHVkZWQiLCJyYXRlRGlzYWJsZWQiLCJkZWNpbWFsU3R5bGUiLCJkZWNpbWFsSWNvbkNsYXNzIiwic2hvd0RlY2ltYWxJY29uIiwiZ2V0SWNvblN0eWxlIiwic2VsZWN0VmFsdWUiLCJoYW5kbGVLZXkiLCJzZXRDdXJyZW50VmFsdWUiLCJyZXNldEN1cnJlbnRWYWx1ZSIsImN1cnNvciIsIkN1IiwianVzdGlmeSIsImFsaWduIiwiZmxleFdyYXAiLCJ3dSIsInRvb2x0aXBDbGFzcyIsImRyYWdnaW5nIiwic3RhcnRYIiwiY3VycmVudFgiLCJzdGFydFkiLCJjdXJyZW50WSIsInN0YXJ0UG9zaXRpb24iLCJuZXdQb3NpdGlvbiIsInRvb2x0aXAiLCJzaG93VG9vbHRpcCIsInRvb2x0aXBWaXNpYmxlIiwid3JhcHBlclN0eWxlIiwiZm9ybWF0VmFsdWUiLCJvbkJ1dHRvbkRvd24iLCJvbkxlZnRLZXlEb3duIiwib25SaWdodEtleURvd24iLCJzZXRQb3NpdGlvbiIsInNsaWRlclNpemUiLCJmb3JtYXRUb29sdGlwIiwicmVzZXRTaXplIiwidXBkYXRlRHJhZ2dpbmciLCJkaXNwbGF5VG9vbHRpcCIsImhpZGVUb29sdGlwIiwidG91Y2hlcyIsInh1Iiwib25Ub3VjaHN0YXJ0IiwiX3UiLCJtYXJrIiwiU3UiLCJFbElucHV0TnVtYmVyIiwiU2xpZGVyQnV0dG9uIiwiU2xpZGVyTWFya2VyIiwic2hvd0lucHV0Q29udHJvbHMiLCJzaG93U3RvcHMiLCJtYXJrcyIsImZpcnN0VmFsdWUiLCJzZWNvbmRWYWx1ZSIsInNsaWRlciIsImZpcnN0QnV0dG9uIiwic2Vjb25kQnV0dG9uIiwic2xpZGVyRGlzYWJsZWQiLCJtaW5WYWx1ZSIsIm1heFZhbHVlIiwicnVud2F5U3R5bGUiLCJvblNsaWRlckNsaWNrIiwic3RvcHMiLCJnZXRTdG9wU3R5bGUiLCJwb2ludCIsIkV1Iiwic2xpZGVyV3JhcHBlciIsIk11IiwibWFya0xpc3QiLCJUdSIsIk51IiwiRHUiLCJwcm9jZXNzU3RhdHVzIiwiZmluaXNoU3RhdHVzIiwic3RlcHMiLCJjdXJyZW50U3RhdHVzIiwic2ltcGxlIiwiZmxleEJhc2lzIiwidHJhbnNpdGlvbkRlbGF5IiwiYm9yZGVyV2lkdGgiLCJjYWxjUHJvZ3Jlc3MiLCJzZXRJbmRleCIsImxpbmVTdHlsZSIsImlzQ2VudGVyIiwiaXNTaW1wbGUiLCJ1cGRhdGVTdGF0dXMiLCJPdSIsIlB1IiwiVnUiLCJJdSIsIkF1IiwiQnUiLCJwb3BwZXJKUyIsImN1cnJlbnRQbGFjZW1lbnQiLCJtb3VzZUluQ2hpbGQiLCJoYW5kbGVNb3VzZWxlYXZlIiwidGl0bGVTdHlsZSIsIm1lbnVUcmFuc2l0aW9uTmFtZSIsInN1Ym1lbnVUaXRsZUljb24iLCJoYW5kbGVNb3VzZWVudGVyIiwicmVsYXRlZFRhcmdldCIsIk1vdXNlRXZlbnQiLCJoYW5kbGVUaXRsZU1vdXNlZW50ZXIiLCJoYW5kbGVUaXRsZU1vdXNlbGVhdmUiLCJhZGRJdGVtIiwicmVtb3ZlSXRlbSIsInBvcHBlclZub2RlIiwidmVydGljYWxUaXRsZVJlZiIsIkx1IiwiYWN0aXZlSWNvbkNsYXNzIiwiaW5hY3RpdmVJY29uQ2xhc3MiLCJhY3RpdmVUZXh0IiwiaW5hY3RpdmVUZXh0IiwiYWN0aXZlQ29sb3IiLCJpbmFjdGl2ZUNvbG9yIiwiYWN0aXZlVmFsdWUiLCJpbmFjdGl2ZVZhbHVlIiwiY29yZSIsImNvcmVXaWR0aCIsInN3aXRjaERpc2FibGVkIiwic3dpdGNoVmFsdWUiLCJ6dSIsIkZ1IiwiY3VycmVudE5hbWUiLCJwYW5lTmFtZSIsImlzQ2xvc2FibGUiLCJzaG91bGRCZVJlbmRlciIsIlJ1IiwiSHUiLCJqdSIsImNvbHVtbnMiLCJLdSIsIll1IiwicXUiLCJVdSIsIkd1IiwiWHUiLCJRdSIsIlp1IiwiSnUiLCJ0ZCIsImFkIiwic3RvcmUiLCJzaG93SGVhZGVyIiwic2Nyb2xsWCIsInNjcm9sbFkiLCJib2R5V2lkdGgiLCJmaXhlZFdpZHRoIiwicmlnaHRGaXhlZFdpZHRoIiwidGFibGVIZWlnaHQiLCJoZWFkZXJIZWlnaHQiLCJhcHBlbmRIZWlnaHQiLCJmb290ZXJIZWlnaHQiLCJ2aWV3cG9ydEhlaWdodCIsImJvZHlIZWlnaHQiLCJmaXhlZEJvZHlIZWlnaHQiLCJndXR0ZXJXaWR0aCIsImJvZHlXcmFwcGVyIiwic2V0SGVpZ2h0IiwidXBkYXRlRWxzSGVpZ2h0Iiwic3RhdGVzIiwiaXNDb2x1bW5Hcm91cCIsIiRyZWFkeSIsImhlYWRlcldyYXBwZXIiLCJhcHBlbmRXcmFwcGVyIiwiZm9vdGVyV3JhcHBlciIsImhlYWRlckRpc3BsYXlOb25lIiwidXBkYXRlU2Nyb2xsWSIsIm5vdGlmeU9ic2VydmVycyIsInBhcmVudEVsZW1lbnQiLCJnZXRGbGF0dGVuQ29sdW1ucyIsInJlYWxXaWR0aCIsInJlc2l6ZVN0YXRlIiwiZml4ZWRDb2x1bW5zIiwicmlnaHRGaXhlZENvbHVtbnMiLCJvbkNvbHVtbnNDaGFuZ2UiLCJvblNjcm9sbGFibGVDaGFuZ2UiLCJuZCIsIkVsQ2hlY2tib3hHcm91cCIsInVwRGF0YUNvbHVtbiIsImZpbHRlclBhbmVscyIsImZpbHRlcnMiLCJmaWx0ZXJlZFZhbHVlIiwiZmlsdGVyTXVsdGlwbGUiLCJjb21taXQiLCJ1cGRhdGVBbGxTZWxlY3RlZCIsImZpbHRlclZhbHVlIiwiaGFuZGxlUmVzZXQiLCJzaG93RmlsdGVyUGFuZWwiLCJvZCIsInJkIiwic2QiLCJ1ZCIsInRhYmxlTGF5b3V0IiwiZmlsdGVyT3BlbmVkIiwiY2QiLCJoZCIsInZkIiwiZml4ZWQiLCJkZWZhdWx0U29ydCIsImhhbmRsZUhlYWRlckNvbnRleHRNZW51IiwiaGFuZGxlTW91c2VPdXQiLCJoYW5kbGVTb3J0Q2xpY2siLCJoYW5kbGVGaWx0ZXJDbGljayIsInNvcnRPcmRlcnMiLCJzb3J0YWJsZSIsInNvcnRQcm9wIiwic29ydGluZ0NvbHVtbiIsInNvcnRPcmRlciIsInN0YXJ0TW91c2VMZWZ0Iiwic3RhcnRMZWZ0Iiwic3RhcnRDb2x1bW5MZWZ0IiwidGFibGVMZWZ0IiwicmVzaXplUHJveHkiLCJvbmRyYWdzdGFydCIsInNjaGVkdWxlTGF5b3V0IiwicmVzaXphYmxlIiwiZ2V0SGVhZGVyUm93U3R5bGUiLCJnZXRIZWFkZXJSb3dDbGFzcyIsImdldEhlYWRlckNlbGxTdHlsZSIsImdldEhlYWRlckNlbGxDbGFzcyIsImhlYWRlclJvd1N0eWxlIiwiaGVhZGVyUm93Q2xhc3NOYW1lIiwiaGVhZGVyQ2VsbFN0eWxlIiwiY29sdW1uSW5kZXgiLCJoZWFkZXJBbGlnbiIsImxhYmVsQ2xhc3NOYW1lIiwiY29sU3BhbiIsImZpeGVkTGVhZkNvbHVtbnNMZW5ndGgiLCJyaWdodEZpeGVkTGVhZkNvbHVtbnNMZW5ndGgiLCJoZWFkZXJDZWxsQ2xhc3NOYW1lIiwidG9nZ2xlQWxsU2VsZWN0aW9uIiwiY29sdW1uUm93cyIsInJvd1NwYW4iLCJvcmlnaW5Db2x1bW5zIiwicGQiLCJoYXNHdXR0ZXIiLCJjb2xzcGFuIiwib25Db250ZXh0bWVudSIsIm9uTW91c2VNb3ZlIiwib25Nb3VzZW91dCIsInJlbmRlckhlYWRlciIsIiRpbmRleCIsIl9zZWxmIiwiZmlsdGVyUGxhY2VtZW50IiwiYmQiLCJzdHJpcGUiLCJyb3dDbGFzc05hbWUiLCJyb3dTdHlsZSIsIndyYXBwZWRSb3dSZW5kZXIiLCJ0b29sdGlwQ29udGVudCIsInRvb2x0aXBUcmlnZ2VyIiwiaGFuZGxlRG91YmxlQ2xpY2siLCJoYW5kbGVDb250ZXh0TWVudSIsImhhbmRsZUNlbGxNb3VzZUVudGVyIiwiaGFuZGxlQ2VsbE1vdXNlTGVhdmUiLCJob3ZlclN0YXRlIiwiY2VsbCIsImNyZWF0ZVJhbmdlIiwic2V0U3RhcnQiLCJzZXRFbmQiLCJmZCIsImdldFJvd1N0eWxlIiwiZ2V0Um93Q2xhc3MiLCJnZXRTcGFuIiwiZ2V0Q29sc3BhblJlYWxXaWR0aCIsImhpZ2hsaWdodEN1cnJlbnRSb3ciLCJjdXJyZW50Um93IiwiZXhwYW5kUm93cyIsImNlbGxTdHlsZSIsInNwYW5NZXRob2QiLCJyb3dzcGFuIiwiaXNDb2x1bW5IaWRkZW4iLCJyb3dLZXkiLCJpbmRlbnQiLCJvbkRibGNsaWNrIiwidHJlZU5vZGUiLCJleHBhbmRlZCIsIm5vTGF6eUNoaWxkcmVuIiwicmVuZGVyQ2VsbCIsImlzUm93RXhwYW5kZWQiLCJhc3NlcnRSb3dLZXkiLCJ0cmVlRGF0YSIsImxhenlUcmVlTm9kZU1hcCIsImNoaWxkcmVuQ29sdW1uTmFtZSIsInJlbmRlckV4cGFuZGVkIiwiZ2QiLCJob3ZlclJvdyIsImlzQ29tcGxleCIsImtkIiwic3VtbWFyeU1ldGhvZCIsImdldFJvd0NsYXNzZXMiLCJsZWZ0Rml4ZWRMZWFmQ291bnQiLCJyaWdodEZpeGVkTGVhZkNvdW50IiwiY29sdW1uc0NvdW50IiwibGVmdEZpeGVkQ291bnQiLCJyaWdodEZpeGVkQ291bnQiLCJ5ZCIsIkNkIiwieGQiLCJNb3VzZXdoZWVsIiwiVGFibGVIZWFkZXIiLCJUYWJsZUJvZHkiLCJUYWJsZUZvb3RlciIsInNob3dTdW1tYXJ5IiwiY3VycmVudFJvd0tleSIsImV4cGFuZFJvd0tleXMiLCJkZWZhdWx0RXhwYW5kQWxsIiwidG9vbHRpcEVmZmVjdCIsInNlbGVjdE9uSW5kZXRlcm1pbmF0ZSIsInRyZWVQcm9wcyIsImhhc0NoaWxkcmVuIiwibG9hZCIsIl9kYXRhIiwiZXhlY1F1ZXJ5IiwidXBkYXRlQ3VycmVudFJvd0RhdGEiLCJ1cGRhdGVFeHBhbmRSb3dzIiwicmVzZXJ2ZVNlbGVjdGlvbiIsInVwZGF0ZVNlbGVjdGlvbkJ5Um93S2V5IiwiY2xlYXJTZWxlY3Rpb24iLCJjbGVhblNlbGVjdGlvbiIsInVwZGF0ZVRhYmxlU2Nyb2xsWSIsIl9jb2x1bW5zIiwic2VsZWN0YWJsZSIsInVwZGF0ZUNvbHVtbnMiLCJ1cGRhdGVTb3J0Iiwic2lsZW50IiwidXBkYXRlRmlsdGVycyIsInRvZ2dsZVJvd1NlbGVjdGlvbiIsInVwZGF0ZUN1cnJlbnRSb3ciLCIkdmFsdWUiLCJXdSIsInNvcnRNZXRob2QiLCJzb3J0QnkiLCJzZXRFeHBhbmRSb3dLZXlzIiwidG9nZ2xlUm93RXhwYW5zaW9uIiwidXBkYXRlVHJlZUV4cGFuZEtleXMiLCJ0b2dnbGVUcmVlRXhwYW5zaW9uIiwibG9hZE9yVG9nZ2xlIiwibG9hZERhdGEiLCJ1cGRhdGVUcmVlRGF0YSIsIm5vcm1hbGl6ZSIsImxhenlDb2x1bW5JZGVudGlmaWVyIiwic2V0Q3VycmVudFJvd0tleSIsInJlc3RvcmVDdXJyZW50Um93S2V5Iiwic2V0Q3VycmVudFJvd0J5S2V5IiwiX2N1cnJlbnRSb3dLZXkiLCJkb0xheW91dCIsImRlYm91bmNlZFVwZGF0ZUxheW91dCIsIl90b2dnbGVBbGxTZWxlY3Rpb24iLCJjb2x1bW5LZXkiLCJleGVjRmlsdGVyIiwiZXhlY1NvcnQiLCJ0YWJsZUhlYWRlciIsImZpeGVkVGFibGVIZWFkZXIiLCJyaWdodEZpeGVkVGFibGVIZWFkZXIiLCJtdWx0aSIsImNsZWFyU29ydCIsInNldEV4cGFuZFJvd0tleXNBZGFwdGVyIiwidG9nZ2xlUm93RXhwYW5zaW9uQWRhcHRlciIsImxlYWZDb2x1bW5zIiwiZml4ZWRMZWFmQ29sdW1ucyIsInJpZ2h0Rml4ZWRMZWFmQ29sdW1ucyIsImxlYWZDb2x1bW5zTGVuZ3RoIiwiaXNBbGxTZWxlY3RlZCIsInNlbGVjdGlvbiIsImZpbHRlcmVkRGF0YSIsImVkIiwibXV0YXRpb25zIiwibGQiLCJzZXRDdXJyZW50Um93IiwidXBkYXRlQ29sdW1uc1dpZHRoIiwiaXNIaWRkZW4iLCJzZXREcmFnVmlzaWJsZSIsImhhbmRsZUhlYWRlckZvb3Rlck1vdXNld2hlZWwiLCJ0YWJsZVNpemUiLCJlbXB0eUJsb2NrU3R5bGUiLCJoYW5kbGVGaXhlZE1vdXNld2hlZWwiLCJmaXhlZEhlaWdodCIsInJlc2l6ZVByb3h5VmlzaWJsZSIsInNjcm9sbFBvc2l0aW9uIiwic2V0TWF4SGVpZ2h0IiwiZml4ZWRCb2R5V3JhcHBlciIsInJpZ2h0Rml4ZWRCb2R5V3JhcHBlciIsInRhYmxlSWQiLCJ3ZCIsIlNkIiwiRWQiLCJNZCIsIlRkIiwiTmQiLCJEZCIsIk9kIiwiUGQiLCJvblNldERyYWdWaXNpYmxlIiwiVmQiLCJleHBhbmQiLCJJZCIsIm5hdGl2ZU9uQ2xpY2siLCJBZCIsImZvcm1hdHRlciIsIkxkIiwiemQiLCJzaG93VG9vbHRpcFdoZW5PdmVyZmxvdyIsInNob3dPdmVyZmxvd1Rvb2x0aXAiLCJyZWdpc3Rlck5vcm1hbFdhdGNoZXJzIiwicmVnaXN0ZXJDb21wbGV4V2F0Y2hlcnMiLCJyZWFsTWluV2lkdGgiLCJjb2x1bW5Db25maWciLCJyZWFsQWxpZ24iLCJyZWFsSGVhZGVyQWxpZ24iLCJjb2x1bW5JZCIsImlzU3ViQ29sdW1uIiwiY29sdW1uT3JUYWJsZVBhcmVudCIsInNldENvbHVtbldpZHRoIiwic2V0Q29sdW1uRm9yY2VkUHJvcHMiLCJzZXRDb2x1bW5SZW5kZXJzIiwiZ2V0UHJvcHNEYXRhIiwiZ2V0Q29sdW1uRWxJbmRleCIsInZQYXJlbnQiLCJCZCIsImhpZGRlbkNvbHVtbnMiLCJGZCIsInRhYnMiLCJ0YWJQb3NpdGlvbiIsInJvb3RUYWJzIiwiVGFiQmFyIiwicGFuZXMiLCJvblRhYkNsaWNrIiwib25UYWJSZW1vdmUiLCJzdHJldGNoIiwidmlzaWJpbGl0eVN0YXRlIiwic2Nyb2xsYWJsZSIsIm5hdk9mZnNldCIsImlzRm9jdXMiLCJmb2N1c2FibGUiLCJuYXZTY3JvbGwkIiwibmF2JCIsImVsJCIsInNpemVOYW1lIiwibmF2U3R5bGUiLCJzY3JvbGxQcmV2Iiwic2Nyb2xsTmV4dCIsInNjcm9sbFRvQWN0aXZlVGFiIiwiY2hhbmdlVGFiIiwic2V0Rm9jdXMiLCJyZW1vdmVGb2N1cyIsInZpc2liaWxpdHlDaGFuZ2VIYW5kbGVyIiwid2luZG93Qmx1ckhhbmRsZXIiLCJ3aW5kb3dGb2N1c0hhbmRsZXIiLCJSZCIsIlRhYk5hdiIsImFjdGl2ZU5hbWUiLCJhZGRhYmxlIiwiYmVmb3JlTGVhdmUiLCJoYW5kbGVUYWJDbGljayIsImhhbmRsZVRhYlJlbW92ZSIsImhhbmRsZVRhYkFkZCIsIkhkIiwiV2QiLCJqZCIsIktkIiwibWluVGltZSIsIm1heFRpbWUiLCJZZCIsInFkIiwidGltZXN0YW1wIiwiaGlkZVRpbWVzdGFtcCIsIlVkIiwiR2QiLCJYZCIsIlFkIiwiWmQiLCJKZCIsImRvdCIsInRjIiwiT3B0aW9uQ29udGVudCIsIm9wdGlvblJlbmRlciIsImRlZmF1bHRDaGVja2VkIiwiYWxsQ2hlY2tlZCIsImNoZWNrQ2hhbmdlQnlVc2VyIiwibGFiZWxQcm9wIiwia2V5UHJvcCIsImRpc2FibGVkUHJvcCIsImNoZWNrZWRTdW1tYXJ5IiwiaXNJbmRldGVybWluYXRlIiwiaGFuZGxlQWxsQ2hlY2tlZENoYW5nZSIsIm5vQ2hlY2tlZCIsImhhc0NoZWNrZWQiLCJjaGVja2FibGVEYXRhIiwidXBkYXRlQWxsQ2hlY2tlZCIsImhhc05vTWF0Y2giLCJpbnB1dEljb24iLCJoYXNGb290ZXIiLCJjbGVhclF1ZXJ5IiwibGMiLCJhYyIsIm5jIiwiaWMiLCJUcmFuc2ZlclBhbmVsIiwiYnV0dG9uVGV4dHMiLCJsZWZ0RGVmYXVsdENoZWNrZWQiLCJyaWdodERlZmF1bHRDaGVja2VkIiwicmVuZGVyQ29udGVudCIsInRhcmdldE9yZGVyIiwibGVmdENoZWNrZWQiLCJyaWdodENoZWNrZWQiLCJwcm9wc0tleSIsInNvdXJjZURhdGEiLCJ0YXJnZXREYXRhIiwib25Tb3VyY2VDaGVja2VkQ2hhbmdlIiwib25UYXJnZXRDaGVja2VkQ2hhbmdlIiwiYWRkVG9MZWZ0IiwiYWRkVG9SaWdodCIsImhhc0J1dHRvblRleHRzIiwibGVmdFBhbmVsVGl0bGUiLCJyaWdodFBhbmVsVGl0bGUiLCJwYW5lbEZpbHRlclBsYWNlaG9sZGVyIiwicmMiLCJzYyIsInVjIiwiZGMiLCJjYyIsIm9uQ2hlY2tlZENoYW5nZSIsImhjIiwidmMiLCJmYyIsIm5vbmUiLCJhbGxXaXRob3V0RGlzYWJsZSIsImhhbGYiLCJnYyIsInljIiwia2MiLCJpc0N1cnJlbnQiLCJjYW5Gb2N1cyIsInJlZ2lzdGVyTm9kZSIsImlzTGVhZkJ5VXNlciIsInNldERhdGEiLCJkZWZhdWx0RXhwYW5kZWRLZXlzIiwiYXV0b0V4cGFuZFBhcmVudCIsImN1cnJlbnROb2RlS2V5IiwiX2luaXREZWZhdWx0Q2hlY2tlZE5vZGUiLCJ1cGRhdGVMZWFmU3RhdGUiLCJpbnNlcnRDaGlsZCIsImdldENoaWxkcmVuIiwiZGVyZWdpc3Rlck5vZGUiLCJzaG91bGRMb2FkRGF0YSIsImNoZWNrRGVzY2VuZGFudHMiLCJyZW1vdmVDaGlsZEJ5RGF0YSIsImRvQ3JlYXRlQ2hpbGRyZW4iLCJDYyIsIm5vZGVzTWFwIiwiX2luaXREZWZhdWx0Q2hlY2tlZE5vZGVzIiwiZmlsdGVyTm9kZU1ldGhvZCIsInVwZGF0ZUNoaWxkcmVuIiwiZ2V0Tm9kZSIsImluc2VydEFmdGVyIiwiZGVmYXVsdENoZWNrZWRLZXlzIiwiZ2V0SGFsZkNoZWNrZWROb2RlcyIsIl9nZXRBbGxOb2RlcyIsIl9zZXRDaGVja2VkS2V5cyIsInNldEN1cnJlbnROb2RlIiwieGMiLCJ3YyIsInRyZWVOb2RlRXhwYW5kIiwiYnJvYWRjYXN0RXhwYW5kZWQiLCJyZW5kZXJBZnRlckV4cGFuZCIsInNob3dDaGVja2JveCIsImVtaXR0ZXIiLCJjaGVja2VkS2V5cyIsImdldENoZWNrZWRLZXlzIiwiaGFsZkNoZWNrZWROb2RlcyIsImhhbGZDaGVja2VkS2V5cyIsImdldEhhbGZDaGVja2VkS2V5cyIsIm5vZGUkIiwiY2hpbGROb2RlUmVuZGVyZWQiLCJvbGRDaGVja2VkIiwib2xkSW5kZXRlcm1pbmF0ZSIsImdldE5vZGVLZXkiLCJub2RlS2V5IiwiaGFuZGxlU2VsZWN0Q2hhbmdlIiwiZXhwYW5kT25DbGlja05vZGUiLCJjaGVja09uQ2xpY2tOb2RlIiwib25Ob2RlQ29udGV4dG1lbnUiLCJoYW5kbGVFeHBhbmRJY29uQ2xpY2siLCJoYW5kbGVDaGlsZE5vZGVFeHBhbmQiLCJoYW5kbGVEcmFnU3RhcnQiLCJkcmFnZ2FibGUiLCJoYW5kbGVEcmFnT3ZlciIsImhhbmRsZURyb3AiLCJoYW5kbGVEcmFnRW5kIiwiU2MiLCJvbkRyYWdvdmVyIiwib25EcmFnZW5kIiwib25Ecm9wIiwib25Ob2RlRXhwYW5kIiwiRWMiLCJFbFRyZWVOb2RlIiwiYWxsb3dEcmFnIiwiYWxsb3dEcm9wIiwiaGlnaGxpZ2h0Q3VycmVudCIsImRyYWdTdGF0ZSIsImRyb3BJbmRpY2F0b3IkIiwic2hvd0Ryb3BJbmRpY2F0b3IiLCJkcmFnZ2luZ05vZGUiLCJkcm9wTm9kZSIsImRyb3BUeXBlIiwibG9nIiwiZGF0YVRyYW5zZmVyIiwiZWZmZWN0QWxsb3dlZCIsImRyb3BFZmZlY3QiLCJwcmV2aW91c1NpYmxpbmciLCJzZXREZWZhdWx0Q2hlY2tlZEtleSIsInNldERlZmF1bHRFeHBhbmRlZEtleXMiLCJnZXRDdXJyZW50Tm9kZSIsImdldE5vZGVQYXRoIiwicmV2ZXJzZSIsImdldEN1cnJlbnRLZXkiLCJzZXRDaGVja2VkTm9kZXMiLCJzZXRDaGVja2VkS2V5cyIsInNldFVzZXJDdXJyZW50Tm9kZSIsInNldEN1cnJlbnRLZXkiLCJzZXRDdXJyZW50Tm9kZUtleSIsImhhbmRsZU5vZGVFeHBhbmQiLCJ1cGRhdGVLZXlDaGlsZHJlbiIsIk1jIiwiVGMiLCJOYyIsIkRjIiwicmVzcG9uc2UiLCJyZXNwb25zZVRleHQiLCJPYyIsIlhNTEh0dHBSZXF1ZXN0Iiwib25wcm9ncmVzcyIsInBlcmNlbnQiLCJvblByb2dyZXNzIiwiRm9ybURhdGEiLCJmaWxlbmFtZSIsImZpbGUiLCJvblN1Y2Nlc3MiLCJ3aXRoQ3JlZGVudGlhbHMiLCJoZWFkZXJzIiwic2V0UmVxdWVzdEhlYWRlciIsInNlbmQiLCJQYyIsIkVsUHJvZ3Jlc3MiLCJmaWxlcyIsImhhbmRsZVByZXZpZXciLCJsaXN0VHlwZSIsInBhcnNlUGVyY2VudGFnZSIsImhhbmRsZVJlbW92ZSIsIm9uRmlsZUNsaWNrZWQiLCJWYyIsIkljIiwiQWMiLCJCYyIsIkxjIiwiemMiLCJGYyIsImRyYWdvdmVyIiwiYWNjZXB0Iiwib25EcmFnbGVhdmUiLCIkYyIsIlVwbG9hZERyYWdnZXIiLCJvblN0YXJ0IiwiYmVmb3JlVXBsb2FkIiwib25QcmV2aWV3Iiwib25SZW1vdmUiLCJmaWxlTGlzdCIsImF1dG9VcGxvYWQiLCJodHRwUmVxdWVzdCIsImxpbWl0Iiwib25FeGNlZWQiLCJGaWxlIiwicmVxcyIsIm1vdXNlb3ZlciIsImFib3J0IiwicG9zdCIsInVwbG9hZEZpbGVzIiwiUmMiLCJIYyIsIm9uRmlsZSIsImpjIiwiVXBsb2FkIiwiVXBsb2FkTGlzdCIsInNob3dGaWxlTGlzdCIsImJlZm9yZVJlbW92ZSIsImNsZWFyRmlsZXMiLCJoYW5kbGVQcm9ncmVzcyIsImhhbmRsZVN0YXJ0IiwiaGFuZGxlU3VjY2VzcyIsInN1Ym1pdCIsInVwbG9hZFJlZiIsIlVSTCIsImNyZWF0ZU9iamVjdFVSTCIsIldjIiwicmV2b2tlT2JqZWN0VVJMIiwiZHJhZ092ZXIiLCJkcmFnaW5nIiwidXBsb2FkRGlzYWJsZWQiLCJ0aXAiLCJLYyIsIml0ZW1SZWYiLCJZYyIsInFjIiwiVWMiLCJHYyIsIml0ZW1TaXplIiwid2luZG93U2l6ZSIsInBvb2xTaXplIiwidmlld3BvcnRSZWYiLCJpdGVtQ29udGFpbmVyU3R5bGUiLCJ2aWV3cG9ydFN0eWxlIiwic3RhcnROb2RlIiwicmVuZGVyaW5nSXRlbXMiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsInNjcm9sbFRvIiwib25TY3JvbGxQYXNzaXZlIiwiWmMiLCJKYyIsImVwIiwiUWMiLCJtc2ciLCJwLWlkIiwiaXBjUmVuZGVyZXIiLCJNZW51IiwiTWVudUl0ZW0iLCJlblZhbHVlIiwiemhWYWx1ZSIsImZvcm1MYWJlbFdpZHRoIiwicmVnaW9uUnVsZXMiLCJpc1N1Ym1pdCIsImN1cnJlbnRNb2R1bGUiLCJsYW5nIiwiemgiLCJsYW5nRmlsZSIsImZpbHRlclRleHQiLCJjb250ZXh0TWVudSIsImRpYWxvZ1Nob3dWaXNpYmxlIiwidHJlZUluaXQiLCJqc29uRGF0YSIsInRyZWVJdGVtIiwiZW50cnlGaWxlIiwiZ2V0ZmlsZSIsImZpbGVOYW1lIiwibGFuZ05hbWUiLCJyZWFkRmlsZSIsInRvSnNvbiIsImNsaWNrTG9jYWxOb2RlIiwiY3JlYXRNZW51IiwiZXYiLCJwb3B1cCIsImdldEN1cnJlbnRXaW5kb3ciLCJmaWx0ZXJOb2RlIiwiZXhwb3J0TGFuZyIsImN1cnJlbnRsYW5nIiwic2F2ZVN0ciIsImNhbmNlbGVkIiwiZmlsZVBhdGgiLCJ3cml0ZUZpbGUiLCJub3RpZmljYXRpb24iLCJOb3RpZmljYXRpb24iLCJub2RlLWtleSIsImhpZ2hsaWdodC1jdXJyZW50IiwiZmlsdGVyLW5vZGUtbWV0aG9kIiwiYWJvdXRNZSIsIiRldmVudCIsImF1dG9IZWlnaHQiLCJjaGFuZ2VkIiwiY2hpbGRpdGVtIiwiSGVsbG9Xb3JsZCIsIkhvbWVQYWdlIiwiY29udGFpbmVyT3JTZWxlY3RvciIsIm5vcm1hbGl6ZUNvbnRhaW5lciIsInRlbXBsYXRlIiwiX192dWVSZWl6ZV9fIl0sIm1hcHBpbmdzIjoiOzJGQUdJQSxFLE1BQTBCLEdBQTRCLEtBRTFEQSxFQUF3QkMsS0FBSyxDQUFDQyxFQUFPQyxHQUFJLHlDQUEwQyxHQUFHLENBQUMsUUFBVSxFQUFFLFFBQVUsQ0FBQywwQkFBMEIsdUJBQXVCLE1BQVEsR0FBRyxTQUFXLHVCQUF1QixlQUFpQixDQUFDLHlDQUF5QywwQ0FBMEMsV0FBYSxNQUU5VCxXLDhFQ0pJSCxFLE1BQTBCLEdBQTRCLEtBRTFEQSxFQUF3QkMsS0FBSyxDQUFDQyxFQUFPQyxHQUFJLGdHQUFp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aUJ4MkIsR0FFaEQ0aEMsSUFBVXBuQyxFQUFNb25DLE9BQVNDLElBQVdybkMsRUFBTXFuQyxTQUM1Q3pGLEVBQVlwOEIsRUFBR3cxQixVQUFVLEdBQ3pCbG1DLEVBQVF4YSxNQUFNLENBQUM4c0QsUUFBT0MsU0FBUXpGLGVBR2hDd0YsRUFBUXBuQyxFQUFNb25DLE1BQ2RDLEVBQVNybkMsRUFBTXFuQyxPQUNmekYsRUFBWTVoQyxFQUFNNGhDLFlBR2UsTUFFckMsT0FBUXA4QixHQUNOeWlELGNBQWN6aUQsRUFBR3kxSCxpQkFvQnJCcjdHLEdBQUkyUCxNQUFNLFMiLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9jc3NXaXRoTWFwcGluZ1RvU3RyaW5nLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIuYXBwIHtcXG4gIGJvcmRlcjogMXB4IHNvbGlkICNjY2M7XFxufVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9BcHAudnVlXCIsXCJ3ZWJwYWNrOi8vLi9BcHAudnVlXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUNBO0VBQ0Usc0JBQUE7QUNBRlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJcXG4uYXBwe1xcbiAgYm9yZGVyOjFweCBzb2xpZCAjY2NjO1xcbn1cXG5cIixcIi5hcHAge1xcbiAgYm9yZGVyOiAxcHggc29saWQgI2NjYztcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvY3NzV2l0aE1hcHBpbmdUb1N0cmluZy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiYnV0dG9uIHtcXG4gIGJhY2tncm91bmQ6ICNmZmY7XFxuICBwYWRkaW5nOiAyMHB4O1xcbn1cXG4uYnRuIHtcXG4gIGJhY2tncm91bmQ6IHJlYmVjY2FwdXJwbGU7XFxufVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9jb21wb25lbnRzL0hlbGxvd29ybGQudnVlXCIsXCJ3ZWJwYWNrOi8vLi9IZWxsb3dvcmxkLnZ1ZVwiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFDQTtFQUNFLGdCQUFBO0VBQ0EsYUFBQTtBQ0FGO0FERUE7RUFDRSx5QkFBQTtBQ0FGXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIlxcbmJ1dHRvbntcXG4gIGJhY2tncm91bmQgOiNmZmY7XFxuICBwYWRkaW5nOiAyMHB4O1xcbn1cXG4uYnRue1xcbiAgYmFja2dyb3VuZDogcmViZWNjYXB1cnBsZTtcXG59XFxuXCIsXCJidXR0b24ge1xcbiAgYmFja2dyb3VuZDogI2ZmZjtcXG4gIHBhZGRpbmc6IDIwcHg7XFxufVxcbi5idG4ge1xcbiAgYmFja2dyb3VuZDogcmViZWNjYXB1cnBsZTtcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvY3NzV2l0aE1hcHBpbmdUb1N0cmluZy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiaHRtbCxcXG5ib2R5IHtcXG4gIHBhZGRpbmc6IDA7XFxuICBtYXJnaW46IDA7XFxuICBoZWlnaHQ6IDEwMCU7XFxufVxcbiNhcHAge1xcbiAgaGVpZ2h0OiAxMDAlO1xcbn1cXG4ubWFpbiB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICBkaXNwbGF5OiBmbGV4O1xcbn1cXG4uc2lkZSB7XFxuICAtd2Via2l0LWFwcC1yZWdpb246IGRyYWc7XFxuICB6LWluZGV4OiAxO1xcbiAgd2lkdGg6IDIwMHB4O1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAgb3ZlcmZsb3cteTogaGlkZGVuO1xcbiAgcGFkZGluZzogMTJweDtcXG4gIGJhY2tncm91bmQ6ICNmMGYwZjA7XFxuICBib3JkZXItcmlnaHQ6IDFweCBzb2xpZCAjZGVkZWRlO1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG59XFxuLnNpZGUgYnV0dG9uIHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgYm9yZGVyLXJhZGl1czogNWVtO1xcbiAgcGFkZGluZzogMC42ZW07XFxuICBib3JkZXI6IG5vbmU7XFxuICBib3gtc2hhZG93OiAwcHggM3B4IDFweCAtMnB4IHJnYmEoMCwgMCwgMCwgMC4yKSwgMHB4IDJweCAycHggMHB4IHJnYmEoMCwgMCwgMCwgMC4xNCksIDBweCAxcHggNXB4IDBweCByZ2JhKDAsIDAsIDAsIDAuMTIpO1xcbiAgdHJhbnNpdGlvbjogYm94LXNoYWRvdyAyODBtcyBjdWJpYy1iZXppZXIoMC40LCAwLCAwLjIsIDEpO1xcbn1cXG4uc2lkZSAuZW50cnkge1xcbiAgcGFkZGluZzogMCAxMnB4O1xcbn1cXG4uc2lkZSAuZW50cnkgaW5wdXQge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBmb250LXNpemU6IDE0cHg7XFxufVxcbi5zaWRlIC5lbnRyeSAuc2VsZWN0LWZpbGUge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbn1cXG4uc2lkZSAuZW50cnkgLnNlbGVjdC1maWxlIC5pbnB1dC1maWxlIHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgbGVmdDogMDtcXG4gIHRvcDogMDtcXG4gIHBhZGRpbmc6IDA7XFxuICBtYXJnaW46IDA7XFxuICBvcGFjaXR5OiAwO1xcbn1cXG4uc2lkZSAuZW50cnkgLnNlbGVjdC1maWxlIGJ1dHRvbiB7XFxuICBiYWNrZ3JvdW5kOiAjNGI1Y2M0O1xcbiAgY29sb3I6ICNmZmY7XFxufVxcbi5zaWRlIC5lbnRyeSAuc2VsZWN0LWZpbGU6aG92ZXIgYnV0dG9uIHtcXG4gIGJhY2tncm91bmQ6ICM1ZTZiYzA7XFxuICBib3gtc2hhZG93OiAwcHggMnB4IDRweCAtMXB4IHJnYmEoMCwgMCwgMCwgMC4yKSwgMHB4IDRweCA1cHggMHB4IHJnYmEoMCwgMCwgMCwgMC4xNCksIDBweCAxcHggMTVweCAwcHggcmdiYSgwLCAwLCAwLCAwLjE4KTtcXG59XFxuLnNpZGUgLmNhdGFsb2cge1xcbiAgaGVpZ2h0OiBjYWxjKDEwMCUgLSAxNzZweCk7XFxufVxcbi5zaWRlIC5jYXRhbG9nIGg0IHtcXG4gIGNvbG9yOiAjOTk5O1xcbiAgcGFkZGluZzogMCA0cHg7XFxuICBtYXJnaW46IDAuOGVtIDA7XFxuICBmb250LXNpemU6IDEycHg7XFxuICBmb250LXdlaWdodDogbm9ybWFsO1xcbiAgY3Vyc29yOiBkZWZhdWx0O1xcbn1cXG4uc2lkZSAuY2F0YWxvZyAuc2VhcmNoLXRleHQge1xcbiAgbWFyZ2luLWJvdHRvbTogMC41cmVtO1xcbn1cXG4uc2lkZSAuY2F0YWxvZyAuZWwtdHJlZSB7XFxuICBoZWlnaHQ6IGNhbGMoMTAwJSAtIDcwcHgpO1xcbiAgb3ZlcmZsb3cteTogYXV0bztcXG4gIGJvcmRlcjogMXB4IHNvbGlkICNkY2RmZTY7XFxuICBib3JkZXItcmFkaXVzOiA0cHg7XFxufVxcbi5zaWRlIC5jYXRhbG9nIC5lbC10cmVlLW5vZGVfZXhwYW5kLWljb24uaXMtbGVhZiB7XFxuICBjb2xvcjogI2MwYzRjYztcXG59XFxuLnNpZGUgLm91dHB1dCB7XFxuICBwYWRkaW5nOiAwIDEycHg7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICBib3R0b206IDA7XFxufVxcbi5zaWRlIC5vdXRwdXQgcCB7XFxuICBmb250LXNpemU6IDEycHg7XFxuICBjb2xvcjogIzk5OTtcXG4gIGZvbnQtZmFtaWx5OiAn5bm85ZyGJztcXG4gIG1hcmdpbjogMDtcXG4gIHBhZGRpbmctdG9wOiAwLjJlbTtcXG4gIGN1cnNvcjogZGVmYXVsdDtcXG59XFxuLnNpZGUgLm91dHB1dCBwIGEge1xcbiAgY29sb3I6ICM5OTk7XFxuICBmb250LXdlaWdodDogbm9ybWFsO1xcbn1cXG4uY29udGVudCB7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICBmbGV4OiAxO1xcbn1cXG4uY29udGVudCAubWFpbi1oZWFkZSB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgYm94LXNoYWRvdzogMXB4IDJweCAzcHggcmdiYSgwLCAwLCAwLCAwLjA4KTtcXG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjZGRkO1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgei1pbmRleDogOTk5O1xcbiAgYmFja2dyb3VuZDogI2YwZjBmMDtcXG59XFxuLmNvbnRlbnQgLm1haW4taGVhZGUgaDMge1xcbiAgd2lkdGg6IGNhbGMoNTAlIC0gOXB4KTtcXG4gIGhlaWdodDogMzBweDtcXG4gIGxpbmUtaGVpZ2h0OiAzMHB4O1xcbiAgZm9udC1zaXplOiAxNHB4O1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gIHRleHQtaW5kZW50OiAxMHB4O1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgY3Vyc29yOiBkZWZhdWx0O1xcbn1cXG4uY29udGVudCAubWFpbi1oZWFkZSBoMyAuZ3JheSB7XFxuICBmb250LXNpemU6IDEycHg7XFxuICBjb2xvcjogIzk5OTtcXG59XFxuLmNvbnRlbnQgc2VjdGlvbiB7XFxuICBvdmVyZmxvdy15OiBhdXRvO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIHBhZGRpbmctbGVmdDogMTBweDtcXG4gIHBhZGRpbmctcmlnaHQ6IDVweDtcXG4gIGhlaWdodDogY2FsYygxMDAlIC0gNTlweCk7XFxufVxcbi5jb250ZW50IHNlY3Rpb24gLm5vZGF0YSB7XFxuICBwYWRkaW5nOiA0MHB4O1xcbiAgcGFkZGluZy10b3A6IDEyMHB4O1xcbiAgd2lkdGg6IDEwMCU7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIGNvbG9yOiAjY2NjO1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgZm9udC1zaXplOiAxNHB4O1xcbiAgY3Vyc29yOiBkZWZhdWx0O1xcbn1cXG4ubG9nbyB7XFxuICAtd2Via2l0LWFwcC1yZWdpb246IGRyYWc7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICBwYWRkaW5nOiAxMHB4IDA7XFxufVxcbi5sb2dvIGgxIHtcXG4gIGZvbnQtc2l6ZTogMTRweDtcXG4gIGNvbG9yOiAjOTk5O1xcbiAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcXG4gIGN1cnNvcjogZGVmYXVsdDtcXG4gIG1hcmdpbjogMC4zZW07XFxufVxcbi5sb2dvIGEge1xcbiAgY29sb3I6ICM5OTk7XFxufVxcbi5taW5pIHtcXG4gIHBhZGRpbmc6IDAuMmVtIDAuNWVtO1xcbiAgZm9udC1zaXplOiAxMnB4O1xcbiAgbWFyZ2luOiAwO1xcbiAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XFxuICBjb2xvcjogIzExOGJlZTtcXG4gIGJvcmRlci13aWR0aDogMXB4O1xcbiAgbGluZS1oZWlnaHQ6IDE7XFxuICBib3JkZXItcmFkaXVzOiAycHg7XFxufVxcbnVsIHtcXG4gIGxpc3Qtc3R5bGU6IG5vbmU7XFxufVxcbi5tYWluLWhlYWRlIGgzOm50aC1jaGlsZCgxKSB7XFxuICB0ZXh0LWluZGVudDogMjBweDtcXG59XFxuLmt2Om50aC1jaGlsZCgxKSBkbDo6YWZ0ZXIge1xcbiAgY29udGVudDogJyc7XFxuICB3aWR0aDogMXB4O1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAgYm9yZGVyLXJpZ2h0OiAxcHggZGFzaGVkICNjY2M7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDJweDtcXG4gIHJpZ2h0OiAwcHg7XFxufVxcbi5rdiB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICB3aWR0aDogNTAlO1xcbn1cXG4ua3YgZW0ge1xcbiAgY29sb3I6IHRlYWw7XFxuICBvcGFjaXR5OiAwLjg7XFxufVxcbi5rdiBkbCB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBtYXJnaW46IDA7XFxufVxcbi5rdiBkbDpudGgtY2hpbGQoZXZlbikge1xcbiAgYmFja2dyb3VuZDogI2Y1ZjZmOTtcXG59XFxuLmt2IGRsIGR0IHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgbGluZS1oZWlnaHQ6IDEuNDtcXG59XFxuLmt2IGRsIGR0IGVtIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIHBhZGRpbmc6IDVweDtcXG59XFxuLmt2IGRsIGRkIHtcXG4gIHBhZGRpbmctYm90dG9tOiAxMHB4O1xcbiAgcGFkZGluZy1yaWdodDogMTBweDtcXG59XFxuLmt2IGRsIGRkID4gZGl2IHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxufVxcbi5rdiBkbCBkZCA+IGRpdiBsYWJlbCB7XFxuICBmb250LXNpemU6IDEycHg7XFxuICBmb250LXdlaWdodDogbm9ybWFsO1xcbiAgY29sb3I6ICNjY2M7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICBtaW4td2lkdGg6IDIwcHg7XFxuICBwYWRkaW5nOiA0cHg7XFxuICB0ZXh0LWFsaWduOiByaWdodDtcXG59XFxuLmt2IGRsIGRkIHVsIHtcXG4gIHBhZGRpbmctbGVmdDogMTBweDtcXG4gIG1hcmdpbjogMDtcXG59XFxuLmt2IGRsIGRkIHVsIGVtIHtcXG4gIGZvbnQtc2l6ZTogMTJweDtcXG4gIG9wYWNpdHk6IDAuNTtcXG59XFxuLmt2IGRsIGRkIC5jaGlsZC1pdGVtIGxpIHtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxufVxcbi5rdiBkbCBkZCAuY2hpbGQtaXRlbSBsaSBlbSB7XFxuICBwYWRkaW5nOiA0cHg7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICB3aWR0aDogNjBweDtcXG4gIHRleHQtYWxpZ246IHJpZ2h0O1xcbn1cXG4ua3YgdGV4dGFyZWEge1xcbiAgd2lkdGg6IDk2JTtcXG4gIHJlc2l6ZTogdmVydGljYWw7XFxuICB0cmFuc2l0aW9uOiBoZWlnaHQgMC4xcztcXG4gIGZvbnQtc2l6ZTogMTJweDtcXG4gIG1hcmdpbi1ib3R0b206IDA7XFxuICBoZWlnaHQ6IDMwcHg7XFxuICBwYWRkaW5nOiA0cHggOHB4O1xcbiAgbGluZS1oZWlnaHQ6IDEuNjtcXG4gIGJvcmRlci1yYWRpdXM6IDBweDtcXG4gIGJhY2tncm91bmQ6ICNmZmZmZjE7XFxufVxcbi5rdiB0ZXh0YXJlYTpmb2N1cyB7XFxuICBvdXRsaW5lOiAxcHggc29saWQgIzlkOWQ5ZDtcXG4gIG91dGxpbmUtb2Zmc2V0OiAtMXB4O1xcbiAgYm94LXNoYWRvdzogMCAwIDEwcHggcmdiYSgwLCAwLCAwLCAwLjIpO1xcbiAgYmFja2dyb3VuZDogI2ZmZmZkZjtcXG59XFxuLmVsLWRpYWxvZyB7XFxuICBiYWNrZ3JvdW5kOiAjRUNFQ0VDO1xcbn1cXG4uZWwtZGlhbG9nIC5kaWFsb2ctdGl0bGUgZW0ge1xcbiAgZm9udC1zaXplOiBzbWFsbDtcXG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcXG59XFxuLmVsLWRpYWxvZyBidXR0b24ge1xcbiAgbWFyZ2luOiAwO1xcbn1cXG4uZWwtZGlhbG9nIC5lbC1kaWFsb2dfX2hlYWRlciB7XFxuICBwYWRkaW5nLXRvcDogMTBweDtcXG59XFxuLmVsLWRpYWxvZyAuZWwtZGlhbG9nX19oZWFkZXJidG4ge1xcbiAgdG9wOiAxMHB4O1xcbn1cXG4uZWwtZGlhbG9nIC5lbC1kaWFsb2dfX2JvZHkge1xcbiAgcGFkZGluZzogMjBweCA0MHB4IDA7XFxufVxcbi5lbC1kaWFsb2cgLmVsLWRpYWxvZ19fZm9vdGVyIHtcXG4gIHBhZGRpbmctcmlnaHQ6IDQwcHg7XFxufVxcbjo6LXdlYmtpdC1zY3JvbGxiYXIge1xcbiAgd2lkdGg6IDRweDtcXG4gIGhlaWdodDogNHB4O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICAvKiBvciBhZGQgaXQgdG8gdGhlIHRyYWNrICovXFxufVxcbjo6LXdlYmtpdC1zY3JvbGxiYXItdGh1bWIge1xcbiAgYmFja2dyb3VuZDogIzExOGJlZTtcXG4gIGJvcmRlci1yYWRpdXM6IDVweDtcXG59XFxuOjotd2Via2l0LXNjcm9sbGJhci1jb3JuZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICAvKiBvciBhZGQgaXQgdG8gdGhlIHRyYWNrICovXFxufVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9wYWdlL2hvbWUubGVzc1wiLFwid2VicGFjazovLy4vaG9tZS52dWVcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7O0VBRUUsVUFBQTtFQUNBLFNBQUE7RUFDQSxZQUFBO0FDQ0Y7QURDQTtFQUNFLFlBQUE7QUNDRjtBREVBO0VBQ0Usa0JBQUE7RUFDQSxZQUFBO0VBQ0EsYUFBQTtBQ0FGO0FERUE7RUFDRSx3QkFBQTtFQUNBLFVBQUE7RUFDQSxZQUFBO0VBQ0EsWUFBQTtFQUNBLGtCQUFBO0VBQ0EsYUFBQTtFQUNBLG1CQUFBO0VBQ0EsK0JBQUE7RUFDQSxzQkFBQTtBQ0FGO0FEVEE7RUFXSSxXQUFBO0VBQ0Esa0JBQUE7RUFDQSxjQUFBO0VBQ0EsWUFBQTtFQUNBLHlIQUFBO0VBQ0EseURBQUE7QUNDSjtBRGpCQTtFQW1CSSxlQUFBO0FDQ0o7QURwQkE7RUFxQk0sV0FBQTtFQUNBLGVBQUE7QUNFTjtBRHhCQTtFQXlCTSxrQkFBQTtBQ0VOO0FEM0JBO0VBMkJRLFdBQUE7RUFDQSxZQUFBO0VBQ0Esa0JBQUE7RUFDQSxPQUFBO0VBQ0EsTUFBQTtFQUNBLFVBQUE7RUFDQSxTQUFBO0VBQ0EsVUFBQTtBQ0dSO0FEckNBO0VBcUNRLG1CQUFBO0VBQ0EsV0FBQTtBQ0dSO0FERE07RUFFSSxtQkFBQTtFQUNBLDBIQUFBO0FDRVY7QUQ3Q0E7RUFrREksMEJBQUE7QUNGSjtBRGhEQTtFQW9ETSxXQUFBO0VBQ0EsY0FBQTtFQUNBLGVBQUE7RUFDQSxlQUFBO0VBQ0Es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SSxvQkFBQTtBQ0xKO0FEYkE7RUFxQkksbUJBQUE7QUNMSjtBRFVBO0VBQ0UsVUFBQTtFQUNBLFdBQUE7RUFDQSw2QkFBQTtFQ1JBLDJCQUEyQjtBQUM3QjtBRFdBO0VBQ0UsbUJBQUE7RUFDQSxrQkFBQTtBQ1RGO0FEWUE7RUFDRSw2QkFBQTtFQ1ZBLDJCQUEyQjtBQUM3QlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJodG1sLFxcbmJvZHl7XFxuICBwYWRkaW5nOjA7XFxuICBtYXJnaW46IDA7XFxuICBoZWlnaHQ6IDEwMCU7XFxufVxcbiNhcHB7XFxuICBoZWlnaHQ6IDEwMCU7XFxufVxcblxcbi5tYWlue1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAgZGlzcGxheTogZmxleDtcXG59XFxuLnNpZGV7XFxuICAtd2Via2l0LWFwcC1yZWdpb246IGRyYWc7XFxuICB6LWluZGV4OiAxO1xcbiAgd2lkdGg6IDIwMHB4O1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAgb3ZlcmZsb3cteTogaGlkZGVuO1xcbiAgcGFkZGluZzogMTJweDtcXG4gIGJhY2tncm91bmQ6ICNmMGYwZjA7XFxuICBib3JkZXItcmlnaHQ6IDFweCBzb2xpZCAjZGVkZWRlO1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gIGJ1dHRvbntcXG4gICAgd2lkdGg6IDEwMCU7XFxuICAgIGJvcmRlci1yYWRpdXM6IDVlbTtcXG4gICAgcGFkZGluZzogLjZlbTtcXG4gICAgYm9yZGVyOm5vbmU7XFxuICAgIGJveC1zaGFkb3c6IDBweCAzcHggMXB4IC0ycHggcmdiYSgwLCAwLCAwLCAwLjIpLCAwcHggMnB4IDJweCAwcHggcmdiYSgwLCAwLCAwLCAwLjE0KSwgMHB4IDFweCA1cHggMHB4IHJnYmEoMCwwLDAsLjEyKTtcXG4gICAgdHJhbnNpdGlvbjogYm94LXNoYWRvdyAyODBtcyBjdWJpYy1iZXppZXIoMC40LCAwLCAwLjIsIDEpO1xcbiAgfVxcbiAgLmVudHJ5e1xcbiAgICBwYWRkaW5nOjAgMTJweDtcXG4gICAgaW5wdXR7XFxuICAgICAgd2lkdGg6IDEwMCU7XFxuICAgICAgZm9udC1zaXplOiAxNHB4O1xcbiAgICB9XFxuICAgIC5zZWxlY3QtZmlsZXtcXG4gICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICAgICAgLmlucHV0LWZpbGV7XFxuICAgICAgICB3aWR0aDogMTAwJTtcXG4gICAgICAgIGhlaWdodDogMTAwJTtcXG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgICAgIGxlZnQ6IDA7XFxuICAgICAgICB0b3A6IDA7XFxuICAgICAgICBwYWRkaW5nOiAwO1xcbiAgICAgICAgbWFyZ2luOiAwO1xcbiAgICAgICAgb3BhY2l0eTogMDtcXG4gICAgICB9XFxuICAgICAgYnV0dG9ue1xcbiAgICAgICAgYmFja2dyb3VuZDogIzRiNWNjNDtcXG4gICAgICAgIGNvbG9yOiAjZmZmO1xcbiAgICAgIH1cXG4gICAgICAmOmhvdmVye1xcbiAgICAgICAgYnV0dG9ue1xcbiAgICAgICAgICBiYWNrZ3JvdW5kOiAjNWU2YmMwO1xcbiAgICAgICAgICBib3gtc2hhZG93OiAwcHggMnB4IDRweCAtMXB4IHJnYmEoMCwgMCwgMCwgMC4yKSwgMHB4IDRweCA1cHggMHB4IHJnYmEoMCwgMCwgMCwgMC4xNCksIDBweCAxcHggMTVweCAwcHggcmdiYSgwLDAsMCwuMTgpO1xcbiAgICAgICAgfVxcbiAgICAgIH1cXG4gICAgfVxcbiAgICBcXG4gIH1cXG4gIC5jYXRhbG9ne1xcbiAgICBoZWlnaHQ6IGNhbGMoMTAwJSAtIDE3NnB4KTtcXG4gICAgaDR7XFxuICAgICAgY29sb3I6ICM5OTk7XFxuICAgICAgcGFkZGluZzogMCA0cHg7XFxuICAgICAgbWFyZ2luOiAuOGVtIDA7XFxuICAgICAgZm9udC1zaXplOiAxMnB4O1xcbiAgICAgIGZvbnQtd2VpZ2h0OiBub3JtYWw7XFxuICAgICAgY3Vyc29yOiBkZWZhdWx0O1xcbiAgICB9XFxuICAgIC5zZWFyY2gtdGV4dHtcXG4gICAgICBtYXJnaW4tYm90dG9tOiAuNXJlbTtcXG4gICAgfVxcbiAgICAuZWwtdHJlZXtcXG4gICAgICBoZWlnaHQ6IGNhbGMoMTAwJSAtIDcwcHgpO1xcbiAgICAgIG92ZXJmbG93LXk6IGF1dG87XFxuICAgICAgYm9yZGVyOjFweCBzb2xpZCAjZGNkZmU2O1xcbiAgICAgIGJvcmRlci1yYWRpdXM6IDRweDtcXG4gICAgfVxcbiAgICAuZWwtdHJlZS1ub2RlX2V4cGFuZC1pY29uLmlzLWxlYWZ7XFxuICAgICAgY29sb3I6I2MwYzRjYztcXG4gICAgfVxcbiAgfVxcbiAgLm91dHB1dHtcXG4gICAgcGFkZGluZzowIDEycHg7XFxuICAgIC8vIHBvc2l0aW9uOmFic29sdXRlO1xcbiAgICAvLyB3aWR0aDogMTUycHg7XFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gICAgYm90dG9tOiAwO1xcbiAgICBwe1xcbiAgICAgIGZvbnQtc2l6ZTogMTJweDtcXG4gICAgICBjb2xvcjogIzk5OTtcXG4gICAgICBmb250LWZhbWlseTogJ+W5vOWchic7XFxuICAgICAgbWFyZ2luOiAwO1xcbiAgICAgIHBhZGRpbmctdG9wOiAuMmVtO1xcbiAgICAgIGN1cnNvcjogZGVmYXVsdDtcXG4gICAgICBhe1xcbiAgICAgICAgY29sb3I6ICM5OTk7XFxuICAgICAgICBmb250LXdlaWdodDogbm9ybWFsO1xcbiAgICAgIH1cXG4gICAgfVxcbiAgfVxcbn1cXG4uY29udGVudHtcXG4gIGhlaWdodDogMTAwJTtcXG4gIGZsZXg6IDE7XFxuICAubWFpbi1oZWFkZXtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgYm94LXNoYWRvdzogMXB4IDJweCAzcHggcmdiYSgwLDAsMCwuMDgpO1xcbiAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI2RkZDtcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgICB6LWluZGV4OiA5OTk7XFxuICAgIGJhY2tncm91bmQ6ICNmMGYwZjA7XFxuICAgIGgze1xcbiAgICAgIHdpZHRoOiBjYWxjKDUwJSAtIDlweCk7XFxuICAgICAgaGVpZ2h0OiAzMHB4O1xcbiAgICAgIGxpbmUtaGVpZ2h0OiAzMHB4O1xcbiAgICAgIGZvbnQtc2l6ZTogMTRweDtcXG4gICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgICAgIHRleHQtaW5kZW50OiAxMHB4O1xcbiAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICAgICAgY3Vyc29yOiBkZWZhdWx0O1xcbiAgICAgIC5ncmF5e1xcbiAgICAgICAgZm9udC1zaXplOiAxMnB4O1xcbiAgICAgICAgY29sb3I6ICM5OTk7XFxuICAgICAgfVxcbiAgICB9XFxuICB9XFxuICBzZWN0aW9ue1xcbiAgICBvdmVyZmxvdy15OiBhdXRvO1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBwYWRkaW5nLWxlZnQ6IDEwcHg7XFxuICAgIHBhZGRpbmctcmlnaHQ6IDVweDtcXG4gICAgaGVpZ2h0OiBjYWxjKDEwMCUgLSA1OXB4KTtcXG4gICAgXFxuICAgIC8vc2Nyb2xsLWJlaGF2aW9yOiBpbnN0YW50Oy8vc21vb3RoXFxuICAgIC5ub2RhdGF7XFxuICAgICAgcGFkZGluZzogNDBweDtcXG4gICAgICBwYWRkaW5nLXRvcDogMTIwcHg7XFxuICAgICAgd2lkdGg6IDEwMCU7XFxuICAgICAgZGlzcGxheTogZmxleDtcXG4gICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAgICAgY29sb3I6ICNjY2M7XFxuICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgICAgIGZvbnQtc2l6ZTogMTRweDtcXG4gICAgICBjdXJzb3I6IGRlZmF1bHQ7XFxuICAgIH1cXG4gIH1cXG59XFxuLmxvZ297XFxuICAtd2Via2l0LWFwcC1yZWdpb246IGRyYWc7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICBwYWRkaW5nOiAxMHB4IDA7XFxuICBoMXtcXG4gICAgZm9udC1zaXplOiAxNHB4O1xcbiAgICBjb2xvcjogIzk5OTtcXG4gICAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcXG4gICAgY3Vyc29yOiBkZWZhdWx0O1xcbiAgICBtYXJnaW46IC4zZW07XFxuICB9XFxuICBhe2NvbG9yOiAjOTk5O31cXG59XFxuLm1pbml7XFxuICBwYWRkaW5nOiAuMmVtIC41ZW07XFxuICBmb250LXNpemU6IDEycHg7XFxuICBtYXJnaW46IDA7XFxuICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcXG4gIGNvbG9yOiAjMTE4YmVlO1xcbiAgYm9yZGVyLXdpZHRoOiAxcHg7XFxuICBsaW5lLWhlaWdodDogMTtcXG4gIGJvcmRlci1yYWRpdXM6IDJweDtcXG59XFxudWx7bGlzdC1zdHlsZTogbm9uZTt9XFxuXFxuLm1haW4taGVhZGUgaDM6bnRoLWNoaWxkKDEpe1xcbiAgdGV4dC1pbmRlbnQ6IDIwcHg7XFxufVxcbi8vLm1haW4taGVhZGUgaDM6bnRoLWNoaWxkKDEpLFxcbi5rdjpudGgtY2hpbGQoMSkgZGx7XFxuICAmOjphZnRlcntcXG4gICAgY29udGVudDogJyc7XFxuICAgIHdpZHRoOiAxcHg7XFxuICAgIGhlaWdodDogMTAwJTtcXG4gICAgYm9yZGVyLXJpZ2h0OiAxcHggZGFzaGVkICNjY2M7XFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgdG9wOiAycHg7XFxuICAgIHJpZ2h0OiAwcHg7XFxuICB9XFxufVxcbi5rdntcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIHdpZHRoOiA1MCU7XFxuICBlbXtjb2xvcjogdGVhbDtvcGFjaXR5OiAuODt9XFxuICBkbHtcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgICBtYXJnaW46IDA7XFxuICAgICY6bnRoLWNoaWxkKGV2ZW4pe1xcbiAgICAgIGJhY2tncm91bmQ6ICNmNWY2Zjk7XFxuICAgIH1cXG4gICAgZHR7XFxuICAgICAgd2lkdGg6IDEwMCU7XFxuICAgICAgbGluZS1oZWlnaHQ6IDEuNDtcXG4gICAgICBcXG4gICAgICBlbXtcXG4gICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gICAgICAgIHBhZGRpbmc6IDVweDtcXG4gICAgICB9XFxuICAgIH1cXG4gICAgZGR7XFxuICAgICAgcGFkZGluZy1ib3R0b206IDEwcHg7XFxuICAgICAgcGFkZGluZy1yaWdodDogMTBweDtcXG4gICAgICAmPmRpdntcXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgICAgICBsYWJlbHtcXG4gICAgICAgICAgZm9udC1zaXplOiAxMnB4O1xcbiAgICAgICAgICBmb250LXdlaWdodDogbm9ybWFsO1xcbiAgICAgICAgICBjb2xvcjogI2NjYztcXG4gICAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgICAgICAgICBtaW4td2lkdGg6IDIwcHg7XFxuICAgICAgICAgIHBhZGRpbmc6IDRweDtcXG4gICAgICAgICAgdGV4dC1hbGlnbjogcmlnaHQ7XFxuICAgICAgICB9XFxuICAgICAgfVxcbiAgICAgIHVse1xcbiAgICAgICAgcGFkZGluZy1sZWZ0OiAxMHB4O1xcbiAgICAgICAgbWFyZ2luOiAwO1xcbiAgICAgICAgZW17Zm9udC1zaXplOiAxMnB4O29wYWNpdHk6IDAuNTt9XFxuICAgICAgfVxcbiAgICAgIC5jaGlsZC1pdGVte1xcbiAgICAgICAgbGl7XFxuICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAgICAgICAgIGVte1xcbiAgICAgICAgICAgIHBhZGRpbmc6IDRweDtcXG4gICAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICAgICAgICAgICAgd2lkdGg6IDYwcHg7XFxuICAgICAgICAgICAgdGV4dC1hbGlnbjogcmlnaHQ7XFxuICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgICB9XFxuICAgIH1cXG4gIH1cXG4gIHRleHRhcmVhe1xcbiAgICB3aWR0aDogOTYlO1xcbiAgICByZXNpemU6IHZlcnRpY2FsO1xcbiAgICB0cmFuc2l0aW9uOiBoZWlnaHQgLjFzO1xcbiAgICBmb250LXNpemU6IDEycHg7XFxuICAgIG1hcmdpbi1ib3R0b206IDA7XFxuICAgIGhlaWdodDogMzBweDtcXG4gICAgcGFkZGluZzogNHB4IDhweDtcXG4gICAgbGluZS1oZWlnaHQ6IDEuNjtcXG4gICAgYm9yZGVyLXJhZGl1czogMHB4O1xcbiAgICBiYWNrZ3JvdW5kOiAjZmZmZmYxO1xcbiAgICAmOmZvY3Vze1xcbiAgICAgIG91dGxpbmU6IDFweCBzb2xpZCAjOWQ5ZDlkO1xcbiAgICAgIG91dGxpbmUtb2Zmc2V0OiAtMXB4O1xcbiAgICAgIGJveC1zaGFkb3c6IDAgMCAxMHB4IHJnYmEoMCwwLDAsLjIpO1xcbiAgICAgIGJhY2tncm91bmQ6ICNmZmZmZGY7XFxuICAgIH1cXG4gIH1cXG59XFxuLmVsLWRpYWxvZ3tcXG4gIGJhY2tncm91bmQ6ICNFQ0VDRUM7XFxuICAuZGlhbG9nLXRpdGxle1xcbiAgICBlbXtcXG4gICAgICBmb250LXNpemU6IHNtYWxsO1xcbiAgICAgIGZvbnQtc3R5bGU6IG5vcm1hbDtcXG4gICAgfVxcbiAgfVxcbiAgYnV0dG9ue1xcbiAgICBtYXJnaW46IDA7XFxuICB9XFxuICAuZWwtZGlhbG9nX19oZWFkZXJ7XFxuICAgIHBhZGRpbmctdG9wOiAxMHB4O1xcbiAgfVxcbiAgLmVsLWRpYWxvZ19faGVhZGVyYnRue1xcbiAgICB0b3A6MTBweDtcXG4gIH1cXG4gIC5lbC1kaWFsb2dfX2JvZHl7XFxuICAgIHBhZGRpbmc6IDIwcHggNDBweCAwO1xcbiAgfVxcbiAgLmVsLWRpYWxvZ19fZm9vdGVye1xcbiAgICBwYWRkaW5nLXJpZ2h0OiA0MHB4O1xcbiAgfVxcbn1cXG5cXG4vL3Njcm9sbGJhciBzdHlsZVxcbjo6LXdlYmtpdC1zY3JvbGxiYXIge1xcbiAgd2lkdGg6IDRweDtcXG4gIGhlaWdodDogNHB4O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICAvKiBvciBhZGQgaXQgdG8gdGhlIHRyYWNrICovXFxufVxcblxcbjo6LXdlYmtpdC1zY3JvbGxiYXItdGh1bWIge1xcbiAgYmFja2dyb3VuZDojMTE4YmVlO1xcbiAgYm9yZGVyLXJhZGl1czogNXB4O1xcbn1cXG5cXG46Oi13ZWJraXQtc2Nyb2xsYmFyLWNvcm5lciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIC8qIG9yIGFkZCBpdCB0byB0aGUgdHJhY2sgKi9cXG59XCIsXCJodG1sLFxcbmJvZHkge1xcbiAgcGFkZGluZzogMDtcXG4gIG1hcmdpbjogMDtcXG4gIGhlaWdodDogMTAwJTtcXG59XFxuI2FwcCB7XFxuICBoZWlnaHQ6IDEwMCU7XFxufVxcbi5tYWluIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIGhlaWdodDogMTAwJTtcXG4gIGRpc3BsYXk6IGZsZXg7XFxufVxcbi5zaWRlIHtcXG4gIC13ZWJraXQtYXBwLXJlZ2lvbjogZHJhZztcXG4gIHotaW5kZXg6IDE7XFxuICB3aWR0aDogMjAwcHg7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICBvdmVyZmxvdy15OiBoaWRkZW47XFxuICBwYWRkaW5nOiAxMnB4O1xcbiAgYmFja2dyb3VuZDogI2YwZjBmMDtcXG4gIGJvcmRlci1yaWdodDogMXB4IHNvbGlkICNkZWRlZGU7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbn1cXG4uc2lkZSBidXR0b24ge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBib3JkZXItcmFkaXVzOiA1ZW07XFxuICBwYWRkaW5nOiAwLjZlbTtcXG4gIGJvcmRlcjogbm9uZTtcXG4gIGJveC1zaGFkb3c6IDBweCAzcHggMXB4IC0ycHggcmdiYSgwLCAwLCAwLCAwLjIpLCAwcHggMnB4IDJweCAwcHggcmdiYSgwLCAwLCAwLCAwLjE0KSwgMHB4IDFweCA1cHggMHB4IHJnYmEoMCwgMCwgMCwgMC4xMik7XFxuICB0cmFuc2l0aW9uOiBib3gtc2hhZG93IDI4MG1zIGN1YmljLWJlemllcigwLjQsIDAsIDAuMiwgMSk7XFxufVxcbi5zaWRlIC5lbnRyeSB7XFxuICBwYWRkaW5nOiAwIDEycHg7XFxufVxcbi5zaWRlIC5lbnRyeSBpbnB1dCB7XFxuICB3aWR0aDogMTAwJTtcXG4gIGZvbnQtc2l6ZTogMTRweDtcXG59XFxuLnNpZGUgLmVudHJ5IC5zZWxlY3QtZmlsZSB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxufVxcbi5zaWRlIC5lbnRyeSAuc2VsZWN0LWZpbGUgLmlucHV0LWZpbGUge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBsZWZ0OiAwO1xcbiAgdG9wOiAwO1xcbiAgcGFkZGluZzogMDtcXG4gIG1hcmdpbjogMDtcXG4gIG9wYWNpdHk6IDA7XFxufVxcbi5zaWRlIC5lbnRyeSAuc2VsZWN0LWZpbGUgYnV0dG9uIHtcXG4gIGJhY2tncm91bmQ6ICM0YjVjYzQ7XFxuICBjb2xvcjogI2ZmZjtcXG59XFxuLnNpZGUgLmVudHJ5IC5zZWxlY3QtZmlsZTpob3ZlciBidXR0b24ge1xcbiAgYmFja2dyb3VuZDogIzVlNmJjMDtcXG4gIGJveC1zaGFkb3c6IDBweCAycHggNHB4IC0xcHggcmdiYSgwLCAwLCAwLCAwLjIpLCAwcHggNHB4IDVweCAwcHggcmdiYSgwLCAwLCAwLCAwLjE0KSwgMHB4IDFweCAxNXB4IDBweCByZ2JhKDAsIDAsIDAsIDAuMTgpO1xcbn1cXG4uc2lkZSAuY2F0YWxvZyB7XFxuICBoZWlnaHQ6IGNhbGMoMTAwJSAtIDE3NnB4KTtcXG59XFxuLnNpZGUgLmNhdGFsb2cgaDQge1xcbiAgY29sb3I6ICM5OTk7XFxuICBwYWRkaW5nOiAwIDRweDtcXG4gIG1hcmdpbjogMC44ZW0gMDtcXG4gIGZvbnQtc2l6ZTogMTJweDtcXG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XFxuICBjdXJzb3I6IGRlZmF1bHQ7XFxufVxcbi5zaWRlIC5jYXRhbG9nIC5zZWFyY2gtdGV4dCB7XFxuICBtYXJnaW4tYm90dG9tOiAwLjVyZW07XFxufVxcbi5zaWRlIC5jYXRhbG9nIC5lbC10cmVlIHtcXG4gIGhlaWdodDogY2FsYygxMDAlIC0gNzBweCk7XFxuICBvdmVyZmxvdy15OiBhdXRvO1xcbiAgYm9yZGVyOiAxcHggc29saWQgI2RjZGZlNjtcXG4gIGJvcmRlci1yYWRpdXM6IDRweDtcXG59XFxuLnNpZGUgLmNhdGFsb2cgLmVsLXRyZWUtbm9kZV9leHBhbmQtaWNvbi5pcy1sZWFmIHtcXG4gIGNvbG9yOiAjYzBjNGNjO1xcbn1cXG4uc2lkZSAub3V0cHV0IHtcXG4gIHBhZGRpbmc6IDAgMTJweDtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIGJvdHRvbTogMDtcXG59XFxuLnNpZGUgLm91dHB1dCBwIHtcXG4gIGZvbnQtc2l6ZTogMTJweDtcXG4gIGNvbG9yOiAjOTk5O1xcbiAgZm9udC1mYW1pbHk6ICflubzlnIYnO1xcbiAgbWFyZ2luOiAwO1xcbiAgcGFkZGluZy10b3A6IDAuMmVtO1xcbiAgY3Vyc29yOiBkZWZhdWx0O1xcbn1cXG4uc2lkZSAub3V0cHV0IHAgYSB7XFxuICBjb2xvcjogIzk5OTtcXG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XFxufVxcbi5jb250ZW50IHtcXG4gIGhlaWdodDogMTAwJTtcXG4gIGZsZXg6IDE7XFxufVxcbi5jb250ZW50IC5tYWluLWhlYWRlIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBib3gtc2hhZG93OiAxcHggMnB4IDNweCByZ2JhKDAsIDAsIDAsIDAuMDgpO1xcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNkZGQ7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICB6LWluZGV4OiA5OTk7XFxuICBiYWNrZ3JvdW5kOiAjZjBmMGYwO1xcbn1cXG4uY29udGVudCAubWFpbi1oZWFkZSBoMyB7XFxuICB3aWR0aDogY2FsYyg1MCUgLSA5cHgpO1xcbiAgaGVpZ2h0OiAzMHB4O1xcbiAgbGluZS1oZWlnaHQ6IDMwcHg7XFxuICBmb250LXNpemU6IDE0cHg7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgdGV4dC1pbmRlbnQ6IDEwcHg7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICBjdXJzb3I6IGRlZmF1bHQ7XFxufVxcbi5jb250ZW50IC5tYWluLWhlYWRlIGgzIC5ncmF5IHtcXG4gIGZvbnQtc2l6ZTogMTJweDtcXG4gIGNvbG9yOiAjOTk5O1xcbn1cXG4uY29udGVudCBzZWN0aW9uIHtcXG4gIG92ZXJmbG93LXk6IGF1dG87XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgcGFkZGluZy1sZWZ0OiAxMHB4O1xcbiAgcGFkZGluZy1yaWdodDogNXB4O1xcbiAgaGVpZ2h0OiBjYWxjKDEwMCUgLSA1OXB4KTtcXG59XFxuLmNvbnRlbnQgc2VjdGlvbiAubm9kYXRhIHtcXG4gIHBhZGRpbmc6IDQwcHg7XFxuICBwYWRkaW5nLXRvcDogMTIwcHg7XFxuICB3aWR0aDogMTAwJTtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgY29sb3I6ICNjY2M7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICBmb250LXNpemU6IDE0cHg7XFxuICBjdXJzb3I6IGRlZmF1bHQ7XFxufVxcbi5sb2dvIHtcXG4gIC13ZWJraXQtYXBwLXJlZ2lvbjogZHJhZztcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIHBhZGRpbmc6IDEwcHggMDtcXG59XFxuLmxvZ28gaDEge1xcbiAgZm9udC1zaXplOiAxNHB4O1xcbiAgY29sb3I6ICM5OTk7XFxuICBmb250LXdlaWdodDogbm9ybWFsO1xcbiAgY3Vyc29yOiBkZWZhdWx0O1xcbiAgbWFyZ2luOiAwLjNlbTtcXG59XFxuLmxvZ28gYSB7XFxuICBjb2xvcjogIzk5OTtcXG59XFxuLm1pbmkge1xcbiAgcGFkZGluZzogMC4yZW0gMC41ZW07XFxuICBmb250LXNpemU6IDEycHg7XFxuICBtYXJnaW46IDA7XFxuICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcXG4gIGNvbG9yOiAjMTE4YmVlO1xcbiAgYm9yZGVyLXdpZHRoOiAxcHg7XFxuICBsaW5lLWhlaWdodDogMTtcXG4gIGJvcmRlci1yYWRpdXM6IDJweDtcXG59XFxudWwge1xcbiAgbGlzdC1zdHlsZTogbm9uZTtcXG59XFxuLm1haW4taGVhZGUgaDM6bnRoLWNoaWxkKDEpIHtcXG4gIHRleHQtaW5kZW50OiAyMHB4O1xcbn1cXG4ua3Y6bnRoLWNoaWxkKDEpIGRsOjphZnRlciB7XFxuICBjb250ZW50OiAnJztcXG4gIHdpZHRoOiAxcHg7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICBib3JkZXItcmlnaHQ6IDFweCBkYXNoZWQgI2NjYztcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogMnB4O1xcbiAgcmlnaHQ6IDBweDtcXG59XFxuLmt2IHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIHdpZHRoOiA1MCU7XFxufVxcbi5rdiBlbSB7XFxuICBjb2xvcjogdGVhbDtcXG4gIG9wYWNpdHk6IDAuODtcXG59XFxuLmt2IGRsIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIG1hcmdpbjogMDtcXG59XFxuLmt2IGRsOm50aC1jaGlsZChldmVuKSB7XFxuICBiYWNrZ3JvdW5kOiAjZjVmNmY5O1xcbn1cXG4ua3YgZGwgZHQge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBsaW5lLWhlaWdodDogMS40O1xcbn1cXG4ua3YgZGwgZHQgZW0ge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgcGFkZGluZzogNXB4O1xcbn1cXG4ua3YgZGwgZGQge1xcbiAgcGFkZGluZy1ib3R0b206IDEwcHg7XFxuICBwYWRkaW5nLXJpZ2h0OiAxMHB4O1xcbn1cXG4ua3YgZGwgZGQgPiBkaXYge1xcbiAgZGlzcGxheTogZmxleDtcXG59XFxuLmt2IGRsIGRkID4gZGl2IGxhYmVsIHtcXG4gIGZvbnQtc2l6ZTogMTJweDtcXG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XFxuICBjb2xvcjogI2NjYztcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIG1pbi13aWR0aDogMjBweDtcXG4gIHBhZGRpbmc6IDRweDtcXG4gIHRleHQtYWxpZ246IHJpZ2h0O1xcbn1cXG4ua3YgZGwgZGQgdWwge1xcbiAgcGFkZGluZy1sZWZ0OiAxMHB4O1xcbiAgbWFyZ2luOiAwO1xcbn1cXG4ua3YgZGwgZGQgdWwgZW0ge1xcbiAgZm9udC1zaXplOiAxMnB4O1xcbiAgb3BhY2l0eTogMC41O1xcbn1cXG4ua3YgZGwgZGQgLmNoaWxkLWl0ZW0gbGkge1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG59XFxuLmt2IGRsIGRkIC5jaGlsZC1pdGVtIGxpIGVtIHtcXG4gIHBhZGRpbmc6IDRweDtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIHdpZHRoOiA2MHB4O1xcbiAgdGV4dC1hbGlnbjogcmlnaHQ7XFxufVxcbi5rdiB0ZXh0YXJlYSB7XFxuICB3aWR0aDogOTYlO1xcbiAgcmVzaXplOiB2ZXJ0aWNhbDtcXG4gIHRyYW5zaXRpb246IGhlaWdodCAwLjFzO1xcbiAgZm9udC1zaXplOiAxMnB4O1xcbiAgbWFyZ2luLWJvdHRvbTogMDtcXG4gIGhlaWdodDogMzBweDtcXG4gIHBhZGRpbmc6IDRweCA4cHg7XFxuICBsaW5lLWhlaWdodDogMS42O1xcbiAgYm9yZGVyLXJhZGl1czogMHB4O1xcbiAgYmFja2dyb3VuZDogI2ZmZmZmMTtcXG59XFxuLmt2IHRleHRhcmVhOmZvY3VzIHtcXG4gIG91dGxpbmU6IDFweCBzb2xpZCAjOWQ5ZDlkO1xcbiAgb3V0bGluZS1vZmZzZXQ6IC0xcHg7XFxuICBib3gtc2hhZG93OiAwIDAgMTBweCByZ2JhKDAsIDAsIDAsIDAuMik7XFxuICBiYWNrZ3JvdW5kOiAjZmZmZmRmO1xcbn1cXG4uZWwtZGlhbG9nIHtcXG4gIGJhY2tncm91bmQ6ICNFQ0VDRUM7XFxufVxcbi5lbC1kaWFsb2cgLmRpYWxvZy10aXRsZSBlbSB7XFxuICBmb250LXNpemU6IHNtYWxsO1xcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xcbn1cXG4uZWwtZGlhbG9nIGJ1dHRvbiB7XFxuICBtYXJnaW46IDA7XFxufVxcbi5lbC1kaWFsb2cgLmVsLWRpYWxvZ19faGVhZGVyIHtcXG4gIHBhZGRpbmctdG9wOiAxMHB4O1xcbn1cXG4uZWwtZGlhbG9nIC5lbC1kaWFsb2dfX2hlYWRlcmJ0biB7XFxuICB0b3A6IDEwcHg7XFxufVxcbi5lbC1kaWFsb2cgLmVsLWRpYWxvZ19fYm9keSB7XFxuICBwYWRkaW5nOiAyMHB4IDQwcHggMDtcXG59XFxuLmVsLWRpYWxvZyAuZWwtZGlhbG9nX19mb290ZXIge1xcbiAgcGFkZGluZy1yaWdodDogNDBweDtcXG59XFxuOjotd2Via2l0LXNjcm9sbGJhciB7XFxuICB3aWR0aDogNHB4O1xcbiAgaGVpZ2h0OiA0cHg7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIC8qIG9yIGFkZCBpdCB0byB0aGUgdHJhY2sgKi9cXG59XFxuOjotd2Via2l0LXNjcm9sbGJhci10aHVtYiB7XFxuICBiYWNrZ3JvdW5kOiAjMTE4YmVlO1xcbiAgYm9yZGVyLXJhZGl1czogNXB4O1xcbn1cXG46Oi13ZWJraXQtc2Nyb2xsYmFyLWNvcm5lciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIC8qIG9yIGFkZCBpdCB0byB0aGUgdHJhY2sgKi9cXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107IC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblxuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIHJldHVybiBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoY29udGVudCwgXCJ9XCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKCcnKTtcbiAgfTsgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcblxuXG4gIGxpc3QuaSA9IGZ1bmN0aW9uIChtb2R1bGVzLCBtZWRpYVF1ZXJ5LCBkZWR1cGUpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsICcnXV07XG4gICAgfVxuXG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblxuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWRlc3RydWN0dXJpbmdcbiAgICAgICAgdmFyIGlkID0gdGhpc1tpXVswXTtcblxuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBtb2R1bGVzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfaV0pO1xuXG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnRpbnVlXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAobWVkaWFRdWVyeSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWFRdWVyeTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzJdID0gXCJcIi5jb25jYXQobWVkaWFRdWVyeSwgXCIgYW5kIFwiKS5jb25jYXQoaXRlbVsyXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gbGlzdDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkgeyByZXR1cm4gX2FycmF5V2l0aEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFyciwgaSkgfHwgX25vbkl0ZXJhYmxlUmVzdCgpOyB9XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7IH1cblxuZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikgeyBpZiAoIW8pIHJldHVybjsgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpOyBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lOyBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTsgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB9XG5cbmZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7IGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoOyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfVxuXG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcInVuZGVmaW5lZFwiIHx8ICEoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChhcnIpKSkgcmV0dXJuOyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9lID0gdW5kZWZpbmVkOyB0cnkgeyBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSAhPSBudWxsKSBfaVtcInJldHVyblwiXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH1cblxuZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyOyB9XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKSB7XG4gIHZhciBfaXRlbSA9IF9zbGljZWRUb0FycmF5KGl0ZW0sIDQpLFxuICAgICAgY29udGVudCA9IF9pdGVtWzFdLFxuICAgICAgY3NzTWFwcGluZyA9IF9pdGVtWzNdO1xuXG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgdmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgIHJldHVybiBcIi8qIyBzb3VyY2VVUkw9XCIuY29uY2F0KGNzc01hcHBpbmcuc291cmNlUm9vdCB8fCAnJykuY29uY2F0KHNvdXJjZSwgXCIgKi9cIik7XG4gICAgfSk7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbignXFxuJyk7XG4gIH1cblxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oJ1xcbicpO1xufTsiLCIhZnVuY3Rpb24odCxlKXtcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cyYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIG1vZHVsZT9tb2R1bGUuZXhwb3J0cz1lKCk6XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShlKTp0LmRheWpzPWUoKX0odGhpcyxmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO3ZhciB0PVwibWlsbGlzZWNvbmRcIixlPVwic2Vjb25kXCIsbj1cIm1pbnV0ZVwiLHI9XCJob3VyXCIsaT1cImRheVwiLHM9XCJ3ZWVrXCIsdT1cIm1vbnRoXCIsYT1cInF1YXJ0ZXJcIixvPVwieWVhclwiLGY9XCJkYXRlXCIsaD0vXihcXGR7NH0pWy0vXT8oXFxkezEsMn0pP1stL10/KFxcZHswLDJ9KVteMC05XSooXFxkezEsMn0pPzo/KFxcZHsxLDJ9KT86PyhcXGR7MSwyfSk/Lj8oXFxkKyk/JC8sYz0vXFxbKFteXFxdXSspXXxZezEsNH18TXsxLDR9fER7MSwyfXxkezEsNH18SHsxLDJ9fGh7MSwyfXxhfEF8bXsxLDJ9fHN7MSwyfXxaezEsMn18U1NTL2csZD17bmFtZTpcImVuXCIsd2Vla2RheXM6XCJTdW5kYXlfTW9uZGF5X1R1ZXNkYXlfV2VkbmVzZGF5X1RodXJzZGF5X0ZyaWRheV9TYXR1cmRheVwiLnNwbGl0KFwiX1wiKSxtb250aHM6XCJKYW51YXJ5X0ZlYnJ1YXJ5X01hcmNoX0FwcmlsX01heV9KdW5lX0p1bHlfQXVndXN0X1NlcHRlbWJlcl9PY3RvYmVyX05vdmVtYmVyX0RlY2VtYmVyXCIuc3BsaXQoXCJfXCIpfSwkPWZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1TdHJpbmcodCk7cmV0dXJuIXJ8fHIubGVuZ3RoPj1lP3Q6XCJcIitBcnJheShlKzEtci5sZW5ndGgpLmpvaW4obikrdH0sbD17czokLHo6ZnVuY3Rpb24odCl7dmFyIGU9LXQudXRjT2Zmc2V0KCksbj1NYXRoLmFicyhlKSxyPU1hdGguZmxvb3Iobi82MCksaT1uJTYwO3JldHVybihlPD0wP1wiK1wiOlwiLVwiKSskKHIsMixcIjBcIikrXCI6XCIrJChpLDIsXCIwXCIpfSxtOmZ1bmN0aW9uIHQoZSxuKXtpZihlLmRhdGUoKTxuLmRhdGUoKSlyZXR1cm4tdChuLGUpO3ZhciByPTEyKihuLnllYXIoKS1lLnllYXIoKSkrKG4ubW9udGgoKS1lLm1vbnRoKCkpLGk9ZS5jbG9uZSgpLmFkZChyLHUpLHM9bi1pPDAsYT1lLmNsb25lKCkuYWRkKHIrKHM/LTE6MSksdSk7cmV0dXJuKygtKHIrKG4taSkvKHM/aS1hOmEtaSkpfHwwKX0sYTpmdW5jdGlvbih0KXtyZXR1cm4gdDwwP01hdGguY2VpbCh0KXx8MDpNYXRoLmZsb29yKHQpfSxwOmZ1bmN0aW9uKGgpe3JldHVybntNOnUseTpvLHc6cyxkOmksRDpmLGg6cixtOm4sczplLG1zOnQsUTphfVtoXXx8U3RyaW5nKGh8fFwiXCIpLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvcyQvLFwiXCIpfSx1OmZ1bmN0aW9uKHQpe3JldHVybiB2b2lkIDA9PT10fX0seT1cImVuXCIsTT17fTtNW3ldPWQ7dmFyIG09ZnVuY3Rpb24odCl7cmV0dXJuIHQgaW5zdGFuY2VvZiBTfSxEPWZ1bmN0aW9uKHQsZSxuKXt2YXIgcjtpZighdClyZXR1cm4geTtpZihcInN0cmluZ1wiPT10eXBlb2YgdClNW3RdJiYocj10KSxlJiYoTVt0XT1lLHI9dCk7ZWxzZXt2YXIgaT10Lm5hbWU7TVtpXT10LHI9aX1yZXR1cm4hbiYmciYmKHk9cikscnx8IW4mJnl9LHY9ZnVuY3Rpb24odCxlKXtpZihtKHQpKXJldHVybiB0LmNsb25lKCk7dmFyIG49XCJvYmplY3RcIj09dHlwZW9mIGU/ZTp7fTtyZXR1cm4gbi5kYXRlPXQsbi5hcmdzPWFyZ3VtZW50cyxuZXcgUyhuKX0sZz1sO2cubD1ELGcuaT1tLGcudz1mdW5jdGlvbih0LGUpe3JldHVybiB2KHQse2xvY2FsZTplLiRMLHV0YzplLiR1LHg6ZS4keCwkb2Zmc2V0OmUuJG9mZnNldH0pfTt2YXIgUz1mdW5jdGlvbigpe2Z1bmN0aW9uIGQodCl7dGhpcy4kTD1EKHQubG9jYWxlLG51bGwsITApLHRoaXMucGFyc2UodCl9dmFyICQ9ZC5wcm90b3R5cGU7cmV0dXJuICQucGFyc2U9ZnVuY3Rpb24odCl7dGhpcy4kZD1mdW5jdGlvbih0KXt2YXIgZT10LmRhdGUsbj10LnV0YztpZihudWxsPT09ZSlyZXR1cm4gbmV3IERhdGUoTmFOKTtpZihnLnUoZSkpcmV0dXJuIG5ldyBEYXRlO2lmKGUgaW5zdGFuY2VvZiBEYXRlKXJldHVybiBuZXcgRGF0ZShlKTtpZihcInN0cmluZ1wiPT10eXBlb2YgZSYmIS9aJC9pLnRlc3QoZSkpe3ZhciByPWUubWF0Y2goaCk7aWYocil7dmFyIGk9clsyXS0xfHwwLHM9KHJbN118fFwiMFwiKS5zdWJzdHJpbmcoMCwzKTtyZXR1cm4gbj9uZXcgRGF0ZShEYXRlLlVUQyhyWzFdLGksclszXXx8MSxyWzRdfHwwLHJbNV18fDAscls2XXx8MCxzKSk6bmV3IERhdGUoclsxXSxpLHJbM118fDEscls0XXx8MCxyWzVdfHwwLHJbNl18fDAscyl9fXJldHVybiBuZXcgRGF0ZShlKX0odCksdGhpcy4keD10Lnh8fHt9LHRoaXMuaW5pdCgpfSwkLmluaXQ9ZnVuY3Rpb24oKXt2YXIgdD10aGlzLiRkO3RoaXMuJHk9dC5nZXRGdWxsWWVhcigpLHRoaXMuJE09dC5nZXRNb250aCgpLHRoaXMuJEQ9dC5nZXREYXRlKCksdGhpcy4kVz10LmdldERheSgpLHRoaXMuJEg9dC5nZXRIb3VycygpLHRoaXMuJG09dC5nZXRNaW51dGVzKCksdGhpcy4kcz10LmdldFNlY29uZHMoKSx0aGlzLiRtcz10LmdldE1pbGxpc2Vjb25kcygpfSwkLiR1dGlscz1mdW5jdGlvbigpe3JldHVybiBnfSwkLmlzVmFsaWQ9ZnVuY3Rpb24oKXtyZXR1cm4hKFwiSW52YWxpZCBEYXRlXCI9PT10aGlzLiRkLnRvU3RyaW5nKCkpfSwkLmlzU2FtZT1mdW5jdGlvbih0LGUpe3ZhciBuPXYodCk7cmV0dXJuIHRoaXMuc3RhcnRPZihlKTw9biYmbjw9dGhpcy5lbmRPZihlKX0sJC5pc0FmdGVyPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHYodCk8dGhpcy5zdGFydE9mKGUpfSwkLmlzQmVmb3JlPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMuZW5kT2YoZSk8dih0KX0sJC4kZz1mdW5jdGlvbih0LGUsbil7cmV0dXJuIGcudSh0KT90aGlzW2VdOnRoaXMuc2V0KG4sdCl9LCQudW5peD1mdW5jdGlvbigpe3JldHVybiBNYXRoLmZsb29yKHRoaXMudmFsdWVPZigpLzFlMyl9LCQudmFsdWVPZj1mdW5jdGlvbigpe3JldHVybiB0aGlzLiRkLmdldFRpbWUoKX0sJC5zdGFydE9mPWZ1bmN0aW9uKHQsYSl7dmFyIGg9dGhpcyxjPSEhZy51KGEpfHxhLGQ9Zy5wKHQpLCQ9ZnVuY3Rpb24odCxlKXt2YXIgbj1nLncoaC4kdT9EYXRlLlVUQyhoLiR5LGUsdCk6bmV3IERhdGUoaC4keSxlLHQpLGgpO3JldHVybiBjP246bi5lbmRPZihpKX0sbD1mdW5jdGlvbih0LGUpe3JldHVybiBnLncoaC50b0RhdGUoKVt0XS5hcHBseShoLnRvRGF0ZShcInNcIiksKGM/WzAsMCwwLDBdOlsyMyw1OSw1OSw5OTldKS5zbGljZShlKSksaCl9LHk9dGhpcy4kVyxNPXRoaXMuJE0sbT10aGlzLiRELEQ9XCJzZXRcIisodGhpcy4kdT9cIlVUQ1wiOlwiXCIpO3N3aXRjaChkKXtjYXNlIG86cmV0dXJuIGM/JCgxLDApOiQoMzEsMTEpO2Nhc2UgdTpyZXR1cm4gYz8kKDEsTSk6JCgwLE0rMSk7Y2FzZSBzOnZhciB2PXRoaXMuJGxvY2FsZSgpLndlZWtTdGFydHx8MCxTPSh5PHY/eSs3OnkpLXY7cmV0dXJuICQoYz9tLVM6bSsoNi1TKSxNKTtjYXNlIGk6Y2FzZSBmOnJldHVybiBsKEQrXCJIb3Vyc1wiLDApO2Nhc2UgcjpyZXR1cm4gbChEK1wiTWludXRlc1wiLDEpO2Nhc2UgbjpyZXR1cm4gbChEK1wiU2Vjb25kc1wiLDIpO2Nhc2UgZTpyZXR1cm4gbChEK1wiTWlsbGlzZWNvbmRzXCIsMyk7ZGVmYXVsdDpyZXR1cm4gdGhpcy5jbG9uZSgpfX0sJC5lbmRPZj1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5zdGFydE9mKHQsITEpfSwkLiRzZXQ9ZnVuY3Rpb24ocyxhKXt2YXIgaCxjPWcucChzKSxkPVwic2V0XCIrKHRoaXMuJHU/XCJVVENcIjpcIlwiKSwkPShoPXt9LGhbaV09ZCtcIkRhdGVcIixoW2ZdPWQrXCJEYXRlXCIsaFt1XT1kK1wiTW9udGhcIixoW29dPWQrXCJGdWxsWWVhclwiLGhbcl09ZCtcIkhvdXJzXCIsaFtuXT1kK1wiTWludXRlc1wiLGhbZV09ZCtcIlNlY29uZHNcIixoW3RdPWQrXCJNaWxsaXNlY29uZHNcIixoKVtjXSxsPWM9PT1pP3RoaXMuJEQrKGEtdGhpcy4kVyk6YTtpZihjPT09dXx8Yz09PW8pe3ZhciB5PXRoaXMuY2xvbmUoKS5zZXQoZiwxKTt5LiRkWyRdKGwpLHkuaW5pdCgpLHRoaXMuJGQ9eS5zZXQoZixNYXRoLm1pbih0aGlzLiRELHkuZGF5c0luTW9udGgoKSkpLiRkfWVsc2UgJCYmdGhpcy4kZFskXShsKTtyZXR1cm4gdGhpcy5pbml0KCksdGhpc30sJC5zZXQ9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy5jbG9uZSgpLiRzZXQodCxlKX0sJC5nZXQ9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXNbZy5wKHQpXSgpfSwkLmFkZD1mdW5jdGlvbih0LGEpe3ZhciBmLGg9dGhpczt0PU51bWJlcih0KTt2YXIgYz1nLnAoYSksZD1mdW5jdGlvbihlKXt2YXIgbj12KGgpO3JldHVybiBnLncobi5kYXRlKG4uZGF0ZSgpK01hdGgucm91bmQoZSp0KSksaCl9O2lmKGM9PT11KXJldHVybiB0aGlzLnNldCh1LHRoaXMuJE0rdCk7aWYoYz09PW8pcmV0dXJuIHRoaXMuc2V0KG8sdGhpcy4keSt0KTtpZihjPT09aSlyZXR1cm4gZCgxKTtpZihjPT09cylyZXR1cm4gZCg3KTt2YXIgJD0oZj17fSxmW25dPTZlNCxmW3JdPTM2ZTUsZltlXT0xZTMsZilbY118fDEsbD10aGlzLiRkLmdldFRpbWUoKSt0KiQ7cmV0dXJuIGcudyhsLHRoaXMpfSwkLnN1YnRyYWN0PWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMuYWRkKC0xKnQsZSl9LCQuZm9ybWF0PWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXM7aWYoIXRoaXMuaXNWYWxpZCgpKXJldHVyblwiSW52YWxpZCBEYXRlXCI7dmFyIG49dHx8XCJZWVlZLU1NLUREVEhIOm1tOnNzWlwiLHI9Zy56KHRoaXMpLGk9dGhpcy4kbG9jYWxlKCkscz10aGlzLiRILHU9dGhpcy4kbSxhPXRoaXMuJE0sbz1pLndlZWtkYXlzLGY9aS5tb250aHMsaD1mdW5jdGlvbih0LHIsaSxzKXtyZXR1cm4gdCYmKHRbcl18fHQoZSxuKSl8fGlbcl0uc3Vic3RyKDAscyl9LGQ9ZnVuY3Rpb24odCl7cmV0dXJuIGcucyhzJTEyfHwxMix0LFwiMFwiKX0sJD1pLm1lcmlkaWVtfHxmdW5jdGlvbih0LGUsbil7dmFyIHI9dDwxMj9cIkFNXCI6XCJQTVwiO3JldHVybiBuP3IudG9Mb3dlckNhc2UoKTpyfSxsPXtZWTpTdHJpbmcodGhpcy4keSkuc2xpY2UoLTIpLFlZWVk6dGhpcy4keSxNOmErMSxNTTpnLnMoYSsxLDIsXCIwXCIpLE1NTTpoKGkubW9udGhzU2hvcnQsYSxmLDMpLE1NTU06aChmLGEpLEQ6dGhpcy4kRCxERDpnLnModGhpcy4kRCwyLFwiMFwiKSxkOlN0cmluZyh0aGlzLiRXKSxkZDpoKGkud2Vla2RheXNNaW4sdGhpcy4kVyxvLDIpLGRkZDpoKGkud2Vla2RheXNTaG9ydCx0aGlzLiRXLG8sMyksZGRkZDpvW3RoaXMuJFddLEg6U3RyaW5nKHMpLEhIOmcucyhzLDIsXCIwXCIpLGg6ZCgxKSxoaDpkKDIpLGE6JChzLHUsITApLEE6JChzLHUsITEpLG06U3RyaW5nKHUpLG1tOmcucyh1LDIsXCIwXCIpLHM6U3RyaW5nKHRoaXMuJHMpLHNzOmcucyh0aGlzLiRzLDIsXCIwXCIpLFNTUzpnLnModGhpcy4kbXMsMyxcIjBcIiksWjpyfTtyZXR1cm4gbi5yZXBsYWNlKGMsZnVuY3Rpb24odCxlKXtyZXR1cm4gZXx8bFt0XXx8ci5yZXBsYWNlKFwiOlwiLFwiXCIpfSl9LCQudXRjT2Zmc2V0PWZ1bmN0aW9uKCl7cmV0dXJuIDE1Ki1NYXRoLnJvdW5kKHRoaXMuJGQuZ2V0VGltZXpvbmVPZmZzZXQoKS8xNSl9LCQuZGlmZj1mdW5jdGlvbih0LGYsaCl7dmFyIGMsZD1nLnAoZiksJD12KHQpLGw9NmU0KigkLnV0Y09mZnNldCgpLXRoaXMudXRjT2Zmc2V0KCkpLHk9dGhpcy0kLE09Zy5tKHRoaXMsJCk7cmV0dXJuIE09KGM9e30sY1tvXT1NLzEyLGNbdV09TSxjW2FdPU0vMyxjW3NdPSh5LWwpLzYwNDhlNSxjW2ldPSh5LWwpLzg2NGU1LGNbcl09eS8zNmU1LGNbbl09eS82ZTQsY1tlXT15LzFlMyxjKVtkXXx8eSxoP006Zy5hKE0pfSwkLmRheXNJbk1vbnRoPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZW5kT2YodSkuJER9LCQuJGxvY2FsZT1mdW5jdGlvbigpe3JldHVybiBNW3RoaXMuJExdfSwkLmxvY2FsZT1mdW5jdGlvbih0LGUpe2lmKCF0KXJldHVybiB0aGlzLiRMO3ZhciBuPXRoaXMuY2xvbmUoKSxyPUQodCxlLCEwKTtyZXR1cm4gciYmKG4uJEw9ciksbn0sJC5jbG9uZT1mdW5jdGlvbigpe3JldHVybiBnLncodGhpcy4kZCx0aGlzKX0sJC50b0RhdGU9ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IERhdGUodGhpcy52YWx1ZU9mKCkpfSwkLnRvSlNPTj1mdW5jdGlvbigpe3JldHVybiB0aGlzLmlzVmFsaWQoKT90aGlzLnRvSVNPU3RyaW5nKCk6bnVsbH0sJC50b0lTT1N0cmluZz1mdW5jdGlvbigpe3JldHVybiB0aGlzLiRkLnRvSVNPU3RyaW5nKCl9LCQudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy4kZC50b1VUQ1N0cmluZygpfSxkfSgpLHA9Uy5wcm90b3R5cGU7cmV0dXJuIHYucHJvdG90eXBlPXAsW1tcIiRtc1wiLHRdLFtcIiRzXCIsZV0sW1wiJG1cIixuXSxbXCIkSFwiLHJdLFtcIiRXXCIsaV0sW1wiJE1cIix1XSxbXCIkeVwiLG9dLFtcIiREXCIsZl1dLmZvckVhY2goZnVuY3Rpb24odCl7cFt0WzFdXT1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy4kZyhlLHRbMF0sdFsxXSl9fSksdi5leHRlbmQ9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdC4kaXx8KHQoZSxTLHYpLHQuJGk9ITApLHZ9LHYubG9jYWxlPUQsdi5pc0RheWpzPW0sdi51bml4PWZ1bmN0aW9uKHQpe3JldHVybiB2KDFlMyp0KX0sdi5lbj1NW3ldLHYuTHM9TSx2LnA9e30sdn0pO1xuIiwiIWZ1bmN0aW9uKGUsdCl7XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHMmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBtb2R1bGU/bW9kdWxlLmV4cG9ydHM9dCgpOlwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUodCk6ZS5kYXlqc19wbHVnaW5fYWR2YW5jZWRGb3JtYXQ9dCgpfSh0aGlzLGZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7cmV0dXJuIGZ1bmN0aW9uKGUsdCxyKXt2YXIgbj10LnByb3RvdHlwZSxhPW4uZm9ybWF0O3IuZW4ub3JkaW5hbD1mdW5jdGlvbihlKXt2YXIgdD1bXCJ0aFwiLFwic3RcIixcIm5kXCIsXCJyZFwiXSxyPWUlMTAwO3JldHVyblwiW1wiK2UrKHRbKHItMjApJTEwXXx8dFtyXXx8dFswXSkrXCJdXCJ9LG4uZm9ybWF0PWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMscj10aGlzLiRsb2NhbGUoKSxuPXRoaXMuJHV0aWxzKCksbz0oZXx8XCJZWVlZLU1NLUREVEhIOm1tOnNzWlwiKS5yZXBsYWNlKC9cXFsoW15cXF1dKyldfFF8d298d3d8d3x6enp8enxnZ2dnfERvfFh8eHxrezEsMn18Uy9nLGZ1bmN0aW9uKGUpe3N3aXRjaChlKXtjYXNlXCJRXCI6cmV0dXJuIE1hdGguY2VpbCgodC4kTSsxKS8zKTtjYXNlXCJEb1wiOnJldHVybiByLm9yZGluYWwodC4kRCk7Y2FzZVwiZ2dnZ1wiOnJldHVybiB0LndlZWtZZWFyKCk7Y2FzZVwid29cIjpyZXR1cm4gci5vcmRpbmFsKHQud2VlaygpLFwiV1wiKTtjYXNlXCJ3XCI6Y2FzZVwid3dcIjpyZXR1cm4gbi5zKHQud2VlaygpLFwid1wiPT09ZT8xOjIsXCIwXCIpO2Nhc2VcImtcIjpjYXNlXCJra1wiOnJldHVybiBuLnMoU3RyaW5nKDA9PT10LiRIPzI0OnQuJEgpLFwia1wiPT09ZT8xOjIsXCIwXCIpO2Nhc2VcIlhcIjpyZXR1cm4gTWF0aC5mbG9vcih0LiRkLmdldFRpbWUoKS8xZTMpO2Nhc2VcInhcIjpyZXR1cm4gdC4kZC5nZXRUaW1lKCk7Y2FzZVwielwiOnJldHVyblwiW1wiK3Qub2Zmc2V0TmFtZSgpK1wiXVwiO2Nhc2VcInp6elwiOnJldHVyblwiW1wiK3Qub2Zmc2V0TmFtZShcImxvbmdcIikrXCJdXCI7ZGVmYXVsdDpyZXR1cm4gZX19KTtyZXR1cm4gYS5iaW5kKHRoaXMpKG8pfX19KTtcbiIsIiFmdW5jdGlvbih0LGUpe1wib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgbW9kdWxlP21vZHVsZS5leHBvcnRzPWUoKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKGUpOnQuZGF5anNfcGx1Z2luX2N1c3RvbVBhcnNlRm9ybWF0PWUoKX0odGhpcyxmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO3ZhciB0LGU9e0xUUzpcImg6bW06c3MgQVwiLExUOlwiaDptbSBBXCIsTDpcIk1NL0REL1lZWVlcIixMTDpcIk1NTU0gRCwgWVlZWVwiLExMTDpcIk1NTU0gRCwgWVlZWSBoOm1tIEFcIixMTExMOlwiZGRkZCwgTU1NTSBELCBZWVlZIGg6bW0gQVwifSxuPWZ1bmN0aW9uKHQsbil7cmV0dXJuIHQucmVwbGFjZSgvKFxcW1teXFxdXStdKXwoTFRTP3xsezEsNH18THsxLDR9KS9nLGZ1bmN0aW9uKHQscixpKXt2YXIgbz1pJiZpLnRvVXBwZXJDYXNlKCk7cmV0dXJuIHJ8fG5baV18fGVbaV18fG5bb10ucmVwbGFjZSgvKFxcW1teXFxdXStdKXwoTU1NTXxNTXxERHxkZGRkKS9nLGZ1bmN0aW9uKHQsZSxuKXtyZXR1cm4gZXx8bi5zbGljZSgxKX0pfSl9LHI9LyhcXFtbXltdKlxcXSl8KFstOi8uKClcXHNdKyl8KEF8YXxZWVlZfFlZP3xNTT9NP00/fERvfEREP3xoaD98SEg/fG1tP3xzcz98U3sxLDN9fHp8Wlo/KS9nLGk9L1xcZFxcZC8sbz0vXFxkXFxkPy8scz0vXFxkKlteXFxzXFxkLTovKCldKy87dmFyIGE9ZnVuY3Rpb24odCl7cmV0dXJuIGZ1bmN0aW9uKGUpe3RoaXNbdF09K2V9fSxmPVsvWystXVxcZFxcZDo/KFxcZFxcZCk/LyxmdW5jdGlvbih0KXsodGhpcy56b25lfHwodGhpcy56b25lPXt9KSkub2Zmc2V0PWZ1bmN0aW9uKHQpe2lmKCF0KXJldHVybiAwO3ZhciBlPXQubWF0Y2goLyhbKy1dfFxcZFxcZCkvZyksbj02MCplWzFdKygrZVsyXXx8MCk7cmV0dXJuIDA9PT1uPzA6XCIrXCI9PT1lWzBdPy1uOm59KHQpfV0sdT1mdW5jdGlvbihlKXt2YXIgbj10W2VdO3JldHVybiBuJiYobi5pbmRleE9mP246bi5zLmNvbmNhdChuLmYpKX0saD1mdW5jdGlvbihlLG4pe3ZhciByLGk9dC5tZXJpZGllbTtpZihpKXtmb3IodmFyIG89MTtvPD0yNDtvKz0xKWlmKGUuaW5kZXhPZihpKG8sMCxuKSk+LTEpe3I9bz4xMjticmVha319ZWxzZSByPWU9PT0obj9cInBtXCI6XCJQTVwiKTtyZXR1cm4gcn0sZD17QTpbcyxmdW5jdGlvbih0KXt0aGlzLmFmdGVybm9vbj1oKHQsITEpfV0sYTpbcyxmdW5jdGlvbih0KXt0aGlzLmFmdGVybm9vbj1oKHQsITApfV0sUzpbL1xcZC8sZnVuY3Rpb24odCl7dGhpcy5taWxsaXNlY29uZHM9MTAwKit0fV0sU1M6W2ksZnVuY3Rpb24odCl7dGhpcy5taWxsaXNlY29uZHM9MTAqK3R9XSxTU1M6Wy9cXGR7M30vLGZ1bmN0aW9uKHQpe3RoaXMubWlsbGlzZWNvbmRzPSt0fV0sczpbbyxhKFwic2Vjb25kc1wiKV0sc3M6W28sYShcInNlY29uZHNcIildLG06W28sYShcIm1pbnV0ZXNcIildLG1tOltvLGEoXCJtaW51dGVzXCIpXSxIOltvLGEoXCJob3Vyc1wiKV0saDpbbyxhKFwiaG91cnNcIildLEhIOltvLGEoXCJob3Vyc1wiKV0saGg6W28sYShcImhvdXJzXCIpXSxEOltvLGEoXCJkYXlcIildLEREOltpLGEoXCJkYXlcIildLERvOltzLGZ1bmN0aW9uKGUpe3ZhciBuPXQub3JkaW5hbCxyPWUubWF0Y2goL1xcZCsvKTtpZih0aGlzLmRheT1yWzBdLG4pZm9yKHZhciBpPTE7aTw9MzE7aSs9MSluKGkpLnJlcGxhY2UoL1xcW3xcXF0vZyxcIlwiKT09PWUmJih0aGlzLmRheT1pKX1dLE06W28sYShcIm1vbnRoXCIpXSxNTTpbaSxhKFwibW9udGhcIildLE1NTTpbcyxmdW5jdGlvbih0KXt2YXIgZT11KFwibW9udGhzXCIpLG49KHUoXCJtb250aHNTaG9ydFwiKXx8ZS5tYXAoZnVuY3Rpb24odCl7cmV0dXJuIHQuc3Vic3RyKDAsMyl9KSkuaW5kZXhPZih0KSsxO2lmKG48MSl0aHJvdyBuZXcgRXJyb3I7dGhpcy5tb250aD1uJTEyfHxufV0sTU1NTTpbcyxmdW5jdGlvbih0KXt2YXIgZT11KFwibW9udGhzXCIpLmluZGV4T2YodCkrMTtpZihlPDEpdGhyb3cgbmV3IEVycm9yO3RoaXMubW9udGg9ZSUxMnx8ZX1dLFk6Wy9bKy1dP1xcZCsvLGEoXCJ5ZWFyXCIpXSxZWTpbaSxmdW5jdGlvbih0KXt0PSt0LHRoaXMueWVhcj10Kyh0PjY4PzE5MDA6MmUzKX1dLFlZWVk6Wy9cXGR7NH0vLGEoXCJ5ZWFyXCIpXSxaOmYsWlo6Zn07dmFyIGM9ZnVuY3Rpb24oZSxpLG8pe3RyeXt2YXIgcz1mdW5jdGlvbihlKXtmb3IodmFyIGk9KGU9bihlLHQmJnQuZm9ybWF0cykpLm1hdGNoKHIpLG89aS5sZW5ndGgscz0wO3M8bztzKz0xKXt2YXIgYT1pW3NdLGY9ZFthXSx1PWYmJmZbMF0saD1mJiZmWzFdO2lbc109aD97cmVnZXg6dSxwYXJzZXI6aH06YS5yZXBsYWNlKC9eXFxbfFxcXSQvZyxcIlwiKX1yZXR1cm4gZnVuY3Rpb24odCl7Zm9yKHZhciBlPXt9LG49MCxyPTA7bjxvO24rPTEpe3ZhciBzPWlbbl07aWYoXCJzdHJpbmdcIj09dHlwZW9mIHMpcis9cy5sZW5ndGg7ZWxzZXt2YXIgYT1zLnJlZ2V4LGY9cy5wYXJzZXIsdT10LnN1YnN0cihyKSxoPWEuZXhlYyh1KVswXTtmLmNhbGwoZSxoKSx0PXQucmVwbGFjZShoLFwiXCIpfX1yZXR1cm4gZnVuY3Rpb24odCl7dmFyIGU9dC5hZnRlcm5vb247aWYodm9pZCAwIT09ZSl7dmFyIG49dC5ob3VycztlP248MTImJih0LmhvdXJzKz0xMik6MTI9PT1uJiYodC5ob3Vycz0wKSxkZWxldGUgdC5hZnRlcm5vb259fShlKSxlfX0oaSkoZSksYT1zLnllYXIsZj1zLm1vbnRoLHU9cy5kYXksaD1zLmhvdXJzLGM9cy5taW51dGVzLG09cy5zZWNvbmRzLGw9cy5taWxsaXNlY29uZHMsTT1zLnpvbmUsWT1uZXcgRGF0ZSx2PXV8fChhfHxmPzE6WS5nZXREYXRlKCkpLHA9YXx8WS5nZXRGdWxsWWVhcigpLEQ9MDthJiYhZnx8KEQ9Zj4wP2YtMTpZLmdldE1vbnRoKCkpO3ZhciB5PWh8fDAsTD1jfHwwLGc9bXx8MCwkPWx8fDA7cmV0dXJuIE0/bmV3IERhdGUoRGF0ZS5VVEMocCxELHYseSxMLGcsJCs2MCpNLm9mZnNldCoxZTMpKTpvP25ldyBEYXRlKERhdGUuVVRDKHAsRCx2LHksTCxnLCQpKTpuZXcgRGF0ZShwLEQsdix5LEwsZywkKX1jYXRjaCh0KXtyZXR1cm4gbmV3IERhdGUoXCJcIil9fTtyZXR1cm4gZnVuY3Rpb24oZSxuLHIpe3IucC5jdXN0b21QYXJzZUZvcm1hdD0hMDt2YXIgaT1uLnByb3RvdHlwZSxvPWkucGFyc2U7aS5wYXJzZT1mdW5jdGlvbihlKXt2YXIgbj1lLmRhdGUsaT1lLnV0YyxzPWUuYXJnczt0aGlzLiR1PWk7dmFyIGE9c1sxXTtpZihcInN0cmluZ1wiPT10eXBlb2YgYSl7dmFyIGY9ITA9PT1zWzJdLHU9ITA9PT1zWzNdLGg9Znx8dSxkPXNbMl07dSYmKGQ9c1syXSksZnx8KHQ9ZD9yLkxzW2RdOnRoaXMuJGxvY2FsZSgpKSx0aGlzLiRkPWMobixhLGkpLHRoaXMuaW5pdCgpLGQmJiEwIT09ZCYmKHRoaXMuJEw9dGhpcy5sb2NhbGUoZCkuJEwpLGgmJm4hPT10aGlzLmZvcm1hdChhKSYmKHRoaXMuJGQ9bmV3IERhdGUoXCJcIikpLHQ9dm9pZCAwfWVsc2UgaWYoYSBpbnN0YW5jZW9mIEFycmF5KWZvcih2YXIgbT1hLmxlbmd0aCxsPTE7bDw9bTtsKz0xKXtzWzFdPWFbbC0xXTt2YXIgTT1yLmFwcGx5KHRoaXMscyk7aWYoTS5pc1ZhbGlkKCkpe3RoaXMuJGQ9TS4kZCx0aGlzLiRMPU0uJEwsdGhpcy5pbml0KCk7YnJlYWt9bD09PW0mJih0aGlzLiRkPW5ldyBEYXRlKFwiXCIpKX1lbHNlIG8uY2FsbCh0aGlzLGUpfX19KTtcbiIsIiFmdW5jdGlvbihlLHQpe1wib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgbW9kdWxlP21vZHVsZS5leHBvcnRzPXQoKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKHQpOmUuZGF5anNfcGx1Z2luX2lzTGVhcFllYXI9dCgpfSh0aGlzLGZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7cmV0dXJuIGZ1bmN0aW9uKGUsdCl7dC5wcm90b3R5cGUuaXNMZWFwWWVhcj1mdW5jdGlvbigpe3JldHVybiB0aGlzLiR5JTQ9PTAmJnRoaXMuJHklMTAwIT0wfHx0aGlzLiR5JTQwMD09MH19fSk7XG4iLCIhZnVuY3Rpb24oZSx0KXtcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cyYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIG1vZHVsZT9tb2R1bGUuZXhwb3J0cz10KCk6XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZSh0KTplLmRheWpzX3BsdWdpbl9pc1NhbWVPckFmdGVyPXQoKX0odGhpcyxmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO3JldHVybiBmdW5jdGlvbihlLHQpe3QucHJvdG90eXBlLmlzU2FtZU9yQWZ0ZXI9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdGhpcy5pc1NhbWUoZSx0KXx8dGhpcy5pc0FmdGVyKGUsdCl9fX0pO1xuIiwiIWZ1bmN0aW9uKGUsdCl7XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHMmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBtb2R1bGU/bW9kdWxlLmV4cG9ydHM9dCgpOlwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUodCk6ZS5kYXlqc19wbHVnaW5faXNTYW1lT3JCZWZvcmU9dCgpfSh0aGlzLGZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7cmV0dXJuIGZ1bmN0aW9uKGUsdCl7dC5wcm90b3R5cGUuaXNTYW1lT3JCZWZvcmU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdGhpcy5pc1NhbWUoZSx0KXx8dGhpcy5pc0JlZm9yZShlLHQpfX19KTtcbiIsIiFmdW5jdGlvbihuLHQpe1wib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgbW9kdWxlP21vZHVsZS5leHBvcnRzPXQoKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKHQpOm4uZGF5anNfcGx1Z2luX2xvY2FsZURhdGE9dCgpfSh0aGlzLGZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7cmV0dXJuIGZ1bmN0aW9uKG4sdCxlKXt2YXIgcj1mdW5jdGlvbihuKXtyZXR1cm4gbiYmKG4uaW5kZXhPZj9uOm4ucyl9LG89ZnVuY3Rpb24obix0LGUsbyx1KXt2YXIgYT1uLm5hbWU/bjpuLiRsb2NhbGUoKSxpPXIoYVt0XSkscz1yKGFbZV0pLGY9aXx8cy5tYXAoZnVuY3Rpb24obil7cmV0dXJuIG4uc3Vic3RyKDAsbyl9KTtpZighdSlyZXR1cm4gZjt2YXIgZD1hLndlZWtTdGFydDtyZXR1cm4gZi5tYXAoZnVuY3Rpb24obix0KXtyZXR1cm4gZlsodCsoZHx8MCkpJTddfSl9LHU9ZnVuY3Rpb24oKXtyZXR1cm4gZS5Mc1tlLmxvY2FsZSgpXX0sYT1mdW5jdGlvbihuLHQpe3JldHVybiBuLmZvcm1hdHNbdF18fGZ1bmN0aW9uKG4pe3JldHVybiBuLnJlcGxhY2UoLyhcXFtbXlxcXV0rXSl8KE1NTU18TU18RER8ZGRkZCkvZyxmdW5jdGlvbihuLHQsZSl7cmV0dXJuIHR8fGUuc2xpY2UoMSl9KX0obi5mb3JtYXRzW3QudG9VcHBlckNhc2UoKV0pfTt0LnByb3RvdHlwZS5sb2NhbGVEYXRhPWZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIG49dGhpcztyZXR1cm57bW9udGhzOmZ1bmN0aW9uKHQpe3JldHVybiB0P3QuZm9ybWF0KFwiTU1NTVwiKTpvKG4sXCJtb250aHNcIil9LG1vbnRoc1Nob3J0OmZ1bmN0aW9uKHQpe3JldHVybiB0P3QuZm9ybWF0KFwiTU1NXCIpOm8obixcIm1vbnRoc1Nob3J0XCIsXCJtb250aHNcIiwzKX0sZmlyc3REYXlPZldlZWs6ZnVuY3Rpb24oKXtyZXR1cm4gbi4kbG9jYWxlKCkud2Vla1N0YXJ0fHwwfSx3ZWVrZGF5czpmdW5jdGlvbih0KXtyZXR1cm4gdD90LmZvcm1hdChcImRkZGRcIik6byhuLFwid2Vla2RheXNcIil9LHdlZWtkYXlzTWluOmZ1bmN0aW9uKHQpe3JldHVybiB0P3QuZm9ybWF0KFwiZGRcIik6byhuLFwid2Vla2RheXNNaW5cIixcIndlZWtkYXlzXCIsMil9LHdlZWtkYXlzU2hvcnQ6ZnVuY3Rpb24odCl7cmV0dXJuIHQ/dC5mb3JtYXQoXCJkZGRcIik6byhuLFwid2Vla2RheXNTaG9ydFwiLFwid2Vla2RheXNcIiwzKX0sbG9uZ0RhdGVGb3JtYXQ6ZnVuY3Rpb24odCl7cmV0dXJuIGEobi4kbG9jYWxlKCksdCl9LG1lcmlkaWVtOnRoaXMuJGxvY2FsZSgpLm1lcmlkaWVtfX0uYmluZCh0aGlzKSgpfSxlLmxvY2FsZURhdGE9ZnVuY3Rpb24oKXt2YXIgbj11KCk7cmV0dXJue2ZpcnN0RGF5T2ZXZWVrOmZ1bmN0aW9uKCl7cmV0dXJuIG4ud2Vla1N0YXJ0fHwwfSx3ZWVrZGF5czpmdW5jdGlvbigpe3JldHVybiBlLndlZWtkYXlzKCl9LHdlZWtkYXlzU2hvcnQ6ZnVuY3Rpb24oKXtyZXR1cm4gZS53ZWVrZGF5c1Nob3J0KCl9LHdlZWtkYXlzTWluOmZ1bmN0aW9uKCl7cmV0dXJuIGUud2Vla2RheXNNaW4oKX0sbW9udGhzOmZ1bmN0aW9uKCl7cmV0dXJuIGUubW9udGhzKCl9LG1vbnRoc1Nob3J0OmZ1bmN0aW9uKCl7cmV0dXJuIGUubW9udGhzU2hvcnQoKX0sbG9uZ0RhdGVGb3JtYXQ6ZnVuY3Rpb24odCl7cmV0dXJuIGEobix0KX0sbWVyaWRpZW06bi5tZXJpZGllbX19LGUubW9udGhzPWZ1bmN0aW9uKCl7cmV0dXJuIG8odSgpLFwibW9udGhzXCIpfSxlLm1vbnRoc1Nob3J0PWZ1bmN0aW9uKCl7cmV0dXJuIG8odSgpLFwibW9udGhzU2hvcnRcIixcIm1vbnRoc1wiLDMpfSxlLndlZWtkYXlzPWZ1bmN0aW9uKG4pe3JldHVybiBvKHUoKSxcIndlZWtkYXlzXCIsbnVsbCxudWxsLG4pfSxlLndlZWtkYXlzU2hvcnQ9ZnVuY3Rpb24obil7cmV0dXJuIG8odSgpLFwid2Vla2RheXNTaG9ydFwiLFwid2Vla2RheXNcIiwzLG4pfSxlLndlZWtkYXlzTWluPWZ1bmN0aW9uKG4pe3JldHVybiBvKHUoKSxcIndlZWtkYXlzTWluXCIsXCJ3ZWVrZGF5c1wiLDIsbil9fX0pO1xuIiwiIWZ1bmN0aW9uKGUsdCl7XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHMmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBtb2R1bGU/bW9kdWxlLmV4cG9ydHM9dCgpOlwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUodCk6ZS5kYXlqc19wbHVnaW5fd2Vla09mWWVhcj10KCl9KHRoaXMsZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjt2YXIgZT1cIndlZWtcIix0PVwieWVhclwiO3JldHVybiBmdW5jdGlvbihpLG4scil7dmFyIGY9bi5wcm90b3R5cGU7Zi53ZWVrPWZ1bmN0aW9uKGkpe2lmKHZvaWQgMD09PWkmJihpPW51bGwpLG51bGwhPT1pKXJldHVybiB0aGlzLmFkZCg3KihpLXRoaXMud2VlaygpKSxcImRheVwiKTt2YXIgbj10aGlzLiRsb2NhbGUoKS55ZWFyU3RhcnR8fDE7aWYoMTE9PT10aGlzLm1vbnRoKCkmJnRoaXMuZGF0ZSgpPjI1KXt2YXIgZj1yKHRoaXMpLnN0YXJ0T2YodCkuYWRkKDEsdCkuZGF0ZShuKSxzPXIodGhpcykuZW5kT2YoZSk7aWYoZi5pc0JlZm9yZShzKSlyZXR1cm4gMX12YXIgYT1yKHRoaXMpLnN0YXJ0T2YodCkuZGF0ZShuKS5zdGFydE9mKGUpLnN1YnRyYWN0KDEsXCJtaWxsaXNlY29uZFwiKSxkPXRoaXMuZGlmZihhLGUsITApO3JldHVybiBkPDA/cih0aGlzKS5zdGFydE9mKFwid2Vla1wiKS53ZWVrKCk6TWF0aC5jZWlsKGQpfSxmLndlZWtzPWZ1bmN0aW9uKGUpe3JldHVybiB2b2lkIDA9PT1lJiYoZT1udWxsKSx0aGlzLndlZWsoZSl9fX0pO1xuIiwiIWZ1bmN0aW9uKGUsdCl7XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHMmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBtb2R1bGU/bW9kdWxlLmV4cG9ydHM9dCgpOlwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUodCk6ZS5kYXlqc19wbHVnaW5fd2Vla1llYXI9dCgpfSh0aGlzLGZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7cmV0dXJuIGZ1bmN0aW9uKGUsdCl7dC5wcm90b3R5cGUud2Vla1llYXI9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLm1vbnRoKCksdD10aGlzLndlZWsoKSxuPXRoaXMueWVhcigpO3JldHVybiAxPT09dCYmMTE9PT1lP24rMTpufX19KTtcbiIsInZhciBnZXROYXRpdmUgPSByZXF1aXJlKCcuL19nZXROYXRpdmUnKSxcbiAgICByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgRGF0YVZpZXcgPSBnZXROYXRpdmUocm9vdCwgJ0RhdGFWaWV3Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gRGF0YVZpZXc7XG4iLCJ2YXIgaGFzaENsZWFyID0gcmVxdWlyZSgnLi9faGFzaENsZWFyJyksXG4gICAgaGFzaERlbGV0ZSA9IHJlcXVpcmUoJy4vX2hhc2hEZWxldGUnKSxcbiAgICBoYXNoR2V0ID0gcmVxdWlyZSgnLi9faGFzaEdldCcpLFxuICAgIGhhc2hIYXMgPSByZXF1aXJlKCcuL19oYXNoSGFzJyksXG4gICAgaGFzaFNldCA9IHJlcXVpcmUoJy4vX2hhc2hTZXQnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgaGFzaCBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIEhhc2goZW50cmllcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICB0aGlzLmNsZWFyKCk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgfVxufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgSGFzaGAuXG5IYXNoLnByb3RvdHlwZS5jbGVhciA9IGhhc2hDbGVhcjtcbkhhc2gucHJvdG90eXBlWydkZWxldGUnXSA9IGhhc2hEZWxldGU7XG5IYXNoLnByb3RvdHlwZS5nZXQgPSBoYXNoR2V0O1xuSGFzaC5wcm90b3R5cGUuaGFzID0gaGFzaEhhcztcbkhhc2gucHJvdG90eXBlLnNldCA9IGhhc2hTZXQ7XG5cbm1vZHVsZS5leHBvcnRzID0gSGFzaDtcbiIsInZhciBsaXN0Q2FjaGVDbGVhciA9IHJlcXVpcmUoJy4vX2xpc3RDYWNoZUNsZWFyJyksXG4gICAgbGlzdENhY2hlRGVsZXRlID0gcmVxdWlyZSgnLi9fbGlzdENhY2hlRGVsZXRlJyksXG4gICAgbGlzdENhY2hlR2V0ID0gcmVxdWlyZSgnLi9fbGlzdENhY2hlR2V0JyksXG4gICAgbGlzdENhY2hlSGFzID0gcmVxdWlyZSgnLi9fbGlzdENhY2hlSGFzJyksXG4gICAgbGlzdENhY2hlU2V0ID0gcmVxdWlyZSgnLi9fbGlzdENhY2hlU2V0Jyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBsaXN0IGNhY2hlIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gTGlzdENhY2hlKGVudHJpZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgdGhpcy5jbGVhcigpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gIH1cbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYExpc3RDYWNoZWAuXG5MaXN0Q2FjaGUucHJvdG90eXBlLmNsZWFyID0gbGlzdENhY2hlQ2xlYXI7XG5MaXN0Q2FjaGUucHJvdG90eXBlWydkZWxldGUnXSA9IGxpc3RDYWNoZURlbGV0ZTtcbkxpc3RDYWNoZS5wcm90b3R5cGUuZ2V0ID0gbGlzdENhY2hlR2V0O1xuTGlzdENhY2hlLnByb3RvdHlwZS5oYXMgPSBsaXN0Q2FjaGVIYXM7XG5MaXN0Q2FjaGUucHJvdG90eXBlLnNldCA9IGxpc3RDYWNoZVNldDtcblxubW9kdWxlLmV4cG9ydHMgPSBMaXN0Q2FjaGU7XG4iLCJ2YXIgZ2V0TmF0aXZlID0gcmVxdWlyZSgnLi9fZ2V0TmF0aXZlJyksXG4gICAgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIE1hcCA9IGdldE5hdGl2ZShyb290LCAnTWFwJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gTWFwO1xuIiwidmFyIG1hcENhY2hlQ2xlYXIgPSByZXF1aXJlKCcuL19tYXBDYWNoZUNsZWFyJyksXG4gICAgbWFwQ2FjaGVEZWxldGUgPSByZXF1aXJlKCcuL19tYXBDYWNoZURlbGV0ZScpLFxuICAgIG1hcENhY2hlR2V0ID0gcmVxdWlyZSgnLi9fbWFwQ2FjaGVHZXQnKSxcbiAgICBtYXBDYWNoZUhhcyA9IHJlcXVpcmUoJy4vX21hcENhY2hlSGFzJyksXG4gICAgbWFwQ2FjaGVTZXQgPSByZXF1aXJlKCcuL19tYXBDYWNoZVNldCcpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBtYXAgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gTWFwQ2FjaGUoZW50cmllcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICB0aGlzLmNsZWFyKCk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgfVxufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgTWFwQ2FjaGVgLlxuTWFwQ2FjaGUucHJvdG90eXBlLmNsZWFyID0gbWFwQ2FjaGVDbGVhcjtcbk1hcENhY2hlLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBtYXBDYWNoZURlbGV0ZTtcbk1hcENhY2hlLnByb3RvdHlwZS5nZXQgPSBtYXBDYWNoZUdldDtcbk1hcENhY2hlLnByb3RvdHlwZS5oYXMgPSBtYXBDYWNoZUhhcztcbk1hcENhY2hlLnByb3RvdHlwZS5zZXQgPSBtYXBDYWNoZVNldDtcblxubW9kdWxlLmV4cG9ydHMgPSBNYXBDYWNoZTtcbiIsInZhciBnZXROYXRpdmUgPSByZXF1aXJlKCcuL19nZXROYXRpdmUnKSxcbiAgICByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgUHJvbWlzZSA9IGdldE5hdGl2ZShyb290LCAnUHJvbWlzZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFByb21pc2U7XG4iLCJ2YXIgZ2V0TmF0aXZlID0gcmVxdWlyZSgnLi9fZ2V0TmF0aXZlJyksXG4gICAgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIFNldCA9IGdldE5hdGl2ZShyb290LCAnU2V0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gU2V0O1xuIiwidmFyIE1hcENhY2hlID0gcmVxdWlyZSgnLi9fTWFwQ2FjaGUnKSxcbiAgICBzZXRDYWNoZUFkZCA9IHJlcXVpcmUoJy4vX3NldENhY2hlQWRkJyksXG4gICAgc2V0Q2FjaGVIYXMgPSByZXF1aXJlKCcuL19zZXRDYWNoZUhhcycpO1xuXG4vKipcbiAqXG4gKiBDcmVhdGVzIGFuIGFycmF5IGNhY2hlIG9iamVjdCB0byBzdG9yZSB1bmlxdWUgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIFNldENhY2hlKHZhbHVlcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IHZhbHVlcyA9PSBudWxsID8gMCA6IHZhbHVlcy5sZW5ndGg7XG5cbiAgdGhpcy5fX2RhdGFfXyA9IG5ldyBNYXBDYWNoZTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB0aGlzLmFkZCh2YWx1ZXNbaW5kZXhdKTtcbiAgfVxufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgU2V0Q2FjaGVgLlxuU2V0Q2FjaGUucHJvdG90eXBlLmFkZCA9IFNldENhY2hlLnByb3RvdHlwZS5wdXNoID0gc2V0Q2FjaGVBZGQ7XG5TZXRDYWNoZS5wcm90b3R5cGUuaGFzID0gc2V0Q2FjaGVIYXM7XG5cbm1vZHVsZS5leHBvcnRzID0gU2V0Q2FjaGU7XG4iLCJ2YXIgTGlzdENhY2hlID0gcmVxdWlyZSgnLi9fTGlzdENhY2hlJyksXG4gICAgc3RhY2tDbGVhciA9IHJlcXVpcmUoJy4vX3N0YWNrQ2xlYXInKSxcbiAgICBzdGFja0RlbGV0ZSA9IHJlcXVpcmUoJy4vX3N0YWNrRGVsZXRlJyksXG4gICAgc3RhY2tHZXQgPSByZXF1aXJlKCcuL19zdGFja0dldCcpLFxuICAgIHN0YWNrSGFzID0gcmVxdWlyZSgnLi9fc3RhY2tIYXMnKSxcbiAgICBzdGFja1NldCA9IHJlcXVpcmUoJy4vX3N0YWNrU2V0Jyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIHN0YWNrIGNhY2hlIG9iamVjdCB0byBzdG9yZSBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIFN0YWNrKGVudHJpZXMpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fID0gbmV3IExpc3RDYWNoZShlbnRyaWVzKTtcbiAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgU3RhY2tgLlxuU3RhY2sucHJvdG90eXBlLmNsZWFyID0gc3RhY2tDbGVhcjtcblN0YWNrLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBzdGFja0RlbGV0ZTtcblN0YWNrLnByb3RvdHlwZS5nZXQgPSBzdGFja0dldDtcblN0YWNrLnByb3RvdHlwZS5oYXMgPSBzdGFja0hhcztcblN0YWNrLnByb3RvdHlwZS5zZXQgPSBzdGFja1NldDtcblxubW9kdWxlLmV4cG9ydHMgPSBTdGFjaztcbiIsInZhciByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBTeW1ib2wgPSByb290LlN5bWJvbDtcblxubW9kdWxlLmV4cG9ydHMgPSBTeW1ib2w7XG4iLCJ2YXIgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgVWludDhBcnJheSA9IHJvb3QuVWludDhBcnJheTtcblxubW9kdWxlLmV4cG9ydHMgPSBVaW50OEFycmF5O1xuIiwidmFyIGdldE5hdGl2ZSA9IHJlcXVpcmUoJy4vX2dldE5hdGl2ZScpLFxuICAgIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBXZWFrTWFwID0gZ2V0TmF0aXZlKHJvb3QsICdXZWFrTWFwJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gV2Vha01hcDtcbiIsIi8qKlxuICogQSBmYXN0ZXIgYWx0ZXJuYXRpdmUgdG8gYEZ1bmN0aW9uI2FwcGx5YCwgdGhpcyBmdW5jdGlvbiBpbnZva2VzIGBmdW5jYFxuICogd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgYHRoaXNBcmdgIGFuZCB0aGUgYXJndW1lbnRzIG9mIGBhcmdzYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaW52b2tlLlxuICogQHBhcmFtIHsqfSB0aGlzQXJnIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gKiBAcGFyYW0ge0FycmF5fSBhcmdzIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIGBmdW5jYCB3aXRoLlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc3VsdCBvZiBgZnVuY2AuXG4gKi9cbmZ1bmN0aW9uIGFwcGx5KGZ1bmMsIHRoaXNBcmcsIGFyZ3MpIHtcbiAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgIGNhc2UgMDogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnKTtcbiAgICBjYXNlIDE6IHJldHVybiBmdW5jLmNhbGwodGhpc0FyZywgYXJnc1swXSk7XG4gICAgY2FzZSAyOiByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcsIGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgIGNhc2UgMzogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgfVxuICByZXR1cm4gZnVuYy5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhcHBseTtcbiIsIi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmZpbHRlcmAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZpbHRlcmVkIGFycmF5LlxuICovXG5mdW5jdGlvbiBhcnJheUZpbHRlcihhcnJheSwgcHJlZGljYXRlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsXG4gICAgICByZXNJbmRleCA9IDAsXG4gICAgICByZXN1bHQgPSBbXTtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSB2YWx1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhcnJheUZpbHRlcjtcbiIsInZhciBiYXNlSW5kZXhPZiA9IHJlcXVpcmUoJy4vX2Jhc2VJbmRleE9mJyk7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmluY2x1ZGVzYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAqIHNwZWNpZnlpbmcgYW4gaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gKiBAcGFyYW0geyp9IHRhcmdldCBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdGFyZ2V0YCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBhcnJheUluY2x1ZGVzKGFycmF5LCB2YWx1ZSkge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gIHJldHVybiAhIWxlbmd0aCAmJiBiYXNlSW5kZXhPZihhcnJheSwgdmFsdWUsIDApID4gLTE7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXJyYXlJbmNsdWRlcztcbiIsIi8qKlxuICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlIGBhcnJheUluY2x1ZGVzYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGEgY29tcGFyYXRvci5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7Kn0gdGFyZ2V0IFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY29tcGFyYXRvciBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB0YXJnZXRgIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGFycmF5SW5jbHVkZXNXaXRoKGFycmF5LCB2YWx1ZSwgY29tcGFyYXRvcikge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgaWYgKGNvbXBhcmF0b3IodmFsdWUsIGFycmF5W2luZGV4XSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXJyYXlJbmNsdWRlc1dpdGg7XG4iLCJ2YXIgYmFzZVRpbWVzID0gcmVxdWlyZSgnLi9fYmFzZVRpbWVzJyksXG4gICAgaXNBcmd1bWVudHMgPSByZXF1aXJlKCcuL2lzQXJndW1lbnRzJyksXG4gICAgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpLFxuICAgIGlzQnVmZmVyID0gcmVxdWlyZSgnLi9pc0J1ZmZlcicpLFxuICAgIGlzSW5kZXggPSByZXF1aXJlKCcuL19pc0luZGV4JyksXG4gICAgaXNUeXBlZEFycmF5ID0gcmVxdWlyZSgnLi9pc1R5cGVkQXJyYXknKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIHRoZSBhcnJheS1saWtlIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtib29sZWFufSBpbmhlcml0ZWQgU3BlY2lmeSByZXR1cm5pbmcgaW5oZXJpdGVkIHByb3BlcnR5IG5hbWVzLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqL1xuZnVuY3Rpb24gYXJyYXlMaWtlS2V5cyh2YWx1ZSwgaW5oZXJpdGVkKSB7XG4gIHZhciBpc0FyciA9IGlzQXJyYXkodmFsdWUpLFxuICAgICAgaXNBcmcgPSAhaXNBcnIgJiYgaXNBcmd1bWVudHModmFsdWUpLFxuICAgICAgaXNCdWZmID0gIWlzQXJyICYmICFpc0FyZyAmJiBpc0J1ZmZlcih2YWx1ZSksXG4gICAgICBpc1R5cGUgPSAhaXNBcnIgJiYgIWlzQXJnICYmICFpc0J1ZmYgJiYgaXNUeXBlZEFycmF5KHZhbHVlKSxcbiAgICAgIHNraXBJbmRleGVzID0gaXNBcnIgfHwgaXNBcmcgfHwgaXNCdWZmIHx8IGlzVHlwZSxcbiAgICAgIHJlc3VsdCA9IHNraXBJbmRleGVzID8gYmFzZVRpbWVzKHZhbHVlLmxlbmd0aCwgU3RyaW5nKSA6IFtdLFxuICAgICAgbGVuZ3RoID0gcmVzdWx0Lmxlbmd0aDtcblxuICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICBpZiAoKGluaGVyaXRlZCB8fCBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBrZXkpKSAmJlxuICAgICAgICAhKHNraXBJbmRleGVzICYmIChcbiAgICAgICAgICAgLy8gU2FmYXJpIDkgaGFzIGVudW1lcmFibGUgYGFyZ3VtZW50cy5sZW5ndGhgIGluIHN0cmljdCBtb2RlLlxuICAgICAgICAgICBrZXkgPT0gJ2xlbmd0aCcgfHxcbiAgICAgICAgICAgLy8gTm9kZS5qcyAwLjEwIGhhcyBlbnVtZXJhYmxlIG5vbi1pbmRleCBwcm9wZXJ0aWVzIG9uIGJ1ZmZlcnMuXG4gICAgICAgICAgIChpc0J1ZmYgJiYgKGtleSA9PSAnb2Zmc2V0JyB8fCBrZXkgPT0gJ3BhcmVudCcpKSB8fFxuICAgICAgICAgICAvLyBQaGFudG9tSlMgMiBoYXMgZW51bWVyYWJsZSBub24taW5kZXggcHJvcGVydGllcyBvbiB0eXBlZCBhcnJheXMuXG4gICAgICAgICAgIChpc1R5cGUgJiYgKGtleSA9PSAnYnVmZmVyJyB8fCBrZXkgPT0gJ2J5dGVMZW5ndGgnIHx8IGtleSA9PSAnYnl0ZU9mZnNldCcpKSB8fFxuICAgICAgICAgICAvLyBTa2lwIGluZGV4IHByb3BlcnRpZXMuXG4gICAgICAgICAgIGlzSW5kZXgoa2V5LCBsZW5ndGgpXG4gICAgICAgICkpKSB7XG4gICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFycmF5TGlrZUtleXM7XG4iLCIvKipcbiAqIEFwcGVuZHMgdGhlIGVsZW1lbnRzIG9mIGB2YWx1ZXNgIHRvIGBhcnJheWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byBhcHBlbmQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAqL1xuZnVuY3Rpb24gYXJyYXlQdXNoKGFycmF5LCB2YWx1ZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgb2Zmc2V0ID0gYXJyYXkubGVuZ3RoO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgYXJyYXlbb2Zmc2V0ICsgaW5kZXhdID0gdmFsdWVzW2luZGV4XTtcbiAgfVxuICByZXR1cm4gYXJyYXk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXJyYXlQdXNoO1xuIiwiLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uc29tZWAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlXG4gKiBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbnkgZWxlbWVudCBwYXNzZXMgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAqICBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGFycmF5U29tZShhcnJheSwgcHJlZGljYXRlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBpZiAocHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhcnJheVNvbWU7XG4iLCJ2YXIgZXEgPSByZXF1aXJlKCcuL2VxJyk7XG5cbi8qKlxuICogR2V0cyB0aGUgaW5kZXggYXQgd2hpY2ggdGhlIGBrZXlgIGlzIGZvdW5kIGluIGBhcnJheWAgb2Yga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7Kn0ga2V5IFRoZSBrZXkgdG8gc2VhcmNoIGZvci5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gKi9cbmZ1bmN0aW9uIGFzc29jSW5kZXhPZihhcnJheSwga2V5KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gIHdoaWxlIChsZW5ndGgtLSkge1xuICAgIGlmIChlcShhcnJheVtsZW5ndGhdWzBdLCBrZXkpKSB7XG4gICAgICByZXR1cm4gbGVuZ3RoO1xuICAgIH1cbiAgfVxuICByZXR1cm4gLTE7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXNzb2NJbmRleE9mO1xuIiwiLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5maW5kSW5kZXhgIGFuZCBgXy5maW5kTGFzdEluZGV4YCB3aXRob3V0XG4gKiBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHBhcmFtIHtudW1iZXJ9IGZyb21JbmRleCBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VGaW5kSW5kZXgoYXJyYXksIHByZWRpY2F0ZSwgZnJvbUluZGV4LCBmcm9tUmlnaHQpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgIGluZGV4ID0gZnJvbUluZGV4ICsgKGZyb21SaWdodCA/IDEgOiAtMSk7XG5cbiAgd2hpbGUgKChmcm9tUmlnaHQgPyBpbmRleC0tIDogKytpbmRleCA8IGxlbmd0aCkpIHtcbiAgICBpZiAocHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgcmV0dXJuIGluZGV4O1xuICAgIH1cbiAgfVxuICByZXR1cm4gLTE7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUZpbmRJbmRleDtcbiIsInZhciBhcnJheVB1c2ggPSByZXF1aXJlKCcuL19hcnJheVB1c2gnKSxcbiAgICBpc0ZsYXR0ZW5hYmxlID0gcmVxdWlyZSgnLi9faXNGbGF0dGVuYWJsZScpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZsYXR0ZW5gIHdpdGggc3VwcG9ydCBmb3IgcmVzdHJpY3RpbmcgZmxhdHRlbmluZy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGZsYXR0ZW4uXG4gKiBAcGFyYW0ge251bWJlcn0gZGVwdGggVGhlIG1heGltdW0gcmVjdXJzaW9uIGRlcHRoLlxuICogQHBhcmFtIHtib29sZWFufSBbcHJlZGljYXRlPWlzRmxhdHRlbmFibGVdIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtpc1N0cmljdF0gUmVzdHJpY3QgdG8gdmFsdWVzIHRoYXQgcGFzcyBgcHJlZGljYXRlYCBjaGVja3MuXG4gKiBAcGFyYW0ge0FycmF5fSBbcmVzdWx0PVtdXSBUaGUgaW5pdGlhbCByZXN1bHQgdmFsdWUuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmbGF0dGVuZWQgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGJhc2VGbGF0dGVuKGFycmF5LCBkZXB0aCwgcHJlZGljYXRlLCBpc1N0cmljdCwgcmVzdWx0KSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gIHByZWRpY2F0ZSB8fCAocHJlZGljYXRlID0gaXNGbGF0dGVuYWJsZSk7XG4gIHJlc3VsdCB8fCAocmVzdWx0ID0gW10pO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgIGlmIChkZXB0aCA+IDAgJiYgcHJlZGljYXRlKHZhbHVlKSkge1xuICAgICAgaWYgKGRlcHRoID4gMSkge1xuICAgICAgICAvLyBSZWN1cnNpdmVseSBmbGF0dGVuIGFycmF5cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICBiYXNlRmxhdHRlbih2YWx1ZSwgZGVwdGggLSAxLCBwcmVkaWNhdGUsIGlzU3RyaWN0LCByZXN1bHQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXJyYXlQdXNoKHJlc3VsdCwgdmFsdWUpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoIWlzU3RyaWN0KSB7XG4gICAgICByZXN1bHRbcmVzdWx0Lmxlbmd0aF0gPSB2YWx1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlRmxhdHRlbjtcbiIsInZhciBhcnJheVB1c2ggPSByZXF1aXJlKCcuL19hcnJheVB1c2gnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5Jyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGdldEFsbEtleXNgIGFuZCBgZ2V0QWxsS2V5c0luYCB3aGljaCB1c2VzXG4gKiBga2V5c0Z1bmNgIGFuZCBgc3ltYm9sc0Z1bmNgIHRvIGdldCB0aGUgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBhbmRcbiAqIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGtleXNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIGtleXMgb2YgYG9iamVjdGAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBzeW1ib2xzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scy5cbiAqL1xuZnVuY3Rpb24gYmFzZUdldEFsbEtleXMob2JqZWN0LCBrZXlzRnVuYywgc3ltYm9sc0Z1bmMpIHtcbiAgdmFyIHJlc3VsdCA9IGtleXNGdW5jKG9iamVjdCk7XG4gIHJldHVybiBpc0FycmF5KG9iamVjdCkgPyByZXN1bHQgOiBhcnJheVB1c2gocmVzdWx0LCBzeW1ib2xzRnVuYyhvYmplY3QpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlR2V0QWxsS2V5cztcbiIsInZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19TeW1ib2wnKSxcbiAgICBnZXRSYXdUYWcgPSByZXF1aXJlKCcuL19nZXRSYXdUYWcnKSxcbiAgICBvYmplY3RUb1N0cmluZyA9IHJlcXVpcmUoJy4vX29iamVjdFRvU3RyaW5nJyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBudWxsVGFnID0gJ1tvYmplY3QgTnVsbF0nLFxuICAgIHVuZGVmaW5lZFRhZyA9ICdbb2JqZWN0IFVuZGVmaW5lZF0nO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1Ub1N0cmluZ1RhZyA9IFN5bWJvbCA/IFN5bWJvbC50b1N0cmluZ1RhZyA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgZ2V0VGFnYCB3aXRob3V0IGZhbGxiYWNrcyBmb3IgYnVnZ3kgZW52aXJvbm1lbnRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGB0b1N0cmluZ1RhZ2AuXG4gKi9cbmZ1bmN0aW9uIGJhc2VHZXRUYWcodmFsdWUpIHtcbiAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZFRhZyA6IG51bGxUYWc7XG4gIH1cbiAgcmV0dXJuIChzeW1Ub1N0cmluZ1RhZyAmJiBzeW1Ub1N0cmluZ1RhZyBpbiBPYmplY3QodmFsdWUpKVxuICAgID8gZ2V0UmF3VGFnKHZhbHVlKVxuICAgIDogb2JqZWN0VG9TdHJpbmcodmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VHZXRUYWc7XG4iLCJ2YXIgYmFzZUZpbmRJbmRleCA9IHJlcXVpcmUoJy4vX2Jhc2VGaW5kSW5kZXgnKSxcbiAgICBiYXNlSXNOYU4gPSByZXF1aXJlKCcuL19iYXNlSXNOYU4nKSxcbiAgICBzdHJpY3RJbmRleE9mID0gcmVxdWlyZSgnLi9fc3RyaWN0SW5kZXhPZicpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmluZGV4T2ZgIHdpdGhvdXQgYGZyb21JbmRleGAgYm91bmRzIGNoZWNrcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICogQHBhcmFtIHtudW1iZXJ9IGZyb21JbmRleCBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICovXG5mdW5jdGlvbiBiYXNlSW5kZXhPZihhcnJheSwgdmFsdWUsIGZyb21JbmRleCkge1xuICByZXR1cm4gdmFsdWUgPT09IHZhbHVlXG4gICAgPyBzdHJpY3RJbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KVxuICAgIDogYmFzZUZpbmRJbmRleChhcnJheSwgYmFzZUlzTmFOLCBmcm9tSW5kZXgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VJbmRleE9mO1xuIiwidmFyIGJhc2VHZXRUYWcgPSByZXF1aXJlKCcuL19iYXNlR2V0VGFnJyksXG4gICAgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFyZ3NUYWcgPSAnW29iamVjdCBBcmd1bWVudHNdJztcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0FyZ3VtZW50c2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LFxuICovXG5mdW5jdGlvbiBiYXNlSXNBcmd1bWVudHModmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gYXJnc1RhZztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXNBcmd1bWVudHM7XG4iLCJ2YXIgYmFzZUlzRXF1YWxEZWVwID0gcmVxdWlyZSgnLi9fYmFzZUlzRXF1YWxEZWVwJyksXG4gICAgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0VxdWFsYCB3aGljaCBzdXBwb3J0cyBwYXJ0aWFsIGNvbXBhcmlzb25zXG4gKiBhbmQgdHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy5cbiAqICAxIC0gVW5vcmRlcmVkIGNvbXBhcmlzb25cbiAqICAyIC0gUGFydGlhbCBjb21wYXJpc29uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgYHZhbHVlYCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzRXF1YWwodmFsdWUsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaykge1xuICBpZiAodmFsdWUgPT09IG90aGVyKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKHZhbHVlID09IG51bGwgfHwgb3RoZXIgPT0gbnVsbCB8fCAoIWlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgIWlzT2JqZWN0TGlrZShvdGhlcikpKSB7XG4gICAgcmV0dXJuIHZhbHVlICE9PSB2YWx1ZSAmJiBvdGhlciAhPT0gb3RoZXI7XG4gIH1cbiAgcmV0dXJuIGJhc2VJc0VxdWFsRGVlcCh2YWx1ZSwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGJhc2VJc0VxdWFsLCBzdGFjayk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUlzRXF1YWw7XG4iLCJ2YXIgU3RhY2sgPSByZXF1aXJlKCcuL19TdGFjaycpLFxuICAgIGVxdWFsQXJyYXlzID0gcmVxdWlyZSgnLi9fZXF1YWxBcnJheXMnKSxcbiAgICBlcXVhbEJ5VGFnID0gcmVxdWlyZSgnLi9fZXF1YWxCeVRhZycpLFxuICAgIGVxdWFsT2JqZWN0cyA9IHJlcXVpcmUoJy4vX2VxdWFsT2JqZWN0cycpLFxuICAgIGdldFRhZyA9IHJlcXVpcmUoJy4vX2dldFRhZycpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKSxcbiAgICBpc0J1ZmZlciA9IHJlcXVpcmUoJy4vaXNCdWZmZXInKSxcbiAgICBpc1R5cGVkQXJyYXkgPSByZXF1aXJlKCcuL2lzVHlwZWRBcnJheScpO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciB2YWx1ZSBjb21wYXJpc29ucy4gKi9cbnZhciBDT01QQVJFX1BBUlRJQUxfRkxBRyA9IDE7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBhcmdzVGFnID0gJ1tvYmplY3QgQXJndW1lbnRzXScsXG4gICAgYXJyYXlUYWcgPSAnW29iamVjdCBBcnJheV0nLFxuICAgIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxgIGZvciBhcnJheXMgYW5kIG9iamVjdHMgd2hpY2ggcGVyZm9ybXNcbiAqIGRlZXAgY29tcGFyaXNvbnMgYW5kIHRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cyBlbmFibGluZyBvYmplY3RzIHdpdGggY2lyY3VsYXJcbiAqIHJlZmVyZW5jZXMgdG8gYmUgY29tcGFyZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBgb2JqZWN0YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBvYmplY3RzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc0VxdWFsRGVlcChvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gIHZhciBvYmpJc0FyciA9IGlzQXJyYXkob2JqZWN0KSxcbiAgICAgIG90aElzQXJyID0gaXNBcnJheShvdGhlciksXG4gICAgICBvYmpUYWcgPSBvYmpJc0FyciA/IGFycmF5VGFnIDogZ2V0VGFnKG9iamVjdCksXG4gICAgICBvdGhUYWcgPSBvdGhJc0FyciA/IGFycmF5VGFnIDogZ2V0VGFnKG90aGVyKTtcblxuICBvYmpUYWcgPSBvYmpUYWcgPT0gYXJnc1RhZyA/IG9iamVjdFRhZyA6IG9ialRhZztcbiAgb3RoVGFnID0gb3RoVGFnID09IGFyZ3NUYWcgPyBvYmplY3RUYWcgOiBvdGhUYWc7XG5cbiAgdmFyIG9iaklzT2JqID0gb2JqVGFnID09IG9iamVjdFRhZyxcbiAgICAgIG90aElzT2JqID0gb3RoVGFnID09IG9iamVjdFRhZyxcbiAgICAgIGlzU2FtZVRhZyA9IG9ialRhZyA9PSBvdGhUYWc7XG5cbiAgaWYgKGlzU2FtZVRhZyAmJiBpc0J1ZmZlcihvYmplY3QpKSB7XG4gICAgaWYgKCFpc0J1ZmZlcihvdGhlcikpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgb2JqSXNBcnIgPSB0cnVlO1xuICAgIG9iaklzT2JqID0gZmFsc2U7XG4gIH1cbiAgaWYgKGlzU2FtZVRhZyAmJiAhb2JqSXNPYmopIHtcbiAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICAgIHJldHVybiAob2JqSXNBcnIgfHwgaXNUeXBlZEFycmF5KG9iamVjdCkpXG4gICAgICA/IGVxdWFsQXJyYXlzKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spXG4gICAgICA6IGVxdWFsQnlUYWcob2JqZWN0LCBvdGhlciwgb2JqVGFnLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKTtcbiAgfVxuICBpZiAoIShiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUcpKSB7XG4gICAgdmFyIG9iaklzV3JhcHBlZCA9IG9iaklzT2JqICYmIGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCAnX193cmFwcGVkX18nKSxcbiAgICAgICAgb3RoSXNXcmFwcGVkID0gb3RoSXNPYmogJiYgaGFzT3duUHJvcGVydHkuY2FsbChvdGhlciwgJ19fd3JhcHBlZF9fJyk7XG5cbiAgICBpZiAob2JqSXNXcmFwcGVkIHx8IG90aElzV3JhcHBlZCkge1xuICAgICAgdmFyIG9ialVud3JhcHBlZCA9IG9iaklzV3JhcHBlZCA/IG9iamVjdC52YWx1ZSgpIDogb2JqZWN0LFxuICAgICAgICAgIG90aFVud3JhcHBlZCA9IG90aElzV3JhcHBlZCA/IG90aGVyLnZhbHVlKCkgOiBvdGhlcjtcblxuICAgICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICAgIHJldHVybiBlcXVhbEZ1bmMob2JqVW53cmFwcGVkLCBvdGhVbndyYXBwZWQsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKTtcbiAgICB9XG4gIH1cbiAgaWYgKCFpc1NhbWVUYWcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgcmV0dXJuIGVxdWFsT2JqZWN0cyhvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXNFcXVhbERlZXA7XG4iLCIvKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTmFOYCB3aXRob3V0IHN1cHBvcnQgZm9yIG51bWJlciBvYmplY3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGBOYU5gLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc05hTih2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT09IHZhbHVlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VJc05hTjtcbiIsInZhciBpc0Z1bmN0aW9uID0gcmVxdWlyZSgnLi9pc0Z1bmN0aW9uJyksXG4gICAgaXNNYXNrZWQgPSByZXF1aXJlKCcuL19pc01hc2tlZCcpLFxuICAgIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpLFxuICAgIHRvU291cmNlID0gcmVxdWlyZSgnLi9fdG9Tb3VyY2UnKTtcblxuLyoqXG4gKiBVc2VkIHRvIG1hdGNoIGBSZWdFeHBgXG4gKiBbc3ludGF4IGNoYXJhY3RlcnNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXBhdHRlcm5zKS5cbiAqL1xudmFyIHJlUmVnRXhwQ2hhciA9IC9bXFxcXF4kLiorPygpW1xcXXt9fF0vZztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGhvc3QgY29uc3RydWN0b3JzIChTYWZhcmkpLiAqL1xudmFyIHJlSXNIb3N0Q3RvciA9IC9eXFxbb2JqZWN0IC4rP0NvbnN0cnVjdG9yXFxdJC87XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGUsXG4gICAgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byByZXNvbHZlIHRoZSBkZWNvbXBpbGVkIHNvdXJjZSBvZiBmdW5jdGlvbnMuICovXG52YXIgZnVuY1RvU3RyaW5nID0gZnVuY1Byb3RvLnRvU3RyaW5nO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKiogVXNlZCB0byBkZXRlY3QgaWYgYSBtZXRob2QgaXMgbmF0aXZlLiAqL1xudmFyIHJlSXNOYXRpdmUgPSBSZWdFeHAoJ14nICtcbiAgZnVuY1RvU3RyaW5nLmNhbGwoaGFzT3duUHJvcGVydHkpLnJlcGxhY2UocmVSZWdFeHBDaGFyLCAnXFxcXCQmJylcbiAgLnJlcGxhY2UoL2hhc093blByb3BlcnR5fChmdW5jdGlvbikuKj8oPz1cXFxcXFwoKXwgZm9yIC4rPyg/PVxcXFxcXF0pL2csICckMS4qPycpICsgJyQnXG4pO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTmF0aXZlYCB3aXRob3V0IGJhZCBzaGltIGNoZWNrcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG5hdGl2ZSBmdW5jdGlvbixcbiAqICBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc05hdGl2ZSh2YWx1ZSkge1xuICBpZiAoIWlzT2JqZWN0KHZhbHVlKSB8fCBpc01hc2tlZCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHBhdHRlcm4gPSBpc0Z1bmN0aW9uKHZhbHVlKSA/IHJlSXNOYXRpdmUgOiByZUlzSG9zdEN0b3I7XG4gIHJldHVybiBwYXR0ZXJuLnRlc3QodG9Tb3VyY2UodmFsdWUpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXNOYXRpdmU7XG4iLCJ2YXIgYmFzZUdldFRhZyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRUYWcnKSxcbiAgICBpc0xlbmd0aCA9IHJlcXVpcmUoJy4vaXNMZW5ndGgnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXJnc1RhZyA9ICdbb2JqZWN0IEFyZ3VtZW50c10nLFxuICAgIGFycmF5VGFnID0gJ1tvYmplY3QgQXJyYXldJyxcbiAgICBib29sVGFnID0gJ1tvYmplY3QgQm9vbGVhbl0nLFxuICAgIGRhdGVUYWcgPSAnW29iamVjdCBEYXRlXScsXG4gICAgZXJyb3JUYWcgPSAnW29iamVjdCBFcnJvcl0nLFxuICAgIGZ1bmNUYWcgPSAnW29iamVjdCBGdW5jdGlvbl0nLFxuICAgIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nLFxuICAgIG51bWJlclRhZyA9ICdbb2JqZWN0IE51bWJlcl0nLFxuICAgIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nLFxuICAgIHJlZ2V4cFRhZyA9ICdbb2JqZWN0IFJlZ0V4cF0nLFxuICAgIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nLFxuICAgIHN0cmluZ1RhZyA9ICdbb2JqZWN0IFN0cmluZ10nLFxuICAgIHdlYWtNYXBUYWcgPSAnW29iamVjdCBXZWFrTWFwXSc7XG5cbnZhciBhcnJheUJ1ZmZlclRhZyA9ICdbb2JqZWN0IEFycmF5QnVmZmVyXScsXG4gICAgZGF0YVZpZXdUYWcgPSAnW29iamVjdCBEYXRhVmlld10nLFxuICAgIGZsb2F0MzJUYWcgPSAnW29iamVjdCBGbG9hdDMyQXJyYXldJyxcbiAgICBmbG9hdDY0VGFnID0gJ1tvYmplY3QgRmxvYXQ2NEFycmF5XScsXG4gICAgaW50OFRhZyA9ICdbb2JqZWN0IEludDhBcnJheV0nLFxuICAgIGludDE2VGFnID0gJ1tvYmplY3QgSW50MTZBcnJheV0nLFxuICAgIGludDMyVGFnID0gJ1tvYmplY3QgSW50MzJBcnJheV0nLFxuICAgIHVpbnQ4VGFnID0gJ1tvYmplY3QgVWludDhBcnJheV0nLFxuICAgIHVpbnQ4Q2xhbXBlZFRhZyA9ICdbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XScsXG4gICAgdWludDE2VGFnID0gJ1tvYmplY3QgVWludDE2QXJyYXldJyxcbiAgICB1aW50MzJUYWcgPSAnW29iamVjdCBVaW50MzJBcnJheV0nO1xuXG4vKiogVXNlZCB0byBpZGVudGlmeSBgdG9TdHJpbmdUYWdgIHZhbHVlcyBvZiB0eXBlZCBhcnJheXMuICovXG52YXIgdHlwZWRBcnJheVRhZ3MgPSB7fTtcbnR5cGVkQXJyYXlUYWdzW2Zsb2F0MzJUYWddID0gdHlwZWRBcnJheVRhZ3NbZmxvYXQ2NFRhZ10gPVxudHlwZWRBcnJheVRhZ3NbaW50OFRhZ10gPSB0eXBlZEFycmF5VGFnc1tpbnQxNlRhZ10gPVxudHlwZWRBcnJheVRhZ3NbaW50MzJUYWddID0gdHlwZWRBcnJheVRhZ3NbdWludDhUYWddID1cbnR5cGVkQXJyYXlUYWdzW3VpbnQ4Q2xhbXBlZFRhZ10gPSB0eXBlZEFycmF5VGFnc1t1aW50MTZUYWddID1cbnR5cGVkQXJyYXlUYWdzW3VpbnQzMlRhZ10gPSB0cnVlO1xudHlwZWRBcnJheVRhZ3NbYXJnc1RhZ10gPSB0eXBlZEFycmF5VGFnc1thcnJheVRhZ10gPVxudHlwZWRBcnJheVRhZ3NbYXJyYXlCdWZmZXJUYWddID0gdHlwZWRBcnJheVRhZ3NbYm9vbFRhZ10gPVxudHlwZWRBcnJheVRhZ3NbZGF0YVZpZXdUYWddID0gdHlwZWRBcnJheVRhZ3NbZGF0ZVRhZ10gPVxudHlwZWRBcnJheVRhZ3NbZXJyb3JUYWddID0gdHlwZWRBcnJheVRhZ3NbZnVuY1RhZ10gPVxudHlwZWRBcnJheVRhZ3NbbWFwVGFnXSA9IHR5cGVkQXJyYXlUYWdzW251bWJlclRhZ10gPVxudHlwZWRBcnJheVRhZ3Nbb2JqZWN0VGFnXSA9IHR5cGVkQXJyYXlUYWdzW3JlZ2V4cFRhZ10gPVxudHlwZWRBcnJheVRhZ3Nbc2V0VGFnXSA9IHR5cGVkQXJyYXlUYWdzW3N0cmluZ1RhZ10gPVxudHlwZWRBcnJheVRhZ3Nbd2Vha01hcFRhZ10gPSBmYWxzZTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc1R5cGVkQXJyYXlgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdHlwZWQgYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzVHlwZWRBcnJheSh2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJlxuICAgIGlzTGVuZ3RoKHZhbHVlLmxlbmd0aCkgJiYgISF0eXBlZEFycmF5VGFnc1tiYXNlR2V0VGFnKHZhbHVlKV07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUlzVHlwZWRBcnJheTtcbiIsInZhciBpc1Byb3RvdHlwZSA9IHJlcXVpcmUoJy4vX2lzUHJvdG90eXBlJyksXG4gICAgbmF0aXZlS2V5cyA9IHJlcXVpcmUoJy4vX25hdGl2ZUtleXMnKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5rZXlzYCB3aGljaCBkb2Vzbid0IHRyZWF0IHNwYXJzZSBhcnJheXMgYXMgZGVuc2UuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VLZXlzKG9iamVjdCkge1xuICBpZiAoIWlzUHJvdG90eXBlKG9iamVjdCkpIHtcbiAgICByZXR1cm4gbmF0aXZlS2V5cyhvYmplY3QpO1xuICB9XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgZm9yICh2YXIga2V5IGluIE9iamVjdChvYmplY3QpKSB7XG4gICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpICYmIGtleSAhPSAnY29uc3RydWN0b3InKSB7XG4gICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VLZXlzO1xuIiwidmFyIGlkZW50aXR5ID0gcmVxdWlyZSgnLi9pZGVudGl0eScpLFxuICAgIG92ZXJSZXN0ID0gcmVxdWlyZSgnLi9fb3ZlclJlc3QnKSxcbiAgICBzZXRUb1N0cmluZyA9IHJlcXVpcmUoJy4vX3NldFRvU3RyaW5nJyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucmVzdGAgd2hpY2ggZG9lc24ndCB2YWxpZGF0ZSBvciBjb2VyY2UgYXJndW1lbnRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhcHBseSBhIHJlc3QgcGFyYW1ldGVyIHRvLlxuICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD1mdW5jLmxlbmd0aC0xXSBUaGUgc3RhcnQgcG9zaXRpb24gb2YgdGhlIHJlc3QgcGFyYW1ldGVyLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VSZXN0KGZ1bmMsIHN0YXJ0KSB7XG4gIHJldHVybiBzZXRUb1N0cmluZyhvdmVyUmVzdChmdW5jLCBzdGFydCwgaWRlbnRpdHkpLCBmdW5jICsgJycpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VSZXN0O1xuIiwidmFyIGNvbnN0YW50ID0gcmVxdWlyZSgnLi9jb25zdGFudCcpLFxuICAgIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fZGVmaW5lUHJvcGVydHknKSxcbiAgICBpZGVudGl0eSA9IHJlcXVpcmUoJy4vaWRlbnRpdHknKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgc2V0VG9TdHJpbmdgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaG90IGxvb3Agc2hvcnRpbmcuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHN0cmluZyBUaGUgYHRvU3RyaW5nYCByZXN1bHQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGZ1bmNgLlxuICovXG52YXIgYmFzZVNldFRvU3RyaW5nID0gIWRlZmluZVByb3BlcnR5ID8gaWRlbnRpdHkgOiBmdW5jdGlvbihmdW5jLCBzdHJpbmcpIHtcbiAgcmV0dXJuIGRlZmluZVByb3BlcnR5KGZ1bmMsICd0b1N0cmluZycsIHtcbiAgICAnY29uZmlndXJhYmxlJzogdHJ1ZSxcbiAgICAnZW51bWVyYWJsZSc6IGZhbHNlLFxuICAgICd2YWx1ZSc6IGNvbnN0YW50KHN0cmluZyksXG4gICAgJ3dyaXRhYmxlJzogdHJ1ZVxuICB9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVNldFRvU3RyaW5nO1xuIiwiLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50aW1lc2Agd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzXG4gKiBvciBtYXggYXJyYXkgbGVuZ3RoIGNoZWNrcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiB0aW1lcyB0byBpbnZva2UgYGl0ZXJhdGVlYC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHJlc3VsdHMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VUaW1lcyhuLCBpdGVyYXRlZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIHJlc3VsdCA9IEFycmF5KG4pO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbikge1xuICAgIHJlc3VsdFtpbmRleF0gPSBpdGVyYXRlZShpbmRleCk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlVGltZXM7XG4iLCIvKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnVuYXJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yIHN0b3JpbmcgbWV0YWRhdGEuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNhcCBhcmd1bWVudHMgZm9yLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY2FwcGVkIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlVW5hcnkoZnVuYykge1xuICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gZnVuYyh2YWx1ZSk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVVuYXJ5O1xuIiwidmFyIFNldENhY2hlID0gcmVxdWlyZSgnLi9fU2V0Q2FjaGUnKSxcbiAgICBhcnJheUluY2x1ZGVzID0gcmVxdWlyZSgnLi9fYXJyYXlJbmNsdWRlcycpLFxuICAgIGFycmF5SW5jbHVkZXNXaXRoID0gcmVxdWlyZSgnLi9fYXJyYXlJbmNsdWRlc1dpdGgnKSxcbiAgICBjYWNoZUhhcyA9IHJlcXVpcmUoJy4vX2NhY2hlSGFzJyksXG4gICAgY3JlYXRlU2V0ID0gcmVxdWlyZSgnLi9fY3JlYXRlU2V0JyksXG4gICAgc2V0VG9BcnJheSA9IHJlcXVpcmUoJy4vX3NldFRvQXJyYXknKTtcblxuLyoqIFVzZWQgYXMgdGhlIHNpemUgdG8gZW5hYmxlIGxhcmdlIGFycmF5IG9wdGltaXphdGlvbnMuICovXG52YXIgTEFSR0VfQVJSQVlfU0laRSA9IDIwMDtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy51bmlxQnlgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBkdXBsaWNhdGUgZnJlZSBhcnJheS5cbiAqL1xuZnVuY3Rpb24gYmFzZVVuaXEoYXJyYXksIGl0ZXJhdGVlLCBjb21wYXJhdG9yKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgaW5jbHVkZXMgPSBhcnJheUluY2x1ZGVzLFxuICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgaXNDb21tb24gPSB0cnVlLFxuICAgICAgcmVzdWx0ID0gW10sXG4gICAgICBzZWVuID0gcmVzdWx0O1xuXG4gIGlmIChjb21wYXJhdG9yKSB7XG4gICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICBpbmNsdWRlcyA9IGFycmF5SW5jbHVkZXNXaXRoO1xuICB9XG4gIGVsc2UgaWYgKGxlbmd0aCA+PSBMQVJHRV9BUlJBWV9TSVpFKSB7XG4gICAgdmFyIHNldCA9IGl0ZXJhdGVlID8gbnVsbCA6IGNyZWF0ZVNldChhcnJheSk7XG4gICAgaWYgKHNldCkge1xuICAgICAgcmV0dXJuIHNldFRvQXJyYXkoc2V0KTtcbiAgICB9XG4gICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICBpbmNsdWRlcyA9IGNhY2hlSGFzO1xuICAgIHNlZW4gPSBuZXcgU2V0Q2FjaGU7XG4gIH1cbiAgZWxzZSB7XG4gICAgc2VlbiA9IGl0ZXJhdGVlID8gW10gOiByZXN1bHQ7XG4gIH1cbiAgb3V0ZXI6XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlID8gaXRlcmF0ZWUodmFsdWUpIDogdmFsdWU7XG5cbiAgICB2YWx1ZSA9IChjb21wYXJhdG9yIHx8IHZhbHVlICE9PSAwKSA/IHZhbHVlIDogMDtcbiAgICBpZiAoaXNDb21tb24gJiYgY29tcHV0ZWQgPT09IGNvbXB1dGVkKSB7XG4gICAgICB2YXIgc2VlbkluZGV4ID0gc2Vlbi5sZW5ndGg7XG4gICAgICB3aGlsZSAoc2VlbkluZGV4LS0pIHtcbiAgICAgICAgaWYgKHNlZW5bc2VlbkluZGV4XSA9PT0gY29tcHV0ZWQpIHtcbiAgICAgICAgICBjb250aW51ZSBvdXRlcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGl0ZXJhdGVlKSB7XG4gICAgICAgIHNlZW4ucHVzaChjb21wdXRlZCk7XG4gICAgICB9XG4gICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKCFpbmNsdWRlcyhzZWVuLCBjb21wdXRlZCwgY29tcGFyYXRvcikpIHtcbiAgICAgIGlmIChzZWVuICE9PSByZXN1bHQpIHtcbiAgICAgICAgc2Vlbi5wdXNoKGNvbXB1dGVkKTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlVW5pcTtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGEgYGNhY2hlYCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gY2FjaGUgVGhlIGNhY2hlIHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGNhY2hlSGFzKGNhY2hlLCBrZXkpIHtcbiAgcmV0dXJuIGNhY2hlLmhhcyhrZXkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNhY2hlSGFzO1xuIiwidmFyIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBvdmVycmVhY2hpbmcgY29yZS1qcyBzaGltcy4gKi9cbnZhciBjb3JlSnNEYXRhID0gcm9vdFsnX19jb3JlLWpzX3NoYXJlZF9fJ107XG5cbm1vZHVsZS5leHBvcnRzID0gY29yZUpzRGF0YTtcbiIsInZhciBTZXQgPSByZXF1aXJlKCcuL19TZXQnKSxcbiAgICBub29wID0gcmVxdWlyZSgnLi9ub29wJyksXG4gICAgc2V0VG9BcnJheSA9IHJlcXVpcmUoJy4vX3NldFRvQXJyYXknKTtcblxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgSU5GSU5JVFkgPSAxIC8gMDtcblxuLyoqXG4gKiBDcmVhdGVzIGEgc2V0IG9iamVjdCBvZiBgdmFsdWVzYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gYWRkIHRvIHRoZSBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgc2V0LlxuICovXG52YXIgY3JlYXRlU2V0ID0gIShTZXQgJiYgKDEgLyBzZXRUb0FycmF5KG5ldyBTZXQoWywtMF0pKVsxXSkgPT0gSU5GSU5JVFkpID8gbm9vcCA6IGZ1bmN0aW9uKHZhbHVlcykge1xuICByZXR1cm4gbmV3IFNldCh2YWx1ZXMpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVTZXQ7XG4iLCJ2YXIgZ2V0TmF0aXZlID0gcmVxdWlyZSgnLi9fZ2V0TmF0aXZlJyk7XG5cbnZhciBkZWZpbmVQcm9wZXJ0eSA9IChmdW5jdGlvbigpIHtcbiAgdHJ5IHtcbiAgICB2YXIgZnVuYyA9IGdldE5hdGl2ZShPYmplY3QsICdkZWZpbmVQcm9wZXJ0eScpO1xuICAgIGZ1bmMoe30sICcnLCB7fSk7XG4gICAgcmV0dXJuIGZ1bmM7XG4gIH0gY2F0Y2ggKGUpIHt9XG59KCkpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRlZmluZVByb3BlcnR5O1xuIiwidmFyIFNldENhY2hlID0gcmVxdWlyZSgnLi9fU2V0Q2FjaGUnKSxcbiAgICBhcnJheVNvbWUgPSByZXF1aXJlKCcuL19hcnJheVNvbWUnKSxcbiAgICBjYWNoZUhhcyA9IHJlcXVpcmUoJy4vX2NhY2hlSGFzJyk7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIHZhbHVlIGNvbXBhcmlzb25zLiAqL1xudmFyIENPTVBBUkVfUEFSVElBTF9GTEFHID0gMSxcbiAgICBDT01QQVJFX1VOT1JERVJFRF9GTEFHID0gMjtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsRGVlcGAgZm9yIGFycmF5cyB3aXRoIHN1cHBvcnQgZm9yXG4gKiBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjb21wYXJlLlxuICogQHBhcmFtIHtBcnJheX0gb3RoZXIgVGhlIG90aGVyIGFycmF5IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzdGFjayBUcmFja3MgdHJhdmVyc2VkIGBhcnJheWAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgYXJyYXlzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGVxdWFsQXJyYXlzKGFycmF5LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICB2YXIgaXNQYXJ0aWFsID0gYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHLFxuICAgICAgYXJyTGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgb3RoTGVuZ3RoID0gb3RoZXIubGVuZ3RoO1xuXG4gIGlmIChhcnJMZW5ndGggIT0gb3RoTGVuZ3RoICYmICEoaXNQYXJ0aWFsICYmIG90aExlbmd0aCA+IGFyckxlbmd0aCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgLy8gQ2hlY2sgdGhhdCBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC5cbiAgdmFyIGFyclN0YWNrZWQgPSBzdGFjay5nZXQoYXJyYXkpO1xuICB2YXIgb3RoU3RhY2tlZCA9IHN0YWNrLmdldChvdGhlcik7XG4gIGlmIChhcnJTdGFja2VkICYmIG90aFN0YWNrZWQpIHtcbiAgICByZXR1cm4gYXJyU3RhY2tlZCA9PSBvdGhlciAmJiBvdGhTdGFja2VkID09IGFycmF5O1xuICB9XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgcmVzdWx0ID0gdHJ1ZSxcbiAgICAgIHNlZW4gPSAoYml0bWFzayAmIENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcpID8gbmV3IFNldENhY2hlIDogdW5kZWZpbmVkO1xuXG4gIHN0YWNrLnNldChhcnJheSwgb3RoZXIpO1xuICBzdGFjay5zZXQob3RoZXIsIGFycmF5KTtcblxuICAvLyBJZ25vcmUgbm9uLWluZGV4IHByb3BlcnRpZXMuXG4gIHdoaWxlICgrK2luZGV4IDwgYXJyTGVuZ3RoKSB7XG4gICAgdmFyIGFyclZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICBvdGhWYWx1ZSA9IG90aGVyW2luZGV4XTtcblxuICAgIGlmIChjdXN0b21pemVyKSB7XG4gICAgICB2YXIgY29tcGFyZWQgPSBpc1BhcnRpYWxcbiAgICAgICAgPyBjdXN0b21pemVyKG90aFZhbHVlLCBhcnJWYWx1ZSwgaW5kZXgsIG90aGVyLCBhcnJheSwgc3RhY2spXG4gICAgICAgIDogY3VzdG9taXplcihhcnJWYWx1ZSwgb3RoVmFsdWUsIGluZGV4LCBhcnJheSwgb3RoZXIsIHN0YWNrKTtcbiAgICB9XG4gICAgaWYgKGNvbXBhcmVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmIChjb21wYXJlZCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgYXJyYXlzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgaWYgKHNlZW4pIHtcbiAgICAgIGlmICghYXJyYXlTb21lKG90aGVyLCBmdW5jdGlvbihvdGhWYWx1ZSwgb3RoSW5kZXgpIHtcbiAgICAgICAgICAgIGlmICghY2FjaGVIYXMoc2Vlbiwgb3RoSW5kZXgpICYmXG4gICAgICAgICAgICAgICAgKGFyclZhbHVlID09PSBvdGhWYWx1ZSB8fCBlcXVhbEZ1bmMoYXJyVmFsdWUsIG90aFZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaykpKSB7XG4gICAgICAgICAgICAgIHJldHVybiBzZWVuLnB1c2gob3RoSW5kZXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pKSB7XG4gICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCEoXG4gICAgICAgICAgYXJyVmFsdWUgPT09IG90aFZhbHVlIHx8XG4gICAgICAgICAgICBlcXVhbEZ1bmMoYXJyVmFsdWUsIG90aFZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaylcbiAgICAgICAgKSkge1xuICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgc3RhY2tbJ2RlbGV0ZSddKGFycmF5KTtcbiAgc3RhY2tbJ2RlbGV0ZSddKG90aGVyKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlcXVhbEFycmF5cztcbiIsInZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19TeW1ib2wnKSxcbiAgICBVaW50OEFycmF5ID0gcmVxdWlyZSgnLi9fVWludDhBcnJheScpLFxuICAgIGVxID0gcmVxdWlyZSgnLi9lcScpLFxuICAgIGVxdWFsQXJyYXlzID0gcmVxdWlyZSgnLi9fZXF1YWxBcnJheXMnKSxcbiAgICBtYXBUb0FycmF5ID0gcmVxdWlyZSgnLi9fbWFwVG9BcnJheScpLFxuICAgIHNldFRvQXJyYXkgPSByZXF1aXJlKCcuL19zZXRUb0FycmF5Jyk7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIHZhbHVlIGNvbXBhcmlzb25zLiAqL1xudmFyIENPTVBBUkVfUEFSVElBTF9GTEFHID0gMSxcbiAgICBDT01QQVJFX1VOT1JERVJFRF9GTEFHID0gMjtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGJvb2xUYWcgPSAnW29iamVjdCBCb29sZWFuXScsXG4gICAgZGF0ZVRhZyA9ICdbb2JqZWN0IERhdGVdJyxcbiAgICBlcnJvclRhZyA9ICdbb2JqZWN0IEVycm9yXScsXG4gICAgbWFwVGFnID0gJ1tvYmplY3QgTWFwXScsXG4gICAgbnVtYmVyVGFnID0gJ1tvYmplY3QgTnVtYmVyXScsXG4gICAgcmVnZXhwVGFnID0gJ1tvYmplY3QgUmVnRXhwXScsXG4gICAgc2V0VGFnID0gJ1tvYmplY3QgU2V0XScsXG4gICAgc3RyaW5nVGFnID0gJ1tvYmplY3QgU3RyaW5nXScsXG4gICAgc3ltYm9sVGFnID0gJ1tvYmplY3QgU3ltYm9sXSc7XG5cbnZhciBhcnJheUJ1ZmZlclRhZyA9ICdbb2JqZWN0IEFycmF5QnVmZmVyXScsXG4gICAgZGF0YVZpZXdUYWcgPSAnW29iamVjdCBEYXRhVmlld10nO1xuXG4vKiogVXNlZCB0byBjb252ZXJ0IHN5bWJvbHMgdG8gcHJpbWl0aXZlcyBhbmQgc3RyaW5ncy4gKi9cbnZhciBzeW1ib2xQcm90byA9IFN5bWJvbCA/IFN5bWJvbC5wcm90b3R5cGUgOiB1bmRlZmluZWQsXG4gICAgc3ltYm9sVmFsdWVPZiA9IHN5bWJvbFByb3RvID8gc3ltYm9sUHJvdG8udmFsdWVPZiA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsRGVlcGAgZm9yIGNvbXBhcmluZyBvYmplY3RzIG9mXG4gKiB0aGUgc2FtZSBgdG9TdHJpbmdUYWdgLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIGZ1bmN0aW9uIG9ubHkgc3VwcG9ydHMgY29tcGFyaW5nIHZhbHVlcyB3aXRoIHRhZ3Mgb2ZcbiAqIGBCb29sZWFuYCwgYERhdGVgLCBgRXJyb3JgLCBgTnVtYmVyYCwgYFJlZ0V4cGAsIG9yIGBTdHJpbmdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge3N0cmluZ30gdGFnIFRoZSBgdG9TdHJpbmdUYWdgIG9mIHRoZSBvYmplY3RzIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzdGFjayBUcmFja3MgdHJhdmVyc2VkIGBvYmplY3RgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9iamVjdHMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gZXF1YWxCeVRhZyhvYmplY3QsIG90aGVyLCB0YWcsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgc3dpdGNoICh0YWcpIHtcbiAgICBjYXNlIGRhdGFWaWV3VGFnOlxuICAgICAgaWYgKChvYmplY3QuYnl0ZUxlbmd0aCAhPSBvdGhlci5ieXRlTGVuZ3RoKSB8fFxuICAgICAgICAgIChvYmplY3QuYnl0ZU9mZnNldCAhPSBvdGhlci5ieXRlT2Zmc2V0KSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBvYmplY3QgPSBvYmplY3QuYnVmZmVyO1xuICAgICAgb3RoZXIgPSBvdGhlci5idWZmZXI7XG5cbiAgICBjYXNlIGFycmF5QnVmZmVyVGFnOlxuICAgICAgaWYgKChvYmplY3QuYnl0ZUxlbmd0aCAhPSBvdGhlci5ieXRlTGVuZ3RoKSB8fFxuICAgICAgICAgICFlcXVhbEZ1bmMobmV3IFVpbnQ4QXJyYXkob2JqZWN0KSwgbmV3IFVpbnQ4QXJyYXkob3RoZXIpKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcblxuICAgIGNhc2UgYm9vbFRhZzpcbiAgICBjYXNlIGRhdGVUYWc6XG4gICAgY2FzZSBudW1iZXJUYWc6XG4gICAgICAvLyBDb2VyY2UgYm9vbGVhbnMgdG8gYDFgIG9yIGAwYCBhbmQgZGF0ZXMgdG8gbWlsbGlzZWNvbmRzLlxuICAgICAgLy8gSW52YWxpZCBkYXRlcyBhcmUgY29lcmNlZCB0byBgTmFOYC5cbiAgICAgIHJldHVybiBlcSgrb2JqZWN0LCArb3RoZXIpO1xuXG4gICAgY2FzZSBlcnJvclRhZzpcbiAgICAgIHJldHVybiBvYmplY3QubmFtZSA9PSBvdGhlci5uYW1lICYmIG9iamVjdC5tZXNzYWdlID09IG90aGVyLm1lc3NhZ2U7XG5cbiAgICBjYXNlIHJlZ2V4cFRhZzpcbiAgICBjYXNlIHN0cmluZ1RhZzpcbiAgICAgIC8vIENvZXJjZSByZWdleGVzIHRvIHN0cmluZ3MgYW5kIHRyZWF0IHN0cmluZ3MsIHByaW1pdGl2ZXMgYW5kIG9iamVjdHMsXG4gICAgICAvLyBhcyBlcXVhbC4gU2VlIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1yZWdleHAucHJvdG90eXBlLnRvc3RyaW5nXG4gICAgICAvLyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgcmV0dXJuIG9iamVjdCA9PSAob3RoZXIgKyAnJyk7XG5cbiAgICBjYXNlIG1hcFRhZzpcbiAgICAgIHZhciBjb252ZXJ0ID0gbWFwVG9BcnJheTtcblxuICAgIGNhc2Ugc2V0VGFnOlxuICAgICAgdmFyIGlzUGFydGlhbCA9IGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRztcbiAgICAgIGNvbnZlcnQgfHwgKGNvbnZlcnQgPSBzZXRUb0FycmF5KTtcblxuICAgICAgaWYgKG9iamVjdC5zaXplICE9IG90aGVyLnNpemUgJiYgIWlzUGFydGlhbCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICAvLyBBc3N1bWUgY3ljbGljIHZhbHVlcyBhcmUgZXF1YWwuXG4gICAgICB2YXIgc3RhY2tlZCA9IHN0YWNrLmdldChvYmplY3QpO1xuICAgICAgaWYgKHN0YWNrZWQpIHtcbiAgICAgICAgcmV0dXJuIHN0YWNrZWQgPT0gb3RoZXI7XG4gICAgICB9XG4gICAgICBiaXRtYXNrIHw9IENPTVBBUkVfVU5PUkRFUkVEX0ZMQUc7XG5cbiAgICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgb2JqZWN0cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgc3RhY2suc2V0KG9iamVjdCwgb3RoZXIpO1xuICAgICAgdmFyIHJlc3VsdCA9IGVxdWFsQXJyYXlzKGNvbnZlcnQob2JqZWN0KSwgY29udmVydChvdGhlciksIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spO1xuICAgICAgc3RhY2tbJ2RlbGV0ZSddKG9iamVjdCk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuXG4gICAgY2FzZSBzeW1ib2xUYWc6XG4gICAgICBpZiAoc3ltYm9sVmFsdWVPZikge1xuICAgICAgICByZXR1cm4gc3ltYm9sVmFsdWVPZi5jYWxsKG9iamVjdCkgPT0gc3ltYm9sVmFsdWVPZi5jYWxsKG90aGVyKTtcbiAgICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXF1YWxCeVRhZztcbiIsInZhciBnZXRBbGxLZXlzID0gcmVxdWlyZSgnLi9fZ2V0QWxsS2V5cycpO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciB2YWx1ZSBjb21wYXJpc29ucy4gKi9cbnZhciBDT01QQVJFX1BBUlRJQUxfRkxBRyA9IDE7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbERlZXBgIGZvciBvYmplY3RzIHdpdGggc3VwcG9ydCBmb3JcbiAqIHBhcnRpYWwgZGVlcCBjb21wYXJpc29ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge09iamVjdH0gb3RoZXIgVGhlIG90aGVyIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gKiBAcGFyYW0ge09iamVjdH0gc3RhY2sgVHJhY2tzIHRyYXZlcnNlZCBgb2JqZWN0YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBvYmplY3RzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGVxdWFsT2JqZWN0cyhvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gIHZhciBpc1BhcnRpYWwgPSBiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUcsXG4gICAgICBvYmpQcm9wcyA9IGdldEFsbEtleXMob2JqZWN0KSxcbiAgICAgIG9iakxlbmd0aCA9IG9ialByb3BzLmxlbmd0aCxcbiAgICAgIG90aFByb3BzID0gZ2V0QWxsS2V5cyhvdGhlciksXG4gICAgICBvdGhMZW5ndGggPSBvdGhQcm9wcy5sZW5ndGg7XG5cbiAgaWYgKG9iakxlbmd0aCAhPSBvdGhMZW5ndGggJiYgIWlzUGFydGlhbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgaW5kZXggPSBvYmpMZW5ndGg7XG4gIHdoaWxlIChpbmRleC0tKSB7XG4gICAgdmFyIGtleSA9IG9ialByb3BzW2luZGV4XTtcbiAgICBpZiAoIShpc1BhcnRpYWwgPyBrZXkgaW4gb3RoZXIgOiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG90aGVyLCBrZXkpKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICAvLyBDaGVjayB0aGF0IGN5Y2xpYyB2YWx1ZXMgYXJlIGVxdWFsLlxuICB2YXIgb2JqU3RhY2tlZCA9IHN0YWNrLmdldChvYmplY3QpO1xuICB2YXIgb3RoU3RhY2tlZCA9IHN0YWNrLmdldChvdGhlcik7XG4gIGlmIChvYmpTdGFja2VkICYmIG90aFN0YWNrZWQpIHtcbiAgICByZXR1cm4gb2JqU3RhY2tlZCA9PSBvdGhlciAmJiBvdGhTdGFja2VkID09IG9iamVjdDtcbiAgfVxuICB2YXIgcmVzdWx0ID0gdHJ1ZTtcbiAgc3RhY2suc2V0KG9iamVjdCwgb3RoZXIpO1xuICBzdGFjay5zZXQob3RoZXIsIG9iamVjdCk7XG5cbiAgdmFyIHNraXBDdG9yID0gaXNQYXJ0aWFsO1xuICB3aGlsZSAoKytpbmRleCA8IG9iakxlbmd0aCkge1xuICAgIGtleSA9IG9ialByb3BzW2luZGV4XTtcbiAgICB2YXIgb2JqVmFsdWUgPSBvYmplY3Rba2V5XSxcbiAgICAgICAgb3RoVmFsdWUgPSBvdGhlcltrZXldO1xuXG4gICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgIHZhciBjb21wYXJlZCA9IGlzUGFydGlhbFxuICAgICAgICA/IGN1c3RvbWl6ZXIob3RoVmFsdWUsIG9ialZhbHVlLCBrZXksIG90aGVyLCBvYmplY3QsIHN0YWNrKVxuICAgICAgICA6IGN1c3RvbWl6ZXIob2JqVmFsdWUsIG90aFZhbHVlLCBrZXksIG9iamVjdCwgb3RoZXIsIHN0YWNrKTtcbiAgICB9XG4gICAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBvYmplY3RzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgaWYgKCEoY29tcGFyZWQgPT09IHVuZGVmaW5lZFxuICAgICAgICAgID8gKG9ialZhbHVlID09PSBvdGhWYWx1ZSB8fCBlcXVhbEZ1bmMob2JqVmFsdWUsIG90aFZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaykpXG4gICAgICAgICAgOiBjb21wYXJlZFxuICAgICAgICApKSB7XG4gICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBza2lwQ3RvciB8fCAoc2tpcEN0b3IgPSBrZXkgPT0gJ2NvbnN0cnVjdG9yJyk7XG4gIH1cbiAgaWYgKHJlc3VsdCAmJiAhc2tpcEN0b3IpIHtcbiAgICB2YXIgb2JqQ3RvciA9IG9iamVjdC5jb25zdHJ1Y3RvcixcbiAgICAgICAgb3RoQ3RvciA9IG90aGVyLmNvbnN0cnVjdG9yO1xuXG4gICAgLy8gTm9uIGBPYmplY3RgIG9iamVjdCBpbnN0YW5jZXMgd2l0aCBkaWZmZXJlbnQgY29uc3RydWN0b3JzIGFyZSBub3QgZXF1YWwuXG4gICAgaWYgKG9iakN0b3IgIT0gb3RoQ3RvciAmJlxuICAgICAgICAoJ2NvbnN0cnVjdG9yJyBpbiBvYmplY3QgJiYgJ2NvbnN0cnVjdG9yJyBpbiBvdGhlcikgJiZcbiAgICAgICAgISh0eXBlb2Ygb2JqQ3RvciA9PSAnZnVuY3Rpb24nICYmIG9iakN0b3IgaW5zdGFuY2VvZiBvYmpDdG9yICYmXG4gICAgICAgICAgdHlwZW9mIG90aEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBvdGhDdG9yIGluc3RhbmNlb2Ygb3RoQ3RvcikpIHtcbiAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgIH1cbiAgfVxuICBzdGFja1snZGVsZXRlJ10ob2JqZWN0KTtcbiAgc3RhY2tbJ2RlbGV0ZSddKG90aGVyKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlcXVhbE9iamVjdHM7XG4iLCIvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGdsb2JhbGAgZnJvbSBOb2RlLmpzLiAqL1xudmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCAmJiBnbG9iYWwuT2JqZWN0ID09PSBPYmplY3QgJiYgZ2xvYmFsO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZyZWVHbG9iYWw7XG4iLCJ2YXIgYmFzZUdldEFsbEtleXMgPSByZXF1aXJlKCcuL19iYXNlR2V0QWxsS2V5cycpLFxuICAgIGdldFN5bWJvbHMgPSByZXF1aXJlKCcuL19nZXRTeW1ib2xzJyksXG4gICAga2V5cyA9IHJlcXVpcmUoJy4va2V5cycpO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2Ygb3duIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMuXG4gKi9cbmZ1bmN0aW9uIGdldEFsbEtleXMob2JqZWN0KSB7XG4gIHJldHVybiBiYXNlR2V0QWxsS2V5cyhvYmplY3QsIGtleXMsIGdldFN5bWJvbHMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEFsbEtleXM7XG4iLCJ2YXIgaXNLZXlhYmxlID0gcmVxdWlyZSgnLi9faXNLZXlhYmxlJyk7XG5cbi8qKlxuICogR2V0cyB0aGUgZGF0YSBmb3IgYG1hcGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBtYXAgVGhlIG1hcCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIHJlZmVyZW5jZSBrZXkuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWFwIGRhdGEuXG4gKi9cbmZ1bmN0aW9uIGdldE1hcERhdGEobWFwLCBrZXkpIHtcbiAgdmFyIGRhdGEgPSBtYXAuX19kYXRhX187XG4gIHJldHVybiBpc0tleWFibGUoa2V5KVxuICAgID8gZGF0YVt0eXBlb2Yga2V5ID09ICdzdHJpbmcnID8gJ3N0cmluZycgOiAnaGFzaCddXG4gICAgOiBkYXRhLm1hcDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRNYXBEYXRhO1xuIiwidmFyIGJhc2VJc05hdGl2ZSA9IHJlcXVpcmUoJy4vX2Jhc2VJc05hdGl2ZScpLFxuICAgIGdldFZhbHVlID0gcmVxdWlyZSgnLi9fZ2V0VmFsdWUnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBuYXRpdmUgZnVuY3Rpb24gYXQgYGtleWAgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgbWV0aG9kIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBpZiBpdCdzIG5hdGl2ZSwgZWxzZSBgdW5kZWZpbmVkYC5cbiAqL1xuZnVuY3Rpb24gZ2V0TmF0aXZlKG9iamVjdCwga2V5KSB7XG4gIHZhciB2YWx1ZSA9IGdldFZhbHVlKG9iamVjdCwga2V5KTtcbiAgcmV0dXJuIGJhc2VJc05hdGl2ZSh2YWx1ZSkgPyB2YWx1ZSA6IHVuZGVmaW5lZDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXROYXRpdmU7XG4iLCJ2YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fU3ltYm9sJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZVxuICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBuYXRpdmVPYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1Ub1N0cmluZ1RhZyA9IFN5bWJvbCA/IFN5bWJvbC50b1N0cmluZ1RhZyA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VHZXRUYWdgIHdoaWNoIGlnbm9yZXMgYFN5bWJvbC50b1N0cmluZ1RhZ2AgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHJhdyBgdG9TdHJpbmdUYWdgLlxuICovXG5mdW5jdGlvbiBnZXRSYXdUYWcodmFsdWUpIHtcbiAgdmFyIGlzT3duID0gaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgc3ltVG9TdHJpbmdUYWcpLFxuICAgICAgdGFnID0gdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuXG4gIHRyeSB7XG4gICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdW5kZWZpbmVkO1xuICAgIHZhciB1bm1hc2tlZCA9IHRydWU7XG4gIH0gY2F0Y2ggKGUpIHt9XG5cbiAgdmFyIHJlc3VsdCA9IG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICBpZiAodW5tYXNrZWQpIHtcbiAgICBpZiAoaXNPd24pIHtcbiAgICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHRhZztcbiAgICB9IGVsc2Uge1xuICAgICAgZGVsZXRlIHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRSYXdUYWc7XG4iLCJ2YXIgYXJyYXlGaWx0ZXIgPSByZXF1aXJlKCcuL19hcnJheUZpbHRlcicpLFxuICAgIHN0dWJBcnJheSA9IHJlcXVpcmUoJy4vc3R1YkFycmF5Jyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHByb3BlcnR5SXNFbnVtZXJhYmxlID0gb2JqZWN0UHJvdG8ucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVHZXRTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gZW51bWVyYWJsZSBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHN5bWJvbHMuXG4gKi9cbnZhciBnZXRTeW1ib2xzID0gIW5hdGl2ZUdldFN5bWJvbHMgPyBzdHViQXJyYXkgOiBmdW5jdGlvbihvYmplY3QpIHtcbiAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuICByZXR1cm4gYXJyYXlGaWx0ZXIobmF0aXZlR2V0U3ltYm9scyhvYmplY3QpLCBmdW5jdGlvbihzeW1ib2wpIHtcbiAgICByZXR1cm4gcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChvYmplY3QsIHN5bWJvbCk7XG4gIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBnZXRTeW1ib2xzO1xuIiwidmFyIERhdGFWaWV3ID0gcmVxdWlyZSgnLi9fRGF0YVZpZXcnKSxcbiAgICBNYXAgPSByZXF1aXJlKCcuL19NYXAnKSxcbiAgICBQcm9taXNlID0gcmVxdWlyZSgnLi9fUHJvbWlzZScpLFxuICAgIFNldCA9IHJlcXVpcmUoJy4vX1NldCcpLFxuICAgIFdlYWtNYXAgPSByZXF1aXJlKCcuL19XZWFrTWFwJyksXG4gICAgYmFzZUdldFRhZyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRUYWcnKSxcbiAgICB0b1NvdXJjZSA9IHJlcXVpcmUoJy4vX3RvU291cmNlJyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBtYXBUYWcgPSAnW29iamVjdCBNYXBdJyxcbiAgICBvYmplY3RUYWcgPSAnW29iamVjdCBPYmplY3RdJyxcbiAgICBwcm9taXNlVGFnID0gJ1tvYmplY3QgUHJvbWlzZV0nLFxuICAgIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nLFxuICAgIHdlYWtNYXBUYWcgPSAnW29iamVjdCBXZWFrTWFwXSc7XG5cbnZhciBkYXRhVmlld1RhZyA9ICdbb2JqZWN0IERhdGFWaWV3XSc7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBtYXBzLCBzZXRzLCBhbmQgd2Vha21hcHMuICovXG52YXIgZGF0YVZpZXdDdG9yU3RyaW5nID0gdG9Tb3VyY2UoRGF0YVZpZXcpLFxuICAgIG1hcEN0b3JTdHJpbmcgPSB0b1NvdXJjZShNYXApLFxuICAgIHByb21pc2VDdG9yU3RyaW5nID0gdG9Tb3VyY2UoUHJvbWlzZSksXG4gICAgc2V0Q3RvclN0cmluZyA9IHRvU291cmNlKFNldCksXG4gICAgd2Vha01hcEN0b3JTdHJpbmcgPSB0b1NvdXJjZShXZWFrTWFwKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBgdG9TdHJpbmdUYWdgIG9mIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAqL1xudmFyIGdldFRhZyA9IGJhc2VHZXRUYWc7XG5cbi8vIEZhbGxiYWNrIGZvciBkYXRhIHZpZXdzLCBtYXBzLCBzZXRzLCBhbmQgd2VhayBtYXBzIGluIElFIDExIGFuZCBwcm9taXNlcyBpbiBOb2RlLmpzIDwgNi5cbmlmICgoRGF0YVZpZXcgJiYgZ2V0VGFnKG5ldyBEYXRhVmlldyhuZXcgQXJyYXlCdWZmZXIoMSkpKSAhPSBkYXRhVmlld1RhZykgfHxcbiAgICAoTWFwICYmIGdldFRhZyhuZXcgTWFwKSAhPSBtYXBUYWcpIHx8XG4gICAgKFByb21pc2UgJiYgZ2V0VGFnKFByb21pc2UucmVzb2x2ZSgpKSAhPSBwcm9taXNlVGFnKSB8fFxuICAgIChTZXQgJiYgZ2V0VGFnKG5ldyBTZXQpICE9IHNldFRhZykgfHxcbiAgICAoV2Vha01hcCAmJiBnZXRUYWcobmV3IFdlYWtNYXApICE9IHdlYWtNYXBUYWcpKSB7XG4gIGdldFRhZyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgdmFyIHJlc3VsdCA9IGJhc2VHZXRUYWcodmFsdWUpLFxuICAgICAgICBDdG9yID0gcmVzdWx0ID09IG9iamVjdFRhZyA/IHZhbHVlLmNvbnN0cnVjdG9yIDogdW5kZWZpbmVkLFxuICAgICAgICBjdG9yU3RyaW5nID0gQ3RvciA/IHRvU291cmNlKEN0b3IpIDogJyc7XG5cbiAgICBpZiAoY3RvclN0cmluZykge1xuICAgICAgc3dpdGNoIChjdG9yU3RyaW5nKSB7XG4gICAgICAgIGNhc2UgZGF0YVZpZXdDdG9yU3RyaW5nOiByZXR1cm4gZGF0YVZpZXdUYWc7XG4gICAgICAgIGNhc2UgbWFwQ3RvclN0cmluZzogcmV0dXJuIG1hcFRhZztcbiAgICAgICAgY2FzZSBwcm9taXNlQ3RvclN0cmluZzogcmV0dXJuIHByb21pc2VUYWc7XG4gICAgICAgIGNhc2Ugc2V0Q3RvclN0cmluZzogcmV0dXJuIHNldFRhZztcbiAgICAgICAgY2FzZSB3ZWFrTWFwQ3RvclN0cmluZzogcmV0dXJuIHdlYWtNYXBUYWc7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0VGFnO1xuIiwiLyoqXG4gKiBHZXRzIHRoZSB2YWx1ZSBhdCBga2V5YCBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwcm9wZXJ0eSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gZ2V0VmFsdWUob2JqZWN0LCBrZXkpIHtcbiAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W2tleV07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0VmFsdWU7XG4iLCJ2YXIgbmF0aXZlQ3JlYXRlID0gcmVxdWlyZSgnLi9fbmF0aXZlQ3JlYXRlJyk7XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgaGFzaC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKi9cbmZ1bmN0aW9uIGhhc2hDbGVhcigpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IG5hdGl2ZUNyZWF0ZSA/IG5hdGl2ZUNyZWF0ZShudWxsKSA6IHt9O1xuICB0aGlzLnNpemUgPSAwO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc2hDbGVhcjtcbiIsIi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIGhhc2guXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7T2JqZWN0fSBoYXNoIFRoZSBoYXNoIHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBoYXNoRGVsZXRlKGtleSkge1xuICB2YXIgcmVzdWx0ID0gdGhpcy5oYXMoa2V5KSAmJiBkZWxldGUgdGhpcy5fX2RhdGFfX1trZXldO1xuICB0aGlzLnNpemUgLT0gcmVzdWx0ID8gMSA6IDA7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzaERlbGV0ZTtcbiIsInZhciBuYXRpdmVDcmVhdGUgPSByZXF1aXJlKCcuL19uYXRpdmVDcmVhdGUnKTtcblxuLyoqIFVzZWQgdG8gc3RhbmQtaW4gZm9yIGB1bmRlZmluZWRgIGhhc2ggdmFsdWVzLiAqL1xudmFyIEhBU0hfVU5ERUZJTkVEID0gJ19fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18nO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIEdldHMgdGhlIGhhc2ggdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gaGFzaEdldChrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICBpZiAobmF0aXZlQ3JlYXRlKSB7XG4gICAgdmFyIHJlc3VsdCA9IGRhdGFba2V5XTtcbiAgICByZXR1cm4gcmVzdWx0ID09PSBIQVNIX1VOREVGSU5FRCA/IHVuZGVmaW5lZCA6IHJlc3VsdDtcbiAgfVxuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLCBrZXkpID8gZGF0YVtrZXldIDogdW5kZWZpbmVkO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc2hHZXQ7XG4iLCJ2YXIgbmF0aXZlQ3JlYXRlID0gcmVxdWlyZSgnLi9fbmF0aXZlQ3JlYXRlJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgaGFzaCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaGFzaEhhcyhrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICByZXR1cm4gbmF0aXZlQ3JlYXRlID8gKGRhdGFba2V5XSAhPT0gdW5kZWZpbmVkKSA6IGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNoSGFzO1xuIiwidmFyIG5hdGl2ZUNyZWF0ZSA9IHJlcXVpcmUoJy4vX25hdGl2ZUNyZWF0ZScpO1xuXG4vKiogVXNlZCB0byBzdGFuZC1pbiBmb3IgYHVuZGVmaW5lZGAgaGFzaCB2YWx1ZXMuICovXG52YXIgSEFTSF9VTkRFRklORUQgPSAnX19sb2Rhc2hfaGFzaF91bmRlZmluZWRfXyc7XG5cbi8qKlxuICogU2V0cyB0aGUgaGFzaCBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGhhc2ggaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIGhhc2hTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIHRoaXMuc2l6ZSArPSB0aGlzLmhhcyhrZXkpID8gMCA6IDE7XG4gIGRhdGFba2V5XSA9IChuYXRpdmVDcmVhdGUgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCkgPyBIQVNIX1VOREVGSU5FRCA6IHZhbHVlO1xuICByZXR1cm4gdGhpcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNoU2V0O1xuIiwidmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX1N5bWJvbCcpLFxuICAgIGlzQXJndW1lbnRzID0gcmVxdWlyZSgnLi9pc0FyZ3VtZW50cycpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgc3ByZWFkYWJsZVN5bWJvbCA9IFN5bWJvbCA/IFN5bWJvbC5pc0NvbmNhdFNwcmVhZGFibGUgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBmbGF0dGVuYWJsZSBgYXJndW1lbnRzYCBvYmplY3Qgb3IgYXJyYXkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZmxhdHRlbmFibGUsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNGbGF0dGVuYWJsZSh2YWx1ZSkge1xuICByZXR1cm4gaXNBcnJheSh2YWx1ZSkgfHwgaXNBcmd1bWVudHModmFsdWUpIHx8XG4gICAgISEoc3ByZWFkYWJsZVN5bWJvbCAmJiB2YWx1ZSAmJiB2YWx1ZVtzcHJlYWRhYmxlU3ltYm9sXSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNGbGF0dGVuYWJsZTtcbiIsIi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIE1BWF9TQUZFX0lOVEVHRVIgPSA5MDA3MTk5MjU0NzQwOTkxO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgdW5zaWduZWQgaW50ZWdlciB2YWx1ZXMuICovXG52YXIgcmVJc1VpbnQgPSAvXig/OjB8WzEtOV1cXGQqKSQvO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBpbmRleC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aD1NQVhfU0FGRV9JTlRFR0VSXSBUaGUgdXBwZXIgYm91bmRzIG9mIGEgdmFsaWQgaW5kZXguXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGluZGV4LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzSW5kZXgodmFsdWUsIGxlbmd0aCkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgbGVuZ3RoID0gbGVuZ3RoID09IG51bGwgPyBNQVhfU0FGRV9JTlRFR0VSIDogbGVuZ3RoO1xuXG4gIHJldHVybiAhIWxlbmd0aCAmJlxuICAgICh0eXBlID09ICdudW1iZXInIHx8XG4gICAgICAodHlwZSAhPSAnc3ltYm9sJyAmJiByZUlzVWludC50ZXN0KHZhbHVlKSkpICYmXG4gICAgICAgICh2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDwgbGVuZ3RoKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0luZGV4O1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSBmb3IgdXNlIGFzIHVuaXF1ZSBvYmplY3Qga2V5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzS2V5YWJsZSh2YWx1ZSkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgcmV0dXJuICh0eXBlID09ICdzdHJpbmcnIHx8IHR5cGUgPT0gJ251bWJlcicgfHwgdHlwZSA9PSAnc3ltYm9sJyB8fCB0eXBlID09ICdib29sZWFuJylcbiAgICA/ICh2YWx1ZSAhPT0gJ19fcHJvdG9fXycpXG4gICAgOiAodmFsdWUgPT09IG51bGwpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzS2V5YWJsZTtcbiIsInZhciBjb3JlSnNEYXRhID0gcmVxdWlyZSgnLi9fY29yZUpzRGF0YScpO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgbWV0aG9kcyBtYXNxdWVyYWRpbmcgYXMgbmF0aXZlLiAqL1xudmFyIG1hc2tTcmNLZXkgPSAoZnVuY3Rpb24oKSB7XG4gIHZhciB1aWQgPSAvW14uXSskLy5leGVjKGNvcmVKc0RhdGEgJiYgY29yZUpzRGF0YS5rZXlzICYmIGNvcmVKc0RhdGEua2V5cy5JRV9QUk9UTyB8fCAnJyk7XG4gIHJldHVybiB1aWQgPyAoJ1N5bWJvbChzcmMpXzEuJyArIHVpZCkgOiAnJztcbn0oKSk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGBmdW5jYCBoYXMgaXRzIHNvdXJjZSBtYXNrZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBmdW5jYCBpcyBtYXNrZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNNYXNrZWQoZnVuYykge1xuICByZXR1cm4gISFtYXNrU3JjS2V5ICYmIChtYXNrU3JjS2V5IGluIGZ1bmMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzTWFza2VkO1xuIiwiLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYSBwcm90b3R5cGUgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcHJvdG90eXBlLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzUHJvdG90eXBlKHZhbHVlKSB7XG4gIHZhciBDdG9yID0gdmFsdWUgJiYgdmFsdWUuY29uc3RydWN0b3IsXG4gICAgICBwcm90byA9ICh0eXBlb2YgQ3RvciA9PSAnZnVuY3Rpb24nICYmIEN0b3IucHJvdG90eXBlKSB8fCBvYmplY3RQcm90bztcblxuICByZXR1cm4gdmFsdWUgPT09IHByb3RvO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzUHJvdG90eXBlO1xuIiwiLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBsaXN0IGNhY2hlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVDbGVhcigpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IFtdO1xuICB0aGlzLnNpemUgPSAwO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGxpc3RDYWNoZUNsZWFyO1xuIiwidmFyIGFzc29jSW5kZXhPZiA9IHJlcXVpcmUoJy4vX2Fzc29jSW5kZXhPZicpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgYXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgc3BsaWNlID0gYXJyYXlQcm90by5zcGxpY2U7XG5cbi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIGxpc3QgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZURlbGV0ZShrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICBpZiAoaW5kZXggPCAwKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBsYXN0SW5kZXggPSBkYXRhLmxlbmd0aCAtIDE7XG4gIGlmIChpbmRleCA9PSBsYXN0SW5kZXgpIHtcbiAgICBkYXRhLnBvcCgpO1xuICB9IGVsc2Uge1xuICAgIHNwbGljZS5jYWxsKGRhdGEsIGluZGV4LCAxKTtcbiAgfVxuICAtLXRoaXMuc2l6ZTtcbiAgcmV0dXJuIHRydWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbGlzdENhY2hlRGVsZXRlO1xuIiwidmFyIGFzc29jSW5kZXhPZiA9IHJlcXVpcmUoJy4vX2Fzc29jSW5kZXhPZicpO1xuXG4vKipcbiAqIEdldHMgdGhlIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVHZXQoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgcmV0dXJuIGluZGV4IDwgMCA/IHVuZGVmaW5lZCA6IGRhdGFbaW5kZXhdWzFdO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGxpc3RDYWNoZUdldDtcbiIsInZhciBhc3NvY0luZGV4T2YgPSByZXF1aXJlKCcuL19hc3NvY0luZGV4T2YnKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYSBsaXN0IGNhY2hlIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZUhhcyhrZXkpIHtcbiAgcmV0dXJuIGFzc29jSW5kZXhPZih0aGlzLl9fZGF0YV9fLCBrZXkpID4gLTE7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbGlzdENhY2hlSGFzO1xuIiwidmFyIGFzc29jSW5kZXhPZiA9IHJlcXVpcmUoJy4vX2Fzc29jSW5kZXhPZicpO1xuXG4vKipcbiAqIFNldHMgdGhlIGxpc3QgY2FjaGUgYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGxpc3QgY2FjaGUgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZVNldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgaWYgKGluZGV4IDwgMCkge1xuICAgICsrdGhpcy5zaXplO1xuICAgIGRhdGEucHVzaChba2V5LCB2YWx1ZV0pO1xuICB9IGVsc2Uge1xuICAgIGRhdGFbaW5kZXhdWzFdID0gdmFsdWU7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbGlzdENhY2hlU2V0O1xuIiwidmFyIEhhc2ggPSByZXF1aXJlKCcuL19IYXNoJyksXG4gICAgTGlzdENhY2hlID0gcmVxdWlyZSgnLi9fTGlzdENhY2hlJyksXG4gICAgTWFwID0gcmVxdWlyZSgnLi9fTWFwJyk7XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgbWFwLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlQ2xlYXIoKSB7XG4gIHRoaXMuc2l6ZSA9IDA7XG4gIHRoaXMuX19kYXRhX18gPSB7XG4gICAgJ2hhc2gnOiBuZXcgSGFzaCxcbiAgICAnbWFwJzogbmV3IChNYXAgfHwgTGlzdENhY2hlKSxcbiAgICAnc3RyaW5nJzogbmV3IEhhc2hcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXBDYWNoZUNsZWFyO1xuIiwidmFyIGdldE1hcERhdGEgPSByZXF1aXJlKCcuL19nZXRNYXBEYXRhJyk7XG5cbi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIG1hcC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZURlbGV0ZShrZXkpIHtcbiAgdmFyIHJlc3VsdCA9IGdldE1hcERhdGEodGhpcywga2V5KVsnZGVsZXRlJ10oa2V5KTtcbiAgdGhpcy5zaXplIC09IHJlc3VsdCA/IDEgOiAwO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcENhY2hlRGVsZXRlO1xuIiwidmFyIGdldE1hcERhdGEgPSByZXF1aXJlKCcuL19nZXRNYXBEYXRhJyk7XG5cbi8qKlxuICogR2V0cyB0aGUgbWFwIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUdldChrZXkpIHtcbiAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KS5nZXQoa2V5KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXBDYWNoZUdldDtcbiIsInZhciBnZXRNYXBEYXRhID0gcmVxdWlyZSgnLi9fZ2V0TWFwRGF0YScpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBhIG1hcCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlSGFzKGtleSkge1xuICByZXR1cm4gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLmhhcyhrZXkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcENhY2hlSGFzO1xuIiwidmFyIGdldE1hcERhdGEgPSByZXF1aXJlKCcuL19nZXRNYXBEYXRhJyk7XG5cbi8qKlxuICogU2V0cyB0aGUgbWFwIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG1hcCBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IGdldE1hcERhdGEodGhpcywga2V5KSxcbiAgICAgIHNpemUgPSBkYXRhLnNpemU7XG5cbiAgZGF0YS5zZXQoa2V5LCB2YWx1ZSk7XG4gIHRoaXMuc2l6ZSArPSBkYXRhLnNpemUgPT0gc2l6ZSA/IDAgOiAxO1xuICByZXR1cm4gdGhpcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXBDYWNoZVNldDtcbiIsIi8qKlxuICogQ29udmVydHMgYG1hcGAgdG8gaXRzIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG1hcCBUaGUgbWFwIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGtleS12YWx1ZSBwYWlycy5cbiAqL1xuZnVuY3Rpb24gbWFwVG9BcnJheShtYXApIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSBBcnJheShtYXAuc2l6ZSk7XG5cbiAgbWFwLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgIHJlc3VsdFsrK2luZGV4XSA9IFtrZXksIHZhbHVlXTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwVG9BcnJheTtcbiIsInZhciBnZXROYXRpdmUgPSByZXF1aXJlKCcuL19nZXROYXRpdmUnKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIG5hdGl2ZUNyZWF0ZSA9IGdldE5hdGl2ZShPYmplY3QsICdjcmVhdGUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBuYXRpdmVDcmVhdGU7XG4iLCJ2YXIgb3ZlckFyZyA9IHJlcXVpcmUoJy4vX292ZXJBcmcnKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZUtleXMgPSBvdmVyQXJnKE9iamVjdC5rZXlzLCBPYmplY3QpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5hdGl2ZUtleXM7XG4iLCJ2YXIgZnJlZUdsb2JhbCA9IHJlcXVpcmUoJy4vX2ZyZWVHbG9iYWwnKTtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBleHBvcnRzYC4gKi9cbnZhciBmcmVlRXhwb3J0cyA9IHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICYmIGV4cG9ydHMgJiYgIWV4cG9ydHMubm9kZVR5cGUgJiYgZXhwb3J0cztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBtb2R1bGVgLiAqL1xudmFyIGZyZWVNb2R1bGUgPSBmcmVlRXhwb3J0cyAmJiB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZSAmJiAhbW9kdWxlLm5vZGVUeXBlICYmIG1vZHVsZTtcblxuLyoqIERldGVjdCB0aGUgcG9wdWxhciBDb21tb25KUyBleHRlbnNpb24gYG1vZHVsZS5leHBvcnRzYC4gKi9cbnZhciBtb2R1bGVFeHBvcnRzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLmV4cG9ydHMgPT09IGZyZWVFeHBvcnRzO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHByb2Nlc3NgIGZyb20gTm9kZS5qcy4gKi9cbnZhciBmcmVlUHJvY2VzcyA9IG1vZHVsZUV4cG9ydHMgJiYgZnJlZUdsb2JhbC5wcm9jZXNzO1xuXG4vKiogVXNlZCB0byBhY2Nlc3MgZmFzdGVyIE5vZGUuanMgaGVscGVycy4gKi9cbnZhciBub2RlVXRpbCA9IChmdW5jdGlvbigpIHtcbiAgdHJ5IHtcbiAgICAvLyBVc2UgYHV0aWwudHlwZXNgIGZvciBOb2RlLmpzIDEwKy5cbiAgICB2YXIgdHlwZXMgPSBmcmVlTW9kdWxlICYmIGZyZWVNb2R1bGUucmVxdWlyZSAmJiBmcmVlTW9kdWxlLnJlcXVpcmUoJ3V0aWwnKS50eXBlcztcblxuICAgIGlmICh0eXBlcykge1xuICAgICAgcmV0dXJuIHR5cGVzO1xuICAgIH1cblxuICAgIC8vIExlZ2FjeSBgcHJvY2Vzcy5iaW5kaW5nKCd1dGlsJylgIGZvciBOb2RlLmpzIDwgMTAuXG4gICAgcmV0dXJuIGZyZWVQcm9jZXNzICYmIGZyZWVQcm9jZXNzLmJpbmRpbmcgJiYgZnJlZVByb2Nlc3MuYmluZGluZygndXRpbCcpO1xuICB9IGNhdGNoIChlKSB7fVxufSgpKTtcblxubW9kdWxlLmV4cG9ydHMgPSBub2RlVXRpbDtcbiIsIi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZVxuICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBuYXRpdmVPYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcgdXNpbmcgYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gb2JqZWN0VG9TdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG9iamVjdFRvU3RyaW5nO1xuIiwiLyoqXG4gKiBDcmVhdGVzIGEgdW5hcnkgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIGl0cyBhcmd1bWVudCB0cmFuc2Zvcm1lZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHRyYW5zZm9ybSBUaGUgYXJndW1lbnQgdHJhbnNmb3JtLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIG92ZXJBcmcoZnVuYywgdHJhbnNmb3JtKSB7XG4gIHJldHVybiBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4gZnVuYyh0cmFuc2Zvcm0oYXJnKSk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gb3ZlckFyZztcbiIsInZhciBhcHBseSA9IHJlcXVpcmUoJy4vX2FwcGx5Jyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVNYXggPSBNYXRoLm1heDtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VSZXN0YCB3aGljaCB0cmFuc2Zvcm1zIHRoZSByZXN0IGFycmF5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhcHBseSBhIHJlc3QgcGFyYW1ldGVyIHRvLlxuICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD1mdW5jLmxlbmd0aC0xXSBUaGUgc3RhcnQgcG9zaXRpb24gb2YgdGhlIHJlc3QgcGFyYW1ldGVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gdHJhbnNmb3JtIFRoZSByZXN0IGFycmF5IHRyYW5zZm9ybS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBvdmVyUmVzdChmdW5jLCBzdGFydCwgdHJhbnNmb3JtKSB7XG4gIHN0YXJ0ID0gbmF0aXZlTWF4KHN0YXJ0ID09PSB1bmRlZmluZWQgPyAoZnVuYy5sZW5ndGggLSAxKSA6IHN0YXJ0LCAwKTtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBuYXRpdmVNYXgoYXJncy5sZW5ndGggLSBzdGFydCwgMCksXG4gICAgICAgIGFycmF5ID0gQXJyYXkobGVuZ3RoKTtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBhcnJheVtpbmRleF0gPSBhcmdzW3N0YXJ0ICsgaW5kZXhdO1xuICAgIH1cbiAgICBpbmRleCA9IC0xO1xuICAgIHZhciBvdGhlckFyZ3MgPSBBcnJheShzdGFydCArIDEpO1xuICAgIHdoaWxlICgrK2luZGV4IDwgc3RhcnQpIHtcbiAgICAgIG90aGVyQXJnc1tpbmRleF0gPSBhcmdzW2luZGV4XTtcbiAgICB9XG4gICAgb3RoZXJBcmdzW3N0YXJ0XSA9IHRyYW5zZm9ybShhcnJheSk7XG4gICAgcmV0dXJuIGFwcGx5KGZ1bmMsIHRoaXMsIG90aGVyQXJncyk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gb3ZlclJlc3Q7XG4iLCJ2YXIgZnJlZUdsb2JhbCA9IHJlcXVpcmUoJy4vX2ZyZWVHbG9iYWwnKTtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBzZWxmYC4gKi9cbnZhciBmcmVlU2VsZiA9IHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYgJiYgc2VsZi5PYmplY3QgPT09IE9iamVjdCAmJiBzZWxmO1xuXG4vKiogVXNlZCBhcyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIG9iamVjdC4gKi9cbnZhciByb290ID0gZnJlZUdsb2JhbCB8fCBmcmVlU2VsZiB8fCBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJvb3Q7XG4iLCIvKiogVXNlZCB0byBzdGFuZC1pbiBmb3IgYHVuZGVmaW5lZGAgaGFzaCB2YWx1ZXMuICovXG52YXIgSEFTSF9VTkRFRklORUQgPSAnX19sb2Rhc2hfaGFzaF91bmRlZmluZWRfXyc7XG5cbi8qKlxuICogQWRkcyBgdmFsdWVgIHRvIHRoZSBhcnJheSBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgYWRkXG4gKiBAbWVtYmVyT2YgU2V0Q2FjaGVcbiAqIEBhbGlhcyBwdXNoXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjYWNoZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBzZXRDYWNoZUFkZCh2YWx1ZSkge1xuICB0aGlzLl9fZGF0YV9fLnNldCh2YWx1ZSwgSEFTSF9VTkRFRklORUQpO1xuICByZXR1cm4gdGhpcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXRDYWNoZUFkZDtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgaW4gdGhlIGFycmF5IGNhY2hlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBTZXRDYWNoZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gc2V0Q2FjaGVIYXModmFsdWUpIHtcbiAgcmV0dXJuIHRoaXMuX19kYXRhX18uaGFzKHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXRDYWNoZUhhcztcbiIsIi8qKlxuICogQ29udmVydHMgYHNldGAgdG8gYW4gYXJyYXkgb2YgaXRzIHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHNldCBUaGUgc2V0IHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHZhbHVlcy5cbiAqL1xuZnVuY3Rpb24gc2V0VG9BcnJheShzZXQpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSBBcnJheShzZXQuc2l6ZSk7XG5cbiAgc2V0LmZvckVhY2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXN1bHRbKytpbmRleF0gPSB2YWx1ZTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0VG9BcnJheTtcbiIsInZhciBiYXNlU2V0VG9TdHJpbmcgPSByZXF1aXJlKCcuL19iYXNlU2V0VG9TdHJpbmcnKSxcbiAgICBzaG9ydE91dCA9IHJlcXVpcmUoJy4vX3Nob3J0T3V0Jyk7XG5cbi8qKlxuICogU2V0cyB0aGUgYHRvU3RyaW5nYCBtZXRob2Qgb2YgYGZ1bmNgIHRvIHJldHVybiBgc3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gc3RyaW5nIFRoZSBgdG9TdHJpbmdgIHJlc3VsdC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgZnVuY2AuXG4gKi9cbnZhciBzZXRUb1N0cmluZyA9IHNob3J0T3V0KGJhc2VTZXRUb1N0cmluZyk7XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0VG9TdHJpbmc7XG4iLCIvKiogVXNlZCB0byBkZXRlY3QgaG90IGZ1bmN0aW9ucyBieSBudW1iZXIgb2YgY2FsbHMgd2l0aGluIGEgc3BhbiBvZiBtaWxsaXNlY29uZHMuICovXG52YXIgSE9UX0NPVU5UID0gODAwLFxuICAgIEhPVF9TUEFOID0gMTY7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVOb3cgPSBEYXRlLm5vdztcblxuLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCdsbCBzaG9ydCBvdXQgYW5kIGludm9rZSBgaWRlbnRpdHlgIGluc3RlYWRcbiAqIG9mIGBmdW5jYCB3aGVuIGl0J3MgY2FsbGVkIGBIT1RfQ09VTlRgIG9yIG1vcmUgdGltZXMgaW4gYEhPVF9TUEFOYFxuICogbWlsbGlzZWNvbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byByZXN0cmljdC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNob3J0YWJsZSBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gc2hvcnRPdXQoZnVuYykge1xuICB2YXIgY291bnQgPSAwLFxuICAgICAgbGFzdENhbGxlZCA9IDA7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdGFtcCA9IG5hdGl2ZU5vdygpLFxuICAgICAgICByZW1haW5pbmcgPSBIT1RfU1BBTiAtIChzdGFtcCAtIGxhc3RDYWxsZWQpO1xuXG4gICAgbGFzdENhbGxlZCA9IHN0YW1wO1xuICAgIGlmIChyZW1haW5pbmcgPiAwKSB7XG4gICAgICBpZiAoKytjb3VudCA+PSBIT1RfQ09VTlQpIHtcbiAgICAgICAgcmV0dXJuIGFyZ3VtZW50c1swXTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY291bnQgPSAwO1xuICAgIH1cbiAgICByZXR1cm4gZnVuYy5hcHBseSh1bmRlZmluZWQsIGFyZ3VtZW50cyk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hvcnRPdXQ7XG4iLCJ2YXIgTGlzdENhY2hlID0gcmVxdWlyZSgnLi9fTGlzdENhY2hlJyk7XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgc3RhY2suXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqL1xuZnVuY3Rpb24gc3RhY2tDbGVhcigpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IG5ldyBMaXN0Q2FjaGU7XG4gIHRoaXMuc2l6ZSA9IDA7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RhY2tDbGVhcjtcbiIsIi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIHN0YWNrLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIHN0YWNrRGVsZXRlKGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICByZXN1bHQgPSBkYXRhWydkZWxldGUnXShrZXkpO1xuXG4gIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdGFja0RlbGV0ZTtcbiIsIi8qKlxuICogR2V0cyB0aGUgc3RhY2sgdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIHN0YWNrR2V0KGtleSkge1xuICByZXR1cm4gdGhpcy5fX2RhdGFfXy5nZXQoa2V5KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdGFja0dldDtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGEgc3RhY2sgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBzdGFja0hhcyhrZXkpIHtcbiAgcmV0dXJuIHRoaXMuX19kYXRhX18uaGFzKGtleSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RhY2tIYXM7XG4iLCJ2YXIgTGlzdENhY2hlID0gcmVxdWlyZSgnLi9fTGlzdENhY2hlJyksXG4gICAgTWFwID0gcmVxdWlyZSgnLi9fTWFwJyksXG4gICAgTWFwQ2FjaGUgPSByZXF1aXJlKCcuL19NYXBDYWNoZScpO1xuXG4vKiogVXNlZCBhcyB0aGUgc2l6ZSB0byBlbmFibGUgbGFyZ2UgYXJyYXkgb3B0aW1pemF0aW9ucy4gKi9cbnZhciBMQVJHRV9BUlJBWV9TSVpFID0gMjAwO1xuXG4vKipcbiAqIFNldHMgdGhlIHN0YWNrIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIFN0YWNrXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIHN0YWNrIGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBzdGFja1NldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgaWYgKGRhdGEgaW5zdGFuY2VvZiBMaXN0Q2FjaGUpIHtcbiAgICB2YXIgcGFpcnMgPSBkYXRhLl9fZGF0YV9fO1xuICAgIGlmICghTWFwIHx8IChwYWlycy5sZW5ndGggPCBMQVJHRV9BUlJBWV9TSVpFIC0gMSkpIHtcbiAgICAgIHBhaXJzLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgICAgIHRoaXMuc2l6ZSA9ICsrZGF0YS5zaXplO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGRhdGEgPSB0aGlzLl9fZGF0YV9fID0gbmV3IE1hcENhY2hlKHBhaXJzKTtcbiAgfVxuICBkYXRhLnNldChrZXksIHZhbHVlKTtcbiAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xuICByZXR1cm4gdGhpcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdGFja1NldDtcbiIsIi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmluZGV4T2ZgIHdoaWNoIHBlcmZvcm1zIHN0cmljdCBlcXVhbGl0eVxuICogY29tcGFyaXNvbnMgb2YgdmFsdWVzLCBpLmUuIGA9PT1gLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gKiBAcGFyYW0ge251bWJlcn0gZnJvbUluZGV4IFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gKi9cbmZ1bmN0aW9uIHN0cmljdEluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgdmFyIGluZGV4ID0gZnJvbUluZGV4IC0gMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGlmIChhcnJheVtpbmRleF0gPT09IHZhbHVlKSB7XG4gICAgICByZXR1cm4gaW5kZXg7XG4gICAgfVxuICB9XG4gIHJldHVybiAtMTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdHJpY3RJbmRleE9mO1xuIiwiLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIGZ1bmNQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gcmVzb2x2ZSB0aGUgZGVjb21waWxlZCBzb3VyY2Ugb2YgZnVuY3Rpb25zLiAqL1xudmFyIGZ1bmNUb1N0cmluZyA9IGZ1bmNQcm90by50b1N0cmluZztcblxuLyoqXG4gKiBDb252ZXJ0cyBgZnVuY2AgdG8gaXRzIHNvdXJjZSBjb2RlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjb252ZXJ0LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc291cmNlIGNvZGUuXG4gKi9cbmZ1bmN0aW9uIHRvU291cmNlKGZ1bmMpIHtcbiAgaWYgKGZ1bmMgIT0gbnVsbCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gZnVuY1RvU3RyaW5nLmNhbGwoZnVuYyk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgICB0cnkge1xuICAgICAgcmV0dXJuIChmdW5jICsgJycpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH1cbiAgcmV0dXJuICcnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRvU291cmNlO1xuIiwiLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGB2YWx1ZWAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAyLjQuMFxuICogQGNhdGVnb3J5IFV0aWxcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHJldHVybiBmcm9tIHRoZSBuZXcgZnVuY3Rpb24uXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjb25zdGFudCBmdW5jdGlvbi5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdHMgPSBfLnRpbWVzKDIsIF8uY29uc3RhbnQoeyAnYSc6IDEgfSkpO1xuICpcbiAqIGNvbnNvbGUubG9nKG9iamVjdHMpO1xuICogLy8gPT4gW3sgJ2EnOiAxIH0sIHsgJ2EnOiAxIH1dXG4gKlxuICogY29uc29sZS5sb2cob2JqZWN0c1swXSA9PT0gb2JqZWN0c1sxXSk7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGNvbnN0YW50KHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY29uc3RhbnQ7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0JyksXG4gICAgbm93ID0gcmVxdWlyZSgnLi9ub3cnKSxcbiAgICB0b051bWJlciA9IHJlcXVpcmUoJy4vdG9OdW1iZXInKTtcblxuLyoqIEVycm9yIG1lc3NhZ2UgY29uc3RhbnRzLiAqL1xudmFyIEZVTkNfRVJST1JfVEVYVCA9ICdFeHBlY3RlZCBhIGZ1bmN0aW9uJztcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZU1heCA9IE1hdGgubWF4LFxuICAgIG5hdGl2ZU1pbiA9IE1hdGgubWluO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBkZWJvdW5jZWQgZnVuY3Rpb24gdGhhdCBkZWxheXMgaW52b2tpbmcgYGZ1bmNgIHVudGlsIGFmdGVyIGB3YWl0YFxuICogbWlsbGlzZWNvbmRzIGhhdmUgZWxhcHNlZCBzaW5jZSB0aGUgbGFzdCB0aW1lIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gd2FzXG4gKiBpbnZva2VkLiBUaGUgZGVib3VuY2VkIGZ1bmN0aW9uIGNvbWVzIHdpdGggYSBgY2FuY2VsYCBtZXRob2QgdG8gY2FuY2VsXG4gKiBkZWxheWVkIGBmdW5jYCBpbnZvY2F0aW9ucyBhbmQgYSBgZmx1c2hgIG1ldGhvZCB0byBpbW1lZGlhdGVseSBpbnZva2UgdGhlbS5cbiAqIFByb3ZpZGUgYG9wdGlvbnNgIHRvIGluZGljYXRlIHdoZXRoZXIgYGZ1bmNgIHNob3VsZCBiZSBpbnZva2VkIG9uIHRoZVxuICogbGVhZGluZyBhbmQvb3IgdHJhaWxpbmcgZWRnZSBvZiB0aGUgYHdhaXRgIHRpbWVvdXQuIFRoZSBgZnVuY2AgaXMgaW52b2tlZFxuICogd2l0aCB0aGUgbGFzdCBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlIGRlYm91bmNlZCBmdW5jdGlvbi4gU3Vic2VxdWVudFxuICogY2FsbHMgdG8gdGhlIGRlYm91bmNlZCBmdW5jdGlvbiByZXR1cm4gdGhlIHJlc3VsdCBvZiB0aGUgbGFzdCBgZnVuY2BcbiAqIGludm9jYXRpb24uXG4gKlxuICogKipOb3RlOioqIElmIGBsZWFkaW5nYCBhbmQgYHRyYWlsaW5nYCBvcHRpb25zIGFyZSBgdHJ1ZWAsIGBmdW5jYCBpc1xuICogaW52b2tlZCBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dCBvbmx5IGlmIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb25cbiAqIGlzIGludm9rZWQgbW9yZSB0aGFuIG9uY2UgZHVyaW5nIHRoZSBgd2FpdGAgdGltZW91dC5cbiAqXG4gKiBJZiBgd2FpdGAgaXMgYDBgIGFuZCBgbGVhZGluZ2AgaXMgYGZhbHNlYCwgYGZ1bmNgIGludm9jYXRpb24gaXMgZGVmZXJyZWRcbiAqIHVudGlsIHRvIHRoZSBuZXh0IHRpY2ssIHNpbWlsYXIgdG8gYHNldFRpbWVvdXRgIHdpdGggYSB0aW1lb3V0IG9mIGAwYC5cbiAqXG4gKiBTZWUgW0RhdmlkIENvcmJhY2hvJ3MgYXJ0aWNsZV0oaHR0cHM6Ly9jc3MtdHJpY2tzLmNvbS9kZWJvdW5jaW5nLXRocm90dGxpbmctZXhwbGFpbmVkLWV4YW1wbGVzLylcbiAqIGZvciBkZXRhaWxzIG92ZXIgdGhlIGRpZmZlcmVuY2VzIGJldHdlZW4gYF8uZGVib3VuY2VgIGFuZCBgXy50aHJvdHRsZWAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBkZWJvdW5jZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbd2FpdD0wXSBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byBkZWxheS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5sZWFkaW5nPWZhbHNlXVxuICogIFNwZWNpZnkgaW52b2tpbmcgb24gdGhlIGxlYWRpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5tYXhXYWl0XVxuICogIFRoZSBtYXhpbXVtIHRpbWUgYGZ1bmNgIGlzIGFsbG93ZWQgdG8gYmUgZGVsYXllZCBiZWZvcmUgaXQncyBpbnZva2VkLlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy50cmFpbGluZz10cnVlXVxuICogIFNwZWNpZnkgaW52b2tpbmcgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBkZWJvdW5jZWQgZnVuY3Rpb24uXG4gKiBAZXhhbXBsZVxuICpcbiAqIC8vIEF2b2lkIGNvc3RseSBjYWxjdWxhdGlvbnMgd2hpbGUgdGhlIHdpbmRvdyBzaXplIGlzIGluIGZsdXguXG4gKiBqUXVlcnkod2luZG93KS5vbigncmVzaXplJywgXy5kZWJvdW5jZShjYWxjdWxhdGVMYXlvdXQsIDE1MCkpO1xuICpcbiAqIC8vIEludm9rZSBgc2VuZE1haWxgIHdoZW4gY2xpY2tlZCwgZGVib3VuY2luZyBzdWJzZXF1ZW50IGNhbGxzLlxuICogalF1ZXJ5KGVsZW1lbnQpLm9uKCdjbGljaycsIF8uZGVib3VuY2Uoc2VuZE1haWwsIDMwMCwge1xuICogICAnbGVhZGluZyc6IHRydWUsXG4gKiAgICd0cmFpbGluZyc6IGZhbHNlXG4gKiB9KSk7XG4gKlxuICogLy8gRW5zdXJlIGBiYXRjaExvZ2AgaXMgaW52b2tlZCBvbmNlIGFmdGVyIDEgc2Vjb25kIG9mIGRlYm91bmNlZCBjYWxscy5cbiAqIHZhciBkZWJvdW5jZWQgPSBfLmRlYm91bmNlKGJhdGNoTG9nLCAyNTAsIHsgJ21heFdhaXQnOiAxMDAwIH0pO1xuICogdmFyIHNvdXJjZSA9IG5ldyBFdmVudFNvdXJjZSgnL3N0cmVhbScpO1xuICogalF1ZXJ5KHNvdXJjZSkub24oJ21lc3NhZ2UnLCBkZWJvdW5jZWQpO1xuICpcbiAqIC8vIENhbmNlbCB0aGUgdHJhaWxpbmcgZGVib3VuY2VkIGludm9jYXRpb24uXG4gKiBqUXVlcnkod2luZG93KS5vbigncG9wc3RhdGUnLCBkZWJvdW5jZWQuY2FuY2VsKTtcbiAqL1xuZnVuY3Rpb24gZGVib3VuY2UoZnVuYywgd2FpdCwgb3B0aW9ucykge1xuICB2YXIgbGFzdEFyZ3MsXG4gICAgICBsYXN0VGhpcyxcbiAgICAgIG1heFdhaXQsXG4gICAgICByZXN1bHQsXG4gICAgICB0aW1lcklkLFxuICAgICAgbGFzdENhbGxUaW1lLFxuICAgICAgbGFzdEludm9rZVRpbWUgPSAwLFxuICAgICAgbGVhZGluZyA9IGZhbHNlLFxuICAgICAgbWF4aW5nID0gZmFsc2UsXG4gICAgICB0cmFpbGluZyA9IHRydWU7XG5cbiAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gIH1cbiAgd2FpdCA9IHRvTnVtYmVyKHdhaXQpIHx8IDA7XG4gIGlmIChpc09iamVjdChvcHRpb25zKSkge1xuICAgIGxlYWRpbmcgPSAhIW9wdGlvbnMubGVhZGluZztcbiAgICBtYXhpbmcgPSAnbWF4V2FpdCcgaW4gb3B0aW9ucztcbiAgICBtYXhXYWl0ID0gbWF4aW5nID8gbmF0aXZlTWF4KHRvTnVtYmVyKG9wdGlvbnMubWF4V2FpdCkgfHwgMCwgd2FpdCkgOiBtYXhXYWl0O1xuICAgIHRyYWlsaW5nID0gJ3RyYWlsaW5nJyBpbiBvcHRpb25zID8gISFvcHRpb25zLnRyYWlsaW5nIDogdHJhaWxpbmc7XG4gIH1cblxuICBmdW5jdGlvbiBpbnZva2VGdW5jKHRpbWUpIHtcbiAgICB2YXIgYXJncyA9IGxhc3RBcmdzLFxuICAgICAgICB0aGlzQXJnID0gbGFzdFRoaXM7XG5cbiAgICBsYXN0QXJncyA9IGxhc3RUaGlzID0gdW5kZWZpbmVkO1xuICAgIGxhc3RJbnZva2VUaW1lID0gdGltZTtcbiAgICByZXN1bHQgPSBmdW5jLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBmdW5jdGlvbiBsZWFkaW5nRWRnZSh0aW1lKSB7XG4gICAgLy8gUmVzZXQgYW55IGBtYXhXYWl0YCB0aW1lci5cbiAgICBsYXN0SW52b2tlVGltZSA9IHRpbWU7XG4gICAgLy8gU3RhcnQgdGhlIHRpbWVyIGZvciB0aGUgdHJhaWxpbmcgZWRnZS5cbiAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHdhaXQpO1xuICAgIC8vIEludm9rZSB0aGUgbGVhZGluZyBlZGdlLlxuICAgIHJldHVybiBsZWFkaW5nID8gaW52b2tlRnVuYyh0aW1lKSA6IHJlc3VsdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbWFpbmluZ1dhaXQodGltZSkge1xuICAgIHZhciB0aW1lU2luY2VMYXN0Q2FsbCA9IHRpbWUgLSBsYXN0Q2FsbFRpbWUsXG4gICAgICAgIHRpbWVTaW5jZUxhc3RJbnZva2UgPSB0aW1lIC0gbGFzdEludm9rZVRpbWUsXG4gICAgICAgIHRpbWVXYWl0aW5nID0gd2FpdCAtIHRpbWVTaW5jZUxhc3RDYWxsO1xuXG4gICAgcmV0dXJuIG1heGluZ1xuICAgICAgPyBuYXRpdmVNaW4odGltZVdhaXRpbmcsIG1heFdhaXQgLSB0aW1lU2luY2VMYXN0SW52b2tlKVxuICAgICAgOiB0aW1lV2FpdGluZztcbiAgfVxuXG4gIGZ1bmN0aW9uIHNob3VsZEludm9rZSh0aW1lKSB7XG4gICAgdmFyIHRpbWVTaW5jZUxhc3RDYWxsID0gdGltZSAtIGxhc3RDYWxsVGltZSxcbiAgICAgICAgdGltZVNpbmNlTGFzdEludm9rZSA9IHRpbWUgLSBsYXN0SW52b2tlVGltZTtcblxuICAgIC8vIEVpdGhlciB0aGlzIGlzIHRoZSBmaXJzdCBjYWxsLCBhY3Rpdml0eSBoYXMgc3RvcHBlZCBhbmQgd2UncmUgYXQgdGhlXG4gICAgLy8gdHJhaWxpbmcgZWRnZSwgdGhlIHN5c3RlbSB0aW1lIGhhcyBnb25lIGJhY2t3YXJkcyBhbmQgd2UncmUgdHJlYXRpbmdcbiAgICAvLyBpdCBhcyB0aGUgdHJhaWxpbmcgZWRnZSwgb3Igd2UndmUgaGl0IHRoZSBgbWF4V2FpdGAgbGltaXQuXG4gICAgcmV0dXJuIChsYXN0Q2FsbFRpbWUgPT09IHVuZGVmaW5lZCB8fCAodGltZVNpbmNlTGFzdENhbGwgPj0gd2FpdCkgfHxcbiAgICAgICh0aW1lU2luY2VMYXN0Q2FsbCA8IDApIHx8IChtYXhpbmcgJiYgdGltZVNpbmNlTGFzdEludm9rZSA+PSBtYXhXYWl0KSk7XG4gIH1cblxuICBmdW5jdGlvbiB0aW1lckV4cGlyZWQoKSB7XG4gICAgdmFyIHRpbWUgPSBub3coKTtcbiAgICBpZiAoc2hvdWxkSW52b2tlKHRpbWUpKSB7XG4gICAgICByZXR1cm4gdHJhaWxpbmdFZGdlKHRpbWUpO1xuICAgIH1cbiAgICAvLyBSZXN0YXJ0IHRoZSB0aW1lci5cbiAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHJlbWFpbmluZ1dhaXQodGltZSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gdHJhaWxpbmdFZGdlKHRpbWUpIHtcbiAgICB0aW1lcklkID0gdW5kZWZpbmVkO1xuXG4gICAgLy8gT25seSBpbnZva2UgaWYgd2UgaGF2ZSBgbGFzdEFyZ3NgIHdoaWNoIG1lYW5zIGBmdW5jYCBoYXMgYmVlblxuICAgIC8vIGRlYm91bmNlZCBhdCBsZWFzdCBvbmNlLlxuICAgIGlmICh0cmFpbGluZyAmJiBsYXN0QXJncykge1xuICAgICAgcmV0dXJuIGludm9rZUZ1bmModGltZSk7XG4gICAgfVxuICAgIGxhc3RBcmdzID0gbGFzdFRoaXMgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNhbmNlbCgpIHtcbiAgICBpZiAodGltZXJJZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBjbGVhclRpbWVvdXQodGltZXJJZCk7XG4gICAgfVxuICAgIGxhc3RJbnZva2VUaW1lID0gMDtcbiAgICBsYXN0QXJncyA9IGxhc3RDYWxsVGltZSA9IGxhc3RUaGlzID0gdGltZXJJZCA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZsdXNoKCkge1xuICAgIHJldHVybiB0aW1lcklkID09PSB1bmRlZmluZWQgPyByZXN1bHQgOiB0cmFpbGluZ0VkZ2Uobm93KCkpO1xuICB9XG5cbiAgZnVuY3Rpb24gZGVib3VuY2VkKCkge1xuICAgIHZhciB0aW1lID0gbm93KCksXG4gICAgICAgIGlzSW52b2tpbmcgPSBzaG91bGRJbnZva2UodGltZSk7XG5cbiAgICBsYXN0QXJncyA9IGFyZ3VtZW50cztcbiAgICBsYXN0VGhpcyA9IHRoaXM7XG4gICAgbGFzdENhbGxUaW1lID0gdGltZTtcblxuICAgIGlmIChpc0ludm9raW5nKSB7XG4gICAgICBpZiAodGltZXJJZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBsZWFkaW5nRWRnZShsYXN0Q2FsbFRpbWUpO1xuICAgICAgfVxuICAgICAgaWYgKG1heGluZykge1xuICAgICAgICAvLyBIYW5kbGUgaW52b2NhdGlvbnMgaW4gYSB0aWdodCBsb29wLlxuICAgICAgICBjbGVhclRpbWVvdXQodGltZXJJZCk7XG4gICAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgICAgIHJldHVybiBpbnZva2VGdW5jKGxhc3RDYWxsVGltZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0aW1lcklkID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgZGVib3VuY2VkLmNhbmNlbCA9IGNhbmNlbDtcbiAgZGVib3VuY2VkLmZsdXNoID0gZmx1c2g7XG4gIHJldHVybiBkZWJvdW5jZWQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZGVib3VuY2U7XG4iLCIvKipcbiAqIFBlcmZvcm1zIGFcbiAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gKiBjb21wYXJpc29uIGJldHdlZW4gdHdvIHZhbHVlcyB0byBkZXRlcm1pbmUgaWYgdGhleSBhcmUgZXF1aXZhbGVudC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEgfTtcbiAqIHZhciBvdGhlciA9IHsgJ2EnOiAxIH07XG4gKlxuICogXy5lcShvYmplY3QsIG9iamVjdCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5lcShvYmplY3QsIG90aGVyKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5lcSgnYScsICdhJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5lcSgnYScsIE9iamVjdCgnYScpKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5lcShOYU4sIE5hTik7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGVxKHZhbHVlLCBvdGhlcikge1xuICByZXR1cm4gdmFsdWUgPT09IG90aGVyIHx8ICh2YWx1ZSAhPT0gdmFsdWUgJiYgb3RoZXIgIT09IG90aGVyKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlcTtcbiIsIi8qKlxuICogVGhpcyBtZXRob2QgcmV0dXJucyB0aGUgZmlyc3QgYXJndW1lbnQgaXQgcmVjZWl2ZXMuXG4gKlxuICogQHN0YXRpY1xuICogQHNpbmNlIDAuMS4wXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IFV0aWxcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgQW55IHZhbHVlLlxuICogQHJldHVybnMgeyp9IFJldHVybnMgYHZhbHVlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gKlxuICogY29uc29sZS5sb2coXy5pZGVudGl0eShvYmplY3QpID09PSBvYmplY3QpO1xuICogLy8gPT4gdHJ1ZVxuICovXG5mdW5jdGlvbiBpZGVudGl0eSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaWRlbnRpdHk7XG4iLCJ2YXIgYmFzZUlzQXJndW1lbnRzID0gcmVxdWlyZSgnLi9fYmFzZUlzQXJndW1lbnRzJyksXG4gICAgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgcHJvcGVydHlJc0VudW1lcmFibGUgPSBvYmplY3RQcm90by5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGBhcmd1bWVudHNgIG9iamVjdCxcbiAqICBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcmd1bWVudHMoZnVuY3Rpb24oKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FyZ3VtZW50cyhbMSwgMiwgM10pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzQXJndW1lbnRzID0gYmFzZUlzQXJndW1lbnRzKGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpID8gYmFzZUlzQXJndW1lbnRzIDogZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgJ2NhbGxlZScpICYmXG4gICAgIXByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwodmFsdWUsICdjYWxsZWUnKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gaXNBcmd1bWVudHM7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYW4gYEFycmF5YCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FycmF5KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5KGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXkoJ2FiYycpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXkoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcblxubW9kdWxlLmV4cG9ydHMgPSBpc0FycmF5O1xuIiwidmFyIGlzRnVuY3Rpb24gPSByZXF1aXJlKCcuL2lzRnVuY3Rpb24nKSxcbiAgICBpc0xlbmd0aCA9IHJlcXVpcmUoJy4vaXNMZW5ndGgnKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLiBBIHZhbHVlIGlzIGNvbnNpZGVyZWQgYXJyYXktbGlrZSBpZiBpdCdzXG4gKiBub3QgYSBmdW5jdGlvbiBhbmQgaGFzIGEgYHZhbHVlLmxlbmd0aGAgdGhhdCdzIGFuIGludGVnZXIgZ3JlYXRlciB0aGFuIG9yXG4gKiBlcXVhbCB0byBgMGAgYW5kIGxlc3MgdGhhbiBvciBlcXVhbCB0byBgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVJgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FycmF5TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZSgnYWJjJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUxpa2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgaXNMZW5ndGgodmFsdWUubGVuZ3RoKSAmJiAhaXNGdW5jdGlvbih2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNBcnJheUxpa2U7XG4iLCJ2YXIgaXNBcnJheUxpa2UgPSByZXF1aXJlKCcuL2lzQXJyYXlMaWtlJyksXG4gICAgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqXG4gKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmlzQXJyYXlMaWtlYCBleGNlcHQgdGhhdCBpdCBhbHNvIGNoZWNrcyBpZiBgdmFsdWVgXG4gKiBpcyBhbiBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXktbGlrZSBvYmplY3QsXG4gKiAgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlT2JqZWN0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZU9iamVjdChkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlT2JqZWN0KCdhYmMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0FycmF5TGlrZU9iamVjdChfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUxpa2VPYmplY3QodmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgaXNBcnJheUxpa2UodmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzQXJyYXlMaWtlT2JqZWN0O1xuIiwidmFyIHJvb3QgPSByZXF1aXJlKCcuL19yb290JyksXG4gICAgc3R1YkZhbHNlID0gcmVxdWlyZSgnLi9zdHViRmFsc2UnKTtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBleHBvcnRzYC4gKi9cbnZhciBmcmVlRXhwb3J0cyA9IHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICYmIGV4cG9ydHMgJiYgIWV4cG9ydHMubm9kZVR5cGUgJiYgZXhwb3J0cztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBtb2R1bGVgLiAqL1xudmFyIGZyZWVNb2R1bGUgPSBmcmVlRXhwb3J0cyAmJiB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZSAmJiAhbW9kdWxlLm5vZGVUeXBlICYmIG1vZHVsZTtcblxuLyoqIERldGVjdCB0aGUgcG9wdWxhciBDb21tb25KUyBleHRlbnNpb24gYG1vZHVsZS5leHBvcnRzYC4gKi9cbnZhciBtb2R1bGVFeHBvcnRzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLmV4cG9ydHMgPT09IGZyZWVFeHBvcnRzO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBCdWZmZXIgPSBtb2R1bGVFeHBvcnRzID8gcm9vdC5CdWZmZXIgOiB1bmRlZmluZWQ7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVJc0J1ZmZlciA9IEJ1ZmZlciA/IEJ1ZmZlci5pc0J1ZmZlciA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIGJ1ZmZlci5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMy4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGJ1ZmZlciwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQnVmZmVyKG5ldyBCdWZmZXIoMikpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNCdWZmZXIobmV3IFVpbnQ4QXJyYXkoMikpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzQnVmZmVyID0gbmF0aXZlSXNCdWZmZXIgfHwgc3R1YkZhbHNlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzQnVmZmVyO1xuIiwidmFyIGJhc2VJc0VxdWFsID0gcmVxdWlyZSgnLi9fYmFzZUlzRXF1YWwnKTtcblxuLyoqXG4gKiBQZXJmb3JtcyBhIGRlZXAgY29tcGFyaXNvbiBiZXR3ZWVuIHR3byB2YWx1ZXMgdG8gZGV0ZXJtaW5lIGlmIHRoZXkgYXJlXG4gKiBlcXVpdmFsZW50LlxuICpcbiAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBzdXBwb3J0cyBjb21wYXJpbmcgYXJyYXlzLCBhcnJheSBidWZmZXJzLCBib29sZWFucyxcbiAqIGRhdGUgb2JqZWN0cywgZXJyb3Igb2JqZWN0cywgbWFwcywgbnVtYmVycywgYE9iamVjdGAgb2JqZWN0cywgcmVnZXhlcyxcbiAqIHNldHMsIHN0cmluZ3MsIHN5bWJvbHMsIGFuZCB0eXBlZCBhcnJheXMuIGBPYmplY3RgIG9iamVjdHMgYXJlIGNvbXBhcmVkXG4gKiBieSB0aGVpciBvd24sIG5vdCBpbmhlcml0ZWQsIGVudW1lcmFibGUgcHJvcGVydGllcy4gRnVuY3Rpb25zIGFuZCBET01cbiAqIG5vZGVzIGFyZSBjb21wYXJlZCBieSBzdHJpY3QgZXF1YWxpdHksIGkuZS4gYD09PWAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gKiB2YXIgb3RoZXIgPSB7ICdhJzogMSB9O1xuICpcbiAqIF8uaXNFcXVhbChvYmplY3QsIG90aGVyKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBvYmplY3QgPT09IG90aGVyO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNFcXVhbCh2YWx1ZSwgb3RoZXIpIHtcbiAgcmV0dXJuIGJhc2VJc0VxdWFsKHZhbHVlLCBvdGhlcik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNFcXVhbDtcbiIsInZhciBiYXNlR2V0VGFnID0gcmVxdWlyZSgnLi9fYmFzZUdldFRhZycpLFxuICAgIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXN5bmNUYWcgPSAnW29iamVjdCBBc3luY0Z1bmN0aW9uXScsXG4gICAgZnVuY1RhZyA9ICdbb2JqZWN0IEZ1bmN0aW9uXScsXG4gICAgZ2VuVGFnID0gJ1tvYmplY3QgR2VuZXJhdG9yRnVuY3Rpb25dJyxcbiAgICBwcm94eVRhZyA9ICdbb2JqZWN0IFByb3h5XSc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBGdW5jdGlvbmAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZnVuY3Rpb24sIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0Z1bmN0aW9uKF8pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNGdW5jdGlvbigvYWJjLyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XG4gIGlmICghaXNPYmplY3QodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8vIFRoZSB1c2Ugb2YgYE9iamVjdCN0b1N0cmluZ2AgYXZvaWRzIGlzc3VlcyB3aXRoIHRoZSBgdHlwZW9mYCBvcGVyYXRvclxuICAvLyBpbiBTYWZhcmkgOSB3aGljaCByZXR1cm5zICdvYmplY3QnIGZvciB0eXBlZCBhcnJheXMgYW5kIG90aGVyIGNvbnN0cnVjdG9ycy5cbiAgdmFyIHRhZyA9IGJhc2VHZXRUYWcodmFsdWUpO1xuICByZXR1cm4gdGFnID09IGZ1bmNUYWcgfHwgdGFnID09IGdlblRhZyB8fCB0YWcgPT0gYXN5bmNUYWcgfHwgdGFnID09IHByb3h5VGFnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzRnVuY3Rpb247XG4iLCIvKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBNQVhfU0FGRV9JTlRFR0VSID0gOTAwNzE5OTI1NDc0MDk5MTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGFycmF5LWxpa2UgbGVuZ3RoLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBsb29zZWx5IGJhc2VkIG9uXG4gKiBbYFRvTGVuZ3RoYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtdG9sZW5ndGgpLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgbGVuZ3RoLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNMZW5ndGgoMyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0xlbmd0aChOdW1iZXIuTUlOX1ZBTFVFKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0xlbmd0aChJbmZpbml0eSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNMZW5ndGgoJzMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzTGVuZ3RoKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgJiZcbiAgICB2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDw9IE1BWF9TQUZFX0lOVEVHRVI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNMZW5ndGg7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHRoZVxuICogW2xhbmd1YWdlIHR5cGVdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1lY21hc2NyaXB0LWxhbmd1YWdlLXR5cGVzKVxuICogb2YgYE9iamVjdGAuIChlLmcuIGFycmF5cywgZnVuY3Rpb25zLCBvYmplY3RzLCByZWdleGVzLCBgbmV3IE51bWJlcigwKWAsIGFuZCBgbmV3IFN0cmluZygnJylgKVxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0KHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChfLm5vb3ApO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgKHR5cGUgPT0gJ29iamVjdCcgfHwgdHlwZSA9PSAnZnVuY3Rpb24nKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc09iamVjdDtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UuIEEgdmFsdWUgaXMgb2JqZWN0LWxpa2UgaWYgaXQncyBub3QgYG51bGxgXG4gKiBhbmQgaGFzIGEgYHR5cGVvZmAgcmVzdWx0IG9mIFwib2JqZWN0XCIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdExpa2Uoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc09iamVjdExpa2UobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdExpa2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzT2JqZWN0TGlrZTtcbiIsInZhciBiYXNlR2V0VGFnID0gcmVxdWlyZSgnLi9fYmFzZUdldFRhZycpLFxuICAgIGlzT2JqZWN0TGlrZSA9IHJlcXVpcmUoJy4vaXNPYmplY3RMaWtlJyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1ib2xUYWcgPSAnW29iamVjdCBTeW1ib2xdJztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFN5bWJvbGAgcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHN5bWJvbCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzU3ltYm9sKFN5bWJvbC5pdGVyYXRvcik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1N5bWJvbCgnYWJjJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N5bWJvbCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdzeW1ib2wnIHx8XG4gICAgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gc3ltYm9sVGFnKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc1N5bWJvbDtcbiIsInZhciBiYXNlSXNUeXBlZEFycmF5ID0gcmVxdWlyZSgnLi9fYmFzZUlzVHlwZWRBcnJheScpLFxuICAgIGJhc2VVbmFyeSA9IHJlcXVpcmUoJy4vX2Jhc2VVbmFyeScpLFxuICAgIG5vZGVVdGlsID0gcmVxdWlyZSgnLi9fbm9kZVV0aWwnKTtcblxuLyogTm9kZS5qcyBoZWxwZXIgcmVmZXJlbmNlcy4gKi9cbnZhciBub2RlSXNUeXBlZEFycmF5ID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNUeXBlZEFycmF5O1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSB0eXBlZCBhcnJheS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDMuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHR5cGVkIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNUeXBlZEFycmF5KG5ldyBVaW50OEFycmF5KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzVHlwZWRBcnJheShbXSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNUeXBlZEFycmF5ID0gbm9kZUlzVHlwZWRBcnJheSA/IGJhc2VVbmFyeShub2RlSXNUeXBlZEFycmF5KSA6IGJhc2VJc1R5cGVkQXJyYXk7XG5cbm1vZHVsZS5leHBvcnRzID0gaXNUeXBlZEFycmF5O1xuIiwidmFyIGFycmF5TGlrZUtleXMgPSByZXF1aXJlKCcuL19hcnJheUxpa2VLZXlzJyksXG4gICAgYmFzZUtleXMgPSByZXF1aXJlKCcuL19iYXNlS2V5cycpLFxuICAgIGlzQXJyYXlMaWtlID0gcmVxdWlyZSgnLi9pc0FycmF5TGlrZScpO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIGBvYmplY3RgLlxuICpcbiAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLiBTZWUgdGhlXG4gKiBbRVMgc3BlY10oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LmtleXMpXG4gKiBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBzaW5jZSAwLjEuMFxuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKiBAZXhhbXBsZVxuICpcbiAqIGZ1bmN0aW9uIEZvbygpIHtcbiAqICAgdGhpcy5hID0gMTtcbiAqICAgdGhpcy5iID0gMjtcbiAqIH1cbiAqXG4gKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICpcbiAqIF8ua2V5cyhuZXcgRm9vKTtcbiAqIC8vID0+IFsnYScsICdiJ10gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAqXG4gKiBfLmtleXMoJ2hpJyk7XG4gKiAvLyA9PiBbJzAnLCAnMSddXG4gKi9cbmZ1bmN0aW9uIGtleXMob2JqZWN0KSB7XG4gIHJldHVybiBpc0FycmF5TGlrZShvYmplY3QpID8gYXJyYXlMaWtlS2V5cyhvYmplY3QpIDogYmFzZUtleXMob2JqZWN0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBrZXlzO1xuIiwiLyoqXG4gKiBUaGlzIG1ldGhvZCByZXR1cm5zIGB1bmRlZmluZWRgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMi4zLjBcbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udGltZXMoMiwgXy5ub29wKTtcbiAqIC8vID0+IFt1bmRlZmluZWQsIHVuZGVmaW5lZF1cbiAqL1xuZnVuY3Rpb24gbm9vcCgpIHtcbiAgLy8gTm8gb3BlcmF0aW9uIHBlcmZvcm1lZC5cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBub29wO1xuIiwidmFyIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qKlxuICogR2V0cyB0aGUgdGltZXN0YW1wIG9mIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRoYXQgaGF2ZSBlbGFwc2VkIHNpbmNlXG4gKiB0aGUgVW5peCBlcG9jaCAoMSBKYW51YXJ5IDE5NzAgMDA6MDA6MDAgVVRDKS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDIuNC4wXG4gKiBAY2F0ZWdvcnkgRGF0ZVxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgdGltZXN0YW1wLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmRlZmVyKGZ1bmN0aW9uKHN0YW1wKSB7XG4gKiAgIGNvbnNvbGUubG9nKF8ubm93KCkgLSBzdGFtcCk7XG4gKiB9LCBfLm5vdygpKTtcbiAqIC8vID0+IExvZ3MgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgaXQgdG9vayBmb3IgdGhlIGRlZmVycmVkIGludm9jYXRpb24uXG4gKi9cbnZhciBub3cgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHJvb3QuRGF0ZS5ub3coKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gbm93O1xuIiwiLyoqXG4gKiBUaGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGVtcHR5IGFycmF5LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4xMy4wXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZW1wdHkgYXJyYXkuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBhcnJheXMgPSBfLnRpbWVzKDIsIF8uc3R1YkFycmF5KTtcbiAqXG4gKiBjb25zb2xlLmxvZyhhcnJheXMpO1xuICogLy8gPT4gW1tdLCBbXV1cbiAqXG4gKiBjb25zb2xlLmxvZyhhcnJheXNbMF0gPT09IGFycmF5c1sxXSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBzdHViQXJyYXkoKSB7XG4gIHJldHVybiBbXTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdHViQXJyYXk7XG4iLCIvKipcbiAqIFRoaXMgbWV0aG9kIHJldHVybnMgYGZhbHNlYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMTMuMFxuICogQGNhdGVnb3J5IFV0aWxcbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udGltZXMoMiwgXy5zdHViRmFsc2UpO1xuICogLy8gPT4gW2ZhbHNlLCBmYWxzZV1cbiAqL1xuZnVuY3Rpb24gc3R1YkZhbHNlKCkge1xuICByZXR1cm4gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3R1YkZhbHNlO1xuIiwidmFyIGRlYm91bmNlID0gcmVxdWlyZSgnLi9kZWJvdW5jZScpLFxuICAgIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpO1xuXG4vKiogRXJyb3IgbWVzc2FnZSBjb25zdGFudHMuICovXG52YXIgRlVOQ19FUlJPUl9URVhUID0gJ0V4cGVjdGVkIGEgZnVuY3Rpb24nO1xuXG4vKipcbiAqIENyZWF0ZXMgYSB0aHJvdHRsZWQgZnVuY3Rpb24gdGhhdCBvbmx5IGludm9rZXMgYGZ1bmNgIGF0IG1vc3Qgb25jZSBwZXJcbiAqIGV2ZXJ5IGB3YWl0YCBtaWxsaXNlY29uZHMuIFRoZSB0aHJvdHRsZWQgZnVuY3Rpb24gY29tZXMgd2l0aCBhIGBjYW5jZWxgXG4gKiBtZXRob2QgdG8gY2FuY2VsIGRlbGF5ZWQgYGZ1bmNgIGludm9jYXRpb25zIGFuZCBhIGBmbHVzaGAgbWV0aG9kIHRvXG4gKiBpbW1lZGlhdGVseSBpbnZva2UgdGhlbS4gUHJvdmlkZSBgb3B0aW9uc2AgdG8gaW5kaWNhdGUgd2hldGhlciBgZnVuY2BcbiAqIHNob3VsZCBiZSBpbnZva2VkIG9uIHRoZSBsZWFkaW5nIGFuZC9vciB0cmFpbGluZyBlZGdlIG9mIHRoZSBgd2FpdGBcbiAqIHRpbWVvdXQuIFRoZSBgZnVuY2AgaXMgaW52b2tlZCB3aXRoIHRoZSBsYXN0IGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGVcbiAqIHRocm90dGxlZCBmdW5jdGlvbi4gU3Vic2VxdWVudCBjYWxscyB0byB0aGUgdGhyb3R0bGVkIGZ1bmN0aW9uIHJldHVybiB0aGVcbiAqIHJlc3VsdCBvZiB0aGUgbGFzdCBgZnVuY2AgaW52b2NhdGlvbi5cbiAqXG4gKiAqKk5vdGU6KiogSWYgYGxlYWRpbmdgIGFuZCBgdHJhaWxpbmdgIG9wdGlvbnMgYXJlIGB0cnVlYCwgYGZ1bmNgIGlzXG4gKiBpbnZva2VkIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0IG9ubHkgaWYgdGhlIHRocm90dGxlZCBmdW5jdGlvblxuICogaXMgaW52b2tlZCBtb3JlIHRoYW4gb25jZSBkdXJpbmcgdGhlIGB3YWl0YCB0aW1lb3V0LlxuICpcbiAqIElmIGB3YWl0YCBpcyBgMGAgYW5kIGBsZWFkaW5nYCBpcyBgZmFsc2VgLCBgZnVuY2AgaW52b2NhdGlvbiBpcyBkZWZlcnJlZFxuICogdW50aWwgdG8gdGhlIG5leHQgdGljaywgc2ltaWxhciB0byBgc2V0VGltZW91dGAgd2l0aCBhIHRpbWVvdXQgb2YgYDBgLlxuICpcbiAqIFNlZSBbRGF2aWQgQ29yYmFjaG8ncyBhcnRpY2xlXShodHRwczovL2Nzcy10cmlja3MuY29tL2RlYm91bmNpbmctdGhyb3R0bGluZy1leHBsYWluZWQtZXhhbXBsZXMvKVxuICogZm9yIGRldGFpbHMgb3ZlciB0aGUgZGlmZmVyZW5jZXMgYmV0d2VlbiBgXy50aHJvdHRsZWAgYW5kIGBfLmRlYm91bmNlYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHRocm90dGxlLlxuICogQHBhcmFtIHtudW1iZXJ9IFt3YWl0PTBdIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIHRocm90dGxlIGludm9jYXRpb25zIHRvLlxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmxlYWRpbmc9dHJ1ZV1cbiAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSBsZWFkaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnRyYWlsaW5nPXRydWVdXG4gKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHRocm90dGxlZCBmdW5jdGlvbi5cbiAqIEBleGFtcGxlXG4gKlxuICogLy8gQXZvaWQgZXhjZXNzaXZlbHkgdXBkYXRpbmcgdGhlIHBvc2l0aW9uIHdoaWxlIHNjcm9sbGluZy5cbiAqIGpRdWVyeSh3aW5kb3cpLm9uKCdzY3JvbGwnLCBfLnRocm90dGxlKHVwZGF0ZVBvc2l0aW9uLCAxMDApKTtcbiAqXG4gKiAvLyBJbnZva2UgYHJlbmV3VG9rZW5gIHdoZW4gdGhlIGNsaWNrIGV2ZW50IGlzIGZpcmVkLCBidXQgbm90IG1vcmUgdGhhbiBvbmNlIGV2ZXJ5IDUgbWludXRlcy5cbiAqIHZhciB0aHJvdHRsZWQgPSBfLnRocm90dGxlKHJlbmV3VG9rZW4sIDMwMDAwMCwgeyAndHJhaWxpbmcnOiBmYWxzZSB9KTtcbiAqIGpRdWVyeShlbGVtZW50KS5vbignY2xpY2snLCB0aHJvdHRsZWQpO1xuICpcbiAqIC8vIENhbmNlbCB0aGUgdHJhaWxpbmcgdGhyb3R0bGVkIGludm9jYXRpb24uXG4gKiBqUXVlcnkod2luZG93KS5vbigncG9wc3RhdGUnLCB0aHJvdHRsZWQuY2FuY2VsKTtcbiAqL1xuZnVuY3Rpb24gdGhyb3R0bGUoZnVuYywgd2FpdCwgb3B0aW9ucykge1xuICB2YXIgbGVhZGluZyA9IHRydWUsXG4gICAgICB0cmFpbGluZyA9IHRydWU7XG5cbiAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gIH1cbiAgaWYgKGlzT2JqZWN0KG9wdGlvbnMpKSB7XG4gICAgbGVhZGluZyA9ICdsZWFkaW5nJyBpbiBvcHRpb25zID8gISFvcHRpb25zLmxlYWRpbmcgOiBsZWFkaW5nO1xuICAgIHRyYWlsaW5nID0gJ3RyYWlsaW5nJyBpbiBvcHRpb25zID8gISFvcHRpb25zLnRyYWlsaW5nIDogdHJhaWxpbmc7XG4gIH1cbiAgcmV0dXJuIGRlYm91bmNlKGZ1bmMsIHdhaXQsIHtcbiAgICAnbGVhZGluZyc6IGxlYWRpbmcsXG4gICAgJ21heFdhaXQnOiB3YWl0LFxuICAgICd0cmFpbGluZyc6IHRyYWlsaW5nXG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRocm90dGxlO1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpLFxuICAgIGlzU3ltYm9sID0gcmVxdWlyZSgnLi9pc1N5bWJvbCcpO1xuXG4vKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBOQU4gPSAwIC8gMDtcblxuLyoqIFVzZWQgdG8gbWF0Y2ggbGVhZGluZyBhbmQgdHJhaWxpbmcgd2hpdGVzcGFjZS4gKi9cbnZhciByZVRyaW0gPSAvXlxccyt8XFxzKyQvZztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGJhZCBzaWduZWQgaGV4YWRlY2ltYWwgc3RyaW5nIHZhbHVlcy4gKi9cbnZhciByZUlzQmFkSGV4ID0gL15bLStdMHhbMC05YS1mXSskL2k7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBiaW5hcnkgc3RyaW5nIHZhbHVlcy4gKi9cbnZhciByZUlzQmluYXJ5ID0gL14wYlswMV0rJC9pO1xuXG4vKiogVXNlZCB0byBkZXRlY3Qgb2N0YWwgc3RyaW5nIHZhbHVlcy4gKi9cbnZhciByZUlzT2N0YWwgPSAvXjBvWzAtN10rJC9pO1xuXG4vKiogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgd2l0aG91dCBhIGRlcGVuZGVuY3kgb24gYHJvb3RgLiAqL1xudmFyIGZyZWVQYXJzZUludCA9IHBhcnNlSW50O1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBudW1iZXIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBudW1iZXIuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udG9OdW1iZXIoMy4yKTtcbiAqIC8vID0+IDMuMlxuICpcbiAqIF8udG9OdW1iZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gKiAvLyA9PiA1ZS0zMjRcbiAqXG4gKiBfLnRvTnVtYmVyKEluZmluaXR5KTtcbiAqIC8vID0+IEluZmluaXR5XG4gKlxuICogXy50b051bWJlcignMy4yJyk7XG4gKiAvLyA9PiAzLjJcbiAqL1xuZnVuY3Rpb24gdG9OdW1iZXIodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJykge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBpZiAoaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgcmV0dXJuIE5BTjtcbiAgfVxuICBpZiAoaXNPYmplY3QodmFsdWUpKSB7XG4gICAgdmFyIG90aGVyID0gdHlwZW9mIHZhbHVlLnZhbHVlT2YgPT0gJ2Z1bmN0aW9uJyA/IHZhbHVlLnZhbHVlT2YoKSA6IHZhbHVlO1xuICAgIHZhbHVlID0gaXNPYmplY3Qob3RoZXIpID8gKG90aGVyICsgJycpIDogb3RoZXI7XG4gIH1cbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gMCA/IHZhbHVlIDogK3ZhbHVlO1xuICB9XG4gIHZhbHVlID0gdmFsdWUucmVwbGFjZShyZVRyaW0sICcnKTtcbiAgdmFyIGlzQmluYXJ5ID0gcmVJc0JpbmFyeS50ZXN0KHZhbHVlKTtcbiAgcmV0dXJuIChpc0JpbmFyeSB8fCByZUlzT2N0YWwudGVzdCh2YWx1ZSkpXG4gICAgPyBmcmVlUGFyc2VJbnQodmFsdWUuc2xpY2UoMiksIGlzQmluYXJ5ID8gMiA6IDgpXG4gICAgOiAocmVJc0JhZEhleC50ZXN0KHZhbHVlKSA/IE5BTiA6ICt2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdG9OdW1iZXI7XG4iLCJ2YXIgYmFzZUZsYXR0ZW4gPSByZXF1aXJlKCcuL19iYXNlRmxhdHRlbicpLFxuICAgIGJhc2VSZXN0ID0gcmVxdWlyZSgnLi9fYmFzZVJlc3QnKSxcbiAgICBiYXNlVW5pcSA9IHJlcXVpcmUoJy4vX2Jhc2VVbmlxJyksXG4gICAgaXNBcnJheUxpa2VPYmplY3QgPSByZXF1aXJlKCcuL2lzQXJyYXlMaWtlT2JqZWN0Jyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB1bmlxdWUgdmFsdWVzLCBpbiBvcmRlciwgZnJvbSBhbGwgZ2l2ZW4gYXJyYXlzIHVzaW5nXG4gKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBBcnJheVxuICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgY29tYmluZWQgdmFsdWVzLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnVuaW9uKFsyXSwgWzEsIDJdKTtcbiAqIC8vID0+IFsyLCAxXVxuICovXG52YXIgdW5pb24gPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgcmV0dXJuIGJhc2VVbmlxKGJhc2VGbGF0dGVuKGFycmF5cywgMSwgaXNBcnJheUxpa2VPYmplY3QsIHRydWUpKTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHVuaW9uO1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL3NyYy9ub3JtYWxpemVXaGVlbC5qcycpO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgRXhlY3V0aW9uRW52aXJvbm1lbnRcbiAqL1xuXG4vKmpzbGludCBldmlsOiB0cnVlICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGNhblVzZURPTSA9ICEhKFxuICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxuICB3aW5kb3cuZG9jdW1lbnQgJiZcbiAgd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnRcbik7XG5cbi8qKlxuICogU2ltcGxlLCBsaWdodHdlaWdodCBtb2R1bGUgYXNzaXN0aW5nIHdpdGggdGhlIGRldGVjdGlvbiBhbmQgY29udGV4dCBvZlxuICogV29ya2VyLiBIZWxwcyBhdm9pZCBjaXJjdWxhciBkZXBlbmRlbmNpZXMgYW5kIGFsbG93cyBjb2RlIHRvIHJlYXNvbiBhYm91dFxuICogd2hldGhlciBvciBub3QgdGhleSBhcmUgaW4gYSBXb3JrZXIsIGV2ZW4gaWYgdGhleSBuZXZlciBpbmNsdWRlIHRoZSBtYWluXG4gKiBgUmVhY3RXb3JrZXJgIGRlcGVuZGVuY3kuXG4gKi9cbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHtcblxuICBjYW5Vc2VET006IGNhblVzZURPTSxcblxuICBjYW5Vc2VXb3JrZXJzOiB0eXBlb2YgV29ya2VyICE9PSAndW5kZWZpbmVkJyxcblxuICBjYW5Vc2VFdmVudExpc3RlbmVyczpcbiAgICBjYW5Vc2VET00gJiYgISEod2luZG93LmFkZEV2ZW50TGlzdGVuZXIgfHwgd2luZG93LmF0dGFjaEV2ZW50KSxcblxuICBjYW5Vc2VWaWV3cG9ydDogY2FuVXNlRE9NICYmICEhd2luZG93LnNjcmVlbixcblxuICBpc0luV29ya2VyOiAhY2FuVXNlRE9NIC8vIEZvciBub3csIHRoaXMgaXMgdHJ1ZSAtIG1pZ2h0IGNoYW5nZSBpbiB0aGUgZnV0dXJlLlxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEV4ZWN1dGlvbkVudmlyb25tZW50O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAwNC1wcmVzZW50IEZhY2Vib29rLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBVc2VyQWdlbnRfREVQUkVDQVRFRFxuICovXG5cbi8qKlxuICogIFByb3ZpZGVzIGVudGlyZWx5IGNsaWVudC1zaWRlIFVzZXIgQWdlbnQgYW5kIE9TIGRldGVjdGlvbi4gWW91IHNob3VsZCBwcmVmZXJcbiAqICB0aGUgbm9uLWRlcHJlY2F0ZWQgVXNlckFnZW50IG1vZHVsZSB3aGVuIHBvc3NpYmxlLCB3aGljaCBleHBvc2VzIG91clxuICogIGF1dGhvcml0YXRpdmUgc2VydmVyLXNpZGUgUEhQLWJhc2VkIGRldGVjdGlvbiB0byB0aGUgY2xpZW50LlxuICpcbiAqICBVc2FnZSBpcyBzdHJhaWdodGZvcndhcmQ6XG4gKlxuICogICAgaWYgKFVzZXJBZ2VudF9ERVBSRUNBVEVELmllKCkpIHtcbiAqICAgICAgLy8gIElFXG4gKiAgICB9XG4gKlxuICogIFlvdSBjYW4gYWxzbyBkbyB2ZXJzaW9uIGNoZWNrczpcbiAqXG4gKiAgICBpZiAoVXNlckFnZW50X0RFUFJFQ0FURUQuaWUoKSA+PSA3KSB7XG4gKiAgICAgIC8vICBJRTcgb3IgYmV0dGVyXG4gKiAgICB9XG4gKlxuICogIFRoZSBicm93c2VyIGZ1bmN0aW9ucyB3aWxsIHJldHVybiBOYU4gaWYgdGhlIGJyb3dzZXIgZG9lcyBub3QgbWF0Y2gsIHNvXG4gKiAgeW91IGNhbiBhbHNvIGRvIHZlcnNpb24gY29tcGFyZXMgdGhlIG90aGVyIHdheTpcbiAqXG4gKiAgICBpZiAoVXNlckFnZW50X0RFUFJFQ0FURUQuaWUoKSA8IDcpIHtcbiAqICAgICAgLy8gIElFNiBvciB3b3JzZVxuICogICAgfVxuICpcbiAqICBOb3RlIHRoYXQgdGhlIHZlcnNpb24gaXMgYSBmbG9hdCBhbmQgbWF5IGluY2x1ZGUgYSBtaW5vciB2ZXJzaW9uIG51bWJlcixcbiAqICBzbyB5b3Ugc2hvdWxkIGFsd2F5cyB1c2UgcmFuZ2Ugb3BlcmF0b3JzIHRvIHBlcmZvcm0gY29tcGFyaXNvbnMsIG5vdFxuICogIHN0cmljdCBlcXVhbGl0eS5cbiAqXG4gKiAgKipOb3RlOioqIFlvdSBzaG91bGQgKipzdHJvbmdseSoqIHByZWZlciBjYXBhYmlsaXR5IGRldGVjdGlvbiB0byBicm93c2VyXG4gKiAgdmVyc2lvbiBkZXRlY3Rpb24gd2hlcmUgaXQncyByZWFzb25hYmxlOlxuICpcbiAqICAgIGh0dHA6Ly93d3cucXVpcmtzbW9kZS5vcmcvanMvc3VwcG9ydC5odG1sXG4gKlxuICogIEZ1cnRoZXIsIHdlIGhhdmUgYSBsYXJnZSBudW1iZXIgb2YgbWF0dXJlIHdyYXBwZXIgZnVuY3Rpb25zIGFuZCBjbGFzc2VzXG4gKiAgd2hpY2ggYWJzdHJhY3QgYXdheSBtYW55IGJyb3dzZXIgaXJyZWd1bGFyaXRpZXMuIENoZWNrIHRoZSBkb2N1bWVudGF0aW9uLFxuICogIGdyZXAgZm9yIHRoaW5ncywgb3IgYXNrIG9uIGphdmFzY3JpcHRAbGlzdHMuZmFjZWJvb2suY29tIGJlZm9yZSB3cml0aW5nIHlldFxuICogIGFub3RoZXIgY29weSBvZiBcImV2ZW50IHx8IHdpbmRvdy5ldmVudFwiLlxuICpcbiAqL1xuXG52YXIgX3BvcHVsYXRlZCA9IGZhbHNlO1xuXG4vLyBCcm93c2Vyc1xudmFyIF9pZSwgX2ZpcmVmb3gsIF9vcGVyYSwgX3dlYmtpdCwgX2Nocm9tZTtcblxuLy8gQWN0dWFsIElFIGJyb3dzZXIgZm9yIGNvbXBhdGliaWxpdHkgbW9kZVxudmFyIF9pZV9yZWFsX3ZlcnNpb247XG5cbi8vIFBsYXRmb3Jtc1xudmFyIF9vc3gsIF93aW5kb3dzLCBfbGludXgsIF9hbmRyb2lkO1xuXG4vLyBBcmNoaXRlY3R1cmVzXG52YXIgX3dpbjY0O1xuXG4vLyBEZXZpY2VzXG52YXIgX2lwaG9uZSwgX2lwYWQsIF9uYXRpdmU7XG5cbnZhciBfbW9iaWxlO1xuXG5mdW5jdGlvbiBfcG9wdWxhdGUoKSB7XG4gIGlmIChfcG9wdWxhdGVkKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgX3BvcHVsYXRlZCA9IHRydWU7XG5cbiAgLy8gVG8gd29yayBhcm91bmQgYnVnZ3kgSlMgbGlicmFyaWVzIHRoYXQgY2FuJ3QgaGFuZGxlIG11bHRpLWRpZ2l0XG4gIC8vIHZlcnNpb24gbnVtYmVycywgT3BlcmEgMTAncyB1c2VyIGFnZW50IHN0cmluZyBjbGFpbXMgaXQncyBPcGVyYVxuICAvLyA5LCB0aGVuIGxhdGVyIGluY2x1ZGVzIGEgVmVyc2lvbi9YLlkgZmllbGQ6XG4gIC8vXG4gIC8vIE9wZXJhLzkuODAgKGZvbykgUHJlc3RvLzIuMi4xNSBWZXJzaW9uLzEwLjEwXG4gIHZhciB1YXMgPSBuYXZpZ2F0b3IudXNlckFnZW50O1xuICB2YXIgYWdlbnQgPSAvKD86TVNJRS4oXFxkK1xcLlxcZCspKXwoPzooPzpGaXJlZm94fEdyYW5QYXJhZGlzb3xJY2V3ZWFzZWwpLihcXGQrXFwuXFxkKykpfCg/Ok9wZXJhKD86LitWZXJzaW9uLnwuKShcXGQrXFwuXFxkKykpfCg/OkFwcGxlV2ViS2l0LihcXGQrKD86XFwuXFxkKyk/KSl8KD86VHJpZGVudFxcL1xcZCtcXC5cXGQrLipydjooXFxkK1xcLlxcZCspKS8uZXhlYyh1YXMpO1xuICB2YXIgb3MgICAgPSAvKE1hYyBPUyBYKXwoV2luZG93cyl8KExpbnV4KS8uZXhlYyh1YXMpO1xuXG4gIF9pcGhvbmUgPSAvXFxiKGlQaG9uZXxpUFthb11kKS8uZXhlYyh1YXMpO1xuICBfaXBhZCA9IC9cXGIoaVBbYW9dZCkvLmV4ZWModWFzKTtcbiAgX2FuZHJvaWQgPSAvQW5kcm9pZC9pLmV4ZWModWFzKTtcbiAgX25hdGl2ZSA9IC9GQkFOXFwvXFx3KzsvaS5leGVjKHVhcyk7XG4gIF9tb2JpbGUgPSAvTW9iaWxlL2kuZXhlYyh1YXMpO1xuXG4gIC8vIE5vdGUgdGhhdCB0aGUgSUUgdGVhbSBibG9nIHdvdWxkIGhhdmUgeW91IGJlbGlldmUgeW91IHNob3VsZCBiZSBjaGVja2luZ1xuICAvLyBmb3IgJ1dpbjY0OyB4NjQnLiAgQnV0IE1TRE4gdGhlbiByZXZlYWxzIHRoYXQgeW91IGNhbiBhY3R1YWxseSBiZSBjb21pbmdcbiAgLy8gZnJvbSBlaXRoZXIgeDY0IG9yIGlhNjQ7ICBzbyB1bHRpbWF0ZWx5LCB5b3Ugc2hvdWxkIGp1c3QgY2hlY2sgZm9yIFdpbjY0XG4gIC8vIGFzIGluIGluZGljYXRvciBvZiB3aGV0aGVyIHlvdSdyZSBpbiA2NC1iaXQgSUUuICAzMi1iaXQgSUUgb24gNjQtYml0XG4gIC8vIFdpbmRvd3Mgd2lsbCBzZW5kICdXT1c2NCcgaW5zdGVhZC5cbiAgX3dpbjY0ID0gISEoL1dpbjY0Ly5leGVjKHVhcykpO1xuXG4gIGlmIChhZ2VudCkge1xuICAgIF9pZSA9IGFnZW50WzFdID8gcGFyc2VGbG9hdChhZ2VudFsxXSkgOiAoXG4gICAgICAgICAgYWdlbnRbNV0gPyBwYXJzZUZsb2F0KGFnZW50WzVdKSA6IE5hTik7XG4gICAgLy8gSUUgY29tcGF0aWJpbGl0eSBtb2RlXG4gICAgaWYgKF9pZSAmJiBkb2N1bWVudCAmJiBkb2N1bWVudC5kb2N1bWVudE1vZGUpIHtcbiAgICAgIF9pZSA9IGRvY3VtZW50LmRvY3VtZW50TW9kZTtcbiAgICB9XG4gICAgLy8gZ3JhYiB0aGUgXCJ0cnVlXCIgaWUgdmVyc2lvbiBmcm9tIHRoZSB0cmlkZW50IHRva2VuIGlmIGF2YWlsYWJsZVxuICAgIHZhciB0cmlkZW50ID0gLyg/OlRyaWRlbnRcXC8oXFxkKy5cXGQrKSkvLmV4ZWModWFzKTtcbiAgICBfaWVfcmVhbF92ZXJzaW9uID0gdHJpZGVudCA/IHBhcnNlRmxvYXQodHJpZGVudFsxXSkgKyA0IDogX2llO1xuXG4gICAgX2ZpcmVmb3ggPSBhZ2VudFsyXSA/IHBhcnNlRmxvYXQoYWdlbnRbMl0pIDogTmFOO1xuICAgIF9vcGVyYSAgID0gYWdlbnRbM10gPyBwYXJzZUZsb2F0KGFnZW50WzNdKSA6IE5hTjtcbiAgICBfd2Via2l0ICA9IGFnZW50WzRdID8gcGFyc2VGbG9hdChhZ2VudFs0XSkgOiBOYU47XG4gICAgaWYgKF93ZWJraXQpIHtcbiAgICAgIC8vIFdlIGRvIG5vdCBhZGQgdGhlIHJlZ2V4cCB0byB0aGUgYWJvdmUgdGVzdCwgYmVjYXVzZSBpdCB3aWxsIGFsd2F5c1xuICAgICAgLy8gbWF0Y2ggJ3NhZmFyaScgb25seSBzaW5jZSAnQXBwbGVXZWJLaXQnIGFwcGVhcnMgYmVmb3JlICdDaHJvbWUnIGluXG4gICAgICAvLyB0aGUgdXNlckFnZW50IHN0cmluZy5cbiAgICAgIGFnZW50ID0gLyg/OkNocm9tZVxcLyhcXGQrXFwuXFxkKykpLy5leGVjKHVhcyk7XG4gICAgICBfY2hyb21lID0gYWdlbnQgJiYgYWdlbnRbMV0gPyBwYXJzZUZsb2F0KGFnZW50WzFdKSA6IE5hTjtcbiAgICB9IGVsc2Uge1xuICAgICAgX2Nocm9tZSA9IE5hTjtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgX2llID0gX2ZpcmVmb3ggPSBfb3BlcmEgPSBfY2hyb21lID0gX3dlYmtpdCA9IE5hTjtcbiAgfVxuXG4gIGlmIChvcykge1xuICAgIGlmIChvc1sxXSkge1xuICAgICAgLy8gRGV0ZWN0IE9TIFggdmVyc2lvbi4gIElmIG5vIHZlcnNpb24gbnVtYmVyIG1hdGNoZXMsIHNldCBfb3N4IHRvIHRydWUuXG4gICAgICAvLyBWZXJzaW9uIGV4YW1wbGVzOiAgMTAsIDEwXzZfMSwgMTAuN1xuICAgICAgLy8gUGFyc2VzIHZlcnNpb24gbnVtYmVyIGFzIGEgZmxvYXQsIHRha2luZyBvbmx5IGZpcnN0IHR3byBzZXRzIG9mXG4gICAgICAvLyBkaWdpdHMuICBJZiBvbmx5IG9uZSBzZXQgb2YgZGlnaXRzIGlzIGZvdW5kLCByZXR1cm5zIGp1c3QgdGhlIG1ham9yXG4gICAgICAvLyB2ZXJzaW9uIG51bWJlci5cbiAgICAgIHZhciB2ZXIgPSAvKD86TWFjIE9TIFggKFxcZCsoPzpbLl9dXFxkKyk/KSkvLmV4ZWModWFzKTtcblxuICAgICAgX29zeCA9IHZlciA/IHBhcnNlRmxvYXQodmVyWzFdLnJlcGxhY2UoJ18nLCAnLicpKSA6IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIF9vc3ggPSBmYWxzZTtcbiAgICB9XG4gICAgX3dpbmRvd3MgPSAhIW9zWzJdO1xuICAgIF9saW51eCAgID0gISFvc1szXTtcbiAgfSBlbHNlIHtcbiAgICBfb3N4ID0gX3dpbmRvd3MgPSBfbGludXggPSBmYWxzZTtcbiAgfVxufVxuXG52YXIgVXNlckFnZW50X0RFUFJFQ0FURUQgPSB7XG5cbiAgLyoqXG4gICAqICBDaGVjayBpZiB0aGUgVUEgaXMgSW50ZXJuZXQgRXhwbG9yZXIuXG4gICAqXG4gICAqXG4gICAqICBAcmV0dXJuIGZsb2F0fE5hTiBWZXJzaW9uIG51bWJlciAoaWYgbWF0Y2gpIG9yIE5hTi5cbiAgICovXG4gIGllOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gX3BvcHVsYXRlKCkgfHwgX2llO1xuICB9LFxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiB3ZSdyZSBpbiBJbnRlcm5ldCBFeHBsb3JlciBjb21wYXRpYmlsaXR5IG1vZGUuXG4gICAqXG4gICAqIEByZXR1cm4gYm9vbCB0cnVlIGlmIGluIGNvbXBhdGliaWxpdHkgbW9kZSwgZmFsc2UgaWZcbiAgICogbm90IGNvbXBhdGliaWxpdHkgbW9kZSBvciBub3QgaWVcbiAgICovXG4gIGllQ29tcGF0aWJpbGl0eU1vZGU6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBfcG9wdWxhdGUoKSB8fCAoX2llX3JlYWxfdmVyc2lvbiA+IF9pZSk7XG4gIH0sXG5cblxuICAvKipcbiAgICogV2hldGhlciB0aGUgYnJvd3NlciBpcyA2NC1iaXQgSUUuICBSZWFsbHksIHRoaXMgaXMga2luZCBvZiB3ZWFrIHNhdWNlOyAgd2VcbiAgICogb25seSBuZWVkIHRoaXMgYmVjYXVzZSBTa3lwZSBjYW4ndCBoYW5kbGUgNjQtYml0IElFIHlldC4gIFdlIG5lZWQgdG8gcmVtb3ZlXG4gICAqIHRoaXMgd2hlbiB3ZSBkb24ndCBuZWVkIGl0IC0tIHRyYWNrZWQgYnkgIzYwMTk1Ny5cbiAgICovXG4gIGllNjQ6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBVc2VyQWdlbnRfREVQUkVDQVRFRC5pZSgpICYmIF93aW42NDtcbiAgfSxcblxuICAvKipcbiAgICogIENoZWNrIGlmIHRoZSBVQSBpcyBGaXJlZm94LlxuICAgKlxuICAgKlxuICAgKiAgQHJldHVybiBmbG9hdHxOYU4gVmVyc2lvbiBudW1iZXIgKGlmIG1hdGNoKSBvciBOYU4uXG4gICAqL1xuICBmaXJlZm94OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gX3BvcHVsYXRlKCkgfHwgX2ZpcmVmb3g7XG4gIH0sXG5cblxuICAvKipcbiAgICogIENoZWNrIGlmIHRoZSBVQSBpcyBPcGVyYS5cbiAgICpcbiAgICpcbiAgICogIEByZXR1cm4gZmxvYXR8TmFOIFZlcnNpb24gbnVtYmVyIChpZiBtYXRjaCkgb3IgTmFOLlxuICAgKi9cbiAgb3BlcmE6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBfcG9wdWxhdGUoKSB8fCBfb3BlcmE7XG4gIH0sXG5cblxuICAvKipcbiAgICogIENoZWNrIGlmIHRoZSBVQSBpcyBXZWJLaXQuXG4gICAqXG4gICAqXG4gICAqICBAcmV0dXJuIGZsb2F0fE5hTiBWZXJzaW9uIG51bWJlciAoaWYgbWF0Y2gpIG9yIE5hTi5cbiAgICovXG4gIHdlYmtpdDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIF9wb3B1bGF0ZSgpIHx8IF93ZWJraXQ7XG4gIH0sXG5cbiAgLyoqXG4gICAqICBGb3IgUHVzaFxuICAgKiAgV0lMTCBCRSBSRU1PVkVEIFZFUlkgU09PTi4gVXNlIFVzZXJBZ2VudF9ERVBSRUNBVEVELndlYmtpdFxuICAgKi9cbiAgc2FmYXJpOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gVXNlckFnZW50X0RFUFJFQ0FURUQud2Via2l0KCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqICBDaGVjayBpZiB0aGUgVUEgaXMgYSBDaHJvbWUgYnJvd3Nlci5cbiAgICpcbiAgICpcbiAgICogIEByZXR1cm4gZmxvYXR8TmFOIFZlcnNpb24gbnVtYmVyIChpZiBtYXRjaCkgb3IgTmFOLlxuICAgKi9cbiAgY2hyb21lIDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIF9wb3B1bGF0ZSgpIHx8IF9jaHJvbWU7XG4gIH0sXG5cblxuICAvKipcbiAgICogIENoZWNrIGlmIHRoZSB1c2VyIGlzIHJ1bm5pbmcgV2luZG93cy5cbiAgICpcbiAgICogIEByZXR1cm4gYm9vbCBgdHJ1ZScgaWYgdGhlIHVzZXIncyBPUyBpcyBXaW5kb3dzLlxuICAgKi9cbiAgd2luZG93czogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIF9wb3B1bGF0ZSgpIHx8IF93aW5kb3dzO1xuICB9LFxuXG5cbiAgLyoqXG4gICAqICBDaGVjayBpZiB0aGUgdXNlciBpcyBydW5uaW5nIE1hYyBPUyBYLlxuICAgKlxuICAgKiAgQHJldHVybiBmbG9hdHxib29sICAgUmV0dXJucyBhIGZsb2F0IGlmIGEgdmVyc2lvbiBudW1iZXIgaXMgZGV0ZWN0ZWQsXG4gICAqICAgICAgICAgICAgICAgICAgICAgICBvdGhlcndpc2UgdHJ1ZS9mYWxzZS5cbiAgICovXG4gIG9zeDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIF9wb3B1bGF0ZSgpIHx8IF9vc3g7XG4gIH0sXG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIHRoZSB1c2VyIGlzIHJ1bm5pbmcgTGludXguXG4gICAqXG4gICAqIEByZXR1cm4gYm9vbCBgdHJ1ZScgaWYgdGhlIHVzZXIncyBPUyBpcyBzb21lIGZsYXZvciBvZiBMaW51eC5cbiAgICovXG4gIGxpbnV4OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gX3BvcHVsYXRlKCkgfHwgX2xpbnV4O1xuICB9LFxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiB0aGUgdXNlciBpcyBydW5uaW5nIG9uIGFuIGlQaG9uZSBvciBpUG9kIHBsYXRmb3JtLlxuICAgKlxuICAgKiBAcmV0dXJuIGJvb2wgYHRydWUnIGlmIHRoZSB1c2VyIGlzIHJ1bm5pbmcgc29tZSBmbGF2b3Igb2YgdGhlXG4gICAqICAgIGlQaG9uZSBPUy5cbiAgICovXG4gIGlwaG9uZTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIF9wb3B1bGF0ZSgpIHx8IF9pcGhvbmU7XG4gIH0sXG5cbiAgbW9iaWxlOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gX3BvcHVsYXRlKCkgfHwgKF9pcGhvbmUgfHwgX2lwYWQgfHwgX2FuZHJvaWQgfHwgX21vYmlsZSk7XG4gIH0sXG5cbiAgbmF0aXZlQXBwOiBmdW5jdGlvbigpIHtcbiAgICAvLyB3ZWJ2aWV3cyBpbnNpZGUgb2YgdGhlIG5hdGl2ZSBhcHBzXG4gICAgcmV0dXJuIF9wb3B1bGF0ZSgpIHx8IF9uYXRpdmU7XG4gIH0sXG5cbiAgYW5kcm9pZDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIF9wb3B1bGF0ZSgpIHx8IF9hbmRyb2lkO1xuICB9LFxuXG4gIGlwYWQ6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBfcG9wdWxhdGUoKSB8fCBfaXBhZDtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBVc2VyQWdlbnRfREVQUkVDQVRFRDtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBpc0V2ZW50U3VwcG9ydGVkXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSByZXF1aXJlKCcuL0V4ZWN1dGlvbkVudmlyb25tZW50Jyk7XG5cbnZhciB1c2VIYXNGZWF0dXJlO1xuaWYgKEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSkge1xuICB1c2VIYXNGZWF0dXJlID1cbiAgICBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbiAmJlxuICAgIGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmhhc0ZlYXR1cmUgJiZcbiAgICAvLyBhbHdheXMgcmV0dXJucyB0cnVlIGluIG5ld2VyIGJyb3dzZXJzIGFzIHBlciB0aGUgc3RhbmRhcmQuXG4gICAgLy8gQHNlZSBodHRwOi8vZG9tLnNwZWMud2hhdHdnLm9yZy8jZG9tLWRvbWltcGxlbWVudGF0aW9uLWhhc2ZlYXR1cmVcbiAgICBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5oYXNGZWF0dXJlKCcnLCAnJykgIT09IHRydWU7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGFuIGV2ZW50IGlzIHN1cHBvcnRlZCBpbiB0aGUgY3VycmVudCBleGVjdXRpb24gZW52aXJvbm1lbnQuXG4gKlxuICogTk9URTogVGhpcyB3aWxsIG5vdCB3b3JrIGNvcnJlY3RseSBmb3Igbm9uLWdlbmVyaWMgZXZlbnRzIHN1Y2ggYXMgYGNoYW5nZWAsXG4gKiBgcmVzZXRgLCBgbG9hZGAsIGBlcnJvcmAsIGFuZCBgc2VsZWN0YC5cbiAqXG4gKiBCb3Jyb3dzIGZyb20gTW9kZXJuaXpyLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBldmVudE5hbWVTdWZmaXggRXZlbnQgbmFtZSwgZS5nLiBcImNsaWNrXCIuXG4gKiBAcGFyYW0gez9ib29sZWFufSBjYXB0dXJlIENoZWNrIGlmIHRoZSBjYXB0dXJlIHBoYXNlIGlzIHN1cHBvcnRlZC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIGV2ZW50IGlzIHN1cHBvcnRlZC5cbiAqIEBpbnRlcm5hbFxuICogQGxpY2Vuc2UgTW9kZXJuaXpyIDMuMC4wcHJlIChDdXN0b20gQnVpbGQpIHwgTUlUXG4gKi9cbmZ1bmN0aW9uIGlzRXZlbnRTdXBwb3J0ZWQoZXZlbnROYW1lU3VmZml4LCBjYXB0dXJlKSB7XG4gIGlmICghRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NIHx8XG4gICAgICBjYXB0dXJlICYmICEoJ2FkZEV2ZW50TGlzdGVuZXInIGluIGRvY3VtZW50KSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBldmVudE5hbWUgPSAnb24nICsgZXZlbnROYW1lU3VmZml4O1xuICB2YXIgaXNTdXBwb3J0ZWQgPSBldmVudE5hbWUgaW4gZG9jdW1lbnQ7XG5cbiAgaWYgKCFpc1N1cHBvcnRlZCkge1xuICAgIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoZXZlbnROYW1lLCAncmV0dXJuOycpO1xuICAgIGlzU3VwcG9ydGVkID0gdHlwZW9mIGVsZW1lbnRbZXZlbnROYW1lXSA9PT0gJ2Z1bmN0aW9uJztcbiAgfVxuXG4gIGlmICghaXNTdXBwb3J0ZWQgJiYgdXNlSGFzRmVhdHVyZSAmJiBldmVudE5hbWVTdWZmaXggPT09ICd3aGVlbCcpIHtcbiAgICAvLyBUaGlzIGlzIHRoZSBvbmx5IHdheSB0byB0ZXN0IHN1cHBvcnQgZm9yIHRoZSBgd2hlZWxgIGV2ZW50IGluIElFOSsuXG4gICAgaXNTdXBwb3J0ZWQgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5oYXNGZWF0dXJlKCdFdmVudHMud2hlZWwnLCAnMy4wJyk7XG4gIH1cblxuICByZXR1cm4gaXNTdXBwb3J0ZWQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNFdmVudFN1cHBvcnRlZDtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIG5vcm1hbGl6ZVdoZWVsXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFVzZXJBZ2VudF9ERVBSRUNBVEVEID0gcmVxdWlyZSgnLi9Vc2VyQWdlbnRfREVQUkVDQVRFRCcpO1xuXG52YXIgaXNFdmVudFN1cHBvcnRlZCA9IHJlcXVpcmUoJy4vaXNFdmVudFN1cHBvcnRlZCcpO1xuXG5cbi8vIFJlYXNvbmFibGUgZGVmYXVsdHNcbnZhciBQSVhFTF9TVEVQICA9IDEwO1xudmFyIExJTkVfSEVJR0hUID0gNDA7XG52YXIgUEFHRV9IRUlHSFQgPSA4MDA7XG5cbi8qKlxuICogTW91c2Ugd2hlZWwgKGFuZCAyLWZpbmdlciB0cmFja3BhZCkgc3VwcG9ydCBvbiB0aGUgd2ViIHN1Y2tzLiAgSXQgaXNcbiAqIGNvbXBsaWNhdGVkLCB0aHVzIHRoaXMgZG9jIGlzIGxvbmcgYW5kIChob3BlZnVsbHkpIGRldGFpbGVkIGVub3VnaCB0byBhbnN3ZXJcbiAqIHlvdXIgcXVlc3Rpb25zLlxuICpcbiAqIElmIHlvdSBuZWVkIHRvIHJlYWN0IHRvIHRoZSBtb3VzZSB3aGVlbCBpbiBhIHByZWRpY3RhYmxlIHdheSwgdGhpcyBjb2RlIGlzXG4gKiBsaWtlIHlvdXIgYmVzdGVzdCBmcmllbmQuICogaHVncyAqXG4gKlxuICogQXMgb2YgdG9kYXksIHRoZXJlIGFyZSA0IERPTSBldmVudCB0eXBlcyB5b3UgY2FuIGxpc3RlbiB0bzpcbiAqXG4gKiAgICd3aGVlbCcgICAgICAgICAgICAgICAgLS0gQ2hyb21lKDMxKyksIEZGKDE3KyksIElFKDkrKVxuICogICAnbW91c2V3aGVlbCcgICAgICAgICAgIC0tIENocm9tZSwgSUUoNispLCBPcGVyYSwgU2FmYXJpXG4gKiAgICdNb3pNb3VzZVBpeGVsU2Nyb2xsJyAgLS0gRkYoMy41IG9ubHkhKSAoMjAxMC0yMDEzKSAtLSBkb24ndCBib3RoZXIhXG4gKiAgICdET01Nb3VzZVNjcm9sbCcgICAgICAgLS0gRkYoMC45LjcrKSBzaW5jZSAyMDAzXG4gKlxuICogU28gd2hhdCB0byBkbz8gIFRoZSBpcyB0aGUgYmVzdDpcbiAqXG4gKiAgIG5vcm1hbGl6ZVdoZWVsLmdldEV2ZW50VHlwZSgpO1xuICpcbiAqIEluIHlvdXIgZXZlbnQgY2FsbGJhY2ssIHVzZSB0aGlzIGNvZGUgdG8gZ2V0IHNhbmUgaW50ZXJwcmV0YXRpb24gb2YgdGhlXG4gKiBkZWx0YXMuICBUaGlzIGNvZGUgd2lsbCByZXR1cm4gYW4gb2JqZWN0IHdpdGggcHJvcGVydGllczpcbiAqXG4gKiAgIHNwaW5YICAgLS0gbm9ybWFsaXplZCBzcGluIHNwZWVkICh1c2UgZm9yIHpvb20pIC0geCBwbGFuZVxuICogICBzcGluWSAgIC0tIFwiIC0geSBwbGFuZVxuICogICBwaXhlbFggIC0tIG5vcm1hbGl6ZWQgZGlzdGFuY2UgKHRvIHBpeGVscykgLSB4IHBsYW5lXG4gKiAgIHBpeGVsWSAgLS0gXCIgLSB5IHBsYW5lXG4gKlxuICogV2hlZWwgdmFsdWVzIGFyZSBwcm92aWRlZCBieSB0aGUgYnJvd3NlciBhc3N1bWluZyB5b3UgYXJlIHVzaW5nIHRoZSB3aGVlbCB0b1xuICogc2Nyb2xsIGEgd2ViIHBhZ2UgYnkgYSBudW1iZXIgb2YgbGluZXMgb3IgcGl4ZWxzIChvciBwYWdlcykuICBWYWx1ZXMgY2FuIHZhcnlcbiAqIHNpZ25pZmljYW50bHkgb24gZGlmZmVyZW50IHBsYXRmb3JtcyBhbmQgYnJvd3NlcnMsIGZvcmdldHRpbmcgdGhhdCB5b3UgY2FuXG4gKiBzY3JvbGwgYXQgZGlmZmVyZW50IHNwZWVkcy4gIFNvbWUgZGV2aWNlcyAobGlrZSB0cmFja3BhZHMpIGVtaXQgbW9yZSBldmVudHNcbiAqIGF0IHNtYWxsZXIgaW5jcmVtZW50cyB3aXRoIGZpbmUgZ3JhbnVsYXJpdHksIGFuZCBzb21lIGVtaXQgbWFzc2l2ZSBqdW1wcyB3aXRoXG4gKiBsaW5lYXIgc3BlZWQgb3IgYWNjZWxlcmF0aW9uLlxuICpcbiAqIFRoaXMgY29kZSBkb2VzIGl0cyBiZXN0IHRvIG5vcm1hbGl6ZSB0aGUgZGVsdGFzIGZvciB5b3U6XG4gKlxuICogICAtIHNwaW4gaXMgdHJ5aW5nIHRvIG5vcm1hbGl6ZSBob3cgZmFyIHRoZSB3aGVlbCB3YXMgc3B1biAob3IgdHJhY2twYWRcbiAqICAgICBkcmFnZ2VkKS4gIFRoaXMgaXMgc3VwZXIgdXNlZnVsIGZvciB6b29tIHN1cHBvcnQgd2hlcmUgeW91IHdhbnQgdG9cbiAqICAgICB0aHJvdyBhd2F5IHRoZSBjaHVua3kgc2Nyb2xsIHN0ZXBzIG9uIHRoZSBQQyBhbmQgbWFrZSB0aG9zZSBlcXVhbCB0b1xuICogICAgIHRoZSBzbG93IGFuZCBzbW9vdGggdGlueSBzdGVwcyBvbiB0aGUgTWFjLiBLZXkgZGF0YTogVGhpcyBjb2RlIHRyaWVzIHRvXG4gKiAgICAgcmVzb2x2ZSBhIHNpbmdsZSBzbG93IHN0ZXAgb24gYSB3aGVlbCB0byAxLlxuICpcbiAqICAgLSBwaXhlbCBpcyBub3JtYWxpemluZyB0aGUgZGVzaXJlZCBzY3JvbGwgZGVsdGEgaW4gcGl4ZWwgdW5pdHMuICBZb3UnbGxcbiAqICAgICBnZXQgdGhlIGNyYXp5IGRpZmZlcmVuY2VzIGJldHdlZW4gYnJvd3NlcnMsIGJ1dCBhdCBsZWFzdCBpdCdsbCBiZSBpblxuICogICAgIHBpeGVscyFcbiAqXG4gKiAgIC0gcG9zaXRpdmUgdmFsdWUgaW5kaWNhdGVzIHNjcm9sbGluZyBET1dOL1JJR0hULCBuZWdhdGl2ZSBVUC9MRUZULiAgVGhpc1xuICogICAgIHNob3VsZCB0cmFuc2xhdGUgdG8gcG9zaXRpdmUgdmFsdWUgem9vbWluZyBJTiwgbmVnYXRpdmUgem9vbWluZyBPVVQuXG4gKiAgICAgVGhpcyBtYXRjaGVzIHRoZSBuZXdlciAnd2hlZWwnIGV2ZW50LlxuICpcbiAqIFdoeSBhcmUgdGhlcmUgc3BpblgsIHNwaW5ZIChvciBwaXhlbHMpP1xuICpcbiAqICAgLSBzcGluWCBpcyBhIDItZmluZ2VyIHNpZGUgZHJhZyBvbiB0aGUgdHJhY2twYWQsIGFuZCBhIHNoaWZ0ICsgd2hlZWwgdHVyblxuICogICAgIHdpdGggYSBtb3VzZS4gIEl0IHJlc3VsdHMgaW4gc2lkZS1zY3JvbGxpbmcgaW4gdGhlIGJyb3dzZXIgYnkgZGVmYXVsdC5cbiAqXG4gKiAgIC0gc3BpblkgaXMgd2hhdCB5b3UgZXhwZWN0IC0tIGl0J3MgdGhlIGNsYXNzaWMgYXhpcyBvZiBhIG1vdXNlIHdoZWVsLlxuICpcbiAqICAgLSBJIGRyb3BwZWQgc3BpblovcGl4ZWxaLiAgSXQgaXMgc3VwcG9ydGVkIGJ5IHRoZSBET00gMyAnd2hlZWwnIGV2ZW50IGFuZFxuICogICAgIHByb2JhYmx5IGlzIGJ5IGJyb3dzZXJzIGluIGNvbmp1bmN0aW9uIHdpdGggZmFuY3kgM0QgY29udHJvbGxlcnMgLi4gYnV0XG4gKiAgICAgeW91IGtub3cuXG4gKlxuICogSW1wbGVtZW50YXRpb24gaW5mbzpcbiAqXG4gKiBFeGFtcGxlcyBvZiAnd2hlZWwnIGV2ZW50IGlmIHlvdSBzY3JvbGwgc2xvd2x5IChkb3duKSBieSBvbmUgc3RlcCB3aXRoIGFuXG4gKiBhdmVyYWdlIG1vdXNlOlxuICpcbiAqICAgT1MgWCArIENocm9tZSAgKG1vdXNlKSAgICAgLSAgICA0ICAgcGl4ZWwgZGVsdGEgICh3aGVlbERlbHRhIC0xMjApXG4gKiAgIE9TIFggKyBTYWZhcmkgIChtb3VzZSkgICAgIC0gIE4vQSAgIHBpeGVsIGRlbHRhICAod2hlZWxEZWx0YSAgLTEyKVxuICogICBPUyBYICsgRmlyZWZveCAobW91c2UpICAgICAtICAgIDAuMSBsaW5lICBkZWx0YSAgKHdoZWVsRGVsdGEgIE4vQSlcbiAqICAgV2luOCArIENocm9tZSAgKG1vdXNlKSAgICAgLSAgMTAwICAgcGl4ZWwgZGVsdGEgICh3aGVlbERlbHRhIC0xMjApXG4gKiAgIFdpbjggKyBGaXJlZm94IChtb3VzZSkgICAgIC0gICAgMyAgIGxpbmUgIGRlbHRhICAod2hlZWxEZWx0YSAtMTIwKVxuICpcbiAqIE9uIHRoZSB0cmFja3BhZDpcbiAqXG4gKiAgIE9TIFggKyBDaHJvbWUgICh0cmFja3BhZCkgIC0gICAgMiAgIHBpeGVsIGRlbHRhICAod2hlZWxEZWx0YSAgIC02KVxuICogICBPUyBYICsgRmlyZWZveCAodHJhY2twYWQpICAtICAgIDEgICBwaXhlbCBkZWx0YSAgKHdoZWVsRGVsdGEgIE4vQSlcbiAqXG4gKiBPbiBvdGhlci9vbGRlciBicm93c2Vycy4uIGl0J3MgbW9yZSBjb21wbGljYXRlZCBhcyB0aGVyZSBjYW4gYmUgbXVsdGlwbGUgYW5kXG4gKiBhbHNvIG1pc3NpbmcgZGVsdGEgdmFsdWVzLlxuICpcbiAqIFRoZSAnd2hlZWwnIGV2ZW50IGlzIG1vcmUgc3RhbmRhcmQ6XG4gKlxuICogaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLyNldmVudHMtd2hlZWxldmVudHNcbiAqXG4gKiBUaGUgYmFzaWNzIGlzIHRoYXQgaXQgaW5jbHVkZXMgYSB1bml0LCBkZWx0YU1vZGUgKHBpeGVscywgbGluZXMsIHBhZ2VzKSwgYW5kXG4gKiBkZWx0YVgsIGRlbHRhWSBhbmQgZGVsdGFaLiAgU29tZSBicm93c2VycyBwcm92aWRlIG90aGVyIHZhbHVlcyB0byBtYWludGFpblxuICogYmFja3dhcmQgY29tcGF0aWJpbGl0eSB3aXRoIG9sZGVyIGV2ZW50cy4gIFRob3NlIG90aGVyIHZhbHVlcyBoZWxwIHVzXG4gKiBiZXR0ZXIgbm9ybWFsaXplIHNwaW4gc3BlZWQuICBFeGFtcGxlIG9mIHdoYXQgdGhlIGJyb3dzZXJzIHByb3ZpZGU6XG4gKlxuICogICAgICAgICAgICAgICAgICAgICAgICAgIHwgZXZlbnQud2hlZWxEZWx0YSB8IGV2ZW50LmRldGFpbFxuICogICAgICAgIC0tLS0tLS0tLS0tLS0tLS0tLSstLS0tLS0tLS0tLS0tLS0tLS0rLS0tLS0tLS0tLS0tLS1cbiAqICAgICAgICAgIFNhZmFyaSB2NS9PUyBYICB8ICAgICAgIC0xMjAgICAgICAgfCAgICAgICAwXG4gKiAgICAgICAgICBTYWZhcmkgdjUvV2luNyAgfCAgICAgICAtMTIwICAgICAgIHwgICAgICAgMFxuICogICAgICAgICBDaHJvbWUgdjE3L09TIFggIHwgICAgICAgLTEyMCAgICAgICB8ICAgICAgIDBcbiAqICAgICAgICAgQ2hyb21lIHYxNy9XaW43ICB8ICAgICAgIC0xMjAgICAgICAgfCAgICAgICAwXG4gKiAgICAgICAgICAgICAgICBJRTkvV2luNyAgfCAgICAgICAtMTIwICAgICAgIHwgICB1bmRlZmluZWRcbiAqICAgICAgICAgRmlyZWZveCB2NC9PUyBYICB8ICAgICB1bmRlZmluZWQgICAgfCAgICAgICAxXG4gKiAgICAgICAgIEZpcmVmb3ggdjQvV2luNyAgfCAgICAgdW5kZWZpbmVkICAgIHwgICAgICAgM1xuICpcbiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplV2hlZWwoLypvYmplY3QqLyBldmVudCkgLypvYmplY3QqLyB7XG4gIHZhciBzWCA9IDAsIHNZID0gMCwgICAgICAgLy8gc3BpblgsIHNwaW5ZXG4gICAgICBwWCA9IDAsIHBZID0gMDsgICAgICAgLy8gcGl4ZWxYLCBwaXhlbFlcblxuICAvLyBMZWdhY3lcbiAgaWYgKCdkZXRhaWwnICAgICAgaW4gZXZlbnQpIHsgc1kgPSBldmVudC5kZXRhaWw7IH1cbiAgaWYgKCd3aGVlbERlbHRhJyAgaW4gZXZlbnQpIHsgc1kgPSAtZXZlbnQud2hlZWxEZWx0YSAvIDEyMDsgfVxuICBpZiAoJ3doZWVsRGVsdGFZJyBpbiBldmVudCkgeyBzWSA9IC1ldmVudC53aGVlbERlbHRhWSAvIDEyMDsgfVxuICBpZiAoJ3doZWVsRGVsdGFYJyBpbiBldmVudCkgeyBzWCA9IC1ldmVudC53aGVlbERlbHRhWCAvIDEyMDsgfVxuXG4gIC8vIHNpZGUgc2Nyb2xsaW5nIG9uIEZGIHdpdGggRE9NTW91c2VTY3JvbGxcbiAgaWYgKCAnYXhpcycgaW4gZXZlbnQgJiYgZXZlbnQuYXhpcyA9PT0gZXZlbnQuSE9SSVpPTlRBTF9BWElTICkge1xuICAgIHNYID0gc1k7XG4gICAgc1kgPSAwO1xuICB9XG5cbiAgcFggPSBzWCAqIFBJWEVMX1NURVA7XG4gIHBZID0gc1kgKiBQSVhFTF9TVEVQO1xuXG4gIGlmICgnZGVsdGFZJyBpbiBldmVudCkgeyBwWSA9IGV2ZW50LmRlbHRhWTsgfVxuICBpZiAoJ2RlbHRhWCcgaW4gZXZlbnQpIHsgcFggPSBldmVudC5kZWx0YVg7IH1cblxuICBpZiAoKHBYIHx8IHBZKSAmJiBldmVudC5kZWx0YU1vZGUpIHtcbiAgICBpZiAoZXZlbnQuZGVsdGFNb2RlID09IDEpIHsgICAgICAgICAgLy8gZGVsdGEgaW4gTElORSB1bml0c1xuICAgICAgcFggKj0gTElORV9IRUlHSFQ7XG4gICAgICBwWSAqPSBMSU5FX0hFSUdIVDtcbiAgICB9IGVsc2UgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZGVsdGEgaW4gUEFHRSB1bml0c1xuICAgICAgcFggKj0gUEFHRV9IRUlHSFQ7XG4gICAgICBwWSAqPSBQQUdFX0hFSUdIVDtcbiAgICB9XG4gIH1cblxuICAvLyBGYWxsLWJhY2sgaWYgc3BpbiBjYW5ub3QgYmUgZGV0ZXJtaW5lZFxuICBpZiAocFggJiYgIXNYKSB7IHNYID0gKHBYIDwgMSkgPyAtMSA6IDE7IH1cbiAgaWYgKHBZICYmICFzWSkgeyBzWSA9IChwWSA8IDEpID8gLTEgOiAxOyB9XG5cbiAgcmV0dXJuIHsgc3BpblggIDogc1gsXG4gICAgICAgICAgIHNwaW5ZICA6IHNZLFxuICAgICAgICAgICBwaXhlbFggOiBwWCxcbiAgICAgICAgICAgcGl4ZWxZIDogcFkgfTtcbn1cblxuXG4vKipcbiAqIFRoZSBiZXN0IGNvbWJpbmF0aW9uIGlmIHlvdSBwcmVmZXIgc3BpblggKyBzcGluWSBub3JtYWxpemF0aW9uLiAgSXQgZmF2b3JzXG4gKiB0aGUgb2xkZXIgRE9NTW91c2VTY3JvbGwgZm9yIEZpcmVmb3gsIGFzIEZGIGRvZXMgbm90IGluY2x1ZGUgd2hlZWxEZWx0YSB3aXRoXG4gKiAnd2hlZWwnIGV2ZW50LCBtYWtpbmcgc3BpbiBzcGVlZCBkZXRlcm1pbmF0aW9uIGltcG9zc2libGUuXG4gKi9cbm5vcm1hbGl6ZVdoZWVsLmdldEV2ZW50VHlwZSA9IGZ1bmN0aW9uKCkgLypzdHJpbmcqLyB7XG4gIHJldHVybiAoVXNlckFnZW50X0RFUFJFQ0FURUQuZmlyZWZveCgpKVxuICAgICAgICAgICA/ICdET01Nb3VzZVNjcm9sbCdcbiAgICAgICAgICAgOiAoaXNFdmVudFN1cHBvcnRlZCgnd2hlZWwnKSlcbiAgICAgICAgICAgICAgID8gJ3doZWVsJ1xuICAgICAgICAgICAgICAgOiAnbW91c2V3aGVlbCc7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5vcm1hbGl6ZVdoZWVsO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBpc09sZElFID0gZnVuY3Rpb24gaXNPbGRJRSgpIHtcbiAgdmFyIG1lbW87XG4gIHJldHVybiBmdW5jdGlvbiBtZW1vcml6ZSgpIHtcbiAgICBpZiAodHlwZW9mIG1lbW8gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBUZXN0IGZvciBJRSA8PSA5IGFzIHByb3Bvc2VkIGJ5IEJyb3dzZXJoYWNrc1xuICAgICAgLy8gQHNlZSBodHRwOi8vYnJvd3NlcmhhY2tzLmNvbS8jaGFjay1lNzFkODY5MmY2NTMzNDE3M2ZlZTcxNWMyMjJjYjgwNVxuICAgICAgLy8gVGVzdHMgZm9yIGV4aXN0ZW5jZSBvZiBzdGFuZGFyZCBnbG9iYWxzIGlzIHRvIGFsbG93IHN0eWxlLWxvYWRlclxuICAgICAgLy8gdG8gb3BlcmF0ZSBjb3JyZWN0bHkgaW50byBub24tc3RhbmRhcmQgZW52aXJvbm1lbnRzXG4gICAgICAvLyBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyL2lzc3Vlcy8xNzdcbiAgICAgIG1lbW8gPSBCb29sZWFuKHdpbmRvdyAmJiBkb2N1bWVudCAmJiBkb2N1bWVudC5hbGwgJiYgIXdpbmRvdy5hdG9iKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVtbztcbiAgfTtcbn0oKTtcblxudmFyIGdldFRhcmdldCA9IGZ1bmN0aW9uIGdldFRhcmdldCgpIHtcbiAgdmFyIG1lbW8gPSB7fTtcbiAgcmV0dXJuIGZ1bmN0aW9uIG1lbW9yaXplKHRhcmdldCkge1xuICAgIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpOyAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXG4gICAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVtb1t0YXJnZXRdO1xuICB9O1xufSgpO1xuXG52YXIgc3R5bGVzSW5Eb20gPSBbXTtcblxuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRvbS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRvbVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdXG4gICAgfTtcblxuICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRG9tW2luZGV4XS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZXNJbkRvbS5wdXNoKHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogYWRkU3R5bGUob2JqLCBvcHRpb25zKSxcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuXG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cblxuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgdmFyIGF0dHJpYnV0ZXMgPSBvcHRpb25zLmF0dHJpYnV0ZXMgfHwge307XG5cbiAgaWYgKHR5cGVvZiBhdHRyaWJ1dGVzLm5vbmNlID09PSAndW5kZWZpbmVkJykge1xuICAgIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gJ3VuZGVmaW5lZCcgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG5cbiAgICBpZiAobm9uY2UpIHtcbiAgICAgIGF0dHJpYnV0ZXMubm9uY2UgPSBub25jZTtcbiAgICB9XG4gIH1cblxuICBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoa2V5LCBhdHRyaWJ1dGVzW2tleV0pO1xuICB9KTtcblxuICBpZiAodHlwZW9mIG9wdGlvbnMuaW5zZXJ0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgb3B0aW9ucy5pbnNlcnQoc3R5bGUpO1xuICB9IGVsc2Uge1xuICAgIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQob3B0aW9ucy5pbnNlcnQgfHwgJ2hlYWQnKTtcblxuICAgIGlmICghdGFyZ2V0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICAgIH1cblxuICAgIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG4gIH1cblxuICByZXR1cm4gc3R5bGU7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlLnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzdHlsZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlKTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbnZhciByZXBsYWNlVGV4dCA9IGZ1bmN0aW9uIHJlcGxhY2VUZXh0KCkge1xuICB2YXIgdGV4dFN0b3JlID0gW107XG4gIHJldHVybiBmdW5jdGlvbiByZXBsYWNlKGluZGV4LCByZXBsYWNlbWVudCkge1xuICAgIHRleHRTdG9yZVtpbmRleF0gPSByZXBsYWNlbWVudDtcbiAgICByZXR1cm4gdGV4dFN0b3JlLmZpbHRlcihCb29sZWFuKS5qb2luKCdcXG4nKTtcbiAgfTtcbn0oKTtcblxuZnVuY3Rpb24gYXBwbHlUb1NpbmdsZXRvblRhZyhzdHlsZSwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XG4gIHZhciBjc3MgPSByZW1vdmUgPyAnJyA6IG9iai5tZWRpYSA/IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIikuY29uY2F0KG9iai5jc3MsIFwifVwiKSA6IG9iai5jc3M7IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cbiAgaWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSByZXBsYWNlVGV4dChpbmRleCwgY3NzKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgY3NzTm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcyk7XG4gICAgdmFyIGNoaWxkTm9kZXMgPSBzdHlsZS5jaGlsZE5vZGVzO1xuXG4gICAgaWYgKGNoaWxkTm9kZXNbaW5kZXhdKSB7XG4gICAgICBzdHlsZS5yZW1vdmVDaGlsZChjaGlsZE5vZGVzW2luZGV4XSk7XG4gICAgfVxuXG4gICAgaWYgKGNoaWxkTm9kZXMubGVuZ3RoKSB7XG4gICAgICBzdHlsZS5pbnNlcnRCZWZvcmUoY3NzTm9kZSwgY2hpbGROb2Rlc1tpbmRleF0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZS5hcHBlbmRDaGlsZChjc3NOb2RlKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYXBwbHlUb1RhZyhzdHlsZSwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBvYmouY3NzO1xuICB2YXIgbWVkaWEgPSBvYmoubWVkaWE7XG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG4gIGlmIChtZWRpYSkge1xuICAgIHN0eWxlLnNldEF0dHJpYnV0ZSgnbWVkaWEnLCBtZWRpYSk7XG4gIH0gZWxzZSB7XG4gICAgc3R5bGUucmVtb3ZlQXR0cmlidXRlKCdtZWRpYScpO1xuICB9XG5cbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfSAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG5cbiAgaWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlLmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlLnJlbW92ZUNoaWxkKHN0eWxlLmZpcnN0Q2hpbGQpO1xuICAgIH1cblxuICAgIHN0eWxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5cbnZhciBzaW5nbGV0b24gPSBudWxsO1xudmFyIHNpbmdsZXRvbkNvdW50ZXIgPSAwO1xuXG5mdW5jdGlvbiBhZGRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlO1xuICB2YXIgdXBkYXRlO1xuICB2YXIgcmVtb3ZlO1xuXG4gIGlmIChvcHRpb25zLnNpbmdsZXRvbikge1xuICAgIHZhciBzdHlsZUluZGV4ID0gc2luZ2xldG9uQ291bnRlcisrO1xuICAgIHN0eWxlID0gc2luZ2xldG9uIHx8IChzaW5nbGV0b24gPSBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykpO1xuICAgIHVwZGF0ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgZmFsc2UpO1xuICAgIHJlbW92ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgdHJ1ZSk7XG4gIH0gZWxzZSB7XG4gICAgc3R5bGUgPSBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gICAgdXBkYXRlID0gYXBwbHlUb1RhZy5iaW5kKG51bGwsIHN0eWxlLCBvcHRpb25zKTtcblxuICAgIHJlbW92ZSA9IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSk7XG4gICAgfTtcbiAgfVxuXG4gIHVwZGF0ZShvYmopO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlU3R5bGUobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICByZW1vdmUoKTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307IC8vIEZvcmNlIHNpbmdsZS10YWcgc29sdXRpb24gb24gSUU2LTksIHdoaWNoIGhhcyBhIGhhcmQgbGltaXQgb24gdGhlICMgb2YgPHN0eWxlPlxuICAvLyB0YWdzIGl0IHdpbGwgYWxsb3cgb24gYSBwYWdlXG5cbiAgaWYgKCFvcHRpb25zLnNpbmdsZXRvbiAmJiB0eXBlb2Ygb3B0aW9ucy5zaW5nbGV0b24gIT09ICdib29sZWFuJykge1xuICAgIG9wdGlvbnMuc2luZ2xldG9uID0gaXNPbGRJRSgpO1xuICB9XG5cbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuXG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChuZXdMaXN0KSAhPT0gJ1tvYmplY3QgQXJyYXldJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG5cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG5cbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG5cbiAgICAgIGlmIChzdHlsZXNJbkRvbVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5Eb21bX2luZGV4XS51cGRhdGVyKCk7XG5cbiAgICAgICAgc3R5bGVzSW5Eb20uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJlbGVjdHJvblwiKTs7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiZnNcIik7OyIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdGlmKF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0pIHtcblx0XHRyZXR1cm4gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHRsb2FkZWQ6IGZhbHNlLFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcblx0bW9kdWxlLmxvYWRlZCA9IHRydWU7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiBtb2R1bGVbJ2RlZmF1bHQnXSA6XG5cdFx0KCkgPT4gbW9kdWxlO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm5tZCA9IChtb2R1bGUpID0+IHtcblx0bW9kdWxlLnBhdGhzID0gW107XG5cdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0cmV0dXJuIG1vZHVsZTtcbn07IiwiLyoqXHJcbiAqIE1ha2UgYSBtYXAgYW5kIHJldHVybiBhIGZ1bmN0aW9uIGZvciBjaGVja2luZyBpZiBhIGtleVxyXG4gKiBpcyBpbiB0aGF0IG1hcC5cclxuICogSU1QT1JUQU5UOiBhbGwgY2FsbHMgb2YgdGhpcyBmdW5jdGlvbiBtdXN0IGJlIHByZWZpeGVkIHdpdGhcclxuICogXFwvXFwqI1xcX1xcX1BVUkVcXF9cXF9cXCpcXC9cclxuICogU28gdGhhdCByb2xsdXAgY2FuIHRyZWUtc2hha2UgdGhlbSBpZiBuZWNlc3NhcnkuXHJcbiAqL1xyXG5mdW5jdGlvbiBtYWtlTWFwKHN0ciwgZXhwZWN0c0xvd2VyQ2FzZSkge1xyXG4gICAgY29uc3QgbWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcclxuICAgIGNvbnN0IGxpc3QgPSBzdHIuc3BsaXQoJywnKTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIG1hcFtsaXN0W2ldXSA9IHRydWU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZXhwZWN0c0xvd2VyQ2FzZSA/IHZhbCA9PiAhIW1hcFt2YWwudG9Mb3dlckNhc2UoKV0gOiB2YWwgPT4gISFtYXBbdmFsXTtcclxufVxuXG4vKipcclxuICogZGV2IG9ubHkgZmxhZyAtPiBuYW1lIG1hcHBpbmdcclxuICovXHJcbmNvbnN0IFBhdGNoRmxhZ05hbWVzID0ge1xyXG4gICAgWzEgLyogVEVYVCAqL106IGBURVhUYCxcclxuICAgIFsyIC8qIENMQVNTICovXTogYENMQVNTYCxcclxuICAgIFs0IC8qIFNUWUxFICovXTogYFNUWUxFYCxcclxuICAgIFs4IC8qIFBST1BTICovXTogYFBST1BTYCxcclxuICAgIFsxNiAvKiBGVUxMX1BST1BTICovXTogYEZVTExfUFJPUFNgLFxyXG4gICAgWzMyIC8qIEhZRFJBVEVfRVZFTlRTICovXTogYEhZRFJBVEVfRVZFTlRTYCxcclxuICAgIFs2NCAvKiBTVEFCTEVfRlJBR01FTlQgKi9dOiBgU1RBQkxFX0ZSQUdNRU5UYCxcclxuICAgIFsxMjggLyogS0VZRURfRlJBR01FTlQgKi9dOiBgS0VZRURfRlJBR01FTlRgLFxyXG4gICAgWzI1NiAvKiBVTktFWUVEX0ZSQUdNRU5UICovXTogYFVOS0VZRURfRlJBR01FTlRgLFxyXG4gICAgWzUxMiAvKiBORUVEX1BBVENIICovXTogYE5FRURfUEFUQ0hgLFxyXG4gICAgWzEwMjQgLyogRFlOQU1JQ19TTE9UUyAqL106IGBEWU5BTUlDX1NMT1RTYCxcclxuICAgIFsyMDQ4IC8qIERFVl9ST09UX0ZSQUdNRU5UICovXTogYERFVl9ST09UX0ZSQUdNRU5UYCxcclxuICAgIFstMSAvKiBIT0lTVEVEICovXTogYEhPSVNURURgLFxyXG4gICAgWy0yIC8qIEJBSUwgKi9dOiBgQkFJTGBcclxufTtcblxuLyoqXHJcbiAqIERldiBvbmx5XHJcbiAqL1xyXG5jb25zdCBzbG90RmxhZ3NUZXh0ID0ge1xyXG4gICAgWzEgLyogU1RBQkxFICovXTogJ1NUQUJMRScsXHJcbiAgICBbMiAvKiBEWU5BTUlDICovXTogJ0RZTkFNSUMnLFxyXG4gICAgWzMgLyogRk9SV0FSREVEICovXTogJ0ZPUldBUkRFRCdcclxufTtcblxuY29uc3QgR0xPQkFMU19XSElURV9MSVNURUQgPSAnSW5maW5pdHksdW5kZWZpbmVkLE5hTixpc0Zpbml0ZSxpc05hTixwYXJzZUZsb2F0LHBhcnNlSW50LGRlY29kZVVSSSwnICtcclxuICAgICdkZWNvZGVVUklDb21wb25lbnQsZW5jb2RlVVJJLGVuY29kZVVSSUNvbXBvbmVudCxNYXRoLE51bWJlcixEYXRlLEFycmF5LCcgK1xyXG4gICAgJ09iamVjdCxCb29sZWFuLFN0cmluZyxSZWdFeHAsTWFwLFNldCxKU09OLEludGwnO1xyXG5jb25zdCBpc0dsb2JhbGx5V2hpdGVsaXN0ZWQgPSAvKiNfX1BVUkVfXyovIG1ha2VNYXAoR0xPQkFMU19XSElURV9MSVNURUQpO1xuXG5jb25zdCByYW5nZSA9IDI7XHJcbmZ1bmN0aW9uIGdlbmVyYXRlQ29kZUZyYW1lKHNvdXJjZSwgc3RhcnQgPSAwLCBlbmQgPSBzb3VyY2UubGVuZ3RoKSB7XHJcbiAgICBjb25zdCBsaW5lcyA9IHNvdXJjZS5zcGxpdCgvXFxyP1xcbi8pO1xyXG4gICAgbGV0IGNvdW50ID0gMDtcclxuICAgIGNvbnN0IHJlcyA9IFtdO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaW5lcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGNvdW50ICs9IGxpbmVzW2ldLmxlbmd0aCArIDE7XHJcbiAgICAgICAgaWYgKGNvdW50ID49IHN0YXJ0KSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGogPSBpIC0gcmFuZ2U7IGogPD0gaSArIHJhbmdlIHx8IGVuZCA+IGNvdW50OyBqKyspIHtcclxuICAgICAgICAgICAgICAgIGlmIChqIDwgMCB8fCBqID49IGxpbmVzLmxlbmd0aClcclxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGxpbmUgPSBqICsgMTtcclxuICAgICAgICAgICAgICAgIHJlcy5wdXNoKGAke2xpbmV9JHsnICcucmVwZWF0KE1hdGgubWF4KDMgLSBTdHJpbmcobGluZSkubGVuZ3RoLCAwKSl9fCAgJHtsaW5lc1tqXX1gKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGxpbmVMZW5ndGggPSBsaW5lc1tqXS5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICBpZiAoaiA9PT0gaSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHB1c2ggdW5kZXJsaW5lXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFkID0gc3RhcnQgLSAoY291bnQgLSBsaW5lTGVuZ3RoKSArIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbGVuZ3RoID0gTWF0aC5tYXgoMSwgZW5kID4gY291bnQgPyBsaW5lTGVuZ3RoIC0gcGFkIDogZW5kIC0gc3RhcnQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlcy5wdXNoKGAgICB8ICBgICsgJyAnLnJlcGVhdChwYWQpICsgJ14nLnJlcGVhdChsZW5ndGgpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGogPiBpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVuZCA+IGNvdW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxlbmd0aCA9IE1hdGgubWF4KE1hdGgubWluKGVuZCAtIGNvdW50LCBsaW5lTGVuZ3RoKSwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcy5wdXNoKGAgICB8ICBgICsgJ14nLnJlcGVhdChsZW5ndGgpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY291bnQgKz0gbGluZUxlbmd0aCArIDE7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlcy5qb2luKCdcXG4nKTtcclxufVxuXG4vKipcclxuICogT24gdGhlIGNsaWVudCB3ZSBvbmx5IG5lZWQgdG8gb2ZmZXIgc3BlY2lhbCBjYXNlcyBmb3IgYm9vbGVhbiBhdHRyaWJ1dGVzIHRoYXRcclxuICogaGF2ZSBkaWZmZXJlbnQgbmFtZXMgZnJvbSB0aGVpciBjb3JyZXNwb25kaW5nIGRvbSBwcm9wZXJ0aWVzOlxyXG4gKiAtIGl0ZW1zY29wZSAtPiBOL0FcclxuICogLSBhbGxvd2Z1bGxzY3JlZW4gLT4gYWxsb3dGdWxsc2NyZWVuXHJcbiAqIC0gZm9ybW5vdmFsaWRhdGUgLT4gZm9ybU5vVmFsaWRhdGVcclxuICogLSBpc21hcCAtPiBpc01hcFxyXG4gKiAtIG5vbW9kdWxlIC0+IG5vTW9kdWxlXHJcbiAqIC0gbm92YWxpZGF0ZSAtPiBub1ZhbGlkYXRlXHJcbiAqIC0gcmVhZG9ubHkgLT4gcmVhZE9ubHlcclxuICovXHJcbmNvbnN0IHNwZWNpYWxCb29sZWFuQXR0cnMgPSBgaXRlbXNjb3BlLGFsbG93ZnVsbHNjcmVlbixmb3Jtbm92YWxpZGF0ZSxpc21hcCxub21vZHVsZSxub3ZhbGlkYXRlLHJlYWRvbmx5YDtcclxuY29uc3QgaXNTcGVjaWFsQm9vbGVhbkF0dHIgPSAvKiNfX1BVUkVfXyovIG1ha2VNYXAoc3BlY2lhbEJvb2xlYW5BdHRycyk7XHJcbi8qKlxyXG4gKiBUaGUgZnVsbCBsaXN0IGlzIG5lZWRlZCBkdXJpbmcgU1NSIHRvIHByb2R1Y2UgdGhlIGNvcnJlY3QgaW5pdGlhbCBtYXJrdXAuXHJcbiAqL1xyXG5jb25zdCBpc0Jvb2xlYW5BdHRyID0gLyojX19QVVJFX18qLyBtYWtlTWFwKHNwZWNpYWxCb29sZWFuQXR0cnMgK1xyXG4gICAgYCxhc3luYyxhdXRvZm9jdXMsYXV0b3BsYXksY29udHJvbHMsZGVmYXVsdCxkZWZlcixkaXNhYmxlZCxoaWRkZW4sYCArXHJcbiAgICBgbG9vcCxvcGVuLHJlcXVpcmVkLHJldmVyc2VkLHNjb3BlZCxzZWFtbGVzcyxgICtcclxuICAgIGBjaGVja2VkLG11dGVkLG11bHRpcGxlLHNlbGVjdGVkYCk7XHJcbmNvbnN0IHVuc2FmZUF0dHJDaGFyUkUgPSAvWz4vPVwiJ1xcdTAwMDlcXHUwMDBhXFx1MDAwY1xcdTAwMjBdLztcclxuY29uc3QgYXR0clZhbGlkYXRpb25DYWNoZSA9IHt9O1xyXG5mdW5jdGlvbiBpc1NTUlNhZmVBdHRyTmFtZShuYW1lKSB7XHJcbiAgICBpZiAoYXR0clZhbGlkYXRpb25DYWNoZS5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xyXG4gICAgICAgIHJldHVybiBhdHRyVmFsaWRhdGlvbkNhY2hlW25hbWVdO1xyXG4gICAgfVxyXG4gICAgY29uc3QgaXNVbnNhZmUgPSB1bnNhZmVBdHRyQ2hhclJFLnRlc3QobmFtZSk7XHJcbiAgICBpZiAoaXNVbnNhZmUpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKGB1bnNhZmUgYXR0cmlidXRlIG5hbWU6ICR7bmFtZX1gKTtcclxuICAgIH1cclxuICAgIHJldHVybiAoYXR0clZhbGlkYXRpb25DYWNoZVtuYW1lXSA9ICFpc1Vuc2FmZSk7XHJcbn1cclxuY29uc3QgcHJvcHNUb0F0dHJNYXAgPSB7XHJcbiAgICBhY2NlcHRDaGFyc2V0OiAnYWNjZXB0LWNoYXJzZXQnLFxyXG4gICAgY2xhc3NOYW1lOiAnY2xhc3MnLFxyXG4gICAgaHRtbEZvcjogJ2ZvcicsXHJcbiAgICBodHRwRXF1aXY6ICdodHRwLWVxdWl2J1xyXG59O1xyXG4vKipcclxuICogQ1NTIHByb3BlcnRpZXMgdGhhdCBhY2NlcHQgcGxhaW4gbnVtYmVyc1xyXG4gKi9cclxuY29uc3QgaXNOb1VuaXROdW1lcmljU3R5bGVQcm9wID0gLyojX19QVVJFX18qLyBtYWtlTWFwKGBhbmltYXRpb24taXRlcmF0aW9uLWNvdW50LGJvcmRlci1pbWFnZS1vdXRzZXQsYm9yZGVyLWltYWdlLXNsaWNlLGAgK1xyXG4gICAgYGJvcmRlci1pbWFnZS13aWR0aCxib3gtZmxleCxib3gtZmxleC1ncm91cCxib3gtb3JkaW5hbC1ncm91cCxjb2x1bW4tY291bnQsYCArXHJcbiAgICBgY29sdW1ucyxmbGV4LGZsZXgtZ3JvdyxmbGV4LXBvc2l0aXZlLGZsZXgtc2hyaW5rLGZsZXgtbmVnYXRpdmUsZmxleC1vcmRlcixgICtcclxuICAgIGBncmlkLXJvdyxncmlkLXJvdy1lbmQsZ3JpZC1yb3ctc3BhbixncmlkLXJvdy1zdGFydCxncmlkLWNvbHVtbixgICtcclxuICAgIGBncmlkLWNvbHVtbi1lbmQsZ3JpZC1jb2x1bW4tc3BhbixncmlkLWNvbHVtbi1zdGFydCxmb250LXdlaWdodCxsaW5lLWNsYW1wLGAgK1xyXG4gICAgYGxpbmUtaGVpZ2h0LG9wYWNpdHksb3JkZXIsb3JwaGFucyx0YWItc2l6ZSx3aWRvd3Msei1pbmRleCx6b29tLGAgK1xyXG4gICAgLy8gU1ZHXHJcbiAgICBgZmlsbC1vcGFjaXR5LGZsb29kLW9wYWNpdHksc3RvcC1vcGFjaXR5LHN0cm9rZS1kYXNoYXJyYXksc3Ryb2tlLWRhc2hvZmZzZXQsYCArXHJcbiAgICBgc3Ryb2tlLW1pdGVybGltaXQsc3Ryb2tlLW9wYWNpdHksc3Ryb2tlLXdpZHRoYCk7XHJcbi8qKlxyXG4gKiBLbm93biBhdHRyaWJ1dGVzLCB0aGlzIGlzIHVzZWQgZm9yIHN0cmluZ2lmaWNhdGlvbiBvZiBydW50aW1lIHN0YXRpYyBub2Rlc1xyXG4gKiBzbyB0aGF0IHdlIGRvbid0IHN0cmluZ2lmeSBiaW5kaW5ncyB0aGF0IGNhbm5vdCBiZSBzZXQgZnJvbSBIVE1MLlxyXG4gKiBEb24ndCBhbHNvIGZvcmdldCB0byBhbGxvdyBgZGF0YS0qYCBhbmQgYGFyaWEtKmAhXHJcbiAqIEdlbmVyYXRlZCBmcm9tIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvQXR0cmlidXRlc1xyXG4gKi9cclxuY29uc3QgaXNLbm93bkF0dHIgPSAvKiNfX1BVUkVfXyovIG1ha2VNYXAoYGFjY2VwdCxhY2NlcHQtY2hhcnNldCxhY2Nlc3NrZXksYWN0aW9uLGFsaWduLGFsbG93LGFsdCxhc3luYyxgICtcclxuICAgIGBhdXRvY2FwaXRhbGl6ZSxhdXRvY29tcGxldGUsYXV0b2ZvY3VzLGF1dG9wbGF5LGJhY2tncm91bmQsYmdjb2xvcixgICtcclxuICAgIGBib3JkZXIsYnVmZmVyZWQsY2FwdHVyZSxjaGFsbGVuZ2UsY2hhcnNldCxjaGVja2VkLGNpdGUsY2xhc3MsY29kZSxgICtcclxuICAgIGBjb2RlYmFzZSxjb2xvcixjb2xzLGNvbHNwYW4sY29udGVudCxjb250ZW50ZWRpdGFibGUsY29udGV4dG1lbnUsY29udHJvbHMsYCArXHJcbiAgICBgY29vcmRzLGNyb3Nzb3JpZ2luLGNzcCxkYXRhLGRhdGV0aW1lLGRlY29kaW5nLGRlZmF1bHQsZGVmZXIsZGlyLGRpcm5hbWUsYCArXHJcbiAgICBgZGlzYWJsZWQsZG93bmxvYWQsZHJhZ2dhYmxlLGRyb3B6b25lLGVuY3R5cGUsZW50ZXJrZXloaW50LGZvcixmb3JtLGAgK1xyXG4gICAgYGZvcm1hY3Rpb24sZm9ybWVuY3R5cGUsZm9ybW1ldGhvZCxmb3Jtbm92YWxpZGF0ZSxmb3JtdGFyZ2V0LGhlYWRlcnMsYCArXHJcbiAgICBgaGVpZ2h0LGhpZGRlbixoaWdoLGhyZWYsaHJlZmxhbmcsaHR0cC1lcXVpdixpY29uLGlkLGltcG9ydGFuY2UsaW50ZWdyaXR5LGAgK1xyXG4gICAgYGlzbWFwLGl0ZW1wcm9wLGtleXR5cGUsa2luZCxsYWJlbCxsYW5nLGxhbmd1YWdlLGxvYWRpbmcsbGlzdCxsb29wLGxvdyxgICtcclxuICAgIGBtYW5pZmVzdCxtYXgsbWF4bGVuZ3RoLG1pbmxlbmd0aCxtZWRpYSxtaW4sbXVsdGlwbGUsbXV0ZWQsbmFtZSxub3ZhbGlkYXRlLGAgK1xyXG4gICAgYG9wZW4sb3B0aW11bSxwYXR0ZXJuLHBpbmcscGxhY2Vob2xkZXIscG9zdGVyLHByZWxvYWQscmFkaW9ncm91cCxyZWFkb25seSxgICtcclxuICAgIGByZWZlcnJlcnBvbGljeSxyZWwscmVxdWlyZWQscmV2ZXJzZWQscm93cyxyb3dzcGFuLHNhbmRib3gsc2NvcGUsc2NvcGVkLGAgK1xyXG4gICAgYHNlbGVjdGVkLHNoYXBlLHNpemUsc2l6ZXMsc2xvdCxzcGFuLHNwZWxsY2hlY2ssc3JjLHNyY2RvYyxzcmNsYW5nLHNyY3NldCxgICtcclxuICAgIGBzdGFydCxzdGVwLHN0eWxlLHN1bW1hcnksdGFiaW5kZXgsdGFyZ2V0LHRpdGxlLHRyYW5zbGF0ZSx0eXBlLHVzZW1hcCxgICtcclxuICAgIGB2YWx1ZSx3aWR0aCx3cmFwYCk7XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVN0eWxlKHZhbHVlKSB7XHJcbiAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcclxuICAgICAgICBjb25zdCByZXMgPSB7fTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZhbHVlLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGl0ZW0gPSB2YWx1ZVtpXTtcclxuICAgICAgICAgICAgY29uc3Qgbm9ybWFsaXplZCA9IG5vcm1hbGl6ZVN0eWxlKGlzU3RyaW5nKGl0ZW0pID8gcGFyc2VTdHJpbmdTdHlsZShpdGVtKSA6IGl0ZW0pO1xyXG4gICAgICAgICAgICBpZiAobm9ybWFsaXplZCkge1xyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gbm9ybWFsaXplZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc1trZXldID0gbm9ybWFsaXplZFtrZXldO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXM7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChpc09iamVjdCh2YWx1ZSkpIHtcclxuICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICB9XHJcbn1cclxuY29uc3QgbGlzdERlbGltaXRlclJFID0gLzsoPyFbXihdKlxcKSkvZztcclxuY29uc3QgcHJvcGVydHlEZWxpbWl0ZXJSRSA9IC86KC4rKS87XHJcbmZ1bmN0aW9uIHBhcnNlU3RyaW5nU3R5bGUoY3NzVGV4dCkge1xyXG4gICAgY29uc3QgcmV0ID0ge307XHJcbiAgICBjc3NUZXh0LnNwbGl0KGxpc3REZWxpbWl0ZXJSRSkuZm9yRWFjaChpdGVtID0+IHtcclxuICAgICAgICBpZiAoaXRlbSkge1xyXG4gICAgICAgICAgICBjb25zdCB0bXAgPSBpdGVtLnNwbGl0KHByb3BlcnR5RGVsaW1pdGVyUkUpO1xyXG4gICAgICAgICAgICB0bXAubGVuZ3RoID4gMSAmJiAocmV0W3RtcFswXS50cmltKCldID0gdG1wWzFdLnRyaW0oKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gcmV0O1xyXG59XHJcbmZ1bmN0aW9uIHN0cmluZ2lmeVN0eWxlKHN0eWxlcykge1xyXG4gICAgbGV0IHJldCA9ICcnO1xyXG4gICAgaWYgKCFzdHlsZXMpIHtcclxuICAgICAgICByZXR1cm4gcmV0O1xyXG4gICAgfVxyXG4gICAgZm9yIChjb25zdCBrZXkgaW4gc3R5bGVzKSB7XHJcbiAgICAgICAgY29uc3QgdmFsdWUgPSBzdHlsZXNba2V5XTtcclxuICAgICAgICBjb25zdCBub3JtYWxpemVkS2V5ID0ga2V5LnN0YXJ0c1dpdGgoYC0tYCkgPyBrZXkgOiBoeXBoZW5hdGUoa2V5KTtcclxuICAgICAgICBpZiAoaXNTdHJpbmcodmFsdWUpIHx8XHJcbiAgICAgICAgICAgICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInICYmIGlzTm9Vbml0TnVtZXJpY1N0eWxlUHJvcChub3JtYWxpemVkS2V5KSkpIHtcclxuICAgICAgICAgICAgLy8gb25seSByZW5kZXIgdmFsaWQgdmFsdWVzXHJcbiAgICAgICAgICAgIHJldCArPSBgJHtub3JtYWxpemVkS2V5fToke3ZhbHVlfTtgO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiByZXQ7XHJcbn1cclxuZnVuY3Rpb24gbm9ybWFsaXplQ2xhc3ModmFsdWUpIHtcclxuICAgIGxldCByZXMgPSAnJztcclxuICAgIGlmIChpc1N0cmluZyh2YWx1ZSkpIHtcclxuICAgICAgICByZXMgPSB2YWx1ZTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGlzQXJyYXkodmFsdWUpKSB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWx1ZS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICByZXMgKz0gbm9ybWFsaXplQ2xhc3ModmFsdWVbaV0pICsgJyAnO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGlzT2JqZWN0KHZhbHVlKSkge1xyXG4gICAgICAgIGZvciAoY29uc3QgbmFtZSBpbiB2YWx1ZSkge1xyXG4gICAgICAgICAgICBpZiAodmFsdWVbbmFtZV0pIHtcclxuICAgICAgICAgICAgICAgIHJlcyArPSBuYW1lICsgJyAnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlcy50cmltKCk7XHJcbn1cblxuLy8gVGhlc2UgdGFnIGNvbmZpZ3MgYXJlIHNoYXJlZCBiZXR3ZWVuIGNvbXBpbGVyLWRvbSBhbmQgcnVudGltZS1kb20sIHNvIHRoZXlcclxuLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50XHJcbmNvbnN0IEhUTUxfVEFHUyA9ICdodG1sLGJvZHksYmFzZSxoZWFkLGxpbmssbWV0YSxzdHlsZSx0aXRsZSxhZGRyZXNzLGFydGljbGUsYXNpZGUsZm9vdGVyLCcgK1xyXG4gICAgJ2hlYWRlcixoMSxoMixoMyxoNCxoNSxoNixoZ3JvdXAsbmF2LHNlY3Rpb24sZGl2LGRkLGRsLGR0LGZpZ2NhcHRpb24sJyArXHJcbiAgICAnZmlndXJlLHBpY3R1cmUsaHIsaW1nLGxpLG1haW4sb2wscCxwcmUsdWwsYSxiLGFiYnIsYmRpLGJkbyxicixjaXRlLGNvZGUsJyArXHJcbiAgICAnZGF0YSxkZm4sZW0saSxrYmQsbWFyayxxLHJwLHJ0LHJ0YyxydWJ5LHMsc2FtcCxzbWFsbCxzcGFuLHN0cm9uZyxzdWIsc3VwLCcgK1xyXG4gICAgJ3RpbWUsdSx2YXIsd2JyLGFyZWEsYXVkaW8sbWFwLHRyYWNrLHZpZGVvLGVtYmVkLG9iamVjdCxwYXJhbSxzb3VyY2UsJyArXHJcbiAgICAnY2FudmFzLHNjcmlwdCxub3NjcmlwdCxkZWwsaW5zLGNhcHRpb24sY29sLGNvbGdyb3VwLHRhYmxlLHRoZWFkLHRib2R5LHRkLCcgK1xyXG4gICAgJ3RoLHRyLGJ1dHRvbixkYXRhbGlzdCxmaWVsZHNldCxmb3JtLGlucHV0LGxhYmVsLGxlZ2VuZCxtZXRlcixvcHRncm91cCwnICtcclxuICAgICdvcHRpb24sb3V0cHV0LHByb2dyZXNzLHNlbGVjdCx0ZXh0YXJlYSxkZXRhaWxzLGRpYWxvZyxtZW51LCcgK1xyXG4gICAgJ3N1bW1hcnksdGVtcGxhdGUsYmxvY2txdW90ZSxpZnJhbWUsdGZvb3QnO1xyXG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9TVkcvRWxlbWVudFxyXG5jb25zdCBTVkdfVEFHUyA9ICdzdmcsYW5pbWF0ZSxhbmltYXRlTW90aW9uLGFuaW1hdGVUcmFuc2Zvcm0sY2lyY2xlLGNsaXBQYXRoLGNvbG9yLXByb2ZpbGUsJyArXHJcbiAgICAnZGVmcyxkZXNjLGRpc2NhcmQsZWxsaXBzZSxmZUJsZW5kLGZlQ29sb3JNYXRyaXgsZmVDb21wb25lbnRUcmFuc2ZlciwnICtcclxuICAgICdmZUNvbXBvc2l0ZSxmZUNvbnZvbHZlTWF0cml4LGZlRGlmZnVzZUxpZ2h0aW5nLGZlRGlzcGxhY2VtZW50TWFwLCcgK1xyXG4gICAgJ2ZlRGlzdGFuY2VMaWdodCxmZURyb3BTaGFkb3csZmVGbG9vZCxmZUZ1bmNBLGZlRnVuY0IsZmVGdW5jRyxmZUZ1bmNSLCcgK1xyXG4gICAgJ2ZlR2F1c3NpYW5CbHVyLGZlSW1hZ2UsZmVNZXJnZSxmZU1lcmdlTm9kZSxmZU1vcnBob2xvZ3ksZmVPZmZzZXQsJyArXHJcbiAgICAnZmVQb2ludExpZ2h0LGZlU3BlY3VsYXJMaWdodGluZyxmZVNwb3RMaWdodCxmZVRpbGUsZmVUdXJidWxlbmNlLGZpbHRlciwnICtcclxuICAgICdmb3JlaWduT2JqZWN0LGcsaGF0Y2gsaGF0Y2hwYXRoLGltYWdlLGxpbmUsbGluZWFyR3JhZGllbnQsbWFya2VyLG1hc2ssJyArXHJcbiAgICAnbWVzaCxtZXNoZ3JhZGllbnQsbWVzaHBhdGNoLG1lc2hyb3csbWV0YWRhdGEsbXBhdGgscGF0aCxwYXR0ZXJuLCcgK1xyXG4gICAgJ3BvbHlnb24scG9seWxpbmUscmFkaWFsR3JhZGllbnQscmVjdCxzZXQsc29saWRjb2xvcixzdG9wLHN3aXRjaCxzeW1ib2wsJyArXHJcbiAgICAndGV4dCx0ZXh0UGF0aCx0aXRsZSx0c3Bhbix1bmtub3duLHVzZSx2aWV3JztcclxuY29uc3QgVk9JRF9UQUdTID0gJ2FyZWEsYmFzZSxicixjb2wsZW1iZWQsaHIsaW1nLGlucHV0LGxpbmssbWV0YSxwYXJhbSxzb3VyY2UsdHJhY2ssd2JyJztcclxuY29uc3QgaXNIVE1MVGFnID0gLyojX19QVVJFX18qLyBtYWtlTWFwKEhUTUxfVEFHUyk7XHJcbmNvbnN0IGlzU1ZHVGFnID0gLyojX19QVVJFX18qLyBtYWtlTWFwKFNWR19UQUdTKTtcclxuY29uc3QgaXNWb2lkVGFnID0gLyojX19QVVJFX18qLyBtYWtlTWFwKFZPSURfVEFHUyk7XG5cbmNvbnN0IGVzY2FwZVJFID0gL1tcIicmPD5dLztcclxuZnVuY3Rpb24gZXNjYXBlSHRtbChzdHJpbmcpIHtcclxuICAgIGNvbnN0IHN0ciA9ICcnICsgc3RyaW5nO1xyXG4gICAgY29uc3QgbWF0Y2ggPSBlc2NhcGVSRS5leGVjKHN0cik7XHJcbiAgICBpZiAoIW1hdGNoKSB7XHJcbiAgICAgICAgcmV0dXJuIHN0cjtcclxuICAgIH1cclxuICAgIGxldCBodG1sID0gJyc7XHJcbiAgICBsZXQgZXNjYXBlZDtcclxuICAgIGxldCBpbmRleDtcclxuICAgIGxldCBsYXN0SW5kZXggPSAwO1xyXG4gICAgZm9yIChpbmRleCA9IG1hdGNoLmluZGV4OyBpbmRleCA8IHN0ci5sZW5ndGg7IGluZGV4KyspIHtcclxuICAgICAgICBzd2l0Y2ggKHN0ci5jaGFyQ29kZUF0KGluZGV4KSkge1xyXG4gICAgICAgICAgICBjYXNlIDM0OiAvLyBcIlxyXG4gICAgICAgICAgICAgICAgZXNjYXBlZCA9ICcmcXVvdDsnO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgMzg6IC8vICZcclxuICAgICAgICAgICAgICAgIGVzY2FwZWQgPSAnJmFtcDsnO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgMzk6IC8vICdcclxuICAgICAgICAgICAgICAgIGVzY2FwZWQgPSAnJiMzOTsnO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgNjA6IC8vIDxcclxuICAgICAgICAgICAgICAgIGVzY2FwZWQgPSAnJmx0Oyc7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSA2MjogLy8gPlxyXG4gICAgICAgICAgICAgICAgZXNjYXBlZCA9ICcmZ3Q7JztcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChsYXN0SW5kZXggIT09IGluZGV4KSB7XHJcbiAgICAgICAgICAgIGh0bWwgKz0gc3RyLnN1YnN0cmluZyhsYXN0SW5kZXgsIGluZGV4KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGFzdEluZGV4ID0gaW5kZXggKyAxO1xyXG4gICAgICAgIGh0bWwgKz0gZXNjYXBlZDtcclxuICAgIH1cclxuICAgIHJldHVybiBsYXN0SW5kZXggIT09IGluZGV4ID8gaHRtbCArIHN0ci5zdWJzdHJpbmcobGFzdEluZGV4LCBpbmRleCkgOiBodG1sO1xyXG59XHJcbi8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9odG1sNTIvc3ludGF4Lmh0bWwjY29tbWVudHNcclxuY29uc3QgY29tbWVudFN0cmlwUkUgPSAvXi0/Pnw8IS0tfC0tPnwtLSE+fDwhLSQvZztcclxuZnVuY3Rpb24gZXNjYXBlSHRtbENvbW1lbnQoc3JjKSB7XHJcbiAgICByZXR1cm4gc3JjLnJlcGxhY2UoY29tbWVudFN0cmlwUkUsICcnKTtcclxufVxuXG5mdW5jdGlvbiBsb29zZUNvbXBhcmVBcnJheXMoYSwgYikge1xyXG4gICAgaWYgKGEubGVuZ3RoICE9PSBiLmxlbmd0aClcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICBsZXQgZXF1YWwgPSB0cnVlO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGVxdWFsICYmIGkgPCBhLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgZXF1YWwgPSBsb29zZUVxdWFsKGFbaV0sIGJbaV0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGVxdWFsO1xyXG59XHJcbmZ1bmN0aW9uIGxvb3NlRXF1YWwoYSwgYikge1xyXG4gICAgaWYgKGEgPT09IGIpXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICBsZXQgYVZhbGlkVHlwZSA9IGlzRGF0ZShhKTtcclxuICAgIGxldCBiVmFsaWRUeXBlID0gaXNEYXRlKGIpO1xyXG4gICAgaWYgKGFWYWxpZFR5cGUgfHwgYlZhbGlkVHlwZSkge1xyXG4gICAgICAgIHJldHVybiBhVmFsaWRUeXBlICYmIGJWYWxpZFR5cGUgPyBhLmdldFRpbWUoKSA9PT0gYi5nZXRUaW1lKCkgOiBmYWxzZTtcclxuICAgIH1cclxuICAgIGFWYWxpZFR5cGUgPSBpc0FycmF5KGEpO1xyXG4gICAgYlZhbGlkVHlwZSA9IGlzQXJyYXkoYik7XHJcbiAgICBpZiAoYVZhbGlkVHlwZSB8fCBiVmFsaWRUeXBlKSB7XHJcbiAgICAgICAgcmV0dXJuIGFWYWxpZFR5cGUgJiYgYlZhbGlkVHlwZSA/IGxvb3NlQ29tcGFyZUFycmF5cyhhLCBiKSA6IGZhbHNlO1xyXG4gICAgfVxyXG4gICAgYVZhbGlkVHlwZSA9IGlzT2JqZWN0KGEpO1xyXG4gICAgYlZhbGlkVHlwZSA9IGlzT2JqZWN0KGIpO1xyXG4gICAgaWYgKGFWYWxpZFR5cGUgfHwgYlZhbGlkVHlwZSkge1xyXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZjogdGhpcyBpZiB3aWxsIHByb2JhYmx5IG5ldmVyIGJlIGNhbGxlZCAqL1xyXG4gICAgICAgIGlmICghYVZhbGlkVHlwZSB8fCAhYlZhbGlkVHlwZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGFLZXlzQ291bnQgPSBPYmplY3Qua2V5cyhhKS5sZW5ndGg7XHJcbiAgICAgICAgY29uc3QgYktleXNDb3VudCA9IE9iamVjdC5rZXlzKGIpLmxlbmd0aDtcclxuICAgICAgICBpZiAoYUtleXNDb3VudCAhPT0gYktleXNDb3VudCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIGEpIHtcclxuICAgICAgICAgICAgY29uc3QgYUhhc0tleSA9IGEuaGFzT3duUHJvcGVydHkoa2V5KTtcclxuICAgICAgICAgICAgY29uc3QgYkhhc0tleSA9IGIuaGFzT3duUHJvcGVydHkoa2V5KTtcclxuICAgICAgICAgICAgaWYgKChhSGFzS2V5ICYmICFiSGFzS2V5KSB8fFxyXG4gICAgICAgICAgICAgICAgKCFhSGFzS2V5ICYmIGJIYXNLZXkpIHx8XHJcbiAgICAgICAgICAgICAgICAhbG9vc2VFcXVhbChhW2tleV0sIGJba2V5XSkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBTdHJpbmcoYSkgPT09IFN0cmluZyhiKTtcclxufVxyXG5mdW5jdGlvbiBsb29zZUluZGV4T2YoYXJyLCB2YWwpIHtcclxuICAgIHJldHVybiBhcnIuZmluZEluZGV4KGl0ZW0gPT4gbG9vc2VFcXVhbChpdGVtLCB2YWwpKTtcclxufVxuXG4vKipcclxuICogRm9yIGNvbnZlcnRpbmcge3sgaW50ZXJwb2xhdGlvbiB9fSB2YWx1ZXMgdG8gZGlzcGxheWVkIHN0cmluZ3MuXHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG5jb25zdCB0b0Rpc3BsYXlTdHJpbmcgPSAodmFsKSA9PiB7XHJcbiAgICByZXR1cm4gdmFsID09IG51bGxcclxuICAgICAgICA/ICcnXHJcbiAgICAgICAgOiBpc09iamVjdCh2YWwpXHJcbiAgICAgICAgICAgID8gSlNPTi5zdHJpbmdpZnkodmFsLCByZXBsYWNlciwgMilcclxuICAgICAgICAgICAgOiBTdHJpbmcodmFsKTtcclxufTtcclxuY29uc3QgcmVwbGFjZXIgPSAoX2tleSwgdmFsKSA9PiB7XHJcbiAgICBpZiAoaXNNYXAodmFsKSkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIFtgTWFwKCR7dmFsLnNpemV9KWBdOiBbLi4udmFsLmVudHJpZXMoKV0ucmVkdWNlKChlbnRyaWVzLCBba2V5LCB2YWxdKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBlbnRyaWVzW2Ake2tleX0gPT5gXSA9IHZhbDtcclxuICAgICAgICAgICAgICAgIHJldHVybiBlbnRyaWVzO1xyXG4gICAgICAgICAgICB9LCB7fSlcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoaXNTZXQodmFsKSkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIFtgU2V0KCR7dmFsLnNpemV9KWBdOiBbLi4udmFsLnZhbHVlcygpXVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChpc09iamVjdCh2YWwpICYmICFpc0FycmF5KHZhbCkgJiYgIWlzUGxhaW5PYmplY3QodmFsKSkge1xyXG4gICAgICAgIHJldHVybiBTdHJpbmcodmFsKTtcclxuICAgIH1cclxuICAgIHJldHVybiB2YWw7XHJcbn07XG5cbi8qKlxyXG4gKiBMaXN0IG9mIEBiYWJlbC9wYXJzZXIgcGx1Z2lucyB0aGF0IGFyZSB1c2VkIGZvciB0ZW1wbGF0ZSBleHByZXNzaW9uXHJcbiAqIHRyYW5zZm9ybXMgYW5kIFNGQyBzY3JpcHQgdHJhbnNmb3Jtcy4gQnkgZGVmYXVsdCB3ZSBlbmFibGUgcHJvcG9zYWxzIHNsYXRlZFxyXG4gKiBmb3IgRVMyMDIwLiBUaGlzIHdpbGwgbmVlZCB0byBiZSB1cGRhdGVkIGFzIHRoZSBzcGVjIG1vdmVzIGZvcndhcmQuXHJcbiAqIEZ1bGwgbGlzdCBhdCBodHRwczovL2JhYmVsanMuaW8vZG9jcy9lbi9uZXh0L2JhYmVsLXBhcnNlciNwbHVnaW5zXHJcbiAqL1xyXG5jb25zdCBiYWJlbFBhcnNlckRlZmF1bHRQbHVnaW5zID0gW1xyXG4gICAgJ2JpZ0ludCcsXHJcbiAgICAnb3B0aW9uYWxDaGFpbmluZycsXHJcbiAgICAnbnVsbGlzaENvYWxlc2NpbmdPcGVyYXRvcidcclxuXTtcclxuY29uc3QgRU1QVFlfT0JKID0gKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpXHJcbiAgICA/IE9iamVjdC5mcmVlemUoe30pXHJcbiAgICA6IHt9O1xyXG5jb25zdCBFTVBUWV9BUlIgPSAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgPyBPYmplY3QuZnJlZXplKFtdKSA6IFtdO1xyXG5jb25zdCBOT09QID0gKCkgPT4geyB9O1xyXG4vKipcclxuICogQWx3YXlzIHJldHVybiBmYWxzZS5cclxuICovXHJcbmNvbnN0IE5PID0gKCkgPT4gZmFsc2U7XHJcbmNvbnN0IG9uUkUgPSAvXm9uW15hLXpdLztcclxuY29uc3QgaXNPbiA9IChrZXkpID0+IG9uUkUudGVzdChrZXkpO1xyXG5jb25zdCBpc01vZGVsTGlzdGVuZXIgPSAoa2V5KSA9PiBrZXkuc3RhcnRzV2l0aCgnb25VcGRhdGU6Jyk7XHJcbmNvbnN0IGV4dGVuZCA9IE9iamVjdC5hc3NpZ247XHJcbmNvbnN0IHJlbW92ZSA9IChhcnIsIGVsKSA9PiB7XHJcbiAgICBjb25zdCBpID0gYXJyLmluZGV4T2YoZWwpO1xyXG4gICAgaWYgKGkgPiAtMSkge1xyXG4gICAgICAgIGFyci5zcGxpY2UoaSwgMSk7XHJcbiAgICB9XHJcbn07XHJcbmNvbnN0IGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcclxuY29uc3QgaGFzT3duID0gKHZhbCwga2V5KSA9PiBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbCwga2V5KTtcclxuY29uc3QgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XHJcbmNvbnN0IGlzTWFwID0gKHZhbCkgPT4gdG9UeXBlU3RyaW5nKHZhbCkgPT09ICdbb2JqZWN0IE1hcF0nO1xyXG5jb25zdCBpc1NldCA9ICh2YWwpID0+IHRvVHlwZVN0cmluZyh2YWwpID09PSAnW29iamVjdCBTZXRdJztcclxuY29uc3QgaXNEYXRlID0gKHZhbCkgPT4gdmFsIGluc3RhbmNlb2YgRGF0ZTtcclxuY29uc3QgaXNGdW5jdGlvbiA9ICh2YWwpID0+IHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbic7XHJcbmNvbnN0IGlzU3RyaW5nID0gKHZhbCkgPT4gdHlwZW9mIHZhbCA9PT0gJ3N0cmluZyc7XHJcbmNvbnN0IGlzU3ltYm9sID0gKHZhbCkgPT4gdHlwZW9mIHZhbCA9PT0gJ3N5bWJvbCc7XHJcbmNvbnN0IGlzT2JqZWN0ID0gKHZhbCkgPT4gdmFsICE9PSBudWxsICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnO1xyXG5jb25zdCBpc1Byb21pc2UgPSAodmFsKSA9PiB7XHJcbiAgICByZXR1cm4gaXNPYmplY3QodmFsKSAmJiBpc0Z1bmN0aW9uKHZhbC50aGVuKSAmJiBpc0Z1bmN0aW9uKHZhbC5jYXRjaCk7XHJcbn07XHJcbmNvbnN0IG9iamVjdFRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcclxuY29uc3QgdG9UeXBlU3RyaW5nID0gKHZhbHVlKSA9PiBvYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcclxuY29uc3QgdG9SYXdUeXBlID0gKHZhbHVlKSA9PiB7XHJcbiAgICAvLyBleHRyYWN0IFwiUmF3VHlwZVwiIGZyb20gc3RyaW5ncyBsaWtlIFwiW29iamVjdCBSYXdUeXBlXVwiXHJcbiAgICByZXR1cm4gdG9UeXBlU3RyaW5nKHZhbHVlKS5zbGljZSg4LCAtMSk7XHJcbn07XHJcbmNvbnN0IGlzUGxhaW5PYmplY3QgPSAodmFsKSA9PiB0b1R5cGVTdHJpbmcodmFsKSA9PT0gJ1tvYmplY3QgT2JqZWN0XSc7XHJcbmNvbnN0IGlzSW50ZWdlcktleSA9IChrZXkpID0+IGlzU3RyaW5nKGtleSkgJiZcclxuICAgIGtleSAhPT0gJ05hTicgJiZcclxuICAgIGtleVswXSAhPT0gJy0nICYmXHJcbiAgICAnJyArIHBhcnNlSW50KGtleSwgMTApID09PSBrZXk7XHJcbmNvbnN0IGlzUmVzZXJ2ZWRQcm9wID0gLyojX19QVVJFX18qLyBtYWtlTWFwKFxyXG4vLyB0aGUgbGVhZGluZyBjb21tYSBpcyBpbnRlbnRpb25hbCBzbyBlbXB0eSBzdHJpbmcgXCJcIiBpcyBhbHNvIGluY2x1ZGVkXHJcbicsa2V5LHJlZiwnICtcclxuICAgICdvblZub2RlQmVmb3JlTW91bnQsb25Wbm9kZU1vdW50ZWQsJyArXHJcbiAgICAnb25Wbm9kZUJlZm9yZVVwZGF0ZSxvblZub2RlVXBkYXRlZCwnICtcclxuICAgICdvblZub2RlQmVmb3JlVW5tb3VudCxvblZub2RlVW5tb3VudGVkJyk7XHJcbmNvbnN0IGNhY2hlU3RyaW5nRnVuY3Rpb24gPSAoZm4pID0+IHtcclxuICAgIGNvbnN0IGNhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcclxuICAgIHJldHVybiAoKHN0cikgPT4ge1xyXG4gICAgICAgIGNvbnN0IGhpdCA9IGNhY2hlW3N0cl07XHJcbiAgICAgICAgcmV0dXJuIGhpdCB8fCAoY2FjaGVbc3RyXSA9IGZuKHN0cikpO1xyXG4gICAgfSk7XHJcbn07XHJcbmNvbnN0IGNhbWVsaXplUkUgPSAvLShcXHcpL2c7XHJcbi8qKlxyXG4gKiBAcHJpdmF0ZVxyXG4gKi9cclxuY29uc3QgY2FtZWxpemUgPSBjYWNoZVN0cmluZ0Z1bmN0aW9uKChzdHIpID0+IHtcclxuICAgIHJldHVybiBzdHIucmVwbGFjZShjYW1lbGl6ZVJFLCAoXywgYykgPT4gKGMgPyBjLnRvVXBwZXJDYXNlKCkgOiAnJykpO1xyXG59KTtcclxuY29uc3QgaHlwaGVuYXRlUkUgPSAvXFxCKFtBLVpdKS9nO1xyXG4vKipcclxuICogQHByaXZhdGVcclxuICovXHJcbmNvbnN0IGh5cGhlbmF0ZSA9IGNhY2hlU3RyaW5nRnVuY3Rpb24oKHN0cikgPT4gc3RyLnJlcGxhY2UoaHlwaGVuYXRlUkUsICctJDEnKS50b0xvd2VyQ2FzZSgpKTtcclxuLyoqXHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG5jb25zdCBjYXBpdGFsaXplID0gY2FjaGVTdHJpbmdGdW5jdGlvbigoc3RyKSA9PiBzdHIuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHIuc2xpY2UoMSkpO1xyXG4vKipcclxuICogQHByaXZhdGVcclxuICovXHJcbmNvbnN0IHRvSGFuZGxlcktleSA9IGNhY2hlU3RyaW5nRnVuY3Rpb24oKHN0cikgPT4gKHN0ciA/IGBvbiR7Y2FwaXRhbGl6ZShzdHIpfWAgOiBgYCkpO1xyXG4vLyBjb21wYXJlIHdoZXRoZXIgYSB2YWx1ZSBoYXMgY2hhbmdlZCwgYWNjb3VudGluZyBmb3IgTmFOLlxyXG5jb25zdCBoYXNDaGFuZ2VkID0gKHZhbHVlLCBvbGRWYWx1ZSkgPT4gdmFsdWUgIT09IG9sZFZhbHVlICYmICh2YWx1ZSA9PT0gdmFsdWUgfHwgb2xkVmFsdWUgPT09IG9sZFZhbHVlKTtcclxuY29uc3QgaW52b2tlQXJyYXlGbnMgPSAoZm5zLCBhcmcpID0+IHtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZm5zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgZm5zW2ldKGFyZyk7XHJcbiAgICB9XHJcbn07XHJcbmNvbnN0IGRlZiA9IChvYmosIGtleSwgdmFsdWUpID0+IHtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICB2YWx1ZVxyXG4gICAgfSk7XHJcbn07XHJcbmNvbnN0IHRvTnVtYmVyID0gKHZhbCkgPT4ge1xyXG4gICAgY29uc3QgbiA9IHBhcnNlRmxvYXQodmFsKTtcclxuICAgIHJldHVybiBpc05hTihuKSA/IHZhbCA6IG47XHJcbn07XHJcbmxldCBfZ2xvYmFsVGhpcztcclxuY29uc3QgZ2V0R2xvYmFsVGhpcyA9ICgpID0+IHtcclxuICAgIHJldHVybiAoX2dsb2JhbFRoaXMgfHxcclxuICAgICAgICAoX2dsb2JhbFRoaXMgPVxyXG4gICAgICAgICAgICB0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gJ3VuZGVmaW5lZCdcclxuICAgICAgICAgICAgICAgID8gZ2xvYmFsVGhpc1xyXG4gICAgICAgICAgICAgICAgOiB0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCdcclxuICAgICAgICAgICAgICAgICAgICA/IHNlbGZcclxuICAgICAgICAgICAgICAgICAgICA6IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgID8gd2luZG93XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDogdHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCdcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gZ2xvYmFsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHt9KSk7XHJcbn07XG5cbmV4cG9ydCB7IEVNUFRZX0FSUiwgRU1QVFlfT0JKLCBOTywgTk9PUCwgUGF0Y2hGbGFnTmFtZXMsIGJhYmVsUGFyc2VyRGVmYXVsdFBsdWdpbnMsIGNhbWVsaXplLCBjYXBpdGFsaXplLCBkZWYsIGVzY2FwZUh0bWwsIGVzY2FwZUh0bWxDb21tZW50LCBleHRlbmQsIGdlbmVyYXRlQ29kZUZyYW1lLCBnZXRHbG9iYWxUaGlzLCBoYXNDaGFuZ2VkLCBoYXNPd24sIGh5cGhlbmF0ZSwgaW52b2tlQXJyYXlGbnMsIGlzQXJyYXksIGlzQm9vbGVhbkF0dHIsIGlzRGF0ZSwgaXNGdW5jdGlvbiwgaXNHbG9iYWxseVdoaXRlbGlzdGVkLCBpc0hUTUxUYWcsIGlzSW50ZWdlcktleSwgaXNLbm93bkF0dHIsIGlzTWFwLCBpc01vZGVsTGlzdGVuZXIsIGlzTm9Vbml0TnVtZXJpY1N0eWxlUHJvcCwgaXNPYmplY3QsIGlzT24sIGlzUGxhaW5PYmplY3QsIGlzUHJvbWlzZSwgaXNSZXNlcnZlZFByb3AsIGlzU1NSU2FmZUF0dHJOYW1lLCBpc1NWR1RhZywgaXNTZXQsIGlzU3BlY2lhbEJvb2xlYW5BdHRyLCBpc1N0cmluZywgaXNTeW1ib2wsIGlzVm9pZFRhZywgbG9vc2VFcXVhbCwgbG9vc2VJbmRleE9mLCBtYWtlTWFwLCBub3JtYWxpemVDbGFzcywgbm9ybWFsaXplU3R5bGUsIG9iamVjdFRvU3RyaW5nLCBwYXJzZVN0cmluZ1N0eWxlLCBwcm9wc1RvQXR0ck1hcCwgcmVtb3ZlLCBzbG90RmxhZ3NUZXh0LCBzdHJpbmdpZnlTdHlsZSwgdG9EaXNwbGF5U3RyaW5nLCB0b0hhbmRsZXJLZXksIHRvTnVtYmVyLCB0b1Jhd1R5cGUsIHRvVHlwZVN0cmluZyB9O1xuIiwiaW1wb3J0IHsgRU1QVFlfT0JKLCBpc0FycmF5LCBpc01hcCwgaXNJbnRlZ2VyS2V5LCBpc1N5bWJvbCwgZXh0ZW5kLCBoYXNPd24sIGlzT2JqZWN0LCBoYXNDaGFuZ2VkLCBjYXBpdGFsaXplLCB0b1Jhd1R5cGUsIGRlZiwgaXNGdW5jdGlvbiwgTk9PUCB9IGZyb20gJ0B2dWUvc2hhcmVkJztcblxuY29uc3QgdGFyZ2V0TWFwID0gbmV3IFdlYWtNYXAoKTtcclxuY29uc3QgZWZmZWN0U3RhY2sgPSBbXTtcclxubGV0IGFjdGl2ZUVmZmVjdDtcclxuY29uc3QgSVRFUkFURV9LRVkgPSBTeW1ib2woKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpID8gJ2l0ZXJhdGUnIDogJycpO1xyXG5jb25zdCBNQVBfS0VZX0lURVJBVEVfS0VZID0gU3ltYm9sKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSA/ICdNYXAga2V5IGl0ZXJhdGUnIDogJycpO1xyXG5mdW5jdGlvbiBpc0VmZmVjdChmbikge1xyXG4gICAgcmV0dXJuIGZuICYmIGZuLl9pc0VmZmVjdCA9PT0gdHJ1ZTtcclxufVxyXG5mdW5jdGlvbiBlZmZlY3QoZm4sIG9wdGlvbnMgPSBFTVBUWV9PQkopIHtcclxuICAgIGlmIChpc0VmZmVjdChmbikpIHtcclxuICAgICAgICBmbiA9IGZuLnJhdztcclxuICAgIH1cclxuICAgIGNvbnN0IGVmZmVjdCA9IGNyZWF0ZVJlYWN0aXZlRWZmZWN0KGZuLCBvcHRpb25zKTtcclxuICAgIGlmICghb3B0aW9ucy5sYXp5KSB7XHJcbiAgICAgICAgZWZmZWN0KCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZWZmZWN0O1xyXG59XHJcbmZ1bmN0aW9uIHN0b3AoZWZmZWN0KSB7XHJcbiAgICBpZiAoZWZmZWN0LmFjdGl2ZSkge1xyXG4gICAgICAgIGNsZWFudXAoZWZmZWN0KTtcclxuICAgICAgICBpZiAoZWZmZWN0Lm9wdGlvbnMub25TdG9wKSB7XHJcbiAgICAgICAgICAgIGVmZmVjdC5vcHRpb25zLm9uU3RvcCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlZmZlY3QuYWN0aXZlID0gZmFsc2U7XHJcbiAgICB9XHJcbn1cclxubGV0IHVpZCA9IDA7XHJcbmZ1bmN0aW9uIGNyZWF0ZVJlYWN0aXZlRWZmZWN0KGZuLCBvcHRpb25zKSB7XHJcbiAgICBjb25zdCBlZmZlY3QgPSBmdW5jdGlvbiByZWFjdGl2ZUVmZmVjdCgpIHtcclxuICAgICAgICBpZiAoIWVmZmVjdC5hY3RpdmUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMuc2NoZWR1bGVyID8gdW5kZWZpbmVkIDogZm4oKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFlZmZlY3RTdGFjay5pbmNsdWRlcyhlZmZlY3QpKSB7XHJcbiAgICAgICAgICAgIGNsZWFudXAoZWZmZWN0KTtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGVuYWJsZVRyYWNraW5nKCk7XHJcbiAgICAgICAgICAgICAgICBlZmZlY3RTdGFjay5wdXNoKGVmZmVjdCk7XHJcbiAgICAgICAgICAgICAgICBhY3RpdmVFZmZlY3QgPSBlZmZlY3Q7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZm4oKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmaW5hbGx5IHtcclxuICAgICAgICAgICAgICAgIGVmZmVjdFN0YWNrLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgcmVzZXRUcmFja2luZygpO1xyXG4gICAgICAgICAgICAgICAgYWN0aXZlRWZmZWN0ID0gZWZmZWN0U3RhY2tbZWZmZWN0U3RhY2subGVuZ3RoIC0gMV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgZWZmZWN0LmlkID0gdWlkKys7XHJcbiAgICBlZmZlY3QuYWxsb3dSZWN1cnNlID0gISFvcHRpb25zLmFsbG93UmVjdXJzZTtcclxuICAgIGVmZmVjdC5faXNFZmZlY3QgPSB0cnVlO1xyXG4gICAgZWZmZWN0LmFjdGl2ZSA9IHRydWU7XHJcbiAgICBlZmZlY3QucmF3ID0gZm47XHJcbiAgICBlZmZlY3QuZGVwcyA9IFtdO1xyXG4gICAgZWZmZWN0Lm9wdGlvbnMgPSBvcHRpb25zO1xyXG4gICAgcmV0dXJuIGVmZmVjdDtcclxufVxyXG5mdW5jdGlvbiBjbGVhbnVwKGVmZmVjdCkge1xyXG4gICAgY29uc3QgeyBkZXBzIH0gPSBlZmZlY3Q7XHJcbiAgICBpZiAoZGVwcy5sZW5ndGgpIHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRlcHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgZGVwc1tpXS5kZWxldGUoZWZmZWN0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZGVwcy5sZW5ndGggPSAwO1xyXG4gICAgfVxyXG59XHJcbmxldCBzaG91bGRUcmFjayA9IHRydWU7XHJcbmNvbnN0IHRyYWNrU3RhY2sgPSBbXTtcclxuZnVuY3Rpb24gcGF1c2VUcmFja2luZygpIHtcclxuICAgIHRyYWNrU3RhY2sucHVzaChzaG91bGRUcmFjayk7XHJcbiAgICBzaG91bGRUcmFjayA9IGZhbHNlO1xyXG59XHJcbmZ1bmN0aW9uIGVuYWJsZVRyYWNraW5nKCkge1xyXG4gICAgdHJhY2tTdGFjay5wdXNoKHNob3VsZFRyYWNrKTtcclxuICAgIHNob3VsZFRyYWNrID0gdHJ1ZTtcclxufVxyXG5mdW5jdGlvbiByZXNldFRyYWNraW5nKCkge1xyXG4gICAgY29uc3QgbGFzdCA9IHRyYWNrU3RhY2sucG9wKCk7XHJcbiAgICBzaG91bGRUcmFjayA9IGxhc3QgPT09IHVuZGVmaW5lZCA/IHRydWUgOiBsYXN0O1xyXG59XHJcbmZ1bmN0aW9uIHRyYWNrKHRhcmdldCwgdHlwZSwga2V5KSB7XHJcbiAgICBpZiAoIXNob3VsZFRyYWNrIHx8IGFjdGl2ZUVmZmVjdCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgbGV0IGRlcHNNYXAgPSB0YXJnZXRNYXAuZ2V0KHRhcmdldCk7XHJcbiAgICBpZiAoIWRlcHNNYXApIHtcclxuICAgICAgICB0YXJnZXRNYXAuc2V0KHRhcmdldCwgKGRlcHNNYXAgPSBuZXcgTWFwKCkpKTtcclxuICAgIH1cclxuICAgIGxldCBkZXAgPSBkZXBzTWFwLmdldChrZXkpO1xyXG4gICAgaWYgKCFkZXApIHtcclxuICAgICAgICBkZXBzTWFwLnNldChrZXksIChkZXAgPSBuZXcgU2V0KCkpKTtcclxuICAgIH1cclxuICAgIGlmICghZGVwLmhhcyhhY3RpdmVFZmZlY3QpKSB7XHJcbiAgICAgICAgZGVwLmFkZChhY3RpdmVFZmZlY3QpO1xyXG4gICAgICAgIGFjdGl2ZUVmZmVjdC5kZXBzLnB1c2goZGVwKTtcclxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIGFjdGl2ZUVmZmVjdC5vcHRpb25zLm9uVHJhY2spIHtcclxuICAgICAgICAgICAgYWN0aXZlRWZmZWN0Lm9wdGlvbnMub25UcmFjayh7XHJcbiAgICAgICAgICAgICAgICBlZmZlY3Q6IGFjdGl2ZUVmZmVjdCxcclxuICAgICAgICAgICAgICAgIHRhcmdldCxcclxuICAgICAgICAgICAgICAgIHR5cGUsXHJcbiAgICAgICAgICAgICAgICBrZXlcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIHRyaWdnZXIodGFyZ2V0LCB0eXBlLCBrZXksIG5ld1ZhbHVlLCBvbGRWYWx1ZSwgb2xkVGFyZ2V0KSB7XHJcbiAgICBjb25zdCBkZXBzTWFwID0gdGFyZ2V0TWFwLmdldCh0YXJnZXQpO1xyXG4gICAgaWYgKCFkZXBzTWFwKSB7XHJcbiAgICAgICAgLy8gbmV2ZXIgYmVlbiB0cmFja2VkXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgY29uc3QgZWZmZWN0cyA9IG5ldyBTZXQoKTtcclxuICAgIGNvbnN0IGFkZCA9IChlZmZlY3RzVG9BZGQpID0+IHtcclxuICAgICAgICBpZiAoZWZmZWN0c1RvQWRkKSB7XHJcbiAgICAgICAgICAgIGVmZmVjdHNUb0FkZC5mb3JFYWNoKGVmZmVjdCA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZWZmZWN0ICE9PSBhY3RpdmVFZmZlY3QgfHwgZWZmZWN0LmFsbG93UmVjdXJzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGVmZmVjdHMuYWRkKGVmZmVjdCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBpZiAodHlwZSA9PT0gXCJjbGVhclwiIC8qIENMRUFSICovKSB7XHJcbiAgICAgICAgLy8gY29sbGVjdGlvbiBiZWluZyBjbGVhcmVkXHJcbiAgICAgICAgLy8gdHJpZ2dlciBhbGwgZWZmZWN0cyBmb3IgdGFyZ2V0XHJcbiAgICAgICAgZGVwc01hcC5mb3JFYWNoKGFkZCk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChrZXkgPT09ICdsZW5ndGgnICYmIGlzQXJyYXkodGFyZ2V0KSkge1xyXG4gICAgICAgIGRlcHNNYXAuZm9yRWFjaCgoZGVwLCBrZXkpID0+IHtcclxuICAgICAgICAgICAgaWYgKGtleSA9PT0gJ2xlbmd0aCcgfHwga2V5ID49IG5ld1ZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICBhZGQoZGVwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgLy8gc2NoZWR1bGUgcnVucyBmb3IgU0VUIHwgQUREIHwgREVMRVRFXHJcbiAgICAgICAgaWYgKGtleSAhPT0gdm9pZCAwKSB7XHJcbiAgICAgICAgICAgIGFkZChkZXBzTWFwLmdldChrZXkpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gYWxzbyBydW4gZm9yIGl0ZXJhdGlvbiBrZXkgb24gQUREIHwgREVMRVRFIHwgTWFwLlNFVFxyXG4gICAgICAgIHN3aXRjaCAodHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlIFwiYWRkXCIgLyogQUREICovOlxyXG4gICAgICAgICAgICAgICAgaWYgKCFpc0FycmF5KHRhcmdldCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBhZGQoZGVwc01hcC5nZXQoSVRFUkFURV9LRVkpKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNNYXAodGFyZ2V0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhZGQoZGVwc01hcC5nZXQoTUFQX0tFWV9JVEVSQVRFX0tFWSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGlzSW50ZWdlcktleShrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gbmV3IGluZGV4IGFkZGVkIHRvIGFycmF5IC0+IGxlbmd0aCBjaGFuZ2VzXHJcbiAgICAgICAgICAgICAgICAgICAgYWRkKGRlcHNNYXAuZ2V0KCdsZW5ndGgnKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcImRlbGV0ZVwiIC8qIERFTEVURSAqLzpcclxuICAgICAgICAgICAgICAgIGlmICghaXNBcnJheSh0YXJnZXQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWRkKGRlcHNNYXAuZ2V0KElURVJBVEVfS0VZKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzTWFwKHRhcmdldCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWRkKGRlcHNNYXAuZ2V0KE1BUF9LRVlfSVRFUkFURV9LRVkpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcInNldFwiIC8qIFNFVCAqLzpcclxuICAgICAgICAgICAgICAgIGlmIChpc01hcCh0YXJnZXQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWRkKGRlcHNNYXAuZ2V0KElURVJBVEVfS0VZKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjb25zdCBydW4gPSAoZWZmZWN0KSA9PiB7XHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBlZmZlY3Qub3B0aW9ucy5vblRyaWdnZXIpIHtcclxuICAgICAgICAgICAgZWZmZWN0Lm9wdGlvbnMub25UcmlnZ2VyKHtcclxuICAgICAgICAgICAgICAgIGVmZmVjdCxcclxuICAgICAgICAgICAgICAgIHRhcmdldCxcclxuICAgICAgICAgICAgICAgIGtleSxcclxuICAgICAgICAgICAgICAgIHR5cGUsXHJcbiAgICAgICAgICAgICAgICBuZXdWYWx1ZSxcclxuICAgICAgICAgICAgICAgIG9sZFZhbHVlLFxyXG4gICAgICAgICAgICAgICAgb2xkVGFyZ2V0XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZWZmZWN0Lm9wdGlvbnMuc2NoZWR1bGVyKSB7XHJcbiAgICAgICAgICAgIGVmZmVjdC5vcHRpb25zLnNjaGVkdWxlcihlZmZlY3QpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgZWZmZWN0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGVmZmVjdHMuZm9yRWFjaChydW4pO1xyXG59XG5cbmNvbnN0IGJ1aWx0SW5TeW1ib2xzID0gbmV3IFNldChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhTeW1ib2wpXHJcbiAgICAubWFwKGtleSA9PiBTeW1ib2xba2V5XSlcclxuICAgIC5maWx0ZXIoaXNTeW1ib2wpKTtcclxuY29uc3QgZ2V0ID0gLyojX19QVVJFX18qLyBjcmVhdGVHZXR0ZXIoKTtcclxuY29uc3Qgc2hhbGxvd0dldCA9IC8qI19fUFVSRV9fKi8gY3JlYXRlR2V0dGVyKGZhbHNlLCB0cnVlKTtcclxuY29uc3QgcmVhZG9ubHlHZXQgPSAvKiNfX1BVUkVfXyovIGNyZWF0ZUdldHRlcih0cnVlKTtcclxuY29uc3Qgc2hhbGxvd1JlYWRvbmx5R2V0ID0gLyojX19QVVJFX18qLyBjcmVhdGVHZXR0ZXIodHJ1ZSwgdHJ1ZSk7XHJcbmNvbnN0IGFycmF5SW5zdHJ1bWVudGF0aW9ucyA9IHt9O1xyXG5bJ2luY2x1ZGVzJywgJ2luZGV4T2YnLCAnbGFzdEluZGV4T2YnXS5mb3JFYWNoKGtleSA9PiB7XHJcbiAgICBjb25zdCBtZXRob2QgPSBBcnJheS5wcm90b3R5cGVba2V5XTtcclxuICAgIGFycmF5SW5zdHJ1bWVudGF0aW9uc1trZXldID0gZnVuY3Rpb24gKC4uLmFyZ3MpIHtcclxuICAgICAgICBjb25zdCBhcnIgPSB0b1Jhdyh0aGlzKTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMCwgbCA9IHRoaXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHRyYWNrKGFyciwgXCJnZXRcIiAvKiBHRVQgKi8sIGkgKyAnJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHdlIHJ1biB0aGUgbWV0aG9kIHVzaW5nIHRoZSBvcmlnaW5hbCBhcmdzIGZpcnN0ICh3aGljaCBtYXkgYmUgcmVhY3RpdmUpXHJcbiAgICAgICAgY29uc3QgcmVzID0gbWV0aG9kLmFwcGx5KGFyciwgYXJncyk7XHJcbiAgICAgICAgaWYgKHJlcyA9PT0gLTEgfHwgcmVzID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAvLyBpZiB0aGF0IGRpZG4ndCB3b3JrLCBydW4gaXQgYWdhaW4gdXNpbmcgcmF3IHZhbHVlcy5cclxuICAgICAgICAgICAgcmV0dXJuIG1ldGhvZC5hcHBseShhcnIsIGFyZ3MubWFwKHRvUmF3KSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn0pO1xyXG5bJ3B1c2gnLCAncG9wJywgJ3NoaWZ0JywgJ3Vuc2hpZnQnLCAnc3BsaWNlJ10uZm9yRWFjaChrZXkgPT4ge1xyXG4gICAgY29uc3QgbWV0aG9kID0gQXJyYXkucHJvdG90eXBlW2tleV07XHJcbiAgICBhcnJheUluc3RydW1lbnRhdGlvbnNba2V5XSA9IGZ1bmN0aW9uICguLi5hcmdzKSB7XHJcbiAgICAgICAgcGF1c2VUcmFja2luZygpO1xyXG4gICAgICAgIGNvbnN0IHJlcyA9IG1ldGhvZC5hcHBseSh0aGlzLCBhcmdzKTtcclxuICAgICAgICByZXNldFRyYWNraW5nKCk7XHJcbiAgICAgICAgcmV0dXJuIHJlcztcclxuICAgIH07XHJcbn0pO1xyXG5mdW5jdGlvbiBjcmVhdGVHZXR0ZXIoaXNSZWFkb25seSA9IGZhbHNlLCBzaGFsbG93ID0gZmFsc2UpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiBnZXQodGFyZ2V0LCBrZXksIHJlY2VpdmVyKSB7XHJcbiAgICAgICAgaWYgKGtleSA9PT0gXCJfX3ZfaXNSZWFjdGl2ZVwiIC8qIElTX1JFQUNUSVZFICovKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAhaXNSZWFkb25seTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoa2V5ID09PSBcIl9fdl9pc1JlYWRvbmx5XCIgLyogSVNfUkVBRE9OTFkgKi8pIHtcclxuICAgICAgICAgICAgcmV0dXJuIGlzUmVhZG9ubHk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGtleSA9PT0gXCJfX3ZfcmF3XCIgLyogUkFXICovICYmXHJcbiAgICAgICAgICAgIHJlY2VpdmVyID09PSAoaXNSZWFkb25seSA/IHJlYWRvbmx5TWFwIDogcmVhY3RpdmVNYXApLmdldCh0YXJnZXQpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0YXJnZXQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHRhcmdldElzQXJyYXkgPSBpc0FycmF5KHRhcmdldCk7XHJcbiAgICAgICAgaWYgKCFpc1JlYWRvbmx5ICYmIHRhcmdldElzQXJyYXkgJiYgaGFzT3duKGFycmF5SW5zdHJ1bWVudGF0aW9ucywga2V5KSkge1xyXG4gICAgICAgICAgICByZXR1cm4gUmVmbGVjdC5nZXQoYXJyYXlJbnN0cnVtZW50YXRpb25zLCBrZXksIHJlY2VpdmVyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgcmVzID0gUmVmbGVjdC5nZXQodGFyZ2V0LCBrZXksIHJlY2VpdmVyKTtcclxuICAgICAgICBpZiAoaXNTeW1ib2woa2V5KVxyXG4gICAgICAgICAgICA/IGJ1aWx0SW5TeW1ib2xzLmhhcyhrZXkpXHJcbiAgICAgICAgICAgIDoga2V5ID09PSBgX19wcm90b19fYCB8fCBrZXkgPT09IGBfX3ZfaXNSZWZgKSB7XHJcbiAgICAgICAgICAgIHJldHVybiByZXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghaXNSZWFkb25seSkge1xyXG4gICAgICAgICAgICB0cmFjayh0YXJnZXQsIFwiZ2V0XCIgLyogR0VUICovLCBrZXkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoc2hhbGxvdykge1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaXNSZWYocmVzKSkge1xyXG4gICAgICAgICAgICAvLyByZWYgdW53cmFwcGluZyAtIGRvZXMgbm90IGFwcGx5IGZvciBBcnJheSArIGludGVnZXIga2V5LlxyXG4gICAgICAgICAgICBjb25zdCBzaG91bGRVbndyYXAgPSAhdGFyZ2V0SXNBcnJheSB8fCAhaXNJbnRlZ2VyS2V5KGtleSk7XHJcbiAgICAgICAgICAgIHJldHVybiBzaG91bGRVbndyYXAgPyByZXMudmFsdWUgOiByZXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChpc09iamVjdChyZXMpKSB7XHJcbiAgICAgICAgICAgIC8vIENvbnZlcnQgcmV0dXJuZWQgdmFsdWUgaW50byBhIHByb3h5IGFzIHdlbGwuIHdlIGRvIHRoZSBpc09iamVjdCBjaGVja1xyXG4gICAgICAgICAgICAvLyBoZXJlIHRvIGF2b2lkIGludmFsaWQgdmFsdWUgd2FybmluZy4gQWxzbyBuZWVkIHRvIGxhenkgYWNjZXNzIHJlYWRvbmx5XHJcbiAgICAgICAgICAgIC8vIGFuZCByZWFjdGl2ZSBoZXJlIHRvIGF2b2lkIGNpcmN1bGFyIGRlcGVuZGVuY3kuXHJcbiAgICAgICAgICAgIHJldHVybiBpc1JlYWRvbmx5ID8gcmVhZG9ubHkocmVzKSA6IHJlYWN0aXZlKHJlcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXM7XHJcbiAgICB9O1xyXG59XHJcbmNvbnN0IHNldCA9IC8qI19fUFVSRV9fKi8gY3JlYXRlU2V0dGVyKCk7XHJcbmNvbnN0IHNoYWxsb3dTZXQgPSAvKiNfX1BVUkVfXyovIGNyZWF0ZVNldHRlcih0cnVlKTtcclxuZnVuY3Rpb24gY3JlYXRlU2V0dGVyKHNoYWxsb3cgPSBmYWxzZSkge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIHNldCh0YXJnZXQsIGtleSwgdmFsdWUsIHJlY2VpdmVyKSB7XHJcbiAgICAgICAgY29uc3Qgb2xkVmFsdWUgPSB0YXJnZXRba2V5XTtcclxuICAgICAgICBpZiAoIXNoYWxsb3cpIHtcclxuICAgICAgICAgICAgdmFsdWUgPSB0b1Jhdyh2YWx1ZSk7XHJcbiAgICAgICAgICAgIGlmICghaXNBcnJheSh0YXJnZXQpICYmIGlzUmVmKG9sZFZhbHVlKSAmJiAhaXNSZWYodmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICBvbGRWYWx1ZS52YWx1ZSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgaGFkS2V5ID0gaXNBcnJheSh0YXJnZXQpICYmIGlzSW50ZWdlcktleShrZXkpXHJcbiAgICAgICAgICAgID8gTnVtYmVyKGtleSkgPCB0YXJnZXQubGVuZ3RoXHJcbiAgICAgICAgICAgIDogaGFzT3duKHRhcmdldCwga2V5KTtcclxuICAgICAgICBjb25zdCByZXN1bHQgPSBSZWZsZWN0LnNldCh0YXJnZXQsIGtleSwgdmFsdWUsIHJlY2VpdmVyKTtcclxuICAgICAgICAvLyBkb24ndCB0cmlnZ2VyIGlmIHRhcmdldCBpcyBzb21ldGhpbmcgdXAgaW4gdGhlIHByb3RvdHlwZSBjaGFpbiBvZiBvcmlnaW5hbFxyXG4gICAgICAgIGlmICh0YXJnZXQgPT09IHRvUmF3KHJlY2VpdmVyKSkge1xyXG4gICAgICAgICAgICBpZiAoIWhhZEtleSkge1xyXG4gICAgICAgICAgICAgICAgdHJpZ2dlcih0YXJnZXQsIFwiYWRkXCIgLyogQUREICovLCBrZXksIHZhbHVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChoYXNDaGFuZ2VkKHZhbHVlLCBvbGRWYWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgIHRyaWdnZXIodGFyZ2V0LCBcInNldFwiIC8qIFNFVCAqLywga2V5LCB2YWx1ZSwgb2xkVmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIGRlbGV0ZVByb3BlcnR5KHRhcmdldCwga2V5KSB7XHJcbiAgICBjb25zdCBoYWRLZXkgPSBoYXNPd24odGFyZ2V0LCBrZXkpO1xyXG4gICAgY29uc3Qgb2xkVmFsdWUgPSB0YXJnZXRba2V5XTtcclxuICAgIGNvbnN0IHJlc3VsdCA9IFJlZmxlY3QuZGVsZXRlUHJvcGVydHkodGFyZ2V0LCBrZXkpO1xyXG4gICAgaWYgKHJlc3VsdCAmJiBoYWRLZXkpIHtcclxuICAgICAgICB0cmlnZ2VyKHRhcmdldCwgXCJkZWxldGVcIiAvKiBERUxFVEUgKi8sIGtleSwgdW5kZWZpbmVkLCBvbGRWYWx1ZSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcbmZ1bmN0aW9uIGhhcyh0YXJnZXQsIGtleSkge1xyXG4gICAgY29uc3QgcmVzdWx0ID0gUmVmbGVjdC5oYXModGFyZ2V0LCBrZXkpO1xyXG4gICAgaWYgKCFpc1N5bWJvbChrZXkpIHx8ICFidWlsdEluU3ltYm9scy5oYXMoa2V5KSkge1xyXG4gICAgICAgIHRyYWNrKHRhcmdldCwgXCJoYXNcIiAvKiBIQVMgKi8sIGtleSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcbmZ1bmN0aW9uIG93bktleXModGFyZ2V0KSB7XHJcbiAgICB0cmFjayh0YXJnZXQsIFwiaXRlcmF0ZVwiIC8qIElURVJBVEUgKi8sIGlzQXJyYXkodGFyZ2V0KSA/ICdsZW5ndGgnIDogSVRFUkFURV9LRVkpO1xyXG4gICAgcmV0dXJuIFJlZmxlY3Qub3duS2V5cyh0YXJnZXQpO1xyXG59XHJcbmNvbnN0IG11dGFibGVIYW5kbGVycyA9IHtcclxuICAgIGdldCxcclxuICAgIHNldCxcclxuICAgIGRlbGV0ZVByb3BlcnR5LFxyXG4gICAgaGFzLFxyXG4gICAgb3duS2V5c1xyXG59O1xyXG5jb25zdCByZWFkb25seUhhbmRsZXJzID0ge1xyXG4gICAgZ2V0OiByZWFkb25seUdldCxcclxuICAgIHNldCh0YXJnZXQsIGtleSkge1xyXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgY29uc29sZS53YXJuKGBTZXQgb3BlcmF0aW9uIG9uIGtleSBcIiR7U3RyaW5nKGtleSl9XCIgZmFpbGVkOiB0YXJnZXQgaXMgcmVhZG9ubHkuYCwgdGFyZ2V0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9LFxyXG4gICAgZGVsZXRlUHJvcGVydHkodGFyZ2V0LCBrZXkpIHtcclxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihgRGVsZXRlIG9wZXJhdGlvbiBvbiBrZXkgXCIke1N0cmluZyhrZXkpfVwiIGZhaWxlZDogdGFyZ2V0IGlzIHJlYWRvbmx5LmAsIHRhcmdldCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG59O1xyXG5jb25zdCBzaGFsbG93UmVhY3RpdmVIYW5kbGVycyA9IGV4dGVuZCh7fSwgbXV0YWJsZUhhbmRsZXJzLCB7XHJcbiAgICBnZXQ6IHNoYWxsb3dHZXQsXHJcbiAgICBzZXQ6IHNoYWxsb3dTZXRcclxufSk7XHJcbi8vIFByb3BzIGhhbmRsZXJzIGFyZSBzcGVjaWFsIGluIHRoZSBzZW5zZSB0aGF0IGl0IHNob3VsZCBub3QgdW53cmFwIHRvcC1sZXZlbFxyXG4vLyByZWZzIChpbiBvcmRlciB0byBhbGxvdyByZWZzIHRvIGJlIGV4cGxpY2l0bHkgcGFzc2VkIGRvd24pLCBidXQgc2hvdWxkXHJcbi8vIHJldGFpbiB0aGUgcmVhY3Rpdml0eSBvZiB0aGUgbm9ybWFsIHJlYWRvbmx5IG9iamVjdC5cclxuY29uc3Qgc2hhbGxvd1JlYWRvbmx5SGFuZGxlcnMgPSBleHRlbmQoe30sIHJlYWRvbmx5SGFuZGxlcnMsIHtcclxuICAgIGdldDogc2hhbGxvd1JlYWRvbmx5R2V0XHJcbn0pO1xuXG5jb25zdCB0b1JlYWN0aXZlID0gKHZhbHVlKSA9PiBpc09iamVjdCh2YWx1ZSkgPyByZWFjdGl2ZSh2YWx1ZSkgOiB2YWx1ZTtcclxuY29uc3QgdG9SZWFkb25seSA9ICh2YWx1ZSkgPT4gaXNPYmplY3QodmFsdWUpID8gcmVhZG9ubHkodmFsdWUpIDogdmFsdWU7XHJcbmNvbnN0IHRvU2hhbGxvdyA9ICh2YWx1ZSkgPT4gdmFsdWU7XHJcbmNvbnN0IGdldFByb3RvID0gKHYpID0+IFJlZmxlY3QuZ2V0UHJvdG90eXBlT2Yodik7XHJcbmZ1bmN0aW9uIGdldCQxKHRhcmdldCwga2V5LCBpc1JlYWRvbmx5ID0gZmFsc2UsIGlzU2hhbGxvdyA9IGZhbHNlKSB7XHJcbiAgICAvLyAjMTc3MjogcmVhZG9ubHkocmVhY3RpdmUoTWFwKSkgc2hvdWxkIHJldHVybiByZWFkb25seSArIHJlYWN0aXZlIHZlcnNpb25cclxuICAgIC8vIG9mIHRoZSB2YWx1ZVxyXG4gICAgdGFyZ2V0ID0gdGFyZ2V0W1wiX192X3Jhd1wiIC8qIFJBVyAqL107XHJcbiAgICBjb25zdCByYXdUYXJnZXQgPSB0b1Jhdyh0YXJnZXQpO1xyXG4gICAgY29uc3QgcmF3S2V5ID0gdG9SYXcoa2V5KTtcclxuICAgIGlmIChrZXkgIT09IHJhd0tleSkge1xyXG4gICAgICAgICFpc1JlYWRvbmx5ICYmIHRyYWNrKHJhd1RhcmdldCwgXCJnZXRcIiAvKiBHRVQgKi8sIGtleSk7XHJcbiAgICB9XHJcbiAgICAhaXNSZWFkb25seSAmJiB0cmFjayhyYXdUYXJnZXQsIFwiZ2V0XCIgLyogR0VUICovLCByYXdLZXkpO1xyXG4gICAgY29uc3QgeyBoYXMgfSA9IGdldFByb3RvKHJhd1RhcmdldCk7XHJcbiAgICBjb25zdCB3cmFwID0gaXNSZWFkb25seSA/IHRvUmVhZG9ubHkgOiBpc1NoYWxsb3cgPyB0b1NoYWxsb3cgOiB0b1JlYWN0aXZlO1xyXG4gICAgaWYgKGhhcy5jYWxsKHJhd1RhcmdldCwga2V5KSkge1xyXG4gICAgICAgIHJldHVybiB3cmFwKHRhcmdldC5nZXQoa2V5KSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChoYXMuY2FsbChyYXdUYXJnZXQsIHJhd0tleSkpIHtcclxuICAgICAgICByZXR1cm4gd3JhcCh0YXJnZXQuZ2V0KHJhd0tleSkpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGhhcyQxKGtleSwgaXNSZWFkb25seSA9IGZhbHNlKSB7XHJcbiAgICBjb25zdCB0YXJnZXQgPSB0aGlzW1wiX192X3Jhd1wiIC8qIFJBVyAqL107XHJcbiAgICBjb25zdCByYXdUYXJnZXQgPSB0b1Jhdyh0YXJnZXQpO1xyXG4gICAgY29uc3QgcmF3S2V5ID0gdG9SYXcoa2V5KTtcclxuICAgIGlmIChrZXkgIT09IHJhd0tleSkge1xyXG4gICAgICAgICFpc1JlYWRvbmx5ICYmIHRyYWNrKHJhd1RhcmdldCwgXCJoYXNcIiAvKiBIQVMgKi8sIGtleSk7XHJcbiAgICB9XHJcbiAgICAhaXNSZWFkb25seSAmJiB0cmFjayhyYXdUYXJnZXQsIFwiaGFzXCIgLyogSEFTICovLCByYXdLZXkpO1xyXG4gICAgcmV0dXJuIGtleSA9PT0gcmF3S2V5XHJcbiAgICAgICAgPyB0YXJnZXQuaGFzKGtleSlcclxuICAgICAgICA6IHRhcmdldC5oYXMoa2V5KSB8fCB0YXJnZXQuaGFzKHJhd0tleSk7XHJcbn1cclxuZnVuY3Rpb24gc2l6ZSh0YXJnZXQsIGlzUmVhZG9ubHkgPSBmYWxzZSkge1xyXG4gICAgdGFyZ2V0ID0gdGFyZ2V0W1wiX192X3Jhd1wiIC8qIFJBVyAqL107XHJcbiAgICAhaXNSZWFkb25seSAmJiB0cmFjayh0b1Jhdyh0YXJnZXQpLCBcIml0ZXJhdGVcIiAvKiBJVEVSQVRFICovLCBJVEVSQVRFX0tFWSk7XHJcbiAgICByZXR1cm4gUmVmbGVjdC5nZXQodGFyZ2V0LCAnc2l6ZScsIHRhcmdldCk7XHJcbn1cclxuZnVuY3Rpb24gYWRkKHZhbHVlKSB7XHJcbiAgICB2YWx1ZSA9IHRvUmF3KHZhbHVlKTtcclxuICAgIGNvbnN0IHRhcmdldCA9IHRvUmF3KHRoaXMpO1xyXG4gICAgY29uc3QgcHJvdG8gPSBnZXRQcm90byh0YXJnZXQpO1xyXG4gICAgY29uc3QgaGFkS2V5ID0gcHJvdG8uaGFzLmNhbGwodGFyZ2V0LCB2YWx1ZSk7XHJcbiAgICB0YXJnZXQuYWRkKHZhbHVlKTtcclxuICAgIGlmICghaGFkS2V5KSB7XHJcbiAgICAgICAgdHJpZ2dlcih0YXJnZXQsIFwiYWRkXCIgLyogQUREICovLCB2YWx1ZSwgdmFsdWUpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaXM7XHJcbn1cclxuZnVuY3Rpb24gc2V0JDEoa2V5LCB2YWx1ZSkge1xyXG4gICAgdmFsdWUgPSB0b1Jhdyh2YWx1ZSk7XHJcbiAgICBjb25zdCB0YXJnZXQgPSB0b1Jhdyh0aGlzKTtcclxuICAgIGNvbnN0IHsgaGFzLCBnZXQgfSA9IGdldFByb3RvKHRhcmdldCk7XHJcbiAgICBsZXQgaGFkS2V5ID0gaGFzLmNhbGwodGFyZ2V0LCBrZXkpO1xyXG4gICAgaWYgKCFoYWRLZXkpIHtcclxuICAgICAgICBrZXkgPSB0b1JhdyhrZXkpO1xyXG4gICAgICAgIGhhZEtleSA9IGhhcy5jYWxsKHRhcmdldCwga2V5KTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgIGNoZWNrSWRlbnRpdHlLZXlzKHRhcmdldCwgaGFzLCBrZXkpO1xyXG4gICAgfVxyXG4gICAgY29uc3Qgb2xkVmFsdWUgPSBnZXQuY2FsbCh0YXJnZXQsIGtleSk7XHJcbiAgICB0YXJnZXQuc2V0KGtleSwgdmFsdWUpO1xyXG4gICAgaWYgKCFoYWRLZXkpIHtcclxuICAgICAgICB0cmlnZ2VyKHRhcmdldCwgXCJhZGRcIiAvKiBBREQgKi8sIGtleSwgdmFsdWUpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoaGFzQ2hhbmdlZCh2YWx1ZSwgb2xkVmFsdWUpKSB7XHJcbiAgICAgICAgdHJpZ2dlcih0YXJnZXQsIFwic2V0XCIgLyogU0VUICovLCBrZXksIHZhbHVlLCBvbGRWYWx1ZSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGhpcztcclxufVxyXG5mdW5jdGlvbiBkZWxldGVFbnRyeShrZXkpIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IHRvUmF3KHRoaXMpO1xyXG4gICAgY29uc3QgeyBoYXMsIGdldCB9ID0gZ2V0UHJvdG8odGFyZ2V0KTtcclxuICAgIGxldCBoYWRLZXkgPSBoYXMuY2FsbCh0YXJnZXQsIGtleSk7XHJcbiAgICBpZiAoIWhhZEtleSkge1xyXG4gICAgICAgIGtleSA9IHRvUmF3KGtleSk7XHJcbiAgICAgICAgaGFkS2V5ID0gaGFzLmNhbGwodGFyZ2V0LCBrZXkpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgY2hlY2tJZGVudGl0eUtleXModGFyZ2V0LCBoYXMsIGtleSk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBvbGRWYWx1ZSA9IGdldCA/IGdldC5jYWxsKHRhcmdldCwga2V5KSA6IHVuZGVmaW5lZDtcclxuICAgIC8vIGZvcndhcmQgdGhlIG9wZXJhdGlvbiBiZWZvcmUgcXVldWVpbmcgcmVhY3Rpb25zXHJcbiAgICBjb25zdCByZXN1bHQgPSB0YXJnZXQuZGVsZXRlKGtleSk7XHJcbiAgICBpZiAoaGFkS2V5KSB7XHJcbiAgICAgICAgdHJpZ2dlcih0YXJnZXQsIFwiZGVsZXRlXCIgLyogREVMRVRFICovLCBrZXksIHVuZGVmaW5lZCwgb2xkVmFsdWUpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5mdW5jdGlvbiBjbGVhcigpIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IHRvUmF3KHRoaXMpO1xyXG4gICAgY29uc3QgaGFkSXRlbXMgPSB0YXJnZXQuc2l6ZSAhPT0gMDtcclxuICAgIGNvbnN0IG9sZFRhcmdldCA9IChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKVxyXG4gICAgICAgID8gaXNNYXAodGFyZ2V0KVxyXG4gICAgICAgICAgICA/IG5ldyBNYXAodGFyZ2V0KVxyXG4gICAgICAgICAgICA6IG5ldyBTZXQodGFyZ2V0KVxyXG4gICAgICAgIDogdW5kZWZpbmVkO1xyXG4gICAgLy8gZm9yd2FyZCB0aGUgb3BlcmF0aW9uIGJlZm9yZSBxdWV1ZWluZyByZWFjdGlvbnNcclxuICAgIGNvbnN0IHJlc3VsdCA9IHRhcmdldC5jbGVhcigpO1xyXG4gICAgaWYgKGhhZEl0ZW1zKSB7XHJcbiAgICAgICAgdHJpZ2dlcih0YXJnZXQsIFwiY2xlYXJcIiAvKiBDTEVBUiAqLywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIG9sZFRhcmdldCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcbmZ1bmN0aW9uIGNyZWF0ZUZvckVhY2goaXNSZWFkb25seSwgaXNTaGFsbG93KSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFjaywgdGhpc0FyZykge1xyXG4gICAgICAgIGNvbnN0IG9ic2VydmVkID0gdGhpcztcclxuICAgICAgICBjb25zdCB0YXJnZXQgPSBvYnNlcnZlZFtcIl9fdl9yYXdcIiAvKiBSQVcgKi9dO1xyXG4gICAgICAgIGNvbnN0IHJhd1RhcmdldCA9IHRvUmF3KHRhcmdldCk7XHJcbiAgICAgICAgY29uc3Qgd3JhcCA9IGlzUmVhZG9ubHkgPyB0b1JlYWRvbmx5IDogaXNTaGFsbG93ID8gdG9TaGFsbG93IDogdG9SZWFjdGl2ZTtcclxuICAgICAgICAhaXNSZWFkb25seSAmJiB0cmFjayhyYXdUYXJnZXQsIFwiaXRlcmF0ZVwiIC8qIElURVJBVEUgKi8sIElURVJBVEVfS0VZKTtcclxuICAgICAgICByZXR1cm4gdGFyZ2V0LmZvckVhY2goKHZhbHVlLCBrZXkpID0+IHtcclxuICAgICAgICAgICAgLy8gaW1wb3J0YW50OiBtYWtlIHN1cmUgdGhlIGNhbGxiYWNrIGlzXHJcbiAgICAgICAgICAgIC8vIDEuIGludm9rZWQgd2l0aCB0aGUgcmVhY3RpdmUgbWFwIGFzIGB0aGlzYCBhbmQgM3JkIGFyZ1xyXG4gICAgICAgICAgICAvLyAyLiB0aGUgdmFsdWUgcmVjZWl2ZWQgc2hvdWxkIGJlIGEgY29ycmVzcG9uZGluZyByZWFjdGl2ZS9yZWFkb25seS5cclxuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrLmNhbGwodGhpc0FyZywgd3JhcCh2YWx1ZSksIHdyYXAoa2V5KSwgb2JzZXJ2ZWQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiBjcmVhdGVJdGVyYWJsZU1ldGhvZChtZXRob2QsIGlzUmVhZG9ubHksIGlzU2hhbGxvdykge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICguLi5hcmdzKSB7XHJcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gdGhpc1tcIl9fdl9yYXdcIiAvKiBSQVcgKi9dO1xyXG4gICAgICAgIGNvbnN0IHJhd1RhcmdldCA9IHRvUmF3KHRhcmdldCk7XHJcbiAgICAgICAgY29uc3QgdGFyZ2V0SXNNYXAgPSBpc01hcChyYXdUYXJnZXQpO1xyXG4gICAgICAgIGNvbnN0IGlzUGFpciA9IG1ldGhvZCA9PT0gJ2VudHJpZXMnIHx8IChtZXRob2QgPT09IFN5bWJvbC5pdGVyYXRvciAmJiB0YXJnZXRJc01hcCk7XHJcbiAgICAgICAgY29uc3QgaXNLZXlPbmx5ID0gbWV0aG9kID09PSAna2V5cycgJiYgdGFyZ2V0SXNNYXA7XHJcbiAgICAgICAgY29uc3QgaW5uZXJJdGVyYXRvciA9IHRhcmdldFttZXRob2RdKC4uLmFyZ3MpO1xyXG4gICAgICAgIGNvbnN0IHdyYXAgPSBpc1JlYWRvbmx5ID8gdG9SZWFkb25seSA6IGlzU2hhbGxvdyA/IHRvU2hhbGxvdyA6IHRvUmVhY3RpdmU7XHJcbiAgICAgICAgIWlzUmVhZG9ubHkgJiZcclxuICAgICAgICAgICAgdHJhY2socmF3VGFyZ2V0LCBcIml0ZXJhdGVcIiAvKiBJVEVSQVRFICovLCBpc0tleU9ubHkgPyBNQVBfS0VZX0lURVJBVEVfS0VZIDogSVRFUkFURV9LRVkpO1xyXG4gICAgICAgIC8vIHJldHVybiBhIHdyYXBwZWQgaXRlcmF0b3Igd2hpY2ggcmV0dXJucyBvYnNlcnZlZCB2ZXJzaW9ucyBvZiB0aGVcclxuICAgICAgICAvLyB2YWx1ZXMgZW1pdHRlZCBmcm9tIHRoZSByZWFsIGl0ZXJhdG9yXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgLy8gaXRlcmF0b3IgcHJvdG9jb2xcclxuICAgICAgICAgICAgbmV4dCgpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHsgdmFsdWUsIGRvbmUgfSA9IGlubmVySXRlcmF0b3IubmV4dCgpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRvbmVcclxuICAgICAgICAgICAgICAgICAgICA/IHsgdmFsdWUsIGRvbmUgfVxyXG4gICAgICAgICAgICAgICAgICAgIDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogaXNQYWlyID8gW3dyYXAodmFsdWVbMF0pLCB3cmFwKHZhbHVlWzFdKV0gOiB3cmFwKHZhbHVlKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZG9uZVxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIC8vIGl0ZXJhYmxlIHByb3RvY29sXHJcbiAgICAgICAgICAgIFtTeW1ib2wuaXRlcmF0b3JdKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiBjcmVhdGVSZWFkb25seU1ldGhvZCh0eXBlKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKC4uLmFyZ3MpIHtcclxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGtleSA9IGFyZ3NbMF0gPyBgb24ga2V5IFwiJHthcmdzWzBdfVwiIGAgOiBgYDtcclxuICAgICAgICAgICAgY29uc29sZS53YXJuKGAke2NhcGl0YWxpemUodHlwZSl9IG9wZXJhdGlvbiAke2tleX1mYWlsZWQ6IHRhcmdldCBpcyByZWFkb25seS5gLCB0b1Jhdyh0aGlzKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0eXBlID09PSBcImRlbGV0ZVwiIC8qIERFTEVURSAqLyA/IGZhbHNlIDogdGhpcztcclxuICAgIH07XHJcbn1cclxuY29uc3QgbXV0YWJsZUluc3RydW1lbnRhdGlvbnMgPSB7XHJcbiAgICBnZXQoa2V5KSB7XHJcbiAgICAgICAgcmV0dXJuIGdldCQxKHRoaXMsIGtleSk7XHJcbiAgICB9LFxyXG4gICAgZ2V0IHNpemUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHNpemUodGhpcyk7XHJcbiAgICB9LFxyXG4gICAgaGFzOiBoYXMkMSxcclxuICAgIGFkZCxcclxuICAgIHNldDogc2V0JDEsXHJcbiAgICBkZWxldGU6IGRlbGV0ZUVudHJ5LFxyXG4gICAgY2xlYXIsXHJcbiAgICBmb3JFYWNoOiBjcmVhdGVGb3JFYWNoKGZhbHNlLCBmYWxzZSlcclxufTtcclxuY29uc3Qgc2hhbGxvd0luc3RydW1lbnRhdGlvbnMgPSB7XHJcbiAgICBnZXQoa2V5KSB7XHJcbiAgICAgICAgcmV0dXJuIGdldCQxKHRoaXMsIGtleSwgZmFsc2UsIHRydWUpO1xyXG4gICAgfSxcclxuICAgIGdldCBzaXplKCkge1xyXG4gICAgICAgIHJldHVybiBzaXplKHRoaXMpO1xyXG4gICAgfSxcclxuICAgIGhhczogaGFzJDEsXHJcbiAgICBhZGQsXHJcbiAgICBzZXQ6IHNldCQxLFxyXG4gICAgZGVsZXRlOiBkZWxldGVFbnRyeSxcclxuICAgIGNsZWFyLFxyXG4gICAgZm9yRWFjaDogY3JlYXRlRm9yRWFjaChmYWxzZSwgdHJ1ZSlcclxufTtcclxuY29uc3QgcmVhZG9ubHlJbnN0cnVtZW50YXRpb25zID0ge1xyXG4gICAgZ2V0KGtleSkge1xyXG4gICAgICAgIHJldHVybiBnZXQkMSh0aGlzLCBrZXksIHRydWUpO1xyXG4gICAgfSxcclxuICAgIGdldCBzaXplKCkge1xyXG4gICAgICAgIHJldHVybiBzaXplKHRoaXMsIHRydWUpO1xyXG4gICAgfSxcclxuICAgIGhhcyhrZXkpIHtcclxuICAgICAgICByZXR1cm4gaGFzJDEuY2FsbCh0aGlzLCBrZXksIHRydWUpO1xyXG4gICAgfSxcclxuICAgIGFkZDogY3JlYXRlUmVhZG9ubHlNZXRob2QoXCJhZGRcIiAvKiBBREQgKi8pLFxyXG4gICAgc2V0OiBjcmVhdGVSZWFkb25seU1ldGhvZChcInNldFwiIC8qIFNFVCAqLyksXHJcbiAgICBkZWxldGU6IGNyZWF0ZVJlYWRvbmx5TWV0aG9kKFwiZGVsZXRlXCIgLyogREVMRVRFICovKSxcclxuICAgIGNsZWFyOiBjcmVhdGVSZWFkb25seU1ldGhvZChcImNsZWFyXCIgLyogQ0xFQVIgKi8pLFxyXG4gICAgZm9yRWFjaDogY3JlYXRlRm9yRWFjaCh0cnVlLCBmYWxzZSlcclxufTtcclxuY29uc3QgaXRlcmF0b3JNZXRob2RzID0gWydrZXlzJywgJ3ZhbHVlcycsICdlbnRyaWVzJywgU3ltYm9sLml0ZXJhdG9yXTtcclxuaXRlcmF0b3JNZXRob2RzLmZvckVhY2gobWV0aG9kID0+IHtcclxuICAgIG11dGFibGVJbnN0cnVtZW50YXRpb25zW21ldGhvZF0gPSBjcmVhdGVJdGVyYWJsZU1ldGhvZChtZXRob2QsIGZhbHNlLCBmYWxzZSk7XHJcbiAgICByZWFkb25seUluc3RydW1lbnRhdGlvbnNbbWV0aG9kXSA9IGNyZWF0ZUl0ZXJhYmxlTWV0aG9kKG1ldGhvZCwgdHJ1ZSwgZmFsc2UpO1xyXG4gICAgc2hhbGxvd0luc3RydW1lbnRhdGlvbnNbbWV0aG9kXSA9IGNyZWF0ZUl0ZXJhYmxlTWV0aG9kKG1ldGhvZCwgZmFsc2UsIHRydWUpO1xyXG59KTtcclxuZnVuY3Rpb24gY3JlYXRlSW5zdHJ1bWVudGF0aW9uR2V0dGVyKGlzUmVhZG9ubHksIHNoYWxsb3cpIHtcclxuICAgIGNvbnN0IGluc3RydW1lbnRhdGlvbnMgPSBzaGFsbG93XHJcbiAgICAgICAgPyBzaGFsbG93SW5zdHJ1bWVudGF0aW9uc1xyXG4gICAgICAgIDogaXNSZWFkb25seVxyXG4gICAgICAgICAgICA/IHJlYWRvbmx5SW5zdHJ1bWVudGF0aW9uc1xyXG4gICAgICAgICAgICA6IG11dGFibGVJbnN0cnVtZW50YXRpb25zO1xyXG4gICAgcmV0dXJuICh0YXJnZXQsIGtleSwgcmVjZWl2ZXIpID0+IHtcclxuICAgICAgICBpZiAoa2V5ID09PSBcIl9fdl9pc1JlYWN0aXZlXCIgLyogSVNfUkVBQ1RJVkUgKi8pIHtcclxuICAgICAgICAgICAgcmV0dXJuICFpc1JlYWRvbmx5O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChrZXkgPT09IFwiX192X2lzUmVhZG9ubHlcIiAvKiBJU19SRUFET05MWSAqLykge1xyXG4gICAgICAgICAgICByZXR1cm4gaXNSZWFkb25seTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoa2V5ID09PSBcIl9fdl9yYXdcIiAvKiBSQVcgKi8pIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRhcmdldDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFJlZmxlY3QuZ2V0KGhhc093bihpbnN0cnVtZW50YXRpb25zLCBrZXkpICYmIGtleSBpbiB0YXJnZXRcclxuICAgICAgICAgICAgPyBpbnN0cnVtZW50YXRpb25zXHJcbiAgICAgICAgICAgIDogdGFyZ2V0LCBrZXksIHJlY2VpdmVyKTtcclxuICAgIH07XHJcbn1cclxuY29uc3QgbXV0YWJsZUNvbGxlY3Rpb25IYW5kbGVycyA9IHtcclxuICAgIGdldDogY3JlYXRlSW5zdHJ1bWVudGF0aW9uR2V0dGVyKGZhbHNlLCBmYWxzZSlcclxufTtcclxuY29uc3Qgc2hhbGxvd0NvbGxlY3Rpb25IYW5kbGVycyA9IHtcclxuICAgIGdldDogY3JlYXRlSW5zdHJ1bWVudGF0aW9uR2V0dGVyKGZhbHNlLCB0cnVlKVxyXG59O1xyXG5jb25zdCByZWFkb25seUNvbGxlY3Rpb25IYW5kbGVycyA9IHtcclxuICAgIGdldDogY3JlYXRlSW5zdHJ1bWVudGF0aW9uR2V0dGVyKHRydWUsIGZhbHNlKVxyXG59O1xyXG5mdW5jdGlvbiBjaGVja0lkZW50aXR5S2V5cyh0YXJnZXQsIGhhcywga2V5KSB7XHJcbiAgICBjb25zdCByYXdLZXkgPSB0b1JhdyhrZXkpO1xyXG4gICAgaWYgKHJhd0tleSAhPT0ga2V5ICYmIGhhcy5jYWxsKHRhcmdldCwgcmF3S2V5KSkge1xyXG4gICAgICAgIGNvbnN0IHR5cGUgPSB0b1Jhd1R5cGUodGFyZ2V0KTtcclxuICAgICAgICBjb25zb2xlLndhcm4oYFJlYWN0aXZlICR7dHlwZX0gY29udGFpbnMgYm90aCB0aGUgcmF3IGFuZCByZWFjdGl2ZSBgICtcclxuICAgICAgICAgICAgYHZlcnNpb25zIG9mIHRoZSBzYW1lIG9iamVjdCR7dHlwZSA9PT0gYE1hcGAgPyBgIGFzIGtleXNgIDogYGB9LCBgICtcclxuICAgICAgICAgICAgYHdoaWNoIGNhbiBsZWFkIHRvIGluY29uc2lzdGVuY2llcy4gYCArXHJcbiAgICAgICAgICAgIGBBdm9pZCBkaWZmZXJlbnRpYXRpbmcgYmV0d2VlbiB0aGUgcmF3IGFuZCByZWFjdGl2ZSB2ZXJzaW9ucyBgICtcclxuICAgICAgICAgICAgYG9mIGFuIG9iamVjdCBhbmQgb25seSB1c2UgdGhlIHJlYWN0aXZlIHZlcnNpb24gaWYgcG9zc2libGUuYCk7XHJcbiAgICB9XHJcbn1cblxuY29uc3QgcmVhY3RpdmVNYXAgPSBuZXcgV2Vha01hcCgpO1xyXG5jb25zdCByZWFkb25seU1hcCA9IG5ldyBXZWFrTWFwKCk7XHJcbmZ1bmN0aW9uIHRhcmdldFR5cGVNYXAocmF3VHlwZSkge1xyXG4gICAgc3dpdGNoIChyYXdUeXBlKSB7XHJcbiAgICAgICAgY2FzZSAnT2JqZWN0JzpcclxuICAgICAgICBjYXNlICdBcnJheSc6XHJcbiAgICAgICAgICAgIHJldHVybiAxIC8qIENPTU1PTiAqLztcclxuICAgICAgICBjYXNlICdNYXAnOlxyXG4gICAgICAgIGNhc2UgJ1NldCc6XHJcbiAgICAgICAgY2FzZSAnV2Vha01hcCc6XHJcbiAgICAgICAgY2FzZSAnV2Vha1NldCc6XHJcbiAgICAgICAgICAgIHJldHVybiAyIC8qIENPTExFQ1RJT04gKi87XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgcmV0dXJuIDAgLyogSU5WQUxJRCAqLztcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBnZXRUYXJnZXRUeXBlKHZhbHVlKSB7XHJcbiAgICByZXR1cm4gdmFsdWVbXCJfX3Zfc2tpcFwiIC8qIFNLSVAgKi9dIHx8ICFPYmplY3QuaXNFeHRlbnNpYmxlKHZhbHVlKVxyXG4gICAgICAgID8gMCAvKiBJTlZBTElEICovXHJcbiAgICAgICAgOiB0YXJnZXRUeXBlTWFwKHRvUmF3VHlwZSh2YWx1ZSkpO1xyXG59XHJcbmZ1bmN0aW9uIHJlYWN0aXZlKHRhcmdldCkge1xyXG4gICAgLy8gaWYgdHJ5aW5nIHRvIG9ic2VydmUgYSByZWFkb25seSBwcm94eSwgcmV0dXJuIHRoZSByZWFkb25seSB2ZXJzaW9uLlxyXG4gICAgaWYgKHRhcmdldCAmJiB0YXJnZXRbXCJfX3ZfaXNSZWFkb25seVwiIC8qIElTX1JFQURPTkxZICovXSkge1xyXG4gICAgICAgIHJldHVybiB0YXJnZXQ7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gY3JlYXRlUmVhY3RpdmVPYmplY3QodGFyZ2V0LCBmYWxzZSwgbXV0YWJsZUhhbmRsZXJzLCBtdXRhYmxlQ29sbGVjdGlvbkhhbmRsZXJzKTtcclxufVxyXG4vKipcclxuICogUmV0dXJuIGEgc2hhbGxvd2x5LXJlYWN0aXZlIGNvcHkgb2YgdGhlIG9yaWdpbmFsIG9iamVjdCwgd2hlcmUgb25seSB0aGUgcm9vdFxyXG4gKiBsZXZlbCBwcm9wZXJ0aWVzIGFyZSByZWFjdGl2ZS4gSXQgYWxzbyBkb2VzIG5vdCBhdXRvLXVud3JhcCByZWZzIChldmVuIGF0IHRoZVxyXG4gKiByb290IGxldmVsKS5cclxuICovXHJcbmZ1bmN0aW9uIHNoYWxsb3dSZWFjdGl2ZSh0YXJnZXQpIHtcclxuICAgIHJldHVybiBjcmVhdGVSZWFjdGl2ZU9iamVjdCh0YXJnZXQsIGZhbHNlLCBzaGFsbG93UmVhY3RpdmVIYW5kbGVycywgc2hhbGxvd0NvbGxlY3Rpb25IYW5kbGVycyk7XHJcbn1cclxuLyoqXHJcbiAqIENyZWF0ZXMgYSByZWFkb25seSBjb3B5IG9mIHRoZSBvcmlnaW5hbCBvYmplY3QuIE5vdGUgdGhlIHJldHVybmVkIGNvcHkgaXMgbm90XHJcbiAqIG1hZGUgcmVhY3RpdmUsIGJ1dCBgcmVhZG9ubHlgIGNhbiBiZSBjYWxsZWQgb24gYW4gYWxyZWFkeSByZWFjdGl2ZSBvYmplY3QuXHJcbiAqL1xyXG5mdW5jdGlvbiByZWFkb25seSh0YXJnZXQpIHtcclxuICAgIHJldHVybiBjcmVhdGVSZWFjdGl2ZU9iamVjdCh0YXJnZXQsIHRydWUsIHJlYWRvbmx5SGFuZGxlcnMsIHJlYWRvbmx5Q29sbGVjdGlvbkhhbmRsZXJzKTtcclxufVxyXG4vKipcclxuICogUmV0dXJucyBhIHJlYWN0aXZlLWNvcHkgb2YgdGhlIG9yaWdpbmFsIG9iamVjdCwgd2hlcmUgb25seSB0aGUgcm9vdCBsZXZlbFxyXG4gKiBwcm9wZXJ0aWVzIGFyZSByZWFkb25seSwgYW5kIGRvZXMgTk9UIHVud3JhcCByZWZzIG5vciByZWN1cnNpdmVseSBjb252ZXJ0XHJcbiAqIHJldHVybmVkIHByb3BlcnRpZXMuXHJcbiAqIFRoaXMgaXMgdXNlZCBmb3IgY3JlYXRpbmcgdGhlIHByb3BzIHByb3h5IG9iamVjdCBmb3Igc3RhdGVmdWwgY29tcG9uZW50cy5cclxuICovXHJcbmZ1bmN0aW9uIHNoYWxsb3dSZWFkb25seSh0YXJnZXQpIHtcclxuICAgIHJldHVybiBjcmVhdGVSZWFjdGl2ZU9iamVjdCh0YXJnZXQsIHRydWUsIHNoYWxsb3dSZWFkb25seUhhbmRsZXJzLCByZWFkb25seUNvbGxlY3Rpb25IYW5kbGVycyk7XHJcbn1cclxuZnVuY3Rpb24gY3JlYXRlUmVhY3RpdmVPYmplY3QodGFyZ2V0LCBpc1JlYWRvbmx5LCBiYXNlSGFuZGxlcnMsIGNvbGxlY3Rpb25IYW5kbGVycykge1xyXG4gICAgaWYgKCFpc09iamVjdCh0YXJnZXQpKSB7XHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYHZhbHVlIGNhbm5vdCBiZSBtYWRlIHJlYWN0aXZlOiAke1N0cmluZyh0YXJnZXQpfWApO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGFyZ2V0O1xyXG4gICAgfVxyXG4gICAgLy8gdGFyZ2V0IGlzIGFscmVhZHkgYSBQcm94eSwgcmV0dXJuIGl0LlxyXG4gICAgLy8gZXhjZXB0aW9uOiBjYWxsaW5nIHJlYWRvbmx5KCkgb24gYSByZWFjdGl2ZSBvYmplY3RcclxuICAgIGlmICh0YXJnZXRbXCJfX3ZfcmF3XCIgLyogUkFXICovXSAmJlxyXG4gICAgICAgICEoaXNSZWFkb25seSAmJiB0YXJnZXRbXCJfX3ZfaXNSZWFjdGl2ZVwiIC8qIElTX1JFQUNUSVZFICovXSkpIHtcclxuICAgICAgICByZXR1cm4gdGFyZ2V0O1xyXG4gICAgfVxyXG4gICAgLy8gdGFyZ2V0IGFscmVhZHkgaGFzIGNvcnJlc3BvbmRpbmcgUHJveHlcclxuICAgIGNvbnN0IHByb3h5TWFwID0gaXNSZWFkb25seSA/IHJlYWRvbmx5TWFwIDogcmVhY3RpdmVNYXA7XHJcbiAgICBjb25zdCBleGlzdGluZ1Byb3h5ID0gcHJveHlNYXAuZ2V0KHRhcmdldCk7XHJcbiAgICBpZiAoZXhpc3RpbmdQcm94eSkge1xyXG4gICAgICAgIHJldHVybiBleGlzdGluZ1Byb3h5O1xyXG4gICAgfVxyXG4gICAgLy8gb25seSBhIHdoaXRlbGlzdCBvZiB2YWx1ZSB0eXBlcyBjYW4gYmUgb2JzZXJ2ZWQuXHJcbiAgICBjb25zdCB0YXJnZXRUeXBlID0gZ2V0VGFyZ2V0VHlwZSh0YXJnZXQpO1xyXG4gICAgaWYgKHRhcmdldFR5cGUgPT09IDAgLyogSU5WQUxJRCAqLykge1xyXG4gICAgICAgIHJldHVybiB0YXJnZXQ7XHJcbiAgICB9XHJcbiAgICBjb25zdCBwcm94eSA9IG5ldyBQcm94eSh0YXJnZXQsIHRhcmdldFR5cGUgPT09IDIgLyogQ09MTEVDVElPTiAqLyA/IGNvbGxlY3Rpb25IYW5kbGVycyA6IGJhc2VIYW5kbGVycyk7XHJcbiAgICBwcm94eU1hcC5zZXQodGFyZ2V0LCBwcm94eSk7XHJcbiAgICByZXR1cm4gcHJveHk7XHJcbn1cclxuZnVuY3Rpb24gaXNSZWFjdGl2ZSh2YWx1ZSkge1xyXG4gICAgaWYgKGlzUmVhZG9ubHkodmFsdWUpKSB7XHJcbiAgICAgICAgcmV0dXJuIGlzUmVhY3RpdmUodmFsdWVbXCJfX3ZfcmF3XCIgLyogUkFXICovXSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gISEodmFsdWUgJiYgdmFsdWVbXCJfX3ZfaXNSZWFjdGl2ZVwiIC8qIElTX1JFQUNUSVZFICovXSk7XHJcbn1cclxuZnVuY3Rpb24gaXNSZWFkb25seSh2YWx1ZSkge1xyXG4gICAgcmV0dXJuICEhKHZhbHVlICYmIHZhbHVlW1wiX192X2lzUmVhZG9ubHlcIiAvKiBJU19SRUFET05MWSAqL10pO1xyXG59XHJcbmZ1bmN0aW9uIGlzUHJveHkodmFsdWUpIHtcclxuICAgIHJldHVybiBpc1JlYWN0aXZlKHZhbHVlKSB8fCBpc1JlYWRvbmx5KHZhbHVlKTtcclxufVxyXG5mdW5jdGlvbiB0b1JhdyhvYnNlcnZlZCkge1xyXG4gICAgcmV0dXJuICgob2JzZXJ2ZWQgJiYgdG9SYXcob2JzZXJ2ZWRbXCJfX3ZfcmF3XCIgLyogUkFXICovXSkpIHx8IG9ic2VydmVkKTtcclxufVxyXG5mdW5jdGlvbiBtYXJrUmF3KHZhbHVlKSB7XHJcbiAgICBkZWYodmFsdWUsIFwiX192X3NraXBcIiAvKiBTS0lQICovLCB0cnVlKTtcclxuICAgIHJldHVybiB2YWx1ZTtcclxufVxuXG5jb25zdCBjb252ZXJ0ID0gKHZhbCkgPT4gaXNPYmplY3QodmFsKSA/IHJlYWN0aXZlKHZhbCkgOiB2YWw7XHJcbmZ1bmN0aW9uIGlzUmVmKHIpIHtcclxuICAgIHJldHVybiBCb29sZWFuKHIgJiYgci5fX3ZfaXNSZWYgPT09IHRydWUpO1xyXG59XHJcbmZ1bmN0aW9uIHJlZih2YWx1ZSkge1xyXG4gICAgcmV0dXJuIGNyZWF0ZVJlZih2YWx1ZSk7XHJcbn1cclxuZnVuY3Rpb24gc2hhbGxvd1JlZih2YWx1ZSkge1xyXG4gICAgcmV0dXJuIGNyZWF0ZVJlZih2YWx1ZSwgdHJ1ZSk7XHJcbn1cclxuY2xhc3MgUmVmSW1wbCB7XHJcbiAgICBjb25zdHJ1Y3RvcihfcmF3VmFsdWUsIF9zaGFsbG93ID0gZmFsc2UpIHtcclxuICAgICAgICB0aGlzLl9yYXdWYWx1ZSA9IF9yYXdWYWx1ZTtcclxuICAgICAgICB0aGlzLl9zaGFsbG93ID0gX3NoYWxsb3c7XHJcbiAgICAgICAgdGhpcy5fX3ZfaXNSZWYgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuX3ZhbHVlID0gX3NoYWxsb3cgPyBfcmF3VmFsdWUgOiBjb252ZXJ0KF9yYXdWYWx1ZSk7XHJcbiAgICB9XHJcbiAgICBnZXQgdmFsdWUoKSB7XHJcbiAgICAgICAgdHJhY2sodG9SYXcodGhpcyksIFwiZ2V0XCIgLyogR0VUICovLCAndmFsdWUnKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5fdmFsdWU7XHJcbiAgICB9XHJcbiAgICBzZXQgdmFsdWUobmV3VmFsKSB7XHJcbiAgICAgICAgaWYgKGhhc0NoYW5nZWQodG9SYXcobmV3VmFsKSwgdGhpcy5fcmF3VmFsdWUpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3Jhd1ZhbHVlID0gbmV3VmFsO1xyXG4gICAgICAgICAgICB0aGlzLl92YWx1ZSA9IHRoaXMuX3NoYWxsb3cgPyBuZXdWYWwgOiBjb252ZXJ0KG5ld1ZhbCk7XHJcbiAgICAgICAgICAgIHRyaWdnZXIodG9SYXcodGhpcyksIFwic2V0XCIgLyogU0VUICovLCAndmFsdWUnLCBuZXdWYWwpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBjcmVhdGVSZWYocmF3VmFsdWUsIHNoYWxsb3cgPSBmYWxzZSkge1xyXG4gICAgaWYgKGlzUmVmKHJhd1ZhbHVlKSkge1xyXG4gICAgICAgIHJldHVybiByYXdWYWx1ZTtcclxuICAgIH1cclxuICAgIHJldHVybiBuZXcgUmVmSW1wbChyYXdWYWx1ZSwgc2hhbGxvdyk7XHJcbn1cclxuZnVuY3Rpb24gdHJpZ2dlclJlZihyZWYpIHtcclxuICAgIHRyaWdnZXIodG9SYXcocmVmKSwgXCJzZXRcIiAvKiBTRVQgKi8sICd2YWx1ZScsIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSA/IHJlZi52YWx1ZSA6IHZvaWQgMCk7XHJcbn1cclxuZnVuY3Rpb24gdW5yZWYocmVmKSB7XHJcbiAgICByZXR1cm4gaXNSZWYocmVmKSA/IHJlZi52YWx1ZSA6IHJlZjtcclxufVxyXG5jb25zdCBzaGFsbG93VW53cmFwSGFuZGxlcnMgPSB7XHJcbiAgICBnZXQ6ICh0YXJnZXQsIGtleSwgcmVjZWl2ZXIpID0+IHVucmVmKFJlZmxlY3QuZ2V0KHRhcmdldCwga2V5LCByZWNlaXZlcikpLFxyXG4gICAgc2V0OiAodGFyZ2V0LCBrZXksIHZhbHVlLCByZWNlaXZlcikgPT4ge1xyXG4gICAgICAgIGNvbnN0IG9sZFZhbHVlID0gdGFyZ2V0W2tleV07XHJcbiAgICAgICAgaWYgKGlzUmVmKG9sZFZhbHVlKSAmJiAhaXNSZWYodmFsdWUpKSB7XHJcbiAgICAgICAgICAgIG9sZFZhbHVlLnZhbHVlID0gdmFsdWU7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIFJlZmxlY3Quc2V0KHRhcmdldCwga2V5LCB2YWx1ZSwgcmVjZWl2ZXIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufTtcclxuZnVuY3Rpb24gcHJveHlSZWZzKG9iamVjdFdpdGhSZWZzKSB7XHJcbiAgICByZXR1cm4gaXNSZWFjdGl2ZShvYmplY3RXaXRoUmVmcylcclxuICAgICAgICA/IG9iamVjdFdpdGhSZWZzXHJcbiAgICAgICAgOiBuZXcgUHJveHkob2JqZWN0V2l0aFJlZnMsIHNoYWxsb3dVbndyYXBIYW5kbGVycyk7XHJcbn1cclxuY2xhc3MgQ3VzdG9tUmVmSW1wbCB7XHJcbiAgICBjb25zdHJ1Y3RvcihmYWN0b3J5KSB7XHJcbiAgICAgICAgdGhpcy5fX3ZfaXNSZWYgPSB0cnVlO1xyXG4gICAgICAgIGNvbnN0IHsgZ2V0LCBzZXQgfSA9IGZhY3RvcnkoKCkgPT4gdHJhY2sodGhpcywgXCJnZXRcIiAvKiBHRVQgKi8sICd2YWx1ZScpLCAoKSA9PiB0cmlnZ2VyKHRoaXMsIFwic2V0XCIgLyogU0VUICovLCAndmFsdWUnKSk7XHJcbiAgICAgICAgdGhpcy5fZ2V0ID0gZ2V0O1xyXG4gICAgICAgIHRoaXMuX3NldCA9IHNldDtcclxuICAgIH1cclxuICAgIGdldCB2YWx1ZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0KCk7XHJcbiAgICB9XHJcbiAgICBzZXQgdmFsdWUobmV3VmFsKSB7XHJcbiAgICAgICAgdGhpcy5fc2V0KG5ld1ZhbCk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gY3VzdG9tUmVmKGZhY3RvcnkpIHtcclxuICAgIHJldHVybiBuZXcgQ3VzdG9tUmVmSW1wbChmYWN0b3J5KTtcclxufVxyXG5mdW5jdGlvbiB0b1JlZnMob2JqZWN0KSB7XHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFpc1Byb3h5KG9iamVjdCkpIHtcclxuICAgICAgICBjb25zb2xlLndhcm4oYHRvUmVmcygpIGV4cGVjdHMgYSByZWFjdGl2ZSBvYmplY3QgYnV0IHJlY2VpdmVkIGEgcGxhaW4gb25lLmApO1xyXG4gICAgfVxyXG4gICAgY29uc3QgcmV0ID0gaXNBcnJheShvYmplY3QpID8gbmV3IEFycmF5KG9iamVjdC5sZW5ndGgpIDoge307XHJcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBvYmplY3QpIHtcclxuICAgICAgICByZXRba2V5XSA9IHRvUmVmKG9iamVjdCwga2V5KTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXQ7XHJcbn1cclxuY2xhc3MgT2JqZWN0UmVmSW1wbCB7XHJcbiAgICBjb25zdHJ1Y3Rvcihfb2JqZWN0LCBfa2V5KSB7XHJcbiAgICAgICAgdGhpcy5fb2JqZWN0ID0gX29iamVjdDtcclxuICAgICAgICB0aGlzLl9rZXkgPSBfa2V5O1xyXG4gICAgICAgIHRoaXMuX192X2lzUmVmID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIGdldCB2YWx1ZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fb2JqZWN0W3RoaXMuX2tleV07XHJcbiAgICB9XHJcbiAgICBzZXQgdmFsdWUobmV3VmFsKSB7XHJcbiAgICAgICAgdGhpcy5fb2JqZWN0W3RoaXMuX2tleV0gPSBuZXdWYWw7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gdG9SZWYob2JqZWN0LCBrZXkpIHtcclxuICAgIHJldHVybiBpc1JlZihvYmplY3Rba2V5XSlcclxuICAgICAgICA/IG9iamVjdFtrZXldXHJcbiAgICAgICAgOiBuZXcgT2JqZWN0UmVmSW1wbChvYmplY3QsIGtleSk7XHJcbn1cblxuY2xhc3MgQ29tcHV0ZWRSZWZJbXBsIHtcclxuICAgIGNvbnN0cnVjdG9yKGdldHRlciwgX3NldHRlciwgaXNSZWFkb25seSkge1xyXG4gICAgICAgIHRoaXMuX3NldHRlciA9IF9zZXR0ZXI7XHJcbiAgICAgICAgdGhpcy5fZGlydHkgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuX192X2lzUmVmID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLmVmZmVjdCA9IGVmZmVjdChnZXR0ZXIsIHtcclxuICAgICAgICAgICAgbGF6eTogdHJ1ZSxcclxuICAgICAgICAgICAgc2NoZWR1bGVyOiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX2RpcnR5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZGlydHkgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRyaWdnZXIodG9SYXcodGhpcyksIFwic2V0XCIgLyogU0VUICovLCAndmFsdWUnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXNbXCJfX3ZfaXNSZWFkb25seVwiIC8qIElTX1JFQURPTkxZICovXSA9IGlzUmVhZG9ubHk7XHJcbiAgICB9XHJcbiAgICBnZXQgdmFsdWUoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2RpcnR5KSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3ZhbHVlID0gdGhpcy5lZmZlY3QoKTtcclxuICAgICAgICAgICAgdGhpcy5fZGlydHkgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdHJhY2sodG9SYXcodGhpcyksIFwiZ2V0XCIgLyogR0VUICovLCAndmFsdWUnKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5fdmFsdWU7XHJcbiAgICB9XHJcbiAgICBzZXQgdmFsdWUobmV3VmFsdWUpIHtcclxuICAgICAgICB0aGlzLl9zZXR0ZXIobmV3VmFsdWUpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGNvbXB1dGVkKGdldHRlck9yT3B0aW9ucykge1xyXG4gICAgbGV0IGdldHRlcjtcclxuICAgIGxldCBzZXR0ZXI7XHJcbiAgICBpZiAoaXNGdW5jdGlvbihnZXR0ZXJPck9wdGlvbnMpKSB7XHJcbiAgICAgICAgZ2V0dGVyID0gZ2V0dGVyT3JPcHRpb25zO1xyXG4gICAgICAgIHNldHRlciA9IChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKVxyXG4gICAgICAgICAgICA/ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignV3JpdGUgb3BlcmF0aW9uIGZhaWxlZDogY29tcHV0ZWQgdmFsdWUgaXMgcmVhZG9ubHknKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICA6IE5PT1A7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBnZXR0ZXIgPSBnZXR0ZXJPck9wdGlvbnMuZ2V0O1xyXG4gICAgICAgIHNldHRlciA9IGdldHRlck9yT3B0aW9ucy5zZXQ7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbmV3IENvbXB1dGVkUmVmSW1wbChnZXR0ZXIsIHNldHRlciwgaXNGdW5jdGlvbihnZXR0ZXJPck9wdGlvbnMpIHx8ICFnZXR0ZXJPck9wdGlvbnMuc2V0KTtcclxufVxuXG5leHBvcnQgeyBJVEVSQVRFX0tFWSwgY29tcHV0ZWQsIGN1c3RvbVJlZiwgZWZmZWN0LCBlbmFibGVUcmFja2luZywgaXNQcm94eSwgaXNSZWFjdGl2ZSwgaXNSZWFkb25seSwgaXNSZWYsIG1hcmtSYXcsIHBhdXNlVHJhY2tpbmcsIHByb3h5UmVmcywgcmVhY3RpdmUsIHJlYWRvbmx5LCByZWYsIHJlc2V0VHJhY2tpbmcsIHNoYWxsb3dSZWFjdGl2ZSwgc2hhbGxvd1JlYWRvbmx5LCBzaGFsbG93UmVmLCBzdG9wLCB0b1JhdywgdG9SZWYsIHRvUmVmcywgdHJhY2ssIHRyaWdnZXIsIHRyaWdnZXJSZWYsIHVucmVmIH07XG4iLCJpbXBvcnQgeyBwYXVzZVRyYWNraW5nLCByZXNldFRyYWNraW5nLCBpc1JlZiwgdG9SYXcsIHNoYWxsb3dSZWFjdGl2ZSwgdHJpZ2dlciwgaXNSZWFjdGl2ZSwgZWZmZWN0LCBzdG9wLCByZWYsIGlzUHJveHksIHByb3h5UmVmcywgdG9SZWYsIHJlYWN0aXZlLCBzaGFsbG93UmVhZG9ubHksIHRyYWNrLCBjb21wdXRlZCBhcyBjb21wdXRlZCQxLCBpc1JlYWRvbmx5IH0gZnJvbSAnQHZ1ZS9yZWFjdGl2aXR5JztcbmV4cG9ydCB7IGN1c3RvbVJlZiwgaXNQcm94eSwgaXNSZWFjdGl2ZSwgaXNSZWFkb25seSwgaXNSZWYsIG1hcmtSYXcsIHByb3h5UmVmcywgcmVhY3RpdmUsIHJlYWRvbmx5LCByZWYsIHNoYWxsb3dSZWFjdGl2ZSwgc2hhbGxvd1JlYWRvbmx5LCBzaGFsbG93UmVmLCB0b1JhdywgdG9SZWYsIHRvUmVmcywgdHJpZ2dlclJlZiwgdW5yZWYgfSBmcm9tICdAdnVlL3JlYWN0aXZpdHknO1xuaW1wb3J0IHsgaXNTdHJpbmcsIGlzRnVuY3Rpb24sIGlzUHJvbWlzZSwgaXNBcnJheSwgZXh0ZW5kLCBFTVBUWV9PQkosIHRvSGFuZGxlcktleSwgdG9OdW1iZXIsIGh5cGhlbmF0ZSwgY2FtZWxpemUsIGlzT24sIGhhc093biwgaXNNb2RlbExpc3RlbmVyLCBkZWYsIGlzUmVzZXJ2ZWRQcm9wLCBFTVBUWV9BUlIsIGlzT2JqZWN0LCBjYXBpdGFsaXplLCB0b1Jhd1R5cGUsIG1ha2VNYXAsIHJlbW92ZSwgTk9PUCwgaGFzQ2hhbmdlZCwgaXNTZXQsIGlzTWFwLCBpbnZva2VBcnJheUZucywgTk8sIGdldEdsb2JhbFRoaXMsIG5vcm1hbGl6ZUNsYXNzLCBub3JtYWxpemVTdHlsZSwgaXNHbG9iYWxseVdoaXRlbGlzdGVkIH0gZnJvbSAnQHZ1ZS9zaGFyZWQnO1xuZXhwb3J0IHsgY2FtZWxpemUsIGNhcGl0YWxpemUsIHRvRGlzcGxheVN0cmluZywgdG9IYW5kbGVyS2V5IH0gZnJvbSAnQHZ1ZS9zaGFyZWQnO1xuXG5jb25zdCBzdGFjayA9IFtdO1xyXG5mdW5jdGlvbiBwdXNoV2FybmluZ0NvbnRleHQodm5vZGUpIHtcclxuICAgIHN0YWNrLnB1c2godm5vZGUpO1xyXG59XHJcbmZ1bmN0aW9uIHBvcFdhcm5pbmdDb250ZXh0KCkge1xyXG4gICAgc3RhY2sucG9wKCk7XHJcbn1cclxuZnVuY3Rpb24gd2Fybihtc2csIC4uLmFyZ3MpIHtcclxuICAgIC8vIGF2b2lkIHByb3BzIGZvcm1hdHRpbmcgb3Igd2FybiBoYW5kbGVyIHRyYWNraW5nIGRlcHMgdGhhdCBtaWdodCBiZSBtdXRhdGVkXHJcbiAgICAvLyBkdXJpbmcgcGF0Y2gsIGxlYWRpbmcgdG8gaW5maW5pdGUgcmVjdXJzaW9uLlxyXG4gICAgcGF1c2VUcmFja2luZygpO1xyXG4gICAgY29uc3QgaW5zdGFuY2UgPSBzdGFjay5sZW5ndGggPyBzdGFja1tzdGFjay5sZW5ndGggLSAxXS5jb21wb25lbnQgOiBudWxsO1xyXG4gICAgY29uc3QgYXBwV2FybkhhbmRsZXIgPSBpbnN0YW5jZSAmJiBpbnN0YW5jZS5hcHBDb250ZXh0LmNvbmZpZy53YXJuSGFuZGxlcjtcclxuICAgIGNvbnN0IHRyYWNlID0gZ2V0Q29tcG9uZW50VHJhY2UoKTtcclxuICAgIGlmIChhcHBXYXJuSGFuZGxlcikge1xyXG4gICAgICAgIGNhbGxXaXRoRXJyb3JIYW5kbGluZyhhcHBXYXJuSGFuZGxlciwgaW5zdGFuY2UsIDExIC8qIEFQUF9XQVJOX0hBTkRMRVIgKi8sIFtcclxuICAgICAgICAgICAgbXNnICsgYXJncy5qb2luKCcnKSxcclxuICAgICAgICAgICAgaW5zdGFuY2UgJiYgaW5zdGFuY2UucHJveHksXHJcbiAgICAgICAgICAgIHRyYWNlXHJcbiAgICAgICAgICAgICAgICAubWFwKCh7IHZub2RlIH0pID0+IGBhdCA8JHtmb3JtYXRDb21wb25lbnROYW1lKGluc3RhbmNlLCB2bm9kZS50eXBlKX0+YClcclxuICAgICAgICAgICAgICAgIC5qb2luKCdcXG4nKSxcclxuICAgICAgICAgICAgdHJhY2VcclxuICAgICAgICBdKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGNvbnN0IHdhcm5BcmdzID0gW2BbVnVlIHdhcm5dOiAke21zZ31gLCAuLi5hcmdzXTtcclxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cclxuICAgICAgICBpZiAodHJhY2UubGVuZ3RoICYmXHJcbiAgICAgICAgICAgIC8vIGF2b2lkIHNwYW1taW5nIGNvbnNvbGUgZHVyaW5nIHRlc3RzXHJcbiAgICAgICAgICAgICFmYWxzZSkge1xyXG4gICAgICAgICAgICB3YXJuQXJncy5wdXNoKGBcXG5gLCAuLi5mb3JtYXRUcmFjZSh0cmFjZSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zb2xlLndhcm4oLi4ud2FybkFyZ3MpO1xyXG4gICAgfVxyXG4gICAgcmVzZXRUcmFja2luZygpO1xyXG59XHJcbmZ1bmN0aW9uIGdldENvbXBvbmVudFRyYWNlKCkge1xyXG4gICAgbGV0IGN1cnJlbnRWTm9kZSA9IHN0YWNrW3N0YWNrLmxlbmd0aCAtIDFdO1xyXG4gICAgaWYgKCFjdXJyZW50Vk5vZGUpIHtcclxuICAgICAgICByZXR1cm4gW107XHJcbiAgICB9XHJcbiAgICAvLyB3ZSBjYW4ndCBqdXN0IHVzZSB0aGUgc3RhY2sgYmVjYXVzZSBpdCB3aWxsIGJlIGluY29tcGxldGUgZHVyaW5nIHVwZGF0ZXNcclxuICAgIC8vIHRoYXQgZGlkIG5vdCBzdGFydCBmcm9tIHRoZSByb290LiBSZS1jb25zdHJ1Y3QgdGhlIHBhcmVudCBjaGFpbiB1c2luZ1xyXG4gICAgLy8gaW5zdGFuY2UgcGFyZW50IHBvaW50ZXJzLlxyXG4gICAgY29uc3Qgbm9ybWFsaXplZFN0YWNrID0gW107XHJcbiAgICB3aGlsZSAoY3VycmVudFZOb2RlKSB7XHJcbiAgICAgICAgY29uc3QgbGFzdCA9IG5vcm1hbGl6ZWRTdGFja1swXTtcclxuICAgICAgICBpZiAobGFzdCAmJiBsYXN0LnZub2RlID09PSBjdXJyZW50Vk5vZGUpIHtcclxuICAgICAgICAgICAgbGFzdC5yZWN1cnNlQ291bnQrKztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIG5vcm1hbGl6ZWRTdGFjay5wdXNoKHtcclxuICAgICAgICAgICAgICAgIHZub2RlOiBjdXJyZW50Vk5vZGUsXHJcbiAgICAgICAgICAgICAgICByZWN1cnNlQ291bnQ6IDBcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHBhcmVudEluc3RhbmNlID0gY3VycmVudFZOb2RlLmNvbXBvbmVudCAmJiBjdXJyZW50Vk5vZGUuY29tcG9uZW50LnBhcmVudDtcclxuICAgICAgICBjdXJyZW50Vk5vZGUgPSBwYXJlbnRJbnN0YW5jZSAmJiBwYXJlbnRJbnN0YW5jZS52bm9kZTtcclxuICAgIH1cclxuICAgIHJldHVybiBub3JtYWxpemVkU3RhY2s7XHJcbn1cclxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cclxuZnVuY3Rpb24gZm9ybWF0VHJhY2UodHJhY2UpIHtcclxuICAgIGNvbnN0IGxvZ3MgPSBbXTtcclxuICAgIHRyYWNlLmZvckVhY2goKGVudHJ5LCBpKSA9PiB7XHJcbiAgICAgICAgbG9ncy5wdXNoKC4uLihpID09PSAwID8gW10gOiBbYFxcbmBdKSwgLi4uZm9ybWF0VHJhY2VFbnRyeShlbnRyeSkpO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gbG9ncztcclxufVxyXG5mdW5jdGlvbiBmb3JtYXRUcmFjZUVudHJ5KHsgdm5vZGUsIHJlY3Vyc2VDb3VudCB9KSB7XHJcbiAgICBjb25zdCBwb3N0Zml4ID0gcmVjdXJzZUNvdW50ID4gMCA/IGAuLi4gKCR7cmVjdXJzZUNvdW50fSByZWN1cnNpdmUgY2FsbHMpYCA6IGBgO1xyXG4gICAgY29uc3QgaXNSb290ID0gdm5vZGUuY29tcG9uZW50ID8gdm5vZGUuY29tcG9uZW50LnBhcmVudCA9PSBudWxsIDogZmFsc2U7XHJcbiAgICBjb25zdCBvcGVuID0gYCBhdCA8JHtmb3JtYXRDb21wb25lbnROYW1lKHZub2RlLmNvbXBvbmVudCwgdm5vZGUudHlwZSwgaXNSb290KX1gO1xyXG4gICAgY29uc3QgY2xvc2UgPSBgPmAgKyBwb3N0Zml4O1xyXG4gICAgcmV0dXJuIHZub2RlLnByb3BzXHJcbiAgICAgICAgPyBbb3BlbiwgLi4uZm9ybWF0UHJvcHModm5vZGUucHJvcHMpLCBjbG9zZV1cclxuICAgICAgICA6IFtvcGVuICsgY2xvc2VdO1xyXG59XHJcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXHJcbmZ1bmN0aW9uIGZvcm1hdFByb3BzKHByb3BzKSB7XHJcbiAgICBjb25zdCByZXMgPSBbXTtcclxuICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhwcm9wcyk7XHJcbiAgICBrZXlzLnNsaWNlKDAsIDMpLmZvckVhY2goa2V5ID0+IHtcclxuICAgICAgICByZXMucHVzaCguLi5mb3JtYXRQcm9wKGtleSwgcHJvcHNba2V5XSkpO1xyXG4gICAgfSk7XHJcbiAgICBpZiAoa2V5cy5sZW5ndGggPiAzKSB7XHJcbiAgICAgICAgcmVzLnB1c2goYCAuLi5gKTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXM7XHJcbn1cclxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cclxuZnVuY3Rpb24gZm9ybWF0UHJvcChrZXksIHZhbHVlLCByYXcpIHtcclxuICAgIGlmIChpc1N0cmluZyh2YWx1ZSkpIHtcclxuICAgICAgICB2YWx1ZSA9IEpTT04uc3RyaW5naWZ5KHZhbHVlKTtcclxuICAgICAgICByZXR1cm4gcmF3ID8gdmFsdWUgOiBbYCR7a2V5fT0ke3ZhbHVlfWBdO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyB8fFxyXG4gICAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nIHx8XHJcbiAgICAgICAgdmFsdWUgPT0gbnVsbCkge1xyXG4gICAgICAgIHJldHVybiByYXcgPyB2YWx1ZSA6IFtgJHtrZXl9PSR7dmFsdWV9YF07XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChpc1JlZih2YWx1ZSkpIHtcclxuICAgICAgICB2YWx1ZSA9IGZvcm1hdFByb3Aoa2V5LCB0b1Jhdyh2YWx1ZS52YWx1ZSksIHRydWUpO1xyXG4gICAgICAgIHJldHVybiByYXcgPyB2YWx1ZSA6IFtgJHtrZXl9PVJlZjxgLCB2YWx1ZSwgYD5gXTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGlzRnVuY3Rpb24odmFsdWUpKSB7XHJcbiAgICAgICAgcmV0dXJuIFtgJHtrZXl9PWZuJHt2YWx1ZS5uYW1lID8gYDwke3ZhbHVlLm5hbWV9PmAgOiBgYH1gXTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHZhbHVlID0gdG9SYXcodmFsdWUpO1xyXG4gICAgICAgIHJldHVybiByYXcgPyB2YWx1ZSA6IFtgJHtrZXl9PWAsIHZhbHVlXTtcclxuICAgIH1cclxufVxuXG5jb25zdCBFcnJvclR5cGVTdHJpbmdzID0ge1xyXG4gICAgW1wiYmNcIiAvKiBCRUZPUkVfQ1JFQVRFICovXTogJ2JlZm9yZUNyZWF0ZSBob29rJyxcclxuICAgIFtcImNcIiAvKiBDUkVBVEVEICovXTogJ2NyZWF0ZWQgaG9vaycsXHJcbiAgICBbXCJibVwiIC8qIEJFRk9SRV9NT1VOVCAqL106ICdiZWZvcmVNb3VudCBob29rJyxcclxuICAgIFtcIm1cIiAvKiBNT1VOVEVEICovXTogJ21vdW50ZWQgaG9vaycsXHJcbiAgICBbXCJidVwiIC8qIEJFRk9SRV9VUERBVEUgKi9dOiAnYmVmb3JlVXBkYXRlIGhvb2snLFxyXG4gICAgW1widVwiIC8qIFVQREFURUQgKi9dOiAndXBkYXRlZCcsXHJcbiAgICBbXCJidW1cIiAvKiBCRUZPUkVfVU5NT1VOVCAqL106ICdiZWZvcmVVbm1vdW50IGhvb2snLFxyXG4gICAgW1widW1cIiAvKiBVTk1PVU5URUQgKi9dOiAndW5tb3VudGVkIGhvb2snLFxyXG4gICAgW1wiYVwiIC8qIEFDVElWQVRFRCAqL106ICdhY3RpdmF0ZWQgaG9vaycsXHJcbiAgICBbXCJkYVwiIC8qIERFQUNUSVZBVEVEICovXTogJ2RlYWN0aXZhdGVkIGhvb2snLFxyXG4gICAgW1wiZWNcIiAvKiBFUlJPUl9DQVBUVVJFRCAqL106ICdlcnJvckNhcHR1cmVkIGhvb2snLFxyXG4gICAgW1wicnRjXCIgLyogUkVOREVSX1RSQUNLRUQgKi9dOiAncmVuZGVyVHJhY2tlZCBob29rJyxcclxuICAgIFtcInJ0Z1wiIC8qIFJFTkRFUl9UUklHR0VSRUQgKi9dOiAncmVuZGVyVHJpZ2dlcmVkIGhvb2snLFxyXG4gICAgWzAgLyogU0VUVVBfRlVOQ1RJT04gKi9dOiAnc2V0dXAgZnVuY3Rpb24nLFxyXG4gICAgWzEgLyogUkVOREVSX0ZVTkNUSU9OICovXTogJ3JlbmRlciBmdW5jdGlvbicsXHJcbiAgICBbMiAvKiBXQVRDSF9HRVRURVIgKi9dOiAnd2F0Y2hlciBnZXR0ZXInLFxyXG4gICAgWzMgLyogV0FUQ0hfQ0FMTEJBQ0sgKi9dOiAnd2F0Y2hlciBjYWxsYmFjaycsXHJcbiAgICBbNCAvKiBXQVRDSF9DTEVBTlVQICovXTogJ3dhdGNoZXIgY2xlYW51cCBmdW5jdGlvbicsXHJcbiAgICBbNSAvKiBOQVRJVkVfRVZFTlRfSEFORExFUiAqL106ICduYXRpdmUgZXZlbnQgaGFuZGxlcicsXHJcbiAgICBbNiAvKiBDT01QT05FTlRfRVZFTlRfSEFORExFUiAqL106ICdjb21wb25lbnQgZXZlbnQgaGFuZGxlcicsXHJcbiAgICBbNyAvKiBWTk9ERV9IT09LICovXTogJ3Zub2RlIGhvb2snLFxyXG4gICAgWzggLyogRElSRUNUSVZFX0hPT0sgKi9dOiAnZGlyZWN0aXZlIGhvb2snLFxyXG4gICAgWzkgLyogVFJBTlNJVElPTl9IT09LICovXTogJ3RyYW5zaXRpb24gaG9vaycsXHJcbiAgICBbMTAgLyogQVBQX0VSUk9SX0hBTkRMRVIgKi9dOiAnYXBwIGVycm9ySGFuZGxlcicsXHJcbiAgICBbMTEgLyogQVBQX1dBUk5fSEFORExFUiAqL106ICdhcHAgd2FybkhhbmRsZXInLFxyXG4gICAgWzEyIC8qIEZVTkNUSU9OX1JFRiAqL106ICdyZWYgZnVuY3Rpb24nLFxyXG4gICAgWzEzIC8qIEFTWU5DX0NPTVBPTkVOVF9MT0FERVIgKi9dOiAnYXN5bmMgY29tcG9uZW50IGxvYWRlcicsXHJcbiAgICBbMTQgLyogU0NIRURVTEVSICovXTogJ3NjaGVkdWxlciBmbHVzaC4gVGhpcyBpcyBsaWtlbHkgYSBWdWUgaW50ZXJuYWxzIGJ1Zy4gJyArXHJcbiAgICAgICAgJ1BsZWFzZSBvcGVuIGFuIGlzc3VlIGF0IGh0dHBzOi8vbmV3LWlzc3VlLnZ1ZWpzLm9yZy8/cmVwbz12dWVqcy92dWUtbmV4dCdcclxufTtcclxuZnVuY3Rpb24gY2FsbFdpdGhFcnJvckhhbmRsaW5nKGZuLCBpbnN0YW5jZSwgdHlwZSwgYXJncykge1xyXG4gICAgbGV0IHJlcztcclxuICAgIHRyeSB7XHJcbiAgICAgICAgcmVzID0gYXJncyA/IGZuKC4uLmFyZ3MpIDogZm4oKTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlcnIpIHtcclxuICAgICAgICBoYW5kbGVFcnJvcihlcnIsIGluc3RhbmNlLCB0eXBlKTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXM7XHJcbn1cclxuZnVuY3Rpb24gY2FsbFdpdGhBc3luY0Vycm9ySGFuZGxpbmcoZm4sIGluc3RhbmNlLCB0eXBlLCBhcmdzKSB7XHJcbiAgICBpZiAoaXNGdW5jdGlvbihmbikpIHtcclxuICAgICAgICBjb25zdCByZXMgPSBjYWxsV2l0aEVycm9ySGFuZGxpbmcoZm4sIGluc3RhbmNlLCB0eXBlLCBhcmdzKTtcclxuICAgICAgICBpZiAocmVzICYmIGlzUHJvbWlzZShyZXMpKSB7XHJcbiAgICAgICAgICAgIHJlcy5jYXRjaChlcnIgPT4ge1xyXG4gICAgICAgICAgICAgICAgaGFuZGxlRXJyb3IoZXJyLCBpbnN0YW5jZSwgdHlwZSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzO1xyXG4gICAgfVxyXG4gICAgY29uc3QgdmFsdWVzID0gW107XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZuLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgdmFsdWVzLnB1c2goY2FsbFdpdGhBc3luY0Vycm9ySGFuZGxpbmcoZm5baV0sIGluc3RhbmNlLCB0eXBlLCBhcmdzKSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdmFsdWVzO1xyXG59XHJcbmZ1bmN0aW9uIGhhbmRsZUVycm9yKGVyciwgaW5zdGFuY2UsIHR5cGUsIHRocm93SW5EZXYgPSB0cnVlKSB7XHJcbiAgICBjb25zdCBjb250ZXh0Vk5vZGUgPSBpbnN0YW5jZSA/IGluc3RhbmNlLnZub2RlIDogbnVsbDtcclxuICAgIGlmIChpbnN0YW5jZSkge1xyXG4gICAgICAgIGxldCBjdXIgPSBpbnN0YW5jZS5wYXJlbnQ7XHJcbiAgICAgICAgLy8gdGhlIGV4cG9zZWQgaW5zdGFuY2UgaXMgdGhlIHJlbmRlciBwcm94eSB0byBrZWVwIGl0IGNvbnNpc3RlbnQgd2l0aCAyLnhcclxuICAgICAgICBjb25zdCBleHBvc2VkSW5zdGFuY2UgPSBpbnN0YW5jZS5wcm94eTtcclxuICAgICAgICAvLyBpbiBwcm9kdWN0aW9uIHRoZSBob29rIHJlY2VpdmVzIG9ubHkgdGhlIGVycm9yIGNvZGVcclxuICAgICAgICBjb25zdCBlcnJvckluZm8gPSAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgPyBFcnJvclR5cGVTdHJpbmdzW3R5cGVdIDogdHlwZTtcclxuICAgICAgICB3aGlsZSAoY3VyKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGVycm9yQ2FwdHVyZWRIb29rcyA9IGN1ci5lYztcclxuICAgICAgICAgICAgaWYgKGVycm9yQ2FwdHVyZWRIb29rcykge1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlcnJvckNhcHR1cmVkSG9va3MubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3JDYXB0dXJlZEhvb2tzW2ldKGVyciwgZXhwb3NlZEluc3RhbmNlLCBlcnJvckluZm8pID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGN1ciA9IGN1ci5wYXJlbnQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGFwcC1sZXZlbCBoYW5kbGluZ1xyXG4gICAgICAgIGNvbnN0IGFwcEVycm9ySGFuZGxlciA9IGluc3RhbmNlLmFwcENvbnRleHQuY29uZmlnLmVycm9ySGFuZGxlcjtcclxuICAgICAgICBpZiAoYXBwRXJyb3JIYW5kbGVyKSB7XHJcbiAgICAgICAgICAgIGNhbGxXaXRoRXJyb3JIYW5kbGluZyhhcHBFcnJvckhhbmRsZXIsIG51bGwsIDEwIC8qIEFQUF9FUlJPUl9IQU5ETEVSICovLCBbZXJyLCBleHBvc2VkSW5zdGFuY2UsIGVycm9ySW5mb10pO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgbG9nRXJyb3IoZXJyLCB0eXBlLCBjb250ZXh0Vk5vZGUsIHRocm93SW5EZXYpO1xyXG59XHJcbmZ1bmN0aW9uIGxvZ0Vycm9yKGVyciwgdHlwZSwgY29udGV4dFZOb2RlLCB0aHJvd0luRGV2ID0gdHJ1ZSkge1xyXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgIGNvbnN0IGluZm8gPSBFcnJvclR5cGVTdHJpbmdzW3R5cGVdO1xyXG4gICAgICAgIGlmIChjb250ZXh0Vk5vZGUpIHtcclxuICAgICAgICAgICAgcHVzaFdhcm5pbmdDb250ZXh0KGNvbnRleHRWTm9kZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHdhcm4oYFVuaGFuZGxlZCBlcnJvciR7aW5mbyA/IGAgZHVyaW5nIGV4ZWN1dGlvbiBvZiAke2luZm99YCA6IGBgfWApO1xyXG4gICAgICAgIGlmIChjb250ZXh0Vk5vZGUpIHtcclxuICAgICAgICAgICAgcG9wV2FybmluZ0NvbnRleHQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gY3Jhc2ggaW4gZGV2IGJ5IGRlZmF1bHQgc28gaXQncyBtb3JlIG5vdGljZWFibGVcclxuICAgICAgICBpZiAodGhyb3dJbkRldikge1xyXG4gICAgICAgICAgICB0aHJvdyBlcnI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgLy8gcmVjb3ZlciBpbiBwcm9kIHRvIHJlZHVjZSB0aGUgaW1wYWN0IG9uIGVuZC11c2VyXHJcbiAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xyXG4gICAgfVxyXG59XG5cbmxldCBpc0ZsdXNoaW5nID0gZmFsc2U7XHJcbmxldCBpc0ZsdXNoUGVuZGluZyA9IGZhbHNlO1xyXG5jb25zdCBxdWV1ZSA9IFtdO1xyXG5sZXQgZmx1c2hJbmRleCA9IDA7XHJcbmNvbnN0IHBlbmRpbmdQcmVGbHVzaENicyA9IFtdO1xyXG5sZXQgYWN0aXZlUHJlRmx1c2hDYnMgPSBudWxsO1xyXG5sZXQgcHJlRmx1c2hJbmRleCA9IDA7XHJcbmNvbnN0IHBlbmRpbmdQb3N0Rmx1c2hDYnMgPSBbXTtcclxubGV0IGFjdGl2ZVBvc3RGbHVzaENicyA9IG51bGw7XHJcbmxldCBwb3N0Rmx1c2hJbmRleCA9IDA7XHJcbmNvbnN0IHJlc29sdmVkUHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSgpO1xyXG5sZXQgY3VycmVudEZsdXNoUHJvbWlzZSA9IG51bGw7XHJcbmxldCBjdXJyZW50UHJlRmx1c2hQYXJlbnRKb2IgPSBudWxsO1xyXG5jb25zdCBSRUNVUlNJT05fTElNSVQgPSAxMDA7XHJcbmZ1bmN0aW9uIG5leHRUaWNrKGZuKSB7XHJcbiAgICBjb25zdCBwID0gY3VycmVudEZsdXNoUHJvbWlzZSB8fCByZXNvbHZlZFByb21pc2U7XHJcbiAgICByZXR1cm4gZm4gPyBwLnRoZW4odGhpcyA/IGZuLmJpbmQodGhpcykgOiBmbikgOiBwO1xyXG59XHJcbmZ1bmN0aW9uIHF1ZXVlSm9iKGpvYikge1xyXG4gICAgLy8gdGhlIGRlZHVwZSBzZWFyY2ggdXNlcyB0aGUgc3RhcnRJbmRleCBhcmd1bWVudCBvZiBBcnJheS5pbmNsdWRlcygpXHJcbiAgICAvLyBieSBkZWZhdWx0IHRoZSBzZWFyY2ggaW5kZXggaW5jbHVkZXMgdGhlIGN1cnJlbnQgam9iIHRoYXQgaXMgYmVpbmcgcnVuXHJcbiAgICAvLyBzbyBpdCBjYW5ub3QgcmVjdXJzaXZlbHkgdHJpZ2dlciBpdHNlbGYgYWdhaW4uXHJcbiAgICAvLyBpZiB0aGUgam9iIGlzIGEgd2F0Y2goKSBjYWxsYmFjaywgdGhlIHNlYXJjaCB3aWxsIHN0YXJ0IHdpdGggYSArMSBpbmRleCB0b1xyXG4gICAgLy8gYWxsb3cgaXQgcmVjdXJzaXZlbHkgdHJpZ2dlciBpdHNlbGYgLSBpdCBpcyB0aGUgdXNlcidzIHJlc3BvbnNpYmlsaXR5IHRvXHJcbiAgICAvLyBlbnN1cmUgaXQgZG9lc24ndCBlbmQgdXAgaW4gYW4gaW5maW5pdGUgbG9vcC5cclxuICAgIGlmICgoIXF1ZXVlLmxlbmd0aCB8fFxyXG4gICAgICAgICFxdWV1ZS5pbmNsdWRlcyhqb2IsIGlzRmx1c2hpbmcgJiYgam9iLmFsbG93UmVjdXJzZSA/IGZsdXNoSW5kZXggKyAxIDogZmx1c2hJbmRleCkpICYmXHJcbiAgICAgICAgam9iICE9PSBjdXJyZW50UHJlRmx1c2hQYXJlbnRKb2IpIHtcclxuICAgICAgICBxdWV1ZS5wdXNoKGpvYik7XHJcbiAgICAgICAgcXVldWVGbHVzaCgpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIHF1ZXVlRmx1c2goKSB7XHJcbiAgICBpZiAoIWlzRmx1c2hpbmcgJiYgIWlzRmx1c2hQZW5kaW5nKSB7XHJcbiAgICAgICAgaXNGbHVzaFBlbmRpbmcgPSB0cnVlO1xyXG4gICAgICAgIGN1cnJlbnRGbHVzaFByb21pc2UgPSByZXNvbHZlZFByb21pc2UudGhlbihmbHVzaEpvYnMpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGludmFsaWRhdGVKb2Ioam9iKSB7XHJcbiAgICBjb25zdCBpID0gcXVldWUuaW5kZXhPZihqb2IpO1xyXG4gICAgaWYgKGkgPiAtMSkge1xyXG4gICAgICAgIHF1ZXVlLnNwbGljZShpLCAxKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBxdWV1ZUNiKGNiLCBhY3RpdmVRdWV1ZSwgcGVuZGluZ1F1ZXVlLCBpbmRleCkge1xyXG4gICAgaWYgKCFpc0FycmF5KGNiKSkge1xyXG4gICAgICAgIGlmICghYWN0aXZlUXVldWUgfHxcclxuICAgICAgICAgICAgIWFjdGl2ZVF1ZXVlLmluY2x1ZGVzKGNiLCBjYi5hbGxvd1JlY3Vyc2UgPyBpbmRleCArIDEgOiBpbmRleCkpIHtcclxuICAgICAgICAgICAgcGVuZGluZ1F1ZXVlLnB1c2goY2IpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIC8vIGlmIGNiIGlzIGFuIGFycmF5LCBpdCBpcyBhIGNvbXBvbmVudCBsaWZlY3ljbGUgaG9vayB3aGljaCBjYW4gb25seSBiZVxyXG4gICAgICAgIC8vIHRyaWdnZXJlZCBieSBhIGpvYiwgd2hpY2ggaXMgYWxyZWFkeSBkZWR1cGVkIGluIHRoZSBtYWluIHF1ZXVlLCBzb1xyXG4gICAgICAgIC8vIHdlIGNhbiBza2lwIGR1cGxpY2F0ZSBjaGVjayBoZXJlIHRvIGltcHJvdmUgcGVyZlxyXG4gICAgICAgIHBlbmRpbmdRdWV1ZS5wdXNoKC4uLmNiKTtcclxuICAgIH1cclxuICAgIHF1ZXVlRmx1c2goKTtcclxufVxyXG5mdW5jdGlvbiBxdWV1ZVByZUZsdXNoQ2IoY2IpIHtcclxuICAgIHF1ZXVlQ2IoY2IsIGFjdGl2ZVByZUZsdXNoQ2JzLCBwZW5kaW5nUHJlRmx1c2hDYnMsIHByZUZsdXNoSW5kZXgpO1xyXG59XHJcbmZ1bmN0aW9uIHF1ZXVlUG9zdEZsdXNoQ2IoY2IpIHtcclxuICAgIHF1ZXVlQ2IoY2IsIGFjdGl2ZVBvc3RGbHVzaENicywgcGVuZGluZ1Bvc3RGbHVzaENicywgcG9zdEZsdXNoSW5kZXgpO1xyXG59XHJcbmZ1bmN0aW9uIGZsdXNoUHJlRmx1c2hDYnMoc2VlbiwgcGFyZW50Sm9iID0gbnVsbCkge1xyXG4gICAgaWYgKHBlbmRpbmdQcmVGbHVzaENicy5sZW5ndGgpIHtcclxuICAgICAgICBjdXJyZW50UHJlRmx1c2hQYXJlbnRKb2IgPSBwYXJlbnRKb2I7XHJcbiAgICAgICAgYWN0aXZlUHJlRmx1c2hDYnMgPSBbLi4ubmV3IFNldChwZW5kaW5nUHJlRmx1c2hDYnMpXTtcclxuICAgICAgICBwZW5kaW5nUHJlRmx1c2hDYnMubGVuZ3RoID0gMDtcclxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgIHNlZW4gPSBzZWVuIHx8IG5ldyBNYXAoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yIChwcmVGbHVzaEluZGV4ID0gMDsgcHJlRmx1c2hJbmRleCA8IGFjdGl2ZVByZUZsdXNoQ2JzLmxlbmd0aDsgcHJlRmx1c2hJbmRleCsrKSB7XHJcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgIGNoZWNrUmVjdXJzaXZlVXBkYXRlcyhzZWVuLCBhY3RpdmVQcmVGbHVzaENic1twcmVGbHVzaEluZGV4XSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYWN0aXZlUHJlRmx1c2hDYnNbcHJlRmx1c2hJbmRleF0oKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgYWN0aXZlUHJlRmx1c2hDYnMgPSBudWxsO1xyXG4gICAgICAgIHByZUZsdXNoSW5kZXggPSAwO1xyXG4gICAgICAgIGN1cnJlbnRQcmVGbHVzaFBhcmVudEpvYiA9IG51bGw7XHJcbiAgICAgICAgLy8gcmVjdXJzaXZlbHkgZmx1c2ggdW50aWwgaXQgZHJhaW5zXHJcbiAgICAgICAgZmx1c2hQcmVGbHVzaENicyhzZWVuLCBwYXJlbnRKb2IpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGZsdXNoUG9zdEZsdXNoQ2JzKHNlZW4pIHtcclxuICAgIGlmIChwZW5kaW5nUG9zdEZsdXNoQ2JzLmxlbmd0aCkge1xyXG4gICAgICAgIGNvbnN0IGRlZHVwZWQgPSBbLi4ubmV3IFNldChwZW5kaW5nUG9zdEZsdXNoQ2JzKV07XHJcbiAgICAgICAgcGVuZGluZ1Bvc3RGbHVzaENicy5sZW5ndGggPSAwO1xyXG4gICAgICAgIC8vICMxOTQ3IGFscmVhZHkgaGFzIGFjdGl2ZSBxdWV1ZSwgbmVzdGVkIGZsdXNoUG9zdEZsdXNoQ2JzIGNhbGxcclxuICAgICAgICBpZiAoYWN0aXZlUG9zdEZsdXNoQ2JzKSB7XHJcbiAgICAgICAgICAgIGFjdGl2ZVBvc3RGbHVzaENicy5wdXNoKC4uLmRlZHVwZWQpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGFjdGl2ZVBvc3RGbHVzaENicyA9IGRlZHVwZWQ7XHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICBzZWVuID0gc2VlbiB8fCBuZXcgTWFwKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGFjdGl2ZVBvc3RGbHVzaENicy5zb3J0KChhLCBiKSA9PiBnZXRJZChhKSAtIGdldElkKGIpKTtcclxuICAgICAgICBmb3IgKHBvc3RGbHVzaEluZGV4ID0gMDsgcG9zdEZsdXNoSW5kZXggPCBhY3RpdmVQb3N0Rmx1c2hDYnMubGVuZ3RoOyBwb3N0Rmx1c2hJbmRleCsrKSB7XHJcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgIGNoZWNrUmVjdXJzaXZlVXBkYXRlcyhzZWVuLCBhY3RpdmVQb3N0Rmx1c2hDYnNbcG9zdEZsdXNoSW5kZXhdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhY3RpdmVQb3N0Rmx1c2hDYnNbcG9zdEZsdXNoSW5kZXhdKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGFjdGl2ZVBvc3RGbHVzaENicyA9IG51bGw7XHJcbiAgICAgICAgcG9zdEZsdXNoSW5kZXggPSAwO1xyXG4gICAgfVxyXG59XHJcbmNvbnN0IGdldElkID0gKGpvYikgPT4gam9iLmlkID09IG51bGwgPyBJbmZpbml0eSA6IGpvYi5pZDtcclxuZnVuY3Rpb24gZmx1c2hKb2JzKHNlZW4pIHtcclxuICAgIGlzRmx1c2hQZW5kaW5nID0gZmFsc2U7XHJcbiAgICBpc0ZsdXNoaW5nID0gdHJ1ZTtcclxuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICBzZWVuID0gc2VlbiB8fCBuZXcgTWFwKCk7XHJcbiAgICB9XHJcbiAgICBmbHVzaFByZUZsdXNoQ2JzKHNlZW4pO1xyXG4gICAgLy8gU29ydCBxdWV1ZSBiZWZvcmUgZmx1c2guXHJcbiAgICAvLyBUaGlzIGVuc3VyZXMgdGhhdDpcclxuICAgIC8vIDEuIENvbXBvbmVudHMgYXJlIHVwZGF0ZWQgZnJvbSBwYXJlbnQgdG8gY2hpbGQuIChiZWNhdXNlIHBhcmVudCBpcyBhbHdheXNcclxuICAgIC8vICAgIGNyZWF0ZWQgYmVmb3JlIHRoZSBjaGlsZCBzbyBpdHMgcmVuZGVyIGVmZmVjdCB3aWxsIGhhdmUgc21hbGxlclxyXG4gICAgLy8gICAgcHJpb3JpdHkgbnVtYmVyKVxyXG4gICAgLy8gMi4gSWYgYSBjb21wb25lbnQgaXMgdW5tb3VudGVkIGR1cmluZyBhIHBhcmVudCBjb21wb25lbnQncyB1cGRhdGUsXHJcbiAgICAvLyAgICBpdHMgdXBkYXRlIGNhbiBiZSBza2lwcGVkLlxyXG4gICAgcXVldWUuc29ydCgoYSwgYikgPT4gZ2V0SWQoYSkgLSBnZXRJZChiKSk7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIGZvciAoZmx1c2hJbmRleCA9IDA7IGZsdXNoSW5kZXggPCBxdWV1ZS5sZW5ndGg7IGZsdXNoSW5kZXgrKykge1xyXG4gICAgICAgICAgICBjb25zdCBqb2IgPSBxdWV1ZVtmbHVzaEluZGV4XTtcclxuICAgICAgICAgICAgaWYgKGpvYikge1xyXG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNoZWNrUmVjdXJzaXZlVXBkYXRlcyhzZWVuLCBqb2IpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2FsbFdpdGhFcnJvckhhbmRsaW5nKGpvYiwgbnVsbCwgMTQgLyogU0NIRURVTEVSICovKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGZpbmFsbHkge1xyXG4gICAgICAgIGZsdXNoSW5kZXggPSAwO1xyXG4gICAgICAgIHF1ZXVlLmxlbmd0aCA9IDA7XHJcbiAgICAgICAgZmx1c2hQb3N0Rmx1c2hDYnMoc2Vlbik7XHJcbiAgICAgICAgaXNGbHVzaGluZyA9IGZhbHNlO1xyXG4gICAgICAgIGN1cnJlbnRGbHVzaFByb21pc2UgPSBudWxsO1xyXG4gICAgICAgIC8vIHNvbWUgcG9zdEZsdXNoQ2IgcXVldWVkIGpvYnMhXHJcbiAgICAgICAgLy8ga2VlcCBmbHVzaGluZyB1bnRpbCBpdCBkcmFpbnMuXHJcbiAgICAgICAgaWYgKHF1ZXVlLmxlbmd0aCB8fCBwZW5kaW5nUG9zdEZsdXNoQ2JzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBmbHVzaEpvYnMoc2Vlbik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGNoZWNrUmVjdXJzaXZlVXBkYXRlcyhzZWVuLCBmbikge1xyXG4gICAgaWYgKCFzZWVuLmhhcyhmbikpIHtcclxuICAgICAgICBzZWVuLnNldChmbiwgMSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBjb25zdCBjb3VudCA9IHNlZW4uZ2V0KGZuKTtcclxuICAgICAgICBpZiAoY291bnQgPiBSRUNVUlNJT05fTElNSVQpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBNYXhpbXVtIHJlY3Vyc2l2ZSB1cGRhdGVzIGV4Y2VlZGVkLiBgICtcclxuICAgICAgICAgICAgICAgIGBUaGlzIG1lYW5zIHlvdSBoYXZlIGEgcmVhY3RpdmUgZWZmZWN0IHRoYXQgaXMgbXV0YXRpbmcgaXRzIG93biBgICtcclxuICAgICAgICAgICAgICAgIGBkZXBlbmRlbmNpZXMgYW5kIHRodXMgcmVjdXJzaXZlbHkgdHJpZ2dlcmluZyBpdHNlbGYuIFBvc3NpYmxlIHNvdXJjZXMgYCArXHJcbiAgICAgICAgICAgICAgICBgaW5jbHVkZSBjb21wb25lbnQgdGVtcGxhdGUsIHJlbmRlciBmdW5jdGlvbiwgdXBkYXRlZCBob29rIG9yIGAgK1xyXG4gICAgICAgICAgICAgICAgYHdhdGNoZXIgc291cmNlIGZ1bmN0aW9uLmApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgc2Vlbi5zZXQoZm4sIGNvdW50ICsgMSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXJlc3RyaWN0ZWQtZ2xvYmFscyAqL1xyXG5sZXQgaXNIbXJVcGRhdGluZyA9IGZhbHNlO1xyXG5jb25zdCBobXJEaXJ0eUNvbXBvbmVudHMgPSBuZXcgU2V0KCk7XHJcbi8vIEV4cG9zZSB0aGUgSE1SIHJ1bnRpbWUgb24gdGhlIGdsb2JhbCBvYmplY3RcclxuLy8gVGhpcyBtYWtlcyBpdCBlbnRpcmVseSB0cmVlLXNoYWthYmxlIHdpdGhvdXQgcG9sbHV0aW5nIHRoZSBleHBvcnRzIGFuZCBtYWtlc1xyXG4vLyBpdCBlYXNpZXIgdG8gYmUgdXNlZCBpbiB0b29saW5ncyBsaWtlIHZ1ZS1sb2FkZXJcclxuLy8gTm90ZTogZm9yIGEgY29tcG9uZW50IHRvIGJlIGVsaWdpYmxlIGZvciBITVIgaXQgYWxzbyBuZWVkcyB0aGUgX19obXJJZCBvcHRpb25cclxuLy8gdG8gYmUgc2V0IHNvIHRoYXQgaXRzIGluc3RhbmNlcyBjYW4gYmUgcmVnaXN0ZXJlZCAvIHJlbW92ZWQuXHJcbmlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgIGNvbnN0IGdsb2JhbE9iamVjdCA9IHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnXHJcbiAgICAgICAgPyBnbG9iYWxcclxuICAgICAgICA6IHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJ1xyXG4gICAgICAgICAgICA/IHNlbGZcclxuICAgICAgICAgICAgOiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJ1xyXG4gICAgICAgICAgICAgICAgPyB3aW5kb3dcclxuICAgICAgICAgICAgICAgIDoge307XHJcbiAgICBnbG9iYWxPYmplY3QuX19WVUVfSE1SX1JVTlRJTUVfXyA9IHtcclxuICAgICAgICBjcmVhdGVSZWNvcmQ6IHRyeVdyYXAoY3JlYXRlUmVjb3JkKSxcclxuICAgICAgICByZXJlbmRlcjogdHJ5V3JhcChyZXJlbmRlciksXHJcbiAgICAgICAgcmVsb2FkOiB0cnlXcmFwKHJlbG9hZClcclxuICAgIH07XHJcbn1cclxuY29uc3QgbWFwID0gbmV3IE1hcCgpO1xyXG5mdW5jdGlvbiByZWdpc3RlckhNUihpbnN0YW5jZSkge1xyXG4gICAgY29uc3QgaWQgPSBpbnN0YW5jZS50eXBlLl9faG1ySWQ7XHJcbiAgICBsZXQgcmVjb3JkID0gbWFwLmdldChpZCk7XHJcbiAgICBpZiAoIXJlY29yZCkge1xyXG4gICAgICAgIGNyZWF0ZVJlY29yZChpZCwgaW5zdGFuY2UudHlwZSk7XHJcbiAgICAgICAgcmVjb3JkID0gbWFwLmdldChpZCk7XHJcbiAgICB9XHJcbiAgICByZWNvcmQuaW5zdGFuY2VzLmFkZChpbnN0YW5jZSk7XHJcbn1cclxuZnVuY3Rpb24gdW5yZWdpc3RlckhNUihpbnN0YW5jZSkge1xyXG4gICAgbWFwLmdldChpbnN0YW5jZS50eXBlLl9faG1ySWQpLmluc3RhbmNlcy5kZWxldGUoaW5zdGFuY2UpO1xyXG59XHJcbmZ1bmN0aW9uIGNyZWF0ZVJlY29yZChpZCwgY29tcG9uZW50KSB7XHJcbiAgICBpZiAoIWNvbXBvbmVudCkge1xyXG4gICAgICAgIHdhcm4oYEhNUiBBUEkgdXNhZ2UgaXMgb3V0IG9mIGRhdGUuXFxuYCArXHJcbiAgICAgICAgICAgIGBQbGVhc2UgdXBncmFkZSB2dWUtbG9hZGVyL3ZpdGUvcm9sbHVwLXBsdWdpbi12dWUgb3Igb3RoZXIgcmVsZXZhbnQgYCArXHJcbiAgICAgICAgICAgIGBkZXBkZW5kZW5jeSB0aGF0IGhhbmRsZXMgVnVlIFNGQyBjb21waWxhdGlvbi5gKTtcclxuICAgICAgICBjb21wb25lbnQgPSB7fTtcclxuICAgIH1cclxuICAgIGlmIChtYXAuaGFzKGlkKSkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIG1hcC5zZXQoaWQsIHtcclxuICAgICAgICBjb21wb25lbnQ6IGlzQ2xhc3NDb21wb25lbnQoY29tcG9uZW50KSA/IGNvbXBvbmVudC5fX3ZjY09wdHMgOiBjb21wb25lbnQsXHJcbiAgICAgICAgaW5zdGFuY2VzOiBuZXcgU2V0KClcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHRydWU7XHJcbn1cclxuZnVuY3Rpb24gcmVyZW5kZXIoaWQsIG5ld1JlbmRlcikge1xyXG4gICAgY29uc3QgcmVjb3JkID0gbWFwLmdldChpZCk7XHJcbiAgICBpZiAoIXJlY29yZClcclxuICAgICAgICByZXR1cm47XHJcbiAgICBpZiAobmV3UmVuZGVyKVxyXG4gICAgICAgIHJlY29yZC5jb21wb25lbnQucmVuZGVyID0gbmV3UmVuZGVyO1xyXG4gICAgLy8gQXJyYXkuZnJvbSBjcmVhdGVzIGEgc25hcHNob3Qgd2hpY2ggYXZvaWRzIHRoZSBzZXQgYmVpbmcgbXV0YXRlZCBkdXJpbmdcclxuICAgIC8vIHVwZGF0ZXNcclxuICAgIEFycmF5LmZyb20ocmVjb3JkLmluc3RhbmNlcykuZm9yRWFjaChpbnN0YW5jZSA9PiB7XHJcbiAgICAgICAgaWYgKG5ld1JlbmRlcikge1xyXG4gICAgICAgICAgICBpbnN0YW5jZS5yZW5kZXIgPSBuZXdSZW5kZXI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGluc3RhbmNlLnJlbmRlckNhY2hlID0gW107XHJcbiAgICAgICAgLy8gdGhpcyBmbGFnIGZvcmNlcyBjaGlsZCBjb21wb25lbnRzIHdpdGggc2xvdCBjb250ZW50IHRvIHVwZGF0ZVxyXG4gICAgICAgIGlzSG1yVXBkYXRpbmcgPSB0cnVlO1xyXG4gICAgICAgIGluc3RhbmNlLnVwZGF0ZSgpO1xyXG4gICAgICAgIGlzSG1yVXBkYXRpbmcgPSBmYWxzZTtcclxuICAgIH0pO1xyXG59XHJcbmZ1bmN0aW9uIHJlbG9hZChpZCwgbmV3Q29tcCkge1xyXG4gICAgY29uc3QgcmVjb3JkID0gbWFwLmdldChpZCk7XHJcbiAgICBpZiAoIXJlY29yZClcclxuICAgICAgICByZXR1cm47XHJcbiAgICAvLyBBcnJheS5mcm9tIGNyZWF0ZXMgYSBzbmFwc2hvdCB3aGljaCBhdm9pZHMgdGhlIHNldCBiZWluZyBtdXRhdGVkIGR1cmluZ1xyXG4gICAgLy8gdXBkYXRlc1xyXG4gICAgY29uc3QgeyBjb21wb25lbnQsIGluc3RhbmNlcyB9ID0gcmVjb3JkO1xyXG4gICAgaWYgKCFobXJEaXJ0eUNvbXBvbmVudHMuaGFzKGNvbXBvbmVudCkpIHtcclxuICAgICAgICAvLyAxLiBVcGRhdGUgZXhpc3RpbmcgY29tcCBkZWZpbml0aW9uIHRvIG1hdGNoIG5ldyBvbmVcclxuICAgICAgICBuZXdDb21wID0gaXNDbGFzc0NvbXBvbmVudChuZXdDb21wKSA/IG5ld0NvbXAuX192Y2NPcHRzIDogbmV3Q29tcDtcclxuICAgICAgICBleHRlbmQoY29tcG9uZW50LCBuZXdDb21wKTtcclxuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBjb21wb25lbnQpIHtcclxuICAgICAgICAgICAgaWYgKCEoa2V5IGluIG5ld0NvbXApKSB7XHJcbiAgICAgICAgICAgICAgICBkZWxldGUgY29tcG9uZW50W2tleV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gMi4gTWFyayBjb21wb25lbnQgZGlydHkuIFRoaXMgZm9yY2VzIHRoZSByZW5kZXJlciB0byByZXBsYWNlIHRoZSBjb21wb25lbnRcclxuICAgICAgICAvLyBvbiBwYXRjaC5cclxuICAgICAgICBobXJEaXJ0eUNvbXBvbmVudHMuYWRkKGNvbXBvbmVudCk7XHJcbiAgICAgICAgLy8gMy4gTWFrZSBzdXJlIHRvIHVubWFyayB0aGUgY29tcG9uZW50IGFmdGVyIHRoZSByZWxvYWQuXHJcbiAgICAgICAgcXVldWVQb3N0Rmx1c2hDYigoKSA9PiB7XHJcbiAgICAgICAgICAgIGhtckRpcnR5Q29tcG9uZW50cy5kZWxldGUoY29tcG9uZW50KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIEFycmF5LmZyb20oaW5zdGFuY2VzKS5mb3JFYWNoKGluc3RhbmNlID0+IHtcclxuICAgICAgICBpZiAoaW5zdGFuY2UucGFyZW50KSB7XHJcbiAgICAgICAgICAgIC8vIDQuIEZvcmNlIHRoZSBwYXJlbnQgaW5zdGFuY2UgdG8gcmUtcmVuZGVyLiBUaGlzIHdpbGwgY2F1c2UgYWxsIHVwZGF0ZWRcclxuICAgICAgICAgICAgLy8gY29tcG9uZW50cyB0byBiZSB1bm1vdW50ZWQgYW5kIHJlLW1vdW50ZWQuIFF1ZXVlIHRoZSB1cGRhdGUgc28gdGhhdCB3ZVxyXG4gICAgICAgICAgICAvLyBkb24ndCBlbmQgdXAgZm9yY2luZyB0aGUgc2FtZSBwYXJlbnQgdG8gcmUtcmVuZGVyIG11bHRpcGxlIHRpbWVzLlxyXG4gICAgICAgICAgICBxdWV1ZUpvYihpbnN0YW5jZS5wYXJlbnQudXBkYXRlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoaW5zdGFuY2UuYXBwQ29udGV4dC5yZWxvYWQpIHtcclxuICAgICAgICAgICAgLy8gcm9vdCBpbnN0YW5jZSBtb3VudGVkIHZpYSBjcmVhdGVBcHAoKSBoYXMgYSByZWxvYWQgbWV0aG9kXHJcbiAgICAgICAgICAgIGluc3RhbmNlLmFwcENvbnRleHQucmVsb2FkKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgIC8vIHJvb3QgaW5zdGFuY2UgaW5zaWRlIHRyZWUgY3JlYXRlZCB2aWEgcmF3IHJlbmRlcigpLiBGb3JjZSByZWxvYWQuXHJcbiAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignW0hNUl0gUm9vdCBvciBtYW51YWxseSBtb3VudGVkIGluc3RhbmNlIG1vZGlmaWVkLiBGdWxsIHJlbG9hZCByZXF1aXJlZC4nKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufVxyXG5mdW5jdGlvbiB0cnlXcmFwKGZuKSB7XHJcbiAgICByZXR1cm4gKGlkLCBhcmcpID0+IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICByZXR1cm4gZm4oaWQsIGFyZyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihgW0hNUl0gU29tZXRoaW5nIHdlbnQgd3JvbmcgZHVyaW5nIFZ1ZSBjb21wb25lbnQgaG90LXJlbG9hZC4gYCArXHJcbiAgICAgICAgICAgICAgICBgRnVsbCByZWxvYWQgcmVxdWlyZWQuYCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufVxuXG5sZXQgZGV2dG9vbHM7XHJcbmZ1bmN0aW9uIHNldERldnRvb2xzSG9vayhob29rKSB7XHJcbiAgICBkZXZ0b29scyA9IGhvb2s7XHJcbn1cclxuZnVuY3Rpb24gZGV2dG9vbHNJbml0QXBwKGFwcCwgdmVyc2lvbikge1xyXG4gICAgLy8gVE9ETyBxdWV1ZSBpZiBkZXZ0b29scyBpcyB1bmRlZmluZWRcclxuICAgIGlmICghZGV2dG9vbHMpXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgZGV2dG9vbHMuZW1pdChcImFwcDppbml0XCIgLyogQVBQX0lOSVQgKi8sIGFwcCwgdmVyc2lvbiwge1xyXG4gICAgICAgIEZyYWdtZW50LFxyXG4gICAgICAgIFRleHQsXHJcbiAgICAgICAgQ29tbWVudCxcclxuICAgICAgICBTdGF0aWNcclxuICAgIH0pO1xyXG59XHJcbmZ1bmN0aW9uIGRldnRvb2xzVW5tb3VudEFwcChhcHApIHtcclxuICAgIGlmICghZGV2dG9vbHMpXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgZGV2dG9vbHMuZW1pdChcImFwcDp1bm1vdW50XCIgLyogQVBQX1VOTU9VTlQgKi8sIGFwcCk7XHJcbn1cclxuY29uc3QgZGV2dG9vbHNDb21wb25lbnRBZGRlZCA9IC8qI19fUFVSRV9fKi8gY3JlYXRlRGV2dG9vbHNDb21wb25lbnRIb29rKFwiY29tcG9uZW50OmFkZGVkXCIgLyogQ09NUE9ORU5UX0FEREVEICovKTtcclxuY29uc3QgZGV2dG9vbHNDb21wb25lbnRVcGRhdGVkID0gLyojX19QVVJFX18qLyBjcmVhdGVEZXZ0b29sc0NvbXBvbmVudEhvb2soXCJjb21wb25lbnQ6dXBkYXRlZFwiIC8qIENPTVBPTkVOVF9VUERBVEVEICovKTtcclxuY29uc3QgZGV2dG9vbHNDb21wb25lbnRSZW1vdmVkID0gLyojX19QVVJFX18qLyBjcmVhdGVEZXZ0b29sc0NvbXBvbmVudEhvb2soXCJjb21wb25lbnQ6cmVtb3ZlZFwiIC8qIENPTVBPTkVOVF9SRU1PVkVEICovKTtcclxuZnVuY3Rpb24gY3JlYXRlRGV2dG9vbHNDb21wb25lbnRIb29rKGhvb2spIHtcclxuICAgIHJldHVybiAoY29tcG9uZW50KSA9PiB7XHJcbiAgICAgICAgaWYgKCFkZXZ0b29scylcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIGRldnRvb2xzLmVtaXQoaG9vaywgY29tcG9uZW50LmFwcENvbnRleHQuYXBwLCBjb21wb25lbnQudWlkLCBjb21wb25lbnQucGFyZW50ID8gY29tcG9uZW50LnBhcmVudC51aWQgOiB1bmRlZmluZWQpO1xyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiBkZXZ0b29sc0NvbXBvbmVudEVtaXQoY29tcG9uZW50LCBldmVudCwgcGFyYW1zKSB7XHJcbiAgICBpZiAoIWRldnRvb2xzKVxyXG4gICAgICAgIHJldHVybjtcclxuICAgIGRldnRvb2xzLmVtaXQoXCJjb21wb25lbnQ6ZW1pdFwiIC8qIENPTVBPTkVOVF9FTUlUICovLCBjb21wb25lbnQuYXBwQ29udGV4dC5hcHAsIGNvbXBvbmVudCwgZXZlbnQsIHBhcmFtcyk7XHJcbn1cblxuZnVuY3Rpb24gZW1pdChpbnN0YW5jZSwgZXZlbnQsIC4uLnJhd0FyZ3MpIHtcclxuICAgIGNvbnN0IHByb3BzID0gaW5zdGFuY2Uudm5vZGUucHJvcHMgfHwgRU1QVFlfT0JKO1xyXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgIGNvbnN0IHsgZW1pdHNPcHRpb25zLCBwcm9wc09wdGlvbnM6IFtwcm9wc09wdGlvbnNdIH0gPSBpbnN0YW5jZTtcclxuICAgICAgICBpZiAoZW1pdHNPcHRpb25zKSB7XHJcbiAgICAgICAgICAgIGlmICghKGV2ZW50IGluIGVtaXRzT3B0aW9ucykpIHtcclxuICAgICAgICAgICAgICAgIGlmICghcHJvcHNPcHRpb25zIHx8ICEodG9IYW5kbGVyS2V5KGV2ZW50KSBpbiBwcm9wc09wdGlvbnMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2FybihgQ29tcG9uZW50IGVtaXR0ZWQgZXZlbnQgXCIke2V2ZW50fVwiIGJ1dCBpdCBpcyBuZWl0aGVyIGRlY2xhcmVkIGluIGAgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBgdGhlIGVtaXRzIG9wdGlvbiBub3IgYXMgYW4gXCIke3RvSGFuZGxlcktleShldmVudCl9XCIgcHJvcC5gKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHZhbGlkYXRvciA9IGVtaXRzT3B0aW9uc1tldmVudF07XHJcbiAgICAgICAgICAgICAgICBpZiAoaXNGdW5jdGlvbih2YWxpZGF0b3IpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaXNWYWxpZCA9IHZhbGlkYXRvciguLi5yYXdBcmdzKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWlzVmFsaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2FybihgSW52YWxpZCBldmVudCBhcmd1bWVudHM6IGV2ZW50IHZhbGlkYXRpb24gZmFpbGVkIGZvciBldmVudCBcIiR7ZXZlbnR9XCIuYCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgbGV0IGFyZ3MgPSByYXdBcmdzO1xyXG4gICAgY29uc3QgaXNNb2RlbExpc3RlbmVyID0gZXZlbnQuc3RhcnRzV2l0aCgndXBkYXRlOicpO1xyXG4gICAgLy8gZm9yIHYtbW9kZWwgdXBkYXRlOnh4eCBldmVudHMsIGFwcGx5IG1vZGlmaWVycyBvbiBhcmdzXHJcbiAgICBjb25zdCBtb2RlbEFyZyA9IGlzTW9kZWxMaXN0ZW5lciAmJiBldmVudC5zbGljZSg3KTtcclxuICAgIGlmIChtb2RlbEFyZyAmJiBtb2RlbEFyZyBpbiBwcm9wcykge1xyXG4gICAgICAgIGNvbnN0IG1vZGlmaWVyc0tleSA9IGAke21vZGVsQXJnID09PSAnbW9kZWxWYWx1ZScgPyAnbW9kZWwnIDogbW9kZWxBcmd9TW9kaWZpZXJzYDtcclxuICAgICAgICBjb25zdCB7IG51bWJlciwgdHJpbSB9ID0gcHJvcHNbbW9kaWZpZXJzS2V5XSB8fCBFTVBUWV9PQko7XHJcbiAgICAgICAgaWYgKHRyaW0pIHtcclxuICAgICAgICAgICAgYXJncyA9IHJhd0FyZ3MubWFwKGEgPT4gYS50cmltKCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChudW1iZXIpIHtcclxuICAgICAgICAgICAgYXJncyA9IHJhd0FyZ3MubWFwKHRvTnVtYmVyKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHx8IF9fVlVFX1BST0RfREVWVE9PTFNfXykge1xyXG4gICAgICAgIGRldnRvb2xzQ29tcG9uZW50RW1pdChpbnN0YW5jZSwgZXZlbnQsIGFyZ3MpO1xyXG4gICAgfVxyXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgIGNvbnN0IGxvd2VyQ2FzZUV2ZW50ID0gZXZlbnQudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICBpZiAobG93ZXJDYXNlRXZlbnQgIT09IGV2ZW50ICYmIHByb3BzW3RvSGFuZGxlcktleShsb3dlckNhc2VFdmVudCldKSB7XHJcbiAgICAgICAgICAgIHdhcm4oYEV2ZW50IFwiJHtsb3dlckNhc2VFdmVudH1cIiBpcyBlbWl0dGVkIGluIGNvbXBvbmVudCBgICtcclxuICAgICAgICAgICAgICAgIGAke2Zvcm1hdENvbXBvbmVudE5hbWUoaW5zdGFuY2UsIGluc3RhbmNlLnR5cGUpfSBidXQgdGhlIGhhbmRsZXIgaXMgcmVnaXN0ZXJlZCBmb3IgXCIke2V2ZW50fVwiLiBgICtcclxuICAgICAgICAgICAgICAgIGBOb3RlIHRoYXQgSFRNTCBhdHRyaWJ1dGVzIGFyZSBjYXNlLWluc2Vuc2l0aXZlIGFuZCB5b3UgY2Fubm90IHVzZSBgICtcclxuICAgICAgICAgICAgICAgIGB2LW9uIHRvIGxpc3RlbiB0byBjYW1lbENhc2UgZXZlbnRzIHdoZW4gdXNpbmcgaW4tRE9NIHRlbXBsYXRlcy4gYCArXHJcbiAgICAgICAgICAgICAgICBgWW91IHNob3VsZCBwcm9iYWJseSB1c2UgXCIke2h5cGhlbmF0ZShldmVudCl9XCIgaW5zdGVhZCBvZiBcIiR7ZXZlbnR9XCIuYCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gY29udmVydCBoYW5kbGVyIG5hbWUgdG8gY2FtZWxDYXNlLiBTZWUgaXNzdWUgIzIyNDlcclxuICAgIGxldCBoYW5kbGVyTmFtZSA9IHRvSGFuZGxlcktleShjYW1lbGl6ZShldmVudCkpO1xyXG4gICAgbGV0IGhhbmRsZXIgPSBwcm9wc1toYW5kbGVyTmFtZV07XHJcbiAgICAvLyBmb3Igdi1tb2RlbCB1cGRhdGU6eHh4IGV2ZW50cywgYWxzbyB0cmlnZ2VyIGtlYmFiLWNhc2UgZXF1aXZhbGVudFxyXG4gICAgLy8gZm9yIHByb3BzIHBhc3NlZCB2aWEga2ViYWItY2FzZVxyXG4gICAgaWYgKCFoYW5kbGVyICYmIGlzTW9kZWxMaXN0ZW5lcikge1xyXG4gICAgICAgIGhhbmRsZXJOYW1lID0gdG9IYW5kbGVyS2V5KGh5cGhlbmF0ZShldmVudCkpO1xyXG4gICAgICAgIGhhbmRsZXIgPSBwcm9wc1toYW5kbGVyTmFtZV07XHJcbiAgICB9XHJcbiAgICBpZiAoaGFuZGxlcikge1xyXG4gICAgICAgIGNhbGxXaXRoQXN5bmNFcnJvckhhbmRsaW5nKGhhbmRsZXIsIGluc3RhbmNlLCA2IC8qIENPTVBPTkVOVF9FVkVOVF9IQU5ETEVSICovLCBhcmdzKTtcclxuICAgIH1cclxuICAgIGNvbnN0IG9uY2VIYW5kbGVyID0gcHJvcHNbaGFuZGxlck5hbWUgKyBgT25jZWBdO1xyXG4gICAgaWYgKG9uY2VIYW5kbGVyKSB7XHJcbiAgICAgICAgaWYgKCFpbnN0YW5jZS5lbWl0dGVkKSB7XHJcbiAgICAgICAgICAgIChpbnN0YW5jZS5lbWl0dGVkID0ge30pW2hhbmRsZXJOYW1lXSA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGluc3RhbmNlLmVtaXR0ZWRbaGFuZGxlck5hbWVdKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2FsbFdpdGhBc3luY0Vycm9ySGFuZGxpbmcob25jZUhhbmRsZXIsIGluc3RhbmNlLCA2IC8qIENPTVBPTkVOVF9FVkVOVF9IQU5ETEVSICovLCBhcmdzKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBub3JtYWxpemVFbWl0c09wdGlvbnMoY29tcCwgYXBwQ29udGV4dCwgYXNNaXhpbiA9IGZhbHNlKSB7XHJcbiAgICBpZiAoIWFwcENvbnRleHQuZGVvcHQgJiYgY29tcC5fX2VtaXRzICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICByZXR1cm4gY29tcC5fX2VtaXRzO1xyXG4gICAgfVxyXG4gICAgY29uc3QgcmF3ID0gY29tcC5lbWl0cztcclxuICAgIGxldCBub3JtYWxpemVkID0ge307XHJcbiAgICAvLyBhcHBseSBtaXhpbi9leHRlbmRzIHByb3BzXHJcbiAgICBsZXQgaGFzRXh0ZW5kcyA9IGZhbHNlO1xyXG4gICAgaWYgKF9fVlVFX09QVElPTlNfQVBJX18gJiYgIWlzRnVuY3Rpb24oY29tcCkpIHtcclxuICAgICAgICBjb25zdCBleHRlbmRFbWl0cyA9IChyYXcpID0+IHtcclxuICAgICAgICAgICAgaGFzRXh0ZW5kcyA9IHRydWU7XHJcbiAgICAgICAgICAgIGV4dGVuZChub3JtYWxpemVkLCBub3JtYWxpemVFbWl0c09wdGlvbnMocmF3LCBhcHBDb250ZXh0LCB0cnVlKSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBpZiAoIWFzTWl4aW4gJiYgYXBwQ29udGV4dC5taXhpbnMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGFwcENvbnRleHQubWl4aW5zLmZvckVhY2goZXh0ZW5kRW1pdHMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoY29tcC5leHRlbmRzKSB7XHJcbiAgICAgICAgICAgIGV4dGVuZEVtaXRzKGNvbXAuZXh0ZW5kcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChjb21wLm1peGlucykge1xyXG4gICAgICAgICAgICBjb21wLm1peGlucy5mb3JFYWNoKGV4dGVuZEVtaXRzKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAoIXJhdyAmJiAhaGFzRXh0ZW5kcykge1xyXG4gICAgICAgIHJldHVybiAoY29tcC5fX2VtaXRzID0gbnVsbCk7XHJcbiAgICB9XHJcbiAgICBpZiAoaXNBcnJheShyYXcpKSB7XHJcbiAgICAgICAgcmF3LmZvckVhY2goa2V5ID0+IChub3JtYWxpemVkW2tleV0gPSBudWxsKSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBleHRlbmQobm9ybWFsaXplZCwgcmF3KTtcclxuICAgIH1cclxuICAgIHJldHVybiAoY29tcC5fX2VtaXRzID0gbm9ybWFsaXplZCk7XHJcbn1cclxuLy8gQ2hlY2sgaWYgYW4gaW5jb21pbmcgcHJvcCBrZXkgaXMgYSBkZWNsYXJlZCBlbWl0IGV2ZW50IGxpc3RlbmVyLlxyXG4vLyBlLmcuIFdpdGggYGVtaXRzOiB7IGNsaWNrOiBudWxsIH1gLCBwcm9wcyBuYW1lZCBgb25DbGlja2AgYW5kIGBvbmNsaWNrYCBhcmVcclxuLy8gYm90aCBjb25zaWRlcmVkIG1hdGNoZWQgbGlzdGVuZXJzLlxyXG5mdW5jdGlvbiBpc0VtaXRMaXN0ZW5lcihvcHRpb25zLCBrZXkpIHtcclxuICAgIGlmICghb3B0aW9ucyB8fCAhaXNPbihrZXkpKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAga2V5ID0ga2V5LnNsaWNlKDIpLnJlcGxhY2UoL09uY2UkLywgJycpO1xyXG4gICAgcmV0dXJuIChoYXNPd24ob3B0aW9ucywga2V5WzBdLnRvTG93ZXJDYXNlKCkgKyBrZXkuc2xpY2UoMSkpIHx8XHJcbiAgICAgICAgaGFzT3duKG9wdGlvbnMsIGh5cGhlbmF0ZShrZXkpKSB8fFxyXG4gICAgICAgIGhhc093bihvcHRpb25zLCBrZXkpKTtcclxufVxuXG4vKipcclxuICogbWFyayB0aGUgY3VycmVudCByZW5kZXJpbmcgaW5zdGFuY2UgZm9yIGFzc2V0IHJlc29sdXRpb24gKGUuZy5cclxuICogcmVzb2x2ZUNvbXBvbmVudCwgcmVzb2x2ZURpcmVjdGl2ZSkgZHVyaW5nIHJlbmRlclxyXG4gKi9cclxubGV0IGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSA9IG51bGw7XHJcbmZ1bmN0aW9uIHNldEN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZShpbnN0YW5jZSkge1xyXG4gICAgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlID0gaW5zdGFuY2U7XHJcbn1cclxuLyoqXHJcbiAqIGRldiBvbmx5IGZsYWcgdG8gdHJhY2sgd2hldGhlciAkYXR0cnMgd2FzIHVzZWQgZHVyaW5nIHJlbmRlci5cclxuICogSWYgJGF0dHJzIHdhcyB1c2VkIGR1cmluZyByZW5kZXIgdGhlbiB0aGUgd2FybmluZyBmb3IgZmFpbGVkIGF0dHJzXHJcbiAqIGZhbGx0aHJvdWdoIGNhbiBiZSBzdXBwcmVzc2VkLlxyXG4gKi9cclxubGV0IGFjY2Vzc2VkQXR0cnMgPSBmYWxzZTtcclxuZnVuY3Rpb24gbWFya0F0dHJzQWNjZXNzZWQoKSB7XHJcbiAgICBhY2Nlc3NlZEF0dHJzID0gdHJ1ZTtcclxufVxyXG5mdW5jdGlvbiByZW5kZXJDb21wb25lbnRSb290KGluc3RhbmNlKSB7XHJcbiAgICBjb25zdCB7IHR5cGU6IENvbXBvbmVudCwgdm5vZGUsIHByb3h5LCB3aXRoUHJveHksIHByb3BzLCBwcm9wc09wdGlvbnM6IFtwcm9wc09wdGlvbnNdLCBzbG90cywgYXR0cnMsIGVtaXQsIHJlbmRlciwgcmVuZGVyQ2FjaGUsIGRhdGEsIHNldHVwU3RhdGUsIGN0eCB9ID0gaW5zdGFuY2U7XHJcbiAgICBsZXQgcmVzdWx0O1xyXG4gICAgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlID0gaW5zdGFuY2U7XHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgYWNjZXNzZWRBdHRycyA9IGZhbHNlO1xyXG4gICAgfVxyXG4gICAgdHJ5IHtcclxuICAgICAgICBsZXQgZmFsbHRocm91Z2hBdHRycztcclxuICAgICAgICBpZiAodm5vZGUuc2hhcGVGbGFnICYgNCAvKiBTVEFURUZVTF9DT01QT05FTlQgKi8pIHtcclxuICAgICAgICAgICAgLy8gd2l0aFByb3h5IGlzIGEgcHJveHkgd2l0aCBhIGRpZmZlcmVudCBgaGFzYCB0cmFwIG9ubHkgZm9yXHJcbiAgICAgICAgICAgIC8vIHJ1bnRpbWUtY29tcGlsZWQgcmVuZGVyIGZ1bmN0aW9ucyB1c2luZyBgd2l0aGAgYmxvY2suXHJcbiAgICAgICAgICAgIGNvbnN0IHByb3h5VG9Vc2UgPSB3aXRoUHJveHkgfHwgcHJveHk7XHJcbiAgICAgICAgICAgIHJlc3VsdCA9IG5vcm1hbGl6ZVZOb2RlKHJlbmRlci5jYWxsKHByb3h5VG9Vc2UsIHByb3h5VG9Vc2UsIHJlbmRlckNhY2hlLCBwcm9wcywgc2V0dXBTdGF0ZSwgZGF0YSwgY3R4KSk7XHJcbiAgICAgICAgICAgIGZhbGx0aHJvdWdoQXR0cnMgPSBhdHRycztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIGZ1bmN0aW9uYWxcclxuICAgICAgICAgICAgY29uc3QgcmVuZGVyID0gQ29tcG9uZW50O1xyXG4gICAgICAgICAgICAvLyBpbiBkZXYsIG1hcmsgYXR0cnMgYWNjZXNzZWQgaWYgb3B0aW9uYWwgcHJvcHMgKGF0dHJzID09PSBwcm9wcylcclxuICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBhdHRycyA9PT0gcHJvcHMpIHtcclxuICAgICAgICAgICAgICAgIG1hcmtBdHRyc0FjY2Vzc2VkKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmVzdWx0ID0gbm9ybWFsaXplVk5vZGUocmVuZGVyLmxlbmd0aCA+IDFcclxuICAgICAgICAgICAgICAgID8gcmVuZGVyKHByb3BzLCAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJylcclxuICAgICAgICAgICAgICAgICAgICA/IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ2V0IGF0dHJzKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFya0F0dHJzQWNjZXNzZWQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhdHRycztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2xvdHMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVtaXRcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgOiB7IGF0dHJzLCBzbG90cywgZW1pdCB9KVxyXG4gICAgICAgICAgICAgICAgOiByZW5kZXIocHJvcHMsIG51bGwgLyogd2Uga25vdyBpdCBkb2Vzbid0IG5lZWQgaXQgKi8pKTtcclxuICAgICAgICAgICAgZmFsbHRocm91Z2hBdHRycyA9IENvbXBvbmVudC5wcm9wc1xyXG4gICAgICAgICAgICAgICAgPyBhdHRyc1xyXG4gICAgICAgICAgICAgICAgOiBnZXRGdW5jdGlvbmFsRmFsbHRocm91Z2goYXR0cnMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBhdHRyIG1lcmdpbmdcclxuICAgICAgICAvLyBpbiBkZXYgbW9kZSwgY29tbWVudHMgYXJlIHByZXNlcnZlZCwgYW5kIGl0J3MgcG9zc2libGUgZm9yIGEgdGVtcGxhdGVcclxuICAgICAgICAvLyB0byBoYXZlIGNvbW1lbnRzIGFsb25nIHNpZGUgdGhlIHJvb3QgZWxlbWVudCB3aGljaCBtYWtlcyBpdCBhIGZyYWdtZW50XHJcbiAgICAgICAgbGV0IHJvb3QgPSByZXN1bHQ7XHJcbiAgICAgICAgbGV0IHNldFJvb3QgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiByZXN1bHQucGF0Y2hGbGFnICYgMjA0OCAvKiBERVZfUk9PVF9GUkFHTUVOVCAqLykge1xyXG4gICAgICAgICAgICA7XHJcbiAgICAgICAgICAgIFtyb290LCBzZXRSb290XSA9IGdldENoaWxkUm9vdChyZXN1bHQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoQ29tcG9uZW50LmluaGVyaXRBdHRycyAhPT0gZmFsc2UgJiYgZmFsbHRocm91Z2hBdHRycykge1xyXG4gICAgICAgICAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoZmFsbHRocm91Z2hBdHRycyk7XHJcbiAgICAgICAgICAgIGNvbnN0IHsgc2hhcGVGbGFnIH0gPSByb290O1xyXG4gICAgICAgICAgICBpZiAoa2V5cy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIGlmIChzaGFwZUZsYWcgJiAxIC8qIEVMRU1FTlQgKi8gfHxcclxuICAgICAgICAgICAgICAgICAgICBzaGFwZUZsYWcgJiA2IC8qIENPTVBPTkVOVCAqLykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChwcm9wc09wdGlvbnMgJiYga2V5cy5zb21lKGlzTW9kZWxMaXN0ZW5lcikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgYSB2LW1vZGVsIGxpc3RlbmVyIChvblVwZGF0ZTp4eHgpIGhhcyBhIGNvcnJlc3BvbmRpbmcgZGVjbGFyZWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gcHJvcCwgaXQgaW5kaWNhdGVzIHRoaXMgY29tcG9uZW50IGV4cGVjdHMgdG8gaGFuZGxlIHYtbW9kZWwgYW5kXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGl0IHNob3VsZCBub3QgZmFsbHRocm91Z2guXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJlbGF0ZWQ6ICMxNTQzLCAjMTY0MywgIzE5ODlcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmFsbHRocm91Z2hBdHRycyA9IGZpbHRlck1vZGVsTGlzdGVuZXJzKGZhbGx0aHJvdWdoQXR0cnMsIHByb3BzT3B0aW9ucyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJvb3QgPSBjbG9uZVZOb2RlKHJvb3QsIGZhbGx0aHJvdWdoQXR0cnMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFhY2Nlc3NlZEF0dHJzICYmIHJvb3QudHlwZSAhPT0gQ29tbWVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFsbEF0dHJzID0gT2JqZWN0LmtleXMoYXR0cnMpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGV2ZW50QXR0cnMgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBleHRyYUF0dHJzID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGwgPSBhbGxBdHRycy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qga2V5ID0gYWxsQXR0cnNbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc09uKGtleSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlnbm9yZSB2LW1vZGVsIGhhbmRsZXJzIHdoZW4gdGhleSBmYWlsIHRvIGZhbGx0aHJvdWdoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlzTW9kZWxMaXN0ZW5lcihrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmVtb3ZlIGBvbmAsIGxvd2VyY2FzZSBmaXJzdCBsZXR0ZXIgdG8gcmVmbGVjdCBldmVudCBjYXNpbmdcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhY2N1cmF0ZWx5XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRBdHRycy5wdXNoKGtleVsyXS50b0xvd2VyQ2FzZSgpICsga2V5LnNsaWNlKDMpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4dHJhQXR0cnMucHVzaChrZXkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChleHRyYUF0dHJzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3YXJuKGBFeHRyYW5lb3VzIG5vbi1wcm9wcyBhdHRyaWJ1dGVzIChgICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGAke2V4dHJhQXR0cnMuam9pbignLCAnKX0pIGAgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYHdlcmUgcGFzc2VkIHRvIGNvbXBvbmVudCBidXQgY291bGQgbm90IGJlIGF1dG9tYXRpY2FsbHkgaW5oZXJpdGVkIGAgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYGJlY2F1c2UgY29tcG9uZW50IHJlbmRlcnMgZnJhZ21lbnQgb3IgdGV4dCByb290IG5vZGVzLmApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnRBdHRycy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2FybihgRXh0cmFuZW91cyBub24tZW1pdHMgZXZlbnQgbGlzdGVuZXJzIChgICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGAke2V2ZW50QXR0cnMuam9pbignLCAnKX0pIGAgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYHdlcmUgcGFzc2VkIHRvIGNvbXBvbmVudCBidXQgY291bGQgbm90IGJlIGF1dG9tYXRpY2FsbHkgaW5oZXJpdGVkIGAgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYGJlY2F1c2UgY29tcG9uZW50IHJlbmRlcnMgZnJhZ21lbnQgb3IgdGV4dCByb290IG5vZGVzLiBgICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBJZiB0aGUgbGlzdGVuZXIgaXMgaW50ZW5kZWQgdG8gYmUgYSBjb21wb25lbnQgY3VzdG9tIGV2ZW50IGxpc3RlbmVyIG9ubHksIGAgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYGRlY2xhcmUgaXQgdXNpbmcgdGhlIFwiZW1pdHNcIiBvcHRpb24uYCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGluaGVyaXQgZGlyZWN0aXZlc1xyXG4gICAgICAgIGlmICh2bm9kZS5kaXJzKSB7XHJcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIWlzRWxlbWVudFJvb3Qocm9vdCkpIHtcclxuICAgICAgICAgICAgICAgIHdhcm4oYFJ1bnRpbWUgZGlyZWN0aXZlIHVzZWQgb24gY29tcG9uZW50IHdpdGggbm9uLWVsZW1lbnQgcm9vdCBub2RlLiBgICtcclxuICAgICAgICAgICAgICAgICAgICBgVGhlIGRpcmVjdGl2ZXMgd2lsbCBub3QgZnVuY3Rpb24gYXMgaW50ZW5kZWQuYCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcm9vdC5kaXJzID0gcm9vdC5kaXJzID8gcm9vdC5kaXJzLmNvbmNhdCh2bm9kZS5kaXJzKSA6IHZub2RlLmRpcnM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGluaGVyaXQgdHJhbnNpdGlvbiBkYXRhXHJcbiAgICAgICAgaWYgKHZub2RlLnRyYW5zaXRpb24pIHtcclxuICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhaXNFbGVtZW50Um9vdChyb290KSkge1xyXG4gICAgICAgICAgICAgICAgd2FybihgQ29tcG9uZW50IGluc2lkZSA8VHJhbnNpdGlvbj4gcmVuZGVycyBub24tZWxlbWVudCByb290IG5vZGUgYCArXHJcbiAgICAgICAgICAgICAgICAgICAgYHRoYXQgY2Fubm90IGJlIGFuaW1hdGVkLmApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJvb3QudHJhbnNpdGlvbiA9IHZub2RlLnRyYW5zaXRpb247XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgc2V0Um9vdCkge1xyXG4gICAgICAgICAgICBzZXRSb290KHJvb3QpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmVzdWx0ID0gcm9vdDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgaGFuZGxlRXJyb3IoZXJyLCBpbnN0YW5jZSwgMSAvKiBSRU5ERVJfRlVOQ1RJT04gKi8pO1xyXG4gICAgICAgIHJlc3VsdCA9IGNyZWF0ZVZOb2RlKENvbW1lbnQpO1xyXG4gICAgfVxyXG4gICAgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlID0gbnVsbDtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuLyoqXHJcbiAqIGRldiBvbmx5XHJcbiAqIEluIGRldiBtb2RlLCB0ZW1wbGF0ZSByb290IGxldmVsIGNvbW1lbnRzIGFyZSByZW5kZXJlZCwgd2hpY2ggdHVybnMgdGhlXHJcbiAqIHRlbXBsYXRlIGludG8gYSBmcmFnbWVudCByb290LCBidXQgd2UgbmVlZCB0byBsb2NhdGUgdGhlIHNpbmdsZSBlbGVtZW50XHJcbiAqIHJvb3QgZm9yIGF0dHJzIGFuZCBzY29wZSBpZCBwcm9jZXNzaW5nLlxyXG4gKi9cclxuY29uc3QgZ2V0Q2hpbGRSb290ID0gKHZub2RlKSA9PiB7XHJcbiAgICBjb25zdCByYXdDaGlsZHJlbiA9IHZub2RlLmNoaWxkcmVuO1xyXG4gICAgY29uc3QgZHluYW1pY0NoaWxkcmVuID0gdm5vZGUuZHluYW1pY0NoaWxkcmVuO1xyXG4gICAgY29uc3QgY2hpbGRSb290ID0gZmlsdGVyU2luZ2xlUm9vdChyYXdDaGlsZHJlbik7XHJcbiAgICBpZiAoIWNoaWxkUm9vdCkge1xyXG4gICAgICAgIHJldHVybiBbdm5vZGUsIHVuZGVmaW5lZF07XHJcbiAgICB9XHJcbiAgICBjb25zdCBpbmRleCA9IHJhd0NoaWxkcmVuLmluZGV4T2YoY2hpbGRSb290KTtcclxuICAgIGNvbnN0IGR5bmFtaWNJbmRleCA9IGR5bmFtaWNDaGlsZHJlbiA/IGR5bmFtaWNDaGlsZHJlbi5pbmRleE9mKGNoaWxkUm9vdCkgOiAtMTtcclxuICAgIGNvbnN0IHNldFJvb3QgPSAodXBkYXRlZFJvb3QpID0+IHtcclxuICAgICAgICByYXdDaGlsZHJlbltpbmRleF0gPSB1cGRhdGVkUm9vdDtcclxuICAgICAgICBpZiAoZHluYW1pY0NoaWxkcmVuKSB7XHJcbiAgICAgICAgICAgIGlmIChkeW5hbWljSW5kZXggPiAtMSkge1xyXG4gICAgICAgICAgICAgICAgZHluYW1pY0NoaWxkcmVuW2R5bmFtaWNJbmRleF0gPSB1cGRhdGVkUm9vdDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICh1cGRhdGVkUm9vdC5wYXRjaEZsYWcgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICB2bm9kZS5keW5hbWljQ2hpbGRyZW4gPSBbLi4uZHluYW1pY0NoaWxkcmVuLCB1cGRhdGVkUm9vdF07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFtub3JtYWxpemVWTm9kZShjaGlsZFJvb3QpLCBzZXRSb290XTtcclxufTtcclxuZnVuY3Rpb24gZmlsdGVyU2luZ2xlUm9vdChjaGlsZHJlbikge1xyXG4gICAgbGV0IHNpbmdsZVJvb3Q7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgY29uc3QgY2hpbGQgPSBjaGlsZHJlbltpXTtcclxuICAgICAgICBpZiAoaXNWTm9kZShjaGlsZCkpIHtcclxuICAgICAgICAgICAgLy8gaWdub3JlIHVzZXIgY29tbWVudFxyXG4gICAgICAgICAgICBpZiAoY2hpbGQudHlwZSAhPT0gQ29tbWVudCB8fCBjaGlsZC5jaGlsZHJlbiA9PT0gJ3YtaWYnKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc2luZ2xlUm9vdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGhhcyBtb3JlIHRoYW4gMSBub24tY29tbWVudCBjaGlsZCwgcmV0dXJuIG5vd1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHNpbmdsZVJvb3QgPSBjaGlsZDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBzaW5nbGVSb290O1xyXG59XHJcbmNvbnN0IGdldEZ1bmN0aW9uYWxGYWxsdGhyb3VnaCA9IChhdHRycykgPT4ge1xyXG4gICAgbGV0IHJlcztcclxuICAgIGZvciAoY29uc3Qga2V5IGluIGF0dHJzKSB7XHJcbiAgICAgICAgaWYgKGtleSA9PT0gJ2NsYXNzJyB8fCBrZXkgPT09ICdzdHlsZScgfHwgaXNPbihrZXkpKSB7XHJcbiAgICAgICAgICAgIChyZXMgfHwgKHJlcyA9IHt9KSlba2V5XSA9IGF0dHJzW2tleV07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlcztcclxufTtcclxuY29uc3QgZmlsdGVyTW9kZWxMaXN0ZW5lcnMgPSAoYXR0cnMsIHByb3BzKSA9PiB7XHJcbiAgICBjb25zdCByZXMgPSB7fTtcclxuICAgIGZvciAoY29uc3Qga2V5IGluIGF0dHJzKSB7XHJcbiAgICAgICAgaWYgKCFpc01vZGVsTGlzdGVuZXIoa2V5KSB8fCAhKGtleS5zbGljZSg5KSBpbiBwcm9wcykpIHtcclxuICAgICAgICAgICAgcmVzW2tleV0gPSBhdHRyc1trZXldO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiByZXM7XHJcbn07XHJcbmNvbnN0IGlzRWxlbWVudFJvb3QgPSAodm5vZGUpID0+IHtcclxuICAgIHJldHVybiAodm5vZGUuc2hhcGVGbGFnICYgNiAvKiBDT01QT05FTlQgKi8gfHxcclxuICAgICAgICB2bm9kZS5zaGFwZUZsYWcgJiAxIC8qIEVMRU1FTlQgKi8gfHxcclxuICAgICAgICB2bm9kZS50eXBlID09PSBDb21tZW50IC8vIHBvdGVudGlhbCB2LWlmIGJyYW5jaCBzd2l0Y2hcclxuICAgICk7XHJcbn07XHJcbmZ1bmN0aW9uIHNob3VsZFVwZGF0ZUNvbXBvbmVudChwcmV2Vk5vZGUsIG5leHRWTm9kZSwgb3B0aW1pemVkKSB7XHJcbiAgICBjb25zdCB7IHByb3BzOiBwcmV2UHJvcHMsIGNoaWxkcmVuOiBwcmV2Q2hpbGRyZW4sIGNvbXBvbmVudCB9ID0gcHJldlZOb2RlO1xyXG4gICAgY29uc3QgeyBwcm9wczogbmV4dFByb3BzLCBjaGlsZHJlbjogbmV4dENoaWxkcmVuLCBwYXRjaEZsYWcgfSA9IG5leHRWTm9kZTtcclxuICAgIGNvbnN0IGVtaXRzID0gY29tcG9uZW50LmVtaXRzT3B0aW9ucztcclxuICAgIC8vIFBhcmVudCBjb21wb25lbnQncyByZW5kZXIgZnVuY3Rpb24gd2FzIGhvdC11cGRhdGVkLiBTaW5jZSB0aGlzIG1heSBoYXZlXHJcbiAgICAvLyBjYXVzZWQgdGhlIGNoaWxkIGNvbXBvbmVudCdzIHNsb3RzIGNvbnRlbnQgdG8gaGF2ZSBjaGFuZ2VkLCB3ZSBuZWVkIHRvXHJcbiAgICAvLyBmb3JjZSB0aGUgY2hpbGQgdG8gdXBkYXRlIGFzIHdlbGwuXHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIChwcmV2Q2hpbGRyZW4gfHwgbmV4dENoaWxkcmVuKSAmJiBpc0htclVwZGF0aW5nKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICAvLyBmb3JjZSBjaGlsZCB1cGRhdGUgZm9yIHJ1bnRpbWUgZGlyZWN0aXZlIG9yIHRyYW5zaXRpb24gb24gY29tcG9uZW50IHZub2RlLlxyXG4gICAgaWYgKG5leHRWTm9kZS5kaXJzIHx8IG5leHRWTm9kZS50cmFuc2l0aW9uKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICBpZiAob3B0aW1pemVkICYmIHBhdGNoRmxhZyA+PSAwKSB7XHJcbiAgICAgICAgaWYgKHBhdGNoRmxhZyAmIDEwMjQgLyogRFlOQU1JQ19TTE9UUyAqLykge1xyXG4gICAgICAgICAgICAvLyBzbG90IGNvbnRlbnQgdGhhdCByZWZlcmVuY2VzIHZhbHVlcyB0aGF0IG1pZ2h0IGhhdmUgY2hhbmdlZCxcclxuICAgICAgICAgICAgLy8gZS5nLiBpbiBhIHYtZm9yXHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocGF0Y2hGbGFnICYgMTYgLyogRlVMTF9QUk9QUyAqLykge1xyXG4gICAgICAgICAgICBpZiAoIXByZXZQcm9wcykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICEhbmV4dFByb3BzO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIHByZXNlbmNlIG9mIHRoaXMgZmxhZyBpbmRpY2F0ZXMgcHJvcHMgYXJlIGFsd2F5cyBub24tbnVsbFxyXG4gICAgICAgICAgICByZXR1cm4gaGFzUHJvcHNDaGFuZ2VkKHByZXZQcm9wcywgbmV4dFByb3BzLCBlbWl0cyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHBhdGNoRmxhZyAmIDggLyogUFJPUFMgKi8pIHtcclxuICAgICAgICAgICAgY29uc3QgZHluYW1pY1Byb3BzID0gbmV4dFZOb2RlLmR5bmFtaWNQcm9wcztcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkeW5hbWljUHJvcHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGtleSA9IGR5bmFtaWNQcm9wc1tpXTtcclxuICAgICAgICAgICAgICAgIGlmIChuZXh0UHJvcHNba2V5XSAhPT0gcHJldlByb3BzW2tleV0gJiZcclxuICAgICAgICAgICAgICAgICAgICAhaXNFbWl0TGlzdGVuZXIoZW1pdHMsIGtleSkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIC8vIHRoaXMgcGF0aCBpcyBvbmx5IHRha2VuIGJ5IG1hbnVhbGx5IHdyaXR0ZW4gcmVuZGVyIGZ1bmN0aW9uc1xyXG4gICAgICAgIC8vIHNvIHByZXNlbmNlIG9mIGFueSBjaGlsZHJlbiBsZWFkcyB0byBhIGZvcmNlZCB1cGRhdGVcclxuICAgICAgICBpZiAocHJldkNoaWxkcmVuIHx8IG5leHRDaGlsZHJlbikge1xyXG4gICAgICAgICAgICBpZiAoIW5leHRDaGlsZHJlbiB8fCAhbmV4dENoaWxkcmVuLiRzdGFibGUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChwcmV2UHJvcHMgPT09IG5leHRQcm9wcykge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghcHJldlByb3BzKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAhIW5leHRQcm9wcztcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFuZXh0UHJvcHMpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBoYXNQcm9wc0NoYW5nZWQocHJldlByb3BzLCBuZXh0UHJvcHMsIGVtaXRzKTtcclxuICAgIH1cclxuICAgIHJldHVybiBmYWxzZTtcclxufVxyXG5mdW5jdGlvbiBoYXNQcm9wc0NoYW5nZWQocHJldlByb3BzLCBuZXh0UHJvcHMsIGVtaXRzT3B0aW9ucykge1xyXG4gICAgY29uc3QgbmV4dEtleXMgPSBPYmplY3Qua2V5cyhuZXh0UHJvcHMpO1xyXG4gICAgaWYgKG5leHRLZXlzLmxlbmd0aCAhPT0gT2JqZWN0LmtleXMocHJldlByb3BzKS5sZW5ndGgpIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbmV4dEtleXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBjb25zdCBrZXkgPSBuZXh0S2V5c1tpXTtcclxuICAgICAgICBpZiAobmV4dFByb3BzW2tleV0gIT09IHByZXZQcm9wc1trZXldICYmXHJcbiAgICAgICAgICAgICFpc0VtaXRMaXN0ZW5lcihlbWl0c09wdGlvbnMsIGtleSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG59XHJcbmZ1bmN0aW9uIHVwZGF0ZUhPQ0hvc3RFbCh7IHZub2RlLCBwYXJlbnQgfSwgZWwgLy8gSG9zdE5vZGVcclxuKSB7XHJcbiAgICB3aGlsZSAocGFyZW50ICYmIHBhcmVudC5zdWJUcmVlID09PSB2bm9kZSkge1xyXG4gICAgICAgICh2bm9kZSA9IHBhcmVudC52bm9kZSkuZWwgPSBlbDtcclxuICAgICAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50O1xyXG4gICAgfVxyXG59XG5cbmNvbnN0IGlzU3VzcGVuc2UgPSAodHlwZSkgPT4gdHlwZS5fX2lzU3VzcGVuc2U7XHJcbi8vIFN1c3BlbnNlIGV4cG9zZXMgYSBjb21wb25lbnQtbGlrZSBBUEksIGFuZCBpcyB0cmVhdGVkIGxpa2UgYSBjb21wb25lbnRcclxuLy8gaW4gdGhlIGNvbXBpbGVyLCBidXQgaW50ZXJuYWxseSBpdCdzIGEgc3BlY2lhbCBidWlsdC1pbiB0eXBlIHRoYXQgaG9va3NcclxuLy8gZGlyZWN0bHkgaW50byB0aGUgcmVuZGVyZXIuXHJcbmNvbnN0IFN1c3BlbnNlSW1wbCA9IHtcclxuICAgIC8vIEluIG9yZGVyIHRvIG1ha2UgU3VzcGVuc2UgdHJlZS1zaGFrYWJsZSwgd2UgbmVlZCB0byBhdm9pZCBpbXBvcnRpbmcgaXRcclxuICAgIC8vIGRpcmVjdGx5IGluIHRoZSByZW5kZXJlci4gVGhlIHJlbmRlcmVyIGNoZWNrcyBmb3IgdGhlIF9faXNTdXNwZW5zZSBmbGFnXHJcbiAgICAvLyBvbiBhIHZub2RlJ3MgdHlwZSBhbmQgY2FsbHMgdGhlIGBwcm9jZXNzYCBtZXRob2QsIHBhc3NpbmcgaW4gcmVuZGVyZXJcclxuICAgIC8vIGludGVybmFscy5cclxuICAgIF9faXNTdXNwZW5zZTogdHJ1ZSxcclxuICAgIHByb2Nlc3MobjEsIG4yLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIG9wdGltaXplZCwgXHJcbiAgICAvLyBwbGF0Zm9ybS1zcGVjaWZpYyBpbXBsIHBhc3NlZCBmcm9tIHJlbmRlcmVyXHJcbiAgICByZW5kZXJlckludGVybmFscykge1xyXG4gICAgICAgIGlmIChuMSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIG1vdW50U3VzcGVuc2UobjIsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgb3B0aW1pemVkLCByZW5kZXJlckludGVybmFscyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBwYXRjaFN1c3BlbnNlKG4xLCBuMiwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgaXNTVkcsIHJlbmRlcmVySW50ZXJuYWxzKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgaHlkcmF0ZTogaHlkcmF0ZVN1c3BlbnNlLFxyXG4gICAgY3JlYXRlOiBjcmVhdGVTdXNwZW5zZUJvdW5kYXJ5XHJcbn07XHJcbi8vIEZvcmNlLWNhc3RlZCBwdWJsaWMgdHlwaW5nIGZvciBoIGFuZCBUU1ggcHJvcHMgaW5mZXJlbmNlXHJcbmNvbnN0IFN1c3BlbnNlID0gKCBTdXNwZW5zZUltcGxcclxuICAgICk7XHJcbmZ1bmN0aW9uIG1vdW50U3VzcGVuc2Uodm5vZGUsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgb3B0aW1pemVkLCByZW5kZXJlckludGVybmFscykge1xyXG4gICAgY29uc3QgeyBwOiBwYXRjaCwgbzogeyBjcmVhdGVFbGVtZW50IH0gfSA9IHJlbmRlcmVySW50ZXJuYWxzO1xyXG4gICAgY29uc3QgaGlkZGVuQ29udGFpbmVyID0gY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICBjb25zdCBzdXNwZW5zZSA9ICh2bm9kZS5zdXNwZW5zZSA9IGNyZWF0ZVN1c3BlbnNlQm91bmRhcnkodm5vZGUsIHBhcmVudFN1c3BlbnNlLCBwYXJlbnRDb21wb25lbnQsIGNvbnRhaW5lciwgaGlkZGVuQ29udGFpbmVyLCBhbmNob3IsIGlzU1ZHLCBvcHRpbWl6ZWQsIHJlbmRlcmVySW50ZXJuYWxzKSk7XHJcbiAgICAvLyBzdGFydCBtb3VudGluZyB0aGUgY29udGVudCBzdWJ0cmVlIGluIGFuIG9mZi1kb20gY29udGFpbmVyXHJcbiAgICBwYXRjaChudWxsLCAoc3VzcGVuc2UucGVuZGluZ0JyYW5jaCA9IHZub2RlLnNzQ29udGVudCksIGhpZGRlbkNvbnRhaW5lciwgbnVsbCwgcGFyZW50Q29tcG9uZW50LCBzdXNwZW5zZSwgaXNTVkcpO1xyXG4gICAgLy8gbm93IGNoZWNrIGlmIHdlIGhhdmUgZW5jb3VudGVyZWQgYW55IGFzeW5jIGRlcHNcclxuICAgIGlmIChzdXNwZW5zZS5kZXBzID4gMCkge1xyXG4gICAgICAgIC8vIGhhcyBhc3luY1xyXG4gICAgICAgIC8vIG1vdW50IHRoZSBmYWxsYmFjayB0cmVlXHJcbiAgICAgICAgcGF0Y2gobnVsbCwgdm5vZGUuc3NGYWxsYmFjaywgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgbnVsbCwgLy8gZmFsbGJhY2sgdHJlZSB3aWxsIG5vdCBoYXZlIHN1c3BlbnNlIGNvbnRleHRcclxuICAgICAgICBpc1NWRyk7XHJcbiAgICAgICAgc2V0QWN0aXZlQnJhbmNoKHN1c3BlbnNlLCB2bm9kZS5zc0ZhbGxiYWNrKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIC8vIFN1c3BlbnNlIGhhcyBubyBhc3luYyBkZXBzLiBKdXN0IHJlc29sdmUuXHJcbiAgICAgICAgc3VzcGVuc2UucmVzb2x2ZSgpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIHBhdGNoU3VzcGVuc2UobjEsIG4yLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBpc1NWRywgeyBwOiBwYXRjaCwgdW06IHVubW91bnQsIG86IHsgY3JlYXRlRWxlbWVudCB9IH0pIHtcclxuICAgIGNvbnN0IHN1c3BlbnNlID0gKG4yLnN1c3BlbnNlID0gbjEuc3VzcGVuc2UpO1xyXG4gICAgc3VzcGVuc2Uudm5vZGUgPSBuMjtcclxuICAgIG4yLmVsID0gbjEuZWw7XHJcbiAgICBjb25zdCBuZXdCcmFuY2ggPSBuMi5zc0NvbnRlbnQ7XHJcbiAgICBjb25zdCBuZXdGYWxsYmFjayA9IG4yLnNzRmFsbGJhY2s7XHJcbiAgICBjb25zdCB7IGFjdGl2ZUJyYW5jaCwgcGVuZGluZ0JyYW5jaCwgaXNJbkZhbGxiYWNrLCBpc0h5ZHJhdGluZyB9ID0gc3VzcGVuc2U7XHJcbiAgICBpZiAocGVuZGluZ0JyYW5jaCkge1xyXG4gICAgICAgIHN1c3BlbnNlLnBlbmRpbmdCcmFuY2ggPSBuZXdCcmFuY2g7XHJcbiAgICAgICAgaWYgKGlzU2FtZVZOb2RlVHlwZShuZXdCcmFuY2gsIHBlbmRpbmdCcmFuY2gpKSB7XHJcbiAgICAgICAgICAgIC8vIHNhbWUgcm9vdCB0eXBlIGJ1dCBjb250ZW50IG1heSBoYXZlIGNoYW5nZWQuXHJcbiAgICAgICAgICAgIHBhdGNoKHBlbmRpbmdCcmFuY2gsIG5ld0JyYW5jaCwgc3VzcGVuc2UuaGlkZGVuQ29udGFpbmVyLCBudWxsLCBwYXJlbnRDb21wb25lbnQsIHN1c3BlbnNlLCBpc1NWRyk7XHJcbiAgICAgICAgICAgIGlmIChzdXNwZW5zZS5kZXBzIDw9IDApIHtcclxuICAgICAgICAgICAgICAgIHN1c3BlbnNlLnJlc29sdmUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChpc0luRmFsbGJhY2spIHtcclxuICAgICAgICAgICAgICAgIHBhdGNoKGFjdGl2ZUJyYW5jaCwgbmV3RmFsbGJhY2ssIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIG51bGwsIC8vIGZhbGxiYWNrIHRyZWUgd2lsbCBub3QgaGF2ZSBzdXNwZW5zZSBjb250ZXh0XHJcbiAgICAgICAgICAgICAgICBpc1NWRyk7XHJcbiAgICAgICAgICAgICAgICBzZXRBY3RpdmVCcmFuY2goc3VzcGVuc2UsIG5ld0ZhbGxiYWNrKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gdG9nZ2xlZCBiZWZvcmUgcGVuZGluZyB0cmVlIGlzIHJlc29sdmVkXHJcbiAgICAgICAgICAgIHN1c3BlbnNlLnBlbmRpbmdJZCsrO1xyXG4gICAgICAgICAgICBpZiAoaXNIeWRyYXRpbmcpIHtcclxuICAgICAgICAgICAgICAgIC8vIGlmIHRvZ2dsZWQgYmVmb3JlIGh5ZHJhdGlvbiBpcyBmaW5pc2hlZCwgdGhlIGN1cnJlbnQgRE9NIHRyZWUgaXNcclxuICAgICAgICAgICAgICAgIC8vIG5vIGxvbmdlciB2YWxpZC4gc2V0IGl0IGFzIHRoZSBhY3RpdmUgYnJhbmNoIHNvIGl0IHdpbGwgYmUgdW5tb3VudGVkXHJcbiAgICAgICAgICAgICAgICAvLyB3aGVuIHJlc29sdmVkXHJcbiAgICAgICAgICAgICAgICBzdXNwZW5zZS5pc0h5ZHJhdGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgc3VzcGVuc2UuYWN0aXZlQnJhbmNoID0gcGVuZGluZ0JyYW5jaDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHVubW91bnQocGVuZGluZ0JyYW5jaCwgcGFyZW50Q29tcG9uZW50LCBzdXNwZW5zZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gaW5jcmVtZW50IHBlbmRpbmcgSUQuIHRoaXMgaXMgdXNlZCB0byBpbnZhbGlkYXRlIGFzeW5jIGNhbGxiYWNrc1xyXG4gICAgICAgICAgICAvLyByZXNldCBzdXNwZW5zZSBzdGF0ZVxyXG4gICAgICAgICAgICBzdXNwZW5zZS5kZXBzID0gMDtcclxuICAgICAgICAgICAgLy8gZGlzY2FyZCBlZmZlY3RzIGZyb20gcGVuZGluZyBicmFuY2hcclxuICAgICAgICAgICAgc3VzcGVuc2UuZWZmZWN0cy5sZW5ndGggPSAwO1xyXG4gICAgICAgICAgICAvLyBkaXNjYXJkIHByZXZpb3VzIGNvbnRhaW5lclxyXG4gICAgICAgICAgICBzdXNwZW5zZS5oaWRkZW5Db250YWluZXIgPSBjcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICAgICAgaWYgKGlzSW5GYWxsYmFjaykge1xyXG4gICAgICAgICAgICAgICAgLy8gYWxyZWFkeSBpbiBmYWxsYmFjayBzdGF0ZVxyXG4gICAgICAgICAgICAgICAgcGF0Y2gobnVsbCwgbmV3QnJhbmNoLCBzdXNwZW5zZS5oaWRkZW5Db250YWluZXIsIG51bGwsIHBhcmVudENvbXBvbmVudCwgc3VzcGVuc2UsIGlzU1ZHKTtcclxuICAgICAgICAgICAgICAgIGlmIChzdXNwZW5zZS5kZXBzIDw9IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBzdXNwZW5zZS5yZXNvbHZlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBwYXRjaChhY3RpdmVCcmFuY2gsIG5ld0ZhbGxiYWNrLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBudWxsLCAvLyBmYWxsYmFjayB0cmVlIHdpbGwgbm90IGhhdmUgc3VzcGVuc2UgY29udGV4dFxyXG4gICAgICAgICAgICAgICAgICAgIGlzU1ZHKTtcclxuICAgICAgICAgICAgICAgICAgICBzZXRBY3RpdmVCcmFuY2goc3VzcGVuc2UsIG5ld0ZhbGxiYWNrKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChhY3RpdmVCcmFuY2ggJiYgaXNTYW1lVk5vZGVUeXBlKG5ld0JyYW5jaCwgYWN0aXZlQnJhbmNoKSkge1xyXG4gICAgICAgICAgICAgICAgLy8gdG9nZ2xlZCBcImJhY2tcIiB0byBjdXJyZW50IGFjdGl2ZSBicmFuY2hcclxuICAgICAgICAgICAgICAgIHBhdGNoKGFjdGl2ZUJyYW5jaCwgbmV3QnJhbmNoLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBzdXNwZW5zZSwgaXNTVkcpO1xyXG4gICAgICAgICAgICAgICAgLy8gZm9yY2UgcmVzb2x2ZVxyXG4gICAgICAgICAgICAgICAgc3VzcGVuc2UucmVzb2x2ZSh0cnVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIHN3aXRjaGVkIHRvIGEgM3JkIGJyYW5jaFxyXG4gICAgICAgICAgICAgICAgcGF0Y2gobnVsbCwgbmV3QnJhbmNoLCBzdXNwZW5zZS5oaWRkZW5Db250YWluZXIsIG51bGwsIHBhcmVudENvbXBvbmVudCwgc3VzcGVuc2UsIGlzU1ZHKTtcclxuICAgICAgICAgICAgICAgIGlmIChzdXNwZW5zZS5kZXBzIDw9IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBzdXNwZW5zZS5yZXNvbHZlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBpZiAoYWN0aXZlQnJhbmNoICYmIGlzU2FtZVZOb2RlVHlwZShuZXdCcmFuY2gsIGFjdGl2ZUJyYW5jaCkpIHtcclxuICAgICAgICAgICAgLy8gcm9vdCBkaWQgbm90IGNoYW5nZSwganVzdCBub3JtYWwgcGF0Y2hcclxuICAgICAgICAgICAgcGF0Y2goYWN0aXZlQnJhbmNoLCBuZXdCcmFuY2gsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHN1c3BlbnNlLCBpc1NWRyk7XHJcbiAgICAgICAgICAgIHNldEFjdGl2ZUJyYW5jaChzdXNwZW5zZSwgbmV3QnJhbmNoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIHJvb3Qgbm9kZSB0b2dnbGVkXHJcbiAgICAgICAgICAgIC8vIGludm9rZSBAcGVuZGluZyBldmVudFxyXG4gICAgICAgICAgICBjb25zdCBvblBlbmRpbmcgPSBuMi5wcm9wcyAmJiBuMi5wcm9wcy5vblBlbmRpbmc7XHJcbiAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKG9uUGVuZGluZykpIHtcclxuICAgICAgICAgICAgICAgIG9uUGVuZGluZygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIG1vdW50IHBlbmRpbmcgYnJhbmNoIGluIG9mZi1kb20gY29udGFpbmVyXHJcbiAgICAgICAgICAgIHN1c3BlbnNlLnBlbmRpbmdCcmFuY2ggPSBuZXdCcmFuY2g7XHJcbiAgICAgICAgICAgIHN1c3BlbnNlLnBlbmRpbmdJZCsrO1xyXG4gICAgICAgICAgICBwYXRjaChudWxsLCBuZXdCcmFuY2gsIHN1c3BlbnNlLmhpZGRlbkNvbnRhaW5lciwgbnVsbCwgcGFyZW50Q29tcG9uZW50LCBzdXNwZW5zZSwgaXNTVkcpO1xyXG4gICAgICAgICAgICBpZiAoc3VzcGVuc2UuZGVwcyA8PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBpbmNvbWluZyBicmFuY2ggaGFzIG5vIGFzeW5jIGRlcHMsIHJlc29sdmUgbm93LlxyXG4gICAgICAgICAgICAgICAgc3VzcGVuc2UucmVzb2x2ZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgeyB0aW1lb3V0LCBwZW5kaW5nSWQgfSA9IHN1c3BlbnNlO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRpbWVvdXQgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdXNwZW5zZS5wZW5kaW5nSWQgPT09IHBlbmRpbmdJZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VzcGVuc2UuZmFsbGJhY2sobmV3RmFsbGJhY2spO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgdGltZW91dCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0aW1lb3V0ID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3VzcGVuc2UuZmFsbGJhY2sobmV3RmFsbGJhY2spO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbmxldCBoYXNXYXJuZWQgPSBmYWxzZTtcclxuZnVuY3Rpb24gY3JlYXRlU3VzcGVuc2VCb3VuZGFyeSh2bm9kZSwgcGFyZW50LCBwYXJlbnRDb21wb25lbnQsIGNvbnRhaW5lciwgaGlkZGVuQ29udGFpbmVyLCBhbmNob3IsIGlzU1ZHLCBvcHRpbWl6ZWQsIHJlbmRlcmVySW50ZXJuYWxzLCBpc0h5ZHJhdGluZyA9IGZhbHNlKSB7XHJcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cclxuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIWZhbHNlICYmICFoYXNXYXJuZWQpIHtcclxuICAgICAgICBoYXNXYXJuZWQgPSB0cnVlO1xyXG4gICAgICAgIC8vIEB0cy1pZ25vcmUgYGNvbnNvbGUuaW5mb2AgY2Fubm90IGJlIG51bGwgZXJyb3JcclxuICAgICAgICBjb25zb2xlW2NvbnNvbGUuaW5mbyA/ICdpbmZvJyA6ICdsb2cnXShgPFN1c3BlbnNlPiBpcyBhbiBleHBlcmltZW50YWwgZmVhdHVyZSBhbmQgaXRzIEFQSSB3aWxsIGxpa2VseSBjaGFuZ2UuYCk7XHJcbiAgICB9XHJcbiAgICBjb25zdCB7IHA6IHBhdGNoLCBtOiBtb3ZlLCB1bTogdW5tb3VudCwgbjogbmV4dCwgbzogeyBwYXJlbnROb2RlLCByZW1vdmUgfSB9ID0gcmVuZGVyZXJJbnRlcm5hbHM7XHJcbiAgICBjb25zdCB0aW1lb3V0ID0gdG9OdW1iZXIodm5vZGUucHJvcHMgJiYgdm5vZGUucHJvcHMudGltZW91dCk7XHJcbiAgICBjb25zdCBzdXNwZW5zZSA9IHtcclxuICAgICAgICB2bm9kZSxcclxuICAgICAgICBwYXJlbnQsXHJcbiAgICAgICAgcGFyZW50Q29tcG9uZW50LFxyXG4gICAgICAgIGlzU1ZHLFxyXG4gICAgICAgIGNvbnRhaW5lcixcclxuICAgICAgICBoaWRkZW5Db250YWluZXIsXHJcbiAgICAgICAgYW5jaG9yLFxyXG4gICAgICAgIGRlcHM6IDAsXHJcbiAgICAgICAgcGVuZGluZ0lkOiAwLFxyXG4gICAgICAgIHRpbWVvdXQ6IHR5cGVvZiB0aW1lb3V0ID09PSAnbnVtYmVyJyA/IHRpbWVvdXQgOiAtMSxcclxuICAgICAgICBhY3RpdmVCcmFuY2g6IG51bGwsXHJcbiAgICAgICAgcGVuZGluZ0JyYW5jaDogbnVsbCxcclxuICAgICAgICBpc0luRmFsbGJhY2s6IHRydWUsXHJcbiAgICAgICAgaXNIeWRyYXRpbmcsXHJcbiAgICAgICAgaXNVbm1vdW50ZWQ6IGZhbHNlLFxyXG4gICAgICAgIGVmZmVjdHM6IFtdLFxyXG4gICAgICAgIHJlc29sdmUocmVzdW1lID0gZmFsc2UpIHtcclxuICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFyZXN1bWUgJiYgIXN1c3BlbnNlLnBlbmRpbmdCcmFuY2gpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHN1c3BlbnNlLnJlc29sdmUoKSBpcyBjYWxsZWQgd2l0aG91dCBhIHBlbmRpbmcgYnJhbmNoLmApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHN1c3BlbnNlLmlzVW5tb3VudGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBzdXNwZW5zZS5yZXNvbHZlKCkgaXMgY2FsbGVkIG9uIGFuIGFscmVhZHkgdW5tb3VudGVkIHN1c3BlbnNlIGJvdW5kYXJ5LmApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IHsgdm5vZGUsIGFjdGl2ZUJyYW5jaCwgcGVuZGluZ0JyYW5jaCwgcGVuZGluZ0lkLCBlZmZlY3RzLCBwYXJlbnRDb21wb25lbnQsIGNvbnRhaW5lciB9ID0gc3VzcGVuc2U7XHJcbiAgICAgICAgICAgIGlmIChzdXNwZW5zZS5pc0h5ZHJhdGluZykge1xyXG4gICAgICAgICAgICAgICAgc3VzcGVuc2UuaXNIeWRyYXRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICghcmVzdW1lKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBkZWxheUVudGVyID0gYWN0aXZlQnJhbmNoICYmXHJcbiAgICAgICAgICAgICAgICAgICAgcGVuZGluZ0JyYW5jaC50cmFuc2l0aW9uICYmXHJcbiAgICAgICAgICAgICAgICAgICAgcGVuZGluZ0JyYW5jaC50cmFuc2l0aW9uLm1vZGUgPT09ICdvdXQtaW4nO1xyXG4gICAgICAgICAgICAgICAgaWYgKGRlbGF5RW50ZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICBhY3RpdmVCcmFuY2gudHJhbnNpdGlvbi5hZnRlckxlYXZlID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocGVuZGluZ0lkID09PSBzdXNwZW5zZS5wZW5kaW5nSWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vdmUocGVuZGluZ0JyYW5jaCwgY29udGFpbmVyLCBhbmNob3IsIDAgLyogRU5URVIgKi8pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIHRoaXMgaXMgaW5pdGlhbCBhbmNob3Igb24gbW91bnRcclxuICAgICAgICAgICAgICAgIGxldCB7IGFuY2hvciB9ID0gc3VzcGVuc2U7XHJcbiAgICAgICAgICAgICAgICAvLyB1bm1vdW50IGN1cnJlbnQgYWN0aXZlIHRyZWVcclxuICAgICAgICAgICAgICAgIGlmIChhY3RpdmVCcmFuY2gpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBpZiB0aGUgZmFsbGJhY2sgdHJlZSB3YXMgbW91bnRlZCwgaXQgbWF5IGhhdmUgYmVlbiBtb3ZlZFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGFzIHBhcnQgb2YgYSBwYXJlbnQgc3VzcGVuc2UuIGdldCB0aGUgbGF0ZXN0IGFuY2hvciBmb3IgaW5zZXJ0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgYW5jaG9yID0gbmV4dChhY3RpdmVCcmFuY2gpO1xyXG4gICAgICAgICAgICAgICAgICAgIHVubW91bnQoYWN0aXZlQnJhbmNoLCBwYXJlbnRDb21wb25lbnQsIHN1c3BlbnNlLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICghZGVsYXlFbnRlcikge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIG1vdmUgY29udGVudCBmcm9tIG9mZi1kb20gY29udGFpbmVyIHRvIGFjdHVhbCBjb250YWluZXJcclxuICAgICAgICAgICAgICAgICAgICBtb3ZlKHBlbmRpbmdCcmFuY2gsIGNvbnRhaW5lciwgYW5jaG9yLCAwIC8qIEVOVEVSICovKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBzZXRBY3RpdmVCcmFuY2goc3VzcGVuc2UsIHBlbmRpbmdCcmFuY2gpO1xyXG4gICAgICAgICAgICBzdXNwZW5zZS5wZW5kaW5nQnJhbmNoID0gbnVsbDtcclxuICAgICAgICAgICAgc3VzcGVuc2UuaXNJbkZhbGxiYWNrID0gZmFsc2U7XHJcbiAgICAgICAgICAgIC8vIGZsdXNoIGJ1ZmZlcmVkIGVmZmVjdHNcclxuICAgICAgICAgICAgLy8gY2hlY2sgaWYgdGhlcmUgaXMgYSBwZW5kaW5nIHBhcmVudCBzdXNwZW5zZVxyXG4gICAgICAgICAgICBsZXQgcGFyZW50ID0gc3VzcGVuc2UucGFyZW50O1xyXG4gICAgICAgICAgICBsZXQgaGFzVW5yZXNvbHZlZEFuY2VzdG9yID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHdoaWxlIChwYXJlbnQpIHtcclxuICAgICAgICAgICAgICAgIGlmIChwYXJlbnQucGVuZGluZ0JyYW5jaCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGZvdW5kIGEgcGVuZGluZyBwYXJlbnQgc3VzcGVuc2UsIG1lcmdlIGJ1ZmZlcmVkIHBvc3Qgam9ic1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGludG8gdGhhdCBwYXJlbnRcclxuICAgICAgICAgICAgICAgICAgICBwYXJlbnQuZWZmZWN0cy5wdXNoKC4uLmVmZmVjdHMpO1xyXG4gICAgICAgICAgICAgICAgICAgIGhhc1VucmVzb2x2ZWRBbmNlc3RvciA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIG5vIHBlbmRpbmcgcGFyZW50IHN1c3BlbnNlLCBmbHVzaCBhbGwgam9ic1xyXG4gICAgICAgICAgICBpZiAoIWhhc1VucmVzb2x2ZWRBbmNlc3Rvcikge1xyXG4gICAgICAgICAgICAgICAgcXVldWVQb3N0Rmx1c2hDYihlZmZlY3RzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBzdXNwZW5zZS5lZmZlY3RzID0gW107XHJcbiAgICAgICAgICAgIC8vIGludm9rZSBAcmVzb2x2ZSBldmVudFxyXG4gICAgICAgICAgICBjb25zdCBvblJlc29sdmUgPSB2bm9kZS5wcm9wcyAmJiB2bm9kZS5wcm9wcy5vblJlc29sdmU7XHJcbiAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKG9uUmVzb2x2ZSkpIHtcclxuICAgICAgICAgICAgICAgIG9uUmVzb2x2ZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBmYWxsYmFjayhmYWxsYmFja1ZOb2RlKSB7XHJcbiAgICAgICAgICAgIGlmICghc3VzcGVuc2UucGVuZGluZ0JyYW5jaCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IHsgdm5vZGUsIGFjdGl2ZUJyYW5jaCwgcGFyZW50Q29tcG9uZW50LCBjb250YWluZXIsIGlzU1ZHIH0gPSBzdXNwZW5zZTtcclxuICAgICAgICAgICAgLy8gaW52b2tlIEBmYWxsYmFjayBldmVudFxyXG4gICAgICAgICAgICBjb25zdCBvbkZhbGxiYWNrID0gdm5vZGUucHJvcHMgJiYgdm5vZGUucHJvcHMub25GYWxsYmFjaztcclxuICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24ob25GYWxsYmFjaykpIHtcclxuICAgICAgICAgICAgICAgIG9uRmFsbGJhY2soKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBhbmNob3IgPSBuZXh0KGFjdGl2ZUJyYW5jaCk7XHJcbiAgICAgICAgICAgIGNvbnN0IG1vdW50RmFsbGJhY2sgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXN1c3BlbnNlLmlzSW5GYWxsYmFjaykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIG1vdW50IHRoZSBmYWxsYmFjayB0cmVlXHJcbiAgICAgICAgICAgICAgICBwYXRjaChudWxsLCBmYWxsYmFja1ZOb2RlLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBudWxsLCAvLyBmYWxsYmFjayB0cmVlIHdpbGwgbm90IGhhdmUgc3VzcGVuc2UgY29udGV4dFxyXG4gICAgICAgICAgICAgICAgaXNTVkcpO1xyXG4gICAgICAgICAgICAgICAgc2V0QWN0aXZlQnJhbmNoKHN1c3BlbnNlLCBmYWxsYmFja1ZOb2RlKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgY29uc3QgZGVsYXlFbnRlciA9IGZhbGxiYWNrVk5vZGUudHJhbnNpdGlvbiAmJiBmYWxsYmFja1ZOb2RlLnRyYW5zaXRpb24ubW9kZSA9PT0gJ291dC1pbic7XHJcbiAgICAgICAgICAgIGlmIChkZWxheUVudGVyKSB7XHJcbiAgICAgICAgICAgICAgICBhY3RpdmVCcmFuY2gudHJhbnNpdGlvbi5hZnRlckxlYXZlID0gbW91bnRGYWxsYmFjaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyB1bm1vdW50IGN1cnJlbnQgYWN0aXZlIGJyYW5jaFxyXG4gICAgICAgICAgICB1bm1vdW50KGFjdGl2ZUJyYW5jaCwgcGFyZW50Q29tcG9uZW50LCBudWxsLCAvLyBubyBzdXNwZW5zZSBzbyB1bm1vdW50IGhvb2tzIGZpcmUgbm93XHJcbiAgICAgICAgICAgIHRydWUgLy8gc2hvdWxkUmVtb3ZlXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIHN1c3BlbnNlLmlzSW5GYWxsYmFjayA9IHRydWU7XHJcbiAgICAgICAgICAgIGlmICghZGVsYXlFbnRlcikge1xyXG4gICAgICAgICAgICAgICAgbW91bnRGYWxsYmFjaygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBtb3ZlKGNvbnRhaW5lciwgYW5jaG9yLCB0eXBlKSB7XHJcbiAgICAgICAgICAgIHN1c3BlbnNlLmFjdGl2ZUJyYW5jaCAmJlxyXG4gICAgICAgICAgICAgICAgbW92ZShzdXNwZW5zZS5hY3RpdmVCcmFuY2gsIGNvbnRhaW5lciwgYW5jaG9yLCB0eXBlKTtcclxuICAgICAgICAgICAgc3VzcGVuc2UuY29udGFpbmVyID0gY29udGFpbmVyO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbmV4dCgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHN1c3BlbnNlLmFjdGl2ZUJyYW5jaCAmJiBuZXh0KHN1c3BlbnNlLmFjdGl2ZUJyYW5jaCk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICByZWdpc3RlckRlcChpbnN0YW5jZSwgc2V0dXBSZW5kZXJFZmZlY3QpIHtcclxuICAgICAgICAgICAgY29uc3QgaXNJblBlbmRpbmdTdXNwZW5zZSA9ICEhc3VzcGVuc2UucGVuZGluZ0JyYW5jaDtcclxuICAgICAgICAgICAgaWYgKGlzSW5QZW5kaW5nU3VzcGVuc2UpIHtcclxuICAgICAgICAgICAgICAgIHN1c3BlbnNlLmRlcHMrKztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBoeWRyYXRlZEVsID0gaW5zdGFuY2Uudm5vZGUuZWw7XHJcbiAgICAgICAgICAgIGluc3RhbmNlXHJcbiAgICAgICAgICAgICAgICAuYXN5bmNEZXAuY2F0Y2goZXJyID0+IHtcclxuICAgICAgICAgICAgICAgIGhhbmRsZUVycm9yKGVyciwgaW5zdGFuY2UsIDAgLyogU0VUVVBfRlVOQ1RJT04gKi8pO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oYXN5bmNTZXR1cFJlc3VsdCA9PiB7XHJcbiAgICAgICAgICAgICAgICAvLyByZXRyeSB3aGVuIHRoZSBzZXR1cCgpIHByb21pc2UgcmVzb2x2ZXMuXHJcbiAgICAgICAgICAgICAgICAvLyBjb21wb25lbnQgbWF5IGhhdmUgYmVlbiB1bm1vdW50ZWQgYmVmb3JlIHJlc29sdmUuXHJcbiAgICAgICAgICAgICAgICBpZiAoaW5zdGFuY2UuaXNVbm1vdW50ZWQgfHxcclxuICAgICAgICAgICAgICAgICAgICBzdXNwZW5zZS5pc1VubW91bnRlZCB8fFxyXG4gICAgICAgICAgICAgICAgICAgIHN1c3BlbnNlLnBlbmRpbmdJZCAhPT0gaW5zdGFuY2Uuc3VzcGVuc2VJZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIHJldHJ5IGZyb20gdGhpcyBjb21wb25lbnRcclxuICAgICAgICAgICAgICAgIGluc3RhbmNlLmFzeW5jUmVzb2x2ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgeyB2bm9kZSB9ID0gaW5zdGFuY2U7XHJcbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcHVzaFdhcm5pbmdDb250ZXh0KHZub2RlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGhhbmRsZVNldHVwUmVzdWx0KGluc3RhbmNlLCBhc3luY1NldHVwUmVzdWx0KTtcclxuICAgICAgICAgICAgICAgIGlmIChoeWRyYXRlZEVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdm5vZGUgbWF5IGhhdmUgYmVlbiByZXBsYWNlZCBpZiBhbiB1cGRhdGUgaGFwcGVuZWQgYmVmb3JlIHRoZVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGFzeW5jIGRlcCBpcyByZXNvbHZlZC5cclxuICAgICAgICAgICAgICAgICAgICB2bm9kZS5lbCA9IGh5ZHJhdGVkRWw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCBwbGFjZWhvbGRlciA9ICFoeWRyYXRlZEVsICYmIGluc3RhbmNlLnN1YlRyZWUuZWw7XHJcbiAgICAgICAgICAgICAgICBzZXR1cFJlbmRlckVmZmVjdChpbnN0YW5jZSwgdm5vZGUsIFxyXG4gICAgICAgICAgICAgICAgLy8gY29tcG9uZW50IG1heSBoYXZlIGJlZW4gbW92ZWQgYmVmb3JlIHJlc29sdmUuXHJcbiAgICAgICAgICAgICAgICAvLyBpZiB0aGlzIGlzIG5vdCBhIGh5ZHJhdGlvbiwgaW5zdGFuY2Uuc3ViVHJlZSB3aWxsIGJlIHRoZSBjb21tZW50XHJcbiAgICAgICAgICAgICAgICAvLyBwbGFjZWhvbGRlci5cclxuICAgICAgICAgICAgICAgIHBhcmVudE5vZGUoaHlkcmF0ZWRFbCB8fCBpbnN0YW5jZS5zdWJUcmVlLmVsKSwgXHJcbiAgICAgICAgICAgICAgICAvLyBhbmNob3Igd2lsbCBub3QgYmUgdXNlZCBpZiB0aGlzIGlzIGh5ZHJhdGlvbiwgc28gb25seSBuZWVkIHRvXHJcbiAgICAgICAgICAgICAgICAvLyBjb25zaWRlciB0aGUgY29tbWVudCBwbGFjZWhvbGRlciBjYXNlLlxyXG4gICAgICAgICAgICAgICAgaHlkcmF0ZWRFbCA/IG51bGwgOiBuZXh0KGluc3RhbmNlLnN1YlRyZWUpLCBzdXNwZW5zZSwgaXNTVkcsIG9wdGltaXplZCk7XHJcbiAgICAgICAgICAgICAgICBpZiAocGxhY2Vob2xkZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICByZW1vdmUocGxhY2Vob2xkZXIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdXBkYXRlSE9DSG9zdEVsKGluc3RhbmNlLCB2bm9kZS5lbCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcG9wV2FybmluZ0NvbnRleHQoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIG9ubHkgZGVjcmVhc2UgZGVwcyBjb3VudCBpZiBzdXNwZW5zZSBpcyBub3QgYWxyZWFkeSByZXNvbHZlZFxyXG4gICAgICAgICAgICAgICAgaWYgKGlzSW5QZW5kaW5nU3VzcGVuc2UgJiYgLS1zdXNwZW5zZS5kZXBzID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3VzcGVuc2UucmVzb2x2ZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHVubW91bnQocGFyZW50U3VzcGVuc2UsIGRvUmVtb3ZlKSB7XHJcbiAgICAgICAgICAgIHN1c3BlbnNlLmlzVW5tb3VudGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgaWYgKHN1c3BlbnNlLmFjdGl2ZUJyYW5jaCkge1xyXG4gICAgICAgICAgICAgICAgdW5tb3VudChzdXNwZW5zZS5hY3RpdmVCcmFuY2gsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGRvUmVtb3ZlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoc3VzcGVuc2UucGVuZGluZ0JyYW5jaCkge1xyXG4gICAgICAgICAgICAgICAgdW5tb3VudChzdXNwZW5zZS5wZW5kaW5nQnJhbmNoLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBkb1JlbW92ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIHN1c3BlbnNlO1xyXG59XHJcbmZ1bmN0aW9uIGh5ZHJhdGVTdXNwZW5zZShub2RlLCB2bm9kZSwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIG9wdGltaXplZCwgcmVuZGVyZXJJbnRlcm5hbHMsIGh5ZHJhdGVOb2RlKSB7XHJcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1yZXN0cmljdGVkLWdsb2JhbHMgKi9cclxuICAgIGNvbnN0IHN1c3BlbnNlID0gKHZub2RlLnN1c3BlbnNlID0gY3JlYXRlU3VzcGVuc2VCb3VuZGFyeSh2bm9kZSwgcGFyZW50U3VzcGVuc2UsIHBhcmVudENvbXBvbmVudCwgbm9kZS5wYXJlbnROb2RlLCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSwgbnVsbCwgaXNTVkcsIG9wdGltaXplZCwgcmVuZGVyZXJJbnRlcm5hbHMsIHRydWUgLyogaHlkcmF0aW5nICovKSk7XHJcbiAgICAvLyB0aGVyZSBhcmUgdHdvIHBvc3NpYmxlIHNjZW5hcmlvcyBmb3Igc2VydmVyLXJlbmRlcmVkIHN1c3BlbnNlOlxyXG4gICAgLy8gLSBzdWNjZXNzOiBzc3IgY29udGVudCBzaG91bGQgYmUgZnVsbHkgcmVzb2x2ZWRcclxuICAgIC8vIC0gZmFpbHVyZTogc3NyIGNvbnRlbnQgc2hvdWxkIGJlIHRoZSBmYWxsYmFjayBicmFuY2guXHJcbiAgICAvLyBob3dldmVyLCBvbiB0aGUgY2xpZW50IHdlIGRvbid0IHJlYWxseSBrbm93IGlmIGl0IGhhcyBmYWlsZWQgb3Igbm90XHJcbiAgICAvLyBhdHRlbXB0IHRvIGh5ZHJhdGUgdGhlIERPTSBhc3N1bWluZyBpdCBoYXMgc3VjY2VlZGVkLCBidXQgd2Ugc3RpbGxcclxuICAgIC8vIG5lZWQgdG8gY29uc3RydWN0IGEgc3VzcGVuc2UgYm91bmRhcnkgZmlyc3RcclxuICAgIGNvbnN0IHJlc3VsdCA9IGh5ZHJhdGVOb2RlKG5vZGUsIChzdXNwZW5zZS5wZW5kaW5nQnJhbmNoID0gdm5vZGUuc3NDb250ZW50KSwgcGFyZW50Q29tcG9uZW50LCBzdXNwZW5zZSwgb3B0aW1pemVkKTtcclxuICAgIGlmIChzdXNwZW5zZS5kZXBzID09PSAwKSB7XHJcbiAgICAgICAgc3VzcGVuc2UucmVzb2x2ZSgpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIC8qIGVzbGludC1lbmFibGUgbm8tcmVzdHJpY3RlZC1nbG9iYWxzICovXHJcbn1cclxuZnVuY3Rpb24gbm9ybWFsaXplU3VzcGVuc2VDaGlsZHJlbih2bm9kZSkge1xyXG4gICAgY29uc3QgeyBzaGFwZUZsYWcsIGNoaWxkcmVuIH0gPSB2bm9kZTtcclxuICAgIGxldCBjb250ZW50O1xyXG4gICAgbGV0IGZhbGxiYWNrO1xyXG4gICAgaWYgKHNoYXBlRmxhZyAmIDMyIC8qIFNMT1RTX0NISUxEUkVOICovKSB7XHJcbiAgICAgICAgY29udGVudCA9IG5vcm1hbGl6ZVN1c3BlbnNlU2xvdChjaGlsZHJlbi5kZWZhdWx0KTtcclxuICAgICAgICBmYWxsYmFjayA9IG5vcm1hbGl6ZVN1c3BlbnNlU2xvdChjaGlsZHJlbi5mYWxsYmFjayk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBjb250ZW50ID0gbm9ybWFsaXplU3VzcGVuc2VTbG90KGNoaWxkcmVuKTtcclxuICAgICAgICBmYWxsYmFjayA9IG5vcm1hbGl6ZVZOb2RlKG51bGwpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBjb250ZW50LFxyXG4gICAgICAgIGZhbGxiYWNrXHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIG5vcm1hbGl6ZVN1c3BlbnNlU2xvdChzKSB7XHJcbiAgICBpZiAoaXNGdW5jdGlvbihzKSkge1xyXG4gICAgICAgIHMgPSBzKCk7XHJcbiAgICB9XHJcbiAgICBpZiAoaXNBcnJheShzKSkge1xyXG4gICAgICAgIGNvbnN0IHNpbmdsZUNoaWxkID0gZmlsdGVyU2luZ2xlUm9vdChzKTtcclxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFzaW5nbGVDaGlsZCkge1xyXG4gICAgICAgICAgICB3YXJuKGA8U3VzcGVuc2U+IHNsb3RzIGV4cGVjdCBhIHNpbmdsZSByb290IG5vZGUuYCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHMgPSBzaW5nbGVDaGlsZDtcclxuICAgIH1cclxuICAgIHJldHVybiBub3JtYWxpemVWTm9kZShzKTtcclxufVxyXG5mdW5jdGlvbiBxdWV1ZUVmZmVjdFdpdGhTdXNwZW5zZShmbiwgc3VzcGVuc2UpIHtcclxuICAgIGlmIChzdXNwZW5zZSAmJiBzdXNwZW5zZS5wZW5kaW5nQnJhbmNoKSB7XHJcbiAgICAgICAgaWYgKGlzQXJyYXkoZm4pKSB7XHJcbiAgICAgICAgICAgIHN1c3BlbnNlLmVmZmVjdHMucHVzaCguLi5mbik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBzdXNwZW5zZS5lZmZlY3RzLnB1c2goZm4pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHF1ZXVlUG9zdEZsdXNoQ2IoZm4pO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIHNldEFjdGl2ZUJyYW5jaChzdXNwZW5zZSwgYnJhbmNoKSB7XHJcbiAgICBzdXNwZW5zZS5hY3RpdmVCcmFuY2ggPSBicmFuY2g7XHJcbiAgICBjb25zdCB7IHZub2RlLCBwYXJlbnRDb21wb25lbnQgfSA9IHN1c3BlbnNlO1xyXG4gICAgY29uc3QgZWwgPSAodm5vZGUuZWwgPSBicmFuY2guZWwpO1xyXG4gICAgLy8gaW4gY2FzZSBzdXNwZW5zZSBpcyB0aGUgcm9vdCBub2RlIG9mIGEgY29tcG9uZW50LFxyXG4gICAgLy8gcmVjdXJzaXZlbHkgdXBkYXRlIHRoZSBIT0MgZWxcclxuICAgIGlmIChwYXJlbnRDb21wb25lbnQgJiYgcGFyZW50Q29tcG9uZW50LnN1YlRyZWUgPT09IHZub2RlKSB7XHJcbiAgICAgICAgcGFyZW50Q29tcG9uZW50LnZub2RlLmVsID0gZWw7XHJcbiAgICAgICAgdXBkYXRlSE9DSG9zdEVsKHBhcmVudENvbXBvbmVudCwgZWwpO1xyXG4gICAgfVxyXG59XG5cbmxldCBpc1JlbmRlcmluZ0NvbXBpbGVkU2xvdCA9IDA7XHJcbmNvbnN0IHNldENvbXBpbGVkU2xvdFJlbmRlcmluZyA9IChuKSA9PiAoaXNSZW5kZXJpbmdDb21waWxlZFNsb3QgKz0gbik7XHJcbi8qKlxyXG4gKiBDb21waWxlciBydW50aW1lIGhlbHBlciBmb3IgcmVuZGVyaW5nIGA8c2xvdC8+YFxyXG4gKiBAcHJpdmF0ZVxyXG4gKi9cclxuZnVuY3Rpb24gcmVuZGVyU2xvdChzbG90cywgbmFtZSwgcHJvcHMgPSB7fSwgXHJcbi8vIHRoaXMgaXMgbm90IGEgdXNlci1mYWNpbmcgZnVuY3Rpb24sIHNvIHRoZSBmYWxsYmFjayBpcyBhbHdheXMgZ2VuZXJhdGVkIGJ5XHJcbi8vIHRoZSBjb21waWxlciBhbmQgZ3VhcmFudGVlZCB0byBiZSBhIGZ1bmN0aW9uIHJldHVybmluZyBhbiBhcnJheVxyXG5mYWxsYmFjaykge1xyXG4gICAgbGV0IHNsb3QgPSBzbG90c1tuYW1lXTtcclxuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgc2xvdCAmJiBzbG90Lmxlbmd0aCA+IDEpIHtcclxuICAgICAgICB3YXJuKGBTU1Itb3B0aW1pemVkIHNsb3QgZnVuY3Rpb24gZGV0ZWN0ZWQgaW4gYSBub24tU1NSLW9wdGltaXplZCByZW5kZXIgYCArXHJcbiAgICAgICAgICAgIGBmdW5jdGlvbi4gWW91IG5lZWQgdG8gbWFyayB0aGlzIGNvbXBvbmVudCB3aXRoICRkeW5hbWljLXNsb3RzIGluIHRoZSBgICtcclxuICAgICAgICAgICAgYHBhcmVudCB0ZW1wbGF0ZS5gKTtcclxuICAgICAgICBzbG90ID0gKCkgPT4gW107XHJcbiAgICB9XHJcbiAgICAvLyBhIGNvbXBpbGVkIHNsb3QgZGlzYWJsZXMgYmxvY2sgdHJhY2tpbmcgYnkgZGVmYXVsdCB0byBhdm9pZCBtYW51YWxcclxuICAgIC8vIGludm9jYXRpb24gaW50ZXJmZXJpbmcgd2l0aCB0ZW1wbGF0ZS1iYXNlZCBibG9jayB0cmFja2luZywgYnV0IGluXHJcbiAgICAvLyBgcmVuZGVyU2xvdGAgd2UgY2FuIGJlIHN1cmUgdGhhdCBpdCdzIHRlbXBsYXRlLWJhc2VkIHNvIHdlIGNhbiBmb3JjZVxyXG4gICAgLy8gZW5hYmxlIGl0LlxyXG4gICAgaXNSZW5kZXJpbmdDb21waWxlZFNsb3QrKztcclxuICAgIG9wZW5CbG9jaygpO1xyXG4gICAgY29uc3QgdmFsaWRTbG90Q29udGVudCA9IHNsb3QgJiYgZW5zdXJlVmFsaWRWTm9kZShzbG90KHByb3BzKSk7XHJcbiAgICBjb25zdCByZW5kZXJlZCA9IGNyZWF0ZUJsb2NrKEZyYWdtZW50LCB7IGtleTogcHJvcHMua2V5IHx8IGBfJHtuYW1lfWAgfSwgdmFsaWRTbG90Q29udGVudCB8fCAoZmFsbGJhY2sgPyBmYWxsYmFjaygpIDogW10pLCB2YWxpZFNsb3RDb250ZW50ICYmIHNsb3RzLl8gPT09IDEgLyogU1RBQkxFICovXHJcbiAgICAgICAgPyA2NCAvKiBTVEFCTEVfRlJBR01FTlQgKi9cclxuICAgICAgICA6IC0yIC8qIEJBSUwgKi8pO1xyXG4gICAgaXNSZW5kZXJpbmdDb21waWxlZFNsb3QtLTtcclxuICAgIHJldHVybiByZW5kZXJlZDtcclxufVxyXG5mdW5jdGlvbiBlbnN1cmVWYWxpZFZOb2RlKHZub2Rlcykge1xyXG4gICAgcmV0dXJuIHZub2Rlcy5zb21lKGNoaWxkID0+IHtcclxuICAgICAgICBpZiAoIWlzVk5vZGUoY2hpbGQpKVxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICBpZiAoY2hpbGQudHlwZSA9PT0gQ29tbWVudClcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIGlmIChjaGlsZC50eXBlID09PSBGcmFnbWVudCAmJlxyXG4gICAgICAgICAgICAhZW5zdXJlVmFsaWRWTm9kZShjaGlsZC5jaGlsZHJlbikpXHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH0pXHJcbiAgICAgICAgPyB2bm9kZXNcclxuICAgICAgICA6IG51bGw7XHJcbn1cblxuLyoqXHJcbiAqIFdyYXAgYSBzbG90IGZ1bmN0aW9uIHRvIG1lbW9pemUgY3VycmVudCByZW5kZXJpbmcgaW5zdGFuY2VcclxuICogQHByaXZhdGVcclxuICovXHJcbmZ1bmN0aW9uIHdpdGhDdHgoZm4sIGN0eCA9IGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSkge1xyXG4gICAgaWYgKCFjdHgpXHJcbiAgICAgICAgcmV0dXJuIGZuO1xyXG4gICAgY29uc3QgcmVuZGVyRm5XaXRoQ29udGV4dCA9ICguLi5hcmdzKSA9PiB7XHJcbiAgICAgICAgLy8gSWYgYSB1c2VyIGNhbGxzIGEgY29tcGlsZWQgc2xvdCBpbnNpZGUgYSB0ZW1wbGF0ZSBleHByZXNzaW9uICgjMTc0NSksIGl0XHJcbiAgICAgICAgLy8gY2FuIG1lc3MgdXAgYmxvY2sgdHJhY2tpbmcsIHNvIGJ5IGRlZmF1bHQgd2UgbmVlZCB0byBwdXNoIGEgbnVsbCBibG9jayB0b1xyXG4gICAgICAgIC8vIGF2b2lkIHRoYXQuIFRoaXMgaXNuJ3QgbmVjZXNzYXJ5IGlmIHJlbmRlcmluZyBhIGNvbXBpbGVkIGA8c2xvdD5gLlxyXG4gICAgICAgIGlmICghaXNSZW5kZXJpbmdDb21waWxlZFNsb3QpIHtcclxuICAgICAgICAgICAgb3BlbkJsb2NrKHRydWUgLyogbnVsbCBibG9jayB0aGF0IGRpc2FibGVzIHRyYWNraW5nICovKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3Qgb3duZXIgPSBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2U7XHJcbiAgICAgICAgc2V0Q3VycmVudFJlbmRlcmluZ0luc3RhbmNlKGN0eCk7XHJcbiAgICAgICAgY29uc3QgcmVzID0gZm4oLi4uYXJncyk7XHJcbiAgICAgICAgc2V0Q3VycmVudFJlbmRlcmluZ0luc3RhbmNlKG93bmVyKTtcclxuICAgICAgICBpZiAoIWlzUmVuZGVyaW5nQ29tcGlsZWRTbG90KSB7XHJcbiAgICAgICAgICAgIGNsb3NlQmxvY2soKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlcztcclxuICAgIH07XHJcbiAgICByZW5kZXJGbldpdGhDb250ZXh0Ll9jID0gdHJ1ZTtcclxuICAgIHJldHVybiByZW5kZXJGbldpdGhDb250ZXh0O1xyXG59XG5cbi8vIFNGQyBzY29wZWQgc3R5bGUgSUQgbWFuYWdlbWVudC5cclxubGV0IGN1cnJlbnRTY29wZUlkID0gbnVsbDtcclxuY29uc3Qgc2NvcGVJZFN0YWNrID0gW107XHJcbi8qKlxyXG4gKiBAcHJpdmF0ZVxyXG4gKi9cclxuZnVuY3Rpb24gcHVzaFNjb3BlSWQoaWQpIHtcclxuICAgIHNjb3BlSWRTdGFjay5wdXNoKChjdXJyZW50U2NvcGVJZCA9IGlkKSk7XHJcbn1cclxuLyoqXHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG5mdW5jdGlvbiBwb3BTY29wZUlkKCkge1xyXG4gICAgc2NvcGVJZFN0YWNrLnBvcCgpO1xyXG4gICAgY3VycmVudFNjb3BlSWQgPSBzY29wZUlkU3RhY2tbc2NvcGVJZFN0YWNrLmxlbmd0aCAtIDFdIHx8IG51bGw7XHJcbn1cclxuLyoqXHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG5mdW5jdGlvbiB3aXRoU2NvcGVJZChpZCkge1xyXG4gICAgcmV0dXJuICgoZm4pID0+IHdpdGhDdHgoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHB1c2hTY29wZUlkKGlkKTtcclxuICAgICAgICBjb25zdCByZXMgPSBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG4gICAgICAgIHBvcFNjb3BlSWQoKTtcclxuICAgICAgICByZXR1cm4gcmVzO1xyXG4gICAgfSkpO1xyXG59XG5cbmZ1bmN0aW9uIGluaXRQcm9wcyhpbnN0YW5jZSwgcmF3UHJvcHMsIGlzU3RhdGVmdWwsIC8vIHJlc3VsdCBvZiBiaXR3aXNlIGZsYWcgY29tcGFyaXNvblxyXG5pc1NTUiA9IGZhbHNlKSB7XHJcbiAgICBjb25zdCBwcm9wcyA9IHt9O1xyXG4gICAgY29uc3QgYXR0cnMgPSB7fTtcclxuICAgIGRlZihhdHRycywgSW50ZXJuYWxPYmplY3RLZXksIDEpO1xyXG4gICAgc2V0RnVsbFByb3BzKGluc3RhbmNlLCByYXdQcm9wcywgcHJvcHMsIGF0dHJzKTtcclxuICAgIC8vIHZhbGlkYXRpb25cclxuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICB2YWxpZGF0ZVByb3BzKHByb3BzLCBpbnN0YW5jZSk7XHJcbiAgICB9XHJcbiAgICBpZiAoaXNTdGF0ZWZ1bCkge1xyXG4gICAgICAgIC8vIHN0YXRlZnVsXHJcbiAgICAgICAgaW5zdGFuY2UucHJvcHMgPSBpc1NTUiA/IHByb3BzIDogc2hhbGxvd1JlYWN0aXZlKHByb3BzKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGlmICghaW5zdGFuY2UudHlwZS5wcm9wcykge1xyXG4gICAgICAgICAgICAvLyBmdW5jdGlvbmFsIHcvIG9wdGlvbmFsIHByb3BzLCBwcm9wcyA9PT0gYXR0cnNcclxuICAgICAgICAgICAgaW5zdGFuY2UucHJvcHMgPSBhdHRycztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIGZ1bmN0aW9uYWwgdy8gZGVjbGFyZWQgcHJvcHNcclxuICAgICAgICAgICAgaW5zdGFuY2UucHJvcHMgPSBwcm9wcztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpbnN0YW5jZS5hdHRycyA9IGF0dHJzO1xyXG59XHJcbmZ1bmN0aW9uIHVwZGF0ZVByb3BzKGluc3RhbmNlLCByYXdQcm9wcywgcmF3UHJldlByb3BzLCBvcHRpbWl6ZWQpIHtcclxuICAgIGNvbnN0IHsgcHJvcHMsIGF0dHJzLCB2bm9kZTogeyBwYXRjaEZsYWcgfSB9ID0gaW5zdGFuY2U7XHJcbiAgICBjb25zdCByYXdDdXJyZW50UHJvcHMgPSB0b1Jhdyhwcm9wcyk7XHJcbiAgICBjb25zdCBbb3B0aW9uc10gPSBpbnN0YW5jZS5wcm9wc09wdGlvbnM7XHJcbiAgICBpZiAoXHJcbiAgICAvLyBhbHdheXMgZm9yY2UgZnVsbCBkaWZmIGluIGRldlxyXG4gICAgLy8gLSAjMTk0MiBpZiBobXIgaXMgZW5hYmxlZCB3aXRoIHNmYyBjb21wb25lbnRcclxuICAgIC8vIC0gdml0ZSM4NzIgbm9uLXNmYyBjb21wb25lbnQgdXNlZCBieSBzZmMgY29tcG9uZW50XHJcbiAgICAhKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJlxyXG4gICAgICAgIChpbnN0YW5jZS50eXBlLl9faG1ySWQgfHxcclxuICAgICAgICAgICAgKGluc3RhbmNlLnBhcmVudCAmJiBpbnN0YW5jZS5wYXJlbnQudHlwZS5fX2htcklkKSkpICYmXHJcbiAgICAgICAgKG9wdGltaXplZCB8fCBwYXRjaEZsYWcgPiAwKSAmJlxyXG4gICAgICAgICEocGF0Y2hGbGFnICYgMTYgLyogRlVMTF9QUk9QUyAqLykpIHtcclxuICAgICAgICBpZiAocGF0Y2hGbGFnICYgOCAvKiBQUk9QUyAqLykge1xyXG4gICAgICAgICAgICAvLyBDb21waWxlci1nZW5lcmF0ZWQgcHJvcHMgJiBubyBrZXlzIGNoYW5nZSwganVzdCBzZXQgdGhlIHVwZGF0ZWRcclxuICAgICAgICAgICAgLy8gdGhlIHByb3BzLlxyXG4gICAgICAgICAgICBjb25zdCBwcm9wc1RvVXBkYXRlID0gaW5zdGFuY2Uudm5vZGUuZHluYW1pY1Byb3BzO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHByb3BzVG9VcGRhdGUubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGtleSA9IHByb3BzVG9VcGRhdGVbaV07XHJcbiAgICAgICAgICAgICAgICAvLyBQUk9QUyBmbGFnIGd1YXJhbnRlZXMgcmF3UHJvcHMgdG8gYmUgbm9uLW51bGxcclxuICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gcmF3UHJvcHNba2V5XTtcclxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gYXR0ciAvIHByb3BzIHNlcGFyYXRpb24gd2FzIGRvbmUgb24gaW5pdCBhbmQgd2lsbCBiZSBjb25zaXN0ZW50XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaW4gdGhpcyBjb2RlIHBhdGgsIHNvIGp1c3QgY2hlY2sgaWYgYXR0cnMgaGF2ZSBpdC5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoaGFzT3duKGF0dHJzLCBrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzW2tleV0gPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNhbWVsaXplZEtleSA9IGNhbWVsaXplKGtleSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3BzW2NhbWVsaXplZEtleV0gPSByZXNvbHZlUHJvcFZhbHVlKG9wdGlvbnMsIHJhd0N1cnJlbnRQcm9wcywgY2FtZWxpemVkS2V5LCB2YWx1ZSwgaW5zdGFuY2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGF0dHJzW2tleV0gPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIC8vIGZ1bGwgcHJvcHMgdXBkYXRlLlxyXG4gICAgICAgIHNldEZ1bGxQcm9wcyhpbnN0YW5jZSwgcmF3UHJvcHMsIHByb3BzLCBhdHRycyk7XHJcbiAgICAgICAgLy8gaW4gY2FzZSBvZiBkeW5hbWljIHByb3BzLCBjaGVjayBpZiB3ZSBuZWVkIHRvIGRlbGV0ZSBrZXlzIGZyb21cclxuICAgICAgICAvLyB0aGUgcHJvcHMgb2JqZWN0XHJcbiAgICAgICAgbGV0IGtlYmFiS2V5O1xyXG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIHJhd0N1cnJlbnRQcm9wcykge1xyXG4gICAgICAgICAgICBpZiAoIXJhd1Byb3BzIHx8XHJcbiAgICAgICAgICAgICAgICAvLyBmb3IgY2FtZWxDYXNlXHJcbiAgICAgICAgICAgICAgICAoIWhhc093bihyYXdQcm9wcywga2V5KSAmJlxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGl0J3MgcG9zc2libGUgdGhlIG9yaWdpbmFsIHByb3BzIHdhcyBwYXNzZWQgaW4gYXMga2ViYWItY2FzZVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGFuZCBjb252ZXJ0ZWQgdG8gY2FtZWxDYXNlICgjOTU1KVxyXG4gICAgICAgICAgICAgICAgICAgICgoa2ViYWJLZXkgPSBoeXBoZW5hdGUoa2V5KSkgPT09IGtleSB8fCAhaGFzT3duKHJhd1Byb3BzLCBrZWJhYktleSkpKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocmF3UHJldlByb3BzICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGZvciBjYW1lbENhc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgKHJhd1ByZXZQcm9wc1trZXldICE9PSB1bmRlZmluZWQgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGZvciBrZWJhYi1jYXNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYXdQcmV2UHJvcHNba2ViYWJLZXldICE9PSB1bmRlZmluZWQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3BzW2tleV0gPSByZXNvbHZlUHJvcFZhbHVlKG9wdGlvbnMsIHJhd1Byb3BzIHx8IEVNUFRZX09CSiwga2V5LCB1bmRlZmluZWQsIGluc3RhbmNlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBkZWxldGUgcHJvcHNba2V5XTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBpbiB0aGUgY2FzZSBvZiBmdW5jdGlvbmFsIGNvbXBvbmVudCB3L28gcHJvcHMgZGVjbGFyYXRpb24sIHByb3BzIGFuZFxyXG4gICAgICAgIC8vIGF0dHJzIHBvaW50IHRvIHRoZSBzYW1lIG9iamVjdCBzbyBpdCBzaG91bGQgYWxyZWFkeSBoYXZlIGJlZW4gdXBkYXRlZC5cclxuICAgICAgICBpZiAoYXR0cnMgIT09IHJhd0N1cnJlbnRQcm9wcykge1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBhdHRycykge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFyYXdQcm9wcyB8fCAhaGFzT3duKHJhd1Byb3BzLCBrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGF0dHJzW2tleV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyB0cmlnZ2VyIHVwZGF0ZXMgZm9yICRhdHRycyBpbiBjYXNlIGl0J3MgdXNlZCBpbiBjb21wb25lbnQgc2xvdHNcclxuICAgIHRyaWdnZXIoaW5zdGFuY2UsIFwic2V0XCIgLyogU0VUICovLCAnJGF0dHJzJyk7XHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIHJhd1Byb3BzKSB7XHJcbiAgICAgICAgdmFsaWRhdGVQcm9wcyhwcm9wcywgaW5zdGFuY2UpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIHNldEZ1bGxQcm9wcyhpbnN0YW5jZSwgcmF3UHJvcHMsIHByb3BzLCBhdHRycykge1xyXG4gICAgY29uc3QgW29wdGlvbnMsIG5lZWRDYXN0S2V5c10gPSBpbnN0YW5jZS5wcm9wc09wdGlvbnM7XHJcbiAgICBpZiAocmF3UHJvcHMpIHtcclxuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiByYXdQcm9wcykge1xyXG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHJhd1Byb3BzW2tleV07XHJcbiAgICAgICAgICAgIC8vIGtleSwgcmVmIGFyZSByZXNlcnZlZCBhbmQgbmV2ZXIgcGFzc2VkIGRvd25cclxuICAgICAgICAgICAgaWYgKGlzUmVzZXJ2ZWRQcm9wKGtleSkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIHByb3Agb3B0aW9uIG5hbWVzIGFyZSBjYW1lbGl6ZWQgZHVyaW5nIG5vcm1hbGl6YXRpb24sIHNvIHRvIHN1cHBvcnRcclxuICAgICAgICAgICAgLy8ga2ViYWIgLT4gY2FtZWwgY29udmVyc2lvbiBoZXJlIHdlIG5lZWQgdG8gY2FtZWxpemUgdGhlIGtleS5cclxuICAgICAgICAgICAgbGV0IGNhbWVsS2V5O1xyXG4gICAgICAgICAgICBpZiAob3B0aW9ucyAmJiBoYXNPd24ob3B0aW9ucywgKGNhbWVsS2V5ID0gY2FtZWxpemUoa2V5KSkpKSB7XHJcbiAgICAgICAgICAgICAgICBwcm9wc1tjYW1lbEtleV0gPSB2YWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICghaXNFbWl0TGlzdGVuZXIoaW5zdGFuY2UuZW1pdHNPcHRpb25zLCBrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBBbnkgbm9uLWRlY2xhcmVkIChlaXRoZXIgYXMgYSBwcm9wIG9yIGFuIGVtaXR0ZWQgZXZlbnQpIHByb3BzIGFyZSBwdXRcclxuICAgICAgICAgICAgICAgIC8vIGludG8gYSBzZXBhcmF0ZSBgYXR0cnNgIG9iamVjdCBmb3Igc3ByZWFkaW5nLiBNYWtlIHN1cmUgdG8gcHJlc2VydmVcclxuICAgICAgICAgICAgICAgIC8vIG9yaWdpbmFsIGtleSBjYXNpbmdcclxuICAgICAgICAgICAgICAgIGF0dHJzW2tleV0gPSB2YWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmIChuZWVkQ2FzdEtleXMpIHtcclxuICAgICAgICBjb25zdCByYXdDdXJyZW50UHJvcHMgPSB0b1Jhdyhwcm9wcyk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuZWVkQ2FzdEtleXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgY29uc3Qga2V5ID0gbmVlZENhc3RLZXlzW2ldO1xyXG4gICAgICAgICAgICBwcm9wc1trZXldID0gcmVzb2x2ZVByb3BWYWx1ZShvcHRpb25zLCByYXdDdXJyZW50UHJvcHMsIGtleSwgcmF3Q3VycmVudFByb3BzW2tleV0sIGluc3RhbmNlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gcmVzb2x2ZVByb3BWYWx1ZShvcHRpb25zLCBwcm9wcywga2V5LCB2YWx1ZSwgaW5zdGFuY2UpIHtcclxuICAgIGNvbnN0IG9wdCA9IG9wdGlvbnNba2V5XTtcclxuICAgIGlmIChvcHQgIT0gbnVsbCkge1xyXG4gICAgICAgIGNvbnN0IGhhc0RlZmF1bHQgPSBoYXNPd24ob3B0LCAnZGVmYXVsdCcpO1xyXG4gICAgICAgIC8vIGRlZmF1bHQgdmFsdWVzXHJcbiAgICAgICAgaWYgKGhhc0RlZmF1bHQgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBjb25zdCBkZWZhdWx0VmFsdWUgPSBvcHQuZGVmYXVsdDtcclxuICAgICAgICAgICAgaWYgKG9wdC50eXBlICE9PSBGdW5jdGlvbiAmJiBpc0Z1bmN0aW9uKGRlZmF1bHRWYWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgIHNldEN1cnJlbnRJbnN0YW5jZShpbnN0YW5jZSk7XHJcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IGRlZmF1bHRWYWx1ZShwcm9wcyk7XHJcbiAgICAgICAgICAgICAgICBzZXRDdXJyZW50SW5zdGFuY2UobnVsbCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IGRlZmF1bHRWYWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBib29sZWFuIGNhc3RpbmdcclxuICAgICAgICBpZiAob3B0WzAgLyogc2hvdWxkQ2FzdCAqL10pIHtcclxuICAgICAgICAgICAgaWYgKCFoYXNPd24ocHJvcHMsIGtleSkgJiYgIWhhc0RlZmF1bHQpIHtcclxuICAgICAgICAgICAgICAgIHZhbHVlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAob3B0WzEgLyogc2hvdWxkQ2FzdFRydWUgKi9dICYmXHJcbiAgICAgICAgICAgICAgICAodmFsdWUgPT09ICcnIHx8IHZhbHVlID09PSBoeXBoZW5hdGUoa2V5KSkpIHtcclxuICAgICAgICAgICAgICAgIHZhbHVlID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB2YWx1ZTtcclxufVxyXG5mdW5jdGlvbiBub3JtYWxpemVQcm9wc09wdGlvbnMoY29tcCwgYXBwQ29udGV4dCwgYXNNaXhpbiA9IGZhbHNlKSB7XHJcbiAgICBpZiAoIWFwcENvbnRleHQuZGVvcHQgJiYgY29tcC5fX3Byb3BzKSB7XHJcbiAgICAgICAgcmV0dXJuIGNvbXAuX19wcm9wcztcclxuICAgIH1cclxuICAgIGNvbnN0IHJhdyA9IGNvbXAucHJvcHM7XHJcbiAgICBjb25zdCBub3JtYWxpemVkID0ge307XHJcbiAgICBjb25zdCBuZWVkQ2FzdEtleXMgPSBbXTtcclxuICAgIC8vIGFwcGx5IG1peGluL2V4dGVuZHMgcHJvcHNcclxuICAgIGxldCBoYXNFeHRlbmRzID0gZmFsc2U7XHJcbiAgICBpZiAoX19WVUVfT1BUSU9OU19BUElfXyAmJiAhaXNGdW5jdGlvbihjb21wKSkge1xyXG4gICAgICAgIGNvbnN0IGV4dGVuZFByb3BzID0gKHJhdykgPT4ge1xyXG4gICAgICAgICAgICBoYXNFeHRlbmRzID0gdHJ1ZTtcclxuICAgICAgICAgICAgY29uc3QgW3Byb3BzLCBrZXlzXSA9IG5vcm1hbGl6ZVByb3BzT3B0aW9ucyhyYXcsIGFwcENvbnRleHQsIHRydWUpO1xyXG4gICAgICAgICAgICBleHRlbmQobm9ybWFsaXplZCwgcHJvcHMpO1xyXG4gICAgICAgICAgICBpZiAoa2V5cylcclxuICAgICAgICAgICAgICAgIG5lZWRDYXN0S2V5cy5wdXNoKC4uLmtleXMpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgaWYgKCFhc01peGluICYmIGFwcENvbnRleHQubWl4aW5zLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBhcHBDb250ZXh0Lm1peGlucy5mb3JFYWNoKGV4dGVuZFByb3BzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGNvbXAuZXh0ZW5kcykge1xyXG4gICAgICAgICAgICBleHRlbmRQcm9wcyhjb21wLmV4dGVuZHMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoY29tcC5taXhpbnMpIHtcclxuICAgICAgICAgICAgY29tcC5taXhpbnMuZm9yRWFjaChleHRlbmRQcm9wcyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKCFyYXcgJiYgIWhhc0V4dGVuZHMpIHtcclxuICAgICAgICByZXR1cm4gKGNvbXAuX19wcm9wcyA9IEVNUFRZX0FSUik7XHJcbiAgICB9XHJcbiAgICBpZiAoaXNBcnJheShyYXcpKSB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCByYXcubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhaXNTdHJpbmcocmF3W2ldKSkge1xyXG4gICAgICAgICAgICAgICAgd2FybihgcHJvcHMgbXVzdCBiZSBzdHJpbmdzIHdoZW4gdXNpbmcgYXJyYXkgc3ludGF4LmAsIHJhd1tpXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3Qgbm9ybWFsaXplZEtleSA9IGNhbWVsaXplKHJhd1tpXSk7XHJcbiAgICAgICAgICAgIGlmICh2YWxpZGF0ZVByb3BOYW1lKG5vcm1hbGl6ZWRLZXkpKSB7XHJcbiAgICAgICAgICAgICAgICBub3JtYWxpemVkW25vcm1hbGl6ZWRLZXldID0gRU1QVFlfT0JKO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAocmF3KSB7XHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhaXNPYmplY3QocmF3KSkge1xyXG4gICAgICAgICAgICB3YXJuKGBpbnZhbGlkIHByb3BzIG9wdGlvbnNgLCByYXcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiByYXcpIHtcclxuICAgICAgICAgICAgY29uc3Qgbm9ybWFsaXplZEtleSA9IGNhbWVsaXplKGtleSk7XHJcbiAgICAgICAgICAgIGlmICh2YWxpZGF0ZVByb3BOYW1lKG5vcm1hbGl6ZWRLZXkpKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvcHQgPSByYXdba2V5XTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHByb3AgPSAobm9ybWFsaXplZFtub3JtYWxpemVkS2V5XSA9XHJcbiAgICAgICAgICAgICAgICAgICAgaXNBcnJheShvcHQpIHx8IGlzRnVuY3Rpb24ob3B0KSA/IHsgdHlwZTogb3B0IH0gOiBvcHQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHByb3ApIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBib29sZWFuSW5kZXggPSBnZXRUeXBlSW5kZXgoQm9vbGVhbiwgcHJvcC50eXBlKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzdHJpbmdJbmRleCA9IGdldFR5cGVJbmRleChTdHJpbmcsIHByb3AudHlwZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJvcFswIC8qIHNob3VsZENhc3QgKi9dID0gYm9vbGVhbkluZGV4ID4gLTE7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJvcFsxIC8qIHNob3VsZENhc3RUcnVlICovXSA9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0cmluZ0luZGV4IDwgMCB8fCBib29sZWFuSW5kZXggPCBzdHJpbmdJbmRleDtcclxuICAgICAgICAgICAgICAgICAgICAvLyBpZiB0aGUgcHJvcCBuZWVkcyBib29sZWFuIGNhc3Rpbmcgb3IgZGVmYXVsdCB2YWx1ZVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChib29sZWFuSW5kZXggPiAtMSB8fCBoYXNPd24ocHJvcCwgJ2RlZmF1bHQnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZWVkQ2FzdEtleXMucHVzaChub3JtYWxpemVkS2V5KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gKGNvbXAuX19wcm9wcyA9IFtub3JtYWxpemVkLCBuZWVkQ2FzdEtleXNdKTtcclxufVxyXG5mdW5jdGlvbiB2YWxpZGF0ZVByb3BOYW1lKGtleSkge1xyXG4gICAgaWYgKGtleVswXSAhPT0gJyQnKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICB3YXJuKGBJbnZhbGlkIHByb3AgbmFtZTogXCIke2tleX1cIiBpcyBhIHJlc2VydmVkIHByb3BlcnR5LmApO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG59XHJcbi8vIHVzZSBmdW5jdGlvbiBzdHJpbmcgbmFtZSB0byBjaGVjayB0eXBlIGNvbnN0cnVjdG9yc1xyXG4vLyBzbyB0aGF0IGl0IHdvcmtzIGFjcm9zcyB2bXMgLyBpZnJhbWVzLlxyXG5mdW5jdGlvbiBnZXRUeXBlKGN0b3IpIHtcclxuICAgIGNvbnN0IG1hdGNoID0gY3RvciAmJiBjdG9yLnRvU3RyaW5nKCkubWF0Y2goL15cXHMqZnVuY3Rpb24gKFxcdyspLyk7XHJcbiAgICByZXR1cm4gbWF0Y2ggPyBtYXRjaFsxXSA6ICcnO1xyXG59XHJcbmZ1bmN0aW9uIGlzU2FtZVR5cGUoYSwgYikge1xyXG4gICAgcmV0dXJuIGdldFR5cGUoYSkgPT09IGdldFR5cGUoYik7XHJcbn1cclxuZnVuY3Rpb24gZ2V0VHlwZUluZGV4KHR5cGUsIGV4cGVjdGVkVHlwZXMpIHtcclxuICAgIGlmIChpc0FycmF5KGV4cGVjdGVkVHlwZXMpKSB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGV4cGVjdGVkVHlwZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGlzU2FtZVR5cGUoZXhwZWN0ZWRUeXBlc1tpXSwgdHlwZSkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoaXNGdW5jdGlvbihleHBlY3RlZFR5cGVzKSkge1xyXG4gICAgICAgIHJldHVybiBpc1NhbWVUeXBlKGV4cGVjdGVkVHlwZXMsIHR5cGUpID8gMCA6IC0xO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIC0xO1xyXG59XHJcbi8qKlxyXG4gKiBkZXYgb25seVxyXG4gKi9cclxuZnVuY3Rpb24gdmFsaWRhdGVQcm9wcyhwcm9wcywgaW5zdGFuY2UpIHtcclxuICAgIGNvbnN0IHJhd1ZhbHVlcyA9IHRvUmF3KHByb3BzKTtcclxuICAgIGNvbnN0IG9wdGlvbnMgPSBpbnN0YW5jZS5wcm9wc09wdGlvbnNbMF07XHJcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBvcHRpb25zKSB7XHJcbiAgICAgICAgbGV0IG9wdCA9IG9wdGlvbnNba2V5XTtcclxuICAgICAgICBpZiAob3B0ID09IG51bGwpXHJcbiAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIHZhbGlkYXRlUHJvcChrZXksIHJhd1ZhbHVlc1trZXldLCBvcHQsICFoYXNPd24ocmF3VmFsdWVzLCBrZXkpKTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogZGV2IG9ubHlcclxuICovXHJcbmZ1bmN0aW9uIHZhbGlkYXRlUHJvcChuYW1lLCB2YWx1ZSwgcHJvcCwgaXNBYnNlbnQpIHtcclxuICAgIGNvbnN0IHsgdHlwZSwgcmVxdWlyZWQsIHZhbGlkYXRvciB9ID0gcHJvcDtcclxuICAgIC8vIHJlcXVpcmVkIVxyXG4gICAgaWYgKHJlcXVpcmVkICYmIGlzQWJzZW50KSB7XHJcbiAgICAgICAgd2FybignTWlzc2luZyByZXF1aXJlZCBwcm9wOiBcIicgKyBuYW1lICsgJ1wiJyk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgLy8gbWlzc2luZyBidXQgb3B0aW9uYWxcclxuICAgIGlmICh2YWx1ZSA9PSBudWxsICYmICFwcm9wLnJlcXVpcmVkKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgLy8gdHlwZSBjaGVja1xyXG4gICAgaWYgKHR5cGUgIT0gbnVsbCAmJiB0eXBlICE9PSB0cnVlKSB7XHJcbiAgICAgICAgbGV0IGlzVmFsaWQgPSBmYWxzZTtcclxuICAgICAgICBjb25zdCB0eXBlcyA9IGlzQXJyYXkodHlwZSkgPyB0eXBlIDogW3R5cGVdO1xyXG4gICAgICAgIGNvbnN0IGV4cGVjdGVkVHlwZXMgPSBbXTtcclxuICAgICAgICAvLyB2YWx1ZSBpcyB2YWxpZCBhcyBsb25nIGFzIG9uZSBvZiB0aGUgc3BlY2lmaWVkIHR5cGVzIG1hdGNoXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0eXBlcy5sZW5ndGggJiYgIWlzVmFsaWQ7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCB7IHZhbGlkLCBleHBlY3RlZFR5cGUgfSA9IGFzc2VydFR5cGUodmFsdWUsIHR5cGVzW2ldKTtcclxuICAgICAgICAgICAgZXhwZWN0ZWRUeXBlcy5wdXNoKGV4cGVjdGVkVHlwZSB8fCAnJyk7XHJcbiAgICAgICAgICAgIGlzVmFsaWQgPSB2YWxpZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFpc1ZhbGlkKSB7XHJcbiAgICAgICAgICAgIHdhcm4oZ2V0SW52YWxpZFR5cGVNZXNzYWdlKG5hbWUsIHZhbHVlLCBleHBlY3RlZFR5cGVzKSk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyBjdXN0b20gdmFsaWRhdG9yXHJcbiAgICBpZiAodmFsaWRhdG9yICYmICF2YWxpZGF0b3IodmFsdWUpKSB7XHJcbiAgICAgICAgd2FybignSW52YWxpZCBwcm9wOiBjdXN0b20gdmFsaWRhdG9yIGNoZWNrIGZhaWxlZCBmb3IgcHJvcCBcIicgKyBuYW1lICsgJ1wiLicpO1xyXG4gICAgfVxyXG59XHJcbmNvbnN0IGlzU2ltcGxlVHlwZSA9IC8qI19fUFVSRV9fKi8gbWFrZU1hcCgnU3RyaW5nLE51bWJlcixCb29sZWFuLEZ1bmN0aW9uLFN5bWJvbCcpO1xyXG4vKipcclxuICogZGV2IG9ubHlcclxuICovXHJcbmZ1bmN0aW9uIGFzc2VydFR5cGUodmFsdWUsIHR5cGUpIHtcclxuICAgIGxldCB2YWxpZDtcclxuICAgIGNvbnN0IGV4cGVjdGVkVHlwZSA9IGdldFR5cGUodHlwZSk7XHJcbiAgICBpZiAoaXNTaW1wbGVUeXBlKGV4cGVjdGVkVHlwZSkpIHtcclxuICAgICAgICBjb25zdCB0ID0gdHlwZW9mIHZhbHVlO1xyXG4gICAgICAgIHZhbGlkID0gdCA9PT0gZXhwZWN0ZWRUeXBlLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgLy8gZm9yIHByaW1pdGl2ZSB3cmFwcGVyIG9iamVjdHNcclxuICAgICAgICBpZiAoIXZhbGlkICYmIHQgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgIHZhbGlkID0gdmFsdWUgaW5zdGFuY2VvZiB0eXBlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGV4cGVjdGVkVHlwZSA9PT0gJ09iamVjdCcpIHtcclxuICAgICAgICB2YWxpZCA9IGlzT2JqZWN0KHZhbHVlKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGV4cGVjdGVkVHlwZSA9PT0gJ0FycmF5Jykge1xyXG4gICAgICAgIHZhbGlkID0gaXNBcnJheSh2YWx1ZSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICB2YWxpZCA9IHZhbHVlIGluc3RhbmNlb2YgdHlwZTtcclxuICAgIH1cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgdmFsaWQsXHJcbiAgICAgICAgZXhwZWN0ZWRUeXBlXHJcbiAgICB9O1xyXG59XHJcbi8qKlxyXG4gKiBkZXYgb25seVxyXG4gKi9cclxuZnVuY3Rpb24gZ2V0SW52YWxpZFR5cGVNZXNzYWdlKG5hbWUsIHZhbHVlLCBleHBlY3RlZFR5cGVzKSB7XHJcbiAgICBsZXQgbWVzc2FnZSA9IGBJbnZhbGlkIHByb3A6IHR5cGUgY2hlY2sgZmFpbGVkIGZvciBwcm9wIFwiJHtuYW1lfVwiLmAgK1xyXG4gICAgICAgIGAgRXhwZWN0ZWQgJHtleHBlY3RlZFR5cGVzLm1hcChjYXBpdGFsaXplKS5qb2luKCcsICcpfWA7XHJcbiAgICBjb25zdCBleHBlY3RlZFR5cGUgPSBleHBlY3RlZFR5cGVzWzBdO1xyXG4gICAgY29uc3QgcmVjZWl2ZWRUeXBlID0gdG9SYXdUeXBlKHZhbHVlKTtcclxuICAgIGNvbnN0IGV4cGVjdGVkVmFsdWUgPSBzdHlsZVZhbHVlKHZhbHVlLCBleHBlY3RlZFR5cGUpO1xyXG4gICAgY29uc3QgcmVjZWl2ZWRWYWx1ZSA9IHN0eWxlVmFsdWUodmFsdWUsIHJlY2VpdmVkVHlwZSk7XHJcbiAgICAvLyBjaGVjayBpZiB3ZSBuZWVkIHRvIHNwZWNpZnkgZXhwZWN0ZWQgdmFsdWVcclxuICAgIGlmIChleHBlY3RlZFR5cGVzLmxlbmd0aCA9PT0gMSAmJlxyXG4gICAgICAgIGlzRXhwbGljYWJsZShleHBlY3RlZFR5cGUpICYmXHJcbiAgICAgICAgIWlzQm9vbGVhbihleHBlY3RlZFR5cGUsIHJlY2VpdmVkVHlwZSkpIHtcclxuICAgICAgICBtZXNzYWdlICs9IGAgd2l0aCB2YWx1ZSAke2V4cGVjdGVkVmFsdWV9YDtcclxuICAgIH1cclxuICAgIG1lc3NhZ2UgKz0gYCwgZ290ICR7cmVjZWl2ZWRUeXBlfSBgO1xyXG4gICAgLy8gY2hlY2sgaWYgd2UgbmVlZCB0byBzcGVjaWZ5IHJlY2VpdmVkIHZhbHVlXHJcbiAgICBpZiAoaXNFeHBsaWNhYmxlKHJlY2VpdmVkVHlwZSkpIHtcclxuICAgICAgICBtZXNzYWdlICs9IGB3aXRoIHZhbHVlICR7cmVjZWl2ZWRWYWx1ZX0uYDtcclxuICAgIH1cclxuICAgIHJldHVybiBtZXNzYWdlO1xyXG59XHJcbi8qKlxyXG4gKiBkZXYgb25seVxyXG4gKi9cclxuZnVuY3Rpb24gc3R5bGVWYWx1ZSh2YWx1ZSwgdHlwZSkge1xyXG4gICAgaWYgKHR5cGUgPT09ICdTdHJpbmcnKSB7XHJcbiAgICAgICAgcmV0dXJuIGBcIiR7dmFsdWV9XCJgO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAodHlwZSA9PT0gJ051bWJlcicpIHtcclxuICAgICAgICByZXR1cm4gYCR7TnVtYmVyKHZhbHVlKX1gO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIGAke3ZhbHVlfWA7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIGRldiBvbmx5XHJcbiAqL1xyXG5mdW5jdGlvbiBpc0V4cGxpY2FibGUodHlwZSkge1xyXG4gICAgY29uc3QgZXhwbGljaXRUeXBlcyA9IFsnc3RyaW5nJywgJ251bWJlcicsICdib29sZWFuJ107XHJcbiAgICByZXR1cm4gZXhwbGljaXRUeXBlcy5zb21lKGVsZW0gPT4gdHlwZS50b0xvd2VyQ2FzZSgpID09PSBlbGVtKTtcclxufVxyXG4vKipcclxuICogZGV2IG9ubHlcclxuICovXHJcbmZ1bmN0aW9uIGlzQm9vbGVhbiguLi5hcmdzKSB7XHJcbiAgICByZXR1cm4gYXJncy5zb21lKGVsZW0gPT4gZWxlbS50b0xvd2VyQ2FzZSgpID09PSAnYm9vbGVhbicpO1xyXG59XG5cbmZ1bmN0aW9uIGluamVjdEhvb2sodHlwZSwgaG9vaywgdGFyZ2V0ID0gY3VycmVudEluc3RhbmNlLCBwcmVwZW5kID0gZmFsc2UpIHtcclxuICAgIGlmICh0YXJnZXQpIHtcclxuICAgICAgICBjb25zdCBob29rcyA9IHRhcmdldFt0eXBlXSB8fCAodGFyZ2V0W3R5cGVdID0gW10pO1xyXG4gICAgICAgIC8vIGNhY2hlIHRoZSBlcnJvciBoYW5kbGluZyB3cmFwcGVyIGZvciBpbmplY3RlZCBob29rcyBzbyB0aGUgc2FtZSBob29rXHJcbiAgICAgICAgLy8gY2FuIGJlIHByb3Blcmx5IGRlZHVwZWQgYnkgdGhlIHNjaGVkdWxlci4gXCJfX3dlaFwiIHN0YW5kcyBmb3IgXCJ3aXRoIGVycm9yXHJcbiAgICAgICAgLy8gaGFuZGxpbmdcIi5cclxuICAgICAgICBjb25zdCB3cmFwcGVkSG9vayA9IGhvb2suX193ZWggfHxcclxuICAgICAgICAgICAgKGhvb2suX193ZWggPSAoLi4uYXJncykgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRhcmdldC5pc1VubW91bnRlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIGRpc2FibGUgdHJhY2tpbmcgaW5zaWRlIGFsbCBsaWZlY3ljbGUgaG9va3NcclxuICAgICAgICAgICAgICAgIC8vIHNpbmNlIHRoZXkgY2FuIHBvdGVudGlhbGx5IGJlIGNhbGxlZCBpbnNpZGUgZWZmZWN0cy5cclxuICAgICAgICAgICAgICAgIHBhdXNlVHJhY2tpbmcoKTtcclxuICAgICAgICAgICAgICAgIC8vIFNldCBjdXJyZW50SW5zdGFuY2UgZHVyaW5nIGhvb2sgaW52b2NhdGlvbi5cclxuICAgICAgICAgICAgICAgIC8vIFRoaXMgYXNzdW1lcyB0aGUgaG9vayBkb2VzIG5vdCBzeW5jaHJvbm91c2x5IHRyaWdnZXIgb3RoZXIgaG9va3MsIHdoaWNoXHJcbiAgICAgICAgICAgICAgICAvLyBjYW4gb25seSBiZSBmYWxzZSB3aGVuIHRoZSB1c2VyIGRvZXMgc29tZXRoaW5nIHJlYWxseSBmdW5reS5cclxuICAgICAgICAgICAgICAgIHNldEN1cnJlbnRJbnN0YW5jZSh0YXJnZXQpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcmVzID0gY2FsbFdpdGhBc3luY0Vycm9ySGFuZGxpbmcoaG9vaywgdGFyZ2V0LCB0eXBlLCBhcmdzKTtcclxuICAgICAgICAgICAgICAgIHNldEN1cnJlbnRJbnN0YW5jZShudWxsKTtcclxuICAgICAgICAgICAgICAgIHJlc2V0VHJhY2tpbmcoKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiByZXM7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIGlmIChwcmVwZW5kKSB7XHJcbiAgICAgICAgICAgIGhvb2tzLnVuc2hpZnQod3JhcHBlZEhvb2spO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgaG9va3MucHVzaCh3cmFwcGVkSG9vayk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB3cmFwcGVkSG9vaztcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgIGNvbnN0IGFwaU5hbWUgPSB0b0hhbmRsZXJLZXkoRXJyb3JUeXBlU3RyaW5nc1t0eXBlXS5yZXBsYWNlKC8gaG9vayQvLCAnJykpO1xyXG4gICAgICAgIHdhcm4oYCR7YXBpTmFtZX0gaXMgY2FsbGVkIHdoZW4gdGhlcmUgaXMgbm8gYWN0aXZlIGNvbXBvbmVudCBpbnN0YW5jZSB0byBiZSBgICtcclxuICAgICAgICAgICAgYGFzc29jaWF0ZWQgd2l0aC4gYCArXHJcbiAgICAgICAgICAgIGBMaWZlY3ljbGUgaW5qZWN0aW9uIEFQSXMgY2FuIG9ubHkgYmUgdXNlZCBkdXJpbmcgZXhlY3V0aW9uIG9mIHNldHVwKCkuYCArXHJcbiAgICAgICAgICAgICggYCBJZiB5b3UgYXJlIHVzaW5nIGFzeW5jIHNldHVwKCksIG1ha2Ugc3VyZSB0byByZWdpc3RlciBsaWZlY3ljbGUgYCArXHJcbiAgICAgICAgICAgICAgICAgICAgYGhvb2tzIGJlZm9yZSB0aGUgZmlyc3QgYXdhaXQgc3RhdGVtZW50LmBcclxuICAgICAgICAgICAgICAgICkpO1xyXG4gICAgfVxyXG59XHJcbmNvbnN0IGNyZWF0ZUhvb2sgPSAobGlmZWN5Y2xlKSA9PiAoaG9vaywgdGFyZ2V0ID0gY3VycmVudEluc3RhbmNlKSA9PiBcclxuLy8gcG9zdC1jcmVhdGUgbGlmZWN5Y2xlIHJlZ2lzdHJhdGlvbnMgYXJlIG5vb3BzIGR1cmluZyBTU1JcclxuIWlzSW5TU1JDb21wb25lbnRTZXR1cCAmJiBpbmplY3RIb29rKGxpZmVjeWNsZSwgaG9vaywgdGFyZ2V0KTtcclxuY29uc3Qgb25CZWZvcmVNb3VudCA9IGNyZWF0ZUhvb2soXCJibVwiIC8qIEJFRk9SRV9NT1VOVCAqLyk7XHJcbmNvbnN0IG9uTW91bnRlZCA9IGNyZWF0ZUhvb2soXCJtXCIgLyogTU9VTlRFRCAqLyk7XHJcbmNvbnN0IG9uQmVmb3JlVXBkYXRlID0gY3JlYXRlSG9vayhcImJ1XCIgLyogQkVGT1JFX1VQREFURSAqLyk7XHJcbmNvbnN0IG9uVXBkYXRlZCA9IGNyZWF0ZUhvb2soXCJ1XCIgLyogVVBEQVRFRCAqLyk7XHJcbmNvbnN0IG9uQmVmb3JlVW5tb3VudCA9IGNyZWF0ZUhvb2soXCJidW1cIiAvKiBCRUZPUkVfVU5NT1VOVCAqLyk7XHJcbmNvbnN0IG9uVW5tb3VudGVkID0gY3JlYXRlSG9vayhcInVtXCIgLyogVU5NT1VOVEVEICovKTtcclxuY29uc3Qgb25SZW5kZXJUcmlnZ2VyZWQgPSBjcmVhdGVIb29rKFwicnRnXCIgLyogUkVOREVSX1RSSUdHRVJFRCAqLyk7XHJcbmNvbnN0IG9uUmVuZGVyVHJhY2tlZCA9IGNyZWF0ZUhvb2soXCJydGNcIiAvKiBSRU5ERVJfVFJBQ0tFRCAqLyk7XHJcbmNvbnN0IG9uRXJyb3JDYXB0dXJlZCA9IChob29rLCB0YXJnZXQgPSBjdXJyZW50SW5zdGFuY2UpID0+IHtcclxuICAgIGluamVjdEhvb2soXCJlY1wiIC8qIEVSUk9SX0NBUFRVUkVEICovLCBob29rLCB0YXJnZXQpO1xyXG59O1xuXG4vLyBTaW1wbGUgZWZmZWN0LlxyXG5mdW5jdGlvbiB3YXRjaEVmZmVjdChlZmZlY3QsIG9wdGlvbnMpIHtcclxuICAgIHJldHVybiBkb1dhdGNoKGVmZmVjdCwgbnVsbCwgb3B0aW9ucyk7XHJcbn1cclxuLy8gaW5pdGlhbCB2YWx1ZSBmb3Igd2F0Y2hlcnMgdG8gdHJpZ2dlciBvbiB1bmRlZmluZWQgaW5pdGlhbCB2YWx1ZXNcclxuY29uc3QgSU5JVElBTF9XQVRDSEVSX1ZBTFVFID0ge307XHJcbi8vIGltcGxlbWVudGF0aW9uXHJcbmZ1bmN0aW9uIHdhdGNoKHNvdXJjZSwgY2IsIG9wdGlvbnMpIHtcclxuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIWlzRnVuY3Rpb24oY2IpKSB7XHJcbiAgICAgICAgd2FybihgXFxgd2F0Y2goZm4sIG9wdGlvbnM/KVxcYCBzaWduYXR1cmUgaGFzIGJlZW4gbW92ZWQgdG8gYSBzZXBhcmF0ZSBBUEkuIGAgK1xyXG4gICAgICAgICAgICBgVXNlIFxcYHdhdGNoRWZmZWN0KGZuLCBvcHRpb25zPylcXGAgaW5zdGVhZC4gXFxgd2F0Y2hcXGAgbm93IG9ubHkgYCArXHJcbiAgICAgICAgICAgIGBzdXBwb3J0cyBcXGB3YXRjaChzb3VyY2UsIGNiLCBvcHRpb25zPykgc2lnbmF0dXJlLmApO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGRvV2F0Y2goc291cmNlLCBjYiwgb3B0aW9ucyk7XHJcbn1cclxuZnVuY3Rpb24gZG9XYXRjaChzb3VyY2UsIGNiLCB7IGltbWVkaWF0ZSwgZGVlcCwgZmx1c2gsIG9uVHJhY2ssIG9uVHJpZ2dlciB9ID0gRU1QVFlfT0JKLCBpbnN0YW5jZSA9IGN1cnJlbnRJbnN0YW5jZSkge1xyXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhY2IpIHtcclxuICAgICAgICBpZiAoaW1tZWRpYXRlICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgd2Fybihgd2F0Y2goKSBcImltbWVkaWF0ZVwiIG9wdGlvbiBpcyBvbmx5IHJlc3BlY3RlZCB3aGVuIHVzaW5nIHRoZSBgICtcclxuICAgICAgICAgICAgICAgIGB3YXRjaChzb3VyY2UsIGNhbGxiYWNrLCBvcHRpb25zPykgc2lnbmF0dXJlLmApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZGVlcCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHdhcm4oYHdhdGNoKCkgXCJkZWVwXCIgb3B0aW9uIGlzIG9ubHkgcmVzcGVjdGVkIHdoZW4gdXNpbmcgdGhlIGAgK1xyXG4gICAgICAgICAgICAgICAgYHdhdGNoKHNvdXJjZSwgY2FsbGJhY2ssIG9wdGlvbnM/KSBzaWduYXR1cmUuYCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY29uc3Qgd2FybkludmFsaWRTb3VyY2UgPSAocykgPT4ge1xyXG4gICAgICAgIHdhcm4oYEludmFsaWQgd2F0Y2ggc291cmNlOiBgLCBzLCBgQSB3YXRjaCBzb3VyY2UgY2FuIG9ubHkgYmUgYSBnZXR0ZXIvZWZmZWN0IGZ1bmN0aW9uLCBhIHJlZiwgYCArXHJcbiAgICAgICAgICAgIGBhIHJlYWN0aXZlIG9iamVjdCwgb3IgYW4gYXJyYXkgb2YgdGhlc2UgdHlwZXMuYCk7XHJcbiAgICB9O1xyXG4gICAgbGV0IGdldHRlcjtcclxuICAgIGxldCBmb3JjZVRyaWdnZXIgPSBmYWxzZTtcclxuICAgIGlmIChpc1JlZihzb3VyY2UpKSB7XHJcbiAgICAgICAgZ2V0dGVyID0gKCkgPT4gc291cmNlLnZhbHVlO1xyXG4gICAgICAgIGZvcmNlVHJpZ2dlciA9ICEhc291cmNlLl9zaGFsbG93O1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoaXNSZWFjdGl2ZShzb3VyY2UpKSB7XHJcbiAgICAgICAgZ2V0dGVyID0gKCkgPT4gc291cmNlO1xyXG4gICAgICAgIGRlZXAgPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoaXNBcnJheShzb3VyY2UpKSB7XHJcbiAgICAgICAgZ2V0dGVyID0gKCkgPT4gc291cmNlLm1hcChzID0+IHtcclxuICAgICAgICAgICAgaWYgKGlzUmVmKHMpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcy52YWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChpc1JlYWN0aXZlKHMpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJhdmVyc2Uocyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoaXNGdW5jdGlvbihzKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxXaXRoRXJyb3JIYW5kbGluZyhzLCBpbnN0YW5jZSwgMiAvKiBXQVRDSF9HRVRURVIgKi8pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIHdhcm5JbnZhbGlkU291cmNlKHMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChpc0Z1bmN0aW9uKHNvdXJjZSkpIHtcclxuICAgICAgICBpZiAoY2IpIHtcclxuICAgICAgICAgICAgLy8gZ2V0dGVyIHdpdGggY2JcclxuICAgICAgICAgICAgZ2V0dGVyID0gKCkgPT4gY2FsbFdpdGhFcnJvckhhbmRsaW5nKHNvdXJjZSwgaW5zdGFuY2UsIDIgLyogV0FUQ0hfR0VUVEVSICovKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIG5vIGNiIC0+IHNpbXBsZSBlZmZlY3RcclxuICAgICAgICAgICAgZ2V0dGVyID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGluc3RhbmNlICYmIGluc3RhbmNlLmlzVW5tb3VudGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGNsZWFudXApIHtcclxuICAgICAgICAgICAgICAgICAgICBjbGVhbnVwKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY2FsbFdpdGhFcnJvckhhbmRsaW5nKHNvdXJjZSwgaW5zdGFuY2UsIDMgLyogV0FUQ0hfQ0FMTEJBQ0sgKi8sIFtvbkludmFsaWRhdGVdKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBnZXR0ZXIgPSBOT09QO1xyXG4gICAgICAgIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiB3YXJuSW52YWxpZFNvdXJjZShzb3VyY2UpO1xyXG4gICAgfVxyXG4gICAgaWYgKGNiICYmIGRlZXApIHtcclxuICAgICAgICBjb25zdCBiYXNlR2V0dGVyID0gZ2V0dGVyO1xyXG4gICAgICAgIGdldHRlciA9ICgpID0+IHRyYXZlcnNlKGJhc2VHZXR0ZXIoKSk7XHJcbiAgICB9XHJcbiAgICBsZXQgY2xlYW51cDtcclxuICAgIGNvbnN0IG9uSW52YWxpZGF0ZSA9IChmbikgPT4ge1xyXG4gICAgICAgIGNsZWFudXAgPSBydW5uZXIub3B0aW9ucy5vblN0b3AgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIGNhbGxXaXRoRXJyb3JIYW5kbGluZyhmbiwgaW5zdGFuY2UsIDQgLyogV0FUQ0hfQ0xFQU5VUCAqLyk7XHJcbiAgICAgICAgfTtcclxuICAgIH07XHJcbiAgICBsZXQgb2xkVmFsdWUgPSBpc0FycmF5KHNvdXJjZSkgPyBbXSA6IElOSVRJQUxfV0FUQ0hFUl9WQUxVRTtcclxuICAgIGNvbnN0IGpvYiA9ICgpID0+IHtcclxuICAgICAgICBpZiAoIXJ1bm5lci5hY3RpdmUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoY2IpIHtcclxuICAgICAgICAgICAgLy8gd2F0Y2goc291cmNlLCBjYilcclxuICAgICAgICAgICAgY29uc3QgbmV3VmFsdWUgPSBydW5uZXIoKTtcclxuICAgICAgICAgICAgaWYgKGRlZXAgfHwgZm9yY2VUcmlnZ2VyIHx8IGhhc0NoYW5nZWQobmV3VmFsdWUsIG9sZFZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgLy8gY2xlYW51cCBiZWZvcmUgcnVubmluZyBjYiBhZ2FpblxyXG4gICAgICAgICAgICAgICAgaWYgKGNsZWFudXApIHtcclxuICAgICAgICAgICAgICAgICAgICBjbGVhbnVwKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYWxsV2l0aEFzeW5jRXJyb3JIYW5kbGluZyhjYiwgaW5zdGFuY2UsIDMgLyogV0FUQ0hfQ0FMTEJBQ0sgKi8sIFtcclxuICAgICAgICAgICAgICAgICAgICBuZXdWYWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICAvLyBwYXNzIHVuZGVmaW5lZCBhcyB0aGUgb2xkIHZhbHVlIHdoZW4gaXQncyBjaGFuZ2VkIGZvciB0aGUgZmlyc3QgdGltZVxyXG4gICAgICAgICAgICAgICAgICAgIG9sZFZhbHVlID09PSBJTklUSUFMX1dBVENIRVJfVkFMVUUgPyB1bmRlZmluZWQgOiBvbGRWYWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICBvbkludmFsaWRhdGVcclxuICAgICAgICAgICAgICAgIF0pO1xyXG4gICAgICAgICAgICAgICAgb2xkVmFsdWUgPSBuZXdWYWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gd2F0Y2hFZmZlY3RcclxuICAgICAgICAgICAgcnVubmVyKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8vIGltcG9ydGFudDogbWFyayB0aGUgam9iIGFzIGEgd2F0Y2hlciBjYWxsYmFjayBzbyB0aGF0IHNjaGVkdWxlciBrbm93c1xyXG4gICAgLy8gaXQgaXMgYWxsb3dlZCB0byBzZWxmLXRyaWdnZXIgKCMxNzI3KVxyXG4gICAgam9iLmFsbG93UmVjdXJzZSA9ICEhY2I7XHJcbiAgICBsZXQgc2NoZWR1bGVyO1xyXG4gICAgaWYgKGZsdXNoID09PSAnc3luYycpIHtcclxuICAgICAgICBzY2hlZHVsZXIgPSBqb2I7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChmbHVzaCA9PT0gJ3Bvc3QnKSB7XHJcbiAgICAgICAgc2NoZWR1bGVyID0gKCkgPT4gcXVldWVQb3N0UmVuZGVyRWZmZWN0KGpvYiwgaW5zdGFuY2UgJiYgaW5zdGFuY2Uuc3VzcGVuc2UpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgLy8gZGVmYXVsdDogJ3ByZSdcclxuICAgICAgICBzY2hlZHVsZXIgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICghaW5zdGFuY2UgfHwgaW5zdGFuY2UuaXNNb3VudGVkKSB7XHJcbiAgICAgICAgICAgICAgICBxdWV1ZVByZUZsdXNoQ2Ioam9iKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIHdpdGggJ3ByZScgb3B0aW9uLCB0aGUgZmlyc3QgY2FsbCBtdXN0IGhhcHBlbiBiZWZvcmVcclxuICAgICAgICAgICAgICAgIC8vIHRoZSBjb21wb25lbnQgaXMgbW91bnRlZCBzbyBpdCBpcyBjYWxsZWQgc3luY2hyb25vdXNseS5cclxuICAgICAgICAgICAgICAgIGpvYigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIGNvbnN0IHJ1bm5lciA9IGVmZmVjdChnZXR0ZXIsIHtcclxuICAgICAgICBsYXp5OiB0cnVlLFxyXG4gICAgICAgIG9uVHJhY2ssXHJcbiAgICAgICAgb25UcmlnZ2VyLFxyXG4gICAgICAgIHNjaGVkdWxlclxyXG4gICAgfSk7XHJcbiAgICByZWNvcmRJbnN0YW5jZUJvdW5kRWZmZWN0KHJ1bm5lciwgaW5zdGFuY2UpO1xyXG4gICAgLy8gaW5pdGlhbCBydW5cclxuICAgIGlmIChjYikge1xyXG4gICAgICAgIGlmIChpbW1lZGlhdGUpIHtcclxuICAgICAgICAgICAgam9iKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBvbGRWYWx1ZSA9IHJ1bm5lcigpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGZsdXNoID09PSAncG9zdCcpIHtcclxuICAgICAgICBxdWV1ZVBvc3RSZW5kZXJFZmZlY3QocnVubmVyLCBpbnN0YW5jZSAmJiBpbnN0YW5jZS5zdXNwZW5zZSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBydW5uZXIoKTtcclxuICAgIH1cclxuICAgIHJldHVybiAoKSA9PiB7XHJcbiAgICAgICAgc3RvcChydW5uZXIpO1xyXG4gICAgICAgIGlmIChpbnN0YW5jZSkge1xyXG4gICAgICAgICAgICByZW1vdmUoaW5zdGFuY2UuZWZmZWN0cywgcnVubmVyKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59XHJcbi8vIHRoaXMuJHdhdGNoXHJcbmZ1bmN0aW9uIGluc3RhbmNlV2F0Y2goc291cmNlLCBjYiwgb3B0aW9ucykge1xyXG4gICAgY29uc3QgcHVibGljVGhpcyA9IHRoaXMucHJveHk7XHJcbiAgICBjb25zdCBnZXR0ZXIgPSBpc1N0cmluZyhzb3VyY2UpXHJcbiAgICAgICAgPyAoKSA9PiBwdWJsaWNUaGlzW3NvdXJjZV1cclxuICAgICAgICA6IHNvdXJjZS5iaW5kKHB1YmxpY1RoaXMpO1xyXG4gICAgcmV0dXJuIGRvV2F0Y2goZ2V0dGVyLCBjYi5iaW5kKHB1YmxpY1RoaXMpLCBvcHRpb25zLCB0aGlzKTtcclxufVxyXG5mdW5jdGlvbiB0cmF2ZXJzZSh2YWx1ZSwgc2VlbiA9IG5ldyBTZXQoKSkge1xyXG4gICAgaWYgKCFpc09iamVjdCh2YWx1ZSkgfHwgc2Vlbi5oYXModmFsdWUpKSB7XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgfVxyXG4gICAgc2Vlbi5hZGQodmFsdWUpO1xyXG4gICAgaWYgKGlzUmVmKHZhbHVlKSkge1xyXG4gICAgICAgIHRyYXZlcnNlKHZhbHVlLnZhbHVlLCBzZWVuKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGlzQXJyYXkodmFsdWUpKSB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWx1ZS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB0cmF2ZXJzZSh2YWx1ZVtpXSwgc2Vlbik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoaXNTZXQodmFsdWUpIHx8IGlzTWFwKHZhbHVlKSkge1xyXG4gICAgICAgIHZhbHVlLmZvckVhY2goKHYpID0+IHtcclxuICAgICAgICAgICAgdHJhdmVyc2Uodiwgc2Vlbik7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiB2YWx1ZSkge1xyXG4gICAgICAgICAgICB0cmF2ZXJzZSh2YWx1ZVtrZXldLCBzZWVuKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdmFsdWU7XHJcbn1cblxuZnVuY3Rpb24gdXNlVHJhbnNpdGlvblN0YXRlKCkge1xyXG4gICAgY29uc3Qgc3RhdGUgPSB7XHJcbiAgICAgICAgaXNNb3VudGVkOiBmYWxzZSxcclxuICAgICAgICBpc0xlYXZpbmc6IGZhbHNlLFxyXG4gICAgICAgIGlzVW5tb3VudGluZzogZmFsc2UsXHJcbiAgICAgICAgbGVhdmluZ1ZOb2RlczogbmV3IE1hcCgpXHJcbiAgICB9O1xyXG4gICAgb25Nb3VudGVkKCgpID0+IHtcclxuICAgICAgICBzdGF0ZS5pc01vdW50ZWQgPSB0cnVlO1xyXG4gICAgfSk7XHJcbiAgICBvbkJlZm9yZVVubW91bnQoKCkgPT4ge1xyXG4gICAgICAgIHN0YXRlLmlzVW5tb3VudGluZyA9IHRydWU7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiBzdGF0ZTtcclxufVxyXG5jb25zdCBUcmFuc2l0aW9uSG9va1ZhbGlkYXRvciA9IFtGdW5jdGlvbiwgQXJyYXldO1xyXG5jb25zdCBCYXNlVHJhbnNpdGlvbkltcGwgPSB7XHJcbiAgICBuYW1lOiBgQmFzZVRyYW5zaXRpb25gLFxyXG4gICAgcHJvcHM6IHtcclxuICAgICAgICBtb2RlOiBTdHJpbmcsXHJcbiAgICAgICAgYXBwZWFyOiBCb29sZWFuLFxyXG4gICAgICAgIHBlcnNpc3RlZDogQm9vbGVhbixcclxuICAgICAgICAvLyBlbnRlclxyXG4gICAgICAgIG9uQmVmb3JlRW50ZXI6IFRyYW5zaXRpb25Ib29rVmFsaWRhdG9yLFxyXG4gICAgICAgIG9uRW50ZXI6IFRyYW5zaXRpb25Ib29rVmFsaWRhdG9yLFxyXG4gICAgICAgIG9uQWZ0ZXJFbnRlcjogVHJhbnNpdGlvbkhvb2tWYWxpZGF0b3IsXHJcbiAgICAgICAgb25FbnRlckNhbmNlbGxlZDogVHJhbnNpdGlvbkhvb2tWYWxpZGF0b3IsXHJcbiAgICAgICAgLy8gbGVhdmVcclxuICAgICAgICBvbkJlZm9yZUxlYXZlOiBUcmFuc2l0aW9uSG9va1ZhbGlkYXRvcixcclxuICAgICAgICBvbkxlYXZlOiBUcmFuc2l0aW9uSG9va1ZhbGlkYXRvcixcclxuICAgICAgICBvbkFmdGVyTGVhdmU6IFRyYW5zaXRpb25Ib29rVmFsaWRhdG9yLFxyXG4gICAgICAgIG9uTGVhdmVDYW5jZWxsZWQ6IFRyYW5zaXRpb25Ib29rVmFsaWRhdG9yLFxyXG4gICAgICAgIC8vIGFwcGVhclxyXG4gICAgICAgIG9uQmVmb3JlQXBwZWFyOiBUcmFuc2l0aW9uSG9va1ZhbGlkYXRvcixcclxuICAgICAgICBvbkFwcGVhcjogVHJhbnNpdGlvbkhvb2tWYWxpZGF0b3IsXHJcbiAgICAgICAgb25BZnRlckFwcGVhcjogVHJhbnNpdGlvbkhvb2tWYWxpZGF0b3IsXHJcbiAgICAgICAgb25BcHBlYXJDYW5jZWxsZWQ6IFRyYW5zaXRpb25Ib29rVmFsaWRhdG9yXHJcbiAgICB9LFxyXG4gICAgc2V0dXAocHJvcHMsIHsgc2xvdHMgfSkge1xyXG4gICAgICAgIGNvbnN0IGluc3RhbmNlID0gZ2V0Q3VycmVudEluc3RhbmNlKCk7XHJcbiAgICAgICAgY29uc3Qgc3RhdGUgPSB1c2VUcmFuc2l0aW9uU3RhdGUoKTtcclxuICAgICAgICBsZXQgcHJldlRyYW5zaXRpb25LZXk7XHJcbiAgICAgICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgY2hpbGRyZW4gPSBzbG90cy5kZWZhdWx0ICYmIGdldFRyYW5zaXRpb25SYXdDaGlsZHJlbihzbG90cy5kZWZhdWx0KCksIHRydWUpO1xyXG4gICAgICAgICAgICBpZiAoIWNoaWxkcmVuIHx8ICFjaGlsZHJlbi5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyB3YXJuIG11bHRpcGxlIGVsZW1lbnRzXHJcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgY2hpbGRyZW4ubGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgICAgICAgd2FybignPHRyYW5zaXRpb24+IGNhbiBvbmx5IGJlIHVzZWQgb24gYSBzaW5nbGUgZWxlbWVudCBvciBjb21wb25lbnQuIFVzZSAnICtcclxuICAgICAgICAgICAgICAgICAgICAnPHRyYW5zaXRpb24tZ3JvdXA+IGZvciBsaXN0cy4nKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyB0aGVyZSdzIG5vIG5lZWQgdG8gdHJhY2sgcmVhY3Rpdml0eSBmb3IgdGhlc2UgcHJvcHMgc28gdXNlIHRoZSByYXdcclxuICAgICAgICAgICAgLy8gcHJvcHMgZm9yIGEgYml0IGJldHRlciBwZXJmXHJcbiAgICAgICAgICAgIGNvbnN0IHJhd1Byb3BzID0gdG9SYXcocHJvcHMpO1xyXG4gICAgICAgICAgICBjb25zdCB7IG1vZGUgfSA9IHJhd1Byb3BzO1xyXG4gICAgICAgICAgICAvLyBjaGVjayBtb2RlXHJcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgbW9kZSAmJiAhWydpbi1vdXQnLCAnb3V0LWluJywgJ2RlZmF1bHQnXS5pbmNsdWRlcyhtb2RlKSkge1xyXG4gICAgICAgICAgICAgICAgd2FybihgaW52YWxpZCA8dHJhbnNpdGlvbj4gbW9kZTogJHttb2RlfWApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIGF0IHRoaXMgcG9pbnQgY2hpbGRyZW4gaGFzIGEgZ3VhcmFudGVlZCBsZW5ndGggb2YgMS5cclxuICAgICAgICAgICAgY29uc3QgY2hpbGQgPSBjaGlsZHJlblswXTtcclxuICAgICAgICAgICAgaWYgKHN0YXRlLmlzTGVhdmluZykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGVtcHR5UGxhY2Vob2xkZXIoY2hpbGQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIGluIHRoZSBjYXNlIG9mIDx0cmFuc2l0aW9uPjxrZWVwLWFsaXZlLz48L3RyYW5zaXRpb24+LCB3ZSBuZWVkIHRvXHJcbiAgICAgICAgICAgIC8vIGNvbXBhcmUgdGhlIHR5cGUgb2YgdGhlIGtlcHQtYWxpdmUgY2hpbGRyZW4uXHJcbiAgICAgICAgICAgIGNvbnN0IGlubmVyQ2hpbGQgPSBnZXRLZWVwQWxpdmVDaGlsZChjaGlsZCk7XHJcbiAgICAgICAgICAgIGlmICghaW5uZXJDaGlsZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGVtcHR5UGxhY2Vob2xkZXIoY2hpbGQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IGVudGVySG9va3MgPSByZXNvbHZlVHJhbnNpdGlvbkhvb2tzKGlubmVyQ2hpbGQsIHJhd1Byb3BzLCBzdGF0ZSwgaW5zdGFuY2UpO1xyXG4gICAgICAgICAgICBzZXRUcmFuc2l0aW9uSG9va3MoaW5uZXJDaGlsZCwgZW50ZXJIb29rcyk7XHJcbiAgICAgICAgICAgIGNvbnN0IG9sZENoaWxkID0gaW5zdGFuY2Uuc3ViVHJlZTtcclxuICAgICAgICAgICAgY29uc3Qgb2xkSW5uZXJDaGlsZCA9IG9sZENoaWxkICYmIGdldEtlZXBBbGl2ZUNoaWxkKG9sZENoaWxkKTtcclxuICAgICAgICAgICAgbGV0IHRyYW5zaXRpb25LZXlDaGFuZ2VkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGNvbnN0IHsgZ2V0VHJhbnNpdGlvbktleSB9ID0gaW5uZXJDaGlsZC50eXBlO1xyXG4gICAgICAgICAgICBpZiAoZ2V0VHJhbnNpdGlvbktleSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qga2V5ID0gZ2V0VHJhbnNpdGlvbktleSgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHByZXZUcmFuc2l0aW9uS2V5ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBwcmV2VHJhbnNpdGlvbktleSA9IGtleTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGtleSAhPT0gcHJldlRyYW5zaXRpb25LZXkpIHtcclxuICAgICAgICAgICAgICAgICAgICBwcmV2VHJhbnNpdGlvbktleSA9IGtleTtcclxuICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uS2V5Q2hhbmdlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gaGFuZGxlIG1vZGVcclxuICAgICAgICAgICAgaWYgKG9sZElubmVyQ2hpbGQgJiZcclxuICAgICAgICAgICAgICAgIG9sZElubmVyQ2hpbGQudHlwZSAhPT0gQ29tbWVudCAmJlxyXG4gICAgICAgICAgICAgICAgKCFpc1NhbWVWTm9kZVR5cGUoaW5uZXJDaGlsZCwgb2xkSW5uZXJDaGlsZCkgfHwgdHJhbnNpdGlvbktleUNoYW5nZWQpKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBsZWF2aW5nSG9va3MgPSByZXNvbHZlVHJhbnNpdGlvbkhvb2tzKG9sZElubmVyQ2hpbGQsIHJhd1Byb3BzLCBzdGF0ZSwgaW5zdGFuY2UpO1xyXG4gICAgICAgICAgICAgICAgLy8gdXBkYXRlIG9sZCB0cmVlJ3MgaG9va3MgaW4gY2FzZSBvZiBkeW5hbWljIHRyYW5zaXRpb25cclxuICAgICAgICAgICAgICAgIHNldFRyYW5zaXRpb25Ib29rcyhvbGRJbm5lckNoaWxkLCBsZWF2aW5nSG9va3MpO1xyXG4gICAgICAgICAgICAgICAgLy8gc3dpdGNoaW5nIGJldHdlZW4gZGlmZmVyZW50IHZpZXdzXHJcbiAgICAgICAgICAgICAgICBpZiAobW9kZSA9PT0gJ291dC1pbicpIHtcclxuICAgICAgICAgICAgICAgICAgICBzdGF0ZS5pc0xlYXZpbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHJldHVybiBwbGFjZWhvbGRlciBub2RlIGFuZCBxdWV1ZSB1cGRhdGUgd2hlbiBsZWF2ZSBmaW5pc2hlc1xyXG4gICAgICAgICAgICAgICAgICAgIGxlYXZpbmdIb29rcy5hZnRlckxlYXZlID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5pc0xlYXZpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2UudXBkYXRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZW1wdHlQbGFjZWhvbGRlcihjaGlsZCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChtb2RlID09PSAnaW4tb3V0Jykge1xyXG4gICAgICAgICAgICAgICAgICAgIGxlYXZpbmdIb29rcy5kZWxheUxlYXZlID0gKGVsLCBlYXJseVJlbW92ZSwgZGVsYXllZExlYXZlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxlYXZpbmdWTm9kZXNDYWNoZSA9IGdldExlYXZpbmdOb2Rlc0ZvclR5cGUoc3RhdGUsIG9sZElubmVyQ2hpbGQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZWF2aW5nVk5vZGVzQ2FjaGVbU3RyaW5nKG9sZElubmVyQ2hpbGQua2V5KV0gPSBvbGRJbm5lckNoaWxkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBlYXJseSByZW1vdmFsIGNhbGxiYWNrXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsLl9sZWF2ZUNiID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWFybHlSZW1vdmUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsLl9sZWF2ZUNiID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGVudGVySG9va3MuZGVsYXllZExlYXZlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbnRlckhvb2tzLmRlbGF5ZWRMZWF2ZSA9IGRlbGF5ZWRMZWF2ZTtcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBjaGlsZDtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59O1xyXG4vLyBleHBvcnQgdGhlIHB1YmxpYyB0eXBlIGZvciBoL3RzeCBpbmZlcmVuY2VcclxuLy8gYWxzbyB0byBhdm9pZCBpbmxpbmUgaW1wb3J0KCkgaW4gZ2VuZXJhdGVkIGQudHMgZmlsZXNcclxuY29uc3QgQmFzZVRyYW5zaXRpb24gPSBCYXNlVHJhbnNpdGlvbkltcGw7XHJcbmZ1bmN0aW9uIGdldExlYXZpbmdOb2Rlc0ZvclR5cGUoc3RhdGUsIHZub2RlKSB7XHJcbiAgICBjb25zdCB7IGxlYXZpbmdWTm9kZXMgfSA9IHN0YXRlO1xyXG4gICAgbGV0IGxlYXZpbmdWTm9kZXNDYWNoZSA9IGxlYXZpbmdWTm9kZXMuZ2V0KHZub2RlLnR5cGUpO1xyXG4gICAgaWYgKCFsZWF2aW5nVk5vZGVzQ2FjaGUpIHtcclxuICAgICAgICBsZWF2aW5nVk5vZGVzQ2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xyXG4gICAgICAgIGxlYXZpbmdWTm9kZXMuc2V0KHZub2RlLnR5cGUsIGxlYXZpbmdWTm9kZXNDYWNoZSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbGVhdmluZ1ZOb2Rlc0NhY2hlO1xyXG59XHJcbi8vIFRoZSB0cmFuc2l0aW9uIGhvb2tzIGFyZSBhdHRhY2hlZCB0byB0aGUgdm5vZGUgYXMgdm5vZGUudHJhbnNpdGlvblxyXG4vLyBhbmQgd2lsbCBiZSBjYWxsZWQgYXQgYXBwcm9wcmlhdGUgdGltaW5nIGluIHRoZSByZW5kZXJlci5cclxuZnVuY3Rpb24gcmVzb2x2ZVRyYW5zaXRpb25Ib29rcyh2bm9kZSwgcHJvcHMsIHN0YXRlLCBpbnN0YW5jZSkge1xyXG4gICAgY29uc3QgeyBhcHBlYXIsIG1vZGUsIHBlcnNpc3RlZCA9IGZhbHNlLCBvbkJlZm9yZUVudGVyLCBvbkVudGVyLCBvbkFmdGVyRW50ZXIsIG9uRW50ZXJDYW5jZWxsZWQsIG9uQmVmb3JlTGVhdmUsIG9uTGVhdmUsIG9uQWZ0ZXJMZWF2ZSwgb25MZWF2ZUNhbmNlbGxlZCwgb25CZWZvcmVBcHBlYXIsIG9uQXBwZWFyLCBvbkFmdGVyQXBwZWFyLCBvbkFwcGVhckNhbmNlbGxlZCB9ID0gcHJvcHM7XHJcbiAgICBjb25zdCBrZXkgPSBTdHJpbmcodm5vZGUua2V5KTtcclxuICAgIGNvbnN0IGxlYXZpbmdWTm9kZXNDYWNoZSA9IGdldExlYXZpbmdOb2Rlc0ZvclR5cGUoc3RhdGUsIHZub2RlKTtcclxuICAgIGNvbnN0IGNhbGxIb29rID0gKGhvb2ssIGFyZ3MpID0+IHtcclxuICAgICAgICBob29rICYmXHJcbiAgICAgICAgICAgIGNhbGxXaXRoQXN5bmNFcnJvckhhbmRsaW5nKGhvb2ssIGluc3RhbmNlLCA5IC8qIFRSQU5TSVRJT05fSE9PSyAqLywgYXJncyk7XHJcbiAgICB9O1xyXG4gICAgY29uc3QgaG9va3MgPSB7XHJcbiAgICAgICAgbW9kZSxcclxuICAgICAgICBwZXJzaXN0ZWQsXHJcbiAgICAgICAgYmVmb3JlRW50ZXIoZWwpIHtcclxuICAgICAgICAgICAgbGV0IGhvb2sgPSBvbkJlZm9yZUVudGVyO1xyXG4gICAgICAgICAgICBpZiAoIXN0YXRlLmlzTW91bnRlZCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGFwcGVhcikge1xyXG4gICAgICAgICAgICAgICAgICAgIGhvb2sgPSBvbkJlZm9yZUFwcGVhciB8fCBvbkJlZm9yZUVudGVyO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIGZvciBzYW1lIGVsZW1lbnQgKHYtc2hvdylcclxuICAgICAgICAgICAgaWYgKGVsLl9sZWF2ZUNiKSB7XHJcbiAgICAgICAgICAgICAgICBlbC5fbGVhdmVDYih0cnVlIC8qIGNhbmNlbGxlZCAqLyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gZm9yIHRvZ2dsZWQgZWxlbWVudCB3aXRoIHNhbWUga2V5ICh2LWlmKVxyXG4gICAgICAgICAgICBjb25zdCBsZWF2aW5nVk5vZGUgPSBsZWF2aW5nVk5vZGVzQ2FjaGVba2V5XTtcclxuICAgICAgICAgICAgaWYgKGxlYXZpbmdWTm9kZSAmJlxyXG4gICAgICAgICAgICAgICAgaXNTYW1lVk5vZGVUeXBlKHZub2RlLCBsZWF2aW5nVk5vZGUpICYmXHJcbiAgICAgICAgICAgICAgICBsZWF2aW5nVk5vZGUuZWwuX2xlYXZlQ2IpIHtcclxuICAgICAgICAgICAgICAgIC8vIGZvcmNlIGVhcmx5IHJlbW92YWwgKG5vdCBjYW5jZWxsZWQpXHJcbiAgICAgICAgICAgICAgICBsZWF2aW5nVk5vZGUuZWwuX2xlYXZlQ2IoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYWxsSG9vayhob29rLCBbZWxdKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudGVyKGVsKSB7XHJcbiAgICAgICAgICAgIGxldCBob29rID0gb25FbnRlcjtcclxuICAgICAgICAgICAgbGV0IGFmdGVySG9vayA9IG9uQWZ0ZXJFbnRlcjtcclxuICAgICAgICAgICAgbGV0IGNhbmNlbEhvb2sgPSBvbkVudGVyQ2FuY2VsbGVkO1xyXG4gICAgICAgICAgICBpZiAoIXN0YXRlLmlzTW91bnRlZCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGFwcGVhcikge1xyXG4gICAgICAgICAgICAgICAgICAgIGhvb2sgPSBvbkFwcGVhciB8fCBvbkVudGVyO1xyXG4gICAgICAgICAgICAgICAgICAgIGFmdGVySG9vayA9IG9uQWZ0ZXJBcHBlYXIgfHwgb25BZnRlckVudGVyO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhbmNlbEhvb2sgPSBvbkFwcGVhckNhbmNlbGxlZCB8fCBvbkVudGVyQ2FuY2VsbGVkO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGxldCBjYWxsZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgY29uc3QgZG9uZSA9IChlbC5fZW50ZXJDYiA9IChjYW5jZWxsZWQpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChjYWxsZWQpXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgY2FsbGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGlmIChjYW5jZWxsZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYWxsSG9vayhjYW5jZWxIb29rLCBbZWxdKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhbGxIb29rKGFmdGVySG9vaywgW2VsXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoaG9va3MuZGVsYXllZExlYXZlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaG9va3MuZGVsYXllZExlYXZlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbC5fZW50ZXJDYiA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGlmIChob29rKSB7XHJcbiAgICAgICAgICAgICAgICBob29rKGVsLCBkb25lKTtcclxuICAgICAgICAgICAgICAgIGlmIChob29rLmxlbmd0aCA8PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZG9uZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZG9uZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBsZWF2ZShlbCwgcmVtb3ZlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGtleSA9IFN0cmluZyh2bm9kZS5rZXkpO1xyXG4gICAgICAgICAgICBpZiAoZWwuX2VudGVyQ2IpIHtcclxuICAgICAgICAgICAgICAgIGVsLl9lbnRlckNiKHRydWUgLyogY2FuY2VsbGVkICovKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoc3RhdGUuaXNVbm1vdW50aW5nKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVtb3ZlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FsbEhvb2sob25CZWZvcmVMZWF2ZSwgW2VsXSk7XHJcbiAgICAgICAgICAgIGxldCBjYWxsZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgY29uc3QgZG9uZSA9IChlbC5fbGVhdmVDYiA9IChjYW5jZWxsZWQpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChjYWxsZWQpXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgY2FsbGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHJlbW92ZSgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNhbmNlbGxlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhbGxIb29rKG9uTGVhdmVDYW5jZWxsZWQsIFtlbF0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FsbEhvb2sob25BZnRlckxlYXZlLCBbZWxdKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsLl9sZWF2ZUNiID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgaWYgKGxlYXZpbmdWTm9kZXNDYWNoZVtrZXldID09PSB2bm9kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBsZWF2aW5nVk5vZGVzQ2FjaGVba2V5XTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGxlYXZpbmdWTm9kZXNDYWNoZVtrZXldID0gdm5vZGU7XHJcbiAgICAgICAgICAgIGlmIChvbkxlYXZlKSB7XHJcbiAgICAgICAgICAgICAgICBvbkxlYXZlKGVsLCBkb25lKTtcclxuICAgICAgICAgICAgICAgIGlmIChvbkxlYXZlLmxlbmd0aCA8PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZG9uZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZG9uZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBjbG9uZSh2bm9kZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzb2x2ZVRyYW5zaXRpb25Ib29rcyh2bm9kZSwgcHJvcHMsIHN0YXRlLCBpbnN0YW5jZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHJldHVybiBob29rcztcclxufVxyXG4vLyB0aGUgcGxhY2Vob2xkZXIgcmVhbGx5IG9ubHkgaGFuZGxlcyBvbmUgc3BlY2lhbCBjYXNlOiBLZWVwQWxpdmVcclxuLy8gaW4gdGhlIGNhc2Ugb2YgYSBLZWVwQWxpdmUgaW4gYSBsZWF2ZSBwaGFzZSB3ZSBuZWVkIHRvIHJldHVybiBhIEtlZXBBbGl2ZVxyXG4vLyBwbGFjZWhvbGRlciB3aXRoIGVtcHR5IGNvbnRlbnQgdG8gYXZvaWQgdGhlIEtlZXBBbGl2ZSBpbnN0YW5jZSBmcm9tIGJlaW5nXHJcbi8vIHVubW91bnRlZC5cclxuZnVuY3Rpb24gZW1wdHlQbGFjZWhvbGRlcih2bm9kZSkge1xyXG4gICAgaWYgKGlzS2VlcEFsaXZlKHZub2RlKSkge1xyXG4gICAgICAgIHZub2RlID0gY2xvbmVWTm9kZSh2bm9kZSk7XHJcbiAgICAgICAgdm5vZGUuY2hpbGRyZW4gPSBudWxsO1xyXG4gICAgICAgIHJldHVybiB2bm9kZTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBnZXRLZWVwQWxpdmVDaGlsZCh2bm9kZSkge1xyXG4gICAgcmV0dXJuIGlzS2VlcEFsaXZlKHZub2RlKVxyXG4gICAgICAgID8gdm5vZGUuY2hpbGRyZW5cclxuICAgICAgICAgICAgPyB2bm9kZS5jaGlsZHJlblswXVxyXG4gICAgICAgICAgICA6IHVuZGVmaW5lZFxyXG4gICAgICAgIDogdm5vZGU7XHJcbn1cclxuZnVuY3Rpb24gc2V0VHJhbnNpdGlvbkhvb2tzKHZub2RlLCBob29rcykge1xyXG4gICAgaWYgKHZub2RlLnNoYXBlRmxhZyAmIDYgLyogQ09NUE9ORU5UICovICYmIHZub2RlLmNvbXBvbmVudCkge1xyXG4gICAgICAgIHNldFRyYW5zaXRpb25Ib29rcyh2bm9kZS5jb21wb25lbnQuc3ViVHJlZSwgaG9va3MpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoIHZub2RlLnNoYXBlRmxhZyAmIDEyOCAvKiBTVVNQRU5TRSAqLykge1xyXG4gICAgICAgIHZub2RlLnNzQ29udGVudC50cmFuc2l0aW9uID0gaG9va3MuY2xvbmUodm5vZGUuc3NDb250ZW50KTtcclxuICAgICAgICB2bm9kZS5zc0ZhbGxiYWNrLnRyYW5zaXRpb24gPSBob29rcy5jbG9uZSh2bm9kZS5zc0ZhbGxiYWNrKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHZub2RlLnRyYW5zaXRpb24gPSBob29rcztcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBnZXRUcmFuc2l0aW9uUmF3Q2hpbGRyZW4oY2hpbGRyZW4sIGtlZXBDb21tZW50ID0gZmFsc2UpIHtcclxuICAgIGxldCByZXQgPSBbXTtcclxuICAgIGxldCBrZXllZEZyYWdtZW50Q291bnQgPSAwO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGNvbnN0IGNoaWxkID0gY2hpbGRyZW5baV07XHJcbiAgICAgICAgLy8gaGFuZGxlIGZyYWdtZW50IGNoaWxkcmVuIGNhc2UsIGUuZy4gdi1mb3JcclxuICAgICAgICBpZiAoY2hpbGQudHlwZSA9PT0gRnJhZ21lbnQpIHtcclxuICAgICAgICAgICAgaWYgKGNoaWxkLnBhdGNoRmxhZyAmIDEyOCAvKiBLRVlFRF9GUkFHTUVOVCAqLylcclxuICAgICAgICAgICAgICAgIGtleWVkRnJhZ21lbnRDb3VudCsrO1xyXG4gICAgICAgICAgICByZXQgPSByZXQuY29uY2F0KGdldFRyYW5zaXRpb25SYXdDaGlsZHJlbihjaGlsZC5jaGlsZHJlbiwga2VlcENvbW1lbnQpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gY29tbWVudCBwbGFjZWhvbGRlcnMgc2hvdWxkIGJlIHNraXBwZWQsIGUuZy4gdi1pZlxyXG4gICAgICAgIGVsc2UgaWYgKGtlZXBDb21tZW50IHx8IGNoaWxkLnR5cGUgIT09IENvbW1lbnQpIHtcclxuICAgICAgICAgICAgcmV0LnB1c2goY2hpbGQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vICMxMTI2IGlmIGEgdHJhbnNpdGlvbiBjaGlsZHJlbiBsaXN0IGNvbnRhaW5zIG11bHRpcGxlIHN1YiBmcmFnbWVudHMsIHRoZXNlXHJcbiAgICAvLyBmcmFnbWVudHMgd2lsbCBiZSBtZXJnZWQgaW50byBhIGZsYXQgY2hpbGRyZW4gYXJyYXkuIFNpbmNlIGVhY2ggdi1mb3JcclxuICAgIC8vIGZyYWdtZW50IG1heSBjb250YWluIGRpZmZlcmVudCBzdGF0aWMgYmluZGluZ3MgaW5zaWRlLCB3ZSBuZWVkIHRvIGRlLW9wXHJcbiAgICAvLyB0aGVzZSBjaGlsZHJlbiB0byBmb3JjZSBmdWxsIGRpZmZzIHRvIGVuc3VyZSBjb3JyZWN0IGJlaGF2aW9yLlxyXG4gICAgaWYgKGtleWVkRnJhZ21lbnRDb3VudCA+IDEpIHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJldC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICByZXRbaV0ucGF0Y2hGbGFnID0gLTIgLyogQkFJTCAqLztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmV0O1xyXG59XG5cbmNvbnN0IGlzS2VlcEFsaXZlID0gKHZub2RlKSA9PiB2bm9kZS50eXBlLl9faXNLZWVwQWxpdmU7XHJcbmNvbnN0IEtlZXBBbGl2ZUltcGwgPSB7XHJcbiAgICBuYW1lOiBgS2VlcEFsaXZlYCxcclxuICAgIC8vIE1hcmtlciBmb3Igc3BlY2lhbCBoYW5kbGluZyBpbnNpZGUgdGhlIHJlbmRlcmVyLiBXZSBhcmUgbm90IHVzaW5nIGEgPT09XHJcbiAgICAvLyBjaGVjayBkaXJlY3RseSBvbiBLZWVwQWxpdmUgaW4gdGhlIHJlbmRlcmVyLCBiZWNhdXNlIGltcG9ydGluZyBpdCBkaXJlY3RseVxyXG4gICAgLy8gd291bGQgcHJldmVudCBpdCBmcm9tIGJlaW5nIHRyZWUtc2hha2VuLlxyXG4gICAgX19pc0tlZXBBbGl2ZTogdHJ1ZSxcclxuICAgIGluaGVyaXRSZWY6IHRydWUsXHJcbiAgICBwcm9wczoge1xyXG4gICAgICAgIGluY2x1ZGU6IFtTdHJpbmcsIFJlZ0V4cCwgQXJyYXldLFxyXG4gICAgICAgIGV4Y2x1ZGU6IFtTdHJpbmcsIFJlZ0V4cCwgQXJyYXldLFxyXG4gICAgICAgIG1heDogW1N0cmluZywgTnVtYmVyXVxyXG4gICAgfSxcclxuICAgIHNldHVwKHByb3BzLCB7IHNsb3RzIH0pIHtcclxuICAgICAgICBjb25zdCBjYWNoZSA9IG5ldyBNYXAoKTtcclxuICAgICAgICBjb25zdCBrZXlzID0gbmV3IFNldCgpO1xyXG4gICAgICAgIGxldCBjdXJyZW50ID0gbnVsbDtcclxuICAgICAgICBjb25zdCBpbnN0YW5jZSA9IGdldEN1cnJlbnRJbnN0YW5jZSgpO1xyXG4gICAgICAgIGNvbnN0IHBhcmVudFN1c3BlbnNlID0gaW5zdGFuY2Uuc3VzcGVuc2U7XHJcbiAgICAgICAgLy8gS2VlcEFsaXZlIGNvbW11bmljYXRlcyB3aXRoIHRoZSBpbnN0YW50aWF0ZWQgcmVuZGVyZXIgdmlhIHRoZVxyXG4gICAgICAgIC8vIGN0eCB3aGVyZSB0aGUgcmVuZGVyZXIgcGFzc2VzIGluIGl0cyBpbnRlcm5hbHMsXHJcbiAgICAgICAgLy8gYW5kIHRoZSBLZWVwQWxpdmUgaW5zdGFuY2UgZXhwb3NlcyBhY3RpdmF0ZS9kZWFjdGl2YXRlIGltcGxlbWVudGF0aW9ucy5cclxuICAgICAgICAvLyBUaGUgd2hvbGUgcG9pbnQgb2YgdGhpcyBpcyB0byBhdm9pZCBpbXBvcnRpbmcgS2VlcEFsaXZlIGRpcmVjdGx5IGluIHRoZVxyXG4gICAgICAgIC8vIHJlbmRlcmVyIHRvIGZhY2lsaXRhdGUgdHJlZS1zaGFraW5nLlxyXG4gICAgICAgIGNvbnN0IHNoYXJlZENvbnRleHQgPSBpbnN0YW5jZS5jdHg7XHJcbiAgICAgICAgY29uc3QgeyByZW5kZXJlcjogeyBwOiBwYXRjaCwgbTogbW92ZSwgdW06IF91bm1vdW50LCBvOiB7IGNyZWF0ZUVsZW1lbnQgfSB9IH0gPSBzaGFyZWRDb250ZXh0O1xyXG4gICAgICAgIGNvbnN0IHN0b3JhZ2VDb250YWluZXIgPSBjcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICBzaGFyZWRDb250ZXh0LmFjdGl2YXRlID0gKHZub2RlLCBjb250YWluZXIsIGFuY2hvciwgaXNTVkcsIG9wdGltaXplZCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBpbnN0YW5jZSA9IHZub2RlLmNvbXBvbmVudDtcclxuICAgICAgICAgICAgbW92ZSh2bm9kZSwgY29udGFpbmVyLCBhbmNob3IsIDAgLyogRU5URVIgKi8sIHBhcmVudFN1c3BlbnNlKTtcclxuICAgICAgICAgICAgLy8gaW4gY2FzZSBwcm9wcyBoYXZlIGNoYW5nZWRcclxuICAgICAgICAgICAgcGF0Y2goaW5zdGFuY2Uudm5vZGUsIHZub2RlLCBjb250YWluZXIsIGFuY2hvciwgaW5zdGFuY2UsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgb3B0aW1pemVkKTtcclxuICAgICAgICAgICAgcXVldWVQb3N0UmVuZGVyRWZmZWN0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgIGluc3RhbmNlLmlzRGVhY3RpdmF0ZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGlmIChpbnN0YW5jZS5hKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaW52b2tlQXJyYXlGbnMoaW5zdGFuY2UuYSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCB2bm9kZUhvb2sgPSB2bm9kZS5wcm9wcyAmJiB2bm9kZS5wcm9wcy5vblZub2RlTW91bnRlZDtcclxuICAgICAgICAgICAgICAgIGlmICh2bm9kZUhvb2spIHtcclxuICAgICAgICAgICAgICAgICAgICBpbnZva2VWTm9kZUhvb2sodm5vZGVIb29rLCBpbnN0YW5jZS5wYXJlbnQsIHZub2RlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSwgcGFyZW50U3VzcGVuc2UpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgc2hhcmVkQ29udGV4dC5kZWFjdGl2YXRlID0gKHZub2RlKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGluc3RhbmNlID0gdm5vZGUuY29tcG9uZW50O1xyXG4gICAgICAgICAgICBtb3ZlKHZub2RlLCBzdG9yYWdlQ29udGFpbmVyLCBudWxsLCAxIC8qIExFQVZFICovLCBwYXJlbnRTdXNwZW5zZSk7XHJcbiAgICAgICAgICAgIHF1ZXVlUG9zdFJlbmRlckVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaW5zdGFuY2UuZGEpIHtcclxuICAgICAgICAgICAgICAgICAgICBpbnZva2VBcnJheUZucyhpbnN0YW5jZS5kYSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCB2bm9kZUhvb2sgPSB2bm9kZS5wcm9wcyAmJiB2bm9kZS5wcm9wcy5vblZub2RlVW5tb3VudGVkO1xyXG4gICAgICAgICAgICAgICAgaWYgKHZub2RlSG9vaykge1xyXG4gICAgICAgICAgICAgICAgICAgIGludm9rZVZOb2RlSG9vayh2bm9kZUhvb2ssIGluc3RhbmNlLnBhcmVudCwgdm5vZGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaW5zdGFuY2UuaXNEZWFjdGl2YXRlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIH0sIHBhcmVudFN1c3BlbnNlKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIGZ1bmN0aW9uIHVubW91bnQodm5vZGUpIHtcclxuICAgICAgICAgICAgLy8gcmVzZXQgdGhlIHNoYXBlRmxhZyBzbyBpdCBjYW4gYmUgcHJvcGVybHkgdW5tb3VudGVkXHJcbiAgICAgICAgICAgIHJlc2V0U2hhcGVGbGFnKHZub2RlKTtcclxuICAgICAgICAgICAgX3VubW91bnQodm5vZGUsIGluc3RhbmNlLCBwYXJlbnRTdXNwZW5zZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZ1bmN0aW9uIHBydW5lQ2FjaGUoZmlsdGVyKSB7XHJcbiAgICAgICAgICAgIGNhY2hlLmZvckVhY2goKHZub2RlLCBrZXkpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG5hbWUgPSBnZXROYW1lKHZub2RlLnR5cGUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKG5hbWUgJiYgKCFmaWx0ZXIgfHwgIWZpbHRlcihuYW1lKSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBwcnVuZUNhY2hlRW50cnkoa2V5KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZ1bmN0aW9uIHBydW5lQ2FjaGVFbnRyeShrZXkpIHtcclxuICAgICAgICAgICAgY29uc3QgY2FjaGVkID0gY2FjaGUuZ2V0KGtleSk7XHJcbiAgICAgICAgICAgIGlmICghY3VycmVudCB8fCBjYWNoZWQudHlwZSAhPT0gY3VycmVudC50eXBlKSB7XHJcbiAgICAgICAgICAgICAgICB1bm1vdW50KGNhY2hlZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoY3VycmVudCkge1xyXG4gICAgICAgICAgICAgICAgLy8gY3VycmVudCBhY3RpdmUgaW5zdGFuY2Ugc2hvdWxkIG5vIGxvbmdlciBiZSBrZXB0LWFsaXZlLlxyXG4gICAgICAgICAgICAgICAgLy8gd2UgY2FuJ3QgdW5tb3VudCBpdCBub3cgYnV0IGl0IG1pZ2h0IGJlIGxhdGVyLCBzbyByZXNldCBpdHMgZmxhZyBub3cuXHJcbiAgICAgICAgICAgICAgICByZXNldFNoYXBlRmxhZyhjdXJyZW50KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYWNoZS5kZWxldGUoa2V5KTtcclxuICAgICAgICAgICAga2V5cy5kZWxldGUoa2V5KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gcHJ1bmUgY2FjaGUgb24gaW5jbHVkZS9leGNsdWRlIHByb3AgY2hhbmdlXHJcbiAgICAgICAgd2F0Y2goKCkgPT4gW3Byb3BzLmluY2x1ZGUsIHByb3BzLmV4Y2x1ZGVdLCAoW2luY2x1ZGUsIGV4Y2x1ZGVdKSA9PiB7XHJcbiAgICAgICAgICAgIGluY2x1ZGUgJiYgcHJ1bmVDYWNoZShuYW1lID0+IG1hdGNoZXMoaW5jbHVkZSwgbmFtZSkpO1xyXG4gICAgICAgICAgICBleGNsdWRlICYmIHBydW5lQ2FjaGUobmFtZSA9PiAhbWF0Y2hlcyhleGNsdWRlLCBuYW1lKSk7XHJcbiAgICAgICAgfSwgXHJcbiAgICAgICAgLy8gcHJ1bmUgcG9zdC1yZW5kZXIgYWZ0ZXIgYGN1cnJlbnRgIGhhcyBiZWVuIHVwZGF0ZWRcclxuICAgICAgICB7IGZsdXNoOiAncG9zdCcsIGRlZXA6IHRydWUgfSk7XHJcbiAgICAgICAgLy8gY2FjaGUgc3ViIHRyZWUgYWZ0ZXIgcmVuZGVyXHJcbiAgICAgICAgbGV0IHBlbmRpbmdDYWNoZUtleSA9IG51bGw7XHJcbiAgICAgICAgY29uc3QgY2FjaGVTdWJ0cmVlID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAvLyBmaXggIzE2MjEsIHRoZSBwZW5kaW5nQ2FjaGVLZXkgY291bGQgYmUgMFxyXG4gICAgICAgICAgICBpZiAocGVuZGluZ0NhY2hlS2V5ICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIGNhY2hlLnNldChwZW5kaW5nQ2FjaGVLZXksIGdldElubmVyQ2hpbGQoaW5zdGFuY2Uuc3ViVHJlZSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBvbk1vdW50ZWQoY2FjaGVTdWJ0cmVlKTtcclxuICAgICAgICBvblVwZGF0ZWQoY2FjaGVTdWJ0cmVlKTtcclxuICAgICAgICBvbkJlZm9yZVVubW91bnQoKCkgPT4ge1xyXG4gICAgICAgICAgICBjYWNoZS5mb3JFYWNoKGNhY2hlZCA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB7IHN1YlRyZWUsIHN1c3BlbnNlIH0gPSBpbnN0YW5jZTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHZub2RlID0gZ2V0SW5uZXJDaGlsZChzdWJUcmVlKTtcclxuICAgICAgICAgICAgICAgIGlmIChjYWNoZWQudHlwZSA9PT0gdm5vZGUudHlwZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGN1cnJlbnQgaW5zdGFuY2Ugd2lsbCBiZSB1bm1vdW50ZWQgYXMgcGFydCBvZiBrZWVwLWFsaXZlJ3MgdW5tb3VudFxyXG4gICAgICAgICAgICAgICAgICAgIHJlc2V0U2hhcGVGbGFnKHZub2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAvLyBidXQgaW52b2tlIGl0cyBkZWFjdGl2YXRlZCBob29rIGhlcmVcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBkYSA9IHZub2RlLmNvbXBvbmVudC5kYTtcclxuICAgICAgICAgICAgICAgICAgICBkYSAmJiBxdWV1ZVBvc3RSZW5kZXJFZmZlY3QoZGEsIHN1c3BlbnNlKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB1bm1vdW50KGNhY2hlZCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiAoKSA9PiB7XHJcbiAgICAgICAgICAgIHBlbmRpbmdDYWNoZUtleSA9IG51bGw7XHJcbiAgICAgICAgICAgIGlmICghc2xvdHMuZGVmYXVsdCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgY2hpbGRyZW4gPSBzbG90cy5kZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHJhd1ZOb2RlID0gY2hpbGRyZW5bMF07XHJcbiAgICAgICAgICAgIGlmIChjaGlsZHJlbi5sZW5ndGggPiAxKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2FybihgS2VlcEFsaXZlIHNob3VsZCBjb250YWluIGV4YWN0bHkgb25lIGNvbXBvbmVudCBjaGlsZC5gKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNoaWxkcmVuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKCFpc1ZOb2RlKHJhd1ZOb2RlKSB8fFxyXG4gICAgICAgICAgICAgICAgKCEocmF3Vk5vZGUuc2hhcGVGbGFnICYgNCAvKiBTVEFURUZVTF9DT01QT05FTlQgKi8pICYmXHJcbiAgICAgICAgICAgICAgICAgICAgIShyYXdWTm9kZS5zaGFwZUZsYWcgJiAxMjggLyogU1VTUEVOU0UgKi8pKSkge1xyXG4gICAgICAgICAgICAgICAgY3VycmVudCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmF3Vk5vZGU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbGV0IHZub2RlID0gZ2V0SW5uZXJDaGlsZChyYXdWTm9kZSk7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbXAgPSB2bm9kZS50eXBlO1xyXG4gICAgICAgICAgICBjb25zdCBuYW1lID0gZ2V0TmFtZShjb21wKTtcclxuICAgICAgICAgICAgY29uc3QgeyBpbmNsdWRlLCBleGNsdWRlLCBtYXggfSA9IHByb3BzO1xyXG4gICAgICAgICAgICBpZiAoKGluY2x1ZGUgJiYgKCFuYW1lIHx8ICFtYXRjaGVzKGluY2x1ZGUsIG5hbWUpKSkgfHxcclxuICAgICAgICAgICAgICAgIChleGNsdWRlICYmIG5hbWUgJiYgbWF0Y2hlcyhleGNsdWRlLCBuYW1lKSkpIHtcclxuICAgICAgICAgICAgICAgIGN1cnJlbnQgPSB2bm9kZTtcclxuICAgICAgICAgICAgICAgIHJldHVybiByYXdWTm9kZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBrZXkgPSB2bm9kZS5rZXkgPT0gbnVsbCA/IGNvbXAgOiB2bm9kZS5rZXk7XHJcbiAgICAgICAgICAgIGNvbnN0IGNhY2hlZFZOb2RlID0gY2FjaGUuZ2V0KGtleSk7XHJcbiAgICAgICAgICAgIC8vIGNsb25lIHZub2RlIGlmIGl0J3MgcmV1c2VkIGJlY2F1c2Ugd2UgYXJlIGdvaW5nIHRvIG11dGF0ZSBpdFxyXG4gICAgICAgICAgICBpZiAodm5vZGUuZWwpIHtcclxuICAgICAgICAgICAgICAgIHZub2RlID0gY2xvbmVWTm9kZSh2bm9kZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAocmF3Vk5vZGUuc2hhcGVGbGFnICYgMTI4IC8qIFNVU1BFTlNFICovKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmF3Vk5vZGUuc3NDb250ZW50ID0gdm5vZGU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gIzE1MTMgaXQncyBwb3NzaWJsZSBmb3IgdGhlIHJldHVybmVkIHZub2RlIHRvIGJlIGNsb25lZCBkdWUgdG8gYXR0clxyXG4gICAgICAgICAgICAvLyBmYWxsdGhyb3VnaCBvciBzY29wZUlkLCBzbyB0aGUgdm5vZGUgaGVyZSBtYXkgbm90IGJlIHRoZSBmaW5hbCB2bm9kZVxyXG4gICAgICAgICAgICAvLyB0aGF0IGlzIG1vdW50ZWQuIEluc3RlYWQgb2YgY2FjaGluZyBpdCBkaXJlY3RseSwgd2Ugc3RvcmUgdGhlIHBlbmRpbmdcclxuICAgICAgICAgICAgLy8ga2V5IGFuZCBjYWNoZSBgaW5zdGFuY2Uuc3ViVHJlZWAgKHRoZSBub3JtYWxpemVkIHZub2RlKSBpblxyXG4gICAgICAgICAgICAvLyBiZWZvcmVNb3VudC9iZWZvcmVVcGRhdGUgaG9va3MuXHJcbiAgICAgICAgICAgIHBlbmRpbmdDYWNoZUtleSA9IGtleTtcclxuICAgICAgICAgICAgaWYgKGNhY2hlZFZOb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBjb3B5IG92ZXIgbW91bnRlZCBzdGF0ZVxyXG4gICAgICAgICAgICAgICAgdm5vZGUuZWwgPSBjYWNoZWRWTm9kZS5lbDtcclxuICAgICAgICAgICAgICAgIHZub2RlLmNvbXBvbmVudCA9IGNhY2hlZFZOb2RlLmNvbXBvbmVudDtcclxuICAgICAgICAgICAgICAgIGlmICh2bm9kZS50cmFuc2l0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gcmVjdXJzaXZlbHkgdXBkYXRlIHRyYW5zaXRpb24gaG9va3Mgb24gc3ViVHJlZVxyXG4gICAgICAgICAgICAgICAgICAgIHNldFRyYW5zaXRpb25Ib29rcyh2bm9kZSwgdm5vZGUudHJhbnNpdGlvbik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBhdm9pZCB2bm9kZSBiZWluZyBtb3VudGVkIGFzIGZyZXNoXHJcbiAgICAgICAgICAgICAgICB2bm9kZS5zaGFwZUZsYWcgfD0gNTEyIC8qIENPTVBPTkVOVF9LRVBUX0FMSVZFICovO1xyXG4gICAgICAgICAgICAgICAgLy8gbWFrZSB0aGlzIGtleSB0aGUgZnJlc2hlc3RcclxuICAgICAgICAgICAgICAgIGtleXMuZGVsZXRlKGtleSk7XHJcbiAgICAgICAgICAgICAgICBrZXlzLmFkZChrZXkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAga2V5cy5hZGQoa2V5KTtcclxuICAgICAgICAgICAgICAgIC8vIHBydW5lIG9sZGVzdCBlbnRyeVxyXG4gICAgICAgICAgICAgICAgaWYgKG1heCAmJiBrZXlzLnNpemUgPiBwYXJzZUludChtYXgsIDEwKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHBydW5lQ2FjaGVFbnRyeShrZXlzLnZhbHVlcygpLm5leHQoKS52YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gYXZvaWQgdm5vZGUgYmVpbmcgdW5tb3VudGVkXHJcbiAgICAgICAgICAgIHZub2RlLnNoYXBlRmxhZyB8PSAyNTYgLyogQ09NUE9ORU5UX1NIT1VMRF9LRUVQX0FMSVZFICovO1xyXG4gICAgICAgICAgICBjdXJyZW50ID0gdm5vZGU7XHJcbiAgICAgICAgICAgIHJldHVybiByYXdWTm9kZTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59O1xyXG4vLyBleHBvcnQgdGhlIHB1YmxpYyB0eXBlIGZvciBoL3RzeCBpbmZlcmVuY2VcclxuLy8gYWxzbyB0byBhdm9pZCBpbmxpbmUgaW1wb3J0KCkgaW4gZ2VuZXJhdGVkIGQudHMgZmlsZXNcclxuY29uc3QgS2VlcEFsaXZlID0gS2VlcEFsaXZlSW1wbDtcclxuZnVuY3Rpb24gZ2V0TmFtZShjb21wKSB7XHJcbiAgICByZXR1cm4gY29tcC5kaXNwbGF5TmFtZSB8fCBjb21wLm5hbWU7XHJcbn1cclxuZnVuY3Rpb24gbWF0Y2hlcyhwYXR0ZXJuLCBuYW1lKSB7XHJcbiAgICBpZiAoaXNBcnJheShwYXR0ZXJuKSkge1xyXG4gICAgICAgIHJldHVybiBwYXR0ZXJuLnNvbWUoKHApID0+IG1hdGNoZXMocCwgbmFtZSkpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoaXNTdHJpbmcocGF0dGVybikpIHtcclxuICAgICAgICByZXR1cm4gcGF0dGVybi5zcGxpdCgnLCcpLmluZGV4T2YobmFtZSkgPiAtMTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKHBhdHRlcm4udGVzdCkge1xyXG4gICAgICAgIHJldHVybiBwYXR0ZXJuLnRlc3QobmFtZSk7XHJcbiAgICB9XHJcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG59XHJcbmZ1bmN0aW9uIG9uQWN0aXZhdGVkKGhvb2ssIHRhcmdldCkge1xyXG4gICAgcmVnaXN0ZXJLZWVwQWxpdmVIb29rKGhvb2ssIFwiYVwiIC8qIEFDVElWQVRFRCAqLywgdGFyZ2V0KTtcclxufVxyXG5mdW5jdGlvbiBvbkRlYWN0aXZhdGVkKGhvb2ssIHRhcmdldCkge1xyXG4gICAgcmVnaXN0ZXJLZWVwQWxpdmVIb29rKGhvb2ssIFwiZGFcIiAvKiBERUFDVElWQVRFRCAqLywgdGFyZ2V0KTtcclxufVxyXG5mdW5jdGlvbiByZWdpc3RlcktlZXBBbGl2ZUhvb2soaG9vaywgdHlwZSwgdGFyZ2V0ID0gY3VycmVudEluc3RhbmNlKSB7XHJcbiAgICAvLyBjYWNoZSB0aGUgZGVhY3RpdmF0ZSBicmFuY2ggY2hlY2sgd3JhcHBlciBmb3IgaW5qZWN0ZWQgaG9va3Mgc28gdGhlIHNhbWVcclxuICAgIC8vIGhvb2sgY2FuIGJlIHByb3Blcmx5IGRlZHVwZWQgYnkgdGhlIHNjaGVkdWxlci4gXCJfX3dkY1wiIHN0YW5kcyBmb3IgXCJ3aXRoXHJcbiAgICAvLyBkZWFjdGl2YXRpb24gY2hlY2tcIi5cclxuICAgIGNvbnN0IHdyYXBwZWRIb29rID0gaG9vay5fX3dkYyB8fFxyXG4gICAgICAgIChob29rLl9fd2RjID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAvLyBvbmx5IGZpcmUgdGhlIGhvb2sgaWYgdGhlIHRhcmdldCBpbnN0YW5jZSBpcyBOT1QgaW4gYSBkZWFjdGl2YXRlZCBicmFuY2guXHJcbiAgICAgICAgICAgIGxldCBjdXJyZW50ID0gdGFyZ2V0O1xyXG4gICAgICAgICAgICB3aGlsZSAoY3VycmVudCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnQuaXNEZWFjdGl2YXRlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBjdXJyZW50LnBhcmVudDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBob29rKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICBpbmplY3RIb29rKHR5cGUsIHdyYXBwZWRIb29rLCB0YXJnZXQpO1xyXG4gICAgLy8gSW4gYWRkaXRpb24gdG8gcmVnaXN0ZXJpbmcgaXQgb24gdGhlIHRhcmdldCBpbnN0YW5jZSwgd2Ugd2FsayB1cCB0aGUgcGFyZW50XHJcbiAgICAvLyBjaGFpbiBhbmQgcmVnaXN0ZXIgaXQgb24gYWxsIGFuY2VzdG9yIGluc3RhbmNlcyB0aGF0IGFyZSBrZWVwLWFsaXZlIHJvb3RzLlxyXG4gICAgLy8gVGhpcyBhdm9pZHMgdGhlIG5lZWQgdG8gd2FsayB0aGUgZW50aXJlIGNvbXBvbmVudCB0cmVlIHdoZW4gaW52b2tpbmcgdGhlc2VcclxuICAgIC8vIGhvb2tzLCBhbmQgbW9yZSBpbXBvcnRhbnRseSwgYXZvaWRzIHRoZSBuZWVkIHRvIHRyYWNrIGNoaWxkIGNvbXBvbmVudHMgaW5cclxuICAgIC8vIGFycmF5cy5cclxuICAgIGlmICh0YXJnZXQpIHtcclxuICAgICAgICBsZXQgY3VycmVudCA9IHRhcmdldC5wYXJlbnQ7XHJcbiAgICAgICAgd2hpbGUgKGN1cnJlbnQgJiYgY3VycmVudC5wYXJlbnQpIHtcclxuICAgICAgICAgICAgaWYgKGlzS2VlcEFsaXZlKGN1cnJlbnQucGFyZW50LnZub2RlKSkge1xyXG4gICAgICAgICAgICAgICAgaW5qZWN0VG9LZWVwQWxpdmVSb290KHdyYXBwZWRIb29rLCB0eXBlLCB0YXJnZXQsIGN1cnJlbnQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGN1cnJlbnQgPSBjdXJyZW50LnBhcmVudDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gaW5qZWN0VG9LZWVwQWxpdmVSb290KGhvb2ssIHR5cGUsIHRhcmdldCwga2VlcEFsaXZlUm9vdCkge1xyXG4gICAgLy8gaW5qZWN0SG9vayB3cmFwcyB0aGUgb3JpZ2luYWwgZm9yIGVycm9yIGhhbmRsaW5nLCBzbyBtYWtlIHN1cmUgdG8gcmVtb3ZlXHJcbiAgICAvLyB0aGUgd3JhcHBlZCB2ZXJzaW9uLlxyXG4gICAgY29uc3QgaW5qZWN0ZWQgPSBpbmplY3RIb29rKHR5cGUsIGhvb2ssIGtlZXBBbGl2ZVJvb3QsIHRydWUgLyogcHJlcGVuZCAqLyk7XHJcbiAgICBvblVubW91bnRlZCgoKSA9PiB7XHJcbiAgICAgICAgcmVtb3ZlKGtlZXBBbGl2ZVJvb3RbdHlwZV0sIGluamVjdGVkKTtcclxuICAgIH0sIHRhcmdldCk7XHJcbn1cclxuZnVuY3Rpb24gcmVzZXRTaGFwZUZsYWcodm5vZGUpIHtcclxuICAgIGxldCBzaGFwZUZsYWcgPSB2bm9kZS5zaGFwZUZsYWc7XHJcbiAgICBpZiAoc2hhcGVGbGFnICYgMjU2IC8qIENPTVBPTkVOVF9TSE9VTERfS0VFUF9BTElWRSAqLykge1xyXG4gICAgICAgIHNoYXBlRmxhZyAtPSAyNTYgLyogQ09NUE9ORU5UX1NIT1VMRF9LRUVQX0FMSVZFICovO1xyXG4gICAgfVxyXG4gICAgaWYgKHNoYXBlRmxhZyAmIDUxMiAvKiBDT01QT05FTlRfS0VQVF9BTElWRSAqLykge1xyXG4gICAgICAgIHNoYXBlRmxhZyAtPSA1MTIgLyogQ09NUE9ORU5UX0tFUFRfQUxJVkUgKi87XHJcbiAgICB9XHJcbiAgICB2bm9kZS5zaGFwZUZsYWcgPSBzaGFwZUZsYWc7XHJcbn1cclxuZnVuY3Rpb24gZ2V0SW5uZXJDaGlsZCh2bm9kZSkge1xyXG4gICAgcmV0dXJuIHZub2RlLnNoYXBlRmxhZyAmIDEyOCAvKiBTVVNQRU5TRSAqLyA/IHZub2RlLnNzQ29udGVudCA6IHZub2RlO1xyXG59XG5cbmNvbnN0IGlzSW50ZXJuYWxLZXkgPSAoa2V5KSA9PiBrZXlbMF0gPT09ICdfJyB8fCBrZXkgPT09ICckc3RhYmxlJztcclxuY29uc3Qgbm9ybWFsaXplU2xvdFZhbHVlID0gKHZhbHVlKSA9PiBpc0FycmF5KHZhbHVlKVxyXG4gICAgPyB2YWx1ZS5tYXAobm9ybWFsaXplVk5vZGUpXHJcbiAgICA6IFtub3JtYWxpemVWTm9kZSh2YWx1ZSldO1xyXG5jb25zdCBub3JtYWxpemVTbG90ID0gKGtleSwgcmF3U2xvdCwgY3R4KSA9PiB3aXRoQ3R4KChwcm9wcykgPT4ge1xyXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBjdXJyZW50SW5zdGFuY2UpIHtcclxuICAgICAgICB3YXJuKGBTbG90IFwiJHtrZXl9XCIgaW52b2tlZCBvdXRzaWRlIG9mIHRoZSByZW5kZXIgZnVuY3Rpb246IGAgK1xyXG4gICAgICAgICAgICBgdGhpcyB3aWxsIG5vdCB0cmFjayBkZXBlbmRlbmNpZXMgdXNlZCBpbiB0aGUgc2xvdC4gYCArXHJcbiAgICAgICAgICAgIGBJbnZva2UgdGhlIHNsb3QgZnVuY3Rpb24gaW5zaWRlIHRoZSByZW5kZXIgZnVuY3Rpb24gaW5zdGVhZC5gKTtcclxuICAgIH1cclxuICAgIHJldHVybiBub3JtYWxpemVTbG90VmFsdWUocmF3U2xvdChwcm9wcykpO1xyXG59LCBjdHgpO1xyXG5jb25zdCBub3JtYWxpemVPYmplY3RTbG90cyA9IChyYXdTbG90cywgc2xvdHMpID0+IHtcclxuICAgIGNvbnN0IGN0eCA9IHJhd1Nsb3RzLl9jdHg7XHJcbiAgICBmb3IgKGNvbnN0IGtleSBpbiByYXdTbG90cykge1xyXG4gICAgICAgIGlmIChpc0ludGVybmFsS2V5KGtleSkpXHJcbiAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIGNvbnN0IHZhbHVlID0gcmF3U2xvdHNba2V5XTtcclxuICAgICAgICBpZiAoaXNGdW5jdGlvbih2YWx1ZSkpIHtcclxuICAgICAgICAgICAgc2xvdHNba2V5XSA9IG5vcm1hbGl6ZVNsb3Qoa2V5LCB2YWx1ZSwgY3R4KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodmFsdWUgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICB3YXJuKGBOb24tZnVuY3Rpb24gdmFsdWUgZW5jb3VudGVyZWQgZm9yIHNsb3QgXCIke2tleX1cIi4gYCArXHJcbiAgICAgICAgICAgICAgICAgICAgYFByZWZlciBmdW5jdGlvbiBzbG90cyBmb3IgYmV0dGVyIHBlcmZvcm1hbmNlLmApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IG5vcm1hbGl6ZWQgPSBub3JtYWxpemVTbG90VmFsdWUodmFsdWUpO1xyXG4gICAgICAgICAgICBzbG90c1trZXldID0gKCkgPT4gbm9ybWFsaXplZDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn07XHJcbmNvbnN0IG5vcm1hbGl6ZVZOb2RlU2xvdHMgPSAoaW5zdGFuY2UsIGNoaWxkcmVuKSA9PiB7XHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFpc0tlZXBBbGl2ZShpbnN0YW5jZS52bm9kZSkpIHtcclxuICAgICAgICB3YXJuKGBOb24tZnVuY3Rpb24gdmFsdWUgZW5jb3VudGVyZWQgZm9yIGRlZmF1bHQgc2xvdC4gYCArXHJcbiAgICAgICAgICAgIGBQcmVmZXIgZnVuY3Rpb24gc2xvdHMgZm9yIGJldHRlciBwZXJmb3JtYW5jZS5gKTtcclxuICAgIH1cclxuICAgIGNvbnN0IG5vcm1hbGl6ZWQgPSBub3JtYWxpemVTbG90VmFsdWUoY2hpbGRyZW4pO1xyXG4gICAgaW5zdGFuY2Uuc2xvdHMuZGVmYXVsdCA9ICgpID0+IG5vcm1hbGl6ZWQ7XHJcbn07XHJcbmNvbnN0IGluaXRTbG90cyA9IChpbnN0YW5jZSwgY2hpbGRyZW4pID0+IHtcclxuICAgIGlmIChpbnN0YW5jZS52bm9kZS5zaGFwZUZsYWcgJiAzMiAvKiBTTE9UU19DSElMRFJFTiAqLykge1xyXG4gICAgICAgIGNvbnN0IHR5cGUgPSBjaGlsZHJlbi5fO1xyXG4gICAgICAgIGlmICh0eXBlKSB7XHJcbiAgICAgICAgICAgIGluc3RhbmNlLnNsb3RzID0gY2hpbGRyZW47XHJcbiAgICAgICAgICAgIC8vIG1ha2UgY29tcGlsZXIgbWFya2VyIG5vbi1lbnVtZXJhYmxlXHJcbiAgICAgICAgICAgIGRlZihjaGlsZHJlbiwgJ18nLCB0eXBlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIG5vcm1hbGl6ZU9iamVjdFNsb3RzKGNoaWxkcmVuLCAoaW5zdGFuY2Uuc2xvdHMgPSB7fSkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGluc3RhbmNlLnNsb3RzID0ge307XHJcbiAgICAgICAgaWYgKGNoaWxkcmVuKSB7XHJcbiAgICAgICAgICAgIG5vcm1hbGl6ZVZOb2RlU2xvdHMoaW5zdGFuY2UsIGNoaWxkcmVuKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBkZWYoaW5zdGFuY2Uuc2xvdHMsIEludGVybmFsT2JqZWN0S2V5LCAxKTtcclxufTtcclxuY29uc3QgdXBkYXRlU2xvdHMgPSAoaW5zdGFuY2UsIGNoaWxkcmVuKSA9PiB7XHJcbiAgICBjb25zdCB7IHZub2RlLCBzbG90cyB9ID0gaW5zdGFuY2U7XHJcbiAgICBsZXQgbmVlZERlbGV0aW9uQ2hlY2sgPSB0cnVlO1xyXG4gICAgbGV0IGRlbGV0aW9uQ29tcGFyaXNvblRhcmdldCA9IEVNUFRZX09CSjtcclxuICAgIGlmICh2bm9kZS5zaGFwZUZsYWcgJiAzMiAvKiBTTE9UU19DSElMRFJFTiAqLykge1xyXG4gICAgICAgIGNvbnN0IHR5cGUgPSBjaGlsZHJlbi5fO1xyXG4gICAgICAgIGlmICh0eXBlKSB7XHJcbiAgICAgICAgICAgIC8vIGNvbXBpbGVkIHNsb3RzLlxyXG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIGlzSG1yVXBkYXRpbmcpIHtcclxuICAgICAgICAgICAgICAgIC8vIFBhcmVudCB3YXMgSE1SIHVwZGF0ZWQgc28gc2xvdCBjb250ZW50IG1heSBoYXZlIGNoYW5nZWQuXHJcbiAgICAgICAgICAgICAgICAvLyBmb3JjZSB1cGRhdGUgc2xvdHMgYW5kIG1hcmsgaW5zdGFuY2UgZm9yIGhtciBhcyB3ZWxsXHJcbiAgICAgICAgICAgICAgICBleHRlbmQoc2xvdHMsIGNoaWxkcmVuKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICh0eXBlID09PSAxIC8qIFNUQUJMRSAqLykge1xyXG4gICAgICAgICAgICAgICAgLy8gY29tcGlsZWQgQU5EIHN0YWJsZS5cclxuICAgICAgICAgICAgICAgIC8vIG5vIG5lZWQgdG8gdXBkYXRlLCBhbmQgc2tpcCBzdGFsZSBzbG90cyByZW1vdmFsLlxyXG4gICAgICAgICAgICAgICAgbmVlZERlbGV0aW9uQ2hlY2sgPSBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIGNvbXBpbGVkIGJ1dCBkeW5hbWljICh2LWlmL3YtZm9yIG9uIHNsb3RzKSAtIHVwZGF0ZSBzbG90cywgYnV0IHNraXBcclxuICAgICAgICAgICAgICAgIC8vIG5vcm1hbGl6YXRpb24uXHJcbiAgICAgICAgICAgICAgICBleHRlbmQoc2xvdHMsIGNoaWxkcmVuKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgbmVlZERlbGV0aW9uQ2hlY2sgPSAhY2hpbGRyZW4uJHN0YWJsZTtcclxuICAgICAgICAgICAgbm9ybWFsaXplT2JqZWN0U2xvdHMoY2hpbGRyZW4sIHNsb3RzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZGVsZXRpb25Db21wYXJpc29uVGFyZ2V0ID0gY2hpbGRyZW47XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChjaGlsZHJlbikge1xyXG4gICAgICAgIC8vIG5vbiBzbG90IG9iamVjdCBjaGlsZHJlbiAoZGlyZWN0IHZhbHVlKSBwYXNzZWQgdG8gYSBjb21wb25lbnRcclxuICAgICAgICBub3JtYWxpemVWTm9kZVNsb3RzKGluc3RhbmNlLCBjaGlsZHJlbik7XHJcbiAgICAgICAgZGVsZXRpb25Db21wYXJpc29uVGFyZ2V0ID0geyBkZWZhdWx0OiAxIH07XHJcbiAgICB9XHJcbiAgICAvLyBkZWxldGUgc3RhbGUgc2xvdHNcclxuICAgIGlmIChuZWVkRGVsZXRpb25DaGVjaykge1xyXG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIHNsb3RzKSB7XHJcbiAgICAgICAgICAgIGlmICghaXNJbnRlcm5hbEtleShrZXkpICYmICEoa2V5IGluIGRlbGV0aW9uQ29tcGFyaXNvblRhcmdldCkpIHtcclxuICAgICAgICAgICAgICAgIGRlbGV0ZSBzbG90c1trZXldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59O1xuXG4vKipcclxuUnVudGltZSBoZWxwZXIgZm9yIGFwcGx5aW5nIGRpcmVjdGl2ZXMgdG8gYSB2bm9kZS4gRXhhbXBsZSB1c2FnZTpcclxuXG5jb25zdCBjb21wID0gcmVzb2x2ZUNvbXBvbmVudCgnY29tcCcpXHJcbmNvbnN0IGZvbyA9IHJlc29sdmVEaXJlY3RpdmUoJ2ZvbycpXHJcbmNvbnN0IGJhciA9IHJlc29sdmVEaXJlY3RpdmUoJ2JhcicpXHJcblxucmV0dXJuIHdpdGhEaXJlY3RpdmVzKGgoY29tcCksIFtcclxuICBbZm9vLCB0aGlzLnhdLFxyXG4gIFtiYXIsIHRoaXMueV1cclxuXSlcclxuKi9cclxuY29uc3QgaXNCdWlsdEluRGlyZWN0aXZlID0gLyojX19QVVJFX18qLyBtYWtlTWFwKCdiaW5kLGNsb2FrLGVsc2UtaWYsZWxzZSxmb3IsaHRtbCxpZixtb2RlbCxvbixvbmNlLHByZSxzaG93LHNsb3QsdGV4dCcpO1xyXG5mdW5jdGlvbiB2YWxpZGF0ZURpcmVjdGl2ZU5hbWUobmFtZSkge1xyXG4gICAgaWYgKGlzQnVpbHRJbkRpcmVjdGl2ZShuYW1lKSkge1xyXG4gICAgICAgIHdhcm4oJ0RvIG5vdCB1c2UgYnVpbHQtaW4gZGlyZWN0aXZlIGlkcyBhcyBjdXN0b20gZGlyZWN0aXZlIGlkOiAnICsgbmFtZSk7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIEFkZHMgZGlyZWN0aXZlcyB0byBhIFZOb2RlLlxyXG4gKi9cclxuZnVuY3Rpb24gd2l0aERpcmVjdGl2ZXModm5vZGUsIGRpcmVjdGl2ZXMpIHtcclxuICAgIGNvbnN0IGludGVybmFsSW5zdGFuY2UgPSBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2U7XHJcbiAgICBpZiAoaW50ZXJuYWxJbnN0YW5jZSA9PT0gbnVsbCkge1xyXG4gICAgICAgIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiB3YXJuKGB3aXRoRGlyZWN0aXZlcyBjYW4gb25seSBiZSB1c2VkIGluc2lkZSByZW5kZXIgZnVuY3Rpb25zLmApO1xyXG4gICAgICAgIHJldHVybiB2bm9kZTtcclxuICAgIH1cclxuICAgIGNvbnN0IGluc3RhbmNlID0gaW50ZXJuYWxJbnN0YW5jZS5wcm94eTtcclxuICAgIGNvbnN0IGJpbmRpbmdzID0gdm5vZGUuZGlycyB8fCAodm5vZGUuZGlycyA9IFtdKTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGlyZWN0aXZlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGxldCBbZGlyLCB2YWx1ZSwgYXJnLCBtb2RpZmllcnMgPSBFTVBUWV9PQkpdID0gZGlyZWN0aXZlc1tpXTtcclxuICAgICAgICBpZiAoaXNGdW5jdGlvbihkaXIpKSB7XHJcbiAgICAgICAgICAgIGRpciA9IHtcclxuICAgICAgICAgICAgICAgIG1vdW50ZWQ6IGRpcixcclxuICAgICAgICAgICAgICAgIHVwZGF0ZWQ6IGRpclxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBiaW5kaW5ncy5wdXNoKHtcclxuICAgICAgICAgICAgZGlyLFxyXG4gICAgICAgICAgICBpbnN0YW5jZSxcclxuICAgICAgICAgICAgdmFsdWUsXHJcbiAgICAgICAgICAgIG9sZFZhbHVlOiB2b2lkIDAsXHJcbiAgICAgICAgICAgIGFyZyxcclxuICAgICAgICAgICAgbW9kaWZpZXJzXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdm5vZGU7XHJcbn1cclxuZnVuY3Rpb24gaW52b2tlRGlyZWN0aXZlSG9vayh2bm9kZSwgcHJldlZOb2RlLCBpbnN0YW5jZSwgbmFtZSkge1xyXG4gICAgY29uc3QgYmluZGluZ3MgPSB2bm9kZS5kaXJzO1xyXG4gICAgY29uc3Qgb2xkQmluZGluZ3MgPSBwcmV2Vk5vZGUgJiYgcHJldlZOb2RlLmRpcnM7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJpbmRpbmdzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgY29uc3QgYmluZGluZyA9IGJpbmRpbmdzW2ldO1xyXG4gICAgICAgIGlmIChvbGRCaW5kaW5ncykge1xyXG4gICAgICAgICAgICBiaW5kaW5nLm9sZFZhbHVlID0gb2xkQmluZGluZ3NbaV0udmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGhvb2sgPSBiaW5kaW5nLmRpcltuYW1lXTtcclxuICAgICAgICBpZiAoaG9vaykge1xyXG4gICAgICAgICAgICBjYWxsV2l0aEFzeW5jRXJyb3JIYW5kbGluZyhob29rLCBpbnN0YW5jZSwgOCAvKiBESVJFQ1RJVkVfSE9PSyAqLywgW1xyXG4gICAgICAgICAgICAgICAgdm5vZGUuZWwsXHJcbiAgICAgICAgICAgICAgICBiaW5kaW5nLFxyXG4gICAgICAgICAgICAgICAgdm5vZGUsXHJcbiAgICAgICAgICAgICAgICBwcmV2Vk5vZGVcclxuICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUFwcENvbnRleHQoKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGFwcDogbnVsbCxcclxuICAgICAgICBjb25maWc6IHtcclxuICAgICAgICAgICAgaXNOYXRpdmVUYWc6IE5PLFxyXG4gICAgICAgICAgICBwZXJmb3JtYW5jZTogZmFsc2UsXHJcbiAgICAgICAgICAgIGdsb2JhbFByb3BlcnRpZXM6IHt9LFxyXG4gICAgICAgICAgICBvcHRpb25NZXJnZVN0cmF0ZWdpZXM6IHt9LFxyXG4gICAgICAgICAgICBpc0N1c3RvbUVsZW1lbnQ6IE5PLFxyXG4gICAgICAgICAgICBlcnJvckhhbmRsZXI6IHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgd2FybkhhbmRsZXI6IHVuZGVmaW5lZFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbWl4aW5zOiBbXSxcclxuICAgICAgICBjb21wb25lbnRzOiB7fSxcclxuICAgICAgICBkaXJlY3RpdmVzOiB7fSxcclxuICAgICAgICBwcm92aWRlczogT2JqZWN0LmNyZWF0ZShudWxsKVxyXG4gICAgfTtcclxufVxyXG5sZXQgdWlkID0gMDtcclxuZnVuY3Rpb24gY3JlYXRlQXBwQVBJKHJlbmRlciwgaHlkcmF0ZSkge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGNyZWF0ZUFwcChyb290Q29tcG9uZW50LCByb290UHJvcHMgPSBudWxsKSB7XHJcbiAgICAgICAgaWYgKHJvb3RQcm9wcyAhPSBudWxsICYmICFpc09iamVjdChyb290UHJvcHMpKSB7XHJcbiAgICAgICAgICAgIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiB3YXJuKGByb290IHByb3BzIHBhc3NlZCB0byBhcHAubW91bnQoKSBtdXN0IGJlIGFuIG9iamVjdC5gKTtcclxuICAgICAgICAgICAgcm9vdFByb3BzID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgY29udGV4dCA9IGNyZWF0ZUFwcENvbnRleHQoKTtcclxuICAgICAgICBjb25zdCBpbnN0YWxsZWRQbHVnaW5zID0gbmV3IFNldCgpO1xyXG4gICAgICAgIGxldCBpc01vdW50ZWQgPSBmYWxzZTtcclxuICAgICAgICBjb25zdCBhcHAgPSAoY29udGV4dC5hcHAgPSB7XHJcbiAgICAgICAgICAgIF91aWQ6IHVpZCsrLFxyXG4gICAgICAgICAgICBfY29tcG9uZW50OiByb290Q29tcG9uZW50LFxyXG4gICAgICAgICAgICBfcHJvcHM6IHJvb3RQcm9wcyxcclxuICAgICAgICAgICAgX2NvbnRhaW5lcjogbnVsbCxcclxuICAgICAgICAgICAgX2NvbnRleHQ6IGNvbnRleHQsXHJcbiAgICAgICAgICAgIHZlcnNpb24sXHJcbiAgICAgICAgICAgIGdldCBjb25maWcoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY29udGV4dC5jb25maWc7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHNldCBjb25maWcodikge1xyXG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHdhcm4oYGFwcC5jb25maWcgY2Fubm90IGJlIHJlcGxhY2VkLiBNb2RpZnkgaW5kaXZpZHVhbCBvcHRpb25zIGluc3RlYWQuYCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHVzZShwbHVnaW4sIC4uLm9wdGlvbnMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChpbnN0YWxsZWRQbHVnaW5zLmhhcyhwbHVnaW4pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIHdhcm4oYFBsdWdpbiBoYXMgYWxyZWFkeSBiZWVuIGFwcGxpZWQgdG8gdGFyZ2V0IGFwcC5gKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHBsdWdpbiAmJiBpc0Z1bmN0aW9uKHBsdWdpbi5pbnN0YWxsKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGluc3RhbGxlZFBsdWdpbnMuYWRkKHBsdWdpbik7XHJcbiAgICAgICAgICAgICAgICAgICAgcGx1Z2luLmluc3RhbGwoYXBwLCAuLi5vcHRpb25zKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGlzRnVuY3Rpb24ocGx1Z2luKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGluc3RhbGxlZFBsdWdpbnMuYWRkKHBsdWdpbik7XHJcbiAgICAgICAgICAgICAgICAgICAgcGx1Z2luKGFwcCwgLi4ub3B0aW9ucyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgICAgICB3YXJuKGBBIHBsdWdpbiBtdXN0IGVpdGhlciBiZSBhIGZ1bmN0aW9uIG9yIGFuIG9iamVjdCB3aXRoIGFuIFwiaW5zdGFsbFwiIGAgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBgZnVuY3Rpb24uYCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYXBwO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBtaXhpbihtaXhpbikge1xyXG4gICAgICAgICAgICAgICAgaWYgKF9fVlVFX09QVElPTlNfQVBJX18pIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWNvbnRleHQubWl4aW5zLmluY2x1ZGVzKG1peGluKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0Lm1peGlucy5wdXNoKG1peGluKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZ2xvYmFsIG1peGluIHdpdGggcHJvcHMvZW1pdHMgZGUtb3B0aW1pemVzIHByb3BzL2VtaXRzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG5vcm1hbGl6YXRpb24gY2FjaGluZy5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1peGluLnByb3BzIHx8IG1peGluLmVtaXRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmRlb3B0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2FybignTWl4aW4gaGFzIGFscmVhZHkgYmVlbiBhcHBsaWVkIHRvIHRhcmdldCBhcHAnICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChtaXhpbi5uYW1lID8gYDogJHttaXhpbi5uYW1lfWAgOiAnJykpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHdhcm4oJ01peGlucyBhcmUgb25seSBhdmFpbGFibGUgaW4gYnVpbGRzIHN1cHBvcnRpbmcgT3B0aW9ucyBBUEknKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBhcHA7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGNvbXBvbmVudChuYW1lLCBjb21wb25lbnQpIHtcclxuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YWxpZGF0ZUNvbXBvbmVudE5hbWUobmFtZSwgY29udGV4dC5jb25maWcpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKCFjb21wb25lbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29udGV4dC5jb21wb25lbnRzW25hbWVdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBjb250ZXh0LmNvbXBvbmVudHNbbmFtZV0pIHtcclxuICAgICAgICAgICAgICAgICAgICB3YXJuKGBDb21wb25lbnQgXCIke25hbWV9XCIgaGFzIGFscmVhZHkgYmVlbiByZWdpc3RlcmVkIGluIHRhcmdldCBhcHAuYCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LmNvbXBvbmVudHNbbmFtZV0gPSBjb21wb25lbnQ7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYXBwO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBkaXJlY3RpdmUobmFtZSwgZGlyZWN0aXZlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGVEaXJlY3RpdmVOYW1lKG5hbWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKCFkaXJlY3RpdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29udGV4dC5kaXJlY3RpdmVzW25hbWVdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBjb250ZXh0LmRpcmVjdGl2ZXNbbmFtZV0pIHtcclxuICAgICAgICAgICAgICAgICAgICB3YXJuKGBEaXJlY3RpdmUgXCIke25hbWV9XCIgaGFzIGFscmVhZHkgYmVlbiByZWdpc3RlcmVkIGluIHRhcmdldCBhcHAuYCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LmRpcmVjdGl2ZXNbbmFtZV0gPSBkaXJlY3RpdmU7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYXBwO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBtb3VudChyb290Q29udGFpbmVyLCBpc0h5ZHJhdGUpIHtcclxuICAgICAgICAgICAgICAgIGlmICghaXNNb3VudGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgdm5vZGUgPSBjcmVhdGVWTm9kZShyb290Q29tcG9uZW50LCByb290UHJvcHMpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHN0b3JlIGFwcCBjb250ZXh0IG9uIHRoZSByb290IFZOb2RlLlxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoaXMgd2lsbCBiZSBzZXQgb24gdGhlIHJvb3QgaW5zdGFuY2Ugb24gaW5pdGlhbCBtb3VudC5cclxuICAgICAgICAgICAgICAgICAgICB2bm9kZS5hcHBDb250ZXh0ID0gY29udGV4dDtcclxuICAgICAgICAgICAgICAgICAgICAvLyBITVIgcm9vdCByZWxvYWRcclxuICAgICAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQucmVsb2FkID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyKGNsb25lVk5vZGUodm5vZGUpLCByb290Q29udGFpbmVyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzSHlkcmF0ZSAmJiBoeWRyYXRlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGh5ZHJhdGUodm5vZGUsIHJvb3RDb250YWluZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyKHZub2RlLCByb290Q29udGFpbmVyKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaXNNb3VudGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBhcHAuX2NvbnRhaW5lciA9IHJvb3RDb250YWluZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgcm9vdENvbnRhaW5lci5fX3Z1ZV9hcHBfXyA9IGFwcDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHx8IF9fVlVFX1BST0RfREVWVE9PTFNfXykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXZ0b29sc0luaXRBcHAoYXBwLCB2ZXJzaW9uKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZub2RlLmNvbXBvbmVudC5wcm94eTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHdhcm4oYEFwcCBoYXMgYWxyZWFkeSBiZWVuIG1vdW50ZWQuXFxuYCArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGBJZiB5b3Ugd2FudCB0byByZW1vdW50IHRoZSBzYW1lIGFwcCwgbW92ZSB5b3VyIGFwcCBjcmVhdGlvbiBsb2dpYyBgICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYGludG8gYSBmYWN0b3J5IGZ1bmN0aW9uIGFuZCBjcmVhdGUgZnJlc2ggYXBwIGluc3RhbmNlcyBmb3IgZWFjaCBgICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYG1vdW50IC0gZS5nLiBcXGBjb25zdCBjcmVhdGVNeUFwcCA9ICgpID0+IGNyZWF0ZUFwcChBcHApXFxgYCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHVubW91bnQoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaXNNb3VudGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVuZGVyKG51bGwsIGFwcC5fY29udGFpbmVyKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHx8IF9fVlVFX1BST0RfREVWVE9PTFNfXykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXZ0b29sc1VubW91bnRBcHAoYXBwKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgICAgICB3YXJuKGBDYW5ub3QgdW5tb3VudCBhbiBhcHAgdGhhdCBpcyBub3QgbW91bnRlZC5gKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgcHJvdmlkZShrZXksIHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIGtleSBpbiBjb250ZXh0LnByb3ZpZGVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2FybihgQXBwIGFscmVhZHkgcHJvdmlkZXMgcHJvcGVydHkgd2l0aCBrZXkgXCIke1N0cmluZyhrZXkpfVwiLiBgICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYEl0IHdpbGwgYmUgb3ZlcndyaXR0ZW4gd2l0aCB0aGUgbmV3IHZhbHVlLmApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gVHlwZVNjcmlwdCBkb2Vzbid0IGFsbG93IHN5bWJvbHMgYXMgaW5kZXggdHlwZVxyXG4gICAgICAgICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL01pY3Jvc29mdC9UeXBlU2NyaXB0L2lzc3Vlcy8yNDU4N1xyXG4gICAgICAgICAgICAgICAgY29udGV4dC5wcm92aWRlc1trZXldID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYXBwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIGFwcDtcclxuICAgIH07XHJcbn1cblxubGV0IGhhc01pc21hdGNoID0gZmFsc2U7XHJcbmNvbnN0IGlzU1ZHQ29udGFpbmVyID0gKGNvbnRhaW5lcikgPT4gL3N2Zy8udGVzdChjb250YWluZXIubmFtZXNwYWNlVVJJKSAmJiBjb250YWluZXIudGFnTmFtZSAhPT0gJ2ZvcmVpZ25PYmplY3QnO1xyXG5jb25zdCBpc0NvbW1lbnQgPSAobm9kZSkgPT4gbm9kZS5ub2RlVHlwZSA9PT0gOCAvKiBDT01NRU5UICovO1xyXG4vLyBOb3RlOiBoeWRyYXRpb24gaXMgRE9NLXNwZWNpZmljXHJcbi8vIEJ1dCB3ZSBoYXZlIHRvIHBsYWNlIGl0IGluIGNvcmUgZHVlIHRvIHRpZ2h0IGNvdXBsaW5nIHdpdGggY29yZSAtIHNwbGl0dGluZ1xyXG4vLyBpdCBvdXQgY3JlYXRlcyBhIHRvbiBvZiB1bm5lY2Vzc2FyeSBjb21wbGV4aXR5LlxyXG4vLyBIeWRyYXRpb24gYWxzbyBkZXBlbmRzIG9uIHNvbWUgcmVuZGVyZXIgaW50ZXJuYWwgbG9naWMgd2hpY2ggbmVlZHMgdG8gYmVcclxuLy8gcGFzc2VkIGluIHZpYSBhcmd1bWVudHMuXHJcbmZ1bmN0aW9uIGNyZWF0ZUh5ZHJhdGlvbkZ1bmN0aW9ucyhyZW5kZXJlckludGVybmFscykge1xyXG4gICAgY29uc3QgeyBtdDogbW91bnRDb21wb25lbnQsIHA6IHBhdGNoLCBvOiB7IHBhdGNoUHJvcCwgbmV4dFNpYmxpbmcsIHBhcmVudE5vZGUsIHJlbW92ZSwgaW5zZXJ0LCBjcmVhdGVDb21tZW50IH0gfSA9IHJlbmRlcmVySW50ZXJuYWxzO1xyXG4gICAgY29uc3QgaHlkcmF0ZSA9ICh2bm9kZSwgY29udGFpbmVyKSA9PiB7XHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhY29udGFpbmVyLmhhc0NoaWxkTm9kZXMoKSkge1xyXG4gICAgICAgICAgICB3YXJuKGBBdHRlbXB0aW5nIHRvIGh5ZHJhdGUgZXhpc3RpbmcgbWFya3VwIGJ1dCBjb250YWluZXIgaXMgZW1wdHkuIGAgK1xyXG4gICAgICAgICAgICAgICAgYFBlcmZvcm1pbmcgZnVsbCBtb3VudCBpbnN0ZWFkLmApO1xyXG4gICAgICAgICAgICBwYXRjaChudWxsLCB2bm9kZSwgY29udGFpbmVyKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBoYXNNaXNtYXRjaCA9IGZhbHNlO1xyXG4gICAgICAgIGh5ZHJhdGVOb2RlKGNvbnRhaW5lci5maXJzdENoaWxkLCB2bm9kZSwgbnVsbCwgbnVsbCk7XHJcbiAgICAgICAgZmx1c2hQb3N0Rmx1c2hDYnMoKTtcclxuICAgICAgICBpZiAoaGFzTWlzbWF0Y2ggJiYgIWZhbHNlKSB7XHJcbiAgICAgICAgICAgIC8vIHRoaXMgZXJyb3Igc2hvdWxkIHNob3cgdXAgaW4gcHJvZHVjdGlvblxyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGBIeWRyYXRpb24gY29tcGxldGVkIGJ1dCBjb250YWlucyBtaXNtYXRjaGVzLmApO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBjb25zdCBoeWRyYXRlTm9kZSA9IChub2RlLCB2bm9kZSwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgb3B0aW1pemVkID0gZmFsc2UpID0+IHtcclxuICAgICAgICBjb25zdCBpc0ZyYWdtZW50U3RhcnQgPSBpc0NvbW1lbnQobm9kZSkgJiYgbm9kZS5kYXRhID09PSAnWyc7XHJcbiAgICAgICAgY29uc3Qgb25NaXNtYXRjaCA9ICgpID0+IGhhbmRsZU1pc21hdGNoKG5vZGUsIHZub2RlLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc0ZyYWdtZW50U3RhcnQpO1xyXG4gICAgICAgIGNvbnN0IHsgdHlwZSwgcmVmLCBzaGFwZUZsYWcgfSA9IHZub2RlO1xyXG4gICAgICAgIGNvbnN0IGRvbVR5cGUgPSBub2RlLm5vZGVUeXBlO1xyXG4gICAgICAgIHZub2RlLmVsID0gbm9kZTtcclxuICAgICAgICBsZXQgbmV4dE5vZGUgPSBudWxsO1xyXG4gICAgICAgIHN3aXRjaCAodHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlIFRleHQ6XHJcbiAgICAgICAgICAgICAgICBpZiAoZG9tVHlwZSAhPT0gMyAvKiBURVhUICovKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV4dE5vZGUgPSBvbk1pc21hdGNoKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobm9kZS5kYXRhICE9PSB2bm9kZS5jaGlsZHJlbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBoYXNNaXNtYXRjaCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2FybihgSHlkcmF0aW9uIHRleHQgbWlzbWF0Y2g6YCArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYFxcbi0gQ2xpZW50OiAke0pTT04uc3RyaW5naWZ5KG5vZGUuZGF0YSl9YCArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYFxcbi0gU2VydmVyOiAke0pTT04uc3RyaW5naWZ5KHZub2RlLmNoaWxkcmVuKX1gKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5kYXRhID0gdm5vZGUuY2hpbGRyZW47XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIG5leHROb2RlID0gbmV4dFNpYmxpbmcobm9kZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBDb21tZW50OlxyXG4gICAgICAgICAgICAgICAgaWYgKGRvbVR5cGUgIT09IDggLyogQ09NTUVOVCAqLyB8fCBpc0ZyYWdtZW50U3RhcnQpIHtcclxuICAgICAgICAgICAgICAgICAgICBuZXh0Tm9kZSA9IG9uTWlzbWF0Y2goKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIG5leHROb2RlID0gbmV4dFNpYmxpbmcobm9kZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBTdGF0aWM6XHJcbiAgICAgICAgICAgICAgICBpZiAoZG9tVHlwZSAhPT0gMSAvKiBFTEVNRU5UICovKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV4dE5vZGUgPSBvbk1pc21hdGNoKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBkZXRlcm1pbmUgYW5jaG9yLCBhZG9wdCBjb250ZW50XHJcbiAgICAgICAgICAgICAgICAgICAgbmV4dE5vZGUgPSBub2RlO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIHRoZSBzdGF0aWMgdm5vZGUgaGFzIGl0cyBjb250ZW50IHN0cmlwcGVkIGR1cmluZyBidWlsZCxcclxuICAgICAgICAgICAgICAgICAgICAvLyBhZG9wdCBpdCBmcm9tIHRoZSBzZXJ2ZXItcmVuZGVyZWQgSFRNTC5cclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBuZWVkVG9BZG9wdENvbnRlbnQgPSAhdm5vZGUuY2hpbGRyZW4ubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdm5vZGUuc3RhdGljQ291bnQ7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobmVlZFRvQWRvcHRDb250ZW50KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdm5vZGUuY2hpbGRyZW4gKz0gbmV4dE5vZGUub3V0ZXJIVE1MO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaSA9PT0gdm5vZGUuc3RhdGljQ291bnQgLSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2bm9kZS5hbmNob3IgPSBuZXh0Tm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXh0Tm9kZSA9IG5leHRTaWJsaW5nKG5leHROb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5leHROb2RlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgRnJhZ21lbnQ6XHJcbiAgICAgICAgICAgICAgICBpZiAoIWlzRnJhZ21lbnRTdGFydCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5leHROb2RlID0gb25NaXNtYXRjaCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV4dE5vZGUgPSBoeWRyYXRlRnJhZ21lbnQobm9kZSwgdm5vZGUsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIG9wdGltaXplZCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIGlmIChzaGFwZUZsYWcgJiAxIC8qIEVMRU1FTlQgKi8pIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZG9tVHlwZSAhPT0gMSAvKiBFTEVNRU5UICovIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZub2RlLnR5cGUgIT09IG5vZGUudGFnTmFtZS50b0xvd2VyQ2FzZSgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHROb2RlID0gb25NaXNtYXRjaCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dE5vZGUgPSBoeWRyYXRlRWxlbWVudChub2RlLCB2bm9kZSwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgb3B0aW1pemVkKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChzaGFwZUZsYWcgJiA2IC8qIENPTVBPTkVOVCAqLykge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHdoZW4gc2V0dGluZyB1cCB0aGUgcmVuZGVyIGVmZmVjdCwgaWYgdGhlIGluaXRpYWwgdm5vZGUgYWxyZWFkeVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGhhcyAuZWwgc2V0LCB0aGUgY29tcG9uZW50IHdpbGwgcGVyZm9ybSBoeWRyYXRpb24gaW5zdGVhZCBvZiBtb3VudFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIG9uIGl0cyBzdWItdHJlZS5cclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb250YWluZXIgPSBwYXJlbnROb2RlKG5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGh5ZHJhdGVDb21wb25lbnQgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vdW50Q29tcG9uZW50KHZub2RlLCBjb250YWluZXIsIG51bGwsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHQ29udGFpbmVyKGNvbnRhaW5lciksIG9wdGltaXplZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAvLyBhc3luYyBjb21wb25lbnRcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBsb2FkQXN5bmMgPSB2bm9kZS50eXBlLl9fYXN5bmNMb2FkZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxvYWRBc3luYykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsb2FkQXN5bmMoKS50aGVuKGh5ZHJhdGVDb21wb25lbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaHlkcmF0ZUNvbXBvbmVudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAvLyBjb21wb25lbnQgbWF5IGJlIGFzeW5jLCBzbyBpbiB0aGUgY2FzZSBvZiBmcmFnbWVudHMgd2UgY2Fubm90IHJlbHlcclxuICAgICAgICAgICAgICAgICAgICAvLyBvbiBjb21wb25lbnQncyByZW5kZXJlZCBvdXRwdXQgdG8gZGV0ZXJtaW5lIHRoZSBlbmQgb2YgdGhlIGZyYWdtZW50XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaW5zdGVhZCwgd2UgZG8gYSBsb29rYWhlYWQgdG8gZmluZCB0aGUgZW5kIGFuY2hvciBub2RlLlxyXG4gICAgICAgICAgICAgICAgICAgIG5leHROb2RlID0gaXNGcmFnbWVudFN0YXJ0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgID8gbG9jYXRlQ2xvc2luZ0FzeW5jQW5jaG9yKG5vZGUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDogbmV4dFNpYmxpbmcobm9kZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChzaGFwZUZsYWcgJiA2NCAvKiBURUxFUE9SVCAqLykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkb21UeXBlICE9PSA4IC8qIENPTU1FTlQgKi8pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dE5vZGUgPSBvbk1pc21hdGNoKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXh0Tm9kZSA9IHZub2RlLnR5cGUuaHlkcmF0ZShub2RlLCB2bm9kZSwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgb3B0aW1pemVkLCByZW5kZXJlckludGVybmFscywgaHlkcmF0ZUNoaWxkcmVuKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmICggc2hhcGVGbGFnICYgMTI4IC8qIFNVU1BFTlNFICovKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV4dE5vZGUgPSB2bm9kZS50eXBlLmh5ZHJhdGUobm9kZSwgdm5vZGUsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHQ29udGFpbmVyKHBhcmVudE5vZGUobm9kZSkpLCBvcHRpbWl6ZWQsIHJlbmRlcmVySW50ZXJuYWxzLCBoeWRyYXRlTm9kZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgICAgICB3YXJuKCdJbnZhbGlkIEhvc3RWTm9kZSB0eXBlOicsIHR5cGUsIGAoJHt0eXBlb2YgdHlwZX0pYCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChyZWYgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICBzZXRSZWYocmVmLCBudWxsLCBwYXJlbnRTdXNwZW5zZSwgdm5vZGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbmV4dE5vZGU7XHJcbiAgICB9O1xyXG4gICAgY29uc3QgaHlkcmF0ZUVsZW1lbnQgPSAoZWwsIHZub2RlLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBvcHRpbWl6ZWQpID0+IHtcclxuICAgICAgICBvcHRpbWl6ZWQgPSBvcHRpbWl6ZWQgfHwgISF2bm9kZS5keW5hbWljQ2hpbGRyZW47XHJcbiAgICAgICAgY29uc3QgeyBwcm9wcywgcGF0Y2hGbGFnLCBzaGFwZUZsYWcsIGRpcnMgfSA9IHZub2RlO1xyXG4gICAgICAgIC8vIHNraXAgcHJvcHMgJiBjaGlsZHJlbiBpZiB0aGlzIGlzIGhvaXN0ZWQgc3RhdGljIG5vZGVzXHJcbiAgICAgICAgaWYgKHBhdGNoRmxhZyAhPT0gLTEgLyogSE9JU1RFRCAqLykge1xyXG4gICAgICAgICAgICBpZiAoZGlycykge1xyXG4gICAgICAgICAgICAgICAgaW52b2tlRGlyZWN0aXZlSG9vayh2bm9kZSwgbnVsbCwgcGFyZW50Q29tcG9uZW50LCAnY3JlYXRlZCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIHByb3BzXHJcbiAgICAgICAgICAgIGlmIChwcm9wcykge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFvcHRpbWl6ZWQgfHxcclxuICAgICAgICAgICAgICAgICAgICAocGF0Y2hGbGFnICYgMTYgLyogRlVMTF9QUk9QUyAqLyB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXRjaEZsYWcgJiAzMiAvKiBIWURSQVRFX0VWRU5UUyAqLykpIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBwcm9wcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlzUmVzZXJ2ZWRQcm9wKGtleSkgJiYgaXNPbihrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXRjaFByb3AoZWwsIGtleSwgbnVsbCwgcHJvcHNba2V5XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChwcm9wcy5vbkNsaWNrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gRmFzdCBwYXRoIGZvciBjbGljayBsaXN0ZW5lcnMgKHdoaWNoIGlzIG1vc3Qgb2Z0ZW4pIHRvIGF2b2lkXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaXRlcmF0aW5nIHRocm91Z2ggcHJvcHMuXHJcbiAgICAgICAgICAgICAgICAgICAgcGF0Y2hQcm9wKGVsLCAnb25DbGljaycsIG51bGwsIHByb3BzLm9uQ2xpY2spO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIHZub2RlIC8gZGlyZWN0aXZlIGhvb2tzXHJcbiAgICAgICAgICAgIGxldCB2bm9kZUhvb2tzO1xyXG4gICAgICAgICAgICBpZiAoKHZub2RlSG9va3MgPSBwcm9wcyAmJiBwcm9wcy5vblZub2RlQmVmb3JlTW91bnQpKSB7XHJcbiAgICAgICAgICAgICAgICBpbnZva2VWTm9kZUhvb2sodm5vZGVIb29rcywgcGFyZW50Q29tcG9uZW50LCB2bm9kZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGRpcnMpIHtcclxuICAgICAgICAgICAgICAgIGludm9rZURpcmVjdGl2ZUhvb2sodm5vZGUsIG51bGwsIHBhcmVudENvbXBvbmVudCwgJ2JlZm9yZU1vdW50Jyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCh2bm9kZUhvb2tzID0gcHJvcHMgJiYgcHJvcHMub25Wbm9kZU1vdW50ZWQpIHx8IGRpcnMpIHtcclxuICAgICAgICAgICAgICAgIHF1ZXVlRWZmZWN0V2l0aFN1c3BlbnNlKCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB2bm9kZUhvb2tzICYmIGludm9rZVZOb2RlSG9vayh2bm9kZUhvb2tzLCBwYXJlbnRDb21wb25lbnQsIHZub2RlKTtcclxuICAgICAgICAgICAgICAgICAgICBkaXJzICYmIGludm9rZURpcmVjdGl2ZUhvb2sodm5vZGUsIG51bGwsIHBhcmVudENvbXBvbmVudCwgJ21vdW50ZWQnKTtcclxuICAgICAgICAgICAgICAgIH0sIHBhcmVudFN1c3BlbnNlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBjaGlsZHJlblxyXG4gICAgICAgICAgICBpZiAoc2hhcGVGbGFnICYgMTYgLyogQVJSQVlfQ0hJTERSRU4gKi8gJiZcclxuICAgICAgICAgICAgICAgIC8vIHNraXAgaWYgZWxlbWVudCBoYXMgaW5uZXJIVE1MIC8gdGV4dENvbnRlbnRcclxuICAgICAgICAgICAgICAgICEocHJvcHMgJiYgKHByb3BzLmlubmVySFRNTCB8fCBwcm9wcy50ZXh0Q29udGVudCkpKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgbmV4dCA9IGh5ZHJhdGVDaGlsZHJlbihlbC5maXJzdENoaWxkLCB2bm9kZSwgZWwsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIG9wdGltaXplZCk7XHJcbiAgICAgICAgICAgICAgICBsZXQgaGFzV2FybmVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB3aGlsZSAobmV4dCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGhhc01pc21hdGNoID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFoYXNXYXJuZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2FybihgSHlkcmF0aW9uIGNoaWxkcmVuIG1pc21hdGNoIGluIDwke3Zub2RlLnR5cGV9PjogYCArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBgc2VydmVyIHJlbmRlcmVkIGVsZW1lbnQgY29udGFpbnMgbW9yZSBjaGlsZCBub2RlcyB0aGFuIGNsaWVudCB2ZG9tLmApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBoYXNXYXJuZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAvLyBUaGUgU1NSZWQgRE9NIGNvbnRhaW5zIG1vcmUgbm9kZXMgdGhhbiBpdCBzaG91bGQuIFJlbW92ZSB0aGVtLlxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGN1ciA9IG5leHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV4dCA9IG5leHQubmV4dFNpYmxpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlKGN1cik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoc2hhcGVGbGFnICYgOCAvKiBURVhUX0NISUxEUkVOICovKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZWwudGV4dENvbnRlbnQgIT09IHZub2RlLmNoaWxkcmVuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaGFzTWlzbWF0Y2ggPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB3YXJuKGBIeWRyYXRpb24gdGV4dCBjb250ZW50IG1pc21hdGNoIGluIDwke3Zub2RlLnR5cGV9PjpcXG5gICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGAtIENsaWVudDogJHtlbC50ZXh0Q29udGVudH1cXG5gICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGAtIFNlcnZlcjogJHt2bm9kZS5jaGlsZHJlbn1gKTtcclxuICAgICAgICAgICAgICAgICAgICBlbC50ZXh0Q29udGVudCA9IHZub2RlLmNoaWxkcmVuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBlbC5uZXh0U2libGluZztcclxuICAgIH07XHJcbiAgICBjb25zdCBoeWRyYXRlQ2hpbGRyZW4gPSAobm9kZSwgcGFyZW50Vk5vZGUsIGNvbnRhaW5lciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgb3B0aW1pemVkKSA9PiB7XHJcbiAgICAgICAgb3B0aW1pemVkID0gb3B0aW1pemVkIHx8ICEhcGFyZW50Vk5vZGUuZHluYW1pY0NoaWxkcmVuO1xyXG4gICAgICAgIGNvbnN0IGNoaWxkcmVuID0gcGFyZW50Vk5vZGUuY2hpbGRyZW47XHJcbiAgICAgICAgY29uc3QgbCA9IGNoaWxkcmVuLmxlbmd0aDtcclxuICAgICAgICBsZXQgaGFzV2FybmVkID0gZmFsc2U7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsOyBpKyspIHtcclxuICAgICAgICAgICAgY29uc3Qgdm5vZGUgPSBvcHRpbWl6ZWRcclxuICAgICAgICAgICAgICAgID8gY2hpbGRyZW5baV1cclxuICAgICAgICAgICAgICAgIDogKGNoaWxkcmVuW2ldID0gbm9ybWFsaXplVk5vZGUoY2hpbGRyZW5baV0pKTtcclxuICAgICAgICAgICAgaWYgKG5vZGUpIHtcclxuICAgICAgICAgICAgICAgIG5vZGUgPSBoeWRyYXRlTm9kZShub2RlLCB2bm9kZSwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgb3B0aW1pemVkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGhhc01pc21hdGNoID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIWhhc1dhcm5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHdhcm4oYEh5ZHJhdGlvbiBjaGlsZHJlbiBtaXNtYXRjaCBpbiA8JHtjb250YWluZXIudGFnTmFtZS50b0xvd2VyQ2FzZSgpfT46IGAgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBgc2VydmVyIHJlbmRlcmVkIGVsZW1lbnQgY29udGFpbnMgZmV3ZXIgY2hpbGQgbm9kZXMgdGhhbiBjbGllbnQgdmRvbS5gKTtcclxuICAgICAgICAgICAgICAgICAgICBoYXNXYXJuZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gdGhlIFNTUmVkIERPTSBkaWRuJ3QgY29udGFpbiBlbm91Z2ggbm9kZXMuIE1vdW50IHRoZSBtaXNzaW5nIG9uZXMuXHJcbiAgICAgICAgICAgICAgICBwYXRjaChudWxsLCB2bm9kZSwgY29udGFpbmVyLCBudWxsLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWR0NvbnRhaW5lcihjb250YWluZXIpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbm9kZTtcclxuICAgIH07XHJcbiAgICBjb25zdCBoeWRyYXRlRnJhZ21lbnQgPSAobm9kZSwgdm5vZGUsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIG9wdGltaXplZCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IHBhcmVudE5vZGUobm9kZSk7XHJcbiAgICAgICAgY29uc3QgbmV4dCA9IGh5ZHJhdGVDaGlsZHJlbihuZXh0U2libGluZyhub2RlKSwgdm5vZGUsIGNvbnRhaW5lciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgb3B0aW1pemVkKTtcclxuICAgICAgICBpZiAobmV4dCAmJiBpc0NvbW1lbnQobmV4dCkgJiYgbmV4dC5kYXRhID09PSAnXScpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5leHRTaWJsaW5nKCh2bm9kZS5hbmNob3IgPSBuZXh0KSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBmcmFnbWVudCBkaWRuJ3QgaHlkcmF0ZSBzdWNjZXNzZnVsbHksIHNpbmNlIHdlIGRpZG4ndCBnZXQgYSBlbmQgYW5jaG9yXHJcbiAgICAgICAgICAgIC8vIGJhY2suIFRoaXMgc2hvdWxkIGhhdmUgbGVkIHRvIG5vZGUvY2hpbGRyZW4gbWlzbWF0Y2ggd2FybmluZ3MuXHJcbiAgICAgICAgICAgIGhhc01pc21hdGNoID0gdHJ1ZTtcclxuICAgICAgICAgICAgLy8gc2luY2UgdGhlIGFuY2hvciBpcyBtaXNzaW5nLCB3ZSBuZWVkIHRvIGNyZWF0ZSBvbmUgYW5kIGluc2VydCBpdFxyXG4gICAgICAgICAgICBpbnNlcnQoKHZub2RlLmFuY2hvciA9IGNyZWF0ZUNvbW1lbnQoYF1gKSksIGNvbnRhaW5lciwgbmV4dCk7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXh0O1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBjb25zdCBoYW5kbGVNaXNtYXRjaCA9IChub2RlLCB2bm9kZSwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNGcmFnbWVudCkgPT4ge1xyXG4gICAgICAgIGhhc01pc21hdGNoID0gdHJ1ZTtcclxuICAgICAgICAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiZcclxuICAgICAgICAgICAgd2FybihgSHlkcmF0aW9uIG5vZGUgbWlzbWF0Y2g6XFxuLSBDbGllbnQgdm5vZGU6YCwgdm5vZGUudHlwZSwgYFxcbi0gU2VydmVyIHJlbmRlcmVkIERPTTpgLCBub2RlLCBub2RlLm5vZGVUeXBlID09PSAzIC8qIFRFWFQgKi9cclxuICAgICAgICAgICAgICAgID8gYCh0ZXh0KWBcclxuICAgICAgICAgICAgICAgIDogaXNDb21tZW50KG5vZGUpICYmIG5vZGUuZGF0YSA9PT0gJ1snXHJcbiAgICAgICAgICAgICAgICAgICAgPyBgKHN0YXJ0IG9mIGZyYWdtZW50KWBcclxuICAgICAgICAgICAgICAgICAgICA6IGBgKTtcclxuICAgICAgICB2bm9kZS5lbCA9IG51bGw7XHJcbiAgICAgICAgaWYgKGlzRnJhZ21lbnQpIHtcclxuICAgICAgICAgICAgLy8gcmVtb3ZlIGV4Y2Vzc2l2ZSBmcmFnbWVudCBub2Rlc1xyXG4gICAgICAgICAgICBjb25zdCBlbmQgPSBsb2NhdGVDbG9zaW5nQXN5bmNBbmNob3Iobm9kZSk7XHJcbiAgICAgICAgICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuZXh0ID0gbmV4dFNpYmxpbmcobm9kZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAobmV4dCAmJiBuZXh0ICE9PSBlbmQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZW1vdmUobmV4dCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBuZXh0ID0gbmV4dFNpYmxpbmcobm9kZSk7XHJcbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gcGFyZW50Tm9kZShub2RlKTtcclxuICAgICAgICByZW1vdmUobm9kZSk7XHJcbiAgICAgICAgcGF0Y2gobnVsbCwgdm5vZGUsIGNvbnRhaW5lciwgbmV4dCwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkdDb250YWluZXIoY29udGFpbmVyKSk7XHJcbiAgICAgICAgcmV0dXJuIG5leHQ7XHJcbiAgICB9O1xyXG4gICAgY29uc3QgbG9jYXRlQ2xvc2luZ0FzeW5jQW5jaG9yID0gKG5vZGUpID0+IHtcclxuICAgICAgICBsZXQgbWF0Y2ggPSAwO1xyXG4gICAgICAgIHdoaWxlIChub2RlKSB7XHJcbiAgICAgICAgICAgIG5vZGUgPSBuZXh0U2libGluZyhub2RlKTtcclxuICAgICAgICAgICAgaWYgKG5vZGUgJiYgaXNDb21tZW50KG5vZGUpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAobm9kZS5kYXRhID09PSAnWycpXHJcbiAgICAgICAgICAgICAgICAgICAgbWF0Y2grKztcclxuICAgICAgICAgICAgICAgIGlmIChub2RlLmRhdGEgPT09ICddJykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV4dFNpYmxpbmcobm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXRjaC0tO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbm9kZTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gW2h5ZHJhdGUsIGh5ZHJhdGVOb2RlXTtcclxufVxuXG5sZXQgc3VwcG9ydGVkO1xyXG5sZXQgcGVyZjtcclxuZnVuY3Rpb24gc3RhcnRNZWFzdXJlKGluc3RhbmNlLCB0eXBlKSB7XHJcbiAgICBpZiAoaW5zdGFuY2UuYXBwQ29udGV4dC5jb25maWcucGVyZm9ybWFuY2UgJiYgaXNTdXBwb3J0ZWQoKSkge1xyXG4gICAgICAgIHBlcmYubWFyayhgdnVlLSR7dHlwZX0tJHtpbnN0YW5jZS51aWR9YCk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gZW5kTWVhc3VyZShpbnN0YW5jZSwgdHlwZSkge1xyXG4gICAgaWYgKGluc3RhbmNlLmFwcENvbnRleHQuY29uZmlnLnBlcmZvcm1hbmNlICYmIGlzU3VwcG9ydGVkKCkpIHtcclxuICAgICAgICBjb25zdCBzdGFydFRhZyA9IGB2dWUtJHt0eXBlfS0ke2luc3RhbmNlLnVpZH1gO1xyXG4gICAgICAgIGNvbnN0IGVuZFRhZyA9IHN0YXJ0VGFnICsgYDplbmRgO1xyXG4gICAgICAgIHBlcmYubWFyayhlbmRUYWcpO1xyXG4gICAgICAgIHBlcmYubWVhc3VyZShgPCR7Zm9ybWF0Q29tcG9uZW50TmFtZShpbnN0YW5jZSwgaW5zdGFuY2UudHlwZSl9PiAke3R5cGV9YCwgc3RhcnRUYWcsIGVuZFRhZyk7XHJcbiAgICAgICAgcGVyZi5jbGVhck1hcmtzKHN0YXJ0VGFnKTtcclxuICAgICAgICBwZXJmLmNsZWFyTWFya3MoZW5kVGFnKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBpc1N1cHBvcnRlZCgpIHtcclxuICAgIGlmIChzdXBwb3J0ZWQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIHJldHVybiBzdXBwb3J0ZWQ7XHJcbiAgICB9XHJcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1yZXN0cmljdGVkLWdsb2JhbHMgKi9cclxuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cucGVyZm9ybWFuY2UpIHtcclxuICAgICAgICBzdXBwb3J0ZWQgPSB0cnVlO1xyXG4gICAgICAgIHBlcmYgPSB3aW5kb3cucGVyZm9ybWFuY2U7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBzdXBwb3J0ZWQgPSBmYWxzZTtcclxuICAgIH1cclxuICAgIC8qIGVzbGludC1lbmFibGUgbm8tcmVzdHJpY3RlZC1nbG9iYWxzICovXHJcbiAgICByZXR1cm4gc3VwcG9ydGVkO1xyXG59XG5cbi8qKlxyXG4gKiBUaGlzIGlzIG9ubHkgY2FsbGVkIGluIGVzbS1idW5kbGVyIGJ1aWxkcy5cclxuICogSXQgaXMgY2FsbGVkIHdoZW4gYSByZW5kZXJlciBpcyBjcmVhdGVkLCBpbiBgYmFzZUNyZWF0ZVJlbmRlcmVyYCBzbyB0aGF0XHJcbiAqIGltcG9ydGluZyBydW50aW1lLWNvcmUgaXMgc2lkZS1lZmZlY3RzIGZyZWUuXHJcbiAqXHJcbiAqIGlzdGFuYnVsLWlnbm9yZS1uZXh0XHJcbiAqL1xyXG5mdW5jdGlvbiBpbml0RmVhdHVyZUZsYWdzKCkge1xyXG4gICAgbGV0IG5lZWRXYXJuID0gZmFsc2U7XHJcbiAgICBpZiAodHlwZW9mIF9fVlVFX09QVElPTlNfQVBJX18gIT09ICdib29sZWFuJykge1xyXG4gICAgICAgIG5lZWRXYXJuID0gdHJ1ZTtcclxuICAgICAgICBnZXRHbG9iYWxUaGlzKCkuX19WVUVfT1BUSU9OU19BUElfXyA9IHRydWU7XHJcbiAgICB9XHJcbiAgICBpZiAodHlwZW9mIF9fVlVFX1BST0RfREVWVE9PTFNfXyAhPT0gJ2Jvb2xlYW4nKSB7XHJcbiAgICAgICAgbmVlZFdhcm4gPSB0cnVlO1xyXG4gICAgICAgIGdldEdsb2JhbFRoaXMoKS5fX1ZVRV9QUk9EX0RFVlRPT0xTX18gPSBmYWxzZTtcclxuICAgIH1cclxuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgbmVlZFdhcm4pIHtcclxuICAgICAgICBjb25zb2xlLndhcm4oYFlvdSBhcmUgcnVubmluZyB0aGUgZXNtLWJ1bmRsZXIgYnVpbGQgb2YgVnVlLiBJdCBpcyByZWNvbW1lbmRlZCB0byBgICtcclxuICAgICAgICAgICAgYGNvbmZpZ3VyZSB5b3VyIGJ1bmRsZXIgdG8gZXhwbGljaXRseSByZXBsYWNlIGZlYXR1cmUgZmxhZyBnbG9iYWxzIGAgK1xyXG4gICAgICAgICAgICBgd2l0aCBib29sZWFuIGxpdGVyYWxzIHRvIGdldCBwcm9wZXIgdHJlZS1zaGFraW5nIGluIHRoZSBmaW5hbCBidW5kbGUuIGAgK1xyXG4gICAgICAgICAgICBgU2VlIGh0dHA6Ly9saW5rLnZ1ZWpzLm9yZy9mZWF0dXJlLWZsYWdzIGZvciBtb3JlIGRldGFpbHMuYCk7XHJcbiAgICB9XHJcbn1cblxuLy8gaW1wbGVtZW50YXRpb24sIGNsb3NlIHRvIG5vLW9wXHJcbmZ1bmN0aW9uIGRlZmluZUNvbXBvbmVudChvcHRpb25zKSB7XHJcbiAgICByZXR1cm4gaXNGdW5jdGlvbihvcHRpb25zKSA/IHsgc2V0dXA6IG9wdGlvbnMsIG5hbWU6IG9wdGlvbnMubmFtZSB9IDogb3B0aW9ucztcclxufVxuXG5jb25zdCBpc0FzeW5jV3JhcHBlciA9IChpKSA9PiAhIWkudHlwZS5fX2FzeW5jTG9hZGVyO1xyXG5mdW5jdGlvbiBkZWZpbmVBc3luY0NvbXBvbmVudChzb3VyY2UpIHtcclxuICAgIGlmIChpc0Z1bmN0aW9uKHNvdXJjZSkpIHtcclxuICAgICAgICBzb3VyY2UgPSB7IGxvYWRlcjogc291cmNlIH07XHJcbiAgICB9XHJcbiAgICBjb25zdCB7IGxvYWRlciwgbG9hZGluZ0NvbXBvbmVudDogbG9hZGluZ0NvbXBvbmVudCwgZXJyb3JDb21wb25lbnQ6IGVycm9yQ29tcG9uZW50LCBkZWxheSA9IDIwMCwgdGltZW91dCwgLy8gdW5kZWZpbmVkID0gbmV2ZXIgdGltZXMgb3V0XHJcbiAgICBzdXNwZW5zaWJsZSA9IHRydWUsIG9uRXJyb3I6IHVzZXJPbkVycm9yIH0gPSBzb3VyY2U7XHJcbiAgICBsZXQgcGVuZGluZ1JlcXVlc3QgPSBudWxsO1xyXG4gICAgbGV0IHJlc29sdmVkQ29tcDtcclxuICAgIGxldCByZXRyaWVzID0gMDtcclxuICAgIGNvbnN0IHJldHJ5ID0gKCkgPT4ge1xyXG4gICAgICAgIHJldHJpZXMrKztcclxuICAgICAgICBwZW5kaW5nUmVxdWVzdCA9IG51bGw7XHJcbiAgICAgICAgcmV0dXJuIGxvYWQoKTtcclxuICAgIH07XHJcbiAgICBjb25zdCBsb2FkID0gKCkgPT4ge1xyXG4gICAgICAgIGxldCB0aGlzUmVxdWVzdDtcclxuICAgICAgICByZXR1cm4gKHBlbmRpbmdSZXF1ZXN0IHx8XHJcbiAgICAgICAgICAgICh0aGlzUmVxdWVzdCA9IHBlbmRpbmdSZXF1ZXN0ID0gbG9hZGVyKClcclxuICAgICAgICAgICAgICAgIC5jYXRjaChlcnIgPT4ge1xyXG4gICAgICAgICAgICAgICAgZXJyID0gZXJyIGluc3RhbmNlb2YgRXJyb3IgPyBlcnIgOiBuZXcgRXJyb3IoU3RyaW5nKGVycikpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHVzZXJPbkVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdXNlclJldHJ5ID0gKCkgPT4gcmVzb2x2ZShyZXRyeSgpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdXNlckZhaWwgPSAoKSA9PiByZWplY3QoZXJyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXNlck9uRXJyb3IoZXJyLCB1c2VyUmV0cnksIHVzZXJGYWlsLCByZXRyaWVzICsgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnI7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAudGhlbigoY29tcCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXNSZXF1ZXN0ICE9PSBwZW5kaW5nUmVxdWVzdCAmJiBwZW5kaW5nUmVxdWVzdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwZW5kaW5nUmVxdWVzdDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIWNvbXApIHtcclxuICAgICAgICAgICAgICAgICAgICB3YXJuKGBBc3luYyBjb21wb25lbnQgbG9hZGVyIHJlc29sdmVkIHRvIHVuZGVmaW5lZC4gYCArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGBJZiB5b3UgYXJlIHVzaW5nIHJldHJ5KCksIG1ha2Ugc3VyZSB0byByZXR1cm4gaXRzIHJldHVybiB2YWx1ZS5gKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIGludGVyb3AgbW9kdWxlIGRlZmF1bHRcclxuICAgICAgICAgICAgICAgIGlmIChjb21wICYmXHJcbiAgICAgICAgICAgICAgICAgICAgKGNvbXAuX19lc01vZHVsZSB8fCBjb21wW1N5bWJvbC50b1N0cmluZ1RhZ10gPT09ICdNb2R1bGUnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbXAgPSBjb21wLmRlZmF1bHQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIGNvbXAgJiYgIWlzT2JqZWN0KGNvbXApICYmICFpc0Z1bmN0aW9uKGNvbXApKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIGFzeW5jIGNvbXBvbmVudCBsb2FkIHJlc3VsdDogJHtjb21wfWApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZWRDb21wID0gY29tcDtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjb21wO1xyXG4gICAgICAgICAgICB9KSkpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBkZWZpbmVDb21wb25lbnQoe1xyXG4gICAgICAgIF9fYXN5bmNMb2FkZXI6IGxvYWQsXHJcbiAgICAgICAgbmFtZTogJ0FzeW5jQ29tcG9uZW50V3JhcHBlcicsXHJcbiAgICAgICAgc2V0dXAoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGluc3RhbmNlID0gY3VycmVudEluc3RhbmNlO1xyXG4gICAgICAgICAgICAvLyBhbHJlYWR5IHJlc29sdmVkXHJcbiAgICAgICAgICAgIGlmIChyZXNvbHZlZENvbXApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAoKSA9PiBjcmVhdGVJbm5lckNvbXAocmVzb2x2ZWRDb21wLCBpbnN0YW5jZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3Qgb25FcnJvciA9IChlcnIpID0+IHtcclxuICAgICAgICAgICAgICAgIHBlbmRpbmdSZXF1ZXN0ID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIGhhbmRsZUVycm9yKGVyciwgaW5zdGFuY2UsIDEzIC8qIEFTWU5DX0NPTVBPTkVOVF9MT0FERVIgKi8sICFlcnJvckNvbXBvbmVudCAvKiBkbyBub3QgdGhyb3cgaW4gZGV2IGlmIHVzZXIgcHJvdmlkZWQgZXJyb3IgY29tcG9uZW50ICovKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgLy8gc3VzcGVuc2UtY29udHJvbGxlZCBvciBTU1IuXHJcbiAgICAgICAgICAgIGlmICgoIHN1c3BlbnNpYmxlICYmIGluc3RhbmNlLnN1c3BlbnNlKSB8fFxyXG4gICAgICAgICAgICAgICAgKGZhbHNlICkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBsb2FkKClcclxuICAgICAgICAgICAgICAgICAgICAudGhlbihjb21wID0+IHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKCkgPT4gY3JlYXRlSW5uZXJDb21wKGNvbXAsIGluc3RhbmNlKTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgLmNhdGNoKGVyciA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgb25FcnJvcihlcnIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoKSA9PiBlcnJvckNvbXBvbmVudFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA/IGNyZWF0ZVZOb2RlKGVycm9yQ29tcG9uZW50LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcjogZXJyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDogbnVsbDtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IGxvYWRlZCA9IHJlZihmYWxzZSk7XHJcbiAgICAgICAgICAgIGNvbnN0IGVycm9yID0gcmVmKCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGRlbGF5ZWQgPSByZWYoISFkZWxheSk7XHJcbiAgICAgICAgICAgIGlmIChkZWxheSkge1xyXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVsYXllZC52YWx1ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfSwgZGVsYXkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aW1lb3V0ICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghbG9hZGVkLnZhbHVlICYmICFlcnJvci52YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlcnIgPSBuZXcgRXJyb3IoYEFzeW5jIGNvbXBvbmVudCB0aW1lZCBvdXQgYWZ0ZXIgJHt0aW1lb3V0fW1zLmApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkVycm9yKGVycik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yLnZhbHVlID0gZXJyO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sIHRpbWVvdXQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGxvYWQoKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgbG9hZGVkLnZhbHVlID0gdHJ1ZTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC5jYXRjaChlcnIgPT4ge1xyXG4gICAgICAgICAgICAgICAgb25FcnJvcihlcnIpO1xyXG4gICAgICAgICAgICAgICAgZXJyb3IudmFsdWUgPSBlcnI7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGxvYWRlZC52YWx1ZSAmJiByZXNvbHZlZENvbXApIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlSW5uZXJDb21wKHJlc29sdmVkQ29tcCwgaW5zdGFuY2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoZXJyb3IudmFsdWUgJiYgZXJyb3JDb21wb25lbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlVk5vZGUoZXJyb3JDb21wb25lbnQsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3I6IGVycm9yLnZhbHVlXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChsb2FkaW5nQ29tcG9uZW50ICYmICFkZWxheWVkLnZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZVZOb2RlKGxvYWRpbmdDb21wb25lbnQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59XHJcbmZ1bmN0aW9uIGNyZWF0ZUlubmVyQ29tcChjb21wLCB7IHZub2RlOiB7IHJlZiwgcHJvcHMsIGNoaWxkcmVuIH0gfSkge1xyXG4gICAgY29uc3Qgdm5vZGUgPSBjcmVhdGVWTm9kZShjb21wLCBwcm9wcywgY2hpbGRyZW4pO1xyXG4gICAgLy8gZW5zdXJlIGlubmVyIGNvbXBvbmVudCBpbmhlcml0cyB0aGUgYXN5bmMgd3JhcHBlcidzIHJlZiBvd25lclxyXG4gICAgdm5vZGUucmVmID0gcmVmO1xyXG4gICAgcmV0dXJuIHZub2RlO1xyXG59XG5cbmNvbnN0IHByb2RFZmZlY3RPcHRpb25zID0ge1xyXG4gICAgc2NoZWR1bGVyOiBxdWV1ZUpvYixcclxuICAgIC8vICMxODAxLCAjMjA0MyBjb21wb25lbnQgcmVuZGVyIGVmZmVjdHMgc2hvdWxkIGFsbG93IHJlY3Vyc2l2ZSB1cGRhdGVzXHJcbiAgICBhbGxvd1JlY3Vyc2U6IHRydWVcclxufTtcclxuZnVuY3Rpb24gY3JlYXRlRGV2RWZmZWN0T3B0aW9ucyhpbnN0YW5jZSkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBzY2hlZHVsZXI6IHF1ZXVlSm9iLFxyXG4gICAgICAgIGFsbG93UmVjdXJzZTogdHJ1ZSxcclxuICAgICAgICBvblRyYWNrOiBpbnN0YW5jZS5ydGMgPyBlID0+IGludm9rZUFycmF5Rm5zKGluc3RhbmNlLnJ0YywgZSkgOiB2b2lkIDAsXHJcbiAgICAgICAgb25UcmlnZ2VyOiBpbnN0YW5jZS5ydGcgPyBlID0+IGludm9rZUFycmF5Rm5zKGluc3RhbmNlLnJ0ZywgZSkgOiB2b2lkIDBcclxuICAgIH07XHJcbn1cclxuY29uc3QgcXVldWVQb3N0UmVuZGVyRWZmZWN0ID0gIHF1ZXVlRWZmZWN0V2l0aFN1c3BlbnNlXHJcbiAgICA7XHJcbmNvbnN0IHNldFJlZiA9IChyYXdSZWYsIG9sZFJhd1JlZiwgcGFyZW50U3VzcGVuc2UsIHZub2RlKSA9PiB7XHJcbiAgICBpZiAoaXNBcnJheShyYXdSZWYpKSB7XHJcbiAgICAgICAgcmF3UmVmLmZvckVhY2goKHIsIGkpID0+IHNldFJlZihyLCBvbGRSYXdSZWYgJiYgKGlzQXJyYXkob2xkUmF3UmVmKSA/IG9sZFJhd1JlZltpXSA6IG9sZFJhd1JlZiksIHBhcmVudFN1c3BlbnNlLCB2bm9kZSkpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGxldCB2YWx1ZTtcclxuICAgIGlmICghdm5vZGUgfHwgaXNBc3luY1dyYXBwZXIodm5vZGUpKSB7XHJcbiAgICAgICAgdmFsdWUgPSBudWxsO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgaWYgKHZub2RlLnNoYXBlRmxhZyAmIDQgLyogU1RBVEVGVUxfQ09NUE9ORU5UICovKSB7XHJcbiAgICAgICAgICAgIHZhbHVlID0gdm5vZGUuY29tcG9uZW50LmV4cG9zZWQgfHwgdm5vZGUuY29tcG9uZW50LnByb3h5O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdmFsdWUgPSB2bm9kZS5lbDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjb25zdCB7IGk6IG93bmVyLCByOiByZWYgfSA9IHJhd1JlZjtcclxuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIW93bmVyKSB7XHJcbiAgICAgICAgd2FybihgTWlzc2luZyByZWYgb3duZXIgY29udGV4dC4gcmVmIGNhbm5vdCBiZSB1c2VkIG9uIGhvaXN0ZWQgdm5vZGVzLiBgICtcclxuICAgICAgICAgICAgYEEgdm5vZGUgd2l0aCByZWYgbXVzdCBiZSBjcmVhdGVkIGluc2lkZSB0aGUgcmVuZGVyIGZ1bmN0aW9uLmApO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGNvbnN0IG9sZFJlZiA9IG9sZFJhd1JlZiAmJiBvbGRSYXdSZWYucjtcclxuICAgIGNvbnN0IHJlZnMgPSBvd25lci5yZWZzID09PSBFTVBUWV9PQkogPyAob3duZXIucmVmcyA9IHt9KSA6IG93bmVyLnJlZnM7XHJcbiAgICBjb25zdCBzZXR1cFN0YXRlID0gb3duZXIuc2V0dXBTdGF0ZTtcclxuICAgIC8vIHVuc2V0IG9sZCByZWZcclxuICAgIGlmIChvbGRSZWYgIT0gbnVsbCAmJiBvbGRSZWYgIT09IHJlZikge1xyXG4gICAgICAgIGlmIChpc1N0cmluZyhvbGRSZWYpKSB7XHJcbiAgICAgICAgICAgIHJlZnNbb2xkUmVmXSA9IG51bGw7XHJcbiAgICAgICAgICAgIGlmIChoYXNPd24oc2V0dXBTdGF0ZSwgb2xkUmVmKSkge1xyXG4gICAgICAgICAgICAgICAgc2V0dXBTdGF0ZVtvbGRSZWZdID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChpc1JlZihvbGRSZWYpKSB7XHJcbiAgICAgICAgICAgIG9sZFJlZi52YWx1ZSA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKGlzU3RyaW5nKHJlZikpIHtcclxuICAgICAgICBjb25zdCBkb1NldCA9ICgpID0+IHtcclxuICAgICAgICAgICAgcmVmc1tyZWZdID0gdmFsdWU7XHJcbiAgICAgICAgICAgIGlmIChoYXNPd24oc2V0dXBTdGF0ZSwgcmVmKSkge1xyXG4gICAgICAgICAgICAgICAgc2V0dXBTdGF0ZVtyZWZdID0gdmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIC8vICMxNzg5OiBmb3Igbm9uLW51bGwgdmFsdWVzLCBzZXQgdGhlbSBhZnRlciByZW5kZXJcclxuICAgICAgICAvLyBudWxsIHZhbHVlcyBtZWFucyB0aGlzIGlzIHVubW91bnQgYW5kIGl0IHNob3VsZCBub3Qgb3ZlcndyaXRlIGFub3RoZXJcclxuICAgICAgICAvLyByZWYgd2l0aCB0aGUgc2FtZSBrZXlcclxuICAgICAgICBpZiAodmFsdWUpIHtcclxuICAgICAgICAgICAgZG9TZXQuaWQgPSAtMTtcclxuICAgICAgICAgICAgcXVldWVQb3N0UmVuZGVyRWZmZWN0KGRvU2V0LCBwYXJlbnRTdXNwZW5zZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBkb1NldCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGlzUmVmKHJlZikpIHtcclxuICAgICAgICBjb25zdCBkb1NldCA9ICgpID0+IHtcclxuICAgICAgICAgICAgcmVmLnZhbHVlID0gdmFsdWU7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBpZiAodmFsdWUpIHtcclxuICAgICAgICAgICAgZG9TZXQuaWQgPSAtMTtcclxuICAgICAgICAgICAgcXVldWVQb3N0UmVuZGVyRWZmZWN0KGRvU2V0LCBwYXJlbnRTdXNwZW5zZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBkb1NldCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGlzRnVuY3Rpb24ocmVmKSkge1xyXG4gICAgICAgIGNhbGxXaXRoRXJyb3JIYW5kbGluZyhyZWYsIG93bmVyLCAxMiAvKiBGVU5DVElPTl9SRUYgKi8sIFt2YWx1ZSwgcmVmc10pO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgd2FybignSW52YWxpZCB0ZW1wbGF0ZSByZWYgdHlwZTonLCB2YWx1ZSwgYCgke3R5cGVvZiB2YWx1ZX0pYCk7XHJcbiAgICB9XHJcbn07XHJcbi8qKlxyXG4gKiBUaGUgY3JlYXRlUmVuZGVyZXIgZnVuY3Rpb24gYWNjZXB0cyB0d28gZ2VuZXJpYyBhcmd1bWVudHM6XHJcbiAqIEhvc3ROb2RlIGFuZCBIb3N0RWxlbWVudCwgY29ycmVzcG9uZGluZyB0byBOb2RlIGFuZCBFbGVtZW50IHR5cGVzIGluIHRoZVxyXG4gKiBob3N0IGVudmlyb25tZW50LiBGb3IgZXhhbXBsZSwgZm9yIHJ1bnRpbWUtZG9tLCBIb3N0Tm9kZSB3b3VsZCBiZSB0aGUgRE9NXHJcbiAqIGBOb2RlYCBpbnRlcmZhY2UgYW5kIEhvc3RFbGVtZW50IHdvdWxkIGJlIHRoZSBET00gYEVsZW1lbnRgIGludGVyZmFjZS5cclxuICpcclxuICogQ3VzdG9tIHJlbmRlcmVycyBjYW4gcGFzcyBpbiB0aGUgcGxhdGZvcm0gc3BlY2lmaWMgdHlwZXMgbGlrZSB0aGlzOlxyXG4gKlxyXG4gKiBgYGAganNcclxuICogY29uc3QgeyByZW5kZXIsIGNyZWF0ZUFwcCB9ID0gY3JlYXRlUmVuZGVyZXI8Tm9kZSwgRWxlbWVudD4oe1xyXG4gKiAgIHBhdGNoUHJvcCxcclxuICogICAuLi5ub2RlT3BzXHJcbiAqIH0pXHJcbiAqIGBgYFxyXG4gKi9cclxuZnVuY3Rpb24gY3JlYXRlUmVuZGVyZXIob3B0aW9ucykge1xyXG4gICAgcmV0dXJuIGJhc2VDcmVhdGVSZW5kZXJlcihvcHRpb25zKTtcclxufVxyXG4vLyBTZXBhcmF0ZSBBUEkgZm9yIGNyZWF0aW5nIGh5ZHJhdGlvbi1lbmFibGVkIHJlbmRlcmVyLlxyXG4vLyBIeWRyYXRpb24gbG9naWMgaXMgb25seSB1c2VkIHdoZW4gY2FsbGluZyB0aGlzIGZ1bmN0aW9uLCBtYWtpbmcgaXRcclxuLy8gdHJlZS1zaGFrYWJsZS5cclxuZnVuY3Rpb24gY3JlYXRlSHlkcmF0aW9uUmVuZGVyZXIob3B0aW9ucykge1xyXG4gICAgcmV0dXJuIGJhc2VDcmVhdGVSZW5kZXJlcihvcHRpb25zLCBjcmVhdGVIeWRyYXRpb25GdW5jdGlvbnMpO1xyXG59XHJcbi8vIGltcGxlbWVudGF0aW9uXHJcbmZ1bmN0aW9uIGJhc2VDcmVhdGVSZW5kZXJlcihvcHRpb25zLCBjcmVhdGVIeWRyYXRpb25GbnMpIHtcclxuICAgIC8vIGNvbXBpbGUtdGltZSBmZWF0dXJlIGZsYWdzIGNoZWNrXHJcbiAgICB7XHJcbiAgICAgICAgaW5pdEZlYXR1cmVGbGFncygpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgeyBpbnNlcnQ6IGhvc3RJbnNlcnQsIHJlbW92ZTogaG9zdFJlbW92ZSwgcGF0Y2hQcm9wOiBob3N0UGF0Y2hQcm9wLCBmb3JjZVBhdGNoUHJvcDogaG9zdEZvcmNlUGF0Y2hQcm9wLCBjcmVhdGVFbGVtZW50OiBob3N0Q3JlYXRlRWxlbWVudCwgY3JlYXRlVGV4dDogaG9zdENyZWF0ZVRleHQsIGNyZWF0ZUNvbW1lbnQ6IGhvc3RDcmVhdGVDb21tZW50LCBzZXRUZXh0OiBob3N0U2V0VGV4dCwgc2V0RWxlbWVudFRleHQ6IGhvc3RTZXRFbGVtZW50VGV4dCwgcGFyZW50Tm9kZTogaG9zdFBhcmVudE5vZGUsIG5leHRTaWJsaW5nOiBob3N0TmV4dFNpYmxpbmcsIHNldFNjb3BlSWQ6IGhvc3RTZXRTY29wZUlkID0gTk9PUCwgY2xvbmVOb2RlOiBob3N0Q2xvbmVOb2RlLCBpbnNlcnRTdGF0aWNDb250ZW50OiBob3N0SW5zZXJ0U3RhdGljQ29udGVudCB9ID0gb3B0aW9ucztcclxuICAgIC8vIE5vdGU6IGZ1bmN0aW9ucyBpbnNpZGUgdGhpcyBjbG9zdXJlIHNob3VsZCB1c2UgYGNvbnN0IHh4eCA9ICgpID0+IHt9YFxyXG4gICAgLy8gc3R5bGUgaW4gb3JkZXIgdG8gcHJldmVudCBiZWluZyBpbmxpbmVkIGJ5IG1pbmlmaWVycy5cclxuICAgIGNvbnN0IHBhdGNoID0gKG4xLCBuMiwgY29udGFpbmVyLCBhbmNob3IgPSBudWxsLCBwYXJlbnRDb21wb25lbnQgPSBudWxsLCBwYXJlbnRTdXNwZW5zZSA9IG51bGwsIGlzU1ZHID0gZmFsc2UsIG9wdGltaXplZCA9IGZhbHNlKSA9PiB7XHJcbiAgICAgICAgLy8gcGF0Y2hpbmcgJiBub3Qgc2FtZSB0eXBlLCB1bm1vdW50IG9sZCB0cmVlXHJcbiAgICAgICAgaWYgKG4xICYmICFpc1NhbWVWTm9kZVR5cGUobjEsIG4yKSkge1xyXG4gICAgICAgICAgICBhbmNob3IgPSBnZXROZXh0SG9zdE5vZGUobjEpO1xyXG4gICAgICAgICAgICB1bm1vdW50KG4xLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCB0cnVlKTtcclxuICAgICAgICAgICAgbjEgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobjIucGF0Y2hGbGFnID09PSAtMiAvKiBCQUlMICovKSB7XHJcbiAgICAgICAgICAgIG9wdGltaXplZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBuMi5keW5hbWljQ2hpbGRyZW4gPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCB7IHR5cGUsIHJlZiwgc2hhcGVGbGFnIH0gPSBuMjtcclxuICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSBUZXh0OlxyXG4gICAgICAgICAgICAgICAgcHJvY2Vzc1RleHQobjEsIG4yLCBjb250YWluZXIsIGFuY2hvcik7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBDb21tZW50OlxyXG4gICAgICAgICAgICAgICAgcHJvY2Vzc0NvbW1lbnROb2RlKG4xLCBuMiwgY29udGFpbmVyLCBhbmNob3IpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgU3RhdGljOlxyXG4gICAgICAgICAgICAgICAgaWYgKG4xID09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBtb3VudFN0YXRpY05vZGUobjIsIGNvbnRhaW5lciwgYW5jaG9yLCBpc1NWRyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgICAgICBwYXRjaFN0YXRpY05vZGUobjEsIG4yLCBjb250YWluZXIsIGlzU1ZHKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIEZyYWdtZW50OlxyXG4gICAgICAgICAgICAgICAgcHJvY2Vzc0ZyYWdtZW50KG4xLCBuMiwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBvcHRpbWl6ZWQpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICBpZiAoc2hhcGVGbGFnICYgMSAvKiBFTEVNRU5UICovKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc0VsZW1lbnQobjEsIG4yLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIG9wdGltaXplZCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChzaGFwZUZsYWcgJiA2IC8qIENPTVBPTkVOVCAqLykge1xyXG4gICAgICAgICAgICAgICAgICAgIHByb2Nlc3NDb21wb25lbnQobjEsIG4yLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIG9wdGltaXplZCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChzaGFwZUZsYWcgJiA2NCAvKiBURUxFUE9SVCAqLykge1xyXG4gICAgICAgICAgICAgICAgICAgIHR5cGUucHJvY2VzcyhuMSwgbjIsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgb3B0aW1pemVkLCBpbnRlcm5hbHMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoIHNoYXBlRmxhZyAmIDEyOCAvKiBTVVNQRU5TRSAqLykge1xyXG4gICAgICAgICAgICAgICAgICAgIHR5cGUucHJvY2VzcyhuMSwgbjIsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgb3B0aW1pemVkLCBpbnRlcm5hbHMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2FybignSW52YWxpZCBWTm9kZSB0eXBlOicsIHR5cGUsIGAoJHt0eXBlb2YgdHlwZX0pYCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHNldCByZWZcclxuICAgICAgICBpZiAocmVmICE9IG51bGwgJiYgcGFyZW50Q29tcG9uZW50KSB7XHJcbiAgICAgICAgICAgIHNldFJlZihyZWYsIG4xICYmIG4xLnJlZiwgcGFyZW50U3VzcGVuc2UsIG4yKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgY29uc3QgcHJvY2Vzc1RleHQgPSAobjEsIG4yLCBjb250YWluZXIsIGFuY2hvcikgPT4ge1xyXG4gICAgICAgIGlmIChuMSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGhvc3RJbnNlcnQoKG4yLmVsID0gaG9zdENyZWF0ZVRleHQobjIuY2hpbGRyZW4pKSwgY29udGFpbmVyLCBhbmNob3IpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3QgZWwgPSAobjIuZWwgPSBuMS5lbCk7XHJcbiAgICAgICAgICAgIGlmIChuMi5jaGlsZHJlbiAhPT0gbjEuY2hpbGRyZW4pIHtcclxuICAgICAgICAgICAgICAgIGhvc3RTZXRUZXh0KGVsLCBuMi5jaGlsZHJlbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgY29uc3QgcHJvY2Vzc0NvbW1lbnROb2RlID0gKG4xLCBuMiwgY29udGFpbmVyLCBhbmNob3IpID0+IHtcclxuICAgICAgICBpZiAobjEgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBob3N0SW5zZXJ0KChuMi5lbCA9IGhvc3RDcmVhdGVDb21tZW50KG4yLmNoaWxkcmVuIHx8ICcnKSksIGNvbnRhaW5lciwgYW5jaG9yKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIHRoZXJlJ3Mgbm8gc3VwcG9ydCBmb3IgZHluYW1pYyBjb21tZW50c1xyXG4gICAgICAgICAgICBuMi5lbCA9IG4xLmVsO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBjb25zdCBtb3VudFN0YXRpY05vZGUgPSAobjIsIGNvbnRhaW5lciwgYW5jaG9yLCBpc1NWRykgPT4ge1xyXG4gICAgICAgIFtuMi5lbCwgbjIuYW5jaG9yXSA9IGhvc3RJbnNlcnRTdGF0aWNDb250ZW50KG4yLmNoaWxkcmVuLCBjb250YWluZXIsIGFuY2hvciwgaXNTVkcpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogRGV2IC8gSE1SIG9ubHlcclxuICAgICAqL1xyXG4gICAgY29uc3QgcGF0Y2hTdGF0aWNOb2RlID0gKG4xLCBuMiwgY29udGFpbmVyLCBpc1NWRykgPT4ge1xyXG4gICAgICAgIC8vIHN0YXRpYyBub2RlcyBhcmUgb25seSBwYXRjaGVkIGR1cmluZyBkZXYgZm9yIEhNUlxyXG4gICAgICAgIGlmIChuMi5jaGlsZHJlbiAhPT0gbjEuY2hpbGRyZW4pIHtcclxuICAgICAgICAgICAgY29uc3QgYW5jaG9yID0gaG9zdE5leHRTaWJsaW5nKG4xLmFuY2hvcik7XHJcbiAgICAgICAgICAgIC8vIHJlbW92ZSBleGlzdGluZ1xyXG4gICAgICAgICAgICByZW1vdmVTdGF0aWNOb2RlKG4xKTtcclxuICAgICAgICAgICAgW24yLmVsLCBuMi5hbmNob3JdID0gaG9zdEluc2VydFN0YXRpY0NvbnRlbnQobjIuY2hpbGRyZW4sIGNvbnRhaW5lciwgYW5jaG9yLCBpc1NWRyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBuMi5lbCA9IG4xLmVsO1xyXG4gICAgICAgICAgICBuMi5hbmNob3IgPSBuMS5hbmNob3I7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGNvbnN0IG1vdmVTdGF0aWNOb2RlID0gKHsgZWwsIGFuY2hvciB9LCBjb250YWluZXIsIG5leHRTaWJsaW5nKSA9PiB7XHJcbiAgICAgICAgbGV0IG5leHQ7XHJcbiAgICAgICAgd2hpbGUgKGVsICYmIGVsICE9PSBhbmNob3IpIHtcclxuICAgICAgICAgICAgbmV4dCA9IGhvc3ROZXh0U2libGluZyhlbCk7XHJcbiAgICAgICAgICAgIGhvc3RJbnNlcnQoZWwsIGNvbnRhaW5lciwgbmV4dFNpYmxpbmcpO1xyXG4gICAgICAgICAgICBlbCA9IG5leHQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGhvc3RJbnNlcnQoYW5jaG9yLCBjb250YWluZXIsIG5leHRTaWJsaW5nKTtcclxuICAgIH07XHJcbiAgICBjb25zdCByZW1vdmVTdGF0aWNOb2RlID0gKHsgZWwsIGFuY2hvciB9KSA9PiB7XHJcbiAgICAgICAgbGV0IG5leHQ7XHJcbiAgICAgICAgd2hpbGUgKGVsICYmIGVsICE9PSBhbmNob3IpIHtcclxuICAgICAgICAgICAgbmV4dCA9IGhvc3ROZXh0U2libGluZyhlbCk7XHJcbiAgICAgICAgICAgIGhvc3RSZW1vdmUoZWwpO1xyXG4gICAgICAgICAgICBlbCA9IG5leHQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGhvc3RSZW1vdmUoYW5jaG9yKTtcclxuICAgIH07XHJcbiAgICBjb25zdCBwcm9jZXNzRWxlbWVudCA9IChuMSwgbjIsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgb3B0aW1pemVkKSA9PiB7XHJcbiAgICAgICAgaXNTVkcgPSBpc1NWRyB8fCBuMi50eXBlID09PSAnc3ZnJztcclxuICAgICAgICBpZiAobjEgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBtb3VudEVsZW1lbnQobjIsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgb3B0aW1pemVkKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHBhdGNoRWxlbWVudChuMSwgbjIsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBvcHRpbWl6ZWQpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBjb25zdCBtb3VudEVsZW1lbnQgPSAodm5vZGUsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgb3B0aW1pemVkKSA9PiB7XHJcbiAgICAgICAgbGV0IGVsO1xyXG4gICAgICAgIGxldCB2bm9kZUhvb2s7XHJcbiAgICAgICAgY29uc3QgeyB0eXBlLCBwcm9wcywgc2hhcGVGbGFnLCB0cmFuc2l0aW9uLCBzY29wZUlkLCBwYXRjaEZsYWcsIGRpcnMgfSA9IHZub2RlO1xyXG4gICAgICAgIGlmICghKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmXHJcbiAgICAgICAgICAgIHZub2RlLmVsICYmXHJcbiAgICAgICAgICAgIGhvc3RDbG9uZU5vZGUgIT09IHVuZGVmaW5lZCAmJlxyXG4gICAgICAgICAgICBwYXRjaEZsYWcgPT09IC0xIC8qIEhPSVNURUQgKi8pIHtcclxuICAgICAgICAgICAgLy8gSWYgYSB2bm9kZSBoYXMgbm9uLW51bGwgZWwsIGl0IG1lYW5zIGl0J3MgYmVpbmcgcmV1c2VkLlxyXG4gICAgICAgICAgICAvLyBPbmx5IHN0YXRpYyB2bm9kZXMgY2FuIGJlIHJldXNlZCwgc28gaXRzIG1vdW50ZWQgRE9NIG5vZGVzIHNob3VsZCBiZVxyXG4gICAgICAgICAgICAvLyBleGFjdGx5IHRoZSBzYW1lLCBhbmQgd2UgY2FuIHNpbXBseSBkbyBhIGNsb25lIGhlcmUuXHJcbiAgICAgICAgICAgIC8vIG9ubHkgZG8gdGhpcyBpbiBwcm9kdWN0aW9uIHNpbmNlIGNsb25lZCB0cmVlcyBjYW5ub3QgYmUgSE1SIHVwZGF0ZWQuXHJcbiAgICAgICAgICAgIGVsID0gdm5vZGUuZWwgPSBob3N0Q2xvbmVOb2RlKHZub2RlLmVsKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGVsID0gdm5vZGUuZWwgPSBob3N0Q3JlYXRlRWxlbWVudCh2bm9kZS50eXBlLCBpc1NWRywgcHJvcHMgJiYgcHJvcHMuaXMpO1xyXG4gICAgICAgICAgICAvLyBtb3VudCBjaGlsZHJlbiBmaXJzdCwgc2luY2Ugc29tZSBwcm9wcyBtYXkgcmVseSBvbiBjaGlsZCBjb250ZW50XHJcbiAgICAgICAgICAgIC8vIGJlaW5nIGFscmVhZHkgcmVuZGVyZWQsIGUuZy4gYDxzZWxlY3QgdmFsdWU+YFxyXG4gICAgICAgICAgICBpZiAoc2hhcGVGbGFnICYgOCAvKiBURVhUX0NISUxEUkVOICovKSB7XHJcbiAgICAgICAgICAgICAgICBob3N0U2V0RWxlbWVudFRleHQoZWwsIHZub2RlLmNoaWxkcmVuKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChzaGFwZUZsYWcgJiAxNiAvKiBBUlJBWV9DSElMRFJFTiAqLykge1xyXG4gICAgICAgICAgICAgICAgbW91bnRDaGlsZHJlbih2bm9kZS5jaGlsZHJlbiwgZWwsIG51bGwsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHICYmIHR5cGUgIT09ICdmb3JlaWduT2JqZWN0Jywgb3B0aW1pemVkIHx8ICEhdm5vZGUuZHluYW1pY0NoaWxkcmVuKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZGlycykge1xyXG4gICAgICAgICAgICAgICAgaW52b2tlRGlyZWN0aXZlSG9vayh2bm9kZSwgbnVsbCwgcGFyZW50Q29tcG9uZW50LCAnY3JlYXRlZCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIHByb3BzXHJcbiAgICAgICAgICAgIGlmIChwcm9wcykge1xyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gcHJvcHMpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWlzUmVzZXJ2ZWRQcm9wKGtleSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaG9zdFBhdGNoUHJvcChlbCwga2V5LCBudWxsLCBwcm9wc1trZXldLCBpc1NWRywgdm5vZGUuY2hpbGRyZW4sIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHVubW91bnRDaGlsZHJlbik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKCh2bm9kZUhvb2sgPSBwcm9wcy5vblZub2RlQmVmb3JlTW91bnQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaW52b2tlVk5vZGVIb29rKHZub2RlSG9vaywgcGFyZW50Q29tcG9uZW50LCB2bm9kZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gc2NvcGVJZFxyXG4gICAgICAgICAgICBzZXRTY29wZUlkKGVsLCBzY29wZUlkLCB2bm9kZSwgcGFyZW50Q29tcG9uZW50KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB8fCBfX1ZVRV9QUk9EX0RFVlRPT0xTX18pIHtcclxuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGVsLCAnX192bm9kZScsIHtcclxuICAgICAgICAgICAgICAgIHZhbHVlOiB2bm9kZSxcclxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZWwsICdfX3Z1ZVBhcmVudENvbXBvbmVudCcsIHtcclxuICAgICAgICAgICAgICAgIHZhbHVlOiBwYXJlbnRDb21wb25lbnQsXHJcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGRpcnMpIHtcclxuICAgICAgICAgICAgaW52b2tlRGlyZWN0aXZlSG9vayh2bm9kZSwgbnVsbCwgcGFyZW50Q29tcG9uZW50LCAnYmVmb3JlTW91bnQnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gIzE1ODMgRm9yIGluc2lkZSBzdXNwZW5zZSArIHN1c3BlbnNlIG5vdCByZXNvbHZlZCBjYXNlLCBlbnRlciBob29rIHNob3VsZCBjYWxsIHdoZW4gc3VzcGVuc2UgcmVzb2x2ZWRcclxuICAgICAgICAvLyAjMTY4OSBGb3IgaW5zaWRlIHN1c3BlbnNlICsgc3VzcGVuc2UgcmVzb2x2ZWQgY2FzZSwganVzdCBjYWxsIGl0XHJcbiAgICAgICAgY29uc3QgbmVlZENhbGxUcmFuc2l0aW9uSG9va3MgPSAoIXBhcmVudFN1c3BlbnNlIHx8IChwYXJlbnRTdXNwZW5zZSAmJiAhcGFyZW50U3VzcGVuc2UucGVuZGluZ0JyYW5jaCkpICYmXHJcbiAgICAgICAgICAgIHRyYW5zaXRpb24gJiZcclxuICAgICAgICAgICAgIXRyYW5zaXRpb24ucGVyc2lzdGVkO1xyXG4gICAgICAgIGlmIChuZWVkQ2FsbFRyYW5zaXRpb25Ib29rcykge1xyXG4gICAgICAgICAgICB0cmFuc2l0aW9uLmJlZm9yZUVudGVyKGVsKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaG9zdEluc2VydChlbCwgY29udGFpbmVyLCBhbmNob3IpO1xyXG4gICAgICAgIGlmICgodm5vZGVIb29rID0gcHJvcHMgJiYgcHJvcHMub25Wbm9kZU1vdW50ZWQpIHx8XHJcbiAgICAgICAgICAgIG5lZWRDYWxsVHJhbnNpdGlvbkhvb2tzIHx8XHJcbiAgICAgICAgICAgIGRpcnMpIHtcclxuICAgICAgICAgICAgcXVldWVQb3N0UmVuZGVyRWZmZWN0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgIHZub2RlSG9vayAmJiBpbnZva2VWTm9kZUhvb2sodm5vZGVIb29rLCBwYXJlbnRDb21wb25lbnQsIHZub2RlKTtcclxuICAgICAgICAgICAgICAgIG5lZWRDYWxsVHJhbnNpdGlvbkhvb2tzICYmIHRyYW5zaXRpb24uZW50ZXIoZWwpO1xyXG4gICAgICAgICAgICAgICAgZGlycyAmJiBpbnZva2VEaXJlY3RpdmVIb29rKHZub2RlLCBudWxsLCBwYXJlbnRDb21wb25lbnQsICdtb3VudGVkJyk7XHJcbiAgICAgICAgICAgIH0sIHBhcmVudFN1c3BlbnNlKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgY29uc3Qgc2V0U2NvcGVJZCA9IChlbCwgc2NvcGVJZCwgdm5vZGUsIHBhcmVudENvbXBvbmVudCkgPT4ge1xyXG4gICAgICAgIGlmIChzY29wZUlkKSB7XHJcbiAgICAgICAgICAgIGhvc3RTZXRTY29wZUlkKGVsLCBzY29wZUlkKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHBhcmVudENvbXBvbmVudCkge1xyXG4gICAgICAgICAgICBjb25zdCB0cmVlT3duZXJJZCA9IHBhcmVudENvbXBvbmVudC50eXBlLl9fc2NvcGVJZDtcclxuICAgICAgICAgICAgLy8gdm5vZGUncyBvd24gc2NvcGVJZCBhbmQgdGhlIGN1cnJlbnQgcGF0Y2hlZCBjb21wb25lbnQncyBzY29wZUlkIGlzXHJcbiAgICAgICAgICAgIC8vIGRpZmZlcmVudCAtIHRoaXMgaXMgYSBzbG90IGNvbnRlbnQgbm9kZS5cclxuICAgICAgICAgICAgaWYgKHRyZWVPd25lcklkICYmIHRyZWVPd25lcklkICE9PSBzY29wZUlkKSB7XHJcbiAgICAgICAgICAgICAgICBob3N0U2V0U2NvcGVJZChlbCwgdHJlZU93bmVySWQgKyAnLXMnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsZXQgc3ViVHJlZSA9IHBhcmVudENvbXBvbmVudC5zdWJUcmVlO1xyXG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIHN1YlRyZWUudHlwZSA9PT0gRnJhZ21lbnQpIHtcclxuICAgICAgICAgICAgICAgIHN1YlRyZWUgPVxyXG4gICAgICAgICAgICAgICAgICAgIGZpbHRlclNpbmdsZVJvb3Qoc3ViVHJlZS5jaGlsZHJlbikgfHwgc3ViVHJlZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodm5vZGUgPT09IHN1YlRyZWUpIHtcclxuICAgICAgICAgICAgICAgIHNldFNjb3BlSWQoZWwsIHBhcmVudENvbXBvbmVudC52bm9kZS5zY29wZUlkLCBwYXJlbnRDb21wb25lbnQudm5vZGUsIHBhcmVudENvbXBvbmVudC5wYXJlbnQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGNvbnN0IG1vdW50Q2hpbGRyZW4gPSAoY2hpbGRyZW4sIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgb3B0aW1pemVkLCBzdGFydCA9IDApID0+IHtcclxuICAgICAgICBmb3IgKGxldCBpID0gc3RhcnQ7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCBjaGlsZCA9IChjaGlsZHJlbltpXSA9IG9wdGltaXplZFxyXG4gICAgICAgICAgICAgICAgPyBjbG9uZUlmTW91bnRlZChjaGlsZHJlbltpXSlcclxuICAgICAgICAgICAgICAgIDogbm9ybWFsaXplVk5vZGUoY2hpbGRyZW5baV0pKTtcclxuICAgICAgICAgICAgcGF0Y2gobnVsbCwgY2hpbGQsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgb3B0aW1pemVkKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgY29uc3QgcGF0Y2hFbGVtZW50ID0gKG4xLCBuMiwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIG9wdGltaXplZCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGVsID0gKG4yLmVsID0gbjEuZWwpO1xyXG4gICAgICAgIGxldCB7IHBhdGNoRmxhZywgZHluYW1pY0NoaWxkcmVuLCBkaXJzIH0gPSBuMjtcclxuICAgICAgICAvLyAjMTQyNiB0YWtlIHRoZSBvbGQgdm5vZGUncyBwYXRjaCBmbGFnIGludG8gYWNjb3VudCBzaW5jZSB1c2VyIG1heSBjbG9uZSBhXHJcbiAgICAgICAgLy8gY29tcGlsZXItZ2VuZXJhdGVkIHZub2RlLCB3aGljaCBkZS1vcHRzIHRvIEZVTExfUFJPUFNcclxuICAgICAgICBwYXRjaEZsYWcgfD0gbjEucGF0Y2hGbGFnICYgMTYgLyogRlVMTF9QUk9QUyAqLztcclxuICAgICAgICBjb25zdCBvbGRQcm9wcyA9IG4xLnByb3BzIHx8IEVNUFRZX09CSjtcclxuICAgICAgICBjb25zdCBuZXdQcm9wcyA9IG4yLnByb3BzIHx8IEVNUFRZX09CSjtcclxuICAgICAgICBsZXQgdm5vZGVIb29rO1xyXG4gICAgICAgIGlmICgodm5vZGVIb29rID0gbmV3UHJvcHMub25Wbm9kZUJlZm9yZVVwZGF0ZSkpIHtcclxuICAgICAgICAgICAgaW52b2tlVk5vZGVIb29rKHZub2RlSG9vaywgcGFyZW50Q29tcG9uZW50LCBuMiwgbjEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZGlycykge1xyXG4gICAgICAgICAgICBpbnZva2VEaXJlY3RpdmVIb29rKG4yLCBuMSwgcGFyZW50Q29tcG9uZW50LCAnYmVmb3JlVXBkYXRlJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgaXNIbXJVcGRhdGluZykge1xyXG4gICAgICAgICAgICAvLyBITVIgdXBkYXRlZCwgZm9yY2UgZnVsbCBkaWZmXHJcbiAgICAgICAgICAgIHBhdGNoRmxhZyA9IDA7XHJcbiAgICAgICAgICAgIG9wdGltaXplZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBkeW5hbWljQ2hpbGRyZW4gPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocGF0Y2hGbGFnID4gMCkge1xyXG4gICAgICAgICAgICAvLyB0aGUgcHJlc2VuY2Ugb2YgYSBwYXRjaEZsYWcgbWVhbnMgdGhpcyBlbGVtZW50J3MgcmVuZGVyIGNvZGUgd2FzXHJcbiAgICAgICAgICAgIC8vIGdlbmVyYXRlZCBieSB0aGUgY29tcGlsZXIgYW5kIGNhbiB0YWtlIHRoZSBmYXN0IHBhdGguXHJcbiAgICAgICAgICAgIC8vIGluIHRoaXMgcGF0aCBvbGQgbm9kZSBhbmQgbmV3IG5vZGUgYXJlIGd1YXJhbnRlZWQgdG8gaGF2ZSB0aGUgc2FtZSBzaGFwZVxyXG4gICAgICAgICAgICAvLyAoaS5lLiBhdCB0aGUgZXhhY3Qgc2FtZSBwb3NpdGlvbiBpbiB0aGUgc291cmNlIHRlbXBsYXRlKVxyXG4gICAgICAgICAgICBpZiAocGF0Y2hGbGFnICYgMTYgLyogRlVMTF9QUk9QUyAqLykge1xyXG4gICAgICAgICAgICAgICAgLy8gZWxlbWVudCBwcm9wcyBjb250YWluIGR5bmFtaWMga2V5cywgZnVsbCBkaWZmIG5lZWRlZFxyXG4gICAgICAgICAgICAgICAgcGF0Y2hQcm9wcyhlbCwgbjIsIG9sZFByb3BzLCBuZXdQcm9wcywgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gY2xhc3NcclxuICAgICAgICAgICAgICAgIC8vIHRoaXMgZmxhZyBpcyBtYXRjaGVkIHdoZW4gdGhlIGVsZW1lbnQgaGFzIGR5bmFtaWMgY2xhc3MgYmluZGluZ3MuXHJcbiAgICAgICAgICAgICAgICBpZiAocGF0Y2hGbGFnICYgMiAvKiBDTEFTUyAqLykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvbGRQcm9wcy5jbGFzcyAhPT0gbmV3UHJvcHMuY2xhc3MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaG9zdFBhdGNoUHJvcChlbCwgJ2NsYXNzJywgbnVsbCwgbmV3UHJvcHMuY2xhc3MsIGlzU1ZHKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBzdHlsZVxyXG4gICAgICAgICAgICAgICAgLy8gdGhpcyBmbGFnIGlzIG1hdGNoZWQgd2hlbiB0aGUgZWxlbWVudCBoYXMgZHluYW1pYyBzdHlsZSBiaW5kaW5nc1xyXG4gICAgICAgICAgICAgICAgaWYgKHBhdGNoRmxhZyAmIDQgLyogU1RZTEUgKi8pIHtcclxuICAgICAgICAgICAgICAgICAgICBob3N0UGF0Y2hQcm9wKGVsLCAnc3R5bGUnLCBvbGRQcm9wcy5zdHlsZSwgbmV3UHJvcHMuc3R5bGUsIGlzU1ZHKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIHByb3BzXHJcbiAgICAgICAgICAgICAgICAvLyBUaGlzIGZsYWcgaXMgbWF0Y2hlZCB3aGVuIHRoZSBlbGVtZW50IGhhcyBkeW5hbWljIHByb3AvYXR0ciBiaW5kaW5nc1xyXG4gICAgICAgICAgICAgICAgLy8gb3RoZXIgdGhhbiBjbGFzcyBhbmQgc3R5bGUuIFRoZSBrZXlzIG9mIGR5bmFtaWMgcHJvcC9hdHRycyBhcmUgc2F2ZWQgZm9yXHJcbiAgICAgICAgICAgICAgICAvLyBmYXN0ZXIgaXRlcmF0aW9uLlxyXG4gICAgICAgICAgICAgICAgLy8gTm90ZSBkeW5hbWljIGtleXMgbGlrZSA6W2Zvb109XCJiYXJcIiB3aWxsIGNhdXNlIHRoaXMgb3B0aW1pemF0aW9uIHRvXHJcbiAgICAgICAgICAgICAgICAvLyBiYWlsIG91dCBhbmQgZ28gdGhyb3VnaCBhIGZ1bGwgZGlmZiBiZWNhdXNlIHdlIG5lZWQgdG8gdW5zZXQgdGhlIG9sZCBrZXlcclxuICAgICAgICAgICAgICAgIGlmIChwYXRjaEZsYWcgJiA4IC8qIFBST1BTICovKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgdGhlIGZsYWcgaXMgcHJlc2VudCB0aGVuIGR5bmFtaWNQcm9wcyBtdXN0IGJlIG5vbi1udWxsXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJvcHNUb1VwZGF0ZSA9IG4yLmR5bmFtaWNQcm9wcztcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHByb3BzVG9VcGRhdGUubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qga2V5ID0gcHJvcHNUb1VwZGF0ZVtpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJldiA9IG9sZFByb3BzW2tleV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5leHQgPSBuZXdQcm9wc1trZXldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobmV4dCAhPT0gcHJldiB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKGhvc3RGb3JjZVBhdGNoUHJvcCAmJiBob3N0Rm9yY2VQYXRjaFByb3AoZWwsIGtleSkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBob3N0UGF0Y2hQcm9wKGVsLCBrZXksIHByZXYsIG5leHQsIGlzU1ZHLCBuMS5jaGlsZHJlbiwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgdW5tb3VudENoaWxkcmVuKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyB0ZXh0XHJcbiAgICAgICAgICAgIC8vIFRoaXMgZmxhZyBpcyBtYXRjaGVkIHdoZW4gdGhlIGVsZW1lbnQgaGFzIG9ubHkgZHluYW1pYyB0ZXh0IGNoaWxkcmVuLlxyXG4gICAgICAgICAgICBpZiAocGF0Y2hGbGFnICYgMSAvKiBURVhUICovKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAobjEuY2hpbGRyZW4gIT09IG4yLmNoaWxkcmVuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaG9zdFNldEVsZW1lbnRUZXh0KGVsLCBuMi5jaGlsZHJlbik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoIW9wdGltaXplZCAmJiBkeW5hbWljQ2hpbGRyZW4gPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAvLyB1bm9wdGltaXplZCwgZnVsbCBkaWZmXHJcbiAgICAgICAgICAgIHBhdGNoUHJvcHMoZWwsIG4yLCBvbGRQcm9wcywgbmV3UHJvcHMsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgYXJlQ2hpbGRyZW5TVkcgPSBpc1NWRyAmJiBuMi50eXBlICE9PSAnZm9yZWlnbk9iamVjdCc7XHJcbiAgICAgICAgaWYgKGR5bmFtaWNDaGlsZHJlbikge1xyXG4gICAgICAgICAgICBwYXRjaEJsb2NrQ2hpbGRyZW4objEuZHluYW1pY0NoaWxkcmVuLCBkeW5hbWljQ2hpbGRyZW4sIGVsLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBhcmVDaGlsZHJlblNWRyk7XHJcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgcGFyZW50Q29tcG9uZW50ICYmIHBhcmVudENvbXBvbmVudC50eXBlLl9faG1ySWQpIHtcclxuICAgICAgICAgICAgICAgIHRyYXZlcnNlU3RhdGljQ2hpbGRyZW4objEsIG4yKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICghb3B0aW1pemVkKSB7XHJcbiAgICAgICAgICAgIC8vIGZ1bGwgZGlmZlxyXG4gICAgICAgICAgICBwYXRjaENoaWxkcmVuKG4xLCBuMiwgZWwsIG51bGwsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGFyZUNoaWxkcmVuU1ZHKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCh2bm9kZUhvb2sgPSBuZXdQcm9wcy5vblZub2RlVXBkYXRlZCkgfHwgZGlycykge1xyXG4gICAgICAgICAgICBxdWV1ZVBvc3RSZW5kZXJFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdm5vZGVIb29rICYmIGludm9rZVZOb2RlSG9vayh2bm9kZUhvb2ssIHBhcmVudENvbXBvbmVudCwgbjIsIG4xKTtcclxuICAgICAgICAgICAgICAgIGRpcnMgJiYgaW52b2tlRGlyZWN0aXZlSG9vayhuMiwgbjEsIHBhcmVudENvbXBvbmVudCwgJ3VwZGF0ZWQnKTtcclxuICAgICAgICAgICAgfSwgcGFyZW50U3VzcGVuc2UpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvLyBUaGUgZmFzdCBwYXRoIGZvciBibG9ja3MuXHJcbiAgICBjb25zdCBwYXRjaEJsb2NrQ2hpbGRyZW4gPSAob2xkQ2hpbGRyZW4sIG5ld0NoaWxkcmVuLCBmYWxsYmFja0NvbnRhaW5lciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcpID0+IHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5ld0NoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG9sZFZOb2RlID0gb2xkQ2hpbGRyZW5baV07XHJcbiAgICAgICAgICAgIGNvbnN0IG5ld1ZOb2RlID0gbmV3Q2hpbGRyZW5baV07XHJcbiAgICAgICAgICAgIC8vIERldGVybWluZSB0aGUgY29udGFpbmVyIChwYXJlbnQgZWxlbWVudCkgZm9yIHRoZSBwYXRjaC5cclxuICAgICAgICAgICAgY29uc3QgY29udGFpbmVyID0gXHJcbiAgICAgICAgICAgIC8vIC0gSW4gdGhlIGNhc2Ugb2YgYSBGcmFnbWVudCwgd2UgbmVlZCB0byBwcm92aWRlIHRoZSBhY3R1YWwgcGFyZW50XHJcbiAgICAgICAgICAgIC8vIG9mIHRoZSBGcmFnbWVudCBpdHNlbGYgc28gaXQgY2FuIG1vdmUgaXRzIGNoaWxkcmVuLlxyXG4gICAgICAgICAgICBvbGRWTm9kZS50eXBlID09PSBGcmFnbWVudCB8fFxyXG4gICAgICAgICAgICAgICAgLy8gLSBJbiB0aGUgY2FzZSBvZiBkaWZmZXJlbnQgbm9kZXMsIHRoZXJlIGlzIGdvaW5nIHRvIGJlIGEgcmVwbGFjZW1lbnRcclxuICAgICAgICAgICAgICAgIC8vIHdoaWNoIGFsc28gcmVxdWlyZXMgdGhlIGNvcnJlY3QgcGFyZW50IGNvbnRhaW5lclxyXG4gICAgICAgICAgICAgICAgIWlzU2FtZVZOb2RlVHlwZShvbGRWTm9kZSwgbmV3Vk5vZGUpIHx8XHJcbiAgICAgICAgICAgICAgICAvLyAtIEluIHRoZSBjYXNlIG9mIGEgY29tcG9uZW50LCBpdCBjb3VsZCBjb250YWluIGFueXRoaW5nLlxyXG4gICAgICAgICAgICAgICAgb2xkVk5vZGUuc2hhcGVGbGFnICYgNiAvKiBDT01QT05FTlQgKi8gfHxcclxuICAgICAgICAgICAgICAgIG9sZFZOb2RlLnNoYXBlRmxhZyAmIDY0IC8qIFRFTEVQT1JUICovXHJcbiAgICAgICAgICAgICAgICA/IGhvc3RQYXJlbnROb2RlKG9sZFZOb2RlLmVsKVxyXG4gICAgICAgICAgICAgICAgOiAvLyBJbiBvdGhlciBjYXNlcywgdGhlIHBhcmVudCBjb250YWluZXIgaXMgbm90IGFjdHVhbGx5IHVzZWQgc28gd2VcclxuICAgICAgICAgICAgICAgICAgICAvLyBqdXN0IHBhc3MgdGhlIGJsb2NrIGVsZW1lbnQgaGVyZSB0byBhdm9pZCBhIERPTSBwYXJlbnROb2RlIGNhbGwuXHJcbiAgICAgICAgICAgICAgICAgICAgZmFsbGJhY2tDb250YWluZXI7XHJcbiAgICAgICAgICAgIHBhdGNoKG9sZFZOb2RlLCBuZXdWTm9kZSwgY29udGFpbmVyLCBudWxsLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgdHJ1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGNvbnN0IHBhdGNoUHJvcHMgPSAoZWwsIHZub2RlLCBvbGRQcm9wcywgbmV3UHJvcHMsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHKSA9PiB7XHJcbiAgICAgICAgaWYgKG9sZFByb3BzICE9PSBuZXdQcm9wcykge1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBuZXdQcm9wcykge1xyXG4gICAgICAgICAgICAgICAgLy8gZW1wdHkgc3RyaW5nIGlzIG5vdCB2YWxpZCBwcm9wXHJcbiAgICAgICAgICAgICAgICBpZiAoaXNSZXNlcnZlZFByb3Aoa2V5KSlcclxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG5leHQgPSBuZXdQcm9wc1trZXldO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcHJldiA9IG9sZFByb3BzW2tleV07XHJcbiAgICAgICAgICAgICAgICBpZiAobmV4dCAhPT0gcHJldiB8fFxyXG4gICAgICAgICAgICAgICAgICAgIChob3N0Rm9yY2VQYXRjaFByb3AgJiYgaG9zdEZvcmNlUGF0Y2hQcm9wKGVsLCBrZXkpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGhvc3RQYXRjaFByb3AoZWwsIGtleSwgcHJldiwgbmV4dCwgaXNTVkcsIHZub2RlLmNoaWxkcmVuLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCB1bm1vdW50Q2hpbGRyZW4pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChvbGRQcm9wcyAhPT0gRU1QVFlfT0JKKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBvbGRQcm9wcykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghaXNSZXNlcnZlZFByb3Aoa2V5KSAmJiAhKGtleSBpbiBuZXdQcm9wcykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaG9zdFBhdGNoUHJvcChlbCwga2V5LCBvbGRQcm9wc1trZXldLCBudWxsLCBpc1NWRywgdm5vZGUuY2hpbGRyZW4sIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHVubW91bnRDaGlsZHJlbik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGNvbnN0IHByb2Nlc3NGcmFnbWVudCA9IChuMSwgbjIsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgb3B0aW1pemVkKSA9PiB7XHJcbiAgICAgICAgY29uc3QgZnJhZ21lbnRTdGFydEFuY2hvciA9IChuMi5lbCA9IG4xID8gbjEuZWwgOiBob3N0Q3JlYXRlVGV4dCgnJykpO1xyXG4gICAgICAgIGNvbnN0IGZyYWdtZW50RW5kQW5jaG9yID0gKG4yLmFuY2hvciA9IG4xID8gbjEuYW5jaG9yIDogaG9zdENyZWF0ZVRleHQoJycpKTtcclxuICAgICAgICBsZXQgeyBwYXRjaEZsYWcsIGR5bmFtaWNDaGlsZHJlbiB9ID0gbjI7XHJcbiAgICAgICAgaWYgKHBhdGNoRmxhZyA+IDApIHtcclxuICAgICAgICAgICAgb3B0aW1pemVkID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBpc0htclVwZGF0aW5nKSB7XHJcbiAgICAgICAgICAgIC8vIEhNUiB1cGRhdGVkLCBmb3JjZSBmdWxsIGRpZmZcclxuICAgICAgICAgICAgcGF0Y2hGbGFnID0gMDtcclxuICAgICAgICAgICAgb3B0aW1pemVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGR5bmFtaWNDaGlsZHJlbiA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChuMSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGhvc3RJbnNlcnQoZnJhZ21lbnRTdGFydEFuY2hvciwgY29udGFpbmVyLCBhbmNob3IpO1xyXG4gICAgICAgICAgICBob3N0SW5zZXJ0KGZyYWdtZW50RW5kQW5jaG9yLCBjb250YWluZXIsIGFuY2hvcik7XHJcbiAgICAgICAgICAgIC8vIGEgZnJhZ21lbnQgY2FuIG9ubHkgaGF2ZSBhcnJheSBjaGlsZHJlblxyXG4gICAgICAgICAgICAvLyBzaW5jZSB0aGV5IGFyZSBlaXRoZXIgZ2VuZXJhdGVkIGJ5IHRoZSBjb21waWxlciwgb3IgaW1wbGljaXRseSBjcmVhdGVkXHJcbiAgICAgICAgICAgIC8vIGZyb20gYXJyYXlzLlxyXG4gICAgICAgICAgICBtb3VudENoaWxkcmVuKG4yLmNoaWxkcmVuLCBjb250YWluZXIsIGZyYWdtZW50RW5kQW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgb3B0aW1pemVkKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGlmIChwYXRjaEZsYWcgPiAwICYmXHJcbiAgICAgICAgICAgICAgICBwYXRjaEZsYWcgJiA2NCAvKiBTVEFCTEVfRlJBR01FTlQgKi8gJiZcclxuICAgICAgICAgICAgICAgIGR5bmFtaWNDaGlsZHJlbikge1xyXG4gICAgICAgICAgICAgICAgLy8gYSBzdGFibGUgZnJhZ21lbnQgKHRlbXBsYXRlIHJvb3Qgb3IgPHRlbXBsYXRlIHYtZm9yPikgZG9lc24ndCBuZWVkIHRvXHJcbiAgICAgICAgICAgICAgICAvLyBwYXRjaCBjaGlsZHJlbiBvcmRlciwgYnV0IGl0IG1heSBjb250YWluIGR5bmFtaWNDaGlsZHJlbi5cclxuICAgICAgICAgICAgICAgIHBhdGNoQmxvY2tDaGlsZHJlbihuMS5keW5hbWljQ2hpbGRyZW4sIGR5bmFtaWNDaGlsZHJlbiwgY29udGFpbmVyLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIHBhcmVudENvbXBvbmVudCAmJiBwYXJlbnRDb21wb25lbnQudHlwZS5fX2htcklkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHJhdmVyc2VTdGF0aWNDaGlsZHJlbihuMSwgbjIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoXHJcbiAgICAgICAgICAgICAgICAvLyAjMjA4MCBpZiB0aGUgc3RhYmxlIGZyYWdtZW50IGhhcyBhIGtleSwgaXQncyBhIDx0ZW1wbGF0ZSB2LWZvcj4gdGhhdCBtYXlcclxuICAgICAgICAgICAgICAgIC8vICBnZXQgbW92ZWQgYXJvdW5kLiBNYWtlIHN1cmUgYWxsIHJvb3QgbGV2ZWwgdm5vZGVzIGluaGVyaXQgZWwuXHJcbiAgICAgICAgICAgICAgICAvLyAjMjEzNCBvciBpZiBpdCdzIGEgY29tcG9uZW50IHJvb3QsIGl0IG1heSBhbHNvIGdldCBtb3ZlZCBhcm91bmRcclxuICAgICAgICAgICAgICAgIC8vIGFzIHRoZSBjb21wb25lbnQgaXMgYmVpbmcgbW92ZWQuXHJcbiAgICAgICAgICAgICAgICBuMi5rZXkgIT0gbnVsbCB8fFxyXG4gICAgICAgICAgICAgICAgICAgIChwYXJlbnRDb21wb25lbnQgJiYgbjIgPT09IHBhcmVudENvbXBvbmVudC5zdWJUcmVlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRyYXZlcnNlU3RhdGljQ2hpbGRyZW4objEsIG4yLCB0cnVlIC8qIHNoYWxsb3cgKi8pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8ga2V5ZWQgLyB1bmtleWVkLCBvciBtYW51YWwgZnJhZ21lbnRzLlxyXG4gICAgICAgICAgICAgICAgLy8gZm9yIGtleWVkICYgdW5rZXllZCwgc2luY2UgdGhleSBhcmUgY29tcGlsZXIgZ2VuZXJhdGVkIGZyb20gdi1mb3IsXHJcbiAgICAgICAgICAgICAgICAvLyBlYWNoIGNoaWxkIGlzIGd1YXJhbnRlZWQgdG8gYmUgYSBibG9jayBzbyB0aGUgZnJhZ21lbnQgd2lsbCBuZXZlclxyXG4gICAgICAgICAgICAgICAgLy8gaGF2ZSBkeW5hbWljQ2hpbGRyZW4uXHJcbiAgICAgICAgICAgICAgICBwYXRjaENoaWxkcmVuKG4xLCBuMiwgY29udGFpbmVyLCBmcmFnbWVudEVuZEFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIG9wdGltaXplZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgY29uc3QgcHJvY2Vzc0NvbXBvbmVudCA9IChuMSwgbjIsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgb3B0aW1pemVkKSA9PiB7XHJcbiAgICAgICAgaWYgKG4xID09IG51bGwpIHtcclxuICAgICAgICAgICAgaWYgKG4yLnNoYXBlRmxhZyAmIDUxMiAvKiBDT01QT05FTlRfS0VQVF9BTElWRSAqLykge1xyXG4gICAgICAgICAgICAgICAgcGFyZW50Q29tcG9uZW50LmN0eC5hY3RpdmF0ZShuMiwgY29udGFpbmVyLCBhbmNob3IsIGlzU1ZHLCBvcHRpbWl6ZWQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbW91bnRDb21wb25lbnQobjIsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgb3B0aW1pemVkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdXBkYXRlQ29tcG9uZW50KG4xLCBuMiwgb3B0aW1pemVkKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgY29uc3QgbW91bnRDb21wb25lbnQgPSAoaW5pdGlhbFZOb2RlLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIG9wdGltaXplZCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGluc3RhbmNlID0gKGluaXRpYWxWTm9kZS5jb21wb25lbnQgPSBjcmVhdGVDb21wb25lbnRJbnN0YW5jZShpbml0aWFsVk5vZGUsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UpKTtcclxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIGluc3RhbmNlLnR5cGUuX19obXJJZCkge1xyXG4gICAgICAgICAgICByZWdpc3RlckhNUihpbnN0YW5jZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgcHVzaFdhcm5pbmdDb250ZXh0KGluaXRpYWxWTm9kZSk7XHJcbiAgICAgICAgICAgIHN0YXJ0TWVhc3VyZShpbnN0YW5jZSwgYG1vdW50YCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGluamVjdCByZW5kZXJlciBpbnRlcm5hbHMgZm9yIGtlZXBBbGl2ZVxyXG4gICAgICAgIGlmIChpc0tlZXBBbGl2ZShpbml0aWFsVk5vZGUpKSB7XHJcbiAgICAgICAgICAgIGluc3RhbmNlLmN0eC5yZW5kZXJlciA9IGludGVybmFscztcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gcmVzb2x2ZSBwcm9wcyBhbmQgc2xvdHMgZm9yIHNldHVwIGNvbnRleHRcclxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgIHN0YXJ0TWVhc3VyZShpbnN0YW5jZSwgYGluaXRgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc2V0dXBDb21wb25lbnQoaW5zdGFuY2UpO1xyXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgZW5kTWVhc3VyZShpbnN0YW5jZSwgYGluaXRgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gc2V0dXAoKSBpcyBhc3luYy4gVGhpcyBjb21wb25lbnQgcmVsaWVzIG9uIGFzeW5jIGxvZ2ljIHRvIGJlIHJlc29sdmVkXHJcbiAgICAgICAgLy8gYmVmb3JlIHByb2NlZWRpbmdcclxuICAgICAgICBpZiAoIGluc3RhbmNlLmFzeW5jRGVwKSB7XHJcbiAgICAgICAgICAgIHBhcmVudFN1c3BlbnNlICYmIHBhcmVudFN1c3BlbnNlLnJlZ2lzdGVyRGVwKGluc3RhbmNlLCBzZXR1cFJlbmRlckVmZmVjdCk7XHJcbiAgICAgICAgICAgIC8vIEdpdmUgaXQgYSBwbGFjZWhvbGRlciBpZiB0aGlzIGlzIG5vdCBoeWRyYXRpb25cclxuICAgICAgICAgICAgLy8gVE9ETyBoYW5kbGUgc2VsZi1kZWZpbmVkIGZhbGxiYWNrXHJcbiAgICAgICAgICAgIGlmICghaW5pdGlhbFZOb2RlLmVsKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBwbGFjZWhvbGRlciA9IChpbnN0YW5jZS5zdWJUcmVlID0gY3JlYXRlVk5vZGUoQ29tbWVudCkpO1xyXG4gICAgICAgICAgICAgICAgcHJvY2Vzc0NvbW1lbnROb2RlKG51bGwsIHBsYWNlaG9sZGVyLCBjb250YWluZXIsIGFuY2hvcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzZXR1cFJlbmRlckVmZmVjdChpbnN0YW5jZSwgaW5pdGlhbFZOb2RlLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBvcHRpbWl6ZWQpO1xyXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgcG9wV2FybmluZ0NvbnRleHQoKTtcclxuICAgICAgICAgICAgZW5kTWVhc3VyZShpbnN0YW5jZSwgYG1vdW50YCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGNvbnN0IHVwZGF0ZUNvbXBvbmVudCA9IChuMSwgbjIsIG9wdGltaXplZCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGluc3RhbmNlID0gKG4yLmNvbXBvbmVudCA9IG4xLmNvbXBvbmVudCk7XHJcbiAgICAgICAgaWYgKHNob3VsZFVwZGF0ZUNvbXBvbmVudChuMSwgbjIsIG9wdGltaXplZCkpIHtcclxuICAgICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAgICAgaW5zdGFuY2UuYXN5bmNEZXAgJiZcclxuICAgICAgICAgICAgICAgICFpbnN0YW5jZS5hc3luY1Jlc29sdmVkKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBhc3luYyAmIHN0aWxsIHBlbmRpbmcgLSBqdXN0IHVwZGF0ZSBwcm9wcyBhbmQgc2xvdHNcclxuICAgICAgICAgICAgICAgIC8vIHNpbmNlIHRoZSBjb21wb25lbnQncyByZWFjdGl2ZSBlZmZlY3QgZm9yIHJlbmRlciBpc24ndCBzZXQtdXAgeWV0XHJcbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcHVzaFdhcm5pbmdDb250ZXh0KG4yKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHVwZGF0ZUNvbXBvbmVudFByZVJlbmRlcihpbnN0YW5jZSwgbjIsIG9wdGltaXplZCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcG9wV2FybmluZ0NvbnRleHQoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIG5vcm1hbCB1cGRhdGVcclxuICAgICAgICAgICAgICAgIGluc3RhbmNlLm5leHQgPSBuMjtcclxuICAgICAgICAgICAgICAgIC8vIGluIGNhc2UgdGhlIGNoaWxkIGNvbXBvbmVudCBpcyBhbHNvIHF1ZXVlZCwgcmVtb3ZlIGl0IHRvIGF2b2lkXHJcbiAgICAgICAgICAgICAgICAvLyBkb3VibGUgdXBkYXRpbmcgdGhlIHNhbWUgY2hpbGQgY29tcG9uZW50IGluIHRoZSBzYW1lIGZsdXNoLlxyXG4gICAgICAgICAgICAgICAgaW52YWxpZGF0ZUpvYihpbnN0YW5jZS51cGRhdGUpO1xyXG4gICAgICAgICAgICAgICAgLy8gaW5zdGFuY2UudXBkYXRlIGlzIHRoZSByZWFjdGl2ZSBlZmZlY3QgcnVubmVyLlxyXG4gICAgICAgICAgICAgICAgaW5zdGFuY2UudXBkYXRlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIG5vIHVwZGF0ZSBuZWVkZWQuIGp1c3QgY29weSBvdmVyIHByb3BlcnRpZXNcclxuICAgICAgICAgICAgbjIuY29tcG9uZW50ID0gbjEuY29tcG9uZW50O1xyXG4gICAgICAgICAgICBuMi5lbCA9IG4xLmVsO1xyXG4gICAgICAgICAgICBpbnN0YW5jZS52bm9kZSA9IG4yO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBjb25zdCBzZXR1cFJlbmRlckVmZmVjdCA9IChpbnN0YW5jZSwgaW5pdGlhbFZOb2RlLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBvcHRpbWl6ZWQpID0+IHtcclxuICAgICAgICAvLyBjcmVhdGUgcmVhY3RpdmUgZWZmZWN0IGZvciByZW5kZXJpbmdcclxuICAgICAgICBpbnN0YW5jZS51cGRhdGUgPSBlZmZlY3QoZnVuY3Rpb24gY29tcG9uZW50RWZmZWN0KCkge1xyXG4gICAgICAgICAgICBpZiAoIWluc3RhbmNlLmlzTW91bnRlZCkge1xyXG4gICAgICAgICAgICAgICAgbGV0IHZub2RlSG9vaztcclxuICAgICAgICAgICAgICAgIGNvbnN0IHsgZWwsIHByb3BzIH0gPSBpbml0aWFsVk5vZGU7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB7IGJtLCBtLCBwYXJlbnQgfSA9IGluc3RhbmNlO1xyXG4gICAgICAgICAgICAgICAgLy8gYmVmb3JlTW91bnQgaG9va1xyXG4gICAgICAgICAgICAgICAgaWYgKGJtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaW52b2tlQXJyYXlGbnMoYm0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gb25Wbm9kZUJlZm9yZU1vdW50XHJcbiAgICAgICAgICAgICAgICBpZiAoKHZub2RlSG9vayA9IHByb3BzICYmIHByb3BzLm9uVm5vZGVCZWZvcmVNb3VudCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpbnZva2VWTm9kZUhvb2sodm5vZGVIb29rLCBwYXJlbnQsIGluaXRpYWxWTm9kZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyByZW5kZXJcclxuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgICAgICBzdGFydE1lYXN1cmUoaW5zdGFuY2UsIGByZW5kZXJgKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IHN1YlRyZWUgPSAoaW5zdGFuY2Uuc3ViVHJlZSA9IHJlbmRlckNvbXBvbmVudFJvb3QoaW5zdGFuY2UpKTtcclxuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgICAgICBlbmRNZWFzdXJlKGluc3RhbmNlLCBgcmVuZGVyYCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoZWwgJiYgaHlkcmF0ZU5vZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0TWVhc3VyZShpbnN0YW5jZSwgYGh5ZHJhdGVgKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdm5vZGUgaGFzIGFkb3B0ZWQgaG9zdCBub2RlIC0gcGVyZm9ybSBoeWRyYXRpb24gaW5zdGVhZCBvZiBtb3VudC5cclxuICAgICAgICAgICAgICAgICAgICBoeWRyYXRlTm9kZShpbml0aWFsVk5vZGUuZWwsIHN1YlRyZWUsIGluc3RhbmNlLCBwYXJlbnRTdXNwZW5zZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmRNZWFzdXJlKGluc3RhbmNlLCBgaHlkcmF0ZWApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRNZWFzdXJlKGluc3RhbmNlLCBgcGF0Y2hgKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcGF0Y2gobnVsbCwgc3ViVHJlZSwgY29udGFpbmVyLCBhbmNob3IsIGluc3RhbmNlLCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZW5kTWVhc3VyZShpbnN0YW5jZSwgYHBhdGNoYCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGluaXRpYWxWTm9kZS5lbCA9IHN1YlRyZWUuZWw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBtb3VudGVkIGhvb2tcclxuICAgICAgICAgICAgICAgIGlmIChtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcXVldWVQb3N0UmVuZGVyRWZmZWN0KG0sIHBhcmVudFN1c3BlbnNlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIG9uVm5vZGVNb3VudGVkXHJcbiAgICAgICAgICAgICAgICBpZiAoKHZub2RlSG9vayA9IHByb3BzICYmIHByb3BzLm9uVm5vZGVNb3VudGVkKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHF1ZXVlUG9zdFJlbmRlckVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGludm9rZVZOb2RlSG9vayh2bm9kZUhvb2ssIHBhcmVudCwgaW5pdGlhbFZOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICB9LCBwYXJlbnRTdXNwZW5zZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBhY3RpdmF0ZWQgaG9vayBmb3Iga2VlcC1hbGl2ZSByb290cy5cclxuICAgICAgICAgICAgICAgIC8vICMxNzQyIGFjdGl2YXRlZCBob29rIG11c3QgYmUgYWNjZXNzZWQgYWZ0ZXIgZmlyc3QgcmVuZGVyXHJcbiAgICAgICAgICAgICAgICAvLyBzaW5jZSB0aGUgaG9vayBtYXkgYmUgaW5qZWN0ZWQgYnkgYSBjaGlsZCBrZWVwLWFsaXZlXHJcbiAgICAgICAgICAgICAgICBjb25zdCB7IGEgfSA9IGluc3RhbmNlO1xyXG4gICAgICAgICAgICAgICAgaWYgKGEgJiZcclxuICAgICAgICAgICAgICAgICAgICBpbml0aWFsVk5vZGUuc2hhcGVGbGFnICYgMjU2IC8qIENPTVBPTkVOVF9TSE9VTERfS0VFUF9BTElWRSAqLykge1xyXG4gICAgICAgICAgICAgICAgICAgIHF1ZXVlUG9zdFJlbmRlckVmZmVjdChhLCBwYXJlbnRTdXNwZW5zZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpbnN0YW5jZS5pc01vdW50ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gdXBkYXRlQ29tcG9uZW50XHJcbiAgICAgICAgICAgICAgICAvLyBUaGlzIGlzIHRyaWdnZXJlZCBieSBtdXRhdGlvbiBvZiBjb21wb25lbnQncyBvd24gc3RhdGUgKG5leHQ6IG51bGwpXHJcbiAgICAgICAgICAgICAgICAvLyBPUiBwYXJlbnQgY2FsbGluZyBwcm9jZXNzQ29tcG9uZW50IChuZXh0OiBWTm9kZSlcclxuICAgICAgICAgICAgICAgIGxldCB7IG5leHQsIGJ1LCB1LCBwYXJlbnQsIHZub2RlIH0gPSBpbnN0YW5jZTtcclxuICAgICAgICAgICAgICAgIGxldCBvcmlnaW5OZXh0ID0gbmV4dDtcclxuICAgICAgICAgICAgICAgIGxldCB2bm9kZUhvb2s7XHJcbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcHVzaFdhcm5pbmdDb250ZXh0KG5leHQgfHwgaW5zdGFuY2Uudm5vZGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKG5leHQpIHtcclxuICAgICAgICAgICAgICAgICAgICBuZXh0LmVsID0gdm5vZGUuZWw7XHJcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlQ29tcG9uZW50UHJlUmVuZGVyKGluc3RhbmNlLCBuZXh0LCBvcHRpbWl6ZWQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV4dCA9IHZub2RlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gYmVmb3JlVXBkYXRlIGhvb2tcclxuICAgICAgICAgICAgICAgIGlmIChidSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGludm9rZUFycmF5Rm5zKGJ1KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIG9uVm5vZGVCZWZvcmVVcGRhdGVcclxuICAgICAgICAgICAgICAgIGlmICgodm5vZGVIb29rID0gbmV4dC5wcm9wcyAmJiBuZXh0LnByb3BzLm9uVm5vZGVCZWZvcmVVcGRhdGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaW52b2tlVk5vZGVIb29rKHZub2RlSG9vaywgcGFyZW50LCBuZXh0LCB2bm9kZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyByZW5kZXJcclxuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgICAgICBzdGFydE1lYXN1cmUoaW5zdGFuY2UsIGByZW5kZXJgKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IG5leHRUcmVlID0gcmVuZGVyQ29tcG9uZW50Um9vdChpbnN0YW5jZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZW5kTWVhc3VyZShpbnN0YW5jZSwgYHJlbmRlcmApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgcHJldlRyZWUgPSBpbnN0YW5jZS5zdWJUcmVlO1xyXG4gICAgICAgICAgICAgICAgaW5zdGFuY2Uuc3ViVHJlZSA9IG5leHRUcmVlO1xyXG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0TWVhc3VyZShpbnN0YW5jZSwgYHBhdGNoYCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBwYXRjaChwcmV2VHJlZSwgbmV4dFRyZWUsIFxyXG4gICAgICAgICAgICAgICAgLy8gcGFyZW50IG1heSBoYXZlIGNoYW5nZWQgaWYgaXQncyBpbiBhIHRlbGVwb3J0XHJcbiAgICAgICAgICAgICAgICBob3N0UGFyZW50Tm9kZShwcmV2VHJlZS5lbCksIFxyXG4gICAgICAgICAgICAgICAgLy8gYW5jaG9yIG1heSBoYXZlIGNoYW5nZWQgaWYgaXQncyBpbiBhIGZyYWdtZW50XHJcbiAgICAgICAgICAgICAgICBnZXROZXh0SG9zdE5vZGUocHJldlRyZWUpLCBpbnN0YW5jZSwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHKTtcclxuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgICAgICBlbmRNZWFzdXJlKGluc3RhbmNlLCBgcGF0Y2hgKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIG5leHQuZWwgPSBuZXh0VHJlZS5lbDtcclxuICAgICAgICAgICAgICAgIGlmIChvcmlnaW5OZXh0ID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gc2VsZi10cmlnZ2VyZWQgdXBkYXRlLiBJbiBjYXNlIG9mIEhPQywgdXBkYXRlIHBhcmVudCBjb21wb25lbnRcclxuICAgICAgICAgICAgICAgICAgICAvLyB2bm9kZSBlbC4gSE9DIGlzIGluZGljYXRlZCBieSBwYXJlbnQgaW5zdGFuY2UncyBzdWJUcmVlIHBvaW50aW5nXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdG8gY2hpbGQgY29tcG9uZW50J3Mgdm5vZGVcclxuICAgICAgICAgICAgICAgICAgICB1cGRhdGVIT0NIb3N0RWwoaW5zdGFuY2UsIG5leHRUcmVlLmVsKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIHVwZGF0ZWQgaG9va1xyXG4gICAgICAgICAgICAgICAgaWYgKHUpIHtcclxuICAgICAgICAgICAgICAgICAgICBxdWV1ZVBvc3RSZW5kZXJFZmZlY3QodSwgcGFyZW50U3VzcGVuc2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gb25Wbm9kZVVwZGF0ZWRcclxuICAgICAgICAgICAgICAgIGlmICgodm5vZGVIb29rID0gbmV4dC5wcm9wcyAmJiBuZXh0LnByb3BzLm9uVm5vZGVVcGRhdGVkKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHF1ZXVlUG9zdFJlbmRlckVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGludm9rZVZOb2RlSG9vayh2bm9kZUhvb2ssIHBhcmVudCwgbmV4dCwgdm5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIHBhcmVudFN1c3BlbnNlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgfHwgX19WVUVfUFJPRF9ERVZUT09MU19fKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGV2dG9vbHNDb21wb25lbnRVcGRhdGVkKGluc3RhbmNlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgICAgICBwb3BXYXJuaW5nQ29udGV4dCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSwgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpID8gY3JlYXRlRGV2RWZmZWN0T3B0aW9ucyhpbnN0YW5jZSkgOiBwcm9kRWZmZWN0T3B0aW9ucyk7XHJcbiAgICB9O1xyXG4gICAgY29uc3QgdXBkYXRlQ29tcG9uZW50UHJlUmVuZGVyID0gKGluc3RhbmNlLCBuZXh0Vk5vZGUsIG9wdGltaXplZCkgPT4ge1xyXG4gICAgICAgIG5leHRWTm9kZS5jb21wb25lbnQgPSBpbnN0YW5jZTtcclxuICAgICAgICBjb25zdCBwcmV2UHJvcHMgPSBpbnN0YW5jZS52bm9kZS5wcm9wcztcclxuICAgICAgICBpbnN0YW5jZS52bm9kZSA9IG5leHRWTm9kZTtcclxuICAgICAgICBpbnN0YW5jZS5uZXh0ID0gbnVsbDtcclxuICAgICAgICB1cGRhdGVQcm9wcyhpbnN0YW5jZSwgbmV4dFZOb2RlLnByb3BzLCBwcmV2UHJvcHMsIG9wdGltaXplZCk7XHJcbiAgICAgICAgdXBkYXRlU2xvdHMoaW5zdGFuY2UsIG5leHRWTm9kZS5jaGlsZHJlbik7XHJcbiAgICAgICAgLy8gcHJvcHMgdXBkYXRlIG1heSBoYXZlIHRyaWdnZXJlZCBwcmUtZmx1c2ggd2F0Y2hlcnMuXHJcbiAgICAgICAgLy8gZmx1c2ggdGhlbSBiZWZvcmUgdGhlIHJlbmRlciB1cGRhdGUuXHJcbiAgICAgICAgZmx1c2hQcmVGbHVzaENicyh1bmRlZmluZWQsIGluc3RhbmNlLnVwZGF0ZSk7XHJcbiAgICB9O1xyXG4gICAgY29uc3QgcGF0Y2hDaGlsZHJlbiA9IChuMSwgbjIsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgb3B0aW1pemVkID0gZmFsc2UpID0+IHtcclxuICAgICAgICBjb25zdCBjMSA9IG4xICYmIG4xLmNoaWxkcmVuO1xyXG4gICAgICAgIGNvbnN0IHByZXZTaGFwZUZsYWcgPSBuMSA/IG4xLnNoYXBlRmxhZyA6IDA7XHJcbiAgICAgICAgY29uc3QgYzIgPSBuMi5jaGlsZHJlbjtcclxuICAgICAgICBjb25zdCB7IHBhdGNoRmxhZywgc2hhcGVGbGFnIH0gPSBuMjtcclxuICAgICAgICAvLyBmYXN0IHBhdGhcclxuICAgICAgICBpZiAocGF0Y2hGbGFnID4gMCkge1xyXG4gICAgICAgICAgICBpZiAocGF0Y2hGbGFnICYgMTI4IC8qIEtFWUVEX0ZSQUdNRU5UICovKSB7XHJcbiAgICAgICAgICAgICAgICAvLyB0aGlzIGNvdWxkIGJlIGVpdGhlciBmdWxseS1rZXllZCBvciBtaXhlZCAoc29tZSBrZXllZCBzb21lIG5vdClcclxuICAgICAgICAgICAgICAgIC8vIHByZXNlbmNlIG9mIHBhdGNoRmxhZyBtZWFucyBjaGlsZHJlbiBhcmUgZ3VhcmFudGVlZCB0byBiZSBhcnJheXNcclxuICAgICAgICAgICAgICAgIHBhdGNoS2V5ZWRDaGlsZHJlbihjMSwgYzIsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgb3B0aW1pemVkKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChwYXRjaEZsYWcgJiAyNTYgLyogVU5LRVlFRF9GUkFHTUVOVCAqLykge1xyXG4gICAgICAgICAgICAgICAgLy8gdW5rZXllZFxyXG4gICAgICAgICAgICAgICAgcGF0Y2hVbmtleWVkQ2hpbGRyZW4oYzEsIGMyLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIG9wdGltaXplZCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gY2hpbGRyZW4gaGFzIDMgcG9zc2liaWxpdGllczogdGV4dCwgYXJyYXkgb3Igbm8gY2hpbGRyZW4uXHJcbiAgICAgICAgaWYgKHNoYXBlRmxhZyAmIDggLyogVEVYVF9DSElMRFJFTiAqLykge1xyXG4gICAgICAgICAgICAvLyB0ZXh0IGNoaWxkcmVuIGZhc3QgcGF0aFxyXG4gICAgICAgICAgICBpZiAocHJldlNoYXBlRmxhZyAmIDE2IC8qIEFSUkFZX0NISUxEUkVOICovKSB7XHJcbiAgICAgICAgICAgICAgICB1bm1vdW50Q2hpbGRyZW4oYzEsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChjMiAhPT0gYzEpIHtcclxuICAgICAgICAgICAgICAgIGhvc3RTZXRFbGVtZW50VGV4dChjb250YWluZXIsIGMyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKHByZXZTaGFwZUZsYWcgJiAxNiAvKiBBUlJBWV9DSElMRFJFTiAqLykge1xyXG4gICAgICAgICAgICAgICAgLy8gcHJldiBjaGlsZHJlbiB3YXMgYXJyYXlcclxuICAgICAgICAgICAgICAgIGlmIChzaGFwZUZsYWcgJiAxNiAvKiBBUlJBWV9DSElMRFJFTiAqLykge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHR3byBhcnJheXMsIGNhbm5vdCBhc3N1bWUgYW55dGhpbmcsIGRvIGZ1bGwgZGlmZlxyXG4gICAgICAgICAgICAgICAgICAgIHBhdGNoS2V5ZWRDaGlsZHJlbihjMSwgYzIsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgb3B0aW1pemVkKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIG5vIG5ldyBjaGlsZHJlbiwganVzdCB1bm1vdW50IG9sZFxyXG4gICAgICAgICAgICAgICAgICAgIHVubW91bnRDaGlsZHJlbihjMSwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBwcmV2IGNoaWxkcmVuIHdhcyB0ZXh0IE9SIG51bGxcclxuICAgICAgICAgICAgICAgIC8vIG5ldyBjaGlsZHJlbiBpcyBhcnJheSBPUiBudWxsXHJcbiAgICAgICAgICAgICAgICBpZiAocHJldlNoYXBlRmxhZyAmIDggLyogVEVYVF9DSElMRFJFTiAqLykge1xyXG4gICAgICAgICAgICAgICAgICAgIGhvc3RTZXRFbGVtZW50VGV4dChjb250YWluZXIsICcnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIG1vdW50IG5ldyBpZiBhcnJheVxyXG4gICAgICAgICAgICAgICAgaWYgKHNoYXBlRmxhZyAmIDE2IC8qIEFSUkFZX0NISUxEUkVOICovKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbW91bnRDaGlsZHJlbihjMiwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBvcHRpbWl6ZWQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGNvbnN0IHBhdGNoVW5rZXllZENoaWxkcmVuID0gKGMxLCBjMiwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBvcHRpbWl6ZWQpID0+IHtcclxuICAgICAgICBjMSA9IGMxIHx8IEVNUFRZX0FSUjtcclxuICAgICAgICBjMiA9IGMyIHx8IEVNUFRZX0FSUjtcclxuICAgICAgICBjb25zdCBvbGRMZW5ndGggPSBjMS5sZW5ndGg7XHJcbiAgICAgICAgY29uc3QgbmV3TGVuZ3RoID0gYzIubGVuZ3RoO1xyXG4gICAgICAgIGNvbnN0IGNvbW1vbkxlbmd0aCA9IE1hdGgubWluKG9sZExlbmd0aCwgbmV3TGVuZ3RoKTtcclxuICAgICAgICBsZXQgaTtcclxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY29tbW9uTGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgY29uc3QgbmV4dENoaWxkID0gKGMyW2ldID0gb3B0aW1pemVkXHJcbiAgICAgICAgICAgICAgICA/IGNsb25lSWZNb3VudGVkKGMyW2ldKVxyXG4gICAgICAgICAgICAgICAgOiBub3JtYWxpemVWTm9kZShjMltpXSkpO1xyXG4gICAgICAgICAgICBwYXRjaChjMVtpXSwgbmV4dENoaWxkLCBjb250YWluZXIsIG51bGwsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBvcHRpbWl6ZWQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAob2xkTGVuZ3RoID4gbmV3TGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIC8vIHJlbW92ZSBvbGRcclxuICAgICAgICAgICAgdW5tb3VudENoaWxkcmVuKGMxLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCB0cnVlLCBmYWxzZSwgY29tbW9uTGVuZ3RoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIG1vdW50IG5ld1xyXG4gICAgICAgICAgICBtb3VudENoaWxkcmVuKGMyLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIG9wdGltaXplZCwgY29tbW9uTGVuZ3RoKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLy8gY2FuIGJlIGFsbC1rZXllZCBvciBtaXhlZFxyXG4gICAgY29uc3QgcGF0Y2hLZXllZENoaWxkcmVuID0gKGMxLCBjMiwgY29udGFpbmVyLCBwYXJlbnRBbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBvcHRpbWl6ZWQpID0+IHtcclxuICAgICAgICBsZXQgaSA9IDA7XHJcbiAgICAgICAgY29uc3QgbDIgPSBjMi5sZW5ndGg7XHJcbiAgICAgICAgbGV0IGUxID0gYzEubGVuZ3RoIC0gMTsgLy8gcHJldiBlbmRpbmcgaW5kZXhcclxuICAgICAgICBsZXQgZTIgPSBsMiAtIDE7IC8vIG5leHQgZW5kaW5nIGluZGV4XHJcbiAgICAgICAgLy8gMS4gc3luYyBmcm9tIHN0YXJ0XHJcbiAgICAgICAgLy8gKGEgYikgY1xyXG4gICAgICAgIC8vIChhIGIpIGQgZVxyXG4gICAgICAgIHdoaWxlIChpIDw9IGUxICYmIGkgPD0gZTIpIHtcclxuICAgICAgICAgICAgY29uc3QgbjEgPSBjMVtpXTtcclxuICAgICAgICAgICAgY29uc3QgbjIgPSAoYzJbaV0gPSBvcHRpbWl6ZWRcclxuICAgICAgICAgICAgICAgID8gY2xvbmVJZk1vdW50ZWQoYzJbaV0pXHJcbiAgICAgICAgICAgICAgICA6IG5vcm1hbGl6ZVZOb2RlKGMyW2ldKSk7XHJcbiAgICAgICAgICAgIGlmIChpc1NhbWVWTm9kZVR5cGUobjEsIG4yKSkge1xyXG4gICAgICAgICAgICAgICAgcGF0Y2gobjEsIG4yLCBjb250YWluZXIsIG51bGwsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBvcHRpbWl6ZWQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaSsrO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyAyLiBzeW5jIGZyb20gZW5kXHJcbiAgICAgICAgLy8gYSAoYiBjKVxyXG4gICAgICAgIC8vIGQgZSAoYiBjKVxyXG4gICAgICAgIHdoaWxlIChpIDw9IGUxICYmIGkgPD0gZTIpIHtcclxuICAgICAgICAgICAgY29uc3QgbjEgPSBjMVtlMV07XHJcbiAgICAgICAgICAgIGNvbnN0IG4yID0gKGMyW2UyXSA9IG9wdGltaXplZFxyXG4gICAgICAgICAgICAgICAgPyBjbG9uZUlmTW91bnRlZChjMltlMl0pXHJcbiAgICAgICAgICAgICAgICA6IG5vcm1hbGl6ZVZOb2RlKGMyW2UyXSkpO1xyXG4gICAgICAgICAgICBpZiAoaXNTYW1lVk5vZGVUeXBlKG4xLCBuMikpIHtcclxuICAgICAgICAgICAgICAgIHBhdGNoKG4xLCBuMiwgY29udGFpbmVyLCBudWxsLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgb3B0aW1pemVkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGUxLS07XHJcbiAgICAgICAgICAgIGUyLS07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIDMuIGNvbW1vbiBzZXF1ZW5jZSArIG1vdW50XHJcbiAgICAgICAgLy8gKGEgYilcclxuICAgICAgICAvLyAoYSBiKSBjXHJcbiAgICAgICAgLy8gaSA9IDIsIGUxID0gMSwgZTIgPSAyXHJcbiAgICAgICAgLy8gKGEgYilcclxuICAgICAgICAvLyBjIChhIGIpXHJcbiAgICAgICAgLy8gaSA9IDAsIGUxID0gLTEsIGUyID0gMFxyXG4gICAgICAgIGlmIChpID4gZTEpIHtcclxuICAgICAgICAgICAgaWYgKGkgPD0gZTIpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG5leHRQb3MgPSBlMiArIDE7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBhbmNob3IgPSBuZXh0UG9zIDwgbDIgPyBjMltuZXh0UG9zXS5lbCA6IHBhcmVudEFuY2hvcjtcclxuICAgICAgICAgICAgICAgIHdoaWxlIChpIDw9IGUyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGF0Y2gobnVsbCwgKGMyW2ldID0gb3B0aW1pemVkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgID8gY2xvbmVJZk1vdW50ZWQoYzJbaV0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDogbm9ybWFsaXplVk5vZGUoYzJbaV0pKSwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHKTtcclxuICAgICAgICAgICAgICAgICAgICBpKys7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gNC4gY29tbW9uIHNlcXVlbmNlICsgdW5tb3VudFxyXG4gICAgICAgIC8vIChhIGIpIGNcclxuICAgICAgICAvLyAoYSBiKVxyXG4gICAgICAgIC8vIGkgPSAyLCBlMSA9IDIsIGUyID0gMVxyXG4gICAgICAgIC8vIGEgKGIgYylcclxuICAgICAgICAvLyAoYiBjKVxyXG4gICAgICAgIC8vIGkgPSAwLCBlMSA9IDAsIGUyID0gLTFcclxuICAgICAgICBlbHNlIGlmIChpID4gZTIpIHtcclxuICAgICAgICAgICAgd2hpbGUgKGkgPD0gZTEpIHtcclxuICAgICAgICAgICAgICAgIHVubW91bnQoYzFbaV0sIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgaSsrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIDUuIHVua25vd24gc2VxdWVuY2VcclxuICAgICAgICAvLyBbaSAuLi4gZTEgKyAxXTogYSBiIFtjIGQgZV0gZiBnXHJcbiAgICAgICAgLy8gW2kgLi4uIGUyICsgMV06IGEgYiBbZSBkIGMgaF0gZiBnXHJcbiAgICAgICAgLy8gaSA9IDIsIGUxID0gNCwgZTIgPSA1XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHMxID0gaTsgLy8gcHJldiBzdGFydGluZyBpbmRleFxyXG4gICAgICAgICAgICBjb25zdCBzMiA9IGk7IC8vIG5leHQgc3RhcnRpbmcgaW5kZXhcclxuICAgICAgICAgICAgLy8gNS4xIGJ1aWxkIGtleTppbmRleCBtYXAgZm9yIG5ld0NoaWxkcmVuXHJcbiAgICAgICAgICAgIGNvbnN0IGtleVRvTmV3SW5kZXhNYXAgPSBuZXcgTWFwKCk7XHJcbiAgICAgICAgICAgIGZvciAoaSA9IHMyOyBpIDw9IGUyOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG5leHRDaGlsZCA9IChjMltpXSA9IG9wdGltaXplZFxyXG4gICAgICAgICAgICAgICAgICAgID8gY2xvbmVJZk1vdW50ZWQoYzJbaV0pXHJcbiAgICAgICAgICAgICAgICAgICAgOiBub3JtYWxpemVWTm9kZShjMltpXSkpO1xyXG4gICAgICAgICAgICAgICAgaWYgKG5leHRDaGlsZC5rZXkgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYga2V5VG9OZXdJbmRleE1hcC5oYXMobmV4dENoaWxkLmtleSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2FybihgRHVwbGljYXRlIGtleXMgZm91bmQgZHVyaW5nIHVwZGF0ZTpgLCBKU09OLnN0cmluZ2lmeShuZXh0Q2hpbGQua2V5KSwgYE1ha2Ugc3VyZSBrZXlzIGFyZSB1bmlxdWUuYCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGtleVRvTmV3SW5kZXhNYXAuc2V0KG5leHRDaGlsZC5rZXksIGkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIDUuMiBsb29wIHRocm91Z2ggb2xkIGNoaWxkcmVuIGxlZnQgdG8gYmUgcGF0Y2hlZCBhbmQgdHJ5IHRvIHBhdGNoXHJcbiAgICAgICAgICAgIC8vIG1hdGNoaW5nIG5vZGVzICYgcmVtb3ZlIG5vZGVzIHRoYXQgYXJlIG5vIGxvbmdlciBwcmVzZW50XHJcbiAgICAgICAgICAgIGxldCBqO1xyXG4gICAgICAgICAgICBsZXQgcGF0Y2hlZCA9IDA7XHJcbiAgICAgICAgICAgIGNvbnN0IHRvQmVQYXRjaGVkID0gZTIgLSBzMiArIDE7XHJcbiAgICAgICAgICAgIGxldCBtb3ZlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAvLyB1c2VkIHRvIHRyYWNrIHdoZXRoZXIgYW55IG5vZGUgaGFzIG1vdmVkXHJcbiAgICAgICAgICAgIGxldCBtYXhOZXdJbmRleFNvRmFyID0gMDtcclxuICAgICAgICAgICAgLy8gd29ya3MgYXMgTWFwPG5ld0luZGV4LCBvbGRJbmRleD5cclxuICAgICAgICAgICAgLy8gTm90ZSB0aGF0IG9sZEluZGV4IGlzIG9mZnNldCBieSArMVxyXG4gICAgICAgICAgICAvLyBhbmQgb2xkSW5kZXggPSAwIGlzIGEgc3BlY2lhbCB2YWx1ZSBpbmRpY2F0aW5nIHRoZSBuZXcgbm9kZSBoYXNcclxuICAgICAgICAgICAgLy8gbm8gY29ycmVzcG9uZGluZyBvbGQgbm9kZS5cclxuICAgICAgICAgICAgLy8gdXNlZCBmb3IgZGV0ZXJtaW5pbmcgbG9uZ2VzdCBzdGFibGUgc3Vic2VxdWVuY2VcclxuICAgICAgICAgICAgY29uc3QgbmV3SW5kZXhUb09sZEluZGV4TWFwID0gbmV3IEFycmF5KHRvQmVQYXRjaGVkKTtcclxuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHRvQmVQYXRjaGVkOyBpKyspXHJcbiAgICAgICAgICAgICAgICBuZXdJbmRleFRvT2xkSW5kZXhNYXBbaV0gPSAwO1xyXG4gICAgICAgICAgICBmb3IgKGkgPSBzMTsgaSA8PSBlMTsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBwcmV2Q2hpbGQgPSBjMVtpXTtcclxuICAgICAgICAgICAgICAgIGlmIChwYXRjaGVkID49IHRvQmVQYXRjaGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gYWxsIG5ldyBjaGlsZHJlbiBoYXZlIGJlZW4gcGF0Y2hlZCBzbyB0aGlzIGNhbiBvbmx5IGJlIGEgcmVtb3ZhbFxyXG4gICAgICAgICAgICAgICAgICAgIHVubW91bnQocHJldkNoaWxkLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGxldCBuZXdJbmRleDtcclxuICAgICAgICAgICAgICAgIGlmIChwcmV2Q2hpbGQua2V5ICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBuZXdJbmRleCA9IGtleVRvTmV3SW5kZXhNYXAuZ2V0KHByZXZDaGlsZC5rZXkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8ga2V5LWxlc3Mgbm9kZSwgdHJ5IHRvIGxvY2F0ZSBhIGtleS1sZXNzIG5vZGUgb2YgdGhlIHNhbWUgdHlwZVxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoaiA9IHMyOyBqIDw9IGUyOyBqKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5ld0luZGV4VG9PbGRJbmRleE1hcFtqIC0gczJdID09PSAwICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1NhbWVWTm9kZVR5cGUocHJldkNoaWxkLCBjMltqXSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0luZGV4ID0gajtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKG5ld0luZGV4ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICB1bm1vdW50KHByZXZDaGlsZCwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBuZXdJbmRleFRvT2xkSW5kZXhNYXBbbmV3SW5kZXggLSBzMl0gPSBpICsgMTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobmV3SW5kZXggPj0gbWF4TmV3SW5kZXhTb0Zhcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXhOZXdJbmRleFNvRmFyID0gbmV3SW5kZXg7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb3ZlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHBhdGNoKHByZXZDaGlsZCwgYzJbbmV3SW5kZXhdLCBjb250YWluZXIsIG51bGwsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBvcHRpbWl6ZWQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHBhdGNoZWQrKztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyA1LjMgbW92ZSBhbmQgbW91bnRcclxuICAgICAgICAgICAgLy8gZ2VuZXJhdGUgbG9uZ2VzdCBzdGFibGUgc3Vic2VxdWVuY2Ugb25seSB3aGVuIG5vZGVzIGhhdmUgbW92ZWRcclxuICAgICAgICAgICAgY29uc3QgaW5jcmVhc2luZ05ld0luZGV4U2VxdWVuY2UgPSBtb3ZlZFxyXG4gICAgICAgICAgICAgICAgPyBnZXRTZXF1ZW5jZShuZXdJbmRleFRvT2xkSW5kZXhNYXApXHJcbiAgICAgICAgICAgICAgICA6IEVNUFRZX0FSUjtcclxuICAgICAgICAgICAgaiA9IGluY3JlYXNpbmdOZXdJbmRleFNlcXVlbmNlLmxlbmd0aCAtIDE7XHJcbiAgICAgICAgICAgIC8vIGxvb3BpbmcgYmFja3dhcmRzIHNvIHRoYXQgd2UgY2FuIHVzZSBsYXN0IHBhdGNoZWQgbm9kZSBhcyBhbmNob3JcclxuICAgICAgICAgICAgZm9yIChpID0gdG9CZVBhdGNoZWQgLSAxOyBpID49IDA7IGktLSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbmV4dEluZGV4ID0gczIgKyBpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbmV4dENoaWxkID0gYzJbbmV4dEluZGV4XTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGFuY2hvciA9IG5leHRJbmRleCArIDEgPCBsMiA/IGMyW25leHRJbmRleCArIDFdLmVsIDogcGFyZW50QW5jaG9yO1xyXG4gICAgICAgICAgICAgICAgaWYgKG5ld0luZGV4VG9PbGRJbmRleE1hcFtpXSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIG1vdW50IG5ld1xyXG4gICAgICAgICAgICAgICAgICAgIHBhdGNoKG51bGwsIG5leHRDaGlsZCwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKG1vdmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gbW92ZSBpZjpcclxuICAgICAgICAgICAgICAgICAgICAvLyBUaGVyZSBpcyBubyBzdGFibGUgc3Vic2VxdWVuY2UgKGUuZy4gYSByZXZlcnNlKVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIE9SIGN1cnJlbnQgbm9kZSBpcyBub3QgYW1vbmcgdGhlIHN0YWJsZSBzZXF1ZW5jZVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChqIDwgMCB8fCBpICE9PSBpbmNyZWFzaW5nTmV3SW5kZXhTZXF1ZW5jZVtqXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb3ZlKG5leHRDaGlsZCwgY29udGFpbmVyLCBhbmNob3IsIDIgLyogUkVPUkRFUiAqLyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBqLS07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGNvbnN0IG1vdmUgPSAodm5vZGUsIGNvbnRhaW5lciwgYW5jaG9yLCBtb3ZlVHlwZSwgcGFyZW50U3VzcGVuc2UgPSBudWxsKSA9PiB7XHJcbiAgICAgICAgY29uc3QgeyBlbCwgdHlwZSwgdHJhbnNpdGlvbiwgY2hpbGRyZW4sIHNoYXBlRmxhZyB9ID0gdm5vZGU7XHJcbiAgICAgICAgaWYgKHNoYXBlRmxhZyAmIDYgLyogQ09NUE9ORU5UICovKSB7XHJcbiAgICAgICAgICAgIG1vdmUodm5vZGUuY29tcG9uZW50LnN1YlRyZWUsIGNvbnRhaW5lciwgYW5jaG9yLCBtb3ZlVHlwZSk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCBzaGFwZUZsYWcgJiAxMjggLyogU1VTUEVOU0UgKi8pIHtcclxuICAgICAgICAgICAgdm5vZGUuc3VzcGVuc2UubW92ZShjb250YWluZXIsIGFuY2hvciwgbW92ZVR5cGUpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChzaGFwZUZsYWcgJiA2NCAvKiBURUxFUE9SVCAqLykge1xyXG4gICAgICAgICAgICB0eXBlLm1vdmUodm5vZGUsIGNvbnRhaW5lciwgYW5jaG9yLCBpbnRlcm5hbHMpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0eXBlID09PSBGcmFnbWVudCkge1xyXG4gICAgICAgICAgICBob3N0SW5zZXJ0KGVsLCBjb250YWluZXIsIGFuY2hvcik7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIG1vdmUoY2hpbGRyZW5baV0sIGNvbnRhaW5lciwgYW5jaG9yLCBtb3ZlVHlwZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaG9zdEluc2VydCh2bm9kZS5hbmNob3IsIGNvbnRhaW5lciwgYW5jaG9yKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodHlwZSA9PT0gU3RhdGljKSB7XHJcbiAgICAgICAgICAgIG1vdmVTdGF0aWNOb2RlKHZub2RlLCBjb250YWluZXIsIGFuY2hvcik7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gc2luZ2xlIG5vZGVzXHJcbiAgICAgICAgY29uc3QgbmVlZFRyYW5zaXRpb24gPSBtb3ZlVHlwZSAhPT0gMiAvKiBSRU9SREVSICovICYmXHJcbiAgICAgICAgICAgIHNoYXBlRmxhZyAmIDEgLyogRUxFTUVOVCAqLyAmJlxyXG4gICAgICAgICAgICB0cmFuc2l0aW9uO1xyXG4gICAgICAgIGlmIChuZWVkVHJhbnNpdGlvbikge1xyXG4gICAgICAgICAgICBpZiAobW92ZVR5cGUgPT09IDAgLyogRU5URVIgKi8pIHtcclxuICAgICAgICAgICAgICAgIHRyYW5zaXRpb24uYmVmb3JlRW50ZXIoZWwpO1xyXG4gICAgICAgICAgICAgICAgaG9zdEluc2VydChlbCwgY29udGFpbmVyLCBhbmNob3IpO1xyXG4gICAgICAgICAgICAgICAgcXVldWVQb3N0UmVuZGVyRWZmZWN0KCgpID0+IHRyYW5zaXRpb24uZW50ZXIoZWwpLCBwYXJlbnRTdXNwZW5zZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB7IGxlYXZlLCBkZWxheUxlYXZlLCBhZnRlckxlYXZlIH0gPSB0cmFuc2l0aW9uO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcmVtb3ZlID0gKCkgPT4gaG9zdEluc2VydChlbCwgY29udGFpbmVyLCBhbmNob3IpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcGVyZm9ybUxlYXZlID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGxlYXZlKGVsLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhZnRlckxlYXZlICYmIGFmdGVyTGVhdmUoKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICBpZiAoZGVsYXlMZWF2ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGRlbGF5TGVhdmUoZWwsIHJlbW92ZSwgcGVyZm9ybUxlYXZlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHBlcmZvcm1MZWF2ZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBob3N0SW5zZXJ0KGVsLCBjb250YWluZXIsIGFuY2hvcik7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGNvbnN0IHVubW91bnQgPSAodm5vZGUsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGRvUmVtb3ZlID0gZmFsc2UsIG9wdGltaXplZCA9IGZhbHNlKSA9PiB7XHJcbiAgICAgICAgY29uc3QgeyB0eXBlLCBwcm9wcywgcmVmLCBjaGlsZHJlbiwgZHluYW1pY0NoaWxkcmVuLCBzaGFwZUZsYWcsIHBhdGNoRmxhZywgZGlycyB9ID0gdm5vZGU7XHJcbiAgICAgICAgLy8gdW5zZXQgcmVmXHJcbiAgICAgICAgaWYgKHJlZiAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHNldFJlZihyZWYsIG51bGwsIHBhcmVudFN1c3BlbnNlLCBudWxsKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHNoYXBlRmxhZyAmIDI1NiAvKiBDT01QT05FTlRfU0hPVUxEX0tFRVBfQUxJVkUgKi8pIHtcclxuICAgICAgICAgICAgcGFyZW50Q29tcG9uZW50LmN0eC5kZWFjdGl2YXRlKHZub2RlKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBzaG91bGRJbnZva2VEaXJzID0gc2hhcGVGbGFnICYgMSAvKiBFTEVNRU5UICovICYmIGRpcnM7XHJcbiAgICAgICAgbGV0IHZub2RlSG9vaztcclxuICAgICAgICBpZiAoKHZub2RlSG9vayA9IHByb3BzICYmIHByb3BzLm9uVm5vZGVCZWZvcmVVbm1vdW50KSkge1xyXG4gICAgICAgICAgICBpbnZva2VWTm9kZUhvb2sodm5vZGVIb29rLCBwYXJlbnRDb21wb25lbnQsIHZub2RlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHNoYXBlRmxhZyAmIDYgLyogQ09NUE9ORU5UICovKSB7XHJcbiAgICAgICAgICAgIHVubW91bnRDb21wb25lbnQodm5vZGUuY29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgZG9SZW1vdmUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKCBzaGFwZUZsYWcgJiAxMjggLyogU1VTUEVOU0UgKi8pIHtcclxuICAgICAgICAgICAgICAgIHZub2RlLnN1c3BlbnNlLnVubW91bnQocGFyZW50U3VzcGVuc2UsIGRvUmVtb3ZlKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoc2hvdWxkSW52b2tlRGlycykge1xyXG4gICAgICAgICAgICAgICAgaW52b2tlRGlyZWN0aXZlSG9vayh2bm9kZSwgbnVsbCwgcGFyZW50Q29tcG9uZW50LCAnYmVmb3JlVW5tb3VudCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChkeW5hbWljQ2hpbGRyZW4gJiZcclxuICAgICAgICAgICAgICAgIC8vICMxMTUzOiBmYXN0IHBhdGggc2hvdWxkIG5vdCBiZSB0YWtlbiBmb3Igbm9uLXN0YWJsZSAodi1mb3IpIGZyYWdtZW50c1xyXG4gICAgICAgICAgICAgICAgKHR5cGUgIT09IEZyYWdtZW50IHx8XHJcbiAgICAgICAgICAgICAgICAgICAgKHBhdGNoRmxhZyA+IDAgJiYgcGF0Y2hGbGFnICYgNjQgLyogU1RBQkxFX0ZSQUdNRU5UICovKSkpIHtcclxuICAgICAgICAgICAgICAgIC8vIGZhc3QgcGF0aCBmb3IgYmxvY2sgbm9kZXM6IG9ubHkgbmVlZCB0byB1bm1vdW50IGR5bmFtaWMgY2hpbGRyZW4uXHJcbiAgICAgICAgICAgICAgICB1bm1vdW50Q2hpbGRyZW4oZHluYW1pY0NoaWxkcmVuLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBmYWxzZSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoKHR5cGUgPT09IEZyYWdtZW50ICYmXHJcbiAgICAgICAgICAgICAgICAocGF0Y2hGbGFnICYgMTI4IC8qIEtFWUVEX0ZSQUdNRU5UICovIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgcGF0Y2hGbGFnICYgMjU2IC8qIFVOS0VZRURfRlJBR01FTlQgKi8pKSB8fFxyXG4gICAgICAgICAgICAgICAgKCFvcHRpbWl6ZWQgJiYgc2hhcGVGbGFnICYgMTYgLyogQVJSQVlfQ0hJTERSRU4gKi8pKSB7XHJcbiAgICAgICAgICAgICAgICB1bm1vdW50Q2hpbGRyZW4oY2hpbGRyZW4sIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIGFuIHVubW91bnRlZCB0ZWxlcG9ydCBzaG91bGQgYWx3YXlzIHJlbW92ZSBpdHMgY2hpbGRyZW4gaWYgbm90IGRpc2FibGVkXHJcbiAgICAgICAgICAgIGlmIChzaGFwZUZsYWcgJiA2NCAvKiBURUxFUE9SVCAqLyAmJlxyXG4gICAgICAgICAgICAgICAgKGRvUmVtb3ZlIHx8ICFpc1RlbGVwb3J0RGlzYWJsZWQodm5vZGUucHJvcHMpKSkge1xyXG4gICAgICAgICAgICAgICAgdm5vZGUudHlwZS5yZW1vdmUodm5vZGUsIGludGVybmFscyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGRvUmVtb3ZlKSB7XHJcbiAgICAgICAgICAgICAgICByZW1vdmUodm5vZGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICgodm5vZGVIb29rID0gcHJvcHMgJiYgcHJvcHMub25Wbm9kZVVubW91bnRlZCkgfHwgc2hvdWxkSW52b2tlRGlycykge1xyXG4gICAgICAgICAgICBxdWV1ZVBvc3RSZW5kZXJFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdm5vZGVIb29rICYmIGludm9rZVZOb2RlSG9vayh2bm9kZUhvb2ssIHBhcmVudENvbXBvbmVudCwgdm5vZGUpO1xyXG4gICAgICAgICAgICAgICAgc2hvdWxkSW52b2tlRGlycyAmJlxyXG4gICAgICAgICAgICAgICAgICAgIGludm9rZURpcmVjdGl2ZUhvb2sodm5vZGUsIG51bGwsIHBhcmVudENvbXBvbmVudCwgJ3VubW91bnRlZCcpO1xyXG4gICAgICAgICAgICB9LCBwYXJlbnRTdXNwZW5zZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGNvbnN0IHJlbW92ZSA9IHZub2RlID0+IHtcclxuICAgICAgICBjb25zdCB7IHR5cGUsIGVsLCBhbmNob3IsIHRyYW5zaXRpb24gfSA9IHZub2RlO1xyXG4gICAgICAgIGlmICh0eXBlID09PSBGcmFnbWVudCkge1xyXG4gICAgICAgICAgICByZW1vdmVGcmFnbWVudChlbCwgYW5jaG9yKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodHlwZSA9PT0gU3RhdGljKSB7XHJcbiAgICAgICAgICAgIHJlbW92ZVN0YXRpY05vZGUodm5vZGUpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHBlcmZvcm1SZW1vdmUgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIGhvc3RSZW1vdmUoZWwpO1xyXG4gICAgICAgICAgICBpZiAodHJhbnNpdGlvbiAmJiAhdHJhbnNpdGlvbi5wZXJzaXN0ZWQgJiYgdHJhbnNpdGlvbi5hZnRlckxlYXZlKSB7XHJcbiAgICAgICAgICAgICAgICB0cmFuc2l0aW9uLmFmdGVyTGVhdmUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgaWYgKHZub2RlLnNoYXBlRmxhZyAmIDEgLyogRUxFTUVOVCAqLyAmJlxyXG4gICAgICAgICAgICB0cmFuc2l0aW9uICYmXHJcbiAgICAgICAgICAgICF0cmFuc2l0aW9uLnBlcnNpc3RlZCkge1xyXG4gICAgICAgICAgICBjb25zdCB7IGxlYXZlLCBkZWxheUxlYXZlIH0gPSB0cmFuc2l0aW9uO1xyXG4gICAgICAgICAgICBjb25zdCBwZXJmb3JtTGVhdmUgPSAoKSA9PiBsZWF2ZShlbCwgcGVyZm9ybVJlbW92ZSk7XHJcbiAgICAgICAgICAgIGlmIChkZWxheUxlYXZlKSB7XHJcbiAgICAgICAgICAgICAgICBkZWxheUxlYXZlKHZub2RlLmVsLCBwZXJmb3JtUmVtb3ZlLCBwZXJmb3JtTGVhdmUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcGVyZm9ybUxlYXZlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHBlcmZvcm1SZW1vdmUoKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgY29uc3QgcmVtb3ZlRnJhZ21lbnQgPSAoY3VyLCBlbmQpID0+IHtcclxuICAgICAgICAvLyBGb3IgZnJhZ21lbnRzLCBkaXJlY3RseSByZW1vdmUgYWxsIGNvbnRhaW5lZCBET00gbm9kZXMuXHJcbiAgICAgICAgLy8gKGZyYWdtZW50IGNoaWxkIG5vZGVzIGNhbm5vdCBoYXZlIHRyYW5zaXRpb24pXHJcbiAgICAgICAgbGV0IG5leHQ7XHJcbiAgICAgICAgd2hpbGUgKGN1ciAhPT0gZW5kKSB7XHJcbiAgICAgICAgICAgIG5leHQgPSBob3N0TmV4dFNpYmxpbmcoY3VyKTtcclxuICAgICAgICAgICAgaG9zdFJlbW92ZShjdXIpO1xyXG4gICAgICAgICAgICBjdXIgPSBuZXh0O1xyXG4gICAgICAgIH1cclxuICAgICAgICBob3N0UmVtb3ZlKGVuZCk7XHJcbiAgICB9O1xyXG4gICAgY29uc3QgdW5tb3VudENvbXBvbmVudCA9IChpbnN0YW5jZSwgcGFyZW50U3VzcGVuc2UsIGRvUmVtb3ZlKSA9PiB7XHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBpbnN0YW5jZS50eXBlLl9faG1ySWQpIHtcclxuICAgICAgICAgICAgdW5yZWdpc3RlckhNUihpbnN0YW5jZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHsgYnVtLCBlZmZlY3RzLCB1cGRhdGUsIHN1YlRyZWUsIHVtIH0gPSBpbnN0YW5jZTtcclxuICAgICAgICAvLyBiZWZvcmVVbm1vdW50IGhvb2tcclxuICAgICAgICBpZiAoYnVtKSB7XHJcbiAgICAgICAgICAgIGludm9rZUFycmF5Rm5zKGJ1bSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChlZmZlY3RzKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZWZmZWN0cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgc3RvcChlZmZlY3RzW2ldKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyB1cGRhdGUgbWF5IGJlIG51bGwgaWYgYSBjb21wb25lbnQgaXMgdW5tb3VudGVkIGJlZm9yZSBpdHMgYXN5bmNcclxuICAgICAgICAvLyBzZXR1cCBoYXMgcmVzb2x2ZWQuXHJcbiAgICAgICAgaWYgKHVwZGF0ZSkge1xyXG4gICAgICAgICAgICBzdG9wKHVwZGF0ZSk7XHJcbiAgICAgICAgICAgIHVubW91bnQoc3ViVHJlZSwgaW5zdGFuY2UsIHBhcmVudFN1c3BlbnNlLCBkb1JlbW92ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHVubW91bnRlZCBob29rXHJcbiAgICAgICAgaWYgKHVtKSB7XHJcbiAgICAgICAgICAgIHF1ZXVlUG9zdFJlbmRlckVmZmVjdCh1bSwgcGFyZW50U3VzcGVuc2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBxdWV1ZVBvc3RSZW5kZXJFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgICAgICBpbnN0YW5jZS5pc1VubW91bnRlZCA9IHRydWU7XHJcbiAgICAgICAgfSwgcGFyZW50U3VzcGVuc2UpO1xyXG4gICAgICAgIC8vIEEgY29tcG9uZW50IHdpdGggYXN5bmMgZGVwIGluc2lkZSBhIHBlbmRpbmcgc3VzcGVuc2UgaXMgdW5tb3VudGVkIGJlZm9yZVxyXG4gICAgICAgIC8vIGl0cyBhc3luYyBkZXAgcmVzb2x2ZXMuIFRoaXMgc2hvdWxkIHJlbW92ZSB0aGUgZGVwIGZyb20gdGhlIHN1c3BlbnNlLCBhbmRcclxuICAgICAgICAvLyBjYXVzZSB0aGUgc3VzcGVuc2UgdG8gcmVzb2x2ZSBpbW1lZGlhdGVseSBpZiB0aGF0IHdhcyB0aGUgbGFzdCBkZXAuXHJcbiAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICBwYXJlbnRTdXNwZW5zZSAmJlxyXG4gICAgICAgICAgICBwYXJlbnRTdXNwZW5zZS5wZW5kaW5nQnJhbmNoICYmXHJcbiAgICAgICAgICAgICFwYXJlbnRTdXNwZW5zZS5pc1VubW91bnRlZCAmJlxyXG4gICAgICAgICAgICBpbnN0YW5jZS5hc3luY0RlcCAmJlxyXG4gICAgICAgICAgICAhaW5zdGFuY2UuYXN5bmNSZXNvbHZlZCAmJlxyXG4gICAgICAgICAgICBpbnN0YW5jZS5zdXNwZW5zZUlkID09PSBwYXJlbnRTdXNwZW5zZS5wZW5kaW5nSWQpIHtcclxuICAgICAgICAgICAgcGFyZW50U3VzcGVuc2UuZGVwcy0tO1xyXG4gICAgICAgICAgICBpZiAocGFyZW50U3VzcGVuc2UuZGVwcyA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgcGFyZW50U3VzcGVuc2UucmVzb2x2ZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgfHwgX19WVUVfUFJPRF9ERVZUT09MU19fKSB7XHJcbiAgICAgICAgICAgIGRldnRvb2xzQ29tcG9uZW50UmVtb3ZlZChpbnN0YW5jZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGNvbnN0IHVubW91bnRDaGlsZHJlbiA9IChjaGlsZHJlbiwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgZG9SZW1vdmUgPSBmYWxzZSwgb3B0aW1pemVkID0gZmFsc2UsIHN0YXJ0ID0gMCkgPT4ge1xyXG4gICAgICAgIGZvciAobGV0IGkgPSBzdGFydDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHVubW91bnQoY2hpbGRyZW5baV0sIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGRvUmVtb3ZlLCBvcHRpbWl6ZWQpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBjb25zdCBnZXROZXh0SG9zdE5vZGUgPSB2bm9kZSA9PiB7XHJcbiAgICAgICAgaWYgKHZub2RlLnNoYXBlRmxhZyAmIDYgLyogQ09NUE9ORU5UICovKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBnZXROZXh0SG9zdE5vZGUodm5vZGUuY29tcG9uZW50LnN1YlRyZWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIHZub2RlLnNoYXBlRmxhZyAmIDEyOCAvKiBTVVNQRU5TRSAqLykge1xyXG4gICAgICAgICAgICByZXR1cm4gdm5vZGUuc3VzcGVuc2UubmV4dCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gaG9zdE5leHRTaWJsaW5nKCh2bm9kZS5hbmNob3IgfHwgdm5vZGUuZWwpKTtcclxuICAgIH07XHJcbiAgICBjb25zdCByZW5kZXIgPSAodm5vZGUsIGNvbnRhaW5lcikgPT4ge1xyXG4gICAgICAgIGlmICh2bm9kZSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGlmIChjb250YWluZXIuX3Zub2RlKSB7XHJcbiAgICAgICAgICAgICAgICB1bm1vdW50KGNvbnRhaW5lci5fdm5vZGUsIG51bGwsIG51bGwsIHRydWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBwYXRjaChjb250YWluZXIuX3Zub2RlIHx8IG51bGwsIHZub2RlLCBjb250YWluZXIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmbHVzaFBvc3RGbHVzaENicygpO1xyXG4gICAgICAgIGNvbnRhaW5lci5fdm5vZGUgPSB2bm9kZTtcclxuICAgIH07XHJcbiAgICBjb25zdCBpbnRlcm5hbHMgPSB7XHJcbiAgICAgICAgcDogcGF0Y2gsXHJcbiAgICAgICAgdW06IHVubW91bnQsXHJcbiAgICAgICAgbTogbW92ZSxcclxuICAgICAgICByOiByZW1vdmUsXHJcbiAgICAgICAgbXQ6IG1vdW50Q29tcG9uZW50LFxyXG4gICAgICAgIG1jOiBtb3VudENoaWxkcmVuLFxyXG4gICAgICAgIHBjOiBwYXRjaENoaWxkcmVuLFxyXG4gICAgICAgIHBiYzogcGF0Y2hCbG9ja0NoaWxkcmVuLFxyXG4gICAgICAgIG46IGdldE5leHRIb3N0Tm9kZSxcclxuICAgICAgICBvOiBvcHRpb25zXHJcbiAgICB9O1xyXG4gICAgbGV0IGh5ZHJhdGU7XHJcbiAgICBsZXQgaHlkcmF0ZU5vZGU7XHJcbiAgICBpZiAoY3JlYXRlSHlkcmF0aW9uRm5zKSB7XHJcbiAgICAgICAgW2h5ZHJhdGUsIGh5ZHJhdGVOb2RlXSA9IGNyZWF0ZUh5ZHJhdGlvbkZucyhpbnRlcm5hbHMpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICByZW5kZXIsXHJcbiAgICAgICAgaHlkcmF0ZSxcclxuICAgICAgICBjcmVhdGVBcHA6IGNyZWF0ZUFwcEFQSShyZW5kZXIsIGh5ZHJhdGUpXHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIGludm9rZVZOb2RlSG9vayhob29rLCBpbnN0YW5jZSwgdm5vZGUsIHByZXZWTm9kZSA9IG51bGwpIHtcclxuICAgIGNhbGxXaXRoQXN5bmNFcnJvckhhbmRsaW5nKGhvb2ssIGluc3RhbmNlLCA3IC8qIFZOT0RFX0hPT0sgKi8sIFtcclxuICAgICAgICB2bm9kZSxcclxuICAgICAgICBwcmV2Vk5vZGVcclxuICAgIF0pO1xyXG59XHJcbi8qKlxyXG4gKiAjMTE1NlxyXG4gKiBXaGVuIGEgY29tcG9uZW50IGlzIEhNUi1lbmFibGVkLCB3ZSBuZWVkIHRvIG1ha2Ugc3VyZSB0aGF0IGFsbCBzdGF0aWMgbm9kZXNcclxuICogaW5zaWRlIGEgYmxvY2sgYWxzbyBpbmhlcml0IHRoZSBET00gZWxlbWVudCBmcm9tIHRoZSBwcmV2aW91cyB0cmVlIHNvIHRoYXRcclxuICogSE1SIHVwZGF0ZXMgKHdoaWNoIGFyZSBmdWxsIHVwZGF0ZXMpIGNhbiByZXRyaWV2ZSB0aGUgZWxlbWVudCBmb3IgcGF0Y2hpbmcuXHJcbiAqXHJcbiAqICMyMDgwXHJcbiAqIEluc2lkZSBrZXllZCBgdGVtcGxhdGVgIGZyYWdtZW50IHN0YXRpYyBjaGlsZHJlbiwgaWYgYSBmcmFnbWVudCBpcyBtb3ZlZCxcclxuICogdGhlIGNoaWxkcmVuIHdpbGwgYWx3YXlzIG1vdmVkIHNvIHRoYXQgbmVlZCBpbmhlcml0IGVsIGZvcm0gcHJldmlvdXMgbm9kZXNcclxuICogdG8gZW5zdXJlIGNvcnJlY3QgbW92ZWQgcG9zaXRpb24uXHJcbiAqL1xyXG5mdW5jdGlvbiB0cmF2ZXJzZVN0YXRpY0NoaWxkcmVuKG4xLCBuMiwgc2hhbGxvdyA9IGZhbHNlKSB7XHJcbiAgICBjb25zdCBjaDEgPSBuMS5jaGlsZHJlbjtcclxuICAgIGNvbnN0IGNoMiA9IG4yLmNoaWxkcmVuO1xyXG4gICAgaWYgKGlzQXJyYXkoY2gxKSAmJiBpc0FycmF5KGNoMikpIHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoMS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAvLyB0aGlzIGlzIG9ubHkgY2FsbGVkIGluIHRoZSBvcHRpbWl6ZWQgcGF0aCBzbyBhcnJheSBjaGlsZHJlbiBhcmVcclxuICAgICAgICAgICAgLy8gZ3VhcmFudGVlZCB0byBiZSB2bm9kZXNcclxuICAgICAgICAgICAgY29uc3QgYzEgPSBjaDFbaV07XHJcbiAgICAgICAgICAgIGxldCBjMiA9IGNoMltpXTtcclxuICAgICAgICAgICAgaWYgKGMyLnNoYXBlRmxhZyAmIDEgLyogRUxFTUVOVCAqLyAmJiAhYzIuZHluYW1pY0NoaWxkcmVuKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoYzIucGF0Y2hGbGFnIDw9IDAgfHwgYzIucGF0Y2hGbGFnID09PSAzMiAvKiBIWURSQVRFX0VWRU5UUyAqLykge1xyXG4gICAgICAgICAgICAgICAgICAgIGMyID0gY2gyW2ldID0gY2xvbmVJZk1vdW50ZWQoY2gyW2ldKTtcclxuICAgICAgICAgICAgICAgICAgICBjMi5lbCA9IGMxLmVsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKCFzaGFsbG93KVxyXG4gICAgICAgICAgICAgICAgICAgIHRyYXZlcnNlU3RhdGljQ2hpbGRyZW4oYzEsIGMyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBhbHNvIGluaGVyaXQgZm9yIGNvbW1lbnQgbm9kZXMsIGJ1dCBub3QgcGxhY2Vob2xkZXJzIChlLmcuIHYtaWYgd2hpY2hcclxuICAgICAgICAgICAgLy8gd291bGQgaGF2ZSByZWNlaXZlZCAuZWwgZHVyaW5nIGJsb2NrIHBhdGNoKVxyXG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIGMyLnR5cGUgPT09IENvbW1lbnQgJiYgIWMyLmVsKSB7XHJcbiAgICAgICAgICAgICAgICBjMi5lbCA9IGMxLmVsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbi8vIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xvbmdlc3RfaW5jcmVhc2luZ19zdWJzZXF1ZW5jZVxyXG5mdW5jdGlvbiBnZXRTZXF1ZW5jZShhcnIpIHtcclxuICAgIGNvbnN0IHAgPSBhcnIuc2xpY2UoKTtcclxuICAgIGNvbnN0IHJlc3VsdCA9IFswXTtcclxuICAgIGxldCBpLCBqLCB1LCB2LCBjO1xyXG4gICAgY29uc3QgbGVuID0gYXJyLmxlbmd0aDtcclxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgIGNvbnN0IGFyckkgPSBhcnJbaV07XHJcbiAgICAgICAgaWYgKGFyckkgIT09IDApIHtcclxuICAgICAgICAgICAgaiA9IHJlc3VsdFtyZXN1bHQubGVuZ3RoIC0gMV07XHJcbiAgICAgICAgICAgIGlmIChhcnJbal0gPCBhcnJJKSB7XHJcbiAgICAgICAgICAgICAgICBwW2ldID0gajtcclxuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGkpO1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdSA9IDA7XHJcbiAgICAgICAgICAgIHYgPSByZXN1bHQubGVuZ3RoIC0gMTtcclxuICAgICAgICAgICAgd2hpbGUgKHUgPCB2KSB7XHJcbiAgICAgICAgICAgICAgICBjID0gKCh1ICsgdikgLyAyKSB8IDA7XHJcbiAgICAgICAgICAgICAgICBpZiAoYXJyW3Jlc3VsdFtjXV0gPCBhcnJJKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdSA9IGMgKyAxO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdiA9IGM7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGFyckkgPCBhcnJbcmVzdWx0W3VdXSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHUgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcFtpXSA9IHJlc3VsdFt1IC0gMV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXN1bHRbdV0gPSBpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgdSA9IHJlc3VsdC5sZW5ndGg7XHJcbiAgICB2ID0gcmVzdWx0W3UgLSAxXTtcclxuICAgIHdoaWxlICh1LS0gPiAwKSB7XHJcbiAgICAgICAgcmVzdWx0W3VdID0gdjtcclxuICAgICAgICB2ID0gcFt2XTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cblxuY29uc3QgaXNUZWxlcG9ydCA9ICh0eXBlKSA9PiB0eXBlLl9faXNUZWxlcG9ydDtcclxuY29uc3QgaXNUZWxlcG9ydERpc2FibGVkID0gKHByb3BzKSA9PiBwcm9wcyAmJiAocHJvcHMuZGlzYWJsZWQgfHwgcHJvcHMuZGlzYWJsZWQgPT09ICcnKTtcclxuY29uc3QgaXNUYXJnZXRTVkcgPSAodGFyZ2V0KSA9PiB0eXBlb2YgU1ZHRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgdGFyZ2V0IGluc3RhbmNlb2YgU1ZHRWxlbWVudDtcclxuY29uc3QgcmVzb2x2ZVRhcmdldCA9IChwcm9wcywgc2VsZWN0KSA9PiB7XHJcbiAgICBjb25zdCB0YXJnZXRTZWxlY3RvciA9IHByb3BzICYmIHByb3BzLnRvO1xyXG4gICAgaWYgKGlzU3RyaW5nKHRhcmdldFNlbGVjdG9yKSkge1xyXG4gICAgICAgIGlmICghc2VsZWN0KSB7XHJcbiAgICAgICAgICAgIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJlxyXG4gICAgICAgICAgICAgICAgd2FybihgQ3VycmVudCByZW5kZXJlciBkb2VzIG5vdCBzdXBwb3J0IHN0cmluZyB0YXJnZXQgZm9yIFRlbGVwb3J0cy4gYCArXHJcbiAgICAgICAgICAgICAgICAgICAgYChtaXNzaW5nIHF1ZXJ5U2VsZWN0b3IgcmVuZGVyZXIgb3B0aW9uKWApO1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldCA9IHNlbGVjdCh0YXJnZXRTZWxlY3Rvcik7XHJcbiAgICAgICAgICAgIGlmICghdGFyZ2V0KSB7XHJcbiAgICAgICAgICAgICAgICAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiZcclxuICAgICAgICAgICAgICAgICAgICB3YXJuKGBGYWlsZWQgdG8gbG9jYXRlIFRlbGVwb3J0IHRhcmdldCB3aXRoIHNlbGVjdG9yIFwiJHt0YXJnZXRTZWxlY3Rvcn1cIi4gYCArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGBOb3RlIHRoZSB0YXJnZXQgZWxlbWVudCBtdXN0IGV4aXN0IGJlZm9yZSB0aGUgY29tcG9uZW50IGlzIG1vdW50ZWQgLSBgICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYGkuZS4gdGhlIHRhcmdldCBjYW5ub3QgYmUgcmVuZGVyZWQgYnkgdGhlIGNvbXBvbmVudCBpdHNlbGYsIGFuZCBgICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYGlkZWFsbHkgc2hvdWxkIGJlIG91dHNpZGUgb2YgdGhlIGVudGlyZSBWdWUgY29tcG9uZW50IHRyZWUuYCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRhcmdldDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICF0YXJnZXRTZWxlY3RvciAmJiAhaXNUZWxlcG9ydERpc2FibGVkKHByb3BzKSkge1xyXG4gICAgICAgICAgICB3YXJuKGBJbnZhbGlkIFRlbGVwb3J0IHRhcmdldDogJHt0YXJnZXRTZWxlY3Rvcn1gKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRhcmdldFNlbGVjdG9yO1xyXG4gICAgfVxyXG59O1xyXG5jb25zdCBUZWxlcG9ydEltcGwgPSB7XHJcbiAgICBfX2lzVGVsZXBvcnQ6IHRydWUsXHJcbiAgICBwcm9jZXNzKG4xLCBuMiwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBvcHRpbWl6ZWQsIGludGVybmFscykge1xyXG4gICAgICAgIGNvbnN0IHsgbWM6IG1vdW50Q2hpbGRyZW4sIHBjOiBwYXRjaENoaWxkcmVuLCBwYmM6IHBhdGNoQmxvY2tDaGlsZHJlbiwgbzogeyBpbnNlcnQsIHF1ZXJ5U2VsZWN0b3IsIGNyZWF0ZVRleHQsIGNyZWF0ZUNvbW1lbnQgfSB9ID0gaW50ZXJuYWxzO1xyXG4gICAgICAgIGNvbnN0IGRpc2FibGVkID0gaXNUZWxlcG9ydERpc2FibGVkKG4yLnByb3BzKTtcclxuICAgICAgICBjb25zdCB7IHNoYXBlRmxhZywgY2hpbGRyZW4gfSA9IG4yO1xyXG4gICAgICAgIGlmIChuMSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIC8vIGluc2VydCBhbmNob3JzIGluIHRoZSBtYWluIHZpZXdcclxuICAgICAgICAgICAgY29uc3QgcGxhY2Vob2xkZXIgPSAobjIuZWwgPSAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJylcclxuICAgICAgICAgICAgICAgID8gY3JlYXRlQ29tbWVudCgndGVsZXBvcnQgc3RhcnQnKVxyXG4gICAgICAgICAgICAgICAgOiBjcmVhdGVUZXh0KCcnKSk7XHJcbiAgICAgICAgICAgIGNvbnN0IG1haW5BbmNob3IgPSAobjIuYW5jaG9yID0gKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpXHJcbiAgICAgICAgICAgICAgICA/IGNyZWF0ZUNvbW1lbnQoJ3RlbGVwb3J0IGVuZCcpXHJcbiAgICAgICAgICAgICAgICA6IGNyZWF0ZVRleHQoJycpKTtcclxuICAgICAgICAgICAgaW5zZXJ0KHBsYWNlaG9sZGVyLCBjb250YWluZXIsIGFuY2hvcik7XHJcbiAgICAgICAgICAgIGluc2VydChtYWluQW5jaG9yLCBjb250YWluZXIsIGFuY2hvcik7XHJcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldCA9IChuMi50YXJnZXQgPSByZXNvbHZlVGFyZ2V0KG4yLnByb3BzLCBxdWVyeVNlbGVjdG9yKSk7XHJcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldEFuY2hvciA9IChuMi50YXJnZXRBbmNob3IgPSBjcmVhdGVUZXh0KCcnKSk7XHJcbiAgICAgICAgICAgIGlmICh0YXJnZXQpIHtcclxuICAgICAgICAgICAgICAgIGluc2VydCh0YXJnZXRBbmNob3IsIHRhcmdldCk7XHJcbiAgICAgICAgICAgICAgICAvLyAjMjY1MiB3ZSBjb3VsZCBiZSB0ZWxlcG9ydGluZyBmcm9tIGEgbm9uLVNWRyB0cmVlIGludG8gYW4gU1ZHIHRyZWVcclxuICAgICAgICAgICAgICAgIGlzU1ZHID0gaXNTVkcgfHwgaXNUYXJnZXRTVkcodGFyZ2V0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIWRpc2FibGVkKSB7XHJcbiAgICAgICAgICAgICAgICB3YXJuKCdJbnZhbGlkIFRlbGVwb3J0IHRhcmdldCBvbiBtb3VudDonLCB0YXJnZXQsIGAoJHt0eXBlb2YgdGFyZ2V0fSlgKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBtb3VudCA9IChjb250YWluZXIsIGFuY2hvcikgPT4ge1xyXG4gICAgICAgICAgICAgICAgLy8gVGVsZXBvcnQgKmFsd2F5cyogaGFzIEFycmF5IGNoaWxkcmVuLiBUaGlzIGlzIGVuZm9yY2VkIGluIGJvdGggdGhlXHJcbiAgICAgICAgICAgICAgICAvLyBjb21waWxlciBhbmQgdm5vZGUgY2hpbGRyZW4gbm9ybWFsaXphdGlvbi5cclxuICAgICAgICAgICAgICAgIGlmIChzaGFwZUZsYWcgJiAxNiAvKiBBUlJBWV9DSElMRFJFTiAqLykge1xyXG4gICAgICAgICAgICAgICAgICAgIG1vdW50Q2hpbGRyZW4oY2hpbGRyZW4sIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgb3B0aW1pemVkKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgaWYgKGRpc2FibGVkKSB7XHJcbiAgICAgICAgICAgICAgICBtb3VudChjb250YWluZXIsIG1haW5BbmNob3IpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHRhcmdldCkge1xyXG4gICAgICAgICAgICAgICAgbW91bnQodGFyZ2V0LCB0YXJnZXRBbmNob3IpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyB1cGRhdGUgY29udGVudFxyXG4gICAgICAgICAgICBuMi5lbCA9IG4xLmVsO1xyXG4gICAgICAgICAgICBjb25zdCBtYWluQW5jaG9yID0gKG4yLmFuY2hvciA9IG4xLmFuY2hvcik7XHJcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldCA9IChuMi50YXJnZXQgPSBuMS50YXJnZXQpO1xyXG4gICAgICAgICAgICBjb25zdCB0YXJnZXRBbmNob3IgPSAobjIudGFyZ2V0QW5jaG9yID0gbjEudGFyZ2V0QW5jaG9yKTtcclxuICAgICAgICAgICAgY29uc3Qgd2FzRGlzYWJsZWQgPSBpc1RlbGVwb3J0RGlzYWJsZWQobjEucHJvcHMpO1xyXG4gICAgICAgICAgICBjb25zdCBjdXJyZW50Q29udGFpbmVyID0gd2FzRGlzYWJsZWQgPyBjb250YWluZXIgOiB0YXJnZXQ7XHJcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRBbmNob3IgPSB3YXNEaXNhYmxlZCA/IG1haW5BbmNob3IgOiB0YXJnZXRBbmNob3I7XHJcbiAgICAgICAgICAgIGlzU1ZHID0gaXNTVkcgfHwgaXNUYXJnZXRTVkcodGFyZ2V0KTtcclxuICAgICAgICAgICAgaWYgKG4yLmR5bmFtaWNDaGlsZHJlbikge1xyXG4gICAgICAgICAgICAgICAgLy8gZmFzdCBwYXRoIHdoZW4gdGhlIHRlbGVwb3J0IGhhcHBlbnMgdG8gYmUgYSBibG9jayByb290XHJcbiAgICAgICAgICAgICAgICBwYXRjaEJsb2NrQ2hpbGRyZW4objEuZHluYW1pY0NoaWxkcmVuLCBuMi5keW5hbWljQ2hpbGRyZW4sIGN1cnJlbnRDb250YWluZXIsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHKTtcclxuICAgICAgICAgICAgICAgIC8vIGV2ZW4gaW4gYmxvY2sgdHJlZSBtb2RlIHdlIG5lZWQgdG8gbWFrZSBzdXJlIGFsbCByb290LWxldmVsIG5vZGVzXHJcbiAgICAgICAgICAgICAgICAvLyBpbiB0aGUgdGVsZXBvcnQgaW5oZXJpdCBwcmV2aW91cyBET00gcmVmZXJlbmNlcyBzbyB0aGF0IHRoZXkgY2FuXHJcbiAgICAgICAgICAgICAgICAvLyBiZSBtb3ZlZCBpbiBmdXR1cmUgcGF0Y2hlcy5cclxuICAgICAgICAgICAgICAgIHRyYXZlcnNlU3RhdGljQ2hpbGRyZW4objEsIG4yLCB0cnVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICghb3B0aW1pemVkKSB7XHJcbiAgICAgICAgICAgICAgICBwYXRjaENoaWxkcmVuKG4xLCBuMiwgY3VycmVudENvbnRhaW5lciwgY3VycmVudEFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChkaXNhYmxlZCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF3YXNEaXNhYmxlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGVuYWJsZWQgLT4gZGlzYWJsZWRcclxuICAgICAgICAgICAgICAgICAgICAvLyBtb3ZlIGludG8gbWFpbiBjb250YWluZXJcclxuICAgICAgICAgICAgICAgICAgICBtb3ZlVGVsZXBvcnQobjIsIGNvbnRhaW5lciwgbWFpbkFuY2hvciwgaW50ZXJuYWxzLCAxIC8qIFRPR0dMRSAqLyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyB0YXJnZXQgY2hhbmdlZFxyXG4gICAgICAgICAgICAgICAgaWYgKChuMi5wcm9wcyAmJiBuMi5wcm9wcy50bykgIT09IChuMS5wcm9wcyAmJiBuMS5wcm9wcy50bykpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXh0VGFyZ2V0ID0gKG4yLnRhcmdldCA9IHJlc29sdmVUYXJnZXQobjIucHJvcHMsIHF1ZXJ5U2VsZWN0b3IpKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobmV4dFRhcmdldCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb3ZlVGVsZXBvcnQobjIsIG5leHRUYXJnZXQsIG51bGwsIGludGVybmFscywgMCAvKiBUQVJHRVRfQ0hBTkdFICovKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdhcm4oJ0ludmFsaWQgVGVsZXBvcnQgdGFyZ2V0IG9uIHVwZGF0ZTonLCB0YXJnZXQsIGAoJHt0eXBlb2YgdGFyZ2V0fSlgKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh3YXNEaXNhYmxlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGRpc2FibGVkIC0+IGVuYWJsZWRcclxuICAgICAgICAgICAgICAgICAgICAvLyBtb3ZlIGludG8gdGVsZXBvcnQgdGFyZ2V0XHJcbiAgICAgICAgICAgICAgICAgICAgbW92ZVRlbGVwb3J0KG4yLCB0YXJnZXQsIHRhcmdldEFuY2hvciwgaW50ZXJuYWxzLCAxIC8qIFRPR0dMRSAqLyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgcmVtb3ZlKHZub2RlLCB7IHI6IHJlbW92ZSwgbzogeyByZW1vdmU6IGhvc3RSZW1vdmUgfSB9KSB7XHJcbiAgICAgICAgY29uc3QgeyBzaGFwZUZsYWcsIGNoaWxkcmVuLCBhbmNob3IgfSA9IHZub2RlO1xyXG4gICAgICAgIGhvc3RSZW1vdmUoYW5jaG9yKTtcclxuICAgICAgICBpZiAoc2hhcGVGbGFnICYgMTYgLyogQVJSQVlfQ0hJTERSRU4gKi8pIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgcmVtb3ZlKGNoaWxkcmVuW2ldKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBtb3ZlOiBtb3ZlVGVsZXBvcnQsXHJcbiAgICBoeWRyYXRlOiBoeWRyYXRlVGVsZXBvcnRcclxufTtcclxuZnVuY3Rpb24gbW92ZVRlbGVwb3J0KHZub2RlLCBjb250YWluZXIsIHBhcmVudEFuY2hvciwgeyBvOiB7IGluc2VydCB9LCBtOiBtb3ZlIH0sIG1vdmVUeXBlID0gMiAvKiBSRU9SREVSICovKSB7XHJcbiAgICAvLyBtb3ZlIHRhcmdldCBhbmNob3IgaWYgdGhpcyBpcyBhIHRhcmdldCBjaGFuZ2UuXHJcbiAgICBpZiAobW92ZVR5cGUgPT09IDAgLyogVEFSR0VUX0NIQU5HRSAqLykge1xyXG4gICAgICAgIGluc2VydCh2bm9kZS50YXJnZXRBbmNob3IsIGNvbnRhaW5lciwgcGFyZW50QW5jaG9yKTtcclxuICAgIH1cclxuICAgIGNvbnN0IHsgZWwsIGFuY2hvciwgc2hhcGVGbGFnLCBjaGlsZHJlbiwgcHJvcHMgfSA9IHZub2RlO1xyXG4gICAgY29uc3QgaXNSZW9yZGVyID0gbW92ZVR5cGUgPT09IDIgLyogUkVPUkRFUiAqLztcclxuICAgIC8vIG1vdmUgbWFpbiB2aWV3IGFuY2hvciBpZiB0aGlzIGlzIGEgcmUtb3JkZXIuXHJcbiAgICBpZiAoaXNSZW9yZGVyKSB7XHJcbiAgICAgICAgaW5zZXJ0KGVsLCBjb250YWluZXIsIHBhcmVudEFuY2hvcik7XHJcbiAgICB9XHJcbiAgICAvLyBpZiB0aGlzIGlzIGEgcmUtb3JkZXIgYW5kIHRlbGVwb3J0IGlzIGVuYWJsZWQgKGNvbnRlbnQgaXMgaW4gdGFyZ2V0KVxyXG4gICAgLy8gZG8gbm90IG1vdmUgY2hpbGRyZW4uIFNvIHRoZSBvcHBvc2l0ZSBpczogb25seSBtb3ZlIGNoaWxkcmVuIGlmIHRoaXNcclxuICAgIC8vIGlzIG5vdCBhIHJlb3JkZXIsIG9yIHRoZSB0ZWxlcG9ydCBpcyBkaXNhYmxlZFxyXG4gICAgaWYgKCFpc1Jlb3JkZXIgfHwgaXNUZWxlcG9ydERpc2FibGVkKHByb3BzKSkge1xyXG4gICAgICAgIC8vIFRlbGVwb3J0IGhhcyBlaXRoZXIgQXJyYXkgY2hpbGRyZW4gb3Igbm8gY2hpbGRyZW4uXHJcbiAgICAgICAgaWYgKHNoYXBlRmxhZyAmIDE2IC8qIEFSUkFZX0NISUxEUkVOICovKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIG1vdmUoY2hpbGRyZW5baV0sIGNvbnRhaW5lciwgcGFyZW50QW5jaG9yLCAyIC8qIFJFT1JERVIgKi8pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gbW92ZSBtYWluIHZpZXcgYW5jaG9yIGlmIHRoaXMgaXMgYSByZS1vcmRlci5cclxuICAgIGlmIChpc1Jlb3JkZXIpIHtcclxuICAgICAgICBpbnNlcnQoYW5jaG9yLCBjb250YWluZXIsIHBhcmVudEFuY2hvcik7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gaHlkcmF0ZVRlbGVwb3J0KG5vZGUsIHZub2RlLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBvcHRpbWl6ZWQsIHsgbzogeyBuZXh0U2libGluZywgcGFyZW50Tm9kZSwgcXVlcnlTZWxlY3RvciB9IH0sIGh5ZHJhdGVDaGlsZHJlbikge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gKHZub2RlLnRhcmdldCA9IHJlc29sdmVUYXJnZXQodm5vZGUucHJvcHMsIHF1ZXJ5U2VsZWN0b3IpKTtcclxuICAgIGlmICh0YXJnZXQpIHtcclxuICAgICAgICAvLyBpZiBtdWx0aXBsZSB0ZWxlcG9ydHMgcmVuZGVyZWQgdG8gdGhlIHNhbWUgdGFyZ2V0IGVsZW1lbnQsIHdlIG5lZWQgdG9cclxuICAgICAgICAvLyBwaWNrIHVwIGZyb20gd2hlcmUgdGhlIGxhc3QgdGVsZXBvcnQgZmluaXNoZWQgaW5zdGVhZCBvZiB0aGUgZmlyc3Qgbm9kZVxyXG4gICAgICAgIGNvbnN0IHRhcmdldE5vZGUgPSB0YXJnZXQuX2xwYSB8fCB0YXJnZXQuZmlyc3RDaGlsZDtcclxuICAgICAgICBpZiAodm5vZGUuc2hhcGVGbGFnICYgMTYgLyogQVJSQVlfQ0hJTERSRU4gKi8pIHtcclxuICAgICAgICAgICAgaWYgKGlzVGVsZXBvcnREaXNhYmxlZCh2bm9kZS5wcm9wcykpIHtcclxuICAgICAgICAgICAgICAgIHZub2RlLmFuY2hvciA9IGh5ZHJhdGVDaGlsZHJlbihuZXh0U2libGluZyhub2RlKSwgdm5vZGUsIHBhcmVudE5vZGUobm9kZSksIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIG9wdGltaXplZCk7XHJcbiAgICAgICAgICAgICAgICB2bm9kZS50YXJnZXRBbmNob3IgPSB0YXJnZXROb2RlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdm5vZGUuYW5jaG9yID0gbmV4dFNpYmxpbmcobm9kZSk7XHJcbiAgICAgICAgICAgICAgICB2bm9kZS50YXJnZXRBbmNob3IgPSBoeWRyYXRlQ2hpbGRyZW4odGFyZ2V0Tm9kZSwgdm5vZGUsIHRhcmdldCwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgb3B0aW1pemVkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0YXJnZXQuX2xwYSA9XHJcbiAgICAgICAgICAgICAgICB2bm9kZS50YXJnZXRBbmNob3IgJiYgbmV4dFNpYmxpbmcodm5vZGUudGFyZ2V0QW5jaG9yKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdm5vZGUuYW5jaG9yICYmIG5leHRTaWJsaW5nKHZub2RlLmFuY2hvcik7XHJcbn1cclxuLy8gRm9yY2UtY2FzdGVkIHB1YmxpYyB0eXBpbmcgZm9yIGggYW5kIFRTWCBwcm9wcyBpbmZlcmVuY2VcclxuY29uc3QgVGVsZXBvcnQgPSBUZWxlcG9ydEltcGw7XG5cbmNvbnN0IENPTVBPTkVOVFMgPSAnY29tcG9uZW50cyc7XHJcbmNvbnN0IERJUkVDVElWRVMgPSAnZGlyZWN0aXZlcyc7XHJcbi8qKlxyXG4gKiBAcHJpdmF0ZVxyXG4gKi9cclxuZnVuY3Rpb24gcmVzb2x2ZUNvbXBvbmVudChuYW1lKSB7XHJcbiAgICByZXR1cm4gcmVzb2x2ZUFzc2V0KENPTVBPTkVOVFMsIG5hbWUpIHx8IG5hbWU7XHJcbn1cclxuY29uc3QgTlVMTF9EWU5BTUlDX0NPTVBPTkVOVCA9IFN5bWJvbCgpO1xyXG4vKipcclxuICogQHByaXZhdGVcclxuICovXHJcbmZ1bmN0aW9uIHJlc29sdmVEeW5hbWljQ29tcG9uZW50KGNvbXBvbmVudCkge1xyXG4gICAgaWYgKGlzU3RyaW5nKGNvbXBvbmVudCkpIHtcclxuICAgICAgICByZXR1cm4gcmVzb2x2ZUFzc2V0KENPTVBPTkVOVFMsIGNvbXBvbmVudCwgZmFsc2UpIHx8IGNvbXBvbmVudDtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIC8vIGludmFsaWQgdHlwZXMgd2lsbCBmYWxsdGhyb3VnaCB0byBjcmVhdGVWTm9kZSBhbmQgcmFpc2Ugd2FybmluZ1xyXG4gICAgICAgIHJldHVybiAoY29tcG9uZW50IHx8IE5VTExfRFlOQU1JQ19DT01QT05FTlQpO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBAcHJpdmF0ZVxyXG4gKi9cclxuZnVuY3Rpb24gcmVzb2x2ZURpcmVjdGl2ZShuYW1lKSB7XHJcbiAgICByZXR1cm4gcmVzb2x2ZUFzc2V0KERJUkVDVElWRVMsIG5hbWUpO1xyXG59XHJcbi8vIGltcGxlbWVudGF0aW9uXHJcbmZ1bmN0aW9uIHJlc29sdmVBc3NldCh0eXBlLCBuYW1lLCB3YXJuTWlzc2luZyA9IHRydWUpIHtcclxuICAgIGNvbnN0IGluc3RhbmNlID0gY3VycmVudFJlbmRlcmluZ0luc3RhbmNlIHx8IGN1cnJlbnRJbnN0YW5jZTtcclxuICAgIGlmIChpbnN0YW5jZSkge1xyXG4gICAgICAgIGNvbnN0IENvbXBvbmVudCA9IGluc3RhbmNlLnR5cGU7XHJcbiAgICAgICAgLy8gc2VsZiBuYW1lIGhhcyBoaWdoZXN0IHByaW9yaXR5XHJcbiAgICAgICAgaWYgKHR5cGUgPT09IENPTVBPTkVOVFMpIHtcclxuICAgICAgICAgICAgLy8gc3BlY2lhbCBzZWxmIHJlZmVyZW5jaW5nIGNhbGwgZ2VuZXJhdGVkIGJ5IGNvbXBpbGVyXHJcbiAgICAgICAgICAgIC8vIGluZmVycmVkIGZyb20gU0ZDIGZpbGVuYW1lXHJcbiAgICAgICAgICAgIGlmIChuYW1lID09PSBgX3NlbGZgKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gQ29tcG9uZW50O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IHNlbGZOYW1lID0gQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5uYW1lO1xyXG4gICAgICAgICAgICBpZiAoc2VsZk5hbWUgJiZcclxuICAgICAgICAgICAgICAgIChzZWxmTmFtZSA9PT0gbmFtZSB8fFxyXG4gICAgICAgICAgICAgICAgICAgIHNlbGZOYW1lID09PSBjYW1lbGl6ZShuYW1lKSB8fFxyXG4gICAgICAgICAgICAgICAgICAgIHNlbGZOYW1lID09PSBjYXBpdGFsaXplKGNhbWVsaXplKG5hbWUpKSkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBDb21wb25lbnQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgcmVzID0gXHJcbiAgICAgICAgLy8gbG9jYWwgcmVnaXN0cmF0aW9uXHJcbiAgICAgICAgLy8gY2hlY2sgaW5zdGFuY2VbdHlwZV0gZmlyc3QgZm9yIGNvbXBvbmVudHMgd2l0aCBtaXhpbiBvciBleHRlbmRzLlxyXG4gICAgICAgIHJlc29sdmUoaW5zdGFuY2VbdHlwZV0gfHwgQ29tcG9uZW50W3R5cGVdLCBuYW1lKSB8fFxyXG4gICAgICAgICAgICAvLyBnbG9iYWwgcmVnaXN0cmF0aW9uXHJcbiAgICAgICAgICAgIHJlc29sdmUoaW5zdGFuY2UuYXBwQ29udGV4dFt0eXBlXSwgbmFtZSk7XHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiB3YXJuTWlzc2luZyAmJiAhcmVzKSB7XHJcbiAgICAgICAgICAgIHdhcm4oYEZhaWxlZCB0byByZXNvbHZlICR7dHlwZS5zbGljZSgwLCAtMSl9OiAke25hbWV9YCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXM7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICB3YXJuKGByZXNvbHZlJHtjYXBpdGFsaXplKHR5cGUuc2xpY2UoMCwgLTEpKX0gYCArXHJcbiAgICAgICAgICAgIGBjYW4gb25seSBiZSB1c2VkIGluIHJlbmRlcigpIG9yIHNldHVwKCkuYCk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gcmVzb2x2ZShyZWdpc3RyeSwgbmFtZSkge1xyXG4gICAgcmV0dXJuIChyZWdpc3RyeSAmJlxyXG4gICAgICAgIChyZWdpc3RyeVtuYW1lXSB8fFxyXG4gICAgICAgICAgICByZWdpc3RyeVtjYW1lbGl6ZShuYW1lKV0gfHxcclxuICAgICAgICAgICAgcmVnaXN0cnlbY2FwaXRhbGl6ZShjYW1lbGl6ZShuYW1lKSldKSk7XHJcbn1cblxuY29uc3QgRnJhZ21lbnQgPSBTeW1ib2woKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpID8gJ0ZyYWdtZW50JyA6IHVuZGVmaW5lZCk7XHJcbmNvbnN0IFRleHQgPSBTeW1ib2woKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpID8gJ1RleHQnIDogdW5kZWZpbmVkKTtcclxuY29uc3QgQ29tbWVudCA9IFN5bWJvbCgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgPyAnQ29tbWVudCcgOiB1bmRlZmluZWQpO1xyXG5jb25zdCBTdGF0aWMgPSBTeW1ib2woKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpID8gJ1N0YXRpYycgOiB1bmRlZmluZWQpO1xyXG4vLyBTaW5jZSB2LWlmIGFuZCB2LWZvciBhcmUgdGhlIHR3byBwb3NzaWJsZSB3YXlzIG5vZGUgc3RydWN0dXJlIGNhbiBkeW5hbWljYWxseVxyXG4vLyBjaGFuZ2UsIG9uY2Ugd2UgY29uc2lkZXIgdi1pZiBicmFuY2hlcyBhbmQgZWFjaCB2LWZvciBmcmFnbWVudCBhIGJsb2NrLCB3ZVxyXG4vLyBjYW4gZGl2aWRlIGEgdGVtcGxhdGUgaW50byBuZXN0ZWQgYmxvY2tzLCBhbmQgd2l0aGluIGVhY2ggYmxvY2sgdGhlIG5vZGVcclxuLy8gc3RydWN0dXJlIHdvdWxkIGJlIHN0YWJsZS4gVGhpcyBhbGxvd3MgdXMgdG8gc2tpcCBtb3N0IGNoaWxkcmVuIGRpZmZpbmdcclxuLy8gYW5kIG9ubHkgd29ycnkgYWJvdXQgdGhlIGR5bmFtaWMgbm9kZXMgKGluZGljYXRlZCBieSBwYXRjaCBmbGFncykuXHJcbmNvbnN0IGJsb2NrU3RhY2sgPSBbXTtcclxubGV0IGN1cnJlbnRCbG9jayA9IG51bGw7XHJcbi8qKlxyXG4gKiBPcGVuIGEgYmxvY2suXHJcbiAqIFRoaXMgbXVzdCBiZSBjYWxsZWQgYmVmb3JlIGBjcmVhdGVCbG9ja2AuIEl0IGNhbm5vdCBiZSBwYXJ0IG9mIGBjcmVhdGVCbG9ja2BcclxuICogYmVjYXVzZSB0aGUgY2hpbGRyZW4gb2YgdGhlIGJsb2NrIGFyZSBldmFsdWF0ZWQgYmVmb3JlIGBjcmVhdGVCbG9ja2AgaXRzZWxmXHJcbiAqIGlzIGNhbGxlZC4gVGhlIGdlbmVyYXRlZCBjb2RlIHR5cGljYWxseSBsb29rcyBsaWtlIHRoaXM6XHJcbiAqXHJcbiAqIGBgYGpzXHJcbiAqIGZ1bmN0aW9uIHJlbmRlcigpIHtcclxuICogICByZXR1cm4gKG9wZW5CbG9jaygpLGNyZWF0ZUJsb2NrKCdkaXYnLCBudWxsLCBbLi4uXSkpXHJcbiAqIH1cclxuICogYGBgXHJcbiAqIGRpc2FibGVUcmFja2luZyBpcyB0cnVlIHdoZW4gY3JlYXRpbmcgYSB2LWZvciBmcmFnbWVudCBibG9jaywgc2luY2UgYSB2LWZvclxyXG4gKiBmcmFnbWVudCBhbHdheXMgZGlmZnMgaXRzIGNoaWxkcmVuLlxyXG4gKlxyXG4gKiBAcHJpdmF0ZVxyXG4gKi9cclxuZnVuY3Rpb24gb3BlbkJsb2NrKGRpc2FibGVUcmFja2luZyA9IGZhbHNlKSB7XHJcbiAgICBibG9ja1N0YWNrLnB1c2goKGN1cnJlbnRCbG9jayA9IGRpc2FibGVUcmFja2luZyA/IG51bGwgOiBbXSkpO1xyXG59XHJcbmZ1bmN0aW9uIGNsb3NlQmxvY2soKSB7XHJcbiAgICBibG9ja1N0YWNrLnBvcCgpO1xyXG4gICAgY3VycmVudEJsb2NrID0gYmxvY2tTdGFja1tibG9ja1N0YWNrLmxlbmd0aCAtIDFdIHx8IG51bGw7XHJcbn1cclxuLy8gV2hldGhlciB3ZSBzaG91bGQgYmUgdHJhY2tpbmcgZHluYW1pYyBjaGlsZCBub2RlcyBpbnNpZGUgYSBibG9jay5cclxuLy8gT25seSB0cmFja3Mgd2hlbiB0aGlzIHZhbHVlIGlzID4gMFxyXG4vLyBXZSBhcmUgbm90IHVzaW5nIGEgc2ltcGxlIGJvb2xlYW4gYmVjYXVzZSB0aGlzIHZhbHVlIG1heSBuZWVkIHRvIGJlXHJcbi8vIGluY3JlbWVudGVkL2RlY3JlbWVudGVkIGJ5IG5lc3RlZCB1c2FnZSBvZiB2LW9uY2UgKHNlZSBiZWxvdylcclxubGV0IHNob3VsZFRyYWNrID0gMTtcclxuLyoqXHJcbiAqIEJsb2NrIHRyYWNraW5nIHNvbWV0aW1lcyBuZWVkcyB0byBiZSBkaXNhYmxlZCwgZm9yIGV4YW1wbGUgZHVyaW5nIHRoZVxyXG4gKiBjcmVhdGlvbiBvZiBhIHRyZWUgdGhhdCBuZWVkcyB0byBiZSBjYWNoZWQgYnkgdi1vbmNlLiBUaGUgY29tcGlsZXIgZ2VuZXJhdGVzXHJcbiAqIGNvZGUgbGlrZSB0aGlzOlxyXG4gKlxyXG4gKiBgYGAganNcclxuICogX2NhY2hlWzFdIHx8IChcclxuICogICBzZXRCbG9ja1RyYWNraW5nKC0xKSxcclxuICogICBfY2FjaGVbMV0gPSBjcmVhdGVWTm9kZSguLi4pLFxyXG4gKiAgIHNldEJsb2NrVHJhY2tpbmcoMSksXHJcbiAqICAgX2NhY2hlWzFdXHJcbiAqIClcclxuICogYGBgXHJcbiAqXHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG5mdW5jdGlvbiBzZXRCbG9ja1RyYWNraW5nKHZhbHVlKSB7XHJcbiAgICBzaG91bGRUcmFjayArPSB2YWx1ZTtcclxufVxyXG4vKipcclxuICogQ3JlYXRlIGEgYmxvY2sgcm9vdCB2bm9kZS4gVGFrZXMgdGhlIHNhbWUgZXhhY3QgYXJndW1lbnRzIGFzIGBjcmVhdGVWTm9kZWAuXHJcbiAqIEEgYmxvY2sgcm9vdCBrZWVwcyB0cmFjayBvZiBkeW5hbWljIG5vZGVzIHdpdGhpbiB0aGUgYmxvY2sgaW4gdGhlXHJcbiAqIGBkeW5hbWljQ2hpbGRyZW5gIGFycmF5LlxyXG4gKlxyXG4gKiBAcHJpdmF0ZVxyXG4gKi9cclxuZnVuY3Rpb24gY3JlYXRlQmxvY2sodHlwZSwgcHJvcHMsIGNoaWxkcmVuLCBwYXRjaEZsYWcsIGR5bmFtaWNQcm9wcykge1xyXG4gICAgY29uc3Qgdm5vZGUgPSBjcmVhdGVWTm9kZSh0eXBlLCBwcm9wcywgY2hpbGRyZW4sIHBhdGNoRmxhZywgZHluYW1pY1Byb3BzLCB0cnVlIC8qIGlzQmxvY2s6IHByZXZlbnQgYSBibG9jayBmcm9tIHRyYWNraW5nIGl0c2VsZiAqLyk7XHJcbiAgICAvLyBzYXZlIGN1cnJlbnQgYmxvY2sgY2hpbGRyZW4gb24gdGhlIGJsb2NrIHZub2RlXHJcbiAgICB2bm9kZS5keW5hbWljQ2hpbGRyZW4gPSBjdXJyZW50QmxvY2sgfHwgRU1QVFlfQVJSO1xyXG4gICAgLy8gY2xvc2UgYmxvY2tcclxuICAgIGNsb3NlQmxvY2soKTtcclxuICAgIC8vIGEgYmxvY2sgaXMgYWx3YXlzIGdvaW5nIHRvIGJlIHBhdGNoZWQsIHNvIHRyYWNrIGl0IGFzIGEgY2hpbGQgb2YgaXRzXHJcbiAgICAvLyBwYXJlbnQgYmxvY2tcclxuICAgIGlmIChzaG91bGRUcmFjayA+IDAgJiYgY3VycmVudEJsb2NrKSB7XHJcbiAgICAgICAgY3VycmVudEJsb2NrLnB1c2godm5vZGUpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHZub2RlO1xyXG59XHJcbmZ1bmN0aW9uIGlzVk5vZGUodmFsdWUpIHtcclxuICAgIHJldHVybiB2YWx1ZSA/IHZhbHVlLl9fdl9pc1ZOb2RlID09PSB0cnVlIDogZmFsc2U7XHJcbn1cclxuZnVuY3Rpb24gaXNTYW1lVk5vZGVUeXBlKG4xLCBuMikge1xyXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJlxyXG4gICAgICAgIG4yLnNoYXBlRmxhZyAmIDYgLyogQ09NUE9ORU5UICovICYmXHJcbiAgICAgICAgaG1yRGlydHlDb21wb25lbnRzLmhhcyhuMi50eXBlKSkge1xyXG4gICAgICAgIC8vIEhNUiBvbmx5OiBpZiB0aGUgY29tcG9uZW50IGhhcyBiZWVuIGhvdC11cGRhdGVkLCBmb3JjZSBhIHJlbG9hZC5cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbjEudHlwZSA9PT0gbjIudHlwZSAmJiBuMS5rZXkgPT09IG4yLmtleTtcclxufVxyXG5sZXQgdm5vZGVBcmdzVHJhbnNmb3JtZXI7XHJcbi8qKlxyXG4gKiBJbnRlcm5hbCBBUEkgZm9yIHJlZ2lzdGVyaW5nIGFuIGFyZ3VtZW50cyB0cmFuc2Zvcm0gZm9yIGNyZWF0ZVZOb2RlXHJcbiAqIHVzZWQgZm9yIGNyZWF0aW5nIHN0dWJzIGluIHRoZSB0ZXN0LXV0aWxzXHJcbiAqIEl0IGlzICppbnRlcm5hbCogYnV0IG5lZWRzIHRvIGJlIGV4cG9zZWQgZm9yIHRlc3QtdXRpbHMgdG8gcGljayB1cCBwcm9wZXJcclxuICogdHlwaW5nc1xyXG4gKi9cclxuZnVuY3Rpb24gdHJhbnNmb3JtVk5vZGVBcmdzKHRyYW5zZm9ybWVyKSB7XHJcbiAgICB2bm9kZUFyZ3NUcmFuc2Zvcm1lciA9IHRyYW5zZm9ybWVyO1xyXG59XHJcbmNvbnN0IGNyZWF0ZVZOb2RlV2l0aEFyZ3NUcmFuc2Zvcm0gPSAoLi4uYXJncykgPT4ge1xyXG4gICAgcmV0dXJuIF9jcmVhdGVWTm9kZSguLi4odm5vZGVBcmdzVHJhbnNmb3JtZXJcclxuICAgICAgICA/IHZub2RlQXJnc1RyYW5zZm9ybWVyKGFyZ3MsIGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSlcclxuICAgICAgICA6IGFyZ3MpKTtcclxufTtcclxuY29uc3QgSW50ZXJuYWxPYmplY3RLZXkgPSBgX192SW50ZXJuYWxgO1xyXG5jb25zdCBub3JtYWxpemVLZXkgPSAoeyBrZXkgfSkgPT4ga2V5ICE9IG51bGwgPyBrZXkgOiBudWxsO1xyXG5jb25zdCBub3JtYWxpemVSZWYgPSAoeyByZWYgfSkgPT4ge1xyXG4gICAgcmV0dXJuIChyZWYgIT0gbnVsbFxyXG4gICAgICAgID8gaXNTdHJpbmcocmVmKSB8fCBpc1JlZihyZWYpIHx8IGlzRnVuY3Rpb24ocmVmKVxyXG4gICAgICAgICAgICA/IHsgaTogY3VycmVudFJlbmRlcmluZ0luc3RhbmNlLCByOiByZWYgfVxyXG4gICAgICAgICAgICA6IHJlZlxyXG4gICAgICAgIDogbnVsbCk7XHJcbn07XHJcbmNvbnN0IGNyZWF0ZVZOb2RlID0gKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKVxyXG4gICAgPyBjcmVhdGVWTm9kZVdpdGhBcmdzVHJhbnNmb3JtXHJcbiAgICA6IF9jcmVhdGVWTm9kZSk7XHJcbmZ1bmN0aW9uIF9jcmVhdGVWTm9kZSh0eXBlLCBwcm9wcyA9IG51bGwsIGNoaWxkcmVuID0gbnVsbCwgcGF0Y2hGbGFnID0gMCwgZHluYW1pY1Byb3BzID0gbnVsbCwgaXNCbG9ja05vZGUgPSBmYWxzZSkge1xyXG4gICAgaWYgKCF0eXBlIHx8IHR5cGUgPT09IE5VTExfRFlOQU1JQ19DT01QT05FTlQpIHtcclxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICF0eXBlKSB7XHJcbiAgICAgICAgICAgIHdhcm4oYEludmFsaWQgdm5vZGUgdHlwZSB3aGVuIGNyZWF0aW5nIHZub2RlOiAke3R5cGV9LmApO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0eXBlID0gQ29tbWVudDtcclxuICAgIH1cclxuICAgIGlmIChpc1ZOb2RlKHR5cGUpKSB7XHJcbiAgICAgICAgLy8gY3JlYXRlVk5vZGUgcmVjZWl2aW5nIGFuIGV4aXN0aW5nIHZub2RlLiBUaGlzIGhhcHBlbnMgaW4gY2FzZXMgbGlrZVxyXG4gICAgICAgIC8vIDxjb21wb25lbnQgOmlzPVwidm5vZGVcIi8+XHJcbiAgICAgICAgLy8gIzIwNzggbWFrZSBzdXJlIHRvIG1lcmdlIHJlZnMgZHVyaW5nIHRoZSBjbG9uZSBpbnN0ZWFkIG9mIG92ZXJ3cml0aW5nIGl0XHJcbiAgICAgICAgY29uc3QgY2xvbmVkID0gY2xvbmVWTm9kZSh0eXBlLCBwcm9wcywgdHJ1ZSAvKiBtZXJnZVJlZjogdHJ1ZSAqLyk7XHJcbiAgICAgICAgaWYgKGNoaWxkcmVuKSB7XHJcbiAgICAgICAgICAgIG5vcm1hbGl6ZUNoaWxkcmVuKGNsb25lZCwgY2hpbGRyZW4pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gY2xvbmVkO1xyXG4gICAgfVxyXG4gICAgLy8gY2xhc3MgY29tcG9uZW50IG5vcm1hbGl6YXRpb24uXHJcbiAgICBpZiAoaXNDbGFzc0NvbXBvbmVudCh0eXBlKSkge1xyXG4gICAgICAgIHR5cGUgPSB0eXBlLl9fdmNjT3B0cztcclxuICAgIH1cclxuICAgIC8vIGNsYXNzICYgc3R5bGUgbm9ybWFsaXphdGlvbi5cclxuICAgIGlmIChwcm9wcykge1xyXG4gICAgICAgIC8vIGZvciByZWFjdGl2ZSBvciBwcm94eSBvYmplY3RzLCB3ZSBuZWVkIHRvIGNsb25lIGl0IHRvIGVuYWJsZSBtdXRhdGlvbi5cclxuICAgICAgICBpZiAoaXNQcm94eShwcm9wcykgfHwgSW50ZXJuYWxPYmplY3RLZXkgaW4gcHJvcHMpIHtcclxuICAgICAgICAgICAgcHJvcHMgPSBleHRlbmQoe30sIHByb3BzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IHsgY2xhc3M6IGtsYXNzLCBzdHlsZSB9ID0gcHJvcHM7XHJcbiAgICAgICAgaWYgKGtsYXNzICYmICFpc1N0cmluZyhrbGFzcykpIHtcclxuICAgICAgICAgICAgcHJvcHMuY2xhc3MgPSBub3JtYWxpemVDbGFzcyhrbGFzcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChpc09iamVjdChzdHlsZSkpIHtcclxuICAgICAgICAgICAgLy8gcmVhY3RpdmUgc3RhdGUgb2JqZWN0cyBuZWVkIHRvIGJlIGNsb25lZCBzaW5jZSB0aGV5IGFyZSBsaWtlbHkgdG8gYmVcclxuICAgICAgICAgICAgLy8gbXV0YXRlZFxyXG4gICAgICAgICAgICBpZiAoaXNQcm94eShzdHlsZSkgJiYgIWlzQXJyYXkoc3R5bGUpKSB7XHJcbiAgICAgICAgICAgICAgICBzdHlsZSA9IGV4dGVuZCh7fSwgc3R5bGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHByb3BzLnN0eWxlID0gbm9ybWFsaXplU3R5bGUoc3R5bGUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIGVuY29kZSB0aGUgdm5vZGUgdHlwZSBpbmZvcm1hdGlvbiBpbnRvIGEgYml0bWFwXHJcbiAgICBjb25zdCBzaGFwZUZsYWcgPSBpc1N0cmluZyh0eXBlKVxyXG4gICAgICAgID8gMSAvKiBFTEVNRU5UICovXHJcbiAgICAgICAgOiAgaXNTdXNwZW5zZSh0eXBlKVxyXG4gICAgICAgICAgICA/IDEyOCAvKiBTVVNQRU5TRSAqL1xyXG4gICAgICAgICAgICA6IGlzVGVsZXBvcnQodHlwZSlcclxuICAgICAgICAgICAgICAgID8gNjQgLyogVEVMRVBPUlQgKi9cclxuICAgICAgICAgICAgICAgIDogaXNPYmplY3QodHlwZSlcclxuICAgICAgICAgICAgICAgICAgICA/IDQgLyogU1RBVEVGVUxfQ09NUE9ORU5UICovXHJcbiAgICAgICAgICAgICAgICAgICAgOiBpc0Z1bmN0aW9uKHR5cGUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgID8gMiAvKiBGVU5DVElPTkFMX0NPTVBPTkVOVCAqL1xyXG4gICAgICAgICAgICAgICAgICAgICAgICA6IDA7XHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIHNoYXBlRmxhZyAmIDQgLyogU1RBVEVGVUxfQ09NUE9ORU5UICovICYmIGlzUHJveHkodHlwZSkpIHtcclxuICAgICAgICB0eXBlID0gdG9SYXcodHlwZSk7XHJcbiAgICAgICAgd2FybihgVnVlIHJlY2VpdmVkIGEgQ29tcG9uZW50IHdoaWNoIHdhcyBtYWRlIGEgcmVhY3RpdmUgb2JqZWN0LiBUaGlzIGNhbiBgICtcclxuICAgICAgICAgICAgYGxlYWQgdG8gdW5uZWNlc3NhcnkgcGVyZm9ybWFuY2Ugb3ZlcmhlYWQsIGFuZCBzaG91bGQgYmUgYXZvaWRlZCBieSBgICtcclxuICAgICAgICAgICAgYG1hcmtpbmcgdGhlIGNvbXBvbmVudCB3aXRoIFxcYG1hcmtSYXdcXGAgb3IgdXNpbmcgXFxgc2hhbGxvd1JlZlxcYCBgICtcclxuICAgICAgICAgICAgYGluc3RlYWQgb2YgXFxgcmVmXFxgLmAsIGBcXG5Db21wb25lbnQgdGhhdCB3YXMgbWFkZSByZWFjdGl2ZTogYCwgdHlwZSk7XHJcbiAgICB9XHJcbiAgICBjb25zdCB2bm9kZSA9IHtcclxuICAgICAgICBfX3ZfaXNWTm9kZTogdHJ1ZSxcclxuICAgICAgICBbXCJfX3Zfc2tpcFwiIC8qIFNLSVAgKi9dOiB0cnVlLFxyXG4gICAgICAgIHR5cGUsXHJcbiAgICAgICAgcHJvcHMsXHJcbiAgICAgICAga2V5OiBwcm9wcyAmJiBub3JtYWxpemVLZXkocHJvcHMpLFxyXG4gICAgICAgIHJlZjogcHJvcHMgJiYgbm9ybWFsaXplUmVmKHByb3BzKSxcclxuICAgICAgICBzY29wZUlkOiBjdXJyZW50U2NvcGVJZCxcclxuICAgICAgICBjaGlsZHJlbjogbnVsbCxcclxuICAgICAgICBjb21wb25lbnQ6IG51bGwsXHJcbiAgICAgICAgc3VzcGVuc2U6IG51bGwsXHJcbiAgICAgICAgc3NDb250ZW50OiBudWxsLFxyXG4gICAgICAgIHNzRmFsbGJhY2s6IG51bGwsXHJcbiAgICAgICAgZGlyczogbnVsbCxcclxuICAgICAgICB0cmFuc2l0aW9uOiBudWxsLFxyXG4gICAgICAgIGVsOiBudWxsLFxyXG4gICAgICAgIGFuY2hvcjogbnVsbCxcclxuICAgICAgICB0YXJnZXQ6IG51bGwsXHJcbiAgICAgICAgdGFyZ2V0QW5jaG9yOiBudWxsLFxyXG4gICAgICAgIHN0YXRpY0NvdW50OiAwLFxyXG4gICAgICAgIHNoYXBlRmxhZyxcclxuICAgICAgICBwYXRjaEZsYWcsXHJcbiAgICAgICAgZHluYW1pY1Byb3BzLFxyXG4gICAgICAgIGR5bmFtaWNDaGlsZHJlbjogbnVsbCxcclxuICAgICAgICBhcHBDb250ZXh0OiBudWxsXHJcbiAgICB9O1xyXG4gICAgLy8gdmFsaWRhdGUga2V5XHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIHZub2RlLmtleSAhPT0gdm5vZGUua2V5KSB7XHJcbiAgICAgICAgd2FybihgVk5vZGUgY3JlYXRlZCB3aXRoIGludmFsaWQga2V5IChOYU4pLiBWTm9kZSB0eXBlOmAsIHZub2RlLnR5cGUpO1xyXG4gICAgfVxyXG4gICAgbm9ybWFsaXplQ2hpbGRyZW4odm5vZGUsIGNoaWxkcmVuKTtcclxuICAgIC8vIG5vcm1hbGl6ZSBzdXNwZW5zZSBjaGlsZHJlblxyXG4gICAgaWYgKCBzaGFwZUZsYWcgJiAxMjggLyogU1VTUEVOU0UgKi8pIHtcclxuICAgICAgICBjb25zdCB7IGNvbnRlbnQsIGZhbGxiYWNrIH0gPSBub3JtYWxpemVTdXNwZW5zZUNoaWxkcmVuKHZub2RlKTtcclxuICAgICAgICB2bm9kZS5zc0NvbnRlbnQgPSBjb250ZW50O1xyXG4gICAgICAgIHZub2RlLnNzRmFsbGJhY2sgPSBmYWxsYmFjaztcclxuICAgIH1cclxuICAgIGlmIChzaG91bGRUcmFjayA+IDAgJiZcclxuICAgICAgICAvLyBhdm9pZCBhIGJsb2NrIG5vZGUgZnJvbSB0cmFja2luZyBpdHNlbGZcclxuICAgICAgICAhaXNCbG9ja05vZGUgJiZcclxuICAgICAgICAvLyBoYXMgY3VycmVudCBwYXJlbnQgYmxvY2tcclxuICAgICAgICBjdXJyZW50QmxvY2sgJiZcclxuICAgICAgICAvLyBwcmVzZW5jZSBvZiBhIHBhdGNoIGZsYWcgaW5kaWNhdGVzIHRoaXMgbm9kZSBuZWVkcyBwYXRjaGluZyBvbiB1cGRhdGVzLlxyXG4gICAgICAgIC8vIGNvbXBvbmVudCBub2RlcyBhbHNvIHNob3VsZCBhbHdheXMgYmUgcGF0Y2hlZCwgYmVjYXVzZSBldmVuIGlmIHRoZVxyXG4gICAgICAgIC8vIGNvbXBvbmVudCBkb2Vzbid0IG5lZWQgdG8gdXBkYXRlLCBpdCBuZWVkcyB0byBwZXJzaXN0IHRoZSBpbnN0YW5jZSBvbiB0b1xyXG4gICAgICAgIC8vIHRoZSBuZXh0IHZub2RlIHNvIHRoYXQgaXQgY2FuIGJlIHByb3Blcmx5IHVubW91bnRlZCBsYXRlci5cclxuICAgICAgICAocGF0Y2hGbGFnID4gMCB8fCBzaGFwZUZsYWcgJiA2IC8qIENPTVBPTkVOVCAqLykgJiZcclxuICAgICAgICAvLyB0aGUgRVZFTlRTIGZsYWcgaXMgb25seSBmb3IgaHlkcmF0aW9uIGFuZCBpZiBpdCBpcyB0aGUgb25seSBmbGFnLCB0aGVcclxuICAgICAgICAvLyB2bm9kZSBzaG91bGQgbm90IGJlIGNvbnNpZGVyZWQgZHluYW1pYyBkdWUgdG8gaGFuZGxlciBjYWNoaW5nLlxyXG4gICAgICAgIHBhdGNoRmxhZyAhPT0gMzIgLyogSFlEUkFURV9FVkVOVFMgKi8pIHtcclxuICAgICAgICBjdXJyZW50QmxvY2sucHVzaCh2bm9kZSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdm5vZGU7XHJcbn1cclxuZnVuY3Rpb24gY2xvbmVWTm9kZSh2bm9kZSwgZXh0cmFQcm9wcywgbWVyZ2VSZWYgPSBmYWxzZSkge1xyXG4gICAgLy8gVGhpcyBpcyBpbnRlbnRpb25hbGx5IE5PVCB1c2luZyBzcHJlYWQgb3IgZXh0ZW5kIHRvIGF2b2lkIHRoZSBydW50aW1lXHJcbiAgICAvLyBrZXkgZW51bWVyYXRpb24gY29zdC5cclxuICAgIGNvbnN0IHsgcHJvcHMsIHJlZiwgcGF0Y2hGbGFnIH0gPSB2bm9kZTtcclxuICAgIGNvbnN0IG1lcmdlZFByb3BzID0gZXh0cmFQcm9wcyA/IG1lcmdlUHJvcHMocHJvcHMgfHwge30sIGV4dHJhUHJvcHMpIDogcHJvcHM7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIF9fdl9pc1ZOb2RlOiB0cnVlLFxyXG4gICAgICAgIFtcIl9fdl9za2lwXCIgLyogU0tJUCAqL106IHRydWUsXHJcbiAgICAgICAgdHlwZTogdm5vZGUudHlwZSxcclxuICAgICAgICBwcm9wczogbWVyZ2VkUHJvcHMsXHJcbiAgICAgICAga2V5OiBtZXJnZWRQcm9wcyAmJiBub3JtYWxpemVLZXkobWVyZ2VkUHJvcHMpLFxyXG4gICAgICAgIHJlZjogZXh0cmFQcm9wcyAmJiBleHRyYVByb3BzLnJlZlxyXG4gICAgICAgICAgICA/IC8vICMyMDc4IGluIHRoZSBjYXNlIG9mIDxjb21wb25lbnQgOmlzPVwidm5vZGVcIiByZWY9XCJleHRyYVwiLz5cclxuICAgICAgICAgICAgICAgIC8vIGlmIHRoZSB2bm9kZSBpdHNlbGYgYWxyZWFkeSBoYXMgYSByZWYsIGNsb25lVk5vZGUgd2lsbCBuZWVkIHRvIG1lcmdlXHJcbiAgICAgICAgICAgICAgICAvLyB0aGUgcmVmcyBzbyB0aGUgc2luZ2xlIHZub2RlIGNhbiBiZSBzZXQgb24gbXVsdGlwbGUgcmVmc1xyXG4gICAgICAgICAgICAgICAgbWVyZ2VSZWYgJiYgcmVmXHJcbiAgICAgICAgICAgICAgICAgICAgPyBpc0FycmF5KHJlZilcclxuICAgICAgICAgICAgICAgICAgICAgICAgPyByZWYuY29uY2F0KG5vcm1hbGl6ZVJlZihleHRyYVByb3BzKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgOiBbcmVmLCBub3JtYWxpemVSZWYoZXh0cmFQcm9wcyldXHJcbiAgICAgICAgICAgICAgICAgICAgOiBub3JtYWxpemVSZWYoZXh0cmFQcm9wcylcclxuICAgICAgICAgICAgOiByZWYsXHJcbiAgICAgICAgc2NvcGVJZDogdm5vZGUuc2NvcGVJZCxcclxuICAgICAgICBjaGlsZHJlbjogdm5vZGUuY2hpbGRyZW4sXHJcbiAgICAgICAgdGFyZ2V0OiB2bm9kZS50YXJnZXQsXHJcbiAgICAgICAgdGFyZ2V0QW5jaG9yOiB2bm9kZS50YXJnZXRBbmNob3IsXHJcbiAgICAgICAgc3RhdGljQ291bnQ6IHZub2RlLnN0YXRpY0NvdW50LFxyXG4gICAgICAgIHNoYXBlRmxhZzogdm5vZGUuc2hhcGVGbGFnLFxyXG4gICAgICAgIC8vIGlmIHRoZSB2bm9kZSBpcyBjbG9uZWQgd2l0aCBleHRyYSBwcm9wcywgd2UgY2FuIG5vIGxvbmdlciBhc3N1bWUgaXRzXHJcbiAgICAgICAgLy8gZXhpc3RpbmcgcGF0Y2ggZmxhZyB0byBiZSByZWxpYWJsZSBhbmQgbmVlZCB0byBhZGQgdGhlIEZVTExfUFJPUFMgZmxhZy5cclxuICAgICAgICAvLyBub3RlOiBwZXJzZXJ2ZSBmbGFnIGZvciBmcmFnbWVudHMgc2luY2UgdGhleSB1c2UgdGhlIGZsYWcgZm9yIGNoaWxkcmVuXHJcbiAgICAgICAgLy8gZmFzdCBwYXRocyBvbmx5LlxyXG4gICAgICAgIHBhdGNoRmxhZzogZXh0cmFQcm9wcyAmJiB2bm9kZS50eXBlICE9PSBGcmFnbWVudFxyXG4gICAgICAgICAgICA/IHBhdGNoRmxhZyA9PT0gLTEgLy8gaG9pc3RlZCBub2RlXHJcbiAgICAgICAgICAgICAgICA/IDE2IC8qIEZVTExfUFJPUFMgKi9cclxuICAgICAgICAgICAgICAgIDogcGF0Y2hGbGFnIHwgMTYgLyogRlVMTF9QUk9QUyAqL1xyXG4gICAgICAgICAgICA6IHBhdGNoRmxhZyxcclxuICAgICAgICBkeW5hbWljUHJvcHM6IHZub2RlLmR5bmFtaWNQcm9wcyxcclxuICAgICAgICBkeW5hbWljQ2hpbGRyZW46IHZub2RlLmR5bmFtaWNDaGlsZHJlbixcclxuICAgICAgICBhcHBDb250ZXh0OiB2bm9kZS5hcHBDb250ZXh0LFxyXG4gICAgICAgIGRpcnM6IHZub2RlLmRpcnMsXHJcbiAgICAgICAgdHJhbnNpdGlvbjogdm5vZGUudHJhbnNpdGlvbixcclxuICAgICAgICAvLyBUaGVzZSBzaG91bGQgdGVjaG5pY2FsbHkgb25seSBiZSBub24tbnVsbCBvbiBtb3VudGVkIFZOb2Rlcy4gSG93ZXZlcixcclxuICAgICAgICAvLyB0aGV5ICpzaG91bGQqIGJlIGNvcGllZCBmb3Iga2VwdC1hbGl2ZSB2bm9kZXMuIFNvIHdlIGp1c3QgYWx3YXlzIGNvcHlcclxuICAgICAgICAvLyB0aGVtIHNpbmNlIHRoZW0gYmVpbmcgbm9uLW51bGwgZHVyaW5nIGEgbW91bnQgZG9lc24ndCBhZmZlY3QgdGhlIGxvZ2ljIGFzXHJcbiAgICAgICAgLy8gdGhleSB3aWxsIHNpbXBseSBiZSBvdmVyd3JpdHRlbi5cclxuICAgICAgICBjb21wb25lbnQ6IHZub2RlLmNvbXBvbmVudCxcclxuICAgICAgICBzdXNwZW5zZTogdm5vZGUuc3VzcGVuc2UsXHJcbiAgICAgICAgc3NDb250ZW50OiB2bm9kZS5zc0NvbnRlbnQgJiYgY2xvbmVWTm9kZSh2bm9kZS5zc0NvbnRlbnQpLFxyXG4gICAgICAgIHNzRmFsbGJhY2s6IHZub2RlLnNzRmFsbGJhY2sgJiYgY2xvbmVWTm9kZSh2bm9kZS5zc0ZhbGxiYWNrKSxcclxuICAgICAgICBlbDogdm5vZGUuZWwsXHJcbiAgICAgICAgYW5jaG9yOiB2bm9kZS5hbmNob3JcclxuICAgIH07XHJcbn1cclxuLyoqXHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG5mdW5jdGlvbiBjcmVhdGVUZXh0Vk5vZGUodGV4dCA9ICcgJywgZmxhZyA9IDApIHtcclxuICAgIHJldHVybiBjcmVhdGVWTm9kZShUZXh0LCBudWxsLCB0ZXh0LCBmbGFnKTtcclxufVxyXG4vKipcclxuICogQHByaXZhdGVcclxuICovXHJcbmZ1bmN0aW9uIGNyZWF0ZVN0YXRpY1ZOb2RlKGNvbnRlbnQsIG51bWJlck9mTm9kZXMpIHtcclxuICAgIC8vIEEgc3RhdGljIHZub2RlIGNhbiBjb250YWluIG11bHRpcGxlIHN0cmluZ2lmaWVkIGVsZW1lbnRzLCBhbmQgdGhlIG51bWJlclxyXG4gICAgLy8gb2YgZWxlbWVudHMgaXMgbmVjZXNzYXJ5IGZvciBoeWRyYXRpb24uXHJcbiAgICBjb25zdCB2bm9kZSA9IGNyZWF0ZVZOb2RlKFN0YXRpYywgbnVsbCwgY29udGVudCk7XHJcbiAgICB2bm9kZS5zdGF0aWNDb3VudCA9IG51bWJlck9mTm9kZXM7XHJcbiAgICByZXR1cm4gdm5vZGU7XHJcbn1cclxuLyoqXHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG5mdW5jdGlvbiBjcmVhdGVDb21tZW50Vk5vZGUodGV4dCA9ICcnLCBcclxuLy8gd2hlbiB1c2VkIGFzIHRoZSB2LWVsc2UgYnJhbmNoLCB0aGUgY29tbWVudCBub2RlIG11c3QgYmUgY3JlYXRlZCBhcyBhXHJcbi8vIGJsb2NrIHRvIGVuc3VyZSBjb3JyZWN0IHVwZGF0ZXMuXHJcbmFzQmxvY2sgPSBmYWxzZSkge1xyXG4gICAgcmV0dXJuIGFzQmxvY2tcclxuICAgICAgICA/IChvcGVuQmxvY2soKSwgY3JlYXRlQmxvY2soQ29tbWVudCwgbnVsbCwgdGV4dCkpXHJcbiAgICAgICAgOiBjcmVhdGVWTm9kZShDb21tZW50LCBudWxsLCB0ZXh0KTtcclxufVxyXG5mdW5jdGlvbiBub3JtYWxpemVWTm9kZShjaGlsZCkge1xyXG4gICAgaWYgKGNoaWxkID09IG51bGwgfHwgdHlwZW9mIGNoaWxkID09PSAnYm9vbGVhbicpIHtcclxuICAgICAgICAvLyBlbXB0eSBwbGFjZWhvbGRlclxyXG4gICAgICAgIHJldHVybiBjcmVhdGVWTm9kZShDb21tZW50KTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGlzQXJyYXkoY2hpbGQpKSB7XHJcbiAgICAgICAgLy8gZnJhZ21lbnRcclxuICAgICAgICByZXR1cm4gY3JlYXRlVk5vZGUoRnJhZ21lbnQsIG51bGwsIGNoaWxkKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKHR5cGVvZiBjaGlsZCA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICAvLyBhbHJlYWR5IHZub2RlLCB0aGlzIHNob3VsZCBiZSB0aGUgbW9zdCBjb21tb24gc2luY2UgY29tcGlsZWQgdGVtcGxhdGVzXHJcbiAgICAgICAgLy8gYWx3YXlzIHByb2R1Y2UgYWxsLXZub2RlIGNoaWxkcmVuIGFycmF5c1xyXG4gICAgICAgIHJldHVybiBjaGlsZC5lbCA9PT0gbnVsbCA/IGNoaWxkIDogY2xvbmVWTm9kZShjaGlsZCk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICAvLyBzdHJpbmdzIGFuZCBudW1iZXJzXHJcbiAgICAgICAgcmV0dXJuIGNyZWF0ZVZOb2RlKFRleHQsIG51bGwsIFN0cmluZyhjaGlsZCkpO1xyXG4gICAgfVxyXG59XHJcbi8vIG9wdGltaXplZCBub3JtYWxpemF0aW9uIGZvciB0ZW1wbGF0ZS1jb21waWxlZCByZW5kZXIgZm5zXHJcbmZ1bmN0aW9uIGNsb25lSWZNb3VudGVkKGNoaWxkKSB7XHJcbiAgICByZXR1cm4gY2hpbGQuZWwgPT09IG51bGwgPyBjaGlsZCA6IGNsb25lVk5vZGUoY2hpbGQpO1xyXG59XHJcbmZ1bmN0aW9uIG5vcm1hbGl6ZUNoaWxkcmVuKHZub2RlLCBjaGlsZHJlbikge1xyXG4gICAgbGV0IHR5cGUgPSAwO1xyXG4gICAgY29uc3QgeyBzaGFwZUZsYWcgfSA9IHZub2RlO1xyXG4gICAgaWYgKGNoaWxkcmVuID09IG51bGwpIHtcclxuICAgICAgICBjaGlsZHJlbiA9IG51bGw7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChpc0FycmF5KGNoaWxkcmVuKSkge1xyXG4gICAgICAgIHR5cGUgPSAxNiAvKiBBUlJBWV9DSElMRFJFTiAqLztcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKHR5cGVvZiBjaGlsZHJlbiA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICBpZiAoc2hhcGVGbGFnICYgMSAvKiBFTEVNRU5UICovIHx8IHNoYXBlRmxhZyAmIDY0IC8qIFRFTEVQT1JUICovKSB7XHJcbiAgICAgICAgICAgIC8vIE5vcm1hbGl6ZSBzbG90IHRvIHBsYWluIGNoaWxkcmVuIGZvciBwbGFpbiBlbGVtZW50IGFuZCBUZWxlcG9ydFxyXG4gICAgICAgICAgICBjb25zdCBzbG90ID0gY2hpbGRyZW4uZGVmYXVsdDtcclxuICAgICAgICAgICAgaWYgKHNsb3QpIHtcclxuICAgICAgICAgICAgICAgIC8vIF9jIG1hcmtlciBpcyBhZGRlZCBieSB3aXRoQ3R4KCkgaW5kaWNhdGluZyB0aGlzIGlzIGEgY29tcGlsZWQgc2xvdFxyXG4gICAgICAgICAgICAgICAgc2xvdC5fYyAmJiBzZXRDb21waWxlZFNsb3RSZW5kZXJpbmcoMSk7XHJcbiAgICAgICAgICAgICAgICBub3JtYWxpemVDaGlsZHJlbih2bm9kZSwgc2xvdCgpKTtcclxuICAgICAgICAgICAgICAgIHNsb3QuX2MgJiYgc2V0Q29tcGlsZWRTbG90UmVuZGVyaW5nKC0xKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0eXBlID0gMzIgLyogU0xPVFNfQ0hJTERSRU4gKi87XHJcbiAgICAgICAgICAgIGNvbnN0IHNsb3RGbGFnID0gY2hpbGRyZW4uXztcclxuICAgICAgICAgICAgaWYgKCFzbG90RmxhZyAmJiAhKEludGVybmFsT2JqZWN0S2V5IGluIGNoaWxkcmVuKSkge1xyXG4gICAgICAgICAgICAgICAgY2hpbGRyZW4uX2N0eCA9IGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChzbG90RmxhZyA9PT0gMyAvKiBGT1JXQVJERUQgKi8gJiYgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBhIGNoaWxkIGNvbXBvbmVudCByZWNlaXZlcyBmb3J3YXJkZWQgc2xvdHMgZnJvbSB0aGUgcGFyZW50LlxyXG4gICAgICAgICAgICAgICAgLy8gaXRzIHNsb3QgdHlwZSBpcyBkZXRlcm1pbmVkIGJ5IGl0cyBwYXJlbnQncyBzbG90IHR5cGUuXHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFJlbmRlcmluZ0luc3RhbmNlLnZub2RlLnBhdGNoRmxhZyAmIDEwMjQgLyogRFlOQU1JQ19TTE9UUyAqLykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuLl8gPSAyIC8qIERZTkFNSUMgKi87XHJcbiAgICAgICAgICAgICAgICAgICAgdm5vZGUucGF0Y2hGbGFnIHw9IDEwMjQgLyogRFlOQU1JQ19TTE9UUyAqLztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuLl8gPSAxIC8qIFNUQUJMRSAqLztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGlzRnVuY3Rpb24oY2hpbGRyZW4pKSB7XHJcbiAgICAgICAgY2hpbGRyZW4gPSB7IGRlZmF1bHQ6IGNoaWxkcmVuLCBfY3R4OiBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UgfTtcclxuICAgICAgICB0eXBlID0gMzIgLyogU0xPVFNfQ0hJTERSRU4gKi87XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBjaGlsZHJlbiA9IFN0cmluZyhjaGlsZHJlbik7XHJcbiAgICAgICAgLy8gZm9yY2UgdGVsZXBvcnQgY2hpbGRyZW4gdG8gYXJyYXkgc28gaXQgY2FuIGJlIG1vdmVkIGFyb3VuZFxyXG4gICAgICAgIGlmIChzaGFwZUZsYWcgJiA2NCAvKiBURUxFUE9SVCAqLykge1xyXG4gICAgICAgICAgICB0eXBlID0gMTYgLyogQVJSQVlfQ0hJTERSRU4gKi87XHJcbiAgICAgICAgICAgIGNoaWxkcmVuID0gW2NyZWF0ZVRleHRWTm9kZShjaGlsZHJlbildO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdHlwZSA9IDggLyogVEVYVF9DSElMRFJFTiAqLztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICB2bm9kZS5jaGlsZHJlbiA9IGNoaWxkcmVuO1xyXG4gICAgdm5vZGUuc2hhcGVGbGFnIHw9IHR5cGU7XHJcbn1cclxuZnVuY3Rpb24gbWVyZ2VQcm9wcyguLi5hcmdzKSB7XHJcbiAgICBjb25zdCByZXQgPSBleHRlbmQoe30sIGFyZ3NbMF0pO1xyXG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgY29uc3QgdG9NZXJnZSA9IGFyZ3NbaV07XHJcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gdG9NZXJnZSkge1xyXG4gICAgICAgICAgICBpZiAoa2V5ID09PSAnY2xhc3MnKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocmV0LmNsYXNzICE9PSB0b01lcmdlLmNsYXNzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0LmNsYXNzID0gbm9ybWFsaXplQ2xhc3MoW3JldC5jbGFzcywgdG9NZXJnZS5jbGFzc10pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGtleSA9PT0gJ3N0eWxlJykge1xyXG4gICAgICAgICAgICAgICAgcmV0LnN0eWxlID0gbm9ybWFsaXplU3R5bGUoW3JldC5zdHlsZSwgdG9NZXJnZS5zdHlsZV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGlzT24oa2V5KSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZXhpc3RpbmcgPSByZXRba2V5XTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGluY29taW5nID0gdG9NZXJnZVtrZXldO1xyXG4gICAgICAgICAgICAgICAgaWYgKGV4aXN0aW5nICE9PSBpbmNvbWluZykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldFtrZXldID0gZXhpc3RpbmdcclxuICAgICAgICAgICAgICAgICAgICAgICAgPyBbXS5jb25jYXQoZXhpc3RpbmcsIHRvTWVyZ2Vba2V5XSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgOiBpbmNvbWluZztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChrZXkgIT09ICcnKSB7XHJcbiAgICAgICAgICAgICAgICByZXRba2V5XSA9IHRvTWVyZ2Vba2V5XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiByZXQ7XHJcbn1cblxuZnVuY3Rpb24gcHJvdmlkZShrZXksIHZhbHVlKSB7XHJcbiAgICBpZiAoIWN1cnJlbnRJbnN0YW5jZSkge1xyXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgd2FybihgcHJvdmlkZSgpIGNhbiBvbmx5IGJlIHVzZWQgaW5zaWRlIHNldHVwKCkuYCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgbGV0IHByb3ZpZGVzID0gY3VycmVudEluc3RhbmNlLnByb3ZpZGVzO1xyXG4gICAgICAgIC8vIGJ5IGRlZmF1bHQgYW4gaW5zdGFuY2UgaW5oZXJpdHMgaXRzIHBhcmVudCdzIHByb3ZpZGVzIG9iamVjdFxyXG4gICAgICAgIC8vIGJ1dCB3aGVuIGl0IG5lZWRzIHRvIHByb3ZpZGUgdmFsdWVzIG9mIGl0cyBvd24sIGl0IGNyZWF0ZXMgaXRzXHJcbiAgICAgICAgLy8gb3duIHByb3ZpZGVzIG9iamVjdCB1c2luZyBwYXJlbnQgcHJvdmlkZXMgb2JqZWN0IGFzIHByb3RvdHlwZS5cclxuICAgICAgICAvLyB0aGlzIHdheSBpbiBgaW5qZWN0YCB3ZSBjYW4gc2ltcGx5IGxvb2sgdXAgaW5qZWN0aW9ucyBmcm9tIGRpcmVjdFxyXG4gICAgICAgIC8vIHBhcmVudCBhbmQgbGV0IHRoZSBwcm90b3R5cGUgY2hhaW4gZG8gdGhlIHdvcmsuXHJcbiAgICAgICAgY29uc3QgcGFyZW50UHJvdmlkZXMgPSBjdXJyZW50SW5zdGFuY2UucGFyZW50ICYmIGN1cnJlbnRJbnN0YW5jZS5wYXJlbnQucHJvdmlkZXM7XHJcbiAgICAgICAgaWYgKHBhcmVudFByb3ZpZGVzID09PSBwcm92aWRlcykge1xyXG4gICAgICAgICAgICBwcm92aWRlcyA9IGN1cnJlbnRJbnN0YW5jZS5wcm92aWRlcyA9IE9iamVjdC5jcmVhdGUocGFyZW50UHJvdmlkZXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBUUyBkb2Vzbid0IGFsbG93IHN5bWJvbCBhcyBpbmRleCB0eXBlXHJcbiAgICAgICAgcHJvdmlkZXNba2V5XSA9IHZhbHVlO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGluamVjdChrZXksIGRlZmF1bHRWYWx1ZSwgdHJlYXREZWZhdWx0QXNGYWN0b3J5ID0gZmFsc2UpIHtcclxuICAgIC8vIGZhbGxiYWNrIHRvIGBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2VgIHNvIHRoYXQgdGhpcyBjYW4gYmUgY2FsbGVkIGluXHJcbiAgICAvLyBhIGZ1bmN0aW9uYWwgY29tcG9uZW50XHJcbiAgICBjb25zdCBpbnN0YW5jZSA9IGN1cnJlbnRJbnN0YW5jZSB8fCBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2U7XHJcbiAgICBpZiAoaW5zdGFuY2UpIHtcclxuICAgICAgICAvLyAjMjQwMFxyXG4gICAgICAgIC8vIHRvIHN1cHBvcnQgYGFwcC51c2VgIHBsdWdpbnMsXHJcbiAgICAgICAgLy8gZmFsbGJhY2sgdG8gYXBwQ29udGV4dCdzIGBwcm92aWRlc2AgaWYgdGhlIGludGFuY2UgaXMgYXQgcm9vdFxyXG4gICAgICAgIGNvbnN0IHByb3ZpZGVzID0gaW5zdGFuY2UucGFyZW50ID09IG51bGxcclxuICAgICAgICAgICAgPyBpbnN0YW5jZS52bm9kZS5hcHBDb250ZXh0ICYmIGluc3RhbmNlLnZub2RlLmFwcENvbnRleHQucHJvdmlkZXNcclxuICAgICAgICAgICAgOiBpbnN0YW5jZS5wYXJlbnQucHJvdmlkZXM7XHJcbiAgICAgICAgaWYgKHByb3ZpZGVzICYmIGtleSBpbiBwcm92aWRlcykge1xyXG4gICAgICAgICAgICAvLyBUUyBkb2Vzbid0IGFsbG93IHN5bWJvbCBhcyBpbmRleCB0eXBlXHJcbiAgICAgICAgICAgIHJldHVybiBwcm92aWRlc1trZXldO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJlYXREZWZhdWx0QXNGYWN0b3J5ICYmIGlzRnVuY3Rpb24oZGVmYXVsdFZhbHVlKVxyXG4gICAgICAgICAgICAgICAgPyBkZWZhdWx0VmFsdWUoKVxyXG4gICAgICAgICAgICAgICAgOiBkZWZhdWx0VmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICB3YXJuKGBpbmplY3Rpb24gXCIke1N0cmluZyhrZXkpfVwiIG5vdCBmb3VuZC5gKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICB3YXJuKGBpbmplY3QoKSBjYW4gb25seSBiZSB1c2VkIGluc2lkZSBzZXR1cCgpIG9yIGZ1bmN0aW9uYWwgY29tcG9uZW50cy5gKTtcclxuICAgIH1cclxufVxuXG5mdW5jdGlvbiBjcmVhdGVEdXBsaWNhdGVDaGVja2VyKCkge1xyXG4gICAgY29uc3QgY2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xyXG4gICAgcmV0dXJuICh0eXBlLCBrZXkpID0+IHtcclxuICAgICAgICBpZiAoY2FjaGVba2V5XSkge1xyXG4gICAgICAgICAgICB3YXJuKGAke3R5cGV9IHByb3BlcnR5IFwiJHtrZXl9XCIgaXMgYWxyZWFkeSBkZWZpbmVkIGluICR7Y2FjaGVba2V5XX0uYCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjYWNoZVtrZXldID0gdHlwZTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59XHJcbmxldCBpc0luQmVmb3JlQ3JlYXRlID0gZmFsc2U7XHJcbmZ1bmN0aW9uIGFwcGx5T3B0aW9ucyhpbnN0YW5jZSwgb3B0aW9ucywgZGVmZXJyZWREYXRhID0gW10sIGRlZmVycmVkV2F0Y2ggPSBbXSwgZGVmZXJyZWRQcm92aWRlID0gW10sIGFzTWl4aW4gPSBmYWxzZSkge1xyXG4gICAgY29uc3QgeyBcclxuICAgIC8vIGNvbXBvc2l0aW9uXHJcbiAgICBtaXhpbnMsIGV4dGVuZHM6IGV4dGVuZHNPcHRpb25zLCBcclxuICAgIC8vIHN0YXRlXHJcbiAgICBkYXRhOiBkYXRhT3B0aW9ucywgY29tcHV0ZWQ6IGNvbXB1dGVkT3B0aW9ucywgbWV0aG9kcywgd2F0Y2g6IHdhdGNoT3B0aW9ucywgcHJvdmlkZTogcHJvdmlkZU9wdGlvbnMsIGluamVjdDogaW5qZWN0T3B0aW9ucywgXHJcbiAgICAvLyBhc3NldHNcclxuICAgIGNvbXBvbmVudHMsIGRpcmVjdGl2ZXMsIFxyXG4gICAgLy8gbGlmZWN5Y2xlXHJcbiAgICBiZWZvcmVNb3VudCwgbW91bnRlZCwgYmVmb3JlVXBkYXRlLCB1cGRhdGVkLCBhY3RpdmF0ZWQsIGRlYWN0aXZhdGVkLCBiZWZvcmVEZXN0cm95LCBiZWZvcmVVbm1vdW50LCBkZXN0cm95ZWQsIHVubW91bnRlZCwgcmVuZGVyLCByZW5kZXJUcmFja2VkLCByZW5kZXJUcmlnZ2VyZWQsIGVycm9yQ2FwdHVyZWQsIFxyXG4gICAgLy8gcHVibGljIEFQSVxyXG4gICAgZXhwb3NlIH0gPSBvcHRpb25zO1xyXG4gICAgY29uc3QgcHVibGljVGhpcyA9IGluc3RhbmNlLnByb3h5O1xyXG4gICAgY29uc3QgY3R4ID0gaW5zdGFuY2UuY3R4O1xyXG4gICAgY29uc3QgZ2xvYmFsTWl4aW5zID0gaW5zdGFuY2UuYXBwQ29udGV4dC5taXhpbnM7XHJcbiAgICBpZiAoYXNNaXhpbiAmJiByZW5kZXIgJiYgaW5zdGFuY2UucmVuZGVyID09PSBOT09QKSB7XHJcbiAgICAgICAgaW5zdGFuY2UucmVuZGVyID0gcmVuZGVyO1xyXG4gICAgfVxyXG4gICAgLy8gYXBwbHlPcHRpb25zIGlzIGNhbGxlZCBub24tYXMtbWl4aW4gb25jZSBwZXIgaW5zdGFuY2VcclxuICAgIGlmICghYXNNaXhpbikge1xyXG4gICAgICAgIGlzSW5CZWZvcmVDcmVhdGUgPSB0cnVlO1xyXG4gICAgICAgIGNhbGxTeW5jSG9vaygnYmVmb3JlQ3JlYXRlJywgXCJiY1wiIC8qIEJFRk9SRV9DUkVBVEUgKi8sIG9wdGlvbnMsIGluc3RhbmNlLCBnbG9iYWxNaXhpbnMpO1xyXG4gICAgICAgIGlzSW5CZWZvcmVDcmVhdGUgPSBmYWxzZTtcclxuICAgICAgICAvLyBnbG9iYWwgbWl4aW5zIGFyZSBhcHBsaWVkIGZpcnN0XHJcbiAgICAgICAgYXBwbHlNaXhpbnMoaW5zdGFuY2UsIGdsb2JhbE1peGlucywgZGVmZXJyZWREYXRhLCBkZWZlcnJlZFdhdGNoLCBkZWZlcnJlZFByb3ZpZGUpO1xyXG4gICAgfVxyXG4gICAgLy8gZXh0ZW5kaW5nIGEgYmFzZSBjb21wb25lbnQuLi5cclxuICAgIGlmIChleHRlbmRzT3B0aW9ucykge1xyXG4gICAgICAgIGFwcGx5T3B0aW9ucyhpbnN0YW5jZSwgZXh0ZW5kc09wdGlvbnMsIGRlZmVycmVkRGF0YSwgZGVmZXJyZWRXYXRjaCwgZGVmZXJyZWRQcm92aWRlLCB0cnVlKTtcclxuICAgIH1cclxuICAgIC8vIGxvY2FsIG1peGluc1xyXG4gICAgaWYgKG1peGlucykge1xyXG4gICAgICAgIGFwcGx5TWl4aW5zKGluc3RhbmNlLCBtaXhpbnMsIGRlZmVycmVkRGF0YSwgZGVmZXJyZWRXYXRjaCwgZGVmZXJyZWRQcm92aWRlKTtcclxuICAgIH1cclxuICAgIGNvbnN0IGNoZWNrRHVwbGljYXRlUHJvcGVydGllcyA9IChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSA/IGNyZWF0ZUR1cGxpY2F0ZUNoZWNrZXIoKSA6IG51bGw7XHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgY29uc3QgW3Byb3BzT3B0aW9uc10gPSBpbnN0YW5jZS5wcm9wc09wdGlvbnM7XHJcbiAgICAgICAgaWYgKHByb3BzT3B0aW9ucykge1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBwcm9wc09wdGlvbnMpIHtcclxuICAgICAgICAgICAgICAgIGNoZWNrRHVwbGljYXRlUHJvcGVydGllcyhcIlByb3BzXCIgLyogUFJPUFMgKi8sIGtleSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyBvcHRpb25zIGluaXRpYWxpemF0aW9uIG9yZGVyICh0byBiZSBjb25zaXN0ZW50IHdpdGggVnVlIDIpOlxyXG4gICAgLy8gLSBwcm9wcyAoYWxyZWFkeSBkb25lIG91dHNpZGUgb2YgdGhpcyBmdW5jdGlvbilcclxuICAgIC8vIC0gaW5qZWN0XHJcbiAgICAvLyAtIG1ldGhvZHNcclxuICAgIC8vIC0gZGF0YSAoZGVmZXJyZWQgc2luY2UgaXQgcmVsaWVzIG9uIGB0aGlzYCBhY2Nlc3MpXHJcbiAgICAvLyAtIGNvbXB1dGVkXHJcbiAgICAvLyAtIHdhdGNoIChkZWZlcnJlZCBzaW5jZSBpdCByZWxpZXMgb24gYHRoaXNgIGFjY2VzcylcclxuICAgIGlmIChpbmplY3RPcHRpb25zKSB7XHJcbiAgICAgICAgaWYgKGlzQXJyYXkoaW5qZWN0T3B0aW9ucykpIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbmplY3RPcHRpb25zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBrZXkgPSBpbmplY3RPcHRpb25zW2ldO1xyXG4gICAgICAgICAgICAgICAgY3R4W2tleV0gPSBpbmplY3Qoa2V5KTtcclxuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgICAgICBjaGVja0R1cGxpY2F0ZVByb3BlcnRpZXMoXCJJbmplY3RcIiAvKiBJTkpFQ1QgKi8sIGtleSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIGluamVjdE9wdGlvbnMpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG9wdCA9IGluamVjdE9wdGlvbnNba2V5XTtcclxuICAgICAgICAgICAgICAgIGlmIChpc09iamVjdChvcHQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY3R4W2tleV0gPSBpbmplY3Qob3B0LmZyb20gfHwga2V5LCBvcHQuZGVmYXVsdCwgdHJ1ZSAvKiB0cmVhdCBkZWZhdWx0IGZ1bmN0aW9uIGFzIGZhY3RvcnkgKi8pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY3R4W2tleV0gPSBpbmplY3Qob3B0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgICAgICBjaGVja0R1cGxpY2F0ZVByb3BlcnRpZXMoXCJJbmplY3RcIiAvKiBJTkpFQ1QgKi8sIGtleSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAobWV0aG9kcykge1xyXG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIG1ldGhvZHMpIHtcclxuICAgICAgICAgICAgY29uc3QgbWV0aG9kSGFuZGxlciA9IG1ldGhvZHNba2V5XTtcclxuICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24obWV0aG9kSGFuZGxlcikpIHtcclxuICAgICAgICAgICAgICAgIGN0eFtrZXldID0gbWV0aG9kSGFuZGxlci5iaW5kKHB1YmxpY1RoaXMpO1xyXG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNoZWNrRHVwbGljYXRlUHJvcGVydGllcyhcIk1ldGhvZHNcIiAvKiBNRVRIT0RTICovLCBrZXkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICAgICAgd2FybihgTWV0aG9kIFwiJHtrZXl9XCIgaGFzIHR5cGUgXCIke3R5cGVvZiBtZXRob2RIYW5kbGVyfVwiIGluIHRoZSBjb21wb25lbnQgZGVmaW5pdGlvbi4gYCArXHJcbiAgICAgICAgICAgICAgICAgICAgYERpZCB5b3UgcmVmZXJlbmNlIHRoZSBmdW5jdGlvbiBjb3JyZWN0bHk/YCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAoIWFzTWl4aW4pIHtcclxuICAgICAgICBpZiAoZGVmZXJyZWREYXRhLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBkZWZlcnJlZERhdGEuZm9yRWFjaChkYXRhRm4gPT4gcmVzb2x2ZURhdGEoaW5zdGFuY2UsIGRhdGFGbiwgcHVibGljVGhpcykpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZGF0YU9wdGlvbnMpIHtcclxuICAgICAgICAgICAgcmVzb2x2ZURhdGEoaW5zdGFuY2UsIGRhdGFPcHRpb25zLCBwdWJsaWNUaGlzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICBjb25zdCByYXdEYXRhID0gdG9SYXcoaW5zdGFuY2UuZGF0YSk7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIHJhd0RhdGEpIHtcclxuICAgICAgICAgICAgICAgIGNoZWNrRHVwbGljYXRlUHJvcGVydGllcyhcIkRhdGFcIiAvKiBEQVRBICovLCBrZXkpO1xyXG4gICAgICAgICAgICAgICAgLy8gZXhwb3NlIGRhdGEgb24gY3R4IGR1cmluZyBkZXZcclxuICAgICAgICAgICAgICAgIGlmIChrZXlbMF0gIT09ICckJyAmJiBrZXlbMF0gIT09ICdfJykge1xyXG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjdHgsIGtleSwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGdldDogKCkgPT4gcmF3RGF0YVtrZXldLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXQ6IE5PT1BcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGRhdGFPcHRpb25zKSB7XHJcbiAgICAgICAgZGVmZXJyZWREYXRhLnB1c2goZGF0YU9wdGlvbnMpO1xyXG4gICAgfVxyXG4gICAgaWYgKGNvbXB1dGVkT3B0aW9ucykge1xyXG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIGNvbXB1dGVkT3B0aW9ucykge1xyXG4gICAgICAgICAgICBjb25zdCBvcHQgPSBjb21wdXRlZE9wdGlvbnNba2V5XTtcclxuICAgICAgICAgICAgY29uc3QgZ2V0ID0gaXNGdW5jdGlvbihvcHQpXHJcbiAgICAgICAgICAgICAgICA/IG9wdC5iaW5kKHB1YmxpY1RoaXMsIHB1YmxpY1RoaXMpXHJcbiAgICAgICAgICAgICAgICA6IGlzRnVuY3Rpb24ob3B0LmdldClcclxuICAgICAgICAgICAgICAgICAgICA/IG9wdC5nZXQuYmluZChwdWJsaWNUaGlzLCBwdWJsaWNUaGlzKVxyXG4gICAgICAgICAgICAgICAgICAgIDogTk9PUDtcclxuICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBnZXQgPT09IE5PT1ApIHtcclxuICAgICAgICAgICAgICAgIHdhcm4oYENvbXB1dGVkIHByb3BlcnR5IFwiJHtrZXl9XCIgaGFzIG5vIGdldHRlci5gKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBzZXQgPSAhaXNGdW5jdGlvbihvcHQpICYmIGlzRnVuY3Rpb24ob3B0LnNldClcclxuICAgICAgICAgICAgICAgID8gb3B0LnNldC5iaW5kKHB1YmxpY1RoaXMpXHJcbiAgICAgICAgICAgICAgICA6IChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKVxyXG4gICAgICAgICAgICAgICAgICAgID8gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3YXJuKGBXcml0ZSBvcGVyYXRpb24gZmFpbGVkOiBjb21wdXRlZCBwcm9wZXJ0eSBcIiR7a2V5fVwiIGlzIHJlYWRvbmx5LmApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICA6IE5PT1A7XHJcbiAgICAgICAgICAgIGNvbnN0IGMgPSBjb21wdXRlZCh7XHJcbiAgICAgICAgICAgICAgICBnZXQsXHJcbiAgICAgICAgICAgICAgICBzZXRcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjdHgsIGtleSwge1xyXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGdldDogKCkgPT4gYy52YWx1ZSxcclxuICAgICAgICAgICAgICAgIHNldDogdiA9PiAoYy52YWx1ZSA9IHYpXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICBjaGVja0R1cGxpY2F0ZVByb3BlcnRpZXMoXCJDb21wdXRlZFwiIC8qIENPTVBVVEVEICovLCBrZXkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKHdhdGNoT3B0aW9ucykge1xyXG4gICAgICAgIGRlZmVycmVkV2F0Y2gucHVzaCh3YXRjaE9wdGlvbnMpO1xyXG4gICAgfVxyXG4gICAgaWYgKCFhc01peGluICYmIGRlZmVycmVkV2F0Y2gubGVuZ3RoKSB7XHJcbiAgICAgICAgZGVmZXJyZWRXYXRjaC5mb3JFYWNoKHdhdGNoT3B0aW9ucyA9PiB7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIHdhdGNoT3B0aW9ucykge1xyXG4gICAgICAgICAgICAgICAgY3JlYXRlV2F0Y2hlcih3YXRjaE9wdGlvbnNba2V5XSwgY3R4LCBwdWJsaWNUaGlzLCBrZXkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBpZiAocHJvdmlkZU9wdGlvbnMpIHtcclxuICAgICAgICBkZWZlcnJlZFByb3ZpZGUucHVzaChwcm92aWRlT3B0aW9ucyk7XHJcbiAgICB9XHJcbiAgICBpZiAoIWFzTWl4aW4gJiYgZGVmZXJyZWRQcm92aWRlLmxlbmd0aCkge1xyXG4gICAgICAgIGRlZmVycmVkUHJvdmlkZS5mb3JFYWNoKHByb3ZpZGVPcHRpb25zID0+IHtcclxuICAgICAgICAgICAgY29uc3QgcHJvdmlkZXMgPSBpc0Z1bmN0aW9uKHByb3ZpZGVPcHRpb25zKVxyXG4gICAgICAgICAgICAgICAgPyBwcm92aWRlT3B0aW9ucy5jYWxsKHB1YmxpY1RoaXMpXHJcbiAgICAgICAgICAgICAgICA6IHByb3ZpZGVPcHRpb25zO1xyXG4gICAgICAgICAgICBSZWZsZWN0Lm93bktleXMocHJvdmlkZXMpLmZvckVhY2goa2V5ID0+IHtcclxuICAgICAgICAgICAgICAgIHByb3ZpZGUoa2V5LCBwcm92aWRlc1trZXldKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICAvLyBhc3NldCBvcHRpb25zLlxyXG4gICAgLy8gVG8gcmVkdWNlIG1lbW9yeSB1c2FnZSwgb25seSBjb21wb25lbnRzIHdpdGggbWl4aW5zIG9yIGV4dGVuZHMgd2lsbCBoYXZlXHJcbiAgICAvLyByZXNvbHZlZCBhc3NldCByZWdpc3RyeSBhdHRhY2hlZCB0byBpbnN0YW5jZS5cclxuICAgIGlmIChhc01peGluKSB7XHJcbiAgICAgICAgaWYgKGNvbXBvbmVudHMpIHtcclxuICAgICAgICAgICAgZXh0ZW5kKGluc3RhbmNlLmNvbXBvbmVudHMgfHxcclxuICAgICAgICAgICAgICAgIChpbnN0YW5jZS5jb21wb25lbnRzID0gZXh0ZW5kKHt9LCBpbnN0YW5jZS50eXBlLmNvbXBvbmVudHMpKSwgY29tcG9uZW50cyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChkaXJlY3RpdmVzKSB7XHJcbiAgICAgICAgICAgIGV4dGVuZChpbnN0YW5jZS5kaXJlY3RpdmVzIHx8XHJcbiAgICAgICAgICAgICAgICAoaW5zdGFuY2UuZGlyZWN0aXZlcyA9IGV4dGVuZCh7fSwgaW5zdGFuY2UudHlwZS5kaXJlY3RpdmVzKSksIGRpcmVjdGl2ZXMpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIGxpZmVjeWNsZSBvcHRpb25zXHJcbiAgICBpZiAoIWFzTWl4aW4pIHtcclxuICAgICAgICBjYWxsU3luY0hvb2soJ2NyZWF0ZWQnLCBcImNcIiAvKiBDUkVBVEVEICovLCBvcHRpb25zLCBpbnN0YW5jZSwgZ2xvYmFsTWl4aW5zKTtcclxuICAgIH1cclxuICAgIGlmIChiZWZvcmVNb3VudCkge1xyXG4gICAgICAgIG9uQmVmb3JlTW91bnQoYmVmb3JlTW91bnQuYmluZChwdWJsaWNUaGlzKSk7XHJcbiAgICB9XHJcbiAgICBpZiAobW91bnRlZCkge1xyXG4gICAgICAgIG9uTW91bnRlZChtb3VudGVkLmJpbmQocHVibGljVGhpcykpO1xyXG4gICAgfVxyXG4gICAgaWYgKGJlZm9yZVVwZGF0ZSkge1xyXG4gICAgICAgIG9uQmVmb3JlVXBkYXRlKGJlZm9yZVVwZGF0ZS5iaW5kKHB1YmxpY1RoaXMpKTtcclxuICAgIH1cclxuICAgIGlmICh1cGRhdGVkKSB7XHJcbiAgICAgICAgb25VcGRhdGVkKHVwZGF0ZWQuYmluZChwdWJsaWNUaGlzKSk7XHJcbiAgICB9XHJcbiAgICBpZiAoYWN0aXZhdGVkKSB7XHJcbiAgICAgICAgb25BY3RpdmF0ZWQoYWN0aXZhdGVkLmJpbmQocHVibGljVGhpcykpO1xyXG4gICAgfVxyXG4gICAgaWYgKGRlYWN0aXZhdGVkKSB7XHJcbiAgICAgICAgb25EZWFjdGl2YXRlZChkZWFjdGl2YXRlZC5iaW5kKHB1YmxpY1RoaXMpKTtcclxuICAgIH1cclxuICAgIGlmIChlcnJvckNhcHR1cmVkKSB7XHJcbiAgICAgICAgb25FcnJvckNhcHR1cmVkKGVycm9yQ2FwdHVyZWQuYmluZChwdWJsaWNUaGlzKSk7XHJcbiAgICB9XHJcbiAgICBpZiAocmVuZGVyVHJhY2tlZCkge1xyXG4gICAgICAgIG9uUmVuZGVyVHJhY2tlZChyZW5kZXJUcmFja2VkLmJpbmQocHVibGljVGhpcykpO1xyXG4gICAgfVxyXG4gICAgaWYgKHJlbmRlclRyaWdnZXJlZCkge1xyXG4gICAgICAgIG9uUmVuZGVyVHJpZ2dlcmVkKHJlbmRlclRyaWdnZXJlZC5iaW5kKHB1YmxpY1RoaXMpKTtcclxuICAgIH1cclxuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgYmVmb3JlRGVzdHJveSkge1xyXG4gICAgICAgIHdhcm4oYFxcYGJlZm9yZURlc3Ryb3lcXGAgaGFzIGJlZW4gcmVuYW1lZCB0byBcXGBiZWZvcmVVbm1vdW50XFxgLmApO1xyXG4gICAgfVxyXG4gICAgaWYgKGJlZm9yZVVubW91bnQpIHtcclxuICAgICAgICBvbkJlZm9yZVVubW91bnQoYmVmb3JlVW5tb3VudC5iaW5kKHB1YmxpY1RoaXMpKTtcclxuICAgIH1cclxuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgZGVzdHJveWVkKSB7XHJcbiAgICAgICAgd2FybihgXFxgZGVzdHJveWVkXFxgIGhhcyBiZWVuIHJlbmFtZWQgdG8gXFxgdW5tb3VudGVkXFxgLmApO1xyXG4gICAgfVxyXG4gICAgaWYgKHVubW91bnRlZCkge1xyXG4gICAgICAgIG9uVW5tb3VudGVkKHVubW91bnRlZC5iaW5kKHB1YmxpY1RoaXMpKTtcclxuICAgIH1cclxuICAgIGlmIChpc0FycmF5KGV4cG9zZSkpIHtcclxuICAgICAgICBpZiAoIWFzTWl4aW4pIHtcclxuICAgICAgICAgICAgaWYgKGV4cG9zZS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGV4cG9zZWQgPSBpbnN0YW5jZS5leHBvc2VkIHx8IChpbnN0YW5jZS5leHBvc2VkID0gcHJveHlSZWZzKHt9KSk7XHJcbiAgICAgICAgICAgICAgICBleHBvc2UuZm9yRWFjaChrZXkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGV4cG9zZWRba2V5XSA9IHRvUmVmKHB1YmxpY1RoaXMsIGtleSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICghaW5zdGFuY2UuZXhwb3NlZCkge1xyXG4gICAgICAgICAgICAgICAgaW5zdGFuY2UuZXhwb3NlZCA9IEVNUFRZX09CSjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgd2FybihgVGhlIFxcYGV4cG9zZVxcYCBvcHRpb24gaXMgaWdub3JlZCB3aGVuIHVzZWQgaW4gbWl4aW5zLmApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBjYWxsU3luY0hvb2sobmFtZSwgdHlwZSwgb3B0aW9ucywgaW5zdGFuY2UsIGdsb2JhbE1peGlucykge1xyXG4gICAgY2FsbEhvb2tGcm9tTWl4aW5zKG5hbWUsIHR5cGUsIGdsb2JhbE1peGlucywgaW5zdGFuY2UpO1xyXG4gICAgY29uc3QgeyBleHRlbmRzOiBiYXNlLCBtaXhpbnMgfSA9IG9wdGlvbnM7XHJcbiAgICBpZiAoYmFzZSkge1xyXG4gICAgICAgIGNhbGxIb29rRnJvbUV4dGVuZHMobmFtZSwgdHlwZSwgYmFzZSwgaW5zdGFuY2UpO1xyXG4gICAgfVxyXG4gICAgaWYgKG1peGlucykge1xyXG4gICAgICAgIGNhbGxIb29rRnJvbU1peGlucyhuYW1lLCB0eXBlLCBtaXhpbnMsIGluc3RhbmNlKTtcclxuICAgIH1cclxuICAgIGNvbnN0IHNlbGZIb29rID0gb3B0aW9uc1tuYW1lXTtcclxuICAgIGlmIChzZWxmSG9vaykge1xyXG4gICAgICAgIGNhbGxXaXRoQXN5bmNFcnJvckhhbmRsaW5nKHNlbGZIb29rLmJpbmQoaW5zdGFuY2UucHJveHkpLCBpbnN0YW5jZSwgdHlwZSk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gY2FsbEhvb2tGcm9tRXh0ZW5kcyhuYW1lLCB0eXBlLCBiYXNlLCBpbnN0YW5jZSkge1xyXG4gICAgaWYgKGJhc2UuZXh0ZW5kcykge1xyXG4gICAgICAgIGNhbGxIb29rRnJvbUV4dGVuZHMobmFtZSwgdHlwZSwgYmFzZS5leHRlbmRzLCBpbnN0YW5jZSk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBiYXNlSG9vayA9IGJhc2VbbmFtZV07XHJcbiAgICBpZiAoYmFzZUhvb2spIHtcclxuICAgICAgICBjYWxsV2l0aEFzeW5jRXJyb3JIYW5kbGluZyhiYXNlSG9vay5iaW5kKGluc3RhbmNlLnByb3h5KSwgaW5zdGFuY2UsIHR5cGUpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGNhbGxIb29rRnJvbU1peGlucyhuYW1lLCB0eXBlLCBtaXhpbnMsIGluc3RhbmNlKSB7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1peGlucy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGNvbnN0IGNoYWluZWRNaXhpbnMgPSBtaXhpbnNbaV0ubWl4aW5zO1xyXG4gICAgICAgIGlmIChjaGFpbmVkTWl4aW5zKSB7XHJcbiAgICAgICAgICAgIGNhbGxIb29rRnJvbU1peGlucyhuYW1lLCB0eXBlLCBjaGFpbmVkTWl4aW5zLCBpbnN0YW5jZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGZuID0gbWl4aW5zW2ldW25hbWVdO1xyXG4gICAgICAgIGlmIChmbikge1xyXG4gICAgICAgICAgICBjYWxsV2l0aEFzeW5jRXJyb3JIYW5kbGluZyhmbi5iaW5kKGluc3RhbmNlLnByb3h5KSwgaW5zdGFuY2UsIHR5cGUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBhcHBseU1peGlucyhpbnN0YW5jZSwgbWl4aW5zLCBkZWZlcnJlZERhdGEsIGRlZmVycmVkV2F0Y2gsIGRlZmVycmVkUHJvdmlkZSkge1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtaXhpbnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBhcHBseU9wdGlvbnMoaW5zdGFuY2UsIG1peGluc1tpXSwgZGVmZXJyZWREYXRhLCBkZWZlcnJlZFdhdGNoLCBkZWZlcnJlZFByb3ZpZGUsIHRydWUpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIHJlc29sdmVEYXRhKGluc3RhbmNlLCBkYXRhRm4sIHB1YmxpY1RoaXMpIHtcclxuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIWlzRnVuY3Rpb24oZGF0YUZuKSkge1xyXG4gICAgICAgIHdhcm4oYFRoZSBkYXRhIG9wdGlvbiBtdXN0IGJlIGEgZnVuY3Rpb24uIGAgK1xyXG4gICAgICAgICAgICBgUGxhaW4gb2JqZWN0IHVzYWdlIGlzIG5vIGxvbmdlciBzdXBwb3J0ZWQuYCk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBkYXRhID0gZGF0YUZuLmNhbGwocHVibGljVGhpcywgcHVibGljVGhpcyk7XHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIGlzUHJvbWlzZShkYXRhKSkge1xyXG4gICAgICAgIHdhcm4oYGRhdGEoKSByZXR1cm5lZCBhIFByb21pc2UgLSBub3RlIGRhdGEoKSBjYW5ub3QgYmUgYXN5bmM7IElmIHlvdSBgICtcclxuICAgICAgICAgICAgYGludGVuZCB0byBwZXJmb3JtIGRhdGEgZmV0Y2hpbmcgYmVmb3JlIGNvbXBvbmVudCByZW5kZXJzLCB1c2UgYCArXHJcbiAgICAgICAgICAgIGBhc3luYyBzZXR1cCgpICsgPFN1c3BlbnNlPi5gKTtcclxuICAgIH1cclxuICAgIGlmICghaXNPYmplY3QoZGF0YSkpIHtcclxuICAgICAgICAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgd2FybihgZGF0YSgpIHNob3VsZCByZXR1cm4gYW4gb2JqZWN0LmApO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoaW5zdGFuY2UuZGF0YSA9PT0gRU1QVFlfT0JKKSB7XHJcbiAgICAgICAgaW5zdGFuY2UuZGF0YSA9IHJlYWN0aXZlKGRhdGEpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgLy8gZXhpc3RpbmcgZGF0YTogdGhpcyBpcyBhIG1peGluIG9yIGV4dGVuZHMuXHJcbiAgICAgICAgZXh0ZW5kKGluc3RhbmNlLmRhdGEsIGRhdGEpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGNyZWF0ZVdhdGNoZXIocmF3LCBjdHgsIHB1YmxpY1RoaXMsIGtleSkge1xyXG4gICAgY29uc3QgZ2V0dGVyID0ga2V5LmluY2x1ZGVzKCcuJylcclxuICAgICAgICA/IGNyZWF0ZVBhdGhHZXR0ZXIocHVibGljVGhpcywga2V5KVxyXG4gICAgICAgIDogKCkgPT4gcHVibGljVGhpc1trZXldO1xyXG4gICAgaWYgKGlzU3RyaW5nKHJhdykpIHtcclxuICAgICAgICBjb25zdCBoYW5kbGVyID0gY3R4W3Jhd107XHJcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24oaGFuZGxlcikpIHtcclxuICAgICAgICAgICAgd2F0Y2goZ2V0dGVyLCBoYW5kbGVyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgIHdhcm4oYEludmFsaWQgd2F0Y2ggaGFuZGxlciBzcGVjaWZpZWQgYnkga2V5IFwiJHtyYXd9XCJgLCBoYW5kbGVyKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChpc0Z1bmN0aW9uKHJhdykpIHtcclxuICAgICAgICB3YXRjaChnZXR0ZXIsIHJhdy5iaW5kKHB1YmxpY1RoaXMpKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGlzT2JqZWN0KHJhdykpIHtcclxuICAgICAgICBpZiAoaXNBcnJheShyYXcpKSB7XHJcbiAgICAgICAgICAgIHJhdy5mb3JFYWNoKHIgPT4gY3JlYXRlV2F0Y2hlcihyLCBjdHgsIHB1YmxpY1RoaXMsIGtleSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3QgaGFuZGxlciA9IGlzRnVuY3Rpb24ocmF3LmhhbmRsZXIpXHJcbiAgICAgICAgICAgICAgICA/IHJhdy5oYW5kbGVyLmJpbmQocHVibGljVGhpcylcclxuICAgICAgICAgICAgICAgIDogY3R4W3Jhdy5oYW5kbGVyXTtcclxuICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24oaGFuZGxlcikpIHtcclxuICAgICAgICAgICAgICAgIHdhdGNoKGdldHRlciwgaGFuZGxlciwgcmF3KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgIHdhcm4oYEludmFsaWQgd2F0Y2ggaGFuZGxlciBzcGVjaWZpZWQgYnkga2V5IFwiJHtyYXcuaGFuZGxlcn1cImAsIGhhbmRsZXIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgd2FybihgSW52YWxpZCB3YXRjaCBvcHRpb246IFwiJHtrZXl9XCJgLCByYXcpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGNyZWF0ZVBhdGhHZXR0ZXIoY3R4LCBwYXRoKSB7XHJcbiAgICBjb25zdCBzZWdtZW50cyA9IHBhdGguc3BsaXQoJy4nKTtcclxuICAgIHJldHVybiAoKSA9PiB7XHJcbiAgICAgICAgbGV0IGN1ciA9IGN0eDtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNlZ21lbnRzLmxlbmd0aCAmJiBjdXI7IGkrKykge1xyXG4gICAgICAgICAgICBjdXIgPSBjdXJbc2VnbWVudHNbaV1dO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gY3VyO1xyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiByZXNvbHZlTWVyZ2VkT3B0aW9ucyhpbnN0YW5jZSkge1xyXG4gICAgY29uc3QgcmF3ID0gaW5zdGFuY2UudHlwZTtcclxuICAgIGNvbnN0IHsgX19tZXJnZWQsIG1peGlucywgZXh0ZW5kczogZXh0ZW5kc09wdGlvbnMgfSA9IHJhdztcclxuICAgIGlmIChfX21lcmdlZClcclxuICAgICAgICByZXR1cm4gX19tZXJnZWQ7XHJcbiAgICBjb25zdCBnbG9iYWxNaXhpbnMgPSBpbnN0YW5jZS5hcHBDb250ZXh0Lm1peGlucztcclxuICAgIGlmICghZ2xvYmFsTWl4aW5zLmxlbmd0aCAmJiAhbWl4aW5zICYmICFleHRlbmRzT3B0aW9ucylcclxuICAgICAgICByZXR1cm4gcmF3O1xyXG4gICAgY29uc3Qgb3B0aW9ucyA9IHt9O1xyXG4gICAgZ2xvYmFsTWl4aW5zLmZvckVhY2gobSA9PiBtZXJnZU9wdGlvbnMob3B0aW9ucywgbSwgaW5zdGFuY2UpKTtcclxuICAgIG1lcmdlT3B0aW9ucyhvcHRpb25zLCByYXcsIGluc3RhbmNlKTtcclxuICAgIHJldHVybiAocmF3Ll9fbWVyZ2VkID0gb3B0aW9ucyk7XHJcbn1cclxuZnVuY3Rpb24gbWVyZ2VPcHRpb25zKHRvLCBmcm9tLCBpbnN0YW5jZSkge1xyXG4gICAgY29uc3Qgc3RyYXRzID0gaW5zdGFuY2UuYXBwQ29udGV4dC5jb25maWcub3B0aW9uTWVyZ2VTdHJhdGVnaWVzO1xyXG4gICAgY29uc3QgeyBtaXhpbnMsIGV4dGVuZHM6IGV4dGVuZHNPcHRpb25zIH0gPSBmcm9tO1xyXG4gICAgZXh0ZW5kc09wdGlvbnMgJiYgbWVyZ2VPcHRpb25zKHRvLCBleHRlbmRzT3B0aW9ucywgaW5zdGFuY2UpO1xyXG4gICAgbWl4aW5zICYmXHJcbiAgICAgICAgbWl4aW5zLmZvckVhY2goKG0pID0+IG1lcmdlT3B0aW9ucyh0bywgbSwgaW5zdGFuY2UpKTtcclxuICAgIGZvciAoY29uc3Qga2V5IGluIGZyb20pIHtcclxuICAgICAgICBpZiAoc3RyYXRzICYmIGhhc093bihzdHJhdHMsIGtleSkpIHtcclxuICAgICAgICAgICAgdG9ba2V5XSA9IHN0cmF0c1trZXldKHRvW2tleV0sIGZyb21ba2V5XSwgaW5zdGFuY2UucHJveHksIGtleSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0b1trZXldID0gZnJvbVtrZXldO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxuXG4vKipcclxuICogIzI0MzcgSW4gVnVlIDMsIGZ1bmN0aW9uYWwgY29tcG9uZW50cyBkbyBub3QgaGF2ZSBhIHB1YmxpYyBpbnN0YW5jZSBwcm94eSBidXRcclxuICogdGhleSBleGlzdCBpbiB0aGUgaW50ZXJuYWwgcGFyZW50IGNoYWluLiBGb3IgY29kZSB0aGF0IHJlbGllcyBvbiB0cmF2ZXJzaW5nXHJcbiAqIHB1YmxpYyAkcGFyZW50IGNoYWlucywgc2tpcCBmdW5jdGlvbmFsIG9uZXMgYW5kIGdvIHRvIHRoZSBwYXJlbnQgaW5zdGVhZC5cclxuICovXHJcbmNvbnN0IGdldFB1YmxpY0luc3RhbmNlID0gKGkpID0+IGkgJiYgKGkucHJveHkgPyBpLnByb3h5IDogZ2V0UHVibGljSW5zdGFuY2UoaS5wYXJlbnQpKTtcclxuY29uc3QgcHVibGljUHJvcGVydGllc01hcCA9IGV4dGVuZChPYmplY3QuY3JlYXRlKG51bGwpLCB7XHJcbiAgICAkOiBpID0+IGksXHJcbiAgICAkZWw6IGkgPT4gaS52bm9kZS5lbCxcclxuICAgICRkYXRhOiBpID0+IGkuZGF0YSxcclxuICAgICRwcm9wczogaSA9PiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpID8gc2hhbGxvd1JlYWRvbmx5KGkucHJvcHMpIDogaS5wcm9wcyksXHJcbiAgICAkYXR0cnM6IGkgPT4gKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSA/IHNoYWxsb3dSZWFkb25seShpLmF0dHJzKSA6IGkuYXR0cnMpLFxyXG4gICAgJHNsb3RzOiBpID0+ICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgPyBzaGFsbG93UmVhZG9ubHkoaS5zbG90cykgOiBpLnNsb3RzKSxcclxuICAgICRyZWZzOiBpID0+ICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgPyBzaGFsbG93UmVhZG9ubHkoaS5yZWZzKSA6IGkucmVmcyksXHJcbiAgICAkcGFyZW50OiBpID0+IGdldFB1YmxpY0luc3RhbmNlKGkucGFyZW50KSxcclxuICAgICRyb290OiBpID0+IGkucm9vdCAmJiBpLnJvb3QucHJveHksXHJcbiAgICAkZW1pdDogaSA9PiBpLmVtaXQsXHJcbiAgICAkb3B0aW9uczogaSA9PiAoX19WVUVfT1BUSU9OU19BUElfXyA/IHJlc29sdmVNZXJnZWRPcHRpb25zKGkpIDogaS50eXBlKSxcclxuICAgICRmb3JjZVVwZGF0ZTogaSA9PiAoKSA9PiBxdWV1ZUpvYihpLnVwZGF0ZSksXHJcbiAgICAkbmV4dFRpY2s6IGkgPT4gbmV4dFRpY2suYmluZChpLnByb3h5KSxcclxuICAgICR3YXRjaDogaSA9PiAoX19WVUVfT1BUSU9OU19BUElfXyA/IGluc3RhbmNlV2F0Y2guYmluZChpKSA6IE5PT1ApXHJcbn0pO1xyXG5jb25zdCBQdWJsaWNJbnN0YW5jZVByb3h5SGFuZGxlcnMgPSB7XHJcbiAgICBnZXQoeyBfOiBpbnN0YW5jZSB9LCBrZXkpIHtcclxuICAgICAgICBjb25zdCB7IGN0eCwgc2V0dXBTdGF0ZSwgZGF0YSwgcHJvcHMsIGFjY2Vzc0NhY2hlLCB0eXBlLCBhcHBDb250ZXh0IH0gPSBpbnN0YW5jZTtcclxuICAgICAgICAvLyBsZXQgQHZ1ZS9yZWFjdGl2aXR5IGtub3cgaXQgc2hvdWxkIG5ldmVyIG9ic2VydmUgVnVlIHB1YmxpYyBpbnN0YW5jZXMuXHJcbiAgICAgICAgaWYgKGtleSA9PT0gXCJfX3Zfc2tpcFwiIC8qIFNLSVAgKi8pIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGZvciBpbnRlcm5hbCBmb3JtYXR0ZXJzIHRvIGtub3cgdGhhdCB0aGlzIGlzIGEgVnVlIGluc3RhbmNlXHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBrZXkgPT09ICdfX2lzVnVlJykge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gZGF0YSAvIHByb3BzIC8gY3R4XHJcbiAgICAgICAgLy8gVGhpcyBnZXR0ZXIgZ2V0cyBjYWxsZWQgZm9yIGV2ZXJ5IHByb3BlcnR5IGFjY2VzcyBvbiB0aGUgcmVuZGVyIGNvbnRleHRcclxuICAgICAgICAvLyBkdXJpbmcgcmVuZGVyIGFuZCBpcyBhIG1ham9yIGhvdHNwb3QuIFRoZSBtb3N0IGV4cGVuc2l2ZSBwYXJ0IG9mIHRoaXNcclxuICAgICAgICAvLyBpcyB0aGUgbXVsdGlwbGUgaGFzT3duKCkgY2FsbHMuIEl0J3MgbXVjaCBmYXN0ZXIgdG8gZG8gYSBzaW1wbGUgcHJvcGVydHlcclxuICAgICAgICAvLyBhY2Nlc3Mgb24gYSBwbGFpbiBvYmplY3QsIHNvIHdlIHVzZSBhbiBhY2Nlc3NDYWNoZSBvYmplY3QgKHdpdGggbnVsbFxyXG4gICAgICAgIC8vIHByb3RvdHlwZSkgdG8gbWVtb2l6ZSB3aGF0IGFjY2VzcyB0eXBlIGEga2V5IGNvcnJlc3BvbmRzIHRvLlxyXG4gICAgICAgIGxldCBub3JtYWxpemVkUHJvcHM7XHJcbiAgICAgICAgaWYgKGtleVswXSAhPT0gJyQnKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG4gPSBhY2Nlc3NDYWNoZVtrZXldO1xyXG4gICAgICAgICAgICBpZiAobiAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKG4pIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDAgLyogU0VUVVAgKi86XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzZXR1cFN0YXRlW2tleV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxIC8qIERBVEEgKi86XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXRhW2tleV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzIC8qIENPTlRFWFQgKi86XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjdHhba2V5XTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDIgLyogUFJPUFMgKi86XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwcm9wc1trZXldO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGRlZmF1bHQ6IGp1c3QgZmFsbHRocm91Z2hcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChzZXR1cFN0YXRlICE9PSBFTVBUWV9PQkogJiYgaGFzT3duKHNldHVwU3RhdGUsIGtleSkpIHtcclxuICAgICAgICAgICAgICAgIGFjY2Vzc0NhY2hlW2tleV0gPSAwIC8qIFNFVFVQICovO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNldHVwU3RhdGVba2V5XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChkYXRhICE9PSBFTVBUWV9PQkogJiYgaGFzT3duKGRhdGEsIGtleSkpIHtcclxuICAgICAgICAgICAgICAgIGFjY2Vzc0NhY2hlW2tleV0gPSAxIC8qIERBVEEgKi87XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0YVtrZXldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKFxyXG4gICAgICAgICAgICAvLyBvbmx5IGNhY2hlIG90aGVyIHByb3BlcnRpZXMgd2hlbiBpbnN0YW5jZSBoYXMgZGVjbGFyZWQgKHRodXMgc3RhYmxlKVxyXG4gICAgICAgICAgICAvLyBwcm9wc1xyXG4gICAgICAgICAgICAobm9ybWFsaXplZFByb3BzID0gaW5zdGFuY2UucHJvcHNPcHRpb25zWzBdKSAmJlxyXG4gICAgICAgICAgICAgICAgaGFzT3duKG5vcm1hbGl6ZWRQcm9wcywga2V5KSkge1xyXG4gICAgICAgICAgICAgICAgYWNjZXNzQ2FjaGVba2V5XSA9IDIgLyogUFJPUFMgKi87XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJvcHNba2V5XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChjdHggIT09IEVNUFRZX09CSiAmJiBoYXNPd24oY3R4LCBrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICBhY2Nlc3NDYWNoZVtrZXldID0gMyAvKiBDT05URVhUICovO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGN0eFtrZXldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKCFfX1ZVRV9PUFRJT05TX0FQSV9fIHx8ICFpc0luQmVmb3JlQ3JlYXRlKSB7XHJcbiAgICAgICAgICAgICAgICBhY2Nlc3NDYWNoZVtrZXldID0gNCAvKiBPVEhFUiAqLztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBwdWJsaWNHZXR0ZXIgPSBwdWJsaWNQcm9wZXJ0aWVzTWFwW2tleV07XHJcbiAgICAgICAgbGV0IGNzc01vZHVsZSwgZ2xvYmFsUHJvcGVydGllcztcclxuICAgICAgICAvLyBwdWJsaWMgJHh4eCBwcm9wZXJ0aWVzXHJcbiAgICAgICAgaWYgKHB1YmxpY0dldHRlcikge1xyXG4gICAgICAgICAgICBpZiAoa2V5ID09PSAnJGF0dHJzJykge1xyXG4gICAgICAgICAgICAgICAgdHJhY2soaW5zdGFuY2UsIFwiZ2V0XCIgLyogR0VUICovLCBrZXkpO1xyXG4gICAgICAgICAgICAgICAgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIG1hcmtBdHRyc0FjY2Vzc2VkKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHB1YmxpY0dldHRlcihpbnN0YW5jZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKFxyXG4gICAgICAgIC8vIGNzcyBtb2R1bGUgKGluamVjdGVkIGJ5IHZ1ZS1sb2FkZXIpXHJcbiAgICAgICAgKGNzc01vZHVsZSA9IHR5cGUuX19jc3NNb2R1bGVzKSAmJlxyXG4gICAgICAgICAgICAoY3NzTW9kdWxlID0gY3NzTW9kdWxlW2tleV0pKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjc3NNb2R1bGU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGN0eCAhPT0gRU1QVFlfT0JKICYmIGhhc093bihjdHgsIGtleSkpIHtcclxuICAgICAgICAgICAgLy8gdXNlciBtYXkgc2V0IGN1c3RvbSBwcm9wZXJ0aWVzIHRvIGB0aGlzYCB0aGF0IHN0YXJ0IHdpdGggYCRgXHJcbiAgICAgICAgICAgIGFjY2Vzc0NhY2hlW2tleV0gPSAzIC8qIENPTlRFWFQgKi87XHJcbiAgICAgICAgICAgIHJldHVybiBjdHhba2V5XTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoXHJcbiAgICAgICAgLy8gZ2xvYmFsIHByb3BlcnRpZXNcclxuICAgICAgICAoKGdsb2JhbFByb3BlcnRpZXMgPSBhcHBDb250ZXh0LmNvbmZpZy5nbG9iYWxQcm9wZXJ0aWVzKSxcclxuICAgICAgICAgICAgaGFzT3duKGdsb2JhbFByb3BlcnRpZXMsIGtleSkpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBnbG9iYWxQcm9wZXJ0aWVzW2tleV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJlxyXG4gICAgICAgICAgICBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UgJiZcclxuICAgICAgICAgICAgKCFpc1N0cmluZyhrZXkpIHx8XHJcbiAgICAgICAgICAgICAgICAvLyAjMTA5MSBhdm9pZCBpbnRlcm5hbCBpc1JlZi9pc1ZOb2RlIGNoZWNrcyBvbiBjb21wb25lbnQgaW5zdGFuY2UgbGVhZGluZ1xyXG4gICAgICAgICAgICAgICAgLy8gdG8gaW5maW5pdGUgd2FybmluZyBsb29wXHJcbiAgICAgICAgICAgICAgICBrZXkuaW5kZXhPZignX192JykgIT09IDApKSB7XHJcbiAgICAgICAgICAgIGlmIChkYXRhICE9PSBFTVBUWV9PQkogJiZcclxuICAgICAgICAgICAgICAgIChrZXlbMF0gPT09ICckJyB8fCBrZXlbMF0gPT09ICdfJykgJiZcclxuICAgICAgICAgICAgICAgIGhhc093bihkYXRhLCBrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICB3YXJuKGBQcm9wZXJ0eSAke0pTT04uc3RyaW5naWZ5KGtleSl9IG11c3QgYmUgYWNjZXNzZWQgdmlhICRkYXRhIGJlY2F1c2UgaXQgc3RhcnRzIHdpdGggYSByZXNlcnZlZCBgICtcclxuICAgICAgICAgICAgICAgICAgICBgY2hhcmFjdGVyIChcIiRcIiBvciBcIl9cIikgYW5kIGlzIG5vdCBwcm94aWVkIG9uIHRoZSByZW5kZXIgY29udGV4dC5gKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHdhcm4oYFByb3BlcnR5ICR7SlNPTi5zdHJpbmdpZnkoa2V5KX0gd2FzIGFjY2Vzc2VkIGR1cmluZyByZW5kZXIgYCArXHJcbiAgICAgICAgICAgICAgICAgICAgYGJ1dCBpcyBub3QgZGVmaW5lZCBvbiBpbnN0YW5jZS5gKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBzZXQoeyBfOiBpbnN0YW5jZSB9LCBrZXksIHZhbHVlKSB7XHJcbiAgICAgICAgY29uc3QgeyBkYXRhLCBzZXR1cFN0YXRlLCBjdHggfSA9IGluc3RhbmNlO1xyXG4gICAgICAgIGlmIChzZXR1cFN0YXRlICE9PSBFTVBUWV9PQkogJiYgaGFzT3duKHNldHVwU3RhdGUsIGtleSkpIHtcclxuICAgICAgICAgICAgc2V0dXBTdGF0ZVtrZXldID0gdmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGRhdGEgIT09IEVNUFRZX09CSiAmJiBoYXNPd24oZGF0YSwga2V5KSkge1xyXG4gICAgICAgICAgICBkYXRhW2tleV0gPSB2YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoa2V5IGluIGluc3RhbmNlLnByb3BzKSB7XHJcbiAgICAgICAgICAgIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJlxyXG4gICAgICAgICAgICAgICAgd2FybihgQXR0ZW1wdGluZyB0byBtdXRhdGUgcHJvcCBcIiR7a2V5fVwiLiBQcm9wcyBhcmUgcmVhZG9ubHkuYCwgaW5zdGFuY2UpO1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChrZXlbMF0gPT09ICckJyAmJiBrZXkuc2xpY2UoMSkgaW4gaW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmXHJcbiAgICAgICAgICAgICAgICB3YXJuKGBBdHRlbXB0aW5nIHRvIG11dGF0ZSBwdWJsaWMgcHJvcGVydHkgXCIke2tleX1cIi4gYCArXHJcbiAgICAgICAgICAgICAgICAgICAgYFByb3BlcnRpZXMgc3RhcnRpbmcgd2l0aCAkIGFyZSByZXNlcnZlZCBhbmQgcmVhZG9ubHkuYCwgaW5zdGFuY2UpO1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIGtleSBpbiBpbnN0YW5jZS5hcHBDb250ZXh0LmNvbmZpZy5nbG9iYWxQcm9wZXJ0aWVzKSB7XHJcbiAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3R4LCBrZXksIHtcclxuICAgICAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjdHhba2V5XSA9IHZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfSxcclxuICAgIGhhcyh7IF86IHsgZGF0YSwgc2V0dXBTdGF0ZSwgYWNjZXNzQ2FjaGUsIGN0eCwgYXBwQ29udGV4dCwgcHJvcHNPcHRpb25zIH0gfSwga2V5KSB7XHJcbiAgICAgICAgbGV0IG5vcm1hbGl6ZWRQcm9wcztcclxuICAgICAgICByZXR1cm4gKGFjY2Vzc0NhY2hlW2tleV0gIT09IHVuZGVmaW5lZCB8fFxyXG4gICAgICAgICAgICAoZGF0YSAhPT0gRU1QVFlfT0JKICYmIGhhc093bihkYXRhLCBrZXkpKSB8fFxyXG4gICAgICAgICAgICAoc2V0dXBTdGF0ZSAhPT0gRU1QVFlfT0JKICYmIGhhc093bihzZXR1cFN0YXRlLCBrZXkpKSB8fFxyXG4gICAgICAgICAgICAoKG5vcm1hbGl6ZWRQcm9wcyA9IHByb3BzT3B0aW9uc1swXSkgJiYgaGFzT3duKG5vcm1hbGl6ZWRQcm9wcywga2V5KSkgfHxcclxuICAgICAgICAgICAgaGFzT3duKGN0eCwga2V5KSB8fFxyXG4gICAgICAgICAgICBoYXNPd24ocHVibGljUHJvcGVydGllc01hcCwga2V5KSB8fFxyXG4gICAgICAgICAgICBoYXNPd24oYXBwQ29udGV4dC5jb25maWcuZ2xvYmFsUHJvcGVydGllcywga2V5KSk7XHJcbiAgICB9XHJcbn07XHJcbmlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIWZhbHNlKSB7XHJcbiAgICBQdWJsaWNJbnN0YW5jZVByb3h5SGFuZGxlcnMub3duS2V5cyA9ICh0YXJnZXQpID0+IHtcclxuICAgICAgICB3YXJuKGBBdm9pZCBhcHAgbG9naWMgdGhhdCByZWxpZXMgb24gZW51bWVyYXRpbmcga2V5cyBvbiBhIGNvbXBvbmVudCBpbnN0YW5jZS4gYCArXHJcbiAgICAgICAgICAgIGBUaGUga2V5cyB3aWxsIGJlIGVtcHR5IGluIHByb2R1Y3Rpb24gbW9kZSB0byBhdm9pZCBwZXJmb3JtYW5jZSBvdmVyaGVhZC5gKTtcclxuICAgICAgICByZXR1cm4gUmVmbGVjdC5vd25LZXlzKHRhcmdldCk7XHJcbiAgICB9O1xyXG59XHJcbmNvbnN0IFJ1bnRpbWVDb21waWxlZFB1YmxpY0luc3RhbmNlUHJveHlIYW5kbGVycyA9IGV4dGVuZCh7fSwgUHVibGljSW5zdGFuY2VQcm94eUhhbmRsZXJzLCB7XHJcbiAgICBnZXQodGFyZ2V0LCBrZXkpIHtcclxuICAgICAgICAvLyBmYXN0IHBhdGggZm9yIHVuc2NvcGFibGVzIHdoZW4gdXNpbmcgYHdpdGhgIGJsb2NrXHJcbiAgICAgICAgaWYgKGtleSA9PT0gU3ltYm9sLnVuc2NvcGFibGVzKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFB1YmxpY0luc3RhbmNlUHJveHlIYW5kbGVycy5nZXQodGFyZ2V0LCBrZXksIHRhcmdldCk7XHJcbiAgICB9LFxyXG4gICAgaGFzKF8sIGtleSkge1xyXG4gICAgICAgIGNvbnN0IGhhcyA9IGtleVswXSAhPT0gJ18nICYmICFpc0dsb2JhbGx5V2hpdGVsaXN0ZWQoa2V5KTtcclxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFoYXMgJiYgUHVibGljSW5zdGFuY2VQcm94eUhhbmRsZXJzLmhhcyhfLCBrZXkpKSB7XHJcbiAgICAgICAgICAgIHdhcm4oYFByb3BlcnR5ICR7SlNPTi5zdHJpbmdpZnkoa2V5KX0gc2hvdWxkIG5vdCBzdGFydCB3aXRoIF8gd2hpY2ggaXMgYSByZXNlcnZlZCBwcmVmaXggZm9yIFZ1ZSBpbnRlcm5hbHMuYCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBoYXM7XHJcbiAgICB9XHJcbn0pO1xyXG4vLyBJbiBkZXYgbW9kZSwgdGhlIHByb3h5IHRhcmdldCBleHBvc2VzIHRoZSBzYW1lIHByb3BlcnRpZXMgYXMgc2VlbiBvbiBgdGhpc2BcclxuLy8gZm9yIGVhc2llciBjb25zb2xlIGluc3BlY3Rpb24uIEluIHByb2QgbW9kZSBpdCB3aWxsIGJlIGFuIGVtcHR5IG9iamVjdCBzb1xyXG4vLyB0aGVzZSBwcm9wZXJ0aWVzIGRlZmluaXRpb25zIGNhbiBiZSBza2lwcGVkLlxyXG5mdW5jdGlvbiBjcmVhdGVSZW5kZXJDb250ZXh0KGluc3RhbmNlKSB7XHJcbiAgICBjb25zdCB0YXJnZXQgPSB7fTtcclxuICAgIC8vIGV4cG9zZSBpbnRlcm5hbCBpbnN0YW5jZSBmb3IgcHJveHkgaGFuZGxlcnNcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGBfYCwge1xyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBnZXQ6ICgpID0+IGluc3RhbmNlXHJcbiAgICB9KTtcclxuICAgIC8vIGV4cG9zZSBwdWJsaWMgcHJvcGVydGllc1xyXG4gICAgT2JqZWN0LmtleXMocHVibGljUHJvcGVydGllc01hcCkuZm9yRWFjaChrZXkgPT4ge1xyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwge1xyXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgICAgICBnZXQ6ICgpID0+IHB1YmxpY1Byb3BlcnRpZXNNYXBba2V5XShpbnN0YW5jZSksXHJcbiAgICAgICAgICAgIC8vIGludGVyY2VwdGVkIGJ5IHRoZSBwcm94eSBzbyBubyBuZWVkIGZvciBpbXBsZW1lbnRhdGlvbixcclxuICAgICAgICAgICAgLy8gYnV0IG5lZWRlZCB0byBwcmV2ZW50IHNldCBlcnJvcnNcclxuICAgICAgICAgICAgc2V0OiBOT09QXHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuICAgIC8vIGV4cG9zZSBnbG9iYWwgcHJvcGVydGllc1xyXG4gICAgY29uc3QgeyBnbG9iYWxQcm9wZXJ0aWVzIH0gPSBpbnN0YW5jZS5hcHBDb250ZXh0LmNvbmZpZztcclxuICAgIE9iamVjdC5rZXlzKGdsb2JhbFByb3BlcnRpZXMpLmZvckVhY2goa2V5ID0+IHtcclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHtcclxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICAgICAgZ2V0OiAoKSA9PiBnbG9iYWxQcm9wZXJ0aWVzW2tleV0sXHJcbiAgICAgICAgICAgIHNldDogTk9PUFxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gdGFyZ2V0O1xyXG59XHJcbi8vIGRldiBvbmx5XHJcbmZ1bmN0aW9uIGV4cG9zZVByb3BzT25SZW5kZXJDb250ZXh0KGluc3RhbmNlKSB7XHJcbiAgICBjb25zdCB7IGN0eCwgcHJvcHNPcHRpb25zOiBbcHJvcHNPcHRpb25zXSB9ID0gaW5zdGFuY2U7XHJcbiAgICBpZiAocHJvcHNPcHRpb25zKSB7XHJcbiAgICAgICAgT2JqZWN0LmtleXMocHJvcHNPcHRpb25zKS5mb3JFYWNoKGtleSA9PiB7XHJcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjdHgsIGtleSwge1xyXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGdldDogKCkgPT4gaW5zdGFuY2UucHJvcHNba2V5XSxcclxuICAgICAgICAgICAgICAgIHNldDogTk9PUFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG4vLyBkZXYgb25seVxyXG5mdW5jdGlvbiBleHBvc2VTZXR1cFN0YXRlT25SZW5kZXJDb250ZXh0KGluc3RhbmNlKSB7XHJcbiAgICBjb25zdCB7IGN0eCwgc2V0dXBTdGF0ZSB9ID0gaW5zdGFuY2U7XHJcbiAgICBPYmplY3Qua2V5cyh0b1JhdyhzZXR1cFN0YXRlKSkuZm9yRWFjaChrZXkgPT4ge1xyXG4gICAgICAgIGlmIChrZXlbMF0gPT09ICckJyB8fCBrZXlbMF0gPT09ICdfJykge1xyXG4gICAgICAgICAgICB3YXJuKGBzZXR1cCgpIHJldHVybiBwcm9wZXJ0eSAke0pTT04uc3RyaW5naWZ5KGtleSl9IHNob3VsZCBub3Qgc3RhcnQgd2l0aCBcIiRcIiBvciBcIl9cIiBgICtcclxuICAgICAgICAgICAgICAgIGB3aGljaCBhcmUgcmVzZXJ2ZWQgcHJlZml4ZXMgZm9yIFZ1ZSBpbnRlcm5hbHMuYCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGN0eCwga2V5LCB7XHJcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgZ2V0OiAoKSA9PiBzZXR1cFN0YXRlW2tleV0sXHJcbiAgICAgICAgICAgIHNldDogTk9PUFxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn1cblxuY29uc3QgZW1wdHlBcHBDb250ZXh0ID0gY3JlYXRlQXBwQ29udGV4dCgpO1xyXG5sZXQgdWlkJDEgPSAwO1xyXG5mdW5jdGlvbiBjcmVhdGVDb21wb25lbnRJbnN0YW5jZSh2bm9kZSwgcGFyZW50LCBzdXNwZW5zZSkge1xyXG4gICAgY29uc3QgdHlwZSA9IHZub2RlLnR5cGU7XHJcbiAgICAvLyBpbmhlcml0IHBhcmVudCBhcHAgY29udGV4dCAtIG9yIC0gaWYgcm9vdCwgYWRvcHQgZnJvbSByb290IHZub2RlXHJcbiAgICBjb25zdCBhcHBDb250ZXh0ID0gKHBhcmVudCA/IHBhcmVudC5hcHBDb250ZXh0IDogdm5vZGUuYXBwQ29udGV4dCkgfHwgZW1wdHlBcHBDb250ZXh0O1xyXG4gICAgY29uc3QgaW5zdGFuY2UgPSB7XHJcbiAgICAgICAgdWlkOiB1aWQkMSsrLFxyXG4gICAgICAgIHZub2RlLFxyXG4gICAgICAgIHR5cGUsXHJcbiAgICAgICAgcGFyZW50LFxyXG4gICAgICAgIGFwcENvbnRleHQsXHJcbiAgICAgICAgcm9vdDogbnVsbCxcclxuICAgICAgICBuZXh0OiBudWxsLFxyXG4gICAgICAgIHN1YlRyZWU6IG51bGwsXHJcbiAgICAgICAgdXBkYXRlOiBudWxsLFxyXG4gICAgICAgIHJlbmRlcjogbnVsbCxcclxuICAgICAgICBwcm94eTogbnVsbCxcclxuICAgICAgICBleHBvc2VkOiBudWxsLFxyXG4gICAgICAgIHdpdGhQcm94eTogbnVsbCxcclxuICAgICAgICBlZmZlY3RzOiBudWxsLFxyXG4gICAgICAgIHByb3ZpZGVzOiBwYXJlbnQgPyBwYXJlbnQucHJvdmlkZXMgOiBPYmplY3QuY3JlYXRlKGFwcENvbnRleHQucHJvdmlkZXMpLFxyXG4gICAgICAgIGFjY2Vzc0NhY2hlOiBudWxsLFxyXG4gICAgICAgIHJlbmRlckNhY2hlOiBbXSxcclxuICAgICAgICAvLyBsb2NhbCByZXNvdmxlZCBhc3NldHNcclxuICAgICAgICBjb21wb25lbnRzOiBudWxsLFxyXG4gICAgICAgIGRpcmVjdGl2ZXM6IG51bGwsXHJcbiAgICAgICAgLy8gcmVzb2x2ZWQgcHJvcHMgYW5kIGVtaXRzIG9wdGlvbnNcclxuICAgICAgICBwcm9wc09wdGlvbnM6IG5vcm1hbGl6ZVByb3BzT3B0aW9ucyh0eXBlLCBhcHBDb250ZXh0KSxcclxuICAgICAgICBlbWl0c09wdGlvbnM6IG5vcm1hbGl6ZUVtaXRzT3B0aW9ucyh0eXBlLCBhcHBDb250ZXh0KSxcclxuICAgICAgICAvLyBlbWl0XHJcbiAgICAgICAgZW1pdDogbnVsbCxcclxuICAgICAgICBlbWl0dGVkOiBudWxsLFxyXG4gICAgICAgIC8vIHN0YXRlXHJcbiAgICAgICAgY3R4OiBFTVBUWV9PQkosXHJcbiAgICAgICAgZGF0YTogRU1QVFlfT0JKLFxyXG4gICAgICAgIHByb3BzOiBFTVBUWV9PQkosXHJcbiAgICAgICAgYXR0cnM6IEVNUFRZX09CSixcclxuICAgICAgICBzbG90czogRU1QVFlfT0JKLFxyXG4gICAgICAgIHJlZnM6IEVNUFRZX09CSixcclxuICAgICAgICBzZXR1cFN0YXRlOiBFTVBUWV9PQkosXHJcbiAgICAgICAgc2V0dXBDb250ZXh0OiBudWxsLFxyXG4gICAgICAgIC8vIHN1c3BlbnNlIHJlbGF0ZWRcclxuICAgICAgICBzdXNwZW5zZSxcclxuICAgICAgICBzdXNwZW5zZUlkOiBzdXNwZW5zZSA/IHN1c3BlbnNlLnBlbmRpbmdJZCA6IDAsXHJcbiAgICAgICAgYXN5bmNEZXA6IG51bGwsXHJcbiAgICAgICAgYXN5bmNSZXNvbHZlZDogZmFsc2UsXHJcbiAgICAgICAgLy8gbGlmZWN5Y2xlIGhvb2tzXHJcbiAgICAgICAgLy8gbm90IHVzaW5nIGVudW1zIGhlcmUgYmVjYXVzZSBpdCByZXN1bHRzIGluIGNvbXB1dGVkIHByb3BlcnRpZXNcclxuICAgICAgICBpc01vdW50ZWQ6IGZhbHNlLFxyXG4gICAgICAgIGlzVW5tb3VudGVkOiBmYWxzZSxcclxuICAgICAgICBpc0RlYWN0aXZhdGVkOiBmYWxzZSxcclxuICAgICAgICBiYzogbnVsbCxcclxuICAgICAgICBjOiBudWxsLFxyXG4gICAgICAgIGJtOiBudWxsLFxyXG4gICAgICAgIG06IG51bGwsXHJcbiAgICAgICAgYnU6IG51bGwsXHJcbiAgICAgICAgdTogbnVsbCxcclxuICAgICAgICB1bTogbnVsbCxcclxuICAgICAgICBidW06IG51bGwsXHJcbiAgICAgICAgZGE6IG51bGwsXHJcbiAgICAgICAgYTogbnVsbCxcclxuICAgICAgICBydGc6IG51bGwsXHJcbiAgICAgICAgcnRjOiBudWxsLFxyXG4gICAgICAgIGVjOiBudWxsXHJcbiAgICB9O1xyXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgIGluc3RhbmNlLmN0eCA9IGNyZWF0ZVJlbmRlckNvbnRleHQoaW5zdGFuY2UpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgaW5zdGFuY2UuY3R4ID0geyBfOiBpbnN0YW5jZSB9O1xyXG4gICAgfVxyXG4gICAgaW5zdGFuY2Uucm9vdCA9IHBhcmVudCA/IHBhcmVudC5yb290IDogaW5zdGFuY2U7XHJcbiAgICBpbnN0YW5jZS5lbWl0ID0gZW1pdC5iaW5kKG51bGwsIGluc3RhbmNlKTtcclxuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgfHwgX19WVUVfUFJPRF9ERVZUT09MU19fKSB7XHJcbiAgICAgICAgZGV2dG9vbHNDb21wb25lbnRBZGRlZChpbnN0YW5jZSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gaW5zdGFuY2U7XHJcbn1cclxubGV0IGN1cnJlbnRJbnN0YW5jZSA9IG51bGw7XHJcbmNvbnN0IGdldEN1cnJlbnRJbnN0YW5jZSA9ICgpID0+IGN1cnJlbnRJbnN0YW5jZSB8fCBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2U7XHJcbmNvbnN0IHNldEN1cnJlbnRJbnN0YW5jZSA9IChpbnN0YW5jZSkgPT4ge1xyXG4gICAgY3VycmVudEluc3RhbmNlID0gaW5zdGFuY2U7XHJcbn07XHJcbmNvbnN0IGlzQnVpbHRJblRhZyA9IC8qI19fUFVSRV9fKi8gbWFrZU1hcCgnc2xvdCxjb21wb25lbnQnKTtcclxuZnVuY3Rpb24gdmFsaWRhdGVDb21wb25lbnROYW1lKG5hbWUsIGNvbmZpZykge1xyXG4gICAgY29uc3QgYXBwSXNOYXRpdmVUYWcgPSBjb25maWcuaXNOYXRpdmVUYWcgfHwgTk87XHJcbiAgICBpZiAoaXNCdWlsdEluVGFnKG5hbWUpIHx8IGFwcElzTmF0aXZlVGFnKG5hbWUpKSB7XHJcbiAgICAgICAgd2FybignRG8gbm90IHVzZSBidWlsdC1pbiBvciByZXNlcnZlZCBIVE1MIGVsZW1lbnRzIGFzIGNvbXBvbmVudCBpZDogJyArIG5hbWUpO1xyXG4gICAgfVxyXG59XHJcbmxldCBpc0luU1NSQ29tcG9uZW50U2V0dXAgPSBmYWxzZTtcclxuZnVuY3Rpb24gc2V0dXBDb21wb25lbnQoaW5zdGFuY2UsIGlzU1NSID0gZmFsc2UpIHtcclxuICAgIGlzSW5TU1JDb21wb25lbnRTZXR1cCA9IGlzU1NSO1xyXG4gICAgY29uc3QgeyBwcm9wcywgY2hpbGRyZW4sIHNoYXBlRmxhZyB9ID0gaW5zdGFuY2Uudm5vZGU7XHJcbiAgICBjb25zdCBpc1N0YXRlZnVsID0gc2hhcGVGbGFnICYgNCAvKiBTVEFURUZVTF9DT01QT05FTlQgKi87XHJcbiAgICBpbml0UHJvcHMoaW5zdGFuY2UsIHByb3BzLCBpc1N0YXRlZnVsLCBpc1NTUik7XHJcbiAgICBpbml0U2xvdHMoaW5zdGFuY2UsIGNoaWxkcmVuKTtcclxuICAgIGNvbnN0IHNldHVwUmVzdWx0ID0gaXNTdGF0ZWZ1bFxyXG4gICAgICAgID8gc2V0dXBTdGF0ZWZ1bENvbXBvbmVudChpbnN0YW5jZSwgaXNTU1IpXHJcbiAgICAgICAgOiB1bmRlZmluZWQ7XHJcbiAgICBpc0luU1NSQ29tcG9uZW50U2V0dXAgPSBmYWxzZTtcclxuICAgIHJldHVybiBzZXR1cFJlc3VsdDtcclxufVxyXG5mdW5jdGlvbiBzZXR1cFN0YXRlZnVsQ29tcG9uZW50KGluc3RhbmNlLCBpc1NTUikge1xyXG4gICAgY29uc3QgQ29tcG9uZW50ID0gaW5zdGFuY2UudHlwZTtcclxuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICBpZiAoQ29tcG9uZW50Lm5hbWUpIHtcclxuICAgICAgICAgICAgdmFsaWRhdGVDb21wb25lbnROYW1lKENvbXBvbmVudC5uYW1lLCBpbnN0YW5jZS5hcHBDb250ZXh0LmNvbmZpZyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChDb21wb25lbnQuY29tcG9uZW50cykge1xyXG4gICAgICAgICAgICBjb25zdCBuYW1lcyA9IE9iamVjdC5rZXlzKENvbXBvbmVudC5jb21wb25lbnRzKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuYW1lcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdmFsaWRhdGVDb21wb25lbnROYW1lKG5hbWVzW2ldLCBpbnN0YW5jZS5hcHBDb250ZXh0LmNvbmZpZyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKENvbXBvbmVudC5kaXJlY3RpdmVzKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG5hbWVzID0gT2JqZWN0LmtleXMoQ29tcG9uZW50LmRpcmVjdGl2ZXMpO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5hbWVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YWxpZGF0ZURpcmVjdGl2ZU5hbWUobmFtZXNbaV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gMC4gY3JlYXRlIHJlbmRlciBwcm94eSBwcm9wZXJ0eSBhY2Nlc3MgY2FjaGVcclxuICAgIGluc3RhbmNlLmFjY2Vzc0NhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcclxuICAgIC8vIDEuIGNyZWF0ZSBwdWJsaWMgaW5zdGFuY2UgLyByZW5kZXIgcHJveHlcclxuICAgIC8vIGFsc28gbWFyayBpdCByYXcgc28gaXQncyBuZXZlciBvYnNlcnZlZFxyXG4gICAgaW5zdGFuY2UucHJveHkgPSBuZXcgUHJveHkoaW5zdGFuY2UuY3R4LCBQdWJsaWNJbnN0YW5jZVByb3h5SGFuZGxlcnMpO1xyXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgIGV4cG9zZVByb3BzT25SZW5kZXJDb250ZXh0KGluc3RhbmNlKTtcclxuICAgIH1cclxuICAgIC8vIDIuIGNhbGwgc2V0dXAoKVxyXG4gICAgY29uc3QgeyBzZXR1cCB9ID0gQ29tcG9uZW50O1xyXG4gICAgaWYgKHNldHVwKSB7XHJcbiAgICAgICAgY29uc3Qgc2V0dXBDb250ZXh0ID0gKGluc3RhbmNlLnNldHVwQ29udGV4dCA9XHJcbiAgICAgICAgICAgIHNldHVwLmxlbmd0aCA+IDEgPyBjcmVhdGVTZXR1cENvbnRleHQoaW5zdGFuY2UpIDogbnVsbCk7XHJcbiAgICAgICAgY3VycmVudEluc3RhbmNlID0gaW5zdGFuY2U7XHJcbiAgICAgICAgcGF1c2VUcmFja2luZygpO1xyXG4gICAgICAgIGNvbnN0IHNldHVwUmVzdWx0ID0gY2FsbFdpdGhFcnJvckhhbmRsaW5nKHNldHVwLCBpbnN0YW5jZSwgMCAvKiBTRVRVUF9GVU5DVElPTiAqLywgWyhwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSA/IHNoYWxsb3dSZWFkb25seShpbnN0YW5jZS5wcm9wcykgOiBpbnN0YW5jZS5wcm9wcywgc2V0dXBDb250ZXh0XSk7XHJcbiAgICAgICAgcmVzZXRUcmFja2luZygpO1xyXG4gICAgICAgIGN1cnJlbnRJbnN0YW5jZSA9IG51bGw7XHJcbiAgICAgICAgaWYgKGlzUHJvbWlzZShzZXR1cFJlc3VsdCkpIHtcclxuICAgICAgICAgICAgaWYgKGlzU1NSKSB7XHJcbiAgICAgICAgICAgICAgICAvLyByZXR1cm4gdGhlIHByb21pc2Ugc28gc2VydmVyLXJlbmRlcmVyIGNhbiB3YWl0IG9uIGl0XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc2V0dXBSZXN1bHQudGhlbigocmVzb2x2ZWRSZXN1bHQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBoYW5kbGVTZXR1cFJlc3VsdChpbnN0YW5jZSwgcmVzb2x2ZWRSZXN1bHQpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBhc3luYyBzZXR1cCByZXR1cm5lZCBQcm9taXNlLlxyXG4gICAgICAgICAgICAgICAgLy8gYmFpbCBoZXJlIGFuZCB3YWl0IGZvciByZS1lbnRyeS5cclxuICAgICAgICAgICAgICAgIGluc3RhbmNlLmFzeW5jRGVwID0gc2V0dXBSZXN1bHQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGhhbmRsZVNldHVwUmVzdWx0KGluc3RhbmNlLCBzZXR1cFJlc3VsdCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgZmluaXNoQ29tcG9uZW50U2V0dXAoaW5zdGFuY2UpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGhhbmRsZVNldHVwUmVzdWx0KGluc3RhbmNlLCBzZXR1cFJlc3VsdCwgaXNTU1IpIHtcclxuICAgIGlmIChpc0Z1bmN0aW9uKHNldHVwUmVzdWx0KSkge1xyXG4gICAgICAgIC8vIHNldHVwIHJldHVybmVkIGFuIGlubGluZSByZW5kZXIgZnVuY3Rpb25cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGluc3RhbmNlLnJlbmRlciA9IHNldHVwUmVzdWx0O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGlzT2JqZWN0KHNldHVwUmVzdWx0KSkge1xyXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgaXNWTm9kZShzZXR1cFJlc3VsdCkpIHtcclxuICAgICAgICAgICAgd2Fybihgc2V0dXAoKSBzaG91bGQgbm90IHJldHVybiBWTm9kZXMgZGlyZWN0bHkgLSBgICtcclxuICAgICAgICAgICAgICAgIGByZXR1cm4gYSByZW5kZXIgZnVuY3Rpb24gaW5zdGVhZC5gKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gc2V0dXAgcmV0dXJuZWQgYmluZGluZ3MuXHJcbiAgICAgICAgLy8gYXNzdW1pbmcgYSByZW5kZXIgZnVuY3Rpb24gY29tcGlsZWQgZnJvbSB0ZW1wbGF0ZSBpcyBwcmVzZW50LlxyXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgfHwgX19WVUVfUFJPRF9ERVZUT09MU19fKSB7XHJcbiAgICAgICAgICAgIGluc3RhbmNlLmRldnRvb2xzUmF3U2V0dXBTdGF0ZSA9IHNldHVwUmVzdWx0O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpbnN0YW5jZS5zZXR1cFN0YXRlID0gcHJveHlSZWZzKHNldHVwUmVzdWx0KTtcclxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgIGV4cG9zZVNldHVwU3RhdGVPblJlbmRlckNvbnRleHQoaW5zdGFuY2UpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBzZXR1cFJlc3VsdCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgd2Fybihgc2V0dXAoKSBzaG91bGQgcmV0dXJuIGFuIG9iamVjdC4gUmVjZWl2ZWQ6ICR7c2V0dXBSZXN1bHQgPT09IG51bGwgPyAnbnVsbCcgOiB0eXBlb2Ygc2V0dXBSZXN1bHR9YCk7XHJcbiAgICB9XHJcbiAgICBmaW5pc2hDb21wb25lbnRTZXR1cChpbnN0YW5jZSk7XHJcbn1cclxubGV0IGNvbXBpbGU7XHJcbi8qKlxyXG4gKiBGb3IgcnVudGltZS1kb20gdG8gcmVnaXN0ZXIgdGhlIGNvbXBpbGVyLlxyXG4gKiBOb3RlIHRoZSBleHBvcnRlZCBtZXRob2QgdXNlcyBhbnkgdG8gYXZvaWQgZC50cyByZWx5aW5nIG9uIHRoZSBjb21waWxlciB0eXBlcy5cclxuICovXHJcbmZ1bmN0aW9uIHJlZ2lzdGVyUnVudGltZUNvbXBpbGVyKF9jb21waWxlKSB7XHJcbiAgICBjb21waWxlID0gX2NvbXBpbGU7XHJcbn1cclxuZnVuY3Rpb24gZmluaXNoQ29tcG9uZW50U2V0dXAoaW5zdGFuY2UsIGlzU1NSKSB7XHJcbiAgICBjb25zdCBDb21wb25lbnQgPSBpbnN0YW5jZS50eXBlO1xyXG4gICAgLy8gdGVtcGxhdGUgLyByZW5kZXIgZnVuY3Rpb24gbm9ybWFsaXphdGlvblxyXG4gICAgaWYgKCFpbnN0YW5jZS5yZW5kZXIpIHtcclxuICAgICAgICAvLyBjb3VsZCBiZSBzZXQgZnJvbSBzZXR1cCgpXHJcbiAgICAgICAgaWYgKGNvbXBpbGUgJiYgQ29tcG9uZW50LnRlbXBsYXRlICYmICFDb21wb25lbnQucmVuZGVyKSB7XHJcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgIHN0YXJ0TWVhc3VyZShpbnN0YW5jZSwgYGNvbXBpbGVgKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBDb21wb25lbnQucmVuZGVyID0gY29tcGlsZShDb21wb25lbnQudGVtcGxhdGUsIHtcclxuICAgICAgICAgICAgICAgIGlzQ3VzdG9tRWxlbWVudDogaW5zdGFuY2UuYXBwQ29udGV4dC5jb25maWcuaXNDdXN0b21FbGVtZW50LFxyXG4gICAgICAgICAgICAgICAgZGVsaW1pdGVyczogQ29tcG9uZW50LmRlbGltaXRlcnNcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgIGVuZE1lYXN1cmUoaW5zdGFuY2UsIGBjb21waWxlYCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaW5zdGFuY2UucmVuZGVyID0gKENvbXBvbmVudC5yZW5kZXIgfHwgTk9PUCk7XHJcbiAgICAgICAgLy8gZm9yIHJ1bnRpbWUtY29tcGlsZWQgcmVuZGVyIGZ1bmN0aW9ucyB1c2luZyBgd2l0aGAgYmxvY2tzLCB0aGUgcmVuZGVyXHJcbiAgICAgICAgLy8gcHJveHkgdXNlZCBuZWVkcyBhIGRpZmZlcmVudCBgaGFzYCBoYW5kbGVyIHdoaWNoIGlzIG1vcmUgcGVyZm9ybWFudCBhbmRcclxuICAgICAgICAvLyBhbHNvIG9ubHkgYWxsb3dzIGEgd2hpdGVsaXN0IG9mIGdsb2JhbHMgdG8gZmFsbHRocm91Z2guXHJcbiAgICAgICAgaWYgKGluc3RhbmNlLnJlbmRlci5fcmMpIHtcclxuICAgICAgICAgICAgaW5zdGFuY2Uud2l0aFByb3h5ID0gbmV3IFByb3h5KGluc3RhbmNlLmN0eCwgUnVudGltZUNvbXBpbGVkUHVibGljSW5zdGFuY2VQcm94eUhhbmRsZXJzKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyBzdXBwb3J0IGZvciAyLnggb3B0aW9uc1xyXG4gICAgaWYgKF9fVlVFX09QVElPTlNfQVBJX18pIHtcclxuICAgICAgICBjdXJyZW50SW5zdGFuY2UgPSBpbnN0YW5jZTtcclxuICAgICAgICBwYXVzZVRyYWNraW5nKCk7XHJcbiAgICAgICAgYXBwbHlPcHRpb25zKGluc3RhbmNlLCBDb21wb25lbnQpO1xyXG4gICAgICAgIHJlc2V0VHJhY2tpbmcoKTtcclxuICAgICAgICBjdXJyZW50SW5zdGFuY2UgPSBudWxsO1xyXG4gICAgfVxyXG4gICAgLy8gd2FybiBtaXNzaW5nIHRlbXBsYXRlL3JlbmRlclxyXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhQ29tcG9uZW50LnJlbmRlciAmJiBpbnN0YW5jZS5yZW5kZXIgPT09IE5PT1ApIHtcclxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cclxuICAgICAgICBpZiAoIWNvbXBpbGUgJiYgQ29tcG9uZW50LnRlbXBsYXRlKSB7XHJcbiAgICAgICAgICAgIHdhcm4oYENvbXBvbmVudCBwcm92aWRlZCB0ZW1wbGF0ZSBvcHRpb24gYnV0IGAgK1xyXG4gICAgICAgICAgICAgICAgYHJ1bnRpbWUgY29tcGlsYXRpb24gaXMgbm90IHN1cHBvcnRlZCBpbiB0aGlzIGJ1aWxkIG9mIFZ1ZS5gICtcclxuICAgICAgICAgICAgICAgICggYCBDb25maWd1cmUgeW91ciBidW5kbGVyIHRvIGFsaWFzIFwidnVlXCIgdG8gXCJ2dWUvZGlzdC92dWUuZXNtLWJ1bmRsZXIuanNcIi5gXHJcbiAgICAgICAgICAgICAgICAgICAgKSAvKiBzaG91bGQgbm90IGhhcHBlbiAqLyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB3YXJuKGBDb21wb25lbnQgaXMgbWlzc2luZyB0ZW1wbGF0ZSBvciByZW5kZXIgZnVuY3Rpb24uYCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbmNvbnN0IGF0dHJIYW5kbGVycyA9IHtcclxuICAgIGdldDogKHRhcmdldCwga2V5KSA9PiB7XHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICBtYXJrQXR0cnNBY2Nlc3NlZCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGFyZ2V0W2tleV07XHJcbiAgICB9LFxyXG4gICAgc2V0OiAoKSA9PiB7XHJcbiAgICAgICAgd2Fybihgc2V0dXBDb250ZXh0LmF0dHJzIGlzIHJlYWRvbmx5LmApO1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH0sXHJcbiAgICBkZWxldGVQcm9wZXJ0eTogKCkgPT4ge1xyXG4gICAgICAgIHdhcm4oYHNldHVwQ29udGV4dC5hdHRycyBpcyByZWFkb25seS5gKTtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbn07XHJcbmZ1bmN0aW9uIGNyZWF0ZVNldHVwQ29udGV4dChpbnN0YW5jZSkge1xyXG4gICAgY29uc3QgZXhwb3NlID0gZXhwb3NlZCA9PiB7XHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBpbnN0YW5jZS5leHBvc2VkKSB7XHJcbiAgICAgICAgICAgIHdhcm4oYGV4cG9zZSgpIHNob3VsZCBiZSBjYWxsZWQgb25seSBvbmNlIHBlciBzZXR1cCgpLmApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpbnN0YW5jZS5leHBvc2VkID0gcHJveHlSZWZzKGV4cG9zZWQpO1xyXG4gICAgfTtcclxuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAvLyBXZSB1c2UgZ2V0dGVycyBpbiBkZXYgaW4gY2FzZSBsaWJzIGxpa2UgdGVzdC11dGlscyBvdmVyd3JpdGUgaW5zdGFuY2VcclxuICAgICAgICAvLyBwcm9wZXJ0aWVzIChvdmVyd3JpdGVzIHNob3VsZCBub3QgYmUgZG9uZSBpbiBwcm9kKVxyXG4gICAgICAgIHJldHVybiBPYmplY3QuZnJlZXplKHtcclxuICAgICAgICAgICAgZ2V0IHByb3BzKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGluc3RhbmNlLnByb3BzO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBnZXQgYXR0cnMoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFByb3h5KGluc3RhbmNlLmF0dHJzLCBhdHRySGFuZGxlcnMpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBnZXQgc2xvdHMoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc2hhbGxvd1JlYWRvbmx5KGluc3RhbmNlLnNsb3RzKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZ2V0IGVtaXQoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKGV2ZW50LCAuLi5hcmdzKSA9PiBpbnN0YW5jZS5lbWl0KGV2ZW50LCAuLi5hcmdzKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZXhwb3NlXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBhdHRyczogaW5zdGFuY2UuYXR0cnMsXHJcbiAgICAgICAgICAgIHNsb3RzOiBpbnN0YW5jZS5zbG90cyxcclxuICAgICAgICAgICAgZW1pdDogaW5zdGFuY2UuZW1pdCxcclxuICAgICAgICAgICAgZXhwb3NlXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxyXG4vLyByZWNvcmQgZWZmZWN0cyBjcmVhdGVkIGR1cmluZyBhIGNvbXBvbmVudCdzIHNldHVwKCkgc28gdGhhdCB0aGV5IGNhbiBiZVxyXG4vLyBzdG9wcGVkIHdoZW4gdGhlIGNvbXBvbmVudCB1bm1vdW50c1xyXG5mdW5jdGlvbiByZWNvcmRJbnN0YW5jZUJvdW5kRWZmZWN0KGVmZmVjdCwgaW5zdGFuY2UgPSBjdXJyZW50SW5zdGFuY2UpIHtcclxuICAgIGlmIChpbnN0YW5jZSkge1xyXG4gICAgICAgIChpbnN0YW5jZS5lZmZlY3RzIHx8IChpbnN0YW5jZS5lZmZlY3RzID0gW10pKS5wdXNoKGVmZmVjdCk7XHJcbiAgICB9XHJcbn1cclxuY29uc3QgY2xhc3NpZnlSRSA9IC8oPzpefFstX10pKFxcdykvZztcclxuY29uc3QgY2xhc3NpZnkgPSAoc3RyKSA9PiBzdHIucmVwbGFjZShjbGFzc2lmeVJFLCBjID0+IGMudG9VcHBlckNhc2UoKSkucmVwbGFjZSgvWy1fXS9nLCAnJyk7XHJcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXHJcbmZ1bmN0aW9uIGZvcm1hdENvbXBvbmVudE5hbWUoaW5zdGFuY2UsIENvbXBvbmVudCwgaXNSb290ID0gZmFsc2UpIHtcclxuICAgIGxldCBuYW1lID0gaXNGdW5jdGlvbihDb21wb25lbnQpXHJcbiAgICAgICAgPyBDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgQ29tcG9uZW50Lm5hbWVcclxuICAgICAgICA6IENvbXBvbmVudC5uYW1lO1xyXG4gICAgaWYgKCFuYW1lICYmIENvbXBvbmVudC5fX2ZpbGUpIHtcclxuICAgICAgICBjb25zdCBtYXRjaCA9IENvbXBvbmVudC5fX2ZpbGUubWF0Y2goLyhbXi9cXFxcXSspXFwuXFx3KyQvKTtcclxuICAgICAgICBpZiAobWF0Y2gpIHtcclxuICAgICAgICAgICAgbmFtZSA9IG1hdGNoWzFdO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmICghbmFtZSAmJiBpbnN0YW5jZSAmJiBpbnN0YW5jZS5wYXJlbnQpIHtcclxuICAgICAgICAvLyB0cnkgdG8gaW5mZXIgdGhlIG5hbWUgYmFzZWQgb24gcmV2ZXJzZSByZXNvbHV0aW9uXHJcbiAgICAgICAgY29uc3QgaW5mZXJGcm9tUmVnaXN0cnkgPSAocmVnaXN0cnkpID0+IHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gcmVnaXN0cnkpIHtcclxuICAgICAgICAgICAgICAgIGlmIChyZWdpc3RyeVtrZXldID09PSBDb21wb25lbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ga2V5O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBuYW1lID1cclxuICAgICAgICAgICAgaW5mZXJGcm9tUmVnaXN0cnkoaW5zdGFuY2UuY29tcG9uZW50cyB8fFxyXG4gICAgICAgICAgICAgICAgaW5zdGFuY2UucGFyZW50LnR5cGUuY29tcG9uZW50cykgfHwgaW5mZXJGcm9tUmVnaXN0cnkoaW5zdGFuY2UuYXBwQ29udGV4dC5jb21wb25lbnRzKTtcclxuICAgIH1cclxuICAgIHJldHVybiBuYW1lID8gY2xhc3NpZnkobmFtZSkgOiBpc1Jvb3QgPyBgQXBwYCA6IGBBbm9ueW1vdXNgO1xyXG59XHJcbmZ1bmN0aW9uIGlzQ2xhc3NDb21wb25lbnQodmFsdWUpIHtcclxuICAgIHJldHVybiBpc0Z1bmN0aW9uKHZhbHVlKSAmJiAnX192Y2NPcHRzJyBpbiB2YWx1ZTtcclxufVxuXG5mdW5jdGlvbiBjb21wdXRlZChnZXR0ZXJPck9wdGlvbnMpIHtcclxuICAgIGNvbnN0IGMgPSBjb21wdXRlZCQxKGdldHRlck9yT3B0aW9ucyk7XHJcbiAgICByZWNvcmRJbnN0YW5jZUJvdW5kRWZmZWN0KGMuZWZmZWN0KTtcclxuICAgIHJldHVybiBjO1xyXG59XG5cbi8vIGltcGxlbWVudGF0aW9uXHJcbmZ1bmN0aW9uIGRlZmluZVByb3BzKCkge1xyXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgIHdhcm4oYGRlZmluZVByb3BzKCkgaXMgYSBjb21waWxlci1oaW50IGhlbHBlciB0aGF0IGlzIG9ubHkgdXNhYmxlIGluc2lkZSBgICtcclxuICAgICAgICAgICAgYDxzY3JpcHQgc2V0dXA+IG9mIGEgc2luZ2xlIGZpbGUgY29tcG9uZW50LiBJdHMgYXJndW1lbnRzIHNob3VsZCBiZSBgICtcclxuICAgICAgICAgICAgYGNvbXBpbGVkIGF3YXkgYW5kIHBhc3NpbmcgaXQgYXQgcnVudGltZSBoYXMgbm8gZWZmZWN0LmApO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG51bGw7XHJcbn1cclxuLy8gaW1wbGVtZW50YXRpb25cclxuZnVuY3Rpb24gZGVmaW5lRW1pdCgpIHtcclxuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICB3YXJuKGBkZWZpbmVFbWl0KCkgaXMgYSBjb21waWxlci1oaW50IGhlbHBlciB0aGF0IGlzIG9ubHkgdXNhYmxlIGluc2lkZSBgICtcclxuICAgICAgICAgICAgYDxzY3JpcHQgc2V0dXA+IG9mIGEgc2luZ2xlIGZpbGUgY29tcG9uZW50LiBJdHMgYXJndW1lbnRzIHNob3VsZCBiZSBgICtcclxuICAgICAgICAgICAgYGNvbXBpbGVkIGF3YXkgYW5kIHBhc3NpbmcgaXQgYXQgcnVudGltZSBoYXMgbm8gZWZmZWN0LmApO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG51bGw7XHJcbn1cclxuZnVuY3Rpb24gdXNlQ29udGV4dCgpIHtcclxuICAgIGNvbnN0IGkgPSBnZXRDdXJyZW50SW5zdGFuY2UoKTtcclxuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIWkpIHtcclxuICAgICAgICB3YXJuKGB1c2VDb250ZXh0KCkgY2FsbGVkIHdpdGhvdXQgYWN0aXZlIGluc3RhbmNlLmApO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGkuc2V0dXBDb250ZXh0IHx8IChpLnNldHVwQ29udGV4dCA9IGNyZWF0ZVNldHVwQ29udGV4dChpKSk7XHJcbn1cblxuLy8gQWN0dWFsIGltcGxlbWVudGF0aW9uXHJcbmZ1bmN0aW9uIGgodHlwZSwgcHJvcHNPckNoaWxkcmVuLCBjaGlsZHJlbikge1xyXG4gICAgY29uc3QgbCA9IGFyZ3VtZW50cy5sZW5ndGg7XHJcbiAgICBpZiAobCA9PT0gMikge1xyXG4gICAgICAgIGlmIChpc09iamVjdChwcm9wc09yQ2hpbGRyZW4pICYmICFpc0FycmF5KHByb3BzT3JDaGlsZHJlbikpIHtcclxuICAgICAgICAgICAgLy8gc2luZ2xlIHZub2RlIHdpdGhvdXQgcHJvcHNcclxuICAgICAgICAgICAgaWYgKGlzVk5vZGUocHJvcHNPckNoaWxkcmVuKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZVZOb2RlKHR5cGUsIG51bGwsIFtwcm9wc09yQ2hpbGRyZW5dKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBwcm9wcyB3aXRob3V0IGNoaWxkcmVuXHJcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVWTm9kZSh0eXBlLCBwcm9wc09yQ2hpbGRyZW4pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gb21pdCBwcm9wc1xyXG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlVk5vZGUodHlwZSwgbnVsbCwgcHJvcHNPckNoaWxkcmVuKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBpZiAobCA+IDMpIHtcclxuICAgICAgICAgICAgY2hpbGRyZW4gPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChsID09PSAzICYmIGlzVk5vZGUoY2hpbGRyZW4pKSB7XHJcbiAgICAgICAgICAgIGNoaWxkcmVuID0gW2NoaWxkcmVuXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGNyZWF0ZVZOb2RlKHR5cGUsIHByb3BzT3JDaGlsZHJlbiwgY2hpbGRyZW4pO1xyXG4gICAgfVxyXG59XG5cbmNvbnN0IHNzckNvbnRleHRLZXkgPSBTeW1ib2woKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpID8gYHNzckNvbnRleHRgIDogYGApO1xyXG5jb25zdCB1c2VTU1JDb250ZXh0ID0gKCkgPT4ge1xyXG4gICAge1xyXG4gICAgICAgIGNvbnN0IGN0eCA9IGluamVjdChzc3JDb250ZXh0S2V5KTtcclxuICAgICAgICBpZiAoIWN0eCkge1xyXG4gICAgICAgICAgICB3YXJuKGBTZXJ2ZXIgcmVuZGVyaW5nIGNvbnRleHQgbm90IHByb3ZpZGVkLiBNYWtlIHN1cmUgdG8gb25seSBjYWxsIGAgK1xyXG4gICAgICAgICAgICAgICAgYHVzZVNzckNvbnRleHQoKSBjb25kaXRpb25hbGx5IGluIHRoZSBzZXJ2ZXIgYnVpbGQuYCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBjdHg7XHJcbiAgICB9XHJcbn07XG5cbmZ1bmN0aW9uIGluaXRDdXN0b21Gb3JtYXR0ZXIoKSB7XHJcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1yZXN0cmljdGVkLWdsb2JhbHMgKi9cclxuICAgIGlmICghKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHx8IHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgY29uc3QgdnVlU3R5bGUgPSB7IHN0eWxlOiAnY29sb3I6IzNiYTc3NicgfTtcclxuICAgIGNvbnN0IG51bWJlclN0eWxlID0geyBzdHlsZTogJ2NvbG9yOiMwYjFiYzknIH07XHJcbiAgICBjb25zdCBzdHJpbmdTdHlsZSA9IHsgc3R5bGU6ICdjb2xvcjojYjYyZTI0JyB9O1xyXG4gICAgY29uc3Qga2V5d29yZFN0eWxlID0geyBzdHlsZTogJ2NvbG9yOiM5ZDI4OGMnIH07XHJcbiAgICAvLyBjdXN0b20gZm9ybWF0dGVyIGZvciBDaHJvbWVcclxuICAgIC8vIGh0dHBzOi8vd3d3Lm1hdHR6ZXVuZXJ0LmNvbS8yMDE2LzAyLzE5L2N1c3RvbS1jaHJvbWUtZGV2dG9vbHMtb2JqZWN0LWZvcm1hdHRlcnMuaHRtbFxyXG4gICAgY29uc3QgZm9ybWF0dGVyID0ge1xyXG4gICAgICAgIGhlYWRlcihvYmopIHtcclxuICAgICAgICAgICAgLy8gVE9ETyBhbHNvIGZvcm1hdCBDb21wb25lbnRQdWJsaWNJbnN0YW5jZSAmIGN0eC5zbG90cy9hdHRycyBpbiBzZXR1cFxyXG4gICAgICAgICAgICBpZiAoIWlzT2JqZWN0KG9iaikpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChvYmouX19pc1Z1ZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFsnZGl2JywgdnVlU3R5bGUsIGBWdWVJbnN0YW5jZWBdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGlzUmVmKG9iaikpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgICAgICAgICAgJ2RpdicsXHJcbiAgICAgICAgICAgICAgICAgICAge30sXHJcbiAgICAgICAgICAgICAgICAgICAgWydzcGFuJywgdnVlU3R5bGUsIGdlblJlZkZsYWcob2JqKV0sXHJcbiAgICAgICAgICAgICAgICAgICAgJzwnLFxyXG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdFZhbHVlKG9iai52YWx1ZSksXHJcbiAgICAgICAgICAgICAgICAgICAgYD5gXHJcbiAgICAgICAgICAgICAgICBdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGlzUmVhY3RpdmUob2JqKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAgICAgICAgICAnZGl2JyxcclxuICAgICAgICAgICAgICAgICAgICB7fSxcclxuICAgICAgICAgICAgICAgICAgICBbJ3NwYW4nLCB2dWVTdHlsZSwgJ1JlYWN0aXZlJ10sXHJcbiAgICAgICAgICAgICAgICAgICAgJzwnLFxyXG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdFZhbHVlKG9iaiksXHJcbiAgICAgICAgICAgICAgICAgICAgYD4ke2lzUmVhZG9ubHkob2JqKSA/IGAgKHJlYWRvbmx5KWAgOiBgYH1gXHJcbiAgICAgICAgICAgICAgICBdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGlzUmVhZG9ubHkob2JqKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAgICAgICAgICAnZGl2JyxcclxuICAgICAgICAgICAgICAgICAgICB7fSxcclxuICAgICAgICAgICAgICAgICAgICBbJ3NwYW4nLCB2dWVTdHlsZSwgJ1JlYWRvbmx5J10sXHJcbiAgICAgICAgICAgICAgICAgICAgJzwnLFxyXG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdFZhbHVlKG9iaiksXHJcbiAgICAgICAgICAgICAgICAgICAgJz4nXHJcbiAgICAgICAgICAgICAgICBdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaGFzQm9keShvYmopIHtcclxuICAgICAgICAgICAgcmV0dXJuIG9iaiAmJiBvYmouX19pc1Z1ZTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGJvZHkob2JqKSB7XHJcbiAgICAgICAgICAgIGlmIChvYmogJiYgb2JqLl9faXNWdWUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgICAgICAgICAgJ2RpdicsXHJcbiAgICAgICAgICAgICAgICAgICAge30sXHJcbiAgICAgICAgICAgICAgICAgICAgLi4uZm9ybWF0SW5zdGFuY2Uob2JqLiQpXHJcbiAgICAgICAgICAgICAgICBdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGZ1bmN0aW9uIGZvcm1hdEluc3RhbmNlKGluc3RhbmNlKSB7XHJcbiAgICAgICAgY29uc3QgYmxvY2tzID0gW107XHJcbiAgICAgICAgaWYgKGluc3RhbmNlLnR5cGUucHJvcHMgJiYgaW5zdGFuY2UucHJvcHMpIHtcclxuICAgICAgICAgICAgYmxvY2tzLnB1c2goY3JlYXRlSW5zdGFuY2VCbG9jaygncHJvcHMnLCB0b1JhdyhpbnN0YW5jZS5wcm9wcykpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGluc3RhbmNlLnNldHVwU3RhdGUgIT09IEVNUFRZX09CSikge1xyXG4gICAgICAgICAgICBibG9ja3MucHVzaChjcmVhdGVJbnN0YW5jZUJsb2NrKCdzZXR1cCcsIGluc3RhbmNlLnNldHVwU3RhdGUpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGluc3RhbmNlLmRhdGEgIT09IEVNUFRZX09CSikge1xyXG4gICAgICAgICAgICBibG9ja3MucHVzaChjcmVhdGVJbnN0YW5jZUJsb2NrKCdkYXRhJywgdG9SYXcoaW5zdGFuY2UuZGF0YSkpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgY29tcHV0ZWQgPSBleHRyYWN0S2V5cyhpbnN0YW5jZSwgJ2NvbXB1dGVkJyk7XHJcbiAgICAgICAgaWYgKGNvbXB1dGVkKSB7XHJcbiAgICAgICAgICAgIGJsb2Nrcy5wdXNoKGNyZWF0ZUluc3RhbmNlQmxvY2soJ2NvbXB1dGVkJywgY29tcHV0ZWQpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgaW5qZWN0ZWQgPSBleHRyYWN0S2V5cyhpbnN0YW5jZSwgJ2luamVjdCcpO1xyXG4gICAgICAgIGlmIChpbmplY3RlZCkge1xyXG4gICAgICAgICAgICBibG9ja3MucHVzaChjcmVhdGVJbnN0YW5jZUJsb2NrKCdpbmplY3RlZCcsIGluamVjdGVkKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGJsb2Nrcy5wdXNoKFtcclxuICAgICAgICAgICAgJ2RpdicsXHJcbiAgICAgICAgICAgIHt9LFxyXG4gICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICAnc3BhbicsXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IGtleXdvcmRTdHlsZS5zdHlsZSArICc7b3BhY2l0eTowLjY2J1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICckIChpbnRlcm5hbCk6ICdcclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgWydvYmplY3QnLCB7IG9iamVjdDogaW5zdGFuY2UgfV1cclxuICAgICAgICBdKTtcclxuICAgICAgICByZXR1cm4gYmxvY2tzO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gY3JlYXRlSW5zdGFuY2VCbG9jayh0eXBlLCB0YXJnZXQpIHtcclxuICAgICAgICB0YXJnZXQgPSBleHRlbmQoe30sIHRhcmdldCk7XHJcbiAgICAgICAgaWYgKCFPYmplY3Qua2V5cyh0YXJnZXQpLmxlbmd0aCkge1xyXG4gICAgICAgICAgICByZXR1cm4gWydzcGFuJywge31dO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICAnZGl2JyxcclxuICAgICAgICAgICAgeyBzdHlsZTogJ2xpbmUtaGVpZ2h0OjEuMjVlbTttYXJnaW4tYm90dG9tOjAuNmVtJyB9LFxyXG4gICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICAnZGl2JyxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBzdHlsZTogJ2NvbG9yOiM0NzY1ODInXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgdHlwZVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICAnZGl2JyxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBzdHlsZTogJ3BhZGRpbmctbGVmdDoxLjI1ZW0nXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgLi4uT2JqZWN0LmtleXModGFyZ2V0KS5tYXAoa2V5ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnZGl2JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAge30sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnc3BhbicsIGtleXdvcmRTdHlsZSwga2V5ICsgJzogJ10sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdFZhbHVlKHRhcmdldFtrZXldLCBmYWxzZSlcclxuICAgICAgICAgICAgICAgICAgICBdO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgXVxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBmb3JtYXRWYWx1ZSh2LCBhc1JhdyA9IHRydWUpIHtcclxuICAgICAgICBpZiAodHlwZW9mIHYgPT09ICdudW1iZXInKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBbJ3NwYW4nLCBudW1iZXJTdHlsZSwgdl07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiB2ID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICByZXR1cm4gWydzcGFuJywgc3RyaW5nU3R5bGUsIEpTT04uc3RyaW5naWZ5KHYpXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIHYgPT09ICdib29sZWFuJykge1xyXG4gICAgICAgICAgICByZXR1cm4gWydzcGFuJywga2V5d29yZFN0eWxlLCB2XTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoaXNPYmplY3QodikpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFsnb2JqZWN0JywgeyBvYmplY3Q6IGFzUmF3ID8gdG9SYXcodikgOiB2IH1dO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIFsnc3BhbicsIHN0cmluZ1N0eWxlLCBTdHJpbmcodildO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGV4dHJhY3RLZXlzKGluc3RhbmNlLCB0eXBlKSB7XHJcbiAgICAgICAgY29uc3QgQ29tcCA9IGluc3RhbmNlLnR5cGU7XHJcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24oQ29tcCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBleHRyYWN0ZWQgPSB7fTtcclxuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBpbnN0YW5jZS5jdHgpIHtcclxuICAgICAgICAgICAgaWYgKGlzS2V5T2ZUeXBlKENvbXAsIGtleSwgdHlwZSkpIHtcclxuICAgICAgICAgICAgICAgIGV4dHJhY3RlZFtrZXldID0gaW5zdGFuY2UuY3R4W2tleV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGV4dHJhY3RlZDtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGlzS2V5T2ZUeXBlKENvbXAsIGtleSwgdHlwZSkge1xyXG4gICAgICAgIGNvbnN0IG9wdHMgPSBDb21wW3R5cGVdO1xyXG4gICAgICAgIGlmICgoaXNBcnJheShvcHRzKSAmJiBvcHRzLmluY2x1ZGVzKGtleSkpIHx8XHJcbiAgICAgICAgICAgIChpc09iamVjdChvcHRzKSAmJiBrZXkgaW4gb3B0cykpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChDb21wLmV4dGVuZHMgJiYgaXNLZXlPZlR5cGUoQ29tcC5leHRlbmRzLCBrZXksIHR5cGUpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoQ29tcC5taXhpbnMgJiYgQ29tcC5taXhpbnMuc29tZShtID0+IGlzS2V5T2ZUeXBlKG0sIGtleSwgdHlwZSkpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGdlblJlZkZsYWcodikge1xyXG4gICAgICAgIGlmICh2Ll9zaGFsbG93KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBgU2hhbGxvd1JlZmA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh2LmVmZmVjdCkge1xyXG4gICAgICAgICAgICByZXR1cm4gYENvbXB1dGVkUmVmYDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGBSZWZgO1xyXG4gICAgfVxyXG4gICAgaWYgKHdpbmRvdy5kZXZ0b29sc0Zvcm1hdHRlcnMpIHtcclxuICAgICAgICB3aW5kb3cuZGV2dG9vbHNGb3JtYXR0ZXJzLnB1c2goZm9ybWF0dGVyKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHdpbmRvdy5kZXZ0b29sc0Zvcm1hdHRlcnMgPSBbZm9ybWF0dGVyXTtcclxuICAgIH1cclxufVxuXG4vKipcclxuICogQWN0dWFsIGltcGxlbWVudGF0aW9uXHJcbiAqL1xyXG5mdW5jdGlvbiByZW5kZXJMaXN0KHNvdXJjZSwgcmVuZGVySXRlbSkge1xyXG4gICAgbGV0IHJldDtcclxuICAgIGlmIChpc0FycmF5KHNvdXJjZSkgfHwgaXNTdHJpbmcoc291cmNlKSkge1xyXG4gICAgICAgIHJldCA9IG5ldyBBcnJheShzb3VyY2UubGVuZ3RoKTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMCwgbCA9IHNvdXJjZS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcclxuICAgICAgICAgICAgcmV0W2ldID0gcmVuZGVySXRlbShzb3VyY2VbaV0sIGkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2UgaWYgKHR5cGVvZiBzb3VyY2UgPT09ICdudW1iZXInKSB7XHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhTnVtYmVyLmlzSW50ZWdlcihzb3VyY2UpKSB7XHJcbiAgICAgICAgICAgIHdhcm4oYFRoZSB2LWZvciByYW5nZSBleHBlY3QgYW4gaW50ZWdlciB2YWx1ZSBidXQgZ290ICR7c291cmNlfS5gKTtcclxuICAgICAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXQgPSBuZXcgQXJyYXkoc291cmNlKTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNvdXJjZTsgaSsrKSB7XHJcbiAgICAgICAgICAgIHJldFtpXSA9IHJlbmRlckl0ZW0oaSArIDEsIGkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGlzT2JqZWN0KHNvdXJjZSkpIHtcclxuICAgICAgICBpZiAoc291cmNlW1N5bWJvbC5pdGVyYXRvcl0pIHtcclxuICAgICAgICAgICAgcmV0ID0gQXJyYXkuZnJvbShzb3VyY2UsIHJlbmRlckl0ZW0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XHJcbiAgICAgICAgICAgIHJldCA9IG5ldyBBcnJheShrZXlzLmxlbmd0aCk7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsID0ga2V5cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGtleSA9IGtleXNbaV07XHJcbiAgICAgICAgICAgICAgICByZXRbaV0gPSByZW5kZXJJdGVtKHNvdXJjZVtrZXldLCBrZXksIGkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgcmV0ID0gW107XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmV0O1xyXG59XG5cbi8qKlxyXG4gKiBGb3IgcHJlZml4aW5nIGtleXMgaW4gdi1vbj1cIm9ialwiIHdpdGggXCJvblwiXHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG5mdW5jdGlvbiB0b0hhbmRsZXJzKG9iaikge1xyXG4gICAgY29uc3QgcmV0ID0ge307XHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFpc09iamVjdChvYmopKSB7XHJcbiAgICAgICAgd2Fybihgdi1vbiB3aXRoIG5vIGFyZ3VtZW50IGV4cGVjdHMgYW4gb2JqZWN0IHZhbHVlLmApO1xyXG4gICAgICAgIHJldHVybiByZXQ7XHJcbiAgICB9XHJcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBvYmopIHtcclxuICAgICAgICByZXRbdG9IYW5kbGVyS2V5KGtleSldID0gb2JqW2tleV07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmV0O1xyXG59XG5cbi8qKlxyXG4gKiBDb21waWxlciBydW50aW1lIGhlbHBlciBmb3IgY3JlYXRpbmcgZHluYW1pYyBzbG90cyBvYmplY3RcclxuICogQHByaXZhdGVcclxuICovXHJcbmZ1bmN0aW9uIGNyZWF0ZVNsb3RzKHNsb3RzLCBkeW5hbWljU2xvdHMpIHtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZHluYW1pY1Nsb3RzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgY29uc3Qgc2xvdCA9IGR5bmFtaWNTbG90c1tpXTtcclxuICAgICAgICAvLyBhcnJheSBvZiBkeW5hbWljIHNsb3QgZ2VuZXJhdGVkIGJ5IDx0ZW1wbGF0ZSB2LWZvcj1cIi4uLlwiICNbLi4uXT5cclxuICAgICAgICBpZiAoaXNBcnJheShzbG90KSkge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHNsb3QubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgICAgIHNsb3RzW3Nsb3Rbal0ubmFtZV0gPSBzbG90W2pdLmZuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHNsb3QpIHtcclxuICAgICAgICAgICAgLy8gY29uZGl0aW9uYWwgc2luZ2xlIHNsb3QgZ2VuZXJhdGVkIGJ5IDx0ZW1wbGF0ZSB2LWlmPVwiLi4uXCIgI2Zvbz5cclxuICAgICAgICAgICAgc2xvdHNbc2xvdC5uYW1lXSA9IHNsb3QuZm47XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHNsb3RzO1xyXG59XG5cbi8vIENvcmUgQVBJIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5jb25zdCB2ZXJzaW9uID0gXCIzLjAuNFwiO1xyXG4vKipcclxuICogU1NSIHV0aWxzIGZvciBcXEB2dWUvc2VydmVyLXJlbmRlcmVyLiBPbmx5IGV4cG9zZWQgaW4gY2pzIGJ1aWxkcy5cclxuICogQGludGVybmFsXHJcbiAqL1xyXG5jb25zdCBzc3JVdGlscyA9ICggbnVsbCk7XG5cbmV4cG9ydCB7IEJhc2VUcmFuc2l0aW9uLCBDb21tZW50LCBGcmFnbWVudCwgS2VlcEFsaXZlLCBTdGF0aWMsIFN1c3BlbnNlLCBUZWxlcG9ydCwgVGV4dCwgY2FsbFdpdGhBc3luY0Vycm9ySGFuZGxpbmcsIGNhbGxXaXRoRXJyb3JIYW5kbGluZywgY2xvbmVWTm9kZSwgY29tcHV0ZWQsIGNyZWF0ZUJsb2NrLCBjcmVhdGVDb21tZW50Vk5vZGUsIGNyZWF0ZUh5ZHJhdGlvblJlbmRlcmVyLCBjcmVhdGVSZW5kZXJlciwgY3JlYXRlU2xvdHMsIGNyZWF0ZVN0YXRpY1ZOb2RlLCBjcmVhdGVUZXh0Vk5vZGUsIGNyZWF0ZVZOb2RlLCBkZWZpbmVBc3luY0NvbXBvbmVudCwgZGVmaW5lQ29tcG9uZW50LCBkZWZpbmVFbWl0LCBkZWZpbmVQcm9wcywgZGV2dG9vbHMsIGdldEN1cnJlbnRJbnN0YW5jZSwgZ2V0VHJhbnNpdGlvblJhd0NoaWxkcmVuLCBoLCBoYW5kbGVFcnJvciwgaW5pdEN1c3RvbUZvcm1hdHRlciwgaW5qZWN0LCBpc1ZOb2RlLCBtZXJnZVByb3BzLCBuZXh0VGljaywgb25BY3RpdmF0ZWQsIG9uQmVmb3JlTW91bnQsIG9uQmVmb3JlVW5tb3VudCwgb25CZWZvcmVVcGRhdGUsIG9uRGVhY3RpdmF0ZWQsIG9uRXJyb3JDYXB0dXJlZCwgb25Nb3VudGVkLCBvblJlbmRlclRyYWNrZWQsIG9uUmVuZGVyVHJpZ2dlcmVkLCBvblVubW91bnRlZCwgb25VcGRhdGVkLCBvcGVuQmxvY2ssIHBvcFNjb3BlSWQsIHByb3ZpZGUsIHB1c2hTY29wZUlkLCBxdWV1ZVBvc3RGbHVzaENiLCByZWdpc3RlclJ1bnRpbWVDb21waWxlciwgcmVuZGVyTGlzdCwgcmVuZGVyU2xvdCwgcmVzb2x2ZUNvbXBvbmVudCwgcmVzb2x2ZURpcmVjdGl2ZSwgcmVzb2x2ZUR5bmFtaWNDb21wb25lbnQsIHJlc29sdmVUcmFuc2l0aW9uSG9va3MsIHNldEJsb2NrVHJhY2tpbmcsIHNldERldnRvb2xzSG9vaywgc2V0VHJhbnNpdGlvbkhvb2tzLCBzc3JDb250ZXh0S2V5LCBzc3JVdGlscywgdG9IYW5kbGVycywgdHJhbnNmb3JtVk5vZGVBcmdzLCB1c2VDb250ZXh0LCB1c2VTU1JDb250ZXh0LCB1c2VUcmFuc2l0aW9uU3RhdGUsIHZlcnNpb24sIHdhcm4sIHdhdGNoLCB3YXRjaEVmZmVjdCwgd2l0aEN0eCwgd2l0aERpcmVjdGl2ZXMsIHdpdGhTY29wZUlkIH07XG4iLCJpbXBvcnQgeyBjYW1lbGl6ZSwgd2FybiwgY2FsbFdpdGhBc3luY0Vycm9ySGFuZGxpbmcsIGdldEN1cnJlbnRJbnN0YW5jZSwgb25Nb3VudGVkLCB3YXRjaEVmZmVjdCwgb25VcGRhdGVkLCBGcmFnbWVudCwgaCwgQmFzZVRyYW5zaXRpb24sIHVzZVRyYW5zaXRpb25TdGF0ZSwgdG9SYXcsIGdldFRyYW5zaXRpb25SYXdDaGlsZHJlbiwgc2V0VHJhbnNpdGlvbkhvb2tzLCByZXNvbHZlVHJhbnNpdGlvbkhvb2tzLCBjcmVhdGVWTm9kZSwgY3JlYXRlUmVuZGVyZXIsIGNyZWF0ZUh5ZHJhdGlvblJlbmRlcmVyIH0gZnJvbSAnQHZ1ZS9ydW50aW1lLWNvcmUnO1xuZXhwb3J0ICogZnJvbSAnQHZ1ZS9ydW50aW1lLWNvcmUnO1xuaW1wb3J0IHsgaXNTdHJpbmcsIGlzQXJyYXksIGh5cGhlbmF0ZSwgY2FwaXRhbGl6ZSwgaXNTcGVjaWFsQm9vbGVhbkF0dHIsIGlzT24sIGlzTW9kZWxMaXN0ZW5lciwgaXNGdW5jdGlvbiwgRU1QVFlfT0JKLCBleHRlbmQsIGlzT2JqZWN0LCB0b051bWJlciwgaW52b2tlQXJyYXlGbnMsIGxvb3NlSW5kZXhPZiwgaXNTZXQsIGxvb3NlRXF1YWwsIGlzSFRNTFRhZywgaXNTVkdUYWcgfSBmcm9tICdAdnVlL3NoYXJlZCc7XG5cbmNvbnN0IHN2Z05TID0gJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJztcclxuY29uc3QgZG9jID0gKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgPyBkb2N1bWVudCA6IG51bGwpO1xyXG5sZXQgdGVtcENvbnRhaW5lcjtcclxubGV0IHRlbXBTVkdDb250YWluZXI7XHJcbmNvbnN0IG5vZGVPcHMgPSB7XHJcbiAgICBpbnNlcnQ6IChjaGlsZCwgcGFyZW50LCBhbmNob3IpID0+IHtcclxuICAgICAgICBwYXJlbnQuaW5zZXJ0QmVmb3JlKGNoaWxkLCBhbmNob3IgfHwgbnVsbCk7XHJcbiAgICB9LFxyXG4gICAgcmVtb3ZlOiBjaGlsZCA9PiB7XHJcbiAgICAgICAgY29uc3QgcGFyZW50ID0gY2hpbGQucGFyZW50Tm9kZTtcclxuICAgICAgICBpZiAocGFyZW50KSB7XHJcbiAgICAgICAgICAgIHBhcmVudC5yZW1vdmVDaGlsZChjaGlsZCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIGNyZWF0ZUVsZW1lbnQ6ICh0YWcsIGlzU1ZHLCBpcykgPT4gaXNTVkdcclxuICAgICAgICA/IGRvYy5jcmVhdGVFbGVtZW50TlMoc3ZnTlMsIHRhZylcclxuICAgICAgICA6IGRvYy5jcmVhdGVFbGVtZW50KHRhZywgaXMgPyB7IGlzIH0gOiB1bmRlZmluZWQpLFxyXG4gICAgY3JlYXRlVGV4dDogdGV4dCA9PiBkb2MuY3JlYXRlVGV4dE5vZGUodGV4dCksXHJcbiAgICBjcmVhdGVDb21tZW50OiB0ZXh0ID0+IGRvYy5jcmVhdGVDb21tZW50KHRleHQpLFxyXG4gICAgc2V0VGV4dDogKG5vZGUsIHRleHQpID0+IHtcclxuICAgICAgICBub2RlLm5vZGVWYWx1ZSA9IHRleHQ7XHJcbiAgICB9LFxyXG4gICAgc2V0RWxlbWVudFRleHQ6IChlbCwgdGV4dCkgPT4ge1xyXG4gICAgICAgIGVsLnRleHRDb250ZW50ID0gdGV4dDtcclxuICAgIH0sXHJcbiAgICBwYXJlbnROb2RlOiBub2RlID0+IG5vZGUucGFyZW50Tm9kZSxcclxuICAgIG5leHRTaWJsaW5nOiBub2RlID0+IG5vZGUubmV4dFNpYmxpbmcsXHJcbiAgICBxdWVyeVNlbGVjdG9yOiBzZWxlY3RvciA9PiBkb2MucXVlcnlTZWxlY3RvcihzZWxlY3RvciksXHJcbiAgICBzZXRTY29wZUlkKGVsLCBpZCkge1xyXG4gICAgICAgIGVsLnNldEF0dHJpYnV0ZShpZCwgJycpO1xyXG4gICAgfSxcclxuICAgIGNsb25lTm9kZShlbCkge1xyXG4gICAgICAgIHJldHVybiBlbC5jbG9uZU5vZGUodHJ1ZSk7XHJcbiAgICB9LFxyXG4gICAgLy8gX19VTlNBRkVfX1xyXG4gICAgLy8gUmVhc29uOiBpbm5lckhUTUwuXHJcbiAgICAvLyBTdGF0aWMgY29udGVudCBoZXJlIGNhbiBvbmx5IGNvbWUgZnJvbSBjb21waWxlZCB0ZW1wbGF0ZXMuXHJcbiAgICAvLyBBcyBsb25nIGFzIHRoZSB1c2VyIG9ubHkgdXNlcyB0cnVzdGVkIHRlbXBsYXRlcywgdGhpcyBpcyBzYWZlLlxyXG4gICAgaW5zZXJ0U3RhdGljQ29udGVudChjb250ZW50LCBwYXJlbnQsIGFuY2hvciwgaXNTVkcpIHtcclxuICAgICAgICBjb25zdCB0ZW1wID0gaXNTVkdcclxuICAgICAgICAgICAgPyB0ZW1wU1ZHQ29udGFpbmVyIHx8XHJcbiAgICAgICAgICAgICAgICAodGVtcFNWR0NvbnRhaW5lciA9IGRvYy5jcmVhdGVFbGVtZW50TlMoc3ZnTlMsICdzdmcnKSlcclxuICAgICAgICAgICAgOiB0ZW1wQ29udGFpbmVyIHx8ICh0ZW1wQ29udGFpbmVyID0gZG9jLmNyZWF0ZUVsZW1lbnQoJ2RpdicpKTtcclxuICAgICAgICB0ZW1wLmlubmVySFRNTCA9IGNvbnRlbnQ7XHJcbiAgICAgICAgY29uc3QgZmlyc3QgPSB0ZW1wLmZpcnN0Q2hpbGQ7XHJcbiAgICAgICAgbGV0IG5vZGUgPSBmaXJzdDtcclxuICAgICAgICBsZXQgbGFzdCA9IG5vZGU7XHJcbiAgICAgICAgd2hpbGUgKG5vZGUpIHtcclxuICAgICAgICAgICAgbGFzdCA9IG5vZGU7XHJcbiAgICAgICAgICAgIG5vZGVPcHMuaW5zZXJ0KG5vZGUsIHBhcmVudCwgYW5jaG9yKTtcclxuICAgICAgICAgICAgbm9kZSA9IHRlbXAuZmlyc3RDaGlsZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFtmaXJzdCwgbGFzdF07XHJcbiAgICB9XHJcbn07XG5cbi8vIGNvbXBpbGVyIHNob3VsZCBub3JtYWxpemUgY2xhc3MgKyA6Y2xhc3MgYmluZGluZ3Mgb24gdGhlIHNhbWUgZWxlbWVudFxyXG4vLyBpbnRvIGEgc2luZ2xlIGJpbmRpbmcgWydzdGF0aWNDbGFzcycsIGR5bmFtaWNdXHJcbmZ1bmN0aW9uIHBhdGNoQ2xhc3MoZWwsIHZhbHVlLCBpc1NWRykge1xyXG4gICAgaWYgKHZhbHVlID09IG51bGwpIHtcclxuICAgICAgICB2YWx1ZSA9ICcnO1xyXG4gICAgfVxyXG4gICAgaWYgKGlzU1ZHKSB7XHJcbiAgICAgICAgZWwuc2V0QXR0cmlidXRlKCdjbGFzcycsIHZhbHVlKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIC8vIGRpcmVjdGx5IHNldHRpbmcgY2xhc3NOYW1lIHNob3VsZCBiZSBmYXN0ZXIgdGhhbiBzZXRBdHRyaWJ1dGUgaW4gdGhlb3J5XHJcbiAgICAgICAgLy8gaWYgdGhpcyBpcyBhbiBlbGVtZW50IGR1cmluZyBhIHRyYW5zaXRpb24sIHRha2UgdGhlIHRlbXBvcmFyeSB0cmFuc2l0aW9uXHJcbiAgICAgICAgLy8gY2xhc3NlcyBpbnRvIGFjY291bnQuXHJcbiAgICAgICAgY29uc3QgdHJhbnNpdGlvbkNsYXNzZXMgPSBlbC5fdnRjO1xyXG4gICAgICAgIGlmICh0cmFuc2l0aW9uQ2xhc3Nlcykge1xyXG4gICAgICAgICAgICB2YWx1ZSA9ICh2YWx1ZVxyXG4gICAgICAgICAgICAgICAgPyBbdmFsdWUsIC4uLnRyYW5zaXRpb25DbGFzc2VzXVxyXG4gICAgICAgICAgICAgICAgOiBbLi4udHJhbnNpdGlvbkNsYXNzZXNdKS5qb2luKCcgJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsLmNsYXNzTmFtZSA9IHZhbHVlO1xyXG4gICAgfVxyXG59XG5cbmZ1bmN0aW9uIHBhdGNoU3R5bGUoZWwsIHByZXYsIG5leHQpIHtcclxuICAgIGNvbnN0IHN0eWxlID0gZWwuc3R5bGU7XHJcbiAgICBpZiAoIW5leHQpIHtcclxuICAgICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoJ3N0eWxlJyk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChpc1N0cmluZyhuZXh0KSkge1xyXG4gICAgICAgIGlmIChwcmV2ICE9PSBuZXh0KSB7XHJcbiAgICAgICAgICAgIHN0eWxlLmNzc1RleHQgPSBuZXh0O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIG5leHQpIHtcclxuICAgICAgICAgICAgc2V0U3R5bGUoc3R5bGUsIGtleSwgbmV4dFtrZXldKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHByZXYgJiYgIWlzU3RyaW5nKHByZXYpKSB7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIHByZXYpIHtcclxuICAgICAgICAgICAgICAgIGlmIChuZXh0W2tleV0gPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNldFN0eWxlKHN0eWxlLCBrZXksICcnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5jb25zdCBpbXBvcnRhbnRSRSA9IC9cXHMqIWltcG9ydGFudCQvO1xyXG5mdW5jdGlvbiBzZXRTdHlsZShzdHlsZSwgbmFtZSwgdmFsKSB7XHJcbiAgICBpZiAoaXNBcnJheSh2YWwpKSB7XHJcbiAgICAgICAgdmFsLmZvckVhY2godiA9PiBzZXRTdHlsZShzdHlsZSwgbmFtZSwgdikpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgaWYgKG5hbWUuc3RhcnRzV2l0aCgnLS0nKSkge1xyXG4gICAgICAgICAgICAvLyBjdXN0b20gcHJvcGVydHkgZGVmaW5pdGlvblxyXG4gICAgICAgICAgICBzdHlsZS5zZXRQcm9wZXJ0eShuYW1lLCB2YWwpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3QgcHJlZml4ZWQgPSBhdXRvUHJlZml4KHN0eWxlLCBuYW1lKTtcclxuICAgICAgICAgICAgaWYgKGltcG9ydGFudFJFLnRlc3QodmFsKSkge1xyXG4gICAgICAgICAgICAgICAgLy8gIWltcG9ydGFudFxyXG4gICAgICAgICAgICAgICAgc3R5bGUuc2V0UHJvcGVydHkoaHlwaGVuYXRlKHByZWZpeGVkKSwgdmFsLnJlcGxhY2UoaW1wb3J0YW50UkUsICcnKSwgJ2ltcG9ydGFudCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgc3R5bGVbcHJlZml4ZWRdID0gdmFsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbmNvbnN0IHByZWZpeGVzID0gWydXZWJraXQnLCAnTW96JywgJ21zJ107XHJcbmNvbnN0IHByZWZpeENhY2hlID0ge307XHJcbmZ1bmN0aW9uIGF1dG9QcmVmaXgoc3R5bGUsIHJhd05hbWUpIHtcclxuICAgIGNvbnN0IGNhY2hlZCA9IHByZWZpeENhY2hlW3Jhd05hbWVdO1xyXG4gICAgaWYgKGNhY2hlZCkge1xyXG4gICAgICAgIHJldHVybiBjYWNoZWQ7XHJcbiAgICB9XHJcbiAgICBsZXQgbmFtZSA9IGNhbWVsaXplKHJhd05hbWUpO1xyXG4gICAgaWYgKG5hbWUgIT09ICdmaWx0ZXInICYmIG5hbWUgaW4gc3R5bGUpIHtcclxuICAgICAgICByZXR1cm4gKHByZWZpeENhY2hlW3Jhd05hbWVdID0gbmFtZSk7XHJcbiAgICB9XHJcbiAgICBuYW1lID0gY2FwaXRhbGl6ZShuYW1lKTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcHJlZml4ZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBjb25zdCBwcmVmaXhlZCA9IHByZWZpeGVzW2ldICsgbmFtZTtcclxuICAgICAgICBpZiAocHJlZml4ZWQgaW4gc3R5bGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChwcmVmaXhDYWNoZVtyYXdOYW1lXSA9IHByZWZpeGVkKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmF3TmFtZTtcclxufVxuXG5jb25zdCB4bGlua05TID0gJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsnO1xyXG5mdW5jdGlvbiBwYXRjaEF0dHIoZWwsIGtleSwgdmFsdWUsIGlzU1ZHKSB7XHJcbiAgICBpZiAoaXNTVkcgJiYga2V5LnN0YXJ0c1dpdGgoJ3hsaW5rOicpKSB7XHJcbiAgICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcclxuICAgICAgICAgICAgZWwucmVtb3ZlQXR0cmlidXRlTlMoeGxpbmtOUywga2V5LnNsaWNlKDYsIGtleS5sZW5ndGgpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGVsLnNldEF0dHJpYnV0ZU5TKHhsaW5rTlMsIGtleSwgdmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIC8vIG5vdGUgd2UgYXJlIG9ubHkgY2hlY2tpbmcgYm9vbGVhbiBhdHRyaWJ1dGVzIHRoYXQgZG9uJ3QgaGF2ZSBhXHJcbiAgICAgICAgLy8gY29ycmVzcG9uZGluZyBkb20gcHJvcCBvZiB0aGUgc2FtZSBuYW1lIGhlcmUuXHJcbiAgICAgICAgY29uc3QgaXNCb29sZWFuID0gaXNTcGVjaWFsQm9vbGVhbkF0dHIoa2V5KTtcclxuICAgICAgICBpZiAodmFsdWUgPT0gbnVsbCB8fCAoaXNCb29sZWFuICYmIHZhbHVlID09PSBmYWxzZSkpIHtcclxuICAgICAgICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKGtleSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoa2V5LCBpc0Jvb2xlYW4gPyAnJyA6IHZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cblxuLy8gX19VTlNBRkVfX1xyXG4vLyBmdW5jdGlvbnMuIFRoZSB1c2VyIGlzIHJlc3BvbnNpYmxlIGZvciB1c2luZyB0aGVtIHdpdGggb25seSB0cnVzdGVkIGNvbnRlbnQuXHJcbmZ1bmN0aW9uIHBhdGNoRE9NUHJvcChlbCwga2V5LCB2YWx1ZSwgXHJcbi8vIHRoZSBmb2xsb3dpbmcgYXJncyBhcmUgcGFzc2VkIG9ubHkgZHVlIHRvIHBvdGVudGlhbCBpbm5lckhUTUwvdGV4dENvbnRlbnRcclxuLy8gb3ZlcnJpZGluZyBleGlzdGluZyBWTm9kZXMsIGluIHdoaWNoIGNhc2UgdGhlIG9sZCB0cmVlIG11c3QgYmUgcHJvcGVybHlcclxuLy8gdW5tb3VudGVkLlxyXG5wcmV2Q2hpbGRyZW4sIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHVubW91bnRDaGlsZHJlbikge1xyXG4gICAgaWYgKGtleSA9PT0gJ2lubmVySFRNTCcgfHwga2V5ID09PSAndGV4dENvbnRlbnQnKSB7XHJcbiAgICAgICAgaWYgKHByZXZDaGlsZHJlbikge1xyXG4gICAgICAgICAgICB1bm1vdW50Q2hpbGRyZW4ocHJldkNoaWxkcmVuLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxba2V5XSA9IHZhbHVlID09IG51bGwgPyAnJyA6IHZhbHVlO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGlmIChrZXkgPT09ICd2YWx1ZScgJiYgZWwudGFnTmFtZSAhPT0gJ1BST0dSRVNTJykge1xyXG4gICAgICAgIC8vIHN0b3JlIHZhbHVlIGFzIF92YWx1ZSBhcyB3ZWxsIHNpbmNlXHJcbiAgICAgICAgLy8gbm9uLXN0cmluZyB2YWx1ZXMgd2lsbCBiZSBzdHJpbmdpZmllZC5cclxuICAgICAgICBlbC5fdmFsdWUgPSB2YWx1ZTtcclxuICAgICAgICBjb25zdCBuZXdWYWx1ZSA9IHZhbHVlID09IG51bGwgPyAnJyA6IHZhbHVlO1xyXG4gICAgICAgIGlmIChlbC52YWx1ZSAhPT0gbmV3VmFsdWUpIHtcclxuICAgICAgICAgICAgZWwudmFsdWUgPSBuZXdWYWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgaWYgKHZhbHVlID09PSAnJyB8fCB2YWx1ZSA9PSBudWxsKSB7XHJcbiAgICAgICAgY29uc3QgdHlwZSA9IHR5cGVvZiBlbFtrZXldO1xyXG4gICAgICAgIGlmICh2YWx1ZSA9PT0gJycgJiYgdHlwZSA9PT0gJ2Jvb2xlYW4nKSB7XHJcbiAgICAgICAgICAgIC8vIGUuZy4gPHNlbGVjdCBtdWx0aXBsZT4gY29tcGlsZXMgdG8geyBtdWx0aXBsZTogJycgfVxyXG4gICAgICAgICAgICBlbFtrZXldID0gdHJ1ZTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh2YWx1ZSA9PSBudWxsICYmIHR5cGUgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIC8vIGUuZy4gPGRpdiA6aWQ9XCJudWxsXCI+XHJcbiAgICAgICAgICAgIGVsW2tleV0gPSAnJztcclxuICAgICAgICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKGtleSk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodHlwZSA9PT0gJ251bWJlcicpIHtcclxuICAgICAgICAgICAgLy8gZS5nLiA8aW1nIDp3aWR0aD1cIm51bGxcIj5cclxuICAgICAgICAgICAgZWxba2V5XSA9IDA7XHJcbiAgICAgICAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gc29tZSBwcm9wZXJ0aWVzIHBlcmZvcm0gdmFsdWUgdmFsaWRhdGlvbiBhbmQgdGhyb3dcclxuICAgIHRyeSB7XHJcbiAgICAgICAgZWxba2V5XSA9IHZhbHVlO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgIHdhcm4oYEZhaWxlZCBzZXR0aW5nIHByb3AgXCIke2tleX1cIiBvbiA8JHtlbC50YWdOYW1lLnRvTG93ZXJDYXNlKCl9PjogYCArXHJcbiAgICAgICAgICAgICAgICBgdmFsdWUgJHt2YWx1ZX0gaXMgaW52YWxpZC5gLCBlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cblxuLy8gQXN5bmMgZWRnZSBjYXNlIGZpeCByZXF1aXJlcyBzdG9yaW5nIGFuIGV2ZW50IGxpc3RlbmVyJ3MgYXR0YWNoIHRpbWVzdGFtcC5cclxubGV0IF9nZXROb3cgPSBEYXRlLm5vdztcclxuLy8gRGV0ZXJtaW5lIHdoYXQgZXZlbnQgdGltZXN0YW1wIHRoZSBicm93c2VyIGlzIHVzaW5nLiBBbm5veWluZ2x5LCB0aGVcclxuLy8gdGltZXN0YW1wIGNhbiBlaXRoZXIgYmUgaGktcmVzIChyZWxhdGl2ZSB0byBwYWdlIGxvYWQpIG9yIGxvdy1yZXNcclxuLy8gKHJlbGF0aXZlIHRvIFVOSVggZXBvY2gpLCBzbyBpbiBvcmRlciB0byBjb21wYXJlIHRpbWUgd2UgaGF2ZSB0byB1c2UgdGhlXHJcbi8vIHNhbWUgdGltZXN0YW1wIHR5cGUgd2hlbiBzYXZpbmcgdGhlIGZsdXNoIHRpbWVzdGFtcC5cclxuaWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiZcclxuICAgIF9nZXROb3coKSA+IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdFdmVudCcpLnRpbWVTdGFtcCkge1xyXG4gICAgLy8gaWYgdGhlIGxvdy1yZXMgdGltZXN0YW1wIHdoaWNoIGlzIGJpZ2dlciB0aGFuIHRoZSBldmVudCB0aW1lc3RhbXBcclxuICAgIC8vICh3aGljaCBpcyBldmFsdWF0ZWQgQUZURVIpIGl0IG1lYW5zIHRoZSBldmVudCBpcyB1c2luZyBhIGhpLXJlcyB0aW1lc3RhbXAsXHJcbiAgICAvLyBhbmQgd2UgbmVlZCB0byB1c2UgdGhlIGhpLXJlcyB2ZXJzaW9uIGZvciBldmVudCBsaXN0ZW5lcnMgYXMgd2VsbC5cclxuICAgIF9nZXROb3cgPSAoKSA9PiBwZXJmb3JtYW5jZS5ub3coKTtcclxufVxyXG4vLyBUbyBhdm9pZCB0aGUgb3ZlcmhlYWQgb2YgcmVwZWF0ZWRseSBjYWxsaW5nIHBlcmZvcm1hbmNlLm5vdygpLCB3ZSBjYWNoZVxyXG4vLyBhbmQgdXNlIHRoZSBzYW1lIHRpbWVzdGFtcCBmb3IgYWxsIGV2ZW50IGxpc3RlbmVycyBhdHRhY2hlZCBpbiB0aGUgc2FtZSB0aWNrLlxyXG5sZXQgY2FjaGVkTm93ID0gMDtcclxuY29uc3QgcCA9IFByb21pc2UucmVzb2x2ZSgpO1xyXG5jb25zdCByZXNldCA9ICgpID0+IHtcclxuICAgIGNhY2hlZE5vdyA9IDA7XHJcbn07XHJcbmNvbnN0IGdldE5vdyA9ICgpID0+IGNhY2hlZE5vdyB8fCAocC50aGVuKHJlc2V0KSwgKGNhY2hlZE5vdyA9IF9nZXROb3coKSkpO1xyXG5mdW5jdGlvbiBhZGRFdmVudExpc3RlbmVyKGVsLCBldmVudCwgaGFuZGxlciwgb3B0aW9ucykge1xyXG4gICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgaGFuZGxlciwgb3B0aW9ucyk7XHJcbn1cclxuZnVuY3Rpb24gcmVtb3ZlRXZlbnRMaXN0ZW5lcihlbCwgZXZlbnQsIGhhbmRsZXIsIG9wdGlvbnMpIHtcclxuICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIGhhbmRsZXIsIG9wdGlvbnMpO1xyXG59XHJcbmZ1bmN0aW9uIHBhdGNoRXZlbnQoZWwsIHJhd05hbWUsIHByZXZWYWx1ZSwgbmV4dFZhbHVlLCBpbnN0YW5jZSA9IG51bGwpIHtcclxuICAgIC8vIHZlaSA9IHZ1ZSBldmVudCBpbnZva2Vyc1xyXG4gICAgY29uc3QgaW52b2tlcnMgPSBlbC5fdmVpIHx8IChlbC5fdmVpID0ge30pO1xyXG4gICAgY29uc3QgZXhpc3RpbmdJbnZva2VyID0gaW52b2tlcnNbcmF3TmFtZV07XHJcbiAgICBpZiAobmV4dFZhbHVlICYmIGV4aXN0aW5nSW52b2tlcikge1xyXG4gICAgICAgIC8vIHBhdGNoXHJcbiAgICAgICAgZXhpc3RpbmdJbnZva2VyLnZhbHVlID0gbmV4dFZhbHVlO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgY29uc3QgW25hbWUsIG9wdGlvbnNdID0gcGFyc2VOYW1lKHJhd05hbWUpO1xyXG4gICAgICAgIGlmIChuZXh0VmFsdWUpIHtcclxuICAgICAgICAgICAgLy8gYWRkXHJcbiAgICAgICAgICAgIGNvbnN0IGludm9rZXIgPSAoaW52b2tlcnNbcmF3TmFtZV0gPSBjcmVhdGVJbnZva2VyKG5leHRWYWx1ZSwgaW5zdGFuY2UpKTtcclxuICAgICAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcihlbCwgbmFtZSwgaW52b2tlciwgb3B0aW9ucyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGV4aXN0aW5nSW52b2tlcikge1xyXG4gICAgICAgICAgICAvLyByZW1vdmVcclxuICAgICAgICAgICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcihlbCwgbmFtZSwgZXhpc3RpbmdJbnZva2VyLCBvcHRpb25zKTtcclxuICAgICAgICAgICAgaW52b2tlcnNbcmF3TmFtZV0gPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbmNvbnN0IG9wdGlvbnNNb2RpZmllclJFID0gLyg/Ok9uY2V8UGFzc2l2ZXxDYXB0dXJlKSQvO1xyXG5mdW5jdGlvbiBwYXJzZU5hbWUobmFtZSkge1xyXG4gICAgbGV0IG9wdGlvbnM7XHJcbiAgICBpZiAob3B0aW9uc01vZGlmaWVyUkUudGVzdChuYW1lKSkge1xyXG4gICAgICAgIG9wdGlvbnMgPSB7fTtcclxuICAgICAgICBsZXQgbTtcclxuICAgICAgICB3aGlsZSAoKG0gPSBuYW1lLm1hdGNoKG9wdGlvbnNNb2RpZmllclJFKSkpIHtcclxuICAgICAgICAgICAgbmFtZSA9IG5hbWUuc2xpY2UoMCwgbmFtZS5sZW5ndGggLSBtWzBdLmxlbmd0aCk7XHJcbiAgICAgICAgICAgIG9wdGlvbnNbbVswXS50b0xvd2VyQ2FzZSgpXSA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIFtuYW1lLnNsaWNlKDIpLnRvTG93ZXJDYXNlKCksIG9wdGlvbnNdO1xyXG59XHJcbmZ1bmN0aW9uIGNyZWF0ZUludm9rZXIoaW5pdGlhbFZhbHVlLCBpbnN0YW5jZSkge1xyXG4gICAgY29uc3QgaW52b2tlciA9IChlKSA9PiB7XHJcbiAgICAgICAgLy8gYXN5bmMgZWRnZSBjYXNlICM2NTY2OiBpbm5lciBjbGljayBldmVudCB0cmlnZ2VycyBwYXRjaCwgZXZlbnQgaGFuZGxlclxyXG4gICAgICAgIC8vIGF0dGFjaGVkIHRvIG91dGVyIGVsZW1lbnQgZHVyaW5nIHBhdGNoLCBhbmQgdHJpZ2dlcmVkIGFnYWluLiBUaGlzXHJcbiAgICAgICAgLy8gaGFwcGVucyBiZWNhdXNlIGJyb3dzZXJzIGZpcmUgbWljcm90YXNrIHRpY2tzIGJldHdlZW4gZXZlbnQgcHJvcGFnYXRpb24uXHJcbiAgICAgICAgLy8gdGhlIHNvbHV0aW9uIGlzIHNpbXBsZTogd2Ugc2F2ZSB0aGUgdGltZXN0YW1wIHdoZW4gYSBoYW5kbGVyIGlzIGF0dGFjaGVkLFxyXG4gICAgICAgIC8vIGFuZCB0aGUgaGFuZGxlciB3b3VsZCBvbmx5IGZpcmUgaWYgdGhlIGV2ZW50IHBhc3NlZCB0byBpdCB3YXMgZmlyZWRcclxuICAgICAgICAvLyBBRlRFUiBpdCB3YXMgYXR0YWNoZWQuXHJcbiAgICAgICAgY29uc3QgdGltZVN0YW1wID0gZS50aW1lU3RhbXAgfHwgX2dldE5vdygpO1xyXG4gICAgICAgIGlmICh0aW1lU3RhbXAgPj0gaW52b2tlci5hdHRhY2hlZCAtIDEpIHtcclxuICAgICAgICAgICAgY2FsbFdpdGhBc3luY0Vycm9ySGFuZGxpbmcocGF0Y2hTdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oZSwgaW52b2tlci52YWx1ZSksIGluc3RhbmNlLCA1IC8qIE5BVElWRV9FVkVOVF9IQU5ETEVSICovLCBbZV0pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBpbnZva2VyLnZhbHVlID0gaW5pdGlhbFZhbHVlO1xyXG4gICAgaW52b2tlci5hdHRhY2hlZCA9IGdldE5vdygpO1xyXG4gICAgcmV0dXJuIGludm9rZXI7XHJcbn1cclxuZnVuY3Rpb24gcGF0Y2hTdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oZSwgdmFsdWUpIHtcclxuICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xyXG4gICAgICAgIGNvbnN0IG9yaWdpbmFsU3RvcCA9IGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uO1xyXG4gICAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uID0gKCkgPT4ge1xyXG4gICAgICAgICAgICBvcmlnaW5hbFN0b3AuY2FsbChlKTtcclxuICAgICAgICAgICAgZS5fc3RvcHBlZCA9IHRydWU7XHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gdmFsdWUubWFwKGZuID0+IChlKSA9PiAhZS5fc3RvcHBlZCAmJiBmbihlKSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICB9XHJcbn1cblxuY29uc3QgbmF0aXZlT25SRSA9IC9eb25bYS16XS87XHJcbmNvbnN0IGZvcmNlUGF0Y2hQcm9wID0gKF8sIGtleSkgPT4ga2V5ID09PSAndmFsdWUnO1xyXG5jb25zdCBwYXRjaFByb3AgPSAoZWwsIGtleSwgcHJldlZhbHVlLCBuZXh0VmFsdWUsIGlzU1ZHID0gZmFsc2UsIHByZXZDaGlsZHJlbiwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgdW5tb3VudENoaWxkcmVuKSA9PiB7XHJcbiAgICBzd2l0Y2ggKGtleSkge1xyXG4gICAgICAgIC8vIHNwZWNpYWxcclxuICAgICAgICBjYXNlICdjbGFzcyc6XHJcbiAgICAgICAgICAgIHBhdGNoQ2xhc3MoZWwsIG5leHRWYWx1ZSwgaXNTVkcpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlICdzdHlsZSc6XHJcbiAgICAgICAgICAgIHBhdGNoU3R5bGUoZWwsIHByZXZWYWx1ZSwgbmV4dFZhbHVlKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgaWYgKGlzT24oa2V5KSkge1xyXG4gICAgICAgICAgICAgICAgLy8gaWdub3JlIHYtbW9kZWwgbGlzdGVuZXJzXHJcbiAgICAgICAgICAgICAgICBpZiAoIWlzTW9kZWxMaXN0ZW5lcihrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGF0Y2hFdmVudChlbCwga2V5LCBwcmV2VmFsdWUsIG5leHRWYWx1ZSwgcGFyZW50Q29tcG9uZW50KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChzaG91bGRTZXRBc1Byb3AoZWwsIGtleSwgbmV4dFZhbHVlLCBpc1NWRykpIHtcclxuICAgICAgICAgICAgICAgIHBhdGNoRE9NUHJvcChlbCwga2V5LCBuZXh0VmFsdWUsIHByZXZDaGlsZHJlbiwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgdW5tb3VudENoaWxkcmVuKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIHNwZWNpYWwgY2FzZSBmb3IgPGlucHV0IHYtbW9kZWwgdHlwZT1cImNoZWNrYm94XCI+IHdpdGhcclxuICAgICAgICAgICAgICAgIC8vIDp0cnVlLXZhbHVlICYgOmZhbHNlLXZhbHVlXHJcbiAgICAgICAgICAgICAgICAvLyBzdG9yZSB2YWx1ZSBhcyBkb20gcHJvcGVydGllcyBzaW5jZSBub24tc3RyaW5nIHZhbHVlcyB3aWxsIGJlXHJcbiAgICAgICAgICAgICAgICAvLyBzdHJpbmdpZmllZC5cclxuICAgICAgICAgICAgICAgIGlmIChrZXkgPT09ICd0cnVlLXZhbHVlJykge1xyXG4gICAgICAgICAgICAgICAgICAgIGVsLl90cnVlVmFsdWUgPSBuZXh0VmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChrZXkgPT09ICdmYWxzZS12YWx1ZScpIHtcclxuICAgICAgICAgICAgICAgICAgICBlbC5fZmFsc2VWYWx1ZSA9IG5leHRWYWx1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHBhdGNoQXR0cihlbCwga2V5LCBuZXh0VmFsdWUsIGlzU1ZHKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBicmVhaztcclxuICAgIH1cclxufTtcclxuZnVuY3Rpb24gc2hvdWxkU2V0QXNQcm9wKGVsLCBrZXksIHZhbHVlLCBpc1NWRykge1xyXG4gICAgaWYgKGlzU1ZHKSB7XHJcbiAgICAgICAgLy8gbW9zdCBrZXlzIG11c3QgYmUgc2V0IGFzIGF0dHJpYnV0ZSBvbiBzdmcgZWxlbWVudHMgdG8gd29ya1xyXG4gICAgICAgIC8vIC4uLmV4Y2VwdCBpbm5lckhUTUxcclxuICAgICAgICBpZiAoa2V5ID09PSAnaW5uZXJIVE1MJykge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gb3IgbmF0aXZlIG9uY2xpY2sgd2l0aCBmdW5jdGlvbiB2YWx1ZXNcclxuICAgICAgICBpZiAoa2V5IGluIGVsICYmIG5hdGl2ZU9uUkUudGVzdChrZXkpICYmIGlzRnVuY3Rpb24odmFsdWUpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICAvLyBzcGVsbGNoZWNrIGFuZCBkcmFnZ2FibGUgYXJlIG51bWVyYXRlZCBhdHRycywgaG93ZXZlciB0aGVpclxyXG4gICAgLy8gY29ycmVzcG9uZGluZyBET00gcHJvcGVydGllcyBhcmUgYWN0dWFsbHkgYm9vbGVhbnMgLSB0aGlzIGxlYWRzIHRvXHJcbiAgICAvLyBzZXR0aW5nIGl0IHdpdGggYSBzdHJpbmcgXCJmYWxzZVwiIHZhbHVlIGxlYWRpbmcgaXQgdG8gYmUgY29lcmNlZCB0b1xyXG4gICAgLy8gYHRydWVgLCBzbyB3ZSBuZWVkIHRvIGFsd2F5cyB0cmVhdCB0aGVtIGFzIGF0dHJpYnV0ZXMuXHJcbiAgICAvLyBOb3RlIHRoYXQgYGNvbnRlbnRFZGl0YWJsZWAgZG9lc24ndCBoYXZlIHRoaXMgcHJvYmxlbTogaXRzIERPTVxyXG4gICAgLy8gcHJvcGVydHkgaXMgYWxzbyBlbnVtZXJhdGVkIHN0cmluZyB2YWx1ZXMuXHJcbiAgICBpZiAoa2V5ID09PSAnc3BlbGxjaGVjaycgfHwga2V5ID09PSAnZHJhZ2dhYmxlJykge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIC8vICMxNzg3IGZvcm0gYXMgYW4gYXR0cmlidXRlIG11c3QgYmUgYSBzdHJpbmcsIHdoaWxlIGl0IGFjY2VwdHMgYW4gRWxlbWVudCBhc1xyXG4gICAgLy8gYSBwcm9wXHJcbiAgICBpZiAoa2V5ID09PSAnZm9ybScgJiYgdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIC8vICMxNTI2IDxpbnB1dCBsaXN0PiBtdXN0IGJlIHNldCBhcyBhdHRyaWJ1dGVcclxuICAgIGlmIChrZXkgPT09ICdsaXN0JyAmJiBlbC50YWdOYW1lID09PSAnSU5QVVQnKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgLy8gbmF0aXZlIG9uY2xpY2sgd2l0aCBzdHJpbmcgdmFsdWUsIG11c3QgYmUgc2V0IGFzIGF0dHJpYnV0ZVxyXG4gICAgaWYgKG5hdGl2ZU9uUkUudGVzdChrZXkpICYmIGlzU3RyaW5nKHZhbHVlKSkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIHJldHVybiBrZXkgaW4gZWw7XHJcbn1cblxuZnVuY3Rpb24gdXNlQ3NzTW9kdWxlKG5hbWUgPSAnJHN0eWxlJykge1xyXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cclxuICAgIHtcclxuICAgICAgICBjb25zdCBpbnN0YW5jZSA9IGdldEN1cnJlbnRJbnN0YW5jZSgpO1xyXG4gICAgICAgIGlmICghaW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIHdhcm4oYHVzZUNzc01vZHVsZSBtdXN0IGJlIGNhbGxlZCBpbnNpZGUgc2V0dXAoKWApO1xyXG4gICAgICAgICAgICByZXR1cm4gRU1QVFlfT0JKO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBtb2R1bGVzID0gaW5zdGFuY2UudHlwZS5fX2Nzc01vZHVsZXM7XHJcbiAgICAgICAgaWYgKCFtb2R1bGVzKSB7XHJcbiAgICAgICAgICAgIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiB3YXJuKGBDdXJyZW50IGluc3RhbmNlIGRvZXMgbm90IGhhdmUgQ1NTIG1vZHVsZXMgaW5qZWN0ZWQuYCk7XHJcbiAgICAgICAgICAgIHJldHVybiBFTVBUWV9PQko7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IG1vZCA9IG1vZHVsZXNbbmFtZV07XHJcbiAgICAgICAgaWYgKCFtb2QpIHtcclxuICAgICAgICAgICAgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmXHJcbiAgICAgICAgICAgICAgICB3YXJuKGBDdXJyZW50IGluc3RhbmNlIGRvZXMgbm90IGhhdmUgQ1NTIG1vZHVsZSBuYW1lZCBcIiR7bmFtZX1cIi5gKTtcclxuICAgICAgICAgICAgcmV0dXJuIEVNUFRZX09CSjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG1vZDtcclxuICAgIH1cclxufVxuXG4vKipcclxuICogUnVudGltZSBoZWxwZXIgZm9yIFNGQydzIENTUyB2YXJpYWJsZSBpbmplY3Rpb24gZmVhdHVyZS5cclxuICogQHByaXZhdGVcclxuICovXHJcbmZ1bmN0aW9uIHVzZUNzc1ZhcnMoZ2V0dGVyKSB7XHJcbiAgICBjb25zdCBpbnN0YW5jZSA9IGdldEN1cnJlbnRJbnN0YW5jZSgpO1xyXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cclxuICAgIGlmICghaW5zdGFuY2UpIHtcclxuICAgICAgICAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiZcclxuICAgICAgICAgICAgd2FybihgdXNlQ3NzVmFycyBpcyBjYWxsZWQgd2l0aG91dCBjdXJyZW50IGFjdGl2ZSBjb21wb25lbnQgaW5zdGFuY2UuYCk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgY29uc3Qgc2V0VmFycyA9ICgpID0+IHNldFZhcnNPblZOb2RlKGluc3RhbmNlLnN1YlRyZWUsIGdldHRlcihpbnN0YW5jZS5wcm94eSkpO1xyXG4gICAgb25Nb3VudGVkKCgpID0+IHdhdGNoRWZmZWN0KHNldFZhcnMsIHsgZmx1c2g6ICdwb3N0JyB9KSk7XHJcbiAgICBvblVwZGF0ZWQoc2V0VmFycyk7XHJcbn1cclxuZnVuY3Rpb24gc2V0VmFyc09uVk5vZGUodm5vZGUsIHZhcnMpIHtcclxuICAgIGlmICggdm5vZGUuc2hhcGVGbGFnICYgMTI4IC8qIFNVU1BFTlNFICovKSB7XHJcbiAgICAgICAgY29uc3Qgc3VzcGVuc2UgPSB2bm9kZS5zdXNwZW5zZTtcclxuICAgICAgICB2bm9kZSA9IHN1c3BlbnNlLmFjdGl2ZUJyYW5jaDtcclxuICAgICAgICBpZiAoc3VzcGVuc2UucGVuZGluZ0JyYW5jaCAmJiAhc3VzcGVuc2UuaXNIeWRyYXRpbmcpIHtcclxuICAgICAgICAgICAgc3VzcGVuc2UuZWZmZWN0cy5wdXNoKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIHNldFZhcnNPblZOb2RlKHN1c3BlbnNlLmFjdGl2ZUJyYW5jaCwgdmFycyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIGRyaWxsIGRvd24gSE9DcyB1bnRpbCBpdCdzIGEgbm9uLWNvbXBvbmVudCB2bm9kZVxyXG4gICAgd2hpbGUgKHZub2RlLmNvbXBvbmVudCkge1xyXG4gICAgICAgIHZub2RlID0gdm5vZGUuY29tcG9uZW50LnN1YlRyZWU7XHJcbiAgICB9XHJcbiAgICBpZiAodm5vZGUuc2hhcGVGbGFnICYgMSAvKiBFTEVNRU5UICovICYmIHZub2RlLmVsKSB7XHJcbiAgICAgICAgY29uc3Qgc3R5bGUgPSB2bm9kZS5lbC5zdHlsZTtcclxuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiB2YXJzKSB7XHJcbiAgICAgICAgICAgIHN0eWxlLnNldFByb3BlcnR5KGAtLSR7a2V5fWAsIHZhcnNba2V5XSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAodm5vZGUudHlwZSA9PT0gRnJhZ21lbnQpIHtcclxuICAgICAgICB2bm9kZS5jaGlsZHJlbi5mb3JFYWNoKGMgPT4gc2V0VmFyc09uVk5vZGUoYywgdmFycykpO1xyXG4gICAgfVxyXG59XG5cbmNvbnN0IFRSQU5TSVRJT04gPSAndHJhbnNpdGlvbic7XHJcbmNvbnN0IEFOSU1BVElPTiA9ICdhbmltYXRpb24nO1xyXG4vLyBET00gVHJhbnNpdGlvbiBpcyBhIGhpZ2hlci1vcmRlci1jb21wb25lbnQgYmFzZWQgb24gdGhlIHBsYXRmb3JtLWFnbm9zdGljXHJcbi8vIGJhc2UgVHJhbnNpdGlvbiBjb21wb25lbnQsIHdpdGggRE9NLXNwZWNpZmljIGxvZ2ljLlxyXG5jb25zdCBUcmFuc2l0aW9uID0gKHByb3BzLCB7IHNsb3RzIH0pID0+IGgoQmFzZVRyYW5zaXRpb24sIHJlc29sdmVUcmFuc2l0aW9uUHJvcHMocHJvcHMpLCBzbG90cyk7XHJcblRyYW5zaXRpb24uZGlzcGxheU5hbWUgPSAnVHJhbnNpdGlvbic7XHJcbmNvbnN0IERPTVRyYW5zaXRpb25Qcm9wc1ZhbGlkYXRvcnMgPSB7XHJcbiAgICBuYW1lOiBTdHJpbmcsXHJcbiAgICB0eXBlOiBTdHJpbmcsXHJcbiAgICBjc3M6IHtcclxuICAgICAgICB0eXBlOiBCb29sZWFuLFxyXG4gICAgICAgIGRlZmF1bHQ6IHRydWVcclxuICAgIH0sXHJcbiAgICBkdXJhdGlvbjogW1N0cmluZywgTnVtYmVyLCBPYmplY3RdLFxyXG4gICAgZW50ZXJGcm9tQ2xhc3M6IFN0cmluZyxcclxuICAgIGVudGVyQWN0aXZlQ2xhc3M6IFN0cmluZyxcclxuICAgIGVudGVyVG9DbGFzczogU3RyaW5nLFxyXG4gICAgYXBwZWFyRnJvbUNsYXNzOiBTdHJpbmcsXHJcbiAgICBhcHBlYXJBY3RpdmVDbGFzczogU3RyaW5nLFxyXG4gICAgYXBwZWFyVG9DbGFzczogU3RyaW5nLFxyXG4gICAgbGVhdmVGcm9tQ2xhc3M6IFN0cmluZyxcclxuICAgIGxlYXZlQWN0aXZlQ2xhc3M6IFN0cmluZyxcclxuICAgIGxlYXZlVG9DbGFzczogU3RyaW5nXHJcbn07XHJcbmNvbnN0IFRyYW5zaXRpb25Qcm9wc1ZhbGlkYXRvcnMgPSAoVHJhbnNpdGlvbi5wcm9wcyA9IC8qI19fUFVSRV9fKi8gZXh0ZW5kKHt9LCBCYXNlVHJhbnNpdGlvbi5wcm9wcywgRE9NVHJhbnNpdGlvblByb3BzVmFsaWRhdG9ycykpO1xyXG5mdW5jdGlvbiByZXNvbHZlVHJhbnNpdGlvblByb3BzKHJhd1Byb3BzKSB7XHJcbiAgICBsZXQgeyBuYW1lID0gJ3YnLCB0eXBlLCBjc3MgPSB0cnVlLCBkdXJhdGlvbiwgZW50ZXJGcm9tQ2xhc3MgPSBgJHtuYW1lfS1lbnRlci1mcm9tYCwgZW50ZXJBY3RpdmVDbGFzcyA9IGAke25hbWV9LWVudGVyLWFjdGl2ZWAsIGVudGVyVG9DbGFzcyA9IGAke25hbWV9LWVudGVyLXRvYCwgYXBwZWFyRnJvbUNsYXNzID0gZW50ZXJGcm9tQ2xhc3MsIGFwcGVhckFjdGl2ZUNsYXNzID0gZW50ZXJBY3RpdmVDbGFzcywgYXBwZWFyVG9DbGFzcyA9IGVudGVyVG9DbGFzcywgbGVhdmVGcm9tQ2xhc3MgPSBgJHtuYW1lfS1sZWF2ZS1mcm9tYCwgbGVhdmVBY3RpdmVDbGFzcyA9IGAke25hbWV9LWxlYXZlLWFjdGl2ZWAsIGxlYXZlVG9DbGFzcyA9IGAke25hbWV9LWxlYXZlLXRvYCB9ID0gcmF3UHJvcHM7XHJcbiAgICBjb25zdCBiYXNlUHJvcHMgPSB7fTtcclxuICAgIGZvciAoY29uc3Qga2V5IGluIHJhd1Byb3BzKSB7XHJcbiAgICAgICAgaWYgKCEoa2V5IGluIERPTVRyYW5zaXRpb25Qcm9wc1ZhbGlkYXRvcnMpKSB7XHJcbiAgICAgICAgICAgIGJhc2VQcm9wc1trZXldID0gcmF3UHJvcHNba2V5XTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAoIWNzcykge1xyXG4gICAgICAgIHJldHVybiBiYXNlUHJvcHM7XHJcbiAgICB9XHJcbiAgICBjb25zdCBkdXJhdGlvbnMgPSBub3JtYWxpemVEdXJhdGlvbihkdXJhdGlvbik7XHJcbiAgICBjb25zdCBlbnRlckR1cmF0aW9uID0gZHVyYXRpb25zICYmIGR1cmF0aW9uc1swXTtcclxuICAgIGNvbnN0IGxlYXZlRHVyYXRpb24gPSBkdXJhdGlvbnMgJiYgZHVyYXRpb25zWzFdO1xyXG4gICAgY29uc3QgeyBvbkJlZm9yZUVudGVyLCBvbkVudGVyLCBvbkVudGVyQ2FuY2VsbGVkLCBvbkxlYXZlLCBvbkxlYXZlQ2FuY2VsbGVkLCBvbkJlZm9yZUFwcGVhciA9IG9uQmVmb3JlRW50ZXIsIG9uQXBwZWFyID0gb25FbnRlciwgb25BcHBlYXJDYW5jZWxsZWQgPSBvbkVudGVyQ2FuY2VsbGVkIH0gPSBiYXNlUHJvcHM7XHJcbiAgICBjb25zdCBmaW5pc2hFbnRlciA9IChlbCwgaXNBcHBlYXIsIGRvbmUpID0+IHtcclxuICAgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGlzQXBwZWFyID8gYXBwZWFyVG9DbGFzcyA6IGVudGVyVG9DbGFzcyk7XHJcbiAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBpc0FwcGVhciA/IGFwcGVhckFjdGl2ZUNsYXNzIDogZW50ZXJBY3RpdmVDbGFzcyk7XHJcbiAgICAgICAgZG9uZSAmJiBkb25lKCk7XHJcbiAgICB9O1xyXG4gICAgY29uc3QgZmluaXNoTGVhdmUgPSAoZWwsIGRvbmUpID0+IHtcclxuICAgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlVG9DbGFzcyk7XHJcbiAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUFjdGl2ZUNsYXNzKTtcclxuICAgICAgICBkb25lICYmIGRvbmUoKTtcclxuICAgIH07XHJcbiAgICBjb25zdCBtYWtlRW50ZXJIb29rID0gKGlzQXBwZWFyKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIChlbCwgZG9uZSkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBob29rID0gaXNBcHBlYXIgPyBvbkFwcGVhciA6IG9uRW50ZXI7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlc29sdmUgPSAoKSA9PiBmaW5pc2hFbnRlcihlbCwgaXNBcHBlYXIsIGRvbmUpO1xyXG4gICAgICAgICAgICBob29rICYmIGhvb2soZWwsIHJlc29sdmUpO1xyXG4gICAgICAgICAgICBuZXh0RnJhbWUoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBpc0FwcGVhciA/IGFwcGVhckZyb21DbGFzcyA6IGVudGVyRnJvbUNsYXNzKTtcclxuICAgICAgICAgICAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgaXNBcHBlYXIgPyBhcHBlYXJUb0NsYXNzIDogZW50ZXJUb0NsYXNzKTtcclxuICAgICAgICAgICAgICAgIGlmICghKGhvb2sgJiYgaG9vay5sZW5ndGggPiAxKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHdoZW5UcmFuc2l0aW9uRW5kcyhlbCwgdHlwZSwgZW50ZXJEdXJhdGlvbiwgcmVzb2x2ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIGV4dGVuZChiYXNlUHJvcHMsIHtcclxuICAgICAgICBvbkJlZm9yZUVudGVyKGVsKSB7XHJcbiAgICAgICAgICAgIG9uQmVmb3JlRW50ZXIgJiYgb25CZWZvcmVFbnRlcihlbCk7XHJcbiAgICAgICAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgZW50ZXJBY3RpdmVDbGFzcyk7XHJcbiAgICAgICAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgZW50ZXJGcm9tQ2xhc3MpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb25CZWZvcmVBcHBlYXIoZWwpIHtcclxuICAgICAgICAgICAgb25CZWZvcmVBcHBlYXIgJiYgb25CZWZvcmVBcHBlYXIoZWwpO1xyXG4gICAgICAgICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGFwcGVhckFjdGl2ZUNsYXNzKTtcclxuICAgICAgICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBhcHBlYXJGcm9tQ2xhc3MpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb25FbnRlcjogbWFrZUVudGVySG9vayhmYWxzZSksXHJcbiAgICAgICAgb25BcHBlYXI6IG1ha2VFbnRlckhvb2sodHJ1ZSksXHJcbiAgICAgICAgb25MZWF2ZShlbCwgZG9uZSkge1xyXG4gICAgICAgICAgICBjb25zdCByZXNvbHZlID0gKCkgPT4gZmluaXNoTGVhdmUoZWwsIGRvbmUpO1xyXG4gICAgICAgICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlQWN0aXZlQ2xhc3MpO1xyXG4gICAgICAgICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlRnJvbUNsYXNzKTtcclxuICAgICAgICAgICAgLy8gcmVmICMyNTMxLCAjMjU5M1xyXG4gICAgICAgICAgICAvLyBkaXNhYmxpbmcgdGhlIHRyYW5zaXRpb24gYmVmb3JlIG5leHRGcmFtZSBlbnN1cmVzIHN0eWxlcyBmcm9tXHJcbiAgICAgICAgICAgIC8vICotbGVhdmUtZnJvbSBhbmQgKi1lbnRlci1mcm9tIGNsYXNzZXMgYXJlIGFwcGxpZWQgaW5zdGFudGx5IGJlZm9yZVxyXG4gICAgICAgICAgICAvLyB0aGUgdHJhbnNpdGlvbiBzdGFydHMuIFRoaXMgaXMgYXBwbGllZCBmb3IgZW50ZXIgdHJhbnNpdGlvbiBhcyB3ZWxsXHJcbiAgICAgICAgICAgIC8vIHNvIHRoYXQgaXQgYWNjb3VudHMgZm9yIGB2aXNpYmlsaXR5OiBoaWRkZW5gIGNhc2VzLlxyXG4gICAgICAgICAgICBjb25zdCBjYWNoZWRUcmFuc2l0aW9uID0gZWwuc3R5bGUudHJhbnNpdGlvblByb3BlcnR5O1xyXG4gICAgICAgICAgICBlbC5zdHlsZS50cmFuc2l0aW9uUHJvcGVydHkgPSAnbm9uZSc7XHJcbiAgICAgICAgICAgIG5leHRGcmFtZSgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBlbC5zdHlsZS50cmFuc2l0aW9uUHJvcGVydHkgPSBjYWNoZWRUcmFuc2l0aW9uO1xyXG4gICAgICAgICAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUZyb21DbGFzcyk7XHJcbiAgICAgICAgICAgICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlVG9DbGFzcyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIShvbkxlYXZlICYmIG9uTGVhdmUubGVuZ3RoID4gMSkpIHtcclxuICAgICAgICAgICAgICAgICAgICB3aGVuVHJhbnNpdGlvbkVuZHMoZWwsIHR5cGUsIGxlYXZlRHVyYXRpb24sIHJlc29sdmUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgb25MZWF2ZSAmJiBvbkxlYXZlKGVsLCByZXNvbHZlKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIG9uRW50ZXJDYW5jZWxsZWQoZWwpIHtcclxuICAgICAgICAgICAgZmluaXNoRW50ZXIoZWwsIGZhbHNlKTtcclxuICAgICAgICAgICAgb25FbnRlckNhbmNlbGxlZCAmJiBvbkVudGVyQ2FuY2VsbGVkKGVsKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIG9uQXBwZWFyQ2FuY2VsbGVkKGVsKSB7XHJcbiAgICAgICAgICAgIGZpbmlzaEVudGVyKGVsLCB0cnVlKTtcclxuICAgICAgICAgICAgb25BcHBlYXJDYW5jZWxsZWQgJiYgb25BcHBlYXJDYW5jZWxsZWQoZWwpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb25MZWF2ZUNhbmNlbGxlZChlbCkge1xyXG4gICAgICAgICAgICBmaW5pc2hMZWF2ZShlbCk7XHJcbiAgICAgICAgICAgIG9uTGVhdmVDYW5jZWxsZWQgJiYgb25MZWF2ZUNhbmNlbGxlZChlbCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbn1cclxuZnVuY3Rpb24gbm9ybWFsaXplRHVyYXRpb24oZHVyYXRpb24pIHtcclxuICAgIGlmIChkdXJhdGlvbiA9PSBudWxsKSB7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChpc09iamVjdChkdXJhdGlvbikpIHtcclxuICAgICAgICByZXR1cm4gW051bWJlck9mKGR1cmF0aW9uLmVudGVyKSwgTnVtYmVyT2YoZHVyYXRpb24ubGVhdmUpXTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGNvbnN0IG4gPSBOdW1iZXJPZihkdXJhdGlvbik7XHJcbiAgICAgICAgcmV0dXJuIFtuLCBuXTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBOdW1iZXJPZih2YWwpIHtcclxuICAgIGNvbnN0IHJlcyA9IHRvTnVtYmVyKHZhbCk7XHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKVxyXG4gICAgICAgIHZhbGlkYXRlRHVyYXRpb24ocmVzKTtcclxuICAgIHJldHVybiByZXM7XHJcbn1cclxuZnVuY3Rpb24gdmFsaWRhdGVEdXJhdGlvbih2YWwpIHtcclxuICAgIGlmICh0eXBlb2YgdmFsICE9PSAnbnVtYmVyJykge1xyXG4gICAgICAgIHdhcm4oYDx0cmFuc2l0aW9uPiBleHBsaWNpdCBkdXJhdGlvbiBpcyBub3QgYSB2YWxpZCBudW1iZXIgLSBgICtcclxuICAgICAgICAgICAgYGdvdCAke0pTT04uc3RyaW5naWZ5KHZhbCl9LmApO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoaXNOYU4odmFsKSkge1xyXG4gICAgICAgIHdhcm4oYDx0cmFuc2l0aW9uPiBleHBsaWNpdCBkdXJhdGlvbiBpcyBOYU4gLSBgICtcclxuICAgICAgICAgICAgJ3RoZSBkdXJhdGlvbiBleHByZXNzaW9uIG1pZ2h0IGJlIGluY29ycmVjdC4nKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGNscykge1xyXG4gICAgY2xzLnNwbGl0KC9cXHMrLykuZm9yRWFjaChjID0+IGMgJiYgZWwuY2xhc3NMaXN0LmFkZChjKSk7XHJcbiAgICAoZWwuX3Z0YyB8fFxyXG4gICAgICAgIChlbC5fdnRjID0gbmV3IFNldCgpKSkuYWRkKGNscyk7XHJcbn1cclxuZnVuY3Rpb24gcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBjbHMpIHtcclxuICAgIGNscy5zcGxpdCgvXFxzKy8pLmZvckVhY2goYyA9PiBjICYmIGVsLmNsYXNzTGlzdC5yZW1vdmUoYykpO1xyXG4gICAgY29uc3QgeyBfdnRjIH0gPSBlbDtcclxuICAgIGlmIChfdnRjKSB7XHJcbiAgICAgICAgX3Z0Yy5kZWxldGUoY2xzKTtcclxuICAgICAgICBpZiAoIV92dGMuc2l6ZSkge1xyXG4gICAgICAgICAgICBlbC5fdnRjID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBuZXh0RnJhbWUoY2IpIHtcclxuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XHJcbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGNiKTtcclxuICAgIH0pO1xyXG59XHJcbmxldCBlbmRJZCA9IDA7XHJcbmZ1bmN0aW9uIHdoZW5UcmFuc2l0aW9uRW5kcyhlbCwgZXhwZWN0ZWRUeXBlLCBleHBsaWNpdFRpbWVvdXQsIHJlc29sdmUpIHtcclxuICAgIGNvbnN0IGlkID0gKGVsLl9lbmRJZCA9ICsrZW5kSWQpO1xyXG4gICAgY29uc3QgcmVzb2x2ZUlmTm90U3RhbGUgPSAoKSA9PiB7XHJcbiAgICAgICAgaWYgKGlkID09PSBlbC5fZW5kSWQpIHtcclxuICAgICAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBpZiAoZXhwbGljaXRUaW1lb3V0KSB7XHJcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQocmVzb2x2ZUlmTm90U3RhbGUsIGV4cGxpY2l0VGltZW91dCk7XHJcbiAgICB9XHJcbiAgICBjb25zdCB7IHR5cGUsIHRpbWVvdXQsIHByb3BDb3VudCB9ID0gZ2V0VHJhbnNpdGlvbkluZm8oZWwsIGV4cGVjdGVkVHlwZSk7XHJcbiAgICBpZiAoIXR5cGUpIHtcclxuICAgICAgICByZXR1cm4gcmVzb2x2ZSgpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgZW5kRXZlbnQgPSB0eXBlICsgJ2VuZCc7XHJcbiAgICBsZXQgZW5kZWQgPSAwO1xyXG4gICAgY29uc3QgZW5kID0gKCkgPT4ge1xyXG4gICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoZW5kRXZlbnQsIG9uRW5kKTtcclxuICAgICAgICByZXNvbHZlSWZOb3RTdGFsZSgpO1xyXG4gICAgfTtcclxuICAgIGNvbnN0IG9uRW5kID0gKGUpID0+IHtcclxuICAgICAgICBpZiAoZS50YXJnZXQgPT09IGVsICYmICsrZW5kZWQgPj0gcHJvcENvdW50KSB7XHJcbiAgICAgICAgICAgIGVuZCgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICBpZiAoZW5kZWQgPCBwcm9wQ291bnQpIHtcclxuICAgICAgICAgICAgZW5kKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSwgdGltZW91dCArIDEpO1xyXG4gICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihlbmRFdmVudCwgb25FbmQpO1xyXG59XHJcbmZ1bmN0aW9uIGdldFRyYW5zaXRpb25JbmZvKGVsLCBleHBlY3RlZFR5cGUpIHtcclxuICAgIGNvbnN0IHN0eWxlcyA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsKTtcclxuICAgIC8vIEpTRE9NIG1heSByZXR1cm4gdW5kZWZpbmVkIGZvciB0cmFuc2l0aW9uIHByb3BlcnRpZXNcclxuICAgIGNvbnN0IGdldFN0eWxlUHJvcGVydGllcyA9IChrZXkpID0+IChzdHlsZXNba2V5XSB8fCAnJykuc3BsaXQoJywgJyk7XHJcbiAgICBjb25zdCB0cmFuc2l0aW9uRGVsYXlzID0gZ2V0U3R5bGVQcm9wZXJ0aWVzKFRSQU5TSVRJT04gKyAnRGVsYXknKTtcclxuICAgIGNvbnN0IHRyYW5zaXRpb25EdXJhdGlvbnMgPSBnZXRTdHlsZVByb3BlcnRpZXMoVFJBTlNJVElPTiArICdEdXJhdGlvbicpO1xyXG4gICAgY29uc3QgdHJhbnNpdGlvblRpbWVvdXQgPSBnZXRUaW1lb3V0KHRyYW5zaXRpb25EZWxheXMsIHRyYW5zaXRpb25EdXJhdGlvbnMpO1xyXG4gICAgY29uc3QgYW5pbWF0aW9uRGVsYXlzID0gZ2V0U3R5bGVQcm9wZXJ0aWVzKEFOSU1BVElPTiArICdEZWxheScpO1xyXG4gICAgY29uc3QgYW5pbWF0aW9uRHVyYXRpb25zID0gZ2V0U3R5bGVQcm9wZXJ0aWVzKEFOSU1BVElPTiArICdEdXJhdGlvbicpO1xyXG4gICAgY29uc3QgYW5pbWF0aW9uVGltZW91dCA9IGdldFRpbWVvdXQoYW5pbWF0aW9uRGVsYXlzLCBhbmltYXRpb25EdXJhdGlvbnMpO1xyXG4gICAgbGV0IHR5cGUgPSBudWxsO1xyXG4gICAgbGV0IHRpbWVvdXQgPSAwO1xyXG4gICAgbGV0IHByb3BDb3VudCA9IDA7XHJcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cclxuICAgIGlmIChleHBlY3RlZFR5cGUgPT09IFRSQU5TSVRJT04pIHtcclxuICAgICAgICBpZiAodHJhbnNpdGlvblRpbWVvdXQgPiAwKSB7XHJcbiAgICAgICAgICAgIHR5cGUgPSBUUkFOU0lUSU9OO1xyXG4gICAgICAgICAgICB0aW1lb3V0ID0gdHJhbnNpdGlvblRpbWVvdXQ7XHJcbiAgICAgICAgICAgIHByb3BDb3VudCA9IHRyYW5zaXRpb25EdXJhdGlvbnMubGVuZ3RoO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGV4cGVjdGVkVHlwZSA9PT0gQU5JTUFUSU9OKSB7XHJcbiAgICAgICAgaWYgKGFuaW1hdGlvblRpbWVvdXQgPiAwKSB7XHJcbiAgICAgICAgICAgIHR5cGUgPSBBTklNQVRJT047XHJcbiAgICAgICAgICAgIHRpbWVvdXQgPSBhbmltYXRpb25UaW1lb3V0O1xyXG4gICAgICAgICAgICBwcm9wQ291bnQgPSBhbmltYXRpb25EdXJhdGlvbnMubGVuZ3RoO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHRpbWVvdXQgPSBNYXRoLm1heCh0cmFuc2l0aW9uVGltZW91dCwgYW5pbWF0aW9uVGltZW91dCk7XHJcbiAgICAgICAgdHlwZSA9XHJcbiAgICAgICAgICAgIHRpbWVvdXQgPiAwXHJcbiAgICAgICAgICAgICAgICA/IHRyYW5zaXRpb25UaW1lb3V0ID4gYW5pbWF0aW9uVGltZW91dFxyXG4gICAgICAgICAgICAgICAgICAgID8gVFJBTlNJVElPTlxyXG4gICAgICAgICAgICAgICAgICAgIDogQU5JTUFUSU9OXHJcbiAgICAgICAgICAgICAgICA6IG51bGw7XHJcbiAgICAgICAgcHJvcENvdW50ID0gdHlwZVxyXG4gICAgICAgICAgICA/IHR5cGUgPT09IFRSQU5TSVRJT05cclxuICAgICAgICAgICAgICAgID8gdHJhbnNpdGlvbkR1cmF0aW9ucy5sZW5ndGhcclxuICAgICAgICAgICAgICAgIDogYW5pbWF0aW9uRHVyYXRpb25zLmxlbmd0aFxyXG4gICAgICAgICAgICA6IDA7XHJcbiAgICB9XHJcbiAgICBjb25zdCBoYXNUcmFuc2Zvcm0gPSB0eXBlID09PSBUUkFOU0lUSU9OICYmXHJcbiAgICAgICAgL1xcYih0cmFuc2Zvcm18YWxsKSgsfCQpLy50ZXN0KHN0eWxlc1tUUkFOU0lUSU9OICsgJ1Byb3BlcnR5J10pO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB0eXBlLFxyXG4gICAgICAgIHRpbWVvdXQsXHJcbiAgICAgICAgcHJvcENvdW50LFxyXG4gICAgICAgIGhhc1RyYW5zZm9ybVxyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiBnZXRUaW1lb3V0KGRlbGF5cywgZHVyYXRpb25zKSB7XHJcbiAgICB3aGlsZSAoZGVsYXlzLmxlbmd0aCA8IGR1cmF0aW9ucy5sZW5ndGgpIHtcclxuICAgICAgICBkZWxheXMgPSBkZWxheXMuY29uY2F0KGRlbGF5cyk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gTWF0aC5tYXgoLi4uZHVyYXRpb25zLm1hcCgoZCwgaSkgPT4gdG9NcyhkKSArIHRvTXMoZGVsYXlzW2ldKSkpO1xyXG59XHJcbi8vIE9sZCB2ZXJzaW9ucyBvZiBDaHJvbWl1bSAoYmVsb3cgNjEuMC4zMTYzLjEwMCkgZm9ybWF0cyBmbG9hdGluZyBwb2ludGVyXHJcbi8vIG51bWJlcnMgaW4gYSBsb2NhbGUtZGVwZW5kZW50IHdheSwgdXNpbmcgYSBjb21tYSBpbnN0ZWFkIG9mIGEgZG90LlxyXG4vLyBJZiBjb21tYSBpcyBub3QgcmVwbGFjZWQgd2l0aCBhIGRvdCwgdGhlIGlucHV0IHdpbGwgYmUgcm91bmRlZCBkb3duXHJcbi8vIChpLmUuIGFjdGluZyBhcyBhIGZsb29yIGZ1bmN0aW9uKSBjYXVzaW5nIHVuZXhwZWN0ZWQgYmVoYXZpb3JzXHJcbmZ1bmN0aW9uIHRvTXMocykge1xyXG4gICAgcmV0dXJuIE51bWJlcihzLnNsaWNlKDAsIC0xKS5yZXBsYWNlKCcsJywgJy4nKSkgKiAxMDAwO1xyXG59XG5cbmNvbnN0IHBvc2l0aW9uTWFwID0gbmV3IFdlYWtNYXAoKTtcclxuY29uc3QgbmV3UG9zaXRpb25NYXAgPSBuZXcgV2Vha01hcCgpO1xyXG5jb25zdCBUcmFuc2l0aW9uR3JvdXBJbXBsID0ge1xyXG4gICAgbmFtZTogJ1RyYW5zaXRpb25Hcm91cCcsXHJcbiAgICBwcm9wczogLyojX19QVVJFX18qLyBleHRlbmQoe30sIFRyYW5zaXRpb25Qcm9wc1ZhbGlkYXRvcnMsIHtcclxuICAgICAgICB0YWc6IFN0cmluZyxcclxuICAgICAgICBtb3ZlQ2xhc3M6IFN0cmluZ1xyXG4gICAgfSksXHJcbiAgICBzZXR1cChwcm9wcywgeyBzbG90cyB9KSB7XHJcbiAgICAgICAgY29uc3QgaW5zdGFuY2UgPSBnZXRDdXJyZW50SW5zdGFuY2UoKTtcclxuICAgICAgICBjb25zdCBzdGF0ZSA9IHVzZVRyYW5zaXRpb25TdGF0ZSgpO1xyXG4gICAgICAgIGxldCBwcmV2Q2hpbGRyZW47XHJcbiAgICAgICAgbGV0IGNoaWxkcmVuO1xyXG4gICAgICAgIG9uVXBkYXRlZCgoKSA9PiB7XHJcbiAgICAgICAgICAgIC8vIGNoaWxkcmVuIGlzIGd1YXJhbnRlZWQgdG8gZXhpc3QgYWZ0ZXIgaW5pdGlhbCByZW5kZXJcclxuICAgICAgICAgICAgaWYgKCFwcmV2Q2hpbGRyZW4ubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgbW92ZUNsYXNzID0gcHJvcHMubW92ZUNsYXNzIHx8IGAke3Byb3BzLm5hbWUgfHwgJ3YnfS1tb3ZlYDtcclxuICAgICAgICAgICAgaWYgKCFoYXNDU1NUcmFuc2Zvcm0ocHJldkNoaWxkcmVuWzBdLmVsLCBpbnN0YW5jZS52bm9kZS5lbCwgbW92ZUNsYXNzKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIHdlIGRpdmlkZSB0aGUgd29yayBpbnRvIHRocmVlIGxvb3BzIHRvIGF2b2lkIG1peGluZyBET00gcmVhZHMgYW5kIHdyaXRlc1xyXG4gICAgICAgICAgICAvLyBpbiBlYWNoIGl0ZXJhdGlvbiAtIHdoaWNoIGhlbHBzIHByZXZlbnQgbGF5b3V0IHRocmFzaGluZy5cclxuICAgICAgICAgICAgcHJldkNoaWxkcmVuLmZvckVhY2goY2FsbFBlbmRpbmdDYnMpO1xyXG4gICAgICAgICAgICBwcmV2Q2hpbGRyZW4uZm9yRWFjaChyZWNvcmRQb3NpdGlvbik7XHJcbiAgICAgICAgICAgIGNvbnN0IG1vdmVkQ2hpbGRyZW4gPSBwcmV2Q2hpbGRyZW4uZmlsdGVyKGFwcGx5VHJhbnNsYXRpb24pO1xyXG4gICAgICAgICAgICAvLyBmb3JjZSByZWZsb3cgdG8gcHV0IGV2ZXJ5dGhpbmcgaW4gcG9zaXRpb25cclxuICAgICAgICAgICAgZm9yY2VSZWZsb3coKTtcclxuICAgICAgICAgICAgbW92ZWRDaGlsZHJlbi5mb3JFYWNoKGMgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZWwgPSBjLmVsO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc3R5bGUgPSBlbC5zdHlsZTtcclxuICAgICAgICAgICAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgbW92ZUNsYXNzKTtcclxuICAgICAgICAgICAgICAgIHN0eWxlLnRyYW5zZm9ybSA9IHN0eWxlLndlYmtpdFRyYW5zZm9ybSA9IHN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9ICcnO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY2IgPSAoZWwuX21vdmVDYiA9IChlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGUgJiYgZS50YXJnZXQgIT09IGVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFlIHx8IC90cmFuc2Zvcm0kLy50ZXN0KGUucHJvcGVydHlOYW1lKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgY2IpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbC5fbW92ZUNiID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBtb3ZlQ2xhc3MpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIGNiKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgcmF3UHJvcHMgPSB0b1Jhdyhwcm9wcyk7XHJcbiAgICAgICAgICAgIGNvbnN0IGNzc1RyYW5zaXRpb25Qcm9wcyA9IHJlc29sdmVUcmFuc2l0aW9uUHJvcHMocmF3UHJvcHMpO1xyXG4gICAgICAgICAgICBjb25zdCB0YWcgPSByYXdQcm9wcy50YWcgfHwgRnJhZ21lbnQ7XHJcbiAgICAgICAgICAgIHByZXZDaGlsZHJlbiA9IGNoaWxkcmVuO1xyXG4gICAgICAgICAgICBjaGlsZHJlbiA9IHNsb3RzLmRlZmF1bHQgPyBnZXRUcmFuc2l0aW9uUmF3Q2hpbGRyZW4oc2xvdHMuZGVmYXVsdCgpKSA6IFtdO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjaGlsZCA9IGNoaWxkcmVuW2ldO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNoaWxkLmtleSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2V0VHJhbnNpdGlvbkhvb2tzKGNoaWxkLCByZXNvbHZlVHJhbnNpdGlvbkhvb2tzKGNoaWxkLCBjc3NUcmFuc2l0aW9uUHJvcHMsIHN0YXRlLCBpbnN0YW5jZSkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2FybihgPFRyYW5zaXRpb25Hcm91cD4gY2hpbGRyZW4gbXVzdCBiZSBrZXllZC5gKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAocHJldkNoaWxkcmVuKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHByZXZDaGlsZHJlbi5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkID0gcHJldkNoaWxkcmVuW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIHNldFRyYW5zaXRpb25Ib29rcyhjaGlsZCwgcmVzb2x2ZVRyYW5zaXRpb25Ib29rcyhjaGlsZCwgY3NzVHJhbnNpdGlvblByb3BzLCBzdGF0ZSwgaW5zdGFuY2UpKTtcclxuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbk1hcC5zZXQoY2hpbGQsIGNoaWxkLmVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlVk5vZGUodGFnLCBudWxsLCBjaGlsZHJlbik7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufTtcclxuY29uc3QgVHJhbnNpdGlvbkdyb3VwID0gVHJhbnNpdGlvbkdyb3VwSW1wbDtcclxuZnVuY3Rpb24gY2FsbFBlbmRpbmdDYnMoYykge1xyXG4gICAgY29uc3QgZWwgPSBjLmVsO1xyXG4gICAgaWYgKGVsLl9tb3ZlQ2IpIHtcclxuICAgICAgICBlbC5fbW92ZUNiKCk7XHJcbiAgICB9XHJcbiAgICBpZiAoZWwuX2VudGVyQ2IpIHtcclxuICAgICAgICBlbC5fZW50ZXJDYigpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIHJlY29yZFBvc2l0aW9uKGMpIHtcclxuICAgIG5ld1Bvc2l0aW9uTWFwLnNldChjLCBjLmVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpKTtcclxufVxyXG5mdW5jdGlvbiBhcHBseVRyYW5zbGF0aW9uKGMpIHtcclxuICAgIGNvbnN0IG9sZFBvcyA9IHBvc2l0aW9uTWFwLmdldChjKTtcclxuICAgIGNvbnN0IG5ld1BvcyA9IG5ld1Bvc2l0aW9uTWFwLmdldChjKTtcclxuICAgIGNvbnN0IGR4ID0gb2xkUG9zLmxlZnQgLSBuZXdQb3MubGVmdDtcclxuICAgIGNvbnN0IGR5ID0gb2xkUG9zLnRvcCAtIG5ld1Bvcy50b3A7XHJcbiAgICBpZiAoZHggfHwgZHkpIHtcclxuICAgICAgICBjb25zdCBzID0gYy5lbC5zdHlsZTtcclxuICAgICAgICBzLnRyYW5zZm9ybSA9IHMud2Via2l0VHJhbnNmb3JtID0gYHRyYW5zbGF0ZSgke2R4fXB4LCR7ZHl9cHgpYDtcclxuICAgICAgICBzLnRyYW5zaXRpb25EdXJhdGlvbiA9ICcwcyc7XHJcbiAgICAgICAgcmV0dXJuIGM7XHJcbiAgICB9XHJcbn1cclxuLy8gdGhpcyBpcyBwdXQgaW4gYSBkZWRpY2F0ZWQgZnVuY3Rpb24gdG8gYXZvaWQgdGhlIGxpbmUgZnJvbSBiZWluZyB0cmVlc2hha2VuXHJcbmZ1bmN0aW9uIGZvcmNlUmVmbG93KCkge1xyXG4gICAgcmV0dXJuIGRvY3VtZW50LmJvZHkub2Zmc2V0SGVpZ2h0O1xyXG59XHJcbmZ1bmN0aW9uIGhhc0NTU1RyYW5zZm9ybShlbCwgcm9vdCwgbW92ZUNsYXNzKSB7XHJcbiAgICAvLyBEZXRlY3Qgd2hldGhlciBhbiBlbGVtZW50IHdpdGggdGhlIG1vdmUgY2xhc3MgYXBwbGllZCBoYXNcclxuICAgIC8vIENTUyB0cmFuc2l0aW9ucy4gU2luY2UgdGhlIGVsZW1lbnQgbWF5IGJlIGluc2lkZSBhbiBlbnRlcmluZ1xyXG4gICAgLy8gdHJhbnNpdGlvbiBhdCB0aGlzIHZlcnkgbW9tZW50LCB3ZSBtYWtlIGEgY2xvbmUgb2YgaXQgYW5kIHJlbW92ZVxyXG4gICAgLy8gYWxsIG90aGVyIHRyYW5zaXRpb24gY2xhc3NlcyBhcHBsaWVkIHRvIGVuc3VyZSBvbmx5IHRoZSBtb3ZlIGNsYXNzXHJcbiAgICAvLyBpcyBhcHBsaWVkLlxyXG4gICAgY29uc3QgY2xvbmUgPSBlbC5jbG9uZU5vZGUoKTtcclxuICAgIGlmIChlbC5fdnRjKSB7XHJcbiAgICAgICAgZWwuX3Z0Yy5mb3JFYWNoKGNscyA9PiB7XHJcbiAgICAgICAgICAgIGNscy5zcGxpdCgvXFxzKy8pLmZvckVhY2goYyA9PiBjICYmIGNsb25lLmNsYXNzTGlzdC5yZW1vdmUoYykpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgbW92ZUNsYXNzLnNwbGl0KC9cXHMrLykuZm9yRWFjaChjID0+IGMgJiYgY2xvbmUuY2xhc3NMaXN0LmFkZChjKSk7XHJcbiAgICBjbG9uZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgY29uc3QgY29udGFpbmVyID0gKHJvb3Qubm9kZVR5cGUgPT09IDFcclxuICAgICAgICA/IHJvb3RcclxuICAgICAgICA6IHJvb3QucGFyZW50Tm9kZSk7XHJcbiAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoY2xvbmUpO1xyXG4gICAgY29uc3QgeyBoYXNUcmFuc2Zvcm0gfSA9IGdldFRyYW5zaXRpb25JbmZvKGNsb25lKTtcclxuICAgIGNvbnRhaW5lci5yZW1vdmVDaGlsZChjbG9uZSk7XHJcbiAgICByZXR1cm4gaGFzVHJhbnNmb3JtO1xyXG59XG5cbmNvbnN0IGdldE1vZGVsQXNzaWduZXIgPSAodm5vZGUpID0+IHtcclxuICAgIGNvbnN0IGZuID0gdm5vZGUucHJvcHNbJ29uVXBkYXRlOm1vZGVsVmFsdWUnXTtcclxuICAgIHJldHVybiBpc0FycmF5KGZuKSA/IHZhbHVlID0+IGludm9rZUFycmF5Rm5zKGZuLCB2YWx1ZSkgOiBmbjtcclxufTtcclxuZnVuY3Rpb24gb25Db21wb3NpdGlvblN0YXJ0KGUpIHtcclxuICAgIGUudGFyZ2V0LmNvbXBvc2luZyA9IHRydWU7XHJcbn1cclxuZnVuY3Rpb24gb25Db21wb3NpdGlvbkVuZChlKSB7XHJcbiAgICBjb25zdCB0YXJnZXQgPSBlLnRhcmdldDtcclxuICAgIGlmICh0YXJnZXQuY29tcG9zaW5nKSB7XHJcbiAgICAgICAgdGFyZ2V0LmNvbXBvc2luZyA9IGZhbHNlO1xyXG4gICAgICAgIHRyaWdnZXIodGFyZ2V0LCAnaW5wdXQnKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiB0cmlnZ2VyKGVsLCB0eXBlKSB7XHJcbiAgICBjb25zdCBlID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0hUTUxFdmVudHMnKTtcclxuICAgIGUuaW5pdEV2ZW50KHR5cGUsIHRydWUsIHRydWUpO1xyXG4gICAgZWwuZGlzcGF0Y2hFdmVudChlKTtcclxufVxyXG4vLyBXZSBhcmUgZXhwb3J0aW5nIHRoZSB2LW1vZGVsIHJ1bnRpbWUgZGlyZWN0bHkgYXMgdm5vZGUgaG9va3Mgc28gdGhhdCBpdCBjYW5cclxuLy8gYmUgdHJlZS1zaGFrZW4gaW4gY2FzZSB2LW1vZGVsIGlzIG5ldmVyIHVzZWQuXHJcbmNvbnN0IHZNb2RlbFRleHQgPSB7XHJcbiAgICBjcmVhdGVkKGVsLCB7IG1vZGlmaWVyczogeyBsYXp5LCB0cmltLCBudW1iZXIgfSB9LCB2bm9kZSkge1xyXG4gICAgICAgIGVsLl9hc3NpZ24gPSBnZXRNb2RlbEFzc2lnbmVyKHZub2RlKTtcclxuICAgICAgICBjb25zdCBjYXN0VG9OdW1iZXIgPSBudW1iZXIgfHwgZWwudHlwZSA9PT0gJ251bWJlcic7XHJcbiAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcihlbCwgbGF6eSA/ICdjaGFuZ2UnIDogJ2lucHV0JywgZSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChlLnRhcmdldC5jb21wb3NpbmcpXHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIGxldCBkb21WYWx1ZSA9IGVsLnZhbHVlO1xyXG4gICAgICAgICAgICBpZiAodHJpbSkge1xyXG4gICAgICAgICAgICAgICAgZG9tVmFsdWUgPSBkb21WYWx1ZS50cmltKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoY2FzdFRvTnVtYmVyKSB7XHJcbiAgICAgICAgICAgICAgICBkb21WYWx1ZSA9IHRvTnVtYmVyKGRvbVZhbHVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbC5fYXNzaWduKGRvbVZhbHVlKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBpZiAodHJpbSkge1xyXG4gICAgICAgICAgICBhZGRFdmVudExpc3RlbmVyKGVsLCAnY2hhbmdlJywgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgZWwudmFsdWUgPSBlbC52YWx1ZS50cmltKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIWxhenkpIHtcclxuICAgICAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcihlbCwgJ2NvbXBvc2l0aW9uc3RhcnQnLCBvbkNvbXBvc2l0aW9uU3RhcnQpO1xyXG4gICAgICAgICAgICBhZGRFdmVudExpc3RlbmVyKGVsLCAnY29tcG9zaXRpb25lbmQnLCBvbkNvbXBvc2l0aW9uRW5kKTtcclxuICAgICAgICAgICAgLy8gU2FmYXJpIDwgMTAuMiAmIFVJV2ViVmlldyBkb2Vzbid0IGZpcmUgY29tcG9zaXRpb25lbmQgd2hlblxyXG4gICAgICAgICAgICAvLyBzd2l0Y2hpbmcgZm9jdXMgYmVmb3JlIGNvbmZpcm1pbmcgY29tcG9zaXRpb24gY2hvaWNlXHJcbiAgICAgICAgICAgIC8vIHRoaXMgYWxzbyBmaXhlcyB0aGUgaXNzdWUgd2hlcmUgc29tZSBicm93c2VycyBlLmcuIGlPUyBDaHJvbWVcclxuICAgICAgICAgICAgLy8gZmlyZXMgXCJjaGFuZ2VcIiBpbnN0ZWFkIG9mIFwiaW5wdXRcIiBvbiBhdXRvY29tcGxldGUuXHJcbiAgICAgICAgICAgIGFkZEV2ZW50TGlzdGVuZXIoZWwsICdjaGFuZ2UnLCBvbkNvbXBvc2l0aW9uRW5kKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgLy8gc2V0IHZhbHVlIG9uIG1vdW50ZWQgc28gaXQncyBhZnRlciBtaW4vbWF4IGZvciB0eXBlPVwicmFuZ2VcIlxyXG4gICAgbW91bnRlZChlbCwgeyB2YWx1ZSB9KSB7XHJcbiAgICAgICAgZWwudmFsdWUgPSB2YWx1ZSA9PSBudWxsID8gJycgOiB2YWx1ZTtcclxuICAgIH0sXHJcbiAgICBiZWZvcmVVcGRhdGUoZWwsIHsgdmFsdWUsIG1vZGlmaWVyczogeyB0cmltLCBudW1iZXIgfSB9LCB2bm9kZSkge1xyXG4gICAgICAgIGVsLl9hc3NpZ24gPSBnZXRNb2RlbEFzc2lnbmVyKHZub2RlKTtcclxuICAgICAgICAvLyBhdm9pZCBjbGVhcmluZyB1bnJlc29sdmVkIHRleHQuICMyMzAyXHJcbiAgICAgICAgaWYgKGVsLmNvbXBvc2luZylcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIGlmIChkb2N1bWVudC5hY3RpdmVFbGVtZW50ID09PSBlbCkge1xyXG4gICAgICAgICAgICBpZiAodHJpbSAmJiBlbC52YWx1ZS50cmltKCkgPT09IHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKChudW1iZXIgfHwgZWwudHlwZSA9PT0gJ251bWJlcicpICYmIHRvTnVtYmVyKGVsLnZhbHVlKSA9PT0gdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBuZXdWYWx1ZSA9IHZhbHVlID09IG51bGwgPyAnJyA6IHZhbHVlO1xyXG4gICAgICAgIGlmIChlbC52YWx1ZSAhPT0gbmV3VmFsdWUpIHtcclxuICAgICAgICAgICAgZWwudmFsdWUgPSBuZXdWYWx1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn07XHJcbmNvbnN0IHZNb2RlbENoZWNrYm94ID0ge1xyXG4gICAgY3JlYXRlZChlbCwgXywgdm5vZGUpIHtcclxuICAgICAgICBlbC5fYXNzaWduID0gZ2V0TW9kZWxBc3NpZ25lcih2bm9kZSk7XHJcbiAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcihlbCwgJ2NoYW5nZScsICgpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgbW9kZWxWYWx1ZSA9IGVsLl9tb2RlbFZhbHVlO1xyXG4gICAgICAgICAgICBjb25zdCBlbGVtZW50VmFsdWUgPSBnZXRWYWx1ZShlbCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGNoZWNrZWQgPSBlbC5jaGVja2VkO1xyXG4gICAgICAgICAgICBjb25zdCBhc3NpZ24gPSBlbC5fYXNzaWduO1xyXG4gICAgICAgICAgICBpZiAoaXNBcnJheShtb2RlbFZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaW5kZXggPSBsb29zZUluZGV4T2YobW9kZWxWYWx1ZSwgZWxlbWVudFZhbHVlKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGZvdW5kID0gaW5kZXggIT09IC0xO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNoZWNrZWQgJiYgIWZvdW5kKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXNzaWduKG1vZGVsVmFsdWUuY29uY2F0KGVsZW1lbnRWYWx1ZSkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoIWNoZWNrZWQgJiYgZm91bmQpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBmaWx0ZXJlZCA9IFsuLi5tb2RlbFZhbHVlXTtcclxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXJlZC5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIGFzc2lnbihmaWx0ZXJlZCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoaXNTZXQobW9kZWxWYWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNsb25lZCA9IG5ldyBTZXQobW9kZWxWYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoY2hlY2tlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNsb25lZC5hZGQoZWxlbWVudFZhbHVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGNsb25lZC5kZWxldGUoZWxlbWVudFZhbHVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGFzc2lnbihjbG9uZWQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgYXNzaWduKGdldENoZWNrYm94VmFsdWUoZWwsIGNoZWNrZWQpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSxcclxuICAgIC8vIHNldCBpbml0aWFsIGNoZWNrZWQgb24gbW91bnQgdG8gd2FpdCBmb3IgdHJ1ZS12YWx1ZS9mYWxzZS12YWx1ZVxyXG4gICAgbW91bnRlZDogc2V0Q2hlY2tlZCxcclxuICAgIGJlZm9yZVVwZGF0ZShlbCwgYmluZGluZywgdm5vZGUpIHtcclxuICAgICAgICBlbC5fYXNzaWduID0gZ2V0TW9kZWxBc3NpZ25lcih2bm9kZSk7XHJcbiAgICAgICAgc2V0Q2hlY2tlZChlbCwgYmluZGluZywgdm5vZGUpO1xyXG4gICAgfVxyXG59O1xyXG5mdW5jdGlvbiBzZXRDaGVja2VkKGVsLCB7IHZhbHVlLCBvbGRWYWx1ZSB9LCB2bm9kZSkge1xyXG4gICAgZWwuX21vZGVsVmFsdWUgPSB2YWx1ZTtcclxuICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xyXG4gICAgICAgIGVsLmNoZWNrZWQgPSBsb29zZUluZGV4T2YodmFsdWUsIHZub2RlLnByb3BzLnZhbHVlKSA+IC0xO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoaXNTZXQodmFsdWUpKSB7XHJcbiAgICAgICAgZWwuY2hlY2tlZCA9IHZhbHVlLmhhcyh2bm9kZS5wcm9wcy52YWx1ZSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICh2YWx1ZSAhPT0gb2xkVmFsdWUpIHtcclxuICAgICAgICBlbC5jaGVja2VkID0gbG9vc2VFcXVhbCh2YWx1ZSwgZ2V0Q2hlY2tib3hWYWx1ZShlbCwgdHJ1ZSkpO1xyXG4gICAgfVxyXG59XHJcbmNvbnN0IHZNb2RlbFJhZGlvID0ge1xyXG4gICAgY3JlYXRlZChlbCwgeyB2YWx1ZSB9LCB2bm9kZSkge1xyXG4gICAgICAgIGVsLmNoZWNrZWQgPSBsb29zZUVxdWFsKHZhbHVlLCB2bm9kZS5wcm9wcy52YWx1ZSk7XHJcbiAgICAgICAgZWwuX2Fzc2lnbiA9IGdldE1vZGVsQXNzaWduZXIodm5vZGUpO1xyXG4gICAgICAgIGFkZEV2ZW50TGlzdGVuZXIoZWwsICdjaGFuZ2UnLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIGVsLl9hc3NpZ24oZ2V0VmFsdWUoZWwpKTtcclxuICAgICAgICB9KTtcclxuICAgIH0sXHJcbiAgICBiZWZvcmVVcGRhdGUoZWwsIHsgdmFsdWUsIG9sZFZhbHVlIH0sIHZub2RlKSB7XHJcbiAgICAgICAgZWwuX2Fzc2lnbiA9IGdldE1vZGVsQXNzaWduZXIodm5vZGUpO1xyXG4gICAgICAgIGlmICh2YWx1ZSAhPT0gb2xkVmFsdWUpIHtcclxuICAgICAgICAgICAgZWwuY2hlY2tlZCA9IGxvb3NlRXF1YWwodmFsdWUsIHZub2RlLnByb3BzLnZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn07XHJcbmNvbnN0IHZNb2RlbFNlbGVjdCA9IHtcclxuICAgIGNyZWF0ZWQoZWwsIHsgdmFsdWUsIG1vZGlmaWVyczogeyBudW1iZXIgfSB9LCB2bm9kZSkge1xyXG4gICAgICAgIGNvbnN0IGlzU2V0TW9kZWwgPSBpc1NldCh2YWx1ZSk7XHJcbiAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcihlbCwgJ2NoYW5nZScsICgpID0+IHtcclxuICAgICAgICAgICAgY29uc3Qgc2VsZWN0ZWRWYWwgPSBBcnJheS5wcm90b3R5cGUuZmlsdGVyXHJcbiAgICAgICAgICAgICAgICAuY2FsbChlbC5vcHRpb25zLCAobykgPT4gby5zZWxlY3RlZClcclxuICAgICAgICAgICAgICAgIC5tYXAoKG8pID0+IG51bWJlciA/IHRvTnVtYmVyKGdldFZhbHVlKG8pKSA6IGdldFZhbHVlKG8pKTtcclxuICAgICAgICAgICAgZWwuX2Fzc2lnbihlbC5tdWx0aXBsZVxyXG4gICAgICAgICAgICAgICAgPyBpc1NldE1vZGVsXHJcbiAgICAgICAgICAgICAgICAgICAgPyBuZXcgU2V0KHNlbGVjdGVkVmFsKVxyXG4gICAgICAgICAgICAgICAgICAgIDogc2VsZWN0ZWRWYWxcclxuICAgICAgICAgICAgICAgIDogc2VsZWN0ZWRWYWxbMF0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGVsLl9hc3NpZ24gPSBnZXRNb2RlbEFzc2lnbmVyKHZub2RlKTtcclxuICAgIH0sXHJcbiAgICAvLyBzZXQgdmFsdWUgaW4gbW91bnRlZCAmIHVwZGF0ZWQgYmVjYXVzZSA8c2VsZWN0PiByZWxpZXMgb24gaXRzIGNoaWxkcmVuXHJcbiAgICAvLyA8b3B0aW9uPnMuXHJcbiAgICBtb3VudGVkKGVsLCB7IHZhbHVlIH0pIHtcclxuICAgICAgICBzZXRTZWxlY3RlZChlbCwgdmFsdWUpO1xyXG4gICAgfSxcclxuICAgIGJlZm9yZVVwZGF0ZShlbCwgX2JpbmRpbmcsIHZub2RlKSB7XHJcbiAgICAgICAgZWwuX2Fzc2lnbiA9IGdldE1vZGVsQXNzaWduZXIodm5vZGUpO1xyXG4gICAgfSxcclxuICAgIHVwZGF0ZWQoZWwsIHsgdmFsdWUgfSkge1xyXG4gICAgICAgIHNldFNlbGVjdGVkKGVsLCB2YWx1ZSk7XHJcbiAgICB9XHJcbn07XHJcbmZ1bmN0aW9uIHNldFNlbGVjdGVkKGVsLCB2YWx1ZSkge1xyXG4gICAgY29uc3QgaXNNdWx0aXBsZSA9IGVsLm11bHRpcGxlO1xyXG4gICAgaWYgKGlzTXVsdGlwbGUgJiYgIWlzQXJyYXkodmFsdWUpICYmICFpc1NldCh2YWx1ZSkpIHtcclxuICAgICAgICAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiZcclxuICAgICAgICAgICAgd2FybihgPHNlbGVjdCBtdWx0aXBsZSB2LW1vZGVsPiBleHBlY3RzIGFuIEFycmF5IG9yIFNldCB2YWx1ZSBmb3IgaXRzIGJpbmRpbmcsIGAgK1xyXG4gICAgICAgICAgICAgICAgYGJ1dCBnb3QgJHtPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLnNsaWNlKDgsIC0xKX0uYCk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgZm9yIChsZXQgaSA9IDAsIGwgPSBlbC5vcHRpb25zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG4gICAgICAgIGNvbnN0IG9wdGlvbiA9IGVsLm9wdGlvbnNbaV07XHJcbiAgICAgICAgY29uc3Qgb3B0aW9uVmFsdWUgPSBnZXRWYWx1ZShvcHRpb24pO1xyXG4gICAgICAgIGlmIChpc011bHRpcGxlKSB7XHJcbiAgICAgICAgICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgb3B0aW9uLnNlbGVjdGVkID0gbG9vc2VJbmRleE9mKHZhbHVlLCBvcHRpb25WYWx1ZSkgPiAtMTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIG9wdGlvbi5zZWxlY3RlZCA9IHZhbHVlLmhhcyhvcHRpb25WYWx1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGlmIChsb29zZUVxdWFsKGdldFZhbHVlKG9wdGlvbiksIHZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgZWwuc2VsZWN0ZWRJbmRleCA9IGk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAoIWlzTXVsdGlwbGUpIHtcclxuICAgICAgICBlbC5zZWxlY3RlZEluZGV4ID0gLTE7XHJcbiAgICB9XHJcbn1cclxuLy8gcmV0cmlldmUgcmF3IHZhbHVlIHNldCB2aWEgOnZhbHVlIGJpbmRpbmdzXHJcbmZ1bmN0aW9uIGdldFZhbHVlKGVsKSB7XHJcbiAgICByZXR1cm4gJ192YWx1ZScgaW4gZWwgPyBlbC5fdmFsdWUgOiBlbC52YWx1ZTtcclxufVxyXG4vLyByZXRyaWV2ZSByYXcgdmFsdWUgZm9yIHRydWUtdmFsdWUgYW5kIGZhbHNlLXZhbHVlIHNldCB2aWEgOnRydWUtdmFsdWUgb3IgOmZhbHNlLXZhbHVlIGJpbmRpbmdzXHJcbmZ1bmN0aW9uIGdldENoZWNrYm94VmFsdWUoZWwsIGNoZWNrZWQpIHtcclxuICAgIGNvbnN0IGtleSA9IGNoZWNrZWQgPyAnX3RydWVWYWx1ZScgOiAnX2ZhbHNlVmFsdWUnO1xyXG4gICAgcmV0dXJuIGtleSBpbiBlbCA/IGVsW2tleV0gOiBjaGVja2VkO1xyXG59XHJcbmNvbnN0IHZNb2RlbER5bmFtaWMgPSB7XHJcbiAgICBjcmVhdGVkKGVsLCBiaW5kaW5nLCB2bm9kZSkge1xyXG4gICAgICAgIGNhbGxNb2RlbEhvb2soZWwsIGJpbmRpbmcsIHZub2RlLCBudWxsLCAnY3JlYXRlZCcpO1xyXG4gICAgfSxcclxuICAgIG1vdW50ZWQoZWwsIGJpbmRpbmcsIHZub2RlKSB7XHJcbiAgICAgICAgY2FsbE1vZGVsSG9vayhlbCwgYmluZGluZywgdm5vZGUsIG51bGwsICdtb3VudGVkJyk7XHJcbiAgICB9LFxyXG4gICAgYmVmb3JlVXBkYXRlKGVsLCBiaW5kaW5nLCB2bm9kZSwgcHJldlZOb2RlKSB7XHJcbiAgICAgICAgY2FsbE1vZGVsSG9vayhlbCwgYmluZGluZywgdm5vZGUsIHByZXZWTm9kZSwgJ2JlZm9yZVVwZGF0ZScpO1xyXG4gICAgfSxcclxuICAgIHVwZGF0ZWQoZWwsIGJpbmRpbmcsIHZub2RlLCBwcmV2Vk5vZGUpIHtcclxuICAgICAgICBjYWxsTW9kZWxIb29rKGVsLCBiaW5kaW5nLCB2bm9kZSwgcHJldlZOb2RlLCAndXBkYXRlZCcpO1xyXG4gICAgfVxyXG59O1xyXG5mdW5jdGlvbiBjYWxsTW9kZWxIb29rKGVsLCBiaW5kaW5nLCB2bm9kZSwgcHJldlZOb2RlLCBob29rKSB7XHJcbiAgICBsZXQgbW9kZWxUb1VzZTtcclxuICAgIHN3aXRjaCAoZWwudGFnTmFtZSkge1xyXG4gICAgICAgIGNhc2UgJ1NFTEVDVCc6XHJcbiAgICAgICAgICAgIG1vZGVsVG9Vc2UgPSB2TW9kZWxTZWxlY3Q7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJ1RFWFRBUkVBJzpcclxuICAgICAgICAgICAgbW9kZWxUb1VzZSA9IHZNb2RlbFRleHQ7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgIHN3aXRjaCAodm5vZGUucHJvcHMgJiYgdm5vZGUucHJvcHMudHlwZSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnY2hlY2tib3gnOlxyXG4gICAgICAgICAgICAgICAgICAgIG1vZGVsVG9Vc2UgPSB2TW9kZWxDaGVja2JveDtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ3JhZGlvJzpcclxuICAgICAgICAgICAgICAgICAgICBtb2RlbFRvVXNlID0gdk1vZGVsUmFkaW87XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIG1vZGVsVG9Vc2UgPSB2TW9kZWxUZXh0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjb25zdCBmbiA9IG1vZGVsVG9Vc2VbaG9va107XHJcbiAgICBmbiAmJiBmbihlbCwgYmluZGluZywgdm5vZGUsIHByZXZWTm9kZSk7XHJcbn1cblxuY29uc3Qgc3lzdGVtTW9kaWZpZXJzID0gWydjdHJsJywgJ3NoaWZ0JywgJ2FsdCcsICdtZXRhJ107XHJcbmNvbnN0IG1vZGlmaWVyR3VhcmRzID0ge1xyXG4gICAgc3RvcDogZSA9PiBlLnN0b3BQcm9wYWdhdGlvbigpLFxyXG4gICAgcHJldmVudDogZSA9PiBlLnByZXZlbnREZWZhdWx0KCksXHJcbiAgICBzZWxmOiBlID0+IGUudGFyZ2V0ICE9PSBlLmN1cnJlbnRUYXJnZXQsXHJcbiAgICBjdHJsOiBlID0+ICFlLmN0cmxLZXksXHJcbiAgICBzaGlmdDogZSA9PiAhZS5zaGlmdEtleSxcclxuICAgIGFsdDogZSA9PiAhZS5hbHRLZXksXHJcbiAgICBtZXRhOiBlID0+ICFlLm1ldGFLZXksXHJcbiAgICBsZWZ0OiBlID0+ICdidXR0b24nIGluIGUgJiYgZS5idXR0b24gIT09IDAsXHJcbiAgICBtaWRkbGU6IGUgPT4gJ2J1dHRvbicgaW4gZSAmJiBlLmJ1dHRvbiAhPT0gMSxcclxuICAgIHJpZ2h0OiBlID0+ICdidXR0b24nIGluIGUgJiYgZS5idXR0b24gIT09IDIsXHJcbiAgICBleGFjdDogKGUsIG1vZGlmaWVycykgPT4gc3lzdGVtTW9kaWZpZXJzLnNvbWUobSA9PiBlW2Ake219S2V5YF0gJiYgIW1vZGlmaWVycy5pbmNsdWRlcyhtKSlcclxufTtcclxuLyoqXHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG5jb25zdCB3aXRoTW9kaWZpZXJzID0gKGZuLCBtb2RpZmllcnMpID0+IHtcclxuICAgIHJldHVybiAoZXZlbnQsIC4uLmFyZ3MpID0+IHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1vZGlmaWVycy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCBndWFyZCA9IG1vZGlmaWVyR3VhcmRzW21vZGlmaWVyc1tpXV07XHJcbiAgICAgICAgICAgIGlmIChndWFyZCAmJiBndWFyZChldmVudCwgbW9kaWZpZXJzKSlcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGZuKGV2ZW50LCAuLi5hcmdzKTtcclxuICAgIH07XHJcbn07XHJcbi8vIEtlcHQgZm9yIDIueCBjb21wYXQuXHJcbi8vIE5vdGU6IElFMTEgY29tcGF0IGZvciBgc3BhY2ViYXJgIGFuZCBgZGVsYCBpcyByZW1vdmVkIGZvciBub3cuXHJcbmNvbnN0IGtleU5hbWVzID0ge1xyXG4gICAgZXNjOiAnZXNjYXBlJyxcclxuICAgIHNwYWNlOiAnICcsXHJcbiAgICB1cDogJ2Fycm93LXVwJyxcclxuICAgIGxlZnQ6ICdhcnJvdy1sZWZ0JyxcclxuICAgIHJpZ2h0OiAnYXJyb3ctcmlnaHQnLFxyXG4gICAgZG93bjogJ2Fycm93LWRvd24nLFxyXG4gICAgZGVsZXRlOiAnYmFja3NwYWNlJ1xyXG59O1xyXG4vKipcclxuICogQHByaXZhdGVcclxuICovXHJcbmNvbnN0IHdpdGhLZXlzID0gKGZuLCBtb2RpZmllcnMpID0+IHtcclxuICAgIHJldHVybiAoZXZlbnQpID0+IHtcclxuICAgICAgICBpZiAoISgna2V5JyBpbiBldmVudCkpXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICBjb25zdCBldmVudEtleSA9IGh5cGhlbmF0ZShldmVudC5rZXkpO1xyXG4gICAgICAgIGlmIChcclxuICAgICAgICAvLyBOb25lIG9mIHRoZSBwcm92aWRlZCBrZXkgbW9kaWZpZXJzIG1hdGNoIHRoZSBjdXJyZW50IGV2ZW50IGtleVxyXG4gICAgICAgICFtb2RpZmllcnMuc29tZShrID0+IGsgPT09IGV2ZW50S2V5IHx8IGtleU5hbWVzW2tdID09PSBldmVudEtleSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZm4oZXZlbnQpO1xyXG4gICAgfTtcclxufTtcblxuY29uc3QgdlNob3cgPSB7XHJcbiAgICBiZWZvcmVNb3VudChlbCwgeyB2YWx1ZSB9LCB7IHRyYW5zaXRpb24gfSkge1xyXG4gICAgICAgIGVsLl92b2QgPSBlbC5zdHlsZS5kaXNwbGF5ID09PSAnbm9uZScgPyAnJyA6IGVsLnN0eWxlLmRpc3BsYXk7XHJcbiAgICAgICAgaWYgKHRyYW5zaXRpb24gJiYgdmFsdWUpIHtcclxuICAgICAgICAgICAgdHJhbnNpdGlvbi5iZWZvcmVFbnRlcihlbCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBzZXREaXNwbGF5KGVsLCB2YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIG1vdW50ZWQoZWwsIHsgdmFsdWUgfSwgeyB0cmFuc2l0aW9uIH0pIHtcclxuICAgICAgICBpZiAodHJhbnNpdGlvbiAmJiB2YWx1ZSkge1xyXG4gICAgICAgICAgICB0cmFuc2l0aW9uLmVudGVyKGVsKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgdXBkYXRlZChlbCwgeyB2YWx1ZSwgb2xkVmFsdWUgfSwgeyB0cmFuc2l0aW9uIH0pIHtcclxuICAgICAgICBpZiAodHJhbnNpdGlvbiAmJiB2YWx1ZSAhPT0gb2xkVmFsdWUpIHtcclxuICAgICAgICAgICAgaWYgKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICB0cmFuc2l0aW9uLmJlZm9yZUVudGVyKGVsKTtcclxuICAgICAgICAgICAgICAgIHNldERpc3BsYXkoZWwsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgdHJhbnNpdGlvbi5lbnRlcihlbCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0cmFuc2l0aW9uLmxlYXZlKGVsLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2V0RGlzcGxheShlbCwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHNldERpc3BsYXkoZWwsIHZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgYmVmb3JlVW5tb3VudChlbCwgeyB2YWx1ZSB9KSB7XHJcbiAgICAgICAgc2V0RGlzcGxheShlbCwgdmFsdWUpO1xyXG4gICAgfVxyXG59O1xyXG5mdW5jdGlvbiBzZXREaXNwbGF5KGVsLCB2YWx1ZSkge1xyXG4gICAgZWwuc3R5bGUuZGlzcGxheSA9IHZhbHVlID8gZWwuX3ZvZCA6ICdub25lJztcclxufVxuXG5jb25zdCByZW5kZXJlck9wdGlvbnMgPSBleHRlbmQoeyBwYXRjaFByb3AsIGZvcmNlUGF0Y2hQcm9wIH0sIG5vZGVPcHMpO1xyXG4vLyBsYXp5IGNyZWF0ZSB0aGUgcmVuZGVyZXIgLSB0aGlzIG1ha2VzIGNvcmUgcmVuZGVyZXIgbG9naWMgdHJlZS1zaGFrYWJsZVxyXG4vLyBpbiBjYXNlIHRoZSB1c2VyIG9ubHkgaW1wb3J0cyByZWFjdGl2aXR5IHV0aWxpdGllcyBmcm9tIFZ1ZS5cclxubGV0IHJlbmRlcmVyO1xyXG5sZXQgZW5hYmxlZEh5ZHJhdGlvbiA9IGZhbHNlO1xyXG5mdW5jdGlvbiBlbnN1cmVSZW5kZXJlcigpIHtcclxuICAgIHJldHVybiByZW5kZXJlciB8fCAocmVuZGVyZXIgPSBjcmVhdGVSZW5kZXJlcihyZW5kZXJlck9wdGlvbnMpKTtcclxufVxyXG5mdW5jdGlvbiBlbnN1cmVIeWRyYXRpb25SZW5kZXJlcigpIHtcclxuICAgIHJlbmRlcmVyID0gZW5hYmxlZEh5ZHJhdGlvblxyXG4gICAgICAgID8gcmVuZGVyZXJcclxuICAgICAgICA6IGNyZWF0ZUh5ZHJhdGlvblJlbmRlcmVyKHJlbmRlcmVyT3B0aW9ucyk7XHJcbiAgICBlbmFibGVkSHlkcmF0aW9uID0gdHJ1ZTtcclxuICAgIHJldHVybiByZW5kZXJlcjtcclxufVxyXG4vLyB1c2UgZXhwbGljaXQgdHlwZSBjYXN0cyBoZXJlIHRvIGF2b2lkIGltcG9ydCgpIGNhbGxzIGluIHJvbGxlZC11cCBkLnRzXHJcbmNvbnN0IHJlbmRlciA9ICgoLi4uYXJncykgPT4ge1xyXG4gICAgZW5zdXJlUmVuZGVyZXIoKS5yZW5kZXIoLi4uYXJncyk7XHJcbn0pO1xyXG5jb25zdCBoeWRyYXRlID0gKCguLi5hcmdzKSA9PiB7XHJcbiAgICBlbnN1cmVIeWRyYXRpb25SZW5kZXJlcigpLmh5ZHJhdGUoLi4uYXJncyk7XHJcbn0pO1xyXG5jb25zdCBjcmVhdGVBcHAgPSAoKC4uLmFyZ3MpID0+IHtcclxuICAgIGNvbnN0IGFwcCA9IGVuc3VyZVJlbmRlcmVyKCkuY3JlYXRlQXBwKC4uLmFyZ3MpO1xyXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgIGluamVjdE5hdGl2ZVRhZ0NoZWNrKGFwcCk7XHJcbiAgICB9XHJcbiAgICBjb25zdCB7IG1vdW50IH0gPSBhcHA7XHJcbiAgICBhcHAubW91bnQgPSAoY29udGFpbmVyT3JTZWxlY3RvcikgPT4ge1xyXG4gICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IG5vcm1hbGl6ZUNvbnRhaW5lcihjb250YWluZXJPclNlbGVjdG9yKTtcclxuICAgICAgICBpZiAoIWNvbnRhaW5lcilcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIGNvbnN0IGNvbXBvbmVudCA9IGFwcC5fY29tcG9uZW50O1xyXG4gICAgICAgIGlmICghaXNGdW5jdGlvbihjb21wb25lbnQpICYmICFjb21wb25lbnQucmVuZGVyICYmICFjb21wb25lbnQudGVtcGxhdGUpIHtcclxuICAgICAgICAgICAgY29tcG9uZW50LnRlbXBsYXRlID0gY29udGFpbmVyLmlubmVySFRNTDtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gY2xlYXIgY29udGVudCBiZWZvcmUgbW91bnRpbmdcclxuICAgICAgICBjb250YWluZXIuaW5uZXJIVE1MID0gJyc7XHJcbiAgICAgICAgY29uc3QgcHJveHkgPSBtb3VudChjb250YWluZXIpO1xyXG4gICAgICAgIGNvbnRhaW5lci5yZW1vdmVBdHRyaWJ1dGUoJ3YtY2xvYWsnKTtcclxuICAgICAgICBjb250YWluZXIuc2V0QXR0cmlidXRlKCdkYXRhLXYtYXBwJywgJycpO1xyXG4gICAgICAgIHJldHVybiBwcm94eTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gYXBwO1xyXG59KTtcclxuY29uc3QgY3JlYXRlU1NSQXBwID0gKCguLi5hcmdzKSA9PiB7XHJcbiAgICBjb25zdCBhcHAgPSBlbnN1cmVIeWRyYXRpb25SZW5kZXJlcigpLmNyZWF0ZUFwcCguLi5hcmdzKTtcclxuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICBpbmplY3ROYXRpdmVUYWdDaGVjayhhcHApO1xyXG4gICAgfVxyXG4gICAgY29uc3QgeyBtb3VudCB9ID0gYXBwO1xyXG4gICAgYXBwLm1vdW50ID0gKGNvbnRhaW5lck9yU2VsZWN0b3IpID0+IHtcclxuICAgICAgICBjb25zdCBjb250YWluZXIgPSBub3JtYWxpemVDb250YWluZXIoY29udGFpbmVyT3JTZWxlY3Rvcik7XHJcbiAgICAgICAgaWYgKGNvbnRhaW5lcikge1xyXG4gICAgICAgICAgICByZXR1cm4gbW91bnQoY29udGFpbmVyLCB0cnVlKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIGFwcDtcclxufSk7XHJcbmZ1bmN0aW9uIGluamVjdE5hdGl2ZVRhZ0NoZWNrKGFwcCkge1xyXG4gICAgLy8gSW5qZWN0IGBpc05hdGl2ZVRhZ2BcclxuICAgIC8vIHRoaXMgaXMgdXNlZCBmb3IgY29tcG9uZW50IG5hbWUgdmFsaWRhdGlvbiAoZGV2IG9ubHkpXHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoYXBwLmNvbmZpZywgJ2lzTmF0aXZlVGFnJywge1xyXG4gICAgICAgIHZhbHVlOiAodGFnKSA9PiBpc0hUTUxUYWcodGFnKSB8fCBpc1NWR1RhZyh0YWcpLFxyXG4gICAgICAgIHdyaXRhYmxlOiBmYWxzZVxyXG4gICAgfSk7XHJcbn1cclxuZnVuY3Rpb24gbm9ybWFsaXplQ29udGFpbmVyKGNvbnRhaW5lcikge1xyXG4gICAgaWYgKGlzU3RyaW5nKGNvbnRhaW5lcikpIHtcclxuICAgICAgICBjb25zdCByZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGNvbnRhaW5lcik7XHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhcmVzKSB7XHJcbiAgICAgICAgICAgIHdhcm4oYEZhaWxlZCB0byBtb3VudCBhcHA6IG1vdW50IHRhcmdldCBzZWxlY3RvciByZXR1cm5lZCBudWxsLmApO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGNvbnRhaW5lcjtcclxufVxuXG5leHBvcnQgeyBUcmFuc2l0aW9uLCBUcmFuc2l0aW9uR3JvdXAsIGNyZWF0ZUFwcCwgY3JlYXRlU1NSQXBwLCBoeWRyYXRlLCByZW5kZXIsIHVzZUNzc01vZHVsZSwgdXNlQ3NzVmFycywgdk1vZGVsQ2hlY2tib3gsIHZNb2RlbER5bmFtaWMsIHZNb2RlbFJhZGlvLCB2TW9kZWxTZWxlY3QsIHZNb2RlbFRleHQsIHZTaG93LCB3aXRoS2V5cywgd2l0aE1vZGlmaWVycyB9O1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obil7cmV0dXJue2FsbDpuPW58fG5ldyBNYXAsb246ZnVuY3Rpb24odCxlKXt2YXIgaT1uLmdldCh0KTtpJiZpLnB1c2goZSl8fG4uc2V0KHQsW2VdKX0sb2ZmOmZ1bmN0aW9uKHQsZSl7dmFyIGk9bi5nZXQodCk7aSYmaS5zcGxpY2UoaS5pbmRleE9mKGUpPj4+MCwxKX0sZW1pdDpmdW5jdGlvbih0LGUpeyhuLmdldCh0KXx8W10pLnNsaWNlKCkubWFwKGZ1bmN0aW9uKG4pe24oZSl9KSwobi5nZXQoXCIqXCIpfHxbXSkuc2xpY2UoKS5tYXAoZnVuY3Rpb24obil7bih0LGUpfSl9fX1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1pdHQuZXMuanMubWFwXG4iLCIvKipcclxuICogQSBjb2xsZWN0aW9uIG9mIHNoaW1zIHRoYXQgcHJvdmlkZSBtaW5pbWFsIGZ1bmN0aW9uYWxpdHkgb2YgdGhlIEVTNiBjb2xsZWN0aW9ucy5cclxuICpcclxuICogVGhlc2UgaW1wbGVtZW50YXRpb25zIGFyZSBub3QgbWVhbnQgdG8gYmUgdXNlZCBvdXRzaWRlIG9mIHRoZSBSZXNpemVPYnNlcnZlclxyXG4gKiBtb2R1bGVzIGFzIHRoZXkgY292ZXIgb25seSBhIGxpbWl0ZWQgcmFuZ2Ugb2YgdXNlIGNhc2VzLlxyXG4gKi9cclxuLyogZXNsaW50LWRpc2FibGUgcmVxdWlyZS1qc2RvYywgdmFsaWQtanNkb2MgKi9cclxudmFyIE1hcFNoaW0gPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgaWYgKHR5cGVvZiBNYXAgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgcmV0dXJuIE1hcDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyBpbmRleCBpbiBwcm92aWRlZCBhcnJheSB0aGF0IG1hdGNoZXMgdGhlIHNwZWNpZmllZCBrZXkuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtBcnJheTxBcnJheT59IGFyclxyXG4gICAgICogQHBhcmFtIHsqfSBrZXlcclxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9XHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIGdldEluZGV4KGFyciwga2V5KSB7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IC0xO1xyXG4gICAgICAgIGFyci5zb21lKGZ1bmN0aW9uIChlbnRyeSwgaW5kZXgpIHtcclxuICAgICAgICAgICAgaWYgKGVudHJ5WzBdID09PSBrZXkpIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IGluZGV4O1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGNsYXNzXzEoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX19lbnRyaWVzX18gPSBbXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNsYXNzXzEucHJvdG90eXBlLCBcInNpemVcIiwge1xyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9fZW50cmllc19fLmxlbmd0aDtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHBhcmFtIHsqfSBrZXlcclxuICAgICAgICAgKiBAcmV0dXJucyB7Kn1cclxuICAgICAgICAgKi9cclxuICAgICAgICBjbGFzc18xLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgICAgIHZhciBpbmRleCA9IGdldEluZGV4KHRoaXMuX19lbnRyaWVzX18sIGtleSk7XHJcbiAgICAgICAgICAgIHZhciBlbnRyeSA9IHRoaXMuX19lbnRyaWVzX19baW5kZXhdO1xyXG4gICAgICAgICAgICByZXR1cm4gZW50cnkgJiYgZW50cnlbMV07XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAcGFyYW0geyp9IGtleVxyXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gdmFsdWVcclxuICAgICAgICAgKiBAcmV0dXJucyB7dm9pZH1cclxuICAgICAgICAgKi9cclxuICAgICAgICBjbGFzc18xLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xyXG4gICAgICAgICAgICB2YXIgaW5kZXggPSBnZXRJbmRleCh0aGlzLl9fZW50cmllc19fLCBrZXkpO1xyXG4gICAgICAgICAgICBpZiAofmluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9fZW50cmllc19fW2luZGV4XVsxXSA9IHZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fX2VudHJpZXNfXy5wdXNoKFtrZXksIHZhbHVlXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBwYXJhbSB7Kn0ga2V5XHJcbiAgICAgICAgICogQHJldHVybnMge3ZvaWR9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY2xhc3NfMS5wcm90b3R5cGUuZGVsZXRlID0gZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgICAgICB2YXIgZW50cmllcyA9IHRoaXMuX19lbnRyaWVzX187XHJcbiAgICAgICAgICAgIHZhciBpbmRleCA9IGdldEluZGV4KGVudHJpZXMsIGtleSk7XHJcbiAgICAgICAgICAgIGlmICh+aW5kZXgpIHtcclxuICAgICAgICAgICAgICAgIGVudHJpZXMuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHBhcmFtIHsqfSBrZXlcclxuICAgICAgICAgKiBAcmV0dXJucyB7dm9pZH1cclxuICAgICAgICAgKi9cclxuICAgICAgICBjbGFzc18xLnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgICAgIHJldHVybiAhIX5nZXRJbmRleCh0aGlzLl9fZW50cmllc19fLCBrZXkpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHJldHVybnMge3ZvaWR9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY2xhc3NfMS5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX19lbnRyaWVzX18uc3BsaWNlKDApO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcclxuICAgICAgICAgKiBAcGFyYW0geyp9IFtjdHg9bnVsbF1cclxuICAgICAgICAgKiBAcmV0dXJucyB7dm9pZH1cclxuICAgICAgICAgKi9cclxuICAgICAgICBjbGFzc18xLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24gKGNhbGxiYWNrLCBjdHgpIHtcclxuICAgICAgICAgICAgaWYgKGN0eCA9PT0gdm9pZCAwKSB7IGN0eCA9IG51bGw7IH1cclxuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IHRoaXMuX19lbnRyaWVzX187IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZW50cnkgPSBfYVtfaV07XHJcbiAgICAgICAgICAgICAgICBjYWxsYmFjay5jYWxsKGN0eCwgZW50cnlbMV0sIGVudHJ5WzBdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIGNsYXNzXzE7XHJcbiAgICB9KCkpO1xyXG59KSgpO1xuXG4vKipcclxuICogRGV0ZWN0cyB3aGV0aGVyIHdpbmRvdyBhbmQgZG9jdW1lbnQgb2JqZWN0cyBhcmUgYXZhaWxhYmxlIGluIGN1cnJlbnQgZW52aXJvbm1lbnQuXHJcbiAqL1xyXG52YXIgaXNCcm93c2VyID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuZG9jdW1lbnQgPT09IGRvY3VtZW50O1xuXG4vLyBSZXR1cm5zIGdsb2JhbCBvYmplY3Qgb2YgYSBjdXJyZW50IGVudmlyb25tZW50LlxyXG52YXIgZ2xvYmFsJDEgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgaWYgKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnICYmIGdsb2JhbC5NYXRoID09PSBNYXRoKSB7XHJcbiAgICAgICAgcmV0dXJuIGdsb2JhbDtcclxuICAgIH1cclxuICAgIGlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgJiYgc2VsZi5NYXRoID09PSBNYXRoKSB7XHJcbiAgICAgICAgcmV0dXJuIHNlbGY7XHJcbiAgICB9XHJcbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Lk1hdGggPT09IE1hdGgpIHtcclxuICAgICAgICByZXR1cm4gd2luZG93O1xyXG4gICAgfVxyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXHJcbiAgICByZXR1cm4gRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcclxufSkoKTtcblxuLyoqXHJcbiAqIEEgc2hpbSBmb3IgdGhlIHJlcXVlc3RBbmltYXRpb25GcmFtZSB3aGljaCBmYWxscyBiYWNrIHRvIHRoZSBzZXRUaW1lb3V0IGlmXHJcbiAqIGZpcnN0IG9uZSBpcyBub3Qgc3VwcG9ydGVkLlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXF1ZXN0cycgaWRlbnRpZmllci5cclxuICovXHJcbnZhciByZXF1ZXN0QW5pbWF0aW9uRnJhbWUkMSA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBpZiAodHlwZW9mIHJlcXVlc3RBbmltYXRpb25GcmFtZSA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgIC8vIEl0J3MgcmVxdWlyZWQgdG8gdXNlIGEgYm91bmRlZCBmdW5jdGlvbiBiZWNhdXNlIElFIHNvbWV0aW1lcyB0aHJvd3NcclxuICAgICAgICAvLyBhbiBcIkludmFsaWQgY2FsbGluZyBvYmplY3RcIiBlcnJvciBpZiByQUYgaXMgaW52b2tlZCB3aXRob3V0IHRoZSBnbG9iYWxcclxuICAgICAgICAvLyBvYmplY3Qgb24gdGhlIGxlZnQgaGFuZCBzaWRlLlxyXG4gICAgICAgIHJldHVybiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUuYmluZChnbG9iYWwkMSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKGNhbGxiYWNrKSB7IHJldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNhbGxiYWNrKERhdGUubm93KCkpOyB9LCAxMDAwIC8gNjApOyB9O1xyXG59KSgpO1xuXG4vLyBEZWZpbmVzIG1pbmltdW0gdGltZW91dCBiZWZvcmUgYWRkaW5nIGEgdHJhaWxpbmcgY2FsbC5cclxudmFyIHRyYWlsaW5nVGltZW91dCA9IDI7XHJcbi8qKlxyXG4gKiBDcmVhdGVzIGEgd3JhcHBlciBmdW5jdGlvbiB3aGljaCBlbnN1cmVzIHRoYXQgcHJvdmlkZWQgY2FsbGJhY2sgd2lsbCBiZVxyXG4gKiBpbnZva2VkIG9ubHkgb25jZSBkdXJpbmcgdGhlIHNwZWNpZmllZCBkZWxheSBwZXJpb2QuXHJcbiAqXHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIC0gRnVuY3Rpb24gdG8gYmUgaW52b2tlZCBhZnRlciB0aGUgZGVsYXkgcGVyaW9kLlxyXG4gKiBAcGFyYW0ge251bWJlcn0gZGVsYXkgLSBEZWxheSBhZnRlciB3aGljaCB0byBpbnZva2UgY2FsbGJhY2suXHJcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn1cclxuICovXHJcbmZ1bmN0aW9uIHRocm90dGxlIChjYWxsYmFjaywgZGVsYXkpIHtcclxuICAgIHZhciBsZWFkaW5nQ2FsbCA9IGZhbHNlLCB0cmFpbGluZ0NhbGwgPSBmYWxzZSwgbGFzdENhbGxUaW1lID0gMDtcclxuICAgIC8qKlxyXG4gICAgICogSW52b2tlcyB0aGUgb3JpZ2luYWwgY2FsbGJhY2sgZnVuY3Rpb24gYW5kIHNjaGVkdWxlcyBuZXcgaW52b2NhdGlvbiBpZlxyXG4gICAgICogdGhlIFwicHJveHlcIiB3YXMgY2FsbGVkIGR1cmluZyBjdXJyZW50IHJlcXVlc3QuXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybnMge3ZvaWR9XHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIHJlc29sdmVQZW5kaW5nKCkge1xyXG4gICAgICAgIGlmIChsZWFkaW5nQ2FsbCkge1xyXG4gICAgICAgICAgICBsZWFkaW5nQ2FsbCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBjYWxsYmFjaygpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodHJhaWxpbmdDYWxsKSB7XHJcbiAgICAgICAgICAgIHByb3h5KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDYWxsYmFjayBpbnZva2VkIGFmdGVyIHRoZSBzcGVjaWZpZWQgZGVsYXkuIEl0IHdpbGwgZnVydGhlciBwb3N0cG9uZVxyXG4gICAgICogaW52b2NhdGlvbiBvZiB0aGUgb3JpZ2luYWwgZnVuY3Rpb24gZGVsZWdhdGluZyBpdCB0byB0aGVcclxuICAgICAqIHJlcXVlc3RBbmltYXRpb25GcmFtZS5cclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJucyB7dm9pZH1cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gdGltZW91dENhbGxiYWNrKCkge1xyXG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSQxKHJlc29sdmVQZW5kaW5nKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogU2NoZWR1bGVzIGludm9jYXRpb24gb2YgdGhlIG9yaWdpbmFsIGZ1bmN0aW9uLlxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm5zIHt2b2lkfVxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBwcm94eSgpIHtcclxuICAgICAgICB2YXIgdGltZVN0YW1wID0gRGF0ZS5ub3coKTtcclxuICAgICAgICBpZiAobGVhZGluZ0NhbGwpIHtcclxuICAgICAgICAgICAgLy8gUmVqZWN0IGltbWVkaWF0ZWx5IGZvbGxvd2luZyBjYWxscy5cclxuICAgICAgICAgICAgaWYgKHRpbWVTdGFtcCAtIGxhc3RDYWxsVGltZSA8IHRyYWlsaW5nVGltZW91dCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIFNjaGVkdWxlIG5ldyBjYWxsIHRvIGJlIGluIGludm9rZWQgd2hlbiB0aGUgcGVuZGluZyBvbmUgaXMgcmVzb2x2ZWQuXHJcbiAgICAgICAgICAgIC8vIFRoaXMgaXMgaW1wb3J0YW50IGZvciBcInRyYW5zaXRpb25zXCIgd2hpY2ggbmV2ZXIgYWN0dWFsbHkgc3RhcnRcclxuICAgICAgICAgICAgLy8gaW1tZWRpYXRlbHkgc28gdGhlcmUgaXMgYSBjaGFuY2UgdGhhdCB3ZSBtaWdodCBtaXNzIG9uZSBpZiBjaGFuZ2VcclxuICAgICAgICAgICAgLy8gaGFwcGVucyBhbWlkcyB0aGUgcGVuZGluZyBpbnZvY2F0aW9uLlxyXG4gICAgICAgICAgICB0cmFpbGluZ0NhbGwgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgbGVhZGluZ0NhbGwgPSB0cnVlO1xyXG4gICAgICAgICAgICB0cmFpbGluZ0NhbGwgPSBmYWxzZTtcclxuICAgICAgICAgICAgc2V0VGltZW91dCh0aW1lb3V0Q2FsbGJhY2ssIGRlbGF5KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGFzdENhbGxUaW1lID0gdGltZVN0YW1wO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHByb3h5O1xyXG59XG5cbi8vIE1pbmltdW0gZGVsYXkgYmVmb3JlIGludm9raW5nIHRoZSB1cGRhdGUgb2Ygb2JzZXJ2ZXJzLlxyXG52YXIgUkVGUkVTSF9ERUxBWSA9IDIwO1xyXG4vLyBBIGxpc3Qgb2Ygc3Vic3RyaW5ncyBvZiBDU1MgcHJvcGVydGllcyB1c2VkIHRvIGZpbmQgdHJhbnNpdGlvbiBldmVudHMgdGhhdFxyXG4vLyBtaWdodCBhZmZlY3QgZGltZW5zaW9ucyBvZiBvYnNlcnZlZCBlbGVtZW50cy5cclxudmFyIHRyYW5zaXRpb25LZXlzID0gWyd0b3AnLCAncmlnaHQnLCAnYm90dG9tJywgJ2xlZnQnLCAnd2lkdGgnLCAnaGVpZ2h0JywgJ3NpemUnLCAnd2VpZ2h0J107XHJcbi8vIENoZWNrIGlmIE11dGF0aW9uT2JzZXJ2ZXIgaXMgYXZhaWxhYmxlLlxyXG52YXIgbXV0YXRpb25PYnNlcnZlclN1cHBvcnRlZCA9IHR5cGVvZiBNdXRhdGlvbk9ic2VydmVyICE9PSAndW5kZWZpbmVkJztcclxuLyoqXHJcbiAqIFNpbmdsZXRvbiBjb250cm9sbGVyIGNsYXNzIHdoaWNoIGhhbmRsZXMgdXBkYXRlcyBvZiBSZXNpemVPYnNlcnZlciBpbnN0YW5jZXMuXHJcbiAqL1xyXG52YXIgUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIFJlc2l6ZU9ic2VydmVyQ29udHJvbGxlci5cclxuICAgICAqXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBSZXNpemVPYnNlcnZlckNvbnRyb2xsZXIoKSB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogSW5kaWNhdGVzIHdoZXRoZXIgRE9NIGxpc3RlbmVycyBoYXZlIGJlZW4gYWRkZWQuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcHJpdmF0ZSB7Ym9vbGVhbn1cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLmNvbm5lY3RlZF8gPSBmYWxzZTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUZWxscyB0aGF0IGNvbnRyb2xsZXIgaGFzIHN1YnNjcmliZWQgZm9yIE11dGF0aW9uIEV2ZW50cy5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBwcml2YXRlIHtib29sZWFufVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMubXV0YXRpb25FdmVudHNBZGRlZF8gPSBmYWxzZTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBLZWVwcyByZWZlcmVuY2UgdG8gdGhlIGluc3RhbmNlIG9mIE11dGF0aW9uT2JzZXJ2ZXIuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcHJpdmF0ZSB7TXV0YXRpb25PYnNlcnZlcn1cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLm11dGF0aW9uc09ic2VydmVyXyA9IG51bGw7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQSBsaXN0IG9mIGNvbm5lY3RlZCBvYnNlcnZlcnMuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcHJpdmF0ZSB7QXJyYXk8UmVzaXplT2JzZXJ2ZXJTUEk+fVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMub2JzZXJ2ZXJzXyA9IFtdO1xyXG4gICAgICAgIHRoaXMub25UcmFuc2l0aW9uRW5kXyA9IHRoaXMub25UcmFuc2l0aW9uRW5kXy5iaW5kKHRoaXMpO1xyXG4gICAgICAgIHRoaXMucmVmcmVzaCA9IHRocm90dGxlKHRoaXMucmVmcmVzaC5iaW5kKHRoaXMpLCBSRUZSRVNIX0RFTEFZKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQWRkcyBvYnNlcnZlciB0byBvYnNlcnZlcnMgbGlzdC5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge1Jlc2l6ZU9ic2VydmVyU1BJfSBvYnNlcnZlciAtIE9ic2VydmVyIHRvIGJlIGFkZGVkLlxyXG4gICAgICogQHJldHVybnMge3ZvaWR9XHJcbiAgICAgKi9cclxuICAgIFJlc2l6ZU9ic2VydmVyQ29udHJvbGxlci5wcm90b3R5cGUuYWRkT2JzZXJ2ZXIgPSBmdW5jdGlvbiAob2JzZXJ2ZXIpIHtcclxuICAgICAgICBpZiAoIX50aGlzLm9ic2VydmVyc18uaW5kZXhPZihvYnNlcnZlcikpIHtcclxuICAgICAgICAgICAgdGhpcy5vYnNlcnZlcnNfLnB1c2gob2JzZXJ2ZXIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBBZGQgbGlzdGVuZXJzIGlmIHRoZXkgaGF2ZW4ndCBiZWVuIGFkZGVkIHlldC5cclxuICAgICAgICBpZiAoIXRoaXMuY29ubmVjdGVkXykge1xyXG4gICAgICAgICAgICB0aGlzLmNvbm5lY3RfKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUmVtb3ZlcyBvYnNlcnZlciBmcm9tIG9ic2VydmVycyBsaXN0LlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7UmVzaXplT2JzZXJ2ZXJTUEl9IG9ic2VydmVyIC0gT2JzZXJ2ZXIgdG8gYmUgcmVtb3ZlZC5cclxuICAgICAqIEByZXR1cm5zIHt2b2lkfVxyXG4gICAgICovXHJcbiAgICBSZXNpemVPYnNlcnZlckNvbnRyb2xsZXIucHJvdG90eXBlLnJlbW92ZU9ic2VydmVyID0gZnVuY3Rpb24gKG9ic2VydmVyKSB7XHJcbiAgICAgICAgdmFyIG9ic2VydmVycyA9IHRoaXMub2JzZXJ2ZXJzXztcclxuICAgICAgICB2YXIgaW5kZXggPSBvYnNlcnZlcnMuaW5kZXhPZihvYnNlcnZlcik7XHJcbiAgICAgICAgLy8gUmVtb3ZlIG9ic2VydmVyIGlmIGl0J3MgcHJlc2VudCBpbiByZWdpc3RyeS5cclxuICAgICAgICBpZiAofmluZGV4KSB7XHJcbiAgICAgICAgICAgIG9ic2VydmVycy5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBSZW1vdmUgbGlzdGVuZXJzIGlmIGNvbnRyb2xsZXIgaGFzIG5vIGNvbm5lY3RlZCBvYnNlcnZlcnMuXHJcbiAgICAgICAgaWYgKCFvYnNlcnZlcnMubGVuZ3RoICYmIHRoaXMuY29ubmVjdGVkXykge1xyXG4gICAgICAgICAgICB0aGlzLmRpc2Nvbm5lY3RfKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogSW52b2tlcyB0aGUgdXBkYXRlIG9mIG9ic2VydmVycy4gSXQgd2lsbCBjb250aW51ZSBydW5uaW5nIHVwZGF0ZXMgaW5zb2ZhclxyXG4gICAgICogaXQgZGV0ZWN0cyBjaGFuZ2VzLlxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm5zIHt2b2lkfVxyXG4gICAgICovXHJcbiAgICBSZXNpemVPYnNlcnZlckNvbnRyb2xsZXIucHJvdG90eXBlLnJlZnJlc2ggPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGNoYW5nZXNEZXRlY3RlZCA9IHRoaXMudXBkYXRlT2JzZXJ2ZXJzXygpO1xyXG4gICAgICAgIC8vIENvbnRpbnVlIHJ1bm5pbmcgdXBkYXRlcyBpZiBjaGFuZ2VzIGhhdmUgYmVlbiBkZXRlY3RlZCBhcyB0aGVyZSBtaWdodFxyXG4gICAgICAgIC8vIGJlIGZ1dHVyZSBvbmVzIGNhdXNlZCBieSBDU1MgdHJhbnNpdGlvbnMuXHJcbiAgICAgICAgaWYgKGNoYW5nZXNEZXRlY3RlZCkge1xyXG4gICAgICAgICAgICB0aGlzLnJlZnJlc2goKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBVcGRhdGVzIGV2ZXJ5IG9ic2VydmVyIGZyb20gb2JzZXJ2ZXJzIGxpc3QgYW5kIG5vdGlmaWVzIHRoZW0gb2YgcXVldWVkXHJcbiAgICAgKiBlbnRyaWVzLlxyXG4gICAgICpcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBcInRydWVcIiBpZiBhbnkgb2JzZXJ2ZXIgaGFzIGRldGVjdGVkIGNoYW5nZXMgaW5cclxuICAgICAqICAgICAgZGltZW5zaW9ucyBvZiBpdCdzIGVsZW1lbnRzLlxyXG4gICAgICovXHJcbiAgICBSZXNpemVPYnNlcnZlckNvbnRyb2xsZXIucHJvdG90eXBlLnVwZGF0ZU9ic2VydmVyc18gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgLy8gQ29sbGVjdCBvYnNlcnZlcnMgdGhhdCBoYXZlIGFjdGl2ZSBvYnNlcnZhdGlvbnMuXHJcbiAgICAgICAgdmFyIGFjdGl2ZU9ic2VydmVycyA9IHRoaXMub2JzZXJ2ZXJzXy5maWx0ZXIoZnVuY3Rpb24gKG9ic2VydmVyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBvYnNlcnZlci5nYXRoZXJBY3RpdmUoKSwgb2JzZXJ2ZXIuaGFzQWN0aXZlKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLy8gRGVsaXZlciBub3RpZmljYXRpb25zIGluIGEgc2VwYXJhdGUgY3ljbGUgaW4gb3JkZXIgdG8gYXZvaWQgYW55XHJcbiAgICAgICAgLy8gY29sbGlzaW9ucyBiZXR3ZWVuIG9ic2VydmVycywgZS5nLiB3aGVuIG11bHRpcGxlIGluc3RhbmNlcyBvZlxyXG4gICAgICAgIC8vIFJlc2l6ZU9ic2VydmVyIGFyZSB0cmFja2luZyB0aGUgc2FtZSBlbGVtZW50IGFuZCB0aGUgY2FsbGJhY2sgb2Ygb25lXHJcbiAgICAgICAgLy8gb2YgdGhlbSBjaGFuZ2VzIGNvbnRlbnQgZGltZW5zaW9ucyBvZiB0aGUgb2JzZXJ2ZWQgdGFyZ2V0LiBTb21ldGltZXNcclxuICAgICAgICAvLyB0aGlzIG1heSByZXN1bHQgaW4gbm90aWZpY2F0aW9ucyBiZWluZyBibG9ja2VkIGZvciB0aGUgcmVzdCBvZiBvYnNlcnZlcnMuXHJcbiAgICAgICAgYWN0aXZlT2JzZXJ2ZXJzLmZvckVhY2goZnVuY3Rpb24gKG9ic2VydmVyKSB7IHJldHVybiBvYnNlcnZlci5icm9hZGNhc3RBY3RpdmUoKTsgfSk7XHJcbiAgICAgICAgcmV0dXJuIGFjdGl2ZU9ic2VydmVycy5sZW5ndGggPiAwO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogSW5pdGlhbGl6ZXMgRE9NIGxpc3RlbmVycy5cclxuICAgICAqXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICogQHJldHVybnMge3ZvaWR9XHJcbiAgICAgKi9cclxuICAgIFJlc2l6ZU9ic2VydmVyQ29udHJvbGxlci5wcm90b3R5cGUuY29ubmVjdF8gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgLy8gRG8gbm90aGluZyBpZiBydW5uaW5nIGluIGEgbm9uLWJyb3dzZXIgZW52aXJvbm1lbnQgb3IgaWYgbGlzdGVuZXJzXHJcbiAgICAgICAgLy8gaGF2ZSBiZWVuIGFscmVhZHkgYWRkZWQuXHJcbiAgICAgICAgaWYgKCFpc0Jyb3dzZXIgfHwgdGhpcy5jb25uZWN0ZWRfKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gU3Vic2NyaXB0aW9uIHRvIHRoZSBcIlRyYW5zaXRpb25lbmRcIiBldmVudCBpcyB1c2VkIGFzIGEgd29ya2Fyb3VuZCBmb3JcclxuICAgICAgICAvLyBkZWxheWVkIHRyYW5zaXRpb25zLiBUaGlzIHdheSBpdCdzIHBvc3NpYmxlIHRvIGNhcHR1cmUgYXQgbGVhc3QgdGhlXHJcbiAgICAgICAgLy8gZmluYWwgc3RhdGUgb2YgYW4gZWxlbWVudC5cclxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgdGhpcy5vblRyYW5zaXRpb25FbmRfKTtcclxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5yZWZyZXNoKTtcclxuICAgICAgICBpZiAobXV0YXRpb25PYnNlcnZlclN1cHBvcnRlZCkge1xyXG4gICAgICAgICAgICB0aGlzLm11dGF0aW9uc09ic2VydmVyXyA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKHRoaXMucmVmcmVzaCk7XHJcbiAgICAgICAgICAgIHRoaXMubXV0YXRpb25zT2JzZXJ2ZXJfLm9ic2VydmUoZG9jdW1lbnQsIHtcclxuICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXM6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBjaGlsZExpc3Q6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBjaGFyYWN0ZXJEYXRhOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgc3VidHJlZTogdHJ1ZVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTVN1YnRyZWVNb2RpZmllZCcsIHRoaXMucmVmcmVzaCk7XHJcbiAgICAgICAgICAgIHRoaXMubXV0YXRpb25FdmVudHNBZGRlZF8gPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmNvbm5lY3RlZF8gPSB0cnVlO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUmVtb3ZlcyBET00gbGlzdGVuZXJzLlxyXG4gICAgICpcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKiBAcmV0dXJucyB7dm9pZH1cclxuICAgICAqL1xyXG4gICAgUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyLnByb3RvdHlwZS5kaXNjb25uZWN0XyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAvLyBEbyBub3RoaW5nIGlmIHJ1bm5pbmcgaW4gYSBub24tYnJvd3NlciBlbnZpcm9ubWVudCBvciBpZiBsaXN0ZW5lcnNcclxuICAgICAgICAvLyBoYXZlIGJlZW4gYWxyZWFkeSByZW1vdmVkLlxyXG4gICAgICAgIGlmICghaXNCcm93c2VyIHx8ICF0aGlzLmNvbm5lY3RlZF8pIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgdGhpcy5vblRyYW5zaXRpb25FbmRfKTtcclxuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5yZWZyZXNoKTtcclxuICAgICAgICBpZiAodGhpcy5tdXRhdGlvbnNPYnNlcnZlcl8pIHtcclxuICAgICAgICAgICAgdGhpcy5tdXRhdGlvbnNPYnNlcnZlcl8uZGlzY29ubmVjdCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5tdXRhdGlvbkV2ZW50c0FkZGVkXykge1xyXG4gICAgICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdET01TdWJ0cmVlTW9kaWZpZWQnLCB0aGlzLnJlZnJlc2gpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLm11dGF0aW9uc09ic2VydmVyXyA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5tdXRhdGlvbkV2ZW50c0FkZGVkXyA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuY29ubmVjdGVkXyA9IGZhbHNlO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogXCJUcmFuc2l0aW9uZW5kXCIgZXZlbnQgaGFuZGxlci5cclxuICAgICAqXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICogQHBhcmFtIHtUcmFuc2l0aW9uRXZlbnR9IGV2ZW50XHJcbiAgICAgKiBAcmV0dXJucyB7dm9pZH1cclxuICAgICAqL1xyXG4gICAgUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyLnByb3RvdHlwZS5vblRyYW5zaXRpb25FbmRfID0gZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgdmFyIF9iID0gX2EucHJvcGVydHlOYW1lLCBwcm9wZXJ0eU5hbWUgPSBfYiA9PT0gdm9pZCAwID8gJycgOiBfYjtcclxuICAgICAgICAvLyBEZXRlY3Qgd2hldGhlciB0cmFuc2l0aW9uIG1heSBhZmZlY3QgZGltZW5zaW9ucyBvZiBhbiBlbGVtZW50LlxyXG4gICAgICAgIHZhciBpc1JlZmxvd1Byb3BlcnR5ID0gdHJhbnNpdGlvbktleXMuc29tZShmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgICAgIHJldHVybiAhIX5wcm9wZXJ0eU5hbWUuaW5kZXhPZihrZXkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGlmIChpc1JlZmxvd1Byb3BlcnR5KSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVmcmVzaCgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgaW5zdGFuY2Ugb2YgdGhlIFJlc2l6ZU9ic2VydmVyQ29udHJvbGxlci5cclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJucyB7UmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyfVxyXG4gICAgICovXHJcbiAgICBSZXNpemVPYnNlcnZlckNvbnRyb2xsZXIuZ2V0SW5zdGFuY2UgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmluc3RhbmNlXykge1xyXG4gICAgICAgICAgICB0aGlzLmluc3RhbmNlXyA9IG5ldyBSZXNpemVPYnNlcnZlckNvbnRyb2xsZXIoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5zdGFuY2VfO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogSG9sZHMgcmVmZXJlbmNlIHRvIHRoZSBjb250cm9sbGVyJ3MgaW5zdGFuY2UuXHJcbiAgICAgKlxyXG4gICAgICogQHByaXZhdGUge1Jlc2l6ZU9ic2VydmVyQ29udHJvbGxlcn1cclxuICAgICAqL1xyXG4gICAgUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyLmluc3RhbmNlXyA9IG51bGw7XHJcbiAgICByZXR1cm4gUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyO1xyXG59KCkpO1xuXG4vKipcclxuICogRGVmaW5lcyBub24td3JpdGFibGUvZW51bWVyYWJsZSBwcm9wZXJ0aWVzIG9mIHRoZSBwcm92aWRlZCB0YXJnZXQgb2JqZWN0LlxyXG4gKlxyXG4gKiBAcGFyYW0ge09iamVjdH0gdGFyZ2V0IC0gT2JqZWN0IGZvciB3aGljaCB0byBkZWZpbmUgcHJvcGVydGllcy5cclxuICogQHBhcmFtIHtPYmplY3R9IHByb3BzIC0gUHJvcGVydGllcyB0byBiZSBkZWZpbmVkLlxyXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUYXJnZXQgb2JqZWN0LlxyXG4gKi9cclxudmFyIGRlZmluZUNvbmZpZ3VyYWJsZSA9IChmdW5jdGlvbiAodGFyZ2V0LCBwcm9wcykge1xyXG4gICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IE9iamVjdC5rZXlzKHByb3BzKTsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICB2YXIga2V5ID0gX2FbX2ldO1xyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwge1xyXG4gICAgICAgICAgICB2YWx1ZTogcHJvcHNba2V5XSxcclxuICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgICAgIHdyaXRhYmxlOiBmYWxzZSxcclxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGFyZ2V0O1xyXG59KTtcblxuLyoqXHJcbiAqIFJldHVybnMgdGhlIGdsb2JhbCBvYmplY3QgYXNzb2NpYXRlZCB3aXRoIHByb3ZpZGVkIGVsZW1lbnQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSB0YXJnZXRcclxuICogQHJldHVybnMge09iamVjdH1cclxuICovXHJcbnZhciBnZXRXaW5kb3dPZiA9IChmdW5jdGlvbiAodGFyZ2V0KSB7XHJcbiAgICAvLyBBc3N1bWUgdGhhdCB0aGUgZWxlbWVudCBpcyBhbiBpbnN0YW5jZSBvZiBOb2RlLCB3aGljaCBtZWFucyB0aGF0IGl0XHJcbiAgICAvLyBoYXMgdGhlIFwib3duZXJEb2N1bWVudFwiIHByb3BlcnR5IGZyb20gd2hpY2ggd2UgY2FuIHJldHJpZXZlIGFcclxuICAgIC8vIGNvcnJlc3BvbmRpbmcgZ2xvYmFsIG9iamVjdC5cclxuICAgIHZhciBvd25lckdsb2JhbCA9IHRhcmdldCAmJiB0YXJnZXQub3duZXJEb2N1bWVudCAmJiB0YXJnZXQub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldztcclxuICAgIC8vIFJldHVybiB0aGUgbG9jYWwgZ2xvYmFsIG9iamVjdCBpZiBpdCdzIG5vdCBwb3NzaWJsZSBleHRyYWN0IG9uZSBmcm9tXHJcbiAgICAvLyBwcm92aWRlZCBlbGVtZW50LlxyXG4gICAgcmV0dXJuIG93bmVyR2xvYmFsIHx8IGdsb2JhbCQxO1xyXG59KTtcblxuLy8gUGxhY2Vob2xkZXIgb2YgYW4gZW1wdHkgY29udGVudCByZWN0YW5nbGUuXHJcbnZhciBlbXB0eVJlY3QgPSBjcmVhdGVSZWN0SW5pdCgwLCAwLCAwLCAwKTtcclxuLyoqXHJcbiAqIENvbnZlcnRzIHByb3ZpZGVkIHN0cmluZyB0byBhIG51bWJlci5cclxuICpcclxuICogQHBhcmFtIHtudW1iZXJ8c3RyaW5nfSB2YWx1ZVxyXG4gKiBAcmV0dXJucyB7bnVtYmVyfVxyXG4gKi9cclxuZnVuY3Rpb24gdG9GbG9hdCh2YWx1ZSkge1xyXG4gICAgcmV0dXJuIHBhcnNlRmxvYXQodmFsdWUpIHx8IDA7XHJcbn1cclxuLyoqXHJcbiAqIEV4dHJhY3RzIGJvcmRlcnMgc2l6ZSBmcm9tIHByb3ZpZGVkIHN0eWxlcy5cclxuICpcclxuICogQHBhcmFtIHtDU1NTdHlsZURlY2xhcmF0aW9ufSBzdHlsZXNcclxuICogQHBhcmFtIHsuLi5zdHJpbmd9IHBvc2l0aW9ucyAtIEJvcmRlcnMgcG9zaXRpb25zICh0b3AsIHJpZ2h0LCAuLi4pXHJcbiAqIEByZXR1cm5zIHtudW1iZXJ9XHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRCb3JkZXJzU2l6ZShzdHlsZXMpIHtcclxuICAgIHZhciBwb3NpdGlvbnMgPSBbXTtcclxuICAgIGZvciAodmFyIF9pID0gMTsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgcG9zaXRpb25zW19pIC0gMV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHBvc2l0aW9ucy5yZWR1Y2UoZnVuY3Rpb24gKHNpemUsIHBvc2l0aW9uKSB7XHJcbiAgICAgICAgdmFyIHZhbHVlID0gc3R5bGVzWydib3JkZXItJyArIHBvc2l0aW9uICsgJy13aWR0aCddO1xyXG4gICAgICAgIHJldHVybiBzaXplICsgdG9GbG9hdCh2YWx1ZSk7XHJcbiAgICB9LCAwKTtcclxufVxyXG4vKipcclxuICogRXh0cmFjdHMgcGFkZGluZ3Mgc2l6ZXMgZnJvbSBwcm92aWRlZCBzdHlsZXMuXHJcbiAqXHJcbiAqIEBwYXJhbSB7Q1NTU3R5bGVEZWNsYXJhdGlvbn0gc3R5bGVzXHJcbiAqIEByZXR1cm5zIHtPYmplY3R9IFBhZGRpbmdzIGJveC5cclxuICovXHJcbmZ1bmN0aW9uIGdldFBhZGRpbmdzKHN0eWxlcykge1xyXG4gICAgdmFyIHBvc2l0aW9ucyA9IFsndG9wJywgJ3JpZ2h0JywgJ2JvdHRvbScsICdsZWZ0J107XHJcbiAgICB2YXIgcGFkZGluZ3MgPSB7fTtcclxuICAgIGZvciAodmFyIF9pID0gMCwgcG9zaXRpb25zXzEgPSBwb3NpdGlvbnM7IF9pIDwgcG9zaXRpb25zXzEubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgdmFyIHBvc2l0aW9uID0gcG9zaXRpb25zXzFbX2ldO1xyXG4gICAgICAgIHZhciB2YWx1ZSA9IHN0eWxlc1sncGFkZGluZy0nICsgcG9zaXRpb25dO1xyXG4gICAgICAgIHBhZGRpbmdzW3Bvc2l0aW9uXSA9IHRvRmxvYXQodmFsdWUpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHBhZGRpbmdzO1xyXG59XHJcbi8qKlxyXG4gKiBDYWxjdWxhdGVzIGNvbnRlbnQgcmVjdGFuZ2xlIG9mIHByb3ZpZGVkIFNWRyBlbGVtZW50LlxyXG4gKlxyXG4gKiBAcGFyYW0ge1NWR0dyYXBoaWNzRWxlbWVudH0gdGFyZ2V0IC0gRWxlbWVudCBjb250ZW50IHJlY3RhbmdsZSBvZiB3aGljaCBuZWVkc1xyXG4gKiAgICAgIHRvIGJlIGNhbGN1bGF0ZWQuXHJcbiAqIEByZXR1cm5zIHtET01SZWN0SW5pdH1cclxuICovXHJcbmZ1bmN0aW9uIGdldFNWR0NvbnRlbnRSZWN0KHRhcmdldCkge1xyXG4gICAgdmFyIGJib3ggPSB0YXJnZXQuZ2V0QkJveCgpO1xyXG4gICAgcmV0dXJuIGNyZWF0ZVJlY3RJbml0KDAsIDAsIGJib3gud2lkdGgsIGJib3guaGVpZ2h0KTtcclxufVxyXG4vKipcclxuICogQ2FsY3VsYXRlcyBjb250ZW50IHJlY3RhbmdsZSBvZiBwcm92aWRlZCBIVE1MRWxlbWVudC5cclxuICpcclxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gdGFyZ2V0IC0gRWxlbWVudCBmb3Igd2hpY2ggdG8gY2FsY3VsYXRlIHRoZSBjb250ZW50IHJlY3RhbmdsZS5cclxuICogQHJldHVybnMge0RPTVJlY3RJbml0fVxyXG4gKi9cclxuZnVuY3Rpb24gZ2V0SFRNTEVsZW1lbnRDb250ZW50UmVjdCh0YXJnZXQpIHtcclxuICAgIC8vIENsaWVudCB3aWR0aCAmIGhlaWdodCBwcm9wZXJ0aWVzIGNhbid0IGJlXHJcbiAgICAvLyB1c2VkIGV4Y2x1c2l2ZWx5IGFzIHRoZXkgcHJvdmlkZSByb3VuZGVkIHZhbHVlcy5cclxuICAgIHZhciBjbGllbnRXaWR0aCA9IHRhcmdldC5jbGllbnRXaWR0aCwgY2xpZW50SGVpZ2h0ID0gdGFyZ2V0LmNsaWVudEhlaWdodDtcclxuICAgIC8vIEJ5IHRoaXMgY29uZGl0aW9uIHdlIGNhbiBjYXRjaCBhbGwgbm9uLXJlcGxhY2VkIGlubGluZSwgaGlkZGVuIGFuZFxyXG4gICAgLy8gZGV0YWNoZWQgZWxlbWVudHMuIFRob3VnaCBlbGVtZW50cyB3aXRoIHdpZHRoICYgaGVpZ2h0IHByb3BlcnRpZXMgbGVzc1xyXG4gICAgLy8gdGhhbiAwLjUgd2lsbCBiZSBkaXNjYXJkZWQgYXMgd2VsbC5cclxuICAgIC8vXHJcbiAgICAvLyBXaXRob3V0IGl0IHdlIHdvdWxkIG5lZWQgdG8gaW1wbGVtZW50IHNlcGFyYXRlIG1ldGhvZHMgZm9yIGVhY2ggb2ZcclxuICAgIC8vIHRob3NlIGNhc2VzIGFuZCBpdCdzIG5vdCBwb3NzaWJsZSB0byBwZXJmb3JtIGEgcHJlY2lzZSBhbmQgcGVyZm9ybWFuY2VcclxuICAgIC8vIGVmZmVjdGl2ZSB0ZXN0IGZvciBoaWRkZW4gZWxlbWVudHMuIEUuZy4gZXZlbiBqUXVlcnkncyAnOnZpc2libGUnIGZpbHRlclxyXG4gICAgLy8gZ2l2ZXMgd3JvbmcgcmVzdWx0cyBmb3IgZWxlbWVudHMgd2l0aCB3aWR0aCAmIGhlaWdodCBsZXNzIHRoYW4gMC41LlxyXG4gICAgaWYgKCFjbGllbnRXaWR0aCAmJiAhY2xpZW50SGVpZ2h0KSB7XHJcbiAgICAgICAgcmV0dXJuIGVtcHR5UmVjdDtcclxuICAgIH1cclxuICAgIHZhciBzdHlsZXMgPSBnZXRXaW5kb3dPZih0YXJnZXQpLmdldENvbXB1dGVkU3R5bGUodGFyZ2V0KTtcclxuICAgIHZhciBwYWRkaW5ncyA9IGdldFBhZGRpbmdzKHN0eWxlcyk7XHJcbiAgICB2YXIgaG9yaXpQYWQgPSBwYWRkaW5ncy5sZWZ0ICsgcGFkZGluZ3MucmlnaHQ7XHJcbiAgICB2YXIgdmVydFBhZCA9IHBhZGRpbmdzLnRvcCArIHBhZGRpbmdzLmJvdHRvbTtcclxuICAgIC8vIENvbXB1dGVkIHN0eWxlcyBvZiB3aWR0aCAmIGhlaWdodCBhcmUgYmVpbmcgdXNlZCBiZWNhdXNlIHRoZXkgYXJlIHRoZVxyXG4gICAgLy8gb25seSBkaW1lbnNpb25zIGF2YWlsYWJsZSB0byBKUyB0aGF0IGNvbnRhaW4gbm9uLXJvdW5kZWQgdmFsdWVzLiBJdCBjb3VsZFxyXG4gICAgLy8gYmUgcG9zc2libGUgdG8gdXRpbGl6ZSB0aGUgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGlmIG9ubHkgaXQncyBkYXRhIHdhc24ndFxyXG4gICAgLy8gYWZmZWN0ZWQgYnkgQ1NTIHRyYW5zZm9ybWF0aW9ucyBsZXQgYWxvbmUgcGFkZGluZ3MsIGJvcmRlcnMgYW5kIHNjcm9sbCBiYXJzLlxyXG4gICAgdmFyIHdpZHRoID0gdG9GbG9hdChzdHlsZXMud2lkdGgpLCBoZWlnaHQgPSB0b0Zsb2F0KHN0eWxlcy5oZWlnaHQpO1xyXG4gICAgLy8gV2lkdGggJiBoZWlnaHQgaW5jbHVkZSBwYWRkaW5ncyBhbmQgYm9yZGVycyB3aGVuIHRoZSAnYm9yZGVyLWJveCcgYm94XHJcbiAgICAvLyBtb2RlbCBpcyBhcHBsaWVkIChleGNlcHQgZm9yIElFKS5cclxuICAgIGlmIChzdHlsZXMuYm94U2l6aW5nID09PSAnYm9yZGVyLWJveCcpIHtcclxuICAgICAgICAvLyBGb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgcmVxdWlyZWQgdG8gaGFuZGxlIEludGVybmV0IEV4cGxvcmVyIHdoaWNoXHJcbiAgICAgICAgLy8gZG9lc24ndCBpbmNsdWRlIHBhZGRpbmdzIGFuZCBib3JkZXJzIHRvIGNvbXB1dGVkIENTUyBkaW1lbnNpb25zLlxyXG4gICAgICAgIC8vXHJcbiAgICAgICAgLy8gV2UgY2FuIHNheSB0aGF0IGlmIENTUyBkaW1lbnNpb25zICsgcGFkZGluZ3MgYXJlIGVxdWFsIHRvIHRoZSBcImNsaWVudFwiXHJcbiAgICAgICAgLy8gcHJvcGVydGllcyB0aGVuIGl0J3MgZWl0aGVyIElFLCBhbmQgdGh1cyB3ZSBkb24ndCBuZWVkIHRvIHN1YnRyYWN0XHJcbiAgICAgICAgLy8gYW55dGhpbmcsIG9yIGFuIGVsZW1lbnQgbWVyZWx5IGRvZXNuJ3QgaGF2ZSBwYWRkaW5ncy9ib3JkZXJzIHN0eWxlcy5cclxuICAgICAgICBpZiAoTWF0aC5yb3VuZCh3aWR0aCArIGhvcml6UGFkKSAhPT0gY2xpZW50V2lkdGgpIHtcclxuICAgICAgICAgICAgd2lkdGggLT0gZ2V0Qm9yZGVyc1NpemUoc3R5bGVzLCAnbGVmdCcsICdyaWdodCcpICsgaG9yaXpQYWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChNYXRoLnJvdW5kKGhlaWdodCArIHZlcnRQYWQpICE9PSBjbGllbnRIZWlnaHQpIHtcclxuICAgICAgICAgICAgaGVpZ2h0IC09IGdldEJvcmRlcnNTaXplKHN0eWxlcywgJ3RvcCcsICdib3R0b20nKSArIHZlcnRQYWQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gRm9sbG93aW5nIHN0ZXBzIGNhbid0IGJlIGFwcGxpZWQgdG8gdGhlIGRvY3VtZW50J3Mgcm9vdCBlbGVtZW50IGFzIGl0c1xyXG4gICAgLy8gY2xpZW50W1dpZHRoL0hlaWdodF0gcHJvcGVydGllcyByZXByZXNlbnQgdmlld3BvcnQgYXJlYSBvZiB0aGUgd2luZG93LlxyXG4gICAgLy8gQmVzaWRlcywgaXQncyBhcyB3ZWxsIG5vdCBuZWNlc3NhcnkgYXMgdGhlIDxodG1sPiBpdHNlbGYgbmVpdGhlciBoYXNcclxuICAgIC8vIHJlbmRlcmVkIHNjcm9sbCBiYXJzIG5vciBpdCBjYW4gYmUgY2xpcHBlZC5cclxuICAgIGlmICghaXNEb2N1bWVudEVsZW1lbnQodGFyZ2V0KSkge1xyXG4gICAgICAgIC8vIEluIHNvbWUgYnJvd3NlcnMgKG9ubHkgaW4gRmlyZWZveCwgYWN0dWFsbHkpIENTUyB3aWR0aCAmIGhlaWdodFxyXG4gICAgICAgIC8vIGluY2x1ZGUgc2Nyb2xsIGJhcnMgc2l6ZSB3aGljaCBjYW4gYmUgcmVtb3ZlZCBhdCB0aGlzIHN0ZXAgYXMgc2Nyb2xsXHJcbiAgICAgICAgLy8gYmFycyBhcmUgdGhlIG9ubHkgZGlmZmVyZW5jZSBiZXR3ZWVuIHJvdW5kZWQgZGltZW5zaW9ucyArIHBhZGRpbmdzXHJcbiAgICAgICAgLy8gYW5kIFwiY2xpZW50XCIgcHJvcGVydGllcywgdGhvdWdoIHRoYXQgaXMgbm90IGFsd2F5cyB0cnVlIGluIENocm9tZS5cclxuICAgICAgICB2YXIgdmVydFNjcm9sbGJhciA9IE1hdGgucm91bmQod2lkdGggKyBob3JpelBhZCkgLSBjbGllbnRXaWR0aDtcclxuICAgICAgICB2YXIgaG9yaXpTY3JvbGxiYXIgPSBNYXRoLnJvdW5kKGhlaWdodCArIHZlcnRQYWQpIC0gY2xpZW50SGVpZ2h0O1xyXG4gICAgICAgIC8vIENocm9tZSBoYXMgYSByYXRoZXIgd2VpcmQgcm91bmRpbmcgb2YgXCJjbGllbnRcIiBwcm9wZXJ0aWVzLlxyXG4gICAgICAgIC8vIEUuZy4gZm9yIGFuIGVsZW1lbnQgd2l0aCBjb250ZW50IHdpZHRoIG9mIDMxNC4ycHggaXQgc29tZXRpbWVzIGdpdmVzXHJcbiAgICAgICAgLy8gdGhlIGNsaWVudCB3aWR0aCBvZiAzMTVweCBhbmQgZm9yIHRoZSB3aWR0aCBvZiAzMTQuN3B4IGl0IG1heSBnaXZlXHJcbiAgICAgICAgLy8gMzE0cHguIEFuZCBpdCBkb2Vzbid0IGhhcHBlbiBhbGwgdGhlIHRpbWUuIFNvIGp1c3QgaWdub3JlIHRoaXMgZGVsdGFcclxuICAgICAgICAvLyBhcyBhIG5vbi1yZWxldmFudC5cclxuICAgICAgICBpZiAoTWF0aC5hYnModmVydFNjcm9sbGJhcikgIT09IDEpIHtcclxuICAgICAgICAgICAgd2lkdGggLT0gdmVydFNjcm9sbGJhcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKE1hdGguYWJzKGhvcml6U2Nyb2xsYmFyKSAhPT0gMSkge1xyXG4gICAgICAgICAgICBoZWlnaHQgLT0gaG9yaXpTY3JvbGxiYXI7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGNyZWF0ZVJlY3RJbml0KHBhZGRpbmdzLmxlZnQsIHBhZGRpbmdzLnRvcCwgd2lkdGgsIGhlaWdodCk7XHJcbn1cclxuLyoqXHJcbiAqIENoZWNrcyB3aGV0aGVyIHByb3ZpZGVkIGVsZW1lbnQgaXMgYW4gaW5zdGFuY2Ugb2YgdGhlIFNWR0dyYXBoaWNzRWxlbWVudC5cclxuICpcclxuICogQHBhcmFtIHtFbGVtZW50fSB0YXJnZXQgLSBFbGVtZW50IHRvIGJlIGNoZWNrZWQuXHJcbiAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gKi9cclxudmFyIGlzU1ZHR3JhcGhpY3NFbGVtZW50ID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIC8vIFNvbWUgYnJvd3NlcnMsIG5hbWVseSBJRSBhbmQgRWRnZSwgZG9uJ3QgaGF2ZSB0aGUgU1ZHR3JhcGhpY3NFbGVtZW50XHJcbiAgICAvLyBpbnRlcmZhY2UuXHJcbiAgICBpZiAodHlwZW9mIFNWR0dyYXBoaWNzRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCkgeyByZXR1cm4gdGFyZ2V0IGluc3RhbmNlb2YgZ2V0V2luZG93T2YodGFyZ2V0KS5TVkdHcmFwaGljc0VsZW1lbnQ7IH07XHJcbiAgICB9XHJcbiAgICAvLyBJZiBpdCdzIHNvLCB0aGVuIGNoZWNrIHRoYXQgZWxlbWVudCBpcyBhdCBsZWFzdCBhbiBpbnN0YW5jZSBvZiB0aGVcclxuICAgIC8vIFNWR0VsZW1lbnQgYW5kIHRoYXQgaXQgaGFzIHRoZSBcImdldEJCb3hcIiBtZXRob2QuXHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZXh0cmEtcGFyZW5zXHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCkgeyByZXR1cm4gKHRhcmdldCBpbnN0YW5jZW9mIGdldFdpbmRvd09mKHRhcmdldCkuU1ZHRWxlbWVudCAmJlxyXG4gICAgICAgIHR5cGVvZiB0YXJnZXQuZ2V0QkJveCA9PT0gJ2Z1bmN0aW9uJyk7IH07XHJcbn0pKCk7XHJcbi8qKlxyXG4gKiBDaGVja3Mgd2hldGhlciBwcm92aWRlZCBlbGVtZW50IGlzIGEgZG9jdW1lbnQgZWxlbWVudCAoPGh0bWw+KS5cclxuICpcclxuICogQHBhcmFtIHtFbGVtZW50fSB0YXJnZXQgLSBFbGVtZW50IHRvIGJlIGNoZWNrZWQuXHJcbiAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gKi9cclxuZnVuY3Rpb24gaXNEb2N1bWVudEVsZW1lbnQodGFyZ2V0KSB7XHJcbiAgICByZXR1cm4gdGFyZ2V0ID09PSBnZXRXaW5kb3dPZih0YXJnZXQpLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcclxufVxyXG4vKipcclxuICogQ2FsY3VsYXRlcyBhbiBhcHByb3ByaWF0ZSBjb250ZW50IHJlY3RhbmdsZSBmb3IgcHJvdmlkZWQgaHRtbCBvciBzdmcgZWxlbWVudC5cclxuICpcclxuICogQHBhcmFtIHtFbGVtZW50fSB0YXJnZXQgLSBFbGVtZW50IGNvbnRlbnQgcmVjdGFuZ2xlIG9mIHdoaWNoIG5lZWRzIHRvIGJlIGNhbGN1bGF0ZWQuXHJcbiAqIEByZXR1cm5zIHtET01SZWN0SW5pdH1cclxuICovXHJcbmZ1bmN0aW9uIGdldENvbnRlbnRSZWN0KHRhcmdldCkge1xyXG4gICAgaWYgKCFpc0Jyb3dzZXIpIHtcclxuICAgICAgICByZXR1cm4gZW1wdHlSZWN0O1xyXG4gICAgfVxyXG4gICAgaWYgKGlzU1ZHR3JhcGhpY3NFbGVtZW50KHRhcmdldCkpIHtcclxuICAgICAgICByZXR1cm4gZ2V0U1ZHQ29udGVudFJlY3QodGFyZ2V0KTtcclxuICAgIH1cclxuICAgIHJldHVybiBnZXRIVE1MRWxlbWVudENvbnRlbnRSZWN0KHRhcmdldCk7XHJcbn1cclxuLyoqXHJcbiAqIENyZWF0ZXMgcmVjdGFuZ2xlIHdpdGggYW4gaW50ZXJmYWNlIG9mIHRoZSBET01SZWN0UmVhZE9ubHkuXHJcbiAqIFNwZWM6IGh0dHBzOi8vZHJhZnRzLmZ4dGYub3JnL2dlb21ldHJ5LyNkb21yZWN0cmVhZG9ubHlcclxuICpcclxuICogQHBhcmFtIHtET01SZWN0SW5pdH0gcmVjdEluaXQgLSBPYmplY3Qgd2l0aCByZWN0YW5nbGUncyB4L3kgY29vcmRpbmF0ZXMgYW5kIGRpbWVuc2lvbnMuXHJcbiAqIEByZXR1cm5zIHtET01SZWN0UmVhZE9ubHl9XHJcbiAqL1xyXG5mdW5jdGlvbiBjcmVhdGVSZWFkT25seVJlY3QoX2EpIHtcclxuICAgIHZhciB4ID0gX2EueCwgeSA9IF9hLnksIHdpZHRoID0gX2Eud2lkdGgsIGhlaWdodCA9IF9hLmhlaWdodDtcclxuICAgIC8vIElmIERPTVJlY3RSZWFkT25seSBpcyBhdmFpbGFibGUgdXNlIGl0IGFzIGEgcHJvdG90eXBlIGZvciB0aGUgcmVjdGFuZ2xlLlxyXG4gICAgdmFyIENvbnN0ciA9IHR5cGVvZiBET01SZWN0UmVhZE9ubHkgIT09ICd1bmRlZmluZWQnID8gRE9NUmVjdFJlYWRPbmx5IDogT2JqZWN0O1xyXG4gICAgdmFyIHJlY3QgPSBPYmplY3QuY3JlYXRlKENvbnN0ci5wcm90b3R5cGUpO1xyXG4gICAgLy8gUmVjdGFuZ2xlJ3MgcHJvcGVydGllcyBhcmUgbm90IHdyaXRhYmxlIGFuZCBub24tZW51bWVyYWJsZS5cclxuICAgIGRlZmluZUNvbmZpZ3VyYWJsZShyZWN0LCB7XHJcbiAgICAgICAgeDogeCwgeTogeSwgd2lkdGg6IHdpZHRoLCBoZWlnaHQ6IGhlaWdodCxcclxuICAgICAgICB0b3A6IHksXHJcbiAgICAgICAgcmlnaHQ6IHggKyB3aWR0aCxcclxuICAgICAgICBib3R0b206IGhlaWdodCArIHksXHJcbiAgICAgICAgbGVmdDogeFxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gcmVjdDtcclxufVxyXG4vKipcclxuICogQ3JlYXRlcyBET01SZWN0SW5pdCBvYmplY3QgYmFzZWQgb24gdGhlIHByb3ZpZGVkIGRpbWVuc2lvbnMgYW5kIHRoZSB4L3kgY29vcmRpbmF0ZXMuXHJcbiAqIFNwZWM6IGh0dHBzOi8vZHJhZnRzLmZ4dGYub3JnL2dlb21ldHJ5LyNkaWN0ZGVmLWRvbXJlY3Rpbml0XHJcbiAqXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSB4IC0gWCBjb29yZGluYXRlLlxyXG4gKiBAcGFyYW0ge251bWJlcn0geSAtIFkgY29vcmRpbmF0ZS5cclxuICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoIC0gUmVjdGFuZ2xlJ3Mgd2lkdGguXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHQgLSBSZWN0YW5nbGUncyBoZWlnaHQuXHJcbiAqIEByZXR1cm5zIHtET01SZWN0SW5pdH1cclxuICovXHJcbmZ1bmN0aW9uIGNyZWF0ZVJlY3RJbml0KHgsIHksIHdpZHRoLCBoZWlnaHQpIHtcclxuICAgIHJldHVybiB7IHg6IHgsIHk6IHksIHdpZHRoOiB3aWR0aCwgaGVpZ2h0OiBoZWlnaHQgfTtcclxufVxuXG4vKipcclxuICogQ2xhc3MgdGhhdCBpcyByZXNwb25zaWJsZSBmb3IgY29tcHV0YXRpb25zIG9mIHRoZSBjb250ZW50IHJlY3RhbmdsZSBvZlxyXG4gKiBwcm92aWRlZCBET00gZWxlbWVudCBhbmQgZm9yIGtlZXBpbmcgdHJhY2sgb2YgaXQncyBjaGFuZ2VzLlxyXG4gKi9cclxudmFyIFJlc2l6ZU9ic2VydmF0aW9uID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIFJlc2l6ZU9ic2VydmF0aW9uLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7RWxlbWVudH0gdGFyZ2V0IC0gRWxlbWVudCB0byBiZSBvYnNlcnZlZC5cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gUmVzaXplT2JzZXJ2YXRpb24odGFyZ2V0KSB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQnJvYWRjYXN0ZWQgd2lkdGggb2YgY29udGVudCByZWN0YW5nbGUuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuYnJvYWRjYXN0V2lkdGggPSAwO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEJyb2FkY2FzdGVkIGhlaWdodCBvZiBjb250ZW50IHJlY3RhbmdsZS5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEB0eXBlIHtudW1iZXJ9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5icm9hZGNhc3RIZWlnaHQgPSAwO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFJlZmVyZW5jZSB0byB0aGUgbGFzdCBvYnNlcnZlZCBjb250ZW50IHJlY3RhbmdsZS5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBwcml2YXRlIHtET01SZWN0SW5pdH1cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLmNvbnRlbnRSZWN0XyA9IGNyZWF0ZVJlY3RJbml0KDAsIDAsIDAsIDApO1xyXG4gICAgICAgIHRoaXMudGFyZ2V0ID0gdGFyZ2V0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBVcGRhdGVzIGNvbnRlbnQgcmVjdGFuZ2xlIGFuZCB0ZWxscyB3aGV0aGVyIGl0J3Mgd2lkdGggb3IgaGVpZ2h0IHByb3BlcnRpZXNcclxuICAgICAqIGhhdmUgY2hhbmdlZCBzaW5jZSB0aGUgbGFzdCBicm9hZGNhc3QuXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIFJlc2l6ZU9ic2VydmF0aW9uLnByb3RvdHlwZS5pc0FjdGl2ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgcmVjdCA9IGdldENvbnRlbnRSZWN0KHRoaXMudGFyZ2V0KTtcclxuICAgICAgICB0aGlzLmNvbnRlbnRSZWN0XyA9IHJlY3Q7XHJcbiAgICAgICAgcmV0dXJuIChyZWN0LndpZHRoICE9PSB0aGlzLmJyb2FkY2FzdFdpZHRoIHx8XHJcbiAgICAgICAgICAgIHJlY3QuaGVpZ2h0ICE9PSB0aGlzLmJyb2FkY2FzdEhlaWdodCk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBVcGRhdGVzICdicm9hZGNhc3RXaWR0aCcgYW5kICdicm9hZGNhc3RIZWlnaHQnIHByb3BlcnRpZXMgd2l0aCBhIGRhdGFcclxuICAgICAqIGZyb20gdGhlIGNvcnJlc3BvbmRpbmcgcHJvcGVydGllcyBvZiB0aGUgbGFzdCBvYnNlcnZlZCBjb250ZW50IHJlY3RhbmdsZS5cclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJucyB7RE9NUmVjdEluaXR9IExhc3Qgb2JzZXJ2ZWQgY29udGVudCByZWN0YW5nbGUuXHJcbiAgICAgKi9cclxuICAgIFJlc2l6ZU9ic2VydmF0aW9uLnByb3RvdHlwZS5icm9hZGNhc3RSZWN0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciByZWN0ID0gdGhpcy5jb250ZW50UmVjdF87XHJcbiAgICAgICAgdGhpcy5icm9hZGNhc3RXaWR0aCA9IHJlY3Qud2lkdGg7XHJcbiAgICAgICAgdGhpcy5icm9hZGNhc3RIZWlnaHQgPSByZWN0LmhlaWdodDtcclxuICAgICAgICByZXR1cm4gcmVjdDtcclxuICAgIH07XHJcbiAgICByZXR1cm4gUmVzaXplT2JzZXJ2YXRpb247XHJcbn0oKSk7XG5cbnZhciBSZXNpemVPYnNlcnZlckVudHJ5ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIFJlc2l6ZU9ic2VydmVyRW50cnkuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtFbGVtZW50fSB0YXJnZXQgLSBFbGVtZW50IHRoYXQgaXMgYmVpbmcgb2JzZXJ2ZWQuXHJcbiAgICAgKiBAcGFyYW0ge0RPTVJlY3RJbml0fSByZWN0SW5pdCAtIERhdGEgb2YgdGhlIGVsZW1lbnQncyBjb250ZW50IHJlY3RhbmdsZS5cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gUmVzaXplT2JzZXJ2ZXJFbnRyeSh0YXJnZXQsIHJlY3RJbml0KSB7XHJcbiAgICAgICAgdmFyIGNvbnRlbnRSZWN0ID0gY3JlYXRlUmVhZE9ubHlSZWN0KHJlY3RJbml0KTtcclxuICAgICAgICAvLyBBY2NvcmRpbmcgdG8gdGhlIHNwZWNpZmljYXRpb24gZm9sbG93aW5nIHByb3BlcnRpZXMgYXJlIG5vdCB3cml0YWJsZVxyXG4gICAgICAgIC8vIGFuZCBhcmUgYWxzbyBub3QgZW51bWVyYWJsZSBpbiB0aGUgbmF0aXZlIGltcGxlbWVudGF0aW9uLlxyXG4gICAgICAgIC8vXHJcbiAgICAgICAgLy8gUHJvcGVydHkgYWNjZXNzb3JzIGFyZSBub3QgYmVpbmcgdXNlZCBhcyB0aGV5J2QgcmVxdWlyZSB0byBkZWZpbmUgYVxyXG4gICAgICAgIC8vIHByaXZhdGUgV2Vha01hcCBzdG9yYWdlIHdoaWNoIG1heSBjYXVzZSBtZW1vcnkgbGVha3MgaW4gYnJvd3NlcnMgdGhhdFxyXG4gICAgICAgIC8vIGRvbid0IHN1cHBvcnQgdGhpcyB0eXBlIG9mIGNvbGxlY3Rpb25zLlxyXG4gICAgICAgIGRlZmluZUNvbmZpZ3VyYWJsZSh0aGlzLCB7IHRhcmdldDogdGFyZ2V0LCBjb250ZW50UmVjdDogY29udGVudFJlY3QgfSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gUmVzaXplT2JzZXJ2ZXJFbnRyeTtcclxufSgpKTtcblxudmFyIFJlc2l6ZU9ic2VydmVyU1BJID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIFJlc2l6ZU9ic2VydmVyLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7UmVzaXplT2JzZXJ2ZXJDYWxsYmFja30gY2FsbGJhY2sgLSBDYWxsYmFjayBmdW5jdGlvbiB0aGF0IGlzIGludm9rZWRcclxuICAgICAqICAgICAgd2hlbiBvbmUgb2YgdGhlIG9ic2VydmVkIGVsZW1lbnRzIGNoYW5nZXMgaXQncyBjb250ZW50IGRpbWVuc2lvbnMuXHJcbiAgICAgKiBAcGFyYW0ge1Jlc2l6ZU9ic2VydmVyQ29udHJvbGxlcn0gY29udHJvbGxlciAtIENvbnRyb2xsZXIgaW5zdGFuY2Ugd2hpY2hcclxuICAgICAqICAgICAgaXMgcmVzcG9uc2libGUgZm9yIHRoZSB1cGRhdGVzIG9mIG9ic2VydmVyLlxyXG4gICAgICogQHBhcmFtIHtSZXNpemVPYnNlcnZlcn0gY2FsbGJhY2tDdHggLSBSZWZlcmVuY2UgdG8gdGhlIHB1YmxpY1xyXG4gICAgICogICAgICBSZXNpemVPYnNlcnZlciBpbnN0YW5jZSB3aGljaCB3aWxsIGJlIHBhc3NlZCB0byBjYWxsYmFjayBmdW5jdGlvbi5cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gUmVzaXplT2JzZXJ2ZXJTUEkoY2FsbGJhY2ssIGNvbnRyb2xsZXIsIGNhbGxiYWNrQ3R4KSB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ29sbGVjdGlvbiBvZiByZXNpemUgb2JzZXJ2YXRpb25zIHRoYXQgaGF2ZSBkZXRlY3RlZCBjaGFuZ2VzIGluIGRpbWVuc2lvbnNcclxuICAgICAgICAgKiBvZiBlbGVtZW50cy5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBwcml2YXRlIHtBcnJheTxSZXNpemVPYnNlcnZhdGlvbj59XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5hY3RpdmVPYnNlcnZhdGlvbnNfID0gW107XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogUmVnaXN0cnkgb2YgdGhlIFJlc2l6ZU9ic2VydmF0aW9uIGluc3RhbmNlcy5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBwcml2YXRlIHtNYXA8RWxlbWVudCwgUmVzaXplT2JzZXJ2YXRpb24+fVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMub2JzZXJ2YXRpb25zXyA9IG5ldyBNYXBTaGltKCk7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgY2FsbGJhY2sgcHJvdmlkZWQgYXMgcGFyYW1ldGVyIDEgaXMgbm90IGEgZnVuY3Rpb24uJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuY2FsbGJhY2tfID0gY2FsbGJhY2s7XHJcbiAgICAgICAgdGhpcy5jb250cm9sbGVyXyA9IGNvbnRyb2xsZXI7XHJcbiAgICAgICAgdGhpcy5jYWxsYmFja0N0eF8gPSBjYWxsYmFja0N0eDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogU3RhcnRzIG9ic2VydmluZyBwcm92aWRlZCBlbGVtZW50LlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7RWxlbWVudH0gdGFyZ2V0IC0gRWxlbWVudCB0byBiZSBvYnNlcnZlZC5cclxuICAgICAqIEByZXR1cm5zIHt2b2lkfVxyXG4gICAgICovXHJcbiAgICBSZXNpemVPYnNlcnZlclNQSS5wcm90b3R5cGUub2JzZXJ2ZSA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcclxuICAgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignMSBhcmd1bWVudCByZXF1aXJlZCwgYnV0IG9ubHkgMCBwcmVzZW50LicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBEbyBub3RoaW5nIGlmIGN1cnJlbnQgZW52aXJvbm1lbnQgZG9lc24ndCBoYXZlIHRoZSBFbGVtZW50IGludGVyZmFjZS5cclxuICAgICAgICBpZiAodHlwZW9mIEVsZW1lbnQgPT09ICd1bmRlZmluZWQnIHx8ICEoRWxlbWVudCBpbnN0YW5jZW9mIE9iamVjdCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoISh0YXJnZXQgaW5zdGFuY2VvZiBnZXRXaW5kb3dPZih0YXJnZXQpLkVsZW1lbnQpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3BhcmFtZXRlciAxIGlzIG5vdCBvZiB0eXBlIFwiRWxlbWVudFwiLicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgb2JzZXJ2YXRpb25zID0gdGhpcy5vYnNlcnZhdGlvbnNfO1xyXG4gICAgICAgIC8vIERvIG5vdGhpbmcgaWYgZWxlbWVudCBpcyBhbHJlYWR5IGJlaW5nIG9ic2VydmVkLlxyXG4gICAgICAgIGlmIChvYnNlcnZhdGlvbnMuaGFzKHRhcmdldCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBvYnNlcnZhdGlvbnMuc2V0KHRhcmdldCwgbmV3IFJlc2l6ZU9ic2VydmF0aW9uKHRhcmdldCkpO1xyXG4gICAgICAgIHRoaXMuY29udHJvbGxlcl8uYWRkT2JzZXJ2ZXIodGhpcyk7XHJcbiAgICAgICAgLy8gRm9yY2UgdGhlIHVwZGF0ZSBvZiBvYnNlcnZhdGlvbnMuXHJcbiAgICAgICAgdGhpcy5jb250cm9sbGVyXy5yZWZyZXNoKCk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBTdG9wcyBvYnNlcnZpbmcgcHJvdmlkZWQgZWxlbWVudC5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IHRhcmdldCAtIEVsZW1lbnQgdG8gc3RvcCBvYnNlcnZpbmcuXHJcbiAgICAgKiBAcmV0dXJucyB7dm9pZH1cclxuICAgICAqL1xyXG4gICAgUmVzaXplT2JzZXJ2ZXJTUEkucHJvdG90eXBlLnVub2JzZXJ2ZSA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcclxuICAgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignMSBhcmd1bWVudCByZXF1aXJlZCwgYnV0IG9ubHkgMCBwcmVzZW50LicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBEbyBub3RoaW5nIGlmIGN1cnJlbnQgZW52aXJvbm1lbnQgZG9lc24ndCBoYXZlIHRoZSBFbGVtZW50IGludGVyZmFjZS5cclxuICAgICAgICBpZiAodHlwZW9mIEVsZW1lbnQgPT09ICd1bmRlZmluZWQnIHx8ICEoRWxlbWVudCBpbnN0YW5jZW9mIE9iamVjdCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoISh0YXJnZXQgaW5zdGFuY2VvZiBnZXRXaW5kb3dPZih0YXJnZXQpLkVsZW1lbnQpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3BhcmFtZXRlciAxIGlzIG5vdCBvZiB0eXBlIFwiRWxlbWVudFwiLicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgb2JzZXJ2YXRpb25zID0gdGhpcy5vYnNlcnZhdGlvbnNfO1xyXG4gICAgICAgIC8vIERvIG5vdGhpbmcgaWYgZWxlbWVudCBpcyBub3QgYmVpbmcgb2JzZXJ2ZWQuXHJcbiAgICAgICAgaWYgKCFvYnNlcnZhdGlvbnMuaGFzKHRhcmdldCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBvYnNlcnZhdGlvbnMuZGVsZXRlKHRhcmdldCk7XHJcbiAgICAgICAgaWYgKCFvYnNlcnZhdGlvbnMuc2l6ZSkge1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRyb2xsZXJfLnJlbW92ZU9ic2VydmVyKHRoaXMpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFN0b3BzIG9ic2VydmluZyBhbGwgZWxlbWVudHMuXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybnMge3ZvaWR9XHJcbiAgICAgKi9cclxuICAgIFJlc2l6ZU9ic2VydmVyU1BJLnByb3RvdHlwZS5kaXNjb25uZWN0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMuY2xlYXJBY3RpdmUoKTtcclxuICAgICAgICB0aGlzLm9ic2VydmF0aW9uc18uY2xlYXIoKTtcclxuICAgICAgICB0aGlzLmNvbnRyb2xsZXJfLnJlbW92ZU9ic2VydmVyKHRoaXMpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQ29sbGVjdHMgb2JzZXJ2YXRpb24gaW5zdGFuY2VzIHRoZSBhc3NvY2lhdGVkIGVsZW1lbnQgb2Ygd2hpY2ggaGFzIGNoYW5nZWRcclxuICAgICAqIGl0J3MgY29udGVudCByZWN0YW5nbGUuXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybnMge3ZvaWR9XHJcbiAgICAgKi9cclxuICAgIFJlc2l6ZU9ic2VydmVyU1BJLnByb3RvdHlwZS5nYXRoZXJBY3RpdmUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB0aGlzLmNsZWFyQWN0aXZlKCk7XHJcbiAgICAgICAgdGhpcy5vYnNlcnZhdGlvbnNfLmZvckVhY2goZnVuY3Rpb24gKG9ic2VydmF0aW9uKSB7XHJcbiAgICAgICAgICAgIGlmIChvYnNlcnZhdGlvbi5pc0FjdGl2ZSgpKSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5hY3RpdmVPYnNlcnZhdGlvbnNfLnB1c2gob2JzZXJ2YXRpb24pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBJbnZva2VzIGluaXRpYWwgY2FsbGJhY2sgZnVuY3Rpb24gd2l0aCBhIGxpc3Qgb2YgUmVzaXplT2JzZXJ2ZXJFbnRyeVxyXG4gICAgICogaW5zdGFuY2VzIGNvbGxlY3RlZCBmcm9tIGFjdGl2ZSByZXNpemUgb2JzZXJ2YXRpb25zLlxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm5zIHt2b2lkfVxyXG4gICAgICovXHJcbiAgICBSZXNpemVPYnNlcnZlclNQSS5wcm90b3R5cGUuYnJvYWRjYXN0QWN0aXZlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIC8vIERvIG5vdGhpbmcgaWYgb2JzZXJ2ZXIgZG9lc24ndCBoYXZlIGFjdGl2ZSBvYnNlcnZhdGlvbnMuXHJcbiAgICAgICAgaWYgKCF0aGlzLmhhc0FjdGl2ZSgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGN0eCA9IHRoaXMuY2FsbGJhY2tDdHhfO1xyXG4gICAgICAgIC8vIENyZWF0ZSBSZXNpemVPYnNlcnZlckVudHJ5IGluc3RhbmNlIGZvciBldmVyeSBhY3RpdmUgb2JzZXJ2YXRpb24uXHJcbiAgICAgICAgdmFyIGVudHJpZXMgPSB0aGlzLmFjdGl2ZU9ic2VydmF0aW9uc18ubWFwKGZ1bmN0aW9uIChvYnNlcnZhdGlvbikge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFJlc2l6ZU9ic2VydmVyRW50cnkob2JzZXJ2YXRpb24udGFyZ2V0LCBvYnNlcnZhdGlvbi5icm9hZGNhc3RSZWN0KCkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuY2FsbGJhY2tfLmNhbGwoY3R4LCBlbnRyaWVzLCBjdHgpO1xyXG4gICAgICAgIHRoaXMuY2xlYXJBY3RpdmUoKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIENsZWFycyB0aGUgY29sbGVjdGlvbiBvZiBhY3RpdmUgb2JzZXJ2YXRpb25zLlxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm5zIHt2b2lkfVxyXG4gICAgICovXHJcbiAgICBSZXNpemVPYnNlcnZlclNQSS5wcm90b3R5cGUuY2xlYXJBY3RpdmUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5hY3RpdmVPYnNlcnZhdGlvbnNfLnNwbGljZSgwKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFRlbGxzIHdoZXRoZXIgb2JzZXJ2ZXIgaGFzIGFjdGl2ZSBvYnNlcnZhdGlvbnMuXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIFJlc2l6ZU9ic2VydmVyU1BJLnByb3RvdHlwZS5oYXNBY3RpdmUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYWN0aXZlT2JzZXJ2YXRpb25zXy5sZW5ndGggPiAwO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBSZXNpemVPYnNlcnZlclNQSTtcclxufSgpKTtcblxuLy8gUmVnaXN0cnkgb2YgaW50ZXJuYWwgb2JzZXJ2ZXJzLiBJZiBXZWFrTWFwIGlzIG5vdCBhdmFpbGFibGUgdXNlIGN1cnJlbnQgc2hpbVxyXG4vLyBmb3IgdGhlIE1hcCBjb2xsZWN0aW9uIGFzIGl0IGhhcyBhbGwgcmVxdWlyZWQgbWV0aG9kcyBhbmQgYmVjYXVzZSBXZWFrTWFwXHJcbi8vIGNhbid0IGJlIGZ1bGx5IHBvbHlmaWxsZWQgYW55d2F5LlxyXG52YXIgb2JzZXJ2ZXJzID0gdHlwZW9mIFdlYWtNYXAgIT09ICd1bmRlZmluZWQnID8gbmV3IFdlYWtNYXAoKSA6IG5ldyBNYXBTaGltKCk7XHJcbi8qKlxyXG4gKiBSZXNpemVPYnNlcnZlciBBUEkuIEVuY2Fwc3VsYXRlcyB0aGUgUmVzaXplT2JzZXJ2ZXIgU1BJIGltcGxlbWVudGF0aW9uXHJcbiAqIGV4cG9zaW5nIG9ubHkgdGhvc2UgbWV0aG9kcyBhbmQgcHJvcGVydGllcyB0aGF0IGFyZSBkZWZpbmVkIGluIHRoZSBzcGVjLlxyXG4gKi9cclxudmFyIFJlc2l6ZU9ic2VydmVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIFJlc2l6ZU9ic2VydmVyLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7UmVzaXplT2JzZXJ2ZXJDYWxsYmFja30gY2FsbGJhY2sgLSBDYWxsYmFjayB0aGF0IGlzIGludm9rZWQgd2hlblxyXG4gICAgICogICAgICBkaW1lbnNpb25zIG9mIHRoZSBvYnNlcnZlZCBlbGVtZW50cyBjaGFuZ2UuXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIFJlc2l6ZU9ic2VydmVyKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFJlc2l6ZU9ic2VydmVyKSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24uJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCcxIGFyZ3VtZW50IHJlcXVpcmVkLCBidXQgb25seSAwIHByZXNlbnQuJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBjb250cm9sbGVyID0gUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyLmdldEluc3RhbmNlKCk7XHJcbiAgICAgICAgdmFyIG9ic2VydmVyID0gbmV3IFJlc2l6ZU9ic2VydmVyU1BJKGNhbGxiYWNrLCBjb250cm9sbGVyLCB0aGlzKTtcclxuICAgICAgICBvYnNlcnZlcnMuc2V0KHRoaXMsIG9ic2VydmVyKTtcclxuICAgIH1cclxuICAgIHJldHVybiBSZXNpemVPYnNlcnZlcjtcclxufSgpKTtcclxuLy8gRXhwb3NlIHB1YmxpYyBtZXRob2RzIG9mIFJlc2l6ZU9ic2VydmVyLlxyXG5bXHJcbiAgICAnb2JzZXJ2ZScsXHJcbiAgICAndW5vYnNlcnZlJyxcclxuICAgICdkaXNjb25uZWN0J1xyXG5dLmZvckVhY2goZnVuY3Rpb24gKG1ldGhvZCkge1xyXG4gICAgUmVzaXplT2JzZXJ2ZXIucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF9hO1xyXG4gICAgICAgIHJldHVybiAoX2EgPSBvYnNlcnZlcnMuZ2V0KHRoaXMpKVttZXRob2RdLmFwcGx5KF9hLCBhcmd1bWVudHMpO1xyXG4gICAgfTtcclxufSk7XG5cbnZhciBpbmRleCA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICAvLyBFeHBvcnQgZXhpc3RpbmcgaW1wbGVtZW50YXRpb24gaWYgYXZhaWxhYmxlLlxyXG4gICAgaWYgKHR5cGVvZiBnbG9iYWwkMS5SZXNpemVPYnNlcnZlciAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICByZXR1cm4gZ2xvYmFsJDEuUmVzaXplT2JzZXJ2ZXI7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gUmVzaXplT2JzZXJ2ZXI7XHJcbn0pKCk7XG5cbmV4cG9ydCBkZWZhdWx0IGluZGV4O1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGVsZW1lbnQpIHtcbiAgdmFyIHJlY3QgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICByZXR1cm4ge1xuICAgIHdpZHRoOiByZWN0LndpZHRoLFxuICAgIGhlaWdodDogcmVjdC5oZWlnaHQsXG4gICAgdG9wOiByZWN0LnRvcCxcbiAgICByaWdodDogcmVjdC5yaWdodCxcbiAgICBib3R0b206IHJlY3QuYm90dG9tLFxuICAgIGxlZnQ6IHJlY3QubGVmdCxcbiAgICB4OiByZWN0LmxlZnQsXG4gICAgeTogcmVjdC50b3BcbiAgfTtcbn0iLCIvKjo6IGltcG9ydCB0eXBlIHsgV2luZG93IH0gZnJvbSAnLi4vdHlwZXMnOyAqL1xuXG4vKjo6IGRlY2xhcmUgZnVuY3Rpb24gZ2V0V2luZG93KG5vZGU6IE5vZGUgfCBXaW5kb3cpOiBXaW5kb3c7ICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRXaW5kb3cobm9kZSkge1xuICBpZiAobm9kZS50b1N0cmluZygpICE9PSAnW29iamVjdCBXaW5kb3ddJykge1xuICAgIHZhciBvd25lckRvY3VtZW50ID0gbm9kZS5vd25lckRvY3VtZW50O1xuICAgIHJldHVybiBvd25lckRvY3VtZW50ID8gb3duZXJEb2N1bWVudC5kZWZhdWx0VmlldyB8fCB3aW5kb3cgOiB3aW5kb3c7XG4gIH1cblxuICByZXR1cm4gbm9kZTtcbn0iLCJpbXBvcnQgZ2V0V2luZG93IGZyb20gXCIuL2dldFdpbmRvdy5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0V2luZG93U2Nyb2xsKG5vZGUpIHtcbiAgdmFyIHdpbiA9IGdldFdpbmRvdyhub2RlKTtcbiAgdmFyIHNjcm9sbExlZnQgPSB3aW4ucGFnZVhPZmZzZXQ7XG4gIHZhciBzY3JvbGxUb3AgPSB3aW4ucGFnZVlPZmZzZXQ7XG4gIHJldHVybiB7XG4gICAgc2Nyb2xsTGVmdDogc2Nyb2xsTGVmdCxcbiAgICBzY3JvbGxUb3A6IHNjcm9sbFRvcFxuICB9O1xufSIsImltcG9ydCBnZXRXaW5kb3cgZnJvbSBcIi4vZ2V0V2luZG93LmpzXCI7XG4vKjo6IGRlY2xhcmUgZnVuY3Rpb24gaXNFbGVtZW50KG5vZGU6IG1peGVkKTogYm9vbGVhbiAlY2hlY2tzKG5vZGUgaW5zdGFuY2VvZlxuICBFbGVtZW50KTsgKi9cblxuZnVuY3Rpb24gaXNFbGVtZW50KG5vZGUpIHtcbiAgdmFyIE93bkVsZW1lbnQgPSBnZXRXaW5kb3cobm9kZSkuRWxlbWVudDtcbiAgcmV0dXJuIG5vZGUgaW5zdGFuY2VvZiBPd25FbGVtZW50IHx8IG5vZGUgaW5zdGFuY2VvZiBFbGVtZW50O1xufVxuLyo6OiBkZWNsYXJlIGZ1bmN0aW9uIGlzSFRNTEVsZW1lbnQobm9kZTogbWl4ZWQpOiBib29sZWFuICVjaGVja3Mobm9kZSBpbnN0YW5jZW9mXG4gIEhUTUxFbGVtZW50KTsgKi9cblxuXG5mdW5jdGlvbiBpc0hUTUxFbGVtZW50KG5vZGUpIHtcbiAgdmFyIE93bkVsZW1lbnQgPSBnZXRXaW5kb3cobm9kZSkuSFRNTEVsZW1lbnQ7XG4gIHJldHVybiBub2RlIGluc3RhbmNlb2YgT3duRWxlbWVudCB8fCBub2RlIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQ7XG59XG4vKjo6IGRlY2xhcmUgZnVuY3Rpb24gaXNTaGFkb3dSb290KG5vZGU6IG1peGVkKTogYm9vbGVhbiAlY2hlY2tzKG5vZGUgaW5zdGFuY2VvZlxuICBTaGFkb3dSb290KTsgKi9cblxuXG5mdW5jdGlvbiBpc1NoYWRvd1Jvb3Qobm9kZSkge1xuICB2YXIgT3duRWxlbWVudCA9IGdldFdpbmRvdyhub2RlKS5TaGFkb3dSb290O1xuICByZXR1cm4gbm9kZSBpbnN0YW5jZW9mIE93bkVsZW1lbnQgfHwgbm9kZSBpbnN0YW5jZW9mIFNoYWRvd1Jvb3Q7XG59XG5cbmV4cG9ydCB7IGlzRWxlbWVudCwgaXNIVE1MRWxlbWVudCwgaXNTaGFkb3dSb290IH07IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0Tm9kZU5hbWUoZWxlbWVudCkge1xuICByZXR1cm4gZWxlbWVudCA/IChlbGVtZW50Lm5vZGVOYW1lIHx8ICcnKS50b0xvd2VyQ2FzZSgpIDogbnVsbDtcbn0iLCJpbXBvcnQgeyBpc0VsZW1lbnQgfSBmcm9tIFwiLi9pbnN0YW5jZU9mLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXREb2N1bWVudEVsZW1lbnQoZWxlbWVudCkge1xuICAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS1yZXR1cm5dOiBhc3N1bWUgYm9keSBpcyBhbHdheXMgYXZhaWxhYmxlXG4gIHJldHVybiAoKGlzRWxlbWVudChlbGVtZW50KSA/IGVsZW1lbnQub3duZXJEb2N1bWVudCA6IC8vICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXVxuICBlbGVtZW50LmRvY3VtZW50KSB8fCB3aW5kb3cuZG9jdW1lbnQpLmRvY3VtZW50RWxlbWVudDtcbn0iLCJpbXBvcnQgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGZyb20gXCIuL2dldEJvdW5kaW5nQ2xpZW50UmVjdC5qc1wiO1xuaW1wb3J0IGdldERvY3VtZW50RWxlbWVudCBmcm9tIFwiLi9nZXREb2N1bWVudEVsZW1lbnQuanNcIjtcbmltcG9ydCBnZXRXaW5kb3dTY3JvbGwgZnJvbSBcIi4vZ2V0V2luZG93U2Nyb2xsLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRXaW5kb3dTY3JvbGxCYXJYKGVsZW1lbnQpIHtcbiAgLy8gSWYgPGh0bWw+IGhhcyBhIENTUyB3aWR0aCBncmVhdGVyIHRoYW4gdGhlIHZpZXdwb3J0LCB0aGVuIHRoaXMgd2lsbCBiZVxuICAvLyBpbmNvcnJlY3QgZm9yIFJUTC5cbiAgLy8gUG9wcGVyIDEgaXMgYnJva2VuIGluIHRoaXMgY2FzZSBhbmQgbmV2ZXIgaGFkIGEgYnVnIHJlcG9ydCBzbyBsZXQncyBhc3N1bWVcbiAgLy8gaXQncyBub3QgYW4gaXNzdWUuIEkgZG9uJ3QgdGhpbmsgYW55b25lIGV2ZXIgc3BlY2lmaWVzIHdpZHRoIG9uIDxodG1sPlxuICAvLyBhbnl3YXkuXG4gIC8vIEJyb3dzZXJzIHdoZXJlIHRoZSBsZWZ0IHNjcm9sbGJhciBkb2Vzbid0IGNhdXNlIGFuIGlzc3VlIHJlcG9ydCBgMGAgZm9yXG4gIC8vIHRoaXMgKGUuZy4gRWRnZSAyMDE5LCBJRTExLCBTYWZhcmkpXG4gIHJldHVybiBnZXRCb3VuZGluZ0NsaWVudFJlY3QoZ2V0RG9jdW1lbnRFbGVtZW50KGVsZW1lbnQpKS5sZWZ0ICsgZ2V0V2luZG93U2Nyb2xsKGVsZW1lbnQpLnNjcm9sbExlZnQ7XG59IiwiaW1wb3J0IGdldFdpbmRvdyBmcm9tIFwiLi9nZXRXaW5kb3cuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCkge1xuICByZXR1cm4gZ2V0V2luZG93KGVsZW1lbnQpLmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCk7XG59IiwiaW1wb3J0IGdldENvbXB1dGVkU3R5bGUgZnJvbSBcIi4vZ2V0Q29tcHV0ZWRTdHlsZS5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNTY3JvbGxQYXJlbnQoZWxlbWVudCkge1xuICAvLyBGaXJlZm94IHdhbnRzIHVzIHRvIGNoZWNrIGAteGAgYW5kIGAteWAgdmFyaWF0aW9ucyBhcyB3ZWxsXG4gIHZhciBfZ2V0Q29tcHV0ZWRTdHlsZSA9IGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCksXG4gICAgICBvdmVyZmxvdyA9IF9nZXRDb21wdXRlZFN0eWxlLm92ZXJmbG93LFxuICAgICAgb3ZlcmZsb3dYID0gX2dldENvbXB1dGVkU3R5bGUub3ZlcmZsb3dYLFxuICAgICAgb3ZlcmZsb3dZID0gX2dldENvbXB1dGVkU3R5bGUub3ZlcmZsb3dZO1xuXG4gIHJldHVybiAvYXV0b3xzY3JvbGx8b3ZlcmxheXxoaWRkZW4vLnRlc3Qob3ZlcmZsb3cgKyBvdmVyZmxvd1kgKyBvdmVyZmxvd1gpO1xufSIsImltcG9ydCBnZXRCb3VuZGluZ0NsaWVudFJlY3QgZnJvbSBcIi4vZ2V0Qm91bmRpbmdDbGllbnRSZWN0LmpzXCI7XG5pbXBvcnQgZ2V0Tm9kZVNjcm9sbCBmcm9tIFwiLi9nZXROb2RlU2Nyb2xsLmpzXCI7XG5pbXBvcnQgZ2V0Tm9kZU5hbWUgZnJvbSBcIi4vZ2V0Tm9kZU5hbWUuanNcIjtcbmltcG9ydCB7IGlzSFRNTEVsZW1lbnQgfSBmcm9tIFwiLi9pbnN0YW5jZU9mLmpzXCI7XG5pbXBvcnQgZ2V0V2luZG93U2Nyb2xsQmFyWCBmcm9tIFwiLi9nZXRXaW5kb3dTY3JvbGxCYXJYLmpzXCI7XG5pbXBvcnQgZ2V0RG9jdW1lbnRFbGVtZW50IGZyb20gXCIuL2dldERvY3VtZW50RWxlbWVudC5qc1wiO1xuaW1wb3J0IGlzU2Nyb2xsUGFyZW50IGZyb20gXCIuL2lzU2Nyb2xsUGFyZW50LmpzXCI7IC8vIFJldHVybnMgdGhlIGNvbXBvc2l0ZSByZWN0IG9mIGFuIGVsZW1lbnQgcmVsYXRpdmUgdG8gaXRzIG9mZnNldFBhcmVudC5cbi8vIENvbXBvc2l0ZSBtZWFucyBpdCB0YWtlcyBpbnRvIGFjY291bnQgdHJhbnNmb3JtcyBhcyB3ZWxsIGFzIGxheW91dC5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0Q29tcG9zaXRlUmVjdChlbGVtZW50T3JWaXJ0dWFsRWxlbWVudCwgb2Zmc2V0UGFyZW50LCBpc0ZpeGVkKSB7XG4gIGlmIChpc0ZpeGVkID09PSB2b2lkIDApIHtcbiAgICBpc0ZpeGVkID0gZmFsc2U7XG4gIH1cblxuICB2YXIgZG9jdW1lbnRFbGVtZW50ID0gZ2V0RG9jdW1lbnRFbGVtZW50KG9mZnNldFBhcmVudCk7XG4gIHZhciByZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGVsZW1lbnRPclZpcnR1YWxFbGVtZW50KTtcbiAgdmFyIGlzT2Zmc2V0UGFyZW50QW5FbGVtZW50ID0gaXNIVE1MRWxlbWVudChvZmZzZXRQYXJlbnQpO1xuICB2YXIgc2Nyb2xsID0ge1xuICAgIHNjcm9sbExlZnQ6IDAsXG4gICAgc2Nyb2xsVG9wOiAwXG4gIH07XG4gIHZhciBvZmZzZXRzID0ge1xuICAgIHg6IDAsXG4gICAgeTogMFxuICB9O1xuXG4gIGlmIChpc09mZnNldFBhcmVudEFuRWxlbWVudCB8fCAhaXNPZmZzZXRQYXJlbnRBbkVsZW1lbnQgJiYgIWlzRml4ZWQpIHtcbiAgICBpZiAoZ2V0Tm9kZU5hbWUob2Zmc2V0UGFyZW50KSAhPT0gJ2JvZHknIHx8IC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9wb3BwZXJqcy9wb3BwZXItY29yZS9pc3N1ZXMvMTA3OFxuICAgIGlzU2Nyb2xsUGFyZW50KGRvY3VtZW50RWxlbWVudCkpIHtcbiAgICAgIHNjcm9sbCA9IGdldE5vZGVTY3JvbGwob2Zmc2V0UGFyZW50KTtcbiAgICB9XG5cbiAgICBpZiAoaXNIVE1MRWxlbWVudChvZmZzZXRQYXJlbnQpKSB7XG4gICAgICBvZmZzZXRzID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KG9mZnNldFBhcmVudCk7XG4gICAgICBvZmZzZXRzLnggKz0gb2Zmc2V0UGFyZW50LmNsaWVudExlZnQ7XG4gICAgICBvZmZzZXRzLnkgKz0gb2Zmc2V0UGFyZW50LmNsaWVudFRvcDtcbiAgICB9IGVsc2UgaWYgKGRvY3VtZW50RWxlbWVudCkge1xuICAgICAgb2Zmc2V0cy54ID0gZ2V0V2luZG93U2Nyb2xsQmFyWChkb2N1bWVudEVsZW1lbnQpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgeDogcmVjdC5sZWZ0ICsgc2Nyb2xsLnNjcm9sbExlZnQgLSBvZmZzZXRzLngsXG4gICAgeTogcmVjdC50b3AgKyBzY3JvbGwuc2Nyb2xsVG9wIC0gb2Zmc2V0cy55LFxuICAgIHdpZHRoOiByZWN0LndpZHRoLFxuICAgIGhlaWdodDogcmVjdC5oZWlnaHRcbiAgfTtcbn0iLCJpbXBvcnQgZ2V0V2luZG93U2Nyb2xsIGZyb20gXCIuL2dldFdpbmRvd1Njcm9sbC5qc1wiO1xuaW1wb3J0IGdldFdpbmRvdyBmcm9tIFwiLi9nZXRXaW5kb3cuanNcIjtcbmltcG9ydCB7IGlzSFRNTEVsZW1lbnQgfSBmcm9tIFwiLi9pbnN0YW5jZU9mLmpzXCI7XG5pbXBvcnQgZ2V0SFRNTEVsZW1lbnRTY3JvbGwgZnJvbSBcIi4vZ2V0SFRNTEVsZW1lbnRTY3JvbGwuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldE5vZGVTY3JvbGwobm9kZSkge1xuICBpZiAobm9kZSA9PT0gZ2V0V2luZG93KG5vZGUpIHx8ICFpc0hUTUxFbGVtZW50KG5vZGUpKSB7XG4gICAgcmV0dXJuIGdldFdpbmRvd1Njcm9sbChub2RlKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZ2V0SFRNTEVsZW1lbnRTY3JvbGwobm9kZSk7XG4gIH1cbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRIVE1MRWxlbWVudFNjcm9sbChlbGVtZW50KSB7XG4gIHJldHVybiB7XG4gICAgc2Nyb2xsTGVmdDogZWxlbWVudC5zY3JvbGxMZWZ0LFxuICAgIHNjcm9sbFRvcDogZWxlbWVudC5zY3JvbGxUb3BcbiAgfTtcbn0iLCIvLyBSZXR1cm5zIHRoZSBsYXlvdXQgcmVjdCBvZiBhbiBlbGVtZW50IHJlbGF0aXZlIHRvIGl0cyBvZmZzZXRQYXJlbnQuIExheW91dFxuLy8gbWVhbnMgaXQgZG9lc24ndCB0YWtlIGludG8gYWNjb3VudCB0cmFuc2Zvcm1zLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0TGF5b3V0UmVjdChlbGVtZW50KSB7XG4gIHJldHVybiB7XG4gICAgeDogZWxlbWVudC5vZmZzZXRMZWZ0LFxuICAgIHk6IGVsZW1lbnQub2Zmc2V0VG9wLFxuICAgIHdpZHRoOiBlbGVtZW50Lm9mZnNldFdpZHRoLFxuICAgIGhlaWdodDogZWxlbWVudC5vZmZzZXRIZWlnaHRcbiAgfTtcbn0iLCJpbXBvcnQgZ2V0Tm9kZU5hbWUgZnJvbSBcIi4vZ2V0Tm9kZU5hbWUuanNcIjtcbmltcG9ydCBnZXREb2N1bWVudEVsZW1lbnQgZnJvbSBcIi4vZ2V0RG9jdW1lbnRFbGVtZW50LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRQYXJlbnROb2RlKGVsZW1lbnQpIHtcbiAgaWYgKGdldE5vZGVOYW1lKGVsZW1lbnQpID09PSAnaHRtbCcpIHtcbiAgICByZXR1cm4gZWxlbWVudDtcbiAgfVxuXG4gIHJldHVybiAoLy8gdGhpcyBpcyBhIHF1aWNrZXIgKGJ1dCBsZXNzIHR5cGUgc2FmZSkgd2F5IHRvIHNhdmUgcXVpdGUgc29tZSBieXRlcyBmcm9tIHRoZSBidW5kbGVcbiAgICAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS1yZXR1cm5dXG4gICAgLy8gJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddXG4gICAgZWxlbWVudC5hc3NpZ25lZFNsb3QgfHwgLy8gc3RlcCBpbnRvIHRoZSBzaGFkb3cgRE9NIG9mIHRoZSBwYXJlbnQgb2YgYSBzbG90dGVkIG5vZGVcbiAgICBlbGVtZW50LnBhcmVudE5vZGUgfHwgLy8gRE9NIEVsZW1lbnQgZGV0ZWN0ZWRcbiAgICAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS1yZXR1cm5dOiBuZWVkIGEgYmV0dGVyIHdheSB0byBoYW5kbGUgdGhpcy4uLlxuICAgIGVsZW1lbnQuaG9zdCB8fCAvLyBTaGFkb3dSb290IGRldGVjdGVkXG4gICAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtY2FsbF06IEhUTUxFbGVtZW50IGlzIGEgTm9kZVxuICAgIGdldERvY3VtZW50RWxlbWVudChlbGVtZW50KSAvLyBmYWxsYmFja1xuXG4gICk7XG59IiwiaW1wb3J0IGdldFBhcmVudE5vZGUgZnJvbSBcIi4vZ2V0UGFyZW50Tm9kZS5qc1wiO1xuaW1wb3J0IGlzU2Nyb2xsUGFyZW50IGZyb20gXCIuL2lzU2Nyb2xsUGFyZW50LmpzXCI7XG5pbXBvcnQgZ2V0Tm9kZU5hbWUgZnJvbSBcIi4vZ2V0Tm9kZU5hbWUuanNcIjtcbmltcG9ydCB7IGlzSFRNTEVsZW1lbnQgfSBmcm9tIFwiLi9pbnN0YW5jZU9mLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRTY3JvbGxQYXJlbnQobm9kZSkge1xuICBpZiAoWydodG1sJywgJ2JvZHknLCAnI2RvY3VtZW50J10uaW5kZXhPZihnZXROb2RlTmFtZShub2RlKSkgPj0gMCkge1xuICAgIC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXJldHVybl06IGFzc3VtZSBib2R5IGlzIGFsd2F5cyBhdmFpbGFibGVcbiAgICByZXR1cm4gbm9kZS5vd25lckRvY3VtZW50LmJvZHk7XG4gIH1cblxuICBpZiAoaXNIVE1MRWxlbWVudChub2RlKSAmJiBpc1Njcm9sbFBhcmVudChub2RlKSkge1xuICAgIHJldHVybiBub2RlO1xuICB9XG5cbiAgcmV0dXJuIGdldFNjcm9sbFBhcmVudChnZXRQYXJlbnROb2RlKG5vZGUpKTtcbn0iLCJpbXBvcnQgZ2V0U2Nyb2xsUGFyZW50IGZyb20gXCIuL2dldFNjcm9sbFBhcmVudC5qc1wiO1xuaW1wb3J0IGdldFBhcmVudE5vZGUgZnJvbSBcIi4vZ2V0UGFyZW50Tm9kZS5qc1wiO1xuaW1wb3J0IGdldE5vZGVOYW1lIGZyb20gXCIuL2dldE5vZGVOYW1lLmpzXCI7XG5pbXBvcnQgZ2V0V2luZG93IGZyb20gXCIuL2dldFdpbmRvdy5qc1wiO1xuaW1wb3J0IGlzU2Nyb2xsUGFyZW50IGZyb20gXCIuL2lzU2Nyb2xsUGFyZW50LmpzXCI7XG4vKlxuZ2l2ZW4gYSBET00gZWxlbWVudCwgcmV0dXJuIHRoZSBsaXN0IG9mIGFsbCBzY3JvbGwgcGFyZW50cywgdXAgdGhlIGxpc3Qgb2YgYW5jZXNvcnNcbnVudGlsIHdlIGdldCB0byB0aGUgdG9wIHdpbmRvdyBvYmplY3QuIFRoaXMgbGlzdCBpcyB3aGF0IHdlIGF0dGFjaCBzY3JvbGwgbGlzdGVuZXJzXG50bywgYmVjYXVzZSBpZiBhbnkgb2YgdGhlc2UgcGFyZW50IGVsZW1lbnRzIHNjcm9sbCwgd2UnbGwgbmVlZCB0byByZS1jYWxjdWxhdGUgdGhlXG5yZWZlcmVuY2UgZWxlbWVudCdzIHBvc2l0aW9uLlxuKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbGlzdFNjcm9sbFBhcmVudHMoZWxlbWVudCwgbGlzdCkge1xuICBpZiAobGlzdCA9PT0gdm9pZCAwKSB7XG4gICAgbGlzdCA9IFtdO1xuICB9XG5cbiAgdmFyIHNjcm9sbFBhcmVudCA9IGdldFNjcm9sbFBhcmVudChlbGVtZW50KTtcbiAgdmFyIGlzQm9keSA9IGdldE5vZGVOYW1lKHNjcm9sbFBhcmVudCkgPT09ICdib2R5JztcbiAgdmFyIHdpbiA9IGdldFdpbmRvdyhzY3JvbGxQYXJlbnQpO1xuICB2YXIgdGFyZ2V0ID0gaXNCb2R5ID8gW3dpbl0uY29uY2F0KHdpbi52aXN1YWxWaWV3cG9ydCB8fCBbXSwgaXNTY3JvbGxQYXJlbnQoc2Nyb2xsUGFyZW50KSA/IHNjcm9sbFBhcmVudCA6IFtdKSA6IHNjcm9sbFBhcmVudDtcbiAgdmFyIHVwZGF0ZWRMaXN0ID0gbGlzdC5jb25jYXQodGFyZ2V0KTtcbiAgcmV0dXJuIGlzQm9keSA/IHVwZGF0ZWRMaXN0IDogLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtY2FsbF06IGlzQm9keSB0ZWxscyB1cyB0YXJnZXQgd2lsbCBiZSBhbiBIVE1MRWxlbWVudCBoZXJlXG4gIHVwZGF0ZWRMaXN0LmNvbmNhdChsaXN0U2Nyb2xsUGFyZW50cyhnZXRQYXJlbnROb2RlKHRhcmdldCkpKTtcbn0iLCJpbXBvcnQgZ2V0Tm9kZU5hbWUgZnJvbSBcIi4vZ2V0Tm9kZU5hbWUuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzVGFibGVFbGVtZW50KGVsZW1lbnQpIHtcbiAgcmV0dXJuIFsndGFibGUnLCAndGQnLCAndGgnXS5pbmRleE9mKGdldE5vZGVOYW1lKGVsZW1lbnQpKSA+PSAwO1xufSIsImltcG9ydCBnZXRXaW5kb3cgZnJvbSBcIi4vZ2V0V2luZG93LmpzXCI7XG5pbXBvcnQgZ2V0Tm9kZU5hbWUgZnJvbSBcIi4vZ2V0Tm9kZU5hbWUuanNcIjtcbmltcG9ydCBnZXRDb21wdXRlZFN0eWxlIGZyb20gXCIuL2dldENvbXB1dGVkU3R5bGUuanNcIjtcbmltcG9ydCB7IGlzSFRNTEVsZW1lbnQgfSBmcm9tIFwiLi9pbnN0YW5jZU9mLmpzXCI7XG5pbXBvcnQgaXNUYWJsZUVsZW1lbnQgZnJvbSBcIi4vaXNUYWJsZUVsZW1lbnQuanNcIjtcbmltcG9ydCBnZXRQYXJlbnROb2RlIGZyb20gXCIuL2dldFBhcmVudE5vZGUuanNcIjtcbmltcG9ydCBnZXREb2N1bWVudEVsZW1lbnQgZnJvbSBcIi4vZ2V0RG9jdW1lbnRFbGVtZW50LmpzXCI7XG5cbmZ1bmN0aW9uIGdldFRydWVPZmZzZXRQYXJlbnQoZWxlbWVudCkge1xuICBpZiAoIWlzSFRNTEVsZW1lbnQoZWxlbWVudCkgfHwgLy8gaHR0cHM6Ly9naXRodWIuY29tL3BvcHBlcmpzL3BvcHBlci1jb3JlL2lzc3Vlcy84MzdcbiAgZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KS5wb3NpdGlvbiA9PT0gJ2ZpeGVkJykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIG9mZnNldFBhcmVudCA9IGVsZW1lbnQub2Zmc2V0UGFyZW50O1xuXG4gIGlmIChvZmZzZXRQYXJlbnQpIHtcbiAgICB2YXIgaHRtbCA9IGdldERvY3VtZW50RWxlbWVudChvZmZzZXRQYXJlbnQpO1xuXG4gICAgaWYgKGdldE5vZGVOYW1lKG9mZnNldFBhcmVudCkgPT09ICdib2R5JyAmJiBnZXRDb21wdXRlZFN0eWxlKG9mZnNldFBhcmVudCkucG9zaXRpb24gPT09ICdzdGF0aWMnICYmIGdldENvbXB1dGVkU3R5bGUoaHRtbCkucG9zaXRpb24gIT09ICdzdGF0aWMnKSB7XG4gICAgICByZXR1cm4gaHRtbDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gb2Zmc2V0UGFyZW50O1xufSAvLyBgLm9mZnNldFBhcmVudGAgcmVwb3J0cyBgbnVsbGAgZm9yIGZpeGVkIGVsZW1lbnRzLCB3aGlsZSBhYnNvbHV0ZSBlbGVtZW50c1xuLy8gcmV0dXJuIHRoZSBjb250YWluaW5nIGJsb2NrXG5cblxuZnVuY3Rpb24gZ2V0Q29udGFpbmluZ0Jsb2NrKGVsZW1lbnQpIHtcbiAgdmFyIGN1cnJlbnROb2RlID0gZ2V0UGFyZW50Tm9kZShlbGVtZW50KTtcblxuICB3aGlsZSAoaXNIVE1MRWxlbWVudChjdXJyZW50Tm9kZSkgJiYgWydodG1sJywgJ2JvZHknXS5pbmRleE9mKGdldE5vZGVOYW1lKGN1cnJlbnROb2RlKSkgPCAwKSB7XG4gICAgdmFyIGNzcyA9IGdldENvbXB1dGVkU3R5bGUoY3VycmVudE5vZGUpOyAvLyBUaGlzIGlzIG5vbi1leGhhdXN0aXZlIGJ1dCBjb3ZlcnMgdGhlIG1vc3QgY29tbW9uIENTUyBwcm9wZXJ0aWVzIHRoYXRcbiAgICAvLyBjcmVhdGUgYSBjb250YWluaW5nIGJsb2NrLlxuXG4gICAgaWYgKGNzcy50cmFuc2Zvcm0gIT09ICdub25lJyB8fCBjc3MucGVyc3BlY3RpdmUgIT09ICdub25lJyB8fCBjc3Mud2lsbENoYW5nZSAmJiBjc3Mud2lsbENoYW5nZSAhPT0gJ2F1dG8nKSB7XG4gICAgICByZXR1cm4gY3VycmVudE5vZGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGN1cnJlbnROb2RlID0gY3VycmVudE5vZGUucGFyZW50Tm9kZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn0gLy8gR2V0cyB0aGUgY2xvc2VzdCBhbmNlc3RvciBwb3NpdGlvbmVkIGVsZW1lbnQuIEhhbmRsZXMgc29tZSBlZGdlIGNhc2VzLFxuLy8gc3VjaCBhcyB0YWJsZSBhbmNlc3RvcnMgYW5kIGNyb3NzIGJyb3dzZXIgYnVncy5cblxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRPZmZzZXRQYXJlbnQoZWxlbWVudCkge1xuICB2YXIgd2luZG93ID0gZ2V0V2luZG93KGVsZW1lbnQpO1xuICB2YXIgb2Zmc2V0UGFyZW50ID0gZ2V0VHJ1ZU9mZnNldFBhcmVudChlbGVtZW50KTtcblxuICB3aGlsZSAob2Zmc2V0UGFyZW50ICYmIGlzVGFibGVFbGVtZW50KG9mZnNldFBhcmVudCkgJiYgZ2V0Q29tcHV0ZWRTdHlsZShvZmZzZXRQYXJlbnQpLnBvc2l0aW9uID09PSAnc3RhdGljJykge1xuICAgIG9mZnNldFBhcmVudCA9IGdldFRydWVPZmZzZXRQYXJlbnQob2Zmc2V0UGFyZW50KTtcbiAgfVxuXG4gIGlmIChvZmZzZXRQYXJlbnQgJiYgZ2V0Tm9kZU5hbWUob2Zmc2V0UGFyZW50KSA9PT0gJ2JvZHknICYmIGdldENvbXB1dGVkU3R5bGUob2Zmc2V0UGFyZW50KS5wb3NpdGlvbiA9PT0gJ3N0YXRpYycpIHtcbiAgICByZXR1cm4gd2luZG93O1xuICB9XG5cbiAgcmV0dXJuIG9mZnNldFBhcmVudCB8fCBnZXRDb250YWluaW5nQmxvY2soZWxlbWVudCkgfHwgd2luZG93O1xufSIsImV4cG9ydCB2YXIgdG9wID0gJ3RvcCc7XG5leHBvcnQgdmFyIGJvdHRvbSA9ICdib3R0b20nO1xuZXhwb3J0IHZhciByaWdodCA9ICdyaWdodCc7XG5leHBvcnQgdmFyIGxlZnQgPSAnbGVmdCc7XG5leHBvcnQgdmFyIGF1dG8gPSAnYXV0byc7XG5leHBvcnQgdmFyIGJhc2VQbGFjZW1lbnRzID0gW3RvcCwgYm90dG9tLCByaWdodCwgbGVmdF07XG5leHBvcnQgdmFyIHN0YXJ0ID0gJ3N0YXJ0JztcbmV4cG9ydCB2YXIgZW5kID0gJ2VuZCc7XG5leHBvcnQgdmFyIGNsaXBwaW5nUGFyZW50cyA9ICdjbGlwcGluZ1BhcmVudHMnO1xuZXhwb3J0IHZhciB2aWV3cG9ydCA9ICd2aWV3cG9ydCc7XG5leHBvcnQgdmFyIHBvcHBlciA9ICdwb3BwZXInO1xuZXhwb3J0IHZhciByZWZlcmVuY2UgPSAncmVmZXJlbmNlJztcbmV4cG9ydCB2YXIgdmFyaWF0aW9uUGxhY2VtZW50cyA9IC8qI19fUFVSRV9fKi9iYXNlUGxhY2VtZW50cy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgcGxhY2VtZW50KSB7XG4gIHJldHVybiBhY2MuY29uY2F0KFtwbGFjZW1lbnQgKyBcIi1cIiArIHN0YXJ0LCBwbGFjZW1lbnQgKyBcIi1cIiArIGVuZF0pO1xufSwgW10pO1xuZXhwb3J0IHZhciBwbGFjZW1lbnRzID0gLyojX19QVVJFX18qL1tdLmNvbmNhdChiYXNlUGxhY2VtZW50cywgW2F1dG9dKS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgcGxhY2VtZW50KSB7XG4gIHJldHVybiBhY2MuY29uY2F0KFtwbGFjZW1lbnQsIHBsYWNlbWVudCArIFwiLVwiICsgc3RhcnQsIHBsYWNlbWVudCArIFwiLVwiICsgZW5kXSk7XG59LCBbXSk7IC8vIG1vZGlmaWVycyB0aGF0IG5lZWQgdG8gcmVhZCB0aGUgRE9NXG5cbmV4cG9ydCB2YXIgYmVmb3JlUmVhZCA9ICdiZWZvcmVSZWFkJztcbmV4cG9ydCB2YXIgcmVhZCA9ICdyZWFkJztcbmV4cG9ydCB2YXIgYWZ0ZXJSZWFkID0gJ2FmdGVyUmVhZCc7IC8vIHB1cmUtbG9naWMgbW9kaWZpZXJzXG5cbmV4cG9ydCB2YXIgYmVmb3JlTWFpbiA9ICdiZWZvcmVNYWluJztcbmV4cG9ydCB2YXIgbWFpbiA9ICdtYWluJztcbmV4cG9ydCB2YXIgYWZ0ZXJNYWluID0gJ2FmdGVyTWFpbic7IC8vIG1vZGlmaWVyIHdpdGggdGhlIHB1cnBvc2UgdG8gd3JpdGUgdG8gdGhlIERPTSAob3Igd3JpdGUgaW50byBhIGZyYW1ld29yayBzdGF0ZSlcblxuZXhwb3J0IHZhciBiZWZvcmVXcml0ZSA9ICdiZWZvcmVXcml0ZSc7XG5leHBvcnQgdmFyIHdyaXRlID0gJ3dyaXRlJztcbmV4cG9ydCB2YXIgYWZ0ZXJXcml0ZSA9ICdhZnRlcldyaXRlJztcbmV4cG9ydCB2YXIgbW9kaWZpZXJQaGFzZXMgPSBbYmVmb3JlUmVhZCwgcmVhZCwgYWZ0ZXJSZWFkLCBiZWZvcmVNYWluLCBtYWluLCBhZnRlck1haW4sIGJlZm9yZVdyaXRlLCB3cml0ZSwgYWZ0ZXJXcml0ZV07IiwiaW1wb3J0IHsgbW9kaWZpZXJQaGFzZXMgfSBmcm9tIFwiLi4vZW51bXMuanNcIjsgLy8gc291cmNlOiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy80OTg3NTI1NVxuXG5mdW5jdGlvbiBvcmRlcihtb2RpZmllcnMpIHtcbiAgdmFyIG1hcCA9IG5ldyBNYXAoKTtcbiAgdmFyIHZpc2l0ZWQgPSBuZXcgU2V0KCk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgbW9kaWZpZXJzLmZvckVhY2goZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgbWFwLnNldChtb2RpZmllci5uYW1lLCBtb2RpZmllcik7XG4gIH0pOyAvLyBPbiB2aXNpdGluZyBvYmplY3QsIGNoZWNrIGZvciBpdHMgZGVwZW5kZW5jaWVzIGFuZCB2aXNpdCB0aGVtIHJlY3Vyc2l2ZWx5XG5cbiAgZnVuY3Rpb24gc29ydChtb2RpZmllcikge1xuICAgIHZpc2l0ZWQuYWRkKG1vZGlmaWVyLm5hbWUpO1xuICAgIHZhciByZXF1aXJlcyA9IFtdLmNvbmNhdChtb2RpZmllci5yZXF1aXJlcyB8fCBbXSwgbW9kaWZpZXIucmVxdWlyZXNJZkV4aXN0cyB8fCBbXSk7XG4gICAgcmVxdWlyZXMuZm9yRWFjaChmdW5jdGlvbiAoZGVwKSB7XG4gICAgICBpZiAoIXZpc2l0ZWQuaGFzKGRlcCkpIHtcbiAgICAgICAgdmFyIGRlcE1vZGlmaWVyID0gbWFwLmdldChkZXApO1xuXG4gICAgICAgIGlmIChkZXBNb2RpZmllcikge1xuICAgICAgICAgIHNvcnQoZGVwTW9kaWZpZXIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmVzdWx0LnB1c2gobW9kaWZpZXIpO1xuICB9XG5cbiAgbW9kaWZpZXJzLmZvckVhY2goZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgaWYgKCF2aXNpdGVkLmhhcyhtb2RpZmllci5uYW1lKSkge1xuICAgICAgLy8gY2hlY2sgZm9yIHZpc2l0ZWQgb2JqZWN0XG4gICAgICBzb3J0KG1vZGlmaWVyKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBvcmRlck1vZGlmaWVycyhtb2RpZmllcnMpIHtcbiAgLy8gb3JkZXIgYmFzZWQgb24gZGVwZW5kZW5jaWVzXG4gIHZhciBvcmRlcmVkTW9kaWZpZXJzID0gb3JkZXIobW9kaWZpZXJzKTsgLy8gb3JkZXIgYmFzZWQgb24gcGhhc2VcblxuICByZXR1cm4gbW9kaWZpZXJQaGFzZXMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHBoYXNlKSB7XG4gICAgcmV0dXJuIGFjYy5jb25jYXQob3JkZXJlZE1vZGlmaWVycy5maWx0ZXIoZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgICByZXR1cm4gbW9kaWZpZXIucGhhc2UgPT09IHBoYXNlO1xuICAgIH0pKTtcbiAgfSwgW10pO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRlYm91bmNlKGZuKSB7XG4gIHZhciBwZW5kaW5nO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmICghcGVuZGluZykge1xuICAgICAgcGVuZGluZyA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHBlbmRpbmcgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgcmVzb2x2ZShmbigpKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcGVuZGluZztcbiAgfTtcbn0iLCJpbXBvcnQgZ2V0Q29tcG9zaXRlUmVjdCBmcm9tIFwiLi9kb20tdXRpbHMvZ2V0Q29tcG9zaXRlUmVjdC5qc1wiO1xuaW1wb3J0IGdldExheW91dFJlY3QgZnJvbSBcIi4vZG9tLXV0aWxzL2dldExheW91dFJlY3QuanNcIjtcbmltcG9ydCBsaXN0U2Nyb2xsUGFyZW50cyBmcm9tIFwiLi9kb20tdXRpbHMvbGlzdFNjcm9sbFBhcmVudHMuanNcIjtcbmltcG9ydCBnZXRPZmZzZXRQYXJlbnQgZnJvbSBcIi4vZG9tLXV0aWxzL2dldE9mZnNldFBhcmVudC5qc1wiO1xuaW1wb3J0IGdldENvbXB1dGVkU3R5bGUgZnJvbSBcIi4vZG9tLXV0aWxzL2dldENvbXB1dGVkU3R5bGUuanNcIjtcbmltcG9ydCBvcmRlck1vZGlmaWVycyBmcm9tIFwiLi91dGlscy9vcmRlck1vZGlmaWVycy5qc1wiO1xuaW1wb3J0IGRlYm91bmNlIGZyb20gXCIuL3V0aWxzL2RlYm91bmNlLmpzXCI7XG5pbXBvcnQgdmFsaWRhdGVNb2RpZmllcnMgZnJvbSBcIi4vdXRpbHMvdmFsaWRhdGVNb2RpZmllcnMuanNcIjtcbmltcG9ydCB1bmlxdWVCeSBmcm9tIFwiLi91dGlscy91bmlxdWVCeS5qc1wiO1xuaW1wb3J0IGdldEJhc2VQbGFjZW1lbnQgZnJvbSBcIi4vdXRpbHMvZ2V0QmFzZVBsYWNlbWVudC5qc1wiO1xuaW1wb3J0IG1lcmdlQnlOYW1lIGZyb20gXCIuL3V0aWxzL21lcmdlQnlOYW1lLmpzXCI7XG5pbXBvcnQgZGV0ZWN0T3ZlcmZsb3cgZnJvbSBcIi4vdXRpbHMvZGV0ZWN0T3ZlcmZsb3cuanNcIjtcbmltcG9ydCB7IGlzRWxlbWVudCB9IGZyb20gXCIuL2RvbS11dGlscy9pbnN0YW5jZU9mLmpzXCI7XG5pbXBvcnQgeyBhdXRvIH0gZnJvbSBcIi4vZW51bXMuanNcIjtcbnZhciBJTlZBTElEX0VMRU1FTlRfRVJST1IgPSAnUG9wcGVyOiBJbnZhbGlkIHJlZmVyZW5jZSBvciBwb3BwZXIgYXJndW1lbnQgcHJvdmlkZWQuIFRoZXkgbXVzdCBiZSBlaXRoZXIgYSBET00gZWxlbWVudCBvciB2aXJ0dWFsIGVsZW1lbnQuJztcbnZhciBJTkZJTklURV9MT09QX0VSUk9SID0gJ1BvcHBlcjogQW4gaW5maW5pdGUgbG9vcCBpbiB0aGUgbW9kaWZpZXJzIGN5Y2xlIGhhcyBiZWVuIGRldGVjdGVkISBUaGUgY3ljbGUgaGFzIGJlZW4gaW50ZXJydXB0ZWQgdG8gcHJldmVudCBhIGJyb3dzZXIgY3Jhc2guJztcbnZhciBERUZBVUxUX09QVElPTlMgPSB7XG4gIHBsYWNlbWVudDogJ2JvdHRvbScsXG4gIG1vZGlmaWVyczogW10sXG4gIHN0cmF0ZWd5OiAnYWJzb2x1dGUnXG59O1xuXG5mdW5jdGlvbiBhcmVWYWxpZEVsZW1lbnRzKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuICFhcmdzLnNvbWUoZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICByZXR1cm4gIShlbGVtZW50ICYmIHR5cGVvZiBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCA9PT0gJ2Z1bmN0aW9uJyk7XG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcG9wcGVyR2VuZXJhdG9yKGdlbmVyYXRvck9wdGlvbnMpIHtcbiAgaWYgKGdlbmVyYXRvck9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIGdlbmVyYXRvck9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIHZhciBfZ2VuZXJhdG9yT3B0aW9ucyA9IGdlbmVyYXRvck9wdGlvbnMsXG4gICAgICBfZ2VuZXJhdG9yT3B0aW9ucyRkZWYgPSBfZ2VuZXJhdG9yT3B0aW9ucy5kZWZhdWx0TW9kaWZpZXJzLFxuICAgICAgZGVmYXVsdE1vZGlmaWVycyA9IF9nZW5lcmF0b3JPcHRpb25zJGRlZiA9PT0gdm9pZCAwID8gW10gOiBfZ2VuZXJhdG9yT3B0aW9ucyRkZWYsXG4gICAgICBfZ2VuZXJhdG9yT3B0aW9ucyRkZWYyID0gX2dlbmVyYXRvck9wdGlvbnMuZGVmYXVsdE9wdGlvbnMsXG4gICAgICBkZWZhdWx0T3B0aW9ucyA9IF9nZW5lcmF0b3JPcHRpb25zJGRlZjIgPT09IHZvaWQgMCA/IERFRkFVTFRfT1BUSU9OUyA6IF9nZW5lcmF0b3JPcHRpb25zJGRlZjI7XG4gIHJldHVybiBmdW5jdGlvbiBjcmVhdGVQb3BwZXIocmVmZXJlbmNlLCBwb3BwZXIsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0gZGVmYXVsdE9wdGlvbnM7XG4gICAgfVxuXG4gICAgdmFyIHN0YXRlID0ge1xuICAgICAgcGxhY2VtZW50OiAnYm90dG9tJyxcbiAgICAgIG9yZGVyZWRNb2RpZmllcnM6IFtdLFxuICAgICAgb3B0aW9uczogT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBERUZBVUxUX09QVElPTlMpLCBkZWZhdWx0T3B0aW9ucyksXG4gICAgICBtb2RpZmllcnNEYXRhOiB7fSxcbiAgICAgIGVsZW1lbnRzOiB7XG4gICAgICAgIHJlZmVyZW5jZTogcmVmZXJlbmNlLFxuICAgICAgICBwb3BwZXI6IHBvcHBlclxuICAgICAgfSxcbiAgICAgIGF0dHJpYnV0ZXM6IHt9LFxuICAgICAgc3R5bGVzOiB7fVxuICAgIH07XG4gICAgdmFyIGVmZmVjdENsZWFudXBGbnMgPSBbXTtcbiAgICB2YXIgaXNEZXN0cm95ZWQgPSBmYWxzZTtcbiAgICB2YXIgaW5zdGFuY2UgPSB7XG4gICAgICBzdGF0ZTogc3RhdGUsXG4gICAgICBzZXRPcHRpb25zOiBmdW5jdGlvbiBzZXRPcHRpb25zKG9wdGlvbnMpIHtcbiAgICAgICAgY2xlYW51cE1vZGlmaWVyRWZmZWN0cygpO1xuICAgICAgICBzdGF0ZS5vcHRpb25zID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGRlZmF1bHRPcHRpb25zKSwgc3RhdGUub3B0aW9ucyksIG9wdGlvbnMpO1xuICAgICAgICBzdGF0ZS5zY3JvbGxQYXJlbnRzID0ge1xuICAgICAgICAgIHJlZmVyZW5jZTogaXNFbGVtZW50KHJlZmVyZW5jZSkgPyBsaXN0U2Nyb2xsUGFyZW50cyhyZWZlcmVuY2UpIDogcmVmZXJlbmNlLmNvbnRleHRFbGVtZW50ID8gbGlzdFNjcm9sbFBhcmVudHMocmVmZXJlbmNlLmNvbnRleHRFbGVtZW50KSA6IFtdLFxuICAgICAgICAgIHBvcHBlcjogbGlzdFNjcm9sbFBhcmVudHMocG9wcGVyKVxuICAgICAgICB9OyAvLyBPcmRlcnMgdGhlIG1vZGlmaWVycyBiYXNlZCBvbiB0aGVpciBkZXBlbmRlbmNpZXMgYW5kIGBwaGFzZWBcbiAgICAgICAgLy8gcHJvcGVydGllc1xuXG4gICAgICAgIHZhciBvcmRlcmVkTW9kaWZpZXJzID0gb3JkZXJNb2RpZmllcnMobWVyZ2VCeU5hbWUoW10uY29uY2F0KGRlZmF1bHRNb2RpZmllcnMsIHN0YXRlLm9wdGlvbnMubW9kaWZpZXJzKSkpOyAvLyBTdHJpcCBvdXQgZGlzYWJsZWQgbW9kaWZpZXJzXG5cbiAgICAgICAgc3RhdGUub3JkZXJlZE1vZGlmaWVycyA9IG9yZGVyZWRNb2RpZmllcnMuZmlsdGVyKGZ1bmN0aW9uIChtKSB7XG4gICAgICAgICAgcmV0dXJuIG0uZW5hYmxlZDtcbiAgICAgICAgfSk7IC8vIFZhbGlkYXRlIHRoZSBwcm92aWRlZCBtb2RpZmllcnMgc28gdGhhdCB0aGUgY29uc3VtZXIgd2lsbCBnZXQgd2FybmVkXG4gICAgICAgIC8vIGlmIG9uZSBvZiB0aGUgbW9kaWZpZXJzIGlzIGludmFsaWQgZm9yIGFueSByZWFzb25cblxuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgICAgdmFyIG1vZGlmaWVycyA9IHVuaXF1ZUJ5KFtdLmNvbmNhdChvcmRlcmVkTW9kaWZpZXJzLCBzdGF0ZS5vcHRpb25zLm1vZGlmaWVycyksIGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICAgICAgICB2YXIgbmFtZSA9IF9yZWYubmFtZTtcbiAgICAgICAgICAgIHJldHVybiBuYW1lO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHZhbGlkYXRlTW9kaWZpZXJzKG1vZGlmaWVycyk7XG5cbiAgICAgICAgICBpZiAoZ2V0QmFzZVBsYWNlbWVudChzdGF0ZS5vcHRpb25zLnBsYWNlbWVudCkgPT09IGF1dG8pIHtcbiAgICAgICAgICAgIHZhciBmbGlwTW9kaWZpZXIgPSBzdGF0ZS5vcmRlcmVkTW9kaWZpZXJzLmZpbmQoZnVuY3Rpb24gKF9yZWYyKSB7XG4gICAgICAgICAgICAgIHZhciBuYW1lID0gX3JlZjIubmFtZTtcbiAgICAgICAgICAgICAgcmV0dXJuIG5hbWUgPT09ICdmbGlwJztcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpZiAoIWZsaXBNb2RpZmllcikge1xuICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFsnUG9wcGVyOiBcImF1dG9cIiBwbGFjZW1lbnRzIHJlcXVpcmUgdGhlIFwiZmxpcFwiIG1vZGlmaWVyIGJlJywgJ3ByZXNlbnQgYW5kIGVuYWJsZWQgdG8gd29yay4nXS5qb2luKCcgJykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBfZ2V0Q29tcHV0ZWRTdHlsZSA9IGdldENvbXB1dGVkU3R5bGUocG9wcGVyKSxcbiAgICAgICAgICAgICAgbWFyZ2luVG9wID0gX2dldENvbXB1dGVkU3R5bGUubWFyZ2luVG9wLFxuICAgICAgICAgICAgICBtYXJnaW5SaWdodCA9IF9nZXRDb21wdXRlZFN0eWxlLm1hcmdpblJpZ2h0LFxuICAgICAgICAgICAgICBtYXJnaW5Cb3R0b20gPSBfZ2V0Q29tcHV0ZWRTdHlsZS5tYXJnaW5Cb3R0b20sXG4gICAgICAgICAgICAgIG1hcmdpbkxlZnQgPSBfZ2V0Q29tcHV0ZWRTdHlsZS5tYXJnaW5MZWZ0OyAvLyBXZSBubyBsb25nZXIgdGFrZSBpbnRvIGFjY291bnQgYG1hcmdpbnNgIG9uIHRoZSBwb3BwZXIsIGFuZCBpdCBjYW5cbiAgICAgICAgICAvLyBjYXVzZSBidWdzIHdpdGggcG9zaXRpb25pbmcsIHNvIHdlJ2xsIHdhcm4gdGhlIGNvbnN1bWVyXG5cblxuICAgICAgICAgIGlmIChbbWFyZ2luVG9wLCBtYXJnaW5SaWdodCwgbWFyZ2luQm90dG9tLCBtYXJnaW5MZWZ0XS5zb21lKGZ1bmN0aW9uIChtYXJnaW4pIHtcbiAgICAgICAgICAgIHJldHVybiBwYXJzZUZsb2F0KG1hcmdpbik7XG4gICAgICAgICAgfSkpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihbJ1BvcHBlcjogQ1NTIFwibWFyZ2luXCIgc3R5bGVzIGNhbm5vdCBiZSB1c2VkIHRvIGFwcGx5IHBhZGRpbmcnLCAnYmV0d2VlbiB0aGUgcG9wcGVyIGFuZCBpdHMgcmVmZXJlbmNlIGVsZW1lbnQgb3IgYm91bmRhcnkuJywgJ1RvIHJlcGxpY2F0ZSBtYXJnaW4sIHVzZSB0aGUgYG9mZnNldGAgbW9kaWZpZXIsIGFzIHdlbGwgYXMnLCAndGhlIGBwYWRkaW5nYCBvcHRpb24gaW4gdGhlIGBwcmV2ZW50T3ZlcmZsb3dgIGFuZCBgZmxpcGAnLCAnbW9kaWZpZXJzLiddLmpvaW4oJyAnKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcnVuTW9kaWZpZXJFZmZlY3RzKCk7XG4gICAgICAgIHJldHVybiBpbnN0YW5jZS51cGRhdGUoKTtcbiAgICAgIH0sXG4gICAgICAvLyBTeW5jIHVwZGF0ZSDigJMgaXQgd2lsbCBhbHdheXMgYmUgZXhlY3V0ZWQsIGV2ZW4gaWYgbm90IG5lY2Vzc2FyeS4gVGhpc1xuICAgICAgLy8gaXMgdXNlZnVsIGZvciBsb3cgZnJlcXVlbmN5IHVwZGF0ZXMgd2hlcmUgc3luYyBiZWhhdmlvciBzaW1wbGlmaWVzIHRoZVxuICAgICAgLy8gbG9naWMuXG4gICAgICAvLyBGb3IgaGlnaCBmcmVxdWVuY3kgdXBkYXRlcyAoZS5nLiBgcmVzaXplYCBhbmQgYHNjcm9sbGAgZXZlbnRzKSwgYWx3YXlzXG4gICAgICAvLyBwcmVmZXIgdGhlIGFzeW5jIFBvcHBlciN1cGRhdGUgbWV0aG9kXG4gICAgICBmb3JjZVVwZGF0ZTogZnVuY3Rpb24gZm9yY2VVcGRhdGUoKSB7XG4gICAgICAgIGlmIChpc0Rlc3Ryb3llZCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBfc3RhdGUkZWxlbWVudHMgPSBzdGF0ZS5lbGVtZW50cyxcbiAgICAgICAgICAgIHJlZmVyZW5jZSA9IF9zdGF0ZSRlbGVtZW50cy5yZWZlcmVuY2UsXG4gICAgICAgICAgICBwb3BwZXIgPSBfc3RhdGUkZWxlbWVudHMucG9wcGVyOyAvLyBEb24ndCBwcm9jZWVkIGlmIGByZWZlcmVuY2VgIG9yIGBwb3BwZXJgIGFyZSBub3QgdmFsaWQgZWxlbWVudHNcbiAgICAgICAgLy8gYW55bW9yZVxuXG4gICAgICAgIGlmICghYXJlVmFsaWRFbGVtZW50cyhyZWZlcmVuY2UsIHBvcHBlcikpIHtcbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKElOVkFMSURfRUxFTUVOVF9FUlJPUik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IC8vIFN0b3JlIHRoZSByZWZlcmVuY2UgYW5kIHBvcHBlciByZWN0cyB0byBiZSByZWFkIGJ5IG1vZGlmaWVyc1xuXG5cbiAgICAgICAgc3RhdGUucmVjdHMgPSB7XG4gICAgICAgICAgcmVmZXJlbmNlOiBnZXRDb21wb3NpdGVSZWN0KHJlZmVyZW5jZSwgZ2V0T2Zmc2V0UGFyZW50KHBvcHBlciksIHN0YXRlLm9wdGlvbnMuc3RyYXRlZ3kgPT09ICdmaXhlZCcpLFxuICAgICAgICAgIHBvcHBlcjogZ2V0TGF5b3V0UmVjdChwb3BwZXIpXG4gICAgICAgIH07IC8vIE1vZGlmaWVycyBoYXZlIHRoZSBhYmlsaXR5IHRvIHJlc2V0IHRoZSBjdXJyZW50IHVwZGF0ZSBjeWNsZS4gVGhlXG4gICAgICAgIC8vIG1vc3QgY29tbW9uIHVzZSBjYXNlIGZvciB0aGlzIGlzIHRoZSBgZmxpcGAgbW9kaWZpZXIgY2hhbmdpbmcgdGhlXG4gICAgICAgIC8vIHBsYWNlbWVudCwgd2hpY2ggdGhlbiBuZWVkcyB0byByZS1ydW4gYWxsIHRoZSBtb2RpZmllcnMsIGJlY2F1c2UgdGhlXG4gICAgICAgIC8vIGxvZ2ljIHdhcyBwcmV2aW91c2x5IHJhbiBmb3IgdGhlIHByZXZpb3VzIHBsYWNlbWVudCBhbmQgaXMgdGhlcmVmb3JlXG4gICAgICAgIC8vIHN0YWxlL2luY29ycmVjdFxuXG4gICAgICAgIHN0YXRlLnJlc2V0ID0gZmFsc2U7XG4gICAgICAgIHN0YXRlLnBsYWNlbWVudCA9IHN0YXRlLm9wdGlvbnMucGxhY2VtZW50OyAvLyBPbiBlYWNoIHVwZGF0ZSBjeWNsZSwgdGhlIGBtb2RpZmllcnNEYXRhYCBwcm9wZXJ0eSBmb3IgZWFjaCBtb2RpZmllclxuICAgICAgICAvLyBpcyBmaWxsZWQgd2l0aCB0aGUgaW5pdGlhbCBkYXRhIHNwZWNpZmllZCBieSB0aGUgbW9kaWZpZXIuIFRoaXMgbWVhbnNcbiAgICAgICAgLy8gaXQgZG9lc24ndCBwZXJzaXN0IGFuZCBpcyBmcmVzaCBvbiBlYWNoIHVwZGF0ZS5cbiAgICAgICAgLy8gVG8gZW5zdXJlIHBlcnNpc3RlbnQgZGF0YSwgdXNlIGAke25hbWV9I3BlcnNpc3RlbnRgXG5cbiAgICAgICAgc3RhdGUub3JkZXJlZE1vZGlmaWVycy5mb3JFYWNoKGZ1bmN0aW9uIChtb2RpZmllcikge1xuICAgICAgICAgIHJldHVybiBzdGF0ZS5tb2RpZmllcnNEYXRhW21vZGlmaWVyLm5hbWVdID0gT2JqZWN0LmFzc2lnbih7fSwgbW9kaWZpZXIuZGF0YSk7XG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgX19kZWJ1Z19sb29wc19fID0gMDtcblxuICAgICAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgc3RhdGUub3JkZXJlZE1vZGlmaWVycy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgICAgICBfX2RlYnVnX2xvb3BzX18gKz0gMTtcblxuICAgICAgICAgICAgaWYgKF9fZGVidWdfbG9vcHNfXyA+IDEwMCkge1xuICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKElORklOSVRFX0xPT1BfRVJST1IpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoc3RhdGUucmVzZXQgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHN0YXRlLnJlc2V0ID0gZmFsc2U7XG4gICAgICAgICAgICBpbmRleCA9IC0xO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIF9zdGF0ZSRvcmRlcmVkTW9kaWZpZSA9IHN0YXRlLm9yZGVyZWRNb2RpZmllcnNbaW5kZXhdLFxuICAgICAgICAgICAgICBmbiA9IF9zdGF0ZSRvcmRlcmVkTW9kaWZpZS5mbixcbiAgICAgICAgICAgICAgX3N0YXRlJG9yZGVyZWRNb2RpZmllMiA9IF9zdGF0ZSRvcmRlcmVkTW9kaWZpZS5vcHRpb25zLFxuICAgICAgICAgICAgICBfb3B0aW9ucyA9IF9zdGF0ZSRvcmRlcmVkTW9kaWZpZTIgPT09IHZvaWQgMCA/IHt9IDogX3N0YXRlJG9yZGVyZWRNb2RpZmllMixcbiAgICAgICAgICAgICAgbmFtZSA9IF9zdGF0ZSRvcmRlcmVkTW9kaWZpZS5uYW1lO1xuXG4gICAgICAgICAgaWYgKHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgc3RhdGUgPSBmbih7XG4gICAgICAgICAgICAgIHN0YXRlOiBzdGF0ZSxcbiAgICAgICAgICAgICAgb3B0aW9uczogX29wdGlvbnMsXG4gICAgICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgICAgICAgIGluc3RhbmNlOiBpbnN0YW5jZVxuICAgICAgICAgICAgfSkgfHwgc3RhdGU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgLy8gQXN5bmMgYW5kIG9wdGltaXN0aWNhbGx5IG9wdGltaXplZCB1cGRhdGUg4oCTIGl0IHdpbGwgbm90IGJlIGV4ZWN1dGVkIGlmXG4gICAgICAvLyBub3QgbmVjZXNzYXJ5IChkZWJvdW5jZWQgdG8gcnVuIGF0IG1vc3Qgb25jZS1wZXItdGljaylcbiAgICAgIHVwZGF0ZTogZGVib3VuY2UoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgICBpbnN0YW5jZS5mb3JjZVVwZGF0ZSgpO1xuICAgICAgICAgIHJlc29sdmUoc3RhdGUpO1xuICAgICAgICB9KTtcbiAgICAgIH0pLFxuICAgICAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgICAgY2xlYW51cE1vZGlmaWVyRWZmZWN0cygpO1xuICAgICAgICBpc0Rlc3Ryb3llZCA9IHRydWU7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGlmICghYXJlVmFsaWRFbGVtZW50cyhyZWZlcmVuY2UsIHBvcHBlcikpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihJTlZBTElEX0VMRU1FTlRfRVJST1IpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgfVxuXG4gICAgaW5zdGFuY2Uuc2V0T3B0aW9ucyhvcHRpb25zKS50aGVuKGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgICAgaWYgKCFpc0Rlc3Ryb3llZCAmJiBvcHRpb25zLm9uRmlyc3RVcGRhdGUpIHtcbiAgICAgICAgb3B0aW9ucy5vbkZpcnN0VXBkYXRlKHN0YXRlKTtcbiAgICAgIH1cbiAgICB9KTsgLy8gTW9kaWZpZXJzIGhhdmUgdGhlIGFiaWxpdHkgdG8gZXhlY3V0ZSBhcmJpdHJhcnkgY29kZSBiZWZvcmUgdGhlIGZpcnN0XG4gICAgLy8gdXBkYXRlIGN5Y2xlIHJ1bnMuIFRoZXkgd2lsbCBiZSBleGVjdXRlZCBpbiB0aGUgc2FtZSBvcmRlciBhcyB0aGUgdXBkYXRlXG4gICAgLy8gY3ljbGUuIFRoaXMgaXMgdXNlZnVsIHdoZW4gYSBtb2RpZmllciBhZGRzIHNvbWUgcGVyc2lzdGVudCBkYXRhIHRoYXRcbiAgICAvLyBvdGhlciBtb2RpZmllcnMgbmVlZCB0byB1c2UsIGJ1dCB0aGUgbW9kaWZpZXIgaXMgcnVuIGFmdGVyIHRoZSBkZXBlbmRlbnRcbiAgICAvLyBvbmUuXG5cbiAgICBmdW5jdGlvbiBydW5Nb2RpZmllckVmZmVjdHMoKSB7XG4gICAgICBzdGF0ZS5vcmRlcmVkTW9kaWZpZXJzLmZvckVhY2goZnVuY3Rpb24gKF9yZWYzKSB7XG4gICAgICAgIHZhciBuYW1lID0gX3JlZjMubmFtZSxcbiAgICAgICAgICAgIF9yZWYzJG9wdGlvbnMgPSBfcmVmMy5vcHRpb25zLFxuICAgICAgICAgICAgb3B0aW9ucyA9IF9yZWYzJG9wdGlvbnMgPT09IHZvaWQgMCA/IHt9IDogX3JlZjMkb3B0aW9ucyxcbiAgICAgICAgICAgIGVmZmVjdCA9IF9yZWYzLmVmZmVjdDtcblxuICAgICAgICBpZiAodHlwZW9mIGVmZmVjdCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHZhciBjbGVhbnVwRm4gPSBlZmZlY3Qoe1xuICAgICAgICAgICAgc3RhdGU6IHN0YXRlLFxuICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgIGluc3RhbmNlOiBpbnN0YW5jZSxcbiAgICAgICAgICAgIG9wdGlvbnM6IG9wdGlvbnNcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIHZhciBub29wRm4gPSBmdW5jdGlvbiBub29wRm4oKSB7fTtcblxuICAgICAgICAgIGVmZmVjdENsZWFudXBGbnMucHVzaChjbGVhbnVwRm4gfHwgbm9vcEZuKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xlYW51cE1vZGlmaWVyRWZmZWN0cygpIHtcbiAgICAgIGVmZmVjdENsZWFudXBGbnMuZm9yRWFjaChmdW5jdGlvbiAoZm4pIHtcbiAgICAgICAgcmV0dXJuIGZuKCk7XG4gICAgICB9KTtcbiAgICAgIGVmZmVjdENsZWFudXBGbnMgPSBbXTtcbiAgICB9XG5cbiAgICByZXR1cm4gaW5zdGFuY2U7XG4gIH07XG59XG5leHBvcnQgdmFyIGNyZWF0ZVBvcHBlciA9IC8qI19fUFVSRV9fKi9wb3BwZXJHZW5lcmF0b3IoKTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5leHBvcnQgeyBkZXRlY3RPdmVyZmxvdyB9OyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1lcmdlQnlOYW1lKG1vZGlmaWVycykge1xuICB2YXIgbWVyZ2VkID0gbW9kaWZpZXJzLnJlZHVjZShmdW5jdGlvbiAobWVyZ2VkLCBjdXJyZW50KSB7XG4gICAgdmFyIGV4aXN0aW5nID0gbWVyZ2VkW2N1cnJlbnQubmFtZV07XG4gICAgbWVyZ2VkW2N1cnJlbnQubmFtZV0gPSBleGlzdGluZyA/IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBleGlzdGluZyksIGN1cnJlbnQpLCB7fSwge1xuICAgICAgb3B0aW9uczogT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBleGlzdGluZy5vcHRpb25zKSwgY3VycmVudC5vcHRpb25zKSxcbiAgICAgIGRhdGE6IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgZXhpc3RpbmcuZGF0YSksIGN1cnJlbnQuZGF0YSlcbiAgICB9KSA6IGN1cnJlbnQ7XG4gICAgcmV0dXJuIG1lcmdlZDtcbiAgfSwge30pOyAvLyBJRTExIGRvZXMgbm90IHN1cHBvcnQgT2JqZWN0LnZhbHVlc1xuXG4gIHJldHVybiBPYmplY3Qua2V5cyhtZXJnZWQpLm1hcChmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuIG1lcmdlZFtrZXldO1xuICB9KTtcbn0iLCJpbXBvcnQgZ2V0V2luZG93IGZyb20gXCIuLi9kb20tdXRpbHMvZ2V0V2luZG93LmpzXCI7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxudmFyIHBhc3NpdmUgPSB7XG4gIHBhc3NpdmU6IHRydWVcbn07XG5cbmZ1bmN0aW9uIGVmZmVjdChfcmVmKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYuc3RhdGUsXG4gICAgICBpbnN0YW5jZSA9IF9yZWYuaW5zdGFuY2UsXG4gICAgICBvcHRpb25zID0gX3JlZi5vcHRpb25zO1xuICB2YXIgX29wdGlvbnMkc2Nyb2xsID0gb3B0aW9ucy5zY3JvbGwsXG4gICAgICBzY3JvbGwgPSBfb3B0aW9ucyRzY3JvbGwgPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyRzY3JvbGwsXG4gICAgICBfb3B0aW9ucyRyZXNpemUgPSBvcHRpb25zLnJlc2l6ZSxcbiAgICAgIHJlc2l6ZSA9IF9vcHRpb25zJHJlc2l6ZSA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9vcHRpb25zJHJlc2l6ZTtcbiAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdyhzdGF0ZS5lbGVtZW50cy5wb3BwZXIpO1xuICB2YXIgc2Nyb2xsUGFyZW50cyA9IFtdLmNvbmNhdChzdGF0ZS5zY3JvbGxQYXJlbnRzLnJlZmVyZW5jZSwgc3RhdGUuc2Nyb2xsUGFyZW50cy5wb3BwZXIpO1xuXG4gIGlmIChzY3JvbGwpIHtcbiAgICBzY3JvbGxQYXJlbnRzLmZvckVhY2goZnVuY3Rpb24gKHNjcm9sbFBhcmVudCkge1xuICAgICAgc2Nyb2xsUGFyZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIGluc3RhbmNlLnVwZGF0ZSwgcGFzc2l2ZSk7XG4gICAgfSk7XG4gIH1cblxuICBpZiAocmVzaXplKSB7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGluc3RhbmNlLnVwZGF0ZSwgcGFzc2l2ZSk7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmIChzY3JvbGwpIHtcbiAgICAgIHNjcm9sbFBhcmVudHMuZm9yRWFjaChmdW5jdGlvbiAoc2Nyb2xsUGFyZW50KSB7XG4gICAgICAgIHNjcm9sbFBhcmVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBpbnN0YW5jZS51cGRhdGUsIHBhc3NpdmUpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHJlc2l6ZSkge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGluc3RhbmNlLnVwZGF0ZSwgcGFzc2l2ZSk7XG4gICAgfVxuICB9O1xufSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cblxuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAnZXZlbnRMaXN0ZW5lcnMnLFxuICBlbmFibGVkOiB0cnVlLFxuICBwaGFzZTogJ3dyaXRlJyxcbiAgZm46IGZ1bmN0aW9uIGZuKCkge30sXG4gIGVmZmVjdDogZWZmZWN0LFxuICBkYXRhOiB7fVxufTsiLCJpbXBvcnQgeyBhdXRvIH0gZnJvbSBcIi4uL2VudW1zLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRCYXNlUGxhY2VtZW50KHBsYWNlbWVudCkge1xuICByZXR1cm4gcGxhY2VtZW50LnNwbGl0KCctJylbMF07XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VmFyaWF0aW9uKHBsYWNlbWVudCkge1xuICByZXR1cm4gcGxhY2VtZW50LnNwbGl0KCctJylbMV07XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50KHBsYWNlbWVudCkge1xuICByZXR1cm4gWyd0b3AnLCAnYm90dG9tJ10uaW5kZXhPZihwbGFjZW1lbnQpID49IDAgPyAneCcgOiAneSc7XG59IiwiaW1wb3J0IGdldEJhc2VQbGFjZW1lbnQgZnJvbSBcIi4vZ2V0QmFzZVBsYWNlbWVudC5qc1wiO1xuaW1wb3J0IGdldFZhcmlhdGlvbiBmcm9tIFwiLi9nZXRWYXJpYXRpb24uanNcIjtcbmltcG9ydCBnZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQgZnJvbSBcIi4vZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50LmpzXCI7XG5pbXBvcnQgeyB0b3AsIHJpZ2h0LCBib3R0b20sIGxlZnQsIHN0YXJ0LCBlbmQgfSBmcm9tIFwiLi4vZW51bXMuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbXB1dGVPZmZzZXRzKF9yZWYpIHtcbiAgdmFyIHJlZmVyZW5jZSA9IF9yZWYucmVmZXJlbmNlLFxuICAgICAgZWxlbWVudCA9IF9yZWYuZWxlbWVudCxcbiAgICAgIHBsYWNlbWVudCA9IF9yZWYucGxhY2VtZW50O1xuICB2YXIgYmFzZVBsYWNlbWVudCA9IHBsYWNlbWVudCA/IGdldEJhc2VQbGFjZW1lbnQocGxhY2VtZW50KSA6IG51bGw7XG4gIHZhciB2YXJpYXRpb24gPSBwbGFjZW1lbnQgPyBnZXRWYXJpYXRpb24ocGxhY2VtZW50KSA6IG51bGw7XG4gIHZhciBjb21tb25YID0gcmVmZXJlbmNlLnggKyByZWZlcmVuY2Uud2lkdGggLyAyIC0gZWxlbWVudC53aWR0aCAvIDI7XG4gIHZhciBjb21tb25ZID0gcmVmZXJlbmNlLnkgKyByZWZlcmVuY2UuaGVpZ2h0IC8gMiAtIGVsZW1lbnQuaGVpZ2h0IC8gMjtcbiAgdmFyIG9mZnNldHM7XG5cbiAgc3dpdGNoIChiYXNlUGxhY2VtZW50KSB7XG4gICAgY2FzZSB0b3A6XG4gICAgICBvZmZzZXRzID0ge1xuICAgICAgICB4OiBjb21tb25YLFxuICAgICAgICB5OiByZWZlcmVuY2UueSAtIGVsZW1lbnQuaGVpZ2h0XG4gICAgICB9O1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIGJvdHRvbTpcbiAgICAgIG9mZnNldHMgPSB7XG4gICAgICAgIHg6IGNvbW1vblgsXG4gICAgICAgIHk6IHJlZmVyZW5jZS55ICsgcmVmZXJlbmNlLmhlaWdodFxuICAgICAgfTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSByaWdodDpcbiAgICAgIG9mZnNldHMgPSB7XG4gICAgICAgIHg6IHJlZmVyZW5jZS54ICsgcmVmZXJlbmNlLndpZHRoLFxuICAgICAgICB5OiBjb21tb25ZXG4gICAgICB9O1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIGxlZnQ6XG4gICAgICBvZmZzZXRzID0ge1xuICAgICAgICB4OiByZWZlcmVuY2UueCAtIGVsZW1lbnQud2lkdGgsXG4gICAgICAgIHk6IGNvbW1vbllcbiAgICAgIH07XG4gICAgICBicmVhaztcblxuICAgIGRlZmF1bHQ6XG4gICAgICBvZmZzZXRzID0ge1xuICAgICAgICB4OiByZWZlcmVuY2UueCxcbiAgICAgICAgeTogcmVmZXJlbmNlLnlcbiAgICAgIH07XG4gIH1cblxuICB2YXIgbWFpbkF4aXMgPSBiYXNlUGxhY2VtZW50ID8gZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50KGJhc2VQbGFjZW1lbnQpIDogbnVsbDtcblxuICBpZiAobWFpbkF4aXMgIT0gbnVsbCkge1xuICAgIHZhciBsZW4gPSBtYWluQXhpcyA9PT0gJ3knID8gJ2hlaWdodCcgOiAnd2lkdGgnO1xuXG4gICAgc3dpdGNoICh2YXJpYXRpb24pIHtcbiAgICAgIGNhc2Ugc3RhcnQ6XG4gICAgICAgIG9mZnNldHNbbWFpbkF4aXNdID0gb2Zmc2V0c1ttYWluQXhpc10gLSAocmVmZXJlbmNlW2xlbl0gLyAyIC0gZWxlbWVudFtsZW5dIC8gMik7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIGVuZDpcbiAgICAgICAgb2Zmc2V0c1ttYWluQXhpc10gPSBvZmZzZXRzW21haW5BeGlzXSArIChyZWZlcmVuY2VbbGVuXSAvIDIgLSBlbGVtZW50W2xlbl0gLyAyKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG9mZnNldHM7XG59IiwiaW1wb3J0IHsgdG9wLCBsZWZ0LCByaWdodCwgYm90dG9tIH0gZnJvbSBcIi4uL2VudW1zLmpzXCI7XG5pbXBvcnQgZ2V0T2Zmc2V0UGFyZW50IGZyb20gXCIuLi9kb20tdXRpbHMvZ2V0T2Zmc2V0UGFyZW50LmpzXCI7XG5pbXBvcnQgZ2V0V2luZG93IGZyb20gXCIuLi9kb20tdXRpbHMvZ2V0V2luZG93LmpzXCI7XG5pbXBvcnQgZ2V0RG9jdW1lbnRFbGVtZW50IGZyb20gXCIuLi9kb20tdXRpbHMvZ2V0RG9jdW1lbnRFbGVtZW50LmpzXCI7XG5pbXBvcnQgZ2V0Q29tcHV0ZWRTdHlsZSBmcm9tIFwiLi4vZG9tLXV0aWxzL2dldENvbXB1dGVkU3R5bGUuanNcIjtcbmltcG9ydCBnZXRCYXNlUGxhY2VtZW50IGZyb20gXCIuLi91dGlscy9nZXRCYXNlUGxhY2VtZW50LmpzXCI7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxudmFyIHVuc2V0U2lkZXMgPSB7XG4gIHRvcDogJ2F1dG8nLFxuICByaWdodDogJ2F1dG8nLFxuICBib3R0b206ICdhdXRvJyxcbiAgbGVmdDogJ2F1dG8nXG59OyAvLyBSb3VuZCB0aGUgb2Zmc2V0cyB0byB0aGUgbmVhcmVzdCBzdWl0YWJsZSBzdWJwaXhlbCBiYXNlZCBvbiB0aGUgRFBSLlxuLy8gWm9vbWluZyBjYW4gY2hhbmdlIHRoZSBEUFIsIGJ1dCBpdCBzZWVtcyB0byByZXBvcnQgYSB2YWx1ZSB0aGF0IHdpbGxcbi8vIGNsZWFubHkgZGl2aWRlIHRoZSB2YWx1ZXMgaW50byB0aGUgYXBwcm9wcmlhdGUgc3VicGl4ZWxzLlxuXG5mdW5jdGlvbiByb3VuZE9mZnNldHNCeURQUihfcmVmKSB7XG4gIHZhciB4ID0gX3JlZi54LFxuICAgICAgeSA9IF9yZWYueTtcbiAgdmFyIHdpbiA9IHdpbmRvdztcbiAgdmFyIGRwciA9IHdpbi5kZXZpY2VQaXhlbFJhdGlvIHx8IDE7XG4gIHJldHVybiB7XG4gICAgeDogTWF0aC5yb3VuZCh4ICogZHByKSAvIGRwciB8fCAwLFxuICAgIHk6IE1hdGgucm91bmQoeSAqIGRwcikgLyBkcHIgfHwgMFxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbWFwVG9TdHlsZXMoX3JlZjIpIHtcbiAgdmFyIF9PYmplY3QkYXNzaWduMjtcblxuICB2YXIgcG9wcGVyID0gX3JlZjIucG9wcGVyLFxuICAgICAgcG9wcGVyUmVjdCA9IF9yZWYyLnBvcHBlclJlY3QsXG4gICAgICBwbGFjZW1lbnQgPSBfcmVmMi5wbGFjZW1lbnQsXG4gICAgICBvZmZzZXRzID0gX3JlZjIub2Zmc2V0cyxcbiAgICAgIHBvc2l0aW9uID0gX3JlZjIucG9zaXRpb24sXG4gICAgICBncHVBY2NlbGVyYXRpb24gPSBfcmVmMi5ncHVBY2NlbGVyYXRpb24sXG4gICAgICBhZGFwdGl2ZSA9IF9yZWYyLmFkYXB0aXZlLFxuICAgICAgcm91bmRPZmZzZXRzID0gX3JlZjIucm91bmRPZmZzZXRzO1xuXG4gIHZhciBfcmVmMyA9IHJvdW5kT2Zmc2V0cyA/IHJvdW5kT2Zmc2V0c0J5RFBSKG9mZnNldHMpIDogb2Zmc2V0cyxcbiAgICAgIF9yZWYzJHggPSBfcmVmMy54LFxuICAgICAgeCA9IF9yZWYzJHggPT09IHZvaWQgMCA/IDAgOiBfcmVmMyR4LFxuICAgICAgX3JlZjMkeSA9IF9yZWYzLnksXG4gICAgICB5ID0gX3JlZjMkeSA9PT0gdm9pZCAwID8gMCA6IF9yZWYzJHk7XG5cbiAgdmFyIGhhc1ggPSBvZmZzZXRzLmhhc093blByb3BlcnR5KCd4Jyk7XG4gIHZhciBoYXNZID0gb2Zmc2V0cy5oYXNPd25Qcm9wZXJ0eSgneScpO1xuICB2YXIgc2lkZVggPSBsZWZ0O1xuICB2YXIgc2lkZVkgPSB0b3A7XG4gIHZhciB3aW4gPSB3aW5kb3c7XG5cbiAgaWYgKGFkYXB0aXZlKSB7XG4gICAgdmFyIG9mZnNldFBhcmVudCA9IGdldE9mZnNldFBhcmVudChwb3BwZXIpO1xuXG4gICAgaWYgKG9mZnNldFBhcmVudCA9PT0gZ2V0V2luZG93KHBvcHBlcikpIHtcbiAgICAgIG9mZnNldFBhcmVudCA9IGdldERvY3VtZW50RWxlbWVudChwb3BwZXIpO1xuICAgIH0gLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtY2FzdF06IGZvcmNlIHR5cGUgcmVmaW5lbWVudCwgd2UgY29tcGFyZSBvZmZzZXRQYXJlbnQgd2l0aCB3aW5kb3cgYWJvdmUsIGJ1dCBGbG93IGRvZXNuJ3QgZGV0ZWN0IGl0XG5cbiAgICAvKjo6IG9mZnNldFBhcmVudCA9IChvZmZzZXRQYXJlbnQ6IEVsZW1lbnQpOyAqL1xuXG5cbiAgICBpZiAocGxhY2VtZW50ID09PSB0b3ApIHtcbiAgICAgIHNpZGVZID0gYm90dG9tO1xuICAgICAgeSAtPSBvZmZzZXRQYXJlbnQuY2xpZW50SGVpZ2h0IC0gcG9wcGVyUmVjdC5oZWlnaHQ7XG4gICAgICB5ICo9IGdwdUFjY2VsZXJhdGlvbiA/IDEgOiAtMTtcbiAgICB9XG5cbiAgICBpZiAocGxhY2VtZW50ID09PSBsZWZ0KSB7XG4gICAgICBzaWRlWCA9IHJpZ2h0O1xuICAgICAgeCAtPSBvZmZzZXRQYXJlbnQuY2xpZW50V2lkdGggLSBwb3BwZXJSZWN0LndpZHRoO1xuICAgICAgeCAqPSBncHVBY2NlbGVyYXRpb24gPyAxIDogLTE7XG4gICAgfVxuICB9XG5cbiAgdmFyIGNvbW1vblN0eWxlcyA9IE9iamVjdC5hc3NpZ24oe1xuICAgIHBvc2l0aW9uOiBwb3NpdGlvblxuICB9LCBhZGFwdGl2ZSAmJiB1bnNldFNpZGVzKTtcblxuICBpZiAoZ3B1QWNjZWxlcmF0aW9uKSB7XG4gICAgdmFyIF9PYmplY3QkYXNzaWduO1xuXG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgY29tbW9uU3R5bGVzKSwge30sIChfT2JqZWN0JGFzc2lnbiA9IHt9LCBfT2JqZWN0JGFzc2lnbltzaWRlWV0gPSBoYXNZID8gJzAnIDogJycsIF9PYmplY3QkYXNzaWduW3NpZGVYXSA9IGhhc1ggPyAnMCcgOiAnJywgX09iamVjdCRhc3NpZ24udHJhbnNmb3JtID0gKHdpbi5kZXZpY2VQaXhlbFJhdGlvIHx8IDEpIDwgMiA/IFwidHJhbnNsYXRlKFwiICsgeCArIFwicHgsIFwiICsgeSArIFwicHgpXCIgOiBcInRyYW5zbGF0ZTNkKFwiICsgeCArIFwicHgsIFwiICsgeSArIFwicHgsIDApXCIsIF9PYmplY3QkYXNzaWduKSk7XG4gIH1cblxuICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBjb21tb25TdHlsZXMpLCB7fSwgKF9PYmplY3QkYXNzaWduMiA9IHt9LCBfT2JqZWN0JGFzc2lnbjJbc2lkZVldID0gaGFzWSA/IHkgKyBcInB4XCIgOiAnJywgX09iamVjdCRhc3NpZ24yW3NpZGVYXSA9IGhhc1ggPyB4ICsgXCJweFwiIDogJycsIF9PYmplY3QkYXNzaWduMi50cmFuc2Zvcm0gPSAnJywgX09iamVjdCRhc3NpZ24yKSk7XG59XG5cbmZ1bmN0aW9uIGNvbXB1dGVTdHlsZXMoX3JlZjQpIHtcbiAgdmFyIHN0YXRlID0gX3JlZjQuc3RhdGUsXG4gICAgICBvcHRpb25zID0gX3JlZjQub3B0aW9ucztcbiAgdmFyIF9vcHRpb25zJGdwdUFjY2VsZXJhdCA9IG9wdGlvbnMuZ3B1QWNjZWxlcmF0aW9uLFxuICAgICAgZ3B1QWNjZWxlcmF0aW9uID0gX29wdGlvbnMkZ3B1QWNjZWxlcmF0ID09PSB2b2lkIDAgPyB0cnVlIDogX29wdGlvbnMkZ3B1QWNjZWxlcmF0LFxuICAgICAgX29wdGlvbnMkYWRhcHRpdmUgPSBvcHRpb25zLmFkYXB0aXZlLFxuICAgICAgYWRhcHRpdmUgPSBfb3B0aW9ucyRhZGFwdGl2ZSA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9vcHRpb25zJGFkYXB0aXZlLFxuICAgICAgX29wdGlvbnMkcm91bmRPZmZzZXRzID0gb3B0aW9ucy5yb3VuZE9mZnNldHMsXG4gICAgICByb3VuZE9mZnNldHMgPSBfb3B0aW9ucyRyb3VuZE9mZnNldHMgPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyRyb3VuZE9mZnNldHM7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIHZhciB0cmFuc2l0aW9uUHJvcGVydHkgPSBnZXRDb21wdXRlZFN0eWxlKHN0YXRlLmVsZW1lbnRzLnBvcHBlcikudHJhbnNpdGlvblByb3BlcnR5IHx8ICcnO1xuXG4gICAgaWYgKGFkYXB0aXZlICYmIFsndHJhbnNmb3JtJywgJ3RvcCcsICdyaWdodCcsICdib3R0b20nLCAnbGVmdCddLnNvbWUoZnVuY3Rpb24gKHByb3BlcnR5KSB7XG4gICAgICByZXR1cm4gdHJhbnNpdGlvblByb3BlcnR5LmluZGV4T2YocHJvcGVydHkpID49IDA7XG4gICAgfSkpIHtcbiAgICAgIGNvbnNvbGUud2FybihbJ1BvcHBlcjogRGV0ZWN0ZWQgQ1NTIHRyYW5zaXRpb25zIG9uIGF0IGxlYXN0IG9uZSBvZiB0aGUgZm9sbG93aW5nJywgJ0NTUyBwcm9wZXJ0aWVzOiBcInRyYW5zZm9ybVwiLCBcInRvcFwiLCBcInJpZ2h0XCIsIFwiYm90dG9tXCIsIFwibGVmdFwiLicsICdcXG5cXG4nLCAnRGlzYWJsZSB0aGUgXCJjb21wdXRlU3R5bGVzXCIgbW9kaWZpZXJcXCdzIGBhZGFwdGl2ZWAgb3B0aW9uIHRvIGFsbG93JywgJ2ZvciBzbW9vdGggdHJhbnNpdGlvbnMsIG9yIHJlbW92ZSB0aGVzZSBwcm9wZXJ0aWVzIGZyb20gdGhlIENTUycsICd0cmFuc2l0aW9uIGRlY2xhcmF0aW9uIG9uIHRoZSBwb3BwZXIgZWxlbWVudCBpZiBvbmx5IHRyYW5zaXRpb25pbmcnLCAnb3BhY2l0eSBvciBiYWNrZ3JvdW5kLWNvbG9yIGZvciBleGFtcGxlLicsICdcXG5cXG4nLCAnV2UgcmVjb21tZW5kIHVzaW5nIHRoZSBwb3BwZXIgZWxlbWVudCBhcyBhIHdyYXBwZXIgYXJvdW5kIGFuIGlubmVyJywgJ2VsZW1lbnQgdGhhdCBjYW4gaGF2ZSBhbnkgQ1NTIHByb3BlcnR5IHRyYW5zaXRpb25lZCBmb3IgYW5pbWF0aW9ucy4nXS5qb2luKCcgJykpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBjb21tb25TdHlsZXMgPSB7XG4gICAgcGxhY2VtZW50OiBnZXRCYXNlUGxhY2VtZW50KHN0YXRlLnBsYWNlbWVudCksXG4gICAgcG9wcGVyOiBzdGF0ZS5lbGVtZW50cy5wb3BwZXIsXG4gICAgcG9wcGVyUmVjdDogc3RhdGUucmVjdHMucG9wcGVyLFxuICAgIGdwdUFjY2VsZXJhdGlvbjogZ3B1QWNjZWxlcmF0aW9uXG4gIH07XG5cbiAgaWYgKHN0YXRlLm1vZGlmaWVyc0RhdGEucG9wcGVyT2Zmc2V0cyAhPSBudWxsKSB7XG4gICAgc3RhdGUuc3R5bGVzLnBvcHBlciA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUuc3R5bGVzLnBvcHBlciksIG1hcFRvU3R5bGVzKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgY29tbW9uU3R5bGVzKSwge30sIHtcbiAgICAgIG9mZnNldHM6IHN0YXRlLm1vZGlmaWVyc0RhdGEucG9wcGVyT2Zmc2V0cyxcbiAgICAgIHBvc2l0aW9uOiBzdGF0ZS5vcHRpb25zLnN0cmF0ZWd5LFxuICAgICAgYWRhcHRpdmU6IGFkYXB0aXZlLFxuICAgICAgcm91bmRPZmZzZXRzOiByb3VuZE9mZnNldHNcbiAgICB9KSkpO1xuICB9XG5cbiAgaWYgKHN0YXRlLm1vZGlmaWVyc0RhdGEuYXJyb3cgIT0gbnVsbCkge1xuICAgIHN0YXRlLnN0eWxlcy5hcnJvdyA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUuc3R5bGVzLmFycm93KSwgbWFwVG9TdHlsZXMoT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBjb21tb25TdHlsZXMpLCB7fSwge1xuICAgICAgb2Zmc2V0czogc3RhdGUubW9kaWZpZXJzRGF0YS5hcnJvdyxcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgYWRhcHRpdmU6IGZhbHNlLFxuICAgICAgcm91bmRPZmZzZXRzOiByb3VuZE9mZnNldHNcbiAgICB9KSkpO1xuICB9XG5cbiAgc3RhdGUuYXR0cmlidXRlcy5wb3BwZXIgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLmF0dHJpYnV0ZXMucG9wcGVyKSwge30sIHtcbiAgICAnZGF0YS1wb3BwZXItcGxhY2VtZW50Jzogc3RhdGUucGxhY2VtZW50XG4gIH0pO1xufSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cblxuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAnY29tcHV0ZVN0eWxlcycsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIHBoYXNlOiAnYmVmb3JlV3JpdGUnLFxuICBmbjogY29tcHV0ZVN0eWxlcyxcbiAgZGF0YToge31cbn07IiwidmFyIGhhc2ggPSB7XG4gIGxlZnQ6ICdyaWdodCcsXG4gIHJpZ2h0OiAnbGVmdCcsXG4gIGJvdHRvbTogJ3RvcCcsXG4gIHRvcDogJ2JvdHRvbSdcbn07XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRPcHBvc2l0ZVBsYWNlbWVudChwbGFjZW1lbnQpIHtcbiAgcmV0dXJuIHBsYWNlbWVudC5yZXBsYWNlKC9sZWZ0fHJpZ2h0fGJvdHRvbXx0b3AvZywgZnVuY3Rpb24gKG1hdGNoZWQpIHtcbiAgICByZXR1cm4gaGFzaFttYXRjaGVkXTtcbiAgfSk7XG59IiwidmFyIGhhc2ggPSB7XG4gIHN0YXJ0OiAnZW5kJyxcbiAgZW5kOiAnc3RhcnQnXG59O1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0T3Bwb3NpdGVWYXJpYXRpb25QbGFjZW1lbnQocGxhY2VtZW50KSB7XG4gIHJldHVybiBwbGFjZW1lbnQucmVwbGFjZSgvc3RhcnR8ZW5kL2csIGZ1bmN0aW9uIChtYXRjaGVkKSB7XG4gICAgcmV0dXJuIGhhc2hbbWF0Y2hlZF07XG4gIH0pO1xufSIsImltcG9ydCB7IGlzU2hhZG93Um9vdCB9IGZyb20gXCIuL2luc3RhbmNlT2YuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbnRhaW5zKHBhcmVudCwgY2hpbGQpIHtcbiAgdmFyIHJvb3ROb2RlID0gY2hpbGQuZ2V0Um9vdE5vZGUgJiYgY2hpbGQuZ2V0Um9vdE5vZGUoKTsgLy8gRmlyc3QsIGF0dGVtcHQgd2l0aCBmYXN0ZXIgbmF0aXZlIG1ldGhvZFxuXG4gIGlmIChwYXJlbnQuY29udGFpbnMoY2hpbGQpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gLy8gdGhlbiBmYWxsYmFjayB0byBjdXN0b20gaW1wbGVtZW50YXRpb24gd2l0aCBTaGFkb3cgRE9NIHN1cHBvcnRcbiAgZWxzZSBpZiAocm9vdE5vZGUgJiYgaXNTaGFkb3dSb290KHJvb3ROb2RlKSkge1xuICAgICAgdmFyIG5leHQgPSBjaGlsZDtcblxuICAgICAgZG8ge1xuICAgICAgICBpZiAobmV4dCAmJiBwYXJlbnQuaXNTYW1lTm9kZShuZXh0KSkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IC8vICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXTogbmVlZCBhIGJldHRlciB3YXkgdG8gaGFuZGxlIHRoaXMuLi5cblxuXG4gICAgICAgIG5leHQgPSBuZXh0LnBhcmVudE5vZGUgfHwgbmV4dC5ob3N0O1xuICAgICAgfSB3aGlsZSAobmV4dCk7XG4gICAgfSAvLyBHaXZlIHVwLCB0aGUgcmVzdWx0IGlzIGZhbHNlXG5cblxuICByZXR1cm4gZmFsc2U7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVjdFRvQ2xpZW50UmVjdChyZWN0KSB7XG4gIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHJlY3QpLCB7fSwge1xuICAgIGxlZnQ6IHJlY3QueCxcbiAgICB0b3A6IHJlY3QueSxcbiAgICByaWdodDogcmVjdC54ICsgcmVjdC53aWR0aCxcbiAgICBib3R0b206IHJlY3QueSArIHJlY3QuaGVpZ2h0XG4gIH0pO1xufSIsImltcG9ydCB7IHZpZXdwb3J0IH0gZnJvbSBcIi4uL2VudW1zLmpzXCI7XG5pbXBvcnQgZ2V0Vmlld3BvcnRSZWN0IGZyb20gXCIuL2dldFZpZXdwb3J0UmVjdC5qc1wiO1xuaW1wb3J0IGdldERvY3VtZW50UmVjdCBmcm9tIFwiLi9nZXREb2N1bWVudFJlY3QuanNcIjtcbmltcG9ydCBsaXN0U2Nyb2xsUGFyZW50cyBmcm9tIFwiLi9saXN0U2Nyb2xsUGFyZW50cy5qc1wiO1xuaW1wb3J0IGdldE9mZnNldFBhcmVudCBmcm9tIFwiLi9nZXRPZmZzZXRQYXJlbnQuanNcIjtcbmltcG9ydCBnZXREb2N1bWVudEVsZW1lbnQgZnJvbSBcIi4vZ2V0RG9jdW1lbnRFbGVtZW50LmpzXCI7XG5pbXBvcnQgZ2V0Q29tcHV0ZWRTdHlsZSBmcm9tIFwiLi9nZXRDb21wdXRlZFN0eWxlLmpzXCI7XG5pbXBvcnQgeyBpc0VsZW1lbnQsIGlzSFRNTEVsZW1lbnQgfSBmcm9tIFwiLi9pbnN0YW5jZU9mLmpzXCI7XG5pbXBvcnQgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGZyb20gXCIuL2dldEJvdW5kaW5nQ2xpZW50UmVjdC5qc1wiO1xuaW1wb3J0IGdldFBhcmVudE5vZGUgZnJvbSBcIi4vZ2V0UGFyZW50Tm9kZS5qc1wiO1xuaW1wb3J0IGNvbnRhaW5zIGZyb20gXCIuL2NvbnRhaW5zLmpzXCI7XG5pbXBvcnQgZ2V0Tm9kZU5hbWUgZnJvbSBcIi4vZ2V0Tm9kZU5hbWUuanNcIjtcbmltcG9ydCByZWN0VG9DbGllbnRSZWN0IGZyb20gXCIuLi91dGlscy9yZWN0VG9DbGllbnRSZWN0LmpzXCI7XG5cbmZ1bmN0aW9uIGdldElubmVyQm91bmRpbmdDbGllbnRSZWN0KGVsZW1lbnQpIHtcbiAgdmFyIHJlY3QgPSBnZXRCb3VuZGluZ0NsaWVudFJlY3QoZWxlbWVudCk7XG4gIHJlY3QudG9wID0gcmVjdC50b3AgKyBlbGVtZW50LmNsaWVudFRvcDtcbiAgcmVjdC5sZWZ0ID0gcmVjdC5sZWZ0ICsgZWxlbWVudC5jbGllbnRMZWZ0O1xuICByZWN0LmJvdHRvbSA9IHJlY3QudG9wICsgZWxlbWVudC5jbGllbnRIZWlnaHQ7XG4gIHJlY3QucmlnaHQgPSByZWN0LmxlZnQgKyBlbGVtZW50LmNsaWVudFdpZHRoO1xuICByZWN0LndpZHRoID0gZWxlbWVudC5jbGllbnRXaWR0aDtcbiAgcmVjdC5oZWlnaHQgPSBlbGVtZW50LmNsaWVudEhlaWdodDtcbiAgcmVjdC54ID0gcmVjdC5sZWZ0O1xuICByZWN0LnkgPSByZWN0LnRvcDtcbiAgcmV0dXJuIHJlY3Q7XG59XG5cbmZ1bmN0aW9uIGdldENsaWVudFJlY3RGcm9tTWl4ZWRUeXBlKGVsZW1lbnQsIGNsaXBwaW5nUGFyZW50KSB7XG4gIHJldHVybiBjbGlwcGluZ1BhcmVudCA9PT0gdmlld3BvcnQgPyByZWN0VG9DbGllbnRSZWN0KGdldFZpZXdwb3J0UmVjdChlbGVtZW50KSkgOiBpc0hUTUxFbGVtZW50KGNsaXBwaW5nUGFyZW50KSA/IGdldElubmVyQm91bmRpbmdDbGllbnRSZWN0KGNsaXBwaW5nUGFyZW50KSA6IHJlY3RUb0NsaWVudFJlY3QoZ2V0RG9jdW1lbnRSZWN0KGdldERvY3VtZW50RWxlbWVudChlbGVtZW50KSkpO1xufSAvLyBBIFwiY2xpcHBpbmcgcGFyZW50XCIgaXMgYW4gb3ZlcmZsb3dhYmxlIGNvbnRhaW5lciB3aXRoIHRoZSBjaGFyYWN0ZXJpc3RpYyBvZlxuLy8gY2xpcHBpbmcgKG9yIGhpZGluZykgb3ZlcmZsb3dpbmcgZWxlbWVudHMgd2l0aCBhIHBvc2l0aW9uIGRpZmZlcmVudCBmcm9tXG4vLyBgaW5pdGlhbGBcblxuXG5mdW5jdGlvbiBnZXRDbGlwcGluZ1BhcmVudHMoZWxlbWVudCkge1xuICB2YXIgY2xpcHBpbmdQYXJlbnRzID0gbGlzdFNjcm9sbFBhcmVudHMoZ2V0UGFyZW50Tm9kZShlbGVtZW50KSk7XG4gIHZhciBjYW5Fc2NhcGVDbGlwcGluZyA9IFsnYWJzb2x1dGUnLCAnZml4ZWQnXS5pbmRleE9mKGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCkucG9zaXRpb24pID49IDA7XG4gIHZhciBjbGlwcGVyRWxlbWVudCA9IGNhbkVzY2FwZUNsaXBwaW5nICYmIGlzSFRNTEVsZW1lbnQoZWxlbWVudCkgPyBnZXRPZmZzZXRQYXJlbnQoZWxlbWVudCkgOiBlbGVtZW50O1xuXG4gIGlmICghaXNFbGVtZW50KGNsaXBwZXJFbGVtZW50KSkge1xuICAgIHJldHVybiBbXTtcbiAgfSAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS1yZXR1cm5dOiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svZmxvdy9pc3N1ZXMvMTQxNFxuXG5cbiAgcmV0dXJuIGNsaXBwaW5nUGFyZW50cy5maWx0ZXIoZnVuY3Rpb24gKGNsaXBwaW5nUGFyZW50KSB7XG4gICAgcmV0dXJuIGlzRWxlbWVudChjbGlwcGluZ1BhcmVudCkgJiYgY29udGFpbnMoY2xpcHBpbmdQYXJlbnQsIGNsaXBwZXJFbGVtZW50KSAmJiBnZXROb2RlTmFtZShjbGlwcGluZ1BhcmVudCkgIT09ICdib2R5JztcbiAgfSk7XG59IC8vIEdldHMgdGhlIG1heGltdW0gYXJlYSB0aGF0IHRoZSBlbGVtZW50IGlzIHZpc2libGUgaW4gZHVlIHRvIGFueSBudW1iZXIgb2Zcbi8vIGNsaXBwaW5nIHBhcmVudHNcblxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRDbGlwcGluZ1JlY3QoZWxlbWVudCwgYm91bmRhcnksIHJvb3RCb3VuZGFyeSkge1xuICB2YXIgbWFpbkNsaXBwaW5nUGFyZW50cyA9IGJvdW5kYXJ5ID09PSAnY2xpcHBpbmdQYXJlbnRzJyA/IGdldENsaXBwaW5nUGFyZW50cyhlbGVtZW50KSA6IFtdLmNvbmNhdChib3VuZGFyeSk7XG4gIHZhciBjbGlwcGluZ1BhcmVudHMgPSBbXS5jb25jYXQobWFpbkNsaXBwaW5nUGFyZW50cywgW3Jvb3RCb3VuZGFyeV0pO1xuICB2YXIgZmlyc3RDbGlwcGluZ1BhcmVudCA9IGNsaXBwaW5nUGFyZW50c1swXTtcbiAgdmFyIGNsaXBwaW5nUmVjdCA9IGNsaXBwaW5nUGFyZW50cy5yZWR1Y2UoZnVuY3Rpb24gKGFjY1JlY3QsIGNsaXBwaW5nUGFyZW50KSB7XG4gICAgdmFyIHJlY3QgPSBnZXRDbGllbnRSZWN0RnJvbU1peGVkVHlwZShlbGVtZW50LCBjbGlwcGluZ1BhcmVudCk7XG4gICAgYWNjUmVjdC50b3AgPSBNYXRoLm1heChyZWN0LnRvcCwgYWNjUmVjdC50b3ApO1xuICAgIGFjY1JlY3QucmlnaHQgPSBNYXRoLm1pbihyZWN0LnJpZ2h0LCBhY2NSZWN0LnJpZ2h0KTtcbiAgICBhY2NSZWN0LmJvdHRvbSA9IE1hdGgubWluKHJlY3QuYm90dG9tLCBhY2NSZWN0LmJvdHRvbSk7XG4gICAgYWNjUmVjdC5sZWZ0ID0gTWF0aC5tYXgocmVjdC5sZWZ0LCBhY2NSZWN0LmxlZnQpO1xuICAgIHJldHVybiBhY2NSZWN0O1xuICB9LCBnZXRDbGllbnRSZWN0RnJvbU1peGVkVHlwZShlbGVtZW50LCBmaXJzdENsaXBwaW5nUGFyZW50KSk7XG4gIGNsaXBwaW5nUmVjdC53aWR0aCA9IGNsaXBwaW5nUmVjdC5yaWdodCAtIGNsaXBwaW5nUmVjdC5sZWZ0O1xuICBjbGlwcGluZ1JlY3QuaGVpZ2h0ID0gY2xpcHBpbmdSZWN0LmJvdHRvbSAtIGNsaXBwaW5nUmVjdC50b3A7XG4gIGNsaXBwaW5nUmVjdC54ID0gY2xpcHBpbmdSZWN0LmxlZnQ7XG4gIGNsaXBwaW5nUmVjdC55ID0gY2xpcHBpbmdSZWN0LnRvcDtcbiAgcmV0dXJuIGNsaXBwaW5nUmVjdDtcbn0iLCJpbXBvcnQgZ2V0V2luZG93IGZyb20gXCIuL2dldFdpbmRvdy5qc1wiO1xuaW1wb3J0IGdldERvY3VtZW50RWxlbWVudCBmcm9tIFwiLi9nZXREb2N1bWVudEVsZW1lbnQuanNcIjtcbmltcG9ydCBnZXRXaW5kb3dTY3JvbGxCYXJYIGZyb20gXCIuL2dldFdpbmRvd1Njcm9sbEJhclguanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFZpZXdwb3J0UmVjdChlbGVtZW50KSB7XG4gIHZhciB3aW4gPSBnZXRXaW5kb3coZWxlbWVudCk7XG4gIHZhciBodG1sID0gZ2V0RG9jdW1lbnRFbGVtZW50KGVsZW1lbnQpO1xuICB2YXIgdmlzdWFsVmlld3BvcnQgPSB3aW4udmlzdWFsVmlld3BvcnQ7XG4gIHZhciB3aWR0aCA9IGh0bWwuY2xpZW50V2lkdGg7XG4gIHZhciBoZWlnaHQgPSBodG1sLmNsaWVudEhlaWdodDtcbiAgdmFyIHggPSAwO1xuICB2YXIgeSA9IDA7IC8vIE5COiBUaGlzIGlzbid0IHN1cHBvcnRlZCBvbiBpT1MgPD0gMTIuIElmIHRoZSBrZXlib2FyZCBpcyBvcGVuLCB0aGUgcG9wcGVyXG4gIC8vIGNhbiBiZSBvYnNjdXJlZCB1bmRlcm5lYXRoIGl0LlxuICAvLyBBbHNvLCBgaHRtbC5jbGllbnRIZWlnaHRgIGFkZHMgdGhlIGJvdHRvbSBiYXIgaGVpZ2h0IGluIFNhZmFyaSBpT1MsIGV2ZW5cbiAgLy8gaWYgaXQgaXNuJ3Qgb3Blbiwgc28gaWYgdGhpcyBpc24ndCBhdmFpbGFibGUsIHRoZSBwb3BwZXIgd2lsbCBiZSBkZXRlY3RlZFxuICAvLyB0byBvdmVyZmxvdyB0aGUgYm90dG9tIG9mIHRoZSBzY3JlZW4gdG9vIGVhcmx5LlxuXG4gIGlmICh2aXN1YWxWaWV3cG9ydCkge1xuICAgIHdpZHRoID0gdmlzdWFsVmlld3BvcnQud2lkdGg7XG4gICAgaGVpZ2h0ID0gdmlzdWFsVmlld3BvcnQuaGVpZ2h0OyAvLyBVc2VzIExheW91dCBWaWV3cG9ydCAobGlrZSBDaHJvbWU7IFNhZmFyaSBkb2VzIG5vdCBjdXJyZW50bHkpXG4gICAgLy8gSW4gQ2hyb21lLCBpdCByZXR1cm5zIGEgdmFsdWUgdmVyeSBjbG9zZSB0byAwICgrLy0pIGJ1dCBjb250YWlucyByb3VuZGluZ1xuICAgIC8vIGVycm9ycyBkdWUgdG8gZmxvYXRpbmcgcG9pbnQgbnVtYmVycywgc28gd2UgbmVlZCB0byBjaGVjayBwcmVjaXNpb24uXG4gICAgLy8gU2FmYXJpIHJldHVybnMgYSBudW1iZXIgPD0gMCwgdXN1YWxseSA8IC0xIHdoZW4gcGluY2gtem9vbWVkXG4gICAgLy8gRmVhdHVyZSBkZXRlY3Rpb24gZmFpbHMgaW4gbW9iaWxlIGVtdWxhdGlvbiBtb2RlIGluIENocm9tZS5cbiAgICAvLyBNYXRoLmFicyh3aW4uaW5uZXJXaWR0aCAvIHZpc3VhbFZpZXdwb3J0LnNjYWxlIC0gdmlzdWFsVmlld3BvcnQud2lkdGgpIDxcbiAgICAvLyAwLjAwMVxuICAgIC8vIEZhbGxiYWNrIGhlcmU6IFwiTm90IFNhZmFyaVwiIHVzZXJBZ2VudFxuXG4gICAgaWYgKCEvXigoPyFjaHJvbWV8YW5kcm9pZCkuKSpzYWZhcmkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpKSB7XG4gICAgICB4ID0gdmlzdWFsVmlld3BvcnQub2Zmc2V0TGVmdDtcbiAgICAgIHkgPSB2aXN1YWxWaWV3cG9ydC5vZmZzZXRUb3A7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB3aWR0aDogd2lkdGgsXG4gICAgaGVpZ2h0OiBoZWlnaHQsXG4gICAgeDogeCArIGdldFdpbmRvd1Njcm9sbEJhclgoZWxlbWVudCksXG4gICAgeTogeVxuICB9O1xufSIsImltcG9ydCBnZXREb2N1bWVudEVsZW1lbnQgZnJvbSBcIi4vZ2V0RG9jdW1lbnRFbGVtZW50LmpzXCI7XG5pbXBvcnQgZ2V0Q29tcHV0ZWRTdHlsZSBmcm9tIFwiLi9nZXRDb21wdXRlZFN0eWxlLmpzXCI7XG5pbXBvcnQgZ2V0V2luZG93U2Nyb2xsQmFyWCBmcm9tIFwiLi9nZXRXaW5kb3dTY3JvbGxCYXJYLmpzXCI7XG5pbXBvcnQgZ2V0V2luZG93U2Nyb2xsIGZyb20gXCIuL2dldFdpbmRvd1Njcm9sbC5qc1wiOyAvLyBHZXRzIHRoZSBlbnRpcmUgc2l6ZSBvZiB0aGUgc2Nyb2xsYWJsZSBkb2N1bWVudCBhcmVhLCBldmVuIGV4dGVuZGluZyBvdXRzaWRlXG4vLyBvZiB0aGUgYDxodG1sPmAgYW5kIGA8Ym9keT5gIHJlY3QgYm91bmRzIGlmIGhvcml6b250YWxseSBzY3JvbGxhYmxlXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldERvY3VtZW50UmVjdChlbGVtZW50KSB7XG4gIHZhciBodG1sID0gZ2V0RG9jdW1lbnRFbGVtZW50KGVsZW1lbnQpO1xuICB2YXIgd2luU2Nyb2xsID0gZ2V0V2luZG93U2Nyb2xsKGVsZW1lbnQpO1xuICB2YXIgYm9keSA9IGVsZW1lbnQub3duZXJEb2N1bWVudC5ib2R5O1xuICB2YXIgd2lkdGggPSBNYXRoLm1heChodG1sLnNjcm9sbFdpZHRoLCBodG1sLmNsaWVudFdpZHRoLCBib2R5ID8gYm9keS5zY3JvbGxXaWR0aCA6IDAsIGJvZHkgPyBib2R5LmNsaWVudFdpZHRoIDogMCk7XG4gIHZhciBoZWlnaHQgPSBNYXRoLm1heChodG1sLnNjcm9sbEhlaWdodCwgaHRtbC5jbGllbnRIZWlnaHQsIGJvZHkgPyBib2R5LnNjcm9sbEhlaWdodCA6IDAsIGJvZHkgPyBib2R5LmNsaWVudEhlaWdodCA6IDApO1xuICB2YXIgeCA9IC13aW5TY3JvbGwuc2Nyb2xsTGVmdCArIGdldFdpbmRvd1Njcm9sbEJhclgoZWxlbWVudCk7XG4gIHZhciB5ID0gLXdpblNjcm9sbC5zY3JvbGxUb3A7XG5cbiAgaWYgKGdldENvbXB1dGVkU3R5bGUoYm9keSB8fCBodG1sKS5kaXJlY3Rpb24gPT09ICdydGwnKSB7XG4gICAgeCArPSBNYXRoLm1heChodG1sLmNsaWVudFdpZHRoLCBib2R5ID8gYm9keS5jbGllbnRXaWR0aCA6IDApIC0gd2lkdGg7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHdpZHRoOiB3aWR0aCxcbiAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICB4OiB4LFxuICAgIHk6IHlcbiAgfTtcbn0iLCJpbXBvcnQgZ2V0RnJlc2hTaWRlT2JqZWN0IGZyb20gXCIuL2dldEZyZXNoU2lkZU9iamVjdC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWVyZ2VQYWRkaW5nT2JqZWN0KHBhZGRpbmdPYmplY3QpIHtcbiAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgZ2V0RnJlc2hTaWRlT2JqZWN0KCkpLCBwYWRkaW5nT2JqZWN0KTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRGcmVzaFNpZGVPYmplY3QoKSB7XG4gIHJldHVybiB7XG4gICAgdG9wOiAwLFxuICAgIHJpZ2h0OiAwLFxuICAgIGJvdHRvbTogMCxcbiAgICBsZWZ0OiAwXG4gIH07XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZXhwYW5kVG9IYXNoTWFwKHZhbHVlLCBrZXlzKSB7XG4gIHJldHVybiBrZXlzLnJlZHVjZShmdW5jdGlvbiAoaGFzaE1hcCwga2V5KSB7XG4gICAgaGFzaE1hcFtrZXldID0gdmFsdWU7XG4gICAgcmV0dXJuIGhhc2hNYXA7XG4gIH0sIHt9KTtcbn0iLCJpbXBvcnQgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGZyb20gXCIuLi9kb20tdXRpbHMvZ2V0Qm91bmRpbmdDbGllbnRSZWN0LmpzXCI7XG5pbXBvcnQgZ2V0Q2xpcHBpbmdSZWN0IGZyb20gXCIuLi9kb20tdXRpbHMvZ2V0Q2xpcHBpbmdSZWN0LmpzXCI7XG5pbXBvcnQgZ2V0RG9jdW1lbnRFbGVtZW50IGZyb20gXCIuLi9kb20tdXRpbHMvZ2V0RG9jdW1lbnRFbGVtZW50LmpzXCI7XG5pbXBvcnQgY29tcHV0ZU9mZnNldHMgZnJvbSBcIi4vY29tcHV0ZU9mZnNldHMuanNcIjtcbmltcG9ydCByZWN0VG9DbGllbnRSZWN0IGZyb20gXCIuL3JlY3RUb0NsaWVudFJlY3QuanNcIjtcbmltcG9ydCB7IGNsaXBwaW5nUGFyZW50cywgcmVmZXJlbmNlLCBwb3BwZXIsIGJvdHRvbSwgdG9wLCByaWdodCwgYmFzZVBsYWNlbWVudHMsIHZpZXdwb3J0IH0gZnJvbSBcIi4uL2VudW1zLmpzXCI7XG5pbXBvcnQgeyBpc0VsZW1lbnQgfSBmcm9tIFwiLi4vZG9tLXV0aWxzL2luc3RhbmNlT2YuanNcIjtcbmltcG9ydCBtZXJnZVBhZGRpbmdPYmplY3QgZnJvbSBcIi4vbWVyZ2VQYWRkaW5nT2JqZWN0LmpzXCI7XG5pbXBvcnQgZXhwYW5kVG9IYXNoTWFwIGZyb20gXCIuL2V4cGFuZFRvSGFzaE1hcC5qc1wiOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRldGVjdE92ZXJmbG93KHN0YXRlLCBvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICB2YXIgX29wdGlvbnMgPSBvcHRpb25zLFxuICAgICAgX29wdGlvbnMkcGxhY2VtZW50ID0gX29wdGlvbnMucGxhY2VtZW50LFxuICAgICAgcGxhY2VtZW50ID0gX29wdGlvbnMkcGxhY2VtZW50ID09PSB2b2lkIDAgPyBzdGF0ZS5wbGFjZW1lbnQgOiBfb3B0aW9ucyRwbGFjZW1lbnQsXG4gICAgICBfb3B0aW9ucyRib3VuZGFyeSA9IF9vcHRpb25zLmJvdW5kYXJ5LFxuICAgICAgYm91bmRhcnkgPSBfb3B0aW9ucyRib3VuZGFyeSA9PT0gdm9pZCAwID8gY2xpcHBpbmdQYXJlbnRzIDogX29wdGlvbnMkYm91bmRhcnksXG4gICAgICBfb3B0aW9ucyRyb290Qm91bmRhcnkgPSBfb3B0aW9ucy5yb290Qm91bmRhcnksXG4gICAgICByb290Qm91bmRhcnkgPSBfb3B0aW9ucyRyb290Qm91bmRhcnkgPT09IHZvaWQgMCA/IHZpZXdwb3J0IDogX29wdGlvbnMkcm9vdEJvdW5kYXJ5LFxuICAgICAgX29wdGlvbnMkZWxlbWVudENvbnRlID0gX29wdGlvbnMuZWxlbWVudENvbnRleHQsXG4gICAgICBlbGVtZW50Q29udGV4dCA9IF9vcHRpb25zJGVsZW1lbnRDb250ZSA9PT0gdm9pZCAwID8gcG9wcGVyIDogX29wdGlvbnMkZWxlbWVudENvbnRlLFxuICAgICAgX29wdGlvbnMkYWx0Qm91bmRhcnkgPSBfb3B0aW9ucy5hbHRCb3VuZGFyeSxcbiAgICAgIGFsdEJvdW5kYXJ5ID0gX29wdGlvbnMkYWx0Qm91bmRhcnkgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkYWx0Qm91bmRhcnksXG4gICAgICBfb3B0aW9ucyRwYWRkaW5nID0gX29wdGlvbnMucGFkZGluZyxcbiAgICAgIHBhZGRpbmcgPSBfb3B0aW9ucyRwYWRkaW5nID09PSB2b2lkIDAgPyAwIDogX29wdGlvbnMkcGFkZGluZztcbiAgdmFyIHBhZGRpbmdPYmplY3QgPSBtZXJnZVBhZGRpbmdPYmplY3QodHlwZW9mIHBhZGRpbmcgIT09ICdudW1iZXInID8gcGFkZGluZyA6IGV4cGFuZFRvSGFzaE1hcChwYWRkaW5nLCBiYXNlUGxhY2VtZW50cykpO1xuICB2YXIgYWx0Q29udGV4dCA9IGVsZW1lbnRDb250ZXh0ID09PSBwb3BwZXIgPyByZWZlcmVuY2UgOiBwb3BwZXI7XG4gIHZhciByZWZlcmVuY2VFbGVtZW50ID0gc3RhdGUuZWxlbWVudHMucmVmZXJlbmNlO1xuICB2YXIgcG9wcGVyUmVjdCA9IHN0YXRlLnJlY3RzLnBvcHBlcjtcbiAgdmFyIGVsZW1lbnQgPSBzdGF0ZS5lbGVtZW50c1thbHRCb3VuZGFyeSA/IGFsdENvbnRleHQgOiBlbGVtZW50Q29udGV4dF07XG4gIHZhciBjbGlwcGluZ0NsaWVudFJlY3QgPSBnZXRDbGlwcGluZ1JlY3QoaXNFbGVtZW50KGVsZW1lbnQpID8gZWxlbWVudCA6IGVsZW1lbnQuY29udGV4dEVsZW1lbnQgfHwgZ2V0RG9jdW1lbnRFbGVtZW50KHN0YXRlLmVsZW1lbnRzLnBvcHBlciksIGJvdW5kYXJ5LCByb290Qm91bmRhcnkpO1xuICB2YXIgcmVmZXJlbmNlQ2xpZW50UmVjdCA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdChyZWZlcmVuY2VFbGVtZW50KTtcbiAgdmFyIHBvcHBlck9mZnNldHMgPSBjb21wdXRlT2Zmc2V0cyh7XG4gICAgcmVmZXJlbmNlOiByZWZlcmVuY2VDbGllbnRSZWN0LFxuICAgIGVsZW1lbnQ6IHBvcHBlclJlY3QsXG4gICAgc3RyYXRlZ3k6ICdhYnNvbHV0ZScsXG4gICAgcGxhY2VtZW50OiBwbGFjZW1lbnRcbiAgfSk7XG4gIHZhciBwb3BwZXJDbGllbnRSZWN0ID0gcmVjdFRvQ2xpZW50UmVjdChPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHBvcHBlclJlY3QpLCBwb3BwZXJPZmZzZXRzKSk7XG4gIHZhciBlbGVtZW50Q2xpZW50UmVjdCA9IGVsZW1lbnRDb250ZXh0ID09PSBwb3BwZXIgPyBwb3BwZXJDbGllbnRSZWN0IDogcmVmZXJlbmNlQ2xpZW50UmVjdDsgLy8gcG9zaXRpdmUgPSBvdmVyZmxvd2luZyB0aGUgY2xpcHBpbmcgcmVjdFxuICAvLyAwIG9yIG5lZ2F0aXZlID0gd2l0aGluIHRoZSBjbGlwcGluZyByZWN0XG5cbiAgdmFyIG92ZXJmbG93T2Zmc2V0cyA9IHtcbiAgICB0b3A6IGNsaXBwaW5nQ2xpZW50UmVjdC50b3AgLSBlbGVtZW50Q2xpZW50UmVjdC50b3AgKyBwYWRkaW5nT2JqZWN0LnRvcCxcbiAgICBib3R0b206IGVsZW1lbnRDbGllbnRSZWN0LmJvdHRvbSAtIGNsaXBwaW5nQ2xpZW50UmVjdC5ib3R0b20gKyBwYWRkaW5nT2JqZWN0LmJvdHRvbSxcbiAgICBsZWZ0OiBjbGlwcGluZ0NsaWVudFJlY3QubGVmdCAtIGVsZW1lbnRDbGllbnRSZWN0LmxlZnQgKyBwYWRkaW5nT2JqZWN0LmxlZnQsXG4gICAgcmlnaHQ6IGVsZW1lbnRDbGllbnRSZWN0LnJpZ2h0IC0gY2xpcHBpbmdDbGllbnRSZWN0LnJpZ2h0ICsgcGFkZGluZ09iamVjdC5yaWdodFxuICB9O1xuICB2YXIgb2Zmc2V0RGF0YSA9IHN0YXRlLm1vZGlmaWVyc0RhdGEub2Zmc2V0OyAvLyBPZmZzZXRzIGNhbiBiZSBhcHBsaWVkIG9ubHkgdG8gdGhlIHBvcHBlciBlbGVtZW50XG5cbiAgaWYgKGVsZW1lbnRDb250ZXh0ID09PSBwb3BwZXIgJiYgb2Zmc2V0RGF0YSkge1xuICAgIHZhciBvZmZzZXQgPSBvZmZzZXREYXRhW3BsYWNlbWVudF07XG4gICAgT2JqZWN0LmtleXMob3ZlcmZsb3dPZmZzZXRzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIHZhciBtdWx0aXBseSA9IFtyaWdodCwgYm90dG9tXS5pbmRleE9mKGtleSkgPj0gMCA/IDEgOiAtMTtcbiAgICAgIHZhciBheGlzID0gW3RvcCwgYm90dG9tXS5pbmRleE9mKGtleSkgPj0gMCA/ICd5JyA6ICd4JztcbiAgICAgIG92ZXJmbG93T2Zmc2V0c1trZXldICs9IG9mZnNldFtheGlzXSAqIG11bHRpcGx5O1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIG92ZXJmbG93T2Zmc2V0cztcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB3aXRoaW4obWluLCB2YWx1ZSwgbWF4KSB7XG4gIHJldHVybiBNYXRoLm1heChtaW4sIE1hdGgubWluKHZhbHVlLCBtYXgpKTtcbn0iLCJpbXBvcnQgeyB0b3AsIGJvdHRvbSwgbGVmdCwgcmlnaHQgfSBmcm9tIFwiLi4vZW51bXMuanNcIjtcbmltcG9ydCBkZXRlY3RPdmVyZmxvdyBmcm9tIFwiLi4vdXRpbHMvZGV0ZWN0T3ZlcmZsb3cuanNcIjtcblxuZnVuY3Rpb24gZ2V0U2lkZU9mZnNldHMob3ZlcmZsb3csIHJlY3QsIHByZXZlbnRlZE9mZnNldHMpIHtcbiAgaWYgKHByZXZlbnRlZE9mZnNldHMgPT09IHZvaWQgMCkge1xuICAgIHByZXZlbnRlZE9mZnNldHMgPSB7XG4gICAgICB4OiAwLFxuICAgICAgeTogMFxuICAgIH07XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHRvcDogb3ZlcmZsb3cudG9wIC0gcmVjdC5oZWlnaHQgLSBwcmV2ZW50ZWRPZmZzZXRzLnksXG4gICAgcmlnaHQ6IG92ZXJmbG93LnJpZ2h0IC0gcmVjdC53aWR0aCArIHByZXZlbnRlZE9mZnNldHMueCxcbiAgICBib3R0b206IG92ZXJmbG93LmJvdHRvbSAtIHJlY3QuaGVpZ2h0ICsgcHJldmVudGVkT2Zmc2V0cy55LFxuICAgIGxlZnQ6IG92ZXJmbG93LmxlZnQgLSByZWN0LndpZHRoIC0gcHJldmVudGVkT2Zmc2V0cy54XG4gIH07XG59XG5cbmZ1bmN0aW9uIGlzQW55U2lkZUZ1bGx5Q2xpcHBlZChvdmVyZmxvdykge1xuICByZXR1cm4gW3RvcCwgcmlnaHQsIGJvdHRvbSwgbGVmdF0uc29tZShmdW5jdGlvbiAoc2lkZSkge1xuICAgIHJldHVybiBvdmVyZmxvd1tzaWRlXSA+PSAwO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gaGlkZShfcmVmKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYuc3RhdGUsXG4gICAgICBuYW1lID0gX3JlZi5uYW1lO1xuICB2YXIgcmVmZXJlbmNlUmVjdCA9IHN0YXRlLnJlY3RzLnJlZmVyZW5jZTtcbiAgdmFyIHBvcHBlclJlY3QgPSBzdGF0ZS5yZWN0cy5wb3BwZXI7XG4gIHZhciBwcmV2ZW50ZWRPZmZzZXRzID0gc3RhdGUubW9kaWZpZXJzRGF0YS5wcmV2ZW50T3ZlcmZsb3c7XG4gIHZhciByZWZlcmVuY2VPdmVyZmxvdyA9IGRldGVjdE92ZXJmbG93KHN0YXRlLCB7XG4gICAgZWxlbWVudENvbnRleHQ6ICdyZWZlcmVuY2UnXG4gIH0pO1xuICB2YXIgcG9wcGVyQWx0T3ZlcmZsb3cgPSBkZXRlY3RPdmVyZmxvdyhzdGF0ZSwge1xuICAgIGFsdEJvdW5kYXJ5OiB0cnVlXG4gIH0pO1xuICB2YXIgcmVmZXJlbmNlQ2xpcHBpbmdPZmZzZXRzID0gZ2V0U2lkZU9mZnNldHMocmVmZXJlbmNlT3ZlcmZsb3csIHJlZmVyZW5jZVJlY3QpO1xuICB2YXIgcG9wcGVyRXNjYXBlT2Zmc2V0cyA9IGdldFNpZGVPZmZzZXRzKHBvcHBlckFsdE92ZXJmbG93LCBwb3BwZXJSZWN0LCBwcmV2ZW50ZWRPZmZzZXRzKTtcbiAgdmFyIGlzUmVmZXJlbmNlSGlkZGVuID0gaXNBbnlTaWRlRnVsbHlDbGlwcGVkKHJlZmVyZW5jZUNsaXBwaW5nT2Zmc2V0cyk7XG4gIHZhciBoYXNQb3BwZXJFc2NhcGVkID0gaXNBbnlTaWRlRnVsbHlDbGlwcGVkKHBvcHBlckVzY2FwZU9mZnNldHMpO1xuICBzdGF0ZS5tb2RpZmllcnNEYXRhW25hbWVdID0ge1xuICAgIHJlZmVyZW5jZUNsaXBwaW5nT2Zmc2V0czogcmVmZXJlbmNlQ2xpcHBpbmdPZmZzZXRzLFxuICAgIHBvcHBlckVzY2FwZU9mZnNldHM6IHBvcHBlckVzY2FwZU9mZnNldHMsXG4gICAgaXNSZWZlcmVuY2VIaWRkZW46IGlzUmVmZXJlbmNlSGlkZGVuLFxuICAgIGhhc1BvcHBlckVzY2FwZWQ6IGhhc1BvcHBlckVzY2FwZWRcbiAgfTtcbiAgc3RhdGUuYXR0cmlidXRlcy5wb3BwZXIgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLmF0dHJpYnV0ZXMucG9wcGVyKSwge30sIHtcbiAgICAnZGF0YS1wb3BwZXItcmVmZXJlbmNlLWhpZGRlbic6IGlzUmVmZXJlbmNlSGlkZGVuLFxuICAgICdkYXRhLXBvcHBlci1lc2NhcGVkJzogaGFzUG9wcGVyRXNjYXBlZFxuICB9KTtcbn0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogJ2hpZGUnLFxuICBlbmFibGVkOiB0cnVlLFxuICBwaGFzZTogJ21haW4nLFxuICByZXF1aXJlc0lmRXhpc3RzOiBbJ3ByZXZlbnRPdmVyZmxvdyddLFxuICBmbjogaGlkZVxufTsiLCJpbXBvcnQgeyBwb3BwZXJHZW5lcmF0b3IsIGRldGVjdE92ZXJmbG93IH0gZnJvbSBcIi4vY3JlYXRlUG9wcGVyLmpzXCI7XG5pbXBvcnQgZXZlbnRMaXN0ZW5lcnMgZnJvbSBcIi4vbW9kaWZpZXJzL2V2ZW50TGlzdGVuZXJzLmpzXCI7XG5pbXBvcnQgcG9wcGVyT2Zmc2V0cyBmcm9tIFwiLi9tb2RpZmllcnMvcG9wcGVyT2Zmc2V0cy5qc1wiO1xuaW1wb3J0IGNvbXB1dGVTdHlsZXMgZnJvbSBcIi4vbW9kaWZpZXJzL2NvbXB1dGVTdHlsZXMuanNcIjtcbmltcG9ydCBhcHBseVN0eWxlcyBmcm9tIFwiLi9tb2RpZmllcnMvYXBwbHlTdHlsZXMuanNcIjtcbmltcG9ydCBvZmZzZXQgZnJvbSBcIi4vbW9kaWZpZXJzL29mZnNldC5qc1wiO1xuaW1wb3J0IGZsaXAgZnJvbSBcIi4vbW9kaWZpZXJzL2ZsaXAuanNcIjtcbmltcG9ydCBwcmV2ZW50T3ZlcmZsb3cgZnJvbSBcIi4vbW9kaWZpZXJzL3ByZXZlbnRPdmVyZmxvdy5qc1wiO1xuaW1wb3J0IGFycm93IGZyb20gXCIuL21vZGlmaWVycy9hcnJvdy5qc1wiO1xuaW1wb3J0IGhpZGUgZnJvbSBcIi4vbW9kaWZpZXJzL2hpZGUuanNcIjtcbnZhciBkZWZhdWx0TW9kaWZpZXJzID0gW2V2ZW50TGlzdGVuZXJzLCBwb3BwZXJPZmZzZXRzLCBjb21wdXRlU3R5bGVzLCBhcHBseVN0eWxlcywgb2Zmc2V0LCBmbGlwLCBwcmV2ZW50T3ZlcmZsb3csIGFycm93LCBoaWRlXTtcbnZhciBjcmVhdGVQb3BwZXIgPSAvKiNfX1BVUkVfXyovcG9wcGVyR2VuZXJhdG9yKHtcbiAgZGVmYXVsdE1vZGlmaWVyczogZGVmYXVsdE1vZGlmaWVyc1xufSk7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuZXhwb3J0IHsgY3JlYXRlUG9wcGVyLCBwb3BwZXJHZW5lcmF0b3IsIGRlZmF1bHRNb2RpZmllcnMsIGRldGVjdE92ZXJmbG93IH07IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuZXhwb3J0IHsgY3JlYXRlUG9wcGVyIGFzIGNyZWF0ZVBvcHBlckxpdGUgfSBmcm9tIFwiLi9wb3BwZXItbGl0ZS5qc1wiOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cbmV4cG9ydCAqIGZyb20gXCIuL21vZGlmaWVycy9pbmRleC5qc1wiOyIsImltcG9ydCBjb21wdXRlT2Zmc2V0cyBmcm9tIFwiLi4vdXRpbHMvY29tcHV0ZU9mZnNldHMuanNcIjtcblxuZnVuY3Rpb24gcG9wcGVyT2Zmc2V0cyhfcmVmKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYuc3RhdGUsXG4gICAgICBuYW1lID0gX3JlZi5uYW1lO1xuICAvLyBPZmZzZXRzIGFyZSB0aGUgYWN0dWFsIHBvc2l0aW9uIHRoZSBwb3BwZXIgbmVlZHMgdG8gaGF2ZSB0byBiZVxuICAvLyBwcm9wZXJseSBwb3NpdGlvbmVkIG5lYXIgaXRzIHJlZmVyZW5jZSBlbGVtZW50XG4gIC8vIFRoaXMgaXMgdGhlIG1vc3QgYmFzaWMgcGxhY2VtZW50LCBhbmQgd2lsbCBiZSBhZGp1c3RlZCBieVxuICAvLyB0aGUgbW9kaWZpZXJzIGluIHRoZSBuZXh0IHN0ZXBcbiAgc3RhdGUubW9kaWZpZXJzRGF0YVtuYW1lXSA9IGNvbXB1dGVPZmZzZXRzKHtcbiAgICByZWZlcmVuY2U6IHN0YXRlLnJlY3RzLnJlZmVyZW5jZSxcbiAgICBlbGVtZW50OiBzdGF0ZS5yZWN0cy5wb3BwZXIsXG4gICAgc3RyYXRlZ3k6ICdhYnNvbHV0ZScsXG4gICAgcGxhY2VtZW50OiBzdGF0ZS5wbGFjZW1lbnRcbiAgfSk7XG59IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICdwb3BwZXJPZmZzZXRzJyxcbiAgZW5hYmxlZDogdHJ1ZSxcbiAgcGhhc2U6ICdyZWFkJyxcbiAgZm46IHBvcHBlck9mZnNldHMsXG4gIGRhdGE6IHt9XG59OyIsImltcG9ydCBnZXROb2RlTmFtZSBmcm9tIFwiLi4vZG9tLXV0aWxzL2dldE5vZGVOYW1lLmpzXCI7XG5pbXBvcnQgeyBpc0hUTUxFbGVtZW50IH0gZnJvbSBcIi4uL2RvbS11dGlscy9pbnN0YW5jZU9mLmpzXCI7IC8vIFRoaXMgbW9kaWZpZXIgdGFrZXMgdGhlIHN0eWxlcyBwcmVwYXJlZCBieSB0aGUgYGNvbXB1dGVTdHlsZXNgIG1vZGlmaWVyXG4vLyBhbmQgYXBwbGllcyB0aGVtIHRvIHRoZSBIVE1MRWxlbWVudHMgc3VjaCBhcyBwb3BwZXIgYW5kIGFycm93XG5cbmZ1bmN0aW9uIGFwcGx5U3R5bGVzKF9yZWYpIHtcbiAgdmFyIHN0YXRlID0gX3JlZi5zdGF0ZTtcbiAgT2JqZWN0LmtleXMoc3RhdGUuZWxlbWVudHMpLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB2YXIgc3R5bGUgPSBzdGF0ZS5zdHlsZXNbbmFtZV0gfHwge307XG4gICAgdmFyIGF0dHJpYnV0ZXMgPSBzdGF0ZS5hdHRyaWJ1dGVzW25hbWVdIHx8IHt9O1xuICAgIHZhciBlbGVtZW50ID0gc3RhdGUuZWxlbWVudHNbbmFtZV07IC8vIGFycm93IGlzIG9wdGlvbmFsICsgdmlydHVhbCBlbGVtZW50c1xuXG4gICAgaWYgKCFpc0hUTUxFbGVtZW50KGVsZW1lbnQpIHx8ICFnZXROb2RlTmFtZShlbGVtZW50KSkge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gRmxvdyBkb2Vzbid0IHN1cHBvcnQgdG8gZXh0ZW5kIHRoaXMgcHJvcGVydHksIGJ1dCBpdCdzIHRoZSBtb3N0XG4gICAgLy8gZWZmZWN0aXZlIHdheSB0byBhcHBseSBzdHlsZXMgdG8gYW4gSFRNTEVsZW1lbnRcbiAgICAvLyAkRmxvd0ZpeE1lW2Nhbm5vdC13cml0ZV1cblxuXG4gICAgT2JqZWN0LmFzc2lnbihlbGVtZW50LnN0eWxlLCBzdHlsZSk7XG4gICAgT2JqZWN0LmtleXMoYXR0cmlidXRlcykuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgdmFyIHZhbHVlID0gYXR0cmlidXRlc1tuYW1lXTtcblxuICAgICAgaWYgKHZhbHVlID09PSBmYWxzZSkge1xuICAgICAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlID09PSB0cnVlID8gJycgOiB2YWx1ZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBlZmZlY3QoX3JlZjIpIHtcbiAgdmFyIHN0YXRlID0gX3JlZjIuc3RhdGU7XG4gIHZhciBpbml0aWFsU3R5bGVzID0ge1xuICAgIHBvcHBlcjoge1xuICAgICAgcG9zaXRpb246IHN0YXRlLm9wdGlvbnMuc3RyYXRlZ3ksXG4gICAgICBsZWZ0OiAnMCcsXG4gICAgICB0b3A6ICcwJyxcbiAgICAgIG1hcmdpbjogJzAnXG4gICAgfSxcbiAgICBhcnJvdzoge1xuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZSdcbiAgICB9LFxuICAgIHJlZmVyZW5jZToge31cbiAgfTtcbiAgT2JqZWN0LmFzc2lnbihzdGF0ZS5lbGVtZW50cy5wb3BwZXIuc3R5bGUsIGluaXRpYWxTdHlsZXMucG9wcGVyKTtcblxuICBpZiAoc3RhdGUuZWxlbWVudHMuYXJyb3cpIHtcbiAgICBPYmplY3QuYXNzaWduKHN0YXRlLmVsZW1lbnRzLmFycm93LnN0eWxlLCBpbml0aWFsU3R5bGVzLmFycm93KTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgT2JqZWN0LmtleXMoc3RhdGUuZWxlbWVudHMpLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgIHZhciBlbGVtZW50ID0gc3RhdGUuZWxlbWVudHNbbmFtZV07XG4gICAgICB2YXIgYXR0cmlidXRlcyA9IHN0YXRlLmF0dHJpYnV0ZXNbbmFtZV0gfHwge307XG4gICAgICB2YXIgc3R5bGVQcm9wZXJ0aWVzID0gT2JqZWN0LmtleXMoc3RhdGUuc3R5bGVzLmhhc093blByb3BlcnR5KG5hbWUpID8gc3RhdGUuc3R5bGVzW25hbWVdIDogaW5pdGlhbFN0eWxlc1tuYW1lXSk7IC8vIFNldCBhbGwgdmFsdWVzIHRvIGFuIGVtcHR5IHN0cmluZyB0byB1bnNldCB0aGVtXG5cbiAgICAgIHZhciBzdHlsZSA9IHN0eWxlUHJvcGVydGllcy5yZWR1Y2UoZnVuY3Rpb24gKHN0eWxlLCBwcm9wZXJ0eSkge1xuICAgICAgICBzdHlsZVtwcm9wZXJ0eV0gPSAnJztcbiAgICAgICAgcmV0dXJuIHN0eWxlO1xuICAgICAgfSwge30pOyAvLyBhcnJvdyBpcyBvcHRpb25hbCArIHZpcnR1YWwgZWxlbWVudHNcblxuICAgICAgaWYgKCFpc0hUTUxFbGVtZW50KGVsZW1lbnQpIHx8ICFnZXROb2RlTmFtZShlbGVtZW50KSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIE9iamVjdC5hc3NpZ24oZWxlbWVudC5zdHlsZSwgc3R5bGUpO1xuICAgICAgT2JqZWN0LmtleXMoYXR0cmlidXRlcykuZm9yRWFjaChmdW5jdGlvbiAoYXR0cmlidXRlKSB7XG4gICAgICAgIGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKGF0dHJpYnV0ZSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcbn0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogJ2FwcGx5U3R5bGVzJyxcbiAgZW5hYmxlZDogdHJ1ZSxcbiAgcGhhc2U6ICd3cml0ZScsXG4gIGZuOiBhcHBseVN0eWxlcyxcbiAgZWZmZWN0OiBlZmZlY3QsXG4gIHJlcXVpcmVzOiBbJ2NvbXB1dGVTdHlsZXMnXVxufTsiLCJpbXBvcnQgZ2V0QmFzZVBsYWNlbWVudCBmcm9tIFwiLi4vdXRpbHMvZ2V0QmFzZVBsYWNlbWVudC5qc1wiO1xuaW1wb3J0IHsgdG9wLCBsZWZ0LCByaWdodCwgcGxhY2VtZW50cyB9IGZyb20gXCIuLi9lbnVtcy5qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIGRpc3RhbmNlQW5kU2tpZGRpbmdUb1hZKHBsYWNlbWVudCwgcmVjdHMsIG9mZnNldCkge1xuICB2YXIgYmFzZVBsYWNlbWVudCA9IGdldEJhc2VQbGFjZW1lbnQocGxhY2VtZW50KTtcbiAgdmFyIGludmVydERpc3RhbmNlID0gW2xlZnQsIHRvcF0uaW5kZXhPZihiYXNlUGxhY2VtZW50KSA+PSAwID8gLTEgOiAxO1xuXG4gIHZhciBfcmVmID0gdHlwZW9mIG9mZnNldCA9PT0gJ2Z1bmN0aW9uJyA/IG9mZnNldChPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHJlY3RzKSwge30sIHtcbiAgICBwbGFjZW1lbnQ6IHBsYWNlbWVudFxuICB9KSkgOiBvZmZzZXQsXG4gICAgICBza2lkZGluZyA9IF9yZWZbMF0sXG4gICAgICBkaXN0YW5jZSA9IF9yZWZbMV07XG5cbiAgc2tpZGRpbmcgPSBza2lkZGluZyB8fCAwO1xuICBkaXN0YW5jZSA9IChkaXN0YW5jZSB8fCAwKSAqIGludmVydERpc3RhbmNlO1xuICByZXR1cm4gW2xlZnQsIHJpZ2h0XS5pbmRleE9mKGJhc2VQbGFjZW1lbnQpID49IDAgPyB7XG4gICAgeDogZGlzdGFuY2UsXG4gICAgeTogc2tpZGRpbmdcbiAgfSA6IHtcbiAgICB4OiBza2lkZGluZyxcbiAgICB5OiBkaXN0YW5jZVxuICB9O1xufVxuXG5mdW5jdGlvbiBvZmZzZXQoX3JlZjIpIHtcbiAgdmFyIHN0YXRlID0gX3JlZjIuc3RhdGUsXG4gICAgICBvcHRpb25zID0gX3JlZjIub3B0aW9ucyxcbiAgICAgIG5hbWUgPSBfcmVmMi5uYW1lO1xuICB2YXIgX29wdGlvbnMkb2Zmc2V0ID0gb3B0aW9ucy5vZmZzZXQsXG4gICAgICBvZmZzZXQgPSBfb3B0aW9ucyRvZmZzZXQgPT09IHZvaWQgMCA/IFswLCAwXSA6IF9vcHRpb25zJG9mZnNldDtcbiAgdmFyIGRhdGEgPSBwbGFjZW1lbnRzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBwbGFjZW1lbnQpIHtcbiAgICBhY2NbcGxhY2VtZW50XSA9IGRpc3RhbmNlQW5kU2tpZGRpbmdUb1hZKHBsYWNlbWVudCwgc3RhdGUucmVjdHMsIG9mZnNldCk7XG4gICAgcmV0dXJuIGFjYztcbiAgfSwge30pO1xuICB2YXIgX2RhdGEkc3RhdGUkcGxhY2VtZW50ID0gZGF0YVtzdGF0ZS5wbGFjZW1lbnRdLFxuICAgICAgeCA9IF9kYXRhJHN0YXRlJHBsYWNlbWVudC54LFxuICAgICAgeSA9IF9kYXRhJHN0YXRlJHBsYWNlbWVudC55O1xuXG4gIGlmIChzdGF0ZS5tb2RpZmllcnNEYXRhLnBvcHBlck9mZnNldHMgIT0gbnVsbCkge1xuICAgIHN0YXRlLm1vZGlmaWVyc0RhdGEucG9wcGVyT2Zmc2V0cy54ICs9IHg7XG4gICAgc3RhdGUubW9kaWZpZXJzRGF0YS5wb3BwZXJPZmZzZXRzLnkgKz0geTtcbiAgfVxuXG4gIHN0YXRlLm1vZGlmaWVyc0RhdGFbbmFtZV0gPSBkYXRhO1xufSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cblxuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAnb2Zmc2V0JyxcbiAgZW5hYmxlZDogdHJ1ZSxcbiAgcGhhc2U6ICdtYWluJyxcbiAgcmVxdWlyZXM6IFsncG9wcGVyT2Zmc2V0cyddLFxuICBmbjogb2Zmc2V0XG59OyIsImltcG9ydCBnZXRPcHBvc2l0ZVBsYWNlbWVudCBmcm9tIFwiLi4vdXRpbHMvZ2V0T3Bwb3NpdGVQbGFjZW1lbnQuanNcIjtcbmltcG9ydCBnZXRCYXNlUGxhY2VtZW50IGZyb20gXCIuLi91dGlscy9nZXRCYXNlUGxhY2VtZW50LmpzXCI7XG5pbXBvcnQgZ2V0T3Bwb3NpdGVWYXJpYXRpb25QbGFjZW1lbnQgZnJvbSBcIi4uL3V0aWxzL2dldE9wcG9zaXRlVmFyaWF0aW9uUGxhY2VtZW50LmpzXCI7XG5pbXBvcnQgZGV0ZWN0T3ZlcmZsb3cgZnJvbSBcIi4uL3V0aWxzL2RldGVjdE92ZXJmbG93LmpzXCI7XG5pbXBvcnQgY29tcHV0ZUF1dG9QbGFjZW1lbnQgZnJvbSBcIi4uL3V0aWxzL2NvbXB1dGVBdXRvUGxhY2VtZW50LmpzXCI7XG5pbXBvcnQgeyBib3R0b20sIHRvcCwgc3RhcnQsIHJpZ2h0LCBsZWZ0LCBhdXRvIH0gZnJvbSBcIi4uL2VudW1zLmpzXCI7XG5pbXBvcnQgZ2V0VmFyaWF0aW9uIGZyb20gXCIuLi91dGlscy9nZXRWYXJpYXRpb24uanNcIjsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5mdW5jdGlvbiBnZXRFeHBhbmRlZEZhbGxiYWNrUGxhY2VtZW50cyhwbGFjZW1lbnQpIHtcbiAgaWYgKGdldEJhc2VQbGFjZW1lbnQocGxhY2VtZW50KSA9PT0gYXV0bykge1xuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIHZhciBvcHBvc2l0ZVBsYWNlbWVudCA9IGdldE9wcG9zaXRlUGxhY2VtZW50KHBsYWNlbWVudCk7XG4gIHJldHVybiBbZ2V0T3Bwb3NpdGVWYXJpYXRpb25QbGFjZW1lbnQocGxhY2VtZW50KSwgb3Bwb3NpdGVQbGFjZW1lbnQsIGdldE9wcG9zaXRlVmFyaWF0aW9uUGxhY2VtZW50KG9wcG9zaXRlUGxhY2VtZW50KV07XG59XG5cbmZ1bmN0aW9uIGZsaXAoX3JlZikge1xuICB2YXIgc3RhdGUgPSBfcmVmLnN0YXRlLFxuICAgICAgb3B0aW9ucyA9IF9yZWYub3B0aW9ucyxcbiAgICAgIG5hbWUgPSBfcmVmLm5hbWU7XG5cbiAgaWYgKHN0YXRlLm1vZGlmaWVyc0RhdGFbbmFtZV0uX3NraXApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgX29wdGlvbnMkbWFpbkF4aXMgPSBvcHRpb25zLm1haW5BeGlzLFxuICAgICAgY2hlY2tNYWluQXhpcyA9IF9vcHRpb25zJG1haW5BeGlzID09PSB2b2lkIDAgPyB0cnVlIDogX29wdGlvbnMkbWFpbkF4aXMsXG4gICAgICBfb3B0aW9ucyRhbHRBeGlzID0gb3B0aW9ucy5hbHRBeGlzLFxuICAgICAgY2hlY2tBbHRBeGlzID0gX29wdGlvbnMkYWx0QXhpcyA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9vcHRpb25zJGFsdEF4aXMsXG4gICAgICBzcGVjaWZpZWRGYWxsYmFja1BsYWNlbWVudHMgPSBvcHRpb25zLmZhbGxiYWNrUGxhY2VtZW50cyxcbiAgICAgIHBhZGRpbmcgPSBvcHRpb25zLnBhZGRpbmcsXG4gICAgICBib3VuZGFyeSA9IG9wdGlvbnMuYm91bmRhcnksXG4gICAgICByb290Qm91bmRhcnkgPSBvcHRpb25zLnJvb3RCb3VuZGFyeSxcbiAgICAgIGFsdEJvdW5kYXJ5ID0gb3B0aW9ucy5hbHRCb3VuZGFyeSxcbiAgICAgIF9vcHRpb25zJGZsaXBWYXJpYXRpbyA9IG9wdGlvbnMuZmxpcFZhcmlhdGlvbnMsXG4gICAgICBmbGlwVmFyaWF0aW9ucyA9IF9vcHRpb25zJGZsaXBWYXJpYXRpbyA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9vcHRpb25zJGZsaXBWYXJpYXRpbyxcbiAgICAgIGFsbG93ZWRBdXRvUGxhY2VtZW50cyA9IG9wdGlvbnMuYWxsb3dlZEF1dG9QbGFjZW1lbnRzO1xuICB2YXIgcHJlZmVycmVkUGxhY2VtZW50ID0gc3RhdGUub3B0aW9ucy5wbGFjZW1lbnQ7XG4gIHZhciBiYXNlUGxhY2VtZW50ID0gZ2V0QmFzZVBsYWNlbWVudChwcmVmZXJyZWRQbGFjZW1lbnQpO1xuICB2YXIgaXNCYXNlUGxhY2VtZW50ID0gYmFzZVBsYWNlbWVudCA9PT0gcHJlZmVycmVkUGxhY2VtZW50O1xuICB2YXIgZmFsbGJhY2tQbGFjZW1lbnRzID0gc3BlY2lmaWVkRmFsbGJhY2tQbGFjZW1lbnRzIHx8IChpc0Jhc2VQbGFjZW1lbnQgfHwgIWZsaXBWYXJpYXRpb25zID8gW2dldE9wcG9zaXRlUGxhY2VtZW50KHByZWZlcnJlZFBsYWNlbWVudCldIDogZ2V0RXhwYW5kZWRGYWxsYmFja1BsYWNlbWVudHMocHJlZmVycmVkUGxhY2VtZW50KSk7XG4gIHZhciBwbGFjZW1lbnRzID0gW3ByZWZlcnJlZFBsYWNlbWVudF0uY29uY2F0KGZhbGxiYWNrUGxhY2VtZW50cykucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHBsYWNlbWVudCkge1xuICAgIHJldHVybiBhY2MuY29uY2F0KGdldEJhc2VQbGFjZW1lbnQocGxhY2VtZW50KSA9PT0gYXV0byA/IGNvbXB1dGVBdXRvUGxhY2VtZW50KHN0YXRlLCB7XG4gICAgICBwbGFjZW1lbnQ6IHBsYWNlbWVudCxcbiAgICAgIGJvdW5kYXJ5OiBib3VuZGFyeSxcbiAgICAgIHJvb3RCb3VuZGFyeTogcm9vdEJvdW5kYXJ5LFxuICAgICAgcGFkZGluZzogcGFkZGluZyxcbiAgICAgIGZsaXBWYXJpYXRpb25zOiBmbGlwVmFyaWF0aW9ucyxcbiAgICAgIGFsbG93ZWRBdXRvUGxhY2VtZW50czogYWxsb3dlZEF1dG9QbGFjZW1lbnRzXG4gICAgfSkgOiBwbGFjZW1lbnQpO1xuICB9LCBbXSk7XG4gIHZhciByZWZlcmVuY2VSZWN0ID0gc3RhdGUucmVjdHMucmVmZXJlbmNlO1xuICB2YXIgcG9wcGVyUmVjdCA9IHN0YXRlLnJlY3RzLnBvcHBlcjtcbiAgdmFyIGNoZWNrc01hcCA9IG5ldyBNYXAoKTtcbiAgdmFyIG1ha2VGYWxsYmFja0NoZWNrcyA9IHRydWU7XG4gIHZhciBmaXJzdEZpdHRpbmdQbGFjZW1lbnQgPSBwbGFjZW1lbnRzWzBdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcGxhY2VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBwbGFjZW1lbnQgPSBwbGFjZW1lbnRzW2ldO1xuXG4gICAgdmFyIF9iYXNlUGxhY2VtZW50ID0gZ2V0QmFzZVBsYWNlbWVudChwbGFjZW1lbnQpO1xuXG4gICAgdmFyIGlzU3RhcnRWYXJpYXRpb24gPSBnZXRWYXJpYXRpb24ocGxhY2VtZW50KSA9PT0gc3RhcnQ7XG4gICAgdmFyIGlzVmVydGljYWwgPSBbdG9wLCBib3R0b21dLmluZGV4T2YoX2Jhc2VQbGFjZW1lbnQpID49IDA7XG4gICAgdmFyIGxlbiA9IGlzVmVydGljYWwgPyAnd2lkdGgnIDogJ2hlaWdodCc7XG4gICAgdmFyIG92ZXJmbG93ID0gZGV0ZWN0T3ZlcmZsb3coc3RhdGUsIHtcbiAgICAgIHBsYWNlbWVudDogcGxhY2VtZW50LFxuICAgICAgYm91bmRhcnk6IGJvdW5kYXJ5LFxuICAgICAgcm9vdEJvdW5kYXJ5OiByb290Qm91bmRhcnksXG4gICAgICBhbHRCb3VuZGFyeTogYWx0Qm91bmRhcnksXG4gICAgICBwYWRkaW5nOiBwYWRkaW5nXG4gICAgfSk7XG4gICAgdmFyIG1haW5WYXJpYXRpb25TaWRlID0gaXNWZXJ0aWNhbCA/IGlzU3RhcnRWYXJpYXRpb24gPyByaWdodCA6IGxlZnQgOiBpc1N0YXJ0VmFyaWF0aW9uID8gYm90dG9tIDogdG9wO1xuXG4gICAgaWYgKHJlZmVyZW5jZVJlY3RbbGVuXSA+IHBvcHBlclJlY3RbbGVuXSkge1xuICAgICAgbWFpblZhcmlhdGlvblNpZGUgPSBnZXRPcHBvc2l0ZVBsYWNlbWVudChtYWluVmFyaWF0aW9uU2lkZSk7XG4gICAgfVxuXG4gICAgdmFyIGFsdFZhcmlhdGlvblNpZGUgPSBnZXRPcHBvc2l0ZVBsYWNlbWVudChtYWluVmFyaWF0aW9uU2lkZSk7XG4gICAgdmFyIGNoZWNrcyA9IFtdO1xuXG4gICAgaWYgKGNoZWNrTWFpbkF4aXMpIHtcbiAgICAgIGNoZWNrcy5wdXNoKG92ZXJmbG93W19iYXNlUGxhY2VtZW50XSA8PSAwKTtcbiAgICB9XG5cbiAgICBpZiAoY2hlY2tBbHRBeGlzKSB7XG4gICAgICBjaGVja3MucHVzaChvdmVyZmxvd1ttYWluVmFyaWF0aW9uU2lkZV0gPD0gMCwgb3ZlcmZsb3dbYWx0VmFyaWF0aW9uU2lkZV0gPD0gMCk7XG4gICAgfVxuXG4gICAgaWYgKGNoZWNrcy5ldmVyeShmdW5jdGlvbiAoY2hlY2spIHtcbiAgICAgIHJldHVybiBjaGVjaztcbiAgICB9KSkge1xuICAgICAgZmlyc3RGaXR0aW5nUGxhY2VtZW50ID0gcGxhY2VtZW50O1xuICAgICAgbWFrZUZhbGxiYWNrQ2hlY2tzID0gZmFsc2U7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBjaGVja3NNYXAuc2V0KHBsYWNlbWVudCwgY2hlY2tzKTtcbiAgfVxuXG4gIGlmIChtYWtlRmFsbGJhY2tDaGVja3MpIHtcbiAgICAvLyBgMmAgbWF5IGJlIGRlc2lyZWQgaW4gc29tZSBjYXNlcyDigJMgcmVzZWFyY2ggbGF0ZXJcbiAgICB2YXIgbnVtYmVyT2ZDaGVja3MgPSBmbGlwVmFyaWF0aW9ucyA/IDMgOiAxO1xuXG4gICAgdmFyIF9sb29wID0gZnVuY3Rpb24gX2xvb3AoX2kpIHtcbiAgICAgIHZhciBmaXR0aW5nUGxhY2VtZW50ID0gcGxhY2VtZW50cy5maW5kKGZ1bmN0aW9uIChwbGFjZW1lbnQpIHtcbiAgICAgICAgdmFyIGNoZWNrcyA9IGNoZWNrc01hcC5nZXQocGxhY2VtZW50KTtcblxuICAgICAgICBpZiAoY2hlY2tzKSB7XG4gICAgICAgICAgcmV0dXJuIGNoZWNrcy5zbGljZSgwLCBfaSkuZXZlcnkoZnVuY3Rpb24gKGNoZWNrKSB7XG4gICAgICAgICAgICByZXR1cm4gY2hlY2s7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBpZiAoZml0dGluZ1BsYWNlbWVudCkge1xuICAgICAgICBmaXJzdEZpdHRpbmdQbGFjZW1lbnQgPSBmaXR0aW5nUGxhY2VtZW50O1xuICAgICAgICByZXR1cm4gXCJicmVha1wiO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBmb3IgKHZhciBfaSA9IG51bWJlck9mQ2hlY2tzOyBfaSA+IDA7IF9pLS0pIHtcbiAgICAgIHZhciBfcmV0ID0gX2xvb3AoX2kpO1xuXG4gICAgICBpZiAoX3JldCA9PT0gXCJicmVha1wiKSBicmVhaztcbiAgICB9XG4gIH1cblxuICBpZiAoc3RhdGUucGxhY2VtZW50ICE9PSBmaXJzdEZpdHRpbmdQbGFjZW1lbnQpIHtcbiAgICBzdGF0ZS5tb2RpZmllcnNEYXRhW25hbWVdLl9za2lwID0gdHJ1ZTtcbiAgICBzdGF0ZS5wbGFjZW1lbnQgPSBmaXJzdEZpdHRpbmdQbGFjZW1lbnQ7XG4gICAgc3RhdGUucmVzZXQgPSB0cnVlO1xuICB9XG59IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICdmbGlwJyxcbiAgZW5hYmxlZDogdHJ1ZSxcbiAgcGhhc2U6ICdtYWluJyxcbiAgZm46IGZsaXAsXG4gIHJlcXVpcmVzSWZFeGlzdHM6IFsnb2Zmc2V0J10sXG4gIGRhdGE6IHtcbiAgICBfc2tpcDogZmFsc2VcbiAgfVxufTsiLCJpbXBvcnQgZ2V0VmFyaWF0aW9uIGZyb20gXCIuL2dldFZhcmlhdGlvbi5qc1wiO1xuaW1wb3J0IHsgdmFyaWF0aW9uUGxhY2VtZW50cywgYmFzZVBsYWNlbWVudHMsIHBsYWNlbWVudHMgYXMgYWxsUGxhY2VtZW50cyB9IGZyb20gXCIuLi9lbnVtcy5qc1wiO1xuaW1wb3J0IGRldGVjdE92ZXJmbG93IGZyb20gXCIuL2RldGVjdE92ZXJmbG93LmpzXCI7XG5pbXBvcnQgZ2V0QmFzZVBsYWNlbWVudCBmcm9tIFwiLi9nZXRCYXNlUGxhY2VtZW50LmpzXCI7XG5cbi8qOjogdHlwZSBPdmVyZmxvd3NNYXAgPSB7IFtDb21wdXRlZFBsYWNlbWVudF06IG51bWJlciB9OyAqL1xuXG4vKjs7IHR5cGUgT3ZlcmZsb3dzTWFwID0geyBba2V5IGluIENvbXB1dGVkUGxhY2VtZW50XTogbnVtYmVyIH07ICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb21wdXRlQXV0b1BsYWNlbWVudChzdGF0ZSwgb3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgdmFyIF9vcHRpb25zID0gb3B0aW9ucyxcbiAgICAgIHBsYWNlbWVudCA9IF9vcHRpb25zLnBsYWNlbWVudCxcbiAgICAgIGJvdW5kYXJ5ID0gX29wdGlvbnMuYm91bmRhcnksXG4gICAgICByb290Qm91bmRhcnkgPSBfb3B0aW9ucy5yb290Qm91bmRhcnksXG4gICAgICBwYWRkaW5nID0gX29wdGlvbnMucGFkZGluZyxcbiAgICAgIGZsaXBWYXJpYXRpb25zID0gX29wdGlvbnMuZmxpcFZhcmlhdGlvbnMsXG4gICAgICBfb3B0aW9ucyRhbGxvd2VkQXV0b1AgPSBfb3B0aW9ucy5hbGxvd2VkQXV0b1BsYWNlbWVudHMsXG4gICAgICBhbGxvd2VkQXV0b1BsYWNlbWVudHMgPSBfb3B0aW9ucyRhbGxvd2VkQXV0b1AgPT09IHZvaWQgMCA/IGFsbFBsYWNlbWVudHMgOiBfb3B0aW9ucyRhbGxvd2VkQXV0b1A7XG4gIHZhciB2YXJpYXRpb24gPSBnZXRWYXJpYXRpb24ocGxhY2VtZW50KTtcbiAgdmFyIHBsYWNlbWVudHMgPSB2YXJpYXRpb24gPyBmbGlwVmFyaWF0aW9ucyA/IHZhcmlhdGlvblBsYWNlbWVudHMgOiB2YXJpYXRpb25QbGFjZW1lbnRzLmZpbHRlcihmdW5jdGlvbiAocGxhY2VtZW50KSB7XG4gICAgcmV0dXJuIGdldFZhcmlhdGlvbihwbGFjZW1lbnQpID09PSB2YXJpYXRpb247XG4gIH0pIDogYmFzZVBsYWNlbWVudHM7XG4gIHZhciBhbGxvd2VkUGxhY2VtZW50cyA9IHBsYWNlbWVudHMuZmlsdGVyKGZ1bmN0aW9uIChwbGFjZW1lbnQpIHtcbiAgICByZXR1cm4gYWxsb3dlZEF1dG9QbGFjZW1lbnRzLmluZGV4T2YocGxhY2VtZW50KSA+PSAwO1xuICB9KTtcblxuICBpZiAoYWxsb3dlZFBsYWNlbWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgYWxsb3dlZFBsYWNlbWVudHMgPSBwbGFjZW1lbnRzO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgY29uc29sZS5lcnJvcihbJ1BvcHBlcjogVGhlIGBhbGxvd2VkQXV0b1BsYWNlbWVudHNgIG9wdGlvbiBkaWQgbm90IGFsbG93IGFueScsICdwbGFjZW1lbnRzLiBFbnN1cmUgdGhlIGBwbGFjZW1lbnRgIG9wdGlvbiBtYXRjaGVzIHRoZSB2YXJpYXRpb24nLCAnb2YgdGhlIGFsbG93ZWQgcGxhY2VtZW50cy4nLCAnRm9yIGV4YW1wbGUsIFwiYXV0b1wiIGNhbm5vdCBiZSB1c2VkIHRvIGFsbG93IFwiYm90dG9tLXN0YXJ0XCIuJywgJ1VzZSBcImF1dG8tc3RhcnRcIiBpbnN0ZWFkLiddLmpvaW4oJyAnKSk7XG4gICAgfVxuICB9IC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXR5cGVdOiBGbG93IHNlZW1zIHRvIGhhdmUgcHJvYmxlbXMgd2l0aCB0d28gYXJyYXkgdW5pb25zLi4uXG5cblxuICB2YXIgb3ZlcmZsb3dzID0gYWxsb3dlZFBsYWNlbWVudHMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHBsYWNlbWVudCkge1xuICAgIGFjY1twbGFjZW1lbnRdID0gZGV0ZWN0T3ZlcmZsb3coc3RhdGUsIHtcbiAgICAgIHBsYWNlbWVudDogcGxhY2VtZW50LFxuICAgICAgYm91bmRhcnk6IGJvdW5kYXJ5LFxuICAgICAgcm9vdEJvdW5kYXJ5OiByb290Qm91bmRhcnksXG4gICAgICBwYWRkaW5nOiBwYWRkaW5nXG4gICAgfSlbZ2V0QmFzZVBsYWNlbWVudChwbGFjZW1lbnQpXTtcbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG4gIHJldHVybiBPYmplY3Qua2V5cyhvdmVyZmxvd3MpLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gb3ZlcmZsb3dzW2FdIC0gb3ZlcmZsb3dzW2JdO1xuICB9KTtcbn0iLCJpbXBvcnQgeyB0b3AsIGxlZnQsIHJpZ2h0LCBib3R0b20sIHN0YXJ0IH0gZnJvbSBcIi4uL2VudW1zLmpzXCI7XG5pbXBvcnQgZ2V0QmFzZVBsYWNlbWVudCBmcm9tIFwiLi4vdXRpbHMvZ2V0QmFzZVBsYWNlbWVudC5qc1wiO1xuaW1wb3J0IGdldE1haW5BeGlzRnJvbVBsYWNlbWVudCBmcm9tIFwiLi4vdXRpbHMvZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50LmpzXCI7XG5pbXBvcnQgZ2V0QWx0QXhpcyBmcm9tIFwiLi4vdXRpbHMvZ2V0QWx0QXhpcy5qc1wiO1xuaW1wb3J0IHdpdGhpbiBmcm9tIFwiLi4vdXRpbHMvd2l0aGluLmpzXCI7XG5pbXBvcnQgZ2V0TGF5b3V0UmVjdCBmcm9tIFwiLi4vZG9tLXV0aWxzL2dldExheW91dFJlY3QuanNcIjtcbmltcG9ydCBnZXRPZmZzZXRQYXJlbnQgZnJvbSBcIi4uL2RvbS11dGlscy9nZXRPZmZzZXRQYXJlbnQuanNcIjtcbmltcG9ydCBkZXRlY3RPdmVyZmxvdyBmcm9tIFwiLi4vdXRpbHMvZGV0ZWN0T3ZlcmZsb3cuanNcIjtcbmltcG9ydCBnZXRWYXJpYXRpb24gZnJvbSBcIi4uL3V0aWxzL2dldFZhcmlhdGlvbi5qc1wiO1xuaW1wb3J0IGdldEZyZXNoU2lkZU9iamVjdCBmcm9tIFwiLi4vdXRpbHMvZ2V0RnJlc2hTaWRlT2JqZWN0LmpzXCI7XG5cbmZ1bmN0aW9uIHByZXZlbnRPdmVyZmxvdyhfcmVmKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYuc3RhdGUsXG4gICAgICBvcHRpb25zID0gX3JlZi5vcHRpb25zLFxuICAgICAgbmFtZSA9IF9yZWYubmFtZTtcbiAgdmFyIF9vcHRpb25zJG1haW5BeGlzID0gb3B0aW9ucy5tYWluQXhpcyxcbiAgICAgIGNoZWNrTWFpbkF4aXMgPSBfb3B0aW9ucyRtYWluQXhpcyA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9vcHRpb25zJG1haW5BeGlzLFxuICAgICAgX29wdGlvbnMkYWx0QXhpcyA9IG9wdGlvbnMuYWx0QXhpcyxcbiAgICAgIGNoZWNrQWx0QXhpcyA9IF9vcHRpb25zJGFsdEF4aXMgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkYWx0QXhpcyxcbiAgICAgIGJvdW5kYXJ5ID0gb3B0aW9ucy5ib3VuZGFyeSxcbiAgICAgIHJvb3RCb3VuZGFyeSA9IG9wdGlvbnMucm9vdEJvdW5kYXJ5LFxuICAgICAgYWx0Qm91bmRhcnkgPSBvcHRpb25zLmFsdEJvdW5kYXJ5LFxuICAgICAgcGFkZGluZyA9IG9wdGlvbnMucGFkZGluZyxcbiAgICAgIF9vcHRpb25zJHRldGhlciA9IG9wdGlvbnMudGV0aGVyLFxuICAgICAgdGV0aGVyID0gX29wdGlvbnMkdGV0aGVyID09PSB2b2lkIDAgPyB0cnVlIDogX29wdGlvbnMkdGV0aGVyLFxuICAgICAgX29wdGlvbnMkdGV0aGVyT2Zmc2V0ID0gb3B0aW9ucy50ZXRoZXJPZmZzZXQsXG4gICAgICB0ZXRoZXJPZmZzZXQgPSBfb3B0aW9ucyR0ZXRoZXJPZmZzZXQgPT09IHZvaWQgMCA/IDAgOiBfb3B0aW9ucyR0ZXRoZXJPZmZzZXQ7XG4gIHZhciBvdmVyZmxvdyA9IGRldGVjdE92ZXJmbG93KHN0YXRlLCB7XG4gICAgYm91bmRhcnk6IGJvdW5kYXJ5LFxuICAgIHJvb3RCb3VuZGFyeTogcm9vdEJvdW5kYXJ5LFxuICAgIHBhZGRpbmc6IHBhZGRpbmcsXG4gICAgYWx0Qm91bmRhcnk6IGFsdEJvdW5kYXJ5XG4gIH0pO1xuICB2YXIgYmFzZVBsYWNlbWVudCA9IGdldEJhc2VQbGFjZW1lbnQoc3RhdGUucGxhY2VtZW50KTtcbiAgdmFyIHZhcmlhdGlvbiA9IGdldFZhcmlhdGlvbihzdGF0ZS5wbGFjZW1lbnQpO1xuICB2YXIgaXNCYXNlUGxhY2VtZW50ID0gIXZhcmlhdGlvbjtcbiAgdmFyIG1haW5BeGlzID0gZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50KGJhc2VQbGFjZW1lbnQpO1xuICB2YXIgYWx0QXhpcyA9IGdldEFsdEF4aXMobWFpbkF4aXMpO1xuICB2YXIgcG9wcGVyT2Zmc2V0cyA9IHN0YXRlLm1vZGlmaWVyc0RhdGEucG9wcGVyT2Zmc2V0cztcbiAgdmFyIHJlZmVyZW5jZVJlY3QgPSBzdGF0ZS5yZWN0cy5yZWZlcmVuY2U7XG4gIHZhciBwb3BwZXJSZWN0ID0gc3RhdGUucmVjdHMucG9wcGVyO1xuICB2YXIgdGV0aGVyT2Zmc2V0VmFsdWUgPSB0eXBlb2YgdGV0aGVyT2Zmc2V0ID09PSAnZnVuY3Rpb24nID8gdGV0aGVyT2Zmc2V0KE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUucmVjdHMpLCB7fSwge1xuICAgIHBsYWNlbWVudDogc3RhdGUucGxhY2VtZW50XG4gIH0pKSA6IHRldGhlck9mZnNldDtcbiAgdmFyIGRhdGEgPSB7XG4gICAgeDogMCxcbiAgICB5OiAwXG4gIH07XG5cbiAgaWYgKCFwb3BwZXJPZmZzZXRzKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGNoZWNrTWFpbkF4aXMpIHtcbiAgICB2YXIgbWFpblNpZGUgPSBtYWluQXhpcyA9PT0gJ3knID8gdG9wIDogbGVmdDtcbiAgICB2YXIgYWx0U2lkZSA9IG1haW5BeGlzID09PSAneScgPyBib3R0b20gOiByaWdodDtcbiAgICB2YXIgbGVuID0gbWFpbkF4aXMgPT09ICd5JyA/ICdoZWlnaHQnIDogJ3dpZHRoJztcbiAgICB2YXIgb2Zmc2V0ID0gcG9wcGVyT2Zmc2V0c1ttYWluQXhpc107XG4gICAgdmFyIG1pbiA9IHBvcHBlck9mZnNldHNbbWFpbkF4aXNdICsgb3ZlcmZsb3dbbWFpblNpZGVdO1xuICAgIHZhciBtYXggPSBwb3BwZXJPZmZzZXRzW21haW5BeGlzXSAtIG92ZXJmbG93W2FsdFNpZGVdO1xuICAgIHZhciBhZGRpdGl2ZSA9IHRldGhlciA/IC1wb3BwZXJSZWN0W2xlbl0gLyAyIDogMDtcbiAgICB2YXIgbWluTGVuID0gdmFyaWF0aW9uID09PSBzdGFydCA/IHJlZmVyZW5jZVJlY3RbbGVuXSA6IHBvcHBlclJlY3RbbGVuXTtcbiAgICB2YXIgbWF4TGVuID0gdmFyaWF0aW9uID09PSBzdGFydCA/IC1wb3BwZXJSZWN0W2xlbl0gOiAtcmVmZXJlbmNlUmVjdFtsZW5dOyAvLyBXZSBuZWVkIHRvIGluY2x1ZGUgdGhlIGFycm93IGluIHRoZSBjYWxjdWxhdGlvbiBzbyB0aGUgYXJyb3cgZG9lc24ndCBnb1xuICAgIC8vIG91dHNpZGUgdGhlIHJlZmVyZW5jZSBib3VuZHNcblxuICAgIHZhciBhcnJvd0VsZW1lbnQgPSBzdGF0ZS5lbGVtZW50cy5hcnJvdztcbiAgICB2YXIgYXJyb3dSZWN0ID0gdGV0aGVyICYmIGFycm93RWxlbWVudCA/IGdldExheW91dFJlY3QoYXJyb3dFbGVtZW50KSA6IHtcbiAgICAgIHdpZHRoOiAwLFxuICAgICAgaGVpZ2h0OiAwXG4gICAgfTtcbiAgICB2YXIgYXJyb3dQYWRkaW5nT2JqZWN0ID0gc3RhdGUubW9kaWZpZXJzRGF0YVsnYXJyb3cjcGVyc2lzdGVudCddID8gc3RhdGUubW9kaWZpZXJzRGF0YVsnYXJyb3cjcGVyc2lzdGVudCddLnBhZGRpbmcgOiBnZXRGcmVzaFNpZGVPYmplY3QoKTtcbiAgICB2YXIgYXJyb3dQYWRkaW5nTWluID0gYXJyb3dQYWRkaW5nT2JqZWN0W21haW5TaWRlXTtcbiAgICB2YXIgYXJyb3dQYWRkaW5nTWF4ID0gYXJyb3dQYWRkaW5nT2JqZWN0W2FsdFNpZGVdOyAvLyBJZiB0aGUgcmVmZXJlbmNlIGxlbmd0aCBpcyBzbWFsbGVyIHRoYW4gdGhlIGFycm93IGxlbmd0aCwgd2UgZG9uJ3Qgd2FudFxuICAgIC8vIHRvIGluY2x1ZGUgaXRzIGZ1bGwgc2l6ZSBpbiB0aGUgY2FsY3VsYXRpb24uIElmIHRoZSByZWZlcmVuY2UgaXMgc21hbGxcbiAgICAvLyBhbmQgbmVhciB0aGUgZWRnZSBvZiBhIGJvdW5kYXJ5LCB0aGUgcG9wcGVyIGNhbiBvdmVyZmxvdyBldmVuIGlmIHRoZVxuICAgIC8vIHJlZmVyZW5jZSBpcyBub3Qgb3ZlcmZsb3dpbmcgYXMgd2VsbCAoZS5nLiB2aXJ0dWFsIGVsZW1lbnRzIHdpdGggbm9cbiAgICAvLyB3aWR0aCBvciBoZWlnaHQpXG5cbiAgICB2YXIgYXJyb3dMZW4gPSB3aXRoaW4oMCwgcmVmZXJlbmNlUmVjdFtsZW5dLCBhcnJvd1JlY3RbbGVuXSk7XG4gICAgdmFyIG1pbk9mZnNldCA9IGlzQmFzZVBsYWNlbWVudCA/IHJlZmVyZW5jZVJlY3RbbGVuXSAvIDIgLSBhZGRpdGl2ZSAtIGFycm93TGVuIC0gYXJyb3dQYWRkaW5nTWluIC0gdGV0aGVyT2Zmc2V0VmFsdWUgOiBtaW5MZW4gLSBhcnJvd0xlbiAtIGFycm93UGFkZGluZ01pbiAtIHRldGhlck9mZnNldFZhbHVlO1xuICAgIHZhciBtYXhPZmZzZXQgPSBpc0Jhc2VQbGFjZW1lbnQgPyAtcmVmZXJlbmNlUmVjdFtsZW5dIC8gMiArIGFkZGl0aXZlICsgYXJyb3dMZW4gKyBhcnJvd1BhZGRpbmdNYXggKyB0ZXRoZXJPZmZzZXRWYWx1ZSA6IG1heExlbiArIGFycm93TGVuICsgYXJyb3dQYWRkaW5nTWF4ICsgdGV0aGVyT2Zmc2V0VmFsdWU7XG4gICAgdmFyIGFycm93T2Zmc2V0UGFyZW50ID0gc3RhdGUuZWxlbWVudHMuYXJyb3cgJiYgZ2V0T2Zmc2V0UGFyZW50KHN0YXRlLmVsZW1lbnRzLmFycm93KTtcbiAgICB2YXIgY2xpZW50T2Zmc2V0ID0gYXJyb3dPZmZzZXRQYXJlbnQgPyBtYWluQXhpcyA9PT0gJ3knID8gYXJyb3dPZmZzZXRQYXJlbnQuY2xpZW50VG9wIHx8IDAgOiBhcnJvd09mZnNldFBhcmVudC5jbGllbnRMZWZ0IHx8IDAgOiAwO1xuICAgIHZhciBvZmZzZXRNb2RpZmllclZhbHVlID0gc3RhdGUubW9kaWZpZXJzRGF0YS5vZmZzZXQgPyBzdGF0ZS5tb2RpZmllcnNEYXRhLm9mZnNldFtzdGF0ZS5wbGFjZW1lbnRdW21haW5BeGlzXSA6IDA7XG4gICAgdmFyIHRldGhlck1pbiA9IHBvcHBlck9mZnNldHNbbWFpbkF4aXNdICsgbWluT2Zmc2V0IC0gb2Zmc2V0TW9kaWZpZXJWYWx1ZSAtIGNsaWVudE9mZnNldDtcbiAgICB2YXIgdGV0aGVyTWF4ID0gcG9wcGVyT2Zmc2V0c1ttYWluQXhpc10gKyBtYXhPZmZzZXQgLSBvZmZzZXRNb2RpZmllclZhbHVlO1xuICAgIHZhciBwcmV2ZW50ZWRPZmZzZXQgPSB3aXRoaW4odGV0aGVyID8gTWF0aC5taW4obWluLCB0ZXRoZXJNaW4pIDogbWluLCBvZmZzZXQsIHRldGhlciA/IE1hdGgubWF4KG1heCwgdGV0aGVyTWF4KSA6IG1heCk7XG4gICAgcG9wcGVyT2Zmc2V0c1ttYWluQXhpc10gPSBwcmV2ZW50ZWRPZmZzZXQ7XG4gICAgZGF0YVttYWluQXhpc10gPSBwcmV2ZW50ZWRPZmZzZXQgLSBvZmZzZXQ7XG4gIH1cblxuICBpZiAoY2hlY2tBbHRBeGlzKSB7XG4gICAgdmFyIF9tYWluU2lkZSA9IG1haW5BeGlzID09PSAneCcgPyB0b3AgOiBsZWZ0O1xuXG4gICAgdmFyIF9hbHRTaWRlID0gbWFpbkF4aXMgPT09ICd4JyA/IGJvdHRvbSA6IHJpZ2h0O1xuXG4gICAgdmFyIF9vZmZzZXQgPSBwb3BwZXJPZmZzZXRzW2FsdEF4aXNdO1xuXG4gICAgdmFyIF9taW4gPSBfb2Zmc2V0ICsgb3ZlcmZsb3dbX21haW5TaWRlXTtcblxuICAgIHZhciBfbWF4ID0gX29mZnNldCAtIG92ZXJmbG93W19hbHRTaWRlXTtcblxuICAgIHZhciBfcHJldmVudGVkT2Zmc2V0ID0gd2l0aGluKF9taW4sIF9vZmZzZXQsIF9tYXgpO1xuXG4gICAgcG9wcGVyT2Zmc2V0c1thbHRBeGlzXSA9IF9wcmV2ZW50ZWRPZmZzZXQ7XG4gICAgZGF0YVthbHRBeGlzXSA9IF9wcmV2ZW50ZWRPZmZzZXQgLSBfb2Zmc2V0O1xuICB9XG5cbiAgc3RhdGUubW9kaWZpZXJzRGF0YVtuYW1lXSA9IGRhdGE7XG59IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICdwcmV2ZW50T3ZlcmZsb3cnLFxuICBlbmFibGVkOiB0cnVlLFxuICBwaGFzZTogJ21haW4nLFxuICBmbjogcHJldmVudE92ZXJmbG93LFxuICByZXF1aXJlc0lmRXhpc3RzOiBbJ29mZnNldCddXG59OyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldEFsdEF4aXMoYXhpcykge1xuICByZXR1cm4gYXhpcyA9PT0gJ3gnID8gJ3knIDogJ3gnO1xufSIsImltcG9ydCBnZXRCYXNlUGxhY2VtZW50IGZyb20gXCIuLi91dGlscy9nZXRCYXNlUGxhY2VtZW50LmpzXCI7XG5pbXBvcnQgZ2V0TGF5b3V0UmVjdCBmcm9tIFwiLi4vZG9tLXV0aWxzL2dldExheW91dFJlY3QuanNcIjtcbmltcG9ydCBjb250YWlucyBmcm9tIFwiLi4vZG9tLXV0aWxzL2NvbnRhaW5zLmpzXCI7XG5pbXBvcnQgZ2V0T2Zmc2V0UGFyZW50IGZyb20gXCIuLi9kb20tdXRpbHMvZ2V0T2Zmc2V0UGFyZW50LmpzXCI7XG5pbXBvcnQgZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50IGZyb20gXCIuLi91dGlscy9nZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQuanNcIjtcbmltcG9ydCB3aXRoaW4gZnJvbSBcIi4uL3V0aWxzL3dpdGhpbi5qc1wiO1xuaW1wb3J0IG1lcmdlUGFkZGluZ09iamVjdCBmcm9tIFwiLi4vdXRpbHMvbWVyZ2VQYWRkaW5nT2JqZWN0LmpzXCI7XG5pbXBvcnQgZXhwYW5kVG9IYXNoTWFwIGZyb20gXCIuLi91dGlscy9leHBhbmRUb0hhc2hNYXAuanNcIjtcbmltcG9ydCB7IGxlZnQsIHJpZ2h0LCBiYXNlUGxhY2VtZW50cywgdG9wLCBib3R0b20gfSBmcm9tIFwiLi4vZW51bXMuanNcIjtcbmltcG9ydCB7IGlzSFRNTEVsZW1lbnQgfSBmcm9tIFwiLi4vZG9tLXV0aWxzL2luc3RhbmNlT2YuanNcIjsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5mdW5jdGlvbiBhcnJvdyhfcmVmKSB7XG4gIHZhciBfc3RhdGUkbW9kaWZpZXJzRGF0YSQ7XG5cbiAgdmFyIHN0YXRlID0gX3JlZi5zdGF0ZSxcbiAgICAgIG5hbWUgPSBfcmVmLm5hbWU7XG4gIHZhciBhcnJvd0VsZW1lbnQgPSBzdGF0ZS5lbGVtZW50cy5hcnJvdztcbiAgdmFyIHBvcHBlck9mZnNldHMgPSBzdGF0ZS5tb2RpZmllcnNEYXRhLnBvcHBlck9mZnNldHM7XG4gIHZhciBiYXNlUGxhY2VtZW50ID0gZ2V0QmFzZVBsYWNlbWVudChzdGF0ZS5wbGFjZW1lbnQpO1xuICB2YXIgYXhpcyA9IGdldE1haW5BeGlzRnJvbVBsYWNlbWVudChiYXNlUGxhY2VtZW50KTtcbiAgdmFyIGlzVmVydGljYWwgPSBbbGVmdCwgcmlnaHRdLmluZGV4T2YoYmFzZVBsYWNlbWVudCkgPj0gMDtcbiAgdmFyIGxlbiA9IGlzVmVydGljYWwgPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG5cbiAgaWYgKCFhcnJvd0VsZW1lbnQgfHwgIXBvcHBlck9mZnNldHMpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgcGFkZGluZ09iamVjdCA9IHN0YXRlLm1vZGlmaWVyc0RhdGFbbmFtZSArIFwiI3BlcnNpc3RlbnRcIl0ucGFkZGluZztcbiAgdmFyIGFycm93UmVjdCA9IGdldExheW91dFJlY3QoYXJyb3dFbGVtZW50KTtcbiAgdmFyIG1pblByb3AgPSBheGlzID09PSAneScgPyB0b3AgOiBsZWZ0O1xuICB2YXIgbWF4UHJvcCA9IGF4aXMgPT09ICd5JyA/IGJvdHRvbSA6IHJpZ2h0O1xuICB2YXIgZW5kRGlmZiA9IHN0YXRlLnJlY3RzLnJlZmVyZW5jZVtsZW5dICsgc3RhdGUucmVjdHMucmVmZXJlbmNlW2F4aXNdIC0gcG9wcGVyT2Zmc2V0c1theGlzXSAtIHN0YXRlLnJlY3RzLnBvcHBlcltsZW5dO1xuICB2YXIgc3RhcnREaWZmID0gcG9wcGVyT2Zmc2V0c1theGlzXSAtIHN0YXRlLnJlY3RzLnJlZmVyZW5jZVtheGlzXTtcbiAgdmFyIGFycm93T2Zmc2V0UGFyZW50ID0gZ2V0T2Zmc2V0UGFyZW50KGFycm93RWxlbWVudCk7XG4gIHZhciBjbGllbnRTaXplID0gYXJyb3dPZmZzZXRQYXJlbnQgPyBheGlzID09PSAneScgPyBhcnJvd09mZnNldFBhcmVudC5jbGllbnRIZWlnaHQgfHwgMCA6IGFycm93T2Zmc2V0UGFyZW50LmNsaWVudFdpZHRoIHx8IDAgOiAwO1xuICB2YXIgY2VudGVyVG9SZWZlcmVuY2UgPSBlbmREaWZmIC8gMiAtIHN0YXJ0RGlmZiAvIDI7IC8vIE1ha2Ugc3VyZSB0aGUgYXJyb3cgZG9lc24ndCBvdmVyZmxvdyB0aGUgcG9wcGVyIGlmIHRoZSBjZW50ZXIgcG9pbnQgaXNcbiAgLy8gb3V0c2lkZSBvZiB0aGUgcG9wcGVyIGJvdW5kc1xuXG4gIHZhciBtaW4gPSBwYWRkaW5nT2JqZWN0W21pblByb3BdO1xuICB2YXIgbWF4ID0gY2xpZW50U2l6ZSAtIGFycm93UmVjdFtsZW5dIC0gcGFkZGluZ09iamVjdFttYXhQcm9wXTtcbiAgdmFyIGNlbnRlciA9IGNsaWVudFNpemUgLyAyIC0gYXJyb3dSZWN0W2xlbl0gLyAyICsgY2VudGVyVG9SZWZlcmVuY2U7XG4gIHZhciBvZmZzZXQgPSB3aXRoaW4obWluLCBjZW50ZXIsIG1heCk7IC8vIFByZXZlbnRzIGJyZWFraW5nIHN5bnRheCBoaWdobGlnaHRpbmcuLi5cblxuICB2YXIgYXhpc1Byb3AgPSBheGlzO1xuICBzdGF0ZS5tb2RpZmllcnNEYXRhW25hbWVdID0gKF9zdGF0ZSRtb2RpZmllcnNEYXRhJCA9IHt9LCBfc3RhdGUkbW9kaWZpZXJzRGF0YSRbYXhpc1Byb3BdID0gb2Zmc2V0LCBfc3RhdGUkbW9kaWZpZXJzRGF0YSQuY2VudGVyT2Zmc2V0ID0gb2Zmc2V0IC0gY2VudGVyLCBfc3RhdGUkbW9kaWZpZXJzRGF0YSQpO1xufVxuXG5mdW5jdGlvbiBlZmZlY3QoX3JlZjIpIHtcbiAgdmFyIHN0YXRlID0gX3JlZjIuc3RhdGUsXG4gICAgICBvcHRpb25zID0gX3JlZjIub3B0aW9ucyxcbiAgICAgIG5hbWUgPSBfcmVmMi5uYW1lO1xuICB2YXIgX29wdGlvbnMkZWxlbWVudCA9IG9wdGlvbnMuZWxlbWVudCxcbiAgICAgIGFycm93RWxlbWVudCA9IF9vcHRpb25zJGVsZW1lbnQgPT09IHZvaWQgMCA/ICdbZGF0YS1wb3BwZXItYXJyb3ddJyA6IF9vcHRpb25zJGVsZW1lbnQsXG4gICAgICBfb3B0aW9ucyRwYWRkaW5nID0gb3B0aW9ucy5wYWRkaW5nLFxuICAgICAgcGFkZGluZyA9IF9vcHRpb25zJHBhZGRpbmcgPT09IHZvaWQgMCA/IDAgOiBfb3B0aW9ucyRwYWRkaW5nO1xuXG4gIGlmIChhcnJvd0VsZW1lbnQgPT0gbnVsbCkge1xuICAgIHJldHVybjtcbiAgfSAvLyBDU1Mgc2VsZWN0b3JcblxuXG4gIGlmICh0eXBlb2YgYXJyb3dFbGVtZW50ID09PSAnc3RyaW5nJykge1xuICAgIGFycm93RWxlbWVudCA9IHN0YXRlLmVsZW1lbnRzLnBvcHBlci5xdWVyeVNlbGVjdG9yKGFycm93RWxlbWVudCk7XG5cbiAgICBpZiAoIWFycm93RWxlbWVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICBpZiAoIWlzSFRNTEVsZW1lbnQoYXJyb3dFbGVtZW50KSkge1xuICAgICAgY29uc29sZS5lcnJvcihbJ1BvcHBlcjogXCJhcnJvd1wiIGVsZW1lbnQgbXVzdCBiZSBhbiBIVE1MRWxlbWVudCAobm90IGFuIFNWR0VsZW1lbnQpLicsICdUbyB1c2UgYW4gU1ZHIGFycm93LCB3cmFwIGl0IGluIGFuIEhUTUxFbGVtZW50IHRoYXQgd2lsbCBiZSB1c2VkIGFzJywgJ3RoZSBhcnJvdy4nXS5qb2luKCcgJykpO1xuICAgIH1cbiAgfVxuXG4gIGlmICghY29udGFpbnMoc3RhdGUuZWxlbWVudHMucG9wcGVyLCBhcnJvd0VsZW1lbnQpKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgY29uc29sZS5lcnJvcihbJ1BvcHBlcjogXCJhcnJvd1wiIG1vZGlmaWVyXFwncyBgZWxlbWVudGAgbXVzdCBiZSBhIGNoaWxkIG9mIHRoZSBwb3BwZXInLCAnZWxlbWVudC4nXS5qb2luKCcgJykpO1xuICAgIH1cblxuICAgIHJldHVybjtcbiAgfVxuXG4gIHN0YXRlLmVsZW1lbnRzLmFycm93ID0gYXJyb3dFbGVtZW50O1xuICBzdGF0ZS5tb2RpZmllcnNEYXRhW25hbWUgKyBcIiNwZXJzaXN0ZW50XCJdID0ge1xuICAgIHBhZGRpbmc6IG1lcmdlUGFkZGluZ09iamVjdCh0eXBlb2YgcGFkZGluZyAhPT0gJ251bWJlcicgPyBwYWRkaW5nIDogZXhwYW5kVG9IYXNoTWFwKHBhZGRpbmcsIGJhc2VQbGFjZW1lbnRzKSlcbiAgfTtcbn0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogJ2Fycm93JyxcbiAgZW5hYmxlZDogdHJ1ZSxcbiAgcGhhc2U6ICdtYWluJyxcbiAgZm46IGFycm93LFxuICBlZmZlY3Q6IGVmZmVjdCxcbiAgcmVxdWlyZXM6IFsncG9wcGVyT2Zmc2V0cyddLFxuICByZXF1aXJlc0lmRXhpc3RzOiBbJ3ByZXZlbnRPdmVyZmxvdyddXG59OyIsImZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG5cbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIF9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpO1xuICBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzcztcbiAgc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbn1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHtcbiAgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHtcbiAgICByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pO1xuICB9O1xuICByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pO1xufVxuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtcbiAgICBvLl9fcHJvdG9fXyA9IHA7XG4gICAgcmV0dXJuIG87XG4gIH07XG5cbiAgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTtcbn1cblxuZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHtcbiAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcInVuZGVmaW5lZFwiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlO1xuICBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlO1xuICBpZiAodHlwZW9mIFByb3h5ID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiB0cnVlO1xuXG4gIHRyeSB7XG4gICAgRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLCBbXSwgZnVuY3Rpb24gKCkge30pKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfY29uc3RydWN0KFBhcmVudCwgYXJncywgQ2xhc3MpIHtcbiAgaWYgKF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSkge1xuICAgIF9jb25zdHJ1Y3QgPSBSZWZsZWN0LmNvbnN0cnVjdDtcbiAgfSBlbHNlIHtcbiAgICBfY29uc3RydWN0ID0gZnVuY3Rpb24gX2NvbnN0cnVjdChQYXJlbnQsIGFyZ3MsIENsYXNzKSB7XG4gICAgICB2YXIgYSA9IFtudWxsXTtcbiAgICAgIGEucHVzaC5hcHBseShhLCBhcmdzKTtcbiAgICAgIHZhciBDb25zdHJ1Y3RvciA9IEZ1bmN0aW9uLmJpbmQuYXBwbHkoUGFyZW50LCBhKTtcbiAgICAgIHZhciBpbnN0YW5jZSA9IG5ldyBDb25zdHJ1Y3RvcigpO1xuICAgICAgaWYgKENsYXNzKSBfc2V0UHJvdG90eXBlT2YoaW5zdGFuY2UsIENsYXNzLnByb3RvdHlwZSk7XG4gICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBfY29uc3RydWN0LmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIF9pc05hdGl2ZUZ1bmN0aW9uKGZuKSB7XG4gIHJldHVybiBGdW5jdGlvbi50b1N0cmluZy5jYWxsKGZuKS5pbmRleE9mKFwiW25hdGl2ZSBjb2RlXVwiKSAhPT0gLTE7XG59XG5cbmZ1bmN0aW9uIF93cmFwTmF0aXZlU3VwZXIoQ2xhc3MpIHtcbiAgdmFyIF9jYWNoZSA9IHR5cGVvZiBNYXAgPT09IFwiZnVuY3Rpb25cIiA/IG5ldyBNYXAoKSA6IHVuZGVmaW5lZDtcblxuICBfd3JhcE5hdGl2ZVN1cGVyID0gZnVuY3Rpb24gX3dyYXBOYXRpdmVTdXBlcihDbGFzcykge1xuICAgIGlmIChDbGFzcyA9PT0gbnVsbCB8fCAhX2lzTmF0aXZlRnVuY3Rpb24oQ2xhc3MpKSByZXR1cm4gQ2xhc3M7XG5cbiAgICBpZiAodHlwZW9mIENsYXNzICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIF9jYWNoZSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgaWYgKF9jYWNoZS5oYXMoQ2xhc3MpKSByZXR1cm4gX2NhY2hlLmdldChDbGFzcyk7XG5cbiAgICAgIF9jYWNoZS5zZXQoQ2xhc3MsIFdyYXBwZXIpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIFdyYXBwZXIoKSB7XG4gICAgICByZXR1cm4gX2NvbnN0cnVjdChDbGFzcywgYXJndW1lbnRzLCBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3IpO1xuICAgIH1cblxuICAgIFdyYXBwZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShDbGFzcy5wcm90b3R5cGUsIHtcbiAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgIHZhbHVlOiBXcmFwcGVyLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBfc2V0UHJvdG90eXBlT2YoV3JhcHBlciwgQ2xhc3MpO1xuICB9O1xuXG4gIHJldHVybiBfd3JhcE5hdGl2ZVN1cGVyKENsYXNzKTtcbn1cblxuLyogZXNsaW50IG5vLWNvbnNvbGU6MCAqL1xudmFyIGZvcm1hdFJlZ0V4cCA9IC8lW3NkaiVdL2c7XG52YXIgd2FybmluZyA9IGZ1bmN0aW9uIHdhcm5pbmcoKSB7fTsgLy8gZG9uJ3QgcHJpbnQgd2FybmluZyBtZXNzYWdlIHdoZW4gaW4gcHJvZHVjdGlvbiBlbnYgb3Igbm9kZSBydW50aW1lXG5cbmlmICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgcHJvY2Vzcy5lbnYgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnKSB7XG4gIHdhcm5pbmcgPSBmdW5jdGlvbiB3YXJuaW5nKHR5cGUsIGVycm9ycykge1xuICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiYgY29uc29sZS53YXJuKSB7XG4gICAgICBpZiAoZXJyb3JzLmV2ZXJ5KGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgZSA9PT0gJ3N0cmluZyc7XG4gICAgICB9KSkge1xuICAgICAgICBjb25zb2xlLndhcm4odHlwZSwgZXJyb3JzKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNvbnZlcnRGaWVsZHNFcnJvcihlcnJvcnMpIHtcbiAgaWYgKCFlcnJvcnMgfHwgIWVycm9ycy5sZW5ndGgpIHJldHVybiBudWxsO1xuICB2YXIgZmllbGRzID0ge307XG4gIGVycm9ycy5mb3JFYWNoKGZ1bmN0aW9uIChlcnJvcikge1xuICAgIHZhciBmaWVsZCA9IGVycm9yLmZpZWxkO1xuICAgIGZpZWxkc1tmaWVsZF0gPSBmaWVsZHNbZmllbGRdIHx8IFtdO1xuICAgIGZpZWxkc1tmaWVsZF0ucHVzaChlcnJvcik7XG4gIH0pO1xuICByZXR1cm4gZmllbGRzO1xufVxuZnVuY3Rpb24gZm9ybWF0KCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgdmFyIGkgPSAxO1xuICB2YXIgZiA9IGFyZ3NbMF07XG4gIHZhciBsZW4gPSBhcmdzLmxlbmd0aDtcblxuICBpZiAodHlwZW9mIGYgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gZi5hcHBseShudWxsLCBhcmdzLnNsaWNlKDEpKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgZiA9PT0gJ3N0cmluZycpIHtcbiAgICB2YXIgc3RyID0gU3RyaW5nKGYpLnJlcGxhY2UoZm9ybWF0UmVnRXhwLCBmdW5jdGlvbiAoeCkge1xuICAgICAgaWYgKHggPT09ICclJScpIHtcbiAgICAgICAgcmV0dXJuICclJztcbiAgICAgIH1cblxuICAgICAgaWYgKGkgPj0gbGVuKSB7XG4gICAgICAgIHJldHVybiB4O1xuICAgICAgfVxuXG4gICAgICBzd2l0Y2ggKHgpIHtcbiAgICAgICAgY2FzZSAnJXMnOlxuICAgICAgICAgIHJldHVybiBTdHJpbmcoYXJnc1tpKytdKTtcblxuICAgICAgICBjYXNlICclZCc6XG4gICAgICAgICAgcmV0dXJuIE51bWJlcihhcmdzW2krK10pO1xuXG4gICAgICAgIGNhc2UgJyVqJzpcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGFyZ3NbaSsrXSk7XG4gICAgICAgICAgfSBjYXRjaCAoXykge1xuICAgICAgICAgICAgcmV0dXJuICdbQ2lyY3VsYXJdJztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiB4O1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBzdHI7XG4gIH1cblxuICByZXR1cm4gZjtcbn1cblxuZnVuY3Rpb24gaXNOYXRpdmVTdHJpbmdUeXBlKHR5cGUpIHtcbiAgcmV0dXJuIHR5cGUgPT09ICdzdHJpbmcnIHx8IHR5cGUgPT09ICd1cmwnIHx8IHR5cGUgPT09ICdoZXgnIHx8IHR5cGUgPT09ICdlbWFpbCcgfHwgdHlwZSA9PT0gJ2RhdGUnIHx8IHR5cGUgPT09ICdwYXR0ZXJuJztcbn1cblxuZnVuY3Rpb24gaXNFbXB0eVZhbHVlKHZhbHVlLCB0eXBlKSB7XG4gIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHZhbHVlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAodHlwZSA9PT0gJ2FycmF5JyAmJiBBcnJheS5pc0FycmF5KHZhbHVlKSAmJiAhdmFsdWUubGVuZ3RoKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAoaXNOYXRpdmVTdHJpbmdUeXBlKHR5cGUpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgIXZhbHVlKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGFzeW5jUGFyYWxsZWxBcnJheShhcnIsIGZ1bmMsIGNhbGxiYWNrKSB7XG4gIHZhciByZXN1bHRzID0gW107XG4gIHZhciB0b3RhbCA9IDA7XG4gIHZhciBhcnJMZW5ndGggPSBhcnIubGVuZ3RoO1xuXG4gIGZ1bmN0aW9uIGNvdW50KGVycm9ycykge1xuICAgIHJlc3VsdHMucHVzaC5hcHBseShyZXN1bHRzLCBlcnJvcnMpO1xuICAgIHRvdGFsKys7XG5cbiAgICBpZiAodG90YWwgPT09IGFyckxlbmd0aCkge1xuICAgICAgY2FsbGJhY2socmVzdWx0cyk7XG4gICAgfVxuICB9XG5cbiAgYXJyLmZvckVhY2goZnVuY3Rpb24gKGEpIHtcbiAgICBmdW5jKGEsIGNvdW50KTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGFzeW5jU2VyaWFsQXJyYXkoYXJyLCBmdW5jLCBjYWxsYmFjaykge1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgYXJyTGVuZ3RoID0gYXJyLmxlbmd0aDtcblxuICBmdW5jdGlvbiBuZXh0KGVycm9ycykge1xuICAgIGlmIChlcnJvcnMgJiYgZXJyb3JzLmxlbmd0aCkge1xuICAgICAgY2FsbGJhY2soZXJyb3JzKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgb3JpZ2luYWwgPSBpbmRleDtcbiAgICBpbmRleCA9IGluZGV4ICsgMTtcblxuICAgIGlmIChvcmlnaW5hbCA8IGFyckxlbmd0aCkge1xuICAgICAgZnVuYyhhcnJbb3JpZ2luYWxdLCBuZXh0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2FsbGJhY2soW10pO1xuICAgIH1cbiAgfVxuXG4gIG5leHQoW10pO1xufVxuXG5mdW5jdGlvbiBmbGF0dGVuT2JqQXJyKG9iakFycikge1xuICB2YXIgcmV0ID0gW107XG4gIE9iamVjdC5rZXlzKG9iakFycikuZm9yRWFjaChmdW5jdGlvbiAoaykge1xuICAgIHJldC5wdXNoLmFwcGx5KHJldCwgb2JqQXJyW2tdKTtcbiAgfSk7XG4gIHJldHVybiByZXQ7XG59XG5cbnZhciBBc3luY1ZhbGlkYXRpb25FcnJvciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0Vycm9yKSB7XG4gIF9pbmhlcml0c0xvb3NlKEFzeW5jVmFsaWRhdGlvbkVycm9yLCBfRXJyb3IpO1xuXG4gIGZ1bmN0aW9uIEFzeW5jVmFsaWRhdGlvbkVycm9yKGVycm9ycywgZmllbGRzKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfRXJyb3IuY2FsbCh0aGlzLCAnQXN5bmMgVmFsaWRhdGlvbiBFcnJvcicpIHx8IHRoaXM7XG4gICAgX3RoaXMuZXJyb3JzID0gZXJyb3JzO1xuICAgIF90aGlzLmZpZWxkcyA9IGZpZWxkcztcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICByZXR1cm4gQXN5bmNWYWxpZGF0aW9uRXJyb3I7XG59KCAvKiNfX1BVUkVfXyovX3dyYXBOYXRpdmVTdXBlcihFcnJvcikpO1xuZnVuY3Rpb24gYXN5bmNNYXAob2JqQXJyLCBvcHRpb24sIGZ1bmMsIGNhbGxiYWNrKSB7XG4gIGlmIChvcHRpb24uZmlyc3QpIHtcbiAgICB2YXIgX3BlbmRpbmcgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgbmV4dCA9IGZ1bmN0aW9uIG5leHQoZXJyb3JzKSB7XG4gICAgICAgIGNhbGxiYWNrKGVycm9ycyk7XG4gICAgICAgIHJldHVybiBlcnJvcnMubGVuZ3RoID8gcmVqZWN0KG5ldyBBc3luY1ZhbGlkYXRpb25FcnJvcihlcnJvcnMsIGNvbnZlcnRGaWVsZHNFcnJvcihlcnJvcnMpKSkgOiByZXNvbHZlKCk7XG4gICAgICB9O1xuXG4gICAgICB2YXIgZmxhdHRlbkFyciA9IGZsYXR0ZW5PYmpBcnIob2JqQXJyKTtcbiAgICAgIGFzeW5jU2VyaWFsQXJyYXkoZmxhdHRlbkFyciwgZnVuYywgbmV4dCk7XG4gICAgfSk7XG5cbiAgICBfcGVuZGluZ1tcImNhdGNoXCJdKGZ1bmN0aW9uIChlKSB7XG4gICAgICByZXR1cm4gZTtcbiAgICB9KTtcblxuICAgIHJldHVybiBfcGVuZGluZztcbiAgfVxuXG4gIHZhciBmaXJzdEZpZWxkcyA9IG9wdGlvbi5maXJzdEZpZWxkcyB8fCBbXTtcblxuICBpZiAoZmlyc3RGaWVsZHMgPT09IHRydWUpIHtcbiAgICBmaXJzdEZpZWxkcyA9IE9iamVjdC5rZXlzKG9iakFycik7XG4gIH1cblxuICB2YXIgb2JqQXJyS2V5cyA9IE9iamVjdC5rZXlzKG9iakFycik7XG4gIHZhciBvYmpBcnJMZW5ndGggPSBvYmpBcnJLZXlzLmxlbmd0aDtcbiAgdmFyIHRvdGFsID0gMDtcbiAgdmFyIHJlc3VsdHMgPSBbXTtcbiAgdmFyIHBlbmRpbmcgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgdmFyIG5leHQgPSBmdW5jdGlvbiBuZXh0KGVycm9ycykge1xuICAgICAgcmVzdWx0cy5wdXNoLmFwcGx5KHJlc3VsdHMsIGVycm9ycyk7XG4gICAgICB0b3RhbCsrO1xuXG4gICAgICBpZiAodG90YWwgPT09IG9iakFyckxlbmd0aCkge1xuICAgICAgICBjYWxsYmFjayhyZXN1bHRzKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdHMubGVuZ3RoID8gcmVqZWN0KG5ldyBBc3luY1ZhbGlkYXRpb25FcnJvcihyZXN1bHRzLCBjb252ZXJ0RmllbGRzRXJyb3IocmVzdWx0cykpKSA6IHJlc29sdmUoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgaWYgKCFvYmpBcnJLZXlzLmxlbmd0aCkge1xuICAgICAgY2FsbGJhY2socmVzdWx0cyk7XG4gICAgICByZXNvbHZlKCk7XG4gICAgfVxuXG4gICAgb2JqQXJyS2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIHZhciBhcnIgPSBvYmpBcnJba2V5XTtcblxuICAgICAgaWYgKGZpcnN0RmllbGRzLmluZGV4T2Yoa2V5KSAhPT0gLTEpIHtcbiAgICAgICAgYXN5bmNTZXJpYWxBcnJheShhcnIsIGZ1bmMsIG5leHQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXN5bmNQYXJhbGxlbEFycmF5KGFyciwgZnVuYywgbmV4dCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xuICBwZW5kaW5nW1wiY2F0Y2hcIl0oZnVuY3Rpb24gKGUpIHtcbiAgICByZXR1cm4gZTtcbiAgfSk7XG4gIHJldHVybiBwZW5kaW5nO1xufVxuZnVuY3Rpb24gY29tcGxlbWVudEVycm9yKHJ1bGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChvZSkge1xuICAgIGlmIChvZSAmJiBvZS5tZXNzYWdlKSB7XG4gICAgICBvZS5maWVsZCA9IG9lLmZpZWxkIHx8IHJ1bGUuZnVsbEZpZWxkO1xuICAgICAgcmV0dXJuIG9lO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBtZXNzYWdlOiB0eXBlb2Ygb2UgPT09ICdmdW5jdGlvbicgPyBvZSgpIDogb2UsXG4gICAgICBmaWVsZDogb2UuZmllbGQgfHwgcnVsZS5mdWxsRmllbGRcbiAgICB9O1xuICB9O1xufVxuZnVuY3Rpb24gZGVlcE1lcmdlKHRhcmdldCwgc291cmNlKSB7XG4gIGlmIChzb3VyY2UpIHtcbiAgICBmb3IgKHZhciBzIGluIHNvdXJjZSkge1xuICAgICAgaWYgKHNvdXJjZS5oYXNPd25Qcm9wZXJ0eShzKSkge1xuICAgICAgICB2YXIgdmFsdWUgPSBzb3VyY2Vbc107XG5cbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHRhcmdldFtzXSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICB0YXJnZXRbc10gPSBfZXh0ZW5kcyhfZXh0ZW5kcyh7fSwgdGFyZ2V0W3NdKSwgdmFsdWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRhcmdldFtzXSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuLyoqXG4gKiAgUnVsZSBmb3IgdmFsaWRhdGluZyByZXF1aXJlZCBmaWVsZHMuXG4gKlxuICogIEBwYXJhbSBydWxlIFRoZSB2YWxpZGF0aW9uIHJ1bGUuXG4gKiAgQHBhcmFtIHZhbHVlIFRoZSB2YWx1ZSBvZiB0aGUgZmllbGQgb24gdGhlIHNvdXJjZSBvYmplY3QuXG4gKiAgQHBhcmFtIHNvdXJjZSBUaGUgc291cmNlIG9iamVjdCBiZWluZyB2YWxpZGF0ZWQuXG4gKiAgQHBhcmFtIGVycm9ycyBBbiBhcnJheSBvZiBlcnJvcnMgdGhhdCB0aGlzIHJ1bGUgbWF5IGFkZFxuICogIHZhbGlkYXRpb24gZXJyb3JzIHRvLlxuICogIEBwYXJhbSBvcHRpb25zIFRoZSB2YWxpZGF0aW9uIG9wdGlvbnMuXG4gKiAgQHBhcmFtIG9wdGlvbnMubWVzc2FnZXMgVGhlIHZhbGlkYXRpb24gbWVzc2FnZXMuXG4gKi9cblxuZnVuY3Rpb24gcmVxdWlyZWQocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zLCB0eXBlKSB7XG4gIGlmIChydWxlLnJlcXVpcmVkICYmICghc291cmNlLmhhc093blByb3BlcnR5KHJ1bGUuZmllbGQpIHx8IGlzRW1wdHlWYWx1ZSh2YWx1ZSwgdHlwZSB8fCBydWxlLnR5cGUpKSkge1xuICAgIGVycm9ycy5wdXNoKGZvcm1hdChvcHRpb25zLm1lc3NhZ2VzLnJlcXVpcmVkLCBydWxlLmZ1bGxGaWVsZCkpO1xuICB9XG59XG5cbi8qKlxuICogIFJ1bGUgZm9yIHZhbGlkYXRpbmcgd2hpdGVzcGFjZS5cbiAqXG4gKiAgQHBhcmFtIHJ1bGUgVGhlIHZhbGlkYXRpb24gcnVsZS5cbiAqICBAcGFyYW0gdmFsdWUgVGhlIHZhbHVlIG9mIHRoZSBmaWVsZCBvbiB0aGUgc291cmNlIG9iamVjdC5cbiAqICBAcGFyYW0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0IGJlaW5nIHZhbGlkYXRlZC5cbiAqICBAcGFyYW0gZXJyb3JzIEFuIGFycmF5IG9mIGVycm9ycyB0aGF0IHRoaXMgcnVsZSBtYXkgYWRkXG4gKiAgdmFsaWRhdGlvbiBlcnJvcnMgdG8uXG4gKiAgQHBhcmFtIG9wdGlvbnMgVGhlIHZhbGlkYXRpb24gb3B0aW9ucy5cbiAqICBAcGFyYW0gb3B0aW9ucy5tZXNzYWdlcyBUaGUgdmFsaWRhdGlvbiBtZXNzYWdlcy5cbiAqL1xuXG5mdW5jdGlvbiB3aGl0ZXNwYWNlKHJ1bGUsIHZhbHVlLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucykge1xuICBpZiAoL15cXHMrJC8udGVzdCh2YWx1ZSkgfHwgdmFsdWUgPT09ICcnKSB7XG4gICAgZXJyb3JzLnB1c2goZm9ybWF0KG9wdGlvbnMubWVzc2FnZXMud2hpdGVzcGFjZSwgcnVsZS5mdWxsRmllbGQpKTtcbiAgfVxufVxuXG4vKiBlc2xpbnQgbWF4LWxlbjowICovXG5cbnZhciBwYXR0ZXJuID0ge1xuICAvLyBodHRwOi8vZW1haWxyZWdleC5jb20vXG4gIGVtYWlsOiAvXigoW148PigpXFxbXFxdXFxcXC4sOzpcXHNAXCJdKyhcXC5bXjw+KClcXFtcXF1cXFxcLiw7Olxcc0BcIl0rKSopfChcIi4rXCIpKUAoKFxcW1swLTldezEsM31cXC5bMC05XXsxLDN9XFwuWzAtOV17MSwzfVxcLlswLTldezEsM31dKXwoKFthLXpBLVpcXC0wLTldK1xcLikrW2EtekEtWl17Mix9KSkkLyxcbiAgdXJsOiBuZXcgUmVnRXhwKFwiXig/IW1haWx0bzopKD86KD86aHR0cHxodHRwc3xmdHApOi8vfC8vKSg/OlxcXFxTKyg/OjpcXFxcUyopP0ApPyg/Oig/Oig/OlsxLTldXFxcXGQ/fDFcXFxcZFxcXFxkfDJbMDFdXFxcXGR8MjJbMC0zXSkoPzpcXFxcLig/OjE/XFxcXGR7MSwyfXwyWzAtNF1cXFxcZHwyNVswLTVdKSl7Mn0oPzpcXFxcLig/OlswLTldXFxcXGQ/fDFcXFxcZFxcXFxkfDJbMC00XVxcXFxkfDI1WzAtNF0pKXwoPzooPzpbYS16XFxcXHUwMGExLVxcXFx1ZmZmZjAtOV0rLSopKlthLXpcXFxcdTAwYTEtXFxcXHVmZmZmMC05XSspKD86XFxcXC4oPzpbYS16XFxcXHUwMGExLVxcXFx1ZmZmZjAtOV0rLSopKlthLXpcXFxcdTAwYTEtXFxcXHVmZmZmMC05XSspKig/OlxcXFwuKD86W2EtelxcXFx1MDBhMS1cXFxcdWZmZmZdezIsfSkpKXxsb2NhbGhvc3QpKD86OlxcXFxkezIsNX0pPyg/OigvfFxcXFw/fCMpW15cXFxcc10qKT8kXCIsICdpJyksXG4gIGhleDogL14jPyhbYS1mMC05XXs2fXxbYS1mMC05XXszfSkkL2lcbn07XG52YXIgdHlwZXMgPSB7XG4gIGludGVnZXI6IGZ1bmN0aW9uIGludGVnZXIodmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZXMubnVtYmVyKHZhbHVlKSAmJiBwYXJzZUludCh2YWx1ZSwgMTApID09PSB2YWx1ZTtcbiAgfSxcbiAgXCJmbG9hdFwiOiBmdW5jdGlvbiBmbG9hdCh2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlcy5udW1iZXIodmFsdWUpICYmICF0eXBlcy5pbnRlZ2VyKHZhbHVlKTtcbiAgfSxcbiAgYXJyYXk6IGZ1bmN0aW9uIGFycmF5KHZhbHVlKSB7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkodmFsdWUpO1xuICB9LFxuICByZWdleHA6IGZ1bmN0aW9uIHJlZ2V4cCh2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiAhIW5ldyBSZWdFeHAodmFsdWUpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH0sXG4gIGRhdGU6IGZ1bmN0aW9uIGRhdGUodmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlLmdldFRpbWUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIHZhbHVlLmdldE1vbnRoID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiB2YWx1ZS5nZXRZZWFyID09PSAnZnVuY3Rpb24nICYmICFpc05hTih2YWx1ZS5nZXRUaW1lKCkpO1xuICB9LFxuICBudW1iZXI6IGZ1bmN0aW9uIG51bWJlcih2YWx1ZSkge1xuICAgIGlmIChpc05hTih2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJztcbiAgfSxcbiAgb2JqZWN0OiBmdW5jdGlvbiBvYmplY3QodmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiAhdHlwZXMuYXJyYXkodmFsdWUpO1xuICB9LFxuICBtZXRob2Q6IGZ1bmN0aW9uIG1ldGhvZCh2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbic7XG4gIH0sXG4gIGVtYWlsOiBmdW5jdGlvbiBlbWFpbCh2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmICEhdmFsdWUubWF0Y2gocGF0dGVybi5lbWFpbCkgJiYgdmFsdWUubGVuZ3RoIDwgMjU1O1xuICB9LFxuICB1cmw6IGZ1bmN0aW9uIHVybCh2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmICEhdmFsdWUubWF0Y2gocGF0dGVybi51cmwpO1xuICB9LFxuICBoZXg6IGZ1bmN0aW9uIGhleCh2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmICEhdmFsdWUubWF0Y2gocGF0dGVybi5oZXgpO1xuICB9XG59O1xuLyoqXG4gKiAgUnVsZSBmb3IgdmFsaWRhdGluZyB0aGUgdHlwZSBvZiBhIHZhbHVlLlxuICpcbiAqICBAcGFyYW0gcnVsZSBUaGUgdmFsaWRhdGlvbiBydWxlLlxuICogIEBwYXJhbSB2YWx1ZSBUaGUgdmFsdWUgb2YgdGhlIGZpZWxkIG9uIHRoZSBzb3VyY2Ugb2JqZWN0LlxuICogIEBwYXJhbSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QgYmVpbmcgdmFsaWRhdGVkLlxuICogIEBwYXJhbSBlcnJvcnMgQW4gYXJyYXkgb2YgZXJyb3JzIHRoYXQgdGhpcyBydWxlIG1heSBhZGRcbiAqICB2YWxpZGF0aW9uIGVycm9ycyB0by5cbiAqICBAcGFyYW0gb3B0aW9ucyBUaGUgdmFsaWRhdGlvbiBvcHRpb25zLlxuICogIEBwYXJhbSBvcHRpb25zLm1lc3NhZ2VzIFRoZSB2YWxpZGF0aW9uIG1lc3NhZ2VzLlxuICovXG5cbmZ1bmN0aW9uIHR5cGUocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zKSB7XG4gIGlmIChydWxlLnJlcXVpcmVkICYmIHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICByZXF1aXJlZChydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBjdXN0b20gPSBbJ2ludGVnZXInLCAnZmxvYXQnLCAnYXJyYXknLCAncmVnZXhwJywgJ29iamVjdCcsICdtZXRob2QnLCAnZW1haWwnLCAnbnVtYmVyJywgJ2RhdGUnLCAndXJsJywgJ2hleCddO1xuICB2YXIgcnVsZVR5cGUgPSBydWxlLnR5cGU7XG5cbiAgaWYgKGN1c3RvbS5pbmRleE9mKHJ1bGVUeXBlKSA+IC0xKSB7XG4gICAgaWYgKCF0eXBlc1tydWxlVHlwZV0odmFsdWUpKSB7XG4gICAgICBlcnJvcnMucHVzaChmb3JtYXQob3B0aW9ucy5tZXNzYWdlcy50eXBlc1tydWxlVHlwZV0sIHJ1bGUuZnVsbEZpZWxkLCBydWxlLnR5cGUpKTtcbiAgICB9IC8vIHN0cmFpZ2h0IHR5cGVvZiBjaGVja1xuXG4gIH0gZWxzZSBpZiAocnVsZVR5cGUgJiYgdHlwZW9mIHZhbHVlICE9PSBydWxlLnR5cGUpIHtcbiAgICBlcnJvcnMucHVzaChmb3JtYXQob3B0aW9ucy5tZXNzYWdlcy50eXBlc1tydWxlVHlwZV0sIHJ1bGUuZnVsbEZpZWxkLCBydWxlLnR5cGUpKTtcbiAgfVxufVxuXG4vKipcbiAqICBSdWxlIGZvciB2YWxpZGF0aW5nIG1pbmltdW0gYW5kIG1heGltdW0gYWxsb3dlZCB2YWx1ZXMuXG4gKlxuICogIEBwYXJhbSBydWxlIFRoZSB2YWxpZGF0aW9uIHJ1bGUuXG4gKiAgQHBhcmFtIHZhbHVlIFRoZSB2YWx1ZSBvZiB0aGUgZmllbGQgb24gdGhlIHNvdXJjZSBvYmplY3QuXG4gKiAgQHBhcmFtIHNvdXJjZSBUaGUgc291cmNlIG9iamVjdCBiZWluZyB2YWxpZGF0ZWQuXG4gKiAgQHBhcmFtIGVycm9ycyBBbiBhcnJheSBvZiBlcnJvcnMgdGhhdCB0aGlzIHJ1bGUgbWF5IGFkZFxuICogIHZhbGlkYXRpb24gZXJyb3JzIHRvLlxuICogIEBwYXJhbSBvcHRpb25zIFRoZSB2YWxpZGF0aW9uIG9wdGlvbnMuXG4gKiAgQHBhcmFtIG9wdGlvbnMubWVzc2FnZXMgVGhlIHZhbGlkYXRpb24gbWVzc2FnZXMuXG4gKi9cblxuZnVuY3Rpb24gcmFuZ2UocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zKSB7XG4gIHZhciBsZW4gPSB0eXBlb2YgcnVsZS5sZW4gPT09ICdudW1iZXInO1xuICB2YXIgbWluID0gdHlwZW9mIHJ1bGUubWluID09PSAnbnVtYmVyJztcbiAgdmFyIG1heCA9IHR5cGVvZiBydWxlLm1heCA9PT0gJ251bWJlcic7IC8vIOato+WImeWMuemFjeeggeeCueiMg+WbtOS7jlUrMDEwMDAw5LiA55u05YiwVSsxMEZGRkbnmoTmloflrZfvvIjooaXlhYXlubPpnaJTdXBwbGVtZW50YXJ5IFBsYW5l77yJXG5cbiAgdmFyIHNwUmVnZXhwID0gL1tcXHVEODAwLVxcdURCRkZdW1xcdURDMDAtXFx1REZGRl0vZztcbiAgdmFyIHZhbCA9IHZhbHVlO1xuICB2YXIga2V5ID0gbnVsbDtcbiAgdmFyIG51bSA9IHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcic7XG4gIHZhciBzdHIgPSB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnO1xuICB2YXIgYXJyID0gQXJyYXkuaXNBcnJheSh2YWx1ZSk7XG5cbiAgaWYgKG51bSkge1xuICAgIGtleSA9ICdudW1iZXInO1xuICB9IGVsc2UgaWYgKHN0cikge1xuICAgIGtleSA9ICdzdHJpbmcnO1xuICB9IGVsc2UgaWYgKGFycikge1xuICAgIGtleSA9ICdhcnJheSc7XG4gIH0gLy8gaWYgdGhlIHZhbHVlIGlzIG5vdCBvZiBhIHN1cHBvcnRlZCB0eXBlIGZvciByYW5nZSB2YWxpZGF0aW9uXG4gIC8vIHRoZSB2YWxpZGF0aW9uIHJ1bGUgcnVsZSBzaG91bGQgdXNlIHRoZVxuICAvLyB0eXBlIHByb3BlcnR5IHRvIGFsc28gdGVzdCBmb3IgYSBwYXJ0aWN1bGFyIHR5cGVcblxuXG4gIGlmICgha2V5KSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKGFycikge1xuICAgIHZhbCA9IHZhbHVlLmxlbmd0aDtcbiAgfVxuXG4gIGlmIChzdHIpIHtcbiAgICAvLyDlpITnkIbnoIHngrnlpKfkuo5VKzAxMDAwMOeahOaWh+Wtl2xlbmd0aOWxnuaAp+S4jeWHhuehrueahGJ1Z++8jOWmglwi8KCut/CgrrfwoK63XCIubGVuZ2h0ICE9PSAzXG4gICAgdmFsID0gdmFsdWUucmVwbGFjZShzcFJlZ2V4cCwgJ18nKS5sZW5ndGg7XG4gIH1cblxuICBpZiAobGVuKSB7XG4gICAgaWYgKHZhbCAhPT0gcnVsZS5sZW4pIHtcbiAgICAgIGVycm9ycy5wdXNoKGZvcm1hdChvcHRpb25zLm1lc3NhZ2VzW2tleV0ubGVuLCBydWxlLmZ1bGxGaWVsZCwgcnVsZS5sZW4pKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAobWluICYmICFtYXggJiYgdmFsIDwgcnVsZS5taW4pIHtcbiAgICBlcnJvcnMucHVzaChmb3JtYXQob3B0aW9ucy5tZXNzYWdlc1trZXldLm1pbiwgcnVsZS5mdWxsRmllbGQsIHJ1bGUubWluKSk7XG4gIH0gZWxzZSBpZiAobWF4ICYmICFtaW4gJiYgdmFsID4gcnVsZS5tYXgpIHtcbiAgICBlcnJvcnMucHVzaChmb3JtYXQob3B0aW9ucy5tZXNzYWdlc1trZXldLm1heCwgcnVsZS5mdWxsRmllbGQsIHJ1bGUubWF4KSk7XG4gIH0gZWxzZSBpZiAobWluICYmIG1heCAmJiAodmFsIDwgcnVsZS5taW4gfHwgdmFsID4gcnVsZS5tYXgpKSB7XG4gICAgZXJyb3JzLnB1c2goZm9ybWF0KG9wdGlvbnMubWVzc2FnZXNba2V5XS5yYW5nZSwgcnVsZS5mdWxsRmllbGQsIHJ1bGUubWluLCBydWxlLm1heCkpO1xuICB9XG59XG5cbnZhciBFTlVNID0gJ2VudW0nO1xuLyoqXG4gKiAgUnVsZSBmb3IgdmFsaWRhdGluZyBhIHZhbHVlIGV4aXN0cyBpbiBhbiBlbnVtZXJhYmxlIGxpc3QuXG4gKlxuICogIEBwYXJhbSBydWxlIFRoZSB2YWxpZGF0aW9uIHJ1bGUuXG4gKiAgQHBhcmFtIHZhbHVlIFRoZSB2YWx1ZSBvZiB0aGUgZmllbGQgb24gdGhlIHNvdXJjZSBvYmplY3QuXG4gKiAgQHBhcmFtIHNvdXJjZSBUaGUgc291cmNlIG9iamVjdCBiZWluZyB2YWxpZGF0ZWQuXG4gKiAgQHBhcmFtIGVycm9ycyBBbiBhcnJheSBvZiBlcnJvcnMgdGhhdCB0aGlzIHJ1bGUgbWF5IGFkZFxuICogIHZhbGlkYXRpb24gZXJyb3JzIHRvLlxuICogIEBwYXJhbSBvcHRpb25zIFRoZSB2YWxpZGF0aW9uIG9wdGlvbnMuXG4gKiAgQHBhcmFtIG9wdGlvbnMubWVzc2FnZXMgVGhlIHZhbGlkYXRpb24gbWVzc2FnZXMuXG4gKi9cblxuZnVuY3Rpb24gZW51bWVyYWJsZShydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMpIHtcbiAgcnVsZVtFTlVNXSA9IEFycmF5LmlzQXJyYXkocnVsZVtFTlVNXSkgPyBydWxlW0VOVU1dIDogW107XG5cbiAgaWYgKHJ1bGVbRU5VTV0uaW5kZXhPZih2YWx1ZSkgPT09IC0xKSB7XG4gICAgZXJyb3JzLnB1c2goZm9ybWF0KG9wdGlvbnMubWVzc2FnZXNbRU5VTV0sIHJ1bGUuZnVsbEZpZWxkLCBydWxlW0VOVU1dLmpvaW4oJywgJykpKTtcbiAgfVxufVxuXG4vKipcbiAqICBSdWxlIGZvciB2YWxpZGF0aW5nIGEgcmVndWxhciBleHByZXNzaW9uIHBhdHRlcm4uXG4gKlxuICogIEBwYXJhbSBydWxlIFRoZSB2YWxpZGF0aW9uIHJ1bGUuXG4gKiAgQHBhcmFtIHZhbHVlIFRoZSB2YWx1ZSBvZiB0aGUgZmllbGQgb24gdGhlIHNvdXJjZSBvYmplY3QuXG4gKiAgQHBhcmFtIHNvdXJjZSBUaGUgc291cmNlIG9iamVjdCBiZWluZyB2YWxpZGF0ZWQuXG4gKiAgQHBhcmFtIGVycm9ycyBBbiBhcnJheSBvZiBlcnJvcnMgdGhhdCB0aGlzIHJ1bGUgbWF5IGFkZFxuICogIHZhbGlkYXRpb24gZXJyb3JzIHRvLlxuICogIEBwYXJhbSBvcHRpb25zIFRoZSB2YWxpZGF0aW9uIG9wdGlvbnMuXG4gKiAgQHBhcmFtIG9wdGlvbnMubWVzc2FnZXMgVGhlIHZhbGlkYXRpb24gbWVzc2FnZXMuXG4gKi9cblxuZnVuY3Rpb24gcGF0dGVybiQxKHJ1bGUsIHZhbHVlLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucykge1xuICBpZiAocnVsZS5wYXR0ZXJuKSB7XG4gICAgaWYgKHJ1bGUucGF0dGVybiBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgICAgLy8gaWYgYSBSZWdFeHAgaW5zdGFuY2UgaXMgcGFzc2VkLCByZXNldCBgbGFzdEluZGV4YCBpbiBjYXNlIGl0cyBgZ2xvYmFsYFxuICAgICAgLy8gZmxhZyBpcyBhY2NpZGVudGFsbHkgc2V0IHRvIGB0cnVlYCwgd2hpY2ggaW4gYSB2YWxpZGF0aW9uIHNjZW5hcmlvXG4gICAgICAvLyBpcyBub3QgbmVjZXNzYXJ5IGFuZCB0aGUgcmVzdWx0IG1pZ2h0IGJlIG1pc2xlYWRpbmdcbiAgICAgIHJ1bGUucGF0dGVybi5sYXN0SW5kZXggPSAwO1xuXG4gICAgICBpZiAoIXJ1bGUucGF0dGVybi50ZXN0KHZhbHVlKSkge1xuICAgICAgICBlcnJvcnMucHVzaChmb3JtYXQob3B0aW9ucy5tZXNzYWdlcy5wYXR0ZXJuLm1pc21hdGNoLCBydWxlLmZ1bGxGaWVsZCwgdmFsdWUsIHJ1bGUucGF0dGVybikpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodHlwZW9mIHJ1bGUucGF0dGVybiA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHZhciBfcGF0dGVybiA9IG5ldyBSZWdFeHAocnVsZS5wYXR0ZXJuKTtcblxuICAgICAgaWYgKCFfcGF0dGVybi50ZXN0KHZhbHVlKSkge1xuICAgICAgICBlcnJvcnMucHVzaChmb3JtYXQob3B0aW9ucy5tZXNzYWdlcy5wYXR0ZXJuLm1pc21hdGNoLCBydWxlLmZ1bGxGaWVsZCwgdmFsdWUsIHJ1bGUucGF0dGVybikpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG52YXIgcnVsZXMgPSB7XG4gIHJlcXVpcmVkOiByZXF1aXJlZCxcbiAgd2hpdGVzcGFjZTogd2hpdGVzcGFjZSxcbiAgdHlwZTogdHlwZSxcbiAgcmFuZ2U6IHJhbmdlLFxuICBcImVudW1cIjogZW51bWVyYWJsZSxcbiAgcGF0dGVybjogcGF0dGVybiQxXG59O1xuXG4vKipcbiAqICBQZXJmb3JtcyB2YWxpZGF0aW9uIGZvciBzdHJpbmcgdHlwZXMuXG4gKlxuICogIEBwYXJhbSBydWxlIFRoZSB2YWxpZGF0aW9uIHJ1bGUuXG4gKiAgQHBhcmFtIHZhbHVlIFRoZSB2YWx1ZSBvZiB0aGUgZmllbGQgb24gdGhlIHNvdXJjZSBvYmplY3QuXG4gKiAgQHBhcmFtIGNhbGxiYWNrIFRoZSBjYWxsYmFjayBmdW5jdGlvbi5cbiAqICBAcGFyYW0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0IGJlaW5nIHZhbGlkYXRlZC5cbiAqICBAcGFyYW0gb3B0aW9ucyBUaGUgdmFsaWRhdGlvbiBvcHRpb25zLlxuICogIEBwYXJhbSBvcHRpb25zLm1lc3NhZ2VzIFRoZSB2YWxpZGF0aW9uIG1lc3NhZ2VzLlxuICovXG5cbmZ1bmN0aW9uIHN0cmluZyhydWxlLCB2YWx1ZSwgY2FsbGJhY2ssIHNvdXJjZSwgb3B0aW9ucykge1xuICB2YXIgZXJyb3JzID0gW107XG4gIHZhciB2YWxpZGF0ZSA9IHJ1bGUucmVxdWlyZWQgfHwgIXJ1bGUucmVxdWlyZWQgJiYgc291cmNlLmhhc093blByb3BlcnR5KHJ1bGUuZmllbGQpO1xuXG4gIGlmICh2YWxpZGF0ZSkge1xuICAgIGlmIChpc0VtcHR5VmFsdWUodmFsdWUsICdzdHJpbmcnKSAmJiAhcnVsZS5yZXF1aXJlZCkge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gICAgfVxuXG4gICAgcnVsZXMucmVxdWlyZWQocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zLCAnc3RyaW5nJyk7XG5cbiAgICBpZiAoIWlzRW1wdHlWYWx1ZSh2YWx1ZSwgJ3N0cmluZycpKSB7XG4gICAgICBydWxlcy50eXBlKHJ1bGUsIHZhbHVlLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucyk7XG4gICAgICBydWxlcy5yYW5nZShydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMpO1xuICAgICAgcnVsZXMucGF0dGVybihydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMpO1xuXG4gICAgICBpZiAocnVsZS53aGl0ZXNwYWNlID09PSB0cnVlKSB7XG4gICAgICAgIHJ1bGVzLndoaXRlc3BhY2UocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBjYWxsYmFjayhlcnJvcnMpO1xufVxuXG4vKipcbiAqICBWYWxpZGF0ZXMgYSBmdW5jdGlvbi5cbiAqXG4gKiAgQHBhcmFtIHJ1bGUgVGhlIHZhbGlkYXRpb24gcnVsZS5cbiAqICBAcGFyYW0gdmFsdWUgVGhlIHZhbHVlIG9mIHRoZSBmaWVsZCBvbiB0aGUgc291cmNlIG9iamVjdC5cbiAqICBAcGFyYW0gY2FsbGJhY2sgVGhlIGNhbGxiYWNrIGZ1bmN0aW9uLlxuICogIEBwYXJhbSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QgYmVpbmcgdmFsaWRhdGVkLlxuICogIEBwYXJhbSBvcHRpb25zIFRoZSB2YWxpZGF0aW9uIG9wdGlvbnMuXG4gKiAgQHBhcmFtIG9wdGlvbnMubWVzc2FnZXMgVGhlIHZhbGlkYXRpb24gbWVzc2FnZXMuXG4gKi9cblxuZnVuY3Rpb24gbWV0aG9kKHJ1bGUsIHZhbHVlLCBjYWxsYmFjaywgc291cmNlLCBvcHRpb25zKSB7XG4gIHZhciBlcnJvcnMgPSBbXTtcbiAgdmFyIHZhbGlkYXRlID0gcnVsZS5yZXF1aXJlZCB8fCAhcnVsZS5yZXF1aXJlZCAmJiBzb3VyY2UuaGFzT3duUHJvcGVydHkocnVsZS5maWVsZCk7XG5cbiAgaWYgKHZhbGlkYXRlKSB7XG4gICAgaWYgKGlzRW1wdHlWYWx1ZSh2YWx1ZSkgJiYgIXJ1bGUucmVxdWlyZWQpIHtcbiAgICAgIHJldHVybiBjYWxsYmFjaygpO1xuICAgIH1cblxuICAgIHJ1bGVzLnJlcXVpcmVkKHJ1bGUsIHZhbHVlLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucyk7XG5cbiAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcnVsZXMudHlwZShydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMpO1xuICAgIH1cbiAgfVxuXG4gIGNhbGxiYWNrKGVycm9ycyk7XG59XG5cbi8qKlxuICogIFZhbGlkYXRlcyBhIG51bWJlci5cbiAqXG4gKiAgQHBhcmFtIHJ1bGUgVGhlIHZhbGlkYXRpb24gcnVsZS5cbiAqICBAcGFyYW0gdmFsdWUgVGhlIHZhbHVlIG9mIHRoZSBmaWVsZCBvbiB0aGUgc291cmNlIG9iamVjdC5cbiAqICBAcGFyYW0gY2FsbGJhY2sgVGhlIGNhbGxiYWNrIGZ1bmN0aW9uLlxuICogIEBwYXJhbSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QgYmVpbmcgdmFsaWRhdGVkLlxuICogIEBwYXJhbSBvcHRpb25zIFRoZSB2YWxpZGF0aW9uIG9wdGlvbnMuXG4gKiAgQHBhcmFtIG9wdGlvbnMubWVzc2FnZXMgVGhlIHZhbGlkYXRpb24gbWVzc2FnZXMuXG4gKi9cblxuZnVuY3Rpb24gbnVtYmVyKHJ1bGUsIHZhbHVlLCBjYWxsYmFjaywgc291cmNlLCBvcHRpb25zKSB7XG4gIHZhciBlcnJvcnMgPSBbXTtcbiAgdmFyIHZhbGlkYXRlID0gcnVsZS5yZXF1aXJlZCB8fCAhcnVsZS5yZXF1aXJlZCAmJiBzb3VyY2UuaGFzT3duUHJvcGVydHkocnVsZS5maWVsZCk7XG5cbiAgaWYgKHZhbGlkYXRlKSB7XG4gICAgaWYgKHZhbHVlID09PSAnJykge1xuICAgICAgdmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgaWYgKGlzRW1wdHlWYWx1ZSh2YWx1ZSkgJiYgIXJ1bGUucmVxdWlyZWQpIHtcbiAgICAgIHJldHVybiBjYWxsYmFjaygpO1xuICAgIH1cblxuICAgIHJ1bGVzLnJlcXVpcmVkKHJ1bGUsIHZhbHVlLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucyk7XG5cbiAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcnVsZXMudHlwZShydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMpO1xuICAgICAgcnVsZXMucmFuZ2UocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zKTtcbiAgICB9XG4gIH1cblxuICBjYWxsYmFjayhlcnJvcnMpO1xufVxuXG4vKipcbiAqICBWYWxpZGF0ZXMgYSBib29sZWFuLlxuICpcbiAqICBAcGFyYW0gcnVsZSBUaGUgdmFsaWRhdGlvbiBydWxlLlxuICogIEBwYXJhbSB2YWx1ZSBUaGUgdmFsdWUgb2YgdGhlIGZpZWxkIG9uIHRoZSBzb3VyY2Ugb2JqZWN0LlxuICogIEBwYXJhbSBjYWxsYmFjayBUaGUgY2FsbGJhY2sgZnVuY3Rpb24uXG4gKiAgQHBhcmFtIHNvdXJjZSBUaGUgc291cmNlIG9iamVjdCBiZWluZyB2YWxpZGF0ZWQuXG4gKiAgQHBhcmFtIG9wdGlvbnMgVGhlIHZhbGlkYXRpb24gb3B0aW9ucy5cbiAqICBAcGFyYW0gb3B0aW9ucy5tZXNzYWdlcyBUaGUgdmFsaWRhdGlvbiBtZXNzYWdlcy5cbiAqL1xuXG5mdW5jdGlvbiBfYm9vbGVhbihydWxlLCB2YWx1ZSwgY2FsbGJhY2ssIHNvdXJjZSwgb3B0aW9ucykge1xuICB2YXIgZXJyb3JzID0gW107XG4gIHZhciB2YWxpZGF0ZSA9IHJ1bGUucmVxdWlyZWQgfHwgIXJ1bGUucmVxdWlyZWQgJiYgc291cmNlLmhhc093blByb3BlcnR5KHJ1bGUuZmllbGQpO1xuXG4gIGlmICh2YWxpZGF0ZSkge1xuICAgIGlmIChpc0VtcHR5VmFsdWUodmFsdWUpICYmICFydWxlLnJlcXVpcmVkKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgICB9XG5cbiAgICBydWxlcy5yZXF1aXJlZChydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMpO1xuXG4gICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJ1bGVzLnR5cGUocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zKTtcbiAgICB9XG4gIH1cblxuICBjYWxsYmFjayhlcnJvcnMpO1xufVxuXG4vKipcbiAqICBWYWxpZGF0ZXMgdGhlIHJlZ3VsYXIgZXhwcmVzc2lvbiB0eXBlLlxuICpcbiAqICBAcGFyYW0gcnVsZSBUaGUgdmFsaWRhdGlvbiBydWxlLlxuICogIEBwYXJhbSB2YWx1ZSBUaGUgdmFsdWUgb2YgdGhlIGZpZWxkIG9uIHRoZSBzb3VyY2Ugb2JqZWN0LlxuICogIEBwYXJhbSBjYWxsYmFjayBUaGUgY2FsbGJhY2sgZnVuY3Rpb24uXG4gKiAgQHBhcmFtIHNvdXJjZSBUaGUgc291cmNlIG9iamVjdCBiZWluZyB2YWxpZGF0ZWQuXG4gKiAgQHBhcmFtIG9wdGlvbnMgVGhlIHZhbGlkYXRpb24gb3B0aW9ucy5cbiAqICBAcGFyYW0gb3B0aW9ucy5tZXNzYWdlcyBUaGUgdmFsaWRhdGlvbiBtZXNzYWdlcy5cbiAqL1xuXG5mdW5jdGlvbiByZWdleHAocnVsZSwgdmFsdWUsIGNhbGxiYWNrLCBzb3VyY2UsIG9wdGlvbnMpIHtcbiAgdmFyIGVycm9ycyA9IFtdO1xuICB2YXIgdmFsaWRhdGUgPSBydWxlLnJlcXVpcmVkIHx8ICFydWxlLnJlcXVpcmVkICYmIHNvdXJjZS5oYXNPd25Qcm9wZXJ0eShydWxlLmZpZWxkKTtcblxuICBpZiAodmFsaWRhdGUpIHtcbiAgICBpZiAoaXNFbXB0eVZhbHVlKHZhbHVlKSAmJiAhcnVsZS5yZXF1aXJlZCkge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gICAgfVxuXG4gICAgcnVsZXMucmVxdWlyZWQocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zKTtcblxuICAgIGlmICghaXNFbXB0eVZhbHVlKHZhbHVlKSkge1xuICAgICAgcnVsZXMudHlwZShydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMpO1xuICAgIH1cbiAgfVxuXG4gIGNhbGxiYWNrKGVycm9ycyk7XG59XG5cbi8qKlxuICogIFZhbGlkYXRlcyBhIG51bWJlciBpcyBhbiBpbnRlZ2VyLlxuICpcbiAqICBAcGFyYW0gcnVsZSBUaGUgdmFsaWRhdGlvbiBydWxlLlxuICogIEBwYXJhbSB2YWx1ZSBUaGUgdmFsdWUgb2YgdGhlIGZpZWxkIG9uIHRoZSBzb3VyY2Ugb2JqZWN0LlxuICogIEBwYXJhbSBjYWxsYmFjayBUaGUgY2FsbGJhY2sgZnVuY3Rpb24uXG4gKiAgQHBhcmFtIHNvdXJjZSBUaGUgc291cmNlIG9iamVjdCBiZWluZyB2YWxpZGF0ZWQuXG4gKiAgQHBhcmFtIG9wdGlvbnMgVGhlIHZhbGlkYXRpb24gb3B0aW9ucy5cbiAqICBAcGFyYW0gb3B0aW9ucy5tZXNzYWdlcyBUaGUgdmFsaWRhdGlvbiBtZXNzYWdlcy5cbiAqL1xuXG5mdW5jdGlvbiBpbnRlZ2VyKHJ1bGUsIHZhbHVlLCBjYWxsYmFjaywgc291cmNlLCBvcHRpb25zKSB7XG4gIHZhciBlcnJvcnMgPSBbXTtcbiAgdmFyIHZhbGlkYXRlID0gcnVsZS5yZXF1aXJlZCB8fCAhcnVsZS5yZXF1aXJlZCAmJiBzb3VyY2UuaGFzT3duUHJvcGVydHkocnVsZS5maWVsZCk7XG5cbiAgaWYgKHZhbGlkYXRlKSB7XG4gICAgaWYgKGlzRW1wdHlWYWx1ZSh2YWx1ZSkgJiYgIXJ1bGUucmVxdWlyZWQpIHtcbiAgICAgIHJldHVybiBjYWxsYmFjaygpO1xuICAgIH1cblxuICAgIHJ1bGVzLnJlcXVpcmVkKHJ1bGUsIHZhbHVlLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucyk7XG5cbiAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcnVsZXMudHlwZShydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMpO1xuICAgICAgcnVsZXMucmFuZ2UocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zKTtcbiAgICB9XG4gIH1cblxuICBjYWxsYmFjayhlcnJvcnMpO1xufVxuXG4vKipcbiAqICBWYWxpZGF0ZXMgYSBudW1iZXIgaXMgYSBmbG9hdGluZyBwb2ludCBudW1iZXIuXG4gKlxuICogIEBwYXJhbSBydWxlIFRoZSB2YWxpZGF0aW9uIHJ1bGUuXG4gKiAgQHBhcmFtIHZhbHVlIFRoZSB2YWx1ZSBvZiB0aGUgZmllbGQgb24gdGhlIHNvdXJjZSBvYmplY3QuXG4gKiAgQHBhcmFtIGNhbGxiYWNrIFRoZSBjYWxsYmFjayBmdW5jdGlvbi5cbiAqICBAcGFyYW0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0IGJlaW5nIHZhbGlkYXRlZC5cbiAqICBAcGFyYW0gb3B0aW9ucyBUaGUgdmFsaWRhdGlvbiBvcHRpb25zLlxuICogIEBwYXJhbSBvcHRpb25zLm1lc3NhZ2VzIFRoZSB2YWxpZGF0aW9uIG1lc3NhZ2VzLlxuICovXG5cbmZ1bmN0aW9uIGZsb2F0Rm4ocnVsZSwgdmFsdWUsIGNhbGxiYWNrLCBzb3VyY2UsIG9wdGlvbnMpIHtcbiAgdmFyIGVycm9ycyA9IFtdO1xuICB2YXIgdmFsaWRhdGUgPSBydWxlLnJlcXVpcmVkIHx8ICFydWxlLnJlcXVpcmVkICYmIHNvdXJjZS5oYXNPd25Qcm9wZXJ0eShydWxlLmZpZWxkKTtcblxuICBpZiAodmFsaWRhdGUpIHtcbiAgICBpZiAoaXNFbXB0eVZhbHVlKHZhbHVlKSAmJiAhcnVsZS5yZXF1aXJlZCkge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gICAgfVxuXG4gICAgcnVsZXMucmVxdWlyZWQocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zKTtcblxuICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBydWxlcy50eXBlKHJ1bGUsIHZhbHVlLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucyk7XG4gICAgICBydWxlcy5yYW5nZShydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMpO1xuICAgIH1cbiAgfVxuXG4gIGNhbGxiYWNrKGVycm9ycyk7XG59XG5cbi8qKlxuICogIFZhbGlkYXRlcyBhbiBhcnJheS5cbiAqXG4gKiAgQHBhcmFtIHJ1bGUgVGhlIHZhbGlkYXRpb24gcnVsZS5cbiAqICBAcGFyYW0gdmFsdWUgVGhlIHZhbHVlIG9mIHRoZSBmaWVsZCBvbiB0aGUgc291cmNlIG9iamVjdC5cbiAqICBAcGFyYW0gY2FsbGJhY2sgVGhlIGNhbGxiYWNrIGZ1bmN0aW9uLlxuICogIEBwYXJhbSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QgYmVpbmcgdmFsaWRhdGVkLlxuICogIEBwYXJhbSBvcHRpb25zIFRoZSB2YWxpZGF0aW9uIG9wdGlvbnMuXG4gKiAgQHBhcmFtIG9wdGlvbnMubWVzc2FnZXMgVGhlIHZhbGlkYXRpb24gbWVzc2FnZXMuXG4gKi9cblxuZnVuY3Rpb24gYXJyYXkocnVsZSwgdmFsdWUsIGNhbGxiYWNrLCBzb3VyY2UsIG9wdGlvbnMpIHtcbiAgdmFyIGVycm9ycyA9IFtdO1xuICB2YXIgdmFsaWRhdGUgPSBydWxlLnJlcXVpcmVkIHx8ICFydWxlLnJlcXVpcmVkICYmIHNvdXJjZS5oYXNPd25Qcm9wZXJ0eShydWxlLmZpZWxkKTtcblxuICBpZiAodmFsaWRhdGUpIHtcbiAgICBpZiAoKHZhbHVlID09PSB1bmRlZmluZWQgfHwgdmFsdWUgPT09IG51bGwpICYmICFydWxlLnJlcXVpcmVkKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgICB9XG5cbiAgICBydWxlcy5yZXF1aXJlZChydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMsICdhcnJheScpO1xuXG4gICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUgIT09IG51bGwpIHtcbiAgICAgIHJ1bGVzLnR5cGUocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zKTtcbiAgICAgIHJ1bGVzLnJhbmdlKHJ1bGUsIHZhbHVlLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucyk7XG4gICAgfVxuICB9XG5cbiAgY2FsbGJhY2soZXJyb3JzKTtcbn1cblxuLyoqXG4gKiAgVmFsaWRhdGVzIGFuIG9iamVjdC5cbiAqXG4gKiAgQHBhcmFtIHJ1bGUgVGhlIHZhbGlkYXRpb24gcnVsZS5cbiAqICBAcGFyYW0gdmFsdWUgVGhlIHZhbHVlIG9mIHRoZSBmaWVsZCBvbiB0aGUgc291cmNlIG9iamVjdC5cbiAqICBAcGFyYW0gY2FsbGJhY2sgVGhlIGNhbGxiYWNrIGZ1bmN0aW9uLlxuICogIEBwYXJhbSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QgYmVpbmcgdmFsaWRhdGVkLlxuICogIEBwYXJhbSBvcHRpb25zIFRoZSB2YWxpZGF0aW9uIG9wdGlvbnMuXG4gKiAgQHBhcmFtIG9wdGlvbnMubWVzc2FnZXMgVGhlIHZhbGlkYXRpb24gbWVzc2FnZXMuXG4gKi9cblxuZnVuY3Rpb24gb2JqZWN0KHJ1bGUsIHZhbHVlLCBjYWxsYmFjaywgc291cmNlLCBvcHRpb25zKSB7XG4gIHZhciBlcnJvcnMgPSBbXTtcbiAgdmFyIHZhbGlkYXRlID0gcnVsZS5yZXF1aXJlZCB8fCAhcnVsZS5yZXF1aXJlZCAmJiBzb3VyY2UuaGFzT3duUHJvcGVydHkocnVsZS5maWVsZCk7XG5cbiAgaWYgKHZhbGlkYXRlKSB7XG4gICAgaWYgKGlzRW1wdHlWYWx1ZSh2YWx1ZSkgJiYgIXJ1bGUucmVxdWlyZWQpIHtcbiAgICAgIHJldHVybiBjYWxsYmFjaygpO1xuICAgIH1cblxuICAgIHJ1bGVzLnJlcXVpcmVkKHJ1bGUsIHZhbHVlLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucyk7XG5cbiAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcnVsZXMudHlwZShydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMpO1xuICAgIH1cbiAgfVxuXG4gIGNhbGxiYWNrKGVycm9ycyk7XG59XG5cbnZhciBFTlVNJDEgPSAnZW51bSc7XG4vKipcbiAqICBWYWxpZGF0ZXMgYW4gZW51bWVyYWJsZSBsaXN0LlxuICpcbiAqICBAcGFyYW0gcnVsZSBUaGUgdmFsaWRhdGlvbiBydWxlLlxuICogIEBwYXJhbSB2YWx1ZSBUaGUgdmFsdWUgb2YgdGhlIGZpZWxkIG9uIHRoZSBzb3VyY2Ugb2JqZWN0LlxuICogIEBwYXJhbSBjYWxsYmFjayBUaGUgY2FsbGJhY2sgZnVuY3Rpb24uXG4gKiAgQHBhcmFtIHNvdXJjZSBUaGUgc291cmNlIG9iamVjdCBiZWluZyB2YWxpZGF0ZWQuXG4gKiAgQHBhcmFtIG9wdGlvbnMgVGhlIHZhbGlkYXRpb24gb3B0aW9ucy5cbiAqICBAcGFyYW0gb3B0aW9ucy5tZXNzYWdlcyBUaGUgdmFsaWRhdGlvbiBtZXNzYWdlcy5cbiAqL1xuXG5mdW5jdGlvbiBlbnVtZXJhYmxlJDEocnVsZSwgdmFsdWUsIGNhbGxiYWNrLCBzb3VyY2UsIG9wdGlvbnMpIHtcbiAgdmFyIGVycm9ycyA9IFtdO1xuICB2YXIgdmFsaWRhdGUgPSBydWxlLnJlcXVpcmVkIHx8ICFydWxlLnJlcXVpcmVkICYmIHNvdXJjZS5oYXNPd25Qcm9wZXJ0eShydWxlLmZpZWxkKTtcblxuICBpZiAodmFsaWRhdGUpIHtcbiAgICBpZiAoaXNFbXB0eVZhbHVlKHZhbHVlKSAmJiAhcnVsZS5yZXF1aXJlZCkge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gICAgfVxuXG4gICAgcnVsZXMucmVxdWlyZWQocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zKTtcblxuICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBydWxlc1tFTlVNJDFdKHJ1bGUsIHZhbHVlLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucyk7XG4gICAgfVxuICB9XG5cbiAgY2FsbGJhY2soZXJyb3JzKTtcbn1cblxuLyoqXG4gKiAgVmFsaWRhdGVzIGEgcmVndWxhciBleHByZXNzaW9uIHBhdHRlcm4uXG4gKlxuICogIFBlcmZvcm1zIHZhbGlkYXRpb24gd2hlbiBhIHJ1bGUgb25seSBjb250YWluc1xuICogIGEgcGF0dGVybiBwcm9wZXJ0eSBidXQgaXMgbm90IGRlY2xhcmVkIGFzIGEgc3RyaW5nIHR5cGUuXG4gKlxuICogIEBwYXJhbSBydWxlIFRoZSB2YWxpZGF0aW9uIHJ1bGUuXG4gKiAgQHBhcmFtIHZhbHVlIFRoZSB2YWx1ZSBvZiB0aGUgZmllbGQgb24gdGhlIHNvdXJjZSBvYmplY3QuXG4gKiAgQHBhcmFtIGNhbGxiYWNrIFRoZSBjYWxsYmFjayBmdW5jdGlvbi5cbiAqICBAcGFyYW0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0IGJlaW5nIHZhbGlkYXRlZC5cbiAqICBAcGFyYW0gb3B0aW9ucyBUaGUgdmFsaWRhdGlvbiBvcHRpb25zLlxuICogIEBwYXJhbSBvcHRpb25zLm1lc3NhZ2VzIFRoZSB2YWxpZGF0aW9uIG1lc3NhZ2VzLlxuICovXG5cbmZ1bmN0aW9uIHBhdHRlcm4kMihydWxlLCB2YWx1ZSwgY2FsbGJhY2ssIHNvdXJjZSwgb3B0aW9ucykge1xuICB2YXIgZXJyb3JzID0gW107XG4gIHZhciB2YWxpZGF0ZSA9IHJ1bGUucmVxdWlyZWQgfHwgIXJ1bGUucmVxdWlyZWQgJiYgc291cmNlLmhhc093blByb3BlcnR5KHJ1bGUuZmllbGQpO1xuXG4gIGlmICh2YWxpZGF0ZSkge1xuICAgIGlmIChpc0VtcHR5VmFsdWUodmFsdWUsICdzdHJpbmcnKSAmJiAhcnVsZS5yZXF1aXJlZCkge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gICAgfVxuXG4gICAgcnVsZXMucmVxdWlyZWQocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zKTtcblxuICAgIGlmICghaXNFbXB0eVZhbHVlKHZhbHVlLCAnc3RyaW5nJykpIHtcbiAgICAgIHJ1bGVzLnBhdHRlcm4ocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zKTtcbiAgICB9XG4gIH1cblxuICBjYWxsYmFjayhlcnJvcnMpO1xufVxuXG5mdW5jdGlvbiBkYXRlKHJ1bGUsIHZhbHVlLCBjYWxsYmFjaywgc291cmNlLCBvcHRpb25zKSB7XG4gIC8vIGNvbnNvbGUubG9nKCdpbnRlZ2VyIHJ1bGUgY2FsbGVkICVqJywgcnVsZSk7XG4gIHZhciBlcnJvcnMgPSBbXTtcbiAgdmFyIHZhbGlkYXRlID0gcnVsZS5yZXF1aXJlZCB8fCAhcnVsZS5yZXF1aXJlZCAmJiBzb3VyY2UuaGFzT3duUHJvcGVydHkocnVsZS5maWVsZCk7IC8vIGNvbnNvbGUubG9nKCd2YWxpZGF0ZSBvbiAlcyB2YWx1ZScsIHZhbHVlKTtcblxuICBpZiAodmFsaWRhdGUpIHtcbiAgICBpZiAoaXNFbXB0eVZhbHVlKHZhbHVlLCAnZGF0ZScpICYmICFydWxlLnJlcXVpcmVkKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgICB9XG5cbiAgICBydWxlcy5yZXF1aXJlZChydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMpO1xuXG4gICAgaWYgKCFpc0VtcHR5VmFsdWUodmFsdWUsICdkYXRlJykpIHtcbiAgICAgIHZhciBkYXRlT2JqZWN0O1xuXG4gICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgICAgIGRhdGVPYmplY3QgPSB2YWx1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRhdGVPYmplY3QgPSBuZXcgRGF0ZSh2YWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIHJ1bGVzLnR5cGUocnVsZSwgZGF0ZU9iamVjdCwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMpO1xuXG4gICAgICBpZiAoZGF0ZU9iamVjdCkge1xuICAgICAgICBydWxlcy5yYW5nZShydWxlLCBkYXRlT2JqZWN0LmdldFRpbWUoKSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGNhbGxiYWNrKGVycm9ycyk7XG59XG5cbmZ1bmN0aW9uIHJlcXVpcmVkJDEocnVsZSwgdmFsdWUsIGNhbGxiYWNrLCBzb3VyY2UsIG9wdGlvbnMpIHtcbiAgdmFyIGVycm9ycyA9IFtdO1xuICB2YXIgdHlwZSA9IEFycmF5LmlzQXJyYXkodmFsdWUpID8gJ2FycmF5JyA6IHR5cGVvZiB2YWx1ZTtcbiAgcnVsZXMucmVxdWlyZWQocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zLCB0eXBlKTtcbiAgY2FsbGJhY2soZXJyb3JzKTtcbn1cblxuZnVuY3Rpb24gdHlwZSQxKHJ1bGUsIHZhbHVlLCBjYWxsYmFjaywgc291cmNlLCBvcHRpb25zKSB7XG4gIHZhciBydWxlVHlwZSA9IHJ1bGUudHlwZTtcbiAgdmFyIGVycm9ycyA9IFtdO1xuICB2YXIgdmFsaWRhdGUgPSBydWxlLnJlcXVpcmVkIHx8ICFydWxlLnJlcXVpcmVkICYmIHNvdXJjZS5oYXNPd25Qcm9wZXJ0eShydWxlLmZpZWxkKTtcblxuICBpZiAodmFsaWRhdGUpIHtcbiAgICBpZiAoaXNFbXB0eVZhbHVlKHZhbHVlLCBydWxlVHlwZSkgJiYgIXJ1bGUucmVxdWlyZWQpIHtcbiAgICAgIHJldHVybiBjYWxsYmFjaygpO1xuICAgIH1cblxuICAgIHJ1bGVzLnJlcXVpcmVkKHJ1bGUsIHZhbHVlLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucywgcnVsZVR5cGUpO1xuXG4gICAgaWYgKCFpc0VtcHR5VmFsdWUodmFsdWUsIHJ1bGVUeXBlKSkge1xuICAgICAgcnVsZXMudHlwZShydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMpO1xuICAgIH1cbiAgfVxuXG4gIGNhbGxiYWNrKGVycm9ycyk7XG59XG5cbi8qKlxuICogIFBlcmZvcm1zIHZhbGlkYXRpb24gZm9yIGFueSB0eXBlLlxuICpcbiAqICBAcGFyYW0gcnVsZSBUaGUgdmFsaWRhdGlvbiBydWxlLlxuICogIEBwYXJhbSB2YWx1ZSBUaGUgdmFsdWUgb2YgdGhlIGZpZWxkIG9uIHRoZSBzb3VyY2Ugb2JqZWN0LlxuICogIEBwYXJhbSBjYWxsYmFjayBUaGUgY2FsbGJhY2sgZnVuY3Rpb24uXG4gKiAgQHBhcmFtIHNvdXJjZSBUaGUgc291cmNlIG9iamVjdCBiZWluZyB2YWxpZGF0ZWQuXG4gKiAgQHBhcmFtIG9wdGlvbnMgVGhlIHZhbGlkYXRpb24gb3B0aW9ucy5cbiAqICBAcGFyYW0gb3B0aW9ucy5tZXNzYWdlcyBUaGUgdmFsaWRhdGlvbiBtZXNzYWdlcy5cbiAqL1xuXG5mdW5jdGlvbiBhbnkocnVsZSwgdmFsdWUsIGNhbGxiYWNrLCBzb3VyY2UsIG9wdGlvbnMpIHtcbiAgdmFyIGVycm9ycyA9IFtdO1xuICB2YXIgdmFsaWRhdGUgPSBydWxlLnJlcXVpcmVkIHx8ICFydWxlLnJlcXVpcmVkICYmIHNvdXJjZS5oYXNPd25Qcm9wZXJ0eShydWxlLmZpZWxkKTtcblxuICBpZiAodmFsaWRhdGUpIHtcbiAgICBpZiAoaXNFbXB0eVZhbHVlKHZhbHVlKSAmJiAhcnVsZS5yZXF1aXJlZCkge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gICAgfVxuXG4gICAgcnVsZXMucmVxdWlyZWQocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zKTtcbiAgfVxuXG4gIGNhbGxiYWNrKGVycm9ycyk7XG59XG5cbnZhciB2YWxpZGF0b3JzID0ge1xuICBzdHJpbmc6IHN0cmluZyxcbiAgbWV0aG9kOiBtZXRob2QsXG4gIG51bWJlcjogbnVtYmVyLFxuICBcImJvb2xlYW5cIjogX2Jvb2xlYW4sXG4gIHJlZ2V4cDogcmVnZXhwLFxuICBpbnRlZ2VyOiBpbnRlZ2VyLFxuICBcImZsb2F0XCI6IGZsb2F0Rm4sXG4gIGFycmF5OiBhcnJheSxcbiAgb2JqZWN0OiBvYmplY3QsXG4gIFwiZW51bVwiOiBlbnVtZXJhYmxlJDEsXG4gIHBhdHRlcm46IHBhdHRlcm4kMixcbiAgZGF0ZTogZGF0ZSxcbiAgdXJsOiB0eXBlJDEsXG4gIGhleDogdHlwZSQxLFxuICBlbWFpbDogdHlwZSQxLFxuICByZXF1aXJlZDogcmVxdWlyZWQkMSxcbiAgYW55OiBhbnlcbn07XG5cbmZ1bmN0aW9uIG5ld01lc3NhZ2VzKCkge1xuICByZXR1cm4ge1xuICAgIFwiZGVmYXVsdFwiOiAnVmFsaWRhdGlvbiBlcnJvciBvbiBmaWVsZCAlcycsXG4gICAgcmVxdWlyZWQ6ICclcyBpcyByZXF1aXJlZCcsXG4gICAgXCJlbnVtXCI6ICclcyBtdXN0IGJlIG9uZSBvZiAlcycsXG4gICAgd2hpdGVzcGFjZTogJyVzIGNhbm5vdCBiZSBlbXB0eScsXG4gICAgZGF0ZToge1xuICAgICAgZm9ybWF0OiAnJXMgZGF0ZSAlcyBpcyBpbnZhbGlkIGZvciBmb3JtYXQgJXMnLFxuICAgICAgcGFyc2U6ICclcyBkYXRlIGNvdWxkIG5vdCBiZSBwYXJzZWQsICVzIGlzIGludmFsaWQgJyxcbiAgICAgIGludmFsaWQ6ICclcyBkYXRlICVzIGlzIGludmFsaWQnXG4gICAgfSxcbiAgICB0eXBlczoge1xuICAgICAgc3RyaW5nOiAnJXMgaXMgbm90IGEgJXMnLFxuICAgICAgbWV0aG9kOiAnJXMgaXMgbm90IGEgJXMgKGZ1bmN0aW9uKScsXG4gICAgICBhcnJheTogJyVzIGlzIG5vdCBhbiAlcycsXG4gICAgICBvYmplY3Q6ICclcyBpcyBub3QgYW4gJXMnLFxuICAgICAgbnVtYmVyOiAnJXMgaXMgbm90IGEgJXMnLFxuICAgICAgZGF0ZTogJyVzIGlzIG5vdCBhICVzJyxcbiAgICAgIFwiYm9vbGVhblwiOiAnJXMgaXMgbm90IGEgJXMnLFxuICAgICAgaW50ZWdlcjogJyVzIGlzIG5vdCBhbiAlcycsXG4gICAgICBcImZsb2F0XCI6ICclcyBpcyBub3QgYSAlcycsXG4gICAgICByZWdleHA6ICclcyBpcyBub3QgYSB2YWxpZCAlcycsXG4gICAgICBlbWFpbDogJyVzIGlzIG5vdCBhIHZhbGlkICVzJyxcbiAgICAgIHVybDogJyVzIGlzIG5vdCBhIHZhbGlkICVzJyxcbiAgICAgIGhleDogJyVzIGlzIG5vdCBhIHZhbGlkICVzJ1xuICAgIH0sXG4gICAgc3RyaW5nOiB7XG4gICAgICBsZW46ICclcyBtdXN0IGJlIGV4YWN0bHkgJXMgY2hhcmFjdGVycycsXG4gICAgICBtaW46ICclcyBtdXN0IGJlIGF0IGxlYXN0ICVzIGNoYXJhY3RlcnMnLFxuICAgICAgbWF4OiAnJXMgY2Fubm90IGJlIGxvbmdlciB0aGFuICVzIGNoYXJhY3RlcnMnLFxuICAgICAgcmFuZ2U6ICclcyBtdXN0IGJlIGJldHdlZW4gJXMgYW5kICVzIGNoYXJhY3RlcnMnXG4gICAgfSxcbiAgICBudW1iZXI6IHtcbiAgICAgIGxlbjogJyVzIG11c3QgZXF1YWwgJXMnLFxuICAgICAgbWluOiAnJXMgY2Fubm90IGJlIGxlc3MgdGhhbiAlcycsXG4gICAgICBtYXg6ICclcyBjYW5ub3QgYmUgZ3JlYXRlciB0aGFuICVzJyxcbiAgICAgIHJhbmdlOiAnJXMgbXVzdCBiZSBiZXR3ZWVuICVzIGFuZCAlcydcbiAgICB9LFxuICAgIGFycmF5OiB7XG4gICAgICBsZW46ICclcyBtdXN0IGJlIGV4YWN0bHkgJXMgaW4gbGVuZ3RoJyxcbiAgICAgIG1pbjogJyVzIGNhbm5vdCBiZSBsZXNzIHRoYW4gJXMgaW4gbGVuZ3RoJyxcbiAgICAgIG1heDogJyVzIGNhbm5vdCBiZSBncmVhdGVyIHRoYW4gJXMgaW4gbGVuZ3RoJyxcbiAgICAgIHJhbmdlOiAnJXMgbXVzdCBiZSBiZXR3ZWVuICVzIGFuZCAlcyBpbiBsZW5ndGgnXG4gICAgfSxcbiAgICBwYXR0ZXJuOiB7XG4gICAgICBtaXNtYXRjaDogJyVzIHZhbHVlICVzIGRvZXMgbm90IG1hdGNoIHBhdHRlcm4gJXMnXG4gICAgfSxcbiAgICBjbG9uZTogZnVuY3Rpb24gY2xvbmUoKSB7XG4gICAgICB2YXIgY2xvbmVkID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh0aGlzKSk7XG4gICAgICBjbG9uZWQuY2xvbmUgPSB0aGlzLmNsb25lO1xuICAgICAgcmV0dXJuIGNsb25lZDtcbiAgICB9XG4gIH07XG59XG52YXIgbWVzc2FnZXMgPSBuZXdNZXNzYWdlcygpO1xuXG4vKipcbiAqICBFbmNhcHN1bGF0ZXMgYSB2YWxpZGF0aW9uIHNjaGVtYS5cbiAqXG4gKiAgQHBhcmFtIGRlc2NyaXB0b3IgQW4gb2JqZWN0IGRlY2xhcmluZyB2YWxpZGF0aW9uIHJ1bGVzXG4gKiAgZm9yIHRoaXMgc2NoZW1hLlxuICovXG5cbmZ1bmN0aW9uIFNjaGVtYShkZXNjcmlwdG9yKSB7XG4gIHRoaXMucnVsZXMgPSBudWxsO1xuICB0aGlzLl9tZXNzYWdlcyA9IG1lc3NhZ2VzO1xuICB0aGlzLmRlZmluZShkZXNjcmlwdG9yKTtcbn1cblxuU2NoZW1hLnByb3RvdHlwZSA9IHtcbiAgbWVzc2FnZXM6IGZ1bmN0aW9uIG1lc3NhZ2VzKF9tZXNzYWdlcykge1xuICAgIGlmIChfbWVzc2FnZXMpIHtcbiAgICAgIHRoaXMuX21lc3NhZ2VzID0gZGVlcE1lcmdlKG5ld01lc3NhZ2VzKCksIF9tZXNzYWdlcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX21lc3NhZ2VzO1xuICB9LFxuICBkZWZpbmU6IGZ1bmN0aW9uIGRlZmluZShydWxlcykge1xuICAgIGlmICghcnVsZXMpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGNvbmZpZ3VyZSBhIHNjaGVtYSB3aXRoIG5vIHJ1bGVzJyk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBydWxlcyAhPT0gJ29iamVjdCcgfHwgQXJyYXkuaXNBcnJheShydWxlcykpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignUnVsZXMgbXVzdCBiZSBhbiBvYmplY3QnKTtcbiAgICB9XG5cbiAgICB0aGlzLnJ1bGVzID0ge307XG4gICAgdmFyIHo7XG4gICAgdmFyIGl0ZW07XG5cbiAgICBmb3IgKHogaW4gcnVsZXMpIHtcbiAgICAgIGlmIChydWxlcy5oYXNPd25Qcm9wZXJ0eSh6KSkge1xuICAgICAgICBpdGVtID0gcnVsZXNbel07XG4gICAgICAgIHRoaXMucnVsZXNbel0gPSBBcnJheS5pc0FycmF5KGl0ZW0pID8gaXRlbSA6IFtpdGVtXTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIHZhbGlkYXRlOiBmdW5jdGlvbiB2YWxpZGF0ZShzb3VyY2VfLCBvLCBvYykge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICBpZiAobyA9PT0gdm9pZCAwKSB7XG4gICAgICBvID0ge307XG4gICAgfVxuXG4gICAgaWYgKG9jID09PSB2b2lkIDApIHtcbiAgICAgIG9jID0gZnVuY3Rpb24gb2MoKSB7fTtcbiAgICB9XG5cbiAgICB2YXIgc291cmNlID0gc291cmNlXztcbiAgICB2YXIgb3B0aW9ucyA9IG87XG4gICAgdmFyIGNhbGxiYWNrID0gb2M7XG5cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGNhbGxiYWNrID0gb3B0aW9ucztcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMucnVsZXMgfHwgT2JqZWN0LmtleXModGhpcy5ydWxlcykubGVuZ3RoID09PSAwKSB7XG4gICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbXBsZXRlKHJlc3VsdHMpIHtcbiAgICAgIHZhciBpO1xuICAgICAgdmFyIGVycm9ycyA9IFtdO1xuICAgICAgdmFyIGZpZWxkcyA9IHt9O1xuXG4gICAgICBmdW5jdGlvbiBhZGQoZSkge1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShlKSkge1xuICAgICAgICAgIHZhciBfZXJyb3JzO1xuXG4gICAgICAgICAgZXJyb3JzID0gKF9lcnJvcnMgPSBlcnJvcnMpLmNvbmNhdC5hcHBseShfZXJyb3JzLCBlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBlcnJvcnMucHVzaChlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgcmVzdWx0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBhZGQocmVzdWx0c1tpXSk7XG4gICAgICB9XG5cbiAgICAgIGlmICghZXJyb3JzLmxlbmd0aCkge1xuICAgICAgICBlcnJvcnMgPSBudWxsO1xuICAgICAgICBmaWVsZHMgPSBudWxsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZmllbGRzID0gY29udmVydEZpZWxkc0Vycm9yKGVycm9ycyk7XG4gICAgICB9XG5cbiAgICAgIGNhbGxiYWNrKGVycm9ycywgZmllbGRzKTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5tZXNzYWdlcykge1xuICAgICAgdmFyIG1lc3NhZ2VzJDEgPSB0aGlzLm1lc3NhZ2VzKCk7XG5cbiAgICAgIGlmIChtZXNzYWdlcyQxID09PSBtZXNzYWdlcykge1xuICAgICAgICBtZXNzYWdlcyQxID0gbmV3TWVzc2FnZXMoKTtcbiAgICAgIH1cblxuICAgICAgZGVlcE1lcmdlKG1lc3NhZ2VzJDEsIG9wdGlvbnMubWVzc2FnZXMpO1xuICAgICAgb3B0aW9ucy5tZXNzYWdlcyA9IG1lc3NhZ2VzJDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9wdGlvbnMubWVzc2FnZXMgPSB0aGlzLm1lc3NhZ2VzKCk7XG4gICAgfVxuXG4gICAgdmFyIGFycjtcbiAgICB2YXIgdmFsdWU7XG4gICAgdmFyIHNlcmllcyA9IHt9O1xuICAgIHZhciBrZXlzID0gb3B0aW9ucy5rZXlzIHx8IE9iamVjdC5rZXlzKHRoaXMucnVsZXMpO1xuICAgIGtleXMuZm9yRWFjaChmdW5jdGlvbiAoeikge1xuICAgICAgYXJyID0gX3RoaXMucnVsZXNbel07XG4gICAgICB2YWx1ZSA9IHNvdXJjZVt6XTtcbiAgICAgIGFyci5mb3JFYWNoKGZ1bmN0aW9uIChyKSB7XG4gICAgICAgIHZhciBydWxlID0gcjtcblxuICAgICAgICBpZiAodHlwZW9mIHJ1bGUudHJhbnNmb3JtID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgaWYgKHNvdXJjZSA9PT0gc291cmNlXykge1xuICAgICAgICAgICAgc291cmNlID0gX2V4dGVuZHMoe30sIHNvdXJjZSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFsdWUgPSBzb3VyY2Vbel0gPSBydWxlLnRyYW5zZm9ybSh2YWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIHJ1bGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBydWxlID0ge1xuICAgICAgICAgICAgdmFsaWRhdG9yOiBydWxlXG4gICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBydWxlID0gX2V4dGVuZHMoe30sIHJ1bGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgcnVsZS52YWxpZGF0b3IgPSBfdGhpcy5nZXRWYWxpZGF0aW9uTWV0aG9kKHJ1bGUpO1xuICAgICAgICBydWxlLmZpZWxkID0gejtcbiAgICAgICAgcnVsZS5mdWxsRmllbGQgPSBydWxlLmZ1bGxGaWVsZCB8fCB6O1xuICAgICAgICBydWxlLnR5cGUgPSBfdGhpcy5nZXRUeXBlKHJ1bGUpO1xuXG4gICAgICAgIGlmICghcnVsZS52YWxpZGF0b3IpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBzZXJpZXNbel0gPSBzZXJpZXNbel0gfHwgW107XG4gICAgICAgIHNlcmllc1t6XS5wdXNoKHtcbiAgICAgICAgICBydWxlOiBydWxlLFxuICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICBzb3VyY2U6IHNvdXJjZSxcbiAgICAgICAgICBmaWVsZDogelxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHZhciBlcnJvckZpZWxkcyA9IHt9O1xuICAgIHJldHVybiBhc3luY01hcChzZXJpZXMsIG9wdGlvbnMsIGZ1bmN0aW9uIChkYXRhLCBkb0l0KSB7XG4gICAgICB2YXIgcnVsZSA9IGRhdGEucnVsZTtcbiAgICAgIHZhciBkZWVwID0gKHJ1bGUudHlwZSA9PT0gJ29iamVjdCcgfHwgcnVsZS50eXBlID09PSAnYXJyYXknKSAmJiAodHlwZW9mIHJ1bGUuZmllbGRzID09PSAnb2JqZWN0JyB8fCB0eXBlb2YgcnVsZS5kZWZhdWx0RmllbGQgPT09ICdvYmplY3QnKTtcbiAgICAgIGRlZXAgPSBkZWVwICYmIChydWxlLnJlcXVpcmVkIHx8ICFydWxlLnJlcXVpcmVkICYmIGRhdGEudmFsdWUpO1xuICAgICAgcnVsZS5maWVsZCA9IGRhdGEuZmllbGQ7XG5cbiAgICAgIGZ1bmN0aW9uIGFkZEZ1bGxmaWVsZChrZXksIHNjaGVtYSkge1xuICAgICAgICByZXR1cm4gX2V4dGVuZHMoX2V4dGVuZHMoe30sIHNjaGVtYSksIHt9LCB7XG4gICAgICAgICAgZnVsbEZpZWxkOiBydWxlLmZ1bGxGaWVsZCArIFwiLlwiICsga2V5XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBjYihlKSB7XG4gICAgICAgIGlmIChlID09PSB2b2lkIDApIHtcbiAgICAgICAgICBlID0gW107XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZXJyb3JzID0gZTtcblxuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoZXJyb3JzKSkge1xuICAgICAgICAgIGVycm9ycyA9IFtlcnJvcnNdO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFvcHRpb25zLnN1cHByZXNzV2FybmluZyAmJiBlcnJvcnMubGVuZ3RoKSB7XG4gICAgICAgICAgU2NoZW1hLndhcm5pbmcoJ2FzeW5jLXZhbGlkYXRvcjonLCBlcnJvcnMpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVycm9ycy5sZW5ndGggJiYgcnVsZS5tZXNzYWdlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBlcnJvcnMgPSBbXS5jb25jYXQocnVsZS5tZXNzYWdlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGVycm9ycyA9IGVycm9ycy5tYXAoY29tcGxlbWVudEVycm9yKHJ1bGUpKTtcblxuICAgICAgICBpZiAob3B0aW9ucy5maXJzdCAmJiBlcnJvcnMubGVuZ3RoKSB7XG4gICAgICAgICAgZXJyb3JGaWVsZHNbcnVsZS5maWVsZF0gPSAxO1xuICAgICAgICAgIHJldHVybiBkb0l0KGVycm9ycyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWRlZXApIHtcbiAgICAgICAgICBkb0l0KGVycm9ycyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gaWYgcnVsZSBpcyByZXF1aXJlZCBidXQgdGhlIHRhcmdldCBvYmplY3RcbiAgICAgICAgICAvLyBkb2VzIG5vdCBleGlzdCBmYWlsIGF0IHRoZSBydWxlIGxldmVsIGFuZCBkb24ndFxuICAgICAgICAgIC8vIGdvIGRlZXBlclxuICAgICAgICAgIGlmIChydWxlLnJlcXVpcmVkICYmICFkYXRhLnZhbHVlKSB7XG4gICAgICAgICAgICBpZiAocnVsZS5tZXNzYWdlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgZXJyb3JzID0gW10uY29uY2F0KHJ1bGUubWVzc2FnZSkubWFwKGNvbXBsZW1lbnRFcnJvcihydWxlKSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG9wdGlvbnMuZXJyb3IpIHtcbiAgICAgICAgICAgICAgZXJyb3JzID0gW29wdGlvbnMuZXJyb3IocnVsZSwgZm9ybWF0KG9wdGlvbnMubWVzc2FnZXMucmVxdWlyZWQsIHJ1bGUuZmllbGQpKV07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBkb0l0KGVycm9ycyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIGZpZWxkc1NjaGVtYSA9IHt9O1xuXG4gICAgICAgICAgaWYgKHJ1bGUuZGVmYXVsdEZpZWxkKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBrIGluIGRhdGEudmFsdWUpIHtcbiAgICAgICAgICAgICAgaWYgKGRhdGEudmFsdWUuaGFzT3duUHJvcGVydHkoaykpIHtcbiAgICAgICAgICAgICAgICBmaWVsZHNTY2hlbWFba10gPSBydWxlLmRlZmF1bHRGaWVsZDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGZpZWxkc1NjaGVtYSA9IF9leHRlbmRzKF9leHRlbmRzKHt9LCBmaWVsZHNTY2hlbWEpLCBkYXRhLnJ1bGUuZmllbGRzKTtcblxuICAgICAgICAgIGZvciAodmFyIGYgaW4gZmllbGRzU2NoZW1hKSB7XG4gICAgICAgICAgICBpZiAoZmllbGRzU2NoZW1hLmhhc093blByb3BlcnR5KGYpKSB7XG4gICAgICAgICAgICAgIHZhciBmaWVsZFNjaGVtYSA9IEFycmF5LmlzQXJyYXkoZmllbGRzU2NoZW1hW2ZdKSA/IGZpZWxkc1NjaGVtYVtmXSA6IFtmaWVsZHNTY2hlbWFbZl1dO1xuICAgICAgICAgICAgICBmaWVsZHNTY2hlbWFbZl0gPSBmaWVsZFNjaGVtYS5tYXAoYWRkRnVsbGZpZWxkLmJpbmQobnVsbCwgZikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBzY2hlbWEgPSBuZXcgU2NoZW1hKGZpZWxkc1NjaGVtYSk7XG4gICAgICAgICAgc2NoZW1hLm1lc3NhZ2VzKG9wdGlvbnMubWVzc2FnZXMpO1xuXG4gICAgICAgICAgaWYgKGRhdGEucnVsZS5vcHRpb25zKSB7XG4gICAgICAgICAgICBkYXRhLnJ1bGUub3B0aW9ucy5tZXNzYWdlcyA9IG9wdGlvbnMubWVzc2FnZXM7XG4gICAgICAgICAgICBkYXRhLnJ1bGUub3B0aW9ucy5lcnJvciA9IG9wdGlvbnMuZXJyb3I7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgc2NoZW1hLnZhbGlkYXRlKGRhdGEudmFsdWUsIGRhdGEucnVsZS5vcHRpb25zIHx8IG9wdGlvbnMsIGZ1bmN0aW9uIChlcnJzKSB7XG4gICAgICAgICAgICB2YXIgZmluYWxFcnJvcnMgPSBbXTtcblxuICAgICAgICAgICAgaWYgKGVycm9ycyAmJiBlcnJvcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIGZpbmFsRXJyb3JzLnB1c2guYXBwbHkoZmluYWxFcnJvcnMsIGVycm9ycyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChlcnJzICYmIGVycnMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIGZpbmFsRXJyb3JzLnB1c2guYXBwbHkoZmluYWxFcnJvcnMsIGVycnMpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkb0l0KGZpbmFsRXJyb3JzLmxlbmd0aCA/IGZpbmFsRXJyb3JzIDogbnVsbCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIHJlcztcblxuICAgICAgaWYgKHJ1bGUuYXN5bmNWYWxpZGF0b3IpIHtcbiAgICAgICAgcmVzID0gcnVsZS5hc3luY1ZhbGlkYXRvcihydWxlLCBkYXRhLnZhbHVlLCBjYiwgZGF0YS5zb3VyY2UsIG9wdGlvbnMpO1xuICAgICAgfSBlbHNlIGlmIChydWxlLnZhbGlkYXRvcikge1xuICAgICAgICByZXMgPSBydWxlLnZhbGlkYXRvcihydWxlLCBkYXRhLnZhbHVlLCBjYiwgZGF0YS5zb3VyY2UsIG9wdGlvbnMpO1xuXG4gICAgICAgIGlmIChyZXMgPT09IHRydWUpIHtcbiAgICAgICAgICBjYigpO1xuICAgICAgICB9IGVsc2UgaWYgKHJlcyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICBjYihydWxlLm1lc3NhZ2UgfHwgcnVsZS5maWVsZCArIFwiIGZhaWxzXCIpO1xuICAgICAgICB9IGVsc2UgaWYgKHJlcyBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgICAgY2IocmVzKTtcbiAgICAgICAgfSBlbHNlIGlmIChyZXMgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAgIGNiKHJlcy5tZXNzYWdlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAocmVzICYmIHJlcy50aGVuKSB7XG4gICAgICAgIHJlcy50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gY2IoKTtcbiAgICAgICAgfSwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICByZXR1cm4gY2IoZSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sIGZ1bmN0aW9uIChyZXN1bHRzKSB7XG4gICAgICBjb21wbGV0ZShyZXN1bHRzKTtcbiAgICB9KTtcbiAgfSxcbiAgZ2V0VHlwZTogZnVuY3Rpb24gZ2V0VHlwZShydWxlKSB7XG4gICAgaWYgKHJ1bGUudHlwZSA9PT0gdW5kZWZpbmVkICYmIHJ1bGUucGF0dGVybiBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgICAgcnVsZS50eXBlID0gJ3BhdHRlcm4nO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgcnVsZS52YWxpZGF0b3IgIT09ICdmdW5jdGlvbicgJiYgcnVsZS50eXBlICYmICF2YWxpZGF0b3JzLmhhc093blByb3BlcnR5KHJ1bGUudHlwZSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihmb3JtYXQoJ1Vua25vd24gcnVsZSB0eXBlICVzJywgcnVsZS50eXBlKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJ1bGUudHlwZSB8fCAnc3RyaW5nJztcbiAgfSxcbiAgZ2V0VmFsaWRhdGlvbk1ldGhvZDogZnVuY3Rpb24gZ2V0VmFsaWRhdGlvbk1ldGhvZChydWxlKSB7XG4gICAgaWYgKHR5cGVvZiBydWxlLnZhbGlkYXRvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIHJ1bGUudmFsaWRhdG9yO1xuICAgIH1cblxuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMocnVsZSk7XG4gICAgdmFyIG1lc3NhZ2VJbmRleCA9IGtleXMuaW5kZXhPZignbWVzc2FnZScpO1xuXG4gICAgaWYgKG1lc3NhZ2VJbmRleCAhPT0gLTEpIHtcbiAgICAgIGtleXMuc3BsaWNlKG1lc3NhZ2VJbmRleCwgMSk7XG4gICAgfVxuXG4gICAgaWYgKGtleXMubGVuZ3RoID09PSAxICYmIGtleXNbMF0gPT09ICdyZXF1aXJlZCcpIHtcbiAgICAgIHJldHVybiB2YWxpZGF0b3JzLnJlcXVpcmVkO1xuICAgIH1cblxuICAgIHJldHVybiB2YWxpZGF0b3JzW3RoaXMuZ2V0VHlwZShydWxlKV0gfHwgZmFsc2U7XG4gIH1cbn07XG5cblNjaGVtYS5yZWdpc3RlciA9IGZ1bmN0aW9uIHJlZ2lzdGVyKHR5cGUsIHZhbGlkYXRvcikge1xuICBpZiAodHlwZW9mIHZhbGlkYXRvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IHJlZ2lzdGVyIGEgdmFsaWRhdG9yIGJ5IHR5cGUsIHZhbGlkYXRvciBpcyBub3QgYSBmdW5jdGlvbicpO1xuICB9XG5cbiAgdmFsaWRhdG9yc1t0eXBlXSA9IHZhbGlkYXRvcjtcbn07XG5cblNjaGVtYS53YXJuaW5nID0gd2FybmluZztcblNjaGVtYS5tZXNzYWdlcyA9IG1lc3NhZ2VzO1xuU2NoZW1hLnZhbGlkYXRvcnMgPSB2YWxpZGF0b3JzO1xuXG5leHBvcnQgZGVmYXVsdCBTY2hlbWE7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiIsImltcG9ydHtkZWZpbmVDb21wb25lbnQgYXMgZSxyZWYgYXMgdCxjb21wdXRlZCBhcyBsLG9wZW5CbG9jayBhcyBhLGNyZWF0ZUJsb2NrIGFzIG4sVHJhbnNpdGlvbiBhcyBvLHdpdGhDdHggYXMgaSx3aXRoRGlyZWN0aXZlcyBhcyByLGNyZWF0ZVZOb2RlIGFzIHMsY3JlYXRlQ29tbWVudFZOb2RlIGFzIHUscmVuZGVyU2xvdCBhcyBkLGNyZWF0ZVRleHRWTm9kZSBhcyBjLHRvRGlzcGxheVN0cmluZyBhcyBwLHZTaG93IGFzIGgsZ2V0Q3VycmVudEluc3RhbmNlIGFzIHYsc2hhbGxvd1JlZiBhcyBtLHJlYWN0aXZlIGFzIGYsd2F0Y2hFZmZlY3QgYXMgZyxpc1JlZiBhcyBiLHdhdGNoIGFzIHksbmV4dFRpY2sgYXMgayx0b1JlZnMgYXMgQyxwcm92aWRlIGFzIHgsaW5qZWN0IGFzIHcsb25Nb3VudGVkIGFzIF8sb25VcGRhdGVkIGFzIFMsRnJhZ21lbnQgYXMgRSxtZXJnZVByb3BzIGFzIE0sd2l0aE1vZGlmaWVycyBhcyBULG9uVW5tb3VudGVkIGFzIE4saCBhcyBELG9uQmVmb3JlVW5tb3VudCBhcyBPLHJlc29sdmVDb21wb25lbnQgYXMgUCxyZXNvbHZlRHluYW1pY0NvbXBvbmVudCBhcyBWLENvbW1lbnQgYXMgSSxjbG9uZVZOb2RlIGFzIEEsb25BY3RpdmF0ZWQgYXMgQixvbkRlYWN0aXZhdGVkIGFzIEwsVGVsZXBvcnQgYXMgeixyZXNvbHZlRGlyZWN0aXZlIGFzIEYsd2l0aEtleXMgYXMgJCxjcmVhdGVTbG90cyBhcyBSLHJlbmRlckxpc3QgYXMgSCx2TW9kZWxDaGVja2JveCBhcyBXLHZNb2RlbFJhZGlvIGFzIGosb25CZWZvcmVVcGRhdGUgYXMgSyx2TW9kZWxUZXh0IGFzIFksdG9IYW5kbGVycyBhcyBxLHJlbmRlciBhcyBVLGlzVk5vZGUgYXMgRyxvbkJlZm9yZU1vdW50IGFzIFgsdW5yZWYgYXMgUSxUcmFuc2l0aW9uR3JvdXAgYXMgWixwdXNoU2NvcGVJZCBhcyBKLHBvcFNjb3BlSWQgYXMgZWUsd2l0aFNjb3BlSWQgYXMgdGV9ZnJvbVwidnVlXCI7aW1wb3J0IGxlIGZyb21cImxvZGFzaC9kZWJvdW5jZVwiO2ltcG9ydCBhZSBmcm9tXCJub3JtYWxpemUtd2hlZWxcIjtpbXBvcnQgbmUgZnJvbVwibWl0dFwiO2ltcG9ydCBvZSBmcm9tXCJyZXNpemUtb2JzZXJ2ZXItcG9seWZpbGxcIjtpbXBvcnR7Y3JlYXRlUG9wcGVyIGFzIGllfWZyb21cIkBwb3BwZXJqcy9jb3JlXCI7aW1wb3J0IHJlIGZyb21cImxvZGFzaC90aHJvdHRsZVwiO2ltcG9ydCBzZSBmcm9tXCJkYXlqc1wiO2ltcG9ydCB1ZSBmcm9tXCJkYXlqcy9wbHVnaW4vbG9jYWxlRGF0YVwiO2ltcG9ydCBkZSBmcm9tXCJkYXlqcy9wbHVnaW4vY3VzdG9tUGFyc2VGb3JtYXRcIjtpbXBvcnQgY2UgZnJvbVwibG9kYXNoL3VuaW9uXCI7aW1wb3J0IHBlIGZyb21cImxvZGFzaC9pc0VxdWFsXCI7aW1wb3J0IGhlIGZyb21cImRheWpzL3BsdWdpbi9hZHZhbmNlZEZvcm1hdFwiO2ltcG9ydCB2ZSBmcm9tXCJkYXlqcy9wbHVnaW4vd2Vla09mWWVhclwiO2ltcG9ydCBtZSBmcm9tXCJkYXlqcy9wbHVnaW4vd2Vla1llYXJcIjtpbXBvcnQgZmUgZnJvbVwiZGF5anMvcGx1Z2luL2lzTGVhcFllYXJcIjtpbXBvcnQgZ2UgZnJvbVwiZGF5anMvcGx1Z2luL2lzU2FtZU9yQWZ0ZXJcIjtpbXBvcnQgYmUgZnJvbVwiZGF5anMvcGx1Z2luL2lzU2FtZU9yQmVmb3JlXCI7aW1wb3J0IHllIGZyb21cImFzeW5jLXZhbGlkYXRvclwiO2NvbnN0IGtlPXtzdWNjZXNzOlwiZWwtaWNvbi1zdWNjZXNzXCIsd2FybmluZzpcImVsLWljb24td2FybmluZ1wiLGVycm9yOlwiZWwtaWNvbi1lcnJvclwifTt2YXIgQ2U9ZSh7bmFtZTpcIkVsQWxlcnRcIixwcm9wczp7dGl0bGU6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJcIn0sZGVzY3JpcHRpb246e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJcIn0sdHlwZTp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcImluZm9cIn0sY2xvc2FibGU6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiEwfSxjbG9zZVRleHQ6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJcIn0sc2hvd0ljb246Qm9vbGVhbixjZW50ZXI6Qm9vbGVhbixlZmZlY3Q6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJsaWdodFwiLHZhbGlkYXRvcjplPT5bXCJsaWdodFwiLFwiZGFya1wiXS5pbmRleE9mKGUpPi0xfX0sZW1pdHM6W1wiY2xvc2VcIl0sc2V0dXAoZSxhKXtjb25zdCBuPXQoITApLG89bCgoKCk9PlwiZWwtYWxlcnQtLVwiK2UudHlwZSkpLGk9bCgoKCk9PmtlW2UudHlwZV18fFwiZWwtaWNvbi1pbmZvXCIpKSxyPWwoKCgpPT5lLmRlc2NyaXB0aW9ufHxhLnNsb3RzLmRlZmF1bHQ/XCJpcy1iaWdcIjpcIlwiKSkscz1sKCgoKT0+ZS5kZXNjcmlwdGlvbnx8YS5zbG90cy5kZWZhdWx0P1wiaXMtYm9sZFwiOlwiXCIpKTtyZXR1cm57dmlzaWJsZTpuLHR5cGVDbGFzczpvLGljb25DbGFzczppLGlzQmlnSWNvbjpyLGlzQm9sZFRpdGxlOnMsY2xvc2U6ZT0+e24udmFsdWU9ITEsYS5lbWl0KFwiY2xvc2VcIixlKX19fX0pO2NvbnN0IHhlPXtjbGFzczpcImVsLWFsZXJ0X19jb250ZW50XCJ9LHdlPXtrZXk6MSxjbGFzczpcImVsLWFsZXJ0X19kZXNjcmlwdGlvblwifTtDZS5yZW5kZXI9ZnVuY3Rpb24oZSx0LGwsdixtLGYpe3JldHVybiBhKCksbihvLHtuYW1lOlwiZWwtYWxlcnQtZmFkZVwifSx7ZGVmYXVsdDppKCgoKT0+W3IocyhcImRpdlwiLHtjbGFzczpbXCJlbC1hbGVydFwiLFtlLnR5cGVDbGFzcyxlLmNlbnRlcj9cImlzLWNlbnRlclwiOlwiXCIsXCJpcy1cIitlLmVmZmVjdF1dLHJvbGU6XCJhbGVydFwifSxbZS5zaG93SWNvbj8oYSgpLG4oXCJpXCIse2tleTowLGNsYXNzOltcImVsLWFsZXJ0X19pY29uXCIsW2UuaWNvbkNsYXNzLGUuaXNCaWdJY29uXV19LG51bGwsMikpOnUoXCJ2LWlmXCIsITApLHMoXCJkaXZcIix4ZSxbZS50aXRsZXx8ZS4kc2xvdHMudGl0bGU/KGEoKSxuKFwic3BhblwiLHtrZXk6MCxjbGFzczpbXCJlbC1hbGVydF9fdGl0bGVcIixbZS5pc0JvbGRUaXRsZV1dfSxbZChlLiRzbG90cyxcInRpdGxlXCIse30sKCgpPT5bYyhwKGUudGl0bGUpLDEpXSkpXSwyKSk6dShcInYtaWZcIiwhMCksZS4kc2xvdHMuZGVmYXVsdHx8ZS5kZXNjcmlwdGlvbj8oYSgpLG4oXCJwXCIsd2UsW2QoZS4kc2xvdHMsXCJkZWZhdWx0XCIse30sKCgpPT5bYyhwKGUuZGVzY3JpcHRpb24pLDEpXSkpXSkpOnUoXCJ2LWlmXCIsITApLGUuY2xvc2FibGU/KGEoKSxuKFwiaVwiLHtrZXk6MixjbGFzczpbXCJlbC1hbGVydF9fY2xvc2VidG5cIix7XCJpcy1jdXN0b21lZFwiOlwiXCIhPT1lLmNsb3NlVGV4dCxcImVsLWljb24tY2xvc2VcIjpcIlwiPT09ZS5jbG9zZVRleHR9XSxvbkNsaWNrOnRbMV18fCh0WzFdPSguLi50KT0+ZS5jbG9zZSguLi50KSl9LHAoZS5jbG9zZVRleHQpLDMpKTp1KFwidi1pZlwiLCEwKV0pXSwyKSxbW2gsZS52aXNpYmxlXV0pXSkpLF86MX0pfSxDZS5fX2ZpbGU9XCJwYWNrYWdlcy9hbGVydC9zcmMvaW5kZXgudnVlXCIsQ2UuaW5zdGFsbD1lPT57ZS5jb21wb25lbnQoQ2UubmFtZSxDZSl9O3ZhciBfZT1lKHtuYW1lOlwiRWxBc2lkZVwiLHByb3BzOnt3aWR0aDp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIjMwMHB4XCJ9fX0pO19lLnJlbmRlcj1mdW5jdGlvbihlLHQsbCxvLGkscil7cmV0dXJuIGEoKSxuKFwiYXNpZGVcIix7Y2xhc3M6XCJlbC1hc2lkZVwiLHN0eWxlOnt3aWR0aDplLndpZHRofX0sW2QoZS4kc2xvdHMsXCJkZWZhdWx0XCIpXSw0KX0sX2UuX19maWxlPVwicGFja2FnZXMvY29udGFpbmVyL3NyYy9hc2lkZS52dWVcIixfZS5pbnN0YWxsPWU9PntlLmNvbXBvbmVudChfZS5uYW1lLF9lKX07XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmT2JqZWN0LmZyZWV6ZSh7fSksXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmT2JqZWN0LmZyZWV6ZShbXSk7Y29uc3QgU2U9KCk9Pnt9LEVlPU9iamVjdC5hc3NpZ24sTWU9QXJyYXkuaXNBcnJheSxUZT1lPT5cImZ1bmN0aW9uXCI9PXR5cGVvZiBlLE5lPWU9Plwic3RyaW5nXCI9PXR5cGVvZiBlLERlPWU9Pm51bGwhPT1lJiZcIm9iamVjdFwiPT10eXBlb2YgZSxPZT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLFBlPWU9Pk9lLmNhbGwoZSksVmU9ZT0+UGUoZSkuc2xpY2UoOCwtMSksSWU9ZT0+e2NvbnN0IHQ9T2JqZWN0LmNyZWF0ZShudWxsKTtyZXR1cm4gbD0+dFtsXXx8KHRbbF09ZShsKSl9LEFlPS8tKFxcdykvZyxCZT1JZSgoZT0+ZS5yZXBsYWNlKEFlLCgoZSx0KT0+dD90LnRvVXBwZXJDYXNlKCk6XCJcIikpKSksTGU9SWUoKGU9PmUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrZS5zbGljZSgxKSkpO3ZhciB6ZT1cInVuZGVmaW5lZFwiPT10eXBlb2Ygd2luZG93O2NvbnN0IEZlPShlLHQ9XCJcIik9PntsZXQgbD1lO3JldHVybiB0LnNwbGl0KFwiLlwiKS5tYXAoKGU9PntsPW51bGw9PWw/dm9pZCAwOmxbZV19KSksbH07ZnVuY3Rpb24gJGUoZSx0LGwpe2xldCBhPWU7Y29uc3Qgbj0odD0odD10LnJlcGxhY2UoL1xcWyhcXHcrKVxcXS9nLFwiLiQxXCIpKS5yZXBsYWNlKC9eXFwuLyxcIlwiKSkuc3BsaXQoXCIuXCIpO2xldCBvPTA7Zm9yKDtvPG4ubGVuZ3RoLTEmJihhfHxsKTtvKyspe2NvbnN0IGU9bltvXTtpZighKGUgaW4gYSkpe2lmKGwpdGhyb3cgbmV3IEVycm9yKFwicGxlYXNlIHRyYW5zZmVyIGEgdmFsaWQgcHJvcCBwYXRoIHRvIGZvcm0gaXRlbSFcIik7YnJlYWt9YT1hW2VdfXJldHVybntvOmEsazpuW29dLHY6bnVsbD09YT92b2lkIDA6YVtuW29dXX19Y29uc3QgUmU9KCk9Pk1hdGguZmxvb3IoMWU0Kk1hdGgucmFuZG9tKCkpLEhlPWU9PmV8fDA9PT1lP0FycmF5LmlzQXJyYXkoZSk/ZTpbZV06W10sV2U9ZT0+XCJib29sZWFuXCI9PXR5cGVvZiBlO2Z1bmN0aW9uIGplKGUpe2xldCB0PSExO3JldHVybiBmdW5jdGlvbiguLi5sKXt0fHwodD0hMCx3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgoKT0+e2UuYXBwbHkodGhpcyxsKSx0PSExfSkpKX19Y29uc3QgS2U9ZT0+e2NsZWFyVGltZW91dChlLnZhbHVlKSxlLnZhbHVlPW51bGx9O2Z1bmN0aW9uIFllKGUpe3JldHVybiBPYmplY3Qua2V5cyhlKS5tYXAoKHQ9Plt0LGVbdF1dKSl9ZnVuY3Rpb24gcWUoKXtjb25zdCBlPXYoKTtyZXR1cm5cIiRFTEVNRU5UXCJpbiBlLnByb3h5P2UucHJveHkuJEVMRU1FTlQ6e319Y29uc3QgVWU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZS5maW5kKHQpfTtmdW5jdGlvbiBHZShlKXtyZXR1cm4hISghZSYmMCE9PWV8fE1lKGUpJiYhZS5sZW5ndGh8fERlKGUpJiYhT2JqZWN0LmtleXMoZSkubGVuZ3RoKX1mdW5jdGlvbiBYZShlKXtyZXR1cm4gZS5yZWR1Y2UoKChlLHQpPT57Y29uc3QgbD1BcnJheS5pc0FycmF5KHQpP1hlKHQpOnQ7cmV0dXJuIGUuY29uY2F0KGwpfSksW10pfWZ1bmN0aW9uIFFlKGUpe3JldHVybiBBcnJheS5mcm9tKG5ldyBTZXQoZSkpfWZ1bmN0aW9uIFplKGUpe3JldHVybiBlLnZhbHVlfWNvbnN0IEplPVtcImNsYXNzXCIsXCJzdHlsZVwiXSxldD0vXm9uW0EtWl0vO3ZhciB0dD0oZT17fSk9Pntjb25zdHtleGNsdWRlTGlzdGVuZXJzOnQ9ITEsZXhjbHVkZUtleXM6bD1bXX09ZSxhPXYoKSxuPW0oe30pLG89bC5jb25jYXQoSmUpO3JldHVybiBhLmF0dHJzPWYoYS5hdHRycyksZygoKCk9Pntjb25zdCBlPVllKGEuYXR0cnMpLnJlZHVjZSgoKGUsW2wsYV0pPT4oby5pbmNsdWRlcyhsKXx8dCYmZXQudGVzdChsKXx8KGVbbF09YSksZSkpLHt9KTtuLnZhbHVlPWV9KSksbn07Y29uc3QgbHQ9ZnVuY3Rpb24oZSx0LGwsYT0hMSl7ZSYmdCYmbCYmZS5hZGRFdmVudExpc3RlbmVyKHQsbCxhKX0sYXQ9ZnVuY3Rpb24oZSx0LGwpe2UmJnQmJmwmJmUucmVtb3ZlRXZlbnRMaXN0ZW5lcih0LGwsITEpfTtmdW5jdGlvbiBudChlLHQpe2lmKCFlfHwhdClyZXR1cm4hMTtpZigtMSE9PXQuaW5kZXhPZihcIiBcIikpdGhyb3cgbmV3IEVycm9yKFwiY2xhc3NOYW1lIHNob3VsZCBub3QgY29udGFpbiBzcGFjZS5cIik7cmV0dXJuIGUuY2xhc3NMaXN0P2UuY2xhc3NMaXN0LmNvbnRhaW5zKHQpOihcIiBcIitlLmNsYXNzTmFtZStcIiBcIikuaW5kZXhPZihcIiBcIit0K1wiIFwiKT4tMX1mdW5jdGlvbiBvdChlLHQpe2lmKCFlKXJldHVybjtsZXQgbD1lLmNsYXNzTmFtZTtjb25zdCBhPSh0fHxcIlwiKS5zcGxpdChcIiBcIik7Zm9yKGxldCB0PTAsbj1hLmxlbmd0aDt0PG47dCsrKXtjb25zdCBuPWFbdF07biYmKGUuY2xhc3NMaXN0P2UuY2xhc3NMaXN0LmFkZChuKTpudChlLG4pfHwobCs9XCIgXCIrbikpfWUuY2xhc3NMaXN0fHwoZS5jbGFzc05hbWU9bCl9ZnVuY3Rpb24gaXQoZSx0KXtpZighZXx8IXQpcmV0dXJuO2NvbnN0IGw9dC5zcGxpdChcIiBcIik7bGV0IGE9XCIgXCIrZS5jbGFzc05hbWUrXCIgXCI7Zm9yKGxldCB0PTAsbj1sLmxlbmd0aDt0PG47dCsrKXtjb25zdCBuPWxbdF07biYmKGUuY2xhc3NMaXN0P2UuY2xhc3NMaXN0LnJlbW92ZShuKTpudChlLG4pJiYoYT1hLnJlcGxhY2UoXCIgXCIrbitcIiBcIixcIiBcIikpKX1lLmNsYXNzTGlzdHx8KGUuY2xhc3NOYW1lPShhfHxcIlwiKS5yZXBsYWNlKC9eW1xcc1xcdUZFRkZdK3xbXFxzXFx1RkVGRl0rJC9nLFwiXCIpKX1jb25zdCBydD1mdW5jdGlvbihlLHQpe2lmKCF6ZSl7aWYoIWV8fCF0KXJldHVybiBudWxsO1wiZmxvYXRcIj09PSh0PUJlKHQpKSYmKHQ9XCJjc3NGbG9hdFwiKTt0cnl7Y29uc3QgbD1lLnN0eWxlW3RdO2lmKGwpcmV0dXJuIGw7Y29uc3QgYT1kb2N1bWVudC5kZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlKGUsXCJcIik7cmV0dXJuIGE/YVt0XTpcIlwifWNhdGNoKGwpe3JldHVybiBlLnN0eWxlW3RdfX19LHN0PShlLHQpPT57aWYoemUpcmV0dXJuO3JldHVybiBydChlLG51bGw9PXQ/XCJvdmVyZmxvd1wiOnQ/XCJvdmVyZmxvdy15XCI6XCJvdmVyZmxvdy14XCIpLm1hdGNoKC8oc2Nyb2xsfGF1dG8pLyl9LHV0PShlLHQpPT57aWYoemUpcmV0dXJuO2xldCBsPWU7Zm9yKDtsOyl7aWYoW3dpbmRvdyxkb2N1bWVudCxkb2N1bWVudC5kb2N1bWVudEVsZW1lbnRdLmluY2x1ZGVzKGwpKXJldHVybiB3aW5kb3c7aWYoc3QobCx0KSlyZXR1cm4gbDtsPWwucGFyZW50Tm9kZX1yZXR1cm4gbH0sZHQ9ZT0+e2xldCB0PTAsbD1lO2Zvcig7bDspdCs9bC5vZmZzZXRUb3AsbD1sLm9mZnNldFBhcmVudDtyZXR1cm4gdH0sY3Q9ZT0+ZS5zdG9wUHJvcGFnYXRpb24oKTtsZXQgcHQ7ZnVuY3Rpb24gaHQoKXtpZih6ZSlyZXR1cm4gMDtpZih2b2lkIDAhPT1wdClyZXR1cm4gcHQ7Y29uc3QgZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO2UuY2xhc3NOYW1lPVwiZWwtc2Nyb2xsYmFyX193cmFwXCIsZS5zdHlsZS52aXNpYmlsaXR5PVwiaGlkZGVuXCIsZS5zdHlsZS53aWR0aD1cIjEwMHB4XCIsZS5zdHlsZS5wb3NpdGlvbj1cImFic29sdXRlXCIsZS5zdHlsZS50b3A9XCItOTk5OXB4XCIsZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChlKTtjb25zdCB0PWUub2Zmc2V0V2lkdGg7ZS5zdHlsZS5vdmVyZmxvdz1cInNjcm9sbFwiO2NvbnN0IGw9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtsLnN0eWxlLndpZHRoPVwiMTAwJVwiLGUuYXBwZW5kQ2hpbGQobCk7Y29uc3QgYT1sLm9mZnNldFdpZHRoO3JldHVybiBlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZSkscHQ9dC1hLHB0fWNsYXNzIHZ0IGV4dGVuZHMgRXJyb3J7Y29uc3RydWN0b3IoZSl7c3VwZXIoZSksdGhpcy5uYW1lPVwiRWxlbWVudFBsdXNFcnJvclwifX12YXIgbXQ9KGUsdCk9Pnt0aHJvdyBuZXcgdnQoYFske2V9XSAke3R9YCl9O2NvbnN0IGZ0PXt0YWI6XCJUYWJcIixlbnRlcjpcIkVudGVyXCIsc3BhY2U6XCJTcGFjZVwiLGxlZnQ6XCJBcnJvd0xlZnRcIix1cDpcIkFycm93VXBcIixyaWdodDpcIkFycm93UmlnaHRcIixkb3duOlwiQXJyb3dEb3duXCIsZXNjOlwiRXNjYXBlXCIsZGVsZXRlOlwiRGVsZXRlXCIsYmFja3NwYWNlOlwiQmFja3NwYWNlXCJ9LGd0PWU9PntpZihcInRlc3RcIj09PXByb2Nlc3MuZW52Lk5PREVfRU5WKXJldHVybiEwO3JldHVyblwiZml4ZWRcIiE9PWdldENvbXB1dGVkU3R5bGUoZSkucG9zaXRpb24mJm51bGwhPT1lLm9mZnNldFBhcmVudH0sYnQ9ZT0+QXJyYXkuZnJvbShlLnF1ZXJ5U2VsZWN0b3JBbGwoJ2FbaHJlZl0sYnV0dG9uOm5vdChbZGlzYWJsZWRdKSxidXR0b246bm90KFtoaWRkZW5dKSw6bm90KFt0YWJpbmRleD1cIi0xXCJdKSxpbnB1dDpub3QoW2Rpc2FibGVkXSksaW5wdXQ6bm90KFt0eXBlPVwiaGlkZGVuXCJdKSxzZWxlY3Q6bm90KFtkaXNhYmxlZF0pLHRleHRhcmVhOm5vdChbZGlzYWJsZWRdKScpKS5maWx0ZXIoeXQpLmZpbHRlcihndCkseXQ9ZT0+e2lmKGUudGFiSW5kZXg+MHx8MD09PWUudGFiSW5kZXgmJm51bGwhPT1lLmdldEF0dHJpYnV0ZShcInRhYkluZGV4XCIpKXJldHVybiEwO2lmKGUuZGlzYWJsZWQpcmV0dXJuITE7c3dpdGNoKGUubm9kZU5hbWUpe2Nhc2VcIkFcIjpyZXR1cm4hIWUuaHJlZiYmXCJpZ25vcmVcIiE9PWUucmVsO2Nhc2VcIklOUFVUXCI6cmV0dXJuIShcImhpZGRlblwiPT09ZS50eXBlfHxcImZpbGVcIj09PWUudHlwZSk7Y2FzZVwiQlVUVE9OXCI6Y2FzZVwiU0VMRUNUXCI6Y2FzZVwiVEVYVEFSRUFcIjpyZXR1cm4hMDtkZWZhdWx0OnJldHVybiExfX0sa3Q9ZT0+e3ZhciB0O3JldHVybiEheXQoZSkmJih4dC5JZ25vcmVVdGlsRm9jdXNDaGFuZ2VzPSEwLG51bGw9PT0odD1lLmZvY3VzKXx8dm9pZCAwPT09dHx8dC5jYWxsKGUpLHh0Lklnbm9yZVV0aWxGb2N1c0NoYW5nZXM9ITEsZG9jdW1lbnQuYWN0aXZlRWxlbWVudD09PWUpfSxDdD1mdW5jdGlvbihlLHQsLi4ubCl7bGV0IGE7YT10LmluY2x1ZGVzKFwibW91c2VcIil8fHQuaW5jbHVkZXMoXCJjbGlja1wiKT9cIk1vdXNlRXZlbnRzXCI6dC5pbmNsdWRlcyhcImtleVwiKT9cIktleWJvYXJkRXZlbnRcIjpcIkhUTUxFdmVudHNcIjtjb25zdCBuPWRvY3VtZW50LmNyZWF0ZUV2ZW50KGEpO3JldHVybiBuLmluaXRFdmVudCh0LC4uLmwpLGUuZGlzcGF0Y2hFdmVudChuKSxlfSx4dD17SWdub3JlVXRpbEZvY3VzQ2hhbmdlczohMSxmb2N1c0ZpcnN0RGVzY2VuZGFudDpmdW5jdGlvbihlKXtmb3IobGV0IHQ9MDt0PGUuY2hpbGROb2Rlcy5sZW5ndGg7dCsrKXtjb25zdCBsPWUuY2hpbGROb2Rlc1t0XTtpZihrdChsKXx8dGhpcy5mb2N1c0ZpcnN0RGVzY2VuZGFudChsKSlyZXR1cm4hMH1yZXR1cm4hMX0sZm9jdXNMYXN0RGVzY2VuZGFudDpmdW5jdGlvbihlKXtmb3IobGV0IHQ9ZS5jaGlsZE5vZGVzLmxlbmd0aC0xO3Q+PTA7dC0tKXtjb25zdCBsPWUuY2hpbGROb2Rlc1t0XTtpZihrdChsKXx8dGhpcy5mb2N1c0xhc3REZXNjZW5kYW50KGwpKXJldHVybiEwfXJldHVybiExfX0sd3Q9W107emV8fGx0KGRvY3VtZW50LFwia2V5ZG93blwiLChlPT57aWYoMCE9PXd0Lmxlbmd0aCYmZS5jb2RlPT09ZnQuZXNjKXt3dFt3dC5sZW5ndGgtMV0uaGFuZGxlQ2xvc2UoKX19KSk7Y29uc3QgX3Q9bmV3IE1hcDtsZXQgU3Q7ZnVuY3Rpb24gRXQoZSx0KXtsZXQgbD1bXTtyZXR1cm4gQXJyYXkuaXNBcnJheSh0LmFyZyk/bD10LmFyZzpsLnB1c2godC5hcmcpLGZ1bmN0aW9uKGEsbil7Y29uc3Qgbz10Lmluc3RhbmNlLnBvcHBlclJlZixpPWEudGFyZ2V0LHI9bi50YXJnZXQscz0hdHx8IXQuaW5zdGFuY2UsdT0haXx8IXIsZD1lLmNvbnRhaW5zKGkpfHxlLmNvbnRhaW5zKHIpLGM9ZT09PWkscD1sLmxlbmd0aCYmbC5zb21lKChlPT5udWxsPT1lP3ZvaWQgMDplLmNvbnRhaW5zKGkpKSl8fGwubGVuZ3RoJiZsLmluY2x1ZGVzKHIpLGg9byYmKG8uY29udGFpbnMoaSl8fG8uY29udGFpbnMocikpO3N8fHV8fGR8fGN8fHB8fGh8fHQudmFsdWUoKX19emV8fChsdChkb2N1bWVudCxcIm1vdXNlZG93blwiLChlPT5TdD1lKSksbHQoZG9jdW1lbnQsXCJtb3VzZXVwXCIsKGU9Pntmb3IoY29uc3R7ZG9jdW1lbnRIYW5kbGVyOnR9b2YgX3QudmFsdWVzKCkpdChlLFN0KX0pKSk7Y29uc3QgTXQ9e2JlZm9yZU1vdW50KGUsdCl7X3Quc2V0KGUse2RvY3VtZW50SGFuZGxlcjpFdChlLHQpLGJpbmRpbmdGbjp0LnZhbHVlfSl9LHVwZGF0ZWQoZSx0KXtfdC5zZXQoZSx7ZG9jdW1lbnRIYW5kbGVyOkV0KGUsdCksYmluZGluZ0ZuOnQudmFsdWV9KX0sdW5tb3VudGVkKGUpe190LmRlbGV0ZShlKX19O3ZhciBUdD17YmVmb3JlTW91bnQoZSx0KXtsZXQgbCxhPW51bGw7Y29uc3Qgbj0oKT0+dC52YWx1ZSYmdC52YWx1ZSgpLG89KCk9PntEYXRlLm5vdygpLWw8MTAwJiZuKCksY2xlYXJJbnRlcnZhbChhKSxhPW51bGx9O2x0KGUsXCJtb3VzZWRvd25cIiwoZT0+ezA9PT1lLmJ1dHRvbiYmKGw9RGF0ZS5ub3coKSxmdW5jdGlvbihlLHQsbCl7Y29uc3QgYT1mdW5jdGlvbiguLi5uKXtsJiZsLmFwcGx5KHRoaXMsbiksYXQoZSx0LGEpfTtsdChlLHQsYSl9KGRvY3VtZW50LFwibW91c2V1cFwiLG8pLGNsZWFySW50ZXJ2YWwoYSksYT1zZXRJbnRlcnZhbChuLDEwMCkpfSkpfX07Y29uc3QgTnQ9e2JlZm9yZU1vdW50KGUpe2VbXCJfdHJhcC1mb2N1cy1jaGlsZHJlblwiXT1idChlKSxlW1wiX3RyYXAtZm9jdXMtaGFuZGxlclwiXT10PT57dmFyIGw7Y29uc3QgYT1lW1wiX3RyYXAtZm9jdXMtY2hpbGRyZW5cIl07aWYoYS5sZW5ndGg+MCYmdC5jb2RlPT09ZnQudGFiKXtpZigxPT09YS5sZW5ndGgpcmV0dXJuIHQucHJldmVudERlZmF1bHQoKSx2b2lkKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQhPT1hWzBdJiZhWzBdLmZvY3VzKCkpO2NvbnN0IGU9dC5zaGlmdEtleSxuPXQudGFyZ2V0PT09YVswXSxvPXQudGFyZ2V0PT09YVthLmxlbmd0aC0xXTtpZihuJiZlJiYodC5wcmV2ZW50RGVmYXVsdCgpLGFbYS5sZW5ndGgtMV0uZm9jdXMoKSksbyYmIWUmJih0LnByZXZlbnREZWZhdWx0KCksYVswXS5mb2N1cygpKSxcInRlc3RcIj09PXByb2Nlc3MuZW52Lk5PREVfRU5WKXtjb25zdCBuPWEuZmluZEluZGV4KChlPT5lPT09dC50YXJnZXQpKTstMSE9PW4mJihudWxsPT09KGw9YVtlP24tMTpuKzFdKXx8dm9pZCAwPT09bHx8bC5mb2N1cygpKX19fSxsdChkb2N1bWVudCxcImtleWRvd25cIixlW1wiX3RyYXAtZm9jdXMtaGFuZGxlclwiXSl9LHVwZGF0ZWQoZSl7aygoKCk9PntlW1wiX3RyYXAtZm9jdXMtY2hpbGRyZW5cIl09YnQoZSl9KSl9LHVubW91bnRlZChlKXthdChkb2N1bWVudCxcImtleWRvd25cIixlW1wiX3RyYXAtZm9jdXMtaGFuZGxlclwiXSl9fSxEdD1cInVuZGVmaW5lZFwiIT10eXBlb2YgbmF2aWdhdG9yJiZuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkuaW5kZXhPZihcImZpcmVmb3hcIik+LTEsT3Q9e2JlZm9yZU1vdW50KGUsdCl7IWZ1bmN0aW9uKGUsdCl7aWYoZSYmZS5hZGRFdmVudExpc3RlbmVyKXtjb25zdCBsPWZ1bmN0aW9uKGUpe2NvbnN0IGw9YWUoZSk7dCYmdC5hcHBseSh0aGlzLFtlLGxdKX07RHQ/ZS5hZGRFdmVudExpc3RlbmVyKFwiRE9NTW91c2VTY3JvbGxcIixsKTplLm9ubW91c2V3aGVlbD1sfX0oZSx0LnZhbHVlKX19LFB0PVwidXBkYXRlOm1vZGVsVmFsdWVcIixWdD17dmFsaWRhdGluZzpcImVsLWljb24tbG9hZGluZ1wiLHN1Y2Nlc3M6XCJlbC1pY29uLWNpcmNsZS1jaGVja1wiLGVycm9yOlwiZWwtaWNvbi1jaXJjbGUtY2xvc2VcIn07ZnVuY3Rpb24gSXQoZSl7cmV0dXJuLyhbKFxcdUFDMDAtXFx1RDdBRil8KFxcdTMxMzAtXFx1MzE4RildKSsvZ2kudGVzdChlKX1jb25zdCBBdD1lPT5bXCJcIixcImxhcmdlXCIsXCJtZWRpdW1cIixcInNtYWxsXCIsXCJtaW5pXCJdLmluY2x1ZGVzKGUpLEJ0PVwiZWwuZm9ybS5hZGRGaWVsZFwiLEx0PVwiZWwuZm9ybS5yZW1vdmVGaWVsZFwiO3ZhciB6dD1lKHtuYW1lOlwiRWxGb3JtXCIscHJvcHM6e21vZGVsOk9iamVjdCxydWxlczpPYmplY3QsbGFiZWxQb3NpdGlvbjpTdHJpbmcsbGFiZWxXaWR0aDpTdHJpbmcsbGFiZWxTdWZmaXg6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJcIn0saW5saW5lOkJvb2xlYW4saW5saW5lTWVzc2FnZTpCb29sZWFuLHN0YXR1c0ljb246Qm9vbGVhbixzaG93TWVzc2FnZTp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITB9LHNpemU6U3RyaW5nLGRpc2FibGVkOkJvb2xlYW4sdmFsaWRhdGVPblJ1bGVDaGFuZ2U6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiEwfSxoaWRlUmVxdWlyZWRBc3Rlcmlzazp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITF9fSxzZXR1cChlLHtlbWl0OmF9KXtjb25zdCBuPW5lKCksbz1bXTt5KCgoKT0+ZS5ydWxlcyksKCgpPT57by5mb3JFYWNoKChlPT57ZS5yZW1vdmVWYWxpZGF0ZUV2ZW50cygpLGUuYWRkVmFsaWRhdGVFdmVudHMoKX0pKSxlLnZhbGlkYXRlT25SdWxlQ2hhbmdlJiZzKCgoKT0+KHt9KSkpfSkpLG4ub24oQnQsKGU9PntlJiZvLnB1c2goZSl9KSksbi5vbihMdCwoZT0+e2UucHJvcCYmby5zcGxpY2Uoby5pbmRleE9mKGUpLDEpfSkpO2NvbnN0IGk9KCk9PntlLm1vZGVsP28uZm9yRWFjaCgoZT0+e2UucmVzZXRGaWVsZCgpfSkpOmNvbnNvbGUud2FybihcIltFbGVtZW50IFdhcm5dW0Zvcm1dbW9kZWwgaXMgcmVxdWlyZWQgZm9yIHJlc2V0RmllbGRzIHRvIHdvcmsuXCIpfSxyPShlPVtdKT0+eyhlLmxlbmd0aD9cInN0cmluZ1wiPT10eXBlb2YgZT9vLmZpbHRlcigodD0+ZT09PXQucHJvcCkpOm8uZmlsdGVyKCh0PT5lLmluZGV4T2YodC5wcm9wKT4tMSkpOm8pLmZvckVhY2goKGU9PntlLmNsZWFyVmFsaWRhdGUoKX0pKX0scz10PT57aWYoIWUubW9kZWwpcmV0dXJuIHZvaWQgY29uc29sZS53YXJuKFwiW0VsZW1lbnQgV2Fybl1bRm9ybV1tb2RlbCBpcyByZXF1aXJlZCBmb3IgdmFsaWRhdGUgdG8gd29yayFcIik7bGV0IGw7XCJmdW5jdGlvblwiIT10eXBlb2YgdCYmKGw9bmV3IFByb21pc2UoKChlLGwpPT57dD1mdW5jdGlvbih0LGEpe3Q/ZSghMCk6bChhKX19KSkpLDA9PT1vLmxlbmd0aCYmdCghMCk7bGV0IGE9ITAsbj0wLGk9e307Zm9yKGNvbnN0IGUgb2YgbyllLnZhbGlkYXRlKFwiXCIsKChlLGwpPT57ZSYmKGE9ITEpLGk9T2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LGkpLGwpLCsrbj09PW8ubGVuZ3RoJiZ0KGEsaSl9KSk7cmV0dXJuIGx9LHU9KGUsdCk9PntlPVtdLmNvbmNhdChlKTtjb25zdCBsPW8uZmlsdGVyKCh0PT4tMSE9PWUuaW5kZXhPZih0LnByb3ApKSk7by5sZW5ndGg/bC5mb3JFYWNoKChlPT57ZS52YWxpZGF0ZShcIlwiLHQpfSkpOmNvbnNvbGUud2FybihcIltFbGVtZW50IFdhcm5dcGxlYXNlIHBhc3MgY29ycmVjdCBwcm9wcyFcIil9LGQ9ZihPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7Zm9ybU1pdHQ6bn0sQyhlKSkse3Jlc2V0RmllbGRzOmksY2xlYXJWYWxpZGF0ZTpyLHZhbGlkYXRlRmllbGQ6dSxlbWl0OmF9KSxmdW5jdGlvbigpe2NvbnN0IGU9dChbXSk7ZnVuY3Rpb24gYSh0KXtjb25zdCBsPWUudmFsdWUuaW5kZXhPZih0KTtyZXR1cm4tMT09PWwmJmNvbnNvbGUud2FybihcIltFbGVtZW50IFdhcm5dW0VsZW1lbnRGb3JtXXVuZXhwZWN0ZWQgd2lkdGggXCIrdCksbH1yZXR1cm57YXV0b0xhYmVsV2lkdGg6bCgoKCk9PntpZighZS52YWx1ZS5sZW5ndGgpcmV0dXJuXCIwXCI7Y29uc3QgdD1NYXRoLm1heCguLi5lLnZhbHVlKTtyZXR1cm4gdD90K1wicHhcIjpcIlwifSkpLHJlZ2lzdGVyTGFiZWxXaWR0aDpmdW5jdGlvbih0LGwpe2lmKHQmJmwpe2NvbnN0IG49YShsKTtlLnZhbHVlLnNwbGljZShuLDEsdCl9ZWxzZSB0JiZlLnZhbHVlLnB1c2godCl9LGRlcmVnaXN0ZXJMYWJlbFdpZHRoOmZ1bmN0aW9uKHQpe2NvbnN0IGw9YSh0KTtsPi0xJiZlLnZhbHVlLnNwbGljZShsLDEpfX19KCkpKTtyZXR1cm4geChcImVsRm9ybVwiLGQpLHt2YWxpZGF0ZTpzLHJlc2V0RmllbGRzOmksY2xlYXJWYWxpZGF0ZTpyLHZhbGlkYXRlRmllbGQ6dX19fSk7bGV0IEZ0O3p0LnJlbmRlcj1mdW5jdGlvbihlLHQsbCxvLGkscil7cmV0dXJuIGEoKSxuKFwiZm9ybVwiLHtjbGFzczpbXCJlbC1mb3JtXCIsW2UubGFiZWxQb3NpdGlvbj9cImVsLWZvcm0tLWxhYmVsLVwiK2UubGFiZWxQb3NpdGlvbjpcIlwiLHtcImVsLWZvcm0tLWlubGluZVwiOmUuaW5saW5lfV1dfSxbZChlLiRzbG90cyxcImRlZmF1bHRcIildLDIpfSx6dC5fX2ZpbGU9XCJwYWNrYWdlcy9mb3JtL3NyYy9mb3JtLnZ1ZVwiLHp0Lmluc3RhbGw9ZT0+e2UuY29tcG9uZW50KHp0Lm5hbWUsenQpfTtjb25zdCAkdD1bXCJsZXR0ZXItc3BhY2luZ1wiLFwibGluZS1oZWlnaHRcIixcInBhZGRpbmctdG9wXCIsXCJwYWRkaW5nLWJvdHRvbVwiLFwiZm9udC1mYW1pbHlcIixcImZvbnQtd2VpZ2h0XCIsXCJmb250LXNpemVcIixcInRleHQtcmVuZGVyaW5nXCIsXCJ0ZXh0LXRyYW5zZm9ybVwiLFwid2lkdGhcIixcInRleHQtaW5kZW50XCIsXCJwYWRkaW5nLWxlZnRcIixcInBhZGRpbmctcmlnaHRcIixcImJvcmRlci13aWR0aFwiLFwiYm94LXNpemluZ1wiXTtmdW5jdGlvbiBSdChlLHQ9MSxsPW51bGwpe3ZhciBhO0Z0fHwoRnQ9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRleHRhcmVhXCIpLGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoRnQpKTtjb25zdHtwYWRkaW5nU2l6ZTpuLGJvcmRlclNpemU6byxib3hTaXppbmc6aSxjb250ZXh0U3R5bGU6cn09ZnVuY3Rpb24oZSl7Y29uc3QgdD13aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlKSxsPXQuZ2V0UHJvcGVydHlWYWx1ZShcImJveC1zaXppbmdcIiksYT1wYXJzZUZsb2F0KHQuZ2V0UHJvcGVydHlWYWx1ZShcInBhZGRpbmctYm90dG9tXCIpKStwYXJzZUZsb2F0KHQuZ2V0UHJvcGVydHlWYWx1ZShcInBhZGRpbmctdG9wXCIpKSxuPXBhcnNlRmxvYXQodC5nZXRQcm9wZXJ0eVZhbHVlKFwiYm9yZGVyLWJvdHRvbS13aWR0aFwiKSkrcGFyc2VGbG9hdCh0LmdldFByb3BlcnR5VmFsdWUoXCJib3JkZXItdG9wLXdpZHRoXCIpKTtyZXR1cm57Y29udGV4dFN0eWxlOiR0Lm1hcCgoZT0+YCR7ZX06JHt0LmdldFByb3BlcnR5VmFsdWUoZSl9YCkpLmpvaW4oXCI7XCIpLHBhZGRpbmdTaXplOmEsYm9yZGVyU2l6ZTpuLGJveFNpemluZzpsfX0oZSk7RnQuc2V0QXR0cmlidXRlKFwic3R5bGVcIixyK1wiO1xcbiAgaGVpZ2h0OjAgIWltcG9ydGFudDtcXG4gIHZpc2liaWxpdHk6aGlkZGVuICFpbXBvcnRhbnQ7XFxuICBvdmVyZmxvdzpoaWRkZW4gIWltcG9ydGFudDtcXG4gIHBvc2l0aW9uOmFic29sdXRlICFpbXBvcnRhbnQ7XFxuICB6LWluZGV4Oi0xMDAwICFpbXBvcnRhbnQ7XFxuICB0b3A6MCAhaW1wb3J0YW50O1xcbiAgcmlnaHQ6MCAhaW1wb3J0YW50O1xcblwiKSxGdC52YWx1ZT1lLnZhbHVlfHxlLnBsYWNlaG9sZGVyfHxcIlwiO2xldCBzPUZ0LnNjcm9sbEhlaWdodDtjb25zdCB1PXt9O1wiYm9yZGVyLWJveFwiPT09aT9zKz1vOlwiY29udGVudC1ib3hcIj09PWkmJihzLT1uKSxGdC52YWx1ZT1cIlwiO2NvbnN0IGQ9RnQuc2Nyb2xsSGVpZ2h0LW47aWYobnVsbCE9PXQpe2xldCBlPWQqdDtcImJvcmRlci1ib3hcIj09PWkmJihlPWUrbitvKSxzPU1hdGgubWF4KGUscyksdS5taW5IZWlnaHQ9ZStcInB4XCJ9aWYobnVsbCE9PWwpe2xldCBlPWQqbDtcImJvcmRlci1ib3hcIj09PWkmJihlPWUrbitvKSxzPU1hdGgubWluKGUscyl9cmV0dXJuIHUuaGVpZ2h0PXMrXCJweFwiLG51bGw9PT0oYT1GdC5wYXJlbnROb2RlKXx8dm9pZCAwPT09YXx8YS5yZW1vdmVDaGlsZChGdCksRnQ9bnVsbCx1fWNvbnN0IEh0PXtzdWZmaXg6XCJhcHBlbmRcIixwcmVmaXg6XCJwcmVwZW5kXCJ9O3ZhciBXdD1lKHtuYW1lOlwiRWxJbnB1dFwiLGluaGVyaXRBdHRyczohMSxwcm9wczp7bW9kZWxWYWx1ZTp7dHlwZTpbU3RyaW5nLE51bWJlcl0sZGVmYXVsdDpcIlwifSx0eXBlOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwidGV4dFwifSxzaXplOnt0eXBlOlN0cmluZyx2YWxpZGF0b3I6QXR9LHJlc2l6ZTp7dHlwZTpTdHJpbmcsdmFsaWRhdG9yOmU9PltcIm5vbmVcIixcImJvdGhcIixcImhvcml6b250YWxcIixcInZlcnRpY2FsXCJdLmluY2x1ZGVzKGUpfSxhdXRvc2l6ZTp7dHlwZTpbQm9vbGVhbixPYmplY3RdLGRlZmF1bHQ6ITF9LGF1dG9jb21wbGV0ZTp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIm9mZlwiLHZhbGlkYXRvcjplPT5bXCJvblwiLFwib2ZmXCJdLmluY2x1ZGVzKGUpfSxwbGFjZWhvbGRlcjp7dHlwZTpTdHJpbmd9LGZvcm06e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJcIn0sZGlzYWJsZWQ6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiExfSxyZWFkb25seTp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITF9LGNsZWFyYWJsZTp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITF9LHNob3dQYXNzd29yZDp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITF9LHNob3dXb3JkTGltaXQ6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiExfSxzdWZmaXhJY29uOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiXCJ9LHByZWZpeEljb246e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJcIn0sbGFiZWw6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJcIn0sdGFiaW5kZXg6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJcIn0sdmFsaWRhdGVFdmVudDp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITB9fSxlbWl0czpbUHQsXCJpbnB1dFwiLFwiY2hhbmdlXCIsXCJmb2N1c1wiLFwiYmx1clwiLFwiY2xlYXJcIixcIm1vdXNlbGVhdmVcIixcIm1vdXNlZW50ZXJcIixcImtleWRvd25cIl0sc2V0dXAoZSxhKXtjb25zdCBuPXYoKSxvPXR0KCksaT1xZSgpLHI9dyhcImVsRm9ybVwiLHt9KSxzPXcoXCJlbEZvcm1JdGVtXCIse30pLHU9dChudWxsKSxkPXQobnVsbCksYz10KCExKSxwPXQoITEpLGg9dCghMSksZj10KCExKSxnPW0oe30pLGI9bCgoKCk9PnUudmFsdWV8fGQudmFsdWUpKSxDPWwoKCgpPT5lLnNpemV8fHMuc2l6ZXx8aS5zaXplKSkseD1sKCgoKT0+ci5zdGF0dXNJY29uKSksRT1sKCgoKT0+cy52YWxpZGF0ZVN0YXRlfHxcIlwiKSksTT1sKCgoKT0+VnRbRS52YWx1ZV0pKSxUPWwoKCgpPT5PYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sZy52YWx1ZSkse3Jlc2l6ZTplLnJlc2l6ZX0pKSksTj1sKCgoKT0+ZS5kaXNhYmxlZHx8ci5kaXNhYmxlZCkpLEQ9bCgoKCk9Pm51bGw9PT1lLm1vZGVsVmFsdWV8fHZvaWQgMD09PWUubW9kZWxWYWx1ZT9cIlwiOlN0cmluZyhlLm1vZGVsVmFsdWUpKSksTz1sKCgoKT0+YS5hdHRycy5tYXhsZW5ndGgpKSxQPWwoKCgpPT5lLmNsZWFyYWJsZSYmIU4udmFsdWUmJiFlLnJlYWRvbmx5JiZELnZhbHVlJiYoYy52YWx1ZXx8cC52YWx1ZSkpKSxWPWwoKCgpPT5lLnNob3dQYXNzd29yZCYmIU4udmFsdWUmJiFlLnJlYWRvbmx5JiYoISFELnZhbHVlfHxjLnZhbHVlKSkpLEk9bCgoKCk9PmUuc2hvd1dvcmRMaW1pdCYmYS5hdHRycy5tYXhsZW5ndGgmJihcInRleHRcIj09PWUudHlwZXx8XCJ0ZXh0YXJlYVwiPT09ZS50eXBlKSYmIU4udmFsdWUmJiFlLnJlYWRvbmx5JiYhZS5zaG93UGFzc3dvcmQpKSxBPWwoKCgpPT5cIm51bWJlclwiPT10eXBlb2YgZS5tb2RlbFZhbHVlP1N0cmluZyhlLm1vZGVsVmFsdWUpLmxlbmd0aDooZS5tb2RlbFZhbHVlfHxcIlwiKS5sZW5ndGgpKSxCPWwoKCgpPT5JLnZhbHVlJiZBLnZhbHVlPk8udmFsdWUpKSxMPSgpPT57Y29uc3R7dHlwZTp0LGF1dG9zaXplOmx9PWU7aWYoIXplJiZcInRleHRhcmVhXCI9PT10KWlmKGwpe2NvbnN0IGU9RGUobCk/bC5taW5Sb3dzOnZvaWQgMCx0PURlKGwpP2wubWF4Um93czp2b2lkIDA7Zy52YWx1ZT1SdChkLnZhbHVlLGUsdCl9ZWxzZSBnLnZhbHVlPXttaW5IZWlnaHQ6UnQoZC52YWx1ZSkubWluSGVpZ2h0fX0sej0oKT0+e2NvbnN0IGU9Yi52YWx1ZTtlJiZlLnZhbHVlIT09RC52YWx1ZSYmKGUudmFsdWU9RC52YWx1ZSl9LEY9ZT0+e2NvbnN0e2VsOnR9PW4udm5vZGUsbD1BcnJheS5mcm9tKHQucXVlcnlTZWxlY3RvckFsbChcIi5lbC1pbnB1dF9fXCIrZSkpLmZpbmQoKGU9PmUucGFyZW50Tm9kZT09PXQpKTtpZighbClyZXR1cm47Y29uc3Qgbz1IdFtlXTthLnNsb3RzW29dP2wuc3R5bGUudHJhbnNmb3JtPWB0cmFuc2xhdGVYKCR7XCJzdWZmaXhcIj09PWU/XCItXCI6XCJcIn0ke3QucXVlcnlTZWxlY3RvcihcIi5lbC1pbnB1dC1ncm91cF9fXCIrbykub2Zmc2V0V2lkdGh9cHgpYDpsLnJlbW92ZUF0dHJpYnV0ZShcInN0eWxlXCIpfSwkPSgpPT57RihcInByZWZpeFwiKSxGKFwic3VmZml4XCIpfSxSPWU9Pntjb25zdHt2YWx1ZTp0fT1lLnRhcmdldDtoLnZhbHVlfHx0IT09RC52YWx1ZSYmKGEuZW1pdChQdCx0KSxhLmVtaXQoXCJpbnB1dFwiLHQpLGsoeikpfSxIPSgpPT57aygoKCk9PntiLnZhbHVlLmZvY3VzKCl9KSl9O3koKCgpPT5lLm1vZGVsVmFsdWUpLCh0PT57dmFyIGw7ayhMKSxlLnZhbGlkYXRlRXZlbnQmJihudWxsPT09KGw9cy5mb3JtSXRlbU1pdHQpfHx2b2lkIDA9PT1sfHxsLmVtaXQoXCJlbC5mb3JtLmNoYW5nZVwiLFt0XSkpfSkpLHkoRCwoKCk9Pnt6KCl9KSkseSgoKCk9PmUudHlwZSksKCgpPT57aygoKCk9Pnt6KCksTCgpLCQoKX0pKX0pKSxfKCgoKT0+e3ooKSwkKCksayhMKX0pKSxTKCgoKT0+e2soJCl9KSk7cmV0dXJue2lucHV0OnUsdGV4dGFyZWE6ZCxhdHRyczpvLGlucHV0U2l6ZTpDLHZhbGlkYXRlU3RhdGU6RSx2YWxpZGF0ZUljb246TSx0ZXh0YXJlYVN0eWxlOlQsaW5wdXREaXNhYmxlZDpOLHNob3dDbGVhcjpQLHNob3dQd2RWaXNpYmxlOlYsaXNXb3JkTGltaXRWaXNpYmxlOkksdXBwZXJMaW1pdDpPLHRleHRMZW5ndGg6QSxob3ZlcmluZzpwLGlucHV0RXhjZWVkOkIscGFzc3dvcmRWaXNpYmxlOmYsaW5wdXRPclRleHRhcmVhOmIsaGFuZGxlSW5wdXQ6UixoYW5kbGVDaGFuZ2U6ZT0+e2EuZW1pdChcImNoYW5nZVwiLGUudGFyZ2V0LnZhbHVlKX0saGFuZGxlRm9jdXM6ZT0+e2MudmFsdWU9ITAsYS5lbWl0KFwiZm9jdXNcIixlKX0saGFuZGxlQmx1cjp0PT57dmFyIGw7Yy52YWx1ZT0hMSxhLmVtaXQoXCJibHVyXCIsdCksZS52YWxpZGF0ZUV2ZW50JiYobnVsbD09PShsPXMuZm9ybUl0ZW1NaXR0KXx8dm9pZCAwPT09bHx8bC5lbWl0KFwiZWwuZm9ybS5ibHVyXCIsW2UubW9kZWxWYWx1ZV0pKX0saGFuZGxlQ29tcG9zaXRpb25TdGFydDooKT0+e2gudmFsdWU9ITB9LGhhbmRsZUNvbXBvc2l0aW9uVXBkYXRlOmU9Pntjb25zdCB0PWUudGFyZ2V0LnZhbHVlLGw9dFt0Lmxlbmd0aC0xXXx8XCJcIjtoLnZhbHVlPSFJdChsKX0saGFuZGxlQ29tcG9zaXRpb25FbmQ6ZT0+e2gudmFsdWUmJihoLnZhbHVlPSExLFIoZSkpfSxoYW5kbGVQYXNzd29yZFZpc2libGU6KCk9PntmLnZhbHVlPSFmLnZhbHVlLEgoKX0sY2xlYXI6KCk9PnthLmVtaXQoUHQsXCJcIiksYS5lbWl0KFwiY2hhbmdlXCIsXCJcIiksYS5lbWl0KFwiY2xlYXJcIil9LHNlbGVjdDooKT0+e2IudmFsdWUuc2VsZWN0KCl9LGZvY3VzOkgsYmx1cjooKT0+e2IudmFsdWUuYmx1cigpfSxnZXRTdWZmaXhWaXNpYmxlOigpPT5hLnNsb3RzLnN1ZmZpeHx8ZS5zdWZmaXhJY29ufHxQLnZhbHVlfHxlLnNob3dQYXNzd29yZHx8SS52YWx1ZXx8RS52YWx1ZSYmeC52YWx1ZSxvbk1vdXNlTGVhdmU6ZT0+e3AudmFsdWU9ITEsYS5lbWl0KFwibW91c2VsZWF2ZVwiLGUpfSxvbk1vdXNlRW50ZXI6ZT0+e3AudmFsdWU9ITAsYS5lbWl0KFwibW91c2VlbnRlclwiLGUpfSxoYW5kbGVLZXlkb3duOmU9PnthLmVtaXQoXCJrZXlkb3duXCIsZSl9fX19KTtjb25zdCBqdD17a2V5OjAsY2xhc3M6XCJlbC1pbnB1dC1ncm91cF9fcHJlcGVuZFwifSxLdD17a2V5OjIsY2xhc3M6XCJlbC1pbnB1dF9fcHJlZml4XCJ9LFl0PXtrZXk6MyxjbGFzczpcImVsLWlucHV0X19zdWZmaXhcIn0scXQ9e2NsYXNzOlwiZWwtaW5wdXRfX3N1ZmZpeC1pbm5lclwifSxVdD17a2V5OjMsY2xhc3M6XCJlbC1pbnB1dF9fY291bnRcIn0sR3Q9e2NsYXNzOlwiZWwtaW5wdXRfX2NvdW50LWlubmVyXCJ9LFh0PXtrZXk6NCxjbGFzczpcImVsLWlucHV0LWdyb3VwX19hcHBlbmRcIn0sUXQ9e2tleToyLGNsYXNzOlwiZWwtaW5wdXRfX2NvdW50XCJ9O1d0LnJlbmRlcj1mdW5jdGlvbihlLHQsbCxvLGkscil7cmV0dXJuIGEoKSxuKFwiZGl2XCIse2NsYXNzOltcInRleHRhcmVhXCI9PT1lLnR5cGU/XCJlbC10ZXh0YXJlYVwiOlwiZWwtaW5wdXRcIixlLmlucHV0U2l6ZT9cImVsLWlucHV0LS1cIitlLmlucHV0U2l6ZTpcIlwiLHtcImlzLWRpc2FibGVkXCI6ZS5pbnB1dERpc2FibGVkLFwiaXMtZXhjZWVkXCI6ZS5pbnB1dEV4Y2VlZCxcImVsLWlucHV0LWdyb3VwXCI6ZS4kc2xvdHMucHJlcGVuZHx8ZS4kc2xvdHMuYXBwZW5kLFwiZWwtaW5wdXQtZ3JvdXAtLWFwcGVuZFwiOmUuJHNsb3RzLmFwcGVuZCxcImVsLWlucHV0LWdyb3VwLS1wcmVwZW5kXCI6ZS4kc2xvdHMucHJlcGVuZCxcImVsLWlucHV0LS1wcmVmaXhcIjplLiRzbG90cy5wcmVmaXh8fGUucHJlZml4SWNvbixcImVsLWlucHV0LS1zdWZmaXhcIjplLiRzbG90cy5zdWZmaXh8fGUuc3VmZml4SWNvbnx8ZS5jbGVhcmFibGV8fGUuc2hvd1Bhc3N3b3JkfSxlLiRhdHRycy5jbGFzc10sc3R5bGU6ZS4kYXR0cnMuc3R5bGUsb25Nb3VzZWVudGVyOnRbMTldfHwodFsxOV09KC4uLnQpPT5lLm9uTW91c2VFbnRlciguLi50KSksb25Nb3VzZWxlYXZlOnRbMjBdfHwodFsyMF09KC4uLnQpPT5lLm9uTW91c2VMZWF2ZSguLi50KSl9LFtcInRleHRhcmVhXCIhPT1lLnR5cGU/KGEoKSxuKEUse2tleTowfSxbdShcIiDliY3nva7lhYPntKAgXCIpLGUuJHNsb3RzLnByZXBlbmQ/KGEoKSxuKFwiZGl2XCIsanQsW2QoZS4kc2xvdHMsXCJwcmVwZW5kXCIpXSkpOnUoXCJ2LWlmXCIsITApLFwidGV4dGFyZWFcIiE9PWUudHlwZT8oYSgpLG4oXCJpbnB1dFwiLE0oe2tleToxLHJlZjpcImlucHV0XCIsY2xhc3M6XCJlbC1pbnB1dF9faW5uZXJcIn0sZS5hdHRycyx7dHlwZTplLnNob3dQYXNzd29yZD9lLnBhc3N3b3JkVmlzaWJsZT9cInRleHRcIjpcInBhc3N3b3JkXCI6ZS50eXBlLGRpc2FibGVkOmUuaW5wdXREaXNhYmxlZCxyZWFkb25seTplLnJlYWRvbmx5LGF1dG9jb21wbGV0ZTplLmF1dG9jb21wbGV0ZSx0YWJpbmRleDplLnRhYmluZGV4LFwiYXJpYS1sYWJlbFwiOmUubGFiZWwscGxhY2Vob2xkZXI6ZS5wbGFjZWhvbGRlcixvbkNvbXBvc2l0aW9uc3RhcnQ6dFsxXXx8KHRbMV09KC4uLnQpPT5lLmhhbmRsZUNvbXBvc2l0aW9uU3RhcnQoLi4udCkpLG9uQ29tcG9zaXRpb251cGRhdGU6dFsyXXx8KHRbMl09KC4uLnQpPT5lLmhhbmRsZUNvbXBvc2l0aW9uVXBkYXRlKC4uLnQpKSxvbkNvbXBvc2l0aW9uZW5kOnRbM118fCh0WzNdPSguLi50KT0+ZS5oYW5kbGVDb21wb3NpdGlvbkVuZCguLi50KSksb25JbnB1dDp0WzRdfHwodFs0XT0oLi4udCk9PmUuaGFuZGxlSW5wdXQoLi4udCkpLG9uRm9jdXM6dFs1XXx8KHRbNV09KC4uLnQpPT5lLmhhbmRsZUZvY3VzKC4uLnQpKSxvbkJsdXI6dFs2XXx8KHRbNl09KC4uLnQpPT5lLmhhbmRsZUJsdXIoLi4udCkpLG9uQ2hhbmdlOnRbN118fCh0WzddPSguLi50KT0+ZS5oYW5kbGVDaGFuZ2UoLi4udCkpLG9uS2V5ZG93bjp0WzhdfHwodFs4XT0oLi4udCk9PmUuaGFuZGxlS2V5ZG93biguLi50KSl9KSxudWxsLDE2LFtcInR5cGVcIixcImRpc2FibGVkXCIsXCJyZWFkb25seVwiLFwiYXV0b2NvbXBsZXRlXCIsXCJ0YWJpbmRleFwiLFwiYXJpYS1sYWJlbFwiLFwicGxhY2Vob2xkZXJcIl0pKTp1KFwidi1pZlwiLCEwKSx1KFwiIOWJjee9ruWGheWuuSBcIiksZS4kc2xvdHMucHJlZml4fHxlLnByZWZpeEljb24/KGEoKSxuKFwic3BhblwiLEt0LFtkKGUuJHNsb3RzLFwicHJlZml4XCIpLGUucHJlZml4SWNvbj8oYSgpLG4oXCJpXCIse2tleTowLGNsYXNzOltcImVsLWlucHV0X19pY29uXCIsZS5wcmVmaXhJY29uXX0sbnVsbCwyKSk6dShcInYtaWZcIiwhMCldKSk6dShcInYtaWZcIiwhMCksdShcIiDlkI7nva7lhoXlrrkgXCIpLGUuZ2V0U3VmZml4VmlzaWJsZSgpPyhhKCksbihcInNwYW5cIixZdCxbcyhcInNwYW5cIixxdCxbZS5zaG93Q2xlYXImJmUuc2hvd1B3ZFZpc2libGUmJmUuaXNXb3JkTGltaXRWaXNpYmxlP3UoXCJ2LWlmXCIsITApOihhKCksbihFLHtrZXk6MH0sW2QoZS4kc2xvdHMsXCJzdWZmaXhcIiksZS5zdWZmaXhJY29uPyhhKCksbihcImlcIix7a2V5OjAsY2xhc3M6W1wiZWwtaW5wdXRfX2ljb25cIixlLnN1ZmZpeEljb25dfSxudWxsLDIpKTp1KFwidi1pZlwiLCEwKV0sNjQpKSxlLnNob3dDbGVhcj8oYSgpLG4oXCJpXCIse2tleToxLGNsYXNzOlwiZWwtaW5wdXRfX2ljb24gZWwtaWNvbi1jaXJjbGUtY2xvc2UgZWwtaW5wdXRfX2NsZWFyXCIsb25Nb3VzZWRvd246dFs5XXx8KHRbOV09VCgoKCk9Pnt9KSxbXCJwcmV2ZW50XCJdKSksb25DbGljazp0WzEwXXx8KHRbMTBdPSguLi50KT0+ZS5jbGVhciguLi50KSl9LG51bGwsMzIpKTp1KFwidi1pZlwiLCEwKSxlLnNob3dQd2RWaXNpYmxlPyhhKCksbihcImlcIix7a2V5OjIsY2xhc3M6XCJlbC1pbnB1dF9faWNvbiBlbC1pY29uLXZpZXcgZWwtaW5wdXRfX2NsZWFyXCIsb25DbGljazp0WzExXXx8KHRbMTFdPSguLi50KT0+ZS5oYW5kbGVQYXNzd29yZFZpc2libGUoLi4udCkpfSkpOnUoXCJ2LWlmXCIsITApLGUuaXNXb3JkTGltaXRWaXNpYmxlPyhhKCksbihcInNwYW5cIixVdCxbcyhcInNwYW5cIixHdCxwKGUudGV4dExlbmd0aCkrXCIvXCIrcChlLnVwcGVyTGltaXQpLDEpXSkpOnUoXCJ2LWlmXCIsITApXSksZS52YWxpZGF0ZVN0YXRlPyhhKCksbihcImlcIix7a2V5OjAsY2xhc3M6W1wiZWwtaW5wdXRfX2ljb25cIixcImVsLWlucHV0X192YWxpZGF0ZUljb25cIixlLnZhbGlkYXRlSWNvbl19LG51bGwsMikpOnUoXCJ2LWlmXCIsITApXSkpOnUoXCJ2LWlmXCIsITApLHUoXCIg5ZCO572u5YWD57SgIFwiKSxlLiRzbG90cy5hcHBlbmQ/KGEoKSxuKFwiZGl2XCIsWHQsW2QoZS4kc2xvdHMsXCJhcHBlbmRcIildKSk6dShcInYtaWZcIiwhMCldLDY0KSk6KGEoKSxuKFwidGV4dGFyZWFcIixNKHtrZXk6MSxyZWY6XCJ0ZXh0YXJlYVwiLGNsYXNzOlwiZWwtdGV4dGFyZWFfX2lubmVyXCJ9LGUuYXR0cnMse3RhYmluZGV4OmUudGFiaW5kZXgsZGlzYWJsZWQ6ZS5pbnB1dERpc2FibGVkLHJlYWRvbmx5OmUucmVhZG9ubHksYXV0b2NvbXBsZXRlOmUuYXV0b2NvbXBsZXRlLHN0eWxlOmUudGV4dGFyZWFTdHlsZSxcImFyaWEtbGFiZWxcIjplLmxhYmVsLG9uQ29tcG9zaXRpb25zdGFydDp0WzEyXXx8KHRbMTJdPSguLi50KT0+ZS5oYW5kbGVDb21wb3NpdGlvblN0YXJ0KC4uLnQpKSxvbkNvbXBvc2l0aW9udXBkYXRlOnRbMTNdfHwodFsxM109KC4uLnQpPT5lLmhhbmRsZUNvbXBvc2l0aW9uVXBkYXRlKC4uLnQpKSxvbkNvbXBvc2l0aW9uZW5kOnRbMTRdfHwodFsxNF09KC4uLnQpPT5lLmhhbmRsZUNvbXBvc2l0aW9uRW5kKC4uLnQpKSxvbklucHV0OnRbMTVdfHwodFsxNV09KC4uLnQpPT5lLmhhbmRsZUlucHV0KC4uLnQpKSxvbkZvY3VzOnRbMTZdfHwodFsxNl09KC4uLnQpPT5lLmhhbmRsZUZvY3VzKC4uLnQpKSxvbkJsdXI6dFsxN118fCh0WzE3XT0oLi4udCk9PmUuaGFuZGxlQmx1ciguLi50KSksb25DaGFuZ2U6dFsxOF18fCh0WzE4XT0oLi4udCk9PmUuaGFuZGxlQ2hhbmdlKC4uLnQpKX0pLG51bGwsMTYsW1widGFiaW5kZXhcIixcImRpc2FibGVkXCIsXCJyZWFkb25seVwiLFwiYXV0b2NvbXBsZXRlXCIsXCJhcmlhLWxhYmVsXCJdKSksZS5pc1dvcmRMaW1pdFZpc2libGUmJlwidGV4dGFyZWFcIj09PWUudHlwZT8oYSgpLG4oXCJzcGFuXCIsUXQscChlLnRleHRMZW5ndGgpK1wiL1wiK3AoZS51cHBlckxpbWl0KSwxKSk6dShcInYtaWZcIiwhMCldLDM4KX0sV3QuX19maWxlPVwicGFja2FnZXMvaW5wdXQvc3JjL2luZGV4LnZ1ZVwiLFd0Lmluc3RhbGw9ZT0+e2UuY29tcG9uZW50KFd0Lm5hbWUsV3QpfTtjb25zdCBadD1mdW5jdGlvbihlKXtmb3IoY29uc3QgdCBvZiBlKXtjb25zdCBlPXQudGFyZ2V0Ll9fcmVzaXplTGlzdGVuZXJzX198fFtdO2UubGVuZ3RoJiZlLmZvckVhY2goKGU9PntlKCl9KSl9fSxKdD1mdW5jdGlvbihlLHQpeyF6ZSYmZSYmKGUuX19yZXNpemVMaXN0ZW5lcnNfX3x8KGUuX19yZXNpemVMaXN0ZW5lcnNfXz1bXSxlLl9fcm9fXz1uZXcgb2UoWnQpLGUuX19yb19fLm9ic2VydmUoZSkpLGUuX19yZXNpemVMaXN0ZW5lcnNfXy5wdXNoKHQpKX0sZWw9ZnVuY3Rpb24oZSx0KXtlJiZlLl9fcmVzaXplTGlzdGVuZXJzX18mJihlLl9fcmVzaXplTGlzdGVuZXJzX18uc3BsaWNlKGUuX19yZXNpemVMaXN0ZW5lcnNfXy5pbmRleE9mKHQpLDEpLGUuX19yZXNpemVMaXN0ZW5lcnNfXy5sZW5ndGh8fGUuX19yb19fLmRpc2Nvbm5lY3QoKSl9LHRsPXt2ZXJ0aWNhbDp7b2Zmc2V0Olwib2Zmc2V0SGVpZ2h0XCIsc2Nyb2xsOlwic2Nyb2xsVG9wXCIsc2Nyb2xsU2l6ZTpcInNjcm9sbEhlaWdodFwiLHNpemU6XCJoZWlnaHRcIixrZXk6XCJ2ZXJ0aWNhbFwiLGF4aXM6XCJZXCIsY2xpZW50OlwiY2xpZW50WVwiLGRpcmVjdGlvbjpcInRvcFwifSxob3Jpem9udGFsOntvZmZzZXQ6XCJvZmZzZXRXaWR0aFwiLHNjcm9sbDpcInNjcm9sbExlZnRcIixzY3JvbGxTaXplOlwic2Nyb2xsV2lkdGhcIixzaXplOlwid2lkdGhcIixrZXk6XCJob3Jpem9udGFsXCIsYXhpczpcIlhcIixjbGllbnQ6XCJjbGllbnRYXCIsZGlyZWN0aW9uOlwibGVmdFwifX07ZnVuY3Rpb24gbGwoe21vdmU6ZSxzaXplOnQsYmFyOmx9KXtjb25zdCBhPXt9LG49YHRyYW5zbGF0ZSR7bC5heGlzfSgke2V9JSlgO3JldHVybiBhW2wuc2l6ZV09dCxhLnRyYW5zZm9ybT1uLGEubXNUcmFuc2Zvcm09bixhLndlYmtpdFRyYW5zZm9ybT1uLGF9dmFyIGFsPWUoe25hbWU6XCJCYXJcIixwcm9wczp7dmVydGljYWw6Qm9vbGVhbixzaXplOlN0cmluZyxtb3ZlOk51bWJlcn0sc2V0dXAoZSl7Y29uc3QgYT12KCksbj10KG51bGwpLG89dyhcInNjcm9sbC1iYXItd3JhcFwiLHt9KSxpPWwoKCgpPT50bFtlLnZlcnRpY2FsP1widmVydGljYWxcIjpcImhvcml6b250YWxcIl0pKSxyPXQoe30pLHM9dChudWxsKSx1PWU9PntlLmN0cmxLZXl8fDI9PT1lLmJ1dHRvbnx8KGMoZSksci52YWx1ZVtpLnZhbHVlLmF4aXNdPWUuY3VycmVudFRhcmdldFtpLnZhbHVlLm9mZnNldF0tKGVbaS52YWx1ZS5jbGllbnRdLWUuY3VycmVudFRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVtpLnZhbHVlLmRpcmVjdGlvbl0pKX0sZD1lPT57Y29uc3QgdD0xMDAqKE1hdGguYWJzKGUudGFyZ2V0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpW2kudmFsdWUuZGlyZWN0aW9uXS1lW2kudmFsdWUuY2xpZW50XSktbi52YWx1ZVtpLnZhbHVlLm9mZnNldF0vMikvYS52bm9kZS5lbFtpLnZhbHVlLm9mZnNldF07by52YWx1ZVtpLnZhbHVlLnNjcm9sbF09dCpvLnZhbHVlW2kudmFsdWUuc2Nyb2xsU2l6ZV0vMTAwfSxjPWU9PntlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpLHMudmFsdWU9ITAsbHQoZG9jdW1lbnQsXCJtb3VzZW1vdmVcIixwKSxsdChkb2N1bWVudCxcIm1vdXNldXBcIixoKSxkb2N1bWVudC5vbnNlbGVjdHN0YXJ0PSgpPT4hMX0scD1lPT57aWYoITE9PT1zLnZhbHVlKXJldHVybjtjb25zdCB0PXIudmFsdWVbaS52YWx1ZS5heGlzXTtpZighdClyZXR1cm47Y29uc3QgbD0xMDAqKC0xKihhLnZub2RlLmVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpW2kudmFsdWUuZGlyZWN0aW9uXS1lW2kudmFsdWUuY2xpZW50XSktKG4udmFsdWVbaS52YWx1ZS5vZmZzZXRdLXQpKS9hLnZub2RlLmVsW2kudmFsdWUub2Zmc2V0XTtvLnZhbHVlW2kudmFsdWUuc2Nyb2xsXT1sKm8udmFsdWVbaS52YWx1ZS5zY3JvbGxTaXplXS8xMDB9O2Z1bmN0aW9uIGgoKXtzLnZhbHVlPSExLHIudmFsdWVbaS52YWx1ZS5heGlzXT0wLGF0KGRvY3VtZW50LFwibW91c2Vtb3ZlXCIscCksZG9jdW1lbnQub25zZWxlY3RzdGFydD1udWxsfXJldHVybiBOKCgoKT0+e2F0KGRvY3VtZW50LFwibW91c2V1cFwiLGgpfSkpLCgpPT5EKFwiZGl2XCIse2NsYXNzOltcImVsLXNjcm9sbGJhcl9fYmFyXCIsXCJpcy1cIitpLnZhbHVlLmtleV0sb25Nb3VzZWRvd246ZH0sRChcImRpdlwiLHtyZWY6bixjbGFzczpcImVsLXNjcm9sbGJhcl9fdGh1bWJcIixvbk1vdXNlZG93bjp1LHN0eWxlOmxsKHtzaXplOmUuc2l6ZSxtb3ZlOmUubW92ZSxiYXI6aS52YWx1ZX0pfSkpfX0pLG5sPWUoe25hbWU6XCJFbFNjcm9sbGJhclwiLGNvbXBvbmVudHM6e0JhcjphbH0scHJvcHM6e25hdGl2ZTp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITF9LHdyYXBTdHlsZTp7dHlwZTpbU3RyaW5nLEFycmF5XSxkZWZhdWx0OlwiXCJ9LHdyYXBDbGFzczp7dHlwZTpbU3RyaW5nLEFycmF5XSxkZWZhdWx0OlwiXCJ9LHZpZXdDbGFzczp7dHlwZTpbU3RyaW5nLEFycmF5XSxkZWZhdWx0OlwiXCJ9LHZpZXdTdHlsZTp7dHlwZTpbU3RyaW5nLEFycmF5XSxkZWZhdWx0OlwiXCJ9LG5vcmVzaXplOkJvb2xlYW4sdGFnOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiZGl2XCJ9fSxzZXR1cChlKXtjb25zdCBhPXQoXCIwXCIpLG49dChcIjBcIiksbz10KDApLGk9dCgwKSxyPXQobnVsbCkscz10KG51bGwpO3goXCJzY3JvbGwtYmFyLXdyYXBcIixyKTtjb25zdCB1PSgpPT57aWYoIXIudmFsdWUpcmV0dXJuO2NvbnN0IGU9MTAwKnIudmFsdWUuY2xpZW50SGVpZ2h0L3IudmFsdWUuc2Nyb2xsSGVpZ2h0LHQ9MTAwKnIudmFsdWUuY2xpZW50V2lkdGgvci52YWx1ZS5zY3JvbGxXaWR0aDtuLnZhbHVlPWU8MTAwP2UrXCIlXCI6XCJcIixhLnZhbHVlPXQ8MTAwP3QrXCIlXCI6XCJcIn07XygoKCk9PntlLm5hdGl2ZXx8KGsodSksIWUubm9yZXNpemUmJkp0KHMudmFsdWUsdSkpfSkpLE8oKCgpPT57ZS5uYXRpdmV8fCFlLm5vcmVzaXplJiZlbChzLnZhbHVlLHUpfSkpO2NvbnN0IGQ9bCgoKCk9Pmh0KCkpKSxjPWwoKCgpPT57Y29uc3QgdD1odCgpO2xldCBsPWUud3JhcFN0eWxlO2lmKHQpe2NvbnN0IGE9YC0ke3R9cHhgLG49YG1hcmdpbi1ib3R0b206ICR7YX07IG1hcmdpbi1yaWdodDogJHthfTtgO0FycmF5LmlzQXJyYXkoZS53cmFwU3R5bGUpPyhsPWZ1bmN0aW9uKGUpe2NvbnN0IHQ9e307Zm9yKGxldCBsPTA7bDxlLmxlbmd0aDtsKyspZVtsXSYmRWUodCxlW2xdKTtyZXR1cm4gdH0oZS53cmFwU3R5bGUpLGwubWFyZ2luUmlnaHQ9bC5tYXJnaW5Cb3R0b209YSk6XCJzdHJpbmdcIj09dHlwZW9mIGUud3JhcFN0eWxlP2wrPW46bD1ufXJldHVybiBsfSkpO3JldHVybnttb3ZlWDpvLG1vdmVZOmksc2l6ZVdpZHRoOmEsc2l6ZUhlaWdodDpuLHN0eWxlOmMsZ3V0dGVyOmQsd3JhcDpyLHJlc2l6ZTpzLHVwZGF0ZTp1LGhhbmRsZVNjcm9sbDooKT0+e2UubmF0aXZlfHwoaS52YWx1ZT0xMDAqci52YWx1ZS5zY3JvbGxUb3Avci52YWx1ZS5jbGllbnRIZWlnaHQsby52YWx1ZT0xMDAqci52YWx1ZS5zY3JvbGxMZWZ0L3IudmFsdWUuY2xpZW50V2lkdGgpfX19fSk7Y29uc3Qgb2w9e2NsYXNzOlwiZWwtc2Nyb2xsYmFyXCJ9O25sLnJlbmRlcj1mdW5jdGlvbihlLHQsbCxvLHIsYyl7Y29uc3QgcD1QKFwiYmFyXCIpO3JldHVybiBhKCksbihcImRpdlwiLG9sLFtzKFwiZGl2XCIse3JlZjpcIndyYXBcIixjbGFzczpbZS53cmFwQ2xhc3MsXCJlbC1zY3JvbGxiYXJfX3dyYXBcIixlLm5hdGl2ZT9cIlwiOlwiZWwtc2Nyb2xsYmFyX193cmFwLS1oaWRkZW4tZGVmYXVsdFwiXSxzdHlsZTplLnN0eWxlLG9uU2Nyb2xsOnRbMV18fCh0WzFdPSguLi50KT0+ZS5oYW5kbGVTY3JvbGwoLi4udCkpfSxbKGEoKSxuKFYoZS50YWcpLHtyZWY6XCJyZXNpemVcIixjbGFzczpbXCJlbC1zY3JvbGxiYXJfX3ZpZXdcIixlLnZpZXdDbGFzc10sc3R5bGU6ZS52aWV3U3R5bGV9LHtkZWZhdWx0OmkoKCgpPT5bZChlLiRzbG90cyxcImRlZmF1bHRcIildKSksXzozfSw4LFtcImNsYXNzXCIsXCJzdHlsZVwiXSkpXSwzOCksZS5uYXRpdmU/dShcInYtaWZcIiwhMCk6KGEoKSxuKEUse2tleTowfSxbcyhwLHttb3ZlOmUubW92ZVgsc2l6ZTplLnNpemVXaWR0aH0sbnVsbCw4LFtcIm1vdmVcIixcInNpemVcIl0pLHMocCx7dmVydGljYWw6XCJcIixtb3ZlOmUubW92ZVksc2l6ZTplLnNpemVIZWlnaHR9LG51bGwsOCxbXCJtb3ZlXCIsXCJzaXplXCJdKV0sNjQpKV0pfSxubC5fX2ZpbGU9XCJwYWNrYWdlcy9zY3JvbGxiYXIvc3JjL2luZGV4LnZ1ZVwiLG5sLmluc3RhbGw9ZT0+e2UuY29tcG9uZW50KG5sLm5hbWUsbmwpfTt2YXIgaWw7IWZ1bmN0aW9uKGUpe2VbZS5URVhUPTFdPVwiVEVYVFwiLGVbZS5DTEFTUz0yXT1cIkNMQVNTXCIsZVtlLlNUWUxFPTRdPVwiU1RZTEVcIixlW2UuUFJPUFM9OF09XCJQUk9QU1wiLGVbZS5GVUxMX1BST1BTPTE2XT1cIkZVTExfUFJPUFNcIixlW2UuSFlEUkFURV9FVkVOVFM9MzJdPVwiSFlEUkFURV9FVkVOVFNcIixlW2UuU1RBQkxFX0ZSQUdNRU5UPTY0XT1cIlNUQUJMRV9GUkFHTUVOVFwiLGVbZS5LRVlFRF9GUkFHTUVOVD0xMjhdPVwiS0VZRURfRlJBR01FTlRcIixlW2UuVU5LRVlFRF9GUkFHTUVOVD0yNTZdPVwiVU5LRVlFRF9GUkFHTUVOVFwiLGVbZS5ORUVEX1BBVENIPTUxMl09XCJORUVEX1BBVENIXCIsZVtlLkRZTkFNSUNfU0xPVFM9MTAyNF09XCJEWU5BTUlDX1NMT1RTXCIsZVtlLkhPSVNURUQ9LTFdPVwiSE9JU1RFRFwiLGVbZS5CQUlMPS0yXT1cIkJBSUxcIn0oaWx8fChpbD17fSkpO2Z1bmN0aW9uIHJsKGUsdCl7aWYoIShlPT5lLnR5cGU9PT1JKShlKSlyZXR1cm4oZT0+ZS50eXBlPT09RSkoZSl8fChlPT5cInRlbXBsYXRlXCI9PT1lLnR5cGUpKGUpP3Q+MD9zbChlLmNoaWxkcmVuLHQtMSk6dm9pZCAwOmV9Y29uc3Qgc2w9KGUsdD0zKT0+QXJyYXkuaXNBcnJheShlKT9ybChlWzBdLHQpOnJsKGUsdCk7ZnVuY3Rpb24gdWwoZSx0LGwsbyxpKXtyZXR1cm4gYSgpLG4oZSx0LGwsbyxpKX1sZXQgZGw9e307Y29uc3QgY2w9ZT0+e2UucHJldmVudERlZmF1bHQoKSxlLnN0b3BQcm9wYWdhdGlvbigpfSxwbD0oKT0+e251bGw9PWdsfHxnbC5kb09uTW9kYWxDbGljaygpfTtsZXQgaGwsdmw9ITE7Y29uc3QgbWw9ZnVuY3Rpb24oKXtpZih6ZSlyZXR1cm47bGV0IGU9Z2wubW9kYWxEb207cmV0dXJuIGU/dmw9ITA6KHZsPSExLGU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSxnbC5tb2RhbERvbT1lLGx0KGUsXCJ0b3VjaG1vdmVcIixjbCksbHQoZSxcImNsaWNrXCIscGwpKSxlfSxmbD17fSxnbD17bW9kYWxGYWRlOiEwLG1vZGFsRG9tOnZvaWQgMCx6SW5kZXg6aGwsZ2V0SW5zdGFuY2U6ZnVuY3Rpb24oZSl7cmV0dXJuIGZsW2VdfSxyZWdpc3RlcjpmdW5jdGlvbihlLHQpe2UmJnQmJihmbFtlXT10KX0sZGVyZWdpc3RlcjpmdW5jdGlvbihlKXtlJiYoZmxbZV09bnVsbCxkZWxldGUgZmxbZV0pfSxuZXh0WkluZGV4OmZ1bmN0aW9uKCl7cmV0dXJuKytnbC56SW5kZXh9LG1vZGFsU3RhY2s6W10sZG9Pbk1vZGFsQ2xpY2s6ZnVuY3Rpb24oKXtjb25zdCBlPWdsLm1vZGFsU3RhY2tbZ2wubW9kYWxTdGFjay5sZW5ndGgtMV07aWYoIWUpcmV0dXJuO2NvbnN0IHQ9Z2wuZ2V0SW5zdGFuY2UoZS5pZCk7dCYmdC5jbG9zZU9uQ2xpY2tNb2RhbC52YWx1ZSYmdC5jbG9zZSgpfSxvcGVuTW9kYWw6ZnVuY3Rpb24oZSx0LGwsYSxuKXtpZih6ZSlyZXR1cm47aWYoIWV8fHZvaWQgMD09PXQpcmV0dXJuO3RoaXMubW9kYWxGYWRlPW47Y29uc3Qgbz10aGlzLm1vZGFsU3RhY2s7Zm9yKGxldCB0PTAsbD1vLmxlbmd0aDt0PGw7dCsrKXtpZihvW3RdLmlkPT09ZSlyZXR1cm59Y29uc3QgaT1tbCgpO2lmKG90KGksXCJ2LW1vZGFsXCIpLHRoaXMubW9kYWxGYWRlJiYhdmwmJm90KGksXCJ2LW1vZGFsLWVudGVyXCIpLGEpe2EudHJpbSgpLnNwbGl0KC9cXHMrLykuZm9yRWFjaCgoZT0+b3QoaSxlKSkpfXNldFRpbWVvdXQoKCgpPT57aXQoaSxcInYtbW9kYWwtZW50ZXJcIil9KSwyMDApLGwmJmwucGFyZW50Tm9kZSYmMTEhPT1sLnBhcmVudE5vZGUubm9kZVR5cGU/bC5wYXJlbnROb2RlLmFwcGVuZENoaWxkKGkpOmRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoaSksdCYmKGkuc3R5bGUuekluZGV4PVN0cmluZyh0KSksaS50YWJJbmRleD0wLGkuc3R5bGUuZGlzcGxheT1cIlwiLHRoaXMubW9kYWxTdGFjay5wdXNoKHtpZDplLHpJbmRleDp0LG1vZGFsQ2xhc3M6YX0pfSxjbG9zZU1vZGFsOmZ1bmN0aW9uKGUpe2NvbnN0IHQ9dGhpcy5tb2RhbFN0YWNrLGw9bWwoKTtpZih0Lmxlbmd0aD4wKXtjb25zdCBhPXRbdC5sZW5ndGgtMV07aWYoYS5pZD09PWUpe2lmKGEubW9kYWxDbGFzcyl7YS5tb2RhbENsYXNzLnRyaW0oKS5zcGxpdCgvXFxzKy8pLmZvckVhY2goKGU9Pml0KGwsZSkpKX10LnBvcCgpLHQubGVuZ3RoPjAmJihsLnN0eWxlLnpJbmRleD10W3QubGVuZ3RoLTFdLnpJbmRleCl9ZWxzZSBmb3IobGV0IGw9dC5sZW5ndGgtMTtsPj0wO2wtLSlpZih0W2xdLmlkPT09ZSl7dC5zcGxpY2UobCwxKTticmVha319MD09PXQubGVuZ3RoJiYodGhpcy5tb2RhbEZhZGUmJm90KGwsXCJ2LW1vZGFsLWxlYXZlXCIpLHNldFRpbWVvdXQoKCgpPT57MD09PXQubGVuZ3RoJiYobC5wYXJlbnROb2RlJiZsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobCksbC5zdHlsZS5kaXNwbGF5PVwibm9uZVwiLGdsLm1vZGFsRG9tPXZvaWQgMCksaXQobCxcInYtbW9kYWwtbGVhdmVcIil9KSwyMDApKX19O09iamVjdC5kZWZpbmVQcm9wZXJ0eShnbCxcInpJbmRleFwiLHtjb25maWd1cmFibGU6ITAsZ2V0OigpPT4odm9pZCAwPT09aGwmJihobD1kbFtcInpJbmRleFwiXXx8MmUzKSxobCksc2V0KGUpe2hsPWV9fSk7ZnVuY3Rpb24gYmwoZSx0PVtdKXtjb25zdHthcnJvdzpsLGFycm93T2Zmc2V0OmEsb2Zmc2V0Om4sZ3B1QWNjZWxlcmF0aW9uOm99PWUsaT1be25hbWU6XCJvZmZzZXRcIixvcHRpb25zOntvZmZzZXQ6WzAsbnVsbCE9bj9uOjEyXX19LHtuYW1lOlwicHJldmVudE92ZXJmbG93XCIsb3B0aW9uczp7cGFkZGluZzp7dG9wOjIsYm90dG9tOjIsbGVmdDo1LHJpZ2h0OjV9fX0se25hbWU6XCJmbGlwXCIsb3B0aW9uczp7cGFkZGluZzo1fX0se25hbWU6XCJjb21wdXRlU3R5bGVzXCIsb3B0aW9uczp7Z3B1QWNjZWxlcmF0aW9uOm8sYWRhcHRpdmU6b319XTtyZXR1cm4gbCYmaS5wdXNoKHtuYW1lOlwiYXJyb3dcIixvcHRpb25zOntlbGVtZW50OmwscGFkZGluZzpudWxsIT1hP2E6NX19KSxpLnB1c2goLi4udCksaX12YXIgeWw7emV8fGx0KHdpbmRvdyxcImtleWRvd25cIiwoZnVuY3Rpb24oZSl7aWYoZS5jb2RlPT09ZnQuZXNjKXtjb25zdCBlPWZ1bmN0aW9uKCl7aWYoIXplJiZnbC5tb2RhbFN0YWNrLmxlbmd0aD4wKXtjb25zdCBlPWdsLm1vZGFsU3RhY2tbZ2wubW9kYWxTdGFjay5sZW5ndGgtMV07aWYoIWUpcmV0dXJuO3JldHVybiBnbC5nZXRJbnN0YW5jZShlLmlkKX19KCk7ZSYmZS5jbG9zZU9uUHJlc3NFc2NhcGUudmFsdWUmJihlLmhhbmRsZUNsb3NlP2UuaGFuZGxlQ2xvc2UoKTplLmhhbmRsZUFjdGlvbj9lLmhhbmRsZUFjdGlvbihcImNhbmNlbFwiKTplLmNsb3NlKCkpfX0pKSxmdW5jdGlvbihlKXtlLkRBUks9XCJkYXJrXCIsZS5MSUdIVD1cImxpZ2h0XCJ9KHlsfHwoeWw9e30pKTt2YXIga2w9e2Fycm93T2Zmc2V0Ont0eXBlOk51bWJlcixkZWZhdWx0OjV9LGFwcGVuZFRvQm9keTp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITB9LGJvdW5kYXJpZXNQYWRkaW5nOnt0eXBlOk51bWJlcixkZWZhdWx0OjB9LGNvbnRlbnQ6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJcIn0sY2xhc3M6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJcIn0sc3R5bGU6T2JqZWN0LGNsb3NlRGVsYXk6e3R5cGU6TnVtYmVyLGRlZmF1bHQ6MjAwfSxjdXRvZmY6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiExfSxkaXNhYmxlZDp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITF9LGVmZmVjdDp7dHlwZTpTdHJpbmcsZGVmYXVsdDp5bC5EQVJLfSxlbnRlcmFibGU6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiEwfSxoaWRlQWZ0ZXI6e3R5cGU6TnVtYmVyLGRlZmF1bHQ6MH0sbWFudWFsTW9kZTp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITF9LHNob3dBZnRlcjp7dHlwZTpOdW1iZXIsZGVmYXVsdDowfSxvZmZzZXQ6e3R5cGU6TnVtYmVyLGRlZmF1bHQ6MTJ9LHBsYWNlbWVudDp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcImJvdHRvbVwifSxwb3BwZXJDbGFzczp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIlwifSxwdXJlOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMX0scG9wcGVyT3B0aW9uczp7dHlwZTpPYmplY3QsZGVmYXVsdDooKT0+bnVsbH0sc2hvd0Fycm93Ont0eXBlOkJvb2xlYW4sZGVmYXVsdDohMH0sc3RyYXRlZ3k6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJmaXhlZFwifSx0cmFuc2l0aW9uOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiZWwtZmFkZS1pbi1saW5lYXJcIn0sdHJpZ2dlcjp7dHlwZTpbU3RyaW5nLEFycmF5XSxkZWZhdWx0OlwiaG92ZXJcIn0sdmlzaWJsZTp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6dm9pZCAwfSxzdG9wUG9wcGVyTW91c2VFdmVudDp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITB9LGdwdUFjY2VsZXJhdGlvbjp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITB9fTtmdW5jdGlvbiBDbChlLHtlbWl0OmF9KXtjb25zdCBuPXQobnVsbCksbz10KG51bGwpLGk9dChudWxsKSxyPVwiZWwtcG9wcGVyLVwiK1JlKCk7bGV0IHM9bnVsbCx1PW51bGwsZD1udWxsLGM9ITE7Y29uc3QgcD0oKT0+ZS5tYW51YWxNb2RlfHxcIm1hbnVhbFwiPT09ZS50cmlnZ2VyLGg9dCh7ekluZGV4OmdsLm5leHRaSW5kZXgoKX0pLHY9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gbCgoKCk9Pnt2YXIgbDtyZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHtwbGFjZW1lbnQ6ZS5wbGFjZW1lbnR9LGUucG9wcGVyT3B0aW9ucykse21vZGlmaWVyczpibCh7YXJyb3c6dC5hcnJvdy52YWx1ZSxhcnJvd09mZnNldDplLmFycm93T2Zmc2V0LG9mZnNldDplLm9mZnNldCxncHVBY2NlbGVyYXRpb246ZS5ncHVBY2NlbGVyYXRpb259LG51bGw9PT0obD1lLnBvcHBlck9wdGlvbnMpfHx2b2lkIDA9PT1sP3ZvaWQgMDpsLm1vZGlmaWVycyl9KX0pKX0oZSx7YXJyb3c6bn0pLG09Zih7dmlzaWJsZTohIWUudmlzaWJsZX0pLGc9bCh7Z2V0OigpPT4hZS5kaXNhYmxlZCYmKFdlKGUudmlzaWJsZSk/ZS52aXNpYmxlOm0udmlzaWJsZSksc2V0KHQpe3AoKXx8KFdlKGUudmlzaWJsZSk/YShcInVwZGF0ZTp2aXNpYmxlXCIsdCk6bS52aXNpYmxlPXQpfX0pO2Z1bmN0aW9uIGIoKXtlLmhpZGVBZnRlcj4wJiYoZD13aW5kb3cuc2V0VGltZW91dCgoKCk9PntrKCl9KSxlLmhpZGVBZnRlcikpLGcudmFsdWU9ITB9ZnVuY3Rpb24gaygpe2cudmFsdWU9ITF9ZnVuY3Rpb24gQygpe2NsZWFyVGltZW91dCh1KSxjbGVhclRpbWVvdXQoZCl9Y29uc3QgeD0oKT0+e3AoKXx8ZS5kaXNhYmxlZHx8KEMoKSwwPT09ZS5zaG93QWZ0ZXI/YigpOnU9d2luZG93LnNldFRpbWVvdXQoKCgpPT57YigpfSksZS5zaG93QWZ0ZXIpKX0sdz0oKT0+e3AoKXx8KEMoKSxlLmNsb3NlRGVsYXk+MD9kPXdpbmRvdy5zZXRUaW1lb3V0KCgoKT0+e18oKX0pLGUuY2xvc2VEZWxheSk6XygpKX0sXz0oKT0+e2soKSxlLmRpc2FibGVkJiZFKCEwKX07ZnVuY3Rpb24gUygpe2lmKCFaZShnKSlyZXR1cm47Y29uc3QgZT1aZShvKSx0PVZlKGUpLnN0YXJ0c1dpdGgoXCJIVE1MXCIpP2U6ZS4kZWw7cz1pZSh0LFplKGkpLFplKHYpKSxzLnVwZGF0ZSgpfWZ1bmN0aW9uIEUoZSl7IXN8fFplKGcpJiYhZXx8TSgpfWZ1bmN0aW9uIE0oKXt2YXIgZTtudWxsPT09KGU9bnVsbD09cz92b2lkIDA6cy5kZXN0cm95KXx8dm9pZCAwPT09ZXx8ZS5jYWxsKHMpLHM9bnVsbH1jb25zdCBUPXt9O2lmKCFwKCkpe2NvbnN0IHQ9KCk9PntaZShnKT93KCk6eCgpfSxsPWU9Pntzd2l0Y2goZS5zdG9wUHJvcGFnYXRpb24oKSxlLnR5cGUpe2Nhc2VcImNsaWNrXCI6Yz9jPSExOnQoKTticmVhaztjYXNlXCJtb3VzZWVudGVyXCI6eCgpO2JyZWFrO2Nhc2VcIm1vdXNlbGVhdmVcIjp3KCk7YnJlYWs7Y2FzZVwiZm9jdXNcIjpjPSEwLHgoKTticmVhaztjYXNlXCJibHVyXCI6Yz0hMSx3KCl9fSxhPWU9Pntzd2l0Y2goZSl7Y2FzZVwiY2xpY2tcIjpULm9uQ2xpY2s9bDticmVhaztjYXNlXCJob3ZlclwiOlQub25Nb3VzZUVudGVyPWwsVC5vbk1vdXNlTGVhdmU9bDticmVhaztjYXNlXCJmb2N1c1wiOlQub25Gb2N1cz1sLFQub25CbHVyPWx9fTtNZShlLnRyaWdnZXIpP09iamVjdC52YWx1ZXMoZS50cmlnZ2VyKS5tYXAoYSk6YShlLnRyaWdnZXIpfXJldHVybiB5KHYsKGU9PntzJiYocy5zZXRPcHRpb25zKGUpLHMudXBkYXRlKCkpfSkpLHkoZywoZnVuY3Rpb24oZSl7ZSYmKGgudmFsdWUuekluZGV4PWdsLm5leHRaSW5kZXgoKSxTKCkpfSkpLHt1cGRhdGU6ZnVuY3Rpb24oKXtaZShnKSYmKHM/cy51cGRhdGUoKTpTKCkpfSxkb0Rlc3Ryb3k6RSxzaG93OngsaGlkZTp3LG9uUG9wcGVyTW91c2VFbnRlcjpmdW5jdGlvbigpe2UuZW50ZXJhYmxlJiZcImNsaWNrXCIhPT1lLnRyaWdnZXImJmNsZWFyVGltZW91dChkKX0sb25Qb3BwZXJNb3VzZUxlYXZlOmZ1bmN0aW9uKCl7Y29uc3R7dHJpZ2dlcjp0fT1lO05lKHQpJiYoXCJjbGlja1wiPT09dHx8XCJmb2N1c1wiPT09dCl8fDE9PT10Lmxlbmd0aCYmKFwiY2xpY2tcIj09PXRbMF18fFwiZm9jdXNcIj09PXRbMF0pfHx3KCl9LG9uQWZ0ZXJFbnRlcjooKT0+e2EoXCJhZnRlci1lbnRlclwiKX0sb25BZnRlckxlYXZlOigpPT57TSgpLGEoXCJhZnRlci1sZWF2ZVwiKX0sb25CZWZvcmVFbnRlcjooKT0+e2EoXCJiZWZvcmUtZW50ZXJcIil9LG9uQmVmb3JlTGVhdmU6KCk9PnthKFwiYmVmb3JlLWxlYXZlXCIpfSxpbml0aWFsaXplUG9wcGVyOlMsaXNNYW51YWxNb2RlOnAsYXJyb3dSZWY6bixldmVudHM6VCxwb3BwZXJJZDpyLHBvcHBlckluc3RhbmNlOnMscG9wcGVyUmVmOmkscG9wcGVyU3R5bGU6aCx0cmlnZ2VyUmVmOm8sdmlzaWJpbGl0eTpnfX1mdW5jdGlvbiB4bChlLHQpe2NvbnN0e2VmZmVjdDpsLG5hbWU6YSxzdG9wUG9wcGVyTW91c2VFdmVudDpuLHBvcHBlckNsYXNzOnUscG9wcGVyU3R5bGU6ZCxwb3BwZXJSZWY6YyxwdXJlOnAscG9wcGVySWQ6dix2aXNpYmlsaXR5Om0sb25Nb3VzZUVudGVyOmYsb25Nb3VzZUxlYXZlOmcsb25BZnRlckVudGVyOmIsb25BZnRlckxlYXZlOnksb25CZWZvcmVFbnRlcjprLG9uQmVmb3JlTGVhdmU6Q309ZSx4PVt1LFwiZWwtcG9wcGVyXCIsXCJpcy1cIitsLHA/XCJpcy1wdXJlXCI6XCJcIl0sdz1uP2N0OlNlO3JldHVybiBzKG8se25hbWU6YSxvbkFmdGVyRW50ZXI6YixvbkFmdGVyTGVhdmU6eSxvbkJlZm9yZUVudGVyOmssb25CZWZvcmVMZWF2ZTpDfSx7ZGVmYXVsdDppKCgoKT0+W3IocyhcImRpdlwiLHtcImFyaWEtaGlkZGVuXCI6U3RyaW5nKCFtKSxjbGFzczp4LHN0eWxlOm51bGwhPWQ/ZDp7fSxpZDp2LHJlZjpudWxsIT1jP2M6XCJwb3BwZXJSZWZcIixyb2xlOlwidG9vbHRpcFwiLG9uTW91c2VFbnRlcjpmLG9uTW91c2VMZWF2ZTpnLG9uQ2xpY2s6Y3Qsb25Nb3VzZURvd246dyxvbk1vdXNlVXA6d30sdCxpbC5DTEFTU3xpbC5TVFlMRXxpbC5QUk9QU3xpbC5IWURSQVRFX0VWRU5UUyxbXCJhcmlhLWhpZGRlblwiLFwib25Nb3VzZWVudGVyXCIsXCJvbk1vdXNlbGVhdmVcIixcIm9uTW91c2VEb3duXCIsXCJvbk1vdXNlVXBcIixcIm9uQ2xpY2tcIixcImlkXCJdKSxbW2gsbV1dKV0pKX0saWwuUFJPUFMsW1wibmFtZVwiLFwib25BZnRlckVudGVyXCIsXCJvbkFmdGVyTGVhdmVcIixcIm9uQmVmb3JlRW50ZXJcIixcIm9uQmVmb3JlTGVhdmVcIl0pfWZ1bmN0aW9uIHdsKGUsdCl7Y29uc3QgbD1zbChlLDEpO3JldHVybiBsfHxtdChcInJlbmRlclRyaWdnZXJcIixcInRyaWdnZXIgZXhwZWN0cyBzaW5nbGUgcm9vdGVkIG5vZGVcIiksQShsLHQpfWZ1bmN0aW9uIF9sKGUpe3JldHVybiBlPyhhKCksbihcImRpdlwiLHtyZWY6XCJhcnJvd1JlZlwiLGNsYXNzOlwiZWwtcG9wcGVyX19hcnJvd1wiLFwiZGF0YS1wb3BwZXItYXJyb3dcIjpcIlwifSxudWxsLGlsLk5FRURfUEFUQ0gpKTooYSgpLG4oSSxudWxsLFwiXCIpKX12YXIgU2w9ZSh7bmFtZTpcIkVsUG9wcGVyXCIscHJvcHM6a2wsZW1pdHM6W1widXBkYXRlOnZpc2libGVcIixcImFmdGVyLWVudGVyXCIsXCJhZnRlci1sZWF2ZVwiLFwiYmVmb3JlLWVudGVyXCIsXCJiZWZvcmUtbGVhdmVcIl0sc2V0dXAoZSx0KXt0LnNsb3RzLnRyaWdnZXJ8fG10KFwiRWxQb3BwZXJcIixcIlRyaWdnZXIgbXVzdCBiZSBwcm92aWRlZFwiKTtjb25zdCBsPUNsKGUsdCksYT0oKT0+bC5kb0Rlc3Ryb3koITApO3JldHVybiBfKGwuaW5pdGlhbGl6ZVBvcHBlciksTyhhKSxCKGwuaW5pdGlhbGl6ZVBvcHBlciksTChhKSxsfSxyZW5kZXIoKXt2YXIgZTtjb25zdHskc2xvdHM6dCxhcHBlbmRUb0JvZHk6bCxjbGFzczphLHN0eWxlOm4sZWZmZWN0Om8saGlkZTppLG9uUG9wcGVyTW91c2VFbnRlcjp1LG9uUG9wcGVyTW91c2VMZWF2ZTpjLG9uQWZ0ZXJFbnRlcjpoLG9uQWZ0ZXJMZWF2ZTp2LG9uQmVmb3JlRW50ZXI6bSxvbkJlZm9yZUxlYXZlOmYscG9wcGVyQ2xhc3M6Zyxwb3BwZXJJZDpiLHBvcHBlclN0eWxlOnkscHVyZTprLHNob3dBcnJvdzpDLHRyYW5zaXRpb246eCx2aXNpYmlsaXR5Oncsc3RvcFBvcHBlck1vdXNlRXZlbnQ6X309dGhpcyxTPXRoaXMuaXNNYW51YWxNb2RlKCksTT1fbChDKSxUPXhsKHtlZmZlY3Q6byxuYW1lOngscG9wcGVyQ2xhc3M6Zyxwb3BwZXJJZDpiLHBvcHBlclN0eWxlOnkscHVyZTprLHN0b3BQb3BwZXJNb3VzZUV2ZW50Ol8sb25Nb3VzZUVudGVyOnUsb25Nb3VzZUxlYXZlOmMsb25BZnRlckVudGVyOmgsb25BZnRlckxlYXZlOnYsb25CZWZvcmVFbnRlcjptLG9uQmVmb3JlTGVhdmU6Zix2aXNpYmlsaXR5Ond9LFtkKHQsXCJkZWZhdWx0XCIse30sKCgpPT5bcCh0aGlzLmNvbnRlbnQpXSkpLE1dKSxOPW51bGw9PT0oZT10LnRyaWdnZXIpfHx2b2lkIDA9PT1lP3ZvaWQgMDplLmNhbGwodCksRD1PYmplY3QuYXNzaWduKHthcmlhRGVzY3JpYmVkYnk6YixjbGFzczphLHN0eWxlOm4scmVmOlwidHJpZ2dlclJlZlwifSx0aGlzLmV2ZW50cyksTz1TP3dsKE4sRCk6cih3bChOLEQpLFtbTXQsaV1dKTtyZXR1cm4gdWwoRSxudWxsLFtPLHMoeix7dG86XCJib2R5XCIsZGlzYWJsZWQ6IWx9LFtUXSxpbC5QUk9QUyxbXCJkaXNhYmxlZFwiXSldKX19KTtTbC5fX2ZpbGU9XCJwYWNrYWdlcy9wb3BwZXIvc3JjL2luZGV4LnZ1ZVwiLFNsLmluc3RhbGw9ZT0+e2UuY29tcG9uZW50KFNsLm5hbWUsU2wpfTt2YXIgRWw9ZSh7bmFtZTpcIkVsQXV0b2NvbXBsZXRlXCIsY29tcG9uZW50czp7RWxQb3BwZXI6U2wsRWxJbnB1dDpXdCxFbFNjcm9sbGJhcjpubH0sZGlyZWN0aXZlczp7Y2xpY2tvdXRzaWRlOk10fSxpbmhlcml0QXR0cnM6ITEscHJvcHM6e3ZhbHVlS2V5Ont0eXBlOlN0cmluZyxkZWZhdWx0OlwidmFsdWVcIn0sbW9kZWxWYWx1ZTp7dHlwZTpbU3RyaW5nLE51bWJlcl0sZGVmYXVsdDpcIlwifSxkZWJvdW5jZTp7dHlwZTpOdW1iZXIsZGVmYXVsdDozMDB9LHBsYWNlbWVudDp7dHlwZTpTdHJpbmcsdmFsaWRhdG9yOmU9PltcInRvcFwiLFwidG9wLXN0YXJ0XCIsXCJ0b3AtZW5kXCIsXCJib3R0b21cIixcImJvdHRvbS1zdGFydFwiLFwiYm90dG9tLWVuZFwiXS5pbmNsdWRlcyhlKSxkZWZhdWx0OlwiYm90dG9tLXN0YXJ0XCJ9LGZldGNoU3VnZ2VzdGlvbnM6e3R5cGU6RnVuY3Rpb24sZGVmYXVsdDpTZX0scG9wcGVyQ2xhc3M6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJcIn0sdHJpZ2dlck9uRm9jdXM6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiEwfSxzZWxlY3RXaGVuVW5tYXRjaGVkOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMX0saGlkZUxvYWRpbmc6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiExfSxwb3BwZXJBcHBlbmRUb0JvZHk6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiEwfSxoaWdobGlnaHRGaXJzdEl0ZW06e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiExfX0sZW1pdHM6W1B0LFwiaW5wdXRcIixcImNoYW5nZVwiLFwiZm9jdXNcIixcImJsdXJcIixcImNsZWFyXCIsXCJzZWxlY3RcIl0sc2V0dXAoZSxhKXtjb25zdCBuPXR0KCksbz10KFtdKSxpPXQoLTEpLHI9dChcIlwiKSxzPXQoITEpLHU9dCghMSksZD10KCExKSxjPXQobnVsbCkscD10KG51bGwpLGg9dChudWxsKSx2PWwoKCgpPT5cImVsLWF1dG9jb21wbGV0ZS1cIitSZSgpKSksbT1sKCgoKT0+KE1lKG8udmFsdWUpJiZvLnZhbHVlLmxlbmd0aD4wfHxkLnZhbHVlKSYmcy52YWx1ZSkpLGY9bCgoKCk9PiFlLmhpZGVMb2FkaW5nJiZkLnZhbHVlKSksZz0oKT0+e2soaC52YWx1ZS51cGRhdGUpfTt5KG0sKCgpPT57ci52YWx1ZT1jLnZhbHVlLiRlbC5vZmZzZXRXaWR0aCtcInB4XCJ9KSksXygoKCk9PntjLnZhbHVlLmlucHV0T3JUZXh0YXJlYS5zZXRBdHRyaWJ1dGUoXCJyb2xlXCIsXCJ0ZXh0Ym94XCIpLGMudmFsdWUuaW5wdXRPclRleHRhcmVhLnNldEF0dHJpYnV0ZShcImFyaWEtYXV0b2NvbXBsZXRlXCIsXCJsaXN0XCIpLGMudmFsdWUuaW5wdXRPclRleHRhcmVhLnNldEF0dHJpYnV0ZShcImFyaWEtY29udHJvbHNcIixcImlkXCIpLGMudmFsdWUuaW5wdXRPclRleHRhcmVhLnNldEF0dHJpYnV0ZShcImFyaWEtYWN0aXZlZGVzY2VuZGFudFwiLGAke3YudmFsdWV9LWl0ZW0tJHtpLnZhbHVlfWApO2NvbnN0IGU9cC52YWx1ZS5xdWVyeVNlbGVjdG9yKFwiLmVsLWF1dG9jb21wbGV0ZS1zdWdnZXN0aW9uX19saXN0XCIpO2Uuc2V0QXR0cmlidXRlKFwicm9sZVwiLFwibGlzdGJveFwiKSxlLnNldEF0dHJpYnV0ZShcImlkXCIsdi52YWx1ZSl9KSksUyhnKTtjb25zdCBiPXQ9Pnt1LnZhbHVlfHwoZC52YWx1ZT0hMCxnKCksZS5mZXRjaFN1Z2dlc3Rpb25zKHQsKHQ9PntkLnZhbHVlPSExLHUudmFsdWV8fChNZSh0KT8oby52YWx1ZT10LGkudmFsdWU9ZS5oaWdobGlnaHRGaXJzdEl0ZW0/MDotMSk6bXQoXCJFbEF1dG9jb21wbGV0ZVwiLFwiYXV0b2NvbXBsZXRlIHN1Z2dlc3Rpb25zIG11c3QgYmUgYW4gYXJyYXlcIikpfSkpKX0sQz1sZShiLGUuZGVib3VuY2UpLHg9dD0+e2EuZW1pdChcImlucHV0XCIsdFtlLnZhbHVlS2V5XSksYS5lbWl0KFB0LHRbZS52YWx1ZUtleV0pLGEuZW1pdChcInNlbGVjdFwiLHQpLGsoKCgpPT57by52YWx1ZT1bXSxpLnZhbHVlPS0xfSkpfTtyZXR1cm57YXR0cnM6bixzdWdnZXN0aW9uczpvLGhpZ2hsaWdodGVkSW5kZXg6aSxkcm9wZG93bldpZHRoOnIsYWN0aXZhdGVkOnMsc3VnZ2VzdGlvbkRpc2FibGVkOnUsbG9hZGluZzpkLGlucHV0UmVmOmMscmVnaW9uUmVmOnAscG9wcGVyOmgsaWQ6dixzdWdnZXN0aW9uVmlzaWJsZTptLHN1Z2dlc3Rpb25Mb2FkaW5nOmYsZ2V0RGF0YTpiLGhhbmRsZUlucHV0OnQ9PntpZihhLmVtaXQoXCJpbnB1dFwiLHQpLGEuZW1pdChQdCx0KSx1LnZhbHVlPSExLCFlLnRyaWdnZXJPbkZvY3VzJiYhdClyZXR1cm4gdS52YWx1ZT0hMCx2b2lkKG8udmFsdWU9W10pO0ModCl9LGhhbmRsZUNoYW5nZTplPT57YS5lbWl0KFwiY2hhbmdlXCIsZSl9LGhhbmRsZUZvY3VzOnQ9PntzLnZhbHVlPSEwLGEuZW1pdChcImZvY3VzXCIsdCksZS50cmlnZ2VyT25Gb2N1cyYmQyhlLm1vZGVsVmFsdWUpfSxoYW5kbGVCbHVyOmU9PnthLmVtaXQoXCJibHVyXCIsZSl9LGhhbmRsZUNsZWFyOigpPT57cy52YWx1ZT0hMSxhLmVtaXQoUHQsXCJcIiksYS5lbWl0KFwiY2xlYXJcIil9LGhhbmRsZUtleUVudGVyOigpPT57bS52YWx1ZSYmaS52YWx1ZT49MCYmaS52YWx1ZTxvLnZhbHVlLmxlbmd0aD94KG8udmFsdWVbaS52YWx1ZV0pOmUuc2VsZWN0V2hlblVubWF0Y2hlZCYmKGEuZW1pdChcInNlbGVjdFwiLHt2YWx1ZTplLm1vZGVsVmFsdWV9KSxrKCgoKT0+e28udmFsdWU9W10saS52YWx1ZT0tMX0pKSl9LGNsb3NlOigpPT57cy52YWx1ZT0hMX0sZm9jdXM6KCk9PntjLnZhbHVlLmZvY3VzKCl9LHNlbGVjdDp4LGhpZ2hsaWdodDplPT57aWYoIW0udmFsdWV8fGQudmFsdWUpcmV0dXJuO2lmKGU8MClyZXR1cm4gdm9pZChpLnZhbHVlPS0xKTtlPj1vLnZhbHVlLmxlbmd0aCYmKGU9by52YWx1ZS5sZW5ndGgtMSk7Y29uc3QgdD1wLnZhbHVlLnF1ZXJ5U2VsZWN0b3IoXCIuZWwtYXV0b2NvbXBsZXRlLXN1Z2dlc3Rpb25fX3dyYXBcIiksbD10LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuZWwtYXV0b2NvbXBsZXRlLXN1Z2dlc3Rpb25fX2xpc3QgbGlcIilbZV0sYT10LnNjcm9sbFRvcCxuPWwub2Zmc2V0VG9wO24rbC5zY3JvbGxIZWlnaHQ+YSt0LmNsaWVudEhlaWdodCYmKHQuc2Nyb2xsVG9wKz1sLnNjcm9sbEhlaWdodCksbjxhJiYodC5zY3JvbGxUb3AtPWwuc2Nyb2xsSGVpZ2h0KSxpLnZhbHVlPWUsYy52YWx1ZS5pbnB1dE9yVGV4dGFyZWEuc2V0QXR0cmlidXRlKFwiYXJpYS1hY3RpdmVkZXNjZW5kYW50XCIsYCR7di52YWx1ZX0taXRlbS0ke2kudmFsdWV9YCl9fX19KTtjb25zdCBNbD17a2V5OjB9LFRsPXMoXCJpXCIse2NsYXNzOlwiZWwtaWNvbi1sb2FkaW5nXCJ9LG51bGwsLTEpO0VsLnJlbmRlcj1mdW5jdGlvbihlLHQsbCxvLHUsaCl7Y29uc3Qgdj1QKFwiZWwtaW5wdXRcIiksbT1QKFwiZWwtc2Nyb2xsYmFyXCIpLGY9UChcImVsLXBvcHBlclwiKSxnPUYoXCJjbGlja291dHNpZGVcIik7cmV0dXJuIGEoKSxuKGYse3JlZjpcInBvcHBlclwiLHZpc2libGU6ZS5zdWdnZXN0aW9uVmlzaWJsZSxcIm9uVXBkYXRlOnZpc2libGVcIjp0WzNdfHwodFszXT10PT5lLnN1Z2dlc3Rpb25WaXNpYmxlPXQpLHBsYWNlbWVudDplLnBsYWNlbWVudCxcInBvcHBlci1jbGFzc1wiOlwiZWwtYXV0b2NvbXBsZXRlX19wb3BwZXIgXCIrZS5wb3BwZXJDbGFzcyxcImFwcGVuZC10by1ib2R5XCI6ZS5wb3BwZXJBcHBlbmRUb0JvZHkscHVyZTpcIlwiLFwibWFudWFsLW1vZGVcIjpcIlwiLGVmZmVjdDpcImxpZ2h0XCIsdHJpZ2dlcjpcImNsaWNrXCIsdHJhbnNpdGlvbjpcImVsLXpvb20taW4tdG9wXCIsXCJncHUtYWNjZWxlcmF0aW9uXCI6ITF9LHt0cmlnZ2VyOmkoKCgpPT5bcihzKFwiZGl2XCIse2NsYXNzOltcImVsLWF1dG9jb21wbGV0ZVwiLGUuJGF0dHJzLmNsYXNzXSxzdHlsZTplLiRhdHRycy5zdHlsZSxyb2xlOlwiY29tYm9ib3hcIixcImFyaWEtaGFzcG9wdXBcIjpcImxpc3Rib3hcIixcImFyaWEtZXhwYW5kZWRcIjplLnN1Z2dlc3Rpb25WaXNpYmxlLFwiYXJpYS1vd25zXCI6ZS5pZH0sW3ModixNKHtyZWY6XCJpbnB1dFJlZlwifSxlLmF0dHJzLHtcIm1vZGVsLXZhbHVlXCI6ZS5tb2RlbFZhbHVlLG9uSW5wdXQ6ZS5oYW5kbGVJbnB1dCxvbkNoYW5nZTplLmhhbmRsZUNoYW5nZSxvbkZvY3VzOmUuaGFuZGxlRm9jdXMsb25CbHVyOmUuaGFuZGxlQmx1cixvbkNsZWFyOmUuaGFuZGxlQ2xlYXIsb25LZXlkb3duOlt0WzFdfHwodFsxXT0kKFQoKHQ9PmUuaGlnaGxpZ2h0KGUuaGlnaGxpZ2h0ZWRJbmRleC0xKSksW1wicHJldmVudFwiXSksW1widXBcIl0pKSx0WzJdfHwodFsyXT0kKFQoKHQ9PmUuaGlnaGxpZ2h0KGUuaGlnaGxpZ2h0ZWRJbmRleCsxKSksW1wicHJldmVudFwiXSksW1wiZG93blwiXSkpLCQoVChlLmhhbmRsZUtleUVudGVyLFtcInByZXZlbnRcIl0pLFtcImVudGVyXCJdKSwkKFQoZS5jbG9zZSxbXCJwcmV2ZW50XCJdKSxbXCJ0YWJcIl0pXX0pLFIoe186Mn0sW2UuJHNsb3RzLnByZXBlbmQ/e25hbWU6XCJwcmVwZW5kXCIsZm46aSgoKCk9PltkKGUuJHNsb3RzLFwicHJlcGVuZFwiKV0pKX06dm9pZCAwLGUuJHNsb3RzLmFwcGVuZD97bmFtZTpcImFwcGVuZFwiLGZuOmkoKCgpPT5bZChlLiRzbG90cyxcImFwcGVuZFwiKV0pKX06dm9pZCAwLGUuJHNsb3RzLnByZWZpeD97bmFtZTpcInByZWZpeFwiLGZuOmkoKCgpPT5bZChlLiRzbG90cyxcInByZWZpeFwiKV0pKX06dm9pZCAwLGUuJHNsb3RzLnN1ZmZpeD97bmFtZTpcInN1ZmZpeFwiLGZuOmkoKCgpPT5bZChlLiRzbG90cyxcInN1ZmZpeFwiKV0pKX06dm9pZCAwXSksMTA0MCxbXCJtb2RlbC12YWx1ZVwiLFwib25JbnB1dFwiLFwib25DaGFuZ2VcIixcIm9uRm9jdXNcIixcIm9uQmx1clwiLFwib25DbGVhclwiLFwib25LZXlkb3duXCJdKV0sMTQsW1wiYXJpYS1leHBhbmRlZFwiLFwiYXJpYS1vd25zXCJdKSxbW2csZS5jbG9zZV1dKV0pKSxkZWZhdWx0OmkoKCgpPT5bcyhcImRpdlwiLHtyZWY6XCJyZWdpb25SZWZcIixjbGFzczpbXCJlbC1hdXRvY29tcGxldGUtc3VnZ2VzdGlvblwiLGUuc3VnZ2VzdGlvbkxvYWRpbmcmJlwiaXMtbG9hZGluZ1wiXSxzdHlsZTp7d2lkdGg6ZS5kcm9wZG93bldpZHRoLG91dGxpbmU6XCJub25lXCJ9LHJvbGU6XCJyZWdpb25cIn0sW3MobSx7dGFnOlwidWxcIixcIndyYXAtY2xhc3NcIjpcImVsLWF1dG9jb21wbGV0ZS1zdWdnZXN0aW9uX193cmFwXCIsXCJ2aWV3LWNsYXNzXCI6XCJlbC1hdXRvY29tcGxldGUtc3VnZ2VzdGlvbl9fbGlzdFwifSx7ZGVmYXVsdDppKCgoKT0+W2Uuc3VnZ2VzdGlvbkxvYWRpbmc/KGEoKSxuKFwibGlcIixNbCxbVGxdKSk6KGEoITApLG4oRSx7a2V5OjF9LEgoZS5zdWdnZXN0aW9ucywoKHQsbCk9PihhKCksbihcImxpXCIse2lkOmAke2UuaWR9LWl0ZW0tJHtsfWAsa2V5OmwsY2xhc3M6e2hpZ2hsaWdodGVkOmUuaGlnaGxpZ2h0ZWRJbmRleD09PWx9LHJvbGU6XCJvcHRpb25cIixcImFyaWEtc2VsZWN0ZWRcIjplLmhpZ2hsaWdodGVkSW5kZXg9PT1sLG9uQ2xpY2s6bD0+ZS5zZWxlY3QodCl9LFtkKGUuJHNsb3RzLFwiZGVmYXVsdFwiLHtpdGVtOnR9LCgoKT0+W2MocCh0W2UudmFsdWVLZXldKSwxKV0pKV0sMTAsW1wiaWRcIixcImFyaWEtc2VsZWN0ZWRcIixcIm9uQ2xpY2tcIl0pKSkpLDEyOCkpXSkpLF86MX0pXSw2KV0pKSxfOjF9LDgsW1widmlzaWJsZVwiLFwicGxhY2VtZW50XCIsXCJwb3BwZXItY2xhc3NcIixcImFwcGVuZC10by1ib2R5XCJdKX0sRWwuX19maWxlPVwicGFja2FnZXMvYXV0b2NvbXBsZXRlL3NyYy9pbmRleC52dWVcIixFbC5pbnN0YWxsPWU9PntlLmNvbXBvbmVudChFbC5uYW1lLEVsKX07dmFyIE5sPWUoe25hbWU6XCJFbEF2YXRhclwiLHByb3BzOntzaXplOnt0eXBlOltOdW1iZXIsU3RyaW5nXSx2YWxpZGF0b3I6ZT0+XCJzdHJpbmdcIj09dHlwZW9mIGU/W1wibGFyZ2VcIixcIm1lZGl1bVwiLFwic21hbGxcIl0uaW5jbHVkZXMoZSk6XCJudW1iZXJcIj09dHlwZW9mIGUsZGVmYXVsdDpcImxhcmdlXCJ9LHNoYXBlOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiY2lyY2xlXCIsdmFsaWRhdG9yOmU9PltcImNpcmNsZVwiLFwic3F1YXJlXCJdLmluY2x1ZGVzKGUpfSxpY29uOlN0cmluZyxzcmM6U3RyaW5nLGFsdDpTdHJpbmcsc3JjU2V0OlN0cmluZyxmaXQ6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJjb3ZlclwifX0sZW1pdHM6W1wiZXJyb3JcIl0sc2V0dXAoZSx7ZW1pdDphfSl7Y29uc3Qgbj10KCExKSxvPWwoKCgpPT57Y29uc3R7c2l6ZTp0LGljb246bCxzaGFwZTphfT1lO2xldCBuPVtcImVsLWF2YXRhclwiXTtyZXR1cm4gdCYmXCJzdHJpbmdcIj09dHlwZW9mIHQmJm4ucHVzaChcImVsLWF2YXRhci0tXCIrdCksbCYmbi5wdXNoKFwiZWwtYXZhdGFyLS1pY29uXCIpLGEmJm4ucHVzaChcImVsLWF2YXRhci0tXCIrYSksbn0pKSxpPWwoKCgpPT57Y29uc3R7c2l6ZTp0fT1lO3JldHVyblwibnVtYmVyXCI9PXR5cGVvZiB0P3toZWlnaHQ6dCtcInB4XCIsd2lkdGg6dCtcInB4XCIsbGluZUhlaWdodDp0K1wicHhcIn06e319KSkscj1sKCgoKT0+KHtvYmplY3RGaXQ6ZS5maXR9KSkpO3JldHVybntoYXNMb2FkRXJyb3I6bixhdmF0YXJDbGFzczpvLHNpemVTdHlsZTppLGhhbmRsZUVycm9yOmZ1bmN0aW9uKGUpe24udmFsdWU9ITAsYShcImVycm9yXCIsZSl9LGZpdFN0eWxlOnJ9fX0pO05sLnJlbmRlcj1mdW5jdGlvbihlLHQsbCxvLGkscil7cmV0dXJuIGEoKSxuKFwic3BhblwiLHtjbGFzczplLmF2YXRhckNsYXNzLHN0eWxlOmUuc2l6ZVN0eWxlfSxbIWUuc3JjJiYhZS5zcmNTZXR8fGUuaGFzTG9hZEVycm9yP2UuaWNvbj8oYSgpLG4oXCJpXCIse2tleToxLGNsYXNzOmUuaWNvbn0sbnVsbCwyKSk6ZChlLiRzbG90cyxcImRlZmF1bHRcIix7a2V5OjJ9KTooYSgpLG4oXCJpbWdcIix7a2V5OjAsc3JjOmUuc3JjLGFsdDplLmFsdCxzcmNzZXQ6ZS5zcmNTZXQsc3R5bGU6ZS5maXRTdHlsZSxvbkVycm9yOnRbMV18fCh0WzFdPSguLi50KT0+ZS5oYW5kbGVFcnJvciguLi50KSl9LG51bGwsNDQsW1wic3JjXCIsXCJhbHRcIixcInNyY3NldFwiXSkpXSw2KX0sTmwuX19maWxlPVwicGFja2FnZXMvYXZhdGFyL3NyYy9pbmRleC52dWVcIixObC5pbnN0YWxsPWU9PntlLmNvbXBvbmVudChObC5uYW1lLE5sKX07Y29uc3QgRGw9ZT0+TWF0aC5wb3coZSwzKTt2YXIgT2w9ZSh7bmFtZTpcIkVsQmFja3RvcFwiLHByb3BzOnt2aXNpYmlsaXR5SGVpZ2h0Ont0eXBlOk51bWJlcixkZWZhdWx0OjIwMH0sdGFyZ2V0Ont0eXBlOlN0cmluZyxkZWZhdWx0OlwiXCJ9LHJpZ2h0Ont0eXBlOk51bWJlcixkZWZhdWx0OjQwfSxib3R0b206e3R5cGU6TnVtYmVyLGRlZmF1bHQ6NDB9fSxlbWl0czpbXCJjbGlja1wiXSxzZXR1cChlLGEpe2NvbnN0IG49dChudWxsKSxvPXQobnVsbCksaT10KCExKSxyPWwoKCgpPT5lLmJvdHRvbStcInB4XCIpKSxzPWwoKCgpPT5lLnJpZ2h0K1wicHhcIikpLHU9KCk9Pntjb25zdCBlPURhdGUubm93KCksdD1uLnZhbHVlLnNjcm9sbFRvcCxsPXdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWV8fChlPT5zZXRUaW1lb3V0KGUsMTYpKSxhPSgpPT57Y29uc3Qgbz0oRGF0ZS5ub3coKS1lKS81MDA7dmFyIGk7bzwxPyhuLnZhbHVlLnNjcm9sbFRvcD10KigxLSgoaT1vKTwuNT9EbCgyKmkpLzI6MS1EbCgyKigxLWkpKS8yKSksbChhKSk6bi52YWx1ZS5zY3JvbGxUb3A9MH07bChhKX0sZD1yZSgoKCk9PntpLnZhbHVlPW4udmFsdWUuc2Nyb2xsVG9wPj1lLnZpc2liaWxpdHlIZWlnaHR9KSwzMDApO3JldHVybiBfKCgoKT0+e2lmKG8udmFsdWU9ZG9jdW1lbnQsbi52YWx1ZT1kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsZS50YXJnZXQpe2lmKG4udmFsdWU9ZG9jdW1lbnQucXVlcnlTZWxlY3RvcihlLnRhcmdldCksIW4udmFsdWUpdGhyb3cgbmV3IEVycm9yKFwidGFyZ2V0IGlzIG5vdCBleGlzdGVkOiBcIitlLnRhcmdldCk7by52YWx1ZT1uLnZhbHVlfWx0KG8udmFsdWUsXCJzY3JvbGxcIixkKX0pKSxPKCgoKT0+e2F0KG8udmFsdWUsXCJzY3JvbGxcIixkKX0pKSx7ZWw6bixjb250YWluZXI6byx2aXNpYmxlOmksc3R5bGVCb3R0b206cixzdHlsZVJpZ2h0OnMsaGFuZGxlQ2xpY2s6ZT0+e3UoKSxhLmVtaXQoXCJjbGlja1wiLGUpfX19fSk7Y29uc3QgUGw9cyhcImlcIix7Y2xhc3M6XCJlbC1pY29uLWNhcmV0LXRvcFwifSxudWxsLC0xKTtPbC5yZW5kZXI9ZnVuY3Rpb24oZSx0LGwscixzLGMpe3JldHVybiBhKCksbihvLHtuYW1lOlwiZWwtZmFkZS1pblwifSx7ZGVmYXVsdDppKCgoKT0+W2UudmlzaWJsZT8oYSgpLG4oXCJkaXZcIix7a2V5OjAsc3R5bGU6e3JpZ2h0OmUuc3R5bGVSaWdodCxib3R0b206ZS5zdHlsZUJvdHRvbX0sY2xhc3M6XCJlbC1iYWNrdG9wXCIsb25DbGljazp0WzFdfHwodFsxXT1UKCgoLi4udCk9PmUuaGFuZGxlQ2xpY2soLi4udCkpLFtcInN0b3BcIl0pKX0sW2QoZS4kc2xvdHMsXCJkZWZhdWx0XCIse30sKCgpPT5bUGxdKSldLDQpKTp1KFwidi1pZlwiLCEwKV0pKSxfOjF9KX0sT2wuX19maWxlPVwicGFja2FnZXMvYmFja3RvcC9zcmMvaW5kZXgudnVlXCIsT2wuaW5zdGFsbD1lPT57ZS5jb21wb25lbnQoT2wubmFtZSxPbCl9O3ZhciBWbD1lKHtuYW1lOlwiRWxCYWRnZVwiLHByb3BzOnt2YWx1ZTp7dHlwZTpbU3RyaW5nLE51bWJlcl0sZGVmYXVsdDpcIlwifSxtYXg6e3R5cGU6TnVtYmVyLGRlZmF1bHQ6OTl9LGlzRG90OkJvb2xlYW4saGlkZGVuOkJvb2xlYW4sdHlwZTp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcInByaW1hcnlcIix2YWxpZGF0b3I6ZT0+W1wicHJpbWFyeVwiLFwic3VjY2Vzc1wiLFwid2FybmluZ1wiLFwiaW5mb1wiLFwiZGFuZ2VyXCJdLmluY2x1ZGVzKGUpfX0sc2V0dXA6ZT0+KHtjb250ZW50OmwoKCgpPT57aWYoZS5pc0RvdClyZXR1cm47Y29uc3R7dmFsdWU6dCxtYXg6bH09ZTtyZXR1cm5cIm51bWJlclwiPT10eXBlb2YgdCYmXCJudW1iZXJcIj09dHlwZW9mIGwmJmw8dD9sK1wiK1wiOnR9KSl9KX0pO2NvbnN0IElsPXtjbGFzczpcImVsLWJhZGdlXCJ9O1ZsLnJlbmRlcj1mdW5jdGlvbihlLHQsbCx1LGMsdil7cmV0dXJuIGEoKSxuKFwiZGl2XCIsSWwsW2QoZS4kc2xvdHMsXCJkZWZhdWx0XCIpLHMobyx7bmFtZTpcImVsLXpvb20taW4tY2VudGVyXCJ9LHtkZWZhdWx0OmkoKCgpPT5bcihzKFwic3VwXCIse2NsYXNzOltcImVsLWJhZGdlX19jb250ZW50XCIsW1wiZWwtYmFkZ2VfX2NvbnRlbnQtLVwiK2UudHlwZSx7XCJpcy1maXhlZFwiOmUuJHNsb3RzLmRlZmF1bHQsXCJpcy1kb3RcIjplLmlzRG90fV1dLHRleHRDb250ZW50OnAoZS5jb250ZW50KX0sbnVsbCwxMCxbXCJ0ZXh0Q29udGVudFwiXSksW1toLCFlLmhpZGRlbiYmKGUuY29udGVudHx8MD09PWUuY29udGVudHx8ZS5pc0RvdCldXSldKSksXzoxfSldKX0sVmwuX19maWxlPVwicGFja2FnZXMvYmFkZ2Uvc3JjL2luZGV4LnZ1ZVwiLFZsLmluc3RhbGw9ZT0+e2UuY29tcG9uZW50KFZsLm5hbWUsVmwpfTt2YXIgQWw9ZSh7bmFtZTpcIkVsQnJlYWRjcnVtYlwiLHByb3BzOntzZXBhcmF0b3I6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCIvXCJ9LHNlcGFyYXRvckNsYXNzOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiXCJ9fSxzZXR1cChlKXtjb25zdCBsPXQobnVsbCk7cmV0dXJuIHgoXCJicmVhZGNydW1iXCIsZSksXygoKCk9Pntjb25zdCBlPWwudmFsdWUucXVlcnlTZWxlY3RvckFsbChcIi5lbC1icmVhZGNydW1iX19pdGVtXCIpO2UubGVuZ3RoJiZlW2UubGVuZ3RoLTFdLnNldEF0dHJpYnV0ZShcImFyaWEtY3VycmVudFwiLFwicGFnZVwiKX0pKSx7YnJlYWRjcnVtYjpsfX19KTtjb25zdCBCbD17cmVmOlwiYnJlYWRjcnVtYlwiLGNsYXNzOlwiZWwtYnJlYWRjcnVtYlwiLFwiYXJpYS1sYWJlbFwiOlwiQnJlYWRjcnVtYlwiLHJvbGU6XCJuYXZpZ2F0aW9uXCJ9O0FsLnJlbmRlcj1mdW5jdGlvbihlLHQsbCxvLGkscil7cmV0dXJuIGEoKSxuKFwiZGl2XCIsQmwsW2QoZS4kc2xvdHMsXCJkZWZhdWx0XCIpXSw1MTIpfSxBbC5fX2ZpbGU9XCJwYWNrYWdlcy9icmVhZGNydW1iL3NyYy9pbmRleC52dWVcIixBbC5pbnN0YWxsPWU9PntlLmNvbXBvbmVudChBbC5uYW1lLEFsKX07dmFyIExsPWUoe25hbWU6XCJFbEJyZWFkY3J1bWJJdGVtXCIscHJvcHM6e3RvOnt0eXBlOltTdHJpbmcsT2JqZWN0XSxkZWZhdWx0OlwiXCJ9LHJlcGxhY2U6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiExfX0sc2V0dXAoZSl7Y29uc3QgbD10KG51bGwpLGE9dyhcImJyZWFkY3J1bWJcIiksbj12KCkuYXBwQ29udGV4dC5jb25maWcuZ2xvYmFsUHJvcGVydGllcy4kcm91dGVyO3JldHVybiBfKCgoKT0+e2wudmFsdWUuc2V0QXR0cmlidXRlKFwicm9sZVwiLFwibGlua1wiKSxsLnZhbHVlLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCgoKT0+e2UudG8mJm4mJihlLnJlcGxhY2U/bi5yZXBsYWNlKGUudG8pOm4ucHVzaChlLnRvKSl9KSl9KSkse2xpbms6bCxzZXBhcmF0b3I6bnVsbD09YT92b2lkIDA6YS5zZXBhcmF0b3Isc2VwYXJhdG9yQ2xhc3M6bnVsbD09YT92b2lkIDA6YS5zZXBhcmF0b3JDbGFzc319fSk7Y29uc3Qgemw9e2NsYXNzOlwiZWwtYnJlYWRjcnVtYl9faXRlbVwifSxGbD17a2V5OjEsY2xhc3M6XCJlbC1icmVhZGNydW1iX19zZXBhcmF0b3JcIixyb2xlOlwicHJlc2VudGF0aW9uXCJ9O0xsLnJlbmRlcj1mdW5jdGlvbihlLHQsbCxvLGkscil7cmV0dXJuIGEoKSxuKFwic3BhblwiLHpsLFtzKFwic3BhblwiLHtyZWY6XCJsaW5rXCIsY2xhc3M6W1wiZWwtYnJlYWRjcnVtYl9faW5uZXJcIixlLnRvP1wiaXMtbGlua1wiOlwiXCJdLHJvbGU6XCJsaW5rXCJ9LFtkKGUuJHNsb3RzLFwiZGVmYXVsdFwiKV0sMiksZS5zZXBhcmF0b3JDbGFzcz8oYSgpLG4oXCJpXCIse2tleTowLGNsYXNzOltcImVsLWJyZWFkY3J1bWJfX3NlcGFyYXRvclwiLGUuc2VwYXJhdG9yQ2xhc3NdfSxudWxsLDIpKTooYSgpLG4oXCJzcGFuXCIsRmwscChlLnNlcGFyYXRvciksMSkpXSl9LExsLl9fZmlsZT1cInBhY2thZ2VzL2JyZWFkY3J1bWIvc3JjL2l0ZW0udnVlXCIsTGwuaW5zdGFsbD1lPT57ZS5jb21wb25lbnQoTGwubmFtZSxMbCl9O3ZhciAkbD1lKHtuYW1lOlwiRWxCdXR0b25cIixwcm9wczp7dHlwZTp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcImRlZmF1bHRcIix2YWxpZGF0b3I6ZT0+W1wiZGVmYXVsdFwiLFwicHJpbWFyeVwiLFwic3VjY2Vzc1wiLFwid2FybmluZ1wiLFwiaW5mb1wiLFwiZGFuZ2VyXCIsXCJ0ZXh0XCJdLmluY2x1ZGVzKGUpfSxzaXplOnt0eXBlOlN0cmluZyx2YWxpZGF0b3I6QXR9LGljb246e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJcIn0sbmF0aXZlVHlwZTp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcImJ1dHRvblwiLHZhbGlkYXRvcjplPT5bXCJidXR0b25cIixcInN1Ym1pdFwiLFwicmVzZXRcIl0uaW5jbHVkZXMoZSl9LGxvYWRpbmc6Qm9vbGVhbixkaXNhYmxlZDpCb29sZWFuLHBsYWluOkJvb2xlYW4sYXV0b2ZvY3VzOkJvb2xlYW4scm91bmQ6Qm9vbGVhbixjaXJjbGU6Qm9vbGVhbn0sZW1pdHM6W1wiY2xpY2tcIl0sc2V0dXAoZSx0KXtjb25zdCBhPXFlKCksbj13KFwiZWxGb3JtXCIse30pLG89dyhcImVsRm9ybUl0ZW1cIix7fSk7cmV0dXJue2J1dHRvblNpemU6bCgoKCk9PmUuc2l6ZXx8by5zaXplfHxhLnNpemUpKSxidXR0b25EaXNhYmxlZDpsKCgoKT0+ZS5kaXNhYmxlZHx8bi5kaXNhYmxlZCkpLGhhbmRsZUNsaWNrOmU9Pnt0LmVtaXQoXCJjbGlja1wiLGUpfX19fSk7Y29uc3QgUmw9e2tleTowLGNsYXNzOlwiZWwtaWNvbi1sb2FkaW5nXCJ9LEhsPXtrZXk6Mn07JGwucmVuZGVyPWZ1bmN0aW9uKGUsdCxsLG8saSxyKXtyZXR1cm4gYSgpLG4oXCJidXR0b25cIix7Y2xhc3M6W1wiZWwtYnV0dG9uXCIsZS50eXBlP1wiZWwtYnV0dG9uLS1cIitlLnR5cGU6XCJcIixlLmJ1dHRvblNpemU/XCJlbC1idXR0b24tLVwiK2UuYnV0dG9uU2l6ZTpcIlwiLHtcImlzLWRpc2FibGVkXCI6ZS5idXR0b25EaXNhYmxlZCxcImlzLWxvYWRpbmdcIjplLmxvYWRpbmcsXCJpcy1wbGFpblwiOmUucGxhaW4sXCJpcy1yb3VuZFwiOmUucm91bmQsXCJpcy1jaXJjbGVcIjplLmNpcmNsZX1dLGRpc2FibGVkOmUuYnV0dG9uRGlzYWJsZWR8fGUubG9hZGluZyxhdXRvZm9jdXM6ZS5hdXRvZm9jdXMsdHlwZTplLm5hdGl2ZVR5cGUsb25DbGljazp0WzFdfHwodFsxXT0oLi4udCk9PmUuaGFuZGxlQ2xpY2soLi4udCkpfSxbZS5sb2FkaW5nPyhhKCksbihcImlcIixSbCkpOnUoXCJ2LWlmXCIsITApLGUuaWNvbiYmIWUubG9hZGluZz8oYSgpLG4oXCJpXCIse2tleToxLGNsYXNzOmUuaWNvbn0sbnVsbCwyKSk6dShcInYtaWZcIiwhMCksZS4kc2xvdHMuZGVmYXVsdD8oYSgpLG4oXCJzcGFuXCIsSGwsW2QoZS4kc2xvdHMsXCJkZWZhdWx0XCIpXSkpOnUoXCJ2LWlmXCIsITApXSwxMCxbXCJkaXNhYmxlZFwiLFwiYXV0b2ZvY3VzXCIsXCJ0eXBlXCJdKX0sJGwuX19maWxlPVwicGFja2FnZXMvYnV0dG9uL3NyYy9idXR0b24udnVlXCIsJGwuaW5zdGFsbD1lPT57ZS5jb21wb25lbnQoJGwubmFtZSwkbCl9O3ZhciBXbD1lKHtuYW1lOlwiRWxCdXR0b25Hcm91cFwifSk7Y29uc3Qgamw9e2NsYXNzOlwiZWwtYnV0dG9uLWdyb3VwXCJ9O1dsLnJlbmRlcj1mdW5jdGlvbihlLHQsbCxvLGkscil7cmV0dXJuIGEoKSxuKFwiZGl2XCIsamwsW2QoZS4kc2xvdHMsXCJkZWZhdWx0XCIpXSl9LFdsLl9fZmlsZT1cInBhY2thZ2VzL2J1dHRvbi9zcmMvYnV0dG9uLWdyb3VwLnZ1ZVwiLFdsLmluc3RhbGw9ZT0+e2UuY29tcG9uZW50KFdsLm5hbWUsV2wpfTtsZXQgS2w9e25hbWU6XCJlblwiLGVsOntjb2xvcnBpY2tlcjp7Y29uZmlybTpcIk9LXCIsY2xlYXI6XCJDbGVhclwifSxkYXRlcGlja2VyOntub3c6XCJOb3dcIix0b2RheTpcIlRvZGF5XCIsY2FuY2VsOlwiQ2FuY2VsXCIsY2xlYXI6XCJDbGVhclwiLGNvbmZpcm06XCJPS1wiLHNlbGVjdERhdGU6XCJTZWxlY3QgZGF0ZVwiLHNlbGVjdFRpbWU6XCJTZWxlY3QgdGltZVwiLHN0YXJ0RGF0ZTpcIlN0YXJ0IERhdGVcIixzdGFydFRpbWU6XCJTdGFydCBUaW1lXCIsZW5kRGF0ZTpcIkVuZCBEYXRlXCIsZW5kVGltZTpcIkVuZCBUaW1lXCIscHJldlllYXI6XCJQcmV2aW91cyBZZWFyXCIsbmV4dFllYXI6XCJOZXh0IFllYXJcIixwcmV2TW9udGg6XCJQcmV2aW91cyBNb250aFwiLG5leHRNb250aDpcIk5leHQgTW9udGhcIix5ZWFyOlwiXCIsbW9udGgxOlwiSmFudWFyeVwiLG1vbnRoMjpcIkZlYnJ1YXJ5XCIsbW9udGgzOlwiTWFyY2hcIixtb250aDQ6XCJBcHJpbFwiLG1vbnRoNTpcIk1heVwiLG1vbnRoNjpcIkp1bmVcIixtb250aDc6XCJKdWx5XCIsbW9udGg4OlwiQXVndXN0XCIsbW9udGg5OlwiU2VwdGVtYmVyXCIsbW9udGgxMDpcIk9jdG9iZXJcIixtb250aDExOlwiTm92ZW1iZXJcIixtb250aDEyOlwiRGVjZW1iZXJcIix3ZWVrOlwid2Vla1wiLHdlZWtzOntzdW46XCJTdW5cIixtb246XCJNb25cIix0dWU6XCJUdWVcIix3ZWQ6XCJXZWRcIix0aHU6XCJUaHVcIixmcmk6XCJGcmlcIixzYXQ6XCJTYXRcIn0sbW9udGhzOntqYW46XCJKYW5cIixmZWI6XCJGZWJcIixtYXI6XCJNYXJcIixhcHI6XCJBcHJcIixtYXk6XCJNYXlcIixqdW46XCJKdW5cIixqdWw6XCJKdWxcIixhdWc6XCJBdWdcIixzZXA6XCJTZXBcIixvY3Q6XCJPY3RcIixub3Y6XCJOb3ZcIixkZWM6XCJEZWNcIn19LHNlbGVjdDp7bG9hZGluZzpcIkxvYWRpbmdcIixub01hdGNoOlwiTm8gbWF0Y2hpbmcgZGF0YVwiLG5vRGF0YTpcIk5vIGRhdGFcIixwbGFjZWhvbGRlcjpcIlNlbGVjdFwifSxjYXNjYWRlcjp7bm9NYXRjaDpcIk5vIG1hdGNoaW5nIGRhdGFcIixsb2FkaW5nOlwiTG9hZGluZ1wiLHBsYWNlaG9sZGVyOlwiU2VsZWN0XCIsbm9EYXRhOlwiTm8gZGF0YVwifSxwYWdpbmF0aW9uOntnb3RvOlwiR28gdG9cIixwYWdlc2l6ZTpcIi9wYWdlXCIsdG90YWw6XCJUb3RhbCB7dG90YWx9XCIscGFnZUNsYXNzaWZpZXI6XCJcIn0sbWVzc2FnZWJveDp7dGl0bGU6XCJNZXNzYWdlXCIsY29uZmlybTpcIk9LXCIsY2FuY2VsOlwiQ2FuY2VsXCIsZXJyb3I6XCJJbGxlZ2FsIGlucHV0XCJ9LHVwbG9hZDp7ZGVsZXRlVGlwOlwicHJlc3MgZGVsZXRlIHRvIHJlbW92ZVwiLGRlbGV0ZTpcIkRlbGV0ZVwiLHByZXZpZXc6XCJQcmV2aWV3XCIsY29udGludWU6XCJDb250aW51ZVwifSx0YWJsZTp7ZW1wdHlUZXh0OlwiTm8gRGF0YVwiLGNvbmZpcm1GaWx0ZXI6XCJDb25maXJtXCIscmVzZXRGaWx0ZXI6XCJSZXNldFwiLGNsZWFyRmlsdGVyOlwiQWxsXCIsc3VtVGV4dDpcIlN1bVwifSx0cmVlOntlbXB0eVRleHQ6XCJObyBEYXRhXCJ9LHRyYW5zZmVyOntub01hdGNoOlwiTm8gbWF0Y2hpbmcgZGF0YVwiLG5vRGF0YTpcIk5vIGRhdGFcIix0aXRsZXM6W1wiTGlzdCAxXCIsXCJMaXN0IDJcIl0sZmlsdGVyUGxhY2Vob2xkZXI6XCJFbnRlciBrZXl3b3JkXCIsbm9DaGVja2VkRm9ybWF0Olwie3RvdGFsfSBpdGVtc1wiLGhhc0NoZWNrZWRGb3JtYXQ6XCJ7Y2hlY2tlZH0ve3RvdGFsfSBjaGVja2VkXCJ9LGltYWdlOntlcnJvcjpcIkZBSUxFRFwifSxwYWdlSGVhZGVyOnt0aXRsZTpcIkJhY2tcIn0scG9wY29uZmlybTp7Y29uZmlybUJ1dHRvblRleHQ6XCJZZXNcIixjYW5jZWxCdXR0b25UZXh0OlwiTm9cIn19fTtmdW5jdGlvbiBZbChlLHQpe3JldHVybiBlJiZ0P2UucmVwbGFjZSgvXFx7KFxcdyspXFx9L2csKChlLGwpPT50W2xdKSk6ZX1jb25zdCBxbD0oZSx0KT0+e2xldCBsO2NvbnN0IGE9ZS5zcGxpdChcIi5cIik7bGV0IG49S2w7Zm9yKGxldCBlPTAsbz1hLmxlbmd0aDtlPG87ZSsrKXtpZihsPW5bYVtlXV0sZT09PW8tMSlyZXR1cm4gWWwobCx0KTtpZighbClyZXR1cm5cIlwiO249bH1yZXR1cm5cIlwifSxVbD17ZGF0ZTpcIllZWVktTU0tRERcIix3ZWVrOlwiZ2dnZ1t3XXd3XCIseWVhcjpcIllZWVlcIixtb250aDpcIllZWVktTU1cIixkYXRldGltZTpcIllZWVktTU0tREQgSEg6bW06c3NcIixtb250aHJhbmdlOlwiWVlZWS1NTVwiLGRhdGVyYW5nZTpcIllZWVktTU0tRERcIixkYXRldGltZXJhbmdlOlwiWVlZWS1NTS1ERCBISDptbTpzc1wifSxHbD17bmFtZTp7dHlwZTpbQXJyYXksU3RyaW5nXSxkZWZhdWx0OlwiXCJ9LGZvcm1hdDp7dHlwZTpTdHJpbmd9LHR5cGU6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJcIn0sY2xlYXJhYmxlOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMH0sY2xlYXJJY29uOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiZWwtaWNvbi1jaXJjbGUtY2xvc2VcIn0sZWRpdGFibGU6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiEwfSxwcmVmaXhJY29uOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiXCJ9LHNpemU6e3R5cGU6U3RyaW5nLHZhbGlkYXRvcjpBdH0scmVhZG9ubHk6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiExfSxkaXNhYmxlZDp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITF9LHBsYWNlaG9sZGVyOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiXCJ9LG1vZGVsVmFsdWU6e3R5cGU6W0RhdGUsQXJyYXksU3RyaW5nXSxkZWZhdWx0OlwiXCJ9LHJhbmdlU2VwYXJhdG9yOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiLVwifSxzdGFydFBsYWNlaG9sZGVyOlN0cmluZyxlbmRQbGFjZWhvbGRlcjpTdHJpbmcsZGVmYXVsdFZhbHVlOnt0eXBlOltEYXRlLEFycmF5XX0sZGVmYXVsdFRpbWU6e3R5cGU6W0RhdGUsQXJyYXldfSxpc1JhbmdlOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMX0sZGlzYWJsZWRIb3Vyczp7dHlwZTpGdW5jdGlvbn0sZGlzYWJsZWRNaW51dGVzOnt0eXBlOkZ1bmN0aW9ufSxkaXNhYmxlZFNlY29uZHM6e3R5cGU6RnVuY3Rpb259LGRpc2FibGVkRGF0ZTp7dHlwZTpGdW5jdGlvbn0sY2VsbENsYXNzTmFtZTp7dHlwZTpGdW5jdGlvbn0sc2hvcnRjdXRzOnt0eXBlOkFycmF5LGRlZmF1bHQ6KCk9PltdfSxhcnJvd0NvbnRyb2w6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiExfSx2YWxpZGF0ZUV2ZW50Ont0eXBlOkJvb2xlYW4sZGVmYXVsdDohMH19LFhsPWZ1bmN0aW9uKGUsdCl7Y29uc3QgbD1lIGluc3RhbmNlb2YgRGF0ZSxhPXQgaW5zdGFuY2VvZiBEYXRlO3JldHVybiBsJiZhP2UuZ2V0VGltZSgpPT09dC5nZXRUaW1lKCk6IWwmJiFhJiZlPT09dH0sUWw9ZnVuY3Rpb24oZSx0KXtjb25zdCBsPWUgaW5zdGFuY2VvZiBBcnJheSxhPXQgaW5zdGFuY2VvZiBBcnJheTtyZXR1cm4gbCYmYT9lLmxlbmd0aD09PXQubGVuZ3RoJiZlLmV2ZXJ5KCgoZSxsKT0+WGwoZSx0W2xdKSkpOiFsJiYhYSYmWGwoZSx0KX07dmFyIFpsPWUoe25hbWU6XCJQaWNrZXJcIixjb21wb25lbnRzOntFbElucHV0Old0LEVsUG9wcGVyOlNsfSxkaXJlY3RpdmVzOntjbGlja291dHNpZGU6TXR9LHByb3BzOkdsLGVtaXRzOltcInVwZGF0ZTptb2RlbFZhbHVlXCIsXCJjaGFuZ2VcIixcImZvY3VzXCIsXCJibHVyXCJdLHNldHVwKGUsYSl7Y29uc3Qgbj1xZSgpLG89dyhcImVsRm9ybVwiLHt9KSxpPXcoXCJlbEZvcm1JdGVtXCIse30pLHI9dChudWxsKSxzPXQoITEpLHU9dCghMSksZD10KG51bGwpO3kocywodD0+e3ZhciBsO3Q/ZC52YWx1ZT1lLm1vZGVsVmFsdWU6KFQudmFsdWU9bnVsbCxhLmVtaXQoXCJibHVyXCIpLEQoKSxlLnZhbGlkYXRlRXZlbnQmJihudWxsPT09KGw9aS5mb3JtSXRlbU1pdHQpfHx2b2lkIDA9PT1sfHxsLmVtaXQoXCJlbC5mb3JtLmJsdXJcIikpKX0pKTtjb25zdCBjPXQ9Pnt2YXIgbDtRbCh0LGQudmFsdWUpfHwoYS5lbWl0KFwiY2hhbmdlXCIsdCksZS52YWxpZGF0ZUV2ZW50JiYobnVsbD09PShsPWkuZm9ybUl0ZW1NaXR0KXx8dm9pZCAwPT09bHx8bC5lbWl0KFwiZWwuZm9ybS5jaGFuZ2VcIix0KSkpfSxwPXQ9PntRbChlLm1vZGVsVmFsdWUsdCl8fGEuZW1pdChcInVwZGF0ZTptb2RlbFZhbHVlXCIsdCl9LGg9bCgoKCk9PntpZihyLnZhbHVlKXtjb25zdCBlPUUudmFsdWU/ci52YWx1ZTpyLnZhbHVlLiRlbDtyZXR1cm5bXS5zbGljZS5jYWxsKGUucXVlcnlTZWxlY3RvckFsbChcImlucHV0XCIpKX1yZXR1cm5bXX0pKSx2PWwoKCgpPT5lLmRpc2FibGVkfHxvLmRpc2FibGVkKSksbT1sKCgoKT0+e2xldCB0O3JldHVybiBTLnZhbHVlP0kudmFsdWUuZ2V0RGVmYXVsdFZhbHVlJiYodD1JLnZhbHVlLmdldERlZmF1bHRWYWx1ZSgpKTp0PUFycmF5LmlzQXJyYXkoZS5tb2RlbFZhbHVlKT9lLm1vZGVsVmFsdWUubWFwKChlPT5zZShlKSkpOnNlKGUubW9kZWxWYWx1ZSksSS52YWx1ZS5nZXRSYW5nZUF2YWxpYWJsZVRpbWUmJih0PUkudmFsdWUuZ2V0UmFuZ2VBdmFsaWFibGVUaW1lKHQpKSx0fSkpLGY9bCgoKCk9PntpZighSS52YWx1ZS5wYW5lbFJlYWR5KXJldHVybjtpZighYi52YWx1ZSYmUy52YWx1ZSlyZXR1cm47aWYoIXMudmFsdWUmJlMudmFsdWUpcmV0dXJuO2NvbnN0IGU9UChtLnZhbHVlKTtyZXR1cm4gQXJyYXkuaXNBcnJheShULnZhbHVlKT9bVC52YWx1ZVswXXx8ZSYmZVswXXx8XCJcIixULnZhbHVlWzFdfHxlJiZlWzFdfHxcIlwiXTpudWxsIT09VC52YWx1ZT9ULnZhbHVlOmU/ay52YWx1ZT9lLmpvaW4oXCIsIFwiKTplOlwiXCJ9KSksZz1sKCgoKT0+LTEhPT1lLnR5cGUuaW5kZXhPZihcInRpbWVcIikpKSxiPWwoKCgpPT4wPT09ZS50eXBlLmluZGV4T2YoXCJ0aW1lXCIpKSksaz1sKCgoKT0+XCJkYXRlc1wiPT09ZS50eXBlKSksQz1sKCgoKT0+ZS5wcmVmaXhJY29ufHwoZy52YWx1ZT9cImVsLWljb24tdGltZVwiOlwiZWwtaWNvbi1kYXRlXCIpKSksXz10KCExKSxTPWwoKCgpPT4hZS5tb2RlbFZhbHVlfHxBcnJheS5pc0FycmF5KGUubW9kZWxWYWx1ZSkmJiFlLm1vZGVsVmFsdWUubGVuZ3RoKSksRT1sKCgoKT0+ZS50eXBlLmluZGV4T2YoXCJyYW5nZVwiKT4tMSkpLE09bCgoKCk9PmUuc2l6ZXx8aS5zaXplfHxuLnNpemUpKSxUPXQobnVsbCksTj0oKT0+e2lmKFQudmFsdWUpe2NvbnN0IGU9TyhmLnZhbHVlKTtlJiZWKGUpJiYocChlLnRvRGF0ZSgpKSxULnZhbHVlPW51bGwpfVwiXCI9PT1ULnZhbHVlJiYocChudWxsKSxjKG51bGwpLFQudmFsdWU9bnVsbCl9LEQ9KCk9PntoLnZhbHVlLmZvckVhY2goKGU9PmUuYmx1cigpKSl9LE89ZT0+ZT9JLnZhbHVlLnBhcnNlVXNlcklucHV0KGUpOm51bGwsUD1lPT5lP0kudmFsdWUuZm9ybWF0VG9TdHJpbmcoZSk6bnVsbCxWPWU9PkkudmFsdWUuaXNWYWxpZFZhbHVlKGUpLEk9dCh7fSk7cmV0dXJuIHgoXCJFUF9QSUNLRVJfQkFTRVwiLHtwcm9wczplfSkse2lzRGF0ZXNQaWNrZXI6ayxoYW5kbGVFbmRDaGFuZ2U6KCk9Pntjb25zdCBlPU8oVC52YWx1ZSYmVC52YWx1ZVsxXSk7aWYoZSl7VC52YWx1ZT1bZi52YWx1ZVswXSxQKGUpXTtjb25zdCB0PVttLnZhbHVlJiZtLnZhbHVlWzBdLGVdO1YodCkmJihwKHQpLFQudmFsdWU9bnVsbCl9fSxoYW5kbGVTdGFydENoYW5nZTooKT0+e2NvbnN0IGU9TyhULnZhbHVlJiZULnZhbHVlWzBdKTtpZihlKXtULnZhbHVlPVtQKGUpLGYudmFsdWVbMV1dO2NvbnN0IHQ9W2UsbS52YWx1ZSYmbS52YWx1ZVsxXV07Vih0KSYmKHAodCksVC52YWx1ZT1udWxsKX19LGhhbmRsZVN0YXJ0SW5wdXQ6ZT0+e1QudmFsdWU/VC52YWx1ZT1bZS50YXJnZXQudmFsdWUsVC52YWx1ZVsxXV06VC52YWx1ZT1bZS50YXJnZXQudmFsdWUsbnVsbF19LGhhbmRsZUVuZElucHV0OmU9PntULnZhbHVlP1QudmFsdWU9W1QudmFsdWVbMF0sZS50YXJnZXQudmFsdWVdOlQudmFsdWU9W251bGwsZS50YXJnZXQudmFsdWVdfSxvblVzZXJJbnB1dDplPT57VC52YWx1ZT1lfSxoYW5kbGVDaGFuZ2U6TixoYW5kbGVLZXlkb3duOmU9Pntjb25zdCB0PWUuY29kZTtyZXR1cm4gdD09PWZ0LmVzYz8ocy52YWx1ZT0hMSx2b2lkIGUuc3RvcFByb3BhZ2F0aW9uKCkpOnQhPT1mdC50YWI/dD09PWZ0LmVudGVyPygoXCJcIj09PVQudmFsdWV8fFYoTyhmLnZhbHVlKSkpJiYoTigpLHMudmFsdWU9ITEpLHZvaWQgZS5zdG9wUHJvcGFnYXRpb24oKSk6dm9pZChULnZhbHVlP2Uuc3RvcFByb3BhZ2F0aW9uKCk6SS52YWx1ZS5oYW5kbGVLZXlkb3duJiZJLnZhbHVlLmhhbmRsZUtleWRvd24oZSkpOnZvaWQoRS52YWx1ZT9zZXRUaW1lb3V0KCgoKT0+ey0xPT09aC52YWx1ZS5pbmRleE9mKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpJiYocy52YWx1ZT0hMSxEKCkpfSksMCk6KE4oKSxzLnZhbHVlPSExLGUuc3RvcFByb3BhZ2F0aW9uKCkpKX0sb25DbGlja091dHNpZGU6KCk9PntzLnZhbHVlJiYocy52YWx1ZT0hMSl9LHBpY2tlclNpemU6TSxpc1JhbmdlSW5wdXQ6RSxvbk1vdXNlTGVhdmU6KCk9PntfLnZhbHVlPSExfSxvbk1vdXNlRW50ZXI6KCk9PntlLnJlYWRvbmx5fHx2LnZhbHVlfHwhUy52YWx1ZSYmZS5jbGVhcmFibGUmJihfLnZhbHVlPSEwKX0sb25DbGVhckljb25DbGljazp0PT57ZS5yZWFkb25seXx8di52YWx1ZXx8Xy52YWx1ZSYmKHQuc3RvcFByb3BhZ2F0aW9uKCkscChudWxsKSxjKG51bGwpLF8udmFsdWU9ITEscy52YWx1ZT0hMSl9LHNob3dDbG9zZTpfLHRyaWdnZXJDbGFzczpDLG9uUGljazooZT1cIlwiLHQ9ITEpPT57bGV0IGw7cy52YWx1ZT10LGw9QXJyYXkuaXNBcnJheShlKT9lLm1hcCgoZT0+ZS50b0RhdGUoKSkpOmU/ZS50b0RhdGUoKTplLFQudmFsdWU9bnVsbCxwKGwpLGMobCl9LGhhbmRsZUZvY3VzOnQ9PntlLnJlYWRvbmx5fHx2LnZhbHVlfHwocy52YWx1ZT0hMCxhLmVtaXQoXCJmb2N1c1wiLHQpKX0scGlja2VyVmlzaWJsZTpzLHBpY2tlckFjdHVhbFZpc2libGU6dSxkaXNwbGF5VmFsdWU6ZixwYXJzZWRWYWx1ZTptLHNldFNlbGVjdGlvblJhbmdlOihlLHQsbCk9Pntjb25zdCBhPWgudmFsdWU7YS5sZW5ndGgmJihsJiZcIm1pblwiIT09bD9cIm1heFwiPT09bCYmKGFbMV0uc2V0U2VsZWN0aW9uUmFuZ2UoZSx0KSxhWzFdLmZvY3VzKCkpOihhWzBdLnNldFNlbGVjdGlvblJhbmdlKGUsdCksYVswXS5mb2N1cygpKSl9LHJlZkNvbnRhaW5lcjpyLHBpY2tlckRpc2FibGVkOnYsb25TZXRQaWNrZXJPcHRpb246ZT0+e0kudmFsdWVbZVswXV09ZVsxXSxJLnZhbHVlLnBhbmVsUmVhZHk9ITB9fX19KTtjb25zdCBKbD17Y2xhc3M6XCJlbC1yYW5nZS1zZXBhcmF0b3JcIn07WmwucmVuZGVyPWZ1bmN0aW9uKGUsdCxsLG8sYyxoKXtjb25zdCB2PVAoXCJlbC1pbnB1dFwiKSxtPVAoXCJlbC1wb3BwZXJcIiksZj1GKFwiY2xpY2tvdXRzaWRlXCIpO3JldHVybiBhKCksbihFLG51bGwsW3UoXCIgdG9kbyBwb3BwZXIgcHJvcHMgYWxpZ24gbGVmdCAgXCIpLHUoXCIgdG9kbyBwb3BwZXIgY3VzdG9tIHBvcHBlci1jbGFzcyAgXCIpLHUoXCIgdG9kbyBidWcgaGFuZGxlS2V5ZG93biBldmVudCB0d2ljZSAgXCIpLHMobSx7cmVmOlwicG9wcGVyXCIsdmlzaWJsZTplLnBpY2tlclZpc2libGUsXCJvblVwZGF0ZTp2aXNpYmxlXCI6dFsxOF18fCh0WzE4XT10PT5lLnBpY2tlclZpc2libGU9dCksXCJtYW51YWwtbW9kZVwiOlwiXCIsZWZmZWN0OlwibGlnaHRcIixwdXJlOlwiXCIsdHJpZ2dlcjpcImNsaWNrXCIsXCJwb3BwZXItY2xhc3NcIjpcImVsLXBpY2tlcl9fcG9wcGVyXCIsdHJhbnNpdGlvbjpcImVsLXpvb20taW4tdG9wXCIsXCJncHUtYWNjZWxlcmF0aW9uXCI6ITEsXCJzdG9wLXBvcHBlci1tb3VzZS1ldmVudFwiOiExLFwiYXBwZW5kLXRvLWJvZHlcIjpcIlwiLG9uQmVmb3JlRW50ZXI6dFsxOV18fCh0WzE5XT10PT5lLnBpY2tlckFjdHVhbFZpc2libGU9ITApLG9uQWZ0ZXJMZWF2ZTp0WzIwXXx8KHRbMjBdPXQ9PmUucGlja2VyQWN0dWFsVmlzaWJsZT0hMSl9LHt0cmlnZ2VyOmkoKCgpPT5bZS5pc1JhbmdlSW5wdXQ/cigoYSgpLG4oXCJkaXZcIix7a2V5OjEscmVmOlwicmVmQ29udGFpbmVyXCIsY2xhc3M6W1wiZWwtZGF0ZS1lZGl0b3IgZWwtcmFuZ2UtZWRpdG9yIGVsLWlucHV0X19pbm5lclwiLFtcImVsLWRhdGUtZWRpdG9yLS1cIitlLnR5cGUsZS5waWNrZXJTaXplP1wiZWwtcmFuZ2UtZWRpdG9yLS1cIitlLnBpY2tlclNpemU6XCJcIixlLnBpY2tlckRpc2FibGVkP1wiaXMtZGlzYWJsZWRcIjpcIlwiLGUucGlja2VyVmlzaWJsZT9cImlzLWFjdGl2ZVwiOlwiXCJdXSxvbkNsaWNrOnRbMTBdfHwodFsxMF09KC4uLnQpPT5lLmhhbmRsZUZvY3VzKC4uLnQpKSxvbk1vdXNlZW50ZXI6dFsxMV18fCh0WzExXT0oLi4udCk9PmUub25Nb3VzZUVudGVyKC4uLnQpKSxvbk1vdXNlbGVhdmU6dFsxMl18fCh0WzEyXT0oLi4udCk9PmUub25Nb3VzZUxlYXZlKC4uLnQpKSxvbktleWRvd246dFsxM118fCh0WzEzXT0oLi4udCk9PmUuaGFuZGxlS2V5ZG93biguLi50KSl9LFtzKFwiaVwiLHtjbGFzczpbXCJlbC1pbnB1dF9faWNvblwiLFwiZWwtcmFuZ2VfX2ljb25cIixlLnRyaWdnZXJDbGFzc119LG51bGwsMikscyhcImlucHV0XCIse2F1dG9jb21wbGV0ZTpcIm9mZlwiLG5hbWU6ZS5uYW1lJiZlLm5hbWVbMF0scGxhY2Vob2xkZXI6ZS5zdGFydFBsYWNlaG9sZGVyLHZhbHVlOmUuZGlzcGxheVZhbHVlJiZlLmRpc3BsYXlWYWx1ZVswXSxkaXNhYmxlZDplLnBpY2tlckRpc2FibGVkLHJlYWRvbmx5OiFlLmVkaXRhYmxlfHxlLnJlYWRvbmx5LGNsYXNzOlwiZWwtcmFuZ2UtaW5wdXRcIixvbklucHV0OnRbM118fCh0WzNdPSguLi50KT0+ZS5oYW5kbGVTdGFydElucHV0KC4uLnQpKSxvbkNoYW5nZTp0WzRdfHwodFs0XT0oLi4udCk9PmUuaGFuZGxlU3RhcnRDaGFuZ2UoLi4udCkpLG9uRm9jdXM6dFs1XXx8KHRbNV09KC4uLnQpPT5lLmhhbmRsZUZvY3VzKC4uLnQpKX0sbnVsbCw0MCxbXCJuYW1lXCIsXCJwbGFjZWhvbGRlclwiLFwidmFsdWVcIixcImRpc2FibGVkXCIsXCJyZWFkb25seVwiXSksZChlLiRzbG90cyxcInJhbmdlLXNlcGFyYXRvclwiLHt9LCgoKT0+W3MoXCJzcGFuXCIsSmwscChlLnJhbmdlU2VwYXJhdG9yKSwxKV0pKSxzKFwiaW5wdXRcIix7YXV0b2NvbXBsZXRlOlwib2ZmXCIsbmFtZTplLm5hbWUmJmUubmFtZVsxXSxwbGFjZWhvbGRlcjplLmVuZFBsYWNlaG9sZGVyLHZhbHVlOmUuZGlzcGxheVZhbHVlJiZlLmRpc3BsYXlWYWx1ZVsxXSxkaXNhYmxlZDplLnBpY2tlckRpc2FibGVkLHJlYWRvbmx5OiFlLmVkaXRhYmxlfHxlLnJlYWRvbmx5LGNsYXNzOlwiZWwtcmFuZ2UtaW5wdXRcIixvbkZvY3VzOnRbNl18fCh0WzZdPSguLi50KT0+ZS5oYW5kbGVGb2N1cyguLi50KSksb25JbnB1dDp0WzddfHwodFs3XT0oLi4udCk9PmUuaGFuZGxlRW5kSW5wdXQoLi4udCkpLG9uQ2hhbmdlOnRbOF18fCh0WzhdPSguLi50KT0+ZS5oYW5kbGVFbmRDaGFuZ2UoLi4udCkpfSxudWxsLDQwLFtcIm5hbWVcIixcInBsYWNlaG9sZGVyXCIsXCJ2YWx1ZVwiLFwiZGlzYWJsZWRcIixcInJlYWRvbmx5XCJdKSxzKFwiaVwiLHtjbGFzczpbW2Uuc2hvd0Nsb3NlP1wiXCIrZS5jbGVhckljb246XCJcIl0sXCJlbC1pbnB1dF9faWNvbiBlbC1yYW5nZV9fY2xvc2UtaWNvblwiXSxvbkNsaWNrOnRbOV18fCh0WzldPSguLi50KT0+ZS5vbkNsZWFySWNvbkNsaWNrKC4uLnQpKX0sbnVsbCwyKV0sMzQpKSxbW2YsZS5vbkNsaWNrT3V0c2lkZV1dKTpyKChhKCksbih2LHtrZXk6MCxyZWY6XCJyZWZDb250YWluZXJcIixcIm1vZGVsLXZhbHVlXCI6ZS5kaXNwbGF5VmFsdWUsbmFtZTplLm5hbWUsc2l6ZTplLnBpY2tlclNpemUsZGlzYWJsZWQ6ZS5waWNrZXJEaXNhYmxlZCxwbGFjZWhvbGRlcjplLnBsYWNlaG9sZGVyLGNsYXNzOltcImVsLWRhdGUtZWRpdG9yXCIsXCJlbC1kYXRlLWVkaXRvci0tXCIrZS50eXBlXSxyZWFkb25seTohZS5lZGl0YWJsZXx8ZS5yZWFkb25seXx8ZS5pc0RhdGVzUGlja2VyfHxcIndlZWtcIj09PWUudHlwZSxvbklucHV0OmUub25Vc2VySW5wdXQsb25Gb2N1czplLmhhbmRsZUZvY3VzLG9uS2V5ZG93bjplLmhhbmRsZUtleWRvd24sb25DaGFuZ2U6ZS5oYW5kbGVDaGFuZ2Usb25Nb3VzZWVudGVyOmUub25Nb3VzZUVudGVyLG9uTW91c2VsZWF2ZTplLm9uTW91c2VMZWF2ZX0se3ByZWZpeDppKCgoKT0+W3MoXCJpXCIse2NsYXNzOltcImVsLWlucHV0X19pY29uXCIsZS50cmlnZ2VyQ2xhc3NdLG9uQ2xpY2s6dFsxXXx8KHRbMV09KC4uLnQpPT5lLmhhbmRsZUZvY3VzKC4uLnQpKX0sbnVsbCwyKV0pKSxzdWZmaXg6aSgoKCk9PltzKFwiaVwiLHtjbGFzczpbXCJlbC1pbnB1dF9faWNvblwiLFtlLnNob3dDbG9zZT9cIlwiK2UuY2xlYXJJY29uOlwiXCJdXSxvbkNsaWNrOnRbMl18fCh0WzJdPSguLi50KT0+ZS5vbkNsZWFySWNvbkNsaWNrKC4uLnQpKX0sbnVsbCwyKV0pKSxfOjF9LDgsW1wibW9kZWwtdmFsdWVcIixcIm5hbWVcIixcInNpemVcIixcImRpc2FibGVkXCIsXCJwbGFjZWhvbGRlclwiLFwiY2xhc3NcIixcInJlYWRvbmx5XCIsXCJvbklucHV0XCIsXCJvbkZvY3VzXCIsXCJvbktleWRvd25cIixcIm9uQ2hhbmdlXCIsXCJvbk1vdXNlZW50ZXJcIixcIm9uTW91c2VsZWF2ZVwiXSkpLFtbZixlLm9uQ2xpY2tPdXRzaWRlXV0pXSkpLGRlZmF1bHQ6aSgoKCk9PltkKGUuJHNsb3RzLFwiZGVmYXVsdFwiLE0oe3Zpc2libGU6ZS5waWNrZXJWaXNpYmxlLFwiYWN0dWFsLXZpc2libGVcIjplLnBpY2tlckFjdHVhbFZpc2libGUsXCJwYXJzZWQtdmFsdWVcIjplLnBhcnNlZFZhbHVlLGZvcm1hdDplLmZvcm1hdCx0eXBlOmUudHlwZSxcImRlZmF1bHQtdmFsdWVcIjplLmRlZmF1bHRWYWx1ZX0sZS4kYXR0cnMse29uUGljazp0WzE0XXx8KHRbMTRdPSguLi50KT0+ZS5vblBpY2soLi4udCkpLG9uU2VsZWN0UmFuZ2U6dFsxNV18fCh0WzE1XT0oLi4udCk9PmUuc2V0U2VsZWN0aW9uUmFuZ2UoLi4udCkpLG9uU2V0UGlja2VyT3B0aW9uOnRbMTZdfHwodFsxNl09KC4uLnQpPT5lLm9uU2V0UGlja2VyT3B0aW9uKC4uLnQpKSxvbk1vdXNlZG93bjp0WzE3XXx8KHRbMTddPVQoKCgpPT57fSksW1wic3RvcFwiXSkpfSkpXSkpLF86MX0sOCxbXCJ2aXNpYmxlXCJdKV0sNjQpfSxabC5fX2ZpbGU9XCJwYWNrYWdlcy90aW1lLXBpY2tlci9zcmMvY29tbW9uL3BpY2tlci52dWVcIjtjb25zdCBlYT0oZSx0LGwpPT57Y29uc3QgYT1bXSxuPXQmJmwoKTtmb3IobGV0IHQ9MDt0PGU7dCsrKWFbdF09ISFuJiZuLmluY2x1ZGVzKHQpO3JldHVybiBhfSx0YT1lPT5lLm1hcCgoKGUsdCk9PmV8fHQpKS5maWx0ZXIoKGU9PiEwIT09ZSkpLGxhPShlLHQsbCk9Pih7Z2V0SG91cnNMaXN0Oih0LGwpPT5lYSgyNCxlLCgoKT0+ZSh0LGwpKSksZ2V0TWludXRlc0xpc3Q6KGUsbCxhKT0+ZWEoNjAsdCwoKCk9PnQoZSxsLGEpKSksZ2V0U2Vjb25kc0xpc3Q6KGUsdCxhLG4pPT5lYSg2MCxsLCgoKT0+bChlLHQsYSxuKSkpfSksYWE9KGUsdCxsKT0+e2NvbnN0e2dldEhvdXJzTGlzdDphLGdldE1pbnV0ZXNMaXN0Om4sZ2V0U2Vjb25kc0xpc3Q6b309bGEoZSx0LGwpO3JldHVybntnZXRBdmFsaWFibGVIb3VyczooZSx0KT0+dGEoYShlLHQpKSxnZXRBdmFsaWFibGVNaW51dGVzOihlLHQsbCk9PnRhKG4oZSx0LGwpKSxnZXRBdmFsaWFibGVTZWNvbmRzOihlLHQsbCxhKT0+dGEobyhlLHQsbCxhKSl9fTt2YXIgbmE9ZSh7ZGlyZWN0aXZlczp7cmVwZWF0Q2xpY2s6VHR9LGNvbXBvbmVudHM6e0VsU2Nyb2xsYmFyOm5sfSxwcm9wczp7cm9sZTp7dHlwZTpTdHJpbmcscmVxdWlyZWQ6ITB9LHNwaW5uZXJEYXRlOnt0eXBlOk9iamVjdCxyZXF1aXJlZDohMH0sc2hvd1NlY29uZHM6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiEwfSxhcnJvd0NvbnRyb2w6Qm9vbGVhbixhbVBtTW9kZTp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIlwifSxkaXNhYmxlZEhvdXJzOnt0eXBlOkZ1bmN0aW9ufSxkaXNhYmxlZE1pbnV0ZXM6e3R5cGU6RnVuY3Rpb259LGRpc2FibGVkU2Vjb25kczp7dHlwZTpGdW5jdGlvbn19LGVtaXRzOltcImNoYW5nZVwiLFwic2VsZWN0LXJhbmdlXCIsXCJzZXQtb3B0aW9uXCJdLHNldHVwKGUsYSl7Y29uc3Qgbj10KG51bGwpLG89dChudWxsKSxpPXQobnVsbCkscj10KG51bGwpLHM9e2hvdXJzOm8sbWludXRlczppLHNlY29uZHM6cn0sdT1sKCgoKT0+e2NvbnN0IHQ9W1wiaG91cnNcIixcIm1pbnV0ZXNcIixcInNlY29uZHNcIl07cmV0dXJuIGUuc2hvd1NlY29uZHM/dDp0LnNsaWNlKDAsMil9KSksZD1sKCgoKT0+ZS5zcGlubmVyRGF0ZS5ob3VyKCkpKSxjPWwoKCgpPT5lLnNwaW5uZXJEYXRlLm1pbnV0ZSgpKSkscD1sKCgoKT0+ZS5zcGlubmVyRGF0ZS5zZWNvbmQoKSkpLGg9bCgoKCk9Pih7aG91cnM6ZCxtaW51dGVzOmMsc2Vjb25kczpwfSkpKSx2PWwoKCgpPT5JKGUucm9sZSkpKSxtPWwoKCgpPT5BKGQudmFsdWUsZS5yb2xlKSkpLGY9bCgoKCk9PkIoZC52YWx1ZSxjLnZhbHVlLGUucm9sZSkpKSxnPWwoKCgpPT4oe2hvdXJzOnYsbWludXRlczptLHNlY29uZHM6Zn0pKSksYj1sKCgoKT0+e2NvbnN0IGU9ZC52YWx1ZTtyZXR1cm5bZT4wP2UtMTp2b2lkIDAsZSxlPDIzP2UrMTp2b2lkIDBdfSkpLEM9bCgoKCk9Pntjb25zdCBlPWMudmFsdWU7cmV0dXJuW2U+MD9lLTE6dm9pZCAwLGUsZTw1OT9lKzE6dm9pZCAwXX0pKSx4PWwoKCgpPT57Y29uc3QgZT1wLnZhbHVlO3JldHVybltlPjA/ZS0xOnZvaWQgMCxlLGU8NTk/ZSsxOnZvaWQgMF19KSksdz1sKCgoKT0+KHtob3VyczpiLG1pbnV0ZXM6QyxzZWNvbmRzOnh9KSkpLFM9ZT0+e1wiaG91cnNcIj09PWU/YS5lbWl0KFwic2VsZWN0LXJhbmdlXCIsMCwyKTpcIm1pbnV0ZXNcIj09PWU/YS5lbWl0KFwic2VsZWN0LXJhbmdlXCIsMyw1KTpcInNlY29uZHNcIj09PWUmJmEuZW1pdChcInNlbGVjdC1yYW5nZVwiLDYsOCksbi52YWx1ZT1lfSxFPWU9PntUKGUsaC52YWx1ZVtlXS52YWx1ZSl9LE09KCk9PntFKFwiaG91cnNcIiksRShcIm1pbnV0ZXNcIiksRShcInNlY29uZHNcIil9LFQ9KHQsbCk9PntpZihlLmFycm93Q29udHJvbClyZXR1cm47Y29uc3QgYT1zW3RdO2EudmFsdWUmJihhLnZhbHVlLiRlbC5xdWVyeVNlbGVjdG9yKFwiLmVsLXNjcm9sbGJhcl9fd3JhcFwiKS5zY3JvbGxUb3A9TWF0aC5tYXgoMCxsKk4odCkpKX0sTj1lPT5zW2VdLnZhbHVlLiRlbC5xdWVyeVNlbGVjdG9yKFwibGlcIikub2Zmc2V0SGVpZ2h0LEQ9ZT0+e24udmFsdWV8fFMoXCJob3Vyc1wiKTtjb25zdCB0PW4udmFsdWU7bGV0IGw9aC52YWx1ZVt0XS52YWx1ZTtjb25zdCBhPVwiaG91cnNcIj09PW4udmFsdWU/MjQ6NjA7bD0obCtlK2EpJWEsTyh0LGwpLFQodCxsKSxrKCgoKT0+UyhuLnZhbHVlKSkpfSxPPSh0LGwpPT57aWYoIWcudmFsdWVbdF0udmFsdWVbbF0pc3dpdGNoKHQpe2Nhc2VcImhvdXJzXCI6YS5lbWl0KFwiY2hhbmdlXCIsZS5zcGlubmVyRGF0ZS5ob3VyKGwpLm1pbnV0ZShjLnZhbHVlKS5zZWNvbmQocC52YWx1ZSkpO2JyZWFrO2Nhc2VcIm1pbnV0ZXNcIjphLmVtaXQoXCJjaGFuZ2VcIixlLnNwaW5uZXJEYXRlLmhvdXIoZC52YWx1ZSkubWludXRlKGwpLnNlY29uZChwLnZhbHVlKSk7YnJlYWs7Y2FzZVwic2Vjb25kc1wiOmEuZW1pdChcImNoYW5nZVwiLGUuc3Bpbm5lckRhdGUuaG91cihkLnZhbHVlKS5taW51dGUoYy52YWx1ZSkuc2Vjb25kKGwpKX19LFA9ZT0+c1tlXS52YWx1ZS4kZWwub2Zmc2V0SGVpZ2h0LFY9KCk9Pntjb25zdCBlPWU9PntzW2VdLnZhbHVlJiYoc1tlXS52YWx1ZS4kZWwucXVlcnlTZWxlY3RvcihcIi5lbC1zY3JvbGxiYXJfX3dyYXBcIikub25zY3JvbGw9KCk9PnsoZT0+e2NvbnN0IHQ9TWF0aC5taW4oTWF0aC5yb3VuZCgoc1tlXS52YWx1ZS4kZWwucXVlcnlTZWxlY3RvcihcIi5lbC1zY3JvbGxiYXJfX3dyYXBcIikuc2Nyb2xsVG9wLSguNSpQKGUpLTEwKS9OKGUpKzMpL04oZSkpLFwiaG91cnNcIj09PWU/MjM6NTkpO08oZSx0KX0pKGUpfSl9O2UoXCJob3Vyc1wiKSxlKFwibWludXRlc1wiKSxlKFwic2Vjb25kc1wiKX07XygoKCk9PntrKCgoKT0+eyFlLmFycm93Q29udHJvbCYmVigpLE0oKSxcInN0YXJ0XCI9PT1lLnJvbGUmJlMoXCJob3Vyc1wiKX0pKX0pKTthLmVtaXQoXCJzZXQtb3B0aW9uXCIsW2Uucm9sZStcIl9zY3JvbGxEb3duXCIsRF0pLGEuZW1pdChcInNldC1vcHRpb25cIixbZS5yb2xlK1wiX2VtaXRTZWxlY3RSYW5nZVwiLFNdKTtjb25zdHtnZXRIb3Vyc0xpc3Q6SSxnZXRNaW51dGVzTGlzdDpBLGdldFNlY29uZHNMaXN0OkJ9PWxhKGUuZGlzYWJsZWRIb3VycyxlLmRpc2FibGVkTWludXRlcyxlLmRpc2FibGVkU2Vjb25kcyk7cmV0dXJuIHkoKCgpPT5lLnNwaW5uZXJEYXRlKSxNKSx7Z2V0UmVmSWQ6ZT0+YGxpc3Qke2UuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrZS5zbGljZSgxKX1SZWZgLHNwaW5uZXJJdGVtczp1LGN1cnJlbnRTY3JvbGxiYXI6bixob3VyczpkLG1pbnV0ZXM6YyxzZWNvbmRzOnAsaG91cnNMaXN0OnYsbWludXRlc0xpc3Q6bSxhcnJvd0hvdXJMaXN0OmIsYXJyb3dNaW51dGVMaXN0OkMsYXJyb3dTZWNvbmRMaXN0OngsZ2V0QW1QbUZsYWc6dD0+e2lmKCEhIWUuYW1QbU1vZGUpcmV0dXJuXCJcIjtsZXQgbD10PDEyP1wiIGFtXCI6XCIgcG1cIjtyZXR1cm5cIkFcIj09PWUuYW1QbU1vZGUmJihsPWwudG9VcHBlckNhc2UoKSksbH0sZW1pdFNlbGVjdFJhbmdlOlMsYWRqdXN0Q3VycmVudFNwaW5uZXI6RSx0eXBlSXRlbUhlaWdodDpOLGxpc3RIb3Vyc1JlZjpvLGxpc3RNaW51dGVzUmVmOmksbGlzdFNlY29uZHNSZWY6cixvbkluY3JlYXNlQ2xpY2s6KCk9PntEKDEpfSxvbkRlY3JlYXNlQ2xpY2s6KCk9PntEKC0xKX0saGFuZGxlQ2xpY2s6KGUse3ZhbHVlOnQsZGlzYWJsZWQ6bH0pPT57bHx8KE8oZSx0KSxTKGUpLFQoZSx0KSl9LHNlY29uZHNMaXN0OmYsdGltZVBhcnRzTWFwOmgsYXJyb3dMaXN0TWFwOncsbGlzdE1hcDpnfX19KTtjb25zdCBvYT17Y2xhc3M6XCJlbC10aW1lLXNwaW5uZXJfX2Fycm93IGVsLWljb24tYXJyb3ctdXBcIn0saWE9e2NsYXNzOlwiZWwtdGltZS1zcGlubmVyX19hcnJvdyBlbC1pY29uLWFycm93LWRvd25cIn0scmE9e2NsYXNzOlwiZWwtdGltZS1zcGlubmVyX19saXN0XCJ9O25hLnJlbmRlcj1mdW5jdGlvbihlLHQsbCxvLGQsaCl7Y29uc3Qgdj1QKFwiZWwtc2Nyb2xsYmFyXCIpLG09RihcInJlcGVhdC1jbGlja1wiKTtyZXR1cm4gYSgpLG4oXCJkaXZcIix7Y2xhc3M6W1wiZWwtdGltZS1zcGlubmVyXCIse1wiaGFzLXNlY29uZHNcIjplLnNob3dTZWNvbmRzfV19LFtlLmFycm93Q29udHJvbD91KFwidi1pZlwiLCEwKTooYSghMCksbihFLHtrZXk6MH0sSChlLnNwaW5uZXJJdGVtcywodD0+KGEoKSxuKHYse2tleTp0LHJlZjplLmdldFJlZklkKHQpLGNsYXNzOlwiZWwtdGltZS1zcGlubmVyX193cmFwcGVyXCIsXCJ3cmFwLXN0eWxlXCI6XCJtYXgtaGVpZ2h0OiBpbmhlcml0O1wiLFwidmlldy1jbGFzc1wiOlwiZWwtdGltZS1zcGlubmVyX19saXN0XCIsbm9yZXNpemU6XCJcIix0YWc6XCJ1bFwiLG9uTW91c2VlbnRlcjpsPT5lLmVtaXRTZWxlY3RSYW5nZSh0KSxvbk1vdXNlbW92ZTpsPT5lLmFkanVzdEN1cnJlbnRTcGlubmVyKHQpfSx7ZGVmYXVsdDppKCgoKT0+WyhhKCEwKSxuKEUsbnVsbCxIKGUubGlzdE1hcFt0XS52YWx1ZSwoKGwsbyk9PihhKCksbihcImxpXCIse2tleTpvLGNsYXNzOltcImVsLXRpbWUtc3Bpbm5lcl9faXRlbVwiLHthY3RpdmU6bz09PWUudGltZVBhcnRzTWFwW3RdLnZhbHVlLGRpc2FibGVkOmx9XSxvbkNsaWNrOmE9PmUuaGFuZGxlQ2xpY2sodCx7dmFsdWU6byxkaXNhYmxlZDpsfSl9LFtcImhvdXJzXCI9PT10PyhhKCksbihFLHtrZXk6MH0sW2MocCgoXCIwXCIrKGUuYW1QbU1vZGU/byUxMnx8MTI6bykpLnNsaWNlKC0yKSkrcChlLmdldEFtUG1GbGFnKG8pKSwxKV0sNjQpKTooYSgpLG4oRSx7a2V5OjF9LFtjKHAoKFwiMFwiK28pLnNsaWNlKC0yKSksMSldLDY0KSldLDEwLFtcIm9uQ2xpY2tcIl0pKSkpLDEyOCkpXSkpLF86Mn0sMTAzMixbXCJvbk1vdXNlZW50ZXJcIixcIm9uTW91c2Vtb3ZlXCJdKSkpKSwxMjgpKSxlLmFycm93Q29udHJvbD8oYSghMCksbihFLHtrZXk6MX0sSChlLnNwaW5uZXJJdGVtcywodD0+KGEoKSxuKFwiZGl2XCIse2tleTp0LGNsYXNzOlwiZWwtdGltZS1zcGlubmVyX193cmFwcGVyIGlzLWFycm93XCIsb25Nb3VzZWVudGVyOmw9PmUuZW1pdFNlbGVjdFJhbmdlKHQpfSxbcihzKFwiaVwiLG9hLG51bGwsNTEyKSxbW20sZS5vbkRlY3JlYXNlQ2xpY2tdXSkscihzKFwiaVwiLGlhLG51bGwsNTEyKSxbW20sZS5vbkluY3JlYXNlQ2xpY2tdXSkscyhcInVsXCIscmEsWyhhKCEwKSxuKEUsbnVsbCxIKGUuYXJyb3dMaXN0TWFwW3RdLnZhbHVlLCgobCxvKT0+KGEoKSxuKFwibGlcIix7a2V5Om8sY2xhc3M6W1wiZWwtdGltZS1zcGlubmVyX19pdGVtXCIse2FjdGl2ZTpsPT09ZS50aW1lUGFydHNNYXBbdF0udmFsdWUsZGlzYWJsZWQ6ZS5saXN0TWFwW3RdLnZhbHVlW2xdfV19LHAodm9pZCAwPT09bD9cIlwiOihcIjBcIisoZS5hbVBtTW9kZT9sJTEyfHwxMjpsKSkuc2xpY2UoLTIpK2UuZ2V0QW1QbUZsYWcobCkpLDMpKSkpLDEyOCkpXSldLDQwLFtcIm9uTW91c2VlbnRlclwiXSkpKSksMTI4KSk6dShcInYtaWZcIiwhMCldLDIpfSxuYS5fX2ZpbGU9XCJwYWNrYWdlcy90aW1lLXBpY2tlci9zcmMvdGltZS1waWNrZXItY29tL2Jhc2ljLXRpbWUtc3Bpbm5lci52dWVcIjt2YXIgc2E9ZSh7Y29tcG9uZW50czp7VGltZVNwaW5uZXI6bmF9LHByb3BzOnt2aXNpYmxlOkJvb2xlYW4sYWN0dWFsVmlzaWJsZTp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6dm9pZCAwfSxkYXRldGltZVJvbGU6e3R5cGU6U3RyaW5nfSxwYXJzZWRWYWx1ZTp7dHlwZTpbT2JqZWN0LFN0cmluZ119LGZvcm1hdDp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIlwifX0sZW1pdHM6W1wicGlja1wiLFwic2VsZWN0LXJhbmdlXCIsXCJzZXQtcGlja2VyLW9wdGlvblwiXSxzZXR1cChlLGEpe2NvbnN0IG49dChbMCwyXSksbz10KGUucGFyc2VkVmFsdWUpLGk9bCgoKCk9PnZvaWQgMD09PWUuYWN0dWFsVmlzaWJsZT9cImVsLXpvb20taW4tdG9wXCI6XCJcIikpLHI9bCgoKCk9PmUuZm9ybWF0LmluY2x1ZGVzKFwic3NcIikpKSxzPWwoKCgpPT5lLmZvcm1hdC5pbmNsdWRlcyhcIkFcIik/XCJBXCI6ZS5mb3JtYXQuaW5jbHVkZXMoXCJhXCIpP1wiYVwiOlwiXCIpKSx1PXQ9Pntjb25zdCBsPXtob3VyOmcsbWludXRlOmIsc2Vjb25kOnl9O2xldCBhPXQ7cmV0dXJuW1wiaG91clwiLFwibWludXRlXCIsXCJzZWNvbmRcIl0uZm9yRWFjaCgodD0+e2lmKGxbdF0pe2xldCBuO2NvbnN0IG89bFt0XTtuPVwibWludXRlXCI9PT10P28oYS5ob3VyKCksZS5kYXRldGltZVJvbGUpOlwic2Vjb25kXCI9PT10P28oYS5ob3VyKCksYS5taW51dGUoKSxlLmRhdGV0aW1lUm9sZSk6byhlLmRhdGV0aW1lUm9sZSksbiYmbi5sZW5ndGgmJiFuLmluY2x1ZGVzKGFbdF0oKSkmJihhPWFbdF0oblswXSkpfX0pKSxhfTthLmVtaXQoXCJzZXQtcGlja2VyLW9wdGlvblwiLFtcImlzVmFsaWRWYWx1ZVwiLGU9Pntjb25zdCB0PXNlKGUpLGw9dSh0KTtyZXR1cm4gdC5pc1NhbWUobCl9XSksYS5lbWl0KFwic2V0LXBpY2tlci1vcHRpb25cIixbXCJmb3JtYXRUb1N0cmluZ1wiLHQ9PnQ/dC5mb3JtYXQoZS5mb3JtYXQpOm51bGxdKSxhLmVtaXQoXCJzZXQtcGlja2VyLW9wdGlvblwiLFtcInBhcnNlVXNlcklucHV0XCIsdD0+dD9zZSh0LGUuZm9ybWF0KTpudWxsXSksYS5lbWl0KFwic2V0LXBpY2tlci1vcHRpb25cIixbXCJoYW5kbGVLZXlkb3duXCIsZT0+e2NvbnN0IHQ9ZS5jb2RlO2lmKHQ9PT1mdC5sZWZ0fHx0PT09ZnQucmlnaHQpe3JldHVybihlPT57Y29uc3QgdD1bMCwzXS5jb25jYXQoci52YWx1ZT9bNl06W10pLGw9W1wiaG91cnNcIixcIm1pbnV0ZXNcIl0uY29uY2F0KHIudmFsdWU/W1wic2Vjb25kc1wiXTpbXSksYT0odC5pbmRleE9mKG4udmFsdWVbMF0pK2UrdC5sZW5ndGgpJXQubGVuZ3RoO2Quc3RhcnRfZW1pdFNlbGVjdFJhbmdlKGxbYV0pfSkodD09PWZ0LmxlZnQ/LTE6MSksdm9pZCBlLnByZXZlbnREZWZhdWx0KCl9aWYodD09PWZ0LnVwfHx0PT09ZnQuZG93bil7Y29uc3QgbD10PT09ZnQudXA/LTE6MTtyZXR1cm4gZC5taW5fc2Nyb2xsRG93bihsKSx2b2lkIGUucHJldmVudERlZmF1bHQoKX19XSksYS5lbWl0KFwic2V0LXBpY2tlci1vcHRpb25cIixbXCJnZXRSYW5nZUF2YWxpYWJsZVRpbWVcIix1XSksYS5lbWl0KFwic2V0LXBpY2tlci1vcHRpb25cIixbXCJnZXREZWZhdWx0VmFsdWVcIiwoKT0+c2UoZildKTtjb25zdCBkPXt9LGM9dyhcIkVQX1BJQ0tFUl9CQVNFXCIpLHthcnJvd0NvbnRyb2w6cCxkaXNhYmxlZEhvdXJzOmgsZGlzYWJsZWRNaW51dGVzOnYsZGlzYWJsZWRTZWNvbmRzOm0sZGVmYXVsdFZhbHVlOmZ9PWMucHJvcHMse2dldEF2YWxpYWJsZUhvdXJzOmcsZ2V0QXZhbGlhYmxlTWludXRlczpiLGdldEF2YWxpYWJsZVNlY29uZHM6eX09YWEoaCx2LG0pO3JldHVybnt0cmFuc2l0aW9uTmFtZTppLGFycm93Q29udHJvbDpwLG9uU2V0T3B0aW9uOmU9PntkW2VbMF1dPWVbMV19LHQ6cWwsaGFuZGxlQ29uZmlybToodD0hMSxsKT0+e2x8fGEuZW1pdChcInBpY2tcIixlLnBhcnNlZFZhbHVlLHQpfSxoYW5kbGVDaGFuZ2U6dD0+e2lmKCFlLnZpc2libGUpcmV0dXJuO2NvbnN0IGw9dSh0KS5taWxsaXNlY29uZCgwKTthLmVtaXQoXCJwaWNrXCIsbCwhMCl9LHNldFNlbGVjdGlvblJhbmdlOihlLHQpPT57YS5lbWl0KFwic2VsZWN0LXJhbmdlXCIsZSx0KSxuLnZhbHVlPVtlLHRdfSxhbVBtTW9kZTpzLHNob3dTZWNvbmRzOnIsaGFuZGxlQ2FuY2VsOigpPT57YS5lbWl0KFwicGlja1wiLG8udmFsdWUsITEpfSxkaXNhYmxlZEhvdXJzOmgsZGlzYWJsZWRNaW51dGVzOnYsZGlzYWJsZWRTZWNvbmRzOm19fX0pO2NvbnN0IHVhPXtrZXk6MCxjbGFzczpcImVsLXRpbWUtcGFuZWxcIn0sZGE9e2NsYXNzOlwiZWwtdGltZS1wYW5lbF9fZm9vdGVyXCJ9O3NhLnJlbmRlcj1mdW5jdGlvbihlLHQsbCxyLGQsYyl7Y29uc3QgaD1QKFwidGltZS1zcGlubmVyXCIpO3JldHVybiBhKCksbihvLHtuYW1lOmUudHJhbnNpdGlvbk5hbWV9LHtkZWZhdWx0OmkoKCgpPT5bZS5hY3R1YWxWaXNpYmxlfHxlLnZpc2libGU/KGEoKSxuKFwiZGl2XCIsdWEsW3MoXCJkaXZcIix7Y2xhc3M6W1wiZWwtdGltZS1wYW5lbF9fY29udGVudFwiLHtcImhhcy1zZWNvbmRzXCI6ZS5zaG93U2Vjb25kc31dfSxbcyhoLHtyZWY6XCJzcGlubmVyXCIscm9sZTplLmRhdGV0aW1lUm9sZXx8XCJzdGFydFwiLFwiYXJyb3ctY29udHJvbFwiOmUuYXJyb3dDb250cm9sLFwic2hvdy1zZWNvbmRzXCI6ZS5zaG93U2Vjb25kcyxcImFtLXBtLW1vZGVcIjplLmFtUG1Nb2RlLFwic3Bpbm5lci1kYXRlXCI6ZS5wYXJzZWRWYWx1ZSxcImRpc2FibGVkLWhvdXJzXCI6ZS5kaXNhYmxlZEhvdXJzLFwiZGlzYWJsZWQtbWludXRlc1wiOmUuZGlzYWJsZWRNaW51dGVzLFwiZGlzYWJsZWQtc2Vjb25kc1wiOmUuZGlzYWJsZWRTZWNvbmRzLG9uQ2hhbmdlOmUuaGFuZGxlQ2hhbmdlLG9uU2V0T3B0aW9uOmUub25TZXRPcHRpb24sb25TZWxlY3RSYW5nZTplLnNldFNlbGVjdGlvblJhbmdlfSxudWxsLDgsW1wicm9sZVwiLFwiYXJyb3ctY29udHJvbFwiLFwic2hvdy1zZWNvbmRzXCIsXCJhbS1wbS1tb2RlXCIsXCJzcGlubmVyLWRhdGVcIixcImRpc2FibGVkLWhvdXJzXCIsXCJkaXNhYmxlZC1taW51dGVzXCIsXCJkaXNhYmxlZC1zZWNvbmRzXCIsXCJvbkNoYW5nZVwiLFwib25TZXRPcHRpb25cIixcIm9uU2VsZWN0UmFuZ2VcIl0pXSwyKSxzKFwiZGl2XCIsZGEsW3MoXCJidXR0b25cIix7dHlwZTpcImJ1dHRvblwiLGNsYXNzOlwiZWwtdGltZS1wYW5lbF9fYnRuIGNhbmNlbFwiLG9uQ2xpY2s6dFsxXXx8KHRbMV09KC4uLnQpPT5lLmhhbmRsZUNhbmNlbCguLi50KSl9LHAoZS50KFwiZWwuZGF0ZXBpY2tlci5jYW5jZWxcIikpLDEpLHMoXCJidXR0b25cIix7dHlwZTpcImJ1dHRvblwiLGNsYXNzOlwiZWwtdGltZS1wYW5lbF9fYnRuIGNvbmZpcm1cIixvbkNsaWNrOnRbMl18fCh0WzJdPXQ9PmUuaGFuZGxlQ29uZmlybSgpKX0scChlLnQoXCJlbC5kYXRlcGlja2VyLmNvbmZpcm1cIikpLDEpXSldKSk6dShcInYtaWZcIiwhMCldKSksXzoxfSw4LFtcIm5hbWVcIl0pfSxzYS5fX2ZpbGU9XCJwYWNrYWdlcy90aW1lLXBpY2tlci9zcmMvdGltZS1waWNrZXItY29tL3BhbmVsLXRpbWUtcGljay52dWVcIjtjb25zdCBjYT0oZSx0KT0+e2NvbnN0IGw9W107Zm9yKGxldCBhPWU7YTw9dDthKyspbC5wdXNoKGEpO3JldHVybiBsfTt2YXIgcGE9ZSh7Y29tcG9uZW50czp7VGltZVNwaW5uZXI6bmF9LHByb3BzOnt2aXNpYmxlOkJvb2xlYW4sYWN0dWFsVmlzaWJsZTpCb29sZWFuLHBhcnNlZFZhbHVlOnt0eXBlOltBcnJheSxTdHJpbmddfSxmb3JtYXQ6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJcIn19LGVtaXRzOltcInBpY2tcIixcInNlbGVjdC1yYW5nZVwiLFwic2V0LXBpY2tlci1vcHRpb25cIl0sc2V0dXAoZSxhKXtjb25zdCBuPWwoKCgpPT5lLnBhcnNlZFZhbHVlWzBdKSksbz1sKCgoKT0+ZS5wYXJzZWRWYWx1ZVsxXSkpLGk9dChlLnBhcnNlZFZhbHVlKSxyPWwoKCgpPT5lLmZvcm1hdC5pbmNsdWRlcyhcInNzXCIpKSkscz1sKCgoKT0+ZS5mb3JtYXQuaW5jbHVkZXMoXCJBXCIpP1wiQVwiOmUuZm9ybWF0LmluY2x1ZGVzKFwiYVwiKT9cImFcIjpcIlwiKSksdT10KFtdKSxkPXQoW10pLGM9KGUsdCk9PnthLmVtaXQoXCJwaWNrXCIsW2UsdF0sITApfSxwPWwoKCgpPT5uLnZhbHVlPm8udmFsdWUpKSxoPXQoWzAsMl0pLHY9bCgoKCk9PnIudmFsdWU/MTE6OCkpLG09KGUsdCk9Pntjb25zdCBsPU0/TShlKTpbXSxhPVwic3RhcnRcIj09PWUsaT0odHx8KGE/by52YWx1ZTpuLnZhbHVlKSkuaG91cigpLHI9YT9jYShpKzEsMjMpOmNhKDAsaS0xKTtyZXR1cm4gY2UobCxyKX0sZj0oZSx0LGwpPT57Y29uc3QgYT1UP1QoZSx0KTpbXSxpPVwic3RhcnRcIj09PXQscj1sfHwoaT9vLnZhbHVlOm4udmFsdWUpO2lmKGUhPT1yLmhvdXIoKSlyZXR1cm4gYTtjb25zdCBzPXIubWludXRlKCksdT1pP2NhKHMrMSw1OSk6Y2EoMCxzLTEpO3JldHVybiBjZShhLHUpfSxnPShlLHQsbCxhKT0+e2NvbnN0IGk9Tj9OKGUsdCxsKTpbXSxyPVwic3RhcnRcIj09PWwscz1hfHwocj9vLnZhbHVlOm4udmFsdWUpLHU9cy5ob3VyKCksZD1zLm1pbnV0ZSgpO2lmKGUhPT11fHx0IT09ZClyZXR1cm4gaTtjb25zdCBjPXMuc2Vjb25kKCkscD1yP2NhKGMrMSw1OSk6Y2EoMCxjLTEpO3JldHVybiBjZShpLHApfSxiPWU9PmUubWFwKCgodCxsKT0+eChlWzBdLGVbMV0sMD09PWw/XCJzdGFydFwiOlwiZW5kXCIpKSkse2dldEF2YWxpYWJsZUhvdXJzOnksZ2V0QXZhbGlhYmxlTWludXRlczprLGdldEF2YWxpYWJsZVNlY29uZHM6Q309YWEobSxmLGcpLHg9KGUsdCxsKT0+e2NvbnN0IGE9e2hvdXI6eSxtaW51dGU6ayxzZWNvbmQ6Q30sbj1cInN0YXJ0XCI9PT1sO2xldCBvPW4/ZTp0O2NvbnN0IGk9bj90OmU7cmV0dXJuW1wiaG91clwiLFwibWludXRlXCIsXCJzZWNvbmRcIl0uZm9yRWFjaCgoZT0+e2lmKGFbZV0pe2xldCB0O2NvbnN0IHI9YVtlXTtpZih0PVwibWludXRlXCI9PT1lP3Ioby5ob3VyKCksbCxpKTpcInNlY29uZFwiPT09ZT9yKG8uaG91cigpLG8ubWludXRlKCksbCxpKTpyKGwsaSksdCYmdC5sZW5ndGgmJiF0LmluY2x1ZGVzKG9bZV0oKSkpe2NvbnN0IGw9bj8wOnQubGVuZ3RoLTE7bz1vW2VdKHRbbF0pfX19KSksb307YS5lbWl0KFwic2V0LXBpY2tlci1vcHRpb25cIixbXCJmb3JtYXRUb1N0cmluZ1wiLHQ9PnQ/QXJyYXkuaXNBcnJheSh0KT90Lm1hcCgodD0+dC5mb3JtYXQoZS5mb3JtYXQpKSk6dC5mb3JtYXQoZS5mb3JtYXQpOm51bGxdKSxhLmVtaXQoXCJzZXQtcGlja2VyLW9wdGlvblwiLFtcInBhcnNlVXNlcklucHV0XCIsdD0+dD9BcnJheS5pc0FycmF5KHQpP3QubWFwKCh0PT5zZSh0LGUuZm9ybWF0KSkpOnNlKHQsZS5mb3JtYXQpOm51bGxdKSxhLmVtaXQoXCJzZXQtcGlja2VyLW9wdGlvblwiLFtcImlzVmFsaWRWYWx1ZVwiLGU9Pntjb25zdCB0PWUubWFwKChlPT5zZShlKSkpLGw9Yih0KTtyZXR1cm4gdFswXS5pc1NhbWUobFswXSkmJnRbMV0uaXNTYW1lKGxbMV0pfV0pLGEuZW1pdChcInNldC1waWNrZXItb3B0aW9uXCIsW1wiaGFuZGxlS2V5ZG93blwiLGU9Pntjb25zdCB0PWUuY29kZTtpZih0PT09ZnQubGVmdHx8dD09PWZ0LnJpZ2h0KXtyZXR1cm4oZT0+e2NvbnN0IHQ9ci52YWx1ZT9bMCwzLDYsMTEsMTQsMTddOlswLDMsOCwxMV0sbD1bXCJob3Vyc1wiLFwibWludXRlc1wiXS5jb25jYXQoci52YWx1ZT9bXCJzZWNvbmRzXCJdOltdKSxhPSh0LmluZGV4T2YoaC52YWx1ZVswXSkrZSt0Lmxlbmd0aCkldC5sZW5ndGgsbj10Lmxlbmd0aC8yO2E8bj9fLnN0YXJ0X2VtaXRTZWxlY3RSYW5nZShsW2FdKTpfLmVuZF9lbWl0U2VsZWN0UmFuZ2UobFthLW5dKX0pKHQ9PT1mdC5sZWZ0Py0xOjEpLHZvaWQgZS5wcmV2ZW50RGVmYXVsdCgpfWlmKHQ9PT1mdC51cHx8dD09PWZ0LmRvd24pe2NvbnN0IGw9dD09PWZ0LnVwPy0xOjEsYT1oLnZhbHVlWzBdPHYudmFsdWU/XCJzdGFydFwiOlwiZW5kXCI7cmV0dXJuIF9bYStcIl9zY3JvbGxEb3duXCJdKGwpLHZvaWQgZS5wcmV2ZW50RGVmYXVsdCgpfX1dKSxhLmVtaXQoXCJzZXQtcGlja2VyLW9wdGlvblwiLFtcImdldERlZmF1bHRWYWx1ZVwiLCgpPT5BcnJheS5pc0FycmF5KEQpP0QubWFwKChlPT5zZShlKSkpOltzZShEKSxzZShEKS5hZGQoNjAsXCJtXCIpXV0pLGEuZW1pdChcInNldC1waWNrZXItb3B0aW9uXCIsW1wiZ2V0UmFuZ2VBdmFsaWFibGVUaW1lXCIsYl0pO2NvbnN0IF89e30sUz13KFwiRVBfUElDS0VSX0JBU0VcIikse2Fycm93Q29udHJvbDpFLGRpc2FibGVkSG91cnM6TSxkaXNhYmxlZE1pbnV0ZXM6VCxkaXNhYmxlZFNlY29uZHM6TixkZWZhdWx0VmFsdWU6RH09Uy5wcm9wcztyZXR1cm57YXJyb3dDb250cm9sOkUsb25TZXRPcHRpb246ZT0+e19bZVswXV09ZVsxXX0sc2V0TWF4U2VsZWN0aW9uUmFuZ2U6KGUsdCk9PnthLmVtaXQoXCJzZWxlY3QtcmFuZ2VcIixlLHQsXCJtYXhcIiksaC52YWx1ZT1bZSt2LnZhbHVlLHQrdi52YWx1ZV19LHNldE1pblNlbGVjdGlvblJhbmdlOihlLHQpPT57YS5lbWl0KFwic2VsZWN0LXJhbmdlXCIsZSx0LFwibWluXCIpLGgudmFsdWU9W2UsdF19LGJ0bkNvbmZpcm1EaXNhYmxlZDpwLGhhbmRsZUNhbmNlbDooKT0+e2EuZW1pdChcInBpY2tcIixpLnZhbHVlLG51bGwpfSxoYW5kbGVDb25maXJtOihlPSExKT0+e2EuZW1pdChcInBpY2tcIixbbi52YWx1ZSxvLnZhbHVlXSxlKX0sdDpxbCxzaG93U2Vjb25kczpyLG1pbkRhdGU6bixtYXhEYXRlOm8sYW1QbU1vZGU6cyxoYW5kbGVNaW5DaGFuZ2U6ZT0+e2MoZS5taWxsaXNlY29uZCgwKSxvLnZhbHVlKX0saGFuZGxlTWF4Q2hhbmdlOmU9PntjKG4udmFsdWUsZS5taWxsaXNlY29uZCgwKSl9LG1pblNlbGVjdGFibGVSYW5nZTp1LG1heFNlbGVjdGFibGVSYW5nZTpkLGRpc2FibGVkSG91cnNfOm0sZGlzYWJsZWRNaW51dGVzXzpmLGRpc2FibGVkU2Vjb25kc186Z319fSk7Y29uc3QgaGE9e2tleTowLGNsYXNzOlwiZWwtdGltZS1yYW5nZS1waWNrZXIgZWwtcGlja2VyLXBhbmVsXCJ9LHZhPXtjbGFzczpcImVsLXRpbWUtcmFuZ2UtcGlja2VyX19jb250ZW50XCJ9LG1hPXtjbGFzczpcImVsLXRpbWUtcmFuZ2UtcGlja2VyX19jZWxsXCJ9LGZhPXtjbGFzczpcImVsLXRpbWUtcmFuZ2UtcGlja2VyX19oZWFkZXJcIn0sZ2E9e2NsYXNzOlwiZWwtdGltZS1yYW5nZS1waWNrZXJfX2NlbGxcIn0sYmE9e2NsYXNzOlwiZWwtdGltZS1yYW5nZS1waWNrZXJfX2hlYWRlclwifSx5YT17Y2xhc3M6XCJlbC10aW1lLXBhbmVsX19mb290ZXJcIn07cGEucmVuZGVyPWZ1bmN0aW9uKGUsdCxsLG8saSxyKXtjb25zdCBkPVAoXCJ0aW1lLXNwaW5uZXJcIik7cmV0dXJuIGUuYWN0dWFsVmlzaWJsZT8oYSgpLG4oXCJkaXZcIixoYSxbcyhcImRpdlwiLHZhLFtzKFwiZGl2XCIsbWEsW3MoXCJkaXZcIixmYSxwKGUudChcImVsLmRhdGVwaWNrZXIuc3RhcnRUaW1lXCIpKSwxKSxzKFwiZGl2XCIse2NsYXNzOlt7XCJoYXMtc2Vjb25kc1wiOmUuc2hvd1NlY29uZHMsXCJpcy1hcnJvd1wiOmUuYXJyb3dDb250cm9sfSxcImVsLXRpbWUtcmFuZ2UtcGlja2VyX19ib2R5IGVsLXRpbWUtcGFuZWxfX2NvbnRlbnRcIl19LFtzKGQse3JlZjpcIm1pblNwaW5uZXJcIixyb2xlOlwic3RhcnRcIixcInNob3ctc2Vjb25kc1wiOmUuc2hvd1NlY29uZHMsXCJhbS1wbS1tb2RlXCI6ZS5hbVBtTW9kZSxcImFycm93LWNvbnRyb2xcIjplLmFycm93Q29udHJvbCxcInNwaW5uZXItZGF0ZVwiOmUubWluRGF0ZSxcImRpc2FibGVkLWhvdXJzXCI6ZS5kaXNhYmxlZEhvdXJzXyxcImRpc2FibGVkLW1pbnV0ZXNcIjplLmRpc2FibGVkTWludXRlc18sXCJkaXNhYmxlZC1zZWNvbmRzXCI6ZS5kaXNhYmxlZFNlY29uZHNfLG9uQ2hhbmdlOmUuaGFuZGxlTWluQ2hhbmdlLG9uU2V0T3B0aW9uOmUub25TZXRPcHRpb24sb25TZWxlY3RSYW5nZTplLnNldE1pblNlbGVjdGlvblJhbmdlfSxudWxsLDgsW1wic2hvdy1zZWNvbmRzXCIsXCJhbS1wbS1tb2RlXCIsXCJhcnJvdy1jb250cm9sXCIsXCJzcGlubmVyLWRhdGVcIixcImRpc2FibGVkLWhvdXJzXCIsXCJkaXNhYmxlZC1taW51dGVzXCIsXCJkaXNhYmxlZC1zZWNvbmRzXCIsXCJvbkNoYW5nZVwiLFwib25TZXRPcHRpb25cIixcIm9uU2VsZWN0UmFuZ2VcIl0pXSwyKV0pLHMoXCJkaXZcIixnYSxbcyhcImRpdlwiLGJhLHAoZS50KFwiZWwuZGF0ZXBpY2tlci5lbmRUaW1lXCIpKSwxKSxzKFwiZGl2XCIse2NsYXNzOlt7XCJoYXMtc2Vjb25kc1wiOmUuc2hvd1NlY29uZHMsXCJpcy1hcnJvd1wiOmUuYXJyb3dDb250cm9sfSxcImVsLXRpbWUtcmFuZ2UtcGlja2VyX19ib2R5IGVsLXRpbWUtcGFuZWxfX2NvbnRlbnRcIl19LFtzKGQse3JlZjpcIm1heFNwaW5uZXJcIixyb2xlOlwiZW5kXCIsXCJzaG93LXNlY29uZHNcIjplLnNob3dTZWNvbmRzLFwiYW0tcG0tbW9kZVwiOmUuYW1QbU1vZGUsXCJhcnJvdy1jb250cm9sXCI6ZS5hcnJvd0NvbnRyb2wsXCJzcGlubmVyLWRhdGVcIjplLm1heERhdGUsXCJkaXNhYmxlZC1ob3Vyc1wiOmUuZGlzYWJsZWRIb3Vyc18sXCJkaXNhYmxlZC1taW51dGVzXCI6ZS5kaXNhYmxlZE1pbnV0ZXNfLFwiZGlzYWJsZWQtc2Vjb25kc1wiOmUuZGlzYWJsZWRTZWNvbmRzXyxvbkNoYW5nZTplLmhhbmRsZU1heENoYW5nZSxvblNldE9wdGlvbjplLm9uU2V0T3B0aW9uLG9uU2VsZWN0UmFuZ2U6ZS5zZXRNYXhTZWxlY3Rpb25SYW5nZX0sbnVsbCw4LFtcInNob3ctc2Vjb25kc1wiLFwiYW0tcG0tbW9kZVwiLFwiYXJyb3ctY29udHJvbFwiLFwic3Bpbm5lci1kYXRlXCIsXCJkaXNhYmxlZC1ob3Vyc1wiLFwiZGlzYWJsZWQtbWludXRlc1wiLFwiZGlzYWJsZWQtc2Vjb25kc1wiLFwib25DaGFuZ2VcIixcIm9uU2V0T3B0aW9uXCIsXCJvblNlbGVjdFJhbmdlXCJdKV0sMildKV0pLHMoXCJkaXZcIix5YSxbcyhcImJ1dHRvblwiLHt0eXBlOlwiYnV0dG9uXCIsY2xhc3M6XCJlbC10aW1lLXBhbmVsX19idG4gY2FuY2VsXCIsb25DbGljazp0WzFdfHwodFsxXT10PT5lLmhhbmRsZUNhbmNlbCgpKX0scChlLnQoXCJlbC5kYXRlcGlja2VyLmNhbmNlbFwiKSksMSkscyhcImJ1dHRvblwiLHt0eXBlOlwiYnV0dG9uXCIsY2xhc3M6XCJlbC10aW1lLXBhbmVsX19idG4gY29uZmlybVwiLGRpc2FibGVkOmUuYnRuQ29uZmlybURpc2FibGVkLG9uQ2xpY2s6dFsyXXx8KHRbMl09dD0+ZS5oYW5kbGVDb25maXJtKCkpfSxwKGUudChcImVsLmRhdGVwaWNrZXIuY29uZmlybVwiKSksOSxbXCJkaXNhYmxlZFwiXSldKV0pKTp1KFwidi1pZlwiLCEwKX0scGEuX19maWxlPVwicGFja2FnZXMvdGltZS1waWNrZXIvc3JjL3RpbWUtcGlja2VyLWNvbS9wYW5lbC10aW1lLXJhbmdlLnZ1ZVwiLHNlLmV4dGVuZChkZSk7dmFyIGthPWUoe25hbWU6XCJFbFRpbWVQaWNrZXJcIixpbnN0YWxsOm51bGwscHJvcHM6T2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LEdsKSx7aXNSYW5nZTp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITF9fSksc2V0dXAoZSx0KXtjb25zdCBsPWUuaXNSYW5nZT9cInRpbWVyYW5nZVwiOlwidGltZVwiLGE9ZS5pc1JhbmdlP3BhOnNhO3JldHVybigpPT5EKFpsLE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7Zm9ybWF0OlwiSEg6bW06c3NcIn0sZSkse3R5cGU6bCxcIm9uVXBkYXRlOm1vZGVsVmFsdWVcIjplPT50LmVtaXQoXCJ1cGRhdGU6bW9kZWxWYWx1ZVwiLGUpfSkse2RlZmF1bHQ6ZT0+RChhLGUpfSl9fSk7Y29uc3QgQ2E9ZT0+QXJyYXkuZnJvbShBcnJheShlKS5rZXlzKCkpLHhhPWU9PmUucmVwbGFjZSgvXFxXP217MSwyfXxcXFc/WlovZyxcIlwiKS5yZXBsYWNlKC9cXFc/aHsxLDJ9fFxcVz9zezEsM318XFxXP2EvZ2ksXCJcIikudHJpbSgpLHdhPWU9PmUucmVwbGFjZSgvXFxXP0R7MSwyfXxcXFc/RG98XFxXP2R7MSw0fXxcXFc/TXsxLDR9fFxcVz9ZezIsNH0vZyxcIlwiKS50cmltKCk7a2EuaW5zdGFsbD1lPT57ZS5jb21wb25lbnQoa2EubmFtZSxrYSl9LHNlLmV4dGVuZCh1ZSk7dmFyIF9hPWUoe3Byb3BzOntzZWxlY3RlZERheTp7dHlwZTpPYmplY3R9LHJhbmdlOnt0eXBlOkFycmF5fSxkYXRlOnt0eXBlOk9iamVjdH0saGlkZUhlYWRlcjp7dHlwZTpCb29sZWFufX0sZW1pdHM6W1wicGlja1wiXSxzZXR1cChlLGEpe2NvbnN0IG49dChzZSgpLmxvY2FsZURhdGEoKS53ZWVrZGF5c1Nob3J0KCkpLG89c2UoKSxpPW8uJGxvY2FsZSgpLndlZWtTdGFydHx8MCxyPSh0LGwpPT57bGV0IGE7cmV0dXJuIGE9XCJwcmV2XCI9PT1sP2UuZGF0ZS5zdGFydE9mKFwibW9udGhcIikuc3VidHJhY3QoMSxcIm1vbnRoXCIpLmRhdGUodCk6XCJuZXh0XCI9PT1sP2UuZGF0ZS5zdGFydE9mKFwibW9udGhcIikuYWRkKDEsXCJtb250aFwiKS5kYXRlKHQpOmUuZGF0ZS5kYXRlKHQpLGF9LHM9bCgoKCk9PmUucmFuZ2UmJmUucmFuZ2UubGVuZ3RoKSksdT1sKCgoKT0+e2xldCB0PVtdO2lmKHMudmFsdWUpe2NvbnN0W2wsYV09ZS5yYW5nZSxuPUNhKGEuZGF0ZSgpLWwuZGF0ZSgpKzEpLm1hcCgoKGUsdCk9Pih7dGV4dDpsLmRhdGUoKSt0LHR5cGU6XCJjdXJyZW50XCJ9KSkpO2xldCBvPW4ubGVuZ3RoJTc7bz0wPT09bz8wOjctbztjb25zdCBpPUNhKG8pLm1hcCgoKGUsdCk9Pih7dGV4dDp0KzEsdHlwZTpcIm5leHRcIn0pKSk7dD1uLmNvbmNhdChpKX1lbHNle2NvbnN0IGw9ZS5kYXRlLnN0YXJ0T2YoXCJtb250aFwiKS5kYXkoKXx8Nzt0PVsuLi4oKGUsdCk9Pntjb25zdCBsPWUuc3VidHJhY3QoMSxcIm1vbnRoXCIpLmVuZE9mKFwibW9udGhcIikuZGF0ZSgpO3JldHVybiBDYSh0KS5tYXAoKChlLGEpPT5sLSh0LWEtMSkpKX0pKGUuZGF0ZSxsLWkpLm1hcCgoZT0+KHt0ZXh0OmUsdHlwZTpcInByZXZcIn0pKSksLi4uKGU9Pntjb25zdCB0PWUuZGF5c0luTW9udGgoKTtyZXR1cm4gQ2EodCkubWFwKCgoZSx0KT0+dCsxKSl9KShlLmRhdGUpLm1hcCgoZT0+KHt0ZXh0OmUsdHlwZTpcImN1cnJlbnRcIn0pKSldO2NvbnN0IGE9Q2EoNDItdC5sZW5ndGgpLm1hcCgoKGUsdCk9Pih7dGV4dDp0KzEsdHlwZTpcIm5leHRcIn0pKSk7dD10LmNvbmNhdChhKX1yZXR1cm4oZT0+Q2EoZS5sZW5ndGgvNykubWFwKCgodCxsKT0+e2NvbnN0IGE9NypsO3JldHVybiBlLnNsaWNlKGEsYSs3KX0pKSkodCl9KSksZD1sKCgoKT0+e2NvbnN0IGU9aTtyZXR1cm4gMD09PWU/bi52YWx1ZTpuLnZhbHVlLnNsaWNlKGUpLmNvbmNhdChuLnZhbHVlLnNsaWNlKDAsZSkpfSkpO3JldHVybntpc0luUmFuZ2U6cyx3ZWVrRGF5czpkLHJvd3M6dSxnZXRDZWxsQ2xhc3M6KHt0ZXh0OnQsdHlwZTpsfSk9Pntjb25zdCBhPVtsXTtpZihcImN1cnJlbnRcIj09PWwpe2NvbnN0IG49cih0LGwpO24uaXNTYW1lKGUuc2VsZWN0ZWREYXksXCJkYXlcIikmJmEucHVzaChcImlzLXNlbGVjdGVkXCIpLG4uaXNTYW1lKG8sXCJkYXlcIikmJmEucHVzaChcImlzLXRvZGF5XCIpfXJldHVybiBhfSxwaWNrRGF5Oih7dGV4dDplLHR5cGU6dH0pPT57Y29uc3QgbD1yKGUsdCk7YS5lbWl0KFwicGlja1wiLGwpfSxnZXRTbG90RGF0YTooe3RleHQ6dCx0eXBlOmx9KT0+e2NvbnN0IGE9cih0LGwpO3JldHVybntpc1NlbGVjdGVkOmEuaXNTYW1lKGUuc2VsZWN0ZWREYXkpLHR5cGU6bCtcIi1tb250aFwiLGRheTphLmZvcm1hdChcIllZWVktTU0tRERcIiksZGF0ZTphLnRvRGF0ZSgpfX19fX0pO2NvbnN0IFNhPXtrZXk6MH0sRWE9e2NsYXNzOlwiZWwtY2FsZW5kYXItZGF5XCJ9O19hLnJlbmRlcj1mdW5jdGlvbihlLHQsbCxvLGkscil7cmV0dXJuIGEoKSxuKFwidGFibGVcIix7Y2xhc3M6e1wiZWwtY2FsZW5kYXItdGFibGVcIjohMCxcImlzLXJhbmdlXCI6ZS5pc0luUmFuZ2V9LGNlbGxzcGFjaW5nOlwiMFwiLGNlbGxwYWRkaW5nOlwiMFwifSxbZS5oaWRlSGVhZGVyP3UoXCJ2LWlmXCIsITApOihhKCksbihcInRoZWFkXCIsU2EsWyhhKCEwKSxuKEUsbnVsbCxIKGUud2Vla0RheXMsKGU9PihhKCksbihcInRoXCIse2tleTplfSxwKGUpLDEpKSkpLDEyOCkpXSkpLHMoXCJ0Ym9keVwiLG51bGwsWyhhKCEwKSxuKEUsbnVsbCxIKGUucm93cywoKHQsbCk9PihhKCksbihcInRyXCIse2tleTpsLGNsYXNzOntcImVsLWNhbGVuZGFyLXRhYmxlX19yb3dcIjohMCxcImVsLWNhbGVuZGFyLXRhYmxlX19yb3ctLWhpZGUtYm9yZGVyXCI6MD09PWwmJmUuaGlkZUhlYWRlcn19LFsoYSghMCksbihFLG51bGwsSCh0LCgodCxsKT0+KGEoKSxuKFwidGRcIix7a2V5OmwsY2xhc3M6ZS5nZXRDZWxsQ2xhc3ModCksb25DbGljazpsPT5lLnBpY2tEYXkodCl9LFtzKFwiZGl2XCIsRWEsW2QoZS4kc2xvdHMsXCJkYXRlQ2VsbFwiLHtkYXRhOmUuZ2V0U2xvdERhdGEodCl9LCgoKT0+W3MoXCJzcGFuXCIsbnVsbCxwKHQudGV4dCksMSldKSldKV0sMTAsW1wib25DbGlja1wiXSkpKSksMTI4KSldLDIpKSkpLDEyOCkpXSldLDIpfSxfYS5fX2ZpbGU9XCJwYWNrYWdlcy9jYWxlbmRhci9zcmMvZGF0ZS10YWJsZS52dWVcIjt2YXIgTWE9ZSh7bmFtZTpcIkVsQ2FsZW5kYXJcIixjb21wb25lbnRzOntEYXRlVGFibGU6X2EsRWxCdXR0b246JGwsRWxCdXR0b25Hcm91cDpXbH0scHJvcHM6e21vZGVsVmFsdWU6e3R5cGU6RGF0ZX0scmFuZ2U6e3R5cGU6QXJyYXksdmFsaWRhdG9yOmU9PiEhQXJyYXkuaXNBcnJheShlKSYmKDI9PT1lLmxlbmd0aCYmZS5ldmVyeSgoZT0+ZSBpbnN0YW5jZW9mIERhdGUpKSl9fSxlbWl0czpbXCJpbnB1dFwiLFwidXBkYXRlOm1vZGVsVmFsdWVcIl0sc2V0dXAoZSxhKXtjb25zdCBuPXQobnVsbCksbz1zZSgpLGk9bCgoKCk9PmMudmFsdWUuc3VidHJhY3QoMSxcIm1vbnRoXCIpKSkscj1sKCgoKT0+c2UoYy52YWx1ZSkuZm9ybWF0KFwiWVlZWS1NTVwiKSkpLHM9bCgoKCk9PmMudmFsdWUuYWRkKDEsXCJtb250aFwiKSkpLHU9bCgoKCk9Pntjb25zdCBlPVwiZWwuZGF0ZXBpY2tlci5tb250aFwiK2MudmFsdWUuZm9ybWF0KFwiTVwiKTtyZXR1cm5gJHtjLnZhbHVlLnllYXIoKX0gJHtxbChcImVsLmRhdGVwaWNrZXIueWVhclwiKX0gJHtxbChlKX1gfSkpLGQ9bCh7Z2V0OigpPT5lLm1vZGVsVmFsdWU/Yy52YWx1ZTpuLnZhbHVlLHNldChlKXtuLnZhbHVlPWU7Y29uc3QgdD1lLnRvRGF0ZSgpO2EuZW1pdChcImlucHV0XCIsdCksYS5lbWl0KFwidXBkYXRlOm1vZGVsVmFsdWVcIix0KX19KSxjPWwoKCgpPT5lLm1vZGVsVmFsdWU/c2UoZS5tb2RlbFZhbHVlKTpkLnZhbHVlP2QudmFsdWU6cC52YWx1ZS5sZW5ndGg/cC52YWx1ZVswXVswXTpvKSkscD1sKCgoKT0+e2lmKCFlLnJhbmdlKXJldHVybltdO2NvbnN0IHQ9ZS5yYW5nZS5tYXAoKGU9PnNlKGUpKSksW2wsYV09dDtpZihsLmlzQWZ0ZXIoYSkpcmV0dXJuIGNvbnNvbGUud2FybihcIltFbGVtZW50Q2FsZW5kYXJdZW5kIHRpbWUgc2hvdWxkIGJlIGdyZWF0ZXIgdGhhbiBzdGFydCB0aW1lXCIpLFtdO2lmKGwuaXNTYW1lKGEsXCJtb250aFwiKSlyZXR1cm5bW2wuc3RhcnRPZihcIndlZWtcIiksYS5lbmRPZihcIndlZWtcIildXTt7aWYobC5hZGQoMSxcIm1vbnRoXCIpLm1vbnRoKCkhPT1hLm1vbnRoKCkpcmV0dXJuIGNvbnNvbGUud2FybihcIltFbGVtZW50Q2FsZW5kYXJdc3RhcnQgdGltZSBhbmQgZW5kIHRpbWUgaW50ZXJ2YWwgbXVzdCBub3QgZXhjZWVkIHR3byBtb250aHNcIiksW107Y29uc3QgZT1hLnN0YXJ0T2YoXCJtb250aFwiKSx0PWUuc3RhcnRPZihcIndlZWtcIik7bGV0IG49ZTtyZXR1cm4gZS5pc1NhbWUodCxcIm1vbnRoXCIpfHwobj1lLmVuZE9mKFwid2Vla1wiKS5hZGQoMSxcImRheVwiKSksW1tsLnN0YXJ0T2YoXCJ3ZWVrXCIpLGwuZW5kT2YoXCJtb250aFwiKV0sW24sYS5lbmRPZihcIndlZWtcIildXX19KSksaD1lPT57ZC52YWx1ZT1lfTtyZXR1cm57c2VsZWN0ZWREYXk6bixjdXJNb250aERhdGVQcmVmaXg6cixpMThuRGF0ZTp1LHJlYWxTZWxlY3RlZERheTpkLGRhdGU6Yyx2YWxpZGF0ZWRSYW5nZTpwLHBpY2tEYXk6aCxzZWxlY3REYXRlOmU9PntsZXQgdDt0PVwicHJldi1tb250aFwiPT09ZT9pLnZhbHVlOlwibmV4dC1tb250aFwiPT09ZT9zLnZhbHVlOm8sdC5pc1NhbWUoYy52YWx1ZSxcImRheVwiKXx8aCh0KX0sdDpxbH19fSk7Y29uc3QgVGE9e2NsYXNzOlwiZWwtY2FsZW5kYXJcIn0sTmE9e2NsYXNzOlwiZWwtY2FsZW5kYXJfX2hlYWRlclwifSxEYT17Y2xhc3M6XCJlbC1jYWxlbmRhcl9fdGl0bGVcIn0sT2E9e2tleTowLGNsYXNzOlwiZWwtY2FsZW5kYXJfX2J1dHRvbi1ncm91cFwifSxQYT17a2V5OjAsY2xhc3M6XCJlbC1jYWxlbmRhcl9fYm9keVwifSxWYT17a2V5OjEsY2xhc3M6XCJlbC1jYWxlbmRhcl9fYm9keVwifTtNYS5yZW5kZXI9ZnVuY3Rpb24oZSx0LGwsbyxyLGgpe2NvbnN0IHY9UChcImVsLWJ1dHRvblwiKSxtPVAoXCJlbC1idXR0b24tZ3JvdXBcIiksZj1QKFwiZGF0ZS10YWJsZVwiKTtyZXR1cm4gYSgpLG4oXCJkaXZcIixUYSxbcyhcImRpdlwiLE5hLFtzKFwiZGl2XCIsRGEscChlLmkxOG5EYXRlKSwxKSwwPT09ZS52YWxpZGF0ZWRSYW5nZS5sZW5ndGg/KGEoKSxuKFwiZGl2XCIsT2EsW3MobSxudWxsLHtkZWZhdWx0OmkoKCgpPT5bcyh2LHtzaXplOlwibWluaVwiLG9uQ2xpY2s6dFsxXXx8KHRbMV09dD0+ZS5zZWxlY3REYXRlKFwicHJldi1tb250aFwiKSl9LHtkZWZhdWx0OmkoKCgpPT5bYyhwKGUudChcImVsLmRhdGVwaWNrZXIucHJldk1vbnRoXCIpKSwxKV0pKSxfOjF9KSxzKHYse3NpemU6XCJtaW5pXCIsb25DbGljazp0WzJdfHwodFsyXT10PT5lLnNlbGVjdERhdGUoXCJ0b2RheVwiKSl9LHtkZWZhdWx0OmkoKCgpPT5bYyhwKGUudChcImVsLmRhdGVwaWNrZXIudG9kYXlcIikpLDEpXSkpLF86MX0pLHModix7c2l6ZTpcIm1pbmlcIixvbkNsaWNrOnRbM118fCh0WzNdPXQ9PmUuc2VsZWN0RGF0ZShcIm5leHQtbW9udGhcIikpfSx7ZGVmYXVsdDppKCgoKT0+W2MocChlLnQoXCJlbC5kYXRlcGlja2VyLm5leHRNb250aFwiKSksMSldKSksXzoxfSldKSksXzoxfSldKSk6dShcInYtaWZcIiwhMCldKSwwPT09ZS52YWxpZGF0ZWRSYW5nZS5sZW5ndGg/KGEoKSxuKFwiZGl2XCIsUGEsW3MoZix7ZGF0ZTplLmRhdGUsXCJzZWxlY3RlZC1kYXlcIjplLnJlYWxTZWxlY3RlZERheSxvblBpY2s6ZS5waWNrRGF5fSxSKHtfOjJ9LFtlLiRzbG90cy5kYXRlQ2VsbD97bmFtZTpcImRhdGVDZWxsXCIsZm46aSgodD0+W2QoZS4kc2xvdHMsXCJkYXRlQ2VsbFwiLHQpXSkpfTp2b2lkIDBdKSwxMDMyLFtcImRhdGVcIixcInNlbGVjdGVkLWRheVwiLFwib25QaWNrXCJdKV0pKTooYSgpLG4oXCJkaXZcIixWYSxbKGEoITApLG4oRSxudWxsLEgoZS52YWxpZGF0ZWRSYW5nZSwoKHQsbCk9PihhKCksbihmLHtrZXk6bCxkYXRlOnRbMF0sXCJzZWxlY3RlZC1kYXlcIjplLnJlYWxTZWxlY3RlZERheSxyYW5nZTp0LFwiaGlkZS1oZWFkZXJcIjowIT09bCxvblBpY2s6ZS5waWNrRGF5fSxSKHtfOjJ9LFtlLiRzbG90cy5kYXRlQ2VsbD97bmFtZTpcImRhdGVDZWxsXCIsZm46aSgodD0+W2QoZS4kc2xvdHMsXCJkYXRlQ2VsbFwiLHQpXSkpfTp2b2lkIDBdKSwxMDMyLFtcImRhdGVcIixcInNlbGVjdGVkLWRheVwiLFwicmFuZ2VcIixcImhpZGUtaGVhZGVyXCIsXCJvblBpY2tcIl0pKSkpLDEyOCkpXSkpXSl9LE1hLl9fZmlsZT1cInBhY2thZ2VzL2NhbGVuZGFyL3NyYy9pbmRleC52dWVcIixNYS5pbnN0YWxsPWU9PntlLmNvbXBvbmVudChNYS5uYW1lLE1hKX07dmFyIElhPWUoe25hbWU6XCJFbENhcmRcIixwcm9wczp7aGVhZGVyOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiXCJ9LGJvZHlTdHlsZTp7dHlwZTpbU3RyaW5nLE9iamVjdCxBcnJheV0sZGVmYXVsdDpcIlwifSxzaGFkb3c6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJcIn19fSk7Y29uc3QgQWE9e2tleTowLGNsYXNzOlwiZWwtY2FyZF9faGVhZGVyXCJ9O0lhLnJlbmRlcj1mdW5jdGlvbihlLHQsbCxvLGkscil7cmV0dXJuIGEoKSxuKFwiZGl2XCIsbnVsbCxbcyhcImRpdlwiLHtjbGFzczpbXCJlbC1jYXJkXCIsZS5zaGFkb3c/XCJpcy1cIitlLnNoYWRvdytcIi1zaGFkb3dcIjpcImlzLWFsd2F5cy1zaGFkb3dcIl19LFtlLiRzbG90cy5oZWFkZXJ8fGUuaGVhZGVyPyhhKCksbihcImRpdlwiLEFhLFtkKGUuJHNsb3RzLFwiaGVhZGVyXCIse30sKCgpPT5bYyhwKGUuaGVhZGVyKSwxKV0pKV0pKTp1KFwidi1pZlwiLCEwKSxzKFwiZGl2XCIse2NsYXNzOlwiZWwtY2FyZF9fYm9keVwiLHN0eWxlOmUuYm9keVN0eWxlfSxbZChlLiRzbG90cyxcImRlZmF1bHRcIildLDQpXSwyKV0pfSxJYS5fX2ZpbGU9XCJwYWNrYWdlcy9jYXJkL3NyYy9pbmRleC52dWVcIixJYS5pbnN0YWxsPWU9PntlLmNvbXBvbmVudChJYS5uYW1lLElhKX07dmFyIEJhPWUoe25hbWU6XCJFbENhcm91c2VsXCIscHJvcHM6e2luaXRpYWxJbmRleDp7dHlwZTpOdW1iZXIsZGVmYXVsdDowfSxoZWlnaHQ6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJcIn0sdHJpZ2dlcjp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcImhvdmVyXCJ9LGF1dG9wbGF5Ont0eXBlOkJvb2xlYW4sZGVmYXVsdDohMH0saW50ZXJ2YWw6e3R5cGU6TnVtYmVyLGRlZmF1bHQ6M2UzfSxpbmRpY2F0b3JQb3NpdGlvbjp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIlwifSxpbmRpY2F0b3I6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiEwfSxhcnJvdzp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcImhvdmVyXCJ9LHR5cGU6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJcIn0sbG9vcDp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITB9LGRpcmVjdGlvbjp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcImhvcml6b250YWxcIix2YWxpZGF0b3I6ZT0+W1wiaG9yaXpvbnRhbFwiLFwidmVydGljYWxcIl0uaW5jbHVkZXMoZSl9fSxlbWl0czpbXCJjaGFuZ2VcIl0sc2V0dXAoZSx7ZW1pdDphfSl7Y29uc3Qgbj1mKHthY3RpdmVJbmRleDotMSxjb250YWluZXJXaWR0aDowLHRpbWVyOm51bGwsaG92ZXI6ITF9KSxvPXQobnVsbCksaT10KFtdKSxyPXQoMCkscz10KDApLHU9bCgoKCk9PlwibmV2ZXJcIiE9PWUuYXJyb3cmJlwidmVydGljYWxcIiE9PWUuZGlyZWN0aW9uKSksZD1sKCgoKT0+aS52YWx1ZS5zb21lKChlPT5lLmxhYmVsLnRvU3RyaW5nKCkubGVuZ3RoPjApKSkpLGM9bCgoKCk9Pntjb25zdCB0PVtcImVsLWNhcm91c2VsXCIsXCJlbC1jYXJvdXNlbC0tXCIrZS5kaXJlY3Rpb25dO3JldHVyblwiY2FyZFwiPT09ZS50eXBlJiZ0LnB1c2goXCJlbC1jYXJvdXNlbC0tY2FyZFwiKSx0fSkpLHA9bCgoKCk9Pntjb25zdCB0PVtcImVsLWNhcm91c2VsX19pbmRpY2F0b3JzXCIsXCJlbC1jYXJvdXNlbF9faW5kaWNhdG9ycy0tXCIrZS5kaXJlY3Rpb25dO3JldHVybiBkLnZhbHVlJiZ0LnB1c2goXCJlbC1jYXJvdXNlbF9faW5kaWNhdG9ycy0tbGFiZWxzXCIpLFwib3V0c2lkZVwiIT09ZS5pbmRpY2F0b3JQb3NpdGlvbiYmXCJjYXJkXCIhPT1lLnR5cGV8fHQucHVzaChcImVsLWNhcm91c2VsX19pbmRpY2F0b3JzLS1vdXRzaWRlXCIpLHR9KSksaD1yZSgoZT0+e0MoZSl9KSwzMDAse3RyYWlsaW5nOiEwfSksdj1yZSgodD0+eyFmdW5jdGlvbih0KXtcImhvdmVyXCI9PT1lLnRyaWdnZXImJnQhPT1uLmFjdGl2ZUluZGV4JiYobi5hY3RpdmVJbmRleD10KX0odCl9KSwzMDApO2Z1bmN0aW9uIG0oKXtuLnRpbWVyJiYoY2xlYXJJbnRlcnZhbChuLnRpbWVyKSxuLnRpbWVyPW51bGwpfWZ1bmN0aW9uIGcoKXtlLmludGVydmFsPD0wfHwhZS5hdXRvcGxheXx8bi50aW1lcnx8KG4udGltZXI9c2V0SW50ZXJ2YWwoKCgpPT5iKCkpLGUuaW50ZXJ2YWwpKX1jb25zdCBiPSgpPT57bi5hY3RpdmVJbmRleDxpLnZhbHVlLmxlbmd0aC0xP24uYWN0aXZlSW5kZXg9bi5hY3RpdmVJbmRleCsxOmUubG9vcCYmKG4uYWN0aXZlSW5kZXg9MCl9O2Z1bmN0aW9uIEModCl7aWYoXCJzdHJpbmdcIj09dHlwZW9mIHQpe2NvbnN0IGU9aS52YWx1ZS5maWx0ZXIoKGU9PmUubmFtZT09PXQpKTtlLmxlbmd0aD4wJiYodD1pLnZhbHVlLmluZGV4T2YoZVswXSkpfWlmKHQ9TnVtYmVyKHQpLGlzTmFOKHQpfHx0IT09TWF0aC5mbG9vcih0KSlyZXR1cm4gdm9pZCBjb25zb2xlLndhcm4oXCJbRWxlbWVudCBXYXJuXVtDYXJvdXNlbF1pbmRleCBtdXN0IGJlIGFuIGludGVnZXIuXCIpO2xldCBsPWkudmFsdWUubGVuZ3RoO2NvbnN0IGE9bi5hY3RpdmVJbmRleDtuLmFjdGl2ZUluZGV4PXQ8MD9lLmxvb3A/bC0xOjA6dD49bD9lLmxvb3A/MDpsLTE6dCxhPT09bi5hY3RpdmVJbmRleCYmdyhhKX1mdW5jdGlvbiB3KGUpe2kudmFsdWUuZm9yRWFjaCgoKHQsbCk9Pnt0LnRyYW5zbGF0ZUl0ZW0obCxuLmFjdGl2ZUluZGV4LGUpfSkpfXJldHVybiB5KCgoKT0+bi5hY3RpdmVJbmRleCksKChlLHQpPT57dyh0KSx0Pi0xJiZhKFwiY2hhbmdlXCIsZSx0KX0pKSx5KCgoKT0+ZS5hdXRvcGxheSksKGU9PntlP2coKTptKCl9KSkseSgoKCk9PmUubG9vcCksKCgpPT57QyhuLmFjdGl2ZUluZGV4KX0pKSxfKCgoKT0+e2soKCgpPT57SnQoby52YWx1ZSx3KSxvLnZhbHVlJiYoci52YWx1ZT1vLnZhbHVlLm9mZnNldFdpZHRoLHMudmFsdWU9by52YWx1ZS5vZmZzZXRIZWlnaHQpLGUuaW5pdGlhbEluZGV4PGkudmFsdWUubGVuZ3RoJiZlLmluaXRpYWxJbmRleD49MCYmKG4uYWN0aXZlSW5kZXg9ZS5pbml0aWFsSW5kZXgpLGcoKX0pKX0pKSxPKCgoKT0+e28udmFsdWUmJmVsKG8udmFsdWUsdyksbSgpfSkpLHgoXCJpbmplY3RDYXJvdXNlbFNjb3BlXCIse2RpcmVjdGlvbjplLmRpcmVjdGlvbixvZmZzZXRXaWR0aDpyLG9mZnNldEhlaWdodDpzLHR5cGU6ZS50eXBlLGl0ZW1zOmksbG9vcDplLmxvb3AsdXBkYXRlSXRlbXM6ZnVuY3Rpb24oZSl7aS52YWx1ZS5wdXNoKGUpfSxzZXRBY3RpdmVJdGVtOkN9KSx7ZGF0YTpuLHByb3BzOmUsaXRlbXM6aSxhcnJvd0Rpc3BsYXk6dSxjYXJvdXNlbENsYXNzZXM6YyxpbmRpY2F0b3JzQ2xhc3NlczpwLGhhc0xhYmVsOmQsaGFuZGxlTW91c2VFbnRlcjpmdW5jdGlvbigpe24uaG92ZXI9ITAsbSgpfSxoYW5kbGVNb3VzZUxlYXZlOmZ1bmN0aW9uKCl7bi5ob3Zlcj0hMSxnKCl9LGhhbmRsZUluZGljYXRvckNsaWNrOmZ1bmN0aW9uKGUpe24uYWN0aXZlSW5kZXg9ZX0sdGhyb3R0bGVkQXJyb3dDbGljazpoLHRocm90dGxlZEluZGljYXRvckhvdmVyOnYsaGFuZGxlQnV0dG9uRW50ZXI6ZnVuY3Rpb24odCl7XCJ2ZXJ0aWNhbFwiIT09ZS5kaXJlY3Rpb24mJmkudmFsdWUuZm9yRWFjaCgoKGUsbCk9Pnt0PT09ZnVuY3Rpb24oZSx0KXtjb25zdCBsPWkudmFsdWUubGVuZ3RoO3JldHVybiB0PT09bC0xJiZlLmluU3RhZ2UmJmkudmFsdWVbMF0uYWN0aXZlfHxlLmluU3RhZ2UmJmkudmFsdWVbdCsxXSYmaS52YWx1ZVt0KzFdLmFjdGl2ZT9cImxlZnRcIjohISgwPT09dCYmZS5pblN0YWdlJiZpLnZhbHVlW2wtMV0uYWN0aXZlfHxlLmluU3RhZ2UmJmkudmFsdWVbdC0xXSYmaS52YWx1ZVt0LTFdLmFjdGl2ZSkmJlwicmlnaHRcIn0oZSxsKSYmKGUuaG92ZXI9ITApfSkpfSxoYW5kbGVCdXR0b25MZWF2ZTpmdW5jdGlvbigpe1widmVydGljYWxcIiE9PWUuZGlyZWN0aW9uJiZpLnZhbHVlLmZvckVhY2goKGU9PntlLmhvdmVyPSExfSkpfSxwcmV2OmZ1bmN0aW9uKCl7QyhuLmFjdGl2ZUluZGV4LTEpfSxuZXh0OmZ1bmN0aW9uKCl7QyhuLmFjdGl2ZUluZGV4KzEpfSxzZXRBY3RpdmVJdGVtOkMscm9vdDpvfX19KTtjb25zdCBMYT1zKFwiaVwiLHtjbGFzczpcImVsLWljb24tYXJyb3ctbGVmdFwifSxudWxsLC0xKSx6YT1zKFwiaVwiLHtjbGFzczpcImVsLWljb24tYXJyb3ctcmlnaHRcIn0sbnVsbCwtMSksRmE9e2NsYXNzOlwiZWwtY2Fyb3VzZWxfX2J1dHRvblwifSwkYT17a2V5OjB9O0JhLnJlbmRlcj1mdW5jdGlvbihlLHQsbCxjLHYsbSl7cmV0dXJuIGEoKSxuKFwiZGl2XCIse3JlZjpcInJvb3RcIixjbGFzczplLmNhcm91c2VsQ2xhc3Nlcyxvbk1vdXNlZW50ZXI6dFs3XXx8KHRbN109VCgoKC4uLnQpPT5lLmhhbmRsZU1vdXNlRW50ZXIoLi4udCkpLFtcInN0b3BcIl0pKSxvbk1vdXNlbGVhdmU6dFs4XXx8KHRbOF09VCgoKC4uLnQpPT5lLmhhbmRsZU1vdXNlTGVhdmUoLi4udCkpLFtcInN0b3BcIl0pKX0sW3MoXCJkaXZcIix7Y2xhc3M6XCJlbC1jYXJvdXNlbF9fY29udGFpbmVyXCIsc3R5bGU6e2hlaWdodDplLmhlaWdodH19LFtlLmFycm93RGlzcGxheT8oYSgpLG4obyx7a2V5OjAsbmFtZTpcImNhcm91c2VsLWFycm93LWxlZnRcIn0se2RlZmF1bHQ6aSgoKCk9PltyKHMoXCJidXR0b25cIix7dHlwZTpcImJ1dHRvblwiLGNsYXNzOlwiZWwtY2Fyb3VzZWxfX2Fycm93IGVsLWNhcm91c2VsX19hcnJvdy0tbGVmdFwiLG9uTW91c2VlbnRlcjp0WzFdfHwodFsxXT10PT5lLmhhbmRsZUJ1dHRvbkVudGVyKFwibGVmdFwiKSksb25Nb3VzZWxlYXZlOnRbMl18fCh0WzJdPSguLi50KT0+ZS5oYW5kbGVCdXR0b25MZWF2ZSguLi50KSksb25DbGljazp0WzNdfHwodFszXT1UKCh0PT5lLnRocm90dGxlZEFycm93Q2xpY2soZS5kYXRhLmFjdGl2ZUluZGV4LTEpKSxbXCJzdG9wXCJdKSl9LFtMYV0sNTQ0KSxbW2gsKFwiYWx3YXlzXCI9PT1lLmFycm93fHxlLmRhdGEuaG92ZXIpJiYoZS5wcm9wcy5sb29wfHxlLmRhdGEuYWN0aXZlSW5kZXg+MCldXSldKSksXzoxfSkpOnUoXCJ2LWlmXCIsITApLGUuYXJyb3dEaXNwbGF5PyhhKCksbihvLHtrZXk6MSxuYW1lOlwiY2Fyb3VzZWwtYXJyb3ctcmlnaHRcIn0se2RlZmF1bHQ6aSgoKCk9PltyKHMoXCJidXR0b25cIix7dHlwZTpcImJ1dHRvblwiLGNsYXNzOlwiZWwtY2Fyb3VzZWxfX2Fycm93IGVsLWNhcm91c2VsX19hcnJvdy0tcmlnaHRcIixvbk1vdXNlZW50ZXI6dFs0XXx8KHRbNF09dD0+ZS5oYW5kbGVCdXR0b25FbnRlcihcInJpZ2h0XCIpKSxvbk1vdXNlbGVhdmU6dFs1XXx8KHRbNV09KC4uLnQpPT5lLmhhbmRsZUJ1dHRvbkxlYXZlKC4uLnQpKSxvbkNsaWNrOnRbNl18fCh0WzZdPVQoKHQ9PmUudGhyb3R0bGVkQXJyb3dDbGljayhlLmRhdGEuYWN0aXZlSW5kZXgrMSkpLFtcInN0b3BcIl0pKX0sW3phXSw1NDQpLFtbaCwoXCJhbHdheXNcIj09PWUuYXJyb3d8fGUuZGF0YS5ob3ZlcikmJihlLnByb3BzLmxvb3B8fGUuZGF0YS5hY3RpdmVJbmRleDxlLml0ZW1zLmxlbmd0aC0xKV1dKV0pKSxfOjF9KSk6dShcInYtaWZcIiwhMCksZChlLiRzbG90cyxcImRlZmF1bHRcIildLDQpLFwibm9uZVwiIT09ZS5pbmRpY2F0b3JQb3NpdGlvbj8oYSgpLG4oXCJ1bFwiLHtrZXk6MCxjbGFzczplLmluZGljYXRvcnNDbGFzc2VzfSxbKGEoITApLG4oRSxudWxsLEgoZS5pdGVtcywoKHQsbCk9PihhKCksbihcImxpXCIse2tleTpsLGNsYXNzOltcImVsLWNhcm91c2VsX19pbmRpY2F0b3JcIixcImVsLWNhcm91c2VsX19pbmRpY2F0b3ItLVwiK2UuZGlyZWN0aW9uLHtcImlzLWFjdGl2ZVwiOmw9PT1lLmRhdGEuYWN0aXZlSW5kZXh9XSxvbk1vdXNlZW50ZXI6dD0+ZS50aHJvdHRsZWRJbmRpY2F0b3JIb3ZlcihsKSxvbkNsaWNrOlQoKHQ9PmUuaGFuZGxlSW5kaWNhdG9yQ2xpY2sobCkpLFtcInN0b3BcIl0pfSxbcyhcImJ1dHRvblwiLEZhLFtlLmhhc0xhYmVsPyhhKCksbihcInNwYW5cIiwkYSxwKHQubGFiZWwpLDEpKTp1KFwidi1pZlwiLCEwKV0pXSw0MixbXCJvbk1vdXNlZW50ZXJcIixcIm9uQ2xpY2tcIl0pKSkpLDEyOCkpXSwyKSk6dShcInYtaWZcIiwhMCldLDM0KX0sQmEuX19maWxlPVwicGFja2FnZXMvY2Fyb3VzZWwvc3JjL21haW4udnVlXCIsQmEuaW5zdGFsbD1lPT57ZS5jb21wb25lbnQoQmEubmFtZSxCYSl9O3ZhciBSYT1lKHtuYW1lOlwiRWxDYXJvdXNlbEl0ZW1cIixwcm9wczp7bmFtZTp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIlwifSxsYWJlbDp7dHlwZTpbU3RyaW5nLE51bWJlcl0sZGVmYXVsdDpcIlwifX0sc2V0dXAoZSl7Y29uc3QgdD12KCk7dC51aWQ7Y29uc3QgYT1mKHtob3ZlcjohMSx0cmFuc2xhdGU6MCxzY2FsZToxLGFjdGl2ZTohMSxyZWFkeTohMSxpblN0YWdlOiExLGFuaW1hdGluZzohMX0pLG49dyhcImluamVjdENhcm91c2VsU2NvcGVcIiksbz1sKCgoKT0+bi5kaXJlY3Rpb24pKSxpPWwoKCgpPT5mdW5jdGlvbihlKXtjb25zdCB0PVtcIm1zLVwiLFwid2Via2l0LVwiXTtyZXR1cm5bXCJ0cmFuc2Zvcm1cIixcInRyYW5zaXRpb25cIixcImFuaW1hdGlvblwiXS5mb3JFYWNoKChsPT57Y29uc3QgYT1lW2xdO2wmJmEmJnQuZm9yRWFjaCgodD0+e2VbdCtsXT1hfSkpfSkpLGV9KHt0cmFuc2Zvcm06YCR7XCJ2ZXJ0aWNhbFwiPT09by52YWx1ZT9cInRyYW5zbGF0ZVlcIjpcInRyYW5zbGF0ZVhcIn0oJHthLnRyYW5zbGF0ZX1weCkgc2NhbGUoJHthLnNjYWxlfSlgfSkpKTtjb25zdCByPShlLHQsbCk9Pntjb25zdCBpPW4udHlwZSxyPW4uaXRlbXMudmFsdWUubGVuZ3RoO2lmKFwiY2FyZFwiIT09aSYmdm9pZCAwIT09bCYmKGEuYW5pbWF0aW5nPWU9PT10fHxlPT09bCksZSE9PXQmJnI+MiYmbi5sb29wJiYoZT1mdW5jdGlvbihlLHQsbCl7cmV0dXJuIDA9PT10JiZlPT09bC0xPy0xOnQ9PT1sLTEmJjA9PT1lP2w6ZTx0LTEmJnQtZT49bC8yP2wrMTplPnQrMSYmZS10Pj1sLzI/LTI6ZX0oZSx0LHIpKSxcImNhcmRcIj09PWkpXCJ2ZXJ0aWNhbFwiPT09by52YWx1ZSYmY29uc29sZS53YXJuKFwiW0VsZW1lbnQgV2Fybl1bQ2Fyb3VzZWxddmVydGljYWwgZGlyZWN0aW9uIGlzIG5vdCBzdXBwb3J0ZWQgaW4gY2FyZCBtb2RlXCIpLGEuaW5TdGFnZT1NYXRoLnJvdW5kKE1hdGguYWJzKGUtdCkpPD0xLGEuYWN0aXZlPWU9PT10LGEudHJhbnNsYXRlPWZ1bmN0aW9uKGUsdCl7Y29uc3QgbD1uLm9mZnNldFdpZHRoLnZhbHVlO3JldHVybiBhLmluU3RhZ2U/bCooMS4xNyooZS10KSsxKS80OmU8dD8tMS44MypsLzQ6My44MypsLzR9KGUsdCksYS5zY2FsZT1hLmFjdGl2ZT8xOi44MztlbHNle2EuYWN0aXZlPWU9PT10O2NvbnN0IGw9XCJ2ZXJ0aWNhbFwiPT09by52YWx1ZTthLnRyYW5zbGF0ZT1mdW5jdGlvbihlLHQsbCl7cmV0dXJuIG5bbD9cIm9mZnNldEhlaWdodFwiOlwib2Zmc2V0V2lkdGhcIl0udmFsdWUqKGUtdCl9KGUsdCxsKX1hLnJlYWR5PSEwfTtyZXR1cm4gXygoKCk9PntuLnVwZGF0ZUl0ZW1zJiZuLnVwZGF0ZUl0ZW1zKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt1aWQ6dC51aWR9LGUpLEMoYSkpLHt0cmFuc2xhdGVJdGVtOnJ9KSl9KSkse2RhdGE6YSxpdGVtU3R5bGU6aSx0cmFuc2xhdGVJdGVtOnIsdHlwZTpuLnR5cGUsaGFuZGxlSXRlbUNsaWNrOmZ1bmN0aW9uKCl7aWYobiYmXCJjYXJkXCI9PT1uLnR5cGUpe2NvbnN0IGU9bi5pdGVtcy52YWx1ZS5tYXAoKGU9PmUudWlkKSkuaW5kZXhPZih0LnVpZCk7bi5zZXRBY3RpdmVJdGVtKGUpfX19fX0pO2NvbnN0IEhhPXtrZXk6MCxjbGFzczpcImVsLWNhcm91c2VsX19tYXNrXCJ9O1JhLnJlbmRlcj1mdW5jdGlvbihlLHQsbCxvLGkscyl7cmV0dXJuIHIoKGEoKSxuKFwiZGl2XCIse2NsYXNzOltcImVsLWNhcm91c2VsX19pdGVtXCIse1wiaXMtYWN0aXZlXCI6ZS5kYXRhLmFjdGl2ZSxcImVsLWNhcm91c2VsX19pdGVtLS1jYXJkXCI6XCJjYXJkXCI9PT1lLnR5cGUsXCJpcy1pbi1zdGFnZVwiOmUuZGF0YS5pblN0YWdlLFwiaXMtaG92ZXJcIjplLmRhdGEuaG92ZXIsXCJpcy1hbmltYXRpbmdcIjplLmRhdGEuYW5pbWF0aW5nfV0sc3R5bGU6ZS5pdGVtU3R5bGUsb25DbGljazp0WzFdfHwodFsxXT0oLi4udCk9PmUuaGFuZGxlSXRlbUNsaWNrKC4uLnQpKX0sW1wiY2FyZFwiPT09ZS50eXBlP3IoKGEoKSxuKFwiZGl2XCIsSGEsbnVsbCw1MTIpKSxbW2gsIWUuZGF0YS5hY3RpdmVdXSk6dShcInYtaWZcIiwhMCksZChlLiRzbG90cyxcImRlZmF1bHRcIildLDYpKSxbW2gsZS5kYXRhLnJlYWR5XV0pfSxSYS5fX2ZpbGU9XCJwYWNrYWdlcy9jYXJvdXNlbC9zcmMvaXRlbS52dWVcIixSYS5pbnN0YWxsPWU9PntlLmNvbXBvbmVudChSYS5uYW1lLFJhKX07Y29uc3QgV2E9KCk9Pntjb25zdCBlPXFlKCksdD13KFwiZWxGb3JtXCIse30pLGE9dyhcImVsRm9ybUl0ZW1cIix7fSksbj13KFwiQ2hlY2tib3hHcm91cFwiLHt9KSxvPWwoKCgpPT5uJiZcIkVsQ2hlY2tib3hHcm91cFwiPT09KG51bGw9PW4/dm9pZCAwOm4ubmFtZSkpKSxpPWwoKCgpPT5hLnNpemUpKTtyZXR1cm57aXNHcm91cDpvLGNoZWNrYm94R3JvdXA6bixlbEZvcm06dCxFTEVNRU5UOmUsZWxGb3JtSXRlbVNpemU6aSxlbEZvcm1JdGVtOmF9fSxqYT1lPT57Y29uc3R7bW9kZWw6YSxpc0xpbWl0RXhjZWVkZWQ6bn09KGU9PntsZXQgYT0hMTtjb25zdHtlbWl0Om59PXYoKSx7aXNHcm91cDpvLGNoZWNrYm94R3JvdXA6aX09V2EoKSxyPXQoITEpLHM9bCgoKCk9Pnt2YXIgdDtyZXR1cm4gaT9udWxsPT09KHQ9aS5tb2RlbFZhbHVlKXx8dm9pZCAwPT09dD92b2lkIDA6dC52YWx1ZTplLm1vZGVsVmFsdWV9KSk7cmV0dXJue21vZGVsOmwoe2dldCgpe3ZhciB0O3JldHVybiBvLnZhbHVlP3MudmFsdWU6bnVsbCE9PSh0PWUubW9kZWxWYWx1ZSkmJnZvaWQgMCE9PXQ/dDphfSxzZXQoZSl7dmFyIHQ7by52YWx1ZSYmQXJyYXkuaXNBcnJheShlKT8oci52YWx1ZT0hMSx2b2lkIDAhPT1pLm1pbiYmZS5sZW5ndGg8aS5taW4udmFsdWUmJihyLnZhbHVlPSEwKSx2b2lkIDAhPT1pLm1heCYmZS5sZW5ndGg+aS5tYXgudmFsdWUmJihyLnZhbHVlPSEwKSwhMT09PXIudmFsdWUmJihudWxsPT09KHQ9bnVsbD09aT92b2lkIDA6aS5jaGFuZ2VFdmVudCl8fHZvaWQgMD09PXR8fHQuY2FsbChpLGUpKSk6KG4oUHQsZSksYT1lKX19KSxpc0xpbWl0RXhjZWVkZWQ6cn19KShlKSx7Zm9jdXM6byxzaXplOmksaXNDaGVja2VkOnIsY2hlY2tib3hTaXplOnN9PSgoZSx7bW9kZWw6YX0pPT57Y29uc3R7aXNHcm91cDpuLGNoZWNrYm94R3JvdXA6byxlbEZvcm1JdGVtU2l6ZTppLEVMRU1FTlQ6cn09V2EoKSxzPXQoITEpLHU9bCgoKCk9Pnt2YXIgZTtyZXR1cm4obnVsbD09PShlPW51bGw9PW8/dm9pZCAwOm8uY2hlY2tib3hHcm91cFNpemUpfHx2b2lkIDA9PT1lP3ZvaWQgMDplLnZhbHVlKXx8aS52YWx1ZXx8ci5zaXplfSkpO3JldHVybntpc0NoZWNrZWQ6bCgoKCk9Pntjb25zdCB0PWEudmFsdWU7cmV0dXJuXCJbb2JqZWN0IEJvb2xlYW5dXCI9PT1QZSh0KT90OkFycmF5LmlzQXJyYXkodCk/dC5pbmNsdWRlcyhlLmxhYmVsKTpudWxsIT10P3Q9PT1lLnRydWVMYWJlbDp2b2lkIDB9KSksZm9jdXM6cyxzaXplOnUsY2hlY2tib3hTaXplOmwoKCgpPT57dmFyIHQ7Y29uc3QgbD1lLnNpemV8fGkudmFsdWV8fHIuc2l6ZTtyZXR1cm4gbi52YWx1ZSYmKG51bGw9PT0odD1udWxsPT1vP3ZvaWQgMDpvLmNoZWNrYm94R3JvdXBTaXplKXx8dm9pZCAwPT09dD92b2lkIDA6dC52YWx1ZSl8fGx9KSl9fSkoZSx7bW9kZWw6YX0pLHtpc0Rpc2FibGVkOnV9PSgoZSx7bW9kZWw6dCxpc0NoZWNrZWQ6YX0pPT57Y29uc3R7ZWxGb3JtOm4saXNHcm91cDpvLGNoZWNrYm94R3JvdXA6aX09V2EoKSxyPWwoKCgpPT57dmFyIGUsbDtjb25zdCBuPW51bGw9PT0oZT1pLm1heCl8fHZvaWQgMD09PWU/dm9pZCAwOmUudmFsdWUsbz1udWxsPT09KGw9aS5taW4pfHx2b2lkIDA9PT1sP3ZvaWQgMDpsLnZhbHVlO3JldHVybiEoIW4mJiFvKSYmdC52YWx1ZS5sZW5ndGg+PW4mJiFhLnZhbHVlfHx0LnZhbHVlLmxlbmd0aDw9byYmYS52YWx1ZX0pKTtyZXR1cm57aXNEaXNhYmxlZDpsKCgoKT0+e3ZhciB0O2NvbnN0IGw9ZS5kaXNhYmxlZHx8bi5kaXNhYmxlZDtyZXR1cm4gby52YWx1ZT8obnVsbD09PSh0PWkuZGlzYWJsZWQpfHx2b2lkIDA9PT10P3ZvaWQgMDp0LnZhbHVlKXx8bHx8ci52YWx1ZTplLmRpc2FibGVkfHxuLmRpc2FibGVkfSkpLGlzTGltaXREaXNhYmxlZDpyfX0pKGUse21vZGVsOmEsaXNDaGVja2VkOnJ9KSx7aGFuZGxlQ2hhbmdlOmR9PSgoZSx7aXNMaW1pdEV4Y2VlZGVkOnR9KT0+e2NvbnN0e2VsRm9ybUl0ZW06bH09V2EoKSx7ZW1pdDphfT12KCk7cmV0dXJuIHkoKCgpPT5lLm1vZGVsVmFsdWUpLChlPT57dmFyIHQ7bnVsbD09PSh0PWwuZm9ybUl0ZW1NaXR0KXx8dm9pZCAwPT09dHx8dC5lbWl0KFwiZWwuZm9ybS5jaGFuZ2VcIixbZV0pfSkpLHtoYW5kbGVDaGFuZ2U6ZnVuY3Rpb24obCl7dmFyIG4sbztpZih0LnZhbHVlKXJldHVybjtjb25zdCBpPWwudGFyZ2V0LmNoZWNrZWQ/bnVsbD09PShuPWUudHJ1ZUxhYmVsKXx8dm9pZCAwPT09bnx8bjpudWxsIT09KG89ZS5mYWxzZUxhYmVsKSYmdm9pZCAwIT09byYmbzthKFwiY2hhbmdlXCIsaSxsKX19fSkoZSx7aXNMaW1pdEV4Y2VlZGVkOm59KTtyZXR1cm4oKGUse21vZGVsOnR9KT0+e2UuY2hlY2tlZCYmKEFycmF5LmlzQXJyYXkodC52YWx1ZSkmJiF0LnZhbHVlLmluY2x1ZGVzKGUubGFiZWwpP3QudmFsdWUucHVzaChlLmxhYmVsKTp0LnZhbHVlPWUudHJ1ZUxhYmVsfHwhMCl9KShlLHttb2RlbDphfSkse2lzQ2hlY2tlZDpyLGlzRGlzYWJsZWQ6dSxjaGVja2JveFNpemU6cyxtb2RlbDphLGhhbmRsZUNoYW5nZTpkLGZvY3VzOm8sc2l6ZTppfX07dmFyIEthPWUoe25hbWU6XCJFbENoZWNrYm94XCIscHJvcHM6e21vZGVsVmFsdWU6e3R5cGU6W0Jvb2xlYW4sTnVtYmVyLFN0cmluZ10sZGVmYXVsdDooKT0+e319LGxhYmVsOnt0eXBlOltCb29sZWFuLE51bWJlcixTdHJpbmddfSxpbmRldGVybWluYXRlOkJvb2xlYW4sZGlzYWJsZWQ6Qm9vbGVhbixjaGVja2VkOkJvb2xlYW4sbmFtZTp7dHlwZTpTdHJpbmcsZGVmYXVsdDp2b2lkIDB9LHRydWVMYWJlbDp7dHlwZTpbU3RyaW5nLE51bWJlcl0sZGVmYXVsdDp2b2lkIDB9LGZhbHNlTGFiZWw6e3R5cGU6W1N0cmluZyxOdW1iZXJdLGRlZmF1bHQ6dm9pZCAwfSxpZDp7dHlwZTpTdHJpbmcsZGVmYXVsdDp2b2lkIDB9LGNvbnRyb2xzOnt0eXBlOlN0cmluZyxkZWZhdWx0OnZvaWQgMH0sYm9yZGVyOkJvb2xlYW4sc2l6ZTp7dHlwZTpTdHJpbmcsdmFsaWRhdG9yOkF0fX0sZW1pdHM6W1B0LFwiY2hhbmdlXCJdLHNldHVwKGUpe2NvbnN0e2ZvY3VzOnQsaXNDaGVja2VkOmwsaXNEaXNhYmxlZDphLGNoZWNrYm94U2l6ZTpuLG1vZGVsOm8saGFuZGxlQ2hhbmdlOml9PWphKGUpLHI9digpO3JldHVybiBfKCgoKT0+e3Iudm5vZGUuZWwuc2V0QXR0cmlidXRlKFwiYXJpYS1jb250cm9sc1wiLGUuY29udHJvbHMpfSkpLHtmb2N1czp0LGlzQ2hlY2tlZDpsLGlzRGlzYWJsZWQ6YSxjaGVja2JveFNpemU6bixtb2RlbDpvLGhhbmRsZUNoYW5nZTppfX19KTtjb25zdCBZYT1zKFwic3BhblwiLHtjbGFzczpcImVsLWNoZWNrYm94X19pbm5lclwifSxudWxsLC0xKSxxYT17a2V5OjAsY2xhc3M6XCJlbC1jaGVja2JveF9fbGFiZWxcIn07S2EucmVuZGVyPWZ1bmN0aW9uKGUsdCxsLG8saSxoKXtyZXR1cm4gYSgpLG4oXCJsYWJlbFwiLHtpZDplLmlkLGNsYXNzOltcImVsLWNoZWNrYm94XCIsW2UuYm9yZGVyJiZlLmNoZWNrYm94U2l6ZT9cImVsLWNoZWNrYm94LS1cIitlLmNoZWNrYm94U2l6ZTpcIlwiLHtcImlzLWRpc2FibGVkXCI6ZS5pc0Rpc2FibGVkfSx7XCJpcy1ib3JkZXJlZFwiOmUuYm9yZGVyfSx7XCJpcy1jaGVja2VkXCI6ZS5pc0NoZWNrZWR9XV19LFtzKFwic3BhblwiLHtjbGFzczpbXCJlbC1jaGVja2JveF9faW5wdXRcIix7XCJpcy1kaXNhYmxlZFwiOmUuaXNEaXNhYmxlZCxcImlzLWNoZWNrZWRcIjplLmlzQ2hlY2tlZCxcImlzLWluZGV0ZXJtaW5hdGVcIjplLmluZGV0ZXJtaW5hdGUsXCJpcy1mb2N1c1wiOmUuZm9jdXN9XSx0YWJpbmRleDohIWUuaW5kZXRlcm1pbmF0ZSYmMCxyb2xlOiEhZS5pbmRldGVybWluYXRlJiZcImNoZWNrYm94XCIsXCJhcmlhLWNoZWNrZWRcIjohIWUuaW5kZXRlcm1pbmF0ZSYmXCJtaXhlZFwifSxbWWEsZS50cnVlTGFiZWx8fGUuZmFsc2VMYWJlbD9yKChhKCksbihcImlucHV0XCIse2tleTowLFwib25VcGRhdGU6bW9kZWxWYWx1ZVwiOnRbMV18fCh0WzFdPXQ9PmUubW9kZWw9dCksY2hlY2tlZDplLmlzQ2hlY2tlZCxjbGFzczpcImVsLWNoZWNrYm94X19vcmlnaW5hbFwiLHR5cGU6XCJjaGVja2JveFwiLFwiYXJpYS1oaWRkZW5cIjplLmluZGV0ZXJtaW5hdGU/XCJ0cnVlXCI6XCJmYWxzZVwiLG5hbWU6ZS5uYW1lLGRpc2FibGVkOmUuaXNEaXNhYmxlZCxcInRydWUtdmFsdWVcIjplLnRydWVMYWJlbCxcImZhbHNlLXZhbHVlXCI6ZS5mYWxzZUxhYmVsLG9uQ2hhbmdlOnRbMl18fCh0WzJdPSguLi50KT0+ZS5oYW5kbGVDaGFuZ2UoLi4udCkpLG9uRm9jdXM6dFszXXx8KHRbM109dD0+ZS5mb2N1cz0hMCksb25CbHVyOnRbNF18fCh0WzRdPXQ9PmUuZm9jdXM9ITEpfSxudWxsLDQwLFtcImNoZWNrZWRcIixcImFyaWEtaGlkZGVuXCIsXCJuYW1lXCIsXCJkaXNhYmxlZFwiLFwidHJ1ZS12YWx1ZVwiLFwiZmFsc2UtdmFsdWVcIl0pKSxbW1csZS5tb2RlbF1dKTpyKChhKCksbihcImlucHV0XCIse2tleToxLFwib25VcGRhdGU6bW9kZWxWYWx1ZVwiOnRbNV18fCh0WzVdPXQ9PmUubW9kZWw9dCksY2xhc3M6XCJlbC1jaGVja2JveF9fb3JpZ2luYWxcIix0eXBlOlwiY2hlY2tib3hcIixcImFyaWEtaGlkZGVuXCI6ZS5pbmRldGVybWluYXRlP1widHJ1ZVwiOlwiZmFsc2VcIixkaXNhYmxlZDplLmlzRGlzYWJsZWQsdmFsdWU6ZS5sYWJlbCxuYW1lOmUubmFtZSxvbkNoYW5nZTp0WzZdfHwodFs2XT0oLi4udCk9PmUuaGFuZGxlQ2hhbmdlKC4uLnQpKSxvbkZvY3VzOnRbN118fCh0WzddPXQ9PmUuZm9jdXM9ITApLG9uQmx1cjp0WzhdfHwodFs4XT10PT5lLmZvY3VzPSExKX0sbnVsbCw0MCxbXCJhcmlhLWhpZGRlblwiLFwiZGlzYWJsZWRcIixcInZhbHVlXCIsXCJuYW1lXCJdKSksW1tXLGUubW9kZWxdXSldLDEwLFtcInRhYmluZGV4XCIsXCJyb2xlXCIsXCJhcmlhLWNoZWNrZWRcIl0pLGUuJHNsb3RzLmRlZmF1bHR8fGUubGFiZWw/KGEoKSxuKFwic3BhblwiLHFhLFtkKGUuJHNsb3RzLFwiZGVmYXVsdFwiKSxlLiRzbG90cy5kZWZhdWx0P3UoXCJ2LWlmXCIsITApOihhKCksbihFLHtrZXk6MH0sW2MocChlLmxhYmVsKSwxKV0sNjQpKV0pKTp1KFwidi1pZlwiLCEwKV0sMTAsW1wiaWRcIl0pfSxLYS5fX2ZpbGU9XCJwYWNrYWdlcy9jaGVja2JveC9zcmMvY2hlY2tib3gudnVlXCIsS2EuaW5zdGFsbD1lPT57ZS5jb21wb25lbnQoS2EubmFtZSxLYSl9O2NvbnN0IFVhPSgpPT57Y29uc3QgZT1xZSgpLGE9dyhcImVsRm9ybVwiLHt9KSxuPXcoXCJlbEZvcm1JdGVtXCIse30pLG89dyhcIlJhZGlvR3JvdXBcIix7fSksaT10KCExKSxyPWwoKCgpPT5cIkVsUmFkaW9Hcm91cFwiPT09KG51bGw9PW8/dm9pZCAwOm8ubmFtZSkpKSxzPWwoKCgpPT5uLnNpemV8fGUuc2l6ZSkpO3JldHVybntpc0dyb3VwOnIsZm9jdXM6aSxyYWRpb0dyb3VwOm8sZWxGb3JtOmEsRUxFTUVOVDplLGVsRm9ybUl0ZW1TaXplOnN9fSxHYT0oZSx7aXNHcm91cDp0LHJhZGlvR3JvdXA6YSxlbEZvcm06bixtb2RlbDpvfSk9Pntjb25zdCBpPWwoKCgpPT50LnZhbHVlP2EuZGlzYWJsZWR8fGUuZGlzYWJsZWR8fG4uZGlzYWJsZWQ6ZS5kaXNhYmxlZHx8bi5kaXNhYmxlZCkpLHI9bCgoKCk9PmkudmFsdWV8fHQudmFsdWUmJm8udmFsdWUhPT1lLmxhYmVsPy0xOjApKTtyZXR1cm57aXNEaXNhYmxlZDppLHRhYkluZGV4OnJ9fTt2YXIgWGE9ZSh7bmFtZTpcIkVsUmFkaW9cIixjb21wb25lbnROYW1lOlwiRWxSYWRpb1wiLHByb3BzOnttb2RlbFZhbHVlOnt0eXBlOltCb29sZWFuLFN0cmluZyxOdW1iZXJdLGRlZmF1bHQ6XCJcIn0sbGFiZWw6e3R5cGU6W0Jvb2xlYW4sU3RyaW5nLE51bWJlcl0sZGVmYXVsdDpcIlwifSxkaXNhYmxlZDpCb29sZWFuLG5hbWU6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJcIn0sYm9yZGVyOkJvb2xlYW4sc2l6ZTp7dHlwZTpTdHJpbmcsdmFsaWRhdG9yOkF0fX0sZW1pdHM6W1B0LFwiY2hhbmdlXCJdLHNldHVwKGUsYSl7Y29uc3R7aXNHcm91cDpuLHJhZGlvR3JvdXA6byxlbEZvcm1JdGVtU2l6ZTppLEVMRU1FTlQ6cixmb2N1czpzLGVsRm9ybTp1fT1VYSgpLGQ9dCgpLGM9bCh7Z2V0OigpPT5uLnZhbHVlP28ubW9kZWxWYWx1ZTplLm1vZGVsVmFsdWUsc2V0KHQpe24udmFsdWU/by5jaGFuZ2VFdmVudCh0KTphLmVtaXQoUHQsdCksZC52YWx1ZS5jaGVja2VkPWUubW9kZWxWYWx1ZT09PWUubGFiZWx9fSkse3RhYkluZGV4OnAsaXNEaXNhYmxlZDpofT1HYShlLHtpc0dyb3VwOm4scmFkaW9Hcm91cDpvLGVsRm9ybTp1LG1vZGVsOmN9KSx2PWwoKCgpPT57Y29uc3QgdD1lLnNpemV8fGkudmFsdWV8fHIuc2l6ZTtyZXR1cm4gbi52YWx1ZSYmby5yYWRpb0dyb3VwU2l6ZXx8dH0pKTtyZXR1cm57Zm9jdXM6cyxpc0dyb3VwOm4saXNEaXNhYmxlZDpoLG1vZGVsOmMsdGFiSW5kZXg6cCxyYWRpb1NpemU6dixoYW5kbGVDaGFuZ2U6ZnVuY3Rpb24oKXtrKCgoKT0+e2EuZW1pdChcImNoYW5nZVwiLGMudmFsdWUpfSkpfSxyYWRpb1JlZjpkfX19KTtjb25zdCBRYT1zKFwic3BhblwiLHtjbGFzczpcImVsLXJhZGlvX19pbm5lclwifSxudWxsLC0xKTt2YXIgWmE7WGEucmVuZGVyPWZ1bmN0aW9uKGUsdCxsLG8saSx1KXtyZXR1cm4gYSgpLG4oXCJsYWJlbFwiLHtjbGFzczpbXCJlbC1yYWRpb1wiLHtbXCJlbC1yYWRpby0tXCIrKGUucmFkaW9TaXplfHxcIlwiKV06ZS5ib3JkZXImJmUucmFkaW9TaXplLFwiaXMtZGlzYWJsZWRcIjplLmlzRGlzYWJsZWQsXCJpcy1mb2N1c1wiOmUuZm9jdXMsXCJpcy1ib3JkZXJlZFwiOmUuYm9yZGVyLFwiaXMtY2hlY2tlZFwiOmUubW9kZWw9PT1lLmxhYmVsfV0scm9sZTpcInJhZGlvXCIsXCJhcmlhLWNoZWNrZWRcIjplLm1vZGVsPT09ZS5sYWJlbCxcImFyaWEtZGlzYWJsZWRcIjplLmlzRGlzYWJsZWQsdGFiaW5kZXg6ZS50YWJJbmRleCxvbktleWRvd246dFs2XXx8KHRbNl09JChUKCh0PT5lLm1vZGVsPWUuaXNEaXNhYmxlZD9lLm1vZGVsOmUubGFiZWwpLFtcInN0b3BcIixcInByZXZlbnRcIl0pLFtcInNwYWNlXCJdKSl9LFtzKFwic3BhblwiLHtjbGFzczpbXCJlbC1yYWRpb19faW5wdXRcIix7XCJpcy1kaXNhYmxlZFwiOmUuaXNEaXNhYmxlZCxcImlzLWNoZWNrZWRcIjplLm1vZGVsPT09ZS5sYWJlbH1dfSxbUWEscihzKFwiaW5wdXRcIix7cmVmOlwicmFkaW9SZWZcIixcIm9uVXBkYXRlOm1vZGVsVmFsdWVcIjp0WzFdfHwodFsxXT10PT5lLm1vZGVsPXQpLGNsYXNzOlwiZWwtcmFkaW9fX29yaWdpbmFsXCIsdmFsdWU6ZS5sYWJlbCx0eXBlOlwicmFkaW9cIixcImFyaWEtaGlkZGVuXCI6XCJ0cnVlXCIsbmFtZTplLm5hbWUsZGlzYWJsZWQ6ZS5pc0Rpc2FibGVkLHRhYmluZGV4OlwiLTFcIixvbkZvY3VzOnRbMl18fCh0WzJdPXQ9PmUuZm9jdXM9ITApLG9uQmx1cjp0WzNdfHwodFszXT10PT5lLmZvY3VzPSExKSxvbkNoYW5nZTp0WzRdfHwodFs0XT0oLi4udCk9PmUuaGFuZGxlQ2hhbmdlKC4uLnQpKX0sbnVsbCw0MCxbXCJ2YWx1ZVwiLFwibmFtZVwiLFwiZGlzYWJsZWRcIl0pLFtbaixlLm1vZGVsXV0pXSwyKSxzKFwic3BhblwiLHtjbGFzczpcImVsLXJhZGlvX19sYWJlbFwiLG9uS2V5ZG93bjp0WzVdfHwodFs1XT1UKCgoKT0+e30pLFtcInN0b3BcIl0pKX0sW2QoZS4kc2xvdHMsXCJkZWZhdWx0XCIse30sKCgpPT5bYyhwKGUubGFiZWwpLDEpXSkpXSwzMildLDQyLFtcImFyaWEtY2hlY2tlZFwiLFwiYXJpYS1kaXNhYmxlZFwiLFwidGFiaW5kZXhcIl0pfSxYYS5fX2ZpbGU9XCJwYWNrYWdlcy9yYWRpby9zcmMvcmFkaW8udnVlXCIsWGEuaW5zdGFsbD1lPT57ZS5jb21wb25lbnQoWGEubmFtZSxYYSl9LGZ1bmN0aW9uKGUpe2UuQ0xJQ0s9XCJjbGlja1wiLGUuSE9WRVI9XCJob3ZlclwifShaYXx8KFphPXt9KSk7Y29uc3QgSmE9U3ltYm9sKCk7dmFyIGVuPWUoe25hbWU6XCJFbENhc2NhZGVyTm9kZVwiLGNvbXBvbmVudHM6e0VsQ2hlY2tib3g6S2EsRWxSYWRpbzpYYSxOb2RlQ29udGVudDp7cmVuZGVyKCl7Y29uc3R7bm9kZTplLHBhbmVsOnR9PXRoaXMuJHBhcmVudCx7ZGF0YTpsLGxhYmVsOmF9PWUse3JlbmRlckxhYmVsRm46bn09dDtyZXR1cm4gRChcInNwYW5cIix7Y2xhc3M6XCJlbC1jYXNjYWRlci1ub2RlX19sYWJlbFwifSxuP24oe25vZGU6ZSxkYXRhOmx9KTphKX19fSxwcm9wczp7bm9kZTp7dHlwZTpPYmplY3QscmVxdWlyZWQ6ITB9LG1lbnVJZDpTdHJpbmd9LGVtaXRzOltcImV4cGFuZFwiXSxzZXR1cChlLHtlbWl0OnR9KXtjb25zdCBhPXcoSmEpLG49bCgoKCk9PmEuaXNIb3Zlck1lbnUpKSxvPWwoKCgpPT5hLmNvbmZpZy5tdWx0aXBsZSkpLGk9bCgoKCk9PmEuY29uZmlnLmNoZWNrU3RyaWN0bHkpKSxyPWwoKCgpPT57dmFyIGU7cmV0dXJuIG51bGw9PT0oZT1hLmNoZWNrZWROb2Rlc1swXSl8fHZvaWQgMD09PWU/dm9pZCAwOmUudWlkfSkpLHM9bCgoKCk9PmUubm9kZS5pc0Rpc2FibGVkKSksdT1sKCgoKT0+ZS5ub2RlLmlzTGVhZikpLGQ9bCgoKCk9PmkudmFsdWUmJiF1LnZhbHVlfHwhcy52YWx1ZSkpLGM9bCgoKCk9PmgoYS5leHBhbmRpbmdOb2RlKSkpLHA9bCgoKCk9PmkudmFsdWUmJmEuY2hlY2tlZE5vZGVzLnNvbWUoaCkpKSxoPXQ9Pnt2YXIgbDtjb25zdHtsZXZlbDphLHVpZDpufT1lLm5vZGU7cmV0dXJuKG51bGw9PT0obD1udWxsPT10P3ZvaWQgMDp0LnBhdGhOb2Rlc1thLTFdKXx8dm9pZCAwPT09bD92b2lkIDA6bC51aWQpPT09bn0sdj0oKT0+e2MudmFsdWV8fGEuZXhwYW5kTm9kZShlLm5vZGUpfSxtPSgpPT57YS5sYXp5TG9hZChlLm5vZGUsKCgpPT57dS52YWx1ZXx8digpfSkpfSxmPSgpPT57Y29uc3R7bm9kZTp0fT1lO2QudmFsdWUmJiF0LmxvYWRpbmcmJih0LmxvYWRlZD92KCk6bSgpKX0sZz10PT57ZS5ub2RlLmxvYWRlZD8oKHQ9Pntjb25zdHtub2RlOmx9PWU7dCE9PWwuY2hlY2tlZCYmYS5oYW5kbGVDaGVja0NoYW5nZShsLHQpfSkodCksIWkudmFsdWUmJnYoKSk6bSgpfTtyZXR1cm57cGFuZWw6YSxpc0hvdmVyTWVudTpuLG11bHRpcGxlOm8sY2hlY2tTdHJpY3RseTppLGNoZWNrZWROb2RlSWQ6cixpc0Rpc2FibGVkOnMsaXNMZWFmOnUsZXhwYW5kYWJsZTpkLGluRXhwYW5kaW5nUGF0aDpjLGluQ2hlY2tlZFBhdGg6cCxoYW5kbGVIb3ZlckV4cGFuZDplPT57bi52YWx1ZSYmKGYoKSwhdS52YWx1ZSYmdChcImV4cGFuZFwiLGUpKX0saGFuZGxlRXhwYW5kOmYsaGFuZGxlQ2xpY2s6KCk9PntuLnZhbHVlJiYhdS52YWx1ZXx8KCF1LnZhbHVlfHxzLnZhbHVlfHxpLnZhbHVlfHxvLnZhbHVlP2YoKTpnKCEwKSl9LGhhbmRsZUNoZWNrOmd9fX0pO2NvbnN0IHRuPXMoXCJzcGFuXCIsbnVsbCxudWxsLC0xKSxsbj17a2V5OjIsY2xhc3M6XCJlbC1pY29uLWNoZWNrIGVsLWNhc2NhZGVyLW5vZGVfX3ByZWZpeFwifSxhbj17a2V5OjAsY2xhc3M6XCJlbC1pY29uLWxvYWRpbmcgZWwtY2FzY2FkZXItbm9kZV9fcG9zdGZpeFwifSxubj17a2V5OjEsY2xhc3M6XCJlbC1pY29uLWFycm93LXJpZ2h0IGVsLWNhc2NhZGVyLW5vZGVfX3Bvc3RmaXhcIn07ZW4ucmVuZGVyPWZ1bmN0aW9uKGUsdCxsLG8scixkKXtjb25zdCBjPVAoXCJlbC1jaGVja2JveFwiKSxwPVAoXCJlbC1yYWRpb1wiKSxoPVAoXCJub2RlLWNvbnRlbnRcIik7cmV0dXJuIGEoKSxuKFwibGlcIix7aWQ6YCR7ZS5tZW51SWR9LSR7ZS5ub2RlLnVpZH1gLHJvbGU6XCJtZW51aXRlbVwiLFwiYXJpYS1oYXNwb3B1cFwiOiFlLmlzTGVhZixcImFyaWEtb3duc1wiOmUuaXNMZWFmP251bGw6ZS5tZW51SWQsXCJhcmlhLWV4cGFuZGVkXCI6ZS5pbkV4cGFuZGluZ1BhdGgsdGFiaW5kZXg6ZS5leHBhbmRhYmxlPy0xOm51bGwsY2xhc3M6W1wiZWwtY2FzY2FkZXItbm9kZVwiLGUuY2hlY2tTdHJpY3RseSYmXCJpcy1zZWxlY3RhYmxlXCIsZS5pbkV4cGFuZGluZ1BhdGgmJlwiaW4tYWN0aXZlLXBhdGhcIixlLmluQ2hlY2tlZFBhdGgmJlwiaW4tY2hlY2tlZC1wYXRoXCIsZS5ub2RlLmNoZWNrZWQmJlwiaXMtYWN0aXZlXCIsIWUuZXhwYW5kYWJsZSYmXCJpcy1kaXNhYmxlZFwiXSxvbk1vdXNlZW50ZXI6dFszXXx8KHRbM109KC4uLnQpPT5lLmhhbmRsZUhvdmVyRXhwYW5kKC4uLnQpKSxvbkZvY3VzOnRbNF18fCh0WzRdPSguLi50KT0+ZS5oYW5kbGVIb3ZlckV4cGFuZCguLi50KSksb25DbGljazp0WzVdfHwodFs1XT0oLi4udCk9PmUuaGFuZGxlQ2xpY2soLi4udCkpfSxbdShcIiBwcmVmaXggXCIpLGUubXVsdGlwbGU/KGEoKSxuKGMse2tleTowLFwibW9kZWwtdmFsdWVcIjplLm5vZGUuY2hlY2tlZCxpbmRldGVybWluYXRlOmUubm9kZS5pbmRldGVybWluYXRlLGRpc2FibGVkOmUuaXNEaXNhYmxlZCxvbkNsaWNrOnRbMV18fCh0WzFdPVQoKCgpPT57fSksW1wic3RvcFwiXSkpLFwib25VcGRhdGU6bW9kZWxWYWx1ZVwiOmUuaGFuZGxlQ2hlY2t9LG51bGwsOCxbXCJtb2RlbC12YWx1ZVwiLFwiaW5kZXRlcm1pbmF0ZVwiLFwiZGlzYWJsZWRcIixcIm9uVXBkYXRlOm1vZGVsVmFsdWVcIl0pKTplLmNoZWNrU3RyaWN0bHk/KGEoKSxuKHAse2tleToxLFwibW9kZWwtdmFsdWVcIjplLmNoZWNrZWROb2RlSWQsbGFiZWw6ZS5ub2RlLnVpZCxkaXNhYmxlZDplLmlzRGlzYWJsZWQsXCJvblVwZGF0ZTptb2RlbFZhbHVlXCI6ZS5oYW5kbGVDaGVjayxvbkNsaWNrOnRbMl18fCh0WzJdPVQoKCgpPT57fSksW1wic3RvcFwiXSkpfSx7ZGVmYXVsdDppKCgoKT0+W3UoXCJcXG4gICAgICAgIEFkZCBhbiBlbXB0eSBlbGVtZW50IHRvIGF2b2lkIHJlbmRlciBsYWJlbCxcXG4gICAgICAgIGRvIG5vdCB1c2UgZW1wdHkgZnJhZ21lbnQgaGVyZSBmb3IgaHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZS1uZXh0L3B1bGwvMjQ4NVxcbiAgICAgIFwiKSx0bl0pKSxfOjF9LDgsW1wibW9kZWwtdmFsdWVcIixcImxhYmVsXCIsXCJkaXNhYmxlZFwiLFwib25VcGRhdGU6bW9kZWxWYWx1ZVwiXSkpOmUuaXNMZWFmJiZlLm5vZGUuY2hlY2tlZD8oYSgpLG4oXCJpXCIsbG4pKTp1KFwidi1pZlwiLCEwKSx1KFwiIGNvbnRlbnQgXCIpLHMoaCksdShcIiBwb3N0Zml4IFwiKSxlLmlzTGVhZj91KFwidi1pZlwiLCEwKTooYSgpLG4oRSx7a2V5OjN9LFtlLm5vZGUubG9hZGluZz8oYSgpLG4oXCJpXCIsYW4pKTooYSgpLG4oXCJpXCIsbm4pKV0sNjQpKV0sNDIsW1wiaWRcIixcImFyaWEtaGFzcG9wdXBcIixcImFyaWEtb3duc1wiLFwiYXJpYS1leHBhbmRlZFwiLFwidGFiaW5kZXhcIl0pfSxlbi5fX2ZpbGU9XCJwYWNrYWdlcy9jYXNjYWRlci1wYW5lbC9zcmMvbm9kZS52dWVcIjt2YXIgb249ZSh7bmFtZTpcIkVsQ2FzY2FkZXJNZW51XCIsY29tcG9uZW50czp7RWxTY3JvbGxiYXI6bmwsRWxDYXNjYWRlck5vZGU6ZW59LHByb3BzOntub2Rlczp7dHlwZTpBcnJheSxyZXF1aXJlZDohMH0saW5kZXg6e3R5cGU6TnVtYmVyLHJlcXVpcmVkOiEwfX0sc2V0dXAoZSl7Y29uc3QgYT12KCksbj1SZSgpO2xldCBvPW51bGwsaT1udWxsO2NvbnN0IHI9dyhKYSkscz10KG51bGwpLHU9bCgoKCk9PiFlLm5vZGVzLmxlbmd0aCkpLGQ9bCgoKCk9PmBjYXNjYWRlci1tZW51LSR7bn0tJHtlLmluZGV4fWApKSxjPSgpPT57aSYmKGNsZWFyVGltZW91dChpKSxpPW51bGwpfSxwPSgpPT57cy52YWx1ZSYmKHMudmFsdWUuaW5uZXJIVE1MPVwiXCIsYygpKX07cmV0dXJue3BhbmVsOnIsaG92ZXJab25lOnMsaXNFbXB0eTp1LG1lbnVJZDpkLHQ6cWwsaGFuZGxlRXhwYW5kOmU9PntvPWUudGFyZ2V0fSxoYW5kbGVNb3VzZU1vdmU6ZT0+e2lmKHIuaXNIb3Zlck1lbnUmJm8mJnMudmFsdWUpaWYoby5jb250YWlucyhlLnRhcmdldCkpe2MoKTtjb25zdCB0PWEudm5vZGUuZWwse2xlZnQ6bH09dC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSx7b2Zmc2V0V2lkdGg6bixvZmZzZXRIZWlnaHQ6aX09dCxyPWUuY2xpZW50WC1sLHU9by5vZmZzZXRUb3AsZD11K28ub2Zmc2V0SGVpZ2h0O3MudmFsdWUuaW5uZXJIVE1MPWBcXG4gICAgICAgICAgPHBhdGggc3R5bGU9XCJwb2ludGVyLWV2ZW50czogYXV0bztcIiBmaWxsPVwidHJhbnNwYXJlbnRcIiBkPVwiTSR7cn0gJHt1fSBMJHtufSAwIFYke3V9IFpcIiAvPlxcbiAgICAgICAgICA8cGF0aCBzdHlsZT1cInBvaW50ZXItZXZlbnRzOiBhdXRvO1wiIGZpbGw9XCJ0cmFuc3BhcmVudFwiIGQ9XCJNJHtyfSAke2R9IEwke259ICR7aX0gViR7ZH0gWlwiIC8+XFxuICAgICAgICBgfWVsc2UgaXx8KGk9d2luZG93LnNldFRpbWVvdXQocCxyLmNvbmZpZy5ob3ZlclRocmVzaG9sZCkpfSxjbGVhckhvdmVyWm9uZTpwfX19KTtjb25zdCBybj17a2V5OjAsY2xhc3M6XCJlbC1jYXNjYWRlci1tZW51X19lbXB0eS10ZXh0XCJ9LHNuPXtrZXk6MSxyZWY6XCJob3ZlclpvbmVcIixjbGFzczpcImVsLWNhc2NhZGVyLW1lbnVfX2hvdmVyLXpvbmVcIn07b24ucmVuZGVyPWZ1bmN0aW9uKGUsdCxsLG8scixzKXtjb25zdCBkPVAoXCJlbC1jYXNjYWRlci1ub2RlXCIpLGM9UChcImVsLXNjcm9sbGJhclwiKTtyZXR1cm4gYSgpLG4oYyx7aWQ6ZS5tZW51SWQsdGFnOlwidWxcIixyb2xlOlwibWVudVwiLGNsYXNzOlwiZWwtY2FzY2FkZXItbWVudVwiLFwid3JhcC1jbGFzc1wiOlwiZWwtY2FzY2FkZXItbWVudV9fd3JhcFwiLFwidmlldy1jbGFzc1wiOltcImVsLWNhc2NhZGVyLW1lbnVfX2xpc3RcIixlLmlzRW1wdHkmJlwiaXMtZW1wdHlcIl0sb25Nb3VzZW1vdmU6ZS5oYW5kbGVNb3VzZU1vdmUsb25Nb3VzZWxlYXZlOmUuY2xlYXJIb3ZlclpvbmV9LHtkZWZhdWx0OmkoKCgpPT5bKGEoITApLG4oRSxudWxsLEgoZS5ub2RlcywodD0+KGEoKSxuKGQse2tleTp0LnVpZCxub2RlOnQsXCJtZW51LWlkXCI6ZS5tZW51SWQsb25FeHBhbmQ6ZS5oYW5kbGVFeHBhbmR9LG51bGwsOCxbXCJub2RlXCIsXCJtZW51LWlkXCIsXCJvbkV4cGFuZFwiXSkpKSksMTI4KSksZS5pc0VtcHR5PyhhKCksbihcImRpdlwiLHJuLHAoZS50KFwiZWwuY2FzY2FkZXIubm9EYXRhXCIpKSwxKSk6ZS5wYW5lbC5pc0hvdmVyTWVudT8oYSgpLG4oXCJzdmdcIixzbixudWxsLDUxMikpOnUoXCJ2LWlmXCIsITApXSkpLF86MX0sOCxbXCJpZFwiLFwidmlldy1jbGFzc1wiLFwib25Nb3VzZW1vdmVcIixcIm9uTW91c2VsZWF2ZVwiXSl9LG9uLl9fZmlsZT1cInBhY2thZ2VzL2Nhc2NhZGVyLXBhbmVsL3NyYy9tZW51LnZ1ZVwiO2xldCB1bj0wO2NsYXNzIGRue2NvbnN0cnVjdG9yKGUsdCxsLGE9ITEpe3RoaXMuZGF0YT1lLHRoaXMuY29uZmlnPXQsdGhpcy5wYXJlbnQ9bCx0aGlzLnJvb3Q9YSx0aGlzLnVpZD11bisrLHRoaXMuY2hlY2tlZD0hMSx0aGlzLmluZGV0ZXJtaW5hdGU9ITEsdGhpcy5sb2FkaW5nPSExO2NvbnN0e3ZhbHVlOm4sbGFiZWw6byxjaGlsZHJlbjppfT10LHI9ZVtpXSxzPShlPT57Y29uc3QgdD1bZV07bGV0e3BhcmVudDpsfT1lO2Zvcig7bDspdC51bnNoaWZ0KGwpLGw9bC5wYXJlbnQ7cmV0dXJuIHR9KSh0aGlzKTt0aGlzLmxldmVsPWE/MDpsP2wubGV2ZWwrMToxLHRoaXMudmFsdWU9ZVtuXSx0aGlzLmxhYmVsPWVbb10sdGhpcy5wYXRoTm9kZXM9cyx0aGlzLnBhdGhWYWx1ZXM9cy5tYXAoKGU9PmUudmFsdWUpKSx0aGlzLnBhdGhMYWJlbHM9cy5tYXAoKGU9PmUubGFiZWwpKSx0aGlzLmNoaWxkcmVuRGF0YT1yLHRoaXMuY2hpbGRyZW49KHJ8fFtdKS5tYXAoKGU9Pm5ldyBkbihlLHQsdGhpcykpKSx0aGlzLmxvYWRlZD0hdC5sYXp5fHx0aGlzLmlzTGVhZnx8IUdlKHIpfWdldCBpc0Rpc2FibGVkKCl7Y29uc3R7ZGF0YTplLHBhcmVudDp0LGNvbmZpZzpsfT10aGlzLHtkaXNhYmxlZDphLGNoZWNrU3RyaWN0bHk6bn09bDtyZXR1cm4oVGUoYSk/YShlLHRoaXMpOiEhZVthXSl8fCFuJiYobnVsbD09dD92b2lkIDA6dC5pc0Rpc2FibGVkKX1nZXQgaXNMZWFmKCl7Y29uc3R7ZGF0YTplLGNvbmZpZzp0LGNoaWxkcmVuRGF0YTpsLGxvYWRlZDphfT10aGlzLHtsYXp5Om4sbGVhZjpvfT10LGk9VGUobyk/byhlLHRoaXMpOmVbb107cmV0dXJuIHZvaWQgMD09PWk/IShuJiYhYSkmJiFBcnJheS5pc0FycmF5KGwpOiEhaX1nZXQgdmFsdWVCeU9wdGlvbigpe3JldHVybiB0aGlzLmNvbmZpZy5lbWl0UGF0aD90aGlzLnBhdGhWYWx1ZXM6dGhpcy52YWx1ZX1hcHBlbmRDaGlsZChlKXtjb25zdHtjaGlsZHJlbkRhdGE6dCxjaGlsZHJlbjpsfT10aGlzLGE9bmV3IGRuKGUsdGhpcy5jb25maWcsdGhpcyk7cmV0dXJuIEFycmF5LmlzQXJyYXkodCk/dC5wdXNoKGUpOnRoaXMuY2hpbGRyZW5EYXRhPVtlXSxsLnB1c2goYSksYX1jYWxjVGV4dChlLHQpe2NvbnN0IGw9ZT90aGlzLnBhdGhMYWJlbHMuam9pbih0KTp0aGlzLmxhYmVsO3JldHVybiB0aGlzLnRleHQ9bCxsfWJyb2FkY2FzdChlLC4uLnQpe2NvbnN0IGw9XCJvblBhcmVudFwiK0xlKGUpO3RoaXMuY2hpbGRyZW4uZm9yRWFjaCgoYT0+e2EmJihhLmJyb2FkY2FzdChlLC4uLnQpLGFbbF0mJmFbbF0oLi4udCkpfSkpfWVtaXQoZSwuLi50KXtjb25zdHtwYXJlbnQ6bH09dGhpcyxhPVwib25DaGlsZFwiK0xlKGUpO2wmJihsW2FdJiZsW2FdKC4uLnQpLGwuZW1pdChlLC4uLnQpKX1vblBhcmVudENoZWNrKGUpe3RoaXMuaXNEaXNhYmxlZHx8dGhpcy5zZXRDaGVja1N0YXRlKGUpfW9uQ2hpbGRDaGVjaygpe2NvbnN0e2NoaWxkcmVuOmV9PXRoaXMsdD1lLmZpbHRlcigoZT0+IWUuaXNEaXNhYmxlZCkpLGw9ISF0Lmxlbmd0aCYmdC5ldmVyeSgoZT0+ZS5jaGVja2VkKSk7dGhpcy5zZXRDaGVja1N0YXRlKGwpfXNldENoZWNrU3RhdGUoZSl7Y29uc3QgdD10aGlzLmNoaWxkcmVuLmxlbmd0aCxsPXRoaXMuY2hpbGRyZW4ucmVkdWNlKCgoZSx0KT0+ZSsodC5jaGVja2VkPzE6dC5pbmRldGVybWluYXRlPy41OjApKSwwKTt0aGlzLmNoZWNrZWQ9ZSx0aGlzLmluZGV0ZXJtaW5hdGU9bCE9PXQmJmw+MH1kb0NoZWNrKGUpe2lmKHRoaXMuY2hlY2tlZD09PWUpcmV0dXJuO2NvbnN0e2NoZWNrU3RyaWN0bHk6dCxtdWx0aXBsZTpsfT10aGlzLmNvbmZpZzt0fHwhbD90aGlzLmNoZWNrZWQ9ZToodGhpcy5icm9hZGNhc3QoXCJjaGVja1wiLGUpLHRoaXMuc2V0Q2hlY2tTdGF0ZShlKSx0aGlzLmVtaXQoXCJjaGVja1wiKSl9fWNvbnN0IGNuPShlLHQpPT5lLnJlZHVjZSgoKGUsbCk9PihsLmlzTGVhZj9lLnB1c2gobCk6KCF0JiZlLnB1c2gobCksZT1lLmNvbmNhdChjbihsLmNoaWxkcmVuLHQpKSksZSkpLFtdKTtjbGFzcyBwbntjb25zdHJ1Y3RvcihlLHQpe3RoaXMuY29uZmlnPXQ7Y29uc3QgbD0oZXx8W10pLm1hcCgoZT0+bmV3IGRuKGUsdGhpcy5jb25maWcpKSk7dGhpcy5ub2Rlcz1sLHRoaXMuYWxsTm9kZXM9Y24obCwhMSksdGhpcy5sZWFmTm9kZXM9Y24obCwhMCl9Z2V0Tm9kZXMoKXtyZXR1cm4gdGhpcy5ub2Rlc31nZXRGbGF0dGVkTm9kZXMoZSl7cmV0dXJuIGU/dGhpcy5sZWFmTm9kZXM6dGhpcy5hbGxOb2Rlc31hcHBlbmROb2RlKGUsdCl7Y29uc3QgbD10P3QuYXBwZW5kQ2hpbGQoZSk6bmV3IGRuKGUsdGhpcy5jb25maWcpO3R8fHRoaXMubm9kZXMucHVzaChsKSx0aGlzLmFsbE5vZGVzLnB1c2gobCksbC5pc0xlYWYmJnRoaXMubGVhZk5vZGVzLnB1c2gobCl9YXBwZW5kTm9kZXMoZSx0KXtlLmZvckVhY2goKGU9PnRoaXMuYXBwZW5kTm9kZShlLHQpKSl9Z2V0Tm9kZUJ5VmFsdWUoZSx0PSExKXtpZighZSYmMCE9PWUpcmV0dXJuIG51bGw7cmV0dXJuIHRoaXMuZ2V0RmxhdHRlZE5vZGVzKHQpLmZpbHRlcigodD0+dC52YWx1ZT09PWV8fHBlKHQucGF0aFZhbHVlcyxlKSkpWzBdfHxudWxsfWdldFNhbWVOb2RlKGUpe2lmKCFlKXJldHVybiBudWxsO3JldHVybiB0aGlzLmdldEZsYXR0ZWROb2RlcyghMSkuZmlsdGVyKCgoe3ZhbHVlOnQsbGV2ZWw6bH0pPT5lLnZhbHVlPT09dCYmZS5sZXZlbD09PWwpKVswXXx8bnVsbH19ZnVuY3Rpb24gaG4oZSx0KXtpZih6ZSlyZXR1cm47aWYoIXQpcmV0dXJuIHZvaWQoZS5zY3JvbGxUb3A9MCk7Y29uc3QgbD1bXTtsZXQgYT10Lm9mZnNldFBhcmVudDtmb3IoO251bGwhPT1hJiZlIT09YSYmZS5jb250YWlucyhhKTspbC5wdXNoKGEpLGE9YS5vZmZzZXRQYXJlbnQ7Y29uc3Qgbj10Lm9mZnNldFRvcCtsLnJlZHVjZSgoKGUsdCk9PmUrdC5vZmZzZXRUb3ApLDApLG89bit0Lm9mZnNldEhlaWdodCxpPWUuc2Nyb2xsVG9wLHI9aStlLmNsaWVudEhlaWdodDtuPGk/ZS5zY3JvbGxUb3A9bjpvPnImJihlLnNjcm9sbFRvcD1vLWUuY2xpZW50SGVpZ2h0KX1jb25zdCB2bj17bW9kZWxWYWx1ZTpbTnVtYmVyLFN0cmluZyxBcnJheV0sb3B0aW9uczp7dHlwZTpBcnJheSxkZWZhdWx0OigpPT5bXX0scHJvcHM6e3R5cGU6T2JqZWN0LGRlZmF1bHQ6KCk9Pih7fSl9fSxtbj17ZXhwYW5kVHJpZ2dlcjpaYS5DTElDSyxtdWx0aXBsZTohMSxjaGVja1N0cmljdGx5OiExLGVtaXRQYXRoOiEwLGxhenk6ITEsbGF6eUxvYWQ6U2UsdmFsdWU6XCJ2YWx1ZVwiLGxhYmVsOlwibGFiZWxcIixjaGlsZHJlbjpcImNoaWxkcmVuXCIsbGVhZjpcImxlYWZcIixkaXNhYmxlZDpcImRpc2FibGVkXCIsaG92ZXJUaHJlc2hvbGQ6NTAwfSxmbj1lPT4hZS5nZXRBdHRyaWJ1dGUoXCJhcmlhLW93bnNcIiksZ249ZT0+e2lmKCFlKXJldHVybiAwO2NvbnN0IHQ9ZS5pZC5zcGxpdChcIi1cIik7cmV0dXJuIE51bWJlcih0W3QubGVuZ3RoLTJdKX0sYm49ZT0+e2UmJihlLmZvY3VzKCksIWZuKGUpJiZlLmNsaWNrKCkpfTt2YXIgeW49ZSh7bmFtZTpcIkVsQ2FzY2FkZXJQYW5lbFwiLGNvbXBvbmVudHM6e0VsQ2FzY2FkZXJNZW51Om9ufSxwcm9wczpPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sdm4pLHtib3JkZXI6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiEwfSxyZW5kZXJMYWJlbDpGdW5jdGlvbn0pLGVtaXRzOltQdCxcImNoYW5nZVwiLFwiY2xvc2VcIixcImV4cGFuZC1jaGFuZ2VcIl0sc2V0dXAoZSx7ZW1pdDphLHNsb3RzOm59KXtsZXQgbz0hMCxpPSExO2NvbnN0IHI9KGU9PmwoKCgpPT5PYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sbW4pLGUucHJvcHMpKSkpKGUpLHM9dChudWxsKSx1PXQoW10pLGQ9dChudWxsKSxjPXQoW10pLHA9dChudWxsKSxoPXQoW10pLHY9bCgoKCk9PnIudmFsdWUuZXhwYW5kVHJpZ2dlcj09PVphLkhPVkVSKSksbT1sKCgoKT0+ZS5yZW5kZXJMYWJlbHx8bi5kZWZhdWx0KSksZz0oZSx0KT0+e2NvbnN0IGw9ci52YWx1ZTsoZT1lfHxuZXcgZG4oe30sbCxudWxsLCEwKSkubG9hZGluZz0hMDtsLmxhenlMb2FkKGUsKGw9Pntjb25zdCBhPWUucm9vdD9udWxsOmU7bCYmcy52YWx1ZS5hcHBlbmROb2RlcyhsLGEpLGUubG9hZGluZz0hMSxlLmxvYWRlZD0hMCx0JiZ0KGwpfSkpfSxiPShlLHQpPT57dmFyIGw7Y29uc3R7bGV2ZWw6bn09ZSxvPWMudmFsdWUuc2xpY2UoMCxuKTtsZXQgaTtlLmlzTGVhZj9pPWUucGF0aE5vZGVzW24tMl06KGk9ZSxvLnB1c2goZS5jaGlsZHJlbikpLChudWxsPT09KGw9cC52YWx1ZSl8fHZvaWQgMD09PWw/dm9pZCAwOmwudWlkKSE9PShudWxsPT1pP3ZvaWQgMDppLnVpZCkmJihwLnZhbHVlPWUsYy52YWx1ZT1vLCF0JiZhKFwiZXhwYW5kLWNoYW5nZVwiLChudWxsPT1lP3ZvaWQgMDplLnBhdGhWYWx1ZXMpfHxbXSkpfSxDPShlLHQsbD0hMCk9Pntjb25zdHtjaGVja1N0cmljdGx5Om4sbXVsdGlwbGU6b309ci52YWx1ZSxzPWgudmFsdWVbMF07aT0hMCwhbyYmKG51bGw9PXN8fHMuZG9DaGVjayghMSkpLGUuZG9DaGVjayh0KSxFKCksbCYmIW8mJiFuJiZhKFwiY2xvc2VcIil9LHc9ZT0+cy52YWx1ZS5nZXRGbGF0dGVkTm9kZXMoZSksUz1lPT53KGUpLmZpbHRlcigoZT0+ZS5jaGVja2VkKSksRT0oKT0+e2NvbnN0e2NoZWNrU3RyaWN0bHk6ZSxtdWx0aXBsZTp0fT1yLnZhbHVlLGw9KChlLHQpPT57Y29uc3QgbD10LnNsaWNlKDApLGE9bC5tYXAoKGU9PmUudWlkKSksbj1lLnJlZHVjZSgoKGUsdCk9Pntjb25zdCBuPWEuaW5kZXhPZih0LnVpZCk7cmV0dXJuIG4+LTEmJihlLnB1c2godCksbC5zcGxpY2UobiwxKSxhLnNwbGljZShuLDEpKSxlfSksW10pO3JldHVybiBuLnB1c2goLi4ubCksbn0pKGgudmFsdWUsUyghZSkpLGE9bC5tYXAoKGU9PmUudmFsdWVCeU9wdGlvbikpO2gudmFsdWU9bCxkLnZhbHVlPXQ/YTphWzBdfHxudWxsfSxNPSh0PSExLGw9ITEpPT57Y29uc3R7bW9kZWxWYWx1ZTphfT1lLHtsYXp5Om4sbXVsdGlwbGU6dSxjaGVja1N0cmljdGx5OmN9PXIudmFsdWUscD0hYztpZihvJiYhaSYmKGx8fCFwZShhLGQudmFsdWUpKSlpZihuJiYhdCl7Y29uc3QgZT1RZShYZShIZShhKSkpLm1hcCgoZT0+cy52YWx1ZS5nZXROb2RlQnlWYWx1ZShlKSkpLmZpbHRlcigoZT0+ISFlJiYhZS5sb2FkZWQmJiFlLmxvYWRpbmcpKTtlLmxlbmd0aD9lLmZvckVhY2goKGU9PntnKGUsKCgpPT5NKCExLGwpKSl9KSk6TSghMCxsKX1lbHNle2NvbnN0IGU9UWUoKHU/SGUoYSk6W2FdKS5tYXAoKGU9PnMudmFsdWUuZ2V0Tm9kZUJ5VmFsdWUoZSxwKSkpKTtUKGUsITEpLGQudmFsdWU9YX19LFQ9KGUsdD0hMCk9Pntjb25zdHtjaGVja1N0cmljdGx5Omx9PXIudmFsdWUsYT1oLnZhbHVlLG49ZS5maWx0ZXIoKGU9PiEhZSYmKGx8fGUuaXNMZWFmKSkpLG89cy52YWx1ZS5nZXRTYW1lTm9kZShwLnZhbHVlKSxpPXQmJm98fG5bMF07aT9pLnBhdGhOb2Rlcy5mb3JFYWNoKChlPT5iKGUsITApKSk6cC52YWx1ZT1udWxsLGEuZm9yRWFjaCgoZT0+ZS5kb0NoZWNrKCExKSkpLG4uZm9yRWFjaCgoZT0+ZS5kb0NoZWNrKCEwKSkpLGgudmFsdWU9bixrKE4pfSxOPSgpPT57emV8fHUudmFsdWUuZm9yRWFjaCgoZT0+e2NvbnN0IHQ9bnVsbD09ZT92b2lkIDA6ZS4kZWw7aWYodCl7aG4odC5xdWVyeVNlbGVjdG9yKFwiLmVsLXNjcm9sbGJhcl9fd3JhcFwiKSx0LnF1ZXJ5U2VsZWN0b3IoXCIuZWwtY2FzY2FkZXItbm9kZS5pcy1hY3RpdmVcIil8fHQucXVlcnlTZWxlY3RvcihcIi5lbC1jYXNjYWRlci1ub2RlLmluLWFjdGl2ZS1wYXRoXCIpKX19KSl9O3JldHVybiB4KEphLGYoe2NvbmZpZzpyLGV4cGFuZGluZ05vZGU6cCxjaGVja2VkTm9kZXM6aCxpc0hvdmVyTWVudTp2LHJlbmRlckxhYmVsRm46bSxsYXp5TG9hZDpnLGV4cGFuZE5vZGU6YixoYW5kbGVDaGVja0NoYW5nZTpDfSkpLHkoW3IsKCk9PmUub3B0aW9uc10sKCgpPT57Y29uc3R7b3B0aW9uczp0fT1lLGw9ci52YWx1ZTtpPSExLHMudmFsdWU9bmV3IHBuKHQsbCksYy52YWx1ZT1bcy52YWx1ZS5nZXROb2RlcygpXSxsLmxhenkmJkdlKGUub3B0aW9ucyk/KG89ITEsZyhudWxsLCgoKT0+e289ITAsTSghMSwhMCl9KSkpOk0oITEsITApfSkse2RlZXA6ITAsaW1tZWRpYXRlOiEwfSkseSgoKCk9PmUubW9kZWxWYWx1ZSksKCgpPT57aT0hMSxNKCl9KSkseShkLCh0PT57cGUodCxlLm1vZGVsVmFsdWUpfHwoYShQdCx0KSxhKFwiY2hhbmdlXCIsdCkpfSkpLEsoKCgpPT51LnZhbHVlPVtdKSksXygoKCk9PiFHZShlLm1vZGVsVmFsdWUpJiZNKCkpKSx7bWVudUxpc3Q6dSxtZW51czpjLGNoZWNrZWROb2RlczpoLGhhbmRsZUtleURvd246ZT0+e2NvbnN0IHQ9ZS50YXJnZXQse2NvZGU6bH09ZTtzd2l0Y2gobCl7Y2FzZSBmdC51cDpjYXNlIGZ0LmRvd246Y29uc3QgZT1sPT09ZnQudXA/LTE6MTtibigoKGUsdCk9Pntjb25zdHtwYXJlbnROb2RlOmx9PWU7aWYoIWwpcmV0dXJuIG51bGw7Y29uc3QgYT1sLnF1ZXJ5U2VsZWN0b3JBbGwoJy5lbC1jYXNjYWRlci1ub2RlW3RhYmluZGV4PVwiLTFcIl0nKTtyZXR1cm4gYVtBcnJheS5wcm90b3R5cGUuaW5kZXhPZi5jYWxsKGEsZSkrdF18fG51bGx9KSh0LGUpKTticmVhaztjYXNlIGZ0LmxlZnQ6Y29uc3Qgbj11LnZhbHVlW2duKHQpLTFdLG89bnVsbD09bj92b2lkIDA6bi4kZWwucXVlcnlTZWxlY3RvcignLmVsLWNhc2NhZGVyLW5vZGVbYXJpYS1leHBhbmRlZD1cInRydWVcIl0nKTtibihvKTticmVhaztjYXNlIGZ0LnJpZ2h0OmNvbnN0IGk9dS52YWx1ZVtnbih0KSsxXSxyPW51bGw9PWk/dm9pZCAwOmkuJGVsLnF1ZXJ5U2VsZWN0b3IoJy5lbC1jYXNjYWRlci1ub2RlW3RhYmluZGV4PVwiLTFcIl0nKTtibihyKTticmVhaztjYXNlIGZ0LmVudGVyOihlPT57aWYoIWUpcmV0dXJuO2NvbnN0IHQ9ZS5xdWVyeVNlbGVjdG9yKFwiaW5wdXRcIik7dD90LmNsaWNrKCk6Zm4oZSkmJmUuY2xpY2soKX0pKHQpO2JyZWFrO2Nhc2UgZnQuZXNjOmNhc2UgZnQudGFiOmEoXCJjbG9zZVwiKX19LGhhbmRsZUNoZWNrQ2hhbmdlOkMsZ2V0RmxhdHRlZE5vZGVzOncsZ2V0Q2hlY2tlZE5vZGVzOlMsY2xlYXJDaGVja2VkTm9kZXM6KCk9PntoLnZhbHVlLmZvckVhY2goKGU9PmUuZG9DaGVjayghMSkpKSxFKCl9LGNhbGN1bGF0ZUNoZWNrZWRWYWx1ZTpFLHNjcm9sbFRvRXhwYW5kaW5nTm9kZTpOfX19KTt5bi5yZW5kZXI9ZnVuY3Rpb24oZSx0LGwsbyxpLHIpe2NvbnN0IHM9UChcImVsLWNhc2NhZGVyLW1lbnVcIik7cmV0dXJuIGEoKSxuKFwiZGl2XCIse2NsYXNzOltcImVsLWNhc2NhZGVyLXBhbmVsXCIsZS5ib3JkZXImJlwiaXMtYm9yZGVyZWRcIl0sb25LZXlkb3duOnRbMV18fCh0WzFdPSguLi50KT0+ZS5oYW5kbGVLZXlEb3duKC4uLnQpKX0sWyhhKCEwKSxuKEUsbnVsbCxIKGUubWVudXMsKCh0LGwpPT4oYSgpLG4ocyx7a2V5OmwscmVmOnQ9PmUubWVudUxpc3RbbF09dCxpbmRleDpsLG5vZGVzOnR9LG51bGwsOCxbXCJpbmRleFwiLFwibm9kZXNcIl0pKSkpLDEyOCkpXSwzNCl9LHluLl9fZmlsZT1cInBhY2thZ2VzL2Nhc2NhZGVyLXBhbmVsL3NyYy9pbmRleC52dWVcIix5bi5pbnN0YWxsPWU9PntlLmNvbXBvbmVudCh5bi5uYW1lLHluKX07dmFyIGtuPWUoe25hbWU6XCJFbFRhZ1wiLHByb3BzOntjbG9zYWJsZTpCb29sZWFuLHR5cGU6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJcIn0saGl0OkJvb2xlYW4sZGlzYWJsZVRyYW5zaXRpb25zOkJvb2xlYW4sY29sb3I6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJcIn0sc2l6ZTp7dHlwZTpTdHJpbmcsdmFsaWRhdG9yOkF0fSxlZmZlY3Q6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJsaWdodFwiLHZhbGlkYXRvcjplPT4tMSE9PVtcImRhcmtcIixcImxpZ2h0XCIsXCJwbGFpblwiXS5pbmRleE9mKGUpfX0sZW1pdHM6W1wiY2xvc2VcIixcImNsaWNrXCJdLHNldHVwKGUsdCl7Y29uc3QgYT1xZSgpLG49bCgoKCk9PmUuc2l6ZXx8YS5zaXplKSksbz1sKCgoKT0+e2NvbnN0e3R5cGU6dCxoaXQ6bCxlZmZlY3Q6YX09ZTtyZXR1cm5bXCJlbC10YWdcIix0P1wiZWwtdGFnLS1cIit0OlwiXCIsbi52YWx1ZT9cImVsLXRhZy0tXCIrbi52YWx1ZTpcIlwiLGE/XCJlbC10YWctLVwiK2E6XCJcIixsJiZcImlzLWhpdFwiXX0pKTtyZXR1cm57dGFnU2l6ZTpuLGNsYXNzZXM6byxoYW5kbGVDbG9zZTplPT57ZS5zdG9wUHJvcGFnYXRpb24oKSx0LmVtaXQoXCJjbG9zZVwiLGUpfSxoYW5kbGVDbGljazplPT57dC5lbWl0KFwiY2xpY2tcIixlKX19fX0pO2tuLnJlbmRlcj1mdW5jdGlvbihlLHQsbCxyLGMscCl7cmV0dXJuIGUuZGlzYWJsZVRyYW5zaXRpb25zPyhhKCksbihvLHtrZXk6MSxuYW1lOlwiZWwtem9vbS1pbi1jZW50ZXJcIn0se2RlZmF1bHQ6aSgoKCk9PltzKFwic3BhblwiLHtjbGFzczplLmNsYXNzZXMsc3R5bGU6e2JhY2tncm91bmRDb2xvcjplLmNvbG9yfSxvbkNsaWNrOnRbNF18fCh0WzRdPSguLi50KT0+ZS5oYW5kbGVDbGljayguLi50KSl9LFtkKGUuJHNsb3RzLFwiZGVmYXVsdFwiKSxlLmNsb3NhYmxlPyhhKCksbihcImlcIix7a2V5OjAsY2xhc3M6XCJlbC10YWdfX2Nsb3NlIGVsLWljb24tY2xvc2VcIixvbkNsaWNrOnRbM118fCh0WzNdPSguLi50KT0+ZS5oYW5kbGVDbG9zZSguLi50KSl9KSk6dShcInYtaWZcIiwhMCldLDYpXSkpLF86M30pKTooYSgpLG4oXCJzcGFuXCIse2tleTowLGNsYXNzOmUuY2xhc3NlcyxzdHlsZTp7YmFja2dyb3VuZENvbG9yOmUuY29sb3J9LG9uQ2xpY2s6dFsyXXx8KHRbMl09KC4uLnQpPT5lLmhhbmRsZUNsaWNrKC4uLnQpKX0sW2QoZS4kc2xvdHMsXCJkZWZhdWx0XCIpLGUuY2xvc2FibGU/KGEoKSxuKFwiaVwiLHtrZXk6MCxjbGFzczpcImVsLXRhZ19fY2xvc2UgZWwtaWNvbi1jbG9zZVwiLG9uQ2xpY2s6dFsxXXx8KHRbMV09KC4uLnQpPT5lLmhhbmRsZUNsb3NlKC4uLnQpKX0pKTp1KFwidi1pZlwiLCEwKV0sNikpfSxrbi5fX2ZpbGU9XCJwYWNrYWdlcy90YWcvc3JjL2luZGV4LnZ1ZVwiLGtuLmluc3RhbGw9ZT0+e2UuY29tcG9uZW50KGtuLm5hbWUsa24pfTtjb25zdCBDbj17bWVkaXVtOjM2LHNtYWxsOjMyLG1pbmk6Mjh9LHhuPXttb2RpZmllcnM6W3tuYW1lOlwiYXJyb3dQb3NpdGlvblwiLGVuYWJsZWQ6ITAscGhhc2U6XCJtYWluXCIsZm46KHtzdGF0ZTplfSk9Pntjb25zdHttb2RpZmllcnNEYXRhOnQsZWxlbWVudHM6bH09ZSx7cmVmZXJlbmNlOmEsYXJyb3c6bn09bDt0LmFycm93Lng9dC5hcnJvdy54LShhLmNsaWVudFdpZHRoLW4uY2xpZW50V2lkdGgpLzIrMzV9LHJlcXVpcmVzOltcImFycm93XCJdfV19O3ZhciB3bj1lKHtuYW1lOlwiRWxDYXNjYWRlclwiLGNvbXBvbmVudHM6e0VsQ2FzY2FkZXJQYW5lbDp5bixFbElucHV0Old0LEVsUG9wcGVyOlNsLEVsU2Nyb2xsYmFyOm5sLEVsVGFnOmtufSxkaXJlY3RpdmVzOntDbGlja291dHNpZGU6TXR9LHByb3BzOk9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSx2bikse3NpemU6e3R5cGU6U3RyaW5nLHZhbGlkYXRvcjpBdH0scGxhY2Vob2xkZXI6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6KCk9PnFsKFwiZWwuY2FzY2FkZXIucGxhY2Vob2xkZXJcIil9LGRpc2FibGVkOkJvb2xlYW4sY2xlYXJhYmxlOkJvb2xlYW4sZmlsdGVyYWJsZTpCb29sZWFuLGZpbHRlck1ldGhvZDp7dHlwZTpGdW5jdGlvbixkZWZhdWx0OihlLHQpPT5lLnRleHQuaW5jbHVkZXModCl9LHNlcGFyYXRvcjp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIiAvIFwifSxzaG93QWxsTGV2ZWxzOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMH0sY29sbGFwc2VUYWdzOkJvb2xlYW4sZGVib3VuY2U6e3R5cGU6TnVtYmVyLGRlZmF1bHQ6MzAwfSxiZWZvcmVGaWx0ZXI6e3R5cGU6RnVuY3Rpb24sZGVmYXVsdDooKT0+ITB9LHBvcHBlckNsYXNzOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiXCJ9fSksZW1pdHM6W1B0LFwiY2hhbmdlXCIsXCJmb2N1c1wiLFwiYmx1clwiLFwidmlzaWJsZS1jaGFuZ2VcIixcImV4cGFuZC1jaGFuZ2VcIixcInJlbW92ZS10YWdcIl0sc2V0dXAoZSx7ZW1pdDphfSl7bGV0IG49MCxvPTA7Y29uc3QgaT1xZSgpLHI9dyhcImVsRm9ybVwiLHt9KSxzPXcoXCJlbEZvcm1JdGVtXCIse30pLHU9dChudWxsKSxkPXQobnVsbCksYz10KG51bGwpLHA9dChudWxsKSxoPXQobnVsbCksdj10KCExKSxtPXQoITEpLGY9dCghMSksZz10KFwiXCIpLGI9dChcIlwiKSxDPXQoW10pLHg9dChbXSksUz1sKCgoKT0+ZS5kaXNhYmxlZHx8ci5kaXNhYmxlZCkpLEU9bCgoKCk9PmUuc2l6ZXx8cy5zaXplfHxpLnNpemUpKSxNPWwoKCgpPT5bXCJzbWFsbFwiLFwibWluaVwiXS5pbmNsdWRlcyhFLnZhbHVlKT9cIm1pbmlcIjpcInNtYWxsXCIpKSxUPWwoKCgpPT4hIWUucHJvcHMubXVsdGlwbGUpKSxOPWwoKCgpPT4hZS5maWx0ZXJhYmxlfHxULnZhbHVlKSksRD1sKCgoKT0+VC52YWx1ZT9iLnZhbHVlOmcudmFsdWUpKSxQPWwoKCgpPT57dmFyIGU7cmV0dXJuKG51bGw9PT0oZT1wLnZhbHVlKXx8dm9pZCAwPT09ZT92b2lkIDA6ZS5jaGVja2VkTm9kZXMpfHxbXX0pKSxWPWwoKCgpPT4hKCFlLmNsZWFyYWJsZXx8Uy52YWx1ZXx8Zi52YWx1ZXx8IW0udmFsdWUpJiYhIVAudmFsdWUubGVuZ3RoKSksST1sKCgoKT0+e2NvbnN0e3Nob3dBbGxMZXZlbHM6dCxzZXBhcmF0b3I6bH09ZSxhPVAudmFsdWU7cmV0dXJuIGEubGVuZ3RoP1QudmFsdWU/XCIgXCI6YVswXS5jYWxjVGV4dCh0LGwpOlwiXCJ9KSksQT1sKHtnZXQ6KCk9PmUubW9kZWxWYWx1ZSxzZXQoZSl7dmFyIHQ7YShQdCxlKSxhKFwiY2hhbmdlXCIsZSksbnVsbD09PSh0PXMuZm9ybUl0ZW1NaXR0KXx8dm9pZCAwPT09dHx8dC5lbWl0KFwiZWwuZm9ybS5jaGFuZ2VcIixbZV0pfX0pLEI9dD0+e2lmKCFTLnZhbHVlJiYodD1udWxsIT10P3Q6IXYudmFsdWUpIT09di52YWx1ZSl7aWYodi52YWx1ZT10LGQudmFsdWUuaW5wdXQuc2V0QXR0cmlidXRlKFwiYXJpYS1leHBhbmRlZFwiLHQpLHQpTCgpLGsocC52YWx1ZS5zY3JvbGxUb0V4cGFuZGluZ05vZGUpO2Vsc2UgaWYoZS5maWx0ZXJhYmxlKXtjb25zdHt2YWx1ZTplfT1JO2cudmFsdWU9ZSxiLnZhbHVlPWV9YShcInZpc2libGUtY2hhbmdlXCIsdCl9fSxMPSgpPT57ayh1LnZhbHVlLnVwZGF0ZSl9LHo9KCk9PntmLnZhbHVlPSExfSxGPXQ9Pntjb25zdHtzaG93QWxsTGV2ZWxzOmwsc2VwYXJhdG9yOmF9PWU7cmV0dXJue25vZGU6dCxrZXk6dC51aWQsdGV4dDp0LmNhbGNUZXh0KGwsYSksaGl0U3RhdGU6ITEsY2xvc2FibGU6IVMudmFsdWUmJiF0LmlzRGlzYWJsZWR9fSwkPWU9Pntjb25zdHtub2RlOnR9PWU7dC5kb0NoZWNrKCExKSxwLnZhbHVlLmNhbGN1bGF0ZUNoZWNrZWRWYWx1ZSgpLGEoXCJyZW1vdmUtdGFnXCIsdC52YWx1ZUJ5T3B0aW9uKX0sUj0oKT0+e2NvbnN0e2ZpbHRlck1ldGhvZDp0LHNob3dBbGxMZXZlbHM6bCxzZXBhcmF0b3I6YX09ZSxuPXAudmFsdWUuZ2V0RmxhdHRlZE5vZGVzKCFlLnByb3BzLmNoZWNrU3RyaWN0bHkpLmZpbHRlcigoZT0+IWUuaXNEaXNhYmxlZCYmKGUuY2FsY1RleHQobCxhKSx0KGUsRC52YWx1ZSkpKSk7VC52YWx1ZSYmQy52YWx1ZS5mb3JFYWNoKChlPT57ZS5oaXRTdGF0ZT0hMX0pKSxmLnZhbHVlPSEwLHgudmFsdWU9bixMKCl9LEg9KCk9Pnt2YXIgZTtsZXQgdD1udWxsO3Q9Zi52YWx1ZSYmaC52YWx1ZT9oLnZhbHVlLiRlbC5xdWVyeVNlbGVjdG9yKFwiLmVsLWNhc2NhZGVyX19zdWdnZXN0aW9uLWl0ZW1cIik6bnVsbD09PShlPXAudmFsdWUpfHx2b2lkIDA9PT1lP3ZvaWQgMDplLiRlbC5xdWVyeVNlbGVjdG9yKCcuZWwtY2FzY2FkZXItbm9kZVt0YWJpbmRleD1cIi0xXCJdJyksdCYmKHQuZm9jdXMoKSwhZi52YWx1ZSYmdC5jbGljaygpKX0sVz0oKT0+e3ZhciBlO2NvbnN0IHQ9ZC52YWx1ZS5pbnB1dCxsPWMudmFsdWUsYT1udWxsPT09KGU9aC52YWx1ZSl8fHZvaWQgMD09PWU/dm9pZCAwOmUuJGVsO2lmKCF6ZSYmdCl7aWYoYSl7YS5xdWVyeVNlbGVjdG9yKFwiLmVsLWNhc2NhZGVyX19zdWdnZXN0aW9uLWxpc3RcIikuc3R5bGUubWluV2lkdGg9dC5vZmZzZXRXaWR0aCtcInB4XCJ9aWYobCl7Y29uc3R7b2Zmc2V0SGVpZ2h0OmV9PWwsYT1NYXRoLm1heChlKzYsbikrXCJweFwiO3Quc3R5bGUuaGVpZ2h0PWEsTCgpfX19LGo9bGUoKCgpPT57Y29uc3R7dmFsdWU6dH09RDtpZighdClyZXR1cm47Y29uc3QgbD1lLmJlZm9yZUZpbHRlcih0KTt2YXIgYTtEZShhPWwpJiZUZShhLnRoZW4pJiZUZShhLmNhdGNoKT9sLnRoZW4oUik6ITEhPT1sP1IoKTp6KCl9KSxlLmRlYm91bmNlKTtyZXR1cm4geShmLEwpLHkoW1AsU10sKCgpPT57aWYoIVQudmFsdWUpcmV0dXJuO2NvbnN0IHQ9UC52YWx1ZSxsPVtdO2lmKHQubGVuZ3RoKXtjb25zdFthLC4uLm5dPXQsbz1uLmxlbmd0aDtsLnB1c2goRihhKSksbyYmKGUuY29sbGFwc2VUYWdzP2wucHVzaCh7a2V5Oi0xLHRleHQ6XCIrIFwiK28sY2xvc2FibGU6ITF9KTpuLmZvckVhY2goKGU9PmwucHVzaChGKGUpKSkpKX1DLnZhbHVlPWx9KSkseShDLCgoKT0+ayhXKSkpLHkoSSwoZT0+Zy52YWx1ZT1lKSx7aW1tZWRpYXRlOiEwfSksXygoKCk9Pntjb25zdCBlPWQudmFsdWUuJGVsO249KG51bGw9PWU/dm9pZCAwOmUub2Zmc2V0SGVpZ2h0KXx8Q25bRS52YWx1ZV18fDQwLEp0KGUsVyl9KSksTygoKCk9PntlbChkLnZhbHVlLiRlbCxXKX0pKSx7cG9wcGVyT3B0aW9uczp4bixwb3BwZXI6dSxpbnB1dDpkLHRhZ1dyYXBwZXI6YyxwYW5lbDpwLHN1Z2dlc3Rpb25QYW5lbDpoLHBvcHBlclZpc2libGU6dixpbnB1dEhvdmVyOm0sZmlsdGVyaW5nOmYscHJlc2VudFRleHQ6SSxjaGVja2VkVmFsdWU6QSxpbnB1dFZhbHVlOmcsc2VhcmNoSW5wdXRWYWx1ZTpiLHByZXNlbnRUYWdzOkMsc3VnZ2VzdGlvbnM6eCxpc0Rpc2FibGVkOlMscmVhbFNpemU6RSx0YWdTaXplOk0sbXVsdGlwbGU6VCxyZWFkb25seTpOLGNsZWFyQnRuVmlzaWJsZTpWLHQ6cWwsdG9nZ2xlUG9wcGVyVmlzaWJsZTpCLGhpZGVTdWdnZXN0aW9uUGFuZWw6eixkZWxldGVUYWc6JCxmb2N1c0ZpcnN0Tm9kZTpILGdldENoZWNrZWROb2RlczplPT5wLnZhbHVlLmdldENoZWNrZWROb2RlcyhlKSxoYW5kbGVFeHBhbmRDaGFuZ2U6ZT0+e0woKSxhKFwiZXhwYW5kLWNoYW5nZVwiLGUpfSxoYW5kbGVLZXlEb3duOmU9Pntzd2l0Y2goZS5jb2RlKXtjYXNlIGZ0LmVudGVyOkIoKTticmVhaztjYXNlIGZ0LmRvd246QighMCksayhIKSxldmVudC5wcmV2ZW50RGVmYXVsdCgpO2JyZWFrO2Nhc2UgZnQuZXNjOmNhc2UgZnQudGFiOkIoITEpfX0saGFuZGxlQ2xlYXI6KCk9PntwLnZhbHVlLmNsZWFyQ2hlY2tlZE5vZGVzKCksQighMSl9LGhhbmRsZVN1Z2dlc3Rpb25DbGljazplPT57Y29uc3R7Y2hlY2tlZDp0fT1lO1QudmFsdWU/cC52YWx1ZS5oYW5kbGVDaGVja0NoYW5nZShlLCF0LCExKTooIXQmJnAudmFsdWUuaGFuZGxlQ2hlY2tDaGFuZ2UoZSwhMCwhMSksQighMSkpfSxoYW5kbGVEZWxldGU6KCk9Pntjb25zdCBlPUMudmFsdWUsdD1lW2UubGVuZ3RoLTFdO289Yi52YWx1ZT8wOm8rMSx0JiZvJiYodC5oaXRTdGF0ZT8kKHQpOnQuaGl0U3RhdGU9ITApfSxoYW5kbGVJbnB1dDooZSx0KT0+eyF2LnZhbHVlJiZCKCEwKSwobnVsbD09dD92b2lkIDA6dC5pc0NvbXBvc2luZyl8fChlP2ooKTp6KCkpfX19fSk7Y29uc3QgX249e2tleTowLHJlZjpcInRhZ1dyYXBwZXJcIixjbGFzczpcImVsLWNhc2NhZGVyX190YWdzXCJ9LFNuPXtrZXk6MCxjbGFzczpcImVsLWljb24tY2hlY2tcIn0sRW49e2NsYXNzOlwiZWwtY2FzY2FkZXJfX2VtcHR5LXRleHRcIn07d24ucmVuZGVyPWZ1bmN0aW9uKGUsdCxsLG8sYyx2KXtjb25zdCBtPVAoXCJlbC1pbnB1dFwiKSxmPVAoXCJlbC10YWdcIiksZz1QKFwiZWwtY2FzY2FkZXItcGFuZWxcIiksYj1QKFwiZWwtc2Nyb2xsYmFyXCIpLHk9UChcImVsLXBvcHBlclwiKSxrPUYoXCJjbGlja291dHNpZGVcIik7cmV0dXJuIGEoKSxuKHkse3JlZjpcInBvcHBlclwiLHZpc2libGU6ZS5wb3BwZXJWaXNpYmxlLFwib25VcGRhdGU6dmlzaWJsZVwiOnRbMTZdfHwodFsxNl09dD0+ZS5wb3BwZXJWaXNpYmxlPXQpLHRyaWdnZXI6XCJtYW51YWxcIixwbGFjZW1lbnQ6XCJib3R0b20tc3RhcnRcIixcInBvcHBlci1jbGFzc1wiOlwiZWwtY2FzY2FkZXJfX2Ryb3Bkb3duIFwiK2UucG9wcGVyQ2xhc3MsXCJwb3BwZXItb3B0aW9uc1wiOmUucG9wcGVyT3B0aW9ucyx0cmFuc2l0aW9uOlwiZWwtem9vbS1pbi10b3BcIixcImdwdS1hY2NlbGVyYXRpb25cIjohMSxlZmZlY3Q6XCJsaWdodFwiLHB1cmU6XCJcIixvbkFmdGVyTGVhdmU6ZS5oaWRlU3VnZ2VzdGlvblBhbmVsfSx7dHJpZ2dlcjppKCgoKT0+W3IocyhcImRpdlwiLHtjbGFzczpbXCJlbC1jYXNjYWRlclwiLGUucmVhbFNpemUmJlwiZWwtY2FzY2FkZXItLVwiK2UucmVhbFNpemUse1wiaXMtZGlzYWJsZWRcIjplLmlzRGlzYWJsZWR9XSxvbkNsaWNrOnRbMTBdfHwodFsxMF09KCk9PmUudG9nZ2xlUG9wcGVyVmlzaWJsZSghZS5yZWFkb25seXx8dm9pZCAwKSksb25LZXlkb3duOnRbMTFdfHwodFsxMV09KC4uLnQpPT5lLmhhbmRsZUtleURvd24oLi4udCkpLG9uTW91c2VlbnRlcjp0WzEyXXx8KHRbMTJdPXQ9PmUuaW5wdXRIb3Zlcj0hMCksb25Nb3VzZWxlYXZlOnRbMTNdfHwodFsxM109dD0+ZS5pbnB1dEhvdmVyPSExKX0sW3MobSx7cmVmOlwiaW5wdXRcIixtb2RlbFZhbHVlOmUuaW5wdXRWYWx1ZSxcIm9uVXBkYXRlOm1vZGVsVmFsdWVcIjp0WzNdfHwodFszXT10PT5lLmlucHV0VmFsdWU9dCksbW9kZWxNb2RpZmllcnM6e3RyaW06ITB9LHBsYWNlaG9sZGVyOmUucGxhY2Vob2xkZXIscmVhZG9ubHk6ZS5yZWFkb25seSxkaXNhYmxlZDplLmlzRGlzYWJsZWQsXCJ2YWxpZGF0ZS1ldmVudFwiOiExLHNpemU6ZS5yZWFsU2l6ZSxjbGFzczp7XCJpcy1mb2N1c1wiOmUucG9wcGVyVmlzaWJsZX0sb25Gb2N1czp0WzRdfHwodFs0XT10PT5lLiRlbWl0KFwiZm9jdXNcIix0KSksb25CbHVyOnRbNV18fCh0WzVdPXQ9PmUuJGVtaXQoXCJibHVyXCIsdCkpLG9uSW5wdXQ6ZS5oYW5kbGVJbnB1dH0se3N1ZmZpeDppKCgoKT0+W2UuY2xlYXJCdG5WaXNpYmxlPyhhKCksbihcImlcIix7a2V5OlwiY2xlYXJcIixjbGFzczpcImVsLWlucHV0X19pY29uIGVsLWljb24tY2lyY2xlLWNsb3NlXCIsb25DbGljazp0WzFdfHwodFsxXT1UKCgoLi4udCk9PmUuaGFuZGxlQ2xlYXIoLi4udCkpLFtcInN0b3BcIl0pKX0pKTooYSgpLG4oXCJpXCIse2tleTpcImFycm93LWRvd25cIixjbGFzczpbXCJlbC1pbnB1dF9faWNvblwiLFwiZWwtaWNvbi1hcnJvdy1kb3duXCIsZS5wb3BwZXJWaXNpYmxlJiZcImlzLXJldmVyc2VcIl0sb25DbGljazp0WzJdfHwodFsyXT1UKCh0PT5lLnRvZ2dsZVBvcHBlclZpc2libGUoKSksW1wic3RvcFwiXSkpfSxudWxsLDIpKV0pKSxfOjF9LDgsW1wibW9kZWxWYWx1ZVwiLFwicGxhY2Vob2xkZXJcIixcInJlYWRvbmx5XCIsXCJkaXNhYmxlZFwiLFwic2l6ZVwiLFwiY2xhc3NcIixcIm9uSW5wdXRcIl0pLGUubXVsdGlwbGU/KGEoKSxuKFwiZGl2XCIsX24sWyhhKCEwKSxuKEUsbnVsbCxIKGUucHJlc2VudFRhZ3MsKHQ9PihhKCksbihmLHtrZXk6dC5rZXksdHlwZTpcImluZm9cIixzaXplOmUudGFnU2l6ZSxoaXQ6dC5oaXRTdGF0ZSxjbG9zYWJsZTp0LmNsb3NhYmxlLFwiZGlzYWJsZS10cmFuc2l0aW9uc1wiOlwiXCIsb25DbG9zZTpsPT5lLmRlbGV0ZVRhZyh0KX0se2RlZmF1bHQ6aSgoKCk9PltzKFwic3BhblwiLG51bGwscCh0LnRleHQpLDEpXSkpLF86Mn0sMTAzMixbXCJzaXplXCIsXCJoaXRcIixcImNsb3NhYmxlXCIsXCJvbkNsb3NlXCJdKSkpKSwxMjgpKSxlLmZpbHRlcmFibGUmJiFlLmlzRGlzYWJsZWQ/cigoYSgpLG4oXCJpbnB1dFwiLHtrZXk6MCxcIm9uVXBkYXRlOm1vZGVsVmFsdWVcIjp0WzZdfHwodFs2XT10PT5lLnNlYXJjaElucHV0VmFsdWU9dCksdHlwZTpcInRleHRcIixjbGFzczpcImVsLWNhc2NhZGVyX19zZWFyY2gtaW5wdXRcIixwbGFjZWhvbGRlcjplLnByZXNlbnRUZXh0P1wiXCI6ZS5wbGFjZWhvbGRlcixvbklucHV0OnRbN118fCh0WzddPXQ9PmUuaGFuZGxlSW5wdXQoZS5zZWFyY2hJbnB1dFZhbHVlLHQpKSxvbkNsaWNrOnRbOF18fCh0WzhdPVQoKHQ9PmUudG9nZ2xlUG9wcGVyVmlzaWJsZSghMCkpLFtcInN0b3BcIl0pKSxvbktleWRvd246dFs5XXx8KHRbOV09JCgoKC4uLnQpPT5lLmhhbmRsZURlbGV0ZSguLi50KSksW1wiZGVsZXRlXCJdKSl9LG51bGwsNDAsW1wicGxhY2Vob2xkZXJcIl0pKSxbW1ksZS5zZWFyY2hJbnB1dFZhbHVlLHZvaWQgMCx7dHJpbTohMH1dXSk6dShcInYtaWZcIiwhMCldLDUxMikpOnUoXCJ2LWlmXCIsITApXSwzNCksW1trLCgpPT5lLnRvZ2dsZVBvcHBlclZpc2libGUoITEpXV0pXSkpLGRlZmF1bHQ6aSgoKCk9PltyKHMoZyx7cmVmOlwicGFuZWxcIixtb2RlbFZhbHVlOmUuY2hlY2tlZFZhbHVlLFwib25VcGRhdGU6bW9kZWxWYWx1ZVwiOnRbMTRdfHwodFsxNF09dD0+ZS5jaGVja2VkVmFsdWU9dCksb3B0aW9uczplLm9wdGlvbnMscHJvcHM6ZS5wcm9wcyxib3JkZXI6ITEsXCJyZW5kZXItbGFiZWxcIjplLiRzbG90cy5kZWZhdWx0LG9uRXhwYW5kQ2hhbmdlOmUuaGFuZGxlRXhwYW5kQ2hhbmdlLG9uQ2xvc2U6dFsxNV18fCh0WzE1XT10PT5lLnRvZ2dsZVBvcHBlclZpc2libGUoITEpKX0sbnVsbCw4LFtcIm1vZGVsVmFsdWVcIixcIm9wdGlvbnNcIixcInByb3BzXCIsXCJyZW5kZXItbGFiZWxcIixcIm9uRXhwYW5kQ2hhbmdlXCJdKSxbW2gsIWUuZmlsdGVyaW5nXV0pLGUuZmlsdGVyYWJsZT9yKChhKCksbihiLHtrZXk6MCxyZWY6XCJzdWdnZXN0aW9uUGFuZWxcIix0YWc6XCJ1bFwiLGNsYXNzOlwiZWwtY2FzY2FkZXJfX3N1Z2dlc3Rpb24tcGFuZWxcIixcInZpZXctY2xhc3NcIjpcImVsLWNhc2NhZGVyX19zdWdnZXN0aW9uLWxpc3RcIn0se2RlZmF1bHQ6aSgoKCk9PltlLnN1Z2dlc3Rpb25zLmxlbmd0aD8oYSghMCksbihFLHtrZXk6MH0sSChlLnN1Z2dlc3Rpb25zLCh0PT4oYSgpLG4oXCJsaVwiLHtrZXk6dC51aWQsY2xhc3M6W1wiZWwtY2FzY2FkZXJfX3N1Z2dlc3Rpb24taXRlbVwiLHQuY2hlY2tlZCYmXCJpcy1jaGVja2VkXCJdLHRhYmluZGV4Oi0xLG9uQ2xpY2s6bD0+ZS5oYW5kbGVTdWdnZXN0aW9uQ2xpY2sodCl9LFtzKFwic3BhblwiLG51bGwscCh0LnRleHQpLDEpLHQuY2hlY2tlZD8oYSgpLG4oXCJpXCIsU24pKTp1KFwidi1pZlwiLCEwKV0sMTAsW1wib25DbGlja1wiXSkpKSksMTI4KSk6ZChlLiRzbG90cyxcImVtcHR5XCIse2tleToxfSwoKCk9PltzKFwibGlcIixFbixwKGUudChcImVsLmNhc2NhZGVyLm5vTWF0Y2hcIikpLDEpXSkpXSkpLF86MX0sNTEyKSksW1toLGUuZmlsdGVyaW5nXV0pOnUoXCJ2LWlmXCIsITApXSkpLF86MX0sOCxbXCJ2aXNpYmxlXCIsXCJwb3BwZXItY2xhc3NcIixcInBvcHBlci1vcHRpb25zXCIsXCJvbkFmdGVyTGVhdmVcIl0pfSx3bi5fX2ZpbGU9XCJwYWNrYWdlcy9jYXNjYWRlci9zcmMvaW5kZXgudnVlXCIsd24uaW5zdGFsbD1lPT57ZS5jb21wb25lbnQod24ubmFtZSx3bil9O3ZhciBNbj1lKHtuYW1lOlwiRWxDaGVja2JveEJ1dHRvblwiLHByb3BzOnttb2RlbFZhbHVlOnt0eXBlOltCb29sZWFuLE51bWJlcixTdHJpbmddLGRlZmF1bHQ6KCk9Pnt9fSxsYWJlbDp7dHlwZTpbQm9vbGVhbixOdW1iZXIsU3RyaW5nXX0saW5kZXRlcm1pbmF0ZTpCb29sZWFuLGRpc2FibGVkOkJvb2xlYW4sY2hlY2tlZDpCb29sZWFuLG5hbWU6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6dm9pZCAwfSx0cnVlTGFiZWw6e3R5cGU6W1N0cmluZyxOdW1iZXJdLGRlZmF1bHQ6dm9pZCAwfSxmYWxzZUxhYmVsOnt0eXBlOltTdHJpbmcsTnVtYmVyXSxkZWZhdWx0OnZvaWQgMH19LGVtaXRzOltQdCxcImNoYW5nZVwiXSxzZXR1cChlKXtjb25zdHtmb2N1czp0LGlzQ2hlY2tlZDphLGlzRGlzYWJsZWQ6bixzaXplOm8sbW9kZWw6aSxoYW5kbGVDaGFuZ2U6cn09amEoZSkse2NoZWNrYm94R3JvdXA6c309V2EoKTtyZXR1cm57Zm9jdXM6dCxpc0NoZWNrZWQ6YSxpc0Rpc2FibGVkOm4sbW9kZWw6aSxoYW5kbGVDaGFuZ2U6cixhY3RpdmVTdHlsZTpsKCgoKT0+e3ZhciBlLHQsbCxhLG4sbyxpLHI7cmV0dXJue2JhY2tncm91bmRDb2xvcjpudWxsIT09KHQ9bnVsbD09PShlPW51bGw9PXM/dm9pZCAwOnMuZmlsbCl8fHZvaWQgMD09PWU/dm9pZCAwOmUudmFsdWUpJiZ2b2lkIDAhPT10P3Q6XCJcIixib3JkZXJDb2xvcjpudWxsIT09KGE9bnVsbD09PShsPW51bGw9PXM/dm9pZCAwOnMuZmlsbCl8fHZvaWQgMD09PWw/dm9pZCAwOmwudmFsdWUpJiZ2b2lkIDAhPT1hP2E6XCJcIixjb2xvcjpudWxsIT09KG89bnVsbD09PShuPW51bGw9PXM/dm9pZCAwOnMudGV4dENvbG9yKXx8dm9pZCAwPT09bj92b2lkIDA6bi52YWx1ZSkmJnZvaWQgMCE9PW8/bzpcIlwiLGJveFNoYWRvdzpudWxsIT09KHI9XCItMXB4IDAgMCAwIFwiKyhudWxsPT09KGk9bnVsbD09cz92b2lkIDA6cy5maWxsKXx8dm9pZCAwPT09aT92b2lkIDA6aS52YWx1ZSkpJiZ2b2lkIDAhPT1yP3I6XCJcIn19KSksc2l6ZTpvfX19KTtNbi5yZW5kZXI9ZnVuY3Rpb24oZSx0LGwsbyxpLHMpe3JldHVybiBhKCksbihcImxhYmVsXCIse2NsYXNzOltcImVsLWNoZWNrYm94LWJ1dHRvblwiLFtlLnNpemU/XCJlbC1jaGVja2JveC1idXR0b24tLVwiK2Uuc2l6ZTpcIlwiLHtcImlzLWRpc2FibGVkXCI6ZS5pc0Rpc2FibGVkfSx7XCJpcy1jaGVja2VkXCI6ZS5pc0NoZWNrZWR9LHtcImlzLWZvY3VzXCI6ZS5mb2N1c31dXSxyb2xlOlwiY2hlY2tib3hcIixcImFyaWEtY2hlY2tlZFwiOmUuaXNDaGVja2VkLFwiYXJpYS1kaXNhYmxlZFwiOmUuaXNEaXNhYmxlZH0sW2UudHJ1ZUxhYmVsfHxlLmZhbHNlTGFiZWw/cigoYSgpLG4oXCJpbnB1dFwiLHtrZXk6MCxcIm9uVXBkYXRlOm1vZGVsVmFsdWVcIjp0WzFdfHwodFsxXT10PT5lLm1vZGVsPXQpLGNoZWNrZWQ6ZS5pc0NoZWNrZWQsY2xhc3M6XCJlbC1jaGVja2JveC1idXR0b25fX29yaWdpbmFsXCIsdHlwZTpcImNoZWNrYm94XCIsbmFtZTplLm5hbWUsZGlzYWJsZWQ6ZS5pc0Rpc2FibGVkLFwidHJ1ZS12YWx1ZVwiOmUudHJ1ZUxhYmVsLFwiZmFsc2UtdmFsdWVcIjplLmZhbHNlTGFiZWwsb25DaGFuZ2U6dFsyXXx8KHRbMl09KC4uLnQpPT5lLmhhbmRsZUNoYW5nZSguLi50KSksb25Gb2N1czp0WzNdfHwodFszXT10PT5lLmZvY3VzPSEwKSxvbkJsdXI6dFs0XXx8KHRbNF09dD0+ZS5mb2N1cz0hMSl9LG51bGwsNDAsW1wiY2hlY2tlZFwiLFwibmFtZVwiLFwiZGlzYWJsZWRcIixcInRydWUtdmFsdWVcIixcImZhbHNlLXZhbHVlXCJdKSksW1tXLGUubW9kZWxdXSk6cigoYSgpLG4oXCJpbnB1dFwiLHtrZXk6MSxcIm9uVXBkYXRlOm1vZGVsVmFsdWVcIjp0WzVdfHwodFs1XT10PT5lLm1vZGVsPXQpLGNsYXNzOlwiZWwtY2hlY2tib3gtYnV0dG9uX19vcmlnaW5hbFwiLHR5cGU6XCJjaGVja2JveFwiLG5hbWU6ZS5uYW1lLGRpc2FibGVkOmUuaXNEaXNhYmxlZCx2YWx1ZTplLmxhYmVsLG9uQ2hhbmdlOnRbNl18fCh0WzZdPSguLi50KT0+ZS5oYW5kbGVDaGFuZ2UoLi4udCkpLG9uRm9jdXM6dFs3XXx8KHRbN109dD0+ZS5mb2N1cz0hMCksb25CbHVyOnRbOF18fCh0WzhdPXQ9PmUuZm9jdXM9ITEpfSxudWxsLDQwLFtcIm5hbWVcIixcImRpc2FibGVkXCIsXCJ2YWx1ZVwiXSkpLFtbVyxlLm1vZGVsXV0pLGUuJHNsb3RzLmRlZmF1bHR8fGUubGFiZWw/KGEoKSxuKFwic3BhblwiLHtrZXk6MixjbGFzczpcImVsLWNoZWNrYm94LWJ1dHRvbl9faW5uZXJcIixzdHlsZTplLmlzQ2hlY2tlZD9lLmFjdGl2ZVN0eWxlOm51bGx9LFtkKGUuJHNsb3RzLFwiZGVmYXVsdFwiLHt9LCgoKT0+W2MocChlLmxhYmVsKSwxKV0pKV0sNCkpOnUoXCJ2LWlmXCIsITApXSwxMCxbXCJhcmlhLWNoZWNrZWRcIixcImFyaWEtZGlzYWJsZWRcIl0pfSxNbi5fX2ZpbGU9XCJwYWNrYWdlcy9jaGVja2JveC9zcmMvY2hlY2tib3gtYnV0dG9uLnZ1ZVwiLE1uLmluc3RhbGw9ZT0+e2UuY29tcG9uZW50KE1uLm5hbWUsTW4pfTt2YXIgVG49ZSh7bmFtZTpcIkVsQ2hlY2tib3hHcm91cFwiLHByb3BzOnttb2RlbFZhbHVlOnt0eXBlOltPYmplY3QsQm9vbGVhbixBcnJheV0sZGVmYXVsdDooKT0+e319LGRpc2FibGVkOkJvb2xlYW4sbWluOnt0eXBlOk51bWJlcixkZWZhdWx0OnZvaWQgMH0sbWF4Ont0eXBlOk51bWJlcixkZWZhdWx0OnZvaWQgMH0sc2l6ZTp7dHlwZTpTdHJpbmcsdmFsaWRhdG9yOkF0fSxmaWxsOnt0eXBlOlN0cmluZyxkZWZhdWx0OnZvaWQgMH0sdGV4dENvbG9yOnt0eXBlOlN0cmluZyxkZWZhdWx0OnZvaWQgMH19LGVtaXRzOltQdCxcImNoYW5nZVwiXSxzZXR1cChlLHQpe2NvbnN0e2VsRm9ybUl0ZW06YSxlbEZvcm1JdGVtU2l6ZTpuLEVMRU1FTlQ6b309V2EoKSxpPWwoKCgpPT5lLnNpemV8fG4udmFsdWV8fG8uc2l6ZSkpLHI9ZT0+e3QuZW1pdChQdCxlKSxrKCgoKT0+e3QuZW1pdChcImNoYW5nZVwiLGUpfSkpfSxzPWwoe2dldDooKT0+ZS5tb2RlbFZhbHVlLHNldChlKXtyKGUpfX0pO3goXCJDaGVja2JveEdyb3VwXCIsT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHtuYW1lOlwiRWxDaGVja2JveEdyb3VwXCIsbW9kZWxWYWx1ZTpzfSxDKGUpKSx7Y2hlY2tib3hHcm91cFNpemU6aSxjaGFuZ2VFdmVudDpyfSkpLHkoKCgpPT5lLm1vZGVsVmFsdWUpLChlPT57dmFyIHQ7bnVsbD09PSh0PWEuZm9ybUl0ZW1NaXR0KXx8dm9pZCAwPT09dHx8dC5lbWl0KFwiZWwuZm9ybS5jaGFuZ2VcIixbZV0pfSkpfX0pO2NvbnN0IE5uPXtjbGFzczpcImVsLWNoZWNrYm94LWdyb3VwXCIscm9sZTpcImdyb3VwXCIsXCJhcmlhLWxhYmVsXCI6XCJjaGVja2JveC1ncm91cFwifTtUbi5yZW5kZXI9ZnVuY3Rpb24oZSx0LGwsbyxpLHIpe3JldHVybiBhKCksbihcImRpdlwiLE5uLFtkKGUuJHNsb3RzLFwiZGVmYXVsdFwiKV0pfSxUbi5fX2ZpbGU9XCJwYWNrYWdlcy9jaGVja2JveC9zcmMvY2hlY2tib3gtZ3JvdXAudnVlXCIsVG4uaW5zdGFsbD1lPT57ZS5jb21wb25lbnQoVG4ubmFtZSxUbil9O2NvbnN0IERuPWUoe25hbWU6XCJFbENvbFwiLHByb3BzOntzcGFuOnt0eXBlOk51bWJlcixkZWZhdWx0OjI0fSxvZmZzZXQ6e3R5cGU6TnVtYmVyLGRlZmF1bHQ6MH0scHVsbDp7dHlwZTpOdW1iZXIsZGVmYXVsdDowfSxwdXNoOnt0eXBlOk51bWJlcixkZWZhdWx0OjB9LHhzOnt0eXBlOltOdW1iZXIsT2JqZWN0XSxkZWZhdWx0OigpPT4oe30pfSxzbTp7dHlwZTpbTnVtYmVyLE9iamVjdF0sZGVmYXVsdDooKT0+KHt9KX0sbWQ6e3R5cGU6W051bWJlcixPYmplY3RdLGRlZmF1bHQ6KCk9Pih7fSl9LGxnOnt0eXBlOltOdW1iZXIsT2JqZWN0XSxkZWZhdWx0OigpPT4oe30pfSx4bDp7dHlwZTpbTnVtYmVyLE9iamVjdF0sZGVmYXVsdDooKT0+KHt9KX19LHNldHVwKGUse3Nsb3RzOnR9KXtjb25zdCBhPXcoXCJFbFJvd1wiLDApLG49bCgoKCk9PmE/e2Rpc3BsYXk6XCJibG9ja1wiLG1pbkhlaWdodDpcIjFweFwiLHBhZGRpbmdMZWZ0OmEvMitcInB4XCIscGFkZGluZ1JpZ2h0OmEvMitcInB4XCJ9Ont9KSksbz1sKCgoKT0+e2NvbnN0IHQ9W107W1wic3BhblwiLFwib2Zmc2V0XCIsXCJwdWxsXCIsXCJwdXNoXCJdLmZvckVhY2goKGw9Pntjb25zdCBhPWVbbF07XCJudW1iZXJcIj09dHlwZW9mIGEmJmE+PTAmJnQucHVzaChcInNwYW5cIiE9PWw/YGVsLWNvbC0ke2x9LSR7ZVtsXX1gOlwiZWwtY29sLVwiK2VbbF0pfSkpO3JldHVybltcInhzXCIsXCJzbVwiLFwibWRcIixcImxnXCIsXCJ4bFwiXS5mb3JFYWNoKChsPT57aWYoXCJudW1iZXJcIj09dHlwZW9mIGVbbF0pdC5wdXNoKGBlbC1jb2wtJHtsfS0ke2VbbF19YCk7ZWxzZSBpZihcIm9iamVjdFwiPT10eXBlb2YgZVtsXSl7Y29uc3QgYT1lW2xdO09iamVjdC5rZXlzKGEpLmZvckVhY2goKGU9Pnt0LnB1c2goXCJzcGFuXCIhPT1lP2BlbC1jb2wtJHtsfS0ke2V9LSR7YVtlXX1gOmBlbC1jb2wtJHtsfS0ke2FbZV19YCl9KSl9fSkpLHR9KSk7cmV0dXJuKCk9Pnt2YXIgZTtyZXR1cm4gRChcImRpdlwiLHtjbGFzczpbXCJlbC1jb2xcIixvLnZhbHVlXSxzdHlsZTpuLnZhbHVlfSxudWxsPT09KGU9dC5kZWZhdWx0KXx8dm9pZCAwPT09ZT92b2lkIDA6ZS5jYWxsKHQpKX19fSk7RG4uaW5zdGFsbD1lPT57ZS5jb21wb25lbnQoRG4ubmFtZSxEbil9O3ZhciBPbj1lKHtuYW1lOlwiRWxDb2xsYXBzZVwiLHByb3BzOnthY2NvcmRpb246Qm9vbGVhbixtb2RlbFZhbHVlOnt0eXBlOltBcnJheSxTdHJpbmcsTnVtYmVyXSxkZWZhdWx0OigpPT5bXX19LGVtaXRzOltQdCxcImNoYW5nZVwiXSxzZXR1cChlLHtlbWl0Omx9KXtjb25zdCBhPXQoW10uY29uY2F0KGUubW9kZWxWYWx1ZSkpLG49bmUoKSxvPXQ9PnthLnZhbHVlPVtdLmNvbmNhdCh0KTtjb25zdCBuPWUuYWNjb3JkaW9uP2EudmFsdWVbMF06YS52YWx1ZTtsKFB0LG4pLGwoXCJjaGFuZ2VcIixuKX0saT10PT57aWYoZS5hY2NvcmRpb24pbyghYS52YWx1ZVswXSYmMCE9PWEudmFsdWVbMF18fGEudmFsdWVbMF0hPT10P3Q6XCJcIik7ZWxzZXtsZXQgZT1hLnZhbHVlLnNsaWNlKDApO2NvbnN0IGw9ZS5pbmRleE9mKHQpO2w+LTE/ZS5zcGxpY2UobCwxKTplLnB1c2godCksbyhlKX19O3JldHVybiB5KCgoKT0+ZS5tb2RlbFZhbHVlKSwoKCk9PnthLnZhbHVlPVtdLmNvbmNhdChlLm1vZGVsVmFsdWUpfSkpLG4ub24oXCJpdGVtLWNsaWNrXCIsaSksTigoKCk9PntuLmFsbC5jbGVhcigpfSkpLHgoXCJjb2xsYXBzZVwiLHthY3RpdmVOYW1lczphLGNvbGxhcHNlTWl0dDpufSkse2FjdGl2ZU5hbWVzOmEsc2V0QWN0aXZlTmFtZXM6byxoYW5kbGVJdGVtQ2xpY2s6aX19fSk7Y29uc3QgUG49e2NsYXNzOlwiZWwtY29sbGFwc2VcIixyb2xlOlwidGFibGlzdFwiLFwiYXJpYS1tdWx0aXNlbGVjdGFibGVcIjpcInRydWVcIn07T24ucmVuZGVyPWZ1bmN0aW9uKGUsdCxsLG8saSxyKXtyZXR1cm4gYSgpLG4oXCJkaXZcIixQbixbZChlLiRzbG90cyxcImRlZmF1bHRcIildKX0sT24uX19maWxlPVwicGFja2FnZXMvY29sbGFwc2Uvc3JjL2NvbGxhcHNlLnZ1ZVwiLE9uLmluc3RhbGw9ZT0+e2UuY29tcG9uZW50KE9uLm5hbWUsT24pfTt2YXIgVm49ZSh7bmFtZTpcIkVsQ29sbGFwc2VUcmFuc2l0aW9uXCIsc2V0dXA6KCk9Pih7b246e2JlZm9yZUVudGVyKGUpe290KGUsXCJjb2xsYXBzZS10cmFuc2l0aW9uXCIpLGUuZGF0YXNldHx8KGUuZGF0YXNldD17fSksZS5kYXRhc2V0Lm9sZFBhZGRpbmdUb3A9ZS5zdHlsZS5wYWRkaW5nVG9wLGUuZGF0YXNldC5vbGRQYWRkaW5nQm90dG9tPWUuc3R5bGUucGFkZGluZ0JvdHRvbSxlLnN0eWxlLmhlaWdodD1cIjBcIixlLnN0eWxlLnBhZGRpbmdUb3A9MCxlLnN0eWxlLnBhZGRpbmdCb3R0b209MH0sZW50ZXIoZSl7ZS5kYXRhc2V0Lm9sZE92ZXJmbG93PWUuc3R5bGUub3ZlcmZsb3csMCE9PWUuc2Nyb2xsSGVpZ2h0PyhlLnN0eWxlLmhlaWdodD1lLnNjcm9sbEhlaWdodCtcInB4XCIsZS5zdHlsZS5wYWRkaW5nVG9wPWUuZGF0YXNldC5vbGRQYWRkaW5nVG9wLGUuc3R5bGUucGFkZGluZ0JvdHRvbT1lLmRhdGFzZXQub2xkUGFkZGluZ0JvdHRvbSk6KGUuc3R5bGUuaGVpZ2h0PVwiXCIsZS5zdHlsZS5wYWRkaW5nVG9wPWUuZGF0YXNldC5vbGRQYWRkaW5nVG9wLGUuc3R5bGUucGFkZGluZ0JvdHRvbT1lLmRhdGFzZXQub2xkUGFkZGluZ0JvdHRvbSksZS5zdHlsZS5vdmVyZmxvdz1cImhpZGRlblwifSxhZnRlckVudGVyKGUpe2l0KGUsXCJjb2xsYXBzZS10cmFuc2l0aW9uXCIpLGUuc3R5bGUuaGVpZ2h0PVwiXCIsZS5zdHlsZS5vdmVyZmxvdz1lLmRhdGFzZXQub2xkT3ZlcmZsb3d9LGJlZm9yZUxlYXZlKGUpe2UuZGF0YXNldHx8KGUuZGF0YXNldD17fSksZS5kYXRhc2V0Lm9sZFBhZGRpbmdUb3A9ZS5zdHlsZS5wYWRkaW5nVG9wLGUuZGF0YXNldC5vbGRQYWRkaW5nQm90dG9tPWUuc3R5bGUucGFkZGluZ0JvdHRvbSxlLmRhdGFzZXQub2xkT3ZlcmZsb3c9ZS5zdHlsZS5vdmVyZmxvdyxlLnN0eWxlLmhlaWdodD1lLnNjcm9sbEhlaWdodCtcInB4XCIsZS5zdHlsZS5vdmVyZmxvdz1cImhpZGRlblwifSxsZWF2ZShlKXswIT09ZS5zY3JvbGxIZWlnaHQmJihvdChlLFwiY29sbGFwc2UtdHJhbnNpdGlvblwiKSxlLnN0eWxlLnRyYW5zaXRpb25Qcm9wZXJ0eT1cImhlaWdodFwiLGUuc3R5bGUuaGVpZ2h0PTAsZS5zdHlsZS5wYWRkaW5nVG9wPTAsZS5zdHlsZS5wYWRkaW5nQm90dG9tPTApfSxhZnRlckxlYXZlKGUpe2l0KGUsXCJjb2xsYXBzZS10cmFuc2l0aW9uXCIpLGUuc3R5bGUuaGVpZ2h0PVwiXCIsZS5zdHlsZS5vdmVyZmxvdz1lLmRhdGFzZXQub2xkT3ZlcmZsb3csZS5zdHlsZS5wYWRkaW5nVG9wPWUuZGF0YXNldC5vbGRQYWRkaW5nVG9wLGUuc3R5bGUucGFkZGluZ0JvdHRvbT1lLmRhdGFzZXQub2xkUGFkZGluZ0JvdHRvbX19fSl9KTtWbi5yZW5kZXI9ZnVuY3Rpb24oZSx0LGwscixzLHUpe3JldHVybiBhKCksbihvLHEoZS5vbikse2RlZmF1bHQ6aSgoKCk9PltkKGUuJHNsb3RzLFwiZGVmYXVsdFwiKV0pKSxfOjN9LDE2KX0sVm4uX19maWxlPVwicGFja2FnZXMvdHJhbnNpdGlvbi9jb2xsYXBzZS10cmFuc2l0aW9uL2luZGV4LnZ1ZVwiLFZuLmluc3RhbGw9ZT0+e2UuY29tcG9uZW50KFZuLm5hbWUsVm4pfTt2YXIgSW49ZSh7bmFtZTpcIkVsQ29sbGFwc2VJdGVtXCIsY29tcG9uZW50czp7RWxDb2xsYXBzZVRyYW5zaXRpb246Vm59LHByb3BzOnt0aXRsZTp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIlwifSxuYW1lOnt0eXBlOltTdHJpbmcsTnVtYmVyXSxkZWZhdWx0OigpPT5SZSgpfSxkaXNhYmxlZDpCb29sZWFufSxzZXR1cChlKXtjb25zdCBhPXcoXCJjb2xsYXBzZVwiKSxuPW51bGw9PWE/dm9pZCAwOmEuY29sbGFwc2VNaXR0LG89dCh7aGVpZ2h0OlwiYXV0b1wiLGRpc3BsYXk6XCJibG9ja1wifSksaT10KDApLHI9dCghMSkscz10KCExKSx1PXQoUmUoKSk7cmV0dXJue2lzQWN0aXZlOmwoKCgpPT4obnVsbD09YT92b2lkIDA6YS5hY3RpdmVOYW1lcy52YWx1ZS5pbmRleE9mKGUubmFtZSkpPi0xKSksY29udGVudFdyYXBTdHlsZTpvLGNvbnRlbnRIZWlnaHQ6aSxmb2N1c2luZzpyLGlzQ2xpY2s6cyxpZDp1LGhhbmRsZUZvY3VzOigpPT57c2V0VGltZW91dCgoKCk9PntzLnZhbHVlP3MudmFsdWU9ITE6ci52YWx1ZT0hMH0pLDUwKX0saGFuZGxlSGVhZGVyQ2xpY2s6KCk9PntlLmRpc2FibGVkfHwobnVsbD09bnx8bi5lbWl0KFwiaXRlbS1jbGlja1wiLGUubmFtZSksci52YWx1ZT0hMSxzLnZhbHVlPSEwKX0saGFuZGxlRW50ZXJDbGljazooKT0+e251bGw9PW58fG4uZW1pdChcIml0ZW0tY2xpY2tcIixlLm5hbWUpfSxjb2xsYXBzZTphfX19KTtjb25zdCBBbj17Y2xhc3M6XCJlbC1jb2xsYXBzZS1pdGVtX19jb250ZW50XCJ9O0luLnJlbmRlcj1mdW5jdGlvbihlLHQsbCxvLHUsdil7Y29uc3QgbT1QKFwiZWwtY29sbGFwc2UtdHJhbnNpdGlvblwiKTtyZXR1cm4gYSgpLG4oXCJkaXZcIix7Y2xhc3M6W1wiZWwtY29sbGFwc2UtaXRlbVwiLHtcImlzLWFjdGl2ZVwiOmUuaXNBY3RpdmUsXCJpcy1kaXNhYmxlZFwiOmUuZGlzYWJsZWR9XX0sW3MoXCJkaXZcIix7cm9sZTpcInRhYlwiLFwiYXJpYS1leHBhbmRlZFwiOmUuaXNBY3RpdmUsXCJhcmlhLWNvbnRyb2xzXCI6XCJlbC1jb2xsYXBzZS1jb250ZW50LVwiK2UuaWQsXCJhcmlhLWRlc2NyaWJlZGJ5XCI6XCJlbC1jb2xsYXBzZS1jb250ZW50LVwiK2UuaWR9LFtzKFwiZGl2XCIse2lkOlwiZWwtY29sbGFwc2UtaGVhZC1cIitlLmlkLGNsYXNzOltcImVsLWNvbGxhcHNlLWl0ZW1fX2hlYWRlclwiLHtmb2N1c2luZzplLmZvY3VzaW5nLFwiaXMtYWN0aXZlXCI6ZS5pc0FjdGl2ZX1dLHJvbGU6XCJidXR0b25cIix0YWJpbmRleDplLmRpc2FibGVkPy0xOjAsb25DbGljazp0WzFdfHwodFsxXT0oLi4udCk9PmUuaGFuZGxlSGVhZGVyQ2xpY2soLi4udCkpLG9uS2V5dXA6dFsyXXx8KHRbMl09JChUKCgoLi4udCk9PmUuaGFuZGxlRW50ZXJDbGljayguLi50KSksW1wic3RvcFwiXSksW1wic3BhY2VcIixcImVudGVyXCJdKSksb25Gb2N1czp0WzNdfHwodFszXT0oLi4udCk9PmUuaGFuZGxlRm9jdXMoLi4udCkpLG9uQmx1cjp0WzRdfHwodFs0XT10PT5lLmZvY3VzaW5nPSExKX0sW2QoZS4kc2xvdHMsXCJ0aXRsZVwiLHt9LCgoKT0+W2MocChlLnRpdGxlKSwxKV0pKSxzKFwiaVwiLHtjbGFzczpbXCJlbC1jb2xsYXBzZS1pdGVtX19hcnJvdyBlbC1pY29uLWFycm93LXJpZ2h0XCIse1wiaXMtYWN0aXZlXCI6ZS5pc0FjdGl2ZX1dfSxudWxsLDIpXSw0MixbXCJpZFwiLFwidGFiaW5kZXhcIl0pXSw4LFtcImFyaWEtZXhwYW5kZWRcIixcImFyaWEtY29udHJvbHNcIixcImFyaWEtZGVzY3JpYmVkYnlcIl0pLHMobSxudWxsLHtkZWZhdWx0OmkoKCgpPT5bcihzKFwiZGl2XCIse2lkOlwiZWwtY29sbGFwc2UtY29udGVudC1cIitlLmlkLGNsYXNzOlwiZWwtY29sbGFwc2UtaXRlbV9fd3JhcFwiLHJvbGU6XCJ0YWJwYW5lbFwiLFwiYXJpYS1oaWRkZW5cIjohZS5pc0FjdGl2ZSxcImFyaWEtbGFiZWxsZWRieVwiOlwiZWwtY29sbGFwc2UtaGVhZC1cIitlLmlkfSxbcyhcImRpdlwiLEFuLFtkKGUuJHNsb3RzLFwiZGVmYXVsdFwiKV0pXSw4LFtcImlkXCIsXCJhcmlhLWhpZGRlblwiLFwiYXJpYS1sYWJlbGxlZGJ5XCJdKSxbW2gsZS5pc0FjdGl2ZV1dKV0pKSxfOjN9KV0sMil9LEluLl9fZmlsZT1cInBhY2thZ2VzL2NvbGxhcHNlL3NyYy9jb2xsYXBzZS1pdGVtLnZ1ZVwiLEluLmluc3RhbGw9ZT0+e2UuY29tcG9uZW50KEluLm5hbWUsSW4pfTtjb25zdCBCbj1mdW5jdGlvbihlLHQsbCl7cmV0dXJuW2UsdCpsLygoZT0oMi10KSpsKTwxP2U6Mi1lKXx8MCxlLzJdfSxMbj1mdW5jdGlvbihlLHQpe3ZhciBsO1wic3RyaW5nXCI9PXR5cGVvZihsPWUpJiYtMSE9PWwuaW5kZXhPZihcIi5cIikmJjE9PT1wYXJzZUZsb2F0KGwpJiYoZT1cIjEwMCVcIik7Y29uc3QgYT1mdW5jdGlvbihlKXtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgZSYmLTEhPT1lLmluZGV4T2YoXCIlXCIpfShlKTtyZXR1cm4gZT1NYXRoLm1pbih0LE1hdGgubWF4KDAscGFyc2VGbG9hdChlK1wiXCIpKSksYSYmKGU9cGFyc2VJbnQoZSp0K1wiXCIsMTApLzEwMCksTWF0aC5hYnMoZS10KTwxZS02PzE6ZSV0L3BhcnNlRmxvYXQodCl9LHpuPXsxMDpcIkFcIiwxMTpcIkJcIiwxMjpcIkNcIiwxMzpcIkRcIiwxNDpcIkVcIiwxNTpcIkZcIn0sRm49e0E6MTAsQjoxMSxDOjEyLEQ6MTMsRToxNCxGOjE1fSwkbj1mdW5jdGlvbihlKXtyZXR1cm4gMj09PWUubGVuZ3RoPzE2KihGbltlWzBdLnRvVXBwZXJDYXNlKCldfHwrZVswXSkrKEZuW2VbMV0udG9VcHBlckNhc2UoKV18fCtlWzFdKTpGbltlWzFdLnRvVXBwZXJDYXNlKCldfHwrZVsxXX0sUm49ZnVuY3Rpb24oZSx0LGwpe2U9TG4oZSwyNTUpLHQ9TG4odCwyNTUpLGw9TG4obCwyNTUpO2NvbnN0IGE9TWF0aC5tYXgoZSx0LGwpLG49TWF0aC5taW4oZSx0LGwpO2xldCBvO2NvbnN0IGk9YSxyPWEtbixzPTA9PT1hPzA6ci9hO2lmKGE9PT1uKW89MDtlbHNle3N3aXRjaChhKXtjYXNlIGU6bz0odC1sKS9yKyh0PGw/NjowKTticmVhaztjYXNlIHQ6bz0obC1lKS9yKzI7YnJlYWs7Y2FzZSBsOm89KGUtdCkvcis0fW8vPTZ9cmV0dXJue2g6MzYwKm8sczoxMDAqcyx2OjEwMCppfX0sSG49ZnVuY3Rpb24oZSx0LGwpe2U9NipMbihlLDM2MCksdD1Mbih0LDEwMCksbD1MbihsLDEwMCk7Y29uc3QgYT1NYXRoLmZsb29yKGUpLG49ZS1hLG89bCooMS10KSxpPWwqKDEtbip0KSxyPWwqKDEtKDEtbikqdCkscz1hJTYsdT1bbCxpLG8sbyxyLGxdW3NdLGQ9W3IsbCxsLGksbyxvXVtzXSxjPVtvLG8scixsLGwsaV1bc107cmV0dXJue3I6TWF0aC5yb3VuZCgyNTUqdSksZzpNYXRoLnJvdW5kKDI1NSpkKSxiOk1hdGgucm91bmQoMjU1KmMpfX07Y2xhc3MgV257Y29uc3RydWN0b3IoZSl7dGhpcy5faHVlPTAsdGhpcy5fc2F0dXJhdGlvbj0xMDAsdGhpcy5fdmFsdWU9MTAwLHRoaXMuX2FscGhhPTEwMCx0aGlzLmVuYWJsZUFscGhhPSExLHRoaXMuZm9ybWF0PVwiaGV4XCIsdGhpcy52YWx1ZT1cIlwiLGU9ZXx8e307Zm9yKGNvbnN0IHQgaW4gZSllLmhhc093blByb3BlcnR5KHQpJiYodGhpc1t0XT1lW3RdKTt0aGlzLmRvT25DaGFuZ2UoKX1zZXQoZSx0KXtpZigxIT09YXJndW1lbnRzLmxlbmd0aHx8XCJvYmplY3RcIiE9dHlwZW9mIGUpdGhpc1tcIl9cIitlXT10LHRoaXMuZG9PbkNoYW5nZSgpO2Vsc2UgZm9yKGNvbnN0IHQgaW4gZSllLmhhc093blByb3BlcnR5KHQpJiZ0aGlzLnNldCh0LGVbdF0pfWdldChlKXtyZXR1cm4gdGhpc1tcIl9cIitlXX10b1JnYigpe3JldHVybiBIbih0aGlzLl9odWUsdGhpcy5fc2F0dXJhdGlvbix0aGlzLl92YWx1ZSl9ZnJvbVN0cmluZyhlKXtpZighZSlyZXR1cm4gdGhpcy5faHVlPTAsdGhpcy5fc2F0dXJhdGlvbj0xMDAsdGhpcy5fdmFsdWU9MTAwLHZvaWQgdGhpcy5kb09uQ2hhbmdlKCk7Y29uc3QgdD0oZSx0LGwpPT57dGhpcy5faHVlPU1hdGgubWF4KDAsTWF0aC5taW4oMzYwLGUpKSx0aGlzLl9zYXR1cmF0aW9uPU1hdGgubWF4KDAsTWF0aC5taW4oMTAwLHQpKSx0aGlzLl92YWx1ZT1NYXRoLm1heCgwLE1hdGgubWluKDEwMCxsKSksdGhpcy5kb09uQ2hhbmdlKCl9O2lmKC0xIT09ZS5pbmRleE9mKFwiaHNsXCIpKXtjb25zdCBsPWUucmVwbGFjZSgvaHNsYXxoc2x8XFwofFxcKS9nbSxcIlwiKS5zcGxpdCgvXFxzfCwvZykuZmlsdGVyKChlPT5cIlwiIT09ZSkpLm1hcCgoKGUsdCk9PnQ+Mj9wYXJzZUZsb2F0KGUpOnBhcnNlSW50KGUsMTApKSk7aWYoND09PWwubGVuZ3RoP3RoaXMuX2FscGhhPU1hdGguZmxvb3IoMTAwKnBhcnNlRmxvYXQobFszXSkpOjM9PT1sLmxlbmd0aCYmKHRoaXMuX2FscGhhPTEwMCksbC5sZW5ndGg+PTMpe2NvbnN0e2g6ZSxzOmEsdjpufT1mdW5jdGlvbihlLHQsbCl7bC89MTAwO2xldCBhPXQvPTEwMDtjb25zdCBuPU1hdGgubWF4KGwsLjAxKTtyZXR1cm4gdCo9KGwqPTIpPD0xP2w6Mi1sLGEqPW48PTE/bjoyLW4se2g6ZSxzOjEwMCooMD09PWw/MiphLyhuK2EpOjIqdC8obCt0KSksdjoobCt0KS8yKjEwMH19KGxbMF0sbFsxXSxsWzJdKTt0KGUsYSxuKX19ZWxzZSBpZigtMSE9PWUuaW5kZXhPZihcImhzdlwiKSl7Y29uc3QgbD1lLnJlcGxhY2UoL2hzdmF8aHN2fFxcKHxcXCkvZ20sXCJcIikuc3BsaXQoL1xcc3wsL2cpLmZpbHRlcigoZT0+XCJcIiE9PWUpKS5tYXAoKChlLHQpPT50PjI/cGFyc2VGbG9hdChlKTpwYXJzZUludChlLDEwKSkpOzQ9PT1sLmxlbmd0aD90aGlzLl9hbHBoYT1NYXRoLmZsb29yKDEwMCpwYXJzZUZsb2F0KGxbM10pKTozPT09bC5sZW5ndGgmJih0aGlzLl9hbHBoYT0xMDApLGwubGVuZ3RoPj0zJiZ0KGxbMF0sbFsxXSxsWzJdKX1lbHNlIGlmKC0xIT09ZS5pbmRleE9mKFwicmdiXCIpKXtjb25zdCBsPWUucmVwbGFjZSgvcmdiYXxyZ2J8XFwofFxcKS9nbSxcIlwiKS5zcGxpdCgvXFxzfCwvZykuZmlsdGVyKChlPT5cIlwiIT09ZSkpLm1hcCgoKGUsdCk9PnQ+Mj9wYXJzZUZsb2F0KGUpOnBhcnNlSW50KGUsMTApKSk7aWYoND09PWwubGVuZ3RoP3RoaXMuX2FscGhhPU1hdGguZmxvb3IoMTAwKnBhcnNlRmxvYXQobFszXSkpOjM9PT1sLmxlbmd0aCYmKHRoaXMuX2FscGhhPTEwMCksbC5sZW5ndGg+PTMpe2NvbnN0e2g6ZSxzOmEsdjpufT1SbihsWzBdLGxbMV0sbFsyXSk7dChlLGEsbil9fWVsc2UgaWYoLTEhPT1lLmluZGV4T2YoXCIjXCIpKXtjb25zdCBsPWUucmVwbGFjZShcIiNcIixcIlwiKS50cmltKCk7aWYoIS9eKD86WzAtOWEtZkEtRl17M30pezEsMn0kLy50ZXN0KGwpKXJldHVybjtsZXQgYSxuLG87Mz09PWwubGVuZ3RoPyhhPSRuKGxbMF0rbFswXSksbj0kbihsWzFdK2xbMV0pLG89JG4obFsyXStsWzJdKSk6NiE9PWwubGVuZ3RoJiY4IT09bC5sZW5ndGh8fChhPSRuKGwuc3Vic3RyaW5nKDAsMikpLG49JG4obC5zdWJzdHJpbmcoMiw0KSksbz0kbihsLnN1YnN0cmluZyg0LDYpKSksOD09PWwubGVuZ3RoP3RoaXMuX2FscGhhPU1hdGguZmxvb3IoJG4obC5zdWJzdHJpbmcoNikpLzI1NSoxMDApOjMhPT1sLmxlbmd0aCYmNiE9PWwubGVuZ3RofHwodGhpcy5fYWxwaGE9MTAwKTtjb25zdHtoOmksczpyLHY6c309Um4oYSxuLG8pO3QoaSxyLHMpfX1jb21wYXJlKGUpe3JldHVybiBNYXRoLmFicyhlLl9odWUtdGhpcy5faHVlKTwyJiZNYXRoLmFicyhlLl9zYXR1cmF0aW9uLXRoaXMuX3NhdHVyYXRpb24pPDEmJk1hdGguYWJzKGUuX3ZhbHVlLXRoaXMuX3ZhbHVlKTwxJiZNYXRoLmFicyhlLl9hbHBoYS10aGlzLl9hbHBoYSk8MX1kb09uQ2hhbmdlKCl7Y29uc3R7X2h1ZTplLF9zYXR1cmF0aW9uOnQsX3ZhbHVlOmwsX2FscGhhOmEsZm9ybWF0Om59PXRoaXM7aWYodGhpcy5lbmFibGVBbHBoYSlzd2l0Y2gobil7Y2FzZVwiaHNsXCI6Y29uc3Qgbj1CbihlLHQvMTAwLGwvMTAwKTt0aGlzLnZhbHVlPWBoc2xhKCR7ZX0sICR7TWF0aC5yb3VuZCgxMDAqblsxXSl9JSwgJHtNYXRoLnJvdW5kKDEwMCpuWzJdKX0lLCAke2EvMTAwfSlgO2JyZWFrO2Nhc2VcImhzdlwiOnRoaXMudmFsdWU9YGhzdmEoJHtlfSwgJHtNYXRoLnJvdW5kKHQpfSUsICR7TWF0aC5yb3VuZChsKX0lLCAke2EvMTAwfSlgO2JyZWFrO2RlZmF1bHQ6Y29uc3R7cjpvLGc6aSxiOnJ9PUhuKGUsdCxsKTt0aGlzLnZhbHVlPWByZ2JhKCR7b30sICR7aX0sICR7cn0sICR7YS8xMDB9KWB9ZWxzZSBzd2l0Y2gobil7Y2FzZVwiaHNsXCI6Y29uc3QgYT1CbihlLHQvMTAwLGwvMTAwKTt0aGlzLnZhbHVlPWBoc2woJHtlfSwgJHtNYXRoLnJvdW5kKDEwMCphWzFdKX0lLCAke01hdGgucm91bmQoMTAwKmFbMl0pfSUpYDticmVhaztjYXNlXCJoc3ZcIjp0aGlzLnZhbHVlPWBoc3YoJHtlfSwgJHtNYXRoLnJvdW5kKHQpfSUsICR7TWF0aC5yb3VuZChsKX0lKWA7YnJlYWs7Y2FzZVwicmdiXCI6Y29uc3R7cjpuLGc6byxiOml9PUhuKGUsdCxsKTt0aGlzLnZhbHVlPWByZ2IoJHtufSwgJHtvfSwgJHtpfSlgO2JyZWFrO2RlZmF1bHQ6dGhpcy52YWx1ZT1mdW5jdGlvbih7cjplLGc6dCxiOmx9KXtjb25zdCBhPWZ1bmN0aW9uKGUpe2U9TWF0aC5taW4oTWF0aC5yb3VuZChlKSwyNTUpO2NvbnN0IHQ9TWF0aC5mbG9vcihlLzE2KSxsPWUlMTY7cmV0dXJuXCJcIisoem5bdF18fHQpKyh6bltsXXx8bCl9O3JldHVybiBpc05hTihlKXx8aXNOYU4odCl8fGlzTmFOKGwpP1wiXCI6XCIjXCIrYShlKSthKHQpK2EobCl9KEhuKGUsdCxsKSl9fX1sZXQgam49ITE7Y29uc3QgS249KCk9PiExO2Z1bmN0aW9uIFluKGUsdCl7aWYoemUpcmV0dXJuO2NvbnN0IGw9ZnVuY3Rpb24oZSl7dmFyIGw7bnVsbD09PShsPXQuZHJhZyl8fHZvaWQgMD09PWx8fGwuY2FsbCh0LGUpfSxhPWZ1bmN0aW9uKGUpe3ZhciBuO2F0KGRvY3VtZW50LFwibW91c2Vtb3ZlXCIsbCksYXQoZG9jdW1lbnQsXCJtb3VzZXVwXCIsYSksYXQoZG9jdW1lbnQsXCJzZWxlY3RzdGFydFwiLEtuKSxhdChkb2N1bWVudCxcImRyYWdzdGFydFwiLEtuKSxqbj0hMSxudWxsPT09KG49dC5lbmQpfHx2b2lkIDA9PT1ufHxuLmNhbGwodCxlKX07bHQoZSxcIm1vdXNlZG93blwiLChmdW5jdGlvbihlKXt2YXIgbjtqbnx8KGx0KGRvY3VtZW50LFwic2VsZWN0c3RhcnRcIixLbiksbHQoZG9jdW1lbnQsXCJkcmFnc3RhcnRcIixLbiksbHQoZG9jdW1lbnQsXCJtb3VzZW1vdmVcIixsKSxsdChkb2N1bWVudCxcIm1vdXNldXBcIixhKSxqbj0hMCxudWxsPT09KG49dC5zdGFydCl8fHZvaWQgMD09PW58fG4uY2FsbCh0LGUpKX0pKX12YXIgcW49ZSh7bmFtZTpcIkVsU2xQYW5lbFwiLHByb3BzOntjb2xvcjp7dHlwZTpPYmplY3QscmVxdWlyZWQ6ITB9fSxzZXR1cChlKXtjb25zdCBhPXYoKSxuPXQoMCksbz10KDApLGk9dChcImhzbCgwLCAxMDAlLCA1MCUpXCIpLHI9bCgoKCk9Pih7aHVlOmUuY29sb3IuZ2V0KFwiaHVlXCIpLHZhbHVlOmUuY29sb3IuZ2V0KFwidmFsdWVcIil9KSkpO2Z1bmN0aW9uIHMoKXtjb25zdCB0PWUuY29sb3IuZ2V0KFwic2F0dXJhdGlvblwiKSxsPWUuY29sb3IuZ2V0KFwidmFsdWVcIikscj1hLnZub2RlLmVsO2xldHtjbGllbnRXaWR0aDpzLGNsaWVudEhlaWdodDp1fT1yO28udmFsdWU9dCpzLzEwMCxuLnZhbHVlPSgxMDAtbCkqdS8xMDAsaS52YWx1ZT1cImhzbChcIitlLmNvbG9yLmdldChcImh1ZVwiKStcIiwgMTAwJSwgNTAlKVwifWZ1bmN0aW9uIHUodCl7Y29uc3QgbD1hLnZub2RlLmVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO2xldCBpPXQuY2xpZW50WC1sLmxlZnQscj10LmNsaWVudFktbC50b3A7aT1NYXRoLm1heCgwLGkpLGk9TWF0aC5taW4oaSxsLndpZHRoKSxyPU1hdGgubWF4KDAscikscj1NYXRoLm1pbihyLGwuaGVpZ2h0KSxvLnZhbHVlPWksbi52YWx1ZT1yLGUuY29sb3Iuc2V0KHtzYXR1cmF0aW9uOmkvbC53aWR0aCoxMDAsdmFsdWU6MTAwLXIvbC5oZWlnaHQqMTAwfSl9cmV0dXJuIHkociwoKCk9PntzKCl9KSksXygoKCk9PntZbihhLnZub2RlLmVsLHtkcmFnOmU9Pnt1KGUpfSxlbmQ6ZT0+e3UoZSl9fSkscygpfSkpLHtjdXJzb3JUb3A6bixjdXJzb3JMZWZ0Om8sYmFja2dyb3VuZDppLGNvbG9yVmFsdWU6cixoYW5kbGVEcmFnOnUsdXBkYXRlOnN9fX0pO2NvbnN0IFVuPXMoXCJkaXZcIix7Y2xhc3M6XCJlbC1jb2xvci1zdnBhbmVsX193aGl0ZVwifSxudWxsLC0xKSxHbj1zKFwiZGl2XCIse2NsYXNzOlwiZWwtY29sb3Itc3ZwYW5lbF9fYmxhY2tcIn0sbnVsbCwtMSksWG49cyhcImRpdlwiLG51bGwsbnVsbCwtMSk7cW4ucmVuZGVyPWZ1bmN0aW9uKGUsdCxsLG8saSxyKXtyZXR1cm4gYSgpLG4oXCJkaXZcIix7Y2xhc3M6XCJlbC1jb2xvci1zdnBhbmVsXCIsc3R5bGU6e2JhY2tncm91bmRDb2xvcjplLmJhY2tncm91bmR9fSxbVW4sR24scyhcImRpdlwiLHtjbGFzczpcImVsLWNvbG9yLXN2cGFuZWxfX2N1cnNvclwiLHN0eWxlOnt0b3A6ZS5jdXJzb3JUb3ArXCJweFwiLGxlZnQ6ZS5jdXJzb3JMZWZ0K1wicHhcIn19LFtYbl0sNCldLDQpfSxxbi5fX2ZpbGU9XCJwYWNrYWdlcy9jb2xvci1waWNrZXIvc3JjL2NvbXBvbmVudHMvc3YtcGFuZWwudnVlXCI7dmFyIFFuPWUoe25hbWU6XCJFbENvbG9ySHVlU2xpZGVyXCIscHJvcHM6e2NvbG9yOnt0eXBlOk9iamVjdCxyZXF1aXJlZDohMH0sdmVydGljYWw6Qm9vbGVhbn0sc2V0dXAoZSl7Y29uc3QgYT12KCksbj10KG51bGwpLG89dChudWxsKSxpPXQoMCkscj10KDApLHM9bCgoKCk9PmUuY29sb3IuZ2V0KFwiaHVlXCIpKSk7ZnVuY3Rpb24gdSh0KXtjb25zdCBsPWEudm5vZGUuZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7bGV0IG87aWYoZS52ZXJ0aWNhbCl7bGV0IGU9dC5jbGllbnRZLWwudG9wO2U9TWF0aC5taW4oZSxsLmhlaWdodC1uLnZhbHVlLm9mZnNldEhlaWdodC8yKSxlPU1hdGgubWF4KG4udmFsdWUub2Zmc2V0SGVpZ2h0LzIsZSksbz1NYXRoLnJvdW5kKChlLW4udmFsdWUub2Zmc2V0SGVpZ2h0LzIpLyhsLmhlaWdodC1uLnZhbHVlLm9mZnNldEhlaWdodCkqMzYwKX1lbHNle2xldCBlPXQuY2xpZW50WC1sLmxlZnQ7ZT1NYXRoLm1pbihlLGwud2lkdGgtbi52YWx1ZS5vZmZzZXRXaWR0aC8yKSxlPU1hdGgubWF4KG4udmFsdWUub2Zmc2V0V2lkdGgvMixlKSxvPU1hdGgucm91bmQoKGUtbi52YWx1ZS5vZmZzZXRXaWR0aC8yKS8obC53aWR0aC1uLnZhbHVlLm9mZnNldFdpZHRoKSozNjApfWUuY29sb3Iuc2V0KFwiaHVlXCIsbyl9ZnVuY3Rpb24gZCgpe2kudmFsdWU9ZnVuY3Rpb24oKXtjb25zdCB0PWEudm5vZGUuZWw7aWYoZS52ZXJ0aWNhbClyZXR1cm4gMDtjb25zdCBsPWUuY29sb3IuZ2V0KFwiaHVlXCIpO3JldHVybiB0P01hdGgucm91bmQobCoodC5vZmZzZXRXaWR0aC1uLnZhbHVlLm9mZnNldFdpZHRoLzIpLzM2MCk6MH0oKSxyLnZhbHVlPWZ1bmN0aW9uKCl7Y29uc3QgdD1hLnZub2RlLmVsO2lmKCFlLnZlcnRpY2FsKXJldHVybiAwO2NvbnN0IGw9ZS5jb2xvci5nZXQoXCJodWVcIik7cmV0dXJuIHQ/TWF0aC5yb3VuZChsKih0Lm9mZnNldEhlaWdodC1uLnZhbHVlLm9mZnNldEhlaWdodC8yKS8zNjApOjB9KCl9cmV0dXJuIHkocywoKCk9PntkKCl9KSksXygoKCk9Pntjb25zdCBlPXtkcmFnOmU9Pnt1KGUpfSxlbmQ6ZT0+e3UoZSl9fTtZbihvLnZhbHVlLGUpLFluKG4udmFsdWUsZSksZCgpfSkpLHtiYXI6byx0aHVtYjpuLHRodW1iTGVmdDppLHRodW1iVG9wOnIsaHVlVmFsdWU6cyxoYW5kbGVDbGljazpmdW5jdGlvbihlKXtlLnRhcmdldCE9PW4udmFsdWUmJnUoZSl9LHVwZGF0ZTpkfX19KTtRbi5yZW5kZXI9ZnVuY3Rpb24oZSx0LGwsbyxpLHIpe3JldHVybiBhKCksbihcImRpdlwiLHtjbGFzczpbXCJlbC1jb2xvci1odWUtc2xpZGVyXCIse1wiaXMtdmVydGljYWxcIjplLnZlcnRpY2FsfV19LFtzKFwiZGl2XCIse3JlZjpcImJhclwiLGNsYXNzOlwiZWwtY29sb3ItaHVlLXNsaWRlcl9fYmFyXCIsb25DbGljazp0WzFdfHwodFsxXT0oLi4udCk9PmUuaGFuZGxlQ2xpY2soLi4udCkpfSxudWxsLDUxMikscyhcImRpdlwiLHtyZWY6XCJ0aHVtYlwiLGNsYXNzOlwiZWwtY29sb3ItaHVlLXNsaWRlcl9fdGh1bWJcIixzdHlsZTp7bGVmdDplLnRodW1iTGVmdCtcInB4XCIsdG9wOmUudGh1bWJUb3ArXCJweFwifX0sbnVsbCw0KV0sMil9LFFuLl9fZmlsZT1cInBhY2thZ2VzL2NvbG9yLXBpY2tlci9zcmMvY29tcG9uZW50cy9odWUtc2xpZGVyLnZ1ZVwiO3ZhciBabj1lKHtuYW1lOlwiRWxDb2xvckFscGhhU2xpZGVyXCIscHJvcHM6e2NvbG9yOnt0eXBlOk9iamVjdCxyZXF1aXJlZDohMH0sdmVydGljYWw6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiExfX0sc2V0dXAoZSl7Y29uc3QgbD12KCksYT10KG51bGwpLG49dChudWxsKSxvPXQoMCksaT10KDApLHI9dChudWxsKTtmdW5jdGlvbiBzKHQpe2NvbnN0IG49bC52bm9kZS5lbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtpZihlLnZlcnRpY2FsKXtsZXQgbD10LmNsaWVudFktbi50b3A7bD1NYXRoLm1heChhLnZhbHVlLm9mZnNldEhlaWdodC8yLGwpLGw9TWF0aC5taW4obCxuLmhlaWdodC1hLnZhbHVlLm9mZnNldEhlaWdodC8yKSxlLmNvbG9yLnNldChcImFscGhhXCIsTWF0aC5yb3VuZCgobC1hLnZhbHVlLm9mZnNldEhlaWdodC8yKS8obi5oZWlnaHQtYS52YWx1ZS5vZmZzZXRIZWlnaHQpKjEwMCkpfWVsc2V7bGV0IGw9dC5jbGllbnRYLW4ubGVmdDtsPU1hdGgubWF4KGEudmFsdWUub2Zmc2V0V2lkdGgvMixsKSxsPU1hdGgubWluKGwsbi53aWR0aC1hLnZhbHVlLm9mZnNldFdpZHRoLzIpLGUuY29sb3Iuc2V0KFwiYWxwaGFcIixNYXRoLnJvdW5kKChsLWEudmFsdWUub2Zmc2V0V2lkdGgvMikvKG4ud2lkdGgtYS52YWx1ZS5vZmZzZXRXaWR0aCkqMTAwKSl9fWZ1bmN0aW9uIHUoKXtvLnZhbHVlPWZ1bmN0aW9uKCl7aWYoZS52ZXJ0aWNhbClyZXR1cm4gMDtjb25zdCB0PWwudm5vZGUuZWwsbj1lLmNvbG9yLmdldChcImFscGhhXCIpO3JldHVybiB0P01hdGgucm91bmQobioodC5vZmZzZXRXaWR0aC1hLnZhbHVlLm9mZnNldFdpZHRoLzIpLzEwMCk6MH0oKSxpLnZhbHVlPWZ1bmN0aW9uKCl7Y29uc3QgdD1sLnZub2RlLmVsO2lmKCFlLnZlcnRpY2FsKXJldHVybiAwO2NvbnN0IG49ZS5jb2xvci5nZXQoXCJhbHBoYVwiKTtyZXR1cm4gdD9NYXRoLnJvdW5kKG4qKHQub2Zmc2V0SGVpZ2h0LWEudmFsdWUub2Zmc2V0SGVpZ2h0LzIpLzEwMCk6MH0oKSxyLnZhbHVlPWZ1bmN0aW9uKCl7aWYoZS5jb2xvciYmZS5jb2xvci52YWx1ZSl7Y29uc3R7cjp0LGc6bCxiOmF9PWUuY29sb3IudG9SZ2IoKTtyZXR1cm5gbGluZWFyLWdyYWRpZW50KHRvIHJpZ2h0LCByZ2JhKCR7dH0sICR7bH0sICR7YX0sIDApIDAlLCByZ2JhKCR7dH0sICR7bH0sICR7YX0sIDEpIDEwMCUpYH1yZXR1cm4gbnVsbH0oKX1yZXR1cm4geSgoKCk9PmUuY29sb3IuZ2V0KFwiYWxwaGFcIikpLCgoKT0+e3UoKX0pKSx5KCgoKT0+ZS5jb2xvci52YWx1ZSksKCgpPT57dSgpfSkpLF8oKCgpPT57Y29uc3QgZT17ZHJhZzplPT57cyhlKX0sZW5kOmU9PntzKGUpfX07WW4obi52YWx1ZSxlKSxZbihhLnZhbHVlLGUpLHUoKX0pKSx7dGh1bWI6YSxiYXI6bix0aHVtYkxlZnQ6byx0aHVtYlRvcDppLGJhY2tncm91bmQ6cixoYW5kbGVDbGljazpmdW5jdGlvbihlKXtlLnRhcmdldCE9PWEudmFsdWUmJnMoZSl9LHVwZGF0ZTp1fX19KTtabi5yZW5kZXI9ZnVuY3Rpb24oZSx0LGwsbyxpLHIpe3JldHVybiBhKCksbihcImRpdlwiLHtjbGFzczpbXCJlbC1jb2xvci1hbHBoYS1zbGlkZXJcIix7XCJpcy12ZXJ0aWNhbFwiOmUudmVydGljYWx9XX0sW3MoXCJkaXZcIix7cmVmOlwiYmFyXCIsY2xhc3M6XCJlbC1jb2xvci1hbHBoYS1zbGlkZXJfX2JhclwiLHN0eWxlOntiYWNrZ3JvdW5kOmUuYmFja2dyb3VuZH0sb25DbGljazp0WzFdfHwodFsxXT0oLi4udCk9PmUuaGFuZGxlQ2xpY2soLi4udCkpfSxudWxsLDQpLHMoXCJkaXZcIix7cmVmOlwidGh1bWJcIixjbGFzczpcImVsLWNvbG9yLWFscGhhLXNsaWRlcl9fdGh1bWJcIixzdHlsZTp7bGVmdDplLnRodW1iTGVmdCtcInB4XCIsdG9wOmUudGh1bWJUb3ArXCJweFwifX0sbnVsbCw0KV0sMil9LFpuLl9fZmlsZT1cInBhY2thZ2VzL2NvbG9yLXBpY2tlci9zcmMvY29tcG9uZW50cy9hbHBoYS1zbGlkZXIudnVlXCI7dmFyIEpuPWUoe3Byb3BzOntjb2xvcnM6e3R5cGU6QXJyYXkscmVxdWlyZWQ6ITB9LGNvbG9yOnt0eXBlOk9iamVjdCxyZXF1aXJlZDohMH19LHNldHVwKGUpe2NvbnN0e2N1cnJlbnRDb2xvcjpsfT1hbygpLGE9dChuKGUuY29sb3JzLGUuY29sb3IpKTtmdW5jdGlvbiBuKGUsdCl7cmV0dXJuIGUubWFwKChlPT57Y29uc3QgbD1uZXcgV247cmV0dXJuIGwuZW5hYmxlQWxwaGE9ITAsbC5mb3JtYXQ9XCJyZ2JhXCIsbC5mcm9tU3RyaW5nKGUpLGwuc2VsZWN0ZWQ9bC52YWx1ZT09PXQudmFsdWUsbH0pKX1yZXR1cm4geShsLChlPT57Y29uc3QgdD1uZXcgV247dC5mcm9tU3RyaW5nKGUpLGEudmFsdWUuZm9yRWFjaCgoZT0+e2Uuc2VsZWN0ZWQ9dC5jb21wYXJlKGUpfSkpfSkpLGcoKCgpPT57YS52YWx1ZT1uKGUuY29sb3JzLGUuY29sb3IpfSkpLHtyZ2JhQ29sb3JzOmEsaGFuZGxlU2VsZWN0OmZ1bmN0aW9uKHQpe2UuY29sb3IuZnJvbVN0cmluZyhlLmNvbG9yc1t0XSl9fX19KTtjb25zdCBlbz17Y2xhc3M6XCJlbC1jb2xvci1wcmVkZWZpbmVcIn0sdG89e2NsYXNzOlwiZWwtY29sb3ItcHJlZGVmaW5lX19jb2xvcnNcIn07Sm4ucmVuZGVyPWZ1bmN0aW9uKGUsdCxsLG8saSxyKXtyZXR1cm4gYSgpLG4oXCJkaXZcIixlbyxbcyhcImRpdlwiLHRvLFsoYSghMCksbihFLG51bGwsSChlLnJnYmFDb2xvcnMsKCh0LGwpPT4oYSgpLG4oXCJkaXZcIix7a2V5OmUuY29sb3JzW2xdLGNsYXNzOltcImVsLWNvbG9yLXByZWRlZmluZV9fY29sb3Itc2VsZWN0b3JcIix7c2VsZWN0ZWQ6dC5zZWxlY3RlZCxcImlzLWFscGhhXCI6dC5fYWxwaGE8MTAwfV0sb25DbGljazp0PT5lLmhhbmRsZVNlbGVjdChsKX0sW3MoXCJkaXZcIix7c3R5bGU6e1wiYmFja2dyb3VuZC1jb2xvclwiOnQudmFsdWV9fSxudWxsLDQpXSwxMCxbXCJvbkNsaWNrXCJdKSkpKSwxMjgpKV0pXSl9LEpuLl9fZmlsZT1cInBhY2thZ2VzL2NvbG9yLXBpY2tlci9zcmMvY29tcG9uZW50cy9wcmVkZWZpbmUudnVlXCI7Y29uc3QgbG89U3ltYm9sKCksYW89KCk9PncobG8pO3ZhciBubz1lKHtuYW1lOlwiRWxDb2xvclBpY2tlclwiLGNvbXBvbmVudHM6e0VsUG9wcGVyOlNsLEVsSW5wdXQ6V3QsU3ZQYW5lbDpxbixIdWVTbGlkZXI6UW4sQWxwaGFTbGlkZXI6Wm4sRWxCdXR0b246JGwsUHJlZGVmaW5lOkpufSxkaXJlY3RpdmVzOntDbGlja091dHNpZGU6TXR9LHByb3BzOnttb2RlbFZhbHVlOlN0cmluZyxzaG93QWxwaGE6Qm9vbGVhbixjb2xvckZvcm1hdDpTdHJpbmcsZGlzYWJsZWQ6Qm9vbGVhbixzaXplOnt0eXBlOlN0cmluZyx2YWxpZGF0b3I6QXR9LHBvcHBlckNsYXNzOlN0cmluZyxwcmVkZWZpbmU6QXJyYXl9LGVtaXRzOntjaGFuZ2U6bnVsbCxcImFjdGl2ZS1jaGFuZ2VcIjpudWxsLFtQdF06bnVsbH0sc2V0dXAoZSx7ZW1pdDphfSl7Y29uc3Qgbj1xZSgpLG89dyhcImVsRm9ybVwiLHt9KSxpPXcoXCJlbEZvcm1JdGVtXCIse30pLHI9dChudWxsKSxzPXQobnVsbCksdT10KG51bGwpLGQ9dChudWxsKSxjPWYobmV3IFduKHtlbmFibGVBbHBoYTplLnNob3dBbHBoYSxmb3JtYXQ6ZS5jb2xvckZvcm1hdH0pKSxwPXQoITEpLGg9dCghMSksdj10KFwiXCIpLG09bCgoKCk9PmUubW9kZWxWYWx1ZXx8aC52YWx1ZT9mdW5jdGlvbihlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIFduKSl0aHJvdyBFcnJvcihcImNvbG9yIHNob3VsZCBiZSBpbnN0YW5jZSBvZiBfY29sb3IgQ2xhc3NcIik7Y29uc3R7cjpsLGc6YSxiOm59PWUudG9SZ2IoKTtyZXR1cm4gdD9gcmdiYSgke2x9LCAke2F9LCAke259LCAke2UuZ2V0KFwiYWxwaGFcIikvMTAwfSlgOmByZ2IoJHtsfSwgJHthfSwgJHtufSlgfShjLGUuc2hvd0FscGhhKTpcInRyYW5zcGFyZW50XCIpKSxnPWwoKCgpPT5lLnNpemV8fGkuc2l6ZXx8bi5zaXplKSksYj1sKCgoKT0+ZS5kaXNhYmxlZHx8by5kaXNhYmxlZCkpLEM9bCgoKCk9PmUubW9kZWxWYWx1ZXx8aC52YWx1ZT9jLnZhbHVlOlwiXCIpKTt5KCgoKT0+ZS5tb2RlbFZhbHVlKSwoZT0+e2U/ZSYmZSE9PWMudmFsdWUmJmMuZnJvbVN0cmluZyhlKTpoLnZhbHVlPSExfSkpLHkoQywoZT0+e3YudmFsdWU9ZSxhKFwiYWN0aXZlLWNoYW5nZVwiLGUpfSkpLHkoKCgpPT5jLnZhbHVlKSwoKCk9PntlLm1vZGVsVmFsdWV8fGgudmFsdWV8fChoLnZhbHVlPSEwKX0pKTtjb25zdCBTPWxlKChmdW5jdGlvbihlKXtwLnZhbHVlPWV9KSwxMDApO2Z1bmN0aW9uIEUoKXtrKCgoKT0+e2UubW9kZWxWYWx1ZT9jLmZyb21TdHJpbmcoZS5tb2RlbFZhbHVlKTpoLnZhbHVlPSExfSkpfXJldHVybiBfKCgoKT0+e2UubW9kZWxWYWx1ZSYmKGMuZnJvbVN0cmluZyhlLm1vZGVsVmFsdWUpLHYudmFsdWU9Qy52YWx1ZSl9KSkseShwLCgoKT0+e2soKCgpPT57dmFyIGUsdCxsO251bGw9PT0oZT1yLnZhbHVlKXx8dm9pZCAwPT09ZXx8ZS51cGRhdGUoKSxudWxsPT09KHQ9cy52YWx1ZSl8fHZvaWQgMD09PXR8fHQudXBkYXRlKCksbnVsbD09PShsPXUudmFsdWUpfHx2b2lkIDA9PT1sfHxsLnVwZGF0ZSgpfSkpfSkpLHgobG8se2N1cnJlbnRDb2xvcjpDfSkse2NvbG9yOmMsY29sb3JEaXNhYmxlZDpiLGNvbG9yU2l6ZTpnLGRpc3BsYXllZENvbG9yOm0sc2hvd1BhbmVsQ29sb3I6aCxzaG93UGlja2VyOnAsY3VzdG9tSW5wdXQ6dixoYW5kbGVDb25maXJtOmZ1bmN0aW9uKCl7Yy5mcm9tU3RyaW5nKHYudmFsdWUpfSxoaWRlOmZ1bmN0aW9uKCl7UyghMSksRSgpfSxoYW5kbGVUcmlnZ2VyOmZ1bmN0aW9uKCl7Yi52YWx1ZXx8UyghcC52YWx1ZSl9LGNsZWFyOmZ1bmN0aW9uKCl7dmFyIHQ7UyghMSksYShQdCxudWxsKSxhKFwiY2hhbmdlXCIsbnVsbCksbnVsbCE9PWUubW9kZWxWYWx1ZSYmKG51bGw9PT0odD1pLmZvcm1JdGVtTWl0dCl8fHZvaWQgMD09PXR8fHQuZW1pdChcImVsLmZvcm0uY2hhbmdlXCIsbnVsbCkpLEUoKX0sY29uZmlybVZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU7Y29uc3QgdD1jLnZhbHVlO2EoUHQsdCksYShcImNoYW5nZVwiLHQpLG51bGw9PT0oZT1pLmZvcm1JdGVtTWl0dCl8fHZvaWQgMD09PWV8fGUuZW1pdChcImVsLmZvcm0uY2hhbmdlXCIsdCksUyghMSl9LHQ6cWwsaHVlOnIsc3ZQYW5lbDpzLGFscGhhOnUscG9wcGVyOmR9fX0pO2NvbnN0IG9vPXtjbGFzczpcImVsLWNvbG9yLWRyb3Bkb3duX19tYWluLXdyYXBwZXJcIn0saW89e2NsYXNzOlwiZWwtY29sb3ItZHJvcGRvd25fX2J0bnNcIn0scm89e2NsYXNzOlwiZWwtY29sb3ItZHJvcGRvd25fX3ZhbHVlXCJ9LHNvPXtrZXk6MCxjbGFzczpcImVsLWNvbG9yLXBpY2tlcl9fbWFza1wifSx1bz17a2V5OjAsY2xhc3M6XCJlbC1jb2xvci1waWNrZXJfX2VtcHR5IGVsLWljb24tY2xvc2VcIn0sY289e2NsYXNzOlwiZWwtY29sb3ItcGlja2VyX19pY29uIGVsLWljb24tYXJyb3ctZG93blwifTtuby5yZW5kZXI9ZnVuY3Rpb24oZSx0LGwsbyxkLHYpe2NvbnN0IG09UChcImh1ZS1zbGlkZXJcIiksZj1QKFwic3YtcGFuZWxcIiksZz1QKFwiYWxwaGEtc2xpZGVyXCIpLGI9UChcInByZWRlZmluZVwiKSx5PVAoXCJlbC1pbnB1dFwiKSxrPVAoXCJlbC1idXR0b25cIiksQz1QKFwiZWwtcG9wcGVyXCIpLHg9RihcImNsaWNrLW91dHNpZGVcIik7cmV0dXJuIGEoKSxuKEMse3JlZjpcInBvcHBlclwiLHZpc2libGU6ZS5zaG93UGlja2VyLFwib25VcGRhdGU6dmlzaWJsZVwiOnRbM118fCh0WzNdPXQ9PmUuc2hvd1BpY2tlcj10KSxlZmZlY3Q6XCJsaWdodFwiLFwibWFudWFsLW1vZGVcIjpcIlwiLHRyaWdnZXI6XCJjbGlja1wiLFwic2hvdy1hcnJvd1wiOiExLG9mZnNldDowLHRyYW5zaXRpb246XCJlbC16b29tLWluLXRvcFwiLFwiZ3B1LWFjY2VsZXJhdGlvblwiOiExLFwicG9wcGVyLWNsYXNzXCI6XCJlbC1jb2xvci1waWNrZXJfX3BhbmVsIGVsLWNvbG9yLWRyb3Bkb3duIFwiK2UucG9wcGVyQ2xhc3MsXCJzdG9wLXBvcHBlci1tb3VzZS1ldmVudFwiOiExfSx7ZGVmYXVsdDppKCgoKT0+W3IocyhcImRpdlwiLG51bGwsW3MoXCJkaXZcIixvbyxbcyhtLHtyZWY6XCJodWVcIixjbGFzczpcImh1ZS1zbGlkZXJcIixjb2xvcjplLmNvbG9yLHZlcnRpY2FsOlwiXCJ9LG51bGwsOCxbXCJjb2xvclwiXSkscyhmLHtyZWY6XCJzdlBhbmVsXCIsY29sb3I6ZS5jb2xvcn0sbnVsbCw4LFtcImNvbG9yXCJdKV0pLGUuc2hvd0FscGhhPyhhKCksbihnLHtrZXk6MCxyZWY6XCJhbHBoYVwiLGNvbG9yOmUuY29sb3J9LG51bGwsOCxbXCJjb2xvclwiXSkpOnUoXCJ2LWlmXCIsITApLGUucHJlZGVmaW5lPyhhKCksbihiLHtrZXk6MSxyZWY6XCJwcmVkZWZpbmVcIixjb2xvcjplLmNvbG9yLGNvbG9yczplLnByZWRlZmluZX0sbnVsbCw4LFtcImNvbG9yXCIsXCJjb2xvcnNcIl0pKTp1KFwidi1pZlwiLCEwKSxzKFwiZGl2XCIsaW8sW3MoXCJzcGFuXCIscm8sW3MoeSx7bW9kZWxWYWx1ZTplLmN1c3RvbUlucHV0LFwib25VcGRhdGU6bW9kZWxWYWx1ZVwiOnRbMV18fCh0WzFdPXQ9PmUuY3VzdG9tSW5wdXQ9dCksXCJ2YWxpZGF0ZS1ldmVudFwiOiExLHNpemU6XCJtaW5pXCIsb25LZXl1cDokKGUuaGFuZGxlQ29uZmlybSxbXCJlbnRlclwiXSksb25CbHVyOmUuaGFuZGxlQ29uZmlybX0sbnVsbCw4LFtcIm1vZGVsVmFsdWVcIixcIm9uS2V5dXBcIixcIm9uQmx1clwiXSldKSxzKGsse3NpemU6XCJtaW5pXCIsdHlwZTpcInRleHRcIixjbGFzczpcImVsLWNvbG9yLWRyb3Bkb3duX19saW5rLWJ0blwiLG9uQ2xpY2s6ZS5jbGVhcn0se2RlZmF1bHQ6aSgoKCk9PltjKHAoZS50KFwiZWwuY29sb3JwaWNrZXIuY2xlYXJcIikpLDEpXSkpLF86MX0sOCxbXCJvbkNsaWNrXCJdKSxzKGsse3BsYWluOlwiXCIsc2l6ZTpcIm1pbmlcIixjbGFzczpcImVsLWNvbG9yLWRyb3Bkb3duX19idG5cIixvbkNsaWNrOmUuY29uZmlybVZhbHVlfSx7ZGVmYXVsdDppKCgoKT0+W2MocChlLnQoXCJlbC5jb2xvcnBpY2tlci5jb25maXJtXCIpKSwxKV0pKSxfOjF9LDgsW1wib25DbGlja1wiXSldKV0sNTEyKSxbW3gsZS5oaWRlXV0pXSkpLHRyaWdnZXI6aSgoKCk9PltzKFwiZGl2XCIse2NsYXNzOltcImVsLWNvbG9yLXBpY2tlclwiLGUuY29sb3JEaXNhYmxlZD9cImlzLWRpc2FibGVkXCI6XCJcIixlLmNvbG9yU2l6ZT9cImVsLWNvbG9yLXBpY2tlci0tXCIrZS5jb2xvclNpemU6XCJcIl19LFtlLmNvbG9yRGlzYWJsZWQ/KGEoKSxuKFwiZGl2XCIsc28pKTp1KFwidi1pZlwiLCEwKSxzKFwiZGl2XCIse2NsYXNzOlwiZWwtY29sb3ItcGlja2VyX190cmlnZ2VyXCIsb25DbGljazp0WzJdfHwodFsyXT0oLi4udCk9PmUuaGFuZGxlVHJpZ2dlciguLi50KSl9LFtzKFwic3BhblwiLHtjbGFzczpbXCJlbC1jb2xvci1waWNrZXJfX2NvbG9yXCIse1wiaXMtYWxwaGFcIjplLnNob3dBbHBoYX1dfSxbcyhcInNwYW5cIix7Y2xhc3M6XCJlbC1jb2xvci1waWNrZXJfX2NvbG9yLWlubmVyXCIsc3R5bGU6e2JhY2tncm91bmRDb2xvcjplLmRpc3BsYXllZENvbG9yfX0sbnVsbCw0KSxlLm1vZGVsVmFsdWV8fGUuc2hvd1BhbmVsQ29sb3I/dShcInYtaWZcIiwhMCk6KGEoKSxuKFwic3BhblwiLHVvKSldLDIpLHIocyhcInNwYW5cIixjbyxudWxsLDUxMiksW1toLGUubW9kZWxWYWx1ZXx8ZS5zaG93UGFuZWxDb2xvcl1dKV0pXSwyKV0pKSxfOjF9LDgsW1widmlzaWJsZVwiLFwicG9wcGVyLWNsYXNzXCJdKX0sbm8uX19maWxlPVwicGFja2FnZXMvY29sb3ItcGlja2VyL3NyYy9pbmRleC52dWVcIixuby5pbnN0YWxsPWU9PntlLmNvbXBvbmVudChuby5uYW1lLG5vKX07dmFyIHBvPWUoe25hbWU6XCJFbENvbnRhaW5lclwiLHByb3BzOntkaXJlY3Rpb246e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJcIn19LHNldHVwOihlLHtzbG90czp0fSk9Pih7aXNWZXJ0aWNhbDpsKCgoKT0+e2lmKFwidmVydGljYWxcIj09PWUuZGlyZWN0aW9uKXJldHVybiEwO2lmKFwiaG9yaXpvbnRhbFwiPT09ZS5kaXJlY3Rpb24pcmV0dXJuITE7aWYodCYmdC5kZWZhdWx0KXtyZXR1cm4gdC5kZWZhdWx0KCkuc29tZSgoZT0+e2NvbnN0IHQ9ZS50eXBlLm5hbWU7cmV0dXJuXCJFbEhlYWRlclwiPT09dHx8XCJFbEZvb3RlclwiPT09dH0pKX1yZXR1cm4hMX0pKX0pfSk7cG8ucmVuZGVyPWZ1bmN0aW9uKGUsdCxsLG8saSxyKXtyZXR1cm4gYSgpLG4oXCJzZWN0aW9uXCIse2NsYXNzOltcImVsLWNvbnRhaW5lclwiLHtcImlzLXZlcnRpY2FsXCI6ZS5pc1ZlcnRpY2FsfV19LFtkKGUuJHNsb3RzLFwiZGVmYXVsdFwiKV0sMil9LHBvLl9fZmlsZT1cInBhY2thZ2VzL2NvbnRhaW5lci9zcmMvY29udGFpbmVyLnZ1ZVwiLHBvLmluc3RhbGw9ZT0+e2UuY29tcG9uZW50KHBvLm5hbWUscG8pfTt2YXIgaG89ZSh7cHJvcHM6e2RhdGU6e3R5cGU6T2JqZWN0fSxtaW5EYXRlOnt0eXBlOk9iamVjdH0sbWF4RGF0ZTp7dHlwZTpPYmplY3R9LHBhcnNlZFZhbHVlOnt0eXBlOltPYmplY3QsQXJyYXldfSxzZWxlY3Rpb25Nb2RlOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiZGF5XCJ9LHNob3dXZWVrTnVtYmVyOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMX0sZGlzYWJsZWREYXRlOnt0eXBlOkZ1bmN0aW9ufSxjZWxsQ2xhc3NOYW1lOnt0eXBlOkZ1bmN0aW9ufSxyYW5nZVN0YXRlOnt0eXBlOk9iamVjdCxkZWZhdWx0OigpPT4oe2VuZERhdGU6bnVsbCxzZWxlY3Rpbmc6ITF9KX19LGVtaXRzOltcImNoYW5nZXJhbmdlXCIsXCJwaWNrXCIsXCJzZWxlY3RcIl0sc2V0dXAoZSxhKXtjb25zdCBuPXQobnVsbCksbz10KG51bGwpLGk9dChbW10sW10sW10sW10sW10sW11dKSxyPWUuZGF0ZS4kbG9jYWxlKCkud2Vla1N0YXJ0fHw3LHM9ZS5kYXRlLmxvY2FsZShcImVuXCIpLmxvY2FsZURhdGEoKS53ZWVrZGF5c1Nob3J0KCkubWFwKChlPT5lLnRvTG93ZXJDYXNlKCkpKSx1PWwoKCgpPT5yPjM/Ny1yOi1yKSksZD1sKCgoKT0+e2NvbnN0IHQ9ZS5kYXRlLnN0YXJ0T2YoXCJtb250aFwiKTtyZXR1cm4gdC5zdWJ0cmFjdCh0LmRheSgpfHw3LFwiZGF5XCIpfSkpLGM9bCgoKCk9PnMuY29uY2F0KHMpLnNsaWNlKHIscis3KSkpLHA9bCgoKCk9Pntjb25zdCB0PWUuZGF0ZS5zdGFydE9mKFwibW9udGhcIiksbD10LmRheSgpfHw3LGE9dC5kYXlzSW5Nb250aCgpLG49dC5zdWJ0cmFjdCgxLFwibW9udGhcIikuZGF5c0luTW9udGgoKSxvPXUudmFsdWUscj1pLnZhbHVlO2xldCBzPTE7Y29uc3QgYz1cImRhdGVzXCI9PT1lLnNlbGVjdGlvbk1vZGU/SGUoZS5wYXJzZWRWYWx1ZSk6W10scD1zZSgpLnN0YXJ0T2YoXCJkYXlcIik7Zm9yKGxldCB0PTA7dDw2O3QrKyl7Y29uc3QgaT1yW3RdO2Uuc2hvd1dlZWtOdW1iZXImJihpWzBdfHwoaVswXT17dHlwZTpcIndlZWtcIix0ZXh0OmQudmFsdWUuYWRkKDcqdCsxLFwiZGF5XCIpLndlZWsoKX0pKTtmb3IobGV0IHI9MDtyPDc7cisrKXtsZXQgdT1pW2Uuc2hvd1dlZWtOdW1iZXI/cisxOnJdO3V8fCh1PXtyb3c6dCxjb2x1bW46cix0eXBlOlwibm9ybWFsXCIsaW5SYW5nZTohMSxzdGFydDohMSxlbmQ6ITF9KTtjb25zdCBoPTcqdCtyLHY9ZC52YWx1ZS5hZGQoaC1vLFwiZGF5XCIpO3UudHlwZT1cIm5vcm1hbFwiO2NvbnN0IG09ZS5yYW5nZVN0YXRlLmVuZERhdGV8fGUubWF4RGF0ZXx8ZS5yYW5nZVN0YXRlLnNlbGVjdGluZyYmZS5taW5EYXRlO3UuaW5SYW5nZT1lLm1pbkRhdGUmJnYuaXNTYW1lT3JBZnRlcihlLm1pbkRhdGUsXCJkYXlcIikmJm0mJnYuaXNTYW1lT3JCZWZvcmUobSxcImRheVwiKSx1LnN0YXJ0PWUubWluRGF0ZSYmdi5pc1NhbWUoZS5taW5EYXRlLFwiZGF5XCIpLHUuZW5kPW0mJnYuaXNTYW1lKG0sXCJkYXlcIik7aWYodi5pc1NhbWUocCxcImRheVwiKSYmKHUudHlwZT1cInRvZGF5XCIpLHQ+PTAmJnQ8PTEpe2NvbnN0IGU9bCtvPDA/NytsK286bCtvO3IrNyp0Pj1lP3UudGV4dD1zKys6KHUudGV4dD1uLShlLXIlNykrMSs3KnQsdS50eXBlPVwicHJldi1tb250aFwiKX1lbHNlIHM8PWE/dS50ZXh0PXMrKzoodS50ZXh0PXMrKy1hLHUudHlwZT1cIm5leHQtbW9udGhcIik7Y29uc3QgZj12LnRvRGF0ZSgpO3Uuc2VsZWN0ZWQ9Yy5maW5kKChlPT5lLnZhbHVlT2YoKT09PXYudmFsdWVPZigpKSksdS5kaXNhYmxlZD1lLmRpc2FibGVkRGF0ZSYmZS5kaXNhYmxlZERhdGUoZiksdS5jdXN0b21DbGFzcz1lLmNlbGxDbGFzc05hbWUmJmUuY2VsbENsYXNzTmFtZShmKSxpW2Uuc2hvd1dlZWtOdW1iZXI/cisxOnJdPXV9aWYoXCJ3ZWVrXCI9PT1lLnNlbGVjdGlvbk1vZGUpe2NvbnN0IHQ9ZS5zaG93V2Vla051bWJlcj8xOjAsbD1lLnNob3dXZWVrTnVtYmVyPzc6NixhPXYoaVt0KzFdKTtpW3RdLmluUmFuZ2U9YSxpW3RdLnN0YXJ0PWEsaVtsXS5pblJhbmdlPWEsaVtsXS5lbmQ9YX19cmV0dXJuIHJ9KSksaD0odCxsKT0+e2NvbnN0IGE9Nyp0KyhsLShlLnNob3dXZWVrTnVtYmVyPzE6MCkpLXUudmFsdWU7cmV0dXJuIGQudmFsdWUuYWRkKGEsXCJkYXlcIil9LHY9dD0+e2lmKFwid2Vla1wiIT09ZS5zZWxlY3Rpb25Nb2RlKXJldHVybiExO2xldCBsPWUuZGF0ZS5zdGFydE9mKFwiZGF5XCIpO2lmKFwicHJldi1tb250aFwiPT09dC50eXBlJiYobD1sLnN1YnRyYWN0KDEsXCJtb250aFwiKSksXCJuZXh0LW1vbnRoXCI9PT10LnR5cGUmJihsPWwuYWRkKDEsXCJtb250aFwiKSksbD1sLmRhdGUocGFyc2VJbnQodC50ZXh0LDEwKSksZS5wYXJzZWRWYWx1ZSYmIUFycmF5LmlzQXJyYXkoZS5wYXJzZWRWYWx1ZSkpe2NvbnN0IHQ9KGUucGFyc2VkVmFsdWUuZGF5KCktcis3KSU3LTE7cmV0dXJuIGUucGFyc2VkVmFsdWUuc3VidHJhY3QodCxcImRheVwiKS5pc1NhbWUobCxcImRheVwiKX1yZXR1cm4hMX07cmV0dXJue2hhbmRsZU1vdXNlTW92ZTp0PT57aWYoIWUucmFuZ2VTdGF0ZS5zZWxlY3RpbmcpcmV0dXJuO2xldCBsPXQudGFyZ2V0O2lmKFwiU1BBTlwiPT09bC50YWdOYW1lJiYobD1sLnBhcmVudE5vZGUucGFyZW50Tm9kZSksXCJESVZcIj09PWwudGFnTmFtZSYmKGw9bC5wYXJlbnROb2RlKSxcIlREXCIhPT1sLnRhZ05hbWUpcmV0dXJuO2NvbnN0IGk9bC5wYXJlbnROb2RlLnJvd0luZGV4LTEscj1sLmNlbGxJbmRleDtwLnZhbHVlW2ldW3JdLmRpc2FibGVkfHxpPT09bi52YWx1ZSYmcj09PW8udmFsdWV8fChuLnZhbHVlPWksby52YWx1ZT1yLGEuZW1pdChcImNoYW5nZXJhbmdlXCIse3NlbGVjdGluZzohMCxlbmREYXRlOmgoaSxyKX0pKX0sdDpxbCxyb3dzOnAsaXNXZWVrQWN0aXZlOnYsZ2V0Q2VsbENsYXNzZXM6dD0+e2xldCBsPVtdO3JldHVyblwibm9ybWFsXCIhPT10LnR5cGUmJlwidG9kYXlcIiE9PXQudHlwZXx8dC5kaXNhYmxlZD9sLnB1c2godC50eXBlKToobC5wdXNoKFwiYXZhaWxhYmxlXCIpLFwidG9kYXlcIj09PXQudHlwZSYmbC5wdXNoKFwidG9kYXlcIikpLFwiZGF5XCIhPT1lLnNlbGVjdGlvbk1vZGV8fFwibm9ybWFsXCIhPT10LnR5cGUmJlwidG9kYXlcIiE9PXQudHlwZXx8ISgodCxsKT0+ISFsJiZzZShsKS5pc1NhbWUoZS5kYXRlLmRhdGUoTnVtYmVyKHQudGV4dCkpLFwiZGF5XCIpKSh0LGUucGFyc2VkVmFsdWUpfHxsLnB1c2goXCJjdXJyZW50XCIpLCF0LmluUmFuZ2V8fFwibm9ybWFsXCIhPT10LnR5cGUmJlwidG9kYXlcIiE9PXQudHlwZSYmXCJ3ZWVrXCIhPT1lLnNlbGVjdGlvbk1vZGV8fChsLnB1c2goXCJpbi1yYW5nZVwiKSx0LnN0YXJ0JiZsLnB1c2goXCJzdGFydC1kYXRlXCIpLHQuZW5kJiZsLnB1c2goXCJlbmQtZGF0ZVwiKSksdC5kaXNhYmxlZCYmbC5wdXNoKFwiZGlzYWJsZWRcIiksdC5zZWxlY3RlZCYmbC5wdXNoKFwic2VsZWN0ZWRcIiksdC5jdXN0b21DbGFzcyYmbC5wdXNoKHQuY3VzdG9tQ2xhc3MpLGwuam9pbihcIiBcIil9LFdFRUtTOmMsaGFuZGxlQ2xpY2s6dD0+e2xldCBsPXQudGFyZ2V0O2lmKFwiU1BBTlwiPT09bC50YWdOYW1lJiYobD1sLnBhcmVudE5vZGUucGFyZW50Tm9kZSksXCJESVZcIj09PWwudGFnTmFtZSYmKGw9bC5wYXJlbnROb2RlKSxcIlREXCIhPT1sLnRhZ05hbWUpcmV0dXJuO2NvbnN0IG49bC5wYXJlbnROb2RlLnJvd0luZGV4LTEsbz1cIndlZWtcIj09PWUuc2VsZWN0aW9uTW9kZT8xOmwuY2VsbEluZGV4LGk9cC52YWx1ZVtuXVtvXTtpZihpLmRpc2FibGVkfHxcIndlZWtcIj09PWkudHlwZSlyZXR1cm47Y29uc3Qgcj1oKG4sbyk7aWYoXCJyYW5nZVwiPT09ZS5zZWxlY3Rpb25Nb2RlKWUucmFuZ2VTdGF0ZS5zZWxlY3Rpbmc/KHI+PWUubWluRGF0ZT9hLmVtaXQoXCJwaWNrXCIse21pbkRhdGU6ZS5taW5EYXRlLG1heERhdGU6cn0pOmEuZW1pdChcInBpY2tcIix7bWluRGF0ZTpyLG1heERhdGU6ZS5taW5EYXRlfSksYS5lbWl0KFwic2VsZWN0XCIsITEpKTooYS5lbWl0KFwicGlja1wiLHttaW5EYXRlOnIsbWF4RGF0ZTpudWxsfSksYS5lbWl0KFwic2VsZWN0XCIsITApKTtlbHNlIGlmKFwiZGF5XCI9PT1lLnNlbGVjdGlvbk1vZGUpYS5lbWl0KFwicGlja1wiLHIpO2Vsc2UgaWYoXCJ3ZWVrXCI9PT1lLnNlbGVjdGlvbk1vZGUpe2NvbnN0IGU9ci53ZWVrKCksdD1yLnllYXIoKStcIndcIitlO2EuZW1pdChcInBpY2tcIix7eWVhcjpyLnllYXIoKSx3ZWVrOmUsdmFsdWU6dCxkYXRlOnJ9KX1lbHNlIGlmKFwiZGF0ZXNcIj09PWUuc2VsZWN0aW9uTW9kZSl7Y29uc3QgdD1pLnNlbGVjdGVkP0hlKGUucGFyc2VkVmFsdWUpLmZpbHRlcigoZT0+ZS52YWx1ZU9mKCkhPT1yLnZhbHVlT2YoKSkpOkhlKGUucGFyc2VkVmFsdWUpLmNvbmNhdChbcl0pO2EuZW1pdChcInBpY2tcIix0KX19fX19KTtjb25zdCB2bz17a2V5OjB9O2hvLnJlbmRlcj1mdW5jdGlvbihlLHQsbCxvLGkscil7cmV0dXJuIGEoKSxuKFwidGFibGVcIix7Y2VsbHNwYWNpbmc6XCIwXCIsY2VsbHBhZGRpbmc6XCIwXCIsY2xhc3M6W1wiZWwtZGF0ZS10YWJsZVwiLHtcImlzLXdlZWstbW9kZVwiOlwid2Vla1wiPT09ZS5zZWxlY3Rpb25Nb2RlfV0sb25DbGljazp0WzFdfHwodFsxXT0oLi4udCk9PmUuaGFuZGxlQ2xpY2soLi4udCkpLG9uTW91c2Vtb3ZlOnRbMl18fCh0WzJdPSguLi50KT0+ZS5oYW5kbGVNb3VzZU1vdmUoLi4udCkpfSxbcyhcInRib2R5XCIsbnVsbCxbcyhcInRyXCIsbnVsbCxbZS5zaG93V2Vla051bWJlcj8oYSgpLG4oXCJ0aFwiLHZvLHAoZS50KFwiZWwuZGF0ZXBpY2tlci53ZWVrXCIpKSwxKSk6dShcInYtaWZcIiwhMCksKGEoITApLG4oRSxudWxsLEgoZS5XRUVLUywoKHQsbCk9PihhKCksbihcInRoXCIse2tleTpsfSxwKGUudChcImVsLmRhdGVwaWNrZXIud2Vla3MuXCIrdCkpLDEpKSkpLDEyOCkpXSksKGEoITApLG4oRSxudWxsLEgoZS5yb3dzLCgodCxsKT0+KGEoKSxuKFwidHJcIix7a2V5OmwsY2xhc3M6W1wiZWwtZGF0ZS10YWJsZV9fcm93XCIse2N1cnJlbnQ6ZS5pc1dlZWtBY3RpdmUodFsxXSl9XX0sWyhhKCEwKSxuKEUsbnVsbCxIKHQsKCh0LGwpPT4oYSgpLG4oXCJ0ZFwiLHtrZXk6bCxjbGFzczplLmdldENlbGxDbGFzc2VzKHQpfSxbcyhcImRpdlwiLG51bGwsW3MoXCJzcGFuXCIsbnVsbCxwKHQudGV4dCksMSldKV0sMikpKSksMTI4KSldLDIpKSkpLDEyOCkpXSldLDM0KX0saG8uX19maWxlPVwicGFja2FnZXMvZGF0ZS1waWNrZXIvc3JjL2RhdGUtcGlja2VyLWNvbS9iYXNpYy1kYXRlLXRhYmxlLnZ1ZVwiO3ZhciBtbz1lKHtwcm9wczp7ZGlzYWJsZWREYXRlOnt0eXBlOkZ1bmN0aW9ufSxzZWxlY3Rpb25Nb2RlOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwibW9udGhcIn0sbWluRGF0ZTp7dHlwZTpPYmplY3R9LG1heERhdGU6e3R5cGU6T2JqZWN0fSxkYXRlOnt0eXBlOk9iamVjdH0scGFyc2VkVmFsdWU6e3R5cGU6T2JqZWN0fSxyYW5nZVN0YXRlOnt0eXBlOk9iamVjdCxkZWZhdWx0OigpPT4oe2VuZERhdGU6bnVsbCxzZWxlY3Rpbmc6ITF9KX19LGVtaXRzOltcImNoYW5nZXJhbmdlXCIsXCJwaWNrXCIsXCJzZWxlY3RcIl0sc2V0dXAoZSxhKXtjb25zdCBuPXQoZS5kYXRlLmxvY2FsZShcImVuXCIpLmxvY2FsZURhdGEoKS5tb250aHNTaG9ydCgpLm1hcCgoZT0+ZS50b0xvd2VyQ2FzZSgpKSkpLG89dChbW10sW10sW11dKSxpPXQobnVsbCkscj10KG51bGwpLHM9bCgoKCk9Pntjb25zdCB0PW8udmFsdWUsbD1zZSgpLnN0YXJ0T2YoXCJtb250aFwiKTtmb3IobGV0IGE9MDthPDM7YSsrKXtjb25zdCBuPXRbYV07Zm9yKGxldCB0PTA7dDw0O3QrKyl7bGV0IG89blt0XTtvfHwobz17cm93OmEsY29sdW1uOnQsdHlwZTpcIm5vcm1hbFwiLGluUmFuZ2U6ITEsc3RhcnQ6ITEsZW5kOiExfSksby50eXBlPVwibm9ybWFsXCI7Y29uc3QgaT00KmErdCxyPWUuZGF0ZS5zdGFydE9mKFwieWVhclwiKS5tb250aChpKSxzPWUucmFuZ2VTdGF0ZS5lbmREYXRlfHxlLm1heERhdGV8fGUucmFuZ2VTdGF0ZS5zZWxlY3RpbmcmJmUubWluRGF0ZTtvLmluUmFuZ2U9ZS5taW5EYXRlJiZyLmlzU2FtZU9yQWZ0ZXIoZS5taW5EYXRlLFwibW9udGhcIikmJnMmJnIuaXNTYW1lT3JCZWZvcmUocyxcIm1vbnRoXCIpLG8uc3RhcnQ9ZS5taW5EYXRlJiZyLmlzU2FtZShlLm1pbkRhdGUsXCJtb250aFwiKSxvLmVuZD1zJiZyLmlzU2FtZShzLFwibW9udGhcIik7bC5pc1NhbWUocikmJihvLnR5cGU9XCJ0b2RheVwiKSxvLnRleHQ9aTtsZXQgdT1yLnRvRGF0ZSgpO28uZGlzYWJsZWQ9ZS5kaXNhYmxlZERhdGUmJmUuZGlzYWJsZWREYXRlKHUpLG5bdF09b319cmV0dXJuIHR9KSk7cmV0dXJue2hhbmRsZU1vdXNlTW92ZTp0PT57aWYoIWUucmFuZ2VTdGF0ZS5zZWxlY3RpbmcpcmV0dXJuO2xldCBsPXQudGFyZ2V0O2lmKFwiQVwiPT09bC50YWdOYW1lJiYobD1sLnBhcmVudE5vZGUucGFyZW50Tm9kZSksXCJESVZcIj09PWwudGFnTmFtZSYmKGw9bC5wYXJlbnROb2RlKSxcIlREXCIhPT1sLnRhZ05hbWUpcmV0dXJuO2NvbnN0IG49bC5wYXJlbnROb2RlLnJvd0luZGV4LG89bC5jZWxsSW5kZXg7cy52YWx1ZVtuXVtvXS5kaXNhYmxlZHx8bj09PWkudmFsdWUmJm89PT1yLnZhbHVlfHwoaS52YWx1ZT1uLHIudmFsdWU9byxhLmVtaXQoXCJjaGFuZ2VyYW5nZVwiLHtzZWxlY3Rpbmc6ITAsZW5kRGF0ZTplLmRhdGUuc3RhcnRPZihcInllYXJcIikubW9udGgoNCpuK28pfSkpfSxoYW5kbGVNb250aFRhYmxlQ2xpY2s6dD0+e2xldCBsPXQudGFyZ2V0O2lmKFwiQVwiPT09bC50YWdOYW1lJiYobD1sLnBhcmVudE5vZGUucGFyZW50Tm9kZSksXCJESVZcIj09PWwudGFnTmFtZSYmKGw9bC5wYXJlbnROb2RlKSxcIlREXCIhPT1sLnRhZ05hbWUpcmV0dXJuO2lmKG50KGwsXCJkaXNhYmxlZFwiKSlyZXR1cm47Y29uc3Qgbj1sLmNlbGxJbmRleCxvPTQqbC5wYXJlbnROb2RlLnJvd0luZGV4K24saT1lLmRhdGUuc3RhcnRPZihcInllYXJcIikubW9udGgobyk7XCJyYW5nZVwiPT09ZS5zZWxlY3Rpb25Nb2RlP2UucmFuZ2VTdGF0ZS5zZWxlY3Rpbmc/KGk+PWUubWluRGF0ZT9hLmVtaXQoXCJwaWNrXCIse21pbkRhdGU6ZS5taW5EYXRlLG1heERhdGU6aX0pOmEuZW1pdChcInBpY2tcIix7bWluRGF0ZTppLG1heERhdGU6ZS5taW5EYXRlfSksYS5lbWl0KFwic2VsZWN0XCIsITEpKTooYS5lbWl0KFwicGlja1wiLHttaW5EYXRlOmksbWF4RGF0ZTpudWxsfSksYS5lbWl0KFwic2VsZWN0XCIsITApKTphLmVtaXQoXCJwaWNrXCIsbyl9LHJvd3M6cyxnZXRDZWxsU3R5bGU6dD0+e2NvbnN0IGw9e30sYT1lLmRhdGUueWVhcigpLG49bmV3IERhdGUsbz10LnRleHQ7cmV0dXJuIGwuZGlzYWJsZWQ9ISFlLmRpc2FibGVkRGF0ZSYmKChlLHQpPT57Y29uc3QgbD1zZSgpLnN0YXJ0T2YoXCJtb250aFwiKS5tb250aCh0KS55ZWFyKGUpLGE9bC5kYXlzSW5Nb250aCgpO3JldHVybiBDYShhKS5tYXAoKGU9PmwuYWRkKGUsXCJkYXlcIikudG9EYXRlKCkpKX0pKGEsbykuZXZlcnkoZS5kaXNhYmxlZERhdGUpLGwuY3VycmVudD1IZShlLnBhcnNlZFZhbHVlKS5maW5kSW5kZXgoKGU9PmUueWVhcigpPT09YSYmZS5tb250aCgpPT09bykpPj0wLGwudG9kYXk9bi5nZXRGdWxsWWVhcigpPT09YSYmbi5nZXRNb250aCgpPT09byx0LmluUmFuZ2UmJihsW1wiaW4tcmFuZ2VcIl09ITAsdC5zdGFydCYmKGxbXCJzdGFydC1kYXRlXCJdPSEwKSx0LmVuZCYmKGxbXCJlbmQtZGF0ZVwiXT0hMCkpLGx9LHQ6cWwsbW9udGhzOm59fX0pO2NvbnN0IGZvPXtjbGFzczpcImNlbGxcIn07bW8ucmVuZGVyPWZ1bmN0aW9uKGUsdCxsLG8saSxyKXtyZXR1cm4gYSgpLG4oXCJ0YWJsZVwiLHtjbGFzczpcImVsLW1vbnRoLXRhYmxlXCIsb25DbGljazp0WzFdfHwodFsxXT0oLi4udCk9PmUuaGFuZGxlTW9udGhUYWJsZUNsaWNrKC4uLnQpKSxvbk1vdXNlbW92ZTp0WzJdfHwodFsyXT0oLi4udCk9PmUuaGFuZGxlTW91c2VNb3ZlKC4uLnQpKX0sW3MoXCJ0Ym9keVwiLG51bGwsWyhhKCEwKSxuKEUsbnVsbCxIKGUucm93cywoKHQsbCk9PihhKCksbihcInRyXCIse2tleTpsfSxbKGEoITApLG4oRSxudWxsLEgodCwoKHQsbCk9PihhKCksbihcInRkXCIse2tleTpsLGNsYXNzOmUuZ2V0Q2VsbFN0eWxlKHQpfSxbcyhcImRpdlwiLG51bGwsW3MoXCJhXCIsZm8scChlLnQoXCJlbC5kYXRlcGlja2VyLm1vbnRocy5cIitlLm1vbnRoc1t0LnRleHRdKSksMSldKV0sMikpKSksMTI4KSldKSkpKSwxMjgpKV0pXSwzMil9LG1vLl9fZmlsZT1cInBhY2thZ2VzL2RhdGUtcGlja2VyL3NyYy9kYXRlLXBpY2tlci1jb20vYmFzaWMtbW9udGgtdGFibGUudnVlXCI7dmFyIGdvPWUoe3Byb3BzOntkaXNhYmxlZERhdGU6e3R5cGU6RnVuY3Rpb259LHBhcnNlZFZhbHVlOnt0eXBlOk9iamVjdH0sZGF0ZTp7dHlwZTpPYmplY3R9fSxlbWl0czpbXCJwaWNrXCJdLHNldHVwOihlLHQpPT4oe3N0YXJ0WWVhcjpsKCgoKT0+MTAqTWF0aC5mbG9vcihlLmRhdGUueWVhcigpLzEwKSkpLGdldENlbGxTdHlsZTp0PT57Y29uc3QgbD17fSxhPXNlKCk7cmV0dXJuIGwuZGlzYWJsZWQ9ISFlLmRpc2FibGVkRGF0ZSYmKGU9Pntjb25zdCB0PXNlKCkuc3RhcnRPZihcInllYXJcIiksbD1zZShlKS5pc0xlYXBZZWFyKCk/MzY2OjM2NTtyZXR1cm4gQ2EobCkubWFwKChlPT50LmFkZChlLFwiZGF5XCIpLnRvRGF0ZSgpKSl9KSh0KS5ldmVyeShlLmRpc2FibGVkRGF0ZSksbC5jdXJyZW50PUhlKGUucGFyc2VkVmFsdWUpLmZpbmRJbmRleCgoZT0+ZS55ZWFyKCk9PT10KSk+PTAsbC50b2RheT1hLnllYXIoKT09PXQsbH0saGFuZGxlWWVhclRhYmxlQ2xpY2s6ZT0+e2NvbnN0IGw9ZS50YXJnZXQ7aWYoXCJBXCI9PT1sLnRhZ05hbWUpe2lmKG50KGwucGFyZW50Tm9kZSxcImRpc2FibGVkXCIpKXJldHVybjtjb25zdCBlPWwudGV4dENvbnRlbnR8fGwuaW5uZXJUZXh0O3QuZW1pdChcInBpY2tcIixOdW1iZXIoZSkpfX19KX0pO2NvbnN0IGJvPXtjbGFzczpcImNlbGxcIn0seW89e2NsYXNzOlwiY2VsbFwifSxrbz17Y2xhc3M6XCJjZWxsXCJ9LENvPXtjbGFzczpcImNlbGxcIn0seG89e2NsYXNzOlwiY2VsbFwifSx3bz17Y2xhc3M6XCJjZWxsXCJ9LF9vPXtjbGFzczpcImNlbGxcIn0sU289e2NsYXNzOlwiY2VsbFwifSxFbz17Y2xhc3M6XCJjZWxsXCJ9LE1vPXtjbGFzczpcImNlbGxcIn0sVG89cyhcInRkXCIsbnVsbCxudWxsLC0xKSxObz1zKFwidGRcIixudWxsLG51bGwsLTEpO2dvLnJlbmRlcj1mdW5jdGlvbihlLHQsbCxvLGkscil7cmV0dXJuIGEoKSxuKFwidGFibGVcIix7Y2xhc3M6XCJlbC15ZWFyLXRhYmxlXCIsb25DbGljazp0WzFdfHwodFsxXT0oLi4udCk9PmUuaGFuZGxlWWVhclRhYmxlQ2xpY2soLi4udCkpfSxbcyhcInRib2R5XCIsbnVsbCxbcyhcInRyXCIsbnVsbCxbcyhcInRkXCIse2NsYXNzOltcImF2YWlsYWJsZVwiLGUuZ2V0Q2VsbFN0eWxlKGUuc3RhcnRZZWFyKzApXX0sW3MoXCJhXCIsYm8scChlLnN0YXJ0WWVhciksMSldLDIpLHMoXCJ0ZFwiLHtjbGFzczpbXCJhdmFpbGFibGVcIixlLmdldENlbGxTdHlsZShlLnN0YXJ0WWVhcisxKV19LFtzKFwiYVwiLHlvLHAoZS5zdGFydFllYXIrMSksMSldLDIpLHMoXCJ0ZFwiLHtjbGFzczpbXCJhdmFpbGFibGVcIixlLmdldENlbGxTdHlsZShlLnN0YXJ0WWVhcisyKV19LFtzKFwiYVwiLGtvLHAoZS5zdGFydFllYXIrMiksMSldLDIpLHMoXCJ0ZFwiLHtjbGFzczpbXCJhdmFpbGFibGVcIixlLmdldENlbGxTdHlsZShlLnN0YXJ0WWVhciszKV19LFtzKFwiYVwiLENvLHAoZS5zdGFydFllYXIrMyksMSldLDIpXSkscyhcInRyXCIsbnVsbCxbcyhcInRkXCIse2NsYXNzOltcImF2YWlsYWJsZVwiLGUuZ2V0Q2VsbFN0eWxlKGUuc3RhcnRZZWFyKzQpXX0sW3MoXCJhXCIseG8scChlLnN0YXJ0WWVhcis0KSwxKV0sMikscyhcInRkXCIse2NsYXNzOltcImF2YWlsYWJsZVwiLGUuZ2V0Q2VsbFN0eWxlKGUuc3RhcnRZZWFyKzUpXX0sW3MoXCJhXCIsd28scChlLnN0YXJ0WWVhcis1KSwxKV0sMikscyhcInRkXCIse2NsYXNzOltcImF2YWlsYWJsZVwiLGUuZ2V0Q2VsbFN0eWxlKGUuc3RhcnRZZWFyKzYpXX0sW3MoXCJhXCIsX28scChlLnN0YXJ0WWVhcis2KSwxKV0sMikscyhcInRkXCIse2NsYXNzOltcImF2YWlsYWJsZVwiLGUuZ2V0Q2VsbFN0eWxlKGUuc3RhcnRZZWFyKzcpXX0sW3MoXCJhXCIsU28scChlLnN0YXJ0WWVhcis3KSwxKV0sMildKSxzKFwidHJcIixudWxsLFtzKFwidGRcIix7Y2xhc3M6W1wiYXZhaWxhYmxlXCIsZS5nZXRDZWxsU3R5bGUoZS5zdGFydFllYXIrOCldfSxbcyhcImFcIixFbyxwKGUuc3RhcnRZZWFyKzgpLDEpXSwyKSxzKFwidGRcIix7Y2xhc3M6W1wiYXZhaWxhYmxlXCIsZS5nZXRDZWxsU3R5bGUoZS5zdGFydFllYXIrOSldfSxbcyhcImFcIixNbyxwKGUuc3RhcnRZZWFyKzkpLDEpXSwyKSxUbyxOb10pXSldKX0sZ28uX19maWxlPVwicGFja2FnZXMvZGF0ZS1waWNrZXIvc3JjL2RhdGUtcGlja2VyLWNvbS9iYXNpYy15ZWFyLXRhYmxlLnZ1ZVwiO3ZhciBEbz1lKHtjb21wb25lbnRzOntEYXRlVGFibGU6aG8sRWxJbnB1dDpXdCxFbEJ1dHRvbjokbCxUaW1lUGlja1BhbmVsOnNhLE1vbnRoVGFibGU6bW8sWWVhclRhYmxlOmdvfSxkaXJlY3RpdmVzOntjbGlja291dHNpZGU6TXR9LHByb3BzOnt2aXNpYmxlOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMX0scGFyc2VkVmFsdWU6e3R5cGU6W09iamVjdCxBcnJheV19LGZvcm1hdDp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIlwifSx0eXBlOnt0eXBlOlN0cmluZyxyZXF1aXJlZDohMH19LGVtaXRzOltcInBpY2tcIixcInNldC1waWNrZXItb3B0aW9uXCJdLHNldHVwKGUsYSl7Y29uc3Qgbj10KHNlKCkpLG89bCgoKCk9Pm4udmFsdWUubW9udGgoKSkpLGk9bCgoKCk9Pm4udmFsdWUueWVhcigpKSkscj10KFtdKSxzPXQobnVsbCksdT10KG51bGwpLGQ9dD0+IShyLnZhbHVlLmxlbmd0aD4wKXx8KHIudmFsdWUsZS5mb3JtYXQsITApLGM9ZT0+e2lmKGcudmFsdWUpcmV0dXJuIGUubWlsbGlzZWNvbmQoMCk7aWYoUCl7cmV0dXJuIHNlKFApLnllYXIoZS55ZWFyKCkpLm1vbnRoKGUubW9udGgoKSkuZGF0ZShlLmRhdGUoKSl9cmV0dXJuIGUuc3RhcnRPZihcImRheVwiKX0scD0oZSwuLi50KT0+e2lmKGUpaWYoQXJyYXkuaXNBcnJheShlKSl7Y29uc3QgbD1lLm1hcChjKTthLmVtaXQoXCJwaWNrXCIsbCwuLi50KX1lbHNlIGEuZW1pdChcInBpY2tcIixjKGUpLC4uLnQpO2Vsc2UgYS5lbWl0KFwicGlja1wiLGUsLi4udCk7cy52YWx1ZT1udWxsLHUudmFsdWU9bnVsbH0saD10KFwiZGF0ZVwiKSx2PWwoKCgpPT57Y29uc3QgZT1xbChcImVsLmRhdGVwaWNrZXIueWVhclwiKTtpZihcInllYXJcIj09PWgudmFsdWUpe2NvbnN0IHQ9MTAqTWF0aC5mbG9vcihpLnZhbHVlLzEwKTtyZXR1cm4gZT90K1wiIFwiK2UrXCIgLSBcIisodCs5KStcIiBcIitlOnQrXCIgLSBcIisodCs5KX1yZXR1cm4gaS52YWx1ZStcIiBcIitlfSkpLG09bCgoKCk9PltcIndlZWtcIixcIm1vbnRoXCIsXCJ5ZWFyXCIsXCJkYXRlc1wiXS5pbmNsdWRlcyhlLnR5cGUpP2UudHlwZTpcImRheVwiKSk7eSgoKCk9Pm0udmFsdWUpLChlPT57W1wibW9udGhcIixcInllYXJcIl0uaW5jbHVkZXMoZSk/aC52YWx1ZT1lOmgudmFsdWU9XCJkYXRlXCJ9KSx7aW1tZWRpYXRlOiEwfSk7Y29uc3QgZj1sKCgoKT0+ISFOLmxlbmd0aCkpLGc9bCgoKCk9PlwiZGF0ZXRpbWVcIj09PWUudHlwZXx8XCJkYXRldGltZXJhbmdlXCI9PT1lLnR5cGUpKSxiPWwoKCgpPT5nLnZhbHVlfHxcImRhdGVzXCI9PT1tLnZhbHVlKSksaz1sKCgoKT0+d2EoZS5mb3JtYXQpKSksQz1sKCgoKT0+eGEoZS5mb3JtYXQpKSkseD1sKCgoKT0+dS52YWx1ZT91LnZhbHVlOmUucGFyc2VkVmFsdWV8fFY/KGUucGFyc2VkVmFsdWV8fG4udmFsdWUpLmZvcm1hdChrLnZhbHVlKTp2b2lkIDApKSxfPWwoKCgpPT5zLnZhbHVlP3MudmFsdWU6ZS5wYXJzZWRWYWx1ZXx8Vj8oZS5wYXJzZWRWYWx1ZXx8bi52YWx1ZSkuZm9ybWF0KEMudmFsdWUpOnZvaWQgMCkpLFM9dCghMSksRT0oKT0+c2UoViksTT1lPT57Y29uc3QgdD17eWVhcjp7Mzg6LTQsNDA6NCwzNzotMSwzOToxLG9mZnNldDooZSx0KT0+ZS5zZXRGdWxsWWVhcihlLmdldEZ1bGxZZWFyKCkrdCl9LG1vbnRoOnszODotNCw0MDo0LDM3Oi0xLDM5OjEsb2Zmc2V0OihlLHQpPT5lLnNldE1vbnRoKGUuZ2V0TW9udGgoKSt0KX0sd2Vlazp7Mzg6LTEsNDA6MSwzNzotMSwzOToxLG9mZnNldDooZSx0KT0+ZS5zZXREYXRlKGUuZ2V0RGF0ZSgpKzcqdCl9LGRheTp7Mzg6LTcsNDA6NywzNzotMSwzOToxLG9mZnNldDooZSx0KT0+ZS5zZXREYXRlKGUuZ2V0RGF0ZSgpK3QpfX0sbD1uLnZhbHVlLnRvRGF0ZSgpO2Zvcig7TWF0aC5hYnMobi52YWx1ZS5kaWZmKGwsXCJ5ZWFyXCIsITApKTwxOyl7Y29uc3Qgbz10W20udmFsdWVdO2lmKG8ub2Zmc2V0KGwsb1tlXSksRCYmRChsKSljb250aW51ZTtjb25zdCBpPXNlKGwpO24udmFsdWU9aSxhLmVtaXQoXCJwaWNrXCIsaSwhMCk7YnJlYWt9fTthLmVtaXQoXCJzZXQtcGlja2VyLW9wdGlvblwiLFtcImlzVmFsaWRWYWx1ZVwiLGU9PmUuaXNWYWxpZCgpJiYoIUR8fCFEKGUudG9EYXRlKCkpKV0pLGEuZW1pdChcInNldC1waWNrZXItb3B0aW9uXCIsW1wiZm9ybWF0VG9TdHJpbmdcIix0PT5cImRhdGVzXCI9PT1tLnZhbHVlP3QubWFwKCh0PT50LmZvcm1hdChlLmZvcm1hdCkpKTp0LmZvcm1hdChlLmZvcm1hdCldKSxhLmVtaXQoXCJzZXQtcGlja2VyLW9wdGlvblwiLFtcInBhcnNlVXNlcklucHV0XCIsdD0+c2UodCxlLmZvcm1hdCldKSxhLmVtaXQoXCJzZXQtcGlja2VyLW9wdGlvblwiLFtcImhhbmRsZUtleWRvd25cIix0PT57Y29uc3R7Y29kZTpsLGtleUNvZGU6YX09dCxvPVtmdC51cCxmdC5kb3duLGZ0LmxlZnQsZnQucmlnaHRdO2UudmlzaWJsZSYmIVMudmFsdWUmJihvLmluY2x1ZGVzKGwpJiYoTShhKSx0LnN0b3BQcm9wYWdhdGlvbigpLHQucHJldmVudERlZmF1bHQoKSksbD09PWZ0LmVudGVyJiZudWxsPT09cy52YWx1ZSYmbnVsbD09PXUudmFsdWUmJnAobiwhMSkpfV0pO2NvbnN0IFQ9dyhcIkVQX1BJQ0tFUl9CQVNFXCIpLHtzaG9ydGN1dHM6TixkaXNhYmxlZERhdGU6RCxjZWxsQ2xhc3NOYW1lOk8sZGVmYXVsdFRpbWU6UCxkZWZhdWx0VmFsdWU6VixhcnJvd0NvbnRyb2w6SX09VC5wcm9wcztyZXR1cm4geSgoKCk9PmUucGFyc2VkVmFsdWUpLChlPT57aWYoZSl7aWYoXCJkYXRlc1wiPT09bS52YWx1ZSlyZXR1cm47aWYoQXJyYXkuaXNBcnJheShlKSlyZXR1cm47bi52YWx1ZT1lfWVsc2Ugbi52YWx1ZT1FKCl9KSx7aW1tZWRpYXRlOiEwfSkse2hhbmRsZVRpbWVQaWNrOih0LGwsYSk9Pntjb25zdCBvPWUucGFyc2VkVmFsdWU/ZS5wYXJzZWRWYWx1ZS5ob3VyKHQuaG91cigpKS5taW51dGUodC5taW51dGUoKSkuc2Vjb25kKHQuc2Vjb25kKCkpOnQ7bi52YWx1ZT1vLHAobi52YWx1ZSwhMCksYXx8KFMudmFsdWU9bCl9LGhhbmRsZVRpbWVQaWNrQ2xvc2U6KCk9PntTLnZhbHVlPSExfSxvblRpbWVQaWNrZXJJbnB1dEZvY3VzOigpPT57Uy52YWx1ZT0hMH0sdGltZVBpY2tlclZpc2libGU6Uyx2aXNpYmxlVGltZTp4LHZpc2libGVEYXRlOl8sc2hvd1RpbWU6ZyxjaGFuZ2VUb05vdzooKT0+e2NvbnN0IGU9c2UoKS50b0RhdGUoKTtEJiZEKGUpfHwhZCgpfHwobi52YWx1ZT1zZSgpLHAobi52YWx1ZSkpfSxvbkNvbmZpcm06KCk9PntpZihcImRhdGVzXCI9PT1tLnZhbHVlKXAoZS5wYXJzZWRWYWx1ZSk7ZWxzZXtsZXQgdD1lLnBhcnNlZFZhbHVlO2lmKCF0KXtjb25zdCBlPXNlKFApLGw9RSgpO3Q9ZS55ZWFyKGwueWVhcigpKS5tb250aChsLm1vbnRoKCkpLmRhdGUobC5kYXRlKCkpfW4udmFsdWU9dCxwKHQpfX0sZm9vdGVyVmlzaWJsZTpiLGhhbmRsZVllYXJQaWNrOmU9PntcInllYXJcIj09PW0udmFsdWU/KG4udmFsdWU9bi52YWx1ZS5zdGFydE9mKFwieWVhclwiKS55ZWFyKGUpLHAobi52YWx1ZSkpOihuLnZhbHVlPW4udmFsdWUueWVhcihlKSxoLnZhbHVlPVwibW9udGhcIil9LHNob3dNb250aFBpY2tlcjooKT0+e2gudmFsdWU9XCJtb250aFwifSxzaG93WWVhclBpY2tlcjooKT0+e2gudmFsdWU9XCJ5ZWFyXCJ9LGhhbmRsZU1vbnRoUGljazplPT57bi52YWx1ZT1uLnZhbHVlLnN0YXJ0T2YoXCJtb250aFwiKS5tb250aChlKSxcIm1vbnRoXCI9PT1tLnZhbHVlP3Aobi52YWx1ZSk6aC52YWx1ZT1cImRhdGVcIn0saGFzU2hvcnRjdXRzOmYsc2hvcnRjdXRzOk4sYXJyb3dDb250cm9sOkksZGlzYWJsZWREYXRlOkQsY2VsbENsYXNzTmFtZTpPLHNlbGVjdGlvbk1vZGU6bSxoYW5kbGVTaG9ydGN1dENsaWNrOmU9PntlLnZhbHVlP3Aoc2UoZS52YWx1ZSkpOmUub25DbGljayYmZS5vbkNsaWNrKGEpfSxwcmV2WWVhcl86KCk9PntcInllYXJcIj09PWgudmFsdWU/bi52YWx1ZT1uLnZhbHVlLnN1YnRyYWN0KDEwLFwieWVhclwiKTpuLnZhbHVlPW4udmFsdWUuc3VidHJhY3QoMSxcInllYXJcIil9LG5leHRZZWFyXzooKT0+e1wieWVhclwiPT09aC52YWx1ZT9uLnZhbHVlPW4udmFsdWUuYWRkKDEwLFwieWVhclwiKTpuLnZhbHVlPW4udmFsdWUuYWRkKDEsXCJ5ZWFyXCIpfSxwcmV2TW9udGhfOigpPT57bi52YWx1ZT1uLnZhbHVlLnN1YnRyYWN0KDEsXCJtb250aFwiKX0sbmV4dE1vbnRoXzooKT0+e24udmFsdWU9bi52YWx1ZS5hZGQoMSxcIm1vbnRoXCIpfSxpbm5lckRhdGU6bix0OnFsLHllYXJMYWJlbDp2LGN1cnJlbnRWaWV3OmgsbW9udGg6byxoYW5kbGVEYXRlUGljazp0PT57aWYoXCJkYXlcIj09PW0udmFsdWUpe2xldCBsPWUucGFyc2VkVmFsdWU/ZS5wYXJzZWRWYWx1ZS55ZWFyKHQueWVhcigpKS5tb250aCh0Lm1vbnRoKCkpLmRhdGUodC5kYXRlKCkpOnQ7ZCgpfHwobD1yLnZhbHVlWzBdWzBdLnllYXIodC55ZWFyKCkpLm1vbnRoKHQubW9udGgoKSkuZGF0ZSh0LmRhdGUoKSkpLG4udmFsdWU9bCxwKGwsZy52YWx1ZSl9ZWxzZVwid2Vla1wiPT09bS52YWx1ZT9wKHQuZGF0ZSk6XCJkYXRlc1wiPT09bS52YWx1ZSYmcCh0LCEwKX0saGFuZGxlVmlzaWJsZVRpbWVDaGFuZ2U6ZT0+e2NvbnN0IHQ9c2UoZSxrLnZhbHVlKTt0LmlzVmFsaWQoKSYmZCgpJiYobi52YWx1ZT10LnllYXIobi52YWx1ZS55ZWFyKCkpLm1vbnRoKG4udmFsdWUubW9udGgoKSkuZGF0ZShuLnZhbHVlLmRhdGUoKSksdS52YWx1ZT1udWxsLFMudmFsdWU9ITEscChuLnZhbHVlLCEwKSl9LGhhbmRsZVZpc2libGVEYXRlQ2hhbmdlOmU9Pntjb25zdCB0PXNlKGUsQy52YWx1ZSk7aWYodC5pc1ZhbGlkKCkpe2lmKEQmJkQodC50b0RhdGUoKSkpcmV0dXJuO24udmFsdWU9dC5ob3VyKG4udmFsdWUuaG91cigpKS5taW51dGUobi52YWx1ZS5taW51dGUoKSkuc2Vjb25kKG4udmFsdWUuc2Vjb25kKCkpLHMudmFsdWU9bnVsbCxwKG4udmFsdWUsITApfX0sdGltZUZvcm1hdDprLHVzZXJJbnB1dFRpbWU6dSx1c2VySW5wdXREYXRlOnN9fX0pO2NvbnN0IE9vPXtjbGFzczpcImVsLXBpY2tlci1wYW5lbF9fYm9keS13cmFwcGVyXCJ9LFBvPXtrZXk6MCxjbGFzczpcImVsLXBpY2tlci1wYW5lbF9fc2lkZWJhclwifSxWbz17Y2xhc3M6XCJlbC1waWNrZXItcGFuZWxfX2JvZHlcIn0sSW89e2tleTowLGNsYXNzOlwiZWwtZGF0ZS1waWNrZXJfX3RpbWUtaGVhZGVyXCJ9LEFvPXtjbGFzczpcImVsLWRhdGUtcGlja2VyX19lZGl0b3Itd3JhcFwifSxCbz17Y2xhc3M6XCJlbC1kYXRlLXBpY2tlcl9fZWRpdG9yLXdyYXBcIn0sTG89e2NsYXNzOlwiZWwtcGlja2VyLXBhbmVsX19jb250ZW50XCJ9LHpvPXtjbGFzczpcImVsLXBpY2tlci1wYW5lbF9fZm9vdGVyXCJ9O0RvLnJlbmRlcj1mdW5jdGlvbihlLHQsbCxvLHYsbSl7Y29uc3QgZj1QKFwiZWwtaW5wdXRcIiksZz1QKFwidGltZS1waWNrLXBhbmVsXCIpLGI9UChcImRhdGUtdGFibGVcIikseT1QKFwieWVhci10YWJsZVwiKSxrPVAoXCJtb250aC10YWJsZVwiKSxDPVAoXCJlbC1idXR0b25cIikseD1GKFwiY2xpY2tvdXRzaWRlXCIpO3JldHVybiBhKCksbihcImRpdlwiLHtjbGFzczpbXCJlbC1waWNrZXItcGFuZWwgZWwtZGF0ZS1waWNrZXJcIixbe1wiaGFzLXNpZGViYXJcIjplLiRzbG90cy5zaWRlYmFyfHxlLmhhc1Nob3J0Y3V0cyxcImhhcy10aW1lXCI6ZS5zaG93VGltZX1dXX0sW3MoXCJkaXZcIixPbyxbZChlLiRzbG90cyxcInNpZGViYXJcIix7Y2xhc3M6XCJlbC1waWNrZXItcGFuZWxfX3NpZGViYXJcIn0pLGUuaGFzU2hvcnRjdXRzPyhhKCksbihcImRpdlwiLFBvLFsoYSghMCksbihFLG51bGwsSChlLnNob3J0Y3V0cywoKHQsbCk9PihhKCksbihcImJ1dHRvblwiLHtrZXk6bCx0eXBlOlwiYnV0dG9uXCIsY2xhc3M6XCJlbC1waWNrZXItcGFuZWxfX3Nob3J0Y3V0XCIsb25DbGljazpsPT5lLmhhbmRsZVNob3J0Y3V0Q2xpY2sodCl9LHAodC50ZXh0KSw5LFtcIm9uQ2xpY2tcIl0pKSkpLDEyOCkpXSkpOnUoXCJ2LWlmXCIsITApLHMoXCJkaXZcIixWbyxbZS5zaG93VGltZT8oYSgpLG4oXCJkaXZcIixJbyxbcyhcInNwYW5cIixBbyxbcyhmLHtwbGFjZWhvbGRlcjplLnQoXCJlbC5kYXRlcGlja2VyLnNlbGVjdERhdGVcIiksXCJtb2RlbC12YWx1ZVwiOmUudmlzaWJsZURhdGUsc2l6ZTpcInNtYWxsXCIsb25JbnB1dDp0WzFdfHwodFsxXT10PT5lLnVzZXJJbnB1dERhdGU9dCksb25DaGFuZ2U6ZS5oYW5kbGVWaXNpYmxlRGF0ZUNoYW5nZX0sbnVsbCw4LFtcInBsYWNlaG9sZGVyXCIsXCJtb2RlbC12YWx1ZVwiLFwib25DaGFuZ2VcIl0pXSkscihzKFwic3BhblwiLEJvLFtzKGYse3BsYWNlaG9sZGVyOmUudChcImVsLmRhdGVwaWNrZXIuc2VsZWN0VGltZVwiKSxcIm1vZGVsLXZhbHVlXCI6ZS52aXNpYmxlVGltZSxzaXplOlwic21hbGxcIixvbkZvY3VzOmUub25UaW1lUGlja2VySW5wdXRGb2N1cyxvbklucHV0OnRbMl18fCh0WzJdPXQ9PmUudXNlcklucHV0VGltZT10KSxvbkNoYW5nZTplLmhhbmRsZVZpc2libGVUaW1lQ2hhbmdlfSxudWxsLDgsW1wicGxhY2Vob2xkZXJcIixcIm1vZGVsLXZhbHVlXCIsXCJvbkZvY3VzXCIsXCJvbkNoYW5nZVwiXSkscyhnLHt2aXNpYmxlOmUudGltZVBpY2tlclZpc2libGUsZm9ybWF0OmUudGltZUZvcm1hdCxcInRpbWUtYXJyb3ctY29udHJvbFwiOmUuYXJyb3dDb250cm9sLFwicGFyc2VkLXZhbHVlXCI6ZS5pbm5lckRhdGUsb25QaWNrOmUuaGFuZGxlVGltZVBpY2t9LG51bGwsOCxbXCJ2aXNpYmxlXCIsXCJmb3JtYXRcIixcInRpbWUtYXJyb3ctY29udHJvbFwiLFwicGFyc2VkLXZhbHVlXCIsXCJvblBpY2tcIl0pXSw1MTIpLFtbeCxlLmhhbmRsZVRpbWVQaWNrQ2xvc2VdXSldKSk6dShcInYtaWZcIiwhMCkscihzKFwiZGl2XCIse2NsYXNzOltcImVsLWRhdGUtcGlja2VyX19oZWFkZXJcIix7XCJlbC1kYXRlLXBpY2tlcl9faGVhZGVyLS1ib3JkZXJlZFwiOlwieWVhclwiPT09ZS5jdXJyZW50Vmlld3x8XCJtb250aFwiPT09ZS5jdXJyZW50Vmlld31dfSxbcyhcImJ1dHRvblwiLHt0eXBlOlwiYnV0dG9uXCIsXCJhcmlhLWxhYmVsXCI6ZS50KFwiZWwuZGF0ZXBpY2tlci5wcmV2WWVhclwiKSxjbGFzczpcImVsLXBpY2tlci1wYW5lbF9faWNvbi1idG4gZWwtZGF0ZS1waWNrZXJfX3ByZXYtYnRuIGVsLWljb24tZC1hcnJvdy1sZWZ0XCIsb25DbGljazp0WzNdfHwodFszXT0oLi4udCk9PmUucHJldlllYXJfKC4uLnQpKX0sbnVsbCw4LFtcImFyaWEtbGFiZWxcIl0pLHIocyhcImJ1dHRvblwiLHt0eXBlOlwiYnV0dG9uXCIsXCJhcmlhLWxhYmVsXCI6ZS50KFwiZWwuZGF0ZXBpY2tlci5wcmV2TW9udGhcIiksY2xhc3M6XCJlbC1waWNrZXItcGFuZWxfX2ljb24tYnRuIGVsLWRhdGUtcGlja2VyX19wcmV2LWJ0biBlbC1pY29uLWFycm93LWxlZnRcIixvbkNsaWNrOnRbNF18fCh0WzRdPSguLi50KT0+ZS5wcmV2TW9udGhfKC4uLnQpKX0sbnVsbCw4LFtcImFyaWEtbGFiZWxcIl0pLFtbaCxcImRhdGVcIj09PWUuY3VycmVudFZpZXddXSkscyhcInNwYW5cIix7cm9sZTpcImJ1dHRvblwiLGNsYXNzOlwiZWwtZGF0ZS1waWNrZXJfX2hlYWRlci1sYWJlbFwiLG9uQ2xpY2s6dFs1XXx8KHRbNV09KC4uLnQpPT5lLnNob3dZZWFyUGlja2VyKC4uLnQpKX0scChlLnllYXJMYWJlbCksMSkscihzKFwic3BhblwiLHtyb2xlOlwiYnV0dG9uXCIsY2xhc3M6W1wiZWwtZGF0ZS1waWNrZXJfX2hlYWRlci1sYWJlbFwiLHthY3RpdmU6XCJtb250aFwiPT09ZS5jdXJyZW50Vmlld31dLG9uQ2xpY2s6dFs2XXx8KHRbNl09KC4uLnQpPT5lLnNob3dNb250aFBpY2tlciguLi50KSl9LHAoZS50KFwiZWwuZGF0ZXBpY2tlci5tb250aFwiKyhlLm1vbnRoKzEpKSksMyksW1toLFwiZGF0ZVwiPT09ZS5jdXJyZW50Vmlld11dKSxzKFwiYnV0dG9uXCIse3R5cGU6XCJidXR0b25cIixcImFyaWEtbGFiZWxcIjplLnQoXCJlbC5kYXRlcGlja2VyLm5leHRZZWFyXCIpLGNsYXNzOlwiZWwtcGlja2VyLXBhbmVsX19pY29uLWJ0biBlbC1kYXRlLXBpY2tlcl9fbmV4dC1idG4gZWwtaWNvbi1kLWFycm93LXJpZ2h0XCIsb25DbGljazp0WzddfHwodFs3XT0oLi4udCk9PmUubmV4dFllYXJfKC4uLnQpKX0sbnVsbCw4LFtcImFyaWEtbGFiZWxcIl0pLHIocyhcImJ1dHRvblwiLHt0eXBlOlwiYnV0dG9uXCIsXCJhcmlhLWxhYmVsXCI6ZS50KFwiZWwuZGF0ZXBpY2tlci5uZXh0TW9udGhcIiksY2xhc3M6XCJlbC1waWNrZXItcGFuZWxfX2ljb24tYnRuIGVsLWRhdGUtcGlja2VyX19uZXh0LWJ0biBlbC1pY29uLWFycm93LXJpZ2h0XCIsb25DbGljazp0WzhdfHwodFs4XT0oLi4udCk9PmUubmV4dE1vbnRoXyguLi50KSl9LG51bGwsOCxbXCJhcmlhLWxhYmVsXCJdKSxbW2gsXCJkYXRlXCI9PT1lLmN1cnJlbnRWaWV3XV0pXSwyKSxbW2gsXCJ0aW1lXCIhPT1lLmN1cnJlbnRWaWV3XV0pLHMoXCJkaXZcIixMbyxbXCJkYXRlXCI9PT1lLmN1cnJlbnRWaWV3PyhhKCksbihiLHtrZXk6MCxcInNlbGVjdGlvbi1tb2RlXCI6ZS5zZWxlY3Rpb25Nb2RlLGRhdGU6ZS5pbm5lckRhdGUsXCJwYXJzZWQtdmFsdWVcIjplLnBhcnNlZFZhbHVlLFwiZGlzYWJsZWQtZGF0ZVwiOmUuZGlzYWJsZWREYXRlLG9uUGljazplLmhhbmRsZURhdGVQaWNrfSxudWxsLDgsW1wic2VsZWN0aW9uLW1vZGVcIixcImRhdGVcIixcInBhcnNlZC12YWx1ZVwiLFwiZGlzYWJsZWQtZGF0ZVwiLFwib25QaWNrXCJdKSk6dShcInYtaWZcIiwhMCksXCJ5ZWFyXCI9PT1lLmN1cnJlbnRWaWV3PyhhKCksbih5LHtrZXk6MSxkYXRlOmUuaW5uZXJEYXRlLFwiZGlzYWJsZWQtZGF0ZVwiOmUuZGlzYWJsZWREYXRlLFwicGFyc2VkLXZhbHVlXCI6ZS5wYXJzZWRWYWx1ZSxvblBpY2s6ZS5oYW5kbGVZZWFyUGlja30sbnVsbCw4LFtcImRhdGVcIixcImRpc2FibGVkLWRhdGVcIixcInBhcnNlZC12YWx1ZVwiLFwib25QaWNrXCJdKSk6dShcInYtaWZcIiwhMCksXCJtb250aFwiPT09ZS5jdXJyZW50Vmlldz8oYSgpLG4oayx7a2V5OjIsZGF0ZTplLmlubmVyRGF0ZSxcInBhcnNlZC12YWx1ZVwiOmUucGFyc2VkVmFsdWUsXCJkaXNhYmxlZC1kYXRlXCI6ZS5kaXNhYmxlZERhdGUsb25QaWNrOmUuaGFuZGxlTW9udGhQaWNrfSxudWxsLDgsW1wiZGF0ZVwiLFwicGFyc2VkLXZhbHVlXCIsXCJkaXNhYmxlZC1kYXRlXCIsXCJvblBpY2tcIl0pKTp1KFwidi1pZlwiLCEwKV0pXSldKSxyKHMoXCJkaXZcIix6byxbcihzKEMse3NpemU6XCJtaW5pXCIsdHlwZTpcInRleHRcIixjbGFzczpcImVsLXBpY2tlci1wYW5lbF9fbGluay1idG5cIixvbkNsaWNrOmUuY2hhbmdlVG9Ob3d9LHtkZWZhdWx0OmkoKCgpPT5bYyhwKGUudChcImVsLmRhdGVwaWNrZXIubm93XCIpKSwxKV0pKSxfOjF9LDgsW1wib25DbGlja1wiXSksW1toLFwiZGF0ZXNcIiE9PWUuc2VsZWN0aW9uTW9kZV1dKSxzKEMse3BsYWluOlwiXCIsc2l6ZTpcIm1pbmlcIixjbGFzczpcImVsLXBpY2tlci1wYW5lbF9fbGluay1idG5cIixvbkNsaWNrOmUub25Db25maXJtfSx7ZGVmYXVsdDppKCgoKT0+W2MocChlLnQoXCJlbC5kYXRlcGlja2VyLmNvbmZpcm1cIikpLDEpXSkpLF86MX0sOCxbXCJvbkNsaWNrXCJdKV0sNTEyKSxbW2gsZS5mb290ZXJWaXNpYmxlJiZcImRhdGVcIj09PWUuY3VycmVudFZpZXddXSldLDIpfSxEby5fX2ZpbGU9XCJwYWNrYWdlcy9kYXRlLXBpY2tlci9zcmMvZGF0ZS1waWNrZXItY29tL3BhbmVsLWRhdGUtcGljay52dWVcIjt2YXIgRm89ZSh7ZGlyZWN0aXZlczp7Y2xpY2tvdXRzaWRlOk10fSxjb21wb25lbnRzOntUaW1lUGlja1BhbmVsOnNhLERhdGVUYWJsZTpobyxFbElucHV0Old0LEVsQnV0dG9uOiRsfSxwcm9wczp7dW5saW5rUGFuZWxzOkJvb2xlYW4scGFyc2VkVmFsdWU6e3R5cGU6QXJyYXl9LHR5cGU6e3R5cGU6U3RyaW5nLHJlcXVpcmVkOiEwfX0sZW1pdHM6W1wicGlja1wiLFwic2V0LXBpY2tlci1vcHRpb25cIl0sc2V0dXAoZSxhKXtjb25zdCBuPXQoc2UoKSksbz10KHNlKCkuYWRkKDEsXCJtb250aFwiKSksaT10KG51bGwpLHI9dChudWxsKSxzPXQoe21pbjpudWxsLG1heDpudWxsfSksdT10KHttaW46bnVsbCxtYXg6bnVsbH0pLGQ9bCgoKCk9Pm4udmFsdWUueWVhcigpK1wiIFwiK3FsKFwiZWwuZGF0ZXBpY2tlci55ZWFyXCIpK1wiIFwiK3FsKFwiZWwuZGF0ZXBpY2tlci5tb250aFwiKyhuLnZhbHVlLm1vbnRoKCkrMSkpKSksYz1sKCgoKT0+by52YWx1ZS55ZWFyKCkrXCIgXCIrcWwoXCJlbC5kYXRlcGlja2VyLnllYXJcIikrXCIgXCIrcWwoXCJlbC5kYXRlcGlja2VyLm1vbnRoXCIrKG8udmFsdWUubW9udGgoKSsxKSkpKSxwPWwoKCgpPT5uLnZhbHVlLnllYXIoKSkpLGg9bCgoKCk9Pm4udmFsdWUubW9udGgoKSkpLHY9bCgoKCk9Pm8udmFsdWUueWVhcigpKSksbT1sKCgoKT0+by52YWx1ZS5tb250aCgpKSksZj1sKCgoKT0+ISFMLmxlbmd0aCkpLGc9bCgoKCk9Pm51bGwhPT1zLnZhbHVlLm1pbj9zLnZhbHVlLm1pbjppLnZhbHVlP2kudmFsdWUuZm9ybWF0KF8udmFsdWUpOlwiXCIpKSxiPWwoKCgpPT5udWxsIT09cy52YWx1ZS5tYXg/cy52YWx1ZS5tYXg6ci52YWx1ZXx8aS52YWx1ZT8oci52YWx1ZXx8aS52YWx1ZSkuZm9ybWF0KF8udmFsdWUpOlwiXCIpKSxrPWwoKCgpPT5udWxsIT09dS52YWx1ZS5taW4/dS52YWx1ZS5taW46aS52YWx1ZT9pLnZhbHVlLmZvcm1hdCh4LnZhbHVlKTpcIlwiKSksQz1sKCgoKT0+bnVsbCE9PXUudmFsdWUubWF4P3UudmFsdWUubWF4OnIudmFsdWV8fGkudmFsdWU/KHIudmFsdWV8fGkudmFsdWUpLmZvcm1hdCh4LnZhbHVlKTpcIlwiKSkseD1sKCgoKT0+d2EoJCkpKSxfPWwoKCgpPT54YSgkKSkpLFM9bCgoKCk9Pntjb25zdCB0PShoLnZhbHVlKzEpJTEyLGw9aC52YWx1ZSsxPj0xMj8xOjA7cmV0dXJuIGUudW5saW5rUGFuZWxzJiZuZXcgRGF0ZShwLnZhbHVlK2wsdCk8bmV3IERhdGUodi52YWx1ZSxtLnZhbHVlKX0pKSxFPWwoKCgpPT5lLnVubGlua1BhbmVscyYmMTIqdi52YWx1ZSttLnZhbHVlLSgxMipwLnZhbHVlK2gudmFsdWUrMSk+PTEyKSksTT1lPT5BcnJheS5pc0FycmF5KGUpJiZlJiZlWzBdJiZlWzFdJiZlWzBdLnZhbHVlT2YoKTw9ZVsxXS52YWx1ZU9mKCksVD10KHtlbmREYXRlOm51bGwsc2VsZWN0aW5nOiExfSksTj1sKCgoKT0+IShpLnZhbHVlJiZyLnZhbHVlJiYhVC52YWx1ZS5zZWxlY3RpbmcmJk0oW2kudmFsdWUsci52YWx1ZV0pKSkpLEQ9bCgoKCk9PlwiZGF0ZXRpbWVcIj09PWUudHlwZXx8XCJkYXRldGltZXJhbmdlXCI9PT1lLnR5cGUpKSxPPShlPSExKT0+e00oW2kudmFsdWUsci52YWx1ZV0pJiZhLmVtaXQoXCJwaWNrXCIsW2kudmFsdWUsci52YWx1ZV0sZSl9LFA9KGUsdCk9PntpZihlKXtpZihSKXtyZXR1cm4gc2UoUlt0XXx8UikueWVhcihlLnllYXIoKSkubW9udGgoZS5tb250aCgpKS5kYXRlKGUuZGF0ZSgpKX1yZXR1cm4gZX19LFY9dCghMSksST10KCExKSxBPSgpPT57bGV0IHQ7aWYoQXJyYXkuaXNBcnJheShIKSl7Y29uc3QgdD1zZShIWzBdKTtsZXQgbD1zZShIWzFdKTtyZXR1cm4gZS51bmxpbmtQYW5lbHN8fChsPXQuYWRkKDEsXCJtb250aFwiKSksW3QsbF19cmV0dXJuIHQ9SD9zZShIKTpzZSgpLFt0LHQuYWRkKDEsXCJtb250aFwiKV19O2EuZW1pdChcInNldC1waWNrZXItb3B0aW9uXCIsW1wiZm9ybWF0VG9TdHJpbmdcIixlPT5lLm1hcCgoZT0+ZS5mb3JtYXQoJCkpKV0pO2NvbnN0IEI9dyhcIkVQX1BJQ0tFUl9CQVNFXCIpLHtzaG9ydGN1dHM6TCxkaXNhYmxlZERhdGU6eixjZWxsQ2xhc3NOYW1lOkYsZm9ybWF0OiQsZGVmYXVsdFRpbWU6UixkZWZhdWx0VmFsdWU6SCxhcnJvd0NvbnRyb2w6V309Qi5wcm9wcztyZXR1cm4geSgoKCk9PmUucGFyc2VkVmFsdWUpLCh0PT57aWYodCYmMj09PXQubGVuZ3RoKWlmKGkudmFsdWU9dFswXSxyLnZhbHVlPXRbMV0sbi52YWx1ZT1pLnZhbHVlLGUudW5saW5rUGFuZWxzJiZyLnZhbHVlKXtjb25zdCBlPWkudmFsdWUueWVhcigpLHQ9aS52YWx1ZS5tb250aCgpLGw9ci52YWx1ZS55ZWFyKCksYT1yLnZhbHVlLm1vbnRoKCk7by52YWx1ZT1lPT09bCYmdD09PWE/ci52YWx1ZS5hZGQoMSxcIm1vbnRoXCIpOnIudmFsdWV9ZWxzZSBvLnZhbHVlPW4udmFsdWUuYWRkKDEsXCJtb250aFwiKTtlbHNle2NvbnN0IGU9QSgpO24udmFsdWU9ZVswXSxvLnZhbHVlPWVbMV19fSkse2ltbWVkaWF0ZTohMH0pLHtzaG9ydGN1dHM6TCxkaXNhYmxlZERhdGU6eixjZWxsQ2xhc3NOYW1lOkYsbWluVGltZVBpY2tlclZpc2libGU6VixtYXhUaW1lUGlja2VyVmlzaWJsZTpJLGhhbmRsZU1pblRpbWVDbG9zZTooKT0+e1YudmFsdWU9ITF9LGhhbmRsZU1heFRpbWVDbG9zZTooKT0+e0kudmFsdWU9ITF9LGhhbmRsZVNob3J0Y3V0Q2xpY2s6ZT0+e2UudmFsdWU/YS5lbWl0KFwicGlja1wiLFtzZShlLnZhbHVlWzBdKSxzZShlLnZhbHVlWzFdKV0pOmUub25DbGljayYmZS5vbkNsaWNrKGEpfSxyYW5nZVN0YXRlOlQsbWluRGF0ZTppLG1heERhdGU6cixoYW5kbGVSYW5nZVBpY2s6KGUsdD0hMCk9Pntjb25zdCBsPVAoZS5taW5EYXRlLDApLGE9UChlLm1heERhdGUsMSk7ci52YWx1ZT09PWEmJmkudmFsdWU9PT1sfHwoci52YWx1ZT1hLGkudmFsdWU9bCx0JiYhRC52YWx1ZSYmTygpKX0sb25TZWxlY3Q6ZT0+e1QudmFsdWUuc2VsZWN0aW5nPWUsZXx8KFQudmFsdWUuZW5kRGF0ZT1udWxsKX0saGFuZGxlQ2hhbmdlUmFuZ2U6ZT0+e1QudmFsdWU9ZX0sYnRuRGlzYWJsZWQ6TixlbmFibGVZZWFyQXJyb3c6RSxlbmFibGVNb250aEFycm93OlMscmlnaHRQcmV2TW9udGg6KCk9PntvLnZhbHVlPW8udmFsdWUuc3VidHJhY3QoMSxcIm1vbnRoXCIpfSxyaWdodFByZXZZZWFyOigpPT57by52YWx1ZT1vLnZhbHVlLnN1YnRyYWN0KDEsXCJ5ZWFyXCIpfSxyaWdodE5leHRNb250aDooKT0+e2UudW5saW5rUGFuZWxzP28udmFsdWU9by52YWx1ZS5hZGQoMSxcIm1vbnRoXCIpOihuLnZhbHVlPW4udmFsdWUuYWRkKDEsXCJtb250aFwiKSxvLnZhbHVlPW4udmFsdWUuYWRkKDEsXCJtb250aFwiKSl9LHJpZ2h0TmV4dFllYXI6KCk9PntlLnVubGlua1BhbmVscz9vLnZhbHVlPW8udmFsdWUuYWRkKDEsXCJ5ZWFyXCIpOihuLnZhbHVlPW4udmFsdWUuYWRkKDEsXCJ5ZWFyXCIpLG8udmFsdWU9bi52YWx1ZS5hZGQoMSxcIm1vbnRoXCIpKX0sbGVmdFByZXZNb250aDooKT0+e24udmFsdWU9bi52YWx1ZS5zdWJ0cmFjdCgxLFwibW9udGhcIiksZS51bmxpbmtQYW5lbHN8fChvLnZhbHVlPW4udmFsdWUuYWRkKDEsXCJtb250aFwiKSl9LGxlZnRQcmV2WWVhcjooKT0+e24udmFsdWU9bi52YWx1ZS5zdWJ0cmFjdCgxLFwieWVhclwiKSxlLnVubGlua1BhbmVsc3x8KG8udmFsdWU9bi52YWx1ZS5hZGQoMSxcIm1vbnRoXCIpKX0sbGVmdE5leHRNb250aDooKT0+e24udmFsdWU9bi52YWx1ZS5hZGQoMSxcIm1vbnRoXCIpfSxsZWZ0TmV4dFllYXI6KCk9PntuLnZhbHVlPW4udmFsdWUuYWRkKDEsXCJ5ZWFyXCIpfSxoYXNTaG9ydGN1dHM6ZixsZWZ0TGFiZWw6ZCxyaWdodExhYmVsOmMsbGVmdERhdGU6bixyaWdodERhdGU6byxzaG93VGltZTpELHQ6cWwsbWluVmlzaWJsZURhdGU6ZyxtYXhWaXNpYmxlRGF0ZTpiLG1pblZpc2libGVUaW1lOmssbWF4VmlzaWJsZVRpbWU6QyxhcnJvd0NvbnRyb2w6VyxoYW5kbGVEYXRlSW5wdXQ6KHQsbCk9PntzLnZhbHVlW2xdPXQ7Y29uc3QgYT1zZSh0LF8udmFsdWUpO2lmKGEuaXNWYWxpZCgpKXtpZih6JiZ6KGEudG9EYXRlKCkpKXJldHVybjtcIm1pblwiPT09bD8obi52YWx1ZT1hLGkudmFsdWU9KGkudmFsdWV8fG4udmFsdWUpLnllYXIoYS55ZWFyKCkpLm1vbnRoKGEubW9udGgoKSkuZGF0ZShhLmRhdGUoKSksZS51bmxpbmtQYW5lbHN8fChvLnZhbHVlPWEuYWRkKDEsXCJtb250aFwiKSxyLnZhbHVlPWkudmFsdWUuYWRkKDEsXCJtb250aFwiKSkpOihvLnZhbHVlPWEsci52YWx1ZT0oci52YWx1ZXx8by52YWx1ZSkueWVhcihhLnllYXIoKSkubW9udGgoYS5tb250aCgpKS5kYXRlKGEuZGF0ZSgpKSxlLnVubGlua1BhbmVsc3x8KG4udmFsdWU9YS5zdWJ0cmFjdCgxLFwibW9udGhcIiksaS52YWx1ZT1yLnZhbHVlLnN1YnRyYWN0KDEsXCJtb250aFwiKSkpfX0saGFuZGxlRGF0ZUNoYW5nZTooZSx0KT0+e3MudmFsdWVbdF09bnVsbH0saGFuZGxlVGltZUlucHV0OihlLHQpPT57dS52YWx1ZVt0XT1lO2NvbnN0IGw9c2UoZSx4LnZhbHVlKTtsLmlzVmFsaWQoKSYmKFwibWluXCI9PT10PyhWLnZhbHVlPSEwLGkudmFsdWU9KGkudmFsdWV8fG4udmFsdWUpLmhvdXIobC5ob3VyKCkpLm1pbnV0ZShsLm1pbnV0ZSgpKS5zZWNvbmQobC5zZWNvbmQoKSksci52YWx1ZSYmIXIudmFsdWUuaXNCZWZvcmUoaS52YWx1ZSl8fChyLnZhbHVlPWkudmFsdWUpKTooSS52YWx1ZT0hMCxyLnZhbHVlPShyLnZhbHVlfHxvLnZhbHVlKS5ob3VyKGwuaG91cigpKS5taW51dGUobC5taW51dGUoKSkuc2Vjb25kKGwuc2Vjb25kKCkpLG8udmFsdWU9ci52YWx1ZSxyLnZhbHVlJiZyLnZhbHVlLmlzQmVmb3JlKGkudmFsdWUpJiYoaS52YWx1ZT1yLnZhbHVlKSkpfSxoYW5kbGVUaW1lQ2hhbmdlOihlLHQpPT57dS52YWx1ZVt0XT1udWxsLFwibWluXCI9PT10PyhuLnZhbHVlPWkudmFsdWUsVi52YWx1ZT0hMSk6KG8udmFsdWU9ci52YWx1ZSxJLnZhbHVlPSExKX0saGFuZGxlTWluVGltZVBpY2s6KGUsdCxsKT0+e3UudmFsdWUubWlufHwoZSYmKG4udmFsdWU9ZSxpLnZhbHVlPShpLnZhbHVlfHxuLnZhbHVlKS5ob3VyKGUuaG91cigpKS5taW51dGUoZS5taW51dGUoKSkuc2Vjb25kKGUuc2Vjb25kKCkpKSxsfHwoVi52YWx1ZT10KSxyLnZhbHVlJiYhci52YWx1ZS5pc0JlZm9yZShpLnZhbHVlKXx8KHIudmFsdWU9aS52YWx1ZSkpfSxoYW5kbGVNYXhUaW1lUGljazooZSx0LGwpPT57dS52YWx1ZS5tYXh8fChlJiYoby52YWx1ZT1lLHIudmFsdWU9KHIudmFsdWV8fG8udmFsdWUpLmhvdXIoZS5ob3VyKCkpLm1pbnV0ZShlLm1pbnV0ZSgpKS5zZWNvbmQoZS5zZWNvbmQoKSkpLGx8fChJLnZhbHVlPXQpLHIudmFsdWUmJnIudmFsdWUuaXNCZWZvcmUoaS52YWx1ZSkmJihpLnZhbHVlPXIudmFsdWUpKX0saGFuZGxlQ2xlYXI6KCk9PntpLnZhbHVlPW51bGwsci52YWx1ZT1udWxsLG4udmFsdWU9QSgpWzBdLG8udmFsdWU9bi52YWx1ZS5hZGQoMSxcIm1vbnRoXCIpLGEuZW1pdChcInBpY2tcIixudWxsKX0saGFuZGxlQ29uZmlybTpPLHRpbWVGb3JtYXQ6eH19fSk7Y29uc3QgJG89e2NsYXNzOlwiZWwtcGlja2VyLXBhbmVsX19ib2R5LXdyYXBwZXJcIn0sUm89e2tleTowLGNsYXNzOlwiZWwtcGlja2VyLXBhbmVsX19zaWRlYmFyXCJ9LEhvPXtjbGFzczpcImVsLXBpY2tlci1wYW5lbF9fYm9keVwifSxXbz17a2V5OjAsY2xhc3M6XCJlbC1kYXRlLXJhbmdlLXBpY2tlcl9fdGltZS1oZWFkZXJcIn0sam89e2NsYXNzOlwiZWwtZGF0ZS1yYW5nZS1waWNrZXJfX2VkaXRvcnMtd3JhcFwifSxLbz17Y2xhc3M6XCJlbC1kYXRlLXJhbmdlLXBpY2tlcl9fdGltZS1waWNrZXItd3JhcFwifSxZbz17Y2xhc3M6XCJlbC1kYXRlLXJhbmdlLXBpY2tlcl9fdGltZS1waWNrZXItd3JhcFwifSxxbz1zKFwic3BhblwiLHtjbGFzczpcImVsLWljb24tYXJyb3ctcmlnaHRcIn0sbnVsbCwtMSksVW89e2NsYXNzOlwiZWwtZGF0ZS1yYW5nZS1waWNrZXJfX2VkaXRvcnMtd3JhcCBpcy1yaWdodFwifSxHbz17Y2xhc3M6XCJlbC1kYXRlLXJhbmdlLXBpY2tlcl9fdGltZS1waWNrZXItd3JhcFwifSxYbz17Y2xhc3M6XCJlbC1kYXRlLXJhbmdlLXBpY2tlcl9fdGltZS1waWNrZXItd3JhcFwifSxRbz17Y2xhc3M6XCJlbC1waWNrZXItcGFuZWxfX2NvbnRlbnQgZWwtZGF0ZS1yYW5nZS1waWNrZXJfX2NvbnRlbnQgaXMtbGVmdFwifSxabz17Y2xhc3M6XCJlbC1kYXRlLXJhbmdlLXBpY2tlcl9faGVhZGVyXCJ9LEpvPXtjbGFzczpcImVsLXBpY2tlci1wYW5lbF9fY29udGVudCBlbC1kYXRlLXJhbmdlLXBpY2tlcl9fY29udGVudCBpcy1yaWdodFwifSxlaT17Y2xhc3M6XCJlbC1kYXRlLXJhbmdlLXBpY2tlcl9faGVhZGVyXCJ9LHRpPXtrZXk6MCxjbGFzczpcImVsLXBpY2tlci1wYW5lbF9fZm9vdGVyXCJ9O0ZvLnJlbmRlcj1mdW5jdGlvbihlLHQsbCxvLGgsdil7Y29uc3QgbT1QKFwiZWwtaW5wdXRcIiksZj1QKFwidGltZS1waWNrLXBhbmVsXCIpLGc9UChcImRhdGUtdGFibGVcIiksYj1QKFwiZWwtYnV0dG9uXCIpLHk9RihcImNsaWNrb3V0c2lkZVwiKTtyZXR1cm4gYSgpLG4oXCJkaXZcIix7Y2xhc3M6W1wiZWwtcGlja2VyLXBhbmVsIGVsLWRhdGUtcmFuZ2UtcGlja2VyXCIsW3tcImhhcy1zaWRlYmFyXCI6ZS4kc2xvdHMuc2lkZWJhcnx8ZS5oYXNTaG9ydGN1dHMsXCJoYXMtdGltZVwiOmUuc2hvd1RpbWV9XV19LFtzKFwiZGl2XCIsJG8sW2QoZS4kc2xvdHMsXCJzaWRlYmFyXCIse2NsYXNzOlwiZWwtcGlja2VyLXBhbmVsX19zaWRlYmFyXCJ9KSxlLmhhc1Nob3J0Y3V0cz8oYSgpLG4oXCJkaXZcIixSbyxbKGEoITApLG4oRSxudWxsLEgoZS5zaG9ydGN1dHMsKCh0LGwpPT4oYSgpLG4oXCJidXR0b25cIix7a2V5OmwsdHlwZTpcImJ1dHRvblwiLGNsYXNzOlwiZWwtcGlja2VyLXBhbmVsX19zaG9ydGN1dFwiLG9uQ2xpY2s6bD0+ZS5oYW5kbGVTaG9ydGN1dENsaWNrKHQpfSxwKHQudGV4dCksOSxbXCJvbkNsaWNrXCJdKSkpKSwxMjgpKV0pKTp1KFwidi1pZlwiLCEwKSxzKFwiZGl2XCIsSG8sW2Uuc2hvd1RpbWU/KGEoKSxuKFwiZGl2XCIsV28sW3MoXCJzcGFuXCIsam8sW3MoXCJzcGFuXCIsS28sW3MobSx7c2l6ZTpcInNtYWxsXCIsZGlzYWJsZWQ6ZS5yYW5nZVN0YXRlLnNlbGVjdGluZyxwbGFjZWhvbGRlcjplLnQoXCJlbC5kYXRlcGlja2VyLnN0YXJ0RGF0ZVwiKSxjbGFzczpcImVsLWRhdGUtcmFuZ2UtcGlja2VyX19lZGl0b3JcIixcIm1vZGVsLXZhbHVlXCI6ZS5taW5WaXNpYmxlRGF0ZSxvbklucHV0OnRbMV18fCh0WzFdPXQ9PmUuaGFuZGxlRGF0ZUlucHV0KHQsXCJtaW5cIikpLG9uQ2hhbmdlOnRbMl18fCh0WzJdPXQ9PmUuaGFuZGxlRGF0ZUNoYW5nZSh0LFwibWluXCIpKX0sbnVsbCw4LFtcImRpc2FibGVkXCIsXCJwbGFjZWhvbGRlclwiLFwibW9kZWwtdmFsdWVcIl0pXSkscihzKFwic3BhblwiLFlvLFtzKG0se3NpemU6XCJzbWFsbFwiLGNsYXNzOlwiZWwtZGF0ZS1yYW5nZS1waWNrZXJfX2VkaXRvclwiLGRpc2FibGVkOmUucmFuZ2VTdGF0ZS5zZWxlY3RpbmcscGxhY2Vob2xkZXI6ZS50KFwiZWwuZGF0ZXBpY2tlci5zdGFydFRpbWVcIiksXCJtb2RlbC12YWx1ZVwiOmUubWluVmlzaWJsZVRpbWUsb25Gb2N1czp0WzNdfHwodFszXT10PT5lLm1pblRpbWVQaWNrZXJWaXNpYmxlPSEwKSxvbklucHV0OnRbNF18fCh0WzRdPXQ9PmUuaGFuZGxlVGltZUlucHV0KHQsXCJtaW5cIikpLG9uQ2hhbmdlOnRbNV18fCh0WzVdPXQ9PmUuaGFuZGxlVGltZUNoYW5nZSh0LFwibWluXCIpKX0sbnVsbCw4LFtcImRpc2FibGVkXCIsXCJwbGFjZWhvbGRlclwiLFwibW9kZWwtdmFsdWVcIl0pLHMoZix7dmlzaWJsZTplLm1pblRpbWVQaWNrZXJWaXNpYmxlLGZvcm1hdDplLnRpbWVGb3JtYXQsXCJkYXRldGltZS1yb2xlXCI6XCJzdGFydFwiLFwidGltZS1hcnJvdy1jb250cm9sXCI6ZS5hcnJvd0NvbnRyb2wsXCJwYXJzZWQtdmFsdWVcIjplLmxlZnREYXRlLG9uUGljazplLmhhbmRsZU1pblRpbWVQaWNrfSxudWxsLDgsW1widmlzaWJsZVwiLFwiZm9ybWF0XCIsXCJ0aW1lLWFycm93LWNvbnRyb2xcIixcInBhcnNlZC12YWx1ZVwiLFwib25QaWNrXCJdKV0sNTEyKSxbW3ksZS5oYW5kbGVNaW5UaW1lQ2xvc2VdXSldKSxxbyxzKFwic3BhblwiLFVvLFtzKFwic3BhblwiLEdvLFtzKG0se3NpemU6XCJzbWFsbFwiLGNsYXNzOlwiZWwtZGF0ZS1yYW5nZS1waWNrZXJfX2VkaXRvclwiLGRpc2FibGVkOmUucmFuZ2VTdGF0ZS5zZWxlY3RpbmcscGxhY2Vob2xkZXI6ZS50KFwiZWwuZGF0ZXBpY2tlci5lbmREYXRlXCIpLFwibW9kZWwtdmFsdWVcIjplLm1heFZpc2libGVEYXRlLHJlYWRvbmx5OiFlLm1pbkRhdGUsb25JbnB1dDp0WzZdfHwodFs2XT10PT5lLmhhbmRsZURhdGVJbnB1dCh0LFwibWF4XCIpKSxvbkNoYW5nZTp0WzddfHwodFs3XT10PT5lLmhhbmRsZURhdGVDaGFuZ2UodCxcIm1heFwiKSl9LG51bGwsOCxbXCJkaXNhYmxlZFwiLFwicGxhY2Vob2xkZXJcIixcIm1vZGVsLXZhbHVlXCIsXCJyZWFkb25seVwiXSldKSxyKHMoXCJzcGFuXCIsWG8sW3MobSx7c2l6ZTpcInNtYWxsXCIsY2xhc3M6XCJlbC1kYXRlLXJhbmdlLXBpY2tlcl9fZWRpdG9yXCIsZGlzYWJsZWQ6ZS5yYW5nZVN0YXRlLnNlbGVjdGluZyxwbGFjZWhvbGRlcjplLnQoXCJlbC5kYXRlcGlja2VyLmVuZFRpbWVcIiksXCJtb2RlbC12YWx1ZVwiOmUubWF4VmlzaWJsZVRpbWUscmVhZG9ubHk6IWUubWluRGF0ZSxvbkZvY3VzOnRbOF18fCh0WzhdPXQ9PmUubWluRGF0ZSYmKGUubWF4VGltZVBpY2tlclZpc2libGU9ITApKSxvbklucHV0OnRbOV18fCh0WzldPXQ9PmUuaGFuZGxlVGltZUlucHV0KHQsXCJtYXhcIikpLG9uQ2hhbmdlOnRbMTBdfHwodFsxMF09dD0+ZS5oYW5kbGVUaW1lQ2hhbmdlKHQsXCJtYXhcIikpfSxudWxsLDgsW1wiZGlzYWJsZWRcIixcInBsYWNlaG9sZGVyXCIsXCJtb2RlbC12YWx1ZVwiLFwicmVhZG9ubHlcIl0pLHMoZix7XCJkYXRldGltZS1yb2xlXCI6XCJlbmRcIix2aXNpYmxlOmUubWF4VGltZVBpY2tlclZpc2libGUsZm9ybWF0OmUudGltZUZvcm1hdCxcInRpbWUtYXJyb3ctY29udHJvbFwiOmUuYXJyb3dDb250cm9sLFwicGFyc2VkLXZhbHVlXCI6ZS5yaWdodERhdGUsb25QaWNrOmUuaGFuZGxlTWF4VGltZVBpY2t9LG51bGwsOCxbXCJ2aXNpYmxlXCIsXCJmb3JtYXRcIixcInRpbWUtYXJyb3ctY29udHJvbFwiLFwicGFyc2VkLXZhbHVlXCIsXCJvblBpY2tcIl0pXSw1MTIpLFtbeSxlLmhhbmRsZU1heFRpbWVDbG9zZV1dKV0pXSkpOnUoXCJ2LWlmXCIsITApLHMoXCJkaXZcIixRbyxbcyhcImRpdlwiLFpvLFtzKFwiYnV0dG9uXCIse3R5cGU6XCJidXR0b25cIixjbGFzczpcImVsLXBpY2tlci1wYW5lbF9faWNvbi1idG4gZWwtaWNvbi1kLWFycm93LWxlZnRcIixvbkNsaWNrOnRbMTFdfHwodFsxMV09KC4uLnQpPT5lLmxlZnRQcmV2WWVhciguLi50KSl9KSxzKFwiYnV0dG9uXCIse3R5cGU6XCJidXR0b25cIixjbGFzczpcImVsLXBpY2tlci1wYW5lbF9faWNvbi1idG4gZWwtaWNvbi1hcnJvdy1sZWZ0XCIsb25DbGljazp0WzEyXXx8KHRbMTJdPSguLi50KT0+ZS5sZWZ0UHJldk1vbnRoKC4uLnQpKX0pLGUudW5saW5rUGFuZWxzPyhhKCksbihcImJ1dHRvblwiLHtrZXk6MCx0eXBlOlwiYnV0dG9uXCIsZGlzYWJsZWQ6IWUuZW5hYmxlWWVhckFycm93LGNsYXNzOlt7XCJpcy1kaXNhYmxlZFwiOiFlLmVuYWJsZVllYXJBcnJvd30sXCJlbC1waWNrZXItcGFuZWxfX2ljb24tYnRuIGVsLWljb24tZC1hcnJvdy1yaWdodFwiXSxvbkNsaWNrOnRbMTNdfHwodFsxM109KC4uLnQpPT5lLmxlZnROZXh0WWVhciguLi50KSl9LG51bGwsMTAsW1wiZGlzYWJsZWRcIl0pKTp1KFwidi1pZlwiLCEwKSxlLnVubGlua1BhbmVscz8oYSgpLG4oXCJidXR0b25cIix7a2V5OjEsdHlwZTpcImJ1dHRvblwiLGRpc2FibGVkOiFlLmVuYWJsZU1vbnRoQXJyb3csY2xhc3M6W3tcImlzLWRpc2FibGVkXCI6IWUuZW5hYmxlTW9udGhBcnJvd30sXCJlbC1waWNrZXItcGFuZWxfX2ljb24tYnRuIGVsLWljb24tYXJyb3ctcmlnaHRcIl0sb25DbGljazp0WzE0XXx8KHRbMTRdPSguLi50KT0+ZS5sZWZ0TmV4dE1vbnRoKC4uLnQpKX0sbnVsbCwxMCxbXCJkaXNhYmxlZFwiXSkpOnUoXCJ2LWlmXCIsITApLHMoXCJkaXZcIixudWxsLHAoZS5sZWZ0TGFiZWwpLDEpXSkscyhnLHtcInNlbGVjdGlvbi1tb2RlXCI6XCJyYW5nZVwiLGRhdGU6ZS5sZWZ0RGF0ZSxcIm1pbi1kYXRlXCI6ZS5taW5EYXRlLFwibWF4LWRhdGVcIjplLm1heERhdGUsXCJyYW5nZS1zdGF0ZVwiOmUucmFuZ2VTdGF0ZSxcImRpc2FibGVkLWRhdGVcIjplLmRpc2FibGVkRGF0ZSxcImNlbGwtY2xhc3MtbmFtZVwiOmUuY2VsbENsYXNzTmFtZSxvbkNoYW5nZXJhbmdlOmUuaGFuZGxlQ2hhbmdlUmFuZ2Usb25QaWNrOmUuaGFuZGxlUmFuZ2VQaWNrLG9uU2VsZWN0OmUub25TZWxlY3R9LG51bGwsOCxbXCJkYXRlXCIsXCJtaW4tZGF0ZVwiLFwibWF4LWRhdGVcIixcInJhbmdlLXN0YXRlXCIsXCJkaXNhYmxlZC1kYXRlXCIsXCJjZWxsLWNsYXNzLW5hbWVcIixcIm9uQ2hhbmdlcmFuZ2VcIixcIm9uUGlja1wiLFwib25TZWxlY3RcIl0pXSkscyhcImRpdlwiLEpvLFtzKFwiZGl2XCIsZWksW2UudW5saW5rUGFuZWxzPyhhKCksbihcImJ1dHRvblwiLHtrZXk6MCx0eXBlOlwiYnV0dG9uXCIsZGlzYWJsZWQ6IWUuZW5hYmxlWWVhckFycm93LGNsYXNzOlt7XCJpcy1kaXNhYmxlZFwiOiFlLmVuYWJsZVllYXJBcnJvd30sXCJlbC1waWNrZXItcGFuZWxfX2ljb24tYnRuIGVsLWljb24tZC1hcnJvdy1sZWZ0XCJdLG9uQ2xpY2s6dFsxNV18fCh0WzE1XT0oLi4udCk9PmUucmlnaHRQcmV2WWVhciguLi50KSl9LG51bGwsMTAsW1wiZGlzYWJsZWRcIl0pKTp1KFwidi1pZlwiLCEwKSxlLnVubGlua1BhbmVscz8oYSgpLG4oXCJidXR0b25cIix7a2V5OjEsdHlwZTpcImJ1dHRvblwiLGRpc2FibGVkOiFlLmVuYWJsZU1vbnRoQXJyb3csY2xhc3M6W3tcImlzLWRpc2FibGVkXCI6IWUuZW5hYmxlTW9udGhBcnJvd30sXCJlbC1waWNrZXItcGFuZWxfX2ljb24tYnRuIGVsLWljb24tYXJyb3ctbGVmdFwiXSxvbkNsaWNrOnRbMTZdfHwodFsxNl09KC4uLnQpPT5lLnJpZ2h0UHJldk1vbnRoKC4uLnQpKX0sbnVsbCwxMCxbXCJkaXNhYmxlZFwiXSkpOnUoXCJ2LWlmXCIsITApLHMoXCJidXR0b25cIix7dHlwZTpcImJ1dHRvblwiLGNsYXNzOlwiZWwtcGlja2VyLXBhbmVsX19pY29uLWJ0biBlbC1pY29uLWQtYXJyb3ctcmlnaHRcIixvbkNsaWNrOnRbMTddfHwodFsxN109KC4uLnQpPT5lLnJpZ2h0TmV4dFllYXIoLi4udCkpfSkscyhcImJ1dHRvblwiLHt0eXBlOlwiYnV0dG9uXCIsY2xhc3M6XCJlbC1waWNrZXItcGFuZWxfX2ljb24tYnRuIGVsLWljb24tYXJyb3ctcmlnaHRcIixvbkNsaWNrOnRbMThdfHwodFsxOF09KC4uLnQpPT5lLnJpZ2h0TmV4dE1vbnRoKC4uLnQpKX0pLHMoXCJkaXZcIixudWxsLHAoZS5yaWdodExhYmVsKSwxKV0pLHMoZyx7XCJzZWxlY3Rpb24tbW9kZVwiOlwicmFuZ2VcIixkYXRlOmUucmlnaHREYXRlLFwibWluLWRhdGVcIjplLm1pbkRhdGUsXCJtYXgtZGF0ZVwiOmUubWF4RGF0ZSxcInJhbmdlLXN0YXRlXCI6ZS5yYW5nZVN0YXRlLFwiZGlzYWJsZWQtZGF0ZVwiOmUuZGlzYWJsZWREYXRlLFwiY2VsbC1jbGFzcy1uYW1lXCI6ZS5jZWxsQ2xhc3NOYW1lLG9uQ2hhbmdlcmFuZ2U6ZS5oYW5kbGVDaGFuZ2VSYW5nZSxvblBpY2s6ZS5oYW5kbGVSYW5nZVBpY2ssb25TZWxlY3Q6ZS5vblNlbGVjdH0sbnVsbCw4LFtcImRhdGVcIixcIm1pbi1kYXRlXCIsXCJtYXgtZGF0ZVwiLFwicmFuZ2Utc3RhdGVcIixcImRpc2FibGVkLWRhdGVcIixcImNlbGwtY2xhc3MtbmFtZVwiLFwib25DaGFuZ2VyYW5nZVwiLFwib25QaWNrXCIsXCJvblNlbGVjdFwiXSldKV0pXSksZS5zaG93VGltZT8oYSgpLG4oXCJkaXZcIix0aSxbcyhiLHtzaXplOlwibWluaVwiLHR5cGU6XCJ0ZXh0XCIsY2xhc3M6XCJlbC1waWNrZXItcGFuZWxfX2xpbmstYnRuXCIsb25DbGljazplLmhhbmRsZUNsZWFyfSx7ZGVmYXVsdDppKCgoKT0+W2MocChlLnQoXCJlbC5kYXRlcGlja2VyLmNsZWFyXCIpKSwxKV0pKSxfOjF9LDgsW1wib25DbGlja1wiXSkscyhiLHtwbGFpbjpcIlwiLHNpemU6XCJtaW5pXCIsY2xhc3M6XCJlbC1waWNrZXItcGFuZWxfX2xpbmstYnRuXCIsZGlzYWJsZWQ6ZS5idG5EaXNhYmxlZCxvbkNsaWNrOnRbMTldfHwodFsxOV09dD0+ZS5oYW5kbGVDb25maXJtKCExKSl9LHtkZWZhdWx0OmkoKCgpPT5bYyhwKGUudChcImVsLmRhdGVwaWNrZXIuY29uZmlybVwiKSksMSldKSksXzoxfSw4LFtcImRpc2FibGVkXCJdKV0pKTp1KFwidi1pZlwiLCEwKV0sMil9LEZvLl9fZmlsZT1cInBhY2thZ2VzL2RhdGUtcGlja2VyL3NyYy9kYXRlLXBpY2tlci1jb20vcGFuZWwtZGF0ZS1yYW5nZS52dWVcIjt2YXIgbGk9ZSh7Y29tcG9uZW50czp7TW9udGhUYWJsZTptb30scHJvcHM6e3VubGlua1BhbmVsczpCb29sZWFuLHBhcnNlZFZhbHVlOnt0eXBlOkFycmF5fX0sZW1pdHM6W1wicGlja1wiLFwic2V0LXBpY2tlci1vcHRpb25cIl0sc2V0dXAoZSxhKXtjb25zdCBuPXQoc2UoKSksbz10KHNlKCkuYWRkKDEsXCJ5ZWFyXCIpKSxpPWwoKCgpPT4hIWcubGVuZ3RoKSkscj1sKCgoKT0+YCR7bi52YWx1ZS55ZWFyKCl9ICR7cWwoXCJlbC5kYXRlcGlja2VyLnllYXJcIil9YCkpLHM9bCgoKCk9PmAke28udmFsdWUueWVhcigpfSAke3FsKFwiZWwuZGF0ZXBpY2tlci55ZWFyXCIpfWApKSx1PWwoKCgpPT5uLnZhbHVlLnllYXIoKSkpLGQ9bCgoKCk9Pm8udmFsdWUueWVhcigpPT09bi52YWx1ZS55ZWFyKCk/bi52YWx1ZS55ZWFyKCkrMTpvLnZhbHVlLnllYXIoKSkpLGM9bCgoKCk9PmUudW5saW5rUGFuZWxzJiZkLnZhbHVlPnUudmFsdWUrMSkpLHA9dChudWxsKSxoPXQobnVsbCksdj10KHtlbmREYXRlOm51bGwsc2VsZWN0aW5nOiExfSksbT0oZT0hMSk9Pnt2YXIgdDt0PVtwLnZhbHVlLGgudmFsdWVdLEFycmF5LmlzQXJyYXkodCkmJnQmJnRbMF0mJnRbMV0mJnRbMF0udmFsdWVPZigpPD10WzFdLnZhbHVlT2YoKSYmYS5lbWl0KFwicGlja1wiLFtwLnZhbHVlLGgudmFsdWVdLGUpfTthLmVtaXQoXCJzZXQtcGlja2VyLW9wdGlvblwiLFtcImZvcm1hdFRvU3RyaW5nXCIsZT0+ZS5tYXAoKGU9PmUuZm9ybWF0KGspKSldKTtjb25zdCBmPXcoXCJFUF9QSUNLRVJfQkFTRVwiKSx7c2hvcnRjdXRzOmcsZGlzYWJsZWREYXRlOmIsZm9ybWF0OmssZGVmYXVsdFZhbHVlOkN9PWYucHJvcHM7cmV0dXJuIHkoKCgpPT5lLnBhcnNlZFZhbHVlKSwodD0+e2lmKHQmJjI9PT10Lmxlbmd0aClpZihwLnZhbHVlPXRbMF0saC52YWx1ZT10WzFdLG4udmFsdWU9cC52YWx1ZSxlLnVubGlua1BhbmVscyYmaC52YWx1ZSl7Y29uc3QgZT1wLnZhbHVlLnllYXIoKSx0PWgudmFsdWUueWVhcigpO28udmFsdWU9ZT09PXQ/aC52YWx1ZS5hZGQoMSxcInllYXJcIik6aC52YWx1ZX1lbHNlIG8udmFsdWU9bi52YWx1ZS5hZGQoMSxcInllYXJcIik7ZWxzZXtjb25zdCB0PSgoKT0+e2xldCB0O2lmKEFycmF5LmlzQXJyYXkoQykpe2NvbnN0IHQ9c2UoQ1swXSk7bGV0IGw9c2UoQ1sxXSk7cmV0dXJuIGUudW5saW5rUGFuZWxzfHwobD10LmFkZCgxLFwieWVhclwiKSksW3QsbF19cmV0dXJuIHQ9Qz9zZShDKTpzZSgpLFt0LHQuYWRkKDEsXCJ5ZWFyXCIpXX0pKCk7bi52YWx1ZT10WzBdLG8udmFsdWU9dFsxXX19KSx7aW1tZWRpYXRlOiEwfSkse3Nob3J0Y3V0czpnLGRpc2FibGVkRGF0ZTpiLG9uU2VsZWN0OmU9Pnt2LnZhbHVlLnNlbGVjdGluZz1lLGV8fCh2LnZhbHVlLmVuZERhdGU9bnVsbCl9LGhhbmRsZVJhbmdlUGljazooZSx0PSEwKT0+e2NvbnN0IGw9ZS5taW5EYXRlLGE9ZS5tYXhEYXRlO2gudmFsdWU9PT1hJiZwLnZhbHVlPT09bHx8KGgudmFsdWU9YSxwLnZhbHVlPWwsdCYmbSgpKX0scmFuZ2VTdGF0ZTp2LGhhbmRsZUNoYW5nZVJhbmdlOmU9Pnt2LnZhbHVlPWV9LG1pbkRhdGU6cCxtYXhEYXRlOmgsZW5hYmxlWWVhckFycm93OmMsbGVmdExhYmVsOnIscmlnaHRMYWJlbDpzLGxlZnROZXh0WWVhcjooKT0+e24udmFsdWU9bi52YWx1ZS5hZGQoMSxcInllYXJcIil9LGxlZnRQcmV2WWVhcjooKT0+e24udmFsdWU9bi52YWx1ZS5zdWJ0cmFjdCgxLFwieWVhclwiKSxlLnVubGlua1BhbmVsc3x8KG8udmFsdWU9by52YWx1ZS5zdWJ0cmFjdCgxLFwieWVhclwiKSl9LHJpZ2h0TmV4dFllYXI6KCk9PntlLnVubGlua1BhbmVsc3x8KG4udmFsdWU9bi52YWx1ZS5hZGQoMSxcInllYXJcIikpLG8udmFsdWU9by52YWx1ZS5hZGQoMSxcInllYXJcIil9LHJpZ2h0UHJldlllYXI6KCk9PntvLnZhbHVlPW8udmFsdWUuc3VidHJhY3QoMSxcInllYXJcIil9LHQ6cWwsbGVmdERhdGU6bixyaWdodERhdGU6byxoYXNTaG9ydGN1dHM6aSxoYW5kbGVTaG9ydGN1dENsaWNrOmU9PntlLnZhbHVlP2EuZW1pdChcInBpY2tcIixbc2UoZS52YWx1ZVswXSksc2UoZS52YWx1ZVsxXSldKTplLm9uQ2xpY2smJmUub25DbGljayhhKX19fX0pO2NvbnN0IGFpPXtjbGFzczpcImVsLXBpY2tlci1wYW5lbF9fYm9keS13cmFwcGVyXCJ9LG5pPXtrZXk6MCxjbGFzczpcImVsLXBpY2tlci1wYW5lbF9fc2lkZWJhclwifSxvaT17Y2xhc3M6XCJlbC1waWNrZXItcGFuZWxfX2JvZHlcIn0saWk9e2NsYXNzOlwiZWwtcGlja2VyLXBhbmVsX19jb250ZW50IGVsLWRhdGUtcmFuZ2UtcGlja2VyX19jb250ZW50IGlzLWxlZnRcIn0scmk9e2NsYXNzOlwiZWwtZGF0ZS1yYW5nZS1waWNrZXJfX2hlYWRlclwifSxzaT17Y2xhc3M6XCJlbC1waWNrZXItcGFuZWxfX2NvbnRlbnQgZWwtZGF0ZS1yYW5nZS1waWNrZXJfX2NvbnRlbnQgaXMtcmlnaHRcIn0sdWk9e2NsYXNzOlwiZWwtZGF0ZS1yYW5nZS1waWNrZXJfX2hlYWRlclwifTtsaS5yZW5kZXI9ZnVuY3Rpb24oZSx0LGwsbyxpLHIpe2NvbnN0IGM9UChcIm1vbnRoLXRhYmxlXCIpO3JldHVybiBhKCksbihcImRpdlwiLHtjbGFzczpbXCJlbC1waWNrZXItcGFuZWwgZWwtZGF0ZS1yYW5nZS1waWNrZXJcIixbe1wiaGFzLXNpZGViYXJcIjplLiRzbG90cy5zaWRlYmFyfHxlLmhhc1Nob3J0Y3V0c31dXX0sW3MoXCJkaXZcIixhaSxbZChlLiRzbG90cyxcInNpZGViYXJcIix7Y2xhc3M6XCJlbC1waWNrZXItcGFuZWxfX3NpZGViYXJcIn0pLGUuaGFzU2hvcnRjdXRzPyhhKCksbihcImRpdlwiLG5pLFsoYSghMCksbihFLG51bGwsSChlLnNob3J0Y3V0cywoKHQsbCk9PihhKCksbihcImJ1dHRvblwiLHtrZXk6bCx0eXBlOlwiYnV0dG9uXCIsY2xhc3M6XCJlbC1waWNrZXItcGFuZWxfX3Nob3J0Y3V0XCIsb25DbGljazpsPT5lLmhhbmRsZVNob3J0Y3V0Q2xpY2sodCl9LHAodC50ZXh0KSw5LFtcIm9uQ2xpY2tcIl0pKSkpLDEyOCkpXSkpOnUoXCJ2LWlmXCIsITApLHMoXCJkaXZcIixvaSxbcyhcImRpdlwiLGlpLFtzKFwiZGl2XCIscmksW3MoXCJidXR0b25cIix7dHlwZTpcImJ1dHRvblwiLGNsYXNzOlwiZWwtcGlja2VyLXBhbmVsX19pY29uLWJ0biBlbC1pY29uLWQtYXJyb3ctbGVmdFwiLG9uQ2xpY2s6dFsxXXx8KHRbMV09KC4uLnQpPT5lLmxlZnRQcmV2WWVhciguLi50KSl9KSxlLnVubGlua1BhbmVscz8oYSgpLG4oXCJidXR0b25cIix7a2V5OjAsdHlwZTpcImJ1dHRvblwiLGRpc2FibGVkOiFlLmVuYWJsZVllYXJBcnJvdyxjbGFzczpbe1wiaXMtZGlzYWJsZWRcIjohZS5lbmFibGVZZWFyQXJyb3d9LFwiZWwtcGlja2VyLXBhbmVsX19pY29uLWJ0biBlbC1pY29uLWQtYXJyb3ctcmlnaHRcIl0sb25DbGljazp0WzJdfHwodFsyXT0oLi4udCk9PmUubGVmdE5leHRZZWFyKC4uLnQpKX0sbnVsbCwxMCxbXCJkaXNhYmxlZFwiXSkpOnUoXCJ2LWlmXCIsITApLHMoXCJkaXZcIixudWxsLHAoZS5sZWZ0TGFiZWwpLDEpXSkscyhjLHtcInNlbGVjdGlvbi1tb2RlXCI6XCJyYW5nZVwiLGRhdGU6ZS5sZWZ0RGF0ZSxcIm1pbi1kYXRlXCI6ZS5taW5EYXRlLFwibWF4LWRhdGVcIjplLm1heERhdGUsXCJyYW5nZS1zdGF0ZVwiOmUucmFuZ2VTdGF0ZSxcImRpc2FibGVkLWRhdGVcIjplLmRpc2FibGVkRGF0ZSxvbkNoYW5nZXJhbmdlOmUuaGFuZGxlQ2hhbmdlUmFuZ2Usb25QaWNrOmUuaGFuZGxlUmFuZ2VQaWNrLG9uU2VsZWN0OmUub25TZWxlY3R9LG51bGwsOCxbXCJkYXRlXCIsXCJtaW4tZGF0ZVwiLFwibWF4LWRhdGVcIixcInJhbmdlLXN0YXRlXCIsXCJkaXNhYmxlZC1kYXRlXCIsXCJvbkNoYW5nZXJhbmdlXCIsXCJvblBpY2tcIixcIm9uU2VsZWN0XCJdKV0pLHMoXCJkaXZcIixzaSxbcyhcImRpdlwiLHVpLFtlLnVubGlua1BhbmVscz8oYSgpLG4oXCJidXR0b25cIix7a2V5OjAsdHlwZTpcImJ1dHRvblwiLGRpc2FibGVkOiFlLmVuYWJsZVllYXJBcnJvdyxjbGFzczpbe1wiaXMtZGlzYWJsZWRcIjohZS5lbmFibGVZZWFyQXJyb3d9LFwiZWwtcGlja2VyLXBhbmVsX19pY29uLWJ0biBlbC1pY29uLWQtYXJyb3ctbGVmdFwiXSxvbkNsaWNrOnRbM118fCh0WzNdPSguLi50KT0+ZS5yaWdodFByZXZZZWFyKC4uLnQpKX0sbnVsbCwxMCxbXCJkaXNhYmxlZFwiXSkpOnUoXCJ2LWlmXCIsITApLHMoXCJidXR0b25cIix7dHlwZTpcImJ1dHRvblwiLGNsYXNzOlwiZWwtcGlja2VyLXBhbmVsX19pY29uLWJ0biBlbC1pY29uLWQtYXJyb3ctcmlnaHRcIixvbkNsaWNrOnRbNF18fCh0WzRdPSguLi50KT0+ZS5yaWdodE5leHRZZWFyKC4uLnQpKX0pLHMoXCJkaXZcIixudWxsLHAoZS5yaWdodExhYmVsKSwxKV0pLHMoYyx7XCJzZWxlY3Rpb24tbW9kZVwiOlwicmFuZ2VcIixkYXRlOmUucmlnaHREYXRlLFwibWluLWRhdGVcIjplLm1pbkRhdGUsXCJtYXgtZGF0ZVwiOmUubWF4RGF0ZSxcInJhbmdlLXN0YXRlXCI6ZS5yYW5nZVN0YXRlLFwiZGlzYWJsZWQtZGF0ZVwiOmUuZGlzYWJsZWREYXRlLG9uQ2hhbmdlcmFuZ2U6ZS5oYW5kbGVDaGFuZ2VSYW5nZSxvblBpY2s6ZS5oYW5kbGVSYW5nZVBpY2ssb25TZWxlY3Q6ZS5vblNlbGVjdH0sbnVsbCw4LFtcImRhdGVcIixcIm1pbi1kYXRlXCIsXCJtYXgtZGF0ZVwiLFwicmFuZ2Utc3RhdGVcIixcImRpc2FibGVkLWRhdGVcIixcIm9uQ2hhbmdlcmFuZ2VcIixcIm9uUGlja1wiLFwib25TZWxlY3RcIl0pXSldKV0pXSwyKX0sbGkuX19maWxlPVwicGFja2FnZXMvZGF0ZS1waWNrZXIvc3JjL2RhdGUtcGlja2VyLWNvbS9wYW5lbC1tb250aC1yYW5nZS52dWVcIixzZS5leHRlbmQoZmUpLHNlLmV4dGVuZCh1ZSksc2UuZXh0ZW5kKGhlKSxzZS5leHRlbmQoZGUpLHNlLmV4dGVuZCh2ZSksc2UuZXh0ZW5kKG1lKSxzZS5leHRlbmQoZ2UpLHNlLmV4dGVuZChiZSk7dmFyIGRpPWUoe25hbWU6XCJFbERhdGVQaWNrZXJcIixpbnN0YWxsOm51bGwscHJvcHM6T2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LEdsKSx7dHlwZTp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcImRhdGVcIn19KSxzZXR1cChlLHQpe2NvbnN0IGw9VWxbZS50eXBlXXx8XCJZWVlZLU1NLUREXCI7cmV0dXJuKCk9PkQoWmwsT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHtmb3JtYXQ6bH0sZSkse3R5cGU6ZS50eXBlLFwib25VcGRhdGU6bW9kZWxWYWx1ZVwiOmU9PnQuZW1pdChcInVwZGF0ZTptb2RlbFZhbHVlXCIsZSl9KSx7ZGVmYXVsdDp0PT57cmV0dXJuIEQoXCJkYXRlcmFuZ2VcIj09PShsPWUudHlwZSl8fFwiZGF0ZXRpbWVyYW5nZVwiPT09bD9GbzpcIm1vbnRocmFuZ2VcIj09PWw/bGk6RG8sdCk7dmFyIGx9fSl9fSk7ZGkuaW5zdGFsbD1lPT57ZS5jb21wb25lbnQoZGkubmFtZSxkaSl9O3ZhciBjaT1lKHtuYW1lOlwiRWxPdmVybGF5XCIscHJvcHM6e21hc2s6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiEwfSxvdmVybGF5Q2xhc3M6e3R5cGU6U3RyaW5nfSx6SW5kZXg6e3R5cGU6TnVtYmVyfX0sZW1pdHM6W1wiY2xpY2tcIl0sc2V0dXAoZSx7c2xvdHM6dCxlbWl0Omx9KXtjb25zdCBhPSgpPT57bChcImNsaWNrXCIpfTtyZXR1cm4oKT0+ZS5tYXNrP3MoXCJkaXZcIix7Y2xhc3M6W1wiZWwtb3ZlcmxheVwiLGUub3ZlcmxheUNsYXNzXSxzdHlsZTp7ekluZGV4OmUuekluZGV4fSxvbkNsaWNrOmF9LFtkKHQsXCJkZWZhdWx0XCIpXSxpbC5TVFlMRXxpbC5DTEFTU3xpbC5QUk9QUyxbXCJvbkNsaWNrXCJdKTpkKHQsXCJkZWZhdWx0XCIpfX0pO2NpLl9fZmlsZT1cInBhY2thZ2VzL292ZXJsYXkvc3JjL2luZGV4LnZ1ZVwiO2Z1bmN0aW9uIHBpKGUsYSxuKXtjb25zdCBvPXQoITEpLGk9dCghMSkscj10KG51bGwpLHM9dChudWxsKSx1PXQobnVsbCksZD10KCExKSxjPXQoZS56SW5kZXh8fGdsLm5leHRaSW5kZXgoKSkscD10KG51bGwpLGg9bCgoKCk9Pntjb25zdCB0PXt9O3JldHVybiBlLmZ1bGxzY3JlZW58fCh0Lm1hcmdpblRvcD1lLnRvcCxlLndpZHRoJiYodC53aWR0aD1lLndpZHRoKSksdH0pKTtmdW5jdGlvbiB2KCl7S2UodSksS2UocyksZS5vcGVuRGVsYXkmJmUub3BlbkRlbGF5PjA/cy52YWx1ZT13aW5kb3cuc2V0VGltZW91dCgoKCk9PntzLnZhbHVlPW51bGwsQygpfSksZS5vcGVuRGVsYXkpOkMoKX1mdW5jdGlvbiBtKCl7S2UocyksS2UodSksZS5jbG9zZURlbGF5JiZlLmNsb3NlRGVsYXk+MD91LnZhbHVlPXdpbmRvdy5zZXRUaW1lb3V0KCgoKT0+e3UudmFsdWU9bnVsbCx4KCl9KSxlLmNsb3NlRGVsYXkpOngoKX1mdW5jdGlvbiBmKGUpe2V8fChpLnZhbHVlPSEwLG8udmFsdWU9ITEpfWZ1bmN0aW9uIGcoKXtlLmJlZm9yZUNsb3NlP2UuYmVmb3JlQ2xvc2UoZik6bSgpfWZ1bmN0aW9uIEMoKXt6ZXx8KG8udmFsdWU9ITApfWZ1bmN0aW9uIHgoKXtvLnZhbHVlPSExfXJldHVybiBlLmxvY2tTY3JvbGwmJihlPT57YihlKXx8bXQoXCJbdXNlTG9ja1NjcmVlbl1cIixcIllvdSBuZWVkIHRvIHBhc3MgYSByZWYgcGFyYW0gdG8gdGhpcyBmdW5jdGlvblwiKTtsZXQgdD0wLGw9ITEsYT1cIjBcIixuPTA7eShlLChlPT57aWYoZSl7bD0hbnQoZG9jdW1lbnQuYm9keSxcImVsLXBvcHVwLXBhcmVudC0taGlkZGVuXCIpLGwmJihhPWRvY3VtZW50LmJvZHkuc3R5bGUucGFkZGluZ1JpZ2h0LG49cGFyc2VJbnQocnQoZG9jdW1lbnQuYm9keSxcInBhZGRpbmdSaWdodFwiKSwxMCkpLHQ9aHQoKTtjb25zdCBlPWRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQ8ZG9jdW1lbnQuYm9keS5zY3JvbGxIZWlnaHQsbz1ydChkb2N1bWVudC5ib2R5LFwib3ZlcmZsb3dZXCIpO3Q+MCYmKGV8fFwic2Nyb2xsXCI9PT1vKSYmbCYmKGRvY3VtZW50LmJvZHkuc3R5bGUucGFkZGluZ1JpZ2h0PW4rdCtcInB4XCIpLG90KGRvY3VtZW50LmJvZHksXCJlbC1wb3B1cC1wYXJlbnQtLWhpZGRlblwiKX1lbHNlIGwmJihkb2N1bWVudC5ib2R5LnN0eWxlLnBhZGRpbmdSaWdodD1hLGl0KGRvY3VtZW50LmJvZHksXCJlbC1wb3B1cC1wYXJlbnQtLWhpZGRlblwiKSksbD0hMH0pKX0pKG8pLGUuY2xvc2VPblByZXNzRXNjYXBlJiYoKGUsdCk9Pnt5KCgoKT0+dC52YWx1ZSksKHQ9Pnt0P3d0LnB1c2goZSk6d3Quc3BsaWNlKHd0LmZpbmRJbmRleCgodD0+dD09PWUpKSwxKX0pKX0pKHtoYW5kbGVDbG9zZTpnfSxvKSwoKGUsdCk9PntsZXQgbDt5KCgoKT0+ZS52YWx1ZSksKGU9Pnt2YXIgYSxuO2U/KGw9ZG9jdW1lbnQuYWN0aXZlRWxlbWVudCxiKHQpJiYobnVsbD09PShuPShhPXQudmFsdWUpLmZvY3VzKXx8dm9pZCAwPT09bnx8bi5jYWxsKGEpKSk6XCJ0ZXN0aW5nXCI9PT1wcm9jZXNzLmVudi5OT0RFX0VOVj9sLmZvY3VzLmNhbGwobCk6bC5mb2N1cygpfSkpfSkobykseSgoKCk9PmUubW9kZWxWYWx1ZSksKHQ9Pnt0PyhpLnZhbHVlPSExLGQudmFsdWU9ITAsdigpLGEuZW1pdChcIm9wZW5cIiksYy52YWx1ZT1lLnpJbmRleD9jLnZhbHVlKys6Z2wubmV4dFpJbmRleCgpLGsoKCgpPT57bi52YWx1ZSYmKG4udmFsdWUuc2Nyb2xsVG9wPTApfSkpKToobSgpLGkudmFsdWV8fGEuZW1pdChcImNsb3NlXCIpKX0pKSxfKCgoKT0+e2UubW9kZWxWYWx1ZSYmKG8udmFsdWU9ITAsZC52YWx1ZT0hMCx2KCkpfSkpLHthZnRlckVudGVyOmZ1bmN0aW9uKCl7YS5lbWl0KFwib3BlbmVkXCIpfSxhZnRlckxlYXZlOmZ1bmN0aW9uKCl7YS5lbWl0KFwiY2xvc2VkXCIpLGEuZW1pdChQdCwhMSksZS5kZXN0cm95T25DbG9zZSYmKGQudmFsdWU9ITEpfSxoYW5kbGVDbG9zZTpnLG9uTW9kYWxDbGljazpmdW5jdGlvbigpe2UuY2xvc2VPbkNsaWNrTW9kYWwmJmcoKX0sY2xvc2VkOmksZGlhbG9nUmVmOnIsc3R5bGU6aCxyZW5kZXJlZDpkLG1vZGFsUmVmOnAsdmlzaWJsZTpvLHpJbmRleDpjfX12YXIgaGk9ZSh7bmFtZTpcIkVsRGlhbG9nXCIsY29tcG9uZW50czp7XCJlbC1vdmVybGF5XCI6Y2l9LGRpcmVjdGl2ZXM6e1RyYXBGb2N1czpOdH0scHJvcHM6e2FwcGVuZFRvQm9keTp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITF9LGJlZm9yZUNsb3NlOnt0eXBlOkZ1bmN0aW9ufSxkZXN0cm95T25DbG9zZTp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITF9LGNlbnRlcjp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITF9LGN1c3RvbUNsYXNzOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiXCJ9LGNsb3NlT25DbGlja01vZGFsOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMH0sY2xvc2VPblByZXNzRXNjYXBlOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMH0sZnVsbHNjcmVlbjp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITF9LGxvY2tTY3JvbGw6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiEwfSxtb2RhbDp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITB9LHNob3dDbG9zZTp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITB9LHRpdGxlOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiXCJ9LG9wZW5EZWxheTp7dHlwZTpOdW1iZXIsZGVmYXVsdDowfSxjbG9zZURlbGF5Ont0eXBlOk51bWJlcixkZWZhdWx0OjB9LHRvcDp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIjE1dmhcIn0sbW9kZWxWYWx1ZTp7dHlwZTpCb29sZWFuLHJlcXVpcmVkOiEwfSxtb2RhbENsYXNzOlN0cmluZyx3aWR0aDp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIjUwJVwiLHZhbGlkYXRvcjplPT5bXCJweFwiLFwicmVtXCIsXCJlbVwiLFwidndcIixcIiVcIixcInZtaW5cIixcInZtYXhcIl0uc29tZSgodD0+ZS5lbmRzV2l0aCh0KSkpfSx6SW5kZXg6e3R5cGU6TnVtYmVyfX0sZW1pdHM6W1wib3BlblwiLFwib3BlbmVkXCIsXCJjbG9zZVwiLFwiY2xvc2VkXCIsUHRdLHNldHVwKGUsbCl7Y29uc3QgYT10KG51bGwpO3JldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30scGkoZSxsLGEpKSx7ZGlhbG9nUmVmOmF9KX19KTtjb25zdCB2aT17Y2xhc3M6XCJlbC1kaWFsb2dfX2hlYWRlclwifSxtaT17Y2xhc3M6XCJlbC1kaWFsb2dfX3RpdGxlXCJ9LGZpPXMoXCJpXCIse2NsYXNzOlwiZWwtZGlhbG9nX19jbG9zZSBlbC1pY29uIGVsLWljb24tY2xvc2VcIn0sbnVsbCwtMSksZ2k9e2tleTowLGNsYXNzOlwiZWwtZGlhbG9nX19ib2R5XCJ9LGJpPXtrZXk6MSxjbGFzczpcImVsLWRpYWxvZ19fZm9vdGVyXCJ9O2hpLnJlbmRlcj1mdW5jdGlvbihlLHQsbCxjLHYsbSl7Y29uc3QgZj1QKFwiZWwtb3ZlcmxheVwiKSxnPUYoXCJ0cmFwLWZvY3VzXCIpO3JldHVybiBhKCksbih6LHt0bzpcImJvZHlcIixkaXNhYmxlZDohZS5hcHBlbmRUb0JvZHl9LFtzKG8se25hbWU6XCJkaWFsb2ctZmFkZVwiLG9uQWZ0ZXJFbnRlcjplLmFmdGVyRW50ZXIsb25BZnRlckxlYXZlOmUuYWZ0ZXJMZWF2ZX0se2RlZmF1bHQ6aSgoKCk9PltyKHMoZix7bWFzazplLm1vZGFsLFwib3ZlcmxheS1jbGFzc1wiOmUubW9kYWxDbGFzcyxcInotaW5kZXhcIjplLnpJbmRleCxvbkNsaWNrOmUub25Nb2RhbENsaWNrfSx7ZGVmYXVsdDppKCgoKT0+W3IocyhcImRpdlwiLHtyZWY6XCJkaWFsb2dSZWZcIixjbGFzczpbXCJlbC1kaWFsb2dcIix7XCJpcy1mdWxsc2NyZWVuXCI6ZS5mdWxsc2NyZWVuLFwiZWwtZGlhbG9nLS1jZW50ZXJcIjplLmNlbnRlcn0sZS5jdXN0b21DbGFzc10sXCJhcmlhLW1vZGFsXCI6XCJ0cnVlXCIscm9sZTpcImRpYWxvZ1wiLFwiYXJpYS1sYWJlbFwiOmUudGl0bGV8fFwiZGlhbG9nXCIsc3R5bGU6ZS5zdHlsZSxvbkNsaWNrOnRbMl18fCh0WzJdPWU9PmUuc3RvcFByb3BhZ2F0aW9uKCkpfSxbcyhcImRpdlwiLHZpLFtkKGUuJHNsb3RzLFwidGl0bGVcIix7fSwoKCk9PltzKFwic3BhblwiLG1pLHAoZS50aXRsZSksMSldKSksZS5zaG93Q2xvc2U/KGEoKSxuKFwiYnV0dG9uXCIse2tleTowLFwiYXJpYS1sYWJlbFwiOlwiY2xvc2VcIixjbGFzczpcImVsLWRpYWxvZ19faGVhZGVyYnRuXCIsdHlwZTpcImJ1dHRvblwiLG9uQ2xpY2s6dFsxXXx8KHRbMV09KC4uLnQpPT5lLmhhbmRsZUNsb3NlKC4uLnQpKX0sW2ZpXSkpOnUoXCJ2LWlmXCIsITApXSksZS5yZW5kZXJlZD8oYSgpLG4oXCJkaXZcIixnaSxbZChlLiRzbG90cyxcImRlZmF1bHRcIildKSk6dShcInYtaWZcIiwhMCksZS4kc2xvdHMuZm9vdGVyPyhhKCksbihcImRpdlwiLGJpLFtkKGUuJHNsb3RzLFwiZm9vdGVyXCIpXSkpOnUoXCJ2LWlmXCIsITApXSwxNCxbXCJhcmlhLWxhYmVsXCJdKSxbW2ddXSldKSksXzozfSw4LFtcIm1hc2tcIixcIm92ZXJsYXktY2xhc3NcIixcInotaW5kZXhcIixcIm9uQ2xpY2tcIl0pLFtbaCxlLnZpc2libGVdXSldKSksXzoxfSw4LFtcIm9uQWZ0ZXJFbnRlclwiLFwib25BZnRlckxlYXZlXCJdKV0sOCxbXCJkaXNhYmxlZFwiXSl9LGhpLl9fZmlsZT1cInBhY2thZ2VzL2RpYWxvZy9zcmMvaW5kZXgudnVlXCIsaGkuaW5zdGFsbD1lPT57ZS5jb21wb25lbnQoaGkubmFtZSxoaSl9O3ZhciB5aT1lKHtuYW1lOlwiRWxEaXZpZGVyXCIscHJvcHM6e2RpcmVjdGlvbjp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcImhvcml6b250YWxcIix2YWxpZGF0b3I6ZT0+LTEhPT1bXCJob3Jpem9udGFsXCIsXCJ2ZXJ0aWNhbFwiXS5pbmRleE9mKGUpfSxjb250ZW50UG9zaXRpb246e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJjZW50ZXJcIix2YWxpZGF0b3I6ZT0+LTEhPT1bXCJsZWZ0XCIsXCJjZW50ZXJcIixcInJpZ2h0XCJdLmluZGV4T2YoZSl9fX0pO3lpLnJlbmRlcj1mdW5jdGlvbihlLHQsbCxvLGkscil7cmV0dXJuIGEoKSxuKFwiZGl2XCIse2NsYXNzOltcImVsLWRpdmlkZXJcIixcImVsLWRpdmlkZXItLVwiK2UuZGlyZWN0aW9uXX0sW2UuJHNsb3RzLmRlZmF1bHQmJlwidmVydGljYWxcIiE9PWUuZGlyZWN0aW9uPyhhKCksbihcImRpdlwiLHtrZXk6MCxjbGFzczpbXCJlbC1kaXZpZGVyX190ZXh0XCIsXCJpcy1cIitlLmNvbnRlbnRQb3NpdGlvbl19LFtkKGUuJHNsb3RzLFwiZGVmYXVsdFwiKV0sMikpOnUoXCJ2LWlmXCIsITApXSwyKX0seWkuX19maWxlPVwicGFja2FnZXMvZGl2aWRlci9zcmMvaW5kZXgudnVlXCIseWkuaW5zdGFsbD1lPT57ZS5jb21wb25lbnQoeWkubmFtZSx5aSl9O3ZhciBraT1lKHtuYW1lOlwiRWxEcmF3ZXJcIixjb21wb25lbnRzOntbY2kubmFtZV06Y2l9LGRpcmVjdGl2ZXM6e1RyYXBGb2N1czpOdH0scHJvcHM6e21vZGVsVmFsdWU6e3R5cGU6Qm9vbGVhbixyZXF1aXJlZDohMH0sYXBwZW5kVG9Cb2R5Ont0eXBlOkJvb2xlYW4sZGVmYXVsdDohMX0sYmVmb3JlQ2xvc2U6RnVuY3Rpb24sY3VzdG9tQ2xhc3M6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJcIn0sZGlyZWN0aW9uOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwicnRsXCIsdmFsaWRhdG9yOmU9Pi0xIT09W1wibHRyXCIsXCJydGxcIixcInR0YlwiLFwiYnR0XCJdLmluZGV4T2YoZSl9LHNob3dDbG9zZTp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITB9LHNpemU6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCIzMCVcIn0sdGl0bGU6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJcIn0sY2xvc2VPbkNsaWNrTW9kYWw6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiEwfSx3aXRoSGVhZGVyOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMH0sb3BlbkRlbGF5Ont0eXBlOk51bWJlcixkZWZhdWx0OjB9LGNsb3NlRGVsYXk6e3R5cGU6TnVtYmVyLGRlZmF1bHQ6MH0sekluZGV4Ok51bWJlcixtb2RhbDp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITB9LG1vZGFsRmFkZTp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITB9LG1vZGFsQ2xhc3M6U3RyaW5nLGxvY2tTY3JvbGw6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiEwfSxjbG9zZU9uUHJlc3NFc2NhcGU6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiEwfSxkZXN0cm95T25DbG9zZTp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITF9fSxlbWl0czpbXCJvcGVuXCIsXCJvcGVuZWRcIixcImNsb3NlXCIsXCJjbG9zZWRcIixcInVwZGF0ZTptb2RlbFZhbHVlXCJdLHNldHVwKGUsYSl7Y29uc3Qgbj10KG51bGwpO3JldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30scGkoZSxhLG4pKSx7ZHJhd2VyUmVmOm4saXNIb3Jpem9udGFsOmwoKCgpPT5cInJ0bFwiPT09ZS5kaXJlY3Rpb258fFwibHRyXCI9PT1lLmRpcmVjdGlvbikpfSl9fSk7Y29uc3QgQ2k9e2tleTowLGlkOlwiZWwtZHJhd2VyX190aXRsZVwiLGNsYXNzOlwiZWwtZHJhd2VyX19oZWFkZXJcIn0seGk9cyhcImlcIix7Y2xhc3M6XCJlbC1kcmF3ZXJfX2Nsb3NlIGVsLWljb24gZWwtaWNvbi1jbG9zZVwifSxudWxsLC0xKSx3aT17a2V5OjEsY2xhc3M6XCJlbC1kcmF3ZXJfX2JvZHlcIn07a2kucmVuZGVyPWZ1bmN0aW9uKGUsdCxsLGMsdixtKXtjb25zdCBmPVAoXCJlbC1vdmVybGF5XCIpLGc9RihcInRyYXAtZm9jdXNcIik7cmV0dXJuIGEoKSxuKHose3RvOlwiYm9keVwiLGRpc2FibGVkOiFlLmFwcGVuZFRvQm9keX0sW3Mobyx7bmFtZTpcImVsLWRyYXdlci1mYWRlXCIsb25BZnRlckVudGVyOmUuYWZ0ZXJFbnRlcixvbkFmdGVyTGVhdmU6ZS5hZnRlckxlYXZlfSx7ZGVmYXVsdDppKCgoKT0+W3IocyhmLHttYXNrOmUubW9kYWwsXCJvdmVybGF5LWNsYXNzXCI6ZS5tb2RhbENsYXNzLFwiei1pbmRleFwiOmUuekluZGV4LG9uQ2xpY2s6ZS5vbk1vZGFsQ2xpY2t9LHtkZWZhdWx0OmkoKCgpPT5bcyhcImRpdlwiLHtjbGFzczpbXCJlbC1kcmF3ZXJfX2NvbnRhaW5lclwiLHtcImVsLWRyYXdlcl9fb3BlblwiOmUudmlzaWJsZX1dLHRhYmluZGV4OlwiLTFcIixyb2xlOlwiZG9jdW1lbnRcIn0sW3IocyhcImRpdlwiLHtyZWY6XCJkcmF3ZXJSZWZcIixcImFyaWEtbW9kYWxcIjpcInRydWVcIixcImFyaWEtbGFiZWxsZWRieVwiOlwiZWwtZHJhd2VyX190aXRsZVwiLFwiYXJpYS1sYWJlbFwiOmUudGl0bGUsY2xhc3M6W1wiZWwtZHJhd2VyXCIsW2UuZGlyZWN0aW9uLGUuY3VzdG9tQ2xhc3NdXSxzdHlsZTplLmlzSG9yaXpvbnRhbD9cIndpZHRoOiBcIitlLnNpemU6XCJoZWlnaHQ6IFwiK2Uuc2l6ZSxyb2xlOlwiZGlhbG9nXCIsdGFiaW5kZXg6XCItMVwiLG9uQ2xpY2s6dFsyXXx8KHRbMl09VCgoKCk9Pnt9KSxbXCJzdG9wXCJdKSl9LFtlLndpdGhIZWFkZXI/KGEoKSxuKFwiaGVhZGVyXCIsQ2ksW2QoZS4kc2xvdHMsXCJ0aXRsZVwiLHt9LCgoKT0+W3MoXCJzcGFuXCIse3JvbGU6XCJoZWFkaW5nXCIsdGFiaW5kZXg6XCItMVwiLHRpdGxlOmUudGl0bGV9LHAoZS50aXRsZSksOSxbXCJ0aXRsZVwiXSldKSksZS5zaG93Q2xvc2U/KGEoKSxuKFwiYnV0dG9uXCIse2tleTowLFwiYXJpYS1sYWJlbFwiOlwiY2xvc2UgXCIrKGUudGl0bGV8fFwiZHJhd2VyXCIpLGNsYXNzOlwiZWwtZHJhd2VyX19jbG9zZS1idG5cIix0eXBlOlwiYnV0dG9uXCIsb25DbGljazp0WzFdfHwodFsxXT0oLi4udCk9PmUuaGFuZGxlQ2xvc2UoLi4udCkpfSxbeGldLDgsW1wiYXJpYS1sYWJlbFwiXSkpOnUoXCJ2LWlmXCIsITApXSkpOnUoXCJ2LWlmXCIsITApLGUucmVuZGVyZWQ/KGEoKSxuKFwic2VjdGlvblwiLHdpLFtkKGUuJHNsb3RzLFwiZGVmYXVsdFwiKV0pKTp1KFwidi1pZlwiLCEwKV0sMTQsW1wiYXJpYS1sYWJlbFwiXSksW1tnXV0pXSwyKV0pKSxfOjF9LDgsW1wibWFza1wiLFwib3ZlcmxheS1jbGFzc1wiLFwiei1pbmRleFwiLFwib25DbGlja1wiXSksW1toLGUudmlzaWJsZV1dKV0pKSxfOjF9LDgsW1wib25BZnRlckVudGVyXCIsXCJvbkFmdGVyTGVhdmVcIl0pXSw4LFtcImRpc2FibGVkXCJdKX0sa2kuX19maWxlPVwicGFja2FnZXMvZHJhd2VyL3NyYy9pbmRleC52dWVcIixraS5pbnN0YWxsPWU9PntlLmNvbXBvbmVudChraS5uYW1lLGtpKX07Y29uc3QgX2k9KCk9Pntjb25zdCBlPXFlKCksdD13KFwiZWxEcm9wZG93blwiLHt9KSxhPWwoKCgpPT5udWxsPT10P3ZvaWQgMDp0LmRyb3Bkb3duU2l6ZSkpO3JldHVybntFTEVNRU5UOmUsZWxEcm9wZG93bjp0LF9lbERyb3Bkb3duU2l6ZTphfX0sU2k9KGUsbCxhKT0+e2NvbnN0IG49dChudWxsKSxvPXQobnVsbCksaT10KG51bGwpLHI9dChcImRyb3Bkb3duLW1lbnUtXCIrUmUoKSk7ZnVuY3Rpb24gcygpe3ZhciBlO2wuc2V0QXR0cmlidXRlKFwidGFiaW5kZXhcIixcIi0xXCIpLG51bGw9PT0oZT1vLnZhbHVlKXx8dm9pZCAwPT09ZXx8ZS5mb3JFYWNoKChlPT57ZS5zZXRBdHRyaWJ1dGUoXCJ0YWJpbmRleFwiLFwiLTFcIil9KSl9ZnVuY3Rpb24gdShlKXtzKCksbnVsbD09ZXx8ZS5zZXRBdHRyaWJ1dGUoXCJ0YWJpbmRleFwiLFwiMFwiKX1mdW5jdGlvbiBkKGUpe2NvbnN0IHQ9ZS5jb2RlO1tmdC51cCxmdC5kb3duXS5pbmNsdWRlcyh0KT8ocygpLHUobi52YWx1ZVswXSksbi52YWx1ZVswXS5mb2N1cygpLGUucHJldmVudERlZmF1bHQoKSxlLnN0b3BQcm9wYWdhdGlvbigpKTp0PT09ZnQuZW50ZXI/YS5oYW5kbGVDbGljaygpOltmdC50YWIsZnQuZXNjXS5pbmNsdWRlcyh0KSYmYS5oaWRlKCl9ZnVuY3Rpb24gYyhlKXtjb25zdCB0PWUuY29kZSxsPWUudGFyZ2V0LGk9by52YWx1ZS5pbmRleE9mKGwpLHI9by52YWx1ZS5sZW5ndGgtMTtsZXQgZDtbZnQudXAsZnQuZG93bl0uaW5jbHVkZXModCk/KGQ9dD09PWZ0LnVwPzAhPT1pP2ktMTowOmk8cj9pKzE6cixzKCksdShuLnZhbHVlW2RdKSxuLnZhbHVlW2RdLmZvY3VzKCksZS5wcmV2ZW50RGVmYXVsdCgpLGUuc3RvcFByb3BhZ2F0aW9uKCkpOnQ9PT1mdC5lbnRlcj8ocCgpLGwuY2xpY2soKSxhLnByb3BzLmhpZGVPbkNsaWNrJiZhLmhpZGUoKSk6W2Z0LnRhYixmdC5lc2NdLmluY2x1ZGVzKHQpJiYoYS5oaWRlKCkscCgpKX1mdW5jdGlvbiBwKCl7bC5mb2N1cygpfWkudmFsdWU9bnVsbD09ZT92b2lkIDA6ZS5zdWJUcmVlLmVsLG4udmFsdWU9aS52YWx1ZS5xdWVyeVNlbGVjdG9yQWxsKFwiW3RhYmluZGV4PSctMSddXCIpLG8udmFsdWU9W10uc2xpY2UuY2FsbChuLnZhbHVlKSxsdChsLFwia2V5ZG93blwiLGQpLGx0KGkudmFsdWUsXCJrZXlkb3duXCIsYywhMCksaS52YWx1ZS5zZXRBdHRyaWJ1dGUoXCJpZFwiLHIudmFsdWUpLGwuc2V0QXR0cmlidXRlKFwiYXJpYS1oYXNwb3B1cFwiLFwibGlzdFwiKSxsLnNldEF0dHJpYnV0ZShcImFyaWEtY29udHJvbHNcIixyLnZhbHVlKSxhLnByb3BzLnNwbGl0QnV0dG9ufHwobC5zZXRBdHRyaWJ1dGUoXCJyb2xlXCIsXCJidXR0b25cIiksbC5zZXRBdHRyaWJ1dGUoXCJ0YWJpbmRleFwiLGEucHJvcHMudGFiaW5kZXgpLG90KGwsXCJlbC1kcm9wZG93bi1zZWxmZGVmaW5lXCIpKX07dmFyIEVpPWUoe25hbWU6XCJFbERyb3Bkb3duXCIsY29tcG9uZW50czp7RWxCdXR0b246JGwsRWxCdXR0b25Hcm91cDpXbCxFbFBvcHBlcjpTbH0scHJvcHM6e3RyaWdnZXI6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJob3ZlclwifSx0eXBlOlN0cmluZyxzaXplOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiXCJ9LHNwbGl0QnV0dG9uOkJvb2xlYW4saGlkZU9uQ2xpY2s6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiEwfSxwbGFjZW1lbnQ6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJib3R0b21cIn0sc2hvd1RpbWVvdXQ6e3R5cGU6TnVtYmVyLGRlZmF1bHQ6MTUwfSxoaWRlVGltZW91dDp7dHlwZTpOdW1iZXIsZGVmYXVsdDoxNTB9LHRhYmluZGV4Ont0eXBlOk51bWJlcixkZWZhdWx0OjB9LGVmZmVjdDp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcImxpZ2h0XCJ9fSxlbWl0czpbXCJ2aXNpYmxlLWNoYW5nZVwiLFwiY2xpY2tcIixcImNvbW1hbmRcIl0sc2V0dXAoZSx7ZW1pdDphfSl7Y29uc3Qgbj12KCkse0VMRU1FTlQ6b309X2koKSxpPXQobnVsbCkscj10KCExKTt5KCgoKT0+ci52YWx1ZSksKGU9Pnt2YXIgdCxsO2UmJihudWxsPT09KGw9bnVsbD09PSh0PWQudmFsdWUpfHx2b2lkIDA9PT10P3ZvaWQgMDp0LmZvY3VzKXx8dm9pZCAwPT09bHx8bC5jYWxsKHQpKSxlfHxmdW5jdGlvbigpe3ZhciBlLHQ7bnVsbD09PSh0PW51bGw9PT0oZT1kLnZhbHVlKXx8dm9pZCAwPT09ZT92b2lkIDA6ZS5ibHVyKXx8dm9pZCAwPT09dHx8dC5jYWxsKGUpfSgpLGEoXCJ2aXNpYmxlLWNoYW5nZVwiLGUpfSkpO2NvbnN0IHM9dCghMSk7eSgoKCk9PnMudmFsdWUpLChlPT57Y29uc3QgdD1kLnZhbHVlO3QmJihlP290KHQsXCJmb2N1c2luZ1wiKTppdCh0LFwiZm9jdXNpbmdcIikpfSkpO2NvbnN0IHU9dChudWxsKSxkPWwoKCgpPT57dmFyIHQsbCxhLG47Y29uc3Qgbz1udWxsIT09KGE9bnVsbD09PShsPW51bGw9PT0odD11LnZhbHVlKXx8dm9pZCAwPT09dD92b2lkIDA6dC4kcmVmcy50cmlnZ2VyUmVmKXx8dm9pZCAwPT09bD92b2lkIDA6bC5jaGlsZHJlblswXSkmJnZvaWQgMCE9PWE/YTp7fTtyZXR1cm4gZS5zcGxpdEJ1dHRvbj9udWxsPT09KG49by5jaGlsZHJlbil8fHZvaWQgMD09PW4/dm9pZCAwOm5bMV06b30pKTtmdW5jdGlvbiBjKCl7dmFyIGU7KG51bGw9PT0oZT1kLnZhbHVlKXx8dm9pZCAwPT09ZT92b2lkIDA6ZS5kaXNhYmxlZCl8fChyLnZhbHVlP2goKTpwKCkpfWZ1bmN0aW9uIHAoKXt2YXIgdDsobnVsbD09PSh0PWQudmFsdWUpfHx2b2lkIDA9PT10P3ZvaWQgMDp0LmRpc2FibGVkKXx8KGkudmFsdWUmJmNsZWFyVGltZW91dChpLnZhbHVlKSxpLnZhbHVlPXdpbmRvdy5zZXRUaW1lb3V0KCgoKT0+e3IudmFsdWU9ITB9KSxcImNsaWNrXCI9PT1lLnRyaWdnZXI/MDplLnNob3dUaW1lb3V0KSl9ZnVuY3Rpb24gaCgpe3ZhciB0OyhudWxsPT09KHQ9ZC52YWx1ZSl8fHZvaWQgMD09PXQ/dm9pZCAwOnQuZGlzYWJsZWQpfHwobSgpLGUudGFiaW5kZXg+PTAmJmYoZC52YWx1ZSksY2xlYXJUaW1lb3V0KGkudmFsdWUpLGkudmFsdWU9d2luZG93LnNldFRpbWVvdXQoKCgpPT57ci52YWx1ZT0hMX0pLFwiY2xpY2tcIj09PWUudHJpZ2dlcj8wOmUuaGlkZVRpbWVvdXQpKX1mdW5jdGlvbiBtKCl7dmFyIGU7bnVsbD09PShlPWQudmFsdWUpfHx2b2lkIDA9PT1lfHxlLnNldEF0dHJpYnV0ZShcInRhYmluZGV4XCIsXCItMVwiKX1mdW5jdGlvbiBmKGUpe20oKSxudWxsPT1lfHxlLnNldEF0dHJpYnV0ZShcInRhYmluZGV4XCIsXCIwXCIpfWNvbnN0IGc9bCgoKCk9PmUuc2l6ZXx8by5zaXplKSk7eChcImVsRHJvcGRvd25cIix7aW5zdGFuY2U6bixkcm9wZG93blNpemU6Zyx2aXNpYmxlOnIsaGFuZGxlQ2xpY2s6Yyxjb21tYW5kSGFuZGxlcjpmdW5jdGlvbiguLi5lKXthKFwiY29tbWFuZFwiLC4uLmUpfSxzaG93OnAsaGlkZTpoLHRyaWdnZXI6bCgoKCk9PmUudHJpZ2dlcikpLGhpZGVPbkNsaWNrOmwoKCgpPT5lLmhpZGVPbkNsaWNrKSksdHJpZ2dlckVsbTpkfSksXygoKCk9PntlLnNwbGl0QnV0dG9ufHwobHQoZC52YWx1ZSxcImZvY3VzXCIsKCgpPT57cy52YWx1ZT0hMH0pKSxsdChkLnZhbHVlLFwiYmx1clwiLCgoKT0+e3MudmFsdWU9ITF9KSksbHQoZC52YWx1ZSxcImNsaWNrXCIsKCgpPT57cy52YWx1ZT0hMX0pKSksXCJob3ZlclwiPT09ZS50cmlnZ2VyPyhsdChkLnZhbHVlLFwibW91c2VlbnRlclwiLHApLGx0KGQudmFsdWUsXCJtb3VzZWxlYXZlXCIsaCkpOlwiY2xpY2tcIj09PWUudHJpZ2dlciYmbHQoZC52YWx1ZSxcImNsaWNrXCIsYyksT2JqZWN0LmFzc2lnbihuLHtoYW5kbGVDbGljazpjLGhpZGU6aCxyZXNldFRhYmluZGV4OmZ9KX0pKTtyZXR1cm57dmlzaWJsZTpyLGRyb3Bkb3duU2l6ZTpnLGhhbmRsZXJNYWluQnV0dG9uQ2xpY2s6ZT0+e2EoXCJjbGlja1wiLGUpLGgoKX0sdHJpZ2dlclZub2RlOnV9fX0pO2NvbnN0IE1pPXtjbGFzczpcImVsLWRyb3Bkb3duXCJ9LFRpPXMoXCJpXCIse2NsYXNzOlwiZWwtZHJvcGRvd25fX2ljb24gZWwtaWNvbi1hcnJvdy1kb3duXCJ9LG51bGwsLTEpO0VpLnJlbmRlcj1mdW5jdGlvbihlLHQsbCxvLHIsdSl7Y29uc3QgYz1QKFwiZWwtYnV0dG9uXCIpLHA9UChcImVsLWJ1dHRvbi1ncm91cFwiKSxoPVAoXCJlbC1wb3BwZXJcIik7cmV0dXJuIGEoKSxuKGgse3JlZjpcInRyaWdnZXJWbm9kZVwiLHZpc2libGU6ZS52aXNpYmxlLFwib25VcGRhdGU6dmlzaWJsZVwiOnRbMV18fCh0WzFdPXQ9PmUudmlzaWJsZT10KSxwbGFjZW1lbnQ6ZS5wbGFjZW1lbnQsZWZmZWN0OmUuZWZmZWN0LHB1cmU6XCJcIixcIm1hbnVhbC1tb2RlXCI6ITAsdHJpZ2dlcjpbZS50cmlnZ2VyXSxcInBvcHBlci1jbGFzc1wiOlwiZWwtZHJvcGRvd25fX3BvcHBlclwiLFwiYXBwZW5kLXRvLWJvZHlcIjpcIlwiLHRyYW5zaXRpb246XCJlbC16b29tLWluLXRvcFwiLFwiZ3B1LWFjY2VsZXJhdGlvblwiOiExfSx7ZGVmYXVsdDppKCgoKT0+W2QoZS4kc2xvdHMsXCJkcm9wZG93blwiKV0pKSx0cmlnZ2VyOmkoKCgpPT5bcyhcImRpdlwiLE1pLFtlLnNwbGl0QnV0dG9uPyhhKCksbihwLHtrZXk6MX0se2RlZmF1bHQ6aSgoKCk9PltzKGMse3NpemU6ZS5kcm9wZG93blNpemUsdHlwZTplLnR5cGUsb25DbGljazplLmhhbmRsZXJNYWluQnV0dG9uQ2xpY2t9LHtkZWZhdWx0OmkoKCgpPT5bZChlLiRzbG90cyxcImRlZmF1bHRcIildKSksXzozfSw4LFtcInNpemVcIixcInR5cGVcIixcIm9uQ2xpY2tcIl0pLHMoYyx7c2l6ZTplLmRyb3Bkb3duU2l6ZSx0eXBlOmUudHlwZSxjbGFzczpcImVsLWRyb3Bkb3duX19jYXJldC1idXR0b25cIn0se2RlZmF1bHQ6aSgoKCk9PltUaV0pKSxfOjF9LDgsW1wic2l6ZVwiLFwidHlwZVwiXSldKSksXzoxfSkpOmQoZS4kc2xvdHMsXCJkZWZhdWx0XCIse2tleTowfSldKV0pKSxfOjF9LDgsW1widmlzaWJsZVwiLFwicGxhY2VtZW50XCIsXCJlZmZlY3RcIixcInRyaWdnZXJcIl0pfSxFaS5fX2ZpbGU9XCJwYWNrYWdlcy9kcm9wZG93bi9zcmMvZHJvcGRvd24udnVlXCIsRWkuaW5zdGFsbD1lPT57ZS5jb21wb25lbnQoRWkubmFtZSxFaSl9O3ZhciBOaT1lKHtuYW1lOlwiRWxEcm9wZG93bkl0ZW1cIixwcm9wczp7Y29tbWFuZDp7dHlwZTpbT2JqZWN0LFN0cmluZyxOdW1iZXJdLGRlZmF1bHQ6KCk9Pih7fSl9LGRpc2FibGVkOkJvb2xlYW4sZGl2aWRlZDpCb29sZWFuLGljb246U3RyaW5nfSxzZXR1cChlKXtjb25zdHtlbERyb3Bkb3duOnR9PV9pKCksbD12KCk7cmV0dXJue2hhbmRsZUNsaWNrOmZ1bmN0aW9uKGEpe3ZhciBuLG87dC5oaWRlT25DbGljay52YWx1ZSYmKG51bGw9PT0obj10LmhhbmRsZUNsaWNrKXx8dm9pZCAwPT09bnx8bi5jYWxsKHQpKSxudWxsPT09KG89dC5jb21tYW5kSGFuZGxlcil8fHZvaWQgMD09PW98fG8uY2FsbCh0LGUuY29tbWFuZCxsLGEpfX19fSk7TmkucmVuZGVyPWZ1bmN0aW9uKGUsdCxsLG8saSxyKXtyZXR1cm4gYSgpLG4oXCJsaVwiLHtjbGFzczpbXCJlbC1kcm9wZG93bi1tZW51X19pdGVtXCIse1wiaXMtZGlzYWJsZWRcIjplLmRpc2FibGVkLFwiZWwtZHJvcGRvd24tbWVudV9faXRlbS0tZGl2aWRlZFwiOmUuZGl2aWRlZH1dLFwiYXJpYS1kaXNhYmxlZFwiOmUuZGlzYWJsZWQsdGFiaW5kZXg6ZS5kaXNhYmxlZD9udWxsOi0xLG9uQ2xpY2s6dFsxXXx8KHRbMV09KC4uLnQpPT5lLmhhbmRsZUNsaWNrKC4uLnQpKX0sW2UuaWNvbj8oYSgpLG4oXCJpXCIse2tleTowLGNsYXNzOmUuaWNvbn0sbnVsbCwyKSk6dShcInYtaWZcIiwhMCksZChlLiRzbG90cyxcImRlZmF1bHRcIildLDEwLFtcImFyaWEtZGlzYWJsZWRcIixcInRhYmluZGV4XCJdKX0sTmkuX19maWxlPVwicGFja2FnZXMvZHJvcGRvd24vc3JjL2Ryb3Bkb3duLWl0ZW0udnVlXCIsTmkuaW5zdGFsbD1lPT57ZS5jb21wb25lbnQoTmkubmFtZSxOaSl9O3ZhciBEaT1lKHtuYW1lOlwiRWxEcm9wZG93bk1lbnVcIixkaXJlY3RpdmVzOntDbGlja091dHNpZGU6TXR9LHNldHVwKCl7Y29uc3R7X2VsRHJvcGRvd25TaXplOmUsZWxEcm9wZG93bjp0fT1faSgpLGw9ZS52YWx1ZTtmdW5jdGlvbiBhKCl7dmFyIGU7bnVsbD09PShlPXQuaGlkZSl8fHZvaWQgMD09PWV8fGUuY2FsbCh0KX1yZXR1cm4gXygoKCk9Pntjb25zdCBlPXYoKTtTaShlLHQudHJpZ2dlckVsbS52YWx1ZSx0Lmluc3RhbmNlKX0pKSx7c2l6ZTpsLHNob3c6ZnVuY3Rpb24oKXt2YXIgZTtudWxsPT09KGU9dC5zaG93KXx8dm9pZCAwPT09ZXx8ZS5jYWxsKHQpfSxoaWRlOmZ1bmN0aW9uKCl7XCJjbGlja1wiIT09dC50cmlnZ2VyLnZhbHVlJiZhKCl9LGlubmVySGlkZTphLHRyaWdnZXJFbG06dC50cmlnZ2VyRWxtfX19KTtEaS5yZW5kZXI9ZnVuY3Rpb24oZSx0LGwsbyxpLHMpe2NvbnN0IHU9RihcImNsaWNrT3V0c2lkZVwiKTtyZXR1cm4gcigoYSgpLG4oXCJ1bFwiLHtjbGFzczpbW2Uuc2l6ZSYmXCJlbC1kcm9wZG93bi1tZW51LS1cIitlLnNpemVdLFwiZWwtZHJvcGRvd24tbWVudVwiXSxvbk1vdXNlZW50ZXI6dFsxXXx8KHRbMV09VCgoKC4uLnQpPT5lLnNob3coLi4udCkpLFtcInN0b3BcIl0pKSxvbk1vdXNlbGVhdmU6dFsyXXx8KHRbMl09VCgoKC4uLnQpPT5lLmhpZGUoLi4udCkpLFtcInN0b3BcIl0pKX0sW2QoZS4kc2xvdHMsXCJkZWZhdWx0XCIpXSwzNCkpLFtbdSxlLmlubmVySGlkZSxlLnRyaWdnZXJFbG1dXSl9LERpLl9fZmlsZT1cInBhY2thZ2VzL2Ryb3Bkb3duL3NyYy9kcm9wZG93bi1tZW51LnZ1ZVwiLERpLmluc3RhbGw9ZT0+e2UuY29tcG9uZW50KERpLm5hbWUsRGkpfTt2YXIgT2k9ZSh7bmFtZTpcIkVsRm9vdGVyXCIscHJvcHM6e2hlaWdodDp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIjYwcHhcIn19fSk7T2kucmVuZGVyPWZ1bmN0aW9uKGUsdCxsLG8saSxyKXtyZXR1cm4gYSgpLG4oXCJmb290ZXJcIix7Y2xhc3M6XCJlbC1mb290ZXJcIixzdHlsZTp7aGVpZ2h0OmUuaGVpZ2h0fX0sW2QoZS4kc2xvdHMsXCJkZWZhdWx0XCIpXSw0KX0sT2kuX19maWxlPVwicGFja2FnZXMvY29udGFpbmVyL3NyYy9mb290ZXIudnVlXCIsT2kuaW5zdGFsbD1lPT57ZS5jb21wb25lbnQoT2kubmFtZSxPaSl9O3ZhciBQaT1lKHtuYW1lOlwiRWxMYWJlbFdyYXBcIixwcm9wczp7aXNBdXRvV2lkdGg6Qm9vbGVhbix1cGRhdGVBbGw6Qm9vbGVhbn0sc2V0dXAoZSx7c2xvdHM6bH0pe2NvbnN0IGE9dChudWxsKSxuPXcoXCJlbEZvcm1cIiksbz13KFwiZWxGb3JtSXRlbVwiKSxpPXQoMCk7eShpLCgodCxsKT0+e2UudXBkYXRlQWxsJiYobi5yZWdpc3RlckxhYmVsV2lkdGgodCxsKSxvLnVwZGF0ZUNvbXB1dGVkTGFiZWxXaWR0aCh0KSl9KSk7Y29uc3Qgcj0odD1cInVwZGF0ZVwiKT0+e2soKCgpPT57bC5kZWZhdWx0JiZlLmlzQXV0b1dpZHRoJiYoXCJ1cGRhdGVcIj09PXQ/aS52YWx1ZT0oKCk9Pnt2YXIgZTtpZihudWxsPT09KGU9YS52YWx1ZSl8fHZvaWQgMD09PWU/dm9pZCAwOmUuZmlyc3RFbGVtZW50Q2hpbGQpe2NvbnN0IGU9d2luZG93LmdldENvbXB1dGVkU3R5bGUoYS52YWx1ZS5maXJzdEVsZW1lbnRDaGlsZCkud2lkdGg7cmV0dXJuIE1hdGguY2VpbChwYXJzZUZsb2F0KGUpKX1yZXR1cm4gMH0pKCk6XCJyZW1vdmVcIj09PXQmJm4uZGVyZWdpc3RlckxhYmVsV2lkdGgoaS52YWx1ZSkpfSkpfSxzPSgpPT5yKFwidXBkYXRlXCIpO3JldHVybiBfKCgoKT0+e0p0KGEudmFsdWUuZmlyc3RFbGVtZW50Q2hpbGQscykscygpfSkpLFMocyksTygoKCk9PntyKFwicmVtb3ZlXCIpLGVsKGEudmFsdWUuZmlyc3RFbGVtZW50Q2hpbGQscyl9KSksZnVuY3Rpb24oKXt2YXIgdCxvO2lmKCFsKXJldHVybiBudWxsO2lmKGUuaXNBdXRvV2lkdGgpe2NvbnN0IGU9bi5hdXRvTGFiZWxXaWR0aCxvPXt9O2lmKGUmJlwiYXV0b1wiIT09ZSl7Y29uc3QgdD1wYXJzZUludChlLDEwKS1pLnZhbHVlO3QmJihvLm1hcmdpbkxlZnQ9dCtcInB4XCIpfXJldHVybiBEKFwiZGl2XCIse3JlZjphLGNsYXNzOltcImVsLWZvcm0taXRlbV9fbGFiZWwtd3JhcFwiXSxzdHlsZTpvfSxudWxsPT09KHQ9bC5kZWZhdWx0KXx8dm9pZCAwPT09dD92b2lkIDA6dC5jYWxsKGwpKX1yZXR1cm4gRChFLHtyZWY6YX0sbnVsbD09PShvPWwuZGVmYXVsdCl8fHZvaWQgMD09PW8/dm9pZCAwOm8uY2FsbChsKSl9fX0pLFZpPWUoe25hbWU6XCJFbEZvcm1JdGVtXCIsY29tcG9uZW50TmFtZTpcIkVsRm9ybUl0ZW1cIixjb21wb25lbnRzOntMYWJlbFdyYXA6UGl9LHByb3BzOntsYWJlbDpTdHJpbmcsbGFiZWxXaWR0aDpTdHJpbmcscHJvcDpTdHJpbmcscmVxdWlyZWQ6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OnZvaWQgMH0scnVsZXM6W09iamVjdCxBcnJheV0sZXJyb3I6U3RyaW5nLHZhbGlkYXRlU3RhdHVzOlN0cmluZyxmb3I6U3RyaW5nLGlubGluZU1lc3NhZ2U6e3R5cGU6W1N0cmluZyxCb29sZWFuXSxkZWZhdWx0OlwiXCJ9LHNob3dNZXNzYWdlOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMH0sc2l6ZTp7dHlwZXM6U3RyaW5nLHZhbGlkYXRvcjpBdH19LHNldHVwKGUpe2NvbnN0IGE9bmUoKSxuPXFlKCksbz13KFwiZWxGb3JtXCIse30pLGk9dChcIlwiKSxyPXQoXCJcIikscz10KCExKSx1PXQoXCJcIiksZD12KCksYz1sKCgoKT0+e2xldCBlPWQucGFyZW50O2Zvcig7ZSYmXCJFbEZvcm1cIiE9PWUudHlwZS5uYW1lOyl7aWYoXCJFbEZvcm1JdGVtXCI9PT1lLnR5cGUubmFtZSlyZXR1cm4hMDtlPWUucGFyZW50fXJldHVybiExfSkpO2xldCBwPXZvaWQgMDt5KCgoKT0+ZS5lcnJvciksKGU9PntyLnZhbHVlPWUsaS52YWx1ZT1lP1wiZXJyb3JcIjpcIlwifSkse2ltbWVkaWF0ZTohMH0pLHkoKCgpPT5lLnZhbGlkYXRlU3RhdHVzKSwoZT0+e2kudmFsdWU9ZX0pKTtjb25zdCBoPWwoKCgpPT5lLmZvcnx8ZS5wcm9wKSksbT1sKCgoKT0+e2lmKFwidG9wXCI9PT1vLmxhYmVsUG9zaXRpb24pcmV0dXJue307Y29uc3QgdD1lLmxhYmVsV2lkdGh8fG8ubGFiZWxXaWR0aDtyZXR1cm4gdD97d2lkdGg6dH06e319KSksZz1sKCgoKT0+e2lmKFwidG9wXCI9PT1vLmxhYmVsUG9zaXRpb258fG8uaW5saW5lKXJldHVybnt9O2lmKCFlLmxhYmVsJiYhZS5sYWJlbFdpZHRoJiZjLnZhbHVlKXJldHVybnt9O2NvbnN0IHQ9ZS5sYWJlbFdpZHRofHxvLmxhYmVsV2lkdGgsbD17fTtyZXR1cm5cImF1dG9cIj09PXQ/XCJhdXRvXCI9PT1lLmxhYmVsV2lkdGg/bC5tYXJnaW5MZWZ0PXUudmFsdWU6XCJhdXRvXCI9PT1vLmxhYmVsV2lkdGgmJihsLm1hcmdpbkxlZnQ9by5hdXRvTGFiZWxXaWR0aCk6bC5tYXJnaW5MZWZ0PXQsbH0pKSxiPWwoKCgpPT57Y29uc3QgdD1vLm1vZGVsO2lmKCF0fHwhZS5wcm9wKXJldHVybjtsZXQgbD1lLnByb3A7cmV0dXJuLTEhPT1sLmluZGV4T2YoXCI6XCIpJiYobD1sLnJlcGxhY2UoLzovLFwiLlwiKSksJGUodCxsLCEwKS52fSkpLFM9bCgoKCk9PntsZXQgZT1OKCksdD0hMTtyZXR1cm4gZSYmZS5sZW5ndGgmJmUuZXZlcnkoKGU9PiFlLnJlcXVpcmVkfHwodD0hMCwhMSkpKSx0fSkpLEU9bCgoKCk9PmUuc2l6ZXx8by5zaXplKSksTT1sKCgoKT0+RS52YWx1ZXx8bi5zaXplKSksVD0odCxsPVNlKT0+e3MudmFsdWU9ITE7Y29uc3QgYT1EKHQpO2lmKCghYXx8MD09PWEubGVuZ3RoKSYmdm9pZCAwPT09ZS5yZXF1aXJlZClyZXR1cm4gdm9pZCBsKCk7aS52YWx1ZT1cInZhbGlkYXRpbmdcIjtjb25zdCBuPXt9O2EmJmEubGVuZ3RoPjAmJmEuZm9yRWFjaCgoZT0+e2RlbGV0ZSBlLnRyaWdnZXJ9KSksbltlLnByb3BdPWE7Y29uc3QgdT1uZXcgeWUobiksZD17fTtkW2UucHJvcF09Yi52YWx1ZSx1LnZhbGlkYXRlKGQse2ZpcnN0RmllbGRzOiEwfSwoKHQsYSk9Pnt2YXIgbjtpLnZhbHVlPXQ/XCJlcnJvclwiOlwic3VjY2Vzc1wiLHIudmFsdWU9dD90WzBdLm1lc3NhZ2U6XCJcIixsKHIudmFsdWUsYSksbnVsbD09PShuPW8uZW1pdCl8fHZvaWQgMD09PW58fG4uY2FsbChvLFwidmFsaWRhdGVcIixlLnByb3AsIXQsci52YWx1ZXx8bnVsbCl9KSl9LE49KCk9Pntjb25zdCB0PW8ucnVsZXMsbD1lLnJ1bGVzLGE9dm9pZCAwIT09ZS5yZXF1aXJlZD97cmVxdWlyZWQ6ISFlLnJlcXVpcmVkfTpbXSxuPSRlKHQsZS5wcm9wfHxcIlwiLCExKSxpPXQ/bi5vW2UucHJvcHx8XCJcIl18fG4udjpbXTtyZXR1cm5bXS5jb25jYXQobHx8aXx8W10pLmNvbmNhdChhKX0sRD1lPT5OKCkuZmlsdGVyKCh0PT4hdC50cmlnZ2VyfHxcIlwiPT09ZXx8KEFycmF5LmlzQXJyYXkodC50cmlnZ2VyKT90LnRyaWdnZXIuaW5kZXhPZihlKT4tMTp0LnRyaWdnZXI9PT1lKSkpLm1hcCgoZT0+T2JqZWN0LmFzc2lnbih7fSxlKSkpLFA9KCk9PntUKFwiYmx1clwiKX0sVj0oKT0+e3MudmFsdWU/cy52YWx1ZT0hMTpUKFwiY2hhbmdlXCIpfSxJPSgpPT57KE4oKS5sZW5ndGh8fHZvaWQgMCE9PWUucmVxdWlyZWQpJiYoYS5vbihcImVsLmZvcm0uYmx1clwiLFApLGEub24oXCJlbC5mb3JtLmNoYW5nZVwiLFYpKX0sQT1mKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSxDKGUpKSx7c2l6ZTpNLHZhbGlkYXRlU3RhdGU6aSxyZW1vdmVWYWxpZGF0ZUV2ZW50czooKT0+e2Eub2ZmKFwiZWwuZm9ybS5ibHVyXCIsUCksYS5vZmYoXCJlbC5mb3JtLmNoYW5nZVwiLFYpfSxhZGRWYWxpZGF0ZUV2ZW50czpJLHJlc2V0RmllbGQ6KCk9PntpLnZhbHVlPVwiXCIsci52YWx1ZT1cIlwiO2xldCB0PW8ubW9kZWwsbD1iLnZhbHVlLGE9ZS5wcm9wOy0xIT09YS5pbmRleE9mKFwiOlwiKSYmKGE9YS5yZXBsYWNlKC86LyxcIi5cIikpO2xldCBuPSRlKHQsYSwhMCk7cy52YWx1ZT0hMCxBcnJheS5pc0FycmF5KGwpP24ub1tuLmtdPVtdLmNvbmNhdChwKTpuLm9bbi5rXT1wLGsoKCgpPT57cy52YWx1ZT0hMX0pKX0sY2xlYXJWYWxpZGF0ZTooKT0+e2kudmFsdWU9XCJcIixyLnZhbHVlPVwiXCIscy52YWx1ZT0hMX0sdmFsaWRhdGU6VCxmb3JtSXRlbU1pdHQ6YSx1cGRhdGVDb21wdXRlZExhYmVsV2lkdGg6ZT0+e3UudmFsdWU9ZT9lK1wicHhcIjpcIlwifX0pKTtfKCgoKT0+e3ZhciB0O2lmKGUucHJvcCl7bnVsbD09PSh0PW8uZm9ybU1pdHQpfHx2b2lkIDA9PT10fHx0LmVtaXQoXCJlbC5mb3JtLmFkZEZpZWxkXCIsQSk7bGV0IGU9Yi52YWx1ZTtwPUFycmF5LmlzQXJyYXkoZSk/Wy4uLmVdOmUsSSgpfX0pKSxPKCgoKT0+e3ZhciBlO251bGw9PT0oZT1vLmZvcm1NaXR0KXx8dm9pZCAwPT09ZXx8ZS5lbWl0KFwiZWwuZm9ybS5yZW1vdmVGaWVsZFwiLEEpfSkpLHgoXCJlbEZvcm1JdGVtXCIsQSk7cmV0dXJue2Zvcm1JdGVtQ2xhc3M6bCgoKCk9Plt7XCJlbC1mb3JtLWl0ZW0tLWZlZWRiYWNrXCI6by5zdGF0dXNJY29uLFwiaXMtZXJyb3JcIjpcImVycm9yXCI9PT1pLnZhbHVlLFwiaXMtdmFsaWRhdGluZ1wiOlwidmFsaWRhdGluZ1wiPT09aS52YWx1ZSxcImlzLXN1Y2Nlc3NcIjpcInN1Y2Nlc3NcIj09PWkudmFsdWUsXCJpcy1yZXF1aXJlZFwiOlMudmFsdWV8fGUucmVxdWlyZWQsXCJpcy1uby1hc3Rlcmlza1wiOm8uaGlkZVJlcXVpcmVkQXN0ZXJpc2t9LE0udmFsdWU/XCJlbC1mb3JtLWl0ZW0tLVwiK00udmFsdWU6XCJcIl0pKSxzaG91bGRTaG93RXJyb3I6bCgoKCk9PlwiZXJyb3JcIj09PWkudmFsdWUmJmUuc2hvd01lc3NhZ2UmJm8uc2hvd01lc3NhZ2UpKSxlbEZvcm06byxsYWJlbFN0eWxlOm0sY29udGVudFN0eWxlOmcsdmFsaWRhdGVNZXNzYWdlOnIsbGFiZWxGb3I6aH19fSk7VmkucmVuZGVyPWZ1bmN0aW9uKGUsdCxsLHIsaCx2KXtjb25zdCBtPVAoXCJMYWJlbFdyYXBcIik7cmV0dXJuIGEoKSxuKFwiZGl2XCIse2NsYXNzOltcImVsLWZvcm0taXRlbVwiLGUuZm9ybUl0ZW1DbGFzc119LFtzKG0se1wiaXMtYXV0by13aWR0aFwiOlwiYXV0b1wiPT09ZS5sYWJlbFN0eWxlLndpZHRoLFwidXBkYXRlLWFsbFwiOlwiYXV0b1wiPT09ZS5lbEZvcm0ubGFiZWxXaWR0aH0se2RlZmF1bHQ6aSgoKCk9PltlLmxhYmVsfHxlLiRzbG90cy5sYWJlbD8oYSgpLG4oXCJsYWJlbFwiLHtrZXk6MCxmb3I6ZS5sYWJlbEZvcixjbGFzczpcImVsLWZvcm0taXRlbV9fbGFiZWxcIixzdHlsZTplLmxhYmVsU3R5bGV9LFtkKGUuJHNsb3RzLFwibGFiZWxcIix7fSwoKCk9PltjKHAoZS5sYWJlbCtlLmVsRm9ybS5sYWJlbFN1ZmZpeCksMSldKSldLDEyLFtcImZvclwiXSkpOnUoXCJ2LWlmXCIsITApXSkpLF86MX0sOCxbXCJpcy1hdXRvLXdpZHRoXCIsXCJ1cGRhdGUtYWxsXCJdKSxzKFwiZGl2XCIse2NsYXNzOlwiZWwtZm9ybS1pdGVtX19jb250ZW50XCIsc3R5bGU6ZS5jb250ZW50U3R5bGV9LFtkKGUuJHNsb3RzLFwiZGVmYXVsdFwiKSxzKG8se25hbWU6XCJlbC16b29tLWluLXRvcFwifSx7ZGVmYXVsdDppKCgoKT0+W2Uuc2hvdWxkU2hvd0Vycm9yP2QoZS4kc2xvdHMsXCJlcnJvclwiLHtrZXk6MCxlcnJvcjplLnZhbGlkYXRlTWVzc2FnZX0sKCgpPT5bcyhcImRpdlwiLHtjbGFzczpbXCJlbC1mb3JtLWl0ZW1fX2Vycm9yXCIse1wiZWwtZm9ybS1pdGVtX19lcnJvci0taW5saW5lXCI6XCJib29sZWFuXCI9PXR5cGVvZiBlLmlubGluZU1lc3NhZ2U/ZS5pbmxpbmVNZXNzYWdlOmUuZWxGb3JtLmlubGluZU1lc3NhZ2V8fCExfV19LHAoZS52YWxpZGF0ZU1lc3NhZ2UpLDMpXSkpOnUoXCJ2LWlmXCIsITApXSkpLF86MX0pXSw0KV0sMil9LFZpLl9fZmlsZT1cInBhY2thZ2VzL2Zvcm0vc3JjL2Zvcm0taXRlbS52dWVcIixWaS5pbnN0YWxsPWU9PntlLmNvbXBvbmVudChWaS5uYW1lLFZpKX07dmFyIElpPWUoe25hbWU6XCJFbEhlYWRlclwiLHByb3BzOntoZWlnaHQ6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCI2MHB4XCJ9fX0pO0lpLnJlbmRlcj1mdW5jdGlvbihlLHQsbCxvLGkscil7cmV0dXJuIGEoKSxuKFwiaGVhZGVyXCIse2NsYXNzOlwiZWwtaGVhZGVyXCIsc3R5bGU6e2hlaWdodDplLmhlaWdodH19LFtkKGUuJHNsb3RzLFwiZGVmYXVsdFwiKV0sNCl9LElpLl9fZmlsZT1cInBhY2thZ2VzL2NvbnRhaW5lci9zcmMvaGVhZGVyLnZ1ZVwiLElpLmluc3RhbGw9ZT0+e2UuY29tcG9uZW50KElpLm5hbWUsSWkpfTt2YXIgQWk9ZSh7bmFtZTpcIkVsSWNvblwiLHByb3BzOntuYW1lOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiXCJ9fX0pO0FpLnJlbmRlcj1mdW5jdGlvbihlLHQsbCxvLGkscil7cmV0dXJuIGEoKSxuKFwiaVwiLHtjbGFzczpcImVsLWljb24tXCIrZS5uYW1lfSxudWxsLDIpfSxBaS5fX2ZpbGU9XCJwYWNrYWdlcy9pY29uL3NyYy9pbmRleC52dWVcIixBaS5pbnN0YWxsPWU9PntlLmNvbXBvbmVudChBaS5uYW1lLEFpKX07Y29uc3QgQmk9e0NPTlRBSU46e25hbWU6XCJjb250YWluXCIsaWNvbjpcImVsLWljb24tZnVsbC1zY3JlZW5cIn0sT1JJR0lOQUw6e25hbWU6XCJvcmlnaW5hbFwiLGljb246XCJlbC1pY29uLWMtc2NhbGUtdG8tb3JpZ2luYWxcIn19LExpPSF6ZSYmd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL2ZpcmVmb3gvaSk/XCJET01Nb3VzZVNjcm9sbFwiOlwibW91c2V3aGVlbFwiO3ZhciB6aT1lKHtuYW1lOlwiRWxJbWFnZVZpZXdlclwiLHByb3BzOnt1cmxMaXN0Ont0eXBlOkFycmF5LGRlZmF1bHQ6KCk9PltdfSx6SW5kZXg6e3R5cGU6TnVtYmVyLGRlZmF1bHQ6MmUzfSxvblN3aXRjaDp7dHlwZTpGdW5jdGlvbixkZWZhdWx0OigpPT4oe30pfSxvbkNsb3NlOnt0eXBlOkZ1bmN0aW9uLGRlZmF1bHQ6KCk9Pih7fSl9LGluaXRpYWxJbmRleDp7dHlwZTpOdW1iZXIsZGVmYXVsdDowfX0sc2V0dXAoZSl7bGV0IGE9bnVsbCxuPW51bGwsbz1udWxsO2NvbnN0IGk9dCghMCkscj10KGUuaW5pdGlhbEluZGV4KSxzPXQoITApLHU9dChudWxsKSxkPXQobnVsbCksYz10KEJpLkNPTlRBSU4pO2xldCBwPXQoe3NjYWxlOjEsZGVnOjAsb2Zmc2V0WDowLG9mZnNldFk6MCxlbmFibGVUcmFuc2l0aW9uOiExfSk7Y29uc3QgaD1sKCgoKT0+e2NvbnN0e3VybExpc3Q6dH09ZTtyZXR1cm4gdC5sZW5ndGg8PTF9KSksdj1sKCgoKT0+MD09PXIudmFsdWUpKSxtPWwoKCgpPT4wPT09ci52YWx1ZSkpLGY9bCgoKCk9PmUudXJsTGlzdFtyLnZhbHVlXSkpLGc9bCgoKCk9Pntjb25zdHtzY2FsZTplLGRlZzp0LG9mZnNldFg6bCxvZmZzZXRZOmEsZW5hYmxlVHJhbnNpdGlvbjpufT1wLnZhbHVlLG89e3RyYW5zZm9ybTpgc2NhbGUoJHtlfSkgcm90YXRlKCR7dH1kZWcpYCx0cmFuc2l0aW9uOm4/XCJ0cmFuc2Zvcm0gLjNzXCI6XCJcIixcIm1hcmdpbi1sZWZ0XCI6bCtcInB4XCIsXCJtYXJnaW4tdG9wXCI6YStcInB4XCJ9O3JldHVybiBjLnZhbHVlLm5hbWU9PT1CaS5DT05UQUlOLm5hbWUmJihvLm1heFdpZHRoPW8ubWF4SGVpZ2h0PVwiMTAwJVwiKSxvfSkpO2Z1bmN0aW9uIGIoKXthdChkb2N1bWVudCxcImtleWRvd25cIixhKSxhdChkb2N1bWVudCxMaSxuKSxhPW51bGwsbj1udWxsLGUub25DbG9zZSgpfWZ1bmN0aW9uIEMoKXtwLnZhbHVlPXtzY2FsZToxLGRlZzowLG9mZnNldFg6MCxvZmZzZXRZOjAsZW5hYmxlVHJhbnNpdGlvbjohMX19ZnVuY3Rpb24geCgpe2lmKGkudmFsdWUpcmV0dXJuO2NvbnN0IGU9T2JqZWN0LmtleXMoQmkpLHQ9T2JqZWN0LnZhbHVlcyhCaSksbD1jLnZhbHVlLm5hbWUsYT0odC5maW5kSW5kZXgoKGU9PmUubmFtZT09PWwpKSsxKSVlLmxlbmd0aDtjLnZhbHVlPUJpW2VbYV1dLEMoKX1mdW5jdGlvbiB3KCl7aWYodi52YWx1ZSYmIXMudmFsdWUpcmV0dXJuO2NvbnN0IHQ9ZS51cmxMaXN0Lmxlbmd0aDtyLnZhbHVlPShyLnZhbHVlLTErdCkldH1mdW5jdGlvbiBTKCl7aWYobS52YWx1ZSYmIXMudmFsdWUpcmV0dXJuO2NvbnN0IHQ9ZS51cmxMaXN0Lmxlbmd0aDtyLnZhbHVlPShyLnZhbHVlKzEpJXR9ZnVuY3Rpb24gRShlLHQ9e30pe2lmKGkudmFsdWUpcmV0dXJuO2NvbnN0e3pvb21SYXRlOmwscm90YXRlRGVnOmEsZW5hYmxlVHJhbnNpdGlvbjpufT1PYmplY3QuYXNzaWduKHt6b29tUmF0ZTouMixyb3RhdGVEZWc6OTAsZW5hYmxlVHJhbnNpdGlvbjohMH0sdCk7c3dpdGNoKGUpe2Nhc2VcInpvb21PdXRcIjpwLnZhbHVlLnNjYWxlPi4yJiYocC52YWx1ZS5zY2FsZT1wYXJzZUZsb2F0KChwLnZhbHVlLnNjYWxlLWwpLnRvRml4ZWQoMykpKTticmVhaztjYXNlXCJ6b29tSW5cIjpwLnZhbHVlLnNjYWxlPXBhcnNlRmxvYXQoKHAudmFsdWUuc2NhbGUrbCkudG9GaXhlZCgzKSk7YnJlYWs7Y2FzZVwiY2xvY2VsaXNlXCI6cC52YWx1ZS5kZWcrPWE7YnJlYWs7Y2FzZVwiYW50aWNsb2NlbGlzZVwiOnAudmFsdWUuZGVnLT1hfXAudmFsdWUuZW5hYmxlVHJhbnNpdGlvbj1ufXJldHVybiB5KGYsKCgpPT57aygoKCk9PntkLnZhbHVlLmNvbXBsZXRlfHwoaS52YWx1ZT0hMCl9KSl9KSkseShyLCh0PT57QygpLGUub25Td2l0Y2godCl9KSksXygoKCk9Pnt2YXIgZTthPWplKChlPT57c3dpdGNoKGUuY29kZSl7Y2FzZSBmdC5lc2M6YigpO2JyZWFrO2Nhc2UgZnQuc3BhY2U6eCgpO2JyZWFrO2Nhc2UgZnQubGVmdDp3KCk7YnJlYWs7Y2FzZSBmdC51cDpFKFwiem9vbUluXCIpO2JyZWFrO2Nhc2UgZnQucmlnaHQ6UygpO2JyZWFrO2Nhc2UgZnQuZG93bjpFKFwiem9vbU91dFwiKX19KSksbj1qZSgoZT0+e0UoKGUud2hlZWxEZWx0YT9lLndoZWVsRGVsdGE6LWUuZGV0YWlsKT4wP1wiem9vbUluXCI6XCJ6b29tT3V0XCIse3pvb21SYXRlOi4wMTUsZW5hYmxlVHJhbnNpdGlvbjohMX0pfSkpLGx0KGRvY3VtZW50LFwia2V5ZG93blwiLGEpLGx0KGRvY3VtZW50LExpLG4pLG51bGw9PT0oZT11LnZhbHVlKXx8dm9pZCAwPT09ZXx8ZS5mb2N1cygpfSkpLHtpbmRleDpyLHdyYXBwZXI6dSxpbWc6ZCxpbmZpbml0ZTohMCxsb2FkaW5nOiExLGlzU2luZ2xlOmgsaXNGaXJzdDp2LGlzTGFzdDptLGN1cnJlbnRJbWc6ZixpbWdTdHlsZTpnLG1vZGU6YyxoYW5kbGVBY3Rpb25zOkUscHJldjp3LG5leHQ6UyxoaWRlOmIsdG9nZ2xlTW9kZTp4LGhhbmRsZUltZ0xvYWQ6ZnVuY3Rpb24oKXtpLnZhbHVlPSExfSxoYW5kbGVJbWdFcnJvcjpmdW5jdGlvbihlKXtpLnZhbHVlPSExLGUudGFyZ2V0LmFsdD1xbChcImVsLmltYWdlLmVycm9yXCIpfSxoYW5kbGVNb3VzZURvd246ZnVuY3Rpb24oZSl7aWYoaS52YWx1ZXx8MCE9PWUuYnV0dG9uKXJldHVybjtjb25zdHtvZmZzZXRYOnQsb2Zmc2V0WTpsfT1wLnZhbHVlLGE9ZS5wYWdlWCxuPWUucGFnZVk7bz1qZSgoZT0+e3AudmFsdWU9T2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LHAudmFsdWUpLHtvZmZzZXRYOnQrZS5wYWdlWC1hLG9mZnNldFk6bCtlLnBhZ2VZLW59KX0pKSxsdChkb2N1bWVudCxcIm1vdXNlbW92ZVwiLG8pLGx0KGRvY3VtZW50LFwibW91c2V1cFwiLCgoKT0+e2F0KGRvY3VtZW50LFwibW91c2Vtb3ZlXCIsbyl9KSksZS5wcmV2ZW50RGVmYXVsdCgpfX19fSk7Y29uc3QgRmk9cyhcImRpdlwiLHtjbGFzczpcImVsLWltYWdlLXZpZXdlcl9fbWFza1wifSxudWxsLC0xKSwkaT1zKFwiaVwiLHtjbGFzczpcImVsLWljb24tY2lyY2xlLWNsb3NlXCJ9LG51bGwsLTEpLFJpPXMoXCJpXCIse2NsYXNzOlwiZWwtaWNvbi1hcnJvdy1sZWZ0XCJ9LG51bGwsLTEpLEhpPXMoXCJpXCIse2NsYXNzOlwiZWwtaWNvbi1hcnJvdy1yaWdodFwifSxudWxsLC0xKSxXaT17Y2xhc3M6XCJlbC1pbWFnZS12aWV3ZXJfX2J0biBlbC1pbWFnZS12aWV3ZXJfX2FjdGlvbnNcIn0samk9e2NsYXNzOlwiZWwtaW1hZ2Utdmlld2VyX19hY3Rpb25zX19pbm5lclwifSxLaT1zKFwiaVwiLHtjbGFzczpcImVsLWltYWdlLXZpZXdlcl9fYWN0aW9uc19fZGl2aWRlclwifSxudWxsLC0xKSxZaT1zKFwiaVwiLHtjbGFzczpcImVsLWltYWdlLXZpZXdlcl9fYWN0aW9uc19fZGl2aWRlclwifSxudWxsLC0xKSxxaT17Y2xhc3M6XCJlbC1pbWFnZS12aWV3ZXJfX2NhbnZhc1wifTt6aS5yZW5kZXI9ZnVuY3Rpb24oZSx0LGwsZCxjLHApe3JldHVybiBhKCksbihvLHtuYW1lOlwidmlld2VyLWZhZGVcIn0se2RlZmF1bHQ6aSgoKCk9PltzKFwiZGl2XCIse3JlZjpcIndyYXBwZXJcIix0YWJpbmRleDpcIi0xXCIsY2xhc3M6XCJlbC1pbWFnZS12aWV3ZXJfX3dyYXBwZXJcIixzdHlsZTp7XCJ6LWluZGV4XCI6ZS56SW5kZXh9fSxbRmksdShcIiBDTE9TRSBcIikscyhcInNwYW5cIix7Y2xhc3M6XCJlbC1pbWFnZS12aWV3ZXJfX2J0biBlbC1pbWFnZS12aWV3ZXJfX2Nsb3NlXCIsb25DbGljazp0WzFdfHwodFsxXT0oLi4udCk9PmUuaGlkZSguLi50KSl9LFskaV0pLHUoXCIgQVJST1cgXCIpLGUuaXNTaW5nbGU/dShcInYtaWZcIiwhMCk6KGEoKSxuKEUse2tleTowfSxbcyhcInNwYW5cIix7Y2xhc3M6W1wiZWwtaW1hZ2Utdmlld2VyX19idG4gZWwtaW1hZ2Utdmlld2VyX19wcmV2XCIse1wiaXMtZGlzYWJsZWRcIjohZS5pbmZpbml0ZSYmZS5pc0ZpcnN0fV0sb25DbGljazp0WzJdfHwodFsyXT0oLi4udCk9PmUucHJldiguLi50KSl9LFtSaV0sMikscyhcInNwYW5cIix7Y2xhc3M6W1wiZWwtaW1hZ2Utdmlld2VyX19idG4gZWwtaW1hZ2Utdmlld2VyX19uZXh0XCIse1wiaXMtZGlzYWJsZWRcIjohZS5pbmZpbml0ZSYmZS5pc0xhc3R9XSxvbkNsaWNrOnRbM118fCh0WzNdPSguLi50KT0+ZS5uZXh0KC4uLnQpKX0sW0hpXSwyKV0sNjQpKSx1KFwiIEFDVElPTlMgXCIpLHMoXCJkaXZcIixXaSxbcyhcImRpdlwiLGppLFtzKFwiaVwiLHtjbGFzczpcImVsLWljb24tem9vbS1vdXRcIixvbkNsaWNrOnRbNF18fCh0WzRdPXQ9PmUuaGFuZGxlQWN0aW9ucyhcInpvb21PdXRcIikpfSkscyhcImlcIix7Y2xhc3M6XCJlbC1pY29uLXpvb20taW5cIixvbkNsaWNrOnRbNV18fCh0WzVdPXQ9PmUuaGFuZGxlQWN0aW9ucyhcInpvb21JblwiKSl9KSxLaSxzKFwiaVwiLHtjbGFzczplLm1vZGUuaWNvbixvbkNsaWNrOnRbNl18fCh0WzZdPSguLi50KT0+ZS50b2dnbGVNb2RlKC4uLnQpKX0sbnVsbCwyKSxZaSxzKFwiaVwiLHtjbGFzczpcImVsLWljb24tcmVmcmVzaC1sZWZ0XCIsb25DbGljazp0WzddfHwodFs3XT10PT5lLmhhbmRsZUFjdGlvbnMoXCJhbnRpY2xvY2VsaXNlXCIpKX0pLHMoXCJpXCIse2NsYXNzOlwiZWwtaWNvbi1yZWZyZXNoLXJpZ2h0XCIsb25DbGljazp0WzhdfHwodFs4XT10PT5lLmhhbmRsZUFjdGlvbnMoXCJjbG9jZWxpc2VcIikpfSldKV0pLHUoXCIgQ0FOVkFTIFwiKSxzKFwiZGl2XCIscWksWyhhKCEwKSxuKEUsbnVsbCxIKGUudXJsTGlzdCwoKGwsbyk9PnIoKGEoKSxuKFwiaW1nXCIse3JlZjpcImltZ1wiLGtleTpsLHNyYzplLmN1cnJlbnRJbWcsc3R5bGU6ZS5pbWdTdHlsZSxjbGFzczpcImVsLWltYWdlLXZpZXdlcl9faW1nXCIsb25Mb2FkOnRbOV18fCh0WzldPSguLi50KT0+ZS5oYW5kbGVJbWdMb2FkKC4uLnQpKSxvbkVycm9yOnRbMTBdfHwodFsxMF09KC4uLnQpPT5lLmhhbmRsZUltZ0Vycm9yKC4uLnQpKSxvbk1vdXNlZG93bjp0WzExXXx8KHRbMTFdPSguLi50KT0+ZS5oYW5kbGVNb3VzZURvd24oLi4udCkpfSxudWxsLDQ0LFtcInNyY1wiXSkpLFtbaCxvPT09ZS5pbmRleF1dKSkpLDEyOCkpXSldLDQpXSkpLF86MX0pfSx6aS5fX2ZpbGU9XCJwYWNrYWdlcy9pbWFnZS9zcmMvaW1hZ2Utdmlld2VyLnZ1ZVwiO2NvbnN0IFVpPSgpPT52b2lkIDAhPT1kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUub2JqZWN0Rml0LEdpPVwibm9uZVwiLFhpPVwiY29udGFpblwiLFFpPVwiY292ZXJcIixaaT1cImZpbGxcIixKaT1cInNjYWxlLWRvd25cIjtsZXQgZXI9XCJcIjt2YXIgdHI9ZSh7bmFtZTpcIkVsSW1hZ2VcIixjb21wb25lbnRzOntJbWFnZVZpZXdlcjp6aX0saW5oZXJpdEF0dHJzOiExLHByb3BzOntzcmM6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJcIn0sZml0Ont0eXBlOlN0cmluZyxkZWZhdWx0OlwiXCJ9LGxhenk6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiExfSxzY3JvbGxDb250YWluZXI6e3R5cGU6W1N0cmluZyxPYmplY3RdLGRlZmF1bHQ6bnVsbH0scHJldmlld1NyY0xpc3Q6e3R5cGU6QXJyYXksZGVmYXVsdDooKT0+W119LHpJbmRleDp7dHlwZTpOdW1iZXIsZGVmYXVsdDoyZTN9fSxlbWl0czpbXCJlcnJvclwiXSxzZXR1cChlLHtlbWl0OmF9KXtjb25zdCBuPXR0KCksbz10KCExKSxpPXQoITApLHI9dCgwKSxzPXQoMCksdT10KCExKSxkPXQobnVsbCk7bGV0IGM9bnVsbCxwPW51bGw7Y29uc3QgaD1sKCgoKT0+e2NvbnN0e2ZpdDp0fT1lO3JldHVybiF6ZSYmdD9VaSgpP3tcIm9iamVjdC1maXRcIjp0fTpmdW5jdGlvbihlKXtjb25zdCB0PXIudmFsdWUsbD1zLnZhbHVlO2lmKCFkLnZhbHVlKXJldHVybnt9O2NvbnN0e2NsaWVudFdpZHRoOmEsY2xpZW50SGVpZ2h0Om59PWQudmFsdWU7aWYoISh0JiZsJiZhJiZuKSlyZXR1cm57fTtjb25zdCBvPXQvbDwxO2lmKGU9PT1KaSl7ZT10PGEmJmw8bj9HaTpYaX1zd2l0Y2goZSl7Y2FzZSBHaTpyZXR1cm57d2lkdGg6XCJhdXRvXCIsaGVpZ2h0OlwiYXV0b1wifTtjYXNlIFhpOnJldHVybiBvP3t3aWR0aDpcImF1dG9cIn06e2hlaWdodDpcImF1dG9cIn07Y2FzZSBRaTpyZXR1cm4gbz97aGVpZ2h0OlwiYXV0b1wifTp7d2lkdGg6XCJhdXRvXCJ9O2RlZmF1bHQ6cmV0dXJue319fSh0KTp7fX0pKSx2PWwoKCgpPT57Y29uc3R7Zml0OnR9PWU7cmV0dXJuIXplJiYhVWkoKSYmdCE9PVppfSkpLG09bCgoKCk9Pntjb25zdHtwcmV2aWV3U3JjTGlzdDp0fT1lO3JldHVybiBBcnJheS5pc0FycmF5KHQpJiZ0Lmxlbmd0aD4wfSkpLGY9bCgoKCk9Pntjb25zdHtzcmM6dCxwcmV2aWV3U3JjTGlzdDpsfT1lO2xldCBhPTA7Y29uc3Qgbj1sLmluZGV4T2YodCk7cmV0dXJuIG4+PTAmJihhPW4pLGF9KSk7Y29uc3QgZz0oKT0+e2lmKHplKXJldHVybjtjb25zdCB0PW4udmFsdWU7aS52YWx1ZT0hMCxvLnZhbHVlPSExO2NvbnN0IGw9bmV3IEltYWdlO2wub25sb2FkPWU9PmZ1bmN0aW9uKGUsdCl7ci52YWx1ZT10LndpZHRoLHMudmFsdWU9dC5oZWlnaHQsaS52YWx1ZT0hMSxvLnZhbHVlPSExfSgwLGwpLGwub25lcnJvcj1iLE9iamVjdC5rZXlzKHQpLmZvckVhY2goKGU9Pntjb25zdCBhPXRbZV07bC5zZXRBdHRyaWJ1dGUoZSxhKX0pKSxsLnNyYz1lLnNyY307ZnVuY3Rpb24gYihlKXtpLnZhbHVlPSExLG8udmFsdWU9ITAsYShcImVycm9yXCIsZSl9ZnVuY3Rpb24gQygpeygoZSx0KT0+e2lmKHplfHwhZXx8IXQpcmV0dXJuITE7Y29uc3QgbD1lLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO2xldCBhO3JldHVybiBhPVt3aW5kb3csZG9jdW1lbnQsZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LG51bGwsdm9pZCAwXS5pbmNsdWRlcyh0KT97dG9wOjAscmlnaHQ6d2luZG93LmlubmVyV2lkdGgsYm90dG9tOndpbmRvdy5pbm5lckhlaWdodCxsZWZ0OjB9OnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksbC50b3A8YS5ib3R0b20mJmwuYm90dG9tPmEudG9wJiZsLnJpZ2h0PmEubGVmdCYmbC5sZWZ0PGEucmlnaHR9KShkLnZhbHVlLGMpJiYoZygpLHcoKSl9ZnVuY3Rpb24geCgpe2lmKHplKXJldHVybjtjb25zdHtzY3JvbGxDb250YWluZXI6dH09ZTt2YXIgbDtjPShsPXQpJiYxPT09bC5ub2RlVHlwZT90Ok5lKHQpJiZcIlwiIT09dD9kb2N1bWVudC5xdWVyeVNlbGVjdG9yKHQpOnV0KGQudmFsdWUpLGMmJihwPXJlKEMsMjAwKSxsdChjLFwic2Nyb2xsXCIscCksc2V0VGltZW91dCgoKCk9PkMoKSksMTAwKSl9ZnVuY3Rpb24gdygpeyF6ZSYmYyYmcCYmKGF0KGMsXCJzY3JvbGxcIixwKSxjPW51bGwscD1udWxsKX1yZXR1cm4geSgoKCk9PmUuc3JjKSwoKCk9PntnKCl9KSksXygoKCk9PntlLmxhenk/ayh4KTpnKCl9KSksTygoKCk9PntlLmxhenkmJncoKX0pKSx7YXR0cnM6bixsb2FkaW5nOmksaGFzTG9hZEVycm9yOm8sc2hvd1ZpZXdlcjp1LGltZ1dpZHRoOnIsaW1nSGVpZ2h0OnMsaW1hZ2VTdHlsZTpoLGFsaWduQ2VudGVyOnYscHJldmlldzptLGltYWdlSW5kZXg6ZixjbGlja0hhbmRsZXI6ZnVuY3Rpb24oKXttLnZhbHVlJiYoZXI9ZG9jdW1lbnQuYm9keS5zdHlsZS5vdmVyZmxvdyxkb2N1bWVudC5ib2R5LnN0eWxlLm92ZXJmbG93PVwiaGlkZGVuXCIsdS52YWx1ZT0hMCl9LGNsb3NlVmlld2VyOmZ1bmN0aW9uKCl7ZG9jdW1lbnQuYm9keS5zdHlsZS5vdmVyZmxvdz1lcix1LnZhbHVlPSExfSxjb250YWluZXI6ZCxoYW5kbGVFcnJvcjpiLHQ6cWx9fX0pO2NvbnN0IGxyPXMoXCJkaXZcIix7Y2xhc3M6XCJlbC1pbWFnZV9fcGxhY2Vob2xkZXJcIn0sbnVsbCwtMSksYXI9e2NsYXNzOlwiZWwtaW1hZ2VfX2Vycm9yXCJ9O1xuLyohICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG5Db3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cblxuUGVybWlzc2lvbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgYW5kL29yIGRpc3RyaWJ1dGUgdGhpcyBzb2Z0d2FyZSBmb3IgYW55XG5wdXJwb3NlIHdpdGggb3Igd2l0aG91dCBmZWUgaXMgaGVyZWJ5IGdyYW50ZWQuXG5cblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIgQU5EIFRIRSBBVVRIT1IgRElTQ0xBSU1TIEFMTCBXQVJSQU5USUVTIFdJVEhcblJFR0FSRCBUTyBUSElTIFNPRlRXQVJFIElOQ0xVRElORyBBTEwgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWVxuQU5EIEZJVE5FU1MuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1IgQkUgTElBQkxFIEZPUiBBTlkgU1BFQ0lBTCwgRElSRUNULFxuSU5ESVJFQ1QsIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyBPUiBBTlkgREFNQUdFUyBXSEFUU09FVkVSIFJFU1VMVElORyBGUk9NXG5MT1NTIE9GIFVTRSwgREFUQSBPUiBQUk9GSVRTLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgTkVHTElHRU5DRSBPUlxuT1RIRVIgVE9SVElPVVMgQUNUSU9OLCBBUklTSU5HIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFVTRSBPUlxuUEVSRk9STUFOQ0UgT0YgVEhJUyBTT0ZUV0FSRS5cbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5mdW5jdGlvbiBucihlLHQsbCxhKXtyZXR1cm4gbmV3KGx8fChsPVByb21pc2UpKSgoZnVuY3Rpb24obixvKXtmdW5jdGlvbiBpKGUpe3RyeXtzKGEubmV4dChlKSl9Y2F0Y2goZSl7byhlKX19ZnVuY3Rpb24gcihlKXt0cnl7cyhhLnRocm93KGUpKX1jYXRjaChlKXtvKGUpfX1mdW5jdGlvbiBzKGUpe3ZhciB0O2UuZG9uZT9uKGUudmFsdWUpOih0PWUudmFsdWUsdCBpbnN0YW5jZW9mIGw/dDpuZXcgbCgoZnVuY3Rpb24oZSl7ZSh0KX0pKSkudGhlbihpLHIpfXMoKGE9YS5hcHBseShlLHR8fFtdKSkubmV4dCgpKX0pKX10ci5yZW5kZXI9ZnVuY3Rpb24oZSx0LGwsbyxpLHIpe2NvbnN0IGM9UChcImltYWdlLXZpZXdlclwiKTtyZXR1cm4gYSgpLG4oXCJkaXZcIix7cmVmOlwiY29udGFpbmVyXCIsY2xhc3M6W1wiZWwtaW1hZ2VcIixlLiRhdHRycy5jbGFzc10sc3R5bGU6ZS4kYXR0cnMuc3R5bGV9LFtlLmxvYWRpbmc/ZChlLiRzbG90cyxcInBsYWNlaG9sZGVyXCIse2tleTowfSwoKCk9Pltscl0pKTplLmhhc0xvYWRFcnJvcj9kKGUuJHNsb3RzLFwiZXJyb3JcIix7a2V5OjF9LCgoKT0+W3MoXCJkaXZcIixhcixwKGUudChcImVsLmltYWdlLmVycm9yXCIpKSwxKV0pKTooYSgpLG4oXCJpbWdcIixNKHtrZXk6MixjbGFzczpcImVsLWltYWdlX19pbm5lclwifSxlLmF0dHJzLHtzcmM6ZS5zcmMsc3R5bGU6ZS5pbWFnZVN0eWxlLGNsYXNzOntcImVsLWltYWdlX19pbm5lci0tY2VudGVyXCI6ZS5hbGlnbkNlbnRlcixcImVsLWltYWdlX19wcmV2aWV3XCI6ZS5wcmV2aWV3fSxvbkNsaWNrOnRbMV18fCh0WzFdPSguLi50KT0+ZS5jbGlja0hhbmRsZXIoLi4udCkpfSksbnVsbCwxNixbXCJzcmNcIl0pKSxlLnByZXZpZXc/KGEoKSxuKEUse2tleTozfSxbZS5zaG93Vmlld2VyPyhhKCksbihjLHtrZXk6MCxcInotaW5kZXhcIjplLnpJbmRleCxcImluaXRpYWwtaW5kZXhcIjplLmltYWdlSW5kZXgsXCJvbi1jbG9zZVwiOmUuY2xvc2VWaWV3ZXIsXCJ1cmwtbGlzdFwiOmUucHJldmlld1NyY0xpc3R9LG51bGwsOCxbXCJ6LWluZGV4XCIsXCJpbml0aWFsLWluZGV4XCIsXCJvbi1jbG9zZVwiLFwidXJsLWxpc3RcIl0pKTp1KFwidi1pZlwiLCEwKV0sNjQpKTp1KFwidi1pZlwiLCEwKV0sNil9LHRyLl9fZmlsZT1cInBhY2thZ2VzL2ltYWdlL3NyYy9pbmRleC52dWVcIix0ci5pbnN0YWxsPWU9PntlLmNvbXBvbmVudCh0ci5uYW1lLHRyKX07Y29uc3Qgb3I9XCJFbEluZmluaXRlU2Nyb2xsXCIsaXI9e2RlbGF5Ont0eXBlOk51bWJlcixkZWZhdWx0OjIwMH0sZGlzdGFuY2U6e3R5cGU6TnVtYmVyLGRlZmF1bHQ6MH0sZGlzYWJsZWQ6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiExfSxpbW1lZGlhdGU6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiEwfX0scnI9KGUsdCk9PlllKGlyKS5yZWR1Y2UoKChsLFthLG5dKT0+e3ZhciBvLGk7Y29uc3R7dHlwZTpyLGRlZmF1bHQ6c309bix1PWUuZ2V0QXR0cmlidXRlKFwiaW5maW5pdGUtc2Nyb2xsLVwiK2EpO2xldCBkPW51bGwhPT0oaT1udWxsIT09KG89dFt1XSkmJnZvaWQgMCE9PW8/bzp1KSYmdm9pZCAwIT09aT9pOnM7cmV0dXJuIGQ9XCJmYWxzZVwiIT09ZCYmZCxkPXIoZCksbFthXT1OdW1iZXIuaXNOYU4oZCk/czpkLGx9KSx7fSksc3I9ZT0+e2NvbnN0e29ic2VydmVyOnR9PWVbb3JdO3QmJih0LmRpc2Nvbm5lY3QoKSxkZWxldGUgZVtvcl0ub2JzZXJ2ZXIpfSx1cj0oZSx0KT0+e2NvbnN0e2NvbnRhaW5lcjpsLGNvbnRhaW5lckVsOmEsaW5zdGFuY2U6bixvYnNlcnZlcjpvLGxhc3RTY3JvbGxUb3A6aX09ZVtvcl0se2Rpc2FibGVkOnIsZGlzdGFuY2U6c309cnIoZSxuKSx7Y2xpZW50SGVpZ2h0OnUsc2Nyb2xsSGVpZ2h0OmQsc2Nyb2xsVG9wOmN9PWEscD1jLWk7aWYoZVtvcl0ubGFzdFNjcm9sbFRvcD1jLG98fHJ8fHA8MClyZXR1cm47bGV0IGg9ITE7aWYobD09PWUpaD1kLSh1K2MpPD1zO2Vsc2V7Y29uc3R7Y2xpZW50VG9wOnQsc2Nyb2xsSGVpZ2h0Omx9PWU7aD1jK3U+PSgoZSx0KT0+TWF0aC5hYnMoZHQoZSktZHQodCkpKShlLGEpK3QrbC1zfWgmJnQuY2FsbChuKX07ZnVuY3Rpb24gZHIoZSx0KXtjb25zdHtjb250YWluZXJFbDpsLGluc3RhbmNlOmF9PWVbb3JdLHtkaXNhYmxlZDpufT1ycihlLGEpO258fChsLnNjcm9sbEhlaWdodDw9bC5jbGllbnRIZWlnaHQ/dC5jYWxsKGEpOnNyKGUpKX1jb25zdCBjcj17bW91bnRlZChlLHQpe3JldHVybiBucih0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKigpe2NvbnN0e2luc3RhbmNlOmwsdmFsdWU6YX09dDtUZShhKXx8bXQob3IsXCIndi1pbmZpbml0ZS1zY3JvbGwnIGJpbmRpbmcgdmFsdWUgbXVzdCBiZSBhIGZ1bmN0aW9uXCIpLHlpZWxkIGsoKTtjb25zdHtkZWxheTpuLGltbWVkaWF0ZTpvfT1ycihlLGwpLGk9dXQoZSwhMCkscj1pPT09d2luZG93P2RvY3VtZW50LmRvY3VtZW50RWxlbWVudDppLHM9cmUodXIuYmluZChudWxsLGUsYSksbik7aWYoaSl7aWYoZVtvcl09e2luc3RhbmNlOmwsY29udGFpbmVyOmksY29udGFpbmVyRWw6cixkZWxheTpuLGNiOmEsb25TY3JvbGw6cyxsYXN0U2Nyb2xsVG9wOnIuc2Nyb2xsVG9wfSxvKXtjb25zdCB0PW5ldyBNdXRhdGlvbk9ic2VydmVyKHJlKGRyLmJpbmQobnVsbCxlLGEpLDUwKSk7ZVtvcl0ub2JzZXJ2ZXI9dCx0Lm9ic2VydmUoZSx7Y2hpbGRMaXN0OiEwLHN1YnRyZWU6ITB9KSxkcihlLGEpfWkuYWRkRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLHMpfX0pKX0sdW5tb3VudGVkKGUpe2NvbnN0e2NvbnRhaW5lcjp0LG9uU2Nyb2xsOmx9PWVbb3JdO251bGw9PXR8fHQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLGwpLHNyKGUpfSxpbnN0YWxsOmU9PntlLmRpcmVjdGl2ZShcIkluZmluaXRlU2Nyb2xsXCIsY3IpfX07dmFyIHByPWUoe25hbWU6XCJFbElucHV0TnVtYmVyXCIsY29tcG9uZW50czp7RWxJbnB1dDpXdH0sZGlyZWN0aXZlczp7UmVwZWF0Q2xpY2s6VHR9LHByb3BzOntzdGVwOnt0eXBlOk51bWJlcixkZWZhdWx0OjF9LHN0ZXBTdHJpY3RseTp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITF9LG1heDp7dHlwZTpOdW1iZXIsZGVmYXVsdDoxLzB9LG1pbjp7dHlwZTpOdW1iZXIsZGVmYXVsdDotMS8wfSxtb2RlbFZhbHVlOnt0eXBlOk51bWJlcixkZWZhdWx0OjB9LGRpc2FibGVkOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMX0sc2l6ZTp7dHlwZTpTdHJpbmcsdmFsaWRhdG9yOkF0fSxjb250cm9sczp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITB9LGNvbnRyb2xzUG9zaXRpb246e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJcIn0sbmFtZTpTdHJpbmcsbGFiZWw6U3RyaW5nLHBsYWNlaG9sZGVyOlN0cmluZyxwcmVjaXNpb246e3R5cGU6TnVtYmVyLHZhbGlkYXRvcjplPT5lPj0wJiZlPT09cGFyc2VJbnQoZStcIlwiLDEwKX19LGVtaXRzOltcInVwZGF0ZTptb2RlbFZhbHVlXCIsXCJjaGFuZ2VcIixcImlucHV0XCIsXCJibHVyXCIsXCJmb2N1c1wiXSxzZXR1cChlLHtlbWl0OmF9KXtjb25zdCBuPXFlKCksbz13KFwiZWxGb3JtXCIse30pLGk9dyhcImVsRm9ybUl0ZW1cIix7fSkscj10KG51bGwpLHM9Zih7Y3VycmVudFZhbHVlOjAsdXNlcklucHV0Om51bGx9KSx1PWwoKCgpPT5DKGUubW9kZWxWYWx1ZSk8ZS5taW4pKSxkPWwoKCgpPT5rKGUubW9kZWxWYWx1ZSk+ZS5tYXgpKSxjPWwoKCgpPT57Y29uc3QgdD1iKGUuc3RlcCk7cmV0dXJuIHZvaWQgMCE9PWUucHJlY2lzaW9uPyh0PmUucHJlY2lzaW9uJiZjb25zb2xlLndhcm4oXCJbRWxlbWVudCBXYXJuXVtJbnB1dE51bWJlcl1wcmVjaXNpb24gc2hvdWxkIG5vdCBiZSBsZXNzIHRoYW4gdGhlIGRlY2ltYWwgcGxhY2VzIG9mIHN0ZXBcIiksZS5wcmVjaXNpb24pOk1hdGgubWF4KGIoZS5tb2RlbFZhbHVlKSx0KX0pKSxwPWwoKCgpPT5lLmNvbnRyb2xzJiZcInJpZ2h0XCI9PT1lLmNvbnRyb2xzUG9zaXRpb24pKSxoPWwoKCgpPT5lLnNpemV8fGkuc2l6ZXx8bi5zaXplKSksdj1sKCgoKT0+ZS5kaXNhYmxlZHx8by5kaXNhYmxlZCkpLG09bCgoKCk9PntpZihudWxsIT09cy51c2VySW5wdXQpcmV0dXJuIHMudXNlcklucHV0O2xldCB0PXMuY3VycmVudFZhbHVlO3JldHVyblwibnVtYmVyXCI9PXR5cGVvZiB0JiZ2b2lkIDAhPT1lLnByZWNpc2lvbiYmKHQ9dC50b0ZpeGVkKGUucHJlY2lzaW9uKSksdH0pKSxnPShlLHQpPT4odm9pZCAwPT09dCYmKHQ9Yy52YWx1ZSkscGFyc2VGbG9hdChNYXRoLnJvdW5kKGUqTWF0aC5wb3coMTAsdCkpL01hdGgucG93KDEwLHQpK1wiXCIpKSxiPWU9PntpZih2b2lkIDA9PT1lKXJldHVybiAwO2NvbnN0IHQ9ZS50b1N0cmluZygpLGw9dC5pbmRleE9mKFwiLlwiKTtsZXQgYT0wO3JldHVybi0xIT09bCYmKGE9dC5sZW5ndGgtbC0xKSxhfSxrPXQ9PntpZihcIm51bWJlclwiIT10eXBlb2YgdCYmdm9pZCAwIT09dClyZXR1cm4gcy5jdXJyZW50VmFsdWU7Y29uc3QgbD1NYXRoLnBvdygxMCxjLnZhbHVlKTtyZXR1cm4gZygobCp0K2wqZS5zdGVwKS9sKX0sQz10PT57aWYoXCJudW1iZXJcIiE9dHlwZW9mIHQmJnZvaWQgMCE9PXQpcmV0dXJuIHMuY3VycmVudFZhbHVlO2NvbnN0IGw9TWF0aC5wb3coMTAsYy52YWx1ZSk7cmV0dXJuIGcoKGwqdC1sKmUuc3RlcCkvbCl9LHg9dD0+e2NvbnN0IGw9cy5jdXJyZW50VmFsdWU7XCJudW1iZXJcIj09dHlwZW9mIHQmJnZvaWQgMCE9PWUucHJlY2lzaW9uJiYodD1nKHQsZS5wcmVjaXNpb24pKSx0Pj1lLm1heCYmKHQ9ZS5tYXgpLHQ8PWUubWluJiYodD1lLm1pbiksbCE9PXQmJihzLnVzZXJJbnB1dD1udWxsLGEoXCJ1cGRhdGU6bW9kZWxWYWx1ZVwiLHQpLGEoXCJpbnB1dFwiLHQpLGEoXCJjaGFuZ2VcIix0LGwpLHMuY3VycmVudFZhbHVlPXQpfTtyZXR1cm4geSgoKCk9PmUubW9kZWxWYWx1ZSksKHQ9PntsZXQgbD12b2lkIDA9PT10P3Q6TnVtYmVyKHQpO2lmKHZvaWQgMCE9PWwpe2lmKGlzTmFOKGwpKXJldHVybjtpZihlLnN0ZXBTdHJpY3RseSl7Y29uc3QgdD1iKGUuc3RlcCksYT1NYXRoLnBvdygxMCx0KTtsPU1hdGgucm91bmQobC9lLnN0ZXApKmEqZS5zdGVwL2F9dm9pZCAwIT09ZS5wcmVjaXNpb24mJihsPWcobCxlLnByZWNpc2lvbikpfWw+PWUubWF4JiYobD1lLm1heCksbDw9ZS5taW4mJihsPWUubWluKSxzLmN1cnJlbnRWYWx1ZT1sLHMudXNlcklucHV0PW51bGx9KSx7aW1tZWRpYXRlOiEwfSksXygoKCk9PntsZXQgdD1yLnZhbHVlLmlucHV0O3Quc2V0QXR0cmlidXRlKFwicm9sZVwiLFwic3BpbmJ1dHRvblwiKSx0LnNldEF0dHJpYnV0ZShcImFyaWEtdmFsdWVtYXhcIixlLm1heCksdC5zZXRBdHRyaWJ1dGUoXCJhcmlhLXZhbHVlbWluXCIsZS5taW4pLHQuc2V0QXR0cmlidXRlKFwiYXJpYS12YWx1ZW5vd1wiLHMuY3VycmVudFZhbHVlKSx0LnNldEF0dHJpYnV0ZShcImFyaWEtZGlzYWJsZWRcIix2LnZhbHVlKX0pKSxTKCgoKT0+e3IudmFsdWUuaW5wdXQuc2V0QXR0cmlidXRlKFwiYXJpYS12YWx1ZW5vd1wiLHMuY3VycmVudFZhbHVlKX0pKSx7aW5wdXQ6cixkaXNwbGF5VmFsdWU6bSxoYW5kbGVJbnB1dDplPT5zLnVzZXJJbnB1dD1lLGhhbmRsZUlucHV0Q2hhbmdlOmU9Pntjb25zdCB0PVwiXCI9PT1lP3ZvaWQgMDpOdW1iZXIoZSk7aXNOYU4odCkmJlwiXCIhPT1lfHx4KHQpLHMudXNlcklucHV0PW51bGx9LGNvbnRyb2xzQXRSaWdodDpwLGRlY3JlYXNlOigpPT57aWYodi52YWx1ZXx8dS52YWx1ZSlyZXR1cm47Y29uc3QgdD1lLm1vZGVsVmFsdWV8fDAsbD1DKHQpO3gobCl9LGluY3JlYXNlOigpPT57aWYodi52YWx1ZXx8ZC52YWx1ZSlyZXR1cm47Y29uc3QgdD1lLm1vZGVsVmFsdWV8fDAsbD1rKHQpO3gobCl9LGlucHV0TnVtYmVyU2l6ZTpoLGlucHV0TnVtYmVyRGlzYWJsZWQ6dixtYXhEaXNhYmxlZDpkLG1pbkRpc2FibGVkOnV9fX0pO3ByLnJlbmRlcj1mdW5jdGlvbihlLHQsbCxvLGksZCl7Y29uc3QgYz1QKFwiZWwtaW5wdXRcIikscD1GKFwicmVwZWF0LWNsaWNrXCIpO3JldHVybiBhKCksbihcImRpdlwiLHtjbGFzczpbXCJlbC1pbnB1dC1udW1iZXJcIixlLmlucHV0TnVtYmVyU2l6ZT9cImVsLWlucHV0LW51bWJlci0tXCIrZS5pbnB1dE51bWJlclNpemU6XCJcIix7XCJpcy1kaXNhYmxlZFwiOmUuaW5wdXROdW1iZXJEaXNhYmxlZH0se1wiaXMtd2l0aG91dC1jb250cm9sc1wiOiFlLmNvbnRyb2xzfSx7XCJpcy1jb250cm9scy1yaWdodFwiOmUuY29udHJvbHNBdFJpZ2h0fV0sb25EcmFnc3RhcnQ6dFs1XXx8KHRbNV09VCgoKCk9Pnt9KSxbXCJwcmV2ZW50XCJdKSl9LFtlLmNvbnRyb2xzP3IoKGEoKSxuKFwic3BhblwiLHtrZXk6MCxjbGFzczpbXCJlbC1pbnB1dC1udW1iZXJfX2RlY3JlYXNlXCIse1wiaXMtZGlzYWJsZWRcIjplLm1pbkRpc2FibGVkfV0scm9sZTpcImJ1dHRvblwiLG9uS2V5ZG93bjp0WzFdfHwodFsxXT0kKCgoLi4udCk9PmUuZGVjcmVhc2UoLi4udCkpLFtcImVudGVyXCJdKSl9LFtzKFwiaVwiLHtjbGFzczpcImVsLWljb24tXCIrKGUuY29udHJvbHNBdFJpZ2h0P1wiYXJyb3ctZG93blwiOlwibWludXNcIil9LG51bGwsMildLDM0KSksW1twLGUuZGVjcmVhc2VdXSk6dShcInYtaWZcIiwhMCksZS5jb250cm9scz9yKChhKCksbihcInNwYW5cIix7a2V5OjEsY2xhc3M6W1wiZWwtaW5wdXQtbnVtYmVyX19pbmNyZWFzZVwiLHtcImlzLWRpc2FibGVkXCI6ZS5tYXhEaXNhYmxlZH1dLHJvbGU6XCJidXR0b25cIixvbktleWRvd246dFsyXXx8KHRbMl09JCgoKC4uLnQpPT5lLmluY3JlYXNlKC4uLnQpKSxbXCJlbnRlclwiXSkpfSxbcyhcImlcIix7Y2xhc3M6XCJlbC1pY29uLVwiKyhlLmNvbnRyb2xzQXRSaWdodD9cImFycm93LXVwXCI6XCJwbHVzXCIpfSxudWxsLDIpXSwzNCkpLFtbcCxlLmluY3JlYXNlXV0pOnUoXCJ2LWlmXCIsITApLHMoYyx7cmVmOlwiaW5wdXRcIixcIm1vZGVsLXZhbHVlXCI6ZS5kaXNwbGF5VmFsdWUscGxhY2Vob2xkZXI6ZS5wbGFjZWhvbGRlcixkaXNhYmxlZDplLmlucHV0TnVtYmVyRGlzYWJsZWQsc2l6ZTplLmlucHV0TnVtYmVyU2l6ZSxtYXg6ZS5tYXgsbWluOmUubWluLG5hbWU6ZS5uYW1lLGxhYmVsOmUubGFiZWwsb25LZXlkb3duOlskKFQoZS5pbmNyZWFzZSxbXCJwcmV2ZW50XCJdKSxbXCJ1cFwiXSksJChUKGUuZGVjcmVhc2UsW1wicHJldmVudFwiXSksW1wiZG93blwiXSldLG9uQmx1cjp0WzNdfHwodFszXT10PT5lLiRlbWl0KFwiYmx1clwiLHQpKSxvbkZvY3VzOnRbNF18fCh0WzRdPXQ9PmUuJGVtaXQoXCJmb2N1c1wiLHQpKSxvbklucHV0OmUuaGFuZGxlSW5wdXQsb25DaGFuZ2U6ZS5oYW5kbGVJbnB1dENoYW5nZX0sbnVsbCw4LFtcIm1vZGVsLXZhbHVlXCIsXCJwbGFjZWhvbGRlclwiLFwiZGlzYWJsZWRcIixcInNpemVcIixcIm1heFwiLFwibWluXCIsXCJuYW1lXCIsXCJsYWJlbFwiLFwib25LZXlkb3duXCIsXCJvbklucHV0XCIsXCJvbkNoYW5nZVwiXSldLDM0KX0scHIuX19maWxlPVwicGFja2FnZXMvaW5wdXQtbnVtYmVyL3NyYy9pbmRleC52dWVcIixwci5pbnN0YWxsPWU9PntlLmNvbXBvbmVudChwci5uYW1lLHByKX07dmFyIGhyPWUoe25hbWU6XCJFbExpbmtcIixwcm9wczp7dHlwZTp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcImRlZmF1bHRcIix2YWxpZGF0b3I6ZT0+W1wiZGVmYXVsdFwiLFwicHJpbWFyeVwiLFwic3VjY2Vzc1wiLFwid2FybmluZ1wiLFwiaW5mb1wiLFwiZGFuZ2VyXCJdLmluY2x1ZGVzKGUpfSx1bmRlcmxpbmU6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiEwfSxkaXNhYmxlZDp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITF9LGhyZWY6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJcIn0saWNvbjp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIlwifX0sZW1pdHM6W1wiY2xpY2tcIl0sc2V0dXA6KGUse2VtaXQ6dH0pPT4oe2hhbmRsZUNsaWNrOmZ1bmN0aW9uKGwpe2UuZGlzYWJsZWR8fHQoXCJjbGlja1wiLGwpfX0pfSk7Y29uc3QgdnI9e2tleToxLGNsYXNzOlwiZWwtbGluay0taW5uZXJcIn07aHIucmVuZGVyPWZ1bmN0aW9uKGUsdCxsLG8saSxyKXtyZXR1cm4gYSgpLG4oXCJhXCIse2NsYXNzOltcImVsLWxpbmtcIixlLnR5cGU/XCJlbC1saW5rLS1cIitlLnR5cGU6XCJcIixlLmRpc2FibGVkJiZcImlzLWRpc2FibGVkXCIsZS51bmRlcmxpbmUmJiFlLmRpc2FibGVkJiZcImlzLXVuZGVybGluZVwiXSxocmVmOmUuZGlzYWJsZWQ/bnVsbDplLmhyZWYsb25DbGljazp0WzFdfHwodFsxXT0oLi4udCk9PmUuaGFuZGxlQ2xpY2soLi4udCkpfSxbZS5pY29uPyhhKCksbihcImlcIix7a2V5OjAsY2xhc3M6ZS5pY29ufSxudWxsLDIpKTp1KFwidi1pZlwiLCEwKSxlLiRzbG90cy5kZWZhdWx0PyhhKCksbihcInNwYW5cIix2cixbZChlLiRzbG90cyxcImRlZmF1bHRcIildKSk6dShcInYtaWZcIiwhMCksZS4kc2xvdHMuaWNvbj9kKGUuJHNsb3RzLFwiaWNvblwiLHtrZXk6Mn0pOnUoXCJ2LWlmXCIsITApXSwxMCxbXCJocmVmXCJdKX0saHIuX19maWxlPVwicGFja2FnZXMvbGluay9zcmMvaW5kZXgudnVlXCIsaHIuaW5zdGFsbD1lPT57ZS5jb21wb25lbnQoaHIubmFtZSxocil9O2NvbnN0IG1yPXtwYXJlbnQ6bnVsbCxiYWNrZ3JvdW5kOlwiXCIsc3Bpbm5lcjohMSx0ZXh0Om51bGwsZnVsbHNjcmVlbjohMCxib2R5OiExLGxvY2s6ITEsY3VzdG9tQ2xhc3M6XCJcIn0sZnI9e2Z1bGxzY3JlZW5Mb2FkaW5nOm51bGx9LGdyPShlLHQsbCk9PntcImFic29sdXRlXCIhPT1sLm9yaWdpbmFsUG9zaXRpb24udmFsdWUmJlwiZml4ZWRcIiE9PWwub3JpZ2luYWxQb3NpdGlvbi52YWx1ZT9vdCh0LFwiZWwtbG9hZGluZy1wYXJlbnQtLXJlbGF0aXZlXCIpOml0KHQsXCJlbC1sb2FkaW5nLXBhcmVudC0tcmVsYXRpdmVcIiksZS5mdWxsc2NyZWVuJiZlLmxvY2s/b3QodCxcImVsLWxvYWRpbmctcGFyZW50LS1oaWRkZW5cIik6aXQodCxcImVsLWxvYWRpbmctcGFyZW50LS1oaWRkZW5cIil9LGJyPWZ1bmN0aW9uKGU9e30pe2lmKHplKXJldHVybjtcInN0cmluZ1wiPT10eXBlb2YoZT1PYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sbXIpLGUpKS50YXJnZXQmJihlLnRhcmdldD1kb2N1bWVudC5xdWVyeVNlbGVjdG9yKGUudGFyZ2V0KSksZS50YXJnZXQ9ZS50YXJnZXR8fGRvY3VtZW50LmJvZHksZS50YXJnZXQhPT1kb2N1bWVudC5ib2R5P2UuZnVsbHNjcmVlbj0hMTplLmJvZHk9ITAsZS5mdWxsc2NyZWVuJiZmci5mdWxsc2NyZWVuTG9hZGluZyYmZnIuZnVsbHNjcmVlbkxvYWRpbmcuY2xvc2UoKTtjb25zdCBsPWUuYm9keT9kb2N1bWVudC5ib2R5OmUudGFyZ2V0O2UucGFyZW50PWw7Y29uc3QgYT1mdW5jdGlvbih7b3B0aW9uczplLGdsb2JhbExvYWRpbmdPcHRpb246bH0pe2xldCBhPW51bGwsbj1udWxsO2NvbnN0IGk9dCghMSkscj1mKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSxlKSx7b3JpZ2luYWxQb3NpdGlvbjpcIlwiLG9yaWdpbmFsT3ZlcmZsb3c6XCJcIix2aXNpYmxlOiFlLmhhc093blByb3BlcnR5KFwidmlzaWJsZVwiKXx8ZS52aXNpYmxlfSkpO2Z1bmN0aW9uIHUoKXtjb25zdCBlPXIucGFyZW50O2UudkxvYWRpbmdBZGRDbGFzc0xpc3R8fChpdChlLFwiZWwtbG9hZGluZy1wYXJlbnQtLXJlbGF0aXZlXCIpLGl0KGUsXCJlbC1sb2FkaW5nLXBhcmVudC0taGlkZGVuXCIpKSxhLmVsJiZhLmVsLnBhcmVudE5vZGUmJmEuZWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChhLmVsKX1jb25zdCBkPU9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSxDKHIpKSx7c2V0VGV4dDpmdW5jdGlvbihlKXtyLnRleHQ9ZX0sY2xvc2U6ZnVuY3Rpb24oKXtyLnBhcmVudC52TG9hZGluZ0FkZENsYXNzTGlzdD1udWxsLHIuZnVsbHNjcmVlbiYmKGwuZnVsbHNjcmVlbkxvYWRpbmc9dm9pZCAwKSxpLnZhbHVlPSEwLGNsZWFyVGltZW91dChuKSxuPXdpbmRvdy5zZXRUaW1lb3V0KCgoKT0+e2kudmFsdWUmJihpLnZhbHVlPSExLHUoKSl9KSw0MDApLHIudmlzaWJsZT0hMX0saGFuZGxlQWZ0ZXJMZWF2ZTpmdW5jdGlvbigpe2kudmFsdWUmJihpLnZhbHVlPSExLHUoKSl9fSk7cmV0dXJuIGE9cyh7bmFtZTpcIkVsTG9hZGluZ1wiLHNldHVwOigpPT5kLHJlbmRlcigpe2NvbnN0IGU9RChcInN2Z1wiLHtjbGFzczpcImNpcmN1bGFyXCIsdmlld0JveDpcIjI1IDI1IDUwIDUwXCJ9LFtEKFwiY2lyY2xlXCIse2NsYXNzOlwicGF0aFwiLGN4OlwiNTBcIixjeTpcIjUwXCIscjpcIjIwXCIsZmlsbDpcIm5vbmVcIn0pXSksdD1EKFwiaVwiLHtjbGFzczp0aGlzLnNwaW5uZXJ9KSxsPUQoXCJwXCIse2NsYXNzOlwiZWwtbG9hZGluZy10ZXh0XCJ9LFt0aGlzLnRleHRdKTtyZXR1cm4gRChvLHtuYW1lOlwiZWwtbG9hZGluZy1mYWRlXCIsb25BZnRlckxlYXZlOnRoaXMuaGFuZGxlQWZ0ZXJMZWF2ZX0se2RlZmF1bHQ6KCk9PkQoXCJkaXZcIix7c3R5bGU6e2JhY2tncm91bmRDb2xvcjp0aGlzLmJhY2tncm91bmR8fFwiXCIsZGlzcGxheTp0aGlzLnZpc2libGU/XCJpbmhlcml0XCI6XCJub25lXCJ9LGNsYXNzOltcImVsLWxvYWRpbmctbWFza1wiLHRoaXMuY3VzdG9tQ2xhc3MsdGhpcy5mdWxsc2NyZWVuP1wiaXMtZnVsbHNjcmVlblwiOlwiXCJdfSxbRChcImRpdlwiLHtjbGFzczpcImVsLWxvYWRpbmctc3Bpbm5lclwifSxbdGhpcy5zcGlubmVyP3Q6ZSx0aGlzLnRleHQ/bDpudWxsXSldKX0pfX0pLFUoYSxkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpKSxPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sZCkse3ZtOmEsZ2V0ICRlbCgpe3JldHVybiBhLmVsfX0pfSh7b3B0aW9uczplLGdsb2JhbExvYWRpbmdPcHRpb246ZnJ9KTtyZXR1cm4oKGUsdCxsKT0+e2NvbnN0IGE9e307ZS5mdWxsc2NyZWVuPyhsLm9yaWdpbmFsUG9zaXRpb24udmFsdWU9cnQoZG9jdW1lbnQuYm9keSxcInBvc2l0aW9uXCIpLGwub3JpZ2luYWxPdmVyZmxvdy52YWx1ZT1ydChkb2N1bWVudC5ib2R5LFwib3ZlcmZsb3dcIiksYS56SW5kZXg9U3RyaW5nKGdsLm5leHRaSW5kZXgoKSkpOmUuYm9keT8obC5vcmlnaW5hbFBvc2l0aW9uLnZhbHVlPXJ0KGRvY3VtZW50LmJvZHksXCJwb3NpdGlvblwiKSxbXCJ0b3BcIixcImxlZnRcIl0uZm9yRWFjaCgodD0+e2NvbnN0IGw9XCJ0b3BcIj09PXQ/XCJzY3JvbGxUb3BcIjpcInNjcm9sbExlZnRcIjthW3RdPWUudGFyZ2V0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpW3RdK2RvY3VtZW50LmJvZHlbbF0rZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50W2xdLXBhcnNlSW50KHJ0KGRvY3VtZW50LmJvZHksXCJtYXJnaW4tXCIrdCksMTApK1wicHhcIn0pKSxbXCJoZWlnaHRcIixcIndpZHRoXCJdLmZvckVhY2goKHQ9PnthW3RdPWUudGFyZ2V0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpW3RdK1wicHhcIn0pKSk6bC5vcmlnaW5hbFBvc2l0aW9uLnZhbHVlPXJ0KHQsXCJwb3NpdGlvblwiKSxPYmplY3Qua2V5cyhhKS5mb3JFYWNoKChlPT57bC4kZWwuc3R5bGVbZV09YVtlXX0pKX0pKGUsbCxhKSxncihlLGwsYSksZS5wYXJlbnQudkxvYWRpbmdBZGRDbGFzc0xpc3Q9KCk9PntncihlLGwsYSl9LGwuYXBwZW5kQ2hpbGQoYS4kZWwpLGUuZnVsbHNjcmVlbiYmKGZyLmZ1bGxzY3JlZW5Mb2FkaW5nPWEpLGF9LHlyPXttb3VudGVkKGUsdCl7Y29uc3QgbD1lLmdldEF0dHJpYnV0ZShcImVsZW1lbnQtbG9hZGluZy10ZXh0XCIpLGE9ZS5nZXRBdHRyaWJ1dGUoXCJlbGVtZW50LWxvYWRpbmctc3Bpbm5lclwiKSxuPWUuZ2V0QXR0cmlidXRlKFwiZWxlbWVudC1sb2FkaW5nLWJhY2tncm91bmRcIiksbz1lLmdldEF0dHJpYnV0ZShcImVsZW1lbnQtbG9hZGluZy1jdXN0b20tY2xhc3NcIiksaT10Lmluc3RhbmNlLHI9YnIoe3RleHQ6aSYmaVtsXXx8bCxzcGlubmVyOmkmJmlbYV18fGEsYmFja2dyb3VuZDppJiZpW25dfHxuLGN1c3RvbUNsYXNzOmkmJmlbb118fG8sZnVsbHNjcmVlbjohIXQubW9kaWZpZXJzLmZ1bGxzY3JlZW4sdGFyZ2V0OnQubW9kaWZpZXJzLmZ1bGxzY3JlZW4/bnVsbDplLGJvZHk6ISF0Lm1vZGlmaWVycy5ib2R5LHZpc2libGU6ISF0LnZhbHVlLGxvY2s6ISF0Lm1vZGlmaWVycy5sb2NrfSk7ZS5pbnN0YW5jZT1yfSx1cGRhdGVkKGUsdCl7Y29uc3QgbD1lLmluc3RhbmNlO2wmJihsLnNldFRleHQoZS5nZXRBdHRyaWJ1dGUoXCJlbGVtZW50LWxvYWRpbmctdGV4dFwiKSksdC5vbGRWYWx1ZSE9PXQudmFsdWUmJih0LnZhbHVlJiYhbC52aXNpYmxlLnZhbHVlP2wudmlzaWJsZS52YWx1ZT0hMDpsLnZpc2libGUudmFsdWU9ITEpKX0sdW5tb3VudGVkKGUpe3ZhciB0O251bGw9PT0odD1udWxsPT1lP3ZvaWQgMDplLmluc3RhbmNlKXx8dm9pZCAwPT09dHx8dC5jbG9zZSgpfX07dmFyIGtyPXtpbnN0YWxsKGUpe2UuZGlyZWN0aXZlKFwibG9hZGluZ1wiLHlyKSxlLmNvbmZpZy5nbG9iYWxQcm9wZXJ0aWVzLiRsb2FkaW5nPWJyfSxkaXJlY3RpdmU6eXIsc2VydmljZTpicn0sQ3I9ZSh7bmFtZTpcIkVsTWFpblwifSk7Y29uc3QgeHI9e2NsYXNzOlwiZWwtbWFpblwifTtDci5yZW5kZXI9ZnVuY3Rpb24oZSx0LGwsbyxpLHIpe3JldHVybiBhKCksbihcIm1haW5cIix4cixbZChlLiRzbG90cyxcImRlZmF1bHRcIildKX0sQ3IuX19maWxlPVwicGFja2FnZXMvY29udGFpbmVyL3NyYy9tYWluLnZ1ZVwiLENyLmluc3RhbGw9ZT0+e2UuY29tcG9uZW50KENyLm5hbWUsQ3IpfTtjbGFzcyB3cntjb25zdHJ1Y3RvcihlLHQpe3RoaXMucGFyZW50PWUsdGhpcy5kb21Ob2RlPXQsdGhpcy5zdWJJbmRleD0wLHRoaXMuc3ViSW5kZXg9MCx0aGlzLmluaXQoKX1pbml0KCl7dGhpcy5zdWJNZW51SXRlbXM9dGhpcy5kb21Ob2RlLnF1ZXJ5U2VsZWN0b3JBbGwoXCJsaVwiKSx0aGlzLmFkZExpc3RlbmVycygpfWdvdG9TdWJJbmRleChlKXtlPT09dGhpcy5zdWJNZW51SXRlbXMubGVuZ3RoP2U9MDplPDAmJihlPXRoaXMuc3ViTWVudUl0ZW1zLmxlbmd0aC0xKSx0aGlzLnN1Yk1lbnVJdGVtc1tlXS5mb2N1cygpLHRoaXMuc3ViSW5kZXg9ZX1hZGRMaXN0ZW5lcnMoKXtjb25zdCBlPXRoaXMucGFyZW50LmRvbU5vZGU7QXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbCh0aGlzLnN1Yk1lbnVJdGVtcywodD0+e3QuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwodD0+e2xldCBsPSExO3N3aXRjaCh0LmNvZGUpe2Nhc2UgZnQuZG93bjp0aGlzLmdvdG9TdWJJbmRleCh0aGlzLnN1YkluZGV4KzEpLGw9ITA7YnJlYWs7Y2FzZSBmdC51cDp0aGlzLmdvdG9TdWJJbmRleCh0aGlzLnN1YkluZGV4LTEpLGw9ITA7YnJlYWs7Y2FzZSBmdC50YWI6Q3QoZSxcIm1vdXNlbGVhdmVcIik7YnJlYWs7Y2FzZSBmdC5lbnRlcjpjYXNlIGZ0LnNwYWNlOmw9ITAsdC5jdXJyZW50VGFyZ2V0LmNsaWNrKCl9cmV0dXJuIGwmJih0LnByZXZlbnREZWZhdWx0KCksdC5zdG9wUHJvcGFnYXRpb24oKSksITF9KSl9KSl9fWNsYXNzIF9ye2NvbnN0cnVjdG9yKGUpe3RoaXMuZG9tTm9kZT1lLHRoaXMuc3VibWVudT1udWxsLHRoaXMuc3VibWVudT1udWxsLHRoaXMuaW5pdCgpfWluaXQoKXt0aGlzLmRvbU5vZGUuc2V0QXR0cmlidXRlKFwidGFiaW5kZXhcIixcIjBcIik7Y29uc3QgZT10aGlzLmRvbU5vZGUucXVlcnlTZWxlY3RvcihcIi5lbC1tZW51XCIpO2UmJih0aGlzLnN1Ym1lbnU9bmV3IHdyKHRoaXMsZSkpLHRoaXMuYWRkTGlzdGVuZXJzKCl9YWRkTGlzdGVuZXJzKCl7dGhpcy5kb21Ob2RlLmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsKGU9PntsZXQgdD0hMTtzd2l0Y2goZS5jb2RlKXtjYXNlIGZ0LmRvd246Q3QoZS5jdXJyZW50VGFyZ2V0LFwibW91c2VlbnRlclwiKSx0aGlzLnN1Ym1lbnUmJnRoaXMuc3VibWVudS5nb3RvU3ViSW5kZXgoMCksdD0hMDticmVhaztjYXNlIGZ0LnVwOkN0KGUuY3VycmVudFRhcmdldCxcIm1vdXNlZW50ZXJcIiksdGhpcy5zdWJtZW51JiZ0aGlzLnN1Ym1lbnUuZ290b1N1YkluZGV4KHRoaXMuc3VibWVudS5zdWJNZW51SXRlbXMubGVuZ3RoLTEpLHQ9ITA7YnJlYWs7Y2FzZSBmdC50YWI6Q3QoZS5jdXJyZW50VGFyZ2V0LFwibW91c2VsZWF2ZVwiKTticmVhaztjYXNlIGZ0LmVudGVyOmNhc2UgZnQuc3BhY2U6dD0hMCxlLmN1cnJlbnRUYXJnZXQuY2xpY2soKX10JiZlLnByZXZlbnREZWZhdWx0KCl9KSl9fWNsYXNzIFNye2NvbnN0cnVjdG9yKGUpe3RoaXMuZG9tTm9kZT1lLHRoaXMuaW5pdCgpfWluaXQoKXtjb25zdCBlPXRoaXMuZG9tTm9kZS5jaGlsZE5vZGVzO1tdLmZpbHRlci5jYWxsKGUsKGU9PjE9PT1lLm5vZGVUeXBlKSkuZm9yRWFjaCgoZT0+e25ldyBfcihlKX0pKX19dmFyIEVyPWUoe25hbWU6XCJFbE1lbnVDb2xsYXBzZVRyYW5zaXRpb25cIixzZXR1cDooKT0+KHtvbjp7YmVmb3JlRW50ZXIoZSl7ZS5zdHlsZS5vcGFjaXR5PS4yfSxlbnRlcihlKXtvdChlLFwiZWwtb3BhY2l0eS10cmFuc2l0aW9uXCIpLGUuc3R5bGUub3BhY2l0eT0xfSxhZnRlckVudGVyKGUpe2l0KGUsXCJlbC1vcGFjaXR5LXRyYW5zaXRpb25cIiksZS5zdHlsZS5vcGFjaXR5PVwiXCJ9LGJlZm9yZUxlYXZlKGUpe2UuZGF0YXNldHx8KGUuZGF0YXNldD17fSksbnQoZSxcImVsLW1lbnUtLWNvbGxhcHNlXCIpPyhpdChlLFwiZWwtbWVudS0tY29sbGFwc2VcIiksZS5kYXRhc2V0Lm9sZE92ZXJmbG93PWUuc3R5bGUub3ZlcmZsb3csZS5kYXRhc2V0LnNjcm9sbFdpZHRoPWUuY2xpZW50V2lkdGgsb3QoZSxcImVsLW1lbnUtLWNvbGxhcHNlXCIpKToob3QoZSxcImVsLW1lbnUtLWNvbGxhcHNlXCIpLGUuZGF0YXNldC5vbGRPdmVyZmxvdz1lLnN0eWxlLm92ZXJmbG93LGUuZGF0YXNldC5zY3JvbGxXaWR0aD1lLmNsaWVudFdpZHRoLGl0KGUsXCJlbC1tZW51LS1jb2xsYXBzZVwiKSksZS5zdHlsZS53aWR0aD1lLnNjcm9sbFdpZHRoK1wicHhcIixlLnN0eWxlLm92ZXJmbG93PVwiaGlkZGVuXCJ9LGxlYXZlKGUpe290KGUsXCJob3Jpem9udGFsLWNvbGxhcHNlLXRyYW5zaXRpb25cIiksZS5zdHlsZS53aWR0aD1lLmRhdGFzZXQuc2Nyb2xsV2lkdGgrXCJweFwifX19KX0pO2Z1bmN0aW9uIE1yKGU9XCJcIil7Y29uc3QgbD10KFwiXCIpO3JldHVybiBlPyhsLnZhbHVlPWZ1bmN0aW9uKGUsdD0uMil7bGV0e3JlZDpsLGdyZWVuOmEsYmx1ZTpufT1mdW5jdGlvbihlKXtsZXQgdD1lLnJlcGxhY2UoXCIjXCIsXCJcIik7aWYoL15bMC05YS1mQS1GXXszfSQvLnRlc3QodCkpe2NvbnN0IGU9dC5zcGxpdChcIlwiKTtmb3IobGV0IHQ9Mjt0Pj0wO3QtLSllLnNwbGljZSh0LDAsZVt0XSk7dD1lLmpvaW4oXCJcIil9cmV0dXJuL15bMC05YS1mQS1GXXs2fSQvLnRlc3QodCk/e3JlZDpwYXJzZUludCh0LnNsaWNlKDAsMiksMTYpLGdyZWVuOnBhcnNlSW50KHQuc2xpY2UoMiw0KSwxNiksYmx1ZTpwYXJzZUludCh0LnNsaWNlKDQsNiksMTYpfTp7cmVkOjI1NSxncmVlbjoyNTUsYmx1ZToyNTV9fShlKTtyZXR1cm4gdD4wPyhsKj0xLXQsYSo9MS10LG4qPTEtdCk6KGwrPSgyNTUtbCkqdCxhKz0oMjU1LWEpKnQsbis9KDI1NS1uKSp0KSxgcmdiKCR7TWF0aC5yb3VuZChsKX0sICR7TWF0aC5yb3VuZChhKX0sICR7TWF0aC5yb3VuZChuKX0pYH0oZSksbCk6bH1Fci5yZW5kZXI9ZnVuY3Rpb24oZSx0LGwscixzLHUpe3JldHVybiBhKCksbihvLE0oe21vZGU6XCJvdXQtaW5cIn0scShlLm9uKSkse2RlZmF1bHQ6aSgoKCk9PltkKGUuJHNsb3RzLFwiZGVmYXVsdFwiKV0pKSxfOjN9LDE2KX0sRXIuX19maWxlPVwicGFja2FnZXMvbWVudS9zcmMvbWVudS1jb2xsYXBzZS10cmFuc2l0aW9uLnZ1ZVwiO3ZhciBUcj1lKHtuYW1lOlwiRWxNZW51XCIsY29tcG9uZW50TmFtZTpcIkVsTWVudVwiLGNvbXBvbmVudHM6e0VsTWVudUNvbGxhcHNlVHJhbnNpdGlvbjpFcn0scHJvcHM6e21vZGU6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJ2ZXJ0aWNhbFwifSxkZWZhdWx0QWN0aXZlOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiXCJ9LGRlZmF1bHRPcGVuZWRzOkFycmF5LHVuaXF1ZU9wZW5lZDpCb29sZWFuLHJvdXRlcjpCb29sZWFuLG1lbnVUcmlnZ2VyOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiaG92ZXJcIn0sY29sbGFwc2U6Qm9vbGVhbixiYWNrZ3JvdW5kQ29sb3I6e3R5cGU6U3RyaW5nfSx0ZXh0Q29sb3I6e3R5cGU6U3RyaW5nfSxhY3RpdmVUZXh0Q29sb3I6e3R5cGU6U3RyaW5nfSxjb2xsYXBzZVRyYW5zaXRpb246e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiEwfX0sZW1pdHM6W1wiY2xvc2VcIixcIm9wZW5cIixcInNlbGVjdFwiXSxzZXR1cChlLGEpe2NvbnN0IG49dChlLmRlZmF1bHRPcGVuZWRzJiYhZS5jb2xsYXBzZT9lLmRlZmF1bHRPcGVuZWRzLnNsaWNlKDApOltdKSxvPXYoKSxpPXQoZS5kZWZhdWx0QWN0aXZlKSxyPXQoe30pLHM9dCh7fSksdT10KCExKSxkPW5lKCksYz1vLmFwcENvbnRleHQuY29uZmlnLmdsb2JhbFByb3BlcnRpZXMuJHJvdXRlcixwPU1yKGUuYmFja2dyb3VuZENvbG9yKSxoPWwoKCgpPT5cImhvcml6b250YWxcIj09PWUubW9kZXx8XCJ2ZXJ0aWNhbFwiPT09ZS5tb2RlJiZlLmNvbGxhcHNlKSksbT0oKT0+e2NvbnN0IHQ9aS52YWx1ZSxsPXIudmFsdWVbdF07aWYoIWx8fFwiaG9yaXpvbnRhbFwiPT09ZS5tb2RlfHxlLmNvbGxhcHNlKXJldHVybjtsLmluZGV4UGF0aC5mb3JFYWNoKChlPT57bGV0IHQ9cy52YWx1ZVtlXTt0JiZrKGUsbnVsbD09dD92b2lkIDA6dC5pbmRleFBhdGgpfSkpfSxmPWU9PntzLnZhbHVlW2UuaW5kZXhdPWV9LGc9ZT0+e2RlbGV0ZSBzLnZhbHVlW2UuaW5kZXhdfSxrPSh0LGwpPT57bi52YWx1ZS5pbmNsdWRlcyh0KXx8KGUudW5pcXVlT3BlbmVkJiYobi52YWx1ZT1uLnZhbHVlLmZpbHRlcigoZT0+LTEhPT0oYihsKT9sLnZhbHVlOmwpLmluZGV4T2YoZSkpKSksbi52YWx1ZS5wdXNoKHQpKX0sQz1lPT57Y29uc3QgdD1uLnZhbHVlLmluZGV4T2YoZSk7LTEhPT10JiZuLnZhbHVlLnNwbGljZSh0LDEpfSx3PWU9Pntjb25zdHtpbmRleDp0LGluZGV4UGF0aDpsfT1lO24udmFsdWUuaW5jbHVkZXModCk/KEModCksYS5lbWl0KFwiY2xvc2VcIix0LGwudmFsdWUpKTooayh0LGwpLGEuZW1pdChcIm9wZW5cIix0LGwudmFsdWUpKX0sUz10PT57Y29uc3R7aW5kZXg6bCxpbmRleFBhdGg6b309dCxyPW51bGwhPT10LmluZGV4LHM9aS52YWx1ZTtyJiYoaS52YWx1ZT10LmluZGV4KSxhLmVtaXQoXCJzZWxlY3RcIixsLG8udmFsdWUsdCksKFwiaG9yaXpvbnRhbFwiPT09ZS5tb2RlfHxlLmNvbGxhcHNlKSYmKG4udmFsdWU9W10pLGUucm91dGVyJiZjJiZyJiZFKHQsKGU9PntpZihpLnZhbHVlPXMsZSl7aWYoXCJOYXZpZ2F0aW9uRHVwbGljYXRlZFwiPT09ZS5uYW1lKXJldHVybjtjb25zb2xlLmVycm9yKGUpfX0pKX0sRT0oZSx0KT0+e2xldCBsPWUucm91dGV8fGUuaW5kZXg7dHJ5e251bGw9PWN8fGMucHVzaChsLCgoKT0+bnVsbCksdCl9Y2F0Y2goZSl7Y29uc29sZS5lcnJvcihlKX19LE09dD0+e2NvbnN0IGw9ci52YWx1ZSxhPWxbdF18fGxbaS52YWx1ZV18fGxbZS5kZWZhdWx0QWN0aXZlXTthPyhpLnZhbHVlPWEuaW5kZXgsbSgpKTp1LnZhbHVlP3UudmFsdWU9ITE6aS52YWx1ZT1udWxsfTtyZXR1cm4geSgoKCk9PmUuZGVmYXVsdEFjdGl2ZSksKGU9PntyW2VdfHwoaS52YWx1ZT1cIlwiKSxNKGUpfSkpLHkoci52YWx1ZSwoKCk9PntNKCl9KSkseSgoKCk9PmUuY29sbGFwc2UpLCgodCxsKT0+e3QhPT1sJiYodS52YWx1ZT0hMCksdCYmKG4udmFsdWU9W10pLGQuZW1pdChcInJvb3RNZW51OnRvZ2dsZS1jb2xsYXBzZVwiLEJvb2xlYW4oZS5jb2xsYXBzZSkpfSkpLHgoXCJyb290TWVudVwiLHtwcm9wczplLG9wZW5lZE1lbnVzOm4saXRlbXM6cixzdWJtZW51czpzLGhvdmVyQmFja2dyb3VuZDpwLGFjdGl2ZUluZGV4OmksaXNNZW51UG9wdXA6aCxtZXRob2RzOnthZGRNZW51SXRlbTplPT57ci52YWx1ZVtlLmluZGV4XT1lfSxyZW1vdmVNZW51SXRlbTplPT57ZGVsZXRlIHIudmFsdWVbZS5pbmRleF19LGFkZFN1Yk1lbnU6ZixyZW1vdmVTdWJNZW51Omcsb3Blbk1lbnU6ayxjbG9zZU1lbnU6Q30scm9vdE1lbnVFbWl0OmQuZW1pdCxyb290TWVudU9uOmQub259KSx4KFwic3ViTWVudTpcIitvLnVpZCx7YWRkU3ViTWVudTpmLHJlbW92ZVN1Yk1lbnU6Z30pLF8oKCgpPT57bSgpLGQub24oXCJtZW51SXRlbTppdGVtLWNsaWNrXCIsUyksZC5vbihcInN1Ym1lbnU6c3VibWVudS1jbGlja1wiLHcpLFwiaG9yaXpvbnRhbFwiPT09ZS5tb2RlJiZuZXcgU3Ioby52bm9kZS5lbCl9KSkse2hvdmVyQmFja2dyb3VuZDpwLGlzTWVudVBvcHVwOmgscHJvcHM6ZSxvcGVuOmU9Pntjb25zdHtpbmRleFBhdGg6dH09cy52YWx1ZVtlLnRvU3RyaW5nKCldO3QuZm9yRWFjaCgoZT0+ayhlLHQpKSl9LGNsb3NlOmU9PntDKGUpfX19fSk7ZnVuY3Rpb24gTnIoZSx0KXtjb25zdCBhPXcoXCJyb290TWVudVwiKSxuPWwoKCgpPT57bGV0IGw9ZS5wYXJlbnQ7Y29uc3QgYT1bdF07Zm9yKDtcIkVsTWVudVwiIT09bC50eXBlLm5hbWU7KWwucHJvcHMuaW5kZXgmJmEudW5zaGlmdChsLnByb3BzLmluZGV4KSxsPWwucGFyZW50O3JldHVybiBhfSkpO3JldHVybntwYXJlbnRNZW51OmwoKCgpPT57bGV0IHQ9ZS5wYXJlbnQ7Zm9yKDt0JiYtMT09PVtcIkVsTWVudVwiLFwiRWxTdWJtZW51XCJdLmluZGV4T2YodC50eXBlLm5hbWUpOyl0PXQucGFyZW50O3JldHVybiB0fSkpLHBhZGRpbmdTdHlsZTpsKCgoKT0+e2xldCB0PWUucGFyZW50O2lmKFwidmVydGljYWxcIiE9PWEucHJvcHMubW9kZSlyZXR1cm57fTtsZXQgbD0yMDtpZihhLnByb3BzLmNvbGxhcHNlKWw9MjA7ZWxzZSBmb3IoO3QmJlwiRWxNZW51XCIhPT10LnR5cGUubmFtZTspXCJFbFN1Ym1lbnVcIj09PXQudHlwZS5uYW1lJiYobCs9MjApLHQ9dC5wYXJlbnQ7cmV0dXJue3BhZGRpbmdMZWZ0OmwrXCJweFwifX0pKSxpbmRleFBhdGg6bn19VHIucmVuZGVyPWZ1bmN0aW9uKGUsdCxsLG8scixzKXtjb25zdCB1PVAoXCJlbC1tZW51LWNvbGxhcHNlLXRyYW5zaXRpb25cIik7cmV0dXJuIGUucHJvcHMuY29sbGFwc2VUcmFuc2l0aW9uPyhhKCksbih1LHtrZXk6MH0se2RlZmF1bHQ6aSgoKCk9PlsoYSgpLG4oXCJ1bFwiLHtrZXk6K2UucHJvcHMuY29sbGFwc2Uscm9sZTpcIm1lbnViYXJcIixzdHlsZTp7YmFja2dyb3VuZENvbG9yOmUucHJvcHMuYmFja2dyb3VuZENvbG9yfHxcIlwifSxjbGFzczp7XCJlbC1tZW51XCI6ITAsXCJlbC1tZW51LS1ob3Jpem9udGFsXCI6XCJob3Jpem9udGFsXCI9PT1lLm1vZGUsXCJlbC1tZW51LS1jb2xsYXBzZVwiOmUucHJvcHMuY29sbGFwc2V9fSxbZChlLiRzbG90cyxcImRlZmF1bHRcIildLDYpKV0pKSxfOjN9KSk6KGEoKSxuKFwidWxcIix7a2V5OitlLnByb3BzLmNvbGxhcHNlLHJvbGU6XCJtZW51YmFyXCIsc3R5bGU6e2JhY2tncm91bmRDb2xvcjplLnByb3BzLmJhY2tncm91bmRDb2xvcnx8XCJcIn0sY2xhc3M6e1wiZWwtbWVudVwiOiEwLFwiZWwtbWVudS0taG9yaXpvbnRhbFwiOlwiaG9yaXpvbnRhbFwiPT09ZS5tb2RlLFwiZWwtbWVudS0tY29sbGFwc2VcIjplLnByb3BzLmNvbGxhcHNlfX0sW2QoZS4kc2xvdHMsXCJkZWZhdWx0XCIpXSw2KSl9LFRyLl9fZmlsZT1cInBhY2thZ2VzL21lbnUvc3JjL21lbnUudnVlXCIsVHIuaW5zdGFsbD1lPT57ZS5jb21wb25lbnQoVHIubmFtZSxUcil9O3ZhciBEcj1lKHtuYW1lOlwiRWxUb29sdGlwXCIsY29tcG9uZW50czp7RWxQb3BwZXI6U2x9LHByb3BzOntlZmZlY3Q6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJkYXJrXCJ9LGNsYXNzOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiXCJ9LGNvbnRlbnQ6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJcIn0sZGlzYWJsZWQ6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiExfSxlbnRlcmFibGU6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiEwfSxoaWRlQWZ0ZXI6e3R5cGU6TnVtYmVyLGRlZmF1bHQ6MH0sbWFudWFsOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMX0sbW9kZWxWYWx1ZTp7dHlwZTpCb29sZWFuLHZhbGlkYXRvcjplPT5cImJvb2xlYW5cIj09dHlwZW9mIGUsZGVmYXVsdDp2b2lkIDB9LG9mZnNldDp7dHlwZTpOdW1iZXIsZGVmYXVsdDoxMn0sb3BlbkRlbGF5Ont0eXBlOk51bWJlcixkZWZhdWx0OjB9LHBsYWNlbWVudDp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcImJvdHRvbVwifSxwb3BwZXJPcHRpb25zOnt0eXBlOk9iamVjdCxkZWZhdWx0OigpPT5udWxsfSxzaG93QWZ0ZXI6e3R5cGU6TnVtYmVyLGRlZmF1bHQ6MH0sdHJhbnNpdGlvbjp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcImVsLWZhZGUtaW4tbGluZWFyXCJ9LHRyaWdnZXI6e3R5cGU6W1N0cmluZyxBcnJheV0sZGVmYXVsdDooKT0+W1wiaG92ZXJcIl19LHZpc2libGVBcnJvdzp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITB9fSxlbWl0czpbUHRdLHNldHVwKGUsbCl7ZS5tYW51YWwmJnZvaWQgMD09PWUubW9kZWxWYWx1ZSYmbXQoXCJbRWxUb29sdGlwXVwiLFwiWW91IG5lZWQgdG8gcGFzcyBhIHYtbW9kZWwgdG8gZWwtdG9vbHRpcCB3aGVuIGBtYW51YWxgIGlzIHRydWVcIik7Y29uc3QgYT10KG51bGwpO3JldHVybntwb3BwZXI6YSxvblVwZGF0ZVZpc2libGU6ZT0+e2wuZW1pdChQdCxlKX0sdXBkYXRlUG9wcGVyOigpPT5hLnZhbHVlLnVwZGF0ZSgpfX0scmVuZGVyKCl7Y29uc3R7JHNsb3RzOmUsY29udGVudDp0LGRpc2FibGVkOmwsZWZmZWN0OmEsZW50ZXJhYmxlOm4saGlkZUFmdGVyOm8sbWFudWFsOmksb2Zmc2V0OnIsb3BlbkRlbGF5OnMsb25VcGRhdGVWaXNpYmxlOnUscGxhY2VtZW50OmQscG9wcGVyT3B0aW9uczpjLHNob3dBZnRlcjpwLHRyYW5zaXRpb246aCx0cmlnZ2VyOnYsdmlzaWJsZUFycm93Om19PXRoaXM7cmV0dXJuIEQoU2wse3JlZjpcInBvcHBlclwiLGFwcGVuZFRvQm9keTohMCxjbGFzczp0aGlzLmNsYXNzLGRpc2FibGVkOmwsZWZmZWN0OmEsZW50ZXJhYmxlOm4saGlkZUFmdGVyOm8sbWFudWFsTW9kZTppLG9mZnNldDpyLHBsYWNlbWVudDpkLHNob3dBZnRlcjpzfHxwLHNob3dBcnJvdzptLHRyYW5zaXRpb246aCx0cmlnZ2VyOnYscG9wcGVyT3B0aW9uczpjLHZpc2libGU6dGhpcy5tb2RlbFZhbHVlLFwib25VcGRhdGU6dmlzaWJsZVwiOnV9LHtkZWZhdWx0OigpPT5lLmNvbnRlbnQ/ZS5jb250ZW50KCk6dCx0cmlnZ2VyOigpPT5lLmRlZmF1bHQoKX0pfX0pO0RyLmluc3RhbGw9ZT0+e2UuY29tcG9uZW50KERyLm5hbWUsRHIpfTt2YXIgT3I9ZSh7bmFtZTpcIkVsTWVudUl0ZW1cIixjb21wb25lbnROYW1lOlwiRWxNZW51SXRlbVwiLGNvbXBvbmVudHM6e0VsVG9vbHRpcDpEcn0scHJvcHM6e2luZGV4OntkZWZhdWx0Om51bGwsdmFsaWRhdG9yOmU9Plwic3RyaW5nXCI9PXR5cGVvZiBlfHxudWxsPT09ZX0scm91dGU6W1N0cmluZyxPYmplY3RdLGRpc2FibGVkOkJvb2xlYW59LGVtaXRzOltcImNsaWNrXCJdLHNldHVwKGUse2VtaXQ6dCxzbG90czphfSl7Y29uc3Qgbj12KCksbz13KFwicm9vdE1lbnVcIikse3BhcmVudE1lbnU6aSxwYWRkaW5nU3R5bGU6cixpbmRleFBhdGg6c309TnIobixlLmluZGV4KSx7YWRkU3ViTWVudTp1LHJlbW92ZVN1Yk1lbnU6ZH09dyhcInN1Yk1lbnU6XCIraS52YWx1ZS51aWQpLGM9bCgoKCk9PmUuaW5kZXg9PT1vLmFjdGl2ZUluZGV4LnZhbHVlKSkscD1sKCgoKT0+by5ob3ZlckJhY2tncm91bmQudmFsdWUpKSxoPWwoKCgpPT5vLnByb3BzLmJhY2tncm91bmRDb2xvcnx8XCJcIikpLG09bCgoKCk9Pm8ucHJvcHMuYWN0aXZlVGV4dENvbG9yfHxcIlwiKSksZj1sKCgoKT0+by5wcm9wcy50ZXh0Q29sb3J8fFwiXCIpKSxnPWwoKCgpPT5vLnByb3BzLm1vZGUpKSxiPWwoKCgpPT5cIkVsTWVudVwiIT09aS52YWx1ZS50eXBlLm5hbWUpKSx5PWwoKCgpPT57Y29uc3QgZT17Y29sb3I6Yy52YWx1ZT9tLnZhbHVlOmYudmFsdWUsYm9yZGVyQm90dG9tQ29sb3I6XCJcIn07cmV0dXJuXCJob3Jpem9udGFsXCIhPT1nLnZhbHVlfHxiLnZhbHVlfHwoZS5ib3JkZXJCb3R0b21Db2xvcj1jLnZhbHVlP28ucHJvcHMuYWN0aXZlVGV4dENvbG9yP20udmFsdWU6XCJcIjpcInRyYW5zcGFyZW50XCIpLGV9KSk7cmV0dXJuIF8oKCgpPT57dSh7aW5kZXg6ZS5pbmRleCxpbmRleFBhdGg6cyxhY3RpdmU6Y30pLG8ubWV0aG9kcy5hZGRNZW51SXRlbSh7aW5kZXg6ZS5pbmRleCxpbmRleFBhdGg6cyxhY3RpdmU6Y30pfSkpLE8oKCgpPT57ZCh7aW5kZXg6ZS5pbmRleCxpbmRleFBhdGg6cyxhY3RpdmU6Y30pLG8ubWV0aG9kcy5yZW1vdmVNZW51SXRlbSh7aW5kZXg6ZS5pbmRleCxpbmRleFBhdGg6cyxhY3RpdmU6Y30pfSkpLHtwYXJlbnRNZW51Omkscm9vdE1lbnU6byxzbG90czphLHBhZGRpbmdTdHlsZTpyLGl0ZW1TdHlsZTp5LGJhY2tncm91bmRDb2xvcjpoLGFjdGl2ZTpjLGhhbmRsZUNsaWNrOigpPT57ZS5kaXNhYmxlZHx8KG8ucm9vdE1lbnVFbWl0KFwibWVudUl0ZW06aXRlbS1jbGlja1wiLHtpbmRleDplLmluZGV4LGluZGV4UGF0aDpzLHJvdXRlOmUucm91dGV9KSx0KFwiY2xpY2tcIix7aW5kZXg6ZS5pbmRleCxpbmRleFBhdGg6cy52YWx1ZX0pKX0sb25Nb3VzZUVudGVyOigpPT57KFwiaG9yaXpvbnRhbFwiIT09Zy52YWx1ZXx8by5wcm9wcy5iYWNrZ3JvdW5kQ29sb3IpJiYobi52bm9kZS5lbC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3I9cC52YWx1ZSl9LG9uTW91c2VMZWF2ZTooKT0+eyhcImhvcml6b250YWxcIiE9PWcudmFsdWV8fG8ucHJvcHMuYmFja2dyb3VuZENvbG9yKSYmKG4udm5vZGUuZWwuc3R5bGUuYmFja2dyb3VuZENvbG9yPWgudmFsdWUpfX19fSk7Y29uc3QgUHI9e3N0eWxlOntwb3NpdGlvbjpcImFic29sdXRlXCIsbGVmdDpcIjBcIix0b3A6XCIwXCIsaGVpZ2h0OlwiMTAwJVwiLHdpZHRoOlwiMTAwJVwiLGRpc3BsYXk6XCJpbmxpbmUtYmxvY2tcIixcImJveC1zaXppbmdcIjpcImJvcmRlci1ib3hcIixwYWRkaW5nOlwiMCAyMHB4XCJ9fTtPci5yZW5kZXI9ZnVuY3Rpb24oZSx0LGwsbyxyLHUpe2NvbnN0IGM9UChcImVsLXRvb2x0aXBcIik7cmV0dXJuIGEoKSxuKFwibGlcIix7Y2xhc3M6W1wiZWwtbWVudS1pdGVtXCIse1wiaXMtYWN0aXZlXCI6ZS5hY3RpdmUsXCJpcy1kaXNhYmxlZFwiOmUuZGlzYWJsZWR9XSxyb2xlOlwibWVudWl0ZW1cIix0YWJpbmRleDpcIi0xXCIsc3R5bGU6W2UucGFkZGluZ1N0eWxlLGUuaXRlbVN0eWxlLHtiYWNrZ3JvdW5kQ29sb3I6ZS5iYWNrZ3JvdW5kQ29sb3J9XSxvbkNsaWNrOnRbMV18fCh0WzFdPSguLi50KT0+ZS5oYW5kbGVDbGljayguLi50KSksb25Nb3VzZWVudGVyOnRbMl18fCh0WzJdPSguLi50KT0+ZS5vbk1vdXNlRW50ZXIoLi4udCkpLG9uRm9jdXM6dFszXXx8KHRbM109KC4uLnQpPT5lLm9uTW91c2VFbnRlciguLi50KSksb25CbHVyOnRbNF18fCh0WzRdPSguLi50KT0+ZS5vbk1vdXNlTGVhdmUoLi4udCkpLG9uTW91c2VsZWF2ZTp0WzVdfHwodFs1XT0oLi4udCk9PmUub25Nb3VzZUxlYXZlKC4uLnQpKX0sW1wiRWxNZW51XCI9PT1lLnBhcmVudE1lbnUudHlwZS5uYW1lJiZlLnJvb3RNZW51LnByb3BzLmNvbGxhcHNlJiZlLnNsb3RzLnRpdGxlPyhhKCksbihjLHtrZXk6MCxlZmZlY3Q6XCJkYXJrXCIscGxhY2VtZW50OlwicmlnaHRcIn0se2NvbnRlbnQ6aSgoKCk9PltkKGUuJHNsb3RzLFwidGl0bGVcIildKSksZGVmYXVsdDppKCgoKT0+W3MoXCJkaXZcIixQcixbZChlLiRzbG90cyxcImRlZmF1bHRcIildKV0pKSxfOjN9KSk6KGEoKSxuKEUse2tleToxfSxbZChlLiRzbG90cyxcImRlZmF1bHRcIiksZChlLiRzbG90cyxcInRpdGxlXCIpXSw2NCkpXSwzOCl9LE9yLl9fZmlsZT1cInBhY2thZ2VzL21lbnUvc3JjL21lbnVJdGVtLnZ1ZVwiLE9yLmluc3RhbGw9ZT0+e2UuY29tcG9uZW50KE9yLm5hbWUsT3IpfTt2YXIgVnI9ZSh7bmFtZTpcIkVsTWVudUl0ZW1Hcm91cFwiLHByb3BzOnt9fSk7VnIucmVuZGVyPWZ1bmN0aW9uKGUsdCxsLG8saSxyKXtyZXR1cm4gYSgpLG4oXCJkaXZcIixudWxsLFtkKGUuJHNsb3RzLFwiZGVmYXVsdFwiKV0pfSxWci5fX2ZpbGU9XCJwYWNrYWdlcy9tZW51L3NyYy9tZW51SXRlbUdyb3VwLnZ1ZVwiLFZyLmluc3RhbGw9ZT0+e2UuY29tcG9uZW50KFZyLm5hbWUsVnIpfTtjb25zdCBJcj17c3VjY2VzczpcInN1Y2Nlc3NcIixpbmZvOlwiaW5mb1wiLHdhcm5pbmc6XCJ3YXJuaW5nXCIsZXJyb3I6XCJlcnJvclwifTt2YXIgQXI9ZSh7bmFtZTpcIkVsTWVzc2FnZVwiLHByb3BzOntjdXN0b21DbGFzczp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIlwifSxjZW50ZXI6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiExfSxkYW5nZXJvdXNseVVzZUhUTUxTdHJpbmc6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiExfSxkdXJhdGlvbjp7dHlwZTpOdW1iZXIsZGVmYXVsdDozZTN9LGljb25DbGFzczp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIlwifSxpZDp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIlwifSxtZXNzYWdlOnt0eXBlOltTdHJpbmcsT2JqZWN0XSxkZWZhdWx0OlwiXCJ9LG9uQ2xvc2U6e3R5cGU6RnVuY3Rpb24scmVxdWlyZWQ6ITB9LHNob3dDbG9zZTp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITF9LHR5cGU6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJpbmZvXCJ9LG9mZnNldDp7dHlwZTpOdW1iZXIsZGVmYXVsdDoyMH0sekluZGV4Ont0eXBlOk51bWJlcixkZWZhdWx0OjB9fSxzZXR1cDplPT4oe3R5cGVDbGFzczpsKCgoKT0+e2NvbnN0IHQ9ZS50eXBlO3JldHVybiB0JiZJclt0XT9cImVsLW1lc3NhZ2VfX2ljb24gZWwtaWNvbi1cIitJclt0XTpcIlwifSkpLGN1c3RvbVN0eWxlOmwoKCgpPT4oe3RvcDplLm9mZnNldCtcInB4XCIsekluZGV4OmUuekluZGV4fSkpKSx2aXNpYmxlOnQoITEpLGNsb3NlZDp0KCExKSx0aW1lcjp0KG51bGwpfSksd2F0Y2g6e2Nsb3NlZChlKXtlJiYodGhpcy52aXNpYmxlPSExLGx0KHRoaXMuJGVsLFwidHJhbnNpdGlvbmVuZFwiLHRoaXMuZGVzdHJveUVsZW1lbnQpKX19LG1vdW50ZWQoKXt0aGlzLnN0YXJ0VGltZXIoKSx0aGlzLnZpc2libGU9ITAsbHQoZG9jdW1lbnQsXCJrZXlkb3duXCIsdGhpcy5rZXlkb3duKX0sYmVmb3JlVW5tb3VudCgpe2F0KGRvY3VtZW50LFwia2V5ZG93blwiLHRoaXMua2V5ZG93bil9LG1ldGhvZHM6e2Rlc3Ryb3lFbGVtZW50KCl7dGhpcy52aXNpYmxlPSExLGF0KHRoaXMuJGVsLFwidHJhbnNpdGlvbmVuZFwiLHRoaXMuZGVzdHJveUVsZW1lbnQpLHRoaXMub25DbG9zZSgpfSxzdGFydFRpbWVyKCl7dGhpcy5kdXJhdGlvbj4wJiYodGhpcy50aW1lcj1zZXRUaW1lb3V0KCgoKT0+e3RoaXMuY2xvc2VkfHx0aGlzLmNsb3NlKCl9KSx0aGlzLmR1cmF0aW9uKSl9LGNsZWFyVGltZXIoKXtjbGVhclRpbWVvdXQodGhpcy50aW1lciksdGhpcy50aW1lcj1udWxsfSxjbG9zZSgpe3RoaXMuY2xvc2VkPSEwLHRoaXMudGltZXI9bnVsbH0sa2V5ZG93bih7Y29kZTplfSl7ZT09PWZ0LmVzYz90aGlzLmNsb3NlZHx8dGhpcy5jbG9zZSgpOnRoaXMuc3RhcnRUaW1lcigpfX19KTtjb25zdCBCcj17a2V5OjAsY2xhc3M6XCJlbC1tZXNzYWdlX19jb250ZW50XCJ9O2xldCBMcjtBci5yZW5kZXI9ZnVuY3Rpb24oZSx0LGwsYyx2LG0pe3JldHVybiBhKCksbihvLHtuYW1lOlwiZWwtbWVzc2FnZS1mYWRlXCJ9LHtkZWZhdWx0OmkoKCgpPT5bcihzKFwiZGl2XCIse2lkOmUuaWQsY2xhc3M6W1wiZWwtbWVzc2FnZVwiLGUudHlwZSYmIWUuaWNvbkNsYXNzP1wiZWwtbWVzc2FnZS0tXCIrZS50eXBlOlwiXCIsZS5jZW50ZXI/XCJpcy1jZW50ZXJcIjpcIlwiLGUuc2hvd0Nsb3NlP1wiaXMtY2xvc2FibGVcIjpcIlwiLGUuY3VzdG9tQ2xhc3NdLHN0eWxlOmUuY3VzdG9tU3R5bGUscm9sZTpcImFsZXJ0XCIsb25Nb3VzZWVudGVyOnRbMl18fCh0WzJdPSguLi50KT0+ZS5jbGVhclRpbWVyKC4uLnQpKSxvbk1vdXNlbGVhdmU6dFszXXx8KHRbM109KC4uLnQpPT5lLnN0YXJ0VGltZXIoLi4udCkpfSxbZS50eXBlfHxlLmljb25DbGFzcz8oYSgpLG4oXCJpXCIse2tleTowLGNsYXNzOltlLnR5cGVDbGFzcyxlLmljb25DbGFzc119LG51bGwsMikpOnUoXCJ2LWlmXCIsITApLGQoZS4kc2xvdHMsXCJkZWZhdWx0XCIse30sKCgpPT5bZS5kYW5nZXJvdXNseVVzZUhUTUxTdHJpbmc/KGEoKSxuKEUse2tleToxfSxbdShcIiBDYXV0aW9uIGhlcmUsIG1lc3NhZ2UgY291bGQndmUgYmVlbiBjb21wcm9taXNlZCwgbmV2ZXIgdXNlIHVzZXIncyBpbnB1dCBhcyBtZXNzYWdlIFwiKSx1KFwiICBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgXCIpLHMoXCJwXCIse2NsYXNzOlwiZWwtbWVzc2FnZV9fY29udGVudFwiLGlubmVySFRNTDplLm1lc3NhZ2V9LG51bGwsOCxbXCJpbm5lckhUTUxcIl0pXSw2NCkpOihhKCksbihcInBcIixCcixwKGUubWVzc2FnZSksMSkpXSkpLGUuc2hvd0Nsb3NlPyhhKCksbihcImRpdlwiLHtrZXk6MSxjbGFzczpcImVsLW1lc3NhZ2VfX2Nsb3NlQnRuIGVsLWljb24tY2xvc2VcIixvbkNsaWNrOnRbMV18fCh0WzFdPVQoKCguLi50KT0+ZS5jbG9zZSguLi50KSksW1wic3RvcFwiXSkpfSkpOnUoXCJ2LWlmXCIsITApXSw0NixbXCJpZFwiXSksW1toLGUudmlzaWJsZV1dKV0pKSxfOjN9KX0sQXIuX19maWxlPVwicGFja2FnZXMvbWVzc2FnZS9zcmMvaW5kZXgudnVlXCI7Y29uc3QgenI9W107bGV0IEZyPTE7Y29uc3QgJHI9ZnVuY3Rpb24oZT17fSl7aWYoemUpcmV0dXJuO1wic3RyaW5nXCI9PXR5cGVvZiBlJiYoZT17bWVzc2FnZTplfSk7bGV0IHQ9ZSxsPWUub2Zmc2V0fHwyMDt6ci5mb3JFYWNoKCgoe3ZtOmV9KT0+e2wrPShlLmVsLm9mZnNldEhlaWdodHx8MCkrMTZ9KSksbCs9MTY7Y29uc3QgYT1cIm1lc3NhZ2VfXCIrRnIrKyxuPXQub25DbG9zZTt0PU9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSx0KSx7b25DbG9zZTooKT0+eyFmdW5jdGlvbihlLHQpe2NvbnN0IGw9enIuZmluZEluZGV4KCgoe3ZtOnR9KT0+e2NvbnN0e2lkOmx9PXQuY29tcG9uZW50LnByb3BzO3JldHVybiBlPT09bH0pKTtpZigtMT09PWwpcmV0dXJuO2NvbnN0e3ZtOmEsJGVsOm59PXpyW2xdO2lmKCFhKXJldHVybjtudWxsPT10fHx0KGEpO2NvbnN0IG89YS5lbC5vZmZzZXRIZWlnaHQ7VShudWxsLG4pLGsoKCgpPT57ZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChuKX0pKSx6ci5zcGxpY2UobCwxKTtjb25zdCBpPXpyLmxlbmd0aDtpZihpPDEpcmV0dXJuO2ZvcihsZXQgZT1sO2U8aTtlKyspe2NvbnN0IHQ9cGFyc2VJbnQoenJbZV0udm0uZWwuc3R5bGUudG9wLDEwKS1vLTE2O3pyW2VdLnZtLmNvbXBvbmVudC5wcm9wcy5vZmZzZXQ9dCx6cltlXS52bS5jb21wb25lbnQucHJvcHMudmVydE9mZnNldD10fX0oYSxuKX0sb2Zmc2V0OmwsaWQ6YSx6SW5kZXg6Z2wubmV4dFpJbmRleCgpfSk7Y29uc3Qgbz1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO28uY2xhc3NOYW1lPVwiY29udGFpbmVyX1wiK2E7Y29uc3QgaT10Lm1lc3NhZ2U7cmV0dXJuIExyPXMoQXIsdCxHKHQubWVzc2FnZSk/e2RlZmF1bHQ6KCk9Pml9Om51bGwpLFUoTHIsbyksenIucHVzaCh7dm06THIsJGVsOm99KSxkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKG8pLHtjbG9zZTp0Lm9uQ2xvc2V9fTtsZXQgUnI7W1wic3VjY2Vzc1wiLFwid2FybmluZ1wiLFwiaW5mb1wiLFwiZXJyb3JcIl0uZm9yRWFjaCgoZT0+eyRyW2VdPXQ9PihcInN0cmluZ1wiPT10eXBlb2YgdD90PXttZXNzYWdlOnQsdHlwZTplfTp0LnR5cGU9ZSwkcih0KSl9KSksJHIuY2xvc2VBbGw9ZnVuY3Rpb24oKXtmb3IobGV0IGU9enIubGVuZ3RoLTE7ZT49MDtlLS0pe3pyW2VdLnZtLmNvbXBvbmVudC5jdHguY2xvc2UoKX19LCRyLmluc3RhbGw9ZT0+e2UuY29uZmlnLmdsb2JhbFByb3BlcnRpZXMuJG1lc3NhZ2U9JHJ9O2NsYXNzIEhye2NvbnN0cnVjdG9yKGUsdCxsKXtpZih0aGlzLmRpYWxvZ05vZGU9ZSx0aGlzLmZvY3VzQWZ0ZXJDbG9zZWQ9dCx0aGlzLmZvY3VzRmlyc3Q9bCx0aGlzLmxhc3RGb2N1cz1udWxsLG51bGw9PT10aGlzLmRpYWxvZ05vZGV8fFwiZGlhbG9nXCIhPT10aGlzLmRpYWxvZ05vZGUuZ2V0QXR0cmlidXRlKFwicm9sZVwiKSl0aHJvdyBuZXcgRXJyb3IoXCJEaWFsb2coKSByZXF1aXJlcyBhIERPTSBlbGVtZW50IHdpdGggQVJJQSByb2xlIG9mIGRpYWxvZy5cIik7dGhpcy5mb2N1c0FmdGVyQ2xvc2VkPVwic3RyaW5nXCI9PXR5cGVvZiB0P2RvY3VtZW50LmdldEVsZW1lbnRCeUlkKHQpOlwib2JqZWN0XCI9PXR5cGVvZiB0P3Q6bnVsbCx0aGlzLmZvY3VzRmlyc3Q9XCJzdHJpbmdcIj09dHlwZW9mIGw/ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQobCk6XCJvYmplY3RcIj09dHlwZW9mIGw/bDpudWxsLHRoaXMuZm9jdXNGaXJzdD90aGlzLmZvY3VzRmlyc3QuZm9jdXMoKTp4dC5mb2N1c0ZpcnN0RGVzY2VuZGFudCh0aGlzLmRpYWxvZ05vZGUpLHRoaXMubGFzdEZvY3VzPWRvY3VtZW50LmFjdGl2ZUVsZW1lbnQsUnI9ZT0+e3RoaXMudHJhcEZvY3VzKGUpfSx0aGlzLmFkZExpc3RlbmVycygpfWFkZExpc3RlbmVycygpe2RvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJmb2N1c1wiLFJyLCEwKX1yZW1vdmVMaXN0ZW5lcnMoKXtkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwiZm9jdXNcIixSciwhMCl9Y2xvc2VEaWFsb2coKXt0aGlzLnJlbW92ZUxpc3RlbmVycygpLHRoaXMuZm9jdXNBZnRlckNsb3NlZCYmc2V0VGltZW91dCgoKCk9Pnt0aGlzLmZvY3VzQWZ0ZXJDbG9zZWQuZm9jdXMoKX0pKX10cmFwRm9jdXMoZSl7eHQuSWdub3JlVXRpbEZvY3VzQ2hhbmdlc3x8KHRoaXMuZGlhbG9nTm9kZS5jb250YWlucyhlLnRhcmdldCk/dGhpcy5sYXN0Rm9jdXM9ZS50YXJnZXQ6KHh0LmZvY3VzRmlyc3REZXNjZW5kYW50KHRoaXMuZGlhbG9nTm9kZSksdGhpcy5sYXN0Rm9jdXM9PT1kb2N1bWVudC5hY3RpdmVFbGVtZW50JiZ4dC5mb2N1c0xhc3REZXNjZW5kYW50KHRoaXMuZGlhbG9nTm9kZSksdGhpcy5sYXN0Rm9jdXM9ZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkpfX1sZXQgV3IsanI9MTtsZXQgS3I7Y29uc3QgWXI9e3N1Y2Nlc3M6XCJzdWNjZXNzXCIsaW5mbzpcImluZm9cIix3YXJuaW5nOlwid2FybmluZ1wiLGVycm9yOlwiZXJyb3JcIn07dmFyIHFyPWUoe25hbWU6XCJFbE1lc3NhZ2VCb3hcIixjb21wb25lbnRzOntFbEJ1dHRvbjokbCxFbElucHV0Old0fSxwcm9wczp7b3BlbkRlbGF5Ont0eXBlOk51bWJlcixkZWZhdWx0OjB9LGNsb3NlRGVsYXk6e3R5cGU6TnVtYmVyLGRlZmF1bHQ6MH0sekluZGV4Ok51bWJlcixtb2RhbEZhZGU6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiEwfSxtb2RhbENsYXNzOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiXCJ9LG1vZGFsQXBwZW5kVG9Cb2R5Ont0eXBlOkJvb2xlYW4sZGVmYXVsdDohMX0sbW9kYWw6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiEwfSxsb2NrU2Nyb2xsOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMH0sc2hvd0Nsb3NlOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMH0sY2xvc2VPbkNsaWNrTW9kYWw6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiEwfSxjbG9zZU9uUHJlc3NFc2NhcGU6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiEwfSxjbG9zZU9uSGFzaENoYW5nZTp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITB9LGNlbnRlcjp7ZGVmYXVsdDohMSx0eXBlOkJvb2xlYW59LHJvdW5kQnV0dG9uOntkZWZhdWx0OiExLHR5cGU6Qm9vbGVhbn19LHNldHVwKGUpe2xldCB0O2NvbnN0IGE9KChlLHQsbD1cInJvb3RcIik9PntsZXQgYSxuPSExLG89ITEsaT1udWxsLHI9bnVsbDtjb25zdCBzPXYoKSx1PWYoe29wZW5lZDohMSxib2R5UGFkZGluZ1JpZ2h0Om51bGwsY29tcHV0ZWRCb2R5UGFkZGluZ1JpZ2h0OjAsd2l0aG91dEhpZGRlbkNsYXNzOiEwLHJlbmRlcmVkOiExLHZpc2libGU6ITF9KTtYKCgoKT0+e2NvbnN0e2hhbmRsZUNsb3NlOnQsaGFuZGxlQWN0aW9uOmx9PXMucHJveHk7YT1cInBvcHVwLVwiK2pyKyssZ2wucmVnaXN0ZXIoYSxPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sQyhlKSkse2Nsb3NlOnAsaGFuZGxlQ2xvc2U6dCxoYW5kbGVBY3Rpb246bH0pKX0pKSxPKCgoKT0+e2dsLmRlcmVnaXN0ZXIoYSksZ2wuY2xvc2VNb2RhbChhKSxtKCl9KSk7Y29uc3QgZD10PT57aWYoemUpcmV0dXJuO2lmKHUub3BlbmVkKXJldHVybjtuPSEwO2NvbnN0IGk9cy5yZWZzW2xdLHI9dC5tb2RhbCxkPXQuekluZGV4O2lmKGQmJihnbC56SW5kZXg9ZCksciYmKG8mJihnbC5jbG9zZU1vZGFsKGEpLG89ITEpLGdsLm9wZW5Nb2RhbChhLGdsLm5leHRaSW5kZXgoKSxlLm1vZGFsQXBwZW5kVG9Cb2R5P3ZvaWQgMDppLHQubW9kYWxDbGFzcyx0Lm1vZGFsRmFkZSksdC5sb2NrU2Nyb2xsKSl7dS53aXRob3V0SGlkZGVuQ2xhc3M9IW50KGRvY3VtZW50LmJvZHksXCJlbC1wb3B1cC1wYXJlbnQtLWhpZGRlblwiKSx1LndpdGhvdXRIaWRkZW5DbGFzcyYmKHUuYm9keVBhZGRpbmdSaWdodD1kb2N1bWVudC5ib2R5LnN0eWxlLnBhZGRpbmdSaWdodCx1LmNvbXB1dGVkQm9keVBhZGRpbmdSaWdodD1wYXJzZUludChydChkb2N1bWVudC5ib2R5LFwicGFkZGluZ1JpZ2h0XCIpLDEwKSksV3I9aHQoKTtjb25zdCBlPWRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQ8ZG9jdW1lbnQuYm9keS5zY3JvbGxIZWlnaHQsdD1ydChkb2N1bWVudC5ib2R5LFwib3ZlcmZsb3dZXCIpO1dyPjAmJihlfHxcInNjcm9sbFwiPT09dCkmJnUud2l0aG91dEhpZGRlbkNsYXNzJiYoZG9jdW1lbnQuYm9keS5zdHlsZS5wYWRkaW5nUmlnaHQ9dS5jb21wdXRlZEJvZHlQYWRkaW5nUmlnaHQrV3IrXCJweFwiKSxvdChkb2N1bWVudC5ib2R5LFwiZWwtcG9wdXAtcGFyZW50LS1oaWRkZW5cIil9XCJzdGF0aWNcIj09PWdldENvbXB1dGVkU3R5bGUoaSkucG9zaXRpb24mJihpLnN0eWxlLnBvc2l0aW9uPVwiYWJzb2x1dGVcIiksaS5zdHlsZS56SW5kZXg9U3RyaW5nKGdsLm5leHRaSW5kZXgoKSksdS5vcGVuZWQ9ITAsaCgpfSxjPWZ1bmN0aW9uKHQpe3UucmVuZGVyZWR8fCh1LnJlbmRlcmVkPSEwKTtjb25zdCBsPU9iamVjdC5hc3NpZ24oe30sZXx8cy5wcm94eSx0KTtpJiYoY2xlYXJUaW1lb3V0KGkpLGk9bnVsbCksY2xlYXJUaW1lb3V0KHIpO2NvbnN0IGE9TnVtYmVyKGwub3BlbkRlbGF5KTthPjA/cj1zZXRUaW1lb3V0KCgoKT0+e3I9bnVsbCxkKGwpfSksYSk6ZChsKX0scD0oKT0+e251bGwhPT1yJiYoY2xlYXJUaW1lb3V0KHIpLHI9bnVsbCksY2xlYXJUaW1lb3V0KGkpO2NvbnN0IGw9TnVtYmVyKGUuY2xvc2VEZWxheSk7bD4wP2k9c2V0VGltZW91dCgoKCk9PntpPW51bGwsdCgpfSksbCk6dCgpfSxoPSgpPT57bj0hMX0sbT0oKT0+e2UubW9kYWwmJnUud2l0aG91dEhpZGRlbkNsYXNzJiYoZG9jdW1lbnQuYm9keS5zdHlsZS5wYWRkaW5nUmlnaHQ9dS5ib2R5UGFkZGluZ1JpZ2h0LGl0KGRvY3VtZW50LmJvZHksXCJlbC1wb3B1cC1wYXJlbnQtLWhpZGRlblwiKSksdS53aXRob3V0SGlkZGVuQ2xhc3M9ITB9O3JldHVybiB5KCgoKT0+dS52aXNpYmxlKSwoZT0+bnIodm9pZCAwLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKigpe2lmKGUpe2lmKG4pcmV0dXJuO3UucmVuZGVyZWR8fCh1LnJlbmRlcmVkPSEwLHlpZWxkIGsoKSksYygpfWVsc2UgcCgpfSkpKSkse3N0YXRlOnUsb3BlbjpjLGNsb3NlOnAsZG9BZnRlckNsb3NlOigpPT57Z2wuY2xvc2VNb2RhbChhKSxvPSExfSx1cGRhdGVDbG9zaW5nRmxhZzplPT57bz1lfSxyZXN0b3JlQm9keVN0eWxlOm19fSkoZSxzKSxuPWYoe3VpZDoxLHRpdGxlOnZvaWQgMCxtZXNzYWdlOlwiXCIsdHlwZTpcIlwiLGljb25DbGFzczpcIlwiLGN1c3RvbUNsYXNzOlwiXCIsc2hvd0lucHV0OiExLGlucHV0VmFsdWU6bnVsbCxpbnB1dFBsYWNlaG9sZGVyOlwiXCIsaW5wdXRUeXBlOlwidGV4dFwiLGlucHV0UGF0dGVybjpudWxsLGlucHV0VmFsaWRhdG9yOm51bGwsaW5wdXRFcnJvck1lc3NhZ2U6XCJcIixzaG93Q29uZmlybUJ1dHRvbjohMCxzaG93Q2FuY2VsQnV0dG9uOiExLGFjdGlvbjpcIlwiLGNvbmZpcm1CdXR0b25UZXh0OlwiXCIsY2FuY2VsQnV0dG9uVGV4dDpcIlwiLGNvbmZpcm1CdXR0b25Mb2FkaW5nOiExLGNhbmNlbEJ1dHRvbkxvYWRpbmc6ITEsY29uZmlybUJ1dHRvbkNsYXNzOlwiXCIsY29uZmlybUJ1dHRvbkRpc2FibGVkOiExLGNhbmNlbEJ1dHRvbkNsYXNzOlwiXCIsZWRpdG9yRXJyb3JNZXNzYWdlOm51bGwsY2FsbGJhY2s6bnVsbCxkYW5nZXJvdXNseVVzZUhUTUxTdHJpbmc6ITEsZm9jdXNBZnRlckNsb3NlZDpudWxsLGlzT25Db21wb3NpdGlvbjohMSxkaXN0aW5ndWlzaENhbmNlbEFuZENsb3NlOiExLHR5cGUkOlwiXCIsdmlzaWJsZTohMSx2YWxpZGF0ZUVycm9yOiExfSksbz1sKCgoKT0+bi5pY29uQ2xhc3N8fChuLnR5cGUmJllyW24udHlwZV0/XCJlbC1pY29uLVwiK1lyW24udHlwZV06XCJcIikpKSxpPWwoKCgpPT4hIW4ubWVzc2FnZSkpLHI9bCgoKCk9PlwiZWwtYnV0dG9uLS1wcmltYXJ5IFwiK24uY29uZmlybUJ1dHRvbkNsYXNzKSk7ZnVuY3Rpb24gcygpe24udmlzaWJsZSYmKG4udmlzaWJsZT0hMSxhLnVwZGF0ZUNsb3NpbmdGbGFnKCEwKSxLci5jbG9zZURpYWxvZygpLGUubG9ja1Njcm9sbCYmc2V0VGltZW91dChhLnJlc3RvcmVCb2R5U3R5bGUsMjAwKSxhLnN0YXRlLm9wZW5lZD0hMSxhLmRvQWZ0ZXJDbG9zZSgpLHNldFRpbWVvdXQoKCgpPT57bi5hY3Rpb24mJm4uY2FsbGJhY2sobi5hY3Rpb24sbil9KSkpfXkoKCgpPT5uLmlucHV0VmFsdWUpLChlPT5ucih0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKigpe3lpZWxkIGsoKSxcInByb21wdFwiPT09bi50eXBlJCYmbnVsbCE9PWUmJmMoKX0pKSkse2ltbWVkaWF0ZTohMH0pLHkoKCgpPT5uLnZpc2libGUpLChlPT57YS5zdGF0ZS52aXNpYmxlPWUsZSYmKG4udWlkKyssXCJhbGVydFwiIT09bi50eXBlJCYmXCJjb25maXJtXCIhPT1uLnR5cGUkfHxrKCkudGhlbigoKCk9Pnt0LnJlZnMuY29uZmlybS4kZWwuZm9jdXMoKX0pKSxuLmZvY3VzQWZ0ZXJDbG9zZWQ9ZG9jdW1lbnQuYWN0aXZlRWxlbWVudCxLcj1uZXcgSHIodC52bm9kZS5lbCxuLmZvY3VzQWZ0ZXJDbG9zZWQsdSgpKSksXCJwcm9tcHRcIj09PW4udHlwZSQmJihlP2soKS50aGVuKCgoKT0+e3QucmVmcy5pbnB1dCYmdC5yZWZzLmlucHV0LiRlbCYmcCgpLmZvY3VzKCl9KSk6KG4uZWRpdG9yRXJyb3JNZXNzYWdlPVwiXCIsbi52YWxpZGF0ZUVycm9yPSExKSl9KSksWCgoKCk9Pnt0PXYoKSx0LnNldHVwSW5zdGFsbD17c3RhdGU6bixkb0Nsb3NlOnN9fSkpLF8oKCgpPT5ucih0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKigpe3lpZWxkIGsoKSxlLmNsb3NlT25IYXNoQ2hhbmdlJiZsdCh3aW5kb3csXCJoYXNoY2hhbmdlXCIsYS5jbG9zZSl9KSkpKSxPKCgoKT0+e2UuY2xvc2VPbkhhc2hDaGFuZ2UmJmF0KHdpbmRvdyxcImhhc2hjaGFuZ2VcIixhLmNsb3NlKSxzZXRUaW1lb3V0KCgoKT0+e0tyLmNsb3NlRGlhbG9nKCl9KSl9KSk7Y29uc3QgdT0oKT0+e2NvbnN0IGU9dC52bm9kZS5lbC5xdWVyeVNlbGVjdG9yKFwiLmVsLW1lc3NhZ2UtYm94X19idG5zIC5lbC1idXR0b25cIiksbD10LnZub2RlLmVsLnF1ZXJ5U2VsZWN0b3IoXCIuZWwtbWVzc2FnZS1ib3hfX2J0bnMgLmVsLW1lc3NhZ2UtYm94X190aXRsZVwiKTtyZXR1cm4gZXx8bH0sZD1lPT57KFwicHJvbXB0XCIhPT1uLnR5cGUkfHxcImNvbmZpcm1cIiE9PWV8fGMoKSkmJihuLmFjdGlvbj1lLFwiZnVuY3Rpb25cIj09dHlwZW9mIHQuc2V0dXBJbnN0YWxsLnN0YXRlLmJlZm9yZUNsb3NlPyh0LnNldHVwSW5zdGFsbC5zdGF0ZS5jbG9zZT1mdW5jdGlvbigpe2NvbnN0IGU9bi51aWQ7cmV0dXJuKCk9Pm5yKHRoaXMsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24qKCl7eWllbGQgaygpLGU9PT1uLnVpZCYmcygpfSkpfSgpLHQuc2V0dXBJbnN0YWxsLnN0YXRlLmJlZm9yZUNsb3NlKGUsbixhLmNsb3NlKSk6cygpKX0sYz0oKT0+e2lmKFwicHJvbXB0XCI9PT1uLnR5cGUkKXtjb25zdCBlPW4uaW5wdXRQYXR0ZXJuO2lmKGUmJiFlLnRlc3Qobi5pbnB1dFZhbHVlfHxcIlwiKSlyZXR1cm4gbi5lZGl0b3JFcnJvck1lc3NhZ2U9bi5pbnB1dEVycm9yTWVzc2FnZXx8cWwoXCJlbC5tZXNzYWdlYm94LmVycm9yXCIpLG4udmFsaWRhdGVFcnJvcj0hMCwhMTtjb25zdCB0PW4uaW5wdXRWYWxpZGF0b3I7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgdCl7Y29uc3QgZT10KG4uaW5wdXRWYWx1ZSk7aWYoITE9PT1lKXJldHVybiBuLmVkaXRvckVycm9yTWVzc2FnZT1uLmlucHV0RXJyb3JNZXNzYWdlfHxxbChcImVsLm1lc3NhZ2Vib3guZXJyb3JcIiksbi52YWxpZGF0ZUVycm9yPSEwLCExO2lmKFwic3RyaW5nXCI9PXR5cGVvZiBlKXJldHVybiBuLmVkaXRvckVycm9yTWVzc2FnZT1lLG4udmFsaWRhdGVFcnJvcj0hMCwhMX19cmV0dXJuIG4uZWRpdG9yRXJyb3JNZXNzYWdlPVwiXCIsbi52YWxpZGF0ZUVycm9yPSExLCEwfSxwPSgpPT57Y29uc3QgZT10LnJlZnMuaW5wdXQuJHJlZnM7cmV0dXJuIGUuaW5wdXR8fGUudGV4dGFyZWF9O3JldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sQyhuKSkse2hhc01lc3NhZ2U6aSxpY29uOm8sY29uZmlybUJ1dHRvbkNsYXNzZXM6cixoYW5kbGVXcmFwcGVyQ2xpY2s6KCk9PntlLmNsb3NlT25DbGlja01vZGFsJiZkKG4uZGlzdGluZ3Vpc2hDYW5jZWxBbmRDbG9zZT9cImNsb3NlXCI6XCJjYW5jZWxcIil9LGhhbmRsZUlucHV0RW50ZXI6KCk9PntpZihcInRleHRhcmVhXCIhPT1uLmlucHV0VHlwZSlyZXR1cm4gZChcImNvbmZpcm1cIil9LGhhbmRsZUFjdGlvbjpkLGhhbmRsZUNsb3NlOigpPT57ZChcImNsb3NlXCIpfSx0OnFsLGRvQ2xvc2U6c30pfX0pO2NvbnN0IFVyPXtrZXk6MCxjbGFzczpcImVsLW1lc3NhZ2UtYm94X19oZWFkZXJcIn0sR3I9e2NsYXNzOlwiZWwtbWVzc2FnZS1ib3hfX3RpdGxlXCJ9LFhyPXMoXCJpXCIse2NsYXNzOlwiZWwtbWVzc2FnZS1ib3hfX2Nsb3NlIGVsLWljb24tY2xvc2VcIn0sbnVsbCwtMSksUXI9e2NsYXNzOlwiZWwtbWVzc2FnZS1ib3hfX2NvbnRlbnRcIn0sWnI9e2NsYXNzOlwiZWwtbWVzc2FnZS1ib3hfX2NvbnRhaW5lclwifSxKcj17a2V5OjEsY2xhc3M6XCJlbC1tZXNzYWdlLWJveF9fbWVzc2FnZVwifSxlcz17a2V5OjB9LHRzPXtjbGFzczpcImVsLW1lc3NhZ2UtYm94X19pbnB1dFwifSxscz17Y2xhc3M6XCJlbC1tZXNzYWdlLWJveF9fYnRuc1wifTtsZXQgYXMsbnM7cXIucmVuZGVyPWZ1bmN0aW9uKGUsdCxsLHYsbSxmKXtjb25zdCBnPVAoXCJlbC1pbnB1dFwiKSxiPVAoXCJlbC1idXR0b25cIik7cmV0dXJuIGEoKSxuKG8se25hbWU6XCJtc2dib3gtZmFkZVwifSx7ZGVmYXVsdDppKCgoKT0+W3IocyhcImRpdlwiLHtyZWY6XCJyb290XCIsXCJhcmlhLWxhYmVsXCI6ZS50aXRsZXx8XCJkaWFsb2dcIixjbGFzczpcImVsLW1lc3NhZ2UtYm94X193cmFwcGVyXCIsdGFiaW5kZXg6XCItMVwiLHJvbGU6XCJkaWFsb2dcIixcImFyaWEtbW9kYWxcIjpcInRydWVcIixvbkNsaWNrOnRbOF18fCh0WzhdPVQoKCguLi50KT0+ZS5oYW5kbGVXcmFwcGVyQ2xpY2soLi4udCkpLFtcInNlbGZcIl0pKX0sW3MoXCJkaXZcIix7Y2xhc3M6W1wiZWwtbWVzc2FnZS1ib3hcIixbZS5jdXN0b21DbGFzcyxlLmNlbnRlciYmXCJlbC1tZXNzYWdlLWJveC0tY2VudGVyXCJdXX0sW251bGwhPT1lLnRpdGxlJiZ2b2lkIDAhPT1lLnRpdGxlPyhhKCksbihcImRpdlwiLFVyLFtzKFwiZGl2XCIsR3IsW2UuaWNvbiYmZS5jZW50ZXI/KGEoKSxuKFwiZGl2XCIse2tleTowLGNsYXNzOltcImVsLW1lc3NhZ2UtYm94X19zdGF0dXNcIixlLmljb25dfSxudWxsLDIpKTp1KFwidi1pZlwiLCEwKSxzKFwic3BhblwiLG51bGwscChlLnRpdGxlKSwxKV0pLGUuc2hvd0Nsb3NlPyhhKCksbihcImJ1dHRvblwiLHtrZXk6MCx0eXBlOlwiYnV0dG9uXCIsY2xhc3M6XCJlbC1tZXNzYWdlLWJveF9faGVhZGVyYnRuXCIsXCJhcmlhLWxhYmVsXCI6XCJDbG9zZVwiLG9uQ2xpY2s6dFsxXXx8KHRbMV09dD0+ZS5oYW5kbGVBY3Rpb24oZS5kaXN0aW5ndWlzaENhbmNlbEFuZENsb3NlP1wiY2xvc2VcIjpcImNhbmNlbFwiKSksb25LZXlkb3duOnRbMl18fCh0WzJdPSQoKHQ9PmUuaGFuZGxlQWN0aW9uKGUuZGlzdGluZ3Vpc2hDYW5jZWxBbmRDbG9zZT9cImNsb3NlXCI6XCJjYW5jZWxcIikpLFtcImVudGVyXCJdKSl9LFtYcl0sMzIpKTp1KFwidi1pZlwiLCEwKV0pKTp1KFwidi1pZlwiLCEwKSxzKFwiZGl2XCIsUXIsW3MoXCJkaXZcIixacixbZS5pY29uJiYhZS5jZW50ZXImJmUuaGFzTWVzc2FnZT8oYSgpLG4oXCJkaXZcIix7a2V5OjAsY2xhc3M6W1wiZWwtbWVzc2FnZS1ib3hfX3N0YXR1c1wiLGUuaWNvbl19LG51bGwsMikpOnUoXCJ2LWlmXCIsITApLGUuaGFzTWVzc2FnZT8oYSgpLG4oXCJkaXZcIixKcixbZChlLiRzbG90cyxcImRlZmF1bHRcIix7fSwoKCk9PltlLmRhbmdlcm91c2x5VXNlSFRNTFN0cmluZz8oYSgpLG4oXCJwXCIse2tleToxLGlubmVySFRNTDplLm1lc3NhZ2V9LG51bGwsOCxbXCJpbm5lckhUTUxcIl0pKTooYSgpLG4oXCJwXCIsZXMscChlLm1lc3NhZ2UpLDEpKV0pKV0pKTp1KFwidi1pZlwiLCEwKV0pLHIocyhcImRpdlwiLHRzLFtzKGcse3JlZjpcImlucHV0XCIsbW9kZWxWYWx1ZTplLmlucHV0VmFsdWUsXCJvblVwZGF0ZTptb2RlbFZhbHVlXCI6dFszXXx8KHRbM109dD0+ZS5pbnB1dFZhbHVlPXQpLHR5cGU6ZS5pbnB1dFR5cGUscGxhY2Vob2xkZXI6ZS5pbnB1dFBsYWNlaG9sZGVyLGNsYXNzOntpbnZhbGlkOmUudmFsaWRhdGVFcnJvcn0sb25LZXlkb3duOiQoZS5oYW5kbGVJbnB1dEVudGVyLFtcImVudGVyXCJdKX0sbnVsbCw4LFtcIm1vZGVsVmFsdWVcIixcInR5cGVcIixcInBsYWNlaG9sZGVyXCIsXCJjbGFzc1wiLFwib25LZXlkb3duXCJdKSxzKFwiZGl2XCIse2NsYXNzOlwiZWwtbWVzc2FnZS1ib3hfX2Vycm9ybXNnXCIsc3R5bGU6e3Zpc2liaWxpdHk6ZS5lZGl0b3JFcnJvck1lc3NhZ2U/XCJ2aXNpYmxlXCI6XCJoaWRkZW5cIn19LHAoZS5lZGl0b3JFcnJvck1lc3NhZ2UpLDUpXSw1MTIpLFtbaCxlLnNob3dJbnB1dF1dKV0pLHMoXCJkaXZcIixscyxbZS5zaG93Q2FuY2VsQnV0dG9uPyhhKCksbihiLHtrZXk6MCxsb2FkaW5nOmUuY2FuY2VsQnV0dG9uTG9hZGluZyxjbGFzczpbZS5jYW5jZWxCdXR0b25DbGFzc10scm91bmQ6ZS5yb3VuZEJ1dHRvbixzaXplOlwic21hbGxcIixvbkNsaWNrOnRbNF18fCh0WzRdPXQ9PmUuaGFuZGxlQWN0aW9uKFwiY2FuY2VsXCIpKSxvbktleWRvd246dFs1XXx8KHRbNV09JCgodD0+ZS5oYW5kbGVBY3Rpb24oXCJjYW5jZWxcIikpLFtcImVudGVyXCJdKSl9LHtkZWZhdWx0OmkoKCgpPT5bYyhwKGUuY2FuY2VsQnV0dG9uVGV4dHx8ZS50KFwiZWwubWVzc2FnZWJveC5jYW5jZWxcIikpLDEpXSkpLF86MX0sOCxbXCJsb2FkaW5nXCIsXCJjbGFzc1wiLFwicm91bmRcIl0pKTp1KFwidi1pZlwiLCEwKSxyKHMoYix7cmVmOlwiY29uZmlybVwiLGxvYWRpbmc6ZS5jb25maXJtQnV0dG9uTG9hZGluZyxjbGFzczpbZS5jb25maXJtQnV0dG9uQ2xhc3Nlc10scm91bmQ6ZS5yb3VuZEJ1dHRvbixkaXNhYmxlZDplLmNvbmZpcm1CdXR0b25EaXNhYmxlZCxzaXplOlwic21hbGxcIixvbkNsaWNrOnRbNl18fCh0WzZdPXQ9PmUuaGFuZGxlQWN0aW9uKFwiY29uZmlybVwiKSksb25LZXlkb3duOnRbN118fCh0WzddPSQoKHQ9PmUuaGFuZGxlQWN0aW9uKFwiY29uZmlybVwiKSksW1wiZW50ZXJcIl0pKX0se2RlZmF1bHQ6aSgoKCk9PltjKHAoZS5jb25maXJtQnV0dG9uVGV4dHx8ZS50KFwiZWwubWVzc2FnZWJveC5jb25maXJtXCIpKSwxKV0pKSxfOjF9LDgsW1wibG9hZGluZ1wiLFwiY2xhc3NcIixcInJvdW5kXCIsXCJkaXNhYmxlZFwiXSksW1toLGUuc2hvd0NvbmZpcm1CdXR0b25dXSldKV0sMildLDgsW1wiYXJpYS1sYWJlbFwiXSksW1toLGUudmlzaWJsZV1dKV0pKSxfOjF9KX0scXIuX19maWxlPVwicGFja2FnZXMvbWVzc2FnZS1ib3gvc3JjL2luZGV4LnZ1ZVwiO2NvbnN0IG9zPVtcImxvY2tTY3JvbGxcIixcInNob3dDbG9zZVwiLFwiY2xvc2VPbkNsaWNrTW9kYWxcIixcImNsb3NlT25QcmVzc0VzY2FwZVwiLFwiY2xvc2VPbkhhc2hDaGFuZ2VcIixcImNlbnRlclwiLFwicm91bmRCdXR0b25cIixcImNsb3NlRGVsYXlcIixcInpJbmRleFwiLFwibW9kYWxcIixcIm1vZGFsRmFkZVwiLFwibW9kYWxDbGFzc1wiLFwibW9kYWxBcHBlbmRUb0JvZHlcIixcImxvY2tTY3JvbGxcIl0saXM9e3RpdGxlOm51bGwsbWVzc2FnZTpcIlwiLHR5cGU6XCJcIixpY29uQ2xhc3M6XCJcIixzaG93SW5wdXQ6ITEsc2hvd0Nsb3NlOiEwLG1vZGFsRmFkZTohMCxsb2NrU2Nyb2xsOiEwLGNsb3NlT25DbGlja01vZGFsOiEwLGNsb3NlT25QcmVzc0VzY2FwZTohMCxjbG9zZU9uSGFzaENoYW5nZTohMCxpbnB1dFZhbHVlOm51bGwsaW5wdXRQbGFjZWhvbGRlcjpcIlwiLGlucHV0VHlwZTpcInRleHRcIixpbnB1dFBhdHRlcm46bnVsbCxpbnB1dFZhbGlkYXRvcjpudWxsLGlucHV0RXJyb3JNZXNzYWdlOlwiXCIsc2hvd0NvbmZpcm1CdXR0b246ITAsc2hvd0NhbmNlbEJ1dHRvbjohMSxjb25maXJtQnV0dG9uUG9zaXRpb246XCJyaWdodFwiLGNvbmZpcm1CdXR0b25IaWdobGlnaHQ6ITEsY2FuY2VsQnV0dG9uSGlnaGxpZ2h0OiExLGNvbmZpcm1CdXR0b25UZXh0OlwiXCIsY2FuY2VsQnV0dG9uVGV4dDpcIlwiLGNvbmZpcm1CdXR0b25DbGFzczpcIlwiLGNhbmNlbEJ1dHRvbkNsYXNzOlwiXCIsY3VzdG9tQ2xhc3M6XCJcIixiZWZvcmVDbG9zZTpudWxsLGRhbmdlcm91c2x5VXNlSFRNTFN0cmluZzohMSxjZW50ZXI6ITEscm91bmRCdXR0b246ITEsZGlzdGluZ3Vpc2hDYW5jZWxBbmRDbG9zZTohMX07bGV0IHJzPVtdO2NvbnN0IHNzPShlLHQpPT57aWYoYXMpe2NvbnN0IGw9YXMuY2FsbGJhY2s7XCJmdW5jdGlvblwiPT10eXBlb2YgbCYmKHQuc2hvd0lucHV0P2wodC5pbnB1dFZhbHVlLGUpOmwoZSkpLGFzLnJlc29sdmUmJihcImNvbmZpcm1cIj09PWU/dC5zaG93SW5wdXQ/YXMucmVzb2x2ZSh7dmFsdWU6dC5pbnB1dFZhbHVlLGFjdGlvbjplfSk6YXMucmVzb2x2ZShlKTohYXMucmVqZWN0fHxcImNhbmNlbFwiIT09ZSYmXCJjbG9zZVwiIT09ZXx8YXMucmVqZWN0KGUpKX19LHVzPSgpPT5ucih2b2lkIDAsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24qKCl7aWYobnN8fCgoKT0+e2NvbnN0IGU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSx0PXMocXIpO1UodCxlKSxucz10LmNvbXBvbmVudH0pKCksKCFuc3x8IW5zLnNldHVwSW5zdGFsbC5zdGF0ZS52aXNpYmxlKSYmcnMubGVuZ3RoPjApe2NvbnN0IGU9e30sdD17fTthcz1ycy5zaGlmdCgpO2NvbnN0IGw9YXMub3B0aW9ucztPYmplY3Qua2V5cyhsKS5mb3JFYWNoKChhPT57b3MuaW5jbHVkZXMoYSk/ZVthXT1sW2FdOnRbYV09bFthXX0pKTtjb25zdCBhPW5zLnByb3BzO2Zvcihjb25zdCB0IGluIGUpZS5oYXNPd25Qcm9wZXJ0eSh0KSYmKGFbdF09ZVt0XSk7Y29uc3Qgbj1ucy5zZXR1cEluc3RhbGwuc3RhdGU7bi5hY3Rpb249XCJcIix2b2lkIDA9PT1sLmNhbGxiYWNrJiYobC5jYWxsYmFjaz1zcyk7Zm9yKGNvbnN0IGUgaW4gdCl0Lmhhc093blByb3BlcnR5KGUpJiYobltlXT10W2VdKTtHKGwubWVzc2FnZSkmJihucy5zbG90cy5kZWZhdWx0PSgpPT5bbC5tZXNzYWdlXSk7Y29uc3Qgbz1sLmNhbGxiYWNrO24uY2FsbGJhY2s9KGUsdCk9PntvKGUsdCksdXMoKX0sZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChucy52bm9kZS5lbCksbi52aXNpYmxlPSEwfX0pKSxkcz1mdW5jdGlvbihlLHQpe2lmKCF6ZSl7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGV8fEcoZSk/KGU9e21lc3NhZ2U6ZX0sXCJzdHJpbmdcIj09dHlwZW9mIHQmJihlLnRpdGxlPXQpKTplLmNhbGxiYWNrJiYhdCYmKHQ9ZS5jYWxsYmFjayksXCJ1bmRlZmluZWRcIiE9dHlwZW9mIFByb21pc2UpcmV0dXJuIG5ldyBQcm9taXNlKCgobCxhKT0+e3JzLnB1c2goe29wdGlvbnM6T2JqZWN0LmFzc2lnbih7fSxpcyxlKSxjYWxsYmFjazp0LHJlc29sdmU6bCxyZWplY3Q6YX0pLHVzKCl9KSk7cnMucHVzaCh7b3B0aW9uczpPYmplY3QuYXNzaWduKHt9LGlzLGUpLGNhbGxiYWNrOnR9KSx1cygpfX07ZHMuYWxlcnQ9KGUsdCxsKT0+KFwib2JqZWN0XCI9PXR5cGVvZiB0PyhsPXQsdD1cIlwiKTp2b2lkIDA9PT10JiYodD1cIlwiKSxkcyhPYmplY3QuYXNzaWduKHt0aXRsZTp0LG1lc3NhZ2U6ZSx0eXBlJDpcImFsZXJ0XCIsY2xvc2VPblByZXNzRXNjYXBlOiExLGNsb3NlT25DbGlja01vZGFsOiExfSxsKSkpLGRzLmNvbmZpcm09KGUsdCxsKT0+KFwib2JqZWN0XCI9PXR5cGVvZiB0PyhsPXQsdD1cIlwiKTp2b2lkIDA9PT10JiYodD1cIlwiKSxkcyhPYmplY3QuYXNzaWduKHt0aXRsZTp0LG1lc3NhZ2U6ZSx0eXBlJDpcImNvbmZpcm1cIixzaG93Q2FuY2VsQnV0dG9uOiEwfSxsKSkpLGRzLnByb21wdD0oZSx0LGwpPT4oXCJvYmplY3RcIj09dHlwZW9mIHQ/KGw9dCx0PVwiXCIpOnZvaWQgMD09PXQmJih0PVwiXCIpLGRzKE9iamVjdC5hc3NpZ24oe3RpdGxlOnQsbWVzc2FnZTplLHNob3dDYW5jZWxCdXR0b246ITAsc2hvd0lucHV0OiEwLHR5cGUkOlwicHJvbXB0XCJ9LGwpKSksZHMuY2xvc2U9KCk9Pntucy5zZXR1cEluc3RhbGwuZG9DbG9zZSgpLG5zLnNldHVwSW5zdGFsbC5zdGF0ZS52aXNpYmxlPSExLHJzPVtdLGFzPW51bGx9LGRzLmluc3RhbGw9ZT0+e2UuY29uZmlnLmdsb2JhbFByb3BlcnRpZXMuJG1zZ2JveD1kcyxlLmNvbmZpZy5nbG9iYWxQcm9wZXJ0aWVzLiRtZXNzYWdlQm94PWRzLGUuY29uZmlnLmdsb2JhbFByb3BlcnRpZXMuJGFsZXJ0PWRzLmFsZXJ0LGUuY29uZmlnLmdsb2JhbFByb3BlcnRpZXMuJGNvbmZpcm09ZHMuY29uZmlybSxlLmNvbmZpZy5nbG9iYWxQcm9wZXJ0aWVzLiRwcm9tcHQ9ZHMucHJvbXB0fTtjb25zdCBjcz17c3VjY2VzczpcInN1Y2Nlc3NcIixpbmZvOlwiaW5mb1wiLHdhcm5pbmc6XCJ3YXJuaW5nXCIsZXJyb3I6XCJlcnJvclwifTt2YXIgcHM9ZSh7bmFtZTpcIkVsTm90aWZpY2F0aW9uXCIscHJvcHM6e2N1c3RvbUNsYXNzOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiXCJ9LGRhbmdlcm91c2x5VXNlSFRNTFN0cmluZzp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITF9LGR1cmF0aW9uOnt0eXBlOk51bWJlcixkZWZhdWx0OjQ1MDB9LGljb25DbGFzczp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIlwifSxpZDp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIlwifSxtZXNzYWdlOnt0eXBlOltTdHJpbmcsT2JqZWN0XSxkZWZhdWx0OlwiXCJ9LG9mZnNldDp7dHlwZTpOdW1iZXIsZGVmYXVsdDowfSxvbkNsaWNrOnt0eXBlOkZ1bmN0aW9uLGRlZmF1bHQ6KCk9Pnt9fSxvbkNsb3NlOnt0eXBlOkZ1bmN0aW9uLHJlcXVpcmVkOiEwfSxwb3NpdGlvbjp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcInRvcC1yaWdodFwifSxzaG93Q2xvc2U6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiEwfSx0aXRsZTp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIlwifSx0eXBlOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiXCJ9LHpJbmRleDp7dHlwZTpOdW1iZXIsZGVmYXVsdDowfX0sZW1pdHM6W1wiY2xvc2VcIixcImNsaWNrXCJdLHNldHVwKGUpe2NvbnN0IGE9bCgoKCk9Pntjb25zdCB0PWUudHlwZTtyZXR1cm4gdCYmY3NbdF0/XCJlbC1pY29uLVwiK2NzW3RdOlwiXCJ9KSksbj1sKCgoKT0+ZS5wb3NpdGlvbi5pbmRleE9mKFwicmlnaHRcIik+MT9cInJpZ2h0XCI6XCJsZWZ0XCIpKSxvPWwoKCgpPT5lLnBvc2l0aW9uLnN0YXJ0c1dpdGgoXCJ0b3BcIik/XCJ0b3BcIjpcImJvdHRvbVwiKSksaT1sKCgoKT0+KHtbby52YWx1ZV06ZS5vZmZzZXQrXCJweFwifSkpKSxyPXQoITEpLHM9dCghMSksdT10KG51bGwpO3JldHVybntob3Jpem9udGFsQ2xhc3M6bix0eXBlQ2xhc3M6YSxwb3NpdGlvblN0eWxlOmksdmVydGljYWxQcm9wZXJ0eTpvLHZpc2libGU6cixjbG9zZWQ6cyx0aW1lcjp1fX0sd2F0Y2g6e2Nsb3NlZChlKXtlJiYodGhpcy52aXNpYmxlPSExLGx0KHRoaXMuJGVsLFwidHJhbnNpdGlvbmVuZFwiLHRoaXMuZGVzdHJveUVsZW1lbnQpKX19LG1vdW50ZWQoKXt0aGlzLmR1cmF0aW9uPjAmJih0aGlzLnRpbWVyPXNldFRpbWVvdXQoKCgpPT57dGhpcy5jbG9zZWR8fHRoaXMuY2xvc2UoKX0pLHRoaXMuZHVyYXRpb24pKSx0aGlzLnZpc2libGU9ITAsbHQoZG9jdW1lbnQsXCJrZXlkb3duXCIsdGhpcy5rZXlkb3duKX0sYmVmb3JlVW5tb3VudCgpe2F0KGRvY3VtZW50LFwia2V5ZG93blwiLHRoaXMua2V5ZG93bil9LG1ldGhvZHM6e2Rlc3Ryb3lFbGVtZW50KCl7dGhpcy52aXNpYmxlPSExLGF0KHRoaXMuJGVsLFwidHJhbnNpdGlvbmVuZFwiLHRoaXMuZGVzdHJveUVsZW1lbnQpLHRoaXMub25DbG9zZSgpfSxzdGFydFRpbWVyKCl7dGhpcy5kdXJhdGlvbj4wJiYodGhpcy50aW1lcj1zZXRUaW1lb3V0KCgoKT0+e3RoaXMuY2xvc2VkfHx0aGlzLmNsb3NlKCl9KSx0aGlzLmR1cmF0aW9uKSl9LGNsZWFyVGltZXIoKXtjbGVhclRpbWVvdXQodGhpcy50aW1lciksdGhpcy50aW1lcj1udWxsfSxjbGljaygpe251bGw9PXRoaXN8fHRoaXMub25DbGljaygpfSxjbG9zZSgpe3RoaXMuY2xvc2VkPSEwLHRoaXMudGltZXI9bnVsbH0sa2V5ZG93bih7Y29kZTplfSl7ZT09PWZ0LmRlbGV0ZXx8ZT09PWZ0LmJhY2tzcGFjZT90aGlzLmNsZWFyVGltZXIoKTplPT09ZnQuZXNjP3RoaXMuY2xvc2VkfHx0aGlzLmNsb3NlKCk6dGhpcy5zdGFydFRpbWVyKCl9fX0pO2NvbnN0IGhzPXtjbGFzczpcImVsLW5vdGlmaWNhdGlvbl9fY29udGVudFwifSx2cz17a2V5OjB9O2xldCBtcztwcy5yZW5kZXI9ZnVuY3Rpb24oZSx0LGwsYyx2LG0pe3JldHVybiBhKCksbihvLHtuYW1lOlwiZWwtbm90aWZpY2F0aW9uLWZhZGVcIn0se2RlZmF1bHQ6aSgoKCk9PltyKHMoXCJkaXZcIix7aWQ6ZS5pZCxjbGFzczpbXCJlbC1ub3RpZmljYXRpb25cIixlLmN1c3RvbUNsYXNzLGUuaG9yaXpvbnRhbENsYXNzXSxzdHlsZTplLnBvc2l0aW9uU3R5bGUscm9sZTpcImFsZXJ0XCIsb25Nb3VzZWVudGVyOnRbMl18fCh0WzJdPXQ9PmUuY2xlYXJUaW1lcigpKSxvbk1vdXNlbGVhdmU6dFszXXx8KHRbM109dD0+ZS5zdGFydFRpbWVyKCkpLG9uQ2xpY2s6dFs0XXx8KHRbNF09KC4uLnQpPT5lLmNsaWNrKC4uLnQpKX0sW2UudHlwZXx8ZS5pY29uQ2xhc3M/KGEoKSxuKFwiaVwiLHtrZXk6MCxjbGFzczpbXCJlbC1ub3RpZmljYXRpb25fX2ljb25cIixbZS50eXBlQ2xhc3MsZS5pY29uQ2xhc3NdXX0sbnVsbCwyKSk6dShcInYtaWZcIiwhMCkscyhcImRpdlwiLHtjbGFzczpbXCJlbC1ub3RpZmljYXRpb25fX2dyb3VwXCIse1wiaXMtd2l0aC1pY29uXCI6ZS50eXBlQ2xhc3N8fGUuaWNvbkNsYXNzfV19LFtzKFwiaDJcIix7Y2xhc3M6XCJlbC1ub3RpZmljYXRpb25fX3RpdGxlXCIsdGV4dENvbnRlbnQ6cChlLnRpdGxlKX0sbnVsbCw4LFtcInRleHRDb250ZW50XCJdKSxyKHMoXCJkaXZcIixocyxbZChlLiRzbG90cyxcImRlZmF1bHRcIix7fSwoKCk9PltlLmRhbmdlcm91c2x5VXNlSFRNTFN0cmluZz8oYSgpLG4oRSx7a2V5OjF9LFt1KFwiIENhdXRpb24gaGVyZSwgbWVzc2FnZSBjb3VsZCd2ZSBiZWVuIGNvbXByb21pemVkLCBuZXJ2ZXIgdXNlIHVzZXIncyBpbnB1dCBhcyBtZXNzYWdlIFwiKSx1KFwiIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBcIikscyhcInBcIix7aW5uZXJIVE1MOmUubWVzc2FnZX0sbnVsbCw4LFtcImlubmVySFRNTFwiXSldLDY0KSk6KGEoKSxuKFwicFwiLHZzLHAoZS5tZXNzYWdlKSwxKSldKSldLDUxMiksW1toLGUubWVzc2FnZV1dKSxlLnNob3dDbG9zZT8oYSgpLG4oXCJkaXZcIix7a2V5OjAsY2xhc3M6XCJlbC1ub3RpZmljYXRpb25fX2Nsb3NlQnRuIGVsLWljb24tY2xvc2VcIixvbkNsaWNrOnRbMV18fCh0WzFdPVQoKCguLi50KT0+ZS5jbG9zZSguLi50KSksW1wic3RvcFwiXSkpfSkpOnUoXCJ2LWlmXCIsITApXSwyKV0sNDYsW1wiaWRcIl0pLFtbaCxlLnZpc2libGVdXSldKSksXzozfSl9LHBzLl9fZmlsZT1cInBhY2thZ2VzL25vdGlmaWNhdGlvbi9zcmMvaW5kZXgudnVlXCI7Y29uc3QgZnM9W107bGV0IGdzPTE7Y29uc3QgYnM9ZnVuY3Rpb24oZT17fSl7aWYoemUpcmV0dXJuO2NvbnN0IHQ9ZS5wb3NpdGlvbnx8XCJ0b3AtcmlnaHRcIjtsZXQgbD1lLm9mZnNldHx8MDtmcy5maWx0ZXIoKCh7dm06ZX0pPT5lLmNvbXBvbmVudC5wcm9wcy5wb3NpdGlvbj09PXQpKS5mb3JFYWNoKCgoe3ZtOmV9KT0+e2wrPShlLmVsLm9mZnNldEhlaWdodHx8MCkrMTZ9KSksbCs9MTY7Y29uc3QgYT1cIm5vdGlmaWNhdGlvbl9cIitncysrLG49ZS5vbkNsb3NlO2U9T2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHtkYW5nZXJvdXNseVVzZUhUTUxTdHJpbmc6ITEsZHVyYXRpb246NDUwMCxwb3NpdGlvbjpcInRvcC1yaWdodFwiLHNob3dDbG9zZTohMH0sZSkse29uQ2xvc2U6KCk9PnshZnVuY3Rpb24oZSx0KXtjb25zdCBsPWZzLmZpbmRJbmRleCgoKHt2bTp0fSk9Pntjb25zdHtpZDpsfT10LmNvbXBvbmVudC5wcm9wcztyZXR1cm4gZT09PWx9KSk7aWYoLTE9PT1sKXJldHVybjtjb25zdHt2bTphLCRlbDpufT1mc1tsXTtpZighYSlyZXR1cm47bnVsbD09dHx8dChhKTtjb25zdCBvPWEuZWwub2Zmc2V0SGVpZ2h0O1UobnVsbCxuKSxmcy5zcGxpY2UobCwxKTtjb25zdCBpPWZzLmxlbmd0aDtpZihrKCgoKT0+e2RvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQobil9KSksaTwxKXJldHVybjtjb25zdCByPWEucHJvcHMucG9zaXRpb247Zm9yKGxldCBlPWw7ZTxpO2UrKylpZihmc1tlXS52bS5jb21wb25lbnQucHJvcHMucG9zaXRpb249PT1yKXtjb25zdCB0PWEucHJvcHMucG9zaXRpb24uc3BsaXQoXCItXCIpWzBdLGw9cGFyc2VJbnQoZnNbZV0udm0uZWwuc3R5bGVbdF0sMTApLW8tMTY7ZnNbZV0udm0uY29tcG9uZW50LnByb3BzLm9mZnNldD1sLHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKCk9PntVKGZzW2VdLnZtLGZzW2VdLiRlbCl9KSl9fShhLG4pfSxvZmZzZXQ6bCxpZDphLHpJbmRleDpnbC5uZXh0WkluZGV4KCl9KTtjb25zdCBvPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7cmV0dXJuIG8uY2xhc3NOYW1lPVwiY29udGFpbmVyX1wiK2Esby5zdHlsZS56SW5kZXg9U3RyaW5nKCksbXM9cyhwcyxlLEcoZS5tZXNzYWdlKT97ZGVmYXVsdDooKT0+ZS5tZXNzYWdlfTpudWxsKSxVKG1zLG8pLGZzLnB1c2goe3ZtOm1zLCRlbDpvfSksZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChvKSx7Y2xvc2U6ZS5vbkNsb3NlfX07W1wic3VjY2Vzc1wiLFwid2FybmluZ1wiLFwiaW5mb1wiLFwiZXJyb3JcIl0uZm9yRWFjaCgoZT0+e09iamVjdC5hc3NpZ24oYnMse1tlXToodD17fSk9PigoXCJzdHJpbmdcIj09dHlwZW9mIHR8fEcodCkpJiYodD17bWVzc2FnZTp0fSksdC50eXBlPWUsYnModCkpfSl9KSksYnMuaW5zdGFsbD1lPT57ZS5jb25maWcuZ2xvYmFsUHJvcGVydGllcy4kbm90aWZ5PWJzfTtjb25zdCB5cz1TeW1ib2woXCJTZWxlY3RHcm91cFwiKSxrcz1TeW1ib2woXCJTZWxlY3RcIiksQ3M9XCJlbE9wdGlvblF1ZXJ5Q2hhbmdlXCIseHM9XCJlbE9wdGlvbkdyb3VwUXVlcnlDaGFuZ2VcIjtmdW5jdGlvbiB3cyhlLHQpe2NvbnN0IGE9dyhrcyksbj13KHlzLHtkaXNhYmxlZDohMX0pLG89bCgoKCk9PlwiW29iamVjdCBvYmplY3RdXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZS52YWx1ZSkudG9Mb3dlckNhc2UoKSkpLGk9bCgoKCk9PmEucHJvcHMubXVsdGlwbGU/cChhLnByb3BzLm1vZGVsVmFsdWUsZS52YWx1ZSk6aChlLnZhbHVlLGEucHJvcHMubW9kZWxWYWx1ZSkpKSxyPWwoKCgpPT57aWYoYS5wcm9wcy5tdWx0aXBsZSl7Y29uc3QgZT1hLnByb3BzLm1vZGVsVmFsdWV8fFtdO3JldHVybiFpLnZhbHVlJiZlLmxlbmd0aD49YS5wcm9wcy5tdWx0aXBsZUxpbWl0JiZhLnByb3BzLm11bHRpcGxlTGltaXQ+MH1yZXR1cm4hMX0pKSxzPWwoKCgpPT5lLmxhYmVsfHwoby52YWx1ZT9cIlwiOmUudmFsdWUpKSksdT1sKCgoKT0+ZS52YWx1ZXx8ZS5sYWJlbHx8XCJcIikpLGQ9bCgoKCk9PmUuZGlzYWJsZWR8fHQuZ3JvdXBEaXNhYmxlZHx8ci52YWx1ZSkpLGM9digpLHA9KGU9W10sdCk9PntpZihvLnZhbHVlKXtjb25zdCBsPWEucHJvcHMudmFsdWVLZXk7cmV0dXJuIGUmJmUuc29tZSgoZT0+RmUoZSxsKT09PUZlKHQsbCkpKX1yZXR1cm4gZSYmZS5pbmRleE9mKHQpPi0xfSxoPShlLHQpPT57aWYoby52YWx1ZSl7Y29uc3R7dmFsdWVLZXk6bH09YS5wcm9wcztyZXR1cm4gRmUoZSxsKT09PUZlKHQsbCl9cmV0dXJuIGU9PT10fTtyZXR1cm4geSgoKCk9PnMudmFsdWUpLCgoKT0+e2UuY3JlYXRlZHx8YS5wcm9wcy5yZW1vdGV8fGEuc2V0U2VsZWN0ZWQoKX0pKSx5KCgoKT0+ZS52YWx1ZSksKCh0LGwpPT57Y29uc3R7cmVtb3RlOm4sdmFsdWVLZXk6b309YS5wcm9wcztpZighZS5jcmVhdGVkJiYhbil7aWYobyYmXCJvYmplY3RcIj09dHlwZW9mIHQmJlwib2JqZWN0XCI9PXR5cGVvZiBsJiZ0W29dPT09bFtvXSlyZXR1cm47YS5zZXRTZWxlY3RlZCgpfX0pKSxhLnNlbGVjdEVtaXR0ZXIub24oQ3MsKGw9Pntjb25zdCBuPW5ldyBSZWdFeHAoKChlPVwiXCIpPT5TdHJpbmcoZSkucmVwbGFjZSgvW3xcXFxce30oKVtcXF1eJCsqPy5dL2csXCJcXFxcJCZcIikpKGwpLFwiaVwiKTt0LnZpc2libGU9bi50ZXN0KHMudmFsdWUpfHxlLmNyZWF0ZWQsdC52aXNpYmxlfHxhLmZpbHRlcmVkT3B0aW9uc0NvdW50LS19KSkse3NlbGVjdDphLGN1cnJlbnRMYWJlbDpzLGN1cnJlbnRWYWx1ZTp1LGl0ZW1TZWxlY3RlZDppLGlzRGlzYWJsZWQ6ZCxob3Zlckl0ZW06KCk9PntlLmRpc2FibGVkfHxuLmRpc2FibGVkfHwoYS5ob3ZlckluZGV4PWEub3B0aW9ucy5pbmRleE9mKGMpKX19fXZhciBfcz1lKHtuYW1lOlwiRWxPcHRpb25cIixjb21wb25lbnROYW1lOlwiRWxPcHRpb25cIixwcm9wczp7dmFsdWU6e3JlcXVpcmVkOiEwLHR5cGU6W1N0cmluZyxOdW1iZXIsT2JqZWN0XX0sbGFiZWw6W1N0cmluZyxOdW1iZXJdLGNyZWF0ZWQ6Qm9vbGVhbixkaXNhYmxlZDp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITF9fSxzZXR1cChlKXtjb25zdCB0PWYoe2luZGV4Oi0xLGdyb3VwRGlzYWJsZWQ6ITEsdmlzaWJsZTohMCxoaXRTdGF0ZTohMSxob3ZlcjohMX0pLHtjdXJyZW50TGFiZWw6bCxpdGVtU2VsZWN0ZWQ6YSxpc0Rpc2FibGVkOm4sc2VsZWN0Om8saG92ZXJJdGVtOml9PXdzKGUsdCkse3Zpc2libGU6cixob3ZlcjpzfT1DKHQpLHU9digpLnByb3h5O3JldHVybiBvLm9uT3B0aW9uQ3JlYXRlKHUpLE8oKCgpPT57Y29uc3R7c2VsZWN0ZWQ6dH09bztsZXQgbD1vLnByb3BzLm11bHRpcGxlP3Q6W3RdLGE9by5jYWNoZWRPcHRpb25zLmluZGV4T2YodSksbj1udWxsPT1sP3ZvaWQgMDpsLmluZGV4T2YodSk7YT4tMSYmbjwwJiZvLmNhY2hlZE9wdGlvbnMuc3BsaWNlKGEsMSksby5vbk9wdGlvbkRlc3Ryb3koby5vcHRpb25zLm1hcCgoZT0+ZS52YWx1ZSkpLmluZGV4T2YoZS52YWx1ZSkpfSkpLHtjdXJyZW50TGFiZWw6bCxpdGVtU2VsZWN0ZWQ6YSxpc0Rpc2FibGVkOm4sc2VsZWN0Om8saG92ZXJJdGVtOmksdmlzaWJsZTpyLGhvdmVyOnMsc2VsZWN0T3B0aW9uQ2xpY2s6ZnVuY3Rpb24oKXshMCE9PWUuZGlzYWJsZWQmJiEwIT09dC5ncm91cERpc2FibGVkJiZvLmhhbmRsZU9wdGlvblNlbGVjdCh1LCEwKX19fX0pO19zLnJlbmRlcj1mdW5jdGlvbihlLHQsbCxvLGksdSl7cmV0dXJuIHIoKGEoKSxuKFwibGlcIix7Y2xhc3M6W1wiZWwtc2VsZWN0LWRyb3Bkb3duX19pdGVtXCIse3NlbGVjdGVkOmUuaXRlbVNlbGVjdGVkLFwiaXMtZGlzYWJsZWRcIjplLmlzRGlzYWJsZWQsaG92ZXI6ZS5ob3Zlcn1dLG9uTW91c2VlbnRlcjp0WzFdfHwodFsxXT0oLi4udCk9PmUuaG92ZXJJdGVtKC4uLnQpKSxvbkNsaWNrOnRbMl18fCh0WzJdPVQoKCguLi50KT0+ZS5zZWxlY3RPcHRpb25DbGljayguLi50KSksW1wic3RvcFwiXSkpfSxbZChlLiRzbG90cyxcImRlZmF1bHRcIix7fSwoKCk9PltzKFwic3BhblwiLG51bGwscChlLmN1cnJlbnRMYWJlbCksMSldKSldLDM0KSksW1toLGUudmlzaWJsZV1dKX0sX3MuX19maWxlPVwicGFja2FnZXMvc2VsZWN0L3NyYy9vcHRpb24udnVlXCI7dmFyIFNzPWUoe25hbWU6XCJFbFNlbGVjdERyb3Bkb3duXCIsY29tcG9uZW50TmFtZTpcIkVsU2VsZWN0RHJvcGRvd25cIixzZXR1cCgpe2NvbnN0IGU9dyhrcyksYT1sKCgoKT0+ZS5wcm9wcy5wb3BwZXJDbGFzcykpLG49bCgoKCk9PmUucHJvcHMubXVsdGlwbGUpKSxvPXQoXCJcIik7ZnVuY3Rpb24gaSgpe3ZhciB0O28udmFsdWU9KG51bGw9PT0odD1lLnNlbGVjdFdyYXBwZXIpfHx2b2lkIDA9PT10P3ZvaWQgMDp0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoKStcInB4XCJ9cmV0dXJuIF8oKCgpPT57SnQoZS5zZWxlY3RXcmFwcGVyLGkpfSkpLE8oKCgpPT57ZWwoZS5zZWxlY3RXcmFwcGVyLGkpfSkpLHttaW5XaWR0aDpvLHBvcHBlckNsYXNzOmEsaXNNdWx0aXBsZTpufX19KTtTcy5yZW5kZXI9ZnVuY3Rpb24oZSx0LGwsbyxpLHIpe3JldHVybiBhKCksbihcImRpdlwiLHtjbGFzczpbXCJlbC1zZWxlY3QtZHJvcGRvd25cIixbe1wiaXMtbXVsdGlwbGVcIjplLmlzTXVsdGlwbGV9LGUucG9wcGVyQ2xhc3NdXSxzdHlsZTp7bWluV2lkdGg6ZS5taW5XaWR0aH19LFtkKGUuJHNsb3RzLFwiZGVmYXVsdFwiKV0sNil9LFNzLl9fZmlsZT1cInBhY2thZ2VzL3NlbGVjdC9zcmMvc2VsZWN0LWRyb3Bkb3duLnZ1ZVwiO2NvbnN0IEVzPShlLGEsbik9Pntjb25zdCBvPXFlKCksaT10KG51bGwpLHI9dChudWxsKSxzPXQobnVsbCksdT10KG51bGwpLGQ9dChudWxsKSxjPXQobnVsbCkscD10KC0xKSxoPXcoXCJlbEZvcm1cIix7fSksdj13KFwiZWxGb3JtSXRlbVwiLHt9KSxtPWwoKCgpPT4hZS5maWx0ZXJhYmxlfHxlLm11bHRpcGxlfHwhKCF6ZSYmIWlzTmFOKE51bWJlcihkb2N1bWVudC5ET0NVTUVOVF9OT0RFKSkpJiYhKCF6ZSYmbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKFwiRWRnZVwiKT4tMSkmJiFhLnZpc2libGUpKSxmPWwoKCgpPT5lLmRpc2FibGVkfHxoLmRpc2FibGVkKSksZz1sKCgoKT0+e2NvbnN0IHQ9ZS5tdWx0aXBsZT9BcnJheS5pc0FycmF5KGUubW9kZWxWYWx1ZSkmJmUubW9kZWxWYWx1ZS5sZW5ndGg+MDp2b2lkIDAhPT1lLm1vZGVsVmFsdWUmJm51bGwhPT1lLm1vZGVsVmFsdWUmJlwiXCIhPT1lLm1vZGVsVmFsdWU7cmV0dXJuIGUuY2xlYXJhYmxlJiYhZi52YWx1ZSYmYS5pbnB1dEhvdmVyaW5nJiZ0fSkpLGI9bCgoKCk9PmUucmVtb3RlJiZlLmZpbHRlcmFibGU/XCJcIjphLnZpc2libGU/XCJhcnJvdy11cCBpcy1yZXZlcnNlXCI6XCJhcnJvdy11cFwiKSksQz1sKCgoKT0+ZS5yZW1vdGU/MzAwOjApKSx4PWwoKCgpPT5lLmxvYWRpbmc/ZS5sb2FkaW5nVGV4dHx8cWwoXCJlbC5zZWxlY3QubG9hZGluZ1wiKTooIWUucmVtb3RlfHxcIlwiIT09YS5xdWVyeXx8MCE9PWEub3B0aW9ucy5sZW5ndGgpJiYoZS5maWx0ZXJhYmxlJiZhLnF1ZXJ5JiZhLm9wdGlvbnMubGVuZ3RoPjAmJjA9PT1hLmZpbHRlcmVkT3B0aW9uc0NvdW50P2Uubm9NYXRjaFRleHR8fHFsKFwiZWwuc2VsZWN0Lm5vTWF0Y2hcIik6MD09PWEub3B0aW9ucy5sZW5ndGg/ZS5ub0RhdGFUZXh0fHxxbChcImVsLnNlbGVjdC5ub0RhdGFcIik6bnVsbCkpKSxfPWwoKCgpPT57Y29uc3QgdD1hLm9wdGlvbnMuZmlsdGVyKChlPT4hZS5jcmVhdGVkKSkuc29tZSgoZT0+ZS5jdXJyZW50TGFiZWw9PT1hLnF1ZXJ5KSk7cmV0dXJuIGUuZmlsdGVyYWJsZSYmZS5hbGxvd0NyZWF0ZSYmXCJcIiE9PWEucXVlcnkmJiF0fSkpLFM9bCgoKCk9PmUuc2l6ZXx8di5zaXplfHxvLnNpemUpKSxFPWwoKCgpPT5bXCJzbWFsbFwiLFwibWluaVwiXS5pbmRleE9mKFMudmFsdWUpPi0xP1wibWluaVwiOlwic21hbGxcIikpLE09bCgoKCk9PmEudmlzaWJsZSYmITEhPT14LnZhbHVlKSk7eSgoKCk9PmYudmFsdWUpLCgoKT0+e2soKCgpPT57VCgpfSkpfSkpLHkoKCgpPT5lLnBsYWNlaG9sZGVyKSwoZT0+e2EuY2FjaGVkUGxhY2VIb2xkZXI9YS5jdXJyZW50UGxhY2Vob2xkZXI9ZX0pKSx5KCgoKT0+ZS5tb2RlbFZhbHVlKSwoKHQsbCk9Pnt2YXIgbjtlLm11bHRpcGxlJiYoVCgpLHQmJnQubGVuZ3RoPjB8fHIudmFsdWUmJlwiXCIhPT1hLnF1ZXJ5P2EuY3VycmVudFBsYWNlaG9sZGVyPVwiXCI6YS5jdXJyZW50UGxhY2Vob2xkZXI9YS5jYWNoZWRQbGFjZUhvbGRlcixlLmZpbHRlcmFibGUmJiFlLnJlc2VydmVLZXl3b3JkJiYoYS5xdWVyeT1cIlwiLE4oYS5xdWVyeSkpKSxQKCksZS5maWx0ZXJhYmxlJiYhZS5tdWx0aXBsZSYmKGEuaW5wdXRMZW5ndGg9MjApLHBlKHQsbCl8fG51bGw9PT0obj12LmZvcm1JdGVtTWl0dCl8fHZvaWQgMD09PW58fG4uZW1pdChcImVsLmZvcm0uY2hhbmdlXCIsdCl9KSx7Zmx1c2g6XCJwb3N0XCJ9KSx5KCgoKT0+YS52aXNpYmxlKSwodD0+e3ZhciBsLG87dD8obnVsbD09PShvPW51bGw9PT0obD1zLnZhbHVlKXx8dm9pZCAwPT09bD92b2lkIDA6bC51cGRhdGUpfHx2b2lkIDA9PT1vfHxvLmNhbGwobCksZS5maWx0ZXJhYmxlJiYoYS5xdWVyeT1lLnJlbW90ZT9cIlwiOmEuc2VsZWN0ZWRMYWJlbCxOKGEucXVlcnkpLGUubXVsdGlwbGU/ci52YWx1ZS5mb2N1cygpOihlLnJlbW90ZXx8KGEuc2VsZWN0RW1pdHRlci5lbWl0KFwiZWxPcHRpb25RdWVyeUNoYW5nZVwiLFwiXCIpLGEuc2VsZWN0RW1pdHRlci5lbWl0KFwiZWxPcHRpb25Hcm91cFF1ZXJ5Q2hhbmdlXCIpKSxhLnNlbGVjdGVkTGFiZWwmJihhLmN1cnJlbnRQbGFjZWhvbGRlcj1hLnNlbGVjdGVkTGFiZWwsYS5zZWxlY3RlZExhYmVsPVwiXCIpKSkpOihyLnZhbHVlJiZyLnZhbHVlLmJsdXIoKSxhLnF1ZXJ5PVwiXCIsYS5wcmV2aW91c1F1ZXJ5PW51bGwsYS5zZWxlY3RlZExhYmVsPVwiXCIsYS5pbnB1dExlbmd0aD0yMCxhLm1lbnVWaXNpYmxlT25Gb2N1cz0hMSxJKCksaygoKCk9PntyLnZhbHVlJiZcIlwiPT09ci52YWx1ZS52YWx1ZSYmMD09PWEuc2VsZWN0ZWQubGVuZ3RoJiYoYS5jdXJyZW50UGxhY2Vob2xkZXI9YS5jYWNoZWRQbGFjZUhvbGRlcil9KSksZS5tdWx0aXBsZXx8KGEuc2VsZWN0ZWQmJihlLmZpbHRlcmFibGUmJmUuYWxsb3dDcmVhdGUmJmEuY3JlYXRlZFNlbGVjdGVkJiZhLmNyZWF0ZWRMYWJlbD9hLnNlbGVjdGVkTGFiZWw9YS5jcmVhdGVkTGFiZWw6YS5zZWxlY3RlZExhYmVsPWEuc2VsZWN0ZWQuY3VycmVudExhYmVsLGUuZmlsdGVyYWJsZSYmKGEucXVlcnk9YS5zZWxlY3RlZExhYmVsKSksZS5maWx0ZXJhYmxlJiYoYS5jdXJyZW50UGxhY2Vob2xkZXI9YS5jYWNoZWRQbGFjZUhvbGRlcikpKSxuLmVtaXQoXCJ2aXNpYmxlLWNoYW5nZVwiLHQpfSkpLHkoKCgpPT5bLi4uYS5vcHRpb25zXSksKCgpPT57dmFyIHQsbCxuO2lmKHplKXJldHVybjtudWxsPT09KGw9bnVsbD09PSh0PXMudmFsdWUpfHx2b2lkIDA9PT10P3ZvaWQgMDp0LnVwZGF0ZSl8fHZvaWQgMD09PWx8fGwuY2FsbCh0KSxlLm11bHRpcGxlJiZUKCk7Y29uc3Qgbz0obnVsbD09PShuPWQudmFsdWUpfHx2b2lkIDA9PT1uP3ZvaWQgMDpuLnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dFwiKSl8fFtdOy0xPT09W10uaW5kZXhPZi5jYWxsKG8sZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkmJlAoKSxlLmRlZmF1bHRGaXJzdE9wdGlvbiYmKGUuZmlsdGVyYWJsZXx8ZS5yZW1vdGUpJiZhLmZpbHRlcmVkT3B0aW9uc0NvdW50JiZPKCl9KSkseSgoKCk9PmEuaG92ZXJJbmRleCksKGU9PntcIm51bWJlclwiPT10eXBlb2YgZSYmZT4tMSYmKHAudmFsdWU9YS5vcHRpb25zW2VdfHx7fSksYS5vcHRpb25zLmZvckVhY2goKGU9PntlLmhvdmVyPXAudmFsdWU9PT1lfSkpfSkpO2NvbnN0IFQ9KCk9PntlLmNvbGxhcHNlVGFncyYmIWUuZmlsdGVyYWJsZXx8aygoKCk9Pnt2YXIgZSx0O2lmKCFpLnZhbHVlKXJldHVybjtjb25zdCBsPWkudmFsdWUuJGVsLmNoaWxkTm9kZXMsbj1bXS5maWx0ZXIuY2FsbChsLChlPT5cIklOUFVUXCI9PT1lLnRhZ05hbWUpKVswXSxvPXUudmFsdWUscj1hLmluaXRpYWxJbnB1dEhlaWdodHx8NDA7bi5zdHlsZS5oZWlnaHQ9MD09PWEuc2VsZWN0ZWQubGVuZ3RoP3IrXCJweFwiOk1hdGgubWF4KG8/by5jbGllbnRIZWlnaHQrKG8uY2xpZW50SGVpZ2h0PnI/NjowKTowLHIpK1wicHhcIixhLnZpc2libGUmJiExIT09eC52YWx1ZSYmKG51bGw9PT0odD1udWxsPT09KGU9cy52YWx1ZSl8fHZvaWQgMD09PWU/dm9pZCAwOmUudXBkYXRlKXx8dm9pZCAwPT09dHx8dC5jYWxsKGUpKX0pKX0sTj10PT57YS5wcmV2aW91c1F1ZXJ5PT09dHx8YS5pc09uQ29tcG9zaXRpb258fChudWxsIT09YS5wcmV2aW91c1F1ZXJ5fHxcImZ1bmN0aW9uXCIhPXR5cGVvZiBlLmZpbHRlck1ldGhvZCYmXCJmdW5jdGlvblwiIT10eXBlb2YgZS5yZW1vdGVNZXRob2Q/KGEucHJldmlvdXNRdWVyeT10LGsoKCgpPT57dmFyIGUsdDthLnZpc2libGUmJihudWxsPT09KHQ9bnVsbD09PShlPXMudmFsdWUpfHx2b2lkIDA9PT1lP3ZvaWQgMDplLnVwZGF0ZSl8fHZvaWQgMD09PXR8fHQuY2FsbChlKSl9KSksYS5ob3ZlckluZGV4PS0xLGUubXVsdGlwbGUmJmUuZmlsdGVyYWJsZSYmaygoKCk9Pntjb25zdCB0PTE1KnIudmFsdWUubGVuZ3RoKzIwO2EuaW5wdXRMZW5ndGg9ZS5jb2xsYXBzZVRhZ3M/TWF0aC5taW4oNTAsdCk6dCxEKCksVCgpfSkpLGUucmVtb3RlJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBlLnJlbW90ZU1ldGhvZD8oYS5ob3ZlckluZGV4PS0xLGUucmVtb3RlTWV0aG9kKHQpKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBlLmZpbHRlck1ldGhvZD8oZS5maWx0ZXJNZXRob2QodCksYS5zZWxlY3RFbWl0dGVyLmVtaXQoXCJlbE9wdGlvbkdyb3VwUXVlcnlDaGFuZ2VcIikpOihhLmZpbHRlcmVkT3B0aW9uc0NvdW50PWEub3B0aW9uc0NvdW50LGEuc2VsZWN0RW1pdHRlci5lbWl0KFwiZWxPcHRpb25RdWVyeUNoYW5nZVwiLHQpLGEuc2VsZWN0RW1pdHRlci5lbWl0KFwiZWxPcHRpb25Hcm91cFF1ZXJ5Q2hhbmdlXCIpKSxlLmRlZmF1bHRGaXJzdE9wdGlvbiYmKGUuZmlsdGVyYWJsZXx8ZS5yZW1vdGUpJiZhLmZpbHRlcmVkT3B0aW9uc0NvdW50JiZPKCkpOmEucHJldmlvdXNRdWVyeT10KX0sRD0oKT0+e1wiXCIhPT1hLmN1cnJlbnRQbGFjZWhvbGRlciYmKGEuY3VycmVudFBsYWNlaG9sZGVyPXIudmFsdWU/XCJcIjphLmNhY2hlZFBsYWNlSG9sZGVyKX0sTz0oKT0+e2EuaG92ZXJJbmRleD0tMTtsZXQgZT0hMTtmb3IobGV0IHQ9YS5vcHRpb25zLmxlbmd0aC0xO3Q+PTA7dC0tKWlmKGEub3B0aW9uc1t0XS5jcmVhdGVkKXtlPSEwLGEuaG92ZXJJbmRleD10O2JyZWFrfWlmKCFlKWZvcihsZXQgZT0wO2UhPT1hLm9wdGlvbnMubGVuZ3RoOysrZSl7Y29uc3QgdD1hLm9wdGlvbnNbZV07aWYoYS5xdWVyeSl7aWYoIXQuZGlzYWJsZWQmJiF0Lmdyb3VwRGlzYWJsZWQmJnQudmlzaWJsZSl7YS5ob3ZlckluZGV4PWU7YnJlYWt9fWVsc2UgaWYodC5pdGVtU2VsZWN0ZWQpe2EuaG92ZXJJbmRleD1lO2JyZWFrfX19LFA9KCk9Pnt2YXIgdDtpZighZS5tdWx0aXBsZSl7Y29uc3QgbD1WKGUubW9kZWxWYWx1ZSk7cmV0dXJuKG51bGw9PT0odD1sLnByb3BzKXx8dm9pZCAwPT09dD92b2lkIDA6dC5jcmVhdGVkKT8oYS5jcmVhdGVkTGFiZWw9bC5wcm9wcy52YWx1ZSxhLmNyZWF0ZWRTZWxlY3RlZD0hMCk6YS5jcmVhdGVkU2VsZWN0ZWQ9ITEsYS5zZWxlY3RlZExhYmVsPWwuY3VycmVudExhYmVsLGEuc2VsZWN0ZWQ9bCx2b2lkKGUuZmlsdGVyYWJsZSYmKGEucXVlcnk9YS5zZWxlY3RlZExhYmVsKSl9Y29uc3QgbD1bXTtBcnJheS5pc0FycmF5KGUubW9kZWxWYWx1ZSkmJmUubW9kZWxWYWx1ZS5mb3JFYWNoKChlPT57bC5wdXNoKFYoZSkpfSkpLGEuc2VsZWN0ZWQ9bCxrKCgoKT0+e1QoKX0pKX0sVj10PT57bGV0IGw7Y29uc3Qgbj1cIm9iamVjdFwiPT09VmUodCkudG9Mb3dlckNhc2UoKSxvPVwibnVsbFwiPT09VmUodCkudG9Mb3dlckNhc2UoKSxpPVwidW5kZWZpbmVkXCI9PT1WZSh0KS50b0xvd2VyQ2FzZSgpO2ZvcihsZXQgbz1hLmNhY2hlZE9wdGlvbnMubGVuZ3RoLTE7bz49MDtvLS0pe2NvbnN0IGk9YS5jYWNoZWRPcHRpb25zW29dO2lmKG4/RmUoaS52YWx1ZSxlLnZhbHVlS2V5KT09PUZlKHQsZS52YWx1ZUtleSk6aS52YWx1ZT09PXQpe2w9e3ZhbHVlOnQsY3VycmVudExhYmVsOmkuY3VycmVudExhYmVsfTticmVha319aWYobClyZXR1cm4gbDtjb25zdCByPXt2YWx1ZTp0LGN1cnJlbnRMYWJlbDpufHxvfHxpP1wiXCI6dH07cmV0dXJuIGUubXVsdGlwbGUmJihyLmhpdFN0YXRlPSExKSxyfSxJPSgpPT57c2V0VGltZW91dCgoKCk9PntlLm11bHRpcGxlP2Euc2VsZWN0ZWQubGVuZ3RoPjA/YS5ob3ZlckluZGV4PU1hdGgubWluLmFwcGx5KG51bGwsYS5zZWxlY3RlZC5tYXAoKGU9PmEub3B0aW9ucy5pbmRleE9mKGUpKSkpOmEuaG92ZXJJbmRleD0tMTphLmhvdmVySW5kZXg9YS5vcHRpb25zLmluZGV4T2YoYS5zZWxlY3RlZCl9KSwzMDApfSxBPSgpPT57dmFyIGU7YS5pbnB1dFdpZHRoPW51bGw9PT0oZT1pLnZhbHVlKXx8dm9pZCAwPT09ZT92b2lkIDA6ZS4kZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGh9LEI9bGUoKCgpPT57ZS5maWx0ZXJhYmxlJiZhLnF1ZXJ5IT09YS5zZWxlY3RlZExhYmVsJiYoYS5xdWVyeT1hLnNlbGVjdGVkTGFiZWwsTihhLnF1ZXJ5KSl9KSxDLnZhbHVlKSxMPWxlKChlPT57TihlLnRhcmdldC52YWx1ZSl9KSxDLnZhbHVlKSx6PXQ9PntwZShlLm1vZGVsVmFsdWUsdCl8fG4uZW1pdChcImNoYW5nZVwiLHQpfSxGPXQ9Pnt0LnN0b3BQcm9wYWdhdGlvbigpO2NvbnN0IGw9ZS5tdWx0aXBsZT9bXTpcIlwiO24uZW1pdChQdCxsKSx6KGwpLGEudmlzaWJsZT0hMSxuLmVtaXQoXCJjbGVhclwiKX0sJD0odCxsKT0+e2lmKGUubXVsdGlwbGUpe2NvbnN0IGw9KGUubW9kZWxWYWx1ZXx8W10pLnNsaWNlKCksbz1SKGwsdC52YWx1ZSk7bz4tMT9sLnNwbGljZShvLDEpOihlLm11bHRpcGxlTGltaXQ8PTB8fGwubGVuZ3RoPGUubXVsdGlwbGVMaW1pdCkmJmwucHVzaCh0LnZhbHVlKSxuLmVtaXQoUHQsbCkseihsKSx0LmNyZWF0ZWQmJihhLnF1ZXJ5PVwiXCIsTihcIlwiKSxhLmlucHV0TGVuZ3RoPTIwKSxlLmZpbHRlcmFibGUmJnIudmFsdWUuZm9jdXMoKX1lbHNlIG4uZW1pdChQdCx0LnZhbHVlKSx6KHQudmFsdWUpLGEudmlzaWJsZT0hMTthLmlzU2lsZW50Qmx1cj1sLEgoKSxhLnZpc2libGV8fGsoKCgpPT57Vyh0KX0pKX0sUj0odD1bXSxsKT0+e2lmKCFEZShsKSlyZXR1cm4gdC5pbmRleE9mKGwpO2NvbnN0IGE9ZS52YWx1ZUtleTtsZXQgbj0tMTtyZXR1cm4gdC5zb21lKCgoZSx0KT0+RmUoZSxhKT09PUZlKGwsYSkmJihuPXQsITApKSksbn0sSD0oKT0+e2Euc29mdEZvY3VzPSEwO2NvbnN0IGU9ci52YWx1ZXx8aS52YWx1ZTtlJiZlLmZvY3VzKCl9LFc9ZT0+e3ZhciB0LGwsYSxuO2NvbnN0IG89QXJyYXkuaXNBcnJheShlKT9udWxsPT09KHQ9ZVswXSl8fHZvaWQgMD09PXQ/dm9pZCAwOnQuJGVsOmUuJGVsO2lmKHMudmFsdWUmJm8pe2NvbnN0IGU9bnVsbD09PShuPW51bGw9PT0oYT1udWxsPT09KGw9cy52YWx1ZSl8fHZvaWQgMD09PWw/dm9pZCAwOmwuJGVsKXx8dm9pZCAwPT09YT92b2lkIDA6YS5xdWVyeVNlbGVjdG9yKXx8dm9pZCAwPT09bj92b2lkIDA6bi5jYWxsKGEsXCIuZWwtc2VsZWN0LWRyb3Bkb3duX193cmFwXCIpO2UmJmhuKGUsbyl9fSxqPWU9PntpZighQXJyYXkuaXNBcnJheShhLnNlbGVjdGVkKSlyZXR1cm47Y29uc3QgdD1hLnNlbGVjdGVkW2Euc2VsZWN0ZWQubGVuZ3RoLTFdO3JldHVybiB0PyEwPT09ZXx8ITE9PT1lPyh0LmhpdFN0YXRlPWUsZSk6KHQuaGl0U3RhdGU9IXQuaGl0U3RhdGUsdC5oaXRTdGF0ZSk6dm9pZCAwfSxLPSgpPT57ZS5hdXRvbWF0aWNEcm9wZG93bnx8Zi52YWx1ZXx8KGEubWVudVZpc2libGVPbkZvY3VzP2EubWVudVZpc2libGVPbkZvY3VzPSExOmEudmlzaWJsZT0hYS52aXNpYmxlLGEudmlzaWJsZSYmKHIudmFsdWV8fGkudmFsdWUpLmZvY3VzKCkpfSxZPWwoKCgpPT5hLm9wdGlvbnMuZmlsdGVyKChlPT5lLnZpc2libGUpKS5ldmVyeSgoZT0+ZS5kaXNhYmxlZCkpKSkscT1lPT57aWYoYS52aXNpYmxlKXtpZigwIT09YS5vcHRpb25zLmxlbmd0aCYmMCE9PWEuZmlsdGVyZWRPcHRpb25zQ291bnQmJiFZLnZhbHVlKXtcIm5leHRcIj09PWU/KGEuaG92ZXJJbmRleCsrLGEuaG92ZXJJbmRleD09PWEub3B0aW9ucy5sZW5ndGgmJihhLmhvdmVySW5kZXg9MCkpOlwicHJldlwiPT09ZSYmKGEuaG92ZXJJbmRleC0tLGEuaG92ZXJJbmRleDwwJiYoYS5ob3ZlckluZGV4PWEub3B0aW9ucy5sZW5ndGgtMSkpO2NvbnN0IHQ9YS5vcHRpb25zW2EuaG92ZXJJbmRleF07ITAhPT10LmRpc2FibGVkJiYhMCE9PXQuZ3JvdXBEaXNhYmxlZCYmdC52aXNpYmxlfHxxKGUpLGsoKCgpPT5XKHAudmFsdWUpKSl9fWVsc2UgYS52aXNpYmxlPSEwfTtyZXR1cm57c2VsZWN0U2l6ZTpTLGhhbmRsZVJlc2l6ZTooKT0+e3ZhciB0LGw7QSgpLG51bGw9PT0obD1udWxsPT09KHQ9cy52YWx1ZSl8fHZvaWQgMD09PXQ/dm9pZCAwOnQudXBkYXRlKXx8dm9pZCAwPT09bHx8bC5jYWxsKHQpLGUubXVsdGlwbGUmJlQoKX0sZGVib3VuY2VkT25JbnB1dENoYW5nZTpCLGRlYm91bmNlZFF1ZXJ5Q2hhbmdlOkwsZGVsZXRlUHJldlRhZzp0PT57aWYodC50YXJnZXQudmFsdWUubGVuZ3RoPD0wJiYhaigpKXtjb25zdCB0PWUubW9kZWxWYWx1ZS5zbGljZSgpO3QucG9wKCksbi5lbWl0KFB0LHQpLHoodCl9fSxkZWxldGVUYWc6KHQsbCk9Pntjb25zdCBvPWEuc2VsZWN0ZWQuaW5kZXhPZihsKTtpZihvPi0xJiYhZi52YWx1ZSl7Y29uc3QgdD1lLm1vZGVsVmFsdWUuc2xpY2UoKTt0LnNwbGljZShvLDEpLG4uZW1pdChQdCx0KSx6KHQpLG4uZW1pdChcInJlbW92ZS10YWdcIixsLnZhbHVlKX10LnN0b3BQcm9wYWdhdGlvbigpfSxkZWxldGVTZWxlY3RlZDpGLGhhbmRsZU9wdGlvblNlbGVjdDokLHNjcm9sbFRvT3B0aW9uOlcscmVhZG9ubHk6bSxyZXNldElucHV0SGVpZ2h0OlQsc2hvd0Nsb3NlOmcsaWNvbkNsYXNzOmIsc2hvd05ld09wdGlvbjpfLGNvbGxhcHNlVGFnU2l6ZTpFLHNldFNlbGVjdGVkOlAsbWFuYWdlUGxhY2Vob2xkZXI6RCxzZWxlY3REaXNhYmxlZDpmLGVtcHR5VGV4dDp4LHRvZ2dsZUxhc3RPcHRpb25IaXRTdGF0ZTpqLHJlc2V0SW5wdXRTdGF0ZTplPT57ZS5jb2RlIT09ZnQuYmFja3NwYWNlJiZqKCExKSxhLmlucHV0TGVuZ3RoPTE1KnIudmFsdWUubGVuZ3RoKzIwLFQoKX0saGFuZGxlQ29tcG9zaXRpb246ZT0+e2NvbnN0IHQ9ZS50YXJnZXQudmFsdWU7aWYoXCJjb21wb3NpdGlvbmVuZFwiPT09ZS50eXBlKWEuaXNPbkNvbXBvc2l0aW9uPSExLGsoKCgpPT5OKHQpKSk7ZWxzZXtjb25zdCBlPXRbdC5sZW5ndGgtMV18fFwiXCI7YS5pc09uQ29tcG9zaXRpb249IUl0KGUpfX0sb25PcHRpb25DcmVhdGU6ZT0+e2Eub3B0aW9uc0NvdW50KyssYS5maWx0ZXJlZE9wdGlvbnNDb3VudCsrLGEub3B0aW9ucy5wdXNoKGUpLGEuY2FjaGVkT3B0aW9ucy5wdXNoKGUpfSxvbk9wdGlvbkRlc3Ryb3k6ZT0+e2U+LTEmJihhLm9wdGlvbnNDb3VudC0tLGEuZmlsdGVyZWRPcHRpb25zQ291bnQtLSxhLm9wdGlvbnMuc3BsaWNlKGUsMSkpfSxoYW5kbGVNZW51RW50ZXI6KCk9PntrKCgoKT0+VyhhLnNlbGVjdGVkKSkpfSxoYW5kbGVGb2N1czp0PT57YS5zb2Z0Rm9jdXM/YS5zb2Z0Rm9jdXM9ITE6KChlLmF1dG9tYXRpY0Ryb3Bkb3dufHxlLmZpbHRlcmFibGUpJiYoYS52aXNpYmxlPSEwLGUuZmlsdGVyYWJsZSYmKGEubWVudVZpc2libGVPbkZvY3VzPSEwKSksbi5lbWl0KFwiZm9jdXNcIix0KSl9LGJsdXI6KCk9PnthLnZpc2libGU9ITEsaS52YWx1ZS5ibHVyKCl9LGhhbmRsZUJsdXI6ZT0+e2soKCgpPT57YS5pc1NpbGVudEJsdXI/YS5pc1NpbGVudEJsdXI9ITE6bi5lbWl0KFwiYmx1clwiLGUpfSkpLGEuc29mdEZvY3VzPSExfSxoYW5kbGVDbGVhckNsaWNrOmU9PntGKGUpfSxoYW5kbGVDbG9zZTooKT0+e2EudmlzaWJsZT0hMX0sdG9nZ2xlTWVudTpLLHNlbGVjdE9wdGlvbjooKT0+e2EudmlzaWJsZT9hLm9wdGlvbnNbYS5ob3ZlckluZGV4XSYmJChhLm9wdGlvbnNbYS5ob3ZlckluZGV4XSx2b2lkIDApOksoKX0sZ2V0VmFsdWVLZXk6dD0+RGUodC52YWx1ZSk/RmUodC52YWx1ZSxlLnZhbHVlS2V5KTp0LnZhbHVlLG5hdmlnYXRlT3B0aW9uczpxLGRyb3BNZW51VmlzaWJsZTpNLHJlZmVyZW5jZTppLGlucHV0OnIscG9wcGVyOnMsdGFnczp1LHNlbGVjdFdyYXBwZXI6ZCxzY3JvbGxiYXI6Y319O3ZhciBNcz1lKHtuYW1lOlwiRWxTZWxlY3RcIixjb21wb25lbnROYW1lOlwiRWxTZWxlY3RcIixjb21wb25lbnRzOntFbElucHV0Old0LEVsU2VsZWN0TWVudTpTcyxFbE9wdGlvbjpfcyxFbFRhZzprbixFbFNjcm9sbGJhcjpubCxFbFBvcHBlcjpTbH0sZGlyZWN0aXZlczp7Q2xpY2tPdXRzaWRlOk10fSxwcm9wczp7bmFtZTpTdHJpbmcsaWQ6U3RyaW5nLG1vZGVsVmFsdWU6W0FycmF5LFN0cmluZyxOdW1iZXJdLGF1dG9jb21wbGV0ZTp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIm9mZlwifSxhdXRvbWF0aWNEcm9wZG93bjpCb29sZWFuLHNpemU6e3R5cGU6U3RyaW5nLHZhbGlkYXRvcjpBdH0sZGlzYWJsZWQ6Qm9vbGVhbixjbGVhcmFibGU6Qm9vbGVhbixmaWx0ZXJhYmxlOkJvb2xlYW4sYWxsb3dDcmVhdGU6Qm9vbGVhbixsb2FkaW5nOkJvb2xlYW4scG9wcGVyQ2xhc3M6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJcIn0scmVtb3RlOkJvb2xlYW4sbG9hZGluZ1RleHQ6U3RyaW5nLG5vTWF0Y2hUZXh0OlN0cmluZyxub0RhdGFUZXh0OlN0cmluZyxyZW1vdGVNZXRob2Q6RnVuY3Rpb24sZmlsdGVyTWV0aG9kOkZ1bmN0aW9uLG11bHRpcGxlOkJvb2xlYW4sbXVsdGlwbGVMaW1pdDp7dHlwZTpOdW1iZXIsZGVmYXVsdDowfSxwbGFjZWhvbGRlcjp7dHlwZTpTdHJpbmd9LGRlZmF1bHRGaXJzdE9wdGlvbjpCb29sZWFuLHJlc2VydmVLZXl3b3JkOkJvb2xlYW4sdmFsdWVLZXk6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJ2YWx1ZVwifSxjb2xsYXBzZVRhZ3M6Qm9vbGVhbixwb3BwZXJBcHBlbmRUb0JvZHk6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiEwfSxjbGVhckljb246e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJlbC1pY29uLWNpcmNsZS1jbG9zZVwifX0sZW1pdHM6W1B0LFwiY2hhbmdlXCIsXCJyZW1vdmUtdGFnXCIsXCJjbGVhclwiLFwidmlzaWJsZS1jaGFuZ2VcIixcImZvY3VzXCIsXCJibHVyXCJdLHNldHVwKGUsdCl7Y29uc3QgbD1mdW5jdGlvbihlKXtjb25zdCB0PW5lKCk7cmV0dXJuIGYoe29wdGlvbnM6W10sY2FjaGVkT3B0aW9uczpbXSxjcmVhdGVkTGFiZWw6bnVsbCxjcmVhdGVkU2VsZWN0ZWQ6ITEsc2VsZWN0ZWQ6ZS5tdWx0aXBsZT9bXTp7fSxpbnB1dExlbmd0aDoyMCxpbnB1dFdpZHRoOjAsaW5pdGlhbElucHV0SGVpZ2h0OjAsb3B0aW9uc0NvdW50OjAsZmlsdGVyZWRPcHRpb25zQ291bnQ6MCx2aXNpYmxlOiExLHNvZnRGb2N1czohMSxzZWxlY3RlZExhYmVsOlwiXCIsaG92ZXJJbmRleDotMSxxdWVyeTpcIlwiLHByZXZpb3VzUXVlcnk6bnVsbCxpbnB1dEhvdmVyaW5nOiExLGNhY2hlZFBsYWNlSG9sZGVyOlwiXCIsY3VycmVudFBsYWNlaG9sZGVyOnFsKFwiZWwuc2VsZWN0LnBsYWNlaG9sZGVyXCIpLG1lbnVWaXNpYmxlT25Gb2N1czohMSxpc09uQ29tcG9zaXRpb246ITEsaXNTaWxlbnRCbHVyOiExLHNlbGVjdEVtaXR0ZXI6dH0pfShlKSx7c2VsZWN0U2l6ZTphLHJlYWRvbmx5Om4saGFuZGxlUmVzaXplOm8sY29sbGFwc2VUYWdTaXplOmksZGVib3VuY2VkT25JbnB1dENoYW5nZTpyLGRlYm91bmNlZFF1ZXJ5Q2hhbmdlOnMsZGVsZXRlUHJldlRhZzp1LGRlbGV0ZVRhZzpkLGRlbGV0ZVNlbGVjdGVkOmMsaGFuZGxlT3B0aW9uU2VsZWN0OnAsc2Nyb2xsVG9PcHRpb246aCxzZXRTZWxlY3RlZDp2LHJlc2V0SW5wdXRIZWlnaHQ6bSxtYW5hZ2VQbGFjZWhvbGRlcjpnLHNob3dDbG9zZTpiLHNlbGVjdERpc2FibGVkOnksaWNvbkNsYXNzOncsc2hvd05ld09wdGlvbjpTLGVtcHR5VGV4dDpFLHRvZ2dsZUxhc3RPcHRpb25IaXRTdGF0ZTpNLHJlc2V0SW5wdXRTdGF0ZTpULGhhbmRsZUNvbXBvc2l0aW9uOk4sb25PcHRpb25DcmVhdGU6RCxvbk9wdGlvbkRlc3Ryb3k6UCxoYW5kbGVNZW51RW50ZXI6VixoYW5kbGVGb2N1czpJLGJsdXI6QSxoYW5kbGVCbHVyOkIsaGFuZGxlQ2xlYXJDbGljazpMLGhhbmRsZUNsb3NlOnosdG9nZ2xlTWVudTpGLHNlbGVjdE9wdGlvbjokLGdldFZhbHVlS2V5OlIsbmF2aWdhdGVPcHRpb25zOkgsZHJvcE1lbnVWaXNpYmxlOlcscmVmZXJlbmNlOmosaW5wdXQ6Syxwb3BwZXI6WSx0YWdzOnEsc2VsZWN0V3JhcHBlcjpVLHNjcm9sbGJhcjpHfT1FcyhlLGwsdCkse2ZvY3VzOlh9PShRPWose2ZvY3VzOigpPT57dmFyIGUsdDtudWxsPT09KHQ9bnVsbD09PShlPVEudmFsdWUpfHx2b2lkIDA9PT1lP3ZvaWQgMDplLmZvY3VzKXx8dm9pZCAwPT09dHx8dC5jYWxsKGUpfX0pO3ZhciBRO2NvbnN0e2lucHV0V2lkdGg6WixzZWxlY3RlZDpKLGlucHV0TGVuZ3RoOmVlLGZpbHRlcmVkT3B0aW9uc0NvdW50OnRlLHZpc2libGU6bGUsc29mdEZvY3VzOmFlLHNlbGVjdGVkTGFiZWw6b2UsaG92ZXJJbmRleDppZSxxdWVyeTpyZSxpbnB1dEhvdmVyaW5nOnNlLGN1cnJlbnRQbGFjZWhvbGRlcjp1ZSxtZW51VmlzaWJsZU9uRm9jdXM6ZGUsaXNPbkNvbXBvc2l0aW9uOmNlLGlzU2lsZW50Qmx1cjpwZSxvcHRpb25zOmhlLGNhY2hlZE9wdGlvbnM6dmUsb3B0aW9uc0NvdW50Om1lfT1DKGwpO3JldHVybiB4KGtzLGYoe3Byb3BzOmUsb3B0aW9uczpoZSxjYWNoZWRPcHRpb25zOnZlLG9wdGlvbnNDb3VudDptZSxmaWx0ZXJlZE9wdGlvbnNDb3VudDp0ZSxob3ZlckluZGV4OmllLGhhbmRsZU9wdGlvblNlbGVjdDpwLHNlbGVjdEVtaXR0ZXI6bC5zZWxlY3RFbWl0dGVyLG9uT3B0aW9uQ3JlYXRlOkQsb25PcHRpb25EZXN0cm95OlAsc2VsZWN0V3JhcHBlcjpVLHNlbGVjdGVkOkosc2V0U2VsZWN0ZWQ6dn0pKSxfKCgoKT0+e2lmKGwuY2FjaGVkUGxhY2VIb2xkZXI9dWUudmFsdWU9ZS5wbGFjZWhvbGRlcnx8cWwoXCJlbC5zZWxlY3QucGxhY2Vob2xkZXJcIiksZS5tdWx0aXBsZSYmQXJyYXkuaXNBcnJheShlLm1vZGVsVmFsdWUpJiZlLm1vZGVsVmFsdWUubGVuZ3RoPjAmJih1ZS52YWx1ZT1cIlwiKSxKdChVLnZhbHVlLG8pLGoudmFsdWUmJmoudmFsdWUuJGVsKXtjb25zdCBlPXttZWRpdW06MzYsc21hbGw6MzIsbWluaToyOH0sdD1qLnZhbHVlLmlucHV0O2wuaW5pdGlhbElucHV0SGVpZ2h0PXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0fHxlW2EudmFsdWVdfWUucmVtb3RlJiZlLm11bHRpcGxlJiZtKCksaygoKCk9PntqLnZhbHVlLiRlbCYmKFoudmFsdWU9ai52YWx1ZS4kZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGgpfSkpLHYoKX0pKSxPKCgoKT0+e2VsKFUudmFsdWUsbyl9KSksZS5tdWx0aXBsZSYmIUFycmF5LmlzQXJyYXkoZS5tb2RlbFZhbHVlKSYmdC5lbWl0KFB0LFtdKSwhZS5tdWx0aXBsZSYmQXJyYXkuaXNBcnJheShlLm1vZGVsVmFsdWUpJiZ0LmVtaXQoUHQsXCJcIikse3NlbGVjdFNpemU6YSxyZWFkb25seTpuLGhhbmRsZVJlc2l6ZTpvLGNvbGxhcHNlVGFnU2l6ZTppLGRlYm91bmNlZE9uSW5wdXRDaGFuZ2U6cixkZWJvdW5jZWRRdWVyeUNoYW5nZTpzLGRlbGV0ZVByZXZUYWc6dSxkZWxldGVUYWc6ZCxkZWxldGVTZWxlY3RlZDpjLGhhbmRsZU9wdGlvblNlbGVjdDpwLHNjcm9sbFRvT3B0aW9uOmgsaW5wdXRXaWR0aDpaLHNlbGVjdGVkOkosaW5wdXRMZW5ndGg6ZWUsZmlsdGVyZWRPcHRpb25zQ291bnQ6dGUsdmlzaWJsZTpsZSxzb2Z0Rm9jdXM6YWUsc2VsZWN0ZWRMYWJlbDpvZSxob3ZlckluZGV4OmllLHF1ZXJ5OnJlLGlucHV0SG92ZXJpbmc6c2UsY3VycmVudFBsYWNlaG9sZGVyOnVlLG1lbnVWaXNpYmxlT25Gb2N1czpkZSxpc09uQ29tcG9zaXRpb246Y2UsaXNTaWxlbnRCbHVyOnBlLG9wdGlvbnM6aGUscmVzZXRJbnB1dEhlaWdodDptLG1hbmFnZVBsYWNlaG9sZGVyOmcsc2hvd0Nsb3NlOmIsc2VsZWN0RGlzYWJsZWQ6eSxpY29uQ2xhc3M6dyxzaG93TmV3T3B0aW9uOlMsZW1wdHlUZXh0OkUsdG9nZ2xlTGFzdE9wdGlvbkhpdFN0YXRlOk0scmVzZXRJbnB1dFN0YXRlOlQsaGFuZGxlQ29tcG9zaXRpb246TixoYW5kbGVNZW51RW50ZXI6VixoYW5kbGVGb2N1czpJLGJsdXI6QSxoYW5kbGVCbHVyOkIsaGFuZGxlQ2xlYXJDbGljazpMLGhhbmRsZUNsb3NlOnosdG9nZ2xlTWVudTpGLHNlbGVjdE9wdGlvbjokLGdldFZhbHVlS2V5OlIsbmF2aWdhdGVPcHRpb25zOkgsZHJvcE1lbnVWaXNpYmxlOlcsZm9jdXM6WCxyZWZlcmVuY2U6aixpbnB1dDpLLHBvcHBlcjpZLHRhZ3M6cSxzZWxlY3RXcmFwcGVyOlUsc2Nyb2xsYmFyOkd9fX0pO2NvbnN0IFRzPXtjbGFzczpcInNlbGVjdC10cmlnZ2VyXCJ9LE5zPXtrZXk6MH0sRHM9e2NsYXNzOlwiZWwtc2VsZWN0X190YWdzLXRleHRcIn0sT3M9e2NsYXNzOlwiZWwtc2VsZWN0X190YWdzLXRleHRcIn0sUHM9e2NsYXNzOlwiZWwtc2VsZWN0X190YWdzLXRleHRcIn0sVnM9e2tleToxLGNsYXNzOlwiZWwtc2VsZWN0LWRyb3Bkb3duX19lbXB0eVwifTtNcy5yZW5kZXI9ZnVuY3Rpb24oZSx0LGwsYyx2LG0pe2NvbnN0IGY9UChcImVsLXRhZ1wiKSxnPVAoXCJlbC1pbnB1dFwiKSxiPVAoXCJlbC1vcHRpb25cIikseT1QKFwiZWwtc2Nyb2xsYmFyXCIpLGs9UChcImVsLXNlbGVjdC1tZW51XCIpLEM9UChcImVsLXBvcHBlclwiKSx4PUYoXCJjbGlja091dHNpZGVcIik7cmV0dXJuIHIoKGEoKSxuKFwiZGl2XCIse3JlZjpcInNlbGVjdFdyYXBwZXJcIixjbGFzczpbXCJlbC1zZWxlY3RcIixbZS5zZWxlY3RTaXplP1wiZWwtc2VsZWN0LS1cIitlLnNlbGVjdFNpemU6XCJcIl1dLG9uQ2xpY2s6dFsyNl18fCh0WzI2XT1UKCgoLi4udCk9PmUudG9nZ2xlTWVudSguLi50KSksW1wic3RvcFwiXSkpfSxbcyhDLHtyZWY6XCJwb3BwZXJcIix2aXNpYmxlOmUuZHJvcE1lbnVWaXNpYmxlLFwib25VcGRhdGU6dmlzaWJsZVwiOnRbMjVdfHwodFsyNV09dD0+ZS5kcm9wTWVudVZpc2libGU9dCkscGxhY2VtZW50OlwiYm90dG9tLXN0YXJ0XCIsXCJhcHBlbmQtdG8tYm9keVwiOmUucG9wcGVyQXBwZW5kVG9Cb2R5LFwicG9wcGVyLWNsYXNzXCI6XCJlbC1zZWxlY3RfX3BvcHBlciBcIitlLnBvcHBlckNsYXNzLFwibWFudWFsLW1vZGVcIjpcIlwiLGVmZmVjdDpcImxpZ2h0XCIscHVyZTpcIlwiLHRyaWdnZXI6XCJjbGlja1wiLHRyYW5zaXRpb246XCJlbC16b29tLWluLXRvcFwiLFwiZ3B1LWFjY2VsZXJhdGlvblwiOiExLG9uQmVmb3JlRW50ZXI6ZS5oYW5kbGVNZW51RW50ZXJ9LHt0cmlnZ2VyOmkoKCgpPT5bcyhcImRpdlwiLFRzLFtlLm11bHRpcGxlPyhhKCksbihcImRpdlwiLHtrZXk6MCxyZWY6XCJ0YWdzXCIsY2xhc3M6XCJlbC1zZWxlY3RfX3RhZ3NcIixzdHlsZTp7XCJtYXgtd2lkdGhcIjplLmlucHV0V2lkdGgtMzIrXCJweFwiLHdpZHRoOlwiMTAwJVwifX0sW2UuY29sbGFwc2VUYWdzJiZlLnNlbGVjdGVkLmxlbmd0aD8oYSgpLG4oXCJzcGFuXCIsTnMsW3MoZix7Y2xvc2FibGU6IWUuc2VsZWN0RGlzYWJsZWQsc2l6ZTplLmNvbGxhcHNlVGFnU2l6ZSxoaXQ6ZS5zZWxlY3RlZFswXS5oaXRTdGF0ZSx0eXBlOlwiaW5mb1wiLFwiZGlzYWJsZS10cmFuc2l0aW9uc1wiOlwiXCIsb25DbG9zZTp0WzFdfHwodFsxXT10PT5lLmRlbGV0ZVRhZyh0LGUuc2VsZWN0ZWRbMF0pKX0se2RlZmF1bHQ6aSgoKCk9PltzKFwic3BhblwiLERzLHAoZS5zZWxlY3RlZFswXS5jdXJyZW50TGFiZWwpLDEpXSkpLF86MX0sOCxbXCJjbG9zYWJsZVwiLFwic2l6ZVwiLFwiaGl0XCJdKSxlLnNlbGVjdGVkLmxlbmd0aD4xPyhhKCksbihmLHtrZXk6MCxjbG9zYWJsZTohMSxzaXplOmUuY29sbGFwc2VUYWdTaXplLHR5cGU6XCJpbmZvXCIsXCJkaXNhYmxlLXRyYW5zaXRpb25zXCI6XCJcIn0se2RlZmF1bHQ6aSgoKCk9PltzKFwic3BhblwiLE9zLFwiKyBcIitwKGUuc2VsZWN0ZWQubGVuZ3RoLTEpLDEpXSkpLF86MX0sOCxbXCJzaXplXCJdKSk6dShcInYtaWZcIiwhMCldKSk6dShcInYtaWZcIiwhMCksdShcIiA8ZGl2PiBcIiksZS5jb2xsYXBzZVRhZ3M/dShcInYtaWZcIiwhMCk6KGEoKSxuKG8se2tleToxLG9uQWZ0ZXJMZWF2ZTplLnJlc2V0SW5wdXRIZWlnaHR9LHtkZWZhdWx0OmkoKCgpPT5bcyhcInNwYW5cIixudWxsLFsoYSghMCksbihFLG51bGwsSChlLnNlbGVjdGVkLCh0PT4oYSgpLG4oZix7a2V5OmUuZ2V0VmFsdWVLZXkodCksY2xvc2FibGU6IWUuc2VsZWN0RGlzYWJsZWQsc2l6ZTplLmNvbGxhcHNlVGFnU2l6ZSxoaXQ6dC5oaXRTdGF0ZSx0eXBlOlwiaW5mb1wiLFwiZGlzYWJsZS10cmFuc2l0aW9uc1wiOlwiXCIsb25DbG9zZTpsPT5lLmRlbGV0ZVRhZyhsLHQpfSx7ZGVmYXVsdDppKCgoKT0+W3MoXCJzcGFuXCIsUHMscCh0LmN1cnJlbnRMYWJlbCksMSldKSksXzoyfSwxMDMyLFtcImNsb3NhYmxlXCIsXCJzaXplXCIsXCJoaXRcIixcIm9uQ2xvc2VcIl0pKSkpLDEyOCkpXSldKSksXzoxfSw4LFtcIm9uQWZ0ZXJMZWF2ZVwiXSkpLHUoXCIgPC9kaXY+IFwiKSxlLmZpbHRlcmFibGU/cigoYSgpLG4oXCJpbnB1dFwiLHtrZXk6MixyZWY6XCJpbnB1dFwiLFwib25VcGRhdGU6bW9kZWxWYWx1ZVwiOnRbMl18fCh0WzJdPXQ9PmUucXVlcnk9dCksdHlwZTpcInRleHRcIixjbGFzczpbXCJlbC1zZWxlY3RfX2lucHV0XCIsW2Uuc2VsZWN0U2l6ZT9cImlzLVwiK2Uuc2VsZWN0U2l6ZTpcIlwiXV0sZGlzYWJsZWQ6ZS5zZWxlY3REaXNhYmxlZCxhdXRvY29tcGxldGU6ZS5hdXRvY29tcGxldGUsc3R5bGU6e1wiZmxleC1ncm93XCI6XCIxXCIsd2lkdGg6ZS5pbnB1dExlbmd0aC8oZS5pbnB1dFdpZHRoLTMyKStcIiVcIixcIm1heC13aWR0aFwiOmUuaW5wdXRXaWR0aC00MitcInB4XCJ9LG9uRm9jdXM6dFszXXx8KHRbM109KC4uLnQpPT5lLmhhbmRsZUZvY3VzKC4uLnQpKSxvbkJsdXI6dFs0XXx8KHRbNF09dD0+ZS5zb2Z0Rm9jdXM9ITEpLG9uS2V5dXA6dFs1XXx8KHRbNV09KC4uLnQpPT5lLm1hbmFnZVBsYWNlaG9sZGVyKC4uLnQpKSxvbktleWRvd246W3RbNl18fCh0WzZdPSguLi50KT0+ZS5yZXNldElucHV0U3RhdGUoLi4udCkpLHRbN118fCh0WzddPSQoVCgodD0+ZS5uYXZpZ2F0ZU9wdGlvbnMoXCJuZXh0XCIpKSxbXCJwcmV2ZW50XCJdKSxbXCJkb3duXCJdKSksdFs4XXx8KHRbOF09JChUKCh0PT5lLm5hdmlnYXRlT3B0aW9ucyhcInByZXZcIikpLFtcInByZXZlbnRcIl0pLFtcInVwXCJdKSksdFs5XXx8KHRbOV09JChUKCh0PT5lLnZpc2libGU9ITEpLFtcInN0b3BcIixcInByZXZlbnRcIl0pLFtcImVzY1wiXSkpLHRbMTBdfHwodFsxMF09JChUKCgoLi4udCk9PmUuc2VsZWN0T3B0aW9uKC4uLnQpKSxbXCJzdG9wXCIsXCJwcmV2ZW50XCJdKSxbXCJlbnRlclwiXSkpLHRbMTFdfHwodFsxMV09JCgoKC4uLnQpPT5lLmRlbGV0ZVByZXZUYWcoLi4udCkpLFtcImRlbGV0ZVwiXSkpLHRbMTJdfHwodFsxMl09JCgodD0+ZS52aXNpYmxlPSExKSxbXCJ0YWJcIl0pKV0sb25Db21wb3NpdGlvbnN0YXJ0OnRbMTNdfHwodFsxM109KC4uLnQpPT5lLmhhbmRsZUNvbXBvc2l0aW9uKC4uLnQpKSxvbkNvbXBvc2l0aW9udXBkYXRlOnRbMTRdfHwodFsxNF09KC4uLnQpPT5lLmhhbmRsZUNvbXBvc2l0aW9uKC4uLnQpKSxvbkNvbXBvc2l0aW9uZW5kOnRbMTVdfHwodFsxNV09KC4uLnQpPT5lLmhhbmRsZUNvbXBvc2l0aW9uKC4uLnQpKSxvbklucHV0OnRbMTZdfHwodFsxNl09KC4uLnQpPT5lLmRlYm91bmNlZFF1ZXJ5Q2hhbmdlKC4uLnQpKX0sbnVsbCw0NixbXCJkaXNhYmxlZFwiLFwiYXV0b2NvbXBsZXRlXCJdKSksW1tZLGUucXVlcnldXSk6dShcInYtaWZcIiwhMCldLDQpKTp1KFwidi1pZlwiLCEwKSxzKGcse2lkOmUuaWQscmVmOlwicmVmZXJlbmNlXCIsbW9kZWxWYWx1ZTplLnNlbGVjdGVkTGFiZWwsXCJvblVwZGF0ZTptb2RlbFZhbHVlXCI6dFsxOF18fCh0WzE4XT10PT5lLnNlbGVjdGVkTGFiZWw9dCksdHlwZTpcInRleHRcIixwbGFjZWhvbGRlcjplLmN1cnJlbnRQbGFjZWhvbGRlcixuYW1lOmUubmFtZSxhdXRvY29tcGxldGU6ZS5hdXRvY29tcGxldGUsc2l6ZTplLnNlbGVjdFNpemUsZGlzYWJsZWQ6ZS5zZWxlY3REaXNhYmxlZCxyZWFkb25seTplLnJlYWRvbmx5LFwidmFsaWRhdGUtZXZlbnRcIjohMSxjbGFzczp7XCJpcy1mb2N1c1wiOmUudmlzaWJsZX0sdGFiaW5kZXg6ZS5tdWx0aXBsZSYmZS5maWx0ZXJhYmxlP1wiLTFcIjpudWxsLG9uRm9jdXM6ZS5oYW5kbGVGb2N1cyxvbkJsdXI6ZS5oYW5kbGVCbHVyLG9uSW5wdXQ6ZS5kZWJvdW5jZWRPbklucHV0Q2hhbmdlLG9uUGFzdGU6ZS5kZWJvdW5jZWRPbklucHV0Q2hhbmdlLG9uS2V5ZG93bjpbdFsxOV18fCh0WzE5XT0kKFQoKHQ9PmUubmF2aWdhdGVPcHRpb25zKFwibmV4dFwiKSksW1wic3RvcFwiLFwicHJldmVudFwiXSksW1wiZG93blwiXSkpLHRbMjBdfHwodFsyMF09JChUKCh0PT5lLm5hdmlnYXRlT3B0aW9ucyhcInByZXZcIikpLFtcInN0b3BcIixcInByZXZlbnRcIl0pLFtcInVwXCJdKSksJChUKGUuc2VsZWN0T3B0aW9uLFtcInN0b3BcIixcInByZXZlbnRcIl0pLFtcImVudGVyXCJdKSx0WzIxXXx8KHRbMjFdPSQoVCgodD0+ZS52aXNpYmxlPSExKSxbXCJzdG9wXCIsXCJwcmV2ZW50XCJdKSxbXCJlc2NcIl0pKSx0WzIyXXx8KHRbMjJdPSQoKHQ9PmUudmlzaWJsZT0hMSksW1widGFiXCJdKSldLG9uTW91c2VlbnRlcjp0WzIzXXx8KHRbMjNdPXQ9PmUuaW5wdXRIb3ZlcmluZz0hMCksb25Nb3VzZWxlYXZlOnRbMjRdfHwodFsyNF09dD0+ZS5pbnB1dEhvdmVyaW5nPSExKX0sUih7c3VmZml4OmkoKCgpPT5bcihzKFwiaVwiLHtjbGFzczpbXCJlbC1zZWxlY3RfX2NhcmV0XCIsXCJlbC1pbnB1dF9faWNvblwiLFwiZWwtaWNvbi1cIitlLmljb25DbGFzc119LG51bGwsMiksW1toLCFlLnNob3dDbG9zZV1dKSxlLnNob3dDbG9zZT8oYSgpLG4oXCJpXCIse2tleTowLGNsYXNzOlwiZWwtc2VsZWN0X19jYXJldCBlbC1pbnB1dF9faWNvbiBcIitlLmNsZWFySWNvbixvbkNsaWNrOnRbMTddfHwodFsxN109KC4uLnQpPT5lLmhhbmRsZUNsZWFyQ2xpY2soLi4udCkpfSxudWxsLDIpKTp1KFwidi1pZlwiLCEwKV0pKSxfOjJ9LFtlLiRzbG90cy5wcmVmaXg/e25hbWU6XCJwcmVmaXhcIixmbjppKCgoKT0+W2QoZS4kc2xvdHMsXCJwcmVmaXhcIildKSl9OnZvaWQgMF0pLDEwMzIsW1wiaWRcIixcIm1vZGVsVmFsdWVcIixcInBsYWNlaG9sZGVyXCIsXCJuYW1lXCIsXCJhdXRvY29tcGxldGVcIixcInNpemVcIixcImRpc2FibGVkXCIsXCJyZWFkb25seVwiLFwiY2xhc3NcIixcInRhYmluZGV4XCIsXCJvbkZvY3VzXCIsXCJvbkJsdXJcIixcIm9uSW5wdXRcIixcIm9uUGFzdGVcIixcIm9uS2V5ZG93blwiXSldKV0pKSxkZWZhdWx0OmkoKCgpPT5bcyhrLG51bGwse2RlZmF1bHQ6aSgoKCk9PltyKHMoeSx7cmVmOlwic2Nyb2xsYmFyXCIsdGFnOlwidWxcIixcIndyYXAtY2xhc3NcIjpcImVsLXNlbGVjdC1kcm9wZG93bl9fd3JhcFwiLFwidmlldy1jbGFzc1wiOlwiZWwtc2VsZWN0LWRyb3Bkb3duX19saXN0XCIsY2xhc3M6e1wiaXMtZW1wdHlcIjohZS5hbGxvd0NyZWF0ZSYmZS5xdWVyeSYmMD09PWUuZmlsdGVyZWRPcHRpb25zQ291bnR9fSx7ZGVmYXVsdDppKCgoKT0+W2Uuc2hvd05ld09wdGlvbj8oYSgpLG4oYix7a2V5OjAsdmFsdWU6ZS5xdWVyeSxjcmVhdGVkOiEwfSxudWxsLDgsW1widmFsdWVcIl0pKTp1KFwidi1pZlwiLCEwKSxkKGUuJHNsb3RzLFwiZGVmYXVsdFwiKV0pKSxfOjN9LDgsW1wiY2xhc3NcIl0pLFtbaCxlLm9wdGlvbnMubGVuZ3RoPjAmJiFlLmxvYWRpbmddXSksZS5lbXB0eVRleHQmJighZS5hbGxvd0NyZWF0ZXx8ZS5sb2FkaW5nfHxlLmFsbG93Q3JlYXRlJiYwPT09ZS5vcHRpb25zLmxlbmd0aCk/KGEoKSxuKEUse2tleTowfSxbZS4kc2xvdHMuZW1wdHk/ZChlLiRzbG90cyxcImVtcHR5XCIse2tleTowfSk6KGEoKSxuKFwicFwiLFZzLHAoZS5lbXB0eVRleHQpLDEpKV0sNjQpKTp1KFwidi1pZlwiLCEwKV0pKSxfOjF9KV0pKSxfOjF9LDgsW1widmlzaWJsZVwiLFwiYXBwZW5kLXRvLWJvZHlcIixcInBvcHBlci1jbGFzc1wiLFwib25CZWZvcmVFbnRlclwiXSldLDIpKSxbW3gsZS5oYW5kbGVDbG9zZV1dKX0sTXMuX19maWxlPVwicGFja2FnZXMvc2VsZWN0L3NyYy9zZWxlY3QudnVlXCIsTXMuaW5zdGFsbD1lPT57ZS5jb21wb25lbnQoTXMubmFtZSxNcyl9LF9zLmluc3RhbGw9ZT0+e2UuY29tcG9uZW50KF9zLm5hbWUsX3MpfTt2YXIgSXM9ZSh7bmFtZTpcIkVsT3B0aW9uR3JvdXBcIixjb21wb25lbnROYW1lOlwiRWxPcHRpb25Hcm91cFwiLHByb3BzOntsYWJlbDpTdHJpbmcsZGlzYWJsZWQ6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiExfX0sc2V0dXAoZSl7Y29uc3QgbD10KCEwKTt4KHlzLGYoT2JqZWN0LmFzc2lnbih7fSxDKGUpKSkpO2NvbnN0IGE9dyhrcyk7cmV0dXJuIGEuc2VsZWN0RW1pdHRlci5vbih4cywoKCk9Pnt2YXIgZTtsLnZhbHVlPW51bGw9PT0oZT1udWxsPT1hP3ZvaWQgMDphLm9wdGlvbnMpfHx2b2lkIDA9PT1lP3ZvaWQgMDplLnNvbWUoKGU9PiEwPT09ZS52aXNpYmxlKSl9KSkse3Zpc2libGU6bH19fSk7Y29uc3QgQXM9e2NsYXNzOlwiZWwtc2VsZWN0LWdyb3VwX193cmFwXCJ9LEJzPXtjbGFzczpcImVsLXNlbGVjdC1ncm91cF9fdGl0bGVcIn0sTHM9e2NsYXNzOlwiZWwtc2VsZWN0LWdyb3VwXCJ9O0lzLnJlbmRlcj1mdW5jdGlvbihlLHQsbCxvLGksdSl7cmV0dXJuIHIoKGEoKSxuKFwidWxcIixBcyxbcyhcImxpXCIsQnMscChlLmxhYmVsKSwxKSxzKFwibGlcIixudWxsLFtzKFwidWxcIixMcyxbZChlLiRzbG90cyxcImRlZmF1bHRcIildKV0pXSw1MTIpKSxbW2gsZS52aXNpYmxlXV0pfSxJcy5fX2ZpbGU9XCJwYWNrYWdlcy9zZWxlY3Qvc3JjL29wdGlvbi1ncm91cC52dWVcIixJcy5pbnN0YWxsPWU9PntlLmNvbXBvbmVudChJcy5uYW1lLElzKX07dmFyIHpzPWUoe25hbWU6XCJFbFBhZ2VIZWFkZXJcIixwcm9wczp7dGl0bGU6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6KCk9PnFsKFwiZWwucGFnZUhlYWRlci50aXRsZVwiKX0sY29udGVudDp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIlwifX0sZW1pdHM6W1wiYmFja1wiXSxzZXR1cDooZSx7ZW1pdDp0fSk9Pih7aGFuZGxlQ2xpY2s6ZnVuY3Rpb24oKXt0KFwiYmFja1wiKX19KX0pO2NvbnN0IEZzPXtjbGFzczpcImVsLXBhZ2UtaGVhZGVyXCJ9LCRzPXMoXCJpXCIse2NsYXNzOlwiZWwtaWNvbi1iYWNrXCJ9LG51bGwsLTEpLFJzPXtjbGFzczpcImVsLXBhZ2UtaGVhZGVyX190aXRsZVwifSxIcz17Y2xhc3M6XCJlbC1wYWdlLWhlYWRlcl9fY29udGVudFwifTt6cy5yZW5kZXI9ZnVuY3Rpb24oZSx0LGwsbyxpLHIpe3JldHVybiBhKCksbihcImRpdlwiLEZzLFtzKFwiZGl2XCIse2NsYXNzOlwiZWwtcGFnZS1oZWFkZXJfX2xlZnRcIixvbkNsaWNrOnRbMV18fCh0WzFdPSguLi50KT0+ZS5oYW5kbGVDbGljayguLi50KSl9LFskcyxzKFwiZGl2XCIsUnMsW2QoZS4kc2xvdHMsXCJ0aXRsZVwiLHt9LCgoKT0+W2MocChlLnRpdGxlKSwxKV0pKV0pXSkscyhcImRpdlwiLEhzLFtkKGUuJHNsb3RzLFwiY29udGVudFwiLHt9LCgoKT0+W2MocChlLmNvbnRlbnQpLDEpXSkpXSldKX0senMuX19maWxlPVwicGFja2FnZXMvcGFnZS1oZWFkZXIvc3JjL2luZGV4LnZ1ZVwiLHpzLmluc3RhbGw9ZT0+e2UuY29tcG9uZW50KHpzLm5hbWUsenMpfTt2YXIgV3M9ZSh7bmFtZTpcIlByZXZcIixwcm9wczp7ZGlzYWJsZWQ6Qm9vbGVhbixjdXJyZW50UGFnZTp7dHlwZTpOdW1iZXIsZGVmYXVsdDoxfSxwcmV2VGV4dDp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIlwifX0sc2V0dXA6ZT0+KHtpbnRlcm5hbERpc2FibGVkOmwoKCgpPT5lLmRpc2FibGVkfHxlLmN1cnJlbnRQYWdlPD0xKSl9KX0pO2NvbnN0IGpzPXtrZXk6MH0sS3M9e2tleToxLGNsYXNzOlwiZWwtaWNvbiBlbC1pY29uLWFycm93LWxlZnRcIn07V3MucmVuZGVyPWZ1bmN0aW9uKGUsdCxsLG8saSxyKXtyZXR1cm4gYSgpLG4oXCJidXR0b25cIix7dHlwZTpcImJ1dHRvblwiLGNsYXNzOlwiYnRuLXByZXZcIixkaXNhYmxlZDplLmludGVybmFsRGlzYWJsZWQsb25DbGljazp0WzFdfHwodFsxXT1UKCgoKT0+e30pLFtcInNlbGZcIixcInByZXZlbnRcIl0pKX0sW2UucHJldlRleHQ/KGEoKSxuKFwic3BhblwiLGpzLHAoZS5wcmV2VGV4dCksMSkpOihhKCksbihcImlcIixLcykpXSw4LFtcImRpc2FibGVkXCJdKX0sV3MuX19maWxlPVwicGFja2FnZXMvcGFnaW5hdGlvbi9zcmMvcHJldi52dWVcIjt2YXIgWXM9ZSh7bmFtZTpcIk5leHRcIixwcm9wczp7ZGlzYWJsZWQ6Qm9vbGVhbixjdXJyZW50UGFnZTp7dHlwZTpOdW1iZXIsZGVmYXVsdDoxfSxwYWdlQ291bnQ6e3R5cGU6TnVtYmVyLGRlZmF1bHQ6NTB9LG5leHRUZXh0Ont0eXBlOlN0cmluZyxkZWZhdWx0OlwiXCJ9fSxzZXR1cDplPT4oe2ludGVybmFsRGlzYWJsZWQ6bCgoKCk9PmUuZGlzYWJsZWR8fGUuY3VycmVudFBhZ2U9PT1lLnBhZ2VDb3VudHx8MD09PWUucGFnZUNvdW50KSl9KX0pO2NvbnN0IHFzPXtrZXk6MH0sVXM9e2tleToxLGNsYXNzOlwiZWwtaWNvbiBlbC1pY29uLWFycm93LXJpZ2h0XCJ9O1lzLnJlbmRlcj1mdW5jdGlvbihlLHQsbCxvLGkscil7cmV0dXJuIGEoKSxuKFwiYnV0dG9uXCIse3R5cGU6XCJidXR0b25cIixjbGFzczpcImJ0bi1uZXh0XCIsZGlzYWJsZWQ6ZS5pbnRlcm5hbERpc2FibGVkLG9uQ2xpY2s6dFsxXXx8KHRbMV09VCgoKCk9Pnt9KSxbXCJzZWxmXCIsXCJwcmV2ZW50XCJdKSl9LFtlLm5leHRUZXh0PyhhKCksbihcInNwYW5cIixxcyxwKGUubmV4dFRleHQpLDEpKTooYSgpLG4oXCJpXCIsVXMpKV0sOCxbXCJkaXNhYmxlZFwiXSl9LFlzLl9fZmlsZT1cInBhY2thZ2VzL3BhZ2luYXRpb24vc3JjL25leHQudnVlXCI7Y29uc3QgR3M9KCk9Pntjb25zdCBlPXcoXCJwYWdpbmF0aW9uXCIse30pO3JldHVybntwYWdpbmF0aW9uOmUscGFnZUNvdW50OmUucGFnZUNvdW50LGRpc2FibGVkOmUuZGlzYWJsZWQsY3VycmVudFBhZ2U6ZS5jdXJyZW50UGFnZX19O3ZhciBYcz1lKHtuYW1lOlwiU2l6ZXNcIixjb21wb25lbnRzOntFbFNlbGVjdDpNcyxFbE9wdGlvbjpfc30scHJvcHM6e3BhZ2VTaXplOk51bWJlcixwYWdlU2l6ZXM6e3R5cGU6QXJyYXksZGVmYXVsdDooKT0+WzEwLDIwLDMwLDQwLDUwLDEwMF19LHBvcHBlckNsYXNzOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiXCJ9LGRpc2FibGVkOkJvb2xlYW59LGVtaXRzOltcInBhZ2Utc2l6ZS1jaGFuZ2VcIl0sc2V0dXAoZSx7ZW1pdDphfSl7Y29uc3R7cGFnaW5hdGlvbjpufT1HcygpLG89dChlLnBhZ2VTaXplKTt5KCgoKT0+ZS5wYWdlU2l6ZXMpLCgodCxsKT0+e2lmKCFwZSh0LGwpJiZBcnJheS5pc0FycmF5KHQpKXtjb25zdCBsPXQuaW5kZXhPZihlLnBhZ2VTaXplKT4tMT9lLnBhZ2VTaXplOmUucGFnZVNpemVzWzBdO2EoXCJwYWdlLXNpemUtY2hhbmdlXCIsbCl9fSkpLHkoKCgpPT5lLnBhZ2VTaXplKSwoZT0+e28udmFsdWU9ZX0pKTtjb25zdCBpPWwoKCgpPT5lLnBhZ2VTaXplcykpO3JldHVybnt0OnFsLGlubmVyUGFnZXNpemVzOmksaW5uZXJQYWdlU2l6ZTpvLGhhbmRsZUNoYW5nZTpmdW5jdGlvbihlKXtlIT09by52YWx1ZSYmKG8udmFsdWU9ZSxudWxsPT1ufHxuLmhhbmRsZVNpemVzQ2hhbmdlKE51bWJlcihlKSkpfX19fSk7Y29uc3QgUXM9e2NsYXNzOlwiZWwtcGFnaW5hdGlvbl9fc2l6ZXNcIn07WHMucmVuZGVyPWZ1bmN0aW9uKGUsdCxsLG8scix1KXtjb25zdCBkPVAoXCJlbC1vcHRpb25cIiksYz1QKFwiZWwtc2VsZWN0XCIpO3JldHVybiBhKCksbihcInNwYW5cIixRcyxbcyhjLHtcIm1vZGVsLXZhbHVlXCI6ZS5pbm5lclBhZ2VTaXplLGRpc2FibGVkOmUuZGlzYWJsZWQsXCJwb3BwZXItY2xhc3NcIjplLnBvcHBlckNsYXNzLHNpemU6XCJtaW5pXCIsb25DaGFuZ2U6ZS5oYW5kbGVDaGFuZ2V9LHtkZWZhdWx0OmkoKCgpPT5bKGEoITApLG4oRSxudWxsLEgoZS5pbm5lclBhZ2VzaXplcywodD0+KGEoKSxuKGQse2tleTp0LHZhbHVlOnQsbGFiZWw6dCtlLnQoXCJlbC5wYWdpbmF0aW9uLnBhZ2VzaXplXCIpfSxudWxsLDgsW1widmFsdWVcIixcImxhYmVsXCJdKSkpKSwxMjgpKV0pKSxfOjF9LDgsW1wibW9kZWwtdmFsdWVcIixcImRpc2FibGVkXCIsXCJwb3BwZXItY2xhc3NcIixcIm9uQ2hhbmdlXCJdKV0pfSxYcy5fX2ZpbGU9XCJwYWNrYWdlcy9wYWdpbmF0aW9uL3NyYy9zaXplcy52dWVcIjt2YXIgWnM9ZSh7Y29tcG9uZW50czp7RWxJbnB1dDpXdH0sc2V0dXAoKXtjb25zdHtwYWdpbmF0aW9uOmUscGFnZUNvdW50OmEsZGlzYWJsZWQ6bixjdXJyZW50UGFnZTpvfT1HcygpLGk9dChudWxsKSxyPWwoKCgpPT57dmFyIGU7cmV0dXJuIG51bGwhPT0oZT1pLnZhbHVlKSYmdm9pZCAwIT09ZT9lOm8udmFsdWV9KSk7cmV0dXJue3Q6cWwsdXNlcklucHV0OmkscGFnZUNvdW50OmEsZGlzYWJsZWQ6bixoYW5kbGVJbnB1dDpmdW5jdGlvbihlKXtpLnZhbHVlPU51bWJlcihlKX0saGFuZGxlQ2hhbmdlOmZ1bmN0aW9uKHQpe251bGw9PWV8fGUuY2hhbmdlRXZlbnQoTnVtYmVyKHQpKSxpLnZhbHVlPW51bGx9LGlubmVyVmFsdWU6cn19fSk7Y29uc3QgSnM9e2NsYXNzOlwiZWwtcGFnaW5hdGlvbl9fanVtcFwifTtacy5yZW5kZXI9ZnVuY3Rpb24oZSx0LGwsbyxpLHIpe2NvbnN0IHU9UChcImVsLWlucHV0XCIpO3JldHVybiBhKCksbihcInNwYW5cIixKcyxbYyhwKGUudChcImVsLnBhZ2luYXRpb24uZ290b1wiKSkrXCIgXCIsMSkscyh1LHtjbGFzczpcImVsLXBhZ2luYXRpb25fX2VkaXRvciBpcy1pbi1wYWdpbmF0aW9uXCIsbWluOjEsbWF4OmUucGFnZUNvdW50LGRpc2FibGVkOmUuZGlzYWJsZWQsXCJtb2RlbC12YWx1ZVwiOmUuaW5uZXJWYWx1ZSx0eXBlOlwibnVtYmVyXCIsXCJvblVwZGF0ZTptb2RlbFZhbHVlXCI6ZS5oYW5kbGVJbnB1dCxvbkNoYW5nZTplLmhhbmRsZUNoYW5nZX0sbnVsbCw4LFtcIm1heFwiLFwiZGlzYWJsZWRcIixcIm1vZGVsLXZhbHVlXCIsXCJvblVwZGF0ZTptb2RlbFZhbHVlXCIsXCJvbkNoYW5nZVwiXSksYyhcIiBcIitwKGUudChcImVsLnBhZ2luYXRpb24ucGFnZUNsYXNzaWZpZXJcIikpLDEpXSl9LFpzLl9fZmlsZT1cInBhY2thZ2VzL3BhZ2luYXRpb24vc3JjL2p1bXBlci52dWVcIjt2YXIgZXU9ZSh7bmFtZTpcIlRvdGFsXCIscHJvcHM6e3RvdGFsOnt0eXBlOk51bWJlcixkZWZhdWx0OjFlM319LHNldHVwOigpPT4oe3Q6cWx9KX0pO2NvbnN0IHR1PXtjbGFzczpcImVsLXBhZ2luYXRpb25fX3RvdGFsXCJ9O2V1LnJlbmRlcj1mdW5jdGlvbihlLHQsbCxvLGkscil7cmV0dXJuIGEoKSxuKFwic3BhblwiLHR1LHAoZS50KFwiZWwucGFnaW5hdGlvbi50b3RhbFwiLHt0b3RhbDplLnRvdGFsfSkpLDEpfSxldS5fX2ZpbGU9XCJwYWNrYWdlcy9wYWdpbmF0aW9uL3NyYy90b3RhbC52dWVcIjt2YXIgbHU9ZSh7bmFtZTpcIkVsUGFnZXJcIixwcm9wczp7Y3VycmVudFBhZ2U6e3R5cGU6TnVtYmVyLGRlZmF1bHQ6MX0scGFnZUNvdW50Ont0eXBlOk51bWJlcn0scGFnZXJDb3VudDp7dHlwZTpOdW1iZXIsZGVmYXVsdDo3fSxkaXNhYmxlZDpCb29sZWFufSxlbWl0czpbXCJjaGFuZ2VcIl0sc2V0dXAoZSx7ZW1pdDphfSl7Y29uc3Qgbj10KCExKSxvPXQoITEpLGk9dChcImVsLWljb24tbW9yZVwiKSxyPXQoXCJlbC1pY29uLW1vcmVcIikscz1sKCgoKT0+e2NvbnN0IHQ9ZS5wYWdlckNvdW50LGw9KHQtMSkvMixhPU51bWJlcihlLmN1cnJlbnRQYWdlKSxuPU51bWJlcihlLnBhZ2VDb3VudCk7bGV0IG89ITEsaT0hMTtuPnQmJihhPnQtbCYmKG89ITApLGE8bi1sJiYoaT0hMCkpO2NvbnN0IHI9W107aWYobyYmIWkpe2ZvcihsZXQgZT1uLSh0LTIpO2U8bjtlKyspci5wdXNoKGUpfWVsc2UgaWYoIW8mJmkpZm9yKGxldCBlPTI7ZTx0O2UrKylyLnB1c2goZSk7ZWxzZSBpZihvJiZpKXtjb25zdCBlPU1hdGguZmxvb3IodC8yKS0xO2ZvcihsZXQgdD1hLWU7dDw9YStlO3QrKylyLnB1c2godCl9ZWxzZSBmb3IobGV0IGU9MjtlPG47ZSsrKXIucHVzaChlKTtyZXR1cm4gcn0pKTtyZXR1cm4gZygoKCk9Pntjb25zdCB0PShlLnBhZ2VyQ291bnQtMSkvMjtuLnZhbHVlPSExLG8udmFsdWU9ITEsZS5wYWdlQ291bnQ+ZS5wYWdlckNvdW50JiYoZS5jdXJyZW50UGFnZT5lLnBhZ2VyQ291bnQtdCYmKG4udmFsdWU9ITApLGUuY3VycmVudFBhZ2U8ZS5wYWdlQ291bnQtdCYmKG8udmFsdWU9ITApKX0pKSxnKCgoKT0+e24udmFsdWV8fChyLnZhbHVlPVwiZWwtaWNvbi1tb3JlXCIpfSkpLGcoKCgpPT57by52YWx1ZXx8KGkudmFsdWU9XCJlbC1pY29uLW1vcmVcIil9KSkse3Nob3dQcmV2TW9yZTpuLHNob3dOZXh0TW9yZTpvLHF1aWNrbmV4dEljb25DbGFzczppLHF1aWNrcHJldkljb25DbGFzczpyLHBhZ2VyczpzLG9uTW91c2VlbnRlcjpmdW5jdGlvbih0KXtlLmRpc2FibGVkfHwoXCJsZWZ0XCI9PT10P3IudmFsdWU9XCJlbC1pY29uLWQtYXJyb3ctbGVmdFwiOmkudmFsdWU9XCJlbC1pY29uLWQtYXJyb3ctcmlnaHRcIil9LG9uUGFnZXJDbGljazpmdW5jdGlvbih0KXtjb25zdCBsPXQudGFyZ2V0O2lmKFwidWxcIj09PWwudGFnTmFtZS50b0xvd2VyQ2FzZSgpfHxlLmRpc2FibGVkKXJldHVybjtsZXQgbj1OdW1iZXIobC50ZXh0Q29udGVudCk7Y29uc3Qgbz1lLnBhZ2VDb3VudCxpPWUuY3VycmVudFBhZ2Uscj1lLnBhZ2VyQ291bnQtMjtsLmNsYXNzTmFtZS5pbmNsdWRlcyhcIm1vcmVcIikmJihsLmNsYXNzTmFtZS5pbmNsdWRlcyhcInF1aWNrcHJldlwiKT9uPWktcjpsLmNsYXNzTmFtZS5pbmNsdWRlcyhcInF1aWNrbmV4dFwiKSYmKG49aStyKSksaXNOYU4obil8fChuPDEmJihuPTEpLG4+byYmKG49bykpLG4hPT1pJiZhKFwiY2hhbmdlXCIsbil9fX19KTtsdS5yZW5kZXI9ZnVuY3Rpb24oZSx0LGwsbyxpLHIpe3JldHVybiBhKCksbihcInVsXCIse2NsYXNzOlwiZWwtcGFnZXJcIixvbkNsaWNrOnRbNV18fCh0WzVdPSguLi50KT0+ZS5vblBhZ2VyQ2xpY2soLi4udCkpfSxbZS5wYWdlQ291bnQ+MD8oYSgpLG4oXCJsaVwiLHtrZXk6MCxjbGFzczpbe2FjdGl2ZToxPT09ZS5jdXJyZW50UGFnZSxkaXNhYmxlZDplLmRpc2FibGVkfSxcIm51bWJlclwiXX0sXCIgMSBcIiwyKSk6dShcInYtaWZcIiwhMCksZS5zaG93UHJldk1vcmU/KGEoKSxuKFwibGlcIix7a2V5OjEsY2xhc3M6W1wiZWwtaWNvbiBtb3JlIGJ0bi1xdWlja3ByZXZcIixbZS5xdWlja3ByZXZJY29uQ2xhc3Mse2Rpc2FibGVkOmUuZGlzYWJsZWR9XV0sb25Nb3VzZWVudGVyOnRbMV18fCh0WzFdPXQ9PmUub25Nb3VzZWVudGVyKFwibGVmdFwiKSksb25Nb3VzZWxlYXZlOnRbMl18fCh0WzJdPXQ9PmUucXVpY2twcmV2SWNvbkNsYXNzPVwiZWwtaWNvbi1tb3JlXCIpfSxudWxsLDM0KSk6dShcInYtaWZcIiwhMCksKGEoITApLG4oRSxudWxsLEgoZS5wYWdlcnMsKHQ9PihhKCksbihcImxpXCIse2tleTp0LGNsYXNzOlt7YWN0aXZlOmUuY3VycmVudFBhZ2U9PT10LGRpc2FibGVkOmUuZGlzYWJsZWR9LFwibnVtYmVyXCJdfSxwKHQpLDMpKSkpLDEyOCkpLGUuc2hvd05leHRNb3JlPyhhKCksbihcImxpXCIse2tleToyLGNsYXNzOltcImVsLWljb24gbW9yZSBidG4tcXVpY2tuZXh0XCIsW2UucXVpY2tuZXh0SWNvbkNsYXNzLHtkaXNhYmxlZDplLmRpc2FibGVkfV1dLG9uTW91c2VlbnRlcjp0WzNdfHwodFszXT10PT5lLm9uTW91c2VlbnRlcihcInJpZ2h0XCIpKSxvbk1vdXNlbGVhdmU6dFs0XXx8KHRbNF09dD0+ZS5xdWlja25leHRJY29uQ2xhc3M9XCJlbC1pY29uLW1vcmVcIil9LG51bGwsMzQpKTp1KFwidi1pZlwiLCEwKSxlLnBhZ2VDb3VudD4xPyhhKCksbihcImxpXCIse2tleTozLGNsYXNzOlt7YWN0aXZlOmUuY3VycmVudFBhZ2U9PT1lLnBhZ2VDb3VudCxkaXNhYmxlZDplLmRpc2FibGVkfSxcIm51bWJlclwiXX0scChlLnBhZ2VDb3VudCksMykpOnUoXCJ2LWlmXCIsITApXSl9LGx1Ll9fZmlsZT1cInBhY2thZ2VzL3BhZ2luYXRpb24vc3JjL3BhZ2VyLnZ1ZVwiO2NvbnN0IGF1PWU9Pk51bWJlci5pc05hTihlKT8xMDplO3ZhciBudT1lKHtuYW1lOlwiRWxQYWdpbmF0aW9uXCIsY29tcG9uZW50czp7UHJldjpXcyxOZXh0OllzLFNpemVzOlhzLEp1bXBlcjpacyxUb3RhbDpldSxQYWdlcjpsdX0scHJvcHM6e3BhZ2VTaXplOnt0eXBlOk51bWJlcixkZWZhdWx0OjEwfSxzbWFsbDpCb29sZWFuLHRvdGFsOnt0eXBlOk51bWJlcn0scGFnZUNvdW50Ont0eXBlOk51bWJlcn0scGFnZXJDb3VudDp7dHlwZTpOdW1iZXIsdmFsaWRhdG9yOmU9PigwfGUpPT09ZSYmZT40JiZlPDIyJiZlJTI9PTEsZGVmYXVsdDo3fSxjdXJyZW50UGFnZTp7dHlwZTpOdW1iZXIsZGVmYXVsdDoxfSxsYXlvdXQ6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJwcmV2LCBwYWdlciwgbmV4dCwganVtcGVyLCAtPiwgdG90YWxcIn0scGFnZVNpemVzOnt0eXBlOkFycmF5LGRlZmF1bHQ6KCk9PlsxMCwyMCwzMCw0MCw1MCwxMDBdfSxwb3BwZXJDbGFzczp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIlwifSxwcmV2VGV4dDp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIlwifSxuZXh0VGV4dDp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIlwifSxiYWNrZ3JvdW5kOkJvb2xlYW4sZGlzYWJsZWQ6Qm9vbGVhbixoaWRlT25TaW5nbGVQYWdlOkJvb2xlYW59LGVtaXRzOltcInNpemUtY2hhbmdlXCIsXCJjdXJyZW50LWNoYW5nZVwiLFwicHJldi1jbGlja1wiLFwibmV4dC1jbGlja1wiLFwidXBkYXRlOmN1cnJlbnRQYWdlXCIsXCJ1cGRhdGU6cGFnZVNpemVcIl0sc2V0dXAoZSx7ZW1pdDphfSl7Y29uc3Qgbj10KC0xKSxvPXQoITEpLGk9dChhdShlLnBhZ2VTaXplKSkscj1sKCgoKT0+XCJudW1iZXJcIj09dHlwZW9mIGUudG90YWw/TWF0aC5tYXgoMSxNYXRoLmNlaWwoZS50b3RhbC9pLnZhbHVlKSk6XCJudW1iZXJcIj09dHlwZW9mIGUucGFnZUNvdW50P01hdGgubWF4KDEsZS5wYWdlQ291bnQpOm51bGwpKSxzPXQoYyhlLmN1cnJlbnRQYWdlKSk7ZnVuY3Rpb24gdSgpe2soKCgpPT57KHMudmFsdWUhPT1uLnZhbHVlfHxvLnZhbHVlKSYmKG4udmFsdWU9cy52YWx1ZSxvLnZhbHVlPSExKX0pKX1mdW5jdGlvbiBkKGUpe3MudmFsdWU9YyhlKSxvLnZhbHVlPSEwfWZ1bmN0aW9uIGMoZSl7bGV0IHQ7XCJzdHJpbmdcIj09dHlwZW9mIGUmJihlPXBhcnNlSW50KGUsMTApKTtyZXR1cm5cIm51bWJlclwiPT10eXBlb2Ygci52YWx1ZT9lPDE/dD0xOmU+ci52YWx1ZSYmKHQ9ci52YWx1ZSk6KGlzTmFOKGUpfHxlPDEpJiYodD0xKSwodm9pZCAwPT09dCYmaXNOYU4oZSl8fDA9PT10KSYmKHQ9MSksdm9pZCAwPT09dD9lOnR9cmV0dXJuIHkoKCgpPT5jKGUuY3VycmVudFBhZ2UpKSwoZT0+e3MudmFsdWU9ZX0pKSx5KCgoKT0+ZS5wYWdlU2l6ZSksKGU9PntpLnZhbHVlPWF1KGUpfSkpLHkocywoZT0+e2EoXCJ1cGRhdGU6Y3VycmVudFBhZ2VcIixlKSxhKFwiY3VycmVudC1jaGFuZ2VcIixlKX0pKSx5KCgoKT0+ci52YWx1ZSksKGU9Pntjb25zdCB0PXMudmFsdWU7ZT4wJiYwPT09dD9zLnZhbHVlPTE6dD5lJiYocy52YWx1ZT0wPT09ZT8xOmUsby52YWx1ZSYmdSgpKSxvLnZhbHVlPSExfSkpLHgoXCJwYWdpbmF0aW9uXCIse3BhZ2VDb3VudDpsKCgoKT0+ZS5wYWdlQ291bnQpKSxkaXNhYmxlZDpsKCgoKT0+ZS5kaXNhYmxlZCkpLGN1cnJlbnRQYWdlOmwoKCgpPT5zLnZhbHVlKSksY2hhbmdlRXZlbnQ6ZCxoYW5kbGVTaXplc0NoYW5nZTpmdW5jdGlvbihlKXtvLnZhbHVlPSEwLGkudmFsdWU9ZSxhKFwic2l6ZS1jaGFuZ2VcIixlKX19KSx7aW50ZXJuYWxDdXJyZW50UGFnZTpzLGludGVybmFsUGFnZVNpemU6aSxsYXN0RW1pdHRlZFBhZ2U6bix1c2VyQ2hhbmdlUGFnZVNpemU6byxpbnRlcm5hbFBhZ2VDb3VudDpyLGdldFZhbGlkQ3VycmVudFBhZ2U6YyxlbWl0Q2hhbmdlOnUsaGFuZGxlQ3VycmVudENoYW5nZTpkLHByZXY6ZnVuY3Rpb24oKXtpZihlLmRpc2FibGVkKXJldHVybjtjb25zdCB0PXMudmFsdWUtMTtzLnZhbHVlPWModCksYShcInByZXYtY2xpY2tcIixzKSx1KCl9LG5leHQ6ZnVuY3Rpb24oKXtpZihlLmRpc2FibGVkKXJldHVybjtjb25zdCB0PXMudmFsdWUrMTtzLnZhbHVlPWModCksYShcIm5leHQtY2xpY2tcIixzLnZhbHVlKSx1KCl9fX0scmVuZGVyKCl7dmFyIGUsdCxsO2NvbnN0IGE9dGhpcy5sYXlvdXQ7aWYoIWEpcmV0dXJuIG51bGw7aWYodGhpcy5oaWRlT25TaW5nbGVQYWdlJiYoIXRoaXMuaW50ZXJuYWxQYWdlQ291bnR8fDE9PT10aGlzLmludGVybmFsUGFnZUNvdW50KSlyZXR1cm4gbnVsbDtjb25zdCBuPUQoXCJkaXZcIix7Y2xhc3M6W1wiZWwtcGFnaW5hdGlvblwiLHtcImlzLWJhY2tncm91bmRcIjp0aGlzLmJhY2tncm91bmQsXCJlbC1wYWdpbmF0aW9uLS1zbWFsbFwiOnRoaXMuc21hbGx9XX0pLG89W10saT1EKFwiZGl2XCIse2NsYXNzOlwiZWwtcGFnaW5hdGlvbl9fcmlnaHR3cmFwcGVyXCJ9KSxyPXtwcmV2OkQoV3Mse2Rpc2FibGVkOnRoaXMuZGlzYWJsZWQsY3VycmVudFBhZ2U6dGhpcy5pbnRlcm5hbEN1cnJlbnRQYWdlLHByZXZUZXh0OnRoaXMucHJldlRleHQsb25DbGljazp0aGlzLnByZXZ9KSxqdW1wZXI6RChacykscGFnZXI6RChsdSx7Y3VycmVudFBhZ2U6dGhpcy5pbnRlcm5hbEN1cnJlbnRQYWdlLHBhZ2VDb3VudDp0aGlzLmludGVybmFsUGFnZUNvdW50LHBhZ2VyQ291bnQ6dGhpcy5wYWdlckNvdW50LG9uQ2hhbmdlOnRoaXMuaGFuZGxlQ3VycmVudENoYW5nZSxkaXNhYmxlZDp0aGlzLmRpc2FibGVkfSksbmV4dDpEKFlzLHtkaXNhYmxlZDp0aGlzLmRpc2FibGVkLGN1cnJlbnRQYWdlOnRoaXMuaW50ZXJuYWxDdXJyZW50UGFnZSxwYWdlQ291bnQ6dGhpcy5pbnRlcm5hbFBhZ2VDb3VudCxuZXh0VGV4dDp0aGlzLm5leHRUZXh0LG9uQ2xpY2s6dGhpcy5uZXh0fSksc2l6ZXM6RChYcyx7cGFnZVNpemU6dGhpcy5wYWdlU2l6ZSxwYWdlU2l6ZXM6dGhpcy5wYWdlU2l6ZXMscG9wcGVyQ2xhc3M6dGhpcy5wb3BwZXJDbGFzcyxkaXNhYmxlZDp0aGlzLmRpc2FibGVkfSksc2xvdDpudWxsIT09KGw9bnVsbD09PSh0PW51bGw9PT0oZT10aGlzLiRzbG90cyl8fHZvaWQgMD09PWU/dm9pZCAwOmUuZGVmYXVsdCl8fHZvaWQgMD09PXQ/dm9pZCAwOnQuY2FsbChlKSkmJnZvaWQgMCE9PWw/bDpudWxsLHRvdGFsOkQoZXUse3RvdGFsOnRoaXMudG90YWx9KX0scz1hLnNwbGl0KFwiLFwiKS5tYXAoKGU9PmUudHJpbSgpKSk7bGV0IHU9ITE7cmV0dXJuIHMuZm9yRWFjaCgoZT0+e1wiLT5cIiE9PWU/dXx8by5wdXNoKHJbZV0pOnU9ITB9KSksdSYmby51bnNoaWZ0KGkpLEQobix7fSxvKX19KTtudS5pbnN0YWxsPWU9PntlLmNvbXBvbmVudChudS5uYW1lLG51KX07dmFyIG91PWUoe25hbWU6XCJFbFBvcGNvbmZpcm1cIixjb21wb25lbnRzOntFbEJ1dHRvbjokbCxFbFBvcHBlcjpTbH0scHJvcHM6e3RpdGxlOnt0eXBlOlN0cmluZ30sY29uZmlybUJ1dHRvblRleHQ6e3R5cGU6U3RyaW5nfSxjYW5jZWxCdXR0b25UZXh0Ont0eXBlOlN0cmluZ30sY29uZmlybUJ1dHRvblR5cGU6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJwcmltYXJ5XCJ9LGNhbmNlbEJ1dHRvblR5cGU6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJ0ZXh0XCJ9LGljb246e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJlbC1pY29uLXF1ZXN0aW9uXCJ9LGljb25Db2xvcjp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIiNmOTBcIn0saGlkZUljb246e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiExfX0sZW1pdHM6W1wiY29uZmlybVwiLFwiY2FuY2VsXCJdLHNldHVwKGUse2VtaXQ6YX0pe2NvbnN0IG49dCghMSksbz1sKCgoKT0+ZS5jb25maXJtQnV0dG9uVGV4dHx8cWwoXCJlbC5wb3Bjb25maXJtLmNvbmZpcm1CdXR0b25UZXh0XCIpKSksaT1sKCgoKT0+ZS5jYW5jZWxCdXR0b25UZXh0fHxxbChcImVsLnBvcGNvbmZpcm0uY2FuY2VsQnV0dG9uVGV4dFwiKSkpO3JldHVybnt2aXNpYmxlOm4sY29uZmlybTooKT0+e24udmFsdWU9ITEsYShcImNvbmZpcm1cIil9LGNhbmNlbDooKT0+e24udmFsdWU9ITEsYShcImNhbmNlbFwiKX0sY29uZmlybUJ1dHRvblRleHRfOm8sY2FuY2VsQnV0dG9uVGV4dF86aX19fSk7Y29uc3QgaXU9e2NsYXNzOlwiZWwtcG9wY29uZmlybVwifSxydT17Y2xhc3M6XCJlbC1wb3Bjb25maXJtX19tYWluXCJ9LHN1PXtjbGFzczpcImVsLXBvcGNvbmZpcm1fX2FjdGlvblwifTtvdS5yZW5kZXI9ZnVuY3Rpb24oZSx0LGwsbyxyLGgpe2NvbnN0IHY9UChcImVsLWJ1dHRvblwiKSxtPVAoXCJlbC1wb3BwZXJcIik7cmV0dXJuIGEoKSxuKG0se3Zpc2libGU6ZS52aXNpYmxlLFwib25VcGRhdGU6dmlzaWJsZVwiOnRbMV18fCh0WzFdPXQ9PmUudmlzaWJsZT10KSx0cmlnZ2VyOltcImNsaWNrXCJdLGVmZmVjdDpcImxpZ2h0XCIsXCJwb3BwZXItY2xhc3NcIjpcImVsLXBvcG92ZXJcIixcImFwcGVuZC10by1ib2R5XCI6XCJcIn0se3RyaWdnZXI6aSgoKCk9PltkKGUuJHNsb3RzLFwicmVmZXJlbmNlXCIpXSkpLGRlZmF1bHQ6aSgoKCk9PltzKFwiZGl2XCIsaXUsW3MoXCJwXCIscnUsW2UuaGlkZUljb24/dShcInYtaWZcIiwhMCk6KGEoKSxuKFwiaVwiLHtrZXk6MCxjbGFzczpbZS5pY29uLFwiZWwtcG9wY29uZmlybV9faWNvblwiXSxzdHlsZTp7Y29sb3I6ZS5pY29uQ29sb3J9fSxudWxsLDYpKSxjKFwiIFwiK3AoZS50aXRsZSksMSldKSxzKFwiZGl2XCIsc3UsW3Modix7c2l6ZTpcIm1pbmlcIix0eXBlOmUuY2FuY2VsQnV0dG9uVHlwZSxvbkNsaWNrOmUuY2FuY2VsfSx7ZGVmYXVsdDppKCgoKT0+W2MocChlLmNhbmNlbEJ1dHRvblRleHRfKSwxKV0pKSxfOjF9LDgsW1widHlwZVwiLFwib25DbGlja1wiXSkscyh2LHtzaXplOlwibWluaVwiLHR5cGU6ZS5jb25maXJtQnV0dG9uVHlwZSxvbkNsaWNrOmUuY29uZmlybX0se2RlZmF1bHQ6aSgoKCk9PltjKHAoZS5jb25maXJtQnV0dG9uVGV4dF8pLDEpXSkpLF86MX0sOCxbXCJ0eXBlXCIsXCJvbkNsaWNrXCJdKV0pXSldKSksXzoxfSw4LFtcInZpc2libGVcIl0pfSxvdS5fX2ZpbGU9XCJwYWNrYWdlcy9wb3Bjb25maXJtL3NyYy9pbmRleC52dWVcIixvdS5pbnN0YWxsPWU9PntlLmNvbXBvbmVudChvdS5uYW1lLG91KX07Y29uc3QgdXU9W1widXBkYXRlOnZpc2libGVcIixcImFmdGVyLWVudGVyXCIsXCJhZnRlci1sZWF2ZVwiLFwic2hvd1wiLFwiaGlkZVwiXSxkdT17a2V5OjAsY2xhc3M6XCJlbC1wb3BvdmVyX190aXRsZVwiLHJvbGU6XCJ0aXRsZVwifTt2YXIgY3U9ZSh7bmFtZTpcIkVsUG9wb3ZlclwiLGNvbXBvbmVudHM6e0VsUG9wcGVyOlNsfSxwcm9wczpPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sa2wpLHtjb250ZW50Ont0eXBlOlN0cmluZ30sdHJpZ2dlcjp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcImNsaWNrXCJ9LHRpdGxlOnt0eXBlOlN0cmluZ30sdHJhbnNpdGlvbjp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcImZhZGUtaW4tbGluZWFyXCJ9LHdpZHRoOnt0eXBlOltTdHJpbmcsTnVtYmVyXSxkZWZhdWx0OjE1MH0sYXBwZW5kVG9Cb2R5Ont0eXBlOkJvb2xlYW4sZGVmYXVsdDohMH19KSxlbWl0czp1dSxzZXR1cChlLHQpe3ZhciBhLG47XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VWTiYmZS52aXNpYmxlJiYhdC5zbG90cy5yZWZlcmVuY2UmJihhPVwiRWxQb3BvdmVyXCIsbj1cIlxcbiAgICAgICAgWW91IGNhbm5vdCBpbml0IHBvcG92ZXIgd2l0aG91dCBnaXZlbiByZWZlcmVuY2VcXG4gICAgICBcIixjb25zb2xlLndhcm4obmV3IHZ0KGBbJHthfV0gJHtufWApKSk7cmV0dXJuIGZ1bmN0aW9uKGUsdCl7Y29uc3QgYT1sKCgoKT0+e2xldCB0O3JldHVybiB0PU5lKGUud2lkdGgpP2Uud2lkdGg6ZS53aWR0aCtcInB4XCIse3dpZHRoOnQsekluZGV4OmdsLm5leHRaSW5kZXgoKX19KSksbj1DbChlLHQpO3JldHVybiB5KG4udmlzaWJpbGl0eSwoZT0+e3QuZW1pdChlP1wic2hvd1wiOlwiaGlkZVwiKX0pKSxPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sbikse3BvcHBlclN0eWxlOmF9KX0oZSx0KX0scmVuZGVyKCl7Y29uc3R7JHNsb3RzOmV9PXRoaXMsdD1lLnJlZmVyZW5jZT9lLnJlZmVyZW5jZSgpOm51bGwsbD0oYT10aGlzLnRpdGxlLG49XCJkaXZcIixvPWR1LGk9cCh0aGlzLnRpdGxlKSxoPWlsLlRFWFQsYT91bChuLG8saSxoLHYpOnUoXCJ2LWlmXCIsITApKTt2YXIgYSxuLG8saSxoLHY7Y29uc3QgbT1kKGUsXCJkZWZhdWx0XCIse30sKCgpPT5bYyhwKHRoaXMuY29udGVudCksaWwuVEVYVCldKSkse2V2ZW50czpmLG9uQWZ0ZXJFbnRlcjpnLG9uQWZ0ZXJMZWF2ZTpiLG9uUG9wcGVyTW91c2VFbnRlcjp5LG9uUG9wcGVyTW91c2VMZWF2ZTprLHBvcHBlclN0eWxlOkMscG9wcGVySWQ6eCxwb3BwZXJDbGFzczp3LHNob3dBcnJvdzpfLHRyYW5zaXRpb246Uyx2aXNpYmlsaXR5Ok19PXRoaXMsVD1bdGhpcy5jb250ZW50P1wiZWwtcG9wb3Zlci0tcGxhaW5cIjpcIlwiLFwiZWwtcG9wb3ZlclwiLHddLmpvaW4oXCIgXCIpO2xldCBOPXhsKHtlZmZlY3Q6eWwuTElHSFQsbmFtZTpTLHBvcHBlckNsYXNzOlQscG9wcGVyU3R5bGU6Qyxwb3BwZXJJZDp4LHZpc2liaWxpdHk6TSxvbk1vdXNlRW50ZXI6eSxvbk1vdXNlTGVhdmU6ayxvbkFmdGVyRW50ZXI6ZyxvbkFmdGVyTGVhdmU6YixzdG9wUG9wcGVyTW91c2VFdmVudDohMH0sW2wsbSxfbChfKV0pO2NvbnN0IEQ9dD93bCh0LE9iamVjdC5hc3NpZ24oe2FyaWFEZXNjcmliZWRieTp4LHJlZjpcInRyaWdnZXJSZWZcIixvbk1vdXNlRG93bjpjdCxvbk1vdXNlVXA6Y3R9LGYpKTp1KFwidi1pZlwiLCEwKTtyZXR1cm4gdWwoRSxudWxsLFtcImNsaWNrXCI9PT10aGlzLnRyaWdnZXI/cihELFtbTXQsdGhpcy5oaWRlXV0pOkQscyh6LHtkaXNhYmxlZDohdGhpcy5hcHBlbmRUb0JvZHksdG86XCJib2R5XCJ9LFtOXSxpbC5QUk9QUyxbXCJkaXNhYmxlZFwiXSldKX19KTtjdS5fX2ZpbGU9XCJwYWNrYWdlcy9wb3BvdmVyL3NyYy9pbmRleC52dWVcIjtjb25zdCBwdT0oZSx0LGwpPT57Y29uc3QgYT10LmFyZ3x8dC52YWx1ZSxuPWwuZGlyc1swXS5pbnN0YW5jZS4kcmVmc1thXTtuJiYobi50cmlnZ2VyUmVmPWUsT2JqZWN0LmVudHJpZXMobi5ldmVudHMpLm1hcCgoKFt0LGxdKT0+e2x0KGUsdC50b0xvd2VyQ2FzZSgpLnNsaWNlKDIpLGwpfSkpKX07dmFyIGh1PXttb3VudGVkKGUsdCxsKXtwdShlLHQsbCl9LHVwZGF0ZWQoZSx0LGwpe3B1KGUsdCxsKX19O2N1Lmluc3RhbGw9ZT0+e2UuY29tcG9uZW50KGN1Lm5hbWUsY3UpLGUuZGlyZWN0aXZlKFwicG9wb3ZlclwiLGh1KX0sY3UuZGlyZWN0aXZlPWh1O3ZhciB2dT1lKHtuYW1lOlwiRWxQcm9ncmVzc1wiLHByb3BzOnt0eXBlOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwibGluZVwiLHZhbGlkYXRvcjplPT5bXCJsaW5lXCIsXCJjaXJjbGVcIixcImRhc2hib2FyZFwiXS5pbmRleE9mKGUpPi0xfSxwZXJjZW50YWdlOnt0eXBlOk51bWJlcixkZWZhdWx0OjAscmVxdWlyZWQ6ITAsdmFsaWRhdG9yOmU9PmU+PTAmJmU8PTEwMH0sc3RhdHVzOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiXCIsdmFsaWRhdG9yOmU9PltcIlwiLFwic3VjY2Vzc1wiLFwiZXhjZXB0aW9uXCIsXCJ3YXJuaW5nXCJdLmluZGV4T2YoZSk+LTF9LHN0cm9rZVdpZHRoOnt0eXBlOk51bWJlcixkZWZhdWx0OjZ9LHN0cm9rZUxpbmVjYXA6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJyb3VuZFwifSx0ZXh0SW5zaWRlOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMX0sd2lkdGg6e3R5cGU6TnVtYmVyLGRlZmF1bHQ6MTI2fSxzaG93VGV4dDp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITB9LGNvbG9yOnt0eXBlOltTdHJpbmcsQXJyYXksRnVuY3Rpb25dLGRlZmF1bHQ6XCJcIn0sZm9ybWF0Ont0eXBlOkZ1bmN0aW9uLGRlZmF1bHQ6ZT0+ZStcIiVcIn19LHNldHVwKGUpe2NvbnN0IHQ9bCgoKCk9Pih7d2lkdGg6ZS5wZXJjZW50YWdlK1wiJVwiLGJhY2tncm91bmRDb2xvcjptKGUucGVyY2VudGFnZSl9KSkpLGE9bCgoKCk9PihlLnN0cm9rZVdpZHRoL2Uud2lkdGgqMTAwKS50b0ZpeGVkKDEpKSksbj1sKCgoKT0+XCJjaXJjbGVcIj09PWUudHlwZXx8XCJkYXNoYm9hcmRcIj09PWUudHlwZT9wYXJzZUludChcIlwiKyg1MC1wYXJzZUZsb2F0KGEudmFsdWUpLzIpLDEwKTowKSksbz1sKCgoKT0+e2NvbnN0IHQ9bi52YWx1ZSxsPVwiZGFzaGJvYXJkXCI9PT1lLnR5cGU7cmV0dXJuYFxcbiAgICAgICAgICBNIDUwIDUwXFxuICAgICAgICAgIG0gMCAke2w/XCJcIjpcIi1cIn0ke3R9XFxuICAgICAgICAgIGEgJHt0fSAke3R9IDAgMSAxIDAgJHtsP1wiLVwiOlwiXCJ9JHsyKnR9XFxuICAgICAgICAgIGEgJHt0fSAke3R9IDAgMSAxIDAgJHtsP1wiXCI6XCItXCJ9JHsyKnR9XFxuICAgICAgICAgIGB9KSksaT1sKCgoKT0+MipNYXRoLlBJKm4udmFsdWUpKSxyPWwoKCgpPT5cImRhc2hib2FyZFwiPT09ZS50eXBlPy43NToxKSkscz1sKCgoKT0+LTEqaS52YWx1ZSooMS1yLnZhbHVlKS8yK1wicHhcIikpLHU9bCgoKCk9Pih7c3Ryb2tlRGFzaGFycmF5OmAke2kudmFsdWUqci52YWx1ZX1weCwgJHtpLnZhbHVlfXB4YCxzdHJva2VEYXNob2Zmc2V0OnMudmFsdWV9KSkpLGQ9bCgoKCk9Pih7c3Ryb2tlRGFzaGFycmF5OmAke2kudmFsdWUqci52YWx1ZSooZS5wZXJjZW50YWdlLzEwMCl9cHgsICR7aS52YWx1ZX1weGAsc3Ryb2tlRGFzaG9mZnNldDpzLnZhbHVlLHRyYW5zaXRpb246XCJzdHJva2UtZGFzaGFycmF5IDAuNnMgZWFzZSAwcywgc3Ryb2tlIDAuNnMgZWFzZVwifSkpKSxjPWwoKCgpPT57bGV0IHQ7aWYoZS5jb2xvcil0PW0oZS5wZXJjZW50YWdlKTtlbHNlIHN3aXRjaChlLnN0YXR1cyl7Y2FzZVwic3VjY2Vzc1wiOnQ9XCIjMTNjZTY2XCI7YnJlYWs7Y2FzZVwiZXhjZXB0aW9uXCI6dD1cIiNmZjQ5NDlcIjticmVhaztjYXNlXCJ3YXJuaW5nXCI6dD1cIiNlNmEyM2NcIjticmVhaztkZWZhdWx0OnQ9XCIjMjBhMGZmXCJ9cmV0dXJuIHR9KSkscD1sKCgoKT0+XCJ3YXJuaW5nXCI9PT1lLnN0YXR1cz9cImVsLWljb24td2FybmluZ1wiOlwibGluZVwiPT09ZS50eXBlP1wic3VjY2Vzc1wiPT09ZS5zdGF0dXM/XCJlbC1pY29uLWNpcmNsZS1jaGVja1wiOlwiZWwtaWNvbi1jaXJjbGUtY2xvc2VcIjpcInN1Y2Nlc3NcIj09PWUuc3RhdHVzP1wiZWwtaWNvbi1jaGVja1wiOlwiZWwtaWNvbi1jbG9zZVwiKSksaD1sKCgoKT0+XCJsaW5lXCI9PT1lLnR5cGU/MTIrLjQqZS5zdHJva2VXaWR0aDouMTExMTExKmUud2lkdGgrMikpLHY9bCgoKCk9PmUuZm9ybWF0KGUucGVyY2VudGFnZSkpKSxtPXQ9Pnt2YXIgbDtjb25zdHtjb2xvcjphfT1lO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIGEpcmV0dXJuIGEodCk7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGEpcmV0dXJuIGE7e2NvbnN0IGU9MTAwL2EubGVuZ3RoLG49YS5tYXAoKCh0LGwpPT5cInN0cmluZ1wiPT10eXBlb2YgdD97Y29sb3I6dCxwZXJjZW50YWdlOihsKzEpKmV9OnQpKS5zb3J0KCgoZSx0KT0+ZS5wZXJjZW50YWdlLXQucGVyY2VudGFnZSkpO2ZvcihsZXQgZT0wO2U8bi5sZW5ndGg7ZSsrKWlmKG5bZV0ucGVyY2VudGFnZT50KXJldHVybiBuW2VdLmNvbG9yO3JldHVybiBudWxsPT09KGw9bltuLmxlbmd0aC0xXSl8fHZvaWQgMD09PWw/dm9pZCAwOmwuY29sb3J9fTtyZXR1cm57YmFyU3R5bGU6dCxyZWxhdGl2ZVN0cm9rZVdpZHRoOmEscmFkaXVzOm4sdHJhY2tQYXRoOm8scGVyaW1ldGVyOmkscmF0ZTpyLHN0cm9rZURhc2hvZmZzZXQ6cyx0cmFpbFBhdGhTdHlsZTp1LGNpcmNsZVBhdGhTdHlsZTpkLHN0cm9rZTpjLGljb25DbGFzczpwLHByb2dyZXNzVGV4dFNpemU6aCxjb250ZW50OnYsZ2V0Q3VycmVudENvbG9yOm19fX0pO2NvbnN0IG11PXtrZXk6MCxjbGFzczpcImVsLXByb2dyZXNzLWJhclwifSxmdT17a2V5OjAsY2xhc3M6XCJlbC1wcm9ncmVzcy1iYXJfX2lubmVyVGV4dFwifSxndT17dmlld0JveDpcIjAgMCAxMDAgMTAwXCJ9O3Z1LnJlbmRlcj1mdW5jdGlvbihlLHQsbCxvLGkscil7cmV0dXJuIGEoKSxuKFwiZGl2XCIse2NsYXNzOltcImVsLXByb2dyZXNzXCIsW1wiZWwtcHJvZ3Jlc3MtLVwiK2UudHlwZSxlLnN0YXR1cz9cImlzLVwiK2Uuc3RhdHVzOlwiXCIse1wiZWwtcHJvZ3Jlc3MtLXdpdGhvdXQtdGV4dFwiOiFlLnNob3dUZXh0LFwiZWwtcHJvZ3Jlc3MtLXRleHQtaW5zaWRlXCI6ZS50ZXh0SW5zaWRlfV1dLHJvbGU6XCJwcm9ncmVzc2JhclwiLFwiYXJpYS12YWx1ZW5vd1wiOmUucGVyY2VudGFnZSxcImFyaWEtdmFsdWVtaW5cIjpcIjBcIixcImFyaWEtdmFsdWVtYXhcIjpcIjEwMFwifSxbXCJsaW5lXCI9PT1lLnR5cGU/KGEoKSxuKFwiZGl2XCIsbXUsW3MoXCJkaXZcIix7Y2xhc3M6XCJlbC1wcm9ncmVzcy1iYXJfX291dGVyXCIsc3R5bGU6e2hlaWdodDplLnN0cm9rZVdpZHRoK1wicHhcIn19LFtzKFwiZGl2XCIse2NsYXNzOlwiZWwtcHJvZ3Jlc3MtYmFyX19pbm5lclwiLHN0eWxlOmUuYmFyU3R5bGV9LFtlLnNob3dUZXh0JiZlLnRleHRJbnNpZGU/KGEoKSxuKFwiZGl2XCIsZnUscChlLmNvbnRlbnQpLDEpKTp1KFwidi1pZlwiLCEwKV0sNCldLDQpXSkpOihhKCksbihcImRpdlwiLHtrZXk6MSxjbGFzczpcImVsLXByb2dyZXNzLWNpcmNsZVwiLHN0eWxlOntoZWlnaHQ6ZS53aWR0aCtcInB4XCIsd2lkdGg6ZS53aWR0aCtcInB4XCJ9fSxbKGEoKSxuKFwic3ZnXCIsZ3UsW3MoXCJwYXRoXCIse2NsYXNzOlwiZWwtcHJvZ3Jlc3MtY2lyY2xlX190cmFja1wiLGQ6ZS50cmFja1BhdGgsc3Ryb2tlOlwiI2U1ZTlmMlwiLFwic3Ryb2tlLXdpZHRoXCI6ZS5yZWxhdGl2ZVN0cm9rZVdpZHRoLGZpbGw6XCJub25lXCIsc3R5bGU6ZS50cmFpbFBhdGhTdHlsZX0sbnVsbCwxMixbXCJkXCIsXCJzdHJva2Utd2lkdGhcIl0pLHMoXCJwYXRoXCIse2NsYXNzOlwiZWwtcHJvZ3Jlc3MtY2lyY2xlX19wYXRoXCIsZDplLnRyYWNrUGF0aCxzdHJva2U6ZS5zdHJva2UsZmlsbDpcIm5vbmVcIixcInN0cm9rZS1saW5lY2FwXCI6ZS5zdHJva2VMaW5lY2FwLFwic3Ryb2tlLXdpZHRoXCI6ZS5wZXJjZW50YWdlP2UucmVsYXRpdmVTdHJva2VXaWR0aDowLHN0eWxlOmUuY2lyY2xlUGF0aFN0eWxlfSxudWxsLDEyLFtcImRcIixcInN0cm9rZVwiLFwic3Ryb2tlLWxpbmVjYXBcIixcInN0cm9rZS13aWR0aFwiXSldKSldLDQpKSxlLnNob3dUZXh0JiYhZS50ZXh0SW5zaWRlPyhhKCksbihcImRpdlwiLHtrZXk6MixjbGFzczpcImVsLXByb2dyZXNzX190ZXh0XCIsc3R5bGU6e2ZvbnRTaXplOmUucHJvZ3Jlc3NUZXh0U2l6ZStcInB4XCJ9fSxbZS5zdGF0dXM/KGEoKSxuKFwiaVwiLHtrZXk6MSxjbGFzczplLmljb25DbGFzc30sbnVsbCwyKSk6KGEoKSxuKEUse2tleTowfSxbYyhwKGUuY29udGVudCksMSldLDY0KSldLDQpKTp1KFwidi1pZlwiLCEwKV0sMTAsW1wiYXJpYS12YWx1ZW5vd1wiXSl9LHZ1Ll9fZmlsZT1cInBhY2thZ2VzL3Byb2dyZXNzL3NyYy9pbmRleC52dWVcIix2dS5pbnN0YWxsPWU9PntlLmNvbXBvbmVudCh2dS5uYW1lLHZ1KX07dmFyIGJ1PWUoe25hbWU6XCJFbFJhZGlvQnV0dG9uXCIscHJvcHM6e2xhYmVsOnt0eXBlOltCb29sZWFuLFN0cmluZyxOdW1iZXJdLGRlZmF1bHQ6XCJcIn0sZGlzYWJsZWQ6Qm9vbGVhbixuYW1lOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiXCJ9fSxzZXR1cChlKXtjb25zdHtpc0dyb3VwOnQscmFkaW9Hcm91cDphLGVsRm9ybUl0ZW1TaXplOm4sRUxFTUVOVDpvLGZvY3VzOmksZWxGb3JtOnJ9PVVhKCkscz1sKCgoKT0+YS5yYWRpb0dyb3VwU2l6ZXx8bi52YWx1ZXx8by5zaXplKSksdT1sKHtnZXQ6KCk9PmEubW9kZWxWYWx1ZSxzZXQoZSl7YS5jaGFuZ2VFdmVudChlKX19KSx7aXNEaXNhYmxlZDpkLHRhYkluZGV4OmN9PUdhKGUse21vZGVsOnUsZWxGb3JtOnIscmFkaW9Hcm91cDphLGlzR3JvdXA6dH0pO3JldHVybntpc0dyb3VwOnQsc2l6ZTpzLGlzRGlzYWJsZWQ6ZCx0YWJJbmRleDpjLHZhbHVlOnUsZm9jdXM6aSxhY3RpdmVTdHlsZTpsKCgoKT0+KHtiYWNrZ3JvdW5kQ29sb3I6YS5maWxsfHxcIlwiLGJvcmRlckNvbG9yOmEuZmlsbHx8XCJcIixib3hTaGFkb3c6YS5maWxsP1wiLTFweCAwIDAgMCBcIithLmZpbGw6XCJcIixjb2xvcjphLnRleHRDb2xvcnx8XCJcIn0pKSl9fX0pO2J1LnJlbmRlcj1mdW5jdGlvbihlLHQsbCxvLGksdSl7cmV0dXJuIGEoKSxuKFwibGFiZWxcIix7Y2xhc3M6W1wiZWwtcmFkaW8tYnV0dG9uXCIsW2Uuc2l6ZT9cImVsLXJhZGlvLWJ1dHRvbi0tXCIrZS5zaXplOlwiXCIse1wiaXMtYWN0aXZlXCI6ZS52YWx1ZT09PWUubGFiZWwsXCJpcy1kaXNhYmxlZFwiOmUuaXNEaXNhYmxlZCxcImlzLWZvY3VzXCI6ZS5mb2N1c31dXSxyb2xlOlwicmFkaW9cIixcImFyaWEtY2hlY2tlZFwiOmUudmFsdWU9PT1lLmxhYmVsLFwiYXJpYS1kaXNhYmxlZFwiOmUuaXNEaXNhYmxlZCx0YWJpbmRleDplLnRhYkluZGV4LG9uS2V5ZG93bjp0WzVdfHwodFs1XT0kKFQoKHQ9PmUudmFsdWU9ZS5pc0Rpc2FibGVkP2UudmFsdWU6ZS5sYWJlbCksW1wic3RvcFwiLFwicHJldmVudFwiXSksW1wic3BhY2VcIl0pKX0sW3IocyhcImlucHV0XCIse1wib25VcGRhdGU6bW9kZWxWYWx1ZVwiOnRbMV18fCh0WzFdPXQ9PmUudmFsdWU9dCksY2xhc3M6XCJlbC1yYWRpby1idXR0b25fX29yaWctcmFkaW9cIix2YWx1ZTplLmxhYmVsLHR5cGU6XCJyYWRpb1wiLG5hbWU6ZS5uYW1lLGRpc2FibGVkOmUuaXNEaXNhYmxlZCx0YWJpbmRleDpcIi0xXCIsb25Gb2N1czp0WzJdfHwodFsyXT10PT5lLmZvY3VzPSEwKSxvbkJsdXI6dFszXXx8KHRbM109dD0+ZS5mb2N1cz0hMSl9LG51bGwsNDAsW1widmFsdWVcIixcIm5hbWVcIixcImRpc2FibGVkXCJdKSxbW2osZS52YWx1ZV1dKSxzKFwic3BhblwiLHtjbGFzczpcImVsLXJhZGlvLWJ1dHRvbl9faW5uZXJcIixzdHlsZTplLnZhbHVlPT09ZS5sYWJlbD9lLmFjdGl2ZVN0eWxlOm51bGwsb25LZXlkb3duOnRbNF18fCh0WzRdPVQoKCgpPT57fSksW1wic3RvcFwiXSkpfSxbZChlLiRzbG90cyxcImRlZmF1bHRcIix7fSwoKCk9PltjKHAoZS5sYWJlbCksMSldKSldLDM2KV0sNDIsW1wiYXJpYS1jaGVja2VkXCIsXCJhcmlhLWRpc2FibGVkXCIsXCJ0YWJpbmRleFwiXSl9LGJ1Ll9fZmlsZT1cInBhY2thZ2VzL3JhZGlvL3NyYy9yYWRpby1idXR0b24udnVlXCIsYnUuaW5zdGFsbD1lPT57ZS5jb21wb25lbnQoYnUubmFtZSxidSl9O3ZhciB5dT1lKHtuYW1lOlwiRWxSYWRpb0dyb3VwXCIsY29tcG9uZW50TmFtZTpcIkVsUmFkaW9Hcm91cFwiLHByb3BzOnttb2RlbFZhbHVlOnt0eXBlOltCb29sZWFuLFN0cmluZyxOdW1iZXJdLGRlZmF1bHQ6XCJcIn0sc2l6ZTp7dHlwZTpTdHJpbmcsdmFsaWRhdG9yOkF0fSxmaWxsOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiXCJ9LHRleHRDb2xvcjp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIlwifSxkaXNhYmxlZDpCb29sZWFufSxlbWl0czpbUHQsXCJjaGFuZ2VcIl0sc2V0dXAoZSxhKXtjb25zdCBuPXQobnVsbCksbz13KFwiZWxGb3JtSXRlbVwiLHt9KSxpPWwoKCgpPT5lLnNpemV8fG8uc2l6ZSkpO3goXCJSYWRpb0dyb3VwXCIsZihPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe25hbWU6XCJFbFJhZGlvR3JvdXBcIn0sQyhlKSkse3JhZGlvR3JvdXBTaXplOmksY2hhbmdlRXZlbnQ6ZT0+e2EuZW1pdChQdCxlKSxrKCgoKT0+e2EuZW1pdChcImNoYW5nZVwiLGUpfSkpfX0pKSkseSgoKCk9PmUubW9kZWxWYWx1ZSksKGU9Pnt2YXIgdDtudWxsPT09KHQ9by5mb3JtSXRlbU1pdHQpfHx2b2lkIDA9PT10fHx0LmVtaXQoXCJlbC5mb3JtLmNoYW5nZVwiLFtlXSl9KSk7cmV0dXJuIF8oKCgpPT57Y29uc3QgZT1uLnZhbHVlLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbdHlwZT1yYWRpb11cIiksdD1lWzBdOyFBcnJheS5mcm9tKGUpLnNvbWUoKGU9PmUuY2hlY2tlZCkpJiZ0JiYodC50YWJJbmRleD0wKX0pKSx7aGFuZGxlS2V5ZG93bjplPT57Y29uc3QgdD1lLnRhcmdldCxsPVwiSU5QVVRcIj09PXQubm9kZU5hbWU/XCJbdHlwZT1yYWRpb11cIjpcIltyb2xlPXJhZGlvXVwiLGE9bi52YWx1ZS5xdWVyeVNlbGVjdG9yQWxsKGwpLG89YS5sZW5ndGgsaT1BcnJheS5mcm9tKGEpLmluZGV4T2YodCkscj1uLnZhbHVlLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbcm9sZT1yYWRpb11cIik7bGV0IHM9bnVsbDtzd2l0Y2goZS5jb2RlKXtjYXNlIGZ0LmxlZnQ6Y2FzZSBmdC51cDplLnN0b3BQcm9wYWdhdGlvbigpLGUucHJldmVudERlZmF1bHQoKSxzPTA9PT1pP28tMTppLTE7YnJlYWs7Y2FzZSBmdC5yaWdodDpjYXNlIGZ0LmRvd246ZS5zdG9wUHJvcGFnYXRpb24oKSxlLnByZXZlbnREZWZhdWx0KCkscz1pPT09by0xPzA6aSsxfW51bGwhPT1zJiYocltzXS5jbGljaygpLHJbc10uZm9jdXMoKSl9LHJhZGlvR3JvdXBTaXplOmkscmFkaW9Hcm91cDpufX19KTt5dS5yZW5kZXI9ZnVuY3Rpb24oZSx0LGwsbyxpLHIpe3JldHVybiBhKCksbihcImRpdlwiLHtyZWY6XCJyYWRpb0dyb3VwXCIsY2xhc3M6XCJlbC1yYWRpby1ncm91cFwiLHJvbGU6XCJyYWRpb2dyb3VwXCIsb25LZXlkb3duOnRbMV18fCh0WzFdPSguLi50KT0+ZS5oYW5kbGVLZXlkb3duKC4uLnQpKX0sW2QoZS4kc2xvdHMsXCJkZWZhdWx0XCIpXSw1NDQpfSx5dS5fX2ZpbGU9XCJwYWNrYWdlcy9yYWRpby9zcmMvcmFkaW8tZ3JvdXAudnVlXCIseXUuaW5zdGFsbD1lPT57ZS5jb21wb25lbnQoeXUubmFtZSx5dSl9O3ZhciBrdT1lKHtuYW1lOlwiRWxSYXRlXCIscHJvcHM6e21vZGVsVmFsdWU6e3R5cGU6TnVtYmVyLGRlZmF1bHQ6MH0sbG93VGhyZXNob2xkOnt0eXBlOk51bWJlcixkZWZhdWx0OjJ9LGhpZ2hUaHJlc2hvbGQ6e3R5cGU6TnVtYmVyLGRlZmF1bHQ6NH0sbWF4Ont0eXBlOk51bWJlcixkZWZhdWx0OjV9LGNvbG9yczp7dHlwZTpbQXJyYXksT2JqZWN0XSxkZWZhdWx0OigpPT5bXCIjRjdCQTJBXCIsXCIjRjdCQTJBXCIsXCIjRjdCQTJBXCJdfSx2b2lkQ29sb3I6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCIjQzZEMURFXCJ9LGRpc2FibGVkVm9pZENvbG9yOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiI0VGRjJGN1wifSxpY29uQ2xhc3Nlczp7dHlwZTpbQXJyYXksT2JqZWN0XSxkZWZhdWx0OigpPT5bXCJlbC1pY29uLXN0YXItb25cIixcImVsLWljb24tc3Rhci1vblwiLFwiZWwtaWNvbi1zdGFyLW9uXCJdfSx2b2lkSWNvbkNsYXNzOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiZWwtaWNvbi1zdGFyLW9mZlwifSxkaXNhYmxlZFZvaWRJY29uQ2xhc3M6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJlbC1pY29uLXN0YXItb25cIn0sZGlzYWJsZWQ6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiExfSxhbGxvd0hhbGY6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiExfSxzaG93VGV4dDp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITF9LHNob3dTY29yZTp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITF9LHRleHRDb2xvcjp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIiMxZjJkM2RcIn0sdGV4dHM6e3R5cGU6QXJyYXksZGVmYXVsdDooKT0+W1wiRXh0cmVtZWx5IGJhZFwiLFwiRGlzYXBwb2ludGVkXCIsXCJGYWlyXCIsXCJTYXRpc2ZpZWRcIixcIlN1cnByaXNlXCJdfSxzY29yZVRlbXBsYXRlOnt0eXBlOlN0cmluZyxkZWZhdWx0Olwie3ZhbHVlfVwifX0sZW1pdHM6W1widXBkYXRlOm1vZGVsVmFsdWVcIixcImNoYW5nZVwiXSxzZXR1cChlLHtlbWl0OmF9KXtjb25zdCBuPXcoXCJlbEZvcm1cIix7fSksbz10KGUubW9kZWxWYWx1ZSksaT1sKCgoKT0+ZS5kaXNhYmxlZHx8bi5kaXNhYmxlZCkpLHI9bCgoKCk9PntsZXQgdD1cIlwiO3JldHVybiBlLnNob3dTY29yZT90PWUuc2NvcmVUZW1wbGF0ZS5yZXBsYWNlKC9cXHtcXHMqdmFsdWVcXHMqXFx9LyxpLnZhbHVlP1wiXCIrZS5tb2RlbFZhbHVlOlwiXCIrby52YWx1ZSk6ZS5zaG93VGV4dCYmKHQ9ZS50ZXh0c1tNYXRoLmNlaWwoby52YWx1ZSktMV0pLHR9KSk7ZnVuY3Rpb24gcyhlLHQpe2NvbnN0IGw9T2JqZWN0LmtleXModCkuZmlsdGVyKChsPT57Y29uc3QgYT10W2xdO3JldHVybiEhRGUoYSkmJmEuZXhjbHVkZWQ/ZTxsOmU8PWx9KSkuc29ydCgoKGUsdCk9PmUtdCkpLGE9dFtsWzBdXTtyZXR1cm4gRGUoYSk/YS52YWx1ZTphfHxcIlwifWNvbnN0IHU9bCgoKCk9PjEwMCplLm1vZGVsVmFsdWUtMTAwKk1hdGguZmxvb3IoZS5tb2RlbFZhbHVlKSkpLGQ9bCgoKCk9Pk1lKGUuY29sb3JzKT97W2UubG93VGhyZXNob2xkXTplLmNvbG9yc1swXSxbZS5oaWdoVGhyZXNob2xkXTp7dmFsdWU6ZS5jb2xvcnNbMV0sZXhjbHVkZWQ6ITB9LFtlLm1heF06ZS5jb2xvcnNbMl19OmUuY29sb3JzKSksYz1sKCgoKT0+cyhvLnZhbHVlLGQudmFsdWUpKSkscD1sKCgoKT0+e2xldCB0PVwiXCI7cmV0dXJuIGkudmFsdWU/dD11LnZhbHVlK1wiJVwiOmUuYWxsb3dIYWxmJiYodD1cIjUwJVwiKSx7Y29sb3I6Yy52YWx1ZSx3aWR0aDp0fX0pKSxoPWwoKCgpPT5NZShlLmljb25DbGFzc2VzKT97W2UubG93VGhyZXNob2xkXTplLmljb25DbGFzc2VzWzBdLFtlLmhpZ2hUaHJlc2hvbGRdOnt2YWx1ZTplLmljb25DbGFzc2VzWzFdLGV4Y2x1ZGVkOiEwfSxbZS5tYXhdOmUuaWNvbkNsYXNzZXNbMl19OmUuaWNvbkNsYXNzZXMpKSx2PWwoKCgpPT5zKGUubW9kZWxWYWx1ZSxoLnZhbHVlKSkpLG09bCgoKCk9PmkudmFsdWU/ZS5kaXNhYmxlZFZvaWRJY29uQ2xhc3M6ZS52b2lkSWNvbkNsYXNzKSksZj1sKCgoKT0+cyhvLnZhbHVlLGgudmFsdWUpKSksZz1sKCgoKT0+e2xldCB0PUFycmF5KGUubWF4KSxsPW8udmFsdWU7cmV0dXJuIHQuZmlsbChmLnZhbHVlLDAsbCksdC5maWxsKG0udmFsdWUsbCxlLm1heCksdH0pKSxiPXQoITApO3koKCgpPT5lLm1vZGVsVmFsdWUpLCh0PT57by52YWx1ZT10LGIudmFsdWU9ZS5tb2RlbFZhbHVlIT09TWF0aC5mbG9vcihlLm1vZGVsVmFsdWUpfSkpO2NvbnN0IGs9dCgtMSk7cmV0dXJuIGUubW9kZWxWYWx1ZXx8YShcInVwZGF0ZTptb2RlbFZhbHVlXCIsMCkse2hvdmVySW5kZXg6ayxjdXJyZW50VmFsdWU6byxyYXRlRGlzYWJsZWQ6aSx0ZXh0OnIsZGVjaW1hbFN0eWxlOnAsZGVjaW1hbEljb25DbGFzczp2LGNsYXNzZXM6ZyxzaG93RGVjaW1hbEljb246ZnVuY3Rpb24odCl7bGV0IGw9aS52YWx1ZSYmdS52YWx1ZT4wJiZ0LTE8ZS5tb2RlbFZhbHVlJiZ0PmUubW9kZWxWYWx1ZSxhPWUuYWxsb3dIYWxmJiZiLnZhbHVlJiZ0LS41PD1vLnZhbHVlJiZ0Pm8udmFsdWU7cmV0dXJuIGx8fGF9LGdldEljb25TdHlsZTpmdW5jdGlvbih0KXtjb25zdCBsPWkudmFsdWU/ZS5kaXNhYmxlZFZvaWRDb2xvcjplLnZvaWRDb2xvcjtyZXR1cm57Y29sb3I6dDw9by52YWx1ZT9jLnZhbHVlOmx9fSxzZWxlY3RWYWx1ZTpmdW5jdGlvbih0KXtpLnZhbHVlfHwoZS5hbGxvd0hhbGYmJmIudmFsdWU/KGEoXCJ1cGRhdGU6bW9kZWxWYWx1ZVwiLG8udmFsdWUpLGEoXCJjaGFuZ2VcIix0aGlzLmN1cnJlbnRWYWx1ZSkpOihhKFwidXBkYXRlOm1vZGVsVmFsdWVcIix0KSxhKFwiY2hhbmdlXCIsdCkpKX0saGFuZGxlS2V5OmZ1bmN0aW9uKHQpe2lmKGkudmFsdWUpcmV0dXJuO2xldCBsPW8udmFsdWU7Y29uc3Qgbj10LmNvZGU7cmV0dXJuIG49PT1mdC51cHx8bj09PWZ0LnJpZ2h0PyhlLmFsbG93SGFsZj9sKz0uNTpsKz0xLHQuc3RvcFByb3BhZ2F0aW9uKCksdC5wcmV2ZW50RGVmYXVsdCgpKTpuIT09ZnQubGVmdCYmbiE9PWZ0LmRvd258fChlLmFsbG93SGFsZj9sLT0uNTpsLT0xLHQuc3RvcFByb3BhZ2F0aW9uKCksdC5wcmV2ZW50RGVmYXVsdCgpKSxsPWw8MD8wOmwsbD1sPmUubWF4P2UubWF4OmwsYShcInVwZGF0ZTptb2RlbFZhbHVlXCIsbCksYShcImNoYW5nZVwiLGwpLGx9LHNldEN1cnJlbnRWYWx1ZTpmdW5jdGlvbih0LGwpe2lmKCFpLnZhbHVlKXtpZihlLmFsbG93SGFsZil7bGV0IGU9bC50YXJnZXQ7bnQoZSxcImVsLXJhdGVfX2l0ZW1cIikmJihlPWUucXVlcnlTZWxlY3RvcihcIi5lbC1yYXRlX19pY29uXCIpKSxudChlLFwiZWwtcmF0ZV9fZGVjaW1hbFwiKSYmKGU9ZS5wYXJlbnROb2RlKSxiLnZhbHVlPTIqbC5vZmZzZXRYPD1lLmNsaWVudFdpZHRoLG8udmFsdWU9Yi52YWx1ZT90LS41OnR9ZWxzZSBvLnZhbHVlPXQ7ay52YWx1ZT10fX0scmVzZXRDdXJyZW50VmFsdWU6ZnVuY3Rpb24oKXtpLnZhbHVlfHwoZS5hbGxvd0hhbGYmJihiLnZhbHVlPWUubW9kZWxWYWx1ZSE9PU1hdGguZmxvb3IoZS5tb2RlbFZhbHVlKSksby52YWx1ZT1lLm1vZGVsVmFsdWUsay52YWx1ZT0tMSl9fX19KTtrdS5yZW5kZXI9ZnVuY3Rpb24oZSx0LGwsbyxpLHIpe3JldHVybiBhKCksbihcImRpdlwiLHtjbGFzczpcImVsLXJhdGVcIixyb2xlOlwic2xpZGVyXCIsXCJhcmlhLXZhbHVlbm93XCI6ZS5jdXJyZW50VmFsdWUsXCJhcmlhLXZhbHVldGV4dFwiOmUudGV4dCxcImFyaWEtdmFsdWVtaW5cIjpcIjBcIixcImFyaWEtdmFsdWVtYXhcIjplLm1heCx0YWJpbmRleDpcIjBcIixvbktleWRvd246dFsyXXx8KHRbMl09KC4uLnQpPT5lLmhhbmRsZUtleSguLi50KSl9LFsoYSghMCksbihFLG51bGwsSChlLm1heCwoKGwsbyk9PihhKCksbihcInNwYW5cIix7a2V5Om8sY2xhc3M6XCJlbC1yYXRlX19pdGVtXCIsc3R5bGU6e2N1cnNvcjplLnJhdGVEaXNhYmxlZD9cImF1dG9cIjpcInBvaW50ZXJcIn0sb25Nb3VzZW1vdmU6dD0+ZS5zZXRDdXJyZW50VmFsdWUobCx0KSxvbk1vdXNlbGVhdmU6dFsxXXx8KHRbMV09KC4uLnQpPT5lLnJlc2V0Q3VycmVudFZhbHVlKC4uLnQpKSxvbkNsaWNrOnQ9PmUuc2VsZWN0VmFsdWUobCl9LFtzKFwiaVwiLHtjbGFzczpbW2UuY2xhc3Nlc1tsLTFdLHtob3ZlcjplLmhvdmVySW5kZXg9PT1sfV0sXCJlbC1yYXRlX19pY29uXCJdLHN0eWxlOmUuZ2V0SWNvblN0eWxlKGwpfSxbZS5zaG93RGVjaW1hbEljb24obCk/KGEoKSxuKFwiaVwiLHtrZXk6MCxjbGFzczpbZS5kZWNpbWFsSWNvbkNsYXNzLFwiZWwtcmF0ZV9fZGVjaW1hbFwiXSxzdHlsZTplLmRlY2ltYWxTdHlsZX0sbnVsbCw2KSk6dShcInYtaWZcIiwhMCldLDYpXSw0NCxbXCJvbk1vdXNlbW92ZVwiLFwib25DbGlja1wiXSkpKSksMTI4KSksZS5zaG93VGV4dHx8ZS5zaG93U2NvcmU/KGEoKSxuKFwic3BhblwiLHtrZXk6MCxjbGFzczpcImVsLXJhdGVfX3RleHRcIixzdHlsZTp7Y29sb3I6ZS50ZXh0Q29sb3J9fSxwKGUudGV4dCksNSkpOnUoXCJ2LWlmXCIsITApXSw0MCxbXCJhcmlhLXZhbHVlbm93XCIsXCJhcmlhLXZhbHVldGV4dFwiLFwiYXJpYS12YWx1ZW1heFwiXSl9LGt1Ll9fZmlsZT1cInBhY2thZ2VzL3JhdGUvc3JjL2luZGV4LnZ1ZVwiLGt1Lmluc3RhbGw9ZT0+e2UuY29tcG9uZW50KGt1Lm5hbWUsa3UpfTt2YXIgQ3U9ZSh7bmFtZTpcIkVsUm93XCIscHJvcHM6e3RhZzp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcImRpdlwifSxndXR0ZXI6e3R5cGU6TnVtYmVyLGRlZmF1bHQ6MH0sdHlwZTp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIlwifSxqdXN0aWZ5Ont0eXBlOlN0cmluZyxkZWZhdWx0Olwic3RhcnRcIn0sYWxpZ246e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJ0b3BcIn19LHNldHVwKGUse3Nsb3RzOnR9KXt4KFwiRWxSb3dcIixlLmd1dHRlcik7Y29uc3QgYT1sKCgoKT0+e2NvbnN0IHQ9e2Rpc3BsYXk6XCJmbGV4XCIsZmxleFdyYXA6XCJ3cmFwXCIsbWFyZ2luTGVmdDpcIlwiLG1hcmdpblJpZ2h0OlwiXCJ9O3JldHVybiBlLmd1dHRlciYmKHQubWFyZ2luTGVmdD1gLSR7ZS5ndXR0ZXIvMn1weGAsdC5tYXJnaW5SaWdodD10Lm1hcmdpbkxlZnQpLHR9KSk7cmV0dXJuKCk9Pnt2YXIgbDtyZXR1cm4gRChlLnRhZyx7Y2xhc3M6W1wiZWwtcm93XCIsXCJzdGFydFwiIT09ZS5qdXN0aWZ5P1wiaXMtanVzdGlmeS1cIitlLmp1c3RpZnk6XCJcIixcInRvcFwiIT09ZS5hbGlnbj9cImlzLWFsaWduLVwiK2UuYWxpZ246XCJcIixcImZsZXhcIj09PWUudHlwZT9cImVsLXJvdy0tZmxleFwiOlwiXCJdLHN0eWxlOmEudmFsdWV9LG51bGw9PT0obD10LmRlZmF1bHQpfHx2b2lkIDA9PT1sP3ZvaWQgMDpsLmNhbGwodCkpfX19KTtDdS5pbnN0YWxsPWU9PntlLmNvbXBvbmVudChDdS5uYW1lLEN1KX07Y29uc3QgeHU9KGUsYSxuKT0+e2NvbnN0e2Rpc2FibGVkOm8sbWluOmksbWF4OnIsc3RlcDpzLHNob3dUb29sdGlwOnUscHJlY2lzaW9uOmQsc2xpZGVyU2l6ZTpjLGZvcm1hdFRvb2x0aXA6cCxlbWl0Q2hhbmdlOmgscmVzZXRTaXplOnYsdXBkYXRlRHJhZ2dpbmc6bX09dyhcIlNsaWRlclByb3ZpZGVyXCIpLHt0b29sdGlwOmYsdG9vbHRpcFZpc2libGU6Zyxmb3JtYXRWYWx1ZTpiLGRpc3BsYXlUb29sdGlwOkMsaGlkZVRvb2x0aXA6eH09KChlLGEsbik9Pntjb25zdCBvPXQobnVsbCksaT10KCExKSxyPWwoKCgpPT5hLnZhbHVlIGluc3RhbmNlb2YgRnVuY3Rpb24pKSxzPWwoKCgpPT5yLnZhbHVlJiZhLnZhbHVlKGUubW9kZWxWYWx1ZSl8fGUubW9kZWxWYWx1ZSkpO3JldHVybnt0b29sdGlwOm8sdG9vbHRpcFZpc2libGU6aSxmb3JtYXRWYWx1ZTpzLGRpc3BsYXlUb29sdGlwOigpPT57bi52YWx1ZSYmKGkudmFsdWU9ITApfSxoaWRlVG9vbHRpcDooKT0+e24udmFsdWUmJihpLnZhbHVlPSExKX19fSkoZSxwLHUpLF89bCgoKCk9PihlLm1vZGVsVmFsdWUtaS52YWx1ZSkvKHIudmFsdWUtaS52YWx1ZSkqMTAwK1wiJVwiKSksUz1sKCgoKT0+ZS52ZXJ0aWNhbD97Ym90dG9tOl8udmFsdWV9OntsZWZ0Ol8udmFsdWV9KSksRT1lPT57bGV0IHQsbDtyZXR1cm5cInRvdWNoc3RhcnRcIj09PWUudHlwZT8obD1lLnRvdWNoZXNbMF0uY2xpZW50WSx0PWUudG91Y2hlc1swXS5jbGllbnRYKToobD1lLmNsaWVudFksdD1lLmNsaWVudFgpLHtjbGllbnRYOnQsY2xpZW50WTpsfX0sTT10PT57YS5kcmFnZ2luZz0hMCxhLmlzQ2xpY2s9ITA7Y29uc3R7Y2xpZW50WDpsLGNsaWVudFk6bn09RSh0KTtlLnZlcnRpY2FsP2Euc3RhcnRZPW46YS5zdGFydFg9bCxhLnN0YXJ0UG9zaXRpb249cGFyc2VGbG9hdChfLnZhbHVlKSxhLm5ld1Bvc2l0aW9uPWEuc3RhcnRQb3NpdGlvbn0sVD10PT57aWYoYS5kcmFnZ2luZyl7bGV0IGw7YS5pc0NsaWNrPSExLEMoKSx2KCk7Y29uc3R7Y2xpZW50WDpuLGNsaWVudFk6b309RSh0KTtlLnZlcnRpY2FsPyhhLmN1cnJlbnRZPW8sbD0oYS5zdGFydFktYS5jdXJyZW50WSkvYy52YWx1ZSoxMDApOihhLmN1cnJlbnRYPW4sbD0oYS5jdXJyZW50WC1hLnN0YXJ0WCkvYy52YWx1ZSoxMDApLGEubmV3UG9zaXRpb249YS5zdGFydFBvc2l0aW9uK2wsRChhLm5ld1Bvc2l0aW9uKX19LE49KCk9PnthLmRyYWdnaW5nJiYoc2V0VGltZW91dCgoKCk9PnthLmRyYWdnaW5nPSExLHgoKSxhLmlzQ2xpY2t8fChEKGEubmV3UG9zaXRpb24pLGgoKSl9KSwwKSxhdCh3aW5kb3csXCJtb3VzZW1vdmVcIixUKSxhdCh3aW5kb3csXCJ0b3VjaG1vdmVcIixUKSxhdCh3aW5kb3csXCJtb3VzZXVwXCIsTiksYXQod2luZG93LFwidG91Y2hlbmRcIixOKSxhdCh3aW5kb3csXCJjb250ZXh0bWVudVwiLE4pKX0sRD10PT5ucih2b2lkIDAsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24qKCl7aWYobnVsbD09PXR8fGlzTmFOKHQpKXJldHVybjt0PDA/dD0wOnQ+MTAwJiYodD0xMDApO2NvbnN0IGw9MTAwLygoci52YWx1ZS1pLnZhbHVlKS9zLnZhbHVlKTtsZXQgbz1NYXRoLnJvdW5kKHQvbCkqbCooci52YWx1ZS1pLnZhbHVlKSouMDEraS52YWx1ZTtvPXBhcnNlRmxvYXQoby50b0ZpeGVkKGQudmFsdWUpKSxuKFB0LG8pLGEuZHJhZ2dpbmd8fGUubW9kZWxWYWx1ZT09PWEub2xkVmFsdWV8fChhLm9sZFZhbHVlPWUubW9kZWxWYWx1ZSkseWllbGQgaygpLGEuZHJhZ2dpbmcmJkMoKSxmLnZhbHVlLnVwZGF0ZVBvcHBlcigpfSkpO3JldHVybiB5KCgoKT0+YS5kcmFnZ2luZyksKGU9PnttKGUpfSkpLHt0b29sdGlwOmYsdG9vbHRpcFZpc2libGU6ZyxzaG93VG9vbHRpcDp1LHdyYXBwZXJTdHlsZTpTLGZvcm1hdFZhbHVlOmIsaGFuZGxlTW91c2VFbnRlcjooKT0+e2EuaG92ZXJpbmc9ITAsQygpfSxoYW5kbGVNb3VzZUxlYXZlOigpPT57YS5ob3ZlcmluZz0hMSx4KCl9LG9uQnV0dG9uRG93bjplPT57by52YWx1ZXx8KGUucHJldmVudERlZmF1bHQoKSxNKGUpLGx0KHdpbmRvdyxcIm1vdXNlbW92ZVwiLFQpLGx0KHdpbmRvdyxcInRvdWNobW92ZVwiLFQpLGx0KHdpbmRvdyxcIm1vdXNldXBcIixOKSxsdCh3aW5kb3csXCJ0b3VjaGVuZFwiLE4pLGx0KHdpbmRvdyxcImNvbnRleHRtZW51XCIsTikpfSxvbkxlZnRLZXlEb3duOigpPT57by52YWx1ZXx8KGEubmV3UG9zaXRpb249cGFyc2VGbG9hdChfLnZhbHVlKS1zLnZhbHVlLyhyLnZhbHVlLWkudmFsdWUpKjEwMCxEKGEubmV3UG9zaXRpb24pLGgoKSl9LG9uUmlnaHRLZXlEb3duOigpPT57by52YWx1ZXx8KGEubmV3UG9zaXRpb249cGFyc2VGbG9hdChfLnZhbHVlKStzLnZhbHVlLyhyLnZhbHVlLWkudmFsdWUpKjEwMCxEKGEubmV3UG9zaXRpb24pLGgoKSl9LHNldFBvc2l0aW9uOkR9fTt2YXIgd3U9ZSh7bmFtZTpcIkVsU2xpZGVyQnV0dG9uXCIsY29tcG9uZW50czp7RWxUb29sdGlwOkRyfSxwcm9wczp7bW9kZWxWYWx1ZTp7dHlwZTpOdW1iZXIsZGVmYXVsdDowfSx2ZXJ0aWNhbDp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITF9LHRvb2x0aXBDbGFzczp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIlwifX0sZW1pdHM6W1B0XSxzZXR1cChlLHtlbWl0OnR9KXtjb25zdCBsPWYoe2hvdmVyaW5nOiExLGRyYWdnaW5nOiExLGlzQ2xpY2s6ITEsc3RhcnRYOjAsY3VycmVudFg6MCxzdGFydFk6MCxjdXJyZW50WTowLHN0YXJ0UG9zaXRpb246MCxuZXdQb3NpdGlvbjowLG9sZFZhbHVlOmUubW9kZWxWYWx1ZX0pLHt0b29sdGlwOmEsc2hvd1Rvb2x0aXA6bix0b29sdGlwVmlzaWJsZTpvLHdyYXBwZXJTdHlsZTppLGZvcm1hdFZhbHVlOnIsaGFuZGxlTW91c2VFbnRlcjpzLGhhbmRsZU1vdXNlTGVhdmU6dSxvbkJ1dHRvbkRvd246ZCxvbkxlZnRLZXlEb3duOmMsb25SaWdodEtleURvd246cCxzZXRQb3NpdGlvbjpofT14dShlLGwsdCkse2hvdmVyaW5nOnYsZHJhZ2dpbmc6bX09QyhsKTtyZXR1cm57dG9vbHRpcDphLHRvb2x0aXBWaXNpYmxlOm8sc2hvd1Rvb2x0aXA6bix3cmFwcGVyU3R5bGU6aSxmb3JtYXRWYWx1ZTpyLGhhbmRsZU1vdXNlRW50ZXI6cyxoYW5kbGVNb3VzZUxlYXZlOnUsb25CdXR0b25Eb3duOmQsb25MZWZ0S2V5RG93bjpjLG9uUmlnaHRLZXlEb3duOnAsc2V0UG9zaXRpb246aCxob3ZlcmluZzp2LGRyYWdnaW5nOm19fX0pO3d1LnJlbmRlcj1mdW5jdGlvbihlLHQsbCxvLHIsdSl7Y29uc3QgZD1QKFwiZWwtdG9vbHRpcFwiKTtyZXR1cm4gYSgpLG4oXCJkaXZcIix7cmVmOlwiYnV0dG9uXCIsY2xhc3M6W1wiZWwtc2xpZGVyX19idXR0b24td3JhcHBlclwiLHtob3ZlcjplLmhvdmVyaW5nLGRyYWdnaW5nOmUuZHJhZ2dpbmd9XSxzdHlsZTplLndyYXBwZXJTdHlsZSx0YWJpbmRleDpcIjBcIixvbk1vdXNlZW50ZXI6dFsyXXx8KHRbMl09KC4uLnQpPT5lLmhhbmRsZU1vdXNlRW50ZXIoLi4udCkpLG9uTW91c2VsZWF2ZTp0WzNdfHwodFszXT0oLi4udCk9PmUuaGFuZGxlTW91c2VMZWF2ZSguLi50KSksb25Nb3VzZWRvd246dFs0XXx8KHRbNF09KC4uLnQpPT5lLm9uQnV0dG9uRG93biguLi50KSksb25Ub3VjaHN0YXJ0OnRbNV18fCh0WzVdPSguLi50KT0+ZS5vbkJ1dHRvbkRvd24oLi4udCkpLG9uRm9jdXM6dFs2XXx8KHRbNl09KC4uLnQpPT5lLmhhbmRsZU1vdXNlRW50ZXIoLi4udCkpLG9uQmx1cjp0WzddfHwodFs3XT0oLi4udCk9PmUuaGFuZGxlTW91c2VMZWF2ZSguLi50KSksb25LZXlkb3duOlt0WzhdfHwodFs4XT0kKCgoLi4udCk9PmUub25MZWZ0S2V5RG93biguLi50KSksW1wibGVmdFwiXSkpLHRbOV18fCh0WzldPSQoKCguLi50KT0+ZS5vblJpZ2h0S2V5RG93biguLi50KSksW1wicmlnaHRcIl0pKSx0WzEwXXx8KHRbMTBdPSQoVCgoKC4uLnQpPT5lLm9uTGVmdEtleURvd24oLi4udCkpLFtcInByZXZlbnRcIl0pLFtcImRvd25cIl0pKSx0WzExXXx8KHRbMTFdPSQoVCgoKC4uLnQpPT5lLm9uUmlnaHRLZXlEb3duKC4uLnQpKSxbXCJwcmV2ZW50XCJdKSxbXCJ1cFwiXSkpXX0sW3MoZCx7cmVmOlwidG9vbHRpcFwiLG1vZGVsVmFsdWU6ZS50b29sdGlwVmlzaWJsZSxcIm9uVXBkYXRlOm1vZGVsVmFsdWVcIjp0WzFdfHwodFsxXT10PT5lLnRvb2x0aXBWaXNpYmxlPXQpLHBsYWNlbWVudDpcInRvcFwiLFwicG9wcGVyLWNsYXNzXCI6ZS50b29sdGlwQ2xhc3MsZGlzYWJsZWQ6IWUuc2hvd1Rvb2x0aXAsbWFudWFsOlwiXCJ9LHtjb250ZW50OmkoKCgpPT5bcyhcInNwYW5cIixudWxsLHAoZS5mb3JtYXRWYWx1ZSksMSldKSksZGVmYXVsdDppKCgoKT0+W3MoXCJkaXZcIix7Y2xhc3M6W1wiZWwtc2xpZGVyX19idXR0b25cIix7aG92ZXI6ZS5ob3ZlcmluZyxkcmFnZ2luZzplLmRyYWdnaW5nfV19LG51bGwsMildKSksXzoxfSw4LFtcIm1vZGVsVmFsdWVcIixcInBvcHBlci1jbGFzc1wiLFwiZGlzYWJsZWRcIl0pXSwzOCl9LHd1Ll9fZmlsZT1cInBhY2thZ2VzL3NsaWRlci9zcmMvYnV0dG9uLnZ1ZVwiO3ZhciBfdT1lKHtuYW1lOlwiRWxNYXJrZXJcIixwcm9wczp7bWFyazp7dHlwZTpbU3RyaW5nLE9iamVjdF0sZGVmYXVsdDooKT0+e319fSxzZXR1cDplPT4oe2xhYmVsOmwoKCgpPT5cInN0cmluZ1wiPT10eXBlb2YgZS5tYXJrP2UubWFyazplLm1hcmsubGFiZWwpKX0pLHJlbmRlcigpe3ZhciBlO3JldHVybiBEKFwiZGl2XCIse2NsYXNzOlwiZWwtc2xpZGVyX19tYXJrcy10ZXh0XCIsc3R5bGU6bnVsbD09PShlPXRoaXMubWFyayl8fHZvaWQgMD09PWU/dm9pZCAwOmUuc3R5bGV9LHRoaXMubGFiZWwpfX0pO191Ll9fZmlsZT1cInBhY2thZ2VzL3NsaWRlci9zcmMvbWFya2VyLnZ1ZVwiO3ZhciBTdT1lKHtuYW1lOlwiRWxTbGlkZXJcIixjb21wb25lbnRzOntFbElucHV0TnVtYmVyOnByLFNsaWRlckJ1dHRvbjp3dSxTbGlkZXJNYXJrZXI6X3V9LHByb3BzOnttb2RlbFZhbHVlOnt0eXBlOltOdW1iZXIsQXJyYXldLGRlZmF1bHQ6MH0sbWluOnt0eXBlOk51bWJlcixkZWZhdWx0OjB9LG1heDp7dHlwZTpOdW1iZXIsZGVmYXVsdDoxMDB9LHN0ZXA6e3R5cGU6TnVtYmVyLGRlZmF1bHQ6MX0sc2hvd0lucHV0Ont0eXBlOkJvb2xlYW4sZGVmYXVsdDohMX0sc2hvd0lucHV0Q29udHJvbHM6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiEwfSxpbnB1dFNpemU6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJzbWFsbFwifSxzaG93U3RvcHM6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiExfSxzaG93VG9vbHRpcDp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITB9LGZvcm1hdFRvb2x0aXA6e3R5cGU6RnVuY3Rpb24sZGVmYXVsdDp2b2lkIDB9LGRpc2FibGVkOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMX0scmFuZ2U6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiExfSx2ZXJ0aWNhbDp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITF9LGhlaWdodDp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIlwifSxkZWJvdW5jZTp7dHlwZTpOdW1iZXIsZGVmYXVsdDozMDB9LGxhYmVsOnt0eXBlOlN0cmluZyxkZWZhdWx0OnZvaWQgMH0sdG9vbHRpcENsYXNzOnt0eXBlOlN0cmluZyxkZWZhdWx0OnZvaWQgMH0sbWFya3M6T2JqZWN0fSxlbWl0czpbUHQsXCJjaGFuZ2VcIl0sc2V0dXAoZSx7ZW1pdDphfSl7Y29uc3Qgbj1mKHtmaXJzdFZhbHVlOm51bGwsc2Vjb25kVmFsdWU6bnVsbCxvbGRWYWx1ZTpudWxsLGRyYWdnaW5nOiExLHNsaWRlclNpemU6MX0pLHtlbEZvcm1JdGVtOm8sc2xpZGVyOmksZmlyc3RCdXR0b246cixzZWNvbmRCdXR0b246cyxzbGlkZXJEaXNhYmxlZDp1LG1pblZhbHVlOmQsbWF4VmFsdWU6YyxydW53YXlTdHlsZTpwLGJhclN0eWxlOmgscmVzZXRTaXplOnYsZW1pdENoYW5nZTptLG9uU2xpZGVyQ2xpY2s6Z309KChlLGEsbik9Pntjb25zdCBvPXcoXCJlbEZvcm1cIix7fSksaT13KFwiZWxGb3JtSXRlbVwiLHt9KSxyPXQobnVsbCkscz10KG51bGwpLHU9dChudWxsKSxkPXtmaXJzdEJ1dHRvbjpzLHNlY29uZEJ1dHRvbjp1fSxjPWwoKCgpPT5lLmRpc2FibGVkfHxvLmRpc2FibGVkfHwhMSkpLHA9bCgoKCk9Pk1hdGgubWluKGEuZmlyc3RWYWx1ZSxhLnNlY29uZFZhbHVlKSkpLGg9bCgoKCk9Pk1hdGgubWF4KGEuZmlyc3RWYWx1ZSxhLnNlY29uZFZhbHVlKSkpLHY9bCgoKCk9PmUucmFuZ2U/MTAwKihoLnZhbHVlLXAudmFsdWUpLyhlLm1heC1lLm1pbikrXCIlXCI6MTAwKihhLmZpcnN0VmFsdWUtZS5taW4pLyhlLm1heC1lLm1pbikrXCIlXCIpKSxtPWwoKCgpPT5lLnJhbmdlPzEwMCoocC52YWx1ZS1lLm1pbikvKGUubWF4LWUubWluKStcIiVcIjpcIjAlXCIpKSxmPWwoKCgpPT5lLnZlcnRpY2FsP3toZWlnaHQ6ZS5oZWlnaHR9Ont9KSksZz1sKCgoKT0+ZS52ZXJ0aWNhbD97aGVpZ2h0OnYudmFsdWUsYm90dG9tOm0udmFsdWV9Ont3aWR0aDp2LnZhbHVlLGxlZnQ6bS52YWx1ZX0pKSxiPSgpPT57ci52YWx1ZSYmKGEuc2xpZGVyU2l6ZT1yLnZhbHVlW1wiY2xpZW50XCIrKGUudmVydGljYWw/XCJIZWlnaHRcIjpcIldpZHRoXCIpXSl9LHk9dD0+e2NvbnN0IGw9ZS5taW4rdCooZS5tYXgtZS5taW4pLzEwMDtpZighZS5yYW5nZSlyZXR1cm4gdm9pZCBzLnZhbHVlLnNldFBvc2l0aW9uKHQpO2xldCBuO249TWF0aC5hYnMocC52YWx1ZS1sKTxNYXRoLmFicyhoLnZhbHVlLWwpP2EuZmlyc3RWYWx1ZTxhLnNlY29uZFZhbHVlP1wiZmlyc3RCdXR0b25cIjpcInNlY29uZEJ1dHRvblwiOmEuZmlyc3RWYWx1ZT5hLnNlY29uZFZhbHVlP1wiZmlyc3RCdXR0b25cIjpcInNlY29uZEJ1dHRvblwiLGRbbl0udmFsdWUuc2V0UG9zaXRpb24odCl9LEM9KCk9Pm5yKHZvaWQgMCx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbiooKXt5aWVsZCBrKCksbihcImNoYW5nZVwiLGUucmFuZ2U/W3AudmFsdWUsaC52YWx1ZV06ZS5tb2RlbFZhbHVlKX0pKTtyZXR1cm57ZWxGb3JtSXRlbTppLHNsaWRlcjpyLGZpcnN0QnV0dG9uOnMsc2Vjb25kQnV0dG9uOnUsc2xpZGVyRGlzYWJsZWQ6YyxtaW5WYWx1ZTpwLG1heFZhbHVlOmgscnVud2F5U3R5bGU6ZixiYXJTdHlsZTpnLHJlc2V0U2l6ZTpiLHNldFBvc2l0aW9uOnksZW1pdENoYW5nZTpDLG9uU2xpZGVyQ2xpY2s6dD0+e2lmKCFjLnZhbHVlJiYhYS5kcmFnZ2luZyl7aWYoYigpLGUudmVydGljYWwpe2NvbnN0IGU9ci52YWx1ZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5ib3R0b207eSgoZS10LmNsaWVudFkpL2Euc2xpZGVyU2l6ZSoxMDApfWVsc2V7Y29uc3QgZT1yLnZhbHVlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQ7eSgodC5jbGllbnRYLWUpL2Euc2xpZGVyU2l6ZSoxMDApfUMoKX19fX0pKGUsbixhKSx7c3RvcHM6YixnZXRTdG9wU3R5bGU6eX09KChlLHQsYSxuKT0+KHtzdG9wczpsKCgoKT0+e2lmKCFlLnNob3dTdG9wc3x8ZS5taW4+ZS5tYXgpcmV0dXJuW107aWYoMD09PWUuc3RlcClyZXR1cm5cInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZjb25zb2xlLndhcm4oXCJbRWxlbWVudCBXYXJuXVtTbGlkZXJdc3RlcCBzaG91bGQgbm90IGJlIDAuXCIpLFtdO2NvbnN0IGw9KGUubWF4LWUubWluKS9lLnN0ZXAsbz0xMDAqZS5zdGVwLyhlLm1heC1lLm1pbiksaT1BcnJheS5mcm9tKHtsZW5ndGg6bC0xfSkubWFwKCgoZSx0KT0+KHQrMSkqbykpO3JldHVybiBlLnJhbmdlP2kuZmlsdGVyKCh0PT50PDEwMCooYS52YWx1ZS1lLm1pbikvKGUubWF4LWUubWluKXx8dD4xMDAqKG4udmFsdWUtZS5taW4pLyhlLm1heC1lLm1pbikpKTppLmZpbHRlcigobD0+bD4xMDAqKHQuZmlyc3RWYWx1ZS1lLm1pbikvKGUubWF4LWUubWluKSkpfSkpLGdldFN0b3BTdHlsZTp0PT5lLnZlcnRpY2FsP3tib3R0b206dCtcIiVcIn06e2xlZnQ6dCtcIiVcIn19KSkoZSxuLGQsYyksXz0oZT0+bCgoKCk9PmUubWFya3M/T2JqZWN0LmtleXMoZS5tYXJrcykubWFwKHBhcnNlRmxvYXQpLnNvcnQoKChlLHQpPT5lLXQpKS5maWx0ZXIoKHQ9PnQ8PWUubWF4JiZ0Pj1lLm1pbikpLm1hcCgodD0+KHtwb2ludDp0LHBvc2l0aW9uOjEwMCoodC1lLm1pbikvKGUubWF4LWUubWluKSxtYXJrOmUubWFya3NbdF19KSkpOltdKSkpKGUpO0V1KGUsbixkLGMsYSxvKTtjb25zdCBTPWwoKCgpPT57bGV0IHQ9W2UubWluLGUubWF4LGUuc3RlcF0ubWFwKChlPT57bGV0IHQ9KFwiXCIrZSkuc3BsaXQoXCIuXCIpWzFdO3JldHVybiB0P3QubGVuZ3RoOjB9KSk7cmV0dXJuIE1hdGgubWF4LmFwcGx5KG51bGwsdCl9KSkse3NsaWRlcldyYXBwZXI6RX09TXUoZSxuLHYpLHtmaXJzdFZhbHVlOk0sc2Vjb25kVmFsdWU6VCxvbGRWYWx1ZTpOLGRyYWdnaW5nOkQsc2xpZGVyU2l6ZTpPfT1DKG4pO3JldHVybiB4KFwiU2xpZGVyUHJvdmlkZXJcIixPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sQyhlKSkse3NsaWRlclNpemU6TyxkaXNhYmxlZDp1LHByZWNpc2lvbjpTLGVtaXRDaGFuZ2U6bSxyZXNldFNpemU6dix1cGRhdGVEcmFnZ2luZzplPT57bi5kcmFnZ2luZz1lfX0pKSx7Zmlyc3RWYWx1ZTpNLHNlY29uZFZhbHVlOlQsb2xkVmFsdWU6TixkcmFnZ2luZzpELHNsaWRlclNpemU6TyxzbGlkZXI6aSxmaXJzdEJ1dHRvbjpyLHNlY29uZEJ1dHRvbjpzLHNsaWRlckRpc2FibGVkOnUscnVud2F5U3R5bGU6cCxiYXJTdHlsZTpoLGVtaXRDaGFuZ2U6bSxvblNsaWRlckNsaWNrOmcsZ2V0U3RvcFN0eWxlOnksc3RvcHM6YixtYXJrTGlzdDpfLHNsaWRlcldyYXBwZXI6RX19fSk7Y29uc3QgRXU9KGUsdCxsLGEsbixvKT0+e2NvbnN0IGk9ZT0+e24oUHQsZSl9LHI9KCk9PmUucmFuZ2U/IVtsLnZhbHVlLGEudmFsdWVdLmV2ZXJ5KCgoZSxsKT0+ZT09PXQub2xkVmFsdWVbbF0pKTplLm1vZGVsVmFsdWUhPT10Lm9sZFZhbHVlLHM9KCk9Pnt2YXIgbixzO2lmKGUubWluPmUubWF4KXJldHVybiB2b2lkIG10KFwiU2xpZGVyXCIsXCJtaW4gc2hvdWxkIG5vdCBiZSBncmVhdGVyIHRoYW4gbWF4LlwiKTtjb25zdCB1PWUubW9kZWxWYWx1ZTtlLnJhbmdlJiZBcnJheS5pc0FycmF5KHUpP3VbMV08ZS5taW4/aShbZS5taW4sZS5taW5dKTp1WzBdPmUubWF4P2koW2UubWF4LGUubWF4XSk6dVswXTxlLm1pbj9pKFtlLm1pbix1WzFdXSk6dVsxXT5lLm1heD9pKFt1WzBdLGUubWF4XSk6KHQuZmlyc3RWYWx1ZT11WzBdLHQuc2Vjb25kVmFsdWU9dVsxXSxyKCkmJihudWxsPT09KG49by5mb3JtSXRlbU1pdHQpfHx2b2lkIDA9PT1ufHxuLmVtaXQoXCJlbC5mb3JtLmNoYW5nZVwiLFtsLnZhbHVlLGEudmFsdWVdKSx0Lm9sZFZhbHVlPXUuc2xpY2UoKSkpOmUucmFuZ2V8fFwibnVtYmVyXCIhPXR5cGVvZiB1fHxpc05hTih1KXx8KHU8ZS5taW4/aShlLm1pbik6dT5lLm1heD9pKGUubWF4KToodC5maXJzdFZhbHVlPXUscigpJiYobnVsbD09PShzPW8uZm9ybUl0ZW1NaXR0KXx8dm9pZCAwPT09c3x8cy5lbWl0KFwiZWwuZm9ybS5jaGFuZ2VcIix1KSx0Lm9sZFZhbHVlPXUpKSl9O3koKCgpPT50LmRyYWdnaW5nKSwoZT0+e2V8fHMoKX0pKSx5KCgoKT0+dC5maXJzdFZhbHVlKSwodD0+e2UucmFuZ2U/aShbbC52YWx1ZSxhLnZhbHVlXSk6aSh0KX0pKSx5KCgoKT0+dC5zZWNvbmRWYWx1ZSksKCgpPT57ZS5yYW5nZSYmaShbbC52YWx1ZSxhLnZhbHVlXSl9KSkseSgoKCk9PmUubW9kZWxWYWx1ZSksKChlLGwpPT57dC5kcmFnZ2luZ3x8QXJyYXkuaXNBcnJheShlKSYmQXJyYXkuaXNBcnJheShsKSYmZS5ldmVyeSgoKGUsdCk9PmU9PT1sW3RdKSl8fHMoKX0pKSx5KCgoKT0+W2UubWluLGUubWF4XSksKCgpPT57cygpfSkpfSxNdT0oZSxsLGEpPT57Y29uc3Qgbj10KG51bGwpO3JldHVybiBfKCgoKT0+bnIodm9pZCAwLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKigpe2xldCB0O2UucmFuZ2U/KEFycmF5LmlzQXJyYXkoZS5tb2RlbFZhbHVlKT8obC5maXJzdFZhbHVlPU1hdGgubWF4KGUubWluLGUubW9kZWxWYWx1ZVswXSksbC5zZWNvbmRWYWx1ZT1NYXRoLm1pbihlLm1heCxlLm1vZGVsVmFsdWVbMV0pKToobC5maXJzdFZhbHVlPWUubWluLGwuc2Vjb25kVmFsdWU9ZS5tYXgpLGwub2xkVmFsdWU9W2wuZmlyc3RWYWx1ZSxsLnNlY29uZFZhbHVlXSx0PWAke2wuZmlyc3RWYWx1ZX0tJHtsLnNlY29uZFZhbHVlfWApOihcIm51bWJlclwiIT10eXBlb2YgZS5tb2RlbFZhbHVlfHxpc05hTihlLm1vZGVsVmFsdWUpP2wuZmlyc3RWYWx1ZT1lLm1pbjpsLmZpcnN0VmFsdWU9TWF0aC5taW4oZS5tYXgsTWF0aC5tYXgoZS5taW4sZS5tb2RlbFZhbHVlKSksbC5vbGRWYWx1ZT1sLmZpcnN0VmFsdWUsdD1sLmZpcnN0VmFsdWUpLG4udmFsdWUuc2V0QXR0cmlidXRlKFwiYXJpYS12YWx1ZXRleHRcIix0KSxuLnZhbHVlLnNldEF0dHJpYnV0ZShcImFyaWEtbGFiZWxcIixlLmxhYmVsP2UubGFiZWw6YHNsaWRlciBiZXR3ZWVuICR7ZS5taW59IGFuZCAke2UubWF4fWApLGx0KHdpbmRvdyxcInJlc2l6ZVwiLGEpLHlpZWxkIGsoKSxhKCl9KSkpKSxPKCgoKT0+e2F0KHdpbmRvdyxcInJlc2l6ZVwiLGEpfSkpLHtzbGlkZXJXcmFwcGVyOm59fSxUdT17a2V5OjF9LE51PXtjbGFzczpcImVsLXNsaWRlcl9fbWFya3NcIn07U3UucmVuZGVyPWZ1bmN0aW9uKGUsdCxsLG8saSxyKXtjb25zdCBkPVAoXCJlbC1pbnB1dC1udW1iZXJcIiksYz1QKFwic2xpZGVyLWJ1dHRvblwiKSxwPVAoXCJzbGlkZXItbWFya2VyXCIpO3JldHVybiBhKCksbihcImRpdlwiLHtyZWY6XCJzbGlkZXJXcmFwcGVyXCIsY2xhc3M6W1wiZWwtc2xpZGVyXCIse1wiaXMtdmVydGljYWxcIjplLnZlcnRpY2FsLFwiZWwtc2xpZGVyLS13aXRoLWlucHV0XCI6ZS5zaG93SW5wdXR9XSxyb2xlOlwic2xpZGVyXCIsXCJhcmlhLXZhbHVlbWluXCI6ZS5taW4sXCJhcmlhLXZhbHVlbWF4XCI6ZS5tYXgsXCJhcmlhLW9yaWVudGF0aW9uXCI6ZS52ZXJ0aWNhbD9cInZlcnRpY2FsXCI6XCJob3Jpem9udGFsXCIsXCJhcmlhLWRpc2FibGVkXCI6ZS5zbGlkZXJEaXNhYmxlZH0sW2Uuc2hvd0lucHV0JiYhZS5yYW5nZT8oYSgpLG4oZCx7a2V5OjAscmVmOlwiaW5wdXRcIixtb2RlbFZhbHVlOmUuZmlyc3RWYWx1ZSxcIm9uVXBkYXRlOm1vZGVsVmFsdWVcIjp0WzFdfHwodFsxXT10PT5lLmZpcnN0VmFsdWU9dCksY2xhc3M6XCJlbC1zbGlkZXJfX2lucHV0XCIsc3RlcDplLnN0ZXAsZGlzYWJsZWQ6ZS5zbGlkZXJEaXNhYmxlZCxjb250cm9sczplLnNob3dJbnB1dENvbnRyb2xzLG1pbjplLm1pbixtYXg6ZS5tYXgsZGVib3VuY2U6ZS5kZWJvdW5jZSxzaXplOmUuaW5wdXRTaXplLG9uQ2hhbmdlOmUuZW1pdENoYW5nZX0sbnVsbCw4LFtcIm1vZGVsVmFsdWVcIixcInN0ZXBcIixcImRpc2FibGVkXCIsXCJjb250cm9sc1wiLFwibWluXCIsXCJtYXhcIixcImRlYm91bmNlXCIsXCJzaXplXCIsXCJvbkNoYW5nZVwiXSkpOnUoXCJ2LWlmXCIsITApLHMoXCJkaXZcIix7cmVmOlwic2xpZGVyXCIsY2xhc3M6W1wiZWwtc2xpZGVyX19ydW53YXlcIix7XCJzaG93LWlucHV0XCI6ZS5zaG93SW5wdXQsZGlzYWJsZWQ6ZS5zbGlkZXJEaXNhYmxlZH1dLHN0eWxlOmUucnVud2F5U3R5bGUsb25DbGljazp0WzRdfHwodFs0XT0oLi4udCk9PmUub25TbGlkZXJDbGljayguLi50KSl9LFtzKFwiZGl2XCIse2NsYXNzOlwiZWwtc2xpZGVyX19iYXJcIixzdHlsZTplLmJhclN0eWxlfSxudWxsLDQpLHMoYyx7cmVmOlwiZmlyc3RCdXR0b25cIixtb2RlbFZhbHVlOmUuZmlyc3RWYWx1ZSxcIm9uVXBkYXRlOm1vZGVsVmFsdWVcIjp0WzJdfHwodFsyXT10PT5lLmZpcnN0VmFsdWU9dCksdmVydGljYWw6ZS52ZXJ0aWNhbCxcInRvb2x0aXAtY2xhc3NcIjplLnRvb2x0aXBDbGFzc30sbnVsbCw4LFtcIm1vZGVsVmFsdWVcIixcInZlcnRpY2FsXCIsXCJ0b29sdGlwLWNsYXNzXCJdKSxlLnJhbmdlPyhhKCksbihjLHtrZXk6MCxyZWY6XCJzZWNvbmRCdXR0b25cIixtb2RlbFZhbHVlOmUuc2Vjb25kVmFsdWUsXCJvblVwZGF0ZTptb2RlbFZhbHVlXCI6dFszXXx8KHRbM109dD0+ZS5zZWNvbmRWYWx1ZT10KSx2ZXJ0aWNhbDplLnZlcnRpY2FsLFwidG9vbHRpcC1jbGFzc1wiOmUudG9vbHRpcENsYXNzfSxudWxsLDgsW1wibW9kZWxWYWx1ZVwiLFwidmVydGljYWxcIixcInRvb2x0aXAtY2xhc3NcIl0pKTp1KFwidi1pZlwiLCEwKSxlLnNob3dTdG9wcz8oYSgpLG4oXCJkaXZcIixUdSxbKGEoITApLG4oRSxudWxsLEgoZS5zdG9wcywoKHQsbCk9PihhKCksbihcImRpdlwiLHtrZXk6bCxjbGFzczpcImVsLXNsaWRlcl9fc3RvcFwiLHN0eWxlOmUuZ2V0U3RvcFN0eWxlKHQpfSxudWxsLDQpKSkpLDEyOCkpXSkpOnUoXCJ2LWlmXCIsITApLGUubWFya0xpc3QubGVuZ3RoPjA/KGEoKSxuKEUse2tleToyfSxbcyhcImRpdlwiLG51bGwsWyhhKCEwKSxuKEUsbnVsbCxIKGUubWFya0xpc3QsKCh0LGwpPT4oYSgpLG4oXCJkaXZcIix7a2V5Omwsc3R5bGU6ZS5nZXRTdG9wU3R5bGUodC5wb3NpdGlvbiksY2xhc3M6XCJlbC1zbGlkZXJfX3N0b3AgZWwtc2xpZGVyX19tYXJrcy1zdG9wXCJ9LG51bGwsNCkpKSksMTI4KSldKSxzKFwiZGl2XCIsTnUsWyhhKCEwKSxuKEUsbnVsbCxIKGUubWFya0xpc3QsKCh0LGwpPT4oYSgpLG4ocCx7a2V5OmwsbWFyazp0Lm1hcmssc3R5bGU6ZS5nZXRTdG9wU3R5bGUodC5wb3NpdGlvbil9LG51bGwsOCxbXCJtYXJrXCIsXCJzdHlsZVwiXSkpKSksMTI4KSldKV0sNjQpKTp1KFwidi1pZlwiLCEwKV0sNildLDEwLFtcImFyaWEtdmFsdWVtaW5cIixcImFyaWEtdmFsdWVtYXhcIixcImFyaWEtb3JpZW50YXRpb25cIixcImFyaWEtZGlzYWJsZWRcIl0pfSxTdS5fX2ZpbGU9XCJwYWNrYWdlcy9zbGlkZXIvc3JjL2luZGV4LnZ1ZVwiLFN1Lmluc3RhbGw9ZT0+e2UuY29tcG9uZW50KFN1Lm5hbWUsU3UpfTt2YXIgRHU9ZSh7bmFtZTpcIkVsU3RlcFwiLHByb3BzOnt0aXRsZTp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIlwifSxpY29uOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiXCJ9LGRlc2NyaXB0aW9uOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiXCJ9LHN0YXR1czp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIlwiLHZhbGlkYXRvcjplPT5bXCJcIixcIndhaXRcIixcInByb2Nlc3NcIixcImZpbmlzaFwiLFwiZXJyb3JcIixcInN1Y2Nlc3NcIl0uaW5jbHVkZXMoZSl9fSxzZXR1cChlKXtjb25zdCBhPXQoLTEpLG49dCh7fSksbz10KFwiXCIpLGk9dyhcIkVsU3RlcHNcIikscj12KCk7XygoKCk9Pnt5KFsoKT0+aS5wcm9wcy5hY3RpdmUsKCk9PmkucHJvcHMucHJvY2Vzc1N0YXR1cywoKT0+aS5wcm9wcy5maW5pc2hTdGF0dXNdLCgoW2VdKT0+e3goZSl9KSx7aW1tZWRpYXRlOiEwfSl9KSksTygoKCk9PntpLnN0ZXBzLnZhbHVlPWkuc3RlcHMudmFsdWUuZmlsdGVyKChlPT5lLnVpZCE9PXIudWlkKSl9KSk7Y29uc3Qgcz1sKCgoKT0+ZS5zdGF0dXN8fG8udmFsdWUpKSx1PWwoKCgpPT57Y29uc3QgZT1pLnN0ZXBzLnZhbHVlW2EudmFsdWUtMV07cmV0dXJuIGU/ZS5jdXJyZW50U3RhdHVzOlwid2FpdFwifSkpLGQ9bCgoKCk9PmkucHJvcHMuYWxpZ25DZW50ZXIpKSxjPWwoKCgpPT5cInZlcnRpY2FsXCI9PT1pLnByb3BzLmRpcmVjdGlvbikpLHA9bCgoKCk9PmkucHJvcHMuc2ltcGxlKSksaD1sKCgoKT0+aS5zdGVwcy52YWx1ZS5sZW5ndGgpKSxtPWwoKCgpPT57dmFyIGU7cmV0dXJuKG51bGw9PT0oZT1pLnN0ZXBzLnZhbHVlW2gudmFsdWUtMV0pfHx2b2lkIDA9PT1lP3ZvaWQgMDplLnVpZCk9PT1yLnVpZH0pKSxnPWwoKCgpPT5wLnZhbHVlP1wiXCI6aS5wcm9wcy5zcGFjZSkpLGI9bCgoKCk9Pntjb25zdCBlPXtmbGV4QmFzaXM6XCJudW1iZXJcIj09dHlwZW9mIGcudmFsdWU/Zy52YWx1ZStcInB4XCI6Zy52YWx1ZT9nLnZhbHVlOjEwMC8oaC52YWx1ZS0oZC52YWx1ZT8wOjEpKStcIiVcIn07cmV0dXJuIGMudmFsdWV8fG0udmFsdWUmJihlLm1heFdpZHRoPTEwMC9oLnZhbHVlK1wiJVwiKSxlfSkpLGs9ZT0+e2EudmFsdWU9ZX0sQz1lPT57bGV0IHQ9MTAwO2NvbnN0IGw9e307bC50cmFuc2l0aW9uRGVsYXk9MTUwKmEudmFsdWUrXCJtc1wiLGU9PT1pLnByb3BzLnByb2Nlc3NTdGF0dXM/dD0wOlwid2FpdFwiPT09ZSYmKHQ9MCxsLnRyYW5zaXRpb25EZWxheT0tMTUwKmEudmFsdWUrXCJtc1wiKSxsLmJvcmRlcldpZHRoPXQmJiFwLnZhbHVlP1wiMXB4XCI6MCxsW1widmVydGljYWxcIj09PWkucHJvcHMuZGlyZWN0aW9uP1wiaGVpZ2h0XCI6XCJ3aWR0aFwiXT10K1wiJVwiLG4udmFsdWU9bH0seD1lPT57ZT5hLnZhbHVlP28udmFsdWU9aS5wcm9wcy5maW5pc2hTdGF0dXM6ZT09PWEudmFsdWUmJlwiZXJyb3JcIiE9PXUudmFsdWU/by52YWx1ZT1pLnByb3BzLnByb2Nlc3NTdGF0dXM6by52YWx1ZT1cIndhaXRcIjtjb25zdCB0PWkuc3RlcHMudmFsdWVbaC52YWx1ZS0xXTt0JiZ0LmNhbGNQcm9ncmVzcyhvLnZhbHVlKX0sUz1mKHt1aWQ6bCgoKCk9PnIudWlkKSksY3VycmVudFN0YXR1czpzLHNldEluZGV4OmssY2FsY1Byb2dyZXNzOkN9KTtyZXR1cm4gaS5zdGVwcy52YWx1ZT1bLi4uaS5zdGVwcy52YWx1ZSxTXSx7aW5kZXg6YSxsaW5lU3R5bGU6bixjdXJyZW50U3RhdHVzOnMsaXNDZW50ZXI6ZCxpc1ZlcnRpY2FsOmMsaXNTaW1wbGU6cCxpc0xhc3Q6bSxzcGFjZTpnLHN0eWxlOmIscGFyZW50Omksc2V0SW5kZXg6ayxjYWxjUHJvZ3Jlc3M6Qyx1cGRhdGVTdGF0dXM6eH19fSk7Y29uc3QgT3U9e2NsYXNzOlwiZWwtc3RlcF9fbGluZVwifSxQdT17a2V5OjEsY2xhc3M6XCJlbC1zdGVwX19pY29uLWlubmVyXCJ9LFZ1PXtjbGFzczpcImVsLXN0ZXBfX21haW5cIn0sSXU9e2tleTowLGNsYXNzOlwiZWwtc3RlcF9fYXJyb3dcIn07RHUucmVuZGVyPWZ1bmN0aW9uKGUsdCxsLG8saSxyKXtyZXR1cm4gYSgpLG4oXCJkaXZcIix7c3R5bGU6ZS5zdHlsZSxjbGFzczpbXCJlbC1zdGVwXCIsZS5pc1NpbXBsZT9cImlzLXNpbXBsZVwiOlwiaXMtXCIrZS5wYXJlbnQucHJvcHMuZGlyZWN0aW9uLGUuaXNMYXN0JiYhZS5zcGFjZSYmIWUuaXNDZW50ZXImJlwiaXMtZmxleFwiLGUuaXNDZW50ZXImJiFlLmlzVmVydGljYWwmJiFlLmlzU2ltcGxlJiZcImlzLWNlbnRlclwiXX0sW3UoXCIgaWNvbiAmIGxpbmUgXCIpLHMoXCJkaXZcIix7Y2xhc3M6W1wiZWwtc3RlcF9faGVhZFwiLFwiaXMtXCIrZS5jdXJyZW50U3RhdHVzXX0sW3MoXCJkaXZcIixPdSxbcyhcImlcIix7Y2xhc3M6XCJlbC1zdGVwX19saW5lLWlubmVyXCIsc3R5bGU6ZS5saW5lU3R5bGV9LG51bGwsNCldKSxzKFwiZGl2XCIse2NsYXNzOltcImVsLXN0ZXBfX2ljb25cIixcImlzLVwiKyhlLmljb24/XCJpY29uXCI6XCJ0ZXh0XCIpXX0sW1wic3VjY2Vzc1wiIT09ZS5jdXJyZW50U3RhdHVzJiZcImVycm9yXCIhPT1lLmN1cnJlbnRTdGF0dXM/ZChlLiRzbG90cyxcImljb25cIix7a2V5OjB9LCgoKT0+W2UuaWNvbj8oYSgpLG4oXCJpXCIse2tleTowLGNsYXNzOltcImVsLXN0ZXBfX2ljb24taW5uZXJcIixlLmljb25dfSxudWxsLDIpKTp1KFwidi1pZlwiLCEwKSxlLmljb258fGUuaXNTaW1wbGU/dShcInYtaWZcIiwhMCk6KGEoKSxuKFwiZGl2XCIsUHUscChlLmluZGV4KzEpLDEpKV0pKTooYSgpLG4oXCJpXCIse2tleToxLGNsYXNzOltcImVsLXN0ZXBfX2ljb24taW5uZXJcIixcImlzLXN0YXR1c1wiLFwiZWwtaWNvbi1cIisoXCJzdWNjZXNzXCI9PT1lLmN1cnJlbnRTdGF0dXM/XCJjaGVja1wiOlwiY2xvc2VcIildfSxudWxsLDIpKV0sMildLDIpLHUoXCIgdGl0bGUgJiBkZXNjcmlwdGlvbiBcIikscyhcImRpdlwiLFZ1LFtzKFwiZGl2XCIse2NsYXNzOltcImVsLXN0ZXBfX3RpdGxlXCIsXCJpcy1cIitlLmN1cnJlbnRTdGF0dXNdfSxbZChlLiRzbG90cyxcInRpdGxlXCIse30sKCgpPT5bYyhwKGUudGl0bGUpLDEpXSkpXSwyKSxlLmlzU2ltcGxlPyhhKCksbihcImRpdlwiLEl1KSk6KGEoKSxuKFwiZGl2XCIse2tleToxLGNsYXNzOltcImVsLXN0ZXBfX2Rlc2NyaXB0aW9uXCIsXCJpcy1cIitlLmN1cnJlbnRTdGF0dXNdfSxbZChlLiRzbG90cyxcImRlc2NyaXB0aW9uXCIse30sKCgpPT5bYyhwKGUuZGVzY3JpcHRpb24pLDEpXSkpXSwyKSldKV0sNil9LER1Ll9fZmlsZT1cInBhY2thZ2VzL3N0ZXBzL3NyYy9pdGVtLnZ1ZVwiLER1Lmluc3RhbGw9ZT0+e2UuY29tcG9uZW50KER1Lm5hbWUsRHUpfTt2YXIgQXU9ZSh7bmFtZTpcIkVsU3RlcHNcIixwcm9wczp7c3BhY2U6e3R5cGU6W051bWJlcixTdHJpbmddLGRlZmF1bHQ6XCJcIn0sYWN0aXZlOnt0eXBlOk51bWJlcixkZWZhdWx0OjB9LGRpcmVjdGlvbjp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcImhvcml6b250YWxcIix2YWxpZGF0b3I6ZT0+W1wiaG9yaXpvbnRhbFwiLFwidmVydGljYWxcIl0uaW5jbHVkZXMoZSl9LGFsaWduQ2VudGVyOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMX0sc2ltcGxlOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMX0sZmluaXNoU3RhdHVzOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiZmluaXNoXCIsdmFsaWRhdG9yOmU9PltcIndhaXRcIixcInByb2Nlc3NcIixcImZpbmlzaFwiLFwiZXJyb3JcIixcInN1Y2Nlc3NcIl0uaW5jbHVkZXMoZSl9LHByb2Nlc3NTdGF0dXM6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJwcm9jZXNzXCIsdmFsaWRhdG9yOmU9PltcIndhaXRcIixcInByb2Nlc3NcIixcImZpbmlzaFwiLFwiZXJyb3JcIixcInN1Y2Nlc3NcIl0uaW5jbHVkZXMoZSl9fSxlbWl0czpbXCJjaGFuZ2VcIl0sc2V0dXAoZSx7ZW1pdDpsfSl7Y29uc3QgYT10KFtdKTtyZXR1cm4geShhLCgoKT0+e2EudmFsdWUuZm9yRWFjaCgoKGUsdCk9PntlLnNldEluZGV4KHQpfSkpfSkpLHgoXCJFbFN0ZXBzXCIse3Byb3BzOmUsc3RlcHM6YX0pLHkoKCgpPT5lLmFjdGl2ZSksKChlLHQpPT57bChcImNoYW5nZVwiLGUsdCl9KSkse3N0ZXBzOmF9fX0pO0F1LnJlbmRlcj1mdW5jdGlvbihlLHQsbCxvLGkscil7cmV0dXJuIGEoKSxuKFwiZGl2XCIse2NsYXNzOltcImVsLXN0ZXBzXCIsZS5zaW1wbGU/XCJlbC1zdGVwcy0tc2ltcGxlXCI6XCJlbC1zdGVwcy0tXCIrZS5kaXJlY3Rpb25dfSxbZChlLiRzbG90cyxcImRlZmF1bHRcIildLDIpfSxBdS5fX2ZpbGU9XCJwYWNrYWdlcy9zdGVwcy9zcmMvaW5kZXgudnVlXCIsQXUuaW5zdGFsbD1lPT57ZS5jb21wb25lbnQoQXUubmFtZSxBdSl9O3ZhciBCdT1lKHtuYW1lOlwiRWxTdWJtZW51XCIsY29tcG9uZW50TmFtZTpcIkVsU3VibWVudVwiLGNvbXBvbmVudHM6e0VsQ29sbGFwc2VUcmFuc2l0aW9uOlZuLEVsUG9wcGVyOlNsfSxwcm9wczp7aW5kZXg6e3R5cGU6U3RyaW5nLHJlcXVpcmVkOiEwfSxzaG93VGltZW91dDp7dHlwZTpOdW1iZXIsZGVmYXVsdDozMDB9LGhpZGVUaW1lb3V0Ont0eXBlOk51bWJlcixkZWZhdWx0OjMwMH0scG9wcGVyQ2xhc3M6U3RyaW5nLGRpc2FibGVkOkJvb2xlYW4scG9wcGVyQXBwZW5kVG9Cb2R5Ont0eXBlOkJvb2xlYW4sZGVmYXVsdDp2b2lkIDB9fSxzZXR1cChlKXtjb25zdCBhPWYoe3BvcHBlckpTOm51bGwsdGltZW91dDpudWxsLGl0ZW1zOnt9LHN1Ym1lbnVzOnt9LGN1cnJlbnRQbGFjZW1lbnQ6XCJcIixtb3VzZUluQ2hpbGQ6ITEsb3BlbmVkOiExfSksbj10KG51bGwpLG89dChudWxsKSxpPXYoKSx7cGFkZGluZ1N0eWxlOnIsaW5kZXhQYXRoOnMscGFyZW50TWVudTp1fT1OcihpLGUuaW5kZXgpLHtvcGVuZWRNZW51czpkLGlzTWVudVBvcHVwOmMsaG92ZXJCYWNrZ3JvdW5kOnAsbWV0aG9kczpoLHByb3BzOm0sbWV0aG9kczp7Y2xvc2VNZW51Omd9LHJvb3RNZW51T246Yixyb290TWVudUVtaXQ6eX09dyhcInJvb3RNZW51XCIpLHthZGRTdWJNZW51OmsscmVtb3ZlU3ViTWVudTpDLGhhbmRsZU1vdXNlbGVhdmU6U309dyhcInN1Yk1lbnU6XCIrdS52YWx1ZS51aWQpLEU9bCgoKCk9PlwiaG9yaXpvbnRhbFwiPT09Qi52YWx1ZSYmTS52YWx1ZXx8XCJ2ZXJ0aWNhbFwiPT09Qi52YWx1ZSYmIW0uY29sbGFwc2U/XCJlbC1pY29uLWFycm93LWRvd25cIjpcImVsLWljb24tYXJyb3ctcmlnaHRcIikpLE09bCgoKCk9PntsZXQgZT0hMCx0PWkucGFyZW50O2Zvcig7dCYmXCJFbE1lbnVcIiE9PXQudHlwZS5uYW1lOyl7aWYoW1wiRWxTdWJtZW51XCIsXCJFbE1lbnVJdGVtR3JvdXBcIl0uaW5jbHVkZXModC50eXBlLm5hbWUpKXtlPSExO2JyZWFrfXQ9dC5wYXJlbnR9cmV0dXJuIGV9KSksVD1sKCgoKT0+dm9pZCAwPT09ZS5wb3BwZXJBcHBlbmRUb0JvZHk/TS52YWx1ZTpCb29sZWFuKGUucG9wcGVyQXBwZW5kVG9Cb2R5KSkpLE49bCgoKCk9Pm0uY29sbGFwc2U/XCJlbC16b29tLWluLWxlZnRcIjpcImVsLXpvb20taW4tdG9wXCIpKSxEPWwoKCgpPT5kLnZhbHVlLmluY2x1ZGVzKGUuaW5kZXgpKSksUD1sKCgoKT0+e2xldCBlPSExO2NvbnN0IHQ9YS5zdWJtZW51cyxsPWEuaXRlbXM7cmV0dXJuIE9iamVjdC5rZXlzKGwpLmZvckVhY2goKHQ9PntsW3RdLmFjdGl2ZSYmKGU9ITApfSkpLE9iamVjdC5rZXlzKHQpLmZvckVhY2goKGw9Pnt0W2xdLmFjdGl2ZSYmKGU9ITApfSkpLGV9KSksVj1sKCgoKT0+bS5iYWNrZ3JvdW5kQ29sb3J8fFwiXCIpKSxJPWwoKCgpPT5tLmFjdGl2ZVRleHRDb2xvcnx8XCJcIikpLEE9bCgoKCk9Pm0udGV4dENvbG9yfHxcIlwiKSksQj1sKCgoKT0+bS5tb2RlKSksTD1sKCgoKT0+XCJob3Jpem9udGFsXCIhPT1CLnZhbHVlP3tjb2xvcjpBLnZhbHVlfTp7Ym9yZGVyQm90dG9tQ29sb3I6UC52YWx1ZT9tLmFjdGl2ZVRleHRDb2xvcj9JLnZhbHVlOlwiXCI6XCJ0cmFuc3BhcmVudFwiLGNvbG9yOlAudmFsdWU/SS52YWx1ZTpBLnZhbHVlfSkpLHo9bmUoKSxGPWU9Pnt2YXIgdDtlP1coKTpudWxsPT09KHQ9by52YWx1ZSl8fHZvaWQgMD09PXR8fHQuZG9EZXN0cm95KCl9LCQ9ZT0+e2Euc3VibWVudXNbZS5pbmRleF09ZX0sUj1lPT57ZGVsZXRlIGEuc3VibWVudXNbZS5pbmRleF19LEg9KHQ9ITEpPT57XCJjbGlja1wiPT09bS5tZW51VHJpZ2dlciYmXCJob3Jpem9udGFsXCI9PT1tLm1vZGV8fCFtLmNvbGxhcHNlJiZcInZlcnRpY2FsXCI9PT1tLm1vZGV8fCh6LmVtaXQoXCJzdWJtZW51Om1vdXNlLWxlYXZlLWNoaWxkXCIpLGNsZWFyVGltZW91dChhLnRpbWVvdXQpLGEudGltZW91dD1zZXRUaW1lb3V0KCgoKT0+eyFhLm1vdXNlSW5DaGlsZCYmZyhlLmluZGV4KX0pLGUuaGlkZVRpbWVvdXQpLFQudmFsdWUmJnQmJlwiRWxTdWJtZW51XCI9PT1pLnBhcmVudC50eXBlLm5hbWUmJlMoITApKX0sVz0oKT0+e2EuY3VycmVudFBsYWNlbWVudD1cImhvcml6b250YWxcIj09PUIudmFsdWUmJk0udmFsdWU/XCJib3R0b20tc3RhcnRcIjpcInJpZ2h0LXN0YXJ0XCJ9O3JldHVybiB4KFwic3ViTWVudTpcIitpLnVpZCx7YWRkU3ViTWVudTokLHJlbW92ZVN1Yk1lbnU6UixoYW5kbGVNb3VzZWxlYXZlOkh9KSxYKCgoKT0+e2IoXCJyb290TWVudTp0b2dnbGUtY29sbGFwc2VcIiwoZT0+e0YoZSl9KSksei5vbihcInN1Ym1lbnU6bW91c2UtZW50ZXItY2hpbGRcIiwoKCk9PnthLm1vdXNlSW5DaGlsZD0hMCxjbGVhclRpbWVvdXQoYS50aW1lb3V0KX0pKSx6Lm9uKFwic3VibWVudTptb3VzZS1sZWF2ZS1jaGlsZFwiLCgoKT0+e2EubW91c2VJbkNoaWxkPSExLGNsZWFyVGltZW91dChhLnRpbWVvdXQpfSkpfSkpLF8oKCgpPT57aC5hZGRTdWJNZW51KHtpbmRleDplLmluZGV4LGluZGV4UGF0aDpzLGFjdGl2ZTpQfSksayh7aW5kZXg6ZS5pbmRleCxpbmRleFBhdGg6cyxhY3RpdmU6UH0pLFcoKX0pKSxPKCgoKT0+e0Moe2luZGV4OmUuaW5kZXgsaW5kZXhQYXRoOnMsYWN0aXZlOlB9KSxoLnJlbW92ZVN1Yk1lbnUoe2luZGV4OmUuaW5kZXgsaW5kZXhQYXRoOnMsYWN0aXZlOlB9KX0pKSx7ZGF0YTphLHByb3BzOmUsbW9kZTpCLGFjdGl2ZTpQLGlzTWVudVBvcHVwOmMsb3BlbmVkOkQscGFkZGluZ1N0eWxlOnIsdGl0bGVTdHlsZTpMLGJhY2tncm91bmRDb2xvcjpWLHJvb3RQcm9wczptLG1lbnVUcmFuc2l0aW9uTmFtZTpOLHN1Ym1lbnVUaXRsZUljb246RSxhcHBlbmRUb0JvZHk6VCxoYW5kbGVDbGljazooKT0+e2NvbnN0IHQ9ZS5kaXNhYmxlZDtcImhvdmVyXCI9PT1tLm1lbnVUcmlnZ2VyJiZcImhvcml6b250YWxcIj09PW0ubW9kZXx8bS5jb2xsYXBzZSYmXCJ2ZXJ0aWNhbFwiPT09bS5tb2RlfHx0fHx5KFwic3VibWVudTpzdWJtZW51LWNsaWNrXCIse2luZGV4OmUuaW5kZXgsaW5kZXhQYXRoOnN9KX0saGFuZGxlTW91c2VlbnRlcjoodCxsPWUuc2hvd1RpbWVvdXQpPT57aWYoIShcIkFjdGl2ZVhPYmplY3RcImluIHdpbmRvdykmJlwiZm9jdXNcIj09PXQudHlwZSYmIXQucmVsYXRlZFRhcmdldClyZXR1cm47Y29uc3Qgbj1lLmRpc2FibGVkO1wiY2xpY2tcIj09PW0ubWVudVRyaWdnZXImJlwiaG9yaXpvbnRhbFwiPT09bS5tb2RlfHwhbS5jb2xsYXBzZSYmXCJ2ZXJ0aWNhbFwiPT09bS5tb2RlfHxufHwoei5lbWl0KFwic3VibWVudTptb3VzZS1lbnRlci1jaGlsZFwiKSxjbGVhclRpbWVvdXQoYS50aW1lb3V0KSxhLnRpbWVvdXQ9c2V0VGltZW91dCgoKCk9PntoLm9wZW5NZW51KGUuaW5kZXgscyl9KSxsKSxULnZhbHVlJiZ1LnZhbHVlLnZub2RlLmVsLmRpc3BhdGNoRXZlbnQobmV3IE1vdXNlRXZlbnQoXCJtb3VzZWVudGVyXCIpKSl9LGhhbmRsZU1vdXNlbGVhdmU6SCxoYW5kbGVUaXRsZU1vdXNlZW50ZXI6KCk9Pnt2YXIgZTtpZihcImhvcml6b250YWxcIj09PUIudmFsdWUmJiFtLmJhY2tncm91bmRDb2xvcilyZXR1cm47Y29uc3QgdD0obnVsbD09PShlPW8udmFsdWUpfHx2b2lkIDA9PT1lP3ZvaWQgMDplLnRyaWdnZXJSZWYpfHxuLnZhbHVlO3QmJih0LnN0eWxlLmJhY2tncm91bmRDb2xvcj1wLnZhbHVlKX0saGFuZGxlVGl0bGVNb3VzZWxlYXZlOigpPT57dmFyIGU7aWYoXCJob3Jpem9udGFsXCI9PT1CLnZhbHVlJiYhbS5iYWNrZ3JvdW5kQ29sb3IpcmV0dXJuO2NvbnN0IHQ9KG51bGw9PT0oZT1vLnZhbHVlKXx8dm9pZCAwPT09ZT92b2lkIDA6ZS50cmlnZ2VyUmVmKXx8bi52YWx1ZTt0JiYodC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3I9bS5iYWNrZ3JvdW5kQ29sb3J8fFwiXCIpfSxhZGRJdGVtOmU9PnthLml0ZW1zW2UuaW5kZXhdPWV9LHJlbW92ZUl0ZW06ZT0+e2RlbGV0ZSBhLml0ZW1zW2UuaW5kZXhdfSxhZGRTdWJNZW51OiQscmVtb3ZlU3ViTWVudTpSLHBvcHBlclZub2RlOm8sdmVydGljYWxUaXRsZVJlZjpufX19KTtCdS5yZW5kZXI9ZnVuY3Rpb24oZSx0LGwsYyxwLHYpe2NvbnN0IG09UChcImVsLXBvcHBlclwiKSxmPVAoXCJlbC1jb2xsYXBzZS10cmFuc2l0aW9uXCIpO3JldHVybiBhKCksbihcImxpXCIse2NsYXNzOltcImVsLXN1Ym1lbnVcIixlLmFjdGl2ZSYmXCJpcy1hY3RpdmVcIixlLm9wZW5lZCYmXCJpcy1vcGVuZWRcIixlLmRpc2FibGVkJiZcImlzLWRpc2FibGVkXCJdLHJvbGU6XCJtZW51aXRlbVwiLFwiYXJpYS1oYXNwb3B1cFwiOlwidHJ1ZVwiLFwiYXJpYS1leHBhbmRlZFwiOlwib3BlbmVkXCIsb25Nb3VzZWVudGVyOnRbMTFdfHwodFsxMV09KC4uLnQpPT5lLmhhbmRsZU1vdXNlZW50ZXIoLi4udCkpLG9uTW91c2VsZWF2ZTp0WzEyXXx8KHRbMTJdPSgpPT5lLmhhbmRsZU1vdXNlbGVhdmUoITEpKSxvbkZvY3VzOnRbMTNdfHwodFsxM109KC4uLnQpPT5lLmhhbmRsZU1vdXNlZW50ZXIoLi4udCkpfSxbZS5pc01lbnVQb3B1cD8oYSgpLG4obSx7a2V5OjAscmVmOlwicG9wcGVyVm5vZGVcIix2aXNpYmxlOmUub3BlbmVkLFwib25VcGRhdGU6dmlzaWJsZVwiOnRbN118fCh0WzddPXQ9PmUub3BlbmVkPXQpLFwibWFudWFsLW1vZGVcIjohMCxlZmZlY3Q6XCJsaWdodFwiLHB1cmU6ITAsb2Zmc2V0OjYsXCJzaG93LWFycm93XCI6ITEsXCJwb3BwZXItY2xhc3NcIjplLnByb3BzLnBvcHBlckNsYXNzLHBsYWNlbWVudDplLmRhdGEuY3VycmVudFBsYWNlbWVudCxcImFwcGVuZC10by1ib2R5XCI6ZS5hcHBlbmRUb0JvZHl9LHtkZWZhdWx0OmkoKCgpPT5bcyhvLHtuYW1lOmUubWVudVRyYW5zaXRpb25OYW1lfSx7ZGVmYXVsdDppKCgoKT0+W3IocyhcImRpdlwiLHtyZWY6XCJtZW51XCIsY2xhc3M6W1wiZWwtbWVudS0tXCIrZS5tb2RlLGUucHJvcHMucG9wcGVyQ2xhc3NdLG9uTW91c2VlbnRlcjp0WzFdfHwodFsxXT10PT5lLmhhbmRsZU1vdXNlZW50ZXIodCwxMDApKSxvbk1vdXNlbGVhdmU6dFsyXXx8KHRbMl09KCk9PmUuaGFuZGxlTW91c2VsZWF2ZSghMCkpLG9uRm9jdXM6dFszXXx8KHRbM109dD0+ZS5oYW5kbGVNb3VzZWVudGVyKHQsMTAwKSl9LFtzKFwidWxcIix7cm9sZTpcIm1lbnVcIixjbGFzczpbXCJlbC1tZW51IGVsLW1lbnUtLXBvcHVwXCIsXCJlbC1tZW51LS1wb3B1cC1cIitlLmRhdGEuY3VycmVudFBsYWNlbWVudF0sc3R5bGU6e2JhY2tncm91bmRDb2xvcjplLnJvb3RQcm9wcy5iYWNrZ3JvdW5kQ29sb3J8fFwiXCJ9fSxbZChlLiRzbG90cyxcImRlZmF1bHRcIildLDYpXSwzNCksW1toLGUub3BlbmVkXV0pXSkpLF86M30sOCxbXCJuYW1lXCJdKV0pKSx0cmlnZ2VyOmkoKCgpPT5bcyhcImRpdlwiLHtjbGFzczpcImVsLXN1Ym1lbnVfX3RpdGxlXCIsc3R5bGU6W2UucGFkZGluZ1N0eWxlLGUudGl0bGVTdHlsZSx7YmFja2dyb3VuZENvbG9yOmUuYmFja2dyb3VuZENvbG9yfV0sb25DbGljazp0WzRdfHwodFs0XT0oLi4udCk9PmUuaGFuZGxlQ2xpY2soLi4udCkpLG9uTW91c2VlbnRlcjp0WzVdfHwodFs1XT0oLi4udCk9PmUuaGFuZGxlVGl0bGVNb3VzZWVudGVyKC4uLnQpKSxvbk1vdXNlbGVhdmU6dFs2XXx8KHRbNl09KC4uLnQpPT5lLmhhbmRsZVRpdGxlTW91c2VsZWF2ZSguLi50KSl9LFtkKGUuJHNsb3RzLFwidGl0bGVcIikscyhcImlcIix7Y2xhc3M6W1wiZWwtc3VibWVudV9faWNvbi1hcnJvd1wiLGUuc3VibWVudVRpdGxlSWNvbl19LG51bGwsMildLDM2KV0pKSxfOjF9LDgsW1widmlzaWJsZVwiLFwicG9wcGVyLWNsYXNzXCIsXCJwbGFjZW1lbnRcIixcImFwcGVuZC10by1ib2R5XCJdKSk6dShcInYtaWZcIiwhMCksZS5pc01lbnVQb3B1cD91KFwidi1pZlwiLCEwKTooYSgpLG4oXCJkaXZcIix7a2V5OjEscmVmOlwidmVydGljYWxUaXRsZVJlZlwiLGNsYXNzOlwiZWwtc3VibWVudV9fdGl0bGVcIixzdHlsZTpbZS5wYWRkaW5nU3R5bGUsZS50aXRsZVN0eWxlLHtiYWNrZ3JvdW5kQ29sb3I6ZS5iYWNrZ3JvdW5kQ29sb3J9XSxvbkNsaWNrOnRbOF18fCh0WzhdPSguLi50KT0+ZS5oYW5kbGVDbGljayguLi50KSksb25Nb3VzZWVudGVyOnRbOV18fCh0WzldPSguLi50KT0+ZS5oYW5kbGVUaXRsZU1vdXNlZW50ZXIoLi4udCkpLG9uTW91c2VsZWF2ZTp0WzEwXXx8KHRbMTBdPSguLi50KT0+ZS5oYW5kbGVUaXRsZU1vdXNlbGVhdmUoLi4udCkpfSxbZChlLiRzbG90cyxcInRpdGxlXCIpLHMoXCJpXCIse2NsYXNzOltcImVsLXN1Ym1lbnVfX2ljb24tYXJyb3dcIixlLnN1Ym1lbnVUaXRsZUljb25dfSxudWxsLDIpXSwzNikpLGUuaXNNZW51UG9wdXA/dShcInYtaWZcIiwhMCk6KGEoKSxuKGYse2tleToyfSx7ZGVmYXVsdDppKCgoKT0+W3IocyhcInVsXCIse3JvbGU6XCJtZW51XCIsY2xhc3M6XCJlbC1tZW51IGVsLW1lbnUtLWlubGluZVwiLHN0eWxlOntiYWNrZ3JvdW5kQ29sb3I6ZS5yb290UHJvcHMuYmFja2dyb3VuZENvbG9yfHxcIlwifX0sW2QoZS4kc2xvdHMsXCJkZWZhdWx0XCIpXSw0KSxbW2gsZS5vcGVuZWRdXSldKSksXzozfSkpXSwzNCl9LEJ1Ll9fZmlsZT1cInBhY2thZ2VzL21lbnUvc3JjL3N1Ym1lbnUudnVlXCIsQnUuaW5zdGFsbD1lPT57ZS5jb21wb25lbnQoQnUubmFtZSxCdSl9O3ZhciBMdT1lKHtuYW1lOlwiRWxTd2l0Y2hcIixwcm9wczp7bW9kZWxWYWx1ZTp7dHlwZTpbQm9vbGVhbixTdHJpbmcsTnVtYmVyXSxkZWZhdWx0OiExfSx2YWx1ZTp7dHlwZTpbQm9vbGVhbixTdHJpbmcsTnVtYmVyXSxkZWZhdWx0OiExfSxkaXNhYmxlZDp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITF9LHdpZHRoOnt0eXBlOk51bWJlcixkZWZhdWx0OjQwfSxhY3RpdmVJY29uQ2xhc3M6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJcIn0saW5hY3RpdmVJY29uQ2xhc3M6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJcIn0sYWN0aXZlVGV4dDp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIlwifSxpbmFjdGl2ZVRleHQ6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJcIn0sYWN0aXZlQ29sb3I6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJcIn0saW5hY3RpdmVDb2xvcjp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIlwifSxhY3RpdmVWYWx1ZTp7dHlwZTpbQm9vbGVhbixTdHJpbmcsTnVtYmVyXSxkZWZhdWx0OiEwfSxpbmFjdGl2ZVZhbHVlOnt0eXBlOltCb29sZWFuLFN0cmluZyxOdW1iZXJdLGRlZmF1bHQ6ITF9LG5hbWU6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJcIn0sdmFsaWRhdGVFdmVudDp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITB9LGlkOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiXCJ9LGxvYWRpbmc6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiExfX0sZW1pdHM6W1widXBkYXRlOm1vZGVsVmFsdWVcIixcImNoYW5nZVwiLFwiaW5wdXRcIl0sc2V0dXAoZSxhKXtjb25zdCBuPXcoXCJlbEZvcm1cIix7fSksbz13KFwiZWxGb3JtSXRlbVwiLHt9KSxpPXQoZS53aWR0aCkscj10KCExIT09ZS5tb2RlbFZhbHVlKSxzPXQobnVsbCksdT10KG51bGwpO3koKCgpPT5lLm1vZGVsVmFsdWUpLCgoKT0+e3IudmFsdWU9ITB9KSkseSgoKCk9PmUudmFsdWUpLCgoKT0+e3IudmFsdWU9ITF9KSk7Y29uc3QgZD1sKCgoKT0+ci52YWx1ZT9lLm1vZGVsVmFsdWU6ZS52YWx1ZSkpLGM9bCgoKCk9PmQudmFsdWU9PT1lLmFjdGl2ZVZhbHVlKSk7fltlLmFjdGl2ZVZhbHVlLGUuaW5hY3RpdmVWYWx1ZV0uaW5kZXhPZihkLnZhbHVlKXx8KGEuZW1pdChcInVwZGF0ZTptb2RlbFZhbHVlXCIsZS5pbmFjdGl2ZVZhbHVlKSxhLmVtaXQoXCJjaGFuZ2VcIixlLmluYWN0aXZlVmFsdWUpLGEuZW1pdChcImlucHV0XCIsZS5pbmFjdGl2ZVZhbHVlKSkseShjLCgoKT0+e3ZhciB0O3MudmFsdWUuY2hlY2tlZD1jLnZhbHVlLChlLmFjdGl2ZUNvbG9yfHxlLmluYWN0aXZlQ29sb3IpJiZ2KCksZS52YWxpZGF0ZUV2ZW50JiYobnVsbD09PSh0PW8uZm9ybUl0ZW1NaXR0KXx8dm9pZCAwPT09dHx8dC5lbWl0KFwiZWwuZm9ybS5jaGFuZ2VcIixbZC52YWx1ZV0pKX0pKTtjb25zdCBwPWwoKCgpPT5lLmRpc2FibGVkfHxlLmxvYWRpbmd8fChufHx7fSkuZGlzYWJsZWQpKSxoPSgpPT57Y29uc3QgdD1jLnZhbHVlP2UuaW5hY3RpdmVWYWx1ZTplLmFjdGl2ZVZhbHVlO2EuZW1pdChcInVwZGF0ZTptb2RlbFZhbHVlXCIsdCksYS5lbWl0KFwiY2hhbmdlXCIsdCksYS5lbWl0KFwiaW5wdXRcIix0KSxrKCgoKT0+e3MudmFsdWUuY2hlY2tlZD1jLnZhbHVlfSkpfSx2PSgpPT57Y29uc3QgdD1jLnZhbHVlP2UuYWN0aXZlQ29sb3I6ZS5pbmFjdGl2ZUNvbG9yLGw9dS52YWx1ZTtsLnN0eWxlLmJvcmRlckNvbG9yPXQsbC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3I9dCxsLmNoaWxkcmVuWzBdLnN0eWxlLmNvbG9yPXR9O3JldHVybiBfKCgoKT0+e2kudmFsdWU9aS52YWx1ZXx8NDAsKGUuYWN0aXZlVmFsdWV8fGUuaW5hY3RpdmVWYWx1ZSkmJnYoKSxzLnZhbHVlLmNoZWNrZWQ9Yy52YWx1ZX0pKSx7aW5wdXQ6cyxjb3JlOnUsY29yZVdpZHRoOmksc3dpdGNoRGlzYWJsZWQ6cCxjaGVja2VkOmMsaGFuZGxlQ2hhbmdlOmgsc3dpdGNoVmFsdWU6KCk9PnshcC52YWx1ZSYmaCgpfX19fSk7Y29uc3QgenU9e2NsYXNzOlwiZWwtc3dpdGNoX19hY3Rpb25cIn0sRnU9e2tleTowLGNsYXNzOlwiZWwtaWNvbi1sb2FkaW5nXCJ9O0x1LnJlbmRlcj1mdW5jdGlvbihlLHQsbCxvLGkscil7cmV0dXJuIGEoKSxuKFwiZGl2XCIse2NsYXNzOltcImVsLXN3aXRjaFwiLHtcImlzLWRpc2FibGVkXCI6ZS5zd2l0Y2hEaXNhYmxlZCxcImlzLWNoZWNrZWRcIjplLmNoZWNrZWR9XSxyb2xlOlwic3dpdGNoXCIsXCJhcmlhLWNoZWNrZWRcIjplLmNoZWNrZWQsXCJhcmlhLWRpc2FibGVkXCI6ZS5zd2l0Y2hEaXNhYmxlZCxvbkNsaWNrOnRbM118fCh0WzNdPVQoKCguLi50KT0+ZS5zd2l0Y2hWYWx1ZSguLi50KSksW1wicHJldmVudFwiXSkpfSxbcyhcImlucHV0XCIse2lkOmUuaWQscmVmOlwiaW5wdXRcIixjbGFzczpcImVsLXN3aXRjaF9faW5wdXRcIix0eXBlOlwiY2hlY2tib3hcIixuYW1lOmUubmFtZSxcInRydWUtdmFsdWVcIjplLmFjdGl2ZVZhbHVlLFwiZmFsc2UtdmFsdWVcIjplLmluYWN0aXZlVmFsdWUsZGlzYWJsZWQ6ZS5zd2l0Y2hEaXNhYmxlZCxvbkNoYW5nZTp0WzFdfHwodFsxXT0oLi4udCk9PmUuaGFuZGxlQ2hhbmdlKC4uLnQpKSxvbktleWRvd246dFsyXXx8KHRbMl09JCgoKC4uLnQpPT5lLnN3aXRjaFZhbHVlKC4uLnQpKSxbXCJlbnRlclwiXSkpfSxudWxsLDQwLFtcImlkXCIsXCJuYW1lXCIsXCJ0cnVlLXZhbHVlXCIsXCJmYWxzZS12YWx1ZVwiLFwiZGlzYWJsZWRcIl0pLGUuaW5hY3RpdmVJY29uQ2xhc3N8fGUuaW5hY3RpdmVUZXh0PyhhKCksbihcInNwYW5cIix7a2V5OjAsY2xhc3M6W1wiZWwtc3dpdGNoX19sYWJlbFwiLFwiZWwtc3dpdGNoX19sYWJlbC0tbGVmdFwiLGUuY2hlY2tlZD9cIlwiOlwiaXMtYWN0aXZlXCJdfSxbZS5pbmFjdGl2ZUljb25DbGFzcz8oYSgpLG4oXCJpXCIse2tleTowLGNsYXNzOltlLmluYWN0aXZlSWNvbkNsYXNzXX0sbnVsbCwyKSk6dShcInYtaWZcIiwhMCksIWUuaW5hY3RpdmVJY29uQ2xhc3MmJmUuaW5hY3RpdmVUZXh0PyhhKCksbihcInNwYW5cIix7a2V5OjEsXCJhcmlhLWhpZGRlblwiOmUuY2hlY2tlZH0scChlLmluYWN0aXZlVGV4dCksOSxbXCJhcmlhLWhpZGRlblwiXSkpOnUoXCJ2LWlmXCIsITApXSwyKSk6dShcInYtaWZcIiwhMCkscyhcInNwYW5cIix7cmVmOlwiY29yZVwiLGNsYXNzOlwiZWwtc3dpdGNoX19jb3JlXCIsc3R5bGU6e3dpZHRoOmUuY29yZVdpZHRoK1wicHhcIn19LFtzKFwiZGl2XCIsenUsW2UubG9hZGluZz8oYSgpLG4oXCJpXCIsRnUpKTp1KFwidi1pZlwiLCEwKV0pXSw0KSxlLmFjdGl2ZUljb25DbGFzc3x8ZS5hY3RpdmVUZXh0PyhhKCksbihcInNwYW5cIix7a2V5OjEsY2xhc3M6W1wiZWwtc3dpdGNoX19sYWJlbFwiLFwiZWwtc3dpdGNoX19sYWJlbC0tcmlnaHRcIixlLmNoZWNrZWQ/XCJpcy1hY3RpdmVcIjpcIlwiXX0sW2UuYWN0aXZlSWNvbkNsYXNzPyhhKCksbihcImlcIix7a2V5OjAsY2xhc3M6W2UuYWN0aXZlSWNvbkNsYXNzXX0sbnVsbCwyKSk6dShcInYtaWZcIiwhMCksIWUuYWN0aXZlSWNvbkNsYXNzJiZlLmFjdGl2ZVRleHQ/KGEoKSxuKFwic3BhblwiLHtrZXk6MSxcImFyaWEtaGlkZGVuXCI6IWUuY2hlY2tlZH0scChlLmFjdGl2ZVRleHQpLDksW1wiYXJpYS1oaWRkZW5cIl0pKTp1KFwidi1pZlwiLCEwKV0sMikpOnUoXCJ2LWlmXCIsITApXSwxMCxbXCJhcmlhLWNoZWNrZWRcIixcImFyaWEtZGlzYWJsZWRcIl0pfSxMdS5fX2ZpbGU9XCJwYWNrYWdlcy9zd2l0Y2gvc3JjL2luZGV4LnZ1ZVwiLEx1Lmluc3RhbGw9ZT0+e2UuY29tcG9uZW50KEx1Lm5hbWUsTHUpfTt2YXIgJHU9ZSh7bmFtZTpcIkVsVGFiUGFuZVwiLHByb3BzOntsYWJlbDp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIlwifSxuYW1lOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiXCJ9LGNsb3NhYmxlOkJvb2xlYW4sZGlzYWJsZWQ6Qm9vbGVhbixsYXp5OkJvb2xlYW59LHNldHVwKGUpe2NvbnN0IGE9dChudWxsKSxuPXQoITEpLG89dyhcInJvb3RUYWJzXCIpLGk9dyhcInVwZGF0ZVBhbmVTdGF0ZVwiKTtpZighb3x8IWkpdGhyb3cgbmV3IEVycm9yKFwiRWxUYWJQYW5lIG11c3QgdXNlIHdpdGggRWxUYWJzXCIpO2NvbnN0IHI9bCgoKCk9PmUuY2xvc2FibGV8fG8ucHJvcHMuY2xvc2FibGUpKSxzPWwoKCgpPT57Y29uc3QgdD1vLmN1cnJlbnROYW1lLnZhbHVlPT09KGUubmFtZXx8YS52YWx1ZSk7cmV0dXJuIHQmJihuLnZhbHVlPSEwKSx0fSkpLHU9bCgoKCk9PmUubmFtZXx8YS52YWx1ZSkpLGQ9bCgoKCk9PiFlLmxhenl8fG4udmFsdWV8fHMudmFsdWUpKSxjPXYoKTtyZXR1cm4gaSh7dWlkOmMudWlkLGluc3RhbmNlOmMscHJvcHM6ZSxwYW5lTmFtZTp1LGFjdGl2ZTpzLGluZGV4OmEsaXNDbG9zYWJsZTpyfSkse2luZGV4OmEsbG9hZGVkOm4saXNDbG9zYWJsZTpyLGFjdGl2ZTpzLHBhbmVOYW1lOnUsc2hvdWxkQmVSZW5kZXI6ZH19fSk7JHUucmVuZGVyPWZ1bmN0aW9uKGUsdCxsLG8saSxzKXtyZXR1cm4gZS5zaG91bGRCZVJlbmRlcj9yKChhKCksbihcImRpdlwiLHtrZXk6MCxpZDpcInBhbmUtXCIrZS5wYW5lTmFtZSxjbGFzczpcImVsLXRhYi1wYW5lXCIscm9sZTpcInRhYnBhbmVsXCIsXCJhcmlhLWhpZGRlblwiOiFlLmFjdGl2ZSxcImFyaWEtbGFiZWxsZWRieVwiOlwidGFiLVwiK2UucGFuZU5hbWV9LFtkKGUuJHNsb3RzLFwiZGVmYXVsdFwiKV0sOCxbXCJpZFwiLFwiYXJpYS1oaWRkZW5cIixcImFyaWEtbGFiZWxsZWRieVwiXSkpLFtbaCxlLmFjdGl2ZV1dKTp1KFwidi1pZlwiLCEwKX0sJHUuX19maWxlPVwicGFja2FnZXMvdGFicy9zcmMvdGFiLXBhbmUudnVlXCIsJHUuaW5zdGFsbD1lPT57ZS5jb21wb25lbnQoJHUubmFtZSwkdSl9O2NvbnN0IFJ1PWZ1bmN0aW9uKGUpe2xldCB0PWUudGFyZ2V0O2Zvcig7dCYmXCJIVE1MXCIhPT10LnRhZ05hbWUudG9VcHBlckNhc2UoKTspe2lmKFwiVERcIj09PXQudGFnTmFtZS50b1VwcGVyQ2FzZSgpKXJldHVybiB0O3Q9dC5wYXJlbnROb2RlfXJldHVybiBudWxsfSxIdT1mdW5jdGlvbihlKXtyZXR1cm4gbnVsbCE9PWUmJlwib2JqZWN0XCI9PXR5cGVvZiBlfSxXdT1mdW5jdGlvbihlLHQsbCxhLG4pe2lmKCF0JiYhYSYmKCFufHxBcnJheS5pc0FycmF5KG4pJiYhbi5sZW5ndGgpKXJldHVybiBlO2w9XCJzdHJpbmdcIj09dHlwZW9mIGw/XCJkZXNjZW5kaW5nXCI9PT1sPy0xOjE6bCYmbDwwPy0xOjE7Y29uc3Qgbz1hP251bGw6ZnVuY3Rpb24obCxhKXtyZXR1cm4gbj8oQXJyYXkuaXNBcnJheShuKXx8KG49W25dKSxuLm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIHQ/RmUobCx0KTp0KGwsYSxlKX0pKSk6KFwiJGtleVwiIT09dCYmSHUobCkmJlwiJHZhbHVlXCJpbiBsJiYobD1sLiR2YWx1ZSksW0h1KGwpP0ZlKGwsdCk6bF0pfTtyZXR1cm4gZS5tYXAoKGZ1bmN0aW9uKGUsdCl7cmV0dXJue3ZhbHVlOmUsaW5kZXg6dCxrZXk6bz9vKGUsdCk6bnVsbH19KSkuc29ydCgoZnVuY3Rpb24oZSx0KXtsZXQgbj1mdW5jdGlvbihlLHQpe2lmKGEpcmV0dXJuIGEoZS52YWx1ZSx0LnZhbHVlKTtmb3IobGV0IGw9MCxhPWUua2V5Lmxlbmd0aDtsPGE7bCsrKXtpZihlLmtleVtsXTx0LmtleVtsXSlyZXR1cm4tMTtpZihlLmtleVtsXT50LmtleVtsXSlyZXR1cm4gMX1yZXR1cm4gMH0oZSx0KTtyZXR1cm4gbnx8KG49ZS5pbmRleC10LmluZGV4KSxuKmx9KSkubWFwKChlPT5lLnZhbHVlKSl9LGp1PWZ1bmN0aW9uKGUsdCl7bGV0IGw9bnVsbDtyZXR1cm4gZS5jb2x1bW5zLmZvckVhY2goKGZ1bmN0aW9uKGUpe2UuaWQ9PT10JiYobD1lKX0pKSxsfSxLdT1mdW5jdGlvbihlLHQpe2NvbnN0IGw9KHQuY2xhc3NOYW1lfHxcIlwiKS5tYXRjaCgvZWwtdGFibGVfW15cXHNdKy9nbSk7cmV0dXJuIGw/anUoZSxsWzBdKTpudWxsfSxZdT0oZSx0KT0+e2lmKCFlKXRocm93IG5ldyBFcnJvcihcInJvdyBpcyByZXF1aXJlZCB3aGVuIGdldCByb3cgaWRlbnRpdHlcIik7aWYoXCJzdHJpbmdcIj09dHlwZW9mIHQpe2lmKHQuaW5kZXhPZihcIi5cIik8MClyZXR1cm4gZVt0XTtjb25zdCBsPXQuc3BsaXQoXCIuXCIpO2xldCBhPWU7Zm9yKGxldCBlPTA7ZTxsLmxlbmd0aDtlKyspYT1hW2xbZV1dO3JldHVybiBhfWlmKFwiZnVuY3Rpb25cIj09dHlwZW9mIHQpcmV0dXJuIHQuY2FsbChudWxsLGUpfSxxdT1mdW5jdGlvbihlLHQpe2NvbnN0IGw9e307cmV0dXJuKGV8fFtdKS5mb3JFYWNoKCgoZSxhKT0+e2xbWXUoZSx0KV09e3JvdzplLGluZGV4OmF9fSkpLGx9O2Z1bmN0aW9uIFV1KGUsdCl7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLHQpfWZ1bmN0aW9uIEd1KGUpe3JldHVybiB2b2lkIDAhPT1lJiYoZT1wYXJzZUludChlLDEwKSxpc05hTihlKSYmKGU9bnVsbCkpLGV9ZnVuY3Rpb24gWHUoZSl7cmV0dXJuXCJudW1iZXJcIj09dHlwZW9mIGU/ZTpcInN0cmluZ1wiPT10eXBlb2YgZT8vXlxcZCsoPzpweCk/JC8udGVzdChlKT9wYXJzZUludChlLDEwKTplOm51bGx9ZnVuY3Rpb24gUXUoZSx0LGwpe2xldCBhPSExO2NvbnN0IG49ZS5pbmRleE9mKHQpLG89LTEhPT1uLGk9KCk9PntlLnB1c2godCksYT0hMH0scj0oKT0+e2Uuc3BsaWNlKG4sMSksYT0hMH07cmV0dXJuXCJib29sZWFuXCI9PXR5cGVvZiBsP2wmJiFvP2koKTohbCYmbyYmcigpOm8/cigpOmkoKSxhfWZ1bmN0aW9uIFp1KGUsdCxsPVwiY2hpbGRyZW5cIixhPVwiaGFzQ2hpbGRyZW5cIil7Y29uc3Qgbj1lPT4hKEFycmF5LmlzQXJyYXkoZSkmJmUubGVuZ3RoKTtmdW5jdGlvbiBvKGUsaSxyKXt0KGUsaSxyKSxpLmZvckVhY2goKGU9PntpZihlW2FdKXJldHVybiB2b2lkIHQoZSxudWxsLHIrMSk7Y29uc3QgaT1lW2xdO24oaSl8fG8oZSxpLHIrMSl9KSl9ZS5mb3JFYWNoKChlPT57aWYoZVthXSlyZXR1cm4gdm9pZCB0KGUsbnVsbCwwKTtjb25zdCBpPWVbbF07bihpKXx8byhlLGksMCl9KSl9Y29uc3QgSnU9ZT0+e2NvbnN0IHQ9W107cmV0dXJuIGUuZm9yRWFjaCgoZT0+e2UuY2hpbGRyZW4/dC5wdXNoLmFwcGx5KHQsSnUoZS5jaGlsZHJlbikpOnQucHVzaChlKX0pKSx0fTtmdW5jdGlvbiBlZCgpe2NvbnN0IGU9digpLGE9dChudWxsKSxuPXQoW10pLG89dChbXSksaT10KCExKSxyPXQoW10pLHM9dChbXSksdT10KFtdKSxkPXQoW10pLGM9dChbXSkscD10KFtdKSxoPXQoW10pLG09dChbXSksZj10KDApLGc9dCgwKSxiPXQoMCksaz10KCExKSxDPXQoW10pLHg9dCghMSksdz10KCExKSxfPXQobnVsbCksUz10KHt9KSxFPXQobnVsbCksTT10KG51bGwpLFQ9dChudWxsKSxOPXQobnVsbCksRD10KG51bGwpLE89KCk9PntkLnZhbHVlPXIudmFsdWUuZmlsdGVyKChlPT4hMD09PWUuZml4ZWR8fFwibGVmdFwiPT09ZS5maXhlZCkpLGMudmFsdWU9ci52YWx1ZS5maWx0ZXIoKGU9PlwicmlnaHRcIj09PWUuZml4ZWQpKSxkLnZhbHVlLmxlbmd0aD4wJiZyLnZhbHVlWzBdJiZcInNlbGVjdGlvblwiPT09ci52YWx1ZVswXS50eXBlJiYhci52YWx1ZVswXS5maXhlZCYmKHIudmFsdWVbMF0uZml4ZWQ9ITAsZC52YWx1ZS51bnNoaWZ0KHIudmFsdWVbMF0pKTtjb25zdCBlPXIudmFsdWUuZmlsdGVyKChlPT4hZS5maXhlZCkpO3MudmFsdWU9W10uY29uY2F0KGQudmFsdWUpLmNvbmNhdChlKS5jb25jYXQoYy52YWx1ZSk7Y29uc3QgdD1KdShlKSxsPUp1KGQudmFsdWUpLGE9SnUoYy52YWx1ZSk7Zi52YWx1ZT10Lmxlbmd0aCxnLnZhbHVlPWwubGVuZ3RoLGIudmFsdWU9YS5sZW5ndGgsdS52YWx1ZT1bXS5jb25jYXQobCkuY29uY2F0KHQpLmNvbmNhdChhKSxpLnZhbHVlPWQudmFsdWUubGVuZ3RoPjB8fGMudmFsdWUubGVuZ3RoPjB9LFA9KGUsdCxsKT0+e00udmFsdWUmJk0udmFsdWUhPT1lJiYoTS52YWx1ZS5vcmRlcj1udWxsKSxNLnZhbHVlPWUsVC52YWx1ZT10LE4udmFsdWU9bH0sVj0oKT0+e2xldCBlPVEobyk7T2JqZWN0LmtleXMoUy52YWx1ZSkuZm9yRWFjaCgodD0+e2NvbnN0IGw9Uy52YWx1ZVt0XTtpZighbHx8MD09PWwubGVuZ3RoKXJldHVybjtjb25zdCBhPWp1KHtjb2x1bW5zOnUudmFsdWV9LHQpO2EmJmEuZmlsdGVyTWV0aG9kJiYoZT1lLmZpbHRlcigoZT0+bC5zb21lKCh0PT5hLmZpbHRlck1ldGhvZC5jYWxsKG51bGwsdCxlLGEpKSkpKSl9KSksRS52YWx1ZT1lfSxJPSgpPT57bi52YWx1ZT0oKGUsdCk9Pntjb25zdCBsPXQuc29ydGluZ0NvbHVtbjtyZXR1cm4gbCYmXCJzdHJpbmdcIiE9dHlwZW9mIGwuc29ydGFibGU/V3UoZSx0LnNvcnRQcm9wLHQuc29ydE9yZGVyLGwuc29ydE1ldGhvZCxsLnNvcnRCeSk6ZX0pKEUudmFsdWUse3NvcnRpbmdDb2x1bW46TS52YWx1ZSxzb3J0UHJvcDpULnZhbHVlLHNvcnRPcmRlcjpOLnZhbHVlfSl9LHtzZXRFeHBhbmRSb3dLZXlzOkEsdG9nZ2xlUm93RXhwYW5zaW9uOkIsdXBkYXRlRXhwYW5kUm93czpMLHN0YXRlczp6LGlzUm93RXhwYW5kZWQ6Rn09ZnVuY3Rpb24oZSl7Y29uc3QgbD12KCksYT10KCExKSxuPXQoW10pO3JldHVybnt1cGRhdGVFeHBhbmRSb3dzOigpPT57Y29uc3QgdD1lLmRhdGEudmFsdWV8fFtdLGw9ZS5yb3dLZXkudmFsdWU7aWYoYS52YWx1ZSluLnZhbHVlPXQuc2xpY2UoKTtlbHNlIGlmKGwpe2NvbnN0IGU9cXUobi52YWx1ZSxsKTtuLnZhbHVlPXQucmVkdWNlKCgodCxhKT0+e2NvbnN0IG49WXUoYSxsKTtyZXR1cm4gZVtuXSYmdC5wdXNoKGEpLHR9KSxbXSl9ZWxzZSBuLnZhbHVlPVtdfSx0b2dnbGVSb3dFeHBhbnNpb246KGUsdCk9PntRdShuLnZhbHVlLGUsdCkmJihsLmVtaXQoXCJleHBhbmQtY2hhbmdlXCIsZSxuLnZhbHVlLnNsaWNlKCkpLGwuc3RvcmUuc2NoZWR1bGVMYXlvdXQoKSl9LHNldEV4cGFuZFJvd0tleXM6dD0+e2wuc3RvcmUuYXNzZXJ0Um93S2V5KCk7Y29uc3QgYT1lLmRhdGEudmFsdWV8fFtdLG89ZS5yb3dLZXkudmFsdWUsaT1xdShhLG8pO24udmFsdWU9dC5yZWR1Y2UoKChlLHQpPT57Y29uc3QgbD1pW3RdO3JldHVybiBsJiZlLnB1c2gobC5yb3cpLGV9KSxbXSl9LGlzUm93RXhwYW5kZWQ6dD0+e2NvbnN0IGw9ZS5yb3dLZXkudmFsdWU7cmV0dXJuIGw/ISFxdShuLnZhbHVlLGwpW1l1KHQsbCldOi0xIT09bi52YWx1ZS5pbmRleE9mKHQpfSxzdGF0ZXM6e2V4cGFuZFJvd3M6bixkZWZhdWx0RXhwYW5kQWxsOmF9fX0oe2RhdGE6bixyb3dLZXk6YX0pLHt1cGRhdGVUcmVlRXhwYW5kS2V5czokLHRvZ2dsZVRyZWVFeHBhbnNpb246Uixsb2FkT3JUb2dnbGU6SCxzdGF0ZXM6V309ZnVuY3Rpb24oZSl7Y29uc3QgYT10KFtdKSxuPXQoe30pLG89dCgxNiksaT10KCExKSxyPXQoe30pLHM9dChcImhhc0NoaWxkcmVuXCIpLHU9dChcImNoaWxkcmVuXCIpLGQ9digpLGM9bCgoKCk9PntpZighZS5yb3dLZXkudmFsdWUpcmV0dXJue307Y29uc3QgdD1lLmRhdGEudmFsdWV8fFtdO3JldHVybiBoKHQpfSkpLHA9bCgoKCk9Pntjb25zdCB0PWUucm93S2V5LnZhbHVlLGw9T2JqZWN0LmtleXMoci52YWx1ZSksYT17fTtyZXR1cm4gbC5sZW5ndGg/KGwuZm9yRWFjaCgoZT0+e2lmKHIudmFsdWVbZV0ubGVuZ3RoKXtjb25zdCBsPXtjaGlsZHJlbjpbXX07ci52YWx1ZVtlXS5mb3JFYWNoKChlPT57Y29uc3Qgbj1ZdShlLHQpO2wuY2hpbGRyZW4ucHVzaChuKSxlW3MudmFsdWVdJiYhYVtuXSYmKGFbbl09e2NoaWxkcmVuOltdfSl9KSksYVtlXT1sfX0pKSxhKTphfSkpLGg9dD0+e2NvbnN0IGw9ZS5yb3dLZXkudmFsdWUsYT17fTtyZXR1cm4gWnUodCwoKGUsdCxuKT0+e2NvbnN0IG89WXUoZSxsKTtBcnJheS5pc0FycmF5KHQpP2Fbb109e2NoaWxkcmVuOnQubWFwKChlPT5ZdShlLGwpKSksbGV2ZWw6bn06aS52YWx1ZSYmKGFbb109e2NoaWxkcmVuOltdLGxhenk6ITAsbGV2ZWw6bn0pfSksdS52YWx1ZSxzLnZhbHVlKSxhfSxtPSgpPT57dmFyIGUsdDtjb25zdCBsPWMudmFsdWUsbz1wLnZhbHVlLHI9T2JqZWN0LmtleXMobCkscz17fTtpZihyLmxlbmd0aCl7Y29uc3QgdD1RKG4pLHU9bnVsbD09PShlPWQuc3RvcmUpfHx2b2lkIDA9PT1lP3ZvaWQgMDplLnN0YXRlcy5kZWZhdWx0RXhwYW5kQWxsLnZhbHVlLGM9W10scD0oZSx0KT0+e2NvbnN0IGw9dXx8YS52YWx1ZSYmLTEhPT1hLnZhbHVlLmluZGV4T2YodCk7cmV0dXJuISEoZSYmZS5leHBhbmRlZHx8bCl9O3IuZm9yRWFjaCgoZT0+e2NvbnN0IGE9dFtlXSxuPU9iamVjdC5hc3NpZ24oe30sbFtlXSk7aWYobi5leHBhbmRlZD1wKGEsZSksbi5sYXp5KXtjb25zdHtsb2FkZWQ6dD0hMSxsb2FkaW5nOmw9ITF9PWF8fHt9O24ubG9hZGVkPSEhdCxuLmxvYWRpbmc9ISFsLGMucHVzaChlKX1zW2VdPW59KSk7Y29uc3QgaD1PYmplY3Qua2V5cyhvKTtpLnZhbHVlJiZoLmxlbmd0aCYmYy5sZW5ndGgmJmguZm9yRWFjaCgoZT0+e2NvbnN0IGw9dFtlXSxhPW9bZV0uY2hpbGRyZW47aWYoLTEhPT1jLmluZGV4T2YoZSkpe2lmKDAhPT1zW2VdLmNoaWxkcmVuLmxlbmd0aCl0aHJvdyBuZXcgRXJyb3IoXCJbRWxUYWJsZV1jaGlsZHJlbiBtdXN0IGJlIGFuIGVtcHR5IGFycmF5LlwiKTtzW2VdLmNoaWxkcmVuPWF9ZWxzZXtjb25zdHtsb2FkZWQ6dD0hMSxsb2FkaW5nOm49ITF9PWx8fHt9O3NbZV09e2xhenk6ITAsbG9hZGVkOiEhdCxsb2FkaW5nOiEhbixleHBhbmRlZDpwKGwsZSksY2hpbGRyZW46YSxsZXZlbDpcIlwifX19KSl9bi52YWx1ZT1zLG51bGw9PT0odD1kLnN0b3JlKXx8dm9pZCAwPT09dHx8dC51cGRhdGVUYWJsZVNjcm9sbFkoKX07eSgoKCk9PmMudmFsdWUpLG0pLHkoKCgpPT5wLnZhbHVlKSxtKTtjb25zdCBmPSh0LGwpPT57ZC5zdG9yZS5hc3NlcnRSb3dLZXkoKTtjb25zdCBhPWUucm93S2V5LnZhbHVlLG89WXUodCxhKSxpPW8mJm4udmFsdWVbb107aWYobyYmaSYmXCJleHBhbmRlZFwiaW4gaSl7Y29uc3QgZT1pLmV4cGFuZGVkO2w9dm9pZCAwPT09bD8haS5leHBhbmRlZDpsLG4udmFsdWVbb10uZXhwYW5kZWQ9bCxlIT09bCYmZC5lbWl0KFwiZXhwYW5kLWNoYW5nZVwiLHQsbCksZC5zdG9yZS51cGRhdGVUYWJsZVNjcm9sbFkoKX19LGc9KGUsdCxsKT0+e2NvbnN0e2xvYWQ6YX09ZC5wcm9wczthJiYhbi52YWx1ZVt0XS5sb2FkZWQmJihuLnZhbHVlW3RdLmxvYWRpbmc9ITAsYShlLGwsKGw9PntpZighQXJyYXkuaXNBcnJheShsKSl0aHJvdyBuZXcgRXJyb3IoXCJbRWxUYWJsZV0gZGF0YSBtdXN0IGJlIGFuIGFycmF5XCIpO24udmFsdWVbdF0ubG9hZGluZz0hMSxuLnZhbHVlW3RdLmxvYWRlZD0hMCxuLnZhbHVlW3RdLmV4cGFuZGVkPSEwLGwubGVuZ3RoJiYoci52YWx1ZVt0XT1sKSxkLmVtaXQoXCJleHBhbmQtY2hhbmdlXCIsZSwhMCl9KSkpfTtyZXR1cm57bG9hZERhdGE6Zyxsb2FkT3JUb2dnbGU6dD0+e2Quc3RvcmUuYXNzZXJ0Um93S2V5KCk7Y29uc3QgbD1lLnJvd0tleS52YWx1ZSxhPVl1KHQsbCksbz1uLnZhbHVlW2FdO2kudmFsdWUmJm8mJlwibG9hZGVkXCJpbiBvJiYhby5sb2FkZWQ/Zyh0LGEsbyk6Zih0LHZvaWQgMCl9LHRvZ2dsZVRyZWVFeHBhbnNpb246Zix1cGRhdGVUcmVlRXhwYW5kS2V5czplPT57YS52YWx1ZT1lLG0oKX0sdXBkYXRlVHJlZURhdGE6bSxub3JtYWxpemU6aCxzdGF0ZXM6e2V4cGFuZFJvd0tleXM6YSx0cmVlRGF0YTpuLGluZGVudDpvLGxhenk6aSxsYXp5VHJlZU5vZGVNYXA6cixsYXp5Q29sdW1uSWRlbnRpZmllcjpzLGNoaWxkcmVuQ29sdW1uTmFtZTp1fX19KHtkYXRhOm4scm93S2V5OmF9KSx7dXBkYXRlQ3VycmVudFJvd0RhdGE6aix1cGRhdGVDdXJyZW50Um93Okssc2V0Q3VycmVudFJvd0tleTpZLHN0YXRlczpxfT1mdW5jdGlvbihlKXtjb25zdCBsPXYoKSxhPXQobnVsbCksbj10KG51bGwpLG89KCk9PnthLnZhbHVlPW51bGx9LGk9dD0+e2NvbnN0e2RhdGE6bD1bXSxyb3dLZXk6YX09ZTtsZXQgbz1udWxsO2EudmFsdWUmJihvPVVlKFEobCksKGU9Pll1KGUsYS52YWx1ZSk9PT10KSkpLG4udmFsdWU9b307cmV0dXJue3NldEN1cnJlbnRSb3dLZXk6ZT0+e2wuc3RvcmUuYXNzZXJ0Um93S2V5KCksYS52YWx1ZT1lLGkoZSl9LHJlc3RvcmVDdXJyZW50Um93S2V5Om8sc2V0Q3VycmVudFJvd0J5S2V5OmksdXBkYXRlQ3VycmVudFJvdzplPT57Y29uc3QgdD1uLnZhbHVlO2lmKGUmJmUhPT10KXJldHVybiBuLnZhbHVlPWUsdm9pZCBsLmVtaXQoXCJjdXJyZW50LWNoYW5nZVwiLG4udmFsdWUsdCk7IWUmJnQmJihuLnZhbHVlPW51bGwsbC5lbWl0KFwiY3VycmVudC1jaGFuZ2VcIixudWxsLHQpKX0sdXBkYXRlQ3VycmVudFJvd0RhdGE6KCk9Pntjb25zdCB0PWUucm93S2V5LnZhbHVlLHI9ZS5kYXRhLnZhbHVlfHxbXSxzPW4udmFsdWU7aWYoLTE9PT1yLmluZGV4T2YocykmJnMpe2lmKHQpe2NvbnN0IGU9WXUocyx0KTtpKGUpfWVsc2Ugbi52YWx1ZT1udWxsO251bGw9PT1uLnZhbHVlJiZsLmVtaXQoXCJjdXJyZW50LWNoYW5nZVwiLG51bGwscyl9ZWxzZSBhLnZhbHVlJiYoaShhLnZhbHVlKSxvKCkpfSxzdGF0ZXM6e19jdXJyZW50Um93S2V5OmEsY3VycmVudFJvdzpufX19KHtkYXRhOm4scm93S2V5OmF9KTtyZXR1cm57YXNzZXJ0Um93S2V5OigpPT57aWYoIWEudmFsdWUpdGhyb3cgbmV3IEVycm9yKFwiW0VsVGFibGVdIHByb3Agcm93LWtleSBpcyByZXF1aXJlZFwiKX0sdXBkYXRlQ29sdW1uczpPLHNjaGVkdWxlTGF5b3V0Oih0LGw9ITEpPT57dCYmTygpLGw/ZS5zdGF0ZS5kb0xheW91dCgpOmUuc3RhdGUuZGVib3VuY2VkVXBkYXRlTGF5b3V0KCl9LGlzU2VsZWN0ZWQ6ZT0+Qy52YWx1ZS5pbmRleE9mKGUpPi0xLGNsZWFyU2VsZWN0aW9uOigpPT57ay52YWx1ZT0hMTtDLnZhbHVlLmxlbmd0aCYmKEMudmFsdWU9W10sZS5lbWl0KFwic2VsZWN0aW9uLWNoYW5nZVwiLFtdKSl9LGNsZWFuU2VsZWN0aW9uOigpPT57bGV0IHQ7aWYoYS52YWx1ZSl7dD1bXTtjb25zdCBlPXF1KEMudmFsdWUsYS52YWx1ZSksbD1xdShuLnZhbHVlLGEudmFsdWUpO2Zvcihjb25zdCBhIGluIGUpZS5oYXNPd25Qcm9wZXJ0eShhKSYmIWxbYV0mJnQucHVzaChlW2FdLnJvdyl9ZWxzZSB0PUMudmFsdWUuZmlsdGVyKChlPT4tMT09PW4udmFsdWUuaW5kZXhPZihlKSkpO2lmKHQubGVuZ3RoKXtjb25zdCBsPUMudmFsdWUuZmlsdGVyKChlPT4tMT09PXQuaW5kZXhPZihlKSkpO0MudmFsdWU9bCxlLmVtaXQoXCJzZWxlY3Rpb24tY2hhbmdlXCIsbC5zbGljZSgpKX19LHRvZ2dsZVJvd1NlbGVjdGlvbjoodCxsLGE9ITApPT57aWYoUXUoQy52YWx1ZSx0LGwpKXtjb25zdCBsPShDLnZhbHVlfHxbXSkuc2xpY2UoKTthJiZlLmVtaXQoXCJzZWxlY3RcIixsLHQpLGUuZW1pdChcInNlbGVjdGlvbi1jaGFuZ2VcIixsKX19LF90b2dnbGVBbGxTZWxlY3Rpb246KCk9Pntjb25zdCB0PXcudmFsdWU/IWsudmFsdWU6IShrLnZhbHVlfHxDLnZhbHVlLmxlbmd0aCk7ay52YWx1ZT10O2xldCBsPSExO24udmFsdWUuZm9yRWFjaCgoKGUsYSk9PntfLnZhbHVlP18udmFsdWUuY2FsbChudWxsLGUsYSkmJlF1KEMudmFsdWUsZSx0KSYmKGw9ITApOlF1KEMudmFsdWUsZSx0KSYmKGw9ITApfSkpLGwmJmUuZW1pdChcInNlbGVjdGlvbi1jaGFuZ2VcIixDLnZhbHVlP0MudmFsdWUuc2xpY2UoKTpbXSksZS5lbWl0KFwic2VsZWN0LWFsbFwiLEMudmFsdWUpfSx1cGRhdGVTZWxlY3Rpb25CeVJvd0tleTooKT0+e2NvbnN0IGU9cXUoQy52YWx1ZSxhLnZhbHVlKTtuLnZhbHVlLmZvckVhY2goKHQ9Pntjb25zdCBsPVl1KHQsYS52YWx1ZSksbj1lW2xdO24mJihDLnZhbHVlW24uaW5kZXhdPXQpfSkpfSx1cGRhdGVBbGxTZWxlY3RlZDooKT0+e3ZhciBlO2lmKDA9PT0obnVsbD09PShlPW4udmFsdWUpfHx2b2lkIDA9PT1lP3ZvaWQgMDplLmxlbmd0aCkpcmV0dXJuIHZvaWQoay52YWx1ZT0hMSk7bGV0IHQ7YS52YWx1ZSYmKHQ9cXUoQy52YWx1ZSxhLnZhbHVlKSk7bGV0IGw9ITAsbz0wO2ZvcihsZXQgZT0wLHI9KG4udmFsdWV8fFtdKS5sZW5ndGg7ZTxyO2UrKyl7Y29uc3Qgcj1uLnZhbHVlW2VdLHM9Xy52YWx1ZSYmXy52YWx1ZS5jYWxsKG51bGwscixlKTtpZihpPXIsdD90W1l1KGksYS52YWx1ZSldOi0xIT09Qy52YWx1ZS5pbmRleE9mKGkpKW8rKztlbHNlIGlmKCFfLnZhbHVlfHxzKXtsPSExO2JyZWFrfX12YXIgaTswPT09byYmKGw9ITEpLGsudmFsdWU9bH0sdXBkYXRlRmlsdGVyczooZSx0KT0+e0FycmF5LmlzQXJyYXkoZSl8fChlPVtlXSk7Y29uc3QgbD17fTtyZXR1cm4gZS5mb3JFYWNoKChlPT57Uy52YWx1ZVtlLmlkXT10LGxbZS5jb2x1bW5LZXl8fGUuaWRdPXR9KSksbH0sdXBkYXRlQ3VycmVudFJvdzpLLHVwZGF0ZVNvcnQ6UCxleGVjRmlsdGVyOlYsZXhlY1NvcnQ6SSxleGVjUXVlcnk6ZT0+e2UmJmUuZmlsdGVyfHxWKCksSSgpfSxjbGVhckZpbHRlcjp0PT57Y29uc3R7dGFibGVIZWFkZXI6bCxmaXhlZFRhYmxlSGVhZGVyOmEscmlnaHRGaXhlZFRhYmxlSGVhZGVyOm59PWUucmVmcztsZXQgbz17fTtsJiYobz1PYmplY3QuYXNzaWduKG8sbC5maWx0ZXJQYW5lbHMpKSxhJiYobz1PYmplY3QuYXNzaWduKG8sYS5maWx0ZXJQYW5lbHMpKSxuJiYobz1PYmplY3QuYXNzaWduKG8sbi5maWx0ZXJQYW5lbHMpKTtjb25zdCBpPU9iamVjdC5rZXlzKG8pO2lmKGkubGVuZ3RoKWlmKFwic3RyaW5nXCI9PXR5cGVvZiB0JiYodD1bdF0pLEFycmF5LmlzQXJyYXkodCkpe2NvbnN0IGw9dC5tYXAoKGU9PmZ1bmN0aW9uKGUsdCl7bGV0IGw9bnVsbDtmb3IobGV0IGE9MDthPGUuY29sdW1ucy5sZW5ndGg7YSsrKXtjb25zdCBuPWUuY29sdW1uc1thXTtpZihuLmNvbHVtbktleT09PXQpe2w9bjticmVha319cmV0dXJuIGx9KHtjb2x1bW5zOnUudmFsdWV9LGUpKSk7aS5mb3JFYWNoKChlPT57Y29uc3QgdD1sLmZpbmQoKHQ9PnQuaWQ9PT1lKSk7dCYmKHQuZmlsdGVyZWRWYWx1ZT1bXSl9KSksZS5zdG9yZS5jb21taXQoXCJmaWx0ZXJDaGFuZ2VcIix7Y29sdW1uOmwsdmFsdWVzOltdLHNpbGVudDohMCxtdWx0aTohMH0pfWVsc2UgaS5mb3JFYWNoKChlPT57Y29uc3QgdD11LnZhbHVlLmZpbmQoKHQ9PnQuaWQ9PT1lKSk7dCYmKHQuZmlsdGVyZWRWYWx1ZT1bXSl9KSksUy52YWx1ZT17fSxlLnN0b3JlLmNvbW1pdChcImZpbHRlckNoYW5nZVwiLHtjb2x1bW46e30sdmFsdWVzOltdLHNpbGVudDohMH0pfSxjbGVhclNvcnQ6KCk9PntNLnZhbHVlJiYoUChudWxsLG51bGwsbnVsbCksZS5zdG9yZS5jb21taXQoXCJjaGFuZ2VTb3J0Q29uZGl0aW9uXCIse3NpbGVudDohMH0pKX0sdG9nZ2xlUm93RXhwYW5zaW9uOkIsc2V0RXhwYW5kUm93S2V5c0FkYXB0ZXI6ZT0+e0EoZSksJChlKX0sc2V0Q3VycmVudFJvd0tleTpZLHRvZ2dsZVJvd0V4cGFuc2lvbkFkYXB0ZXI6KGUsdCk9Pnt1LnZhbHVlLnNvbWUoKCh7dHlwZTplfSk9PlwiZXhwYW5kXCI9PT1lKSk/QihlLHQpOlIoZSx0KX0saXNSb3dFeHBhbmRlZDpGLHVwZGF0ZUV4cGFuZFJvd3M6TCx1cGRhdGVDdXJyZW50Um93RGF0YTpqLGxvYWRPclRvZ2dsZTpILHN0YXRlczpPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7cm93S2V5OmEsZGF0YTpuLF9kYXRhOm8saXNDb21wbGV4OmksX2NvbHVtbnM6cixvcmlnaW5Db2x1bW5zOnMsY29sdW1uczp1LGZpeGVkQ29sdW1uczpkLHJpZ2h0Rml4ZWRDb2x1bW5zOmMsbGVhZkNvbHVtbnM6cCxmaXhlZExlYWZDb2x1bW5zOmgscmlnaHRGaXhlZExlYWZDb2x1bW5zOm0sbGVhZkNvbHVtbnNMZW5ndGg6ZixmaXhlZExlYWZDb2x1bW5zTGVuZ3RoOmcscmlnaHRGaXhlZExlYWZDb2x1bW5zTGVuZ3RoOmIsaXNBbGxTZWxlY3RlZDprLHNlbGVjdGlvbjpDLHJlc2VydmVTZWxlY3Rpb246eCxzZWxlY3RPbkluZGV0ZXJtaW5hdGU6dyxzZWxlY3RhYmxlOl8sZmlsdGVyczpTLGZpbHRlcmVkRGF0YTpFLHNvcnRpbmdDb2x1bW46TSxzb3J0UHJvcDpULHNvcnRPcmRlcjpOLGhvdmVyUm93OkR9LHopLFcpLHEpfX1mdW5jdGlvbiB0ZChlLHQpe3JldHVybiBlLm1hcCgoZT0+e3ZhciBsO3JldHVybiBlLmlkPT09dC5pZD90OigobnVsbD09PShsPWUuY2hpbGRyZW4pfHx2b2lkIDA9PT1sP3ZvaWQgMDpsLmxlbmd0aCk+MCYmKGUuY2hpbGRyZW49dGQoZS5jaGlsZHJlbix0KSksZSl9KSl9ZnVuY3Rpb24gbGQoZSx0PXt9KXtpZighZSl0aHJvdyBuZXcgRXJyb3IoXCJUYWJsZSBpcyByZXF1aXJlZC5cIik7Y29uc3QgbD1mdW5jdGlvbigpe2NvbnN0IGU9digpLHQ9e3NldERhdGEodCxsKXtjb25zdCBhPVEodC5kYXRhKSE9PWw7dC5kYXRhLnZhbHVlPWwsdC5fZGF0YS52YWx1ZT1sLGUuc3RvcmUuZXhlY1F1ZXJ5KCksZS5zdG9yZS51cGRhdGVDdXJyZW50Um93RGF0YSgpLGUuc3RvcmUudXBkYXRlRXhwYW5kUm93cygpLFEodC5yZXNlcnZlU2VsZWN0aW9uKT8oZS5zdG9yZS5hc3NlcnRSb3dLZXkoKSxlLnN0b3JlLnVwZGF0ZVNlbGVjdGlvbkJ5Um93S2V5KCkpOmE/ZS5zdG9yZS5jbGVhclNlbGVjdGlvbigpOmUuc3RvcmUuY2xlYW5TZWxlY3Rpb24oKSxlLnN0b3JlLnVwZGF0ZUFsbFNlbGVjdGVkKCksZS5zdG9yZS51cGRhdGVUYWJsZVNjcm9sbFkoKX0saW5zZXJ0Q29sdW1uKHQsbCxhLG4pe2lmKGE8LTEpcmV0dXJuO2NvbnN0IG89USh0Ll9jb2x1bW5zKTtpZihuKXtuJiYhbi5jaGlsZHJlbiYmKG4uY2hpbGRyZW49W10pLG4uY2hpbGRyZW4ucHVzaChsKTtjb25zdCBlPXRkKG8sbik7dC5fY29sdW1ucy52YWx1ZT1lfWVsc2Ugby5zcGxpY2UoYSwwLGwpLHQuX2NvbHVtbnMudmFsdWU9bztcInNlbGVjdGlvblwiPT09bC50eXBlJiYodC5zZWxlY3RhYmxlLnZhbHVlPWwuc2VsZWN0YWJsZSx0LnJlc2VydmVTZWxlY3Rpb24udmFsdWU9bC5yZXNlcnZlU2VsZWN0aW9uKSxlLiRyZWFkeSYmKGUuc3RvcmUudXBkYXRlQ29sdW1ucygpLGUuc3RvcmUuc2NoZWR1bGVMYXlvdXQoKSl9LHJlbW92ZUNvbHVtbih0LGwsYSl7Y29uc3Qgbj1RKHQuX2NvbHVtbnMpfHxbXTthPyhhLmNoaWxkcmVuLnNwbGljZShhLmNoaWxkcmVuLmZpbmRJbmRleCgoZT0+ZS5pZD09PWwuaWQpKSwxKSx0Ll9jb2x1bW5zLnZhbHVlPXRkKG4sYSkpOihuLnNwbGljZShuLmluZGV4T2YobCksMSksdC5fY29sdW1ucy52YWx1ZT1uKSxlLiRyZWFkeSYmKGUuc3RvcmUudXBkYXRlQ29sdW1ucygpLGUuc3RvcmUuc2NoZWR1bGVMYXlvdXQoKSl9LHNvcnQodCxsKXtjb25zdHtwcm9wOmEsb3JkZXI6bixpbml0Om99PWw7aWYoYSl7Y29uc3QgbD1VZShRKHQuY29sdW1ucyksKGU9PmUucHJvcGVydHk9PT1hKSk7bCYmKGwub3JkZXI9bixlLnN0b3JlLnVwZGF0ZVNvcnQobCxhLG4pLGUuc3RvcmUuY29tbWl0KFwiY2hhbmdlU29ydENvbmRpdGlvblwiLHtpbml0Om99KSl9fSxjaGFuZ2VTb3J0Q29uZGl0aW9uKHQsbCl7Y29uc3R7c29ydGluZ0NvbHVtbjphLHNvcnRQcm9wOm4sc29ydE9yZGVyOm99PXQ7bnVsbD09PVEobykmJih0LnNvcnRpbmdDb2x1bW4udmFsdWU9bnVsbCx0LnNvcnRQcm9wLnZhbHVlPW51bGwpLGUuc3RvcmUuZXhlY1F1ZXJ5KHtmaWx0ZXI6ITB9KSxsJiYobC5zaWxlbnR8fGwuaW5pdCl8fGUuZW1pdChcInNvcnQtY2hhbmdlXCIse2NvbHVtbjpRKGEpLHByb3A6UShuKSxvcmRlcjpRKG8pfSksZS5zdG9yZS51cGRhdGVUYWJsZVNjcm9sbFkoKX0sZmlsdGVyQ2hhbmdlKHQsbCl7Y29uc3R7Y29sdW1uOmEsdmFsdWVzOm4sc2lsZW50Om99PWwsaT1lLnN0b3JlLnVwZGF0ZUZpbHRlcnMoYSxuKTtlLnN0b3JlLmV4ZWNRdWVyeSgpLG98fGUuZW1pdChcImZpbHRlci1jaGFuZ2VcIixpKSxlLnN0b3JlLnVwZGF0ZVRhYmxlU2Nyb2xsWSgpfSx0b2dnbGVBbGxTZWxlY3Rpb24oKXtlLnN0b3JlLnRvZ2dsZUFsbFNlbGVjdGlvbigpfSxyb3dTZWxlY3RlZENoYW5nZWQodCxsKXtlLnN0b3JlLnRvZ2dsZVJvd1NlbGVjdGlvbihsKSxlLnN0b3JlLnVwZGF0ZUFsbFNlbGVjdGVkKCl9LHNldEhvdmVyUm93KGUsdCl7ZS5ob3ZlclJvdy52YWx1ZT10fSxzZXRDdXJyZW50Um93KHQsbCl7ZS5zdG9yZS51cGRhdGVDdXJyZW50Um93KGwpfX0sbD1lZCgpO3JldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sbCkse211dGF0aW9uczp0LGNvbW1pdDpmdW5jdGlvbih0LC4uLmwpe2NvbnN0IGE9ZS5zdG9yZS5tdXRhdGlvbnM7aWYoIWFbdF0pdGhyb3cgbmV3IEVycm9yKFwiQWN0aW9uIG5vdCBmb3VuZDogXCIrdCk7YVt0XS5hcHBseShlLFtlLnN0b3JlLnN0YXRlc10uY29uY2F0KGwpKX0sdXBkYXRlVGFibGVTY3JvbGxZOmZ1bmN0aW9uKCl7ayhlLmxheW91dC51cGRhdGVTY3JvbGxZLmFwcGx5KGUubGF5b3V0KSl9fSl9KCk7cmV0dXJuIGwudG9nZ2xlQWxsU2VsZWN0aW9uPWxlKGwuX3RvZ2dsZUFsbFNlbGVjdGlvbiwxMCksT2JqZWN0LmtleXModCkuZm9yRWFjaCgoZT0+e2wuc3RhdGVzW2VdLnZhbHVlPXRbZV19KSksbH1jbGFzcyBhZHtjb25zdHJ1Y3RvcihlKXt0aGlzLm9ic2VydmVycz1bXSx0aGlzLnRhYmxlPW51bGwsdGhpcy5zdG9yZT1udWxsLHRoaXMuY29sdW1ucz1bXSx0aGlzLmZpdD0hMCx0aGlzLnNob3dIZWFkZXI9ITAsdGhpcy5oZWlnaHQ9dChudWxsKSx0aGlzLnNjcm9sbFg9dCghMSksdGhpcy5zY3JvbGxZPXQoITEpLHRoaXMuYm9keVdpZHRoPXQobnVsbCksdGhpcy5maXhlZFdpZHRoPXQobnVsbCksdGhpcy5yaWdodEZpeGVkV2lkdGg9dChudWxsKSx0aGlzLnRhYmxlSGVpZ2h0PXQobnVsbCksdGhpcy5oZWFkZXJIZWlnaHQ9dCg0NCksdGhpcy5hcHBlbmRIZWlnaHQ9dCgwKSx0aGlzLmZvb3RlckhlaWdodD10KDQ0KSx0aGlzLnZpZXdwb3J0SGVpZ2h0PXQobnVsbCksdGhpcy5ib2R5SGVpZ2h0PXQobnVsbCksdGhpcy5maXhlZEJvZHlIZWlnaHQ9dChudWxsKSx0aGlzLmd1dHRlcldpZHRoPWh0KCk7Zm9yKGNvbnN0IHQgaW4gZSllLmhhc093blByb3BlcnR5KHQpJiYoYih0aGlzW3RdKT90aGlzW3RdLnZhbHVlPWVbdF06dGhpc1t0XT1lW3RdKTtpZighdGhpcy50YWJsZSl0aHJvdyBuZXcgRXJyb3IoXCJ0YWJsZSBpcyByZXF1aXJlZCBmb3IgVGFibGUgTGF5b3V0XCIpO2lmKCF0aGlzLnN0b3JlKXRocm93IG5ldyBFcnJvcihcInN0b3JlIGlzIHJlcXVpcmVkIGZvciBUYWJsZSBMYXlvdXRcIil9dXBkYXRlU2Nyb2xsWSgpe2lmKG51bGw9PT10aGlzLmhlaWdodC52YWx1ZSlyZXR1cm4hMTtjb25zdCBlPXRoaXMudGFibGUucmVmcy5ib2R5V3JhcHBlcjtpZih0aGlzLnRhYmxlLnZub2RlLmVsJiZlKXtjb25zdCB0PWUucXVlcnlTZWxlY3RvcihcIi5lbC10YWJsZV9fYm9keVwiKSxsPXRoaXMuc2Nyb2xsWS52YWx1ZSxhPXQub2Zmc2V0SGVpZ2h0PnRoaXMuYm9keUhlaWdodC52YWx1ZTtyZXR1cm4gdGhpcy5zY3JvbGxZLnZhbHVlPWEsbCE9PWF9cmV0dXJuITF9c2V0SGVpZ2h0KGUsdD1cImhlaWdodFwiKXtpZih6ZSlyZXR1cm47Y29uc3QgbD10aGlzLnRhYmxlLnZub2RlLmVsO2lmKGU9WHUoZSksdGhpcy5oZWlnaHQudmFsdWU9TnVtYmVyKGUpLCFsJiYoZXx8MD09PWUpKXJldHVybiBrKCgoKT0+dGhpcy5zZXRIZWlnaHQoZSx0KSkpO1wibnVtYmVyXCI9PXR5cGVvZiBlPyhsLnN0eWxlW3RdPWUrXCJweFwiLHRoaXMudXBkYXRlRWxzSGVpZ2h0KCkpOlwic3RyaW5nXCI9PXR5cGVvZiBlJiYobC5zdHlsZVt0XT1lLHRoaXMudXBkYXRlRWxzSGVpZ2h0KCkpfXNldE1heEhlaWdodChlKXt0aGlzLnNldEhlaWdodChlLFwibWF4LWhlaWdodFwiKX1nZXRGbGF0dGVuQ29sdW1ucygpe2NvbnN0IGU9W107cmV0dXJuIHRoaXMudGFibGUuc3RvcmUuc3RhdGVzLmNvbHVtbnMudmFsdWUuZm9yRWFjaCgodD0+e3QuaXNDb2x1bW5Hcm91cD9lLnB1c2guYXBwbHkoZSx0LmNvbHVtbnMpOmUucHVzaCh0KX0pKSxlfXVwZGF0ZUVsc0hlaWdodCgpe2lmKCF0aGlzLnRhYmxlLiRyZWFkeSlyZXR1cm4gaygoKCk9PnRoaXMudXBkYXRlRWxzSGVpZ2h0KCkpKTtjb25zdHtoZWFkZXJXcmFwcGVyOmUsYXBwZW5kV3JhcHBlcjp0LGZvb3RlcldyYXBwZXI6bH09dGhpcy50YWJsZS5yZWZzLGE9dCxuPWUsbz1sO2lmKHRoaXMuYXBwZW5kSGVpZ2h0LnZhbHVlPWE/YS5vZmZzZXRIZWlnaHQ6MCx0aGlzLnNob3dIZWFkZXImJiFuKXJldHVybjtjb25zdCBpPW4/bi5xdWVyeVNlbGVjdG9yKFwiLmVsLXRhYmxlX19oZWFkZXIgdHJcIik6bnVsbCxyPXRoaXMuaGVhZGVyRGlzcGxheU5vbmUoaSkscz10aGlzLmhlYWRlckhlaWdodC52YWx1ZT10aGlzLnNob3dIZWFkZXI/bi5vZmZzZXRIZWlnaHQ6MDtpZih0aGlzLnNob3dIZWFkZXImJiFyJiZuLm9mZnNldFdpZHRoPjAmJih0aGlzLnRhYmxlLnN0b3JlLnN0YXRlcy5jb2x1bW5zLnZhbHVlfHxbXSkubGVuZ3RoPjAmJnM8MilyZXR1cm4gaygoKCk9PnRoaXMudXBkYXRlRWxzSGVpZ2h0KCkpKTtjb25zdCB1PXRoaXMudGFibGVIZWlnaHQudmFsdWU9dGhpcy50YWJsZS52bm9kZS5lbC5jbGllbnRIZWlnaHQsZD10aGlzLmZvb3RlckhlaWdodC52YWx1ZT1vP28ub2Zmc2V0SGVpZ2h0OjA7bnVsbCE9PXRoaXMuaGVpZ2h0LnZhbHVlJiYodGhpcy5ib2R5SGVpZ2h0LnZhbHVlPXUtcy1kKyhvPzE6MCkpLHRoaXMuZml4ZWRCb2R5SGVpZ2h0LnZhbHVlPXRoaXMuc2Nyb2xsWC52YWx1ZT90aGlzLmJvZHlIZWlnaHQudmFsdWUtdGhpcy5ndXR0ZXJXaWR0aDp0aGlzLmJvZHlIZWlnaHQudmFsdWU7Y29uc3QgYz0hKHRoaXMuc3RvcmUuc3RhdGVzLmRhdGEudmFsdWUmJnRoaXMuc3RvcmUuc3RhdGVzLmRhdGEudmFsdWUubGVuZ3RoKTt0aGlzLnZpZXdwb3J0SGVpZ2h0LnZhbHVlPXRoaXMuc2Nyb2xsWC52YWx1ZT91LShjPzA6dGhpcy5ndXR0ZXJXaWR0aCk6dSx0aGlzLnVwZGF0ZVNjcm9sbFkoKSx0aGlzLm5vdGlmeU9ic2VydmVycyhcInNjcm9sbGFibGVcIil9aGVhZGVyRGlzcGxheU5vbmUoZSl7aWYoIWUpcmV0dXJuITA7bGV0IHQ9ZTtmb3IoO1wiRElWXCIhPT10LnRhZ05hbWU7KXtpZihcIm5vbmVcIj09PWdldENvbXB1dGVkU3R5bGUodCkuZGlzcGxheSlyZXR1cm4hMDt0PXQucGFyZW50RWxlbWVudH1yZXR1cm4hMX11cGRhdGVDb2x1bW5zV2lkdGgoKXtpZih6ZSlyZXR1cm47Y29uc3QgZT10aGlzLmZpdCx0PXRoaXMudGFibGUudm5vZGUuZWwuY2xpZW50V2lkdGg7bGV0IGw9MDtjb25zdCBhPXRoaXMuZ2V0RmxhdHRlbkNvbHVtbnMoKSxuPWEuZmlsdGVyKChlPT5cIm51bWJlclwiIT10eXBlb2YgZS53aWR0aCkpO2lmKGEuZm9yRWFjaCgoZT0+e1wibnVtYmVyXCI9PXR5cGVvZiBlLndpZHRoJiZlLnJlYWxXaWR0aCYmKGUucmVhbFdpZHRoPW51bGwpfSkpLG4ubGVuZ3RoPjAmJmUpe2EuZm9yRWFjaCgoZT0+e2wrPWUud2lkdGh8fGUubWluV2lkdGh8fDgwfSkpO2NvbnN0IGU9dGhpcy5zY3JvbGxZLnZhbHVlP3RoaXMuZ3V0dGVyV2lkdGg6MDtpZihsPD10LWUpe3RoaXMuc2Nyb2xsWC52YWx1ZT0hMTtjb25zdCBhPXQtZS1sO2lmKDE9PT1uLmxlbmd0aCluWzBdLnJlYWxXaWR0aD0oblswXS5taW5XaWR0aHx8ODApK2E7ZWxzZXtjb25zdCBlPWEvbi5yZWR1Y2UoKChlLHQpPT5lKyh0Lm1pbldpZHRofHw4MCkpLDApO2xldCB0PTA7bi5mb3JFYWNoKCgobCxhKT0+e2lmKDA9PT1hKXJldHVybjtjb25zdCBuPU1hdGguZmxvb3IoKGwubWluV2lkdGh8fDgwKSplKTt0Kz1uLGwucmVhbFdpZHRoPShsLm1pbldpZHRofHw4MCkrbn0pKSxuWzBdLnJlYWxXaWR0aD0oblswXS5taW5XaWR0aHx8ODApK2EtdH19ZWxzZSB0aGlzLnNjcm9sbFgudmFsdWU9ITAsbi5mb3JFYWNoKChmdW5jdGlvbihlKXtlLnJlYWxXaWR0aD1lLm1pbldpZHRofSkpO3RoaXMuYm9keVdpZHRoLnZhbHVlPU1hdGgubWF4KGwsdCksdGhpcy50YWJsZS5zdGF0ZS5yZXNpemVTdGF0ZS52YWx1ZS53aWR0aD10aGlzLmJvZHlXaWR0aC52YWx1ZX1lbHNlIGEuZm9yRWFjaCgoZT0+e2Uud2lkdGh8fGUubWluV2lkdGg/ZS5yZWFsV2lkdGg9ZS53aWR0aHx8ZS5taW5XaWR0aDplLnJlYWxXaWR0aD04MCxsKz1lLnJlYWxXaWR0aH0pKSx0aGlzLnNjcm9sbFgudmFsdWU9bD50LHRoaXMuYm9keVdpZHRoLnZhbHVlPWw7Y29uc3Qgbz10aGlzLnN0b3JlLnN0YXRlcy5maXhlZENvbHVtbnMudmFsdWU7aWYoby5sZW5ndGg+MCl7bGV0IGU9MDtvLmZvckVhY2goKGZ1bmN0aW9uKHQpe2UrPXQucmVhbFdpZHRofHx0LndpZHRofSkpLHRoaXMuZml4ZWRXaWR0aC52YWx1ZT1lfWNvbnN0IGk9dGhpcy5zdG9yZS5zdGF0ZXMucmlnaHRGaXhlZENvbHVtbnMudmFsdWU7aWYoaS5sZW5ndGg+MCl7bGV0IGU9MDtpLmZvckVhY2goKGZ1bmN0aW9uKHQpe2UrPXQucmVhbFdpZHRofHx0LndpZHRofSkpLHRoaXMucmlnaHRGaXhlZFdpZHRoLnZhbHVlPWV9dGhpcy5ub3RpZnlPYnNlcnZlcnMoXCJjb2x1bW5zXCIpLHRoaXMudXBkYXRlRWxzSGVpZ2h0KCl9YWRkT2JzZXJ2ZXIoZSl7dGhpcy5vYnNlcnZlcnMucHVzaChlKX1yZW1vdmVPYnNlcnZlcihlKXtjb25zdCB0PXRoaXMub2JzZXJ2ZXJzLmluZGV4T2YoZSk7LTEhPT10JiZ0aGlzLm9ic2VydmVycy5zcGxpY2UodCwxKX1ub3RpZnlPYnNlcnZlcnMoZSl7dGhpcy5vYnNlcnZlcnMuZm9yRWFjaCgodD0+e3ZhciBsLGE7c3dpdGNoKGUpe2Nhc2VcImNvbHVtbnNcIjpudWxsPT09KGw9dC5zdGF0ZSl8fHZvaWQgMD09PWx8fGwub25Db2x1bW5zQ2hhbmdlKHRoaXMpO2JyZWFrO2Nhc2VcInNjcm9sbGFibGVcIjpudWxsPT09KGE9dC5zdGF0ZSl8fHZvaWQgMD09PWF8fGEub25TY3JvbGxhYmxlQ2hhbmdlKHRoaXMpO2JyZWFrO2RlZmF1bHQ6dGhyb3cgbmV3IEVycm9yKGBUYWJsZSBMYXlvdXQgZG9uJ3QgaGF2ZSBldmVudCAke2V9LmApfX0pKX19dmFyIG5kPWUoe25hbWU6XCJFbFRhYmxlRmlsdGVyUGFuZWxcIixjb21wb25lbnRzOntFbENoZWNrYm94OkthLEVsQ2hlY2tib3hHcm91cDpUbixFbFNjcm9sbGJhcjpubCxFbFBvcHBlcjpTbH0scHJvcHM6e3BsYWNlbWVudDp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcImJvdHRvbS1zdGFydFwifSxzdG9yZTp7dHlwZTpPYmplY3R9LGNvbHVtbjp7dHlwZTpPYmplY3R9LHVwRGF0YUNvbHVtbjp7dHlwZTpGdW5jdGlvbn19LHNldHVwKGUpe2NvbnN0IGE9digpLG49YS5wYXJlbnQ7bi5maWx0ZXJQYW5lbHMudmFsdWVbZS5jb2x1bW4uaWRdfHwobi5maWx0ZXJQYW5lbHMudmFsdWVbZS5jb2x1bW4uaWRdPWEpO2NvbnN0IG89dCghMSksaT1sKCgoKT0+ZS5jb2x1bW4mJmUuY29sdW1uLmZpbHRlcnMpKSxyPWwoe2dldDooKT0+KGUuY29sdW1uLmZpbHRlcmVkVmFsdWV8fFtdKVswXSxzZXQ6ZT0+e3MudmFsdWUmJihudWxsIT1lP3MudmFsdWUuc3BsaWNlKDAsMSxlKTpzLnZhbHVlLnNwbGljZSgwLDEpKX19KSxzPWwoe2dldDooKT0+ZS5jb2x1bW4mJmUuY29sdW1uLmZpbHRlcmVkVmFsdWV8fFtdLHNldCh0KXtlLmNvbHVtbiYmZS51cERhdGFDb2x1bW4oXCJmaWx0ZXJlZFZhbHVlXCIsdCl9fSksdT1sKCgoKT0+IWUuY29sdW1ufHxlLmNvbHVtbi5maWx0ZXJNdWx0aXBsZSkpLGQ9KCk9PntvLnZhbHVlPSExfSxjPXQ9PntlLnN0b3JlLmNvbW1pdChcImZpbHRlckNoYW5nZVwiLHtjb2x1bW46ZS5jb2x1bW4sdmFsdWVzOnR9KSxlLnN0b3JlLnVwZGF0ZUFsbFNlbGVjdGVkKCl9O3JldHVybiB5KG8sKHQ9PntlLmNvbHVtbiYmZS51cERhdGFDb2x1bW4oXCJmaWx0ZXJPcGVuZWRcIix0KX0pLHtpbW1lZGlhdGU6ITB9KSx7dG9vbHRpcFZpc2libGU6byxtdWx0aXBsZTp1LGZpbHRlcmVkVmFsdWU6cyxmaWx0ZXJWYWx1ZTpyLGZpbHRlcnM6aSxoYW5kbGVDb25maXJtOigpPT57YyhzLnZhbHVlKSxkKCl9LGhhbmRsZVJlc2V0OigpPT57cy52YWx1ZT1bXSxjKHMudmFsdWUpLGQoKX0saGFuZGxlU2VsZWN0OmU9PntyLnZhbHVlPWUsYyhudWxsIT1lP3MudmFsdWU6W10pLGQoKX0saXNBY3RpdmU6ZT0+ZS52YWx1ZT09PXIudmFsdWUsdDpxbCxzaG93RmlsdGVyUGFuZWw6ZT0+e2Uuc3RvcFByb3BhZ2F0aW9uKCksby52YWx1ZT0hMH19fX0pO2NvbnN0IG9kPXtrZXk6MH0saWQ9e2NsYXNzOlwiZWwtdGFibGUtZmlsdGVyX19jb250ZW50XCJ9LHJkPXtjbGFzczpcImVsLXRhYmxlLWZpbHRlcl9fYm90dG9tXCJ9LHNkPXtrZXk6MSxjbGFzczpcImVsLXRhYmxlLWZpbHRlcl9fbGlzdFwifTtmdW5jdGlvbiB1ZChlKXtjb25zdCB0PXYoKTtYKCgoKT0+e2EudmFsdWUuYWRkT2JzZXJ2ZXIodCl9KSksXygoKCk9PntuKGEudmFsdWUpLG8oYS52YWx1ZSl9KSksUygoKCk9PntuKGEudmFsdWUpLG8oYS52YWx1ZSl9KSksTigoKCk9PnthLnZhbHVlLnJlbW92ZU9ic2VydmVyKHQpfSkpO2NvbnN0IGE9bCgoKCk9Pntjb25zdCB0PWUubGF5b3V0O2lmKCF0KXRocm93IG5ldyBFcnJvcihcIkNhbiBub3QgZmluZCB0YWJsZSBsYXlvdXQuXCIpO3JldHVybiB0fSkpLG49dD0+e3ZhciBsO2NvbnN0IGE9bnVsbD09PShsPWUudm5vZGUuZWwpfHx2b2lkIDA9PT1sP3ZvaWQgMDpsLnF1ZXJ5U2VsZWN0b3JBbGwoXCJjb2xncm91cCA+IGNvbFwiKTtpZighYS5sZW5ndGgpcmV0dXJuO2NvbnN0IG49dC5nZXRGbGF0dGVuQ29sdW1ucygpLG89e307bi5mb3JFYWNoKChlPT57b1tlLmlkXT1lfSkpO2ZvcihsZXQgZT0wLHQ9YS5sZW5ndGg7ZTx0O2UrKyl7Y29uc3QgdD1hW2VdLGw9dC5nZXRBdHRyaWJ1dGUoXCJuYW1lXCIpLG49b1tsXTtuJiZ0LnNldEF0dHJpYnV0ZShcIndpZHRoXCIsbi5yZWFsV2lkdGh8fG4ud2lkdGgpfX0sbz10PT57Y29uc3QgbD1lLnZub2RlLmVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCJjb2xncm91cCA+IGNvbFtuYW1lPWd1dHRlcl1cIik7Zm9yKGxldCBlPTAsYT1sLmxlbmd0aDtlPGE7ZSsrKXtsW2VdLnNldEF0dHJpYnV0ZShcIndpZHRoXCIsdC5zY3JvbGxZLnZhbHVlP3QuZ3V0dGVyV2lkdGg6XCIwXCIpfWNvbnN0IGE9ZS52bm9kZS5lbC5xdWVyeVNlbGVjdG9yQWxsKFwidGguZ3V0dGVyXCIpO2ZvcihsZXQgZT0wLGw9YS5sZW5ndGg7ZTxsO2UrKyl7Y29uc3QgbD1hW2VdO2wuc3R5bGUud2lkdGg9dC5zY3JvbGxZLnZhbHVlP3QuZ3V0dGVyV2lkdGgrXCJweFwiOlwiMFwiLGwuc3R5bGUuZGlzcGxheT10LnNjcm9sbFkudmFsdWU/XCJcIjpcIm5vbmVcIn19O3JldHVybnt0YWJsZUxheW91dDphLnZhbHVlLG9uQ29sdW1uc0NoYW5nZTpuLG9uU2Nyb2xsYWJsZUNoYW5nZTpvfX1mdW5jdGlvbiBkZChlKXtjb25zdCB0PXYoKS5wYXJlbnQsbD10LnN0b3JlLnN0YXRlcztyZXR1cm57Z2V0SGVhZGVyUm93U3R5bGU6ZT0+e2NvbnN0IGw9dC5wcm9wcy5oZWFkZXJSb3dTdHlsZTtyZXR1cm5cImZ1bmN0aW9uXCI9PXR5cGVvZiBsP2wuY2FsbChudWxsLHtyb3dJbmRleDplfSk6bH0sZ2V0SGVhZGVyUm93Q2xhc3M6ZT0+e2NvbnN0IGw9W10sYT10LnByb3BzLmhlYWRlclJvd0NsYXNzTmFtZTtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgYT9sLnB1c2goYSk6XCJmdW5jdGlvblwiPT10eXBlb2YgYSYmbC5wdXNoKGEuY2FsbChudWxsLHtyb3dJbmRleDplfSkpLGwuam9pbihcIiBcIil9LGdldEhlYWRlckNlbGxTdHlsZTooZSxsLGEsbik9Pntjb25zdCBvPXQucHJvcHMuaGVhZGVyQ2VsbFN0eWxlO3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIG8/by5jYWxsKG51bGwse3Jvd0luZGV4OmUsY29sdW1uSW5kZXg6bCxyb3c6YSxjb2x1bW46bn0pOm99LGdldEhlYWRlckNlbGxDbGFzczooYSxuLG8saSk9Pntjb25zdCByPVtpLmlkLGkub3JkZXIsaS5oZWFkZXJBbGlnbixpLmNsYXNzTmFtZSxpLmxhYmVsQ2xhc3NOYW1lXTswPT09YSYmKCh0LGEpPT57bGV0IG49MDtmb3IobGV0IGU9MDtlPHQ7ZSsrKW4rPWFbZV0uY29sU3Bhbjtjb25zdCBvPW4rYVt0XS5jb2xTcGFuLTE7cmV0dXJuXCJsZWZ0XCI9PT1lLmZpeGVkP28+PWwuZml4ZWRMZWFmQ29sdW1uc0xlbmd0aC52YWx1ZTpcInJpZ2h0XCI9PT1lLmZpeGVkP248bC5jb2x1bW5zLnZhbHVlLmxlbmd0aC1sLnJpZ2h0Rml4ZWRMZWFmQ29sdW1uc0xlbmd0aC52YWx1ZTpvPGwuZml4ZWRMZWFmQ29sdW1uc0xlbmd0aC52YWx1ZXx8bj49bC5jb2x1bW5zLnZhbHVlLmxlbmd0aC1sLnJpZ2h0Rml4ZWRMZWFmQ29sdW1uc0xlbmd0aC52YWx1ZX0pKG4sbykmJnIucHVzaChcImlzLWhpZGRlblwiKSxpLmNoaWxkcmVufHxyLnB1c2goXCJpcy1sZWFmXCIpLGkuc29ydGFibGUmJnIucHVzaChcImlzLXNvcnRhYmxlXCIpO2NvbnN0IHM9dC5wcm9wcy5oZWFkZXJDZWxsQ2xhc3NOYW1lO3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiBzP3IucHVzaChzKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBzJiZyLnB1c2gocy5jYWxsKG51bGwse3Jvd0luZGV4OmEsY29sdW1uSW5kZXg6bixyb3c6byxjb2x1bW46aX0pKSxyLmpvaW4oXCIgXCIpfX19bmQucmVuZGVyPWZ1bmN0aW9uKGUsdCxsLG8scix1KXtjb25zdCBkPVAoXCJlbC1jaGVja2JveFwiKSxoPVAoXCJlbC1jaGVja2JveC1ncm91cFwiKSx2PVAoXCJlbC1zY3JvbGxiYXJcIiksbT1QKFwiZWwtcG9wcGVyXCIpO3JldHVybiBhKCksbihtLHtyZWY6XCJ0b29sdGlwXCIsdmlzaWJsZTplLnRvb2x0aXBWaXNpYmxlLFwib25VcGRhdGU6dmlzaWJsZVwiOnRbNl18fCh0WzZdPXQ9PmUudG9vbHRpcFZpc2libGU9dCksb2Zmc2V0OjAscGxhY2VtZW50OmUucGxhY2VtZW50LFwic2hvdy1hcnJvd1wiOiExLHRyaWdnZXI6XCJjbGlja1wiLGVmZmVjdDpcImxpZ2h0XCIscHVyZTpcIlwiLFwicG9wcGVyLWNsYXNzXCI6XCJlbC10YWJsZS1maWx0ZXJcIixcImFwcGVuZC10by1ib2R5XCI6XCJcIn0se2RlZmF1bHQ6aSgoKCk9PltlLm11bHRpcGxlPyhhKCksbihcImRpdlwiLG9kLFtzKFwiZGl2XCIsaWQsW3Modix7XCJ3cmFwLWNsYXNzXCI6XCJlbC10YWJsZS1maWx0ZXJfX3dyYXBcIn0se2RlZmF1bHQ6aSgoKCk9PltzKGgse21vZGVsVmFsdWU6ZS5maWx0ZXJlZFZhbHVlLFwib25VcGRhdGU6bW9kZWxWYWx1ZVwiOnRbMV18fCh0WzFdPXQ9PmUuZmlsdGVyZWRWYWx1ZT10KSxjbGFzczpcImVsLXRhYmxlLWZpbHRlcl9fY2hlY2tib3gtZ3JvdXBcIn0se2RlZmF1bHQ6aSgoKCk9PlsoYSghMCksbihFLG51bGwsSChlLmZpbHRlcnMsKGU9PihhKCksbihkLHtrZXk6ZS52YWx1ZSxsYWJlbDplLnZhbHVlfSx7ZGVmYXVsdDppKCgoKT0+W2MocChlLnRleHQpLDEpXSkpLF86Mn0sMTAzMixbXCJsYWJlbFwiXSkpKSksMTI4KSldKSksXzoxfSw4LFtcIm1vZGVsVmFsdWVcIl0pXSkpLF86MX0pXSkscyhcImRpdlwiLHJkLFtzKFwiYnV0dG9uXCIse2NsYXNzOntcImlzLWRpc2FibGVkXCI6MD09PWUuZmlsdGVyZWRWYWx1ZS5sZW5ndGh9LGRpc2FibGVkOjA9PT1lLmZpbHRlcmVkVmFsdWUubGVuZ3RoLHR5cGU6XCJcIixvbkNsaWNrOnRbMl18fCh0WzJdPSguLi50KT0+ZS5oYW5kbGVDb25maXJtKC4uLnQpKX0scChlLnQoXCJlbC50YWJsZS5jb25maXJtRmlsdGVyXCIpKSwxMSxbXCJkaXNhYmxlZFwiXSkscyhcImJ1dHRvblwiLHt0eXBlOlwiXCIsb25DbGljazp0WzNdfHwodFszXT0oLi4udCk9PmUuaGFuZGxlUmVzZXQoLi4udCkpfSxwKGUudChcImVsLnRhYmxlLnJlc2V0RmlsdGVyXCIpKSwxKV0pXSkpOihhKCksbihcInVsXCIsc2QsW3MoXCJsaVwiLHtjbGFzczpbe1wiaXMtYWN0aXZlXCI6dm9pZCAwPT09ZS5maWx0ZXJWYWx1ZXx8bnVsbD09PWUuZmlsdGVyVmFsdWV9LFwiZWwtdGFibGUtZmlsdGVyX19saXN0LWl0ZW1cIl0sb25DbGljazp0WzRdfHwodFs0XT10PT5lLmhhbmRsZVNlbGVjdChudWxsKSl9LHAoZS50KFwiZWwudGFibGUuY2xlYXJGaWx0ZXJcIikpLDMpLChhKCEwKSxuKEUsbnVsbCxIKGUuZmlsdGVycywodD0+KGEoKSxuKFwibGlcIix7a2V5OnQudmFsdWUsY2xhc3M6W3tcImlzLWFjdGl2ZVwiOmUuaXNBY3RpdmUodCl9LFwiZWwtdGFibGUtZmlsdGVyX19saXN0LWl0ZW1cIl0sbGFiZWw6dC52YWx1ZSxvbkNsaWNrOmw9PmUuaGFuZGxlU2VsZWN0KHQudmFsdWUpfSxwKHQudGV4dCksMTEsW1wibGFiZWxcIixcIm9uQ2xpY2tcIl0pKSkpLDEyOCkpXSkpXSkpLHRyaWdnZXI6aSgoKCk9PltzKFwic3BhblwiLHtjbGFzczpcImVsLXRhYmxlX19jb2x1bW4tZmlsdGVyLXRyaWdnZXIgZWwtbm9uZS1vdXRsaW5lXCIsb25DbGljazp0WzVdfHwodFs1XT0oLi4udCk9PmUuc2hvd0ZpbHRlclBhbmVsKC4uLnQpKX0sW3MoXCJpXCIse2NsYXNzOltcImVsLWljb24tYXJyb3ctZG93blwiLGUuY29sdW1uLmZpbHRlck9wZW5lZD9cImVsLWljb24tYXJyb3ctdXBcIjpcIlwiXX0sbnVsbCwyKV0pXSkpLF86MX0sOCxbXCJ2aXNpYmxlXCIsXCJwbGFjZW1lbnRcIl0pfSxuZC5fX2ZpbGU9XCJwYWNrYWdlcy90YWJsZS9zcmMvZmlsdGVyLXBhbmVsLnZ1ZVwiO2NvbnN0IGNkPWU9Pntjb25zdCB0PVtdO3JldHVybiBlLmZvckVhY2goKGU9PntlLmNoaWxkcmVuPyh0LnB1c2goZSksdC5wdXNoLmFwcGx5KHQsY2QoZS5jaGlsZHJlbikpKTp0LnB1c2goZSl9KSksdH07ZnVuY3Rpb24gcGQoZSl7Y29uc3QgdD12KCkucGFyZW50LGE9bCgoKCk9PihlPT57bGV0IHQ9MTtjb25zdCBsPShlLGEpPT57aWYoYSYmKGUubGV2ZWw9YS5sZXZlbCsxLHQ8ZS5sZXZlbCYmKHQ9ZS5sZXZlbCkpLGUuY2hpbGRyZW4pe2xldCB0PTA7ZS5jaGlsZHJlbi5mb3JFYWNoKChhPT57bChhLGUpLHQrPWEuY29sU3Bhbn0pKSxlLmNvbFNwYW49dH1lbHNlIGUuY29sU3Bhbj0xfTtlLmZvckVhY2goKGU9PntlLmxldmVsPTEsbChlLHZvaWQgMCl9KSk7Y29uc3QgYT1bXTtmb3IobGV0IGU9MDtlPHQ7ZSsrKWEucHVzaChbXSk7cmV0dXJuIGNkKGUpLmZvckVhY2goKGU9PntlLmNoaWxkcmVuP2Uucm93U3Bhbj0xOmUucm93U3Bhbj10LWUubGV2ZWwrMSxhW2UubGV2ZWwtMV0ucHVzaChlKX0pKSxhfSkoZS5zdG9yZS5zdGF0ZXMub3JpZ2luQ29sdW1ucy52YWx1ZSkpKTtyZXR1cm57aXNHcm91cDpsKCgoKT0+e2NvbnN0IGU9YS52YWx1ZS5sZW5ndGg+MTtyZXR1cm4gZSYmKHQuc3RhdGUuaXNHcm91cC52YWx1ZT0hMCksZX0pKSx0b2dnbGVBbGxTZWxlY3Rpb246ZT0+e2Uuc3RvcFByb3BhZ2F0aW9uKCksdC5zdG9yZS5jb21taXQoXCJ0b2dnbGVBbGxTZWxlY3Rpb25cIil9LGNvbHVtblJvd3M6YX19ZnVuY3Rpb24gaGQoKXtyZXR1cm4gRChcImNvbFwiLHtuYW1lOlwiZ3V0dGVyXCJ9KX1mdW5jdGlvbiB2ZChlLHQ9ITEpe3JldHVybiBEKFwiY29sZ3JvdXBcIix7fSxbLi4uZS5tYXAoKGU9PkQoXCJjb2xcIix7bmFtZTplLmlkLGtleTplLmlkfSkpKSx0JiZoZCgpXSl9dmFyIG1kPWUoe25hbWU6XCJFbFRhYmxlSGVhZGVyXCIsY29tcG9uZW50czp7RWxDaGVja2JveDpLYX0scHJvcHM6e2ZpeGVkOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiXCJ9LHN0b3JlOntyZXF1aXJlZDohMCx0eXBlOk9iamVjdH0sYm9yZGVyOkJvb2xlYW4sZGVmYXVsdFNvcnQ6e3R5cGU6T2JqZWN0LGRlZmF1bHQ6KCk9Pih7cHJvcDpcIlwiLG9yZGVyOlwiXCJ9KX19LHNldHVwKGUse2VtaXQ6YX0pe2NvbnN0IG49digpLG89bi5wYXJlbnQsaT1vLnN0b3JlLnN0YXRlcyxyPXQoe30pLHt0YWJsZUxheW91dDpzLG9uQ29sdW1uc0NoYW5nZTp1LG9uU2Nyb2xsYWJsZUNoYW5nZTpkfT11ZChvKSxjPWwoKCgpPT4hZS5maXhlZCYmcy5ndXR0ZXJXaWR0aCkpO18oKCgpPT57aygoKCk9Pntjb25zdHtwcm9wOnQsb3JkZXI6bH09ZS5kZWZhdWx0U29ydDtvLnN0b3JlLmNvbW1pdChcInNvcnRcIix7cHJvcDp0LG9yZGVyOmwsaW5pdDohMH0pfSkpfSkpO2NvbnN0e2hhbmRsZUhlYWRlckNsaWNrOnAsaGFuZGxlSGVhZGVyQ29udGV4dE1lbnU6aCxoYW5kbGVNb3VzZURvd246bSxoYW5kbGVNb3VzZU1vdmU6ZixoYW5kbGVNb3VzZU91dDpnLGhhbmRsZVNvcnRDbGljazpiLGhhbmRsZUZpbHRlckNsaWNrOnl9PWZ1bmN0aW9uKGUsbCl7Y29uc3QgYT12KCksbj1hLnBhcmVudCxvPWU9PntlLnN0b3BQcm9wYWdhdGlvbigpfSxpPXQobnVsbCkscj10KCExKSxzPXQoe30pLHU9KHQsbCxhKT0+e3Quc3RvcFByb3BhZ2F0aW9uKCk7Y29uc3Qgbz1sLm9yZGVyPT09YT9udWxsOmF8fCgoe29yZGVyOmUsc29ydE9yZGVyczp0fSk9PntpZihcIlwiPT09ZSlyZXR1cm4gdFswXTtjb25zdCBsPXQuaW5kZXhPZihlfHxudWxsKTtyZXR1cm4gdFtsPnQubGVuZ3RoLTI/MDpsKzFdfSkobCk7bGV0IGk9dC50YXJnZXQ7Zm9yKDtpJiZcIlRIXCIhPT1pLnRhZ05hbWU7KWk9aS5wYXJlbnROb2RlO2lmKGkmJlwiVEhcIj09PWkudGFnTmFtZSYmbnQoaSxcIm5vY2xpY2tcIikpcmV0dXJuIHZvaWQgaXQoaSxcIm5vY2xpY2tcIik7aWYoIWwuc29ydGFibGUpcmV0dXJuO2NvbnN0IHI9ZS5zdG9yZS5zdGF0ZXM7bGV0IHMsdT1yLnNvcnRQcm9wLnZhbHVlO2NvbnN0IGQ9ci5zb3J0aW5nQ29sdW1uLnZhbHVlOyhkIT09bHx8ZD09PWwmJm51bGw9PT1kLm9yZGVyKSYmKGQmJihkLm9yZGVyPW51bGwpLHIuc29ydGluZ0NvbHVtbi52YWx1ZT1sLHU9bC5wcm9wZXJ0eSkscz1sLm9yZGVyPW98fG51bGwsci5zb3J0UHJvcC52YWx1ZT11LHIuc29ydE9yZGVyLnZhbHVlPXMsbi5zdG9yZS5jb21taXQoXCJjaGFuZ2VTb3J0Q29uZGl0aW9uXCIpfTtyZXR1cm57aGFuZGxlSGVhZGVyQ2xpY2s6KGUsdCk9PnshdC5maWx0ZXJzJiZ0LnNvcnRhYmxlP3UoZSx0LCExKTp0LmZpbHRlcmFibGUmJiF0LnNvcnRhYmxlJiZvKGUpLG4uZW1pdChcImhlYWRlci1jbGlja1wiLHQsZSl9LGhhbmRsZUhlYWRlckNvbnRleHRNZW51OihlLHQpPT57bi5lbWl0KFwiaGVhZGVyLWNvbnRleHRtZW51XCIsdCxlKX0saGFuZGxlTW91c2VEb3duOih0LG8pPT57aWYoIXplJiYhKG8uY2hpbGRyZW4mJm8uY2hpbGRyZW4ubGVuZ3RoPjApJiZpLnZhbHVlJiZlLmJvcmRlcil7ci52YWx1ZT0hMDtjb25zdCB1PW47bChcInNldC1kcmFnLXZpc2libGVcIiwhMCk7Y29uc3QgZD11LnZub2RlLmVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQsYz1hLnZub2RlLmVsLnF1ZXJ5U2VsZWN0b3IoXCJ0aC5cIitvLmlkKSxwPWMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksaD1wLmxlZnQtZCszMDtvdChjLFwibm9jbGlja1wiKSxzLnZhbHVlPXtzdGFydE1vdXNlTGVmdDp0LmNsaWVudFgsc3RhcnRMZWZ0OnAucmlnaHQtZCxzdGFydENvbHVtbkxlZnQ6cC5sZWZ0LWQsdGFibGVMZWZ0OmR9O2NvbnN0IHY9dS5yZWZzLnJlc2l6ZVByb3h5O3Yuc3R5bGUubGVmdD1zLnZhbHVlLnN0YXJ0TGVmdCtcInB4XCIsZG9jdW1lbnQub25zZWxlY3RzdGFydD1mdW5jdGlvbigpe3JldHVybiExfSxkb2N1bWVudC5vbmRyYWdzdGFydD1mdW5jdGlvbigpe3JldHVybiExfTtjb25zdCBtPWU9Pntjb25zdCB0PWUuY2xpZW50WC1zLnZhbHVlLnN0YXJ0TW91c2VMZWZ0LGw9cy52YWx1ZS5zdGFydExlZnQrdDt2LnN0eWxlLmxlZnQ9TWF0aC5tYXgoaCxsKStcInB4XCJ9LGY9KCk9PntpZihyLnZhbHVlKXtjb25zdHtzdGFydENvbHVtbkxlZnQ6YSxzdGFydExlZnQ6bn09cy52YWx1ZSxkPXBhcnNlSW50KHYuc3R5bGUubGVmdCwxMCktYTtvLndpZHRoPW8ucmVhbFdpZHRoPWQsdS5lbWl0KFwiaGVhZGVyLWRyYWdlbmRcIixvLndpZHRoLG4tYSxvLHQpLGUuc3RvcmUuc2NoZWR1bGVMYXlvdXQoITEsITApLGRvY3VtZW50LmJvZHkuc3R5bGUuY3Vyc29yPVwiXCIsci52YWx1ZT0hMSxpLnZhbHVlPW51bGwscy52YWx1ZT17fSxsKFwic2V0LWRyYWctdmlzaWJsZVwiLCExKX1kb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsbSksZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIixmKSxkb2N1bWVudC5vbnNlbGVjdHN0YXJ0PW51bGwsZG9jdW1lbnQub25kcmFnc3RhcnQ9bnVsbCxzZXRUaW1lb3V0KChmdW5jdGlvbigpe2l0KGMsXCJub2NsaWNrXCIpfSksMCl9O2RvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIixtKSxkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLGYpfX0saGFuZGxlTW91c2VNb3ZlOih0LGwpPT57aWYobC5jaGlsZHJlbiYmbC5jaGlsZHJlbi5sZW5ndGg+MClyZXR1cm47bGV0IGE9dC50YXJnZXQ7Zm9yKDthJiZcIlRIXCIhPT1hLnRhZ05hbWU7KWE9YS5wYXJlbnROb2RlO2lmKGwmJmwucmVzaXphYmxlJiYhci52YWx1ZSYmZS5ib3JkZXIpe2NvbnN0IGU9YS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxuPWRvY3VtZW50LmJvZHkuc3R5bGU7ZS53aWR0aD4xMiYmZS5yaWdodC10LnBhZ2VYPDg/KG4uY3Vyc29yPVwiY29sLXJlc2l6ZVwiLG50KGEsXCJpcy1zb3J0YWJsZVwiKSYmKGEuc3R5bGUuY3Vyc29yPVwiY29sLXJlc2l6ZVwiKSxpLnZhbHVlPWwpOnIudmFsdWV8fChuLmN1cnNvcj1cIlwiLG50KGEsXCJpcy1zb3J0YWJsZVwiKSYmKGEuc3R5bGUuY3Vyc29yPVwicG9pbnRlclwiKSxpLnZhbHVlPW51bGwpfX0saGFuZGxlTW91c2VPdXQ6KCk9Pnt6ZXx8KGRvY3VtZW50LmJvZHkuc3R5bGUuY3Vyc29yPVwiXCIpfSxoYW5kbGVTb3J0Q2xpY2s6dSxoYW5kbGVGaWx0ZXJDbGljazpvfX0oZSxhKSx7Z2V0SGVhZGVyUm93U3R5bGU6QyxnZXRIZWFkZXJSb3dDbGFzczp4LGdldEhlYWRlckNlbGxTdHlsZTp3LGdldEhlYWRlckNlbGxDbGFzczpTfT1kZChlKSx7aXNHcm91cDpFLHRvZ2dsZUFsbFNlbGVjdGlvbjpNLGNvbHVtblJvd3M6VH09cGQoZSk7cmV0dXJuIG4uc3RhdGU9e29uQ29sdW1uc0NoYW5nZTp1LG9uU2Nyb2xsYWJsZUNoYW5nZTpkfSxuLmZpbHRlclBhbmVscz1yLHtjb2x1bW5zOmkuY29sdW1ucyxmaWx0ZXJQYW5lbHM6cixoYXNHdXR0ZXI6YyxvbkNvbHVtbnNDaGFuZ2U6dSxvblNjcm9sbGFibGVDaGFuZ2U6ZCxjb2x1bW5Sb3dzOlQsZ2V0SGVhZGVyUm93Q2xhc3M6eCxnZXRIZWFkZXJSb3dTdHlsZTpDLGdldEhlYWRlckNlbGxDbGFzczpTLGdldEhlYWRlckNlbGxTdHlsZTp3LGhhbmRsZUhlYWRlckNsaWNrOnAsaGFuZGxlSGVhZGVyQ29udGV4dE1lbnU6aCxoYW5kbGVNb3VzZURvd246bSxoYW5kbGVNb3VzZU1vdmU6ZixoYW5kbGVNb3VzZU91dDpnLGhhbmRsZVNvcnRDbGljazpiLGhhbmRsZUZpbHRlckNsaWNrOnksaXNHcm91cDpFLHRvZ2dsZUFsbFNlbGVjdGlvbjpNfX0scmVuZGVyKCl7cmV0dXJuIEQoXCJ0YWJsZVwiLHtib3JkZXI6XCIwXCIsY2VsbHBhZGRpbmc6XCIwXCIsY2VsbHNwYWNpbmc6XCIwXCIsY2xhc3M6XCJlbC10YWJsZV9faGVhZGVyXCJ9LFt2ZCh0aGlzLmNvbHVtbnMsdGhpcy5oYXNHdXR0ZXIpLEQoXCJ0aGVhZFwiLHtjbGFzczp7XCJpcy1ncm91cFwiOnRoaXMuaXNHcm91cCxcImhhcy1ndXR0ZXJcIjp0aGlzLmhhc0d1dHRlcn19LHRoaXMuY29sdW1uUm93cy5tYXAoKChlLHQpPT5EKFwidHJcIix7Y2xhc3M6dGhpcy5nZXRIZWFkZXJSb3dDbGFzcyh0KSxrZXk6dCxzdHlsZTp0aGlzLmdldEhlYWRlclJvd1N0eWxlKHQpfSxlLm1hcCgoKGwsYSk9PkQoXCJ0aFwiLHtjbGFzczp0aGlzLmdldEhlYWRlckNlbGxDbGFzcyh0LGEsZSxsKSxjb2xzcGFuOmwuY29sU3BhbixrZXk6bC5pZCtcIi10aGVhZFwiLHJvd1NwYW46bC5yb3dTcGFuLHN0eWxlOnRoaXMuZ2V0SGVhZGVyQ2VsbFN0eWxlKHQsYSxlLGwpLG9uQ2xpY2s6ZT0+dGhpcy5oYW5kbGVIZWFkZXJDbGljayhlLGwpLG9uQ29udGV4dG1lbnU6ZT0+dGhpcy5oYW5kbGVIZWFkZXJDb250ZXh0TWVudShlLGwpLG9uTW91c2Vkb3duOmU9PnRoaXMuaGFuZGxlTW91c2VEb3duKGUsbCksb25Nb3VzZU1vdmU6ZT0+dGhpcy5oYW5kbGVNb3VzZU1vdmUoZSxsKSxvbk1vdXNlb3V0OnRoaXMuaGFuZGxlTW91c2VPdXR9LFtEKFwiZGl2XCIse2NsYXNzOltcImNlbGxcIixsLmZpbHRlcmVkVmFsdWUmJmwuZmlsdGVyZWRWYWx1ZS5sZW5ndGg+MD9cImhpZ2hsaWdodFwiOlwiXCIsbC5sYWJlbENsYXNzTmFtZV19LFtsLnJlbmRlckhlYWRlcj9sLnJlbmRlckhlYWRlcih7Y29sdW1uOmwsJGluZGV4OmEsc3RvcmU6dGhpcy5zdG9yZSxfc2VsZjp0aGlzLiRwYXJlbnR9KTpsLmxhYmVsLGwuc29ydGFibGUmJkQoXCJzcGFuXCIse29uQ2xpY2s6ZT0+dGhpcy5oYW5kbGVTb3J0Q2xpY2soZSxsKSxjbGFzczpcImNhcmV0LXdyYXBwZXJcIn0sW0QoXCJpXCIse29uQ2xpY2s6ZT0+dGhpcy5oYW5kbGVTb3J0Q2xpY2soZSxsLFwiYXNjZW5kaW5nXCIpLGNsYXNzOlwic29ydC1jYXJldCBhc2NlbmRpbmdcIn0pLEQoXCJpXCIse29uQ2xpY2s6ZT0+dGhpcy5oYW5kbGVTb3J0Q2xpY2soZSxsLFwiZGVzY2VuZGluZ1wiKSxjbGFzczpcInNvcnQtY2FyZXQgZGVzY2VuZGluZ1wifSldKSxsLmZpbHRlcmFibGUmJkQobmQse3N0b3JlOnRoaXMuJHBhcmVudC5zdG9yZSxwbGFjZW1lbnQ6bC5maWx0ZXJQbGFjZW1lbnR8fFwiYm90dG9tLXN0YXJ0XCIsY29sdW1uOmwsdXBEYXRhQ29sdW1uOihlLHQpPT57bFtlXT10fX0pXSldKSkpKSkpKV0pfX0pO2Z1bmN0aW9uIGZkKGUpe2NvbnN0IGw9digpLnBhcmVudCxhPXQoITEpLG49dChcIlwiKSxvPXQoRChcImRpdlwiKSksaT0odCxhLG4pPT57Y29uc3Qgbz1sLGk9UnUodCk7bGV0IHI7aSYmKHI9S3Uoe2NvbHVtbnM6ZS5zdG9yZS5zdGF0ZXMuY29sdW1ucy52YWx1ZX0saSksciYmby5lbWl0KFwiY2VsbC1cIituLGEscixpLHQpKSxvLmVtaXQoXCJyb3ctXCIrbixhLHIsdCl9O3JldHVybntoYW5kbGVEb3VibGVDbGljazooZSx0KT0+e2koZSx0LFwiZGJsY2xpY2tcIil9LGhhbmRsZUNsaWNrOih0LGwpPT57ZS5zdG9yZS5jb21taXQoXCJzZXRDdXJyZW50Um93XCIsbCksaSh0LGwsXCJjbGlja1wiKX0saGFuZGxlQ29udGV4dE1lbnU6KGUsdCk9PntpKGUsdCxcImNvbnRleHRtZW51XCIpfSxoYW5kbGVNb3VzZUVudGVyOmxlKChmdW5jdGlvbih0KXtlLnN0b3JlLmNvbW1pdChcInNldEhvdmVyUm93XCIsdCl9KSwzMCksaGFuZGxlTW91c2VMZWF2ZTpsZSgoZnVuY3Rpb24oKXtlLnN0b3JlLmNvbW1pdChcInNldEhvdmVyUm93XCIsbnVsbCl9KSwzMCksaGFuZGxlQ2VsbE1vdXNlRW50ZXI6KHQsYSk9Pntjb25zdCBuPWwsbz1SdSh0KTtpZihvKXtjb25zdCBsPUt1KHtjb2x1bW5zOmUuc3RvcmUuc3RhdGVzLmNvbHVtbnMudmFsdWV9LG8pLGk9bi5ob3ZlclN0YXRlPXtjZWxsOm8sY29sdW1uOmwscm93OmF9O24uZW1pdChcImNlbGwtbW91c2UtZW50ZXJcIixpLnJvdyxpLmNvbHVtbixpLmNlbGwsdCl9Y29uc3QgaT10LnRhcmdldC5xdWVyeVNlbGVjdG9yKFwiLmNlbGxcIik7aWYoIW50KGksXCJlbC10b29sdGlwXCIpfHwhaS5jaGlsZE5vZGVzLmxlbmd0aClyZXR1cm47Y29uc3Qgcj1kb2N1bWVudC5jcmVhdGVSYW5nZSgpO3Iuc2V0U3RhcnQoaSwwKSxyLnNldEVuZChpLGkuY2hpbGROb2Rlcy5sZW5ndGgpOyhyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoKygocGFyc2VJbnQocnQoaSxcInBhZGRpbmdMZWZ0XCIpLDEwKXx8MCkrKHBhcnNlSW50KHJ0KGksXCJwYWRkaW5nUmlnaHRcIiksMTApfHwwKSk+aS5vZmZzZXRXaWR0aHx8aS5zY3JvbGxXaWR0aD5pLm9mZnNldFdpZHRoKSYmZnVuY3Rpb24oZSx0LGwpe2Z1bmN0aW9uIGEoKXtvJiZvLnVwZGF0ZSgpfWZ1bmN0aW9uIG4oKXt0cnl7byYmby5kZXN0cm95KCksaSYmZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChpKSxhdChlLFwibW91c2VlbnRlclwiLGEpfWNhdGNoKGUpe319YXQoZSxcIm1vdXNlbGVhdmVcIixuKTtsZXQgbz1udWxsO2NvbnN0IGk9ZnVuY3Rpb24oKXtjb25zdCBlPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7cmV0dXJuIGUuY2xhc3NOYW1lPVwiZWwtdG9vbHRpcF9fcG9wcGVyIGlzLWRhcmtcIixlLmlubmVySFRNTD10LGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZSksZX0oKSxyPWZ1bmN0aW9uKCl7Y29uc3QgZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO3JldHVybiBlLmNsYXNzTmFtZT1cImVsLXBvcHBlcl9fYXJyb3dcIixlLnN0eWxlLmJvdHRvbT1cIi00cHhcIixlfSgpO2kuYXBwZW5kQ2hpbGQociksbz1pZShlLGksT2JqZWN0LmFzc2lnbih7bW9kaWZpZXJzOlt7bmFtZTpcIm9mZnNldFwiLG9wdGlvbnM6e29mZnNldDpbMCw4XX19LHtuYW1lOlwiYXJyb3dcIixvcHRpb25zOntlbGVtZW50OnIscGFkZGluZzoxMH19XX0sbCkpLGx0KGUsXCJtb3VzZWVudGVyXCIsYSksbHQoZSxcIm1vdXNlbGVhdmVcIixuKX0obyxvLmlubmVyVGV4dHx8by50ZXh0Q29udGVudCx7cGxhY2VtZW50OlwidG9wXCIsc3RyYXRlZ3k6XCJmaXhlZFwifSl9LGhhbmRsZUNlbGxNb3VzZUxlYXZlOmU9PnthLnZhbHVlPSExO2lmKCFSdShlKSlyZXR1cm47Y29uc3QgdD1sLmhvdmVyU3RhdGU7bC5lbWl0KFwiY2VsbC1tb3VzZS1sZWF2ZVwiLG51bGw9PXQ/dm9pZCAwOnQucm93LG51bGw9PXQ/dm9pZCAwOnQuY29sdW1uLG51bGw9PXQ/dm9pZCAwOnQuY2VsbCxlKX0sdG9vbHRpcFZpc2libGU6YSx0b29sdGlwQ29udGVudDpuLHRvb2x0aXBUcmlnZ2VyOm99fWZ1bmN0aW9uIGdkKGUpe2NvbnN0IHQ9digpLnBhcmVudCx7aGFuZGxlRG91YmxlQ2xpY2s6YSxoYW5kbGVDbGljazpuLGhhbmRsZUNvbnRleHRNZW51Om8saGFuZGxlTW91c2VFbnRlcjppLGhhbmRsZU1vdXNlTGVhdmU6cixoYW5kbGVDZWxsTW91c2VFbnRlcjpzLGhhbmRsZUNlbGxNb3VzZUxlYXZlOnUsdG9vbHRpcFZpc2libGU6ZCx0b29sdGlwQ29udGVudDpjLHRvb2x0aXBUcmlnZ2VyOnB9PWZkKGUpLHtnZXRSb3dTdHlsZTpoLGdldFJvd0NsYXNzOm0sZ2V0Q2VsbFN0eWxlOmYsZ2V0Q2VsbENsYXNzOmcsZ2V0U3BhbjpiLGdldENvbHNwYW5SZWFsV2lkdGg6eX09ZnVuY3Rpb24oZSl7Y29uc3QgdD12KCkucGFyZW50LGw9dD0+XCJsZWZ0XCI9PT1lLmZpeGVkP3Q+PWUuc3RvcmUuc3RhdGVzLmZpeGVkTGVhZkNvbHVtbnNMZW5ndGgudmFsdWU6XCJyaWdodFwiPT09ZS5maXhlZD90PGUuc3RvcmUuc3RhdGVzLmNvbHVtbnMudmFsdWUubGVuZ3RoLWUuc3RvcmUuc3RhdGVzLnJpZ2h0Rml4ZWRMZWFmQ29sdW1uc0xlbmd0aC52YWx1ZTp0PGUuc3RvcmUuc3RhdGVzLmZpeGVkTGVhZkNvbHVtbnNMZW5ndGgudmFsdWV8fHQ+PWUuc3RvcmUuc3RhdGVzLmNvbHVtbnMudmFsdWUubGVuZ3RoLWUuc3RvcmUuc3RhdGVzLnJpZ2h0Rml4ZWRMZWFmQ29sdW1uc0xlbmd0aC52YWx1ZTtyZXR1cm57Z2V0Um93U3R5bGU6KGUsbCk9Pntjb25zdCBhPXQucHJvcHMucm93U3R5bGU7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgYT9hLmNhbGwobnVsbCx7cm93OmUscm93SW5kZXg6bH0pOmF8fG51bGx9LGdldFJvd0NsYXNzOihsLGEpPT57Y29uc3Qgbj1bXCJlbC10YWJsZV9fcm93XCJdO3QucHJvcHMuaGlnaGxpZ2h0Q3VycmVudFJvdyYmbD09PWUuc3RvcmUuc3RhdGVzLmN1cnJlbnRSb3cudmFsdWUmJm4ucHVzaChcImN1cnJlbnQtcm93XCIpLGUuc3RyaXBlJiZhJTI9PTEmJm4ucHVzaChcImVsLXRhYmxlX19yb3ctLXN0cmlwZWRcIik7Y29uc3Qgbz10LnByb3BzLnJvd0NsYXNzTmFtZTtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2Ygbz9uLnB1c2gobyk6XCJmdW5jdGlvblwiPT10eXBlb2YgbyYmbi5wdXNoKG8uY2FsbChudWxsLHtyb3c6bCxyb3dJbmRleDphfSkpLGUuc3RvcmUuc3RhdGVzLmV4cGFuZFJvd3MudmFsdWUuaW5kZXhPZihsKT4tMSYmbi5wdXNoKFwiZXhwYW5kZWRcIiksbn0sZ2V0Q2VsbFN0eWxlOihlLGwsYSxuKT0+e2NvbnN0IG89dC5wcm9wcy5jZWxsU3R5bGU7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2Ygbz9vLmNhbGwobnVsbCx7cm93SW5kZXg6ZSxjb2x1bW5JbmRleDpsLHJvdzphLGNvbHVtbjpufSk6b30sZ2V0Q2VsbENsYXNzOihlLGEsbixvKT0+e2NvbnN0IGk9W28uaWQsby5hbGlnbixvLmNsYXNzTmFtZV07bChhKSYmaS5wdXNoKFwiaXMtaGlkZGVuXCIpO2NvbnN0IHI9dC5wcm9wcy5jZWxsQ2xhc3NOYW1lO3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiByP2kucHVzaChyKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiByJiZpLnB1c2goci5jYWxsKG51bGwse3Jvd0luZGV4OmUsY29sdW1uSW5kZXg6YSxyb3c6bixjb2x1bW46b30pKSxpLmpvaW4oXCIgXCIpfSxnZXRTcGFuOihlLGwsYSxuKT0+e2xldCBvPTEsaT0xO2NvbnN0IHI9dC5wcm9wcy5zcGFuTWV0aG9kO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIHIpe2NvbnN0IHQ9cih7cm93OmUsY29sdW1uOmwscm93SW5kZXg6YSxjb2x1bW5JbmRleDpufSk7QXJyYXkuaXNBcnJheSh0KT8obz10WzBdLGk9dFsxXSk6XCJvYmplY3RcIj09dHlwZW9mIHQmJihvPXQucm93c3BhbixpPXQuY29sc3Bhbil9cmV0dXJue3Jvd3NwYW46byxjb2xzcGFuOml9fSxnZXRDb2xzcGFuUmVhbFdpZHRoOihlLHQsbCk9PnQ8MT9lW2xdLnJlYWxXaWR0aDplLm1hcCgoKHtyZWFsV2lkdGg6ZX0pPT5lKSkuc2xpY2UobCxsK3QpLnJlZHVjZSgoKGUsdCk9PmUrdCksLTEpLGlzQ29sdW1uSGlkZGVuOmx9fShlKSxrPWwoKCgpPT57cmV0dXJuIHQ9ZS5zdG9yZS5zdGF0ZXMuY29sdW1ucy52YWx1ZSxsPSh7dHlwZTplfSk9PlwiZGVmYXVsdFwiPT09ZSx0LmZpbmRJbmRleChsKTt2YXIgdCxsfSkpLEM9KGUsbCk9Pntjb25zdCBhPXQucHJvcHMucm93S2V5O3JldHVybiBhP1l1KGUsYSk6bH0seD0obCxkLGMpPT57Y29uc3R7aW5kZW50OnAsY29sdW1uczp2fT1lLnN0b3JlLnN0YXRlcyx4PW0obCxkKTtsZXQgdz0hMDtjJiYoeC5wdXNoKFwiZWwtdGFibGVfX3Jvdy0tbGV2ZWwtXCIrYy5sZXZlbCksdz1jLmRpc3BsYXkpO3JldHVybiBEKFwidHJcIix7c3R5bGU6W3c/bnVsbDp7ZGlzcGxheTpcIm5vbmVcIn0saChsLGQpXSxjbGFzczp4LGtleTpDKGwsZCksb25EYmxjbGljazplPT5hKGUsbCksb25DbGljazplPT5uKGUsbCksb25Db250ZXh0bWVudTplPT5vKGUsbCksb25Nb3VzZWVudGVyOigpPT5pKGQpLG9uTW91c2VsZWF2ZTpyfSx2LnZhbHVlLm1hcCgoKGEsbik9Pntjb25zdHtyb3dzcGFuOm8sY29sc3BhbjppfT1iKGwsYSxkLG4pO2lmKCFvfHwhaSlyZXR1cm4gbnVsbDtjb25zdCByPU9iamVjdC5hc3NpZ24oe30sYSk7ci5yZWFsV2lkdGg9eSh2LnZhbHVlLGksbik7Y29uc3QgaD17c3RvcmU6ZS5zdG9yZSxfc2VsZjplLmNvbnRleHR8fHQsY29sdW1uOnIscm93OmwsJGluZGV4OmR9O3JldHVybiBuPT09ay52YWx1ZSYmYyYmKGgudHJlZU5vZGU9e2luZGVudDpjLmxldmVsKnAudmFsdWUsbGV2ZWw6Yy5sZXZlbH0sXCJib29sZWFuXCI9PXR5cGVvZiBjLmV4cGFuZGVkJiYoaC50cmVlTm9kZS5leHBhbmRlZD1jLmV4cGFuZGVkLFwibG9hZGluZ1wiaW4gYyYmKGgudHJlZU5vZGUubG9hZGluZz1jLmxvYWRpbmcpLFwibm9MYXp5Q2hpbGRyZW5cImluIGMmJihoLnRyZWVOb2RlLm5vTGF6eUNoaWxkcmVuPWMubm9MYXp5Q2hpbGRyZW4pKSksRChcInRkXCIse3N0eWxlOmYoZCxuLGwsYSksY2xhc3M6ZyhkLG4sbCxhKSxyb3dzcGFuOm8sY29sc3BhbjppLG9uTW91c2VlbnRlcjplPT5zKGUsbCksb25Nb3VzZWxlYXZlOnV9LFthLnJlbmRlckNlbGwoaCldKX0pKSl9O3JldHVybnt3cmFwcGVkUm93UmVuZGVyOihsLGEpPT57Y29uc3Qgbj1lLnN0b3JlLHtpc1Jvd0V4cGFuZGVkOm8sYXNzZXJ0Um93S2V5Oml9PW4se3RyZWVEYXRhOnIsbGF6eVRyZWVOb2RlTWFwOnMsY2hpbGRyZW5Db2x1bW5OYW1lOnUscm93S2V5OmR9PW4uc3RhdGVzO2lmKG4uc3RhdGVzLmNvbHVtbnMudmFsdWUuc29tZSgoKHt0eXBlOmV9KT0+XCJleHBhbmRcIj09PWUpKSYmbyhsKSl7Y29uc3QgZT10LnJlbmRlckV4cGFuZGVkLG89eChsLGEsdm9pZCAwKTtyZXR1cm4gZT9bW28sRChcInRyXCIse2tleTpcImV4cGFuZGVkLXJvd19fXCIrby5rZXl9LFtEKFwidGRcIix7Y29sc3BhbjpuLnN0YXRlcy5jb2x1bW5zLnZhbHVlLmxlbmd0aCxjbGFzczpcImVsLXRhYmxlX19leHBhbmRlZC1jZWxsXCJ9LFtlKHtyb3c6bCwkaW5kZXg6YSxzdG9yZTpufSldKV0pXV06KGNvbnNvbGUuZXJyb3IoXCJbRWxlbWVudCBFcnJvcl1yZW5kZXJFeHBhbmRlZCBpcyByZXF1aXJlZC5cIiksbyl9aWYoT2JqZWN0LmtleXMoci52YWx1ZSkubGVuZ3RoKXtpKCk7Y29uc3QgZT1ZdShsLGQudmFsdWUpO2xldCB0PXIudmFsdWVbZV0sbj1udWxsO3QmJihuPXtleHBhbmRlZDp0LmV4cGFuZGVkLGxldmVsOnQubGV2ZWwsZGlzcGxheTohMH0sXCJib29sZWFuXCI9PXR5cGVvZiB0LmxhenkmJihcImJvb2xlYW5cIj09dHlwZW9mIHQubG9hZGVkJiZ0LmxvYWRlZCYmKG4ubm9MYXp5Q2hpbGRyZW49ISh0LmNoaWxkcmVuJiZ0LmNoaWxkcmVuLmxlbmd0aCkpLG4ubG9hZGluZz10LmxvYWRpbmcpKTtjb25zdCBvPVt4KGwsYSxuKV07aWYodCl7bGV0IG49MDtjb25zdCBpPShlLGwpPT57ZSYmZS5sZW5ndGgmJmwmJmUuZm9yRWFjaCgoZT0+e2NvbnN0IGM9e2Rpc3BsYXk6bC5kaXNwbGF5JiZsLmV4cGFuZGVkLGxldmVsOmwubGV2ZWwrMSxleHBhbmRlZDohMSxub0xhenlDaGlsZHJlbjohMSxsb2FkaW5nOiExfSxwPVl1KGUsZC52YWx1ZSk7aWYobnVsbD09cCl0aHJvdyBuZXcgRXJyb3IoXCJmb3IgbmVzdGVkIGRhdGEgaXRlbSwgcm93LWtleSBpcyByZXF1aXJlZC5cIik7aWYodD1PYmplY3QuYXNzaWduKHt9LHIudmFsdWVbcF0pLHQmJihjLmV4cGFuZGVkPXQuZXhwYW5kZWQsdC5sZXZlbD10LmxldmVsfHxjLmxldmVsLHQuZGlzcGxheT0hKCF0LmV4cGFuZGVkfHwhYy5kaXNwbGF5KSxcImJvb2xlYW5cIj09dHlwZW9mIHQubGF6eSYmKFwiYm9vbGVhblwiPT10eXBlb2YgdC5sb2FkZWQmJnQubG9hZGVkJiYoYy5ub0xhenlDaGlsZHJlbj0hKHQuY2hpbGRyZW4mJnQuY2hpbGRyZW4ubGVuZ3RoKSksYy5sb2FkaW5nPXQubG9hZGluZykpLG4rKyxvLnB1c2goeChlLGErbixjKSksdCl7Y29uc3QgbD1zLnZhbHVlW3BdfHxlW3UudmFsdWVdO2kobCx0KX19KSl9O3QuZGlzcGxheT0hMDtjb25zdCBjPXMudmFsdWVbZV18fGxbdS52YWx1ZV07aShjLHQpfXJldHVybiBvfXJldHVybiB4KGwsYSx2b2lkIDApfSx0b29sdGlwVmlzaWJsZTpkLHRvb2x0aXBDb250ZW50OmMsdG9vbHRpcFRyaWdnZXI6cH19dmFyIGJkPWUoe25hbWU6XCJFbFRhYmxlQm9keVwiLHByb3BzOntzdG9yZTp7cmVxdWlyZWQ6ITAsdHlwZTpPYmplY3R9LHN0cmlwZTpCb29sZWFuLGNvbnRleHQ6e2RlZmF1bHQ6KCk9Pih7fSksdHlwZTpPYmplY3R9LHJvd0NsYXNzTmFtZTpbU3RyaW5nLEZ1bmN0aW9uXSxyb3dTdHlsZTpbT2JqZWN0LEZ1bmN0aW9uXSxmaXhlZDp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIlwifSxoaWdobGlnaHQ6Qm9vbGVhbn0sc2V0dXAoZSl7Y29uc3QgdD12KCksbD10LnBhcmVudCx7d3JhcHBlZFJvd1JlbmRlcjphLHRvb2x0aXBWaXNpYmxlOm4sdG9vbHRpcENvbnRlbnQ6byx0b29sdGlwVHJpZ2dlcjppfT1nZChlKSx7b25Db2x1bW5zQ2hhbmdlOnIsb25TY3JvbGxhYmxlQ2hhbmdlOnN9PXVkKGwpO3JldHVybiB5KGUuc3RvcmUuc3RhdGVzLmhvdmVyUm93LCgobCxhKT0+e2lmKCFlLnN0b3JlLnN0YXRlcy5pc0NvbXBsZXgudmFsdWV8fHplKXJldHVybjtsZXQgbj13aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lO258fChuPWU9PndpbmRvdy5zZXRUaW1lb3V0KGUsMTYpKSxuKCgoKT0+e2NvbnN0IGU9dC52bm9kZS5lbC5xdWVyeVNlbGVjdG9yQWxsKFwiLmVsLXRhYmxlX19yb3dcIiksbj1lW2FdLG89ZVtsXTtuJiZpdChuLFwiaG92ZXItcm93XCIpLG8mJm90KG8sXCJob3Zlci1yb3dcIil9KSl9KSkse29uQ29sdW1uc0NoYW5nZTpyLG9uU2Nyb2xsYWJsZUNoYW5nZTpzLHdyYXBwZWRSb3dSZW5kZXI6YSx0b29sdGlwVmlzaWJsZTpuLHRvb2x0aXBDb250ZW50Om8sdG9vbHRpcFRyaWdnZXI6aX19LHJlbmRlcigpe2NvbnN0IGU9dGhpcy5zdG9yZS5zdGF0ZXMuZGF0YS52YWx1ZXx8W107cmV0dXJuIEQoXCJ0YWJsZVwiLHtjbGFzczpcImVsLXRhYmxlX19ib2R5XCIsY2VsbHNwYWNpbmc6XCIwXCIsY2VsbHBhZGRpbmc6XCIwXCIsYm9yZGVyOlwiMFwifSxbdmQodGhpcy5zdG9yZS5zdGF0ZXMuY29sdW1ucy52YWx1ZSksRChcInRib2R5XCIse30sW2UucmVkdWNlKCgoZSx0KT0+ZS5jb25jYXQodGhpcy53cmFwcGVkUm93UmVuZGVyKHQsZS5sZW5ndGgpKSksW10pXSldKX19KTtmdW5jdGlvbiB5ZChlKXtjb25zdCB0PXYoKS5wYXJlbnQsYT10LnN0b3JlLHtsZWZ0Rml4ZWRMZWFmQ291bnQ6bixyaWdodEZpeGVkTGVhZkNvdW50Om8sY29sdW1uc0NvdW50OmksbGVmdEZpeGVkQ291bnQ6cixyaWdodEZpeGVkQ291bnQ6cyxjb2x1bW5zOnV9PWZ1bmN0aW9uKCl7Y29uc3QgZT12KCkucGFyZW50LnN0b3JlO3JldHVybntsZWZ0Rml4ZWRMZWFmQ291bnQ6bCgoKCk9PmUuc3RhdGVzLmZpeGVkTGVhZkNvbHVtbnNMZW5ndGgudmFsdWUpKSxyaWdodEZpeGVkTGVhZkNvdW50OmwoKCgpPT5lLnN0YXRlcy5yaWdodEZpeGVkQ29sdW1ucy52YWx1ZS5sZW5ndGgpKSxjb2x1bW5zQ291bnQ6bCgoKCk9PmUuc3RhdGVzLmNvbHVtbnMudmFsdWUubGVuZ3RoKSksbGVmdEZpeGVkQ291bnQ6bCgoKCk9PmUuc3RhdGVzLmZpeGVkQ29sdW1ucy52YWx1ZS5sZW5ndGgpKSxyaWdodEZpeGVkQ291bnQ6bCgoKCk9PmUuc3RhdGVzLnJpZ2h0Rml4ZWRDb2x1bW5zLnZhbHVlLmxlbmd0aCkpLGNvbHVtbnM6ZS5zdGF0ZXMuY29sdW1uc319KCksZD1sKCgoKT0+IWUuZml4ZWQmJnQubGF5b3V0Lmd1dHRlcldpZHRoKSk7cmV0dXJue2hhc0d1dHRlcjpkLGdldFJvd0NsYXNzZXM6KHQsbCk9Pntjb25zdCB1PVt0LmlkLHQuYWxpZ24sdC5sYWJlbENsYXNzTmFtZV07cmV0dXJuIHQuY2xhc3NOYW1lJiZ1LnB1c2godC5jbGFzc05hbWUpLCgodCxsLGEpPT57aWYoZS5maXhlZHx8XCJsZWZ0XCI9PT1lLmZpeGVkKXJldHVybiB0Pj1uLnZhbHVlO2lmKFwicmlnaHRcIj09PWUuZml4ZWQpe2xldCBlPTA7Zm9yKGxldCBhPTA7YTx0O2ErKyllKz1sW2FdLmNvbFNwYW47cmV0dXJuIGU8aS52YWx1ZS1vLnZhbHVlfXJldHVybiEoZS5maXhlZHx8IWEuZml4ZWQpfHx0PHIudmFsdWV8fHQ+PWkudmFsdWUtcy52YWx1ZX0pKGwsYS5zdGF0ZXMuY29sdW1ucy52YWx1ZSx0KSYmdS5wdXNoKFwiaXMtaGlkZGVuXCIpLHQuY2hpbGRyZW58fHUucHVzaChcImlzLWxlYWZcIiksdX0sY29sdW1uczp1fX12YXIga2Q9ZSh7bmFtZTpcIkVsVGFibGVGb290ZXJcIixwcm9wczp7Zml4ZWQ6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJcIn0sc3RvcmU6e3JlcXVpcmVkOiEwLHR5cGU6T2JqZWN0fSxzdW1tYXJ5TWV0aG9kOkZ1bmN0aW9uLHN1bVRleHQ6U3RyaW5nLGJvcmRlcjpCb29sZWFuLGRlZmF1bHRTb3J0Ont0eXBlOk9iamVjdCxkZWZhdWx0OigpPT4oe3Byb3A6XCJcIixvcmRlcjpcIlwifSl9fSxzZXR1cChlKXtjb25zdHtoYXNHdXR0ZXI6dCxnZXRSb3dDbGFzc2VzOmwsY29sdW1uczphfT15ZChlKTtyZXR1cm57Z2V0Um93Q2xhc3NlczpsLGhhc0d1dHRlcjp0LGNvbHVtbnM6YX19LHJlbmRlcigpe2xldCBlPVtdO3JldHVybiB0aGlzLnN1bW1hcnlNZXRob2Q/ZT10aGlzLnN1bW1hcnlNZXRob2Qoe2NvbHVtbnM6dGhpcy5jb2x1bW5zLGRhdGE6dGhpcy5zdG9yZS5zdGF0ZXMuZGF0YS52YWx1ZX0pOnRoaXMuY29sdW1ucy5mb3JFYWNoKCgodCxsKT0+e2lmKDA9PT1sKXJldHVybiB2b2lkKGVbbF09dGhpcy5zdW1UZXh0KTtjb25zdCBhPXRoaXMuc3RvcmUuc3RhdGVzLmRhdGEudmFsdWUubWFwKChlPT5OdW1iZXIoZVt0LnByb3BlcnR5XSkpKSxuPVtdO2xldCBvPSEwO2EuZm9yRWFjaCgoZT0+e2lmKCFpc05hTihlKSl7bz0hMTtjb25zdCB0PShcIlwiK2UpLnNwbGl0KFwiLlwiKVsxXTtuLnB1c2godD90Lmxlbmd0aDowKX19KSk7Y29uc3QgaT1NYXRoLm1heC5hcHBseShudWxsLG4pO2VbbF09bz9cIlwiOmEucmVkdWNlKCgoZSx0KT0+e2NvbnN0IGw9TnVtYmVyKHQpO3JldHVybiBpc05hTihsKT9lOnBhcnNlRmxvYXQoKGUrdCkudG9GaXhlZChNYXRoLm1pbihpLDIwKSkpfSksMCl9KSksRChcInRhYmxlXCIse2NsYXNzOlwiZWwtdGFibGVfX2Zvb3RlclwiLGNlbGxzcGFjaW5nOlwiMFwiLGNlbGxwYWRkaW5nOlwiMFwiLGJvcmRlcjpcIjBcIn0sW3ZkKHRoaXMuY29sdW1ucyx0aGlzLmhhc0d1dHRlciksRChcInRib2R5XCIse2NsYXNzOlt7XCJoYXMtZ3V0dGVyXCI6dGhpcy5oYXNHdXR0ZXJ9XX0sW0QoXCJ0clwiLHt9LFsuLi50aGlzLmNvbHVtbnMubWFwKCgodCxsKT0+RChcInRkXCIse2tleTpsLGNvbHNwYW46dC5jb2xTcGFuLHJvd3NwYW46dC5yb3dTcGFuLGNsYXNzOnRoaXMuZ2V0Um93Q2xhc3Nlcyh0LGwpfSxbRChcImRpdlwiLHtjbGFzczpbXCJjZWxsXCIsdC5sYWJlbENsYXNzTmFtZV19LFtlW2xdXSldKSkpLHRoaXMuaGFzR3V0dGVyJiZoZCgpXSldKV0pfX0pO2xldCBDZD0xO3ZhciB4ZD1lKHtuYW1lOlwiRWxUYWJsZVwiLGRpcmVjdGl2ZXM6e01vdXNld2hlZWw6T3R9LGNvbXBvbmVudHM6e1RhYmxlSGVhZGVyOm1kLFRhYmxlQm9keTpiZCxUYWJsZUZvb3RlcjprZH0scHJvcHM6e2RhdGE6e3R5cGU6QXJyYXksZGVmYXVsdDpmdW5jdGlvbigpe3JldHVybltdfX0sc2l6ZTpTdHJpbmcsd2lkdGg6W1N0cmluZyxOdW1iZXJdLGhlaWdodDpbU3RyaW5nLE51bWJlcl0sbWF4SGVpZ2h0OltTdHJpbmcsTnVtYmVyXSxmaXQ6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiEwfSxzdHJpcGU6Qm9vbGVhbixib3JkZXI6Qm9vbGVhbixyb3dLZXk6W1N0cmluZyxGdW5jdGlvbl0sc2hvd0hlYWRlcjp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITB9LHNob3dTdW1tYXJ5OkJvb2xlYW4sc3VtVGV4dDpTdHJpbmcsc3VtbWFyeU1ldGhvZDpGdW5jdGlvbixyb3dDbGFzc05hbWU6W1N0cmluZyxGdW5jdGlvbl0scm93U3R5bGU6W09iamVjdCxGdW5jdGlvbl0sY2VsbENsYXNzTmFtZTpbU3RyaW5nLEZ1bmN0aW9uXSxjZWxsU3R5bGU6W09iamVjdCxGdW5jdGlvbl0saGVhZGVyUm93Q2xhc3NOYW1lOltTdHJpbmcsRnVuY3Rpb25dLGhlYWRlclJvd1N0eWxlOltPYmplY3QsRnVuY3Rpb25dLGhlYWRlckNlbGxDbGFzc05hbWU6W1N0cmluZyxGdW5jdGlvbl0saGVhZGVyQ2VsbFN0eWxlOltPYmplY3QsRnVuY3Rpb25dLGhpZ2hsaWdodEN1cnJlbnRSb3c6Qm9vbGVhbixjdXJyZW50Um93S2V5OltTdHJpbmcsTnVtYmVyXSxlbXB0eVRleHQ6U3RyaW5nLGV4cGFuZFJvd0tleXM6QXJyYXksZGVmYXVsdEV4cGFuZEFsbDpCb29sZWFuLGRlZmF1bHRTb3J0Ok9iamVjdCx0b29sdGlwRWZmZWN0OlN0cmluZyxzcGFuTWV0aG9kOkZ1bmN0aW9uLHNlbGVjdE9uSW5kZXRlcm1pbmF0ZTp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITB9LGluZGVudDp7dHlwZTpOdW1iZXIsZGVmYXVsdDoxNn0sdHJlZVByb3BzOnt0eXBlOk9iamVjdCxkZWZhdWx0OigpPT4oe2hhc0NoaWxkcmVuOlwiaGFzQ2hpbGRyZW5cIixjaGlsZHJlbjpcImNoaWxkcmVuXCJ9KX0sbGF6eTpCb29sZWFuLGxvYWQ6RnVuY3Rpb259LGVtaXRzOltcInNlbGVjdFwiLFwic2VsZWN0LWFsbFwiLFwic2VsZWN0aW9uLWNoYW5nZVwiLFwiY2VsbC1tb3VzZS1lbnRlclwiLFwiY2VsbC1tb3VzZS1sZWF2ZVwiLFwiY2VsbC1jbGlja1wiLFwiY2VsbC1kYmxjbGlja1wiLFwicm93LWNsaWNrXCIsXCJyb3ctY29udGV4dG1lbnVcIixcInJvdy1kYmxjbGlja1wiLFwiaGVhZGVyLWNsaWNrXCIsXCJoZWFkZXItY29udGV4dG1lbnVcIixcInNvcnQtY2hhbmdlXCIsXCJmaWx0ZXItY2hhbmdlXCIsXCJjdXJyZW50LWNoYW5nZVwiLFwiaGVhZGVyLWRyYWdlbmRcIixcImV4cGFuZC1jaGFuZ2VcIl0sc2V0dXAoZSl7bGV0IGE9digpO2NvbnN0IG49bGQoYSx7cm93S2V5OmUucm93S2V5LGRlZmF1bHRFeHBhbmRBbGw6ZS5kZWZhdWx0RXhwYW5kQWxsLHNlbGVjdE9uSW5kZXRlcm1pbmF0ZTplLnNlbGVjdE9uSW5kZXRlcm1pbmF0ZSxpbmRlbnQ6ZS5pbmRlbnQsbGF6eTplLmxhenksbGF6eUNvbHVtbklkZW50aWZpZXI6ZS50cmVlUHJvcHMuaGFzQ2hpbGRyZW58fFwiaGFzQ2hpbGRyZW5cIixjaGlsZHJlbkNvbHVtbk5hbWU6ZS50cmVlUHJvcHMuY2hpbGRyZW58fFwiY2hpbGRyZW5cIixkYXRhOmUuZGF0YX0pO2Euc3RvcmU9bjtjb25zdCBvPW5ldyBhZCh7c3RvcmU6YS5zdG9yZSx0YWJsZTphLGZpdDplLmZpdCxzaG93SGVhZGVyOmUuc2hvd0hlYWRlcn0pO2EubGF5b3V0PW87Y29uc3QgaT1sKCgoKT0+ZS5oZWlnaHR8fGUubWF4SGVpZ2h0fHxuLnN0YXRlcy5maXhlZENvbHVtbnMudmFsdWUubGVuZ3RoPjB8fG4uc3RhdGVzLnJpZ2h0Rml4ZWRDb2x1bW5zLnZhbHVlLmxlbmd0aD4wKSkse3NldEN1cnJlbnRSb3c6cix0b2dnbGVSb3dTZWxlY3Rpb246cyxjbGVhclNlbGVjdGlvbjp1LGNsZWFyRmlsdGVyOmQsdG9nZ2xlQWxsU2VsZWN0aW9uOmMsdG9nZ2xlUm93RXhwYW5zaW9uOnAsY2xlYXJTb3J0OmgsZG9MYXlvdXQ6bSxzb3J0OmZ9PWZ1bmN0aW9uKGUsdCxsKXtyZXR1cm57c2V0Q3VycmVudFJvdzp0PT57ZS5jb21taXQoXCJzZXRDdXJyZW50Um93XCIsdCl9LHRvZ2dsZVJvd1NlbGVjdGlvbjoodCxsKT0+e2UudG9nZ2xlUm93U2VsZWN0aW9uKHQsbCwhMSksZS51cGRhdGVBbGxTZWxlY3RlZCgpfSxjbGVhclNlbGVjdGlvbjooKT0+e2UuY2xlYXJTZWxlY3Rpb24oKX0sY2xlYXJGaWx0ZXI6dD0+e2UuY2xlYXJGaWx0ZXIodCl9LHRvZ2dsZUFsbFNlbGVjdGlvbjooKT0+e2UuY29tbWl0KFwidG9nZ2xlQWxsU2VsZWN0aW9uXCIpfSx0b2dnbGVSb3dFeHBhbnNpb246KHQsbCk9PntlLnRvZ2dsZVJvd0V4cGFuc2lvbkFkYXB0ZXIodCxsKX0sY2xlYXJTb3J0OigpPT57ZS5jbGVhclNvcnQoKX0sZG9MYXlvdXQ6KCk9PntsLnZhbHVlJiZ0LnVwZGF0ZUVsc0hlaWdodCgpLHQudXBkYXRlQ29sdW1uc1dpZHRoKCl9LHNvcnQ6KHQsbCk9PntlLmNvbW1pdChcInNvcnRcIix7cHJvcDp0LG9yZGVyOmx9KX19fShuLG8saSkse2lzSGlkZGVuOmIscmVuZGVyRXhwYW5kZWQ6ayxzZXREcmFnVmlzaWJsZTpDLGlzR3JvdXA6eCxoYW5kbGVNb3VzZUxlYXZlOncsaGFuZGxlSGVhZGVyRm9vdGVyTW91c2V3aGVlbDpTLHRhYmxlU2l6ZTpFLGJvZHlIZWlnaHQ6TSxlbXB0eUJsb2NrU3R5bGU6VCxoYW5kbGVGaXhlZE1vdXNld2hlZWw6RCxmaXhlZEhlaWdodDpPLGZpeGVkQm9keUhlaWdodDpQLHJlc2l6ZVByb3h5VmlzaWJsZTpWLGJvZHlXaWR0aDpJLHJlc2l6ZVN0YXRlOkEsc2Nyb2xsUG9zaXRpb246Qn09ZnVuY3Rpb24oZSxhLG4sbyxpKXtjb25zdCByPXQoITEpLHM9dChudWxsKSx1PXQoITEpLGQ9dCh7d2lkdGg6bnVsbCxoZWlnaHQ6bnVsbH0pLGM9dCghMSkscD10KFwibGVmdFwiKTtnKCgoKT0+e2Euc2V0SGVpZ2h0KGUuaGVpZ2h0KX0pKSxnKCgoKT0+e2Euc2V0TWF4SGVpZ2h0KGUubWF4SGVpZ2h0KX0pKSxnKCgoKT0+e24uc3RhdGVzLnJvd0tleS52YWx1ZSYmbi5zZXRDdXJyZW50Um93S2V5KGUuY3VycmVudFJvd0tleSl9KSkseSgoKCk9PmUuZGF0YSksKCgpPT57by5zdG9yZS5jb21taXQoXCJzZXREYXRhXCIsZS5kYXRhKX0pLHtpbW1lZGlhdGU6ITB9KSxnKCgoKT0+e2UuZXhwYW5kUm93S2V5cyYmbi5zZXRFeHBhbmRSb3dLZXlzQWRhcHRlcihlLmV4cGFuZFJvd0tleXMpfSkpO2NvbnN0IGg9bCgoKCk9PmUuaGVpZ2h0fHxlLm1heEhlaWdodHx8bi5zdGF0ZXMuZml4ZWRDb2x1bW5zLnZhbHVlLmxlbmd0aD4wfHxuLnN0YXRlcy5yaWdodEZpeGVkQ29sdW1ucy52YWx1ZS5sZW5ndGg+MCkpO18oKCgpPT57bSgpLG4udXBkYXRlQ29sdW1ucygpLGkoKSxkLnZhbHVlPXt3aWR0aDpvLnZub2RlLmVsLm9mZnNldFdpZHRoLGhlaWdodDpvLnZub2RlLmVsLm9mZnNldEhlaWdodH0sbi5zdGF0ZXMuY29sdW1ucy52YWx1ZS5mb3JFYWNoKChlPT57ZS5maWx0ZXJlZFZhbHVlJiZlLmZpbHRlcmVkVmFsdWUubGVuZ3RoJiZvLnN0b3JlLmNvbW1pdChcImZpbHRlckNoYW5nZVwiLHtjb2x1bW46ZSx2YWx1ZXM6ZS5maWx0ZXJlZFZhbHVlLHNpbGVudDohMH0pfSkpLG8uJHJlYWR5PSEwfSkpO2NvbnN0IHY9cmUoKGZ1bmN0aW9uKCl7Y29uc3R7c2Nyb2xsTGVmdDplLHNjcm9sbFRvcDp0LG9mZnNldFdpZHRoOmwsc2Nyb2xsV2lkdGg6YX09by5yZWZzLmJvZHlXcmFwcGVyLHtoZWFkZXJXcmFwcGVyOm4sZm9vdGVyV3JhcHBlcjppLGZpeGVkQm9keVdyYXBwZXI6cixyaWdodEZpeGVkQm9keVdyYXBwZXI6c309by5yZWZzO24mJihuLnNjcm9sbExlZnQ9ZSksaSYmKGkuc2Nyb2xsTGVmdD1lKSxyJiYoci5zY3JvbGxUb3A9dCkscyYmKHMuc2Nyb2xsVG9wPXQpO2NvbnN0IHU9YS1sLTE7cC52YWx1ZT1lPj11P1wicmlnaHRcIjowPT09ZT9cImxlZnRcIjpcIm1pZGRsZVwifSksMTApLG09KCk9PntvLnJlZnMuYm9keVdyYXBwZXIuYWRkRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLHYse3Bhc3NpdmU6ITB9KSxlLmZpdCYmSnQoby52bm9kZS5lbCxiKX07TigoKCk9PntmKCl9KSk7Y29uc3QgZj0oKT0+e3ZhciB0O251bGw9PT0odD1vLnJlZnMuYm9keVdyYXBwZXIpfHx2b2lkIDA9PT10fHx0LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJzY3JvbGxcIix2LCEwKSxlLmZpdCYmZWwoby52bm9kZS5lbCxiKX0sYj0oKT0+e2lmKCFvLiRyZWFkeSlyZXR1cm47bGV0IHQ9ITE7Y29uc3QgbD1vLnZub2RlLmVsLHt3aWR0aDphLGhlaWdodDpufT1kLnZhbHVlLHI9bC5vZmZzZXRXaWR0aDthIT09ciYmKHQ9ITApO2NvbnN0IHM9bC5vZmZzZXRIZWlnaHQ7KGUuaGVpZ2h0fHxoLnZhbHVlKSYmbiE9PXMmJih0PSEwKSx0JiYoZC52YWx1ZT17d2lkdGg6cixoZWlnaHQ6c30saSgpKX0saz1sKCgoKT0+ZS5zaXplKSksQz1sKCgoKT0+e2NvbnN0e2JvZHlXaWR0aDplLHNjcm9sbFk6dCxndXR0ZXJXaWR0aDpsfT1hO3JldHVybiBlLnZhbHVlP2UudmFsdWUtKHQudmFsdWU/bDowKStcInB4XCI6XCJcIn0pKTtyZXR1cm57aXNIaWRkZW46cixyZW5kZXJFeHBhbmRlZDpzLHNldERyYWdWaXNpYmxlOmU9Pnt1LnZhbHVlPWV9LGlzR3JvdXA6YyxoYW5kbGVNb3VzZUxlYXZlOigpPT57by5zdG9yZS5jb21taXQoXCJzZXRIb3ZlclJvd1wiLG51bGwpLG8uaG92ZXJTdGF0ZSYmKG8uaG92ZXJTdGF0ZT1udWxsKX0saGFuZGxlSGVhZGVyRm9vdGVyTW91c2V3aGVlbDooZSx0KT0+e2NvbnN0e3BpeGVsWDpsLHBpeGVsWTphfT10O01hdGguYWJzKGwpPj1NYXRoLmFicyhhKSYmKG8ucmVmcy5ib2R5V3JhcHBlci5zY3JvbGxMZWZ0Kz10LnBpeGVsWC81KX0sdGFibGVTaXplOmssYm9keUhlaWdodDpsKCgoKT0+e2NvbnN0IHQ9YS5oZWFkZXJIZWlnaHQudmFsdWV8fDAsbD1hLmJvZHlIZWlnaHQudmFsdWUsbj1hLmZvb3RlckhlaWdodC52YWx1ZXx8MDtpZihlLmhlaWdodClyZXR1cm57aGVpZ2h0Omw/bCtcInB4XCI6XCJcIn07aWYoZS5tYXhIZWlnaHQpe2NvbnN0IGw9WHUoZS5tYXhIZWlnaHQpO2lmKFwibnVtYmVyXCI9PXR5cGVvZiBsKXJldHVybntcIm1heC1oZWlnaHRcIjpsLW4tKGUuc2hvd0hlYWRlcj90OjApK1wicHhcIn19cmV0dXJue319KSksZW1wdHlCbG9ja1N0eWxlOmwoKCgpPT57aWYoZS5kYXRhJiZlLmRhdGEubGVuZ3RoKXJldHVybiBudWxsO2xldCB0PVwiMTAwJVwiO3JldHVybiBhLmFwcGVuZEhlaWdodC52YWx1ZSYmKHQ9YGNhbGMoMTAwJSAtICR7YS5hcHBlbmRIZWlnaHQudmFsdWV9cHgpYCkse3dpZHRoOkMudmFsdWUsaGVpZ2h0OnR9fSkpLGhhbmRsZUZpeGVkTW91c2V3aGVlbDooZSx0KT0+e2NvbnN0IGw9by5yZWZzLmJvZHlXcmFwcGVyO2lmKE1hdGguYWJzKHQuc3BpblkpPjApe2NvbnN0IGE9bC5zY3JvbGxUb3A7dC5waXhlbFk8MCYmMCE9PWEmJmUucHJldmVudERlZmF1bHQoKSx0LnBpeGVsWT4wJiZsLnNjcm9sbEhlaWdodC1sLmNsaWVudEhlaWdodD5hJiZlLnByZXZlbnREZWZhdWx0KCksbC5zY3JvbGxUb3ArPU1hdGguY2VpbCh0LnBpeGVsWS81KX1lbHNlIGwuc2Nyb2xsTGVmdCs9TWF0aC5jZWlsKHQucGl4ZWxYLzUpfSxmaXhlZEhlaWdodDpsKCgoKT0+ZS5tYXhIZWlnaHQ/ZS5zaG93U3VtbWFyeT97Ym90dG9tOjB9Ontib3R0b206YS5zY3JvbGxYLnZhbHVlJiZlLmRhdGEubGVuZ3RoP2EuZ3V0dGVyV2lkdGgrXCJweFwiOlwiXCJ9OmUuc2hvd1N1bW1hcnk/e2hlaWdodDphLnRhYmxlSGVpZ2h0LnZhbHVlP2EudGFibGVIZWlnaHQudmFsdWUrXCJweFwiOlwiXCJ9OntoZWlnaHQ6YS52aWV3cG9ydEhlaWdodC52YWx1ZT9hLnZpZXdwb3J0SGVpZ2h0LnZhbHVlK1wicHhcIjpcIlwifSkpLGZpeGVkQm9keUhlaWdodDpsKCgoKT0+e2lmKGUuaGVpZ2h0KXJldHVybntoZWlnaHQ6YS5maXhlZEJvZHlIZWlnaHQudmFsdWU/YS5maXhlZEJvZHlIZWlnaHQudmFsdWUrXCJweFwiOlwiXCJ9O2lmKGUubWF4SGVpZ2h0KXtsZXQgdD1YdShlLm1heEhlaWdodCk7aWYoXCJudW1iZXJcIj09dHlwZW9mIHQpcmV0dXJuIHQ9YS5zY3JvbGxYLnZhbHVlP3QtYS5ndXR0ZXJXaWR0aDp0LGUuc2hvd0hlYWRlciYmKHQtPWEuaGVhZGVySGVpZ2h0LnZhbHVlKSx0LT1hLmZvb3RlckhlaWdodC52YWx1ZSx7XCJtYXgtaGVpZ2h0XCI6dCtcInB4XCJ9fXJldHVybnt9fSkpLHJlc2l6ZVByb3h5VmlzaWJsZTp1LGJvZHlXaWR0aDpDLHJlc2l6ZVN0YXRlOmQsc2Nyb2xsUG9zaXRpb246cH19KGUsbyxuLGEsbSksTD1sZSgoKCk9Pm0oKSksNTApLHo9XCJlbC10YWJsZV9cIitDZCsrO3JldHVybiBhLnRhYmxlSWQ9eixhLnN0YXRlPXtpc0dyb3VwOngscmVzaXplU3RhdGU6QSxkb0xheW91dDptLGRlYm91bmNlZFVwZGF0ZUxheW91dDpMfSx7bGF5b3V0Om8sc3RvcmU6bixoYW5kbGVIZWFkZXJGb290ZXJNb3VzZXdoZWVsOlMsaGFuZGxlTW91c2VMZWF2ZTp3LHRhYmxlSWQ6eix0YWJsZVNpemU6RSxpc0hpZGRlbjpiLHJlbmRlckV4cGFuZGVkOmsscmVzaXplUHJveHlWaXNpYmxlOlYscmVzaXplU3RhdGU6QSxpc0dyb3VwOngsc2Nyb2xsUG9zaXRpb246Qixib2R5V2lkdGg6SSxib2R5SGVpZ2h0Ok0sZW1wdHlCbG9ja1N0eWxlOlQsZGVib3VuY2VkVXBkYXRlTGF5b3V0OkwsaGFuZGxlRml4ZWRNb3VzZXdoZWVsOkQsZml4ZWRIZWlnaHQ6TyxmaXhlZEJvZHlIZWlnaHQ6UCxzZXRDdXJyZW50Um93OnIsdG9nZ2xlUm93U2VsZWN0aW9uOnMsY2xlYXJTZWxlY3Rpb246dSxjbGVhckZpbHRlcjpkLHRvZ2dsZUFsbFNlbGVjdGlvbjpjLHRvZ2dsZVJvd0V4cGFuc2lvbjpwLGNsZWFyU29ydDpoLGRvTGF5b3V0Om0sc29ydDpmLHQ6cWwsc2V0RHJhZ1Zpc2libGU6Qyxjb250ZXh0OmF9fX0pO2NvbnN0IHdkPXtyZWY6XCJoaWRkZW5Db2x1bW5zXCIsY2xhc3M6XCJoaWRkZW4tY29sdW1uc1wifSxfZD17a2V5OjAscmVmOlwiaGVhZGVyV3JhcHBlclwiLGNsYXNzOlwiZWwtdGFibGVfX2hlYWRlci13cmFwcGVyXCJ9LFNkPXtjbGFzczpcImVsLXRhYmxlX19lbXB0eS10ZXh0XCJ9LEVkPXtrZXk6MSxyZWY6XCJhcHBlbmRXcmFwcGVyXCIsY2xhc3M6XCJlbC10YWJsZV9fYXBwZW5kLXdyYXBwZXJcIn0sTWQ9e2tleToxLHJlZjpcImZvb3RlcldyYXBwZXJcIixjbGFzczpcImVsLXRhYmxlX19mb290ZXItd3JhcHBlclwifSxUZD17a2V5OjAscmVmOlwiZml4ZWRIZWFkZXJXcmFwcGVyXCIsY2xhc3M6XCJlbC10YWJsZV9fZml4ZWQtaGVhZGVyLXdyYXBwZXJcIn0sTmQ9e2tleToxLHJlZjpcImZpeGVkRm9vdGVyV3JhcHBlclwiLGNsYXNzOlwiZWwtdGFibGVfX2ZpeGVkLWZvb3Rlci13cmFwcGVyXCJ9LERkPXtrZXk6MCxyZWY6XCJyaWdodEZpeGVkSGVhZGVyV3JhcHBlclwiLGNsYXNzOlwiZWwtdGFibGVfX2ZpeGVkLWhlYWRlci13cmFwcGVyXCJ9LE9kPXtrZXk6MSxyZWY6XCJyaWdodEZpeGVkRm9vdGVyV3JhcHBlclwiLGNsYXNzOlwiZWwtdGFibGVfX2ZpeGVkLWZvb3Rlci13cmFwcGVyXCJ9LFBkPXtyZWY6XCJyZXNpemVQcm94eVwiLGNsYXNzOlwiZWwtdGFibGVfX2NvbHVtbi1yZXNpemUtcHJveHlcIn07eGQucmVuZGVyPWZ1bmN0aW9uKGUsdCxsLG8saSx2KXtjb25zdCBtPVAoXCJ0YWJsZS1oZWFkZXJcIiksZj1QKFwidGFibGUtYm9keVwiKSxnPVAoXCJ0YWJsZS1mb290ZXJcIiksYj1GKFwibW91c2V3aGVlbFwiKTtyZXR1cm4gYSgpLG4oXCJkaXZcIix7Y2xhc3M6W1t7XCJlbC10YWJsZS0tZml0XCI6ZS5maXQsXCJlbC10YWJsZS0tc3RyaXBlZFwiOmUuc3RyaXBlLFwiZWwtdGFibGUtLWJvcmRlclwiOmUuYm9yZGVyfHxlLmlzR3JvdXAsXCJlbC10YWJsZS0taGlkZGVuXCI6ZS5pc0hpZGRlbixcImVsLXRhYmxlLS1ncm91cFwiOmUuaXNHcm91cCxcImVsLXRhYmxlLS1mbHVpZC1oZWlnaHRcIjplLm1heEhlaWdodCxcImVsLXRhYmxlLS1zY3JvbGxhYmxlLXhcIjplLmxheW91dC5zY3JvbGxYLnZhbHVlLFwiZWwtdGFibGUtLXNjcm9sbGFibGUteVwiOmUubGF5b3V0LnNjcm9sbFkudmFsdWUsXCJlbC10YWJsZS0tZW5hYmxlLXJvdy1ob3ZlclwiOiFlLnN0b3JlLnN0YXRlcy5pc0NvbXBsZXgudmFsdWUsXCJlbC10YWJsZS0tZW5hYmxlLXJvdy10cmFuc2l0aW9uXCI6MCE9PShlLnN0b3JlLnN0YXRlcy5kYXRhLnZhbHVlfHxbXSkubGVuZ3RoJiYoZS5zdG9yZS5zdGF0ZXMuZGF0YS52YWx1ZXx8W10pLmxlbmd0aDwxMDB9LGUudGFibGVTaXplP1wiZWwtdGFibGUtLVwiK2UudGFibGVTaXplOlwiXCJdLFwiZWwtdGFibGVcIl0sb25Nb3VzZWxlYXZlOnRbMV18fCh0WzFdPXQ9PmUuaGFuZGxlTW91c2VMZWF2ZSgpKX0sW3MoXCJkaXZcIix3ZCxbZChlLiRzbG90cyxcImRlZmF1bHRcIildLDUxMiksZS5zaG93SGVhZGVyP3IoKGEoKSxuKFwiZGl2XCIsX2QsW3MobSx7cmVmOlwidGFibGVIZWFkZXJcIixib3JkZXI6ZS5ib3JkZXIsXCJkZWZhdWx0LXNvcnRcIjplLmRlZmF1bHRTb3J0LHN0b3JlOmUuc3RvcmUsc3R5bGU6e3dpZHRoOmUubGF5b3V0LmJvZHlXaWR0aC52YWx1ZT9lLmxheW91dC5ib2R5V2lkdGgudmFsdWUrXCJweFwiOlwiXCJ9LG9uU2V0RHJhZ1Zpc2libGU6ZS5zZXREcmFnVmlzaWJsZX0sbnVsbCw4LFtcImJvcmRlclwiLFwiZGVmYXVsdC1zb3J0XCIsXCJzdG9yZVwiLFwic3R5bGVcIixcIm9uU2V0RHJhZ1Zpc2libGVcIl0pXSw1MTIpKSxbW2IsZS5oYW5kbGVIZWFkZXJGb290ZXJNb3VzZXdoZWVsXV0pOnUoXCJ2LWlmXCIsITApLHMoXCJkaXZcIix7cmVmOlwiYm9keVdyYXBwZXJcIixjbGFzczpbW2UubGF5b3V0LnNjcm9sbFgudmFsdWU/XCJpcy1zY3JvbGxpbmctXCIrZS5zY3JvbGxQb3NpdGlvbjpcImlzLXNjcm9sbGluZy1ub25lXCJdLFwiZWwtdGFibGVfX2JvZHktd3JhcHBlclwiXSxzdHlsZTpbZS5ib2R5SGVpZ2h0XX0sW3MoZix7Y29udGV4dDplLmNvbnRleHQsaGlnaGxpZ2h0OmUuaGlnaGxpZ2h0Q3VycmVudFJvdyxcInJvdy1jbGFzcy1uYW1lXCI6ZS5yb3dDbGFzc05hbWUsXCJyb3ctc3R5bGVcIjplLnJvd1N0eWxlLHN0b3JlOmUuc3RvcmUsc3RyaXBlOmUuc3RyaXBlLHN0eWxlOnt3aWR0aDplLmJvZHlXaWR0aH19LG51bGwsOCxbXCJjb250ZXh0XCIsXCJoaWdobGlnaHRcIixcInJvdy1jbGFzcy1uYW1lXCIsXCJyb3ctc3R5bGVcIixcInN0b3JlXCIsXCJzdHJpcGVcIixcInN0eWxlXCJdKSxlLmRhdGEmJjAhPT1lLmRhdGEubGVuZ3RoP3UoXCJ2LWlmXCIsITApOihhKCksbihcImRpdlwiLHtrZXk6MCxyZWY6XCJlbXB0eUJsb2NrXCIsc3R5bGU6ZS5lbXB0eUJsb2NrU3R5bGUsY2xhc3M6XCJlbC10YWJsZV9fZW1wdHktYmxvY2tcIn0sW3MoXCJzcGFuXCIsU2QsW2QoZS4kc2xvdHMsXCJlbXB0eVwiLHt9LCgoKT0+W2MocChlLmVtcHR5VGV4dHx8ZS50KFwiZWwudGFibGUuZW1wdHlUZXh0XCIpKSwxKV0pKV0pXSw0KSksZS4kc2xvdHMuYXBwZW5kPyhhKCksbihcImRpdlwiLEVkLFtkKGUuJHNsb3RzLFwiYXBwZW5kXCIpXSw1MTIpKTp1KFwidi1pZlwiLCEwKV0sNiksZS5zaG93U3VtbWFyeT9yKChhKCksbihcImRpdlwiLE1kLFtzKGcse2JvcmRlcjplLmJvcmRlcixcImRlZmF1bHQtc29ydFwiOmUuZGVmYXVsdFNvcnQsc3RvcmU6ZS5zdG9yZSxzdHlsZTp7d2lkdGg6ZS5sYXlvdXQuYm9keVdpZHRoLnZhbHVlP2UubGF5b3V0LmJvZHlXaWR0aC52YWx1ZStcInB4XCI6XCJcIn0sXCJzdW0tdGV4dFwiOmUuc3VtVGV4dHx8ZS50KFwiZWwudGFibGUuc3VtVGV4dFwiKSxcInN1bW1hcnktbWV0aG9kXCI6ZS5zdW1tYXJ5TWV0aG9kfSxudWxsLDgsW1wiYm9yZGVyXCIsXCJkZWZhdWx0LXNvcnRcIixcInN0b3JlXCIsXCJzdHlsZVwiLFwic3VtLXRleHRcIixcInN1bW1hcnktbWV0aG9kXCJdKV0sNTEyKSksW1toLGUuZGF0YSYmZS5kYXRhLmxlbmd0aD4wXSxbYixlLmhhbmRsZUhlYWRlckZvb3Rlck1vdXNld2hlZWxdXSk6dShcInYtaWZcIiwhMCksZS5zdG9yZS5zdGF0ZXMuZml4ZWRDb2x1bW5zLnZhbHVlLmxlbmd0aD4wP3IoKGEoKSxuKFwiZGl2XCIse2tleToyLHJlZjpcImZpeGVkV3JhcHBlclwiLHN0eWxlOlt7d2lkdGg6ZS5sYXlvdXQuZml4ZWRXaWR0aC52YWx1ZT9lLmxheW91dC5maXhlZFdpZHRoLnZhbHVlK1wicHhcIjpcIlwifSxlLmZpeGVkSGVpZ2h0XSxjbGFzczpcImVsLXRhYmxlX19maXhlZFwifSxbZS5zaG93SGVhZGVyPyhhKCksbihcImRpdlwiLFRkLFtzKG0se3JlZjpcImZpeGVkVGFibGVIZWFkZXJcIixib3JkZXI6ZS5ib3JkZXIsc3RvcmU6ZS5zdG9yZSxzdHlsZTp7d2lkdGg6ZS5ib2R5V2lkdGh9LGZpeGVkOlwibGVmdFwiLG9uU2V0RHJhZ1Zpc2libGU6ZS5zZXREcmFnVmlzaWJsZX0sbnVsbCw4LFtcImJvcmRlclwiLFwic3RvcmVcIixcInN0eWxlXCIsXCJvblNldERyYWdWaXNpYmxlXCJdKV0sNTEyKSk6dShcInYtaWZcIiwhMCkscyhcImRpdlwiLHtyZWY6XCJmaXhlZEJvZHlXcmFwcGVyXCIsc3R5bGU6W3t0b3A6ZS5sYXlvdXQuaGVhZGVySGVpZ2h0LnZhbHVlK1wicHhcIn0sZS5maXhlZEJvZHlIZWlnaHRdLGNsYXNzOlwiZWwtdGFibGVfX2ZpeGVkLWJvZHktd3JhcHBlclwifSxbcyhmLHtoaWdobGlnaHQ6ZS5oaWdobGlnaHRDdXJyZW50Um93LFwicm93LWNsYXNzLW5hbWVcIjplLnJvd0NsYXNzTmFtZSxcInJvdy1zdHlsZVwiOmUucm93U3R5bGUsc3RvcmU6ZS5zdG9yZSxzdHJpcGU6ZS5zdHJpcGUsc3R5bGU6e3dpZHRoOmUuYm9keVdpZHRofSxmaXhlZDpcImxlZnRcIn0sbnVsbCw4LFtcImhpZ2hsaWdodFwiLFwicm93LWNsYXNzLW5hbWVcIixcInJvdy1zdHlsZVwiLFwic3RvcmVcIixcInN0cmlwZVwiLFwic3R5bGVcIl0pLGUuJHNsb3RzLmFwcGVuZD8oYSgpLG4oXCJkaXZcIix7a2V5OjAsc3R5bGU6e2hlaWdodDplLmxheW91dC5hcHBlbmRIZWlnaHQudmFsdWUrXCJweFwifSxjbGFzczpcImVsLXRhYmxlX19hcHBlbmQtZ3V0dGVyXCJ9LG51bGwsNCkpOnUoXCJ2LWlmXCIsITApXSw0KSxlLnNob3dTdW1tYXJ5P3IoKGEoKSxuKFwiZGl2XCIsTmQsW3MoZyx7Ym9yZGVyOmUuYm9yZGVyLHN0b3JlOmUuc3RvcmUsc3R5bGU6e3dpZHRoOmUuYm9keVdpZHRofSxcInN1bS10ZXh0XCI6ZS5zdW1UZXh0fHxlLnQoXCJlbC50YWJsZS5zdW1UZXh0XCIpLFwic3VtbWFyeS1tZXRob2RcIjplLnN1bW1hcnlNZXRob2QsZml4ZWQ6XCJsZWZ0XCJ9LG51bGwsOCxbXCJib3JkZXJcIixcInN0b3JlXCIsXCJzdHlsZVwiLFwic3VtLXRleHRcIixcInN1bW1hcnktbWV0aG9kXCJdKV0sNTEyKSksW1toLGUuZGF0YSYmZS5kYXRhLmxlbmd0aD4wXV0pOnUoXCJ2LWlmXCIsITApXSw0KSksW1tiLGUuaGFuZGxlRml4ZWRNb3VzZXdoZWVsXV0pOnUoXCJ2LWlmXCIsITApLGUuc3RvcmUuc3RhdGVzLnJpZ2h0Rml4ZWRDb2x1bW5zLnZhbHVlLmxlbmd0aD4wP3IoKGEoKSxuKFwiZGl2XCIse2tleTozLHJlZjpcInJpZ2h0Rml4ZWRXcmFwcGVyXCIsc3R5bGU6W3t3aWR0aDplLmxheW91dC5yaWdodEZpeGVkV2lkdGgudmFsdWU/ZS5sYXlvdXQucmlnaHRGaXhlZFdpZHRoLnZhbHVlK1wicHhcIjpcIlwiLHJpZ2h0OmUubGF5b3V0LnNjcm9sbFkudmFsdWU/KGUuYm9yZGVyP2UubGF5b3V0Lmd1dHRlcldpZHRoOmUubGF5b3V0Lmd1dHRlcldpZHRofHwwKStcInB4XCI6XCJcIn0sZS5maXhlZEhlaWdodF0sY2xhc3M6XCJlbC10YWJsZV9fZml4ZWQtcmlnaHRcIn0sW2Uuc2hvd0hlYWRlcj8oYSgpLG4oXCJkaXZcIixEZCxbcyhtLHtyZWY6XCJyaWdodEZpeGVkVGFibGVIZWFkZXJcIixib3JkZXI6ZS5ib3JkZXIsc3RvcmU6ZS5zdG9yZSxzdHlsZTp7d2lkdGg6ZS5ib2R5V2lkdGh9LGZpeGVkOlwicmlnaHRcIixvblNldERyYWdWaXNpYmxlOmUuc2V0RHJhZ1Zpc2libGV9LG51bGwsOCxbXCJib3JkZXJcIixcInN0b3JlXCIsXCJzdHlsZVwiLFwib25TZXREcmFnVmlzaWJsZVwiXSldLDUxMikpOnUoXCJ2LWlmXCIsITApLHMoXCJkaXZcIix7cmVmOlwicmlnaHRGaXhlZEJvZHlXcmFwcGVyXCIsc3R5bGU6W3t0b3A6ZS5sYXlvdXQuaGVhZGVySGVpZ2h0LnZhbHVlK1wicHhcIn0sZS5maXhlZEJvZHlIZWlnaHRdLGNsYXNzOlwiZWwtdGFibGVfX2ZpeGVkLWJvZHktd3JhcHBlclwifSxbcyhmLHtoaWdobGlnaHQ6ZS5oaWdobGlnaHRDdXJyZW50Um93LFwicm93LWNsYXNzLW5hbWVcIjplLnJvd0NsYXNzTmFtZSxcInJvdy1zdHlsZVwiOmUucm93U3R5bGUsc3RvcmU6ZS5zdG9yZSxzdHJpcGU6ZS5zdHJpcGUsc3R5bGU6e3dpZHRoOmUuYm9keVdpZHRofSxmaXhlZDpcInJpZ2h0XCJ9LG51bGwsOCxbXCJoaWdobGlnaHRcIixcInJvdy1jbGFzcy1uYW1lXCIsXCJyb3ctc3R5bGVcIixcInN0b3JlXCIsXCJzdHJpcGVcIixcInN0eWxlXCJdKSxlLiRzbG90cy5hcHBlbmQ/KGEoKSxuKFwiZGl2XCIse2tleTowLHN0eWxlOntoZWlnaHQ6ZS5sYXlvdXQuYXBwZW5kSGVpZ2h0LnZhbHVlK1wicHhcIn0sY2xhc3M6XCJlbC10YWJsZV9fYXBwZW5kLWd1dHRlclwifSxudWxsLDQpKTp1KFwidi1pZlwiLCEwKV0sNCksZS5zaG93U3VtbWFyeT9yKChhKCksbihcImRpdlwiLE9kLFtzKGcse2JvcmRlcjplLmJvcmRlcixzdG9yZTplLnN0b3JlLHN0eWxlOnt3aWR0aDplLmJvZHlXaWR0aH0sXCJzdW0tdGV4dFwiOmUuc3VtVGV4dHx8ZS50KFwiZWwudGFibGUuc3VtVGV4dFwiKSxcInN1bW1hcnktbWV0aG9kXCI6ZS5zdW1tYXJ5TWV0aG9kLGZpeGVkOlwicmlnaHRcIn0sbnVsbCw4LFtcImJvcmRlclwiLFwic3RvcmVcIixcInN0eWxlXCIsXCJzdW0tdGV4dFwiLFwic3VtbWFyeS1tZXRob2RcIl0pXSw1MTIpKSxbW2gsZS5kYXRhJiZlLmRhdGEubGVuZ3RoPjBdXSk6dShcInYtaWZcIiwhMCldLDQpKSxbW2IsZS5oYW5kbGVGaXhlZE1vdXNld2hlZWxdXSk6dShcInYtaWZcIiwhMCksZS5zdG9yZS5zdGF0ZXMucmlnaHRGaXhlZENvbHVtbnMudmFsdWUubGVuZ3RoPjA/KGEoKSxuKFwiZGl2XCIse2tleTo0LHJlZjpcInJpZ2h0Rml4ZWRQYXRjaFwiLHN0eWxlOnt3aWR0aDplLmxheW91dC5zY3JvbGxZLnZhbHVlP2UubGF5b3V0Lmd1dHRlcldpZHRoK1wicHhcIjpcIjBcIixoZWlnaHQ6ZS5sYXlvdXQuaGVhZGVySGVpZ2h0LnZhbHVlK1wicHhcIn0sY2xhc3M6XCJlbC10YWJsZV9fZml4ZWQtcmlnaHQtcGF0Y2hcIn0sbnVsbCw0KSk6dShcInYtaWZcIiwhMCkscihzKFwiZGl2XCIsUGQsbnVsbCw1MTIpLFtbaCxlLnJlc2l6ZVByb3h5VmlzaWJsZV1dKV0sMzQpfSx4ZC5fX2ZpbGU9XCJwYWNrYWdlcy90YWJsZS9zcmMvdGFibGUudnVlXCIseGQuaW5zdGFsbD1lPT57ZS5jb21wb25lbnQoeGQubmFtZSx4ZCl9O2NvbnN0IFZkPXtkZWZhdWx0OntvcmRlcjpcIlwifSxzZWxlY3Rpb246e3dpZHRoOjQ4LG1pbldpZHRoOjQ4LHJlYWxXaWR0aDo0OCxvcmRlcjpcIlwiLGNsYXNzTmFtZTpcImVsLXRhYmxlLWNvbHVtbi0tc2VsZWN0aW9uXCJ9LGV4cGFuZDp7d2lkdGg6NDgsbWluV2lkdGg6NDgscmVhbFdpZHRoOjQ4LG9yZGVyOlwiXCJ9LGluZGV4Ont3aWR0aDo0OCxtaW5XaWR0aDo0OCxyZWFsV2lkdGg6NDgsb3JkZXI6XCJcIn19LElkPXtzZWxlY3Rpb246e3JlbmRlckhlYWRlcjpmdW5jdGlvbih7c3RvcmU6ZX0pe2NvbnN0IHQ9ZTtyZXR1cm4gRChLYSx7ZGlzYWJsZWQ6dC5zdGF0ZXMuZGF0YS52YWx1ZSYmMD09PXQuc3RhdGVzLmRhdGEudmFsdWUubGVuZ3RoLGluZGV0ZXJtaW5hdGU6dC5zdGF0ZXMuc2VsZWN0aW9uLnZhbHVlLmxlbmd0aD4wJiYhdC5zdGF0ZXMuaXNBbGxTZWxlY3RlZC52YWx1ZSxvbkNsaWNrOnQudG9nZ2xlQWxsU2VsZWN0aW9uLG1vZGVsVmFsdWU6dC5zdGF0ZXMuaXNBbGxTZWxlY3RlZC52YWx1ZX0pfSxyZW5kZXJDZWxsOmZ1bmN0aW9uKHtyb3c6ZSxjb2x1bW46dCxzdG9yZTpsLCRpbmRleDphfSl7cmV0dXJuIEQoS2Ese2Rpc2FibGVkOiEhdC5zZWxlY3RhYmxlJiYhdC5zZWxlY3RhYmxlLmNhbGwobnVsbCxlLGEpLG9uSW5wdXQ6KCk9PntsLmNvbW1pdChcInJvd1NlbGVjdGVkQ2hhbmdlZFwiLGUpfSxuYXRpdmVPbkNsaWNrOmU9PmUuc3RvcFByb3BhZ2F0aW9uKCksbW9kZWxWYWx1ZTpsLmlzU2VsZWN0ZWQoZSl9KX0sc29ydGFibGU6ITEscmVzaXphYmxlOiExfSxpbmRleDp7cmVuZGVySGVhZGVyOmZ1bmN0aW9uKHtjb2x1bW46ZX0pe3JldHVybiBlLmxhYmVsfHxcIiNcIn0scmVuZGVyQ2VsbDpmdW5jdGlvbih7Y29sdW1uOmUsJGluZGV4OnR9KXtsZXQgbD10KzE7Y29uc3QgYT1lLmluZGV4O3JldHVyblwibnVtYmVyXCI9PXR5cGVvZiBhP2w9dCthOlwiZnVuY3Rpb25cIj09dHlwZW9mIGEmJihsPWEodCkpLEQoXCJkaXZcIix7fSxbbF0pfSxzb3J0YWJsZTohMX0sZXhwYW5kOntyZW5kZXJIZWFkZXI6ZnVuY3Rpb24oe2NvbHVtbjplfSl7cmV0dXJuIGUubGFiZWx8fFwiXCJ9LHJlbmRlckNlbGw6ZnVuY3Rpb24oe3JvdzplLHN0b3JlOnR9KXtjb25zdCBsPXQsYT1lLG49W1wiZWwtdGFibGVfX2V4cGFuZC1pY29uXCJdO2wuc3RhdGVzLmV4cGFuZFJvd3MudmFsdWUuaW5kZXhPZihhKT4tMSYmbi5wdXNoKFwiZWwtdGFibGVfX2V4cGFuZC1pY29uLS1leHBhbmRlZFwiKTtyZXR1cm4gRChcImRpdlwiLHtjbGFzczpuLG9uQ2xpY2s6ZnVuY3Rpb24oZSl7ZS5zdG9wUHJvcGFnYXRpb24oKSxsLnRvZ2dsZVJvd0V4cGFuc2lvbihhKX19LFtEKFwiaVwiLHtjbGFzczpcImVsLWljb24gZWwtaWNvbi1hcnJvdy1yaWdodFwifSldKX0sc29ydGFibGU6ITEscmVzaXphYmxlOiExLGNsYXNzTmFtZTpcImVsLXRhYmxlX19leHBhbmQtY29sdW1uXCJ9fTtmdW5jdGlvbiBBZCh7cm93OmUsY29sdW1uOnQsJGluZGV4Omx9KXtjb25zdCBhPXQucHJvcGVydHksbj1hJiYkZShlLGEsITEpLnY7cmV0dXJuIHQmJnQuZm9ybWF0dGVyP3QuZm9ybWF0dGVyKGUsdCxuLGwpOm59ZnVuY3Rpb24gQmQoZSxhLG4pe2NvbnN0IG89digpLGk9dChcIlwiKSxyPXQoITEpLHM9dCgpLHU9dCgpO2coKCgpPT57cy52YWx1ZT1lLmFsaWduP1wiaXMtXCIrZS5hbGlnbjpudWxsLHMudmFsdWV9KSksZygoKCk9Pnt1LnZhbHVlPWUuaGVhZGVyQWxpZ24/XCJpcy1cIitlLmhlYWRlckFsaWduOnMudmFsdWUsdS52YWx1ZX0pKTtjb25zdCBkPWwoKCgpPT57bGV0IGU9by52bm9kZS52UGFyZW50fHxvLnBhcmVudDtmb3IoO2UmJiFlLnRhYmxlSWQmJiFlLmNvbHVtbklkOyllPWUudm5vZGUudlBhcmVudHx8ZS5wYXJlbnQ7cmV0dXJuIGV9KSksYz10KEd1KGUud2lkdGgpKSxwPXQoKHZvaWQgMCE9PShoPWUubWluV2lkdGgpJiYoaD1HdShoKSxpc05hTihoKSYmKGg9ODApKSxoKSk7dmFyIGg7cmV0dXJue2NvbHVtbklkOmkscmVhbEFsaWduOnMsaXNTdWJDb2x1bW46cixyZWFsSGVhZGVyQWxpZ246dSxjb2x1bW5PclRhYmxlUGFyZW50OmQsc2V0Q29sdW1uV2lkdGg6ZT0+KGMudmFsdWUmJihlLndpZHRoPWMudmFsdWUpLHAudmFsdWUmJihlLm1pbldpZHRoPXAudmFsdWUpLGUubWluV2lkdGh8fChlLm1pbldpZHRoPTgwKSxlLnJlYWxXaWR0aD12b2lkIDA9PT1lLndpZHRoP2UubWluV2lkdGg6ZS53aWR0aCxlKSxzZXRDb2x1bW5Gb3JjZWRQcm9wczplPT57Y29uc3QgdD1lLnR5cGUsbD1JZFt0XXx8e307cmV0dXJuIE9iamVjdC5rZXlzKGwpLmZvckVhY2goKHQ9Pntjb25zdCBhPWxbdF07dm9pZCAwIT09YSYmKGVbdF09XCJjbGFzc05hbWVcIj09PXQ/YCR7ZVt0XX0gJHthfWA6YSl9KSksZX0sc2V0Q29sdW1uUmVuZGVyczp0PT57ZS5yZW5kZXJIZWFkZXI/Y29uc29sZS53YXJuKFwiW0VsZW1lbnQgV2Fybl1bVGFibGVDb2x1bW5dQ29tcGFyaW5nIHRvIHJlbmRlci1oZWFkZXIsIHNjb3BlZC1zbG90IGhlYWRlciBpcyBlYXNpZXIgdG8gdXNlLiBXZSByZWNvbW1lbmQgdXNlcnMgdG8gdXNlIHNjb3BlZC1zbG90IGhlYWRlci5cIik6XCJzZWxlY3Rpb25cIiE9PXQudHlwZSYmKHQucmVuZGVySGVhZGVyPWU9PntvLmNvbHVtbkNvbmZpZy52YWx1ZS5sYWJlbDtjb25zdCBsPWEuaGVhZGVyO3JldHVybiBsP2woZSk6dC5sYWJlbH0pO2xldCBsPXQucmVuZGVyQ2VsbDtyZXR1cm5cImV4cGFuZFwiPT09dC50eXBlPyh0LnJlbmRlckNlbGw9ZT0+RChcImRpdlwiLHtjbGFzczpcImNlbGxcIn0sW2woZSldKSxuLnZhbHVlLnJlbmRlckV4cGFuZGVkPWU9PmEuZGVmYXVsdD9hLmRlZmF1bHQoZSk6YS5kZWZhdWx0KToobD1sfHxBZCx0LnJlbmRlckNlbGw9ZT0+e2xldCBuPW51bGw7bj1hLmRlZmF1bHQ/YS5kZWZhdWx0KGUpOmwoZSk7Y29uc3QgaT1mdW5jdGlvbih7cm93OmUsdHJlZU5vZGU6dCxzdG9yZTpsfSl7Y29uc3QgYT1lLG49bCxvPXQ7aWYoIW8pcmV0dXJuIG51bGw7Y29uc3QgaT1bXSxyPWZ1bmN0aW9uKGUpe2Uuc3RvcFByb3BhZ2F0aW9uKCksbi5sb2FkT3JUb2dnbGUoYSl9O2lmKG8uaW5kZW50JiZpLnB1c2goRChcInNwYW5cIix7Y2xhc3M6XCJlbC10YWJsZV9faW5kZW50XCIsc3R5bGU6e1wicGFkZGluZy1sZWZ0XCI6by5pbmRlbnQrXCJweFwifX0pKSxcImJvb2xlYW5cIiE9dHlwZW9mIG8uZXhwYW5kZWR8fG8ubm9MYXp5Q2hpbGRyZW4paS5wdXNoKEQoXCJzcGFuXCIse2NsYXNzOlwiZWwtdGFibGVfX3BsYWNlaG9sZGVyXCJ9KSk7ZWxzZXtjb25zdCBlPVtcImVsLXRhYmxlX19leHBhbmQtaWNvblwiLG8uZXhwYW5kZWQ/XCJlbC10YWJsZV9fZXhwYW5kLWljb24tLWV4cGFuZGVkXCI6XCJcIl07bGV0IHQ9W1wiZWwtaWNvbi1hcnJvdy1yaWdodFwiXTtvLmxvYWRpbmcmJih0PVtcImVsLWljb24tbG9hZGluZ1wiXSksaS5wdXNoKEQoXCJkaXZcIix7Y2xhc3M6ZSxvbkNsaWNrOnJ9LFtEKFwiaVwiLHtjbGFzczp0fSldKSl9cmV0dXJuIGl9KGUpLHI9e2NsYXNzOlwiY2VsbFwiLHN0eWxlOnt9fTtyZXR1cm4gdC5zaG93T3ZlcmZsb3dUb29sdGlwJiYoci5jbGFzcys9XCIgZWwtdG9vbHRpcFwiLHIuc3R5bGU9e3dpZHRoOihlLmNvbHVtbi5yZWFsV2lkdGh8fGUuY29sdW1uLndpZHRoKS0xK1wicHhcIn0pLChlPT57ZnVuY3Rpb24gdChlKXt2YXIgdDtcIkVsVGFibGVDb2x1bW5cIj09PShudWxsPT09KHQ9bnVsbD09ZT92b2lkIDA6ZS50eXBlKXx8dm9pZCAwPT09dD92b2lkIDA6dC5uYW1lKSYmKGUudlBhcmVudD1vKX1lIGluc3RhbmNlb2YgQXJyYXk/ZS5mb3JFYWNoKChlPT50KGUpKSk6dChlKX0pKG4pLEQoXCJkaXZcIixyLFtpLG5dKX0pLHR9LGdldFByb3BzRGF0YTooLi4udCk9PnQucmVkdWNlKCgodCxsKT0+KEFycmF5LmlzQXJyYXkobCkmJmwuZm9yRWFjaCgobD0+e3RbbF09ZVtsXX0pKSx0KSkse30pLGdldENvbHVtbkVsSW5kZXg6KGUsdCk9PltdLmluZGV4T2YuY2FsbChlLHQpfX1sZXQgTGQ9MTt2YXIgemQ9ZSh7bmFtZTpcIkVsVGFibGVDb2x1bW5cIixjb21wb25lbnRzOntFbENoZWNrYm94OkthfSxwcm9wczp7dHlwZTp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcImRlZmF1bHRcIn0sbGFiZWw6U3RyaW5nLGNsYXNzTmFtZTpTdHJpbmcsbGFiZWxDbGFzc05hbWU6U3RyaW5nLHByb3BlcnR5OlN0cmluZyxwcm9wOlN0cmluZyx3aWR0aDp7dHlwZTpbT2JqZWN0LE51bWJlcixTdHJpbmddLGRlZmF1bHQ6KCk9Pih7fSl9LG1pbldpZHRoOnt0eXBlOltPYmplY3QsTnVtYmVyLFN0cmluZ10sZGVmYXVsdDooKT0+KHt9KX0scmVuZGVySGVhZGVyOkZ1bmN0aW9uLHNvcnRhYmxlOnt0eXBlOltCb29sZWFuLFN0cmluZ10sZGVmYXVsdDohMX0sc29ydE1ldGhvZDpGdW5jdGlvbixzb3J0Qnk6W1N0cmluZyxGdW5jdGlvbixBcnJheV0scmVzaXphYmxlOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMH0sY29sdW1uS2V5OlN0cmluZyxhbGlnbjpTdHJpbmcsaGVhZGVyQWxpZ246U3RyaW5nLHNob3dUb29sdGlwV2hlbk92ZXJmbG93OkJvb2xlYW4sc2hvd092ZXJmbG93VG9vbHRpcDpCb29sZWFuLGZpeGVkOltCb29sZWFuLFN0cmluZ10sZm9ybWF0dGVyOkZ1bmN0aW9uLHNlbGVjdGFibGU6RnVuY3Rpb24scmVzZXJ2ZVNlbGVjdGlvbjpCb29sZWFuLGZpbHRlck1ldGhvZDpGdW5jdGlvbixmaWx0ZXJlZFZhbHVlOkFycmF5LGZpbHRlcnM6QXJyYXksZmlsdGVyUGxhY2VtZW50OlN0cmluZyxmaWx0ZXJNdWx0aXBsZTp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITB9LGluZGV4OltOdW1iZXIsRnVuY3Rpb25dLHNvcnRPcmRlcnM6e3R5cGU6QXJyYXksZGVmYXVsdDooKT0+W1wiYXNjZW5kaW5nXCIsXCJkZXNjZW5kaW5nXCIsbnVsbF0sdmFsaWRhdG9yOmU9PmUuZXZlcnkoKGU9PltcImFzY2VuZGluZ1wiLFwiZGVzY2VuZGluZ1wiLG51bGxdLmluZGV4T2YoZSk+LTEpKX19LHNldHVwKGUse3Nsb3RzOmF9KXtjb25zdCBuPXYoKSxvPXQoe30pLGk9ZSxyPWwoKCgpPT57bGV0IGU9bi5wYXJlbnQ7Zm9yKDtlJiYhZS50YWJsZUlkOyllPWUucGFyZW50O3JldHVybiBlfSkpLHtyZWdpc3Rlck5vcm1hbFdhdGNoZXJzOnMscmVnaXN0ZXJDb21wbGV4V2F0Y2hlcnM6dX09ZnVuY3Rpb24oZSx0KXtjb25zdCBsPXYoKTtyZXR1cm57cmVnaXN0ZXJDb21wbGV4V2F0Y2hlcnM6KCk9Pntjb25zdCBhPXtyZWFsV2lkdGg6XCJ3aWR0aFwiLHJlYWxNaW5XaWR0aDpcIm1pbldpZHRoXCJ9LG49W1wiZml4ZWRcIl0ucmVkdWNlKCgoZSx0KT0+KGVbdF09dCxlKSksYSk7T2JqZWN0LmtleXMobikuZm9yRWFjaCgobj0+e2NvbnN0IG89YVtuXTt0Lmhhc093blByb3BlcnR5KG8pJiZ5KCgoKT0+dFtvXSksKHQ9PntsLmNvbHVtbkNvbmZpZy52YWx1ZVtvXT10O2NvbnN0IGE9XCJmaXhlZFwiPT09bztlLnZhbHVlLnN0b3JlLnNjaGVkdWxlTGF5b3V0KGEpfSkpfSkpfSxyZWdpc3Rlck5vcm1hbFdhdGNoZXJzOigpPT57Y29uc3QgZT17cHJvcDpcInByb3BlcnR5XCIscmVhbEFsaWduOlwiYWxpZ25cIixyZWFsSGVhZGVyQWxpZ246XCJoZWFkZXJBbGlnblwifSxhPVtcImxhYmVsXCIsXCJwcm9wZXJ0eVwiLFwiZmlsdGVyc1wiLFwiZmlsdGVyTXVsdGlwbGVcIixcInNvcnRhYmxlXCIsXCJpbmRleFwiLFwiZm9ybWF0dGVyXCIsXCJjbGFzc05hbWVcIixcImxhYmVsQ2xhc3NOYW1lXCIsXCJzaG93T3ZlcmZsb3dUb29sdGlwXCJdLnJlZHVjZSgoKGUsdCk9PihlW3RdPXQsZSkpLGUpO09iamVjdC5rZXlzKGEpLmZvckVhY2goKGE9Pntjb25zdCBuPWVbYV07dC5oYXNPd25Qcm9wZXJ0eShuKSYmeSgoKCk9PnRbbl0pLChlPT57bC5jb2x1bW5Db25maWcudmFsdWVbbl09ZX0pKX0pKX19fShyLGkpLHtjb2x1bW5JZDpkLGlzU3ViQ29sdW1uOmMscmVhbEhlYWRlckFsaWduOnAsY29sdW1uT3JUYWJsZVBhcmVudDpoLHNldENvbHVtbldpZHRoOm0sc2V0Q29sdW1uRm9yY2VkUHJvcHM6ZixzZXRDb2x1bW5SZW5kZXJzOmcsZ2V0UHJvcHNEYXRhOmIsZ2V0Q29sdW1uRWxJbmRleDprLHJlYWxBbGlnbjpDfT1CZChpLGEscikseD1oLnZhbHVlO2QudmFsdWU9KHgudGFibGVJZHx8eC5jb2x1bW5JZCkrXCJfY29sdW1uX1wiK0xkKyssWCgoKCk9PntjLnZhbHVlPXIudmFsdWUhPT14O2NvbnN0IGU9aS50eXBlfHxcImRlZmF1bHRcIix0PVwiXCI9PT1pLnNvcnRhYmxlfHxpLnNvcnRhYmxlLGw9T2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LFZkW2VdKSx7aWQ6ZC52YWx1ZSx0eXBlOmUscHJvcGVydHk6aS5wcm9wfHxpLnByb3BlcnR5LGFsaWduOkMsaGVhZGVyQWxpZ246cCxzaG93T3ZlcmZsb3dUb29sdGlwOmkuc2hvd092ZXJmbG93VG9vbHRpcHx8aS5zaG93VG9vbHRpcFdoZW5PdmVyZmxvdyxmaWx0ZXJhYmxlOmkuZmlsdGVyc3x8aS5maWx0ZXJNZXRob2QsZmlsdGVyZWRWYWx1ZTpbXSxmaWx0ZXJQbGFjZW1lbnQ6XCJcIixpc0NvbHVtbkdyb3VwOiExLGZpbHRlck9wZW5lZDohMSxzb3J0YWJsZTp0LGluZGV4OmkuaW5kZXh9KTtsZXQgYT1iKFtcImNvbHVtbktleVwiLFwibGFiZWxcIixcImNsYXNzTmFtZVwiLFwibGFiZWxDbGFzc05hbWVcIixcInR5cGVcIixcInJlbmRlckhlYWRlclwiLFwiZm9ybWF0dGVyXCIsXCJmaXhlZFwiLFwicmVzaXphYmxlXCJdLFtcInNvcnRNZXRob2RcIixcInNvcnRCeVwiLFwic29ydE9yZGVyc1wiXSxbXCJzZWxlY3RhYmxlXCIsXCJyZXNlcnZlU2VsZWN0aW9uXCJdLFtcImZpbHRlck1ldGhvZFwiLFwiZmlsdGVyc1wiLFwiZmlsdGVyTXVsdGlwbGVcIixcImZpbHRlck9wZW5lZFwiLFwiZmlsdGVyZWRWYWx1ZVwiLFwiZmlsdGVyUGxhY2VtZW50XCJdKTthPWZ1bmN0aW9uKGUsdCl7Y29uc3QgbD17fTtsZXQgYTtmb3IoYSBpbiBlKWxbYV09ZVthXTtmb3IoYSBpbiB0KWlmKFV1KHQsYSkpe2NvbnN0IGU9dFthXTt2b2lkIDAhPT1lJiYobFthXT1lKX1yZXR1cm4gbH0obCxhKTthPWZ1bmN0aW9uKC4uLmUpe3JldHVybiAwPT09ZS5sZW5ndGg/ZT0+ZToxPT09ZS5sZW5ndGg/ZVswXTplLnJlZHVjZSgoKGUsdCk9PiguLi5sKT0+ZSh0KC4uLmwpKSkpfShnLG0sZikoYSksby52YWx1ZT1hLHMoKSx1KCl9KSksXygoKCk9Pnt2YXIgZTtjb25zdCB0PWgudmFsdWUsbD1jLnZhbHVlP3Qudm5vZGUuZWwuY2hpbGRyZW46bnVsbD09PShlPXQucmVmcy5oaWRkZW5Db2x1bW5zKXx8dm9pZCAwPT09ZT92b2lkIDA6ZS5jaGlsZHJlbixhPWsobHx8W10sbi52bm9kZS5lbCk7ci52YWx1ZS5zdG9yZS5jb21taXQoXCJpbnNlcnRDb2x1bW5cIixvLnZhbHVlLGEsYy52YWx1ZT90LmNvbHVtbkNvbmZpZy52YWx1ZTpudWxsKX0pKSxuLmNvbHVtbklkPWQudmFsdWUsbi5jb2x1bW5Db25maWc9b30scmVuZGVyKCl7dmFyIGUsdDt0cnl7cmV0dXJuIEQoXCJkaXZcIixudWxsPT09KHQ9KGU9dGhpcy4kc2xvdHMpLmRlZmF1bHQpfHx2b2lkIDA9PT10P3ZvaWQgMDp0LmNhbGwoZSx7c3RvcmU6e30sX3NlbGY6e30sY29sdW1uOnt9LHJvdzp7fSwkaW5kZXg6LTF9KSl9Y2F0Y2goZSl7cmV0dXJuIEQoXCJkaXZcIil9fX0pO3pkLmluc3RhbGw9ZT0+e2UuY29tcG9uZW50KHpkLm5hbWUsemQpfTt2YXIgRmQ9ZSh7bmFtZTpcIkVsVGFiQmFyXCIscHJvcHM6e3RhYnM6e3R5cGU6QXJyYXksZGVmYXVsdDooKT0+W119fSxzZXR1cChlKXtjb25zdCBsPXcoXCJyb290VGFic1wiKTtpZighbCl0aHJvdyBuZXcgRXJyb3IoXCJFbFRhYkJhciBtdXN0IHVzZSB3aXRoIEVsVGFic1wiKTtjb25zdCBhPXYoKSxuPSgpPT57bGV0IHQ9e30sbj0wLG89MDtjb25zdCBpPVtcInRvcFwiLFwiYm90dG9tXCJdLmluY2x1ZGVzKGwucHJvcHMudGFiUG9zaXRpb24pP1wid2lkdGhcIjpcImhlaWdodFwiLHI9XCJ3aWR0aFwiPT09aT9cInhcIjpcInlcIjtlLnRhYnMuZXZlcnkoKHQ9Pnt2YXIgbDtsZXQgcj1udWxsPT09KGw9YS5wYXJlbnQucmVmcyl8fHZvaWQgMD09PWw/dm9pZCAwOmxbXCJ0YWItXCIrdC5wYW5lTmFtZV07aWYoIXIpcmV0dXJuITE7aWYodC5hY3RpdmUpe289cltcImNsaWVudFwiK0xlKGkpXTtjb25zdCB0PXdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHIpO3JldHVyblwid2lkdGhcIj09PWkmJihlLnRhYnMubGVuZ3RoPjEmJihvLT1wYXJzZUZsb2F0KHQucGFkZGluZ0xlZnQpK3BhcnNlRmxvYXQodC5wYWRkaW5nUmlnaHQpKSxuKz1wYXJzZUZsb2F0KHQucGFkZGluZ0xlZnQpKSwhMX1yZXR1cm4gbis9cltcImNsaWVudFwiK0xlKGkpXSwhMH0pKTtjb25zdCBzPWB0cmFuc2xhdGUke0xlKHIpfSgke259cHgpYDtyZXR1cm4gdFtpXT1vK1wicHhcIix0LnRyYW5zZm9ybT1zLHQubXNUcmFuc2Zvcm09cyx0LndlYmtpdFRyYW5zZm9ybT1zLHR9LG89dChuKCkpO3JldHVybiB5KCgoKT0+ZS50YWJzKSwoKCk9PntrKCgoKT0+e28udmFsdWU9bigpfSkpfSkpLHtyb290VGFiczpsLGJhclN0eWxlOm99fX0pO0ZkLnJlbmRlcj1mdW5jdGlvbihlLHQsbCxvLGkscil7cmV0dXJuIGEoKSxuKFwiZGl2XCIse2NsYXNzOltcImVsLXRhYnNfX2FjdGl2ZS1iYXJcIixcImlzLVwiK2Uucm9vdFRhYnMucHJvcHMudGFiUG9zaXRpb25dLHN0eWxlOmUuYmFyU3R5bGV9LG51bGwsNil9LEZkLl9fZmlsZT1cInBhY2thZ2VzL3RhYnMvc3JjL3RhYi1iYXIudnVlXCI7dmFyICRkPWUoe25hbWU6XCJFbFRhYk5hdlwiLGNvbXBvbmVudHM6e1RhYkJhcjpGZH0scHJvcHM6e3BhbmVzOnt0eXBlOkFycmF5LGRlZmF1bHQ6KCk9PltdfSxjdXJyZW50TmFtZTp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIlwifSxlZGl0YWJsZTpCb29sZWFuLG9uVGFiQ2xpY2s6e3R5cGU6RnVuY3Rpb24sZGVmYXVsdDpTZX0sb25UYWJSZW1vdmU6e3R5cGU6RnVuY3Rpb24sZGVmYXVsdDpTZX0sdHlwZTp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIlwifSxzdHJldGNoOkJvb2xlYW59LHNldHVwKCl7Y29uc3QgZT13KFwicm9vdFRhYnNcIik7aWYoIWUpdGhyb3cgbmV3IEVycm9yKFwiRWxUYWJOYXYgbXVzdCB1c2Ugd2l0aCBFbFRhYnNcIik7Y29uc3QgYT10KCExKSxuPXQoMCksbz10KCExKSxpPXQoITApLHI9dChudWxsKSxzPXQobnVsbCksdT10KG51bGwpLGQ9bCgoKCk9PltcInRvcFwiLFwiYm90dG9tXCJdLmluY2x1ZGVzKGUucHJvcHMudGFiUG9zaXRpb24pP1wid2lkdGhcIjpcImhlaWdodFwiKSksYz1sKCgoKT0+KHt0cmFuc2Zvcm06YHRyYW5zbGF0ZSR7XCJ3aWR0aFwiPT09ZC52YWx1ZT9cIlhcIjpcIllcIn0oLSR7bi52YWx1ZX1weClgfSkpKSxwPSgpPT57aWYoIWEudmFsdWUpcmV0dXJuO2NvbnN0IHQ9cy52YWx1ZSxsPXUudmFsdWUucXVlcnlTZWxlY3RvcihcIi5pcy1hY3RpdmVcIik7aWYoIWwpcmV0dXJuO2NvbnN0IG89ci52YWx1ZSxpPVtcInRvcFwiLFwiYm90dG9tXCJdLmluY2x1ZGVzKGUucHJvcHMudGFiUG9zaXRpb24pLGQ9bC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxjPW8uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkscD1pP3Qub2Zmc2V0V2lkdGgtYy53aWR0aDp0Lm9mZnNldEhlaWdodC1jLmhlaWdodCxoPW4udmFsdWU7bGV0IHY9aDtpPyhkLmxlZnQ8Yy5sZWZ0JiYodj1oLShjLmxlZnQtZC5sZWZ0KSksZC5yaWdodD5jLnJpZ2h0JiYodj1oK2QucmlnaHQtYy5yaWdodCkpOihkLnRvcDxjLnRvcCYmKHY9aC0oYy50b3AtZC50b3ApKSxkLmJvdHRvbT5jLmJvdHRvbSYmKHY9aCsoZC5ib3R0b20tYy5ib3R0b20pKSksdj1NYXRoLm1heCh2LDApLG4udmFsdWU9TWF0aC5taW4odixwKX0saD0oKT0+e2lmKCFzLnZhbHVlKXJldHVybjtjb25zdCBlPXMudmFsdWVbXCJvZmZzZXRcIitMZShkLnZhbHVlKV0sdD1yLnZhbHVlW1wib2Zmc2V0XCIrTGUoZC52YWx1ZSldLGw9bi52YWx1ZTtpZih0PGUpe2NvbnN0IGw9bi52YWx1ZTthLnZhbHVlPWEudmFsdWV8fHt9LGEudmFsdWUucHJldj1sLGEudmFsdWUubmV4dD1sK3Q8ZSxlLWw8dCYmKG4udmFsdWU9ZS10KX1lbHNlIGEudmFsdWU9ITEsbD4wJiYobi52YWx1ZT0wKX0sdj0oKT0+e2kudmFsdWUmJihvLnZhbHVlPSEwKX0sbT0oKT0+e2NvbnN0IGU9ZG9jdW1lbnQudmlzaWJpbGl0eVN0YXRlO1wiaGlkZGVuXCI9PT1lP2kudmFsdWU9ITE6XCJ2aXNpYmxlXCI9PT1lJiZzZXRUaW1lb3V0KCgoKT0+e2kudmFsdWU9ITB9KSw1MCl9LGY9KCk9PntpLnZhbHVlPSExfSxnPSgpPT57c2V0VGltZW91dCgoKCk9PntpLnZhbHVlPSEwfSksNTApfTtyZXR1cm4gUygoKCk9PntoKCl9KSksXygoKCk9PntKdCh1LnZhbHVlLGgpLGx0KGRvY3VtZW50LFwidmlzaWJpbGl0eWNoYW5nZVwiLG0pLGx0KHdpbmRvdyxcImJsdXJcIixmKSxsdCh3aW5kb3csXCJmb2N1c1wiLGcpLHNldFRpbWVvdXQoKCgpPT57cCgpfSksMCl9KSksTygoKCk9Pnt1LnZhbHVlJiZlbCh1LnZhbHVlLGgpLGF0KGRvY3VtZW50LFwidmlzaWJpbGl0eWNoYW5nZVwiLG0pLGF0KHdpbmRvdyxcImJsdXJcIixmKSxhdCh3aW5kb3csXCJmb2N1c1wiLGcpfSkpLHtyb290VGFiczplLHNjcm9sbGFibGU6YSxuYXZPZmZzZXQ6bixpc0ZvY3VzOm8sZm9jdXNhYmxlOmksbmF2U2Nyb2xsJDpyLG5hdiQ6cyxlbCQ6dSxzaXplTmFtZTpkLG5hdlN0eWxlOmMsc2Nyb2xsUHJldjooKT0+e2NvbnN0IGU9ci52YWx1ZVtcIm9mZnNldFwiK0xlKGQudmFsdWUpXSx0PW4udmFsdWU7aWYoIXQpcmV0dXJuO2xldCBsPXQ+ZT90LWU6MDtuLnZhbHVlPWx9LHNjcm9sbE5leHQ6KCk9Pntjb25zdCBlPXMudmFsdWVbXCJvZmZzZXRcIitMZShkLnZhbHVlKV0sdD1yLnZhbHVlW1wib2Zmc2V0XCIrTGUoZC52YWx1ZSldLGw9bi52YWx1ZTtpZihlLWw8PXQpcmV0dXJuO2xldCBhPWUtbD4yKnQ/bCt0OmUtdDtuLnZhbHVlPWF9LHNjcm9sbFRvQWN0aXZlVGFiOnAsdXBkYXRlOmgsY2hhbmdlVGFiOmU9Pntjb25zdCB0PWUuY29kZTtsZXQgbCxhLG47Y29uc3R7dXA6byxkb3duOmksbGVmdDpyLHJpZ2h0OnN9PWZ0Oy0xIT09W28saSxyLHNdLmluZGV4T2YodCkmJihuPWUuY3VycmVudFRhcmdldC5xdWVyeVNlbGVjdG9yQWxsKFwiW3JvbGU9dGFiXVwiKSxhPUFycmF5LnByb3RvdHlwZS5pbmRleE9mLmNhbGwobixlLnRhcmdldCksbD10PT09cnx8dD09PW8/MD09PWE/bi5sZW5ndGgtMTphLTE6YTxuLmxlbmd0aC0xP2ErMTowLG5bbF0uZm9jdXMoKSxuW2xdLmNsaWNrKCksdigpKX0sc2V0Rm9jdXM6dixyZW1vdmVGb2N1czooKT0+e28udmFsdWU9ITF9LHZpc2liaWxpdHlDaGFuZ2VIYW5kbGVyOm0sd2luZG93Qmx1ckhhbmRsZXI6Zix3aW5kb3dGb2N1c0hhbmRsZXI6Z319LHJlbmRlcigpe2NvbnN0e3R5cGU6ZSxwYW5lczp0LGVkaXRhYmxlOmwsc3RyZXRjaDphLG9uVGFiQ2xpY2s6bixvblRhYlJlbW92ZTpvLG5hdlN0eWxlOmksc2Nyb2xsYWJsZTpyLHNjcm9sbE5leHQ6cyxzY3JvbGxQcmV2OnUsY2hhbmdlVGFiOmQsc2V0Rm9jdXM6YyxyZW1vdmVGb2N1czpwLHJvb3RUYWJzOmgsaXNGb2N1czp2fT10aGlzLG09cj9bRChcInNwYW5cIix7Y2xhc3M6W1wiZWwtdGFic19fbmF2LXByZXZcIixyLnByZXY/XCJcIjpcImlzLWRpc2FibGVkXCJdLG9uQ2xpY2s6dX0sW0QoXCJpXCIse2NsYXNzOlwiZWwtaWNvbi1hcnJvdy1sZWZ0XCJ9KV0pLEQoXCJzcGFuXCIse2NsYXNzOltcImVsLXRhYnNfX25hdi1uZXh0XCIsci5uZXh0P1wiXCI6XCJpcy1kaXNhYmxlZFwiXSxvbkNsaWNrOnN9LFtEKFwiaVwiLHtjbGFzczpcImVsLWljb24tYXJyb3ctcmlnaHRcIn0pXSldOm51bGwsZj10Lm1hcCgoKGUsdCk9Pnt2YXIgYSxpO2xldCByPWUucHJvcHMubmFtZXx8ZS5pbmRleHx8XCJcIit0O2NvbnN0IHM9ZS5pc0Nsb3NhYmxlfHxsO2UuaW5kZXg9XCJcIit0O2NvbnN0IHU9cz9EKFwic3BhblwiLHtjbGFzczpcImVsLWljb24tY2xvc2VcIixvbkNsaWNrOnQ9PntvKGUsdCl9fSk6bnVsbCxkPShudWxsPT09KGk9KGE9ZS5pbnN0YW5jZS5zbG90cykubGFiZWwpfHx2b2lkIDA9PT1pP3ZvaWQgMDppLmNhbGwoYSkpfHxlLnByb3BzLmxhYmVsLG09ZS5hY3RpdmU/MDotMTtyZXR1cm4gRChcImRpdlwiLHtjbGFzczp7XCJlbC10YWJzX19pdGVtXCI6ITAsW1wiaXMtXCIraC5wcm9wcy50YWJQb3NpdGlvbl06ITAsXCJpcy1hY3RpdmVcIjplLmFjdGl2ZSxcImlzLWRpc2FibGVkXCI6ZS5wcm9wcy5kaXNhYmxlZCxcImlzLWNsb3NhYmxlXCI6cyxcImlzLWZvY3VzXCI6dn0saWQ6XCJ0YWItXCIrcixrZXk6XCJ0YWItXCIrcixcImFyaWEtY29udHJvbHNcIjpcInBhbmUtXCIrcixyb2xlOlwidGFiXCIsXCJhcmlhLXNlbGVjdGVkXCI6ZS5hY3RpdmUscmVmOlwidGFiLVwiK3IsdGFiaW5kZXg6bSxvbkZvY3VzOigpPT57YygpfSxvbkJsdXI6KCk9PntwKCl9LG9uQ2xpY2s6dD0+e3AoKSxuKGUscix0KX0sb25LZXlkb3duOnQ9Pnshc3x8dC5jb2RlIT09ZnQuZGVsZXRlJiZ0LmNvZGUhPT1mdC5iYWNrc3BhY2V8fG8oZSx0KX19LFtkLHVdKX0pKTtyZXR1cm4gRChcImRpdlwiLHtyZWY6XCJlbCRcIixjbGFzczpbXCJlbC10YWJzX19uYXYtd3JhcFwiLHI/XCJpcy1zY3JvbGxhYmxlXCI6XCJcIixcImlzLVwiK2gucHJvcHMudGFiUG9zaXRpb25dfSxbbSxEKFwiZGl2XCIse2NsYXNzOlwiZWwtdGFic19fbmF2LXNjcm9sbFwiLHJlZjpcIm5hdlNjcm9sbCRcIn0sW0QoXCJkaXZcIix7Y2xhc3M6W1wiZWwtdGFic19fbmF2XCIsXCJpcy1cIitoLnByb3BzLnRhYlBvc2l0aW9uLGEmJltcInRvcFwiLFwiYm90dG9tXCJdLmluY2x1ZGVzKGgucHJvcHMudGFiUG9zaXRpb24pP1wiaXMtc3RyZXRjaFwiOlwiXCJdLHJlZjpcIm5hdiRcIixzdHlsZTppLHJvbGU6XCJ0YWJsaXN0XCIsb25LZXlkb3duOmR9LFtlP251bGw6RChGZCx7dGFiczp0fSksZl0pXSldKX19KTskZC5fX2ZpbGU9XCJwYWNrYWdlcy90YWJzL3NyYy90YWItbmF2LnZ1ZVwiO3ZhciBSZD1lKHtuYW1lOlwiRWxUYWJzXCIsY29tcG9uZW50czp7VGFiTmF2OiRkfSxwcm9wczp7dHlwZTp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIlwifSxhY3RpdmVOYW1lOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiXCJ9LGNsb3NhYmxlOkJvb2xlYW4sYWRkYWJsZTpCb29sZWFuLG1vZGVsVmFsdWU6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJcIn0sZWRpdGFibGU6Qm9vbGVhbix0YWJQb3NpdGlvbjp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcInRvcFwifSxiZWZvcmVMZWF2ZTp7dHlwZTpGdW5jdGlvbixkZWZhdWx0Om51bGx9LHN0cmV0Y2g6Qm9vbGVhbn0sZW1pdHM6W1widGFiLWNsaWNrXCIsXCJlZGl0XCIsXCJ0YWItcmVtb3ZlXCIsXCJ0YWItYWRkXCIsXCJpbnB1dFwiLFwidXBkYXRlOm1vZGVsVmFsdWVcIl0sc2V0dXAoZSxsKXtjb25zdCBhPXQobnVsbCksbj10KGUubW9kZWxWYWx1ZXx8ZS5hY3RpdmVOYW1lfHxcIjBcIiksbz10KFtdKSxpPXYoKSxyPXt9O3goXCJyb290VGFic1wiLHtwcm9wczplLGN1cnJlbnROYW1lOm59KSx4KFwidXBkYXRlUGFuZVN0YXRlXCIsKGU9PntyW2UudWlkXT1lfSkpLHkoKCgpPT5lLmFjdGl2ZU5hbWUpLChlPT57YyhlKX0pKSx5KCgoKT0+ZS5tb2RlbFZhbHVlKSwoZT0+e2MoZSl9KSkseShuLCgoKT0+e2EudmFsdWUmJmsoKCgpPT57YS52YWx1ZS4kbmV4dFRpY2soKCgpPT57YS52YWx1ZS5zY3JvbGxUb0FjdGl2ZVRhYigpfSkpfSkpLHUoITApfSkpO2NvbnN0IHM9KGUsdD1bXSk9PihBcnJheS5mcm9tKGUuY2hpbGRyZW58fFtdKS5mb3JFYWNoKChlPT57bGV0IGw9ZS50eXBlO2w9bC5uYW1lfHxsLFwiRWxUYWJQYW5lXCI9PT1sJiZlLmNvbXBvbmVudD90LnB1c2goZS5jb21wb25lbnQpOmwhPT1FJiZcInRlbXBsYXRlXCIhPT1sfHxzKGUsdCl9KSksdCksdT0oZT0hMSk9PntpZihsLnNsb3RzLmRlZmF1bHQpe2NvbnN0IHQ9aS5zdWJUcmVlLmNoaWxkcmVuLGw9QXJyYXkuZnJvbSh0KS5maW5kKCgoe3Byb3BzOmV9KT0+XCJlbC10YWJzX19jb250ZW50XCI9PT1lLmNsYXNzKSk7aWYoIWwpcmV0dXJuO2NvbnN0IGE9cyhsKS5tYXAoKGU9PnJbZS51aWRdKSksbj0hKGEubGVuZ3RoPT09by52YWx1ZS5sZW5ndGgmJmEuZXZlcnkoKChlLHQpPT5lLnVpZD09PW8udmFsdWVbdF0udWlkKSkpOyhlfHxuKSYmKG8udmFsdWU9YSl9ZWxzZSAwIT09by52YWx1ZS5sZW5ndGgmJihvLnZhbHVlPVtdKX0sZD1lPT57bi52YWx1ZT1lLGwuZW1pdChcImlucHV0XCIsZSksbC5lbWl0KFwidXBkYXRlOm1vZGVsVmFsdWVcIixlKX0sYz10PT57aWYobi52YWx1ZSE9PXQmJmUuYmVmb3JlTGVhdmUpe2NvbnN0IGw9ZS5iZWZvcmVMZWF2ZSh0LG4udmFsdWUpO2wmJmwudGhlbj9sLnRoZW4oKCgpPT57ZCh0KSxhLnZhbHVlJiZhLnZhbHVlLnJlbW92ZUZvY3VzKCl9KSwoKCk9Pnt9KSk6ITEhPT1sJiZkKHQpfWVsc2UgZCh0KX07cmV0dXJuIFMoKCgpPT57dSgpfSkpLF8oKCgpPT57dSgpfSkpLHtuYXYkOmEsaGFuZGxlVGFiQ2xpY2s6KGUsdCxhKT0+e2UucHJvcHMuZGlzYWJsZWR8fChjKHQpLGwuZW1pdChcInRhYi1jbGlja1wiLGUsYSkpfSxoYW5kbGVUYWJSZW1vdmU6KGUsdCk9PntlLnByb3BzLmRpc2FibGVkfHwodC5zdG9wUHJvcGFnYXRpb24oKSxsLmVtaXQoXCJlZGl0XCIsZS5wcm9wcy5uYW1lLFwicmVtb3ZlXCIpLGwuZW1pdChcInRhYi1yZW1vdmVcIixlLnByb3BzLm5hbWUpKX0saGFuZGxlVGFiQWRkOigpPT57bC5lbWl0KFwiZWRpdFwiLG51bGwsXCJhZGRcIiksbC5lbWl0KFwidGFiLWFkZFwiKX0sY3VycmVudE5hbWU6bixwYW5lczpvfX0scmVuZGVyKCl7dmFyIGU7bGV0e3R5cGU6dCxoYW5kbGVUYWJDbGljazpsLGhhbmRsZVRhYlJlbW92ZTphLGhhbmRsZVRhYkFkZDpuLGN1cnJlbnROYW1lOm8scGFuZXM6aSxlZGl0YWJsZTpyLGFkZGFibGU6cyx0YWJQb3NpdGlvbjp1LHN0cmV0Y2g6ZH09dGhpcztjb25zdCBjPXJ8fHM/RChcInNwYW5cIix7Y2xhc3M6XCJlbC10YWJzX19uZXctdGFiXCIsdGFiaW5kZXg6XCIwXCIsb25DbGljazpuLG9uS2V5ZG93bjplPT57ZS5jb2RlPT09ZnQuZW50ZXImJm4oKX19LFtEKFwiaVwiLHtjbGFzczpcImVsLWljb24tcGx1c1wifSldKTpudWxsLHA9RChcImRpdlwiLHtjbGFzczpbXCJlbC10YWJzX19oZWFkZXJcIixcImlzLVwiK3VdfSxbYyxEKCRkLHtjdXJyZW50TmFtZTpvLGVkaXRhYmxlOnIsdHlwZTp0LHBhbmVzOmksc3RyZXRjaDpkLHJlZjpcIm5hdiRcIixvblRhYkNsaWNrOmwsb25UYWJSZW1vdmU6YX0pXSksaD1EKFwiZGl2XCIse2NsYXNzOlwiZWwtdGFic19fY29udGVudFwifSxudWxsPT09KGU9dGhpcy4kc2xvdHMpfHx2b2lkIDA9PT1lP3ZvaWQgMDplLmRlZmF1bHQoKSk7cmV0dXJuIEQoXCJkaXZcIix7Y2xhc3M6e1wiZWwtdGFic1wiOiEwLFwiZWwtdGFicy0tY2FyZFwiOlwiY2FyZFwiPT09dCxbXCJlbC10YWJzLS1cIit1XTohMCxcImVsLXRhYnMtLWJvcmRlci1jYXJkXCI6XCJib3JkZXItY2FyZFwiPT09dH19LFwiYm90dG9tXCIhPT11P1twLGhdOltoLHBdKX19KTtSZC5fX2ZpbGU9XCJwYWNrYWdlcy90YWJzL3NyYy90YWJzLnZ1ZVwiLFJkLmluc3RhbGw9ZT0+e2UuY29tcG9uZW50KFJkLm5hbWUsUmQpfTtjb25zdCBIZD1lPT57Y29uc3QgdD0oZXx8XCJcIikuc3BsaXQoXCI6XCIpO2lmKHQubGVuZ3RoPj0yKXtyZXR1cm57aG91cnM6cGFyc2VJbnQodFswXSwxMCksbWludXRlczpwYXJzZUludCh0WzFdLDEwKX19cmV0dXJuIG51bGx9LFdkPShlLHQpPT57Y29uc3QgbD1IZChlKSxhPUhkKHQpLG49bC5taW51dGVzKzYwKmwuaG91cnMsbz1hLm1pbnV0ZXMrNjAqYS5ob3VycztyZXR1cm4gbj09PW8/MDpuPm8/MTotMX0samQ9KGUsdCk9Pntjb25zdCBsPUhkKGUpLGE9SGQodCksbj17aG91cnM6bC5ob3VycyxtaW51dGVzOmwubWludXRlc307cmV0dXJuIG4ubWludXRlcys9YS5taW51dGVzLG4uaG91cnMrPWEuaG91cnMsbi5ob3Vycys9TWF0aC5mbG9vcihuLm1pbnV0ZXMvNjApLG4ubWludXRlcz1uLm1pbnV0ZXMlNjAsKGU9PihlLmhvdXJzPDEwP1wiMFwiK2UuaG91cnM6ZS5ob3VycykrXCI6XCIrKGUubWludXRlczwxMD9cIjBcIitlLm1pbnV0ZXM6ZS5taW51dGVzKSkobil9O3ZhciBLZD1lKHtuYW1lOlwiRWxUaW1lU2VsZWN0XCIsY29tcG9uZW50czp7RWxTZWxlY3Q6TXMsRWxPcHRpb246X3N9LG1vZGVsOntwcm9wOlwidmFsdWVcIixldmVudDpcImNoYW5nZVwifSxwcm9wczp7bW9kZWxWYWx1ZTpTdHJpbmcsZWRpdGFibGU6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiEwfSxjbGVhcmFibGU6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiEwfSxzaXplOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiXCIsdmFsaWRhdG9yOmU9PiFlfHwtMSE9PVtcIm1lZGl1bVwiLFwic21hbGxcIixcIm1pbmlcIl0uaW5kZXhPZihlKX0scGxhY2Vob2xkZXI6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJcIn0sc3RhcnQ6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCIwOTowMFwifSxlbmQ6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCIxODowMFwifSxzdGVwOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiMDA6MzBcIn0sbWluVGltZTp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIlwifSxtYXhUaW1lOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiXCJ9LG5hbWU6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJcIn0scHJlZml4SWNvbjp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcImVsLWljb24tdGltZVwifSxjbGVhckljb246e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJlbC1pY29uLWNpcmNsZS1jbG9zZVwifX0sZW1pdHM6W1wiY2hhbmdlXCIsXCJibHVyXCIsXCJmb2N1c1wiLFwidXBkYXRlOm1vZGVsVmFsdWVcIl0sc2V0dXA6ZT0+KHt2YWx1ZTp0KGUubW9kZWxWYWx1ZSksaXRlbXM6bCgoKCk9Pntjb25zdCB0PVtdO2lmKGUuc3RhcnQmJmUuZW5kJiZlLnN0ZXApe2xldCBsPWUuc3RhcnQ7Zm9yKDtXZChsLGUuZW5kKTw9MDspdC5wdXNoKHt2YWx1ZTpsLGRpc2FibGVkOldkKGwsZS5taW5UaW1lfHxcIi0xOi0xXCIpPD0wfHxXZChsLGUubWF4VGltZXx8XCIxMDA6MTAwXCIpPj0wfSksbD1qZChsLGUuc3RlcCl9cmV0dXJuIHR9KSl9KX0pO0tkLnJlbmRlcj1mdW5jdGlvbihlLHQsbCxvLHIsdSl7Y29uc3QgZD1QKFwiZWwtb3B0aW9uXCIpLGM9UChcImVsLXNlbGVjdFwiKTtyZXR1cm4gYSgpLG4oYyx7bW9kZWxWYWx1ZTplLnZhbHVlLFwib25VcGRhdGU6bW9kZWxWYWx1ZVwiOnRbMV18fCh0WzFdPXQ9PmUudmFsdWU9dCksZGlzYWJsZWQ6IWUuZWRpdGFibGUsY2xlYXJhYmxlOmUuY2xlYXJhYmxlLFwiY2xlYXItaWNvblwiOmUuY2xlYXJJY29uLHNpemU6ZS5zaXplLHBsYWNlaG9sZGVyOmUucGxhY2Vob2xkZXIsXCJkZWZhdWx0LWZpcnN0LW9wdGlvblwiOlwiXCIsZmlsdGVyYWJsZTpcIlwiLG9uQ2hhbmdlOnRbMl18fCh0WzJdPXQ9PntlLiRlbWl0KFwiY2hhbmdlXCIsdCksZS4kZW1pdChcInVwZGF0ZTptb2RlbFZhbHVlXCIsdCl9KSxvbkJsdXI6dFszXXx8KHRbM109dD0+ZS4kZW1pdChcImJsdXJcIix0KSksb25Gb2N1czp0WzRdfHwodFs0XT10PT5lLiRlbWl0KFwiZm9jdXNcIix0KSl9LHtwcmVmaXg6aSgoKCk9PltzKFwiaVwiLHtjbGFzczpcImVsLWlucHV0X19pY29uIFwiK2UucHJlZml4SWNvbn0sbnVsbCwyKV0pKSxkZWZhdWx0OmkoKCgpPT5bKGEoITApLG4oRSxudWxsLEgoZS5pdGVtcywoZT0+KGEoKSxuKGQse2tleTplLnZhbHVlLGxhYmVsOmUudmFsdWUsdmFsdWU6ZS52YWx1ZSxkaXNhYmxlZDplLmRpc2FibGVkfSxudWxsLDgsW1wibGFiZWxcIixcInZhbHVlXCIsXCJkaXNhYmxlZFwiXSkpKSksMTI4KSldKSksXzoxfSw4LFtcIm1vZGVsVmFsdWVcIixcImRpc2FibGVkXCIsXCJjbGVhcmFibGVcIixcImNsZWFyLWljb25cIixcInNpemVcIixcInBsYWNlaG9sZGVyXCJdKX0sS2QuX19maWxlPVwicGFja2FnZXMvdGltZS1zZWxlY3Qvc3JjL3RpbWUtc2VsZWN0LnZ1ZVwiLEtkLmluc3RhbGw9ZT0+e2UuY29tcG9uZW50KEtkLm5hbWUsS2QpfTt2YXIgWWQ9ZSh7bmFtZTpcIkVsVGltZWxpbmVcIixzZXR1cDooZSx0KT0+KHgoXCJ0aW1lbGluZVwiLHQpLCgpPT57dmFyIGUsbDtyZXR1cm4gRChcInVsXCIse2NsYXNzOntcImVsLXRpbWVsaW5lXCI6ITB9fSxudWxsPT09KGw9KGU9dC5zbG90cykuZGVmYXVsdCl8fHZvaWQgMD09PWw/dm9pZCAwOmwuY2FsbChlKSl9KX0pO1lkLl9fZmlsZT1cInBhY2thZ2VzL3RpbWVsaW5lL3NyYy9pbmRleC52dWVcIixZZC5pbnN0YWxsPWU9PntlLmNvbXBvbmVudChZZC5uYW1lLFlkKX07dmFyIHFkPWUoe25hbWU6XCJFbFRpbWVsaW5lSXRlbVwiLHByb3BzOnt0aW1lc3RhbXA6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJcIn0saGlkZVRpbWVzdGFtcDp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITF9LHBsYWNlbWVudDp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcImJvdHRvbVwifSx0eXBlOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiXCJ9LGNvbG9yOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiXCJ9LHNpemU6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJub3JtYWxcIn0saWNvbjp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIlwifX0sc2V0dXAoKXt3KFwidGltZWxpbmVcIil9fSk7Y29uc3QgVWQ9e2NsYXNzOlwiZWwtdGltZWxpbmUtaXRlbVwifSxHZD1zKFwiZGl2XCIse2NsYXNzOlwiZWwtdGltZWxpbmUtaXRlbV9fdGFpbFwifSxudWxsLC0xKSxYZD17a2V5OjEsY2xhc3M6XCJlbC10aW1lbGluZS1pdGVtX19kb3RcIn0sUWQ9e2NsYXNzOlwiZWwtdGltZWxpbmUtaXRlbV9fd3JhcHBlclwifSxaZD17a2V5OjAsY2xhc3M6XCJlbC10aW1lbGluZS1pdGVtX190aW1lc3RhbXAgaXMtdG9wXCJ9LEpkPXtjbGFzczpcImVsLXRpbWVsaW5lLWl0ZW1fX2NvbnRlbnRcIn0sZWM9e2tleToxLGNsYXNzOlwiZWwtdGltZWxpbmUtaXRlbV9fdGltZXN0YW1wIGlzLWJvdHRvbVwifTtxZC5yZW5kZXI9ZnVuY3Rpb24oZSx0LGwsbyxpLHIpe3JldHVybiBhKCksbihcImxpXCIsVWQsW0dkLGUuJHNsb3RzLmRvdD91KFwidi1pZlwiLCEwKTooYSgpLG4oXCJkaXZcIix7a2V5OjAsY2xhc3M6W1wiZWwtdGltZWxpbmUtaXRlbV9fbm9kZVwiLFtcImVsLXRpbWVsaW5lLWl0ZW1fX25vZGUtLVwiKyhlLnNpemV8fFwiXCIpLFwiZWwtdGltZWxpbmUtaXRlbV9fbm9kZS0tXCIrKGUudHlwZXx8XCJcIildXSxzdHlsZTp7YmFja2dyb3VuZENvbG9yOmUuY29sb3J9fSxbZS5pY29uPyhhKCksbihcImlcIix7a2V5OjAsY2xhc3M6W1wiZWwtdGltZWxpbmUtaXRlbV9faWNvblwiLGUuaWNvbl19LG51bGwsMikpOnUoXCJ2LWlmXCIsITApXSw2KSksZS4kc2xvdHMuZG90PyhhKCksbihcImRpdlwiLFhkLFtkKGUuJHNsb3RzLFwiZG90XCIpXSkpOnUoXCJ2LWlmXCIsITApLHMoXCJkaXZcIixRZCxbZS5oaWRlVGltZXN0YW1wfHxcInRvcFwiIT09ZS5wbGFjZW1lbnQ/dShcInYtaWZcIiwhMCk6KGEoKSxuKFwiZGl2XCIsWmQscChlLnRpbWVzdGFtcCksMSkpLHMoXCJkaXZcIixKZCxbZChlLiRzbG90cyxcImRlZmF1bHRcIildKSxlLmhpZGVUaW1lc3RhbXB8fFwiYm90dG9tXCIhPT1lLnBsYWNlbWVudD91KFwidi1pZlwiLCEwKTooYSgpLG4oXCJkaXZcIixlYyxwKGUudGltZXN0YW1wKSwxKSldKV0pfSxxZC5fX2ZpbGU9XCJwYWNrYWdlcy90aW1lbGluZS9zcmMvaXRlbS52dWVcIixxZC5pbnN0YWxsPWU9PntlLmNvbXBvbmVudChxZC5uYW1lLHFkKX07dmFyIHRjPWUoe25hbWU6XCJFbFRyYW5zZmVyUGFuZWxcIixjb21wb25lbnRzOntFbENoZWNrYm94R3JvdXA6VG4sRWxDaGVja2JveDpLYSxFbElucHV0Old0LE9wdGlvbkNvbnRlbnQ6KHtvcHRpb246ZX0pPT5lfSxwcm9wczp7ZGF0YTp7dHlwZTpBcnJheSxkZWZhdWx0OigpPT5bXX0sb3B0aW9uUmVuZGVyOkZ1bmN0aW9uLHBsYWNlaG9sZGVyOlN0cmluZyx0aXRsZTpTdHJpbmcsZmlsdGVyYWJsZTpCb29sZWFuLGZvcm1hdDpPYmplY3QsZmlsdGVyTWV0aG9kOkZ1bmN0aW9uLGRlZmF1bHRDaGVja2VkOkFycmF5LHByb3BzOk9iamVjdH0sZW1pdHM6W1wiY2hlY2tlZC1jaGFuZ2VcIl0sc2V0dXAoZSx7ZW1pdDp0LHNsb3RzOmF9KXtjb25zdCBuPWYoe2NoZWNrZWQ6W10sYWxsQ2hlY2tlZDohMSxxdWVyeTpcIlwiLGlucHV0SG92ZXI6ITEsY2hlY2tDaGFuZ2VCeVVzZXI6ITB9KSx7bGFiZWxQcm9wOm8sa2V5UHJvcDppLGRpc2FibGVkUHJvcDpyLGZpbHRlcmVkRGF0YTpzLGNoZWNrZWRTdW1tYXJ5OnUsaXNJbmRldGVybWluYXRlOmQsaGFuZGxlQWxsQ2hlY2tlZENoYW5nZTpjfT0oKGUsdCxhKT0+e2NvbnN0IG49bCgoKCk9PmUucHJvcHMubGFiZWx8fFwibGFiZWxcIikpLG89bCgoKCk9PmUucHJvcHMua2V5fHxcImtleVwiKSksaT1sKCgoKT0+ZS5wcm9wcy5kaXNhYmxlZHx8XCJkaXNhYmxlZFwiKSkscj1sKCgoKT0+ZS5kYXRhLmZpbHRlcigobD0+XCJmdW5jdGlvblwiPT10eXBlb2YgZS5maWx0ZXJNZXRob2Q/ZS5maWx0ZXJNZXRob2QodC5xdWVyeSxsKToobFtuLnZhbHVlXXx8bFtvLnZhbHVlXS50b1N0cmluZygpKS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKHQucXVlcnkudG9Mb3dlckNhc2UoKSkpKSkpLHM9bCgoKCk9PnIudmFsdWUuZmlsdGVyKChlPT4hZVtpLnZhbHVlXSkpKSksdT1sKCgoKT0+e2NvbnN0IGw9dC5jaGVja2VkLmxlbmd0aCxhPWUuZGF0YS5sZW5ndGgse25vQ2hlY2tlZDpuLGhhc0NoZWNrZWQ6b309ZS5mb3JtYXQ7cmV0dXJuIG4mJm8/bD4wP28ucmVwbGFjZSgvXFwke2NoZWNrZWR9L2csbC50b1N0cmluZygpKS5yZXBsYWNlKC9cXCR7dG90YWx9L2csYS50b1N0cmluZygpKTpuLnJlcGxhY2UoL1xcJHt0b3RhbH0vZyxhLnRvU3RyaW5nKCkpOmAke2x9LyR7YX1gfSkpLGQ9bCgoKCk9Pntjb25zdCBlPXQuY2hlY2tlZC5sZW5ndGg7cmV0dXJuIGU+MCYmZTxzLnZhbHVlLmxlbmd0aH0pKSxjPSgpPT57Y29uc3QgZT1zLnZhbHVlLm1hcCgoZT0+ZVtvLnZhbHVlXSkpO3QuYWxsQ2hlY2tlZD1lLmxlbmd0aD4wJiZlLmV2ZXJ5KChlPT50LmNoZWNrZWQuaW5jbHVkZXMoZSkpKX07cmV0dXJuIHkoKCgpPT50LmNoZWNrZWQpLCgoZSxsKT0+e2lmKGMoKSx0LmNoZWNrQ2hhbmdlQnlVc2VyKXtjb25zdCB0PWUuY29uY2F0KGwpLmZpbHRlcigodD0+IWUuaW5jbHVkZXModCl8fCFsLmluY2x1ZGVzKHQpKSk7YShcImNoZWNrZWQtY2hhbmdlXCIsZSx0KX1lbHNlIGEoXCJjaGVja2VkLWNoYW5nZVwiLGUpLHQuY2hlY2tDaGFuZ2VCeVVzZXI9ITB9KSkseShzLCgoKT0+e2MoKX0pKSx5KCgoKT0+ZS5kYXRhKSwoKCk9Pntjb25zdCBlPVtdLGw9ci52YWx1ZS5tYXAoKGU9PmVbby52YWx1ZV0pKTt0LmNoZWNrZWQuZm9yRWFjaCgodD0+e2wuaW5jbHVkZXModCkmJmUucHVzaCh0KX0pKSx0LmNoZWNrQ2hhbmdlQnlVc2VyPSExLHQuY2hlY2tlZD1lfSkpLHkoKCgpPT5lLmRlZmF1bHRDaGVja2VkKSwoKGUsbCk9PntpZihsJiZlLmxlbmd0aD09PWwubGVuZ3RoJiZlLmV2ZXJ5KChlPT5sLmluY2x1ZGVzKGUpKSkpcmV0dXJuO2NvbnN0IGE9W10sbj1zLnZhbHVlLm1hcCgoZT0+ZVtvLnZhbHVlXSkpO2UuZm9yRWFjaCgoZT0+e24uaW5jbHVkZXMoZSkmJmEucHVzaChlKX0pKSx0LmNoZWNrQ2hhbmdlQnlVc2VyPSExLHQuY2hlY2tlZD1hfSkse2ltbWVkaWF0ZTohMH0pLHtsYWJlbFByb3A6bixrZXlQcm9wOm8sZGlzYWJsZWRQcm9wOmksZmlsdGVyZWREYXRhOnIsY2hlY2thYmxlRGF0YTpzLGNoZWNrZWRTdW1tYXJ5OnUsaXNJbmRldGVybWluYXRlOmQsdXBkYXRlQWxsQ2hlY2tlZDpjLGhhbmRsZUFsbENoZWNrZWRDaGFuZ2U6ZT0+e3QuY2hlY2tlZD1lP3MudmFsdWUubWFwKChlPT5lW28udmFsdWVdKSk6W119fX0pKGUsbix0KSxwPWwoKCgpPT5uLnF1ZXJ5Lmxlbmd0aD4wJiYwPT09cy52YWx1ZS5sZW5ndGgpKSxoPWwoKCgpPT5uLnF1ZXJ5Lmxlbmd0aD4wJiZuLmlucHV0SG92ZXI/XCJjaXJjbGUtY2xvc2VcIjpcInNlYXJjaFwiKSksdj1sKCgoKT0+ISFhLmRlZmF1bHQoKVswXS5jaGlsZHJlbi5sZW5ndGgpKSx7Y2hlY2tlZDptLGFsbENoZWNrZWQ6ZyxxdWVyeTpiLGlucHV0SG92ZXI6ayxjaGVja0NoYW5nZUJ5VXNlcjp4fT1DKG4pO3JldHVybntsYWJlbFByb3A6byxrZXlQcm9wOmksZGlzYWJsZWRQcm9wOnIsZmlsdGVyZWREYXRhOnMsY2hlY2tlZFN1bW1hcnk6dSxpc0luZGV0ZXJtaW5hdGU6ZCxoYW5kbGVBbGxDaGVja2VkQ2hhbmdlOmMsY2hlY2tlZDptLGFsbENoZWNrZWQ6ZyxxdWVyeTpiLGlucHV0SG92ZXI6ayxjaGVja0NoYW5nZUJ5VXNlcjp4LGhhc05vTWF0Y2g6cCxpbnB1dEljb246aCxoYXNGb290ZXI6dixjbGVhclF1ZXJ5OigpPT57XCJjaXJjbGUtY2xvc2VcIj09PWgudmFsdWUmJihuLnF1ZXJ5PVwiXCIpfSx0OnFsfX19KTtjb25zdCBsYz17Y2xhc3M6XCJlbC10cmFuc2Zlci1wYW5lbFwifSxhYz17Y2xhc3M6XCJlbC10cmFuc2Zlci1wYW5lbF9faGVhZGVyXCJ9LG5jPXtrZXk6MCxjbGFzczpcImVsLXRyYW5zZmVyLXBhbmVsX19mb290ZXJcIn07dGMucmVuZGVyPWZ1bmN0aW9uKGUsdCxsLG8sdixtKXtjb25zdCBmPVAoXCJlbC1jaGVja2JveFwiKSxnPVAoXCJlbC1pbnB1dFwiKSxiPVAoXCJvcHRpb24tY29udGVudFwiKSx5PVAoXCJlbC1jaGVja2JveC1ncm91cFwiKTtyZXR1cm4gYSgpLG4oXCJkaXZcIixsYyxbcyhcInBcIixhYyxbcyhmLHttb2RlbFZhbHVlOmUuYWxsQ2hlY2tlZCxcIm9uVXBkYXRlOm1vZGVsVmFsdWVcIjp0WzFdfHwodFsxXT10PT5lLmFsbENoZWNrZWQ9dCksaW5kZXRlcm1pbmF0ZTplLmlzSW5kZXRlcm1pbmF0ZSxvbkNoYW5nZTplLmhhbmRsZUFsbENoZWNrZWRDaGFuZ2V9LHtkZWZhdWx0OmkoKCgpPT5bYyhwKGUudGl0bGUpK1wiIFwiLDEpLHMoXCJzcGFuXCIsbnVsbCxwKGUuY2hlY2tlZFN1bW1hcnkpLDEpXSkpLF86MX0sOCxbXCJtb2RlbFZhbHVlXCIsXCJpbmRldGVybWluYXRlXCIsXCJvbkNoYW5nZVwiXSldKSxzKFwiZGl2XCIse2NsYXNzOltcImVsLXRyYW5zZmVyLXBhbmVsX19ib2R5XCIsZS5oYXNGb290ZXI/XCJpcy13aXRoLWZvb3RlclwiOlwiXCJdfSxbZS5maWx0ZXJhYmxlPyhhKCksbihnLHtrZXk6MCxtb2RlbFZhbHVlOmUucXVlcnksXCJvblVwZGF0ZTptb2RlbFZhbHVlXCI6dFszXXx8KHRbM109dD0+ZS5xdWVyeT10KSxjbGFzczpcImVsLXRyYW5zZmVyLXBhbmVsX19maWx0ZXJcIixzaXplOlwic21hbGxcIixwbGFjZWhvbGRlcjplLnBsYWNlaG9sZGVyLG9uTW91c2VlbnRlcjp0WzRdfHwodFs0XT10PT5lLmlucHV0SG92ZXI9ITApLG9uTW91c2VsZWF2ZTp0WzVdfHwodFs1XT10PT5lLmlucHV0SG92ZXI9ITEpfSx7cHJlZml4OmkoKCgpPT5bcyhcImlcIix7Y2xhc3M6W1wiZWwtaW5wdXRfX2ljb25cIixcImVsLWljb24tXCIrZS5pbnB1dEljb25dLG9uQ2xpY2s6dFsyXXx8KHRbMl09KC4uLnQpPT5lLmNsZWFyUXVlcnkoLi4udCkpfSxudWxsLDIpXSkpLF86MX0sOCxbXCJtb2RlbFZhbHVlXCIsXCJwbGFjZWhvbGRlclwiXSkpOnUoXCJ2LWlmXCIsITApLHIocyh5LHttb2RlbFZhbHVlOmUuY2hlY2tlZCxcIm9uVXBkYXRlOm1vZGVsVmFsdWVcIjp0WzZdfHwodFs2XT10PT5lLmNoZWNrZWQ9dCksY2xhc3M6W3tcImlzLWZpbHRlcmFibGVcIjplLmZpbHRlcmFibGV9LFwiZWwtdHJhbnNmZXItcGFuZWxfX2xpc3RcIl19LHtkZWZhdWx0OmkoKCgpPT5bKGEoITApLG4oRSxudWxsLEgoZS5maWx0ZXJlZERhdGEsKHQ9PihhKCksbihmLHtrZXk6dFtlLmtleVByb3BdLGNsYXNzOlwiZWwtdHJhbnNmZXItcGFuZWxfX2l0ZW1cIixsYWJlbDp0W2Uua2V5UHJvcF0sZGlzYWJsZWQ6dFtlLmRpc2FibGVkUHJvcF19LHtkZWZhdWx0OmkoKCgpPT5bcyhiLHtvcHRpb246ZS5vcHRpb25SZW5kZXIodCl9LG51bGwsOCxbXCJvcHRpb25cIl0pXSkpLF86Mn0sMTAzMixbXCJsYWJlbFwiLFwiZGlzYWJsZWRcIl0pKSkpLDEyOCkpXSkpLF86MX0sOCxbXCJtb2RlbFZhbHVlXCIsXCJjbGFzc1wiXSksW1toLCFlLmhhc05vTWF0Y2gmJmUuZGF0YS5sZW5ndGg+MF1dKSxyKHMoXCJwXCIse2NsYXNzOlwiZWwtdHJhbnNmZXItcGFuZWxfX2VtcHR5XCJ9LHAoZS5oYXNOb01hdGNoP2UudChcImVsLnRyYW5zZmVyLm5vTWF0Y2hcIik6ZS50KFwiZWwudHJhbnNmZXIubm9EYXRhXCIpKSw1MTMpLFtbaCxlLmhhc05vTWF0Y2h8fDA9PT1lLmRhdGEubGVuZ3RoXV0pXSwyKSxlLmhhc0Zvb3Rlcj8oYSgpLG4oXCJwXCIsbmMsW2QoZS4kc2xvdHMsXCJkZWZhdWx0XCIpXSkpOnUoXCJ2LWlmXCIsITApXSl9LHRjLl9fZmlsZT1cInBhY2thZ2VzL3RyYW5zZmVyL3NyYy90cmFuc2Zlci1wYW5lbC52dWVcIjtjb25zdCBvYz1cImNoYW5nZVwiO3ZhciBpYz1lKHtuYW1lOlwiRWxUcmFuc2ZlclwiLGNvbXBvbmVudHM6e1RyYW5zZmVyUGFuZWw6dGMsRWxCdXR0b246JGx9LHByb3BzOntkYXRhOnt0eXBlOkFycmF5LGRlZmF1bHQ6KCk9PltdfSx0aXRsZXM6e3R5cGU6QXJyYXksZGVmYXVsdDooKT0+W119LGJ1dHRvblRleHRzOnt0eXBlOkFycmF5LGRlZmF1bHQ6KCk9PltdfSxmaWx0ZXJQbGFjZWhvbGRlcjp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIlwifSxmaWx0ZXJNZXRob2Q6RnVuY3Rpb24sbGVmdERlZmF1bHRDaGVja2VkOnt0eXBlOkFycmF5LGRlZmF1bHQ6KCk9PltdfSxyaWdodERlZmF1bHRDaGVja2VkOnt0eXBlOkFycmF5LGRlZmF1bHQ6KCk9PltdfSxyZW5kZXJDb250ZW50OkZ1bmN0aW9uLG1vZGVsVmFsdWU6e3R5cGU6QXJyYXksZGVmYXVsdDooKT0+W119LGZvcm1hdDp7dHlwZTpPYmplY3QsZGVmYXVsdDooKT0+KHt9KX0sZmlsdGVyYWJsZTp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITF9LHByb3BzOnt0eXBlOk9iamVjdCxkZWZhdWx0OigpPT4oe2xhYmVsOlwibGFiZWxcIixrZXk6XCJrZXlcIixkaXNhYmxlZDpcImRpc2FibGVkXCJ9KX0sdGFyZ2V0T3JkZXI6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJvcmlnaW5hbFwiLHZhbGlkYXRvcjplPT5bXCJvcmlnaW5hbFwiLFwicHVzaFwiLFwidW5zaGlmdFwiXS5pbmNsdWRlcyhlKX19LGVtaXRzOltQdCxvYyxcImxlZnQtY2hlY2stY2hhbmdlXCIsXCJyaWdodC1jaGVjay1jaGFuZ2VcIl0sc2V0dXAoZSx7ZW1pdDphLHNsb3RzOm59KXtjb25zdCBvPXcoXCJlbEZvcm1JdGVtXCIse30pLGk9Zih7bGVmdENoZWNrZWQ6W10scmlnaHRDaGVja2VkOltdfSkse3Byb3BzS2V5OnIsc291cmNlRGF0YTpzLHRhcmdldERhdGE6dX09KGU9Pntjb25zdCB0PWwoKCgpPT5lLnByb3BzLmtleSkpLGE9bCgoKCk9PmUuZGF0YS5yZWR1Y2UoKChlLGwpPT4oZVtsW3QudmFsdWVdXT1sKSYmZSkse30pKSksbj1sKCgoKT0+ZS5kYXRhLmZpbHRlcigobD0+IWUubW9kZWxWYWx1ZS5pbmNsdWRlcyhsW3QudmFsdWVdKSkpKSksbz1sKCgoKT0+XCJvcmlnaW5hbFwiPT09ZS50YXJnZXRPcmRlcj9lLmRhdGEuZmlsdGVyKChsPT5lLm1vZGVsVmFsdWUuaW5jbHVkZXMobFt0LnZhbHVlXSkpKTplLm1vZGVsVmFsdWUucmVkdWNlKCgoZSx0KT0+e2NvbnN0IGw9YS52YWx1ZVt0XTtyZXR1cm4gbCYmZS5wdXNoKGwpLGV9KSxbXSkpKTtyZXR1cm57cHJvcHNLZXk6dCxzb3VyY2VEYXRhOm4sdGFyZ2V0RGF0YTpvfX0pKGUpLHtvblNvdXJjZUNoZWNrZWRDaGFuZ2U6ZCxvblRhcmdldENoZWNrZWRDaGFuZ2U6Y309KChlLHQpPT4oe29uU291cmNlQ2hlY2tlZENoYW5nZToobCxhKT0+e2UubGVmdENoZWNrZWQ9bCx2b2lkIDAhPT1hJiZ0KFwibGVmdC1jaGVjay1jaGFuZ2VcIixsLGEpfSxvblRhcmdldENoZWNrZWRDaGFuZ2U6KGwsYSk9PntlLnJpZ2h0Q2hlY2tlZD1sLHZvaWQgMCE9PWEmJnQoXCJyaWdodC1jaGVjay1jaGFuZ2VcIixsLGEpfX0pKShpLGEpLHthZGRUb0xlZnQ6cCxhZGRUb1JpZ2h0Omh9PSgoZSx0LGwsYSk9Pntjb25zdCBuPShlLHQsbCk9PnthKFB0LGUpLGEob2MsZSx0LGwpfTtyZXR1cm57YWRkVG9MZWZ0OigpPT57Y29uc3QgbD1lLm1vZGVsVmFsdWUuc2xpY2UoKTt0LnJpZ2h0Q2hlY2tlZC5mb3JFYWNoKChlPT57Y29uc3QgdD1sLmluZGV4T2YoZSk7dD4tMSYmbC5zcGxpY2UodCwxKX0pKSxuKGwsXCJsZWZ0XCIsdC5yaWdodENoZWNrZWQpfSxhZGRUb1JpZ2h0OigpPT57bGV0IGE9ZS5tb2RlbFZhbHVlLnNsaWNlKCk7Y29uc3Qgbz1lLmRhdGEuZmlsdGVyKChhPT57Y29uc3Qgbj1hW2wudmFsdWVdO3JldHVybiB0LmxlZnRDaGVja2VkLmluY2x1ZGVzKG4pJiYhZS5tb2RlbFZhbHVlLmluY2x1ZGVzKG4pfSkpLm1hcCgoZT0+ZVtsLnZhbHVlXSkpO2E9XCJ1bnNoaWZ0XCI9PT1lLnRhcmdldE9yZGVyP28uY29uY2F0KGEpOmEuY29uY2F0KG8pLG4oYSxcInJpZ2h0XCIsdC5sZWZ0Q2hlY2tlZCl9fX0pKGUsaSxyLGEpLHY9dChudWxsKSxtPXQobnVsbCksZz1sKCgoKT0+Mj09PWUuYnV0dG9uVGV4dHMubGVuZ3RoKSksYj1sKCgoKT0+ZS50aXRsZXNbMF18fHFsKFwiZWwudHJhbnNmZXIudGl0bGVzLjBcIikpKSxrPWwoKCgpPT5lLnRpdGxlc1sxXXx8cWwoXCJlbC50cmFuc2Zlci50aXRsZXMuMVwiKSkpLHg9bCgoKCk9PmUuZmlsdGVyUGxhY2Vob2xkZXJ8fHFsKFwiZWwudHJhbnNmZXIuZmlsdGVyUGxhY2Vob2xkZXJcIikpKTt5KCgoKT0+ZS5tb2RlbFZhbHVlKSwoZT0+e3ZhciB0O251bGw9PT0odD1vLmZvcm1JdGVtTWl0dCl8fHZvaWQgMD09PXR8fHQuZW1pdChcImVsLmZvcm0uY2hhbmdlXCIsZSl9KSk7Y29uc3QgXz1sKCgoKT0+dD0+ZS5yZW5kZXJDb250ZW50P2UucmVuZGVyQ29udGVudChELHQpOm4uZGVmYXVsdD9uLmRlZmF1bHQoe29wdGlvbjp0fSk6RChcInNwYW5cIix0W2UucHJvcHMubGFiZWxdfHx0W2UucHJvcHMua2V5XSkpKTtyZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHtzb3VyY2VEYXRhOnMsdGFyZ2V0RGF0YTp1LG9uU291cmNlQ2hlY2tlZENoYW5nZTpkLG9uVGFyZ2V0Q2hlY2tlZENoYW5nZTpjLGFkZFRvTGVmdDpwLGFkZFRvUmlnaHQ6aH0sQyhpKSkse2hhc0J1dHRvblRleHRzOmcsbGVmdFBhbmVsVGl0bGU6YixyaWdodFBhbmVsVGl0bGU6ayxwYW5lbEZpbHRlclBsYWNlaG9sZGVyOngsY2xlYXJRdWVyeTplPT57XCJsZWZ0XCI9PT1lP3YudmFsdWUucXVlcnk9XCJcIjpcInJpZ2h0XCI9PT1lJiYobS52YWx1ZS5xdWVyeT1cIlwiKX0sb3B0aW9uUmVuZGVyOl99KX19KTtjb25zdCByYz17Y2xhc3M6XCJlbC10cmFuc2ZlclwifSxzYz17Y2xhc3M6XCJlbC10cmFuc2Zlcl9fYnV0dG9uc1wifSx1Yz1zKFwiaVwiLHtjbGFzczpcImVsLWljb24tYXJyb3ctbGVmdFwifSxudWxsLC0xKSxkYz17a2V5OjB9LGNjPXtrZXk6MH0scGM9cyhcImlcIix7Y2xhc3M6XCJlbC1pY29uLWFycm93LXJpZ2h0XCJ9LG51bGwsLTEpO2ljLnJlbmRlcj1mdW5jdGlvbihlLHQsbCxvLHIsYyl7Y29uc3QgaD1QKFwidHJhbnNmZXItcGFuZWxcIiksdj1QKFwiZWwtYnV0dG9uXCIpO3JldHVybiBhKCksbihcImRpdlwiLHJjLFtzKGgse3JlZjpcImxlZnRQYW5lbFwiLGRhdGE6ZS5zb3VyY2VEYXRhLFwib3B0aW9uLXJlbmRlclwiOmUub3B0aW9uUmVuZGVyLHBsYWNlaG9sZGVyOmUucGFuZWxGaWx0ZXJQbGFjZWhvbGRlcix0aXRsZTplLmxlZnRQYW5lbFRpdGxlLGZpbHRlcmFibGU6ZS5maWx0ZXJhYmxlLGZvcm1hdDplLmZvcm1hdCxcImZpbHRlci1tZXRob2RcIjplLmZpbHRlck1ldGhvZCxcImRlZmF1bHQtY2hlY2tlZFwiOmUubGVmdERlZmF1bHRDaGVja2VkLHByb3BzOmUucHJvcHMsb25DaGVja2VkQ2hhbmdlOmUub25Tb3VyY2VDaGVja2VkQ2hhbmdlfSx7ZGVmYXVsdDppKCgoKT0+W2QoZS4kc2xvdHMsXCJsZWZ0LWZvb3RlclwiKV0pKSxfOjN9LDgsW1wiZGF0YVwiLFwib3B0aW9uLXJlbmRlclwiLFwicGxhY2Vob2xkZXJcIixcInRpdGxlXCIsXCJmaWx0ZXJhYmxlXCIsXCJmb3JtYXRcIixcImZpbHRlci1tZXRob2RcIixcImRlZmF1bHQtY2hlY2tlZFwiLFwicHJvcHNcIixcIm9uQ2hlY2tlZENoYW5nZVwiXSkscyhcImRpdlwiLHNjLFtzKHYse3R5cGU6XCJwcmltYXJ5XCIsY2xhc3M6W1wiZWwtdHJhbnNmZXJfX2J1dHRvblwiLGUuaGFzQnV0dG9uVGV4dHM/XCJpcy13aXRoLXRleHRzXCI6XCJcIl0sZGlzYWJsZWQ6MD09PWUucmlnaHRDaGVja2VkLmxlbmd0aCxvbkNsaWNrOmUuYWRkVG9MZWZ0fSx7ZGVmYXVsdDppKCgoKT0+W3VjLHZvaWQgMCE9PWUuYnV0dG9uVGV4dHNbMF0/KGEoKSxuKFwic3BhblwiLGRjLHAoZS5idXR0b25UZXh0c1swXSksMSkpOnUoXCJ2LWlmXCIsITApXSkpLF86MX0sOCxbXCJjbGFzc1wiLFwiZGlzYWJsZWRcIixcIm9uQ2xpY2tcIl0pLHModix7dHlwZTpcInByaW1hcnlcIixjbGFzczpbXCJlbC10cmFuc2Zlcl9fYnV0dG9uXCIsZS5oYXNCdXR0b25UZXh0cz9cImlzLXdpdGgtdGV4dHNcIjpcIlwiXSxkaXNhYmxlZDowPT09ZS5sZWZ0Q2hlY2tlZC5sZW5ndGgsb25DbGljazplLmFkZFRvUmlnaHR9LHtkZWZhdWx0OmkoKCgpPT5bdm9pZCAwIT09ZS5idXR0b25UZXh0c1sxXT8oYSgpLG4oXCJzcGFuXCIsY2MscChlLmJ1dHRvblRleHRzWzFdKSwxKSk6dShcInYtaWZcIiwhMCkscGNdKSksXzoxfSw4LFtcImNsYXNzXCIsXCJkaXNhYmxlZFwiLFwib25DbGlja1wiXSldKSxzKGgse3JlZjpcInJpZ2h0UGFuZWxcIixkYXRhOmUudGFyZ2V0RGF0YSxcIm9wdGlvbi1yZW5kZXJcIjplLm9wdGlvblJlbmRlcixwbGFjZWhvbGRlcjplLnBhbmVsRmlsdGVyUGxhY2Vob2xkZXIsZmlsdGVyYWJsZTplLmZpbHRlcmFibGUsZm9ybWF0OmUuZm9ybWF0LFwiZmlsdGVyLW1ldGhvZFwiOmUuZmlsdGVyTWV0aG9kLHRpdGxlOmUucmlnaHRQYW5lbFRpdGxlLFwiZGVmYXVsdC1jaGVja2VkXCI6ZS5yaWdodERlZmF1bHRDaGVja2VkLHByb3BzOmUucHJvcHMsb25DaGVja2VkQ2hhbmdlOmUub25UYXJnZXRDaGVja2VkQ2hhbmdlfSx7ZGVmYXVsdDppKCgoKT0+W2QoZS4kc2xvdHMsXCJyaWdodC1mb290ZXJcIildKSksXzozfSw4LFtcImRhdGFcIixcIm9wdGlvbi1yZW5kZXJcIixcInBsYWNlaG9sZGVyXCIsXCJmaWx0ZXJhYmxlXCIsXCJmb3JtYXRcIixcImZpbHRlci1tZXRob2RcIixcInRpdGxlXCIsXCJkZWZhdWx0LWNoZWNrZWRcIixcInByb3BzXCIsXCJvbkNoZWNrZWRDaGFuZ2VcIl0pXSl9LGljLl9fZmlsZT1cInBhY2thZ2VzL3RyYW5zZmVyL3NyYy9pbmRleC52dWVcIixpYy5pbnN0YWxsPWU9PntlLmNvbXBvbmVudChpYy5uYW1lLGljKX07Y29uc3QgaGM9XCIkdHJlZU5vZGVJZFwiLHZjPWZ1bmN0aW9uKGUsdCl7dCYmIXRbaGNdJiZPYmplY3QuZGVmaW5lUHJvcGVydHkodCxoYyx7dmFsdWU6ZS5pZCxlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMSx3cml0YWJsZTohMX0pfSxtYz1mdW5jdGlvbihlLHQpe3JldHVybiBlP3RbZV06dFtoY119LGZjPWU9PntsZXQgdD0hMCxsPSEwLGE9ITA7Zm9yKGxldCBuPTAsbz1lLmxlbmd0aDtuPG87bisrKXtjb25zdCBvPWVbbl07KCEwIT09by5jaGVja2VkfHxvLmluZGV0ZXJtaW5hdGUpJiYodD0hMSxvLmRpc2FibGVkfHwoYT0hMSkpLCghMSE9PW8uY2hlY2tlZHx8by5pbmRldGVybWluYXRlKSYmKGw9ITEpfXJldHVybnthbGw6dCxub25lOmwsYWxsV2l0aG91dERpc2FibGU6YSxoYWxmOiF0JiYhbH19LGdjPWZ1bmN0aW9uKGUpe2lmKDA9PT1lLmNoaWxkTm9kZXMubGVuZ3RoKXJldHVybjtjb25zdHthbGw6dCxub25lOmwsaGFsZjphfT1mYyhlLmNoaWxkTm9kZXMpO3Q/KGUuY2hlY2tlZD0hMCxlLmluZGV0ZXJtaW5hdGU9ITEpOmE/KGUuY2hlY2tlZD0hMSxlLmluZGV0ZXJtaW5hdGU9ITApOmwmJihlLmNoZWNrZWQ9ITEsZS5pbmRldGVybWluYXRlPSExKTtjb25zdCBuPWUucGFyZW50O24mJjAhPT1uLmxldmVsJiYoZS5zdG9yZS5jaGVja1N0cmljdGx5fHxnYyhuKSl9LGJjPWZ1bmN0aW9uKGUsdCl7Y29uc3QgbD1lLnN0b3JlLnByb3BzLGE9ZS5kYXRhfHx7fSxuPWxbdF07aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgbilyZXR1cm4gbihhLGUpO2lmKFwic3RyaW5nXCI9PXR5cGVvZiBuKXJldHVybiBhW25dO2lmKHZvaWQgMD09PW4pe2NvbnN0IGU9YVt0XTtyZXR1cm4gdm9pZCAwPT09ZT9cIlwiOmV9fTtsZXQgeWM9MDtjbGFzcyBrY3tjb25zdHJ1Y3RvcihlKXt0aGlzLmlkPXljKyssdGhpcy50ZXh0PW51bGwsdGhpcy5jaGVja2VkPSExLHRoaXMuaW5kZXRlcm1pbmF0ZT0hMSx0aGlzLmRhdGE9bnVsbCx0aGlzLmV4cGFuZGVkPSExLHRoaXMucGFyZW50PW51bGwsdGhpcy52aXNpYmxlPSEwLHRoaXMuaXNDdXJyZW50PSExLHRoaXMuY2FuRm9jdXM9ITE7Zm9yKGNvbnN0IHQgaW4gZSllLmhhc093blByb3BlcnR5KHQpJiYodGhpc1t0XT1lW3RdKTt0aGlzLmxldmVsPTAsdGhpcy5sb2FkZWQ9ITEsdGhpcy5jaGlsZE5vZGVzPVtdLHRoaXMubG9hZGluZz0hMSx0aGlzLnBhcmVudCYmKHRoaXMubGV2ZWw9dGhpcy5wYXJlbnQubGV2ZWwrMSk7Y29uc3QgdD10aGlzLnN0b3JlO2lmKCF0KXRocm93IG5ldyBFcnJvcihcIltOb2RlXXN0b3JlIGlzIHJlcXVpcmVkIVwiKTt0LnJlZ2lzdGVyTm9kZSh0aGlzKTtjb25zdCBsPXQucHJvcHM7aWYobCYmdm9pZCAwIT09bC5pc0xlYWYpe2NvbnN0IGU9YmModGhpcyxcImlzTGVhZlwiKTtcImJvb2xlYW5cIj09dHlwZW9mIGUmJih0aGlzLmlzTGVhZkJ5VXNlcj1lKX1pZighMCE9PXQubGF6eSYmdGhpcy5kYXRhPyh0aGlzLnNldERhdGEodGhpcy5kYXRhKSx0LmRlZmF1bHRFeHBhbmRBbGwmJih0aGlzLmV4cGFuZGVkPSEwLHRoaXMuY2FuRm9jdXM9ITApKTp0aGlzLmxldmVsPjAmJnQubGF6eSYmdC5kZWZhdWx0RXhwYW5kQWxsJiZ0aGlzLmV4cGFuZCgpLEFycmF5LmlzQXJyYXkodGhpcy5kYXRhKXx8dmModGhpcyx0aGlzLmRhdGEpLCF0aGlzLmRhdGEpcmV0dXJuO2NvbnN0IGE9dC5kZWZhdWx0RXhwYW5kZWRLZXlzLG49dC5rZXk7biYmYSYmLTEhPT1hLmluZGV4T2YodGhpcy5rZXkpJiZ0aGlzLmV4cGFuZChudWxsLHQuYXV0b0V4cGFuZFBhcmVudCksbiYmdm9pZCAwIT09dC5jdXJyZW50Tm9kZUtleSYmdGhpcy5rZXk9PT10LmN1cnJlbnROb2RlS2V5JiYodC5jdXJyZW50Tm9kZT10aGlzLHQuY3VycmVudE5vZGUuaXNDdXJyZW50PSEwKSx0LmxhenkmJnQuX2luaXREZWZhdWx0Q2hlY2tlZE5vZGUodGhpcyksdGhpcy51cGRhdGVMZWFmU3RhdGUoKSwhdGhpcy5wYXJlbnR8fDEhPT10aGlzLmxldmVsJiYhMCE9PXRoaXMucGFyZW50LmV4cGFuZGVkfHwodGhpcy5jYW5Gb2N1cz0hMCl9c2V0RGF0YShlKXtsZXQgdDtBcnJheS5pc0FycmF5KGUpfHx2Yyh0aGlzLGUpLHRoaXMuZGF0YT1lLHRoaXMuY2hpbGROb2Rlcz1bXSx0PTA9PT10aGlzLmxldmVsJiZ0aGlzLmRhdGEgaW5zdGFuY2VvZiBBcnJheT90aGlzLmRhdGE6YmModGhpcyxcImNoaWxkcmVuXCIpfHxbXTtmb3IobGV0IGU9MCxsPXQubGVuZ3RoO2U8bDtlKyspdGhpcy5pbnNlcnRDaGlsZCh7ZGF0YTp0W2VdfSl9Z2V0IGxhYmVsKCl7cmV0dXJuIGJjKHRoaXMsXCJsYWJlbFwiKX1nZXQga2V5KCl7Y29uc3QgZT10aGlzLnN0b3JlLmtleTtyZXR1cm4gdGhpcy5kYXRhP3RoaXMuZGF0YVtlXTpudWxsfWdldCBkaXNhYmxlZCgpe3JldHVybiBiYyh0aGlzLFwiZGlzYWJsZWRcIil9Z2V0IG5leHRTaWJsaW5nKCl7Y29uc3QgZT10aGlzLnBhcmVudDtpZihlKXtjb25zdCB0PWUuY2hpbGROb2Rlcy5pbmRleE9mKHRoaXMpO2lmKHQ+LTEpcmV0dXJuIGUuY2hpbGROb2Rlc1t0KzFdfXJldHVybiBudWxsfWdldCBwcmV2aW91c1NpYmxpbmcoKXtjb25zdCBlPXRoaXMucGFyZW50O2lmKGUpe2NvbnN0IHQ9ZS5jaGlsZE5vZGVzLmluZGV4T2YodGhpcyk7aWYodD4tMSlyZXR1cm4gdD4wP2UuY2hpbGROb2Rlc1t0LTFdOm51bGx9cmV0dXJuIG51bGx9Y29udGFpbnMoZSx0PSEwKXtyZXR1cm4odGhpcy5jaGlsZE5vZGVzfHxbXSkuc29tZSgobD0+bD09PWV8fHQmJmwuY29udGFpbnMoZSkpKX1yZW1vdmUoKXtjb25zdCBlPXRoaXMucGFyZW50O2UmJmUucmVtb3ZlQ2hpbGQodGhpcyl9aW5zZXJ0Q2hpbGQoZSx0LGwpe2lmKCFlKXRocm93IG5ldyBFcnJvcihcImluc2VydENoaWxkIGVycm9yOiBjaGlsZCBpcyByZXF1aXJlZC5cIik7aWYoIShlIGluc3RhbmNlb2Yga2MpKXtpZighbCl7Y29uc3QgbD10aGlzLmdldENoaWxkcmVuKCEwKTstMT09PWwuaW5kZXhPZihlLmRhdGEpJiYodm9pZCAwPT09dHx8dDwwP2wucHVzaChlLmRhdGEpOmwuc3BsaWNlKHQsMCxlLmRhdGEpKX1PYmplY3QuYXNzaWduKGUse3BhcmVudDp0aGlzLHN0b3JlOnRoaXMuc3RvcmV9KSxlPW5ldyBrYyhlKX1lLmxldmVsPXRoaXMubGV2ZWwrMSx2b2lkIDA9PT10fHx0PDA/dGhpcy5jaGlsZE5vZGVzLnB1c2goZSk6dGhpcy5jaGlsZE5vZGVzLnNwbGljZSh0LDAsZSksdGhpcy51cGRhdGVMZWFmU3RhdGUoKX1pbnNlcnRCZWZvcmUoZSx0KXtsZXQgbDt0JiYobD10aGlzLmNoaWxkTm9kZXMuaW5kZXhPZih0KSksdGhpcy5pbnNlcnRDaGlsZChlLGwpfWluc2VydEFmdGVyKGUsdCl7bGV0IGw7dCYmKGw9dGhpcy5jaGlsZE5vZGVzLmluZGV4T2YodCksLTEhPT1sJiYobCs9MSkpLHRoaXMuaW5zZXJ0Q2hpbGQoZSxsKX1yZW1vdmVDaGlsZChlKXtjb25zdCB0PXRoaXMuZ2V0Q2hpbGRyZW4oKXx8W10sbD10LmluZGV4T2YoZS5kYXRhKTtsPi0xJiZ0LnNwbGljZShsLDEpO2NvbnN0IGE9dGhpcy5jaGlsZE5vZGVzLmluZGV4T2YoZSk7YT4tMSYmKHRoaXMuc3RvcmUmJnRoaXMuc3RvcmUuZGVyZWdpc3Rlck5vZGUoZSksZS5wYXJlbnQ9bnVsbCx0aGlzLmNoaWxkTm9kZXMuc3BsaWNlKGEsMSkpLHRoaXMudXBkYXRlTGVhZlN0YXRlKCl9cmVtb3ZlQ2hpbGRCeURhdGEoZSl7bGV0IHQ9bnVsbDtmb3IobGV0IGw9MDtsPHRoaXMuY2hpbGROb2Rlcy5sZW5ndGg7bCsrKWlmKHRoaXMuY2hpbGROb2Rlc1tsXS5kYXRhPT09ZSl7dD10aGlzLmNoaWxkTm9kZXNbbF07YnJlYWt9dCYmdGhpcy5yZW1vdmVDaGlsZCh0KX1leHBhbmQoZSx0KXtjb25zdCBsPSgpPT57aWYodCl7bGV0IGU9dGhpcy5wYXJlbnQ7Zm9yKDtlLmxldmVsPjA7KWUuZXhwYW5kZWQ9ITAsZT1lLnBhcmVudH10aGlzLmV4cGFuZGVkPSEwLGUmJmUoKSx0aGlzLmNoaWxkTm9kZXMuZm9yRWFjaCgoZT0+e2UuY2FuRm9jdXM9ITB9KSl9O3RoaXMuc2hvdWxkTG9hZERhdGEoKT90aGlzLmxvYWREYXRhKChlPT57QXJyYXkuaXNBcnJheShlKSYmKHRoaXMuY2hlY2tlZD90aGlzLnNldENoZWNrZWQoITAsITApOnRoaXMuc3RvcmUuY2hlY2tTdHJpY3RseXx8Z2ModGhpcyksbCgpKX0pKTpsKCl9ZG9DcmVhdGVDaGlsZHJlbihlLHQ9e30pe2UuZm9yRWFjaCgoZT0+e3RoaXMuaW5zZXJ0Q2hpbGQoT2JqZWN0LmFzc2lnbih7ZGF0YTplfSx0KSx2b2lkIDAsITApfSkpfWNvbGxhcHNlKCl7dGhpcy5leHBhbmRlZD0hMSx0aGlzLmNoaWxkTm9kZXMuZm9yRWFjaCgoZT0+e2UuY2FuRm9jdXM9ITF9KSl9c2hvdWxkTG9hZERhdGEoKXtyZXR1cm4hMD09PXRoaXMuc3RvcmUubGF6eSYmdGhpcy5zdG9yZS5sb2FkJiYhdGhpcy5sb2FkZWR9dXBkYXRlTGVhZlN0YXRlKCl7aWYoITA9PT10aGlzLnN0b3JlLmxhenkmJiEwIT09dGhpcy5sb2FkZWQmJnZvaWQgMCE9PXRoaXMuaXNMZWFmQnlVc2VyKXJldHVybiB2b2lkKHRoaXMuaXNMZWFmPXRoaXMuaXNMZWFmQnlVc2VyKTtjb25zdCBlPXRoaXMuY2hpbGROb2RlczshdGhpcy5zdG9yZS5sYXp5fHwhMD09PXRoaXMuc3RvcmUubGF6eSYmITA9PT10aGlzLmxvYWRlZD90aGlzLmlzTGVhZj0hZXx8MD09PWUubGVuZ3RoOnRoaXMuaXNMZWFmPSExfXNldENoZWNrZWQoZSx0LGwsYSl7aWYodGhpcy5pbmRldGVybWluYXRlPVwiaGFsZlwiPT09ZSx0aGlzLmNoZWNrZWQ9ITA9PT1lLHRoaXMuc3RvcmUuY2hlY2tTdHJpY3RseSlyZXR1cm47aWYoIXRoaXMuc2hvdWxkTG9hZERhdGEoKXx8dGhpcy5zdG9yZS5jaGVja0Rlc2NlbmRhbnRzKXtjb25zdHthbGw6bCxhbGxXaXRob3V0RGlzYWJsZTpufT1mYyh0aGlzLmNoaWxkTm9kZXMpO3RoaXMuaXNMZWFmfHxsfHwhbnx8KHRoaXMuY2hlY2tlZD0hMSxlPSExKTtjb25zdCBvPSgpPT57aWYodCl7Y29uc3QgbD10aGlzLmNoaWxkTm9kZXM7Zm9yKGxldCBuPTAsbz1sLmxlbmd0aDtuPG87bisrKXtjb25zdCBvPWxbbl07YT1hfHwhMSE9PWU7Y29uc3QgaT1vLmRpc2FibGVkP28uY2hlY2tlZDphO28uc2V0Q2hlY2tlZChpLHQsITAsYSl9Y29uc3R7aGFsZjpuLGFsbDpvfT1mYyhsKTtvfHwodGhpcy5jaGVja2VkPW8sdGhpcy5pbmRldGVybWluYXRlPW4pfX07aWYodGhpcy5zaG91bGRMb2FkRGF0YSgpKXJldHVybiB2b2lkIHRoaXMubG9hZERhdGEoKCgpPT57bygpLGdjKHRoaXMpfSkse2NoZWNrZWQ6ITEhPT1lfSk7bygpfWNvbnN0IG49dGhpcy5wYXJlbnQ7biYmMCE9PW4ubGV2ZWwmJihsfHxnYyhuKSl9Z2V0Q2hpbGRyZW4oZT0hMSl7aWYoMD09PXRoaXMubGV2ZWwpcmV0dXJuIHRoaXMuZGF0YTtjb25zdCB0PXRoaXMuZGF0YTtpZighdClyZXR1cm4gbnVsbDtjb25zdCBsPXRoaXMuc3RvcmUucHJvcHM7bGV0IGE9XCJjaGlsZHJlblwiO3JldHVybiBsJiYoYT1sLmNoaWxkcmVufHxcImNoaWxkcmVuXCIpLHZvaWQgMD09PXRbYV0mJih0W2FdPW51bGwpLGUmJiF0W2FdJiYodFthXT1bXSksdFthXX11cGRhdGVDaGlsZHJlbigpe2NvbnN0IGU9dGhpcy5nZXRDaGlsZHJlbigpfHxbXSx0PXRoaXMuY2hpbGROb2Rlcy5tYXAoKGU9PmUuZGF0YSkpLGw9e30sYT1bXTtlLmZvckVhY2goKChlLG4pPT57Y29uc3Qgbz1lW2hjXTshIW8mJnQuZmluZEluZGV4KChlPT5lW2hjXT09PW8pKT49MD9sW29dPXtpbmRleDpuLGRhdGE6ZX06YS5wdXNoKHtpbmRleDpuLGRhdGE6ZX0pfSkpLHRoaXMuc3RvcmUubGF6eXx8dC5mb3JFYWNoKChlPT57bFtlW2hjXV18fHRoaXMucmVtb3ZlQ2hpbGRCeURhdGEoZSl9KSksYS5mb3JFYWNoKCgoe2luZGV4OmUsZGF0YTp0fSk9Pnt0aGlzLmluc2VydENoaWxkKHtkYXRhOnR9LGUpfSkpLHRoaXMudXBkYXRlTGVhZlN0YXRlKCl9bG9hZERhdGEoZSx0PXt9KXtpZighMCE9PXRoaXMuc3RvcmUubGF6eXx8IXRoaXMuc3RvcmUubG9hZHx8dGhpcy5sb2FkZWR8fHRoaXMubG9hZGluZyYmIU9iamVjdC5rZXlzKHQpLmxlbmd0aCllJiZlLmNhbGwodGhpcyk7ZWxzZXt0aGlzLmxvYWRpbmc9ITA7Y29uc3QgbD1sPT57dGhpcy5sb2FkZWQ9ITAsdGhpcy5sb2FkaW5nPSExLHRoaXMuY2hpbGROb2Rlcz1bXSx0aGlzLmRvQ3JlYXRlQ2hpbGRyZW4obCx0KSx0aGlzLnVwZGF0ZUxlYWZTdGF0ZSgpLGUmJmUuY2FsbCh0aGlzLGwpfTt0aGlzLnN0b3JlLmxvYWQodGhpcyxsKX19fWNsYXNzIENje2NvbnN0cnVjdG9yKGUpe3RoaXMuY3VycmVudE5vZGU9bnVsbCx0aGlzLmN1cnJlbnROb2RlS2V5PW51bGw7Zm9yKGNvbnN0IHQgaW4gZSllLmhhc093blByb3BlcnR5KHQpJiYodGhpc1t0XT1lW3RdKTtpZih0aGlzLm5vZGVzTWFwPXt9LHRoaXMucm9vdD1uZXcga2Moe2RhdGE6dGhpcy5kYXRhLHN0b3JlOnRoaXN9KSx0aGlzLmxhenkmJnRoaXMubG9hZCl7KDAsdGhpcy5sb2FkKSh0aGlzLnJvb3QsKGU9Pnt0aGlzLnJvb3QuZG9DcmVhdGVDaGlsZHJlbihlKSx0aGlzLl9pbml0RGVmYXVsdENoZWNrZWROb2RlcygpfSkpfWVsc2UgdGhpcy5faW5pdERlZmF1bHRDaGVja2VkTm9kZXMoKX1maWx0ZXIoZSl7Y29uc3QgdD10aGlzLmZpbHRlck5vZGVNZXRob2QsbD10aGlzLmxhenksYT1mdW5jdGlvbihuKXtjb25zdCBvPW4ucm9vdD9uLnJvb3QuY2hpbGROb2RlczpuLmNoaWxkTm9kZXM7aWYoby5mb3JFYWNoKChsPT57bC52aXNpYmxlPXQuY2FsbChsLGUsbC5kYXRhLGwpLGEobCl9KSksIW4udmlzaWJsZSYmby5sZW5ndGgpe2xldCBlPSEwO2U9IW8uc29tZSgoZT0+ZS52aXNpYmxlKSksbi5yb290P24ucm9vdC52aXNpYmxlPSExPT09ZTpuLnZpc2libGU9ITE9PT1lfWUmJighbi52aXNpYmxlfHxuLmlzTGVhZnx8bHx8bi5leHBhbmQoKSl9O2EodGhpcyl9c2V0RGF0YShlKXtlIT09dGhpcy5yb290LmRhdGE/KHRoaXMucm9vdC5zZXREYXRhKGUpLHRoaXMuX2luaXREZWZhdWx0Q2hlY2tlZE5vZGVzKCkpOnRoaXMucm9vdC51cGRhdGVDaGlsZHJlbigpfWdldE5vZGUoZSl7aWYoZSBpbnN0YW5jZW9mIGtjKXJldHVybiBlO2NvbnN0IHQ9XCJvYmplY3RcIiE9dHlwZW9mIGU/ZTptYyh0aGlzLmtleSxlKTtyZXR1cm4gdGhpcy5ub2Rlc01hcFt0XXx8bnVsbH1pbnNlcnRCZWZvcmUoZSx0KXtjb25zdCBsPXRoaXMuZ2V0Tm9kZSh0KTtsLnBhcmVudC5pbnNlcnRCZWZvcmUoe2RhdGE6ZX0sbCl9aW5zZXJ0QWZ0ZXIoZSx0KXtjb25zdCBsPXRoaXMuZ2V0Tm9kZSh0KTtsLnBhcmVudC5pbnNlcnRBZnRlcih7ZGF0YTplfSxsKX1yZW1vdmUoZSl7Y29uc3QgdD10aGlzLmdldE5vZGUoZSk7dCYmdC5wYXJlbnQmJih0PT09dGhpcy5jdXJyZW50Tm9kZSYmKHRoaXMuY3VycmVudE5vZGU9bnVsbCksdC5wYXJlbnQucmVtb3ZlQ2hpbGQodCkpfWFwcGVuZChlLHQpe2NvbnN0IGw9dD90aGlzLmdldE5vZGUodCk6dGhpcy5yb290O2wmJmwuaW5zZXJ0Q2hpbGQoe2RhdGE6ZX0pfV9pbml0RGVmYXVsdENoZWNrZWROb2Rlcygpe2NvbnN0IGU9dGhpcy5kZWZhdWx0Q2hlY2tlZEtleXN8fFtdLHQ9dGhpcy5ub2Rlc01hcDtlLmZvckVhY2goKGU9Pntjb25zdCBsPXRbZV07bCYmbC5zZXRDaGVja2VkKCEwLCF0aGlzLmNoZWNrU3RyaWN0bHkpfSkpfV9pbml0RGVmYXVsdENoZWNrZWROb2RlKGUpey0xIT09KHRoaXMuZGVmYXVsdENoZWNrZWRLZXlzfHxbXSkuaW5kZXhPZihlLmtleSkmJmUuc2V0Q2hlY2tlZCghMCwhdGhpcy5jaGVja1N0cmljdGx5KX1zZXREZWZhdWx0Q2hlY2tlZEtleShlKXtlIT09dGhpcy5kZWZhdWx0Q2hlY2tlZEtleXMmJih0aGlzLmRlZmF1bHRDaGVja2VkS2V5cz1lLHRoaXMuX2luaXREZWZhdWx0Q2hlY2tlZE5vZGVzKCkpfXJlZ2lzdGVyTm9kZShlKXtjb25zdCB0PXRoaXMua2V5O2lmKGUmJmUuZGF0YSlpZih0KXt2b2lkIDAhPT1lLmtleSYmKHRoaXMubm9kZXNNYXBbZS5rZXldPWUpfWVsc2UgdGhpcy5ub2Rlc01hcFtlLmlkXT1lfWRlcmVnaXN0ZXJOb2RlKGUpe3RoaXMua2V5JiZlJiZlLmRhdGEmJihlLmNoaWxkTm9kZXMuZm9yRWFjaCgoZT0+e3RoaXMuZGVyZWdpc3Rlck5vZGUoZSl9KSksZGVsZXRlIHRoaXMubm9kZXNNYXBbZS5rZXldKX1nZXRDaGVja2VkTm9kZXMoZT0hMSx0PSExKXtjb25zdCBsPVtdLGE9ZnVuY3Rpb24obil7KG4ucm9vdD9uLnJvb3QuY2hpbGROb2RlczpuLmNoaWxkTm9kZXMpLmZvckVhY2goKG49Pnsobi5jaGVja2VkfHx0JiZuLmluZGV0ZXJtaW5hdGUpJiYoIWV8fGUmJm4uaXNMZWFmKSYmbC5wdXNoKG4uZGF0YSksYShuKX0pKX07cmV0dXJuIGEodGhpcyksbH1nZXRDaGVja2VkS2V5cyhlPSExKXtyZXR1cm4gdGhpcy5nZXRDaGVja2VkTm9kZXMoZSkubWFwKChlPT4oZXx8e30pW3RoaXMua2V5XSkpfWdldEhhbGZDaGVja2VkTm9kZXMoKXtjb25zdCBlPVtdLHQ9ZnVuY3Rpb24obCl7KGwucm9vdD9sLnJvb3QuY2hpbGROb2RlczpsLmNoaWxkTm9kZXMpLmZvckVhY2goKGw9PntsLmluZGV0ZXJtaW5hdGUmJmUucHVzaChsLmRhdGEpLHQobCl9KSl9O3JldHVybiB0KHRoaXMpLGV9Z2V0SGFsZkNoZWNrZWRLZXlzKCl7cmV0dXJuIHRoaXMuZ2V0SGFsZkNoZWNrZWROb2RlcygpLm1hcCgoZT0+KGV8fHt9KVt0aGlzLmtleV0pKX1fZ2V0QWxsTm9kZXMoKXtjb25zdCBlPVtdLHQ9dGhpcy5ub2Rlc01hcDtmb3IoY29uc3QgbCBpbiB0KXQuaGFzT3duUHJvcGVydHkobCkmJmUucHVzaCh0W2xdKTtyZXR1cm4gZX11cGRhdGVDaGlsZHJlbihlLHQpe2NvbnN0IGw9dGhpcy5ub2Rlc01hcFtlXTtpZighbClyZXR1cm47Y29uc3QgYT1sLmNoaWxkTm9kZXM7Zm9yKGxldCBlPWEubGVuZ3RoLTE7ZT49MDtlLS0pe2NvbnN0IHQ9YVtlXTt0aGlzLnJlbW92ZSh0LmRhdGEpfWZvcihsZXQgZT0wLGE9dC5sZW5ndGg7ZTxhO2UrKyl7Y29uc3QgYT10W2VdO3RoaXMuYXBwZW5kKGEsbC5kYXRhKX19X3NldENoZWNrZWRLZXlzKGUsdD0hMSxsKXtjb25zdCBhPXRoaXMuX2dldEFsbE5vZGVzKCkuc29ydCgoKGUsdCk9PnQubGV2ZWwtZS5sZXZlbCkpLG49T2JqZWN0LmNyZWF0ZShudWxsKSxvPU9iamVjdC5rZXlzKGwpO2EuZm9yRWFjaCgoZT0+ZS5zZXRDaGVja2VkKCExLCExKSkpO2ZvcihsZXQgbD0wLGk9YS5sZW5ndGg7bDxpO2wrKyl7Y29uc3QgaT1hW2xdLHI9aS5kYXRhW2VdLnRvU3RyaW5nKCk7aWYoIShvLmluZGV4T2Yocik+LTEpKXtpLmNoZWNrZWQmJiFuW3JdJiZpLnNldENoZWNrZWQoITEsITEpO2NvbnRpbnVlfWxldCBzPWkucGFyZW50O2Zvcig7cyYmcy5sZXZlbD4wOyluW3MuZGF0YVtlXV09ITAscz1zLnBhcmVudDtpZihpLmlzTGVhZnx8dGhpcy5jaGVja1N0cmljdGx5KWkuc2V0Q2hlY2tlZCghMCwhMSk7ZWxzZSBpZihpLnNldENoZWNrZWQoITAsITApLHQpe2kuc2V0Q2hlY2tlZCghMSwhMSk7Y29uc3QgZT1mdW5jdGlvbih0KXt0LmNoaWxkTm9kZXMuZm9yRWFjaCgodD0+e3QuaXNMZWFmfHx0LnNldENoZWNrZWQoITEsITEpLGUodCl9KSl9O2UoaSl9fX1zZXRDaGVja2VkTm9kZXMoZSx0PSExKXtjb25zdCBsPXRoaXMua2V5LGE9e307ZS5mb3JFYWNoKChlPT57YVsoZXx8e30pW2xdXT0hMH0pKSx0aGlzLl9zZXRDaGVja2VkS2V5cyhsLHQsYSl9c2V0Q2hlY2tlZEtleXMoZSx0PSExKXt0aGlzLmRlZmF1bHRDaGVja2VkS2V5cz1lO2NvbnN0IGw9dGhpcy5rZXksYT17fTtlLmZvckVhY2goKGU9PnthW2VdPSEwfSkpLHRoaXMuX3NldENoZWNrZWRLZXlzKGwsdCxhKX1zZXREZWZhdWx0RXhwYW5kZWRLZXlzKGUpe2U9ZXx8W10sdGhpcy5kZWZhdWx0RXhwYW5kZWRLZXlzPWUsZS5mb3JFYWNoKChlPT57Y29uc3QgdD10aGlzLmdldE5vZGUoZSk7dCYmdC5leHBhbmQobnVsbCx0aGlzLmF1dG9FeHBhbmRQYXJlbnQpfSkpfXNldENoZWNrZWQoZSx0LGwpe2NvbnN0IGE9dGhpcy5nZXROb2RlKGUpO2EmJmEuc2V0Q2hlY2tlZCghIXQsbCl9Z2V0Q3VycmVudE5vZGUoKXtyZXR1cm4gdGhpcy5jdXJyZW50Tm9kZX1zZXRDdXJyZW50Tm9kZShlKXtjb25zdCB0PXRoaXMuY3VycmVudE5vZGU7dCYmKHQuaXNDdXJyZW50PSExKSx0aGlzLmN1cnJlbnROb2RlPWUsdGhpcy5jdXJyZW50Tm9kZS5pc0N1cnJlbnQ9ITB9c2V0VXNlckN1cnJlbnROb2RlKGUpe2NvbnN0IHQ9ZVt0aGlzLmtleV0sbD10aGlzLm5vZGVzTWFwW3RdO3RoaXMuc2V0Q3VycmVudE5vZGUobCl9c2V0Q3VycmVudE5vZGVLZXkoZSl7aWYobnVsbD09ZSlyZXR1cm4gdGhpcy5jdXJyZW50Tm9kZSYmKHRoaXMuY3VycmVudE5vZGUuaXNDdXJyZW50PSExKSx2b2lkKHRoaXMuY3VycmVudE5vZGU9bnVsbCk7Y29uc3QgdD10aGlzLmdldE5vZGUoZSk7dCYmdGhpcy5zZXRDdXJyZW50Tm9kZSh0KX19dmFyIHhjPWUoe25hbWU6XCJFbFRyZWVOb2RlQ29udGVudFwiLHByb3BzOntub2RlOnt0eXBlOk9iamVjdCxyZXF1aXJlZDohMH0scmVuZGVyQ29udGVudDpGdW5jdGlvbn0sc2V0dXAoZSl7Y29uc3QgdD13KFwiTm9kZUluc3RhbmNlXCIpLGw9dyhcIlJvb3RUcmVlXCIpO3JldHVybigpPT57Y29uc3QgYT1lLm5vZGUse2RhdGE6bixzdG9yZTpvfT1hO3JldHVybiBlLnJlbmRlckNvbnRlbnQ/ZS5yZW5kZXJDb250ZW50KEQse19zZWxmOnQsbm9kZTphLGRhdGE6bixzdG9yZTpvfSk6bC5jdHguc2xvdHMuZGVmYXVsdD9sLmN0eC5zbG90cy5kZWZhdWx0KHtub2RlOmEsZGF0YTpufSk6RChcInNwYW5cIix7Y2xhc3M6XCJlbC10cmVlLW5vZGVfX2xhYmVsXCJ9LFthLmxhYmVsXSl9fX0pO2Z1bmN0aW9uIHdjKGUpe2NvbnN0IHQ9dyhcIlRyZWVOb2RlTWFwXCIsbnVsbCksbD17dHJlZU5vZGVFeHBhbmQ6dD0+e2Uubm9kZSE9PXQmJmUubm9kZS5jb2xsYXBzZSgpfSxjaGlsZHJlbjpbXX07cmV0dXJuIHQmJnQuY2hpbGRyZW4ucHVzaChsKSx4KFwiVHJlZU5vZGVNYXBcIixsKSx7YnJvYWRjYXN0RXhwYW5kZWQ6dD0+e2lmKGUuYWNjb3JkaW9uKWZvcihjb25zdCBlIG9mIGwuY2hpbGRyZW4pZS50cmVlTm9kZUV4cGFuZCh0KX19fXhjLl9fZmlsZT1cInBhY2thZ2VzL3RyZWUvc3JjL3RyZWUtbm9kZS1jb250ZW50LnZ1ZVwiO3ZhciBfYz1lKHtuYW1lOlwiRWxUcmVlTm9kZVwiLGNvbXBvbmVudHM6e0VsQ29sbGFwc2VUcmFuc2l0aW9uOlZuLEVsQ2hlY2tib3g6S2EsTm9kZUNvbnRlbnQ6eGN9LHByb3BzOntub2RlOnt0eXBlOmtjLGRlZmF1bHQ6KCk9Pih7fSl9LHByb3BzOnt0eXBlOk9iamVjdCxkZWZhdWx0OigpPT4oe30pfSxyZW5kZXJDb250ZW50OkZ1bmN0aW9uLHJlbmRlckFmdGVyRXhwYW5kOkJvb2xlYW4sc2hvd0NoZWNrYm94Ont0eXBlOkJvb2xlYW4sZGVmYXVsdDohMX19LGVtaXRzOltcIm5vZGUtZXhwYW5kXCJdLHNldHVwKGUsbCl7Y29uc3R7YnJvYWRjYXN0RXhwYW5kZWQ6YX09d2MoZSksbj13KFwiUm9vdFRyZWVcIiksbz10KCExKSxpPXQoITEpLHI9dChudWxsKSxzPXQobnVsbCksdT10KG51bGwpLHtlbWl0dGVyOmR9PXtlbWl0dGVyOncoXCJEcmFnTm9kZUVtaXR0ZXJcIil9LGM9digpO3goXCJOb2RlSW5zdGFuY2VcIixjKSxufHxjb25zb2xlLndhcm4oXCJDYW4gbm90IGZpbmQgbm9kZSdzIHRyZWUuXCIpLGUubm9kZS5leHBhbmRlZCYmKG8udmFsdWU9ITAsaS52YWx1ZT0hMCk7Y29uc3QgcD1uLnByb3BzLmNoaWxkcmVufHxcImNoaWxkcmVuXCI7eSgoKCk9PmUubm9kZS5kYXRhW3BdKSwoKCk9PntlLm5vZGUudXBkYXRlQ2hpbGRyZW4oKX0pKSx5KCgoKT0+ZS5ub2RlLmluZGV0ZXJtaW5hdGUpLCh0PT57aChlLm5vZGUuY2hlY2tlZCx0KX0pKSx5KCgoKT0+ZS5ub2RlLmNoZWNrZWQpLCh0PT57aCh0LGUubm9kZS5pbmRldGVybWluYXRlKX0pKSx5KCgoKT0+ZS5ub2RlLmV4cGFuZGVkKSwoZT0+e2soKCgpPT5vLnZhbHVlPWUpKSxlJiYoaS52YWx1ZT0hMCl9KSk7Y29uc3QgaD0odCxsKT0+e3IudmFsdWUhPT10JiZzLnZhbHVlIT09bCYmbi5jdHguZW1pdChcImNoZWNrLWNoYW5nZVwiLGUubm9kZS5kYXRhLHQsbCksci52YWx1ZT10LHMudmFsdWU9bH0sbT0oKT0+e2Uubm9kZS5pc0xlYWZ8fChvLnZhbHVlPyhuLmN0eC5lbWl0KFwibm9kZS1jb2xsYXBzZVwiLGUubm9kZS5kYXRhLGUubm9kZSxjKSxlLm5vZGUuY29sbGFwc2UoKSk6KGUubm9kZS5leHBhbmQoKSxsLmVtaXQoXCJub2RlLWV4cGFuZFwiLGUubm9kZS5kYXRhLGUubm9kZSxjKSkpfSxmPSh0LGwpPT57ZS5ub2RlLnNldENoZWNrZWQobC50YXJnZXQuY2hlY2tlZCwhbi5wcm9wcy5jaGVja1N0cmljdGx5KSxrKCgoKT0+e2NvbnN0IHQ9bi5zdG9yZS52YWx1ZTtuLmN0eC5lbWl0KFwiY2hlY2tcIixlLm5vZGUuZGF0YSx7Y2hlY2tlZE5vZGVzOnQuZ2V0Q2hlY2tlZE5vZGVzKCksY2hlY2tlZEtleXM6dC5nZXRDaGVja2VkS2V5cygpLGhhbGZDaGVja2VkTm9kZXM6dC5nZXRIYWxmQ2hlY2tlZE5vZGVzKCksaGFsZkNoZWNrZWRLZXlzOnQuZ2V0SGFsZkNoZWNrZWRLZXlzKCl9KX0pKX07cmV0dXJue25vZGUkOnUsdHJlZTpuLGV4cGFuZGVkOm8sY2hpbGROb2RlUmVuZGVyZWQ6aSxvbGRDaGVja2VkOnIsb2xkSW5kZXRlcm1pbmF0ZTpzLGVtaXR0ZXI6ZCxwYXJlbnQ6cGFyZW50LGdldE5vZGVLZXk6ZT0+bWMobi5wcm9wcy5ub2RlS2V5LGUuZGF0YSksaGFuZGxlU2VsZWN0Q2hhbmdlOmgsaGFuZGxlQ2xpY2s6KCk9Pntjb25zdCB0PW4uc3RvcmUudmFsdWU7dC5zZXRDdXJyZW50Tm9kZShlLm5vZGUpLG4uY3R4LmVtaXQoXCJjdXJyZW50LWNoYW5nZVwiLHQuY3VycmVudE5vZGU/dC5jdXJyZW50Tm9kZS5kYXRhOm51bGwsdC5jdXJyZW50Tm9kZSksbi5jdXJyZW50Tm9kZS52YWx1ZT1lLm5vZGUsbi5wcm9wcy5leHBhbmRPbkNsaWNrTm9kZSYmbSgpLG4ucHJvcHMuY2hlY2tPbkNsaWNrTm9kZSYmIWUubm9kZS5kaXNhYmxlZCYmZihudWxsLHt0YXJnZXQ6e2NoZWNrZWQ6IWUubm9kZS5jaGVja2VkfX0pLG4uY3R4LmVtaXQoXCJub2RlLWNsaWNrXCIsZS5ub2RlLmRhdGEsZS5ub2RlLGMpfSxoYW5kbGVDb250ZXh0TWVudTp0PT57bi5pbnN0YW5jZS52bm9kZS5wcm9wcy5vbk5vZGVDb250ZXh0bWVudSYmKHQuc3RvcFByb3BhZ2F0aW9uKCksdC5wcmV2ZW50RGVmYXVsdCgpKSxuLmN0eC5lbWl0KFwibm9kZS1jb250ZXh0bWVudVwiLHQsZS5ub2RlLmRhdGEsZS5ub2RlLGMpfSxoYW5kbGVFeHBhbmRJY29uQ2xpY2s6bSxoYW5kbGVDaGVja0NoYW5nZTpmLGhhbmRsZUNoaWxkTm9kZUV4cGFuZDooZSx0LGwpPT57YSh0KSxuLmN0eC5lbWl0KFwibm9kZS1leHBhbmRcIixlLHQsbCl9LGhhbmRsZURyYWdTdGFydDp0PT57bi5wcm9wcy5kcmFnZ2FibGUmJmQuZW1pdChcInRyZWUtbm9kZS1kcmFnLXN0YXJ0XCIse2V2ZW50OnQsdHJlZU5vZGU6ZX0pfSxoYW5kbGVEcmFnT3Zlcjp0PT57bi5wcm9wcy5kcmFnZ2FibGUmJihkLmVtaXQoXCJ0cmVlLW5vZGUtZHJhZy1vdmVyXCIse2V2ZW50OnQsdHJlZU5vZGU6eyRlbDp1LnZhbHVlLG5vZGU6ZS5ub2RlfX0pLHQucHJldmVudERlZmF1bHQoKSl9LGhhbmRsZURyb3A6ZT0+e2UucHJldmVudERlZmF1bHQoKX0saGFuZGxlRHJhZ0VuZDplPT57bi5wcm9wcy5kcmFnZ2FibGUmJmQuZW1pdChcInRyZWUtbm9kZS1kcmFnLWVuZFwiLGUpfX19fSk7Y29uc3QgU2M9e2tleToxLGNsYXNzOlwiZWwtdHJlZS1ub2RlX19sb2FkaW5nLWljb24gZWwtaWNvbi1sb2FkaW5nXCJ9O19jLnJlbmRlcj1mdW5jdGlvbihlLHQsbCxvLGQsYyl7Y29uc3QgcD1QKFwiZWwtY2hlY2tib3hcIiksdj1QKFwibm9kZS1jb250ZW50XCIpLG09UChcImVsLXRyZWUtbm9kZVwiKSxmPVAoXCJlbC1jb2xsYXBzZS10cmFuc2l0aW9uXCIpO3JldHVybiByKChhKCksbihcImRpdlwiLHtyZWY6XCJub2RlJFwiLGNsYXNzOltcImVsLXRyZWUtbm9kZVwiLHtcImlzLWV4cGFuZGVkXCI6ZS5leHBhbmRlZCxcImlzLWN1cnJlbnRcIjplLm5vZGUuaXNDdXJyZW50LFwiaXMtaGlkZGVuXCI6IWUubm9kZS52aXNpYmxlLFwiaXMtZm9jdXNhYmxlXCI6IWUubm9kZS5kaXNhYmxlZCxcImlzLWNoZWNrZWRcIjohZS5ub2RlLmRpc2FibGVkJiZlLm5vZGUuY2hlY2tlZH1dLHJvbGU6XCJ0cmVlaXRlbVwiLHRhYmluZGV4OlwiLTFcIixcImFyaWEtZXhwYW5kZWRcIjplLmV4cGFuZGVkLFwiYXJpYS1kaXNhYmxlZFwiOmUubm9kZS5kaXNhYmxlZCxcImFyaWEtY2hlY2tlZFwiOmUubm9kZS5jaGVja2VkLGRyYWdnYWJsZTplLnRyZWUucHJvcHMuZHJhZ2dhYmxlLFwiZGF0YS1rZXlcIjplLmdldE5vZGVLZXkoZS5ub2RlKSxvbkNsaWNrOnRbM118fCh0WzNdPVQoKCguLi50KT0+ZS5oYW5kbGVDbGljayguLi50KSksW1wic3RvcFwiXSkpLG9uQ29udGV4dG1lbnU6dFs0XXx8KHRbNF09KC4uLnQpPT5lLmhhbmRsZUNvbnRleHRNZW51KC4uLnQpKSxvbkRyYWdzdGFydDp0WzVdfHwodFs1XT1UKCgoLi4udCk9PmUuaGFuZGxlRHJhZ1N0YXJ0KC4uLnQpKSxbXCJzdG9wXCJdKSksb25EcmFnb3Zlcjp0WzZdfHwodFs2XT1UKCgoLi4udCk9PmUuaGFuZGxlRHJhZ092ZXIoLi4udCkpLFtcInN0b3BcIl0pKSxvbkRyYWdlbmQ6dFs3XXx8KHRbN109VCgoKC4uLnQpPT5lLmhhbmRsZURyYWdFbmQoLi4udCkpLFtcInN0b3BcIl0pKSxvbkRyb3A6dFs4XXx8KHRbOF09VCgoKC4uLnQpPT5lLmhhbmRsZURyb3AoLi4udCkpLFtcInN0b3BcIl0pKX0sW3MoXCJkaXZcIix7Y2xhc3M6XCJlbC10cmVlLW5vZGVfX2NvbnRlbnRcIixzdHlsZTp7XCJwYWRkaW5nLWxlZnRcIjooZS5ub2RlLmxldmVsLTEpKmUudHJlZS5wcm9wcy5pbmRlbnQrXCJweFwifX0sW3MoXCJzcGFuXCIse2NsYXNzOlt7XCJpcy1sZWFmXCI6ZS5ub2RlLmlzTGVhZixleHBhbmRlZDohZS5ub2RlLmlzTGVhZiYmZS5leHBhbmRlZH0sXCJlbC10cmVlLW5vZGVfX2V4cGFuZC1pY29uXCIsZS50cmVlLnByb3BzLmljb25DbGFzcz9lLnRyZWUucHJvcHMuaWNvbkNsYXNzOlwiZWwtaWNvbi1jYXJldC1yaWdodFwiXSxvbkNsaWNrOnRbMV18fCh0WzFdPVQoKCguLi50KT0+ZS5oYW5kbGVFeHBhbmRJY29uQ2xpY2soLi4udCkpLFtcInN0b3BcIl0pKX0sbnVsbCwyKSxlLnNob3dDaGVja2JveD8oYSgpLG4ocCx7a2V5OjAsXCJtb2RlbC12YWx1ZVwiOmUubm9kZS5jaGVja2VkLGluZGV0ZXJtaW5hdGU6ZS5ub2RlLmluZGV0ZXJtaW5hdGUsZGlzYWJsZWQ6ISFlLm5vZGUuZGlzYWJsZWQsb25DbGljazp0WzJdfHwodFsyXT1UKCgoKT0+e30pLFtcInN0b3BcIl0pKSxvbkNoYW5nZTplLmhhbmRsZUNoZWNrQ2hhbmdlfSxudWxsLDgsW1wibW9kZWwtdmFsdWVcIixcImluZGV0ZXJtaW5hdGVcIixcImRpc2FibGVkXCIsXCJvbkNoYW5nZVwiXSkpOnUoXCJ2LWlmXCIsITApLGUubm9kZS5sb2FkaW5nPyhhKCksbihcInNwYW5cIixTYykpOnUoXCJ2LWlmXCIsITApLHModix7bm9kZTplLm5vZGUsXCJyZW5kZXItY29udGVudFwiOmUucmVuZGVyQ29udGVudH0sbnVsbCw4LFtcIm5vZGVcIixcInJlbmRlci1jb250ZW50XCJdKV0sNCkscyhmLG51bGwse2RlZmF1bHQ6aSgoKCk9PlshZS5yZW5kZXJBZnRlckV4cGFuZHx8ZS5jaGlsZE5vZGVSZW5kZXJlZD9yKChhKCksbihcImRpdlwiLHtrZXk6MCxjbGFzczpcImVsLXRyZWUtbm9kZV9fY2hpbGRyZW5cIixyb2xlOlwiZ3JvdXBcIixcImFyaWEtZXhwYW5kZWRcIjplLmV4cGFuZGVkfSxbKGEoITApLG4oRSxudWxsLEgoZS5ub2RlLmNoaWxkTm9kZXMsKHQ9PihhKCksbihtLHtrZXk6ZS5nZXROb2RlS2V5KHQpLFwicmVuZGVyLWNvbnRlbnRcIjplLnJlbmRlckNvbnRlbnQsXCJyZW5kZXItYWZ0ZXItZXhwYW5kXCI6ZS5yZW5kZXJBZnRlckV4cGFuZCxcInNob3ctY2hlY2tib3hcIjplLnNob3dDaGVja2JveCxub2RlOnQsb25Ob2RlRXhwYW5kOmUuaGFuZGxlQ2hpbGROb2RlRXhwYW5kfSxudWxsLDgsW1wicmVuZGVyLWNvbnRlbnRcIixcInJlbmRlci1hZnRlci1leHBhbmRcIixcInNob3ctY2hlY2tib3hcIixcIm5vZGVcIixcIm9uTm9kZUV4cGFuZFwiXSkpKSksMTI4KSldLDgsW1wiYXJpYS1leHBhbmRlZFwiXSkpLFtbaCxlLmV4cGFuZGVkXV0pOnUoXCJ2LWlmXCIsITApXSkpLF86MX0pXSw0MixbXCJhcmlhLWV4cGFuZGVkXCIsXCJhcmlhLWRpc2FibGVkXCIsXCJhcmlhLWNoZWNrZWRcIixcImRyYWdnYWJsZVwiLFwiZGF0YS1rZXlcIl0pKSxbW2gsZS5ub2RlLnZpc2libGVdXSl9LF9jLl9fZmlsZT1cInBhY2thZ2VzL3RyZWUvc3JjL3RyZWUtbm9kZS52dWVcIjt2YXIgRWM9ZSh7bmFtZTpcIkVsVHJlZVwiLGNvbXBvbmVudHM6e0VsVHJlZU5vZGU6X2N9LHByb3BzOntkYXRhOnt0eXBlOkFycmF5fSxlbXB0eVRleHQ6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6KCk9PnFsKFwiZWwudHJlZS5lbXB0eVRleHRcIil9LHJlbmRlckFmdGVyRXhwYW5kOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMH0sbm9kZUtleTpTdHJpbmcsY2hlY2tTdHJpY3RseTpCb29sZWFuLGRlZmF1bHRFeHBhbmRBbGw6Qm9vbGVhbixleHBhbmRPbkNsaWNrTm9kZTp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITB9LGNoZWNrT25DbGlja05vZGU6Qm9vbGVhbixjaGVja0Rlc2NlbmRhbnRzOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMX0sYXV0b0V4cGFuZFBhcmVudDp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITB9LGRlZmF1bHRDaGVja2VkS2V5czpBcnJheSxkZWZhdWx0RXhwYW5kZWRLZXlzOkFycmF5LGN1cnJlbnROb2RlS2V5OltTdHJpbmcsTnVtYmVyXSxyZW5kZXJDb250ZW50OkZ1bmN0aW9uLHNob3dDaGVja2JveDp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITF9LGRyYWdnYWJsZTp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITF9LGFsbG93RHJhZzpGdW5jdGlvbixhbGxvd0Ryb3A6RnVuY3Rpb24scHJvcHM6e3R5cGU6T2JqZWN0LGRlZmF1bHQ6KCk9Pih7Y2hpbGRyZW46XCJjaGlsZHJlblwiLGxhYmVsOlwibGFiZWxcIixkaXNhYmxlZDpcImRpc2FibGVkXCJ9KX0sbGF6eTp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITF9LGhpZ2hsaWdodEN1cnJlbnQ6Qm9vbGVhbixsb2FkOkZ1bmN0aW9uLGZpbHRlck5vZGVNZXRob2Q6RnVuY3Rpb24sYWNjb3JkaW9uOkJvb2xlYW4saW5kZW50Ont0eXBlOk51bWJlcixkZWZhdWx0OjE4fSxpY29uQ2xhc3M6U3RyaW5nfSxlbWl0czpbXCJjaGVjay1jaGFuZ2VcIixcImN1cnJlbnQtY2hhbmdlXCIsXCJub2RlLWNsaWNrXCIsXCJub2RlLWNvbnRleHRtZW51XCIsXCJub2RlLWNvbGxhcHNlXCIsXCJub2RlLWV4cGFuZFwiLFwiY2hlY2tcIixcIm5vZGUtZHJhZy1zdGFydFwiLFwibm9kZS1kcmFnLWVuZFwiLFwibm9kZS1kcm9wXCIsXCJub2RlLWRyYWctbGVhdmVcIixcIm5vZGUtZHJhZy1lbnRlclwiLFwibm9kZS1kcmFnLW92ZXJcIl0sc2V0dXAoZSxhKXtjb25zdCBuPXQobmV3IENjKHtrZXk6ZS5ub2RlS2V5LGRhdGE6ZS5kYXRhLGxhenk6ZS5sYXp5LHByb3BzOmUucHJvcHMsbG9hZDplLmxvYWQsY3VycmVudE5vZGVLZXk6ZS5jdXJyZW50Tm9kZUtleSxjaGVja1N0cmljdGx5OmUuY2hlY2tTdHJpY3RseSxjaGVja0Rlc2NlbmRhbnRzOmUuY2hlY2tEZXNjZW5kYW50cyxkZWZhdWx0Q2hlY2tlZEtleXM6ZS5kZWZhdWx0Q2hlY2tlZEtleXMsZGVmYXVsdEV4cGFuZGVkS2V5czplLmRlZmF1bHRFeHBhbmRlZEtleXMsYXV0b0V4cGFuZFBhcmVudDplLmF1dG9FeHBhbmRQYXJlbnQsZGVmYXVsdEV4cGFuZEFsbDplLmRlZmF1bHRFeHBhbmRBbGwsZmlsdGVyTm9kZU1ldGhvZDplLmZpbHRlck5vZGVNZXRob2R9KSksbz10KG4udmFsdWUucm9vdCksaT10KG51bGwpLHI9dChudWxsKSxzPXQobnVsbCkse2Jyb2FkY2FzdEV4cGFuZGVkOnV9PXdjKGUpLHtkcmFnU3RhdGU6ZH09ZnVuY3Rpb24oe3Byb3BzOmUsY3R4OmwsZWwkOmEsZHJvcEluZGljYXRvciQ6bixzdG9yZTpvfSl7Y29uc3QgaT1uZSgpO3goXCJEcmFnTm9kZUVtaXR0ZXJcIixpKTtjb25zdCByPXQoe3Nob3dEcm9wSW5kaWNhdG9yOiExLGRyYWdnaW5nTm9kZTpudWxsLGRyb3BOb2RlOm51bGwsYWxsb3dEcm9wOiEwLGRyb3BUeXBlOm51bGx9KTtyZXR1cm4gaS5vbihcInRyZWUtbm9kZS1kcmFnLXN0YXJ0XCIsKCh7ZXZlbnQ6dCx0cmVlTm9kZTphfSk9PntpZihjb25zb2xlLmxvZyh0LGEpLFwiZnVuY3Rpb25cIj09dHlwZW9mIGUuYWxsb3dEcmFnJiYhZS5hbGxvd0RyYWcoYS5ub2RlKSlyZXR1cm4gdC5wcmV2ZW50RGVmYXVsdCgpLCExO3QuZGF0YVRyYW5zZmVyLmVmZmVjdEFsbG93ZWQ9XCJtb3ZlXCI7dHJ5e3QuZGF0YVRyYW5zZmVyLnNldERhdGEoXCJ0ZXh0L3BsYWluXCIsXCJcIil9Y2F0Y2goZSl7fXIudmFsdWUuZHJhZ2dpbmdOb2RlPWEsbC5lbWl0KFwibm9kZS1kcmFnLXN0YXJ0XCIsYS5ub2RlLHQpfSkpLGkub24oXCJ0cmVlLW5vZGUtZHJhZy1vdmVyXCIsKCh7ZXZlbnQ6dCx0cmVlTm9kZTpvfSk9Pntjb25zdCBpPW8scz1yLnZhbHVlLmRyb3BOb2RlO3MmJnMhPT1pJiZpdChzLiRlbCxcImlzLWRyb3AtaW5uZXJcIik7Y29uc3QgdT1yLnZhbHVlLmRyYWdnaW5nTm9kZTtpZighdXx8IWkpcmV0dXJuO2xldCBkPSEwLGM9ITAscD0hMCxoPSEwO1wiZnVuY3Rpb25cIj09dHlwZW9mIGUuYWxsb3dEcm9wJiYoZD1lLmFsbG93RHJvcCh1Lm5vZGUsaS5ub2RlLFwicHJldlwiKSxoPWM9ZS5hbGxvd0Ryb3AodS5ub2RlLGkubm9kZSxcImlubmVyXCIpLHA9ZS5hbGxvd0Ryb3AodS5ub2RlLGkubm9kZSxcIm5leHRcIikpLHQuZGF0YVRyYW5zZmVyLmRyb3BFZmZlY3Q9Yz9cIm1vdmVcIjpcIm5vbmVcIiwoZHx8Y3x8cCkmJnMhPT1pJiYocyYmbC5lbWl0KFwibm9kZS1kcmFnLWxlYXZlXCIsdS5ub2RlLHMubm9kZSx0KSxsLmVtaXQoXCJub2RlLWRyYWctZW50ZXJcIix1Lm5vZGUsaS5ub2RlLHQpKSwoZHx8Y3x8cCkmJihyLnZhbHVlLmRyb3BOb2RlPWkpLGkubm9kZS5uZXh0U2libGluZz09PXUubm9kZSYmKHA9ITEpLGkubm9kZS5wcmV2aW91c1NpYmxpbmc9PT11Lm5vZGUmJihkPSExKSxpLm5vZGUuY29udGFpbnModS5ub2RlLCExKSYmKGM9ITEpLCh1Lm5vZGU9PT1pLm5vZGV8fHUubm9kZS5jb250YWlucyhpLm5vZGUpKSYmKGQ9ITEsYz0hMSxwPSExKTtjb25zdCB2PWkuJGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLG09YS52YWx1ZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtsZXQgZjtjb25zdCBnPWQ/Yz8uMjU6cD8uNDU6MTotMSxiPXA/Yz8uNzU6ZD8uNTU6MDoxO2xldCB5PS05OTk5O2NvbnN0IGs9dC5jbGllbnRZLXYudG9wO2Y9azx2LmhlaWdodCpnP1wiYmVmb3JlXCI6az52LmhlaWdodCpiP1wiYWZ0ZXJcIjpjP1wiaW5uZXJcIjpcIm5vbmVcIjtjb25zdCBDPWkuJGVsLnF1ZXJ5U2VsZWN0b3IoXCIuZWwtdHJlZS1ub2RlX19leHBhbmQtaWNvblwiKS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSx4PW4udmFsdWU7XCJiZWZvcmVcIj09PWY/eT1DLnRvcC1tLnRvcDpcImFmdGVyXCI9PT1mJiYoeT1DLmJvdHRvbS1tLnRvcCkseC5zdHlsZS50b3A9eStcInB4XCIseC5zdHlsZS5sZWZ0PUMucmlnaHQtbS5sZWZ0K1wicHhcIixcImlubmVyXCI9PT1mP290KGkuJGVsLFwiaXMtZHJvcC1pbm5lclwiKTppdChpLiRlbCxcImlzLWRyb3AtaW5uZXJcIiksci52YWx1ZS5zaG93RHJvcEluZGljYXRvcj1cImJlZm9yZVwiPT09Znx8XCJhZnRlclwiPT09ZixyLnZhbHVlLmFsbG93RHJvcD1yLnZhbHVlLnNob3dEcm9wSW5kaWNhdG9yfHxoLHIudmFsdWUuZHJvcFR5cGU9ZixsLmVtaXQoXCJub2RlLWRyYWctb3ZlclwiLHUubm9kZSxpLm5vZGUsdCl9KSksaS5vbihcInRyZWUtbm9kZS1kcmFnLWVuZFwiLChlPT57Y29uc3R7ZHJhZ2dpbmdOb2RlOnQsZHJvcFR5cGU6YSxkcm9wTm9kZTpufT1yLnZhbHVlO2lmKGUucHJldmVudERlZmF1bHQoKSxlLmRhdGFUcmFuc2Zlci5kcm9wRWZmZWN0PVwibW92ZVwiLHQmJm4pe2NvbnN0IGk9e2RhdGE6dC5ub2RlLmRhdGF9O1wibm9uZVwiIT09YSYmdC5ub2RlLnJlbW92ZSgpLFwiYmVmb3JlXCI9PT1hP24ubm9kZS5wYXJlbnQuaW5zZXJ0QmVmb3JlKGksbi5ub2RlKTpcImFmdGVyXCI9PT1hP24ubm9kZS5wYXJlbnQuaW5zZXJ0QWZ0ZXIoaSxuLm5vZGUpOlwiaW5uZXJcIj09PWEmJm4ubm9kZS5pbnNlcnRDaGlsZChpKSxcIm5vbmVcIiE9PWEmJm8udmFsdWUucmVnaXN0ZXJOb2RlKGkpLGl0KG4uJGVsLFwiaXMtZHJvcC1pbm5lclwiKSxsLmVtaXQoXCJub2RlLWRyYWctZW5kXCIsdC5ub2RlLG4ubm9kZSxhLGUpLFwibm9uZVwiIT09YSYmbC5lbWl0KFwibm9kZS1kcm9wXCIsdC5ub2RlLG4ubm9kZSxhLGUpfXQmJiFuJiZsLmVtaXQoXCJub2RlLWRyYWctZW5kXCIsdC5ub2RlLG51bGwsYSxlKSxyLnZhbHVlLnNob3dEcm9wSW5kaWNhdG9yPSExLHIudmFsdWUuZHJhZ2dpbmdOb2RlPW51bGwsci52YWx1ZS5kcm9wTm9kZT1udWxsLHIudmFsdWUuYWxsb3dEcm9wPSEwfSkpLHtkcmFnU3RhdGU6cn19KHtwcm9wczplLGN0eDphLGVsJDpyLGRyb3BJbmRpY2F0b3IkOnMsc3RvcmU6bn0pOyFmdW5jdGlvbih7ZWwkOmV9LGwpe2NvbnN0IGE9dChbXSksbj10KFtdKTtfKCgoKT0+e2koKSxsdChlLnZhbHVlLFwia2V5ZG93blwiLG8pfSkpLE8oKCgpPT57YXQoZS52YWx1ZSxcImtleWRvd25cIixvKX0pKSxTKCgoKT0+e2EudmFsdWU9QXJyYXkuZnJvbShlLnZhbHVlLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbcm9sZT10cmVlaXRlbV1cIikpLG4udmFsdWU9QXJyYXkuZnJvbShlLnZhbHVlLnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dFt0eXBlPWNoZWNrYm94XVwiKSl9KSkseShuLChlPT57ZS5mb3JFYWNoKChlPT57ZS5zZXRBdHRyaWJ1dGUoXCJ0YWJpbmRleFwiLFwiLTFcIil9KSl9KSk7Y29uc3Qgbz10PT57Y29uc3Qgbj10LnRhcmdldDtpZigtMT09PW4uY2xhc3NOYW1lLmluZGV4T2YoXCJlbC10cmVlLW5vZGVcIikpcmV0dXJuO2NvbnN0IG89dC5jb2RlO2EudmFsdWU9QXJyYXkuZnJvbShlLnZhbHVlLnF1ZXJ5U2VsZWN0b3JBbGwoXCIuaXMtZm9jdXNhYmxlW3JvbGU9dHJlZWl0ZW1dXCIpKTtjb25zdCBpPWEudmFsdWUuaW5kZXhPZihuKTtsZXQgcjtpZihbZnQudXAsZnQuZG93bl0uaW5kZXhPZihvKT4tMSl7aWYodC5wcmV2ZW50RGVmYXVsdCgpLG89PT1mdC51cCl7cj0tMT09PWk/MDowIT09aT9pLTE6YS52YWx1ZS5sZW5ndGgtMTtjb25zdCBlPXI7Zm9yKDshbC52YWx1ZS5nZXROb2RlKGEudmFsdWVbcl0uZGF0YXNldC5rZXkpLmNhbkZvY3VzOyl7aWYoci0tLHI9PT1lKXtyPS0xO2JyZWFrfXI8MCYmKHI9YS52YWx1ZS5sZW5ndGgtMSl9fWVsc2V7cj0tMT09PWk/MDppPGEudmFsdWUubGVuZ3RoLTE/aSsxOjA7Y29uc3QgZT1yO2Zvcig7IWwudmFsdWUuZ2V0Tm9kZShhLnZhbHVlW3JdLmRhdGFzZXQua2V5KS5jYW5Gb2N1czspe2lmKHIrKyxyPT09ZSl7cj0tMTticmVha31yPj1hLnZhbHVlLmxlbmd0aCYmKHI9MCl9fS0xIT09ciYmYS52YWx1ZVtyXS5mb2N1cygpfVtmdC5sZWZ0LGZ0LnJpZ2h0XS5pbmRleE9mKG8pPi0xJiYodC5wcmV2ZW50RGVmYXVsdCgpLG4uY2xpY2soKSk7Y29uc3Qgcz1uLnF1ZXJ5U2VsZWN0b3IoJ1t0eXBlPVwiY2hlY2tib3hcIl0nKTtbZnQuZW50ZXIsZnQuc3BhY2VdLmluZGV4T2Yobyk+LTEmJnMmJih0LnByZXZlbnREZWZhdWx0KCkscy5jbGljaygpKX0saT0oKT0+e3ZhciB0O2EudmFsdWU9QXJyYXkuZnJvbShlLnZhbHVlLnF1ZXJ5U2VsZWN0b3JBbGwoXCIuaXMtZm9jdXNhYmxlW3JvbGU9dHJlZWl0ZW1dXCIpKSxuLnZhbHVlPUFycmF5LmZyb20oZS52YWx1ZS5xdWVyeVNlbGVjdG9yQWxsKFwiaW5wdXRbdHlwZT1jaGVja2JveF1cIikpO2NvbnN0IGw9ZS52YWx1ZS5xdWVyeVNlbGVjdG9yQWxsKFwiLmlzLWNoZWNrZWRbcm9sZT10cmVlaXRlbV1cIik7bC5sZW5ndGg/bFswXS5zZXRBdHRyaWJ1dGUoXCJ0YWJpbmRleFwiLFwiMFwiKTpudWxsPT09KHQ9YS52YWx1ZVswXSl8fHZvaWQgMD09PXR8fHQuc2V0QXR0cmlidXRlKFwidGFiaW5kZXhcIixcIjBcIil9fSh7ZWwkOnJ9LG4pO2NvbnN0IGM9bCgoKCk9Pntjb25zdHtjaGlsZE5vZGVzOmV9PW8udmFsdWU7cmV0dXJuIWV8fDA9PT1lLmxlbmd0aHx8ZS5ldmVyeSgoKHt2aXNpYmxlOmV9KT0+IWUpKX0pKTt5KCgoKT0+ZS5kZWZhdWx0Q2hlY2tlZEtleXMpLChlPT57bi52YWx1ZS5zZXREZWZhdWx0Q2hlY2tlZEtleShlKX0pKSx5KCgoKT0+ZS5kZWZhdWx0RXhwYW5kZWRLZXlzKSwoZT0+e24udmFsdWUuZGVmYXVsdEV4cGFuZGVkS2V5cz1lLG4udmFsdWUuc2V0RGVmYXVsdEV4cGFuZGVkS2V5cyhlKX0pKSx5KCgoKT0+ZS5kYXRhKSwoZT0+e24udmFsdWUuc2V0RGF0YShlKX0pKSx5KCgoKT0+ZS5jaGVja1N0cmljdGx5KSwoZT0+e24udmFsdWUuY2hlY2tTdHJpY3RseT1lfSkpO2NvbnN0IHA9KCk9Pntjb25zdCBlPW4udmFsdWUuZ2V0Q3VycmVudE5vZGUoKTtyZXR1cm4gZT9lLmRhdGE6bnVsbH07cmV0dXJuIHgoXCJSb290VHJlZVwiLHtjdHg6YSxwcm9wczplLHN0b3JlOm4scm9vdDpvLGN1cnJlbnROb2RlOmksaW5zdGFuY2U6digpfSkse3N0b3JlOm4scm9vdDpvLGN1cnJlbnROb2RlOmksZHJhZ1N0YXRlOmQsZWwkOnIsZHJvcEluZGljYXRvciQ6cyxpc0VtcHR5OmMsZmlsdGVyOnQ9PntpZighZS5maWx0ZXJOb2RlTWV0aG9kKXRocm93IG5ldyBFcnJvcihcIltUcmVlXSBmaWx0ZXJOb2RlTWV0aG9kIGlzIHJlcXVpcmVkIHdoZW4gZmlsdGVyXCIpO24udmFsdWUuZmlsdGVyKHQpfSxnZXROb2RlS2V5OnQ9Pm1jKGUubm9kZUtleSx0LmRhdGEpLGdldE5vZGVQYXRoOnQ9PntpZighZS5ub2RlS2V5KXRocm93IG5ldyBFcnJvcihcIltUcmVlXSBub2RlS2V5IGlzIHJlcXVpcmVkIGluIGdldE5vZGVQYXRoXCIpO2NvbnN0IGw9bi52YWx1ZS5nZXROb2RlKHQpO2lmKCFsKXJldHVybltdO2NvbnN0IGE9W2wuZGF0YV07bGV0IGk9bC5wYXJlbnQ7Zm9yKDtpJiZpIT09by52YWx1ZTspYS5wdXNoKGkuZGF0YSksaT1pLnBhcmVudDtyZXR1cm4gYS5yZXZlcnNlKCl9LGdldENoZWNrZWROb2RlczooZSx0KT0+bi52YWx1ZS5nZXRDaGVja2VkTm9kZXMoZSx0KSxnZXRDaGVja2VkS2V5czplPT5uLnZhbHVlLmdldENoZWNrZWRLZXlzKGUpLGdldEN1cnJlbnROb2RlOnAsZ2V0Q3VycmVudEtleTooKT0+e2lmKCFlLm5vZGVLZXkpdGhyb3cgbmV3IEVycm9yKFwiW1RyZWVdIG5vZGVLZXkgaXMgcmVxdWlyZWQgaW4gZ2V0Q3VycmVudEtleVwiKTtjb25zdCB0PXAoKTtyZXR1cm4gdD90W2Uubm9kZUtleV06bnVsbH0sc2V0Q2hlY2tlZE5vZGVzOih0LGwpPT57aWYoIWUubm9kZUtleSl0aHJvdyBuZXcgRXJyb3IoXCJbVHJlZV0gbm9kZUtleSBpcyByZXF1aXJlZCBpbiBzZXRDaGVja2VkTm9kZXNcIik7bi52YWx1ZS5zZXRDaGVja2VkTm9kZXModCxsKX0sc2V0Q2hlY2tlZEtleXM6KHQsbCk9PntpZighZS5ub2RlS2V5KXRocm93IG5ldyBFcnJvcihcIltUcmVlXSBub2RlS2V5IGlzIHJlcXVpcmVkIGluIHNldENoZWNrZWRLZXlzXCIpO24udmFsdWUuc2V0Q2hlY2tlZEtleXModCxsKX0sc2V0Q2hlY2tlZDooZSx0LGwpPT57bi52YWx1ZS5zZXRDaGVja2VkKGUsdCxsKX0sZ2V0SGFsZkNoZWNrZWROb2RlczooKT0+bi52YWx1ZS5nZXRIYWxmQ2hlY2tlZE5vZGVzKCksZ2V0SGFsZkNoZWNrZWRLZXlzOigpPT5uLnZhbHVlLmdldEhhbGZDaGVja2VkS2V5cygpLHNldEN1cnJlbnROb2RlOnQ9PntpZighZS5ub2RlS2V5KXRocm93IG5ldyBFcnJvcihcIltUcmVlXSBub2RlS2V5IGlzIHJlcXVpcmVkIGluIHNldEN1cnJlbnROb2RlXCIpO24udmFsdWUuc2V0VXNlckN1cnJlbnROb2RlKHQpfSxzZXRDdXJyZW50S2V5OnQ9PntpZighZS5ub2RlS2V5KXRocm93IG5ldyBFcnJvcihcIltUcmVlXSBub2RlS2V5IGlzIHJlcXVpcmVkIGluIHNldEN1cnJlbnRLZXlcIik7bi52YWx1ZS5zZXRDdXJyZW50Tm9kZUtleSh0KX0sZ2V0Tm9kZTplPT5uLnZhbHVlLmdldE5vZGUoZSkscmVtb3ZlOmU9PntuLnZhbHVlLnJlbW92ZShlKX0sYXBwZW5kOihlLHQpPT57bi52YWx1ZS5hcHBlbmQoZSx0KX0saW5zZXJ0QmVmb3JlOihlLHQpPT57bi52YWx1ZS5pbnNlcnRCZWZvcmUoZSx0KX0saW5zZXJ0QWZ0ZXI6KGUsdCk9PntuLnZhbHVlLmluc2VydEFmdGVyKGUsdCl9LGhhbmRsZU5vZGVFeHBhbmQ6KGUsdCxsKT0+e3UodCksYS5lbWl0KFwibm9kZS1leHBhbmRcIixlLHQsbCl9LHVwZGF0ZUtleUNoaWxkcmVuOih0LGwpPT57aWYoIWUubm9kZUtleSl0aHJvdyBuZXcgRXJyb3IoXCJbVHJlZV0gbm9kZUtleSBpcyByZXF1aXJlZCBpbiB1cGRhdGVLZXlDaGlsZFwiKTtuLnZhbHVlLnVwZGF0ZUNoaWxkcmVuKHQsbCl9fX19KTtjb25zdCBNYz17a2V5OjAsY2xhc3M6XCJlbC10cmVlX19lbXB0eS1ibG9ja1wifSxUYz17Y2xhc3M6XCJlbC10cmVlX19lbXB0eS10ZXh0XCJ9LE5jPXtyZWY6XCJkcm9wSW5kaWNhdG9yJFwiLGNsYXNzOlwiZWwtdHJlZV9fZHJvcC1pbmRpY2F0b3JcIn07ZnVuY3Rpb24gRGMoZSx0LGwpe2xldCBhO2E9bC5yZXNwb25zZT9cIlwiKyhsLnJlc3BvbnNlLmVycm9yfHxsLnJlc3BvbnNlKTpsLnJlc3BvbnNlVGV4dD9cIlwiK2wucmVzcG9uc2VUZXh0OmBmYWlsIHRvIHBvc3QgJHtlfSAke2wuc3RhdHVzfWA7Y29uc3Qgbj1uZXcgRXJyb3IoYSk7cmV0dXJuIG4uc3RhdHVzPWwuc3RhdHVzLG4ubWV0aG9kPVwicG9zdFwiLG4udXJsPWUsbn1mdW5jdGlvbiBPYyhlKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgWE1MSHR0cFJlcXVlc3QpcmV0dXJuO2NvbnN0IHQ9bmV3IFhNTEh0dHBSZXF1ZXN0LGw9ZS5hY3Rpb247dC51cGxvYWQmJih0LnVwbG9hZC5vbnByb2dyZXNzPWZ1bmN0aW9uKHQpe3QudG90YWw+MCYmKHQucGVyY2VudD10LmxvYWRlZC90LnRvdGFsKjEwMCksZS5vblByb2dyZXNzKHQpfSk7Y29uc3QgYT1uZXcgRm9ybURhdGE7ZS5kYXRhJiZPYmplY3Qua2V5cyhlLmRhdGEpLmZvckVhY2goKHQ9PnthLmFwcGVuZCh0LGUuZGF0YVt0XSl9KSksYS5hcHBlbmQoZS5maWxlbmFtZSxlLmZpbGUsZS5maWxlLm5hbWUpLHQub25lcnJvcj1mdW5jdGlvbigpe2Uub25FcnJvcihEYyhsLDAsdCkpfSx0Lm9ubG9hZD1mdW5jdGlvbigpe2lmKHQuc3RhdHVzPDIwMHx8dC5zdGF0dXM+PTMwMClyZXR1cm4gZS5vbkVycm9yKERjKGwsMCx0KSk7ZS5vblN1Y2Nlc3MoZnVuY3Rpb24oZSl7Y29uc3QgdD1lLnJlc3BvbnNlVGV4dHx8ZS5yZXNwb25zZTtpZighdClyZXR1cm4gdDt0cnl7cmV0dXJuIEpTT04ucGFyc2UodCl9Y2F0Y2goZSl7cmV0dXJuIHR9fSh0KSl9LHQub3BlbihcInBvc3RcIixsLCEwKSxlLndpdGhDcmVkZW50aWFscyYmXCJ3aXRoQ3JlZGVudGlhbHNcImluIHQmJih0LndpdGhDcmVkZW50aWFscz0hMCk7Y29uc3Qgbj1lLmhlYWRlcnN8fHt9O2Zvcihjb25zdCBlIGluIG4pbi5oYXNPd25Qcm9wZXJ0eShlKSYmbnVsbCE9PW5bZV0mJnQuc2V0UmVxdWVzdEhlYWRlcihlLG5bZV0pO3JldHVybiB0LnNlbmQoYSksdH1FYy5yZW5kZXI9ZnVuY3Rpb24oZSx0LGwsbyxpLGQpe2NvbnN0IGM9UChcImVsLXRyZWUtbm9kZVwiKTtyZXR1cm4gYSgpLG4oXCJkaXZcIix7cmVmOlwiZWwkXCIsY2xhc3M6W1wiZWwtdHJlZVwiLHtcImVsLXRyZWUtLWhpZ2hsaWdodC1jdXJyZW50XCI6ZS5oaWdobGlnaHRDdXJyZW50LFwiaXMtZHJhZ2dpbmdcIjohIWUuZHJhZ1N0YXRlLmRyYWdnaW5nTm9kZSxcImlzLWRyb3Atbm90LWFsbG93XCI6IWUuZHJhZ1N0YXRlLmFsbG93RHJvcCxcImlzLWRyb3AtaW5uZXJcIjpcImlubmVyXCI9PT1lLmRyYWdTdGF0ZS5kcm9wVHlwZX1dLHJvbGU6XCJ0cmVlXCJ9LFsoYSghMCksbihFLG51bGwsSChlLnJvb3QuY2hpbGROb2RlcywodD0+KGEoKSxuKGMse2tleTplLmdldE5vZGVLZXkodCksbm9kZTp0LHByb3BzOmUucHJvcHMsXCJyZW5kZXItYWZ0ZXItZXhwYW5kXCI6ZS5yZW5kZXJBZnRlckV4cGFuZCxcInNob3ctY2hlY2tib3hcIjplLnNob3dDaGVja2JveCxcInJlbmRlci1jb250ZW50XCI6ZS5yZW5kZXJDb250ZW50LG9uTm9kZUV4cGFuZDplLmhhbmRsZU5vZGVFeHBhbmR9LG51bGwsOCxbXCJub2RlXCIsXCJwcm9wc1wiLFwicmVuZGVyLWFmdGVyLWV4cGFuZFwiLFwic2hvdy1jaGVja2JveFwiLFwicmVuZGVyLWNvbnRlbnRcIixcIm9uTm9kZUV4cGFuZFwiXSkpKSksMTI4KSksZS5pc0VtcHR5PyhhKCksbihcImRpdlwiLE1jLFtzKFwic3BhblwiLFRjLHAoZS5lbXB0eVRleHQpLDEpXSkpOnUoXCJ2LWlmXCIsITApLHIocyhcImRpdlwiLE5jLG51bGwsNTEyKSxbW2gsZS5kcmFnU3RhdGUuc2hvd0Ryb3BJbmRpY2F0b3JdXSldLDIpfSxFYy5fX2ZpbGU9XCJwYWNrYWdlcy90cmVlL3NyYy90cmVlLnZ1ZVwiLEVjLmluc3RhbGw9ZT0+e2UuY29tcG9uZW50KEVjLm5hbWUsRWMpfTt2YXIgUGM9ZSh7bmFtZTpcIkVsVXBsb2FkTGlzdFwiLGNvbXBvbmVudHM6e0VsUHJvZ3Jlc3M6dnV9LHByb3BzOntmaWxlczp7dHlwZTpBcnJheSxkZWZhdWx0OigpPT5bXX0sZGlzYWJsZWQ6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiExfSxoYW5kbGVQcmV2aWV3Ont0eXBlOkZ1bmN0aW9uLGRlZmF1bHQ6KCk9PlNlfSxsaXN0VHlwZTp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcInRleHRcIn19LGVtaXRzOltcInJlbW92ZVwiXSxzZXR1cDooZSx7ZW1pdDpsfSk9Pih7Zm9jdXNpbmc6dCghMSkscGFyc2VQZXJjZW50YWdlOmU9PnBhcnNlSW50KGUsMTApLGhhbmRsZUNsaWNrOnQ9PntlLmhhbmRsZVByZXZpZXcodCl9LGhhbmRsZVJlbW92ZTooZSx0KT0+e2woXCJyZW1vdmVcIix0KX0sb25GaWxlQ2xpY2tlZDplPT57ZS50YXJnZXQuZm9jdXMoKX0sdDpxbH0pfSk7Y29uc3QgVmM9cyhcImlcIix7Y2xhc3M6XCJlbC1pY29uLWRvY3VtZW50XCJ9LG51bGwsLTEpLEljPXtjbGFzczpcImVsLXVwbG9hZC1saXN0X19pdGVtLXN0YXR1cy1sYWJlbFwifSxBYz17a2V5OjIsY2xhc3M6XCJlbC1pY29uLWNsb3NlLXRpcFwifSxCYz17a2V5OjQsY2xhc3M6XCJlbC11cGxvYWQtbGlzdF9faXRlbS1hY3Rpb25zXCJ9LExjPXMoXCJpXCIse2NsYXNzOlwiZWwtaWNvbi16b29tLWluXCJ9LG51bGwsLTEpLHpjPXMoXCJpXCIse2NsYXNzOlwiZWwtaWNvbi1kZWxldGVcIn0sbnVsbCwtMSk7UGMucmVuZGVyPWZ1bmN0aW9uKGUsdCxsLG8scixoKXtjb25zdCB2PVAoXCJlbC1wcm9ncmVzc1wiKTtyZXR1cm4gYSgpLG4oWix7dGFnOlwidWxcIixjbGFzczpbXCJlbC11cGxvYWQtbGlzdFwiLFwiZWwtdXBsb2FkLWxpc3QtLVwiK2UubGlzdFR5cGUse1wiaXMtZGlzYWJsZWRcIjplLmRpc2FibGVkfV0sbmFtZTpcImVsLWxpc3RcIn0se2RlZmF1bHQ6aSgoKCk9PlsoYSghMCksbihFLG51bGwsSChlLmZpbGVzLCgobCxvKT0+KGEoKSxuKFwibGlcIix7a2V5Om8sY2xhc3M6W1wiZWwtdXBsb2FkLWxpc3RfX2l0ZW1cIixcImlzLVwiK2wuc3RhdHVzLGUuZm9jdXNpbmc/XCJmb2N1c2luZ1wiOlwiXCJdLHRhYmluZGV4OlwiMFwiLG9uS2V5ZG93bjokKCh0PT4hZS5kaXNhYmxlZCYmZS5oYW5kbGVSZW1vdmUodCxsKSksW1wiZGVsZXRlXCJdKSxvbkZvY3VzOnRbMV18fCh0WzFdPXQ9PmUuZm9jdXNpbmc9ITApLG9uQmx1cjp0WzJdfHwodFsyXT10PT5lLmZvY3VzaW5nPSExKSxvbkNsaWNrOnRbM118fCh0WzNdPSguLi50KT0+ZS5vbkZpbGVDbGlja2VkKC4uLnQpKX0sW2QoZS4kc2xvdHMsXCJkZWZhdWx0XCIse2ZpbGU6bH0sKCgpPT5bXCJ1cGxvYWRpbmdcIiE9PWwuc3RhdHVzJiZbXCJwaWN0dXJlLWNhcmRcIixcInBpY3R1cmVcIl0uaW5jbHVkZXMoZS5saXN0VHlwZSk/KGEoKSxuKFwiaW1nXCIse2tleTowLGNsYXNzOlwiZWwtdXBsb2FkLWxpc3RfX2l0ZW0tdGh1bWJuYWlsXCIsc3JjOmwudXJsLGFsdDpcIlwifSxudWxsLDgsW1wic3JjXCJdKSk6dShcInYtaWZcIiwhMCkscyhcImFcIix7Y2xhc3M6XCJlbC11cGxvYWQtbGlzdF9faXRlbS1uYW1lXCIsb25DbGljazp0PT5lLmhhbmRsZUNsaWNrKGwpfSxbVmMsYyhwKGwubmFtZSksMSldLDgsW1wib25DbGlja1wiXSkscyhcImxhYmVsXCIsSWMsW3MoXCJpXCIse2NsYXNzOntcImVsLWljb24tdXBsb2FkLXN1Y2Nlc3NcIjohMCxcImVsLWljb24tY2lyY2xlLWNoZWNrXCI6XCJ0ZXh0XCI9PT1lLmxpc3RUeXBlLFwiZWwtaWNvbi1jaGVja1wiOltcInBpY3R1cmUtY2FyZFwiLFwicGljdHVyZVwiXS5pbmNsdWRlcyhlLmxpc3RUeXBlKX19LG51bGwsMildKSxlLmRpc2FibGVkP3UoXCJ2LWlmXCIsITApOihhKCksbihcImlcIix7a2V5OjEsY2xhc3M6XCJlbC1pY29uLWNsb3NlXCIsb25DbGljazp0PT5lLmhhbmRsZVJlbW92ZSh0LGwpfSxudWxsLDgsW1wib25DbGlja1wiXSkpLHUoXCIgRHVlIHRvIGNsb3NlIGJ0biBvbmx5IGFwcGVhcnMgd2hlbiBsaSBnZXRzIGZvY3VzZWQgZGlzYXBwZWFycyBhZnRlciBsaSBnZXRzIGJsdXJyZWQsIHRodXMga2V5Ym9hcmQgbmF2aWdhdGlvbiBjYW4gbmV2ZXIgcmVhY2ggY2xvc2UgYnRuXCIpLHUoXCIgVGhpcyBpcyBhIGJ1ZyB3aGljaCBuZWVkcyB0byBiZSBmaXhlZCBcIiksdShcIiBUT0RPOiBGaXggdGhlIGluY29ycmVjdCBuYXZpZ2F0aW9uIGludGVyYWN0aW9uIFwiKSxlLmRpc2FibGVkP3UoXCJ2LWlmXCIsITApOihhKCksbihcImlcIixBYyxwKGUudChcImVsLnVwbG9hZC5kZWxldGVUaXBcIikpLDEpKSxcInVwbG9hZGluZ1wiPT09bC5zdGF0dXM/KGEoKSxuKHYse2tleTozLHR5cGU6XCJwaWN0dXJlLWNhcmRcIj09PWUubGlzdFR5cGU/XCJjaXJjbGVcIjpcImxpbmVcIixcInN0cm9rZS13aWR0aFwiOlwicGljdHVyZS1jYXJkXCI9PT1lLmxpc3RUeXBlPzY6MixwZXJjZW50YWdlOmUucGFyc2VQZXJjZW50YWdlKGwucGVyY2VudGFnZSl9LG51bGwsOCxbXCJ0eXBlXCIsXCJzdHJva2Utd2lkdGhcIixcInBlcmNlbnRhZ2VcIl0pKTp1KFwidi1pZlwiLCEwKSxcInBpY3R1cmUtY2FyZFwiPT09ZS5saXN0VHlwZT8oYSgpLG4oXCJzcGFuXCIsQmMsW3MoXCJzcGFuXCIse2NsYXNzOlwiZWwtdXBsb2FkLWxpc3RfX2l0ZW0tcHJldmlld1wiLG9uQ2xpY2s6dD0+ZS5oYW5kbGVQcmV2aWV3KGwpfSxbTGNdLDgsW1wib25DbGlja1wiXSksZS5kaXNhYmxlZD91KFwidi1pZlwiLCEwKTooYSgpLG4oXCJzcGFuXCIse2tleTowLGNsYXNzOlwiZWwtdXBsb2FkLWxpc3RfX2l0ZW0tZGVsZXRlXCIsb25DbGljazp0PT5lLmhhbmRsZVJlbW92ZSh0LGwpfSxbemNdLDgsW1wib25DbGlja1wiXSkpXSkpOnUoXCJ2LWlmXCIsITApXSkpXSw0MixbXCJvbktleWRvd25cIl0pKSkpLDEyOCkpXSkpLF86MX0sOCxbXCJjbGFzc1wiXSl9LFBjLl9fZmlsZT1cInBhY2thZ2VzL3VwbG9hZC9zcmMvdXBsb2FkLWxpc3QudnVlXCI7dmFyIEZjPWUoe25hbWU6XCJFbFVwbG9hZERyYWdcIixwcm9wczp7ZGlzYWJsZWQ6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiExfX0sZW1pdHM6W1wiZmlsZVwiXSxzZXR1cChlLHtlbWl0Omx9KXtjb25zdCBhPXcoXCJ1cGxvYWRlclwiLHt9KSxuPXQoITEpO3JldHVybntkcmFnb3ZlcjpuLG9uRHJvcDpmdW5jdGlvbih0KXtpZihlLmRpc2FibGVkfHwhYSlyZXR1cm47Y29uc3Qgbz1hLmFjY2VwdDtuLnZhbHVlPSExLGwoXCJmaWxlXCIsbz9BcnJheS5mcm9tKHQuZGF0YVRyYW5zZmVyLmZpbGVzKS5maWx0ZXIoKGU9Pntjb25zdHt0eXBlOnQsbmFtZTpsfT1lLGE9bC5pbmRleE9mKFwiLlwiKT4tMT9cIi5cIitsLnNwbGl0KFwiLlwiKS5wb3AoKTpcIlwiLG49dC5yZXBsYWNlKC9cXC8uKiQvLFwiXCIpO3JldHVybiBvLnNwbGl0KFwiLFwiKS5tYXAoKGU9PmUudHJpbSgpKSkuZmlsdGVyKChlPT5lKSkuc29tZSgoZT0+ZS5zdGFydHNXaXRoKFwiLlwiKT9hPT09ZTovXFwvXFwqJC8udGVzdChlKT9uPT09ZS5yZXBsYWNlKC9cXC9cXCokLyxcIlwiKTohIS9eW15cXC9dK1xcL1teXFwvXSskLy50ZXN0KGUpJiZ0PT09ZSkpfSkpOnQuZGF0YVRyYW5zZmVyLmZpbGVzKX0sb25EcmFnb3ZlcjpmdW5jdGlvbigpe2UuZGlzYWJsZWR8fChuLnZhbHVlPSEwKX19fX0pO0ZjLnJlbmRlcj1mdW5jdGlvbihlLHQsbCxvLGkscil7cmV0dXJuIGEoKSxuKFwiZGl2XCIse2NsYXNzOntcImVsLXVwbG9hZC1kcmFnZ2VyXCI6ITAsXCJpcy1kcmFnb3ZlclwiOmUuZHJhZ292ZXJ9LG9uRHJvcDp0WzFdfHwodFsxXT1UKCgoLi4udCk9PmUub25Ecm9wKC4uLnQpKSxbXCJwcmV2ZW50XCJdKSksb25EcmFnb3Zlcjp0WzJdfHwodFsyXT1UKCgoLi4udCk9PmUub25EcmFnb3ZlciguLi50KSksW1wicHJldmVudFwiXSkpLG9uRHJhZ2xlYXZlOnRbM118fCh0WzNdPVQoKHQ9PmUuZHJhZ292ZXI9ITEpLFtcInByZXZlbnRcIl0pKX0sW2QoZS4kc2xvdHMsXCJkZWZhdWx0XCIpXSwzNCl9LEZjLl9fZmlsZT1cInBhY2thZ2VzL3VwbG9hZC9zcmMvdXBsb2FkLWRyYWdnZXIudnVlXCI7dmFyICRjPWUoe2NvbXBvbmVudHM6e1VwbG9hZERyYWdnZXI6RmN9LHByb3BzOnt0eXBlOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiXCJ9LGFjdGlvbjp7dHlwZTpTdHJpbmcscmVxdWlyZWQ6ITB9LG5hbWU6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJmaWxlXCJ9LGRhdGE6e3R5cGU6T2JqZWN0LGRlZmF1bHQ6KCk9Pm51bGx9LGhlYWRlcnM6e3R5cGU6T2JqZWN0LGRlZmF1bHQ6KCk9Pm51bGx9LHdpdGhDcmVkZW50aWFsczp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITF9LG11bHRpcGxlOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDpudWxsfSxhY2NlcHQ6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJcIn0sb25TdGFydDp7dHlwZTpGdW5jdGlvbixkZWZhdWx0OlNlfSxvblByb2dyZXNzOnt0eXBlOkZ1bmN0aW9uLGRlZmF1bHQ6U2V9LG9uU3VjY2Vzczp7dHlwZTpGdW5jdGlvbixkZWZhdWx0OlNlfSxvbkVycm9yOnt0eXBlOkZ1bmN0aW9uLGRlZmF1bHQ6U2V9LGJlZm9yZVVwbG9hZDp7dHlwZTpGdW5jdGlvbixkZWZhdWx0OlNlfSxkcmFnOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMX0sb25QcmV2aWV3Ont0eXBlOkZ1bmN0aW9uLGRlZmF1bHQ6U2V9LG9uUmVtb3ZlOnt0eXBlOkZ1bmN0aW9uLGRlZmF1bHQ6U2V9LGZpbGVMaXN0Ont0eXBlOkFycmF5LGRlZmF1bHQ6KCk9PltdfSxhdXRvVXBsb2FkOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMH0sbGlzdFR5cGU6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJ0ZXh0XCJ9LGh0dHBSZXF1ZXN0Ont0eXBlOkZ1bmN0aW9uLGRlZmF1bHQ6KCk9Pk9jfSxkaXNhYmxlZDpCb29sZWFuLGxpbWl0Ont0eXBlOk51bWJlcixkZWZhdWx0Om51bGx9LG9uRXhjZWVkOnt0eXBlOkZ1bmN0aW9uLGRlZmF1bHQ6U2V9fSxzZXR1cChlKXtjb25zdCBsPXQoe30pLGE9dCghMSksbj10KG51bGwpO2Z1bmN0aW9uIG8odCl7aWYoZS5saW1pdCYmZS5maWxlTGlzdC5sZW5ndGgrdC5sZW5ndGg+ZS5saW1pdClyZXR1cm4gdm9pZCBlLm9uRXhjZWVkKHQsZS5maWxlTGlzdCk7bGV0IGw9QXJyYXkuZnJvbSh0KTtlLm11bHRpcGxlfHwobD1sLnNsaWNlKDAsMSkpLDAhPT1sLmxlbmd0aCYmbC5mb3JFYWNoKCh0PT57ZS5vblN0YXJ0KHQpLGUuYXV0b1VwbG9hZCYmaSh0KX0pKX1mdW5jdGlvbiBpKHQpe2lmKG4udmFsdWUudmFsdWU9bnVsbCwhZS5iZWZvcmVVcGxvYWQpcmV0dXJuIHIodCk7Y29uc3QgbD1lLmJlZm9yZVVwbG9hZCh0KTtsIGluc3RhbmNlb2YgUHJvbWlzZT9sLnRoZW4oKGU9Pntjb25zdCBsPU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKTtpZihcIltvYmplY3QgRmlsZV1cIj09PWx8fFwiW29iamVjdCBCbG9iXVwiPT09bCl7XCJbb2JqZWN0IEJsb2JdXCI9PT1sJiYoZT1uZXcgRmlsZShbZV0sdC5uYW1lLHt0eXBlOnQudHlwZX0pKTtmb3IoY29uc3QgbCBpbiB0KXQuaGFzT3duUHJvcGVydHkobCkmJihlW2xdPXRbbF0pO3IoZSl9ZWxzZSByKHQpfSkpLmNhdGNoKCgoKT0+e2Uub25SZW1vdmUobnVsbCx0KX0pKTohMSE9PWw/cih0KTplLm9uUmVtb3ZlKG51bGwsdCl9ZnVuY3Rpb24gcih0KXtjb25zdHt1aWQ6YX09dCxuPXtoZWFkZXJzOmUuaGVhZGVycyx3aXRoQ3JlZGVudGlhbHM6ZS53aXRoQ3JlZGVudGlhbHMsZmlsZTp0LGRhdGE6ZS5kYXRhLGZpbGVuYW1lOmUubmFtZSxhY3Rpb246ZS5hY3Rpb24sb25Qcm9ncmVzczpsPT57ZS5vblByb2dyZXNzKGwsdCl9LG9uU3VjY2VzczpuPT57ZS5vblN1Y2Nlc3Mobix0KSxkZWxldGUgbC52YWx1ZVthXX0sb25FcnJvcjpuPT57ZS5vbkVycm9yKG4sdCksZGVsZXRlIGwudmFsdWVbYV19fSxvPWUuaHR0cFJlcXVlc3Qobik7bC52YWx1ZVthXT1vLG8gaW5zdGFuY2VvZiBQcm9taXNlJiZvLnRoZW4obi5vblN1Y2Nlc3Msbi5vbkVycm9yKX1mdW5jdGlvbiBzKCl7ZS5kaXNhYmxlZHx8KG4udmFsdWUudmFsdWU9bnVsbCxuLnZhbHVlLmNsaWNrKCkpfXJldHVybntyZXFzOmwsbW91c2VvdmVyOmEsaW5wdXRSZWY6bixhYm9ydDpmdW5jdGlvbihlKXtjb25zdCB0PWwudmFsdWU7aWYoZSl7bGV0IGw9ZTtlLnVpZCYmKGw9ZS51aWQpLHRbbF0mJnRbbF0uYWJvcnQoKX1lbHNlIE9iamVjdC5rZXlzKHQpLmZvckVhY2goKGU9Pnt0W2VdJiZ0W2VdLmFib3J0KCksZGVsZXRlIHRbZV19KSl9LHBvc3Q6cixoYW5kbGVDaGFuZ2U6ZnVuY3Rpb24oZSl7Y29uc3QgdD1lLnRhcmdldC5maWxlczt0JiZvKHQpfSxoYW5kbGVDbGljazpzLGhhbmRsZUtleWRvd246ZnVuY3Rpb24oKXtzKCl9LHVwbG9hZDppLHVwbG9hZEZpbGVzOm99fX0pO2Z1bmN0aW9uIFJjKGUsdCl7cmV0dXJuIHQuZmluZCgodD0+dC51aWQ9PT1lLnVpZCkpfWZ1bmN0aW9uIEhjKGUpe3JldHVybiBEYXRlLm5vdygpK2V9JGMucmVuZGVyPWZ1bmN0aW9uKGUsdCxsLG8scix1KXtjb25zdCBjPVAoXCJ1cGxvYWQtZHJhZ2dlclwiKTtyZXR1cm4gYSgpLG4oXCJkaXZcIix7Y2xhc3M6W1wiZWwtdXBsb2FkXCIsXCJlbC11cGxvYWQtLVwiK2UubGlzdFR5cGVdLHRhYmluZGV4OlwiMFwiLG9uQ2xpY2s6dFsyXXx8KHRbMl09KC4uLnQpPT5lLmhhbmRsZUNsaWNrKC4uLnQpKSxvbktleWRvd246dFszXXx8KHRbM109JChUKCgoLi4udCk9PmUuaGFuZGxlS2V5ZG93biguLi50KSksW1wic2VsZlwiXSksW1wiZW50ZXJcIixcInNwYWNlXCJdKSl9LFtlLmRyYWc/KGEoKSxuKGMse2tleTowLGRpc2FibGVkOmUuZGlzYWJsZWQsb25GaWxlOmUudXBsb2FkRmlsZXN9LHtkZWZhdWx0OmkoKCgpPT5bZChlLiRzbG90cyxcImRlZmF1bHRcIildKSksXzozfSw4LFtcImRpc2FibGVkXCIsXCJvbkZpbGVcIl0pKTpkKGUuJHNsb3RzLFwiZGVmYXVsdFwiLHtrZXk6MX0pLHMoXCJpbnB1dFwiLHtyZWY6XCJpbnB1dFJlZlwiLGNsYXNzOlwiZWwtdXBsb2FkX19pbnB1dFwiLHR5cGU6XCJmaWxlXCIsbmFtZTplLm5hbWUsbXVsdGlwbGU6ZS5tdWx0aXBsZSxhY2NlcHQ6ZS5hY2NlcHQsb25DaGFuZ2U6dFsxXXx8KHRbMV09KC4uLnQpPT5lLmhhbmRsZUNoYW5nZSguLi50KSl9LG51bGwsNDAsW1wibmFtZVwiLFwibXVsdGlwbGVcIixcImFjY2VwdFwiXSldLDM0KX0sJGMuX19maWxlPVwicGFja2FnZXMvdXBsb2FkL3NyYy91cGxvYWQudnVlXCI7dmFyIFdjPWU9Pntjb25zdCBsPXQoW10pLGE9dChudWxsKTtsZXQgbj0xO3JldHVybiB5KCgoKT0+ZS5saXN0VHlwZSksKHQ9PntcInBpY3R1cmUtY2FyZFwiIT09dCYmXCJwaWN0dXJlXCIhPT10fHwobC52YWx1ZT1sLnZhbHVlLm1hcCgodD0+e2lmKCF0LnVybCYmdC5yYXcpdHJ5e3QudXJsPVVSTC5jcmVhdGVPYmplY3RVUkwodC5yYXcpfWNhdGNoKGEpe2Uub25FcnJvcihhLHQsbC52YWx1ZSl9cmV0dXJuIHR9KSkpfSkpLHkoKCgpPT5lLmZpbGVMaXN0KSwoZT0+e2wudmFsdWU9ZS5tYXAoKGU9PihlLnVpZD1lLnVpZHx8SGMobisrKSxlLnN0YXR1cz1lLnN0YXR1c3x8XCJzdWNjZXNzXCIsZSkpKX0pLHtpbW1lZGlhdGU6ITAsZGVlcDohMH0pLHtjbGVhckZpbGVzOmZ1bmN0aW9uKCl7bC52YWx1ZT1bXX0saGFuZGxlRXJyb3I6ZnVuY3Rpb24odCxhKXtjb25zdCBuPVJjKGEsbC52YWx1ZSk7bi5zdGF0dXM9XCJmYWlsXCIsbC52YWx1ZS5zcGxpY2UobC52YWx1ZS5pbmRleE9mKG4pLDEpLGUub25FcnJvcih0LG4sbC52YWx1ZSksZS5vbkNoYW5nZShuLGwudmFsdWUpfSxoYW5kbGVQcm9ncmVzczpmdW5jdGlvbih0LGEpe2NvbnN0IG49UmMoYSxsLnZhbHVlKTtlLm9uUHJvZ3Jlc3ModCxuLGwudmFsdWUpLG4uc3RhdHVzPVwidXBsb2FkaW5nXCIsbi5wZXJjZW50YWdlPXQucGVyY2VudHx8MH0saGFuZGxlU3RhcnQ6ZnVuY3Rpb24odCl7Y29uc3QgYT1IYyhuKyspO3QudWlkPWE7Y29uc3Qgbz17bmFtZTp0Lm5hbWUscGVyY2VudGFnZTowLHN0YXR1czpcInJlYWR5XCIsc2l6ZTp0LnNpemUscmF3OnQsdWlkOmF9O2lmKFwicGljdHVyZS1jYXJkXCI9PT1lLmxpc3RUeXBlfHxcInBpY3R1cmVcIj09PWUubGlzdFR5cGUpdHJ5e28udXJsPVVSTC5jcmVhdGVPYmplY3RVUkwodCl9Y2F0Y2godCl7Y29uc29sZS5lcnJvcihcIltFbGVtZW50IEVycm9yXVtVcGxvYWRdXCIsdCksZS5vbkVycm9yKHQsbyxsLnZhbHVlKX1sLnZhbHVlLnB1c2gobyksZS5vbkNoYW5nZShvLGwudmFsdWUpfSxoYW5kbGVTdWNjZXNzOmZ1bmN0aW9uKHQsYSl7Y29uc3Qgbj1SYyhhLGwudmFsdWUpO24mJihuLnN0YXR1cz1cInN1Y2Nlc3NcIixuLnJlc3BvbnNlPXQsZS5vblN1Y2Nlc3ModCxuLGwudmFsdWUpLGUub25DaGFuZ2UobixsLnZhbHVlKSl9LGhhbmRsZVJlbW92ZTpmdW5jdGlvbih0LG4pe24mJih0PVJjKG4sbC52YWx1ZSkpO2NvbnN0IG89KCk9PnshZnVuY3Rpb24oZSl7YS52YWx1ZS5hYm9ydChlKX0odCk7Y29uc3Qgbj1sLnZhbHVlO24uc3BsaWNlKG4uaW5kZXhPZih0KSwxKSxlLm9uUmVtb3ZlKHQsbil9O2lmKGUuYmVmb3JlUmVtb3ZlKXtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBlLmJlZm9yZVJlbW92ZSl7Y29uc3QgYT1lLmJlZm9yZVJlbW92ZSh0LGwudmFsdWUpO2EgaW5zdGFuY2VvZiBQcm9taXNlP2EudGhlbigoKCk9PntvKCl9KSkuY2F0Y2goU2UpOiExIT09YSYmbygpfX1lbHNlIG8oKX0sc3VibWl0OmZ1bmN0aW9uKCl7bC52YWx1ZS5maWx0ZXIoKGU9PlwicmVhZHlcIj09PWUuc3RhdHVzKSkuZm9yRWFjaCgoZT0+e2EudmFsdWUudXBsb2FkKGUucmF3KX0pKX0sdXBsb2FkRmlsZXM6bCx1cGxvYWRSZWY6YX19LGpjPWUoe25hbWU6XCJFbFVwbG9hZFwiLGNvbXBvbmVudHM6e1VwbG9hZDokYyxVcGxvYWRMaXN0OlBjfSxwcm9wczp7YWN0aW9uOnt0eXBlOlN0cmluZyxyZXF1aXJlZDohMH0saGVhZGVyczp7dHlwZTpPYmplY3QsZGVmYXVsdDooKT0+KHt9KX0sZGF0YTp7dHlwZTpPYmplY3QsZGVmYXVsdDooKT0+KHt9KX0sbXVsdGlwbGU6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiExfSxuYW1lOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiZmlsZVwifSxkcmFnOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMX0sd2l0aENyZWRlbnRpYWxzOkJvb2xlYW4sc2hvd0ZpbGVMaXN0Ont0eXBlOkJvb2xlYW4sZGVmYXVsdDohMH0sYWNjZXB0Ont0eXBlOlN0cmluZyxkZWZhdWx0OlwiXCJ9LHR5cGU6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJzZWxlY3RcIn0sYmVmb3JlVXBsb2FkOnt0eXBlOkZ1bmN0aW9uLGRlZmF1bHQ6U2V9LGJlZm9yZVJlbW92ZTp7dHlwZTpGdW5jdGlvbixkZWZhdWx0OlNlfSxvblJlbW92ZTp7dHlwZTpGdW5jdGlvbixkZWZhdWx0OlNlfSxvbkNoYW5nZTp7dHlwZTpGdW5jdGlvbixkZWZhdWx0OlNlfSxvblByZXZpZXc6e3R5cGU6RnVuY3Rpb24sZGVmYXVsdDpTZX0sb25TdWNjZXNzOnt0eXBlOkZ1bmN0aW9uLGRlZmF1bHQ6U2V9LG9uUHJvZ3Jlc3M6e3R5cGU6RnVuY3Rpb24sZGVmYXVsdDpTZX0sb25FcnJvcjp7dHlwZTpGdW5jdGlvbixkZWZhdWx0OlNlfSxmaWxlTGlzdDp7dHlwZTpBcnJheSxkZWZhdWx0OigpPT5bXX0sYXV0b1VwbG9hZDp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITB9LGxpc3RUeXBlOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwidGV4dFwifSxodHRwUmVxdWVzdDp7dHlwZTpGdW5jdGlvbixkZWZhdWx0Ok9jfSxkaXNhYmxlZDpCb29sZWFuLGxpbWl0Ont0eXBlOk51bWJlcixkZWZhdWx0Om51bGx9LG9uRXhjZWVkOnt0eXBlOkZ1bmN0aW9uLGRlZmF1bHQ6KCk9PlNlfX0sc2V0dXAoZSl7Y29uc3QgYT13KFwiZWxGb3JtXCIse30pLG49bCgoKCk9PmUuZGlzYWJsZWR8fGEuZGlzYWJsZWQpKSx7Y2xlYXJGaWxlczpvLGhhbmRsZUVycm9yOmksaGFuZGxlUHJvZ3Jlc3M6cixoYW5kbGVTdGFydDpzLGhhbmRsZVN1Y2Nlc3M6dSxoYW5kbGVSZW1vdmU6ZCxzdWJtaXQ6Yyx1cGxvYWRSZWY6cCx1cGxvYWRGaWxlczpofT1XYyhlKTtyZXR1cm4geChcInVwbG9hZGVyXCIsdigpKSxPKCgoKT0+e2gudmFsdWUuZm9yRWFjaCgoZT0+e2UudXJsJiYwPT09ZS51cmwuaW5kZXhPZihcImJsb2I6XCIpJiZVUkwucmV2b2tlT2JqZWN0VVJMKGUudXJsKX0pKX0pKSx7ZHJhZ092ZXI6dCghMSksZHJhZ2luZzp0KCExKSxoYW5kbGVFcnJvcjppLGhhbmRsZVByb2dyZXNzOnIsaGFuZGxlUmVtb3ZlOmQsaGFuZGxlU3RhcnQ6cyxoYW5kbGVTdWNjZXNzOnUsdXBsb2FkRGlzYWJsZWQ6bix1cGxvYWRGaWxlczpoLHVwbG9hZFJlZjpwLHN1Ym1pdDpjLGNsZWFyRmlsZXM6b319LHJlbmRlcigpe3ZhciBlLHQ7bGV0IGw7bD10aGlzLnNob3dGaWxlTGlzdD9EKFBjLHtkaXNhYmxlZDp0aGlzLnVwbG9hZERpc2FibGVkLGxpc3RUeXBlOnRoaXMubGlzdFR5cGUsZmlsZXM6dGhpcy51cGxvYWRGaWxlcyxvblJlbW92ZTp0aGlzLmhhbmRsZVJlbW92ZSxoYW5kbGVQcmV2aWV3OnRoaXMub25QcmV2aWV3fSx0aGlzLiRzbG90cy5maWxlP3tkZWZhdWx0OmU9PnRoaXMuJHNsb3RzLmZpbGUoe2ZpbGU6ZS5maWxlfSl9Om51bGwpOm51bGw7Y29uc3QgYT17dHlwZTp0aGlzLnR5cGUsZHJhZzp0aGlzLmRyYWcsYWN0aW9uOnRoaXMuYWN0aW9uLG11bHRpcGxlOnRoaXMubXVsdGlwbGUsXCJiZWZvcmUtdXBsb2FkXCI6dGhpcy5iZWZvcmVVcGxvYWQsXCJ3aXRoLWNyZWRlbnRpYWxzXCI6dGhpcy53aXRoQ3JlZGVudGlhbHMsaGVhZGVyczp0aGlzLmhlYWRlcnMsbmFtZTp0aGlzLm5hbWUsZGF0YTp0aGlzLmRhdGEsYWNjZXB0OnRoaXMuYWNjZXB0LGZpbGVMaXN0OnRoaXMudXBsb2FkRmlsZXMsYXV0b1VwbG9hZDp0aGlzLmF1dG9VcGxvYWQsbGlzdFR5cGU6dGhpcy5saXN0VHlwZSxkaXNhYmxlZDp0aGlzLnVwbG9hZERpc2FibGVkLGxpbWl0OnRoaXMubGltaXQsXCJvbi1leGNlZWRcIjp0aGlzLm9uRXhjZWVkLFwib24tc3RhcnRcIjp0aGlzLmhhbmRsZVN0YXJ0LFwib24tcHJvZ3Jlc3NcIjp0aGlzLmhhbmRsZVByb2dyZXNzLFwib24tc3VjY2Vzc1wiOnRoaXMuaGFuZGxlU3VjY2VzcyxcIm9uLWVycm9yXCI6dGhpcy5oYW5kbGVFcnJvcixcIm9uLXByZXZpZXdcIjp0aGlzLm9uUHJldmlldyxcIm9uLXJlbW92ZVwiOnRoaXMuaGFuZGxlUmVtb3ZlLFwiaHR0cC1yZXF1ZXN0XCI6dGhpcy5odHRwUmVxdWVzdCxyZWY6XCJ1cGxvYWRSZWZcIn0sbj10aGlzLiRzbG90cy50cmlnZ2VyfHx0aGlzLiRzbG90cy5kZWZhdWx0LG89RCgkYyxhLHtkZWZhdWx0OigpPT5udWxsPT1uP3ZvaWQgMDpuKCl9KTtyZXR1cm4gRChcImRpdlwiLFtcInBpY3R1cmUtY2FyZFwiPT09dGhpcy5saXN0VHlwZT9sOm51bGwsdGhpcy4kc2xvdHMudHJpZ2dlcj9bbyx0aGlzLiRzbG90cy5kZWZhdWx0KCldOm8sbnVsbD09PSh0PShlPXRoaXMuJHNsb3RzKS50aXApfHx2b2lkIDA9PT10P3ZvaWQgMDp0LmNhbGwoZSksXCJwaWN0dXJlLWNhcmRcIiE9PXRoaXMubGlzdFR5cGU/bDpudWxsXSl9fSk7amMuX19maWxlPVwicGFja2FnZXMvdXBsb2FkL3NyYy9pbmRleC52dWVcIixqYy5pbnN0YWxsPWU9PntlLmNvbXBvbmVudChqYy5uYW1lLGpjKX07dmFyIEtjPWUoe25hbWU6XCJFbFZpcnR1YWxMaXN0SXRlbVwiLHByb3BzOnt9LHNldHVwKCl7Y29uc3QgZT10KCk7cmV0dXJuIF8oKCgpPT57fSkpLFMoKCgpPT57fSkpLHtpdGVtUmVmOmV9fX0pO2NvbnN0IFljPXRlKFwiZGF0YS12LTA5ZDFlZGRiXCIpO0ooXCJkYXRhLXYtMDlkMWVkZGJcIik7Y29uc3QgcWM9e3JlZjpcIml0ZW1SZWZcIixjbGFzczpcImVsLXZsX19pdGVtXCJ9O2VlKCk7Y29uc3QgVWM9WWMoKChlLHQsbCxvLGkscik9PihhKCksbihcImRpdlwiLHFjLFtkKGUuJHNsb3RzLFwiZGVmYXVsdFwiKV0sNTEyKSkpKTtLYy5yZW5kZXI9VWMsS2MuX19zY29wZUlkPVwiZGF0YS12LTA5ZDFlZGRiXCIsS2MuX19maWxlPVwicGFja2FnZXMvdmlydHVhbC1saXN0L3NyYy92aXJ0dWFsLWl0ZW0udnVlXCI7dmFyIEdjPWUoe25hbWU6XCJFbFZpcnR1YWxMaXN0XCIsY29tcG9uZW50czp7W0tjLm5hbWVdOktjfSxwcm9wczp7ZGlyZWN0aW9uOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwidlwifSxkYXRhOnt0eXBlOkFycmF5LHJlcXVpcmVkOiEwfSxpdGVtU2l6ZTp7dHlwZTpOdW1iZXIscmVxdWlyZWQ6ITB9LHdpbmRvd1NpemU6e3R5cGU6TnVtYmVyLHJlcXVpcmVkOiEwfSxwb29sU2l6ZTp7dHlwZTpOdW1iZXIsZGVmYXVsdDoyMH19LHNldHVwOmU9PmZ1bmN0aW9uKGUpe2NvbnN0IGE9dCgpLG49dCgwKSxvPXQoMCksaT10KCEwKSxyPXQoXCJcIikscz10KFwiXCIpLHU9dCgpLGQ9dChcIlwiKTt5KCgoKT0+ZS5kaXJlY3Rpb24pLChlPT57Y29uc3QgdD1cInZcIj09PWU7aS52YWx1ZT10LHIudmFsdWU9XCJjbGllbnRcIisodD9cIkhlaWdodFwiOlwiV2lkdGhcIikscy52YWx1ZT1cInNjcm9sbFwiKyh0P1wiVG9wXCI6XCJMZWZ0XCIpLHUudmFsdWU9dD9cIllcIjpcIlhcIixkLnZhbHVlPXQ/XCJoZWlnaHRcIjpcIndpZHRoXCJ9KSx7aW1tZWRpYXRlOiEwfSkseSgoKCk9PmUucG9vbFNpemUpLChlPT57by52YWx1ZT1NYXRoLmZsb29yKGUvMyl9KSx7aW1tZWRpYXRlOiEwfSk7Y29uc3QgYz1sKCgoKT0+ZS5wb29sU2l6ZSsyKlplKG8pKSkscD1sKCgoKT0+TWF0aC5tYXgoMCxNYXRoLmZsb29yKFplKG4pL2UuaXRlbVNpemUpLVplKG8pKSkpLGg9bCgoKCk9Pih7W1plKGQpXTplLndpbmRvd1NpemUrXCJweFwifSkpKSx2PWwoKCgpPT4oe1taZShkKV06ZS5kYXRhLmxlbmd0aCplLml0ZW1TaXplK1wicHhcIn0pKSksbT1sKCgoKT0+e2NvbnN0IHQ9WmUocCkqZS5pdGVtU2l6ZTtyZXR1cm57dHJhbnNmb3JtOmB0cmFuc2xhdGUke1plKHUpfSgke3R9cHgpYH19KSksZj1sKCgoKT0+KHtbWmUoZCldOmUuaXRlbVNpemUrXCJweFwifSkpKTtsZXQgZz1udWxsO2NvbnN0IGI9bCgoKCk9Pntjb25zdCB0PVplKHApLGw9TWF0aC5taW4oZS5kYXRhLmxlbmd0aC10LFplKGMpKTtyZXR1cm4gZS5kYXRhLnNsaWNlKHQsdCtsKX0pKTtyZXR1cm57dmlld3BvcnRSZWY6YSxjb250ZW50U3R5bGU6dixpdGVtQ29udGFpbmVyU3R5bGU6bSxpdGVtU3R5bGU6Zix2aWV3cG9ydFN0eWxlOmgsc3RhcnROb2RlOnAscmVuZGVyaW5nSXRlbXM6Yyx3aW5kb3c6YixvblNjcm9sbDplPT57ZyYmY2FuY2VsQW5pbWF0aW9uRnJhbWUoZyksZz1yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCgpPT57bi52YWx1ZT1lLnRhcmdldFtaZShzKV19KSl9LHNjcm9sbFRvOih0LGw9XCJoZWFkXCIpPT57aWYoemUpcmV0dXJuO2xldCBvO3N3aXRjaCgodDwwfHx0PmUuZGF0YS5sZW5ndGgpJiZtdChcIkVsVmlydHVhbExpc3RdXCIsXCJPdXQgb2YgbGlzdCByYW5nZVwiKSxsKXtjYXNlXCJoZWFkXCI6bz10KmUuaXRlbVNpemU7YnJlYWs7Y2FzZVwiY2VudGVyXCI6bz0odC1NYXRoLmZsb29yKE1hdGguZmxvb3IoZS53aW5kb3dTaXplL2UuaXRlbVNpemUpLzIpKSplLml0ZW1TaXplO2JyZWFrO2Nhc2VcInRhaWxcIjpvPSh0LU1hdGguZmxvb3IoZS53aW5kb3dTaXplL2UuaXRlbVNpemUpKzEpKmUuaXRlbVNpemU7YnJlYWs7ZGVmYXVsdDptdChcIltFbFZpcnR1YWxMaXN0XVwiLFwiVW5zdXBwb3J0ZWQgYWxpZ25tZW50XCIpfXJlcXVlc3RBbmltYXRpb25GcmFtZSgoKCk9PntuLnZhbHVlPW8sYS52YWx1ZVtaZShzKV09b30pKX19fShlKX0pO0djLnJlbmRlcj1mdW5jdGlvbihlLHQsbCxvLHIsdSl7Y29uc3QgYz1QKFwiZWwtdmlydHVhbC1saXN0LWl0ZW1cIik7cmV0dXJuIGEoKSxuKFwiZGl2XCIse3JlZjpcInZpZXdwb3J0UmVmXCIsY2xhc3M6XCJlbC12bF9fdmlld3BvcnRcIixzdHlsZTplLnZpZXdwb3J0U3R5bGUsb25TY3JvbGxQYXNzaXZlOnRbMV18fCh0WzFdPSguLi50KT0+ZS5vblNjcm9sbCguLi50KSl9LFtzKFwiZGl2XCIse2NsYXNzOlwiZWwtdmxfX2NvbnRlbnRcIixzdHlsZTplLmNvbnRlbnRTdHlsZX0sW3MoXCJkaXZcIix7Y2xhc3M6XCJlbC12bF9faXRlbS1jb250YWluZXJcIixzdHlsZTplLml0ZW1Db250YWluZXJTdHlsZSxcImRhdGEtZGlyZWN0aW9uXCI6ZS5kaXJlY3Rpb259LFsoYSghMCksbihFLG51bGwsSChlLndpbmRvdywoKHQsbCk9PihhKCksbihjLHtrZXk6bCxjbGFzczpcImVsLXZsX19pdGVtXCIsc3R5bGU6ZS5pdGVtU3R5bGV9LHtkZWZhdWx0OmkoKCgpPT5bZChlLiRzbG90cyxcImRlZmF1bHRcIix7aXRlbTp0fSldKSksXzoyfSwxMDMyLFtcInN0eWxlXCJdKSkpKSwxMjgpKV0sMTIsW1wiZGF0YS1kaXJlY3Rpb25cIl0pXSw0KV0sMzYpfSxHYy5fX2ZpbGU9XCJwYWNrYWdlcy92aXJ0dWFsLWxpc3Qvc3JjL2luZGV4LnZ1ZVwiLEdjLmluc3RhbGw9ZT0+e2UuY29tcG9uZW50KEdjLm5hbWUsR2MpfTtjb25zdCBYYz1cIjEuMC4xLWJldGEuOVwiLFFjPWU9PntLbD1lfHxLbCxLbC5uYW1lJiZzZS5sb2NhbGUoS2wubmFtZSl9LFpjPXtzaXplOlwiXCIsekluZGV4OjJlM30sSmM9W0NlLF9lLEVsLE5sLE9sLFZsLEFsLExsLCRsLFdsLE1hLElhLEJhLFJhLHduLHluLEthLE1uLFRuLERuLE9uLEluLFZuLG5vLHBvLGRpLGhpLHlpLGtpLEVpLE5pLERpLE9pLHp0LFZpLElpLEFpLHRyLFd0LHByLGhyLENyLFRyLE9yLFZyLF9zLElzLHpzLG51LG91LGN1LFNsLHZ1LFhhLGJ1LHl1LGt1LEN1LG5sLE1zLFN1LER1LEF1LEJ1LEx1LCR1LHhkLHpkLFJkLGtuLGthLEtkLFlkLHFkLERyLGljLEVjLGpjLEdjXSxlcD1bY3Isa3IsJHIsZHMsYnNdLHRwPShlLHQpPT57Y29uc3QgbD1PYmplY3QuYXNzaWduKFpjLHQpO1FjKGwubG9jYWxlKSxlLmNvbmZpZy5nbG9iYWxQcm9wZXJ0aWVzLiRFTEVNRU5UPWwsKGU9PntkbD1lfSkobCksSmMuZm9yRWFjaCgodD0+e2UuY29tcG9uZW50KHQubmFtZSx0KX0pKSxlcC5mb3JFYWNoKCh0PT57ZS51c2UodCl9KSl9O3ZhciBscD17dmVyc2lvbjpcIjEuMC4xLWJldGEuOVwiLGluc3RhbGw6dHB9O2V4cG9ydCBkZWZhdWx0IGxwO2V4cG9ydHtDZSBhcyBFbEFsZXJ0LF9lIGFzIEVsQXNpZGUsRWwgYXMgRWxBdXRvY29tcGxldGUsTmwgYXMgRWxBdmF0YXIsT2wgYXMgRWxCYWNrdG9wLFZsIGFzIEVsQmFkZ2UsQWwgYXMgRWxCcmVhZGNydW1iLExsIGFzIEVsQnJlYWRjcnVtYkl0ZW0sJGwgYXMgRWxCdXR0b24sV2wgYXMgRWxCdXR0b25Hcm91cCxNYSBhcyBFbENhbGVuZGFyLElhIGFzIEVsQ2FyZCxCYSBhcyBFbENhcm91c2VsLFJhIGFzIEVsQ2Fyb3VzZWxJdGVtLHduIGFzIEVsQ2FzY2FkZXIseW4gYXMgRWxDYXNjYWRlclBhbmVsLEthIGFzIEVsQ2hlY2tib3gsTW4gYXMgRWxDaGVja2JveEJ1dHRvbixUbiBhcyBFbENoZWNrYm94R3JvdXAsRG4gYXMgRWxDb2wsT24gYXMgRWxDb2xsYXBzZSxJbiBhcyBFbENvbGxhcHNlSXRlbSxWbiBhcyBFbENvbGxhcHNlVHJhbnNpdGlvbixubyBhcyBFbENvbG9yUGlja2VyLHBvIGFzIEVsQ29udGFpbmVyLGRpIGFzIEVsRGF0ZVBpY2tlcixoaSBhcyBFbERpYWxvZyx5aSBhcyBFbERpdmlkZXIsa2kgYXMgRWxEcmF3ZXIsRWkgYXMgRWxEcm9wZG93bixOaSBhcyBFbERyb3Bkb3duSXRlbSxEaSBhcyBFbERyb3Bkb3duTWVudSxPaSBhcyBFbEZvb3Rlcix6dCBhcyBFbEZvcm0sVmkgYXMgRWxGb3JtSXRlbSxJaSBhcyBFbEhlYWRlcixBaSBhcyBFbEljb24sdHIgYXMgRWxJbWFnZSxjciBhcyBFbEluZmluaXRlU2Nyb2xsLFd0IGFzIEVsSW5wdXQscHIgYXMgRWxJbnB1dE51bWJlcixociBhcyBFbExpbmssa3IgYXMgRWxMb2FkaW5nLENyIGFzIEVsTWFpbixUciBhcyBFbE1lbnUsT3IgYXMgRWxNZW51SXRlbSxWciBhcyBFbE1lbnVJdGVtR3JvdXAsJHIgYXMgRWxNZXNzYWdlLGRzIGFzIEVsTWVzc2FnZUJveCxicyBhcyBFbE5vdGlmaWNhdGlvbixfcyBhcyBFbE9wdGlvbixJcyBhcyBFbE9wdGlvbkdyb3VwLHpzIGFzIEVsUGFnZUhlYWRlcixudSBhcyBFbFBhZ2luYXRpb24sb3UgYXMgRWxQb3Bjb25maXJtLGN1IGFzIEVsUG9wb3ZlcixTbCBhcyBFbFBvcHBlcix2dSBhcyBFbFByb2dyZXNzLFhhIGFzIEVsUmFkaW8sYnUgYXMgRWxSYWRpb0J1dHRvbix5dSBhcyBFbFJhZGlvR3JvdXAsa3UgYXMgRWxSYXRlLEN1IGFzIEVsUm93LG5sIGFzIEVsU2Nyb2xsYmFyLE1zIGFzIEVsU2VsZWN0LFN1IGFzIEVsU2xpZGVyLER1IGFzIEVsU3RlcCxBdSBhcyBFbFN0ZXBzLEJ1IGFzIEVsU3VibWVudSxMdSBhcyBFbFN3aXRjaCwkdSBhcyBFbFRhYlBhbmUseGQgYXMgRWxUYWJsZSx6ZCBhcyBFbFRhYmxlQ29sdW1uLFJkIGFzIEVsVGFicyxrbiBhcyBFbFRhZyxrYSBhcyBFbFRpbWVQaWNrZXIsS2QgYXMgRWxUaW1lU2VsZWN0LFlkIGFzIEVsVGltZWxpbmUscWQgYXMgRWxUaW1lbGluZUl0ZW0sRHIgYXMgRWxUb29sdGlwLGljIGFzIEVsVHJhbnNmZXIsRWMgYXMgRWxUcmVlLGpjIGFzIEVsVXBsb2FkLEdjIGFzIEVsVmlydHVhbExpc3QsdHAgYXMgaW5zdGFsbCxRYyBhcyBsb2NhbGUsWGMgYXMgdmVyc2lvbn07XG4iLCI8dGVtcGxhdGU+XHJcbiAgPHA+e3sgbXNnIH19IDwvcD5cclxuICA8YnV0dG9uIGNsYXNzPVwiYnRuXCI+54K55Ye7PC9idXR0b24+XHJcbjwvdGVtcGxhdGU+XHJcbjxzY3JpcHQ+XHJcbiAgZXhwb3J0IGRlZmF1bHQge1xyXG4gICAgbmFtZTonSGVsbG9Xb3JsZCcsXHJcbiAgICBwcm9wczp7XHJcbiAgICAgIG1zZzpTdHJpbmdcclxuICAgIH1cclxuICB9XHJcbjwvc2NyaXB0PlxyXG48c3R5bGUgbGFuZz1cImxlc3NcIj5cclxuYnV0dG9ue1xyXG4gIGJhY2tncm91bmQgOiNmZmY7XHJcbiAgcGFkZGluZzogMjBweDtcclxufVxyXG4uYnRue1xyXG4gIGJhY2tncm91bmQ6IHJlYmVjY2FwdXJwbGU7XHJcbn1cclxuPC9zdHlsZT4iLCJpbXBvcnQgYXBpIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICAgICAgICBpbXBvcnQgY29udGVudCBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L3N0eWxlUG9zdExvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvbGVzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvZGlzdC9pbmRleC5qcz8/cnVsZVNldFsxXS5ydWxlc1szXS51c2VbMF0hLi9IZWxsb3dvcmxkLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTMyNjQ0MTRmJmxhbmc9bGVzc1wiO1xuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCBkZWZhdWx0IGNvbnRlbnQubG9jYWxzIHx8IHt9OyIsImltcG9ydCB7IHJlbmRlciB9IGZyb20gXCIuL0hlbGxvd29ybGQudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTMyNjQ0MTRmXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vSGVsbG93b3JsZC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anNcIlxuZXhwb3J0ICogZnJvbSBcIi4vSGVsbG93b3JsZC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anNcIlxuXG5pbXBvcnQgXCIuL0hlbGxvd29ybGQudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9MzI2NDQxNGYmbGFuZz1sZXNzXCJcbnNjcmlwdC5yZW5kZXIgPSByZW5kZXJcblxuZXhwb3J0IGRlZmF1bHQgc2NyaXB0IiwiPHRlbXBsYXRlPlxyXG4gIDxkaXYgY2xhc3M9XCJtYWluXCI+XHJcbiAgICA8ZGl2IGNsYXNzPVwic2lkZVwiIHN0eWxlPVwiLXdlYmtpdC1hcHAtcmVnaW9uOiBkcmFnXCI+XHJcbiAgICAgIDxkaXYgY2xhc3M9XCJsb2dvXCIgc3R5bGU9XCItd2Via2l0LWFwcC1yZWdpb246IGRyYWdcIj5cclxuICAgICAgICA8c3ZnIHZpZXdCb3g9XCIwIDAgMTAyNCAxMDI0XCIgd2lkdGg9XCI1MFwiIGhlaWdodD1cIjU2XCI+XHJcbiAgICAgICAgICA8cGF0aCBkPVwiTTk1OC4xMzYgMTkyaC00MzIuNjRsLTQ1LjAzIDE3NC4yLTE2LjE2NiAxMTQuNDg0IDg2LjY1OCAyNDEuNjkgMTMuOTE0IDI5My4yNzhoMzkzLjI2NmMzNi4zNjggMCA2NS44NjQtMjkuNDk2IDY1Ljg2NC02NS44NjRWMjU3Ljg2NEMxMDI0IDIyMS40OTYgOTk0LjUwNCAxOTIgOTU4LjEzNiAxOTJ6XCIgZmlsbD1cIiNFNkU2RTZcIiBwLWlkPVwiNjMxMVwiPjwvcGF0aD5cclxuICAgICAgICAgIDxwYXRoIGQ9XCJNNzM3LjM5MiA4MzJsLTE3Mi41MjIgMTgzLjY1Mkw1MDMuNzY0IDgzMmwyNC45MzItNjYuOTU4elwiIGZpbGw9XCIjM0E1QkJDXCIgcC1pZD1cIjYzMTJcIj48L3BhdGg+XHJcbiAgICAgICAgICA8cGF0aCBkPVwiTTkzOS4xMyA0ODguMzQ4di00MS43NGgtMTU4LjYwOHYtNTguNDM0aC00MS43NHY1OC40MzRINTk1Ljg0djQxLjc0aDIzMS43OGMtMTIuODkyIDI3LjE0NC0zNS4yNDIgNzAuNDMtNjUuOTU2IDExNi4wNy0yOC4yNjQtMzUuMjk4LTQ2LjEyNC01OS44NjItNDYuMzM2LTYwLjE1NGwtMTIuMjU4LTE2Ljg5LTMzLjc4NCAyNC41MSAxMi4yNTQgMTYuODljMC45NTQgMS4zMTYgMjEuNzUyIDI5LjkyNiA1NC42NzYgNzAuNi0yMi40NDQgMjcuNDk4LTYzLjYxNiA3Mi4yMTItODUuMzEgOTMuOTA0bDI5LjUxMiAyOS41MTJjMTguNzI0LTE4LjcyNCA1Ny41NDgtNjAuNDI4IDgyLjg1Mi05MC42NTQgMzIuOTE4IDM5LjEwNiA2NS4wNDYgNzQuMzg4IDk1LjcwOCAxMDUuMDUybDE0Ljc1NiAxNC43NTYgMjkuNTE2LTI5LjUxLTE0Ljc1Ni0xNC43NTZDODU2LjgxNiA3MTYgODIzLjQ1NiA2NzkuMTUgNzg5LjIgNjM4LjA4YzQ0LjI2Ni02My42NDYgNzIuOTYtMTIzLjkxMiA4NC40LTE0OS43MzJoNjUuNTN6XCIgZmlsbD1cIiM4MDgwODBcIiBwLWlkPVwiNjMxM1wiPjwvcGF0aD5cclxuICAgICAgICAgIDxwYXRoIGQ9XCJNNjk4LjY1OCA3MTUuMDQ2TDczNy4zOTIgODMySDY1Ljg2NEMyOS40NjggODMyIDAgODAyLjUwNCAwIDc2Ni4xMzZWNzQuMjEyQzAgMzcuODQ0IDI5LjQ2OCA4LjM0OCA2NS44NjQgOC4zNDhoMzk4LjgzMkw1MjUuNDk2IDE5Mmw5MS4yMTQgMjc1LjQ3OCA4MS45NDggMjQ3LjU2OHpcIiBmaWxsPVwiIzUxOEVGOFwiIHAtaWQ9XCI2MzE0XCI+PC9wYXRoPjxwYXRoIGQ9XCJNMjk4LjYwMiA1NzQuNzQ4Yy04NS41NCAwLTE1NS4xMy02OS41OS0xNTUuMTMtMTU1LjEzczY5LjU5LTE1NS4xMyAxNTUuMTMtMTU1LjEzYzQxLjQwOCAwIDgwLjM2NCAxNi4xMyAxMDkuNjkgNDUuNDI0bC0yOS40OTggMjkuNTMyYy0yMS40NDYtMjEuNDItNDkuOTIyLTMzLjIxNi04MC4xOTQtMzMuMjE2LTYyLjUyNiAwLTExMy4zOTIgNTAuODY2LTExMy4zOTIgMTEzLjM5MnM1MC44NjYgMTEzLjM5MiAxMTMuMzkyIDExMy4zOTJjNTUuMzk2IDAgMTAxLjY0LTM5LjkzNCAxMTEuNDY2LTkyLjUyMmgtMTExLjQ2MnYtNDEuNzRoMTU1LjEzdjIwLjg3Yy0wLjAwMiA4NS41MzgtNjkuNTkyIDE1NS4xMjgtMTU1LjEzMiAxNTUuMTI4elwiIGZpbGw9XCIjRkZGRkZGXCIgcC1pZD1cIjYzMTVcIj48L3BhdGg+XHJcbiAgICAgICAgPC9zdmc+XHJcbiAgICAgICAgPGgxPuWPr+inhuWMlue/u+ivkTwvaDE+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgICA8ZGl2IGNsYXNzPVwiZW50cnlcIj5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwic2VsZWN0LWZpbGVcIj5cclxuICAgICAgICAgIDxpbnB1dCBjbGFzcz1cImlucHV0LWZpbGVcIiBAY2hhbmdlPVwiZW50cnlGaWxlXCIgdHlwZT1cImZpbGVcIiBuYW1lPVwi5a+85YWlXCI+XHJcbiAgICAgICAgICA8YnV0dG9uPisg5a+85YWl6K+t6KiA5YyFPC9idXR0b24+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgICA8ZGl2IGNsYXNzPVwiY2F0YWxvZ1wiPlxyXG4gICAgICAgIDxoND7mqKHlnZfnm67lvZU8L2g0PlxyXG4gICAgICAgIDxlbC1pbnB1dCBjbGFzcz1cInNlYXJjaC10ZXh0XCJcclxuICAgICAgICAgIHBsYWNlaG9sZGVyPVwi6L6T5YWl5YWz6ZSu5a2X6L+b6KGM6L+H5rukXCJcclxuICAgICAgICAgIHNpemU9XCJtaW5pXCJcclxuICAgICAgICAgIHYtbW9kZWw9XCJmaWx0ZXJUZXh0XCI+XHJcbiAgICAgICAgPC9lbC1pbnB1dD5cclxuICAgICAgICA8ZWwtdHJlZSByZWY9XCJ0cmVlXCIgXHJcbiAgICAgICAgOmRhdGE9XCJ0cmVlRGF0YVwiIFxyXG4gICAgICAgIG5vZGUta2V5PVwiaWRcIlxyXG4gICAgICAgIGhpZ2hsaWdodC1jdXJyZW50XHJcbiAgICAgICAgQG5vZGUtY29udGV4dG1lbnU9XCJjcmVhdE1lbnVcIlxyXG4gICAgICAgIEBjdXJyZW50LWNoYW5nZT1cImNsaWNrTG9jYWxOb2RlXCJcclxuICAgICAgICA6ZmlsdGVyLW5vZGUtbWV0aG9kPVwiZmlsdGVyTm9kZVwiPjwvZWwtdHJlZT5cclxuICAgICAgPC9kaXY+XHJcbiAgICAgIDxkaXYgY2xhc3M9XCJvdXRwdXRcIj5cclxuICAgICAgICA8IS0tIDxidXR0b24gY2xhc3M9XCJmaXhlZGxiXCIgQGNsaWNrPVwiZXhwb3J0TGFuZ1wiPuWvvOWHujwvYnV0dG9uPiAtLT5cclxuICAgICAgICA8cCB0aXRsZT1cIuaKgOacr+aUr+aMgVwiPndpdGggPGEgQGNsaWNrPVwiYWJvdXRNZSh0aGlzKVwiIGhyZWY9XCJqYXZhc2NyaXB0OlwiPuKZpTwvYT4gYnkgTXVGZW5nPC9wPlxyXG4gICAgICA8L2Rpdj5cclxuICAgIDwvZGl2PlxyXG4gICAgPGRpdiBjbGFzcz1cImNvbnRlbnRcIj5cclxuICAgICAgPCEtLSA8aDI+U2Vuc2VHdWFyZCBpMThuLXRvb2xzPC9oMj4gLS0+XHJcbiAgICAgIDxkaXYgY2xhc3M9XCJtYWluLWhlYWRlXCI+XHJcbiAgICAgICAgPGgzPuS4reaWh+WMhTxzcGFuIHYtaWY9XCJsYW5nRmlsZS56aC5uYW1lXCI+OiA8c3BhbiBjbGFzcz1cImdyYXlcIj57e2xhbmdGaWxlLnpoLmZpbGV9fTwvc3Bhbj4gPGJ1dHRvbiB0aXRsZT1cIuWvvOWHuuS4reaWh+ivreiogOWMhVwiIGNsYXNzPVwibWluaVwiIEBjbGljaz1cImV4cG9ydExhbmcobGFuZ0ZpbGUuemgpXCI+4p6l5a+85Ye6PC9idXR0b24+PC9zcGFuPjwvaDM+XHJcbiAgICAgICAgPGgzPuiLseaWh+WMhTxzcGFuIHYtaWY9XCJsYW5nRmlsZS5lbi5uYW1lXCI+OiA8c3BhbiBjbGFzcz1cImdyYXlcIj57e2xhbmdGaWxlLmVuLmZpbGV9fTwvc3Bhbj4gPGJ1dHRvbiB0aXRsZT1cIuWvvOWHuuiLseaWh+ivreiogOWMhVwiIGNsYXNzPVwibWluaVwiIEBjbGljaz1cImV4cG9ydExhbmcobGFuZ0ZpbGUuZW4pXCI+4p6l5a+85Ye6PC9idXR0b24+PC9zcGFuPjwvaDM+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgICA8c2VjdGlvbiByZWY9XCJwYWdlQ29uXCI+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cIm5vZGF0YVwiIHYtaWY9XCJPYmplY3Qua2V5cyhsYW5nLnpoKS5sZW5ndGggPT0gMCAmJiBPYmplY3Qua2V5cyhsYW5nLmVuKS5sZW5ndGggPT0gMFwiPlxyXG4gICAgICAgICAg6K+35YWI5a+85YWl6K+t6KiA5YyF5paH5Lu2Ojxicj5cclxuICAgICAgICAgIDxzcGFuPuaUr+aMgS5qc29u77yM5oiWanNvbuagvOW8j+eahCguanMvLnRzKeaWh+S7tuOAgjwvc3Bhbj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwia3ZcIj5cclxuICAgICAgICAgIDxkbCB2LWZvcj1cIih2YWwsIGtleSkgaW4gbGFuZy56aFwiIDprZXk9XCJrZXlcIj5cclxuICAgICAgICAgICAgPGR0IDpyZWY9XCJrZXlcIiA6bmFtZT1cImtleVwiPjxlbSB2LXRleHQ9XCJrZXlcIiBAaW5wdXQ9XCJrZXkgPSAkZXZlbnQudGFyZ2V0LmlubmVyVGV4dFwiPjwvZW0+PC9kdD5cclxuICAgICAgICAgICAgPGRkPlxyXG4gICAgICAgICAgICAgIDxkaXYgdi1pZj1cInR5cGVvZiB2YWwgPT0gJ3N0cmluZydcIj5cclxuICAgICAgICAgICAgICAgIDwhLS0gPGxhYmVsPjwvbGFiZWw+IC0tPlxyXG4gICAgICAgICAgICAgICAgPHRleHRhcmVhIDpjbGFzcz1cImtleVwiIHYtdHJlc2l6ZT1cImNoYW5nZWRcIiBwbGFjZWhvbGRlcj1cIuivt+i+k+WFpVwiIGF1dG9IZWlnaHQ9XCJ0cnVlXCIgdi1tb2RlbD1cImxhbmcuemhba2V5XVwiPjwvdGV4dGFyZWE+XHJcbiAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgPHVsIHYtZWxzZT5cclxuICAgICAgICAgICAgICAgIDxsaSB2LWZvcj1cIihpdGVtLCBpbmRleCkgaW4gbGFuZy56aFtrZXldXCIgOmtleT1cImluZGV4XCI+XHJcbiAgICAgICAgICAgICAgICAgIDxlbT57e2luZGV4fX08L2VtPlxyXG4gICAgICAgICAgICAgICAgICA8ZGl2IHYtaWY9XCJ0eXBlb2YgbGFuZy56aFtrZXldW2luZGV4XSA9PSAnc3RyaW5nJ1wiPlxyXG4gICAgICAgICAgICAgICAgICAgIDx0ZXh0YXJlYSA6Y2xhc3M9XCJpbmRleFwiIHYtdHJlc2l6ZT1cImNoYW5nZWRcIiBwbGFjZWhvbGRlcj1cIuivt+i+k+WFpVwiIGF1dG9IZWlnaHQ9XCJ0cnVlXCIgdi1tb2RlbD1cImxhbmcuemhba2V5XVtpbmRleF1cIj48L3RleHRhcmVhPlxyXG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgPGRpdiB2LWVsc2UgY2xhc3M9XCJjaGlsZC1pdGVtXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHVsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgPGxpIHYtZm9yPVwiKGNoaWxkaXRlbSwgbikgaW4gbGFuZy56aFtrZXldW2luZGV4XVwiIDprZXk9XCJuXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxlbT57e259fTwvZW0+PGJyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGV4dGFyZWEgOmNsYXNzPVwiaW5kZXhcIiB2LXRyZXNpemU9XCJjaGFuZ2VkXCIgcGxhY2Vob2xkZXI9XCLor7fovpPlhaVcIiBhdXRvSGVpZ2h0PVwidHJ1ZVwiIHYtbW9kZWw9XCJsYW5nLnpoW2tleV1baW5kZXhdW25dXCI+PC90ZXh0YXJlYT5cclxuICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgPC91bD5cclxuICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgIDwvdWw+XHJcbiAgICAgICAgICAgIDwvZGQ+XHJcbiAgICAgICAgICA8L2RsPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJrdlwiPlxyXG4gICAgICAgICAgPGRsIHYtZm9yPVwiKHZhbCwga2V5KSBpbiBsYW5nLmVuXCIgOmtleT1cImtleVwiPlxyXG4gICAgICAgICAgICA8ZHQ+PGVtPnt7a2V5fX08L2VtPjwvZHQ+XHJcbiAgICAgICAgICAgIDxkZD5cclxuICAgICAgICAgICAgICA8ZGl2IHYtaWY9XCJ0eXBlb2YgbGFuZy5lbltrZXldID09ICdzdHJpbmcnXCI+XHJcbiAgICAgICAgICAgICAgICA8IS0tIDxsYWJlbCBmb3I9XCJcIj48L2xhYmVsPiAtLT5cclxuICAgICAgICAgICAgICAgIDx0ZXh0YXJlYSBzdHlsZT1cInJlc2l6ZTpub25lXCIgOmNsYXNzPVwia2V5XCIgdi10cmVzaXplPVwiY2hhbmdlZFwiIHBsYWNlaG9sZGVyPVwi6K+36L6T5YWlXCIgYXV0b0hlaWdodD1cInRydWVcIiB2LW1vZGVsPVwibGFuZy5lbltrZXldXCI+PC90ZXh0YXJlYT5cclxuICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICA8dWwgdi1lbHNlPlxyXG4gICAgICAgICAgICAgICAgPGxpIHYtZm9yPVwiKGl0ZW0sIGluZGV4KSBpbiBsYW5nLmVuW2tleV1cIiA6a2V5PVwiaW5kZXhcIj5cclxuICAgICAgICAgICAgICAgICAgPGVtPnt7aW5kZXh9fTwvZW0+XHJcbiAgICAgICAgICAgICAgICAgIDxkaXYgdi1pZj1cInR5cGVvZiBsYW5nLmVuW2tleV1baW5kZXhdID09ICdzdHJpbmcnXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRleHRhcmVhIDpjbGFzcz1cImluZGV4XCIgdi10cmVzaXplPVwiY2hhbmdlZFwiIHBsYWNlaG9sZGVyPVwi6K+36L6T5YWlXCIgYXV0b0hlaWdodD1cInRydWVcIiB2LW1vZGVsPVwibGFuZy5lbltrZXldW2luZGV4XVwiPjwvdGV4dGFyZWE+XHJcbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICA8ZGl2IHYtZWxzZSBjbGFzcz1cImNoaWxkLWl0ZW1cIj5cclxuICAgICAgICAgICAgICAgICAgICA8dWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8bGkgdi1mb3I9XCIoY2hpbGRpdGVtLCBuKSBpbiBsYW5nLmVuW2tleV1baW5kZXhdXCIgOmtleT1cIm5cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGVtPnt7bn19PC9lbT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRleHRhcmVhIDpjbGFzcz1cImluZGV4XCIgdi10cmVzaXplPVwiY2hhbmdlZFwiIHBsYWNlaG9sZGVyPVwi6K+36L6T5YWlXCIgYXV0b0hlaWdodD1cInRydWVcIiB2LW1vZGVsPVwibGFuZy5lbltrZXldW2luZGV4XVtuXVwiPjwvdGV4dGFyZWE+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvdWw+XHJcbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICA8L3VsPlxyXG4gICAgICAgICAgICA8L2RkPlxyXG4gICAgICAgICAgPC9kbD5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8IS0tIDxlbC1kaWFsb2dcclxuICAgICAgICAgIHdpZHRoPVwiNTAwcHhcIlxyXG4gICAgICAgICAgOnZpc2libGUuc3luYz1cImRpYWxvZ1Nob3dWaXNpYmxlXCI+XHJcbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiZGlhbG9nLXRpdGxlXCIgc2xvdD1cInRpdGxlXCI+e3tjdXJyZW50TW9kdWxlfX06IDxlbT7mt7vliqDlrZDpobk8L2VtPjwvZGl2PlxyXG4gICAgICAgICAgPGVsLWZvcm0gOm1vZGVsPVwiZm9ybVwiIHJlZj1cInJlZ2lvblJ1bGVzXCIgOnJ1bGVzPVwicmVnaW9uUnVsZXNcIj5cclxuICAgICAgICAgICAgPGVsLWZvcm0taXRlbSBsYWJlbD1cImtleTpcIiA6bGFiZWwtd2lkdGg9XCJmb3JtTGFiZWxXaWR0aFwiIHByb3A9XCJrZXlcIj5cclxuICAgICAgICAgICAgICA8ZWwtaW5wdXQgc2l6ZT1cInNtYWxsXCIgdi1tb2RlbD1cImZvcm0ua2V5XCIgbWF4bGVuZ3RoPVwiNDBcIiBhdXRvY29tcGxldGU9XCJvZmZcIj48L2VsLWlucHV0PlxyXG4gICAgICAgICAgICA8L2VsLWZvcm0taXRlbT5cclxuICAgICAgICAgICAgPGVsLWZvcm0taXRlbSBsYWJlbD1cIuS4reaWhzpcIiA6bGFiZWwtd2lkdGg9XCJmb3JtTGFiZWxXaWR0aFwiIHByb3A9XCJ6aFZhbHVlXCI+XHJcbiAgICAgICAgICAgICAgPGVsLWlucHV0IHNpemU9XCJzbWFsbFwiIHYtbW9kZWw9XCJmb3JtLnpoVmFsdWVcIiBtYXhsZW5ndGg9XCIxMDBcIiBhdXRvY29tcGxldGU9XCJvZmZcIj48L2VsLWlucHV0PlxyXG4gICAgICAgICAgICA8L2VsLWZvcm0taXRlbT5cclxuICAgICAgICAgICAgPGVsLWZvcm0taXRlbSBsYWJlbD1cIuiLseaWhzpcIiA6bGFiZWwtd2lkdGg9XCJmb3JtTGFiZWxXaWR0aFwiIHByb3A9XCJlblZhbHVlXCI+XHJcbiAgICAgICAgICAgICAgPGVsLWlucHV0IHNpemU9XCJzbWFsbFwiIHYtbW9kZWw9XCJmb3JtLmVuVmFsdWVcIiBtYXhsZW5ndGg9XCIxMDBcIiBhdXRvY29tcGxldGU9XCJvZmZcIj48L2VsLWlucHV0PlxyXG4gICAgICAgICAgICA8L2VsLWZvcm0taXRlbT5cclxuICAgICAgICAgIDwvZWwtZm9ybT5cclxuICAgICAgICAgIDxkaXYgc2xvdD1cImZvb3RlclwiIGNsYXNzPVwiZGlhbG9nLWZvb3RlclwiPlxyXG4gICAgICAgICAgICA8ZWwtYnV0dG9uIHNpemU9XCJzbWFsbFwiIHR5cGU9XCJwcmltYXJ5XCIgOmxvYWRpbmc9XCJpc1N1Ym1pdFwiIEBjbGljaz1cImFkZEl0ZW1cIj7noa7lrpo8L2VsLWJ1dHRvbj5cclxuICAgICAgICAgICAgPGVsLWJ1dHRvbiBzaXplPVwic21hbGxcIiB0eXBlPVwiaW5mb1wiIEBjbGljaz1cImRpYWxvZ1Nob3dWaXNpYmxlID0gZmFsc2VcIj7lj5bmtog8L2VsLWJ1dHRvbj5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZWwtZGlhbG9nPiAtLT5cclxuICAgICAgPC9zZWN0aW9uPlxyXG4gICAgICBcclxuICAgIDwvZGl2PlxyXG4gICAgXHJcbiAgPC9kaXY+XHJcbjwvdGVtcGxhdGU+XHJcbjxzY3JpcHQ+XHJcbmNvbnN0IHtpcGNSZW5kZXJlcn0gPSByZXF1aXJlKCdlbGVjdHJvbicpXHJcbmNvbnN0IHsgcmVtb3RlIH0gPSByZXF1aXJlKCdlbGVjdHJvbicpXHJcbmNvbnN0IHsgTWVudSwgTWVudUl0ZW0gfSA9IHJlbW90ZVxyXG5jb25zdCBzaGVsbCA9IHJlcXVpcmUoJ2VsZWN0cm9uJykuc2hlbGxcclxuY29uc3QgZnMgPSByZXF1aXJlKCdmcycpXHJcblxyXG5pbXBvcnQgeyBkZWZpbmVDb21wb25lbnQsIG9uTW91bnRlZCwgcmVhY3RpdmUgLHRvUmVmcyx3YXRjaCxyZWYgfSBmcm9tICd2dWUnXHJcbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbXBvbmVudCh7XHJcbiAgc2V0dXAocHJvcHMsIGN0eCkge1xyXG4gICAgY29uc3Qgc3RhdGUgPSByZWFjdGl2ZSh7XHJcbiAgICAgIGZvcm06e1xyXG4gICAgICAgIGtleTonJyxcclxuICAgICAgICBlblZhbHVlOicnLFxyXG4gICAgICAgIHpoVmFsdWU6JydcclxuICAgICAgfSxcclxuICAgICAgZm9ybUxhYmVsV2lkdGg6JzgwcHgnLFxyXG4gICAgICByZWdpb25SdWxlczp7XHJcbiAgICAgICAga2V5OiBbXHJcbiAgICAgICAgICB7IHJlcXVpcmVkOiB0cnVlLCB0cmlnZ2VyOiAnYmx1cicgfSxcclxuICAgICAgICAgIHsgbWF4OiA0MCwgbWVzc2FnZTogJycsIHRyaWdnZXI6ICdibHVyJ31cclxuICAgICAgICBdLFxyXG4gICAgICAgIGVuVmFsdWU6IFtcclxuICAgICAgICAgIHsgcmVxdWlyZWQ6IHRydWUsIHRyaWdnZXI6ICdibHVyJyB9LFxyXG4gICAgICAgICAgeyBtYXg6IDQwLCBtZXNzYWdlOiAnJywgdHJpZ2dlcjogJ2JsdXInIH1cclxuICAgICAgICBdLFxyXG4gICAgICAgIHpoVmFsdWU6IFtcclxuICAgICAgICAgIHsgcmVxdWlyZWQ6IHRydWUsIHRyaWdnZXI6ICdibHVyJyB9LFxyXG4gICAgICAgICAgeyBtYXg6IDQwLCBtZXNzYWdlOiAnJywgdHJpZ2dlcjogJ2JsdXInIH1cclxuICAgICAgICBdXHJcbiAgICAgIH0sXHJcbiAgICAgIGlzU3VibWl0OmZhbHNlLFxyXG4gICAgICBjdXJyZW50TW9kdWxlOicnLFxyXG4gICAgICBuYW1lOiAn6aaW6aG1JyxcclxuICAgICAgcGF0aDogJy9ob21lJyxcclxuICAgICAgbGFuZzoge1xyXG4gICAgICAgIGVuOiB7fSxcclxuICAgICAgICB6aDoge31cclxuICAgICAgfSxcclxuICAgICAgbGFuZ0ZpbGU6e1xyXG4gICAgICAgIGVuOntcclxuICAgICAgICAgIG5hbWU6JycsXHJcbiAgICAgICAgICBmaWxlOicnXHJcbiAgICAgICAgfSxcclxuICAgICAgICB6aDp7XHJcbiAgICAgICAgICBuYW1lOicnLFxyXG4gICAgICAgICAgZmlsZTonJ1xyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuICAgICAgZmlsdGVyVGV4dDonJyxcclxuICAgICAgdHJlZURhdGE6W10sXHJcbiAgICAgIGNvbnRleHRNZW51Om5ldyBNZW51KCksXHJcbiAgICAgIGRpYWxvZ1Nob3dWaXNpYmxlOmZhbHNlXHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBvbk1vdW50ZWQoKSB7XHJcbiAgICAvLyAgIHRoaXMudHJlZUluaXQoKTtcclxuICAgIC8vICAgdGhpcy5jb250ZXh0TWVudUluaXQoKTtcclxuICAgIC8vIH07XHJcbiAgZnVuY3Rpb24gYWJvdXRNZSgpe1xyXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgIHNoZWxsLm9wZW5FeHRlcm5hbCgnaHR0cHM6Ly9naXRodWIuY29tL2FydHNraW4vaTE4bi10b29scycpO1xyXG4gIH1cclxuICBmdW5jdGlvbiBmaWx0ZXJOb2RlKHZhbHVlLCBkYXRhKSB7XHJcbiAgICBpZiAoIXZhbHVlKSByZXR1cm4gdHJ1ZTtcclxuICAgIHJldHVybiBkYXRhLmxhYmVsLmluZGV4T2YodmFsdWUpICE9PSAtMTtcclxuICB9XHJcbiAgZnVuY3Rpb24gY2xpY2tMb2NhbE5vZGUoZGF0YSxub2RlLGtleSl7XHJcbiAgICBjb25zb2xlLmxvZyhkYXRhLG5vZGUsa2V5KVxyXG4gICAgLy9sZXQgaXRlbU5hbWUgPSBkYXRhLmxhYmVsO1xyXG4gICAgLy9kYXRhLmxhYmVsID0gcmVmKG51bGwpLnZhbHVlO1xyXG5cclxuICAgIGNvbnNvbGUubG9nKGRhdGEubGFiZWwpXHJcbiAgICAvL2xldCB0YXJnZXRFbCA9IGl0ZW1OYW1lXHJcblxyXG4gICAgLy8gaWYodGhpcy4kcmVmc1tpdGVtTmFtZV0ubGVuZ3RoPjApe1xyXG4gICAgLy8gICB0YXJnZXRFbCA9IHRoaXMuJHJlZnNbaXRlbU5hbWVdWzBdXHJcbiAgICAvLyB9ZWxzZXtcclxuICAgIC8vICAgdGFyZ2V0RWwgPSB0aGlzLiRyZWZzW2l0ZW1OYW1lXVxyXG4gICAgLy8gfVxyXG4gICAgLy90YXJnZXRFbC5zY3JvbGxJbnRvVmlldygpLy97YmVoYXZpb3I6XCJzbW9vdGhcIn1cclxuICB9XHJcblxyXG4gIGNvbnN0IGVudHJ5RmlsZT0gKGUpID0+IHtcclxuICAgIGxldCBnZXRmaWxlID0gZS50YXJnZXQuZmlsZXNbMF1cclxuICAgIGNvbnNvbGUubG9nKGdldGZpbGUpXHJcbiAgICBsZXQgZmlsZU5hbWUgPSBnZXRmaWxlLm5hbWU7XHJcbiAgICBsZXQgbGFuZ05hbWUgPSAnJ1xyXG4gICAgaWYoZmlsZU5hbWUuaW5jbHVkZXMoJ3poJykgfHwgZmlsZU5hbWUuaW5jbHVkZXMoJ2NuJykpe1xyXG4gICAgICBsYW5nTmFtZSA9ICd6aCdcclxuICAgIH1cclxuICAgIGlmKGZpbGVOYW1lLmluY2x1ZGVzKCdlbicpIHx8IGZpbGVOYW1lLmluY2x1ZGVzKCdFTicpKXtcclxuICAgICAgbGFuZ05hbWUgPSAnZW4nXHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGUubGFuZ0ZpbGVbbGFuZ05hbWVdLmZpbGUgPSBmaWxlTmFtZTtcclxuICAgIHN0YXRlLmxhbmdGaWxlW2xhbmdOYW1lXS5uYW1lID0gbGFuZ05hbWU7XHJcblxyXG4gICAgZnMucmVhZEZpbGUoZ2V0ZmlsZS5wYXRoLCAndXRmLTgnLCAoZXJyLCByZXN1bHQpID0+IHtcclxuICAgICAgbGV0IHRvSnNvbiA9IHJlc3VsdC5zdWJzdHJpbmcocmVzdWx0LmluZGV4T2YoJ3snKSlcclxuICAgICAgY29uc29sZS5sb2codG9Kc29uKVxyXG4gICAgICBpZiAoZXJyKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ+WHuumUmScsZXJyKS8vIGVzbGludC1kaXNhYmxlLWxpbmVcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBzdGF0ZS5sYW5nW2xhbmdOYW1lXSA9IEpTT04ucGFyc2UodG9Kc29uKVxyXG4gICAgICAgIHRyZWVJbml0KGxhbmdOYW1lLEpTT04ucGFyc2UodG9Kc29uKSlcclxuICAgICAgfVxyXG4gICAgfSlcclxuICAgIC8vIGNvbnNvbGUubG9nKGZzLnJlYWRGaWxlU3luYyhnZXRmaWxlLnBhdGgpLnRvU3RyaW5nKCkpXHJcbiAgICAvLyBsZXQgcmVzdWx0ID0gSlNPTi5wYXJzZShmcy5yZWFkRmlsZVN5bmMoZ2V0ZmlsZS5wYXRoKSlcclxuICAgIC8vIGNvbnNvbGUubG9nKHJlc3VsdClcclxuICAgIC8vaXBjUmVuZGVyZXIuc2VuZCgnb3Blbi1maWxlLWRpYWxvZycpXHJcbiAgfVxyXG4gIGNvbnN0IHRyZWVJbml0ID0obGFuZyx0cmVlRGF0YSk9PntcclxuICAgIHN0YXRlLnRyZWVEYXRhID0gW107XHJcbiAgICBsZXQgdHJlZUpzb24gPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHRyZWVEYXRhKSlcclxuICAgIC8vY29uc29sZS5sb2coc3RhdGUudHJlZURhdGEpXHJcbiAgICBnZXRKc29uRGF0YSh0cmVlSnNvbilcclxuICAgIGZ1bmN0aW9uIGdldEpzb25EYXRhKGpzb25EYXRhLGtleSl7XHJcbiAgICAgIC8vY29uc29sZS5sb2coanNvbkRhdGEsKVxyXG4gICAgICBPYmplY3QuZW50cmllcyhqc29uRGF0YSkubWFwKChpdGVtKT0+e1xyXG4gICAgICAgIC8vY29uc29sZS5sb2coaXRlbSx0eXBlb2YgaXRlbVsxXSlcclxuICAgICAgICBcclxuICAgICAgICBpZih0eXBlb2YgaXRlbVsxXSA9PSAnb2JqZWN0Jyl7XHJcbiAgICAgICAgICBsZXQgdHJlZUl0ZW0gPSB7XHJcbiAgICAgICAgICAgIGxhYmVsOml0ZW1bMF0sXHJcbiAgICAgICAgICAgIHZhbHVlOicnXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBzdGF0ZS50cmVlRGF0YS5wdXNoKHRyZWVJdGVtKVxyXG4gICAgICAgIH1cclxuICAgICAgfSlcclxuICAgICAgY29uc29sZS5sb2coc3RhdGUudHJlZURhdGEpXHJcbiAgICB9XHJcbiAgfVxyXG4gIFxyXG4gIFxyXG4gIGZ1bmN0aW9uIHNlbGVjdEZpbGUgKGUpIHtcclxuICAgIC8vaXBjUmVuZGVyZXIuc2VuZCgnb3Blbi1maWxlLWRpYWxvZycpXHJcbiAgfVxyXG4gIGZ1bmN0aW9uIGNoYW5nZWQgKGUpIHtcclxuICAgIC8vIHRoaXMuJHJlZnNbZS5jbGFzc05hbWVdWzFdLnN0eWxlLmhlaWdodCA9IHRoaXMuJHJlZnNbZS5jbGFzc05hbWVdWzBdLnN0eWxlLmhlaWdodFxyXG4gIH1cclxuICBmdW5jdGlvbiBjb250ZXh0TWVudUluaXQoKXtcclxuICAgIHRoaXMuY29udGV4dE1lbnUuYXBwZW5kKG5ldyBNZW51SXRlbSh7IGxhYmVsOiAn5paw5bu65a2Q6aG5JywgY2xpY2s6KCk9PiB7IHRoaXMuc2hvd0FkZEl0ZW0oKSB9IH0pKVxyXG4gICAgLy8gdGhpcy5jb250ZXh0TWVudS5hcHBlbmQobmV3IE1lbnVJdGVtKHsgdHlwZTogJ3NlcGFyYXRvcicgfSkpXHJcbiAgICAvLyB0aGlzLmNvbnRleHRNZW51LmFwcGVuZChuZXcgTWVudUl0ZW0oeyBsYWJlbDogJ+aWsOW7uuaooeWdlycgfSkpXHJcbiAgfVxyXG4gIGZ1bmN0aW9uIHNob3dBZGRJdGVtKCl7XHJcbiAgICB0aGlzLmRpYWxvZ1Nob3dWaXNpYmxlID0gdHJ1ZTtcclxuICB9XHJcbiAgZnVuY3Rpb24gIGFkZEl0ZW0oKXtcclxuICAgIGxldCBzZWxmID0gdGhpcztcclxuICAgIHRoaXMuJHJlZnMucmVnaW9uUnVsZXMudmFsaWRhdGUoKHZhbGlkKSA9PiB7XHJcbiAgICAgIGlmICh2YWxpZCkge1xyXG4gICAgICAgIHRoaXMuaXNTdWJtaXQgPSB0cnVlO1xyXG4gICAgICAgIGlmKHRoaXMubGFuZyAmJiB0aGlzLmxhbmcuemgpe1xyXG4gICAgICAgICAgY29uc29sZS5sb2codGhpcy5sYW5nLnpoW3RoaXMuY3VycmVudE1vZHVsZV0pXHJcbiAgICAgICAgICB0aGlzLmxhbmcuemhbdGhpcy5jdXJyZW50TW9kdWxlXVt0aGlzLmZvcm0ua2V5XSA9IHRoaXMuZm9ybS56aFZhbHVlXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmKHRoaXMubGFuZyAmJiB0aGlzLmxhbmcuZW4pe1xyXG4gICAgICAgICAgY29uc29sZS5sb2codGhpcy5sYW5nKVxyXG4gICAgICAgICAgdGhpcy5sYW5nLmVuW3RoaXMuY3VycmVudE1vZHVsZV1bdGhpcy5mb3JtLmtleV0gPSB0aGlzLmZvcm0uZW5WYWx1ZVxyXG4gICAgICAgIH1cclxuICAgICAgICBzZXRUaW1lb3V0KCgpPT57XHJcbiAgICAgICAgICB0aGlzLmlzU3VibWl0ID0gZmFsc2U7XHJcbiAgICAgICAgICB0aGlzLmRpYWxvZ1Nob3dWaXNpYmxlID0gZmFsc2VcclxuICAgICAgICB9LDEwMClcclxuICAgICAgfVxyXG4gICAgfSlcclxuICB9XHJcbiAgZnVuY3Rpb24gY3JlYXRNZW51KGV2LGRhdGEsbm9kZSxzZWxmKXtcclxuICAgIGV2LnByZXZlbnREZWZhdWx0KClcclxuICAgIC8vY29uc29sZS5sb2coZXYsZGF0YSxub2RlLHNlbGYpXHJcbiAgICB0aGlzLmN1cnJlbnRNb2R1bGUgPSBkYXRhLmxhYmVsXHJcbiAgICB0aGlzLmNvbnRleHRNZW51LnBvcHVwKHsgd2luZG93OiByZW1vdGUuZ2V0Q3VycmVudFdpbmRvdygpIH0pXHJcbiAgfVxyXG4gIGZ1bmN0aW9uIGV4cG9ydExhbmcgKGN1cnJlbnRsYW5nKSB7XHJcbiAgICAvL2NvbnNvbGUubG9nKHRoaXMpXHJcbiAgICBsZXQgc3RyID0gSlNPTi5zdHJpbmdpZnkodGhpcy5sYW5nW2N1cnJlbnRsYW5nLm5hbWVdLCAnJywgJ1xcdCcpXHJcbiAgICBsZXQgc2F2ZVN0ciA9IGBleHBvcnQgZGVmYXVsdCAke3N0cn1gXHJcbiAgICBjb25zb2xlLmxvZyhzYXZlU3RyKVxyXG4gICAgaXBjUmVuZGVyZXIuc2VuZCgnc2F2ZS1kaWFsb2cnLGN1cnJlbnRsYW5nLmZpbGUpXHJcbiAgICBpcGNSZW5kZXJlci5vbignc2F2ZS1maWxlJywgKGV2ZW50LCBwYXRoKSA9PiB7XHJcbiAgICAgIGlmKCFwYXRoLmNhbmNlbGVkKXtcclxuICAgICAgICBsZXQgZmlsZVBhdGggPSBwYXRoLmZpbGVQYXRoXHJcbiAgICAgICAgZnMud3JpdGVGaWxlKGZpbGVQYXRoLCBzYXZlU3RyLCAndXRmLTgnLCAoZXJyLCBkYXRhKSA9PiB7XHJcbiAgICAgICAgICBpZiAoZXJyKSB0aHJvdyBlcnI7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZygn5paH5Lu25bey6KKr5L+d5a2YJyk7XHJcbiAgICAgICAgICBjb25zdCBub3RpZmljYXRpb24gPSB7XHJcbiAgICAgICAgICAgIHRpdGxlOiflr7zlh7rmiJDlip8nLFxyXG4gICAgICAgICAgICBib2R5Oiflr7zlh7rnm67lvZXkuLo6JytmaWxlUGF0aFxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgY29uc3Qgbm90aWNlU3VjY2VzcyA9IG5ldyB3aW5kb3cuTm90aWZpY2F0aW9uKG5vdGlmaWNhdGlvbi50aXRsZSxub3RpZmljYXRpb24pXHJcbiAgICAgICAgfSlcclxuICAgICAgfVxyXG4gICAgfSlcclxuICB9XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgLi4udG9SZWZzKHN0YXRlKSxcclxuICAgICAgZW50cnlGaWxlLFxyXG4gICAgICB0cmVlSW5pdCxcclxuICAgICAgY2xpY2tMb2NhbE5vZGUsXHJcbiAgICAgIGNyZWF0TWVudSxcclxuICAgICAgZmlsdGVyTm9kZSxcclxuICAgICAgZXhwb3J0TGFuZ1xyXG4gICAgfVxyXG4gIH1cclxuLy8gZmlsdGVyVGV4dCh2YWwpIHtcclxuLy8gICAgICAgdGhpcy4kcmVmcy50cmVlLmZpbHRlcih2YWwpO1xyXG4vLyAgICAgfVxyXG4gIC8vIHdhdGNoKCgpID0+IHZhbCxuZXdWYWwgPT4ge1xyXG4gIC8vICAgZGF0YS5jdXJyZW50TW9kdWxlID0gbmV3VmFsXHJcbiAgLy8gfSlcclxuXHJcbiBcclxuXHJcbn0pXHJcbjwvc2NyaXB0PlxyXG48c3R5bGUgbGFuZz1cImxlc3NcIj5cclxuQGltcG9ydCAnLi9ob21lLmxlc3MnO1xyXG48L3N0eWxlPiIsImltcG9ydCBhcGkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgICAgICAgIGltcG9ydCBjb250ZW50IGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3Qvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9sZXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L2luZGV4LmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzNdLnVzZVswXSEuL2hvbWUudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9NzAxMjViZDcmbGFuZz1sZXNzXCI7XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0IGRlZmF1bHQgY29udGVudC5sb2NhbHMgfHwge307IiwiaW1wb3J0IHsgcmVuZGVyIH0gZnJvbSBcIi4vaG9tZS52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9NzAxMjViZDdcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9ob21lLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qc1wiXG5leHBvcnQgKiBmcm9tIFwiLi9ob21lLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qc1wiXG5cbmltcG9ydCBcIi4vaG9tZS52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD03MDEyNWJkNyZsYW5nPWxlc3NcIlxuc2NyaXB0LnJlbmRlciA9IHJlbmRlclxuXG5leHBvcnQgZGVmYXVsdCBzY3JpcHQiLCI8dGVtcGxhdGU+XG5cbiAgPCEtLSA8SGVsbG9Xb3JsZCBtc2c9XCJoZWxsbyBWdWUzXCI+PC9IZWxsb1dvcmxkPiAtLT5cbiAgPEhvbWVQYWdlPjwvSG9tZVBhZ2U+XG5cbjwvdGVtcGxhdGU+XG48c2NyaXB0PlxuICBpbXBvcnQgSGVsbG9Xb3JsZCBmcm9tICcuL2NvbXBvbmVudHMvSGVsbG93b3JsZC52dWUnXG4gIGltcG9ydCBIb21lUGFnZSBmcm9tICcuL3BhZ2UvaG9tZS52dWUnXG4gIGV4cG9ydCBkZWZhdWx0IHtcbiAgICBuYW1lOidBcHAnLFxuICAgIGNvbXBvbmVudHM6e1xuICAgICAgSGVsbG9Xb3JsZCxIb21lUGFnZVxuICAgIH1cbiAgfVxuPC9zY3JpcHQ+XG5cbjxzdHlsZSBsYW5nPVwibGVzc1wiPlxuLmFwcHtcbiAgYm9yZGVyOjFweCBzb2xpZCAjY2NjO1xufVxuPC9zdHlsZT4iLCJpbXBvcnQgYXBpIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICAgICAgICBpbXBvcnQgY29udGVudCBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L3N0eWxlUG9zdExvYWRlci5qcyEuLi9ub2RlX21vZHVsZXMvbGVzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvZGlzdC9pbmRleC5qcz8/cnVsZVNldFsxXS5ydWxlc1szXS51c2VbMF0hLi9BcHAudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9MmZmNzI3MTImbGFuZz1sZXNzXCI7XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0IGRlZmF1bHQgY29udGVudC5sb2NhbHMgfHwge307IiwiaW1wb3J0IHsgcmVuZGVyIH0gZnJvbSBcIi4vQXBwLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0yZmY3MjcxMlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL0FwcC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anNcIlxuZXhwb3J0ICogZnJvbSBcIi4vQXBwLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qc1wiXG5cbmltcG9ydCBcIi4vQXBwLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTJmZjcyNzEyJmxhbmc9bGVzc1wiXG5zY3JpcHQucmVuZGVyID0gcmVuZGVyXG5cbmV4cG9ydCBkZWZhdWx0IHNjcmlwdCIsIlxuaW1wb3J0IHsgY3JlYXRlQXBwIH0gZnJvbSAndnVlJ1xuaW1wb3J0IEVsZW1lbnRQbHVzIGZyb20gJ2VsZW1lbnQtcGx1cyc7XG5cbmltcG9ydCBBcHAgZnJvbSAnLi9BcHAudnVlJ1xuXG5sZXQgYXBwID0gY3JlYXRlQXBwKEFwcClcbmFwcC51c2UoRWxlbWVudFBsdXMpXG5cbmFwcC5kaXJlY3RpdmUoJ3RyZXNpemUnLCB7XG4gIGJpbmQgKGVsLCBiaW5kaW5nKSB7XG4gICAgbGV0IHdpZHRoID0gJydcbiAgICBsZXQgaGVpZ2h0ID0gJydcbiAgICBsZXQgY2xhc3NOYW1lID0gJydcbiAgICAvLyBjb25zb2xlLmxvZyhjbGFzc05hbWUpXG4gICAgZnVuY3Rpb24gZ2V0ICgpIHtcbiAgICAgIGNvbnN0IHN0eWxlID0gZG9jdW1lbnQuZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZShlbClcbiAgICAgIC8vIGNvbnNvbGUubG9nKHN0eWxlKVxuICAgICAgaWYgKHdpZHRoICE9PSBzdHlsZS53aWR0aCB8fCBoZWlnaHQgIT09IHN0eWxlLmhlaWdodCkge1xuICAgICAgICBjbGFzc05hbWUgPSBlbC5jbGFzc0xpc3RbMF1cbiAgICAgICAgYmluZGluZy52YWx1ZSh7d2lkdGgsIGhlaWdodCwgY2xhc3NOYW1lfSlcbiAgICAgICAgLy8gY29uc29sZS5sb2coZWwuY2xhc3NMaXN0KVxuICAgICAgfVxuICAgICAgd2lkdGggPSBzdHlsZS53aWR0aFxuICAgICAgaGVpZ2h0ID0gc3R5bGUuaGVpZ2h0XG4gICAgICBjbGFzc05hbWUgPSBzdHlsZS5jbGFzc05hbWVcbiAgICB9XG5cbiAgICBlbC5fX3Z1ZVJlaXplX18gPSBzZXRJbnRlcnZhbChnZXQsIDQwMClcbiAgfSxcbiAgdW5iaW5kIChlbCkge1xuICAgIGNsZWFySW50ZXJ2YWwoZWwuX192dWVSZWl6ZV9fKVxuICB9XG59KVxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cbmFwcC5tb3VudChcIiNhcHBcIikiXSwic291cmNlUm9vdCI6IiJ9