/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var e={4308:(e,t,n)=>{"use strict";n.d(t,{Z:()=>i});var l=n(4015),a=n.n(l),o=n(3645),r=n.n(o)()(a());r.push([e.id,".app {\n  border: 1px solid #ccc;\n}\n","",{version:3,sources:["webpack://./src/App.vue","webpack://./App.vue"],names:[],mappings:"AACA;EACE,sBAAA;ACAF",sourcesContent:["\n.app{\n  border:1px solid #ccc;\n}\n",".app {\n  border: 1px solid #ccc;\n}\n"],sourceRoot:""}]);const i=r},2108:(e,t,n)=>{"use strict";n.d(t,{Z:()=>i});var l=n(4015),a=n.n(l),o=n(3645),r=n.n(o)()(a());r.push([e.id,"button {\n  background: #fff;\n  padding: 20px;\n}\n.btn {\n  background: rebeccapurple;\n}\n","",{version:3,sources:["webpack://./src/components/Helloworld.vue","webpack://./Helloworld.vue"],names:[],mappings:"AACA;EACE,gBAAA;EACA,aAAA;ACAF;ADEA;EACE,yBAAA;ACAF",sourcesContent:["\nbutton{\n  background :#fff;\n  padding: 20px;\n}\n.btn{\n  background: rebeccapurple;\n}\n","button {\n  background: #fff;\n  padding: 20px;\n}\n.btn {\n  background: rebeccapurple;\n}\n"],sourceRoot:""}]);const i=r},5937:(e,t,n)=>{"use strict";n.d(t,{Z:()=>i});var l=n(4015),a=n.n(l),o=n(3645),r=n.n(o)()(a());r.push([e.id,"html,\nbody {\n  padding: 0;\n  margin: 0;\n  height: 100%;\n}\n#app {\n  height: 100%;\n}\n.main {\n  position: relative;\n  height: 100%;\n  display: flex;\n}\n.side {\n  -webkit-app-region: drag;\n  z-index: 1;\n  width: 200px;\n  height: 100%;\n  overflow-y: hidden;\n  padding: 12px;\n  background: #f0f0f0;\n  border-right: 1px solid #dedede;\n  box-sizing: border-box;\n}\n.side button {\n  width: 100%;\n  border-radius: 5em;\n  padding: 0.6em;\n  border: none;\n  box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);\n  transition: box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);\n}\n.side .entry {\n  padding: 0 12px;\n}\n.side .entry input {\n  width: 100%;\n  font-size: 14px;\n}\n.side .entry .select-file {\n  position: relative;\n}\n.side .entry .select-file .input-file {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  padding: 0;\n  margin: 0;\n  opacity: 0;\n}\n.side .entry .select-file button {\n  background: #4b5cc4;\n  color: #fff;\n}\n.side .entry .select-file:hover button {\n  background: #5e6bc0;\n  box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2), 0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 15px 0px rgba(0, 0, 0, 0.18);\n}\n.side .catalog {\n  height: calc(100% - 176px);\n}\n.side .catalog h4 {\n  color: #999;\n  padding: 0 4px;\n  margin: 0.8em 0;\n  font-size: 12px;\n  font-weight: normal;\n  cursor: default;\n}\n.side .catalog .search-text {\n  margin-bottom: 0.5rem;\n}\n.side .catalog .el-tree {\n  height: calc(100% - 70px);\n  overflow-y: auto;\n  border: 1px solid #dcdfe6;\n  border-radius: 4px;\n}\n.side .catalog .el-tree-node_expand-icon.is-leaf {\n  color: #c0c4cc;\n}\n.side .output {\n  padding: 0 12px;\n  text-align: center;\n  bottom: 0;\n}\n.side .output p {\n  font-size: 12px;\n  color: #999;\n  font-family: '幼圆';\n  margin: 0;\n  padding-top: 0.2em;\n  cursor: default;\n}\n.side .output p a {\n  color: #999;\n  font-weight: normal;\n}\n.content {\n  height: 100%;\n  flex: 1;\n}\n.content .main-heade {\n  display: flex;\n  box-shadow: 1px 2px 3px rgba(0, 0, 0, 0.08);\n  border-bottom: 1px solid #ddd;\n  position: relative;\n  z-index: 999;\n  background: #f0f0f0;\n}\n.content .main-heade h3 {\n  width: calc(50% - 9px);\n  height: 30px;\n  line-height: 30px;\n  font-size: 14px;\n  box-sizing: border-box;\n  text-indent: 10px;\n  position: relative;\n  text-align: center;\n  cursor: default;\n}\n.content .main-heade h3 .gray {\n  font-size: 12px;\n  color: #999;\n}\n.content section {\n  overflow-y: auto;\n  display: flex;\n  padding-left: 10px;\n  padding-right: 5px;\n  height: calc(100% - 59px);\n}\n.content section .nodata {\n  padding: 40px;\n  padding-top: 120px;\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n  color: #ccc;\n  text-align: center;\n  font-size: 14px;\n  cursor: default;\n}\n.logo {\n  -webkit-app-region: drag;\n  text-align: center;\n  padding: 10px 0;\n}\n.logo h1 {\n  font-size: 14px;\n  color: #999;\n  font-weight: normal;\n  cursor: default;\n  margin: 0.3em;\n}\n.logo a {\n  color: #999;\n}\n.mini {\n  padding: 0.2em 0.5em;\n  font-size: 12px;\n  margin: 0;\n  background: transparent;\n  color: #118bee;\n  border-width: 1px;\n  line-height: 1;\n  border-radius: 2px;\n}\nul {\n  list-style: none;\n}\n.main-heade h3:nth-child(1) {\n  text-indent: 20px;\n}\n.kv:nth-child(1) dl::after {\n  content: '';\n  width: 1px;\n  height: 100%;\n  border-right: 1px dashed #ccc;\n  position: absolute;\n  top: 2px;\n  right: 0px;\n}\n.kv {\n  position: relative;\n  width: 50%;\n}\n.kv em {\n  color: teal;\n  opacity: 0.8;\n}\n.kv dl {\n  position: relative;\n  margin: 0;\n}\n.kv dl:nth-child(even) {\n  background: #f5f6f9;\n}\n.kv dl dt {\n  width: 100%;\n  line-height: 1.4;\n}\n.kv dl dt em {\n  display: inline-block;\n  padding: 5px;\n}\n.kv dl dd {\n  padding-bottom: 10px;\n  padding-right: 10px;\n}\n.kv dl dd > div {\n  display: flex;\n}\n.kv dl dd > div label {\n  font-size: 12px;\n  font-weight: normal;\n  color: #ccc;\n  display: inline-block;\n  min-width: 20px;\n  padding: 4px;\n  text-align: right;\n}\n.kv dl dd ul {\n  padding-left: 10px;\n  margin: 0;\n}\n.kv dl dd ul em {\n  font-size: 12px;\n  opacity: 0.5;\n}\n.kv dl dd .child-item li {\n  align-items: center;\n}\n.kv dl dd .child-item li em {\n  padding: 4px;\n  display: inline-block;\n  width: 60px;\n  text-align: right;\n}\n.kv textarea {\n  width: 96%;\n  resize: vertical;\n  transition: height 0.1s;\n  font-size: 12px;\n  margin-bottom: 0;\n  height: 30px;\n  padding: 4px 8px;\n  line-height: 1.6;\n  border-radius: 0px;\n  border-width: 0.7;\n  background: #fffff1;\n}\n.kv textarea:focus {\n  outline: 1px solid #9d9d9d;\n  outline-offset: -1px;\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);\n  background: #ffffdf;\n}\n.el-dialog {\n  background: #ECECEC;\n}\n.el-dialog .dialog-title em {\n  font-size: small;\n  font-style: normal;\n}\n.el-dialog button {\n  margin: 0;\n}\n.el-dialog .el-dialog__header {\n  padding-top: 10px;\n}\n.el-dialog .el-dialog__headerbtn {\n  top: 10px;\n}\n.el-dialog .el-dialog__body {\n  padding: 20px 40px 0;\n}\n.el-dialog .el-dialog__footer {\n  padding-right: 40px;\n}\n::-webkit-scrollbar {\n  width: 4px;\n  height: 4px;\n  background-color: transparent;\n  /* or add it to the track */\n}\n::-webkit-scrollbar-thumb {\n  background: #118bee;\n  border-radius: 5px;\n}\n::-webkit-scrollbar-corner {\n  background-color: transparent;\n  /* or add it to the track */\n}\n","",{version:3,sources:["webpack://./src/page/home.less","webpack://./home.vue"],names:[],mappings:"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",sourcesContent:["html,\nbody{\n  padding:0;\n  margin: 0;\n  height: 100%;\n}\n#app{\n  height: 100%;\n}\n\n.main{\n  position: relative;\n  height: 100%;\n  display: flex;\n}\n.side{\n  -webkit-app-region: drag;\n  z-index: 1;\n  width: 200px;\n  height: 100%;\n  overflow-y: hidden;\n  padding: 12px;\n  background: #f0f0f0;\n  border-right: 1px solid #dedede;\n  box-sizing: border-box;\n  button{\n    width: 100%;\n    border-radius: 5em;\n    padding: .6em;\n    border:none;\n    box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0,0,0,.12);\n    transition: box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);\n  }\n  .entry{\n    padding:0 12px;\n    input{\n      width: 100%;\n      font-size: 14px;\n    }\n    .select-file{\n      position: relative;\n      .input-file{\n        width: 100%;\n        height: 100%;\n        position: absolute;\n        left: 0;\n        top: 0;\n        padding: 0;\n        margin: 0;\n        opacity: 0;\n      }\n      button{\n        background: #4b5cc4;\n        color: #fff;\n      }\n      &:hover{\n        button{\n          background: #5e6bc0;\n          box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2), 0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 15px 0px rgba(0,0,0,.18);\n        }\n      }\n    }\n    \n  }\n  .catalog{\n    height: calc(100% - 176px);\n    h4{\n      color: #999;\n      padding: 0 4px;\n      margin: .8em 0;\n      font-size: 12px;\n      font-weight: normal;\n      cursor: default;\n    }\n    .search-text{\n      margin-bottom: .5rem;\n    }\n    .el-tree{\n      height: calc(100% - 70px);\n      overflow-y: auto;\n      border:1px solid #dcdfe6;\n      border-radius: 4px;\n    }\n    .el-tree-node_expand-icon.is-leaf{\n      color:#c0c4cc;\n    }\n  }\n  .output{\n    padding:0 12px;\n    // position:absolute;\n    // width: 152px;\n    text-align: center;\n    bottom: 0;\n    p{\n      font-size: 12px;\n      color: #999;\n      font-family: '幼圆';\n      margin: 0;\n      padding-top: .2em;\n      cursor: default;\n      a{\n        color: #999;\n        font-weight: normal;\n      }\n    }\n  }\n}\n.content{\n  height: 100%;\n  flex: 1;\n  .main-heade{\n    display: flex;\n    box-shadow: 1px 2px 3px rgba(0,0,0,.08);\n    border-bottom: 1px solid #ddd;\n    position: relative;\n    z-index: 999;\n    background: #f0f0f0;\n    h3{\n      width: calc(50% - 9px);\n      height: 30px;\n      line-height: 30px;\n      font-size: 14px;\n      box-sizing: border-box;\n      text-indent: 10px;\n      position: relative;\n      text-align: center;\n      cursor: default;\n      .gray{\n        font-size: 12px;\n        color: #999;\n      }\n    }\n  }\n  section{\n    overflow-y: auto;\n    display: flex;\n    padding-left: 10px;\n    padding-right: 5px;\n    height: calc(100% - 59px);\n    \n    //scroll-behavior: instant;//smooth\n    .nodata{\n      padding: 40px;\n      padding-top: 120px;\n      width: 100%;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      flex-direction: column;\n      color: #ccc;\n      text-align: center;\n      font-size: 14px;\n      cursor: default;\n    }\n  }\n}\n.logo{\n  -webkit-app-region: drag;\n  text-align: center;\n  padding: 10px 0;\n  h1{\n    font-size: 14px;\n    color: #999;\n    font-weight: normal;\n    cursor: default;\n    margin: .3em;\n  }\n  a{color: #999;}\n}\n.mini{\n  padding: .2em .5em;\n  font-size: 12px;\n  margin: 0;\n  background: transparent;\n  color: #118bee;\n  border-width: 1px;\n  line-height: 1;\n  border-radius: 2px;\n}\nul{list-style: none;}\n\n.main-heade h3:nth-child(1){\n  text-indent: 20px;\n}\n//.main-heade h3:nth-child(1),\n.kv:nth-child(1) dl{\n  &::after{\n    content: '';\n    width: 1px;\n    height: 100%;\n    border-right: 1px dashed #ccc;\n    position: absolute;\n    top: 2px;\n    right: 0px;\n  }\n}\n.kv{\n  position: relative;\n  width: 50%;\n  em{color: teal;opacity: .8;}\n  dl{\n    position: relative;\n    margin: 0;\n    &:nth-child(even){\n      background: #f5f6f9;\n    }\n    dt{\n      width: 100%;\n      line-height: 1.4;\n      \n      em{\n        display: inline-block;\n        padding: 5px;\n      }\n    }\n    dd{\n      padding-bottom: 10px;\n      padding-right: 10px;\n      &>div{\n        display: flex;\n        label{\n          font-size: 12px;\n          font-weight: normal;\n          color: #ccc;\n          display: inline-block;\n          min-width: 20px;\n          padding: 4px;\n          text-align: right;\n        }\n      }\n      ul{\n        padding-left: 10px;\n        margin: 0;\n        em{font-size: 12px;opacity: 0.5;}\n      }\n      .child-item{\n        li{\n          align-items: center;\n          em{\n            padding: 4px;\n            display: inline-block;\n            width: 60px;\n            text-align: right;\n          }\n        }\n      }\n    }\n  }\n  textarea{\n    width: 96%;\n    resize: vertical;\n    transition: height .1s;\n    font-size: 12px;\n    margin-bottom: 0;\n    height: 30px;\n    padding: 4px 8px;\n    line-height: 1.6;\n    border-radius: 0px;\n    border-width: 0.7;\n    background: #fffff1;\n    &:focus{\n      outline: 1px solid #9d9d9d;\n      outline-offset: -1px;\n      box-shadow: 0 0 10px rgba(0,0,0,.2);\n      background: #ffffdf;\n    }\n  }\n}\n.el-dialog{\n  background: #ECECEC;\n  .dialog-title{\n    em{\n      font-size: small;\n      font-style: normal;\n    }\n  }\n  button{\n    margin: 0;\n  }\n  .el-dialog__header{\n    padding-top: 10px;\n  }\n  .el-dialog__headerbtn{\n    top:10px;\n  }\n  .el-dialog__body{\n    padding: 20px 40px 0;\n  }\n  .el-dialog__footer{\n    padding-right: 40px;\n  }\n}\n\n//scrollbar style\n::-webkit-scrollbar {\n  width: 4px;\n  height: 4px;\n  background-color: transparent;\n  /* or add it to the track */\n}\n\n::-webkit-scrollbar-thumb {\n  background:#118bee;\n  border-radius: 5px;\n}\n\n::-webkit-scrollbar-corner {\n  background-color: transparent;\n  /* or add it to the track */\n}","html,\nbody {\n  padding: 0;\n  margin: 0;\n  height: 100%;\n}\n#app {\n  height: 100%;\n}\n.main {\n  position: relative;\n  height: 100%;\n  display: flex;\n}\n.side {\n  -webkit-app-region: drag;\n  z-index: 1;\n  width: 200px;\n  height: 100%;\n  overflow-y: hidden;\n  padding: 12px;\n  background: #f0f0f0;\n  border-right: 1px solid #dedede;\n  box-sizing: border-box;\n}\n.side button {\n  width: 100%;\n  border-radius: 5em;\n  padding: 0.6em;\n  border: none;\n  box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);\n  transition: box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);\n}\n.side .entry {\n  padding: 0 12px;\n}\n.side .entry input {\n  width: 100%;\n  font-size: 14px;\n}\n.side .entry .select-file {\n  position: relative;\n}\n.side .entry .select-file .input-file {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  padding: 0;\n  margin: 0;\n  opacity: 0;\n}\n.side .entry .select-file button {\n  background: #4b5cc4;\n  color: #fff;\n}\n.side .entry .select-file:hover button {\n  background: #5e6bc0;\n  box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2), 0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 15px 0px rgba(0, 0, 0, 0.18);\n}\n.side .catalog {\n  height: calc(100% - 176px);\n}\n.side .catalog h4 {\n  color: #999;\n  padding: 0 4px;\n  margin: 0.8em 0;\n  font-size: 12px;\n  font-weight: normal;\n  cursor: default;\n}\n.side .catalog .search-text {\n  margin-bottom: 0.5rem;\n}\n.side .catalog .el-tree {\n  height: calc(100% - 70px);\n  overflow-y: auto;\n  border: 1px solid #dcdfe6;\n  border-radius: 4px;\n}\n.side .catalog .el-tree-node_expand-icon.is-leaf {\n  color: #c0c4cc;\n}\n.side .output {\n  padding: 0 12px;\n  text-align: center;\n  bottom: 0;\n}\n.side .output p {\n  font-size: 12px;\n  color: #999;\n  font-family: '幼圆';\n  margin: 0;\n  padding-top: 0.2em;\n  cursor: default;\n}\n.side .output p a {\n  color: #999;\n  font-weight: normal;\n}\n.content {\n  height: 100%;\n  flex: 1;\n}\n.content .main-heade {\n  display: flex;\n  box-shadow: 1px 2px 3px rgba(0, 0, 0, 0.08);\n  border-bottom: 1px solid #ddd;\n  position: relative;\n  z-index: 999;\n  background: #f0f0f0;\n}\n.content .main-heade h3 {\n  width: calc(50% - 9px);\n  height: 30px;\n  line-height: 30px;\n  font-size: 14px;\n  box-sizing: border-box;\n  text-indent: 10px;\n  position: relative;\n  text-align: center;\n  cursor: default;\n}\n.content .main-heade h3 .gray {\n  font-size: 12px;\n  color: #999;\n}\n.content section {\n  overflow-y: auto;\n  display: flex;\n  padding-left: 10px;\n  padding-right: 5px;\n  height: calc(100% - 59px);\n}\n.content section .nodata {\n  padding: 40px;\n  padding-top: 120px;\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n  color: #ccc;\n  text-align: center;\n  font-size: 14px;\n  cursor: default;\n}\n.logo {\n  -webkit-app-region: drag;\n  text-align: center;\n  padding: 10px 0;\n}\n.logo h1 {\n  font-size: 14px;\n  color: #999;\n  font-weight: normal;\n  cursor: default;\n  margin: 0.3em;\n}\n.logo a {\n  color: #999;\n}\n.mini {\n  padding: 0.2em 0.5em;\n  font-size: 12px;\n  margin: 0;\n  background: transparent;\n  color: #118bee;\n  border-width: 1px;\n  line-height: 1;\n  border-radius: 2px;\n}\nul {\n  list-style: none;\n}\n.main-heade h3:nth-child(1) {\n  text-indent: 20px;\n}\n.kv:nth-child(1) dl::after {\n  content: '';\n  width: 1px;\n  height: 100%;\n  border-right: 1px dashed #ccc;\n  position: absolute;\n  top: 2px;\n  right: 0px;\n}\n.kv {\n  position: relative;\n  width: 50%;\n}\n.kv em {\n  color: teal;\n  opacity: 0.8;\n}\n.kv dl {\n  position: relative;\n  margin: 0;\n}\n.kv dl:nth-child(even) {\n  background: #f5f6f9;\n}\n.kv dl dt {\n  width: 100%;\n  line-height: 1.4;\n}\n.kv dl dt em {\n  display: inline-block;\n  padding: 5px;\n}\n.kv dl dd {\n  padding-bottom: 10px;\n  padding-right: 10px;\n}\n.kv dl dd > div {\n  display: flex;\n}\n.kv dl dd > div label {\n  font-size: 12px;\n  font-weight: normal;\n  color: #ccc;\n  display: inline-block;\n  min-width: 20px;\n  padding: 4px;\n  text-align: right;\n}\n.kv dl dd ul {\n  padding-left: 10px;\n  margin: 0;\n}\n.kv dl dd ul em {\n  font-size: 12px;\n  opacity: 0.5;\n}\n.kv dl dd .child-item li {\n  align-items: center;\n}\n.kv dl dd .child-item li em {\n  padding: 4px;\n  display: inline-block;\n  width: 60px;\n  text-align: right;\n}\n.kv textarea {\n  width: 96%;\n  resize: vertical;\n  transition: height 0.1s;\n  font-size: 12px;\n  margin-bottom: 0;\n  height: 30px;\n  padding: 4px 8px;\n  line-height: 1.6;\n  border-radius: 0px;\n  border-width: 0.7;\n  background: #fffff1;\n}\n.kv textarea:focus {\n  outline: 1px solid #9d9d9d;\n  outline-offset: -1px;\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);\n  background: #ffffdf;\n}\n.el-dialog {\n  background: #ECECEC;\n}\n.el-dialog .dialog-title em {\n  font-size: small;\n  font-style: normal;\n}\n.el-dialog button {\n  margin: 0;\n}\n.el-dialog .el-dialog__header {\n  padding-top: 10px;\n}\n.el-dialog .el-dialog__headerbtn {\n  top: 10px;\n}\n.el-dialog .el-dialog__body {\n  padding: 20px 40px 0;\n}\n.el-dialog .el-dialog__footer {\n  padding-right: 40px;\n}\n::-webkit-scrollbar {\n  width: 4px;\n  height: 4px;\n  background-color: transparent;\n  /* or add it to the track */\n}\n::-webkit-scrollbar-thumb {\n  background: #118bee;\n  border-radius: 5px;\n}\n::-webkit-scrollbar-corner {\n  background-color: transparent;\n  /* or add it to the track */\n}\n"],sourceRoot:""}]);const i=r},3645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=e(t);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,l){"string"==typeof e&&(e=[[null,e,""]]);var a={};if(l)for(var o=0;o<this.length;o++){var r=this[o][0];null!=r&&(a[r]=!0)}for(var i=0;i<e.length;i++){var s=[].concat(e[i]);l&&a[s[0]]||(n&&(s[2]?s[2]="".concat(n," and ").concat(s[2]):s[2]=n),t.push(s))}},t}},4015:e=>{"use strict";function t(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,l=new Array(t);n<t;n++)l[n]=e[n];return l}e.exports=function(e){var n,l,a=(l=4,function(e){if(Array.isArray(e))return e}(n=e)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],l=!0,a=!1,o=void 0;try{for(var r,i=e[Symbol.iterator]();!(l=(r=i.next()).done)&&(n.push(r.value),!t||n.length!==t);l=!0);}catch(e){a=!0,o=e}finally{try{l||null==i.return||i.return()}finally{if(a)throw o}}return n}}(n,l)||function(e,n){if(e){if("string"==typeof e)return t(e,n);var l=Object.prototype.toString.call(e).slice(8,-1);return"Object"===l&&e.constructor&&(l=e.constructor.name),"Map"===l||"Set"===l?Array.from(e):"Arguments"===l||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(l)?t(e,n):void 0}}(n,l)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=a[1],r=a[3];if("function"==typeof btoa){var i=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(i),u="/*# ".concat(s," */"),c=r.sources.map((function(e){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(e," */")}));return[o].concat(c).concat([u]).join("\n")}return[o].join("\n")}},7484:function(e){e.exports=function(){"use strict";var e="millisecond",t="second",n="minute",l="hour",a="day",o="week",r="month",i="quarter",s="year",u="date",c=/^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[^0-9]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?.?(\d+)?$/,d=/\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g,p={name:"en",weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_")},f=function(e,t,n){var l=String(e);return!l||l.length>=t?e:""+Array(t+1-l.length).join(n)+e},h={s:f,z:function(e){var t=-e.utcOffset(),n=Math.abs(t),l=Math.floor(n/60),a=n%60;return(t<=0?"+":"-")+f(l,2,"0")+":"+f(a,2,"0")},m:function e(t,n){if(t.date()<n.date())return-e(n,t);var l=12*(n.year()-t.year())+(n.month()-t.month()),a=t.clone().add(l,r),o=n-a<0,i=t.clone().add(l+(o?-1:1),r);return+(-(l+(n-a)/(o?a-i:i-a))||0)},a:function(e){return e<0?Math.ceil(e)||0:Math.floor(e)},p:function(c){return{M:r,y:s,w:o,d:a,D:u,h:l,m:n,s:t,ms:e,Q:i}[c]||String(c||"").toLowerCase().replace(/s$/,"")},u:function(e){return void 0===e}},v="en",m={};m[v]=p;var g=function(e){return e instanceof k},b=function(e,t,n){var l;if(!e)return v;if("string"==typeof e)m[e]&&(l=e),t&&(m[e]=t,l=e);else{var a=e.name;m[a]=e,l=a}return!n&&l&&(v=l),l||!n&&v},y=function(e,t){if(g(e))return e.clone();var n="object"==typeof t?t:{};return n.date=e,n.args=arguments,new k(n)},x=h;x.l=b,x.i=g,x.w=function(e,t){return y(e,{locale:t.$L,utc:t.$u,x:t.$x,$offset:t.$offset})};var k=function(){function p(e){this.$L=b(e.locale,null,!0),this.parse(e)}var f=p.prototype;return f.parse=function(e){this.$d=function(e){var t=e.date,n=e.utc;if(null===t)return new Date(NaN);if(x.u(t))return new Date;if(t instanceof Date)return new Date(t);if("string"==typeof t&&!/Z$/i.test(t)){var l=t.match(c);if(l){var a=l[2]-1||0,o=(l[7]||"0").substring(0,3);return n?new Date(Date.UTC(l[1],a,l[3]||1,l[4]||0,l[5]||0,l[6]||0,o)):new Date(l[1],a,l[3]||1,l[4]||0,l[5]||0,l[6]||0,o)}}return new Date(t)}(e),this.$x=e.x||{},this.init()},f.init=function(){var e=this.$d;this.$y=e.getFullYear(),this.$M=e.getMonth(),this.$D=e.getDate(),this.$W=e.getDay(),this.$H=e.getHours(),this.$m=e.getMinutes(),this.$s=e.getSeconds(),this.$ms=e.getMilliseconds()},f.$utils=function(){return x},f.isValid=function(){return!("Invalid Date"===this.$d.toString())},f.isSame=function(e,t){var n=y(e);return this.startOf(t)<=n&&n<=this.endOf(t)},f.isAfter=function(e,t){return y(e)<this.startOf(t)},f.isBefore=function(e,t){return this.endOf(t)<y(e)},f.$g=function(e,t,n){return x.u(e)?this[t]:this.set(n,e)},f.unix=function(){return Math.floor(this.valueOf()/1e3)},f.valueOf=function(){return this.$d.getTime()},f.startOf=function(e,i){var c=this,d=!!x.u(i)||i,p=x.p(e),f=function(e,t){var n=x.w(c.$u?Date.UTC(c.$y,t,e):new Date(c.$y,t,e),c);return d?n:n.endOf(a)},h=function(e,t){return x.w(c.toDate()[e].apply(c.toDate("s"),(d?[0,0,0,0]:[23,59,59,999]).slice(t)),c)},v=this.$W,m=this.$M,g=this.$D,b="set"+(this.$u?"UTC":"");switch(p){case s:return d?f(1,0):f(31,11);case r:return d?f(1,m):f(0,m+1);case o:var y=this.$locale().weekStart||0,k=(v<y?v+7:v)-y;return f(d?g-k:g+(6-k),m);case a:case u:return h(b+"Hours",0);case l:return h(b+"Minutes",1);case n:return h(b+"Seconds",2);case t:return h(b+"Milliseconds",3);default:return this.clone()}},f.endOf=function(e){return this.startOf(e,!1)},f.$set=function(o,i){var c,d=x.p(o),p="set"+(this.$u?"UTC":""),f=(c={},c[a]=p+"Date",c[u]=p+"Date",c[r]=p+"Month",c[s]=p+"FullYear",c[l]=p+"Hours",c[n]=p+"Minutes",c[t]=p+"Seconds",c[e]=p+"Milliseconds",c)[d],h=d===a?this.$D+(i-this.$W):i;if(d===r||d===s){var v=this.clone().set(u,1);v.$d[f](h),v.init(),this.$d=v.set(u,Math.min(this.$D,v.daysInMonth())).$d}else f&&this.$d[f](h);return this.init(),this},f.set=function(e,t){return this.clone().$set(e,t)},f.get=function(e){return this[x.p(e)]()},f.add=function(e,i){var u,c=this;e=Number(e);var d=x.p(i),p=function(t){var n=y(c);return x.w(n.date(n.date()+Math.round(t*e)),c)};if(d===r)return this.set(r,this.$M+e);if(d===s)return this.set(s,this.$y+e);if(d===a)return p(1);if(d===o)return p(7);var f=(u={},u[n]=6e4,u[l]=36e5,u[t]=1e3,u)[d]||1,h=this.$d.getTime()+e*f;return x.w(h,this)},f.subtract=function(e,t){return this.add(-1*e,t)},f.format=function(e){var t=this;if(!this.isValid())return"Invalid Date";var n=e||"YYYY-MM-DDTHH:mm:ssZ",l=x.z(this),a=this.$locale(),o=this.$H,r=this.$m,i=this.$M,s=a.weekdays,u=a.months,c=function(e,l,a,o){return e&&(e[l]||e(t,n))||a[l].substr(0,o)},p=function(e){return x.s(o%12||12,e,"0")},f=a.meridiem||function(e,t,n){var l=e<12?"AM":"PM";return n?l.toLowerCase():l},h={YY:String(this.$y).slice(-2),YYYY:this.$y,M:i+1,MM:x.s(i+1,2,"0"),MMM:c(a.monthsShort,i,u,3),MMMM:c(u,i),D:this.$D,DD:x.s(this.$D,2,"0"),d:String(this.$W),dd:c(a.weekdaysMin,this.$W,s,2),ddd:c(a.weekdaysShort,this.$W,s,3),dddd:s[this.$W],H:String(o),HH:x.s(o,2,"0"),h:p(1),hh:p(2),a:f(o,r,!0),A:f(o,r,!1),m:String(r),mm:x.s(r,2,"0"),s:String(this.$s),ss:x.s(this.$s,2,"0"),SSS:x.s(this.$ms,3,"0"),Z:l};return n.replace(d,(function(e,t){return t||h[e]||l.replace(":","")}))},f.utcOffset=function(){return 15*-Math.round(this.$d.getTimezoneOffset()/15)},f.diff=function(e,u,c){var d,p=x.p(u),f=y(e),h=6e4*(f.utcOffset()-this.utcOffset()),v=this-f,m=x.m(this,f);return m=(d={},d[s]=m/12,d[r]=m,d[i]=m/3,d[o]=(v-h)/6048e5,d[a]=(v-h)/864e5,d[l]=v/36e5,d[n]=v/6e4,d[t]=v/1e3,d)[p]||v,c?m:x.a(m)},f.daysInMonth=function(){return this.endOf(r).$D},f.$locale=function(){return m[this.$L]},f.locale=function(e,t){if(!e)return this.$L;var n=this.clone(),l=b(e,t,!0);return l&&(n.$L=l),n},f.clone=function(){return x.w(this.$d,this)},f.toDate=function(){return new Date(this.valueOf())},f.toJSON=function(){return this.isValid()?this.toISOString():null},f.toISOString=function(){return this.$d.toISOString()},f.toString=function(){return this.$d.toUTCString()},p}(),w=k.prototype;return y.prototype=w,[["$ms",e],["$s",t],["$m",n],["$H",l],["$W",a],["$M",r],["$y",s],["$D",u]].forEach((function(e){w[e[1]]=function(t){return this.$g(t,e[0],e[1])}})),y.extend=function(e,t){return e.$i||(e(t,k,y),e.$i=!0),y},y.locale=b,y.isDayjs=g,y.unix=function(e){return y(1e3*e)},y.en=m[v],y.Ls=m,y.p={},y}()},8734:function(e){e.exports=function(){"use strict";return function(e,t,n){var l=t.prototype,a=l.format;n.en.ordinal=function(e){var t=["th","st","nd","rd"],n=e%100;return"["+e+(t[(n-20)%10]||t[n]||t[0])+"]"},l.format=function(e){var t=this,n=this.$locale(),l=this.$utils(),o=(e||"YYYY-MM-DDTHH:mm:ssZ").replace(/\[([^\]]+)]|Q|wo|ww|w|zzz|z|gggg|Do|X|x|k{1,2}|S/g,(function(e){switch(e){case"Q":return Math.ceil((t.$M+1)/3);case"Do":return n.ordinal(t.$D);case"gggg":return t.weekYear();case"wo":return n.ordinal(t.week(),"W");case"w":case"ww":return l.s(t.week(),"w"===e?1:2,"0");case"k":case"kk":return l.s(String(0===t.$H?24:t.$H),"k"===e?1:2,"0");case"X":return Math.floor(t.$d.getTime()/1e3);case"x":return t.$d.getTime();case"z":return"["+t.offsetName()+"]";case"zzz":return"["+t.offsetName("long")+"]";default:return e}}));return a.bind(this)(o)}}}()},285:function(e){e.exports=function(){"use strict";var e,t={LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},n=function(e,n){return e.replace(/(\[[^\]]+])|(LTS?|l{1,4}|L{1,4})/g,(function(e,l,a){var o=a&&a.toUpperCase();return l||n[a]||t[a]||n[o].replace(/(\[[^\]]+])|(MMMM|MM|DD|dddd)/g,(function(e,t,n){return t||n.slice(1)}))}))},l=/(\[[^[]*\])|([-:/.()\s]+)|(A|a|YYYY|YY?|MM?M?M?|Do|DD?|hh?|HH?|mm?|ss?|S{1,3}|z|ZZ?)/g,a=/\d\d/,o=/\d\d?/,r=/\d*[^\s\d-:/()]+/,i=function(e){return function(t){this[e]=+t}},s=[/[+-]\d\d:?(\d\d)?/,function(e){(this.zone||(this.zone={})).offset=function(e){if(!e)return 0;var t=e.match(/([+-]|\d\d)/g),n=60*t[1]+(+t[2]||0);return 0===n?0:"+"===t[0]?-n:n}(e)}],u=function(t){var n=e[t];return n&&(n.indexOf?n:n.s.concat(n.f))},c=function(t,n){var l,a=e.meridiem;if(a){for(var o=1;o<=24;o+=1)if(t.indexOf(a(o,0,n))>-1){l=o>12;break}}else l=t===(n?"pm":"PM");return l},d={A:[r,function(e){this.afternoon=c(e,!1)}],a:[r,function(e){this.afternoon=c(e,!0)}],S:[/\d/,function(e){this.milliseconds=100*+e}],SS:[a,function(e){this.milliseconds=10*+e}],SSS:[/\d{3}/,function(e){this.milliseconds=+e}],s:[o,i("seconds")],ss:[o,i("seconds")],m:[o,i("minutes")],mm:[o,i("minutes")],H:[o,i("hours")],h:[o,i("hours")],HH:[o,i("hours")],hh:[o,i("hours")],D:[o,i("day")],DD:[a,i("day")],Do:[r,function(t){var n=e.ordinal,l=t.match(/\d+/);if(this.day=l[0],n)for(var a=1;a<=31;a+=1)n(a).replace(/\[|\]/g,"")===t&&(this.day=a)}],M:[o,i("month")],MM:[a,i("month")],MMM:[r,function(e){var t=u("months"),n=(u("monthsShort")||t.map((function(e){return e.substr(0,3)}))).indexOf(e)+1;if(n<1)throw new Error;this.month=n%12||n}],MMMM:[r,function(e){var t=u("months").indexOf(e)+1;if(t<1)throw new Error;this.month=t%12||t}],Y:[/[+-]?\d+/,i("year")],YY:[a,function(e){e=+e,this.year=e+(e>68?1900:2e3)}],YYYY:[/\d{4}/,i("year")],Z:s,ZZ:s},p=function(t,a,o){try{var r=function(t){for(var a=(t=n(t,e&&e.formats)).match(l),o=a.length,r=0;r<o;r+=1){var i=a[r],s=d[i],u=s&&s[0],c=s&&s[1];a[r]=c?{regex:u,parser:c}:i.replace(/^\[|\]$/g,"")}return function(e){for(var t={},n=0,l=0;n<o;n+=1){var r=a[n];if("string"==typeof r)l+=r.length;else{var i=r.regex,s=r.parser,u=e.substr(l),c=i.exec(u)[0];s.call(t,c),e=e.replace(c,"")}}return function(e){var t=e.afternoon;if(void 0!==t){var n=e.hours;t?n<12&&(e.hours+=12):12===n&&(e.hours=0),delete e.afternoon}}(t),t}}(a)(t),i=r.year,s=r.month,u=r.day,c=r.hours,p=r.minutes,f=r.seconds,h=r.milliseconds,v=r.zone,m=new Date,g=u||(i||s?1:m.getDate()),b=i||m.getFullYear(),y=0;i&&!s||(y=s>0?s-1:m.getMonth());var x=c||0,k=p||0,w=f||0,C=h||0;return v?new Date(Date.UTC(b,y,g,x,k,w,C+60*v.offset*1e3)):o?new Date(Date.UTC(b,y,g,x,k,w,C)):new Date(b,y,g,x,k,w,C)}catch(e){return new Date("")}};return function(t,n,l){l.p.customParseFormat=!0;var a=n.prototype,o=a.parse;a.parse=function(t){var n=t.date,a=t.utc,r=t.args;this.$u=a;var i=r[1];if("string"==typeof i){var s=!0===r[2],u=!0===r[3],c=s||u,d=r[2];u&&(d=r[2]),s||(e=d?l.Ls[d]:this.$locale()),this.$d=p(n,i,a),this.init(),d&&!0!==d&&(this.$L=this.locale(d).$L),c&&n!==this.format(i)&&(this.$d=new Date("")),e=void 0}else if(i instanceof Array)for(var f=i.length,h=1;h<=f;h+=1){r[1]=i[h-1];var v=l.apply(this,r);if(v.isValid()){this.$d=v.$d,this.$L=v.$L,this.init();break}h===f&&(this.$d=new Date(""))}else o.call(this,t)}}}()},423:function(e){e.exports=function(){"use strict";return function(e,t){t.prototype.isLeapYear=function(){return this.$y%4==0&&this.$y%100!=0||this.$y%400==0}}}()},9212:function(e){e.exports=function(){"use strict";return function(e,t){t.prototype.isSameOrAfter=function(e,t){return this.isSame(e,t)||this.isAfter(e,t)}}}()},7412:function(e){e.exports=function(){"use strict";return function(e,t){t.prototype.isSameOrBefore=function(e,t){return this.isSame(e,t)||this.isBefore(e,t)}}}()},6036:function(e){e.exports=function(){"use strict";return function(e,t,n){var l=function(e){return e&&(e.indexOf?e:e.s)},a=function(e,t,n,a,o){var r=e.name?e:e.$locale(),i=l(r[t]),s=l(r[n]),u=i||s.map((function(e){return e.substr(0,a)}));if(!o)return u;var c=r.weekStart;return u.map((function(e,t){return u[(t+(c||0))%7]}))},o=function(){return n.Ls[n.locale()]},r=function(e,t){return e.formats[t]||function(e){return e.replace(/(\[[^\]]+])|(MMMM|MM|DD|dddd)/g,(function(e,t,n){return t||n.slice(1)}))}(e.formats[t.toUpperCase()])};t.prototype.localeData=function(){return function(){var e=this;return{months:function(t){return t?t.format("MMMM"):a(e,"months")},monthsShort:function(t){return t?t.format("MMM"):a(e,"monthsShort","months",3)},firstDayOfWeek:function(){return e.$locale().weekStart||0},weekdays:function(t){return t?t.format("dddd"):a(e,"weekdays")},weekdaysMin:function(t){return t?t.format("dd"):a(e,"weekdaysMin","weekdays",2)},weekdaysShort:function(t){return t?t.format("ddd"):a(e,"weekdaysShort","weekdays",3)},longDateFormat:function(t){return r(e.$locale(),t)},meridiem:this.$locale().meridiem}}.bind(this)()},n.localeData=function(){var e=o();return{firstDayOfWeek:function(){return e.weekStart||0},weekdays:function(){return n.weekdays()},weekdaysShort:function(){return n.weekdaysShort()},weekdaysMin:function(){return n.weekdaysMin()},months:function(){return n.months()},monthsShort:function(){return n.monthsShort()},longDateFormat:function(t){return r(e,t)},meridiem:e.meridiem}},n.months=function(){return a(o(),"months")},n.monthsShort=function(){return a(o(),"monthsShort","months",3)},n.weekdays=function(e){return a(o(),"weekdays",null,null,e)},n.weekdaysShort=function(e){return a(o(),"weekdaysShort","weekdays",3,e)},n.weekdaysMin=function(e){return a(o(),"weekdaysMin","weekdays",2,e)}}}()},5183:function(e){e.exports=function(){"use strict";var e="week",t="year";return function(n,l,a){var o=l.prototype;o.week=function(n){if(void 0===n&&(n=null),null!==n)return this.add(7*(n-this.week()),"day");var l=this.$locale().yearStart||1;if(11===this.month()&&this.date()>25){var o=a(this).startOf(t).add(1,t).date(l),r=a(this).endOf(e);if(o.isBefore(r))return 1}var i=a(this).startOf(t).date(l).startOf(e).subtract(1,"millisecond"),s=this.diff(i,e,!0);return s<0?a(this).startOf("week").week():Math.ceil(s)},o.weeks=function(e){return void 0===e&&(e=null),this.week(e)}}}()},172:function(e){e.exports=function(){"use strict";return function(e,t){t.prototype.weekYear=function(){var e=this.month(),t=this.week(),n=this.year();return 1===t&&11===e?n+1:n}}}()},8552:(e,t,n)=>{var l=n(852)(n(5639),"DataView");e.exports=l},1989:(e,t,n)=>{var l=n(1789),a=n(401),o=n(7667),r=n(1327),i=n(1866);function s(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var l=e[t];this.set(l[0],l[1])}}s.prototype.clear=l,s.prototype.delete=a,s.prototype.get=o,s.prototype.has=r,s.prototype.set=i,e.exports=s},8407:(e,t,n)=>{var l=n(7040),a=n(4125),o=n(2117),r=n(7518),i=n(4705);function s(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var l=e[t];this.set(l[0],l[1])}}s.prototype.clear=l,s.prototype.delete=a,s.prototype.get=o,s.prototype.has=r,s.prototype.set=i,e.exports=s},7071:(e,t,n)=>{var l=n(852)(n(5639),"Map");e.exports=l},3369:(e,t,n)=>{var l=n(4785),a=n(1285),o=n(6e3),r=n(9916),i=n(5265);function s(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var l=e[t];this.set(l[0],l[1])}}s.prototype.clear=l,s.prototype.delete=a,s.prototype.get=o,s.prototype.has=r,s.prototype.set=i,e.exports=s},3818:(e,t,n)=>{var l=n(852)(n(5639),"Promise");e.exports=l},8525:(e,t,n)=>{var l=n(852)(n(5639),"Set");e.exports=l},8668:(e,t,n)=>{var l=n(3369),a=n(619),o=n(2385);function r(e){var t=-1,n=null==e?0:e.length;for(this.__data__=new l;++t<n;)this.add(e[t])}r.prototype.add=r.prototype.push=a,r.prototype.has=o,e.exports=r},6384:(e,t,n)=>{var l=n(8407),a=n(7465),o=n(3779),r=n(7599),i=n(4758),s=n(4309);function u(e){var t=this.__data__=new l(e);this.size=t.size}u.prototype.clear=a,u.prototype.delete=o,u.prototype.get=r,u.prototype.has=i,u.prototype.set=s,e.exports=u},2705:(e,t,n)=>{var l=n(5639).Symbol;e.exports=l},1149:(e,t,n)=>{var l=n(5639).Uint8Array;e.exports=l},577:(e,t,n)=>{var l=n(852)(n(5639),"WeakMap");e.exports=l},6874:e=>{e.exports=function(e,t,n){switch(n.length){case 0:return e.call(t);case 1:return e.call(t,n[0]);case 2:return e.call(t,n[0],n[1]);case 3:return e.call(t,n[0],n[1],n[2])}return e.apply(t,n)}},4963:e=>{e.exports=function(e,t){for(var n=-1,l=null==e?0:e.length,a=0,o=[];++n<l;){var r=e[n];t(r,n,e)&&(o[a++]=r)}return o}},7443:(e,t,n)=>{var l=n(2118);e.exports=function(e,t){return!(null==e||!e.length)&&l(e,t,0)>-1}},1196:e=>{e.exports=function(e,t,n){for(var l=-1,a=null==e?0:e.length;++l<a;)if(n(t,e[l]))return!0;return!1}},4636:(e,t,n)=>{var l=n(2545),a=n(5694),o=n(1469),r=n(4144),i=n(5776),s=n(6719),u=Object.prototype.hasOwnProperty;e.exports=function(e,t){var n=o(e),c=!n&&a(e),d=!n&&!c&&r(e),p=!n&&!c&&!d&&s(e),f=n||c||d||p,h=f?l(e.length,String):[],v=h.length;for(var m in e)!t&&!u.call(e,m)||f&&("length"==m||d&&("offset"==m||"parent"==m)||p&&("buffer"==m||"byteLength"==m||"byteOffset"==m)||i(m,v))||h.push(m);return h}},2488:e=>{e.exports=function(e,t){for(var n=-1,l=t.length,a=e.length;++n<l;)e[a+n]=t[n];return e}},2908:e=>{e.exports=function(e,t){for(var n=-1,l=null==e?0:e.length;++n<l;)if(t(e[n],n,e))return!0;return!1}},8470:(e,t,n)=>{var l=n(7813);e.exports=function(e,t){for(var n=e.length;n--;)if(l(e[n][0],t))return n;return-1}},1848:e=>{e.exports=function(e,t,n,l){for(var a=e.length,o=n+(l?1:-1);l?o--:++o<a;)if(t(e[o],o,e))return o;return-1}},1078:(e,t,n)=>{var l=n(2488),a=n(7285);e.exports=function e(t,n,o,r,i){var s=-1,u=t.length;for(o||(o=a),i||(i=[]);++s<u;){var c=t[s];n>0&&o(c)?n>1?e(c,n-1,o,r,i):l(i,c):r||(i[i.length]=c)}return i}},8866:(e,t,n)=>{var l=n(2488),a=n(1469);e.exports=function(e,t,n){var o=t(e);return a(e)?o:l(o,n(e))}},4239:(e,t,n)=>{var l=n(2705),a=n(9607),o=n(2333),r=l?l.toStringTag:void 0;e.exports=function(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":r&&r in Object(e)?a(e):o(e)}},2118:(e,t,n)=>{var l=n(1848),a=n(2722),o=n(2351);e.exports=function(e,t,n){return t==t?o(e,t,n):l(e,a,n)}},9454:(e,t,n)=>{var l=n(4239),a=n(7005);e.exports=function(e){return a(e)&&"[object Arguments]"==l(e)}},939:(e,t,n)=>{var l=n(2492),a=n(7005);e.exports=function e(t,n,o,r,i){return t===n||(null==t||null==n||!a(t)&&!a(n)?t!=t&&n!=n:l(t,n,o,r,e,i))}},2492:(e,t,n)=>{var l=n(6384),a=n(7114),o=n(8351),r=n(6096),i=n(4160),s=n(1469),u=n(4144),c=n(6719),d="[object Arguments]",p="[object Array]",f="[object Object]",h=Object.prototype.hasOwnProperty;e.exports=function(e,t,n,v,m,g){var b=s(e),y=s(t),x=b?p:i(e),k=y?p:i(t),w=(x=x==d?f:x)==f,C=(k=k==d?f:k)==f,_=x==k;if(_&&u(e)){if(!u(t))return!1;b=!0,w=!1}if(_&&!w)return g||(g=new l),b||c(e)?a(e,t,n,v,m,g):o(e,t,x,n,v,m,g);if(!(1&n)){var A=w&&h.call(e,"__wrapped__"),S=C&&h.call(t,"__wrapped__");if(A||S){var E=A?e.value():e,M=S?t.value():t;return g||(g=new l),m(E,M,n,v,g)}}return!!_&&(g||(g=new l),r(e,t,n,v,m,g))}},2722:e=>{e.exports=function(e){return e!=e}},8458:(e,t,n)=>{var l=n(3560),a=n(5346),o=n(3218),r=n(346),i=/^\[object .+?Constructor\]$/,s=Function.prototype,u=Object.prototype,c=s.toString,d=u.hasOwnProperty,p=RegExp("^"+c.call(d).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");e.exports=function(e){return!(!o(e)||a(e))&&(l(e)?p:i).test(r(e))}},8749:(e,t,n)=>{var l=n(4239),a=n(1780),o=n(7005),r={};r["[object Float32Array]"]=r["[object Float64Array]"]=r["[object Int8Array]"]=r["[object Int16Array]"]=r["[object Int32Array]"]=r["[object Uint8Array]"]=r["[object Uint8ClampedArray]"]=r["[object Uint16Array]"]=r["[object Uint32Array]"]=!0,r["[object Arguments]"]=r["[object Array]"]=r["[object ArrayBuffer]"]=r["[object Boolean]"]=r["[object DataView]"]=r["[object Date]"]=r["[object Error]"]=r["[object Function]"]=r["[object Map]"]=r["[object Number]"]=r["[object Object]"]=r["[object RegExp]"]=r["[object Set]"]=r["[object String]"]=r["[object WeakMap]"]=!1,e.exports=function(e){return o(e)&&a(e.length)&&!!r[l(e)]}},280:(e,t,n)=>{var l=n(5726),a=n(6916),o=Object.prototype.hasOwnProperty;e.exports=function(e){if(!l(e))return a(e);var t=[];for(var n in Object(e))o.call(e,n)&&"constructor"!=n&&t.push(n);return t}},5976:(e,t,n)=>{var l=n(6557),a=n(5357),o=n(61);e.exports=function(e,t){return o(a(e,t,l),e+"")}},6560:(e,t,n)=>{var l=n(5703),a=n(8777),o=n(6557),r=a?function(e,t){return a(e,"toString",{configurable:!0,enumerable:!1,value:l(t),writable:!0})}:o;e.exports=r},2545:e=>{e.exports=function(e,t){for(var n=-1,l=Array(e);++n<e;)l[n]=t(n);return l}},1717:e=>{e.exports=function(e){return function(t){return e(t)}}},5652:(e,t,n)=>{var l=n(8668),a=n(7443),o=n(1196),r=n(4757),i=n(3593),s=n(1814);e.exports=function(e,t,n){var u=-1,c=a,d=e.length,p=!0,f=[],h=f;if(n)p=!1,c=o;else if(d>=200){var v=t?null:i(e);if(v)return s(v);p=!1,c=r,h=new l}else h=t?[]:f;e:for(;++u<d;){var m=e[u],g=t?t(m):m;if(m=n||0!==m?m:0,p&&g==g){for(var b=h.length;b--;)if(h[b]===g)continue e;t&&h.push(g),f.push(m)}else c(h,g,n)||(h!==f&&h.push(g),f.push(m))}return f}},4757:e=>{e.exports=function(e,t){return e.has(t)}},4429:(e,t,n)=>{var l=n(5639)["__core-js_shared__"];e.exports=l},3593:(e,t,n)=>{var l=n(8525),a=n(308),o=n(1814),r=l&&1/o(new l([,-0]))[1]==1/0?function(e){return new l(e)}:a;e.exports=r},8777:(e,t,n)=>{var l=n(852),a=function(){try{var e=l(Object,"defineProperty");return e({},"",{}),e}catch(e){}}();e.exports=a},7114:(e,t,n)=>{var l=n(8668),a=n(2908),o=n(4757);e.exports=function(e,t,n,r,i,s){var u=1&n,c=e.length,d=t.length;if(c!=d&&!(u&&d>c))return!1;var p=s.get(e),f=s.get(t);if(p&&f)return p==t&&f==e;var h=-1,v=!0,m=2&n?new l:void 0;for(s.set(e,t),s.set(t,e);++h<c;){var g=e[h],b=t[h];if(r)var y=u?r(b,g,h,t,e,s):r(g,b,h,e,t,s);if(void 0!==y){if(y)continue;v=!1;break}if(m){if(!a(t,(function(e,t){if(!o(m,t)&&(g===e||i(g,e,n,r,s)))return m.push(t)}))){v=!1;break}}else if(g!==b&&!i(g,b,n,r,s)){v=!1;break}}return s.delete(e),s.delete(t),v}},8351:(e,t,n)=>{var l=n(2705),a=n(1149),o=n(7813),r=n(7114),i=n(8776),s=n(1814),u=l?l.prototype:void 0,c=u?u.valueOf:void 0;e.exports=function(e,t,n,l,u,d,p){switch(n){case"[object DataView]":if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case"[object ArrayBuffer]":return!(e.byteLength!=t.byteLength||!d(new a(e),new a(t)));case"[object Boolean]":case"[object Date]":case"[object Number]":return o(+e,+t);case"[object Error]":return e.name==t.name&&e.message==t.message;case"[object RegExp]":case"[object String]":return e==t+"";case"[object Map]":var f=i;case"[object Set]":var h=1&l;if(f||(f=s),e.size!=t.size&&!h)return!1;var v=p.get(e);if(v)return v==t;l|=2,p.set(e,t);var m=r(f(e),f(t),l,u,d,p);return p.delete(e),m;case"[object Symbol]":if(c)return c.call(e)==c.call(t)}return!1}},6096:(e,t,n)=>{var l=n(8234),a=Object.prototype.hasOwnProperty;e.exports=function(e,t,n,o,r,i){var s=1&n,u=l(e),c=u.length;if(c!=l(t).length&&!s)return!1;for(var d=c;d--;){var p=u[d];if(!(s?p in t:a.call(t,p)))return!1}var f=i.get(e),h=i.get(t);if(f&&h)return f==t&&h==e;var v=!0;i.set(e,t),i.set(t,e);for(var m=s;++d<c;){var g=e[p=u[d]],b=t[p];if(o)var y=s?o(b,g,p,t,e,i):o(g,b,p,e,t,i);if(!(void 0===y?g===b||r(g,b,n,o,i):y)){v=!1;break}m||(m="constructor"==p)}if(v&&!m){var x=e.constructor,k=t.constructor;x==k||!("constructor"in e)||!("constructor"in t)||"function"==typeof x&&x instanceof x&&"function"==typeof k&&k instanceof k||(v=!1)}return i.delete(e),i.delete(t),v}},1957:e=>{var t="object"==typeof global&&global&&global.Object===Object&&global;e.exports=t},8234:(e,t,n)=>{var l=n(8866),a=n(9551),o=n(3674);e.exports=function(e){return l(e,o,a)}},5050:(e,t,n)=>{var l=n(7019);e.exports=function(e,t){var n=e.__data__;return l(t)?n["string"==typeof t?"string":"hash"]:n.map}},852:(e,t,n)=>{var l=n(8458),a=n(7801);e.exports=function(e,t){var n=a(e,t);return l(n)?n:void 0}},9607:(e,t,n)=>{var l=n(2705),a=Object.prototype,o=a.hasOwnProperty,r=a.toString,i=l?l.toStringTag:void 0;e.exports=function(e){var t=o.call(e,i),n=e[i];try{e[i]=void 0;var l=!0}catch(e){}var a=r.call(e);return l&&(t?e[i]=n:delete e[i]),a}},9551:(e,t,n)=>{var l=n(4963),a=n(479),o=Object.prototype.propertyIsEnumerable,r=Object.getOwnPropertySymbols,i=r?function(e){return null==e?[]:(e=Object(e),l(r(e),(function(t){return o.call(e,t)})))}:a;e.exports=i},4160:(e,t,n)=>{var l=n(8552),a=n(7071),o=n(3818),r=n(8525),i=n(577),s=n(4239),u=n(346),c="[object Map]",d="[object Promise]",p="[object Set]",f="[object WeakMap]",h="[object DataView]",v=u(l),m=u(a),g=u(o),b=u(r),y=u(i),x=s;(l&&x(new l(new ArrayBuffer(1)))!=h||a&&x(new a)!=c||o&&x(o.resolve())!=d||r&&x(new r)!=p||i&&x(new i)!=f)&&(x=function(e){var t=s(e),n="[object Object]"==t?e.constructor:void 0,l=n?u(n):"";if(l)switch(l){case v:return h;case m:return c;case g:return d;case b:return p;case y:return f}return t}),e.exports=x},7801:e=>{e.exports=function(e,t){return null==e?void 0:e[t]}},1789:(e,t,n)=>{var l=n(4536);e.exports=function(){this.__data__=l?l(null):{},this.size=0}},401:e=>{e.exports=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t}},7667:(e,t,n)=>{var l=n(4536),a=Object.prototype.hasOwnProperty;e.exports=function(e){var t=this.__data__;if(l){var n=t[e];return"__lodash_hash_undefined__"===n?void 0:n}return a.call(t,e)?t[e]:void 0}},1327:(e,t,n)=>{var l=n(4536),a=Object.prototype.hasOwnProperty;e.exports=function(e){var t=this.__data__;return l?void 0!==t[e]:a.call(t,e)}},1866:(e,t,n)=>{var l=n(4536);e.exports=function(e,t){var n=this.__data__;return this.size+=this.has(e)?0:1,n[e]=l&&void 0===t?"__lodash_hash_undefined__":t,this}},7285:(e,t,n)=>{var l=n(2705),a=n(5694),o=n(1469),r=l?l.isConcatSpreadable:void 0;e.exports=function(e){return o(e)||a(e)||!!(r&&e&&e[r])}},5776:e=>{var t=/^(?:0|[1-9]\d*)$/;e.exports=function(e,n){var l=typeof e;return!!(n=null==n?9007199254740991:n)&&("number"==l||"symbol"!=l&&t.test(e))&&e>-1&&e%1==0&&e<n}},7019:e=>{e.exports=function(e){var t=typeof e;return"string"==t||"number"==t||"symbol"==t||"boolean"==t?"__proto__"!==e:null===e}},5346:(e,t,n)=>{var l,a=n(4429),o=(l=/[^.]+$/.exec(a&&a.keys&&a.keys.IE_PROTO||""))?"Symbol(src)_1."+l:"";e.exports=function(e){return!!o&&o in e}},5726:e=>{var t=Object.prototype;e.exports=function(e){var n=e&&e.constructor;return e===("function"==typeof n&&n.prototype||t)}},7040:e=>{e.exports=function(){this.__data__=[],this.size=0}},4125:(e,t,n)=>{var l=n(8470),a=Array.prototype.splice;e.exports=function(e){var t=this.__data__,n=l(t,e);return!(n<0||(n==t.length-1?t.pop():a.call(t,n,1),--this.size,0))}},2117:(e,t,n)=>{var l=n(8470);e.exports=function(e){var t=this.__data__,n=l(t,e);return n<0?void 0:t[n][1]}},7518:(e,t,n)=>{var l=n(8470);e.exports=function(e){return l(this.__data__,e)>-1}},4705:(e,t,n)=>{var l=n(8470);e.exports=function(e,t){var n=this.__data__,a=l(n,e);return a<0?(++this.size,n.push([e,t])):n[a][1]=t,this}},4785:(e,t,n)=>{var l=n(1989),a=n(8407),o=n(7071);e.exports=function(){this.size=0,this.__data__={hash:new l,map:new(o||a),string:new l}}},1285:(e,t,n)=>{var l=n(5050);e.exports=function(e){var t=l(this,e).delete(e);return this.size-=t?1:0,t}},6e3:(e,t,n)=>{var l=n(5050);e.exports=function(e){return l(this,e).get(e)}},9916:(e,t,n)=>{var l=n(5050);e.exports=function(e){return l(this,e).has(e)}},5265:(e,t,n)=>{var l=n(5050);e.exports=function(e,t){var n=l(this,e),a=n.size;return n.set(e,t),this.size+=n.size==a?0:1,this}},8776:e=>{e.exports=function(e){var t=-1,n=Array(e.size);return e.forEach((function(e,l){n[++t]=[l,e]})),n}},4536:(e,t,n)=>{var l=n(852)(Object,"create");e.exports=l},6916:(e,t,n)=>{var l=n(5569)(Object.keys,Object);e.exports=l},1167:(e,t,n)=>{e=n.nmd(e);var l=n(1957),a=t&&!t.nodeType&&t,o=a&&e&&!e.nodeType&&e,r=o&&o.exports===a&&l.process,i=function(){try{return o&&o.require&&o.require("util").types||r&&r.binding&&r.binding("util")}catch(e){}}();e.exports=i},2333:e=>{var t=Object.prototype.toString;e.exports=function(e){return t.call(e)}},5569:e=>{e.exports=function(e,t){return function(n){return e(t(n))}}},5357:(e,t,n)=>{var l=n(6874),a=Math.max;e.exports=function(e,t,n){return t=a(void 0===t?e.length-1:t,0),function(){for(var o=arguments,r=-1,i=a(o.length-t,0),s=Array(i);++r<i;)s[r]=o[t+r];r=-1;for(var u=Array(t+1);++r<t;)u[r]=o[r];return u[t]=n(s),l(e,this,u)}}},5639:(e,t,n)=>{var l=n(1957),a="object"==typeof self&&self&&self.Object===Object&&self,o=l||a||Function("return this")();e.exports=o},619:e=>{e.exports=function(e){return this.__data__.set(e,"__lodash_hash_undefined__"),this}},2385:e=>{e.exports=function(e){return this.__data__.has(e)}},1814:e=>{e.exports=function(e){var t=-1,n=Array(e.size);return e.forEach((function(e){n[++t]=e})),n}},61:(e,t,n)=>{var l=n(6560),a=n(1275)(l);e.exports=a},1275:e=>{var t=Date.now;e.exports=function(e){var n=0,l=0;return function(){var a=t(),o=16-(a-l);if(l=a,o>0){if(++n>=800)return arguments[0]}else n=0;return e.apply(void 0,arguments)}}},7465:(e,t,n)=>{var l=n(8407);e.exports=function(){this.__data__=new l,this.size=0}},3779:e=>{e.exports=function(e){var t=this.__data__,n=t.delete(e);return this.size=t.size,n}},7599:e=>{e.exports=function(e){return this.__data__.get(e)}},4758:e=>{e.exports=function(e){return this.__data__.has(e)}},4309:(e,t,n)=>{var l=n(8407),a=n(7071),o=n(3369);e.exports=function(e,t){var n=this.__data__;if(n instanceof l){var r=n.__data__;if(!a||r.length<199)return r.push([e,t]),this.size=++n.size,this;n=this.__data__=new o(r)}return n.set(e,t),this.size=n.size,this}},2351:e=>{e.exports=function(e,t,n){for(var l=n-1,a=e.length;++l<a;)if(e[l]===t)return l;return-1}},346:e=>{var t=Function.prototype.toString;e.exports=function(e){if(null!=e){try{return t.call(e)}catch(e){}try{return e+""}catch(e){}}return""}},5703:e=>{e.exports=function(e){return function(){return e}}},3279:(e,t,n)=>{var l=n(3218),a=n(7771),o=n(4841),r=Math.max,i=Math.min;e.exports=function(e,t,n){var s,u,c,d,p,f,h=0,v=!1,m=!1,g=!0;if("function"!=typeof e)throw new TypeError("Expected a function");function b(t){var n=s,l=u;return s=u=void 0,h=t,d=e.apply(l,n)}function y(e){return h=e,p=setTimeout(k,t),v?b(e):d}function x(e){var n=e-f;return void 0===f||n>=t||n<0||m&&e-h>=c}function k(){var e=a();if(x(e))return w(e);p=setTimeout(k,function(e){var n=t-(e-f);return m?i(n,c-(e-h)):n}(e))}function w(e){return p=void 0,g&&s?b(e):(s=u=void 0,d)}function C(){var e=a(),n=x(e);if(s=arguments,u=this,f=e,n){if(void 0===p)return y(f);if(m)return clearTimeout(p),p=setTimeout(k,t),b(f)}return void 0===p&&(p=setTimeout(k,t)),d}return t=o(t)||0,l(n)&&(v=!!n.leading,c=(m="maxWait"in n)?r(o(n.maxWait)||0,t):c,g="trailing"in n?!!n.trailing:g),C.cancel=function(){void 0!==p&&clearTimeout(p),h=0,s=f=u=p=void 0},C.flush=function(){return void 0===p?d:w(a())},C}},7813:e=>{e.exports=function(e,t){return e===t||e!=e&&t!=t}},6557:e=>{e.exports=function(e){return e}},5694:(e,t,n)=>{var l=n(9454),a=n(7005),o=Object.prototype,r=o.hasOwnProperty,i=o.propertyIsEnumerable,s=l(function(){return arguments}())?l:function(e){return a(e)&&r.call(e,"callee")&&!i.call(e,"callee")};e.exports=s},1469:e=>{var t=Array.isArray;e.exports=t},8612:(e,t,n)=>{var l=n(3560),a=n(1780);e.exports=function(e){return null!=e&&a(e.length)&&!l(e)}},9246:(e,t,n)=>{var l=n(8612),a=n(7005);e.exports=function(e){return a(e)&&l(e)}},4144:(e,t,n)=>{e=n.nmd(e);var l=n(5639),a=n(5062),o=t&&!t.nodeType&&t,r=o&&e&&!e.nodeType&&e,i=r&&r.exports===o?l.Buffer:void 0,s=(i?i.isBuffer:void 0)||a;e.exports=s},8446:(e,t,n)=>{var l=n(939);e.exports=function(e,t){return l(e,t)}},3560:(e,t,n)=>{var l=n(4239),a=n(3218);e.exports=function(e){if(!a(e))return!1;var t=l(e);return"[object Function]"==t||"[object GeneratorFunction]"==t||"[object AsyncFunction]"==t||"[object Proxy]"==t}},1780:e=>{e.exports=function(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=9007199254740991}},3218:e=>{e.exports=function(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}},7005:e=>{e.exports=function(e){return null!=e&&"object"==typeof e}},3448:(e,t,n)=>{var l=n(4239),a=n(7005);e.exports=function(e){return"symbol"==typeof e||a(e)&&"[object Symbol]"==l(e)}},6719:(e,t,n)=>{var l=n(8749),a=n(1717),o=n(1167),r=o&&o.isTypedArray,i=r?a(r):l;e.exports=i},3674:(e,t,n)=>{var l=n(4636),a=n(280),o=n(8612);e.exports=function(e){return o(e)?l(e):a(e)}},308:e=>{e.exports=function(){}},7771:(e,t,n)=>{var l=n(5639);e.exports=function(){return l.Date.now()}},479:e=>{e.exports=function(){return[]}},5062:e=>{e.exports=function(){return!1}},3493:(e,t,n)=>{var l=n(3279),a=n(3218);e.exports=function(e,t,n){var o=!0,r=!0;if("function"!=typeof e)throw new TypeError("Expected a function");return a(n)&&(o="leading"in n?!!n.leading:o,r="trailing"in n?!!n.trailing:r),l(e,t,{leading:o,maxWait:t,trailing:r})}},4841:(e,t,n)=>{var l=n(3218),a=n(3448),o=/^\s+|\s+$/g,r=/^[-+]0x[0-9a-f]+$/i,i=/^0b[01]+$/i,s=/^0o[0-7]+$/i,u=parseInt;e.exports=function(e){if("number"==typeof e)return e;if(a(e))return NaN;if(l(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=l(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(o,"");var n=i.test(e);return n||s.test(e)?u(e.slice(2),n?2:8):r.test(e)?NaN:+e}},3386:(e,t,n)=>{var l=n(1078),a=n(5976),o=n(5652),r=n(9246),i=a((function(e){return o(l(e,1,r,!0))}));e.exports=i},2796:(e,t,n)=>{e.exports=n(643)},3264:e=>{"use strict";var t=!("undefined"==typeof window||!window.document||!window.document.createElement),n={canUseDOM:t,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:t&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:t&&!!window.screen,isInWorker:!t};e.exports=n},4518:e=>{var t,n,l,a,o,r,i,s,u,c,d,p,f,h,v,m=!1;function g(){if(!m){m=!0;var e=navigator.userAgent,g=/(?:MSIE.(\d+\.\d+))|(?:(?:Firefox|GranParadiso|Iceweasel).(\d+\.\d+))|(?:Opera(?:.+Version.|.)(\d+\.\d+))|(?:AppleWebKit.(\d+(?:\.\d+)?))|(?:Trident\/\d+\.\d+.*rv:(\d+\.\d+))/.exec(e),b=/(Mac OS X)|(Windows)|(Linux)/.exec(e);if(p=/\b(iPhone|iP[ao]d)/.exec(e),f=/\b(iP[ao]d)/.exec(e),c=/Android/i.exec(e),h=/FBAN\/\w+;/i.exec(e),v=/Mobile/i.exec(e),d=!!/Win64/.exec(e),g){(t=g[1]?parseFloat(g[1]):g[5]?parseFloat(g[5]):NaN)&&document&&document.documentMode&&(t=document.documentMode);var y=/(?:Trident\/(\d+.\d+))/.exec(e);r=y?parseFloat(y[1])+4:t,n=g[2]?parseFloat(g[2]):NaN,l=g[3]?parseFloat(g[3]):NaN,(a=g[4]?parseFloat(g[4]):NaN)?(g=/(?:Chrome\/(\d+\.\d+))/.exec(e),o=g&&g[1]?parseFloat(g[1]):NaN):o=NaN}else t=n=l=o=a=NaN;if(b){if(b[1]){var x=/(?:Mac OS X (\d+(?:[._]\d+)?))/.exec(e);i=!x||parseFloat(x[1].replace("_","."))}else i=!1;s=!!b[2],u=!!b[3]}else i=s=u=!1}}var b={ie:function(){return g()||t},ieCompatibilityMode:function(){return g()||r>t},ie64:function(){return b.ie()&&d},firefox:function(){return g()||n},opera:function(){return g()||l},webkit:function(){return g()||a},safari:function(){return b.webkit()},chrome:function(){return g()||o},windows:function(){return g()||s},osx:function(){return g()||i},linux:function(){return g()||u},iphone:function(){return g()||p},mobile:function(){return g()||p||f||c||v},nativeApp:function(){return g()||h},android:function(){return g()||c},ipad:function(){return g()||f}};e.exports=b},6534:(e,t,n)=>{"use strict";var l,a=n(3264);a.canUseDOM&&(l=document.implementation&&document.implementation.hasFeature&&!0!==document.implementation.hasFeature("","")),e.exports=function(e,t){if(!a.canUseDOM||t&&!("addEventListener"in document))return!1;var n="on"+e,o=n in document;if(!o){var r=document.createElement("div");r.setAttribute(n,"return;"),o="function"==typeof r[n]}return!o&&l&&"wheel"===e&&(o=document.implementation.hasFeature("Events.wheel","3.0")),o}},643:(e,t,n)=>{"use strict";var l=n(4518),a=n(6534);function o(e){var t=0,n=0,l=0,a=0;return"detail"in e&&(n=e.detail),"wheelDelta"in e&&(n=-e.wheelDelta/120),"wheelDeltaY"in e&&(n=-e.wheelDeltaY/120),"wheelDeltaX"in e&&(t=-e.wheelDeltaX/120),"axis"in e&&e.axis===e.HORIZONTAL_AXIS&&(t=n,n=0),l=10*t,a=10*n,"deltaY"in e&&(a=e.deltaY),"deltaX"in e&&(l=e.deltaX),(l||a)&&e.deltaMode&&(1==e.deltaMode?(l*=40,a*=40):(l*=800,a*=800)),l&&!t&&(t=l<1?-1:1),a&&!n&&(n=a<1?-1:1),{spinX:t,spinY:n,pixelX:l,pixelY:a}}o.getEventType=function(){return l.firefox()?"DOMMouseScroll":a("wheel")?"wheel":"mousewheel"},e.exports=o},3379:(e,t,n)=>{"use strict";var l,a=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),o=[];function r(e){for(var t=-1,n=0;n<o.length;n++)if(o[n].identifier===e){t=n;break}return t}function i(e,t){for(var n={},l=[],a=0;a<e.length;a++){var i=e[a],s=t.base?i[0]+t.base:i[0],u=n[s]||0,c="".concat(s," ").concat(u);n[s]=u+1;var d=r(c),p={css:i[1],media:i[2],sourceMap:i[3]};-1!==d?(o[d].references++,o[d].updater(p)):o.push({identifier:c,updater:v(p,t),references:1}),l.push(c)}return l}function s(e){var t=document.createElement("style"),l=e.attributes||{};if(void 0===l.nonce){var o=n.nc;o&&(l.nonce=o)}if(Object.keys(l).forEach((function(e){t.setAttribute(e,l[e])})),"function"==typeof e.insert)e.insert(t);else{var r=a(e.insert||"head");if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}return t}var u,c=(u=[],function(e,t){return u[e]=t,u.filter(Boolean).join("\n")});function d(e,t,n,l){var a=n?"":l.media?"@media ".concat(l.media," {").concat(l.css,"}"):l.css;if(e.styleSheet)e.styleSheet.cssText=c(t,a);else{var o=document.createTextNode(a),r=e.childNodes;r[t]&&e.removeChild(r[t]),r.length?e.insertBefore(o,r[t]):e.appendChild(o)}}function p(e,t,n){var l=n.css,a=n.media,o=n.sourceMap;if(a?e.setAttribute("media",a):e.removeAttribute("media"),o&&"undefined"!=typeof btoa&&(l+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleSheet)e.styleSheet.cssText=l;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(l))}}var f=null,h=0;function v(e,t){var n,l,a;if(t.singleton){var o=h++;n=f||(f=s(t)),l=d.bind(null,n,o,!1),a=d.bind(null,n,o,!0)}else n=s(t),l=p.bind(null,n,t),a=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return l(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;l(e=t)}else a()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=(void 0===l&&(l=Boolean(window&&document&&document.all&&!window.atob)),l));var n=i(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var l=0;l<n.length;l++){var a=r(n[l]);o[a].references--}for(var s=i(e,t),u=0;u<n.length;u++){var c=r(n[u]);0===o[c].references&&(o[c].updater(),o.splice(c,1))}n=s}}}},8933:e=>{"use strict";e.exports=require("electron")},5747:e=>{"use strict";e.exports=require("fs")}},t={};function n(l){if(t[l])return t[l].exports;var a=t[l]={id:l,loaded:!1,exports:{}};return e[l].call(a.exports,a,a.exports,n),a.loaded=!0,a.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var l in t)n.o(t,l)&&!n.o(e,l)&&Object.defineProperty(e,l,{enumerable:!0,get:t[l]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),(()=>{"use strict";function e(e,t){const n=Object.create(null),l=e.split(",");for(let e=0;e<l.length;e++)n[l[e]]=!0;return t?e=>!!n[e.toLowerCase()]:e=>!!n[e]}const t=e("Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl"),l=e("itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly");function a(e){if(_(e)){const t={};for(let n=0;n<e.length;n++){const l=e[n],o=a(O(l)?i(l):l);if(o)for(const e in o)t[e]=o[e]}return t}if(T(e))return e}const o=/;(?![^(]*\))/g,r=/:(.+)/;function i(e){const t={};return e.split(o).forEach((e=>{if(e){const n=e.split(r);n.length>1&&(t[n[0].trim()]=n[1].trim())}})),t}function s(e){let t="";if(O(e))t=e;else if(_(e))for(let n=0;n<e.length;n++)t+=s(e[n])+" ";else if(T(e))for(const n in e)e[n]&&(t+=n+" ");return t.trim()}function u(e,t){if(e===t)return!0;let n=E(e),l=E(t);if(n||l)return!(!n||!l)&&e.getTime()===t.getTime();if(n=_(e),l=_(t),n||l)return!(!n||!l)&&function(e,t){if(e.length!==t.length)return!1;let n=!0;for(let l=0;n&&l<e.length;l++)n=u(e[l],t[l]);return n}(e,t);if(n=T(e),l=T(t),n||l){if(!n||!l)return!1;if(Object.keys(e).length!==Object.keys(t).length)return!1;for(const n in e){const l=e.hasOwnProperty(n),a=t.hasOwnProperty(n);if(l&&!a||!l&&a||!u(e[n],t[n]))return!1}}return String(e)===String(t)}function c(e,t){return e.findIndex((e=>u(e,t)))}const d=e=>null==e?"":T(e)?JSON.stringify(e,p,2):String(e),p=(e,t)=>A(t)?{[`Map(${t.size})`]:[...t.entries()].reduce(((e,[t,n])=>(e[`${t} =>`]=n,e)),{})}:S(t)?{[`Set(${t.size})`]:[...t.values()]}:!T(t)||_(t)||V(t)?t:String(t),f={},h=[],v=()=>{},m=()=>!1,g=/^on[^a-z]/,b=e=>g.test(e),y=e=>e.startsWith("onUpdate:"),x=Object.assign,k=(e,t)=>{const n=e.indexOf(t);n>-1&&e.splice(n,1)},w=Object.prototype.hasOwnProperty,C=(e,t)=>w.call(e,t),_=Array.isArray,A=e=>"[object Map]"===P(e),S=e=>"[object Set]"===P(e),E=e=>e instanceof Date,M=e=>"function"==typeof e,O=e=>"string"==typeof e,D=e=>"symbol"==typeof e,T=e=>null!==e&&"object"==typeof e,N=e=>T(e)&&M(e.then)&&M(e.catch),B=Object.prototype.toString,P=e=>B.call(e),V=e=>"[object Object]"===P(e),I=e=>O(e)&&"NaN"!==e&&"-"!==e[0]&&""+parseInt(e,10)===e,L=e(",key,ref,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"),z=e=>{const t=Object.create(null);return n=>t[n]||(t[n]=e(n))},F=/-(\w)/g,$=z((e=>e.replace(F,((e,t)=>t?t.toUpperCase():"")))),R=/\B([A-Z])/g,j=z((e=>e.replace(R,"-$1").toLowerCase())),H=z((e=>e.charAt(0).toUpperCase()+e.slice(1))),W=z((e=>e?`on${H(e)}`:"")),q=(e,t)=>e!==t&&(e==e||t==t),Y=(e,t)=>{for(let n=0;n<e.length;n++)e[n](t)},K=(e,t,n)=>{Object.defineProperty(e,t,{configurable:!0,enumerable:!1,value:n})},U=e=>{const t=parseFloat(e);return isNaN(t)?e:t};let G;const X=()=>G||(G="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{}),J=new WeakMap,Z=[];let Q;const ee=Symbol(""),te=Symbol("");function ne(e,t=f){(function(e){return e&&!0===e._isEffect})(e)&&(e=e.raw);const n=function(e,t){const n=function(){if(!n.active)return t.scheduler?void 0:e();if(!Z.includes(n)){oe(n);try{return ie.push(re),re=!0,Z.push(n),Q=n,e()}finally{Z.pop(),ue(),Q=Z[Z.length-1]}}};return n.id=ae++,n.allowRecurse=!!t.allowRecurse,n._isEffect=!0,n.active=!0,n.raw=e,n.deps=[],n.options=t,n}(e,t);return t.lazy||n(),n}function le(e){e.active&&(oe(e),e.options.onStop&&e.options.onStop(),e.active=!1)}let ae=0;function oe(e){const{deps:t}=e;if(t.length){for(let n=0;n<t.length;n++)t[n].delete(e);t.length=0}}let re=!0;const ie=[];function se(){ie.push(re),re=!1}function ue(){const e=ie.pop();re=void 0===e||e}function ce(e,t,n){if(!re||void 0===Q)return;let l=J.get(e);l||J.set(e,l=new Map);let a=l.get(n);a||l.set(n,a=new Set),a.has(Q)||(a.add(Q),Q.deps.push(a))}function de(e,t,n,l,a,o){const r=J.get(e);if(!r)return;const i=new Set,s=e=>{e&&e.forEach((e=>{(e!==Q||e.allowRecurse)&&i.add(e)}))};if("clear"===t)r.forEach(s);else if("length"===n&&_(e))r.forEach(((e,t)=>{("length"===t||t>=l)&&s(e)}));else switch(void 0!==n&&s(r.get(n)),t){case"add":_(e)?I(n)&&s(r.get("length")):(s(r.get(ee)),A(e)&&s(r.get(te)));break;case"delete":_(e)||(s(r.get(ee)),A(e)&&s(r.get(te)));break;case"set":A(e)&&s(r.get(ee))}i.forEach((e=>{e.options.scheduler?e.options.scheduler(e):e()}))}const pe=new Set(Object.getOwnPropertyNames(Symbol).map((e=>Symbol[e])).filter(D)),fe=be(),he=be(!1,!0),ve=be(!0),me=be(!0,!0),ge={};function be(e=!1,t=!1){return function(n,l,a){if("__v_isReactive"===l)return!e;if("__v_isReadonly"===l)return e;if("__v_raw"===l&&a===(e?qe:We).get(n))return n;const o=_(n);if(!e&&o&&C(ge,l))return Reflect.get(ge,l,a);const r=Reflect.get(n,l,a);return(D(l)?pe.has(l):"__proto__"===l||"__v_isRef"===l)?r:(e||ce(n,0,l),t?r:et(r)?o&&I(l)?r:r.value:T(r)?e?Ke(r):Ye(r):r)}}function ye(e=!1){return function(t,n,l,a){const o=t[n];if(!e&&(l=Ze(l),!_(t)&&et(o)&&!et(l)))return o.value=l,!0;const r=_(t)&&I(n)?Number(n)<t.length:C(t,n),i=Reflect.set(t,n,l,a);return t===Ze(a)&&(r?q(l,o)&&de(t,"set",n,l):de(t,"add",n,l)),i}}["includes","indexOf","lastIndexOf"].forEach((e=>{const t=Array.prototype[e];ge[e]=function(...e){const n=Ze(this);for(let e=0,t=this.length;e<t;e++)ce(n,0,e+"");const l=t.apply(n,e);return-1===l||!1===l?t.apply(n,e.map(Ze)):l}})),["push","pop","shift","unshift","splice"].forEach((e=>{const t=Array.prototype[e];ge[e]=function(...e){se();const n=t.apply(this,e);return ue(),n}}));const xe={get:fe,set:ye(),deleteProperty:function(e,t){const n=C(e,t),l=(e[t],Reflect.deleteProperty(e,t));return l&&n&&de(e,"delete",t,void 0),l},has:function(e,t){const n=Reflect.has(e,t);return D(t)&&pe.has(t)||ce(e,0,t),n},ownKeys:function(e){return ce(e,0,_(e)?"length":ee),Reflect.ownKeys(e)}},ke={get:ve,set:(e,t)=>!0,deleteProperty:(e,t)=>!0},we=x({},xe,{get:he,set:ye(!0)}),Ce=(x({},ke,{get:me}),e=>T(e)?Ye(e):e),_e=e=>T(e)?Ke(e):e,Ae=e=>e,Se=e=>Reflect.getPrototypeOf(e);function Ee(e,t,n=!1,l=!1){const a=Ze(e=e.__v_raw),o=Ze(t);t!==o&&!n&&ce(a,0,t),!n&&ce(a,0,o);const{has:r}=Se(a),i=n?_e:l?Ae:Ce;return r.call(a,t)?i(e.get(t)):r.call(a,o)?i(e.get(o)):void 0}function Me(e,t=!1){const n=this.__v_raw,l=Ze(n),a=Ze(e);return e!==a&&!t&&ce(l,0,e),!t&&ce(l,0,a),e===a?n.has(e):n.has(e)||n.has(a)}function Oe(e,t=!1){return e=e.__v_raw,!t&&ce(Ze(e),0,ee),Reflect.get(e,"size",e)}function De(e){e=Ze(e);const t=Ze(this),n=Se(t).has.call(t,e);return t.add(e),n||de(t,"add",e,e),this}function Te(e,t){t=Ze(t);const n=Ze(this),{has:l,get:a}=Se(n);let o=l.call(n,e);o||(e=Ze(e),o=l.call(n,e));const r=a.call(n,e);return n.set(e,t),o?q(t,r)&&de(n,"set",e,t):de(n,"add",e,t),this}function Ne(e){const t=Ze(this),{has:n,get:l}=Se(t);let a=n.call(t,e);a||(e=Ze(e),a=n.call(t,e)),l&&l.call(t,e);const o=t.delete(e);return a&&de(t,"delete",e,void 0),o}function Be(){const e=Ze(this),t=0!==e.size,n=e.clear();return t&&de(e,"clear",void 0,void 0),n}function Pe(e,t){return function(n,l){const a=this,o=a.__v_raw,r=Ze(o),i=e?_e:t?Ae:Ce;return!e&&ce(r,0,ee),o.forEach(((e,t)=>n.call(l,i(e),i(t),a)))}}function Ve(e,t,n){return function(...l){const a=this.__v_raw,o=Ze(a),r=A(o),i="entries"===e||e===Symbol.iterator&&r,s="keys"===e&&r,u=a[e](...l),c=t?_e:n?Ae:Ce;return!t&&ce(o,0,s?te:ee),{next(){const{value:e,done:t}=u.next();return t?{value:e,done:t}:{value:i?[c(e[0]),c(e[1])]:c(e),done:t}},[Symbol.iterator](){return this}}}}function Ie(e){return function(...t){return"delete"!==e&&this}}const Le={get(e){return Ee(this,e)},get size(){return Oe(this)},has:Me,add:De,set:Te,delete:Ne,clear:Be,forEach:Pe(!1,!1)},ze={get(e){return Ee(this,e,!1,!0)},get size(){return Oe(this)},has:Me,add:De,set:Te,delete:Ne,clear:Be,forEach:Pe(!1,!0)},Fe={get(e){return Ee(this,e,!0)},get size(){return Oe(this,!0)},has(e){return Me.call(this,e,!0)},add:Ie("add"),set:Ie("set"),delete:Ie("delete"),clear:Ie("clear"),forEach:Pe(!0,!1)};function $e(e,t){const n=t?ze:e?Fe:Le;return(t,l,a)=>"__v_isReactive"===l?!e:"__v_isReadonly"===l?e:"__v_raw"===l?t:Reflect.get(C(n,l)&&l in t?n:t,l,a)}["keys","values","entries",Symbol.iterator].forEach((e=>{Le[e]=Ve(e,!1,!1),Fe[e]=Ve(e,!0,!1),ze[e]=Ve(e,!1,!0)}));const Re={get:$e(!1,!1)},je={get:$e(!1,!0)},He={get:$e(!0,!1)},We=new WeakMap,qe=new WeakMap;function Ye(e){return e&&e.__v_isReadonly?e:Ue(e,!1,xe,Re)}function Ke(e){return Ue(e,!0,ke,He)}function Ue(e,t,n,l){if(!T(e))return e;if(e.__v_raw&&(!t||!e.__v_isReactive))return e;const a=t?qe:We,o=a.get(e);if(o)return o;const r=(i=e).__v_skip||!Object.isExtensible(i)?0:function(e){switch(e){case"Object":case"Array":return 1;case"Map":case"Set":case"WeakMap":case"WeakSet":return 2;default:return 0}}((e=>P(e).slice(8,-1))(i));var i;if(0===r)return e;const s=new Proxy(e,2===r?l:n);return a.set(e,s),s}function Ge(e){return Xe(e)?Ge(e.__v_raw):!(!e||!e.__v_isReactive)}function Xe(e){return!(!e||!e.__v_isReadonly)}function Je(e){return Ge(e)||Xe(e)}function Ze(e){return e&&Ze(e.__v_raw)||e}const Qe=e=>T(e)?Ye(e):e;function et(e){return Boolean(e&&!0===e.__v_isRef)}function tt(e){return at(e)}function nt(e){return at(e,!0)}class lt{constructor(e,t=!1){this._rawValue=e,this._shallow=t,this.__v_isRef=!0,this._value=t?e:Qe(e)}get value(){return ce(Ze(this),0,"value"),this._value}set value(e){q(Ze(e),this._rawValue)&&(this._rawValue=e,this._value=this._shallow?e:Qe(e),de(Ze(this),"set","value",e))}}function at(e,t=!1){return et(e)?e:new lt(e,t)}function ot(e){return et(e)?e.value:e}const rt={get:(e,t,n)=>ot(Reflect.get(e,t,n)),set:(e,t,n,l)=>{const a=e[t];return et(a)&&!et(n)?(a.value=n,!0):Reflect.set(e,t,n,l)}};function it(e){return Ge(e)?e:new Proxy(e,rt)}function st(e){const t=_(e)?new Array(e.length):{};for(const n in e)t[n]=ct(e,n);return t}class ut{constructor(e,t){this._object=e,this._key=t,this.__v_isRef=!0}get value(){return this._object[this._key]}set value(e){this._object[this._key]=e}}function ct(e,t){return et(e[t])?e[t]:new ut(e,t)}class dt{constructor(e,t,n){this._setter=t,this._dirty=!0,this.__v_isRef=!0,this.effect=ne(e,{lazy:!0,scheduler:()=>{this._dirty||(this._dirty=!0,de(Ze(this),"set","value"))}}),this.__v_isReadonly=n}get value(){return this._dirty&&(this._value=this.effect(),this._dirty=!1),ce(Ze(this),0,"value"),this._value}set value(e){this._setter(e)}}function pt(e,t,n,l){let a;try{a=l?e(...l):e()}catch(e){ht(e,t,n)}return a}function ft(e,t,n,l){if(M(e)){const a=pt(e,t,n,l);return a&&N(a)&&a.catch((e=>{ht(e,t,n)})),a}const a=[];for(let o=0;o<e.length;o++)a.push(ft(e[o],t,n,l));return a}function ht(e,t,n,l=!0){if(t&&t.vnode,t){let l=t.parent;const a=t.proxy,o=n;for(;l;){const t=l.ec;if(t)for(let n=0;n<t.length;n++)if(!1===t[n](e,a,o))return;l=l.parent}const r=t.appContext.config.errorHandler;if(r)return void pt(r,null,10,[e,a,o])}!function(e,t,n,l=!0){console.error(e)}(e,0,0,l)}let vt=!1,mt=!1;const gt=[];let bt=0;const yt=[];let xt=null,kt=0;const wt=[];let Ct=null,_t=0;const At=Promise.resolve();let St=null,Et=null;function Mt(e){const t=St||At;return e?t.then(this?e.bind(this):e):t}function Ot(e){gt.length&&gt.includes(e,vt&&e.allowRecurse?bt+1:bt)||e===Et||(gt.push(e),Dt())}function Dt(){vt||mt||(mt=!0,St=At.then(Vt))}function Tt(e,t,n,l){_(e)?n.push(...e):t&&t.includes(e,e.allowRecurse?l+1:l)||n.push(e),Dt()}function Nt(e,t=null){if(yt.length){for(Et=t,xt=[...new Set(yt)],yt.length=0,kt=0;kt<xt.length;kt++)xt[kt]();xt=null,kt=0,Et=null,Nt(e,t)}}function Bt(e){if(wt.length){const e=[...new Set(wt)];if(wt.length=0,Ct)return void Ct.push(...e);for(Ct=e,Ct.sort(((e,t)=>Pt(e)-Pt(t))),_t=0;_t<Ct.length;_t++)Ct[_t]();Ct=null,_t=0}}const Pt=e=>null==e.id?1/0:e.id;function Vt(e){mt=!1,vt=!0,Nt(e),gt.sort(((e,t)=>Pt(e)-Pt(t)));try{for(bt=0;bt<gt.length;bt++){const e=gt[bt];e&&pt(e,null,14)}}finally{bt=0,gt.length=0,Bt(),vt=!1,St=null,(gt.length||wt.length)&&Vt(e)}}new Set,new Map;const It=Ft("component:added"),Lt=Ft("component:updated"),zt=Ft("component:removed");function Ft(e){return e=>{}}function $t(e,t,...n){const l=e.vnode.props||f;let a=n;const o=t.startsWith("update:"),r=o&&t.slice(7);if(r&&r in l){const e=`${"modelValue"===r?"model":r}Modifiers`,{number:t,trim:o}=l[e]||f;o?a=n.map((e=>e.trim())):t&&(a=n.map(U))}__VUE_PROD_DEVTOOLS__;let i=W($(t)),s=l[i];!s&&o&&(i=W(j(t)),s=l[i]),s&&ft(s,e,6,a);const u=l[i+"Once"];if(u){if(e.emitted){if(e.emitted[i])return}else(e.emitted={})[i]=!0;ft(u,e,6,a)}}function Rt(e,t,n=!1){if(!t.deopt&&void 0!==e.__emits)return e.__emits;const l=e.emits;let a={},o=!1;if(__VUE_OPTIONS_API__&&!M(e)){const l=e=>{o=!0,x(a,Rt(e,t,!0))};!n&&t.mixins.length&&t.mixins.forEach(l),e.extends&&l(e.extends),e.mixins&&e.mixins.forEach(l)}return l||o?(_(l)?l.forEach((e=>a[e]=null)):x(a,l),e.__emits=a):e.__emits=null}function jt(e,t){return!(!e||!b(t))&&(t=t.slice(2).replace(/Once$/,""),C(e,t[0].toLowerCase()+t.slice(1))||C(e,j(t))||C(e,t))}let Ht=null;function Wt(e){Ht=e}function qt(e){const{type:t,vnode:n,proxy:l,withProxy:a,props:o,propsOptions:[r],slots:i,attrs:s,emit:u,render:c,renderCache:d,data:p,setupState:f,ctx:h}=e;let v;Ht=e;try{let e;if(4&n.shapeFlag){const t=a||l;v=Vl(c.call(t,t,d,o,f,p,h)),e=s}else{const n=t;v=Vl(n.length>1?n(o,{attrs:s,slots:i,emit:u}):n(o,null)),e=t.props?s:Yt(s)}let m=v;if(!1!==t.inheritAttrs&&e){const t=Object.keys(e),{shapeFlag:n}=m;t.length&&(1&n||6&n)&&(r&&t.some(y)&&(e=Kt(e,r)),m=Nl(m,e))}n.dirs&&(m.dirs=m.dirs?m.dirs.concat(n.dirs):n.dirs),n.transition&&(m.transition=n.transition),v=m}catch(t){ht(t,e,1),v=Tl(yl)}return Ht=null,v}const Yt=e=>{let t;for(const n in e)("class"===n||"style"===n||b(n))&&((t||(t={}))[n]=e[n]);return t},Kt=(e,t)=>{const n={};for(const l in e)y(l)&&l.slice(9)in t||(n[l]=e[l]);return n};function Ut(e,t,n){const l=Object.keys(t);if(l.length!==Object.keys(e).length)return!0;for(let a=0;a<l.length;a++){const o=l[a];if(t[o]!==e[o]&&!jt(n,o))return!0}return!1}function Gt(e){return M(e)&&(e=e()),_(e)&&(e=function(e){let t;for(let n=0;n<e.length;n++){const l=e[n];if(!Sl(l))return;if(l.type!==yl||"v-if"===l.children){if(t)return;t=l}}return t}(e)),Vl(e)}let Xt=0;const Jt=e=>Xt+=e;function Zt(e,t,n={},l){let a=e[t];Xt++,Cl();const o=a&&Qt(a(n)),r=Al(gl,{key:n.key||`_${t}`},o||(l?l():[]),o&&1===e._?64:-2);return Xt--,r}function Qt(e){return e.some((e=>!Sl(e)||e.type!==yl&&!(e.type===gl&&!Qt(e.children))))?e:null}function en(e,t=Ht){if(!t)return e;const n=(...n)=>{Xt||Cl(!0);const l=Ht;Wt(t);const a=e(...n);return Wt(l),Xt||_l(),a};return n._c=!0,n}let tn=null;const nn=[];function ln(e){nn.push(tn=e)}function an(){nn.pop(),tn=nn[nn.length-1]||null}function on(e,t,n,l){const[a,o]=e.propsOptions;if(t)for(const o in t){const r=t[o];if(L(o))continue;let i;a&&C(a,i=$(o))?n[i]=r:jt(e.emitsOptions,o)||(l[o]=r)}if(o){const t=Ze(n);for(let l=0;l<o.length;l++){const r=o[l];n[r]=rn(a,t,r,t[r],e)}}}function rn(e,t,n,l,a){const o=e[n];if(null!=o){const e=C(o,"default");if(e&&void 0===l){const e=o.default;o.type!==Function&&M(e)?(aa(a),l=e(t),aa(null)):l=e}o[0]&&(C(t,n)||e?!o[1]||""!==l&&l!==j(n)||(l=!0):l=!1)}return l}function sn(e,t,n=!1){if(!t.deopt&&e.__props)return e.__props;const l=e.props,a={},o=[];let r=!1;if(__VUE_OPTIONS_API__&&!M(e)){const l=e=>{r=!0;const[n,l]=sn(e,t,!0);x(a,n),l&&o.push(...l)};!n&&t.mixins.length&&t.mixins.forEach(l),e.extends&&l(e.extends),e.mixins&&e.mixins.forEach(l)}if(!l&&!r)return e.__props=h;if(_(l))for(let e=0;e<l.length;e++){const t=$(l[e]);un(t)&&(a[t]=f)}else if(l)for(const e in l){const t=$(e);if(un(t)){const n=l[e],r=a[t]=_(n)||M(n)?{type:n}:n;if(r){const e=pn(Boolean,r.type),n=pn(String,r.type);r[0]=e>-1,r[1]=n<0||e<n,(e>-1||C(r,"default"))&&o.push(t)}}}return e.__props=[a,o]}function un(e){return"$"!==e[0]}function cn(e){const t=e&&e.toString().match(/^\s*function (\w+)/);return t?t[1]:""}function dn(e,t){return cn(e)===cn(t)}function pn(e,t){if(_(t)){for(let n=0,l=t.length;n<l;n++)if(dn(t[n],e))return n}else if(M(t))return dn(t,e)?0:-1;return-1}function fn(e,t,n=na,l=!1){if(n){const a=n[e]||(n[e]=[]),o=t.__weh||(t.__weh=(...l)=>{if(n.isUnmounted)return;se(),aa(n);const a=ft(t,n,e,l);return aa(null),ue(),a});return l?a.unshift(o):a.push(o),o}}const hn=e=>(t,n=na)=>!oa&&fn(e,t,n),vn=hn("bm"),mn=hn("m"),gn=hn("bu"),bn=hn("u"),yn=hn("bum"),xn=hn("um"),kn=hn("rtg"),wn=hn("rtc");function Cn(e,t){return Sn(e,null,t)}const _n={};function An(e,t,n){return Sn(e,t,n)}function Sn(e,t,{immediate:n,deep:l,flush:a,onTrack:o,onTrigger:r}=f,i=na){let s,u,c=!1;if(et(e)?(s=()=>e.value,c=!!e._shallow):Ge(e)?(s=()=>e,l=!0):s=_(e)?()=>e.map((e=>et(e)?e.value:Ge(e)?Mn(e):M(e)?pt(e,i,2):void 0)):M(e)?t?()=>pt(e,i,2):()=>{if(!i||!i.isUnmounted)return u&&u(),pt(e,i,3,[d])}:v,t&&l){const e=s;s=()=>Mn(e())}const d=e=>{u=g.options.onStop=()=>{pt(e,i,4)}};let p=_(e)?[]:_n;const h=()=>{if(g.active)if(t){const e=g();(l||c||q(e,p))&&(u&&u(),ft(t,i,3,[e,p===_n?void 0:p,d]),p=e)}else g()};let m;h.allowRecurse=!!t,m="sync"===a?h:"post"===a?()=>tl(h,i&&i.suspense):()=>{!i||i.isMounted?function(e){Tt(e,xt,yt,kt)}(h):h()};const g=ne(s,{lazy:!0,onTrack:o,onTrigger:r,scheduler:m});return sa(g,i),t?n?h():p=g():"post"===a?tl(g,i&&i.suspense):g(),()=>{le(g),i&&k(i.effects,g)}}function En(e,t,n){const l=this.proxy;return Sn(O(e)?()=>l[e]:e.bind(l),t.bind(l),n,this)}function Mn(e,t=new Set){if(!T(e)||t.has(e))return e;if(t.add(e),et(e))Mn(e.value,t);else if(_(e))for(let n=0;n<e.length;n++)Mn(e[n],t);else if(S(e)||A(e))e.forEach((e=>{Mn(e,t)}));else for(const n in e)Mn(e[n],t);return e}function On(){const e={isMounted:!1,isLeaving:!1,isUnmounting:!1,leavingVNodes:new Map};return mn((()=>{e.isMounted=!0})),yn((()=>{e.isUnmounting=!0})),e}const Dn=[Function,Array],Tn={name:"BaseTransition",props:{mode:String,appear:Boolean,persisted:Boolean,onBeforeEnter:Dn,onEnter:Dn,onAfterEnter:Dn,onEnterCancelled:Dn,onBeforeLeave:Dn,onLeave:Dn,onAfterLeave:Dn,onLeaveCancelled:Dn,onBeforeAppear:Dn,onAppear:Dn,onAfterAppear:Dn,onAppearCancelled:Dn},setup(e,{slots:t}){const n=la(),l=On();let a;return()=>{const o=t.default&&Ln(t.default(),!0);if(!o||!o.length)return;const r=Ze(e),{mode:i}=r,s=o[0];if(l.isLeaving)return Pn(s);const u=Vn(s);if(!u)return Pn(s);const c=Bn(u,r,l,n);In(u,c);const d=n.subTree,p=d&&Vn(d);let f=!1;const{getTransitionKey:h}=u.type;if(h){const e=h();void 0===a?a=e:e!==a&&(a=e,f=!0)}if(p&&p.type!==yl&&(!El(u,p)||f)){const e=Bn(p,r,l,n);if(In(p,e),"out-in"===i)return l.isLeaving=!0,e.afterLeave=()=>{l.isLeaving=!1,n.update()},Pn(s);"in-out"===i&&(e.delayLeave=(e,t,n)=>{Nn(l,p)[String(p.key)]=p,e._leaveCb=()=>{t(),e._leaveCb=void 0,delete c.delayedLeave},c.delayedLeave=n})}return s}}};function Nn(e,t){const{leavingVNodes:n}=e;let l=n.get(t.type);return l||(l=Object.create(null),n.set(t.type,l)),l}function Bn(e,t,n,l){const{appear:a,mode:o,persisted:r=!1,onBeforeEnter:i,onEnter:s,onAfterEnter:u,onEnterCancelled:c,onBeforeLeave:d,onLeave:p,onAfterLeave:f,onLeaveCancelled:h,onBeforeAppear:v,onAppear:m,onAfterAppear:g,onAppearCancelled:b}=t,y=String(e.key),x=Nn(n,e),k=(e,t)=>{e&&ft(e,l,9,t)},w={mode:o,persisted:r,beforeEnter(t){let l=i;if(!n.isMounted){if(!a)return;l=v||i}t._leaveCb&&t._leaveCb(!0);const o=x[y];o&&El(e,o)&&o.el._leaveCb&&o.el._leaveCb(),k(l,[t])},enter(e){let t=s,l=u,o=c;if(!n.isMounted){if(!a)return;t=m||s,l=g||u,o=b||c}let r=!1;const i=e._enterCb=t=>{r||(r=!0,k(t?o:l,[e]),w.delayedLeave&&w.delayedLeave(),e._enterCb=void 0)};t?(t(e,i),t.length<=1&&i()):i()},leave(t,l){const a=String(e.key);if(t._enterCb&&t._enterCb(!0),n.isUnmounting)return l();k(d,[t]);let o=!1;const r=t._leaveCb=n=>{o||(o=!0,l(),k(n?h:f,[t]),t._leaveCb=void 0,x[a]===e&&delete x[a])};x[a]=e,p?(p(t,r),p.length<=1&&r()):r()},clone:e=>Bn(e,t,n,l)};return w}function Pn(e){if(zn(e))return(e=Nl(e)).children=null,e}function Vn(e){return zn(e)?e.children?e.children[0]:void 0:e}function In(e,t){6&e.shapeFlag&&e.component?In(e.component.subTree,t):128&e.shapeFlag?(e.ssContent.transition=t.clone(e.ssContent),e.ssFallback.transition=t.clone(e.ssFallback)):e.transition=t}function Ln(e,t=!1){let n=[],l=0;for(let a=0;a<e.length;a++){const o=e[a];o.type===gl?(128&o.patchFlag&&l++,n=n.concat(Ln(o.children,t))):(t||o.type!==yl)&&n.push(o)}if(l>1)for(let e=0;e<n.length;e++)n[e].patchFlag=-2;return n}const zn=e=>e.type.__isKeepAlive;function Fn(e,t){Rn(e,"a",t)}function $n(e,t){Rn(e,"da",t)}function Rn(e,t,n=na){const l=e.__wdc||(e.__wdc=()=>{let t=n;for(;t;){if(t.isDeactivated)return;t=t.parent}e()});if(fn(t,l,n),n){let e=n.parent;for(;e&&e.parent;)zn(e.parent.vnode)&&jn(l,t,n,e),e=e.parent}}function jn(e,t,n,l){const a=fn(t,e,l,!0);xn((()=>{k(l[t],a)}),n)}RegExp,RegExp;const Hn=e=>"_"===e[0]||"$stable"===e,Wn=e=>_(e)?e.map(Vl):[Vl(e)],qn=(e,t,n)=>en((e=>Wn(t(e))),n),Yn=(e,t)=>{const n=e._ctx;for(const l in e){if(Hn(l))continue;const a=e[l];if(M(a))t[l]=qn(0,a,n);else if(null!=a){const e=Wn(a);t[l]=()=>e}}},Kn=(e,t)=>{const n=Wn(t);e.slots.default=()=>n};function Un(e,t){if(null===Ht)return e;const n=Ht.proxy,l=e.dirs||(e.dirs=[]);for(let e=0;e<t.length;e++){let[a,o,r,i=f]=t[e];M(a)&&(a={mounted:a,updated:a}),l.push({dir:a,instance:n,value:o,oldValue:void 0,arg:r,modifiers:i})}return e}function Gn(e,t,n,l){const a=e.dirs,o=t&&t.dirs;for(let r=0;r<a.length;r++){const i=a[r];o&&(i.oldValue=o[r].value);const s=i.dir[l];s&&ft(s,n,8,[e.el,i,e,t])}}function Xn(){return{app:null,config:{isNativeTag:m,performance:!1,globalProperties:{},optionMergeStrategies:{},isCustomElement:m,errorHandler:void 0,warnHandler:void 0},mixins:[],components:{},directives:{},provides:Object.create(null)}}let Jn=0;function Zn(e,t){return function(n,l=null){null==l||T(l)||(l=null);const a=Xn(),o=new Set;let r=!1;const i=a.app={_uid:Jn++,_component:n,_props:l,_container:null,_context:a,version:ha,get config(){return a.config},set config(e){},use:(e,...t)=>(o.has(e)||(e&&M(e.install)?(o.add(e),e.install(i,...t)):M(e)&&(o.add(e),e(i,...t))),i),mixin:e=>(__VUE_OPTIONS_API__&&(a.mixins.includes(e)||(a.mixins.push(e),(e.props||e.emits)&&(a.deopt=!0))),i),component:(e,t)=>t?(a.components[e]=t,i):a.components[e],directive:(e,t)=>t?(a.directives[e]=t,i):a.directives[e],mount(o,s){if(!r){const u=Tl(n,l);return u.appContext=a,s&&t?t(u,o):e(u,o),r=!0,i._container=o,o.__vue_app__=i,__VUE_PROD_DEVTOOLS__,u.component.proxy}},unmount(){r&&(e(null,i._container),__VUE_PROD_DEVTOOLS__)},provide:(e,t)=>(a.provides[e]=t,i)};return i}}function Qn(e){return M(e)?{setup:e,name:e.name}:e}const el={scheduler:Ot,allowRecurse:!0},tl=function(e,t){t&&t.pendingBranch?_(e)?t.effects.push(...e):t.effects.push(e):Tt(e,Ct,wt,_t)},nl=(e,t,n,l)=>{if(_(e))return void e.forEach(((e,a)=>nl(e,t&&(_(t)?t[a]:t),n,l)));let a;a=!l||l.type.__asyncLoader?null:4&l.shapeFlag?l.component.exposed||l.component.proxy:l.el;const{i:o,r}=e,i=t&&t.r,s=o.refs===f?o.refs={}:o.refs,u=o.setupState;if(null!=i&&i!==r&&(O(i)?(s[i]=null,C(u,i)&&(u[i]=null)):et(i)&&(i.value=null)),O(r)){const e=()=>{s[r]=a,C(u,r)&&(u[r]=a)};a?(e.id=-1,tl(e,n)):e()}else if(et(r)){const e=()=>{r.value=a};a?(e.id=-1,tl(e,n)):e()}else M(r)&&pt(r,o,12,[a,s])};function ll(e,t){!function(){let e=!1;"boolean"!=typeof __VUE_OPTIONS_API__&&(e=!0,X().__VUE_OPTIONS_API__=!0),"boolean"!=typeof __VUE_PROD_DEVTOOLS__&&(e=!0,X().__VUE_PROD_DEVTOOLS__=!1)}();const{insert:n,remove:l,patchProp:a,forcePatchProp:o,createElement:r,createText:i,createComment:s,setText:u,setElementText:c,parentNode:d,nextSibling:p,setScopeId:m=v,cloneNode:g,insertStaticContent:b}=e,y=(e,t,n,l=null,a=null,o=null,r=!1,i=!1)=>{e&&!El(e,t)&&(l=ee(e),U(e,a,o,!0),e=null),-2===t.patchFlag&&(i=!1,t.dynamicChildren=null);const{type:s,ref:u,shapeFlag:c}=t;switch(s){case bl:k(e,t,n,l);break;case yl:w(e,t,n,l);break;case xl:null==e&&_(t,n,l,r);break;case gl:B(e,t,n,l,a,o,r,i);break;default:1&c?A(e,t,n,l,a,o,r,i):6&c?P(e,t,n,l,a,o,r,i):(64&c||128&c)&&s.process(e,t,n,l,a,o,r,i,ae)}null!=u&&a&&nl(u,e&&e.ref,o,t)},k=(e,t,l,a)=>{if(null==e)n(t.el=i(t.children),l,a);else{const n=t.el=e.el;t.children!==e.children&&u(n,t.children)}},w=(e,t,l,a)=>{null==e?n(t.el=s(t.children||""),l,a):t.el=e.el},_=(e,t,n,l)=>{[e.el,e.anchor]=b(e.children,t,n,l)},A=(e,t,n,l,a,o,r,i)=>{r=r||"svg"===t.type,null==e?S(t,n,l,a,o,r,i):O(e,t,a,o,r,i)},S=(e,t,l,o,i,s,u)=>{let d,p;const{type:f,props:h,shapeFlag:v,transition:m,scopeId:b,patchFlag:y,dirs:x}=e;if(e.el&&void 0!==g&&-1===y)d=e.el=g(e.el);else{if(d=e.el=r(e.type,s,h&&h.is),8&v?c(d,e.children):16&v&&M(e.children,d,null,o,i,s&&"foreignObject"!==f,u||!!e.dynamicChildren),x&&Gn(e,null,o,"created"),h){for(const t in h)L(t)||a(d,t,null,h[t],s,e.children,o,i,Q);(p=h.onVnodeBeforeMount)&&al(p,o,e)}E(d,b,e,o)}__VUE_PROD_DEVTOOLS__&&(Object.defineProperty(d,"__vnode",{value:e,enumerable:!1}),Object.defineProperty(d,"__vueParentComponent",{value:o,enumerable:!1})),x&&Gn(e,null,o,"beforeMount");const k=(!i||i&&!i.pendingBranch)&&m&&!m.persisted;k&&m.beforeEnter(d),n(d,t,l),((p=h&&h.onVnodeMounted)||k||x)&&tl((()=>{p&&al(p,o,e),k&&m.enter(d),x&&Gn(e,null,o,"mounted")}),i)},E=(e,t,n,l)=>{if(t&&m(e,t),l){const a=l.type.__scopeId;a&&a!==t&&m(e,a+"-s"),n===l.subTree&&E(e,l.vnode.scopeId,l.vnode,l.parent)}},M=(e,t,n,l,a,o,r,i=0)=>{for(let s=i;s<e.length;s++){const i=e[s]=r?Il(e[s]):Vl(e[s]);y(null,i,t,n,l,a,o,r)}},O=(e,t,n,l,r,i)=>{const s=t.el=e.el;let{patchFlag:u,dynamicChildren:d,dirs:p}=t;u|=16&e.patchFlag;const h=e.props||f,v=t.props||f;let m;if((m=v.onVnodeBeforeUpdate)&&al(m,n,t,e),p&&Gn(t,e,n,"beforeUpdate"),u>0){if(16&u)T(s,t,h,v,n,l,r);else if(2&u&&h.class!==v.class&&a(s,"class",null,v.class,r),4&u&&a(s,"style",h.style,v.style,r),8&u){const i=t.dynamicProps;for(let t=0;t<i.length;t++){const u=i[t],c=h[u],d=v[u];(d!==c||o&&o(s,u))&&a(s,u,c,d,r,e.children,n,l,Q)}}1&u&&e.children!==t.children&&c(s,t.children)}else i||null!=d||T(s,t,h,v,n,l,r);const g=r&&"foreignObject"!==t.type;d?D(e.dynamicChildren,d,s,n,l,g):i||R(e,t,s,null,n,l,g),((m=v.onVnodeUpdated)||p)&&tl((()=>{m&&al(m,n,t,e),p&&Gn(t,e,n,"updated")}),l)},D=(e,t,n,l,a,o)=>{for(let r=0;r<t.length;r++){const i=e[r],s=t[r],u=i.type===gl||!El(i,s)||6&i.shapeFlag||64&i.shapeFlag?d(i.el):n;y(i,s,u,null,l,a,o,!0)}},T=(e,t,n,l,r,i,s)=>{if(n!==l){for(const u in l){if(L(u))continue;const c=l[u],d=n[u];(c!==d||o&&o(e,u))&&a(e,u,d,c,s,t.children,r,i,Q)}if(n!==f)for(const o in n)L(o)||o in l||a(e,o,n[o],null,s,t.children,r,i,Q)}},B=(e,t,l,a,o,r,s,u)=>{const c=t.el=e?e.el:i(""),d=t.anchor=e?e.anchor:i("");let{patchFlag:p,dynamicChildren:f}=t;p>0&&(u=!0),null==e?(n(c,l,a),n(d,l,a),M(t.children,l,d,o,r,s,u)):p>0&&64&p&&f?(D(e.dynamicChildren,f,l,o,r,s),(null!=t.key||o&&t===o.subTree)&&ol(e,t,!0)):R(e,t,l,d,o,r,s,u)},P=(e,t,n,l,a,o,r,i)=>{null==e?512&t.shapeFlag?a.ctx.activate(t,n,l,r,i):V(t,n,l,a,o,r,i):I(e,t,i)},V=(e,t,n,l,a,o,r)=>{const i=e.component=function(e,t,n){const l=e.type,a=(t?t.appContext:e.appContext)||ea,o={uid:ta++,vnode:e,type:l,parent:t,appContext:a,root:null,next:null,subTree:null,update:null,render:null,proxy:null,exposed:null,withProxy:null,effects:null,provides:t?t.provides:Object.create(a.provides),accessCache:null,renderCache:[],components:null,directives:null,propsOptions:sn(l,a),emitsOptions:Rt(l,a),emit:null,emitted:null,ctx:f,data:f,props:f,attrs:f,slots:f,refs:f,setupState:f,setupContext:null,suspense:n,suspenseId:n?n.pendingId:0,asyncDep:null,asyncResolved:!1,isMounted:!1,isUnmounted:!1,isDeactivated:!1,bc:null,c:null,bm:null,m:null,bu:null,u:null,um:null,bum:null,da:null,a:null,rtg:null,rtc:null,ec:null};return o.ctx={_:o},o.root=t?t.root:o,o.emit=$t.bind(null,o),__VUE_PROD_DEVTOOLS__&&It(o),o}(e,l,a);if(zn(e)&&(i.ctx.renderer=ae),function(e,t=!1){oa=t;const{props:n,children:l,shapeFlag:a}=e.vnode,o=4&a;(function(e,t,n,l=!1){const a={},o={};K(o,Ml,1),on(e,t,a,o),n?e.props=l?a:Ue(a,!1,we,je):e.type.props?e.props=a:e.props=o,e.attrs=o})(e,n,o,t),((e,t)=>{if(32&e.vnode.shapeFlag){const n=t._;n?(e.slots=t,K(t,"_",n)):Yn(t,e.slots={})}else e.slots={},t&&Kn(e,t);K(e.slots,Ml,1)})(e,l);o&&function(e,t){const n=e.type;e.accessCache=Object.create(null),e.proxy=new Proxy(e.ctx,Zl);const{setup:l}=n;if(l){const n=e.setupContext=l.length>1?function(e){const t=t=>{e.exposed=it(t)};return{attrs:e.attrs,slots:e.slots,emit:e.emit,expose:t}}(e):null;na=e,se();const a=pt(l,e,0,[e.props,n]);if(ue(),na=null,N(a)){if(t)return a.then((t=>{ra(e,t)}));e.asyncDep=a}else ra(e,a)}else ia(e)}(e,t);oa=!1}(i),i.asyncDep){if(a&&a.registerDep(i,z),!e.el){const e=i.subTree=Tl(yl);w(null,e,t,n)}}else z(i,e,t,n,a,o,r)},I=(e,t,n)=>{const l=t.component=e.component;if(function(e,t,n){const{props:l,children:a,component:o}=e,{props:r,children:i,patchFlag:s}=t,u=o.emitsOptions;if(t.dirs||t.transition)return!0;if(!(n&&s>=0))return!(!a&&!i||i&&i.$stable)||l!==r&&(l?!r||Ut(l,r,u):!!r);if(1024&s)return!0;if(16&s)return l?Ut(l,r,u):!!r;if(8&s){const e=t.dynamicProps;for(let t=0;t<e.length;t++){const n=e[t];if(r[n]!==l[n]&&!jt(u,n))return!0}}return!1}(e,t,n)){if(l.asyncDep&&!l.asyncResolved)return void F(l,t,n);l.next=t,function(e){const t=gt.indexOf(e);t>-1&&gt.splice(t,1)}(l.update),l.update()}else t.component=e.component,t.el=e.el,l.vnode=t},z=(e,t,n,l,a,o,r)=>{e.update=ne((function(){if(e.isMounted){let t,{next:n,bu:l,u:i,parent:s,vnode:u}=e,c=n;n?(n.el=u.el,F(e,n,r)):n=u,l&&Y(l),(t=n.props&&n.props.onVnodeBeforeUpdate)&&al(t,s,n,u);const p=qt(e),f=e.subTree;e.subTree=p,y(f,p,d(f.el),ee(f),e,a,o),n.el=p.el,null===c&&function({vnode:e,parent:t},n){for(;t&&t.subTree===e;)(e=t.vnode).el=n,t=t.parent}(e,p.el),i&&tl(i,a),(t=n.props&&n.props.onVnodeUpdated)&&tl((()=>{al(t,s,n,u)}),a),__VUE_PROD_DEVTOOLS__&&Lt(e)}else{let r;const{el:i,props:s}=t,{bm:u,m:c,parent:d}=e;u&&Y(u),(r=s&&s.onVnodeBeforeMount)&&al(r,d,t);const p=e.subTree=qt(e);i&&re?re(t.el,p,e,a):(y(null,p,n,l,e,a,o),t.el=p.el),c&&tl(c,a),(r=s&&s.onVnodeMounted)&&tl((()=>{al(r,d,t)}),a);const{a:f}=e;f&&256&t.shapeFlag&&tl(f,a),e.isMounted=!0}}),el)},F=(e,t,n)=>{t.component=e;const l=e.vnode.props;e.vnode=t,e.next=null,function(e,t,n,l){const{props:a,attrs:o,vnode:{patchFlag:r}}=e,i=Ze(a),[s]=e.propsOptions;if(!(l||r>0)||16&r){let l;on(e,t,a,o);for(const o in i)t&&(C(t,o)||(l=j(o))!==o&&C(t,l))||(s?!n||void 0===n[o]&&void 0===n[l]||(a[o]=rn(s,t||f,o,void 0,e)):delete a[o]);if(o!==i)for(const e in o)t&&C(t,e)||delete o[e]}else if(8&r){const n=e.vnode.dynamicProps;for(let l=0;l<n.length;l++){const r=n[l],u=t[r];if(s)if(C(o,r))o[r]=u;else{const t=$(r);a[t]=rn(s,i,t,u,e)}else o[r]=u}}de(e,"set","$attrs")}(e,t.props,l,n),((e,t)=>{const{vnode:n,slots:l}=e;let a=!0,o=f;if(32&n.shapeFlag){const e=t._;e?1===e?a=!1:x(l,t):(a=!t.$stable,Yn(t,l)),o=t}else t&&(Kn(e,t),o={default:1});if(a)for(const e in l)Hn(e)||e in o||delete l[e]})(e,t.children),Nt(void 0,e.update)},R=(e,t,n,l,a,o,r,i=!1)=>{const s=e&&e.children,u=e?e.shapeFlag:0,d=t.children,{patchFlag:p,shapeFlag:f}=t;if(p>0){if(128&p)return void W(s,d,n,l,a,o,r,i);if(256&p)return void H(s,d,n,l,a,o,r,i)}8&f?(16&u&&Q(s,a,o),d!==s&&c(n,d)):16&u?16&f?W(s,d,n,l,a,o,r,i):Q(s,a,o,!0):(8&u&&c(n,""),16&f&&M(d,n,l,a,o,r,i))},H=(e,t,n,l,a,o,r,i)=>{t=t||h;const s=(e=e||h).length,u=t.length,c=Math.min(s,u);let d;for(d=0;d<c;d++){const l=t[d]=i?Il(t[d]):Vl(t[d]);y(e[d],l,n,null,a,o,r,i)}s>u?Q(e,a,o,!0,!1,c):M(t,n,l,a,o,r,i,c)},W=(e,t,n,l,a,o,r,i)=>{let s=0;const u=t.length;let c=e.length-1,d=u-1;for(;s<=c&&s<=d;){const l=e[s],u=t[s]=i?Il(t[s]):Vl(t[s]);if(!El(l,u))break;y(l,u,n,null,a,o,r,i),s++}for(;s<=c&&s<=d;){const l=e[c],s=t[d]=i?Il(t[d]):Vl(t[d]);if(!El(l,s))break;y(l,s,n,null,a,o,r,i),c--,d--}if(s>c){if(s<=d){const e=d+1,c=e<u?t[e].el:l;for(;s<=d;)y(null,t[s]=i?Il(t[s]):Vl(t[s]),n,c,a,o,r),s++}}else if(s>d)for(;s<=c;)U(e[s],a,o,!0),s++;else{const p=s,f=s,v=new Map;for(s=f;s<=d;s++){const e=t[s]=i?Il(t[s]):Vl(t[s]);null!=e.key&&v.set(e.key,s)}let m,g=0;const b=d-f+1;let x=!1,k=0;const w=new Array(b);for(s=0;s<b;s++)w[s]=0;for(s=p;s<=c;s++){const l=e[s];if(g>=b){U(l,a,o,!0);continue}let u;if(null!=l.key)u=v.get(l.key);else for(m=f;m<=d;m++)if(0===w[m-f]&&El(l,t[m])){u=m;break}void 0===u?U(l,a,o,!0):(w[u-f]=s+1,u>=k?k=u:x=!0,y(l,t[u],n,null,a,o,r,i),g++)}const C=x?function(e){const t=e.slice(),n=[0];let l,a,o,r,i;const s=e.length;for(l=0;l<s;l++){const s=e[l];if(0!==s){if(a=n[n.length-1],e[a]<s){t[l]=a,n.push(l);continue}for(o=0,r=n.length-1;o<r;)i=(o+r)/2|0,e[n[i]]<s?o=i+1:r=i;s<e[n[o]]&&(o>0&&(t[l]=n[o-1]),n[o]=l)}}for(o=n.length,r=n[o-1];o-- >0;)n[o]=r,r=t[r];return n}(w):h;for(m=C.length-1,s=b-1;s>=0;s--){const e=f+s,i=t[e],c=e+1<u?t[e+1].el:l;0===w[s]?y(null,i,n,c,a,o,r):x&&(m<0||s!==C[m]?q(i,n,c,2):m--)}}},q=(e,t,l,a,o=null)=>{const{el:r,type:i,transition:s,children:u,shapeFlag:c}=e;if(6&c)q(e.component.subTree,t,l,a);else if(128&c)e.suspense.move(t,l,a);else if(64&c)i.move(e,t,l,ae);else if(i!==gl)if(i!==xl)if(2!==a&&1&c&&s)if(0===a)s.beforeEnter(r),n(r,t,l),tl((()=>s.enter(r)),o);else{const{leave:e,delayLeave:a,afterLeave:o}=s,i=()=>n(r,t,l),u=()=>{e(r,(()=>{i(),o&&o()}))};a?a(r,i,u):u()}else n(r,t,l);else(({el:e,anchor:t},l,a)=>{let o;for(;e&&e!==t;)o=p(e),n(e,l,a),e=o;n(t,l,a)})(e,t,l);else{n(r,t,l);for(let e=0;e<u.length;e++)q(u[e],t,l,a);n(e.anchor,t,l)}},U=(e,t,n,l=!1,a=!1)=>{const{type:o,props:r,ref:i,children:s,dynamicChildren:u,shapeFlag:c,patchFlag:d,dirs:p}=e;if(null!=i&&nl(i,null,n,null),256&c)return void t.ctx.deactivate(e);const f=1&c&&p;let h;if((h=r&&r.onVnodeBeforeUnmount)&&al(h,t,e),6&c)Z(e.component,n,l);else{if(128&c)return void e.suspense.unmount(n,l);f&&Gn(e,null,t,"beforeUnmount"),u&&(o!==gl||d>0&&64&d)?Q(u,t,n,!1,!0):(o===gl&&(128&d||256&d)||!a&&16&c)&&Q(s,t,n),64&c&&(l||!rl(e.props))&&e.type.remove(e,ae),l&&G(e)}((h=r&&r.onVnodeUnmounted)||f)&&tl((()=>{h&&al(h,t,e),f&&Gn(e,null,t,"unmounted")}),n)},G=e=>{const{type:t,el:n,anchor:a,transition:o}=e;if(t===gl)return void J(n,a);if(t===xl)return void(({el:e,anchor:t})=>{let n;for(;e&&e!==t;)n=p(e),l(e),e=n;l(t)})(e);const r=()=>{l(n),o&&!o.persisted&&o.afterLeave&&o.afterLeave()};if(1&e.shapeFlag&&o&&!o.persisted){const{leave:t,delayLeave:l}=o,a=()=>t(n,r);l?l(e.el,r,a):a()}else r()},J=(e,t)=>{let n;for(;e!==t;)n=p(e),l(e),e=n;l(t)},Z=(e,t,n)=>{const{bum:l,effects:a,update:o,subTree:r,um:i}=e;if(l&&Y(l),a)for(let e=0;e<a.length;e++)le(a[e]);o&&(le(o),U(r,e,t,n)),i&&tl(i,t),tl((()=>{e.isUnmounted=!0}),t),t&&t.pendingBranch&&!t.isUnmounted&&e.asyncDep&&!e.asyncResolved&&e.suspenseId===t.pendingId&&(t.deps--,0===t.deps&&t.resolve()),__VUE_PROD_DEVTOOLS__&&zt(e)},Q=(e,t,n,l=!1,a=!1,o=0)=>{for(let r=o;r<e.length;r++)U(e[r],t,n,l,a)},ee=e=>6&e.shapeFlag?ee(e.component.subTree):128&e.shapeFlag?e.suspense.next():p(e.anchor||e.el),te=(e,t)=>{null==e?t._vnode&&U(t._vnode,null,null,!0):y(t._vnode||null,e,t),Bt(),t._vnode=e},ae={p:y,um:U,m:q,r:G,mt:V,mc:M,pc:R,pbc:D,n:ee,o:e};let oe,re;return t&&([oe,re]=t(ae)),{render:te,hydrate:oe,createApp:Zn(te,oe)}}function al(e,t,n,l=null){ft(e,t,7,[n,l])}function ol(e,t,n=!1){const l=e.children,a=t.children;if(_(l)&&_(a))for(let e=0;e<l.length;e++){const t=l[e];let o=a[e];1&o.shapeFlag&&!o.dynamicChildren&&((o.patchFlag<=0||32===o.patchFlag)&&(o=a[e]=Il(a[e]),o.el=t.el),n||ol(t,o))}}const rl=e=>e&&(e.disabled||""===e.disabled),il=e=>"undefined"!=typeof SVGElement&&e instanceof SVGElement,sl=(e,t)=>{const n=e&&e.to;if(O(n)){if(t){return t(n)}return null}return n};function ul(e,t,n,{o:{insert:l},m:a},o=2){0===o&&l(e.targetAnchor,t,n);const{el:r,anchor:i,shapeFlag:s,children:u,props:c}=e,d=2===o;if(d&&l(r,t,n),(!d||rl(c))&&16&s)for(let e=0;e<u.length;e++)a(u[e],t,n,2);d&&l(i,t,n)}const cl={__isTeleport:!0,process(e,t,n,l,a,o,r,i,s){const{mc:u,pc:c,pbc:d,o:{insert:p,querySelector:f,createText:h,createComment:v}}=s,m=rl(t.props),{shapeFlag:g,children:b}=t;if(null==e){const e=t.el=h(""),s=t.anchor=h("");p(e,n,l),p(s,n,l);const c=t.target=sl(t.props,f),d=t.targetAnchor=h("");c&&(p(d,c),r=r||il(c));const v=(e,t)=>{16&g&&u(b,e,t,a,o,r,i)};m?v(n,s):c&&v(c,d)}else{t.el=e.el;const l=t.anchor=e.anchor,u=t.target=e.target,p=t.targetAnchor=e.targetAnchor,h=rl(e.props),v=h?n:u,g=h?l:p;if(r=r||il(u),t.dynamicChildren?(d(e.dynamicChildren,t.dynamicChildren,v,a,o,r),ol(e,t,!0)):i||c(e,t,v,g,a,o,r),m)h||ul(t,n,l,s,1);else if((t.props&&t.props.to)!==(e.props&&e.props.to)){const e=t.target=sl(t.props,f);e&&ul(t,e,null,s,0)}else h&&ul(t,u,p,s,1)}},remove(e,{r:t,o:{remove:n}}){const{shapeFlag:l,children:a,anchor:o}=e;if(n(o),16&l)for(let e=0;e<a.length;e++)t(a[e])},move:ul,hydrate:function(e,t,n,l,a,{o:{nextSibling:o,parentNode:r,querySelector:i}},s){const u=t.target=sl(t.props,i);if(u){const i=u._lpa||u.firstChild;16&t.shapeFlag&&(rl(t.props)?(t.anchor=s(o(e),t,r(e),n,l,a),t.targetAnchor=i):(t.anchor=o(e),t.targetAnchor=s(i,t,u,n,l,a)),u._lpa=t.targetAnchor&&o(t.targetAnchor))}return t.anchor&&o(t.anchor)}},dl="components";function pl(e){return vl(dl,e)||e}const fl=Symbol();function hl(e){return vl("directives",e)}function vl(e,t,n=!0){const l=Ht||na;if(l){const n=l.type;if(e===dl){if("_self"===t)return n;const e=n.displayName||n.name;if(e&&(e===t||e===$(t)||e===H($(t))))return n}return ml(l[e]||n[e],t)||ml(l.appContext[e],t)}}function ml(e,t){return e&&(e[t]||e[$(t)]||e[H($(t))])}const gl=Symbol(void 0),bl=Symbol(void 0),yl=Symbol(void 0),xl=Symbol(void 0),kl=[];let wl=null;function Cl(e=!1){kl.push(wl=e?null:[])}function _l(){kl.pop(),wl=kl[kl.length-1]||null}function Al(e,t,n,l,a){const o=Tl(e,t,n,l,a,!0);return o.dynamicChildren=wl||h,_l(),wl&&wl.push(o),o}function Sl(e){return!!e&&!0===e.__v_isVNode}function El(e,t){return e.type===t.type&&e.key===t.key}const Ml="__vInternal",Ol=({key:e})=>null!=e?e:null,Dl=({ref:e})=>null!=e?O(e)||et(e)||M(e)?{i:Ht,r:e}:e:null,Tl=function(e,t=null,n=null,l=0,o=null,r=!1){if(e&&e!==fl||(e=yl),Sl(e)){const l=Nl(e,t,!0);return n&&Ll(l,n),l}if(i=e,M(i)&&"__vccOpts"in i&&(e=e.__vccOpts),t){(Je(t)||Ml in t)&&(t=x({},t));let{class:e,style:n}=t;e&&!O(e)&&(t.class=s(e)),T(n)&&(Je(n)&&!_(n)&&(n=x({},n)),t.style=a(n))}var i;const u=O(e)?1:(e=>e.__isSuspense)(e)?128:(e=>e.__isTeleport)(e)?64:T(e)?4:M(e)?2:0,c={__v_isVNode:!0,__v_skip:!0,type:e,props:t,key:t&&Ol(t),ref:t&&Dl(t),scopeId:tn,children:null,component:null,suspense:null,ssContent:null,ssFallback:null,dirs:null,transition:null,el:null,anchor:null,target:null,targetAnchor:null,staticCount:0,shapeFlag:u,patchFlag:l,dynamicProps:o,dynamicChildren:null,appContext:null};if(Ll(c,n),128&u){const{content:e,fallback:t}=function(e){const{shapeFlag:t,children:n}=e;let l,a;return 32&t?(l=Gt(n.default),a=Gt(n.fallback)):(l=Gt(n),a=Vl(null)),{content:l,fallback:a}}(c);c.ssContent=e,c.ssFallback=t}return!r&&wl&&(l>0||6&u)&&32!==l&&wl.push(c),c};function Nl(e,t,n=!1){const{props:l,ref:a,patchFlag:o}=e,r=t?zl(l||{},t):l;return{__v_isVNode:!0,__v_skip:!0,type:e.type,props:r,key:r&&Ol(r),ref:t&&t.ref?n&&a?_(a)?a.concat(Dl(t)):[a,Dl(t)]:Dl(t):a,scopeId:e.scopeId,children:e.children,target:e.target,targetAnchor:e.targetAnchor,staticCount:e.staticCount,shapeFlag:e.shapeFlag,patchFlag:t&&e.type!==gl?-1===o?16:16|o:o,dynamicProps:e.dynamicProps,dynamicChildren:e.dynamicChildren,appContext:e.appContext,dirs:e.dirs,transition:e.transition,component:e.component,suspense:e.suspense,ssContent:e.ssContent&&Nl(e.ssContent),ssFallback:e.ssFallback&&Nl(e.ssFallback),el:e.el,anchor:e.anchor}}function Bl(e=" ",t=0){return Tl(bl,null,e,t)}function Pl(e="",t=!1){return t?(Cl(),Al(yl,null,e)):Tl(yl,null,e)}function Vl(e){return null==e||"boolean"==typeof e?Tl(yl):_(e)?Tl(gl,null,e):"object"==typeof e?null===e.el?e:Nl(e):Tl(bl,null,String(e))}function Il(e){return null===e.el?e:Nl(e)}function Ll(e,t){let n=0;const{shapeFlag:l}=e;if(null==t)t=null;else if(_(t))n=16;else if("object"==typeof t){if(1&l||64&l){const n=t.default;return void(n&&(n._c&&Jt(1),Ll(e,n()),n._c&&Jt(-1)))}{n=32;const l=t._;l||Ml in t?3===l&&Ht&&(1024&Ht.vnode.patchFlag?(t._=2,e.patchFlag|=1024):t._=1):t._ctx=Ht}}else M(t)?(t={default:t,_ctx:Ht},n=32):(t=String(t),64&l?(n=16,t=[Bl(t)]):n=8);e.children=t,e.shapeFlag|=n}function zl(...e){const t=x({},e[0]);for(let n=1;n<e.length;n++){const l=e[n];for(const e in l)if("class"===e)t.class!==l.class&&(t.class=s([t.class,l.class]));else if("style"===e)t.style=a([t.style,l.style]);else if(b(e)){const n=t[e],a=l[e];n!==a&&(t[e]=n?[].concat(n,l[e]):a)}else""!==e&&(t[e]=l[e])}return t}function Fl(e,t){if(na){let n=na.provides;const l=na.parent&&na.parent.provides;l===n&&(n=na.provides=Object.create(l)),n[e]=t}}function $l(e,t,n=!1){const l=na||Ht;if(l){const a=null==l.parent?l.vnode.appContext&&l.vnode.appContext.provides:l.parent.provides;if(a&&e in a)return a[e];if(arguments.length>1)return n&&M(t)?t():t}}let Rl=!1;function jl(e,t,n=[],l=[],a=[],o=!1){const{mixins:r,extends:i,data:s,computed:u,methods:c,watch:d,provide:p,inject:h,components:m,directives:g,beforeMount:b,mounted:y,beforeUpdate:k,updated:w,activated:C,deactivated:A,beforeDestroy:S,beforeUnmount:E,destroyed:O,unmounted:D,render:N,renderTracked:B,renderTriggered:P,errorCaptured:V,expose:I}=t,L=e.proxy,z=e.ctx,F=e.appContext.mixins;if(o&&N&&e.render===v&&(e.render=N),o||(Rl=!0,Hl("beforeCreate","bc",t,e,F),Rl=!1,Yl(e,F,n,l,a)),i&&jl(e,i,n,l,a,!0),r&&Yl(e,r,n,l,a),h)if(_(h))for(let e=0;e<h.length;e++){const t=h[e];z[t]=$l(t)}else for(const e in h){const t=h[e];T(t)?z[e]=$l(t.from||e,t.default,!0):z[e]=$l(t)}if(c)for(const e in c){const t=c[e];M(t)&&(z[e]=t.bind(L))}if(o?s&&n.push(s):(n.length&&n.forEach((t=>Kl(e,t,L))),s&&Kl(e,s,L)),u)for(const e in u){const t=u[e],n=ua({get:M(t)?t.bind(L,L):M(t.get)?t.get.bind(L,L):v,set:!M(t)&&M(t.set)?t.set.bind(L):v});Object.defineProperty(z,e,{enumerable:!0,configurable:!0,get:()=>n.value,set:e=>n.value=e})}if(d&&l.push(d),!o&&l.length&&l.forEach((e=>{for(const t in e)Ul(e[t],z,L,t)})),p&&a.push(p),!o&&a.length&&a.forEach((e=>{const t=M(e)?e.call(L):e;Reflect.ownKeys(t).forEach((e=>{Fl(e,t[e])}))})),o&&(m&&x(e.components||(e.components=x({},e.type.components)),m),g&&x(e.directives||(e.directives=x({},e.type.directives)),g)),o||Hl("created","c",t,e,F),b&&vn(b.bind(L)),y&&mn(y.bind(L)),k&&gn(k.bind(L)),w&&bn(w.bind(L)),C&&Fn(C.bind(L)),A&&$n(A.bind(L)),V&&((e,t=na)=>{fn("ec",e,t)})(V.bind(L)),B&&wn(B.bind(L)),P&&kn(P.bind(L)),E&&yn(E.bind(L)),D&&xn(D.bind(L)),_(I))if(o);else if(I.length){const t=e.exposed||(e.exposed=it({}));I.forEach((e=>{t[e]=ct(L,e)}))}else e.exposed||(e.exposed=f)}function Hl(e,t,n,l,a){ql(e,t,a,l);const{extends:o,mixins:r}=n;o&&Wl(e,t,o,l),r&&ql(e,t,r,l);const i=n[e];i&&ft(i.bind(l.proxy),l,t)}function Wl(e,t,n,l){n.extends&&Wl(e,t,n.extends,l);const a=n[e];a&&ft(a.bind(l.proxy),l,t)}function ql(e,t,n,l){for(let a=0;a<n.length;a++){const o=n[a].mixins;o&&ql(e,t,o,l);const r=n[a][e];r&&ft(r.bind(l.proxy),l,t)}}function Yl(e,t,n,l,a){for(let o=0;o<t.length;o++)jl(e,t[o],n,l,a,!0)}function Kl(e,t,n){const l=t.call(n,n);T(l)&&(e.data===f?e.data=Ye(l):x(e.data,l))}function Ul(e,t,n,l){const a=l.includes(".")?function(e,t){const n=t.split(".");return()=>{let t=e;for(let e=0;e<n.length&&t;e++)t=t[n[e]];return t}}(n,l):()=>n[l];if(O(e)){const n=t[e];M(n)&&An(a,n)}else if(M(e))An(a,e.bind(n));else if(T(e))if(_(e))e.forEach((e=>Ul(e,t,n,l)));else{const l=M(e.handler)?e.handler.bind(n):t[e.handler];M(l)&&An(a,l,e)}}function Gl(e,t,n){const l=n.appContext.config.optionMergeStrategies,{mixins:a,extends:o}=t;o&&Gl(e,o,n),a&&a.forEach((t=>Gl(e,t,n)));for(const a in t)l&&C(l,a)?e[a]=l[a](e[a],t[a],n.proxy,a):e[a]=t[a]}const Xl=e=>e&&(e.proxy?e.proxy:Xl(e.parent)),Jl=x(Object.create(null),{$:e=>e,$el:e=>e.vnode.el,$data:e=>e.data,$props:e=>e.props,$attrs:e=>e.attrs,$slots:e=>e.slots,$refs:e=>e.refs,$parent:e=>Xl(e.parent),$root:e=>e.root&&e.root.proxy,$emit:e=>e.emit,$options:e=>__VUE_OPTIONS_API__?function(e){const t=e.type,{__merged:n,mixins:l,extends:a}=t;if(n)return n;const o=e.appContext.mixins;if(!o.length&&!l&&!a)return t;const r={};return o.forEach((t=>Gl(r,t,e))),Gl(r,t,e),t.__merged=r}(e):e.type,$forceUpdate:e=>()=>Ot(e.update),$nextTick:e=>Mt.bind(e.proxy),$watch:e=>__VUE_OPTIONS_API__?En.bind(e):v}),Zl={get({_:e},t){const{ctx:n,setupState:l,data:a,props:o,accessCache:r,type:i,appContext:s}=e;if("__v_skip"===t)return!0;let u;if("$"!==t[0]){const i=r[t];if(void 0!==i)switch(i){case 0:return l[t];case 1:return a[t];case 3:return n[t];case 2:return o[t]}else{if(l!==f&&C(l,t))return r[t]=0,l[t];if(a!==f&&C(a,t))return r[t]=1,a[t];if((u=e.propsOptions[0])&&C(u,t))return r[t]=2,o[t];if(n!==f&&C(n,t))return r[t]=3,n[t];__VUE_OPTIONS_API__&&Rl||(r[t]=4)}}const c=Jl[t];let d,p;return c?("$attrs"===t&&ce(e,0,t),c(e)):(d=i.__cssModules)&&(d=d[t])?d:n!==f&&C(n,t)?(r[t]=3,n[t]):(p=s.config.globalProperties,C(p,t)?p[t]:void 0)},set({_:e},t,n){const{data:l,setupState:a,ctx:o}=e;if(a!==f&&C(a,t))a[t]=n;else if(l!==f&&C(l,t))l[t]=n;else if(t in e.props)return!1;return!("$"===t[0]&&t.slice(1)in e||(o[t]=n,0))},has({_:{data:e,setupState:t,accessCache:n,ctx:l,appContext:a,propsOptions:o}},r){let i;return void 0!==n[r]||e!==f&&C(e,r)||t!==f&&C(t,r)||(i=o[0])&&C(i,r)||C(l,r)||C(Jl,r)||C(a.config.globalProperties,r)}},Ql=x({},Zl,{get(e,t){if(t!==Symbol.unscopables)return Zl.get(e,t,e)},has:(e,n)=>"_"!==n[0]&&!t(n)}),ea=Xn();let ta=0,na=null;const la=()=>na||Ht,aa=e=>{na=e};let oa=!1;function ra(e,t,n){M(t)?e.render=t:T(t)&&(__VUE_PROD_DEVTOOLS__&&(e.devtoolsRawSetupState=t),e.setupState=it(t)),ia(e)}function ia(e,t){const n=e.type;e.render||(e.render=n.render||v,e.render._rc&&(e.withProxy=new Proxy(e.ctx,Ql))),__VUE_OPTIONS_API__&&(na=e,se(),jl(e,n),ue(),na=null)}function sa(e,t=na){t&&(t.effects||(t.effects=[])).push(e)}function ua(e){const t=function(e){let t,n;return M(e)?(t=e,n=v):(t=e.get,n=e.set),new dt(t,n,M(e)||!e.set)}(e);return sa(t.effect),t}function ca(e,t,n){const l=arguments.length;return 2===l?T(t)&&!_(t)?Sl(t)?Tl(e,null,[t]):Tl(e,t):Tl(e,null,t):(l>3?n=Array.prototype.slice.call(arguments,2):3===l&&Sl(n)&&(n=[n]),Tl(e,t,n))}function da(e,t){let n;if(_(e)||O(e)){n=new Array(e.length);for(let l=0,a=e.length;l<a;l++)n[l]=t(e[l],l)}else if("number"==typeof e){n=new Array(e);for(let l=0;l<e;l++)n[l]=t(l+1,l)}else if(T(e))if(e[Symbol.iterator])n=Array.from(e,t);else{const l=Object.keys(e);n=new Array(l.length);for(let a=0,o=l.length;a<o;a++){const o=l[a];n[a]=t(e[o],o,a)}}else n=[];return n}function pa(e){const t={};for(const n in e)t[W(n)]=e[n];return t}function fa(e,t){for(let n=0;n<t.length;n++){const l=t[n];if(_(l))for(let t=0;t<l.length;t++)e[l[t].name]=l[t].fn;else l&&(e[l.name]=l.fn)}return e}Symbol("");const ha="3.0.4",va="http://www.w3.org/2000/svg",ma="undefined"!=typeof document?document:null;let ga,ba;const ya={insert:(e,t,n)=>{t.insertBefore(e,n||null)},remove:e=>{const t=e.parentNode;t&&t.removeChild(e)},createElement:(e,t,n)=>t?ma.createElementNS(va,e):ma.createElement(e,n?{is:n}:void 0),createText:e=>ma.createTextNode(e),createComment:e=>ma.createComment(e),setText:(e,t)=>{e.nodeValue=t},setElementText:(e,t)=>{e.textContent=t},parentNode:e=>e.parentNode,nextSibling:e=>e.nextSibling,querySelector:e=>ma.querySelector(e),setScopeId(e,t){e.setAttribute(t,"")},cloneNode:e=>e.cloneNode(!0),insertStaticContent(e,t,n,l){const a=l?ba||(ba=ma.createElementNS(va,"svg")):ga||(ga=ma.createElement("div"));a.innerHTML=e;const o=a.firstChild;let r=o,i=r;for(;r;)i=r,ya.insert(r,t,n),r=a.firstChild;return[o,i]}},xa=/\s*!important$/;function ka(e,t,n){if(_(n))n.forEach((n=>ka(e,t,n)));else if(t.startsWith("--"))e.setProperty(t,n);else{const l=function(e,t){const n=Ca[t];if(n)return n;let l=$(t);if("filter"!==l&&l in e)return Ca[t]=l;l=H(l);for(let n=0;n<wa.length;n++){const a=wa[n]+l;if(a in e)return Ca[t]=a}return t}(e,t);xa.test(n)?e.setProperty(j(l),n.replace(xa,""),"important"):e[l]=n}}const wa=["Webkit","Moz","ms"],Ca={},_a="http://www.w3.org/1999/xlink";let Aa=Date.now;"undefined"!=typeof document&&Aa()>document.createEvent("Event").timeStamp&&(Aa=()=>performance.now());let Sa=0;const Ea=Promise.resolve(),Ma=()=>{Sa=0};function Oa(e,t,n,l){e.addEventListener(t,n,l)}const Da=/(?:Once|Passive|Capture)$/,Ta=/^on[a-z]/,Na="transition",Ba="animation",Pa=(e,{slots:t})=>ca(Tn,La(e),t);Pa.displayName="Transition";const Va={name:String,type:String,css:{type:Boolean,default:!0},duration:[String,Number,Object],enterFromClass:String,enterActiveClass:String,enterToClass:String,appearFromClass:String,appearActiveClass:String,appearToClass:String,leaveFromClass:String,leaveActiveClass:String,leaveToClass:String},Ia=Pa.props=x({},Tn.props,Va);function La(e){let{name:t="v",type:n,css:l=!0,duration:a,enterFromClass:o=`${t}-enter-from`,enterActiveClass:r=`${t}-enter-active`,enterToClass:i=`${t}-enter-to`,appearFromClass:s=o,appearActiveClass:u=r,appearToClass:c=i,leaveFromClass:d=`${t}-leave-from`,leaveActiveClass:p=`${t}-leave-active`,leaveToClass:f=`${t}-leave-to`}=e;const h={};for(const t in e)t in Va||(h[t]=e[t]);if(!l)return h;const v=function(e){if(null==e)return null;if(T(e))return[za(e.enter),za(e.leave)];{const t=za(e);return[t,t]}}(a),m=v&&v[0],g=v&&v[1],{onBeforeEnter:b,onEnter:y,onEnterCancelled:k,onLeave:w,onLeaveCancelled:C,onBeforeAppear:_=b,onAppear:A=y,onAppearCancelled:S=k}=h,E=(e,t,n)=>{$a(e,t?c:i),$a(e,t?u:r),n&&n()},M=(e,t)=>{$a(e,f),$a(e,p),t&&t()},O=e=>(t,l)=>{const a=e?A:y,r=()=>E(t,e,l);a&&a(t,r),Ra((()=>{$a(t,e?s:o),Fa(t,e?c:i),a&&a.length>1||Ha(t,n,m,r)}))};return x(h,{onBeforeEnter(e){b&&b(e),Fa(e,r),Fa(e,o)},onBeforeAppear(e){_&&_(e),Fa(e,u),Fa(e,s)},onEnter:O(!1),onAppear:O(!0),onLeave(e,t){const l=()=>M(e,t);Fa(e,p),Fa(e,d);const a=e.style.transitionProperty;e.style.transitionProperty="none",Ra((()=>{e.style.transitionProperty=a,$a(e,d),Fa(e,f),w&&w.length>1||Ha(e,n,g,l)})),w&&w(e,l)},onEnterCancelled(e){E(e,!1),k&&k(e)},onAppearCancelled(e){E(e,!0),S&&S(e)},onLeaveCancelled(e){M(e),C&&C(e)}})}function za(e){return U(e)}function Fa(e,t){t.split(/\s+/).forEach((t=>t&&e.classList.add(t))),(e._vtc||(e._vtc=new Set)).add(t)}function $a(e,t){t.split(/\s+/).forEach((t=>t&&e.classList.remove(t)));const{_vtc:n}=e;n&&(n.delete(t),n.size||(e._vtc=void 0))}function Ra(e){requestAnimationFrame((()=>{requestAnimationFrame(e)}))}let ja=0;function Ha(e,t,n,l){const a=e._endId=++ja,o=()=>{a===e._endId&&l()};if(n)return setTimeout(o,n);const{type:r,timeout:i,propCount:s}=Wa(e,t);if(!r)return l();const u=r+"end";let c=0;const d=()=>{e.removeEventListener(u,p),o()},p=t=>{t.target===e&&++c>=s&&d()};setTimeout((()=>{c<s&&d()}),i+1),e.addEventListener(u,p)}function Wa(e,t){const n=window.getComputedStyle(e),l=e=>(n[e]||"").split(", "),a=l("transitionDelay"),o=l("transitionDuration"),r=qa(a,o),i=l("animationDelay"),s=l("animationDuration"),u=qa(i,s);let c=null,d=0,p=0;return t===Na?r>0&&(c=Na,d=r,p=o.length):t===Ba?u>0&&(c=Ba,d=u,p=s.length):(d=Math.max(r,u),c=d>0?r>u?Na:Ba:null,p=c?c===Na?o.length:s.length:0),{type:c,timeout:d,propCount:p,hasTransform:c===Na&&/\b(transform|all)(,|$)/.test(n.transitionProperty)}}function qa(e,t){for(;e.length<t.length;)e=e.concat(e);return Math.max(...t.map(((t,n)=>Ya(t)+Ya(e[n]))))}function Ya(e){return 1e3*Number(e.slice(0,-1).replace(",","."))}const Ka=new WeakMap,Ua=new WeakMap,Ga={name:"TransitionGroup",props:x({},Ia,{tag:String,moveClass:String}),setup(e,{slots:t}){const n=la(),l=On();let a,o;return bn((()=>{if(!a.length)return;const t=e.moveClass||`${e.name||"v"}-move`;if(!function(e,t,n){const l=e.cloneNode();e._vtc&&e._vtc.forEach((e=>{e.split(/\s+/).forEach((e=>e&&l.classList.remove(e)))})),n.split(/\s+/).forEach((e=>e&&l.classList.add(e))),l.style.display="none";const a=1===t.nodeType?t:t.parentNode;a.appendChild(l);const{hasTransform:o}=Wa(l);return a.removeChild(l),o}(a[0].el,n.vnode.el,t))return;a.forEach(Xa),a.forEach(Ja);const l=a.filter(Za);document.body.offsetHeight,l.forEach((e=>{const n=e.el,l=n.style;Fa(n,t),l.transform=l.webkitTransform=l.transitionDuration="";const a=n._moveCb=e=>{e&&e.target!==n||e&&!/transform$/.test(e.propertyName)||(n.removeEventListener("transitionend",a),n._moveCb=null,$a(n,t))};n.addEventListener("transitionend",a)}))})),()=>{const r=Ze(e),i=La(r),s=r.tag||gl;a=o,o=t.default?Ln(t.default()):[];for(let e=0;e<o.length;e++){const t=o[e];null!=t.key&&In(t,Bn(t,i,l,n))}if(a)for(let e=0;e<a.length;e++){const t=a[e];In(t,Bn(t,i,l,n)),Ka.set(t,t.el.getBoundingClientRect())}return Tl(s,null,o)}}};function Xa(e){const t=e.el;t._moveCb&&t._moveCb(),t._enterCb&&t._enterCb()}function Ja(e){Ua.set(e,e.el.getBoundingClientRect())}function Za(e){const t=Ka.get(e),n=Ua.get(e),l=t.left-n.left,a=t.top-n.top;if(l||a){const t=e.el.style;return t.transform=t.webkitTransform=`translate(${l}px,${a}px)`,t.transitionDuration="0s",e}}const Qa=e=>{const t=e.props["onUpdate:modelValue"];return _(t)?e=>Y(t,e):t};function eo(e){e.target.composing=!0}function to(e){const t=e.target;t.composing&&(t.composing=!1,function(e,t){const n=document.createEvent("HTMLEvents");n.initEvent("input",!0,!0),e.dispatchEvent(n)}(t))}const no={created(e,{modifiers:{lazy:t,trim:n,number:l}},a){e._assign=Qa(a);const o=l||"number"===e.type;Oa(e,t?"change":"input",(t=>{if(t.target.composing)return;let l=e.value;n?l=l.trim():o&&(l=U(l)),e._assign(l)})),n&&Oa(e,"change",(()=>{e.value=e.value.trim()})),t||(Oa(e,"compositionstart",eo),Oa(e,"compositionend",to),Oa(e,"change",to))},mounted(e,{value:t}){e.value=null==t?"":t},beforeUpdate(e,{value:t,modifiers:{trim:n,number:l}},a){if(e._assign=Qa(a),e.composing)return;if(document.activeElement===e){if(n&&e.value.trim()===t)return;if((l||"number"===e.type)&&U(e.value)===t)return}const o=null==t?"":t;e.value!==o&&(e.value=o)}},lo={created(e,t,n){e._assign=Qa(n),Oa(e,"change",(()=>{const t=e._modelValue,n=ro(e),l=e.checked,a=e._assign;if(_(t)){const e=c(t,n),o=-1!==e;if(l&&!o)a(t.concat(n));else if(!l&&o){const n=[...t];n.splice(e,1),a(n)}}else if(S(t)){const e=new Set(t);l?e.add(n):e.delete(n),a(e)}else a(io(e,l))}))},mounted:ao,beforeUpdate(e,t,n){e._assign=Qa(n),ao(e,t,n)}};function ao(e,{value:t,oldValue:n},l){e._modelValue=t,_(t)?e.checked=c(t,l.props.value)>-1:S(t)?e.checked=t.has(l.props.value):t!==n&&(e.checked=u(t,io(e,!0)))}const oo={created(e,{value:t},n){e.checked=u(t,n.props.value),e._assign=Qa(n),Oa(e,"change",(()=>{e._assign(ro(e))}))},beforeUpdate(e,{value:t,oldValue:n},l){e._assign=Qa(l),t!==n&&(e.checked=u(t,l.props.value))}};function ro(e){return"_value"in e?e._value:e.value}function io(e,t){const n=t?"_trueValue":"_falseValue";return n in e?e[n]:t}const so=["ctrl","shift","alt","meta"],uo={stop:e=>e.stopPropagation(),prevent:e=>e.preventDefault(),self:e=>e.target!==e.currentTarget,ctrl:e=>!e.ctrlKey,shift:e=>!e.shiftKey,alt:e=>!e.altKey,meta:e=>!e.metaKey,left:e=>"button"in e&&0!==e.button,middle:e=>"button"in e&&1!==e.button,right:e=>"button"in e&&2!==e.button,exact:(e,t)=>so.some((n=>e[`${n}Key`]&&!t.includes(n)))},co=(e,t)=>(n,...l)=>{for(let e=0;e<t.length;e++){const l=uo[t[e]];if(l&&l(n,t))return}return e(n,...l)},po={esc:"escape",space:" ",up:"arrow-up",left:"arrow-left",right:"arrow-right",down:"arrow-down",delete:"backspace"},fo=(e,t)=>n=>{if(!("key"in n))return;const l=j(n.key);return t.some((e=>e===l||po[e]===l))?e(n):void 0},ho={beforeMount(e,{value:t},{transition:n}){e._vod="none"===e.style.display?"":e.style.display,n&&t?n.beforeEnter(e):vo(e,t)},mounted(e,{value:t},{transition:n}){n&&t&&n.enter(e)},updated(e,{value:t,oldValue:n},{transition:l}){l&&t!==n?t?(l.beforeEnter(e),vo(e,!0),l.enter(e)):l.leave(e,(()=>{vo(e,!1)})):vo(e,t)},beforeUnmount(e,{value:t}){vo(e,t)}};function vo(e,t){e.style.display=t?e._vod:"none"}const mo=x({patchProp:(e,t,n,a,o=!1,r,i,s,u)=>{switch(t){case"class":!function(e,t,n){if(null==t&&(t=""),n)e.setAttribute("class",t);else{const n=e._vtc;n&&(t=(t?[t,...n]:[...n]).join(" ")),e.className=t}}(e,a,o);break;case"style":!function(e,t,n){const l=e.style;if(n)if(O(n))t!==n&&(l.cssText=n);else{for(const e in n)ka(l,e,n[e]);if(t&&!O(t))for(const e in t)null==n[e]&&ka(l,e,"")}else e.removeAttribute("style")}(e,n,a);break;default:b(t)?y(t)||function(e,t,n,l,a=null){const o=e._vei||(e._vei={}),r=o[t];if(l&&r)r.value=l;else{const[n,i]=function(e){let t;if(Da.test(e)){let n;for(t={};n=e.match(Da);)e=e.slice(0,e.length-n[0].length),t[n[0].toLowerCase()]=!0}return[e.slice(2).toLowerCase(),t]}(t);l?Oa(e,n,o[t]=function(e,t){const n=e=>{(e.timeStamp||Aa())>=n.attached-1&&ft(function(e,t){if(_(t)){const n=e.stopImmediatePropagation;return e.stopImmediatePropagation=()=>{n.call(e),e._stopped=!0},t.map((e=>t=>!t._stopped&&e(t)))}return t}(e,n.value),t,5,[e])};return n.value=e,n.attached=Sa||(Ea.then(Ma),Sa=Aa()),n}(l,a),i):r&&(function(e,t,n,l){e.removeEventListener(t,n,l)}(e,n,r,i),o[t]=void 0)}}(e,t,0,a,i):function(e,t,n,l){return l?"innerHTML"===t||!!(t in e&&Ta.test(t)&&M(n)):"spellcheck"!==t&&"draggable"!==t&&(("form"!==t||"string"!=typeof n)&&(("list"!==t||"INPUT"!==e.tagName)&&((!Ta.test(t)||!O(n))&&t in e)))}(e,t,a,o)?function(e,t,n,l,a,o,r){if("innerHTML"===t||"textContent"===t)return l&&r(l,a,o),void(e[t]=null==n?"":n);if("value"!==t||"PROGRESS"===e.tagName){if(""===n||null==n){const l=typeof e[t];if(""===n&&"boolean"===l)return void(e[t]=!0);if(null==n&&"string"===l)return e[t]="",void e.removeAttribute(t);if("number"===l)return e[t]=0,void e.removeAttribute(t)}try{e[t]=n}catch(e){}}else{e._value=n;const t=null==n?"":n;e.value!==t&&(e.value=t)}}(e,t,a,r,i,s,u):("true-value"===t?e._trueValue=a:"false-value"===t&&(e._falseValue=a),function(e,t,n,a){if(a&&t.startsWith("xlink:"))null==n?e.removeAttributeNS(_a,t.slice(6,t.length)):e.setAttributeNS(_a,t,n);else{const a=l(t);null==n||a&&!1===n?e.removeAttribute(t):e.setAttribute(t,a?"":n)}}(e,t,a,o))}},forcePatchProp:(e,t)=>"value"===t},ya);let go;function bo(){return go||(go=function(e){return ll(e)}(mo))}const yo=(...e)=>{bo().render(...e)};var xo=n(3279),ko=n.n(xo),wo=n(2796),Co=n.n(wo);function _o(e){return{all:e=e||new Map,on:function(t,n){var l=e.get(t);l&&l.push(n)||e.set(t,[n])},off:function(t,n){var l=e.get(t);l&&l.splice(l.indexOf(n)>>>0,1)},emit:function(t,n){(e.get(t)||[]).slice().map((function(e){e(n)})),(e.get("*")||[]).slice().map((function(e){e(t,n)}))}}}var Ao=function(){if("undefined"!=typeof Map)return Map;function e(e,t){var n=-1;return e.some((function(e,l){return e[0]===t&&(n=l,!0)})),n}return function(){function t(){this.__entries__=[]}return Object.defineProperty(t.prototype,"size",{get:function(){return this.__entries__.length},enumerable:!0,configurable:!0}),t.prototype.get=function(t){var n=e(this.__entries__,t),l=this.__entries__[n];return l&&l[1]},t.prototype.set=function(t,n){var l=e(this.__entries__,t);~l?this.__entries__[l][1]=n:this.__entries__.push([t,n])},t.prototype.delete=function(t){var n=this.__entries__,l=e(n,t);~l&&n.splice(l,1)},t.prototype.has=function(t){return!!~e(this.__entries__,t)},t.prototype.clear=function(){this.__entries__.splice(0)},t.prototype.forEach=function(e,t){void 0===t&&(t=null);for(var n=0,l=this.__entries__;n<l.length;n++){var a=l[n];e.call(t,a[1],a[0])}},t}()}(),So="undefined"!=typeof window&&"undefined"!=typeof document&&window.document===document,Eo="undefined"!=typeof global&&global.Math===Math?global:"undefined"!=typeof self&&self.Math===Math?self:"undefined"!=typeof window&&window.Math===Math?window:Function("return this")(),Mo="function"==typeof requestAnimationFrame?requestAnimationFrame.bind(Eo):function(e){return setTimeout((function(){return e(Date.now())}),1e3/60)},Oo=["top","right","bottom","left","width","height","size","weight"],Do="undefined"!=typeof MutationObserver,To=function(){function e(){this.connected_=!1,this.mutationEventsAdded_=!1,this.mutationsObserver_=null,this.observers_=[],this.onTransitionEnd_=this.onTransitionEnd_.bind(this),this.refresh=function(e,t){var n=!1,l=!1,a=0;function o(){n&&(n=!1,e()),l&&i()}function r(){Mo(o)}function i(){var e=Date.now();if(n){if(e-a<2)return;l=!0}else n=!0,l=!1,setTimeout(r,20);a=e}return i}(this.refresh.bind(this))}return e.prototype.addObserver=function(e){~this.observers_.indexOf(e)||this.observers_.push(e),this.connected_||this.connect_()},e.prototype.removeObserver=function(e){var t=this.observers_,n=t.indexOf(e);~n&&t.splice(n,1),!t.length&&this.connected_&&this.disconnect_()},e.prototype.refresh=function(){this.updateObservers_()&&this.refresh()},e.prototype.updateObservers_=function(){var e=this.observers_.filter((function(e){return e.gatherActive(),e.hasActive()}));return e.forEach((function(e){return e.broadcastActive()})),e.length>0},e.prototype.connect_=function(){So&&!this.connected_&&(document.addEventListener("transitionend",this.onTransitionEnd_),window.addEventListener("resize",this.refresh),Do?(this.mutationsObserver_=new MutationObserver(this.refresh),this.mutationsObserver_.observe(document,{attributes:!0,childList:!0,characterData:!0,subtree:!0})):(document.addEventListener("DOMSubtreeModified",this.refresh),this.mutationEventsAdded_=!0),this.connected_=!0)},e.prototype.disconnect_=function(){So&&this.connected_&&(document.removeEventListener("transitionend",this.onTransitionEnd_),window.removeEventListener("resize",this.refresh),this.mutationsObserver_&&this.mutationsObserver_.disconnect(),this.mutationEventsAdded_&&document.removeEventListener("DOMSubtreeModified",this.refresh),this.mutationsObserver_=null,this.mutationEventsAdded_=!1,this.connected_=!1)},e.prototype.onTransitionEnd_=function(e){var t=e.propertyName,n=void 0===t?"":t;Oo.some((function(e){return!!~n.indexOf(e)}))&&this.refresh()},e.getInstance=function(){return this.instance_||(this.instance_=new e),this.instance_},e.instance_=null,e}(),No=function(e,t){for(var n=0,l=Object.keys(t);n<l.length;n++){var a=l[n];Object.defineProperty(e,a,{value:t[a],enumerable:!1,writable:!1,configurable:!0})}return e},Bo=function(e){return e&&e.ownerDocument&&e.ownerDocument.defaultView||Eo},Po=Fo(0,0,0,0);function Vo(e){return parseFloat(e)||0}function Io(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];return t.reduce((function(t,n){return t+Vo(e["border-"+n+"-width"])}),0)}var Lo="undefined"!=typeof SVGGraphicsElement?function(e){return e instanceof Bo(e).SVGGraphicsElement}:function(e){return e instanceof Bo(e).SVGElement&&"function"==typeof e.getBBox};function zo(e){return So?Lo(e)?function(e){var t=e.getBBox();return Fo(0,0,t.width,t.height)}(e):function(e){var t=e.clientWidth,n=e.clientHeight;if(!t&&!n)return Po;var l=Bo(e).getComputedStyle(e),a=function(e){for(var t={},n=0,l=["top","right","bottom","left"];n<l.length;n++){var a=l[n],o=e["padding-"+a];t[a]=Vo(o)}return t}(l),o=a.left+a.right,r=a.top+a.bottom,i=Vo(l.width),s=Vo(l.height);if("border-box"===l.boxSizing&&(Math.round(i+o)!==t&&(i-=Io(l,"left","right")+o),Math.round(s+r)!==n&&(s-=Io(l,"top","bottom")+r)),!function(e){return e===Bo(e).document.documentElement}(e)){var u=Math.round(i+o)-t,c=Math.round(s+r)-n;1!==Math.abs(u)&&(i-=u),1!==Math.abs(c)&&(s-=c)}return Fo(a.left,a.top,i,s)}(e):Po}function Fo(e,t,n,l){return{x:e,y:t,width:n,height:l}}var $o=function(){function e(e){this.broadcastWidth=0,this.broadcastHeight=0,this.contentRect_=Fo(0,0,0,0),this.target=e}return e.prototype.isActive=function(){var e=zo(this.target);return this.contentRect_=e,e.width!==this.broadcastWidth||e.height!==this.broadcastHeight},e.prototype.broadcastRect=function(){var e=this.contentRect_;return this.broadcastWidth=e.width,this.broadcastHeight=e.height,e},e}(),Ro=function(e,t){var n=function(e){var t=e.x,n=e.y,l=e.width,a=e.height,o="undefined"!=typeof DOMRectReadOnly?DOMRectReadOnly:Object,r=Object.create(o.prototype);return No(r,{x:t,y:n,width:l,height:a,top:n,right:t+l,bottom:a+n,left:t}),r}(t);No(this,{target:e,contentRect:n})},jo=function(){function e(e,t,n){if(this.activeObservations_=[],this.observations_=new Ao,"function"!=typeof e)throw new TypeError("The callback provided as parameter 1 is not a function.");this.callback_=e,this.controller_=t,this.callbackCtx_=n}return e.prototype.observe=function(e){if(!arguments.length)throw new TypeError("1 argument required, but only 0 present.");if("undefined"!=typeof Element&&Element instanceof Object){if(!(e instanceof Bo(e).Element))throw new TypeError('parameter 1 is not of type "Element".');var t=this.observations_;t.has(e)||(t.set(e,new $o(e)),this.controller_.addObserver(this),this.controller_.refresh())}},e.prototype.unobserve=function(e){if(!arguments.length)throw new TypeError("1 argument required, but only 0 present.");if("undefined"!=typeof Element&&Element instanceof Object){if(!(e instanceof Bo(e).Element))throw new TypeError('parameter 1 is not of type "Element".');var t=this.observations_;t.has(e)&&(t.delete(e),t.size||this.controller_.removeObserver(this))}},e.prototype.disconnect=function(){this.clearActive(),this.observations_.clear(),this.controller_.removeObserver(this)},e.prototype.gatherActive=function(){var e=this;this.clearActive(),this.observations_.forEach((function(t){t.isActive()&&e.activeObservations_.push(t)}))},e.prototype.broadcastActive=function(){if(this.hasActive()){var e=this.callbackCtx_,t=this.activeObservations_.map((function(e){return new Ro(e.target,e.broadcastRect())}));this.callback_.call(e,t,e),this.clearActive()}},e.prototype.clearActive=function(){this.activeObservations_.splice(0)},e.prototype.hasActive=function(){return this.activeObservations_.length>0},e}(),Ho="undefined"!=typeof WeakMap?new WeakMap:new Ao,Wo=function e(t){if(!(this instanceof e))throw new TypeError("Cannot call a class as a function.");if(!arguments.length)throw new TypeError("1 argument required, but only 0 present.");var n=To.getInstance(),l=new jo(t,n,this);Ho.set(this,l)};["observe","unobserve","disconnect"].forEach((function(e){Wo.prototype[e]=function(){var t;return(t=Ho.get(this))[e].apply(t,arguments)}}));const qo=void 0!==Eo.ResizeObserver?Eo.ResizeObserver:Wo;function Yo(e){var t=e.getBoundingClientRect();return{width:t.width,height:t.height,top:t.top,right:t.right,bottom:t.bottom,left:t.left,x:t.left,y:t.top}}function Ko(e){if("[object Window]"!==e.toString()){var t=e.ownerDocument;return t&&t.defaultView||window}return e}function Uo(e){var t=Ko(e);return{scrollLeft:t.pageXOffset,scrollTop:t.pageYOffset}}function Go(e){return e instanceof Ko(e).Element||e instanceof Element}function Xo(e){return e instanceof Ko(e).HTMLElement||e instanceof HTMLElement}function Jo(e){return e?(e.nodeName||"").toLowerCase():null}function Zo(e){return((Go(e)?e.ownerDocument:e.document)||window.document).documentElement}function Qo(e){return Yo(Zo(e)).left+Uo(e).scrollLeft}function er(e){return Ko(e).getComputedStyle(e)}function tr(e){var t=er(e),n=t.overflow,l=t.overflowX,a=t.overflowY;return/auto|scroll|overlay|hidden/.test(n+a+l)}function nr(e,t,n){void 0===n&&(n=!1);var l,a,o=Zo(t),r=Yo(e),i=Xo(t),s={scrollLeft:0,scrollTop:0},u={x:0,y:0};return(i||!i&&!n)&&(("body"!==Jo(t)||tr(o))&&(s=(l=t)!==Ko(l)&&Xo(l)?{scrollLeft:(a=l).scrollLeft,scrollTop:a.scrollTop}:Uo(l)),Xo(t)?((u=Yo(t)).x+=t.clientLeft,u.y+=t.clientTop):o&&(u.x=Qo(o))),{x:r.left+s.scrollLeft-u.x,y:r.top+s.scrollTop-u.y,width:r.width,height:r.height}}function lr(e){return{x:e.offsetLeft,y:e.offsetTop,width:e.offsetWidth,height:e.offsetHeight}}function ar(e){return"html"===Jo(e)?e:e.assignedSlot||e.parentNode||e.host||Zo(e)}function or(e){return["html","body","#document"].indexOf(Jo(e))>=0?e.ownerDocument.body:Xo(e)&&tr(e)?e:or(ar(e))}function rr(e,t){void 0===t&&(t=[]);var n=or(e),l="body"===Jo(n),a=Ko(n),o=l?[a].concat(a.visualViewport||[],tr(n)?n:[]):n,r=t.concat(o);return l?r:r.concat(rr(ar(o)))}function ir(e){return["table","td","th"].indexOf(Jo(e))>=0}function sr(e){if(!Xo(e)||"fixed"===er(e).position)return null;var t=e.offsetParent;if(t){var n=Zo(t);if("body"===Jo(t)&&"static"===er(t).position&&"static"!==er(n).position)return n}return t}function ur(e){for(var t=Ko(e),n=sr(e);n&&ir(n)&&"static"===er(n).position;)n=sr(n);return n&&"body"===Jo(n)&&"static"===er(n).position?t:n||function(e){for(var t=ar(e);Xo(t)&&["html","body"].indexOf(Jo(t))<0;){var n=er(t);if("none"!==n.transform||"none"!==n.perspective||n.willChange&&"auto"!==n.willChange)return t;t=t.parentNode}return null}(e)||t}var cr="top",dr="bottom",pr="right",fr="left",hr="auto",vr=[cr,dr,pr,fr],mr="start",gr="end",br="viewport",yr="popper",xr=vr.reduce((function(e,t){return e.concat([t+"-"+mr,t+"-"+gr])}),[]),kr=[].concat(vr,[hr]).reduce((function(e,t){return e.concat([t,t+"-"+mr,t+"-"+gr])}),[]),wr=["beforeRead","read","afterRead","beforeMain","main","afterMain","beforeWrite","write","afterWrite"];function Cr(e){var t=new Map,n=new Set,l=[];function a(e){n.add(e.name),[].concat(e.requires||[],e.requiresIfExists||[]).forEach((function(e){if(!n.has(e)){var l=t.get(e);l&&a(l)}})),l.push(e)}return e.forEach((function(e){t.set(e.name,e)})),e.forEach((function(e){n.has(e.name)||a(e)})),l}function _r(e){var t;return function(){return t||(t=new Promise((function(n){Promise.resolve().then((function(){t=void 0,n(e())}))}))),t}}var Ar={placement:"bottom",modifiers:[],strategy:"absolute"};function Sr(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return!t.some((function(e){return!(e&&"function"==typeof e.getBoundingClientRect)}))}function Er(e){void 0===e&&(e={});var t=e,n=t.defaultModifiers,l=void 0===n?[]:n,a=t.defaultOptions,o=void 0===a?Ar:a;return function(e,t,n){void 0===n&&(n=o);var a={placement:"bottom",orderedModifiers:[],options:Object.assign(Object.assign({},Ar),o),modifiersData:{},elements:{reference:e,popper:t},attributes:{},styles:{}},r=[],i=!1,s={state:a,setOptions:function(n){u(),a.options=Object.assign(Object.assign(Object.assign({},o),a.options),n),a.scrollParents={reference:Go(e)?rr(e):e.contextElement?rr(e.contextElement):[],popper:rr(t)};var i,c,d=function(e){var t=Cr(e);return wr.reduce((function(e,n){return e.concat(t.filter((function(e){return e.phase===n})))}),[])}((i=[].concat(l,a.options.modifiers),c=i.reduce((function(e,t){var n=e[t.name];return e[t.name]=n?Object.assign(Object.assign(Object.assign({},n),t),{},{options:Object.assign(Object.assign({},n.options),t.options),data:Object.assign(Object.assign({},n.data),t.data)}):t,e}),{}),Object.keys(c).map((function(e){return c[e]}))));return a.orderedModifiers=d.filter((function(e){return e.enabled})),a.orderedModifiers.forEach((function(e){var t=e.name,n=e.options,l=void 0===n?{}:n,o=e.effect;if("function"==typeof o){var i=o({state:a,name:t,instance:s,options:l});r.push(i||function(){})}})),s.update()},forceUpdate:function(){if(!i){var e=a.elements,t=e.reference,n=e.popper;if(Sr(t,n)){a.rects={reference:nr(t,ur(n),"fixed"===a.options.strategy),popper:lr(n)},a.reset=!1,a.placement=a.options.placement,a.orderedModifiers.forEach((function(e){return a.modifiersData[e.name]=Object.assign({},e.data)}));for(var l=0;l<a.orderedModifiers.length;l++)if(!0!==a.reset){var o=a.orderedModifiers[l],r=o.fn,u=o.options,c=void 0===u?{}:u,d=o.name;"function"==typeof r&&(a=r({state:a,options:c,name:d,instance:s})||a)}else a.reset=!1,l=-1}}},update:_r((function(){return new Promise((function(e){s.forceUpdate(),e(a)}))})),destroy:function(){u(),i=!0}};if(!Sr(e,t))return s;function u(){r.forEach((function(e){return e()})),r=[]}return s.setOptions(n).then((function(e){!i&&n.onFirstUpdate&&n.onFirstUpdate(e)})),s}}var Mr={passive:!0};function Or(e){return e.split("-")[0]}function Dr(e){return e.split("-")[1]}function Tr(e){return["top","bottom"].indexOf(e)>=0?"x":"y"}function Nr(e){var t,n=e.reference,l=e.element,a=e.placement,o=a?Or(a):null,r=a?Dr(a):null,i=n.x+n.width/2-l.width/2,s=n.y+n.height/2-l.height/2;switch(o){case cr:t={x:i,y:n.y-l.height};break;case dr:t={x:i,y:n.y+n.height};break;case pr:t={x:n.x+n.width,y:s};break;case fr:t={x:n.x-l.width,y:s};break;default:t={x:n.x,y:n.y}}var u=o?Tr(o):null;if(null!=u){var c="y"===u?"height":"width";switch(r){case mr:t[u]=t[u]-(n[c]/2-l[c]/2);break;case gr:t[u]=t[u]+(n[c]/2-l[c]/2)}}return t}var Br={top:"auto",right:"auto",bottom:"auto",left:"auto"};function Pr(e){var t,n=e.popper,l=e.popperRect,a=e.placement,o=e.offsets,r=e.position,i=e.gpuAcceleration,s=e.adaptive,u=e.roundOffsets?function(e){var t=e.x,n=e.y,l=window.devicePixelRatio||1;return{x:Math.round(t*l)/l||0,y:Math.round(n*l)/l||0}}(o):o,c=u.x,d=void 0===c?0:c,p=u.y,f=void 0===p?0:p,h=o.hasOwnProperty("x"),v=o.hasOwnProperty("y"),m=fr,g=cr,b=window;if(s){var y=ur(n);y===Ko(n)&&(y=Zo(n)),a===cr&&(g=dr,f-=y.clientHeight-l.height,f*=i?1:-1),a===fr&&(m=pr,d-=y.clientWidth-l.width,d*=i?1:-1)}var x,k=Object.assign({position:r},s&&Br);return i?Object.assign(Object.assign({},k),{},((x={})[g]=v?"0":"",x[m]=h?"0":"",x.transform=(b.devicePixelRatio||1)<2?"translate("+d+"px, "+f+"px)":"translate3d("+d+"px, "+f+"px, 0)",x)):Object.assign(Object.assign({},k),{},((t={})[g]=v?f+"px":"",t[m]=h?d+"px":"",t.transform="",t))}var Vr={left:"right",right:"left",bottom:"top",top:"bottom"};function Ir(e){return e.replace(/left|right|bottom|top/g,(function(e){return Vr[e]}))}var Lr={start:"end",end:"start"};function zr(e){return e.replace(/start|end/g,(function(e){return Lr[e]}))}function Fr(e,t){var n,l=t.getRootNode&&t.getRootNode();if(e.contains(t))return!0;if(l&&((n=l)instanceof Ko(n).ShadowRoot||n instanceof ShadowRoot)){var a=t;do{if(a&&e.isSameNode(a))return!0;a=a.parentNode||a.host}while(a)}return!1}function $r(e){return Object.assign(Object.assign({},e),{},{left:e.x,top:e.y,right:e.x+e.width,bottom:e.y+e.height})}function Rr(e,t){return t===br?$r(function(e){var t=Ko(e),n=Zo(e),l=t.visualViewport,a=n.clientWidth,o=n.clientHeight,r=0,i=0;return l&&(a=l.width,o=l.height,/^((?!chrome|android).)*safari/i.test(navigator.userAgent)||(r=l.offsetLeft,i=l.offsetTop)),{width:a,height:o,x:r+Qo(e),y:i}}(e)):Xo(t)?function(e){var t=Yo(e);return t.top=t.top+e.clientTop,t.left=t.left+e.clientLeft,t.bottom=t.top+e.clientHeight,t.right=t.left+e.clientWidth,t.width=e.clientWidth,t.height=e.clientHeight,t.x=t.left,t.y=t.top,t}(t):$r(function(e){var t=Zo(e),n=Uo(e),l=e.ownerDocument.body,a=Math.max(t.scrollWidth,t.clientWidth,l?l.scrollWidth:0,l?l.clientWidth:0),o=Math.max(t.scrollHeight,t.clientHeight,l?l.scrollHeight:0,l?l.clientHeight:0),r=-n.scrollLeft+Qo(e),i=-n.scrollTop;return"rtl"===er(l||t).direction&&(r+=Math.max(t.clientWidth,l?l.clientWidth:0)-a),{width:a,height:o,x:r,y:i}}(Zo(e)))}function jr(e){return Object.assign(Object.assign({},{top:0,right:0,bottom:0,left:0}),e)}function Hr(e,t){return t.reduce((function(t,n){return t[n]=e,t}),{})}function Wr(e,t){void 0===t&&(t={});var n=t,l=n.placement,a=void 0===l?e.placement:l,o=n.boundary,r=void 0===o?"clippingParents":o,i=n.rootBoundary,s=void 0===i?br:i,u=n.elementContext,c=void 0===u?yr:u,d=n.altBoundary,p=void 0!==d&&d,f=n.padding,h=void 0===f?0:f,v=jr("number"!=typeof h?h:Hr(h,vr)),m=c===yr?"reference":yr,g=e.elements.reference,b=e.rects.popper,y=e.elements[p?m:c],x=function(e,t,n){var l="clippingParents"===t?function(e){var t=rr(ar(e)),n=["absolute","fixed"].indexOf(er(e).position)>=0&&Xo(e)?ur(e):e;return Go(n)?t.filter((function(e){return Go(e)&&Fr(e,n)&&"body"!==Jo(e)})):[]}(e):[].concat(t),a=[].concat(l,[n]),o=a[0],r=a.reduce((function(t,n){var l=Rr(e,n);return t.top=Math.max(l.top,t.top),t.right=Math.min(l.right,t.right),t.bottom=Math.min(l.bottom,t.bottom),t.left=Math.max(l.left,t.left),t}),Rr(e,o));return r.width=r.right-r.left,r.height=r.bottom-r.top,r.x=r.left,r.y=r.top,r}(Go(y)?y:y.contextElement||Zo(e.elements.popper),r,s),k=Yo(g),w=Nr({reference:k,element:b,strategy:"absolute",placement:a}),C=$r(Object.assign(Object.assign({},b),w)),_=c===yr?C:k,A={top:x.top-_.top+v.top,bottom:_.bottom-x.bottom+v.bottom,left:x.left-_.left+v.left,right:_.right-x.right+v.right},S=e.modifiersData.offset;if(c===yr&&S){var E=S[a];Object.keys(A).forEach((function(e){var t=[pr,dr].indexOf(e)>=0?1:-1,n=[cr,dr].indexOf(e)>=0?"y":"x";A[e]+=E[n]*t}))}return A}function qr(e,t,n){return Math.max(e,Math.min(t,n))}function Yr(e,t,n){return void 0===n&&(n={x:0,y:0}),{top:e.top-t.height-n.y,right:e.right-t.width+n.x,bottom:e.bottom-t.height+n.y,left:e.left-t.width-n.x}}function Kr(e){return[cr,pr,dr,fr].some((function(t){return e[t]>=0}))}var Ur=Er({defaultModifiers:[{name:"eventListeners",enabled:!0,phase:"write",fn:function(){},effect:function(e){var t=e.state,n=e.instance,l=e.options,a=l.scroll,o=void 0===a||a,r=l.resize,i=void 0===r||r,s=Ko(t.elements.popper),u=[].concat(t.scrollParents.reference,t.scrollParents.popper);return o&&u.forEach((function(e){e.addEventListener("scroll",n.update,Mr)})),i&&s.addEventListener("resize",n.update,Mr),function(){o&&u.forEach((function(e){e.removeEventListener("scroll",n.update,Mr)})),i&&s.removeEventListener("resize",n.update,Mr)}},data:{}},{name:"popperOffsets",enabled:!0,phase:"read",fn:function(e){var t=e.state,n=e.name;t.modifiersData[n]=Nr({reference:t.rects.reference,element:t.rects.popper,strategy:"absolute",placement:t.placement})},data:{}},{name:"computeStyles",enabled:!0,phase:"beforeWrite",fn:function(e){var t=e.state,n=e.options,l=n.gpuAcceleration,a=void 0===l||l,o=n.adaptive,r=void 0===o||o,i=n.roundOffsets,s=void 0===i||i,u={placement:Or(t.placement),popper:t.elements.popper,popperRect:t.rects.popper,gpuAcceleration:a};null!=t.modifiersData.popperOffsets&&(t.styles.popper=Object.assign(Object.assign({},t.styles.popper),Pr(Object.assign(Object.assign({},u),{},{offsets:t.modifiersData.popperOffsets,position:t.options.strategy,adaptive:r,roundOffsets:s})))),null!=t.modifiersData.arrow&&(t.styles.arrow=Object.assign(Object.assign({},t.styles.arrow),Pr(Object.assign(Object.assign({},u),{},{offsets:t.modifiersData.arrow,position:"absolute",adaptive:!1,roundOffsets:s})))),t.attributes.popper=Object.assign(Object.assign({},t.attributes.popper),{},{"data-popper-placement":t.placement})},data:{}},{name:"applyStyles",enabled:!0,phase:"write",fn:function(e){var t=e.state;Object.keys(t.elements).forEach((function(e){var n=t.styles[e]||{},l=t.attributes[e]||{},a=t.elements[e];Xo(a)&&Jo(a)&&(Object.assign(a.style,n),Object.keys(l).forEach((function(e){var t=l[e];!1===t?a.removeAttribute(e):a.setAttribute(e,!0===t?"":t)})))}))},effect:function(e){var t=e.state,n={popper:{position:t.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};return Object.assign(t.elements.popper.style,n.popper),t.elements.arrow&&Object.assign(t.elements.arrow.style,n.arrow),function(){Object.keys(t.elements).forEach((function(e){var l=t.elements[e],a=t.attributes[e]||{},o=Object.keys(t.styles.hasOwnProperty(e)?t.styles[e]:n[e]).reduce((function(e,t){return e[t]="",e}),{});Xo(l)&&Jo(l)&&(Object.assign(l.style,o),Object.keys(a).forEach((function(e){l.removeAttribute(e)})))}))}},requires:["computeStyles"]},{name:"offset",enabled:!0,phase:"main",requires:["popperOffsets"],fn:function(e){var t=e.state,n=e.options,l=e.name,a=n.offset,o=void 0===a?[0,0]:a,r=kr.reduce((function(e,n){return e[n]=function(e,t,n){var l=Or(e),a=[fr,cr].indexOf(l)>=0?-1:1,o="function"==typeof n?n(Object.assign(Object.assign({},t),{},{placement:e})):n,r=o[0],i=o[1];return r=r||0,i=(i||0)*a,[fr,pr].indexOf(l)>=0?{x:i,y:r}:{x:r,y:i}}(n,t.rects,o),e}),{}),i=r[t.placement],s=i.x,u=i.y;null!=t.modifiersData.popperOffsets&&(t.modifiersData.popperOffsets.x+=s,t.modifiersData.popperOffsets.y+=u),t.modifiersData[l]=r}},{name:"flip",enabled:!0,phase:"main",fn:function(e){var t=e.state,n=e.options,l=e.name;if(!t.modifiersData[l]._skip){for(var a=n.mainAxis,o=void 0===a||a,r=n.altAxis,i=void 0===r||r,s=n.fallbackPlacements,u=n.padding,c=n.boundary,d=n.rootBoundary,p=n.altBoundary,f=n.flipVariations,h=void 0===f||f,v=n.allowedAutoPlacements,m=t.options.placement,g=Or(m),b=s||(g!==m&&h?function(e){if(Or(e)===hr)return[];var t=Ir(e);return[zr(e),t,zr(t)]}(m):[Ir(m)]),y=[m].concat(b).reduce((function(e,n){return e.concat(Or(n)===hr?function(e,t){void 0===t&&(t={});var n=t,l=n.placement,a=n.boundary,o=n.rootBoundary,r=n.padding,i=n.flipVariations,s=n.allowedAutoPlacements,u=void 0===s?kr:s,c=Dr(l),d=c?i?xr:xr.filter((function(e){return Dr(e)===c})):vr,p=d.filter((function(e){return u.indexOf(e)>=0}));0===p.length&&(p=d);var f=p.reduce((function(t,n){return t[n]=Wr(e,{placement:n,boundary:a,rootBoundary:o,padding:r})[Or(n)],t}),{});return Object.keys(f).sort((function(e,t){return f[e]-f[t]}))}(t,{placement:n,boundary:c,rootBoundary:d,padding:u,flipVariations:h,allowedAutoPlacements:v}):n)}),[]),x=t.rects.reference,k=t.rects.popper,w=new Map,C=!0,_=y[0],A=0;A<y.length;A++){var S=y[A],E=Or(S),M=Dr(S)===mr,O=[cr,dr].indexOf(E)>=0,D=O?"width":"height",T=Wr(t,{placement:S,boundary:c,rootBoundary:d,altBoundary:p,padding:u}),N=O?M?pr:fr:M?dr:cr;x[D]>k[D]&&(N=Ir(N));var B=Ir(N),P=[];if(o&&P.push(T[E]<=0),i&&P.push(T[N]<=0,T[B]<=0),P.every((function(e){return e}))){_=S,C=!1;break}w.set(S,P)}if(C)for(var V=function(e){var t=y.find((function(t){var n=w.get(t);if(n)return n.slice(0,e).every((function(e){return e}))}));if(t)return _=t,"break"},I=h?3:1;I>0&&"break"!==V(I);I--);t.placement!==_&&(t.modifiersData[l]._skip=!0,t.placement=_,t.reset=!0)}},requiresIfExists:["offset"],data:{_skip:!1}},{name:"preventOverflow",enabled:!0,phase:"main",fn:function(e){var t=e.state,n=e.options,l=e.name,a=n.mainAxis,o=void 0===a||a,r=n.altAxis,i=void 0!==r&&r,s=n.boundary,u=n.rootBoundary,c=n.altBoundary,d=n.padding,p=n.tether,f=void 0===p||p,h=n.tetherOffset,v=void 0===h?0:h,m=Wr(t,{boundary:s,rootBoundary:u,padding:d,altBoundary:c}),g=Or(t.placement),b=Dr(t.placement),y=!b,x=Tr(g),k="x"===x?"y":"x",w=t.modifiersData.popperOffsets,C=t.rects.reference,_=t.rects.popper,A="function"==typeof v?v(Object.assign(Object.assign({},t.rects),{},{placement:t.placement})):v,S={x:0,y:0};if(w){if(o){var E="y"===x?cr:fr,M="y"===x?dr:pr,O="y"===x?"height":"width",D=w[x],T=w[x]+m[E],N=w[x]-m[M],B=f?-_[O]/2:0,P=b===mr?C[O]:_[O],V=b===mr?-_[O]:-C[O],I=t.elements.arrow,L=f&&I?lr(I):{width:0,height:0},z=t.modifiersData["arrow#persistent"]?t.modifiersData["arrow#persistent"].padding:{top:0,right:0,bottom:0,left:0},F=z[E],$=z[M],R=qr(0,C[O],L[O]),j=y?C[O]/2-B-R-F-A:P-R-F-A,H=y?-C[O]/2+B+R+$+A:V+R+$+A,W=t.elements.arrow&&ur(t.elements.arrow),q=W?"y"===x?W.clientTop||0:W.clientLeft||0:0,Y=t.modifiersData.offset?t.modifiersData.offset[t.placement][x]:0,K=w[x]+j-Y-q,U=w[x]+H-Y,G=qr(f?Math.min(T,K):T,D,f?Math.max(N,U):N);w[x]=G,S[x]=G-D}if(i){var X="x"===x?cr:fr,J="x"===x?dr:pr,Z=w[k],Q=qr(Z+m[X],Z,Z-m[J]);w[k]=Q,S[k]=Q-Z}t.modifiersData[l]=S}},requiresIfExists:["offset"]},{name:"arrow",enabled:!0,phase:"main",fn:function(e){var t,n=e.state,l=e.name,a=n.elements.arrow,o=n.modifiersData.popperOffsets,r=Or(n.placement),i=Tr(r),s=[fr,pr].indexOf(r)>=0?"height":"width";if(a&&o){var u=n.modifiersData[l+"#persistent"].padding,c=lr(a),d="y"===i?cr:fr,p="y"===i?dr:pr,f=n.rects.reference[s]+n.rects.reference[i]-o[i]-n.rects.popper[s],h=o[i]-n.rects.reference[i],v=ur(a),m=v?"y"===i?v.clientHeight||0:v.clientWidth||0:0,g=f/2-h/2,b=u[d],y=m-c[s]-u[p],x=m/2-c[s]/2+g,k=qr(b,x,y),w=i;n.modifiersData[l]=((t={})[w]=k,t.centerOffset=k-x,t)}},effect:function(e){var t=e.state,n=e.options,l=e.name,a=n.element,o=void 0===a?"[data-popper-arrow]":a,r=n.padding,i=void 0===r?0:r;null!=o&&("string"!=typeof o||(o=t.elements.popper.querySelector(o)))&&Fr(t.elements.popper,o)&&(t.elements.arrow=o,t.modifiersData[l+"#persistent"]={padding:jr("number"!=typeof i?i:Hr(i,vr))})},requires:["popperOffsets"],requiresIfExists:["preventOverflow"]},{name:"hide",enabled:!0,phase:"main",requiresIfExists:["preventOverflow"],fn:function(e){var t=e.state,n=e.name,l=t.rects.reference,a=t.rects.popper,o=t.modifiersData.preventOverflow,r=Wr(t,{elementContext:"reference"}),i=Wr(t,{altBoundary:!0}),s=Yr(r,l),u=Yr(i,a,o),c=Kr(s),d=Kr(u);t.modifiersData[n]={referenceClippingOffsets:s,popperEscapeOffsets:u,isReferenceHidden:c,hasPopperEscaped:d},t.attributes.popper=Object.assign(Object.assign({},t.attributes.popper),{},{"data-popper-reference-hidden":c,"data-popper-escaped":d})}}]}),Gr=n(3493),Xr=n.n(Gr),Jr=n(7484),Zr=n.n(Jr),Qr=n(6036),ei=n.n(Qr),ti=n(285),ni=n.n(ti),li=n(3386),ai=n.n(li),oi=n(8446),ri=n.n(oi),ii=n(8734),si=n.n(ii),ui=n(5183),ci=n.n(ui),di=n(172),pi=n.n(di),fi=n(423),hi=n.n(fi),vi=n(9212),mi=n.n(vi),gi=n(7412),bi=n.n(gi);function yi(){return(yi=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var l in n)Object.prototype.hasOwnProperty.call(n,l)&&(e[l]=n[l])}return e}).apply(this,arguments)}function xi(e){return(xi=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function ki(e,t){return(ki=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function wi(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function Ci(e,t,n){return(Ci=wi()?Reflect.construct:function(e,t,n){var l=[null];l.push.apply(l,t);var a=new(Function.bind.apply(e,l));return n&&ki(a,n.prototype),a}).apply(null,arguments)}function _i(e){var t="function"==typeof Map?new Map:void 0;return(_i=function(e){if(null===e||!function(e){return-1!==Function.toString.call(e).indexOf("[native code]")}(e))return e;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,n)}function n(){return Ci(e,arguments,xi(this).constructor)}return n.prototype=Object.create(e.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),ki(n,e)})(e)}var Ai=/%[sdj%]/g;function Si(e){if(!e||!e.length)return null;var t={};return e.forEach((function(e){var n=e.field;t[n]=t[n]||[],t[n].push(e)})),t}function Ei(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];var l=1,a=t[0],o=t.length;if("function"==typeof a)return a.apply(null,t.slice(1));if("string"==typeof a){var r=String(a).replace(Ai,(function(e){if("%%"===e)return"%";if(l>=o)return e;switch(e){case"%s":return String(t[l++]);case"%d":return Number(t[l++]);case"%j":try{return JSON.stringify(t[l++])}catch(e){return"[Circular]"}break;default:return e}}));return r}return a}function Mi(e,t){return null==e||!("array"!==t||!Array.isArray(e)||e.length)||!(!function(e){return"string"===e||"url"===e||"hex"===e||"email"===e||"date"===e||"pattern"===e}(t)||"string"!=typeof e||e)}function Oi(e,t,n){var l=0,a=e.length;!function o(r){if(r&&r.length)n(r);else{var i=l;l+=1,i<a?t(e[i],o):n([])}}([])}"undefined"!=typeof process&&process.env;var Di=function(e){var t,n;function l(t,n){var l;return(l=e.call(this,"Async Validation Error")||this).errors=t,l.fields=n,l}return n=e,(t=l).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n,l}(_i(Error));function Ti(e){return function(t){return t&&t.message?(t.field=t.field||e.fullField,t):{message:"function"==typeof t?t():t,field:t.field||e.fullField}}}function Ni(e,t){if(t)for(var n in t)if(t.hasOwnProperty(n)){var l=t[n];"object"==typeof l&&"object"==typeof e[n]?e[n]=yi(yi({},e[n]),l):e[n]=l}return e}function Bi(e,t,n,l,a,o){!e.required||n.hasOwnProperty(e.field)&&!Mi(t,o||e.type)||l.push(Ei(a.messages.required,e.fullField))}var Pi={email:/^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/,url:new RegExp("^(?!mailto:)(?:(?:http|https|ftp)://|//)(?:\\S+(?::\\S*)?@)?(?:(?:(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[0-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]+-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]+-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))|localhost)(?::\\d{2,5})?(?:(/|\\?|#)[^\\s]*)?$","i"),hex:/^#?([a-f0-9]{6}|[a-f0-9]{3})$/i},Vi={integer:function(e){return Vi.number(e)&&parseInt(e,10)===e},float:function(e){return Vi.number(e)&&!Vi.integer(e)},array:function(e){return Array.isArray(e)},regexp:function(e){if(e instanceof RegExp)return!0;try{return!!new RegExp(e)}catch(e){return!1}},date:function(e){return"function"==typeof e.getTime&&"function"==typeof e.getMonth&&"function"==typeof e.getYear&&!isNaN(e.getTime())},number:function(e){return!isNaN(e)&&"number"==typeof e},object:function(e){return"object"==typeof e&&!Vi.array(e)},method:function(e){return"function"==typeof e},email:function(e){return"string"==typeof e&&!!e.match(Pi.email)&&e.length<255},url:function(e){return"string"==typeof e&&!!e.match(Pi.url)},hex:function(e){return"string"==typeof e&&!!e.match(Pi.hex)}},Ii={required:Bi,whitespace:function(e,t,n,l,a){(/^\s+$/.test(t)||""===t)&&l.push(Ei(a.messages.whitespace,e.fullField))},type:function(e,t,n,l,a){if(e.required&&void 0===t)Bi(e,t,n,l,a);else{var o=e.type;["integer","float","array","regexp","object","method","email","number","date","url","hex"].indexOf(o)>-1?Vi[o](t)||l.push(Ei(a.messages.types[o],e.fullField,e.type)):o&&typeof t!==e.type&&l.push(Ei(a.messages.types[o],e.fullField,e.type))}},range:function(e,t,n,l,a){var o="number"==typeof e.len,r="number"==typeof e.min,i="number"==typeof e.max,s=t,u=null,c="number"==typeof t,d="string"==typeof t,p=Array.isArray(t);if(c?u="number":d?u="string":p&&(u="array"),!u)return!1;p&&(s=t.length),d&&(s=t.replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g,"_").length),o?s!==e.len&&l.push(Ei(a.messages[u].len,e.fullField,e.len)):r&&!i&&s<e.min?l.push(Ei(a.messages[u].min,e.fullField,e.min)):i&&!r&&s>e.max?l.push(Ei(a.messages[u].max,e.fullField,e.max)):r&&i&&(s<e.min||s>e.max)&&l.push(Ei(a.messages[u].range,e.fullField,e.min,e.max))},enum:function(e,t,n,l,a){e.enum=Array.isArray(e.enum)?e.enum:[],-1===e.enum.indexOf(t)&&l.push(Ei(a.messages.enum,e.fullField,e.enum.join(", ")))},pattern:function(e,t,n,l,a){e.pattern&&(e.pattern instanceof RegExp?(e.pattern.lastIndex=0,e.pattern.test(t)||l.push(Ei(a.messages.pattern.mismatch,e.fullField,t,e.pattern))):"string"==typeof e.pattern&&(new RegExp(e.pattern).test(t)||l.push(Ei(a.messages.pattern.mismatch,e.fullField,t,e.pattern))))}};function Li(e,t,n,l,a){var o=e.type,r=[];if(e.required||!e.required&&l.hasOwnProperty(e.field)){if(Mi(t,o)&&!e.required)return n();Ii.required(e,t,l,r,a,o),Mi(t,o)||Ii.type(e,t,l,r,a)}n(r)}var zi={string:function(e,t,n,l,a){var o=[];if(e.required||!e.required&&l.hasOwnProperty(e.field)){if(Mi(t,"string")&&!e.required)return n();Ii.required(e,t,l,o,a,"string"),Mi(t,"string")||(Ii.type(e,t,l,o,a),Ii.range(e,t,l,o,a),Ii.pattern(e,t,l,o,a),!0===e.whitespace&&Ii.whitespace(e,t,l,o,a))}n(o)},method:function(e,t,n,l,a){var o=[];if(e.required||!e.required&&l.hasOwnProperty(e.field)){if(Mi(t)&&!e.required)return n();Ii.required(e,t,l,o,a),void 0!==t&&Ii.type(e,t,l,o,a)}n(o)},number:function(e,t,n,l,a){var o=[];if(e.required||!e.required&&l.hasOwnProperty(e.field)){if(""===t&&(t=void 0),Mi(t)&&!e.required)return n();Ii.required(e,t,l,o,a),void 0!==t&&(Ii.type(e,t,l,o,a),Ii.range(e,t,l,o,a))}n(o)},boolean:function(e,t,n,l,a){var o=[];if(e.required||!e.required&&l.hasOwnProperty(e.field)){if(Mi(t)&&!e.required)return n();Ii.required(e,t,l,o,a),void 0!==t&&Ii.type(e,t,l,o,a)}n(o)},regexp:function(e,t,n,l,a){var o=[];if(e.required||!e.required&&l.hasOwnProperty(e.field)){if(Mi(t)&&!e.required)return n();Ii.required(e,t,l,o,a),Mi(t)||Ii.type(e,t,l,o,a)}n(o)},integer:function(e,t,n,l,a){var o=[];if(e.required||!e.required&&l.hasOwnProperty(e.field)){if(Mi(t)&&!e.required)return n();Ii.required(e,t,l,o,a),void 0!==t&&(Ii.type(e,t,l,o,a),Ii.range(e,t,l,o,a))}n(o)},float:function(e,t,n,l,a){var o=[];if(e.required||!e.required&&l.hasOwnProperty(e.field)){if(Mi(t)&&!e.required)return n();Ii.required(e,t,l,o,a),void 0!==t&&(Ii.type(e,t,l,o,a),Ii.range(e,t,l,o,a))}n(o)},array:function(e,t,n,l,a){var o=[];if(e.required||!e.required&&l.hasOwnProperty(e.field)){if(null==t&&!e.required)return n();Ii.required(e,t,l,o,a,"array"),null!=t&&(Ii.type(e,t,l,o,a),Ii.range(e,t,l,o,a))}n(o)},object:function(e,t,n,l,a){var o=[];if(e.required||!e.required&&l.hasOwnProperty(e.field)){if(Mi(t)&&!e.required)return n();Ii.required(e,t,l,o,a),void 0!==t&&Ii.type(e,t,l,o,a)}n(o)},enum:function(e,t,n,l,a){var o=[];if(e.required||!e.required&&l.hasOwnProperty(e.field)){if(Mi(t)&&!e.required)return n();Ii.required(e,t,l,o,a),void 0!==t&&Ii.enum(e,t,l,o,a)}n(o)},pattern:function(e,t,n,l,a){var o=[];if(e.required||!e.required&&l.hasOwnProperty(e.field)){if(Mi(t,"string")&&!e.required)return n();Ii.required(e,t,l,o,a),Mi(t,"string")||Ii.pattern(e,t,l,o,a)}n(o)},date:function(e,t,n,l,a){var o=[];if(e.required||!e.required&&l.hasOwnProperty(e.field)){if(Mi(t,"date")&&!e.required)return n();var r;Ii.required(e,t,l,o,a),Mi(t,"date")||(r=t instanceof Date?t:new Date(t),Ii.type(e,r,l,o,a),r&&Ii.range(e,r.getTime(),l,o,a))}n(o)},url:Li,hex:Li,email:Li,required:function(e,t,n,l,a){var o=[],r=Array.isArray(t)?"array":typeof t;Ii.required(e,t,l,o,a,r),n(o)},any:function(e,t,n,l,a){var o=[];if(e.required||!e.required&&l.hasOwnProperty(e.field)){if(Mi(t)&&!e.required)return n();Ii.required(e,t,l,o,a)}n(o)}};function Fi(){return{default:"Validation error on field %s",required:"%s is required",enum:"%s must be one of %s",whitespace:"%s cannot be empty",date:{format:"%s date %s is invalid for format %s",parse:"%s date could not be parsed, %s is invalid ",invalid:"%s date %s is invalid"},types:{string:"%s is not a %s",method:"%s is not a %s (function)",array:"%s is not an %s",object:"%s is not an %s",number:"%s is not a %s",date:"%s is not a %s",boolean:"%s is not a %s",integer:"%s is not an %s",float:"%s is not a %s",regexp:"%s is not a valid %s",email:"%s is not a valid %s",url:"%s is not a valid %s",hex:"%s is not a valid %s"},string:{len:"%s must be exactly %s characters",min:"%s must be at least %s characters",max:"%s cannot be longer than %s characters",range:"%s must be between %s and %s characters"},number:{len:"%s must equal %s",min:"%s cannot be less than %s",max:"%s cannot be greater than %s",range:"%s must be between %s and %s"},array:{len:"%s must be exactly %s in length",min:"%s cannot be less than %s in length",max:"%s cannot be greater than %s in length",range:"%s must be between %s and %s in length"},pattern:{mismatch:"%s value %s does not match pattern %s"},clone:function(){var e=JSON.parse(JSON.stringify(this));return e.clone=this.clone,e}}}var $i=Fi();function Ri(e){this.rules=null,this._messages=$i,this.define(e)}Ri.prototype={messages:function(e){return e&&(this._messages=Ni(Fi(),e)),this._messages},define:function(e){if(!e)throw new Error("Cannot configure a schema with no rules");if("object"!=typeof e||Array.isArray(e))throw new Error("Rules must be an object");var t,n;for(t in this.rules={},e)e.hasOwnProperty(t)&&(n=e[t],this.rules[t]=Array.isArray(n)?n:[n])},validate:function(e,t,n){var l=this;void 0===t&&(t={}),void 0===n&&(n=function(){});var a,o,r=e,i=t,s=n;if("function"==typeof i&&(s=i,i={}),!this.rules||0===Object.keys(this.rules).length)return s&&s(),Promise.resolve();if(i.messages){var u=this.messages();u===$i&&(u=Fi()),Ni(u,i.messages),i.messages=u}else i.messages=this.messages();var c={};(i.keys||Object.keys(this.rules)).forEach((function(t){a=l.rules[t],o=r[t],a.forEach((function(n){var a=n;"function"==typeof a.transform&&(r===e&&(r=yi({},r)),o=r[t]=a.transform(o)),(a="function"==typeof a?{validator:a}:yi({},a)).validator=l.getValidationMethod(a),a.field=t,a.fullField=a.fullField||t,a.type=l.getType(a),a.validator&&(c[t]=c[t]||[],c[t].push({rule:a,value:o,source:r,field:t}))}))}));var d={};return function(e,t,n,l){if(t.first){var a=new Promise((function(t,a){Oi(function(e){var t=[];return Object.keys(e).forEach((function(n){t.push.apply(t,e[n])})),t}(e),n,(function(e){return l(e),e.length?a(new Di(e,Si(e))):t()}))}));return a.catch((function(e){return e})),a}var o=t.firstFields||[];!0===o&&(o=Object.keys(e));var r=Object.keys(e),i=r.length,s=0,u=[],c=new Promise((function(t,a){var c=function(e){if(u.push.apply(u,e),++s===i)return l(u),u.length?a(new Di(u,Si(u))):t()};r.length||(l(u),t()),r.forEach((function(t){var l=e[t];-1!==o.indexOf(t)?Oi(l,n,c):function(e,t,n){var l=[],a=0,o=e.length;function r(e){l.push.apply(l,e),++a===o&&n(l)}e.forEach((function(e){t(e,r)}))}(l,n,c)}))}));return c.catch((function(e){return e})),c}(c,i,(function(e,t){var n,l=e.rule,a=!("object"!==l.type&&"array"!==l.type||"object"!=typeof l.fields&&"object"!=typeof l.defaultField);function o(e,t){return yi(yi({},t),{},{fullField:l.fullField+"."+e})}function r(n){void 0===n&&(n=[]);var r=n;if(Array.isArray(r)||(r=[r]),!i.suppressWarning&&r.length&&Ri.warning("async-validator:",r),r.length&&void 0!==l.message&&(r=[].concat(l.message)),r=r.map(Ti(l)),i.first&&r.length)return d[l.field]=1,t(r);if(a){if(l.required&&!e.value)return void 0!==l.message?r=[].concat(l.message).map(Ti(l)):i.error&&(r=[i.error(l,Ei(i.messages.required,l.field))]),t(r);var s={};if(l.defaultField)for(var u in e.value)e.value.hasOwnProperty(u)&&(s[u]=l.defaultField);for(var c in s=yi(yi({},s),e.rule.fields))if(s.hasOwnProperty(c)){var p=Array.isArray(s[c])?s[c]:[s[c]];s[c]=p.map(o.bind(null,c))}var f=new Ri(s);f.messages(i.messages),e.rule.options&&(e.rule.options.messages=i.messages,e.rule.options.error=i.error),f.validate(e.value,e.rule.options||i,(function(e){var n=[];r&&r.length&&n.push.apply(n,r),e&&e.length&&n.push.apply(n,e),t(n.length?n:null)}))}else t(r)}a=a&&(l.required||!l.required&&e.value),l.field=e.field,l.asyncValidator?n=l.asyncValidator(l,e.value,r,e.source,i):l.validator&&(!0===(n=l.validator(l,e.value,r,e.source,i))?r():!1===n?r(l.message||l.field+" fails"):n instanceof Array?r(n):n instanceof Error&&r(n.message)),n&&n.then&&n.then((function(){return r()}),(function(e){return r(e)}))}),(function(e){!function(e){var t,n,l,a=[],o={};for(t=0;t<e.length;t++)n=e[t],l=void 0,Array.isArray(n)?a=(l=a).concat.apply(l,n):a.push(n);a.length?o=Si(a):(a=null,o=null),s(a,o)}(e)}))},getType:function(e){if(void 0===e.type&&e.pattern instanceof RegExp&&(e.type="pattern"),"function"!=typeof e.validator&&e.type&&!zi.hasOwnProperty(e.type))throw new Error(Ei("Unknown rule type %s",e.type));return e.type||"string"},getValidationMethod:function(e){if("function"==typeof e.validator)return e.validator;var t=Object.keys(e),n=t.indexOf("message");return-1!==n&&t.splice(n,1),1===t.length&&"required"===t[0]?zi.required:zi[this.getType(e)]||!1}},Ri.register=function(e,t){if("function"!=typeof t)throw new Error("Cannot register a validator by type, validator is not a function");zi[e]=t},Ri.warning=function(){},Ri.messages=$i,Ri.validators=zi;const ji=Ri,Hi={success:"el-icon-success",warning:"el-icon-warning",error:"el-icon-error"};var Wi=Qn({name:"ElAlert",props:{title:{type:String,default:""},description:{type:String,default:""},type:{type:String,default:"info"},closable:{type:Boolean,default:!0},closeText:{type:String,default:""},showIcon:Boolean,center:Boolean,effect:{type:String,default:"light",validator:e=>["light","dark"].indexOf(e)>-1}},emits:["close"],setup(e,t){const n=tt(!0),l=ua((()=>"el-alert--"+e.type)),a=ua((()=>Hi[e.type]||"el-icon-info")),o=ua((()=>e.description||t.slots.default?"is-big":"")),r=ua((()=>e.description||t.slots.default?"is-bold":""));return{visible:n,typeClass:l,iconClass:a,isBigIcon:o,isBoldTitle:r,close:e=>{n.value=!1,t.emit("close",e)}}}});const qi={class:"el-alert__content"},Yi={key:1,class:"el-alert__description"};Wi.render=function(e,t,n,l,a,o){return Cl(),Al(Pa,{name:"el-alert-fade"},{default:en((()=>[Un(Tl("div",{class:["el-alert",[e.typeClass,e.center?"is-center":"","is-"+e.effect]],role:"alert"},[e.showIcon?(Cl(),Al("i",{key:0,class:["el-alert__icon",[e.iconClass,e.isBigIcon]]},null,2)):Pl("v-if",!0),Tl("div",qi,[e.title||e.$slots.title?(Cl(),Al("span",{key:0,class:["el-alert__title",[e.isBoldTitle]]},[Zt(e.$slots,"title",{},(()=>[Bl(d(e.title),1)]))],2)):Pl("v-if",!0),e.$slots.default||e.description?(Cl(),Al("p",Yi,[Zt(e.$slots,"default",{},(()=>[Bl(d(e.description),1)]))])):Pl("v-if",!0),e.closable?(Cl(),Al("i",{key:2,class:["el-alert__closebtn",{"is-customed":""!==e.closeText,"el-icon-close":""===e.closeText}],onClick:t[1]||(t[1]=(...t)=>e.close(...t))},d(e.closeText),3)):Pl("v-if",!0)])],2),[[ho,e.visible]])])),_:1})},Wi.__file="packages/alert/src/index.vue",Wi.install=e=>{e.component(Wi.name,Wi)};var Ki=Qn({name:"ElAside",props:{width:{type:String,default:"300px"}}});Ki.render=function(e,t,n,l,a,o){return Cl(),Al("aside",{class:"el-aside",style:{width:e.width}},[Zt(e.$slots,"default")],4)},Ki.__file="packages/container/src/aside.vue",Ki.install=e=>{e.component(Ki.name,Ki)};const Ui=()=>{},Gi=Object.assign,Xi=Array.isArray,Ji=e=>"function"==typeof e,Zi=e=>"string"==typeof e,Qi=e=>null!==e&&"object"==typeof e,es=Object.prototype.toString,ts=e=>es.call(e),ns=e=>ts(e).slice(8,-1),ls=e=>{const t=Object.create(null);return n=>t[n]||(t[n]=e(n))},as=/-(\w)/g,os=ls((e=>e.replace(as,((e,t)=>t?t.toUpperCase():"")))),rs=ls((e=>e.charAt(0).toUpperCase()+e.slice(1)));var is="undefined"==typeof window;const ss=(e,t="")=>{let n=e;return t.split(".").map((e=>{n=null==n?void 0:n[e]})),n};function us(e,t,n){let l=e;const a=(t=(t=t.replace(/\[(\w+)\]/g,".$1")).replace(/^\./,"")).split(".");let o=0;for(;o<a.length-1&&(l||n);o++){const e=a[o];if(!(e in l)){if(n)throw new Error("please transfer a valid prop path to form item!");break}l=l[e]}return{o:l,k:a[o],v:null==l?void 0:l[a[o]]}}const cs=()=>Math.floor(1e4*Math.random()),ds=e=>e||0===e?Array.isArray(e)?e:[e]:[],ps=e=>"boolean"==typeof e;function fs(e){let t=!1;return function(...n){t||(t=!0,window.requestAnimationFrame((()=>{e.apply(this,n),t=!1})))}}const hs=e=>{clearTimeout(e.value),e.value=null};function vs(e){return Object.keys(e).map((t=>[t,e[t]]))}function ms(){const e=la();return"$ELEMENT"in e.proxy?e.proxy.$ELEMENT:{}}const gs=function(e,t){return e.find(t)};function bs(e){return!!(!e&&0!==e||Xi(e)&&!e.length||Qi(e)&&!Object.keys(e).length)}function ys(e){return e.reduce(((e,t)=>{const n=Array.isArray(t)?ys(t):t;return e.concat(n)}),[])}function xs(e){return Array.from(new Set(e))}function ks(e){return e.value}const ws=["class","style"],Cs=/^on[A-Z]/;var _s=(e={})=>{const{excludeListeners:t=!1,excludeKeys:n=[]}=e,l=la(),a=nt({}),o=n.concat(ws);return l.attrs=Ye(l.attrs),Cn((()=>{const e=vs(l.attrs).reduce(((e,[n,l])=>(o.includes(n)||t&&Cs.test(n)||(e[n]=l),e)),{});a.value=e})),a};const As=function(e,t,n,l=!1){e&&t&&n&&e.addEventListener(t,n,l)},Ss=function(e,t,n){e&&t&&n&&e.removeEventListener(t,n,!1)};function Es(e,t){if(!e||!t)return!1;if(-1!==t.indexOf(" "))throw new Error("className should not contain space.");return e.classList?e.classList.contains(t):(" "+e.className+" ").indexOf(" "+t+" ")>-1}function Ms(e,t){if(!e)return;let n=e.className;const l=(t||"").split(" ");for(let t=0,a=l.length;t<a;t++){const a=l[t];a&&(e.classList?e.classList.add(a):Es(e,a)||(n+=" "+a))}e.classList||(e.className=n)}function Os(e,t){if(!e||!t)return;const n=t.split(" ");let l=" "+e.className+" ";for(let t=0,a=n.length;t<a;t++){const a=n[t];a&&(e.classList?e.classList.remove(a):Es(e,a)&&(l=l.replace(" "+a+" "," ")))}e.classList||(e.className=(l||"").replace(/^[\s\uFEFF]+|[\s\uFEFF]+$/g,""))}const Ds=function(e,t){if(!is){if(!e||!t)return null;"float"===(t=os(t))&&(t="cssFloat");try{const n=e.style[t];if(n)return n;const l=document.defaultView.getComputedStyle(e,"");return l?l[t]:""}catch(n){return e.style[t]}}},Ts=(e,t)=>{if(!is)return Ds(e,null==t?"overflow":t?"overflow-y":"overflow-x").match(/(scroll|auto)/)},Ns=(e,t)=>{if(is)return;let n=e;for(;n;){if([window,document,document.documentElement].includes(n))return window;if(Ts(n,t))return n;n=n.parentNode}return n},Bs=e=>{let t=0,n=e;for(;n;)t+=n.offsetTop,n=n.offsetParent;return t},Ps=e=>e.stopPropagation();let Vs;function Is(){if(is)return 0;if(void 0!==Vs)return Vs;const e=document.createElement("div");e.className="el-scrollbar__wrap",e.style.visibility="hidden",e.style.width="100px",e.style.position="absolute",e.style.top="-9999px",document.body.appendChild(e);const t=e.offsetWidth;e.style.overflow="scroll";const n=document.createElement("div");n.style.width="100%",e.appendChild(n);const l=n.offsetWidth;return e.parentNode.removeChild(e),Vs=t-l,Vs}class Ls extends Error{constructor(e){super(e),this.name="ElementPlusError"}}var zs=(e,t)=>{throw new Ls(`[${e}] ${t}`)};const Fs={tab:"Tab",enter:"Enter",space:"Space",left:"ArrowLeft",up:"ArrowUp",right:"ArrowRight",down:"ArrowDown",esc:"Escape",delete:"Delete",backspace:"Backspace"},$s=e=>"fixed"!==getComputedStyle(e).position&&null!==e.offsetParent,Rs=e=>Array.from(e.querySelectorAll('a[href],button:not([disabled]),button:not([hidden]),:not([tabindex="-1"]),input:not([disabled]),input:not([type="hidden"]),select:not([disabled]),textarea:not([disabled])')).filter(js).filter($s),js=e=>{if(e.tabIndex>0||0===e.tabIndex&&null!==e.getAttribute("tabIndex"))return!0;if(e.disabled)return!1;switch(e.nodeName){case"A":return!!e.href&&"ignore"!==e.rel;case"INPUT":return!("hidden"===e.type||"file"===e.type);case"BUTTON":case"SELECT":case"TEXTAREA":return!0;default:return!1}},Hs=e=>{var t;return!!js(e)&&(qs.IgnoreUtilFocusChanges=!0,null===(t=e.focus)||void 0===t||t.call(e),qs.IgnoreUtilFocusChanges=!1,document.activeElement===e)},Ws=function(e,t,...n){let l;l=t.includes("mouse")||t.includes("click")?"MouseEvents":t.includes("key")?"KeyboardEvent":"HTMLEvents";const a=document.createEvent(l);return a.initEvent(t,...n),e.dispatchEvent(a),e},qs={IgnoreUtilFocusChanges:!1,focusFirstDescendant:function(e){for(let t=0;t<e.childNodes.length;t++){const n=e.childNodes[t];if(Hs(n)||this.focusFirstDescendant(n))return!0}return!1},focusLastDescendant:function(e){for(let t=e.childNodes.length-1;t>=0;t--){const n=e.childNodes[t];if(Hs(n)||this.focusLastDescendant(n))return!0}return!1}},Ys=[];is||As(document,"keydown",(e=>{0!==Ys.length&&e.code===Fs.esc&&Ys[Ys.length-1].handleClose()}));const Ks=new Map;let Us;function Gs(e,t){let n=[];return Array.isArray(t.arg)?n=t.arg:n.push(t.arg),function(l,a){const o=t.instance.popperRef,r=l.target,i=a.target,s=!t||!t.instance,u=!r||!i,c=e.contains(r)||e.contains(i),d=e===r,p=n.length&&n.some((e=>null==e?void 0:e.contains(r)))||n.length&&n.includes(i),f=o&&(o.contains(r)||o.contains(i));s||u||c||d||p||f||t.value()}}is||(As(document,"mousedown",(e=>Us=e)),As(document,"mouseup",(e=>{for(const{documentHandler:t}of Ks.values())t(e,Us)})));const Xs={beforeMount(e,t){Ks.set(e,{documentHandler:Gs(e,t),bindingFn:t.value})},updated(e,t){Ks.set(e,{documentHandler:Gs(e,t),bindingFn:t.value})},unmounted(e){Ks.delete(e)}};var Js={beforeMount(e,t){let n,l=null;const a=()=>t.value&&t.value(),o=()=>{Date.now()-n<100&&a(),clearInterval(l),l=null};As(e,"mousedown",(e=>{0===e.button&&(n=Date.now(),function(e,t,n){const l=function(...a){n&&n.apply(this,a),Ss(e,t,l)};As(e,t,l)}(document,"mouseup",o),clearInterval(l),l=setInterval(a,100))}))}};const Zs={beforeMount(e){e["_trap-focus-children"]=Rs(e),e["_trap-focus-handler"]=t=>{const n=e["_trap-focus-children"];if(n.length>0&&t.code===Fs.tab){if(1===n.length)return t.preventDefault(),void(document.activeElement!==n[0]&&n[0].focus());const e=t.shiftKey,l=t.target===n[0],a=t.target===n[n.length-1];l&&e&&(t.preventDefault(),n[n.length-1].focus()),a&&!e&&(t.preventDefault(),n[0].focus())}},As(document,"keydown",e["_trap-focus-handler"])},updated(e){Mt((()=>{e["_trap-focus-children"]=Rs(e)}))},unmounted(e){Ss(document,"keydown",e["_trap-focus-handler"])}},Qs="undefined"!=typeof navigator&&navigator.userAgent.toLowerCase().indexOf("firefox")>-1,eu={beforeMount(e,t){!function(e,t){if(e&&e.addEventListener){const n=function(e){const n=Co()(e);t&&t.apply(this,[e,n])};Qs?e.addEventListener("DOMMouseScroll",n):e.onmousewheel=n}}(e,t.value)}},tu="update:modelValue",nu={validating:"el-icon-loading",success:"el-icon-circle-check",error:"el-icon-circle-close"};function lu(e){return/([(\uAC00-\uD7AF)|(\u3130-\u318F)])+/gi.test(e)}const au=e=>["","large","medium","small","mini"].includes(e);var ou=Qn({name:"ElForm",props:{model:Object,rules:Object,labelPosition:String,labelWidth:String,labelSuffix:{type:String,default:""},inline:Boolean,inlineMessage:Boolean,statusIcon:Boolean,showMessage:{type:Boolean,default:!0},size:String,disabled:Boolean,validateOnRuleChange:{type:Boolean,default:!0},hideRequiredAsterisk:{type:Boolean,default:!1}},setup(e,{emit:t}){const n=_o(),l=[];An((()=>e.rules),(()=>{l.forEach((e=>{e.removeValidateEvents(),e.addValidateEvents()})),e.validateOnRuleChange&&r((()=>({})))})),n.on("el.form.addField",(e=>{e&&l.push(e)})),n.on("el.form.removeField",(e=>{e.prop&&l.splice(l.indexOf(e),1)}));const a=()=>{e.model?l.forEach((e=>{e.resetField()})):console.warn("[Element Warn][Form]model is required for resetFields to work.")},o=(e=[])=>{(e.length?"string"==typeof e?l.filter((t=>e===t.prop)):l.filter((t=>e.indexOf(t.prop)>-1)):l).forEach((e=>{e.clearValidate()}))},r=t=>{if(!e.model)return void console.warn("[Element Warn][Form]model is required for validate to work!");let n;"function"!=typeof t&&(n=new Promise(((e,n)=>{t=function(t,l){t?e(!0):n(l)}}))),0===l.length&&t(!0);let a=!0,o=0,r={};for(const e of l)e.validate("",((e,n)=>{e&&(a=!1),r=Object.assign(Object.assign({},r),n),++o===l.length&&t(a,r)}));return n},i=(e,t)=>{e=[].concat(e);const n=l.filter((t=>-1!==e.indexOf(t.prop)));l.length?n.forEach((e=>{e.validate("",t)})):console.warn("[Element Warn]please pass correct props!")};return Fl("elForm",Ye(Object.assign(Object.assign(Object.assign({formMitt:n},st(e)),{resetFields:a,clearValidate:o,validateField:i,emit:t}),function(){const e=tt([]);function t(t){const n=e.value.indexOf(t);return-1===n&&console.warn("[Element Warn][ElementForm]unexpected width "+t),n}return{autoLabelWidth:ua((()=>{if(!e.value.length)return"0";const t=Math.max(...e.value);return t?t+"px":""})),registerLabelWidth:function(n,l){if(n&&l){const a=t(l);e.value.splice(a,1,n)}else n&&e.value.push(n)},deregisterLabelWidth:function(n){const l=t(n);l>-1&&e.value.splice(l,1)}}}()))),{validate:r,resetFields:a,clearValidate:o,validateField:i}}});let ru;ou.render=function(e,t,n,l,a,o){return Cl(),Al("form",{class:["el-form",[e.labelPosition?"el-form--label-"+e.labelPosition:"",{"el-form--inline":e.inline}]]},[Zt(e.$slots,"default")],2)},ou.__file="packages/form/src/form.vue",ou.install=e=>{e.component(ou.name,ou)};const iu=["letter-spacing","line-height","padding-top","padding-bottom","font-family","font-weight","font-size","text-rendering","text-transform","width","text-indent","padding-left","padding-right","border-width","box-sizing"];function su(e,t=1,n=null){var l;ru||(ru=document.createElement("textarea"),document.body.appendChild(ru));const{paddingSize:a,borderSize:o,boxSizing:r,contextStyle:i}=function(e){const t=window.getComputedStyle(e),n=t.getPropertyValue("box-sizing"),l=parseFloat(t.getPropertyValue("padding-bottom"))+parseFloat(t.getPropertyValue("padding-top")),a=parseFloat(t.getPropertyValue("border-bottom-width"))+parseFloat(t.getPropertyValue("border-top-width"));return{contextStyle:iu.map((e=>`${e}:${t.getPropertyValue(e)}`)).join(";"),paddingSize:l,borderSize:a,boxSizing:n}}(e);ru.setAttribute("style",i+";\n  height:0 !important;\n  visibility:hidden !important;\n  overflow:hidden !important;\n  position:absolute !important;\n  z-index:-1000 !important;\n  top:0 !important;\n  right:0 !important;\n"),ru.value=e.value||e.placeholder||"";let s=ru.scrollHeight;const u={};"border-box"===r?s+=o:"content-box"===r&&(s-=a),ru.value="";const c=ru.scrollHeight-a;if(null!==t){let e=c*t;"border-box"===r&&(e=e+a+o),s=Math.max(e,s),u.minHeight=e+"px"}if(null!==n){let e=c*n;"border-box"===r&&(e=e+a+o),s=Math.min(e,s)}return u.height=s+"px",null===(l=ru.parentNode)||void 0===l||l.removeChild(ru),ru=null,u}const uu={suffix:"append",prefix:"prepend"};var cu=Qn({name:"ElInput",inheritAttrs:!1,props:{modelValue:{type:[String,Number],default:""},type:{type:String,default:"text"},size:{type:String,validator:au},resize:{type:String,validator:e=>["none","both","horizontal","vertical"].includes(e)},autosize:{type:[Boolean,Object],default:!1},autocomplete:{type:String,default:"off",validator:e=>["on","off"].includes(e)},placeholder:{type:String},form:{type:String,default:""},disabled:{type:Boolean,default:!1},readonly:{type:Boolean,default:!1},clearable:{type:Boolean,default:!1},showPassword:{type:Boolean,default:!1},showWordLimit:{type:Boolean,default:!1},suffixIcon:{type:String,default:""},prefixIcon:{type:String,default:""},label:{type:String,default:""},tabindex:{type:String,default:""},validateEvent:{type:Boolean,default:!0}},emits:[tu,"input","change","focus","blur","clear","mouseleave","mouseenter","keydown"],setup(e,t){const n=la(),l=_s(),a=ms(),o=$l("elForm",{}),r=$l("elFormItem",{}),i=tt(null),s=tt(null),u=tt(!1),c=tt(!1),d=tt(!1),p=tt(!1),f=nt({}),h=ua((()=>i.value||s.value)),v=ua((()=>e.size||r.size||a.size)),m=ua((()=>o.statusIcon)),g=ua((()=>r.validateState||"")),b=ua((()=>nu[g.value])),y=ua((()=>Object.assign(Object.assign({},f.value),{resize:e.resize}))),x=ua((()=>e.disabled||o.disabled)),k=ua((()=>null===e.modelValue||void 0===e.modelValue?"":String(e.modelValue))),w=ua((()=>t.attrs.maxlength)),C=ua((()=>e.clearable&&!x.value&&!e.readonly&&k.value&&(u.value||c.value))),_=ua((()=>e.showPassword&&!x.value&&!e.readonly&&(!!k.value||u.value))),A=ua((()=>e.showWordLimit&&t.attrs.maxlength&&("text"===e.type||"textarea"===e.type)&&!x.value&&!e.readonly&&!e.showPassword)),S=ua((()=>"number"==typeof e.modelValue?String(e.modelValue).length:(e.modelValue||"").length)),E=ua((()=>A.value&&S.value>w.value)),M=()=>{const{type:t,autosize:n}=e;if(!is&&"textarea"===t)if(n){const e=Qi(n)?n.minRows:void 0,t=Qi(n)?n.maxRows:void 0;f.value=su(s.value,e,t)}else f.value={minHeight:su(s.value).minHeight}},O=()=>{const e=h.value;e&&e.value!==k.value&&(e.value=k.value)},D=e=>{const{el:l}=n.vnode,a=Array.from(l.querySelectorAll(".el-input__"+e)).find((e=>e.parentNode===l));if(!a)return;const o=uu[e];t.slots[o]?a.style.transform=`translateX(${"suffix"===e?"-":""}${l.querySelector(".el-input-group__"+o).offsetWidth}px)`:a.removeAttribute("style")},T=()=>{D("prefix"),D("suffix")},N=e=>{const{value:n}=e.target;d.value||n!==k.value&&(t.emit(tu,n),t.emit("input",n),Mt(O))},B=()=>{Mt((()=>{h.value.focus()}))};return An((()=>e.modelValue),(t=>{var n;Mt(M),e.validateEvent&&(null===(n=r.formItemMitt)||void 0===n||n.emit("el.form.change",[t]))})),An(k,(()=>{O()})),An((()=>e.type),(()=>{Mt((()=>{O(),M(),T()}))})),mn((()=>{O(),T(),Mt(M)})),bn((()=>{Mt(T)})),{input:i,textarea:s,attrs:l,inputSize:v,validateState:g,validateIcon:b,textareaStyle:y,inputDisabled:x,showClear:C,showPwdVisible:_,isWordLimitVisible:A,upperLimit:w,textLength:S,hovering:c,inputExceed:E,passwordVisible:p,inputOrTextarea:h,handleInput:N,handleChange:e=>{t.emit("change",e.target.value)},handleFocus:e=>{u.value=!0,t.emit("focus",e)},handleBlur:n=>{var l;u.value=!1,t.emit("blur",n),e.validateEvent&&(null===(l=r.formItemMitt)||void 0===l||l.emit("el.form.blur",[e.modelValue]))},handleCompositionStart:()=>{d.value=!0},handleCompositionUpdate:e=>{const t=e.target.value,n=t[t.length-1]||"";d.value=!lu(n)},handleCompositionEnd:e=>{d.value&&(d.value=!1,N(e))},handlePasswordVisible:()=>{p.value=!p.value,B()},clear:()=>{t.emit(tu,""),t.emit("change",""),t.emit("clear")},select:()=>{h.value.select()},focus:B,blur:()=>{h.value.blur()},getSuffixVisible:()=>t.slots.suffix||e.suffixIcon||C.value||e.showPassword||A.value||g.value&&m.value,onMouseLeave:e=>{c.value=!1,t.emit("mouseleave",e)},onMouseEnter:e=>{c.value=!0,t.emit("mouseenter",e)},handleKeydown:e=>{t.emit("keydown",e)}}}});const du={key:0,class:"el-input-group__prepend"},pu={key:2,class:"el-input__prefix"},fu={key:3,class:"el-input__suffix"},hu={class:"el-input__suffix-inner"},vu={key:3,class:"el-input__count"},mu={class:"el-input__count-inner"},gu={key:4,class:"el-input-group__append"},bu={key:2,class:"el-input__count"};cu.render=function(e,t,n,l,a,o){return Cl(),Al("div",{class:["textarea"===e.type?"el-textarea":"el-input",e.inputSize?"el-input--"+e.inputSize:"",{"is-disabled":e.inputDisabled,"is-exceed":e.inputExceed,"el-input-group":e.$slots.prepend||e.$slots.append,"el-input-group--append":e.$slots.append,"el-input-group--prepend":e.$slots.prepend,"el-input--prefix":e.$slots.prefix||e.prefixIcon,"el-input--suffix":e.$slots.suffix||e.suffixIcon||e.clearable||e.showPassword},e.$attrs.class],style:e.$attrs.style,onMouseenter:t[19]||(t[19]=(...t)=>e.onMouseEnter(...t)),onMouseleave:t[20]||(t[20]=(...t)=>e.onMouseLeave(...t))},["textarea"!==e.type?(Cl(),Al(gl,{key:0},[Pl(" 前置元素 "),e.$slots.prepend?(Cl(),Al("div",du,[Zt(e.$slots,"prepend")])):Pl("v-if",!0),"textarea"!==e.type?(Cl(),Al("input",zl({key:1,ref:"input",class:"el-input__inner"},e.attrs,{type:e.showPassword?e.passwordVisible?"text":"password":e.type,disabled:e.inputDisabled,readonly:e.readonly,autocomplete:e.autocomplete,tabindex:e.tabindex,"aria-label":e.label,placeholder:e.placeholder,onCompositionstart:t[1]||(t[1]=(...t)=>e.handleCompositionStart(...t)),onCompositionupdate:t[2]||(t[2]=(...t)=>e.handleCompositionUpdate(...t)),onCompositionend:t[3]||(t[3]=(...t)=>e.handleCompositionEnd(...t)),onInput:t[4]||(t[4]=(...t)=>e.handleInput(...t)),onFocus:t[5]||(t[5]=(...t)=>e.handleFocus(...t)),onBlur:t[6]||(t[6]=(...t)=>e.handleBlur(...t)),onChange:t[7]||(t[7]=(...t)=>e.handleChange(...t)),onKeydown:t[8]||(t[8]=(...t)=>e.handleKeydown(...t))}),null,16,["type","disabled","readonly","autocomplete","tabindex","aria-label","placeholder"])):Pl("v-if",!0),Pl(" 前置内容 "),e.$slots.prefix||e.prefixIcon?(Cl(),Al("span",pu,[Zt(e.$slots,"prefix"),e.prefixIcon?(Cl(),Al("i",{key:0,class:["el-input__icon",e.prefixIcon]},null,2)):Pl("v-if",!0)])):Pl("v-if",!0),Pl(" 后置内容 "),e.getSuffixVisible()?(Cl(),Al("span",fu,[Tl("span",hu,[e.showClear&&e.showPwdVisible&&e.isWordLimitVisible?Pl("v-if",!0):(Cl(),Al(gl,{key:0},[Zt(e.$slots,"suffix"),e.suffixIcon?(Cl(),Al("i",{key:0,class:["el-input__icon",e.suffixIcon]},null,2)):Pl("v-if",!0)],64)),e.showClear?(Cl(),Al("i",{key:1,class:"el-input__icon el-icon-circle-close el-input__clear",onMousedown:t[9]||(t[9]=co((()=>{}),["prevent"])),onClick:t[10]||(t[10]=(...t)=>e.clear(...t))},null,32)):Pl("v-if",!0),e.showPwdVisible?(Cl(),Al("i",{key:2,class:"el-input__icon el-icon-view el-input__clear",onClick:t[11]||(t[11]=(...t)=>e.handlePasswordVisible(...t))})):Pl("v-if",!0),e.isWordLimitVisible?(Cl(),Al("span",vu,[Tl("span",mu,d(e.textLength)+"/"+d(e.upperLimit),1)])):Pl("v-if",!0)]),e.validateState?(Cl(),Al("i",{key:0,class:["el-input__icon","el-input__validateIcon",e.validateIcon]},null,2)):Pl("v-if",!0)])):Pl("v-if",!0),Pl(" 后置元素 "),e.$slots.append?(Cl(),Al("div",gu,[Zt(e.$slots,"append")])):Pl("v-if",!0)],64)):(Cl(),Al("textarea",zl({key:1,ref:"textarea",class:"el-textarea__inner"},e.attrs,{tabindex:e.tabindex,disabled:e.inputDisabled,readonly:e.readonly,autocomplete:e.autocomplete,style:e.textareaStyle,"aria-label":e.label,onCompositionstart:t[12]||(t[12]=(...t)=>e.handleCompositionStart(...t)),onCompositionupdate:t[13]||(t[13]=(...t)=>e.handleCompositionUpdate(...t)),onCompositionend:t[14]||(t[14]=(...t)=>e.handleCompositionEnd(...t)),onInput:t[15]||(t[15]=(...t)=>e.handleInput(...t)),onFocus:t[16]||(t[16]=(...t)=>e.handleFocus(...t)),onBlur:t[17]||(t[17]=(...t)=>e.handleBlur(...t)),onChange:t[18]||(t[18]=(...t)=>e.handleChange(...t))}),null,16,["tabindex","disabled","readonly","autocomplete","aria-label"])),e.isWordLimitVisible&&"textarea"===e.type?(Cl(),Al("span",bu,d(e.textLength)+"/"+d(e.upperLimit),1)):Pl("v-if",!0)],38)},cu.__file="packages/input/src/index.vue",cu.install=e=>{e.component(cu.name,cu)};const yu=function(e){for(const t of e){const e=t.target.__resizeListeners__||[];e.length&&e.forEach((e=>{e()}))}},xu=function(e,t){!is&&e&&(e.__resizeListeners__||(e.__resizeListeners__=[],e.__ro__=new qo(yu),e.__ro__.observe(e)),e.__resizeListeners__.push(t))},ku=function(e,t){e&&e.__resizeListeners__&&(e.__resizeListeners__.splice(e.__resizeListeners__.indexOf(t),1),e.__resizeListeners__.length||e.__ro__.disconnect())},wu={vertical:{offset:"offsetHeight",scroll:"scrollTop",scrollSize:"scrollHeight",size:"height",key:"vertical",axis:"Y",client:"clientY",direction:"top"},horizontal:{offset:"offsetWidth",scroll:"scrollLeft",scrollSize:"scrollWidth",size:"width",key:"horizontal",axis:"X",client:"clientX",direction:"left"}};function Cu({move:e,size:t,bar:n}){const l={},a=`translate${n.axis}(${e}%)`;return l[n.size]=t,l.transform=a,l.msTransform=a,l.webkitTransform=a,l}var _u=Qn({name:"Bar",props:{vertical:Boolean,size:String,move:Number},setup(e){const t=la(),n=tt(null),l=$l("scroll-bar-wrap",{}),a=ua((()=>wu[e.vertical?"vertical":"horizontal"])),o=tt({}),r=tt(null),i=e=>{e.ctrlKey||2===e.button||(u(e),o.value[a.value.axis]=e.currentTarget[a.value.offset]-(e[a.value.client]-e.currentTarget.getBoundingClientRect()[a.value.direction]))},s=e=>{const o=100*(Math.abs(e.target.getBoundingClientRect()[a.value.direction]-e[a.value.client])-n.value[a.value.offset]/2)/t.vnode.el[a.value.offset];l.value[a.value.scroll]=o*l.value[a.value.scrollSize]/100},u=e=>{e.stopImmediatePropagation(),r.value=!0,As(document,"mousemove",c),As(document,"mouseup",d),document.onselectstart=()=>!1},c=e=>{if(!1===r.value)return;const i=o.value[a.value.axis];if(!i)return;const s=100*(-1*(t.vnode.el.getBoundingClientRect()[a.value.direction]-e[a.value.client])-(n.value[a.value.offset]-i))/t.vnode.el[a.value.offset];l.value[a.value.scroll]=s*l.value[a.value.scrollSize]/100};function d(){r.value=!1,o.value[a.value.axis]=0,Ss(document,"mousemove",c),document.onselectstart=null}return xn((()=>{Ss(document,"mouseup",d)})),()=>ca("div",{class:["el-scrollbar__bar","is-"+a.value.key],onMousedown:s},ca("div",{ref:n,class:"el-scrollbar__thumb",onMousedown:i,style:Cu({size:e.size,move:e.move,bar:a.value})}))}}),Au=Qn({name:"ElScrollbar",components:{Bar:_u},props:{native:{type:Boolean,default:!1},wrapStyle:{type:[String,Array],default:""},wrapClass:{type:[String,Array],default:""},viewClass:{type:[String,Array],default:""},viewStyle:{type:[String,Array],default:""},noresize:Boolean,tag:{type:String,default:"div"}},setup(e){const t=tt("0"),n=tt("0"),l=tt(0),a=tt(0),o=tt(null),r=tt(null);Fl("scroll-bar-wrap",o);const i=()=>{if(!o.value)return;const e=100*o.value.clientHeight/o.value.scrollHeight,l=100*o.value.clientWidth/o.value.scrollWidth;n.value=e<100?e+"%":"",t.value=l<100?l+"%":""};mn((()=>{e.native||(Mt(i),!e.noresize&&xu(r.value,i))})),yn((()=>{e.native||!e.noresize&&ku(r.value,i)}));const s=ua((()=>Is())),u=ua((()=>{const t=Is();let n=e.wrapStyle;if(t){const l=`-${t}px`,a=`margin-bottom: ${l}; margin-right: ${l};`;Array.isArray(e.wrapStyle)?(n=function(e){const t={};for(let n=0;n<e.length;n++)e[n]&&Gi(t,e[n]);return t}(e.wrapStyle),n.marginRight=n.marginBottom=l):"string"==typeof e.wrapStyle?n+=a:n=a}return n}));return{moveX:l,moveY:a,sizeWidth:t,sizeHeight:n,style:u,gutter:s,wrap:o,resize:r,update:i,handleScroll:()=>{e.native||(a.value=100*o.value.scrollTop/o.value.clientHeight,l.value=100*o.value.scrollLeft/o.value.clientWidth)}}}});const Su={class:"el-scrollbar"};var Eu,Mu;function Ou(e,t){if(!(e=>e.type===yl)(e))return(e=>e.type===gl)(e)||(e=>"template"===e.type)(e)?t>0?Du(e.children,t-1):void 0:e}Au.render=function(e,t,n,l,a,o){const r=pl("bar");return Cl(),Al("div",Su,[Tl("div",{ref:"wrap",class:[e.wrapClass,"el-scrollbar__wrap",e.native?"":"el-scrollbar__wrap--hidden-default"],style:e.style,onScroll:t[1]||(t[1]=(...t)=>e.handleScroll(...t))},[(Cl(),Al((i=e.tag,O(i)?vl(dl,i,!1)||i:i||fl),{ref:"resize",class:["el-scrollbar__view",e.viewClass],style:e.viewStyle},{default:en((()=>[Zt(e.$slots,"default")])),_:3},8,["class","style"]))],38),e.native?Pl("v-if",!0):(Cl(),Al(gl,{key:0},[Tl(r,{move:e.moveX,size:e.sizeWidth},null,8,["move","size"]),Tl(r,{vertical:"",move:e.moveY,size:e.sizeHeight},null,8,["move","size"])],64))]);var i},Au.__file="packages/scrollbar/src/index.vue",Au.install=e=>{e.component(Au.name,Au)},(Mu=Eu||(Eu={}))[Mu.TEXT=1]="TEXT",Mu[Mu.CLASS=2]="CLASS",Mu[Mu.STYLE=4]="STYLE",Mu[Mu.PROPS=8]="PROPS",Mu[Mu.FULL_PROPS=16]="FULL_PROPS",Mu[Mu.HYDRATE_EVENTS=32]="HYDRATE_EVENTS",Mu[Mu.STABLE_FRAGMENT=64]="STABLE_FRAGMENT",Mu[Mu.KEYED_FRAGMENT=128]="KEYED_FRAGMENT",Mu[Mu.UNKEYED_FRAGMENT=256]="UNKEYED_FRAGMENT",Mu[Mu.NEED_PATCH=512]="NEED_PATCH",Mu[Mu.DYNAMIC_SLOTS=1024]="DYNAMIC_SLOTS",Mu[Mu.HOISTED=-1]="HOISTED",Mu[Mu.BAIL=-2]="BAIL";const Du=(e,t=3)=>Array.isArray(e)?Ou(e[0],t):Ou(e,t);function Tu(e,t,n,l,a){return Cl(),Al(e,t,n,l,a)}let Nu={};const Bu=e=>{e.preventDefault(),e.stopPropagation()},Pu=()=>{null==Fu||Fu.doOnModalClick()};let Vu,Iu=!1;const Lu=function(){if(is)return;let e=Fu.modalDom;return e?Iu=!0:(Iu=!1,e=document.createElement("div"),Fu.modalDom=e,As(e,"touchmove",Bu),As(e,"click",Pu)),e},zu={},Fu={modalFade:!0,modalDom:void 0,zIndex:Vu,getInstance:function(e){return zu[e]},register:function(e,t){e&&t&&(zu[e]=t)},deregister:function(e){e&&(zu[e]=null,delete zu[e])},nextZIndex:function(){return++Fu.zIndex},modalStack:[],doOnModalClick:function(){const e=Fu.modalStack[Fu.modalStack.length-1];if(!e)return;const t=Fu.getInstance(e.id);t&&t.closeOnClickModal.value&&t.close()},openModal:function(e,t,n,l,a){if(is)return;if(!e||void 0===t)return;this.modalFade=a;const o=this.modalStack;for(let t=0,n=o.length;t<n;t++)if(o[t].id===e)return;const r=Lu();Ms(r,"v-modal"),this.modalFade&&!Iu&&Ms(r,"v-modal-enter"),l&&l.trim().split(/\s+/).forEach((e=>Ms(r,e))),setTimeout((()=>{Os(r,"v-modal-enter")}),200),n&&n.parentNode&&11!==n.parentNode.nodeType?n.parentNode.appendChild(r):document.body.appendChild(r),t&&(r.style.zIndex=String(t)),r.tabIndex=0,r.style.display="",this.modalStack.push({id:e,zIndex:t,modalClass:l})},closeModal:function(e){const t=this.modalStack,n=Lu();if(t.length>0){const l=t[t.length-1];if(l.id===e)l.modalClass&&l.modalClass.trim().split(/\s+/).forEach((e=>Os(n,e))),t.pop(),t.length>0&&(n.style.zIndex=t[t.length-1].zIndex);else for(let n=t.length-1;n>=0;n--)if(t[n].id===e){t.splice(n,1);break}}0===t.length&&(this.modalFade&&Ms(n,"v-modal-leave"),setTimeout((()=>{0===t.length&&(n.parentNode&&n.parentNode.removeChild(n),n.style.display="none",Fu.modalDom=void 0),Os(n,"v-modal-leave")}),200))}};function $u(e,t=[]){const{arrow:n,arrowOffset:l,offset:a,gpuAcceleration:o}=e,r=[{name:"offset",options:{offset:[0,null!=a?a:12]}},{name:"preventOverflow",options:{padding:{top:2,bottom:2,left:5,right:5}}},{name:"flip",options:{padding:5}},{name:"computeStyles",options:{gpuAcceleration:o,adaptive:o}}];return n&&r.push({name:"arrow",options:{element:n,padding:null!=l?l:5}}),r.push(...t),r}var Ru;Object.defineProperty(Fu,"zIndex",{configurable:!0,get:()=>(void 0===Vu&&(Vu=Nu.zIndex||2e3),Vu),set(e){Vu=e}}),is||As(window,"keydown",(function(e){if(e.code===Fs.esc){const e=function(){if(!is&&Fu.modalStack.length>0){const e=Fu.modalStack[Fu.modalStack.length-1];if(!e)return;return Fu.getInstance(e.id)}}();e&&e.closeOnPressEscape.value&&(e.handleClose?e.handleClose():e.handleAction?e.handleAction("cancel"):e.close())}})),function(e){e.DARK="dark",e.LIGHT="light"}(Ru||(Ru={}));var ju={arrowOffset:{type:Number,default:5},appendToBody:{type:Boolean,default:!0},boundariesPadding:{type:Number,default:0},content:{type:String,default:""},class:{type:String,default:""},style:Object,closeDelay:{type:Number,default:200},cutoff:{type:Boolean,default:!1},disabled:{type:Boolean,default:!1},effect:{type:String,default:Ru.DARK},enterable:{type:Boolean,default:!0},hideAfter:{type:Number,default:0},manualMode:{type:Boolean,default:!1},showAfter:{type:Number,default:0},offset:{type:Number,default:12},placement:{type:String,default:"bottom"},popperClass:{type:String,default:""},pure:{type:Boolean,default:!1},popperOptions:{type:Object,default:()=>null},showArrow:{type:Boolean,default:!0},strategy:{type:String,default:"fixed"},transition:{type:String,default:"el-fade-in-linear"},trigger:{type:[String,Array],default:"hover"},visible:{type:Boolean,default:void 0},stopPopperMouseEvent:{type:Boolean,default:!0},gpuAcceleration:{type:Boolean,default:!0}};function Hu(e,{emit:t}){const n=tt(null),l=tt(null),a=tt(null),o="el-popper-"+cs();let r=null,i=null,s=null,u=!1;const c=()=>e.manualMode||"manual"===e.trigger,d=tt({zIndex:Fu.nextZIndex()}),p=function(e,t){return ua((()=>{var n;return Object.assign(Object.assign({placement:e.placement},e.popperOptions),{modifiers:$u({arrow:t.arrow.value,arrowOffset:e.arrowOffset,offset:e.offset,gpuAcceleration:e.gpuAcceleration},null===(n=e.popperOptions)||void 0===n?void 0:n.modifiers)})}))}(e,{arrow:n}),f=Ye({visible:!!e.visible}),h=ua({get:()=>!e.disabled&&(ps(e.visible)?e.visible:f.visible),set(n){c()||(ps(e.visible)?t("update:visible",n):f.visible=n)}});function v(){e.hideAfter>0&&(s=window.setTimeout((()=>{m()}),e.hideAfter)),h.value=!0}function m(){h.value=!1}function g(){clearTimeout(i),clearTimeout(s)}const b=()=>{c()||e.disabled||(g(),0===e.showAfter?v():i=window.setTimeout((()=>{v()}),e.showAfter))},y=()=>{c()||(g(),e.closeDelay>0?s=window.setTimeout((()=>{x()}),e.closeDelay):x())},x=()=>{m(),e.disabled&&w(!0)};function k(){if(!ks(h))return;const e=ks(l),t=ns(e).startsWith("HTML")?e:e.$el;r=Ur(t,ks(a),ks(p)),r.update()}function w(e){!r||ks(h)&&!e||C()}function C(){var e;null===(e=null==r?void 0:r.destroy)||void 0===e||e.call(r),r=null}const _={};if(!c()){const t=()=>{ks(h)?y():b()},n=e=>{switch(e.stopPropagation(),e.type){case"click":u?u=!1:t();break;case"mouseenter":b();break;case"mouseleave":y();break;case"focus":u=!0,b();break;case"blur":u=!1,y()}},l=e=>{switch(e){case"click":_.onClick=n;break;case"hover":_.onMouseEnter=n,_.onMouseLeave=n;break;case"focus":_.onFocus=n,_.onBlur=n}};Xi(e.trigger)?Object.values(e.trigger).map(l):l(e.trigger)}return An(p,(e=>{r&&(r.setOptions(e),r.update())})),An(h,(function(e){e&&(d.value.zIndex=Fu.nextZIndex(),k())})),{update:function(){ks(h)&&(r?r.update():k())},doDestroy:w,show:b,hide:y,onPopperMouseEnter:function(){e.enterable&&"click"!==e.trigger&&clearTimeout(s)},onPopperMouseLeave:function(){const{trigger:t}=e;Zi(t)&&("click"===t||"focus"===t)||1===t.length&&("click"===t[0]||"focus"===t[0])||y()},onAfterEnter:()=>{t("after-enter")},onAfterLeave:()=>{C(),t("after-leave")},onBeforeEnter:()=>{t("before-enter")},onBeforeLeave:()=>{t("before-leave")},initializePopper:k,isManualMode:c,arrowRef:n,events:_,popperId:o,popperInstance:r,popperRef:a,popperStyle:d,triggerRef:l,visibility:h}}function Wu(e,t){const{effect:n,name:l,stopPopperMouseEvent:a,popperClass:o,popperStyle:r,popperRef:i,pure:s,popperId:u,visibility:c,onMouseEnter:d,onMouseLeave:p,onAfterEnter:f,onAfterLeave:h,onBeforeEnter:v,onBeforeLeave:m}=e,g=[o,"el-popper","is-"+n,s?"is-pure":""],b=a?Ps:Ui;return Tl(Pa,{name:l,onAfterEnter:f,onAfterLeave:h,onBeforeEnter:v,onBeforeLeave:m},{default:en((()=>[Un(Tl("div",{"aria-hidden":String(!c),class:g,style:null!=r?r:{},id:u,ref:null!=i?i:"popperRef",role:"tooltip",onMouseEnter:d,onMouseLeave:p,onClick:Ps,onMouseDown:b,onMouseUp:b},t,Eu.CLASS|Eu.STYLE|Eu.PROPS|Eu.HYDRATE_EVENTS,["aria-hidden","onMouseenter","onMouseleave","onMouseDown","onMouseUp","onClick","id"]),[[ho,c]])]))},Eu.PROPS,["name","onAfterEnter","onAfterLeave","onBeforeEnter","onBeforeLeave"])}function qu(e,t){const n=Du(e,1);return n||zs("renderTrigger","trigger expects single rooted node"),Nl(n,t)}function Yu(e){return e?(Cl(),Al("div",{ref:"arrowRef",class:"el-popper__arrow","data-popper-arrow":""},null,Eu.NEED_PATCH)):(Cl(),Al(yl,null,""))}var Ku=Qn({name:"ElPopper",props:ju,emits:["update:visible","after-enter","after-leave","before-enter","before-leave"],setup(e,t){t.slots.trigger||zs("ElPopper","Trigger must be provided");const n=Hu(e,t),l=()=>n.doDestroy(!0);return mn(n.initializePopper),yn(l),Fn(n.initializePopper),$n(l),n},render(){var e;const{$slots:t,appendToBody:n,class:l,style:a,effect:o,hide:r,onPopperMouseEnter:i,onPopperMouseLeave:s,onAfterEnter:u,onAfterLeave:c,onBeforeEnter:p,onBeforeLeave:f,popperClass:h,popperId:v,popperStyle:m,pure:g,showArrow:b,transition:y,visibility:x,stopPopperMouseEvent:k}=this,w=this.isManualMode(),C=Yu(b),_=Wu({effect:o,name:y,popperClass:h,popperId:v,popperStyle:m,pure:g,stopPopperMouseEvent:k,onMouseEnter:i,onMouseLeave:s,onAfterEnter:u,onAfterLeave:c,onBeforeEnter:p,onBeforeLeave:f,visibility:x},[Zt(t,"default",{},(()=>[d(this.content)])),C]),A=null===(e=t.trigger)||void 0===e?void 0:e.call(t),S=Object.assign({ariaDescribedby:v,class:l,style:a,ref:"triggerRef"},this.events),E=w?qu(A,S):Un(qu(A,S),[[Xs,r]]);return Tu(gl,null,[E,Tl(cl,{to:"body",disabled:!n},[_],Eu.PROPS,["disabled"])])}});Ku.__file="packages/popper/src/index.vue",Ku.install=e=>{e.component(Ku.name,Ku)};var Uu=Qn({name:"ElAutocomplete",components:{ElPopper:Ku,ElInput:cu,ElScrollbar:Au},directives:{clickoutside:Xs},inheritAttrs:!1,props:{valueKey:{type:String,default:"value"},modelValue:{type:[String,Number],default:""},debounce:{type:Number,default:300},placement:{type:String,validator:e=>["top","top-start","top-end","bottom","bottom-start","bottom-end"].includes(e),default:"bottom-start"},fetchSuggestions:{type:Function,default:Ui},popperClass:{type:String,default:""},triggerOnFocus:{type:Boolean,default:!0},selectWhenUnmatched:{type:Boolean,default:!1},hideLoading:{type:Boolean,default:!1},popperAppendToBody:{type:Boolean,default:!0},highlightFirstItem:{type:Boolean,default:!1}},emits:[tu,"input","change","focus","blur","clear","select"],setup(e,t){const n=_s(),l=tt([]),a=tt(-1),o=tt(""),r=tt(!1),i=tt(!1),s=tt(!1),u=tt(null),c=tt(null),d=tt(null),p=ua((()=>"el-autocomplete-"+cs())),f=ua((()=>(Xi(l.value)&&l.value.length>0||s.value)&&r.value)),h=ua((()=>!e.hideLoading&&s.value)),v=()=>{Mt(d.value.update)};An(f,(()=>{o.value=u.value.$el.offsetWidth+"px"})),mn((()=>{u.value.inputOrTextarea.setAttribute("role","textbox"),u.value.inputOrTextarea.setAttribute("aria-autocomplete","list"),u.value.inputOrTextarea.setAttribute("aria-controls","id"),u.value.inputOrTextarea.setAttribute("aria-activedescendant",`${p.value}-item-${a.value}`);const e=c.value.querySelector(".el-autocomplete-suggestion__list");e.setAttribute("role","listbox"),e.setAttribute("id",p.value)})),bn(v);const m=t=>{i.value||(s.value=!0,v(),e.fetchSuggestions(t,(t=>{s.value=!1,i.value||(Xi(t)?(l.value=t,a.value=e.highlightFirstItem?0:-1):zs("ElAutocomplete","autocomplete suggestions must be an array"))})))},g=ko()(m,e.debounce),b=n=>{t.emit("input",n[e.valueKey]),t.emit(tu,n[e.valueKey]),t.emit("select",n),Mt((()=>{l.value=[],a.value=-1}))};return{attrs:n,suggestions:l,highlightedIndex:a,dropdownWidth:o,activated:r,suggestionDisabled:i,loading:s,inputRef:u,regionRef:c,popper:d,id:p,suggestionVisible:f,suggestionLoading:h,getData:m,handleInput:n=>{if(t.emit("input",n),t.emit(tu,n),i.value=!1,!e.triggerOnFocus&&!n)return i.value=!0,void(l.value=[]);g(n)},handleChange:e=>{t.emit("change",e)},handleFocus:n=>{r.value=!0,t.emit("focus",n),e.triggerOnFocus&&g(e.modelValue)},handleBlur:e=>{t.emit("blur",e)},handleClear:()=>{r.value=!1,t.emit(tu,""),t.emit("clear")},handleKeyEnter:()=>{f.value&&a.value>=0&&a.value<l.value.length?b(l.value[a.value]):e.selectWhenUnmatched&&(t.emit("select",{value:e.modelValue}),Mt((()=>{l.value=[],a.value=-1})))},close:()=>{r.value=!1},focus:()=>{u.value.focus()},select:b,highlight:e=>{if(!f.value||s.value)return;if(e<0)return void(a.value=-1);e>=l.value.length&&(e=l.value.length-1);const t=c.value.querySelector(".el-autocomplete-suggestion__wrap"),n=t.querySelectorAll(".el-autocomplete-suggestion__list li")[e],o=t.scrollTop,r=n.offsetTop;r+n.scrollHeight>o+t.clientHeight&&(t.scrollTop+=n.scrollHeight),r<o&&(t.scrollTop-=n.scrollHeight),a.value=e,u.value.inputOrTextarea.setAttribute("aria-activedescendant",`${p.value}-item-${a.value}`)}}}});const Gu={key:0},Xu=Tl("i",{class:"el-icon-loading"},null,-1);Uu.render=function(e,t,n,l,a,o){const r=pl("el-input"),i=pl("el-scrollbar"),s=pl("el-popper"),u=hl("clickoutside");return Cl(),Al(s,{ref:"popper",visible:e.suggestionVisible,"onUpdate:visible":t[3]||(t[3]=t=>e.suggestionVisible=t),placement:e.placement,"popper-class":"el-autocomplete__popper "+e.popperClass,"append-to-body":e.popperAppendToBody,pure:"","manual-mode":"",effect:"light",trigger:"click",transition:"el-zoom-in-top","gpu-acceleration":!1},{trigger:en((()=>[Un(Tl("div",{class:["el-autocomplete",e.$attrs.class],style:e.$attrs.style,role:"combobox","aria-haspopup":"listbox","aria-expanded":e.suggestionVisible,"aria-owns":e.id},[Tl(r,zl({ref:"inputRef"},e.attrs,{"model-value":e.modelValue,onInput:e.handleInput,onChange:e.handleChange,onFocus:e.handleFocus,onBlur:e.handleBlur,onClear:e.handleClear,onKeydown:[t[1]||(t[1]=fo(co((t=>e.highlight(e.highlightedIndex-1)),["prevent"]),["up"])),t[2]||(t[2]=fo(co((t=>e.highlight(e.highlightedIndex+1)),["prevent"]),["down"])),fo(co(e.handleKeyEnter,["prevent"]),["enter"]),fo(co(e.close,["prevent"]),["tab"])]}),fa({_:2},[e.$slots.prepend?{name:"prepend",fn:en((()=>[Zt(e.$slots,"prepend")]))}:void 0,e.$slots.append?{name:"append",fn:en((()=>[Zt(e.$slots,"append")]))}:void 0,e.$slots.prefix?{name:"prefix",fn:en((()=>[Zt(e.$slots,"prefix")]))}:void 0,e.$slots.suffix?{name:"suffix",fn:en((()=>[Zt(e.$slots,"suffix")]))}:void 0]),1040,["model-value","onInput","onChange","onFocus","onBlur","onClear","onKeydown"])],14,["aria-expanded","aria-owns"]),[[u,e.close]])])),default:en((()=>[Tl("div",{ref:"regionRef",class:["el-autocomplete-suggestion",e.suggestionLoading&&"is-loading"],style:{width:e.dropdownWidth,outline:"none"},role:"region"},[Tl(i,{tag:"ul","wrap-class":"el-autocomplete-suggestion__wrap","view-class":"el-autocomplete-suggestion__list"},{default:en((()=>[e.suggestionLoading?(Cl(),Al("li",Gu,[Xu])):(Cl(!0),Al(gl,{key:1},da(e.suggestions,((t,n)=>(Cl(),Al("li",{id:`${e.id}-item-${n}`,key:n,class:{highlighted:e.highlightedIndex===n},role:"option","aria-selected":e.highlightedIndex===n,onClick:n=>e.select(t)},[Zt(e.$slots,"default",{item:t},(()=>[Bl(d(t[e.valueKey]),1)]))],10,["id","aria-selected","onClick"])))),128))])),_:1})],6)])),_:1},8,["visible","placement","popper-class","append-to-body"])},Uu.__file="packages/autocomplete/src/index.vue",Uu.install=e=>{e.component(Uu.name,Uu)};var Ju=Qn({name:"ElAvatar",props:{size:{type:[Number,String],validator:e=>"string"==typeof e?["large","medium","small"].includes(e):"number"==typeof e,default:"large"},shape:{type:String,default:"circle",validator:e=>["circle","square"].includes(e)},icon:String,src:String,alt:String,srcSet:String,fit:{type:String,default:"cover"}},emits:["error"],setup(e,{emit:t}){const n=tt(!1),l=ua((()=>{const{size:t,icon:n,shape:l}=e;let a=["el-avatar"];return t&&"string"==typeof t&&a.push("el-avatar--"+t),n&&a.push("el-avatar--icon"),l&&a.push("el-avatar--"+l),a})),a=ua((()=>{const{size:t}=e;return"number"==typeof t?{height:t+"px",width:t+"px",lineHeight:t+"px"}:{}})),o=ua((()=>({objectFit:e.fit})));return{hasLoadError:n,avatarClass:l,sizeStyle:a,handleError:function(e){n.value=!0,t("error",e)},fitStyle:o}}});Ju.render=function(e,t,n,l,a,o){return Cl(),Al("span",{class:e.avatarClass,style:e.sizeStyle},[!e.src&&!e.srcSet||e.hasLoadError?e.icon?(Cl(),Al("i",{key:1,class:e.icon},null,2)):Zt(e.$slots,"default",{key:2}):(Cl(),Al("img",{key:0,src:e.src,alt:e.alt,srcset:e.srcSet,style:e.fitStyle,onError:t[1]||(t[1]=(...t)=>e.handleError(...t))},null,44,["src","alt","srcset"]))],6)},Ju.__file="packages/avatar/src/index.vue",Ju.install=e=>{e.component(Ju.name,Ju)};const Zu=e=>Math.pow(e,3);var Qu=Qn({name:"ElBacktop",props:{visibilityHeight:{type:Number,default:200},target:{type:String,default:""},right:{type:Number,default:40},bottom:{type:Number,default:40}},emits:["click"],setup(e,t){const n=tt(null),l=tt(null),a=tt(!1),o=ua((()=>e.bottom+"px")),r=ua((()=>e.right+"px")),i=Xr()((()=>{a.value=n.value.scrollTop>=e.visibilityHeight}),300);return mn((()=>{if(l.value=document,n.value=document.documentElement,e.target){if(n.value=document.querySelector(e.target),!n.value)throw new Error("target is not existed: "+e.target);l.value=n.value}As(l.value,"scroll",i)})),yn((()=>{Ss(l.value,"scroll",i)})),{el:n,container:l,visible:a,styleBottom:o,styleRight:r,handleClick:e=>{(()=>{const e=Date.now(),t=n.value.scrollTop,l=window.requestAnimationFrame||(e=>setTimeout(e,16)),a=()=>{const o=(Date.now()-e)/500;var r;o<1?(n.value.scrollTop=t*(1-((r=o)<.5?Zu(2*r)/2:1-Zu(2*(1-r))/2)),l(a)):n.value.scrollTop=0};l(a)})(),t.emit("click",e)}}}});const ec=Tl("i",{class:"el-icon-caret-top"},null,-1);Qu.render=function(e,t,n,l,a,o){return Cl(),Al(Pa,{name:"el-fade-in"},{default:en((()=>[e.visible?(Cl(),Al("div",{key:0,style:{right:e.styleRight,bottom:e.styleBottom},class:"el-backtop",onClick:t[1]||(t[1]=co(((...t)=>e.handleClick(...t)),["stop"]))},[Zt(e.$slots,"default",{},(()=>[ec]))],4)):Pl("v-if",!0)])),_:1})},Qu.__file="packages/backtop/src/index.vue",Qu.install=e=>{e.component(Qu.name,Qu)};var tc=Qn({name:"ElBadge",props:{value:{type:[String,Number],default:""},max:{type:Number,default:99},isDot:Boolean,hidden:Boolean,type:{type:String,default:"primary",validator:e=>["primary","success","warning","info","danger"].includes(e)}},setup:e=>({content:ua((()=>{if(e.isDot)return;const{value:t,max:n}=e;return"number"==typeof t&&"number"==typeof n&&n<t?n+"+":t}))})});const nc={class:"el-badge"};tc.render=function(e,t,n,l,a,o){return Cl(),Al("div",nc,[Zt(e.$slots,"default"),Tl(Pa,{name:"el-zoom-in-center"},{default:en((()=>[Un(Tl("sup",{class:["el-badge__content",["el-badge__content--"+e.type,{"is-fixed":e.$slots.default,"is-dot":e.isDot}]],textContent:d(e.content)},null,10,["textContent"]),[[ho,!e.hidden&&(e.content||0===e.content||e.isDot)]])])),_:1})])},tc.__file="packages/badge/src/index.vue",tc.install=e=>{e.component(tc.name,tc)};var lc=Qn({name:"ElBreadcrumb",props:{separator:{type:String,default:"/"},separatorClass:{type:String,default:""}},setup(e){const t=tt(null);return Fl("breadcrumb",e),mn((()=>{const e=t.value.querySelectorAll(".el-breadcrumb__item");e.length&&e[e.length-1].setAttribute("aria-current","page")})),{breadcrumb:t}}});const ac={ref:"breadcrumb",class:"el-breadcrumb","aria-label":"Breadcrumb",role:"navigation"};lc.render=function(e,t,n,l,a,o){return Cl(),Al("div",ac,[Zt(e.$slots,"default")],512)},lc.__file="packages/breadcrumb/src/index.vue",lc.install=e=>{e.component(lc.name,lc)};var oc=Qn({name:"ElBreadcrumbItem",props:{to:{type:[String,Object],default:""},replace:{type:Boolean,default:!1}},setup(e){const t=tt(null),n=$l("breadcrumb"),l=la().appContext.config.globalProperties.$router;return mn((()=>{t.value.setAttribute("role","link"),t.value.addEventListener("click",(()=>{e.to&&l&&(e.replace?l.replace(e.to):l.push(e.to))}))})),{link:t,separator:null==n?void 0:n.separator,separatorClass:null==n?void 0:n.separatorClass}}});const rc={class:"el-breadcrumb__item"},ic={key:1,class:"el-breadcrumb__separator",role:"presentation"};oc.render=function(e,t,n,l,a,o){return Cl(),Al("span",rc,[Tl("span",{ref:"link",class:["el-breadcrumb__inner",e.to?"is-link":""],role:"link"},[Zt(e.$slots,"default")],2),e.separatorClass?(Cl(),Al("i",{key:0,class:["el-breadcrumb__separator",e.separatorClass]},null,2)):(Cl(),Al("span",ic,d(e.separator),1))])},oc.__file="packages/breadcrumb/src/item.vue",oc.install=e=>{e.component(oc.name,oc)};var sc=Qn({name:"ElButton",props:{type:{type:String,default:"default",validator:e=>["default","primary","success","warning","info","danger","text"].includes(e)},size:{type:String,validator:au},icon:{type:String,default:""},nativeType:{type:String,default:"button",validator:e=>["button","submit","reset"].includes(e)},loading:Boolean,disabled:Boolean,plain:Boolean,autofocus:Boolean,round:Boolean,circle:Boolean},emits:["click"],setup(e,t){const n=ms(),l=$l("elForm",{}),a=$l("elFormItem",{});return{buttonSize:ua((()=>e.size||a.size||n.size)),buttonDisabled:ua((()=>e.disabled||l.disabled)),handleClick:e=>{t.emit("click",e)}}}});const uc={key:0,class:"el-icon-loading"},cc={key:2};sc.render=function(e,t,n,l,a,o){return Cl(),Al("button",{class:["el-button",e.type?"el-button--"+e.type:"",e.buttonSize?"el-button--"+e.buttonSize:"",{"is-disabled":e.buttonDisabled,"is-loading":e.loading,"is-plain":e.plain,"is-round":e.round,"is-circle":e.circle}],disabled:e.buttonDisabled||e.loading,autofocus:e.autofocus,type:e.nativeType,onClick:t[1]||(t[1]=(...t)=>e.handleClick(...t))},[e.loading?(Cl(),Al("i",uc)):Pl("v-if",!0),e.icon&&!e.loading?(Cl(),Al("i",{key:1,class:e.icon},null,2)):Pl("v-if",!0),e.$slots.default?(Cl(),Al("span",cc,[Zt(e.$slots,"default")])):Pl("v-if",!0)],10,["disabled","autofocus","type"])},sc.__file="packages/button/src/button.vue",sc.install=e=>{e.component(sc.name,sc)};var dc=Qn({name:"ElButtonGroup"});const pc={class:"el-button-group"};dc.render=function(e,t,n,l,a,o){return Cl(),Al("div",pc,[Zt(e.$slots,"default")])},dc.__file="packages/button/src/button-group.vue",dc.install=e=>{e.component(dc.name,dc)};let fc={name:"en",el:{colorpicker:{confirm:"OK",clear:"Clear"},datepicker:{now:"Now",today:"Today",cancel:"Cancel",clear:"Clear",confirm:"OK",selectDate:"Select date",selectTime:"Select time",startDate:"Start Date",startTime:"Start Time",endDate:"End Date",endTime:"End Time",prevYear:"Previous Year",nextYear:"Next Year",prevMonth:"Previous Month",nextMonth:"Next Month",year:"",month1:"January",month2:"February",month3:"March",month4:"April",month5:"May",month6:"June",month7:"July",month8:"August",month9:"September",month10:"October",month11:"November",month12:"December",week:"week",weeks:{sun:"Sun",mon:"Mon",tue:"Tue",wed:"Wed",thu:"Thu",fri:"Fri",sat:"Sat"},months:{jan:"Jan",feb:"Feb",mar:"Mar",apr:"Apr",may:"May",jun:"Jun",jul:"Jul",aug:"Aug",sep:"Sep",oct:"Oct",nov:"Nov",dec:"Dec"}},select:{loading:"Loading",noMatch:"No matching data",noData:"No data",placeholder:"Select"},cascader:{noMatch:"No matching data",loading:"Loading",placeholder:"Select",noData:"No data"},pagination:{goto:"Go to",pagesize:"/page",total:"Total {total}",pageClassifier:""},messagebox:{title:"Message",confirm:"OK",cancel:"Cancel",error:"Illegal input"},upload:{deleteTip:"press delete to remove",delete:"Delete",preview:"Preview",continue:"Continue"},table:{emptyText:"No Data",confirmFilter:"Confirm",resetFilter:"Reset",clearFilter:"All",sumText:"Sum"},tree:{emptyText:"No Data"},transfer:{noMatch:"No matching data",noData:"No data",titles:["List 1","List 2"],filterPlaceholder:"Enter keyword",noCheckedFormat:"{total} items",hasCheckedFormat:"{checked}/{total} checked"},image:{error:"FAILED"},pageHeader:{title:"Back"},popconfirm:{confirmButtonText:"Yes",cancelButtonText:"No"}}};function hc(e,t){return e&&t?e.replace(/\{(\w+)\}/g,((e,n)=>t[n])):e}const vc=(e,t)=>{let n;const l=e.split(".");let a=fc;for(let e=0,o=l.length;e<o;e++){if(n=a[l[e]],e===o-1)return hc(n,t);if(!n)return"";a=n}return""},mc={date:"YYYY-MM-DD",week:"gggg[w]ww",year:"YYYY",month:"YYYY-MM",datetime:"YYYY-MM-DD HH:mm:ss",monthrange:"YYYY-MM",daterange:"YYYY-MM-DD",datetimerange:"YYYY-MM-DD HH:mm:ss"},gc={name:{type:[Array,String],default:""},format:{type:String},type:{type:String,default:""},clearable:{type:Boolean,default:!0},clearIcon:{type:String,default:"el-icon-circle-close"},editable:{type:Boolean,default:!0},prefixIcon:{type:String,default:""},size:{type:String,validator:au},readonly:{type:Boolean,default:!1},disabled:{type:Boolean,default:!1},placeholder:{type:String,default:""},modelValue:{type:[Date,Array,String],default:""},rangeSeparator:{type:String,default:"-"},startPlaceholder:String,endPlaceholder:String,defaultValue:{type:[Date,Array]},defaultTime:{type:[Date,Array]},isRange:{type:Boolean,default:!1},disabledHours:{type:Function},disabledMinutes:{type:Function},disabledSeconds:{type:Function},disabledDate:{type:Function},cellClassName:{type:Function},shortcuts:{type:Array,default:()=>[]},arrowControl:{type:Boolean,default:!1},validateEvent:{type:Boolean,default:!0}},bc=function(e,t){const n=e instanceof Date,l=t instanceof Date;return n&&l?e.getTime()===t.getTime():!n&&!l&&e===t},yc=function(e,t){const n=e instanceof Array,l=t instanceof Array;return n&&l?e.length===t.length&&e.every(((e,n)=>bc(e,t[n]))):!n&&!l&&bc(e,t)};var xc=Qn({name:"Picker",components:{ElInput:cu,ElPopper:Ku},directives:{clickoutside:Xs},props:gc,emits:["update:modelValue","change","focus","blur"],setup(e,t){const n=ms(),l=$l("elForm",{}),a=$l("elFormItem",{}),o=tt(null),r=tt(!1),i=tt(!1),s=tt(null);An(r,(n=>{var l;n?s.value=e.modelValue:(C.value=null,t.emit("blur"),A(),e.validateEvent&&(null===(l=a.formItemMitt)||void 0===l||l.emit("el.form.blur")))}));const u=n=>{var l;yc(n,s.value)||(t.emit("change",n),e.validateEvent&&(null===(l=a.formItemMitt)||void 0===l||l.emit("el.form.change",n)))},c=n=>{yc(e.modelValue,n)||t.emit("update:modelValue",n)},d=ua((()=>{if(o.value){const e=k.value?o.value:o.value.$el;return[].slice.call(e.querySelectorAll("input"))}return[]})),p=ua((()=>e.disabled||l.disabled)),f=ua((()=>{let t;return x.value?O.value.getDefaultValue&&(t=O.value.getDefaultValue()):t=Array.isArray(e.modelValue)?e.modelValue.map((e=>Zr()(e))):Zr()(e.modelValue),O.value.getRangeAvaliableTime&&(t=O.value.getRangeAvaliableTime(t)),t})),h=ua((()=>{if(!O.value.panelReady)return;if(!m.value&&x.value)return;if(!r.value&&x.value)return;const e=E(f.value);return Array.isArray(C.value)?[C.value[0]||e&&e[0]||"",C.value[1]||e&&e[1]||""]:null!==C.value?C.value:e?g.value?e.join(", "):e:""})),v=ua((()=>-1!==e.type.indexOf("time"))),m=ua((()=>0===e.type.indexOf("time"))),g=ua((()=>"dates"===e.type)),b=ua((()=>e.prefixIcon||(v.value?"el-icon-time":"el-icon-date"))),y=tt(!1),x=ua((()=>!e.modelValue||Array.isArray(e.modelValue)&&!e.modelValue.length)),k=ua((()=>e.type.indexOf("range")>-1)),w=ua((()=>e.size||a.size||n.size)),C=tt(null),_=()=>{if(C.value){const e=S(h.value);e&&M(e)&&(c(e.toDate()),C.value=null)}""===C.value&&(c(null),u(null),C.value=null)},A=()=>{d.value.forEach((e=>e.blur()))},S=e=>e?O.value.parseUserInput(e):null,E=e=>e?O.value.formatToString(e):null,M=e=>O.value.isValidValue(e),O=tt({});return Fl("EP_PICKER_BASE",{props:e}),{isDatesPicker:g,handleEndChange:()=>{const e=S(C.value&&C.value[1]);if(e){C.value=[h.value[0],E(e)];const t=[f.value&&f.value[0],e];M(t)&&(c(t),C.value=null)}},handleStartChange:()=>{const e=S(C.value&&C.value[0]);if(e){C.value=[E(e),h.value[1]];const t=[e,f.value&&f.value[1]];M(t)&&(c(t),C.value=null)}},handleStartInput:e=>{C.value?C.value=[e.target.value,C.value[1]]:C.value=[e.target.value,null]},handleEndInput:e=>{C.value?C.value=[C.value[0],e.target.value]:C.value=[null,e.target.value]},onUserInput:e=>{C.value=e},handleChange:_,handleKeydown:e=>{const t=e.code;return t===Fs.esc?(r.value=!1,void e.stopPropagation()):t!==Fs.tab?t===Fs.enter?((""===C.value||M(S(h.value)))&&(_(),r.value=!1),void e.stopPropagation()):void(C.value?e.stopPropagation():O.value.handleKeydown&&O.value.handleKeydown(e)):void(k.value?setTimeout((()=>{-1===d.value.indexOf(document.activeElement)&&(r.value=!1,A())}),0):(_(),r.value=!1,e.stopPropagation()))},onClickOutside:()=>{r.value&&(r.value=!1)},pickerSize:w,isRangeInput:k,onMouseLeave:()=>{y.value=!1},onMouseEnter:()=>{e.readonly||p.value||!x.value&&e.clearable&&(y.value=!0)},onClearIconClick:t=>{e.readonly||p.value||y.value&&(t.stopPropagation(),c(null),u(null),y.value=!1,r.value=!1)},showClose:y,triggerClass:b,onPick:(e="",t=!1)=>{let n;r.value=t,n=Array.isArray(e)?e.map((e=>e.toDate())):e?e.toDate():e,C.value=null,c(n),u(n)},handleFocus:n=>{e.readonly||p.value||(r.value=!0,t.emit("focus",n))},pickerVisible:r,pickerActualVisible:i,displayValue:h,parsedValue:f,setSelectionRange:(e,t,n)=>{const l=d.value;l.length&&(n&&"min"!==n?"max"===n&&(l[1].setSelectionRange(e,t),l[1].focus()):(l[0].setSelectionRange(e,t),l[0].focus()))},refContainer:o,pickerDisabled:p,onSetPickerOption:e=>{O.value[e[0]]=e[1],O.value.panelReady=!0}}}});const kc={class:"el-range-separator"};xc.render=function(e,t,n,l,a,o){const r=pl("el-input"),i=pl("el-popper"),s=hl("clickoutside");return Cl(),Al(gl,null,[Pl(" todo popper props align left  "),Pl(" todo popper custom popper-class  "),Pl(" todo bug handleKeydown event twice  "),Tl(i,{ref:"popper",visible:e.pickerVisible,"onUpdate:visible":t[18]||(t[18]=t=>e.pickerVisible=t),"manual-mode":"",effect:"light",pure:"",trigger:"click","popper-class":"el-picker__popper",transition:"el-zoom-in-top","gpu-acceleration":!1,"stop-popper-mouse-event":!1,"append-to-body":"",onBeforeEnter:t[19]||(t[19]=t=>e.pickerActualVisible=!0),onAfterLeave:t[20]||(t[20]=t=>e.pickerActualVisible=!1)},{trigger:en((()=>[e.isRangeInput?Un((Cl(),Al("div",{key:1,ref:"refContainer",class:["el-date-editor el-range-editor el-input__inner",["el-date-editor--"+e.type,e.pickerSize?"el-range-editor--"+e.pickerSize:"",e.pickerDisabled?"is-disabled":"",e.pickerVisible?"is-active":""]],onClick:t[10]||(t[10]=(...t)=>e.handleFocus(...t)),onMouseenter:t[11]||(t[11]=(...t)=>e.onMouseEnter(...t)),onMouseleave:t[12]||(t[12]=(...t)=>e.onMouseLeave(...t)),onKeydown:t[13]||(t[13]=(...t)=>e.handleKeydown(...t))},[Tl("i",{class:["el-input__icon","el-range__icon",e.triggerClass]},null,2),Tl("input",{autocomplete:"off",name:e.name&&e.name[0],placeholder:e.startPlaceholder,value:e.displayValue&&e.displayValue[0],disabled:e.pickerDisabled,readonly:!e.editable||e.readonly,class:"el-range-input",onInput:t[3]||(t[3]=(...t)=>e.handleStartInput(...t)),onChange:t[4]||(t[4]=(...t)=>e.handleStartChange(...t)),onFocus:t[5]||(t[5]=(...t)=>e.handleFocus(...t))},null,40,["name","placeholder","value","disabled","readonly"]),Zt(e.$slots,"range-separator",{},(()=>[Tl("span",kc,d(e.rangeSeparator),1)])),Tl("input",{autocomplete:"off",name:e.name&&e.name[1],placeholder:e.endPlaceholder,value:e.displayValue&&e.displayValue[1],disabled:e.pickerDisabled,readonly:!e.editable||e.readonly,class:"el-range-input",onFocus:t[6]||(t[6]=(...t)=>e.handleFocus(...t)),onInput:t[7]||(t[7]=(...t)=>e.handleEndInput(...t)),onChange:t[8]||(t[8]=(...t)=>e.handleEndChange(...t))},null,40,["name","placeholder","value","disabled","readonly"]),Tl("i",{class:[[e.showClose?""+e.clearIcon:""],"el-input__icon el-range__close-icon"],onClick:t[9]||(t[9]=(...t)=>e.onClearIconClick(...t))},null,2)],34)),[[s,e.onClickOutside]]):Un((Cl(),Al(r,{key:0,ref:"refContainer","model-value":e.displayValue,name:e.name,size:e.pickerSize,disabled:e.pickerDisabled,placeholder:e.placeholder,class:["el-date-editor","el-date-editor--"+e.type],readonly:!e.editable||e.readonly||e.isDatesPicker||"week"===e.type,onInput:e.onUserInput,onFocus:e.handleFocus,onKeydown:e.handleKeydown,onChange:e.handleChange,onMouseenter:e.onMouseEnter,onMouseleave:e.onMouseLeave},{prefix:en((()=>[Tl("i",{class:["el-input__icon",e.triggerClass],onClick:t[1]||(t[1]=(...t)=>e.handleFocus(...t))},null,2)])),suffix:en((()=>[Tl("i",{class:["el-input__icon",[e.showClose?""+e.clearIcon:""]],onClick:t[2]||(t[2]=(...t)=>e.onClearIconClick(...t))},null,2)])),_:1},8,["model-value","name","size","disabled","placeholder","class","readonly","onInput","onFocus","onKeydown","onChange","onMouseenter","onMouseleave"])),[[s,e.onClickOutside]])])),default:en((()=>[Zt(e.$slots,"default",zl({visible:e.pickerVisible,"actual-visible":e.pickerActualVisible,"parsed-value":e.parsedValue,format:e.format,type:e.type,"default-value":e.defaultValue},e.$attrs,{onPick:t[14]||(t[14]=(...t)=>e.onPick(...t)),onSelectRange:t[15]||(t[15]=(...t)=>e.setSelectionRange(...t)),onSetPickerOption:t[16]||(t[16]=(...t)=>e.onSetPickerOption(...t)),onMousedown:t[17]||(t[17]=co((()=>{}),["stop"]))}))])),_:1},8,["visible"])],64)},xc.__file="packages/time-picker/src/common/picker.vue";const wc=(e,t,n)=>{const l=[],a=t&&n();for(let t=0;t<e;t++)l[t]=!!a&&a.includes(t);return l},Cc=e=>e.map(((e,t)=>e||t)).filter((e=>!0!==e)),_c=(e,t,n)=>({getHoursList:(t,n)=>wc(24,e,(()=>e(t,n))),getMinutesList:(e,n,l)=>wc(60,t,(()=>t(e,n,l))),getSecondsList:(e,t,l,a)=>wc(60,n,(()=>n(e,t,l,a)))}),Ac=(e,t,n)=>{const{getHoursList:l,getMinutesList:a,getSecondsList:o}=_c(e,t,n);return{getAvaliableHours:(e,t)=>Cc(l(e,t)),getAvaliableMinutes:(e,t,n)=>Cc(a(e,t,n)),getAvaliableSeconds:(e,t,n,l)=>Cc(o(e,t,n,l))}};var Sc=Qn({directives:{repeatClick:Js},components:{ElScrollbar:Au},props:{role:{type:String,required:!0},spinnerDate:{type:Object,required:!0},showSeconds:{type:Boolean,default:!0},arrowControl:Boolean,amPmMode:{type:String,default:""},disabledHours:{type:Function},disabledMinutes:{type:Function},disabledSeconds:{type:Function}},emits:["change","select-range","set-option"],setup(e,t){const n=tt(null),l=tt(null),a=tt(null),o=tt(null),r={hours:l,minutes:a,seconds:o},i=ua((()=>{const t=["hours","minutes","seconds"];return e.showSeconds?t:t.slice(0,2)})),s=ua((()=>e.spinnerDate.hour())),u=ua((()=>e.spinnerDate.minute())),c=ua((()=>e.spinnerDate.second())),d=ua((()=>({hours:s,minutes:u,seconds:c}))),p=ua((()=>E(e.role))),f=ua((()=>M(s.value,e.role))),h=ua((()=>O(s.value,u.value,e.role))),v=ua((()=>({hours:p,minutes:f,seconds:h}))),m=ua((()=>{const e=s.value;return[e>0?e-1:void 0,e,e<23?e+1:void 0]})),g=ua((()=>{const e=u.value;return[e>0?e-1:void 0,e,e<59?e+1:void 0]})),b=ua((()=>{const e=c.value;return[e>0?e-1:void 0,e,e<59?e+1:void 0]})),y=ua((()=>({hours:m,minutes:g,seconds:b}))),x=e=>{"hours"===e?t.emit("select-range",0,2):"minutes"===e?t.emit("select-range",3,5):"seconds"===e&&t.emit("select-range",6,8),n.value=e},k=e=>{C(e,d.value[e].value)},w=()=>{k("hours"),k("minutes"),k("seconds")},C=(t,n)=>{if(e.arrowControl)return;const l=r[t];l.value&&(l.value.$el.querySelector(".el-scrollbar__wrap").scrollTop=Math.max(0,n*_(t)))},_=e=>r[e].value.$el.querySelector("li").offsetHeight,A=e=>{n.value||x("hours");const t=n.value;let l=d.value[t].value;const a="hours"===n.value?24:60;l=(l+e+a)%a,S(t,l),C(t,l),Mt((()=>x(n.value)))},S=(n,l)=>{if(!v.value[n].value[l])switch(n){case"hours":t.emit("change",e.spinnerDate.hour(l).minute(u.value).second(c.value));break;case"minutes":t.emit("change",e.spinnerDate.hour(s.value).minute(l).second(c.value));break;case"seconds":t.emit("change",e.spinnerDate.hour(s.value).minute(u.value).second(l))}};mn((()=>{Mt((()=>{!e.arrowControl&&(()=>{const e=e=>{r[e].value&&(r[e].value.$el.querySelector(".el-scrollbar__wrap").onscroll=()=>{(e=>{const t=Math.min(Math.round((r[e].value.$el.querySelector(".el-scrollbar__wrap").scrollTop-(.5*(e=>r[e].value.$el.offsetHeight)(e)-10)/_(e)+3)/_(e)),"hours"===e?23:59);S(e,t)})(e)})};e("hours"),e("minutes"),e("seconds")})(),w(),"start"===e.role&&x("hours")}))})),t.emit("set-option",[e.role+"_scrollDown",A]),t.emit("set-option",[e.role+"_emitSelectRange",x]);const{getHoursList:E,getMinutesList:M,getSecondsList:O}=_c(e.disabledHours,e.disabledMinutes,e.disabledSeconds);return An((()=>e.spinnerDate),w),{getRefId:e=>`list${e.charAt(0).toUpperCase()+e.slice(1)}Ref`,spinnerItems:i,currentScrollbar:n,hours:s,minutes:u,seconds:c,hoursList:p,minutesList:f,arrowHourList:m,arrowMinuteList:g,arrowSecondList:b,getAmPmFlag:t=>{if(!e.amPmMode)return"";let n=t<12?" am":" pm";return"A"===e.amPmMode&&(n=n.toUpperCase()),n},emitSelectRange:x,adjustCurrentSpinner:k,typeItemHeight:_,listHoursRef:l,listMinutesRef:a,listSecondsRef:o,onIncreaseClick:()=>{A(1)},onDecreaseClick:()=>{A(-1)},handleClick:(e,{value:t,disabled:n})=>{n||(S(e,t),x(e),C(e,t))},secondsList:h,timePartsMap:d,arrowListMap:y,listMap:v}}});const Ec={class:"el-time-spinner__arrow el-icon-arrow-up"},Mc={class:"el-time-spinner__arrow el-icon-arrow-down"},Oc={class:"el-time-spinner__list"};Sc.render=function(e,t,n,l,a,o){const r=pl("el-scrollbar"),i=hl("repeat-click");return Cl(),Al("div",{class:["el-time-spinner",{"has-seconds":e.showSeconds}]},[e.arrowControl?Pl("v-if",!0):(Cl(!0),Al(gl,{key:0},da(e.spinnerItems,(t=>(Cl(),Al(r,{key:t,ref:e.getRefId(t),class:"el-time-spinner__wrapper","wrap-style":"max-height: inherit;","view-class":"el-time-spinner__list",noresize:"",tag:"ul",onMouseenter:n=>e.emitSelectRange(t),onMousemove:n=>e.adjustCurrentSpinner(t)},{default:en((()=>[(Cl(!0),Al(gl,null,da(e.listMap[t].value,((n,l)=>(Cl(),Al("li",{key:l,class:["el-time-spinner__item",{active:l===e.timePartsMap[t].value,disabled:n}],onClick:a=>e.handleClick(t,{value:l,disabled:n})},["hours"===t?(Cl(),Al(gl,{key:0},[Bl(d(("0"+(e.amPmMode?l%12||12:l)).slice(-2))+d(e.getAmPmFlag(l)),1)],64)):(Cl(),Al(gl,{key:1},[Bl(d(("0"+l).slice(-2)),1)],64))],10,["onClick"])))),128))])),_:2},1032,["onMouseenter","onMousemove"])))),128)),e.arrowControl?(Cl(!0),Al(gl,{key:1},da(e.spinnerItems,(t=>(Cl(),Al("div",{key:t,class:"el-time-spinner__wrapper is-arrow",onMouseenter:n=>e.emitSelectRange(t)},[Un(Tl("i",Ec,null,512),[[i,e.onDecreaseClick]]),Un(Tl("i",Mc,null,512),[[i,e.onIncreaseClick]]),Tl("ul",Oc,[(Cl(!0),Al(gl,null,da(e.arrowListMap[t].value,((n,l)=>(Cl(),Al("li",{key:l,class:["el-time-spinner__item",{active:n===e.timePartsMap[t].value,disabled:e.listMap[t].value[n]}]},d(void 0===n?"":("0"+(e.amPmMode?n%12||12:n)).slice(-2)+e.getAmPmFlag(n)),3)))),128))])],40,["onMouseenter"])))),128)):Pl("v-if",!0)],2)},Sc.__file="packages/time-picker/src/time-picker-com/basic-time-spinner.vue";var Dc=Qn({components:{TimeSpinner:Sc},props:{visible:Boolean,actualVisible:{type:Boolean,default:void 0},datetimeRole:{type:String},parsedValue:{type:[Object,String]},format:{type:String,default:""}},emits:["pick","select-range","set-picker-option"],setup(e,t){const n=tt([0,2]),l=tt(e.parsedValue),a=ua((()=>void 0===e.actualVisible?"el-zoom-in-top":"")),o=ua((()=>e.format.includes("ss"))),r=ua((()=>e.format.includes("A")?"A":e.format.includes("a")?"a":"")),i=t=>{const n={hour:v,minute:m,second:g};let l=t;return["hour","minute","second"].forEach((t=>{if(n[t]){let a;const o=n[t];a="minute"===t?o(l.hour(),e.datetimeRole):"second"===t?o(l.hour(),l.minute(),e.datetimeRole):o(e.datetimeRole),a&&a.length&&!a.includes(l[t]())&&(l=l[t](a[0]))}})),l};t.emit("set-picker-option",["isValidValue",e=>{const t=Zr()(e),n=i(t);return t.isSame(n)}]),t.emit("set-picker-option",["formatToString",t=>t?t.format(e.format):null]),t.emit("set-picker-option",["parseUserInput",t=>t?Zr()(t,e.format):null]),t.emit("set-picker-option",["handleKeydown",e=>{const t=e.code;if(t===Fs.left||t===Fs.right)return(e=>{const t=[0,3].concat(o.value?[6]:[]),l=["hours","minutes"].concat(o.value?["seconds"]:[]),a=(t.indexOf(n.value[0])+e+t.length)%t.length;s.start_emitSelectRange(l[a])})(t===Fs.left?-1:1),void e.preventDefault();if(t===Fs.up||t===Fs.down){const n=t===Fs.up?-1:1;return s.min_scrollDown(n),void e.preventDefault()}}]),t.emit("set-picker-option",["getRangeAvaliableTime",i]),t.emit("set-picker-option",["getDefaultValue",()=>Zr()(h)]);const s={},u=$l("EP_PICKER_BASE"),{arrowControl:c,disabledHours:d,disabledMinutes:p,disabledSeconds:f,defaultValue:h}=u.props,{getAvaliableHours:v,getAvaliableMinutes:m,getAvaliableSeconds:g}=Ac(d,p,f);return{transitionName:a,arrowControl:c,onSetOption:e=>{s[e[0]]=e[1]},t:vc,handleConfirm:(n=!1,l)=>{l||t.emit("pick",e.parsedValue,n)},handleChange:n=>{if(!e.visible)return;const l=i(n).millisecond(0);t.emit("pick",l,!0)},setSelectionRange:(e,l)=>{t.emit("select-range",e,l),n.value=[e,l]},amPmMode:r,showSeconds:o,handleCancel:()=>{t.emit("pick",l.value,!1)},disabledHours:d,disabledMinutes:p,disabledSeconds:f}}});const Tc={key:0,class:"el-time-panel"},Nc={class:"el-time-panel__footer"};Dc.render=function(e,t,n,l,a,o){const r=pl("time-spinner");return Cl(),Al(Pa,{name:e.transitionName},{default:en((()=>[e.actualVisible||e.visible?(Cl(),Al("div",Tc,[Tl("div",{class:["el-time-panel__content",{"has-seconds":e.showSeconds}]},[Tl(r,{ref:"spinner",role:e.datetimeRole||"start","arrow-control":e.arrowControl,"show-seconds":e.showSeconds,"am-pm-mode":e.amPmMode,"spinner-date":e.parsedValue,"disabled-hours":e.disabledHours,"disabled-minutes":e.disabledMinutes,"disabled-seconds":e.disabledSeconds,onChange:e.handleChange,onSetOption:e.onSetOption,onSelectRange:e.setSelectionRange},null,8,["role","arrow-control","show-seconds","am-pm-mode","spinner-date","disabled-hours","disabled-minutes","disabled-seconds","onChange","onSetOption","onSelectRange"])],2),Tl("div",Nc,[Tl("button",{type:"button",class:"el-time-panel__btn cancel",onClick:t[1]||(t[1]=(...t)=>e.handleCancel(...t))},d(e.t("el.datepicker.cancel")),1),Tl("button",{type:"button",class:"el-time-panel__btn confirm",onClick:t[2]||(t[2]=t=>e.handleConfirm())},d(e.t("el.datepicker.confirm")),1)])])):Pl("v-if",!0)])),_:1},8,["name"])},Dc.__file="packages/time-picker/src/time-picker-com/panel-time-pick.vue";const Bc=(e,t)=>{const n=[];for(let l=e;l<=t;l++)n.push(l);return n};var Pc=Qn({components:{TimeSpinner:Sc},props:{visible:Boolean,actualVisible:Boolean,parsedValue:{type:[Array,String]},format:{type:String,default:""}},emits:["pick","select-range","set-picker-option"],setup(e,t){const n=ua((()=>e.parsedValue[0])),l=ua((()=>e.parsedValue[1])),a=tt(e.parsedValue),o=ua((()=>e.format.includes("ss"))),r=ua((()=>e.format.includes("A")?"A":e.format.includes("a")?"a":"")),i=tt([]),s=tt([]),u=(e,n)=>{t.emit("pick",[e,n],!0)},c=ua((()=>n.value>l.value)),d=tt([0,2]),p=ua((()=>o.value?11:8)),f=(e,t)=>{const a=_?_(e):[],o="start"===e,r=(t||(o?l.value:n.value)).hour(),i=o?Bc(r+1,23):Bc(0,r-1);return ai()(a,i)},h=(e,t,a)=>{const o=A?A(e,t):[],r="start"===t,i=a||(r?l.value:n.value);if(e!==i.hour())return o;const s=i.minute(),u=r?Bc(s+1,59):Bc(0,s-1);return ai()(o,u)},v=(e,t,a,o)=>{const r=S?S(e,t,a):[],i="start"===a,s=o||(i?l.value:n.value),u=s.hour(),c=s.minute();if(e!==u||t!==c)return r;const d=s.second(),p=i?Bc(d+1,59):Bc(0,d-1);return ai()(r,p)},m=e=>e.map(((t,n)=>x(e[0],e[1],0===n?"start":"end"))),{getAvaliableHours:g,getAvaliableMinutes:b,getAvaliableSeconds:y}=Ac(f,h,v),x=(e,t,n)=>{const l={hour:g,minute:b,second:y},a="start"===n;let o=a?e:t;const r=a?t:e;return["hour","minute","second"].forEach((e=>{if(l[e]){let t;const i=l[e];if(t="minute"===e?i(o.hour(),n,r):"second"===e?i(o.hour(),o.minute(),n,r):i(n,r),t&&t.length&&!t.includes(o[e]())){const n=a?0:t.length-1;o=o[e](t[n])}}})),o};t.emit("set-picker-option",["formatToString",t=>t?Array.isArray(t)?t.map((t=>t.format(e.format))):t.format(e.format):null]),t.emit("set-picker-option",["parseUserInput",t=>t?Array.isArray(t)?t.map((t=>Zr()(t,e.format))):Zr()(t,e.format):null]),t.emit("set-picker-option",["isValidValue",e=>{const t=e.map((e=>Zr()(e))),n=m(t);return t[0].isSame(n[0])&&t[1].isSame(n[1])}]),t.emit("set-picker-option",["handleKeydown",e=>{const t=e.code;if(t===Fs.left||t===Fs.right)return(e=>{const t=o.value?[0,3,6,11,14,17]:[0,3,8,11],n=["hours","minutes"].concat(o.value?["seconds"]:[]),l=(t.indexOf(d.value[0])+e+t.length)%t.length,a=t.length/2;l<a?k.start_emitSelectRange(n[l]):k.end_emitSelectRange(n[l-a])})(t===Fs.left?-1:1),void e.preventDefault();if(t===Fs.up||t===Fs.down){const n=t===Fs.up?-1:1,l=d.value[0]<p.value?"start":"end";return k[l+"_scrollDown"](n),void e.preventDefault()}}]),t.emit("set-picker-option",["getDefaultValue",()=>Array.isArray(E)?E.map((e=>Zr()(e))):[Zr()(E),Zr()(E).add(60,"m")]]),t.emit("set-picker-option",["getRangeAvaliableTime",m]);const k={},w=$l("EP_PICKER_BASE"),{arrowControl:C,disabledHours:_,disabledMinutes:A,disabledSeconds:S,defaultValue:E}=w.props;return{arrowControl:C,onSetOption:e=>{k[e[0]]=e[1]},setMaxSelectionRange:(e,n)=>{t.emit("select-range",e,n,"max"),d.value=[e+p.value,n+p.value]},setMinSelectionRange:(e,n)=>{t.emit("select-range",e,n,"min"),d.value=[e,n]},btnConfirmDisabled:c,handleCancel:()=>{t.emit("pick",a.value,null)},handleConfirm:(e=!1)=>{t.emit("pick",[n.value,l.value],e)},t:vc,showSeconds:o,minDate:n,maxDate:l,amPmMode:r,handleMinChange:e=>{u(e.millisecond(0),l.value)},handleMaxChange:e=>{u(n.value,e.millisecond(0))},minSelectableRange:i,maxSelectableRange:s,disabledHours_:f,disabledMinutes_:h,disabledSeconds_:v}}});const Vc={key:0,class:"el-time-range-picker el-picker-panel"},Ic={class:"el-time-range-picker__content"},Lc={class:"el-time-range-picker__cell"},zc={class:"el-time-range-picker__header"},Fc={class:"el-time-range-picker__cell"},$c={class:"el-time-range-picker__header"},Rc={class:"el-time-panel__footer"};Pc.render=function(e,t,n,l,a,o){const r=pl("time-spinner");return e.actualVisible?(Cl(),Al("div",Vc,[Tl("div",Ic,[Tl("div",Lc,[Tl("div",zc,d(e.t("el.datepicker.startTime")),1),Tl("div",{class:[{"has-seconds":e.showSeconds,"is-arrow":e.arrowControl},"el-time-range-picker__body el-time-panel__content"]},[Tl(r,{ref:"minSpinner",role:"start","show-seconds":e.showSeconds,"am-pm-mode":e.amPmMode,"arrow-control":e.arrowControl,"spinner-date":e.minDate,"disabled-hours":e.disabledHours_,"disabled-minutes":e.disabledMinutes_,"disabled-seconds":e.disabledSeconds_,onChange:e.handleMinChange,onSetOption:e.onSetOption,onSelectRange:e.setMinSelectionRange},null,8,["show-seconds","am-pm-mode","arrow-control","spinner-date","disabled-hours","disabled-minutes","disabled-seconds","onChange","onSetOption","onSelectRange"])],2)]),Tl("div",Fc,[Tl("div",$c,d(e.t("el.datepicker.endTime")),1),Tl("div",{class:[{"has-seconds":e.showSeconds,"is-arrow":e.arrowControl},"el-time-range-picker__body el-time-panel__content"]},[Tl(r,{ref:"maxSpinner",role:"end","show-seconds":e.showSeconds,"am-pm-mode":e.amPmMode,"arrow-control":e.arrowControl,"spinner-date":e.maxDate,"disabled-hours":e.disabledHours_,"disabled-minutes":e.disabledMinutes_,"disabled-seconds":e.disabledSeconds_,onChange:e.handleMaxChange,onSetOption:e.onSetOption,onSelectRange:e.setMaxSelectionRange},null,8,["show-seconds","am-pm-mode","arrow-control","spinner-date","disabled-hours","disabled-minutes","disabled-seconds","onChange","onSetOption","onSelectRange"])],2)])]),Tl("div",Rc,[Tl("button",{type:"button",class:"el-time-panel__btn cancel",onClick:t[1]||(t[1]=t=>e.handleCancel())},d(e.t("el.datepicker.cancel")),1),Tl("button",{type:"button",class:"el-time-panel__btn confirm",disabled:e.btnConfirmDisabled,onClick:t[2]||(t[2]=t=>e.handleConfirm())},d(e.t("el.datepicker.confirm")),9,["disabled"])])])):Pl("v-if",!0)},Pc.__file="packages/time-picker/src/time-picker-com/panel-time-range.vue",Zr().extend(ni());var jc=Qn({name:"ElTimePicker",install:null,props:Object.assign(Object.assign({},gc),{isRange:{type:Boolean,default:!1}}),setup(e,t){const n=e.isRange?"timerange":"time",l=e.isRange?Pc:Dc;return()=>ca(xc,Object.assign(Object.assign({format:"HH:mm:ss"},e),{type:n,"onUpdate:modelValue":e=>t.emit("update:modelValue",e)}),{default:e=>ca(l,e)})}});const Hc=e=>Array.from(Array(e).keys()),Wc=e=>e.replace(/\W?m{1,2}|\W?ZZ/g,"").replace(/\W?h{1,2}|\W?s{1,3}|\W?a/gi,"").trim(),qc=e=>e.replace(/\W?D{1,2}|\W?Do|\W?d{1,4}|\W?M{1,4}|\W?Y{2,4}/g,"").trim();jc.install=e=>{e.component(jc.name,jc)},Zr().extend(ei());var Yc=Qn({props:{selectedDay:{type:Object},range:{type:Array},date:{type:Object},hideHeader:{type:Boolean}},emits:["pick"],setup(e,t){const n=tt(Zr()().localeData().weekdaysShort()),l=Zr()(),a=l.$locale().weekStart||0,o=(t,n)=>{let l;return l="prev"===n?e.date.startOf("month").subtract(1,"month").date(t):"next"===n?e.date.startOf("month").add(1,"month").date(t):e.date.date(t),l},r=ua((()=>e.range&&e.range.length)),i=ua((()=>{let t=[];if(r.value){const[n,l]=e.range,a=Hc(l.date()-n.date()+1).map(((e,t)=>({text:n.date()+t,type:"current"})));let o=a.length%7;o=0===o?0:7-o;const r=Hc(o).map(((e,t)=>({text:t+1,type:"next"})));t=a.concat(r)}else{const n=e.date.startOf("month").day()||7;t=[...((e,t)=>{const n=e.subtract(1,"month").endOf("month").date();return Hc(t).map(((e,l)=>n-(t-l-1)))})(e.date,n-a).map((e=>({text:e,type:"prev"}))),...(e=>{const t=e.daysInMonth();return Hc(t).map(((e,t)=>t+1))})(e.date).map((e=>({text:e,type:"current"})))];const l=Hc(42-t.length).map(((e,t)=>({text:t+1,type:"next"})));t=t.concat(l)}return(e=>Hc(e.length/7).map(((t,n)=>{const l=7*n;return e.slice(l,l+7)})))(t)})),s=ua((()=>{const e=a;return 0===e?n.value:n.value.slice(e).concat(n.value.slice(0,e))}));return{isInRange:r,weekDays:s,rows:i,getCellClass:({text:t,type:n})=>{const a=[n];if("current"===n){const r=o(t,n);r.isSame(e.selectedDay,"day")&&a.push("is-selected"),r.isSame(l,"day")&&a.push("is-today")}return a},pickDay:({text:e,type:n})=>{const l=o(e,n);t.emit("pick",l)},getSlotData:({text:t,type:n})=>{const l=o(t,n);return{isSelected:l.isSame(e.selectedDay),type:n+"-month",day:l.format("YYYY-MM-DD"),date:l.toDate()}}}}});const Kc={key:0},Uc={class:"el-calendar-day"};Yc.render=function(e,t,n,l,a,o){return Cl(),Al("table",{class:{"el-calendar-table":!0,"is-range":e.isInRange},cellspacing:"0",cellpadding:"0"},[e.hideHeader?Pl("v-if",!0):(Cl(),Al("thead",Kc,[(Cl(!0),Al(gl,null,da(e.weekDays,(e=>(Cl(),Al("th",{key:e},d(e),1)))),128))])),Tl("tbody",null,[(Cl(!0),Al(gl,null,da(e.rows,((t,n)=>(Cl(),Al("tr",{key:n,class:{"el-calendar-table__row":!0,"el-calendar-table__row--hide-border":0===n&&e.hideHeader}},[(Cl(!0),Al(gl,null,da(t,((t,n)=>(Cl(),Al("td",{key:n,class:e.getCellClass(t),onClick:n=>e.pickDay(t)},[Tl("div",Uc,[Zt(e.$slots,"dateCell",{data:e.getSlotData(t)},(()=>[Tl("span",null,d(t.text),1)]))])],10,["onClick"])))),128))],2)))),128))])],2)},Yc.__file="packages/calendar/src/date-table.vue";var Gc=Qn({name:"ElCalendar",components:{DateTable:Yc,ElButton:sc,ElButtonGroup:dc},props:{modelValue:{type:Date},range:{type:Array,validator:e=>!!Array.isArray(e)&&2===e.length&&e.every((e=>e instanceof Date))}},emits:["input","update:modelValue"],setup(e,t){const n=tt(null),l=Zr()(),a=ua((()=>u.value.subtract(1,"month"))),o=ua((()=>Zr()(u.value).format("YYYY-MM"))),r=ua((()=>u.value.add(1,"month"))),i=ua((()=>{const e="el.datepicker.month"+u.value.format("M");return`${u.value.year()} ${vc("el.datepicker.year")} ${vc(e)}`})),s=ua({get:()=>e.modelValue?u.value:n.value,set(e){n.value=e;const l=e.toDate();t.emit("input",l),t.emit("update:modelValue",l)}}),u=ua((()=>e.modelValue?Zr()(e.modelValue):s.value?s.value:c.value.length?c.value[0][0]:l)),c=ua((()=>{if(!e.range)return[];const t=e.range.map((e=>Zr()(e))),[n,l]=t;if(n.isAfter(l))return console.warn("[ElementCalendar]end time should be greater than start time"),[];if(n.isSame(l,"month"))return[[n.startOf("week"),l.endOf("week")]];{if(n.add(1,"month").month()!==l.month())return console.warn("[ElementCalendar]start time and end time interval must not exceed two months"),[];const e=l.startOf("month"),t=e.startOf("week");let a=e;return e.isSame(t,"month")||(a=e.endOf("week").add(1,"day")),[[n.startOf("week"),n.endOf("month")],[a,l.endOf("week")]]}})),d=e=>{s.value=e};return{selectedDay:n,curMonthDatePrefix:o,i18nDate:i,realSelectedDay:s,date:u,validatedRange:c,pickDay:d,selectDate:e=>{let t;t="prev-month"===e?a.value:"next-month"===e?r.value:l,t.isSame(u.value,"day")||d(t)},t:vc}}});const Xc={class:"el-calendar"},Jc={class:"el-calendar__header"},Zc={class:"el-calendar__title"},Qc={key:0,class:"el-calendar__button-group"},ed={key:0,class:"el-calendar__body"},td={key:1,class:"el-calendar__body"};Gc.render=function(e,t,n,l,a,o){const r=pl("el-button"),i=pl("el-button-group"),s=pl("date-table");return Cl(),Al("div",Xc,[Tl("div",Jc,[Tl("div",Zc,d(e.i18nDate),1),0===e.validatedRange.length?(Cl(),Al("div",Qc,[Tl(i,null,{default:en((()=>[Tl(r,{size:"mini",onClick:t[1]||(t[1]=t=>e.selectDate("prev-month"))},{default:en((()=>[Bl(d(e.t("el.datepicker.prevMonth")),1)])),_:1}),Tl(r,{size:"mini",onClick:t[2]||(t[2]=t=>e.selectDate("today"))},{default:en((()=>[Bl(d(e.t("el.datepicker.today")),1)])),_:1}),Tl(r,{size:"mini",onClick:t[3]||(t[3]=t=>e.selectDate("next-month"))},{default:en((()=>[Bl(d(e.t("el.datepicker.nextMonth")),1)])),_:1})])),_:1})])):Pl("v-if",!0)]),0===e.validatedRange.length?(Cl(),Al("div",ed,[Tl(s,{date:e.date,"selected-day":e.realSelectedDay,onPick:e.pickDay},fa({_:2},[e.$slots.dateCell?{name:"dateCell",fn:en((t=>[Zt(e.$slots,"dateCell",t)]))}:void 0]),1032,["date","selected-day","onPick"])])):(Cl(),Al("div",td,[(Cl(!0),Al(gl,null,da(e.validatedRange,((t,n)=>(Cl(),Al(s,{key:n,date:t[0],"selected-day":e.realSelectedDay,range:t,"hide-header":0!==n,onPick:e.pickDay},fa({_:2},[e.$slots.dateCell?{name:"dateCell",fn:en((t=>[Zt(e.$slots,"dateCell",t)]))}:void 0]),1032,["date","selected-day","range","hide-header","onPick"])))),128))]))])},Gc.__file="packages/calendar/src/index.vue",Gc.install=e=>{e.component(Gc.name,Gc)};var nd=Qn({name:"ElCard",props:{header:{type:String,default:""},bodyStyle:{type:[String,Object,Array],default:""},shadow:{type:String,default:""}}});const ld={key:0,class:"el-card__header"};nd.render=function(e,t,n,l,a,o){return Cl(),Al("div",null,[Tl("div",{class:["el-card",e.shadow?"is-"+e.shadow+"-shadow":"is-always-shadow"]},[e.$slots.header||e.header?(Cl(),Al("div",ld,[Zt(e.$slots,"header",{},(()=>[Bl(d(e.header),1)]))])):Pl("v-if",!0),Tl("div",{class:"el-card__body",style:e.bodyStyle},[Zt(e.$slots,"default")],4)],2)])},nd.__file="packages/card/src/index.vue",nd.install=e=>{e.component(nd.name,nd)};var ad=Qn({name:"ElCarousel",props:{initialIndex:{type:Number,default:0},height:{type:String,default:""},trigger:{type:String,default:"hover"},autoplay:{type:Boolean,default:!0},interval:{type:Number,default:3e3},indicatorPosition:{type:String,default:""},indicator:{type:Boolean,default:!0},arrow:{type:String,default:"hover"},type:{type:String,default:""},loop:{type:Boolean,default:!0},direction:{type:String,default:"horizontal",validator:e=>["horizontal","vertical"].includes(e)}},emits:["change"],setup(e,{emit:t}){const n=Ye({activeIndex:-1,containerWidth:0,timer:null,hover:!1}),l=tt(null),a=tt([]),o=tt(0),r=tt(0),i=ua((()=>"never"!==e.arrow&&"vertical"!==e.direction)),s=ua((()=>a.value.some((e=>e.label.toString().length>0)))),u=ua((()=>{const t=["el-carousel","el-carousel--"+e.direction];return"card"===e.type&&t.push("el-carousel--card"),t})),c=ua((()=>{const t=["el-carousel__indicators","el-carousel__indicators--"+e.direction];return s.value&&t.push("el-carousel__indicators--labels"),"outside"!==e.indicatorPosition&&"card"!==e.type||t.push("el-carousel__indicators--outside"),t})),d=Xr()((e=>{m(e)}),300,{trailing:!0}),p=Xr()((t=>{!function(t){"hover"===e.trigger&&t!==n.activeIndex&&(n.activeIndex=t)}(t)}),300);function f(){n.timer&&(clearInterval(n.timer),n.timer=null)}function h(){e.interval<=0||!e.autoplay||n.timer||(n.timer=setInterval((()=>v()),e.interval))}const v=()=>{n.activeIndex<a.value.length-1?n.activeIndex=n.activeIndex+1:e.loop&&(n.activeIndex=0)};function m(t){if("string"==typeof t){const e=a.value.filter((e=>e.name===t));e.length>0&&(t=a.value.indexOf(e[0]))}if(t=Number(t),isNaN(t)||t!==Math.floor(t))return void console.warn("[Element Warn][Carousel]index must be an integer.");let l=a.value.length;const o=n.activeIndex;n.activeIndex=t<0?e.loop?l-1:0:t>=l?e.loop?0:l-1:t,o===n.activeIndex&&g(o)}function g(e){a.value.forEach(((t,l)=>{t.translateItem(l,n.activeIndex,e)}))}return An((()=>n.activeIndex),((e,n)=>{g(n),n>-1&&t("change",e,n)})),An((()=>e.autoplay),(e=>{e?h():f()})),An((()=>e.loop),(()=>{m(n.activeIndex)})),mn((()=>{Mt((()=>{xu(l.value,g),l.value&&(o.value=l.value.offsetWidth,r.value=l.value.offsetHeight),e.initialIndex<a.value.length&&e.initialIndex>=0&&(n.activeIndex=e.initialIndex),h()}))})),yn((()=>{l.value&&ku(l.value,g),f()})),Fl("injectCarouselScope",{direction:e.direction,offsetWidth:o,offsetHeight:r,type:e.type,items:a,loop:e.loop,updateItems:function(e){a.value.push(e)},setActiveItem:m}),{data:n,props:e,items:a,arrowDisplay:i,carouselClasses:u,indicatorsClasses:c,hasLabel:s,handleMouseEnter:function(){n.hover=!0,f()},handleMouseLeave:function(){n.hover=!1,h()},handleIndicatorClick:function(e){n.activeIndex=e},throttledArrowClick:d,throttledIndicatorHover:p,handleButtonEnter:function(t){"vertical"!==e.direction&&a.value.forEach(((e,n)=>{t===function(e,t){const n=a.value.length;return t===n-1&&e.inStage&&a.value[0].active||e.inStage&&a.value[t+1]&&a.value[t+1].active?"left":!!(0===t&&e.inStage&&a.value[n-1].active||e.inStage&&a.value[t-1]&&a.value[t-1].active)&&"right"}(e,n)&&(e.hover=!0)}))},handleButtonLeave:function(){"vertical"!==e.direction&&a.value.forEach((e=>{e.hover=!1}))},prev:function(){m(n.activeIndex-1)},next:function(){m(n.activeIndex+1)},setActiveItem:m,root:l}}});const od=Tl("i",{class:"el-icon-arrow-left"},null,-1),rd=Tl("i",{class:"el-icon-arrow-right"},null,-1),id={class:"el-carousel__button"},sd={key:0};ad.render=function(e,t,n,l,a,o){return Cl(),Al("div",{ref:"root",class:e.carouselClasses,onMouseenter:t[7]||(t[7]=co(((...t)=>e.handleMouseEnter(...t)),["stop"])),onMouseleave:t[8]||(t[8]=co(((...t)=>e.handleMouseLeave(...t)),["stop"]))},[Tl("div",{class:"el-carousel__container",style:{height:e.height}},[e.arrowDisplay?(Cl(),Al(Pa,{key:0,name:"carousel-arrow-left"},{default:en((()=>[Un(Tl("button",{type:"button",class:"el-carousel__arrow el-carousel__arrow--left",onMouseenter:t[1]||(t[1]=t=>e.handleButtonEnter("left")),onMouseleave:t[2]||(t[2]=(...t)=>e.handleButtonLeave(...t)),onClick:t[3]||(t[3]=co((t=>e.throttledArrowClick(e.data.activeIndex-1)),["stop"]))},[od],544),[[ho,("always"===e.arrow||e.data.hover)&&(e.props.loop||e.data.activeIndex>0)]])])),_:1})):Pl("v-if",!0),e.arrowDisplay?(Cl(),Al(Pa,{key:1,name:"carousel-arrow-right"},{default:en((()=>[Un(Tl("button",{type:"button",class:"el-carousel__arrow el-carousel__arrow--right",onMouseenter:t[4]||(t[4]=t=>e.handleButtonEnter("right")),onMouseleave:t[5]||(t[5]=(...t)=>e.handleButtonLeave(...t)),onClick:t[6]||(t[6]=co((t=>e.throttledArrowClick(e.data.activeIndex+1)),["stop"]))},[rd],544),[[ho,("always"===e.arrow||e.data.hover)&&(e.props.loop||e.data.activeIndex<e.items.length-1)]])])),_:1})):Pl("v-if",!0),Zt(e.$slots,"default")],4),"none"!==e.indicatorPosition?(Cl(),Al("ul",{key:0,class:e.indicatorsClasses},[(Cl(!0),Al(gl,null,da(e.items,((t,n)=>(Cl(),Al("li",{key:n,class:["el-carousel__indicator","el-carousel__indicator--"+e.direction,{"is-active":n===e.data.activeIndex}],onMouseenter:t=>e.throttledIndicatorHover(n),onClick:co((t=>e.handleIndicatorClick(n)),["stop"])},[Tl("button",id,[e.hasLabel?(Cl(),Al("span",sd,d(t.label),1)):Pl("v-if",!0)])],42,["onMouseenter","onClick"])))),128))],2)):Pl("v-if",!0)],34)},ad.__file="packages/carousel/src/main.vue",ad.install=e=>{e.component(ad.name,ad)};var ud=Qn({name:"ElCarouselItem",props:{name:{type:String,default:""},label:{type:[String,Number],default:""}},setup(e){const t=la();t.uid;const n=Ye({hover:!1,translate:0,scale:1,active:!1,ready:!1,inStage:!1,animating:!1}),l=$l("injectCarouselScope"),a=ua((()=>l.direction)),o=ua((()=>function(e){const t=["ms-","webkit-"];return["transform","transition","animation"].forEach((n=>{const l=e[n];n&&l&&t.forEach((t=>{e[t+n]=l}))})),e}({transform:`${"vertical"===a.value?"translateY":"translateX"}(${n.translate}px) scale(${n.scale})`}))),r=(e,t,o)=>{const r=l.type,i=l.items.value.length;if("card"!==r&&void 0!==o&&(n.animating=e===t||e===o),e!==t&&i>2&&l.loop&&(e=function(e,t,n){return 0===t&&e===n-1?-1:t===n-1&&0===e?n:e<t-1&&t-e>=n/2?n+1:e>t+1&&e-t>=n/2?-2:e}(e,t,i)),"card"===r)"vertical"===a.value&&console.warn("[Element Warn][Carousel]vertical direction is not supported in card mode"),n.inStage=Math.round(Math.abs(e-t))<=1,n.active=e===t,n.translate=function(e,t){const a=l.offsetWidth.value;return n.inStage?a*(1.17*(e-t)+1)/4:e<t?-1.83*a/4:3.83*a/4}(e,t),n.scale=n.active?1:.83;else{n.active=e===t;const o="vertical"===a.value;n.translate=function(e,t,n){return l[n?"offsetHeight":"offsetWidth"].value*(e-t)}(e,t,o)}n.ready=!0};return mn((()=>{l.updateItems&&l.updateItems(Object.assign(Object.assign(Object.assign({uid:t.uid},e),st(n)),{translateItem:r}))})),{data:n,itemStyle:o,translateItem:r,type:l.type,handleItemClick:function(){if(l&&"card"===l.type){const e=l.items.value.map((e=>e.uid)).indexOf(t.uid);l.setActiveItem(e)}}}}});const cd={key:0,class:"el-carousel__mask"};ud.render=function(e,t,n,l,a,o){return Un((Cl(),Al("div",{class:["el-carousel__item",{"is-active":e.data.active,"el-carousel__item--card":"card"===e.type,"is-in-stage":e.data.inStage,"is-hover":e.data.hover,"is-animating":e.data.animating}],style:e.itemStyle,onClick:t[1]||(t[1]=(...t)=>e.handleItemClick(...t))},["card"===e.type?Un((Cl(),Al("div",cd,null,512)),[[ho,!e.data.active]]):Pl("v-if",!0),Zt(e.$slots,"default")],6)),[[ho,e.data.ready]])},ud.__file="packages/carousel/src/item.vue",ud.install=e=>{e.component(ud.name,ud)};const dd=()=>{const e=ms(),t=$l("elForm",{}),n=$l("elFormItem",{}),l=$l("CheckboxGroup",{}),a=ua((()=>l&&"ElCheckboxGroup"===(null==l?void 0:l.name))),o=ua((()=>n.size));return{isGroup:a,checkboxGroup:l,elForm:t,ELEMENT:e,elFormItemSize:o,elFormItem:n}},pd=e=>{const{model:t,isLimitExceeded:n}=(e=>{let t=!1;const{emit:n}=la(),{isGroup:l,checkboxGroup:a}=dd(),o=tt(!1),r=ua((()=>{var t;return a?null===(t=a.modelValue)||void 0===t?void 0:t.value:e.modelValue}));return{model:ua({get(){var n;return l.value?r.value:null!==(n=e.modelValue)&&void 0!==n?n:t},set(e){var r;l.value&&Array.isArray(e)?(o.value=!1,void 0!==a.min&&e.length<a.min.value&&(o.value=!0),void 0!==a.max&&e.length>a.max.value&&(o.value=!0),!1===o.value&&(null===(r=null==a?void 0:a.changeEvent)||void 0===r||r.call(a,e))):(n(tu,e),t=e)}}),isLimitExceeded:o}})(e),{focus:l,size:a,isChecked:o,checkboxSize:r}=((e,{model:t})=>{const{isGroup:n,checkboxGroup:l,elFormItemSize:a,ELEMENT:o}=dd(),r=tt(!1),i=ua((()=>{var e;return(null===(e=null==l?void 0:l.checkboxGroupSize)||void 0===e?void 0:e.value)||a.value||o.size}));return{isChecked:ua((()=>{const n=t.value;return"[object Boolean]"===ts(n)?n:Array.isArray(n)?n.includes(e.label):null!=n?n===e.trueLabel:void 0})),focus:r,size:i,checkboxSize:ua((()=>{var t;const r=e.size||a.value||o.size;return n.value&&(null===(t=null==l?void 0:l.checkboxGroupSize)||void 0===t?void 0:t.value)||r}))}})(e,{model:t}),{isDisabled:i}=((e,{model:t,isChecked:n})=>{const{elForm:l,isGroup:a,checkboxGroup:o}=dd(),r=ua((()=>{var e,l;const a=null===(e=o.max)||void 0===e?void 0:e.value,r=null===(l=o.min)||void 0===l?void 0:l.value;return!(!a&&!r)&&t.value.length>=a&&!n.value||t.value.length<=r&&n.value}));return{isDisabled:ua((()=>{var t;const n=e.disabled||l.disabled;return a.value?(null===(t=o.disabled)||void 0===t?void 0:t.value)||n||r.value:e.disabled||l.disabled})),isLimitDisabled:r}})(e,{model:t,isChecked:o}),{handleChange:s}=((e,{isLimitExceeded:t})=>{const{elFormItem:n}=dd(),{emit:l}=la();return An((()=>e.modelValue),(e=>{var t;null===(t=n.formItemMitt)||void 0===t||t.emit("el.form.change",[e])})),{handleChange:function(n){var a,o;if(t.value)return;const r=n.target.checked?null===(a=e.trueLabel)||void 0===a||a:null!==(o=e.falseLabel)&&void 0!==o&&o;l("change",r,n)}}})(e,{isLimitExceeded:n});return((e,{model:t})=>{e.checked&&(Array.isArray(t.value)&&!t.value.includes(e.label)?t.value.push(e.label):t.value=e.trueLabel||!0)})(e,{model:t}),{isChecked:o,isDisabled:i,checkboxSize:r,model:t,handleChange:s,focus:l,size:a}};var fd=Qn({name:"ElCheckbox",props:{modelValue:{type:[Boolean,Number,String],default:()=>{}},label:{type:[Boolean,Number,String]},indeterminate:Boolean,disabled:Boolean,checked:Boolean,name:{type:String,default:void 0},trueLabel:{type:[String,Number],default:void 0},falseLabel:{type:[String,Number],default:void 0},id:{type:String,default:void 0},controls:{type:String,default:void 0},border:Boolean,size:{type:String,validator:au}},emits:[tu,"change"],setup(e){const{focus:t,isChecked:n,isDisabled:l,checkboxSize:a,model:o,handleChange:r}=pd(e),i=la();return mn((()=>{i.vnode.el.setAttribute("aria-controls",e.controls)})),{focus:t,isChecked:n,isDisabled:l,checkboxSize:a,model:o,handleChange:r}}});const hd=Tl("span",{class:"el-checkbox__inner"},null,-1),vd={key:0,class:"el-checkbox__label"};fd.render=function(e,t,n,l,a,o){return Cl(),Al("label",{id:e.id,class:["el-checkbox",[e.border&&e.checkboxSize?"el-checkbox--"+e.checkboxSize:"",{"is-disabled":e.isDisabled},{"is-bordered":e.border},{"is-checked":e.isChecked}]]},[Tl("span",{class:["el-checkbox__input",{"is-disabled":e.isDisabled,"is-checked":e.isChecked,"is-indeterminate":e.indeterminate,"is-focus":e.focus}],tabindex:!!e.indeterminate&&0,role:!!e.indeterminate&&"checkbox","aria-checked":!!e.indeterminate&&"mixed"},[hd,e.trueLabel||e.falseLabel?Un((Cl(),Al("input",{key:0,"onUpdate:modelValue":t[1]||(t[1]=t=>e.model=t),checked:e.isChecked,class:"el-checkbox__original",type:"checkbox","aria-hidden":e.indeterminate?"true":"false",name:e.name,disabled:e.isDisabled,"true-value":e.trueLabel,"false-value":e.falseLabel,onChange:t[2]||(t[2]=(...t)=>e.handleChange(...t)),onFocus:t[3]||(t[3]=t=>e.focus=!0),onBlur:t[4]||(t[4]=t=>e.focus=!1)},null,40,["checked","aria-hidden","name","disabled","true-value","false-value"])),[[lo,e.model]]):Un((Cl(),Al("input",{key:1,"onUpdate:modelValue":t[5]||(t[5]=t=>e.model=t),class:"el-checkbox__original",type:"checkbox","aria-hidden":e.indeterminate?"true":"false",disabled:e.isDisabled,value:e.label,name:e.name,onChange:t[6]||(t[6]=(...t)=>e.handleChange(...t)),onFocus:t[7]||(t[7]=t=>e.focus=!0),onBlur:t[8]||(t[8]=t=>e.focus=!1)},null,40,["aria-hidden","disabled","value","name"])),[[lo,e.model]])],10,["tabindex","role","aria-checked"]),e.$slots.default||e.label?(Cl(),Al("span",vd,[Zt(e.$slots,"default"),e.$slots.default?Pl("v-if",!0):(Cl(),Al(gl,{key:0},[Bl(d(e.label),1)],64))])):Pl("v-if",!0)],10,["id"])},fd.__file="packages/checkbox/src/checkbox.vue",fd.install=e=>{e.component(fd.name,fd)};const md=()=>{const e=ms(),t=$l("elForm",{}),n=$l("elFormItem",{}),l=$l("RadioGroup",{}),a=tt(!1),o=ua((()=>"ElRadioGroup"===(null==l?void 0:l.name))),r=ua((()=>n.size||e.size));return{isGroup:o,focus:a,radioGroup:l,elForm:t,ELEMENT:e,elFormItemSize:r}},gd=(e,{isGroup:t,radioGroup:n,elForm:l,model:a})=>{const o=ua((()=>t.value?n.disabled||e.disabled||l.disabled:e.disabled||l.disabled)),r=ua((()=>o.value||t.value&&a.value!==e.label?-1:0));return{isDisabled:o,tabIndex:r}};var bd=Qn({name:"ElRadio",componentName:"ElRadio",props:{modelValue:{type:[Boolean,String,Number],default:""},label:{type:[Boolean,String,Number],default:""},disabled:Boolean,name:{type:String,default:""},border:Boolean,size:{type:String,validator:au}},emits:[tu,"change"],setup(e,t){const{isGroup:n,radioGroup:l,elFormItemSize:a,ELEMENT:o,focus:r,elForm:i}=md(),s=tt(),u=ua({get:()=>n.value?l.modelValue:e.modelValue,set(a){n.value?l.changeEvent(a):t.emit(tu,a),s.value.checked=e.modelValue===e.label}}),{tabIndex:c,isDisabled:d}=gd(e,{isGroup:n,radioGroup:l,elForm:i,model:u}),p=ua((()=>{const t=e.size||a.value||o.size;return n.value&&l.radioGroupSize||t}));return{focus:r,isGroup:n,isDisabled:d,model:u,tabIndex:c,radioSize:p,handleChange:function(){Mt((()=>{t.emit("change",u.value)}))},radioRef:s}}});const yd=Tl("span",{class:"el-radio__inner"},null,-1);var xd;bd.render=function(e,t,n,l,a,o){return Cl(),Al("label",{class:["el-radio",{["el-radio--"+(e.radioSize||"")]:e.border&&e.radioSize,"is-disabled":e.isDisabled,"is-focus":e.focus,"is-bordered":e.border,"is-checked":e.model===e.label}],role:"radio","aria-checked":e.model===e.label,"aria-disabled":e.isDisabled,tabindex:e.tabIndex,onKeydown:t[6]||(t[6]=fo(co((t=>e.model=e.isDisabled?e.model:e.label),["stop","prevent"]),["space"]))},[Tl("span",{class:["el-radio__input",{"is-disabled":e.isDisabled,"is-checked":e.model===e.label}]},[yd,Un(Tl("input",{ref:"radioRef","onUpdate:modelValue":t[1]||(t[1]=t=>e.model=t),class:"el-radio__original",value:e.label,type:"radio","aria-hidden":"true",name:e.name,disabled:e.isDisabled,tabindex:"-1",onFocus:t[2]||(t[2]=t=>e.focus=!0),onBlur:t[3]||(t[3]=t=>e.focus=!1),onChange:t[4]||(t[4]=(...t)=>e.handleChange(...t))},null,40,["value","name","disabled"]),[[oo,e.model]])],2),Tl("span",{class:"el-radio__label",onKeydown:t[5]||(t[5]=co((()=>{}),["stop"]))},[Zt(e.$slots,"default",{},(()=>[Bl(d(e.label),1)]))],32)],42,["aria-checked","aria-disabled","tabindex"])},bd.__file="packages/radio/src/radio.vue",bd.install=e=>{e.component(bd.name,bd)},function(e){e.CLICK="click",e.HOVER="hover"}(xd||(xd={}));const kd=Symbol();var wd=Qn({name:"ElCascaderNode",components:{ElCheckbox:fd,ElRadio:bd,NodeContent:{render(){const{node:e,panel:t}=this.$parent,{data:n,label:l}=e,{renderLabelFn:a}=t;return ca("span",{class:"el-cascader-node__label"},a?a({node:e,data:n}):l)}}},props:{node:{type:Object,required:!0},menuId:String},emits:["expand"],setup(e,{emit:t}){const n=$l(kd),l=ua((()=>n.isHoverMenu)),a=ua((()=>n.config.multiple)),o=ua((()=>n.config.checkStrictly)),r=ua((()=>{var e;return null===(e=n.checkedNodes[0])||void 0===e?void 0:e.uid})),i=ua((()=>e.node.isDisabled)),s=ua((()=>e.node.isLeaf)),u=ua((()=>o.value&&!s.value||!i.value)),c=ua((()=>p(n.expandingNode))),d=ua((()=>o.value&&n.checkedNodes.some(p))),p=t=>{var n;const{level:l,uid:a}=e.node;return(null===(n=null==t?void 0:t.pathNodes[l-1])||void 0===n?void 0:n.uid)===a},f=()=>{c.value||n.expandNode(e.node)},h=()=>{n.lazyLoad(e.node,(()=>{s.value||f()}))},v=()=>{const{node:t}=e;u.value&&!t.loading&&(t.loaded?f():h())},m=t=>{e.node.loaded?((t=>{const{node:l}=e;t!==l.checked&&n.handleCheckChange(l,t)})(t),!o.value&&f()):h()};return{panel:n,isHoverMenu:l,multiple:a,checkStrictly:o,checkedNodeId:r,isDisabled:i,isLeaf:s,expandable:u,inExpandingPath:c,inCheckedPath:d,handleHoverExpand:e=>{l.value&&(v(),!s.value&&t("expand",e))},handleExpand:v,handleClick:()=>{l.value&&!s.value||(!s.value||i.value||o.value||a.value?v():m(!0))},handleCheck:m}}});const Cd=Tl("span",null,null,-1),_d={key:2,class:"el-icon-check el-cascader-node__prefix"},Ad={key:0,class:"el-icon-loading el-cascader-node__postfix"},Sd={key:1,class:"el-icon-arrow-right el-cascader-node__postfix"};wd.render=function(e,t,n,l,a,o){const r=pl("el-checkbox"),i=pl("el-radio"),s=pl("node-content");return Cl(),Al("li",{id:`${e.menuId}-${e.node.uid}`,role:"menuitem","aria-haspopup":!e.isLeaf,"aria-owns":e.isLeaf?null:e.menuId,"aria-expanded":e.inExpandingPath,tabindex:e.expandable?-1:null,class:["el-cascader-node",e.checkStrictly&&"is-selectable",e.inExpandingPath&&"in-active-path",e.inCheckedPath&&"in-checked-path",e.node.checked&&"is-active",!e.expandable&&"is-disabled"],onMouseenter:t[3]||(t[3]=(...t)=>e.handleHoverExpand(...t)),onFocus:t[4]||(t[4]=(...t)=>e.handleHoverExpand(...t)),onClick:t[5]||(t[5]=(...t)=>e.handleClick(...t))},[Pl(" prefix "),e.multiple?(Cl(),Al(r,{key:0,"model-value":e.node.checked,indeterminate:e.node.indeterminate,disabled:e.isDisabled,onClick:t[1]||(t[1]=co((()=>{}),["stop"])),"onUpdate:modelValue":e.handleCheck},null,8,["model-value","indeterminate","disabled","onUpdate:modelValue"])):e.checkStrictly?(Cl(),Al(i,{key:1,"model-value":e.checkedNodeId,label:e.node.uid,disabled:e.isDisabled,"onUpdate:modelValue":e.handleCheck,onClick:t[2]||(t[2]=co((()=>{}),["stop"]))},{default:en((()=>[Pl("\n        Add an empty element to avoid render label,\n        do not use empty fragment here for https://github.com/vuejs/vue-next/pull/2485\n      "),Cd])),_:1},8,["model-value","label","disabled","onUpdate:modelValue"])):e.isLeaf&&e.node.checked?(Cl(),Al("i",_d)):Pl("v-if",!0),Pl(" content "),Tl(s),Pl(" postfix "),e.isLeaf?Pl("v-if",!0):(Cl(),Al(gl,{key:3},[e.node.loading?(Cl(),Al("i",Ad)):(Cl(),Al("i",Sd))],64))],42,["id","aria-haspopup","aria-owns","aria-expanded","tabindex"])},wd.__file="packages/cascader-panel/src/node.vue";var Ed=Qn({name:"ElCascaderMenu",components:{ElScrollbar:Au,ElCascaderNode:wd},props:{nodes:{type:Array,required:!0},index:{type:Number,required:!0}},setup(e){const t=la(),n=cs();let l=null,a=null;const o=$l(kd),r=tt(null),i=ua((()=>!e.nodes.length)),s=ua((()=>`cascader-menu-${n}-${e.index}`)),u=()=>{a&&(clearTimeout(a),a=null)},c=()=>{r.value&&(r.value.innerHTML="",u())};return{panel:o,hoverZone:r,isEmpty:i,menuId:s,t:vc,handleExpand:e=>{l=e.target},handleMouseMove:e=>{if(o.isHoverMenu&&l&&r.value)if(l.contains(e.target)){u();const n=t.vnode.el,{left:a}=n.getBoundingClientRect(),{offsetWidth:o,offsetHeight:i}=n,s=e.clientX-a,c=l.offsetTop,d=c+l.offsetHeight;r.value.innerHTML=`\n          <path style="pointer-events: auto;" fill="transparent" d="M${s} ${c} L${o} 0 V${c} Z" />\n          <path style="pointer-events: auto;" fill="transparent" d="M${s} ${d} L${o} ${i} V${d} Z" />\n        `}else a||(a=window.setTimeout(c,o.config.hoverThreshold))},clearHoverZone:c}}});const Md={key:0,class:"el-cascader-menu__empty-text"},Od={key:1,ref:"hoverZone",class:"el-cascader-menu__hover-zone"};Ed.render=function(e,t,n,l,a,o){const r=pl("el-cascader-node"),i=pl("el-scrollbar");return Cl(),Al(i,{id:e.menuId,tag:"ul",role:"menu",class:"el-cascader-menu","wrap-class":"el-cascader-menu__wrap","view-class":["el-cascader-menu__list",e.isEmpty&&"is-empty"],onMousemove:e.handleMouseMove,onMouseleave:e.clearHoverZone},{default:en((()=>[(Cl(!0),Al(gl,null,da(e.nodes,(t=>(Cl(),Al(r,{key:t.uid,node:t,"menu-id":e.menuId,onExpand:e.handleExpand},null,8,["node","menu-id","onExpand"])))),128)),e.isEmpty?(Cl(),Al("div",Md,d(e.t("el.cascader.noData")),1)):e.panel.isHoverMenu?(Cl(),Al("svg",Od,null,512)):Pl("v-if",!0)])),_:1},8,["id","view-class","onMousemove","onMouseleave"])},Ed.__file="packages/cascader-panel/src/menu.vue";let Dd=0;class Td{constructor(e,t,n,l=!1){this.data=e,this.config=t,this.parent=n,this.root=l,this.uid=Dd++,this.checked=!1,this.indeterminate=!1,this.loading=!1;const{value:a,label:o,children:r}=t,i=e[r],s=(e=>{const t=[e];let{parent:n}=e;for(;n;)t.unshift(n),n=n.parent;return t})(this);this.level=l?0:n?n.level+1:1,this.value=e[a],this.label=e[o],this.pathNodes=s,this.pathValues=s.map((e=>e.value)),this.pathLabels=s.map((e=>e.label)),this.childrenData=i,this.children=(i||[]).map((e=>new Td(e,t,this))),this.loaded=!t.lazy||this.isLeaf||!bs(i)}get isDisabled(){const{data:e,parent:t,config:n}=this,{disabled:l,checkStrictly:a}=n;return(Ji(l)?l(e,this):!!e[l])||!a&&(null==t?void 0:t.isDisabled)}get isLeaf(){const{data:e,config:t,childrenData:n,loaded:l}=this,{lazy:a,leaf:o}=t,r=Ji(o)?o(e,this):e[o];return void 0===r?!(a&&!l||Array.isArray(n)):!!r}get valueByOption(){return this.config.emitPath?this.pathValues:this.value}appendChild(e){const{childrenData:t,children:n}=this,l=new Td(e,this.config,this);return Array.isArray(t)?t.push(e):this.childrenData=[e],n.push(l),l}calcText(e,t){const n=e?this.pathLabels.join(t):this.label;return this.text=n,n}broadcast(e,...t){const n="onParent"+rs(e);this.children.forEach((l=>{l&&(l.broadcast(e,...t),l[n]&&l[n](...t))}))}emit(e,...t){const{parent:n}=this,l="onChild"+rs(e);n&&(n[l]&&n[l](...t),n.emit(e,...t))}onParentCheck(e){this.isDisabled||this.setCheckState(e)}onChildCheck(){const{children:e}=this,t=e.filter((e=>!e.isDisabled)),n=!!t.length&&t.every((e=>e.checked));this.setCheckState(n)}setCheckState(e){const t=this.children.length,n=this.children.reduce(((e,t)=>e+(t.checked?1:t.indeterminate?.5:0)),0);this.checked=e,this.indeterminate=n!==t&&n>0}doCheck(e){if(this.checked===e)return;const{checkStrictly:t,multiple:n}=this.config;t||!n?this.checked=e:(this.broadcast("check",e),this.setCheckState(e),this.emit("check"))}}const Nd=(e,t)=>e.reduce(((e,n)=>(n.isLeaf?e.push(n):(!t&&e.push(n),e=e.concat(Nd(n.children,t))),e)),[]);class Bd{constructor(e,t){this.config=t;const n=(e||[]).map((e=>new Td(e,this.config)));this.nodes=n,this.allNodes=Nd(n,!1),this.leafNodes=Nd(n,!0)}getNodes(){return this.nodes}getFlattedNodes(e){return e?this.leafNodes:this.allNodes}appendNode(e,t){const n=t?t.appendChild(e):new Td(e,this.config);t||this.nodes.push(n),this.allNodes.push(n),n.isLeaf&&this.leafNodes.push(n)}appendNodes(e,t){e.forEach((e=>this.appendNode(e,t)))}getNodeByValue(e,t=!1){return(e||0===e)&&this.getFlattedNodes(t).filter((t=>t.value===e||ri()(t.pathValues,e)))[0]||null}getSameNode(e){return e&&this.getFlattedNodes(!1).filter((({value:t,level:n})=>e.value===t&&e.level===n))[0]||null}}function Pd(e,t){if(is)return;if(!t)return void(e.scrollTop=0);const n=[];let l=t.offsetParent;for(;null!==l&&e!==l&&e.contains(l);)n.push(l),l=l.offsetParent;const a=t.offsetTop+n.reduce(((e,t)=>e+t.offsetTop),0),o=a+t.offsetHeight,r=e.scrollTop,i=r+e.clientHeight;a<r?e.scrollTop=a:o>i&&(e.scrollTop=o-e.clientHeight)}const Vd={modelValue:[Number,String,Array],options:{type:Array,default:()=>[]},props:{type:Object,default:()=>({})}},Id={expandTrigger:xd.CLICK,multiple:!1,checkStrictly:!1,emitPath:!0,lazy:!1,lazyLoad:Ui,value:"value",label:"label",children:"children",leaf:"leaf",disabled:"disabled",hoverThreshold:500},Ld=e=>!e.getAttribute("aria-owns"),zd=e=>{if(!e)return 0;const t=e.id.split("-");return Number(t[t.length-2])},Fd=e=>{e&&(e.focus(),!Ld(e)&&e.click())};var $d=Qn({name:"ElCascaderPanel",components:{ElCascaderMenu:Ed},props:Object.assign(Object.assign({},Vd),{border:{type:Boolean,default:!0},renderLabel:Function}),emits:[tu,"change","close","expand-change"],setup(e,{emit:t,slots:n}){let l=!0,a=!1;const o=(e=>ua((()=>Object.assign(Object.assign({},Id),e.props))))(e),r=tt(null),i=tt([]),s=tt(null),u=tt([]),c=tt(null),d=tt([]),p=ua((()=>o.value.expandTrigger===xd.HOVER)),f=ua((()=>e.renderLabel||n.default)),h=(e,t)=>{const n=o.value;(e=e||new Td({},n,null,!0)).loading=!0,n.lazyLoad(e,(n=>{const l=e.root?null:e;n&&r.value.appendNodes(n,l),e.loading=!1,e.loaded=!0,t&&t(n)}))},v=(e,n)=>{var l;const{level:a}=e,o=u.value.slice(0,a);let r;e.isLeaf?r=e.pathNodes[a-2]:(r=e,o.push(e.children)),(null===(l=c.value)||void 0===l?void 0:l.uid)!==(null==r?void 0:r.uid)&&(c.value=e,u.value=o,!n&&t("expand-change",(null==e?void 0:e.pathValues)||[]))},m=(e,n,l=!0)=>{const{checkStrictly:r,multiple:i}=o.value,s=d.value[0];a=!0,!i&&(null==s||s.doCheck(!1)),e.doCheck(n),y(),l&&!i&&!r&&t("close")},g=e=>r.value.getFlattedNodes(e),b=e=>g(e).filter((e=>e.checked)),y=()=>{const{checkStrictly:e,multiple:t}=o.value,n=((e,t)=>{const n=t.slice(0),l=n.map((e=>e.uid)),a=e.reduce(((e,t)=>{const a=l.indexOf(t.uid);return a>-1&&(e.push(t),n.splice(a,1),l.splice(a,1)),e}),[]);return a.push(...n),a})(d.value,b(!e)),l=n.map((e=>e.valueByOption));d.value=n,s.value=t?l:l[0]||null},x=(t=!1,n=!1)=>{const{modelValue:i}=e,{lazy:u,multiple:c,checkStrictly:d}=o.value,p=!d;if(l&&!a&&(n||!ri()(i,s.value)))if(u&&!t){const e=xs(ys(ds(i))).map((e=>r.value.getNodeByValue(e))).filter((e=>!!e&&!e.loaded&&!e.loading));e.length?e.forEach((e=>{h(e,(()=>x(!1,n)))})):x(!0,n)}else{const e=xs((c?ds(i):[i]).map((e=>r.value.getNodeByValue(e,p))));k(e,!1),s.value=i}},k=(e,t=!0)=>{const{checkStrictly:n}=o.value,l=d.value,a=e.filter((e=>!!e&&(n||e.isLeaf))),i=r.value.getSameNode(c.value),s=t&&i||a[0];s?s.pathNodes.forEach((e=>v(e,!0))):c.value=null,l.forEach((e=>e.doCheck(!1))),a.forEach((e=>e.doCheck(!0))),d.value=a,Mt(w)},w=()=>{is||i.value.forEach((e=>{const t=null==e?void 0:e.$el;t&&Pd(t.querySelector(".el-scrollbar__wrap"),t.querySelector(".el-cascader-node.is-active")||t.querySelector(".el-cascader-node.in-active-path"))}))};return Fl(kd,Ye({config:o,expandingNode:c,checkedNodes:d,isHoverMenu:p,renderLabelFn:f,lazyLoad:h,expandNode:v,handleCheckChange:m})),An([o,()=>e.options],(()=>{const{options:t}=e,n=o.value;a=!1,r.value=new Bd(t,n),u.value=[r.value.getNodes()],n.lazy&&bs(e.options)?(l=!1,h(null,(()=>{l=!0,x(!1,!0)}))):x(!1,!0)}),{deep:!0,immediate:!0}),An((()=>e.modelValue),(()=>{a=!1,x()})),An(s,(n=>{ri()(n,e.modelValue)||(t(tu,n),t("change",n))})),gn((()=>i.value=[])),mn((()=>!bs(e.modelValue)&&x())),{menuList:i,menus:u,checkedNodes:d,handleKeyDown:e=>{const n=e.target,{code:l}=e;switch(l){case Fs.up:case Fs.down:const e=l===Fs.up?-1:1;Fd(((e,t)=>{const{parentNode:n}=e;if(!n)return null;const l=n.querySelectorAll('.el-cascader-node[tabindex="-1"]');return l[Array.prototype.indexOf.call(l,e)+t]||null})(n,e));break;case Fs.left:const a=i.value[zd(n)-1],o=null==a?void 0:a.$el.querySelector('.el-cascader-node[aria-expanded="true"]');Fd(o);break;case Fs.right:const r=i.value[zd(n)+1],s=null==r?void 0:r.$el.querySelector('.el-cascader-node[tabindex="-1"]');Fd(s);break;case Fs.enter:(e=>{if(!e)return;const t=e.querySelector("input");t?t.click():Ld(e)&&e.click()})(n);break;case Fs.esc:case Fs.tab:t("close")}},handleCheckChange:m,getFlattedNodes:g,getCheckedNodes:b,clearCheckedNodes:()=>{d.value.forEach((e=>e.doCheck(!1))),y()},calculateCheckedValue:y,scrollToExpandingNode:w}}});$d.render=function(e,t,n,l,a,o){const r=pl("el-cascader-menu");return Cl(),Al("div",{class:["el-cascader-panel",e.border&&"is-bordered"],onKeydown:t[1]||(t[1]=(...t)=>e.handleKeyDown(...t))},[(Cl(!0),Al(gl,null,da(e.menus,((t,n)=>(Cl(),Al(r,{key:n,ref:t=>e.menuList[n]=t,index:n,nodes:t},null,8,["index","nodes"])))),128))],34)},$d.__file="packages/cascader-panel/src/index.vue",$d.install=e=>{e.component($d.name,$d)};var Rd=Qn({name:"ElTag",props:{closable:Boolean,type:{type:String,default:""},hit:Boolean,disableTransitions:Boolean,color:{type:String,default:""},size:{type:String,validator:au},effect:{type:String,default:"light",validator:e=>-1!==["dark","light","plain"].indexOf(e)}},emits:["close","click"],setup(e,t){const n=ms(),l=ua((()=>e.size||n.size)),a=ua((()=>{const{type:t,hit:n,effect:a}=e;return["el-tag",t?"el-tag--"+t:"",l.value?"el-tag--"+l.value:"",a?"el-tag--"+a:"",n&&"is-hit"]}));return{tagSize:l,classes:a,handleClose:e=>{e.stopPropagation(),t.emit("close",e)},handleClick:e=>{t.emit("click",e)}}}});Rd.render=function(e,t,n,l,a,o){return e.disableTransitions?(Cl(),Al(Pa,{key:1,name:"el-zoom-in-center"},{default:en((()=>[Tl("span",{class:e.classes,style:{backgroundColor:e.color},onClick:t[4]||(t[4]=(...t)=>e.handleClick(...t))},[Zt(e.$slots,"default"),e.closable?(Cl(),Al("i",{key:0,class:"el-tag__close el-icon-close",onClick:t[3]||(t[3]=(...t)=>e.handleClose(...t))})):Pl("v-if",!0)],6)])),_:3})):(Cl(),Al("span",{key:0,class:e.classes,style:{backgroundColor:e.color},onClick:t[2]||(t[2]=(...t)=>e.handleClick(...t))},[Zt(e.$slots,"default"),e.closable?(Cl(),Al("i",{key:0,class:"el-tag__close el-icon-close",onClick:t[1]||(t[1]=(...t)=>e.handleClose(...t))})):Pl("v-if",!0)],6))},Rd.__file="packages/tag/src/index.vue",Rd.install=e=>{e.component(Rd.name,Rd)};const jd={medium:36,small:32,mini:28},Hd={modifiers:[{name:"arrowPosition",enabled:!0,phase:"main",fn:({state:e})=>{const{modifiersData:t,elements:n}=e,{reference:l,arrow:a}=n;t.arrow.x=t.arrow.x-(l.clientWidth-a.clientWidth)/2+35},requires:["arrow"]}]};var Wd=Qn({name:"ElCascader",components:{ElCascaderPanel:$d,ElInput:cu,ElPopper:Ku,ElScrollbar:Au,ElTag:Rd},directives:{Clickoutside:Xs},props:Object.assign(Object.assign({},Vd),{size:{type:String,validator:au},placeholder:{type:String,default:()=>vc("el.cascader.placeholder")},disabled:Boolean,clearable:Boolean,filterable:Boolean,filterMethod:{type:Function,default:(e,t)=>e.text.includes(t)},separator:{type:String,default:" / "},showAllLevels:{type:Boolean,default:!0},collapseTags:Boolean,debounce:{type:Number,default:300},beforeFilter:{type:Function,default:()=>!0},popperClass:{type:String,default:""}}),emits:[tu,"change","focus","blur","visible-change","expand-change","remove-tag"],setup(e,{emit:t}){let n=0,l=0;const a=ms(),o=$l("elForm",{}),r=$l("elFormItem",{}),i=tt(null),s=tt(null),u=tt(null),c=tt(null),d=tt(null),p=tt(!1),f=tt(!1),h=tt(!1),v=tt(""),m=tt(""),g=tt([]),b=tt([]),y=ua((()=>e.disabled||o.disabled)),x=ua((()=>e.size||r.size||a.size)),k=ua((()=>["small","mini"].includes(x.value)?"mini":"small")),w=ua((()=>!!e.props.multiple)),C=ua((()=>!e.filterable||w.value)),_=ua((()=>w.value?m.value:v.value)),A=ua((()=>{var e;return(null===(e=c.value)||void 0===e?void 0:e.checkedNodes)||[]})),S=ua((()=>!(!e.clearable||y.value||h.value||!f.value||!A.value.length))),E=ua((()=>{const{showAllLevels:t,separator:n}=e,l=A.value;return l.length?w.value?" ":l[0].calcText(t,n):""})),M=ua({get:()=>e.modelValue,set(e){var n;t(tu,e),t("change",e),null===(n=r.formItemMitt)||void 0===n||n.emit("el.form.change",[e])}}),O=n=>{if(!y.value&&(n=null!=n?n:!p.value)!==p.value){if(p.value=n,s.value.input.setAttribute("aria-expanded",n),n)D(),Mt(c.value.scrollToExpandingNode);else if(e.filterable){const{value:e}=E;v.value=e,m.value=e}t("visible-change",n)}},D=()=>{Mt(i.value.update)},T=()=>{h.value=!1},N=t=>{const{showAllLevels:n,separator:l}=e;return{node:t,key:t.uid,text:t.calcText(n,l),hitState:!1,closable:!y.value&&!t.isDisabled}},B=e=>{const{node:n}=e;n.doCheck(!1),c.value.calculateCheckedValue(),t("remove-tag",n.valueByOption)},P=()=>{const{filterMethod:t,showAllLevels:n,separator:l}=e,a=c.value.getFlattedNodes(!e.props.checkStrictly).filter((e=>!e.isDisabled&&(e.calcText(n,l),t(e,_.value))));w.value&&g.value.forEach((e=>{e.hitState=!1})),h.value=!0,b.value=a,D()},V=()=>{var e;let t=null;t=h.value&&d.value?d.value.$el.querySelector(".el-cascader__suggestion-item"):null===(e=c.value)||void 0===e?void 0:e.$el.querySelector('.el-cascader-node[tabindex="-1"]'),t&&(t.focus(),!h.value&&t.click())},I=()=>{var e;const t=s.value.input,l=u.value,a=null===(e=d.value)||void 0===e?void 0:e.$el;if(!is&&t&&(a&&(a.querySelector(".el-cascader__suggestion-list").style.minWidth=t.offsetWidth+"px"),l)){const{offsetHeight:e}=l,a=Math.max(e+6,n)+"px";t.style.height=a,D()}},L=ko()((()=>{const{value:t}=_;if(!t)return;const n=e.beforeFilter(t);var l;Qi(l=n)&&Ji(l.then)&&Ji(l.catch)?n.then(P):!1!==n?P():T()}),e.debounce);return An(h,D),An([A,y],(()=>{if(!w.value)return;const t=A.value,n=[];if(t.length){const[l,...a]=t,o=a.length;n.push(N(l)),o&&(e.collapseTags?n.push({key:-1,text:"+ "+o,closable:!1}):a.forEach((e=>n.push(N(e)))))}g.value=n})),An(g,(()=>Mt(I))),An(E,(e=>v.value=e),{immediate:!0}),mn((()=>{const e=s.value.$el;n=(null==e?void 0:e.offsetHeight)||jd[x.value]||40,xu(e,I)})),yn((()=>{ku(s.value.$el,I)})),{popperOptions:Hd,popper:i,input:s,tagWrapper:u,panel:c,suggestionPanel:d,popperVisible:p,inputHover:f,filtering:h,presentText:E,checkedValue:M,inputValue:v,searchInputValue:m,presentTags:g,suggestions:b,isDisabled:y,realSize:x,tagSize:k,multiple:w,readonly:C,clearBtnVisible:S,t:vc,togglePopperVisible:O,hideSuggestionPanel:T,deleteTag:B,focusFirstNode:V,getCheckedNodes:e=>c.value.getCheckedNodes(e),handleExpandChange:e=>{D(),t("expand-change",e)},handleKeyDown:e=>{switch(e.code){case Fs.enter:O();break;case Fs.down:O(!0),Mt(V),event.preventDefault();break;case Fs.esc:case Fs.tab:O(!1)}},handleClear:()=>{c.value.clearCheckedNodes(),O(!1)},handleSuggestionClick:e=>{const{checked:t}=e;w.value?c.value.handleCheckChange(e,!t,!1):(!t&&c.value.handleCheckChange(e,!0,!1),O(!1))},handleDelete:()=>{const e=g.value,t=e[e.length-1];l=m.value?0:l+1,t&&l&&(t.hitState?B(t):t.hitState=!0)},handleInput:(e,t)=>{!p.value&&O(!0),(null==t?void 0:t.isComposing)||(e?L():T())}}}});const qd={key:0,ref:"tagWrapper",class:"el-cascader__tags"},Yd={key:0,class:"el-icon-check"},Kd={class:"el-cascader__empty-text"};Wd.render=function(e,t,n,l,a,o){const r=pl("el-input"),i=pl("el-tag"),s=pl("el-cascader-panel"),u=pl("el-scrollbar"),c=pl("el-popper"),p=hl("clickoutside");return Cl(),Al(c,{ref:"popper",visible:e.popperVisible,"onUpdate:visible":t[16]||(t[16]=t=>e.popperVisible=t),trigger:"manual",placement:"bottom-start","popper-class":"el-cascader__dropdown "+e.popperClass,"popper-options":e.popperOptions,transition:"el-zoom-in-top","gpu-acceleration":!1,effect:"light",pure:"",onAfterLeave:e.hideSuggestionPanel},{trigger:en((()=>[Un(Tl("div",{class:["el-cascader",e.realSize&&"el-cascader--"+e.realSize,{"is-disabled":e.isDisabled}],onClick:t[10]||(t[10]=()=>e.togglePopperVisible(!e.readonly||void 0)),onKeydown:t[11]||(t[11]=(...t)=>e.handleKeyDown(...t)),onMouseenter:t[12]||(t[12]=t=>e.inputHover=!0),onMouseleave:t[13]||(t[13]=t=>e.inputHover=!1)},[Tl(r,{ref:"input",modelValue:e.inputValue,"onUpdate:modelValue":t[3]||(t[3]=t=>e.inputValue=t),modelModifiers:{trim:!0},placeholder:e.placeholder,readonly:e.readonly,disabled:e.isDisabled,"validate-event":!1,size:e.realSize,class:{"is-focus":e.popperVisible},onFocus:t[4]||(t[4]=t=>e.$emit("focus",t)),onBlur:t[5]||(t[5]=t=>e.$emit("blur",t)),onInput:e.handleInput},{suffix:en((()=>[e.clearBtnVisible?(Cl(),Al("i",{key:"clear",class:"el-input__icon el-icon-circle-close",onClick:t[1]||(t[1]=co(((...t)=>e.handleClear(...t)),["stop"]))})):(Cl(),Al("i",{key:"arrow-down",class:["el-input__icon","el-icon-arrow-down",e.popperVisible&&"is-reverse"],onClick:t[2]||(t[2]=co((t=>e.togglePopperVisible()),["stop"]))},null,2))])),_:1},8,["modelValue","placeholder","readonly","disabled","size","class","onInput"]),e.multiple?(Cl(),Al("div",qd,[(Cl(!0),Al(gl,null,da(e.presentTags,(t=>(Cl(),Al(i,{key:t.key,type:"info",size:e.tagSize,hit:t.hitState,closable:t.closable,"disable-transitions":"",onClose:n=>e.deleteTag(t)},{default:en((()=>[Tl("span",null,d(t.text),1)])),_:2},1032,["size","hit","closable","onClose"])))),128)),e.filterable&&!e.isDisabled?Un((Cl(),Al("input",{key:0,"onUpdate:modelValue":t[6]||(t[6]=t=>e.searchInputValue=t),type:"text",class:"el-cascader__search-input",placeholder:e.presentText?"":e.placeholder,onInput:t[7]||(t[7]=t=>e.handleInput(e.searchInputValue,t)),onClick:t[8]||(t[8]=co((t=>e.togglePopperVisible(!0)),["stop"])),onKeydown:t[9]||(t[9]=fo(((...t)=>e.handleDelete(...t)),["delete"]))},null,40,["placeholder"])),[[no,e.searchInputValue,void 0,{trim:!0}]]):Pl("v-if",!0)],512)):Pl("v-if",!0)],34),[[p,()=>e.togglePopperVisible(!1)]])])),default:en((()=>[Un(Tl(s,{ref:"panel",modelValue:e.checkedValue,"onUpdate:modelValue":t[14]||(t[14]=t=>e.checkedValue=t),options:e.options,props:e.props,border:!1,"render-label":e.$slots.default,onExpandChange:e.handleExpandChange,onClose:t[15]||(t[15]=t=>e.togglePopperVisible(!1))},null,8,["modelValue","options","props","render-label","onExpandChange"]),[[ho,!e.filtering]]),e.filterable?Un((Cl(),Al(u,{key:0,ref:"suggestionPanel",tag:"ul",class:"el-cascader__suggestion-panel","view-class":"el-cascader__suggestion-list"},{default:en((()=>[e.suggestions.length?(Cl(!0),Al(gl,{key:0},da(e.suggestions,(t=>(Cl(),Al("li",{key:t.uid,class:["el-cascader__suggestion-item",t.checked&&"is-checked"],tabindex:-1,onClick:n=>e.handleSuggestionClick(t)},[Tl("span",null,d(t.text),1),t.checked?(Cl(),Al("i",Yd)):Pl("v-if",!0)],10,["onClick"])))),128)):Zt(e.$slots,"empty",{key:1},(()=>[Tl("li",Kd,d(e.t("el.cascader.noMatch")),1)]))])),_:1},512)),[[ho,e.filtering]]):Pl("v-if",!0)])),_:1},8,["visible","popper-class","popper-options","onAfterLeave"])},Wd.__file="packages/cascader/src/index.vue",Wd.install=e=>{e.component(Wd.name,Wd)};var Ud=Qn({name:"ElCheckboxButton",props:{modelValue:{type:[Boolean,Number,String],default:()=>{}},label:{type:[Boolean,Number,String]},indeterminate:Boolean,disabled:Boolean,checked:Boolean,name:{type:String,default:void 0},trueLabel:{type:[String,Number],default:void 0},falseLabel:{type:[String,Number],default:void 0}},emits:[tu,"change"],setup(e){const{focus:t,isChecked:n,isDisabled:l,size:a,model:o,handleChange:r}=pd(e),{checkboxGroup:i}=dd();return{focus:t,isChecked:n,isDisabled:l,model:o,handleChange:r,activeStyle:ua((()=>{var e,t,n,l,a,o,r,s;return{backgroundColor:null!==(t=null===(e=null==i?void 0:i.fill)||void 0===e?void 0:e.value)&&void 0!==t?t:"",borderColor:null!==(l=null===(n=null==i?void 0:i.fill)||void 0===n?void 0:n.value)&&void 0!==l?l:"",color:null!==(o=null===(a=null==i?void 0:i.textColor)||void 0===a?void 0:a.value)&&void 0!==o?o:"",boxShadow:null!==(s="-1px 0 0 0 "+(null===(r=null==i?void 0:i.fill)||void 0===r?void 0:r.value))&&void 0!==s?s:""}})),size:a}}});Ud.render=function(e,t,n,l,a,o){return Cl(),Al("label",{class:["el-checkbox-button",[e.size?"el-checkbox-button--"+e.size:"",{"is-disabled":e.isDisabled},{"is-checked":e.isChecked},{"is-focus":e.focus}]],role:"checkbox","aria-checked":e.isChecked,"aria-disabled":e.isDisabled},[e.trueLabel||e.falseLabel?Un((Cl(),Al("input",{key:0,"onUpdate:modelValue":t[1]||(t[1]=t=>e.model=t),checked:e.isChecked,class:"el-checkbox-button__original",type:"checkbox",name:e.name,disabled:e.isDisabled,"true-value":e.trueLabel,"false-value":e.falseLabel,onChange:t[2]||(t[2]=(...t)=>e.handleChange(...t)),onFocus:t[3]||(t[3]=t=>e.focus=!0),onBlur:t[4]||(t[4]=t=>e.focus=!1)},null,40,["checked","name","disabled","true-value","false-value"])),[[lo,e.model]]):Un((Cl(),Al("input",{key:1,"onUpdate:modelValue":t[5]||(t[5]=t=>e.model=t),class:"el-checkbox-button__original",type:"checkbox",name:e.name,disabled:e.isDisabled,value:e.label,onChange:t[6]||(t[6]=(...t)=>e.handleChange(...t)),onFocus:t[7]||(t[7]=t=>e.focus=!0),onBlur:t[8]||(t[8]=t=>e.focus=!1)},null,40,["name","disabled","value"])),[[lo,e.model]]),e.$slots.default||e.label?(Cl(),Al("span",{key:2,class:"el-checkbox-button__inner",style:e.isChecked?e.activeStyle:null},[Zt(e.$slots,"default",{},(()=>[Bl(d(e.label),1)]))],4)):Pl("v-if",!0)],10,["aria-checked","aria-disabled"])},Ud.__file="packages/checkbox/src/checkbox-button.vue",Ud.install=e=>{e.component(Ud.name,Ud)};var Gd=Qn({name:"ElCheckboxGroup",props:{modelValue:{type:[Object,Boolean,Array],default:()=>{}},disabled:Boolean,min:{type:Number,default:void 0},max:{type:Number,default:void 0},size:{type:String,validator:au},fill:{type:String,default:void 0},textColor:{type:String,default:void 0}},emits:[tu,"change"],setup(e,t){const{elFormItem:n,elFormItemSize:l,ELEMENT:a}=dd(),o=ua((()=>e.size||l.value||a.size)),r=e=>{t.emit(tu,e),Mt((()=>{t.emit("change",e)}))},i=ua({get:()=>e.modelValue,set(e){r(e)}});Fl("CheckboxGroup",Object.assign(Object.assign({name:"ElCheckboxGroup",modelValue:i},st(e)),{checkboxGroupSize:o,changeEvent:r})),An((()=>e.modelValue),(e=>{var t;null===(t=n.formItemMitt)||void 0===t||t.emit("el.form.change",[e])}))}});const Xd={class:"el-checkbox-group",role:"group","aria-label":"checkbox-group"};Gd.render=function(e,t,n,l,a,o){return Cl(),Al("div",Xd,[Zt(e.$slots,"default")])},Gd.__file="packages/checkbox/src/checkbox-group.vue",Gd.install=e=>{e.component(Gd.name,Gd)};const Jd=Qn({name:"ElCol",props:{span:{type:Number,default:24},offset:{type:Number,default:0},pull:{type:Number,default:0},push:{type:Number,default:0},xs:{type:[Number,Object],default:()=>({})},sm:{type:[Number,Object],default:()=>({})},md:{type:[Number,Object],default:()=>({})},lg:{type:[Number,Object],default:()=>({})},xl:{type:[Number,Object],default:()=>({})}},setup(e,{slots:t}){const n=$l("ElRow",0),l=ua((()=>n?{display:"block",minHeight:"1px",paddingLeft:n/2+"px",paddingRight:n/2+"px"}:{})),a=ua((()=>{const t=[];return["span","offset","pull","push"].forEach((n=>{const l=e[n];"number"==typeof l&&l>=0&&t.push("span"!==n?`el-col-${n}-${e[n]}`:"el-col-"+e[n])})),["xs","sm","md","lg","xl"].forEach((n=>{if("number"==typeof e[n])t.push(`el-col-${n}-${e[n]}`);else if("object"==typeof e[n]){const l=e[n];Object.keys(l).forEach((e=>{t.push("span"!==e?`el-col-${n}-${e}-${l[e]}`:`el-col-${n}-${l[e]}`)}))}})),t}));return()=>{var e;return ca("div",{class:["el-col",a.value],style:l.value},null===(e=t.default)||void 0===e?void 0:e.call(t))}}});Jd.install=e=>{e.component(Jd.name,Jd)};var Zd=Qn({name:"ElCollapse",props:{accordion:Boolean,modelValue:{type:[Array,String,Number],default:()=>[]}},emits:[tu,"change"],setup(e,{emit:t}){const n=tt([].concat(e.modelValue)),l=_o(),a=l=>{n.value=[].concat(l);const a=e.accordion?n.value[0]:n.value;t(tu,a),t("change",a)},o=t=>{if(e.accordion)a(!n.value[0]&&0!==n.value[0]||n.value[0]!==t?t:"");else{let e=n.value.slice(0);const l=e.indexOf(t);l>-1?e.splice(l,1):e.push(t),a(e)}};return An((()=>e.modelValue),(()=>{n.value=[].concat(e.modelValue)})),l.on("item-click",o),xn((()=>{l.all.clear()})),Fl("collapse",{activeNames:n,collapseMitt:l}),{activeNames:n,setActiveNames:a,handleItemClick:o}}});const Qd={class:"el-collapse",role:"tablist","aria-multiselectable":"true"};Zd.render=function(e,t,n,l,a,o){return Cl(),Al("div",Qd,[Zt(e.$slots,"default")])},Zd.__file="packages/collapse/src/collapse.vue",Zd.install=e=>{e.component(Zd.name,Zd)};var ep=Qn({name:"ElCollapseTransition",setup:()=>({on:{beforeEnter(e){Ms(e,"collapse-transition"),e.dataset||(e.dataset={}),e.dataset.oldPaddingTop=e.style.paddingTop,e.dataset.oldPaddingBottom=e.style.paddingBottom,e.style.height="0",e.style.paddingTop=0,e.style.paddingBottom=0},enter(e){e.dataset.oldOverflow=e.style.overflow,0!==e.scrollHeight?(e.style.height=e.scrollHeight+"px",e.style.paddingTop=e.dataset.oldPaddingTop,e.style.paddingBottom=e.dataset.oldPaddingBottom):(e.style.height="",e.style.paddingTop=e.dataset.oldPaddingTop,e.style.paddingBottom=e.dataset.oldPaddingBottom),e.style.overflow="hidden"},afterEnter(e){Os(e,"collapse-transition"),e.style.height="",e.style.overflow=e.dataset.oldOverflow},beforeLeave(e){e.dataset||(e.dataset={}),e.dataset.oldPaddingTop=e.style.paddingTop,e.dataset.oldPaddingBottom=e.style.paddingBottom,e.dataset.oldOverflow=e.style.overflow,e.style.height=e.scrollHeight+"px",e.style.overflow="hidden"},leave(e){0!==e.scrollHeight&&(Ms(e,"collapse-transition"),e.style.transitionProperty="height",e.style.height=0,e.style.paddingTop=0,e.style.paddingBottom=0)},afterLeave(e){Os(e,"collapse-transition"),e.style.height="",e.style.overflow=e.dataset.oldOverflow,e.style.paddingTop=e.dataset.oldPaddingTop,e.style.paddingBottom=e.dataset.oldPaddingBottom}}})});ep.render=function(e,t,n,l,a,o){return Cl(),Al(Pa,pa(e.on),{default:en((()=>[Zt(e.$slots,"default")])),_:3},16)},ep.__file="packages/transition/collapse-transition/index.vue",ep.install=e=>{e.component(ep.name,ep)};var tp=Qn({name:"ElCollapseItem",components:{ElCollapseTransition:ep},props:{title:{type:String,default:""},name:{type:[String,Number],default:()=>cs()},disabled:Boolean},setup(e){const t=$l("collapse"),n=null==t?void 0:t.collapseMitt,l=tt({height:"auto",display:"block"}),a=tt(0),o=tt(!1),r=tt(!1),i=tt(cs());return{isActive:ua((()=>(null==t?void 0:t.activeNames.value.indexOf(e.name))>-1)),contentWrapStyle:l,contentHeight:a,focusing:o,isClick:r,id:i,handleFocus:()=>{setTimeout((()=>{r.value?r.value=!1:o.value=!0}),50)},handleHeaderClick:()=>{e.disabled||(null==n||n.emit("item-click",e.name),o.value=!1,r.value=!0)},handleEnterClick:()=>{null==n||n.emit("item-click",e.name)},collapse:t}}});const np={class:"el-collapse-item__content"};tp.render=function(e,t,n,l,a,o){const r=pl("el-collapse-transition");return Cl(),Al("div",{class:["el-collapse-item",{"is-active":e.isActive,"is-disabled":e.disabled}]},[Tl("div",{role:"tab","aria-expanded":e.isActive,"aria-controls":"el-collapse-content-"+e.id,"aria-describedby":"el-collapse-content-"+e.id},[Tl("div",{id:"el-collapse-head-"+e.id,class:["el-collapse-item__header",{focusing:e.focusing,"is-active":e.isActive}],role:"button",tabindex:e.disabled?-1:0,onClick:t[1]||(t[1]=(...t)=>e.handleHeaderClick(...t)),onKeyup:t[2]||(t[2]=fo(co(((...t)=>e.handleEnterClick(...t)),["stop"]),["space","enter"])),onFocus:t[3]||(t[3]=(...t)=>e.handleFocus(...t)),onBlur:t[4]||(t[4]=t=>e.focusing=!1)},[Zt(e.$slots,"title",{},(()=>[Bl(d(e.title),1)])),Tl("i",{class:["el-collapse-item__arrow el-icon-arrow-right",{"is-active":e.isActive}]},null,2)],42,["id","tabindex"])],8,["aria-expanded","aria-controls","aria-describedby"]),Tl(r,null,{default:en((()=>[Un(Tl("div",{id:"el-collapse-content-"+e.id,class:"el-collapse-item__wrap",role:"tabpanel","aria-hidden":!e.isActive,"aria-labelledby":"el-collapse-head-"+e.id},[Tl("div",np,[Zt(e.$slots,"default")])],8,["id","aria-hidden","aria-labelledby"]),[[ho,e.isActive]])])),_:3})],2)},tp.__file="packages/collapse/src/collapse-item.vue",tp.install=e=>{e.component(tp.name,tp)};const lp=function(e,t,n){return[e,t*n/((e=(2-t)*n)<1?e:2-e)||0,e/2]},ap=function(e,t){var n;"string"==typeof(n=e)&&-1!==n.indexOf(".")&&1===parseFloat(n)&&(e="100%");const l=function(e){return"string"==typeof e&&-1!==e.indexOf("%")}(e);return e=Math.min(t,Math.max(0,parseFloat(e+""))),l&&(e=parseInt(e*t+"",10)/100),Math.abs(e-t)<1e-6?1:e%t/parseFloat(t)},op={10:"A",11:"B",12:"C",13:"D",14:"E",15:"F"},rp={A:10,B:11,C:12,D:13,E:14,F:15},ip=function(e){return 2===e.length?16*(rp[e[0].toUpperCase()]||+e[0])+(rp[e[1].toUpperCase()]||+e[1]):rp[e[1].toUpperCase()]||+e[1]},sp=function(e,t,n){e=ap(e,255),t=ap(t,255),n=ap(n,255);const l=Math.max(e,t,n),a=Math.min(e,t,n);let o;const r=l,i=l-a,s=0===l?0:i/l;if(l===a)o=0;else{switch(l){case e:o=(t-n)/i+(t<n?6:0);break;case t:o=(n-e)/i+2;break;case n:o=(e-t)/i+4}o/=6}return{h:360*o,s:100*s,v:100*r}},up=function(e,t,n){e=6*ap(e,360),t=ap(t,100),n=ap(n,100);const l=Math.floor(e),a=e-l,o=n*(1-t),r=n*(1-a*t),i=n*(1-(1-a)*t),s=l%6,u=[n,r,o,o,i,n][s],c=[i,n,n,r,o,o][s],d=[o,o,i,n,n,r][s];return{r:Math.round(255*u),g:Math.round(255*c),b:Math.round(255*d)}};class cp{constructor(e){this._hue=0,this._saturation=100,this._value=100,this._alpha=100,this.enableAlpha=!1,this.format="hex",this.value="",e=e||{};for(const t in e)e.hasOwnProperty(t)&&(this[t]=e[t]);this.doOnChange()}set(e,t){if(1!==arguments.length||"object"!=typeof e)this["_"+e]=t,this.doOnChange();else for(const t in e)e.hasOwnProperty(t)&&this.set(t,e[t])}get(e){return this["_"+e]}toRgb(){return up(this._hue,this._saturation,this._value)}fromString(e){if(!e)return this._hue=0,this._saturation=100,this._value=100,void this.doOnChange();const t=(e,t,n)=>{this._hue=Math.max(0,Math.min(360,e)),this._saturation=Math.max(0,Math.min(100,t)),this._value=Math.max(0,Math.min(100,n)),this.doOnChange()};if(-1!==e.indexOf("hsl")){const n=e.replace(/hsla|hsl|\(|\)/gm,"").split(/\s|,/g).filter((e=>""!==e)).map(((e,t)=>t>2?parseFloat(e):parseInt(e,10)));if(4===n.length?this._alpha=Math.floor(100*parseFloat(n[3])):3===n.length&&(this._alpha=100),n.length>=3){const{h:e,s:l,v:a}=function(e,t,n){n/=100;let l=t/=100;const a=Math.max(n,.01);return t*=(n*=2)<=1?n:2-n,l*=a<=1?a:2-a,{h:e,s:100*(0===n?2*l/(a+l):2*t/(n+t)),v:(n+t)/2*100}}(n[0],n[1],n[2]);t(e,l,a)}}else if(-1!==e.indexOf("hsv")){const n=e.replace(/hsva|hsv|\(|\)/gm,"").split(/\s|,/g).filter((e=>""!==e)).map(((e,t)=>t>2?parseFloat(e):parseInt(e,10)));4===n.length?this._alpha=Math.floor(100*parseFloat(n[3])):3===n.length&&(this._alpha=100),n.length>=3&&t(n[0],n[1],n[2])}else if(-1!==e.indexOf("rgb")){const n=e.replace(/rgba|rgb|\(|\)/gm,"").split(/\s|,/g).filter((e=>""!==e)).map(((e,t)=>t>2?parseFloat(e):parseInt(e,10)));if(4===n.length?this._alpha=Math.floor(100*parseFloat(n[3])):3===n.length&&(this._alpha=100),n.length>=3){const{h:e,s:l,v:a}=sp(n[0],n[1],n[2]);t(e,l,a)}}else if(-1!==e.indexOf("#")){const n=e.replace("#","").trim();if(!/^(?:[0-9a-fA-F]{3}){1,2}$/.test(n))return;let l,a,o;3===n.length?(l=ip(n[0]+n[0]),a=ip(n[1]+n[1]),o=ip(n[2]+n[2])):6!==n.length&&8!==n.length||(l=ip(n.substring(0,2)),a=ip(n.substring(2,4)),o=ip(n.substring(4,6))),8===n.length?this._alpha=Math.floor(ip(n.substring(6))/255*100):3!==n.length&&6!==n.length||(this._alpha=100);const{h:r,s:i,v:s}=sp(l,a,o);t(r,i,s)}}compare(e){return Math.abs(e._hue-this._hue)<2&&Math.abs(e._saturation-this._saturation)<1&&Math.abs(e._value-this._value)<1&&Math.abs(e._alpha-this._alpha)<1}doOnChange(){const{_hue:e,_saturation:t,_value:n,_alpha:l,format:a}=this;if(this.enableAlpha)switch(a){case"hsl":const a=lp(e,t/100,n/100);this.value=`hsla(${e}, ${Math.round(100*a[1])}%, ${Math.round(100*a[2])}%, ${l/100})`;break;case"hsv":this.value=`hsva(${e}, ${Math.round(t)}%, ${Math.round(n)}%, ${l/100})`;break;default:const{r:o,g:r,b:i}=up(e,t,n);this.value=`rgba(${o}, ${r}, ${i}, ${l/100})`}else switch(a){case"hsl":const l=lp(e,t/100,n/100);this.value=`hsl(${e}, ${Math.round(100*l[1])}%, ${Math.round(100*l[2])}%)`;break;case"hsv":this.value=`hsv(${e}, ${Math.round(t)}%, ${Math.round(n)}%)`;break;case"rgb":const{r:a,g:o,b:r}=up(e,t,n);this.value=`rgb(${a}, ${o}, ${r})`;break;default:this.value=function({r:e,g:t,b:n}){const l=function(e){e=Math.min(Math.round(e),255);const t=Math.floor(e/16),n=e%16;return""+(op[t]||t)+(op[n]||n)};return isNaN(e)||isNaN(t)||isNaN(n)?"":"#"+l(e)+l(t)+l(n)}(up(e,t,n))}}}let dp=!1;const pp=()=>!1;function fp(e,t){if(is)return;const n=function(e){var n;null===(n=t.drag)||void 0===n||n.call(t,e)},l=function(e){var a;Ss(document,"mousemove",n),Ss(document,"mouseup",l),Ss(document,"selectstart",pp),Ss(document,"dragstart",pp),dp=!1,null===(a=t.end)||void 0===a||a.call(t,e)};As(e,"mousedown",(function(e){var a;dp||(As(document,"selectstart",pp),As(document,"dragstart",pp),As(document,"mousemove",n),As(document,"mouseup",l),dp=!0,null===(a=t.start)||void 0===a||a.call(t,e))}))}var hp=Qn({name:"ElSlPanel",props:{color:{type:Object,required:!0}},setup(e){const t=la(),n=tt(0),l=tt(0),a=tt("hsl(0, 100%, 50%)"),o=ua((()=>({hue:e.color.get("hue"),value:e.color.get("value")})));function r(){const o=e.color.get("saturation"),r=e.color.get("value"),i=t.vnode.el;let{clientWidth:s,clientHeight:u}=i;l.value=o*s/100,n.value=(100-r)*u/100,a.value="hsl("+e.color.get("hue")+", 100%, 50%)"}function i(a){const o=t.vnode.el.getBoundingClientRect();let r=a.clientX-o.left,i=a.clientY-o.top;r=Math.max(0,r),r=Math.min(r,o.width),i=Math.max(0,i),i=Math.min(i,o.height),l.value=r,n.value=i,e.color.set({saturation:r/o.width*100,value:100-i/o.height*100})}return An(o,(()=>{r()})),mn((()=>{fp(t.vnode.el,{drag:e=>{i(e)},end:e=>{i(e)}}),r()})),{cursorTop:n,cursorLeft:l,background:a,colorValue:o,handleDrag:i,update:r}}});const vp=Tl("div",{class:"el-color-svpanel__white"},null,-1),mp=Tl("div",{class:"el-color-svpanel__black"},null,-1),gp=Tl("div",null,null,-1);hp.render=function(e,t,n,l,a,o){return Cl(),Al("div",{class:"el-color-svpanel",style:{backgroundColor:e.background}},[vp,mp,Tl("div",{class:"el-color-svpanel__cursor",style:{top:e.cursorTop+"px",left:e.cursorLeft+"px"}},[gp],4)],4)},hp.__file="packages/color-picker/src/components/sv-panel.vue";var bp=Qn({name:"ElColorHueSlider",props:{color:{type:Object,required:!0},vertical:Boolean},setup(e){const t=la(),n=tt(null),l=tt(null),a=tt(0),o=tt(0),r=ua((()=>e.color.get("hue")));function i(l){const a=t.vnode.el.getBoundingClientRect();let o;if(e.vertical){let e=l.clientY-a.top;e=Math.min(e,a.height-n.value.offsetHeight/2),e=Math.max(n.value.offsetHeight/2,e),o=Math.round((e-n.value.offsetHeight/2)/(a.height-n.value.offsetHeight)*360)}else{let e=l.clientX-a.left;e=Math.min(e,a.width-n.value.offsetWidth/2),e=Math.max(n.value.offsetWidth/2,e),o=Math.round((e-n.value.offsetWidth/2)/(a.width-n.value.offsetWidth)*360)}e.color.set("hue",o)}function s(){a.value=function(){const l=t.vnode.el;if(e.vertical)return 0;const a=e.color.get("hue");return l?Math.round(a*(l.offsetWidth-n.value.offsetWidth/2)/360):0}(),o.value=function(){const l=t.vnode.el;if(!e.vertical)return 0;const a=e.color.get("hue");return l?Math.round(a*(l.offsetHeight-n.value.offsetHeight/2)/360):0}()}return An(r,(()=>{s()})),mn((()=>{const e={drag:e=>{i(e)},end:e=>{i(e)}};fp(l.value,e),fp(n.value,e),s()})),{bar:l,thumb:n,thumbLeft:a,thumbTop:o,hueValue:r,handleClick:function(e){e.target!==n.value&&i(e)},update:s}}});bp.render=function(e,t,n,l,a,o){return Cl(),Al("div",{class:["el-color-hue-slider",{"is-vertical":e.vertical}]},[Tl("div",{ref:"bar",class:"el-color-hue-slider__bar",onClick:t[1]||(t[1]=(...t)=>e.handleClick(...t))},null,512),Tl("div",{ref:"thumb",class:"el-color-hue-slider__thumb",style:{left:e.thumbLeft+"px",top:e.thumbTop+"px"}},null,4)],2)},bp.__file="packages/color-picker/src/components/hue-slider.vue";var yp=Qn({name:"ElColorAlphaSlider",props:{color:{type:Object,required:!0},vertical:{type:Boolean,default:!1}},setup(e){const t=la(),n=tt(null),l=tt(null),a=tt(0),o=tt(0),r=tt(null);function i(l){const a=t.vnode.el.getBoundingClientRect();if(e.vertical){let t=l.clientY-a.top;t=Math.max(n.value.offsetHeight/2,t),t=Math.min(t,a.height-n.value.offsetHeight/2),e.color.set("alpha",Math.round((t-n.value.offsetHeight/2)/(a.height-n.value.offsetHeight)*100))}else{let t=l.clientX-a.left;t=Math.max(n.value.offsetWidth/2,t),t=Math.min(t,a.width-n.value.offsetWidth/2),e.color.set("alpha",Math.round((t-n.value.offsetWidth/2)/(a.width-n.value.offsetWidth)*100))}}function s(){a.value=function(){if(e.vertical)return 0;const l=t.vnode.el,a=e.color.get("alpha");return l?Math.round(a*(l.offsetWidth-n.value.offsetWidth/2)/100):0}(),o.value=function(){const l=t.vnode.el;if(!e.vertical)return 0;const a=e.color.get("alpha");return l?Math.round(a*(l.offsetHeight-n.value.offsetHeight/2)/100):0}(),r.value=function(){if(e.color&&e.color.value){const{r:t,g:n,b:l}=e.color.toRgb();return`linear-gradient(to right, rgba(${t}, ${n}, ${l}, 0) 0%, rgba(${t}, ${n}, ${l}, 1) 100%)`}return null}()}return An((()=>e.color.get("alpha")),(()=>{s()})),An((()=>e.color.value),(()=>{s()})),mn((()=>{const e={drag:e=>{i(e)},end:e=>{i(e)}};fp(l.value,e),fp(n.value,e),s()})),{thumb:n,bar:l,thumbLeft:a,thumbTop:o,background:r,handleClick:function(e){e.target!==n.value&&i(e)},update:s}}});yp.render=function(e,t,n,l,a,o){return Cl(),Al("div",{class:["el-color-alpha-slider",{"is-vertical":e.vertical}]},[Tl("div",{ref:"bar",class:"el-color-alpha-slider__bar",style:{background:e.background},onClick:t[1]||(t[1]=(...t)=>e.handleClick(...t))},null,4),Tl("div",{ref:"thumb",class:"el-color-alpha-slider__thumb",style:{left:e.thumbLeft+"px",top:e.thumbTop+"px"}},null,4)],2)},yp.__file="packages/color-picker/src/components/alpha-slider.vue";var xp=Qn({props:{colors:{type:Array,required:!0},color:{type:Object,required:!0}},setup(e){const{currentColor:t}=_p(),n=tt(l(e.colors,e.color));function l(e,t){return e.map((e=>{const n=new cp;return n.enableAlpha=!0,n.format="rgba",n.fromString(e),n.selected=n.value===t.value,n}))}return An(t,(e=>{const t=new cp;t.fromString(e),n.value.forEach((e=>{e.selected=t.compare(e)}))})),Cn((()=>{n.value=l(e.colors,e.color)})),{rgbaColors:n,handleSelect:function(t){e.color.fromString(e.colors[t])}}}});const kp={class:"el-color-predefine"},wp={class:"el-color-predefine__colors"};xp.render=function(e,t,n,l,a,o){return Cl(),Al("div",kp,[Tl("div",wp,[(Cl(!0),Al(gl,null,da(e.rgbaColors,((t,n)=>(Cl(),Al("div",{key:e.colors[n],class:["el-color-predefine__color-selector",{selected:t.selected,"is-alpha":t._alpha<100}],onClick:t=>e.handleSelect(n)},[Tl("div",{style:{"background-color":t.value}},null,4)],10,["onClick"])))),128))])])},xp.__file="packages/color-picker/src/components/predefine.vue";const Cp=Symbol(),_p=()=>$l(Cp);var Ap=Qn({name:"ElColorPicker",components:{ElPopper:Ku,ElInput:cu,SvPanel:hp,HueSlider:bp,AlphaSlider:yp,ElButton:sc,Predefine:xp},directives:{ClickOutside:Xs},props:{modelValue:String,showAlpha:Boolean,colorFormat:String,disabled:Boolean,size:{type:String,validator:au},popperClass:String,predefine:Array},emits:{change:null,"active-change":null,[tu]:null},setup(e,{emit:t}){const n=ms(),l=$l("elForm",{}),a=$l("elFormItem",{}),o=tt(null),r=tt(null),i=tt(null),s=tt(null),u=Ye(new cp({enableAlpha:e.showAlpha,format:e.colorFormat})),c=tt(!1),d=tt(!1),p=tt(""),f=ua((()=>e.modelValue||d.value?function(e,t){if(!(e instanceof cp))throw Error("color should be instance of _color Class");const{r:n,g:l,b:a}=e.toRgb();return t?`rgba(${n}, ${l}, ${a}, ${e.get("alpha")/100})`:`rgb(${n}, ${l}, ${a})`}(u,e.showAlpha):"transparent")),h=ua((()=>e.size||a.size||n.size)),v=ua((()=>e.disabled||l.disabled)),m=ua((()=>e.modelValue||d.value?u.value:""));An((()=>e.modelValue),(e=>{e?e&&e!==u.value&&u.fromString(e):d.value=!1})),An(m,(e=>{p.value=e,t("active-change",e)})),An((()=>u.value),(()=>{e.modelValue||d.value||(d.value=!0)}));const g=ko()((function(e){c.value=e}),100);function b(){Mt((()=>{e.modelValue?u.fromString(e.modelValue):d.value=!1}))}return mn((()=>{e.modelValue&&(u.fromString(e.modelValue),p.value=m.value)})),An(c,(()=>{Mt((()=>{var e,t,n;null===(e=o.value)||void 0===e||e.update(),null===(t=r.value)||void 0===t||t.update(),null===(n=i.value)||void 0===n||n.update()}))})),Fl(Cp,{currentColor:m}),{color:u,colorDisabled:v,colorSize:h,displayedColor:f,showPanelColor:d,showPicker:c,customInput:p,handleConfirm:function(){u.fromString(p.value)},hide:function(){g(!1),b()},handleTrigger:function(){v.value||g(!c.value)},clear:function(){var n;g(!1),t(tu,null),t("change",null),null!==e.modelValue&&(null===(n=a.formItemMitt)||void 0===n||n.emit("el.form.change",null)),b()},confirmValue:function(){var e;const n=u.value;t(tu,n),t("change",n),null===(e=a.formItemMitt)||void 0===e||e.emit("el.form.change",n),g(!1)},t:vc,hue:o,svPanel:r,alpha:i,popper:s}}});const Sp={class:"el-color-dropdown__main-wrapper"},Ep={class:"el-color-dropdown__btns"},Mp={class:"el-color-dropdown__value"},Op={key:0,class:"el-color-picker__mask"},Dp={key:0,class:"el-color-picker__empty el-icon-close"},Tp={class:"el-color-picker__icon el-icon-arrow-down"};Ap.render=function(e,t,n,l,a,o){const r=pl("hue-slider"),i=pl("sv-panel"),s=pl("alpha-slider"),u=pl("predefine"),c=pl("el-input"),p=pl("el-button"),f=pl("el-popper"),h=hl("click-outside");return Cl(),Al(f,{ref:"popper",visible:e.showPicker,"onUpdate:visible":t[3]||(t[3]=t=>e.showPicker=t),effect:"light","manual-mode":"",trigger:"click","show-arrow":!1,offset:0,transition:"el-zoom-in-top","gpu-acceleration":!1,"popper-class":"el-color-picker__panel el-color-dropdown "+e.popperClass,"stop-popper-mouse-event":!1},{default:en((()=>[Un(Tl("div",null,[Tl("div",Sp,[Tl(r,{ref:"hue",class:"hue-slider",color:e.color,vertical:""},null,8,["color"]),Tl(i,{ref:"svPanel",color:e.color},null,8,["color"])]),e.showAlpha?(Cl(),Al(s,{key:0,ref:"alpha",color:e.color},null,8,["color"])):Pl("v-if",!0),e.predefine?(Cl(),Al(u,{key:1,ref:"predefine",color:e.color,colors:e.predefine},null,8,["color","colors"])):Pl("v-if",!0),Tl("div",Ep,[Tl("span",Mp,[Tl(c,{modelValue:e.customInput,"onUpdate:modelValue":t[1]||(t[1]=t=>e.customInput=t),"validate-event":!1,size:"mini",onKeyup:fo(e.handleConfirm,["enter"]),onBlur:e.handleConfirm},null,8,["modelValue","onKeyup","onBlur"])]),Tl(p,{size:"mini",type:"text",class:"el-color-dropdown__link-btn",onClick:e.clear},{default:en((()=>[Bl(d(e.t("el.colorpicker.clear")),1)])),_:1},8,["onClick"]),Tl(p,{plain:"",size:"mini",class:"el-color-dropdown__btn",onClick:e.confirmValue},{default:en((()=>[Bl(d(e.t("el.colorpicker.confirm")),1)])),_:1},8,["onClick"])])],512),[[h,e.hide]])])),trigger:en((()=>[Tl("div",{class:["el-color-picker",e.colorDisabled?"is-disabled":"",e.colorSize?"el-color-picker--"+e.colorSize:""]},[e.colorDisabled?(Cl(),Al("div",Op)):Pl("v-if",!0),Tl("div",{class:"el-color-picker__trigger",onClick:t[2]||(t[2]=(...t)=>e.handleTrigger(...t))},[Tl("span",{class:["el-color-picker__color",{"is-alpha":e.showAlpha}]},[Tl("span",{class:"el-color-picker__color-inner",style:{backgroundColor:e.displayedColor}},null,4),e.modelValue||e.showPanelColor?Pl("v-if",!0):(Cl(),Al("span",Dp))],2),Un(Tl("span",Tp,null,512),[[ho,e.modelValue||e.showPanelColor]])])],2)])),_:1},8,["visible","popper-class"])},Ap.__file="packages/color-picker/src/index.vue",Ap.install=e=>{e.component(Ap.name,Ap)};var Np=Qn({name:"ElContainer",props:{direction:{type:String,default:""}},setup:(e,{slots:t})=>({isVertical:ua((()=>"vertical"===e.direction||"horizontal"!==e.direction&&!(!t||!t.default)&&t.default().some((e=>{const t=e.type.name;return"ElHeader"===t||"ElFooter"===t}))))})});Np.render=function(e,t,n,l,a,o){return Cl(),Al("section",{class:["el-container",{"is-vertical":e.isVertical}]},[Zt(e.$slots,"default")],2)},Np.__file="packages/container/src/container.vue",Np.install=e=>{e.component(Np.name,Np)};var Bp=Qn({props:{date:{type:Object},minDate:{type:Object},maxDate:{type:Object},parsedValue:{type:[Object,Array]},selectionMode:{type:String,default:"day"},showWeekNumber:{type:Boolean,default:!1},disabledDate:{type:Function},cellClassName:{type:Function},rangeState:{type:Object,default:()=>({endDate:null,selecting:!1})}},emits:["changerange","pick","select"],setup(e,t){const n=tt(null),l=tt(null),a=tt([[],[],[],[],[],[]]),o=e.date.$locale().weekStart||7,r=e.date.locale("en").localeData().weekdaysShort().map((e=>e.toLowerCase())),i=ua((()=>o>3?7-o:-o)),s=ua((()=>{const t=e.date.startOf("month");return t.subtract(t.day()||7,"day")})),u=ua((()=>r.concat(r).slice(o,o+7))),c=ua((()=>{const t=e.date.startOf("month"),n=t.day()||7,l=t.daysInMonth(),o=t.subtract(1,"month").daysInMonth(),r=i.value,u=a.value;let c=1;const d="dates"===e.selectionMode?ds(e.parsedValue):[],f=Zr()().startOf("day");for(let t=0;t<6;t++){const a=u[t];e.showWeekNumber&&(a[0]||(a[0]={type:"week",text:s.value.add(7*t+1,"day").week()}));for(let i=0;i<7;i++){let u=a[e.showWeekNumber?i+1:i];u||(u={row:t,column:i,type:"normal",inRange:!1,start:!1,end:!1});const p=7*t+i,h=s.value.add(p-r,"day");u.type="normal";const v=e.rangeState.endDate||e.maxDate||e.rangeState.selecting&&e.minDate;if(u.inRange=e.minDate&&h.isSameOrAfter(e.minDate,"day")&&v&&h.isSameOrBefore(v,"day"),u.start=e.minDate&&h.isSame(e.minDate,"day"),u.end=v&&h.isSame(v,"day"),h.isSame(f,"day")&&(u.type="today"),t>=0&&t<=1){const e=n+r<0?7+n+r:n+r;i+7*t>=e?u.text=c++:(u.text=o-(e-i%7)+1+7*t,u.type="prev-month")}else c<=l?u.text=c++:(u.text=c++-l,u.type="next-month");const m=h.toDate();u.selected=d.find((e=>e.valueOf()===h.valueOf())),u.disabled=e.disabledDate&&e.disabledDate(m),u.customClass=e.cellClassName&&e.cellClassName(m),a[e.showWeekNumber?i+1:i]=u}if("week"===e.selectionMode){const t=e.showWeekNumber?1:0,n=e.showWeekNumber?7:6,l=p(a[t+1]);a[t].inRange=l,a[t].start=l,a[n].inRange=l,a[n].end=l}}return u})),d=(t,n)=>{const l=7*t+(n-(e.showWeekNumber?1:0))-i.value;return s.value.add(l,"day")},p=t=>{if("week"!==e.selectionMode)return!1;let n=e.date.startOf("day");if("prev-month"===t.type&&(n=n.subtract(1,"month")),"next-month"===t.type&&(n=n.add(1,"month")),n=n.date(parseInt(t.text,10)),e.parsedValue&&!Array.isArray(e.parsedValue)){const t=(e.parsedValue.day()-o+7)%7-1;return e.parsedValue.subtract(t,"day").isSame(n,"day")}return!1};return{handleMouseMove:a=>{if(!e.rangeState.selecting)return;let o=a.target;if("SPAN"===o.tagName&&(o=o.parentNode.parentNode),"DIV"===o.tagName&&(o=o.parentNode),"TD"!==o.tagName)return;const r=o.parentNode.rowIndex-1,i=o.cellIndex;c.value[r][i].disabled||r===n.value&&i===l.value||(n.value=r,l.value=i,t.emit("changerange",{selecting:!0,endDate:d(r,i)}))},t:vc,rows:c,isWeekActive:p,getCellClasses:t=>{let n=[];return"normal"!==t.type&&"today"!==t.type||t.disabled?n.push(t.type):(n.push("available"),"today"===t.type&&n.push("today")),"day"!==e.selectionMode||"normal"!==t.type&&"today"!==t.type||!((t,n)=>!!n&&Zr()(n).isSame(e.date.date(Number(t.text)),"day"))(t,e.parsedValue)||n.push("current"),!t.inRange||"normal"!==t.type&&"today"!==t.type&&"week"!==e.selectionMode||(n.push("in-range"),t.start&&n.push("start-date"),t.end&&n.push("end-date")),t.disabled&&n.push("disabled"),t.selected&&n.push("selected"),t.customClass&&n.push(t.customClass),n.join(" ")},WEEKS:u,handleClick:n=>{let l=n.target;if("SPAN"===l.tagName&&(l=l.parentNode.parentNode),"DIV"===l.tagName&&(l=l.parentNode),"TD"!==l.tagName)return;const a=l.parentNode.rowIndex-1,o="week"===e.selectionMode?1:l.cellIndex,r=c.value[a][o];if(r.disabled||"week"===r.type)return;const i=d(a,o);if("range"===e.selectionMode)e.rangeState.selecting?(i>=e.minDate?t.emit("pick",{minDate:e.minDate,maxDate:i}):t.emit("pick",{minDate:i,maxDate:e.minDate}),t.emit("select",!1)):(t.emit("pick",{minDate:i,maxDate:null}),t.emit("select",!0));else if("day"===e.selectionMode)t.emit("pick",i);else if("week"===e.selectionMode){const e=i.week(),n=i.year()+"w"+e;t.emit("pick",{year:i.year(),week:e,value:n,date:i})}else if("dates"===e.selectionMode){const n=r.selected?ds(e.parsedValue).filter((e=>e.valueOf()!==i.valueOf())):ds(e.parsedValue).concat([i]);t.emit("pick",n)}}}}});const Pp={key:0};Bp.render=function(e,t,n,l,a,o){return Cl(),Al("table",{cellspacing:"0",cellpadding:"0",class:["el-date-table",{"is-week-mode":"week"===e.selectionMode}],onClick:t[1]||(t[1]=(...t)=>e.handleClick(...t)),onMousemove:t[2]||(t[2]=(...t)=>e.handleMouseMove(...t))},[Tl("tbody",null,[Tl("tr",null,[e.showWeekNumber?(Cl(),Al("th",Pp,d(e.t("el.datepicker.week")),1)):Pl("v-if",!0),(Cl(!0),Al(gl,null,da(e.WEEKS,((t,n)=>(Cl(),Al("th",{key:n},d(e.t("el.datepicker.weeks."+t)),1)))),128))]),(Cl(!0),Al(gl,null,da(e.rows,((t,n)=>(Cl(),Al("tr",{key:n,class:["el-date-table__row",{current:e.isWeekActive(t[1])}]},[(Cl(!0),Al(gl,null,da(t,((t,n)=>(Cl(),Al("td",{key:n,class:e.getCellClasses(t)},[Tl("div",null,[Tl("span",null,d(t.text),1)])],2)))),128))],2)))),128))])],34)},Bp.__file="packages/date-picker/src/date-picker-com/basic-date-table.vue";var Vp=Qn({props:{disabledDate:{type:Function},selectionMode:{type:String,default:"month"},minDate:{type:Object},maxDate:{type:Object},date:{type:Object},parsedValue:{type:Object},rangeState:{type:Object,default:()=>({endDate:null,selecting:!1})}},emits:["changerange","pick","select"],setup(e,t){const n=tt(e.date.locale("en").localeData().monthsShort().map((e=>e.toLowerCase()))),l=tt([[],[],[]]),a=tt(null),o=tt(null),r=ua((()=>{const t=l.value,n=Zr()().startOf("month");for(let l=0;l<3;l++){const a=t[l];for(let t=0;t<4;t++){let o=a[t];o||(o={row:l,column:t,type:"normal",inRange:!1,start:!1,end:!1}),o.type="normal";const r=4*l+t,i=e.date.startOf("year").month(r),s=e.rangeState.endDate||e.maxDate||e.rangeState.selecting&&e.minDate;o.inRange=e.minDate&&i.isSameOrAfter(e.minDate,"month")&&s&&i.isSameOrBefore(s,"month"),o.start=e.minDate&&i.isSame(e.minDate,"month"),o.end=s&&i.isSame(s,"month"),n.isSame(i)&&(o.type="today"),o.text=r;let u=i.toDate();o.disabled=e.disabledDate&&e.disabledDate(u),a[t]=o}}return t}));return{handleMouseMove:n=>{if(!e.rangeState.selecting)return;let l=n.target;if("A"===l.tagName&&(l=l.parentNode.parentNode),"DIV"===l.tagName&&(l=l.parentNode),"TD"!==l.tagName)return;const i=l.parentNode.rowIndex,s=l.cellIndex;r.value[i][s].disabled||i===a.value&&s===o.value||(a.value=i,o.value=s,t.emit("changerange",{selecting:!0,endDate:e.date.startOf("year").month(4*i+s)}))},handleMonthTableClick:n=>{let l=n.target;if("A"===l.tagName&&(l=l.parentNode.parentNode),"DIV"===l.tagName&&(l=l.parentNode),"TD"!==l.tagName)return;if(Es(l,"disabled"))return;const a=l.cellIndex,o=4*l.parentNode.rowIndex+a,r=e.date.startOf("year").month(o);"range"===e.selectionMode?e.rangeState.selecting?(r>=e.minDate?t.emit("pick",{minDate:e.minDate,maxDate:r}):t.emit("pick",{minDate:r,maxDate:e.minDate}),t.emit("select",!1)):(t.emit("pick",{minDate:r,maxDate:null}),t.emit("select",!0)):t.emit("pick",o)},rows:r,getCellStyle:t=>{const n={},l=e.date.year(),a=new Date,o=t.text;return n.disabled=!!e.disabledDate&&((e,t)=>{const n=Zr()().startOf("month").month(t).year(e),l=n.daysInMonth();return Hc(l).map((e=>n.add(e,"day").toDate()))})(l,o).every(e.disabledDate),n.current=ds(e.parsedValue).findIndex((e=>e.year()===l&&e.month()===o))>=0,n.today=a.getFullYear()===l&&a.getMonth()===o,t.inRange&&(n["in-range"]=!0,t.start&&(n["start-date"]=!0),t.end&&(n["end-date"]=!0)),n},t:vc,months:n}}});const Ip={class:"cell"};Vp.render=function(e,t,n,l,a,o){return Cl(),Al("table",{class:"el-month-table",onClick:t[1]||(t[1]=(...t)=>e.handleMonthTableClick(...t)),onMousemove:t[2]||(t[2]=(...t)=>e.handleMouseMove(...t))},[Tl("tbody",null,[(Cl(!0),Al(gl,null,da(e.rows,((t,n)=>(Cl(),Al("tr",{key:n},[(Cl(!0),Al(gl,null,da(t,((t,n)=>(Cl(),Al("td",{key:n,class:e.getCellStyle(t)},[Tl("div",null,[Tl("a",Ip,d(e.t("el.datepicker.months."+e.months[t.text])),1)])],2)))),128))])))),128))])],32)},Vp.__file="packages/date-picker/src/date-picker-com/basic-month-table.vue";var Lp=Qn({props:{disabledDate:{type:Function},parsedValue:{type:Object},date:{type:Object}},emits:["pick"],setup:(e,t)=>({startYear:ua((()=>10*Math.floor(e.date.year()/10))),getCellStyle:t=>{const n={},l=Zr()();return n.disabled=!!e.disabledDate&&(e=>{const t=Zr()().startOf("year"),n=Zr()(e).isLeapYear()?366:365;return Hc(n).map((e=>t.add(e,"day").toDate()))})(t).every(e.disabledDate),n.current=ds(e.parsedValue).findIndex((e=>e.year()===t))>=0,n.today=l.year()===t,n},handleYearTableClick:e=>{const n=e.target;if("A"===n.tagName){if(Es(n.parentNode,"disabled"))return;const e=n.textContent||n.innerText;t.emit("pick",Number(e))}}})});const zp={class:"cell"},Fp={class:"cell"},$p={class:"cell"},Rp={class:"cell"},jp={class:"cell"},Hp={class:"cell"},Wp={class:"cell"},qp={class:"cell"},Yp={class:"cell"},Kp={class:"cell"},Up=Tl("td",null,null,-1),Gp=Tl("td",null,null,-1);Lp.render=function(e,t,n,l,a,o){return Cl(),Al("table",{class:"el-year-table",onClick:t[1]||(t[1]=(...t)=>e.handleYearTableClick(...t))},[Tl("tbody",null,[Tl("tr",null,[Tl("td",{class:["available",e.getCellStyle(e.startYear+0)]},[Tl("a",zp,d(e.startYear),1)],2),Tl("td",{class:["available",e.getCellStyle(e.startYear+1)]},[Tl("a",Fp,d(e.startYear+1),1)],2),Tl("td",{class:["available",e.getCellStyle(e.startYear+2)]},[Tl("a",$p,d(e.startYear+2),1)],2),Tl("td",{class:["available",e.getCellStyle(e.startYear+3)]},[Tl("a",Rp,d(e.startYear+3),1)],2)]),Tl("tr",null,[Tl("td",{class:["available",e.getCellStyle(e.startYear+4)]},[Tl("a",jp,d(e.startYear+4),1)],2),Tl("td",{class:["available",e.getCellStyle(e.startYear+5)]},[Tl("a",Hp,d(e.startYear+5),1)],2),Tl("td",{class:["available",e.getCellStyle(e.startYear+6)]},[Tl("a",Wp,d(e.startYear+6),1)],2),Tl("td",{class:["available",e.getCellStyle(e.startYear+7)]},[Tl("a",qp,d(e.startYear+7),1)],2)]),Tl("tr",null,[Tl("td",{class:["available",e.getCellStyle(e.startYear+8)]},[Tl("a",Yp,d(e.startYear+8),1)],2),Tl("td",{class:["available",e.getCellStyle(e.startYear+9)]},[Tl("a",Kp,d(e.startYear+9),1)],2),Up,Gp])])])},Lp.__file="packages/date-picker/src/date-picker-com/basic-year-table.vue";var Xp=Qn({components:{DateTable:Bp,ElInput:cu,ElButton:sc,TimePickPanel:Dc,MonthTable:Vp,YearTable:Lp},directives:{clickoutside:Xs},props:{visible:{type:Boolean,default:!1},parsedValue:{type:[Object,Array]},format:{type:String,default:""},type:{type:String,required:!0}},emits:["pick","set-picker-option"],setup(e,t){const n=tt(Zr()()),l=ua((()=>n.value.month())),a=ua((()=>n.value.year())),o=tt([]),r=tt(null),i=tt(null),s=t=>!(o.value.length>0&&(o.value,e.format,0)),u=e=>v.value?e.millisecond(0):M?Zr()(M).year(e.year()).month(e.month()).date(e.date()):e.startOf("day"),c=(e,...n)=>{if(e)if(Array.isArray(e)){const l=e.map(u);t.emit("pick",l,...n)}else t.emit("pick",u(e),...n);else t.emit("pick",e,...n);r.value=null,i.value=null},d=tt("date"),p=ua((()=>{const e=vc("el.datepicker.year");if("year"===d.value){const t=10*Math.floor(a.value/10);return e?t+" "+e+" - "+(t+9)+" "+e:t+" - "+(t+9)}return a.value+" "+e})),f=ua((()=>["week","month","year","dates"].includes(e.type)?e.type:"day"));An((()=>f.value),(e=>{["month","year"].includes(e)?d.value=e:d.value="date"}),{immediate:!0});const h=ua((()=>!!A.length)),v=ua((()=>"datetime"===e.type||"datetimerange"===e.type)),m=ua((()=>v.value||"dates"===f.value)),g=ua((()=>qc(e.format))),b=ua((()=>Wc(e.format))),y=ua((()=>i.value?i.value:e.parsedValue||O?(e.parsedValue||n.value).format(g.value):void 0)),x=ua((()=>r.value?r.value:e.parsedValue||O?(e.parsedValue||n.value).format(b.value):void 0)),k=tt(!1),w=()=>Zr()(O),C=e=>{const l={year:{38:-4,40:4,37:-1,39:1,offset:(e,t)=>e.setFullYear(e.getFullYear()+t)},month:{38:-4,40:4,37:-1,39:1,offset:(e,t)=>e.setMonth(e.getMonth()+t)},week:{38:-1,40:1,37:-1,39:1,offset:(e,t)=>e.setDate(e.getDate()+7*t)},day:{38:-7,40:7,37:-1,39:1,offset:(e,t)=>e.setDate(e.getDate()+t)}},a=n.value.toDate();for(;Math.abs(n.value.diff(a,"year",!0))<1;){const o=l[f.value];if(o.offset(a,o[e]),S&&S(a))continue;const r=Zr()(a);n.value=r,t.emit("pick",r,!0);break}};t.emit("set-picker-option",["isValidValue",e=>e.isValid()&&(!S||!S(e.toDate()))]),t.emit("set-picker-option",["formatToString",t=>"dates"===f.value?t.map((t=>t.format(e.format))):t.format(e.format)]),t.emit("set-picker-option",["parseUserInput",t=>Zr()(t,e.format)]),t.emit("set-picker-option",["handleKeydown",t=>{const{code:l,keyCode:a}=t,o=[Fs.up,Fs.down,Fs.left,Fs.right];e.visible&&!k.value&&(o.includes(l)&&(C(a),t.stopPropagation(),t.preventDefault()),l===Fs.enter&&null===r.value&&null===i.value&&c(n,!1))}]);const _=$l("EP_PICKER_BASE"),{shortcuts:A,disabledDate:S,cellClassName:E,defaultTime:M,defaultValue:O,arrowControl:D}=_.props;return An((()=>e.parsedValue),(e=>{if(e){if("dates"===f.value)return;if(Array.isArray(e))return;n.value=e}else n.value=w()}),{immediate:!0}),{handleTimePick:(t,l,a)=>{const o=e.parsedValue?e.parsedValue.hour(t.hour()).minute(t.minute()).second(t.second()):t;n.value=o,c(n.value,!0),a||(k.value=l)},handleTimePickClose:()=>{k.value=!1},onTimePickerInputFocus:()=>{k.value=!0},timePickerVisible:k,visibleTime:y,visibleDate:x,showTime:v,changeToNow:()=>{const e=Zr()().toDate();S&&S(e)||!s()||(n.value=Zr()(),c(n.value))},onConfirm:()=>{if("dates"===f.value)c(e.parsedValue);else{let t=e.parsedValue;if(!t){const e=Zr()(M),n=w();t=e.year(n.year()).month(n.month()).date(n.date())}n.value=t,c(t)}},footerVisible:m,handleYearPick:e=>{"year"===f.value?(n.value=n.value.startOf("year").year(e),c(n.value)):(n.value=n.value.year(e),d.value="month")},showMonthPicker:()=>{d.value="month"},showYearPicker:()=>{d.value="year"},handleMonthPick:e=>{n.value=n.value.startOf("month").month(e),"month"===f.value?c(n.value):d.value="date"},hasShortcuts:h,shortcuts:A,arrowControl:D,disabledDate:S,cellClassName:E,selectionMode:f,handleShortcutClick:e=>{e.value?c(Zr()(e.value)):e.onClick&&e.onClick(t)},prevYear_:()=>{"year"===d.value?n.value=n.value.subtract(10,"year"):n.value=n.value.subtract(1,"year")},nextYear_:()=>{"year"===d.value?n.value=n.value.add(10,"year"):n.value=n.value.add(1,"year")},prevMonth_:()=>{n.value=n.value.subtract(1,"month")},nextMonth_:()=>{n.value=n.value.add(1,"month")},innerDate:n,t:vc,yearLabel:p,currentView:d,month:l,handleDatePick:t=>{if("day"===f.value){let l=e.parsedValue?e.parsedValue.year(t.year()).month(t.month()).date(t.date()):t;s()||(l=o.value[0][0].year(t.year()).month(t.month()).date(t.date())),n.value=l,c(l,v.value)}else"week"===f.value?c(t.date):"dates"===f.value&&c(t,!0)},handleVisibleTimeChange:e=>{const t=Zr()(e,g.value);t.isValid()&&s()&&(n.value=t.year(n.value.year()).month(n.value.month()).date(n.value.date()),i.value=null,k.value=!1,c(n.value,!0))},handleVisibleDateChange:e=>{const t=Zr()(e,b.value);if(t.isValid()){if(S&&S(t.toDate()))return;n.value=t.hour(n.value.hour()).minute(n.value.minute()).second(n.value.second()),r.value=null,c(n.value,!0)}},timeFormat:g,userInputTime:i,userInputDate:r}}});const Jp={class:"el-picker-panel__body-wrapper"},Zp={key:0,class:"el-picker-panel__sidebar"},Qp={class:"el-picker-panel__body"},ef={key:0,class:"el-date-picker__time-header"},tf={class:"el-date-picker__editor-wrap"},nf={class:"el-date-picker__editor-wrap"},lf={class:"el-picker-panel__content"},af={class:"el-picker-panel__footer"};Xp.render=function(e,t,n,l,a,o){const r=pl("el-input"),i=pl("time-pick-panel"),s=pl("date-table"),u=pl("year-table"),c=pl("month-table"),p=pl("el-button"),f=hl("clickoutside");return Cl(),Al("div",{class:["el-picker-panel el-date-picker",[{"has-sidebar":e.$slots.sidebar||e.hasShortcuts,"has-time":e.showTime}]]},[Tl("div",Jp,[Zt(e.$slots,"sidebar",{class:"el-picker-panel__sidebar"}),e.hasShortcuts?(Cl(),Al("div",Zp,[(Cl(!0),Al(gl,null,da(e.shortcuts,((t,n)=>(Cl(),Al("button",{key:n,type:"button",class:"el-picker-panel__shortcut",onClick:n=>e.handleShortcutClick(t)},d(t.text),9,["onClick"])))),128))])):Pl("v-if",!0),Tl("div",Qp,[e.showTime?(Cl(),Al("div",ef,[Tl("span",tf,[Tl(r,{placeholder:e.t("el.datepicker.selectDate"),"model-value":e.visibleDate,size:"small",onInput:t[1]||(t[1]=t=>e.userInputDate=t),onChange:e.handleVisibleDateChange},null,8,["placeholder","model-value","onChange"])]),Un(Tl("span",nf,[Tl(r,{placeholder:e.t("el.datepicker.selectTime"),"model-value":e.visibleTime,size:"small",onFocus:e.onTimePickerInputFocus,onInput:t[2]||(t[2]=t=>e.userInputTime=t),onChange:e.handleVisibleTimeChange},null,8,["placeholder","model-value","onFocus","onChange"]),Tl(i,{visible:e.timePickerVisible,format:e.timeFormat,"time-arrow-control":e.arrowControl,"parsed-value":e.innerDate,onPick:e.handleTimePick},null,8,["visible","format","time-arrow-control","parsed-value","onPick"])],512),[[f,e.handleTimePickClose]])])):Pl("v-if",!0),Un(Tl("div",{class:["el-date-picker__header",{"el-date-picker__header--bordered":"year"===e.currentView||"month"===e.currentView}]},[Tl("button",{type:"button","aria-label":e.t("el.datepicker.prevYear"),class:"el-picker-panel__icon-btn el-date-picker__prev-btn el-icon-d-arrow-left",onClick:t[3]||(t[3]=(...t)=>e.prevYear_(...t))},null,8,["aria-label"]),Un(Tl("button",{type:"button","aria-label":e.t("el.datepicker.prevMonth"),class:"el-picker-panel__icon-btn el-date-picker__prev-btn el-icon-arrow-left",onClick:t[4]||(t[4]=(...t)=>e.prevMonth_(...t))},null,8,["aria-label"]),[[ho,"date"===e.currentView]]),Tl("span",{role:"button",class:"el-date-picker__header-label",onClick:t[5]||(t[5]=(...t)=>e.showYearPicker(...t))},d(e.yearLabel),1),Un(Tl("span",{role:"button",class:["el-date-picker__header-label",{active:"month"===e.currentView}],onClick:t[6]||(t[6]=(...t)=>e.showMonthPicker(...t))},d(e.t("el.datepicker.month"+(e.month+1))),3),[[ho,"date"===e.currentView]]),Tl("button",{type:"button","aria-label":e.t("el.datepicker.nextYear"),class:"el-picker-panel__icon-btn el-date-picker__next-btn el-icon-d-arrow-right",onClick:t[7]||(t[7]=(...t)=>e.nextYear_(...t))},null,8,["aria-label"]),Un(Tl("button",{type:"button","aria-label":e.t("el.datepicker.nextMonth"),class:"el-picker-panel__icon-btn el-date-picker__next-btn el-icon-arrow-right",onClick:t[8]||(t[8]=(...t)=>e.nextMonth_(...t))},null,8,["aria-label"]),[[ho,"date"===e.currentView]])],2),[[ho,"time"!==e.currentView]]),Tl("div",lf,["date"===e.currentView?(Cl(),Al(s,{key:0,"selection-mode":e.selectionMode,date:e.innerDate,"parsed-value":e.parsedValue,"disabled-date":e.disabledDate,onPick:e.handleDatePick},null,8,["selection-mode","date","parsed-value","disabled-date","onPick"])):Pl("v-if",!0),"year"===e.currentView?(Cl(),Al(u,{key:1,date:e.innerDate,"disabled-date":e.disabledDate,"parsed-value":e.parsedValue,onPick:e.handleYearPick},null,8,["date","disabled-date","parsed-value","onPick"])):Pl("v-if",!0),"month"===e.currentView?(Cl(),Al(c,{key:2,date:e.innerDate,"parsed-value":e.parsedValue,"disabled-date":e.disabledDate,onPick:e.handleMonthPick},null,8,["date","parsed-value","disabled-date","onPick"])):Pl("v-if",!0)])])]),Un(Tl("div",af,[Un(Tl(p,{size:"mini",type:"text",class:"el-picker-panel__link-btn",onClick:e.changeToNow},{default:en((()=>[Bl(d(e.t("el.datepicker.now")),1)])),_:1},8,["onClick"]),[[ho,"dates"!==e.selectionMode]]),Tl(p,{plain:"",size:"mini",class:"el-picker-panel__link-btn",onClick:e.onConfirm},{default:en((()=>[Bl(d(e.t("el.datepicker.confirm")),1)])),_:1},8,["onClick"])],512),[[ho,e.footerVisible&&"date"===e.currentView]])],2)},Xp.__file="packages/date-picker/src/date-picker-com/panel-date-pick.vue";var of=Qn({directives:{clickoutside:Xs},components:{TimePickPanel:Dc,DateTable:Bp,ElInput:cu,ElButton:sc},props:{unlinkPanels:Boolean,parsedValue:{type:Array},type:{type:String,required:!0}},emits:["pick","set-picker-option"],setup(e,t){const n=tt(Zr()()),l=tt(Zr()().add(1,"month")),a=tt(null),o=tt(null),r=tt({min:null,max:null}),i=tt({min:null,max:null}),s=ua((()=>n.value.year()+" "+vc("el.datepicker.year")+" "+vc("el.datepicker.month"+(n.value.month()+1)))),u=ua((()=>l.value.year()+" "+vc("el.datepicker.year")+" "+vc("el.datepicker.month"+(l.value.month()+1)))),c=ua((()=>n.value.year())),d=ua((()=>n.value.month())),p=ua((()=>l.value.year())),f=ua((()=>l.value.month())),h=ua((()=>!!B.length)),v=ua((()=>null!==r.value.min?r.value.min:a.value?a.value.format(x.value):"")),m=ua((()=>null!==r.value.max?r.value.max:o.value||a.value?(o.value||a.value).format(x.value):"")),g=ua((()=>null!==i.value.min?i.value.min:a.value?a.value.format(y.value):"")),b=ua((()=>null!==i.value.max?i.value.max:o.value||a.value?(o.value||a.value).format(y.value):"")),y=ua((()=>qc(I))),x=ua((()=>Wc(I))),k=ua((()=>{const t=(d.value+1)%12,n=d.value+1>=12?1:0;return e.unlinkPanels&&new Date(c.value+n,t)<new Date(p.value,f.value)})),w=ua((()=>e.unlinkPanels&&12*p.value+f.value-(12*c.value+d.value+1)>=12)),C=e=>Array.isArray(e)&&e&&e[0]&&e[1]&&e[0].valueOf()<=e[1].valueOf(),_=tt({endDate:null,selecting:!1}),A=ua((()=>!(a.value&&o.value&&!_.value.selecting&&C([a.value,o.value])))),S=ua((()=>"datetime"===e.type||"datetimerange"===e.type)),E=(e=!1)=>{C([a.value,o.value])&&t.emit("pick",[a.value,o.value],e)},M=(e,t)=>{if(e)return L?Zr()(L[t]||L).year(e.year()).month(e.month()).date(e.date()):e},O=tt(!1),D=tt(!1),T=()=>{let t;if(Array.isArray(z)){const t=Zr()(z[0]);let n=Zr()(z[1]);return e.unlinkPanels||(n=t.add(1,"month")),[t,n]}return t=z?Zr()(z):Zr()(),[t,t.add(1,"month")]};t.emit("set-picker-option",["formatToString",e=>e.map((e=>e.format(I)))]);const N=$l("EP_PICKER_BASE"),{shortcuts:B,disabledDate:P,cellClassName:V,format:I,defaultTime:L,defaultValue:z,arrowControl:F}=N.props;return An((()=>e.parsedValue),(t=>{if(t&&2===t.length)if(a.value=t[0],o.value=t[1],n.value=a.value,e.unlinkPanels&&o.value){const e=a.value.year(),t=a.value.month(),n=o.value.year(),r=o.value.month();l.value=e===n&&t===r?o.value.add(1,"month"):o.value}else l.value=n.value.add(1,"month");else{const e=T();n.value=e[0],l.value=e[1]}}),{immediate:!0}),{shortcuts:B,disabledDate:P,cellClassName:V,minTimePickerVisible:O,maxTimePickerVisible:D,handleMinTimeClose:()=>{O.value=!1},handleMaxTimeClose:()=>{D.value=!1},handleShortcutClick:e=>{e.value?t.emit("pick",[Zr()(e.value[0]),Zr()(e.value[1])]):e.onClick&&e.onClick(t)},rangeState:_,minDate:a,maxDate:o,handleRangePick:(e,t=!0)=>{const n=M(e.minDate,0),l=M(e.maxDate,1);o.value===l&&a.value===n||(o.value=l,a.value=n,t&&!S.value&&E())},onSelect:e=>{_.value.selecting=e,e||(_.value.endDate=null)},handleChangeRange:e=>{_.value=e},btnDisabled:A,enableYearArrow:w,enableMonthArrow:k,rightPrevMonth:()=>{l.value=l.value.subtract(1,"month")},rightPrevYear:()=>{l.value=l.value.subtract(1,"year")},rightNextMonth:()=>{e.unlinkPanels?l.value=l.value.add(1,"month"):(n.value=n.value.add(1,"month"),l.value=n.value.add(1,"month"))},rightNextYear:()=>{e.unlinkPanels?l.value=l.value.add(1,"year"):(n.value=n.value.add(1,"year"),l.value=n.value.add(1,"month"))},leftPrevMonth:()=>{n.value=n.value.subtract(1,"month"),e.unlinkPanels||(l.value=n.value.add(1,"month"))},leftPrevYear:()=>{n.value=n.value.subtract(1,"year"),e.unlinkPanels||(l.value=n.value.add(1,"month"))},leftNextMonth:()=>{n.value=n.value.add(1,"month")},leftNextYear:()=>{n.value=n.value.add(1,"year")},hasShortcuts:h,leftLabel:s,rightLabel:u,leftDate:n,rightDate:l,showTime:S,t:vc,minVisibleDate:v,maxVisibleDate:m,minVisibleTime:g,maxVisibleTime:b,arrowControl:F,handleDateInput:(t,i)=>{r.value[i]=t;const s=Zr()(t,x.value);if(s.isValid()){if(P&&P(s.toDate()))return;"min"===i?(n.value=s,a.value=(a.value||n.value).year(s.year()).month(s.month()).date(s.date()),e.unlinkPanels||(l.value=s.add(1,"month"),o.value=a.value.add(1,"month"))):(l.value=s,o.value=(o.value||l.value).year(s.year()).month(s.month()).date(s.date()),e.unlinkPanels||(n.value=s.subtract(1,"month"),a.value=o.value.subtract(1,"month")))}},handleDateChange:(e,t)=>{r.value[t]=null},handleTimeInput:(e,t)=>{i.value[t]=e;const r=Zr()(e,y.value);r.isValid()&&("min"===t?(O.value=!0,a.value=(a.value||n.value).hour(r.hour()).minute(r.minute()).second(r.second()),o.value&&!o.value.isBefore(a.value)||(o.value=a.value)):(D.value=!0,o.value=(o.value||l.value).hour(r.hour()).minute(r.minute()).second(r.second()),l.value=o.value,o.value&&o.value.isBefore(a.value)&&(a.value=o.value)))},handleTimeChange:(e,t)=>{i.value[t]=null,"min"===t?(n.value=a.value,O.value=!1):(l.value=o.value,D.value=!1)},handleMinTimePick:(e,t,l)=>{i.value.min||(e&&(n.value=e,a.value=(a.value||n.value).hour(e.hour()).minute(e.minute()).second(e.second())),l||(O.value=t),o.value&&!o.value.isBefore(a.value)||(o.value=a.value))},handleMaxTimePick:(e,t,n)=>{i.value.max||(e&&(l.value=e,o.value=(o.value||l.value).hour(e.hour()).minute(e.minute()).second(e.second())),n||(D.value=t),o.value&&o.value.isBefore(a.value)&&(a.value=o.value))},handleClear:()=>{a.value=null,o.value=null,n.value=T()[0],l.value=n.value.add(1,"month"),t.emit("pick",null)},handleConfirm:E,timeFormat:y}}});const rf={class:"el-picker-panel__body-wrapper"},sf={key:0,class:"el-picker-panel__sidebar"},uf={class:"el-picker-panel__body"},cf={key:0,class:"el-date-range-picker__time-header"},df={class:"el-date-range-picker__editors-wrap"},pf={class:"el-date-range-picker__time-picker-wrap"},ff={class:"el-date-range-picker__time-picker-wrap"},hf=Tl("span",{class:"el-icon-arrow-right"},null,-1),vf={class:"el-date-range-picker__editors-wrap is-right"},mf={class:"el-date-range-picker__time-picker-wrap"},gf={class:"el-date-range-picker__time-picker-wrap"},bf={class:"el-picker-panel__content el-date-range-picker__content is-left"},yf={class:"el-date-range-picker__header"},xf={class:"el-picker-panel__content el-date-range-picker__content is-right"},kf={class:"el-date-range-picker__header"},wf={key:0,class:"el-picker-panel__footer"};of.render=function(e,t,n,l,a,o){const r=pl("el-input"),i=pl("time-pick-panel"),s=pl("date-table"),u=pl("el-button"),c=hl("clickoutside");return Cl(),Al("div",{class:["el-picker-panel el-date-range-picker",[{"has-sidebar":e.$slots.sidebar||e.hasShortcuts,"has-time":e.showTime}]]},[Tl("div",rf,[Zt(e.$slots,"sidebar",{class:"el-picker-panel__sidebar"}),e.hasShortcuts?(Cl(),Al("div",sf,[(Cl(!0),Al(gl,null,da(e.shortcuts,((t,n)=>(Cl(),Al("button",{key:n,type:"button",class:"el-picker-panel__shortcut",onClick:n=>e.handleShortcutClick(t)},d(t.text),9,["onClick"])))),128))])):Pl("v-if",!0),Tl("div",uf,[e.showTime?(Cl(),Al("div",cf,[Tl("span",df,[Tl("span",pf,[Tl(r,{size:"small",disabled:e.rangeState.selecting,placeholder:e.t("el.datepicker.startDate"),class:"el-date-range-picker__editor","model-value":e.minVisibleDate,onInput:t[1]||(t[1]=t=>e.handleDateInput(t,"min")),onChange:t[2]||(t[2]=t=>e.handleDateChange(t,"min"))},null,8,["disabled","placeholder","model-value"])]),Un(Tl("span",ff,[Tl(r,{size:"small",class:"el-date-range-picker__editor",disabled:e.rangeState.selecting,placeholder:e.t("el.datepicker.startTime"),"model-value":e.minVisibleTime,onFocus:t[3]||(t[3]=t=>e.minTimePickerVisible=!0),onInput:t[4]||(t[4]=t=>e.handleTimeInput(t,"min")),onChange:t[5]||(t[5]=t=>e.handleTimeChange(t,"min"))},null,8,["disabled","placeholder","model-value"]),Tl(i,{visible:e.minTimePickerVisible,format:e.timeFormat,"datetime-role":"start","time-arrow-control":e.arrowControl,"parsed-value":e.leftDate,onPick:e.handleMinTimePick},null,8,["visible","format","time-arrow-control","parsed-value","onPick"])],512),[[c,e.handleMinTimeClose]])]),hf,Tl("span",vf,[Tl("span",mf,[Tl(r,{size:"small",class:"el-date-range-picker__editor",disabled:e.rangeState.selecting,placeholder:e.t("el.datepicker.endDate"),"model-value":e.maxVisibleDate,readonly:!e.minDate,onInput:t[6]||(t[6]=t=>e.handleDateInput(t,"max")),onChange:t[7]||(t[7]=t=>e.handleDateChange(t,"max"))},null,8,["disabled","placeholder","model-value","readonly"])]),Un(Tl("span",gf,[Tl(r,{size:"small",class:"el-date-range-picker__editor",disabled:e.rangeState.selecting,placeholder:e.t("el.datepicker.endTime"),"model-value":e.maxVisibleTime,readonly:!e.minDate,onFocus:t[8]||(t[8]=t=>e.minDate&&(e.maxTimePickerVisible=!0)),onInput:t[9]||(t[9]=t=>e.handleTimeInput(t,"max")),onChange:t[10]||(t[10]=t=>e.handleTimeChange(t,"max"))},null,8,["disabled","placeholder","model-value","readonly"]),Tl(i,{"datetime-role":"end",visible:e.maxTimePickerVisible,format:e.timeFormat,"time-arrow-control":e.arrowControl,"parsed-value":e.rightDate,onPick:e.handleMaxTimePick},null,8,["visible","format","time-arrow-control","parsed-value","onPick"])],512),[[c,e.handleMaxTimeClose]])])])):Pl("v-if",!0),Tl("div",bf,[Tl("div",yf,[Tl("button",{type:"button",class:"el-picker-panel__icon-btn el-icon-d-arrow-left",onClick:t[11]||(t[11]=(...t)=>e.leftPrevYear(...t))}),Tl("button",{type:"button",class:"el-picker-panel__icon-btn el-icon-arrow-left",onClick:t[12]||(t[12]=(...t)=>e.leftPrevMonth(...t))}),e.unlinkPanels?(Cl(),Al("button",{key:0,type:"button",disabled:!e.enableYearArrow,class:[{"is-disabled":!e.enableYearArrow},"el-picker-panel__icon-btn el-icon-d-arrow-right"],onClick:t[13]||(t[13]=(...t)=>e.leftNextYear(...t))},null,10,["disabled"])):Pl("v-if",!0),e.unlinkPanels?(Cl(),Al("button",{key:1,type:"button",disabled:!e.enableMonthArrow,class:[{"is-disabled":!e.enableMonthArrow},"el-picker-panel__icon-btn el-icon-arrow-right"],onClick:t[14]||(t[14]=(...t)=>e.leftNextMonth(...t))},null,10,["disabled"])):Pl("v-if",!0),Tl("div",null,d(e.leftLabel),1)]),Tl(s,{"selection-mode":"range",date:e.leftDate,"min-date":e.minDate,"max-date":e.maxDate,"range-state":e.rangeState,"disabled-date":e.disabledDate,"cell-class-name":e.cellClassName,onChangerange:e.handleChangeRange,onPick:e.handleRangePick,onSelect:e.onSelect},null,8,["date","min-date","max-date","range-state","disabled-date","cell-class-name","onChangerange","onPick","onSelect"])]),Tl("div",xf,[Tl("div",kf,[e.unlinkPanels?(Cl(),Al("button",{key:0,type:"button",disabled:!e.enableYearArrow,class:[{"is-disabled":!e.enableYearArrow},"el-picker-panel__icon-btn el-icon-d-arrow-left"],onClick:t[15]||(t[15]=(...t)=>e.rightPrevYear(...t))},null,10,["disabled"])):Pl("v-if",!0),e.unlinkPanels?(Cl(),Al("button",{key:1,type:"button",disabled:!e.enableMonthArrow,class:[{"is-disabled":!e.enableMonthArrow},"el-picker-panel__icon-btn el-icon-arrow-left"],onClick:t[16]||(t[16]=(...t)=>e.rightPrevMonth(...t))},null,10,["disabled"])):Pl("v-if",!0),Tl("button",{type:"button",class:"el-picker-panel__icon-btn el-icon-d-arrow-right",onClick:t[17]||(t[17]=(...t)=>e.rightNextYear(...t))}),Tl("button",{type:"button",class:"el-picker-panel__icon-btn el-icon-arrow-right",onClick:t[18]||(t[18]=(...t)=>e.rightNextMonth(...t))}),Tl("div",null,d(e.rightLabel),1)]),Tl(s,{"selection-mode":"range",date:e.rightDate,"min-date":e.minDate,"max-date":e.maxDate,"range-state":e.rangeState,"disabled-date":e.disabledDate,"cell-class-name":e.cellClassName,onChangerange:e.handleChangeRange,onPick:e.handleRangePick,onSelect:e.onSelect},null,8,["date","min-date","max-date","range-state","disabled-date","cell-class-name","onChangerange","onPick","onSelect"])])])]),e.showTime?(Cl(),Al("div",wf,[Tl(u,{size:"mini",type:"text",class:"el-picker-panel__link-btn",onClick:e.handleClear},{default:en((()=>[Bl(d(e.t("el.datepicker.clear")),1)])),_:1},8,["onClick"]),Tl(u,{plain:"",size:"mini",class:"el-picker-panel__link-btn",disabled:e.btnDisabled,onClick:t[19]||(t[19]=t=>e.handleConfirm(!1))},{default:en((()=>[Bl(d(e.t("el.datepicker.confirm")),1)])),_:1},8,["disabled"])])):Pl("v-if",!0)],2)},of.__file="packages/date-picker/src/date-picker-com/panel-date-range.vue";var Cf=Qn({components:{MonthTable:Vp},props:{unlinkPanels:Boolean,parsedValue:{type:Array}},emits:["pick","set-picker-option"],setup(e,t){const n=tt(Zr()()),l=tt(Zr()().add(1,"year")),a=ua((()=>!!v.length)),o=ua((()=>`${n.value.year()} ${vc("el.datepicker.year")}`)),r=ua((()=>`${l.value.year()} ${vc("el.datepicker.year")}`)),i=ua((()=>n.value.year())),s=ua((()=>l.value.year()===n.value.year()?n.value.year()+1:l.value.year())),u=ua((()=>e.unlinkPanels&&s.value>i.value+1)),c=tt(null),d=tt(null),p=tt({endDate:null,selecting:!1}),f=(e=!1)=>{var n;n=[c.value,d.value],Array.isArray(n)&&n&&n[0]&&n[1]&&n[0].valueOf()<=n[1].valueOf()&&t.emit("pick",[c.value,d.value],e)};t.emit("set-picker-option",["formatToString",e=>e.map((e=>e.format(g)))]);const h=$l("EP_PICKER_BASE"),{shortcuts:v,disabledDate:m,format:g,defaultValue:b}=h.props;return An((()=>e.parsedValue),(t=>{if(t&&2===t.length)if(c.value=t[0],d.value=t[1],n.value=c.value,e.unlinkPanels&&d.value){const e=c.value.year(),t=d.value.year();l.value=e===t?d.value.add(1,"year"):d.value}else l.value=n.value.add(1,"year");else{const t=(()=>{let t;if(Array.isArray(b)){const t=Zr()(b[0]);let n=Zr()(b[1]);return e.unlinkPanels||(n=t.add(1,"year")),[t,n]}return t=b?Zr()(b):Zr()(),[t,t.add(1,"year")]})();n.value=t[0],l.value=t[1]}}),{immediate:!0}),{shortcuts:v,disabledDate:m,onSelect:e=>{p.value.selecting=e,e||(p.value.endDate=null)},handleRangePick:(e,t=!0)=>{const n=e.minDate,l=e.maxDate;d.value===l&&c.value===n||(d.value=l,c.value=n,t&&f())},rangeState:p,handleChangeRange:e=>{p.value=e},minDate:c,maxDate:d,enableYearArrow:u,leftLabel:o,rightLabel:r,leftNextYear:()=>{n.value=n.value.add(1,"year")},leftPrevYear:()=>{n.value=n.value.subtract(1,"year"),e.unlinkPanels||(l.value=l.value.subtract(1,"year"))},rightNextYear:()=>{e.unlinkPanels||(n.value=n.value.add(1,"year")),l.value=l.value.add(1,"year")},rightPrevYear:()=>{l.value=l.value.subtract(1,"year")},t:vc,leftDate:n,rightDate:l,hasShortcuts:a,handleShortcutClick:e=>{e.value?t.emit("pick",[Zr()(e.value[0]),Zr()(e.value[1])]):e.onClick&&e.onClick(t)}}}});const _f={class:"el-picker-panel__body-wrapper"},Af={key:0,class:"el-picker-panel__sidebar"},Sf={class:"el-picker-panel__body"},Ef={class:"el-picker-panel__content el-date-range-picker__content is-left"},Mf={class:"el-date-range-picker__header"},Of={class:"el-picker-panel__content el-date-range-picker__content is-right"},Df={class:"el-date-range-picker__header"};Cf.render=function(e,t,n,l,a,o){const r=pl("month-table");return Cl(),Al("div",{class:["el-picker-panel el-date-range-picker",[{"has-sidebar":e.$slots.sidebar||e.hasShortcuts}]]},[Tl("div",_f,[Zt(e.$slots,"sidebar",{class:"el-picker-panel__sidebar"}),e.hasShortcuts?(Cl(),Al("div",Af,[(Cl(!0),Al(gl,null,da(e.shortcuts,((t,n)=>(Cl(),Al("button",{key:n,type:"button",class:"el-picker-panel__shortcut",onClick:n=>e.handleShortcutClick(t)},d(t.text),9,["onClick"])))),128))])):Pl("v-if",!0),Tl("div",Sf,[Tl("div",Ef,[Tl("div",Mf,[Tl("button",{type:"button",class:"el-picker-panel__icon-btn el-icon-d-arrow-left",onClick:t[1]||(t[1]=(...t)=>e.leftPrevYear(...t))}),e.unlinkPanels?(Cl(),Al("button",{key:0,type:"button",disabled:!e.enableYearArrow,class:[{"is-disabled":!e.enableYearArrow},"el-picker-panel__icon-btn el-icon-d-arrow-right"],onClick:t[2]||(t[2]=(...t)=>e.leftNextYear(...t))},null,10,["disabled"])):Pl("v-if",!0),Tl("div",null,d(e.leftLabel),1)]),Tl(r,{"selection-mode":"range",date:e.leftDate,"min-date":e.minDate,"max-date":e.maxDate,"range-state":e.rangeState,"disabled-date":e.disabledDate,onChangerange:e.handleChangeRange,onPick:e.handleRangePick,onSelect:e.onSelect},null,8,["date","min-date","max-date","range-state","disabled-date","onChangerange","onPick","onSelect"])]),Tl("div",Of,[Tl("div",Df,[e.unlinkPanels?(Cl(),Al("button",{key:0,type:"button",disabled:!e.enableYearArrow,class:[{"is-disabled":!e.enableYearArrow},"el-picker-panel__icon-btn el-icon-d-arrow-left"],onClick:t[3]||(t[3]=(...t)=>e.rightPrevYear(...t))},null,10,["disabled"])):Pl("v-if",!0),Tl("button",{type:"button",class:"el-picker-panel__icon-btn el-icon-d-arrow-right",onClick:t[4]||(t[4]=(...t)=>e.rightNextYear(...t))}),Tl("div",null,d(e.rightLabel),1)]),Tl(r,{"selection-mode":"range",date:e.rightDate,"min-date":e.minDate,"max-date":e.maxDate,"range-state":e.rangeState,"disabled-date":e.disabledDate,onChangerange:e.handleChangeRange,onPick:e.handleRangePick,onSelect:e.onSelect},null,8,["date","min-date","max-date","range-state","disabled-date","onChangerange","onPick","onSelect"])])])])],2)},Cf.__file="packages/date-picker/src/date-picker-com/panel-month-range.vue",Zr().extend(hi()),Zr().extend(ei()),Zr().extend(si()),Zr().extend(ni()),Zr().extend(ci()),Zr().extend(pi()),Zr().extend(mi()),Zr().extend(bi());var Tf=Qn({name:"ElDatePicker",install:null,props:Object.assign(Object.assign({},gc),{type:{type:String,default:"date"}}),setup(e,t){const n=mc[e.type]||"YYYY-MM-DD";return()=>ca(xc,Object.assign(Object.assign({format:n},e),{type:e.type,"onUpdate:modelValue":e=>t.emit("update:modelValue",e)}),{default:t=>{return ca("daterange"===(n=e.type)||"datetimerange"===n?of:"monthrange"===n?Cf:Xp,t);var n}})}});Tf.install=e=>{e.component(Tf.name,Tf)};var Nf=Qn({name:"ElOverlay",props:{mask:{type:Boolean,default:!0},overlayClass:{type:String},zIndex:{type:Number}},emits:["click"],setup(e,{slots:t,emit:n}){const l=()=>{n("click")};return()=>e.mask?Tl("div",{class:["el-overlay",e.overlayClass],style:{zIndex:e.zIndex},onClick:l},[Zt(t,"default")],Eu.STYLE|Eu.CLASS|Eu.PROPS,["onClick"]):Zt(t,"default")}});function Bf(e,t,n){const l=tt(!1),a=tt(!1),o=tt(null),r=tt(null),i=tt(null),s=tt(!1),u=tt(e.zIndex||Fu.nextZIndex()),c=tt(null),d=ua((()=>{const t={};return e.fullscreen||(t.marginTop=e.top,e.width&&(t.width=e.width)),t}));function p(){hs(i),hs(r),e.openDelay&&e.openDelay>0?r.value=window.setTimeout((()=>{r.value=null,m()}),e.openDelay):m()}function f(){hs(r),hs(i),e.closeDelay&&e.closeDelay>0?i.value=window.setTimeout((()=>{i.value=null,g()}),e.closeDelay):g()}function h(e){e||(a.value=!0,l.value=!1)}function v(){e.beforeClose?e.beforeClose(h):f()}function m(){is||(l.value=!0)}function g(){l.value=!1}return e.lockScroll&&(e=>{et(e)||zs("[useLockScreen]","You need to pass a ref param to this function");let t=0,n=!1,l="0",a=0;An(e,(e=>{if(e){n=!Es(document.body,"el-popup-parent--hidden"),n&&(l=document.body.style.paddingRight,a=parseInt(Ds(document.body,"paddingRight"),10)),t=Is();const e=document.documentElement.clientHeight<document.body.scrollHeight,o=Ds(document.body,"overflowY");t>0&&(e||"scroll"===o)&&n&&(document.body.style.paddingRight=a+t+"px"),Ms(document.body,"el-popup-parent--hidden")}else n&&(document.body.style.paddingRight=l,Os(document.body,"el-popup-parent--hidden")),n=!0}))})(l),e.closeOnPressEscape&&((e,t)=>{An((()=>t.value),(t=>{t?Ys.push(e):Ys.splice(Ys.findIndex((t=>t===e)),1)}))})({handleClose:v},l),((e,t)=>{let n;An((()=>e.value),(e=>{var l,a;e?(n=document.activeElement,et(t)&&(null===(a=(l=t.value).focus)||void 0===a||a.call(l))):n.focus()}))})(l),An((()=>e.modelValue),(l=>{l?(a.value=!1,s.value=!0,p(),t.emit("open"),u.value=e.zIndex?u.value++:Fu.nextZIndex(),Mt((()=>{n.value&&(n.value.scrollTop=0)}))):(f(),a.value||t.emit("close"))})),mn((()=>{e.modelValue&&(l.value=!0,s.value=!0,p())})),{afterEnter:function(){t.emit("opened")},afterLeave:function(){t.emit("closed"),t.emit(tu,!1),e.destroyOnClose&&(s.value=!1)},handleClose:v,onModalClick:function(){e.closeOnClickModal&&v()},closed:a,dialogRef:o,style:d,rendered:s,modalRef:c,visible:l,zIndex:u}}Nf.__file="packages/overlay/src/index.vue";var Pf=Qn({name:"ElDialog",components:{"el-overlay":Nf},directives:{TrapFocus:Zs},props:{appendToBody:{type:Boolean,default:!1},beforeClose:{type:Function},destroyOnClose:{type:Boolean,default:!1},center:{type:Boolean,default:!1},customClass:{type:String,default:""},closeOnClickModal:{type:Boolean,default:!0},closeOnPressEscape:{type:Boolean,default:!0},fullscreen:{type:Boolean,default:!1},lockScroll:{type:Boolean,default:!0},modal:{type:Boolean,default:!0},showClose:{type:Boolean,default:!0},title:{type:String,default:""},openDelay:{type:Number,default:0},closeDelay:{type:Number,default:0},top:{type:String,default:"15vh"},modelValue:{type:Boolean,required:!0},modalClass:String,width:{type:String,default:"50%",validator:e=>["px","rem","em","vw","%","vmin","vmax"].some((t=>e.endsWith(t)))},zIndex:{type:Number}},emits:["open","opened","close","closed",tu],setup(e,t){const n=tt(null);return Object.assign(Object.assign({},Bf(e,t,n)),{dialogRef:n})}});const Vf={class:"el-dialog__header"},If={class:"el-dialog__title"},Lf=Tl("i",{class:"el-dialog__close el-icon el-icon-close"},null,-1),zf={key:0,class:"el-dialog__body"},Ff={key:1,class:"el-dialog__footer"};Pf.render=function(e,t,n,l,a,o){const r=pl("el-overlay"),i=hl("trap-focus");return Cl(),Al(cl,{to:"body",disabled:!e.appendToBody},[Tl(Pa,{name:"dialog-fade",onAfterEnter:e.afterEnter,onAfterLeave:e.afterLeave},{default:en((()=>[Un(Tl(r,{mask:e.modal,"overlay-class":e.modalClass,"z-index":e.zIndex,onClick:e.onModalClick},{default:en((()=>[Un(Tl("div",{ref:"dialogRef",class:["el-dialog",{"is-fullscreen":e.fullscreen,"el-dialog--center":e.center},e.customClass],"aria-modal":"true",role:"dialog","aria-label":e.title||"dialog",style:e.style,onClick:t[2]||(t[2]=e=>e.stopPropagation())},[Tl("div",Vf,[Zt(e.$slots,"title",{},(()=>[Tl("span",If,d(e.title),1)])),e.showClose?(Cl(),Al("button",{key:0,"aria-label":"close",class:"el-dialog__headerbtn",type:"button",onClick:t[1]||(t[1]=(...t)=>e.handleClose(...t))},[Lf])):Pl("v-if",!0)]),e.rendered?(Cl(),Al("div",zf,[Zt(e.$slots,"default")])):Pl("v-if",!0),e.$slots.footer?(Cl(),Al("div",Ff,[Zt(e.$slots,"footer")])):Pl("v-if",!0)],14,["aria-label"]),[[i]])])),_:3},8,["mask","overlay-class","z-index","onClick"]),[[ho,e.visible]])])),_:1},8,["onAfterEnter","onAfterLeave"])],8,["disabled"])},Pf.__file="packages/dialog/src/index.vue",Pf.install=e=>{e.component(Pf.name,Pf)};var $f=Qn({name:"ElDivider",props:{direction:{type:String,default:"horizontal",validator:e=>-1!==["horizontal","vertical"].indexOf(e)},contentPosition:{type:String,default:"center",validator:e=>-1!==["left","center","right"].indexOf(e)}}});$f.render=function(e,t,n,l,a,o){return Cl(),Al("div",{class:["el-divider","el-divider--"+e.direction]},[e.$slots.default&&"vertical"!==e.direction?(Cl(),Al("div",{key:0,class:["el-divider__text","is-"+e.contentPosition]},[Zt(e.$slots,"default")],2)):Pl("v-if",!0)],2)},$f.__file="packages/divider/src/index.vue",$f.install=e=>{e.component($f.name,$f)};var Rf=Qn({name:"ElDrawer",components:{[Nf.name]:Nf},directives:{TrapFocus:Zs},props:{modelValue:{type:Boolean,required:!0},appendToBody:{type:Boolean,default:!1},beforeClose:Function,customClass:{type:String,default:""},direction:{type:String,default:"rtl",validator:e=>-1!==["ltr","rtl","ttb","btt"].indexOf(e)},showClose:{type:Boolean,default:!0},size:{type:String,default:"30%"},title:{type:String,default:""},closeOnClickModal:{type:Boolean,default:!0},withHeader:{type:Boolean,default:!0},openDelay:{type:Number,default:0},closeDelay:{type:Number,default:0},zIndex:Number,modal:{type:Boolean,default:!0},modalFade:{type:Boolean,default:!0},modalClass:String,lockScroll:{type:Boolean,default:!0},closeOnPressEscape:{type:Boolean,default:!0},destroyOnClose:{type:Boolean,default:!1}},emits:["open","opened","close","closed","update:modelValue"],setup(e,t){const n=tt(null);return Object.assign(Object.assign({},Bf(e,t,n)),{drawerRef:n,isHorizontal:ua((()=>"rtl"===e.direction||"ltr"===e.direction))})}});const jf={key:0,id:"el-drawer__title",class:"el-drawer__header"},Hf=Tl("i",{class:"el-drawer__close el-icon el-icon-close"},null,-1),Wf={key:1,class:"el-drawer__body"};Rf.render=function(e,t,n,l,a,o){const r=pl("el-overlay"),i=hl("trap-focus");return Cl(),Al(cl,{to:"body",disabled:!e.appendToBody},[Tl(Pa,{name:"el-drawer-fade",onAfterEnter:e.afterEnter,onAfterLeave:e.afterLeave},{default:en((()=>[Un(Tl(r,{mask:e.modal,"overlay-class":e.modalClass,"z-index":e.zIndex,onClick:e.onModalClick},{default:en((()=>[Tl("div",{class:["el-drawer__container",{"el-drawer__open":e.visible}],tabindex:"-1",role:"document"},[Un(Tl("div",{ref:"drawerRef","aria-modal":"true","aria-labelledby":"el-drawer__title","aria-label":e.title,class:["el-drawer",[e.direction,e.customClass]],style:e.isHorizontal?"width: "+e.size:"height: "+e.size,role:"dialog",tabindex:"-1",onClick:t[2]||(t[2]=co((()=>{}),["stop"]))},[e.withHeader?(Cl(),Al("header",jf,[Zt(e.$slots,"title",{},(()=>[Tl("span",{role:"heading",tabindex:"-1",title:e.title},d(e.title),9,["title"])])),e.showClose?(Cl(),Al("button",{key:0,"aria-label":"close "+(e.title||"drawer"),class:"el-drawer__close-btn",type:"button",onClick:t[1]||(t[1]=(...t)=>e.handleClose(...t))},[Hf],8,["aria-label"])):Pl("v-if",!0)])):Pl("v-if",!0),e.rendered?(Cl(),Al("section",Wf,[Zt(e.$slots,"default")])):Pl("v-if",!0)],14,["aria-label"]),[[i]])],2)])),_:1},8,["mask","overlay-class","z-index","onClick"]),[[ho,e.visible]])])),_:1},8,["onAfterEnter","onAfterLeave"])],8,["disabled"])},Rf.__file="packages/drawer/src/index.vue",Rf.install=e=>{e.component(Rf.name,Rf)};const qf=()=>{const e=ms(),t=$l("elDropdown",{}),n=ua((()=>null==t?void 0:t.dropdownSize));return{ELEMENT:e,elDropdown:t,_elDropdownSize:n}};var Yf=Qn({name:"ElDropdown",components:{ElButton:sc,ElButtonGroup:dc,ElPopper:Ku},props:{trigger:{type:String,default:"hover"},type:String,size:{type:String,default:""},splitButton:Boolean,hideOnClick:{type:Boolean,default:!0},placement:{type:String,default:"bottom"},showTimeout:{type:Number,default:150},hideTimeout:{type:Number,default:150},tabindex:{type:Number,default:0},effect:{type:String,default:"light"}},emits:["visible-change","click","command"],setup(e,{emit:t}){const n=la(),{ELEMENT:l}=qf(),a=tt(null),o=tt(!1);An((()=>o.value),(e=>{var n,l;e&&(null===(l=null===(n=s.value)||void 0===n?void 0:n.focus)||void 0===l||l.call(n)),e||function(){var e,t;null===(t=null===(e=s.value)||void 0===e?void 0:e.blur)||void 0===t||t.call(e)}(),t("visible-change",e)}));const r=tt(!1);An((()=>r.value),(e=>{const t=s.value;t&&(e?Ms(t,"focusing"):Os(t,"focusing"))}));const i=tt(null),s=ua((()=>{var t,n,l,a;const o=null!==(l=null===(n=null===(t=i.value)||void 0===t?void 0:t.$refs.triggerRef)||void 0===n?void 0:n.children[0])&&void 0!==l?l:{};return e.splitButton?null===(a=o.children)||void 0===a?void 0:a[1]:o}));function u(){var e;(null===(e=s.value)||void 0===e?void 0:e.disabled)||(o.value?d():c())}function c(){var t;(null===(t=s.value)||void 0===t?void 0:t.disabled)||(a.value&&clearTimeout(a.value),a.value=window.setTimeout((()=>{o.value=!0}),"click"===e.trigger?0:e.showTimeout))}function d(){var t;(null===(t=s.value)||void 0===t?void 0:t.disabled)||(p(),e.tabindex>=0&&f(s.value),clearTimeout(a.value),a.value=window.setTimeout((()=>{o.value=!1}),"click"===e.trigger?0:e.hideTimeout))}function p(){var e;null===(e=s.value)||void 0===e||e.setAttribute("tabindex","-1")}function f(e){p(),null==e||e.setAttribute("tabindex","0")}const h=ua((()=>e.size||l.size));return Fl("elDropdown",{instance:n,dropdownSize:h,visible:o,handleClick:u,commandHandler:function(...e){t("command",...e)},show:c,hide:d,trigger:ua((()=>e.trigger)),hideOnClick:ua((()=>e.hideOnClick)),triggerElm:s}),mn((()=>{e.splitButton||(As(s.value,"focus",(()=>{r.value=!0})),As(s.value,"blur",(()=>{r.value=!1})),As(s.value,"click",(()=>{r.value=!1}))),"hover"===e.trigger?(As(s.value,"mouseenter",c),As(s.value,"mouseleave",d)):"click"===e.trigger&&As(s.value,"click",u),Object.assign(n,{handleClick:u,hide:d,resetTabindex:f})})),{visible:o,dropdownSize:h,handlerMainButtonClick:e=>{t("click",e),d()},triggerVnode:i}}});const Kf={class:"el-dropdown"},Uf=Tl("i",{class:"el-dropdown__icon el-icon-arrow-down"},null,-1);Yf.render=function(e,t,n,l,a,o){const r=pl("el-button"),i=pl("el-button-group"),s=pl("el-popper");return Cl(),Al(s,{ref:"triggerVnode",visible:e.visible,"onUpdate:visible":t[1]||(t[1]=t=>e.visible=t),placement:e.placement,effect:e.effect,pure:"","manual-mode":!0,trigger:[e.trigger],"popper-class":"el-dropdown__popper","append-to-body":"",transition:"el-zoom-in-top","gpu-acceleration":!1},{default:en((()=>[Zt(e.$slots,"dropdown")])),trigger:en((()=>[Tl("div",Kf,[e.splitButton?(Cl(),Al(i,{key:1},{default:en((()=>[Tl(r,{size:e.dropdownSize,type:e.type,onClick:e.handlerMainButtonClick},{default:en((()=>[Zt(e.$slots,"default")])),_:3},8,["size","type","onClick"]),Tl(r,{size:e.dropdownSize,type:e.type,class:"el-dropdown__caret-button"},{default:en((()=>[Uf])),_:1},8,["size","type"])])),_:1})):Zt(e.$slots,"default",{key:0})])])),_:1},8,["visible","placement","effect","trigger"])},Yf.__file="packages/dropdown/src/dropdown.vue",Yf.install=e=>{e.component(Yf.name,Yf)};var Gf=Qn({name:"ElDropdownItem",props:{command:{type:[Object,String,Number],default:()=>({})},disabled:Boolean,divided:Boolean,icon:String},setup(e){const{elDropdown:t}=qf(),n=la();return{handleClick:function(l){var a,o;t.hideOnClick.value&&(null===(a=t.handleClick)||void 0===a||a.call(t)),null===(o=t.commandHandler)||void 0===o||o.call(t,e.command,n,l)}}}});Gf.render=function(e,t,n,l,a,o){return Cl(),Al("li",{class:["el-dropdown-menu__item",{"is-disabled":e.disabled,"el-dropdown-menu__item--divided":e.divided}],"aria-disabled":e.disabled,tabindex:e.disabled?null:-1,onClick:t[1]||(t[1]=(...t)=>e.handleClick(...t))},[e.icon?(Cl(),Al("i",{key:0,class:e.icon},null,2)):Pl("v-if",!0),Zt(e.$slots,"default")],10,["aria-disabled","tabindex"])},Gf.__file="packages/dropdown/src/dropdown-item.vue",Gf.install=e=>{e.component(Gf.name,Gf)};var Xf=Qn({name:"ElDropdownMenu",directives:{ClickOutside:Xs},setup(){const{_elDropdownSize:e,elDropdown:t}=qf(),n=e.value;function l(){var e;null===(e=t.hide)||void 0===e||e.call(t)}return mn((()=>{((e,t,n)=>{const l=tt(null),a=tt(null),o=tt(null),r=tt("dropdown-menu-"+cs());function i(){var e;t.setAttribute("tabindex","-1"),null===(e=a.value)||void 0===e||e.forEach((e=>{e.setAttribute("tabindex","-1")}))}function s(e){i(),null==e||e.setAttribute("tabindex","0")}function u(){t.focus()}o.value=null==e?void 0:e.subTree.el,l.value=o.value.querySelectorAll("[tabindex='-1']"),a.value=[].slice.call(l.value),As(t,"keydown",(function(e){const t=e.code;[Fs.up,Fs.down].includes(t)?(i(),s(l.value[0]),l.value[0].focus(),e.preventDefault(),e.stopPropagation()):t===Fs.enter?n.handleClick():[Fs.tab,Fs.esc].includes(t)&&n.hide()})),As(o.value,"keydown",(function(e){const t=e.code,o=e.target,r=a.value.indexOf(o),c=a.value.length-1;let d;[Fs.up,Fs.down].includes(t)?(d=t===Fs.up?0!==r?r-1:0:r<c?r+1:c,i(),s(l.value[d]),l.value[d].focus(),e.preventDefault(),e.stopPropagation()):t===Fs.enter?(u(),o.click(),n.props.hideOnClick&&n.hide()):[Fs.tab,Fs.esc].includes(t)&&(n.hide(),u())}),!0),o.value.setAttribute("id",r.value),t.setAttribute("aria-haspopup","list"),t.setAttribute("aria-controls",r.value),n.props.splitButton||(t.setAttribute("role","button"),t.setAttribute("tabindex",n.props.tabindex),Ms(t,"el-dropdown-selfdefine"))})(la(),t.triggerElm.value,t.instance)})),{size:n,show:function(){var e;null===(e=t.show)||void 0===e||e.call(t)},hide:function(){"click"!==t.trigger.value&&l()},innerHide:l,triggerElm:t.triggerElm}}});Xf.render=function(e,t,n,l,a,o){const r=hl("clickOutside");return Un((Cl(),Al("ul",{class:[[e.size&&"el-dropdown-menu--"+e.size],"el-dropdown-menu"],onMouseenter:t[1]||(t[1]=co(((...t)=>e.show(...t)),["stop"])),onMouseleave:t[2]||(t[2]=co(((...t)=>e.hide(...t)),["stop"]))},[Zt(e.$slots,"default")],34)),[[r,e.innerHide,e.triggerElm]])},Xf.__file="packages/dropdown/src/dropdown-menu.vue",Xf.install=e=>{e.component(Xf.name,Xf)};var Jf=Qn({name:"ElFooter",props:{height:{type:String,default:"60px"}}});Jf.render=function(e,t,n,l,a,o){return Cl(),Al("footer",{class:"el-footer",style:{height:e.height}},[Zt(e.$slots,"default")],4)},Jf.__file="packages/container/src/footer.vue",Jf.install=e=>{e.component(Jf.name,Jf)};var Zf=Qn({name:"ElLabelWrap",props:{isAutoWidth:Boolean,updateAll:Boolean},setup(e,{slots:t}){const n=tt(null),l=$l("elForm"),a=$l("elFormItem"),o=tt(0);An(o,((t,n)=>{e.updateAll&&(l.registerLabelWidth(t,n),a.updateComputedLabelWidth(t))}));const r=(a="update")=>{Mt((()=>{t.default&&e.isAutoWidth&&("update"===a?o.value=(()=>{var e;if(null===(e=n.value)||void 0===e?void 0:e.firstElementChild){const e=window.getComputedStyle(n.value.firstElementChild).width;return Math.ceil(parseFloat(e))}return 0})():"remove"===a&&l.deregisterLabelWidth(o.value))}))},i=()=>r("update");return mn((()=>{xu(n.value.firstElementChild,i),i()})),bn(i),yn((()=>{r("remove"),ku(n.value.firstElementChild,i)})),function(){var a,r;if(!t)return null;if(e.isAutoWidth){const e=l.autoLabelWidth,r={};if(e&&"auto"!==e){const t=parseInt(e,10)-o.value;t&&(r.marginLeft=t+"px")}return ca("div",{ref:n,class:["el-form-item__label-wrap"],style:r},null===(a=t.default)||void 0===a?void 0:a.call(t))}return ca(gl,{ref:n},null===(r=t.default)||void 0===r?void 0:r.call(t))}}}),Qf=Qn({name:"ElFormItem",componentName:"ElFormItem",components:{LabelWrap:Zf},props:{label:String,labelWidth:String,prop:String,required:{type:Boolean,default:void 0},rules:[Object,Array],error:String,validateStatus:String,for:String,inlineMessage:{type:[String,Boolean],default:""},showMessage:{type:Boolean,default:!0},size:{types:String,validator:au}},setup(e){const t=_o(),n=ms(),l=$l("elForm",{}),a=tt(""),o=tt(""),r=tt(!1),i=tt(""),s=la(),u=ua((()=>{let e=s.parent;for(;e&&"ElForm"!==e.type.name;){if("ElFormItem"===e.type.name)return!0;e=e.parent}return!1}));let c;An((()=>e.error),(e=>{o.value=e,a.value=e?"error":""}),{immediate:!0}),An((()=>e.validateStatus),(e=>{a.value=e}));const d=ua((()=>e.for||e.prop)),p=ua((()=>{if("top"===l.labelPosition)return{};const t=e.labelWidth||l.labelWidth;return t?{width:t}:{}})),f=ua((()=>{if("top"===l.labelPosition||l.inline)return{};if(!e.label&&!e.labelWidth&&u.value)return{};const t=e.labelWidth||l.labelWidth,n={};return"auto"===t?"auto"===e.labelWidth?n.marginLeft=i.value:"auto"===l.labelWidth&&(n.marginLeft=l.autoLabelWidth):n.marginLeft=t,n})),h=ua((()=>{const t=l.model;if(!t||!e.prop)return;let n=e.prop;return-1!==n.indexOf(":")&&(n=n.replace(/:/,".")),us(t,n,!0).v})),v=ua((()=>{let e=y(),t=!1;return e&&e.length&&e.every((e=>!e.required||(t=!0,!1))),t})),m=ua((()=>e.size||l.size)),g=ua((()=>m.value||n.size)),b=(t,n=Ui)=>{r.value=!1;const i=x(t);if((!i||0===i.length)&&void 0===e.required)return void n();a.value="validating";const s={};i&&i.length>0&&i.forEach((e=>{delete e.trigger})),s[e.prop]=i;const u=new ji(s),c={};c[e.prop]=h.value,u.validate(c,{firstFields:!0},((t,r)=>{var i;a.value=t?"error":"success",o.value=t?t[0].message:"",n(o.value,r),null===(i=l.emit)||void 0===i||i.call(l,"validate",e.prop,!t,o.value||null)}))},y=()=>{const t=l.rules,n=e.rules,a=void 0!==e.required?{required:!!e.required}:[],o=us(t,e.prop||"",!1),r=t?o.o[e.prop||""]||o.v:[];return[].concat(n||r||[]).concat(a)},x=e=>y().filter((t=>!t.trigger||""===e||(Array.isArray(t.trigger)?t.trigger.indexOf(e)>-1:t.trigger===e))).map((e=>Object.assign({},e))),k=()=>{b("blur")},w=()=>{r.value?r.value=!1:b("change")},C=()=>{(y().length||void 0!==e.required)&&(t.on("el.form.blur",k),t.on("el.form.change",w))},_=Ye(Object.assign(Object.assign({},st(e)),{size:g,validateState:a,removeValidateEvents:()=>{t.off("el.form.blur",k),t.off("el.form.change",w)},addValidateEvents:C,resetField:()=>{a.value="",o.value="";let t=l.model,n=h.value,i=e.prop;-1!==i.indexOf(":")&&(i=i.replace(/:/,"."));let s=us(t,i,!0);r.value=!0,Array.isArray(n)?s.o[s.k]=[].concat(c):s.o[s.k]=c,Mt((()=>{r.value=!1}))},clearValidate:()=>{a.value="",o.value="",r.value=!1},validate:b,formItemMitt:t,updateComputedLabelWidth:e=>{i.value=e?e+"px":""}}));return mn((()=>{var t;if(e.prop){null===(t=l.formMitt)||void 0===t||t.emit("el.form.addField",_);let e=h.value;c=Array.isArray(e)?[...e]:e,C()}})),yn((()=>{var e;null===(e=l.formMitt)||void 0===e||e.emit("el.form.removeField",_)})),Fl("elFormItem",_),{formItemClass:ua((()=>[{"el-form-item--feedback":l.statusIcon,"is-error":"error"===a.value,"is-validating":"validating"===a.value,"is-success":"success"===a.value,"is-required":v.value||e.required,"is-no-asterisk":l.hideRequiredAsterisk},g.value?"el-form-item--"+g.value:""])),shouldShowError:ua((()=>"error"===a.value&&e.showMessage&&l.showMessage)),elForm:l,labelStyle:p,contentStyle:f,validateMessage:o,labelFor:d}}});Qf.render=function(e,t,n,l,a,o){const r=pl("LabelWrap");return Cl(),Al("div",{class:["el-form-item",e.formItemClass]},[Tl(r,{"is-auto-width":"auto"===e.labelStyle.width,"update-all":"auto"===e.elForm.labelWidth},{default:en((()=>[e.label||e.$slots.label?(Cl(),Al("label",{key:0,for:e.labelFor,class:"el-form-item__label",style:e.labelStyle},[Zt(e.$slots,"label",{},(()=>[Bl(d(e.label+e.elForm.labelSuffix),1)]))],12,["for"])):Pl("v-if",!0)])),_:1},8,["is-auto-width","update-all"]),Tl("div",{class:"el-form-item__content",style:e.contentStyle},[Zt(e.$slots,"default"),Tl(Pa,{name:"el-zoom-in-top"},{default:en((()=>[e.shouldShowError?Zt(e.$slots,"error",{key:0,error:e.validateMessage},(()=>[Tl("div",{class:["el-form-item__error",{"el-form-item__error--inline":"boolean"==typeof e.inlineMessage?e.inlineMessage:e.elForm.inlineMessage||!1}]},d(e.validateMessage),3)])):Pl("v-if",!0)])),_:1})],4)],2)},Qf.__file="packages/form/src/form-item.vue",Qf.install=e=>{e.component(Qf.name,Qf)};var eh=Qn({name:"ElHeader",props:{height:{type:String,default:"60px"}}});eh.render=function(e,t,n,l,a,o){return Cl(),Al("header",{class:"el-header",style:{height:e.height}},[Zt(e.$slots,"default")],4)},eh.__file="packages/container/src/header.vue",eh.install=e=>{e.component(eh.name,eh)};var th=Qn({name:"ElIcon",props:{name:{type:String,default:""}}});th.render=function(e,t,n,l,a,o){return Cl(),Al("i",{class:"el-icon-"+e.name},null,2)},th.__file="packages/icon/src/index.vue",th.install=e=>{e.component(th.name,th)};const nh={CONTAIN:{name:"contain",icon:"el-icon-full-screen"},ORIGINAL:{name:"original",icon:"el-icon-c-scale-to-original"}},lh=!is&&window.navigator.userAgent.match(/firefox/i)?"DOMMouseScroll":"mousewheel";var ah=Qn({name:"ElImageViewer",props:{urlList:{type:Array,default:()=>[]},zIndex:{type:Number,default:2e3},onSwitch:{type:Function,default:()=>({})},onClose:{type:Function,default:()=>({})},initialIndex:{type:Number,default:0}},setup(e){let t=null,n=null,l=null;const a=tt(!0),o=tt(e.initialIndex),r=tt(!0),i=tt(null),s=tt(null),u=tt(nh.CONTAIN);let c=tt({scale:1,deg:0,offsetX:0,offsetY:0,enableTransition:!1});const d=ua((()=>{const{urlList:t}=e;return t.length<=1})),p=ua((()=>0===o.value)),f=ua((()=>0===o.value)),h=ua((()=>e.urlList[o.value])),v=ua((()=>{const{scale:e,deg:t,offsetX:n,offsetY:l,enableTransition:a}=c.value,o={transform:`scale(${e}) rotate(${t}deg)`,transition:a?"transform .3s":"","margin-left":n+"px","margin-top":l+"px"};return u.value.name===nh.CONTAIN.name&&(o.maxWidth=o.maxHeight="100%"),o}));function m(){Ss(document,"keydown",t),Ss(document,lh,n),t=null,n=null,e.onClose()}function g(){c.value={scale:1,deg:0,offsetX:0,offsetY:0,enableTransition:!1}}function b(){if(a.value)return;const e=Object.keys(nh),t=Object.values(nh),n=u.value.name,l=(t.findIndex((e=>e.name===n))+1)%e.length;u.value=nh[e[l]],g()}function y(){if(p.value&&!r.value)return;const t=e.urlList.length;o.value=(o.value-1+t)%t}function x(){if(f.value&&!r.value)return;const t=e.urlList.length;o.value=(o.value+1)%t}function k(e,t={}){if(a.value)return;const{zoomRate:n,rotateDeg:l,enableTransition:o}=Object.assign({zoomRate:.2,rotateDeg:90,enableTransition:!0},t);switch(e){case"zoomOut":c.value.scale>.2&&(c.value.scale=parseFloat((c.value.scale-n).toFixed(3)));break;case"zoomIn":c.value.scale=parseFloat((c.value.scale+n).toFixed(3));break;case"clocelise":c.value.deg+=l;break;case"anticlocelise":c.value.deg-=l}c.value.enableTransition=o}return An(h,(()=>{Mt((()=>{s.value.complete||(a.value=!0)}))})),An(o,(t=>{g(),e.onSwitch(t)})),mn((()=>{var e;t=fs((e=>{switch(e.code){case Fs.esc:m();break;case Fs.space:b();break;case Fs.left:y();break;case Fs.up:k("zoomIn");break;case Fs.right:x();break;case Fs.down:k("zoomOut")}})),n=fs((e=>{k((e.wheelDelta?e.wheelDelta:-e.detail)>0?"zoomIn":"zoomOut",{zoomRate:.015,enableTransition:!1})})),As(document,"keydown",t),As(document,lh,n),null===(e=i.value)||void 0===e||e.focus()})),{index:o,wrapper:i,img:s,infinite:!0,loading:!1,isSingle:d,isFirst:p,isLast:f,currentImg:h,imgStyle:v,mode:u,handleActions:k,prev:y,next:x,hide:m,toggleMode:b,handleImgLoad:function(){a.value=!1},handleImgError:function(e){a.value=!1,e.target.alt=vc("el.image.error")},handleMouseDown:function(e){if(a.value||0!==e.button)return;const{offsetX:t,offsetY:n}=c.value,o=e.pageX,r=e.pageY;l=fs((e=>{c.value=Object.assign(Object.assign({},c.value),{offsetX:t+e.pageX-o,offsetY:n+e.pageY-r})})),As(document,"mousemove",l),As(document,"mouseup",(()=>{Ss(document,"mousemove",l)})),e.preventDefault()}}}});const oh=Tl("div",{class:"el-image-viewer__mask"},null,-1),rh=Tl("i",{class:"el-icon-circle-close"},null,-1),ih=Tl("i",{class:"el-icon-arrow-left"},null,-1),sh=Tl("i",{class:"el-icon-arrow-right"},null,-1),uh={class:"el-image-viewer__btn el-image-viewer__actions"},ch={class:"el-image-viewer__actions__inner"},dh=Tl("i",{class:"el-image-viewer__actions__divider"},null,-1),ph=Tl("i",{class:"el-image-viewer__actions__divider"},null,-1),fh={class:"el-image-viewer__canvas"};ah.render=function(e,t,n,l,a,o){return Cl(),Al(Pa,{name:"viewer-fade"},{default:en((()=>[Tl("div",{ref:"wrapper",tabindex:"-1",class:"el-image-viewer__wrapper",style:{"z-index":e.zIndex}},[oh,Pl(" CLOSE "),Tl("span",{class:"el-image-viewer__btn el-image-viewer__close",onClick:t[1]||(t[1]=(...t)=>e.hide(...t))},[rh]),Pl(" ARROW "),e.isSingle?Pl("v-if",!0):(Cl(),Al(gl,{key:0},[Tl("span",{class:["el-image-viewer__btn el-image-viewer__prev",{"is-disabled":!e.infinite&&e.isFirst}],onClick:t[2]||(t[2]=(...t)=>e.prev(...t))},[ih],2),Tl("span",{class:["el-image-viewer__btn el-image-viewer__next",{"is-disabled":!e.infinite&&e.isLast}],onClick:t[3]||(t[3]=(...t)=>e.next(...t))},[sh],2)],64)),Pl(" ACTIONS "),Tl("div",uh,[Tl("div",ch,[Tl("i",{class:"el-icon-zoom-out",onClick:t[4]||(t[4]=t=>e.handleActions("zoomOut"))}),Tl("i",{class:"el-icon-zoom-in",onClick:t[5]||(t[5]=t=>e.handleActions("zoomIn"))}),dh,Tl("i",{class:e.mode.icon,onClick:t[6]||(t[6]=(...t)=>e.toggleMode(...t))},null,2),ph,Tl("i",{class:"el-icon-refresh-left",onClick:t[7]||(t[7]=t=>e.handleActions("anticlocelise"))}),Tl("i",{class:"el-icon-refresh-right",onClick:t[8]||(t[8]=t=>e.handleActions("clocelise"))})])]),Pl(" CANVAS "),Tl("div",fh,[(Cl(!0),Al(gl,null,da(e.urlList,((n,l)=>Un((Cl(),Al("img",{ref:"img",key:n,src:e.currentImg,style:e.imgStyle,class:"el-image-viewer__img",onLoad:t[9]||(t[9]=(...t)=>e.handleImgLoad(...t)),onError:t[10]||(t[10]=(...t)=>e.handleImgError(...t)),onMousedown:t[11]||(t[11]=(...t)=>e.handleMouseDown(...t))},null,44,["src"])),[[ho,l===e.index]]))),128))])],4)])),_:1})},ah.__file="packages/image/src/image-viewer.vue";const hh=()=>void 0!==document.documentElement.style.objectFit,vh="none",mh="contain";let gh="";var bh=Qn({name:"ElImage",components:{ImageViewer:ah},inheritAttrs:!1,props:{src:{type:String,default:""},fit:{type:String,default:""},lazy:{type:Boolean,default:!1},scrollContainer:{type:[String,Object],default:null},previewSrcList:{type:Array,default:()=>[]},zIndex:{type:Number,default:2e3}},emits:["error"],setup(e,{emit:t}){const n=_s(),l=tt(!1),a=tt(!0),o=tt(0),r=tt(0),i=tt(!1),s=tt(null);let u=null,c=null;const d=ua((()=>{const{fit:t}=e;return!is&&t?hh()?{"object-fit":t}:function(e){const t=o.value,n=r.value;if(!s.value)return{};const{clientWidth:l,clientHeight:a}=s.value;if(!(t&&n&&l&&a))return{};const i=t/n<1;switch("scale-down"===e&&(e=t<l&&n<a?vh:mh),e){case vh:return{width:"auto",height:"auto"};case mh:return i?{width:"auto"}:{height:"auto"};case"cover":return i?{height:"auto"}:{width:"auto"};default:return{}}}(t):{}})),p=ua((()=>{const{fit:t}=e;return!is&&!hh()&&"fill"!==t})),f=ua((()=>{const{previewSrcList:t}=e;return Array.isArray(t)&&t.length>0})),h=ua((()=>{const{src:t,previewSrcList:n}=e;let l=0;const a=n.indexOf(t);return a>=0&&(l=a),l})),v=()=>{if(is)return;const t=n.value;a.value=!0,l.value=!1;const i=new Image;i.onload=e=>function(e,t){o.value=t.width,r.value=t.height,a.value=!1,l.value=!1}(0,i),i.onerror=m,Object.keys(t).forEach((e=>{const n=t[e];i.setAttribute(e,n)})),i.src=e.src};function m(e){a.value=!1,l.value=!0,t("error",e)}function g(){((e,t)=>{if(is||!e||!t)return!1;const n=e.getBoundingClientRect();let l;return l=[window,document,document.documentElement,null,void 0].includes(t)?{top:0,right:window.innerWidth,bottom:window.innerHeight,left:0}:t.getBoundingClientRect(),n.top<l.bottom&&n.bottom>l.top&&n.right>l.left&&n.left<l.right})(s.value,u)&&(v(),y())}function b(){if(is)return;const{scrollContainer:t}=e;var n;u=(n=t)&&1===n.nodeType?t:Zi(t)&&""!==t?document.querySelector(t):Ns(s.value),u&&(c=Xr()(g,200),As(u,"scroll",c),setTimeout((()=>g()),100))}function y(){!is&&u&&c&&(Ss(u,"scroll",c),u=null,c=null)}return An((()=>e.src),(()=>{v()})),mn((()=>{e.lazy?Mt(b):v()})),yn((()=>{e.lazy&&y()})),{attrs:n,loading:a,hasLoadError:l,showViewer:i,imgWidth:o,imgHeight:r,imageStyle:d,alignCenter:p,preview:f,imageIndex:h,clickHandler:function(){f.value&&(gh=document.body.style.overflow,document.body.style.overflow="hidden",i.value=!0)},closeViewer:function(){document.body.style.overflow=gh,i.value=!1},container:s,handleError:m,t:vc}}});const yh=Tl("div",{class:"el-image__placeholder"},null,-1),xh={class:"el-image__error"};function kh(e,t,n,l){return new(n||(n=Promise))((function(a,o){function r(e){try{s(l.next(e))}catch(e){o(e)}}function i(e){try{s(l.throw(e))}catch(e){o(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(r,i)}s((l=l.apply(e,t||[])).next())}))}bh.render=function(e,t,n,l,a,o){const r=pl("image-viewer");return Cl(),Al("div",{ref:"container",class:["el-image",e.$attrs.class],style:e.$attrs.style},[e.loading?Zt(e.$slots,"placeholder",{key:0},(()=>[yh])):e.hasLoadError?Zt(e.$slots,"error",{key:1},(()=>[Tl("div",xh,d(e.t("el.image.error")),1)])):(Cl(),Al("img",zl({key:2,class:"el-image__inner"},e.attrs,{src:e.src,style:e.imageStyle,class:{"el-image__inner--center":e.alignCenter,"el-image__preview":e.preview},onClick:t[1]||(t[1]=(...t)=>e.clickHandler(...t))}),null,16,["src"])),e.preview?(Cl(),Al(gl,{key:3},[e.showViewer?(Cl(),Al(r,{key:0,"z-index":e.zIndex,"initial-index":e.imageIndex,"on-close":e.closeViewer,"url-list":e.previewSrcList},null,8,["z-index","initial-index","on-close","url-list"])):Pl("v-if",!0)],64)):Pl("v-if",!0)],6)},bh.__file="packages/image/src/index.vue",bh.install=e=>{e.component(bh.name,bh)};const wh="ElInfiniteScroll",Ch={delay:{type:Number,default:200},distance:{type:Number,default:0},disabled:{type:Boolean,default:!1},immediate:{type:Boolean,default:!0}},_h=(e,t)=>vs(Ch).reduce(((n,[l,a])=>{var o,r;const{type:i,default:s}=a,u=e.getAttribute("infinite-scroll-"+l);let c=null!==(r=null!==(o=t[u])&&void 0!==o?o:u)&&void 0!==r?r:s;return c="false"!==c&&c,c=i(c),n[l]=Number.isNaN(c)?s:c,n}),{}),Ah=e=>{const{observer:t}=e[wh];t&&(t.disconnect(),delete e[wh].observer)},Sh=(e,t)=>{const{container:n,containerEl:l,instance:a,observer:o,lastScrollTop:r}=e[wh],{disabled:i,distance:s}=_h(e,a),{clientHeight:u,scrollHeight:c,scrollTop:d}=l,p=d-r;if(e[wh].lastScrollTop=d,o||i||p<0)return;let f=!1;if(n===e)f=c-(u+d)<=s;else{const{clientTop:t,scrollHeight:n}=e;f=d+u>=((e,t)=>Math.abs(Bs(e)-Bs(t)))(e,l)+t+n-s}f&&t.call(a)};function Eh(e,t){const{containerEl:n,instance:l}=e[wh],{disabled:a}=_h(e,l);a||(n.scrollHeight<=n.clientHeight?t.call(l):Ah(e))}const Mh={mounted(e,t){return kh(this,void 0,void 0,(function*(){const{instance:n,value:l}=t;Ji(l)||zs(wh,"'v-infinite-scroll' binding value must be a function"),yield Mt();const{delay:a,immediate:o}=_h(e,n),r=Ns(e,!0),i=r===window?document.documentElement:r,s=Xr()(Sh.bind(null,e,l),a);if(r){if(e[wh]={instance:n,container:r,containerEl:i,delay:a,cb:l,onScroll:s,lastScrollTop:i.scrollTop},o){const t=new MutationObserver(Xr()(Eh.bind(null,e,l),50));e[wh].observer=t,t.observe(e,{childList:!0,subtree:!0}),Eh(e,l)}r.addEventListener("scroll",s)}}))},unmounted(e){const{container:t,onScroll:n}=e[wh];null==t||t.removeEventListener("scroll",n),Ah(e)},install:e=>{e.directive("InfiniteScroll",Mh)}};var Oh=Qn({name:"ElInputNumber",components:{ElInput:cu},directives:{RepeatClick:Js},props:{step:{type:Number,default:1},stepStrictly:{type:Boolean,default:!1},max:{type:Number,default:1/0},min:{type:Number,default:-1/0},modelValue:{type:Number,default:0},disabled:{type:Boolean,default:!1},size:{type:String,validator:au},controls:{type:Boolean,default:!0},controlsPosition:{type:String,default:""},name:String,label:String,placeholder:String,precision:{type:Number,validator:e=>e>=0&&e===parseInt(e+"",10)}},emits:["update:modelValue","change","input","blur","focus"],setup(e,{emit:t}){const n=ms(),l=$l("elForm",{}),a=$l("elFormItem",{}),o=tt(null),r=Ye({currentValue:0,userInput:null}),i=ua((()=>g(e.modelValue)<e.min)),s=ua((()=>m(e.modelValue)>e.max)),u=ua((()=>{const t=v(e.step);return void 0!==e.precision?(t>e.precision&&console.warn("[Element Warn][InputNumber]precision should not be less than the decimal places of step"),e.precision):Math.max(v(e.modelValue),t)})),c=ua((()=>e.controls&&"right"===e.controlsPosition)),d=ua((()=>e.size||a.size||n.size)),p=ua((()=>e.disabled||l.disabled)),f=ua((()=>{if(null!==r.userInput)return r.userInput;let t=r.currentValue;return"number"==typeof t&&void 0!==e.precision&&(t=t.toFixed(e.precision)),t})),h=(e,t)=>(void 0===t&&(t=u.value),parseFloat(Math.round(e*Math.pow(10,t))/Math.pow(10,t)+"")),v=e=>{if(void 0===e)return 0;const t=e.toString(),n=t.indexOf(".");let l=0;return-1!==n&&(l=t.length-n-1),l},m=t=>{if("number"!=typeof t&&void 0!==t)return r.currentValue;const n=Math.pow(10,u.value);return h((n*t+n*e.step)/n)},g=t=>{if("number"!=typeof t&&void 0!==t)return r.currentValue;const n=Math.pow(10,u.value);return h((n*t-n*e.step)/n)},b=n=>{const l=r.currentValue;"number"==typeof n&&void 0!==e.precision&&(n=h(n,e.precision)),n>=e.max&&(n=e.max),n<=e.min&&(n=e.min),l!==n&&(r.userInput=null,t("update:modelValue",n),t("input",n),t("change",n,l),r.currentValue=n)};return An((()=>e.modelValue),(t=>{let n=void 0===t?t:Number(t);if(void 0!==n){if(isNaN(n))return;if(e.stepStrictly){const t=v(e.step),l=Math.pow(10,t);n=Math.round(n/e.step)*l*e.step/l}void 0!==e.precision&&(n=h(n,e.precision))}n>=e.max&&(n=e.max),n<=e.min&&(n=e.min),r.currentValue=n,r.userInput=null}),{immediate:!0}),mn((()=>{let t=o.value.input;t.setAttribute("role","spinbutton"),t.setAttribute("aria-valuemax",e.max),t.setAttribute("aria-valuemin",e.min),t.setAttribute("aria-valuenow",r.currentValue),t.setAttribute("aria-disabled",p.value)})),bn((()=>{o.value.input.setAttribute("aria-valuenow",r.currentValue)})),{input:o,displayValue:f,handleInput:e=>r.userInput=e,handleInputChange:e=>{const t=""===e?void 0:Number(e);isNaN(t)&&""!==e||b(t),r.userInput=null},controlsAtRight:c,decrease:()=>{if(p.value||i.value)return;const t=e.modelValue||0,n=g(t);b(n)},increase:()=>{if(p.value||s.value)return;const t=e.modelValue||0,n=m(t);b(n)},inputNumberSize:d,inputNumberDisabled:p,maxDisabled:s,minDisabled:i}}});Oh.render=function(e,t,n,l,a,o){const r=pl("el-input"),i=hl("repeat-click");return Cl(),Al("div",{class:["el-input-number",e.inputNumberSize?"el-input-number--"+e.inputNumberSize:"",{"is-disabled":e.inputNumberDisabled},{"is-without-controls":!e.controls},{"is-controls-right":e.controlsAtRight}],onDragstart:t[5]||(t[5]=co((()=>{}),["prevent"]))},[e.controls?Un((Cl(),Al("span",{key:0,class:["el-input-number__decrease",{"is-disabled":e.minDisabled}],role:"button",onKeydown:t[1]||(t[1]=fo(((...t)=>e.decrease(...t)),["enter"]))},[Tl("i",{class:"el-icon-"+(e.controlsAtRight?"arrow-down":"minus")},null,2)],34)),[[i,e.decrease]]):Pl("v-if",!0),e.controls?Un((Cl(),Al("span",{key:1,class:["el-input-number__increase",{"is-disabled":e.maxDisabled}],role:"button",onKeydown:t[2]||(t[2]=fo(((...t)=>e.increase(...t)),["enter"]))},[Tl("i",{class:"el-icon-"+(e.controlsAtRight?"arrow-up":"plus")},null,2)],34)),[[i,e.increase]]):Pl("v-if",!0),Tl(r,{ref:"input","model-value":e.displayValue,placeholder:e.placeholder,disabled:e.inputNumberDisabled,size:e.inputNumberSize,max:e.max,min:e.min,name:e.name,label:e.label,onKeydown:[fo(co(e.increase,["prevent"]),["up"]),fo(co(e.decrease,["prevent"]),["down"])],onBlur:t[3]||(t[3]=t=>e.$emit("blur",t)),onFocus:t[4]||(t[4]=t=>e.$emit("focus",t)),onInput:e.handleInput,onChange:e.handleInputChange},null,8,["model-value","placeholder","disabled","size","max","min","name","label","onKeydown","onInput","onChange"])],34)},Oh.__file="packages/input-number/src/index.vue",Oh.install=e=>{e.component(Oh.name,Oh)};var Dh=Qn({name:"ElLink",props:{type:{type:String,default:"default",validator:e=>["default","primary","success","warning","info","danger"].includes(e)},underline:{type:Boolean,default:!0},disabled:{type:Boolean,default:!1},href:{type:String,default:""},icon:{type:String,default:""}},emits:["click"],setup:(e,{emit:t})=>({handleClick:function(n){e.disabled||t("click",n)}})});const Th={key:1,class:"el-link--inner"};Dh.render=function(e,t,n,l,a,o){return Cl(),Al("a",{class:["el-link",e.type?"el-link--"+e.type:"",e.disabled&&"is-disabled",e.underline&&!e.disabled&&"is-underline"],href:e.disabled?null:e.href,onClick:t[1]||(t[1]=(...t)=>e.handleClick(...t))},[e.icon?(Cl(),Al("i",{key:0,class:e.icon},null,2)):Pl("v-if",!0),e.$slots.default?(Cl(),Al("span",Th,[Zt(e.$slots,"default")])):Pl("v-if",!0),e.$slots.icon?Zt(e.$slots,"icon",{key:2}):Pl("v-if",!0)],10,["href"])},Dh.__file="packages/link/src/index.vue",Dh.install=e=>{e.component(Dh.name,Dh)};const Nh={parent:null,background:"",spinner:!1,text:null,fullscreen:!0,body:!1,lock:!1,customClass:""},Bh={fullscreenLoading:null},Ph=(e,t,n)=>{"absolute"!==n.originalPosition.value&&"fixed"!==n.originalPosition.value?Ms(t,"el-loading-parent--relative"):Os(t,"el-loading-parent--relative"),e.fullscreen&&e.lock?Ms(t,"el-loading-parent--hidden"):Os(t,"el-loading-parent--hidden")},Vh=function(e={}){if(is)return;"string"==typeof(e=Object.assign(Object.assign({},Nh),e)).target&&(e.target=document.querySelector(e.target)),e.target=e.target||document.body,e.target!==document.body?e.fullscreen=!1:e.body=!0,e.fullscreen&&Bh.fullscreenLoading&&Bh.fullscreenLoading.close();const t=e.body?document.body:e.target;e.parent=t;const n=function({options:e,globalLoadingOption:t}){let n=null,l=null;const a=tt(!1),o=Ye(Object.assign(Object.assign({},e),{originalPosition:"",originalOverflow:"",visible:!e.hasOwnProperty("visible")||e.visible}));function r(){const e=o.parent;e.vLoadingAddClassList||(Os(e,"el-loading-parent--relative"),Os(e,"el-loading-parent--hidden")),n.el&&n.el.parentNode&&n.el.parentNode.removeChild(n.el)}const i=Object.assign(Object.assign({},st(o)),{setText:function(e){o.text=e},close:function(){o.parent.vLoadingAddClassList=null,o.fullscreen&&(t.fullscreenLoading=void 0),a.value=!0,clearTimeout(l),l=window.setTimeout((()=>{a.value&&(a.value=!1,r())}),400),o.visible=!1},handleAfterLeave:function(){a.value&&(a.value=!1,r())}});return n=Tl({name:"ElLoading",setup:()=>i,render(){const e=ca("svg",{class:"circular",viewBox:"25 25 50 50"},[ca("circle",{class:"path",cx:"50",cy:"50",r:"20",fill:"none"})]),t=ca("i",{class:this.spinner}),n=ca("p",{class:"el-loading-text"},[this.text]);return ca(Pa,{name:"el-loading-fade",onAfterLeave:this.handleAfterLeave},{default:()=>ca("div",{style:{backgroundColor:this.background||"",display:this.visible?"inherit":"none"},class:["el-loading-mask",this.customClass,this.fullscreen?"is-fullscreen":""]},[ca("div",{class:"el-loading-spinner"},[this.spinner?t:e,this.text?n:null])])})}}),yo(n,document.createElement("div")),Object.assign(Object.assign({},i),{vm:n,get $el(){return n.el}})}({options:e,globalLoadingOption:Bh});return((e,t,n)=>{const l={};e.fullscreen?(n.originalPosition.value=Ds(document.body,"position"),n.originalOverflow.value=Ds(document.body,"overflow"),l.zIndex=String(Fu.nextZIndex())):e.body?(n.originalPosition.value=Ds(document.body,"position"),["top","left"].forEach((t=>{const n="top"===t?"scrollTop":"scrollLeft";l[t]=e.target.getBoundingClientRect()[t]+document.body[n]+document.documentElement[n]-parseInt(Ds(document.body,"margin-"+t),10)+"px"})),["height","width"].forEach((t=>{l[t]=e.target.getBoundingClientRect()[t]+"px"}))):n.originalPosition.value=Ds(t,"position"),Object.keys(l).forEach((e=>{n.$el.style[e]=l[e]}))})(e,t,n),Ph(e,t,n),e.parent.vLoadingAddClassList=()=>{Ph(e,t,n)},t.appendChild(n.$el),e.fullscreen&&(Bh.fullscreenLoading=n),n},Ih={mounted(e,t){const n=e.getAttribute("element-loading-text"),l=e.getAttribute("element-loading-spinner"),a=e.getAttribute("element-loading-background"),o=e.getAttribute("element-loading-custom-class"),r=t.instance,i=Vh({text:r&&r[n]||n,spinner:r&&r[l]||l,background:r&&r[a]||a,customClass:r&&r[o]||o,fullscreen:!!t.modifiers.fullscreen,target:t.modifiers.fullscreen?null:e,body:!!t.modifiers.body,visible:!!t.value,lock:!!t.modifiers.lock});e.instance=i},updated(e,t){const n=e.instance;n&&(n.setText(e.getAttribute("element-loading-text")),t.oldValue!==t.value&&(t.value&&!n.visible.value?n.visible.value=!0:n.visible.value=!1))},unmounted(e){var t;null===(t=null==e?void 0:e.instance)||void 0===t||t.close()}};var Lh={install(e){e.directive("loading",Ih),e.config.globalProperties.$loading=Vh},directive:Ih,service:Vh},zh=Qn({name:"ElMain"});const Fh={class:"el-main"};zh.render=function(e,t,n,l,a,o){return Cl(),Al("main",Fh,[Zt(e.$slots,"default")])},zh.__file="packages/container/src/main.vue",zh.install=e=>{e.component(zh.name,zh)};class $h{constructor(e,t){this.parent=e,this.domNode=t,this.subIndex=0,this.subIndex=0,this.init()}init(){this.subMenuItems=this.domNode.querySelectorAll("li"),this.addListeners()}gotoSubIndex(e){e===this.subMenuItems.length?e=0:e<0&&(e=this.subMenuItems.length-1),this.subMenuItems[e].focus(),this.subIndex=e}addListeners(){const e=this.parent.domNode;Array.prototype.forEach.call(this.subMenuItems,(t=>{t.addEventListener("keydown",(t=>{let n=!1;switch(t.code){case Fs.down:this.gotoSubIndex(this.subIndex+1),n=!0;break;case Fs.up:this.gotoSubIndex(this.subIndex-1),n=!0;break;case Fs.tab:Ws(e,"mouseleave");break;case Fs.enter:case Fs.space:n=!0,t.currentTarget.click()}return n&&(t.preventDefault(),t.stopPropagation()),!1}))}))}}class Rh{constructor(e){this.domNode=e,this.submenu=null,this.submenu=null,this.init()}init(){this.domNode.setAttribute("tabindex","0");const e=this.domNode.querySelector(".el-menu");e&&(this.submenu=new $h(this,e)),this.addListeners()}addListeners(){this.domNode.addEventListener("keydown",(e=>{let t=!1;switch(e.code){case Fs.down:Ws(e.currentTarget,"mouseenter"),this.submenu&&this.submenu.gotoSubIndex(0),t=!0;break;case Fs.up:Ws(e.currentTarget,"mouseenter"),this.submenu&&this.submenu.gotoSubIndex(this.submenu.subMenuItems.length-1),t=!0;break;case Fs.tab:Ws(e.currentTarget,"mouseleave");break;case Fs.enter:case Fs.space:t=!0,e.currentTarget.click()}t&&e.preventDefault()}))}}class jh{constructor(e){this.domNode=e,this.init()}init(){const e=this.domNode.childNodes;[].filter.call(e,(e=>1===e.nodeType)).forEach((e=>{new Rh(e)}))}}var Hh=Qn({name:"ElMenuCollapseTransition",setup:()=>({on:{beforeEnter(e){e.style.opacity=.2},enter(e){Ms(e,"el-opacity-transition"),e.style.opacity=1},afterEnter(e){Os(e,"el-opacity-transition"),e.style.opacity=""},beforeLeave(e){e.dataset||(e.dataset={}),Es(e,"el-menu--collapse")?(Os(e,"el-menu--collapse"),e.dataset.oldOverflow=e.style.overflow,e.dataset.scrollWidth=e.clientWidth,Ms(e,"el-menu--collapse")):(Ms(e,"el-menu--collapse"),e.dataset.oldOverflow=e.style.overflow,e.dataset.scrollWidth=e.clientWidth,Os(e,"el-menu--collapse")),e.style.width=e.scrollWidth+"px",e.style.overflow="hidden"},leave(e){Ms(e,"horizontal-collapse-transition"),e.style.width=e.dataset.scrollWidth+"px"}}})});Hh.render=function(e,t,n,l,a,o){return Cl(),Al(Pa,zl({mode:"out-in"},pa(e.on)),{default:en((()=>[Zt(e.$slots,"default")])),_:3},16)},Hh.__file="packages/menu/src/menu-collapse-transition.vue";var Wh=Qn({name:"ElMenu",componentName:"ElMenu",components:{ElMenuCollapseTransition:Hh},props:{mode:{type:String,default:"vertical"},defaultActive:{type:String,default:""},defaultOpeneds:Array,uniqueOpened:Boolean,router:Boolean,menuTrigger:{type:String,default:"hover"},collapse:Boolean,backgroundColor:{type:String},textColor:{type:String},activeTextColor:{type:String},collapseTransition:{type:Boolean,default:!0}},emits:["close","open","select"],setup(e,t){const n=tt(e.defaultOpeneds&&!e.collapse?e.defaultOpeneds.slice(0):[]),l=la(),a=tt(e.defaultActive),o=tt({}),r=tt({}),i=tt(!1),s=_o(),u=l.appContext.config.globalProperties.$router,c=function(e=""){const t=tt("");return e?(t.value=function(e,t=.2){let{red:n,green:l,blue:a}=function(e){let t=e.replace("#","");if(/^[0-9a-fA-F]{3}$/.test(t)){const e=t.split("");for(let t=2;t>=0;t--)e.splice(t,0,e[t]);t=e.join("")}return/^[0-9a-fA-F]{6}$/.test(t)?{red:parseInt(t.slice(0,2),16),green:parseInt(t.slice(2,4),16),blue:parseInt(t.slice(4,6),16)}:{red:255,green:255,blue:255}}(e);return t>0?(n*=1-t,l*=1-t,a*=1-t):(n+=(255-n)*t,l+=(255-l)*t,a+=(255-a)*t),`rgb(${Math.round(n)}, ${Math.round(l)}, ${Math.round(a)})`}(e),t):t}(e.backgroundColor),d=ua((()=>"horizontal"===e.mode||"vertical"===e.mode&&e.collapse)),p=()=>{const t=a.value,n=o.value[t];n&&"horizontal"!==e.mode&&!e.collapse&&n.indexPath.forEach((e=>{let t=r.value[e];t&&v(e,null==t?void 0:t.indexPath)}))},f=e=>{r.value[e.index]=e},h=e=>{delete r.value[e.index]},v=(t,l)=>{n.value.includes(t)||(e.uniqueOpened&&(n.value=n.value.filter((e=>-1!==(et(l)?l.value:l).indexOf(e)))),n.value.push(t))},m=e=>{const t=n.value.indexOf(e);-1!==t&&n.value.splice(t,1)},g=e=>{const{index:l,indexPath:a}=e;n.value.includes(l)?(m(l),t.emit("close",l,a.value)):(v(l,a),t.emit("open",l,a.value))},b=l=>{const{index:o,indexPath:r}=l,i=null!==l.index,s=a.value;i&&(a.value=l.index),t.emit("select",o,r.value,l),("horizontal"===e.mode||e.collapse)&&(n.value=[]),e.router&&u&&i&&y(l,(e=>{if(a.value=s,e){if("NavigationDuplicated"===e.name)return;console.error(e)}}))},y=(e,t)=>{let n=e.route||e.index;try{null==u||u.push(n,(()=>null),t)}catch(e){console.error(e)}},x=t=>{const n=o.value,l=n[t]||n[a.value]||n[e.defaultActive];l?(a.value=l.index,p()):i.value?i.value=!1:a.value=null};return An((()=>e.defaultActive),(e=>{o[e]||(a.value=""),x(e)})),An(o.value,(()=>{x()})),An((()=>e.collapse),((t,l)=>{t!==l&&(i.value=!0),t&&(n.value=[]),s.emit("rootMenu:toggle-collapse",Boolean(e.collapse))})),Fl("rootMenu",{props:e,openedMenus:n,items:o,submenus:r,hoverBackground:c,activeIndex:a,isMenuPopup:d,methods:{addMenuItem:e=>{o.value[e.index]=e},removeMenuItem:e=>{delete o.value[e.index]},addSubMenu:f,removeSubMenu:h,openMenu:v,closeMenu:m},rootMenuEmit:s.emit,rootMenuOn:s.on}),Fl("subMenu:"+l.uid,{addSubMenu:f,removeSubMenu:h}),mn((()=>{p(),s.on("menuItem:item-click",b),s.on("submenu:submenu-click",g),"horizontal"===e.mode&&new jh(l.vnode.el)})),{hoverBackground:c,isMenuPopup:d,props:e,open:e=>{const{indexPath:t}=r.value[e.toString()];t.forEach((e=>v(e,t)))},close:e=>{m(e)}}}});function qh(e,t){const n=$l("rootMenu"),l=ua((()=>{let n=e.parent;const l=[t];for(;"ElMenu"!==n.type.name;)n.props.index&&l.unshift(n.props.index),n=n.parent;return l}));return{parentMenu:ua((()=>{let t=e.parent;for(;t&&-1===["ElMenu","ElSubmenu"].indexOf(t.type.name);)t=t.parent;return t})),paddingStyle:ua((()=>{let t=e.parent;if("vertical"!==n.props.mode)return{};let l=20;if(n.props.collapse)l=20;else for(;t&&"ElMenu"!==t.type.name;)"ElSubmenu"===t.type.name&&(l+=20),t=t.parent;return{paddingLeft:l+"px"}})),indexPath:l}}Wh.render=function(e,t,n,l,a,o){const r=pl("el-menu-collapse-transition");return e.props.collapseTransition?(Cl(),Al(r,{key:0},{default:en((()=>[(Cl(),Al("ul",{key:+e.props.collapse,role:"menubar",style:{backgroundColor:e.props.backgroundColor||""},class:{"el-menu":!0,"el-menu--horizontal":"horizontal"===e.mode,"el-menu--collapse":e.props.collapse}},[Zt(e.$slots,"default")],6))])),_:3})):(Cl(),Al("ul",{key:+e.props.collapse,role:"menubar",style:{backgroundColor:e.props.backgroundColor||""},class:{"el-menu":!0,"el-menu--horizontal":"horizontal"===e.mode,"el-menu--collapse":e.props.collapse}},[Zt(e.$slots,"default")],6))},Wh.__file="packages/menu/src/menu.vue",Wh.install=e=>{e.component(Wh.name,Wh)};var Yh=Qn({name:"ElTooltip",components:{ElPopper:Ku},props:{effect:{type:String,default:"dark"},class:{type:String,default:""},content:{type:String,default:""},disabled:{type:Boolean,default:!1},enterable:{type:Boolean,default:!0},hideAfter:{type:Number,default:0},manual:{type:Boolean,default:!1},modelValue:{type:Boolean,validator:e=>"boolean"==typeof e,default:void 0},offset:{type:Number,default:12},openDelay:{type:Number,default:0},placement:{type:String,default:"bottom"},popperOptions:{type:Object,default:()=>null},showAfter:{type:Number,default:0},transition:{type:String,default:"el-fade-in-linear"},trigger:{type:[String,Array],default:()=>["hover"]},visibleArrow:{type:Boolean,default:!0}},emits:[tu],setup(e,t){e.manual&&void 0===e.modelValue&&zs("[ElTooltip]","You need to pass a v-model to el-tooltip when `manual` is true");const n=tt(null);return{popper:n,onUpdateVisible:e=>{t.emit(tu,e)},updatePopper:()=>n.value.update()}},render(){const{$slots:e,content:t,disabled:n,effect:l,enterable:a,hideAfter:o,manual:r,offset:i,openDelay:s,onUpdateVisible:u,placement:c,popperOptions:d,showAfter:p,transition:f,trigger:h,visibleArrow:v}=this;return ca(Ku,{ref:"popper",appendToBody:!0,class:this.class,disabled:n,effect:l,enterable:a,hideAfter:o,manualMode:r,offset:i,placement:c,showAfter:s||p,showArrow:v,transition:f,trigger:h,popperOptions:d,visible:this.modelValue,"onUpdate:visible":u},{default:()=>e.content?e.content():t,trigger:()=>e.default()})}});Yh.install=e=>{e.component(Yh.name,Yh)};var Kh=Qn({name:"ElMenuItem",componentName:"ElMenuItem",components:{ElTooltip:Yh},props:{index:{default:null,validator:e=>"string"==typeof e||null===e},route:[String,Object],disabled:Boolean},emits:["click"],setup(e,{emit:t,slots:n}){const l=la(),a=$l("rootMenu"),{parentMenu:o,paddingStyle:r,indexPath:i}=qh(l,e.index),{addSubMenu:s,removeSubMenu:u}=$l("subMenu:"+o.value.uid),c=ua((()=>e.index===a.activeIndex.value)),d=ua((()=>a.hoverBackground.value)),p=ua((()=>a.props.backgroundColor||"")),f=ua((()=>a.props.activeTextColor||"")),h=ua((()=>a.props.textColor||"")),v=ua((()=>a.props.mode)),m=ua((()=>"ElMenu"!==o.value.type.name)),g=ua((()=>{const e={color:c.value?f.value:h.value,borderBottomColor:""};return"horizontal"!==v.value||m.value||(e.borderBottomColor=c.value?a.props.activeTextColor?f.value:"":"transparent"),e}));return mn((()=>{s({index:e.index,indexPath:i,active:c}),a.methods.addMenuItem({index:e.index,indexPath:i,active:c})})),yn((()=>{u({index:e.index,indexPath:i,active:c}),a.methods.removeMenuItem({index:e.index,indexPath:i,active:c})})),{parentMenu:o,rootMenu:a,slots:n,paddingStyle:r,itemStyle:g,backgroundColor:p,active:c,handleClick:()=>{e.disabled||(a.rootMenuEmit("menuItem:item-click",{index:e.index,indexPath:i,route:e.route}),t("click",{index:e.index,indexPath:i.value}))},onMouseEnter:()=>{("horizontal"!==v.value||a.props.backgroundColor)&&(l.vnode.el.style.backgroundColor=d.value)},onMouseLeave:()=>{("horizontal"!==v.value||a.props.backgroundColor)&&(l.vnode.el.style.backgroundColor=p.value)}}}});const Uh={style:{position:"absolute",left:"0",top:"0",height:"100%",width:"100%",display:"inline-block","box-sizing":"border-box",padding:"0 20px"}};Kh.render=function(e,t,n,l,a,o){const r=pl("el-tooltip");return Cl(),Al("li",{class:["el-menu-item",{"is-active":e.active,"is-disabled":e.disabled}],role:"menuitem",tabindex:"-1",style:[e.paddingStyle,e.itemStyle,{backgroundColor:e.backgroundColor}],onClick:t[1]||(t[1]=(...t)=>e.handleClick(...t)),onMouseenter:t[2]||(t[2]=(...t)=>e.onMouseEnter(...t)),onFocus:t[3]||(t[3]=(...t)=>e.onMouseEnter(...t)),onBlur:t[4]||(t[4]=(...t)=>e.onMouseLeave(...t)),onMouseleave:t[5]||(t[5]=(...t)=>e.onMouseLeave(...t))},["ElMenu"===e.parentMenu.type.name&&e.rootMenu.props.collapse&&e.slots.title?(Cl(),Al(r,{key:0,effect:"dark",placement:"right"},{content:en((()=>[Zt(e.$slots,"title")])),default:en((()=>[Tl("div",Uh,[Zt(e.$slots,"default")])])),_:3})):(Cl(),Al(gl,{key:1},[Zt(e.$slots,"default"),Zt(e.$slots,"title")],64))],38)},Kh.__file="packages/menu/src/menuItem.vue",Kh.install=e=>{e.component(Kh.name,Kh)};var Gh=Qn({name:"ElMenuItemGroup",props:{}});Gh.render=function(e,t,n,l,a,o){return Cl(),Al("div",null,[Zt(e.$slots,"default")])},Gh.__file="packages/menu/src/menuItemGroup.vue",Gh.install=e=>{e.component(Gh.name,Gh)};const Xh={success:"success",info:"info",warning:"warning",error:"error"};var Jh=Qn({name:"ElMessage",props:{customClass:{type:String,default:""},center:{type:Boolean,default:!1},dangerouslyUseHTMLString:{type:Boolean,default:!1},duration:{type:Number,default:3e3},iconClass:{type:String,default:""},id:{type:String,default:""},message:{type:[String,Object],default:""},onClose:{type:Function,required:!0},showClose:{type:Boolean,default:!1},type:{type:String,default:"info"},offset:{type:Number,default:20},zIndex:{type:Number,default:0}},setup:e=>({typeClass:ua((()=>{const t=e.type;return t&&Xh[t]?"el-message__icon el-icon-"+Xh[t]:""})),customStyle:ua((()=>({top:e.offset+"px",zIndex:e.zIndex}))),visible:tt(!1),closed:tt(!1),timer:tt(null)}),watch:{closed(e){e&&(this.visible=!1,As(this.$el,"transitionend",this.destroyElement))}},mounted(){this.startTimer(),this.visible=!0,As(document,"keydown",this.keydown)},beforeUnmount(){Ss(document,"keydown",this.keydown)},methods:{destroyElement(){this.visible=!1,Ss(this.$el,"transitionend",this.destroyElement),this.onClose()},startTimer(){this.duration>0&&(this.timer=setTimeout((()=>{this.closed||this.close()}),this.duration))},clearTimer(){clearTimeout(this.timer),this.timer=null},close(){this.closed=!0,this.timer=null},keydown({code:e}){e===Fs.esc?this.closed||this.close():this.startTimer()}}});const Zh={key:0,class:"el-message__content"};let Qh;Jh.render=function(e,t,n,l,a,o){return Cl(),Al(Pa,{name:"el-message-fade"},{default:en((()=>[Un(Tl("div",{id:e.id,class:["el-message",e.type&&!e.iconClass?"el-message--"+e.type:"",e.center?"is-center":"",e.showClose?"is-closable":"",e.customClass],style:e.customStyle,role:"alert",onMouseenter:t[2]||(t[2]=(...t)=>e.clearTimer(...t)),onMouseleave:t[3]||(t[3]=(...t)=>e.startTimer(...t))},[e.type||e.iconClass?(Cl(),Al("i",{key:0,class:[e.typeClass,e.iconClass]},null,2)):Pl("v-if",!0),Zt(e.$slots,"default",{},(()=>[e.dangerouslyUseHTMLString?(Cl(),Al(gl,{key:1},[Pl(" Caution here, message could've been compromised, never use user's input as message "),Pl("  eslint-disable-next-line "),Tl("p",{class:"el-message__content",innerHTML:e.message},null,8,["innerHTML"])],64)):(Cl(),Al("p",Zh,d(e.message),1))])),e.showClose?(Cl(),Al("div",{key:1,class:"el-message__closeBtn el-icon-close",onClick:t[1]||(t[1]=co(((...t)=>e.close(...t)),["stop"]))})):Pl("v-if",!0)],46,["id"]),[[ho,e.visible]])])),_:3})},Jh.__file="packages/message/src/index.vue";const ev=[];let tv=1;const nv=function(e={}){if(is)return;"string"==typeof e&&(e={message:e});let t=e,n=e.offset||20;ev.forEach((({vm:e})=>{n+=(e.el.offsetHeight||0)+16})),n+=16;const l="message_"+tv++,a=t.onClose;t=Object.assign(Object.assign({},t),{onClose:()=>{!function(e,t){const n=ev.findIndex((({vm:t})=>{const{id:n}=t.component.props;return e===n}));if(-1===n)return;const{vm:l,$el:a}=ev[n];if(!l)return;null==t||t(l);const o=l.el.offsetHeight;yo(null,a),Mt((()=>{document.body.removeChild(a)})),ev.splice(n,1);const r=ev.length;if(!(r<1))for(let e=n;e<r;e++){const t=parseInt(ev[e].vm.el.style.top,10)-o-16;ev[e].vm.component.props.offset=t,ev[e].vm.component.props.vertOffset=t}}(l,a)},offset:n,id:l,zIndex:Fu.nextZIndex()});const o=document.createElement("div");o.className="container_"+l;const r=t.message;return Qh=Tl(Jh,t,Sl(t.message)?{default:()=>r}:null),yo(Qh,o),ev.push({vm:Qh,$el:o}),document.body.appendChild(o),{close:t.onClose}};let lv;["success","warning","info","error"].forEach((e=>{nv[e]=t=>("string"==typeof t?t={message:t,type:e}:t.type=e,nv(t))})),nv.closeAll=function(){for(let e=ev.length-1;e>=0;e--)ev[e].vm.component.ctx.close()},nv.install=e=>{e.config.globalProperties.$message=nv};class av{constructor(e,t,n){if(this.dialogNode=e,this.focusAfterClosed=t,this.focusFirst=n,this.lastFocus=null,null===this.dialogNode||"dialog"!==this.dialogNode.getAttribute("role"))throw new Error("Dialog() requires a DOM element with ARIA role of dialog.");this.focusAfterClosed="string"==typeof t?document.getElementById(t):"object"==typeof t?t:null,this.focusFirst="string"==typeof n?document.getElementById(n):"object"==typeof n?n:null,this.focusFirst?this.focusFirst.focus():qs.focusFirstDescendant(this.dialogNode),this.lastFocus=document.activeElement,lv=e=>{this.trapFocus(e)},this.addListeners()}addListeners(){document.addEventListener("focus",lv,!0)}removeListeners(){document.removeEventListener("focus",lv,!0)}closeDialog(){this.removeListeners(),this.focusAfterClosed&&setTimeout((()=>{this.focusAfterClosed.focus()}))}trapFocus(e){qs.IgnoreUtilFocusChanges||(this.dialogNode.contains(e.target)?this.lastFocus=e.target:(qs.focusFirstDescendant(this.dialogNode),this.lastFocus===document.activeElement&&qs.focusLastDescendant(this.dialogNode),this.lastFocus=document.activeElement))}}let ov,rv,iv=1;const sv={success:"success",info:"info",warning:"warning",error:"error"};var uv=Qn({name:"ElMessageBox",components:{ElButton:sc,ElInput:cu},props:{openDelay:{type:Number,default:0},closeDelay:{type:Number,default:0},zIndex:Number,modalFade:{type:Boolean,default:!0},modalClass:{type:String,default:""},modalAppendToBody:{type:Boolean,default:!1},modal:{type:Boolean,default:!0},lockScroll:{type:Boolean,default:!0},showClose:{type:Boolean,default:!0},closeOnClickModal:{type:Boolean,default:!0},closeOnPressEscape:{type:Boolean,default:!0},closeOnHashChange:{type:Boolean,default:!0},center:{default:!1,type:Boolean},roundButton:{default:!1,type:Boolean}},setup(e){let t;const n=((e,t,n="root")=>{let l,a=!1,o=!1,r=null,i=null;const s=la(),u=Ye({opened:!1,bodyPaddingRight:null,computedBodyPaddingRight:0,withoutHiddenClass:!0,rendered:!1,visible:!1});vn((()=>{const{handleClose:t,handleAction:n}=s.proxy;l="popup-"+iv++,Fu.register(l,Object.assign(Object.assign({},st(e)),{close:p,handleClose:t,handleAction:n}))})),yn((()=>{Fu.deregister(l),Fu.closeModal(l),h()}));const c=t=>{if(is)return;if(u.opened)return;a=!0;const r=s.refs[n],i=t.modal,c=t.zIndex;if(c&&(Fu.zIndex=c),i&&(o&&(Fu.closeModal(l),o=!1),Fu.openModal(l,Fu.nextZIndex(),e.modalAppendToBody?void 0:r,t.modalClass,t.modalFade),t.lockScroll)){u.withoutHiddenClass=!Es(document.body,"el-popup-parent--hidden"),u.withoutHiddenClass&&(u.bodyPaddingRight=document.body.style.paddingRight,u.computedBodyPaddingRight=parseInt(Ds(document.body,"paddingRight"),10)),ov=Is();const e=document.documentElement.clientHeight<document.body.scrollHeight,t=Ds(document.body,"overflowY");ov>0&&(e||"scroll"===t)&&u.withoutHiddenClass&&(document.body.style.paddingRight=u.computedBodyPaddingRight+ov+"px"),Ms(document.body,"el-popup-parent--hidden")}"static"===getComputedStyle(r).position&&(r.style.position="absolute"),r.style.zIndex=String(Fu.nextZIndex()),u.opened=!0,f()},d=function(t){u.rendered||(u.rendered=!0);const n=Object.assign({},e||s.proxy,t);r&&(clearTimeout(r),r=null),clearTimeout(i);const l=Number(n.openDelay);l>0?i=setTimeout((()=>{i=null,c(n)}),l):c(n)},p=()=>{null!==i&&(clearTimeout(i),i=null),clearTimeout(r);const n=Number(e.closeDelay);n>0?r=setTimeout((()=>{r=null,t()}),n):t()},f=()=>{a=!1},h=()=>{e.modal&&u.withoutHiddenClass&&(document.body.style.paddingRight=u.bodyPaddingRight,Os(document.body,"el-popup-parent--hidden")),u.withoutHiddenClass=!0};return An((()=>u.visible),(e=>kh(void 0,void 0,void 0,(function*(){if(e){if(a)return;u.rendered||(u.rendered=!0,yield Mt()),d()}else p()})))),{state:u,open:d,close:p,doAfterClose:()=>{Fu.closeModal(l),o=!1},updateClosingFlag:e=>{o=e},restoreBodyStyle:h}})(e,i),l=Ye({uid:1,title:void 0,message:"",type:"",iconClass:"",customClass:"",showInput:!1,inputValue:null,inputPlaceholder:"",inputType:"text",inputPattern:null,inputValidator:null,inputErrorMessage:"",showConfirmButton:!0,showCancelButton:!1,action:"",confirmButtonText:"",cancelButtonText:"",confirmButtonLoading:!1,cancelButtonLoading:!1,confirmButtonClass:"",confirmButtonDisabled:!1,cancelButtonClass:"",editorErrorMessage:null,callback:null,dangerouslyUseHTMLString:!1,focusAfterClosed:null,isOnComposition:!1,distinguishCancelAndClose:!1,type$:"",visible:!1,validateError:!1}),a=ua((()=>l.iconClass||(l.type&&sv[l.type]?"el-icon-"+sv[l.type]:""))),o=ua((()=>!!l.message)),r=ua((()=>"el-button--primary "+l.confirmButtonClass));function i(){l.visible&&(l.visible=!1,n.updateClosingFlag(!0),rv.closeDialog(),e.lockScroll&&setTimeout(n.restoreBodyStyle,200),n.state.opened=!1,n.doAfterClose(),setTimeout((()=>{l.action&&l.callback(l.action,l)})))}An((()=>l.inputValue),(e=>kh(this,void 0,void 0,(function*(){yield Mt(),"prompt"===l.type$&&null!==e&&c()}))),{immediate:!0}),An((()=>l.visible),(e=>{n.state.visible=e,e&&(l.uid++,"alert"!==l.type$&&"confirm"!==l.type$||Mt().then((()=>{t.refs.confirm.$el.focus()})),l.focusAfterClosed=document.activeElement,rv=new av(t.vnode.el,l.focusAfterClosed,s())),"prompt"===l.type$&&(e?Mt().then((()=>{t.refs.input&&t.refs.input.$el&&d().focus()})):(l.editorErrorMessage="",l.validateError=!1))})),vn((()=>{t=la(),t.setupInstall={state:l,doClose:i}})),mn((()=>kh(this,void 0,void 0,(function*(){yield Mt(),e.closeOnHashChange&&As(window,"hashchange",n.close)})))),yn((()=>{e.closeOnHashChange&&Ss(window,"hashchange",n.close),setTimeout((()=>{rv.closeDialog()}))}));const s=()=>{const e=t.vnode.el.querySelector(".el-message-box__btns .el-button"),n=t.vnode.el.querySelector(".el-message-box__btns .el-message-box__title");return e||n},u=e=>{("prompt"!==l.type$||"confirm"!==e||c())&&(l.action=e,"function"==typeof t.setupInstall.state.beforeClose?(t.setupInstall.state.close=function(){const e=l.uid;return()=>kh(this,void 0,void 0,(function*(){yield Mt(),e===l.uid&&i()}))}(),t.setupInstall.state.beforeClose(e,l,n.close)):i())},c=()=>{if("prompt"===l.type$){const e=l.inputPattern;if(e&&!e.test(l.inputValue||""))return l.editorErrorMessage=l.inputErrorMessage||vc("el.messagebox.error"),l.validateError=!0,!1;const t=l.inputValidator;if("function"==typeof t){const e=t(l.inputValue);if(!1===e)return l.editorErrorMessage=l.inputErrorMessage||vc("el.messagebox.error"),l.validateError=!0,!1;if("string"==typeof e)return l.editorErrorMessage=e,l.validateError=!0,!1}}return l.editorErrorMessage="",l.validateError=!1,!0},d=()=>{const e=t.refs.input.$refs;return e.input||e.textarea};return Object.assign(Object.assign({},st(l)),{hasMessage:o,icon:a,confirmButtonClasses:r,handleWrapperClick:()=>{e.closeOnClickModal&&u(l.distinguishCancelAndClose?"close":"cancel")},handleInputEnter:()=>{if("textarea"!==l.inputType)return u("confirm")},handleAction:u,handleClose:()=>{u("close")},t:vc,doClose:i})}});const cv={key:0,class:"el-message-box__header"},dv={class:"el-message-box__title"},pv=Tl("i",{class:"el-message-box__close el-icon-close"},null,-1),fv={class:"el-message-box__content"},hv={class:"el-message-box__container"},vv={key:1,class:"el-message-box__message"},mv={key:0},gv={class:"el-message-box__input"},bv={class:"el-message-box__btns"};let yv,xv;uv.render=function(e,t,n,l,a,o){const r=pl("el-input"),i=pl("el-button");return Cl(),Al(Pa,{name:"msgbox-fade"},{default:en((()=>[Un(Tl("div",{ref:"root","aria-label":e.title||"dialog",class:"el-message-box__wrapper",tabindex:"-1",role:"dialog","aria-modal":"true",onClick:t[8]||(t[8]=co(((...t)=>e.handleWrapperClick(...t)),["self"]))},[Tl("div",{class:["el-message-box",[e.customClass,e.center&&"el-message-box--center"]]},[null!==e.title&&void 0!==e.title?(Cl(),Al("div",cv,[Tl("div",dv,[e.icon&&e.center?(Cl(),Al("div",{key:0,class:["el-message-box__status",e.icon]},null,2)):Pl("v-if",!0),Tl("span",null,d(e.title),1)]),e.showClose?(Cl(),Al("button",{key:0,type:"button",class:"el-message-box__headerbtn","aria-label":"Close",onClick:t[1]||(t[1]=t=>e.handleAction(e.distinguishCancelAndClose?"close":"cancel")),onKeydown:t[2]||(t[2]=fo((t=>e.handleAction(e.distinguishCancelAndClose?"close":"cancel")),["enter"]))},[pv],32)):Pl("v-if",!0)])):Pl("v-if",!0),Tl("div",fv,[Tl("div",hv,[e.icon&&!e.center&&e.hasMessage?(Cl(),Al("div",{key:0,class:["el-message-box__status",e.icon]},null,2)):Pl("v-if",!0),e.hasMessage?(Cl(),Al("div",vv,[Zt(e.$slots,"default",{},(()=>[e.dangerouslyUseHTMLString?(Cl(),Al("p",{key:1,innerHTML:e.message},null,8,["innerHTML"])):(Cl(),Al("p",mv,d(e.message),1))]))])):Pl("v-if",!0)]),Un(Tl("div",gv,[Tl(r,{ref:"input",modelValue:e.inputValue,"onUpdate:modelValue":t[3]||(t[3]=t=>e.inputValue=t),type:e.inputType,placeholder:e.inputPlaceholder,class:{invalid:e.validateError},onKeydown:fo(e.handleInputEnter,["enter"])},null,8,["modelValue","type","placeholder","class","onKeydown"]),Tl("div",{class:"el-message-box__errormsg",style:{visibility:e.editorErrorMessage?"visible":"hidden"}},d(e.editorErrorMessage),5)],512),[[ho,e.showInput]])]),Tl("div",bv,[e.showCancelButton?(Cl(),Al(i,{key:0,loading:e.cancelButtonLoading,class:[e.cancelButtonClass],round:e.roundButton,size:"small",onClick:t[4]||(t[4]=t=>e.handleAction("cancel")),onKeydown:t[5]||(t[5]=fo((t=>e.handleAction("cancel")),["enter"]))},{default:en((()=>[Bl(d(e.cancelButtonText||e.t("el.messagebox.cancel")),1)])),_:1},8,["loading","class","round"])):Pl("v-if",!0),Un(Tl(i,{ref:"confirm",loading:e.confirmButtonLoading,class:[e.confirmButtonClasses],round:e.roundButton,disabled:e.confirmButtonDisabled,size:"small",onClick:t[6]||(t[6]=t=>e.handleAction("confirm")),onKeydown:t[7]||(t[7]=fo((t=>e.handleAction("confirm")),["enter"]))},{default:en((()=>[Bl(d(e.confirmButtonText||e.t("el.messagebox.confirm")),1)])),_:1},8,["loading","class","round","disabled"]),[[ho,e.showConfirmButton]])])],2)],8,["aria-label"]),[[ho,e.visible]])])),_:1})},uv.__file="packages/message-box/src/index.vue";const kv=["lockScroll","showClose","closeOnClickModal","closeOnPressEscape","closeOnHashChange","center","roundButton","closeDelay","zIndex","modal","modalFade","modalClass","modalAppendToBody","lockScroll"],wv={title:null,message:"",type:"",iconClass:"",showInput:!1,showClose:!0,modalFade:!0,lockScroll:!0,closeOnClickModal:!0,closeOnPressEscape:!0,closeOnHashChange:!0,inputValue:null,inputPlaceholder:"",inputType:"text",inputPattern:null,inputValidator:null,inputErrorMessage:"",showConfirmButton:!0,showCancelButton:!1,confirmButtonPosition:"right",confirmButtonHighlight:!1,cancelButtonHighlight:!1,confirmButtonText:"",cancelButtonText:"",confirmButtonClass:"",cancelButtonClass:"",customClass:"",beforeClose:null,dangerouslyUseHTMLString:!1,center:!1,roundButton:!1,distinguishCancelAndClose:!1};let Cv=[];const _v=(e,t)=>{if(yv){const n=yv.callback;"function"==typeof n&&(t.showInput?n(t.inputValue,e):n(e)),yv.resolve&&("confirm"===e?t.showInput?yv.resolve({value:t.inputValue,action:e}):yv.resolve(e):!yv.reject||"cancel"!==e&&"close"!==e||yv.reject(e))}},Av=()=>kh(void 0,void 0,void 0,(function*(){if(xv||(()=>{const e=document.createElement("div"),t=Tl(uv);yo(t,e),xv=t.component})(),(!xv||!xv.setupInstall.state.visible)&&Cv.length>0){const e={},t={};yv=Cv.shift();const n=yv.options;Object.keys(n).forEach((l=>{kv.includes(l)?e[l]=n[l]:t[l]=n[l]}));const l=xv.props;for(const t in e)e.hasOwnProperty(t)&&(l[t]=e[t]);const a=xv.setupInstall.state;a.action="",void 0===n.callback&&(n.callback=_v);for(const e in t)t.hasOwnProperty(e)&&(a[e]=t[e]);Sl(n.message)&&(xv.slots.default=()=>[n.message]);const o=n.callback;a.callback=(e,t)=>{o(e,t),Av()},document.body.appendChild(xv.vnode.el),a.visible=!0}})),Sv=function(e,t){if(!is){if("string"==typeof e||Sl(e)?(e={message:e},"string"==typeof t&&(e.title=t)):e.callback&&!t&&(t=e.callback),"undefined"!=typeof Promise)return new Promise(((n,l)=>{Cv.push({options:Object.assign({},wv,e),callback:t,resolve:n,reject:l}),Av()}));Cv.push({options:Object.assign({},wv,e),callback:t}),Av()}};Sv.alert=(e,t,n)=>("object"==typeof t?(n=t,t=""):void 0===t&&(t=""),Sv(Object.assign({title:t,message:e,type$:"alert",closeOnPressEscape:!1,closeOnClickModal:!1},n))),Sv.confirm=(e,t,n)=>("object"==typeof t?(n=t,t=""):void 0===t&&(t=""),Sv(Object.assign({title:t,message:e,type$:"confirm",showCancelButton:!0},n))),Sv.prompt=(e,t,n)=>("object"==typeof t?(n=t,t=""):void 0===t&&(t=""),Sv(Object.assign({title:t,message:e,showCancelButton:!0,showInput:!0,type$:"prompt"},n))),Sv.close=()=>{xv.setupInstall.doClose(),xv.setupInstall.state.visible=!1,Cv=[],yv=null},Sv.install=e=>{e.config.globalProperties.$msgbox=Sv,e.config.globalProperties.$messageBox=Sv,e.config.globalProperties.$alert=Sv.alert,e.config.globalProperties.$confirm=Sv.confirm,e.config.globalProperties.$prompt=Sv.prompt};const Ev={success:"success",info:"info",warning:"warning",error:"error"};var Mv=Qn({name:"ElNotification",props:{customClass:{type:String,default:""},dangerouslyUseHTMLString:{type:Boolean,default:!1},duration:{type:Number,default:4500},iconClass:{type:String,default:""},id:{type:String,default:""},message:{type:[String,Object],default:""},offset:{type:Number,default:0},onClick:{type:Function,default:()=>{}},onClose:{type:Function,required:!0},position:{type:String,default:"top-right"},showClose:{type:Boolean,default:!0},title:{type:String,default:""},type:{type:String,default:""},zIndex:{type:Number,default:0}},emits:["close","click"],setup(e){const t=ua((()=>{const t=e.type;return t&&Ev[t]?"el-icon-"+Ev[t]:""})),n=ua((()=>e.position.indexOf("right")>1?"right":"left")),l=ua((()=>e.position.startsWith("top")?"top":"bottom")),a=ua((()=>({[l.value]:e.offset+"px"}))),o=tt(!1),r=tt(!1),i=tt(null);return{horizontalClass:n,typeClass:t,positionStyle:a,verticalProperty:l,visible:o,closed:r,timer:i}},watch:{closed(e){e&&(this.visible=!1,As(this.$el,"transitionend",this.destroyElement))}},mounted(){this.duration>0&&(this.timer=setTimeout((()=>{this.closed||this.close()}),this.duration)),this.visible=!0,As(document,"keydown",this.keydown)},beforeUnmount(){Ss(document,"keydown",this.keydown)},methods:{destroyElement(){this.visible=!1,Ss(this.$el,"transitionend",this.destroyElement),this.onClose()},startTimer(){this.duration>0&&(this.timer=setTimeout((()=>{this.closed||this.close()}),this.duration))},clearTimer(){clearTimeout(this.timer),this.timer=null},click(){null==this||this.onClick()},close(){this.closed=!0,this.timer=null},keydown({code:e}){e===Fs.delete||e===Fs.backspace?this.clearTimer():e===Fs.esc?this.closed||this.close():this.startTimer()}}});const Ov={class:"el-notification__content"},Dv={key:0};let Tv;Mv.render=function(e,t,n,l,a,o){return Cl(),Al(Pa,{name:"el-notification-fade"},{default:en((()=>[Un(Tl("div",{id:e.id,class:["el-notification",e.customClass,e.horizontalClass],style:e.positionStyle,role:"alert",onMouseenter:t[2]||(t[2]=t=>e.clearTimer()),onMouseleave:t[3]||(t[3]=t=>e.startTimer()),onClick:t[4]||(t[4]=(...t)=>e.click(...t))},[e.type||e.iconClass?(Cl(),Al("i",{key:0,class:["el-notification__icon",[e.typeClass,e.iconClass]]},null,2)):Pl("v-if",!0),Tl("div",{class:["el-notification__group",{"is-with-icon":e.typeClass||e.iconClass}]},[Tl("h2",{class:"el-notification__title",textContent:d(e.title)},null,8,["textContent"]),Un(Tl("div",Ov,[Zt(e.$slots,"default",{},(()=>[e.dangerouslyUseHTMLString?(Cl(),Al(gl,{key:1},[Pl(" Caution here, message could've been compromized, nerver use user's input as message "),Pl(" eslint-disable-next-line "),Tl("p",{innerHTML:e.message},null,8,["innerHTML"])],64)):(Cl(),Al("p",Dv,d(e.message),1))]))],512),[[ho,e.message]]),e.showClose?(Cl(),Al("div",{key:0,class:"el-notification__closeBtn el-icon-close",onClick:t[1]||(t[1]=co(((...t)=>e.close(...t)),["stop"]))})):Pl("v-if",!0)],2)],46,["id"]),[[ho,e.visible]])])),_:3})},Mv.__file="packages/notification/src/index.vue";const Nv=[];let Bv=1;const Pv=function(e={}){if(is)return;const t=e.position||"top-right";let n=e.offset||0;Nv.filter((({vm:e})=>e.component.props.position===t)).forEach((({vm:e})=>{n+=(e.el.offsetHeight||0)+16})),n+=16;const l="notification_"+Bv++,a=e.onClose;e=Object.assign(Object.assign({dangerouslyUseHTMLString:!1,duration:4500,position:"top-right",showClose:!0},e),{onClose:()=>{!function(e,t){const n=Nv.findIndex((({vm:t})=>{const{id:n}=t.component.props;return e===n}));if(-1===n)return;const{vm:l,$el:a}=Nv[n];if(!l)return;null==t||t(l);const o=l.el.offsetHeight;yo(null,a),Nv.splice(n,1);const r=Nv.length;if(Mt((()=>{document.body.removeChild(a)})),r<1)return;const i=l.props.position;for(let e=n;e<r;e++)if(Nv[e].vm.component.props.position===i){const t=l.props.position.split("-")[0],n=parseInt(Nv[e].vm.el.style[t],10)-o-16;Nv[e].vm.component.props.offset=n,requestAnimationFrame((()=>{yo(Nv[e].vm,Nv[e].$el)}))}}(l,a)},offset:n,id:l,zIndex:Fu.nextZIndex()});const o=document.createElement("div");return o.className="container_"+l,o.style.zIndex=String(),Tv=Tl(Mv,e,Sl(e.message)?{default:()=>e.message}:null),yo(Tv,o),Nv.push({vm:Tv,$el:o}),document.body.appendChild(o),{close:e.onClose}};["success","warning","info","error"].forEach((e=>{Object.assign(Pv,{[e]:(t={})=>(("string"==typeof t||Sl(t))&&(t={message:t}),t.type=e,Pv(t))})})),Pv.install=e=>{e.config.globalProperties.$notify=Pv};const Vv=Symbol("SelectGroup"),Iv=Symbol("Select");var Lv=Qn({name:"ElOption",componentName:"ElOption",props:{value:{required:!0,type:[String,Number,Object]},label:[String,Number],created:Boolean,disabled:{type:Boolean,default:!1}},setup(e){const t=Ye({index:-1,groupDisabled:!1,visible:!0,hitState:!1,hover:!1}),{currentLabel:n,itemSelected:l,isDisabled:a,select:o,hoverItem:r}=function(e,t){const n=$l(Iv),l=$l(Vv,{disabled:!1}),a=ua((()=>"[object object]"===Object.prototype.toString.call(e.value).toLowerCase())),o=ua((()=>n.props.multiple?d(n.props.modelValue,e.value):p(e.value,n.props.modelValue))),r=ua((()=>{if(n.props.multiple){const e=n.props.modelValue||[];return!o.value&&e.length>=n.props.multipleLimit&&n.props.multipleLimit>0}return!1})),i=ua((()=>e.label||(a.value?"":e.value))),s=ua((()=>e.value||e.label||"")),u=ua((()=>e.disabled||t.groupDisabled||r.value)),c=la(),d=(e=[],t)=>{if(a.value){const l=n.props.valueKey;return e&&e.some((e=>ss(e,l)===ss(t,l)))}return e&&e.indexOf(t)>-1},p=(e,t)=>{if(a.value){const{valueKey:l}=n.props;return ss(e,l)===ss(t,l)}return e===t};return An((()=>i.value),(()=>{e.created||n.props.remote||n.setSelected()})),An((()=>e.value),((t,l)=>{const{remote:a,valueKey:o}=n.props;if(!e.created&&!a){if(o&&"object"==typeof t&&"object"==typeof l&&t[o]===l[o])return;n.setSelected()}})),n.selectEmitter.on("elOptionQueryChange",(l=>{const a=new RegExp(((e="")=>String(e).replace(/[|\\{}()[\]^$+*?.]/g,"\\$&"))(l),"i");t.visible=a.test(i.value)||e.created,t.visible||n.filteredOptionsCount--})),{select:n,currentLabel:i,currentValue:s,itemSelected:o,isDisabled:u,hoverItem:()=>{e.disabled||l.disabled||(n.hoverIndex=n.options.indexOf(c))}}}(e,t),{visible:i,hover:s}=st(t),u=la().proxy;return o.onOptionCreate(u),yn((()=>{const{selected:t}=o;let n=o.props.multiple?t:[t],l=o.cachedOptions.indexOf(u),a=null==n?void 0:n.indexOf(u);l>-1&&a<0&&o.cachedOptions.splice(l,1),o.onOptionDestroy(o.options.map((e=>e.value)).indexOf(e.value))})),{currentLabel:n,itemSelected:l,isDisabled:a,select:o,hoverItem:r,visible:i,hover:s,selectOptionClick:function(){!0!==e.disabled&&!0!==t.groupDisabled&&o.handleOptionSelect(u,!0)}}}});Lv.render=function(e,t,n,l,a,o){return Un((Cl(),Al("li",{class:["el-select-dropdown__item",{selected:e.itemSelected,"is-disabled":e.isDisabled,hover:e.hover}],onMouseenter:t[1]||(t[1]=(...t)=>e.hoverItem(...t)),onClick:t[2]||(t[2]=co(((...t)=>e.selectOptionClick(...t)),["stop"]))},[Zt(e.$slots,"default",{},(()=>[Tl("span",null,d(e.currentLabel),1)]))],34)),[[ho,e.visible]])},Lv.__file="packages/select/src/option.vue";var zv=Qn({name:"ElSelectDropdown",componentName:"ElSelectDropdown",setup(){const e=$l(Iv),t=ua((()=>e.props.popperClass)),n=ua((()=>e.props.multiple)),l=tt("");function a(){var t;l.value=(null===(t=e.selectWrapper)||void 0===t?void 0:t.getBoundingClientRect().width)+"px"}return mn((()=>{xu(e.selectWrapper,a)})),yn((()=>{ku(e.selectWrapper,a)})),{minWidth:l,popperClass:t,isMultiple:n}}});zv.render=function(e,t,n,l,a,o){return Cl(),Al("div",{class:["el-select-dropdown",[{"is-multiple":e.isMultiple},e.popperClass]],style:{minWidth:e.minWidth}},[Zt(e.$slots,"default")],6)},zv.__file="packages/select/src/select-dropdown.vue";var Fv=Qn({name:"ElSelect",componentName:"ElSelect",components:{ElInput:cu,ElSelectMenu:zv,ElOption:Lv,ElTag:Rd,ElScrollbar:Au,ElPopper:Ku},directives:{ClickOutside:Xs},props:{name:String,id:String,modelValue:[Array,String,Number],autocomplete:{type:String,default:"off"},automaticDropdown:Boolean,size:{type:String,validator:au},disabled:Boolean,clearable:Boolean,filterable:Boolean,allowCreate:Boolean,loading:Boolean,popperClass:{type:String,default:""},remote:Boolean,loadingText:String,noMatchText:String,noDataText:String,remoteMethod:Function,filterMethod:Function,multiple:Boolean,multipleLimit:{type:Number,default:0},placeholder:{type:String},defaultFirstOption:Boolean,reserveKeyword:Boolean,valueKey:{type:String,default:"value"},collapseTags:Boolean,popperAppendToBody:{type:Boolean,default:!0},clearIcon:{type:String,default:"el-icon-circle-close"}},emits:[tu,"change","remove-tag","clear","visible-change","focus","blur"],setup(e,t){const n=function(e){const t=_o();return Ye({options:[],cachedOptions:[],createdLabel:null,createdSelected:!1,selected:e.multiple?[]:{},inputLength:20,inputWidth:0,initialInputHeight:0,optionsCount:0,filteredOptionsCount:0,visible:!1,softFocus:!1,selectedLabel:"",hoverIndex:-1,query:"",previousQuery:null,inputHovering:!1,cachedPlaceHolder:"",currentPlaceholder:vc("el.select.placeholder"),menuVisibleOnFocus:!1,isOnComposition:!1,isSilentBlur:!1,selectEmitter:t})}(e),{selectSize:l,readonly:a,handleResize:o,collapseTagSize:r,debouncedOnInputChange:i,debouncedQueryChange:s,deletePrevTag:u,deleteTag:c,deleteSelected:d,handleOptionSelect:p,scrollToOption:f,setSelected:h,resetInputHeight:v,managePlaceholder:m,showClose:g,selectDisabled:b,iconClass:y,showNewOption:x,emptyText:k,toggleLastOptionHitState:w,resetInputState:C,handleComposition:_,onOptionCreate:A,onOptionDestroy:S,handleMenuEnter:E,handleFocus:M,blur:O,handleBlur:D,handleClearClick:T,handleClose:N,toggleMenu:B,selectOption:P,getValueKey:V,navigateOptions:I,dropMenuVisible:L,reference:z,input:F,popper:$,tags:R,selectWrapper:j,scrollbar:H}=((e,t,n)=>{const l=ms(),a=tt(null),o=tt(null),r=tt(null),i=tt(null),s=tt(null),u=tt(null),c=tt(-1),d=$l("elForm",{}),p=$l("elFormItem",{}),f=ua((()=>!e.filterable||e.multiple||!(!is&&!isNaN(Number(document.DOCUMENT_NODE)))&&!(!is&&navigator.userAgent.indexOf("Edge")>-1)&&!t.visible)),h=ua((()=>e.disabled||d.disabled)),v=ua((()=>{const n=e.multiple?Array.isArray(e.modelValue)&&e.modelValue.length>0:void 0!==e.modelValue&&null!==e.modelValue&&""!==e.modelValue;return e.clearable&&!h.value&&t.inputHovering&&n})),m=ua((()=>e.remote&&e.filterable?"":t.visible?"arrow-up is-reverse":"arrow-up")),g=ua((()=>e.remote?300:0)),b=ua((()=>e.loading?e.loadingText||vc("el.select.loading"):(!e.remote||""!==t.query||0!==t.options.length)&&(e.filterable&&t.query&&t.options.length>0&&0===t.filteredOptionsCount?e.noMatchText||vc("el.select.noMatch"):0===t.options.length?e.noDataText||vc("el.select.noData"):null))),y=ua((()=>{const n=t.options.filter((e=>!e.created)).some((e=>e.currentLabel===t.query));return e.filterable&&e.allowCreate&&""!==t.query&&!n})),x=ua((()=>e.size||p.size||l.size)),k=ua((()=>["small","mini"].indexOf(x.value)>-1?"mini":"small")),w=ua((()=>t.visible&&!1!==b.value));An((()=>h.value),(()=>{Mt((()=>{C()}))})),An((()=>e.placeholder),(e=>{t.cachedPlaceHolder=t.currentPlaceholder=e})),An((()=>e.modelValue),((n,l)=>{var a;e.multiple&&(C(),n&&n.length>0||o.value&&""!==t.query?t.currentPlaceholder="":t.currentPlaceholder=t.cachedPlaceHolder,e.filterable&&!e.reserveKeyword&&(t.query="",_(t.query))),E(),e.filterable&&!e.multiple&&(t.inputLength=20),ri()(n,l)||null===(a=p.formItemMitt)||void 0===a||a.emit("el.form.change",n)}),{flush:"post"}),An((()=>t.visible),(l=>{var a,i;l?(null===(i=null===(a=r.value)||void 0===a?void 0:a.update)||void 0===i||i.call(a),e.filterable&&(t.query=e.remote?"":t.selectedLabel,_(t.query),e.multiple?o.value.focus():(e.remote||(t.selectEmitter.emit("elOptionQueryChange",""),t.selectEmitter.emit("elOptionGroupQueryChange")),t.selectedLabel&&(t.currentPlaceholder=t.selectedLabel,t.selectedLabel="")))):(o.value&&o.value.blur(),t.query="",t.previousQuery=null,t.selectedLabel="",t.inputLength=20,t.menuVisibleOnFocus=!1,O(),Mt((()=>{o.value&&""===o.value.value&&0===t.selected.length&&(t.currentPlaceholder=t.cachedPlaceHolder)})),e.multiple||(t.selected&&(e.filterable&&e.allowCreate&&t.createdSelected&&t.createdLabel?t.selectedLabel=t.createdLabel:t.selectedLabel=t.selected.currentLabel,e.filterable&&(t.query=t.selectedLabel)),e.filterable&&(t.currentPlaceholder=t.cachedPlaceHolder))),n.emit("visible-change",l)})),An((()=>[...t.options]),(()=>{var n,l,a;if(is)return;null===(l=null===(n=r.value)||void 0===n?void 0:n.update)||void 0===l||l.call(n),e.multiple&&C();const o=(null===(a=s.value)||void 0===a?void 0:a.querySelectorAll("input"))||[];-1===[].indexOf.call(o,document.activeElement)&&E(),e.defaultFirstOption&&(e.filterable||e.remote)&&t.filteredOptionsCount&&S()})),An((()=>t.hoverIndex),(e=>{"number"==typeof e&&e>-1&&(c.value=t.options[e]||{}),t.options.forEach((e=>{e.hover=c.value===e}))}));const C=()=>{e.collapseTags&&!e.filterable||Mt((()=>{var e,n;if(!a.value)return;const l=a.value.$el.childNodes,o=[].filter.call(l,(e=>"INPUT"===e.tagName))[0],s=i.value,u=t.initialInputHeight||40;o.style.height=0===t.selected.length?u+"px":Math.max(s?s.clientHeight+(s.clientHeight>u?6:0):0,u)+"px",t.visible&&!1!==b.value&&(null===(n=null===(e=r.value)||void 0===e?void 0:e.update)||void 0===n||n.call(e))}))},_=n=>{t.previousQuery===n||t.isOnComposition||(null!==t.previousQuery||"function"!=typeof e.filterMethod&&"function"!=typeof e.remoteMethod?(t.previousQuery=n,Mt((()=>{var e,n;t.visible&&(null===(n=null===(e=r.value)||void 0===e?void 0:e.update)||void 0===n||n.call(e))})),t.hoverIndex=-1,e.multiple&&e.filterable&&Mt((()=>{const n=15*o.value.length+20;t.inputLength=e.collapseTags?Math.min(50,n):n,A(),C()})),e.remote&&"function"==typeof e.remoteMethod?(t.hoverIndex=-1,e.remoteMethod(n)):"function"==typeof e.filterMethod?(e.filterMethod(n),t.selectEmitter.emit("elOptionGroupQueryChange")):(t.filteredOptionsCount=t.optionsCount,t.selectEmitter.emit("elOptionQueryChange",n),t.selectEmitter.emit("elOptionGroupQueryChange")),e.defaultFirstOption&&(e.filterable||e.remote)&&t.filteredOptionsCount&&S()):t.previousQuery=n)},A=()=>{""!==t.currentPlaceholder&&(t.currentPlaceholder=o.value?"":t.cachedPlaceHolder)},S=()=>{t.hoverIndex=-1;let e=!1;for(let n=t.options.length-1;n>=0;n--)if(t.options[n].created){e=!0,t.hoverIndex=n;break}if(!e)for(let e=0;e!==t.options.length;++e){const n=t.options[e];if(t.query){if(!n.disabled&&!n.groupDisabled&&n.visible){t.hoverIndex=e;break}}else if(n.itemSelected){t.hoverIndex=e;break}}},E=()=>{var n;if(!e.multiple){const l=M(e.modelValue);return(null===(n=l.props)||void 0===n?void 0:n.created)?(t.createdLabel=l.props.value,t.createdSelected=!0):t.createdSelected=!1,t.selectedLabel=l.currentLabel,t.selected=l,void(e.filterable&&(t.query=t.selectedLabel))}const l=[];Array.isArray(e.modelValue)&&e.modelValue.forEach((e=>{l.push(M(e))})),t.selected=l,Mt((()=>{C()}))},M=n=>{let l;const a="object"===ns(n).toLowerCase(),o="null"===ns(n).toLowerCase(),r="undefined"===ns(n).toLowerCase();for(let o=t.cachedOptions.length-1;o>=0;o--){const r=t.cachedOptions[o];if(a?ss(r.value,e.valueKey)===ss(n,e.valueKey):r.value===n){l={value:n,currentLabel:r.currentLabel};break}}if(l)return l;const i={value:n,currentLabel:a||o||r?"":n};return e.multiple&&(i.hitState=!1),i},O=()=>{setTimeout((()=>{e.multiple?t.selected.length>0?t.hoverIndex=Math.min.apply(null,t.selected.map((e=>t.options.indexOf(e)))):t.hoverIndex=-1:t.hoverIndex=t.options.indexOf(t.selected)}),300)},D=ko()((()=>{e.filterable&&t.query!==t.selectedLabel&&(t.query=t.selectedLabel,_(t.query))}),g.value),T=ko()((e=>{_(e.target.value)}),g.value),N=t=>{ri()(e.modelValue,t)||n.emit("change",t)},B=l=>{l.stopPropagation();const a=e.multiple?[]:"";n.emit(tu,a),N(a),t.visible=!1,n.emit("clear")},P=(l,a)=>{if(e.multiple){const a=(e.modelValue||[]).slice(),r=V(a,l.value);r>-1?a.splice(r,1):(e.multipleLimit<=0||a.length<e.multipleLimit)&&a.push(l.value),n.emit(tu,a),N(a),l.created&&(t.query="",_(""),t.inputLength=20),e.filterable&&o.value.focus()}else n.emit(tu,l.value),N(l.value),t.visible=!1;t.isSilentBlur=a,I(),t.visible||Mt((()=>{L(l)}))},V=(t=[],n)=>{if(!Qi(n))return t.indexOf(n);const l=e.valueKey;let a=-1;return t.some(((e,t)=>ss(e,l)===ss(n,l)&&(a=t,!0))),a},I=()=>{t.softFocus=!0;const e=o.value||a.value;e&&e.focus()},L=e=>{var t,n,l,a;const o=Array.isArray(e)?null===(t=e[0])||void 0===t?void 0:t.$el:e.$el;if(r.value&&o){const e=null===(a=null===(l=null===(n=r.value)||void 0===n?void 0:n.$el)||void 0===l?void 0:l.querySelector)||void 0===a?void 0:a.call(l,".el-select-dropdown__wrap");e&&Pd(e,o)}},z=e=>{if(!Array.isArray(t.selected))return;const n=t.selected[t.selected.length-1];return n?!0===e||!1===e?(n.hitState=e,e):(n.hitState=!n.hitState,n.hitState):void 0},F=()=>{e.automaticDropdown||h.value||(t.menuVisibleOnFocus?t.menuVisibleOnFocus=!1:t.visible=!t.visible,t.visible&&(o.value||a.value).focus())},$=ua((()=>t.options.filter((e=>e.visible)).every((e=>e.disabled)))),R=e=>{if(t.visible){if(0!==t.options.length&&0!==t.filteredOptionsCount&&!$.value){"next"===e?(t.hoverIndex++,t.hoverIndex===t.options.length&&(t.hoverIndex=0)):"prev"===e&&(t.hoverIndex--,t.hoverIndex<0&&(t.hoverIndex=t.options.length-1));const n=t.options[t.hoverIndex];!0!==n.disabled&&!0!==n.groupDisabled&&n.visible||R(e),Mt((()=>L(c.value)))}}else t.visible=!0};return{selectSize:x,handleResize:()=>{var n,l;(()=>{var e;t.inputWidth=null===(e=a.value)||void 0===e?void 0:e.$el.getBoundingClientRect().width})(),null===(l=null===(n=r.value)||void 0===n?void 0:n.update)||void 0===l||l.call(n),e.multiple&&C()},debouncedOnInputChange:D,debouncedQueryChange:T,deletePrevTag:t=>{if(t.target.value.length<=0&&!z()){const t=e.modelValue.slice();t.pop(),n.emit(tu,t),N(t)}},deleteTag:(l,a)=>{const o=t.selected.indexOf(a);if(o>-1&&!h.value){const t=e.modelValue.slice();t.splice(o,1),n.emit(tu,t),N(t),n.emit("remove-tag",a.value)}l.stopPropagation()},deleteSelected:B,handleOptionSelect:P,scrollToOption:L,readonly:f,resetInputHeight:C,showClose:v,iconClass:m,showNewOption:y,collapseTagSize:k,setSelected:E,managePlaceholder:A,selectDisabled:h,emptyText:b,toggleLastOptionHitState:z,resetInputState:e=>{e.code!==Fs.backspace&&z(!1),t.inputLength=15*o.value.length+20,C()},handleComposition:e=>{const n=e.target.value;if("compositionend"===e.type)t.isOnComposition=!1,Mt((()=>_(n)));else{const e=n[n.length-1]||"";t.isOnComposition=!lu(e)}},onOptionCreate:e=>{t.optionsCount++,t.filteredOptionsCount++,t.options.push(e),t.cachedOptions.push(e)},onOptionDestroy:e=>{e>-1&&(t.optionsCount--,t.filteredOptionsCount--,t.options.splice(e,1))},handleMenuEnter:()=>{Mt((()=>L(t.selected)))},handleFocus:l=>{t.softFocus?t.softFocus=!1:((e.automaticDropdown||e.filterable)&&(t.visible=!0,e.filterable&&(t.menuVisibleOnFocus=!0)),n.emit("focus",l))},blur:()=>{t.visible=!1,a.value.blur()},handleBlur:e=>{Mt((()=>{t.isSilentBlur?t.isSilentBlur=!1:n.emit("blur",e)})),t.softFocus=!1},handleClearClick:e=>{B(e)},handleClose:()=>{t.visible=!1},toggleMenu:F,selectOption:()=>{t.visible?t.options[t.hoverIndex]&&P(t.options[t.hoverIndex],void 0):F()},getValueKey:t=>Qi(t.value)?ss(t.value,e.valueKey):t.value,navigateOptions:R,dropMenuVisible:w,reference:a,input:o,popper:r,tags:i,selectWrapper:s,scrollbar:u}})(e,n,t),{focus:W}=(q=z,{focus:()=>{var e,t;null===(t=null===(e=q.value)||void 0===e?void 0:e.focus)||void 0===t||t.call(e)}});var q;const{inputWidth:Y,selected:K,inputLength:U,filteredOptionsCount:G,visible:X,softFocus:J,selectedLabel:Z,hoverIndex:Q,query:ee,inputHovering:te,currentPlaceholder:ne,menuVisibleOnFocus:le,isOnComposition:ae,isSilentBlur:oe,options:re,cachedOptions:ie,optionsCount:se}=st(n);return Fl(Iv,Ye({props:e,options:re,cachedOptions:ie,optionsCount:se,filteredOptionsCount:G,hoverIndex:Q,handleOptionSelect:p,selectEmitter:n.selectEmitter,onOptionCreate:A,onOptionDestroy:S,selectWrapper:j,selected:K,setSelected:h})),mn((()=>{if(n.cachedPlaceHolder=ne.value=e.placeholder||vc("el.select.placeholder"),e.multiple&&Array.isArray(e.modelValue)&&e.modelValue.length>0&&(ne.value=""),xu(j.value,o),z.value&&z.value.$el){const e={medium:36,small:32,mini:28},t=z.value.input;n.initialInputHeight=t.getBoundingClientRect().height||e[l.value]}e.remote&&e.multiple&&v(),Mt((()=>{z.value.$el&&(Y.value=z.value.$el.getBoundingClientRect().width)})),h()})),yn((()=>{ku(j.value,o)})),e.multiple&&!Array.isArray(e.modelValue)&&t.emit(tu,[]),!e.multiple&&Array.isArray(e.modelValue)&&t.emit(tu,""),{selectSize:l,readonly:a,handleResize:o,collapseTagSize:r,debouncedOnInputChange:i,debouncedQueryChange:s,deletePrevTag:u,deleteTag:c,deleteSelected:d,handleOptionSelect:p,scrollToOption:f,inputWidth:Y,selected:K,inputLength:U,filteredOptionsCount:G,visible:X,softFocus:J,selectedLabel:Z,hoverIndex:Q,query:ee,inputHovering:te,currentPlaceholder:ne,menuVisibleOnFocus:le,isOnComposition:ae,isSilentBlur:oe,options:re,resetInputHeight:v,managePlaceholder:m,showClose:g,selectDisabled:b,iconClass:y,showNewOption:x,emptyText:k,toggleLastOptionHitState:w,resetInputState:C,handleComposition:_,handleMenuEnter:E,handleFocus:M,blur:O,handleBlur:D,handleClearClick:T,handleClose:N,toggleMenu:B,selectOption:P,getValueKey:V,navigateOptions:I,dropMenuVisible:L,focus:W,reference:z,input:F,popper:$,tags:R,selectWrapper:j,scrollbar:H}}});const $v={class:"select-trigger"},Rv={key:0},jv={class:"el-select__tags-text"},Hv={class:"el-select__tags-text"},Wv={class:"el-select__tags-text"},qv={key:1,class:"el-select-dropdown__empty"};Fv.render=function(e,t,n,l,a,o){const r=pl("el-tag"),i=pl("el-input"),s=pl("el-option"),u=pl("el-scrollbar"),c=pl("el-select-menu"),p=pl("el-popper"),f=hl("clickOutside");return Un((Cl(),Al("div",{ref:"selectWrapper",class:["el-select",[e.selectSize?"el-select--"+e.selectSize:""]],onClick:t[26]||(t[26]=co(((...t)=>e.toggleMenu(...t)),["stop"]))},[Tl(p,{ref:"popper",visible:e.dropMenuVisible,"onUpdate:visible":t[25]||(t[25]=t=>e.dropMenuVisible=t),placement:"bottom-start","append-to-body":e.popperAppendToBody,"popper-class":"el-select__popper "+e.popperClass,"manual-mode":"",effect:"light",pure:"",trigger:"click",transition:"el-zoom-in-top","gpu-acceleration":!1,onBeforeEnter:e.handleMenuEnter},{trigger:en((()=>[Tl("div",$v,[e.multiple?(Cl(),Al("div",{key:0,ref:"tags",class:"el-select__tags",style:{"max-width":e.inputWidth-32+"px",width:"100%"}},[e.collapseTags&&e.selected.length?(Cl(),Al("span",Rv,[Tl(r,{closable:!e.selectDisabled,size:e.collapseTagSize,hit:e.selected[0].hitState,type:"info","disable-transitions":"",onClose:t[1]||(t[1]=t=>e.deleteTag(t,e.selected[0]))},{default:en((()=>[Tl("span",jv,d(e.selected[0].currentLabel),1)])),_:1},8,["closable","size","hit"]),e.selected.length>1?(Cl(),Al(r,{key:0,closable:!1,size:e.collapseTagSize,type:"info","disable-transitions":""},{default:en((()=>[Tl("span",Hv,"+ "+d(e.selected.length-1),1)])),_:1},8,["size"])):Pl("v-if",!0)])):Pl("v-if",!0),Pl(" <div> "),e.collapseTags?Pl("v-if",!0):(Cl(),Al(Pa,{key:1,onAfterLeave:e.resetInputHeight},{default:en((()=>[Tl("span",null,[(Cl(!0),Al(gl,null,da(e.selected,(t=>(Cl(),Al(r,{key:e.getValueKey(t),closable:!e.selectDisabled,size:e.collapseTagSize,hit:t.hitState,type:"info","disable-transitions":"",onClose:n=>e.deleteTag(n,t)},{default:en((()=>[Tl("span",Wv,d(t.currentLabel),1)])),_:2},1032,["closable","size","hit","onClose"])))),128))])])),_:1},8,["onAfterLeave"])),Pl(" </div> "),e.filterable?Un((Cl(),Al("input",{key:2,ref:"input","onUpdate:modelValue":t[2]||(t[2]=t=>e.query=t),type:"text",class:["el-select__input",[e.selectSize?"is-"+e.selectSize:""]],disabled:e.selectDisabled,autocomplete:e.autocomplete,style:{"flex-grow":"1",width:e.inputLength/(e.inputWidth-32)+"%","max-width":e.inputWidth-42+"px"},onFocus:t[3]||(t[3]=(...t)=>e.handleFocus(...t)),onBlur:t[4]||(t[4]=t=>e.softFocus=!1),onKeyup:t[5]||(t[5]=(...t)=>e.managePlaceholder(...t)),onKeydown:[t[6]||(t[6]=(...t)=>e.resetInputState(...t)),t[7]||(t[7]=fo(co((t=>e.navigateOptions("next")),["prevent"]),["down"])),t[8]||(t[8]=fo(co((t=>e.navigateOptions("prev")),["prevent"]),["up"])),t[9]||(t[9]=fo(co((t=>e.visible=!1),["stop","prevent"]),["esc"])),t[10]||(t[10]=fo(co(((...t)=>e.selectOption(...t)),["stop","prevent"]),["enter"])),t[11]||(t[11]=fo(((...t)=>e.deletePrevTag(...t)),["delete"])),t[12]||(t[12]=fo((t=>e.visible=!1),["tab"]))],onCompositionstart:t[13]||(t[13]=(...t)=>e.handleComposition(...t)),onCompositionupdate:t[14]||(t[14]=(...t)=>e.handleComposition(...t)),onCompositionend:t[15]||(t[15]=(...t)=>e.handleComposition(...t)),onInput:t[16]||(t[16]=(...t)=>e.debouncedQueryChange(...t))},null,46,["disabled","autocomplete"])),[[no,e.query]]):Pl("v-if",!0)],4)):Pl("v-if",!0),Tl(i,{id:e.id,ref:"reference",modelValue:e.selectedLabel,"onUpdate:modelValue":t[18]||(t[18]=t=>e.selectedLabel=t),type:"text",placeholder:e.currentPlaceholder,name:e.name,autocomplete:e.autocomplete,size:e.selectSize,disabled:e.selectDisabled,readonly:e.readonly,"validate-event":!1,class:{"is-focus":e.visible},tabindex:e.multiple&&e.filterable?"-1":null,onFocus:e.handleFocus,onBlur:e.handleBlur,onInput:e.debouncedOnInputChange,onPaste:e.debouncedOnInputChange,onKeydown:[t[19]||(t[19]=fo(co((t=>e.navigateOptions("next")),["stop","prevent"]),["down"])),t[20]||(t[20]=fo(co((t=>e.navigateOptions("prev")),["stop","prevent"]),["up"])),fo(co(e.selectOption,["stop","prevent"]),["enter"]),t[21]||(t[21]=fo(co((t=>e.visible=!1),["stop","prevent"]),["esc"])),t[22]||(t[22]=fo((t=>e.visible=!1),["tab"]))],onMouseenter:t[23]||(t[23]=t=>e.inputHovering=!0),onMouseleave:t[24]||(t[24]=t=>e.inputHovering=!1)},fa({suffix:en((()=>[Un(Tl("i",{class:["el-select__caret","el-input__icon","el-icon-"+e.iconClass]},null,2),[[ho,!e.showClose]]),e.showClose?(Cl(),Al("i",{key:0,class:"el-select__caret el-input__icon "+e.clearIcon,onClick:t[17]||(t[17]=(...t)=>e.handleClearClick(...t))},null,2)):Pl("v-if",!0)])),_:2},[e.$slots.prefix?{name:"prefix",fn:en((()=>[Zt(e.$slots,"prefix")]))}:void 0]),1032,["id","modelValue","placeholder","name","autocomplete","size","disabled","readonly","class","tabindex","onFocus","onBlur","onInput","onPaste","onKeydown"])])])),default:en((()=>[Tl(c,null,{default:en((()=>[Un(Tl(u,{ref:"scrollbar",tag:"ul","wrap-class":"el-select-dropdown__wrap","view-class":"el-select-dropdown__list",class:{"is-empty":!e.allowCreate&&e.query&&0===e.filteredOptionsCount}},{default:en((()=>[e.showNewOption?(Cl(),Al(s,{key:0,value:e.query,created:!0},null,8,["value"])):Pl("v-if",!0),Zt(e.$slots,"default")])),_:3},8,["class"]),[[ho,e.options.length>0&&!e.loading]]),e.emptyText&&(!e.allowCreate||e.loading||e.allowCreate&&0===e.options.length)?(Cl(),Al(gl,{key:0},[e.$slots.empty?Zt(e.$slots,"empty",{key:0}):(Cl(),Al("p",qv,d(e.emptyText),1))],64)):Pl("v-if",!0)])),_:1})])),_:1},8,["visible","append-to-body","popper-class","onBeforeEnter"])],2)),[[f,e.handleClose]])},Fv.__file="packages/select/src/select.vue",Fv.install=e=>{e.component(Fv.name,Fv)},Lv.install=e=>{e.component(Lv.name,Lv)};var Yv=Qn({name:"ElOptionGroup",componentName:"ElOptionGroup",props:{label:String,disabled:{type:Boolean,default:!1}},setup(e){const t=tt(!0);Fl(Vv,Ye(Object.assign({},st(e))));const n=$l(Iv);return n.selectEmitter.on("elOptionGroupQueryChange",(()=>{var e;t.value=null===(e=null==n?void 0:n.options)||void 0===e?void 0:e.some((e=>!0===e.visible))})),{visible:t}}});const Kv={class:"el-select-group__wrap"},Uv={class:"el-select-group__title"},Gv={class:"el-select-group"};Yv.render=function(e,t,n,l,a,o){return Un((Cl(),Al("ul",Kv,[Tl("li",Uv,d(e.label),1),Tl("li",null,[Tl("ul",Gv,[Zt(e.$slots,"default")])])],512)),[[ho,e.visible]])},Yv.__file="packages/select/src/option-group.vue",Yv.install=e=>{e.component(Yv.name,Yv)};var Xv=Qn({name:"ElPageHeader",props:{title:{type:String,default:()=>vc("el.pageHeader.title")},content:{type:String,default:""}},emits:["back"],setup:(e,{emit:t})=>({handleClick:function(){t("back")}})});const Jv={class:"el-page-header"},Zv=Tl("i",{class:"el-icon-back"},null,-1),Qv={class:"el-page-header__title"},em={class:"el-page-header__content"};Xv.render=function(e,t,n,l,a,o){return Cl(),Al("div",Jv,[Tl("div",{class:"el-page-header__left",onClick:t[1]||(t[1]=(...t)=>e.handleClick(...t))},[Zv,Tl("div",Qv,[Zt(e.$slots,"title",{},(()=>[Bl(d(e.title),1)]))])]),Tl("div",em,[Zt(e.$slots,"content",{},(()=>[Bl(d(e.content),1)]))])])},Xv.__file="packages/page-header/src/index.vue",Xv.install=e=>{e.component(Xv.name,Xv)};var tm=Qn({name:"Prev",props:{disabled:Boolean,currentPage:{type:Number,default:1},prevText:{type:String,default:""}},setup:e=>({internalDisabled:ua((()=>e.disabled||e.currentPage<=1))})});const nm={key:0},lm={key:1,class:"el-icon el-icon-arrow-left"};tm.render=function(e,t,n,l,a,o){return Cl(),Al("button",{type:"button",class:"btn-prev",disabled:e.internalDisabled,onClick:t[1]||(t[1]=co((()=>{}),["self","prevent"]))},[e.prevText?(Cl(),Al("span",nm,d(e.prevText),1)):(Cl(),Al("i",lm))],8,["disabled"])},tm.__file="packages/pagination/src/prev.vue";var am=Qn({name:"Next",props:{disabled:Boolean,currentPage:{type:Number,default:1},pageCount:{type:Number,default:50},nextText:{type:String,default:""}},setup:e=>({internalDisabled:ua((()=>e.disabled||e.currentPage===e.pageCount||0===e.pageCount))})});const om={key:0},rm={key:1,class:"el-icon el-icon-arrow-right"};am.render=function(e,t,n,l,a,o){return Cl(),Al("button",{type:"button",class:"btn-next",disabled:e.internalDisabled,onClick:t[1]||(t[1]=co((()=>{}),["self","prevent"]))},[e.nextText?(Cl(),Al("span",om,d(e.nextText),1)):(Cl(),Al("i",rm))],8,["disabled"])},am.__file="packages/pagination/src/next.vue";const im=()=>{const e=$l("pagination",{});return{pagination:e,pageCount:e.pageCount,disabled:e.disabled,currentPage:e.currentPage}};var sm=Qn({name:"Sizes",components:{ElSelect:Fv,ElOption:Lv},props:{pageSize:Number,pageSizes:{type:Array,default:()=>[10,20,30,40,50,100]},popperClass:{type:String,default:""},disabled:Boolean},emits:["page-size-change"],setup(e,{emit:t}){const{pagination:n}=im(),l=tt(e.pageSize);An((()=>e.pageSizes),((n,l)=>{if(!ri()(n,l)&&Array.isArray(n)){const l=n.indexOf(e.pageSize)>-1?e.pageSize:e.pageSizes[0];t("page-size-change",l)}})),An((()=>e.pageSize),(e=>{l.value=e}));const a=ua((()=>e.pageSizes));return{t:vc,innerPagesizes:a,innerPageSize:l,handleChange:function(e){e!==l.value&&(l.value=e,null==n||n.handleSizesChange(Number(e)))}}}});const um={class:"el-pagination__sizes"};sm.render=function(e,t,n,l,a,o){const r=pl("el-option"),i=pl("el-select");return Cl(),Al("span",um,[Tl(i,{"model-value":e.innerPageSize,disabled:e.disabled,"popper-class":e.popperClass,size:"mini",onChange:e.handleChange},{default:en((()=>[(Cl(!0),Al(gl,null,da(e.innerPagesizes,(t=>(Cl(),Al(r,{key:t,value:t,label:t+e.t("el.pagination.pagesize")},null,8,["value","label"])))),128))])),_:1},8,["model-value","disabled","popper-class","onChange"])])},sm.__file="packages/pagination/src/sizes.vue";var cm=Qn({components:{ElInput:cu},setup(){const{pagination:e,pageCount:t,disabled:n,currentPage:l}=im(),a=tt(null),o=ua((()=>{var e;return null!==(e=a.value)&&void 0!==e?e:l.value}));return{t:vc,userInput:a,pageCount:t,disabled:n,handleInput:function(e){a.value=Number(e)},handleChange:function(t){null==e||e.changeEvent(Number(t)),a.value=null},innerValue:o}}});const dm={class:"el-pagination__jump"};cm.render=function(e,t,n,l,a,o){const r=pl("el-input");return Cl(),Al("span",dm,[Bl(d(e.t("el.pagination.goto"))+" ",1),Tl(r,{class:"el-pagination__editor is-in-pagination",min:1,max:e.pageCount,disabled:e.disabled,"model-value":e.innerValue,type:"number","onUpdate:modelValue":e.handleInput,onChange:e.handleChange},null,8,["max","disabled","model-value","onUpdate:modelValue","onChange"]),Bl(" "+d(e.t("el.pagination.pageClassifier")),1)])},cm.__file="packages/pagination/src/jumper.vue";var pm=Qn({name:"Total",props:{total:{type:Number,default:1e3}},setup:()=>({t:vc})});const fm={class:"el-pagination__total"};pm.render=function(e,t,n,l,a,o){return Cl(),Al("span",fm,d(e.t("el.pagination.total",{total:e.total})),1)},pm.__file="packages/pagination/src/total.vue";var hm=Qn({name:"ElPager",props:{currentPage:{type:Number,default:1},pageCount:{type:Number},pagerCount:{type:Number,default:7},disabled:Boolean},emits:["change"],setup(e,{emit:t}){const n=tt(!1),l=tt(!1),a=tt("el-icon-more"),o=tt("el-icon-more"),r=ua((()=>{const t=e.pagerCount,n=(t-1)/2,l=Number(e.currentPage),a=Number(e.pageCount);let o=!1,r=!1;a>t&&(l>t-n&&(o=!0),l<a-n&&(r=!0));const i=[];if(o&&!r)for(let e=a-(t-2);e<a;e++)i.push(e);else if(!o&&r)for(let e=2;e<t;e++)i.push(e);else if(o&&r){const e=Math.floor(t/2)-1;for(let t=l-e;t<=l+e;t++)i.push(t)}else for(let e=2;e<a;e++)i.push(e);return i}));return Cn((()=>{const t=(e.pagerCount-1)/2;n.value=!1,l.value=!1,e.pageCount>e.pagerCount&&(e.currentPage>e.pagerCount-t&&(n.value=!0),e.currentPage<e.pageCount-t&&(l.value=!0))})),Cn((()=>{n.value||(o.value="el-icon-more")})),Cn((()=>{l.value||(a.value="el-icon-more")})),{showPrevMore:n,showNextMore:l,quicknextIconClass:a,quickprevIconClass:o,pagers:r,onMouseenter:function(t){e.disabled||("left"===t?o.value="el-icon-d-arrow-left":a.value="el-icon-d-arrow-right")},onPagerClick:function(n){const l=n.target;if("ul"===l.tagName.toLowerCase()||e.disabled)return;let a=Number(l.textContent);const o=e.pageCount,r=e.currentPage,i=e.pagerCount-2;l.className.includes("more")&&(l.className.includes("quickprev")?a=r-i:l.className.includes("quicknext")&&(a=r+i)),isNaN(a)||(a<1&&(a=1),a>o&&(a=o)),a!==r&&t("change",a)}}}});hm.render=function(e,t,n,l,a,o){return Cl(),Al("ul",{class:"el-pager",onClick:t[5]||(t[5]=(...t)=>e.onPagerClick(...t))},[e.pageCount>0?(Cl(),Al("li",{key:0,class:[{active:1===e.currentPage,disabled:e.disabled},"number"]}," 1 ",2)):Pl("v-if",!0),e.showPrevMore?(Cl(),Al("li",{key:1,class:["el-icon more btn-quickprev",[e.quickprevIconClass,{disabled:e.disabled}]],onMouseenter:t[1]||(t[1]=t=>e.onMouseenter("left")),onMouseleave:t[2]||(t[2]=t=>e.quickprevIconClass="el-icon-more")},null,34)):Pl("v-if",!0),(Cl(!0),Al(gl,null,da(e.pagers,(t=>(Cl(),Al("li",{key:t,class:[{active:e.currentPage===t,disabled:e.disabled},"number"]},d(t),3)))),128)),e.showNextMore?(Cl(),Al("li",{key:2,class:["el-icon more btn-quicknext",[e.quicknextIconClass,{disabled:e.disabled}]],onMouseenter:t[3]||(t[3]=t=>e.onMouseenter("right")),onMouseleave:t[4]||(t[4]=t=>e.quicknextIconClass="el-icon-more")},null,34)):Pl("v-if",!0),e.pageCount>1?(Cl(),Al("li",{key:3,class:[{active:e.currentPage===e.pageCount,disabled:e.disabled},"number"]},d(e.pageCount),3)):Pl("v-if",!0)])},hm.__file="packages/pagination/src/pager.vue";const vm=e=>Number.isNaN(e)?10:e;var mm=Qn({name:"ElPagination",components:{Prev:tm,Next:am,Sizes:sm,Jumper:cm,Total:pm,Pager:hm},props:{pageSize:{type:Number,default:10},small:Boolean,total:{type:Number},pageCount:{type:Number},pagerCount:{type:Number,validator:e=>(0|e)===e&&e>4&&e<22&&e%2==1,default:7},currentPage:{type:Number,default:1},layout:{type:String,default:"prev, pager, next, jumper, ->, total"},pageSizes:{type:Array,default:()=>[10,20,30,40,50,100]},popperClass:{type:String,default:""},prevText:{type:String,default:""},nextText:{type:String,default:""},background:Boolean,disabled:Boolean,hideOnSinglePage:Boolean},emits:["size-change","current-change","prev-click","next-click","update:currentPage","update:pageSize"],setup(e,{emit:t}){const n=tt(-1),l=tt(!1),a=tt(vm(e.pageSize)),o=ua((()=>"number"==typeof e.total?Math.max(1,Math.ceil(e.total/a.value)):"number"==typeof e.pageCount?Math.max(1,e.pageCount):null)),r=tt(u(e.currentPage));function i(){Mt((()=>{(r.value!==n.value||l.value)&&(n.value=r.value,l.value=!1)}))}function s(e){r.value=u(e),l.value=!0}function u(e){let t;return"string"==typeof e&&(e=parseInt(e,10)),"number"==typeof o.value?e<1?t=1:e>o.value&&(t=o.value):(isNaN(e)||e<1)&&(t=1),(void 0===t&&isNaN(e)||0===t)&&(t=1),void 0===t?e:t}return An((()=>u(e.currentPage)),(e=>{r.value=e})),An((()=>e.pageSize),(e=>{a.value=vm(e)})),An(r,(e=>{t("update:currentPage",e),t("current-change",e)})),An((()=>o.value),(e=>{const t=r.value;e>0&&0===t?r.value=1:t>e&&(r.value=0===e?1:e,l.value&&i()),l.value=!1})),Fl("pagination",{pageCount:ua((()=>e.pageCount)),disabled:ua((()=>e.disabled)),currentPage:ua((()=>r.value)),changeEvent:s,handleSizesChange:function(e){l.value=!0,a.value=e,t("size-change",e)}}),{internalCurrentPage:r,internalPageSize:a,lastEmittedPage:n,userChangePageSize:l,internalPageCount:o,getValidCurrentPage:u,emitChange:i,handleCurrentChange:s,prev:function(){if(e.disabled)return;const n=r.value-1;r.value=u(n),t("prev-click",r),i()},next:function(){if(e.disabled)return;const n=r.value+1;r.value=u(n),t("next-click",r.value),i()}}},render(){var e,t,n;const l=this.layout;if(!l)return null;if(this.hideOnSinglePage&&(!this.internalPageCount||1===this.internalPageCount))return null;const a=ca("div",{class:["el-pagination",{"is-background":this.background,"el-pagination--small":this.small}]}),o=[],r=ca("div",{class:"el-pagination__rightwrapper"}),i={prev:ca(tm,{disabled:this.disabled,currentPage:this.internalCurrentPage,prevText:this.prevText,onClick:this.prev}),jumper:ca(cm),pager:ca(hm,{currentPage:this.internalCurrentPage,pageCount:this.internalPageCount,pagerCount:this.pagerCount,onChange:this.handleCurrentChange,disabled:this.disabled}),next:ca(am,{disabled:this.disabled,currentPage:this.internalCurrentPage,pageCount:this.internalPageCount,nextText:this.nextText,onClick:this.next}),sizes:ca(sm,{pageSize:this.pageSize,pageSizes:this.pageSizes,popperClass:this.popperClass,disabled:this.disabled}),slot:null!==(n=null===(t=null===(e=this.$slots)||void 0===e?void 0:e.default)||void 0===t?void 0:t.call(e))&&void 0!==n?n:null,total:ca(pm,{total:this.total})},s=l.split(",").map((e=>e.trim()));let u=!1;return s.forEach((e=>{"->"!==e?u||o.push(i[e]):u=!0})),u&&o.unshift(r),ca(a,{},o)}});mm.install=e=>{e.component(mm.name,mm)};var gm=Qn({name:"ElPopconfirm",components:{ElButton:sc,ElPopper:Ku},props:{title:{type:String},confirmButtonText:{type:String},cancelButtonText:{type:String},confirmButtonType:{type:String,default:"primary"},cancelButtonType:{type:String,default:"text"},icon:{type:String,default:"el-icon-question"},iconColor:{type:String,default:"#f90"},hideIcon:{type:Boolean,default:!1}},emits:["confirm","cancel"],setup(e,{emit:t}){const n=tt(!1),l=ua((()=>e.confirmButtonText||vc("el.popconfirm.confirmButtonText"))),a=ua((()=>e.cancelButtonText||vc("el.popconfirm.cancelButtonText")));return{visible:n,confirm:()=>{n.value=!1,t("confirm")},cancel:()=>{n.value=!1,t("cancel")},confirmButtonText_:l,cancelButtonText_:a}}});const bm={class:"el-popconfirm"},ym={class:"el-popconfirm__main"},xm={class:"el-popconfirm__action"};gm.render=function(e,t,n,l,a,o){const r=pl("el-button"),i=pl("el-popper");return Cl(),Al(i,{visible:e.visible,"onUpdate:visible":t[1]||(t[1]=t=>e.visible=t),trigger:["click"],effect:"light","popper-class":"el-popover","append-to-body":""},{trigger:en((()=>[Zt(e.$slots,"reference")])),default:en((()=>[Tl("div",bm,[Tl("p",ym,[e.hideIcon?Pl("v-if",!0):(Cl(),Al("i",{key:0,class:[e.icon,"el-popconfirm__icon"],style:{color:e.iconColor}},null,6)),Bl(" "+d(e.title),1)]),Tl("div",xm,[Tl(r,{size:"mini",type:e.cancelButtonType,onClick:e.cancel},{default:en((()=>[Bl(d(e.cancelButtonText_),1)])),_:1},8,["type","onClick"]),Tl(r,{size:"mini",type:e.confirmButtonType,onClick:e.confirm},{default:en((()=>[Bl(d(e.confirmButtonText_),1)])),_:1},8,["type","onClick"])])])])),_:1},8,["visible"])},gm.__file="packages/popconfirm/src/index.vue",gm.install=e=>{e.component(gm.name,gm)};const km={key:0,class:"el-popover__title",role:"title"};var wm=Qn({name:"ElPopover",components:{ElPopper:Ku},props:Object.assign(Object.assign({},ju),{content:{type:String},trigger:{type:String,default:"click"},title:{type:String},transition:{type:String,default:"fade-in-linear"},width:{type:[String,Number],default:150},appendToBody:{type:Boolean,default:!0}}),emits:["update:visible","after-enter","after-leave","show","hide"],setup:(e,t)=>("production"!==process.env.NODE_EVN&&e.visible&&!t.slots.reference&&console.warn(new Ls("[ElPopover] \n        You cannot init popover without given reference\n      ")),function(e,t){const n=ua((()=>{let t;return t=Zi(e.width)?e.width:e.width+"px",{width:t,zIndex:Fu.nextZIndex()}})),l=Hu(e,t);return An(l.visibility,(e=>{t.emit(e?"show":"hide")})),Object.assign(Object.assign({},l),{popperStyle:n})}(e,t)),render(){const{$slots:e}=this,t=e.reference?e.reference():null,n=(l=this.title,a=km,o=d(this.title),r=Eu.TEXT,l?Tu("div",a,o,r,void 0):Pl("v-if",!0));var l,a,o,r;const i=Zt(e,"default",{},(()=>[Bl(d(this.content),Eu.TEXT)])),{events:s,onAfterEnter:u,onAfterLeave:c,onPopperMouseEnter:p,onPopperMouseLeave:f,popperStyle:h,popperId:v,popperClass:m,showArrow:g,transition:b,visibility:y}=this,x=[this.content?"el-popover--plain":"","el-popover",m].join(" ");let k=Wu({effect:Ru.LIGHT,name:b,popperClass:x,popperStyle:h,popperId:v,visibility:y,onMouseEnter:p,onMouseLeave:f,onAfterEnter:u,onAfterLeave:c,stopPopperMouseEvent:!0},[n,i,Yu(g)]);const w=t?qu(t,Object.assign({ariaDescribedby:v,ref:"triggerRef",onMouseDown:Ps,onMouseUp:Ps},s)):Pl("v-if",!0);return Tu(gl,null,["click"===this.trigger?Un(w,[[Xs,this.hide]]):w,Tl(cl,{disabled:!this.appendToBody,to:"body"},[k],Eu.PROPS,["disabled"])])}});wm.__file="packages/popover/src/index.vue";const Cm=(e,t,n)=>{const l=t.arg||t.value,a=n.dirs[0].instance.$refs[l];a&&(a.triggerRef=e,Object.entries(a.events).map((([t,n])=>{As(e,t.toLowerCase().slice(2),n)})))};var _m={mounted(e,t,n){Cm(e,t,n)},updated(e,t,n){Cm(e,t,n)}};wm.install=e=>{e.component(wm.name,wm),e.directive("popover",_m)},wm.directive=_m;var Am=Qn({name:"ElProgress",props:{type:{type:String,default:"line",validator:e=>["line","circle","dashboard"].indexOf(e)>-1},percentage:{type:Number,default:0,required:!0,validator:e=>e>=0&&e<=100},status:{type:String,default:"",validator:e=>["","success","exception","warning"].indexOf(e)>-1},strokeWidth:{type:Number,default:6},strokeLinecap:{type:String,default:"round"},textInside:{type:Boolean,default:!1},width:{type:Number,default:126},showText:{type:Boolean,default:!0},color:{type:[String,Array,Function],default:""},format:{type:Function,default:e=>e+"%"}},setup(e){const t=ua((()=>({width:e.percentage+"%",backgroundColor:h(e.percentage)}))),n=ua((()=>(e.strokeWidth/e.width*100).toFixed(1))),l=ua((()=>"circle"===e.type||"dashboard"===e.type?parseInt(""+(50-parseFloat(n.value)/2),10):0)),a=ua((()=>{const t=l.value,n="dashboard"===e.type;return`\n          M 50 50\n          m 0 ${n?"":"-"}${t}\n          a ${t} ${t} 0 1 1 0 ${n?"-":""}${2*t}\n          a ${t} ${t} 0 1 1 0 ${n?"":"-"}${2*t}\n          `})),o=ua((()=>2*Math.PI*l.value)),r=ua((()=>"dashboard"===e.type?.75:1)),i=ua((()=>-1*o.value*(1-r.value)/2+"px")),s=ua((()=>({strokeDasharray:`${o.value*r.value}px, ${o.value}px`,strokeDashoffset:i.value}))),u=ua((()=>({strokeDasharray:`${o.value*r.value*(e.percentage/100)}px, ${o.value}px`,strokeDashoffset:i.value,transition:"stroke-dasharray 0.6s ease 0s, stroke 0.6s ease"}))),c=ua((()=>{let t;if(e.color)t=h(e.percentage);else switch(e.status){case"success":t="#13ce66";break;case"exception":t="#ff4949";break;case"warning":t="#e6a23c";break;default:t="#20a0ff"}return t})),d=ua((()=>"warning"===e.status?"el-icon-warning":"line"===e.type?"success"===e.status?"el-icon-circle-check":"el-icon-circle-close":"success"===e.status?"el-icon-check":"el-icon-close")),p=ua((()=>"line"===e.type?12+.4*e.strokeWidth:.111111*e.width+2)),f=ua((()=>e.format(e.percentage))),h=t=>{var n;const{color:l}=e;if("function"==typeof l)return l(t);if("string"==typeof l)return l;{const e=100/l.length,a=l.map(((t,n)=>"string"==typeof t?{color:t,percentage:(n+1)*e}:t)).sort(((e,t)=>e.percentage-t.percentage));for(let e=0;e<a.length;e++)if(a[e].percentage>t)return a[e].color;return null===(n=a[a.length-1])||void 0===n?void 0:n.color}};return{barStyle:t,relativeStrokeWidth:n,radius:l,trackPath:a,perimeter:o,rate:r,strokeDashoffset:i,trailPathStyle:s,circlePathStyle:u,stroke:c,iconClass:d,progressTextSize:p,content:f,getCurrentColor:h}}});const Sm={key:0,class:"el-progress-bar"},Em={key:0,class:"el-progress-bar__innerText"},Mm={viewBox:"0 0 100 100"};Am.render=function(e,t,n,l,a,o){return Cl(),Al("div",{class:["el-progress",["el-progress--"+e.type,e.status?"is-"+e.status:"",{"el-progress--without-text":!e.showText,"el-progress--text-inside":e.textInside}]],role:"progressbar","aria-valuenow":e.percentage,"aria-valuemin":"0","aria-valuemax":"100"},["line"===e.type?(Cl(),Al("div",Sm,[Tl("div",{class:"el-progress-bar__outer",style:{height:e.strokeWidth+"px"}},[Tl("div",{class:"el-progress-bar__inner",style:e.barStyle},[e.showText&&e.textInside?(Cl(),Al("div",Em,d(e.content),1)):Pl("v-if",!0)],4)],4)])):(Cl(),Al("div",{key:1,class:"el-progress-circle",style:{height:e.width+"px",width:e.width+"px"}},[(Cl(),Al("svg",Mm,[Tl("path",{class:"el-progress-circle__track",d:e.trackPath,stroke:"#e5e9f2","stroke-width":e.relativeStrokeWidth,fill:"none",style:e.trailPathStyle},null,12,["d","stroke-width"]),Tl("path",{class:"el-progress-circle__path",d:e.trackPath,stroke:e.stroke,fill:"none","stroke-linecap":e.strokeLinecap,"stroke-width":e.percentage?e.relativeStrokeWidth:0,style:e.circlePathStyle},null,12,["d","stroke","stroke-linecap","stroke-width"])]))],4)),e.showText&&!e.textInside?(Cl(),Al("div",{key:2,class:"el-progress__text",style:{fontSize:e.progressTextSize+"px"}},[e.status?(Cl(),Al("i",{key:1,class:e.iconClass},null,2)):(Cl(),Al(gl,{key:0},[Bl(d(e.content),1)],64))],4)):Pl("v-if",!0)],10,["aria-valuenow"])},Am.__file="packages/progress/src/index.vue",Am.install=e=>{e.component(Am.name,Am)};var Om=Qn({name:"ElRadioButton",props:{label:{type:[Boolean,String,Number],default:""},disabled:Boolean,name:{type:String,default:""}},setup(e){const{isGroup:t,radioGroup:n,elFormItemSize:l,ELEMENT:a,focus:o,elForm:r}=md(),i=ua((()=>n.radioGroupSize||l.value||a.size)),s=ua({get:()=>n.modelValue,set(e){n.changeEvent(e)}}),{isDisabled:u,tabIndex:c}=gd(e,{model:s,elForm:r,radioGroup:n,isGroup:t});return{isGroup:t,size:i,isDisabled:u,tabIndex:c,value:s,focus:o,activeStyle:ua((()=>({backgroundColor:n.fill||"",borderColor:n.fill||"",boxShadow:n.fill?"-1px 0 0 0 "+n.fill:"",color:n.textColor||""})))}}});Om.render=function(e,t,n,l,a,o){return Cl(),Al("label",{class:["el-radio-button",[e.size?"el-radio-button--"+e.size:"",{"is-active":e.value===e.label,"is-disabled":e.isDisabled,"is-focus":e.focus}]],role:"radio","aria-checked":e.value===e.label,"aria-disabled":e.isDisabled,tabindex:e.tabIndex,onKeydown:t[5]||(t[5]=fo(co((t=>e.value=e.isDisabled?e.value:e.label),["stop","prevent"]),["space"]))},[Un(Tl("input",{"onUpdate:modelValue":t[1]||(t[1]=t=>e.value=t),class:"el-radio-button__orig-radio",value:e.label,type:"radio",name:e.name,disabled:e.isDisabled,tabindex:"-1",onFocus:t[2]||(t[2]=t=>e.focus=!0),onBlur:t[3]||(t[3]=t=>e.focus=!1)},null,40,["value","name","disabled"]),[[oo,e.value]]),Tl("span",{class:"el-radio-button__inner",style:e.value===e.label?e.activeStyle:null,onKeydown:t[4]||(t[4]=co((()=>{}),["stop"]))},[Zt(e.$slots,"default",{},(()=>[Bl(d(e.label),1)]))],36)],42,["aria-checked","aria-disabled","tabindex"])},Om.__file="packages/radio/src/radio-button.vue",Om.install=e=>{e.component(Om.name,Om)};var Dm=Qn({name:"ElRadioGroup",componentName:"ElRadioGroup",props:{modelValue:{type:[Boolean,String,Number],default:""},size:{type:String,validator:au},fill:{type:String,default:""},textColor:{type:String,default:""},disabled:Boolean},emits:[tu,"change"],setup(e,t){const n=tt(null),l=$l("elFormItem",{}),a=ua((()=>e.size||l.size));return Fl("RadioGroup",Ye(Object.assign(Object.assign({name:"ElRadioGroup"},st(e)),{radioGroupSize:a,changeEvent:e=>{t.emit(tu,e),Mt((()=>{t.emit("change",e)}))}}))),An((()=>e.modelValue),(e=>{var t;null===(t=l.formItemMitt)||void 0===t||t.emit("el.form.change",[e])})),mn((()=>{const e=n.value.querySelectorAll("[type=radio]"),t=e[0];!Array.from(e).some((e=>e.checked))&&t&&(t.tabIndex=0)})),{handleKeydown:e=>{const t=e.target,l="INPUT"===t.nodeName?"[type=radio]":"[role=radio]",a=n.value.querySelectorAll(l),o=a.length,r=Array.from(a).indexOf(t),i=n.value.querySelectorAll("[role=radio]");let s=null;switch(e.code){case Fs.left:case Fs.up:e.stopPropagation(),e.preventDefault(),s=0===r?o-1:r-1;break;case Fs.right:case Fs.down:e.stopPropagation(),e.preventDefault(),s=r===o-1?0:r+1}null!==s&&(i[s].click(),i[s].focus())},radioGroupSize:a,radioGroup:n}}});Dm.render=function(e,t,n,l,a,o){return Cl(),Al("div",{ref:"radioGroup",class:"el-radio-group",role:"radiogroup",onKeydown:t[1]||(t[1]=(...t)=>e.handleKeydown(...t))},[Zt(e.$slots,"default")],544)},Dm.__file="packages/radio/src/radio-group.vue",Dm.install=e=>{e.component(Dm.name,Dm)};var Tm=Qn({name:"ElRate",props:{modelValue:{type:Number,default:0},lowThreshold:{type:Number,default:2},highThreshold:{type:Number,default:4},max:{type:Number,default:5},colors:{type:[Array,Object],default:()=>["#F7BA2A","#F7BA2A","#F7BA2A"]},voidColor:{type:String,default:"#C6D1DE"},disabledVoidColor:{type:String,default:"#EFF2F7"},iconClasses:{type:[Array,Object],default:()=>["el-icon-star-on","el-icon-star-on","el-icon-star-on"]},voidIconClass:{type:String,default:"el-icon-star-off"},disabledVoidIconClass:{type:String,default:"el-icon-star-on"},disabled:{type:Boolean,default:!1},allowHalf:{type:Boolean,default:!1},showText:{type:Boolean,default:!1},showScore:{type:Boolean,default:!1},textColor:{type:String,default:"#1f2d3d"},texts:{type:Array,default:()=>["Extremely bad","Disappointed","Fair","Satisfied","Surprise"]},scoreTemplate:{type:String,default:"{value}"}},emits:["update:modelValue","change"],setup(e,{emit:t}){const n=$l("elForm",{}),l=tt(e.modelValue),a=ua((()=>e.disabled||n.disabled)),o=ua((()=>{let t="";return e.showScore?t=e.scoreTemplate.replace(/\{\s*value\s*\}/,a.value?""+e.modelValue:""+l.value):e.showText&&(t=e.texts[Math.ceil(l.value)-1]),t}));function r(e,t){const n=Object.keys(t).filter((n=>{const l=t[n];return Qi(l)&&l.excluded?e<n:e<=n})).sort(((e,t)=>e-t)),l=t[n[0]];return Qi(l)?l.value:l||""}const i=ua((()=>100*e.modelValue-100*Math.floor(e.modelValue))),s=ua((()=>Xi(e.colors)?{[e.lowThreshold]:e.colors[0],[e.highThreshold]:{value:e.colors[1],excluded:!0},[e.max]:e.colors[2]}:e.colors)),u=ua((()=>r(l.value,s.value))),c=ua((()=>{let t="";return a.value?t=i.value+"%":e.allowHalf&&(t="50%"),{color:u.value,width:t}})),d=ua((()=>Xi(e.iconClasses)?{[e.lowThreshold]:e.iconClasses[0],[e.highThreshold]:{value:e.iconClasses[1],excluded:!0},[e.max]:e.iconClasses[2]}:e.iconClasses)),p=ua((()=>r(e.modelValue,d.value))),f=ua((()=>a.value?e.disabledVoidIconClass:e.voidIconClass)),h=ua((()=>r(l.value,d.value))),v=ua((()=>{let t=Array(e.max),n=l.value;return t.fill(h.value,0,n),t.fill(f.value,n,e.max),t})),m=tt(!0);An((()=>e.modelValue),(t=>{l.value=t,m.value=e.modelValue!==Math.floor(e.modelValue)}));const g=tt(-1);return e.modelValue||t("update:modelValue",0),{hoverIndex:g,currentValue:l,rateDisabled:a,text:o,decimalStyle:c,decimalIconClass:p,classes:v,showDecimalIcon:function(t){let n=a.value&&i.value>0&&t-1<e.modelValue&&t>e.modelValue,o=e.allowHalf&&m.value&&t-.5<=l.value&&t>l.value;return n||o},getIconStyle:function(t){const n=a.value?e.disabledVoidColor:e.voidColor;return{color:t<=l.value?u.value:n}},selectValue:function(n){a.value||(e.allowHalf&&m.value?(t("update:modelValue",l.value),t("change",this.currentValue)):(t("update:modelValue",n),t("change",n)))},handleKey:function(n){if(a.value)return;let o=l.value;const r=n.code;return r===Fs.up||r===Fs.right?(e.allowHalf?o+=.5:o+=1,n.stopPropagation(),n.preventDefault()):r!==Fs.left&&r!==Fs.down||(e.allowHalf?o-=.5:o-=1,n.stopPropagation(),n.preventDefault()),o=o<0?0:o,o=o>e.max?e.max:o,t("update:modelValue",o),t("change",o),o},setCurrentValue:function(t,n){if(!a.value){if(e.allowHalf){let e=n.target;Es(e,"el-rate__item")&&(e=e.querySelector(".el-rate__icon")),Es(e,"el-rate__decimal")&&(e=e.parentNode),m.value=2*n.offsetX<=e.clientWidth,l.value=m.value?t-.5:t}else l.value=t;g.value=t}},resetCurrentValue:function(){a.value||(e.allowHalf&&(m.value=e.modelValue!==Math.floor(e.modelValue)),l.value=e.modelValue,g.value=-1)}}}});Tm.render=function(e,t,n,l,a,o){return Cl(),Al("div",{class:"el-rate",role:"slider","aria-valuenow":e.currentValue,"aria-valuetext":e.text,"aria-valuemin":"0","aria-valuemax":e.max,tabindex:"0",onKeydown:t[2]||(t[2]=(...t)=>e.handleKey(...t))},[(Cl(!0),Al(gl,null,da(e.max,((n,l)=>(Cl(),Al("span",{key:l,class:"el-rate__item",style:{cursor:e.rateDisabled?"auto":"pointer"},onMousemove:t=>e.setCurrentValue(n,t),onMouseleave:t[1]||(t[1]=(...t)=>e.resetCurrentValue(...t)),onClick:t=>e.selectValue(n)},[Tl("i",{class:[[e.classes[n-1],{hover:e.hoverIndex===n}],"el-rate__icon"],style:e.getIconStyle(n)},[e.showDecimalIcon(n)?(Cl(),Al("i",{key:0,class:[e.decimalIconClass,"el-rate__decimal"],style:e.decimalStyle},null,6)):Pl("v-if",!0)],6)],44,["onMousemove","onClick"])))),128)),e.showText||e.showScore?(Cl(),Al("span",{key:0,class:"el-rate__text",style:{color:e.textColor}},d(e.text),5)):Pl("v-if",!0)],40,["aria-valuenow","aria-valuetext","aria-valuemax"])},Tm.__file="packages/rate/src/index.vue",Tm.install=e=>{e.component(Tm.name,Tm)};var Nm=Qn({name:"ElRow",props:{tag:{type:String,default:"div"},gutter:{type:Number,default:0},type:{type:String,default:""},justify:{type:String,default:"start"},align:{type:String,default:"top"}},setup(e,{slots:t}){Fl("ElRow",e.gutter);const n=ua((()=>{const t={display:"flex",flexWrap:"wrap",marginLeft:"",marginRight:""};return e.gutter&&(t.marginLeft=`-${e.gutter/2}px`,t.marginRight=t.marginLeft),t}));return()=>{var l;return ca(e.tag,{class:["el-row","start"!==e.justify?"is-justify-"+e.justify:"","top"!==e.align?"is-align-"+e.align:"","flex"===e.type?"el-row--flex":""],style:n.value},null===(l=t.default)||void 0===l?void 0:l.call(t))}}});Nm.install=e=>{e.component(Nm.name,Nm)};var Bm=Qn({name:"ElSliderButton",components:{ElTooltip:Yh},props:{modelValue:{type:Number,default:0},vertical:{type:Boolean,default:!1},tooltipClass:{type:String,default:""}},emits:[tu],setup(e,{emit:t}){const n=Ye({hovering:!1,dragging:!1,isClick:!1,startX:0,currentX:0,startY:0,currentY:0,startPosition:0,newPosition:0,oldValue:e.modelValue}),{tooltip:l,showTooltip:a,tooltipVisible:o,wrapperStyle:r,formatValue:i,handleMouseEnter:s,handleMouseLeave:u,onButtonDown:c,onLeftKeyDown:d,onRightKeyDown:p,setPosition:f}=((e,t,n)=>{const{disabled:l,min:a,max:o,step:r,showTooltip:i,precision:s,sliderSize:u,formatTooltip:c,emitChange:d,resetSize:p,updateDragging:f}=$l("SliderProvider"),{tooltip:h,tooltipVisible:v,formatValue:m,displayTooltip:g,hideTooltip:b}=((e,t,n)=>{const l=tt(null),a=tt(!1),o=ua((()=>t.value instanceof Function)),r=ua((()=>o.value&&t.value(e.modelValue)||e.modelValue));return{tooltip:l,tooltipVisible:a,formatValue:r,displayTooltip:()=>{n.value&&(a.value=!0)},hideTooltip:()=>{n.value&&(a.value=!1)}}})(e,c,i),y=ua((()=>(e.modelValue-a.value)/(o.value-a.value)*100+"%")),x=ua((()=>e.vertical?{bottom:y.value}:{left:y.value})),k=e=>{let t,n;return"touchstart"===e.type?(n=e.touches[0].clientY,t=e.touches[0].clientX):(n=e.clientY,t=e.clientX),{clientX:t,clientY:n}},w=n=>{t.dragging=!0,t.isClick=!0;const{clientX:l,clientY:a}=k(n);e.vertical?t.startY=a:t.startX=l,t.startPosition=parseFloat(y.value),t.newPosition=t.startPosition},C=n=>{if(t.dragging){let l;t.isClick=!1,g(),p();const{clientX:a,clientY:o}=k(n);e.vertical?(t.currentY=o,l=(t.startY-t.currentY)/u.value*100):(t.currentX=a,l=(t.currentX-t.startX)/u.value*100),t.newPosition=t.startPosition+l,A(t.newPosition)}},_=()=>{t.dragging&&(setTimeout((()=>{t.dragging=!1,b(),t.isClick||(A(t.newPosition),d())}),0),Ss(window,"mousemove",C),Ss(window,"touchmove",C),Ss(window,"mouseup",_),Ss(window,"touchend",_),Ss(window,"contextmenu",_))},A=l=>kh(void 0,void 0,void 0,(function*(){if(null===l||isNaN(l))return;l<0?l=0:l>100&&(l=100);const i=100/((o.value-a.value)/r.value);let u=Math.round(l/i)*i*(o.value-a.value)*.01+a.value;u=parseFloat(u.toFixed(s.value)),n(tu,u),t.dragging||e.modelValue===t.oldValue||(t.oldValue=e.modelValue),yield Mt(),t.dragging&&g(),h.value.updatePopper()}));return An((()=>t.dragging),(e=>{f(e)})),{tooltip:h,tooltipVisible:v,showTooltip:i,wrapperStyle:x,formatValue:m,handleMouseEnter:()=>{t.hovering=!0,g()},handleMouseLeave:()=>{t.hovering=!1,b()},onButtonDown:e=>{l.value||(e.preventDefault(),w(e),As(window,"mousemove",C),As(window,"touchmove",C),As(window,"mouseup",_),As(window,"touchend",_),As(window,"contextmenu",_))},onLeftKeyDown:()=>{l.value||(t.newPosition=parseFloat(y.value)-r.value/(o.value-a.value)*100,A(t.newPosition),d())},onRightKeyDown:()=>{l.value||(t.newPosition=parseFloat(y.value)+r.value/(o.value-a.value)*100,A(t.newPosition),d())},setPosition:A}})(e,n,t),{hovering:h,dragging:v}=st(n);return{tooltip:l,tooltipVisible:o,showTooltip:a,wrapperStyle:r,formatValue:i,handleMouseEnter:s,handleMouseLeave:u,onButtonDown:c,onLeftKeyDown:d,onRightKeyDown:p,setPosition:f,hovering:h,dragging:v}}});Bm.render=function(e,t,n,l,a,o){const r=pl("el-tooltip");return Cl(),Al("div",{ref:"button",class:["el-slider__button-wrapper",{hover:e.hovering,dragging:e.dragging}],style:e.wrapperStyle,tabindex:"0",onMouseenter:t[2]||(t[2]=(...t)=>e.handleMouseEnter(...t)),onMouseleave:t[3]||(t[3]=(...t)=>e.handleMouseLeave(...t)),onMousedown:t[4]||(t[4]=(...t)=>e.onButtonDown(...t)),onTouchstart:t[5]||(t[5]=(...t)=>e.onButtonDown(...t)),onFocus:t[6]||(t[6]=(...t)=>e.handleMouseEnter(...t)),onBlur:t[7]||(t[7]=(...t)=>e.handleMouseLeave(...t)),onKeydown:[t[8]||(t[8]=fo(((...t)=>e.onLeftKeyDown(...t)),["left"])),t[9]||(t[9]=fo(((...t)=>e.onRightKeyDown(...t)),["right"])),t[10]||(t[10]=fo(co(((...t)=>e.onLeftKeyDown(...t)),["prevent"]),["down"])),t[11]||(t[11]=fo(co(((...t)=>e.onRightKeyDown(...t)),["prevent"]),["up"]))]},[Tl(r,{ref:"tooltip",modelValue:e.tooltipVisible,"onUpdate:modelValue":t[1]||(t[1]=t=>e.tooltipVisible=t),placement:"top","popper-class":e.tooltipClass,disabled:!e.showTooltip,manual:""},{content:en((()=>[Tl("span",null,d(e.formatValue),1)])),default:en((()=>[Tl("div",{class:["el-slider__button",{hover:e.hovering,dragging:e.dragging}]},null,2)])),_:1},8,["modelValue","popper-class","disabled"])],38)},Bm.__file="packages/slider/src/button.vue";var Pm=Qn({name:"ElMarker",props:{mark:{type:[String,Object],default:()=>{}}},setup:e=>({label:ua((()=>"string"==typeof e.mark?e.mark:e.mark.label))}),render(){var e;return ca("div",{class:"el-slider__marks-text",style:null===(e=this.mark)||void 0===e?void 0:e.style},this.label)}});Pm.__file="packages/slider/src/marker.vue";var Vm=Qn({name:"ElSlider",components:{ElInputNumber:Oh,SliderButton:Bm,SliderMarker:Pm},props:{modelValue:{type:[Number,Array],default:0},min:{type:Number,default:0},max:{type:Number,default:100},step:{type:Number,default:1},showInput:{type:Boolean,default:!1},showInputControls:{type:Boolean,default:!0},inputSize:{type:String,default:"small"},showStops:{type:Boolean,default:!1},showTooltip:{type:Boolean,default:!0},formatTooltip:{type:Function,default:void 0},disabled:{type:Boolean,default:!1},range:{type:Boolean,default:!1},vertical:{type:Boolean,default:!1},height:{type:String,default:""},debounce:{type:Number,default:300},label:{type:String,default:void 0},tooltipClass:{type:String,default:void 0},marks:Object},emits:[tu,"change"],setup(e,{emit:t}){const n=Ye({firstValue:null,secondValue:null,oldValue:null,dragging:!1,sliderSize:1}),{elFormItem:l,slider:a,firstButton:o,secondButton:r,sliderDisabled:i,minValue:s,maxValue:u,runwayStyle:c,barStyle:d,resetSize:p,emitChange:f,onSliderClick:h}=((e,t,n)=>{const l=$l("elForm",{}),a=$l("elFormItem",{}),o=tt(null),r=tt(null),i=tt(null),s={firstButton:r,secondButton:i},u=ua((()=>e.disabled||l.disabled||!1)),c=ua((()=>Math.min(t.firstValue,t.secondValue))),d=ua((()=>Math.max(t.firstValue,t.secondValue))),p=ua((()=>e.range?100*(d.value-c.value)/(e.max-e.min)+"%":100*(t.firstValue-e.min)/(e.max-e.min)+"%")),f=ua((()=>e.range?100*(c.value-e.min)/(e.max-e.min)+"%":"0%")),h=ua((()=>e.vertical?{height:e.height}:{})),v=ua((()=>e.vertical?{height:p.value,bottom:f.value}:{width:p.value,left:f.value})),m=()=>{o.value&&(t.sliderSize=o.value["client"+(e.vertical?"Height":"Width")])},g=n=>{const l=e.min+n*(e.max-e.min)/100;if(!e.range)return void r.value.setPosition(n);let a;a=Math.abs(c.value-l)<Math.abs(d.value-l)?t.firstValue<t.secondValue?"firstButton":"secondButton":t.firstValue>t.secondValue?"firstButton":"secondButton",s[a].value.setPosition(n)},b=()=>kh(void 0,void 0,void 0,(function*(){yield Mt(),n("change",e.range?[c.value,d.value]:e.modelValue)}));return{elFormItem:a,slider:o,firstButton:r,secondButton:i,sliderDisabled:u,minValue:c,maxValue:d,runwayStyle:h,barStyle:v,resetSize:m,setPosition:g,emitChange:b,onSliderClick:n=>{if(!u.value&&!t.dragging){if(m(),e.vertical){const e=o.value.getBoundingClientRect().bottom;g((e-n.clientY)/t.sliderSize*100)}else{const e=o.value.getBoundingClientRect().left;g((n.clientX-e)/t.sliderSize*100)}b()}}}})(e,n,t),{stops:v,getStopStyle:m}=((e,t,n,l)=>({stops:ua((()=>{if(!e.showStops||e.min>e.max)return[];if(0===e.step)return[];const a=(e.max-e.min)/e.step,o=100*e.step/(e.max-e.min),r=Array.from({length:a-1}).map(((e,t)=>(t+1)*o));return e.range?r.filter((t=>t<100*(n.value-e.min)/(e.max-e.min)||t>100*(l.value-e.min)/(e.max-e.min))):r.filter((n=>n>100*(t.firstValue-e.min)/(e.max-e.min)))})),getStopStyle:t=>e.vertical?{bottom:t+"%"}:{left:t+"%"}}))(e,n,s,u),g=(e=>ua((()=>e.marks?Object.keys(e.marks).map(parseFloat).sort(((e,t)=>e-t)).filter((t=>t<=e.max&&t>=e.min)).map((t=>({point:t,position:100*(t-e.min)/(e.max-e.min),mark:e.marks[t]}))):[])))(e);Im(e,n,s,u,t,l);const b=ua((()=>{let t=[e.min,e.max,e.step].map((e=>{let t=(""+e).split(".")[1];return t?t.length:0}));return Math.max.apply(null,t)})),{sliderWrapper:y}=Lm(e,n,p),{firstValue:x,secondValue:k,oldValue:w,dragging:C,sliderSize:_}=st(n);return Fl("SliderProvider",Object.assign(Object.assign({},st(e)),{sliderSize:_,disabled:i,precision:b,emitChange:f,resetSize:p,updateDragging:e=>{n.dragging=e}})),{firstValue:x,secondValue:k,oldValue:w,dragging:C,sliderSize:_,slider:a,firstButton:o,secondButton:r,sliderDisabled:i,runwayStyle:c,barStyle:d,emitChange:f,onSliderClick:h,getStopStyle:m,stops:v,markList:g,sliderWrapper:y}}});const Im=(e,t,n,l,a,o)=>{const r=e=>{a(tu,e)},i=()=>e.range?![n.value,l.value].every(((e,n)=>e===t.oldValue[n])):e.modelValue!==t.oldValue,s=()=>{var a,s;if(e.min>e.max)return void zs("Slider","min should not be greater than max.");const u=e.modelValue;e.range&&Array.isArray(u)?u[1]<e.min?r([e.min,e.min]):u[0]>e.max?r([e.max,e.max]):u[0]<e.min?r([e.min,u[1]]):u[1]>e.max?r([u[0],e.max]):(t.firstValue=u[0],t.secondValue=u[1],i()&&(null===(a=o.formItemMitt)||void 0===a||a.emit("el.form.change",[n.value,l.value]),t.oldValue=u.slice())):e.range||"number"!=typeof u||isNaN(u)||(u<e.min?r(e.min):u>e.max?r(e.max):(t.firstValue=u,i()&&(null===(s=o.formItemMitt)||void 0===s||s.emit("el.form.change",u),t.oldValue=u)))};An((()=>t.dragging),(e=>{e||s()})),An((()=>t.firstValue),(t=>{e.range?r([n.value,l.value]):r(t)})),An((()=>t.secondValue),(()=>{e.range&&r([n.value,l.value])})),An((()=>e.modelValue),((e,n)=>{t.dragging||Array.isArray(e)&&Array.isArray(n)&&e.every(((e,t)=>e===n[t]))||s()})),An((()=>[e.min,e.max]),(()=>{s()}))},Lm=(e,t,n)=>{const l=tt(null);return mn((()=>kh(void 0,void 0,void 0,(function*(){let a;e.range?(Array.isArray(e.modelValue)?(t.firstValue=Math.max(e.min,e.modelValue[0]),t.secondValue=Math.min(e.max,e.modelValue[1])):(t.firstValue=e.min,t.secondValue=e.max),t.oldValue=[t.firstValue,t.secondValue],a=`${t.firstValue}-${t.secondValue}`):("number"!=typeof e.modelValue||isNaN(e.modelValue)?t.firstValue=e.min:t.firstValue=Math.min(e.max,Math.max(e.min,e.modelValue)),t.oldValue=t.firstValue,a=t.firstValue),l.value.setAttribute("aria-valuetext",a),l.value.setAttribute("aria-label",e.label?e.label:`slider between ${e.min} and ${e.max}`),As(window,"resize",n),yield Mt(),n()})))),yn((()=>{Ss(window,"resize",n)})),{sliderWrapper:l}},zm={key:1},Fm={class:"el-slider__marks"};Vm.render=function(e,t,n,l,a,o){const r=pl("el-input-number"),i=pl("slider-button"),s=pl("slider-marker");return Cl(),Al("div",{ref:"sliderWrapper",class:["el-slider",{"is-vertical":e.vertical,"el-slider--with-input":e.showInput}],role:"slider","aria-valuemin":e.min,"aria-valuemax":e.max,"aria-orientation":e.vertical?"vertical":"horizontal","aria-disabled":e.sliderDisabled},[e.showInput&&!e.range?(Cl(),Al(r,{key:0,ref:"input",modelValue:e.firstValue,"onUpdate:modelValue":t[1]||(t[1]=t=>e.firstValue=t),class:"el-slider__input",step:e.step,disabled:e.sliderDisabled,controls:e.showInputControls,min:e.min,max:e.max,debounce:e.debounce,size:e.inputSize,onChange:e.emitChange},null,8,["modelValue","step","disabled","controls","min","max","debounce","size","onChange"])):Pl("v-if",!0),Tl("div",{ref:"slider",class:["el-slider__runway",{"show-input":e.showInput,disabled:e.sliderDisabled}],style:e.runwayStyle,onClick:t[4]||(t[4]=(...t)=>e.onSliderClick(...t))},[Tl("div",{class:"el-slider__bar",style:e.barStyle},null,4),Tl(i,{ref:"firstButton",modelValue:e.firstValue,"onUpdate:modelValue":t[2]||(t[2]=t=>e.firstValue=t),vertical:e.vertical,"tooltip-class":e.tooltipClass},null,8,["modelValue","vertical","tooltip-class"]),e.range?(Cl(),Al(i,{key:0,ref:"secondButton",modelValue:e.secondValue,"onUpdate:modelValue":t[3]||(t[3]=t=>e.secondValue=t),vertical:e.vertical,"tooltip-class":e.tooltipClass},null,8,["modelValue","vertical","tooltip-class"])):Pl("v-if",!0),e.showStops?(Cl(),Al("div",zm,[(Cl(!0),Al(gl,null,da(e.stops,((t,n)=>(Cl(),Al("div",{key:n,class:"el-slider__stop",style:e.getStopStyle(t)},null,4)))),128))])):Pl("v-if",!0),e.markList.length>0?(Cl(),Al(gl,{key:2},[Tl("div",null,[(Cl(!0),Al(gl,null,da(e.markList,((t,n)=>(Cl(),Al("div",{key:n,style:e.getStopStyle(t.position),class:"el-slider__stop el-slider__marks-stop"},null,4)))),128))]),Tl("div",Fm,[(Cl(!0),Al(gl,null,da(e.markList,((t,n)=>(Cl(),Al(s,{key:n,mark:t.mark,style:e.getStopStyle(t.position)},null,8,["mark","style"])))),128))])],64)):Pl("v-if",!0)],6)],10,["aria-valuemin","aria-valuemax","aria-orientation","aria-disabled"])},Vm.__file="packages/slider/src/index.vue",Vm.install=e=>{e.component(Vm.name,Vm)};var $m=Qn({name:"ElStep",props:{title:{type:String,default:""},icon:{type:String,default:""},description:{type:String,default:""},status:{type:String,default:"",validator:e=>["","wait","process","finish","error","success"].includes(e)}},setup(e){const t=tt(-1),n=tt({}),l=tt(""),a=$l("ElSteps"),o=la();mn((()=>{An([()=>a.props.active,()=>a.props.processStatus,()=>a.props.finishStatus],(([e])=>{g(e)}),{immediate:!0})})),yn((()=>{a.steps.value=a.steps.value.filter((e=>e.uid!==o.uid))}));const r=ua((()=>e.status||l.value)),i=ua((()=>{const e=a.steps.value[t.value-1];return e?e.currentStatus:"wait"})),s=ua((()=>a.props.alignCenter)),u=ua((()=>"vertical"===a.props.direction)),c=ua((()=>a.props.simple)),d=ua((()=>a.steps.value.length)),p=ua((()=>{var e;return(null===(e=a.steps.value[d.value-1])||void 0===e?void 0:e.uid)===o.uid})),f=ua((()=>c.value?"":a.props.space)),h=ua((()=>{const e={flexBasis:"number"==typeof f.value?f.value+"px":f.value?f.value:100/(d.value-(s.value?0:1))+"%"};return u.value||p.value&&(e.maxWidth=100/d.value+"%"),e})),v=e=>{t.value=e},m=e=>{let l=100;const o={};o.transitionDelay=150*t.value+"ms",e===a.props.processStatus?l=0:"wait"===e&&(l=0,o.transitionDelay=-150*t.value+"ms"),o.borderWidth=l&&!c.value?"1px":0,o["vertical"===a.props.direction?"height":"width"]=l+"%",n.value=o},g=e=>{e>t.value?l.value=a.props.finishStatus:e===t.value&&"error"!==i.value?l.value=a.props.processStatus:l.value="wait";const n=a.steps.value[d.value-1];n&&n.calcProgress(l.value)},b=Ye({uid:ua((()=>o.uid)),currentStatus:r,setIndex:v,calcProgress:m});return a.steps.value=[...a.steps.value,b],{index:t,lineStyle:n,currentStatus:r,isCenter:s,isVertical:u,isSimple:c,isLast:p,space:f,style:h,parent:a,setIndex:v,calcProgress:m,updateStatus:g}}});const Rm={class:"el-step__line"},jm={key:1,class:"el-step__icon-inner"},Hm={class:"el-step__main"},Wm={key:0,class:"el-step__arrow"};$m.render=function(e,t,n,l,a,o){return Cl(),Al("div",{style:e.style,class:["el-step",e.isSimple?"is-simple":"is-"+e.parent.props.direction,e.isLast&&!e.space&&!e.isCenter&&"is-flex",e.isCenter&&!e.isVertical&&!e.isSimple&&"is-center"]},[Pl(" icon & line "),Tl("div",{class:["el-step__head","is-"+e.currentStatus]},[Tl("div",Rm,[Tl("i",{class:"el-step__line-inner",style:e.lineStyle},null,4)]),Tl("div",{class:["el-step__icon","is-"+(e.icon?"icon":"text")]},["success"!==e.currentStatus&&"error"!==e.currentStatus?Zt(e.$slots,"icon",{key:0},(()=>[e.icon?(Cl(),Al("i",{key:0,class:["el-step__icon-inner",e.icon]},null,2)):Pl("v-if",!0),e.icon||e.isSimple?Pl("v-if",!0):(Cl(),Al("div",jm,d(e.index+1),1))])):(Cl(),Al("i",{key:1,class:["el-step__icon-inner","is-status","el-icon-"+("success"===e.currentStatus?"check":"close")]},null,2))],2)],2),Pl(" title & description "),Tl("div",Hm,[Tl("div",{class:["el-step__title","is-"+e.currentStatus]},[Zt(e.$slots,"title",{},(()=>[Bl(d(e.title),1)]))],2),e.isSimple?(Cl(),Al("div",Wm)):(Cl(),Al("div",{key:1,class:["el-step__description","is-"+e.currentStatus]},[Zt(e.$slots,"description",{},(()=>[Bl(d(e.description),1)]))],2))])],6)},$m.__file="packages/steps/src/item.vue",$m.install=e=>{e.component($m.name,$m)};var qm=Qn({name:"ElSteps",props:{space:{type:[Number,String],default:""},active:{type:Number,default:0},direction:{type:String,default:"horizontal",validator:e=>["horizontal","vertical"].includes(e)},alignCenter:{type:Boolean,default:!1},simple:{type:Boolean,default:!1},finishStatus:{type:String,default:"finish",validator:e=>["wait","process","finish","error","success"].includes(e)},processStatus:{type:String,default:"process",validator:e=>["wait","process","finish","error","success"].includes(e)}},emits:["change"],setup(e,{emit:t}){const n=tt([]);return An(n,(()=>{n.value.forEach(((e,t)=>{e.setIndex(t)}))})),Fl("ElSteps",{props:e,steps:n}),An((()=>e.active),((e,n)=>{t("change",e,n)})),{steps:n}}});qm.render=function(e,t,n,l,a,o){return Cl(),Al("div",{class:["el-steps",e.simple?"el-steps--simple":"el-steps--"+e.direction]},[Zt(e.$slots,"default")],2)},qm.__file="packages/steps/src/index.vue",qm.install=e=>{e.component(qm.name,qm)};var Ym=Qn({name:"ElSubmenu",componentName:"ElSubmenu",components:{ElCollapseTransition:ep,ElPopper:Ku},props:{index:{type:String,required:!0},showTimeout:{type:Number,default:300},hideTimeout:{type:Number,default:300},popperClass:String,disabled:Boolean,popperAppendToBody:{type:Boolean,default:void 0}},setup(e){const t=Ye({popperJS:null,timeout:null,items:{},submenus:{},currentPlacement:"",mouseInChild:!1,opened:!1}),n=tt(null),l=tt(null),a=la(),{paddingStyle:o,indexPath:r,parentMenu:i}=qh(a,e.index),{openedMenus:s,isMenuPopup:u,hoverBackground:c,methods:d,props:p,methods:{closeMenu:f},rootMenuOn:h,rootMenuEmit:v}=$l("rootMenu"),{addSubMenu:m,removeSubMenu:g,handleMouseleave:b}=$l("subMenu:"+i.value.uid),y=ua((()=>"horizontal"===M.value&&x.value||"vertical"===M.value&&!p.collapse?"el-icon-arrow-down":"el-icon-arrow-right")),x=ua((()=>{let e=!0,t=a.parent;for(;t&&"ElMenu"!==t.type.name;){if(["ElSubmenu","ElMenuItemGroup"].includes(t.type.name)){e=!1;break}t=t.parent}return e})),k=ua((()=>void 0===e.popperAppendToBody?x.value:Boolean(e.popperAppendToBody))),w=ua((()=>p.collapse?"el-zoom-in-left":"el-zoom-in-top")),C=ua((()=>s.value.includes(e.index))),_=ua((()=>{let e=!1;const n=t.submenus,l=t.items;return Object.keys(l).forEach((t=>{l[t].active&&(e=!0)})),Object.keys(n).forEach((t=>{n[t].active&&(e=!0)})),e})),A=ua((()=>p.backgroundColor||"")),S=ua((()=>p.activeTextColor||"")),E=ua((()=>p.textColor||"")),M=ua((()=>p.mode)),O=ua((()=>"horizontal"!==M.value?{color:E.value}:{borderBottomColor:_.value?p.activeTextColor?S.value:"":"transparent",color:_.value?S.value:E.value})),D=_o(),T=e=>{t.submenus[e.index]=e},N=e=>{delete t.submenus[e.index]},B=(n=!1)=>{"click"===p.menuTrigger&&"horizontal"===p.mode||!p.collapse&&"vertical"===p.mode||(D.emit("submenu:mouse-leave-child"),clearTimeout(t.timeout),t.timeout=setTimeout((()=>{!t.mouseInChild&&f(e.index)}),e.hideTimeout),k.value&&n&&"ElSubmenu"===a.parent.type.name&&b(!0))},P=()=>{t.currentPlacement="horizontal"===M.value&&x.value?"bottom-start":"right-start"};return Fl("subMenu:"+a.uid,{addSubMenu:T,removeSubMenu:N,handleMouseleave:B}),vn((()=>{h("rootMenu:toggle-collapse",(e=>{(e=>{var t;e?P():null===(t=l.value)||void 0===t||t.doDestroy()})(e)})),D.on("submenu:mouse-enter-child",(()=>{t.mouseInChild=!0,clearTimeout(t.timeout)})),D.on("submenu:mouse-leave-child",(()=>{t.mouseInChild=!1,clearTimeout(t.timeout)}))})),mn((()=>{d.addSubMenu({index:e.index,indexPath:r,active:_}),m({index:e.index,indexPath:r,active:_}),P()})),yn((()=>{g({index:e.index,indexPath:r,active:_}),d.removeSubMenu({index:e.index,indexPath:r,active:_})})),{data:t,props:e,mode:M,active:_,isMenuPopup:u,opened:C,paddingStyle:o,titleStyle:O,backgroundColor:A,rootProps:p,menuTransitionName:w,submenuTitleIcon:y,appendToBody:k,handleClick:()=>{const t=e.disabled;"hover"===p.menuTrigger&&"horizontal"===p.mode||p.collapse&&"vertical"===p.mode||t||v("submenu:submenu-click",{index:e.index,indexPath:r})},handleMouseenter:(n,l=e.showTimeout)=>{if(!("ActiveXObject"in window)&&"focus"===n.type&&!n.relatedTarget)return;const a=e.disabled;"click"===p.menuTrigger&&"horizontal"===p.mode||!p.collapse&&"vertical"===p.mode||a||(D.emit("submenu:mouse-enter-child"),clearTimeout(t.timeout),t.timeout=setTimeout((()=>{d.openMenu(e.index,r)}),l),k.value&&i.value.vnode.el.dispatchEvent(new MouseEvent("mouseenter")))},handleMouseleave:B,handleTitleMouseenter:()=>{var e;if("horizontal"===M.value&&!p.backgroundColor)return;const t=(null===(e=l.value)||void 0===e?void 0:e.triggerRef)||n.value;t&&(t.style.backgroundColor=c.value)},handleTitleMouseleave:()=>{var e;if("horizontal"===M.value&&!p.backgroundColor)return;const t=(null===(e=l.value)||void 0===e?void 0:e.triggerRef)||n.value;t&&(t.style.backgroundColor=p.backgroundColor||"")},addItem:e=>{t.items[e.index]=e},removeItem:e=>{delete t.items[e.index]},addSubMenu:T,removeSubMenu:N,popperVnode:l,verticalTitleRef:n}}});Ym.render=function(e,t,n,l,a,o){const r=pl("el-popper"),i=pl("el-collapse-transition");return Cl(),Al("li",{class:["el-submenu",e.active&&"is-active",e.opened&&"is-opened",e.disabled&&"is-disabled"],role:"menuitem","aria-haspopup":"true","aria-expanded":"opened",onMouseenter:t[11]||(t[11]=(...t)=>e.handleMouseenter(...t)),onMouseleave:t[12]||(t[12]=()=>e.handleMouseleave(!1)),onFocus:t[13]||(t[13]=(...t)=>e.handleMouseenter(...t))},[e.isMenuPopup?(Cl(),Al(r,{key:0,ref:"popperVnode",visible:e.opened,"onUpdate:visible":t[7]||(t[7]=t=>e.opened=t),"manual-mode":!0,effect:"light",pure:!0,offset:6,"show-arrow":!1,"popper-class":e.props.popperClass,placement:e.data.currentPlacement,"append-to-body":e.appendToBody},{default:en((()=>[Tl(Pa,{name:e.menuTransitionName},{default:en((()=>[Un(Tl("div",{ref:"menu",class:["el-menu--"+e.mode,e.props.popperClass],onMouseenter:t[1]||(t[1]=t=>e.handleMouseenter(t,100)),onMouseleave:t[2]||(t[2]=()=>e.handleMouseleave(!0)),onFocus:t[3]||(t[3]=t=>e.handleMouseenter(t,100))},[Tl("ul",{role:"menu",class:["el-menu el-menu--popup","el-menu--popup-"+e.data.currentPlacement],style:{backgroundColor:e.rootProps.backgroundColor||""}},[Zt(e.$slots,"default")],6)],34),[[ho,e.opened]])])),_:3},8,["name"])])),trigger:en((()=>[Tl("div",{class:"el-submenu__title",style:[e.paddingStyle,e.titleStyle,{backgroundColor:e.backgroundColor}],onClick:t[4]||(t[4]=(...t)=>e.handleClick(...t)),onMouseenter:t[5]||(t[5]=(...t)=>e.handleTitleMouseenter(...t)),onMouseleave:t[6]||(t[6]=(...t)=>e.handleTitleMouseleave(...t))},[Zt(e.$slots,"title"),Tl("i",{class:["el-submenu__icon-arrow",e.submenuTitleIcon]},null,2)],36)])),_:1},8,["visible","popper-class","placement","append-to-body"])):Pl("v-if",!0),e.isMenuPopup?Pl("v-if",!0):(Cl(),Al("div",{key:1,ref:"verticalTitleRef",class:"el-submenu__title",style:[e.paddingStyle,e.titleStyle,{backgroundColor:e.backgroundColor}],onClick:t[8]||(t[8]=(...t)=>e.handleClick(...t)),onMouseenter:t[9]||(t[9]=(...t)=>e.handleTitleMouseenter(...t)),onMouseleave:t[10]||(t[10]=(...t)=>e.handleTitleMouseleave(...t))},[Zt(e.$slots,"title"),Tl("i",{class:["el-submenu__icon-arrow",e.submenuTitleIcon]},null,2)],36)),e.isMenuPopup?Pl("v-if",!0):(Cl(),Al(i,{key:2},{default:en((()=>[Un(Tl("ul",{role:"menu",class:"el-menu el-menu--inline",style:{backgroundColor:e.rootProps.backgroundColor||""}},[Zt(e.$slots,"default")],4),[[ho,e.opened]])])),_:3}))],34)},Ym.__file="packages/menu/src/submenu.vue",Ym.install=e=>{e.component(Ym.name,Ym)};var Km=Qn({name:"ElSwitch",props:{modelValue:{type:[Boolean,String,Number],default:!1},value:{type:[Boolean,String,Number],default:!1},disabled:{type:Boolean,default:!1},width:{type:Number,default:40},activeIconClass:{type:String,default:""},inactiveIconClass:{type:String,default:""},activeText:{type:String,default:""},inactiveText:{type:String,default:""},activeColor:{type:String,default:""},inactiveColor:{type:String,default:""},activeValue:{type:[Boolean,String,Number],default:!0},inactiveValue:{type:[Boolean,String,Number],default:!1},name:{type:String,default:""},validateEvent:{type:Boolean,default:!0},id:{type:String,default:""},loading:{type:Boolean,default:!1}},emits:["update:modelValue","change","input"],setup(e,t){const n=$l("elForm",{}),l=$l("elFormItem",{}),a=tt(e.width),o=tt(!1!==e.modelValue),r=tt(null),i=tt(null);An((()=>e.modelValue),(()=>{o.value=!0})),An((()=>e.value),(()=>{o.value=!1}));const s=ua((()=>o.value?e.modelValue:e.value)),u=ua((()=>s.value===e.activeValue));~[e.activeValue,e.inactiveValue].indexOf(s.value)||(t.emit("update:modelValue",e.inactiveValue),t.emit("change",e.inactiveValue),t.emit("input",e.inactiveValue)),An(u,(()=>{var t;r.value.checked=u.value,(e.activeColor||e.inactiveColor)&&p(),e.validateEvent&&(null===(t=l.formItemMitt)||void 0===t||t.emit("el.form.change",[s.value]))}));const c=ua((()=>e.disabled||e.loading||(n||{}).disabled)),d=()=>{const n=u.value?e.inactiveValue:e.activeValue;t.emit("update:modelValue",n),t.emit("change",n),t.emit("input",n),Mt((()=>{r.value.checked=u.value}))},p=()=>{const t=u.value?e.activeColor:e.inactiveColor,n=i.value;n.style.borderColor=t,n.style.backgroundColor=t,n.children[0].style.color=t};return mn((()=>{a.value=a.value||40,(e.activeValue||e.inactiveValue)&&p(),r.value.checked=u.value})),{input:r,core:i,coreWidth:a,switchDisabled:c,checked:u,handleChange:d,switchValue:()=>{!c.value&&d()}}}});const Um={class:"el-switch__action"},Gm={key:0,class:"el-icon-loading"};Km.render=function(e,t,n,l,a,o){return Cl(),Al("div",{class:["el-switch",{"is-disabled":e.switchDisabled,"is-checked":e.checked}],role:"switch","aria-checked":e.checked,"aria-disabled":e.switchDisabled,onClick:t[3]||(t[3]=co(((...t)=>e.switchValue(...t)),["prevent"]))},[Tl("input",{id:e.id,ref:"input",class:"el-switch__input",type:"checkbox",name:e.name,"true-value":e.activeValue,"false-value":e.inactiveValue,disabled:e.switchDisabled,onChange:t[1]||(t[1]=(...t)=>e.handleChange(...t)),onKeydown:t[2]||(t[2]=fo(((...t)=>e.switchValue(...t)),["enter"]))},null,40,["id","name","true-value","false-value","disabled"]),e.inactiveIconClass||e.inactiveText?(Cl(),Al("span",{key:0,class:["el-switch__label","el-switch__label--left",e.checked?"":"is-active"]},[e.inactiveIconClass?(Cl(),Al("i",{key:0,class:[e.inactiveIconClass]},null,2)):Pl("v-if",!0),!e.inactiveIconClass&&e.inactiveText?(Cl(),Al("span",{key:1,"aria-hidden":e.checked},d(e.inactiveText),9,["aria-hidden"])):Pl("v-if",!0)],2)):Pl("v-if",!0),Tl("span",{ref:"core",class:"el-switch__core",style:{width:e.coreWidth+"px"}},[Tl("div",Um,[e.loading?(Cl(),Al("i",Gm)):Pl("v-if",!0)])],4),e.activeIconClass||e.activeText?(Cl(),Al("span",{key:1,class:["el-switch__label","el-switch__label--right",e.checked?"is-active":""]},[e.activeIconClass?(Cl(),Al("i",{key:0,class:[e.activeIconClass]},null,2)):Pl("v-if",!0),!e.activeIconClass&&e.activeText?(Cl(),Al("span",{key:1,"aria-hidden":!e.checked},d(e.activeText),9,["aria-hidden"])):Pl("v-if",!0)],2)):Pl("v-if",!0)],10,["aria-checked","aria-disabled"])},Km.__file="packages/switch/src/index.vue",Km.install=e=>{e.component(Km.name,Km)};var Xm=Qn({name:"ElTabPane",props:{label:{type:String,default:""},name:{type:String,default:""},closable:Boolean,disabled:Boolean,lazy:Boolean},setup(e){const t=tt(null),n=tt(!1),l=$l("rootTabs"),a=$l("updatePaneState");if(!l||!a)throw new Error("ElTabPane must use with ElTabs");const o=ua((()=>e.closable||l.props.closable)),r=ua((()=>{const a=l.currentName.value===(e.name||t.value);return a&&(n.value=!0),a})),i=ua((()=>e.name||t.value)),s=ua((()=>!e.lazy||n.value||r.value)),u=la();return a({uid:u.uid,instance:u,props:e,paneName:i,active:r,index:t,isClosable:o}),{index:t,loaded:n,isClosable:o,active:r,paneName:i,shouldBeRender:s}}});Xm.render=function(e,t,n,l,a,o){return e.shouldBeRender?Un((Cl(),Al("div",{key:0,id:"pane-"+e.paneName,class:"el-tab-pane",role:"tabpanel","aria-hidden":!e.active,"aria-labelledby":"tab-"+e.paneName},[Zt(e.$slots,"default")],8,["id","aria-hidden","aria-labelledby"])),[[ho,e.active]]):Pl("v-if",!0)},Xm.__file="packages/tabs/src/tab-pane.vue",Xm.install=e=>{e.component(Xm.name,Xm)};const Jm=function(e){let t=e.target;for(;t&&"HTML"!==t.tagName.toUpperCase();){if("TD"===t.tagName.toUpperCase())return t;t=t.parentNode}return null},Zm=function(e){return null!==e&&"object"==typeof e},Qm=function(e,t){let n=null;return e.columns.forEach((function(e){e.id===t&&(n=e)})),n},eg=function(e,t){const n=(t.className||"").match(/el-table_[^\s]+/gm);return n?Qm(e,n[0]):null},tg=(e,t)=>{if(!e)throw new Error("row is required when get row identity");if("string"==typeof t){if(t.indexOf(".")<0)return e[t];const n=t.split(".");let l=e;for(let e=0;e<n.length;e++)l=l[n[e]];return l}if("function"==typeof t)return t.call(null,e)},ng=function(e,t){const n={};return(e||[]).forEach(((e,l)=>{n[tg(e,t)]={row:e,index:l}})),n};function lg(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function ag(e){return void 0!==e&&(e=parseInt(e,10),isNaN(e)&&(e=null)),e}function og(e){return"number"==typeof e?e:"string"==typeof e?/^\d+(?:px)?$/.test(e)?parseInt(e,10):e:null}function rg(e,t,n){let l=!1;const a=e.indexOf(t),o=-1!==a,r=()=>{e.push(t),l=!0},i=()=>{e.splice(a,1),l=!0};return"boolean"==typeof n?n&&!o?r():!n&&o&&i():o?i():r(),l}function ig(e,t,n="children",l="hasChildren"){const a=e=>!(Array.isArray(e)&&e.length);function o(e,r,i){t(e,r,i),r.forEach((e=>{if(e[l])return void t(e,null,i+1);const r=e[n];a(r)||o(e,r,i+1)}))}e.forEach((e=>{if(e[l])return void t(e,null,0);const r=e[n];a(r)||o(e,r,0)}))}const sg=e=>{const t=[];return e.forEach((e=>{e.children?t.push.apply(t,sg(e.children)):t.push(e)})),t};function ug(e,t){return e.map((e=>{var n;return e.id===t.id?t:((null===(n=e.children)||void 0===n?void 0:n.length)>0&&(e.children=ug(e.children,t)),e)}))}class cg{constructor(e){this.observers=[],this.table=null,this.store=null,this.columns=[],this.fit=!0,this.showHeader=!0,this.height=tt(null),this.scrollX=tt(!1),this.scrollY=tt(!1),this.bodyWidth=tt(null),this.fixedWidth=tt(null),this.rightFixedWidth=tt(null),this.tableHeight=tt(null),this.headerHeight=tt(44),this.appendHeight=tt(0),this.footerHeight=tt(44),this.viewportHeight=tt(null),this.bodyHeight=tt(null),this.fixedBodyHeight=tt(null),this.gutterWidth=Is();for(const t in e)e.hasOwnProperty(t)&&(et(this[t])?this[t].value=e[t]:this[t]=e[t]);if(!this.table)throw new Error("table is required for Table Layout");if(!this.store)throw new Error("store is required for Table Layout")}updateScrollY(){if(null===this.height.value)return!1;const e=this.table.refs.bodyWrapper;if(this.table.vnode.el&&e){const t=e.querySelector(".el-table__body"),n=this.scrollY.value,l=t.offsetHeight>this.bodyHeight.value;return this.scrollY.value=l,n!==l}return!1}setHeight(e,t="height"){if(is)return;const n=this.table.vnode.el;if(e=og(e),this.height.value=Number(e),!n&&(e||0===e))return Mt((()=>this.setHeight(e,t)));"number"==typeof e?(n.style[t]=e+"px",this.updateElsHeight()):"string"==typeof e&&(n.style[t]=e,this.updateElsHeight())}setMaxHeight(e){this.setHeight(e,"max-height")}getFlattenColumns(){const e=[];return this.table.store.states.columns.value.forEach((t=>{t.isColumnGroup?e.push.apply(e,t.columns):e.push(t)})),e}updateElsHeight(){if(!this.table.$ready)return Mt((()=>this.updateElsHeight()));const{headerWrapper:e,appendWrapper:t,footerWrapper:n}=this.table.refs,l=t,a=e,o=n;if(this.appendHeight.value=l?l.offsetHeight:0,this.showHeader&&!a)return;const r=a?a.querySelector(".el-table__header tr"):null,i=this.headerDisplayNone(r),s=this.headerHeight.value=this.showHeader?a.offsetHeight:0;if(this.showHeader&&!i&&a.offsetWidth>0&&(this.table.store.states.columns.value||[]).length>0&&s<2)return Mt((()=>this.updateElsHeight()));const u=this.tableHeight.value=this.table.vnode.el.clientHeight,c=this.footerHeight.value=o?o.offsetHeight:0;null!==this.height.value&&(this.bodyHeight.value=u-s-c+(o?1:0)),this.fixedBodyHeight.value=this.scrollX.value?this.bodyHeight.value-this.gutterWidth:this.bodyHeight.value;const d=!(this.store.states.data.value&&this.store.states.data.value.length);this.viewportHeight.value=this.scrollX.value?u-(d?0:this.gutterWidth):u,this.updateScrollY(),this.notifyObservers("scrollable")}headerDisplayNone(e){if(!e)return!0;let t=e;for(;"DIV"!==t.tagName;){if("none"===getComputedStyle(t).display)return!0;t=t.parentElement}return!1}updateColumnsWidth(){if(is)return;const e=this.fit,t=this.table.vnode.el.clientWidth;let n=0;const l=this.getFlattenColumns(),a=l.filter((e=>"number"!=typeof e.width));if(l.forEach((e=>{"number"==typeof e.width&&e.realWidth&&(e.realWidth=null)})),a.length>0&&e){l.forEach((e=>{n+=e.width||e.minWidth||80}));const e=this.scrollY.value?this.gutterWidth:0;if(n<=t-e){this.scrollX.value=!1;const l=t-e-n;if(1===a.length)a[0].realWidth=(a[0].minWidth||80)+l;else{const e=l/a.reduce(((e,t)=>e+(t.minWidth||80)),0);let t=0;a.forEach(((n,l)=>{if(0===l)return;const a=Math.floor((n.minWidth||80)*e);t+=a,n.realWidth=(n.minWidth||80)+a})),a[0].realWidth=(a[0].minWidth||80)+l-t}}else this.scrollX.value=!0,a.forEach((function(e){e.realWidth=e.minWidth}));this.bodyWidth.value=Math.max(n,t),this.table.state.resizeState.value.width=this.bodyWidth.value}else l.forEach((e=>{e.width||e.minWidth?e.realWidth=e.width||e.minWidth:e.realWidth=80,n+=e.realWidth})),this.scrollX.value=n>t,this.bodyWidth.value=n;const o=this.store.states.fixedColumns.value;if(o.length>0){let e=0;o.forEach((function(t){e+=t.realWidth||t.width})),this.fixedWidth.value=e}const r=this.store.states.rightFixedColumns.value;if(r.length>0){let e=0;r.forEach((function(t){e+=t.realWidth||t.width})),this.rightFixedWidth.value=e}this.notifyObservers("columns"),this.updateElsHeight()}addObserver(e){this.observers.push(e)}removeObserver(e){const t=this.observers.indexOf(e);-1!==t&&this.observers.splice(t,1)}notifyObservers(e){this.observers.forEach((t=>{var n,l;switch(e){case"columns":null===(n=t.state)||void 0===n||n.onColumnsChange(this);break;case"scrollable":null===(l=t.state)||void 0===l||l.onScrollableChange(this);break;default:throw new Error(`Table Layout don't have event ${e}.`)}}))}}var dg=Qn({name:"ElTableFilterPanel",components:{ElCheckbox:fd,ElCheckboxGroup:Gd,ElScrollbar:Au,ElPopper:Ku},props:{placement:{type:String,default:"bottom-start"},store:{type:Object},column:{type:Object},upDataColumn:{type:Function}},setup(e){const t=la(),n=t.parent;n.filterPanels.value[e.column.id]||(n.filterPanels.value[e.column.id]=t);const l=tt(!1),a=ua((()=>e.column&&e.column.filters)),o=ua({get:()=>(e.column.filteredValue||[])[0],set:e=>{r.value&&(null!=e?r.value.splice(0,1,e):r.value.splice(0,1))}}),r=ua({get:()=>e.column&&e.column.filteredValue||[],set(t){e.column&&e.upDataColumn("filteredValue",t)}}),i=ua((()=>!e.column||e.column.filterMultiple)),s=()=>{l.value=!1},u=t=>{e.store.commit("filterChange",{column:e.column,values:t}),e.store.updateAllSelected()};return An(l,(t=>{e.column&&e.upDataColumn("filterOpened",t)}),{immediate:!0}),{tooltipVisible:l,multiple:i,filteredValue:r,filterValue:o,filters:a,handleConfirm:()=>{u(r.value),s()},handleReset:()=>{r.value=[],u(r.value),s()},handleSelect:e=>{o.value=e,u(null!=e?r.value:[]),s()},isActive:e=>e.value===o.value,t:vc,showFilterPanel:e=>{e.stopPropagation(),l.value=!0}}}});const pg={key:0},fg={class:"el-table-filter__content"},hg={class:"el-table-filter__bottom"},vg={key:1,class:"el-table-filter__list"};function mg(e){const t=la();vn((()=>{n.value.addObserver(t)})),mn((()=>{l(n.value),a(n.value)})),bn((()=>{l(n.value),a(n.value)})),xn((()=>{n.value.removeObserver(t)}));const n=ua((()=>{const t=e.layout;if(!t)throw new Error("Can not find table layout.");return t})),l=t=>{var n;const l=null===(n=e.vnode.el)||void 0===n?void 0:n.querySelectorAll("colgroup > col");if(!l.length)return;const a=t.getFlattenColumns(),o={};a.forEach((e=>{o[e.id]=e}));for(let e=0,t=l.length;e<t;e++){const t=l[e],n=t.getAttribute("name"),a=o[n];a&&t.setAttribute("width",a.realWidth||a.width)}},a=t=>{const n=e.vnode.el.querySelectorAll("colgroup > col[name=gutter]");for(let e=0,l=n.length;e<l;e++)n[e].setAttribute("width",t.scrollY.value?t.gutterWidth:"0");const l=e.vnode.el.querySelectorAll("th.gutter");for(let e=0,n=l.length;e<n;e++){const n=l[e];n.style.width=t.scrollY.value?t.gutterWidth+"px":"0",n.style.display=t.scrollY.value?"":"none"}};return{tableLayout:n.value,onColumnsChange:l,onScrollableChange:a}}dg.render=function(e,t,n,l,a,o){const r=pl("el-checkbox"),i=pl("el-checkbox-group"),s=pl("el-scrollbar"),u=pl("el-popper");return Cl(),Al(u,{ref:"tooltip",visible:e.tooltipVisible,"onUpdate:visible":t[6]||(t[6]=t=>e.tooltipVisible=t),offset:0,placement:e.placement,"show-arrow":!1,trigger:"click",effect:"light",pure:"","popper-class":"el-table-filter","append-to-body":""},{default:en((()=>[e.multiple?(Cl(),Al("div",pg,[Tl("div",fg,[Tl(s,{"wrap-class":"el-table-filter__wrap"},{default:en((()=>[Tl(i,{modelValue:e.filteredValue,"onUpdate:modelValue":t[1]||(t[1]=t=>e.filteredValue=t),class:"el-table-filter__checkbox-group"},{default:en((()=>[(Cl(!0),Al(gl,null,da(e.filters,(e=>(Cl(),Al(r,{key:e.value,label:e.value},{default:en((()=>[Bl(d(e.text),1)])),_:2},1032,["label"])))),128))])),_:1},8,["modelValue"])])),_:1})]),Tl("div",hg,[Tl("button",{class:{"is-disabled":0===e.filteredValue.length},disabled:0===e.filteredValue.length,type:"",onClick:t[2]||(t[2]=(...t)=>e.handleConfirm(...t))},d(e.t("el.table.confirmFilter")),11,["disabled"]),Tl("button",{type:"",onClick:t[3]||(t[3]=(...t)=>e.handleReset(...t))},d(e.t("el.table.resetFilter")),1)])])):(Cl(),Al("ul",vg,[Tl("li",{class:[{"is-active":void 0===e.filterValue||null===e.filterValue},"el-table-filter__list-item"],onClick:t[4]||(t[4]=t=>e.handleSelect(null))},d(e.t("el.table.clearFilter")),3),(Cl(!0),Al(gl,null,da(e.filters,(t=>(Cl(),Al("li",{key:t.value,class:[{"is-active":e.isActive(t)},"el-table-filter__list-item"],label:t.value,onClick:n=>e.handleSelect(t.value)},d(t.text),11,["label","onClick"])))),128))]))])),trigger:en((()=>[Tl("span",{class:"el-table__column-filter-trigger el-none-outline",onClick:t[5]||(t[5]=(...t)=>e.showFilterPanel(...t))},[Tl("i",{class:["el-icon-arrow-down",e.column.filterOpened?"el-icon-arrow-up":""]},null,2)])])),_:1},8,["visible","placement"])},dg.__file="packages/table/src/filter-panel.vue";const gg=e=>{const t=[];return e.forEach((e=>{e.children?(t.push(e),t.push.apply(t,gg(e.children))):t.push(e)})),t};function bg(){return ca("col",{name:"gutter"})}function yg(e,t=!1){return ca("colgroup",{},[...e.map((e=>ca("col",{name:e.id,key:e.id}))),t&&bg()])}var xg=Qn({name:"ElTableHeader",components:{ElCheckbox:fd},props:{fixed:{type:String,default:""},store:{required:!0,type:Object},border:Boolean,defaultSort:{type:Object,default:()=>({prop:"",order:""})}},setup(e,{emit:t}){const n=la(),l=n.parent,a=l.store.states,o=tt({}),{tableLayout:r,onColumnsChange:i,onScrollableChange:s}=mg(l),u=ua((()=>!e.fixed&&r.gutterWidth));mn((()=>{Mt((()=>{const{prop:t,order:n}=e.defaultSort;l.store.commit("sort",{prop:t,order:n,init:!0})}))}));const{handleHeaderClick:c,handleHeaderContextMenu:d,handleMouseDown:p,handleMouseMove:f,handleMouseOut:h,handleSortClick:v,handleFilterClick:m}=function(e,t){const n=la(),l=n.parent,a=e=>{e.stopPropagation()},o=tt(null),r=tt(!1),i=tt({}),s=(t,n,a)=>{t.stopPropagation();const o=n.order===a?null:a||(({order:e,sortOrders:t})=>{if(""===e)return t[0];const n=t.indexOf(e||null);return t[n>t.length-2?0:n+1]})(n);let r=t.target;for(;r&&"TH"!==r.tagName;)r=r.parentNode;if(r&&"TH"===r.tagName&&Es(r,"noclick"))return void Os(r,"noclick");if(!n.sortable)return;const i=e.store.states;let s,u=i.sortProp.value;const c=i.sortingColumn.value;(c!==n||c===n&&null===c.order)&&(c&&(c.order=null),i.sortingColumn.value=n,u=n.property),s=n.order=o||null,i.sortProp.value=u,i.sortOrder.value=s,l.store.commit("changeSortCondition")};return{handleHeaderClick:(e,t)=>{!t.filters&&t.sortable?s(e,t,!1):t.filterable&&!t.sortable&&a(e),l.emit("header-click",t,e)},handleHeaderContextMenu:(e,t)=>{l.emit("header-contextmenu",t,e)},handleMouseDown:(a,s)=>{if(!is&&!(s.children&&s.children.length>0)&&o.value&&e.border){r.value=!0;const u=l;t("set-drag-visible",!0);const c=u.vnode.el.getBoundingClientRect().left,d=n.vnode.el.querySelector("th."+s.id),p=d.getBoundingClientRect(),f=p.left-c+30;Ms(d,"noclick"),i.value={startMouseLeft:a.clientX,startLeft:p.right-c,startColumnLeft:p.left-c,tableLeft:c};const h=u.refs.resizeProxy;h.style.left=i.value.startLeft+"px",document.onselectstart=function(){return!1},document.ondragstart=function(){return!1};const v=e=>{const t=e.clientX-i.value.startMouseLeft,n=i.value.startLeft+t;h.style.left=Math.max(f,n)+"px"},m=()=>{if(r.value){const{startColumnLeft:n,startLeft:l}=i.value,c=parseInt(h.style.left,10)-n;s.width=s.realWidth=c,u.emit("header-dragend",s.width,l-n,s,a),e.store.scheduleLayout(!1,!0),document.body.style.cursor="",r.value=!1,o.value=null,i.value={},t("set-drag-visible",!1)}document.removeEventListener("mousemove",v),document.removeEventListener("mouseup",m),document.onselectstart=null,document.ondragstart=null,setTimeout((function(){Os(d,"noclick")}),0)};document.addEventListener("mousemove",v),document.addEventListener("mouseup",m)}},handleMouseMove:(t,n)=>{if(n.children&&n.children.length>0)return;let l=t.target;for(;l&&"TH"!==l.tagName;)l=l.parentNode;if(n&&n.resizable&&!r.value&&e.border){const e=l.getBoundingClientRect(),a=document.body.style;e.width>12&&e.right-t.pageX<8?(a.cursor="col-resize",Es(l,"is-sortable")&&(l.style.cursor="col-resize"),o.value=n):r.value||(a.cursor="",Es(l,"is-sortable")&&(l.style.cursor="pointer"),o.value=null)}},handleMouseOut:()=>{is||(document.body.style.cursor="")},handleSortClick:s,handleFilterClick:a}}(e,t),{getHeaderRowStyle:g,getHeaderRowClass:b,getHeaderCellStyle:y,getHeaderCellClass:x}=function(e){const t=la().parent,n=t.store.states;return{getHeaderRowStyle:e=>{const n=t.props.headerRowStyle;return"function"==typeof n?n.call(null,{rowIndex:e}):n},getHeaderRowClass:e=>{const n=[],l=t.props.headerRowClassName;return"string"==typeof l?n.push(l):"function"==typeof l&&n.push(l.call(null,{rowIndex:e})),n.join(" ")},getHeaderCellStyle:(e,n,l,a)=>{const o=t.props.headerCellStyle;return"function"==typeof o?o.call(null,{rowIndex:e,columnIndex:n,row:l,column:a}):o},getHeaderCellClass:(l,a,o,r)=>{const i=[r.id,r.order,r.headerAlign,r.className,r.labelClassName];0===l&&((t,l)=>{let a=0;for(let e=0;e<t;e++)a+=l[e].colSpan;const o=a+l[t].colSpan-1;return"left"===e.fixed?o>=n.fixedLeafColumnsLength.value:"right"===e.fixed?a<n.columns.value.length-n.rightFixedLeafColumnsLength.value:o<n.fixedLeafColumnsLength.value||a>=n.columns.value.length-n.rightFixedLeafColumnsLength.value})(a,o)&&i.push("is-hidden"),r.children||i.push("is-leaf"),r.sortable&&i.push("is-sortable");const s=t.props.headerCellClassName;return"string"==typeof s?i.push(s):"function"==typeof s&&i.push(s.call(null,{rowIndex:l,columnIndex:a,row:o,column:r})),i.join(" ")}}}(e),{isGroup:k,toggleAllSelection:w,columnRows:C}=function(e){const t=la().parent,n=ua((()=>(e=>{let t=1;const n=(e,l)=>{if(l&&(e.level=l.level+1,t<e.level&&(t=e.level)),e.children){let t=0;e.children.forEach((l=>{n(l,e),t+=l.colSpan})),e.colSpan=t}else e.colSpan=1};e.forEach((e=>{e.level=1,n(e,void 0)}));const l=[];for(let e=0;e<t;e++)l.push([]);return gg(e).forEach((e=>{e.children?e.rowSpan=1:e.rowSpan=t-e.level+1,l[e.level-1].push(e)})),l})(e.store.states.originColumns.value)));return{isGroup:ua((()=>{const e=n.value.length>1;return e&&(t.state.isGroup.value=!0),e})),toggleAllSelection:e=>{e.stopPropagation(),t.store.commit("toggleAllSelection")},columnRows:n}}(e);return n.state={onColumnsChange:i,onScrollableChange:s},n.filterPanels=o,{columns:a.columns,filterPanels:o,hasGutter:u,onColumnsChange:i,onScrollableChange:s,columnRows:C,getHeaderRowClass:b,getHeaderRowStyle:g,getHeaderCellClass:x,getHeaderCellStyle:y,handleHeaderClick:c,handleHeaderContextMenu:d,handleMouseDown:p,handleMouseMove:f,handleMouseOut:h,handleSortClick:v,handleFilterClick:m,isGroup:k,toggleAllSelection:w}},render(){return ca("table",{border:"0",cellpadding:"0",cellspacing:"0",class:"el-table__header"},[yg(this.columns,this.hasGutter),ca("thead",{class:{"is-group":this.isGroup,"has-gutter":this.hasGutter}},this.columnRows.map(((e,t)=>ca("tr",{class:this.getHeaderRowClass(t),key:t,style:this.getHeaderRowStyle(t)},e.map(((n,l)=>ca("th",{class:this.getHeaderCellClass(t,l,e,n),colspan:n.colSpan,key:n.id+"-thead",rowSpan:n.rowSpan,style:this.getHeaderCellStyle(t,l,e,n),onClick:e=>this.handleHeaderClick(e,n),onContextmenu:e=>this.handleHeaderContextMenu(e,n),onMousedown:e=>this.handleMouseDown(e,n),onMouseMove:e=>this.handleMouseMove(e,n),onMouseout:this.handleMouseOut},[ca("div",{class:["cell",n.filteredValue&&n.filteredValue.length>0?"highlight":"",n.labelClassName]},[n.renderHeader?n.renderHeader({column:n,$index:l,store:this.store,_self:this.$parent}):n.label,n.sortable&&ca("span",{onClick:e=>this.handleSortClick(e,n),class:"caret-wrapper"},[ca("i",{onClick:e=>this.handleSortClick(e,n,"ascending"),class:"sort-caret ascending"}),ca("i",{onClick:e=>this.handleSortClick(e,n,"descending"),class:"sort-caret descending"})]),n.filterable&&ca(dg,{store:this.$parent.store,placement:n.filterPlacement||"bottom-start",column:n,upDataColumn:(e,t)=>{n[e]=t}})])])))))))])}});var kg=Qn({name:"ElTableBody",props:{store:{required:!0,type:Object},stripe:Boolean,context:{default:()=>({}),type:Object},rowClassName:[String,Function],rowStyle:[Object,Function],fixed:{type:String,default:""},highlight:Boolean},setup(e){const t=la(),n=t.parent,{wrappedRowRender:l,tooltipVisible:a,tooltipContent:o,tooltipTrigger:r}=function(e){const t=la().parent,{handleDoubleClick:n,handleClick:l,handleContextMenu:a,handleMouseEnter:o,handleMouseLeave:r,handleCellMouseEnter:i,handleCellMouseLeave:s,tooltipVisible:u,tooltipContent:c,tooltipTrigger:d}=function(e){const t=la().parent,n=tt(!1),l=tt(""),a=tt(ca("div")),o=(n,l,a)=>{const o=t,r=Jm(n);let i;r&&(i=eg({columns:e.store.states.columns.value},r),i&&o.emit("cell-"+a,l,i,r,n)),o.emit("row-"+a,l,i,n)};return{handleDoubleClick:(e,t)=>{o(e,t,"dblclick")},handleClick:(t,n)=>{e.store.commit("setCurrentRow",n),o(t,n,"click")},handleContextMenu:(e,t)=>{o(e,t,"contextmenu")},handleMouseEnter:ko()((function(t){e.store.commit("setHoverRow",t)}),30),handleMouseLeave:ko()((function(){e.store.commit("setHoverRow",null)}),30),handleCellMouseEnter:(n,l)=>{const a=t,o=Jm(n);if(o){const t=eg({columns:e.store.states.columns.value},o),r=a.hoverState={cell:o,column:t,row:l};a.emit("cell-mouse-enter",r.row,r.column,r.cell,n)}const r=n.target.querySelector(".cell");if(!Es(r,"el-tooltip")||!r.childNodes.length)return;const i=document.createRange();i.setStart(r,0),i.setEnd(r,r.childNodes.length),(i.getBoundingClientRect().width+((parseInt(Ds(r,"paddingLeft"),10)||0)+(parseInt(Ds(r,"paddingRight"),10)||0))>r.offsetWidth||r.scrollWidth>r.offsetWidth)&&function(e,t,n){function l(){o&&o.update()}function a(){try{o&&o.destroy(),r&&document.body.removeChild(r),Ss(e,"mouseenter",l)}catch(e){}}Ss(e,"mouseleave",a);let o=null;const r=function(){const e=document.createElement("div");return e.className="el-tooltip__popper is-dark",e.innerHTML=t,document.body.appendChild(e),e}(),i=function(){const e=document.createElement("div");return e.className="el-popper__arrow",e.style.bottom="-4px",e}();r.appendChild(i),o=Ur(e,r,Object.assign({modifiers:[{name:"offset",options:{offset:[0,8]}},{name:"arrow",options:{element:i,padding:10}}]},{placement:"top",strategy:"fixed"})),As(e,"mouseenter",l),As(e,"mouseleave",a)}(o,o.innerText||o.textContent)},handleCellMouseLeave:e=>{if(n.value=!1,!Jm(e))return;const l=t.hoverState;t.emit("cell-mouse-leave",null==l?void 0:l.row,null==l?void 0:l.column,null==l?void 0:l.cell,e)},tooltipVisible:n,tooltipContent:l,tooltipTrigger:a}}(e),{getRowStyle:p,getRowClass:f,getCellStyle:h,getCellClass:v,getSpan:m,getColspanRealWidth:g}=function(e){const t=la().parent,n=t=>"left"===e.fixed?t>=e.store.states.fixedLeafColumnsLength.value:"right"===e.fixed?t<e.store.states.columns.value.length-e.store.states.rightFixedLeafColumnsLength.value:t<e.store.states.fixedLeafColumnsLength.value||t>=e.store.states.columns.value.length-e.store.states.rightFixedLeafColumnsLength.value;return{getRowStyle:(e,n)=>{const l=t.props.rowStyle;return"function"==typeof l?l.call(null,{row:e,rowIndex:n}):l||null},getRowClass:(n,l)=>{const a=["el-table__row"];t.props.highlightCurrentRow&&n===e.store.states.currentRow.value&&a.push("current-row"),e.stripe&&l%2==1&&a.push("el-table__row--striped");const o=t.props.rowClassName;return"string"==typeof o?a.push(o):"function"==typeof o&&a.push(o.call(null,{row:n,rowIndex:l})),e.store.states.expandRows.value.indexOf(n)>-1&&a.push("expanded"),a},getCellStyle:(e,n,l,a)=>{const o=t.props.cellStyle;return"function"==typeof o?o.call(null,{rowIndex:e,columnIndex:n,row:l,column:a}):o},getCellClass:(e,l,a,o)=>{const r=[o.id,o.align,o.className];n(l)&&r.push("is-hidden");const i=t.props.cellClassName;return"string"==typeof i?r.push(i):"function"==typeof i&&r.push(i.call(null,{rowIndex:e,columnIndex:l,row:a,column:o})),r.join(" ")},getSpan:(e,n,l,a)=>{let o=1,r=1;const i=t.props.spanMethod;if("function"==typeof i){const t=i({row:e,column:n,rowIndex:l,columnIndex:a});Array.isArray(t)?(o=t[0],r=t[1]):"object"==typeof t&&(o=t.rowspan,r=t.colspan)}return{rowspan:o,colspan:r}},getColspanRealWidth:(e,t,n)=>t<1?e[n].realWidth:e.map((({realWidth:e})=>e)).slice(n,n+t).reduce(((e,t)=>e+t),-1),isColumnHidden:n}}(e),b=ua((()=>{return t=({type:e})=>"default"===e,e.store.states.columns.value.findIndex(t);var t})),y=(e,n)=>{const l=t.props.rowKey;return l?tg(e,l):n},x=(u,c,d)=>{const{indent:x,columns:k}=e.store.states,w=f(u,c);let C=!0;return d&&(w.push("el-table__row--level-"+d.level),C=d.display),ca("tr",{style:[C?null:{display:"none"},p(u,c)],class:w,key:y(u,c),onDblclick:e=>n(e,u),onClick:e=>l(e,u),onContextmenu:e=>a(e,u),onMouseenter:()=>o(c),onMouseleave:r},k.value.map(((n,l)=>{const{rowspan:a,colspan:o}=m(u,n,c,l);if(!a||!o)return null;const r=Object.assign({},n);r.realWidth=g(k.value,o,l);const p={store:e.store,_self:e.context||t,column:r,row:u,$index:c};return l===b.value&&d&&(p.treeNode={indent:d.level*x.value,level:d.level},"boolean"==typeof d.expanded&&(p.treeNode.expanded=d.expanded,"loading"in d&&(p.treeNode.loading=d.loading),"noLazyChildren"in d&&(p.treeNode.noLazyChildren=d.noLazyChildren))),ca("td",{style:h(c,l,u,n),class:v(c,l,u,n),rowspan:a,colspan:o,onMouseenter:e=>i(e,u),onMouseleave:s},[n.renderCell(p)])})))};return{wrappedRowRender:(n,l)=>{const a=e.store,{isRowExpanded:o,assertRowKey:r}=a,{treeData:i,lazyTreeNodeMap:s,childrenColumnName:u,rowKey:c}=a.states;if(a.states.columns.value.some((({type:e})=>"expand"===e))&&o(n)){const e=t.renderExpanded,o=x(n,l,void 0);return e?[[o,ca("tr",{key:"expanded-row__"+o.key},[ca("td",{colspan:a.states.columns.value.length,class:"el-table__expanded-cell"},[e({row:n,$index:l,store:a})])])]]:(console.error("[Element Error]renderExpanded is required."),o)}if(Object.keys(i.value).length){r();const e=tg(n,c.value);let t=i.value[e],a=null;t&&(a={expanded:t.expanded,level:t.level,display:!0},"boolean"==typeof t.lazy&&("boolean"==typeof t.loaded&&t.loaded&&(a.noLazyChildren=!(t.children&&t.children.length)),a.loading=t.loading));const o=[x(n,l,a)];if(t){let a=0;const r=(e,n)=>{e&&e.length&&n&&e.forEach((e=>{const d={display:n.display&&n.expanded,level:n.level+1,expanded:!1,noLazyChildren:!1,loading:!1},p=tg(e,c.value);if(null==p)throw new Error("for nested data item, row-key is required.");if(t=Object.assign({},i.value[p]),t&&(d.expanded=t.expanded,t.level=t.level||d.level,t.display=!(!t.expanded||!d.display),"boolean"==typeof t.lazy&&("boolean"==typeof t.loaded&&t.loaded&&(d.noLazyChildren=!(t.children&&t.children.length)),d.loading=t.loading)),a++,o.push(x(e,l+a,d)),t){const n=s.value[p]||e[u.value];r(n,t)}}))};t.display=!0;const d=s.value[e]||n[u.value];r(d,t)}return o}return x(n,l,void 0)},tooltipVisible:u,tooltipContent:c,tooltipTrigger:d}}(e),{onColumnsChange:i,onScrollableChange:s}=mg(n);return An(e.store.states.hoverRow,((n,l)=>{if(!e.store.states.isComplex.value||is)return;let a=window.requestAnimationFrame;a||(a=e=>window.setTimeout(e,16)),a((()=>{const e=t.vnode.el.querySelectorAll(".el-table__row"),a=e[l],o=e[n];a&&Os(a,"hover-row"),o&&Ms(o,"hover-row")}))})),{onColumnsChange:i,onScrollableChange:s,wrappedRowRender:l,tooltipVisible:a,tooltipContent:o,tooltipTrigger:r}},render(){const e=this.store.states.data.value||[];return ca("table",{class:"el-table__body",cellspacing:"0",cellpadding:"0",border:"0"},[yg(this.store.states.columns.value),ca("tbody",{},[e.reduce(((e,t)=>e.concat(this.wrappedRowRender(t,e.length))),[])])])}}),wg=Qn({name:"ElTableFooter",props:{fixed:{type:String,default:""},store:{required:!0,type:Object},summaryMethod:Function,sumText:String,border:Boolean,defaultSort:{type:Object,default:()=>({prop:"",order:""})}},setup(e){const{hasGutter:t,getRowClasses:n,columns:l}=function(e){const t=la().parent,n=t.store,{leftFixedLeafCount:l,rightFixedLeafCount:a,columnsCount:o,leftFixedCount:r,rightFixedCount:i,columns:s}=function(){const e=la().parent.store;return{leftFixedLeafCount:ua((()=>e.states.fixedLeafColumnsLength.value)),rightFixedLeafCount:ua((()=>e.states.rightFixedColumns.value.length)),columnsCount:ua((()=>e.states.columns.value.length)),leftFixedCount:ua((()=>e.states.fixedColumns.value.length)),rightFixedCount:ua((()=>e.states.rightFixedColumns.value.length)),columns:e.states.columns}}();return{hasGutter:ua((()=>!e.fixed&&t.layout.gutterWidth)),getRowClasses:(t,s)=>{const u=[t.id,t.align,t.labelClassName];return t.className&&u.push(t.className),((t,n,s)=>{if(e.fixed||"left"===e.fixed)return t>=l.value;if("right"===e.fixed){let e=0;for(let l=0;l<t;l++)e+=n[l].colSpan;return e<o.value-a.value}return!(e.fixed||!s.fixed)||t<r.value||t>=o.value-i.value})(s,n.states.columns.value,t)&&u.push("is-hidden"),t.children||u.push("is-leaf"),u},columns:s}}(e);return{getRowClasses:n,hasGutter:t,columns:l}},render(){let e=[];return this.summaryMethod?e=this.summaryMethod({columns:this.columns,data:this.store.states.data.value}):this.columns.forEach(((t,n)=>{if(0===n)return void(e[n]=this.sumText);const l=this.store.states.data.value.map((e=>Number(e[t.property]))),a=[];let o=!0;l.forEach((e=>{if(!isNaN(e)){o=!1;const t=(""+e).split(".")[1];a.push(t?t.length:0)}}));const r=Math.max.apply(null,a);e[n]=o?"":l.reduce(((e,t)=>{const n=Number(t);return isNaN(n)?e:parseFloat((e+t).toFixed(Math.min(r,20)))}),0)})),ca("table",{class:"el-table__footer",cellspacing:"0",cellpadding:"0",border:"0"},[yg(this.columns,this.hasGutter),ca("tbody",{class:[{"has-gutter":this.hasGutter}]},[ca("tr",{},[...this.columns.map(((t,n)=>ca("td",{key:n,colspan:t.colSpan,rowspan:t.rowSpan,class:this.getRowClasses(t,n)},[ca("div",{class:["cell",t.labelClassName]},[e[n]])]))),this.hasGutter&&bg()])])])}});let Cg=1;var _g=Qn({name:"ElTable",directives:{Mousewheel:eu},components:{TableHeader:xg,TableBody:kg,TableFooter:wg},props:{data:{type:Array,default:function(){return[]}},size:String,width:[String,Number],height:[String,Number],maxHeight:[String,Number],fit:{type:Boolean,default:!0},stripe:Boolean,border:Boolean,rowKey:[String,Function],showHeader:{type:Boolean,default:!0},showSummary:Boolean,sumText:String,summaryMethod:Function,rowClassName:[String,Function],rowStyle:[Object,Function],cellClassName:[String,Function],cellStyle:[Object,Function],headerRowClassName:[String,Function],headerRowStyle:[Object,Function],headerCellClassName:[String,Function],headerCellStyle:[Object,Function],highlightCurrentRow:Boolean,currentRowKey:[String,Number],emptyText:String,expandRowKeys:Array,defaultExpandAll:Boolean,defaultSort:Object,tooltipEffect:String,spanMethod:Function,selectOnIndeterminate:{type:Boolean,default:!0},indent:{type:Number,default:16},treeProps:{type:Object,default:()=>({hasChildren:"hasChildren",children:"children"})},lazy:Boolean,load:Function},emits:["select","select-all","selection-change","cell-mouse-enter","cell-mouse-leave","cell-click","cell-dblclick","row-click","row-contextmenu","row-dblclick","header-click","header-contextmenu","sort-change","filter-change","current-change","header-dragend","expand-change"],setup(e){let t=la();const n=function(e,t={}){if(!e)throw new Error("Table is required.");const n=function(){const e=la(),t={setData(t,n){const l=ot(t.data)!==n;t.data.value=n,t._data.value=n,e.store.execQuery(),e.store.updateCurrentRowData(),e.store.updateExpandRows(),ot(t.reserveSelection)?(e.store.assertRowKey(),e.store.updateSelectionByRowKey()):l?e.store.clearSelection():e.store.cleanSelection(),e.store.updateAllSelected(),e.store.updateTableScrollY()},insertColumn(t,n,l,a){if(l<-1)return;const o=ot(t._columns);if(a){a&&!a.children&&(a.children=[]),a.children.push(n);const e=ug(o,a);t._columns.value=e}else o.splice(l,0,n),t._columns.value=o;"selection"===n.type&&(t.selectable.value=n.selectable,t.reserveSelection.value=n.reserveSelection),e.$ready&&(e.store.updateColumns(),e.store.scheduleLayout())},removeColumn(t,n,l){const a=ot(t._columns)||[];l?(l.children.splice(l.children.findIndex((e=>e.id===n.id)),1),t._columns.value=ug(a,l)):(a.splice(a.indexOf(n),1),t._columns.value=a),e.$ready&&(e.store.updateColumns(),e.store.scheduleLayout())},sort(t,n){const{prop:l,order:a,init:o}=n;if(l){const n=gs(ot(t.columns),(e=>e.property===l));n&&(n.order=a,e.store.updateSort(n,l,a),e.store.commit("changeSortCondition",{init:o}))}},changeSortCondition(t,n){const{sortingColumn:l,sortProp:a,sortOrder:o}=t;null===ot(o)&&(t.sortingColumn.value=null,t.sortProp.value=null),e.store.execQuery({filter:!0}),n&&(n.silent||n.init)||e.emit("sort-change",{column:ot(l),prop:ot(a),order:ot(o)}),e.store.updateTableScrollY()},filterChange(t,n){const{column:l,values:a,silent:o}=n,r=e.store.updateFilters(l,a);e.store.execQuery(),o||e.emit("filter-change",r),e.store.updateTableScrollY()},toggleAllSelection(){e.store.toggleAllSelection()},rowSelectedChanged(t,n){e.store.toggleRowSelection(n),e.store.updateAllSelected()},setHoverRow(e,t){e.hoverRow.value=t},setCurrentRow(t,n){e.store.updateCurrentRow(n)}},n=function(){const e=la(),t=tt(null),n=tt([]),l=tt([]),a=tt(!1),o=tt([]),r=tt([]),i=tt([]),s=tt([]),u=tt([]),c=tt([]),d=tt([]),p=tt([]),f=tt(0),h=tt(0),v=tt(0),m=tt(!1),g=tt([]),b=tt(!1),y=tt(!1),x=tt(null),k=tt({}),w=tt(null),C=tt(null),_=tt(null),A=tt(null),S=tt(null),E=()=>{s.value=o.value.filter((e=>!0===e.fixed||"left"===e.fixed)),u.value=o.value.filter((e=>"right"===e.fixed)),s.value.length>0&&o.value[0]&&"selection"===o.value[0].type&&!o.value[0].fixed&&(o.value[0].fixed=!0,s.value.unshift(o.value[0]));const e=o.value.filter((e=>!e.fixed));r.value=[].concat(s.value).concat(e).concat(u.value);const t=sg(e),n=sg(s.value),l=sg(u.value);f.value=t.length,h.value=n.length,v.value=l.length,i.value=[].concat(n).concat(t).concat(l),a.value=s.value.length>0||u.value.length>0},M=(e,t,n)=>{C.value&&C.value!==e&&(C.value.order=null),C.value=e,_.value=t,A.value=n},O=()=>{let e=ot(l);Object.keys(k.value).forEach((t=>{const n=k.value[t];if(!n||0===n.length)return;const l=Qm({columns:i.value},t);l&&l.filterMethod&&(e=e.filter((e=>n.some((t=>l.filterMethod.call(null,t,e,l))))))})),w.value=e},D=()=>{n.value=((e,t)=>{const n=t.sortingColumn;return n&&"string"!=typeof n.sortable?function(e,t,n,l,a){if(!t&&!l&&(!a||Array.isArray(a)&&!a.length))return e;n="string"==typeof n?"descending"===n?-1:1:n&&n<0?-1:1;const o=l?null:function(n,l){return a?(Array.isArray(a)||(a=[a]),a.map((function(t){return"string"==typeof t?ss(n,t):t(n,l,e)}))):("$key"!==t&&Zm(n)&&"$value"in n&&(n=n.$value),[Zm(n)?ss(n,t):n])};return e.map((function(e,t){return{value:e,index:t,key:o?o(e,t):null}})).sort((function(e,t){let a=function(e,t){if(l)return l(e.value,t.value);for(let n=0,l=e.key.length;n<l;n++){if(e.key[n]<t.key[n])return-1;if(e.key[n]>t.key[n])return 1}return 0}(e,t);return a||(a=e.index-t.index),a*n})).map((e=>e.value))}(e,t.sortProp,t.sortOrder,n.sortMethod,n.sortBy):e})(w.value,{sortingColumn:C.value,sortProp:_.value,sortOrder:A.value})},{setExpandRowKeys:T,toggleRowExpansion:N,updateExpandRows:B,states:P,isRowExpanded:V}=function(e){const t=la(),n=tt(!1),l=tt([]);return{updateExpandRows:()=>{const t=e.data.value||[],a=e.rowKey.value;if(n.value)l.value=t.slice();else if(a){const e=ng(l.value,a);l.value=t.reduce(((t,n)=>{const l=tg(n,a);return e[l]&&t.push(n),t}),[])}else l.value=[]},toggleRowExpansion:(e,n)=>{rg(l.value,e,n)&&(t.emit("expand-change",e,l.value.slice()),t.store.scheduleLayout())},setExpandRowKeys:n=>{t.store.assertRowKey();const a=e.data.value||[],o=e.rowKey.value,r=ng(a,o);l.value=n.reduce(((e,t)=>{const n=r[t];return n&&e.push(n.row),e}),[])},isRowExpanded:t=>{const n=e.rowKey.value;return n?!!ng(l.value,n)[tg(t,n)]:-1!==l.value.indexOf(t)},states:{expandRows:l,defaultExpandAll:n}}}({data:n,rowKey:t}),{updateTreeExpandKeys:I,toggleTreeExpansion:L,loadOrToggle:z,states:F}=function(e){const t=tt([]),n=tt({}),l=tt(16),a=tt(!1),o=tt({}),r=tt("hasChildren"),i=tt("children"),s=la(),u=ua((()=>{if(!e.rowKey.value)return{};const t=e.data.value||[];return d(t)})),c=ua((()=>{const t=e.rowKey.value,n=Object.keys(o.value),l={};return n.length?(n.forEach((e=>{if(o.value[e].length){const n={children:[]};o.value[e].forEach((e=>{const a=tg(e,t);n.children.push(a),e[r.value]&&!l[a]&&(l[a]={children:[]})})),l[e]=n}})),l):l})),d=t=>{const n=e.rowKey.value,l={};return ig(t,((e,t,o)=>{const r=tg(e,n);Array.isArray(t)?l[r]={children:t.map((e=>tg(e,n))),level:o}:a.value&&(l[r]={children:[],lazy:!0,level:o})}),i.value,r.value),l},p=()=>{var e,l;const o=u.value,r=c.value,i=Object.keys(o),d={};if(i.length){const l=ot(n),u=null===(e=s.store)||void 0===e?void 0:e.states.defaultExpandAll.value,c=[],p=(e,n)=>{const l=u||t.value&&-1!==t.value.indexOf(n);return!!(e&&e.expanded||l)};i.forEach((e=>{const t=l[e],n=Object.assign({},o[e]);if(n.expanded=p(t,e),n.lazy){const{loaded:l=!1,loading:a=!1}=t||{};n.loaded=!!l,n.loading=!!a,c.push(e)}d[e]=n}));const f=Object.keys(r);a.value&&f.length&&c.length&&f.forEach((e=>{const t=l[e],n=r[e].children;if(-1!==c.indexOf(e)){if(0!==d[e].children.length)throw new Error("[ElTable]children must be an empty array.");d[e].children=n}else{const{loaded:l=!1,loading:a=!1}=t||{};d[e]={lazy:!0,loaded:!!l,loading:!!a,expanded:p(t,e),children:n,level:""}}}))}n.value=d,null===(l=s.store)||void 0===l||l.updateTableScrollY()};An((()=>u.value),p),An((()=>c.value),p);const f=(t,l)=>{s.store.assertRowKey();const a=e.rowKey.value,o=tg(t,a),r=o&&n.value[o];if(o&&r&&"expanded"in r){const e=r.expanded;l=void 0===l?!r.expanded:l,n.value[o].expanded=l,e!==l&&s.emit("expand-change",t,l),s.store.updateTableScrollY()}},h=(e,t,l)=>{const{load:a}=s.props;a&&!n.value[t].loaded&&(n.value[t].loading=!0,a(e,l,(l=>{if(!Array.isArray(l))throw new Error("[ElTable] data must be an array");n.value[t].loading=!1,n.value[t].loaded=!0,n.value[t].expanded=!0,l.length&&(o.value[t]=l),s.emit("expand-change",e,!0)})))};return{loadData:h,loadOrToggle:t=>{s.store.assertRowKey();const l=e.rowKey.value,o=tg(t,l),r=n.value[o];a.value&&r&&"loaded"in r&&!r.loaded?h(t,o,r):f(t,void 0)},toggleTreeExpansion:f,updateTreeExpandKeys:e=>{t.value=e,p()},updateTreeData:p,normalize:d,states:{expandRowKeys:t,treeData:n,indent:l,lazy:a,lazyTreeNodeMap:o,lazyColumnIdentifier:r,childrenColumnName:i}}}({data:n,rowKey:t}),{updateCurrentRowData:$,updateCurrentRow:R,setCurrentRowKey:j,states:H}=function(e){const t=la(),n=tt(null),l=tt(null),a=()=>{n.value=null},o=t=>{const{data:n=[],rowKey:a}=e;let o=null;a.value&&(o=gs(ot(n),(e=>tg(e,a.value)===t))),l.value=o};return{setCurrentRowKey:e=>{t.store.assertRowKey(),n.value=e,o(e)},restoreCurrentRowKey:a,setCurrentRowByKey:o,updateCurrentRow:e=>{const n=l.value;if(e&&e!==n)return l.value=e,void t.emit("current-change",l.value,n);!e&&n&&(l.value=null,t.emit("current-change",null,n))},updateCurrentRowData:()=>{const r=e.rowKey.value,i=e.data.value||[],s=l.value;if(-1===i.indexOf(s)&&s){if(r){const e=tg(s,r);o(e)}else l.value=null;null===l.value&&t.emit("current-change",null,s)}else n.value&&(o(n.value),a())},states:{_currentRowKey:n,currentRow:l}}}({data:n,rowKey:t});return{assertRowKey:()=>{if(!t.value)throw new Error("[ElTable] prop row-key is required")},updateColumns:E,scheduleLayout:(t,n=!1)=>{t&&E(),n?e.state.doLayout():e.state.debouncedUpdateLayout()},isSelected:e=>g.value.indexOf(e)>-1,clearSelection:()=>{m.value=!1,g.value.length&&(g.value=[],e.emit("selection-change",[]))},cleanSelection:()=>{let l;if(t.value){l=[];const e=ng(g.value,t.value),a=ng(n.value,t.value);for(const t in e)e.hasOwnProperty(t)&&!a[t]&&l.push(e[t].row)}else l=g.value.filter((e=>-1===n.value.indexOf(e)));if(l.length){const t=g.value.filter((e=>-1===l.indexOf(e)));g.value=t,e.emit("selection-change",t.slice())}},toggleRowSelection:(t,n,l=!0)=>{if(rg(g.value,t,n)){const n=(g.value||[]).slice();l&&e.emit("select",n,t),e.emit("selection-change",n)}},_toggleAllSelection:()=>{const t=y.value?!m.value:!(m.value||g.value.length);m.value=t;let l=!1;n.value.forEach(((e,n)=>{x.value?x.value.call(null,e,n)&&rg(g.value,e,t)&&(l=!0):rg(g.value,e,t)&&(l=!0)})),l&&e.emit("selection-change",g.value?g.value.slice():[]),e.emit("select-all",g.value)},updateSelectionByRowKey:()=>{const e=ng(g.value,t.value);n.value.forEach((n=>{const l=tg(n,t.value),a=e[l];a&&(g.value[a.index]=n)}))},updateAllSelected:()=>{var e;if(0===(null===(e=n.value)||void 0===e?void 0:e.length))return void(m.value=!1);let l;t.value&&(l=ng(g.value,t.value));let a=!0,o=0;for(let e=0,i=(n.value||[]).length;e<i;e++){const i=n.value[e],s=x.value&&x.value.call(null,i,e);if(r=i,l?l[tg(r,t.value)]:-1!==g.value.indexOf(r))o++;else if(!x.value||s){a=!1;break}}var r;0===o&&(a=!1),m.value=a},updateFilters:(e,t)=>{Array.isArray(e)||(e=[e]);const n={};return e.forEach((e=>{k.value[e.id]=t,n[e.columnKey||e.id]=t})),n},updateCurrentRow:R,updateSort:M,execFilter:O,execSort:D,execQuery:e=>{e&&e.filter||O(),D()},clearFilter:t=>{const{tableHeader:n,fixedTableHeader:l,rightFixedTableHeader:a}=e.refs;let o={};n&&(o=Object.assign(o,n.filterPanels)),l&&(o=Object.assign(o,l.filterPanels)),a&&(o=Object.assign(o,a.filterPanels));const r=Object.keys(o);if(r.length)if("string"==typeof t&&(t=[t]),Array.isArray(t)){const n=t.map((e=>function(e,t){let n=null;for(let l=0;l<e.columns.length;l++){const a=e.columns[l];if(a.columnKey===t){n=a;break}}return n}({columns:i.value},e)));r.forEach((e=>{const t=n.find((t=>t.id===e));t&&(t.filteredValue=[])})),e.store.commit("filterChange",{column:n,values:[],silent:!0,multi:!0})}else r.forEach((e=>{const t=i.value.find((t=>t.id===e));t&&(t.filteredValue=[])})),k.value={},e.store.commit("filterChange",{column:{},values:[],silent:!0})},clearSort:()=>{C.value&&(M(null,null,null),e.store.commit("changeSortCondition",{silent:!0}))},toggleRowExpansion:N,setExpandRowKeysAdapter:e=>{T(e),I(e)},setCurrentRowKey:j,toggleRowExpansionAdapter:(e,t)=>{i.value.some((({type:e})=>"expand"===e))?N(e,t):L(e,t)},isRowExpanded:V,updateExpandRows:B,updateCurrentRowData:$,loadOrToggle:z,states:Object.assign(Object.assign(Object.assign({rowKey:t,data:n,_data:l,isComplex:a,_columns:o,originColumns:r,columns:i,fixedColumns:s,rightFixedColumns:u,leafColumns:c,fixedLeafColumns:d,rightFixedLeafColumns:p,leafColumnsLength:f,fixedLeafColumnsLength:h,rightFixedLeafColumnsLength:v,isAllSelected:m,selection:g,reserveSelection:b,selectOnIndeterminate:y,selectable:x,filters:k,filteredData:w,sortingColumn:C,sortProp:_,sortOrder:A,hoverRow:S},P),F),H)}}();return Object.assign(Object.assign({},n),{mutations:t,commit:function(t,...n){const l=e.store.mutations;if(!l[t])throw new Error("Action not found: "+t);l[t].apply(e,[e.store.states].concat(n))},updateTableScrollY:function(){Mt(e.layout.updateScrollY.apply(e.layout))}})}();return n.toggleAllSelection=ko()(n._toggleAllSelection,10),Object.keys(t).forEach((e=>{n.states[e].value=t[e]})),n}(t,{rowKey:e.rowKey,defaultExpandAll:e.defaultExpandAll,selectOnIndeterminate:e.selectOnIndeterminate,indent:e.indent,lazy:e.lazy,lazyColumnIdentifier:e.treeProps.hasChildren||"hasChildren",childrenColumnName:e.treeProps.children||"children",data:e.data});t.store=n;const l=new cg({store:t.store,table:t,fit:e.fit,showHeader:e.showHeader});t.layout=l;const a=ua((()=>e.height||e.maxHeight||n.states.fixedColumns.value.length>0||n.states.rightFixedColumns.value.length>0)),{setCurrentRow:o,toggleRowSelection:r,clearSelection:i,clearFilter:s,toggleAllSelection:u,toggleRowExpansion:c,clearSort:d,doLayout:p,sort:f}=function(e,t,n){return{setCurrentRow:t=>{e.commit("setCurrentRow",t)},toggleRowSelection:(t,n)=>{e.toggleRowSelection(t,n,!1),e.updateAllSelected()},clearSelection:()=>{e.clearSelection()},clearFilter:t=>{e.clearFilter(t)},toggleAllSelection:()=>{e.commit("toggleAllSelection")},toggleRowExpansion:(t,n)=>{e.toggleRowExpansionAdapter(t,n)},clearSort:()=>{e.clearSort()},doLayout:()=>{n.value&&t.updateElsHeight(),t.updateColumnsWidth()},sort:(t,n)=>{e.commit("sort",{prop:t,order:n})}}}(n,l,a),{isHidden:h,renderExpanded:v,setDragVisible:m,isGroup:g,handleMouseLeave:b,handleHeaderFooterMousewheel:y,tableSize:x,bodyHeight:k,emptyBlockStyle:w,handleFixedMousewheel:C,fixedHeight:_,fixedBodyHeight:A,resizeProxyVisible:S,bodyWidth:E,resizeState:M,scrollPosition:O}=function(e,t,n,l,a){const o=tt(!1),r=tt(null),i=tt(!1),s=tt({width:null,height:null}),u=tt(!1),c=tt("left");Cn((()=>{t.setHeight(e.height)})),Cn((()=>{t.setMaxHeight(e.maxHeight)})),Cn((()=>{n.states.rowKey.value&&n.setCurrentRowKey(e.currentRowKey)})),An((()=>e.data),(()=>{l.store.commit("setData",e.data)}),{immediate:!0}),Cn((()=>{e.expandRowKeys&&n.setExpandRowKeysAdapter(e.expandRowKeys)}));const d=ua((()=>e.height||e.maxHeight||n.states.fixedColumns.value.length>0||n.states.rightFixedColumns.value.length>0));mn((()=>{f(),n.updateColumns(),a(),s.value={width:l.vnode.el.offsetWidth,height:l.vnode.el.offsetHeight},n.states.columns.value.forEach((e=>{e.filteredValue&&e.filteredValue.length&&l.store.commit("filterChange",{column:e,values:e.filteredValue,silent:!0})})),l.$ready=!0}));const p=Xr()((function(){const{scrollLeft:e,scrollTop:t,offsetWidth:n,scrollWidth:a}=l.refs.bodyWrapper,{headerWrapper:o,footerWrapper:r,fixedBodyWrapper:i,rightFixedBodyWrapper:s}=l.refs;o&&(o.scrollLeft=e),r&&(r.scrollLeft=e),i&&(i.scrollTop=t),s&&(s.scrollTop=t);const u=a-n-1;c.value=e>=u?"right":0===e?"left":"middle"}),10),f=()=>{l.refs.bodyWrapper.addEventListener("scroll",p,{passive:!0}),e.fit&&xu(l.vnode.el,v)};xn((()=>{h()}));const h=()=>{var t;null===(t=l.refs.bodyWrapper)||void 0===t||t.removeEventListener("scroll",p,!0),e.fit&&ku(l.vnode.el,v)},v=()=>{if(!l.$ready)return;let t=!1;const n=l.vnode.el,{width:o,height:r}=s.value,i=n.offsetWidth;o!==i&&(t=!0);const u=n.offsetHeight;(e.height||d.value)&&r!==u&&(t=!0),t&&(s.value={width:i,height:u},a())},m=ua((()=>e.size)),g=ua((()=>{const{bodyWidth:e,scrollY:n,gutterWidth:l}=t;return e.value?e.value-(n.value?l:0)+"px":""}));return{isHidden:o,renderExpanded:r,setDragVisible:e=>{i.value=e},isGroup:u,handleMouseLeave:()=>{l.store.commit("setHoverRow",null),l.hoverState&&(l.hoverState=null)},handleHeaderFooterMousewheel:(e,t)=>{const{pixelX:n,pixelY:a}=t;Math.abs(n)>=Math.abs(a)&&(l.refs.bodyWrapper.scrollLeft+=t.pixelX/5)},tableSize:m,bodyHeight:ua((()=>{const n=t.headerHeight.value||0,l=t.bodyHeight.value,a=t.footerHeight.value||0;if(e.height)return{height:l?l+"px":""};if(e.maxHeight){const t=og(e.maxHeight);if("number"==typeof t)return{"max-height":t-a-(e.showHeader?n:0)+"px"}}return{}})),emptyBlockStyle:ua((()=>{if(e.data&&e.data.length)return null;let n="100%";return t.appendHeight.value&&(n=`calc(100% - ${t.appendHeight.value}px)`),{width:g.value,height:n}})),handleFixedMousewheel:(e,t)=>{const n=l.refs.bodyWrapper;if(Math.abs(t.spinY)>0){const l=n.scrollTop;t.pixelY<0&&0!==l&&e.preventDefault(),t.pixelY>0&&n.scrollHeight-n.clientHeight>l&&e.preventDefault(),n.scrollTop+=Math.ceil(t.pixelY/5)}else n.scrollLeft+=Math.ceil(t.pixelX/5)},fixedHeight:ua((()=>e.maxHeight?e.showSummary?{bottom:0}:{bottom:t.scrollX.value&&e.data.length?t.gutterWidth+"px":""}:e.showSummary?{height:t.tableHeight.value?t.tableHeight.value+"px":""}:{height:t.viewportHeight.value?t.viewportHeight.value+"px":""})),fixedBodyHeight:ua((()=>{if(e.height)return{height:t.fixedBodyHeight.value?t.fixedBodyHeight.value+"px":""};if(e.maxHeight){let n=og(e.maxHeight);if("number"==typeof n)return n=t.scrollX.value?n-t.gutterWidth:n,e.showHeader&&(n-=t.headerHeight.value),n-=t.footerHeight.value,{"max-height":n+"px"}}return{}})),resizeProxyVisible:i,bodyWidth:g,resizeState:s,scrollPosition:c}}(e,l,n,t,p),D=ko()((()=>p()),50),T="el-table_"+Cg++;return t.tableId=T,t.state={isGroup:g,resizeState:M,doLayout:p,debouncedUpdateLayout:D},{layout:l,store:n,handleHeaderFooterMousewheel:y,handleMouseLeave:b,tableId:T,tableSize:x,isHidden:h,renderExpanded:v,resizeProxyVisible:S,resizeState:M,isGroup:g,scrollPosition:O,bodyWidth:E,bodyHeight:k,emptyBlockStyle:w,debouncedUpdateLayout:D,handleFixedMousewheel:C,fixedHeight:_,fixedBodyHeight:A,setCurrentRow:o,toggleRowSelection:r,clearSelection:i,clearFilter:s,toggleAllSelection:u,toggleRowExpansion:c,clearSort:d,doLayout:p,sort:f,t:vc,setDragVisible:m,context:t}}});const Ag={ref:"hiddenColumns",class:"hidden-columns"},Sg={key:0,ref:"headerWrapper",class:"el-table__header-wrapper"},Eg={class:"el-table__empty-text"},Mg={key:1,ref:"appendWrapper",class:"el-table__append-wrapper"},Og={key:1,ref:"footerWrapper",class:"el-table__footer-wrapper"},Dg={key:0,ref:"fixedHeaderWrapper",class:"el-table__fixed-header-wrapper"},Tg={key:1,ref:"fixedFooterWrapper",class:"el-table__fixed-footer-wrapper"},Ng={key:0,ref:"rightFixedHeaderWrapper",class:"el-table__fixed-header-wrapper"},Bg={key:1,ref:"rightFixedFooterWrapper",class:"el-table__fixed-footer-wrapper"},Pg={ref:"resizeProxy",class:"el-table__column-resize-proxy"};_g.render=function(e,t,n,l,a,o){const r=pl("table-header"),i=pl("table-body"),s=pl("table-footer"),u=hl("mousewheel");return Cl(),Al("div",{class:[[{"el-table--fit":e.fit,"el-table--striped":e.stripe,"el-table--border":e.border||e.isGroup,"el-table--hidden":e.isHidden,"el-table--group":e.isGroup,"el-table--fluid-height":e.maxHeight,"el-table--scrollable-x":e.layout.scrollX.value,"el-table--scrollable-y":e.layout.scrollY.value,"el-table--enable-row-hover":!e.store.states.isComplex.value,"el-table--enable-row-transition":0!==(e.store.states.data.value||[]).length&&(e.store.states.data.value||[]).length<100},e.tableSize?"el-table--"+e.tableSize:""],"el-table"],onMouseleave:t[1]||(t[1]=t=>e.handleMouseLeave())},[Tl("div",Ag,[Zt(e.$slots,"default")],512),e.showHeader?Un((Cl(),Al("div",Sg,[Tl(r,{ref:"tableHeader",border:e.border,"default-sort":e.defaultSort,store:e.store,style:{width:e.layout.bodyWidth.value?e.layout.bodyWidth.value+"px":""},onSetDragVisible:e.setDragVisible},null,8,["border","default-sort","store","style","onSetDragVisible"])],512)),[[u,e.handleHeaderFooterMousewheel]]):Pl("v-if",!0),Tl("div",{ref:"bodyWrapper",class:[[e.layout.scrollX.value?"is-scrolling-"+e.scrollPosition:"is-scrolling-none"],"el-table__body-wrapper"],style:[e.bodyHeight]},[Tl(i,{context:e.context,highlight:e.highlightCurrentRow,"row-class-name":e.rowClassName,"row-style":e.rowStyle,store:e.store,stripe:e.stripe,style:{width:e.bodyWidth}},null,8,["context","highlight","row-class-name","row-style","store","stripe","style"]),e.data&&0!==e.data.length?Pl("v-if",!0):(Cl(),Al("div",{key:0,ref:"emptyBlock",style:e.emptyBlockStyle,class:"el-table__empty-block"},[Tl("span",Eg,[Zt(e.$slots,"empty",{},(()=>[Bl(d(e.emptyText||e.t("el.table.emptyText")),1)]))])],4)),e.$slots.append?(Cl(),Al("div",Mg,[Zt(e.$slots,"append")],512)):Pl("v-if",!0)],6),e.showSummary?Un((Cl(),Al("div",Og,[Tl(s,{border:e.border,"default-sort":e.defaultSort,store:e.store,style:{width:e.layout.bodyWidth.value?e.layout.bodyWidth.value+"px":""},"sum-text":e.sumText||e.t("el.table.sumText"),"summary-method":e.summaryMethod},null,8,["border","default-sort","store","style","sum-text","summary-method"])],512)),[[ho,e.data&&e.data.length>0],[u,e.handleHeaderFooterMousewheel]]):Pl("v-if",!0),e.store.states.fixedColumns.value.length>0?Un((Cl(),Al("div",{key:2,ref:"fixedWrapper",style:[{width:e.layout.fixedWidth.value?e.layout.fixedWidth.value+"px":""},e.fixedHeight],class:"el-table__fixed"},[e.showHeader?(Cl(),Al("div",Dg,[Tl(r,{ref:"fixedTableHeader",border:e.border,store:e.store,style:{width:e.bodyWidth},fixed:"left",onSetDragVisible:e.setDragVisible},null,8,["border","store","style","onSetDragVisible"])],512)):Pl("v-if",!0),Tl("div",{ref:"fixedBodyWrapper",style:[{top:e.layout.headerHeight.value+"px"},e.fixedBodyHeight],class:"el-table__fixed-body-wrapper"},[Tl(i,{highlight:e.highlightCurrentRow,"row-class-name":e.rowClassName,"row-style":e.rowStyle,store:e.store,stripe:e.stripe,style:{width:e.bodyWidth},fixed:"left"},null,8,["highlight","row-class-name","row-style","store","stripe","style"]),e.$slots.append?(Cl(),Al("div",{key:0,style:{height:e.layout.appendHeight.value+"px"},class:"el-table__append-gutter"},null,4)):Pl("v-if",!0)],4),e.showSummary?Un((Cl(),Al("div",Tg,[Tl(s,{border:e.border,store:e.store,style:{width:e.bodyWidth},"sum-text":e.sumText||e.t("el.table.sumText"),"summary-method":e.summaryMethod,fixed:"left"},null,8,["border","store","style","sum-text","summary-method"])],512)),[[ho,e.data&&e.data.length>0]]):Pl("v-if",!0)],4)),[[u,e.handleFixedMousewheel]]):Pl("v-if",!0),e.store.states.rightFixedColumns.value.length>0?Un((Cl(),Al("div",{key:3,ref:"rightFixedWrapper",style:[{width:e.layout.rightFixedWidth.value?e.layout.rightFixedWidth.value+"px":"",right:e.layout.scrollY.value?(e.border?e.layout.gutterWidth:e.layout.gutterWidth||0)+"px":""},e.fixedHeight],class:"el-table__fixed-right"},[e.showHeader?(Cl(),Al("div",Ng,[Tl(r,{ref:"rightFixedTableHeader",border:e.border,store:e.store,style:{width:e.bodyWidth},fixed:"right",onSetDragVisible:e.setDragVisible},null,8,["border","store","style","onSetDragVisible"])],512)):Pl("v-if",!0),Tl("div",{ref:"rightFixedBodyWrapper",style:[{top:e.layout.headerHeight.value+"px"},e.fixedBodyHeight],class:"el-table__fixed-body-wrapper"},[Tl(i,{highlight:e.highlightCurrentRow,"row-class-name":e.rowClassName,"row-style":e.rowStyle,store:e.store,stripe:e.stripe,style:{width:e.bodyWidth},fixed:"right"},null,8,["highlight","row-class-name","row-style","store","stripe","style"]),e.$slots.append?(Cl(),Al("div",{key:0,style:{height:e.layout.appendHeight.value+"px"},class:"el-table__append-gutter"},null,4)):Pl("v-if",!0)],4),e.showSummary?Un((Cl(),Al("div",Bg,[Tl(s,{border:e.border,store:e.store,style:{width:e.bodyWidth},"sum-text":e.sumText||e.t("el.table.sumText"),"summary-method":e.summaryMethod,fixed:"right"},null,8,["border","store","style","sum-text","summary-method"])],512)),[[ho,e.data&&e.data.length>0]]):Pl("v-if",!0)],4)),[[u,e.handleFixedMousewheel]]):Pl("v-if",!0),e.store.states.rightFixedColumns.value.length>0?(Cl(),Al("div",{key:4,ref:"rightFixedPatch",style:{width:e.layout.scrollY.value?e.layout.gutterWidth+"px":"0",height:e.layout.headerHeight.value+"px"},class:"el-table__fixed-right-patch"},null,4)):Pl("v-if",!0),Un(Tl("div",Pg,null,512),[[ho,e.resizeProxyVisible]])],34)},_g.__file="packages/table/src/table.vue",_g.install=e=>{e.component(_g.name,_g)};const Vg={default:{order:""},selection:{width:48,minWidth:48,realWidth:48,order:"",className:"el-table-column--selection"},expand:{width:48,minWidth:48,realWidth:48,order:""},index:{width:48,minWidth:48,realWidth:48,order:""}},Ig={selection:{renderHeader:function({store:e}){const t=e;return ca(fd,{disabled:t.states.data.value&&0===t.states.data.value.length,indeterminate:t.states.selection.value.length>0&&!t.states.isAllSelected.value,onClick:t.toggleAllSelection,modelValue:t.states.isAllSelected.value})},renderCell:function({row:e,column:t,store:n,$index:l}){return ca(fd,{disabled:!!t.selectable&&!t.selectable.call(null,e,l),onInput:()=>{n.commit("rowSelectedChanged",e)},nativeOnClick:e=>e.stopPropagation(),modelValue:n.isSelected(e)})},sortable:!1,resizable:!1},index:{renderHeader:function({column:e}){return e.label||"#"},renderCell:function({column:e,$index:t}){let n=t+1;const l=e.index;return"number"==typeof l?n=t+l:"function"==typeof l&&(n=l(t)),ca("div",{},[n])},sortable:!1},expand:{renderHeader:function({column:e}){return e.label||""},renderCell:function({row:e,store:t}){const n=t,l=e,a=["el-table__expand-icon"];return n.states.expandRows.value.indexOf(l)>-1&&a.push("el-table__expand-icon--expanded"),ca("div",{class:a,onClick:function(e){e.stopPropagation(),n.toggleRowExpansion(l)}},[ca("i",{class:"el-icon el-icon-arrow-right"})])},sortable:!1,resizable:!1,className:"el-table__expand-column"}};function Lg({row:e,column:t,$index:n}){const l=t.property,a=l&&us(e,l,!1).v;return t&&t.formatter?t.formatter(e,t,a,n):a}let zg=1;var Fg=Qn({name:"ElTableColumn",components:{ElCheckbox:fd},props:{type:{type:String,default:"default"},label:String,className:String,labelClassName:String,property:String,prop:String,width:{type:[Object,Number,String],default:()=>({})},minWidth:{type:[Object,Number,String],default:()=>({})},renderHeader:Function,sortable:{type:[Boolean,String],default:!1},sortMethod:Function,sortBy:[String,Function,Array],resizable:{type:Boolean,default:!0},columnKey:String,align:String,headerAlign:String,showTooltipWhenOverflow:Boolean,showOverflowTooltip:Boolean,fixed:[Boolean,String],formatter:Function,selectable:Function,reserveSelection:Boolean,filterMethod:Function,filteredValue:Array,filters:Array,filterPlacement:String,filterMultiple:{type:Boolean,default:!0},index:[Number,Function],sortOrders:{type:Array,default:()=>["ascending","descending",null],validator:e=>e.every((e=>["ascending","descending",null].indexOf(e)>-1))}},setup(e,{slots:t}){const n=la(),l=tt({}),a=e,o=ua((()=>{let e=n.parent;for(;e&&!e.tableId;)e=e.parent;return e})),{registerNormalWatchers:r,registerComplexWatchers:i}=function(e,t){const n=la();return{registerComplexWatchers:()=>{const l={realWidth:"width",realMinWidth:"minWidth"},a=["fixed"].reduce(((e,t)=>(e[t]=t,e)),l);Object.keys(a).forEach((a=>{const o=l[a];t.hasOwnProperty(o)&&An((()=>t[o]),(t=>{n.columnConfig.value[o]=t;const l="fixed"===o;e.value.store.scheduleLayout(l)}))}))},registerNormalWatchers:()=>{const e={prop:"property",realAlign:"align",realHeaderAlign:"headerAlign"},l=["label","property","filters","filterMultiple","sortable","index","formatter","className","labelClassName","showOverflowTooltip"].reduce(((e,t)=>(e[t]=t,e)),e);Object.keys(l).forEach((l=>{const a=e[l];t.hasOwnProperty(a)&&An((()=>t[a]),(e=>{n.columnConfig.value[a]=e}))}))}}}(o,a),{columnId:s,isSubColumn:u,realHeaderAlign:c,columnOrTableParent:d,setColumnWidth:p,setColumnForcedProps:f,setColumnRenders:h,getPropsData:v,getColumnElIndex:m,realAlign:g}=function(e,t,n){const l=la(),a=tt(""),o=tt(!1),r=tt(),i=tt();Cn((()=>{r.value=e.align?"is-"+e.align:null,r.value})),Cn((()=>{i.value=e.headerAlign?"is-"+e.headerAlign:r.value,i.value}));const s=ua((()=>{let e=l.vnode.vParent||l.parent;for(;e&&!e.tableId&&!e.columnId;)e=e.vnode.vParent||e.parent;return e})),u=tt(ag(e.width)),c=tt((void 0!==(d=e.minWidth)&&(d=ag(d),isNaN(d)&&(d=80)),d));var d;return{columnId:a,realAlign:r,isSubColumn:o,realHeaderAlign:i,columnOrTableParent:s,setColumnWidth:e=>(u.value&&(e.width=u.value),c.value&&(e.minWidth=c.value),e.minWidth||(e.minWidth=80),e.realWidth=void 0===e.width?e.minWidth:e.width,e),setColumnForcedProps:e=>{const t=e.type,n=Ig[t]||{};return Object.keys(n).forEach((t=>{const l=n[t];void 0!==l&&(e[t]="className"===t?`${e[t]} ${l}`:l)})),e},setColumnRenders:a=>{e.renderHeader?console.warn("[Element Warn][TableColumn]Comparing to render-header, scoped-slot header is easier to use. We recommend users to use scoped-slot header."):"selection"!==a.type&&(a.renderHeader=e=>{l.columnConfig.value.label;const n=t.header;return n?n(e):a.label});let o=a.renderCell;return"expand"===a.type?(a.renderCell=e=>ca("div",{class:"cell"},[o(e)]),n.value.renderExpanded=e=>t.default?t.default(e):t.default):(o=o||Lg,a.renderCell=e=>{let n=null;n=t.default?t.default(e):o(e);const r=function({row:e,treeNode:t,store:n}){const l=e,a=n,o=t;if(!o)return null;const r=[],i=function(e){e.stopPropagation(),a.loadOrToggle(l)};if(o.indent&&r.push(ca("span",{class:"el-table__indent",style:{"padding-left":o.indent+"px"}})),"boolean"!=typeof o.expanded||o.noLazyChildren)r.push(ca("span",{class:"el-table__placeholder"}));else{const e=["el-table__expand-icon",o.expanded?"el-table__expand-icon--expanded":""];let t=["el-icon-arrow-right"];o.loading&&(t=["el-icon-loading"]),r.push(ca("div",{class:e,onClick:i},[ca("i",{class:t})]))}return r}(e),i={class:"cell",style:{}};return a.showOverflowTooltip&&(i.class+=" el-tooltip",i.style={width:(e.column.realWidth||e.column.width)-1+"px"}),(e=>{function t(e){var t;"ElTableColumn"===(null===(t=null==e?void 0:e.type)||void 0===t?void 0:t.name)&&(e.vParent=l)}e instanceof Array?e.forEach((e=>t(e))):t(e)})(n),ca("div",i,[r,n])}),a},getPropsData:(...t)=>t.reduce(((t,n)=>(Array.isArray(n)&&n.forEach((n=>{t[n]=e[n]})),t)),{}),getColumnElIndex:(e,t)=>[].indexOf.call(e,t)}}(a,t,o),b=d.value;s.value=(b.tableId||b.columnId)+"_column_"+zg++,vn((()=>{u.value=o.value!==b;const e=a.type||"default",t=""===a.sortable||a.sortable,n=Object.assign(Object.assign({},Vg[e]),{id:s.value,type:e,property:a.prop||a.property,align:g,headerAlign:c,showOverflowTooltip:a.showOverflowTooltip||a.showTooltipWhenOverflow,filterable:a.filters||a.filterMethod,filteredValue:[],filterPlacement:"",isColumnGroup:!1,filterOpened:!1,sortable:t,index:a.index});let d=v(["columnKey","label","className","labelClassName","type","renderHeader","formatter","fixed","resizable"],["sortMethod","sortBy","sortOrders"],["selectable","reserveSelection"],["filterMethod","filters","filterMultiple","filterOpened","filteredValue","filterPlacement"]);d=function(e,t){const n={};let l;for(l in e)n[l]=e[l];for(l in t)if(lg(t,l)){const e=t[l];void 0!==e&&(n[l]=e)}return n}(n,d),d=function(...e){return 0===e.length?e=>e:1===e.length?e[0]:e.reduce(((e,t)=>(...n)=>e(t(...n))))}(h,p,f)(d),l.value=d,r(),i()})),mn((()=>{var e;const t=d.value,a=u.value?t.vnode.el.children:null===(e=t.refs.hiddenColumns)||void 0===e?void 0:e.children,r=m(a||[],n.vnode.el);o.value.store.commit("insertColumn",l.value,r,u.value?t.columnConfig.value:null)})),n.columnId=s.value,n.columnConfig=l},render(){var e,t;try{return ca("div",null===(t=(e=this.$slots).default)||void 0===t?void 0:t.call(e,{store:{},_self:{},column:{},row:{},$index:-1}))}catch(e){return ca("div")}}});Fg.install=e=>{e.component(Fg.name,Fg)};var $g=Qn({name:"ElTabBar",props:{tabs:{type:Array,default:()=>[]}},setup(e){const t=$l("rootTabs");if(!t)throw new Error("ElTabBar must use with ElTabs");const n=la(),l=()=>{let l={},a=0,o=0;const r=["top","bottom"].includes(t.props.tabPosition)?"width":"height",i="width"===r?"x":"y";e.tabs.every((t=>{var l;let i=null===(l=n.parent.refs)||void 0===l?void 0:l["tab-"+t.paneName];if(!i)return!1;if(t.active){o=i["client"+rs(r)];const t=window.getComputedStyle(i);return"width"===r&&(e.tabs.length>1&&(o-=parseFloat(t.paddingLeft)+parseFloat(t.paddingRight)),a+=parseFloat(t.paddingLeft)),!1}return a+=i["client"+rs(r)],!0}));const s=`translate${rs(i)}(${a}px)`;return l[r]=o+"px",l.transform=s,l.msTransform=s,l.webkitTransform=s,l},a=tt(l());return An((()=>e.tabs),(()=>{Mt((()=>{a.value=l()}))})),{rootTabs:t,barStyle:a}}});$g.render=function(e,t,n,l,a,o){return Cl(),Al("div",{class:["el-tabs__active-bar","is-"+e.rootTabs.props.tabPosition],style:e.barStyle},null,6)},$g.__file="packages/tabs/src/tab-bar.vue";var Rg=Qn({name:"ElTabNav",components:{TabBar:$g},props:{panes:{type:Array,default:()=>[]},currentName:{type:String,default:""},editable:Boolean,onTabClick:{type:Function,default:Ui},onTabRemove:{type:Function,default:Ui},type:{type:String,default:""},stretch:Boolean},setup(){const e=$l("rootTabs");if(!e)throw new Error("ElTabNav must use with ElTabs");const t=tt(!1),n=tt(0),l=tt(!1),a=tt(!0),o=tt(null),r=tt(null),i=tt(null),s=ua((()=>["top","bottom"].includes(e.props.tabPosition)?"width":"height")),u=ua((()=>({transform:`translate${"width"===s.value?"X":"Y"}(-${n.value}px)`}))),c=()=>{if(!t.value)return;const l=r.value,a=i.value.querySelector(".is-active");if(!a)return;const s=o.value,u=["top","bottom"].includes(e.props.tabPosition),c=a.getBoundingClientRect(),d=s.getBoundingClientRect(),p=u?l.offsetWidth-d.width:l.offsetHeight-d.height,f=n.value;let h=f;u?(c.left<d.left&&(h=f-(d.left-c.left)),c.right>d.right&&(h=f+c.right-d.right)):(c.top<d.top&&(h=f-(d.top-c.top)),c.bottom>d.bottom&&(h=f+(c.bottom-d.bottom))),h=Math.max(h,0),n.value=Math.min(h,p)},d=()=>{if(!r.value)return;const e=r.value["offset"+rs(s.value)],l=o.value["offset"+rs(s.value)],a=n.value;if(l<e){const a=n.value;t.value=t.value||{},t.value.prev=a,t.value.next=a+l<e,e-a<l&&(n.value=e-l)}else t.value=!1,a>0&&(n.value=0)},p=()=>{a.value&&(l.value=!0)},f=()=>{const e=document.visibilityState;"hidden"===e?a.value=!1:"visible"===e&&setTimeout((()=>{a.value=!0}),50)},h=()=>{a.value=!1},v=()=>{setTimeout((()=>{a.value=!0}),50)};return bn((()=>{d()})),mn((()=>{xu(i.value,d),As(document,"visibilitychange",f),As(window,"blur",h),As(window,"focus",v),setTimeout((()=>{c()}),0)})),yn((()=>{i.value&&ku(i.value,d),Ss(document,"visibilitychange",f),Ss(window,"blur",h),Ss(window,"focus",v)})),{rootTabs:e,scrollable:t,navOffset:n,isFocus:l,focusable:a,navScroll$:o,nav$:r,el$:i,sizeName:s,navStyle:u,scrollPrev:()=>{const e=o.value["offset"+rs(s.value)],t=n.value;if(!t)return;let l=t>e?t-e:0;n.value=l},scrollNext:()=>{const e=r.value["offset"+rs(s.value)],t=o.value["offset"+rs(s.value)],l=n.value;if(e-l<=t)return;let a=e-l>2*t?l+t:e-t;n.value=a},scrollToActiveTab:c,update:d,changeTab:e=>{const t=e.code;let n,l,a;const{up:o,down:r,left:i,right:s}=Fs;-1!==[o,r,i,s].indexOf(t)&&(a=e.currentTarget.querySelectorAll("[role=tab]"),l=Array.prototype.indexOf.call(a,e.target),n=t===i||t===o?0===l?a.length-1:l-1:l<a.length-1?l+1:0,a[n].focus(),a[n].click(),p())},setFocus:p,removeFocus:()=>{l.value=!1},visibilityChangeHandler:f,windowBlurHandler:h,windowFocusHandler:v}},render(){const{type:e,panes:t,editable:n,stretch:l,onTabClick:a,onTabRemove:o,navStyle:r,scrollable:i,scrollNext:s,scrollPrev:u,changeTab:c,setFocus:d,removeFocus:p,rootTabs:f,isFocus:h}=this,v=i?[ca("span",{class:["el-tabs__nav-prev",i.prev?"":"is-disabled"],onClick:u},[ca("i",{class:"el-icon-arrow-left"})]),ca("span",{class:["el-tabs__nav-next",i.next?"":"is-disabled"],onClick:s},[ca("i",{class:"el-icon-arrow-right"})])]:null,m=t.map(((e,t)=>{var l,r;let i=e.props.name||e.index||""+t;const s=e.isClosable||n;e.index=""+t;const u=s?ca("span",{class:"el-icon-close",onClick:t=>{o(e,t)}}):null,c=(null===(r=(l=e.instance.slots).label)||void 0===r?void 0:r.call(l))||e.props.label,v=e.active?0:-1;return ca("div",{class:{"el-tabs__item":!0,["is-"+f.props.tabPosition]:!0,"is-active":e.active,"is-disabled":e.props.disabled,"is-closable":s,"is-focus":h},id:"tab-"+i,key:"tab-"+i,"aria-controls":"pane-"+i,role:"tab","aria-selected":e.active,ref:"tab-"+i,tabindex:v,onFocus:()=>{d()},onBlur:()=>{p()},onClick:t=>{p(),a(e,i,t)},onKeydown:t=>{!s||t.code!==Fs.delete&&t.code!==Fs.backspace||o(e,t)}},[c,u])}));return ca("div",{ref:"el$",class:["el-tabs__nav-wrap",i?"is-scrollable":"","is-"+f.props.tabPosition]},[v,ca("div",{class:"el-tabs__nav-scroll",ref:"navScroll$"},[ca("div",{class:["el-tabs__nav","is-"+f.props.tabPosition,l&&["top","bottom"].includes(f.props.tabPosition)?"is-stretch":""],ref:"nav$",style:r,role:"tablist",onKeydown:c},[e?null:ca($g,{tabs:t}),m])])])}});Rg.__file="packages/tabs/src/tab-nav.vue";var jg=Qn({name:"ElTabs",components:{TabNav:Rg},props:{type:{type:String,default:""},activeName:{type:String,default:""},closable:Boolean,addable:Boolean,modelValue:{type:String,default:""},editable:Boolean,tabPosition:{type:String,default:"top"},beforeLeave:{type:Function,default:null},stretch:Boolean},emits:["tab-click","edit","tab-remove","tab-add","input","update:modelValue"],setup(e,t){const n=tt(null),l=tt(e.modelValue||e.activeName||"0"),a=tt([]),o=la(),r={};Fl("rootTabs",{props:e,currentName:l}),Fl("updatePaneState",(e=>{r[e.uid]=e})),An((()=>e.activeName),(e=>{c(e)})),An((()=>e.modelValue),(e=>{c(e)})),An(l,(()=>{n.value&&Mt((()=>{n.value.$nextTick((()=>{n.value.scrollToActiveTab()}))})),s(!0)}));const i=(e,t=[])=>(Array.from(e.children||[]).forEach((e=>{let n=e.type;n=n.name||n,"ElTabPane"===n&&e.component?t.push(e.component):n!==gl&&"template"!==n||i(e,t)})),t),s=(e=!1)=>{if(t.slots.default){const t=o.subTree.children,n=Array.from(t).find((({props:e})=>"el-tabs__content"===e.class));if(!n)return;const l=i(n).map((e=>r[e.uid])),s=!(l.length===a.value.length&&l.every(((e,t)=>e.uid===a.value[t].uid)));(e||s)&&(a.value=l)}else 0!==a.value.length&&(a.value=[])},u=e=>{l.value=e,t.emit("input",e),t.emit("update:modelValue",e)},c=t=>{if(l.value!==t&&e.beforeLeave){const a=e.beforeLeave(t,l.value);a&&a.then?a.then((()=>{u(t),n.value&&n.value.removeFocus()}),(()=>{})):!1!==a&&u(t)}else u(t)};return bn((()=>{s()})),mn((()=>{s()})),{nav$:n,handleTabClick:(e,n,l)=>{e.props.disabled||(c(n),t.emit("tab-click",e,l))},handleTabRemove:(e,n)=>{e.props.disabled||(n.stopPropagation(),t.emit("edit",e.props.name,"remove"),t.emit("tab-remove",e.props.name))},handleTabAdd:()=>{t.emit("edit",null,"add"),t.emit("tab-add")},currentName:l,panes:a}},render(){var e;let{type:t,handleTabClick:n,handleTabRemove:l,handleTabAdd:a,currentName:o,panes:r,editable:i,addable:s,tabPosition:u,stretch:c}=this;const d=i||s?ca("span",{class:"el-tabs__new-tab",tabindex:"0",onClick:a,onKeydown:e=>{e.code===Fs.enter&&a()}},[ca("i",{class:"el-icon-plus"})]):null,p=ca("div",{class:["el-tabs__header","is-"+u]},[d,ca(Rg,{currentName:o,editable:i,type:t,panes:r,stretch:c,ref:"nav$",onTabClick:n,onTabRemove:l})]),f=ca("div",{class:"el-tabs__content"},null===(e=this.$slots)||void 0===e?void 0:e.default());return ca("div",{class:{"el-tabs":!0,"el-tabs--card":"card"===t,["el-tabs--"+u]:!0,"el-tabs--border-card":"border-card"===t}},"bottom"!==u?[p,f]:[f,p])}});jg.__file="packages/tabs/src/tabs.vue",jg.install=e=>{e.component(jg.name,jg)};const Hg=e=>{const t=(e||"").split(":");return t.length>=2?{hours:parseInt(t[0],10),minutes:parseInt(t[1],10)}:null},Wg=(e,t)=>{const n=Hg(e),l=Hg(t),a=n.minutes+60*n.hours,o=l.minutes+60*l.hours;return a===o?0:a>o?1:-1},qg=(e,t)=>{const n=Hg(e),l=Hg(t),a={hours:n.hours,minutes:n.minutes};return a.minutes+=l.minutes,a.hours+=l.hours,a.hours+=Math.floor(a.minutes/60),a.minutes=a.minutes%60,(e=>(e.hours<10?"0"+e.hours:e.hours)+":"+(e.minutes<10?"0"+e.minutes:e.minutes))(a)};var Yg=Qn({name:"ElTimeSelect",components:{ElSelect:Fv,ElOption:Lv},model:{prop:"value",event:"change"},props:{modelValue:String,editable:{type:Boolean,default:!0},clearable:{type:Boolean,default:!0},size:{type:String,default:"",validator:e=>!e||-1!==["medium","small","mini"].indexOf(e)},placeholder:{type:String,default:""},start:{type:String,default:"09:00"},end:{type:String,default:"18:00"},step:{type:String,default:"00:30"},minTime:{type:String,default:""},maxTime:{type:String,default:""},name:{type:String,default:""},prefixIcon:{type:String,default:"el-icon-time"},clearIcon:{type:String,default:"el-icon-circle-close"}},emits:["change","blur","focus","update:modelValue"],setup:e=>({value:tt(e.modelValue),items:ua((()=>{const t=[];if(e.start&&e.end&&e.step){let n=e.start;for(;Wg(n,e.end)<=0;)t.push({value:n,disabled:Wg(n,e.minTime||"-1:-1")<=0||Wg(n,e.maxTime||"100:100")>=0}),n=qg(n,e.step)}return t}))})});Yg.render=function(e,t,n,l,a,o){const r=pl("el-option"),i=pl("el-select");return Cl(),Al(i,{modelValue:e.value,"onUpdate:modelValue":t[1]||(t[1]=t=>e.value=t),disabled:!e.editable,clearable:e.clearable,"clear-icon":e.clearIcon,size:e.size,placeholder:e.placeholder,"default-first-option":"",filterable:"",onChange:t[2]||(t[2]=t=>{e.$emit("change",t),e.$emit("update:modelValue",t)}),onBlur:t[3]||(t[3]=t=>e.$emit("blur",t)),onFocus:t[4]||(t[4]=t=>e.$emit("focus",t))},{prefix:en((()=>[Tl("i",{class:"el-input__icon "+e.prefixIcon},null,2)])),default:en((()=>[(Cl(!0),Al(gl,null,da(e.items,(e=>(Cl(),Al(r,{key:e.value,label:e.value,value:e.value,disabled:e.disabled},null,8,["label","value","disabled"])))),128))])),_:1},8,["modelValue","disabled","clearable","clear-icon","size","placeholder"])},Yg.__file="packages/time-select/src/time-select.vue",Yg.install=e=>{e.component(Yg.name,Yg)};var Kg=Qn({name:"ElTimeline",setup:(e,t)=>(Fl("timeline",t),()=>{var e,n;return ca("ul",{class:{"el-timeline":!0}},null===(n=(e=t.slots).default)||void 0===n?void 0:n.call(e))})});Kg.__file="packages/timeline/src/index.vue",Kg.install=e=>{e.component(Kg.name,Kg)};var Ug=Qn({name:"ElTimelineItem",props:{timestamp:{type:String,default:""},hideTimestamp:{type:Boolean,default:!1},placement:{type:String,default:"bottom"},type:{type:String,default:""},color:{type:String,default:""},size:{type:String,default:"normal"},icon:{type:String,default:""}},setup(){$l("timeline")}});const Gg={class:"el-timeline-item"},Xg=Tl("div",{class:"el-timeline-item__tail"},null,-1),Jg={key:1,class:"el-timeline-item__dot"},Zg={class:"el-timeline-item__wrapper"},Qg={key:0,class:"el-timeline-item__timestamp is-top"},eb={class:"el-timeline-item__content"},tb={key:1,class:"el-timeline-item__timestamp is-bottom"};Ug.render=function(e,t,n,l,a,o){return Cl(),Al("li",Gg,[Xg,e.$slots.dot?Pl("v-if",!0):(Cl(),Al("div",{key:0,class:["el-timeline-item__node",["el-timeline-item__node--"+(e.size||""),"el-timeline-item__node--"+(e.type||"")]],style:{backgroundColor:e.color}},[e.icon?(Cl(),Al("i",{key:0,class:["el-timeline-item__icon",e.icon]},null,2)):Pl("v-if",!0)],6)),e.$slots.dot?(Cl(),Al("div",Jg,[Zt(e.$slots,"dot")])):Pl("v-if",!0),Tl("div",Zg,[e.hideTimestamp||"top"!==e.placement?Pl("v-if",!0):(Cl(),Al("div",Qg,d(e.timestamp),1)),Tl("div",eb,[Zt(e.$slots,"default")]),e.hideTimestamp||"bottom"!==e.placement?Pl("v-if",!0):(Cl(),Al("div",tb,d(e.timestamp),1))])])},Ug.__file="packages/timeline/src/item.vue",Ug.install=e=>{e.component(Ug.name,Ug)};var nb=Qn({name:"ElTransferPanel",components:{ElCheckboxGroup:Gd,ElCheckbox:fd,ElInput:cu,OptionContent:({option:e})=>e},props:{data:{type:Array,default:()=>[]},optionRender:Function,placeholder:String,title:String,filterable:Boolean,format:Object,filterMethod:Function,defaultChecked:Array,props:Object},emits:["checked-change"],setup(e,{emit:t,slots:n}){const l=Ye({checked:[],allChecked:!1,query:"",inputHover:!1,checkChangeByUser:!0}),{labelProp:a,keyProp:o,disabledProp:r,filteredData:i,checkedSummary:s,isIndeterminate:u,handleAllCheckedChange:c}=((e,t,n)=>{const l=ua((()=>e.props.label||"label")),a=ua((()=>e.props.key||"key")),o=ua((()=>e.props.disabled||"disabled")),r=ua((()=>e.data.filter((n=>"function"==typeof e.filterMethod?e.filterMethod(t.query,n):(n[l.value]||n[a.value].toString()).toLowerCase().includes(t.query.toLowerCase()))))),i=ua((()=>r.value.filter((e=>!e[o.value])))),s=ua((()=>{const n=t.checked.length,l=e.data.length,{noChecked:a,hasChecked:o}=e.format;return a&&o?n>0?o.replace(/\${checked}/g,n.toString()).replace(/\${total}/g,l.toString()):a.replace(/\${total}/g,l.toString()):`${n}/${l}`})),u=ua((()=>{const e=t.checked.length;return e>0&&e<i.value.length})),c=()=>{const e=i.value.map((e=>e[a.value]));t.allChecked=e.length>0&&e.every((e=>t.checked.includes(e)))};return An((()=>t.checked),((e,l)=>{if(c(),t.checkChangeByUser){const t=e.concat(l).filter((t=>!e.includes(t)||!l.includes(t)));n("checked-change",e,t)}else n("checked-change",e),t.checkChangeByUser=!0})),An(i,(()=>{c()})),An((()=>e.data),(()=>{const e=[],n=r.value.map((e=>e[a.value]));t.checked.forEach((t=>{n.includes(t)&&e.push(t)})),t.checkChangeByUser=!1,t.checked=e})),An((()=>e.defaultChecked),((e,n)=>{if(n&&e.length===n.length&&e.every((e=>n.includes(e))))return;const l=[],o=i.value.map((e=>e[a.value]));e.forEach((e=>{o.includes(e)&&l.push(e)})),t.checkChangeByUser=!1,t.checked=l}),{immediate:!0}),{labelProp:l,keyProp:a,disabledProp:o,filteredData:r,checkableData:i,checkedSummary:s,isIndeterminate:u,updateAllChecked:c,handleAllCheckedChange:e=>{t.checked=e?i.value.map((e=>e[a.value])):[]}}})(e,l,t),d=ua((()=>l.query.length>0&&0===i.value.length)),p=ua((()=>l.query.length>0&&l.inputHover?"circle-close":"search")),f=ua((()=>!!n.default()[0].children.length)),{checked:h,allChecked:v,query:m,inputHover:g,checkChangeByUser:b}=st(l);return{labelProp:a,keyProp:o,disabledProp:r,filteredData:i,checkedSummary:s,isIndeterminate:u,handleAllCheckedChange:c,checked:h,allChecked:v,query:m,inputHover:g,checkChangeByUser:b,hasNoMatch:d,inputIcon:p,hasFooter:f,clearQuery:()=>{"circle-close"===p.value&&(l.query="")},t:vc}}});const lb={class:"el-transfer-panel"},ab={class:"el-transfer-panel__header"},ob={key:0,class:"el-transfer-panel__footer"};nb.render=function(e,t,n,l,a,o){const r=pl("el-checkbox"),i=pl("el-input"),s=pl("option-content"),u=pl("el-checkbox-group");return Cl(),Al("div",lb,[Tl("p",ab,[Tl(r,{modelValue:e.allChecked,"onUpdate:modelValue":t[1]||(t[1]=t=>e.allChecked=t),indeterminate:e.isIndeterminate,onChange:e.handleAllCheckedChange},{default:en((()=>[Bl(d(e.title)+" ",1),Tl("span",null,d(e.checkedSummary),1)])),_:1},8,["modelValue","indeterminate","onChange"])]),Tl("div",{class:["el-transfer-panel__body",e.hasFooter?"is-with-footer":""]},[e.filterable?(Cl(),Al(i,{key:0,modelValue:e.query,"onUpdate:modelValue":t[3]||(t[3]=t=>e.query=t),class:"el-transfer-panel__filter",size:"small",placeholder:e.placeholder,onMouseenter:t[4]||(t[4]=t=>e.inputHover=!0),onMouseleave:t[5]||(t[5]=t=>e.inputHover=!1)},{prefix:en((()=>[Tl("i",{class:["el-input__icon","el-icon-"+e.inputIcon],onClick:t[2]||(t[2]=(...t)=>e.clearQuery(...t))},null,2)])),_:1},8,["modelValue","placeholder"])):Pl("v-if",!0),Un(Tl(u,{modelValue:e.checked,"onUpdate:modelValue":t[6]||(t[6]=t=>e.checked=t),class:[{"is-filterable":e.filterable},"el-transfer-panel__list"]},{default:en((()=>[(Cl(!0),Al(gl,null,da(e.filteredData,(t=>(Cl(),Al(r,{key:t[e.keyProp],class:"el-transfer-panel__item",label:t[e.keyProp],disabled:t[e.disabledProp]},{default:en((()=>[Tl(s,{option:e.optionRender(t)},null,8,["option"])])),_:2},1032,["label","disabled"])))),128))])),_:1},8,["modelValue","class"]),[[ho,!e.hasNoMatch&&e.data.length>0]]),Un(Tl("p",{class:"el-transfer-panel__empty"},d(e.hasNoMatch?e.t("el.transfer.noMatch"):e.t("el.transfer.noData")),513),[[ho,e.hasNoMatch||0===e.data.length]])],2),e.hasFooter?(Cl(),Al("p",ob,[Zt(e.$slots,"default")])):Pl("v-if",!0)])},nb.__file="packages/transfer/src/transfer-panel.vue";const rb="change";var ib=Qn({name:"ElTransfer",components:{TransferPanel:nb,ElButton:sc},props:{data:{type:Array,default:()=>[]},titles:{type:Array,default:()=>[]},buttonTexts:{type:Array,default:()=>[]},filterPlaceholder:{type:String,default:""},filterMethod:Function,leftDefaultChecked:{type:Array,default:()=>[]},rightDefaultChecked:{type:Array,default:()=>[]},renderContent:Function,modelValue:{type:Array,default:()=>[]},format:{type:Object,default:()=>({})},filterable:{type:Boolean,default:!1},props:{type:Object,default:()=>({label:"label",key:"key",disabled:"disabled"})},targetOrder:{type:String,default:"original",validator:e=>["original","push","unshift"].includes(e)}},emits:[tu,rb,"left-check-change","right-check-change"],setup(e,{emit:t,slots:n}){const l=$l("elFormItem",{}),a=Ye({leftChecked:[],rightChecked:[]}),{propsKey:o,sourceData:r,targetData:i}=(e=>{const t=ua((()=>e.props.key)),n=ua((()=>e.data.reduce(((e,n)=>(e[n[t.value]]=n)&&e),{}))),l=ua((()=>e.data.filter((n=>!e.modelValue.includes(n[t.value]))))),a=ua((()=>"original"===e.targetOrder?e.data.filter((n=>e.modelValue.includes(n[t.value]))):e.modelValue.reduce(((e,t)=>{const l=n.value[t];return l&&e.push(l),e}),[])));return{propsKey:t,sourceData:l,targetData:a}})(e),{onSourceCheckedChange:s,onTargetCheckedChange:u}=((e,t)=>({onSourceCheckedChange:(n,l)=>{e.leftChecked=n,void 0!==l&&t("left-check-change",n,l)},onTargetCheckedChange:(n,l)=>{e.rightChecked=n,void 0!==l&&t("right-check-change",n,l)}}))(a,t),{addToLeft:c,addToRight:d}=((e,t,n,l)=>{const a=(e,t,n)=>{l(tu,e),l(rb,e,t,n)};return{addToLeft:()=>{const n=e.modelValue.slice();t.rightChecked.forEach((e=>{const t=n.indexOf(e);t>-1&&n.splice(t,1)})),a(n,"left",t.rightChecked)},addToRight:()=>{let l=e.modelValue.slice();const o=e.data.filter((l=>{const a=l[n.value];return t.leftChecked.includes(a)&&!e.modelValue.includes(a)})).map((e=>e[n.value]));l="unshift"===e.targetOrder?o.concat(l):l.concat(o),a(l,"right",t.leftChecked)}}})(e,a,o,t),p=tt(null),f=tt(null),h=ua((()=>2===e.buttonTexts.length)),v=ua((()=>e.titles[0]||vc("el.transfer.titles.0"))),m=ua((()=>e.titles[1]||vc("el.transfer.titles.1"))),g=ua((()=>e.filterPlaceholder||vc("el.transfer.filterPlaceholder")));An((()=>e.modelValue),(e=>{var t;null===(t=l.formItemMitt)||void 0===t||t.emit("el.form.change",e)}));const b=ua((()=>t=>e.renderContent?e.renderContent(ca,t):n.default?n.default({option:t}):ca("span",t[e.props.label]||t[e.props.key])));return Object.assign(Object.assign({sourceData:r,targetData:i,onSourceCheckedChange:s,onTargetCheckedChange:u,addToLeft:c,addToRight:d},st(a)),{hasButtonTexts:h,leftPanelTitle:v,rightPanelTitle:m,panelFilterPlaceholder:g,clearQuery:e=>{"left"===e?p.value.query="":"right"===e&&(f.value.query="")},optionRender:b})}});const sb={class:"el-transfer"},ub={class:"el-transfer__buttons"},cb=Tl("i",{class:"el-icon-arrow-left"},null,-1),db={key:0},pb={key:0},fb=Tl("i",{class:"el-icon-arrow-right"},null,-1);ib.render=function(e,t,n,l,a,o){const r=pl("transfer-panel"),i=pl("el-button");return Cl(),Al("div",sb,[Tl(r,{ref:"leftPanel",data:e.sourceData,"option-render":e.optionRender,placeholder:e.panelFilterPlaceholder,title:e.leftPanelTitle,filterable:e.filterable,format:e.format,"filter-method":e.filterMethod,"default-checked":e.leftDefaultChecked,props:e.props,onCheckedChange:e.onSourceCheckedChange},{default:en((()=>[Zt(e.$slots,"left-footer")])),_:3},8,["data","option-render","placeholder","title","filterable","format","filter-method","default-checked","props","onCheckedChange"]),Tl("div",ub,[Tl(i,{type:"primary",class:["el-transfer__button",e.hasButtonTexts?"is-with-texts":""],disabled:0===e.rightChecked.length,onClick:e.addToLeft},{default:en((()=>[cb,void 0!==e.buttonTexts[0]?(Cl(),Al("span",db,d(e.buttonTexts[0]),1)):Pl("v-if",!0)])),_:1},8,["class","disabled","onClick"]),Tl(i,{type:"primary",class:["el-transfer__button",e.hasButtonTexts?"is-with-texts":""],disabled:0===e.leftChecked.length,onClick:e.addToRight},{default:en((()=>[void 0!==e.buttonTexts[1]?(Cl(),Al("span",pb,d(e.buttonTexts[1]),1)):Pl("v-if",!0),fb])),_:1},8,["class","disabled","onClick"])]),Tl(r,{ref:"rightPanel",data:e.targetData,"option-render":e.optionRender,placeholder:e.panelFilterPlaceholder,filterable:e.filterable,format:e.format,"filter-method":e.filterMethod,title:e.rightPanelTitle,"default-checked":e.rightDefaultChecked,props:e.props,onCheckedChange:e.onTargetCheckedChange},{default:en((()=>[Zt(e.$slots,"right-footer")])),_:3},8,["data","option-render","placeholder","filterable","format","filter-method","title","default-checked","props","onCheckedChange"])])},ib.__file="packages/transfer/src/index.vue",ib.install=e=>{e.component(ib.name,ib)};const hb="$treeNodeId",vb=function(e,t){t&&!t[hb]&&Object.defineProperty(t,hb,{value:e.id,enumerable:!1,configurable:!1,writable:!1})},mb=function(e,t){return e?t[e]:t[hb]},gb=e=>{let t=!0,n=!0,l=!0;for(let a=0,o=e.length;a<o;a++){const o=e[a];(!0!==o.checked||o.indeterminate)&&(t=!1,o.disabled||(l=!1)),(!1!==o.checked||o.indeterminate)&&(n=!1)}return{all:t,none:n,allWithoutDisable:l,half:!t&&!n}},bb=function(e){if(0===e.childNodes.length)return;const{all:t,none:n,half:l}=gb(e.childNodes);t?(e.checked=!0,e.indeterminate=!1):l?(e.checked=!1,e.indeterminate=!0):n&&(e.checked=!1,e.indeterminate=!1);const a=e.parent;a&&0!==a.level&&(e.store.checkStrictly||bb(a))},yb=function(e,t){const n=e.store.props,l=e.data||{},a=n[t];if("function"==typeof a)return a(l,e);if("string"==typeof a)return l[a];if(void 0===a){const e=l[t];return void 0===e?"":e}};let xb=0;class kb{constructor(e){this.id=xb++,this.text=null,this.checked=!1,this.indeterminate=!1,this.data=null,this.expanded=!1,this.parent=null,this.visible=!0,this.isCurrent=!1,this.canFocus=!1;for(const t in e)e.hasOwnProperty(t)&&(this[t]=e[t]);this.level=0,this.loaded=!1,this.childNodes=[],this.loading=!1,this.parent&&(this.level=this.parent.level+1);const t=this.store;if(!t)throw new Error("[Node]store is required!");t.registerNode(this);const n=t.props;if(n&&void 0!==n.isLeaf){const e=yb(this,"isLeaf");"boolean"==typeof e&&(this.isLeafByUser=e)}if(!0!==t.lazy&&this.data?(this.setData(this.data),t.defaultExpandAll&&(this.expanded=!0,this.canFocus=!0)):this.level>0&&t.lazy&&t.defaultExpandAll&&this.expand(),Array.isArray(this.data)||vb(this,this.data),!this.data)return;const l=t.defaultExpandedKeys,a=t.key;a&&l&&-1!==l.indexOf(this.key)&&this.expand(null,t.autoExpandParent),a&&void 0!==t.currentNodeKey&&this.key===t.currentNodeKey&&(t.currentNode=this,t.currentNode.isCurrent=!0),t.lazy&&t._initDefaultCheckedNode(this),this.updateLeafState(),!this.parent||1!==this.level&&!0!==this.parent.expanded||(this.canFocus=!0)}setData(e){let t;Array.isArray(e)||vb(this,e),this.data=e,this.childNodes=[],t=0===this.level&&this.data instanceof Array?this.data:yb(this,"children")||[];for(let e=0,n=t.length;e<n;e++)this.insertChild({data:t[e]})}get label(){return yb(this,"label")}get key(){const e=this.store.key;return this.data?this.data[e]:null}get disabled(){return yb(this,"disabled")}get nextSibling(){const e=this.parent;if(e){const t=e.childNodes.indexOf(this);if(t>-1)return e.childNodes[t+1]}return null}get previousSibling(){const e=this.parent;if(e){const t=e.childNodes.indexOf(this);if(t>-1)return t>0?e.childNodes[t-1]:null}return null}contains(e,t=!0){return(this.childNodes||[]).some((n=>n===e||t&&n.contains(e)))}remove(){const e=this.parent;e&&e.removeChild(this)}insertChild(e,t,n){if(!e)throw new Error("insertChild error: child is required.");if(!(e instanceof kb)){if(!n){const n=this.getChildren(!0);-1===n.indexOf(e.data)&&(void 0===t||t<0?n.push(e.data):n.splice(t,0,e.data))}Object.assign(e,{parent:this,store:this.store}),e=new kb(e)}e.level=this.level+1,void 0===t||t<0?this.childNodes.push(e):this.childNodes.splice(t,0,e),this.updateLeafState()}insertBefore(e,t){let n;t&&(n=this.childNodes.indexOf(t)),this.insertChild(e,n)}insertAfter(e,t){let n;t&&(n=this.childNodes.indexOf(t),-1!==n&&(n+=1)),this.insertChild(e,n)}removeChild(e){const t=this.getChildren()||[],n=t.indexOf(e.data);n>-1&&t.splice(n,1);const l=this.childNodes.indexOf(e);l>-1&&(this.store&&this.store.deregisterNode(e),e.parent=null,this.childNodes.splice(l,1)),this.updateLeafState()}removeChildByData(e){let t=null;for(let n=0;n<this.childNodes.length;n++)if(this.childNodes[n].data===e){t=this.childNodes[n];break}t&&this.removeChild(t)}expand(e,t){const n=()=>{if(t){let e=this.parent;for(;e.level>0;)e.expanded=!0,e=e.parent}this.expanded=!0,e&&e(),this.childNodes.forEach((e=>{e.canFocus=!0}))};this.shouldLoadData()?this.loadData((e=>{Array.isArray(e)&&(this.checked?this.setChecked(!0,!0):this.store.checkStrictly||bb(this),n())})):n()}doCreateChildren(e,t={}){e.forEach((e=>{this.insertChild(Object.assign({data:e},t),void 0,!0)}))}collapse(){this.expanded=!1,this.childNodes.forEach((e=>{e.canFocus=!1}))}shouldLoadData(){return!0===this.store.lazy&&this.store.load&&!this.loaded}updateLeafState(){if(!0===this.store.lazy&&!0!==this.loaded&&void 0!==this.isLeafByUser)return void(this.isLeaf=this.isLeafByUser);const e=this.childNodes;!this.store.lazy||!0===this.store.lazy&&!0===this.loaded?this.isLeaf=!e||0===e.length:this.isLeaf=!1}setChecked(e,t,n,l){if(this.indeterminate="half"===e,this.checked=!0===e,this.store.checkStrictly)return;if(!this.shouldLoadData()||this.store.checkDescendants){const{all:n,allWithoutDisable:a}=gb(this.childNodes);this.isLeaf||n||!a||(this.checked=!1,e=!1);const o=()=>{if(t){const n=this.childNodes;for(let a=0,o=n.length;a<o;a++){const o=n[a];l=l||!1!==e;const r=o.disabled?o.checked:l;o.setChecked(r,t,!0,l)}const{half:a,all:o}=gb(n);o||(this.checked=o,this.indeterminate=a)}};if(this.shouldLoadData())return void this.loadData((()=>{o(),bb(this)}),{checked:!1!==e});o()}const a=this.parent;a&&0!==a.level&&(n||bb(a))}getChildren(e=!1){if(0===this.level)return this.data;const t=this.data;if(!t)return null;const n=this.store.props;let l="children";return n&&(l=n.children||"children"),void 0===t[l]&&(t[l]=null),e&&!t[l]&&(t[l]=[]),t[l]}updateChildren(){const e=this.getChildren()||[],t=this.childNodes.map((e=>e.data)),n={},l=[];e.forEach(((e,a)=>{const o=e[hb];o&&t.findIndex((e=>e[hb]===o))>=0?n[o]={index:a,data:e}:l.push({index:a,data:e})})),this.store.lazy||t.forEach((e=>{n[e[hb]]||this.removeChildByData(e)})),l.forEach((({index:e,data:t})=>{this.insertChild({data:t},e)})),this.updateLeafState()}loadData(e,t={}){if(!0!==this.store.lazy||!this.store.load||this.loaded||this.loading&&!Object.keys(t).length)e&&e.call(this);else{this.loading=!0;const n=n=>{this.loaded=!0,this.loading=!1,this.childNodes=[],this.doCreateChildren(n,t),this.updateLeafState(),e&&e.call(this,n)};this.store.load(this,n)}}}class wb{constructor(e){this.currentNode=null,this.currentNodeKey=null;for(const t in e)e.hasOwnProperty(t)&&(this[t]=e[t]);this.nodesMap={},this.root=new kb({data:this.data,store:this}),this.lazy&&this.load?(0,this.load)(this.root,(e=>{this.root.doCreateChildren(e),this._initDefaultCheckedNodes()})):this._initDefaultCheckedNodes()}filter(e){const t=this.filterNodeMethod,n=this.lazy,l=function(a){const o=a.root?a.root.childNodes:a.childNodes;if(o.forEach((n=>{n.visible=t.call(n,e,n.data,n),l(n)})),!a.visible&&o.length){let e=!0;e=!o.some((e=>e.visible)),a.root?a.root.visible=!1===e:a.visible=!1===e}e&&(!a.visible||a.isLeaf||n||a.expand())};l(this)}setData(e){e!==this.root.data?(this.root.setData(e),this._initDefaultCheckedNodes()):this.root.updateChildren()}getNode(e){if(e instanceof kb)return e;const t="object"!=typeof e?e:mb(this.key,e);return this.nodesMap[t]||null}insertBefore(e,t){const n=this.getNode(t);n.parent.insertBefore({data:e},n)}insertAfter(e,t){const n=this.getNode(t);n.parent.insertAfter({data:e},n)}remove(e){const t=this.getNode(e);t&&t.parent&&(t===this.currentNode&&(this.currentNode=null),t.parent.removeChild(t))}append(e,t){const n=t?this.getNode(t):this.root;n&&n.insertChild({data:e})}_initDefaultCheckedNodes(){const e=this.defaultCheckedKeys||[],t=this.nodesMap;e.forEach((e=>{const n=t[e];n&&n.setChecked(!0,!this.checkStrictly)}))}_initDefaultCheckedNode(e){-1!==(this.defaultCheckedKeys||[]).indexOf(e.key)&&e.setChecked(!0,!this.checkStrictly)}setDefaultCheckedKey(e){e!==this.defaultCheckedKeys&&(this.defaultCheckedKeys=e,this._initDefaultCheckedNodes())}registerNode(e){const t=this.key;e&&e.data&&(t?void 0!==e.key&&(this.nodesMap[e.key]=e):this.nodesMap[e.id]=e)}deregisterNode(e){this.key&&e&&e.data&&(e.childNodes.forEach((e=>{this.deregisterNode(e)})),delete this.nodesMap[e.key])}getCheckedNodes(e=!1,t=!1){const n=[],l=function(a){(a.root?a.root.childNodes:a.childNodes).forEach((a=>{(a.checked||t&&a.indeterminate)&&(!e||e&&a.isLeaf)&&n.push(a.data),l(a)}))};return l(this),n}getCheckedKeys(e=!1){return this.getCheckedNodes(e).map((e=>(e||{})[this.key]))}getHalfCheckedNodes(){const e=[],t=function(n){(n.root?n.root.childNodes:n.childNodes).forEach((n=>{n.indeterminate&&e.push(n.data),t(n)}))};return t(this),e}getHalfCheckedKeys(){return this.getHalfCheckedNodes().map((e=>(e||{})[this.key]))}_getAllNodes(){const e=[],t=this.nodesMap;for(const n in t)t.hasOwnProperty(n)&&e.push(t[n]);return e}updateChildren(e,t){const n=this.nodesMap[e];if(!n)return;const l=n.childNodes;for(let e=l.length-1;e>=0;e--){const t=l[e];this.remove(t.data)}for(let e=0,l=t.length;e<l;e++){const l=t[e];this.append(l,n.data)}}_setCheckedKeys(e,t=!1,n){const l=this._getAllNodes().sort(((e,t)=>t.level-e.level)),a=Object.create(null),o=Object.keys(n);l.forEach((e=>e.setChecked(!1,!1)));for(let n=0,r=l.length;n<r;n++){const r=l[n],i=r.data[e].toString();if(!(o.indexOf(i)>-1)){r.checked&&!a[i]&&r.setChecked(!1,!1);continue}let s=r.parent;for(;s&&s.level>0;)a[s.data[e]]=!0,s=s.parent;if(r.isLeaf||this.checkStrictly)r.setChecked(!0,!1);else if(r.setChecked(!0,!0),t){r.setChecked(!1,!1);const e=function(t){t.childNodes.forEach((t=>{t.isLeaf||t.setChecked(!1,!1),e(t)}))};e(r)}}}setCheckedNodes(e,t=!1){const n=this.key,l={};e.forEach((e=>{l[(e||{})[n]]=!0})),this._setCheckedKeys(n,t,l)}setCheckedKeys(e,t=!1){this.defaultCheckedKeys=e;const n=this.key,l={};e.forEach((e=>{l[e]=!0})),this._setCheckedKeys(n,t,l)}setDefaultExpandedKeys(e){e=e||[],this.defaultExpandedKeys=e,e.forEach((e=>{const t=this.getNode(e);t&&t.expand(null,this.autoExpandParent)}))}setChecked(e,t,n){const l=this.getNode(e);l&&l.setChecked(!!t,n)}getCurrentNode(){return this.currentNode}setCurrentNode(e){const t=this.currentNode;t&&(t.isCurrent=!1),this.currentNode=e,this.currentNode.isCurrent=!0}setUserCurrentNode(e){const t=e[this.key],n=this.nodesMap[t];this.setCurrentNode(n)}setCurrentNodeKey(e){if(null==e)return this.currentNode&&(this.currentNode.isCurrent=!1),void(this.currentNode=null);const t=this.getNode(e);t&&this.setCurrentNode(t)}}var Cb=Qn({name:"ElTreeNodeContent",props:{node:{type:Object,required:!0},renderContent:Function},setup(e){const t=$l("NodeInstance"),n=$l("RootTree");return()=>{const l=e.node,{data:a,store:o}=l;return e.renderContent?e.renderContent(ca,{_self:t,node:l,data:a,store:o}):n.ctx.slots.default?n.ctx.slots.default({node:l,data:a}):ca("span",{class:"el-tree-node__label"},[l.label])}}});function _b(e){const t=$l("TreeNodeMap",null),n={treeNodeExpand:t=>{e.node!==t&&e.node.collapse()},children:[]};return t&&t.children.push(n),Fl("TreeNodeMap",n),{broadcastExpanded:t=>{if(e.accordion)for(const e of n.children)e.treeNodeExpand(t)}}}Cb.__file="packages/tree/src/tree-node-content.vue";var Ab=Qn({name:"ElTreeNode",components:{ElCollapseTransition:ep,ElCheckbox:fd,NodeContent:Cb},props:{node:{type:kb,default:()=>({})},props:{type:Object,default:()=>({})},renderContent:Function,renderAfterExpand:Boolean,showCheckbox:{type:Boolean,default:!1}},emits:["node-expand"],setup(e,t){const{broadcastExpanded:n}=_b(e),l=$l("RootTree"),a=tt(!1),o=tt(!1),r=tt(null),i=tt(null),s=tt(null),{emitter:u}={emitter:$l("DragNodeEmitter")},c=la();Fl("NodeInstance",c),l||console.warn("Can not find node's tree."),e.node.expanded&&(a.value=!0,o.value=!0);const d=l.props.children||"children";An((()=>e.node.data[d]),(()=>{e.node.updateChildren()})),An((()=>e.node.indeterminate),(t=>{p(e.node.checked,t)})),An((()=>e.node.checked),(t=>{p(t,e.node.indeterminate)})),An((()=>e.node.expanded),(e=>{Mt((()=>a.value=e)),e&&(o.value=!0)}));const p=(t,n)=>{r.value!==t&&i.value!==n&&l.ctx.emit("check-change",e.node.data,t,n),r.value=t,i.value=n},f=()=>{e.node.isLeaf||(a.value?(l.ctx.emit("node-collapse",e.node.data,e.node,c),e.node.collapse()):(e.node.expand(),t.emit("node-expand",e.node.data,e.node,c)))},h=(t,n)=>{e.node.setChecked(n.target.checked,!l.props.checkStrictly),Mt((()=>{const t=l.store.value;l.ctx.emit("check",e.node.data,{checkedNodes:t.getCheckedNodes(),checkedKeys:t.getCheckedKeys(),halfCheckedNodes:t.getHalfCheckedNodes(),halfCheckedKeys:t.getHalfCheckedKeys()})}))};return{node$:s,tree:l,expanded:a,childNodeRendered:o,oldChecked:r,oldIndeterminate:i,emitter:u,parent,getNodeKey:e=>mb(l.props.nodeKey,e.data),handleSelectChange:p,handleClick:()=>{const t=l.store.value;t.setCurrentNode(e.node),l.ctx.emit("current-change",t.currentNode?t.currentNode.data:null,t.currentNode),l.currentNode.value=e.node,l.props.expandOnClickNode&&f(),l.props.checkOnClickNode&&!e.node.disabled&&h(0,{target:{checked:!e.node.checked}}),l.ctx.emit("node-click",e.node.data,e.node,c)},handleContextMenu:t=>{l.instance.vnode.props.onNodeContextmenu&&(t.stopPropagation(),t.preventDefault()),l.ctx.emit("node-contextmenu",t,e.node.data,e.node,c)},handleExpandIconClick:f,handleCheckChange:h,handleChildNodeExpand:(e,t,a)=>{n(t),l.ctx.emit("node-expand",e,t,a)},handleDragStart:t=>{l.props.draggable&&u.emit("tree-node-drag-start",{event:t,treeNode:e})},handleDragOver:t=>{l.props.draggable&&(u.emit("tree-node-drag-over",{event:t,treeNode:{$el:s.value,node:e.node}}),t.preventDefault())},handleDrop:e=>{e.preventDefault()},handleDragEnd:e=>{l.props.draggable&&u.emit("tree-node-drag-end",e)}}}});const Sb={key:1,class:"el-tree-node__loading-icon el-icon-loading"};Ab.render=function(e,t,n,l,a,o){const r=pl("el-checkbox"),i=pl("node-content"),s=pl("el-tree-node"),u=pl("el-collapse-transition");return Un((Cl(),Al("div",{ref:"node$",class:["el-tree-node",{"is-expanded":e.expanded,"is-current":e.node.isCurrent,"is-hidden":!e.node.visible,"is-focusable":!e.node.disabled,"is-checked":!e.node.disabled&&e.node.checked}],role:"treeitem",tabindex:"-1","aria-expanded":e.expanded,"aria-disabled":e.node.disabled,"aria-checked":e.node.checked,draggable:e.tree.props.draggable,"data-key":e.getNodeKey(e.node),onClick:t[3]||(t[3]=co(((...t)=>e.handleClick(...t)),["stop"])),onContextmenu:t[4]||(t[4]=(...t)=>e.handleContextMenu(...t)),onDragstart:t[5]||(t[5]=co(((...t)=>e.handleDragStart(...t)),["stop"])),onDragover:t[6]||(t[6]=co(((...t)=>e.handleDragOver(...t)),["stop"])),onDragend:t[7]||(t[7]=co(((...t)=>e.handleDragEnd(...t)),["stop"])),onDrop:t[8]||(t[8]=co(((...t)=>e.handleDrop(...t)),["stop"]))},[Tl("div",{class:"el-tree-node__content",style:{"padding-left":(e.node.level-1)*e.tree.props.indent+"px"}},[Tl("span",{class:[{"is-leaf":e.node.isLeaf,expanded:!e.node.isLeaf&&e.expanded},"el-tree-node__expand-icon",e.tree.props.iconClass?e.tree.props.iconClass:"el-icon-caret-right"],onClick:t[1]||(t[1]=co(((...t)=>e.handleExpandIconClick(...t)),["stop"]))},null,2),e.showCheckbox?(Cl(),Al(r,{key:0,"model-value":e.node.checked,indeterminate:e.node.indeterminate,disabled:!!e.node.disabled,onClick:t[2]||(t[2]=co((()=>{}),["stop"])),onChange:e.handleCheckChange},null,8,["model-value","indeterminate","disabled","onChange"])):Pl("v-if",!0),e.node.loading?(Cl(),Al("span",Sb)):Pl("v-if",!0),Tl(i,{node:e.node,"render-content":e.renderContent},null,8,["node","render-content"])],4),Tl(u,null,{default:en((()=>[!e.renderAfterExpand||e.childNodeRendered?Un((Cl(),Al("div",{key:0,class:"el-tree-node__children",role:"group","aria-expanded":e.expanded},[(Cl(!0),Al(gl,null,da(e.node.childNodes,(t=>(Cl(),Al(s,{key:e.getNodeKey(t),"render-content":e.renderContent,"render-after-expand":e.renderAfterExpand,"show-checkbox":e.showCheckbox,node:t,onNodeExpand:e.handleChildNodeExpand},null,8,["render-content","render-after-expand","show-checkbox","node","onNodeExpand"])))),128))],8,["aria-expanded"])),[[ho,e.expanded]]):Pl("v-if",!0)])),_:1})],42,["aria-expanded","aria-disabled","aria-checked","draggable","data-key"])),[[ho,e.node.visible]])},Ab.__file="packages/tree/src/tree-node.vue";var Eb=Qn({name:"ElTree",components:{ElTreeNode:Ab},props:{data:{type:Array},emptyText:{type:String,default:()=>vc("el.tree.emptyText")},renderAfterExpand:{type:Boolean,default:!0},nodeKey:String,checkStrictly:Boolean,defaultExpandAll:Boolean,expandOnClickNode:{type:Boolean,default:!0},checkOnClickNode:Boolean,checkDescendants:{type:Boolean,default:!1},autoExpandParent:{type:Boolean,default:!0},defaultCheckedKeys:Array,defaultExpandedKeys:Array,currentNodeKey:[String,Number],renderContent:Function,showCheckbox:{type:Boolean,default:!1},draggable:{type:Boolean,default:!1},allowDrag:Function,allowDrop:Function,props:{type:Object,default:()=>({children:"children",label:"label",disabled:"disabled"})},lazy:{type:Boolean,default:!1},highlightCurrent:Boolean,load:Function,filterNodeMethod:Function,accordion:Boolean,indent:{type:Number,default:18},iconClass:String},emits:["check-change","current-change","node-click","node-contextmenu","node-collapse","node-expand","check","node-drag-start","node-drag-end","node-drop","node-drag-leave","node-drag-enter","node-drag-over"],setup(e,t){const n=tt(new wb({key:e.nodeKey,data:e.data,lazy:e.lazy,props:e.props,load:e.load,currentNodeKey:e.currentNodeKey,checkStrictly:e.checkStrictly,checkDescendants:e.checkDescendants,defaultCheckedKeys:e.defaultCheckedKeys,defaultExpandedKeys:e.defaultExpandedKeys,autoExpandParent:e.autoExpandParent,defaultExpandAll:e.defaultExpandAll,filterNodeMethod:e.filterNodeMethod})),l=tt(n.value.root),a=tt(null),o=tt(null),r=tt(null),{broadcastExpanded:i}=_b(e),{dragState:s}=function({props:e,ctx:t,el$:n,dropIndicator$:l,store:a}){const o=_o();Fl("DragNodeEmitter",o);const r=tt({showDropIndicator:!1,draggingNode:null,dropNode:null,allowDrop:!0,dropType:null});return o.on("tree-node-drag-start",(({event:n,treeNode:l})=>{if(console.log(n,l),"function"==typeof e.allowDrag&&!e.allowDrag(l.node))return n.preventDefault(),!1;n.dataTransfer.effectAllowed="move";try{n.dataTransfer.setData("text/plain","")}catch(e){}r.value.draggingNode=l,t.emit("node-drag-start",l.node,n)})),o.on("tree-node-drag-over",(({event:a,treeNode:o})=>{const i=o,s=r.value.dropNode;s&&s!==i&&Os(s.$el,"is-drop-inner");const u=r.value.draggingNode;if(!u||!i)return;let c=!0,d=!0,p=!0,f=!0;"function"==typeof e.allowDrop&&(c=e.allowDrop(u.node,i.node,"prev"),f=d=e.allowDrop(u.node,i.node,"inner"),p=e.allowDrop(u.node,i.node,"next")),a.dataTransfer.dropEffect=d?"move":"none",(c||d||p)&&s!==i&&(s&&t.emit("node-drag-leave",u.node,s.node,a),t.emit("node-drag-enter",u.node,i.node,a)),(c||d||p)&&(r.value.dropNode=i),i.node.nextSibling===u.node&&(p=!1),i.node.previousSibling===u.node&&(c=!1),i.node.contains(u.node,!1)&&(d=!1),(u.node===i.node||u.node.contains(i.node))&&(c=!1,d=!1,p=!1);const h=i.$el.getBoundingClientRect(),v=n.value.getBoundingClientRect();let m;const g=c?d?.25:p?.45:1:-1,b=p?d?.75:c?.55:0:1;let y=-9999;const x=a.clientY-h.top;m=x<h.height*g?"before":x>h.height*b?"after":d?"inner":"none";const k=i.$el.querySelector(".el-tree-node__expand-icon").getBoundingClientRect(),w=l.value;"before"===m?y=k.top-v.top:"after"===m&&(y=k.bottom-v.top),w.style.top=y+"px",w.style.left=k.right-v.left+"px","inner"===m?Ms(i.$el,"is-drop-inner"):Os(i.$el,"is-drop-inner"),r.value.showDropIndicator="before"===m||"after"===m,r.value.allowDrop=r.value.showDropIndicator||f,r.value.dropType=m,t.emit("node-drag-over",u.node,i.node,a)})),o.on("tree-node-drag-end",(e=>{const{draggingNode:n,dropType:l,dropNode:o}=r.value;if(e.preventDefault(),e.dataTransfer.dropEffect="move",n&&o){const r={data:n.node.data};"none"!==l&&n.node.remove(),"before"===l?o.node.parent.insertBefore(r,o.node):"after"===l?o.node.parent.insertAfter(r,o.node):"inner"===l&&o.node.insertChild(r),"none"!==l&&a.value.registerNode(r),Os(o.$el,"is-drop-inner"),t.emit("node-drag-end",n.node,o.node,l,e),"none"!==l&&t.emit("node-drop",n.node,o.node,l,e)}n&&!o&&t.emit("node-drag-end",n.node,null,l,e),r.value.showDropIndicator=!1,r.value.draggingNode=null,r.value.dropNode=null,r.value.allowDrop=!0})),{dragState:r}}({props:e,ctx:t,el$:o,dropIndicator$:r,store:n});!function({el$:e},t){const n=tt([]),l=tt([]);mn((()=>{o(),As(e.value,"keydown",a)})),yn((()=>{Ss(e.value,"keydown",a)})),bn((()=>{n.value=Array.from(e.value.querySelectorAll("[role=treeitem]")),l.value=Array.from(e.value.querySelectorAll("input[type=checkbox]"))})),An(l,(e=>{e.forEach((e=>{e.setAttribute("tabindex","-1")}))}));const a=l=>{const a=l.target;if(-1===a.className.indexOf("el-tree-node"))return;const o=l.code;n.value=Array.from(e.value.querySelectorAll(".is-focusable[role=treeitem]"));const r=n.value.indexOf(a);let i;if([Fs.up,Fs.down].indexOf(o)>-1){if(l.preventDefault(),o===Fs.up){i=-1===r?0:0!==r?r-1:n.value.length-1;const e=i;for(;!t.value.getNode(n.value[i].dataset.key).canFocus;){if(i--,i===e){i=-1;break}i<0&&(i=n.value.length-1)}}else{i=-1===r?0:r<n.value.length-1?r+1:0;const e=i;for(;!t.value.getNode(n.value[i].dataset.key).canFocus;){if(i++,i===e){i=-1;break}i>=n.value.length&&(i=0)}}-1!==i&&n.value[i].focus()}[Fs.left,Fs.right].indexOf(o)>-1&&(l.preventDefault(),a.click());const s=a.querySelector('[type="checkbox"]');[Fs.enter,Fs.space].indexOf(o)>-1&&s&&(l.preventDefault(),s.click())},o=()=>{var t;n.value=Array.from(e.value.querySelectorAll(".is-focusable[role=treeitem]")),l.value=Array.from(e.value.querySelectorAll("input[type=checkbox]"));const a=e.value.querySelectorAll(".is-checked[role=treeitem]");a.length?a[0].setAttribute("tabindex","0"):null===(t=n.value[0])||void 0===t||t.setAttribute("tabindex","0")}}({el$:o},n);const u=ua((()=>{const{childNodes:e}=l.value;return!e||0===e.length||e.every((({visible:e})=>!e))}));An((()=>e.defaultCheckedKeys),(e=>{n.value.setDefaultCheckedKey(e)})),An((()=>e.defaultExpandedKeys),(e=>{n.value.defaultExpandedKeys=e,n.value.setDefaultExpandedKeys(e)})),An((()=>e.data),(e=>{n.value.setData(e)})),An((()=>e.checkStrictly),(e=>{n.value.checkStrictly=e}));const c=()=>{const e=n.value.getCurrentNode();return e?e.data:null};return Fl("RootTree",{ctx:t,props:e,store:n,root:l,currentNode:a,instance:la()}),{store:n,root:l,currentNode:a,dragState:s,el$:o,dropIndicator$:r,isEmpty:u,filter:t=>{if(!e.filterNodeMethod)throw new Error("[Tree] filterNodeMethod is required when filter");n.value.filter(t)},getNodeKey:t=>mb(e.nodeKey,t.data),getNodePath:t=>{if(!e.nodeKey)throw new Error("[Tree] nodeKey is required in getNodePath");const a=n.value.getNode(t);if(!a)return[];const o=[a.data];let r=a.parent;for(;r&&r!==l.value;)o.push(r.data),r=r.parent;return o.reverse()},getCheckedNodes:(e,t)=>n.value.getCheckedNodes(e,t),getCheckedKeys:e=>n.value.getCheckedKeys(e),getCurrentNode:c,getCurrentKey:()=>{if(!e.nodeKey)throw new Error("[Tree] nodeKey is required in getCurrentKey");const t=c();return t?t[e.nodeKey]:null},setCheckedNodes:(t,l)=>{if(!e.nodeKey)throw new Error("[Tree] nodeKey is required in setCheckedNodes");n.value.setCheckedNodes(t,l)},setCheckedKeys:(t,l)=>{if(!e.nodeKey)throw new Error("[Tree] nodeKey is required in setCheckedKeys");n.value.setCheckedKeys(t,l)},setChecked:(e,t,l)=>{n.value.setChecked(e,t,l)},getHalfCheckedNodes:()=>n.value.getHalfCheckedNodes(),getHalfCheckedKeys:()=>n.value.getHalfCheckedKeys(),setCurrentNode:t=>{if(!e.nodeKey)throw new Error("[Tree] nodeKey is required in setCurrentNode");n.value.setUserCurrentNode(t)},setCurrentKey:t=>{if(!e.nodeKey)throw new Error("[Tree] nodeKey is required in setCurrentKey");n.value.setCurrentNodeKey(t)},getNode:e=>n.value.getNode(e),remove:e=>{n.value.remove(e)},append:(e,t)=>{n.value.append(e,t)},insertBefore:(e,t)=>{n.value.insertBefore(e,t)},insertAfter:(e,t)=>{n.value.insertAfter(e,t)},handleNodeExpand:(e,n,l)=>{i(n),t.emit("node-expand",e,n,l)},updateKeyChildren:(t,l)=>{if(!e.nodeKey)throw new Error("[Tree] nodeKey is required in updateKeyChild");n.value.updateChildren(t,l)}}}});const Mb={key:0,class:"el-tree__empty-block"},Ob={class:"el-tree__empty-text"},Db={ref:"dropIndicator$",class:"el-tree__drop-indicator"};function Tb(e,t,n){let l;l=n.response?""+(n.response.error||n.response):n.responseText?""+n.responseText:`fail to post ${e} ${n.status}`;const a=new Error(l);return a.status=n.status,a.method="post",a.url=e,a}function Nb(e){if("undefined"==typeof XMLHttpRequest)return;const t=new XMLHttpRequest,n=e.action;t.upload&&(t.upload.onprogress=function(t){t.total>0&&(t.percent=t.loaded/t.total*100),e.onProgress(t)});const l=new FormData;e.data&&Object.keys(e.data).forEach((t=>{l.append(t,e.data[t])})),l.append(e.filename,e.file,e.file.name),t.onerror=function(){e.onError(Tb(n,0,t))},t.onload=function(){if(t.status<200||t.status>=300)return e.onError(Tb(n,0,t));e.onSuccess(function(e){const t=e.responseText||e.response;if(!t)return t;try{return JSON.parse(t)}catch(e){return t}}(t))},t.open("post",n,!0),e.withCredentials&&"withCredentials"in t&&(t.withCredentials=!0);const a=e.headers||{};for(const e in a)a.hasOwnProperty(e)&&null!==a[e]&&t.setRequestHeader(e,a[e]);return t.send(l),t}Eb.render=function(e,t,n,l,a,o){const r=pl("el-tree-node");return Cl(),Al("div",{ref:"el$",class:["el-tree",{"el-tree--highlight-current":e.highlightCurrent,"is-dragging":!!e.dragState.draggingNode,"is-drop-not-allow":!e.dragState.allowDrop,"is-drop-inner":"inner"===e.dragState.dropType}],role:"tree"},[(Cl(!0),Al(gl,null,da(e.root.childNodes,(t=>(Cl(),Al(r,{key:e.getNodeKey(t),node:t,props:e.props,"render-after-expand":e.renderAfterExpand,"show-checkbox":e.showCheckbox,"render-content":e.renderContent,onNodeExpand:e.handleNodeExpand},null,8,["node","props","render-after-expand","show-checkbox","render-content","onNodeExpand"])))),128)),e.isEmpty?(Cl(),Al("div",Mb,[Tl("span",Ob,d(e.emptyText),1)])):Pl("v-if",!0),Un(Tl("div",Db,null,512),[[ho,e.dragState.showDropIndicator]])],2)},Eb.__file="packages/tree/src/tree.vue",Eb.install=e=>{e.component(Eb.name,Eb)};var Bb=Qn({name:"ElUploadList",components:{ElProgress:Am},props:{files:{type:Array,default:()=>[]},disabled:{type:Boolean,default:!1},handlePreview:{type:Function,default:()=>Ui},listType:{type:String,default:"text"}},emits:["remove"],setup:(e,{emit:t})=>({focusing:tt(!1),parsePercentage:e=>parseInt(e,10),handleClick:t=>{e.handlePreview(t)},handleRemove:(e,n)=>{t("remove",n)},onFileClicked:e=>{e.target.focus()},t:vc})});const Pb=Tl("i",{class:"el-icon-document"},null,-1),Vb={class:"el-upload-list__item-status-label"},Ib={key:2,class:"el-icon-close-tip"},Lb={key:4,class:"el-upload-list__item-actions"},zb=Tl("i",{class:"el-icon-zoom-in"},null,-1),Fb=Tl("i",{class:"el-icon-delete"},null,-1);Bb.render=function(e,t,n,l,a,o){const r=pl("el-progress");return Cl(),Al(Ga,{tag:"ul",class:["el-upload-list","el-upload-list--"+e.listType,{"is-disabled":e.disabled}],name:"el-list"},{default:en((()=>[(Cl(!0),Al(gl,null,da(e.files,((n,l)=>(Cl(),Al("li",{key:l,class:["el-upload-list__item","is-"+n.status,e.focusing?"focusing":""],tabindex:"0",onKeydown:fo((t=>!e.disabled&&e.handleRemove(t,n)),["delete"]),onFocus:t[1]||(t[1]=t=>e.focusing=!0),onBlur:t[2]||(t[2]=t=>e.focusing=!1),onClick:t[3]||(t[3]=(...t)=>e.onFileClicked(...t))},[Zt(e.$slots,"default",{file:n},(()=>["uploading"!==n.status&&["picture-card","picture"].includes(e.listType)?(Cl(),Al("img",{key:0,class:"el-upload-list__item-thumbnail",src:n.url,alt:""},null,8,["src"])):Pl("v-if",!0),Tl("a",{class:"el-upload-list__item-name",onClick:t=>e.handleClick(n)},[Pb,Bl(d(n.name),1)],8,["onClick"]),Tl("label",Vb,[Tl("i",{class:{"el-icon-upload-success":!0,"el-icon-circle-check":"text"===e.listType,"el-icon-check":["picture-card","picture"].includes(e.listType)}},null,2)]),e.disabled?Pl("v-if",!0):(Cl(),Al("i",{key:1,class:"el-icon-close",onClick:t=>e.handleRemove(t,n)},null,8,["onClick"])),Pl(" Due to close btn only appears when li gets focused disappears after li gets blurred, thus keyboard navigation can never reach close btn"),Pl(" This is a bug which needs to be fixed "),Pl(" TODO: Fix the incorrect navigation interaction "),e.disabled?Pl("v-if",!0):(Cl(),Al("i",Ib,d(e.t("el.upload.deleteTip")),1)),"uploading"===n.status?(Cl(),Al(r,{key:3,type:"picture-card"===e.listType?"circle":"line","stroke-width":"picture-card"===e.listType?6:2,percentage:e.parsePercentage(n.percentage)},null,8,["type","stroke-width","percentage"])):Pl("v-if",!0),"picture-card"===e.listType?(Cl(),Al("span",Lb,[Tl("span",{class:"el-upload-list__item-preview",onClick:t=>e.handlePreview(n)},[zb],8,["onClick"]),e.disabled?Pl("v-if",!0):(Cl(),Al("span",{key:0,class:"el-upload-list__item-delete",onClick:t=>e.handleRemove(t,n)},[Fb],8,["onClick"]))])):Pl("v-if",!0)]))],42,["onKeydown"])))),128))])),_:1},8,["class"])},Bb.__file="packages/upload/src/upload-list.vue";var $b=Qn({name:"ElUploadDrag",props:{disabled:{type:Boolean,default:!1}},emits:["file"],setup(e,{emit:t}){const n=$l("uploader",{}),l=tt(!1);return{dragover:l,onDrop:function(a){if(e.disabled||!n)return;const o=n.accept;l.value=!1,t("file",o?Array.from(a.dataTransfer.files).filter((e=>{const{type:t,name:n}=e,l=n.indexOf(".")>-1?"."+n.split(".").pop():"",a=t.replace(/\/.*$/,"");return o.split(",").map((e=>e.trim())).filter((e=>e)).some((e=>e.startsWith(".")?l===e:/\/\*$/.test(e)?a===e.replace(/\/\*$/,""):!!/^[^\/]+\/[^\/]+$/.test(e)&&t===e))})):a.dataTransfer.files)},onDragover:function(){e.disabled||(l.value=!0)}}}});$b.render=function(e,t,n,l,a,o){return Cl(),Al("div",{class:{"el-upload-dragger":!0,"is-dragover":e.dragover},onDrop:t[1]||(t[1]=co(((...t)=>e.onDrop(...t)),["prevent"])),onDragover:t[2]||(t[2]=co(((...t)=>e.onDragover(...t)),["prevent"])),onDragleave:t[3]||(t[3]=co((t=>e.dragover=!1),["prevent"]))},[Zt(e.$slots,"default")],34)},$b.__file="packages/upload/src/upload-dragger.vue";var Rb=Qn({components:{UploadDragger:$b},props:{type:{type:String,default:""},action:{type:String,required:!0},name:{type:String,default:"file"},data:{type:Object,default:()=>null},headers:{type:Object,default:()=>null},withCredentials:{type:Boolean,default:!1},multiple:{type:Boolean,default:null},accept:{type:String,default:""},onStart:{type:Function,default:Ui},onProgress:{type:Function,default:Ui},onSuccess:{type:Function,default:Ui},onError:{type:Function,default:Ui},beforeUpload:{type:Function,default:Ui},drag:{type:Boolean,default:!1},onPreview:{type:Function,default:Ui},onRemove:{type:Function,default:Ui},fileList:{type:Array,default:()=>[]},autoUpload:{type:Boolean,default:!0},listType:{type:String,default:"text"},httpRequest:{type:Function,default:()=>Nb},disabled:Boolean,limit:{type:Number,default:null},onExceed:{type:Function,default:Ui}},setup(e){const t=tt({}),n=tt(!1),l=tt(null);function a(t){if(e.limit&&e.fileList.length+t.length>e.limit)return void e.onExceed(t,e.fileList);let n=Array.from(t);e.multiple||(n=n.slice(0,1)),0!==n.length&&n.forEach((t=>{e.onStart(t),e.autoUpload&&o(t)}))}function o(t){if(l.value.value=null,!e.beforeUpload)return r(t);const n=e.beforeUpload(t);n instanceof Promise?n.then((e=>{const n=Object.prototype.toString.call(e);if("[object File]"===n||"[object Blob]"===n){"[object Blob]"===n&&(e=new File([e],t.name,{type:t.type}));for(const n in t)t.hasOwnProperty(n)&&(e[n]=t[n]);r(e)}else r(t)})).catch((()=>{e.onRemove(null,t)})):!1!==n?r(t):e.onRemove(null,t)}function r(n){const{uid:l}=n,a={headers:e.headers,withCredentials:e.withCredentials,file:n,data:e.data,filename:e.name,action:e.action,onProgress:t=>{e.onProgress(t,n)},onSuccess:a=>{e.onSuccess(a,n),delete t.value[l]},onError:a=>{e.onError(a,n),delete t.value[l]}},o=e.httpRequest(a);t.value[l]=o,o instanceof Promise&&o.then(a.onSuccess,a.onError)}function i(){e.disabled||(l.value.value=null,l.value.click())}return{reqs:t,mouseover:n,inputRef:l,abort:function(e){const n=t.value;if(e){let t=e;e.uid&&(t=e.uid),n[t]&&n[t].abort()}else Object.keys(n).forEach((e=>{n[e]&&n[e].abort(),delete n[e]}))},post:r,handleChange:function(e){const t=e.target.files;t&&a(t)},handleClick:i,handleKeydown:function(){i()},upload:o,uploadFiles:a}}});function jb(e,t){return t.find((t=>t.uid===e.uid))}function Hb(e){return Date.now()+e}Rb.render=function(e,t,n,l,a,o){const r=pl("upload-dragger");return Cl(),Al("div",{class:["el-upload","el-upload--"+e.listType],tabindex:"0",onClick:t[2]||(t[2]=(...t)=>e.handleClick(...t)),onKeydown:t[3]||(t[3]=fo(co(((...t)=>e.handleKeydown(...t)),["self"]),["enter","space"]))},[e.drag?(Cl(),Al(r,{key:0,disabled:e.disabled,onFile:e.uploadFiles},{default:en((()=>[Zt(e.$slots,"default")])),_:3},8,["disabled","onFile"])):Zt(e.$slots,"default",{key:1}),Tl("input",{ref:"inputRef",class:"el-upload__input",type:"file",name:e.name,multiple:e.multiple,accept:e.accept,onChange:t[1]||(t[1]=(...t)=>e.handleChange(...t))},null,40,["name","multiple","accept"])],34)},Rb.__file="packages/upload/src/upload.vue";var Wb=Qn({name:"ElUpload",components:{Upload:Rb,UploadList:Bb},props:{action:{type:String,required:!0},headers:{type:Object,default:()=>({})},data:{type:Object,default:()=>({})},multiple:{type:Boolean,default:!1},name:{type:String,default:"file"},drag:{type:Boolean,default:!1},withCredentials:Boolean,showFileList:{type:Boolean,default:!0},accept:{type:String,default:""},type:{type:String,default:"select"},beforeUpload:{type:Function,default:Ui},beforeRemove:{type:Function,default:Ui},onRemove:{type:Function,default:Ui},onChange:{type:Function,default:Ui},onPreview:{type:Function,default:Ui},onSuccess:{type:Function,default:Ui},onProgress:{type:Function,default:Ui},onError:{type:Function,default:Ui},fileList:{type:Array,default:()=>[]},autoUpload:{type:Boolean,default:!0},listType:{type:String,default:"text"},httpRequest:{type:Function,default:Nb},disabled:Boolean,limit:{type:Number,default:null},onExceed:{type:Function,default:()=>Ui}},setup(e){const t=$l("elForm",{}),n=ua((()=>e.disabled||t.disabled)),{clearFiles:l,handleError:a,handleProgress:o,handleStart:r,handleSuccess:i,handleRemove:s,submit:u,uploadRef:c,uploadFiles:d}=(e=>{const t=tt([]),n=tt(null);let l=1;return An((()=>e.listType),(n=>{"picture-card"!==n&&"picture"!==n||(t.value=t.value.map((n=>{if(!n.url&&n.raw)try{n.url=URL.createObjectURL(n.raw)}catch(l){e.onError(l,n,t.value)}return n})))})),An((()=>e.fileList),(e=>{t.value=e.map((e=>(e.uid=e.uid||Hb(l++),e.status=e.status||"success",e)))}),{immediate:!0,deep:!0}),{clearFiles:function(){t.value=[]},handleError:function(n,l){const a=jb(l,t.value);a.status="fail",t.value.splice(t.value.indexOf(a),1),e.onError(n,a,t.value),e.onChange(a,t.value)},handleProgress:function(n,l){const a=jb(l,t.value);e.onProgress(n,a,t.value),a.status="uploading",a.percentage=n.percent||0},handleStart:function(n){const a=Hb(l++);n.uid=a;const o={name:n.name,percentage:0,status:"ready",size:n.size,raw:n,uid:a};if("picture-card"===e.listType||"picture"===e.listType)try{o.url=URL.createObjectURL(n)}catch(n){console.error("[Element Error][Upload]",n),e.onError(n,o,t.value)}t.value.push(o),e.onChange(o,t.value)},handleSuccess:function(n,l){const a=jb(l,t.value);a&&(a.status="success",a.response=n,e.onSuccess(n,a,t.value),e.onChange(a,t.value))},handleRemove:function(l,a){a&&(l=jb(a,t.value));const o=()=>{!function(e){n.value.abort(e)}(l);const a=t.value;a.splice(a.indexOf(l),1),e.onRemove(l,a)};if(e.beforeRemove){if("function"==typeof e.beforeRemove){const n=e.beforeRemove(l,t.value);n instanceof Promise?n.then((()=>{o()})).catch(Ui):!1!==n&&o()}}else o()},submit:function(){t.value.filter((e=>"ready"===e.status)).forEach((e=>{n.value.upload(e.raw)}))},uploadFiles:t,uploadRef:n}})(e);return Fl("uploader",la()),yn((()=>{d.value.forEach((e=>{e.url&&0===e.url.indexOf("blob:")&&URL.revokeObjectURL(e.url)}))})),{dragOver:tt(!1),draging:tt(!1),handleError:a,handleProgress:o,handleRemove:s,handleStart:r,handleSuccess:i,uploadDisabled:n,uploadFiles:d,uploadRef:c,submit:u,clearFiles:l}},render(){var e,t;let n;n=this.showFileList?ca(Bb,{disabled:this.uploadDisabled,listType:this.listType,files:this.uploadFiles,onRemove:this.handleRemove,handlePreview:this.onPreview},this.$slots.file?{default:e=>this.$slots.file({file:e.file})}:null):null;const l={type:this.type,drag:this.drag,action:this.action,multiple:this.multiple,"before-upload":this.beforeUpload,"with-credentials":this.withCredentials,headers:this.headers,name:this.name,data:this.data,accept:this.accept,fileList:this.uploadFiles,autoUpload:this.autoUpload,listType:this.listType,disabled:this.uploadDisabled,limit:this.limit,"on-exceed":this.onExceed,"on-start":this.handleStart,"on-progress":this.handleProgress,"on-success":this.handleSuccess,"on-error":this.handleError,"on-preview":this.onPreview,"on-remove":this.handleRemove,"http-request":this.httpRequest,ref:"uploadRef"},a=this.$slots.trigger||this.$slots.default,o=ca(Rb,l,{default:()=>null==a?void 0:a()});return ca("div",["picture-card"===this.listType?n:null,this.$slots.trigger?[o,this.$slots.default()]:o,null===(t=(e=this.$slots).tip)||void 0===t?void 0:t.call(e),"picture-card"!==this.listType?n:null])}});Wb.__file="packages/upload/src/index.vue",Wb.install=e=>{e.component(Wb.name,Wb)};var qb=Qn({name:"ElVirtualListItem",props:{},setup(){const e=tt();return mn((()=>{})),bn((()=>{})),{itemRef:e}}});const Yb=function(e){return t=>en((function(){ln(e);const n=t.apply(this,arguments);return an(),n}))}("data-v-09d1eddb");ln("data-v-09d1eddb");const Kb={ref:"itemRef",class:"el-vl__item"};an();const Ub=Yb(((e,t,n,l,a,o)=>(Cl(),Al("div",Kb,[Zt(e.$slots,"default")],512))));qb.render=Ub,qb.__scopeId="data-v-09d1eddb",qb.__file="packages/virtual-list/src/virtual-item.vue";var Gb=Qn({name:"ElVirtualList",components:{[qb.name]:qb},props:{direction:{type:String,default:"v"},data:{type:Array,required:!0},itemSize:{type:Number,required:!0},windowSize:{type:Number,required:!0},poolSize:{type:Number,default:20}},setup:e=>function(e){const t=tt(),n=tt(0),l=tt(0),a=tt(!0),o=tt(""),r=tt(""),i=tt(),s=tt("");An((()=>e.direction),(e=>{const t="v"===e;a.value=t,o.value="client"+(t?"Height":"Width"),r.value="scroll"+(t?"Top":"Left"),i.value=t?"Y":"X",s.value=t?"height":"width"}),{immediate:!0}),An((()=>e.poolSize),(e=>{l.value=Math.floor(e/3)}),{immediate:!0});const u=ua((()=>e.poolSize+2*ks(l))),c=ua((()=>Math.max(0,Math.floor(ks(n)/e.itemSize)-ks(l)))),d=ua((()=>({[ks(s)]:e.windowSize+"px"}))),p=ua((()=>({[ks(s)]:e.data.length*e.itemSize+"px"}))),f=ua((()=>{const t=ks(c)*e.itemSize;return{transform:`translate${ks(i)}(${t}px)`}})),h=ua((()=>({[ks(s)]:e.itemSize+"px"})));let v=null;const m=ua((()=>{const t=ks(c),n=Math.min(e.data.length-t,ks(u));return e.data.slice(t,t+n)}));return{viewportRef:t,contentStyle:p,itemContainerStyle:f,itemStyle:h,viewportStyle:d,startNode:c,renderingItems:u,window:m,onScroll:e=>{v&&cancelAnimationFrame(v),v=requestAnimationFrame((()=>{n.value=e.target[ks(r)]}))},scrollTo:(l,a="head")=>{if(is)return;let o;switch((l<0||l>e.data.length)&&zs("ElVirtualList]","Out of list range"),a){case"head":o=l*e.itemSize;break;case"center":o=(l-Math.floor(Math.floor(e.windowSize/e.itemSize)/2))*e.itemSize;break;case"tail":o=(l-Math.floor(e.windowSize/e.itemSize)+1)*e.itemSize;break;default:zs("[ElVirtualList]","Unsupported alignment")}requestAnimationFrame((()=>{n.value=o,t.value[ks(r)]=o}))}}}(e)});Gb.render=function(e,t,n,l,a,o){const r=pl("el-virtual-list-item");return Cl(),Al("div",{ref:"viewportRef",class:"el-vl__viewport",style:e.viewportStyle,onScrollPassive:t[1]||(t[1]=(...t)=>e.onScroll(...t))},[Tl("div",{class:"el-vl__content",style:e.contentStyle},[Tl("div",{class:"el-vl__item-container",style:e.itemContainerStyle,"data-direction":e.direction},[(Cl(!0),Al(gl,null,da(e.window,((t,n)=>(Cl(),Al(r,{key:n,class:"el-vl__item",style:e.itemStyle},{default:en((()=>[Zt(e.$slots,"default",{item:t})])),_:2},1032,["style"])))),128))],12,["data-direction"])],4)],36)},Gb.__file="packages/virtual-list/src/index.vue",Gb.install=e=>{e.component(Gb.name,Gb)};const Xb={size:"",zIndex:2e3},Jb=[Wi,Ki,Uu,Ju,Qu,tc,lc,oc,sc,dc,Gc,nd,ad,ud,Wd,$d,fd,Ud,Gd,Jd,Zd,tp,ep,Ap,Np,Tf,Pf,$f,Rf,Yf,Gf,Xf,Jf,ou,Qf,eh,th,bh,cu,Oh,Dh,zh,Wh,Kh,Gh,Lv,Yv,Xv,mm,gm,wm,Ku,Am,bd,Om,Dm,Tm,Nm,Au,Fv,Vm,$m,qm,Ym,Km,Xm,_g,Fg,jg,Rd,jc,Yg,Kg,Ug,Yh,ib,Eb,Wb,Gb],Zb=[Mh,Lh,nv,Sv,Pv],Qb={version:"1.0.1-beta.9",install:(e,t)=>{const n=Object.assign(Xb,t);(e=>{fc=e||fc,fc.name&&Zr().locale(fc.name)})(n.locale),e.config.globalProperties.$ELEMENT=n,(e=>{Nu=e})(n),Jb.forEach((t=>{e.component(t.name,t)})),Zb.forEach((t=>{e.use(t)}))}},ey=Tl("button",{class:"btn"},"点击",-1),ty={name:"HelloWorld",props:{msg:String}};var ny=n(3379),ly=n.n(ny),ay=n(2108);ly()(ay.Z,{insert:"head",singleton:!1}),ay.Z.locals,ty.render=function(e,t,n,l,a,o){return Cl(),Al(gl,null,[Tl("p",null,d(n.msg),1),ey],64)};const oy=ty,ry={class:"main"},iy={class:"side",style:{"-webkit-app-region":"drag"}},sy=Tl("div",{class:"logo",style:{"-webkit-app-region":"drag"}},[Tl("svg",{viewBox:"0 0 1024 1024",width:"50",height:"56"},[Tl("path",{d:"M958.136 192h-432.64l-45.03 174.2-16.166 114.484 86.658 241.69 13.914 293.278h393.266c36.368 0 65.864-29.496 65.864-65.864V257.864C1024 221.496 994.504 192 958.136 192z",fill:"#E6E6E6","p-id":"6311"}),Tl("path",{d:"M737.392 832l-172.522 183.652L503.764 832l24.932-66.958z",fill:"#3A5BBC","p-id":"6312"}),Tl("path",{d:"M939.13 488.348v-41.74h-158.608v-58.434h-41.74v58.434H595.84v41.74h231.78c-12.892 27.144-35.242 70.43-65.956 116.07-28.264-35.298-46.124-59.862-46.336-60.154l-12.258-16.89-33.784 24.51 12.254 16.89c0.954 1.316 21.752 29.926 54.676 70.6-22.444 27.498-63.616 72.212-85.31 93.904l29.512 29.512c18.724-18.724 57.548-60.428 82.852-90.654 32.918 39.106 65.046 74.388 95.708 105.052l14.756 14.756 29.516-29.51-14.756-14.756C856.816 716 823.456 679.15 789.2 638.08c44.266-63.646 72.96-123.912 84.4-149.732h65.53z",fill:"#808080","p-id":"6313"}),Tl("path",{d:"M698.658 715.046L737.392 832H65.864C29.468 832 0 802.504 0 766.136V74.212C0 37.844 29.468 8.348 65.864 8.348h398.832L525.496 192l91.214 275.478 81.948 247.568z",fill:"#518EF8","p-id":"6314"}),Tl("path",{d:"M298.602 574.748c-85.54 0-155.13-69.59-155.13-155.13s69.59-155.13 155.13-155.13c41.408 0 80.364 16.13 109.69 45.424l-29.498 29.532c-21.446-21.42-49.922-33.216-80.194-33.216-62.526 0-113.392 50.866-113.392 113.392s50.866 113.392 113.392 113.392c55.396 0 101.64-39.934 111.466-92.522h-111.462v-41.74h155.13v20.87c-0.002 85.538-69.592 155.128-155.132 155.128z",fill:"#FFFFFF","p-id":"6315"})]),Tl("h1",null,"可视化翻译")],-1),uy={class:"entry"},cy={class:"select-file"},dy=Tl("button",null,"+ 导入语言包",-1),py={class:"catalog"},fy=Tl("h4",null,"模块目录",-1),hy={class:"output"},vy={title:"技术支持"},my=Bl("with "),gy=Bl(" by MuFeng"),by={class:"content"},yy={class:"main-heade"},xy=Bl("中文包"),ky={key:0},wy=Bl(": "),Cy={class:"gray"},_y=Bl(),Ay=Bl("英文包"),Sy={key:0},Ey=Bl(": "),My={class:"gray"},Oy=Bl(),Dy={ref:"pageCon"},Ty={key:0,class:"nodata"},Ny=Bl(" 请先导入语言包文件:"),By=Tl("br",null,null,-1),Py=Tl("span",null,"支持.json，或json格式的(.js/.ts)文件。",-1),Vy={class:"kv"},Iy={key:0},Ly={key:1},zy={key:0},Fy={key:1,class:"child-item"},$y=Tl("br",null,null,-1),Ry={class:"kv"},jy={key:0},Hy={key:1},Wy={key:0},qy={key:1,class:"child-item"},Yy=Tl("em",null,"添加子项",-1),Ky=Bl("确定"),Uy=Bl("取消"),{ipcRenderer:Gy}=n(8933),{remote:Xy,shell:Jy}=n(8933),{Menu:Zy,MenuItem:Qy}=Xy,ex=n(5747),tx=Qn({setup(e,t){const n=Ye({form:{key:"",enValue:"",zhValue:""},formLabelWidth:"80px",regionRules:{key:[{required:!0,trigger:"blur"},{max:40,message:"",trigger:"blur"}],enValue:[{required:!0,trigger:"blur"},{max:40,message:"",trigger:"blur"}],zhValue:[{required:!0,trigger:"blur"},{max:40,message:"",trigger:"blur"}]},isSubmit:!1,currentModule:"",name:"首页",path:"/home",lang:{en:{},zh:{}},langFile:{en:{name:"",file:""},zh:{name:"",file:""}},filterText:"",treeData:[],contextMenu:new Zy,dialogShowVisible:!1}),l=tt(null);mn((()=>{console.log(l.value),o()}));const a=(e,t)=>{var l;n.treeData=[],l=JSON.parse(JSON.stringify(t)),Object.entries(l).map((e=>{if("object"==typeof e[1]){let t={label:e[0],value:""};n.treeData.push(t)}})),console.log(n.treeData)};function o(){n.contextMenu.append(new Qy({label:"新建子项",click:()=>{r()}}))}function r(){n.dialogShowVisible=!0}return{...st(n),entryFile:e=>{let t=e.target.files[0],l=t.name,o="";(l.includes("zh")||l.includes("cn")||t.path.includes("zh"))&&(o="zh"),(l.includes("en")||l.includes("EN")||t.path.includes("en"))&&(o="en"),n.langFile[o].file=l,n.langFile[o].name=o,console.log(n),ex.readFile(t.path,"utf-8",((e,t)=>{let l=t.substring(t.indexOf("{"));e?console.log("出错",e):(n.lang[o]=JSON.parse(l),a(0,JSON.parse(l)))}))},treeInit:a,clickLocalNode:function(e,t){},creatMenu:function(e,t,l,a){e.preventDefault(),n.currentModule=t.label,n.contextMenu.popup({window:Xy.getCurrentWindow()})},filterNode:function(e,t){return!e||-1!==t.label.indexOf(e)},exportLang:function(e){let t=`export default ${JSON.stringify(this.lang[e.name],"","\t")}`;console.log(t),Gy.send("save-dialog",e.file),Gy.on("save-file",((e,n)=>{if(!n.canceled){let e=n.filePath;ex.writeFile(e,t,"utf-8",((t,n)=>{if(t)throw t;console.log("文件已被保存");const l={title:"导出成功",body:"导出目录为:"+e};new window.Notification(l.title,l)}))}}))},contextMenuInit:o,showAddItem:r,addItem:function(){l.value.validate((e=>{e&&(n.isSubmit=!0,console.log(n.langFile),n.lang&&n.lang.zh&&n.langFile.zh.file&&(console.log(n.lang.zh[n.currentModule]),n.lang.zh[n.currentModule][n.form.key]=n.form.zhValue),n.lang&&n.lang.en&&n.langFile.en.file&&(console.log(n.lang),n.lang.en[n.currentModule][n.form.key]=n.form.enValue),setTimeout((()=>{n.isSubmit=!1,n.dialogShowVisible=!1,console.log(n.lang)}),100))}))},regionRules:l}}});var nx=n(5937);ly()(nx.Z,{insert:"head",singleton:!1}),nx.Z.locals,tx.render=function(e,t,n,l,a,o){const r=pl("el-input"),i=pl("el-tree"),s=pl("el-form-item"),u=pl("el-form"),c=pl("el-button"),p=pl("el-dialog"),f=hl("tresize");return Cl(),Al("div",ry,[Tl("div",iy,[sy,Tl("div",uy,[Tl("div",cy,[Tl("input",{class:"input-file",onChange:t[1]||(t[1]=(...t)=>e.entryFile&&e.entryFile(...t)),type:"file",name:"导入"},null,32),dy])]),Tl("div",py,[fy,Tl(r,{class:"search-text",placeholder:"输入关键字进行过滤",size:"mini",modelValue:e.filterText,"onUpdate:modelValue":t[2]||(t[2]=t=>e.filterText=t)},null,8,["modelValue"]),Tl(i,{ref:"tree",data:e.treeData,"node-key":"id","highlight-current":"",onNodeContextmenu:e.creatMenu,onCurrentChange:e.clickLocalNode,"filter-node-method":e.filterNode},null,8,["data","onNodeContextmenu","onCurrentChange","filter-node-method"])]),Tl("div",hy,[Pl(' <button class="fixedlb" @click="exportLang">导出</button> '),Tl("p",vy,[my,Tl("a",{onClick:t[3]||(t[3]=t=>e.aboutMe(this)),href:"javascript:"},"♥"),gy])])]),Tl("div",by,[Pl(" <h2>SenseGuard i18n-tools</h2> "),Tl("div",yy,[Tl("h3",null,[xy,e.langFile.zh.name?(Cl(),Al("span",ky,[wy,Tl("span",Cy,d(e.langFile.zh.file),1),_y,Tl("button",{title:"导出中文语言包",class:"mini",onClick:t[4]||(t[4]=t=>e.exportLang(e.langFile.zh))},"➥导出")])):Pl("v-if",!0)]),Tl("h3",null,[Ay,e.langFile.en.name?(Cl(),Al("span",Sy,[Ey,Tl("span",My,d(e.langFile.en.file),1),Oy,Tl("button",{title:"导出英文语言包",class:"mini",onClick:t[5]||(t[5]=t=>e.exportLang(e.langFile.en))},"➥导出")])):Pl("v-if",!0)])]),Tl("section",Dy,[0==Object.keys(e.lang.zh).length&&0==Object.keys(e.lang.en).length?(Cl(),Al("div",Ty,[Ny,By,Py])):Pl("v-if",!0),Tl("div",Vy,[(Cl(!0),Al(gl,null,da(e.lang.zh,((t,n)=>(Cl(),Al("dl",{key:n},[Tl("dt",{ref:n,name:n},[Tl("em",{textContent:d(n),onInput:e=>n=e.target.innerText},null,40,["textContent","onInput"])],8,["name"]),Tl("dd",null,["string"==typeof t?(Cl(),Al("div",Iy,[Pl(" <label></label> "),Un(Tl("textarea",{class:n,placeholder:"请输入",autoHeight:"true","onUpdate:modelValue":t=>e.lang.zh[n]=t},null,10,["onUpdate:modelValue"]),[[f,e.changed],[no,e.lang.zh[n]]])])):(Cl(),Al("ul",Ly,[(Cl(!0),Al(gl,null,da(e.lang.zh[n],((t,l)=>(Cl(),Al("li",{key:l},[Tl("em",null,d(l),1),"string"==typeof e.lang.zh[n][l]?(Cl(),Al("div",zy,[Un(Tl("textarea",{class:l,placeholder:"请输入",autoHeight:"true","onUpdate:modelValue":t=>e.lang.zh[n][l]=t},null,10,["onUpdate:modelValue"]),[[f,e.changed],[no,e.lang.zh[n][l]]])])):(Cl(),Al("div",Fy,[Tl("ul",null,[(Cl(!0),Al(gl,null,da(e.lang.zh[n][l],((t,a)=>(Cl(),Al("li",{key:a},[Tl("em",null,d(a),1),$y,Un(Tl("textarea",{class:l,placeholder:"请输入",autoHeight:"true","onUpdate:modelValue":t=>e.lang.zh[n][l][a]=t},null,10,["onUpdate:modelValue"]),[[f,e.changed],[no,e.lang.zh[n][l][a]]])])))),128))])]))])))),128))]))])])))),128))]),Tl("div",Ry,[(Cl(!0),Al(gl,null,da(e.lang.en,((t,n)=>(Cl(),Al("dl",{key:n},[Tl("dt",null,[Tl("em",null,d(n),1)]),Tl("dd",null,["string"==typeof e.lang.en[n]?(Cl(),Al("div",jy,[Pl(' <label for=""></label> '),Un(Tl("textarea",{style:{resize:"none"},class:n,placeholder:"请输入",autoHeight:"true","onUpdate:modelValue":t=>e.lang.en[n]=t},null,10,["onUpdate:modelValue"]),[[f,e.changed],[no,e.lang.en[n]]])])):(Cl(),Al("ul",Hy,[(Cl(!0),Al(gl,null,da(e.lang.en[n],((t,l)=>(Cl(),Al("li",{key:l},[Tl("em",null,d(l),1),"string"==typeof e.lang.en[n][l]?(Cl(),Al("div",Wy,[Un(Tl("textarea",{class:l,placeholder:"请输入",autoHeight:"true","onUpdate:modelValue":t=>e.lang.en[n][l]=t},null,10,["onUpdate:modelValue"]),[[f,e.changed],[no,e.lang.en[n][l]]])])):(Cl(),Al("div",qy,[Tl("ul",null,[(Cl(!0),Al(gl,null,da(e.lang.en[n][l],((t,a)=>(Cl(),Al("li",{key:a},[Tl("em",null,d(a),1),Un(Tl("textarea",{class:l,placeholder:"请输入",autoHeight:"true","onUpdate:modelValue":t=>e.lang.en[n][l][a]=t},null,10,["onUpdate:modelValue"]),[[f,e.changed],[no,e.lang.en[n][l][a]]])])))),128))])]))])))),128))]))])])))),128))]),Tl(p,{width:"500px",modelValue:e.dialogShowVisible,"onUpdate:modelValue":t[10]||(t[10]=t=>e.dialogShowVisible=t)},{title:en((()=>[Bl(d(e.currentModule)+": ",1),Yy])),footer:en((()=>[Tl(c,{size:"small",type:"primary",loading:e.isSubmit,onClick:e.addItem},{default:en((()=>[Ky])),_:1},8,["loading","onClick"]),Tl(c,{size:"small",type:"info",onClick:t[9]||(t[9]=t=>e.dialogShowVisible=!1)},{default:en((()=>[Uy])),_:1})])),default:en((()=>[Tl(u,{model:e.form,ref:"regionRules",rules:e.regionRules},{default:en((()=>[Tl(s,{label:"key:","label-width":e.formLabelWidth,prop:"key"},{default:en((()=>[Tl(r,{size:"small",modelValue:e.form.key,"onUpdate:modelValue":t[6]||(t[6]=t=>e.form.key=t),maxlength:"40",autocomplete:"off"},null,8,["modelValue"])])),_:1},8,["label-width"]),Tl(s,{label:"中文:","label-width":e.formLabelWidth,prop:"zhValue"},{default:en((()=>[Tl(r,{size:"small",modelValue:e.form.zhValue,"onUpdate:modelValue":t[7]||(t[7]=t=>e.form.zhValue=t),maxlength:"100",autocomplete:"off"},null,8,["modelValue"])])),_:1},8,["label-width"]),Tl(s,{label:"英文:","label-width":e.formLabelWidth,prop:"enValue"},{default:en((()=>[Tl(r,{size:"small",modelValue:e.form.enValue,"onUpdate:modelValue":t[8]||(t[8]=t=>e.form.enValue=t),maxlength:"100",autocomplete:"off"},null,8,["modelValue"])])),_:1},8,["label-width"])])),_:1},8,["model","rules"])])),_:1},8,["modelValue"])],512)])])};const lx={name:"App",components:{HelloWorld:oy,HomePage:tx}};var ax=n(4308);ly()(ax.Z,{insert:"head",singleton:!1}),ax.Z.locals,lx.render=function(e,t,n,l,a,o){const r=pl("HomePage");return Cl(),Al(gl,null,[Pl(' <HelloWorld msg="hello Vue3"></HelloWorld> '),Tl(r)],2112)};let ox=((...e)=>{const t=bo().createApp(...e),{mount:n}=t;return t.mount=e=>{const l=function(e){return O(e)?document.querySelector(e):e}(e);if(!l)return;const a=t._component;M(a)||a.render||a.template||(a.template=l.innerHTML),l.innerHTML="";const o=n(l);return l.removeAttribute("v-cloak"),l.setAttribute("data-v-app",""),o},t})(lx);ox.use(Qb),ox.directive("tresize",{bind(e,t){let n="",l="",a="";e.__vueReize__=setInterval((function(){const o=document.defaultView.getComputedStyle(e);n===o.width&&l===o.height||(a=e.classList[0],t.value({width:n,height:l,className:a})),n=o.width,l=o.height,a=o.className}),400)},unbind(e){clearInterval(e.__vueReize__)}}),ox.mount("#app")})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvQXBwLnZ1ZT8yOTI2Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0hlbGxvd29ybGQudnVlP2ZmY2QiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BhZ2UvaG9tZS52dWU/Njk3OSIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9jc3NXaXRoTWFwcGluZ1RvU3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kYXlqcy9kYXlqcy5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RheWpzL3BsdWdpbi9hZHZhbmNlZEZvcm1hdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGF5anMvcGx1Z2luL2N1c3RvbVBhcnNlRm9ybWF0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kYXlqcy9wbHVnaW4vaXNMZWFwWWVhci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGF5anMvcGx1Z2luL2lzU2FtZU9yQWZ0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RheWpzL3BsdWdpbi9pc1NhbWVPckJlZm9yZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGF5anMvcGx1Z2luL2xvY2FsZURhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RheWpzL3BsdWdpbi93ZWVrT2ZZZWFyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kYXlqcy9wbHVnaW4vd2Vla1llYXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fRGF0YVZpZXcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fSGFzaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19MaXN0Q2FjaGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fTWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX01hcENhY2hlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX1Byb21pc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fU2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX1NldENhY2hlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX1N0YWNrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX1N5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19VaW50OEFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX1dlYWtNYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXBwbHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXJyYXlGaWx0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXJyYXlJbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hcnJheUluY2x1ZGVzV2l0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hcnJheUxpa2VLZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2FycmF5UHVzaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hcnJheVNvbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXNzb2NJbmRleE9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VGaW5kSW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUZsYXR0ZW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUdldEFsbEtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUdldFRhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSW5kZXhPZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSXNBcmd1bWVudHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUlzRXF1YWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUlzRXF1YWxEZWVwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VJc05hTi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSXNOYXRpdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUlzVHlwZWRBcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlS2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlUmVzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlU2V0VG9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVRpbWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VVbmFyeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlVW5pcS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jYWNoZUhhcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jb3JlSnNEYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2NyZWF0ZVNldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19kZWZpbmVQcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19lcXVhbEFycmF5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19lcXVhbEJ5VGFnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2VxdWFsT2JqZWN0cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19mcmVlR2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldEFsbEtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0TWFwRGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXROYXRpdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0UmF3VGFnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldFN5bWJvbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0VGFnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldFZhbHVlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2hhc2hDbGVhci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19oYXNoRGVsZXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2hhc2hHZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faGFzaEhhcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19oYXNoU2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2lzRmxhdHRlbmFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faXNJbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19pc0tleWFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faXNNYXNrZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faXNQcm90b3R5cGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbGlzdENhY2hlQ2xlYXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbGlzdENhY2hlRGVsZXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2xpc3RDYWNoZUdldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19saXN0Q2FjaGVIYXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbGlzdENhY2hlU2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX21hcENhY2hlQ2xlYXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbWFwQ2FjaGVEZWxldGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbWFwQ2FjaGVHZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbWFwQ2FjaGVIYXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbWFwQ2FjaGVTZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbWFwVG9BcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19uYXRpdmVDcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbmF0aXZlS2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19ub2RlVXRpbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19vYmplY3RUb1N0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19vdmVyQXJnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX292ZXJSZXN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3Jvb3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc2V0Q2FjaGVBZGQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc2V0Q2FjaGVIYXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc2V0VG9BcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19zZXRUb1N0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19zaG9ydE91dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19zdGFja0NsZWFyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3N0YWNrRGVsZXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3N0YWNrR2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3N0YWNrSGFzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3N0YWNrU2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3N0cmljdEluZGV4T2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fdG9Tb3VyY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9jb25zdGFudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2RlYm91bmNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvZXEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pZGVudGl0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzQXJndW1lbnRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNBcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzQXJyYXlMaWtlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNBcnJheUxpa2VPYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0J1ZmZlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzRXF1YWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0Z1bmN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNMZW5ndGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc09iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzT2JqZWN0TGlrZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzU3ltYm9sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNUeXBlZEFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gva2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL25vb3AuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9ub3cuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9zdHViQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9zdHViRmFsc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC90aHJvdHRsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL3RvTnVtYmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvdW5pb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL25vcm1hbGl6ZS13aGVlbC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbm9ybWFsaXplLXdoZWVsL3NyYy9FeGVjdXRpb25FbnZpcm9ubWVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbm9ybWFsaXplLXdoZWVsL3NyYy9Vc2VyQWdlbnRfREVQUkVDQVRFRC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbm9ybWFsaXplLXdoZWVsL3NyYy9pc0V2ZW50U3VwcG9ydGVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ub3JtYWxpemUtd2hlZWwvc3JjL25vcm1hbGl6ZVdoZWVsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJlbGVjdHJvblwiIiwid2VicGFjazovLy9leHRlcm5hbCBcImZzXCIiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovLy93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovLy93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovLy93ZWJwYWNrL3J1bnRpbWUvbm9kZSBtb2R1bGUgZGVjb3JhdG9yIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AdnVlL3NoYXJlZC9kaXN0L3NoYXJlZC5lc20tYnVuZGxlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHZ1ZS9yZWFjdGl2aXR5L2Rpc3QvcmVhY3Rpdml0eS5lc20tYnVuZGxlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHZ1ZS9ydW50aW1lLWNvcmUvZGlzdC9ydW50aW1lLWNvcmUuZXNtLWJ1bmRsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B2dWUvcnVudGltZS1kb20vZGlzdC9ydW50aW1lLWRvbS5lc20tYnVuZGxlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWl0dC9kaXN0L21pdHQuZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Jlc2l6ZS1vYnNlcnZlci1wb2x5ZmlsbC9kaXN0L1Jlc2l6ZU9ic2VydmVyLmVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldEJvdW5kaW5nQ2xpZW50UmVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRXaW5kb3cuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0V2luZG93U2Nyb2xsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2luc3RhbmNlT2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0Tm9kZU5hbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0RG9jdW1lbnRFbGVtZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldFdpbmRvd1Njcm9sbEJhclguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0Q29tcHV0ZWRTdHlsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9pc1Njcm9sbFBhcmVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRDb21wb3NpdGVSZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldE5vZGVTY3JvbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0SFRNTEVsZW1lbnRTY3JvbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0TGF5b3V0UmVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRQYXJlbnROb2RlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldFNjcm9sbFBhcmVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9saXN0U2Nyb2xsUGFyZW50cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9pc1RhYmxlRWxlbWVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRPZmZzZXRQYXJlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9lbnVtcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL29yZGVyTW9kaWZpZXJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvZGVib3VuY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9jcmVhdGVQb3BwZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9tZXJnZUJ5TmFtZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL21vZGlmaWVycy9ldmVudExpc3RlbmVycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2dldEJhc2VQbGFjZW1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9nZXRWYXJpYXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9nZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9jb21wdXRlT2Zmc2V0cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL21vZGlmaWVycy9jb21wdXRlU3R5bGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvZ2V0T3Bwb3NpdGVQbGFjZW1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9nZXRPcHBvc2l0ZVZhcmlhdGlvblBsYWNlbWVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9jb250YWlucy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL3JlY3RUb0NsaWVudFJlY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0Q2xpcHBpbmdSZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldFZpZXdwb3J0UmVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXREb2N1bWVudFJlY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9tZXJnZVBhZGRpbmdPYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9nZXRGcmVzaFNpZGVPYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9leHBhbmRUb0hhc2hNYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9kZXRlY3RPdmVyZmxvdy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL3dpdGhpbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL21vZGlmaWVycy9oaWRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvcG9wcGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvbW9kaWZpZXJzL3BvcHBlck9mZnNldHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9tb2RpZmllcnMvYXBwbHlTdHlsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9tb2RpZmllcnMvb2Zmc2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvbW9kaWZpZXJzL2ZsaXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9jb21wdXRlQXV0b1BsYWNlbWVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL21vZGlmaWVycy9wcmV2ZW50T3ZlcmZsb3cuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9nZXRBbHRBeGlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvbW9kaWZpZXJzL2Fycm93LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hc3luYy12YWxpZGF0b3IvZGlzdC13ZWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VsZW1lbnQtcGx1cy9saWIvaW5kZXguZXNtLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0hlbGxvd29ybGQudnVlIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0hlbGxvd29ybGQudnVlPzE1NmIiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvSGVsbG93b3JsZC52dWU/OGY0NyIsIndlYnBhY2s6Ly8vLi9zcmMvcGFnZS9ob21lLnZ1ZSIsIndlYnBhY2s6Ly8vLi9zcmMvcGFnZS9ob21lLnZ1ZT9mMmQ3Iiwid2VicGFjazovLy8uL3NyYy9wYWdlL2hvbWUudnVlPzdiMmMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0FwcC52dWUiLCJ3ZWJwYWNrOi8vLy4vc3JjL0FwcC52dWU/ZDAzMCIsIndlYnBhY2s6Ly8vLi9zcmMvQXBwLnZ1ZT8yYjYxIiwid2VicGFjazovLy8uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJfX19DU1NfTE9BREVSX0VYUE9SVF9fXyIsInB1c2giLCJtb2R1bGUiLCJpZCIsImV4cG9ydHMiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibGlzdCIsInRvU3RyaW5nIiwidGhpcyIsIm1hcCIsIml0ZW0iLCJjb250ZW50IiwiY29uY2F0Iiwiam9pbiIsImkiLCJtb2R1bGVzIiwibWVkaWFRdWVyeSIsImRlZHVwZSIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJsZW5ndGgiLCJfaSIsIl9hcnJheUxpa2VUb0FycmF5IiwiYXJyIiwibGVuIiwiYXJyMiIsIkFycmF5IiwiX2l0ZW0iLCJpc0FycmF5IiwiX2FycmF5V2l0aEhvbGVzIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJPYmplY3QiLCJfYXJyIiwiX24iLCJfZCIsIl9lIiwidW5kZWZpbmVkIiwiX3MiLCJuZXh0IiwiZG9uZSIsInZhbHVlIiwiZXJyIiwiX2l0ZXJhYmxlVG9BcnJheUxpbWl0IiwibyIsIm1pbkxlbiIsIm4iLCJwcm90b3R5cGUiLCJjYWxsIiwic2xpY2UiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJmcm9tIiwidGVzdCIsIl91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSIsIlR5cGVFcnJvciIsIl9ub25JdGVyYWJsZVJlc3QiLCJjc3NNYXBwaW5nIiwiYnRvYSIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJzb3VyY2VNYXBwaW5nIiwic291cmNlVVJMcyIsInNvdXJjZXMiLCJzb3VyY2UiLCJzb3VyY2VSb290IiwidCIsImUiLCJyIiwicyIsInUiLCJhIiwiZiIsImgiLCJjIiwiZCIsIndlZWtkYXlzIiwic3BsaXQiLCJtb250aHMiLCIkIiwiU3RyaW5nIiwibCIsInoiLCJ1dGNPZmZzZXQiLCJNYXRoIiwiYWJzIiwiZmxvb3IiLCJtIiwiZGF0ZSIsInllYXIiLCJtb250aCIsImNsb25lIiwiYWRkIiwiY2VpbCIsInAiLCJNIiwieSIsInciLCJEIiwibXMiLCJRIiwidG9Mb3dlckNhc2UiLCJyZXBsYWNlIiwiUyIsInYiLCJhcmdzIiwiYXJndW1lbnRzIiwiZyIsImxvY2FsZSIsIiRMIiwidXRjIiwiJHUiLCJ4IiwiJHgiLCIkb2Zmc2V0IiwicGFyc2UiLCIkZCIsIkRhdGUiLCJOYU4iLCJtYXRjaCIsInN1YnN0cmluZyIsIlVUQyIsImluaXQiLCIkeSIsImdldEZ1bGxZZWFyIiwiJE0iLCJnZXRNb250aCIsIiREIiwiZ2V0RGF0ZSIsIiRXIiwiZ2V0RGF5IiwiJEgiLCJnZXRIb3VycyIsIiRtIiwiZ2V0TWludXRlcyIsIiRzIiwiZ2V0U2Vjb25kcyIsIiRtcyIsImdldE1pbGxpc2Vjb25kcyIsIiR1dGlscyIsImlzVmFsaWQiLCJpc1NhbWUiLCJzdGFydE9mIiwiZW5kT2YiLCJpc0FmdGVyIiwiaXNCZWZvcmUiLCIkZyIsInNldCIsInVuaXgiLCJ2YWx1ZU9mIiwiZ2V0VGltZSIsInRvRGF0ZSIsImFwcGx5IiwiJGxvY2FsZSIsIndlZWtTdGFydCIsIiRzZXQiLCJtaW4iLCJkYXlzSW5Nb250aCIsImdldCIsIk51bWJlciIsInJvdW5kIiwic3VidHJhY3QiLCJmb3JtYXQiLCJzdWJzdHIiLCJtZXJpZGllbSIsIllZIiwiWVlZWSIsIk1NIiwiTU1NIiwibW9udGhzU2hvcnQiLCJNTU1NIiwiREQiLCJkZCIsIndlZWtkYXlzTWluIiwiZGRkIiwid2Vla2RheXNTaG9ydCIsImRkZGQiLCJIIiwiSEgiLCJoaCIsIkEiLCJtbSIsInNzIiwiU1NTIiwiWiIsImdldFRpbWV6b25lT2Zmc2V0IiwiZGlmZiIsInRvSlNPTiIsInRvSVNPU3RyaW5nIiwidG9VVENTdHJpbmciLCJmb3JFYWNoIiwiZXh0ZW5kIiwiJGkiLCJpc0RheWpzIiwiZW4iLCJMcyIsIm9yZGluYWwiLCJ3ZWVrWWVhciIsIndlZWsiLCJvZmZzZXROYW1lIiwiYmluZCIsIkxUUyIsIkxUIiwiTCIsIkxMIiwiTExMIiwiTExMTCIsInRvVXBwZXJDYXNlIiwiem9uZSIsIm9mZnNldCIsImluZGV4T2YiLCJhZnRlcm5vb24iLCJtaWxsaXNlY29uZHMiLCJTUyIsIkRvIiwiZGF5IiwiRXJyb3IiLCJZIiwiWloiLCJmb3JtYXRzIiwicmVnZXgiLCJwYXJzZXIiLCJleGVjIiwiaG91cnMiLCJtaW51dGVzIiwic2Vjb25kcyIsImN1c3RvbVBhcnNlRm9ybWF0IiwiaXNMZWFwWWVhciIsImlzU2FtZU9yQWZ0ZXIiLCJpc1NhbWVPckJlZm9yZSIsImxvY2FsZURhdGEiLCJmaXJzdERheU9mV2VlayIsImxvbmdEYXRlRm9ybWF0IiwieWVhclN0YXJ0Iiwid2Vla3MiLCJEYXRhVmlldyIsImdldE5hdGl2ZSIsImhhc2hDbGVhciIsImhhc2hEZWxldGUiLCJoYXNoR2V0IiwiaGFzaEhhcyIsImhhc2hTZXQiLCJIYXNoIiwiZW50cmllcyIsImluZGV4IiwiY2xlYXIiLCJlbnRyeSIsImhhcyIsImxpc3RDYWNoZUNsZWFyIiwibGlzdENhY2hlRGVsZXRlIiwibGlzdENhY2hlR2V0IiwibGlzdENhY2hlSGFzIiwibGlzdENhY2hlU2V0IiwiTGlzdENhY2hlIiwiTWFwIiwibWFwQ2FjaGVDbGVhciIsIm1hcENhY2hlRGVsZXRlIiwibWFwQ2FjaGVHZXQiLCJtYXBDYWNoZUhhcyIsIm1hcENhY2hlU2V0IiwiTWFwQ2FjaGUiLCJQcm9taXNlIiwiU2V0Iiwic2V0Q2FjaGVBZGQiLCJzZXRDYWNoZUhhcyIsIlNldENhY2hlIiwidmFsdWVzIiwiX19kYXRhX18iLCJzdGFja0NsZWFyIiwic3RhY2tEZWxldGUiLCJzdGFja0dldCIsInN0YWNrSGFzIiwic3RhY2tTZXQiLCJTdGFjayIsInNpemUiLCJVaW50OEFycmF5IiwiV2Vha01hcCIsImZ1bmMiLCJ0aGlzQXJnIiwiYXJyYXkiLCJwcmVkaWNhdGUiLCJyZXNJbmRleCIsInJlc3VsdCIsImJhc2VJbmRleE9mIiwiY29tcGFyYXRvciIsImJhc2VUaW1lcyIsImlzQXJndW1lbnRzIiwiaXNCdWZmZXIiLCJpc0luZGV4IiwiaXNUeXBlZEFycmF5IiwiaGFzT3duUHJvcGVydHkiLCJpbmhlcml0ZWQiLCJpc0FyciIsImlzQXJnIiwiaXNCdWZmIiwiaXNUeXBlIiwic2tpcEluZGV4ZXMiLCJrZXkiLCJlcSIsImZyb21JbmRleCIsImZyb21SaWdodCIsImFycmF5UHVzaCIsImlzRmxhdHRlbmFibGUiLCJiYXNlRmxhdHRlbiIsImRlcHRoIiwiaXNTdHJpY3QiLCJvYmplY3QiLCJrZXlzRnVuYyIsInN5bWJvbHNGdW5jIiwiZ2V0UmF3VGFnIiwib2JqZWN0VG9TdHJpbmciLCJzeW1Ub1N0cmluZ1RhZyIsInRvU3RyaW5nVGFnIiwiYmFzZUZpbmRJbmRleCIsImJhc2VJc05hTiIsInN0cmljdEluZGV4T2YiLCJiYXNlR2V0VGFnIiwiaXNPYmplY3RMaWtlIiwiYmFzZUlzRXF1YWxEZWVwIiwiYmFzZUlzRXF1YWwiLCJvdGhlciIsImJpdG1hc2siLCJjdXN0b21pemVyIiwic3RhY2siLCJlcXVhbEFycmF5cyIsImVxdWFsQnlUYWciLCJlcXVhbE9iamVjdHMiLCJnZXRUYWciLCJhcmdzVGFnIiwiYXJyYXlUYWciLCJvYmplY3RUYWciLCJlcXVhbEZ1bmMiLCJvYmpJc0FyciIsIm90aElzQXJyIiwib2JqVGFnIiwib3RoVGFnIiwib2JqSXNPYmoiLCJvdGhJc09iaiIsImlzU2FtZVRhZyIsIm9iaklzV3JhcHBlZCIsIm90aElzV3JhcHBlZCIsIm9ialVud3JhcHBlZCIsIm90aFVud3JhcHBlZCIsImlzRnVuY3Rpb24iLCJpc01hc2tlZCIsImlzT2JqZWN0IiwidG9Tb3VyY2UiLCJyZUlzSG9zdEN0b3IiLCJmdW5jUHJvdG8iLCJGdW5jdGlvbiIsIm9iamVjdFByb3RvIiwiZnVuY1RvU3RyaW5nIiwicmVJc05hdGl2ZSIsIlJlZ0V4cCIsImlzTGVuZ3RoIiwidHlwZWRBcnJheVRhZ3MiLCJpc1Byb3RvdHlwZSIsIm5hdGl2ZUtleXMiLCJpZGVudGl0eSIsIm92ZXJSZXN0Iiwic2V0VG9TdHJpbmciLCJzdGFydCIsImNvbnN0YW50IiwiZGVmaW5lUHJvcGVydHkiLCJiYXNlU2V0VG9TdHJpbmciLCJzdHJpbmciLCJpdGVyYXRlZSIsImFycmF5SW5jbHVkZXMiLCJhcnJheUluY2x1ZGVzV2l0aCIsImNhY2hlSGFzIiwiY3JlYXRlU2V0Iiwic2V0VG9BcnJheSIsImluY2x1ZGVzIiwiaXNDb21tb24iLCJzZWVuIiwib3V0ZXIiLCJjb21wdXRlZCIsInNlZW5JbmRleCIsImNhY2hlIiwiY29yZUpzRGF0YSIsIm5vb3AiLCJhcnJheVNvbWUiLCJpc1BhcnRpYWwiLCJhcnJMZW5ndGgiLCJvdGhMZW5ndGgiLCJhcnJTdGFja2VkIiwib3RoU3RhY2tlZCIsImFyclZhbHVlIiwib3RoVmFsdWUiLCJjb21wYXJlZCIsIm90aEluZGV4IiwibWFwVG9BcnJheSIsInN5bWJvbFByb3RvIiwic3ltYm9sVmFsdWVPZiIsInRhZyIsImJ5dGVMZW5ndGgiLCJieXRlT2Zmc2V0IiwiYnVmZmVyIiwibWVzc2FnZSIsImNvbnZlcnQiLCJzdGFja2VkIiwiZ2V0QWxsS2V5cyIsIm9ialByb3BzIiwib2JqTGVuZ3RoIiwib2JqU3RhY2tlZCIsInNraXBDdG9yIiwib2JqVmFsdWUiLCJvYmpDdG9yIiwib3RoQ3RvciIsImZyZWVHbG9iYWwiLCJnbG9iYWwiLCJiYXNlR2V0QWxsS2V5cyIsImdldFN5bWJvbHMiLCJrZXlzIiwiaXNLZXlhYmxlIiwiYmFzZUlzTmF0aXZlIiwiZ2V0VmFsdWUiLCJuYXRpdmVPYmplY3RUb1N0cmluZyIsImlzT3duIiwidW5tYXNrZWQiLCJhcnJheUZpbHRlciIsInN0dWJBcnJheSIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwibmF0aXZlR2V0U3ltYm9scyIsImdldE93blByb3BlcnR5U3ltYm9scyIsInN5bWJvbCIsIm1hcFRhZyIsInByb21pc2VUYWciLCJzZXRUYWciLCJ3ZWFrTWFwVGFnIiwiZGF0YVZpZXdUYWciLCJkYXRhVmlld0N0b3JTdHJpbmciLCJtYXBDdG9yU3RyaW5nIiwicHJvbWlzZUN0b3JTdHJpbmciLCJzZXRDdG9yU3RyaW5nIiwid2Vha01hcEN0b3JTdHJpbmciLCJBcnJheUJ1ZmZlciIsInJlc29sdmUiLCJDdG9yIiwiY3RvclN0cmluZyIsIm5hdGl2ZUNyZWF0ZSIsInNwcmVhZGFibGVTeW1ib2wiLCJpc0NvbmNhdFNwcmVhZGFibGUiLCJyZUlzVWludCIsInR5cGUiLCJ1aWQiLCJtYXNrU3JjS2V5IiwiSUVfUFJPVE8iLCJhc3NvY0luZGV4T2YiLCJzcGxpY2UiLCJwb3AiLCJnZXRNYXBEYXRhIiwib3ZlckFyZyIsImZyZWVFeHBvcnRzIiwibm9kZVR5cGUiLCJmcmVlTW9kdWxlIiwiZnJlZVByb2Nlc3MiLCJwcm9jZXNzIiwibm9kZVV0aWwiLCJyZXF1aXJlIiwidHlwZXMiLCJiaW5kaW5nIiwidHJhbnNmb3JtIiwiYXJnIiwibmF0aXZlTWF4IiwibWF4Iiwib3RoZXJBcmdzIiwiZnJlZVNlbGYiLCJzZWxmIiwicm9vdCIsInNob3J0T3V0IiwibmF0aXZlTm93Iiwibm93IiwiY291bnQiLCJsYXN0Q2FsbGVkIiwic3RhbXAiLCJyZW1haW5pbmciLCJwYWlycyIsIkxBUkdFX0FSUkFZX1NJWkUiLCJ0b051bWJlciIsIm5hdGl2ZU1pbiIsIndhaXQiLCJvcHRpb25zIiwibGFzdEFyZ3MiLCJsYXN0VGhpcyIsIm1heFdhaXQiLCJ0aW1lcklkIiwibGFzdENhbGxUaW1lIiwibGFzdEludm9rZVRpbWUiLCJsZWFkaW5nIiwibWF4aW5nIiwidHJhaWxpbmciLCJpbnZva2VGdW5jIiwidGltZSIsImxlYWRpbmdFZGdlIiwic2V0VGltZW91dCIsInRpbWVyRXhwaXJlZCIsInNob3VsZEludm9rZSIsInRpbWVTaW5jZUxhc3RDYWxsIiwidHJhaWxpbmdFZGdlIiwidGltZVdhaXRpbmciLCJyZW1haW5pbmdXYWl0IiwiZGVib3VuY2VkIiwiaXNJbnZva2luZyIsImNsZWFyVGltZW91dCIsImNhbmNlbCIsImZsdXNoIiwiYmFzZUlzQXJndW1lbnRzIiwiaXNBcnJheUxpa2UiLCJzdHViRmFsc2UiLCJCdWZmZXIiLCJiYXNlSXNUeXBlZEFycmF5IiwiYmFzZVVuYXJ5Iiwibm9kZUlzVHlwZWRBcnJheSIsImFycmF5TGlrZUtleXMiLCJiYXNlS2V5cyIsImRlYm91bmNlIiwiaXNTeW1ib2wiLCJyZVRyaW0iLCJyZUlzQmFkSGV4IiwicmVJc0JpbmFyeSIsInJlSXNPY3RhbCIsImZyZWVQYXJzZUludCIsInBhcnNlSW50IiwiaXNCaW5hcnkiLCJiYXNlUmVzdCIsImJhc2VVbmlxIiwiaXNBcnJheUxpa2VPYmplY3QiLCJ1bmlvbiIsImFycmF5cyIsImNhblVzZURPTSIsIndpbmRvdyIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsIkV4ZWN1dGlvbkVudmlyb25tZW50IiwiY2FuVXNlV29ya2VycyIsIldvcmtlciIsImNhblVzZUV2ZW50TGlzdGVuZXJzIiwiYWRkRXZlbnRMaXN0ZW5lciIsImF0dGFjaEV2ZW50IiwiY2FuVXNlVmlld3BvcnQiLCJzY3JlZW4iLCJpc0luV29ya2VyIiwiX2llIiwiX2ZpcmVmb3giLCJfb3BlcmEiLCJfd2Via2l0IiwiX2Nocm9tZSIsIl9pZV9yZWFsX3ZlcnNpb24iLCJfb3N4IiwiX3dpbmRvd3MiLCJfbGludXgiLCJfYW5kcm9pZCIsIl93aW42NCIsIl9pcGhvbmUiLCJfaXBhZCIsIl9uYXRpdmUiLCJfbW9iaWxlIiwiX3BvcHVsYXRlZCIsIl9wb3B1bGF0ZSIsInVhcyIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsImFnZW50Iiwib3MiLCJwYXJzZUZsb2F0IiwiZG9jdW1lbnRNb2RlIiwidHJpZGVudCIsInZlciIsIlVzZXJBZ2VudF9ERVBSRUNBVEVEIiwiaWUiLCJpZUNvbXBhdGliaWxpdHlNb2RlIiwiaWU2NCIsImZpcmVmb3giLCJvcGVyYSIsIndlYmtpdCIsInNhZmFyaSIsImNocm9tZSIsIndpbmRvd3MiLCJvc3giLCJsaW51eCIsImlwaG9uZSIsIm1vYmlsZSIsIm5hdGl2ZUFwcCIsImFuZHJvaWQiLCJpcGFkIiwidXNlSGFzRmVhdHVyZSIsImltcGxlbWVudGF0aW9uIiwiaGFzRmVhdHVyZSIsImV2ZW50TmFtZVN1ZmZpeCIsImNhcHR1cmUiLCJldmVudE5hbWUiLCJpc1N1cHBvcnRlZCIsImVsZW1lbnQiLCJzZXRBdHRyaWJ1dGUiLCJpc0V2ZW50U3VwcG9ydGVkIiwibm9ybWFsaXplV2hlZWwiLCJldmVudCIsInNYIiwic1kiLCJwWCIsInBZIiwiZGV0YWlsIiwid2hlZWxEZWx0YSIsIndoZWVsRGVsdGFZIiwid2hlZWxEZWx0YVgiLCJheGlzIiwiSE9SSVpPTlRBTF9BWElTIiwiZGVsdGFZIiwiZGVsdGFYIiwiZGVsdGFNb2RlIiwic3BpblgiLCJzcGluWSIsInBpeGVsWCIsInBpeGVsWSIsImdldEV2ZW50VHlwZSIsIm1lbW8iLCJnZXRUYXJnZXQiLCJ0YXJnZXQiLCJzdHlsZVRhcmdldCIsInF1ZXJ5U2VsZWN0b3IiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJzdHlsZXNJbkRvbSIsImdldEluZGV4QnlJZGVudGlmaWVyIiwiaWRlbnRpZmllciIsIm1vZHVsZXNUb0RvbSIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImJhc2UiLCJvYmoiLCJjc3MiLCJtZWRpYSIsInNvdXJjZU1hcCIsInJlZmVyZW5jZXMiLCJ1cGRhdGVyIiwiYWRkU3R5bGUiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZSIsImF0dHJpYnV0ZXMiLCJub25jZSIsImluc2VydCIsImFwcGVuZENoaWxkIiwidGV4dFN0b3JlIiwicmVwbGFjZVRleHQiLCJyZXBsYWNlbWVudCIsImZpbHRlciIsIkJvb2xlYW4iLCJhcHBseVRvU2luZ2xldG9uVGFnIiwicmVtb3ZlIiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJjc3NOb2RlIiwiY3JlYXRlVGV4dE5vZGUiLCJjaGlsZE5vZGVzIiwicmVtb3ZlQ2hpbGQiLCJpbnNlcnRCZWZvcmUiLCJhcHBseVRvVGFnIiwicmVtb3ZlQXR0cmlidXRlIiwiZmlyc3RDaGlsZCIsInNpbmdsZXRvbiIsInNpbmdsZXRvbkNvdW50ZXIiLCJ1cGRhdGUiLCJzdHlsZUluZGV4IiwicGFyZW50Tm9kZSIsInJlbW92ZVN0eWxlRWxlbWVudCIsIm5ld09iaiIsImFsbCIsImF0b2IiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2luZGV4IiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwibG9hZGVkIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImdldHRlciIsIl9fZXNNb2R1bGUiLCJkZWZpbml0aW9uIiwiZW51bWVyYWJsZSIsInByb3AiLCJubWQiLCJwYXRocyIsImNoaWxkcmVuIiwic3RyIiwiZXhwZWN0c0xvd2VyQ2FzZSIsImNyZWF0ZSIsInZhbCIsImlzR2xvYmFsbHlXaGl0ZWxpc3RlZCIsImlzU3BlY2lhbEJvb2xlYW5BdHRyIiwibm9ybWFsaXplU3R5bGUiLCJyZXMiLCJub3JtYWxpemVkIiwiaXNTdHJpbmciLCJwYXJzZVN0cmluZ1N0eWxlIiwibGlzdERlbGltaXRlclJFIiwicHJvcGVydHlEZWxpbWl0ZXJSRSIsInJldCIsInRtcCIsInRyaW0iLCJub3JtYWxpemVDbGFzcyIsImxvb3NlRXF1YWwiLCJiIiwiYVZhbGlkVHlwZSIsImlzRGF0ZSIsImJWYWxpZFR5cGUiLCJlcXVhbCIsImxvb3NlQ29tcGFyZUFycmF5cyIsImFIYXNLZXkiLCJiSGFzS2V5IiwibG9vc2VJbmRleE9mIiwiZmluZEluZGV4IiwidG9EaXNwbGF5U3RyaW5nIiwicmVwbGFjZXIiLCJfa2V5IiwiaXNNYXAiLCJyZWR1Y2UiLCJpc1NldCIsImlzUGxhaW5PYmplY3QiLCJFTVBUWV9BUlIiLCJvblJFIiwiaXNNb2RlbExpc3RlbmVyIiwic3RhcnRzV2l0aCIsImFzc2lnbiIsImVsIiwidG9UeXBlU3RyaW5nIiwiaXNQcm9taXNlIiwidGhlbiIsImNhdGNoIiwiaXNJbnRlZ2VyS2V5IiwiY2FjaGVTdHJpbmdGdW5jdGlvbiIsImZuIiwiY2FtZWxpemVSRSIsImNhbWVsaXplIiwiXyIsImh5cGhlbmF0ZVJFIiwiaHlwaGVuYXRlIiwiY2hhckF0IiwidG9IYW5kbGVyS2V5IiwiaGFzQ2hhbmdlZCIsIm9sZFZhbHVlIiwiZm5zIiwiY29uZmlndXJhYmxlIiwiaXNOYU4iLCJfZ2xvYmFsVGhpcyIsImdsb2JhbFRoaXMiLCJ0YXJnZXRNYXAiLCJlZmZlY3RTdGFjayIsImFjdGl2ZUVmZmVjdCIsIklURVJBVEVfS0VZIiwiTUFQX0tFWV9JVEVSQVRFX0tFWSIsImVmZmVjdCIsIl9pc0VmZmVjdCIsImlzRWZmZWN0IiwicmF3IiwiYWN0aXZlIiwic2NoZWR1bGVyIiwiY2xlYW51cCIsInRyYWNrU3RhY2siLCJzaG91bGRUcmFjayIsInJlc2V0VHJhY2tpbmciLCJhbGxvd1JlY3Vyc2UiLCJkZXBzIiwiY3JlYXRlUmVhY3RpdmVFZmZlY3QiLCJsYXp5Iiwic3RvcCIsIm9uU3RvcCIsImRlbGV0ZSIsInBhdXNlVHJhY2tpbmciLCJsYXN0IiwidHJhY2siLCJkZXBzTWFwIiwiZGVwIiwidHJpZ2dlciIsIm5ld1ZhbHVlIiwib2xkVGFyZ2V0IiwiZWZmZWN0cyIsImVmZmVjdHNUb0FkZCIsImJ1aWx0SW5TeW1ib2xzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImNyZWF0ZUdldHRlciIsInNoYWxsb3dHZXQiLCJyZWFkb25seUdldCIsInNoYWxsb3dSZWFkb25seUdldCIsImFycmF5SW5zdHJ1bWVudGF0aW9ucyIsImlzUmVhZG9ubHkiLCJzaGFsbG93IiwicmVjZWl2ZXIiLCJyZWFkb25seU1hcCIsInJlYWN0aXZlTWFwIiwidGFyZ2V0SXNBcnJheSIsIlJlZmxlY3QiLCJyZWFkb25seSIsInJlYWN0aXZlIiwiY3JlYXRlU2V0dGVyIiwiaGFkS2V5IiwibWV0aG9kIiwibXV0YWJsZUhhbmRsZXJzIiwiZGVsZXRlUHJvcGVydHkiLCJvd25LZXlzIiwicmVhZG9ubHlIYW5kbGVycyIsInNoYWxsb3dSZWFjdGl2ZUhhbmRsZXJzIiwidG9SZWFjdGl2ZSIsInRvUmVhZG9ubHkiLCJ0b1NoYWxsb3ciLCJnZXRQcm90byIsImdldFByb3RvdHlwZU9mIiwiZ2V0JDEiLCJpc1NoYWxsb3ciLCJyYXdUYXJnZXQiLCJyYXdLZXkiLCJ3cmFwIiwiaGFzJDEiLCJzZXQkMSIsImRlbGV0ZUVudHJ5IiwiaGFkSXRlbXMiLCJjcmVhdGVGb3JFYWNoIiwiY2FsbGJhY2siLCJvYnNlcnZlZCIsImNyZWF0ZUl0ZXJhYmxlTWV0aG9kIiwidGFyZ2V0SXNNYXAiLCJpc1BhaXIiLCJpc0tleU9ubHkiLCJpbm5lckl0ZXJhdG9yIiwiY3JlYXRlUmVhZG9ubHlNZXRob2QiLCJtdXRhYmxlSW5zdHJ1bWVudGF0aW9ucyIsInNoYWxsb3dJbnN0cnVtZW50YXRpb25zIiwicmVhZG9ubHlJbnN0cnVtZW50YXRpb25zIiwiY3JlYXRlSW5zdHJ1bWVudGF0aW9uR2V0dGVyIiwiaW5zdHJ1bWVudGF0aW9ucyIsIm11dGFibGVDb2xsZWN0aW9uSGFuZGxlcnMiLCJzaGFsbG93Q29sbGVjdGlvbkhhbmRsZXJzIiwicmVhZG9ubHlDb2xsZWN0aW9uSGFuZGxlcnMiLCJjcmVhdGVSZWFjdGl2ZU9iamVjdCIsImJhc2VIYW5kbGVycyIsImNvbGxlY3Rpb25IYW5kbGVycyIsInByb3h5TWFwIiwiZXhpc3RpbmdQcm94eSIsInRhcmdldFR5cGUiLCJpc0V4dGVuc2libGUiLCJyYXdUeXBlIiwidGFyZ2V0VHlwZU1hcCIsInByb3h5IiwiUHJveHkiLCJpc1Byb3h5IiwiX192X2lzUmVmIiwiY3JlYXRlUmVmIiwic2hhbGxvd1JlZiIsIlJlZkltcGwiLCJfcmF3VmFsdWUiLCJfc2hhbGxvdyIsIl92YWx1ZSIsIm5ld1ZhbCIsInJhd1ZhbHVlIiwidW5yZWYiLCJyZWYiLCJzaGFsbG93VW53cmFwSGFuZGxlcnMiLCJwcm94eVJlZnMiLCJvYmplY3RXaXRoUmVmcyIsInRvUmVmcyIsInRvUmVmIiwiT2JqZWN0UmVmSW1wbCIsIl9vYmplY3QiLCJDb21wdXRlZFJlZkltcGwiLCJfc2V0dGVyIiwiX2RpcnR5IiwiY2FsbFdpdGhFcnJvckhhbmRsaW5nIiwiaW5zdGFuY2UiLCJoYW5kbGVFcnJvciIsImNhbGxXaXRoQXN5bmNFcnJvckhhbmRsaW5nIiwidGhyb3dJbkRldiIsInZub2RlIiwiY3VyIiwicGFyZW50IiwiZXhwb3NlZEluc3RhbmNlIiwiZXJyb3JJbmZvIiwiZXJyb3JDYXB0dXJlZEhvb2tzIiwiZWMiLCJhcHBFcnJvckhhbmRsZXIiLCJhcHBDb250ZXh0IiwiY29uZmlnIiwiZXJyb3JIYW5kbGVyIiwiY29udGV4dFZOb2RlIiwiY29uc29sZSIsImVycm9yIiwibG9nRXJyb3IiLCJpc0ZsdXNoaW5nIiwiaXNGbHVzaFBlbmRpbmciLCJxdWV1ZSIsImZsdXNoSW5kZXgiLCJwZW5kaW5nUHJlRmx1c2hDYnMiLCJhY3RpdmVQcmVGbHVzaENicyIsInByZUZsdXNoSW5kZXgiLCJwZW5kaW5nUG9zdEZsdXNoQ2JzIiwiYWN0aXZlUG9zdEZsdXNoQ2JzIiwicG9zdEZsdXNoSW5kZXgiLCJyZXNvbHZlZFByb21pc2UiLCJjdXJyZW50Rmx1c2hQcm9taXNlIiwiY3VycmVudFByZUZsdXNoUGFyZW50Sm9iIiwibmV4dFRpY2siLCJxdWV1ZUpvYiIsImpvYiIsInF1ZXVlRmx1c2giLCJmbHVzaEpvYnMiLCJxdWV1ZUNiIiwiY2IiLCJhY3RpdmVRdWV1ZSIsInBlbmRpbmdRdWV1ZSIsImZsdXNoUHJlRmx1c2hDYnMiLCJwYXJlbnRKb2IiLCJmbHVzaFBvc3RGbHVzaENicyIsImRlZHVwZWQiLCJzb3J0IiwiZ2V0SWQiLCJJbmZpbml0eSIsImRldnRvb2xzQ29tcG9uZW50QWRkZWQiLCJjcmVhdGVEZXZ0b29sc0NvbXBvbmVudEhvb2siLCJkZXZ0b29sc0NvbXBvbmVudFVwZGF0ZWQiLCJkZXZ0b29sc0NvbXBvbmVudFJlbW92ZWQiLCJob29rIiwiY29tcG9uZW50IiwiZW1pdCIsInJhd0FyZ3MiLCJwcm9wcyIsIm1vZGVsQXJnIiwibW9kaWZpZXJzS2V5IiwibnVtYmVyIiwiX19WVUVfUFJPRF9ERVZUT09MU19fIiwiaGFuZGxlck5hbWUiLCJoYW5kbGVyIiwib25jZUhhbmRsZXIiLCJlbWl0dGVkIiwibm9ybWFsaXplRW1pdHNPcHRpb25zIiwiY29tcCIsImFzTWl4aW4iLCJkZW9wdCIsIl9fZW1pdHMiLCJlbWl0cyIsImhhc0V4dGVuZHMiLCJfX1ZVRV9PUFRJT05TX0FQSV9fIiwiZXh0ZW5kRW1pdHMiLCJtaXhpbnMiLCJleHRlbmRzIiwiaXNFbWl0TGlzdGVuZXIiLCJjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UiLCJzZXRDdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UiLCJyZW5kZXJDb21wb25lbnRSb290IiwiQ29tcG9uZW50Iiwid2l0aFByb3h5IiwicHJvcHNPcHRpb25zIiwic2xvdHMiLCJhdHRycyIsInJlbmRlciIsInJlbmRlckNhY2hlIiwic2V0dXBTdGF0ZSIsImN0eCIsImZhbGx0aHJvdWdoQXR0cnMiLCJzaGFwZUZsYWciLCJwcm94eVRvVXNlIiwibm9ybWFsaXplVk5vZGUiLCJnZXRGdW5jdGlvbmFsRmFsbHRocm91Z2giLCJpbmhlcml0QXR0cnMiLCJzb21lIiwiZmlsdGVyTW9kZWxMaXN0ZW5lcnMiLCJjbG9uZVZOb2RlIiwiZGlycyIsInRyYW5zaXRpb24iLCJjcmVhdGVWTm9kZSIsIkNvbW1lbnQiLCJoYXNQcm9wc0NoYW5nZWQiLCJwcmV2UHJvcHMiLCJuZXh0UHJvcHMiLCJlbWl0c09wdGlvbnMiLCJuZXh0S2V5cyIsIm5vcm1hbGl6ZVN1c3BlbnNlU2xvdCIsInNpbmdsZVJvb3QiLCJjaGlsZCIsImlzVk5vZGUiLCJmaWx0ZXJTaW5nbGVSb290IiwiaXNSZW5kZXJpbmdDb21waWxlZFNsb3QiLCJzZXRDb21waWxlZFNsb3RSZW5kZXJpbmciLCJyZW5kZXJTbG90IiwiZmFsbGJhY2siLCJzbG90Iiwib3BlbkJsb2NrIiwidmFsaWRTbG90Q29udGVudCIsImVuc3VyZVZhbGlkVk5vZGUiLCJyZW5kZXJlZCIsImNyZWF0ZUJsb2NrIiwidm5vZGVzIiwid2l0aEN0eCIsInJlbmRlckZuV2l0aENvbnRleHQiLCJvd25lciIsImNsb3NlQmxvY2siLCJfYyIsImN1cnJlbnRTY29wZUlkIiwic2NvcGVJZFN0YWNrIiwicHVzaFNjb3BlSWQiLCJwb3BTY29wZUlkIiwic2V0RnVsbFByb3BzIiwicmF3UHJvcHMiLCJuZWVkQ2FzdEtleXMiLCJjYW1lbEtleSIsInJhd0N1cnJlbnRQcm9wcyIsInJlc29sdmVQcm9wVmFsdWUiLCJvcHQiLCJoYXNEZWZhdWx0IiwiZGVmYXVsdFZhbHVlIiwiZGVmYXVsdCIsInNldEN1cnJlbnRJbnN0YW5jZSIsIm5vcm1hbGl6ZVByb3BzT3B0aW9ucyIsIl9fcHJvcHMiLCJleHRlbmRQcm9wcyIsIm5vcm1hbGl6ZWRLZXkiLCJ2YWxpZGF0ZVByb3BOYW1lIiwiYm9vbGVhbkluZGV4IiwiZ2V0VHlwZUluZGV4Iiwic3RyaW5nSW5kZXgiLCJnZXRUeXBlIiwiY3RvciIsImlzU2FtZVR5cGUiLCJleHBlY3RlZFR5cGVzIiwiaW5qZWN0SG9vayIsImN1cnJlbnRJbnN0YW5jZSIsInByZXBlbmQiLCJob29rcyIsIndyYXBwZWRIb29rIiwiX193ZWgiLCJpc1VubW91bnRlZCIsInVuc2hpZnQiLCJjcmVhdGVIb29rIiwibGlmZWN5Y2xlIiwiaXNJblNTUkNvbXBvbmVudFNldHVwIiwib25CZWZvcmVNb3VudCIsIm9uQmVmb3JlVXBkYXRlIiwib25CZWZvcmVVbm1vdW50Iiwib25Vbm1vdW50ZWQiLCJvblJlbmRlclRyaWdnZXJlZCIsIm9uUmVuZGVyVHJhY2tlZCIsImRvV2F0Y2giLCJJTklUSUFMX1dBVENIRVJfVkFMVUUiLCJ3YXRjaCIsImltbWVkaWF0ZSIsImRlZXAiLCJvblRyYWNrIiwib25UcmlnZ2VyIiwiZm9yY2VUcmlnZ2VyIiwidHJhdmVyc2UiLCJvbkludmFsaWRhdGUiLCJiYXNlR2V0dGVyIiwicnVubmVyIiwicXVldWVQb3N0UmVuZGVyRWZmZWN0Iiwic3VzcGVuc2UiLCJpc01vdW50ZWQiLCJxdWV1ZVByZUZsdXNoQ2IiLCJyZWNvcmRJbnN0YW5jZUJvdW5kRWZmZWN0IiwiaW5zdGFuY2VXYXRjaCIsInB1YmxpY1RoaXMiLCJ1c2VUcmFuc2l0aW9uU3RhdGUiLCJzdGF0ZSIsImlzTGVhdmluZyIsImlzVW5tb3VudGluZyIsImxlYXZpbmdWTm9kZXMiLCJUcmFuc2l0aW9uSG9va1ZhbGlkYXRvciIsIkJhc2VUcmFuc2l0aW9uIiwibW9kZSIsImFwcGVhciIsInBlcnNpc3RlZCIsIm9uQmVmb3JlRW50ZXIiLCJvbkVudGVyIiwib25BZnRlckVudGVyIiwib25FbnRlckNhbmNlbGxlZCIsIm9uQmVmb3JlTGVhdmUiLCJvbkxlYXZlIiwib25BZnRlckxlYXZlIiwib25MZWF2ZUNhbmNlbGxlZCIsIm9uQmVmb3JlQXBwZWFyIiwib25BcHBlYXIiLCJvbkFmdGVyQXBwZWFyIiwib25BcHBlYXJDYW5jZWxsZWQiLCJwcmV2VHJhbnNpdGlvbktleSIsImdldFRyYW5zaXRpb25SYXdDaGlsZHJlbiIsImVtcHR5UGxhY2Vob2xkZXIiLCJpbm5lckNoaWxkIiwiZ2V0S2VlcEFsaXZlQ2hpbGQiLCJlbnRlckhvb2tzIiwicmVzb2x2ZVRyYW5zaXRpb25Ib29rcyIsInNldFRyYW5zaXRpb25Ib29rcyIsIm9sZENoaWxkIiwic3ViVHJlZSIsIm9sZElubmVyQ2hpbGQiLCJ0cmFuc2l0aW9uS2V5Q2hhbmdlZCIsImdldFRyYW5zaXRpb25LZXkiLCJpc1NhbWVWTm9kZVR5cGUiLCJsZWF2aW5nSG9va3MiLCJhZnRlckxlYXZlIiwiZGVsYXlMZWF2ZSIsImVhcmx5UmVtb3ZlIiwiZGVsYXllZExlYXZlIiwiZ2V0TGVhdmluZ05vZGVzRm9yVHlwZSIsIl9sZWF2ZUNiIiwibGVhdmluZ1ZOb2Rlc0NhY2hlIiwiY2FsbEhvb2siLCJsZWF2aW5nVk5vZGUiLCJhZnRlckhvb2siLCJjYW5jZWxIb29rIiwiY2FsbGVkIiwiX2VudGVyQ2IiLCJjYW5jZWxsZWQiLCJpc0tlZXBBbGl2ZSIsInNzQ29udGVudCIsInNzRmFsbGJhY2siLCJrZWVwQ29tbWVudCIsImtleWVkRnJhZ21lbnRDb3VudCIsInBhdGNoRmxhZyIsIl9faXNLZWVwQWxpdmUiLCJvbkFjdGl2YXRlZCIsInJlZ2lzdGVyS2VlcEFsaXZlSG9vayIsIm9uRGVhY3RpdmF0ZWQiLCJfX3dkYyIsImN1cnJlbnQiLCJpc0RlYWN0aXZhdGVkIiwiaW5qZWN0VG9LZWVwQWxpdmVSb290Iiwia2VlcEFsaXZlUm9vdCIsImluamVjdGVkIiwiaXNJbnRlcm5hbEtleSIsIm5vcm1hbGl6ZVNsb3RWYWx1ZSIsIm5vcm1hbGl6ZVNsb3QiLCJyYXdTbG90Iiwibm9ybWFsaXplT2JqZWN0U2xvdHMiLCJyYXdTbG90cyIsIl9jdHgiLCJub3JtYWxpemVWTm9kZVNsb3RzIiwid2l0aERpcmVjdGl2ZXMiLCJkaXJlY3RpdmVzIiwiYmluZGluZ3MiLCJkaXIiLCJtb2RpZmllcnMiLCJtb3VudGVkIiwidXBkYXRlZCIsImludm9rZURpcmVjdGl2ZUhvb2siLCJwcmV2Vk5vZGUiLCJvbGRCaW5kaW5ncyIsImNyZWF0ZUFwcENvbnRleHQiLCJhcHAiLCJpc05hdGl2ZVRhZyIsInBlcmZvcm1hbmNlIiwiZ2xvYmFsUHJvcGVydGllcyIsIm9wdGlvbk1lcmdlU3RyYXRlZ2llcyIsImlzQ3VzdG9tRWxlbWVudCIsIndhcm5IYW5kbGVyIiwiY29tcG9uZW50cyIsInByb3ZpZGVzIiwiY3JlYXRlQXBwQVBJIiwiaHlkcmF0ZSIsInJvb3RDb21wb25lbnQiLCJyb290UHJvcHMiLCJjb250ZXh0IiwiaW5zdGFsbGVkUGx1Z2lucyIsIl91aWQiLCJfY29tcG9uZW50IiwiX3Byb3BzIiwiX2NvbnRhaW5lciIsIl9jb250ZXh0IiwidmVyc2lvbiIsInVzZSIsInBsdWdpbiIsImluc3RhbGwiLCJtaXhpbiIsImRpcmVjdGl2ZSIsInJvb3RDb250YWluZXIiLCJpc0h5ZHJhdGUiLCJfX3Z1ZV9hcHBfXyIsInByb3ZpZGUiLCJkZWZpbmVDb21wb25lbnQiLCJzZXR1cCIsInByb2RFZmZlY3RPcHRpb25zIiwicGVuZGluZ0JyYW5jaCIsInNldFJlZiIsInJhd1JlZiIsIm9sZFJhd1JlZiIsInBhcmVudFN1c3BlbnNlIiwiX19hc3luY0xvYWRlciIsImV4cG9zZWQiLCJvbGRSZWYiLCJyZWZzIiwiZG9TZXQiLCJiYXNlQ3JlYXRlUmVuZGVyZXIiLCJjcmVhdGVIeWRyYXRpb25GbnMiLCJuZWVkV2FybiIsImluaXRGZWF0dXJlRmxhZ3MiLCJob3N0SW5zZXJ0IiwiaG9zdFJlbW92ZSIsInBhdGNoUHJvcCIsImhvc3RQYXRjaFByb3AiLCJmb3JjZVBhdGNoUHJvcCIsImhvc3RGb3JjZVBhdGNoUHJvcCIsImhvc3RDcmVhdGVFbGVtZW50IiwiY3JlYXRlVGV4dCIsImhvc3RDcmVhdGVUZXh0IiwiY3JlYXRlQ29tbWVudCIsImhvc3RDcmVhdGVDb21tZW50Iiwic2V0VGV4dCIsImhvc3RTZXRUZXh0Iiwic2V0RWxlbWVudFRleHQiLCJob3N0U2V0RWxlbWVudFRleHQiLCJob3N0UGFyZW50Tm9kZSIsIm5leHRTaWJsaW5nIiwiaG9zdE5leHRTaWJsaW5nIiwic2V0U2NvcGVJZCIsImhvc3RTZXRTY29wZUlkIiwiY2xvbmVOb2RlIiwiaG9zdENsb25lTm9kZSIsImluc2VydFN0YXRpY0NvbnRlbnQiLCJob3N0SW5zZXJ0U3RhdGljQ29udGVudCIsInBhdGNoIiwibjEiLCJuMiIsImNvbnRhaW5lciIsImFuY2hvciIsInBhcmVudENvbXBvbmVudCIsImlzU1ZHIiwib3B0aW1pemVkIiwiZ2V0TmV4dEhvc3ROb2RlIiwidW5tb3VudCIsImR5bmFtaWNDaGlsZHJlbiIsIlRleHQiLCJwcm9jZXNzVGV4dCIsInByb2Nlc3NDb21tZW50Tm9kZSIsIlN0YXRpYyIsIm1vdW50U3RhdGljTm9kZSIsInByb2Nlc3NGcmFnbWVudCIsInByb2Nlc3NFbGVtZW50IiwicHJvY2Vzc0NvbXBvbmVudCIsImludGVybmFscyIsIm1vdW50RWxlbWVudCIsInBhdGNoRWxlbWVudCIsInZub2RlSG9vayIsInNjb3BlSWQiLCJpcyIsIm1vdW50Q2hpbGRyZW4iLCJ1bm1vdW50Q2hpbGRyZW4iLCJvblZub2RlQmVmb3JlTW91bnQiLCJpbnZva2VWTm9kZUhvb2siLCJuZWVkQ2FsbFRyYW5zaXRpb25Ib29rcyIsImJlZm9yZUVudGVyIiwib25Wbm9kZU1vdW50ZWQiLCJlbnRlciIsInRyZWVPd25lcklkIiwiX19zY29wZUlkIiwiY2xvbmVJZk1vdW50ZWQiLCJvbGRQcm9wcyIsIm5ld1Byb3BzIiwib25Wbm9kZUJlZm9yZVVwZGF0ZSIsInBhdGNoUHJvcHMiLCJjbGFzcyIsInByb3BzVG9VcGRhdGUiLCJkeW5hbWljUHJvcHMiLCJwcmV2IiwiYXJlQ2hpbGRyZW5TVkciLCJwYXRjaEJsb2NrQ2hpbGRyZW4iLCJwYXRjaENoaWxkcmVuIiwib25Wbm9kZVVwZGF0ZWQiLCJvbGRDaGlsZHJlbiIsIm5ld0NoaWxkcmVuIiwiZmFsbGJhY2tDb250YWluZXIiLCJvbGRWTm9kZSIsIm5ld1ZOb2RlIiwiZnJhZ21lbnRTdGFydEFuY2hvciIsImZyYWdtZW50RW5kQW5jaG9yIiwidHJhdmVyc2VTdGF0aWNDaGlsZHJlbiIsImFjdGl2YXRlIiwibW91bnRDb21wb25lbnQiLCJ1cGRhdGVDb21wb25lbnQiLCJpbml0aWFsVk5vZGUiLCJlbXB0eUFwcENvbnRleHQiLCJ1aWQkMSIsImFjY2Vzc0NhY2hlIiwic2V0dXBDb250ZXh0Iiwic3VzcGVuc2VJZCIsInBlbmRpbmdJZCIsImFzeW5jRGVwIiwiYXN5bmNSZXNvbHZlZCIsImJjIiwiYm0iLCJidSIsInVtIiwiYnVtIiwiZGEiLCJydGciLCJydGMiLCJjcmVhdGVDb21wb25lbnRJbnN0YW5jZSIsInJlbmRlcmVyIiwiaXNTU1IiLCJpc1N0YXRlZnVsIiwiSW50ZXJuYWxPYmplY3RLZXkiLCJpbml0UHJvcHMiLCJpbml0U2xvdHMiLCJQdWJsaWNJbnN0YW5jZVByb3h5SGFuZGxlcnMiLCJleHBvc2UiLCJjcmVhdGVTZXR1cENvbnRleHQiLCJzZXR1cFJlc3VsdCIsInJlc29sdmVkUmVzdWx0IiwiaGFuZGxlU2V0dXBSZXN1bHQiLCJmaW5pc2hDb21wb25lbnRTZXR1cCIsInNldHVwU3RhdGVmdWxDb21wb25lbnQiLCJzZXR1cENvbXBvbmVudCIsInJlZ2lzdGVyRGVwIiwic2V0dXBSZW5kZXJFZmZlY3QiLCJwbGFjZWhvbGRlciIsIm5leHRWTm9kZSIsInByZXZDaGlsZHJlbiIsIm5leHRDaGlsZHJlbiIsIiRzdGFibGUiLCJzaG91bGRVcGRhdGVDb21wb25lbnQiLCJ1cGRhdGVDb21wb25lbnRQcmVSZW5kZXIiLCJpbnZhbGlkYXRlSm9iIiwib3JpZ2luTmV4dCIsIm5leHRUcmVlIiwicHJldlRyZWUiLCJ1cGRhdGVIT0NIb3N0RWwiLCJoeWRyYXRlTm9kZSIsInJhd1ByZXZQcm9wcyIsImtlYmFiS2V5IiwiY2FtZWxpemVkS2V5IiwidXBkYXRlUHJvcHMiLCJuZWVkRGVsZXRpb25DaGVjayIsImRlbGV0aW9uQ29tcGFyaXNvblRhcmdldCIsInVwZGF0ZVNsb3RzIiwiYzEiLCJwcmV2U2hhcGVGbGFnIiwiYzIiLCJwYXRjaEtleWVkQ2hpbGRyZW4iLCJwYXRjaFVua2V5ZWRDaGlsZHJlbiIsIm9sZExlbmd0aCIsIm5ld0xlbmd0aCIsImNvbW1vbkxlbmd0aCIsIm5leHRDaGlsZCIsInBhcmVudEFuY2hvciIsImwyIiwiZTEiLCJlMiIsIm5leHRQb3MiLCJzMSIsInMyIiwia2V5VG9OZXdJbmRleE1hcCIsImoiLCJwYXRjaGVkIiwidG9CZVBhdGNoZWQiLCJtb3ZlZCIsIm1heE5ld0luZGV4U29GYXIiLCJuZXdJbmRleFRvT2xkSW5kZXhNYXAiLCJwcmV2Q2hpbGQiLCJuZXdJbmRleCIsImluY3JlYXNpbmdOZXdJbmRleFNlcXVlbmNlIiwiYXJySSIsImdldFNlcXVlbmNlIiwibmV4dEluZGV4IiwibW92ZSIsIm1vdmVUeXBlIiwibGVhdmUiLCJwZXJmb3JtTGVhdmUiLCJtb3ZlU3RhdGljTm9kZSIsImRvUmVtb3ZlIiwiZGVhY3RpdmF0ZSIsInNob3VsZEludm9rZURpcnMiLCJvblZub2RlQmVmb3JlVW5tb3VudCIsInVubW91bnRDb21wb25lbnQiLCJpc1RlbGVwb3J0RGlzYWJsZWQiLCJvblZub2RlVW5tb3VudGVkIiwicmVtb3ZlRnJhZ21lbnQiLCJyZW1vdmVTdGF0aWNOb2RlIiwicGVyZm9ybVJlbW92ZSIsImVuZCIsIl92bm9kZSIsIm10IiwibWMiLCJwYyIsInBiYyIsImNyZWF0ZUFwcCIsImNoMSIsImNoMiIsImRpc2FibGVkIiwiaXNUYXJnZXRTVkciLCJTVkdFbGVtZW50IiwicmVzb2x2ZVRhcmdldCIsInNlbGVjdCIsInRhcmdldFNlbGVjdG9yIiwidG8iLCJtb3ZlVGVsZXBvcnQiLCJ0YXJnZXRBbmNob3IiLCJpc1Jlb3JkZXIiLCJUZWxlcG9ydCIsIl9faXNUZWxlcG9ydCIsIm1haW5BbmNob3IiLCJtb3VudCIsIndhc0Rpc2FibGVkIiwiY3VycmVudENvbnRhaW5lciIsImN1cnJlbnRBbmNob3IiLCJuZXh0VGFyZ2V0Iiwibm9kZSIsImh5ZHJhdGVDaGlsZHJlbiIsInRhcmdldE5vZGUiLCJfbHBhIiwiQ09NUE9ORU5UUyIsInJlc29sdmVDb21wb25lbnQiLCJyZXNvbHZlQXNzZXQiLCJOVUxMX0RZTkFNSUNfQ09NUE9ORU5UIiwicmVzb2x2ZURpcmVjdGl2ZSIsIndhcm5NaXNzaW5nIiwic2VsZk5hbWUiLCJkaXNwbGF5TmFtZSIsInJlZ2lzdHJ5IiwiYmxvY2tTdGFjayIsImN1cnJlbnRCbG9jayIsImRpc2FibGVUcmFja2luZyIsIl9fdl9pc1ZOb2RlIiwibm9ybWFsaXplS2V5Iiwibm9ybWFsaXplUmVmIiwiaXNCbG9ja05vZGUiLCJjbG9uZWQiLCJub3JtYWxpemVDaGlsZHJlbiIsIl9fdmNjT3B0cyIsImtsYXNzIiwiX19pc1N1c3BlbnNlIiwiaXNTdXNwZW5zZSIsImlzVGVsZXBvcnQiLCJzdGF0aWNDb3VudCIsIm5vcm1hbGl6ZVN1c3BlbnNlQ2hpbGRyZW4iLCJleHRyYVByb3BzIiwibWVyZ2VSZWYiLCJtZXJnZWRQcm9wcyIsIm1lcmdlUHJvcHMiLCJjcmVhdGVUZXh0Vk5vZGUiLCJ0ZXh0IiwiZmxhZyIsImNyZWF0ZUNvbW1lbnRWTm9kZSIsImFzQmxvY2siLCJzbG90RmxhZyIsInRvTWVyZ2UiLCJleGlzdGluZyIsImluY29taW5nIiwicGFyZW50UHJvdmlkZXMiLCJpbmplY3QiLCJ0cmVhdERlZmF1bHRBc0ZhY3RvcnkiLCJpc0luQmVmb3JlQ3JlYXRlIiwiYXBwbHlPcHRpb25zIiwiZGVmZXJyZWREYXRhIiwiZGVmZXJyZWRXYXRjaCIsImRlZmVycmVkUHJvdmlkZSIsImV4dGVuZHNPcHRpb25zIiwiZGF0YU9wdGlvbnMiLCJjb21wdXRlZE9wdGlvbnMiLCJtZXRob2RzIiwid2F0Y2hPcHRpb25zIiwicHJvdmlkZU9wdGlvbnMiLCJpbmplY3RPcHRpb25zIiwiYmVmb3JlTW91bnQiLCJiZWZvcmVVcGRhdGUiLCJhY3RpdmF0ZWQiLCJkZWFjdGl2YXRlZCIsImJlZm9yZURlc3Ryb3kiLCJiZWZvcmVVbm1vdW50IiwiZGVzdHJveWVkIiwidW5tb3VudGVkIiwicmVuZGVyVHJhY2tlZCIsInJlbmRlclRyaWdnZXJlZCIsImVycm9yQ2FwdHVyZWQiLCJnbG9iYWxNaXhpbnMiLCJjYWxsU3luY0hvb2siLCJhcHBseU1peGlucyIsIm1ldGhvZEhhbmRsZXIiLCJkYXRhRm4iLCJyZXNvbHZlRGF0YSIsImNyZWF0ZVdhdGNoZXIiLCJvbkVycm9yQ2FwdHVyZWQiLCJjYWxsSG9va0Zyb21NaXhpbnMiLCJjYWxsSG9va0Zyb21FeHRlbmRzIiwic2VsZkhvb2siLCJiYXNlSG9vayIsImNoYWluZWRNaXhpbnMiLCJwYXRoIiwic2VnbWVudHMiLCJjcmVhdGVQYXRoR2V0dGVyIiwibWVyZ2VPcHRpb25zIiwic3RyYXRzIiwiZ2V0UHVibGljSW5zdGFuY2UiLCJwdWJsaWNQcm9wZXJ0aWVzTWFwIiwiJGVsIiwiJGRhdGEiLCIkcHJvcHMiLCIkYXR0cnMiLCIkc2xvdHMiLCIkcmVmcyIsIiRwYXJlbnQiLCIkcm9vdCIsIiRlbWl0IiwiJG9wdGlvbnMiLCJfX21lcmdlZCIsInJlc29sdmVNZXJnZWRPcHRpb25zIiwiJGZvcmNlVXBkYXRlIiwiJG5leHRUaWNrIiwiJHdhdGNoIiwibm9ybWFsaXplZFByb3BzIiwicHVibGljR2V0dGVyIiwiY3NzTW9kdWxlIiwiX19jc3NNb2R1bGVzIiwiUnVudGltZUNvbXBpbGVkUHVibGljSW5zdGFuY2VQcm94eUhhbmRsZXJzIiwidW5zY29wYWJsZXMiLCJkZXZ0b29sc1Jhd1NldHVwU3RhdGUiLCJfcmMiLCJnZXR0ZXJPck9wdGlvbnMiLCJzZXR0ZXIiLCJwcm9wc09yQ2hpbGRyZW4iLCJyZW5kZXJMaXN0IiwicmVuZGVySXRlbSIsInRvSGFuZGxlcnMiLCJjcmVhdGVTbG90cyIsImR5bmFtaWNTbG90cyIsInN2Z05TIiwiZG9jIiwidGVtcENvbnRhaW5lciIsInRlbXBTVkdDb250YWluZXIiLCJub2RlT3BzIiwiY3JlYXRlRWxlbWVudE5TIiwibm9kZVZhbHVlIiwidGV4dENvbnRlbnQiLCJzZWxlY3RvciIsInRlbXAiLCJpbm5lckhUTUwiLCJmaXJzdCIsImltcG9ydGFudFJFIiwic2V0U3R5bGUiLCJzZXRQcm9wZXJ0eSIsInByZWZpeGVkIiwicmF3TmFtZSIsImNhY2hlZCIsInByZWZpeENhY2hlIiwicHJlZml4ZXMiLCJhdXRvUHJlZml4IiwieGxpbmtOUyIsIl9nZXROb3ciLCJjcmVhdGVFdmVudCIsInRpbWVTdGFtcCIsImNhY2hlZE5vdyIsIm9wdGlvbnNNb2RpZmllclJFIiwibmF0aXZlT25SRSIsIlRSQU5TSVRJT04iLCJBTklNQVRJT04iLCJUcmFuc2l0aW9uIiwicmVzb2x2ZVRyYW5zaXRpb25Qcm9wcyIsIkRPTVRyYW5zaXRpb25Qcm9wc1ZhbGlkYXRvcnMiLCJkdXJhdGlvbiIsImVudGVyRnJvbUNsYXNzIiwiZW50ZXJBY3RpdmVDbGFzcyIsImVudGVyVG9DbGFzcyIsImFwcGVhckZyb21DbGFzcyIsImFwcGVhckFjdGl2ZUNsYXNzIiwiYXBwZWFyVG9DbGFzcyIsImxlYXZlRnJvbUNsYXNzIiwibGVhdmVBY3RpdmVDbGFzcyIsImxlYXZlVG9DbGFzcyIsIlRyYW5zaXRpb25Qcm9wc1ZhbGlkYXRvcnMiLCJiYXNlUHJvcHMiLCJkdXJhdGlvbnMiLCJOdW1iZXJPZiIsIm5vcm1hbGl6ZUR1cmF0aW9uIiwiZW50ZXJEdXJhdGlvbiIsImxlYXZlRHVyYXRpb24iLCJmaW5pc2hFbnRlciIsImlzQXBwZWFyIiwicmVtb3ZlVHJhbnNpdGlvbkNsYXNzIiwiZmluaXNoTGVhdmUiLCJtYWtlRW50ZXJIb29rIiwibmV4dEZyYW1lIiwiYWRkVHJhbnNpdGlvbkNsYXNzIiwid2hlblRyYW5zaXRpb25FbmRzIiwiY2FjaGVkVHJhbnNpdGlvbiIsInRyYW5zaXRpb25Qcm9wZXJ0eSIsImNscyIsImNsYXNzTGlzdCIsIl92dGMiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJlbmRJZCIsImV4cGVjdGVkVHlwZSIsImV4cGxpY2l0VGltZW91dCIsIl9lbmRJZCIsInJlc29sdmVJZk5vdFN0YWxlIiwidGltZW91dCIsInByb3BDb3VudCIsImdldFRyYW5zaXRpb25JbmZvIiwiZW5kRXZlbnQiLCJlbmRlZCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJvbkVuZCIsInN0eWxlcyIsImdldENvbXB1dGVkU3R5bGUiLCJnZXRTdHlsZVByb3BlcnRpZXMiLCJ0cmFuc2l0aW9uRGVsYXlzIiwidHJhbnNpdGlvbkR1cmF0aW9ucyIsInRyYW5zaXRpb25UaW1lb3V0IiwiZ2V0VGltZW91dCIsImFuaW1hdGlvbkRlbGF5cyIsImFuaW1hdGlvbkR1cmF0aW9ucyIsImFuaW1hdGlvblRpbWVvdXQiLCJoYXNUcmFuc2Zvcm0iLCJkZWxheXMiLCJ0b01zIiwicG9zaXRpb25NYXAiLCJuZXdQb3NpdGlvbk1hcCIsIlRyYW5zaXRpb25Hcm91cCIsIm1vdmVDbGFzcyIsImRpc3BsYXkiLCJoYXNDU1NUcmFuc2Zvcm0iLCJjYWxsUGVuZGluZ0NicyIsInJlY29yZFBvc2l0aW9uIiwibW92ZWRDaGlsZHJlbiIsImFwcGx5VHJhbnNsYXRpb24iLCJib2R5Iiwib2Zmc2V0SGVpZ2h0Iiwid2Via2l0VHJhbnNmb3JtIiwidHJhbnNpdGlvbkR1cmF0aW9uIiwiX21vdmVDYiIsInByb3BlcnR5TmFtZSIsImNzc1RyYW5zaXRpb25Qcm9wcyIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsIm9sZFBvcyIsIm5ld1BvcyIsImR4IiwibGVmdCIsImR5IiwidG9wIiwiZ2V0TW9kZWxBc3NpZ25lciIsIm9uQ29tcG9zaXRpb25TdGFydCIsImNvbXBvc2luZyIsIm9uQ29tcG9zaXRpb25FbmQiLCJpbml0RXZlbnQiLCJkaXNwYXRjaEV2ZW50Iiwidk1vZGVsVGV4dCIsIl9hc3NpZ24iLCJjYXN0VG9OdW1iZXIiLCJkb21WYWx1ZSIsImFjdGl2ZUVsZW1lbnQiLCJ2TW9kZWxDaGVja2JveCIsIm1vZGVsVmFsdWUiLCJfbW9kZWxWYWx1ZSIsImVsZW1lbnRWYWx1ZSIsImNoZWNrZWQiLCJmb3VuZCIsImZpbHRlcmVkIiwiZ2V0Q2hlY2tib3hWYWx1ZSIsInNldENoZWNrZWQiLCJ2TW9kZWxSYWRpbyIsInN5c3RlbU1vZGlmaWVycyIsIm1vZGlmaWVyR3VhcmRzIiwic3RvcFByb3BhZ2F0aW9uIiwicHJldmVudCIsInByZXZlbnREZWZhdWx0IiwiY3VycmVudFRhcmdldCIsImN0cmwiLCJjdHJsS2V5Iiwic2hpZnQiLCJzaGlmdEtleSIsImFsdCIsImFsdEtleSIsIm1ldGEiLCJtZXRhS2V5IiwiYnV0dG9uIiwibWlkZGxlIiwicmlnaHQiLCJleGFjdCIsIndpdGhNb2RpZmllcnMiLCJndWFyZCIsImtleU5hbWVzIiwiZXNjIiwic3BhY2UiLCJ1cCIsImRvd24iLCJ3aXRoS2V5cyIsImV2ZW50S2V5IiwiayIsInZTaG93IiwiX3ZvZCIsInNldERpc3BsYXkiLCJyZW5kZXJlck9wdGlvbnMiLCJwcmV2VmFsdWUiLCJuZXh0VmFsdWUiLCJ0cmFuc2l0aW9uQ2xhc3NlcyIsImNsYXNzTmFtZSIsInBhdGNoQ2xhc3MiLCJwYXRjaFN0eWxlIiwiaW52b2tlcnMiLCJfdmVpIiwiZXhpc3RpbmdJbnZva2VyIiwicGFyc2VOYW1lIiwiaW5pdGlhbFZhbHVlIiwiaW52b2tlciIsImF0dGFjaGVkIiwib3JpZ2luYWxTdG9wIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwiX3N0b3BwZWQiLCJwYXRjaFN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsImNyZWF0ZUludm9rZXIiLCJwYXRjaEV2ZW50IiwidGFnTmFtZSIsInNob3VsZFNldEFzUHJvcCIsInBhdGNoRE9NUHJvcCIsIl90cnVlVmFsdWUiLCJfZmFsc2VWYWx1ZSIsInJlbW92ZUF0dHJpYnV0ZU5TIiwic2V0QXR0cmlidXRlTlMiLCJpc0Jvb2xlYW4iLCJwYXRjaEF0dHIiLCJlbnN1cmVSZW5kZXJlciIsImNyZWF0ZVJlbmRlcmVyIiwib24iLCJvZmYiLCJNYXBTaGltIiwiZ2V0SW5kZXgiLCJjbGFzc18xIiwiX19lbnRyaWVzX18iLCJfYSIsImlzQnJvd3NlciIsImdsb2JhbCQxIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lJDEiLCJ0cmFuc2l0aW9uS2V5cyIsIm11dGF0aW9uT2JzZXJ2ZXJTdXBwb3J0ZWQiLCJNdXRhdGlvbk9ic2VydmVyIiwiUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyIiwiY29ubmVjdGVkXyIsIm11dGF0aW9uRXZlbnRzQWRkZWRfIiwibXV0YXRpb25zT2JzZXJ2ZXJfIiwib2JzZXJ2ZXJzXyIsIm9uVHJhbnNpdGlvbkVuZF8iLCJyZWZyZXNoIiwiZGVsYXkiLCJsZWFkaW5nQ2FsbCIsInRyYWlsaW5nQ2FsbCIsInJlc29sdmVQZW5kaW5nIiwidGltZW91dENhbGxiYWNrIiwidGhyb3R0bGUiLCJhZGRPYnNlcnZlciIsIm9ic2VydmVyIiwiY29ubmVjdF8iLCJyZW1vdmVPYnNlcnZlciIsIm9ic2VydmVycyIsImRpc2Nvbm5lY3RfIiwidXBkYXRlT2JzZXJ2ZXJzXyIsImFjdGl2ZU9ic2VydmVycyIsImdhdGhlckFjdGl2ZSIsImhhc0FjdGl2ZSIsImJyb2FkY2FzdEFjdGl2ZSIsIm9ic2VydmUiLCJjaGlsZExpc3QiLCJjaGFyYWN0ZXJEYXRhIiwic3VidHJlZSIsImRpc2Nvbm5lY3QiLCJfYiIsImdldEluc3RhbmNlIiwiaW5zdGFuY2VfIiwiZGVmaW5lQ29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJnZXRXaW5kb3dPZiIsIm93bmVyRG9jdW1lbnQiLCJkZWZhdWx0VmlldyIsImVtcHR5UmVjdCIsImNyZWF0ZVJlY3RJbml0IiwidG9GbG9hdCIsImdldEJvcmRlcnNTaXplIiwicG9zaXRpb25zIiwicG9zaXRpb24iLCJpc1NWR0dyYXBoaWNzRWxlbWVudCIsIlNWR0dyYXBoaWNzRWxlbWVudCIsImdldEJCb3giLCJnZXRDb250ZW50UmVjdCIsImJib3giLCJ3aWR0aCIsImhlaWdodCIsImdldFNWR0NvbnRlbnRSZWN0IiwiY2xpZW50V2lkdGgiLCJjbGllbnRIZWlnaHQiLCJwYWRkaW5ncyIsInBvc2l0aW9uc18xIiwiZ2V0UGFkZGluZ3MiLCJob3JpelBhZCIsInZlcnRQYWQiLCJib3R0b20iLCJib3hTaXppbmciLCJkb2N1bWVudEVsZW1lbnQiLCJpc0RvY3VtZW50RWxlbWVudCIsInZlcnRTY3JvbGxiYXIiLCJob3JpelNjcm9sbGJhciIsImdldEhUTUxFbGVtZW50Q29udGVudFJlY3QiLCJSZXNpemVPYnNlcnZhdGlvbiIsImJyb2FkY2FzdFdpZHRoIiwiYnJvYWRjYXN0SGVpZ2h0IiwiY29udGVudFJlY3RfIiwiaXNBY3RpdmUiLCJyZWN0IiwiYnJvYWRjYXN0UmVjdCIsIlJlc2l6ZU9ic2VydmVyRW50cnkiLCJyZWN0SW5pdCIsImNvbnRlbnRSZWN0IiwiQ29uc3RyIiwiRE9NUmVjdFJlYWRPbmx5IiwiY3JlYXRlUmVhZE9ubHlSZWN0IiwiUmVzaXplT2JzZXJ2ZXJTUEkiLCJjb250cm9sbGVyIiwiY2FsbGJhY2tDdHgiLCJhY3RpdmVPYnNlcnZhdGlvbnNfIiwib2JzZXJ2YXRpb25zXyIsImNhbGxiYWNrXyIsImNvbnRyb2xsZXJfIiwiY2FsbGJhY2tDdHhfIiwiRWxlbWVudCIsIm9ic2VydmF0aW9ucyIsInVub2JzZXJ2ZSIsImNsZWFyQWN0aXZlIiwiX3RoaXMiLCJvYnNlcnZhdGlvbiIsIlJlc2l6ZU9ic2VydmVyIiwiZ2V0V2luZG93IiwiZ2V0V2luZG93U2Nyb2xsIiwid2luIiwic2Nyb2xsTGVmdCIsInBhZ2VYT2Zmc2V0Iiwic2Nyb2xsVG9wIiwicGFnZVlPZmZzZXQiLCJpc0VsZW1lbnQiLCJpc0hUTUxFbGVtZW50IiwiSFRNTEVsZW1lbnQiLCJnZXROb2RlTmFtZSIsIm5vZGVOYW1lIiwiZ2V0RG9jdW1lbnRFbGVtZW50IiwiZ2V0V2luZG93U2Nyb2xsQmFyWCIsImlzU2Nyb2xsUGFyZW50IiwiX2dldENvbXB1dGVkU3R5bGUiLCJvdmVyZmxvdyIsIm92ZXJmbG93WCIsIm92ZXJmbG93WSIsImdldENvbXBvc2l0ZVJlY3QiLCJlbGVtZW50T3JWaXJ0dWFsRWxlbWVudCIsIm9mZnNldFBhcmVudCIsImlzRml4ZWQiLCJpc09mZnNldFBhcmVudEFuRWxlbWVudCIsInNjcm9sbCIsIm9mZnNldHMiLCJjbGllbnRMZWZ0IiwiY2xpZW50VG9wIiwiZ2V0TGF5b3V0UmVjdCIsIm9mZnNldExlZnQiLCJvZmZzZXRUb3AiLCJvZmZzZXRXaWR0aCIsImdldFBhcmVudE5vZGUiLCJhc3NpZ25lZFNsb3QiLCJob3N0IiwiZ2V0U2Nyb2xsUGFyZW50IiwibGlzdFNjcm9sbFBhcmVudHMiLCJzY3JvbGxQYXJlbnQiLCJpc0JvZHkiLCJ2aXN1YWxWaWV3cG9ydCIsInVwZGF0ZWRMaXN0IiwiaXNUYWJsZUVsZW1lbnQiLCJnZXRUcnVlT2Zmc2V0UGFyZW50IiwiaHRtbCIsImdldE9mZnNldFBhcmVudCIsImN1cnJlbnROb2RlIiwicGVyc3BlY3RpdmUiLCJ3aWxsQ2hhbmdlIiwiZ2V0Q29udGFpbmluZ0Jsb2NrIiwiYXV0byIsImJhc2VQbGFjZW1lbnRzIiwidmlld3BvcnQiLCJwb3BwZXIiLCJ2YXJpYXRpb25QbGFjZW1lbnRzIiwiYWNjIiwicGxhY2VtZW50IiwibW9kaWZpZXJQaGFzZXMiLCJvcmRlciIsInZpc2l0ZWQiLCJtb2RpZmllciIsInJlcXVpcmVzIiwicmVxdWlyZXNJZkV4aXN0cyIsImRlcE1vZGlmaWVyIiwicGVuZGluZyIsIkRFRkFVTFRfT1BUSU9OUyIsInN0cmF0ZWd5IiwiYXJlVmFsaWRFbGVtZW50cyIsIl9sZW4iLCJwb3BwZXJHZW5lcmF0b3IiLCJnZW5lcmF0b3JPcHRpb25zIiwiX2dlbmVyYXRvck9wdGlvbnMiLCJfZ2VuZXJhdG9yT3B0aW9ucyRkZWYiLCJkZWZhdWx0TW9kaWZpZXJzIiwiX2dlbmVyYXRvck9wdGlvbnMkZGVmMiIsImRlZmF1bHRPcHRpb25zIiwicmVmZXJlbmNlIiwib3JkZXJlZE1vZGlmaWVycyIsIm1vZGlmaWVyc0RhdGEiLCJlbGVtZW50cyIsImVmZmVjdENsZWFudXBGbnMiLCJpc0Rlc3Ryb3llZCIsInNldE9wdGlvbnMiLCJjbGVhbnVwTW9kaWZpZXJFZmZlY3RzIiwic2Nyb2xsUGFyZW50cyIsImNvbnRleHRFbGVtZW50IiwibWVyZ2VkIiwicGhhc2UiLCJvcmRlck1vZGlmaWVycyIsImVuYWJsZWQiLCJfcmVmMyIsIl9yZWYzJG9wdGlvbnMiLCJjbGVhbnVwRm4iLCJmb3JjZVVwZGF0ZSIsIl9zdGF0ZSRlbGVtZW50cyIsInJlY3RzIiwicmVzZXQiLCJfc3RhdGUkb3JkZXJlZE1vZGlmaWUiLCJfc3RhdGUkb3JkZXJlZE1vZGlmaWUyIiwiX29wdGlvbnMiLCJkZXN0cm95Iiwib25GaXJzdFVwZGF0ZSIsInBhc3NpdmUiLCJnZXRCYXNlUGxhY2VtZW50IiwiZ2V0VmFyaWF0aW9uIiwiZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50IiwiY29tcHV0ZU9mZnNldHMiLCJfcmVmIiwiYmFzZVBsYWNlbWVudCIsInZhcmlhdGlvbiIsImNvbW1vblgiLCJjb21tb25ZIiwibWFpbkF4aXMiLCJ1bnNldFNpZGVzIiwibWFwVG9TdHlsZXMiLCJfcmVmMiIsIl9PYmplY3QkYXNzaWduMiIsInBvcHBlclJlY3QiLCJncHVBY2NlbGVyYXRpb24iLCJhZGFwdGl2ZSIsInJvdW5kT2Zmc2V0cyIsImRwciIsImRldmljZVBpeGVsUmF0aW8iLCJyb3VuZE9mZnNldHNCeURQUiIsIl9yZWYzJHgiLCJfcmVmMyR5IiwiaGFzWCIsImhhc1kiLCJzaWRlWCIsInNpZGVZIiwiX09iamVjdCRhc3NpZ24iLCJjb21tb25TdHlsZXMiLCJoYXNoIiwiZ2V0T3Bwb3NpdGVQbGFjZW1lbnQiLCJtYXRjaGVkIiwiZ2V0T3Bwb3NpdGVWYXJpYXRpb25QbGFjZW1lbnQiLCJjb250YWlucyIsInJvb3ROb2RlIiwiZ2V0Um9vdE5vZGUiLCJTaGFkb3dSb290IiwiaXNTYW1lTm9kZSIsInJlY3RUb0NsaWVudFJlY3QiLCJnZXRDbGllbnRSZWN0RnJvbU1peGVkVHlwZSIsImNsaXBwaW5nUGFyZW50IiwiZ2V0Vmlld3BvcnRSZWN0IiwiZ2V0SW5uZXJCb3VuZGluZ0NsaWVudFJlY3QiLCJ3aW5TY3JvbGwiLCJzY3JvbGxXaWR0aCIsInNjcm9sbEhlaWdodCIsImRpcmVjdGlvbiIsImdldERvY3VtZW50UmVjdCIsIm1lcmdlUGFkZGluZ09iamVjdCIsInBhZGRpbmdPYmplY3QiLCJleHBhbmRUb0hhc2hNYXAiLCJoYXNoTWFwIiwiZGV0ZWN0T3ZlcmZsb3ciLCJfb3B0aW9ucyRwbGFjZW1lbnQiLCJfb3B0aW9ucyRib3VuZGFyeSIsImJvdW5kYXJ5IiwiX29wdGlvbnMkcm9vdEJvdW5kYXJ5Iiwicm9vdEJvdW5kYXJ5IiwiX29wdGlvbnMkZWxlbWVudENvbnRlIiwiZWxlbWVudENvbnRleHQiLCJfb3B0aW9ucyRhbHRCb3VuZGFyeSIsImFsdEJvdW5kYXJ5IiwiX29wdGlvbnMkcGFkZGluZyIsInBhZGRpbmciLCJhbHRDb250ZXh0IiwicmVmZXJlbmNlRWxlbWVudCIsImNsaXBwaW5nQ2xpZW50UmVjdCIsIm1haW5DbGlwcGluZ1BhcmVudHMiLCJjbGlwcGluZ1BhcmVudHMiLCJjbGlwcGVyRWxlbWVudCIsImdldENsaXBwaW5nUGFyZW50cyIsImZpcnN0Q2xpcHBpbmdQYXJlbnQiLCJjbGlwcGluZ1JlY3QiLCJhY2NSZWN0IiwiZ2V0Q2xpcHBpbmdSZWN0IiwicmVmZXJlbmNlQ2xpZW50UmVjdCIsInBvcHBlck9mZnNldHMiLCJwb3BwZXJDbGllbnRSZWN0IiwiZWxlbWVudENsaWVudFJlY3QiLCJvdmVyZmxvd09mZnNldHMiLCJvZmZzZXREYXRhIiwibXVsdGlwbHkiLCJ3aXRoaW4iLCJnZXRTaWRlT2Zmc2V0cyIsInByZXZlbnRlZE9mZnNldHMiLCJpc0FueVNpZGVGdWxseUNsaXBwZWQiLCJzaWRlIiwiX29wdGlvbnMkc2Nyb2xsIiwiX29wdGlvbnMkcmVzaXplIiwicmVzaXplIiwiX3JlZjQiLCJfb3B0aW9ucyRncHVBY2NlbGVyYXQiLCJfb3B0aW9ucyRhZGFwdGl2ZSIsIl9vcHRpb25zJHJvdW5kT2Zmc2V0cyIsImFycm93IiwiaW5pdGlhbFN0eWxlcyIsIm1hcmdpbiIsInByb3BlcnR5IiwiYXR0cmlidXRlIiwiX29wdGlvbnMkb2Zmc2V0IiwiaW52ZXJ0RGlzdGFuY2UiLCJza2lkZGluZyIsImRpc3RhbmNlIiwiZGlzdGFuY2VBbmRTa2lkZGluZ1RvWFkiLCJfZGF0YSRzdGF0ZSRwbGFjZW1lbnQiLCJfc2tpcCIsIl9vcHRpb25zJG1haW5BeGlzIiwiY2hlY2tNYWluQXhpcyIsIl9vcHRpb25zJGFsdEF4aXMiLCJhbHRBeGlzIiwiY2hlY2tBbHRBeGlzIiwic3BlY2lmaWVkRmFsbGJhY2tQbGFjZW1lbnRzIiwiZmFsbGJhY2tQbGFjZW1lbnRzIiwiX29wdGlvbnMkZmxpcFZhcmlhdGlvIiwiZmxpcFZhcmlhdGlvbnMiLCJhbGxvd2VkQXV0b1BsYWNlbWVudHMiLCJwcmVmZXJyZWRQbGFjZW1lbnQiLCJvcHBvc2l0ZVBsYWNlbWVudCIsImdldEV4cGFuZGVkRmFsbGJhY2tQbGFjZW1lbnRzIiwicGxhY2VtZW50cyIsIl9vcHRpb25zJGFsbG93ZWRBdXRvUCIsImFsbG93ZWRQbGFjZW1lbnRzIiwib3ZlcmZsb3dzIiwiY29tcHV0ZUF1dG9QbGFjZW1lbnQiLCJyZWZlcmVuY2VSZWN0IiwiY2hlY2tzTWFwIiwibWFrZUZhbGxiYWNrQ2hlY2tzIiwiZmlyc3RGaXR0aW5nUGxhY2VtZW50IiwiX2Jhc2VQbGFjZW1lbnQiLCJpc1N0YXJ0VmFyaWF0aW9uIiwiaXNWZXJ0aWNhbCIsIm1haW5WYXJpYXRpb25TaWRlIiwiYWx0VmFyaWF0aW9uU2lkZSIsImNoZWNrcyIsImV2ZXJ5IiwiY2hlY2siLCJfbG9vcCIsImZpdHRpbmdQbGFjZW1lbnQiLCJmaW5kIiwiX29wdGlvbnMkdGV0aGVyIiwidGV0aGVyIiwiX29wdGlvbnMkdGV0aGVyT2Zmc2V0IiwidGV0aGVyT2Zmc2V0IiwiaXNCYXNlUGxhY2VtZW50IiwidGV0aGVyT2Zmc2V0VmFsdWUiLCJtYWluU2lkZSIsImFsdFNpZGUiLCJhZGRpdGl2ZSIsIm1heExlbiIsImFycm93RWxlbWVudCIsImFycm93UmVjdCIsImFycm93UGFkZGluZ09iamVjdCIsImFycm93UGFkZGluZ01pbiIsImFycm93UGFkZGluZ01heCIsImFycm93TGVuIiwibWluT2Zmc2V0IiwibWF4T2Zmc2V0IiwiYXJyb3dPZmZzZXRQYXJlbnQiLCJjbGllbnRPZmZzZXQiLCJvZmZzZXRNb2RpZmllclZhbHVlIiwidGV0aGVyTWluIiwidGV0aGVyTWF4IiwicHJldmVudGVkT2Zmc2V0IiwiX21haW5TaWRlIiwiX2FsdFNpZGUiLCJfb2Zmc2V0IiwiX3ByZXZlbnRlZE9mZnNldCIsIl9zdGF0ZSRtb2RpZmllcnNEYXRhJCIsIm1pblByb3AiLCJtYXhQcm9wIiwiZW5kRGlmZiIsInN0YXJ0RGlmZiIsImNsaWVudFNpemUiLCJjZW50ZXJUb1JlZmVyZW5jZSIsImNlbnRlciIsImF4aXNQcm9wIiwiY2VudGVyT2Zmc2V0IiwiX29wdGlvbnMkZWxlbWVudCIsInByZXZlbnRPdmVyZmxvdyIsInJlZmVyZW5jZU92ZXJmbG93IiwicG9wcGVyQWx0T3ZlcmZsb3ciLCJyZWZlcmVuY2VDbGlwcGluZ09mZnNldHMiLCJwb3BwZXJFc2NhcGVPZmZzZXRzIiwiaXNSZWZlcmVuY2VIaWRkZW4iLCJoYXNQb3BwZXJFc2NhcGVkIiwiX2V4dGVuZHMiLCJfZ2V0UHJvdG90eXBlT2YiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIl9zZXRQcm90b3R5cGVPZiIsIl9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QiLCJjb25zdHJ1Y3QiLCJzaGFtIiwiX2NvbnN0cnVjdCIsIlBhcmVudCIsIkNsYXNzIiwiX3dyYXBOYXRpdmVTdXBlciIsIl9jYWNoZSIsIl9pc05hdGl2ZUZ1bmN0aW9uIiwiV3JhcHBlciIsImZvcm1hdFJlZ0V4cCIsImNvbnZlcnRGaWVsZHNFcnJvciIsImVycm9ycyIsImZpZWxkcyIsImZpZWxkIiwiaXNFbXB0eVZhbHVlIiwiaXNOYXRpdmVTdHJpbmdUeXBlIiwiYXN5bmNTZXJpYWxBcnJheSIsIm9yaWdpbmFsIiwiZW52IiwiQXN5bmNWYWxpZGF0aW9uRXJyb3IiLCJfRXJyb3IiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJjb21wbGVtZW50RXJyb3IiLCJydWxlIiwib2UiLCJmdWxsRmllbGQiLCJkZWVwTWVyZ2UiLCJyZXF1aXJlZCIsIm1lc3NhZ2VzIiwicGF0dGVybiIsImVtYWlsIiwidXJsIiwiaGV4IiwiaW50ZWdlciIsInJlZ2V4cCIsImdldFllYXIiLCJydWxlcyIsIndoaXRlc3BhY2UiLCJydWxlVHlwZSIsInJhbmdlIiwibnVtIiwibGFzdEluZGV4IiwibWlzbWF0Y2giLCJ0eXBlJDEiLCJ2YWxpZGF0b3JzIiwiZGF0ZU9iamVjdCIsImFueSIsIm5ld01lc3NhZ2VzIiwiaW52YWxpZCIsIlNjaGVtYSIsImRlc2NyaXB0b3IiLCJfbWVzc2FnZXMiLCJkZWZpbmUiLCJ2YWxpZGF0ZSIsInNvdXJjZV8iLCJvYyIsIm1lc3NhZ2VzJDEiLCJzZXJpZXMiLCJ2YWxpZGF0b3IiLCJnZXRWYWxpZGF0aW9uTWV0aG9kIiwiZXJyb3JGaWVsZHMiLCJvYmpBcnIiLCJvcHRpb24iLCJfcGVuZGluZyIsInJlamVjdCIsImZsYXR0ZW5PYmpBcnIiLCJmaXJzdEZpZWxkcyIsIm9iakFycktleXMiLCJvYmpBcnJMZW5ndGgiLCJ0b3RhbCIsInJlc3VsdHMiLCJhc3luY1BhcmFsbGVsQXJyYXkiLCJhc3luY01hcCIsImRvSXQiLCJkZWZhdWx0RmllbGQiLCJhZGRGdWxsZmllbGQiLCJzY2hlbWEiLCJzdXBwcmVzc1dhcm5pbmciLCJ3YXJuaW5nIiwiZmllbGRzU2NoZW1hIiwiZmllbGRTY2hlbWEiLCJlcnJzIiwiZmluYWxFcnJvcnMiLCJhc3luY1ZhbGlkYXRvciIsIl9lcnJvcnMiLCJjb21wbGV0ZSIsIm1lc3NhZ2VJbmRleCIsInJlZ2lzdGVyIiwia2UiLCJzdWNjZXNzIiwiQ2UiLCJ0aXRsZSIsImRlc2NyaXB0aW9uIiwiY2xvc2FibGUiLCJjbG9zZVRleHQiLCJzaG93SWNvbiIsInZpc2libGUiLCJ0eXBlQ2xhc3MiLCJpY29uQ2xhc3MiLCJpc0JpZ0ljb24iLCJpc0JvbGRUaXRsZSIsImNsb3NlIiwieGUiLCJ3ZSIsInJvbGUiLCJvbkNsaWNrIiwiX19maWxlIiwiU2UiLCJFZSIsIk1lIiwiVGUiLCJOZSIsIkRlIiwiT2UiLCJQZSIsIlZlIiwiSWUiLCJBZSIsIkJlIiwiTGUiLCJ6ZSIsIkZlIiwiJGUiLCJSZSIsInJhbmRvbSIsIkhlIiwiV2UiLCJqZSIsIktlIiwiWWUiLCJxZSIsIiRFTEVNRU5UIiwiVWUiLCJHZSIsIlhlIiwiUWUiLCJaZSIsIkplIiwiZXQiLCJ0dCIsImV4Y2x1ZGVMaXN0ZW5lcnMiLCJleGNsdWRlS2V5cyIsImx0IiwiYXQiLCJudCIsIm90IiwiaXQiLCJydCIsInN0IiwidXQiLCJkdCIsImN0IiwicHQiLCJodCIsInZpc2liaWxpdHkiLCJ2dCIsInN1cGVyIiwiZnQiLCJ0YWIiLCJiYWNrc3BhY2UiLCJndCIsImJ0IiwicXVlcnlTZWxlY3RvckFsbCIsInl0IiwidGFiSW5kZXgiLCJnZXRBdHRyaWJ1dGUiLCJocmVmIiwicmVsIiwia3QiLCJ4dCIsIklnbm9yZVV0aWxGb2N1c0NoYW5nZXMiLCJmb2N1cyIsIkN0IiwiZm9jdXNGaXJzdERlc2NlbmRhbnQiLCJmb2N1c0xhc3REZXNjZW5kYW50Iiwid3QiLCJjb2RlIiwiaGFuZGxlQ2xvc2UiLCJfdCIsIlN0IiwiRXQiLCJwb3BwZXJSZWYiLCJkb2N1bWVudEhhbmRsZXIiLCJNdCIsImJpbmRpbmdGbiIsIlR0IiwiY2xlYXJJbnRlcnZhbCIsInNldEludGVydmFsIiwiTnQiLCJEdCIsIk90Iiwib25tb3VzZXdoZWVsIiwiUHQiLCJWdCIsInZhbGlkYXRpbmciLCJJdCIsIkF0IiwienQiLCJtb2RlbCIsImxhYmVsUG9zaXRpb24iLCJsYWJlbFdpZHRoIiwibGFiZWxTdWZmaXgiLCJpbmxpbmUiLCJpbmxpbmVNZXNzYWdlIiwic3RhdHVzSWNvbiIsInNob3dNZXNzYWdlIiwidmFsaWRhdGVPblJ1bGVDaGFuZ2UiLCJoaWRlUmVxdWlyZWRBc3RlcmlzayIsInJlbW92ZVZhbGlkYXRlRXZlbnRzIiwiYWRkVmFsaWRhdGVFdmVudHMiLCJyZXNldEZpZWxkIiwid2FybiIsImNsZWFyVmFsaWRhdGUiLCJmb3JtTWl0dCIsInJlc2V0RmllbGRzIiwidmFsaWRhdGVGaWVsZCIsImF1dG9MYWJlbFdpZHRoIiwicmVnaXN0ZXJMYWJlbFdpZHRoIiwiZGVyZWdpc3RlckxhYmVsV2lkdGgiLCJGdCIsIiR0IiwiUnQiLCJwYWRkaW5nU2l6ZSIsImJvcmRlclNpemUiLCJjb250ZXh0U3R5bGUiLCJnZXRQcm9wZXJ0eVZhbHVlIiwibWluSGVpZ2h0IiwiSHQiLCJzdWZmaXgiLCJwcmVmaXgiLCJXdCIsImF1dG9zaXplIiwiYXV0b2NvbXBsZXRlIiwiZm9ybSIsImNsZWFyYWJsZSIsInNob3dQYXNzd29yZCIsInNob3dXb3JkTGltaXQiLCJzdWZmaXhJY29uIiwicHJlZml4SWNvbiIsImxhYmVsIiwidGFiaW5kZXgiLCJ2YWxpZGF0ZUV2ZW50IiwiQyIsIkUiLCJ2YWxpZGF0ZVN0YXRlIiwiVCIsIk4iLCJPIiwibWF4bGVuZ3RoIiwiUCIsIlYiLCJJIiwiQiIsIm1pblJvd3MiLCJtYXhSb3dzIiwiRiIsIlIiLCJmb3JtSXRlbU1pdHQiLCJpbnB1dCIsInRleHRhcmVhIiwiaW5wdXRTaXplIiwidmFsaWRhdGVJY29uIiwidGV4dGFyZWFTdHlsZSIsImlucHV0RGlzYWJsZWQiLCJzaG93Q2xlYXIiLCJzaG93UHdkVmlzaWJsZSIsImlzV29yZExpbWl0VmlzaWJsZSIsInVwcGVyTGltaXQiLCJ0ZXh0TGVuZ3RoIiwiaG92ZXJpbmciLCJpbnB1dEV4Y2VlZCIsInBhc3N3b3JkVmlzaWJsZSIsImlucHV0T3JUZXh0YXJlYSIsImhhbmRsZUlucHV0IiwiaGFuZGxlQ2hhbmdlIiwiaGFuZGxlRm9jdXMiLCJoYW5kbGVCbHVyIiwiaGFuZGxlQ29tcG9zaXRpb25TdGFydCIsImhhbmRsZUNvbXBvc2l0aW9uVXBkYXRlIiwiaGFuZGxlQ29tcG9zaXRpb25FbmQiLCJoYW5kbGVQYXNzd29yZFZpc2libGUiLCJibHVyIiwiZ2V0U3VmZml4VmlzaWJsZSIsIm9uTW91c2VMZWF2ZSIsIm9uTW91c2VFbnRlciIsImhhbmRsZUtleWRvd24iLCJqdCIsIkt0IiwiWXQiLCJxdCIsIlV0IiwiR3QiLCJYdCIsIlF0IiwiYXBwZW5kIiwib25Nb3VzZWVudGVyIiwib25Nb3VzZWxlYXZlIiwib25Db21wb3NpdGlvbnN0YXJ0Iiwib25Db21wb3NpdGlvbnVwZGF0ZSIsIm9uQ29tcG9zaXRpb25lbmQiLCJvbklucHV0Iiwib25Gb2N1cyIsIm9uQmx1ciIsIm9uQ2hhbmdlIiwib25LZXlkb3duIiwib25Nb3VzZWRvd24iLCJadCIsIl9fcmVzaXplTGlzdGVuZXJzX18iLCJKdCIsIl9fcm9fXyIsInRsIiwidmVydGljYWwiLCJzY3JvbGxTaXplIiwiY2xpZW50IiwiaG9yaXpvbnRhbCIsImxsIiwiYmFyIiwibXNUcmFuc2Zvcm0iLCJhbCIsIm9uc2VsZWN0c3RhcnQiLCJubCIsIkJhciIsIm5hdGl2ZSIsIndyYXBTdHlsZSIsIndyYXBDbGFzcyIsInZpZXdDbGFzcyIsInZpZXdTdHlsZSIsIm5vcmVzaXplIiwibWFyZ2luUmlnaHQiLCJtYXJnaW5Cb3R0b20iLCJtb3ZlWCIsIm1vdmVZIiwic2l6ZVdpZHRoIiwic2l6ZUhlaWdodCIsImd1dHRlciIsImhhbmRsZVNjcm9sbCIsIm9sIiwiaWwiLCJybCIsInNsIiwib25TY3JvbGwiLCJURVhUIiwiQ0xBU1MiLCJTVFlMRSIsIlBST1BTIiwiRlVMTF9QUk9QUyIsIkhZRFJBVEVfRVZFTlRTIiwiU1RBQkxFX0ZSQUdNRU5UIiwiS0VZRURfRlJBR01FTlQiLCJVTktFWUVEX0ZSQUdNRU5UIiwiTkVFRF9QQVRDSCIsIkRZTkFNSUNfU0xPVFMiLCJIT0lTVEVEIiwiQkFJTCIsInVsIiwiZGwiLCJjbCIsInBsIiwiZ2wiLCJkb09uTW9kYWxDbGljayIsImhsIiwidmwiLCJtbCIsIm1vZGFsRG9tIiwiZmwiLCJtb2RhbEZhZGUiLCJ6SW5kZXgiLCJkZXJlZ2lzdGVyIiwibmV4dFpJbmRleCIsIm1vZGFsU3RhY2siLCJjbG9zZU9uQ2xpY2tNb2RhbCIsIm9wZW5Nb2RhbCIsIm1vZGFsQ2xhc3MiLCJjbG9zZU1vZGFsIiwiYmwiLCJhcnJvd09mZnNldCIsInlsIiwiY2xvc2VPblByZXNzRXNjYXBlIiwiaGFuZGxlQWN0aW9uIiwiREFSSyIsIkxJR0hUIiwia2wiLCJhcHBlbmRUb0JvZHkiLCJib3VuZGFyaWVzUGFkZGluZyIsImNsb3NlRGVsYXkiLCJjdXRvZmYiLCJlbnRlcmFibGUiLCJoaWRlQWZ0ZXIiLCJtYW51YWxNb2RlIiwic2hvd0FmdGVyIiwicG9wcGVyQ2xhc3MiLCJwdXJlIiwicG9wcGVyT3B0aW9ucyIsInNob3dBcnJvdyIsInN0b3BQb3BwZXJNb3VzZUV2ZW50IiwiQ2wiLCJkb0Rlc3Ryb3kiLCJzaG93IiwiaGlkZSIsIm9uUG9wcGVyTW91c2VFbnRlciIsIm9uUG9wcGVyTW91c2VMZWF2ZSIsImluaXRpYWxpemVQb3BwZXIiLCJpc01hbnVhbE1vZGUiLCJhcnJvd1JlZiIsImV2ZW50cyIsInBvcHBlcklkIiwicG9wcGVySW5zdGFuY2UiLCJwb3BwZXJTdHlsZSIsInRyaWdnZXJSZWYiLCJ4bCIsIm9uTW91c2VEb3duIiwib25Nb3VzZVVwIiwid2wiLCJfbCIsIlNsIiwiYXJpYURlc2NyaWJlZGJ5IiwiRWwiLCJFbFBvcHBlciIsIkVsSW5wdXQiLCJFbFNjcm9sbGJhciIsImNsaWNrb3V0c2lkZSIsInZhbHVlS2V5IiwiZmV0Y2hTdWdnZXN0aW9ucyIsInRyaWdnZXJPbkZvY3VzIiwic2VsZWN0V2hlblVubWF0Y2hlZCIsImhpZGVMb2FkaW5nIiwicG9wcGVyQXBwZW5kVG9Cb2R5IiwiaGlnaGxpZ2h0Rmlyc3RJdGVtIiwic3VnZ2VzdGlvbnMiLCJoaWdobGlnaHRlZEluZGV4IiwiZHJvcGRvd25XaWR0aCIsInN1Z2dlc3Rpb25EaXNhYmxlZCIsImxvYWRpbmciLCJpbnB1dFJlZiIsInJlZ2lvblJlZiIsInN1Z2dlc3Rpb25WaXNpYmxlIiwic3VnZ2VzdGlvbkxvYWRpbmciLCJnZXREYXRhIiwiaGFuZGxlQ2xlYXIiLCJoYW5kbGVLZXlFbnRlciIsImhpZ2hsaWdodCIsIk1sIiwiVGwiLCJvbkNsZWFyIiwib3V0bGluZSIsImhpZ2hsaWdodGVkIiwiTmwiLCJzaGFwZSIsImljb24iLCJzcmMiLCJzcmNTZXQiLCJmaXQiLCJsaW5lSGVpZ2h0Iiwib2JqZWN0Rml0IiwiaGFzTG9hZEVycm9yIiwiYXZhdGFyQ2xhc3MiLCJzaXplU3R5bGUiLCJmaXRTdHlsZSIsInNyY3NldCIsIm9uRXJyb3IiLCJEbCIsInBvdyIsIk9sIiwidmlzaWJpbGl0eUhlaWdodCIsInN0eWxlQm90dG9tIiwic3R5bGVSaWdodCIsImhhbmRsZUNsaWNrIiwiUGwiLCJWbCIsImlzRG90IiwiaGlkZGVuIiwiSWwiLCJBbCIsInNlcGFyYXRvciIsInNlcGFyYXRvckNsYXNzIiwiYnJlYWRjcnVtYiIsIkJsIiwiTGwiLCIkcm91dGVyIiwibGluayIsInpsIiwiRmwiLCIkbCIsIm5hdGl2ZVR5cGUiLCJwbGFpbiIsImF1dG9mb2N1cyIsImNpcmNsZSIsImJ1dHRvblNpemUiLCJidXR0b25EaXNhYmxlZCIsIlJsIiwiSGwiLCJXbCIsImpsIiwiS2wiLCJjb2xvcnBpY2tlciIsImNvbmZpcm0iLCJkYXRlcGlja2VyIiwidG9kYXkiLCJzZWxlY3REYXRlIiwic2VsZWN0VGltZSIsInN0YXJ0RGF0ZSIsInN0YXJ0VGltZSIsImVuZERhdGUiLCJlbmRUaW1lIiwicHJldlllYXIiLCJuZXh0WWVhciIsInByZXZNb250aCIsIm5leHRNb250aCIsIm1vbnRoMSIsIm1vbnRoMiIsIm1vbnRoMyIsIm1vbnRoNCIsIm1vbnRoNSIsIm1vbnRoNiIsIm1vbnRoNyIsIm1vbnRoOCIsIm1vbnRoOSIsIm1vbnRoMTAiLCJtb250aDExIiwibW9udGgxMiIsInN1biIsIm1vbiIsInR1ZSIsIndlZCIsInRodSIsImZyaSIsInNhdCIsImphbiIsImZlYiIsIm1hciIsImFwciIsIm1heSIsImp1biIsImp1bCIsImF1ZyIsInNlcCIsIm9jdCIsIm5vdiIsImRlYyIsIm5vTWF0Y2giLCJub0RhdGEiLCJjYXNjYWRlciIsInBhZ2luYXRpb24iLCJnb3RvIiwicGFnZXNpemUiLCJwYWdlQ2xhc3NpZmllciIsIm1lc3NhZ2Vib3giLCJ1cGxvYWQiLCJkZWxldGVUaXAiLCJwcmV2aWV3IiwiY29udGludWUiLCJ0YWJsZSIsImVtcHR5VGV4dCIsImNvbmZpcm1GaWx0ZXIiLCJyZXNldEZpbHRlciIsImNsZWFyRmlsdGVyIiwic3VtVGV4dCIsInRyZWUiLCJ0cmFuc2ZlciIsInRpdGxlcyIsImZpbHRlclBsYWNlaG9sZGVyIiwibm9DaGVja2VkRm9ybWF0IiwiaGFzQ2hlY2tlZEZvcm1hdCIsImltYWdlIiwicGFnZUhlYWRlciIsInBvcGNvbmZpcm0iLCJjb25maXJtQnV0dG9uVGV4dCIsImNhbmNlbEJ1dHRvblRleHQiLCJZbCIsInFsIiwiVWwiLCJkYXRldGltZSIsIm1vbnRocmFuZ2UiLCJkYXRlcmFuZ2UiLCJkYXRldGltZXJhbmdlIiwiR2wiLCJjbGVhckljb24iLCJlZGl0YWJsZSIsInJhbmdlU2VwYXJhdG9yIiwic3RhcnRQbGFjZWhvbGRlciIsImVuZFBsYWNlaG9sZGVyIiwiZGVmYXVsdFRpbWUiLCJpc1JhbmdlIiwiZGlzYWJsZWRIb3VycyIsImRpc2FibGVkTWludXRlcyIsImRpc2FibGVkU2Vjb25kcyIsImRpc2FibGVkRGF0ZSIsImNlbGxDbGFzc05hbWUiLCJzaG9ydGN1dHMiLCJhcnJvd0NvbnRyb2wiLCJYbCIsIlFsIiwiWmwiLCJnZXREZWZhdWx0VmFsdWUiLCJnZXRSYW5nZUF2YWxpYWJsZVRpbWUiLCJwYW5lbFJlYWR5IiwicGFyc2VVc2VySW5wdXQiLCJmb3JtYXRUb1N0cmluZyIsImlzVmFsaWRWYWx1ZSIsImlzRGF0ZXNQaWNrZXIiLCJoYW5kbGVFbmRDaGFuZ2UiLCJoYW5kbGVTdGFydENoYW5nZSIsImhhbmRsZVN0YXJ0SW5wdXQiLCJoYW5kbGVFbmRJbnB1dCIsIm9uVXNlcklucHV0Iiwib25DbGlja091dHNpZGUiLCJwaWNrZXJTaXplIiwiaXNSYW5nZUlucHV0Iiwib25DbGVhckljb25DbGljayIsInNob3dDbG9zZSIsInRyaWdnZXJDbGFzcyIsIm9uUGljayIsInBpY2tlclZpc2libGUiLCJwaWNrZXJBY3R1YWxWaXNpYmxlIiwiZGlzcGxheVZhbHVlIiwicGFyc2VkVmFsdWUiLCJzZXRTZWxlY3Rpb25SYW5nZSIsInJlZkNvbnRhaW5lciIsInBpY2tlckRpc2FibGVkIiwib25TZXRQaWNrZXJPcHRpb24iLCJKbCIsIm9uU2VsZWN0UmFuZ2UiLCJlYSIsInRhIiwibGEiLCJnZXRIb3Vyc0xpc3QiLCJnZXRNaW51dGVzTGlzdCIsImdldFNlY29uZHNMaXN0IiwiYWEiLCJnZXRBdmFsaWFibGVIb3VycyIsImdldEF2YWxpYWJsZU1pbnV0ZXMiLCJnZXRBdmFsaWFibGVTZWNvbmRzIiwibmEiLCJyZXBlYXRDbGljayIsInNwaW5uZXJEYXRlIiwic2hvd1NlY29uZHMiLCJhbVBtTW9kZSIsImhvdXIiLCJtaW51dGUiLCJzZWNvbmQiLCJvbnNjcm9sbCIsImdldFJlZklkIiwic3Bpbm5lckl0ZW1zIiwiY3VycmVudFNjcm9sbGJhciIsImhvdXJzTGlzdCIsIm1pbnV0ZXNMaXN0IiwiYXJyb3dIb3VyTGlzdCIsImFycm93TWludXRlTGlzdCIsImFycm93U2Vjb25kTGlzdCIsImdldEFtUG1GbGFnIiwiZW1pdFNlbGVjdFJhbmdlIiwiYWRqdXN0Q3VycmVudFNwaW5uZXIiLCJ0eXBlSXRlbUhlaWdodCIsImxpc3RIb3Vyc1JlZiIsImxpc3RNaW51dGVzUmVmIiwibGlzdFNlY29uZHNSZWYiLCJvbkluY3JlYXNlQ2xpY2siLCJvbkRlY3JlYXNlQ2xpY2siLCJzZWNvbmRzTGlzdCIsInRpbWVQYXJ0c01hcCIsImFycm93TGlzdE1hcCIsImxpc3RNYXAiLCJvYSIsImlhIiwicmEiLCJvbk1vdXNlbW92ZSIsInNhIiwiVGltZVNwaW5uZXIiLCJhY3R1YWxWaXNpYmxlIiwiZGF0ZXRpbWVSb2xlIiwic3RhcnRfZW1pdFNlbGVjdFJhbmdlIiwibWluX3Njcm9sbERvd24iLCJ0cmFuc2l0aW9uTmFtZSIsIm9uU2V0T3B0aW9uIiwiaGFuZGxlQ29uZmlybSIsIm1pbGxpc2Vjb25kIiwiaGFuZGxlQ2FuY2VsIiwidWEiLCJjYSIsInBhIiwiZW5kX2VtaXRTZWxlY3RSYW5nZSIsInNldE1heFNlbGVjdGlvblJhbmdlIiwic2V0TWluU2VsZWN0aW9uUmFuZ2UiLCJidG5Db25maXJtRGlzYWJsZWQiLCJtaW5EYXRlIiwibWF4RGF0ZSIsImhhbmRsZU1pbkNoYW5nZSIsImhhbmRsZU1heENoYW5nZSIsIm1pblNlbGVjdGFibGVSYW5nZSIsIm1heFNlbGVjdGFibGVSYW5nZSIsImRpc2FibGVkSG91cnNfIiwiZGlzYWJsZWRNaW51dGVzXyIsImRpc2FibGVkU2Vjb25kc18iLCJoYSIsInZhIiwibWEiLCJmYSIsImdhIiwiYmEiLCJ5YSIsImthIiwiQ2EiLCJ4YSIsIndhIiwic2VsZWN0ZWREYXkiLCJoaWRlSGVhZGVyIiwiaXNJblJhbmdlIiwid2Vla0RheXMiLCJyb3dzIiwiZ2V0Q2VsbENsYXNzIiwicGlja0RheSIsImdldFNsb3REYXRhIiwiaXNTZWxlY3RlZCIsIlNhIiwiRWEiLCJjZWxsc3BhY2luZyIsImNlbGxwYWRkaW5nIiwiTWEiLCJEYXRlVGFibGUiLCJFbEJ1dHRvbiIsIkVsQnV0dG9uR3JvdXAiLCJjdXJNb250aERhdGVQcmVmaXgiLCJpMThuRGF0ZSIsInJlYWxTZWxlY3RlZERheSIsInZhbGlkYXRlZFJhbmdlIiwiVGEiLCJOYSIsIkRhIiwiT2EiLCJQYSIsIlZhIiwiZGF0ZUNlbGwiLCJJYSIsImhlYWRlciIsImJvZHlTdHlsZSIsInNoYWRvdyIsIkFhIiwiQmEiLCJpbml0aWFsSW5kZXgiLCJhdXRvcGxheSIsImludGVydmFsIiwiaW5kaWNhdG9yUG9zaXRpb24iLCJpbmRpY2F0b3IiLCJsb29wIiwiYWN0aXZlSW5kZXgiLCJjb250YWluZXJXaWR0aCIsInRpbWVyIiwiaG92ZXIiLCJ0cmFuc2xhdGVJdGVtIiwiaXRlbXMiLCJ1cGRhdGVJdGVtcyIsInNldEFjdGl2ZUl0ZW0iLCJhcnJvd0Rpc3BsYXkiLCJjYXJvdXNlbENsYXNzZXMiLCJpbmRpY2F0b3JzQ2xhc3NlcyIsImhhc0xhYmVsIiwiaGFuZGxlTW91c2VFbnRlciIsImhhbmRsZU1vdXNlTGVhdmUiLCJoYW5kbGVJbmRpY2F0b3JDbGljayIsInRocm90dGxlZEFycm93Q2xpY2siLCJ0aHJvdHRsZWRJbmRpY2F0b3JIb3ZlciIsImhhbmRsZUJ1dHRvbkVudGVyIiwiaW5TdGFnZSIsImhhbmRsZUJ1dHRvbkxlYXZlIiwiTGEiLCJ6YSIsIkZhIiwiJGEiLCJSYSIsInRyYW5zbGF0ZSIsInNjYWxlIiwicmVhZHkiLCJhbmltYXRpbmciLCJpdGVtU3R5bGUiLCJoYW5kbGVJdGVtQ2xpY2siLCJIYSIsIldhIiwiaXNHcm91cCIsImNoZWNrYm94R3JvdXAiLCJlbEZvcm0iLCJFTEVNRU5UIiwiZWxGb3JtSXRlbVNpemUiLCJlbEZvcm1JdGVtIiwiamEiLCJpc0xpbWl0RXhjZWVkZWQiLCJjaGFuZ2VFdmVudCIsImlzQ2hlY2tlZCIsImNoZWNrYm94U2l6ZSIsImNoZWNrYm94R3JvdXBTaXplIiwidHJ1ZUxhYmVsIiwiaXNEaXNhYmxlZCIsImlzTGltaXREaXNhYmxlZCIsImZhbHNlTGFiZWwiLCJLYSIsImluZGV0ZXJtaW5hdGUiLCJjb250cm9scyIsImJvcmRlciIsIllhIiwicWEiLCJVYSIsInJhZGlvR3JvdXAiLCJHYSIsIlhhIiwiY29tcG9uZW50TmFtZSIsInJhZGlvR3JvdXBTaXplIiwicmFkaW9TaXplIiwicmFkaW9SZWYiLCJRYSIsIlphIiwiQ0xJQ0siLCJIT1ZFUiIsIkphIiwiRWxDaGVja2JveCIsIkVsUmFkaW8iLCJOb2RlQ29udGVudCIsInBhbmVsIiwicmVuZGVyTGFiZWxGbiIsIm1lbnVJZCIsImlzSG92ZXJNZW51IiwibXVsdGlwbGUiLCJjaGVja1N0cmljdGx5IiwiY2hlY2tlZE5vZGVzIiwiaXNMZWFmIiwiZXhwYW5kaW5nTm9kZSIsImxldmVsIiwicGF0aE5vZGVzIiwiZXhwYW5kTm9kZSIsImxhenlMb2FkIiwiaGFuZGxlQ2hlY2tDaGFuZ2UiLCJjaGVja2VkTm9kZUlkIiwiZXhwYW5kYWJsZSIsImluRXhwYW5kaW5nUGF0aCIsImluQ2hlY2tlZFBhdGgiLCJoYW5kbGVIb3ZlckV4cGFuZCIsImhhbmRsZUV4cGFuZCIsImhhbmRsZUNoZWNrIiwidG4iLCJsbiIsImFuIiwibm4iLCJFbENhc2NhZGVyTm9kZSIsIm5vZGVzIiwiaG92ZXJab25lIiwiaXNFbXB0eSIsImhhbmRsZU1vdXNlTW92ZSIsImNsaWVudFgiLCJob3ZlclRocmVzaG9sZCIsImNsZWFySG92ZXJab25lIiwicm4iLCJzbiIsIm9uRXhwYW5kIiwidW4iLCJkbiIsInBhdGhWYWx1ZXMiLCJwYXRoTGFiZWxzIiwiY2hpbGRyZW5EYXRhIiwibGVhZiIsImVtaXRQYXRoIiwiYnJvYWRjYXN0Iiwic2V0Q2hlY2tTdGF0ZSIsImNuIiwicG4iLCJhbGxOb2RlcyIsImxlYWZOb2RlcyIsImFwcGVuZE5vZGUiLCJnZXRGbGF0dGVkTm9kZXMiLCJobiIsInZuIiwibW4iLCJleHBhbmRUcmlnZ2VyIiwiZ24iLCJibiIsImNsaWNrIiwieW4iLCJFbENhc2NhZGVyTWVudSIsInJlbmRlckxhYmVsIiwiYXBwZW5kTm9kZXMiLCJkb0NoZWNrIiwidmFsdWVCeU9wdGlvbiIsImdldE5vZGVCeVZhbHVlIiwiZ2V0U2FtZU5vZGUiLCJnZXROb2RlcyIsIm1lbnVMaXN0IiwibWVudXMiLCJoYW5kbGVLZXlEb3duIiwiZ2V0Q2hlY2tlZE5vZGVzIiwiY2xlYXJDaGVja2VkTm9kZXMiLCJjYWxjdWxhdGVDaGVja2VkVmFsdWUiLCJzY3JvbGxUb0V4cGFuZGluZ05vZGUiLCJrbiIsImhpdCIsImRpc2FibGVUcmFuc2l0aW9ucyIsImNvbG9yIiwidGFnU2l6ZSIsImNsYXNzZXMiLCJiYWNrZ3JvdW5kQ29sb3IiLCJDbiIsIm1lZGl1bSIsInNtYWxsIiwibWluaSIsInhuIiwid24iLCJFbENhc2NhZGVyUGFuZWwiLCJFbFRhZyIsIkNsaWNrb3V0c2lkZSIsImZpbHRlcmFibGUiLCJmaWx0ZXJNZXRob2QiLCJzaG93QWxsTGV2ZWxzIiwiY29sbGFwc2VUYWdzIiwiYmVmb3JlRmlsdGVyIiwiY2FsY1RleHQiLCJoaXRTdGF0ZSIsIlciLCJtaW5XaWR0aCIsInRhZ1dyYXBwZXIiLCJzdWdnZXN0aW9uUGFuZWwiLCJwb3BwZXJWaXNpYmxlIiwiaW5wdXRIb3ZlciIsImZpbHRlcmluZyIsInByZXNlbnRUZXh0IiwiY2hlY2tlZFZhbHVlIiwiaW5wdXRWYWx1ZSIsInNlYXJjaElucHV0VmFsdWUiLCJwcmVzZW50VGFncyIsInJlYWxTaXplIiwiY2xlYXJCdG5WaXNpYmxlIiwidG9nZ2xlUG9wcGVyVmlzaWJsZSIsImhpZGVTdWdnZXN0aW9uUGFuZWwiLCJkZWxldGVUYWciLCJmb2N1c0ZpcnN0Tm9kZSIsImhhbmRsZUV4cGFuZENoYW5nZSIsImhhbmRsZVN1Z2dlc3Rpb25DbGljayIsImhhbmRsZURlbGV0ZSIsImlzQ29tcG9zaW5nIiwiU24iLCJFbiIsIm1vZGVsTW9kaWZpZXJzIiwib25DbG9zZSIsIm9uRXhwYW5kQ2hhbmdlIiwiTW4iLCJhY3RpdmVTdHlsZSIsImZpbGwiLCJib3JkZXJDb2xvciIsInRleHRDb2xvciIsImJveFNoYWRvdyIsIlRuIiwiTm4iLCJEbiIsInNwYW4iLCJwdWxsIiwieHMiLCJzbSIsIm1kIiwibGciLCJwYWRkaW5nTGVmdCIsInBhZGRpbmdSaWdodCIsIk9uIiwiYWNjb3JkaW9uIiwiYWN0aXZlTmFtZXMiLCJjb2xsYXBzZU1pdHQiLCJzZXRBY3RpdmVOYW1lcyIsIlBuIiwiVm4iLCJkYXRhc2V0Iiwib2xkUGFkZGluZ1RvcCIsInBhZGRpbmdUb3AiLCJvbGRQYWRkaW5nQm90dG9tIiwicGFkZGluZ0JvdHRvbSIsIm9sZE92ZXJmbG93IiwiSW4iLCJFbENvbGxhcHNlVHJhbnNpdGlvbiIsImNvbnRlbnRXcmFwU3R5bGUiLCJjb250ZW50SGVpZ2h0IiwiZm9jdXNpbmciLCJpc0NsaWNrIiwiaGFuZGxlSGVhZGVyQ2xpY2siLCJoYW5kbGVFbnRlckNsaWNrIiwiY29sbGFwc2UiLCJBbiIsIm9uS2V5dXAiLCJCbiIsIkxuIiwiem4iLCIxMCIsIjExIiwiMTIiLCIxMyIsIjE0IiwiMTUiLCJGbiIsIiRuIiwiUm4iLCJIbiIsIlduIiwiX2h1ZSIsIl9zYXR1cmF0aW9uIiwiX2FscGhhIiwiZW5hYmxlQWxwaGEiLCJkb09uQ2hhbmdlIiwiam4iLCJLbiIsIlluIiwiZHJhZyIsInFuIiwiaHVlIiwiY2xpZW50WSIsInNhdHVyYXRpb24iLCJjdXJzb3JUb3AiLCJjdXJzb3JMZWZ0IiwiYmFja2dyb3VuZCIsImNvbG9yVmFsdWUiLCJoYW5kbGVEcmFnIiwiVW4iLCJHbiIsIlhuIiwiUW4iLCJ0aHVtYiIsInRodW1iTGVmdCIsInRodW1iVG9wIiwiaHVlVmFsdWUiLCJabiIsInRvUmdiIiwiSm4iLCJjb2xvcnMiLCJjdXJyZW50Q29sb3IiLCJhbyIsImZyb21TdHJpbmciLCJzZWxlY3RlZCIsImNvbXBhcmUiLCJyZ2JhQ29sb3JzIiwiaGFuZGxlU2VsZWN0IiwiZW8iLCJsbyIsIm5vIiwiU3ZQYW5lbCIsIkh1ZVNsaWRlciIsIkFscGhhU2xpZGVyIiwiUHJlZGVmaW5lIiwiQ2xpY2tPdXRzaWRlIiwic2hvd0FscGhhIiwiY29sb3JGb3JtYXQiLCJwcmVkZWZpbmUiLCJjaGFuZ2UiLCJjb2xvckRpc2FibGVkIiwiY29sb3JTaXplIiwiZGlzcGxheWVkQ29sb3IiLCJzaG93UGFuZWxDb2xvciIsInNob3dQaWNrZXIiLCJjdXN0b21JbnB1dCIsImhhbmRsZVRyaWdnZXIiLCJjb25maXJtVmFsdWUiLCJzdlBhbmVsIiwiYWxwaGEiLCJvbyIsImlvIiwicm8iLCJzbyIsInVvIiwiY28iLCJwbyIsImhvIiwic2VsZWN0aW9uTW9kZSIsInNob3dXZWVrTnVtYmVyIiwicmFuZ2VTdGF0ZSIsInNlbGVjdGluZyIsInJvdyIsImNvbHVtbiIsImluUmFuZ2UiLCJjdXN0b21DbGFzcyIsInJvd0luZGV4IiwiY2VsbEluZGV4IiwiaXNXZWVrQWN0aXZlIiwiZ2V0Q2VsbENsYXNzZXMiLCJXRUVLUyIsInZvIiwibW8iLCJoYW5kbGVNb250aFRhYmxlQ2xpY2siLCJnZXRDZWxsU3R5bGUiLCJmbyIsImdvIiwic3RhcnRZZWFyIiwiaGFuZGxlWWVhclRhYmxlQ2xpY2siLCJpbm5lclRleHQiLCJibyIsInlvIiwia28iLCJDbyIsInhvIiwid28iLCJfbyIsIlNvIiwiRW8iLCJNbyIsIlRvIiwiTm8iLCJUaW1lUGlja1BhbmVsIiwiTW9udGhUYWJsZSIsIlllYXJUYWJsZSIsIjM4IiwiNDAiLCIzNyIsIjM5Iiwic2V0RnVsbFllYXIiLCJzZXRNb250aCIsInNldERhdGUiLCJrZXlDb2RlIiwiaGFuZGxlVGltZVBpY2siLCJoYW5kbGVUaW1lUGlja0Nsb3NlIiwib25UaW1lUGlja2VySW5wdXRGb2N1cyIsInRpbWVQaWNrZXJWaXNpYmxlIiwidmlzaWJsZVRpbWUiLCJ2aXNpYmxlRGF0ZSIsInNob3dUaW1lIiwiY2hhbmdlVG9Ob3ciLCJvbkNvbmZpcm0iLCJmb290ZXJWaXNpYmxlIiwiaGFuZGxlWWVhclBpY2siLCJzaG93TW9udGhQaWNrZXIiLCJzaG93WWVhclBpY2tlciIsImhhbmRsZU1vbnRoUGljayIsImhhc1Nob3J0Y3V0cyIsImhhbmRsZVNob3J0Y3V0Q2xpY2siLCJwcmV2WWVhcl8iLCJuZXh0WWVhcl8iLCJwcmV2TW9udGhfIiwibmV4dE1vbnRoXyIsImlubmVyRGF0ZSIsInllYXJMYWJlbCIsImN1cnJlbnRWaWV3IiwiaGFuZGxlRGF0ZVBpY2siLCJoYW5kbGVWaXNpYmxlVGltZUNoYW5nZSIsImhhbmRsZVZpc2libGVEYXRlQ2hhbmdlIiwidGltZUZvcm1hdCIsInVzZXJJbnB1dFRpbWUiLCJ1c2VySW5wdXREYXRlIiwiT28iLCJQbyIsIlZvIiwiSW8iLCJBbyIsIkJvIiwiTG8iLCJ6byIsInNpZGViYXIiLCJGbyIsInVubGlua1BhbmVscyIsIm1pblRpbWVQaWNrZXJWaXNpYmxlIiwibWF4VGltZVBpY2tlclZpc2libGUiLCJoYW5kbGVNaW5UaW1lQ2xvc2UiLCJoYW5kbGVNYXhUaW1lQ2xvc2UiLCJoYW5kbGVSYW5nZVBpY2siLCJvblNlbGVjdCIsImhhbmRsZUNoYW5nZVJhbmdlIiwiYnRuRGlzYWJsZWQiLCJlbmFibGVZZWFyQXJyb3ciLCJlbmFibGVNb250aEFycm93IiwicmlnaHRQcmV2TW9udGgiLCJyaWdodFByZXZZZWFyIiwicmlnaHROZXh0TW9udGgiLCJyaWdodE5leHRZZWFyIiwibGVmdFByZXZNb250aCIsImxlZnRQcmV2WWVhciIsImxlZnROZXh0TW9udGgiLCJsZWZ0TmV4dFllYXIiLCJsZWZ0TGFiZWwiLCJyaWdodExhYmVsIiwibGVmdERhdGUiLCJyaWdodERhdGUiLCJtaW5WaXNpYmxlRGF0ZSIsIm1heFZpc2libGVEYXRlIiwibWluVmlzaWJsZVRpbWUiLCJtYXhWaXNpYmxlVGltZSIsImhhbmRsZURhdGVJbnB1dCIsImhhbmRsZURhdGVDaGFuZ2UiLCJoYW5kbGVUaW1lSW5wdXQiLCJoYW5kbGVUaW1lQ2hhbmdlIiwiaGFuZGxlTWluVGltZVBpY2siLCJoYW5kbGVNYXhUaW1lUGljayIsIiRvIiwiUm8iLCJIbyIsIldvIiwiam8iLCJLbyIsIllvIiwicW8iLCJVbyIsIkdvIiwiWG8iLCJRbyIsIlpvIiwiSm8iLCJlaSIsInRpIiwib25DaGFuZ2VyYW5nZSIsImxpIiwiYWkiLCJuaSIsIm9pIiwiaWkiLCJyaSIsInNpIiwidWkiLCJkaSIsImNpIiwibWFzayIsIm92ZXJsYXlDbGFzcyIsInBpIiwiZnVsbHNjcmVlbiIsIm1hcmdpblRvcCIsIm9wZW5EZWxheSIsImJlZm9yZUNsb3NlIiwibG9ja1Njcm9sbCIsImFmdGVyRW50ZXIiLCJkZXN0cm95T25DbG9zZSIsIm9uTW9kYWxDbGljayIsImNsb3NlZCIsImRpYWxvZ1JlZiIsIm1vZGFsUmVmIiwiaGkiLCJUcmFwRm9jdXMiLCJtb2RhbCIsImVuZHNXaXRoIiwidmkiLCJtaSIsImZpIiwiZ2kiLCJiaSIsImZvb3RlciIsInlpIiwiY29udGVudFBvc2l0aW9uIiwia2kiLCJ3aXRoSGVhZGVyIiwiZHJhd2VyUmVmIiwiaXNIb3Jpem9udGFsIiwiQ2kiLCJ4aSIsIndpIiwiZHJvcGRvd25TaXplIiwiZWxEcm9wZG93biIsIl9lbERyb3Bkb3duU2l6ZSIsIkVpIiwic3BsaXRCdXR0b24iLCJoaWRlT25DbGljayIsInNob3dUaW1lb3V0IiwiaGlkZVRpbWVvdXQiLCJjb21tYW5kSGFuZGxlciIsInRyaWdnZXJFbG0iLCJyZXNldFRhYmluZGV4IiwiaGFuZGxlck1haW5CdXR0b25DbGljayIsInRyaWdnZXJWbm9kZSIsIk1pIiwiVGkiLCJOaSIsImNvbW1hbmQiLCJkaXZpZGVkIiwiRGkiLCJTaSIsImlubmVySGlkZSIsIk9pIiwiUGkiLCJpc0F1dG9XaWR0aCIsInVwZGF0ZUFsbCIsInVwZGF0ZUNvbXB1dGVkTGFiZWxXaWR0aCIsImZpcnN0RWxlbWVudENoaWxkIiwibWFyZ2luTGVmdCIsIlZpIiwiTGFiZWxXcmFwIiwidmFsaWRhdGVTdGF0dXMiLCJmb3IiLCJmb3JtSXRlbUNsYXNzIiwic2hvdWxkU2hvd0Vycm9yIiwibGFiZWxTdHlsZSIsImNvbnRlbnRTdHlsZSIsInZhbGlkYXRlTWVzc2FnZSIsImxhYmVsRm9yIiwiSWkiLCJBaSIsIkJpIiwiQ09OVEFJTiIsIk9SSUdJTkFMIiwiTGkiLCJ6aSIsInVybExpc3QiLCJvblN3aXRjaCIsImRlZyIsIm9mZnNldFgiLCJvZmZzZXRZIiwiZW5hYmxlVHJhbnNpdGlvbiIsIm1heFdpZHRoIiwibWF4SGVpZ2h0Iiwiem9vbVJhdGUiLCJyb3RhdGVEZWciLCJ0b0ZpeGVkIiwid3JhcHBlciIsImltZyIsImluZmluaXRlIiwiaXNTaW5nbGUiLCJpc0ZpcnN0IiwiaXNMYXN0IiwiY3VycmVudEltZyIsImltZ1N0eWxlIiwiaGFuZGxlQWN0aW9ucyIsInRvZ2dsZU1vZGUiLCJoYW5kbGVJbWdMb2FkIiwiaGFuZGxlSW1nRXJyb3IiLCJoYW5kbGVNb3VzZURvd24iLCJwYWdlWCIsInBhZ2VZIiwiRmkiLCJSaSIsIkhpIiwiV2kiLCJqaSIsIktpIiwiWWkiLCJxaSIsIm9uTG9hZCIsIlVpIiwiR2kiLCJYaSIsImVyIiwidHIiLCJJbWFnZVZpZXdlciIsInNjcm9sbENvbnRhaW5lciIsInByZXZpZXdTcmNMaXN0IiwiSW1hZ2UiLCJvbmxvYWQiLCJvbmVycm9yIiwiaW5uZXJXaWR0aCIsImlubmVySGVpZ2h0Iiwic2hvd1ZpZXdlciIsImltZ1dpZHRoIiwiaW1nSGVpZ2h0IiwiaW1hZ2VTdHlsZSIsImFsaWduQ2VudGVyIiwiaW1hZ2VJbmRleCIsImNsaWNrSGFuZGxlciIsImNsb3NlVmlld2VyIiwibHIiLCJhciIsIm5yIiwidGhyb3ciLCJvciIsImlyIiwicnIiLCJzciIsInVyIiwiY29udGFpbmVyRWwiLCJsYXN0U2Nyb2xsVG9wIiwiZHIiLCJjciIsInByIiwiUmVwZWF0Q2xpY2siLCJzdGVwIiwic3RlcFN0cmljdGx5IiwiY29udHJvbHNQb3NpdGlvbiIsInByZWNpc2lvbiIsImN1cnJlbnRWYWx1ZSIsInVzZXJJbnB1dCIsImhhbmRsZUlucHV0Q2hhbmdlIiwiY29udHJvbHNBdFJpZ2h0IiwiZGVjcmVhc2UiLCJpbmNyZWFzZSIsImlucHV0TnVtYmVyU2l6ZSIsImlucHV0TnVtYmVyRGlzYWJsZWQiLCJtYXhEaXNhYmxlZCIsIm1pbkRpc2FibGVkIiwib25EcmFnc3RhcnQiLCJociIsInVuZGVybGluZSIsInZyIiwibXIiLCJzcGlubmVyIiwibG9jayIsImZyIiwiZnVsbHNjcmVlbkxvYWRpbmciLCJnciIsIm9yaWdpbmFsUG9zaXRpb24iLCJiciIsImdsb2JhbExvYWRpbmdPcHRpb24iLCJvcmlnaW5hbE92ZXJmbG93IiwidkxvYWRpbmdBZGRDbGFzc0xpc3QiLCJoYW5kbGVBZnRlckxlYXZlIiwidmlld0JveCIsImN4IiwiY3kiLCJ2bSIsInlyIiwia3IiLCIkbG9hZGluZyIsInNlcnZpY2UiLCJDciIsInhyIiwid3IiLCJkb21Ob2RlIiwic3ViSW5kZXgiLCJzdWJNZW51SXRlbXMiLCJhZGRMaXN0ZW5lcnMiLCJnb3RvU3ViSW5kZXgiLCJfciIsInN1Ym1lbnUiLCJTciIsIkVyIiwib3BhY2l0eSIsIlRyIiwiRWxNZW51Q29sbGFwc2VUcmFuc2l0aW9uIiwiZGVmYXVsdEFjdGl2ZSIsImRlZmF1bHRPcGVuZWRzIiwidW5pcXVlT3BlbmVkIiwicm91dGVyIiwibWVudVRyaWdnZXIiLCJhY3RpdmVUZXh0Q29sb3IiLCJjb2xsYXBzZVRyYW5zaXRpb24iLCJyZWQiLCJncmVlbiIsImJsdWUiLCJNciIsImluZGV4UGF0aCIsInJvdXRlIiwib3BlbmVkTWVudXMiLCJzdWJtZW51cyIsImhvdmVyQmFja2dyb3VuZCIsImlzTWVudVBvcHVwIiwiYWRkTWVudUl0ZW0iLCJyZW1vdmVNZW51SXRlbSIsImFkZFN1Yk1lbnUiLCJyZW1vdmVTdWJNZW51Iiwib3Blbk1lbnUiLCJjbG9zZU1lbnUiLCJyb290TWVudUVtaXQiLCJyb290TWVudU9uIiwib3BlbiIsIk5yIiwicGFyZW50TWVudSIsInBhZGRpbmdTdHlsZSIsIkRyIiwibWFudWFsIiwidmlzaWJsZUFycm93Iiwib25VcGRhdGVWaXNpYmxlIiwidXBkYXRlUG9wcGVyIiwiT3IiLCJFbFRvb2x0aXAiLCJib3JkZXJCb3R0b21Db2xvciIsInJvb3RNZW51IiwiUHIiLCJWciIsIklyIiwiaW5mbyIsIkFyIiwiZGFuZ2Vyb3VzbHlVc2VIVE1MU3RyaW5nIiwiY3VzdG9tU3R5bGUiLCJkZXN0cm95RWxlbWVudCIsInN0YXJ0VGltZXIiLCJrZXlkb3duIiwiQnIiLCJMciIsImNsZWFyVGltZXIiLCJ6ciIsIkZyIiwiJHIiLCJ2ZXJ0T2Zmc2V0IiwiUnIiLCJjbG9zZUFsbCIsIiRtZXNzYWdlIiwiSHIiLCJkaWFsb2dOb2RlIiwiZm9jdXNBZnRlckNsb3NlZCIsImZvY3VzRmlyc3QiLCJsYXN0Rm9jdXMiLCJnZXRFbGVtZW50QnlJZCIsInRyYXBGb2N1cyIsInJlbW92ZUxpc3RlbmVycyIsIldyIiwiS3IiLCJqciIsIllyIiwicXIiLCJtb2RhbEFwcGVuZFRvQm9keSIsImNsb3NlT25IYXNoQ2hhbmdlIiwicm91bmRCdXR0b24iLCJvcGVuZWQiLCJib2R5UGFkZGluZ1JpZ2h0IiwiY29tcHV0ZWRCb2R5UGFkZGluZ1JpZ2h0Iiwid2l0aG91dEhpZGRlbkNsYXNzIiwiZG9BZnRlckNsb3NlIiwidXBkYXRlQ2xvc2luZ0ZsYWciLCJyZXN0b3JlQm9keVN0eWxlIiwic2hvd0lucHV0IiwiaW5wdXRQbGFjZWhvbGRlciIsImlucHV0VHlwZSIsImlucHV0UGF0dGVybiIsImlucHV0VmFsaWRhdG9yIiwiaW5wdXRFcnJvck1lc3NhZ2UiLCJzaG93Q29uZmlybUJ1dHRvbiIsInNob3dDYW5jZWxCdXR0b24iLCJhY3Rpb24iLCJjb25maXJtQnV0dG9uTG9hZGluZyIsImNhbmNlbEJ1dHRvbkxvYWRpbmciLCJjb25maXJtQnV0dG9uQ2xhc3MiLCJjb25maXJtQnV0dG9uRGlzYWJsZWQiLCJjYW5jZWxCdXR0b25DbGFzcyIsImVkaXRvckVycm9yTWVzc2FnZSIsImlzT25Db21wb3NpdGlvbiIsImRpc3Rpbmd1aXNoQ2FuY2VsQW5kQ2xvc2UiLCJ0eXBlJCIsInZhbGlkYXRlRXJyb3IiLCJjbG9zZURpYWxvZyIsInNldHVwSW5zdGFsbCIsImRvQ2xvc2UiLCJoYXNNZXNzYWdlIiwiY29uZmlybUJ1dHRvbkNsYXNzZXMiLCJoYW5kbGVXcmFwcGVyQ2xpY2siLCJoYW5kbGVJbnB1dEVudGVyIiwiVXIiLCJHciIsIlhyIiwiUXIiLCJaciIsIkpyIiwiZXMiLCJ0cyIsImxzIiwiYXMiLCJucyIsImNvbmZpcm1CdXR0b25Qb3NpdGlvbiIsImNvbmZpcm1CdXR0b25IaWdobGlnaHQiLCJjYW5jZWxCdXR0b25IaWdobGlnaHQiLCJycyIsInVzIiwiZHMiLCJhbGVydCIsInByb21wdCIsIiRtc2dib3giLCIkbWVzc2FnZUJveCIsIiRhbGVydCIsIiRjb25maXJtIiwiJHByb21wdCIsImNzIiwicHMiLCJob3Jpem9udGFsQ2xhc3MiLCJwb3NpdGlvblN0eWxlIiwidmVydGljYWxQcm9wZXJ0eSIsImhzIiwidnMiLCJmcyIsImdzIiwiYnMiLCIkbm90aWZ5IiwieXMiLCJrcyIsImNyZWF0ZWQiLCJncm91cERpc2FibGVkIiwiY3VycmVudExhYmVsIiwiaXRlbVNlbGVjdGVkIiwiaG92ZXJJdGVtIiwibXVsdGlwbGVMaW1pdCIsInJlbW90ZSIsInNldFNlbGVjdGVkIiwic2VsZWN0RW1pdHRlciIsImZpbHRlcmVkT3B0aW9uc0NvdW50IiwiaG92ZXJJbmRleCIsIndzIiwib25PcHRpb25DcmVhdGUiLCJjYWNoZWRPcHRpb25zIiwib25PcHRpb25EZXN0cm95Iiwic2VsZWN0T3B0aW9uQ2xpY2siLCJoYW5kbGVPcHRpb25TZWxlY3QiLCJTcyIsInNlbGVjdFdyYXBwZXIiLCJpc011bHRpcGxlIiwiTXMiLCJFbFNlbGVjdE1lbnUiLCJFbE9wdGlvbiIsImF1dG9tYXRpY0Ryb3Bkb3duIiwiYWxsb3dDcmVhdGUiLCJsb2FkaW5nVGV4dCIsIm5vTWF0Y2hUZXh0Iiwibm9EYXRhVGV4dCIsInJlbW90ZU1ldGhvZCIsImRlZmF1bHRGaXJzdE9wdGlvbiIsInJlc2VydmVLZXl3b3JkIiwiY3JlYXRlZExhYmVsIiwiY3JlYXRlZFNlbGVjdGVkIiwiaW5wdXRMZW5ndGgiLCJpbnB1dFdpZHRoIiwiaW5pdGlhbElucHV0SGVpZ2h0Iiwib3B0aW9uc0NvdW50Iiwic29mdEZvY3VzIiwic2VsZWN0ZWRMYWJlbCIsInF1ZXJ5IiwicHJldmlvdXNRdWVyeSIsImlucHV0SG92ZXJpbmciLCJjYWNoZWRQbGFjZUhvbGRlciIsImN1cnJlbnRQbGFjZWhvbGRlciIsIm1lbnVWaXNpYmxlT25Gb2N1cyIsImlzU2lsZW50Qmx1ciIsInNlbGVjdFNpemUiLCJoYW5kbGVSZXNpemUiLCJjb2xsYXBzZVRhZ1NpemUiLCJkZWJvdW5jZWRPbklucHV0Q2hhbmdlIiwiZGVib3VuY2VkUXVlcnlDaGFuZ2UiLCJkZWxldGVQcmV2VGFnIiwiZGVsZXRlU2VsZWN0ZWQiLCJzY3JvbGxUb09wdGlvbiIsInJlc2V0SW5wdXRIZWlnaHQiLCJtYW5hZ2VQbGFjZWhvbGRlciIsInNlbGVjdERpc2FibGVkIiwic2hvd05ld09wdGlvbiIsInRvZ2dsZUxhc3RPcHRpb25IaXRTdGF0ZSIsInJlc2V0SW5wdXRTdGF0ZSIsImhhbmRsZUNvbXBvc2l0aW9uIiwiaGFuZGxlTWVudUVudGVyIiwiaGFuZGxlQ2xlYXJDbGljayIsInRvZ2dsZU1lbnUiLCJzZWxlY3RPcHRpb24iLCJnZXRWYWx1ZUtleSIsIm5hdmlnYXRlT3B0aW9ucyIsImRyb3BNZW51VmlzaWJsZSIsIksiLCJ0YWdzIiwicSIsIlUiLCJzY3JvbGxiYXIiLCJHIiwiRE9DVU1FTlRfTk9ERSIsIkVzIiwiWCIsIkoiLCJlZSIsInRlIiwibGUiLCJhZSIsInJlIiwic2UiLCJ1ZSIsImRlIiwiY2UiLCJwZSIsImhlIiwidmUiLCJtZSIsIlRzIiwiTnMiLCJEcyIsIk9zIiwiUHMiLCJWcyIsIm9uUGFzdGUiLCJlbXB0eSIsIklzIiwiQXMiLCJCcyIsInpzIiwiRnMiLCJScyIsIkhzIiwiV3MiLCJjdXJyZW50UGFnZSIsInByZXZUZXh0IiwiaW50ZXJuYWxEaXNhYmxlZCIsImpzIiwiS3MiLCJZcyIsInBhZ2VDb3VudCIsIm5leHRUZXh0IiwicXMiLCJVcyIsIkdzIiwiWHMiLCJFbFNlbGVjdCIsInBhZ2VTaXplIiwicGFnZVNpemVzIiwiaW5uZXJQYWdlc2l6ZXMiLCJpbm5lclBhZ2VTaXplIiwiaGFuZGxlU2l6ZXNDaGFuZ2UiLCJRcyIsIlpzIiwiaW5uZXJWYWx1ZSIsIkpzIiwiZXUiLCJ0dSIsImx1IiwicGFnZXJDb3VudCIsInNob3dQcmV2TW9yZSIsInNob3dOZXh0TW9yZSIsInF1aWNrbmV4dEljb25DbGFzcyIsInF1aWNrcHJldkljb25DbGFzcyIsInBhZ2VycyIsIm9uUGFnZXJDbGljayIsImF1IiwibnUiLCJQcmV2IiwiTmV4dCIsIlNpemVzIiwiSnVtcGVyIiwiVG90YWwiLCJQYWdlciIsImxheW91dCIsImhpZGVPblNpbmdsZVBhZ2UiLCJpbnRlcm5hbEN1cnJlbnRQYWdlIiwiaW50ZXJuYWxQYWdlU2l6ZSIsImxhc3RFbWl0dGVkUGFnZSIsInVzZXJDaGFuZ2VQYWdlU2l6ZSIsImludGVybmFsUGFnZUNvdW50IiwiZ2V0VmFsaWRDdXJyZW50UGFnZSIsImVtaXRDaGFuZ2UiLCJoYW5kbGVDdXJyZW50Q2hhbmdlIiwianVtcGVyIiwicGFnZXIiLCJzaXplcyIsIm91IiwiY29uZmlybUJ1dHRvblR5cGUiLCJjYW5jZWxCdXR0b25UeXBlIiwiaWNvbkNvbG9yIiwiaGlkZUljb24iLCJjb25maXJtQnV0dG9uVGV4dF8iLCJjYW5jZWxCdXR0b25UZXh0XyIsIml1IiwicnUiLCJzdSIsImR1IiwiY3UiLCJOT0RFX0VWTiIsInB1IiwiaHUiLCJ2dSIsInBlcmNlbnRhZ2UiLCJzdGF0dXMiLCJzdHJva2VXaWR0aCIsInN0cm9rZUxpbmVjYXAiLCJ0ZXh0SW5zaWRlIiwic2hvd1RleHQiLCJQSSIsInN0cm9rZURhc2hhcnJheSIsInN0cm9rZURhc2hvZmZzZXQiLCJiYXJTdHlsZSIsInJlbGF0aXZlU3Ryb2tlV2lkdGgiLCJyYWRpdXMiLCJ0cmFja1BhdGgiLCJwZXJpbWV0ZXIiLCJyYXRlIiwidHJhaWxQYXRoU3R5bGUiLCJjaXJjbGVQYXRoU3R5bGUiLCJzdHJva2UiLCJwcm9ncmVzc1RleHRTaXplIiwiZ2V0Q3VycmVudENvbG9yIiwibXUiLCJmdSIsImd1IiwiZm9udFNpemUiLCJ5dSIsImt1IiwibG93VGhyZXNob2xkIiwiaGlnaFRocmVzaG9sZCIsInZvaWRDb2xvciIsImRpc2FibGVkVm9pZENvbG9yIiwiaWNvbkNsYXNzZXMiLCJ2b2lkSWNvbkNsYXNzIiwiZGlzYWJsZWRWb2lkSWNvbkNsYXNzIiwiYWxsb3dIYWxmIiwic2hvd1Njb3JlIiwidGV4dHMiLCJzY29yZVRlbXBsYXRlIiwiZXhjbHVkZWQiLCJyYXRlRGlzYWJsZWQiLCJkZWNpbWFsU3R5bGUiLCJkZWNpbWFsSWNvbkNsYXNzIiwic2hvd0RlY2ltYWxJY29uIiwiZ2V0SWNvblN0eWxlIiwic2VsZWN0VmFsdWUiLCJoYW5kbGVLZXkiLCJzZXRDdXJyZW50VmFsdWUiLCJyZXNldEN1cnJlbnRWYWx1ZSIsImN1cnNvciIsIkN1IiwianVzdGlmeSIsImFsaWduIiwiZmxleFdyYXAiLCJ3dSIsInRvb2x0aXBDbGFzcyIsImRyYWdnaW5nIiwic3RhcnRYIiwiY3VycmVudFgiLCJzdGFydFkiLCJjdXJyZW50WSIsInN0YXJ0UG9zaXRpb24iLCJuZXdQb3NpdGlvbiIsInRvb2x0aXAiLCJzaG93VG9vbHRpcCIsInRvb2x0aXBWaXNpYmxlIiwid3JhcHBlclN0eWxlIiwiZm9ybWF0VmFsdWUiLCJvbkJ1dHRvbkRvd24iLCJvbkxlZnRLZXlEb3duIiwib25SaWdodEtleURvd24iLCJzZXRQb3NpdGlvbiIsInNsaWRlclNpemUiLCJmb3JtYXRUb29sdGlwIiwicmVzZXRTaXplIiwidXBkYXRlRHJhZ2dpbmciLCJkaXNwbGF5VG9vbHRpcCIsImhpZGVUb29sdGlwIiwidG91Y2hlcyIsInh1Iiwib25Ub3VjaHN0YXJ0IiwiX3UiLCJtYXJrIiwiU3UiLCJFbElucHV0TnVtYmVyIiwiU2xpZGVyQnV0dG9uIiwiU2xpZGVyTWFya2VyIiwic2hvd0lucHV0Q29udHJvbHMiLCJzaG93U3RvcHMiLCJtYXJrcyIsImZpcnN0VmFsdWUiLCJzZWNvbmRWYWx1ZSIsInNsaWRlciIsImZpcnN0QnV0dG9uIiwic2Vjb25kQnV0dG9uIiwic2xpZGVyRGlzYWJsZWQiLCJtaW5WYWx1ZSIsIm1heFZhbHVlIiwicnVud2F5U3R5bGUiLCJvblNsaWRlckNsaWNrIiwic3RvcHMiLCJnZXRTdG9wU3R5bGUiLCJwb2ludCIsIkV1Iiwic2xpZGVyV3JhcHBlciIsIk11IiwibWFya0xpc3QiLCJUdSIsIk51IiwiRHUiLCJwcm9jZXNzU3RhdHVzIiwiZmluaXNoU3RhdHVzIiwic3RlcHMiLCJjdXJyZW50U3RhdHVzIiwic2ltcGxlIiwiZmxleEJhc2lzIiwidHJhbnNpdGlvbkRlbGF5IiwiYm9yZGVyV2lkdGgiLCJjYWxjUHJvZ3Jlc3MiLCJzZXRJbmRleCIsImxpbmVTdHlsZSIsImlzQ2VudGVyIiwiaXNTaW1wbGUiLCJ1cGRhdGVTdGF0dXMiLCJPdSIsIlB1IiwiVnUiLCJJdSIsIkF1IiwiQnUiLCJwb3BwZXJKUyIsImN1cnJlbnRQbGFjZW1lbnQiLCJtb3VzZUluQ2hpbGQiLCJoYW5kbGVNb3VzZWxlYXZlIiwidGl0bGVTdHlsZSIsIm1lbnVUcmFuc2l0aW9uTmFtZSIsInN1Ym1lbnVUaXRsZUljb24iLCJoYW5kbGVNb3VzZWVudGVyIiwicmVsYXRlZFRhcmdldCIsIk1vdXNlRXZlbnQiLCJoYW5kbGVUaXRsZU1vdXNlZW50ZXIiLCJoYW5kbGVUaXRsZU1vdXNlbGVhdmUiLCJhZGRJdGVtIiwicmVtb3ZlSXRlbSIsInBvcHBlclZub2RlIiwidmVydGljYWxUaXRsZVJlZiIsIkx1IiwiYWN0aXZlSWNvbkNsYXNzIiwiaW5hY3RpdmVJY29uQ2xhc3MiLCJhY3RpdmVUZXh0IiwiaW5hY3RpdmVUZXh0IiwiYWN0aXZlQ29sb3IiLCJpbmFjdGl2ZUNvbG9yIiwiYWN0aXZlVmFsdWUiLCJpbmFjdGl2ZVZhbHVlIiwiY29yZSIsImNvcmVXaWR0aCIsInN3aXRjaERpc2FibGVkIiwic3dpdGNoVmFsdWUiLCJ6dSIsIkZ1IiwiY3VycmVudE5hbWUiLCJwYW5lTmFtZSIsImlzQ2xvc2FibGUiLCJzaG91bGRCZVJlbmRlciIsIlJ1IiwiSHUiLCJqdSIsImNvbHVtbnMiLCJLdSIsIll1IiwicXUiLCJVdSIsIkd1IiwiWHUiLCJRdSIsIlp1IiwiSnUiLCJ0ZCIsImFkIiwic3RvcmUiLCJzaG93SGVhZGVyIiwic2Nyb2xsWCIsInNjcm9sbFkiLCJib2R5V2lkdGgiLCJmaXhlZFdpZHRoIiwicmlnaHRGaXhlZFdpZHRoIiwidGFibGVIZWlnaHQiLCJoZWFkZXJIZWlnaHQiLCJhcHBlbmRIZWlnaHQiLCJmb290ZXJIZWlnaHQiLCJ2aWV3cG9ydEhlaWdodCIsImJvZHlIZWlnaHQiLCJmaXhlZEJvZHlIZWlnaHQiLCJndXR0ZXJXaWR0aCIsImJvZHlXcmFwcGVyIiwic2V0SGVpZ2h0IiwidXBkYXRlRWxzSGVpZ2h0Iiwic3RhdGVzIiwiaXNDb2x1bW5Hcm91cCIsIiRyZWFkeSIsImhlYWRlcldyYXBwZXIiLCJhcHBlbmRXcmFwcGVyIiwiZm9vdGVyV3JhcHBlciIsImhlYWRlckRpc3BsYXlOb25lIiwidXBkYXRlU2Nyb2xsWSIsIm5vdGlmeU9ic2VydmVycyIsInBhcmVudEVsZW1lbnQiLCJnZXRGbGF0dGVuQ29sdW1ucyIsInJlYWxXaWR0aCIsInJlc2l6ZVN0YXRlIiwiZml4ZWRDb2x1bW5zIiwicmlnaHRGaXhlZENvbHVtbnMiLCJvbkNvbHVtbnNDaGFuZ2UiLCJvblNjcm9sbGFibGVDaGFuZ2UiLCJuZCIsIkVsQ2hlY2tib3hHcm91cCIsInVwRGF0YUNvbHVtbiIsImZpbHRlclBhbmVscyIsImZpbHRlcnMiLCJmaWx0ZXJlZFZhbHVlIiwiZmlsdGVyTXVsdGlwbGUiLCJjb21taXQiLCJ1cGRhdGVBbGxTZWxlY3RlZCIsImZpbHRlclZhbHVlIiwiaGFuZGxlUmVzZXQiLCJzaG93RmlsdGVyUGFuZWwiLCJvZCIsInJkIiwic2QiLCJ1ZCIsInRhYmxlTGF5b3V0IiwiZmlsdGVyT3BlbmVkIiwiY2QiLCJoZCIsInZkIiwiZml4ZWQiLCJkZWZhdWx0U29ydCIsImhhbmRsZUhlYWRlckNvbnRleHRNZW51IiwiaGFuZGxlTW91c2VPdXQiLCJoYW5kbGVTb3J0Q2xpY2siLCJoYW5kbGVGaWx0ZXJDbGljayIsInNvcnRPcmRlcnMiLCJzb3J0YWJsZSIsInNvcnRQcm9wIiwic29ydGluZ0NvbHVtbiIsInNvcnRPcmRlciIsInN0YXJ0TW91c2VMZWZ0Iiwic3RhcnRMZWZ0Iiwic3RhcnRDb2x1bW5MZWZ0IiwidGFibGVMZWZ0IiwicmVzaXplUHJveHkiLCJvbmRyYWdzdGFydCIsInNjaGVkdWxlTGF5b3V0IiwicmVzaXphYmxlIiwiZ2V0SGVhZGVyUm93U3R5bGUiLCJnZXRIZWFkZXJSb3dDbGFzcyIsImdldEhlYWRlckNlbGxTdHlsZSIsImdldEhlYWRlckNlbGxDbGFzcyIsImhlYWRlclJvd1N0eWxlIiwiaGVhZGVyUm93Q2xhc3NOYW1lIiwiaGVhZGVyQ2VsbFN0eWxlIiwiY29sdW1uSW5kZXgiLCJoZWFkZXJBbGlnbiIsImxhYmVsQ2xhc3NOYW1lIiwiY29sU3BhbiIsImZpeGVkTGVhZkNvbHVtbnNMZW5ndGgiLCJyaWdodEZpeGVkTGVhZkNvbHVtbnNMZW5ndGgiLCJoZWFkZXJDZWxsQ2xhc3NOYW1lIiwidG9nZ2xlQWxsU2VsZWN0aW9uIiwiY29sdW1uUm93cyIsInJvd1NwYW4iLCJvcmlnaW5Db2x1bW5zIiwicGQiLCJoYXNHdXR0ZXIiLCJjb2xzcGFuIiwib25Db250ZXh0bWVudSIsIm9uTW91c2VNb3ZlIiwib25Nb3VzZW91dCIsInJlbmRlckhlYWRlciIsIiRpbmRleCIsIl9zZWxmIiwiZmlsdGVyUGxhY2VtZW50IiwiYmQiLCJzdHJpcGUiLCJyb3dDbGFzc05hbWUiLCJyb3dTdHlsZSIsIndyYXBwZWRSb3dSZW5kZXIiLCJ0b29sdGlwQ29udGVudCIsInRvb2x0aXBUcmlnZ2VyIiwiaGFuZGxlRG91YmxlQ2xpY2siLCJoYW5kbGVDb250ZXh0TWVudSIsImhhbmRsZUNlbGxNb3VzZUVudGVyIiwiaGFuZGxlQ2VsbE1vdXNlTGVhdmUiLCJob3ZlclN0YXRlIiwiY2VsbCIsImNyZWF0ZVJhbmdlIiwic2V0U3RhcnQiLCJzZXRFbmQiLCJmZCIsImdldFJvd1N0eWxlIiwiZ2V0Um93Q2xhc3MiLCJnZXRTcGFuIiwiZ2V0Q29sc3BhblJlYWxXaWR0aCIsImhpZ2hsaWdodEN1cnJlbnRSb3ciLCJjdXJyZW50Um93IiwiZXhwYW5kUm93cyIsImNlbGxTdHlsZSIsInNwYW5NZXRob2QiLCJyb3dzcGFuIiwiaXNDb2x1bW5IaWRkZW4iLCJyb3dLZXkiLCJpbmRlbnQiLCJvbkRibGNsaWNrIiwidHJlZU5vZGUiLCJleHBhbmRlZCIsIm5vTGF6eUNoaWxkcmVuIiwicmVuZGVyQ2VsbCIsImlzUm93RXhwYW5kZWQiLCJhc3NlcnRSb3dLZXkiLCJ0cmVlRGF0YSIsImxhenlUcmVlTm9kZU1hcCIsImNoaWxkcmVuQ29sdW1uTmFtZSIsInJlbmRlckV4cGFuZGVkIiwiZ2QiLCJob3ZlclJvdyIsImlzQ29tcGxleCIsImtkIiwic3VtbWFyeU1ldGhvZCIsImdldFJvd0NsYXNzZXMiLCJsZWZ0Rml4ZWRMZWFmQ291bnQiLCJyaWdodEZpeGVkTGVhZkNvdW50IiwiY29sdW1uc0NvdW50IiwibGVmdEZpeGVkQ291bnQiLCJyaWdodEZpeGVkQ291bnQiLCJ5ZCIsIkNkIiwieGQiLCJNb3VzZXdoZWVsIiwiVGFibGVIZWFkZXIiLCJUYWJsZUJvZHkiLCJUYWJsZUZvb3RlciIsInNob3dTdW1tYXJ5IiwiY3VycmVudFJvd0tleSIsImV4cGFuZFJvd0tleXMiLCJkZWZhdWx0RXhwYW5kQWxsIiwidG9vbHRpcEVmZmVjdCIsInNlbGVjdE9uSW5kZXRlcm1pbmF0ZSIsInRyZWVQcm9wcyIsImhhc0NoaWxkcmVuIiwibG9hZCIsIl9kYXRhIiwiZXhlY1F1ZXJ5IiwidXBkYXRlQ3VycmVudFJvd0RhdGEiLCJ1cGRhdGVFeHBhbmRSb3dzIiwicmVzZXJ2ZVNlbGVjdGlvbiIsInVwZGF0ZVNlbGVjdGlvbkJ5Um93S2V5IiwiY2xlYXJTZWxlY3Rpb24iLCJjbGVhblNlbGVjdGlvbiIsInVwZGF0ZVRhYmxlU2Nyb2xsWSIsIl9jb2x1bW5zIiwic2VsZWN0YWJsZSIsInVwZGF0ZUNvbHVtbnMiLCJ1cGRhdGVTb3J0Iiwic2lsZW50IiwidXBkYXRlRmlsdGVycyIsInRvZ2dsZVJvd1NlbGVjdGlvbiIsInVwZGF0ZUN1cnJlbnRSb3ciLCIkdmFsdWUiLCJXdSIsInNvcnRNZXRob2QiLCJzb3J0QnkiLCJzZXRFeHBhbmRSb3dLZXlzIiwidG9nZ2xlUm93RXhwYW5zaW9uIiwidXBkYXRlVHJlZUV4cGFuZEtleXMiLCJ0b2dnbGVUcmVlRXhwYW5zaW9uIiwibG9hZE9yVG9nZ2xlIiwibG9hZERhdGEiLCJ1cGRhdGVUcmVlRGF0YSIsIm5vcm1hbGl6ZSIsImxhenlDb2x1bW5JZGVudGlmaWVyIiwic2V0Q3VycmVudFJvd0tleSIsInJlc3RvcmVDdXJyZW50Um93S2V5Iiwic2V0Q3VycmVudFJvd0J5S2V5IiwiX2N1cnJlbnRSb3dLZXkiLCJkb0xheW91dCIsImRlYm91bmNlZFVwZGF0ZUxheW91dCIsIl90b2dnbGVBbGxTZWxlY3Rpb24iLCJjb2x1bW5LZXkiLCJleGVjRmlsdGVyIiwiZXhlY1NvcnQiLCJ0YWJsZUhlYWRlciIsImZpeGVkVGFibGVIZWFkZXIiLCJyaWdodEZpeGVkVGFibGVIZWFkZXIiLCJtdWx0aSIsImNsZWFyU29ydCIsInNldEV4cGFuZFJvd0tleXNBZGFwdGVyIiwidG9nZ2xlUm93RXhwYW5zaW9uQWRhcHRlciIsImxlYWZDb2x1bW5zIiwiZml4ZWRMZWFmQ29sdW1ucyIsInJpZ2h0Rml4ZWRMZWFmQ29sdW1ucyIsImxlYWZDb2x1bW5zTGVuZ3RoIiwiaXNBbGxTZWxlY3RlZCIsInNlbGVjdGlvbiIsImZpbHRlcmVkRGF0YSIsImVkIiwibXV0YXRpb25zIiwibGQiLCJzZXRDdXJyZW50Um93IiwidXBkYXRlQ29sdW1uc1dpZHRoIiwiaXNIaWRkZW4iLCJzZXREcmFnVmlzaWJsZSIsImhhbmRsZUhlYWRlckZvb3Rlck1vdXNld2hlZWwiLCJ0YWJsZVNpemUiLCJlbXB0eUJsb2NrU3R5bGUiLCJoYW5kbGVGaXhlZE1vdXNld2hlZWwiLCJmaXhlZEhlaWdodCIsInJlc2l6ZVByb3h5VmlzaWJsZSIsInNjcm9sbFBvc2l0aW9uIiwic2V0TWF4SGVpZ2h0IiwiZml4ZWRCb2R5V3JhcHBlciIsInJpZ2h0Rml4ZWRCb2R5V3JhcHBlciIsInRhYmxlSWQiLCJ3ZCIsIlNkIiwiRWQiLCJNZCIsIlRkIiwiTmQiLCJEZCIsIk9kIiwiUGQiLCJvblNldERyYWdWaXNpYmxlIiwiVmQiLCJleHBhbmQiLCJJZCIsIm5hdGl2ZU9uQ2xpY2siLCJBZCIsImZvcm1hdHRlciIsIkxkIiwiemQiLCJzaG93VG9vbHRpcFdoZW5PdmVyZmxvdyIsInNob3dPdmVyZmxvd1Rvb2x0aXAiLCJyZWdpc3Rlck5vcm1hbFdhdGNoZXJzIiwicmVnaXN0ZXJDb21wbGV4V2F0Y2hlcnMiLCJyZWFsTWluV2lkdGgiLCJjb2x1bW5Db25maWciLCJyZWFsQWxpZ24iLCJyZWFsSGVhZGVyQWxpZ24iLCJjb2x1bW5JZCIsImlzU3ViQ29sdW1uIiwiY29sdW1uT3JUYWJsZVBhcmVudCIsInNldENvbHVtbldpZHRoIiwic2V0Q29sdW1uRm9yY2VkUHJvcHMiLCJzZXRDb2x1bW5SZW5kZXJzIiwiZ2V0UHJvcHNEYXRhIiwiZ2V0Q29sdW1uRWxJbmRleCIsInZQYXJlbnQiLCJCZCIsImhpZGRlbkNvbHVtbnMiLCJGZCIsInRhYnMiLCJ0YWJQb3NpdGlvbiIsInJvb3RUYWJzIiwiVGFiQmFyIiwicGFuZXMiLCJvblRhYkNsaWNrIiwib25UYWJSZW1vdmUiLCJzdHJldGNoIiwidmlzaWJpbGl0eVN0YXRlIiwic2Nyb2xsYWJsZSIsIm5hdk9mZnNldCIsImlzRm9jdXMiLCJmb2N1c2FibGUiLCJuYXZTY3JvbGwkIiwibmF2JCIsImVsJCIsInNpemVOYW1lIiwibmF2U3R5bGUiLCJzY3JvbGxQcmV2Iiwic2Nyb2xsTmV4dCIsInNjcm9sbFRvQWN0aXZlVGFiIiwiY2hhbmdlVGFiIiwic2V0Rm9jdXMiLCJyZW1vdmVGb2N1cyIsInZpc2liaWxpdHlDaGFuZ2VIYW5kbGVyIiwid2luZG93Qmx1ckhhbmRsZXIiLCJ3aW5kb3dGb2N1c0hhbmRsZXIiLCJSZCIsIlRhYk5hdiIsImFjdGl2ZU5hbWUiLCJhZGRhYmxlIiwiYmVmb3JlTGVhdmUiLCJoYW5kbGVUYWJDbGljayIsImhhbmRsZVRhYlJlbW92ZSIsImhhbmRsZVRhYkFkZCIsIkhkIiwiV2QiLCJqZCIsIktkIiwibWluVGltZSIsIm1heFRpbWUiLCJZZCIsInFkIiwidGltZXN0YW1wIiwiaGlkZVRpbWVzdGFtcCIsIlVkIiwiR2QiLCJYZCIsIlFkIiwiWmQiLCJKZCIsImRvdCIsInRjIiwiT3B0aW9uQ29udGVudCIsIm9wdGlvblJlbmRlciIsImRlZmF1bHRDaGVja2VkIiwiYWxsQ2hlY2tlZCIsImNoZWNrQ2hhbmdlQnlVc2VyIiwibGFiZWxQcm9wIiwia2V5UHJvcCIsImRpc2FibGVkUHJvcCIsImNoZWNrZWRTdW1tYXJ5IiwiaXNJbmRldGVybWluYXRlIiwiaGFuZGxlQWxsQ2hlY2tlZENoYW5nZSIsIm5vQ2hlY2tlZCIsImhhc0NoZWNrZWQiLCJjaGVja2FibGVEYXRhIiwidXBkYXRlQWxsQ2hlY2tlZCIsImhhc05vTWF0Y2giLCJpbnB1dEljb24iLCJoYXNGb290ZXIiLCJjbGVhclF1ZXJ5IiwibGMiLCJhYyIsIm5jIiwiaWMiLCJUcmFuc2ZlclBhbmVsIiwiYnV0dG9uVGV4dHMiLCJsZWZ0RGVmYXVsdENoZWNrZWQiLCJyaWdodERlZmF1bHRDaGVja2VkIiwicmVuZGVyQ29udGVudCIsInRhcmdldE9yZGVyIiwibGVmdENoZWNrZWQiLCJyaWdodENoZWNrZWQiLCJwcm9wc0tleSIsInNvdXJjZURhdGEiLCJ0YXJnZXREYXRhIiwib25Tb3VyY2VDaGVja2VkQ2hhbmdlIiwib25UYXJnZXRDaGVja2VkQ2hhbmdlIiwiYWRkVG9MZWZ0IiwiYWRkVG9SaWdodCIsImhhc0J1dHRvblRleHRzIiwibGVmdFBhbmVsVGl0bGUiLCJyaWdodFBhbmVsVGl0bGUiLCJwYW5lbEZpbHRlclBsYWNlaG9sZGVyIiwicmMiLCJzYyIsInVjIiwiZGMiLCJjYyIsIm9uQ2hlY2tlZENoYW5nZSIsImhjIiwidmMiLCJmYyIsIm5vbmUiLCJhbGxXaXRob3V0RGlzYWJsZSIsImhhbGYiLCJnYyIsInljIiwia2MiLCJpc0N1cnJlbnQiLCJjYW5Gb2N1cyIsInJlZ2lzdGVyTm9kZSIsImlzTGVhZkJ5VXNlciIsInNldERhdGEiLCJkZWZhdWx0RXhwYW5kZWRLZXlzIiwiYXV0b0V4cGFuZFBhcmVudCIsImN1cnJlbnROb2RlS2V5IiwiX2luaXREZWZhdWx0Q2hlY2tlZE5vZGUiLCJ1cGRhdGVMZWFmU3RhdGUiLCJpbnNlcnRDaGlsZCIsImdldENoaWxkcmVuIiwiZGVyZWdpc3Rlck5vZGUiLCJzaG91bGRMb2FkRGF0YSIsImNoZWNrRGVzY2VuZGFudHMiLCJyZW1vdmVDaGlsZEJ5RGF0YSIsImRvQ3JlYXRlQ2hpbGRyZW4iLCJDYyIsIm5vZGVzTWFwIiwiX2luaXREZWZhdWx0Q2hlY2tlZE5vZGVzIiwiZmlsdGVyTm9kZU1ldGhvZCIsInVwZGF0ZUNoaWxkcmVuIiwiZ2V0Tm9kZSIsImluc2VydEFmdGVyIiwiZGVmYXVsdENoZWNrZWRLZXlzIiwiZ2V0SGFsZkNoZWNrZWROb2RlcyIsIl9nZXRBbGxOb2RlcyIsIl9zZXRDaGVja2VkS2V5cyIsInNldEN1cnJlbnROb2RlIiwieGMiLCJ3YyIsInRyZWVOb2RlRXhwYW5kIiwiYnJvYWRjYXN0RXhwYW5kZWQiLCJyZW5kZXJBZnRlckV4cGFuZCIsInNob3dDaGVja2JveCIsImVtaXR0ZXIiLCJjaGVja2VkS2V5cyIsImdldENoZWNrZWRLZXlzIiwiaGFsZkNoZWNrZWROb2RlcyIsImhhbGZDaGVja2VkS2V5cyIsImdldEhhbGZDaGVja2VkS2V5cyIsIm5vZGUkIiwiY2hpbGROb2RlUmVuZGVyZWQiLCJvbGRDaGVja2VkIiwib2xkSW5kZXRlcm1pbmF0ZSIsImdldE5vZGVLZXkiLCJub2RlS2V5IiwiaGFuZGxlU2VsZWN0Q2hhbmdlIiwiZXhwYW5kT25DbGlja05vZGUiLCJjaGVja09uQ2xpY2tOb2RlIiwib25Ob2RlQ29udGV4dG1lbnUiLCJoYW5kbGVFeHBhbmRJY29uQ2xpY2siLCJoYW5kbGVDaGlsZE5vZGVFeHBhbmQiLCJoYW5kbGVEcmFnU3RhcnQiLCJkcmFnZ2FibGUiLCJoYW5kbGVEcmFnT3ZlciIsImhhbmRsZURyb3AiLCJoYW5kbGVEcmFnRW5kIiwiU2MiLCJvbkRyYWdvdmVyIiwib25EcmFnZW5kIiwib25Ecm9wIiwib25Ob2RlRXhwYW5kIiwiRWMiLCJFbFRyZWVOb2RlIiwiYWxsb3dEcmFnIiwiYWxsb3dEcm9wIiwiaGlnaGxpZ2h0Q3VycmVudCIsImRyYWdTdGF0ZSIsImRyb3BJbmRpY2F0b3IkIiwic2hvd0Ryb3BJbmRpY2F0b3IiLCJkcmFnZ2luZ05vZGUiLCJkcm9wTm9kZSIsImRyb3BUeXBlIiwibG9nIiwiZGF0YVRyYW5zZmVyIiwiZWZmZWN0QWxsb3dlZCIsImRyb3BFZmZlY3QiLCJwcmV2aW91c1NpYmxpbmciLCJzZXREZWZhdWx0Q2hlY2tlZEtleSIsInNldERlZmF1bHRFeHBhbmRlZEtleXMiLCJnZXRDdXJyZW50Tm9kZSIsImdldE5vZGVQYXRoIiwicmV2ZXJzZSIsImdldEN1cnJlbnRLZXkiLCJzZXRDaGVja2VkTm9kZXMiLCJzZXRDaGVja2VkS2V5cyIsInNldFVzZXJDdXJyZW50Tm9kZSIsInNldEN1cnJlbnRLZXkiLCJzZXRDdXJyZW50Tm9kZUtleSIsImhhbmRsZU5vZGVFeHBhbmQiLCJ1cGRhdGVLZXlDaGlsZHJlbiIsIk1jIiwiVGMiLCJOYyIsIkRjIiwicmVzcG9uc2UiLCJyZXNwb25zZVRleHQiLCJPYyIsIlhNTEh0dHBSZXF1ZXN0Iiwib25wcm9ncmVzcyIsInBlcmNlbnQiLCJvblByb2dyZXNzIiwiRm9ybURhdGEiLCJmaWxlbmFtZSIsImZpbGUiLCJvblN1Y2Nlc3MiLCJ3aXRoQ3JlZGVudGlhbHMiLCJoZWFkZXJzIiwic2V0UmVxdWVzdEhlYWRlciIsInNlbmQiLCJQYyIsIkVsUHJvZ3Jlc3MiLCJmaWxlcyIsImhhbmRsZVByZXZpZXciLCJsaXN0VHlwZSIsInBhcnNlUGVyY2VudGFnZSIsImhhbmRsZVJlbW92ZSIsIm9uRmlsZUNsaWNrZWQiLCJWYyIsIkljIiwiQWMiLCJCYyIsIkxjIiwiemMiLCJGYyIsImRyYWdvdmVyIiwiYWNjZXB0Iiwib25EcmFnbGVhdmUiLCIkYyIsIlVwbG9hZERyYWdnZXIiLCJvblN0YXJ0IiwiYmVmb3JlVXBsb2FkIiwib25QcmV2aWV3Iiwib25SZW1vdmUiLCJmaWxlTGlzdCIsImF1dG9VcGxvYWQiLCJodHRwUmVxdWVzdCIsImxpbWl0Iiwib25FeGNlZWQiLCJGaWxlIiwicmVxcyIsIm1vdXNlb3ZlciIsImFib3J0IiwicG9zdCIsInVwbG9hZEZpbGVzIiwiUmMiLCJIYyIsIm9uRmlsZSIsImpjIiwiVXBsb2FkIiwiVXBsb2FkTGlzdCIsInNob3dGaWxlTGlzdCIsImJlZm9yZVJlbW92ZSIsImNsZWFyRmlsZXMiLCJoYW5kbGVQcm9ncmVzcyIsImhhbmRsZVN0YXJ0IiwiaGFuZGxlU3VjY2VzcyIsInN1Ym1pdCIsInVwbG9hZFJlZiIsIlVSTCIsImNyZWF0ZU9iamVjdFVSTCIsIldjIiwicmV2b2tlT2JqZWN0VVJMIiwiZHJhZ092ZXIiLCJkcmFnaW5nIiwidXBsb2FkRGlzYWJsZWQiLCJ0aXAiLCJLYyIsIml0ZW1SZWYiLCJZYyIsInFjIiwiVWMiLCJHYyIsIml0ZW1TaXplIiwid2luZG93U2l6ZSIsInBvb2xTaXplIiwidmlld3BvcnRSZWYiLCJpdGVtQ29udGFpbmVyU3R5bGUiLCJ2aWV3cG9ydFN0eWxlIiwic3RhcnROb2RlIiwicmVuZGVyaW5nSXRlbXMiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsInNjcm9sbFRvIiwib25TY3JvbGxQYXNzaXZlIiwiWmMiLCJKYyIsImVwIiwiUWMiLCJtc2ciLCJwLWlkIiwiaXBjUmVuZGVyZXIiLCJzaGVsbCIsIk1lbnUiLCJNZW51SXRlbSIsImVuVmFsdWUiLCJ6aFZhbHVlIiwiZm9ybUxhYmVsV2lkdGgiLCJyZWdpb25SdWxlcyIsImlzU3VibWl0IiwiY3VycmVudE1vZHVsZSIsImxhbmciLCJ6aCIsImxhbmdGaWxlIiwiZmlsdGVyVGV4dCIsImNvbnRleHRNZW51IiwiZGlhbG9nU2hvd1Zpc2libGUiLCJjb250ZXh0TWVudUluaXQiLCJ0cmVlSW5pdCIsImpzb25EYXRhIiwidHJlZUl0ZW0iLCJzaG93QWRkSXRlbSIsImVudHJ5RmlsZSIsImdldGZpbGUiLCJmaWxlTmFtZSIsImxhbmdOYW1lIiwicmVhZEZpbGUiLCJ0b0pzb24iLCJjbGlja0xvY2FsTm9kZSIsImNyZWF0TWVudSIsImV2IiwicG9wdXAiLCJnZXRDdXJyZW50V2luZG93IiwiZmlsdGVyTm9kZSIsImV4cG9ydExhbmciLCJjdXJyZW50bGFuZyIsInNhdmVTdHIiLCJjYW5jZWxlZCIsImZpbGVQYXRoIiwid3JpdGVGaWxlIiwibm90aWZpY2F0aW9uIiwiTm90aWZpY2F0aW9uIiwidmFsaWQiLCJub2RlLWtleSIsImhpZ2hsaWdodC1jdXJyZW50IiwiZmlsdGVyLW5vZGUtbWV0aG9kIiwiYWJvdXRNZSIsIiRldmVudCIsImF1dG9IZWlnaHQiLCJjaGFuZ2VkIiwiY2hpbGRpdGVtIiwibGFiZWwtd2lkdGgiLCJIZWxsb1dvcmxkIiwiSG9tZVBhZ2UiLCJjb250YWluZXJPclNlbGVjdG9yIiwibm9ybWFsaXplQ29udGFpbmVyIiwidGVtcGxhdGUiLCJfX3Z1ZVJlaXplX18iXSwibWFwcGluZ3MiOiI7MkZBR0lBLEUsTUFBMEIsR0FBNEIsS0FFMURBLEVBQXdCQyxLQUFLLENBQUNDLEVBQU9DLEdBQUkseUNBQTBDLEdBQUcsQ0FBQyxRQUFVLEVBQUUsUUFBVSxDQUFDLDBCQUEwQix1QkFBdUIsTUFBUSxHQUFHLFNBQVcsdUJBQXVCLGVBQWlCLENBQUMseUNBQXlDLDBDQUEwQyxXQUFhLE1BRTlULFcs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LFlBQVl4SyxpQkFBaUJ4MkIsR0FFaEQ0aEMsSUFBVXBuQyxFQUFNb25DLE9BQVNDLElBQVdybkMsRUFBTXFuQyxTQUM1Q3pGLEVBQVlwOEIsRUFBR3cxQixVQUFVLEdBQ3pCbG1DLEVBQVF4YSxNQUFNLENBQUM4c0QsUUFBT0MsU0FBUXpGLGVBR2hDd0YsRUFBUXBuQyxFQUFNb25DLE1BQ2RDLEVBQVNybkMsRUFBTXFuQyxPQUNmekYsRUFBWTVoQyxFQUFNNGhDLFlBR2UsTUFFckMsT0FBUXA4QixHQUNOeWlELGNBQWN6aUQsRUFBRzgxSCxpQkFvQnJCMTdHLEdBQUkyUCxNQUFNLFMiLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9jc3NXaXRoTWFwcGluZ1RvU3RyaW5nLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIuYXBwIHtcXG4gIGJvcmRlcjogMXB4IHNvbGlkICNjY2M7XFxufVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9BcHAudnVlXCIsXCJ3ZWJwYWNrOi8vLi9BcHAudnVlXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUNBO0VBQ0Usc0JBQUE7QUNBRlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJcXG4uYXBwe1xcbiAgYm9yZGVyOjFweCBzb2xpZCAjY2NjO1xcbn1cXG5cIixcIi5hcHAge1xcbiAgYm9yZGVyOiAxcHggc29saWQgI2NjYztcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvY3NzV2l0aE1hcHBpbmdUb1N0cmluZy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiYnV0dG9uIHtcXG4gIGJhY2tncm91bmQ6ICNmZmY7XFxuICBwYWRkaW5nOiAyMHB4O1xcbn1cXG4uYnRuIHtcXG4gIGJhY2tncm91bmQ6IHJlYmVjY2FwdXJwbGU7XFxufVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9jb21wb25lbnRzL0hlbGxvd29ybGQudnVlXCIsXCJ3ZWJwYWNrOi8vLi9IZWxsb3dvcmxkLnZ1ZVwiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFDQTtFQUNFLGdCQUFBO0VBQ0EsYUFBQTtBQ0FGO0FERUE7RUFDRSx5QkFBQTtBQ0FGXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIlxcbmJ1dHRvbntcXG4gIGJhY2tncm91bmQgOiNmZmY7XFxuICBwYWRkaW5nOiAyMHB4O1xcbn1cXG4uYnRue1xcbiAgYmFja2dyb3VuZDogcmViZWNjYXB1cnBsZTtcXG59XFxuXCIsXCJidXR0b24ge1xcbiAgYmFja2dyb3VuZDogI2ZmZjtcXG4gIHBhZGRpbmc6IDIwcHg7XFxufVxcbi5idG4ge1xcbiAgYmFja2dyb3VuZDogcmViZWNjYXB1cnBsZTtcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvY3NzV2l0aE1hcHBpbmdUb1N0cmluZy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiaHRtbCxcXG5ib2R5IHtcXG4gIHBhZGRpbmc6IDA7XFxuICBtYXJnaW46IDA7XFxuICBoZWlnaHQ6IDEwMCU7XFxufVxcbiNhcHAge1xcbiAgaGVpZ2h0OiAxMDAlO1xcbn1cXG4ubWFpbiB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICBkaXNwbGF5OiBmbGV4O1xcbn1cXG4uc2lkZSB7XFxuICAtd2Via2l0LWFwcC1yZWdpb246IGRyYWc7XFxuICB6LWluZGV4OiAxO1xcbiAgd2lkdGg6IDIwMHB4O1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAgb3ZlcmZsb3cteTogaGlkZGVuO1xcbiAgcGFkZGluZzogMTJweDtcXG4gIGJhY2tncm91bmQ6ICNmMGYwZjA7XFxuICBib3JkZXItcmlnaHQ6IDFweCBzb2xpZCAjZGVkZWRlO1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG59XFxuLnNpZGUgYnV0dG9uIHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgYm9yZGVyLXJhZGl1czogNWVtO1xcbiAgcGFkZGluZzogMC42ZW07XFxuICBib3JkZXI6IG5vbmU7XFxuICBib3gtc2hhZG93OiAwcHggM3B4IDFweCAtMnB4IHJnYmEoMCwgMCwgMCwgMC4yKSwgMHB4IDJweCAycHggMHB4IHJnYmEoMCwgMCwgMCwgMC4xNCksIDBweCAxcHggNXB4IDBweCByZ2JhKDAsIDAsIDAsIDAuMTIpO1xcbiAgdHJhbnNpdGlvbjogYm94LXNoYWRvdyAyODBtcyBjdWJpYy1iZXppZXIoMC40LCAwLCAwLjIsIDEpO1xcbn1cXG4uc2lkZSAuZW50cnkge1xcbiAgcGFkZGluZzogMCAxMnB4O1xcbn1cXG4uc2lkZSAuZW50cnkgaW5wdXQge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBmb250LXNpemU6IDE0cHg7XFxufVxcbi5zaWRlIC5lbnRyeSAuc2VsZWN0LWZpbGUge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbn1cXG4uc2lkZSAuZW50cnkgLnNlbGVjdC1maWxlIC5pbnB1dC1maWxlIHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgbGVmdDogMDtcXG4gIHRvcDogMDtcXG4gIHBhZGRpbmc6IDA7XFxuICBtYXJnaW46IDA7XFxuICBvcGFjaXR5OiAwO1xcbn1cXG4uc2lkZSAuZW50cnkgLnNlbGVjdC1maWxlIGJ1dHRvbiB7XFxuICBiYWNrZ3JvdW5kOiAjNGI1Y2M0O1xcbiAgY29sb3I6ICNmZmY7XFxufVxcbi5zaWRlIC5lbnRyeSAuc2VsZWN0LWZpbGU6aG92ZXIgYnV0dG9uIHtcXG4gIGJhY2tncm91bmQ6ICM1ZTZiYzA7XFxuICBib3gtc2hhZG93OiAwcHggMnB4IDRweCAtMXB4IHJnYmEoMCwgMCwgMCwgMC4yKSwgMHB4IDRweCA1cHggMHB4IHJnYmEoMCwgMCwgMCwgMC4xNCksIDBweCAxcHggMTVweCAwcHggcmdiYSgwLCAwLCAwLCAwLjE4KTtcXG59XFxuLnNpZGUgLmNhdGFsb2cge1xcbiAgaGVpZ2h0OiBjYWxjKDEwMCUgLSAxNzZweCk7XFxufVxcbi5zaWRlIC5jYXRhbG9nIGg0IHtcXG4gIGNvbG9yOiAjOTk5O1xcbiAgcGFkZGluZzogMCA0cHg7XFxuICBtYXJnaW46IDAuOGVtIDA7XFxuICBmb250LXNpemU6IDEycHg7XFxuICBmb250LXdlaWdodDogbm9ybWFsO1xcbiAgY3Vyc29yOiBkZWZhdWx0O1xcbn1cXG4uc2lkZSAuY2F0YWxvZyAuc2VhcmNoLXRleHQge1xcbiAgbWFyZ2luLWJvdHRvbTogMC41cmVtO1xcbn1cXG4uc2lkZSAuY2F0YWxvZyAuZWwtdHJlZSB7XFxuICBoZWlnaHQ6IGNhbGMoMTAwJSAtIDcwcHgpO1xcbiAgb3ZlcmZsb3cteTogYXV0bztcXG4gIGJvcmRlcjogMXB4IHNvbGlkICNkY2RmZTY7XFxuICBib3JkZXItcmFkaXVzOiA0cHg7XFxufVxcbi5zaWRlIC5jYXRhbG9nIC5lbC10cmVlLW5vZGVfZXhwYW5kLWljb24uaXMtbGVhZiB7XFxuICBjb2xvcjogI2MwYzRjYztcXG59XFxuLnNpZGUgLm91dHB1dCB7XFxuICBwYWRkaW5nOiAwIDEycHg7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICBib3R0b206IDA7XFxufVxcbi5zaWRlIC5vdXRwdXQgcCB7XFxuICBmb250LXNpemU6IDEycHg7XFxuICBjb2xvcjogIzk5OTtcXG4gIGZvbnQtZmFtaWx5OiAn5bm85ZyGJztcXG4gIG1hcmdpbjogMDtcXG4gIHBhZGRpbmctdG9wOiAwLjJlbTtcXG4gIGN1cnNvcjogZGVmYXVsdDtcXG59XFxuLnNpZGUgLm91dHB1dCBwIGEge1xcbiAgY29sb3I6ICM5OTk7XFxuICBmb250LXdlaWdodDogbm9ybWFsO1xcbn1cXG4uY29udGVudCB7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICBmbGV4OiAxO1xcbn1cXG4uY29udGVudCAubWFpbi1oZWFkZSB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgYm94LXNoYWRvdzogMXB4IDJweCAzcHggcmdiYSgwLCAwLCAwLCAwLjA4KTtcXG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjZGRkO1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgei1pbmRleDogOTk5O1xcbiAgYmFja2dyb3VuZDogI2YwZjBmMDtcXG59XFxuLmNvbnRlbnQgLm1haW4taGVhZGUgaDMge1xcbiAgd2lkdGg6IGNhbGMoNTAlIC0gOXB4KTtcXG4gIGhlaWdodDogMzBweDtcXG4gIGxpbmUtaGVpZ2h0OiAzMHB4O1xcbiAgZm9udC1zaXplOiAxNHB4O1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gIHRleHQtaW5kZW50OiAxMHB4O1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgY3Vyc29yOiBkZWZhdWx0O1xcbn1cXG4uY29udGVudCAubWFpbi1oZWFkZSBoMyAuZ3JheSB7XFxuICBmb250LXNpemU6IDEycHg7XFxuICBjb2xvcjogIzk5OTtcXG59XFxuLmNvbnRlbnQgc2VjdGlvbiB7XFxuICBvdmVyZmxvdy15OiBhdXRvO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIHBhZGRpbmctbGVmdDogMTBweDtcXG4gIHBhZGRpbmctcmlnaHQ6IDVweDtcXG4gIGhlaWdodDogY2FsYygxMDAlIC0gNTlweCk7XFxufVxcbi5jb250ZW50IHNlY3Rpb24gLm5vZGF0YSB7XFxuICBwYWRkaW5nOiA0MHB4O1xcbiAgcGFkZGluZy10b3A6IDEyMHB4O1xcbiAgd2lkdGg6IDEwMCU7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIGNvbG9yOiAjY2NjO1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgZm9udC1zaXplOiAxNHB4O1xcbiAgY3Vyc29yOiBkZWZhdWx0O1xcbn1cXG4ubG9nbyB7XFxuICAtd2Via2l0LWFwcC1yZWdpb246IGRyYWc7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICBwYWRkaW5nOiAxMHB4IDA7XFxufVxcbi5sb2dvIGgxIHtcXG4gIGZvbnQtc2l6ZTogMTRweDtcXG4gIGNvbG9yOiAjOTk5O1xcbiAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcXG4gIGN1cnNvcjogZGVmYXVsdDtcXG4gIG1hcmdpbjogMC4zZW07XFxufVxcbi5sb2dvIGEge1xcbiAgY29sb3I6ICM5OTk7XFxufVxcbi5taW5pIHtcXG4gIHBhZGRpbmc6IDAuMmVtIDAuNWVtO1xcbiAgZm9udC1zaXplOiAxMnB4O1xcbiAgbWFyZ2luOiAwO1xcbiAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XFxuICBjb2xvcjogIzExOGJlZTtcXG4gIGJvcmRlci13aWR0aDogMXB4O1xcbiAgbGluZS1oZWlnaHQ6IDE7XFxuICBib3JkZXItcmFkaXVzOiAycHg7XFxufVxcbnVsIHtcXG4gIGxpc3Qtc3R5bGU6IG5vbmU7XFxufVxcbi5tYWluLWhlYWRlIGgzOm50aC1jaGlsZCgxKSB7XFxuICB0ZXh0LWluZGVudDogMjBweDtcXG59XFxuLmt2Om50aC1jaGlsZCgxKSBkbDo6YWZ0ZXIge1xcbiAgY29udGVudDogJyc7XFxuICB3aWR0aDogMXB4O1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAgYm9yZGVyLXJpZ2h0OiAxcHggZGFzaGVkICNjY2M7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDJweDtcXG4gIHJpZ2h0OiAwcHg7XFxufVxcbi5rdiB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICB3aWR0aDogNTAlO1xcbn1cXG4ua3YgZW0ge1xcbiAgY29sb3I6IHRlYWw7XFxuICBvcGFjaXR5OiAwLjg7XFxufVxcbi5rdiBkbCB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBtYXJnaW46IDA7XFxufVxcbi5rdiBkbDpudGgtY2hpbGQoZXZlbikge1xcbiAgYmFja2dyb3VuZDogI2Y1ZjZmOTtcXG59XFxuLmt2IGRsIGR0IHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgbGluZS1oZWlnaHQ6IDEuNDtcXG59XFxuLmt2IGRsIGR0IGVtIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIHBhZGRpbmc6IDVweDtcXG59XFxuLmt2IGRsIGRkIHtcXG4gIHBhZGRpbmctYm90dG9tOiAxMHB4O1xcbiAgcGFkZGluZy1yaWdodDogMTBweDtcXG59XFxuLmt2IGRsIGRkID4gZGl2IHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxufVxcbi5rdiBkbCBkZCA+IGRpdiBsYWJlbCB7XFxuICBmb250LXNpemU6IDEycHg7XFxuICBmb250LXdlaWdodDogbm9ybWFsO1xcbiAgY29sb3I6ICNjY2M7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICBtaW4td2lkdGg6IDIwcHg7XFxuICBwYWRkaW5nOiA0cHg7XFxuICB0ZXh0LWFsaWduOiByaWdodDtcXG59XFxuLmt2IGRsIGRkIHVsIHtcXG4gIHBhZGRpbmctbGVmdDogMTBweDtcXG4gIG1hcmdpbjogMDtcXG59XFxuLmt2IGRsIGRkIHVsIGVtIHtcXG4gIGZvbnQtc2l6ZTogMTJweDtcXG4gIG9wYWNpdHk6IDAuNTtcXG59XFxuLmt2IGRsIGRkIC5jaGlsZC1pdGVtIGxpIHtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxufVxcbi5rdiBkbCBkZCAuY2hpbGQtaXRlbSBsaSBlbSB7XFxuICBwYWRkaW5nOiA0cHg7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICB3aWR0aDogNjBweDtcXG4gIHRleHQtYWxpZ246IHJpZ2h0O1xcbn1cXG4ua3YgdGV4dGFyZWEge1xcbiAgd2lkdGg6IDk2JTtcXG4gIHJlc2l6ZTogdmVydGljYWw7XFxuICB0cmFuc2l0aW9uOiBoZWlnaHQgMC4xcztcXG4gIGZvbnQtc2l6ZTogMTJweDtcXG4gIG1hcmdpbi1ib3R0b206IDA7XFxuICBoZWlnaHQ6IDMwcHg7XFxuICBwYWRkaW5nOiA0cHggOHB4O1xcbiAgbGluZS1oZWlnaHQ6IDEuNjtcXG4gIGJvcmRlci1yYWRpdXM6IDBweDtcXG4gIGJvcmRlci13aWR0aDogMC43O1xcbiAgYmFja2dyb3VuZDogI2ZmZmZmMTtcXG59XFxuLmt2IHRleHRhcmVhOmZvY3VzIHtcXG4gIG91dGxpbmU6IDFweCBzb2xpZCAjOWQ5ZDlkO1xcbiAgb3V0bGluZS1vZmZzZXQ6IC0xcHg7XFxuICBib3gtc2hhZG93OiAwIDAgMTBweCByZ2JhKDAsIDAsIDAsIDAuMik7XFxuICBiYWNrZ3JvdW5kOiAjZmZmZmRmO1xcbn1cXG4uZWwtZGlhbG9nIHtcXG4gIGJhY2tncm91bmQ6ICNFQ0VDRUM7XFxufVxcbi5lbC1kaWFsb2cgLmRpYWxvZy10aXRsZSBlbSB7XFxuICBmb250LXNpemU6IHNtYWxsO1xcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xcbn1cXG4uZWwtZGlhbG9nIGJ1dHRvbiB7XFxuICBtYXJnaW46IDA7XFxufVxcbi5lbC1kaWFsb2cgLmVsLWRpYWxvZ19faGVhZGVyIHtcXG4gIHBhZGRpbmctdG9wOiAxMHB4O1xcbn1cXG4uZWwtZGlhbG9nIC5lbC1kaWFsb2dfX2hlYWRlcmJ0biB7XFxuICB0b3A6IDEwcHg7XFxufVxcbi5lbC1kaWFsb2cgLmVsLWRpYWxvZ19fYm9keSB7XFxuICBwYWRkaW5nOiAyMHB4IDQwcHggMDtcXG59XFxuLmVsLWRpYWxvZyAuZWwtZGlhbG9nX19mb290ZXIge1xcbiAgcGFkZGluZy1yaWdodDogNDBweDtcXG59XFxuOjotd2Via2l0LXNjcm9sbGJhciB7XFxuICB3aWR0aDogNHB4O1xcbiAgaGVpZ2h0OiA0cHg7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIC8qIG9yIGFkZCBpdCB0byB0aGUgdHJhY2sgKi9cXG59XFxuOjotd2Via2l0LXNjcm9sbGJhci10aHVtYiB7XFxuICBiYWNrZ3JvdW5kOiAjMTE4YmVlO1xcbiAgYm9yZGVyLXJhZGl1czogNXB4O1xcbn1cXG46Oi13ZWJraXQtc2Nyb2xsYmFyLWNvcm5lciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIC8qIG9yIGFkZCBpdCB0byB0aGUgdHJhY2sgKi9cXG59XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL3BhZ2UvaG9tZS5sZXNzXCIsXCJ3ZWJwYWNrOi8vLi9ob21lLnZ1ZVwiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTs7RUFFRSxVQUFBO0VBQ0EsU0FBQTtFQUNBLFlBQUE7QUNDRjtBRENBO0VBQ0UsWUFBQTtBQ0NGO0FERUE7RUFDRSxrQkFBQTtFQUNBLFlBQUE7RUFDQSxhQUFBO0FDQUY7QURFQTtFQUNFLHdCQUFBO0VBQ0EsVUFBQTtFQUNBLFlBQUE7RUFDQSxZQUFBO0VBQ0Esa0JBQUE7RUFDQSxhQUFBO0VBQ0EsbUJBQUE7RUFDQSwrQkFBQTtFQUNBLHNCQUFBO0FDQUY7QURUQTtFQVdJLFdBQUE7RUFDQSxrQkFBQTtFQUNBLGNBQUE7RUFDQSxZQUFBO0VBQ0EseUhBQUE7RUFDQSx5REFBQTtBQ0NKO0FEakJBO0VBbUJJLGVBQUE7QUNDSjtBRHBCQTtFQXFCTSxXQUFBO0VBQ0EsZUFBQTtBQ0VOO0FEeEJBO0VBeUJNLGtCQUFBO0FDRU47QUQzQkE7RUEyQlEsV0FBQTtFQUNBLFlBQUE7RUFDQSxrQkFBQTtFQUNBLE9BQUE7RUFDQSxNQUFBO0VBQ0EsVUFBQTtFQUNBLFNBQUE7RUFDQSxVQUFBO0FDR1I7QURyQ0E7RUFxQ1EsbUJBQUE7RUFDQSxXQUFBO0FDR1I7QURETTtFQUVJLG1CQUFBO0VBQ0EsMEhBQUE7QUNFVjtBRDdDQTtFQWtESSwwQkFBQTtBQ0ZKO0FEaERBO0VBb0RNLFdBQUE7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O0VBWUksaUJBQUE7QUNMSjtBRFBBO0VBZUksU0FBQTtBQ0xKO0FEVkE7RUFrQkksb0JBQUE7QUNMSjtBRGJBO0VBcUJJLG1CQUFBO0FDTEo7QURVQTtFQUNFLFVBQUE7RUFDQSxXQUFBO0VBQ0EsNkJBQUE7RUNSQSwyQkFBMkI7QUFDN0I7QURXQTtFQUNFLG1CQUFBO0VBQ0Esa0JBQUE7QUNURjtBRFlBO0VBQ0UsNkJBQUE7RUNWQSwyQkFBMkI7QUFDN0JcIixcInNvdXJjZXNDb250ZW50XCI6W1wiaHRtbCxcXG5ib2R5e1xcbiAgcGFkZGluZzowO1xcbiAgbWFyZ2luOiAwO1xcbiAgaGVpZ2h0OiAxMDAlO1xcbn1cXG4jYXBwe1xcbiAgaGVpZ2h0OiAxMDAlO1xcbn1cXG5cXG4ubWFpbntcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIGhlaWdodDogMTAwJTtcXG4gIGRpc3BsYXk6IGZsZXg7XFxufVxcbi5zaWRle1xcbiAgLXdlYmtpdC1hcHAtcmVnaW9uOiBkcmFnO1xcbiAgei1pbmRleDogMTtcXG4gIHdpZHRoOiAyMDBweDtcXG4gIGhlaWdodDogMTAwJTtcXG4gIG92ZXJmbG93LXk6IGhpZGRlbjtcXG4gIHBhZGRpbmc6IDEycHg7XFxuICBiYWNrZ3JvdW5kOiAjZjBmMGYwO1xcbiAgYm9yZGVyLXJpZ2h0OiAxcHggc29saWQgI2RlZGVkZTtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICBidXR0b257XFxuICAgIHdpZHRoOiAxMDAlO1xcbiAgICBib3JkZXItcmFkaXVzOiA1ZW07XFxuICAgIHBhZGRpbmc6IC42ZW07XFxuICAgIGJvcmRlcjpub25lO1xcbiAgICBib3gtc2hhZG93OiAwcHggM3B4IDFweCAtMnB4IHJnYmEoMCwgMCwgMCwgMC4yKSwgMHB4IDJweCAycHggMHB4IHJnYmEoMCwgMCwgMCwgMC4xNCksIDBweCAxcHggNXB4IDBweCByZ2JhKDAsMCwwLC4xMik7XFxuICAgIHRyYW5zaXRpb246IGJveC1zaGFkb3cgMjgwbXMgY3ViaWMtYmV6aWVyKDAuNCwgMCwgMC4yLCAxKTtcXG4gIH1cXG4gIC5lbnRyeXtcXG4gICAgcGFkZGluZzowIDEycHg7XFxuICAgIGlucHV0e1xcbiAgICAgIHdpZHRoOiAxMDAlO1xcbiAgICAgIGZvbnQtc2l6ZTogMTRweDtcXG4gICAgfVxcbiAgICAuc2VsZWN0LWZpbGV7XFxuICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgICAgIC5pbnB1dC1maWxle1xcbiAgICAgICAgd2lkdGg6IDEwMCU7XFxuICAgICAgICBoZWlnaHQ6IDEwMCU7XFxuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgICAgICBsZWZ0OiAwO1xcbiAgICAgICAgdG9wOiAwO1xcbiAgICAgICAgcGFkZGluZzogMDtcXG4gICAgICAgIG1hcmdpbjogMDtcXG4gICAgICAgIG9wYWNpdHk6IDA7XFxuICAgICAgfVxcbiAgICAgIGJ1dHRvbntcXG4gICAgICAgIGJhY2tncm91bmQ6ICM0YjVjYzQ7XFxuICAgICAgICBjb2xvcjogI2ZmZjtcXG4gICAgICB9XFxuICAgICAgJjpob3ZlcntcXG4gICAgICAgIGJ1dHRvbntcXG4gICAgICAgICAgYmFja2dyb3VuZDogIzVlNmJjMDtcXG4gICAgICAgICAgYm94LXNoYWRvdzogMHB4IDJweCA0cHggLTFweCByZ2JhKDAsIDAsIDAsIDAuMiksIDBweCA0cHggNXB4IDBweCByZ2JhKDAsIDAsIDAsIDAuMTQpLCAwcHggMXB4IDE1cHggMHB4IHJnYmEoMCwwLDAsLjE4KTtcXG4gICAgICAgIH1cXG4gICAgICB9XFxuICAgIH1cXG4gICAgXFxuICB9XFxuICAuY2F0YWxvZ3tcXG4gICAgaGVpZ2h0OiBjYWxjKDEwMCUgLSAxNzZweCk7XFxuICAgIGg0e1xcbiAgICAgIGNvbG9yOiAjOTk5O1xcbiAgICAgIHBhZGRpbmc6IDAgNHB4O1xcbiAgICAgIG1hcmdpbjogLjhlbSAwO1xcbiAgICAgIGZvbnQtc2l6ZTogMTJweDtcXG4gICAgICBmb250LXdlaWdodDogbm9ybWFsO1xcbiAgICAgIGN1cnNvcjogZGVmYXVsdDtcXG4gICAgfVxcbiAgICAuc2VhcmNoLXRleHR7XFxuICAgICAgbWFyZ2luLWJvdHRvbTogLjVyZW07XFxuICAgIH1cXG4gICAgLmVsLXRyZWV7XFxuICAgICAgaGVpZ2h0OiBjYWxjKDEwMCUgLSA3MHB4KTtcXG4gICAgICBvdmVyZmxvdy15OiBhdXRvO1xcbiAgICAgIGJvcmRlcjoxcHggc29saWQgI2RjZGZlNjtcXG4gICAgICBib3JkZXItcmFkaXVzOiA0cHg7XFxuICAgIH1cXG4gICAgLmVsLXRyZWUtbm9kZV9leHBhbmQtaWNvbi5pcy1sZWFme1xcbiAgICAgIGNvbG9yOiNjMGM0Y2M7XFxuICAgIH1cXG4gIH1cXG4gIC5vdXRwdXR7XFxuICAgIHBhZGRpbmc6MCAxMnB4O1xcbiAgICAvLyBwb3NpdGlvbjphYnNvbHV0ZTtcXG4gICAgLy8gd2lkdGg6IDE1MnB4O1xcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICAgIGJvdHRvbTogMDtcXG4gICAgcHtcXG4gICAgICBmb250LXNpemU6IDEycHg7XFxuICAgICAgY29sb3I6ICM5OTk7XFxuICAgICAgZm9udC1mYW1pbHk6ICflubzlnIYnO1xcbiAgICAgIG1hcmdpbjogMDtcXG4gICAgICBwYWRkaW5nLXRvcDogLjJlbTtcXG4gICAgICBjdXJzb3I6IGRlZmF1bHQ7XFxuICAgICAgYXtcXG4gICAgICAgIGNvbG9yOiAjOTk5O1xcbiAgICAgICAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcXG4gICAgICB9XFxuICAgIH1cXG4gIH1cXG59XFxuLmNvbnRlbnR7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICBmbGV4OiAxO1xcbiAgLm1haW4taGVhZGV7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGJveC1zaGFkb3c6IDFweCAycHggM3B4IHJnYmEoMCwwLDAsLjA4KTtcXG4gICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNkZGQ7XFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gICAgei1pbmRleDogOTk5O1xcbiAgICBiYWNrZ3JvdW5kOiAjZjBmMGYwO1xcbiAgICBoM3tcXG4gICAgICB3aWR0aDogY2FsYyg1MCUgLSA5cHgpO1xcbiAgICAgIGhlaWdodDogMzBweDtcXG4gICAgICBsaW5lLWhlaWdodDogMzBweDtcXG4gICAgICBmb250LXNpemU6IDE0cHg7XFxuICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gICAgICB0ZXh0LWluZGVudDogMTBweDtcXG4gICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgICAgIGN1cnNvcjogZGVmYXVsdDtcXG4gICAgICAuZ3JheXtcXG4gICAgICAgIGZvbnQtc2l6ZTogMTJweDtcXG4gICAgICAgIGNvbG9yOiAjOTk5O1xcbiAgICAgIH1cXG4gICAgfVxcbiAgfVxcbiAgc2VjdGlvbntcXG4gICAgb3ZlcmZsb3cteTogYXV0bztcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgcGFkZGluZy1sZWZ0OiAxMHB4O1xcbiAgICBwYWRkaW5nLXJpZ2h0OiA1cHg7XFxuICAgIGhlaWdodDogY2FsYygxMDAlIC0gNTlweCk7XFxuICAgIFxcbiAgICAvL3Njcm9sbC1iZWhhdmlvcjogaW5zdGFudDsvL3Ntb290aFxcbiAgICAubm9kYXRhe1xcbiAgICAgIHBhZGRpbmc6IDQwcHg7XFxuICAgICAgcGFkZGluZy10b3A6IDEyMHB4O1xcbiAgICAgIHdpZHRoOiAxMDAlO1xcbiAgICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgICAgIGNvbG9yOiAjY2NjO1xcbiAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gICAgICBmb250LXNpemU6IDE0cHg7XFxuICAgICAgY3Vyc29yOiBkZWZhdWx0O1xcbiAgICB9XFxuICB9XFxufVxcbi5sb2dve1xcbiAgLXdlYmtpdC1hcHAtcmVnaW9uOiBkcmFnO1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgcGFkZGluZzogMTBweCAwO1xcbiAgaDF7XFxuICAgIGZvbnQtc2l6ZTogMTRweDtcXG4gICAgY29sb3I6ICM5OTk7XFxuICAgIGZvbnQtd2VpZ2h0OiBub3JtYWw7XFxuICAgIGN1cnNvcjogZGVmYXVsdDtcXG4gICAgbWFyZ2luOiAuM2VtO1xcbiAgfVxcbiAgYXtjb2xvcjogIzk5OTt9XFxufVxcbi5taW5pe1xcbiAgcGFkZGluZzogLjJlbSAuNWVtO1xcbiAgZm9udC1zaXplOiAxMnB4O1xcbiAgbWFyZ2luOiAwO1xcbiAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XFxuICBjb2xvcjogIzExOGJlZTtcXG4gIGJvcmRlci13aWR0aDogMXB4O1xcbiAgbGluZS1oZWlnaHQ6IDE7XFxuICBib3JkZXItcmFkaXVzOiAycHg7XFxufVxcbnVse2xpc3Qtc3R5bGU6IG5vbmU7fVxcblxcbi5tYWluLWhlYWRlIGgzOm50aC1jaGlsZCgxKXtcXG4gIHRleHQtaW5kZW50OiAyMHB4O1xcbn1cXG4vLy5tYWluLWhlYWRlIGgzOm50aC1jaGlsZCgxKSxcXG4ua3Y6bnRoLWNoaWxkKDEpIGRse1xcbiAgJjo6YWZ0ZXJ7XFxuICAgIGNvbnRlbnQ6ICcnO1xcbiAgICB3aWR0aDogMXB4O1xcbiAgICBoZWlnaHQ6IDEwMCU7XFxuICAgIGJvcmRlci1yaWdodDogMXB4IGRhc2hlZCAjY2NjO1xcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgIHRvcDogMnB4O1xcbiAgICByaWdodDogMHB4O1xcbiAgfVxcbn1cXG4ua3Z7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICB3aWR0aDogNTAlO1xcbiAgZW17Y29sb3I6IHRlYWw7b3BhY2l0eTogLjg7fVxcbiAgZGx7XFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gICAgbWFyZ2luOiAwO1xcbiAgICAmOm50aC1jaGlsZChldmVuKXtcXG4gICAgICBiYWNrZ3JvdW5kOiAjZjVmNmY5O1xcbiAgICB9XFxuICAgIGR0e1xcbiAgICAgIHdpZHRoOiAxMDAlO1xcbiAgICAgIGxpbmUtaGVpZ2h0OiAxLjQ7XFxuICAgICAgXFxuICAgICAgZW17XFxuICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICAgICAgICBwYWRkaW5nOiA1cHg7XFxuICAgICAgfVxcbiAgICB9XFxuICAgIGRke1xcbiAgICAgIHBhZGRpbmctYm90dG9tOiAxMHB4O1xcbiAgICAgIHBhZGRpbmctcmlnaHQ6IDEwcHg7XFxuICAgICAgJj5kaXZ7XFxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICAgICAgbGFiZWx7XFxuICAgICAgICAgIGZvbnQtc2l6ZTogMTJweDtcXG4gICAgICAgICAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcXG4gICAgICAgICAgY29sb3I6ICNjY2M7XFxuICAgICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gICAgICAgICAgbWluLXdpZHRoOiAyMHB4O1xcbiAgICAgICAgICBwYWRkaW5nOiA0cHg7XFxuICAgICAgICAgIHRleHQtYWxpZ246IHJpZ2h0O1xcbiAgICAgICAgfVxcbiAgICAgIH1cXG4gICAgICB1bHtcXG4gICAgICAgIHBhZGRpbmctbGVmdDogMTBweDtcXG4gICAgICAgIG1hcmdpbjogMDtcXG4gICAgICAgIGVte2ZvbnQtc2l6ZTogMTJweDtvcGFjaXR5OiAwLjU7fVxcbiAgICAgIH1cXG4gICAgICAuY2hpbGQtaXRlbXtcXG4gICAgICAgIGxpe1xcbiAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICAgICAgICBlbXtcXG4gICAgICAgICAgICBwYWRkaW5nOiA0cHg7XFxuICAgICAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgICAgICAgICAgIHdpZHRoOiA2MHB4O1xcbiAgICAgICAgICAgIHRleHQtYWxpZ246IHJpZ2h0O1xcbiAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgICAgfVxcbiAgICB9XFxuICB9XFxuICB0ZXh0YXJlYXtcXG4gICAgd2lkdGg6IDk2JTtcXG4gICAgcmVzaXplOiB2ZXJ0aWNhbDtcXG4gICAgdHJhbnNpdGlvbjogaGVpZ2h0IC4xcztcXG4gICAgZm9udC1zaXplOiAxMnB4O1xcbiAgICBtYXJnaW4tYm90dG9tOiAwO1xcbiAgICBoZWlnaHQ6IDMwcHg7XFxuICAgIHBhZGRpbmc6IDRweCA4cHg7XFxuICAgIGxpbmUtaGVpZ2h0OiAxLjY7XFxuICAgIGJvcmRlci1yYWRpdXM6IDBweDtcXG4gICAgYm9yZGVyLXdpZHRoOiAwLjc7XFxuICAgIGJhY2tncm91bmQ6ICNmZmZmZjE7XFxuICAgICY6Zm9jdXN7XFxuICAgICAgb3V0bGluZTogMXB4IHNvbGlkICM5ZDlkOWQ7XFxuICAgICAgb3V0bGluZS1vZmZzZXQ6IC0xcHg7XFxuICAgICAgYm94LXNoYWRvdzogMCAwIDEwcHggcmdiYSgwLDAsMCwuMik7XFxuICAgICAgYmFja2dyb3VuZDogI2ZmZmZkZjtcXG4gICAgfVxcbiAgfVxcbn1cXG4uZWwtZGlhbG9ne1xcbiAgYmFja2dyb3VuZDogI0VDRUNFQztcXG4gIC5kaWFsb2ctdGl0bGV7XFxuICAgIGVte1xcbiAgICAgIGZvbnQtc2l6ZTogc21hbGw7XFxuICAgICAgZm9udC1zdHlsZTogbm9ybWFsO1xcbiAgICB9XFxuICB9XFxuICBidXR0b257XFxuICAgIG1hcmdpbjogMDtcXG4gIH1cXG4gIC5lbC1kaWFsb2dfX2hlYWRlcntcXG4gICAgcGFkZGluZy10b3A6IDEwcHg7XFxuICB9XFxuICAuZWwtZGlhbG9nX19oZWFkZXJidG57XFxuICAgIHRvcDoxMHB4O1xcbiAgfVxcbiAgLmVsLWRpYWxvZ19fYm9keXtcXG4gICAgcGFkZGluZzogMjBweCA0MHB4IDA7XFxuICB9XFxuICAuZWwtZGlhbG9nX19mb290ZXJ7XFxuICAgIHBhZGRpbmctcmlnaHQ6IDQwcHg7XFxuICB9XFxufVxcblxcbi8vc2Nyb2xsYmFyIHN0eWxlXFxuOjotd2Via2l0LXNjcm9sbGJhciB7XFxuICB3aWR0aDogNHB4O1xcbiAgaGVpZ2h0OiA0cHg7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIC8qIG9yIGFkZCBpdCB0byB0aGUgdHJhY2sgKi9cXG59XFxuXFxuOjotd2Via2l0LXNjcm9sbGJhci10aHVtYiB7XFxuICBiYWNrZ3JvdW5kOiMxMThiZWU7XFxuICBib3JkZXItcmFkaXVzOiA1cHg7XFxufVxcblxcbjo6LXdlYmtpdC1zY3JvbGxiYXItY29ybmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgLyogb3IgYWRkIGl0IHRvIHRoZSB0cmFjayAqL1xcbn1cIixcImh0bWwsXFxuYm9keSB7XFxuICBwYWRkaW5nOiAwO1xcbiAgbWFyZ2luOiAwO1xcbiAgaGVpZ2h0OiAxMDAlO1xcbn1cXG4jYXBwIHtcXG4gIGhlaWdodDogMTAwJTtcXG59XFxuLm1haW4ge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAgZGlzcGxheTogZmxleDtcXG59XFxuLnNpZGUge1xcbiAgLXdlYmtpdC1hcHAtcmVnaW9uOiBkcmFnO1xcbiAgei1pbmRleDogMTtcXG4gIHdpZHRoOiAyMDBweDtcXG4gIGhlaWdodDogMTAwJTtcXG4gIG92ZXJmbG93LXk6IGhpZGRlbjtcXG4gIHBhZGRpbmc6IDEycHg7XFxuICBiYWNrZ3JvdW5kOiAjZjBmMGYwO1xcbiAgYm9yZGVyLXJpZ2h0OiAxcHggc29saWQgI2RlZGVkZTtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxufVxcbi5zaWRlIGJ1dHRvbiB7XFxuICB3aWR0aDogMTAwJTtcXG4gIGJvcmRlci1yYWRpdXM6IDVlbTtcXG4gIHBhZGRpbmc6IDAuNmVtO1xcbiAgYm9yZGVyOiBub25lO1xcbiAgYm94LXNoYWRvdzogMHB4IDNweCAxcHggLTJweCByZ2JhKDAsIDAsIDAsIDAuMiksIDBweCAycHggMnB4IDBweCByZ2JhKDAsIDAsIDAsIDAuMTQpLCAwcHggMXB4IDVweCAwcHggcmdiYSgwLCAwLCAwLCAwLjEyKTtcXG4gIHRyYW5zaXRpb246IGJveC1zaGFkb3cgMjgwbXMgY3ViaWMtYmV6aWVyKDAuNCwgMCwgMC4yLCAxKTtcXG59XFxuLnNpZGUgLmVudHJ5IHtcXG4gIHBhZGRpbmc6IDAgMTJweDtcXG59XFxuLnNpZGUgLmVudHJ5IGlucHV0IHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgZm9udC1zaXplOiAxNHB4O1xcbn1cXG4uc2lkZSAuZW50cnkgLnNlbGVjdC1maWxlIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG59XFxuLnNpZGUgLmVudHJ5IC5zZWxlY3QtZmlsZSAuaW5wdXQtZmlsZSB7XFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogMTAwJTtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIGxlZnQ6IDA7XFxuICB0b3A6IDA7XFxuICBwYWRkaW5nOiAwO1xcbiAgbWFyZ2luOiAwO1xcbiAgb3BhY2l0eTogMDtcXG59XFxuLnNpZGUgLmVudHJ5IC5zZWxlY3QtZmlsZSBidXR0b24ge1xcbiAgYmFja2dyb3VuZDogIzRiNWNjNDtcXG4gIGNvbG9yOiAjZmZmO1xcbn1cXG4uc2lkZSAuZW50cnkgLnNlbGVjdC1maWxlOmhvdmVyIGJ1dHRvbiB7XFxuICBiYWNrZ3JvdW5kOiAjNWU2YmMwO1xcbiAgYm94LXNoYWRvdzogMHB4IDJweCA0cHggLTFweCByZ2JhKDAsIDAsIDAsIDAuMiksIDBweCA0cHggNXB4IDBweCByZ2JhKDAsIDAsIDAsIDAuMTQpLCAwcHggMXB4IDE1cHggMHB4IHJnYmEoMCwgMCwgMCwgMC4xOCk7XFxufVxcbi5zaWRlIC5jYXRhbG9nIHtcXG4gIGhlaWdodDogY2FsYygxMDAlIC0gMTc2cHgpO1xcbn1cXG4uc2lkZSAuY2F0YWxvZyBoNCB7XFxuICBjb2xvcjogIzk5OTtcXG4gIHBhZGRpbmc6IDAgNHB4O1xcbiAgbWFyZ2luOiAwLjhlbSAwO1xcbiAgZm9udC1zaXplOiAxMnB4O1xcbiAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcXG4gIGN1cnNvcjogZGVmYXVsdDtcXG59XFxuLnNpZGUgLmNhdGFsb2cgLnNlYXJjaC10ZXh0IHtcXG4gIG1hcmdpbi1ib3R0b206IDAuNXJlbTtcXG59XFxuLnNpZGUgLmNhdGFsb2cgLmVsLXRyZWUge1xcbiAgaGVpZ2h0OiBjYWxjKDEwMCUgLSA3MHB4KTtcXG4gIG92ZXJmbG93LXk6IGF1dG87XFxuICBib3JkZXI6IDFweCBzb2xpZCAjZGNkZmU2O1xcbiAgYm9yZGVyLXJhZGl1czogNHB4O1xcbn1cXG4uc2lkZSAuY2F0YWxvZyAuZWwtdHJlZS1ub2RlX2V4cGFuZC1pY29uLmlzLWxlYWYge1xcbiAgY29sb3I6ICNjMGM0Y2M7XFxufVxcbi5zaWRlIC5vdXRwdXQge1xcbiAgcGFkZGluZzogMCAxMnB4O1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgYm90dG9tOiAwO1xcbn1cXG4uc2lkZSAub3V0cHV0IHAge1xcbiAgZm9udC1zaXplOiAxMnB4O1xcbiAgY29sb3I6ICM5OTk7XFxuICBmb250LWZhbWlseTogJ+W5vOWchic7XFxuICBtYXJnaW46IDA7XFxuICBwYWRkaW5nLXRvcDogMC4yZW07XFxuICBjdXJzb3I6IGRlZmF1bHQ7XFxufVxcbi5zaWRlIC5vdXRwdXQgcCBhIHtcXG4gIGNvbG9yOiAjOTk5O1xcbiAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcXG59XFxuLmNvbnRlbnQge1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAgZmxleDogMTtcXG59XFxuLmNvbnRlbnQgLm1haW4taGVhZGUge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGJveC1zaGFkb3c6IDFweCAycHggM3B4IHJnYmEoMCwgMCwgMCwgMC4wOCk7XFxuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI2RkZDtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIHotaW5kZXg6IDk5OTtcXG4gIGJhY2tncm91bmQ6ICNmMGYwZjA7XFxufVxcbi5jb250ZW50IC5tYWluLWhlYWRlIGgzIHtcXG4gIHdpZHRoOiBjYWxjKDUwJSAtIDlweCk7XFxuICBoZWlnaHQ6IDMwcHg7XFxuICBsaW5lLWhlaWdodDogMzBweDtcXG4gIGZvbnQtc2l6ZTogMTRweDtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICB0ZXh0LWluZGVudDogMTBweDtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIGN1cnNvcjogZGVmYXVsdDtcXG59XFxuLmNvbnRlbnQgLm1haW4taGVhZGUgaDMgLmdyYXkge1xcbiAgZm9udC1zaXplOiAxMnB4O1xcbiAgY29sb3I6ICM5OTk7XFxufVxcbi5jb250ZW50IHNlY3Rpb24ge1xcbiAgb3ZlcmZsb3cteTogYXV0bztcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBwYWRkaW5nLWxlZnQ6IDEwcHg7XFxuICBwYWRkaW5nLXJpZ2h0OiA1cHg7XFxuICBoZWlnaHQ6IGNhbGMoMTAwJSAtIDU5cHgpO1xcbn1cXG4uY29udGVudCBzZWN0aW9uIC5ub2RhdGEge1xcbiAgcGFkZGluZzogNDBweDtcXG4gIHBhZGRpbmctdG9wOiAxMjBweDtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICBjb2xvcjogI2NjYztcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIGZvbnQtc2l6ZTogMTRweDtcXG4gIGN1cnNvcjogZGVmYXVsdDtcXG59XFxuLmxvZ28ge1xcbiAgLXdlYmtpdC1hcHAtcmVnaW9uOiBkcmFnO1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgcGFkZGluZzogMTBweCAwO1xcbn1cXG4ubG9nbyBoMSB7XFxuICBmb250LXNpemU6IDE0cHg7XFxuICBjb2xvcjogIzk5OTtcXG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XFxuICBjdXJzb3I6IGRlZmF1bHQ7XFxuICBtYXJnaW46IDAuM2VtO1xcbn1cXG4ubG9nbyBhIHtcXG4gIGNvbG9yOiAjOTk5O1xcbn1cXG4ubWluaSB7XFxuICBwYWRkaW5nOiAwLjJlbSAwLjVlbTtcXG4gIGZvbnQtc2l6ZTogMTJweDtcXG4gIG1hcmdpbjogMDtcXG4gIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xcbiAgY29sb3I6ICMxMThiZWU7XFxuICBib3JkZXItd2lkdGg6IDFweDtcXG4gIGxpbmUtaGVpZ2h0OiAxO1xcbiAgYm9yZGVyLXJhZGl1czogMnB4O1xcbn1cXG51bCB7XFxuICBsaXN0LXN0eWxlOiBub25lO1xcbn1cXG4ubWFpbi1oZWFkZSBoMzpudGgtY2hpbGQoMSkge1xcbiAgdGV4dC1pbmRlbnQ6IDIwcHg7XFxufVxcbi5rdjpudGgtY2hpbGQoMSkgZGw6OmFmdGVyIHtcXG4gIGNvbnRlbnQ6ICcnO1xcbiAgd2lkdGg6IDFweDtcXG4gIGhlaWdodDogMTAwJTtcXG4gIGJvcmRlci1yaWdodDogMXB4IGRhc2hlZCAjY2NjO1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgdG9wOiAycHg7XFxuICByaWdodDogMHB4O1xcbn1cXG4ua3Yge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgd2lkdGg6IDUwJTtcXG59XFxuLmt2IGVtIHtcXG4gIGNvbG9yOiB0ZWFsO1xcbiAgb3BhY2l0eTogMC44O1xcbn1cXG4ua3YgZGwge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgbWFyZ2luOiAwO1xcbn1cXG4ua3YgZGw6bnRoLWNoaWxkKGV2ZW4pIHtcXG4gIGJhY2tncm91bmQ6ICNmNWY2Zjk7XFxufVxcbi5rdiBkbCBkdCB7XFxuICB3aWR0aDogMTAwJTtcXG4gIGxpbmUtaGVpZ2h0OiAxLjQ7XFxufVxcbi5rdiBkbCBkdCBlbSB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICBwYWRkaW5nOiA1cHg7XFxufVxcbi5rdiBkbCBkZCB7XFxuICBwYWRkaW5nLWJvdHRvbTogMTBweDtcXG4gIHBhZGRpbmctcmlnaHQ6IDEwcHg7XFxufVxcbi5rdiBkbCBkZCA+IGRpdiB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbn1cXG4ua3YgZGwgZGQgPiBkaXYgbGFiZWwge1xcbiAgZm9udC1zaXplOiAxMnB4O1xcbiAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcXG4gIGNvbG9yOiAjY2NjO1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgbWluLXdpZHRoOiAyMHB4O1xcbiAgcGFkZGluZzogNHB4O1xcbiAgdGV4dC1hbGlnbjogcmlnaHQ7XFxufVxcbi5rdiBkbCBkZCB1bCB7XFxuICBwYWRkaW5nLWxlZnQ6IDEwcHg7XFxuICBtYXJnaW46IDA7XFxufVxcbi5rdiBkbCBkZCB1bCBlbSB7XFxuICBmb250LXNpemU6IDEycHg7XFxuICBvcGFjaXR5OiAwLjU7XFxufVxcbi5rdiBkbCBkZCAuY2hpbGQtaXRlbSBsaSB7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbn1cXG4ua3YgZGwgZGQgLmNoaWxkLWl0ZW0gbGkgZW0ge1xcbiAgcGFkZGluZzogNHB4O1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgd2lkdGg6IDYwcHg7XFxuICB0ZXh0LWFsaWduOiByaWdodDtcXG59XFxuLmt2IHRleHRhcmVhIHtcXG4gIHdpZHRoOiA5NiU7XFxuICByZXNpemU6IHZlcnRpY2FsO1xcbiAgdHJhbnNpdGlvbjogaGVpZ2h0IDAuMXM7XFxuICBmb250LXNpemU6IDEycHg7XFxuICBtYXJnaW4tYm90dG9tOiAwO1xcbiAgaGVpZ2h0OiAzMHB4O1xcbiAgcGFkZGluZzogNHB4IDhweDtcXG4gIGxpbmUtaGVpZ2h0OiAxLjY7XFxuICBib3JkZXItcmFkaXVzOiAwcHg7XFxuICBib3JkZXItd2lkdGg6IDAuNztcXG4gIGJhY2tncm91bmQ6ICNmZmZmZjE7XFxufVxcbi5rdiB0ZXh0YXJlYTpmb2N1cyB7XFxuICBvdXRsaW5lOiAxcHggc29saWQgIzlkOWQ5ZDtcXG4gIG91dGxpbmUtb2Zmc2V0OiAtMXB4O1xcbiAgYm94LXNoYWRvdzogMCAwIDEwcHggcmdiYSgwLCAwLCAwLCAwLjIpO1xcbiAgYmFja2dyb3VuZDogI2ZmZmZkZjtcXG59XFxuLmVsLWRpYWxvZyB7XFxuICBiYWNrZ3JvdW5kOiAjRUNFQ0VDO1xcbn1cXG4uZWwtZGlhbG9nIC5kaWFsb2ctdGl0bGUgZW0ge1xcbiAgZm9udC1zaXplOiBzbWFsbDtcXG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcXG59XFxuLmVsLWRpYWxvZyBidXR0b24ge1xcbiAgbWFyZ2luOiAwO1xcbn1cXG4uZWwtZGlhbG9nIC5lbC1kaWFsb2dfX2hlYWRlciB7XFxuICBwYWRkaW5nLXRvcDogMTBweDtcXG59XFxuLmVsLWRpYWxvZyAuZWwtZGlhbG9nX19oZWFkZXJidG4ge1xcbiAgdG9wOiAxMHB4O1xcbn1cXG4uZWwtZGlhbG9nIC5lbC1kaWFsb2dfX2JvZHkge1xcbiAgcGFkZGluZzogMjBweCA0MHB4IDA7XFxufVxcbi5lbC1kaWFsb2cgLmVsLWRpYWxvZ19fZm9vdGVyIHtcXG4gIHBhZGRpbmctcmlnaHQ6IDQwcHg7XFxufVxcbjo6LXdlYmtpdC1zY3JvbGxiYXIge1xcbiAgd2lkdGg6IDRweDtcXG4gIGhlaWdodDogNHB4O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICAvKiBvciBhZGQgaXQgdG8gdGhlIHRyYWNrICovXFxufVxcbjo6LXdlYmtpdC1zY3JvbGxiYXItdGh1bWIge1xcbiAgYmFja2dyb3VuZDogIzExOGJlZTtcXG4gIGJvcmRlci1yYWRpdXM6IDVweDtcXG59XFxuOjotd2Via2l0LXNjcm9sbGJhci1jb3JuZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICAvKiBvciBhZGQgaXQgdG8gdGhlIHRyYWNrICovXFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbi8vIGNzcyBiYXNlIGNvZGUsIGluamVjdGVkIGJ5IHRoZSBjc3MtbG9hZGVyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdOyAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICByZXR1cm4gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGNvbnRlbnQsIFwifVwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbignJyk7XG4gIH07IC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5cblxuICBsaXN0LmkgPSBmdW5jdGlvbiAobW9kdWxlcywgbWVkaWFRdWVyeSwgZGVkdXBlKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSAnc3RyaW5nJykge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCAnJ11dO1xuICAgIH1cblxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1kZXN0cnVjdHVyaW5nXG4gICAgICAgIHZhciBpZCA9IHRoaXNbaV1bMF07XG5cbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbW9kdWxlcy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2ldKTtcblxuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb250aW51ZVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1lZGlhUXVlcnkpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhUXVlcnk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsyXSA9IFwiXCIuY29uY2F0KG1lZGlhUXVlcnksIFwiIGFuZCBcIikuY29uY2F0KGl0ZW1bMl0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIGxpc3Q7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHsgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTsgfVxuXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpOyB9XG5cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHsgaWYgKCFvKSByZXR1cm47IGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTsgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTsgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7IGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgfVxuXG5mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikgeyBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH1cblxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoYXJyKSkpIHJldHVybjsgdmFyIF9hcnIgPSBbXTsgdmFyIF9uID0gdHJ1ZTsgdmFyIF9kID0gZmFsc2U7IHZhciBfZSA9IHVuZGVmaW5lZDsgdHJ5IHsgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgeyBfYXJyLnB1c2goX3MudmFsdWUpOyBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7IH0gfSBjYXRjaCAoZXJyKSB7IF9kID0gdHJ1ZTsgX2UgPSBlcnI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0gIT0gbnVsbCkgX2lbXCJyZXR1cm5cIl0oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjsgfVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSkge1xuICB2YXIgX2l0ZW0gPSBfc2xpY2VkVG9BcnJheShpdGVtLCA0KSxcbiAgICAgIGNvbnRlbnQgPSBfaXRlbVsxXSxcbiAgICAgIGNzc01hcHBpbmcgPSBfaXRlbVszXTtcblxuICBpZiAodHlwZW9mIGJ0b2EgPT09ICdmdW5jdGlvbicpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICByZXR1cm4gXCIvKiMgc291cmNlVVJMPVwiLmNvbmNhdChjc3NNYXBwaW5nLnNvdXJjZVJvb3QgfHwgJycpLmNvbmNhdChzb3VyY2UsIFwiICovXCIpO1xuICAgIH0pO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oJ1xcbicpO1xuICB9XG5cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKCdcXG4nKTtcbn07IiwiIWZ1bmN0aW9uKHQsZSl7XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHMmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBtb2R1bGU/bW9kdWxlLmV4cG9ydHM9ZSgpOlwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoZSk6dC5kYXlqcz1lKCl9KHRoaXMsZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjt2YXIgdD1cIm1pbGxpc2Vjb25kXCIsZT1cInNlY29uZFwiLG49XCJtaW51dGVcIixyPVwiaG91clwiLGk9XCJkYXlcIixzPVwid2Vla1wiLHU9XCJtb250aFwiLGE9XCJxdWFydGVyXCIsbz1cInllYXJcIixmPVwiZGF0ZVwiLGg9L14oXFxkezR9KVstL10/KFxcZHsxLDJ9KT9bLS9dPyhcXGR7MCwyfSlbXjAtOV0qKFxcZHsxLDJ9KT86PyhcXGR7MSwyfSk/Oj8oXFxkezEsMn0pPy4/KFxcZCspPyQvLGM9L1xcWyhbXlxcXV0rKV18WXsxLDR9fE17MSw0fXxEezEsMn18ZHsxLDR9fEh7MSwyfXxoezEsMn18YXxBfG17MSwyfXxzezEsMn18WnsxLDJ9fFNTUy9nLGQ9e25hbWU6XCJlblwiLHdlZWtkYXlzOlwiU3VuZGF5X01vbmRheV9UdWVzZGF5X1dlZG5lc2RheV9UaHVyc2RheV9GcmlkYXlfU2F0dXJkYXlcIi5zcGxpdChcIl9cIiksbW9udGhzOlwiSmFudWFyeV9GZWJydWFyeV9NYXJjaF9BcHJpbF9NYXlfSnVuZV9KdWx5X0F1Z3VzdF9TZXB0ZW1iZXJfT2N0b2Jlcl9Ob3ZlbWJlcl9EZWNlbWJlclwiLnNwbGl0KFwiX1wiKX0sJD1mdW5jdGlvbih0LGUsbil7dmFyIHI9U3RyaW5nKHQpO3JldHVybiFyfHxyLmxlbmd0aD49ZT90OlwiXCIrQXJyYXkoZSsxLXIubGVuZ3RoKS5qb2luKG4pK3R9LGw9e3M6JCx6OmZ1bmN0aW9uKHQpe3ZhciBlPS10LnV0Y09mZnNldCgpLG49TWF0aC5hYnMoZSkscj1NYXRoLmZsb29yKG4vNjApLGk9biU2MDtyZXR1cm4oZTw9MD9cIitcIjpcIi1cIikrJChyLDIsXCIwXCIpK1wiOlwiKyQoaSwyLFwiMFwiKX0sbTpmdW5jdGlvbiB0KGUsbil7aWYoZS5kYXRlKCk8bi5kYXRlKCkpcmV0dXJuLXQobixlKTt2YXIgcj0xMioobi55ZWFyKCktZS55ZWFyKCkpKyhuLm1vbnRoKCktZS5tb250aCgpKSxpPWUuY2xvbmUoKS5hZGQocix1KSxzPW4taTwwLGE9ZS5jbG9uZSgpLmFkZChyKyhzPy0xOjEpLHUpO3JldHVybisoLShyKyhuLWkpLyhzP2ktYTphLWkpKXx8MCl9LGE6ZnVuY3Rpb24odCl7cmV0dXJuIHQ8MD9NYXRoLmNlaWwodCl8fDA6TWF0aC5mbG9vcih0KX0scDpmdW5jdGlvbihoKXtyZXR1cm57TTp1LHk6byx3OnMsZDppLEQ6ZixoOnIsbTpuLHM6ZSxtczp0LFE6YX1baF18fFN0cmluZyhofHxcIlwiKS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL3MkLyxcIlwiKX0sdTpmdW5jdGlvbih0KXtyZXR1cm4gdm9pZCAwPT09dH19LHk9XCJlblwiLE09e307TVt5XT1kO3ZhciBtPWZ1bmN0aW9uKHQpe3JldHVybiB0IGluc3RhbmNlb2YgU30sRD1mdW5jdGlvbih0LGUsbil7dmFyIHI7aWYoIXQpcmV0dXJuIHk7aWYoXCJzdHJpbmdcIj09dHlwZW9mIHQpTVt0XSYmKHI9dCksZSYmKE1bdF09ZSxyPXQpO2Vsc2V7dmFyIGk9dC5uYW1lO01baV09dCxyPWl9cmV0dXJuIW4mJnImJih5PXIpLHJ8fCFuJiZ5fSx2PWZ1bmN0aW9uKHQsZSl7aWYobSh0KSlyZXR1cm4gdC5jbG9uZSgpO3ZhciBuPVwib2JqZWN0XCI9PXR5cGVvZiBlP2U6e307cmV0dXJuIG4uZGF0ZT10LG4uYXJncz1hcmd1bWVudHMsbmV3IFMobil9LGc9bDtnLmw9RCxnLmk9bSxnLnc9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdih0LHtsb2NhbGU6ZS4kTCx1dGM6ZS4kdSx4OmUuJHgsJG9mZnNldDplLiRvZmZzZXR9KX07dmFyIFM9ZnVuY3Rpb24oKXtmdW5jdGlvbiBkKHQpe3RoaXMuJEw9RCh0LmxvY2FsZSxudWxsLCEwKSx0aGlzLnBhcnNlKHQpfXZhciAkPWQucHJvdG90eXBlO3JldHVybiAkLnBhcnNlPWZ1bmN0aW9uKHQpe3RoaXMuJGQ9ZnVuY3Rpb24odCl7dmFyIGU9dC5kYXRlLG49dC51dGM7aWYobnVsbD09PWUpcmV0dXJuIG5ldyBEYXRlKE5hTik7aWYoZy51KGUpKXJldHVybiBuZXcgRGF0ZTtpZihlIGluc3RhbmNlb2YgRGF0ZSlyZXR1cm4gbmV3IERhdGUoZSk7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGUmJiEvWiQvaS50ZXN0KGUpKXt2YXIgcj1lLm1hdGNoKGgpO2lmKHIpe3ZhciBpPXJbMl0tMXx8MCxzPShyWzddfHxcIjBcIikuc3Vic3RyaW5nKDAsMyk7cmV0dXJuIG4/bmV3IERhdGUoRGF0ZS5VVEMoclsxXSxpLHJbM118fDEscls0XXx8MCxyWzVdfHwwLHJbNl18fDAscykpOm5ldyBEYXRlKHJbMV0saSxyWzNdfHwxLHJbNF18fDAscls1XXx8MCxyWzZdfHwwLHMpfX1yZXR1cm4gbmV3IERhdGUoZSl9KHQpLHRoaXMuJHg9dC54fHx7fSx0aGlzLmluaXQoKX0sJC5pbml0PWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy4kZDt0aGlzLiR5PXQuZ2V0RnVsbFllYXIoKSx0aGlzLiRNPXQuZ2V0TW9udGgoKSx0aGlzLiREPXQuZ2V0RGF0ZSgpLHRoaXMuJFc9dC5nZXREYXkoKSx0aGlzLiRIPXQuZ2V0SG91cnMoKSx0aGlzLiRtPXQuZ2V0TWludXRlcygpLHRoaXMuJHM9dC5nZXRTZWNvbmRzKCksdGhpcy4kbXM9dC5nZXRNaWxsaXNlY29uZHMoKX0sJC4kdXRpbHM9ZnVuY3Rpb24oKXtyZXR1cm4gZ30sJC5pc1ZhbGlkPWZ1bmN0aW9uKCl7cmV0dXJuIShcIkludmFsaWQgRGF0ZVwiPT09dGhpcy4kZC50b1N0cmluZygpKX0sJC5pc1NhbWU9ZnVuY3Rpb24odCxlKXt2YXIgbj12KHQpO3JldHVybiB0aGlzLnN0YXJ0T2YoZSk8PW4mJm48PXRoaXMuZW5kT2YoZSl9LCQuaXNBZnRlcj1mdW5jdGlvbih0LGUpe3JldHVybiB2KHQpPHRoaXMuc3RhcnRPZihlKX0sJC5pc0JlZm9yZT1mdW5jdGlvbih0LGUpe3JldHVybiB0aGlzLmVuZE9mKGUpPHYodCl9LCQuJGc9ZnVuY3Rpb24odCxlLG4pe3JldHVybiBnLnUodCk/dGhpc1tlXTp0aGlzLnNldChuLHQpfSwkLnVuaXg9ZnVuY3Rpb24oKXtyZXR1cm4gTWF0aC5mbG9vcih0aGlzLnZhbHVlT2YoKS8xZTMpfSwkLnZhbHVlT2Y9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy4kZC5nZXRUaW1lKCl9LCQuc3RhcnRPZj1mdW5jdGlvbih0LGEpe3ZhciBoPXRoaXMsYz0hIWcudShhKXx8YSxkPWcucCh0KSwkPWZ1bmN0aW9uKHQsZSl7dmFyIG49Zy53KGguJHU/RGF0ZS5VVEMoaC4keSxlLHQpOm5ldyBEYXRlKGguJHksZSx0KSxoKTtyZXR1cm4gYz9uOm4uZW5kT2YoaSl9LGw9ZnVuY3Rpb24odCxlKXtyZXR1cm4gZy53KGgudG9EYXRlKClbdF0uYXBwbHkoaC50b0RhdGUoXCJzXCIpLChjP1swLDAsMCwwXTpbMjMsNTksNTksOTk5XSkuc2xpY2UoZSkpLGgpfSx5PXRoaXMuJFcsTT10aGlzLiRNLG09dGhpcy4kRCxEPVwic2V0XCIrKHRoaXMuJHU/XCJVVENcIjpcIlwiKTtzd2l0Y2goZCl7Y2FzZSBvOnJldHVybiBjPyQoMSwwKTokKDMxLDExKTtjYXNlIHU6cmV0dXJuIGM/JCgxLE0pOiQoMCxNKzEpO2Nhc2Ugczp2YXIgdj10aGlzLiRsb2NhbGUoKS53ZWVrU3RhcnR8fDAsUz0oeTx2P3krNzp5KS12O3JldHVybiAkKGM/bS1TOm0rKDYtUyksTSk7Y2FzZSBpOmNhc2UgZjpyZXR1cm4gbChEK1wiSG91cnNcIiwwKTtjYXNlIHI6cmV0dXJuIGwoRCtcIk1pbnV0ZXNcIiwxKTtjYXNlIG46cmV0dXJuIGwoRCtcIlNlY29uZHNcIiwyKTtjYXNlIGU6cmV0dXJuIGwoRCtcIk1pbGxpc2Vjb25kc1wiLDMpO2RlZmF1bHQ6cmV0dXJuIHRoaXMuY2xvbmUoKX19LCQuZW5kT2Y9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuc3RhcnRPZih0LCExKX0sJC4kc2V0PWZ1bmN0aW9uKHMsYSl7dmFyIGgsYz1nLnAocyksZD1cInNldFwiKyh0aGlzLiR1P1wiVVRDXCI6XCJcIiksJD0oaD17fSxoW2ldPWQrXCJEYXRlXCIsaFtmXT1kK1wiRGF0ZVwiLGhbdV09ZCtcIk1vbnRoXCIsaFtvXT1kK1wiRnVsbFllYXJcIixoW3JdPWQrXCJIb3Vyc1wiLGhbbl09ZCtcIk1pbnV0ZXNcIixoW2VdPWQrXCJTZWNvbmRzXCIsaFt0XT1kK1wiTWlsbGlzZWNvbmRzXCIsaClbY10sbD1jPT09aT90aGlzLiREKyhhLXRoaXMuJFcpOmE7aWYoYz09PXV8fGM9PT1vKXt2YXIgeT10aGlzLmNsb25lKCkuc2V0KGYsMSk7eS4kZFskXShsKSx5LmluaXQoKSx0aGlzLiRkPXkuc2V0KGYsTWF0aC5taW4odGhpcy4kRCx5LmRheXNJbk1vbnRoKCkpKS4kZH1lbHNlICQmJnRoaXMuJGRbJF0obCk7cmV0dXJuIHRoaXMuaW5pdCgpLHRoaXN9LCQuc2V0PWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMuY2xvbmUoKS4kc2V0KHQsZSl9LCQuZ2V0PWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzW2cucCh0KV0oKX0sJC5hZGQ9ZnVuY3Rpb24odCxhKXt2YXIgZixoPXRoaXM7dD1OdW1iZXIodCk7dmFyIGM9Zy5wKGEpLGQ9ZnVuY3Rpb24oZSl7dmFyIG49dihoKTtyZXR1cm4gZy53KG4uZGF0ZShuLmRhdGUoKStNYXRoLnJvdW5kKGUqdCkpLGgpfTtpZihjPT09dSlyZXR1cm4gdGhpcy5zZXQodSx0aGlzLiRNK3QpO2lmKGM9PT1vKXJldHVybiB0aGlzLnNldChvLHRoaXMuJHkrdCk7aWYoYz09PWkpcmV0dXJuIGQoMSk7aWYoYz09PXMpcmV0dXJuIGQoNyk7dmFyICQ9KGY9e30sZltuXT02ZTQsZltyXT0zNmU1LGZbZV09MWUzLGYpW2NdfHwxLGw9dGhpcy4kZC5nZXRUaW1lKCkrdCokO3JldHVybiBnLncobCx0aGlzKX0sJC5zdWJ0cmFjdD1mdW5jdGlvbih0LGUpe3JldHVybiB0aGlzLmFkZCgtMSp0LGUpfSwkLmZvcm1hdD1mdW5jdGlvbih0KXt2YXIgZT10aGlzO2lmKCF0aGlzLmlzVmFsaWQoKSlyZXR1cm5cIkludmFsaWQgRGF0ZVwiO3ZhciBuPXR8fFwiWVlZWS1NTS1ERFRISDptbTpzc1pcIixyPWcueih0aGlzKSxpPXRoaXMuJGxvY2FsZSgpLHM9dGhpcy4kSCx1PXRoaXMuJG0sYT10aGlzLiRNLG89aS53ZWVrZGF5cyxmPWkubW9udGhzLGg9ZnVuY3Rpb24odCxyLGkscyl7cmV0dXJuIHQmJih0W3JdfHx0KGUsbikpfHxpW3JdLnN1YnN0cigwLHMpfSxkPWZ1bmN0aW9uKHQpe3JldHVybiBnLnMocyUxMnx8MTIsdCxcIjBcIil9LCQ9aS5tZXJpZGllbXx8ZnVuY3Rpb24odCxlLG4pe3ZhciByPXQ8MTI/XCJBTVwiOlwiUE1cIjtyZXR1cm4gbj9yLnRvTG93ZXJDYXNlKCk6cn0sbD17WVk6U3RyaW5nKHRoaXMuJHkpLnNsaWNlKC0yKSxZWVlZOnRoaXMuJHksTTphKzEsTU06Zy5zKGErMSwyLFwiMFwiKSxNTU06aChpLm1vbnRoc1Nob3J0LGEsZiwzKSxNTU1NOmgoZixhKSxEOnRoaXMuJEQsREQ6Zy5zKHRoaXMuJEQsMixcIjBcIiksZDpTdHJpbmcodGhpcy4kVyksZGQ6aChpLndlZWtkYXlzTWluLHRoaXMuJFcsbywyKSxkZGQ6aChpLndlZWtkYXlzU2hvcnQsdGhpcy4kVyxvLDMpLGRkZGQ6b1t0aGlzLiRXXSxIOlN0cmluZyhzKSxISDpnLnMocywyLFwiMFwiKSxoOmQoMSksaGg6ZCgyKSxhOiQocyx1LCEwKSxBOiQocyx1LCExKSxtOlN0cmluZyh1KSxtbTpnLnModSwyLFwiMFwiKSxzOlN0cmluZyh0aGlzLiRzKSxzczpnLnModGhpcy4kcywyLFwiMFwiKSxTU1M6Zy5zKHRoaXMuJG1zLDMsXCIwXCIpLFo6cn07cmV0dXJuIG4ucmVwbGFjZShjLGZ1bmN0aW9uKHQsZSl7cmV0dXJuIGV8fGxbdF18fHIucmVwbGFjZShcIjpcIixcIlwiKX0pfSwkLnV0Y09mZnNldD1mdW5jdGlvbigpe3JldHVybiAxNSotTWF0aC5yb3VuZCh0aGlzLiRkLmdldFRpbWV6b25lT2Zmc2V0KCkvMTUpfSwkLmRpZmY9ZnVuY3Rpb24odCxmLGgpe3ZhciBjLGQ9Zy5wKGYpLCQ9dih0KSxsPTZlNCooJC51dGNPZmZzZXQoKS10aGlzLnV0Y09mZnNldCgpKSx5PXRoaXMtJCxNPWcubSh0aGlzLCQpO3JldHVybiBNPShjPXt9LGNbb109TS8xMixjW3VdPU0sY1thXT1NLzMsY1tzXT0oeS1sKS82MDQ4ZTUsY1tpXT0oeS1sKS84NjRlNSxjW3JdPXkvMzZlNSxjW25dPXkvNmU0LGNbZV09eS8xZTMsYylbZF18fHksaD9NOmcuYShNKX0sJC5kYXlzSW5Nb250aD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmVuZE9mKHUpLiREfSwkLiRsb2NhbGU9ZnVuY3Rpb24oKXtyZXR1cm4gTVt0aGlzLiRMXX0sJC5sb2NhbGU9ZnVuY3Rpb24odCxlKXtpZighdClyZXR1cm4gdGhpcy4kTDt2YXIgbj10aGlzLmNsb25lKCkscj1EKHQsZSwhMCk7cmV0dXJuIHImJihuLiRMPXIpLG59LCQuY2xvbmU9ZnVuY3Rpb24oKXtyZXR1cm4gZy53KHRoaXMuJGQsdGhpcyl9LCQudG9EYXRlPWZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBEYXRlKHRoaXMudmFsdWVPZigpKX0sJC50b0pTT049ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5pc1ZhbGlkKCk/dGhpcy50b0lTT1N0cmluZygpOm51bGx9LCQudG9JU09TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy4kZC50b0lTT1N0cmluZygpfSwkLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuJGQudG9VVENTdHJpbmcoKX0sZH0oKSxwPVMucHJvdG90eXBlO3JldHVybiB2LnByb3RvdHlwZT1wLFtbXCIkbXNcIix0XSxbXCIkc1wiLGVdLFtcIiRtXCIsbl0sW1wiJEhcIixyXSxbXCIkV1wiLGldLFtcIiRNXCIsdV0sW1wiJHlcIixvXSxbXCIkRFwiLGZdXS5mb3JFYWNoKGZ1bmN0aW9uKHQpe3BbdFsxXV09ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuJGcoZSx0WzBdLHRbMV0pfX0pLHYuZXh0ZW5kPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQuJGl8fCh0KGUsUyx2KSx0LiRpPSEwKSx2fSx2LmxvY2FsZT1ELHYuaXNEYXlqcz1tLHYudW5peD1mdW5jdGlvbih0KXtyZXR1cm4gdigxZTMqdCl9LHYuZW49TVt5XSx2LkxzPU0sdi5wPXt9LHZ9KTtcbiIsIiFmdW5jdGlvbihlLHQpe1wib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgbW9kdWxlP21vZHVsZS5leHBvcnRzPXQoKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKHQpOmUuZGF5anNfcGx1Z2luX2FkdmFuY2VkRm9ybWF0PXQoKX0odGhpcyxmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO3JldHVybiBmdW5jdGlvbihlLHQscil7dmFyIG49dC5wcm90b3R5cGUsYT1uLmZvcm1hdDtyLmVuLm9yZGluYWw9ZnVuY3Rpb24oZSl7dmFyIHQ9W1widGhcIixcInN0XCIsXCJuZFwiLFwicmRcIl0scj1lJTEwMDtyZXR1cm5cIltcIitlKyh0WyhyLTIwKSUxMF18fHRbcl18fHRbMF0pK1wiXVwifSxuLmZvcm1hdD1mdW5jdGlvbihlKXt2YXIgdD10aGlzLHI9dGhpcy4kbG9jYWxlKCksbj10aGlzLiR1dGlscygpLG89KGV8fFwiWVlZWS1NTS1ERFRISDptbTpzc1pcIikucmVwbGFjZSgvXFxbKFteXFxdXSspXXxRfHdvfHd3fHd8enp6fHp8Z2dnZ3xEb3xYfHh8a3sxLDJ9fFMvZyxmdW5jdGlvbihlKXtzd2l0Y2goZSl7Y2FzZVwiUVwiOnJldHVybiBNYXRoLmNlaWwoKHQuJE0rMSkvMyk7Y2FzZVwiRG9cIjpyZXR1cm4gci5vcmRpbmFsKHQuJEQpO2Nhc2VcImdnZ2dcIjpyZXR1cm4gdC53ZWVrWWVhcigpO2Nhc2VcIndvXCI6cmV0dXJuIHIub3JkaW5hbCh0LndlZWsoKSxcIldcIik7Y2FzZVwid1wiOmNhc2VcInd3XCI6cmV0dXJuIG4ucyh0LndlZWsoKSxcIndcIj09PWU/MToyLFwiMFwiKTtjYXNlXCJrXCI6Y2FzZVwia2tcIjpyZXR1cm4gbi5zKFN0cmluZygwPT09dC4kSD8yNDp0LiRIKSxcImtcIj09PWU/MToyLFwiMFwiKTtjYXNlXCJYXCI6cmV0dXJuIE1hdGguZmxvb3IodC4kZC5nZXRUaW1lKCkvMWUzKTtjYXNlXCJ4XCI6cmV0dXJuIHQuJGQuZ2V0VGltZSgpO2Nhc2VcInpcIjpyZXR1cm5cIltcIit0Lm9mZnNldE5hbWUoKStcIl1cIjtjYXNlXCJ6enpcIjpyZXR1cm5cIltcIit0Lm9mZnNldE5hbWUoXCJsb25nXCIpK1wiXVwiO2RlZmF1bHQ6cmV0dXJuIGV9fSk7cmV0dXJuIGEuYmluZCh0aGlzKShvKX19fSk7XG4iLCIhZnVuY3Rpb24odCxlKXtcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cyYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIG1vZHVsZT9tb2R1bGUuZXhwb3J0cz1lKCk6XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShlKTp0LmRheWpzX3BsdWdpbl9jdXN0b21QYXJzZUZvcm1hdD1lKCl9KHRoaXMsZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjt2YXIgdCxlPXtMVFM6XCJoOm1tOnNzIEFcIixMVDpcImg6bW0gQVwiLEw6XCJNTS9ERC9ZWVlZXCIsTEw6XCJNTU1NIEQsIFlZWVlcIixMTEw6XCJNTU1NIEQsIFlZWVkgaDptbSBBXCIsTExMTDpcImRkZGQsIE1NTU0gRCwgWVlZWSBoOm1tIEFcIn0sbj1mdW5jdGlvbih0LG4pe3JldHVybiB0LnJlcGxhY2UoLyhcXFtbXlxcXV0rXSl8KExUUz98bHsxLDR9fEx7MSw0fSkvZyxmdW5jdGlvbih0LHIsaSl7dmFyIG89aSYmaS50b1VwcGVyQ2FzZSgpO3JldHVybiByfHxuW2ldfHxlW2ldfHxuW29dLnJlcGxhY2UoLyhcXFtbXlxcXV0rXSl8KE1NTU18TU18RER8ZGRkZCkvZyxmdW5jdGlvbih0LGUsbil7cmV0dXJuIGV8fG4uc2xpY2UoMSl9KX0pfSxyPS8oXFxbW15bXSpcXF0pfChbLTovLigpXFxzXSspfChBfGF8WVlZWXxZWT98TU0/TT9NP3xEb3xERD98aGg/fEhIP3xtbT98c3M/fFN7MSwzfXx6fFpaPykvZyxpPS9cXGRcXGQvLG89L1xcZFxcZD8vLHM9L1xcZCpbXlxcc1xcZC06LygpXSsvO3ZhciBhPWZ1bmN0aW9uKHQpe3JldHVybiBmdW5jdGlvbihlKXt0aGlzW3RdPStlfX0sZj1bL1srLV1cXGRcXGQ6PyhcXGRcXGQpPy8sZnVuY3Rpb24odCl7KHRoaXMuem9uZXx8KHRoaXMuem9uZT17fSkpLm9mZnNldD1mdW5jdGlvbih0KXtpZighdClyZXR1cm4gMDt2YXIgZT10Lm1hdGNoKC8oWystXXxcXGRcXGQpL2cpLG49NjAqZVsxXSsoK2VbMl18fDApO3JldHVybiAwPT09bj8wOlwiK1wiPT09ZVswXT8tbjpufSh0KX1dLHU9ZnVuY3Rpb24oZSl7dmFyIG49dFtlXTtyZXR1cm4gbiYmKG4uaW5kZXhPZj9uOm4ucy5jb25jYXQobi5mKSl9LGg9ZnVuY3Rpb24oZSxuKXt2YXIgcixpPXQubWVyaWRpZW07aWYoaSl7Zm9yKHZhciBvPTE7bzw9MjQ7bys9MSlpZihlLmluZGV4T2YoaShvLDAsbikpPi0xKXtyPW8+MTI7YnJlYWt9fWVsc2Ugcj1lPT09KG4/XCJwbVwiOlwiUE1cIik7cmV0dXJuIHJ9LGQ9e0E6W3MsZnVuY3Rpb24odCl7dGhpcy5hZnRlcm5vb249aCh0LCExKX1dLGE6W3MsZnVuY3Rpb24odCl7dGhpcy5hZnRlcm5vb249aCh0LCEwKX1dLFM6Wy9cXGQvLGZ1bmN0aW9uKHQpe3RoaXMubWlsbGlzZWNvbmRzPTEwMCordH1dLFNTOltpLGZ1bmN0aW9uKHQpe3RoaXMubWlsbGlzZWNvbmRzPTEwKit0fV0sU1NTOlsvXFxkezN9LyxmdW5jdGlvbih0KXt0aGlzLm1pbGxpc2Vjb25kcz0rdH1dLHM6W28sYShcInNlY29uZHNcIildLHNzOltvLGEoXCJzZWNvbmRzXCIpXSxtOltvLGEoXCJtaW51dGVzXCIpXSxtbTpbbyxhKFwibWludXRlc1wiKV0sSDpbbyxhKFwiaG91cnNcIildLGg6W28sYShcImhvdXJzXCIpXSxISDpbbyxhKFwiaG91cnNcIildLGhoOltvLGEoXCJob3Vyc1wiKV0sRDpbbyxhKFwiZGF5XCIpXSxERDpbaSxhKFwiZGF5XCIpXSxEbzpbcyxmdW5jdGlvbihlKXt2YXIgbj10Lm9yZGluYWwscj1lLm1hdGNoKC9cXGQrLyk7aWYodGhpcy5kYXk9clswXSxuKWZvcih2YXIgaT0xO2k8PTMxO2krPTEpbihpKS5yZXBsYWNlKC9cXFt8XFxdL2csXCJcIik9PT1lJiYodGhpcy5kYXk9aSl9XSxNOltvLGEoXCJtb250aFwiKV0sTU06W2ksYShcIm1vbnRoXCIpXSxNTU06W3MsZnVuY3Rpb24odCl7dmFyIGU9dShcIm1vbnRoc1wiKSxuPSh1KFwibW9udGhzU2hvcnRcIil8fGUubWFwKGZ1bmN0aW9uKHQpe3JldHVybiB0LnN1YnN0cigwLDMpfSkpLmluZGV4T2YodCkrMTtpZihuPDEpdGhyb3cgbmV3IEVycm9yO3RoaXMubW9udGg9biUxMnx8bn1dLE1NTU06W3MsZnVuY3Rpb24odCl7dmFyIGU9dShcIm1vbnRoc1wiKS5pbmRleE9mKHQpKzE7aWYoZTwxKXRocm93IG5ldyBFcnJvcjt0aGlzLm1vbnRoPWUlMTJ8fGV9XSxZOlsvWystXT9cXGQrLyxhKFwieWVhclwiKV0sWVk6W2ksZnVuY3Rpb24odCl7dD0rdCx0aGlzLnllYXI9dCsodD42OD8xOTAwOjJlMyl9XSxZWVlZOlsvXFxkezR9LyxhKFwieWVhclwiKV0sWjpmLFpaOmZ9O3ZhciBjPWZ1bmN0aW9uKGUsaSxvKXt0cnl7dmFyIHM9ZnVuY3Rpb24oZSl7Zm9yKHZhciBpPShlPW4oZSx0JiZ0LmZvcm1hdHMpKS5tYXRjaChyKSxvPWkubGVuZ3RoLHM9MDtzPG87cys9MSl7dmFyIGE9aVtzXSxmPWRbYV0sdT1mJiZmWzBdLGg9ZiYmZlsxXTtpW3NdPWg/e3JlZ2V4OnUscGFyc2VyOmh9OmEucmVwbGFjZSgvXlxcW3xcXF0kL2csXCJcIil9cmV0dXJuIGZ1bmN0aW9uKHQpe2Zvcih2YXIgZT17fSxuPTAscj0wO248bztuKz0xKXt2YXIgcz1pW25dO2lmKFwic3RyaW5nXCI9PXR5cGVvZiBzKXIrPXMubGVuZ3RoO2Vsc2V7dmFyIGE9cy5yZWdleCxmPXMucGFyc2VyLHU9dC5zdWJzdHIociksaD1hLmV4ZWModSlbMF07Zi5jYWxsKGUsaCksdD10LnJlcGxhY2UoaCxcIlwiKX19cmV0dXJuIGZ1bmN0aW9uKHQpe3ZhciBlPXQuYWZ0ZXJub29uO2lmKHZvaWQgMCE9PWUpe3ZhciBuPXQuaG91cnM7ZT9uPDEyJiYodC5ob3Vycys9MTIpOjEyPT09biYmKHQuaG91cnM9MCksZGVsZXRlIHQuYWZ0ZXJub29ufX0oZSksZX19KGkpKGUpLGE9cy55ZWFyLGY9cy5tb250aCx1PXMuZGF5LGg9cy5ob3VycyxjPXMubWludXRlcyxtPXMuc2Vjb25kcyxsPXMubWlsbGlzZWNvbmRzLE09cy56b25lLFk9bmV3IERhdGUsdj11fHwoYXx8Zj8xOlkuZ2V0RGF0ZSgpKSxwPWF8fFkuZ2V0RnVsbFllYXIoKSxEPTA7YSYmIWZ8fChEPWY+MD9mLTE6WS5nZXRNb250aCgpKTt2YXIgeT1ofHwwLEw9Y3x8MCxnPW18fDAsJD1sfHwwO3JldHVybiBNP25ldyBEYXRlKERhdGUuVVRDKHAsRCx2LHksTCxnLCQrNjAqTS5vZmZzZXQqMWUzKSk6bz9uZXcgRGF0ZShEYXRlLlVUQyhwLEQsdix5LEwsZywkKSk6bmV3IERhdGUocCxELHYseSxMLGcsJCl9Y2F0Y2godCl7cmV0dXJuIG5ldyBEYXRlKFwiXCIpfX07cmV0dXJuIGZ1bmN0aW9uKGUsbixyKXtyLnAuY3VzdG9tUGFyc2VGb3JtYXQ9ITA7dmFyIGk9bi5wcm90b3R5cGUsbz1pLnBhcnNlO2kucGFyc2U9ZnVuY3Rpb24oZSl7dmFyIG49ZS5kYXRlLGk9ZS51dGMscz1lLmFyZ3M7dGhpcy4kdT1pO3ZhciBhPXNbMV07aWYoXCJzdHJpbmdcIj09dHlwZW9mIGEpe3ZhciBmPSEwPT09c1syXSx1PSEwPT09c1szXSxoPWZ8fHUsZD1zWzJdO3UmJihkPXNbMl0pLGZ8fCh0PWQ/ci5Mc1tkXTp0aGlzLiRsb2NhbGUoKSksdGhpcy4kZD1jKG4sYSxpKSx0aGlzLmluaXQoKSxkJiYhMCE9PWQmJih0aGlzLiRMPXRoaXMubG9jYWxlKGQpLiRMKSxoJiZuIT09dGhpcy5mb3JtYXQoYSkmJih0aGlzLiRkPW5ldyBEYXRlKFwiXCIpKSx0PXZvaWQgMH1lbHNlIGlmKGEgaW5zdGFuY2VvZiBBcnJheSlmb3IodmFyIG09YS5sZW5ndGgsbD0xO2w8PW07bCs9MSl7c1sxXT1hW2wtMV07dmFyIE09ci5hcHBseSh0aGlzLHMpO2lmKE0uaXNWYWxpZCgpKXt0aGlzLiRkPU0uJGQsdGhpcy4kTD1NLiRMLHRoaXMuaW5pdCgpO2JyZWFrfWw9PT1tJiYodGhpcy4kZD1uZXcgRGF0ZShcIlwiKSl9ZWxzZSBvLmNhbGwodGhpcyxlKX19fSk7XG4iLCIhZnVuY3Rpb24oZSx0KXtcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cyYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIG1vZHVsZT9tb2R1bGUuZXhwb3J0cz10KCk6XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZSh0KTplLmRheWpzX3BsdWdpbl9pc0xlYXBZZWFyPXQoKX0odGhpcyxmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO3JldHVybiBmdW5jdGlvbihlLHQpe3QucHJvdG90eXBlLmlzTGVhcFllYXI9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy4keSU0PT0wJiZ0aGlzLiR5JTEwMCE9MHx8dGhpcy4keSU0MDA9PTB9fX0pO1xuIiwiIWZ1bmN0aW9uKGUsdCl7XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHMmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBtb2R1bGU/bW9kdWxlLmV4cG9ydHM9dCgpOlwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUodCk6ZS5kYXlqc19wbHVnaW5faXNTYW1lT3JBZnRlcj10KCl9KHRoaXMsZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjtyZXR1cm4gZnVuY3Rpb24oZSx0KXt0LnByb3RvdHlwZS5pc1NhbWVPckFmdGVyPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMuaXNTYW1lKGUsdCl8fHRoaXMuaXNBZnRlcihlLHQpfX19KTtcbiIsIiFmdW5jdGlvbihlLHQpe1wib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgbW9kdWxlP21vZHVsZS5leHBvcnRzPXQoKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKHQpOmUuZGF5anNfcGx1Z2luX2lzU2FtZU9yQmVmb3JlPXQoKX0odGhpcyxmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO3JldHVybiBmdW5jdGlvbihlLHQpe3QucHJvdG90eXBlLmlzU2FtZU9yQmVmb3JlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMuaXNTYW1lKGUsdCl8fHRoaXMuaXNCZWZvcmUoZSx0KX19fSk7XG4iLCIhZnVuY3Rpb24obix0KXtcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cyYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIG1vZHVsZT9tb2R1bGUuZXhwb3J0cz10KCk6XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZSh0KTpuLmRheWpzX3BsdWdpbl9sb2NhbGVEYXRhPXQoKX0odGhpcyxmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO3JldHVybiBmdW5jdGlvbihuLHQsZSl7dmFyIHI9ZnVuY3Rpb24obil7cmV0dXJuIG4mJihuLmluZGV4T2Y/bjpuLnMpfSxvPWZ1bmN0aW9uKG4sdCxlLG8sdSl7dmFyIGE9bi5uYW1lP246bi4kbG9jYWxlKCksaT1yKGFbdF0pLHM9cihhW2VdKSxmPWl8fHMubWFwKGZ1bmN0aW9uKG4pe3JldHVybiBuLnN1YnN0cigwLG8pfSk7aWYoIXUpcmV0dXJuIGY7dmFyIGQ9YS53ZWVrU3RhcnQ7cmV0dXJuIGYubWFwKGZ1bmN0aW9uKG4sdCl7cmV0dXJuIGZbKHQrKGR8fDApKSU3XX0pfSx1PWZ1bmN0aW9uKCl7cmV0dXJuIGUuTHNbZS5sb2NhbGUoKV19LGE9ZnVuY3Rpb24obix0KXtyZXR1cm4gbi5mb3JtYXRzW3RdfHxmdW5jdGlvbihuKXtyZXR1cm4gbi5yZXBsYWNlKC8oXFxbW15cXF1dK10pfChNTU1NfE1NfEREfGRkZGQpL2csZnVuY3Rpb24obix0LGUpe3JldHVybiB0fHxlLnNsaWNlKDEpfSl9KG4uZm9ybWF0c1t0LnRvVXBwZXJDYXNlKCldKX07dC5wcm90b3R5cGUubG9jYWxlRGF0YT1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbigpe3ZhciBuPXRoaXM7cmV0dXJue21vbnRoczpmdW5jdGlvbih0KXtyZXR1cm4gdD90LmZvcm1hdChcIk1NTU1cIik6byhuLFwibW9udGhzXCIpfSxtb250aHNTaG9ydDpmdW5jdGlvbih0KXtyZXR1cm4gdD90LmZvcm1hdChcIk1NTVwiKTpvKG4sXCJtb250aHNTaG9ydFwiLFwibW9udGhzXCIsMyl9LGZpcnN0RGF5T2ZXZWVrOmZ1bmN0aW9uKCl7cmV0dXJuIG4uJGxvY2FsZSgpLndlZWtTdGFydHx8MH0sd2Vla2RheXM6ZnVuY3Rpb24odCl7cmV0dXJuIHQ/dC5mb3JtYXQoXCJkZGRkXCIpOm8obixcIndlZWtkYXlzXCIpfSx3ZWVrZGF5c01pbjpmdW5jdGlvbih0KXtyZXR1cm4gdD90LmZvcm1hdChcImRkXCIpOm8obixcIndlZWtkYXlzTWluXCIsXCJ3ZWVrZGF5c1wiLDIpfSx3ZWVrZGF5c1Nob3J0OmZ1bmN0aW9uKHQpe3JldHVybiB0P3QuZm9ybWF0KFwiZGRkXCIpOm8obixcIndlZWtkYXlzU2hvcnRcIixcIndlZWtkYXlzXCIsMyl9LGxvbmdEYXRlRm9ybWF0OmZ1bmN0aW9uKHQpe3JldHVybiBhKG4uJGxvY2FsZSgpLHQpfSxtZXJpZGllbTp0aGlzLiRsb2NhbGUoKS5tZXJpZGllbX19LmJpbmQodGhpcykoKX0sZS5sb2NhbGVEYXRhPWZ1bmN0aW9uKCl7dmFyIG49dSgpO3JldHVybntmaXJzdERheU9mV2VlazpmdW5jdGlvbigpe3JldHVybiBuLndlZWtTdGFydHx8MH0sd2Vla2RheXM6ZnVuY3Rpb24oKXtyZXR1cm4gZS53ZWVrZGF5cygpfSx3ZWVrZGF5c1Nob3J0OmZ1bmN0aW9uKCl7cmV0dXJuIGUud2Vla2RheXNTaG9ydCgpfSx3ZWVrZGF5c01pbjpmdW5jdGlvbigpe3JldHVybiBlLndlZWtkYXlzTWluKCl9LG1vbnRoczpmdW5jdGlvbigpe3JldHVybiBlLm1vbnRocygpfSxtb250aHNTaG9ydDpmdW5jdGlvbigpe3JldHVybiBlLm1vbnRoc1Nob3J0KCl9LGxvbmdEYXRlRm9ybWF0OmZ1bmN0aW9uKHQpe3JldHVybiBhKG4sdCl9LG1lcmlkaWVtOm4ubWVyaWRpZW19fSxlLm1vbnRocz1mdW5jdGlvbigpe3JldHVybiBvKHUoKSxcIm1vbnRoc1wiKX0sZS5tb250aHNTaG9ydD1mdW5jdGlvbigpe3JldHVybiBvKHUoKSxcIm1vbnRoc1Nob3J0XCIsXCJtb250aHNcIiwzKX0sZS53ZWVrZGF5cz1mdW5jdGlvbihuKXtyZXR1cm4gbyh1KCksXCJ3ZWVrZGF5c1wiLG51bGwsbnVsbCxuKX0sZS53ZWVrZGF5c1Nob3J0PWZ1bmN0aW9uKG4pe3JldHVybiBvKHUoKSxcIndlZWtkYXlzU2hvcnRcIixcIndlZWtkYXlzXCIsMyxuKX0sZS53ZWVrZGF5c01pbj1mdW5jdGlvbihuKXtyZXR1cm4gbyh1KCksXCJ3ZWVrZGF5c01pblwiLFwid2Vla2RheXNcIiwyLG4pfX19KTtcbiIsIiFmdW5jdGlvbihlLHQpe1wib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgbW9kdWxlP21vZHVsZS5leHBvcnRzPXQoKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKHQpOmUuZGF5anNfcGx1Z2luX3dlZWtPZlllYXI9dCgpfSh0aGlzLGZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIGU9XCJ3ZWVrXCIsdD1cInllYXJcIjtyZXR1cm4gZnVuY3Rpb24oaSxuLHIpe3ZhciBmPW4ucHJvdG90eXBlO2Yud2Vlaz1mdW5jdGlvbihpKXtpZih2b2lkIDA9PT1pJiYoaT1udWxsKSxudWxsIT09aSlyZXR1cm4gdGhpcy5hZGQoNyooaS10aGlzLndlZWsoKSksXCJkYXlcIik7dmFyIG49dGhpcy4kbG9jYWxlKCkueWVhclN0YXJ0fHwxO2lmKDExPT09dGhpcy5tb250aCgpJiZ0aGlzLmRhdGUoKT4yNSl7dmFyIGY9cih0aGlzKS5zdGFydE9mKHQpLmFkZCgxLHQpLmRhdGUobikscz1yKHRoaXMpLmVuZE9mKGUpO2lmKGYuaXNCZWZvcmUocykpcmV0dXJuIDF9dmFyIGE9cih0aGlzKS5zdGFydE9mKHQpLmRhdGUobikuc3RhcnRPZihlKS5zdWJ0cmFjdCgxLFwibWlsbGlzZWNvbmRcIiksZD10aGlzLmRpZmYoYSxlLCEwKTtyZXR1cm4gZDwwP3IodGhpcykuc3RhcnRPZihcIndlZWtcIikud2VlaygpOk1hdGguY2VpbChkKX0sZi53ZWVrcz1mdW5jdGlvbihlKXtyZXR1cm4gdm9pZCAwPT09ZSYmKGU9bnVsbCksdGhpcy53ZWVrKGUpfX19KTtcbiIsIiFmdW5jdGlvbihlLHQpe1wib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgbW9kdWxlP21vZHVsZS5leHBvcnRzPXQoKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKHQpOmUuZGF5anNfcGx1Z2luX3dlZWtZZWFyPXQoKX0odGhpcyxmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO3JldHVybiBmdW5jdGlvbihlLHQpe3QucHJvdG90eXBlLndlZWtZZWFyPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5tb250aCgpLHQ9dGhpcy53ZWVrKCksbj10aGlzLnllYXIoKTtyZXR1cm4gMT09PXQmJjExPT09ZT9uKzE6bn19fSk7XG4iLCJ2YXIgZ2V0TmF0aXZlID0gcmVxdWlyZSgnLi9fZ2V0TmF0aXZlJyksXG4gICAgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIERhdGFWaWV3ID0gZ2V0TmF0aXZlKHJvb3QsICdEYXRhVmlldycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IERhdGFWaWV3O1xuIiwidmFyIGhhc2hDbGVhciA9IHJlcXVpcmUoJy4vX2hhc2hDbGVhcicpLFxuICAgIGhhc2hEZWxldGUgPSByZXF1aXJlKCcuL19oYXNoRGVsZXRlJyksXG4gICAgaGFzaEdldCA9IHJlcXVpcmUoJy4vX2hhc2hHZXQnKSxcbiAgICBoYXNoSGFzID0gcmVxdWlyZSgnLi9faGFzaEhhcycpLFxuICAgIGhhc2hTZXQgPSByZXF1aXJlKCcuL19oYXNoU2V0Jyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGhhc2ggb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBIYXNoKGVudHJpZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgdGhpcy5jbGVhcigpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gIH1cbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYEhhc2hgLlxuSGFzaC5wcm90b3R5cGUuY2xlYXIgPSBoYXNoQ2xlYXI7XG5IYXNoLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBoYXNoRGVsZXRlO1xuSGFzaC5wcm90b3R5cGUuZ2V0ID0gaGFzaEdldDtcbkhhc2gucHJvdG90eXBlLmhhcyA9IGhhc2hIYXM7XG5IYXNoLnByb3RvdHlwZS5zZXQgPSBoYXNoU2V0O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEhhc2g7XG4iLCJ2YXIgbGlzdENhY2hlQ2xlYXIgPSByZXF1aXJlKCcuL19saXN0Q2FjaGVDbGVhcicpLFxuICAgIGxpc3RDYWNoZURlbGV0ZSA9IHJlcXVpcmUoJy4vX2xpc3RDYWNoZURlbGV0ZScpLFxuICAgIGxpc3RDYWNoZUdldCA9IHJlcXVpcmUoJy4vX2xpc3RDYWNoZUdldCcpLFxuICAgIGxpc3RDYWNoZUhhcyA9IHJlcXVpcmUoJy4vX2xpc3RDYWNoZUhhcycpLFxuICAgIGxpc3RDYWNoZVNldCA9IHJlcXVpcmUoJy4vX2xpc3RDYWNoZVNldCcpO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gbGlzdCBjYWNoZSBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIExpc3RDYWNoZShlbnRyaWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBMaXN0Q2FjaGVgLlxuTGlzdENhY2hlLnByb3RvdHlwZS5jbGVhciA9IGxpc3RDYWNoZUNsZWFyO1xuTGlzdENhY2hlLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBsaXN0Q2FjaGVEZWxldGU7XG5MaXN0Q2FjaGUucHJvdG90eXBlLmdldCA9IGxpc3RDYWNoZUdldDtcbkxpc3RDYWNoZS5wcm90b3R5cGUuaGFzID0gbGlzdENhY2hlSGFzO1xuTGlzdENhY2hlLnByb3RvdHlwZS5zZXQgPSBsaXN0Q2FjaGVTZXQ7XG5cbm1vZHVsZS5leHBvcnRzID0gTGlzdENhY2hlO1xuIiwidmFyIGdldE5hdGl2ZSA9IHJlcXVpcmUoJy4vX2dldE5hdGl2ZScpLFxuICAgIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBNYXAgPSBnZXROYXRpdmUocm9vdCwgJ01hcCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1hcDtcbiIsInZhciBtYXBDYWNoZUNsZWFyID0gcmVxdWlyZSgnLi9fbWFwQ2FjaGVDbGVhcicpLFxuICAgIG1hcENhY2hlRGVsZXRlID0gcmVxdWlyZSgnLi9fbWFwQ2FjaGVEZWxldGUnKSxcbiAgICBtYXBDYWNoZUdldCA9IHJlcXVpcmUoJy4vX21hcENhY2hlR2V0JyksXG4gICAgbWFwQ2FjaGVIYXMgPSByZXF1aXJlKCcuL19tYXBDYWNoZUhhcycpLFxuICAgIG1hcENhY2hlU2V0ID0gcmVxdWlyZSgnLi9fbWFwQ2FjaGVTZXQnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgbWFwIGNhY2hlIG9iamVjdCB0byBzdG9yZSBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIE1hcENhY2hlKGVudHJpZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgdGhpcy5jbGVhcigpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gIH1cbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYE1hcENhY2hlYC5cbk1hcENhY2hlLnByb3RvdHlwZS5jbGVhciA9IG1hcENhY2hlQ2xlYXI7XG5NYXBDYWNoZS5wcm90b3R5cGVbJ2RlbGV0ZSddID0gbWFwQ2FjaGVEZWxldGU7XG5NYXBDYWNoZS5wcm90b3R5cGUuZ2V0ID0gbWFwQ2FjaGVHZXQ7XG5NYXBDYWNoZS5wcm90b3R5cGUuaGFzID0gbWFwQ2FjaGVIYXM7XG5NYXBDYWNoZS5wcm90b3R5cGUuc2V0ID0gbWFwQ2FjaGVTZXQ7XG5cbm1vZHVsZS5leHBvcnRzID0gTWFwQ2FjaGU7XG4iLCJ2YXIgZ2V0TmF0aXZlID0gcmVxdWlyZSgnLi9fZ2V0TmF0aXZlJyksXG4gICAgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIFByb21pc2UgPSBnZXROYXRpdmUocm9vdCwgJ1Byb21pc2UnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBQcm9taXNlO1xuIiwidmFyIGdldE5hdGl2ZSA9IHJlcXVpcmUoJy4vX2dldE5hdGl2ZScpLFxuICAgIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBTZXQgPSBnZXROYXRpdmUocm9vdCwgJ1NldCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNldDtcbiIsInZhciBNYXBDYWNoZSA9IHJlcXVpcmUoJy4vX01hcENhY2hlJyksXG4gICAgc2V0Q2FjaGVBZGQgPSByZXF1aXJlKCcuL19zZXRDYWNoZUFkZCcpLFxuICAgIHNldENhY2hlSGFzID0gcmVxdWlyZSgnLi9fc2V0Q2FjaGVIYXMnKTtcblxuLyoqXG4gKlxuICogQ3JlYXRlcyBhbiBhcnJheSBjYWNoZSBvYmplY3QgdG8gc3RvcmUgdW5pcXVlIHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBTZXRDYWNoZSh2YWx1ZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSB2YWx1ZXMgPT0gbnVsbCA/IDAgOiB2YWx1ZXMubGVuZ3RoO1xuXG4gIHRoaXMuX19kYXRhX18gPSBuZXcgTWFwQ2FjaGU7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdGhpcy5hZGQodmFsdWVzW2luZGV4XSk7XG4gIH1cbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYFNldENhY2hlYC5cblNldENhY2hlLnByb3RvdHlwZS5hZGQgPSBTZXRDYWNoZS5wcm90b3R5cGUucHVzaCA9IHNldENhY2hlQWRkO1xuU2V0Q2FjaGUucHJvdG90eXBlLmhhcyA9IHNldENhY2hlSGFzO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNldENhY2hlO1xuIiwidmFyIExpc3RDYWNoZSA9IHJlcXVpcmUoJy4vX0xpc3RDYWNoZScpLFxuICAgIHN0YWNrQ2xlYXIgPSByZXF1aXJlKCcuL19zdGFja0NsZWFyJyksXG4gICAgc3RhY2tEZWxldGUgPSByZXF1aXJlKCcuL19zdGFja0RlbGV0ZScpLFxuICAgIHN0YWNrR2V0ID0gcmVxdWlyZSgnLi9fc3RhY2tHZXQnKSxcbiAgICBzdGFja0hhcyA9IHJlcXVpcmUoJy4vX3N0YWNrSGFzJyksXG4gICAgc3RhY2tTZXQgPSByZXF1aXJlKCcuL19zdGFja1NldCcpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBzdGFjayBjYWNoZSBvYmplY3QgdG8gc3RvcmUga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBTdGFjayhlbnRyaWVzKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyA9IG5ldyBMaXN0Q2FjaGUoZW50cmllcyk7XG4gIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYFN0YWNrYC5cblN0YWNrLnByb3RvdHlwZS5jbGVhciA9IHN0YWNrQ2xlYXI7XG5TdGFjay5wcm90b3R5cGVbJ2RlbGV0ZSddID0gc3RhY2tEZWxldGU7XG5TdGFjay5wcm90b3R5cGUuZ2V0ID0gc3RhY2tHZXQ7XG5TdGFjay5wcm90b3R5cGUuaGFzID0gc3RhY2tIYXM7XG5TdGFjay5wcm90b3R5cGUuc2V0ID0gc3RhY2tTZXQ7XG5cbm1vZHVsZS5leHBvcnRzID0gU3RhY2s7XG4iLCJ2YXIgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgU3ltYm9sID0gcm9vdC5TeW1ib2w7XG5cbm1vZHVsZS5leHBvcnRzID0gU3ltYm9sO1xuIiwidmFyIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIFVpbnQ4QXJyYXkgPSByb290LlVpbnQ4QXJyYXk7XG5cbm1vZHVsZS5leHBvcnRzID0gVWludDhBcnJheTtcbiIsInZhciBnZXROYXRpdmUgPSByZXF1aXJlKCcuL19nZXROYXRpdmUnKSxcbiAgICByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgV2Vha01hcCA9IGdldE5hdGl2ZShyb290LCAnV2Vha01hcCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFdlYWtNYXA7XG4iLCIvKipcbiAqIEEgZmFzdGVyIGFsdGVybmF0aXZlIHRvIGBGdW5jdGlvbiNhcHBseWAsIHRoaXMgZnVuY3Rpb24gaW52b2tlcyBgZnVuY2BcbiAqIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIGB0aGlzQXJnYCBhbmQgdGhlIGFyZ3VtZW50cyBvZiBgYXJnc2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGludm9rZS5cbiAqIEBwYXJhbSB7Kn0gdGhpc0FyZyBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICogQHBhcmFtIHtBcnJheX0gYXJncyBUaGUgYXJndW1lbnRzIHRvIGludm9rZSBgZnVuY2Agd2l0aC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXN1bHQgb2YgYGZ1bmNgLlxuICovXG5mdW5jdGlvbiBhcHBseShmdW5jLCB0aGlzQXJnLCBhcmdzKSB7XG4gIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICBjYXNlIDA6IHJldHVybiBmdW5jLmNhbGwodGhpc0FyZyk7XG4gICAgY2FzZSAxOiByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcsIGFyZ3NbMF0pO1xuICAgIGNhc2UgMjogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICBjYXNlIDM6IHJldHVybiBmdW5jLmNhbGwodGhpc0FyZywgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gIH1cbiAgcmV0dXJuIGZ1bmMuYXBwbHkodGhpc0FyZywgYXJncyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXBwbHk7XG4iLCIvKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5maWx0ZXJgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmaWx0ZXJlZCBhcnJheS5cbiAqL1xuZnVuY3Rpb24gYXJyYXlGaWx0ZXIoYXJyYXksIHByZWRpY2F0ZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoLFxuICAgICAgcmVzSW5kZXggPSAwLFxuICAgICAgcmVzdWx0ID0gW107XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgcmVzdWx0W3Jlc0luZGV4KytdID0gdmFsdWU7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXJyYXlGaWx0ZXI7XG4iLCJ2YXIgYmFzZUluZGV4T2YgPSByZXF1aXJlKCcuL19iYXNlSW5kZXhPZicpO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5pbmNsdWRlc2AgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gKiBzcGVjaWZ5aW5nIGFuIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICogQHBhcmFtIHsqfSB0YXJnZXQgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHRhcmdldGAgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYXJyYXlJbmNsdWRlcyhhcnJheSwgdmFsdWUpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICByZXR1cm4gISFsZW5ndGggJiYgYmFzZUluZGV4T2YoYXJyYXksIHZhbHVlLCAwKSA+IC0xO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFycmF5SW5jbHVkZXM7XG4iLCIvKipcbiAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZSBgYXJyYXlJbmNsdWRlc2AgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBhIGNvbXBhcmF0b3IuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gKiBAcGFyYW0geyp9IHRhcmdldCBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbXBhcmF0b3IgVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdGFyZ2V0YCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBhcnJheUluY2x1ZGVzV2l0aChhcnJheSwgdmFsdWUsIGNvbXBhcmF0b3IpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGlmIChjb21wYXJhdG9yKHZhbHVlLCBhcnJheVtpbmRleF0pKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFycmF5SW5jbHVkZXNXaXRoO1xuIiwidmFyIGJhc2VUaW1lcyA9IHJlcXVpcmUoJy4vX2Jhc2VUaW1lcycpLFxuICAgIGlzQXJndW1lbnRzID0gcmVxdWlyZSgnLi9pc0FyZ3VtZW50cycpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKSxcbiAgICBpc0J1ZmZlciA9IHJlcXVpcmUoJy4vaXNCdWZmZXInKSxcbiAgICBpc0luZGV4ID0gcmVxdWlyZSgnLi9faXNJbmRleCcpLFxuICAgIGlzVHlwZWRBcnJheSA9IHJlcXVpcmUoJy4vaXNUeXBlZEFycmF5Jyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiB0aGUgYXJyYXktbGlrZSBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaW5oZXJpdGVkIFNwZWNpZnkgcmV0dXJuaW5nIGluaGVyaXRlZCBwcm9wZXJ0eSBuYW1lcy5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKi9cbmZ1bmN0aW9uIGFycmF5TGlrZUtleXModmFsdWUsIGluaGVyaXRlZCkge1xuICB2YXIgaXNBcnIgPSBpc0FycmF5KHZhbHVlKSxcbiAgICAgIGlzQXJnID0gIWlzQXJyICYmIGlzQXJndW1lbnRzKHZhbHVlKSxcbiAgICAgIGlzQnVmZiA9ICFpc0FyciAmJiAhaXNBcmcgJiYgaXNCdWZmZXIodmFsdWUpLFxuICAgICAgaXNUeXBlID0gIWlzQXJyICYmICFpc0FyZyAmJiAhaXNCdWZmICYmIGlzVHlwZWRBcnJheSh2YWx1ZSksXG4gICAgICBza2lwSW5kZXhlcyA9IGlzQXJyIHx8IGlzQXJnIHx8IGlzQnVmZiB8fCBpc1R5cGUsXG4gICAgICByZXN1bHQgPSBza2lwSW5kZXhlcyA/IGJhc2VUaW1lcyh2YWx1ZS5sZW5ndGgsIFN0cmluZykgOiBbXSxcbiAgICAgIGxlbmd0aCA9IHJlc3VsdC5sZW5ndGg7XG5cbiAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XG4gICAgaWYgKChpbmhlcml0ZWQgfHwgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwga2V5KSkgJiZcbiAgICAgICAgIShza2lwSW5kZXhlcyAmJiAoXG4gICAgICAgICAgIC8vIFNhZmFyaSA5IGhhcyBlbnVtZXJhYmxlIGBhcmd1bWVudHMubGVuZ3RoYCBpbiBzdHJpY3QgbW9kZS5cbiAgICAgICAgICAga2V5ID09ICdsZW5ndGgnIHx8XG4gICAgICAgICAgIC8vIE5vZGUuanMgMC4xMCBoYXMgZW51bWVyYWJsZSBub24taW5kZXggcHJvcGVydGllcyBvbiBidWZmZXJzLlxuICAgICAgICAgICAoaXNCdWZmICYmIChrZXkgPT0gJ29mZnNldCcgfHwga2V5ID09ICdwYXJlbnQnKSkgfHxcbiAgICAgICAgICAgLy8gUGhhbnRvbUpTIDIgaGFzIGVudW1lcmFibGUgbm9uLWluZGV4IHByb3BlcnRpZXMgb24gdHlwZWQgYXJyYXlzLlxuICAgICAgICAgICAoaXNUeXBlICYmIChrZXkgPT0gJ2J1ZmZlcicgfHwga2V5ID09ICdieXRlTGVuZ3RoJyB8fCBrZXkgPT0gJ2J5dGVPZmZzZXQnKSkgfHxcbiAgICAgICAgICAgLy8gU2tpcCBpbmRleCBwcm9wZXJ0aWVzLlxuICAgICAgICAgICBpc0luZGV4KGtleSwgbGVuZ3RoKVxuICAgICAgICApKSkge1xuICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhcnJheUxpa2VLZXlzO1xuIiwiLyoqXG4gKiBBcHBlbmRzIHRoZSBlbGVtZW50cyBvZiBgdmFsdWVzYCB0byBgYXJyYXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gYXBwZW5kLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gKi9cbmZ1bmN0aW9uIGFycmF5UHVzaChhcnJheSwgdmFsdWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gdmFsdWVzLmxlbmd0aCxcbiAgICAgIG9mZnNldCA9IGFycmF5Lmxlbmd0aDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGFycmF5W29mZnNldCArIGluZGV4XSA9IHZhbHVlc1tpbmRleF07XG4gIH1cbiAgcmV0dXJuIGFycmF5O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFycmF5UHVzaDtcbiIsIi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnNvbWVgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZVxuICogc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW55IGVsZW1lbnQgcGFzc2VzIHRoZSBwcmVkaWNhdGUgY2hlY2ssXG4gKiAgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBhcnJheVNvbWUoYXJyYXksIHByZWRpY2F0ZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgaWYgKHByZWRpY2F0ZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXJyYXlTb21lO1xuIiwidmFyIGVxID0gcmVxdWlyZSgnLi9lcScpO1xuXG4vKipcbiAqIEdldHMgdGhlIGluZGV4IGF0IHdoaWNoIHRoZSBga2V5YCBpcyBmb3VuZCBpbiBgYXJyYXlgIG9mIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gKiBAcGFyYW0geyp9IGtleSBUaGUga2V5IHRvIHNlYXJjaCBmb3IuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICovXG5mdW5jdGlvbiBhc3NvY0luZGV4T2YoYXJyYXksIGtleSkge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICBpZiAoZXEoYXJyYXlbbGVuZ3RoXVswXSwga2V5KSkge1xuICAgICAgcmV0dXJuIGxlbmd0aDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIC0xO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFzc29jSW5kZXhPZjtcbiIsIi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZmluZEluZGV4YCBhbmQgYF8uZmluZExhc3RJbmRleGAgd2l0aG91dFxuICogc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICovXG5mdW5jdGlvbiBiYXNlRmluZEluZGV4KGFycmF5LCBwcmVkaWNhdGUsIGZyb21JbmRleCwgZnJvbVJpZ2h0KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICBpbmRleCA9IGZyb21JbmRleCArIChmcm9tUmlnaHQgPyAxIDogLTEpO1xuXG4gIHdoaWxlICgoZnJvbVJpZ2h0ID8gaW5kZXgtLSA6ICsraW5kZXggPCBsZW5ndGgpKSB7XG4gICAgaWYgKHByZWRpY2F0ZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkpIHtcbiAgICAgIHJldHVybiBpbmRleDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIC0xO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VGaW5kSW5kZXg7XG4iLCJ2YXIgYXJyYXlQdXNoID0gcmVxdWlyZSgnLi9fYXJyYXlQdXNoJyksXG4gICAgaXNGbGF0dGVuYWJsZSA9IHJlcXVpcmUoJy4vX2lzRmxhdHRlbmFibGUnKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mbGF0dGVuYCB3aXRoIHN1cHBvcnQgZm9yIHJlc3RyaWN0aW5nIGZsYXR0ZW5pbmcuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBmbGF0dGVuLlxuICogQHBhcmFtIHtudW1iZXJ9IGRlcHRoIFRoZSBtYXhpbXVtIHJlY3Vyc2lvbiBkZXB0aC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW3ByZWRpY2F0ZT1pc0ZsYXR0ZW5hYmxlXSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHBhcmFtIHtib29sZWFufSBbaXNTdHJpY3RdIFJlc3RyaWN0IHRvIHZhbHVlcyB0aGF0IHBhc3MgYHByZWRpY2F0ZWAgY2hlY2tzLlxuICogQHBhcmFtIHtBcnJheX0gW3Jlc3VsdD1bXV0gVGhlIGluaXRpYWwgcmVzdWx0IHZhbHVlLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICovXG5mdW5jdGlvbiBiYXNlRmxhdHRlbihhcnJheSwgZGVwdGgsIHByZWRpY2F0ZSwgaXNTdHJpY3QsIHJlc3VsdCkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICBwcmVkaWNhdGUgfHwgKHByZWRpY2F0ZSA9IGlzRmxhdHRlbmFibGUpO1xuICByZXN1bHQgfHwgKHJlc3VsdCA9IFtdKTtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICBpZiAoZGVwdGggPiAwICYmIHByZWRpY2F0ZSh2YWx1ZSkpIHtcbiAgICAgIGlmIChkZXB0aCA+IDEpIHtcbiAgICAgICAgLy8gUmVjdXJzaXZlbHkgZmxhdHRlbiBhcnJheXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgYmFzZUZsYXR0ZW4odmFsdWUsIGRlcHRoIC0gMSwgcHJlZGljYXRlLCBpc1N0cmljdCwgcmVzdWx0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFycmF5UHVzaChyZXN1bHQsIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCFpc1N0cmljdCkge1xuICAgICAgcmVzdWx0W3Jlc3VsdC5sZW5ndGhdID0gdmFsdWU7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUZsYXR0ZW47XG4iLCJ2YXIgYXJyYXlQdXNoID0gcmVxdWlyZSgnLi9fYXJyYXlQdXNoJyksXG4gICAgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRBbGxLZXlzYCBhbmQgYGdldEFsbEtleXNJbmAgd2hpY2ggdXNlc1xuICogYGtleXNGdW5jYCBhbmQgYHN5bWJvbHNGdW5jYCB0byBnZXQgdGhlIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgYW5kXG4gKiBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBrZXlzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBrZXlzIG9mIGBvYmplY3RgLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gc3ltYm9sc0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VHZXRBbGxLZXlzKG9iamVjdCwga2V5c0Z1bmMsIHN5bWJvbHNGdW5jKSB7XG4gIHZhciByZXN1bHQgPSBrZXlzRnVuYyhvYmplY3QpO1xuICByZXR1cm4gaXNBcnJheShvYmplY3QpID8gcmVzdWx0IDogYXJyYXlQdXNoKHJlc3VsdCwgc3ltYm9sc0Z1bmMob2JqZWN0KSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUdldEFsbEtleXM7XG4iLCJ2YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fU3ltYm9sJyksXG4gICAgZ2V0UmF3VGFnID0gcmVxdWlyZSgnLi9fZ2V0UmF3VGFnJyksXG4gICAgb2JqZWN0VG9TdHJpbmcgPSByZXF1aXJlKCcuL19vYmplY3RUb1N0cmluZycpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgbnVsbFRhZyA9ICdbb2JqZWN0IE51bGxdJyxcbiAgICB1bmRlZmluZWRUYWcgPSAnW29iamVjdCBVbmRlZmluZWRdJztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgc3ltVG9TdHJpbmdUYWcgPSBTeW1ib2wgPyBTeW1ib2wudG9TdHJpbmdUYWcgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGdldFRhZ2Agd2l0aG91dCBmYWxsYmFja3MgZm9yIGJ1Z2d5IGVudmlyb25tZW50cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBgdG9TdHJpbmdUYWdgLlxuICovXG5mdW5jdGlvbiBiYXNlR2V0VGFnKHZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWRUYWcgOiBudWxsVGFnO1xuICB9XG4gIHJldHVybiAoc3ltVG9TdHJpbmdUYWcgJiYgc3ltVG9TdHJpbmdUYWcgaW4gT2JqZWN0KHZhbHVlKSlcbiAgICA/IGdldFJhd1RhZyh2YWx1ZSlcbiAgICA6IG9iamVjdFRvU3RyaW5nKHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlR2V0VGFnO1xuIiwidmFyIGJhc2VGaW5kSW5kZXggPSByZXF1aXJlKCcuL19iYXNlRmluZEluZGV4JyksXG4gICAgYmFzZUlzTmFOID0gcmVxdWlyZSgnLi9fYmFzZUlzTmFOJyksXG4gICAgc3RyaWN0SW5kZXhPZiA9IHJlcXVpcmUoJy4vX3N0cmljdEluZGV4T2YnKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pbmRleE9mYCB3aXRob3V0IGBmcm9tSW5kZXhgIGJvdW5kcyBjaGVja3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZVxuICAgID8gc3RyaWN0SW5kZXhPZihhcnJheSwgdmFsdWUsIGZyb21JbmRleClcbiAgICA6IGJhc2VGaW5kSW5kZXgoYXJyYXksIGJhc2VJc05hTiwgZnJvbUluZGV4KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSW5kZXhPZjtcbiIsInZhciBiYXNlR2V0VGFnID0gcmVxdWlyZSgnLi9fYmFzZUdldFRhZycpLFxuICAgIGlzT2JqZWN0TGlrZSA9IHJlcXVpcmUoJy4vaXNPYmplY3RMaWtlJyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBhcmdzVGFnID0gJ1tvYmplY3QgQXJndW1lbnRzXSc7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNBcmd1bWVudHNgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGBhcmd1bWVudHNgIG9iamVjdCxcbiAqL1xuZnVuY3Rpb24gYmFzZUlzQXJndW1lbnRzKHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IGFyZ3NUYWc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUlzQXJndW1lbnRzO1xuIiwidmFyIGJhc2VJc0VxdWFsRGVlcCA9IHJlcXVpcmUoJy4vX2Jhc2VJc0VxdWFsRGVlcCcpLFxuICAgIGlzT2JqZWN0TGlrZSA9IHJlcXVpcmUoJy4vaXNPYmplY3RMaWtlJyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNFcXVhbGAgd2hpY2ggc3VwcG9ydHMgcGFydGlhbCBjb21wYXJpc29uc1xuICogYW5kIHRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuXG4gKiAgMSAtIFVub3JkZXJlZCBjb21wYXJpc29uXG4gKiAgMiAtIFBhcnRpYWwgY29tcGFyaXNvblxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIGB2YWx1ZWAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc0VxdWFsKHZhbHVlLCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spIHtcbiAgaWYgKHZhbHVlID09PSBvdGhlcikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmICh2YWx1ZSA9PSBudWxsIHx8IG90aGVyID09IG51bGwgfHwgKCFpc09iamVjdExpa2UodmFsdWUpICYmICFpc09iamVjdExpa2Uob3RoZXIpKSkge1xuICAgIHJldHVybiB2YWx1ZSAhPT0gdmFsdWUgJiYgb3RoZXIgIT09IG90aGVyO1xuICB9XG4gIHJldHVybiBiYXNlSXNFcXVhbERlZXAodmFsdWUsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBiYXNlSXNFcXVhbCwgc3RhY2spO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VJc0VxdWFsO1xuIiwidmFyIFN0YWNrID0gcmVxdWlyZSgnLi9fU3RhY2snKSxcbiAgICBlcXVhbEFycmF5cyA9IHJlcXVpcmUoJy4vX2VxdWFsQXJyYXlzJyksXG4gICAgZXF1YWxCeVRhZyA9IHJlcXVpcmUoJy4vX2VxdWFsQnlUYWcnKSxcbiAgICBlcXVhbE9iamVjdHMgPSByZXF1aXJlKCcuL19lcXVhbE9iamVjdHMnKSxcbiAgICBnZXRUYWcgPSByZXF1aXJlKCcuL19nZXRUYWcnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNCdWZmZXIgPSByZXF1aXJlKCcuL2lzQnVmZmVyJyksXG4gICAgaXNUeXBlZEFycmF5ID0gcmVxdWlyZSgnLi9pc1R5cGVkQXJyYXknKTtcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgdmFsdWUgY29tcGFyaXNvbnMuICovXG52YXIgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgPSAxO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXJnc1RhZyA9ICdbb2JqZWN0IEFyZ3VtZW50c10nLFxuICAgIGFycmF5VGFnID0gJ1tvYmplY3QgQXJyYXldJyxcbiAgICBvYmplY3RUYWcgPSAnW29iamVjdCBPYmplY3RdJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsYCBmb3IgYXJyYXlzIGFuZCBvYmplY3RzIHdoaWNoIHBlcmZvcm1zXG4gKiBkZWVwIGNvbXBhcmlzb25zIGFuZCB0cmFja3MgdHJhdmVyc2VkIG9iamVjdHMgZW5hYmxpbmcgb2JqZWN0cyB3aXRoIGNpcmN1bGFyXG4gKiByZWZlcmVuY2VzIHRvIGJlIGNvbXBhcmVkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgYG9iamVjdGAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNFcXVhbERlZXAob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICB2YXIgb2JqSXNBcnIgPSBpc0FycmF5KG9iamVjdCksXG4gICAgICBvdGhJc0FyciA9IGlzQXJyYXkob3RoZXIpLFxuICAgICAgb2JqVGFnID0gb2JqSXNBcnIgPyBhcnJheVRhZyA6IGdldFRhZyhvYmplY3QpLFxuICAgICAgb3RoVGFnID0gb3RoSXNBcnIgPyBhcnJheVRhZyA6IGdldFRhZyhvdGhlcik7XG5cbiAgb2JqVGFnID0gb2JqVGFnID09IGFyZ3NUYWcgPyBvYmplY3RUYWcgOiBvYmpUYWc7XG4gIG90aFRhZyA9IG90aFRhZyA9PSBhcmdzVGFnID8gb2JqZWN0VGFnIDogb3RoVGFnO1xuXG4gIHZhciBvYmpJc09iaiA9IG9ialRhZyA9PSBvYmplY3RUYWcsXG4gICAgICBvdGhJc09iaiA9IG90aFRhZyA9PSBvYmplY3RUYWcsXG4gICAgICBpc1NhbWVUYWcgPSBvYmpUYWcgPT0gb3RoVGFnO1xuXG4gIGlmIChpc1NhbWVUYWcgJiYgaXNCdWZmZXIob2JqZWN0KSkge1xuICAgIGlmICghaXNCdWZmZXIob3RoZXIpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIG9iaklzQXJyID0gdHJ1ZTtcbiAgICBvYmpJc09iaiA9IGZhbHNlO1xuICB9XG4gIGlmIChpc1NhbWVUYWcgJiYgIW9iaklzT2JqKSB7XG4gICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICByZXR1cm4gKG9iaklzQXJyIHx8IGlzVHlwZWRBcnJheShvYmplY3QpKVxuICAgICAgPyBlcXVhbEFycmF5cyhvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKVxuICAgICAgOiBlcXVhbEJ5VGFnKG9iamVjdCwgb3RoZXIsIG9ialRhZywgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjayk7XG4gIH1cbiAgaWYgKCEoYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHKSkge1xuICAgIHZhciBvYmpJc1dyYXBwZWQgPSBvYmpJc09iaiAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgJ19fd3JhcHBlZF9fJyksXG4gICAgICAgIG90aElzV3JhcHBlZCA9IG90aElzT2JqICYmIGhhc093blByb3BlcnR5LmNhbGwob3RoZXIsICdfX3dyYXBwZWRfXycpO1xuXG4gICAgaWYgKG9iaklzV3JhcHBlZCB8fCBvdGhJc1dyYXBwZWQpIHtcbiAgICAgIHZhciBvYmpVbndyYXBwZWQgPSBvYmpJc1dyYXBwZWQgPyBvYmplY3QudmFsdWUoKSA6IG9iamVjdCxcbiAgICAgICAgICBvdGhVbndyYXBwZWQgPSBvdGhJc1dyYXBwZWQgPyBvdGhlci52YWx1ZSgpIDogb3RoZXI7XG5cbiAgICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gICAgICByZXR1cm4gZXF1YWxGdW5jKG9ialVud3JhcHBlZCwgb3RoVW53cmFwcGVkLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjayk7XG4gICAgfVxuICB9XG4gIGlmICghaXNTYW1lVGFnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gIHJldHVybiBlcXVhbE9iamVjdHMob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjayk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUlzRXF1YWxEZWVwO1xuIiwiLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc05hTmAgd2l0aG91dCBzdXBwb3J0IGZvciBudW1iZXIgb2JqZWN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBgTmFOYCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNOYU4odmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9PSB2YWx1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXNOYU47XG4iLCJ2YXIgaXNGdW5jdGlvbiA9IHJlcXVpcmUoJy4vaXNGdW5jdGlvbicpLFxuICAgIGlzTWFza2VkID0gcmVxdWlyZSgnLi9faXNNYXNrZWQnKSxcbiAgICBpc09iamVjdCA9IHJlcXVpcmUoJy4vaXNPYmplY3QnKSxcbiAgICB0b1NvdXJjZSA9IHJlcXVpcmUoJy4vX3RvU291cmNlJyk7XG5cbi8qKlxuICogVXNlZCB0byBtYXRjaCBgUmVnRXhwYFxuICogW3N5bnRheCBjaGFyYWN0ZXJzXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1wYXR0ZXJucykuXG4gKi9cbnZhciByZVJlZ0V4cENoYXIgPSAvW1xcXFxeJC4qKz8oKVtcXF17fXxdL2c7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBob3N0IGNvbnN0cnVjdG9ycyAoU2FmYXJpKS4gKi9cbnZhciByZUlzSG9zdEN0b3IgPSAvXlxcW29iamVjdCAuKz9Db25zdHJ1Y3RvclxcXSQvO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgZnVuY1Byb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlLFxuICAgIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gcmVzb2x2ZSB0aGUgZGVjb21waWxlZCBzb3VyY2Ugb2YgZnVuY3Rpb25zLiAqL1xudmFyIGZ1bmNUb1N0cmluZyA9IGZ1bmNQcm90by50b1N0cmluZztcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGlmIGEgbWV0aG9kIGlzIG5hdGl2ZS4gKi9cbnZhciByZUlzTmF0aXZlID0gUmVnRXhwKCdeJyArXG4gIGZ1bmNUb1N0cmluZy5jYWxsKGhhc093blByb3BlcnR5KS5yZXBsYWNlKHJlUmVnRXhwQ2hhciwgJ1xcXFwkJicpXG4gIC5yZXBsYWNlKC9oYXNPd25Qcm9wZXJ0eXwoZnVuY3Rpb24pLio/KD89XFxcXFxcKCl8IGZvciAuKz8oPz1cXFxcXFxdKS9nLCAnJDEuKj8nKSArICckJ1xuKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc05hdGl2ZWAgd2l0aG91dCBiYWQgc2hpbSBjaGVja3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBuYXRpdmUgZnVuY3Rpb24sXG4gKiAgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNOYXRpdmUodmFsdWUpIHtcbiAgaWYgKCFpc09iamVjdCh2YWx1ZSkgfHwgaXNNYXNrZWQodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBwYXR0ZXJuID0gaXNGdW5jdGlvbih2YWx1ZSkgPyByZUlzTmF0aXZlIDogcmVJc0hvc3RDdG9yO1xuICByZXR1cm4gcGF0dGVybi50ZXN0KHRvU291cmNlKHZhbHVlKSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUlzTmF0aXZlO1xuIiwidmFyIGJhc2VHZXRUYWcgPSByZXF1aXJlKCcuL19iYXNlR2V0VGFnJyksXG4gICAgaXNMZW5ndGggPSByZXF1aXJlKCcuL2lzTGVuZ3RoJyksXG4gICAgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFyZ3NUYWcgPSAnW29iamVjdCBBcmd1bWVudHNdJyxcbiAgICBhcnJheVRhZyA9ICdbb2JqZWN0IEFycmF5XScsXG4gICAgYm9vbFRhZyA9ICdbb2JqZWN0IEJvb2xlYW5dJyxcbiAgICBkYXRlVGFnID0gJ1tvYmplY3QgRGF0ZV0nLFxuICAgIGVycm9yVGFnID0gJ1tvYmplY3QgRXJyb3JdJyxcbiAgICBmdW5jVGFnID0gJ1tvYmplY3QgRnVuY3Rpb25dJyxcbiAgICBtYXBUYWcgPSAnW29iamVjdCBNYXBdJyxcbiAgICBudW1iZXJUYWcgPSAnW29iamVjdCBOdW1iZXJdJyxcbiAgICBvYmplY3RUYWcgPSAnW29iamVjdCBPYmplY3RdJyxcbiAgICByZWdleHBUYWcgPSAnW29iamVjdCBSZWdFeHBdJyxcbiAgICBzZXRUYWcgPSAnW29iamVjdCBTZXRdJyxcbiAgICBzdHJpbmdUYWcgPSAnW29iamVjdCBTdHJpbmddJyxcbiAgICB3ZWFrTWFwVGFnID0gJ1tvYmplY3QgV2Vha01hcF0nO1xuXG52YXIgYXJyYXlCdWZmZXJUYWcgPSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nLFxuICAgIGRhdGFWaWV3VGFnID0gJ1tvYmplY3QgRGF0YVZpZXddJyxcbiAgICBmbG9hdDMyVGFnID0gJ1tvYmplY3QgRmxvYXQzMkFycmF5XScsXG4gICAgZmxvYXQ2NFRhZyA9ICdbb2JqZWN0IEZsb2F0NjRBcnJheV0nLFxuICAgIGludDhUYWcgPSAnW29iamVjdCBJbnQ4QXJyYXldJyxcbiAgICBpbnQxNlRhZyA9ICdbb2JqZWN0IEludDE2QXJyYXldJyxcbiAgICBpbnQzMlRhZyA9ICdbb2JqZWN0IEludDMyQXJyYXldJyxcbiAgICB1aW50OFRhZyA9ICdbb2JqZWN0IFVpbnQ4QXJyYXldJyxcbiAgICB1aW50OENsYW1wZWRUYWcgPSAnW29iamVjdCBVaW50OENsYW1wZWRBcnJheV0nLFxuICAgIHVpbnQxNlRhZyA9ICdbb2JqZWN0IFVpbnQxNkFycmF5XScsXG4gICAgdWludDMyVGFnID0gJ1tvYmplY3QgVWludDMyQXJyYXldJztcblxuLyoqIFVzZWQgdG8gaWRlbnRpZnkgYHRvU3RyaW5nVGFnYCB2YWx1ZXMgb2YgdHlwZWQgYXJyYXlzLiAqL1xudmFyIHR5cGVkQXJyYXlUYWdzID0ge307XG50eXBlZEFycmF5VGFnc1tmbG9hdDMyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Zsb2F0NjRUYWddID1cbnR5cGVkQXJyYXlUYWdzW2ludDhUYWddID0gdHlwZWRBcnJheVRhZ3NbaW50MTZUYWddID1cbnR5cGVkQXJyYXlUYWdzW2ludDMyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW3VpbnQ4VGFnXSA9XG50eXBlZEFycmF5VGFnc1t1aW50OENsYW1wZWRUYWddID0gdHlwZWRBcnJheVRhZ3NbdWludDE2VGFnXSA9XG50eXBlZEFycmF5VGFnc1t1aW50MzJUYWddID0gdHJ1ZTtcbnR5cGVkQXJyYXlUYWdzW2FyZ3NUYWddID0gdHlwZWRBcnJheVRhZ3NbYXJyYXlUYWddID1cbnR5cGVkQXJyYXlUYWdzW2FycmF5QnVmZmVyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Jvb2xUYWddID1cbnR5cGVkQXJyYXlUYWdzW2RhdGFWaWV3VGFnXSA9IHR5cGVkQXJyYXlUYWdzW2RhdGVUYWddID1cbnR5cGVkQXJyYXlUYWdzW2Vycm9yVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Z1bmNUYWddID1cbnR5cGVkQXJyYXlUYWdzW21hcFRhZ10gPSB0eXBlZEFycmF5VGFnc1tudW1iZXJUYWddID1cbnR5cGVkQXJyYXlUYWdzW29iamVjdFRhZ10gPSB0eXBlZEFycmF5VGFnc1tyZWdleHBUYWddID1cbnR5cGVkQXJyYXlUYWdzW3NldFRhZ10gPSB0eXBlZEFycmF5VGFnc1tzdHJpbmdUYWddID1cbnR5cGVkQXJyYXlUYWdzW3dlYWtNYXBUYWddID0gZmFsc2U7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNUeXBlZEFycmF5YCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHR5cGVkIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc1R5cGVkQXJyYXkodmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiZcbiAgICBpc0xlbmd0aCh2YWx1ZS5sZW5ndGgpICYmICEhdHlwZWRBcnJheVRhZ3NbYmFzZUdldFRhZyh2YWx1ZSldO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VJc1R5cGVkQXJyYXk7XG4iLCJ2YXIgaXNQcm90b3R5cGUgPSByZXF1aXJlKCcuL19pc1Byb3RvdHlwZScpLFxuICAgIG5hdGl2ZUtleXMgPSByZXF1aXJlKCcuL19uYXRpdmVLZXlzJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ua2V5c2Agd2hpY2ggZG9lc24ndCB0cmVhdCBzcGFyc2UgYXJyYXlzIGFzIGRlbnNlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICovXG5mdW5jdGlvbiBiYXNlS2V5cyhvYmplY3QpIHtcbiAgaWYgKCFpc1Byb3RvdHlwZShvYmplY3QpKSB7XG4gICAgcmV0dXJuIG5hdGl2ZUtleXMob2JqZWN0KTtcbiAgfVxuICB2YXIgcmVzdWx0ID0gW107XG4gIGZvciAodmFyIGtleSBpbiBPYmplY3Qob2JqZWN0KSkge1xuICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSAmJiBrZXkgIT0gJ2NvbnN0cnVjdG9yJykge1xuICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlS2V5cztcbiIsInZhciBpZGVudGl0eSA9IHJlcXVpcmUoJy4vaWRlbnRpdHknKSxcbiAgICBvdmVyUmVzdCA9IHJlcXVpcmUoJy4vX292ZXJSZXN0JyksXG4gICAgc2V0VG9TdHJpbmcgPSByZXF1aXJlKCcuL19zZXRUb1N0cmluZycpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnJlc3RgIHdoaWNoIGRvZXNuJ3QgdmFsaWRhdGUgb3IgY29lcmNlIGFyZ3VtZW50cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXBwbHkgYSByZXN0IHBhcmFtZXRlciB0by5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9ZnVuYy5sZW5ndGgtMV0gVGhlIHN0YXJ0IHBvc2l0aW9uIG9mIHRoZSByZXN0IHBhcmFtZXRlci5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlUmVzdChmdW5jLCBzdGFydCkge1xuICByZXR1cm4gc2V0VG9TdHJpbmcob3ZlclJlc3QoZnVuYywgc3RhcnQsIGlkZW50aXR5KSwgZnVuYyArICcnKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlUmVzdDtcbiIsInZhciBjb25zdGFudCA9IHJlcXVpcmUoJy4vY29uc3RhbnQnKSxcbiAgICBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX2RlZmluZVByb3BlcnR5JyksXG4gICAgaWRlbnRpdHkgPSByZXF1aXJlKCcuL2lkZW50aXR5Jyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYHNldFRvU3RyaW5nYCB3aXRob3V0IHN1cHBvcnQgZm9yIGhvdCBsb29wIHNob3J0aW5nLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBzdHJpbmcgVGhlIGB0b1N0cmluZ2AgcmVzdWx0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBmdW5jYC5cbiAqL1xudmFyIGJhc2VTZXRUb1N0cmluZyA9ICFkZWZpbmVQcm9wZXJ0eSA/IGlkZW50aXR5IDogZnVuY3Rpb24oZnVuYywgc3RyaW5nKSB7XG4gIHJldHVybiBkZWZpbmVQcm9wZXJ0eShmdW5jLCAndG9TdHJpbmcnLCB7XG4gICAgJ2NvbmZpZ3VyYWJsZSc6IHRydWUsXG4gICAgJ2VudW1lcmFibGUnOiBmYWxzZSxcbiAgICAndmFsdWUnOiBjb25zdGFudChzdHJpbmcpLFxuICAgICd3cml0YWJsZSc6IHRydWVcbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VTZXRUb1N0cmluZztcbiIsIi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udGltZXNgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kc1xuICogb3IgbWF4IGFycmF5IGxlbmd0aCBjaGVja3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgdGltZXMgdG8gaW52b2tlIGBpdGVyYXRlZWAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiByZXN1bHRzLlxuICovXG5mdW5jdGlvbiBiYXNlVGltZXMobiwgaXRlcmF0ZWUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSBBcnJheShuKTtcblxuICB3aGlsZSAoKytpbmRleCA8IG4pIHtcbiAgICByZXN1bHRbaW5kZXhdID0gaXRlcmF0ZWUoaW5kZXgpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVRpbWVzO1xuIiwiLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy51bmFyeWAgd2l0aG91dCBzdXBwb3J0IGZvciBzdG9yaW5nIG1ldGFkYXRhLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjYXAgYXJndW1lbnRzIGZvci5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNhcHBlZCBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmFzZVVuYXJ5KGZ1bmMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGZ1bmModmFsdWUpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VVbmFyeTtcbiIsInZhciBTZXRDYWNoZSA9IHJlcXVpcmUoJy4vX1NldENhY2hlJyksXG4gICAgYXJyYXlJbmNsdWRlcyA9IHJlcXVpcmUoJy4vX2FycmF5SW5jbHVkZXMnKSxcbiAgICBhcnJheUluY2x1ZGVzV2l0aCA9IHJlcXVpcmUoJy4vX2FycmF5SW5jbHVkZXNXaXRoJyksXG4gICAgY2FjaGVIYXMgPSByZXF1aXJlKCcuL19jYWNoZUhhcycpLFxuICAgIGNyZWF0ZVNldCA9IHJlcXVpcmUoJy4vX2NyZWF0ZVNldCcpLFxuICAgIHNldFRvQXJyYXkgPSByZXF1aXJlKCcuL19zZXRUb0FycmF5Jyk7XG5cbi8qKiBVc2VkIGFzIHRoZSBzaXplIHRvIGVuYWJsZSBsYXJnZSBhcnJheSBvcHRpbWl6YXRpb25zLiAqL1xudmFyIExBUkdFX0FSUkFZX1NJWkUgPSAyMDA7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udW5pcUJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlXSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGJhc2VVbmlxKGFycmF5LCBpdGVyYXRlZSwgY29tcGFyYXRvcikge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGluY2x1ZGVzID0gYXJyYXlJbmNsdWRlcyxcbiAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgIGlzQ29tbW9uID0gdHJ1ZSxcbiAgICAgIHJlc3VsdCA9IFtdLFxuICAgICAgc2VlbiA9IHJlc3VsdDtcblxuICBpZiAoY29tcGFyYXRvcikge1xuICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgaW5jbHVkZXMgPSBhcnJheUluY2x1ZGVzV2l0aDtcbiAgfVxuICBlbHNlIGlmIChsZW5ndGggPj0gTEFSR0VfQVJSQVlfU0laRSkge1xuICAgIHZhciBzZXQgPSBpdGVyYXRlZSA/IG51bGwgOiBjcmVhdGVTZXQoYXJyYXkpO1xuICAgIGlmIChzZXQpIHtcbiAgICAgIHJldHVybiBzZXRUb0FycmF5KHNldCk7XG4gICAgfVxuICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgaW5jbHVkZXMgPSBjYWNoZUhhcztcbiAgICBzZWVuID0gbmV3IFNldENhY2hlO1xuICB9XG4gIGVsc2Uge1xuICAgIHNlZW4gPSBpdGVyYXRlZSA/IFtdIDogcmVzdWx0O1xuICB9XG4gIG91dGVyOlxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZSA/IGl0ZXJhdGVlKHZhbHVlKSA6IHZhbHVlO1xuXG4gICAgdmFsdWUgPSAoY29tcGFyYXRvciB8fCB2YWx1ZSAhPT0gMCkgPyB2YWx1ZSA6IDA7XG4gICAgaWYgKGlzQ29tbW9uICYmIGNvbXB1dGVkID09PSBjb21wdXRlZCkge1xuICAgICAgdmFyIHNlZW5JbmRleCA9IHNlZW4ubGVuZ3RoO1xuICAgICAgd2hpbGUgKHNlZW5JbmRleC0tKSB7XG4gICAgICAgIGlmIChzZWVuW3NlZW5JbmRleF0gPT09IGNvbXB1dGVkKSB7XG4gICAgICAgICAgY29udGludWUgb3V0ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChpdGVyYXRlZSkge1xuICAgICAgICBzZWVuLnB1c2goY29tcHV0ZWQpO1xuICAgICAgfVxuICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgIH1cbiAgICBlbHNlIGlmICghaW5jbHVkZXMoc2VlbiwgY29tcHV0ZWQsIGNvbXBhcmF0b3IpKSB7XG4gICAgICBpZiAoc2VlbiAhPT0gcmVzdWx0KSB7XG4gICAgICAgIHNlZW4ucHVzaChjb21wdXRlZCk7XG4gICAgICB9XG4gICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVVuaXE7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBhIGBjYWNoZWAgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IGNhY2hlIFRoZSBjYWNoZSB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBjYWNoZUhhcyhjYWNoZSwga2V5KSB7XG4gIHJldHVybiBjYWNoZS5oYXMoa2V5KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjYWNoZUhhcztcbiIsInZhciByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiogVXNlZCB0byBkZXRlY3Qgb3ZlcnJlYWNoaW5nIGNvcmUtanMgc2hpbXMuICovXG52YXIgY29yZUpzRGF0YSA9IHJvb3RbJ19fY29yZS1qc19zaGFyZWRfXyddO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNvcmVKc0RhdGE7XG4iLCJ2YXIgU2V0ID0gcmVxdWlyZSgnLi9fU2V0JyksXG4gICAgbm9vcCA9IHJlcXVpcmUoJy4vbm9vcCcpLFxuICAgIHNldFRvQXJyYXkgPSByZXF1aXJlKCcuL19zZXRUb0FycmF5Jyk7XG5cbi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIElORklOSVRZID0gMSAvIDA7XG5cbi8qKlxuICogQ3JlYXRlcyBhIHNldCBvYmplY3Qgb2YgYHZhbHVlc2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIGFkZCB0byB0aGUgc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IHNldC5cbiAqL1xudmFyIGNyZWF0ZVNldCA9ICEoU2V0ICYmICgxIC8gc2V0VG9BcnJheShuZXcgU2V0KFssLTBdKSlbMV0pID09IElORklOSVRZKSA/IG5vb3AgOiBmdW5jdGlvbih2YWx1ZXMpIHtcbiAgcmV0dXJuIG5ldyBTZXQodmFsdWVzKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlU2V0O1xuIiwidmFyIGdldE5hdGl2ZSA9IHJlcXVpcmUoJy4vX2dldE5hdGl2ZScpO1xuXG52YXIgZGVmaW5lUHJvcGVydHkgPSAoZnVuY3Rpb24oKSB7XG4gIHRyeSB7XG4gICAgdmFyIGZ1bmMgPSBnZXROYXRpdmUoT2JqZWN0LCAnZGVmaW5lUHJvcGVydHknKTtcbiAgICBmdW5jKHt9LCAnJywge30pO1xuICAgIHJldHVybiBmdW5jO1xuICB9IGNhdGNoIChlKSB7fVxufSgpKTtcblxubW9kdWxlLmV4cG9ydHMgPSBkZWZpbmVQcm9wZXJ0eTtcbiIsInZhciBTZXRDYWNoZSA9IHJlcXVpcmUoJy4vX1NldENhY2hlJyksXG4gICAgYXJyYXlTb21lID0gcmVxdWlyZSgnLi9fYXJyYXlTb21lJyksXG4gICAgY2FjaGVIYXMgPSByZXF1aXJlKCcuL19jYWNoZUhhcycpO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciB2YWx1ZSBjb21wYXJpc29ucy4gKi9cbnZhciBDT01QQVJFX1BBUlRJQUxfRkxBRyA9IDEsXG4gICAgQ09NUEFSRV9VTk9SREVSRURfRkxBRyA9IDI7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbERlZXBgIGZvciBhcnJheXMgd2l0aCBzdXBwb3J0IGZvclxuICogcGFydGlhbCBkZWVwIGNvbXBhcmlzb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7QXJyYXl9IG90aGVyIFRoZSBvdGhlciBhcnJheSB0byBjb21wYXJlLlxuICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gKiBAcGFyYW0ge09iamVjdH0gc3RhY2sgVHJhY2tzIHRyYXZlcnNlZCBgYXJyYXlgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGFycmF5cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBlcXVhbEFycmF5cyhhcnJheSwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgdmFyIGlzUGFydGlhbCA9IGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRyxcbiAgICAgIGFyckxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgIG90aExlbmd0aCA9IG90aGVyLmxlbmd0aDtcblxuICBpZiAoYXJyTGVuZ3RoICE9IG90aExlbmd0aCAmJiAhKGlzUGFydGlhbCAmJiBvdGhMZW5ndGggPiBhcnJMZW5ndGgpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8vIENoZWNrIHRoYXQgY3ljbGljIHZhbHVlcyBhcmUgZXF1YWwuXG4gIHZhciBhcnJTdGFja2VkID0gc3RhY2suZ2V0KGFycmF5KTtcbiAgdmFyIG90aFN0YWNrZWQgPSBzdGFjay5nZXQob3RoZXIpO1xuICBpZiAoYXJyU3RhY2tlZCAmJiBvdGhTdGFja2VkKSB7XG4gICAgcmV0dXJuIGFyclN0YWNrZWQgPT0gb3RoZXIgJiYgb3RoU3RhY2tlZCA9PSBhcnJheTtcbiAgfVxuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIHJlc3VsdCA9IHRydWUsXG4gICAgICBzZWVuID0gKGJpdG1hc2sgJiBDT01QQVJFX1VOT1JERVJFRF9GTEFHKSA/IG5ldyBTZXRDYWNoZSA6IHVuZGVmaW5lZDtcblxuICBzdGFjay5zZXQoYXJyYXksIG90aGVyKTtcbiAgc3RhY2suc2V0KG90aGVyLCBhcnJheSk7XG5cbiAgLy8gSWdub3JlIG5vbi1pbmRleCBwcm9wZXJ0aWVzLlxuICB3aGlsZSAoKytpbmRleCA8IGFyckxlbmd0aCkge1xuICAgIHZhciBhcnJWYWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgb3RoVmFsdWUgPSBvdGhlcltpbmRleF07XG5cbiAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgdmFyIGNvbXBhcmVkID0gaXNQYXJ0aWFsXG4gICAgICAgID8gY3VzdG9taXplcihvdGhWYWx1ZSwgYXJyVmFsdWUsIGluZGV4LCBvdGhlciwgYXJyYXksIHN0YWNrKVxuICAgICAgICA6IGN1c3RvbWl6ZXIoYXJyVmFsdWUsIG90aFZhbHVlLCBpbmRleCwgYXJyYXksIG90aGVyLCBzdGFjayk7XG4gICAgfVxuICAgIGlmIChjb21wYXJlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAoY29tcGFyZWQpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICAvLyBSZWN1cnNpdmVseSBjb21wYXJlIGFycmF5cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgIGlmIChzZWVuKSB7XG4gICAgICBpZiAoIWFycmF5U29tZShvdGhlciwgZnVuY3Rpb24ob3RoVmFsdWUsIG90aEluZGV4KSB7XG4gICAgICAgICAgICBpZiAoIWNhY2hlSGFzKHNlZW4sIG90aEluZGV4KSAmJlxuICAgICAgICAgICAgICAgIChhcnJWYWx1ZSA9PT0gb3RoVmFsdWUgfHwgZXF1YWxGdW5jKGFyclZhbHVlLCBvdGhWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spKSkge1xuICAgICAgICAgICAgICByZXR1cm4gc2Vlbi5wdXNoKG90aEluZGV4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KSkge1xuICAgICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICghKFxuICAgICAgICAgIGFyclZhbHVlID09PSBvdGhWYWx1ZSB8fFxuICAgICAgICAgICAgZXF1YWxGdW5jKGFyclZhbHVlLCBvdGhWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spXG4gICAgICAgICkpIHtcbiAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHN0YWNrWydkZWxldGUnXShhcnJheSk7XG4gIHN0YWNrWydkZWxldGUnXShvdGhlcik7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXF1YWxBcnJheXM7XG4iLCJ2YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fU3ltYm9sJyksXG4gICAgVWludDhBcnJheSA9IHJlcXVpcmUoJy4vX1VpbnQ4QXJyYXknKSxcbiAgICBlcSA9IHJlcXVpcmUoJy4vZXEnKSxcbiAgICBlcXVhbEFycmF5cyA9IHJlcXVpcmUoJy4vX2VxdWFsQXJyYXlzJyksXG4gICAgbWFwVG9BcnJheSA9IHJlcXVpcmUoJy4vX21hcFRvQXJyYXknKSxcbiAgICBzZXRUb0FycmF5ID0gcmVxdWlyZSgnLi9fc2V0VG9BcnJheScpO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciB2YWx1ZSBjb21wYXJpc29ucy4gKi9cbnZhciBDT01QQVJFX1BBUlRJQUxfRkxBRyA9IDEsXG4gICAgQ09NUEFSRV9VTk9SREVSRURfRkxBRyA9IDI7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBib29sVGFnID0gJ1tvYmplY3QgQm9vbGVhbl0nLFxuICAgIGRhdGVUYWcgPSAnW29iamVjdCBEYXRlXScsXG4gICAgZXJyb3JUYWcgPSAnW29iamVjdCBFcnJvcl0nLFxuICAgIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nLFxuICAgIG51bWJlclRhZyA9ICdbb2JqZWN0IE51bWJlcl0nLFxuICAgIHJlZ2V4cFRhZyA9ICdbb2JqZWN0IFJlZ0V4cF0nLFxuICAgIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nLFxuICAgIHN0cmluZ1RhZyA9ICdbb2JqZWN0IFN0cmluZ10nLFxuICAgIHN5bWJvbFRhZyA9ICdbb2JqZWN0IFN5bWJvbF0nO1xuXG52YXIgYXJyYXlCdWZmZXJUYWcgPSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nLFxuICAgIGRhdGFWaWV3VGFnID0gJ1tvYmplY3QgRGF0YVZpZXddJztcblxuLyoqIFVzZWQgdG8gY29udmVydCBzeW1ib2xzIHRvIHByaW1pdGl2ZXMgYW5kIHN0cmluZ3MuICovXG52YXIgc3ltYm9sUHJvdG8gPSBTeW1ib2wgPyBTeW1ib2wucHJvdG90eXBlIDogdW5kZWZpbmVkLFxuICAgIHN5bWJvbFZhbHVlT2YgPSBzeW1ib2xQcm90byA/IHN5bWJvbFByb3RvLnZhbHVlT2YgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbERlZXBgIGZvciBjb21wYXJpbmcgb2JqZWN0cyBvZlxuICogdGhlIHNhbWUgYHRvU3RyaW5nVGFnYC5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBmdW5jdGlvbiBvbmx5IHN1cHBvcnRzIGNvbXBhcmluZyB2YWx1ZXMgd2l0aCB0YWdzIG9mXG4gKiBgQm9vbGVhbmAsIGBEYXRlYCwgYEVycm9yYCwgYE51bWJlcmAsIGBSZWdFeHBgLCBvciBgU3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge09iamVjdH0gb3RoZXIgVGhlIG90aGVyIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtzdHJpbmd9IHRhZyBUaGUgYHRvU3RyaW5nVGFnYCBvZiB0aGUgb2JqZWN0cyB0byBjb21wYXJlLlxuICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gKiBAcGFyYW0ge09iamVjdH0gc3RhY2sgVHJhY2tzIHRyYXZlcnNlZCBgb2JqZWN0YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBvYmplY3RzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGVxdWFsQnlUYWcob2JqZWN0LCBvdGhlciwgdGFnLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gIHN3aXRjaCAodGFnKSB7XG4gICAgY2FzZSBkYXRhVmlld1RhZzpcbiAgICAgIGlmICgob2JqZWN0LmJ5dGVMZW5ndGggIT0gb3RoZXIuYnl0ZUxlbmd0aCkgfHxcbiAgICAgICAgICAob2JqZWN0LmJ5dGVPZmZzZXQgIT0gb3RoZXIuYnl0ZU9mZnNldCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgb2JqZWN0ID0gb2JqZWN0LmJ1ZmZlcjtcbiAgICAgIG90aGVyID0gb3RoZXIuYnVmZmVyO1xuXG4gICAgY2FzZSBhcnJheUJ1ZmZlclRhZzpcbiAgICAgIGlmICgob2JqZWN0LmJ5dGVMZW5ndGggIT0gb3RoZXIuYnl0ZUxlbmd0aCkgfHxcbiAgICAgICAgICAhZXF1YWxGdW5jKG5ldyBVaW50OEFycmF5KG9iamVjdCksIG5ldyBVaW50OEFycmF5KG90aGVyKSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICBjYXNlIGJvb2xUYWc6XG4gICAgY2FzZSBkYXRlVGFnOlxuICAgIGNhc2UgbnVtYmVyVGFnOlxuICAgICAgLy8gQ29lcmNlIGJvb2xlYW5zIHRvIGAxYCBvciBgMGAgYW5kIGRhdGVzIHRvIG1pbGxpc2Vjb25kcy5cbiAgICAgIC8vIEludmFsaWQgZGF0ZXMgYXJlIGNvZXJjZWQgdG8gYE5hTmAuXG4gICAgICByZXR1cm4gZXEoK29iamVjdCwgK290aGVyKTtcblxuICAgIGNhc2UgZXJyb3JUYWc6XG4gICAgICByZXR1cm4gb2JqZWN0Lm5hbWUgPT0gb3RoZXIubmFtZSAmJiBvYmplY3QubWVzc2FnZSA9PSBvdGhlci5tZXNzYWdlO1xuXG4gICAgY2FzZSByZWdleHBUYWc6XG4gICAgY2FzZSBzdHJpbmdUYWc6XG4gICAgICAvLyBDb2VyY2UgcmVnZXhlcyB0byBzdHJpbmdzIGFuZCB0cmVhdCBzdHJpbmdzLCBwcmltaXRpdmVzIGFuZCBvYmplY3RzLFxuICAgICAgLy8gYXMgZXF1YWwuIFNlZSBodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcmVnZXhwLnByb3RvdHlwZS50b3N0cmluZ1xuICAgICAgLy8gZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgIHJldHVybiBvYmplY3QgPT0gKG90aGVyICsgJycpO1xuXG4gICAgY2FzZSBtYXBUYWc6XG4gICAgICB2YXIgY29udmVydCA9IG1hcFRvQXJyYXk7XG5cbiAgICBjYXNlIHNldFRhZzpcbiAgICAgIHZhciBpc1BhcnRpYWwgPSBiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUc7XG4gICAgICBjb252ZXJ0IHx8IChjb252ZXJ0ID0gc2V0VG9BcnJheSk7XG5cbiAgICAgIGlmIChvYmplY3Quc2l6ZSAhPSBvdGhlci5zaXplICYmICFpc1BhcnRpYWwpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgLy8gQXNzdW1lIGN5Y2xpYyB2YWx1ZXMgYXJlIGVxdWFsLlxuICAgICAgdmFyIHN0YWNrZWQgPSBzdGFjay5nZXQob2JqZWN0KTtcbiAgICAgIGlmIChzdGFja2VkKSB7XG4gICAgICAgIHJldHVybiBzdGFja2VkID09IG90aGVyO1xuICAgICAgfVxuICAgICAgYml0bWFzayB8PSBDT01QQVJFX1VOT1JERVJFRF9GTEFHO1xuXG4gICAgICAvLyBSZWN1cnNpdmVseSBjb21wYXJlIG9iamVjdHMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgIHN0YWNrLnNldChvYmplY3QsIG90aGVyKTtcbiAgICAgIHZhciByZXN1bHQgPSBlcXVhbEFycmF5cyhjb252ZXJ0KG9iamVjdCksIGNvbnZlcnQob3RoZXIpLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKTtcbiAgICAgIHN0YWNrWydkZWxldGUnXShvYmplY3QpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcblxuICAgIGNhc2Ugc3ltYm9sVGFnOlxuICAgICAgaWYgKHN5bWJvbFZhbHVlT2YpIHtcbiAgICAgICAgcmV0dXJuIHN5bWJvbFZhbHVlT2YuY2FsbChvYmplY3QpID09IHN5bWJvbFZhbHVlT2YuY2FsbChvdGhlcik7XG4gICAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGVxdWFsQnlUYWc7XG4iLCJ2YXIgZ2V0QWxsS2V5cyA9IHJlcXVpcmUoJy4vX2dldEFsbEtleXMnKTtcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgdmFsdWUgY29tcGFyaXNvbnMuICovXG52YXIgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgPSAxO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxEZWVwYCBmb3Igb2JqZWN0cyB3aXRoIHN1cHBvcnQgZm9yXG4gKiBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICogQHBhcmFtIHtPYmplY3R9IHN0YWNrIFRyYWNrcyB0cmF2ZXJzZWQgYG9iamVjdGAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBlcXVhbE9iamVjdHMob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICB2YXIgaXNQYXJ0aWFsID0gYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHLFxuICAgICAgb2JqUHJvcHMgPSBnZXRBbGxLZXlzKG9iamVjdCksXG4gICAgICBvYmpMZW5ndGggPSBvYmpQcm9wcy5sZW5ndGgsXG4gICAgICBvdGhQcm9wcyA9IGdldEFsbEtleXMob3RoZXIpLFxuICAgICAgb3RoTGVuZ3RoID0gb3RoUHJvcHMubGVuZ3RoO1xuXG4gIGlmIChvYmpMZW5ndGggIT0gb3RoTGVuZ3RoICYmICFpc1BhcnRpYWwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIGluZGV4ID0gb2JqTGVuZ3RoO1xuICB3aGlsZSAoaW5kZXgtLSkge1xuICAgIHZhciBrZXkgPSBvYmpQcm9wc1tpbmRleF07XG4gICAgaWYgKCEoaXNQYXJ0aWFsID8ga2V5IGluIG90aGVyIDogaGFzT3duUHJvcGVydHkuY2FsbChvdGhlciwga2V5KSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgLy8gQ2hlY2sgdGhhdCBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC5cbiAgdmFyIG9ialN0YWNrZWQgPSBzdGFjay5nZXQob2JqZWN0KTtcbiAgdmFyIG90aFN0YWNrZWQgPSBzdGFjay5nZXQob3RoZXIpO1xuICBpZiAob2JqU3RhY2tlZCAmJiBvdGhTdGFja2VkKSB7XG4gICAgcmV0dXJuIG9ialN0YWNrZWQgPT0gb3RoZXIgJiYgb3RoU3RhY2tlZCA9PSBvYmplY3Q7XG4gIH1cbiAgdmFyIHJlc3VsdCA9IHRydWU7XG4gIHN0YWNrLnNldChvYmplY3QsIG90aGVyKTtcbiAgc3RhY2suc2V0KG90aGVyLCBvYmplY3QpO1xuXG4gIHZhciBza2lwQ3RvciA9IGlzUGFydGlhbDtcbiAgd2hpbGUgKCsraW5kZXggPCBvYmpMZW5ndGgpIHtcbiAgICBrZXkgPSBvYmpQcm9wc1tpbmRleF07XG4gICAgdmFyIG9ialZhbHVlID0gb2JqZWN0W2tleV0sXG4gICAgICAgIG90aFZhbHVlID0gb3RoZXJba2V5XTtcblxuICAgIGlmIChjdXN0b21pemVyKSB7XG4gICAgICB2YXIgY29tcGFyZWQgPSBpc1BhcnRpYWxcbiAgICAgICAgPyBjdXN0b21pemVyKG90aFZhbHVlLCBvYmpWYWx1ZSwga2V5LCBvdGhlciwgb2JqZWN0LCBzdGFjaylcbiAgICAgICAgOiBjdXN0b21pemVyKG9ialZhbHVlLCBvdGhWYWx1ZSwga2V5LCBvYmplY3QsIG90aGVyLCBzdGFjayk7XG4gICAgfVxuICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgb2JqZWN0cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgIGlmICghKGNvbXBhcmVkID09PSB1bmRlZmluZWRcbiAgICAgICAgICA/IChvYmpWYWx1ZSA9PT0gb3RoVmFsdWUgfHwgZXF1YWxGdW5jKG9ialZhbHVlLCBvdGhWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spKVxuICAgICAgICAgIDogY29tcGFyZWRcbiAgICAgICAgKSkge1xuICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgc2tpcEN0b3IgfHwgKHNraXBDdG9yID0ga2V5ID09ICdjb25zdHJ1Y3RvcicpO1xuICB9XG4gIGlmIChyZXN1bHQgJiYgIXNraXBDdG9yKSB7XG4gICAgdmFyIG9iakN0b3IgPSBvYmplY3QuY29uc3RydWN0b3IsXG4gICAgICAgIG90aEN0b3IgPSBvdGhlci5jb25zdHJ1Y3RvcjtcblxuICAgIC8vIE5vbiBgT2JqZWN0YCBvYmplY3QgaW5zdGFuY2VzIHdpdGggZGlmZmVyZW50IGNvbnN0cnVjdG9ycyBhcmUgbm90IGVxdWFsLlxuICAgIGlmIChvYmpDdG9yICE9IG90aEN0b3IgJiZcbiAgICAgICAgKCdjb25zdHJ1Y3RvcicgaW4gb2JqZWN0ICYmICdjb25zdHJ1Y3RvcicgaW4gb3RoZXIpICYmXG4gICAgICAgICEodHlwZW9mIG9iakN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBvYmpDdG9yIGluc3RhbmNlb2Ygb2JqQ3RvciAmJlxuICAgICAgICAgIHR5cGVvZiBvdGhDdG9yID09ICdmdW5jdGlvbicgJiYgb3RoQ3RvciBpbnN0YW5jZW9mIG90aEN0b3IpKSB7XG4gICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICB9XG4gIH1cbiAgc3RhY2tbJ2RlbGV0ZSddKG9iamVjdCk7XG4gIHN0YWNrWydkZWxldGUnXShvdGhlcik7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXF1YWxPYmplY3RzO1xuIiwiLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBnbG9iYWxgIGZyb20gTm9kZS5qcy4gKi9cbnZhciBmcmVlR2xvYmFsID0gdHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWwgJiYgZ2xvYmFsLk9iamVjdCA9PT0gT2JqZWN0ICYmIGdsb2JhbDtcblxubW9kdWxlLmV4cG9ydHMgPSBmcmVlR2xvYmFsO1xuIiwidmFyIGJhc2VHZXRBbGxLZXlzID0gcmVxdWlyZSgnLi9fYmFzZUdldEFsbEtleXMnKSxcbiAgICBnZXRTeW1ib2xzID0gcmVxdWlyZSgnLi9fZ2V0U3ltYm9scycpLFxuICAgIGtleXMgPSByZXF1aXJlKCcuL2tleXMnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIG93biBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzLlxuICovXG5mdW5jdGlvbiBnZXRBbGxLZXlzKG9iamVjdCkge1xuICByZXR1cm4gYmFzZUdldEFsbEtleXMob2JqZWN0LCBrZXlzLCBnZXRTeW1ib2xzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRBbGxLZXlzO1xuIiwidmFyIGlzS2V5YWJsZSA9IHJlcXVpcmUoJy4vX2lzS2V5YWJsZScpO1xuXG4vKipcbiAqIEdldHMgdGhlIGRhdGEgZm9yIGBtYXBgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gbWFwIFRoZSBtYXAgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSByZWZlcmVuY2Uga2V5LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1hcCBkYXRhLlxuICovXG5mdW5jdGlvbiBnZXRNYXBEYXRhKG1hcCwga2V5KSB7XG4gIHZhciBkYXRhID0gbWFwLl9fZGF0YV9fO1xuICByZXR1cm4gaXNLZXlhYmxlKGtleSlcbiAgICA/IGRhdGFbdHlwZW9mIGtleSA9PSAnc3RyaW5nJyA/ICdzdHJpbmcnIDogJ2hhc2gnXVxuICAgIDogZGF0YS5tYXA7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0TWFwRGF0YTtcbiIsInZhciBiYXNlSXNOYXRpdmUgPSByZXF1aXJlKCcuL19iYXNlSXNOYXRpdmUnKSxcbiAgICBnZXRWYWx1ZSA9IHJlcXVpcmUoJy4vX2dldFZhbHVlJyk7XG5cbi8qKlxuICogR2V0cyB0aGUgbmF0aXZlIGZ1bmN0aW9uIGF0IGBrZXlgIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIG1ldGhvZCB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZnVuY3Rpb24gaWYgaXQncyBuYXRpdmUsIGVsc2UgYHVuZGVmaW5lZGAuXG4gKi9cbmZ1bmN0aW9uIGdldE5hdGl2ZShvYmplY3QsIGtleSkge1xuICB2YXIgdmFsdWUgPSBnZXRWYWx1ZShvYmplY3QsIGtleSk7XG4gIHJldHVybiBiYXNlSXNOYXRpdmUodmFsdWUpID8gdmFsdWUgOiB1bmRlZmluZWQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0TmF0aXZlO1xuIiwidmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX1N5bWJvbCcpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgc3ltVG9TdHJpbmdUYWcgPSBTeW1ib2wgPyBTeW1ib2wudG9TdHJpbmdUYWcgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlR2V0VGFnYCB3aGljaCBpZ25vcmVzIGBTeW1ib2wudG9TdHJpbmdUYWdgIHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSByYXcgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gZ2V0UmF3VGFnKHZhbHVlKSB7XG4gIHZhciBpc093biA9IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIHN5bVRvU3RyaW5nVGFnKSxcbiAgICAgIHRhZyA9IHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcblxuICB0cnkge1xuICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHVuZGVmaW5lZDtcbiAgICB2YXIgdW5tYXNrZWQgPSB0cnVlO1xuICB9IGNhdGNoIChlKSB7fVxuXG4gIHZhciByZXN1bHQgPSBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgaWYgKHVubWFza2VkKSB7XG4gICAgaWYgKGlzT3duKSB7XG4gICAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB0YWc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlbGV0ZSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0UmF3VGFnO1xuIiwidmFyIGFycmF5RmlsdGVyID0gcmVxdWlyZSgnLi9fYXJyYXlGaWx0ZXInKSxcbiAgICBzdHViQXJyYXkgPSByZXF1aXJlKCcuL3N0dWJBcnJheScpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IG9iamVjdFByb3RvLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlR2V0U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGVudW1lcmFibGUgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBzeW1ib2xzLlxuICovXG52YXIgZ2V0U3ltYm9scyA9ICFuYXRpdmVHZXRTeW1ib2xzID8gc3R1YkFycmF5IDogZnVuY3Rpb24ob2JqZWN0KSB7XG4gIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICBvYmplY3QgPSBPYmplY3Qob2JqZWN0KTtcbiAgcmV0dXJuIGFycmF5RmlsdGVyKG5hdGl2ZUdldFN5bWJvbHMob2JqZWN0KSwgZnVuY3Rpb24oc3ltYm9sKSB7XG4gICAgcmV0dXJuIHByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwob2JqZWN0LCBzeW1ib2wpO1xuICB9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0U3ltYm9scztcbiIsInZhciBEYXRhVmlldyA9IHJlcXVpcmUoJy4vX0RhdGFWaWV3JyksXG4gICAgTWFwID0gcmVxdWlyZSgnLi9fTWFwJyksXG4gICAgUHJvbWlzZSA9IHJlcXVpcmUoJy4vX1Byb21pc2UnKSxcbiAgICBTZXQgPSByZXF1aXJlKCcuL19TZXQnKSxcbiAgICBXZWFrTWFwID0gcmVxdWlyZSgnLi9fV2Vha01hcCcpLFxuICAgIGJhc2VHZXRUYWcgPSByZXF1aXJlKCcuL19iYXNlR2V0VGFnJyksXG4gICAgdG9Tb3VyY2UgPSByZXF1aXJlKCcuL190b1NvdXJjZScpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgbWFwVGFnID0gJ1tvYmplY3QgTWFwXScsXG4gICAgb2JqZWN0VGFnID0gJ1tvYmplY3QgT2JqZWN0XScsXG4gICAgcHJvbWlzZVRhZyA9ICdbb2JqZWN0IFByb21pc2VdJyxcbiAgICBzZXRUYWcgPSAnW29iamVjdCBTZXRdJyxcbiAgICB3ZWFrTWFwVGFnID0gJ1tvYmplY3QgV2Vha01hcF0nO1xuXG52YXIgZGF0YVZpZXdUYWcgPSAnW29iamVjdCBEYXRhVmlld10nO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgbWFwcywgc2V0cywgYW5kIHdlYWttYXBzLiAqL1xudmFyIGRhdGFWaWV3Q3RvclN0cmluZyA9IHRvU291cmNlKERhdGFWaWV3KSxcbiAgICBtYXBDdG9yU3RyaW5nID0gdG9Tb3VyY2UoTWFwKSxcbiAgICBwcm9taXNlQ3RvclN0cmluZyA9IHRvU291cmNlKFByb21pc2UpLFxuICAgIHNldEN0b3JTdHJpbmcgPSB0b1NvdXJjZShTZXQpLFxuICAgIHdlYWtNYXBDdG9yU3RyaW5nID0gdG9Tb3VyY2UoV2Vha01hcCk7XG5cbi8qKlxuICogR2V0cyB0aGUgYHRvU3RyaW5nVGFnYCBvZiBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGB0b1N0cmluZ1RhZ2AuXG4gKi9cbnZhciBnZXRUYWcgPSBiYXNlR2V0VGFnO1xuXG4vLyBGYWxsYmFjayBmb3IgZGF0YSB2aWV3cywgbWFwcywgc2V0cywgYW5kIHdlYWsgbWFwcyBpbiBJRSAxMSBhbmQgcHJvbWlzZXMgaW4gTm9kZS5qcyA8IDYuXG5pZiAoKERhdGFWaWV3ICYmIGdldFRhZyhuZXcgRGF0YVZpZXcobmV3IEFycmF5QnVmZmVyKDEpKSkgIT0gZGF0YVZpZXdUYWcpIHx8XG4gICAgKE1hcCAmJiBnZXRUYWcobmV3IE1hcCkgIT0gbWFwVGFnKSB8fFxuICAgIChQcm9taXNlICYmIGdldFRhZyhQcm9taXNlLnJlc29sdmUoKSkgIT0gcHJvbWlzZVRhZykgfHxcbiAgICAoU2V0ICYmIGdldFRhZyhuZXcgU2V0KSAhPSBzZXRUYWcpIHx8XG4gICAgKFdlYWtNYXAgJiYgZ2V0VGFnKG5ldyBXZWFrTWFwKSAhPSB3ZWFrTWFwVGFnKSkge1xuICBnZXRUYWcgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHZhciByZXN1bHQgPSBiYXNlR2V0VGFnKHZhbHVlKSxcbiAgICAgICAgQ3RvciA9IHJlc3VsdCA9PSBvYmplY3RUYWcgPyB2YWx1ZS5jb25zdHJ1Y3RvciA6IHVuZGVmaW5lZCxcbiAgICAgICAgY3RvclN0cmluZyA9IEN0b3IgPyB0b1NvdXJjZShDdG9yKSA6ICcnO1xuXG4gICAgaWYgKGN0b3JTdHJpbmcpIHtcbiAgICAgIHN3aXRjaCAoY3RvclN0cmluZykge1xuICAgICAgICBjYXNlIGRhdGFWaWV3Q3RvclN0cmluZzogcmV0dXJuIGRhdGFWaWV3VGFnO1xuICAgICAgICBjYXNlIG1hcEN0b3JTdHJpbmc6IHJldHVybiBtYXBUYWc7XG4gICAgICAgIGNhc2UgcHJvbWlzZUN0b3JTdHJpbmc6IHJldHVybiBwcm9taXNlVGFnO1xuICAgICAgICBjYXNlIHNldEN0b3JTdHJpbmc6IHJldHVybiBzZXRUYWc7XG4gICAgICAgIGNhc2Ugd2Vha01hcEN0b3JTdHJpbmc6IHJldHVybiB3ZWFrTWFwVGFnO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFRhZztcbiIsIi8qKlxuICogR2V0cyB0aGUgdmFsdWUgYXQgYGtleWAgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcHJvcGVydHkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGdldFZhbHVlKG9iamVjdCwga2V5KSB7XG4gIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFZhbHVlO1xuIiwidmFyIG5hdGl2ZUNyZWF0ZSA9IHJlcXVpcmUoJy4vX25hdGl2ZUNyZWF0ZScpO1xuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIGhhc2guXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgSGFzaFxuICovXG5mdW5jdGlvbiBoYXNoQ2xlYXIoKSB7XG4gIHRoaXMuX19kYXRhX18gPSBuYXRpdmVDcmVhdGUgPyBuYXRpdmVDcmVhdGUobnVsbCkgOiB7fTtcbiAgdGhpcy5zaXplID0gMDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNoQ2xlYXI7XG4iLCIvKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBoYXNoLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge09iamVjdH0gaGFzaCBUaGUgaGFzaCB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaGFzaERlbGV0ZShrZXkpIHtcbiAgdmFyIHJlc3VsdCA9IHRoaXMuaGFzKGtleSkgJiYgZGVsZXRlIHRoaXMuX19kYXRhX19ba2V5XTtcbiAgdGhpcy5zaXplIC09IHJlc3VsdCA/IDEgOiAwO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc2hEZWxldGU7XG4iLCJ2YXIgbmF0aXZlQ3JlYXRlID0gcmVxdWlyZSgnLi9fbmF0aXZlQ3JlYXRlJyk7XG5cbi8qKiBVc2VkIHRvIHN0YW5kLWluIGZvciBgdW5kZWZpbmVkYCBoYXNoIHZhbHVlcy4gKi9cbnZhciBIQVNIX1VOREVGSU5FRCA9ICdfX2xvZGFzaF9oYXNoX3VuZGVmaW5lZF9fJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBHZXRzIHRoZSBoYXNoIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGhhc2hHZXQoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgaWYgKG5hdGl2ZUNyZWF0ZSkge1xuICAgIHZhciByZXN1bHQgPSBkYXRhW2tleV07XG4gICAgcmV0dXJuIHJlc3VsdCA9PT0gSEFTSF9VTkRFRklORUQgPyB1bmRlZmluZWQgOiByZXN1bHQ7XG4gIH1cbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KSA/IGRhdGFba2V5XSA6IHVuZGVmaW5lZDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNoR2V0O1xuIiwidmFyIG5hdGl2ZUNyZWF0ZSA9IHJlcXVpcmUoJy4vX25hdGl2ZUNyZWF0ZScpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIENoZWNrcyBpZiBhIGhhc2ggdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGhhc2hIYXMoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgcmV0dXJuIG5hdGl2ZUNyZWF0ZSA/IChkYXRhW2tleV0gIT09IHVuZGVmaW5lZCkgOiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGRhdGEsIGtleSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzaEhhcztcbiIsInZhciBuYXRpdmVDcmVhdGUgPSByZXF1aXJlKCcuL19uYXRpdmVDcmVhdGUnKTtcblxuLyoqIFVzZWQgdG8gc3RhbmQtaW4gZm9yIGB1bmRlZmluZWRgIGhhc2ggdmFsdWVzLiAqL1xudmFyIEhBU0hfVU5ERUZJTkVEID0gJ19fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18nO1xuXG4vKipcbiAqIFNldHMgdGhlIGhhc2ggYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBoYXNoIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBoYXNoU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICB0aGlzLnNpemUgKz0gdGhpcy5oYXMoa2V5KSA/IDAgOiAxO1xuICBkYXRhW2tleV0gPSAobmF0aXZlQ3JlYXRlICYmIHZhbHVlID09PSB1bmRlZmluZWQpID8gSEFTSF9VTkRFRklORUQgOiB2YWx1ZTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzaFNldDtcbiIsInZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19TeW1ib2wnKSxcbiAgICBpc0FyZ3VtZW50cyA9IHJlcXVpcmUoJy4vaXNBcmd1bWVudHMnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5Jyk7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHNwcmVhZGFibGVTeW1ib2wgPSBTeW1ib2wgPyBTeW1ib2wuaXNDb25jYXRTcHJlYWRhYmxlIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgZmxhdHRlbmFibGUgYGFyZ3VtZW50c2Agb2JqZWN0IG9yIGFycmF5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGZsYXR0ZW5hYmxlLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzRmxhdHRlbmFibGUodmFsdWUpIHtcbiAgcmV0dXJuIGlzQXJyYXkodmFsdWUpIHx8IGlzQXJndW1lbnRzKHZhbHVlKSB8fFxuICAgICEhKHNwcmVhZGFibGVTeW1ib2wgJiYgdmFsdWUgJiYgdmFsdWVbc3ByZWFkYWJsZVN5bWJvbF0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzRmxhdHRlbmFibGU7XG4iLCIvKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBNQVhfU0FGRV9JTlRFR0VSID0gOTAwNzE5OTI1NDc0MDk5MTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IHVuc2lnbmVkIGludGVnZXIgdmFsdWVzLiAqL1xudmFyIHJlSXNVaW50ID0gL14oPzowfFsxLTldXFxkKikkLztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGFycmF5LWxpa2UgaW5kZXguXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGg9TUFYX1NBRkVfSU5URUdFUl0gVGhlIHVwcGVyIGJvdW5kcyBvZiBhIHZhbGlkIGluZGV4LlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBpbmRleCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0luZGV4KHZhbHVlLCBsZW5ndGgpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIGxlbmd0aCA9IGxlbmd0aCA9PSBudWxsID8gTUFYX1NBRkVfSU5URUdFUiA6IGxlbmd0aDtcblxuICByZXR1cm4gISFsZW5ndGggJiZcbiAgICAodHlwZSA9PSAnbnVtYmVyJyB8fFxuICAgICAgKHR5cGUgIT0gJ3N5bWJvbCcgJiYgcmVJc1VpbnQudGVzdCh2YWx1ZSkpKSAmJlxuICAgICAgICAodmFsdWUgPiAtMSAmJiB2YWx1ZSAlIDEgPT0gMCAmJiB2YWx1ZSA8IGxlbmd0aCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNJbmRleDtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUgZm9yIHVzZSBhcyB1bmlxdWUgb2JqZWN0IGtleS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0tleWFibGUodmFsdWUpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIHJldHVybiAodHlwZSA9PSAnc3RyaW5nJyB8fCB0eXBlID09ICdudW1iZXInIHx8IHR5cGUgPT0gJ3N5bWJvbCcgfHwgdHlwZSA9PSAnYm9vbGVhbicpXG4gICAgPyAodmFsdWUgIT09ICdfX3Byb3RvX18nKVxuICAgIDogKHZhbHVlID09PSBudWxsKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0tleWFibGU7XG4iLCJ2YXIgY29yZUpzRGF0YSA9IHJlcXVpcmUoJy4vX2NvcmVKc0RhdGEnKTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG1ldGhvZHMgbWFzcXVlcmFkaW5nIGFzIG5hdGl2ZS4gKi9cbnZhciBtYXNrU3JjS2V5ID0gKGZ1bmN0aW9uKCkge1xuICB2YXIgdWlkID0gL1teLl0rJC8uZXhlYyhjb3JlSnNEYXRhICYmIGNvcmVKc0RhdGEua2V5cyAmJiBjb3JlSnNEYXRhLmtleXMuSUVfUFJPVE8gfHwgJycpO1xuICByZXR1cm4gdWlkID8gKCdTeW1ib2woc3JjKV8xLicgKyB1aWQpIDogJyc7XG59KCkpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgZnVuY2AgaGFzIGl0cyBzb3VyY2UgbWFza2VkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgZnVuY2AgaXMgbWFza2VkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzTWFza2VkKGZ1bmMpIHtcbiAgcmV0dXJuICEhbWFza1NyY0tleSAmJiAobWFza1NyY0tleSBpbiBmdW5jKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc01hc2tlZDtcbiIsIi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGlrZWx5IGEgcHJvdG90eXBlIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHByb3RvdHlwZSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc1Byb3RvdHlwZSh2YWx1ZSkge1xuICB2YXIgQ3RvciA9IHZhbHVlICYmIHZhbHVlLmNvbnN0cnVjdG9yLFxuICAgICAgcHJvdG8gPSAodHlwZW9mIEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBDdG9yLnByb3RvdHlwZSkgfHwgb2JqZWN0UHJvdG87XG5cbiAgcmV0dXJuIHZhbHVlID09PSBwcm90bztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc1Byb3RvdHlwZTtcbiIsIi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgbGlzdCBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlQ2xlYXIoKSB7XG4gIHRoaXMuX19kYXRhX18gPSBbXTtcbiAgdGhpcy5zaXplID0gMDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBsaXN0Q2FjaGVDbGVhcjtcbiIsInZhciBhc3NvY0luZGV4T2YgPSByZXF1aXJlKCcuL19hc3NvY0luZGV4T2YnKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIGFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHNwbGljZSA9IGFycmF5UHJvdG8uc3BsaWNlO1xuXG4vKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBsaXN0IGNhY2hlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVEZWxldGUoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgaWYgKGluZGV4IDwgMCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgbGFzdEluZGV4ID0gZGF0YS5sZW5ndGggLSAxO1xuICBpZiAoaW5kZXggPT0gbGFzdEluZGV4KSB7XG4gICAgZGF0YS5wb3AoKTtcbiAgfSBlbHNlIHtcbiAgICBzcGxpY2UuY2FsbChkYXRhLCBpbmRleCwgMSk7XG4gIH1cbiAgLS10aGlzLnNpemU7XG4gIHJldHVybiB0cnVlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGxpc3RDYWNoZURlbGV0ZTtcbiIsInZhciBhc3NvY0luZGV4T2YgPSByZXF1aXJlKCcuL19hc3NvY0luZGV4T2YnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBsaXN0IGNhY2hlIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlR2V0KGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gIHJldHVybiBpbmRleCA8IDAgPyB1bmRlZmluZWQgOiBkYXRhW2luZGV4XVsxXTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBsaXN0Q2FjaGVHZXQ7XG4iLCJ2YXIgYXNzb2NJbmRleE9mID0gcmVxdWlyZSgnLi9fYXNzb2NJbmRleE9mJyk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgbGlzdCBjYWNoZSB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVIYXMoa2V5KSB7XG4gIHJldHVybiBhc3NvY0luZGV4T2YodGhpcy5fX2RhdGFfXywga2V5KSA+IC0xO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGxpc3RDYWNoZUhhcztcbiIsInZhciBhc3NvY0luZGV4T2YgPSByZXF1aXJlKCcuL19hc3NvY0luZGV4T2YnKTtcblxuLyoqXG4gKiBTZXRzIHRoZSBsaXN0IGNhY2hlIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBsaXN0IGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gIGlmIChpbmRleCA8IDApIHtcbiAgICArK3RoaXMuc2l6ZTtcbiAgICBkYXRhLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgfSBlbHNlIHtcbiAgICBkYXRhW2luZGV4XVsxXSA9IHZhbHVlO1xuICB9XG4gIHJldHVybiB0aGlzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGxpc3RDYWNoZVNldDtcbiIsInZhciBIYXNoID0gcmVxdWlyZSgnLi9fSGFzaCcpLFxuICAgIExpc3RDYWNoZSA9IHJlcXVpcmUoJy4vX0xpc3RDYWNoZScpLFxuICAgIE1hcCA9IHJlcXVpcmUoJy4vX01hcCcpO1xuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIG1hcC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUNsZWFyKCkge1xuICB0aGlzLnNpemUgPSAwO1xuICB0aGlzLl9fZGF0YV9fID0ge1xuICAgICdoYXNoJzogbmV3IEhhc2gsXG4gICAgJ21hcCc6IG5ldyAoTWFwIHx8IExpc3RDYWNoZSksXG4gICAgJ3N0cmluZyc6IG5ldyBIYXNoXG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwQ2FjaGVDbGVhcjtcbiIsInZhciBnZXRNYXBEYXRhID0gcmVxdWlyZSgnLi9fZ2V0TWFwRGF0YScpO1xuXG4vKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBtYXAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVEZWxldGUoa2V5KSB7XG4gIHZhciByZXN1bHQgPSBnZXRNYXBEYXRhKHRoaXMsIGtleSlbJ2RlbGV0ZSddKGtleSk7XG4gIHRoaXMuc2l6ZSAtPSByZXN1bHQgPyAxIDogMDtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXBDYWNoZURlbGV0ZTtcbiIsInZhciBnZXRNYXBEYXRhID0gcmVxdWlyZSgnLi9fZ2V0TWFwRGF0YScpO1xuXG4vKipcbiAqIEdldHMgdGhlIG1hcCB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVHZXQoa2V5KSB7XG4gIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSkuZ2V0KGtleSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwQ2FjaGVHZXQ7XG4iLCJ2YXIgZ2V0TWFwRGF0YSA9IHJlcXVpcmUoJy4vX2dldE1hcERhdGEnKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYSBtYXAgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUhhcyhrZXkpIHtcbiAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KS5oYXMoa2V5KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXBDYWNoZUhhcztcbiIsInZhciBnZXRNYXBEYXRhID0gcmVxdWlyZSgnLi9fZ2V0TWFwRGF0YScpO1xuXG4vKipcbiAqIFNldHMgdGhlIG1hcCBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBtYXAgY2FjaGUgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSBnZXRNYXBEYXRhKHRoaXMsIGtleSksXG4gICAgICBzaXplID0gZGF0YS5zaXplO1xuXG4gIGRhdGEuc2V0KGtleSwgdmFsdWUpO1xuICB0aGlzLnNpemUgKz0gZGF0YS5zaXplID09IHNpemUgPyAwIDogMTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwQ2FjaGVTZXQ7XG4iLCIvKipcbiAqIENvbnZlcnRzIGBtYXBgIHRvIGl0cyBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBtYXAgVGhlIG1hcCB0byBjb252ZXJ0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBrZXktdmFsdWUgcGFpcnMuXG4gKi9cbmZ1bmN0aW9uIG1hcFRvQXJyYXkobWFwKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgcmVzdWx0ID0gQXJyYXkobWFwLnNpemUpO1xuXG4gIG1hcC5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICByZXN1bHRbKytpbmRleF0gPSBba2V5LCB2YWx1ZV07XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcFRvQXJyYXk7XG4iLCJ2YXIgZ2V0TmF0aXZlID0gcmVxdWlyZSgnLi9fZ2V0TmF0aXZlJyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBuYXRpdmVDcmVhdGUgPSBnZXROYXRpdmUoT2JqZWN0LCAnY3JlYXRlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gbmF0aXZlQ3JlYXRlO1xuIiwidmFyIG92ZXJBcmcgPSByZXF1aXJlKCcuL19vdmVyQXJnJyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVLZXlzID0gb3ZlckFyZyhPYmplY3Qua2V5cywgT2JqZWN0KTtcblxubW9kdWxlLmV4cG9ydHMgPSBuYXRpdmVLZXlzO1xuIiwidmFyIGZyZWVHbG9iYWwgPSByZXF1aXJlKCcuL19mcmVlR2xvYmFsJyk7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZXhwb3J0c2AuICovXG52YXIgZnJlZUV4cG9ydHMgPSB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyAmJiBleHBvcnRzICYmICFleHBvcnRzLm5vZGVUeXBlICYmIGV4cG9ydHM7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgbW9kdWxlYC4gKi9cbnZhciBmcmVlTW9kdWxlID0gZnJlZUV4cG9ydHMgJiYgdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUgJiYgIW1vZHVsZS5ub2RlVHlwZSAmJiBtb2R1bGU7XG5cbi8qKiBEZXRlY3QgdGhlIHBvcHVsYXIgQ29tbW9uSlMgZXh0ZW5zaW9uIGBtb2R1bGUuZXhwb3J0c2AuICovXG52YXIgbW9kdWxlRXhwb3J0cyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5leHBvcnRzID09PSBmcmVlRXhwb3J0cztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBwcm9jZXNzYCBmcm9tIE5vZGUuanMuICovXG52YXIgZnJlZVByb2Nlc3MgPSBtb2R1bGVFeHBvcnRzICYmIGZyZWVHbG9iYWwucHJvY2VzcztcblxuLyoqIFVzZWQgdG8gYWNjZXNzIGZhc3RlciBOb2RlLmpzIGhlbHBlcnMuICovXG52YXIgbm9kZVV0aWwgPSAoZnVuY3Rpb24oKSB7XG4gIHRyeSB7XG4gICAgLy8gVXNlIGB1dGlsLnR5cGVzYCBmb3IgTm9kZS5qcyAxMCsuXG4gICAgdmFyIHR5cGVzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLnJlcXVpcmUgJiYgZnJlZU1vZHVsZS5yZXF1aXJlKCd1dGlsJykudHlwZXM7XG5cbiAgICBpZiAodHlwZXMpIHtcbiAgICAgIHJldHVybiB0eXBlcztcbiAgICB9XG5cbiAgICAvLyBMZWdhY3kgYHByb2Nlc3MuYmluZGluZygndXRpbCcpYCBmb3IgTm9kZS5qcyA8IDEwLlxuICAgIHJldHVybiBmcmVlUHJvY2VzcyAmJiBmcmVlUHJvY2Vzcy5iaW5kaW5nICYmIGZyZWVQcm9jZXNzLmJpbmRpbmcoJ3V0aWwnKTtcbiAgfSBjYXRjaCAoZSkge31cbn0oKSk7XG5cbm1vZHVsZS5leHBvcnRzID0gbm9kZVV0aWw7XG4iLCIvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIHVzaW5nIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBvYmplY3RUb1N0cmluZztcbiIsIi8qKlxuICogQ3JlYXRlcyBhIHVuYXJ5IGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBpdHMgYXJndW1lbnQgdHJhbnNmb3JtZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSB0cmFuc2Zvcm0gVGhlIGFyZ3VtZW50IHRyYW5zZm9ybS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBvdmVyQXJnKGZ1bmMsIHRyYW5zZm9ybSkge1xuICByZXR1cm4gZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIGZ1bmModHJhbnNmb3JtKGFyZykpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG92ZXJBcmc7XG4iLCJ2YXIgYXBwbHkgPSByZXF1aXJlKCcuL19hcHBseScpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlTWF4ID0gTWF0aC5tYXg7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlUmVzdGAgd2hpY2ggdHJhbnNmb3JtcyB0aGUgcmVzdCBhcnJheS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXBwbHkgYSByZXN0IHBhcmFtZXRlciB0by5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9ZnVuYy5sZW5ndGgtMV0gVGhlIHN0YXJ0IHBvc2l0aW9uIG9mIHRoZSByZXN0IHBhcmFtZXRlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHRyYW5zZm9ybSBUaGUgcmVzdCBhcnJheSB0cmFuc2Zvcm0uXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gb3ZlclJlc3QoZnVuYywgc3RhcnQsIHRyYW5zZm9ybSkge1xuICBzdGFydCA9IG5hdGl2ZU1heChzdGFydCA9PT0gdW5kZWZpbmVkID8gKGZ1bmMubGVuZ3RoIC0gMSkgOiBzdGFydCwgMCk7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gbmF0aXZlTWF4KGFyZ3MubGVuZ3RoIC0gc3RhcnQsIDApLFxuICAgICAgICBhcnJheSA9IEFycmF5KGxlbmd0aCk7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgYXJyYXlbaW5kZXhdID0gYXJnc1tzdGFydCArIGluZGV4XTtcbiAgICB9XG4gICAgaW5kZXggPSAtMTtcbiAgICB2YXIgb3RoZXJBcmdzID0gQXJyYXkoc3RhcnQgKyAxKTtcbiAgICB3aGlsZSAoKytpbmRleCA8IHN0YXJ0KSB7XG4gICAgICBvdGhlckFyZ3NbaW5kZXhdID0gYXJnc1tpbmRleF07XG4gICAgfVxuICAgIG90aGVyQXJnc1tzdGFydF0gPSB0cmFuc2Zvcm0oYXJyYXkpO1xuICAgIHJldHVybiBhcHBseShmdW5jLCB0aGlzLCBvdGhlckFyZ3MpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG92ZXJSZXN0O1xuIiwidmFyIGZyZWVHbG9iYWwgPSByZXF1aXJlKCcuL19mcmVlR2xvYmFsJyk7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgc2VsZmAuICovXG52YXIgZnJlZVNlbGYgPSB0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmICYmIHNlbGYuT2JqZWN0ID09PSBPYmplY3QgJiYgc2VsZjtcblxuLyoqIFVzZWQgYXMgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBvYmplY3QuICovXG52YXIgcm9vdCA9IGZyZWVHbG9iYWwgfHwgZnJlZVNlbGYgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxubW9kdWxlLmV4cG9ydHMgPSByb290O1xuIiwiLyoqIFVzZWQgdG8gc3RhbmQtaW4gZm9yIGB1bmRlZmluZWRgIGhhc2ggdmFsdWVzLiAqL1xudmFyIEhBU0hfVU5ERUZJTkVEID0gJ19fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18nO1xuXG4vKipcbiAqIEFkZHMgYHZhbHVlYCB0byB0aGUgYXJyYXkgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGFkZFxuICogQG1lbWJlck9mIFNldENhY2hlXG4gKiBAYWxpYXMgcHVzaFxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2FjaGUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gc2V0Q2FjaGVBZGQodmFsdWUpIHtcbiAgdGhpcy5fX2RhdGFfXy5zZXQodmFsdWUsIEhBU0hfVU5ERUZJTkVEKTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0Q2FjaGVBZGQ7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGluIHRoZSBhcnJheSBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgU2V0Q2FjaGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIHNldENhY2hlSGFzKHZhbHVlKSB7XG4gIHJldHVybiB0aGlzLl9fZGF0YV9fLmhhcyh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0Q2FjaGVIYXM7XG4iLCIvKipcbiAqIENvbnZlcnRzIGBzZXRgIHRvIGFuIGFycmF5IG9mIGl0cyB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBzZXQgVGhlIHNldCB0byBjb252ZXJ0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB2YWx1ZXMuXG4gKi9cbmZ1bmN0aW9uIHNldFRvQXJyYXkoc2V0KSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgcmVzdWx0ID0gQXJyYXkoc2V0LnNpemUpO1xuXG4gIHNldC5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmVzdWx0WysraW5kZXhdID0gdmFsdWU7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNldFRvQXJyYXk7XG4iLCJ2YXIgYmFzZVNldFRvU3RyaW5nID0gcmVxdWlyZSgnLi9fYmFzZVNldFRvU3RyaW5nJyksXG4gICAgc2hvcnRPdXQgPSByZXF1aXJlKCcuL19zaG9ydE91dCcpO1xuXG4vKipcbiAqIFNldHMgdGhlIGB0b1N0cmluZ2AgbWV0aG9kIG9mIGBmdW5jYCB0byByZXR1cm4gYHN0cmluZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHN0cmluZyBUaGUgYHRvU3RyaW5nYCByZXN1bHQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGZ1bmNgLlxuICovXG52YXIgc2V0VG9TdHJpbmcgPSBzaG9ydE91dChiYXNlU2V0VG9TdHJpbmcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHNldFRvU3RyaW5nO1xuIiwiLyoqIFVzZWQgdG8gZGV0ZWN0IGhvdCBmdW5jdGlvbnMgYnkgbnVtYmVyIG9mIGNhbGxzIHdpdGhpbiBhIHNwYW4gb2YgbWlsbGlzZWNvbmRzLiAqL1xudmFyIEhPVF9DT1VOVCA9IDgwMCxcbiAgICBIT1RfU1BBTiA9IDE2O1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlTm93ID0gRGF0ZS5ub3c7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQnbGwgc2hvcnQgb3V0IGFuZCBpbnZva2UgYGlkZW50aXR5YCBpbnN0ZWFkXG4gKiBvZiBgZnVuY2Agd2hlbiBpdCdzIGNhbGxlZCBgSE9UX0NPVU5UYCBvciBtb3JlIHRpbWVzIGluIGBIT1RfU1BBTmBcbiAqIG1pbGxpc2Vjb25kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcmVzdHJpY3QuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzaG9ydGFibGUgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIHNob3J0T3V0KGZ1bmMpIHtcbiAgdmFyIGNvdW50ID0gMCxcbiAgICAgIGxhc3RDYWxsZWQgPSAwO1xuXG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3RhbXAgPSBuYXRpdmVOb3coKSxcbiAgICAgICAgcmVtYWluaW5nID0gSE9UX1NQQU4gLSAoc3RhbXAgLSBsYXN0Q2FsbGVkKTtcblxuICAgIGxhc3RDYWxsZWQgPSBzdGFtcDtcbiAgICBpZiAocmVtYWluaW5nID4gMCkge1xuICAgICAgaWYgKCsrY291bnQgPj0gSE9UX0NPVU5UKSB7XG4gICAgICAgIHJldHVybiBhcmd1bWVudHNbMF07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvdW50ID0gMDtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmMuYXBwbHkodW5kZWZpbmVkLCBhcmd1bWVudHMpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNob3J0T3V0O1xuIiwidmFyIExpc3RDYWNoZSA9IHJlcXVpcmUoJy4vX0xpc3RDYWNoZScpO1xuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIHN0YWNrLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIFN0YWNrXG4gKi9cbmZ1bmN0aW9uIHN0YWNrQ2xlYXIoKSB7XG4gIHRoaXMuX19kYXRhX18gPSBuZXcgTGlzdENhY2hlO1xuICB0aGlzLnNpemUgPSAwO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0YWNrQ2xlYXI7XG4iLCIvKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBzdGFjay5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBzdGFja0RlbGV0ZShrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgcmVzdWx0ID0gZGF0YVsnZGVsZXRlJ10oa2V5KTtcblxuICB0aGlzLnNpemUgPSBkYXRhLnNpemU7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RhY2tEZWxldGU7XG4iLCIvKipcbiAqIEdldHMgdGhlIHN0YWNrIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBzdGFja0dldChrZXkpIHtcbiAgcmV0dXJuIHRoaXMuX19kYXRhX18uZ2V0KGtleSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RhY2tHZXQ7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBhIHN0YWNrIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIFN0YWNrXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gc3RhY2tIYXMoa2V5KSB7XG4gIHJldHVybiB0aGlzLl9fZGF0YV9fLmhhcyhrZXkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0YWNrSGFzO1xuIiwidmFyIExpc3RDYWNoZSA9IHJlcXVpcmUoJy4vX0xpc3RDYWNoZScpLFxuICAgIE1hcCA9IHJlcXVpcmUoJy4vX01hcCcpLFxuICAgIE1hcENhY2hlID0gcmVxdWlyZSgnLi9fTWFwQ2FjaGUnKTtcblxuLyoqIFVzZWQgYXMgdGhlIHNpemUgdG8gZW5hYmxlIGxhcmdlIGFycmF5IG9wdGltaXphdGlvbnMuICovXG52YXIgTEFSR0VfQVJSQVlfU0laRSA9IDIwMDtcblxuLyoqXG4gKiBTZXRzIHRoZSBzdGFjayBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBzdGFjayBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gc3RhY2tTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIGlmIChkYXRhIGluc3RhbmNlb2YgTGlzdENhY2hlKSB7XG4gICAgdmFyIHBhaXJzID0gZGF0YS5fX2RhdGFfXztcbiAgICBpZiAoIU1hcCB8fCAocGFpcnMubGVuZ3RoIDwgTEFSR0VfQVJSQVlfU0laRSAtIDEpKSB7XG4gICAgICBwYWlycy5wdXNoKFtrZXksIHZhbHVlXSk7XG4gICAgICB0aGlzLnNpemUgPSArK2RhdGEuc2l6ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBkYXRhID0gdGhpcy5fX2RhdGFfXyA9IG5ldyBNYXBDYWNoZShwYWlycyk7XG4gIH1cbiAgZGF0YS5zZXQoa2V5LCB2YWx1ZSk7XG4gIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RhY2tTZXQ7XG4iLCIvKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5pbmRleE9mYCB3aGljaCBwZXJmb3JtcyBzdHJpY3QgZXF1YWxpdHlcbiAqIGNvbXBhcmlzb25zIG9mIHZhbHVlcywgaS5lLiBgPT09YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICogQHBhcmFtIHtudW1iZXJ9IGZyb21JbmRleCBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICovXG5mdW5jdGlvbiBzdHJpY3RJbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KSB7XG4gIHZhciBpbmRleCA9IGZyb21JbmRleCAtIDEsXG4gICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBpZiAoYXJyYXlbaW5kZXhdID09PSB2YWx1ZSkge1xuICAgICAgcmV0dXJuIGluZGV4O1xuICAgIH1cbiAgfVxuICByZXR1cm4gLTE7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RyaWN0SW5kZXhPZjtcbiIsIi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIHJlc29sdmUgdGhlIGRlY29tcGlsZWQgc291cmNlIG9mIGZ1bmN0aW9ucy4gKi9cbnZhciBmdW5jVG9TdHJpbmcgPSBmdW5jUHJvdG8udG9TdHJpbmc7XG5cbi8qKlxuICogQ29udmVydHMgYGZ1bmNgIHRvIGl0cyBzb3VyY2UgY29kZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHNvdXJjZSBjb2RlLlxuICovXG5mdW5jdGlvbiB0b1NvdXJjZShmdW5jKSB7XG4gIGlmIChmdW5jICE9IG51bGwpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGZ1bmNUb1N0cmluZy5jYWxsKGZ1bmMpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiAoZnVuYyArICcnKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICB9XG4gIHJldHVybiAnJztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0b1NvdXJjZTtcbiIsIi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBgdmFsdWVgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMi40LjBcbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byByZXR1cm4gZnJvbSB0aGUgbmV3IGZ1bmN0aW9uLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY29uc3RhbnQgZnVuY3Rpb24uXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3RzID0gXy50aW1lcygyLCBfLmNvbnN0YW50KHsgJ2EnOiAxIH0pKTtcbiAqXG4gKiBjb25zb2xlLmxvZyhvYmplY3RzKTtcbiAqIC8vID0+IFt7ICdhJzogMSB9LCB7ICdhJzogMSB9XVxuICpcbiAqIGNvbnNvbGUubG9nKG9iamVjdHNbMF0gPT09IG9iamVjdHNbMV0pO1xuICogLy8gPT4gdHJ1ZVxuICovXG5mdW5jdGlvbiBjb25zdGFudCh2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnN0YW50O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpLFxuICAgIG5vdyA9IHJlcXVpcmUoJy4vbm93JyksXG4gICAgdG9OdW1iZXIgPSByZXF1aXJlKCcuL3RvTnVtYmVyJyk7XG5cbi8qKiBFcnJvciBtZXNzYWdlIGNvbnN0YW50cy4gKi9cbnZhciBGVU5DX0VSUk9SX1RFWFQgPSAnRXhwZWN0ZWQgYSBmdW5jdGlvbic7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVNYXggPSBNYXRoLm1heCxcbiAgICBuYXRpdmVNaW4gPSBNYXRoLm1pbjtcblxuLyoqXG4gKiBDcmVhdGVzIGEgZGVib3VuY2VkIGZ1bmN0aW9uIHRoYXQgZGVsYXlzIGludm9raW5nIGBmdW5jYCB1bnRpbCBhZnRlciBgd2FpdGBcbiAqIG1pbGxpc2Vjb25kcyBoYXZlIGVsYXBzZWQgc2luY2UgdGhlIGxhc3QgdGltZSB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uIHdhc1xuICogaW52b2tlZC4gVGhlIGRlYm91bmNlZCBmdW5jdGlvbiBjb21lcyB3aXRoIGEgYGNhbmNlbGAgbWV0aG9kIHRvIGNhbmNlbFxuICogZGVsYXllZCBgZnVuY2AgaW52b2NhdGlvbnMgYW5kIGEgYGZsdXNoYCBtZXRob2QgdG8gaW1tZWRpYXRlbHkgaW52b2tlIHRoZW0uXG4gKiBQcm92aWRlIGBvcHRpb25zYCB0byBpbmRpY2F0ZSB3aGV0aGVyIGBmdW5jYCBzaG91bGQgYmUgaW52b2tlZCBvbiB0aGVcbiAqIGxlYWRpbmcgYW5kL29yIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIGB3YWl0YCB0aW1lb3V0LiBUaGUgYGZ1bmNgIGlzIGludm9rZWRcbiAqIHdpdGggdGhlIGxhc3QgYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24uIFN1YnNlcXVlbnRcbiAqIGNhbGxzIHRvIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gcmV0dXJuIHRoZSByZXN1bHQgb2YgdGhlIGxhc3QgYGZ1bmNgXG4gKiBpbnZvY2F0aW9uLlxuICpcbiAqICoqTm90ZToqKiBJZiBgbGVhZGluZ2AgYW5kIGB0cmFpbGluZ2Agb3B0aW9ucyBhcmUgYHRydWVgLCBgZnVuY2AgaXNcbiAqIGludm9rZWQgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQgb25seSBpZiB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uXG4gKiBpcyBpbnZva2VkIG1vcmUgdGhhbiBvbmNlIGR1cmluZyB0aGUgYHdhaXRgIHRpbWVvdXQuXG4gKlxuICogSWYgYHdhaXRgIGlzIGAwYCBhbmQgYGxlYWRpbmdgIGlzIGBmYWxzZWAsIGBmdW5jYCBpbnZvY2F0aW9uIGlzIGRlZmVycmVkXG4gKiB1bnRpbCB0byB0aGUgbmV4dCB0aWNrLCBzaW1pbGFyIHRvIGBzZXRUaW1lb3V0YCB3aXRoIGEgdGltZW91dCBvZiBgMGAuXG4gKlxuICogU2VlIFtEYXZpZCBDb3JiYWNobydzIGFydGljbGVdKGh0dHBzOi8vY3NzLXRyaWNrcy5jb20vZGVib3VuY2luZy10aHJvdHRsaW5nLWV4cGxhaW5lZC1leGFtcGxlcy8pXG4gKiBmb3IgZGV0YWlscyBvdmVyIHRoZSBkaWZmZXJlbmNlcyBiZXR3ZWVuIGBfLmRlYm91bmNlYCBhbmQgYF8udGhyb3R0bGVgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gZGVib3VuY2UuXG4gKiBAcGFyYW0ge251bWJlcn0gW3dhaXQ9MF0gVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gZGVsYXkuXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIFRoZSBvcHRpb25zIG9iamVjdC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMubGVhZGluZz1mYWxzZV1cbiAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSBsZWFkaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMubWF4V2FpdF1cbiAqICBUaGUgbWF4aW11bSB0aW1lIGBmdW5jYCBpcyBhbGxvd2VkIHRvIGJlIGRlbGF5ZWQgYmVmb3JlIGl0J3MgaW52b2tlZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMudHJhaWxpbmc9dHJ1ZV1cbiAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZGVib3VuY2VkIGZ1bmN0aW9uLlxuICogQGV4YW1wbGVcbiAqXG4gKiAvLyBBdm9pZCBjb3N0bHkgY2FsY3VsYXRpb25zIHdoaWxlIHRoZSB3aW5kb3cgc2l6ZSBpcyBpbiBmbHV4LlxuICogalF1ZXJ5KHdpbmRvdykub24oJ3Jlc2l6ZScsIF8uZGVib3VuY2UoY2FsY3VsYXRlTGF5b3V0LCAxNTApKTtcbiAqXG4gKiAvLyBJbnZva2UgYHNlbmRNYWlsYCB3aGVuIGNsaWNrZWQsIGRlYm91bmNpbmcgc3Vic2VxdWVudCBjYWxscy5cbiAqIGpRdWVyeShlbGVtZW50KS5vbignY2xpY2snLCBfLmRlYm91bmNlKHNlbmRNYWlsLCAzMDAsIHtcbiAqICAgJ2xlYWRpbmcnOiB0cnVlLFxuICogICAndHJhaWxpbmcnOiBmYWxzZVxuICogfSkpO1xuICpcbiAqIC8vIEVuc3VyZSBgYmF0Y2hMb2dgIGlzIGludm9rZWQgb25jZSBhZnRlciAxIHNlY29uZCBvZiBkZWJvdW5jZWQgY2FsbHMuXG4gKiB2YXIgZGVib3VuY2VkID0gXy5kZWJvdW5jZShiYXRjaExvZywgMjUwLCB7ICdtYXhXYWl0JzogMTAwMCB9KTtcbiAqIHZhciBzb3VyY2UgPSBuZXcgRXZlbnRTb3VyY2UoJy9zdHJlYW0nKTtcbiAqIGpRdWVyeShzb3VyY2UpLm9uKCdtZXNzYWdlJywgZGVib3VuY2VkKTtcbiAqXG4gKiAvLyBDYW5jZWwgdGhlIHRyYWlsaW5nIGRlYm91bmNlZCBpbnZvY2F0aW9uLlxuICogalF1ZXJ5KHdpbmRvdykub24oJ3BvcHN0YXRlJywgZGVib3VuY2VkLmNhbmNlbCk7XG4gKi9cbmZ1bmN0aW9uIGRlYm91bmNlKGZ1bmMsIHdhaXQsIG9wdGlvbnMpIHtcbiAgdmFyIGxhc3RBcmdzLFxuICAgICAgbGFzdFRoaXMsXG4gICAgICBtYXhXYWl0LFxuICAgICAgcmVzdWx0LFxuICAgICAgdGltZXJJZCxcbiAgICAgIGxhc3RDYWxsVGltZSxcbiAgICAgIGxhc3RJbnZva2VUaW1lID0gMCxcbiAgICAgIGxlYWRpbmcgPSBmYWxzZSxcbiAgICAgIG1heGluZyA9IGZhbHNlLFxuICAgICAgdHJhaWxpbmcgPSB0cnVlO1xuXG4gIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICB9XG4gIHdhaXQgPSB0b051bWJlcih3YWl0KSB8fCAwO1xuICBpZiAoaXNPYmplY3Qob3B0aW9ucykpIHtcbiAgICBsZWFkaW5nID0gISFvcHRpb25zLmxlYWRpbmc7XG4gICAgbWF4aW5nID0gJ21heFdhaXQnIGluIG9wdGlvbnM7XG4gICAgbWF4V2FpdCA9IG1heGluZyA/IG5hdGl2ZU1heCh0b051bWJlcihvcHRpb25zLm1heFdhaXQpIHx8IDAsIHdhaXQpIDogbWF4V2FpdDtcbiAgICB0cmFpbGluZyA9ICd0cmFpbGluZycgaW4gb3B0aW9ucyA/ICEhb3B0aW9ucy50cmFpbGluZyA6IHRyYWlsaW5nO1xuICB9XG5cbiAgZnVuY3Rpb24gaW52b2tlRnVuYyh0aW1lKSB7XG4gICAgdmFyIGFyZ3MgPSBsYXN0QXJncyxcbiAgICAgICAgdGhpc0FyZyA9IGxhc3RUaGlzO1xuXG4gICAgbGFzdEFyZ3MgPSBsYXN0VGhpcyA9IHVuZGVmaW5lZDtcbiAgICBsYXN0SW52b2tlVGltZSA9IHRpbWU7XG4gICAgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgZnVuY3Rpb24gbGVhZGluZ0VkZ2UodGltZSkge1xuICAgIC8vIFJlc2V0IGFueSBgbWF4V2FpdGAgdGltZXIuXG4gICAgbGFzdEludm9rZVRpbWUgPSB0aW1lO1xuICAgIC8vIFN0YXJ0IHRoZSB0aW1lciBmb3IgdGhlIHRyYWlsaW5nIGVkZ2UuXG4gICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCB3YWl0KTtcbiAgICAvLyBJbnZva2UgdGhlIGxlYWRpbmcgZWRnZS5cbiAgICByZXR1cm4gbGVhZGluZyA/IGludm9rZUZ1bmModGltZSkgOiByZXN1bHQ7XG4gIH1cblxuICBmdW5jdGlvbiByZW1haW5pbmdXYWl0KHRpbWUpIHtcbiAgICB2YXIgdGltZVNpbmNlTGFzdENhbGwgPSB0aW1lIC0gbGFzdENhbGxUaW1lLFxuICAgICAgICB0aW1lU2luY2VMYXN0SW52b2tlID0gdGltZSAtIGxhc3RJbnZva2VUaW1lLFxuICAgICAgICB0aW1lV2FpdGluZyA9IHdhaXQgLSB0aW1lU2luY2VMYXN0Q2FsbDtcblxuICAgIHJldHVybiBtYXhpbmdcbiAgICAgID8gbmF0aXZlTWluKHRpbWVXYWl0aW5nLCBtYXhXYWl0IC0gdGltZVNpbmNlTGFzdEludm9rZSlcbiAgICAgIDogdGltZVdhaXRpbmc7XG4gIH1cblxuICBmdW5jdGlvbiBzaG91bGRJbnZva2UodGltZSkge1xuICAgIHZhciB0aW1lU2luY2VMYXN0Q2FsbCA9IHRpbWUgLSBsYXN0Q2FsbFRpbWUsXG4gICAgICAgIHRpbWVTaW5jZUxhc3RJbnZva2UgPSB0aW1lIC0gbGFzdEludm9rZVRpbWU7XG5cbiAgICAvLyBFaXRoZXIgdGhpcyBpcyB0aGUgZmlyc3QgY2FsbCwgYWN0aXZpdHkgaGFzIHN0b3BwZWQgYW5kIHdlJ3JlIGF0IHRoZVxuICAgIC8vIHRyYWlsaW5nIGVkZ2UsIHRoZSBzeXN0ZW0gdGltZSBoYXMgZ29uZSBiYWNrd2FyZHMgYW5kIHdlJ3JlIHRyZWF0aW5nXG4gICAgLy8gaXQgYXMgdGhlIHRyYWlsaW5nIGVkZ2UsIG9yIHdlJ3ZlIGhpdCB0aGUgYG1heFdhaXRgIGxpbWl0LlxuICAgIHJldHVybiAobGFzdENhbGxUaW1lID09PSB1bmRlZmluZWQgfHwgKHRpbWVTaW5jZUxhc3RDYWxsID49IHdhaXQpIHx8XG4gICAgICAodGltZVNpbmNlTGFzdENhbGwgPCAwKSB8fCAobWF4aW5nICYmIHRpbWVTaW5jZUxhc3RJbnZva2UgPj0gbWF4V2FpdCkpO1xuICB9XG5cbiAgZnVuY3Rpb24gdGltZXJFeHBpcmVkKCkge1xuICAgIHZhciB0aW1lID0gbm93KCk7XG4gICAgaWYgKHNob3VsZEludm9rZSh0aW1lKSkge1xuICAgICAgcmV0dXJuIHRyYWlsaW5nRWRnZSh0aW1lKTtcbiAgICB9XG4gICAgLy8gUmVzdGFydCB0aGUgdGltZXIuXG4gICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCByZW1haW5pbmdXYWl0KHRpbWUpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyYWlsaW5nRWRnZSh0aW1lKSB7XG4gICAgdGltZXJJZCA9IHVuZGVmaW5lZDtcblxuICAgIC8vIE9ubHkgaW52b2tlIGlmIHdlIGhhdmUgYGxhc3RBcmdzYCB3aGljaCBtZWFucyBgZnVuY2AgaGFzIGJlZW5cbiAgICAvLyBkZWJvdW5jZWQgYXQgbGVhc3Qgb25jZS5cbiAgICBpZiAodHJhaWxpbmcgJiYgbGFzdEFyZ3MpIHtcbiAgICAgIHJldHVybiBpbnZva2VGdW5jKHRpbWUpO1xuICAgIH1cbiAgICBsYXN0QXJncyA9IGxhc3RUaGlzID0gdW5kZWZpbmVkO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBmdW5jdGlvbiBjYW5jZWwoKSB7XG4gICAgaWYgKHRpbWVySWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRpbWVySWQpO1xuICAgIH1cbiAgICBsYXN0SW52b2tlVGltZSA9IDA7XG4gICAgbGFzdEFyZ3MgPSBsYXN0Q2FsbFRpbWUgPSBsYXN0VGhpcyA9IHRpbWVySWQgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBmdW5jdGlvbiBmbHVzaCgpIHtcbiAgICByZXR1cm4gdGltZXJJZCA9PT0gdW5kZWZpbmVkID8gcmVzdWx0IDogdHJhaWxpbmdFZGdlKG5vdygpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlYm91bmNlZCgpIHtcbiAgICB2YXIgdGltZSA9IG5vdygpLFxuICAgICAgICBpc0ludm9raW5nID0gc2hvdWxkSW52b2tlKHRpbWUpO1xuXG4gICAgbGFzdEFyZ3MgPSBhcmd1bWVudHM7XG4gICAgbGFzdFRoaXMgPSB0aGlzO1xuICAgIGxhc3RDYWxsVGltZSA9IHRpbWU7XG5cbiAgICBpZiAoaXNJbnZva2luZykge1xuICAgICAgaWYgKHRpbWVySWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gbGVhZGluZ0VkZ2UobGFzdENhbGxUaW1lKTtcbiAgICAgIH1cbiAgICAgIGlmIChtYXhpbmcpIHtcbiAgICAgICAgLy8gSGFuZGxlIGludm9jYXRpb25zIGluIGEgdGlnaHQgbG9vcC5cbiAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVySWQpO1xuICAgICAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHdhaXQpO1xuICAgICAgICByZXR1cm4gaW52b2tlRnVuYyhsYXN0Q2FsbFRpbWUpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAodGltZXJJZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHdhaXQpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIGRlYm91bmNlZC5jYW5jZWwgPSBjYW5jZWw7XG4gIGRlYm91bmNlZC5mbHVzaCA9IGZsdXNoO1xuICByZXR1cm4gZGVib3VuY2VkO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRlYm91bmNlO1xuIiwiLyoqXG4gKiBQZXJmb3JtcyBhXG4gKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICogY29tcGFyaXNvbiBiZXR3ZWVuIHR3byB2YWx1ZXMgdG8gZGV0ZXJtaW5lIGlmIHRoZXkgYXJlIGVxdWl2YWxlbnQuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gKiB2YXIgb3RoZXIgPSB7ICdhJzogMSB9O1xuICpcbiAqIF8uZXEob2JqZWN0LCBvYmplY3QpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uZXEob2JqZWN0LCBvdGhlcik7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uZXEoJ2EnLCAnYScpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uZXEoJ2EnLCBPYmplY3QoJ2EnKSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uZXEoTmFOLCBOYU4pO1xuICogLy8gPT4gdHJ1ZVxuICovXG5mdW5jdGlvbiBlcSh2YWx1ZSwgb3RoZXIpIHtcbiAgcmV0dXJuIHZhbHVlID09PSBvdGhlciB8fCAodmFsdWUgIT09IHZhbHVlICYmIG90aGVyICE9PSBvdGhlcik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXE7XG4iLCIvKipcbiAqIFRoaXMgbWV0aG9kIHJldHVybnMgdGhlIGZpcnN0IGFyZ3VtZW50IGl0IHJlY2VpdmVzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBzaW5jZSAwLjEuMFxuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcGFyYW0geyp9IHZhbHVlIEFueSB2YWx1ZS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIGB2YWx1ZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICpcbiAqIGNvbnNvbGUubG9nKF8uaWRlbnRpdHkob2JqZWN0KSA9PT0gb2JqZWN0KTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gaWRlbnRpdHkodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlkZW50aXR5O1xuIiwidmFyIGJhc2VJc0FyZ3VtZW50cyA9IHJlcXVpcmUoJy4vX2Jhc2VJc0FyZ3VtZW50cycpLFxuICAgIGlzT2JqZWN0TGlrZSA9IHJlcXVpcmUoJy4vaXNPYmplY3RMaWtlJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHByb3BlcnR5SXNFbnVtZXJhYmxlID0gb2JqZWN0UHJvdG8ucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGlrZWx5IGFuIGBhcmd1bWVudHNgIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBgYXJndW1lbnRzYCBvYmplY3QsXG4gKiAgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJndW1lbnRzKGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcmd1bWVudHMoWzEsIDIsIDNdKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc0FyZ3VtZW50cyA9IGJhc2VJc0FyZ3VtZW50cyhmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA/IGJhc2VJc0FyZ3VtZW50cyA6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsICdjYWxsZWUnKSAmJlxuICAgICFwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHZhbHVlLCAnY2FsbGVlJyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzQXJndW1lbnRzO1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGFuIGBBcnJheWAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcnJheShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheShkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0FycmF5KCdhYmMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0FycmF5KF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5cbm1vZHVsZS5leHBvcnRzID0gaXNBcnJheTtcbiIsInZhciBpc0Z1bmN0aW9uID0gcmVxdWlyZSgnLi9pc0Z1bmN0aW9uJyksXG4gICAgaXNMZW5ndGggPSByZXF1aXJlKCcuL2lzTGVuZ3RoJyk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYXJyYXktbGlrZS4gQSB2YWx1ZSBpcyBjb25zaWRlcmVkIGFycmF5LWxpa2UgaWYgaXQnc1xuICogbm90IGEgZnVuY3Rpb24gYW5kIGhhcyBhIGB2YWx1ZS5sZW5ndGhgIHRoYXQncyBhbiBpbnRlZ2VyIGdyZWF0ZXIgdGhhbiBvclxuICogZXF1YWwgdG8gYDBgIGFuZCBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gYE51bWJlci5NQVhfU0FGRV9JTlRFR0VSYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoJ2FiYycpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlMaWtlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIGlzTGVuZ3RoKHZhbHVlLmxlbmd0aCkgJiYgIWlzRnVuY3Rpb24odmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzQXJyYXlMaWtlO1xuIiwidmFyIGlzQXJyYXlMaWtlID0gcmVxdWlyZSgnLi9pc0FycmF5TGlrZScpLFxuICAgIGlzT2JqZWN0TGlrZSA9IHJlcXVpcmUoJy4vaXNPYmplY3RMaWtlJyk7XG5cbi8qKlxuICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pc0FycmF5TGlrZWAgZXhjZXB0IHRoYXQgaXQgYWxzbyBjaGVja3MgaWYgYHZhbHVlYFxuICogaXMgYW4gb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5LWxpa2Ugb2JqZWN0LFxuICogIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FycmF5TGlrZU9iamVjdChbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2VPYmplY3QoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZU9iamVjdCgnYWJjJyk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNBcnJheUxpa2VPYmplY3QoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlMaWtlT2JqZWN0KHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGlzQXJyYXlMaWtlKHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0FycmF5TGlrZU9iamVjdDtcbiIsInZhciByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpLFxuICAgIHN0dWJGYWxzZSA9IHJlcXVpcmUoJy4vc3R1YkZhbHNlJyk7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZXhwb3J0c2AuICovXG52YXIgZnJlZUV4cG9ydHMgPSB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyAmJiBleHBvcnRzICYmICFleHBvcnRzLm5vZGVUeXBlICYmIGV4cG9ydHM7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgbW9kdWxlYC4gKi9cbnZhciBmcmVlTW9kdWxlID0gZnJlZUV4cG9ydHMgJiYgdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUgJiYgIW1vZHVsZS5ub2RlVHlwZSAmJiBtb2R1bGU7XG5cbi8qKiBEZXRlY3QgdGhlIHBvcHVsYXIgQ29tbW9uSlMgZXh0ZW5zaW9uIGBtb2R1bGUuZXhwb3J0c2AuICovXG52YXIgbW9kdWxlRXhwb3J0cyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5leHBvcnRzID09PSBmcmVlRXhwb3J0cztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgQnVmZmVyID0gbW9kdWxlRXhwb3J0cyA/IHJvb3QuQnVmZmVyIDogdW5kZWZpbmVkO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlSXNCdWZmZXIgPSBCdWZmZXIgPyBCdWZmZXIuaXNCdWZmZXIgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBidWZmZXIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjMuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBidWZmZXIsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0J1ZmZlcihuZXcgQnVmZmVyKDIpKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQnVmZmVyKG5ldyBVaW50OEFycmF5KDIpKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc0J1ZmZlciA9IG5hdGl2ZUlzQnVmZmVyIHx8IHN0dWJGYWxzZTtcblxubW9kdWxlLmV4cG9ydHMgPSBpc0J1ZmZlcjtcbiIsInZhciBiYXNlSXNFcXVhbCA9IHJlcXVpcmUoJy4vX2Jhc2VJc0VxdWFsJyk7XG5cbi8qKlxuICogUGVyZm9ybXMgYSBkZWVwIGNvbXBhcmlzb24gYmV0d2VlbiB0d28gdmFsdWVzIHRvIGRldGVybWluZSBpZiB0aGV5IGFyZVxuICogZXF1aXZhbGVudC5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBtZXRob2Qgc3VwcG9ydHMgY29tcGFyaW5nIGFycmF5cywgYXJyYXkgYnVmZmVycywgYm9vbGVhbnMsXG4gKiBkYXRlIG9iamVjdHMsIGVycm9yIG9iamVjdHMsIG1hcHMsIG51bWJlcnMsIGBPYmplY3RgIG9iamVjdHMsIHJlZ2V4ZXMsXG4gKiBzZXRzLCBzdHJpbmdzLCBzeW1ib2xzLCBhbmQgdHlwZWQgYXJyYXlzLiBgT2JqZWN0YCBvYmplY3RzIGFyZSBjb21wYXJlZFxuICogYnkgdGhlaXIgb3duLCBub3QgaW5oZXJpdGVkLCBlbnVtZXJhYmxlIHByb3BlcnRpZXMuIEZ1bmN0aW9ucyBhbmQgRE9NXG4gKiBub2RlcyBhcmUgY29tcGFyZWQgYnkgc3RyaWN0IGVxdWFsaXR5LCBpLmUuIGA9PT1gLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICogdmFyIG90aGVyID0geyAnYSc6IDEgfTtcbiAqXG4gKiBfLmlzRXF1YWwob2JqZWN0LCBvdGhlcik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogb2JqZWN0ID09PSBvdGhlcjtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRXF1YWwodmFsdWUsIG90aGVyKSB7XG4gIHJldHVybiBiYXNlSXNFcXVhbCh2YWx1ZSwgb3RoZXIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzRXF1YWw7XG4iLCJ2YXIgYmFzZUdldFRhZyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRUYWcnKSxcbiAgICBpc09iamVjdCA9IHJlcXVpcmUoJy4vaXNPYmplY3QnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFzeW5jVGFnID0gJ1tvYmplY3QgQXN5bmNGdW5jdGlvbl0nLFxuICAgIGZ1bmNUYWcgPSAnW29iamVjdCBGdW5jdGlvbl0nLFxuICAgIGdlblRhZyA9ICdbb2JqZWN0IEdlbmVyYXRvckZ1bmN0aW9uXScsXG4gICAgcHJveHlUYWcgPSAnW29iamVjdCBQcm94eV0nO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgRnVuY3Rpb25gIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGZ1bmN0aW9uLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNGdW5jdGlvbihfKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzRnVuY3Rpb24oL2FiYy8pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSkge1xuICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvLyBUaGUgdXNlIG9mIGBPYmplY3QjdG9TdHJpbmdgIGF2b2lkcyBpc3N1ZXMgd2l0aCB0aGUgYHR5cGVvZmAgb3BlcmF0b3JcbiAgLy8gaW4gU2FmYXJpIDkgd2hpY2ggcmV0dXJucyAnb2JqZWN0JyBmb3IgdHlwZWQgYXJyYXlzIGFuZCBvdGhlciBjb25zdHJ1Y3RvcnMuXG4gIHZhciB0YWcgPSBiYXNlR2V0VGFnKHZhbHVlKTtcbiAgcmV0dXJuIHRhZyA9PSBmdW5jVGFnIHx8IHRhZyA9PSBnZW5UYWcgfHwgdGFnID09IGFzeW5jVGFnIHx8IHRhZyA9PSBwcm94eVRhZztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0Z1bmN0aW9uO1xuIiwiLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgTUFYX1NBRkVfSU5URUdFUiA9IDkwMDcxOTkyNTQ3NDA5OTE7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBhcnJheS1saWtlIGxlbmd0aC5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgbG9vc2VseSBiYXNlZCBvblxuICogW2BUb0xlbmd0aGBdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXRvbGVuZ3RoKS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGxlbmd0aCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzTGVuZ3RoKDMpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNMZW5ndGgoTnVtYmVyLk1JTl9WQUxVRSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNMZW5ndGgoSW5maW5pdHkpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzTGVuZ3RoKCczJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0xlbmd0aCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdudW1iZXInICYmXG4gICAgdmFsdWUgPiAtMSAmJiB2YWx1ZSAlIDEgPT0gMCAmJiB2YWx1ZSA8PSBNQVhfU0FGRV9JTlRFR0VSO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzTGVuZ3RoO1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyB0aGVcbiAqIFtsYW5ndWFnZSB0eXBlXShodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtZWNtYXNjcmlwdC1sYW5ndWFnZS10eXBlcylcbiAqIG9mIGBPYmplY3RgLiAoZS5nLiBhcnJheXMsIGZ1bmN0aW9ucywgb2JqZWN0cywgcmVnZXhlcywgYG5ldyBOdW1iZXIoMClgLCBhbmQgYG5ldyBTdHJpbmcoJycpYClcbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdCh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoXy5ub29wKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmICh0eXBlID09ICdvYmplY3QnIHx8IHR5cGUgPT0gJ2Z1bmN0aW9uJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNPYmplY3Q7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLiBBIHZhbHVlIGlzIG9iamVjdC1saWtlIGlmIGl0J3Mgbm90IGBudWxsYFxuICogYW5kIGhhcyBhIGB0eXBlb2ZgIHJlc3VsdCBvZiBcIm9iamVjdFwiLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3RMaWtlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc09iamVjdExpa2U7XG4iLCJ2YXIgYmFzZUdldFRhZyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRUYWcnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgc3ltYm9sVGFnID0gJ1tvYmplY3QgU3ltYm9sXSc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBTeW1ib2xgIHByaW1pdGl2ZSBvciBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzeW1ib2wsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc1N5bWJvbChTeW1ib2wuaXRlcmF0b3IpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNTeW1ib2woJ2FiYycpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTeW1ib2wodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnc3ltYm9sJyB8fFxuICAgIChpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IHN5bWJvbFRhZyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNTeW1ib2w7XG4iLCJ2YXIgYmFzZUlzVHlwZWRBcnJheSA9IHJlcXVpcmUoJy4vX2Jhc2VJc1R5cGVkQXJyYXknKSxcbiAgICBiYXNlVW5hcnkgPSByZXF1aXJlKCcuL19iYXNlVW5hcnknKSxcbiAgICBub2RlVXRpbCA9IHJlcXVpcmUoJy4vX25vZGVVdGlsJyk7XG5cbi8qIE5vZGUuanMgaGVscGVyIHJlZmVyZW5jZXMuICovXG52YXIgbm9kZUlzVHlwZWRBcnJheSA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzVHlwZWRBcnJheTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgdHlwZWQgYXJyYXkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB0eXBlZCBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzVHlwZWRBcnJheShuZXcgVWludDhBcnJheSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1R5cGVkQXJyYXkoW10pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzVHlwZWRBcnJheSA9IG5vZGVJc1R5cGVkQXJyYXkgPyBiYXNlVW5hcnkobm9kZUlzVHlwZWRBcnJheSkgOiBiYXNlSXNUeXBlZEFycmF5O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzVHlwZWRBcnJheTtcbiIsInZhciBhcnJheUxpa2VLZXlzID0gcmVxdWlyZSgnLi9fYXJyYXlMaWtlS2V5cycpLFxuICAgIGJhc2VLZXlzID0gcmVxdWlyZSgnLi9fYmFzZUtleXMnKSxcbiAgICBpc0FycmF5TGlrZSA9IHJlcXVpcmUoJy4vaXNBcnJheUxpa2UnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiBgb2JqZWN0YC5cbiAqXG4gKiAqKk5vdGU6KiogTm9uLW9iamVjdCB2YWx1ZXMgYXJlIGNvZXJjZWQgdG8gb2JqZWN0cy4gU2VlIHRoZVxuICogW0VTIHNwZWNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5rZXlzKVxuICogZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBGb28oKSB7XG4gKiAgIHRoaXMuYSA9IDE7XG4gKiAgIHRoaXMuYiA9IDI7XG4gKiB9XG4gKlxuICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAqXG4gKiBfLmtleXMobmV3IEZvbyk7XG4gKiAvLyA9PiBbJ2EnLCAnYiddIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gKlxuICogXy5rZXlzKCdoaScpO1xuICogLy8gPT4gWycwJywgJzEnXVxuICovXG5mdW5jdGlvbiBrZXlzKG9iamVjdCkge1xuICByZXR1cm4gaXNBcnJheUxpa2Uob2JqZWN0KSA/IGFycmF5TGlrZUtleXMob2JqZWN0KSA6IGJhc2VLZXlzKG9iamVjdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ga2V5cztcbiIsIi8qKlxuICogVGhpcyBtZXRob2QgcmV0dXJucyBgdW5kZWZpbmVkYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDIuMy4wXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRpbWVzKDIsIF8ubm9vcCk7XG4gKiAvLyA9PiBbdW5kZWZpbmVkLCB1bmRlZmluZWRdXG4gKi9cbmZ1bmN0aW9uIG5vb3AoKSB7XG4gIC8vIE5vIG9wZXJhdGlvbiBwZXJmb3JtZWQuXG59XG5cbm1vZHVsZS5leHBvcnRzID0gbm9vcDtcbiIsInZhciByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKipcbiAqIEdldHMgdGhlIHRpbWVzdGFtcCBvZiB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0aGF0IGhhdmUgZWxhcHNlZCBzaW5jZVxuICogdGhlIFVuaXggZXBvY2ggKDEgSmFudWFyeSAxOTcwIDAwOjAwOjAwIFVUQykuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAyLjQuMFxuICogQGNhdGVnb3J5IERhdGVcbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHRpbWVzdGFtcC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5kZWZlcihmdW5jdGlvbihzdGFtcCkge1xuICogICBjb25zb2xlLmxvZyhfLm5vdygpIC0gc3RhbXApO1xuICogfSwgXy5ub3coKSk7XG4gKiAvLyA9PiBMb2dzIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGl0IHRvb2sgZm9yIHRoZSBkZWZlcnJlZCBpbnZvY2F0aW9uLlxuICovXG52YXIgbm93ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiByb290LkRhdGUubm93KCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5vdztcbiIsIi8qKlxuICogVGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBlbXB0eSBhcnJheS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMTMuMFxuICogQGNhdGVnb3J5IFV0aWxcbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGVtcHR5IGFycmF5LlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgYXJyYXlzID0gXy50aW1lcygyLCBfLnN0dWJBcnJheSk7XG4gKlxuICogY29uc29sZS5sb2coYXJyYXlzKTtcbiAqIC8vID0+IFtbXSwgW11dXG4gKlxuICogY29uc29sZS5sb2coYXJyYXlzWzBdID09PSBhcnJheXNbMV0pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gc3R1YkFycmF5KCkge1xuICByZXR1cm4gW107XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3R1YkFycmF5O1xuIiwiLyoqXG4gKiBUaGlzIG1ldGhvZCByZXR1cm5zIGBmYWxzZWAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjEzLjBcbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRpbWVzKDIsIF8uc3R1YkZhbHNlKTtcbiAqIC8vID0+IFtmYWxzZSwgZmFsc2VdXG4gKi9cbmZ1bmN0aW9uIHN0dWJGYWxzZSgpIHtcbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0dWJGYWxzZTtcbiIsInZhciBkZWJvdW5jZSA9IHJlcXVpcmUoJy4vZGVib3VuY2UnKSxcbiAgICBpc09iamVjdCA9IHJlcXVpcmUoJy4vaXNPYmplY3QnKTtcblxuLyoqIEVycm9yIG1lc3NhZ2UgY29uc3RhbnRzLiAqL1xudmFyIEZVTkNfRVJST1JfVEVYVCA9ICdFeHBlY3RlZCBhIGZ1bmN0aW9uJztcblxuLyoqXG4gKiBDcmVhdGVzIGEgdGhyb3R0bGVkIGZ1bmN0aW9uIHRoYXQgb25seSBpbnZva2VzIGBmdW5jYCBhdCBtb3N0IG9uY2UgcGVyXG4gKiBldmVyeSBgd2FpdGAgbWlsbGlzZWNvbmRzLiBUaGUgdGhyb3R0bGVkIGZ1bmN0aW9uIGNvbWVzIHdpdGggYSBgY2FuY2VsYFxuICogbWV0aG9kIHRvIGNhbmNlbCBkZWxheWVkIGBmdW5jYCBpbnZvY2F0aW9ucyBhbmQgYSBgZmx1c2hgIG1ldGhvZCB0b1xuICogaW1tZWRpYXRlbHkgaW52b2tlIHRoZW0uIFByb3ZpZGUgYG9wdGlvbnNgIHRvIGluZGljYXRlIHdoZXRoZXIgYGZ1bmNgXG4gKiBzaG91bGQgYmUgaW52b2tlZCBvbiB0aGUgbGVhZGluZyBhbmQvb3IgdHJhaWxpbmcgZWRnZSBvZiB0aGUgYHdhaXRgXG4gKiB0aW1lb3V0LiBUaGUgYGZ1bmNgIGlzIGludm9rZWQgd2l0aCB0aGUgbGFzdCBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlXG4gKiB0aHJvdHRsZWQgZnVuY3Rpb24uIFN1YnNlcXVlbnQgY2FsbHMgdG8gdGhlIHRocm90dGxlZCBmdW5jdGlvbiByZXR1cm4gdGhlXG4gKiByZXN1bHQgb2YgdGhlIGxhc3QgYGZ1bmNgIGludm9jYXRpb24uXG4gKlxuICogKipOb3RlOioqIElmIGBsZWFkaW5nYCBhbmQgYHRyYWlsaW5nYCBvcHRpb25zIGFyZSBgdHJ1ZWAsIGBmdW5jYCBpc1xuICogaW52b2tlZCBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dCBvbmx5IGlmIHRoZSB0aHJvdHRsZWQgZnVuY3Rpb25cbiAqIGlzIGludm9rZWQgbW9yZSB0aGFuIG9uY2UgZHVyaW5nIHRoZSBgd2FpdGAgdGltZW91dC5cbiAqXG4gKiBJZiBgd2FpdGAgaXMgYDBgIGFuZCBgbGVhZGluZ2AgaXMgYGZhbHNlYCwgYGZ1bmNgIGludm9jYXRpb24gaXMgZGVmZXJyZWRcbiAqIHVudGlsIHRvIHRoZSBuZXh0IHRpY2ssIHNpbWlsYXIgdG8gYHNldFRpbWVvdXRgIHdpdGggYSB0aW1lb3V0IG9mIGAwYC5cbiAqXG4gKiBTZWUgW0RhdmlkIENvcmJhY2hvJ3MgYXJ0aWNsZV0oaHR0cHM6Ly9jc3MtdHJpY2tzLmNvbS9kZWJvdW5jaW5nLXRocm90dGxpbmctZXhwbGFpbmVkLWV4YW1wbGVzLylcbiAqIGZvciBkZXRhaWxzIG92ZXIgdGhlIGRpZmZlcmVuY2VzIGJldHdlZW4gYF8udGhyb3R0bGVgIGFuZCBgXy5kZWJvdW5jZWAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB0aHJvdHRsZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbd2FpdD0wXSBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byB0aHJvdHRsZSBpbnZvY2F0aW9ucyB0by5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5sZWFkaW5nPXRydWVdXG4gKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgbGVhZGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy50cmFpbGluZz10cnVlXVxuICogIFNwZWNpZnkgaW52b2tpbmcgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB0aHJvdHRsZWQgZnVuY3Rpb24uXG4gKiBAZXhhbXBsZVxuICpcbiAqIC8vIEF2b2lkIGV4Y2Vzc2l2ZWx5IHVwZGF0aW5nIHRoZSBwb3NpdGlvbiB3aGlsZSBzY3JvbGxpbmcuXG4gKiBqUXVlcnkod2luZG93KS5vbignc2Nyb2xsJywgXy50aHJvdHRsZSh1cGRhdGVQb3NpdGlvbiwgMTAwKSk7XG4gKlxuICogLy8gSW52b2tlIGByZW5ld1Rva2VuYCB3aGVuIHRoZSBjbGljayBldmVudCBpcyBmaXJlZCwgYnV0IG5vdCBtb3JlIHRoYW4gb25jZSBldmVyeSA1IG1pbnV0ZXMuXG4gKiB2YXIgdGhyb3R0bGVkID0gXy50aHJvdHRsZShyZW5ld1Rva2VuLCAzMDAwMDAsIHsgJ3RyYWlsaW5nJzogZmFsc2UgfSk7XG4gKiBqUXVlcnkoZWxlbWVudCkub24oJ2NsaWNrJywgdGhyb3R0bGVkKTtcbiAqXG4gKiAvLyBDYW5jZWwgdGhlIHRyYWlsaW5nIHRocm90dGxlZCBpbnZvY2F0aW9uLlxuICogalF1ZXJ5KHdpbmRvdykub24oJ3BvcHN0YXRlJywgdGhyb3R0bGVkLmNhbmNlbCk7XG4gKi9cbmZ1bmN0aW9uIHRocm90dGxlKGZ1bmMsIHdhaXQsIG9wdGlvbnMpIHtcbiAgdmFyIGxlYWRpbmcgPSB0cnVlLFxuICAgICAgdHJhaWxpbmcgPSB0cnVlO1xuXG4gIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICB9XG4gIGlmIChpc09iamVjdChvcHRpb25zKSkge1xuICAgIGxlYWRpbmcgPSAnbGVhZGluZycgaW4gb3B0aW9ucyA/ICEhb3B0aW9ucy5sZWFkaW5nIDogbGVhZGluZztcbiAgICB0cmFpbGluZyA9ICd0cmFpbGluZycgaW4gb3B0aW9ucyA/ICEhb3B0aW9ucy50cmFpbGluZyA6IHRyYWlsaW5nO1xuICB9XG4gIHJldHVybiBkZWJvdW5jZShmdW5jLCB3YWl0LCB7XG4gICAgJ2xlYWRpbmcnOiBsZWFkaW5nLFxuICAgICdtYXhXYWl0Jzogd2FpdCxcbiAgICAndHJhaWxpbmcnOiB0cmFpbGluZ1xuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0aHJvdHRsZTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vaXNPYmplY3QnKSxcbiAgICBpc1N5bWJvbCA9IHJlcXVpcmUoJy4vaXNTeW1ib2wnKTtcblxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgTkFOID0gMCAvIDA7XG5cbi8qKiBVc2VkIHRvIG1hdGNoIGxlYWRpbmcgYW5kIHRyYWlsaW5nIHdoaXRlc3BhY2UuICovXG52YXIgcmVUcmltID0gL15cXHMrfFxccyskL2c7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBiYWQgc2lnbmVkIGhleGFkZWNpbWFsIHN0cmluZyB2YWx1ZXMuICovXG52YXIgcmVJc0JhZEhleCA9IC9eWy0rXTB4WzAtOWEtZl0rJC9pO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgYmluYXJ5IHN0cmluZyB2YWx1ZXMuICovXG52YXIgcmVJc0JpbmFyeSA9IC9eMGJbMDFdKyQvaTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG9jdGFsIHN0cmluZyB2YWx1ZXMuICovXG52YXIgcmVJc09jdGFsID0gL14wb1swLTddKyQvaTtcblxuLyoqIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHdpdGhvdXQgYSBkZXBlbmRlbmN5IG9uIGByb290YC4gKi9cbnZhciBmcmVlUGFyc2VJbnQgPSBwYXJzZUludDtcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgbnVtYmVyLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgbnVtYmVyLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRvTnVtYmVyKDMuMik7XG4gKiAvLyA9PiAzLjJcbiAqXG4gKiBfLnRvTnVtYmVyKE51bWJlci5NSU5fVkFMVUUpO1xuICogLy8gPT4gNWUtMzI0XG4gKlxuICogXy50b051bWJlcihJbmZpbml0eSk7XG4gKiAvLyA9PiBJbmZpbml0eVxuICpcbiAqIF8udG9OdW1iZXIoJzMuMicpO1xuICogLy8gPT4gMy4yXG4gKi9cbmZ1bmN0aW9uIHRvTnVtYmVyKHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgaWYgKGlzU3ltYm9sKHZhbHVlKSkge1xuICAgIHJldHVybiBOQU47XG4gIH1cbiAgaWYgKGlzT2JqZWN0KHZhbHVlKSkge1xuICAgIHZhciBvdGhlciA9IHR5cGVvZiB2YWx1ZS52YWx1ZU9mID09ICdmdW5jdGlvbicgPyB2YWx1ZS52YWx1ZU9mKCkgOiB2YWx1ZTtcbiAgICB2YWx1ZSA9IGlzT2JqZWN0KG90aGVyKSA/IChvdGhlciArICcnKSA6IG90aGVyO1xuICB9XG4gIGlmICh0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IDAgPyB2YWx1ZSA6ICt2YWx1ZTtcbiAgfVxuICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UocmVUcmltLCAnJyk7XG4gIHZhciBpc0JpbmFyeSA9IHJlSXNCaW5hcnkudGVzdCh2YWx1ZSk7XG4gIHJldHVybiAoaXNCaW5hcnkgfHwgcmVJc09jdGFsLnRlc3QodmFsdWUpKVxuICAgID8gZnJlZVBhcnNlSW50KHZhbHVlLnNsaWNlKDIpLCBpc0JpbmFyeSA/IDIgOiA4KVxuICAgIDogKHJlSXNCYWRIZXgudGVzdCh2YWx1ZSkgPyBOQU4gOiArdmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRvTnVtYmVyO1xuIiwidmFyIGJhc2VGbGF0dGVuID0gcmVxdWlyZSgnLi9fYmFzZUZsYXR0ZW4nKSxcbiAgICBiYXNlUmVzdCA9IHJlcXVpcmUoJy4vX2Jhc2VSZXN0JyksXG4gICAgYmFzZVVuaXEgPSByZXF1aXJlKCcuL19iYXNlVW5pcScpLFxuICAgIGlzQXJyYXlMaWtlT2JqZWN0ID0gcmVxdWlyZSgnLi9pc0FycmF5TGlrZU9iamVjdCcpO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdW5pcXVlIHZhbHVlcywgaW4gb3JkZXIsIGZyb20gYWxsIGdpdmVuIGFycmF5cyB1c2luZ1xuICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgQXJyYXlcbiAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGNvbWJpbmVkIHZhbHVlcy5cbiAqIEBleGFtcGxlXG4gKlxuICogXy51bmlvbihbMl0sIFsxLCAyXSk7XG4gKiAvLyA9PiBbMiwgMV1cbiAqL1xudmFyIHVuaW9uID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gIHJldHVybiBiYXNlVW5pcShiYXNlRmxhdHRlbihhcnJheXMsIDEsIGlzQXJyYXlMaWtlT2JqZWN0LCB0cnVlKSk7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSB1bmlvbjtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9zcmMvbm9ybWFsaXplV2hlZWwuanMnKTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIEV4ZWN1dGlvbkVudmlyb25tZW50XG4gKi9cblxuLypqc2xpbnQgZXZpbDogdHJ1ZSAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBjYW5Vc2VET00gPSAhIShcbiAgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgd2luZG93LmRvY3VtZW50ICYmXG4gIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50XG4pO1xuXG4vKipcbiAqIFNpbXBsZSwgbGlnaHR3ZWlnaHQgbW9kdWxlIGFzc2lzdGluZyB3aXRoIHRoZSBkZXRlY3Rpb24gYW5kIGNvbnRleHQgb2ZcbiAqIFdvcmtlci4gSGVscHMgYXZvaWQgY2lyY3VsYXIgZGVwZW5kZW5jaWVzIGFuZCBhbGxvd3MgY29kZSB0byByZWFzb24gYWJvdXRcbiAqIHdoZXRoZXIgb3Igbm90IHRoZXkgYXJlIGluIGEgV29ya2VyLCBldmVuIGlmIHRoZXkgbmV2ZXIgaW5jbHVkZSB0aGUgbWFpblxuICogYFJlYWN0V29ya2VyYCBkZXBlbmRlbmN5LlxuICovXG52YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSB7XG5cbiAgY2FuVXNlRE9NOiBjYW5Vc2VET00sXG5cbiAgY2FuVXNlV29ya2VyczogdHlwZW9mIFdvcmtlciAhPT0gJ3VuZGVmaW5lZCcsXG5cbiAgY2FuVXNlRXZlbnRMaXN0ZW5lcnM6XG4gICAgY2FuVXNlRE9NICYmICEhKHdpbmRvdy5hZGRFdmVudExpc3RlbmVyIHx8IHdpbmRvdy5hdHRhY2hFdmVudCksXG5cbiAgY2FuVXNlVmlld3BvcnQ6IGNhblVzZURPTSAmJiAhIXdpbmRvdy5zY3JlZW4sXG5cbiAgaXNJbldvcmtlcjogIWNhblVzZURPTSAvLyBGb3Igbm93LCB0aGlzIGlzIHRydWUgLSBtaWdodCBjaGFuZ2UgaW4gdGhlIGZ1dHVyZS5cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBFeGVjdXRpb25FbnZpcm9ubWVudDtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMDQtcHJlc2VudCBGYWNlYm9vay4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgVXNlckFnZW50X0RFUFJFQ0FURURcbiAqL1xuXG4vKipcbiAqICBQcm92aWRlcyBlbnRpcmVseSBjbGllbnQtc2lkZSBVc2VyIEFnZW50IGFuZCBPUyBkZXRlY3Rpb24uIFlvdSBzaG91bGQgcHJlZmVyXG4gKiAgdGhlIG5vbi1kZXByZWNhdGVkIFVzZXJBZ2VudCBtb2R1bGUgd2hlbiBwb3NzaWJsZSwgd2hpY2ggZXhwb3NlcyBvdXJcbiAqICBhdXRob3JpdGF0aXZlIHNlcnZlci1zaWRlIFBIUC1iYXNlZCBkZXRlY3Rpb24gdG8gdGhlIGNsaWVudC5cbiAqXG4gKiAgVXNhZ2UgaXMgc3RyYWlnaHRmb3J3YXJkOlxuICpcbiAqICAgIGlmIChVc2VyQWdlbnRfREVQUkVDQVRFRC5pZSgpKSB7XG4gKiAgICAgIC8vICBJRVxuICogICAgfVxuICpcbiAqICBZb3UgY2FuIGFsc28gZG8gdmVyc2lvbiBjaGVja3M6XG4gKlxuICogICAgaWYgKFVzZXJBZ2VudF9ERVBSRUNBVEVELmllKCkgPj0gNykge1xuICogICAgICAvLyAgSUU3IG9yIGJldHRlclxuICogICAgfVxuICpcbiAqICBUaGUgYnJvd3NlciBmdW5jdGlvbnMgd2lsbCByZXR1cm4gTmFOIGlmIHRoZSBicm93c2VyIGRvZXMgbm90IG1hdGNoLCBzb1xuICogIHlvdSBjYW4gYWxzbyBkbyB2ZXJzaW9uIGNvbXBhcmVzIHRoZSBvdGhlciB3YXk6XG4gKlxuICogICAgaWYgKFVzZXJBZ2VudF9ERVBSRUNBVEVELmllKCkgPCA3KSB7XG4gKiAgICAgIC8vICBJRTYgb3Igd29yc2VcbiAqICAgIH1cbiAqXG4gKiAgTm90ZSB0aGF0IHRoZSB2ZXJzaW9uIGlzIGEgZmxvYXQgYW5kIG1heSBpbmNsdWRlIGEgbWlub3IgdmVyc2lvbiBudW1iZXIsXG4gKiAgc28geW91IHNob3VsZCBhbHdheXMgdXNlIHJhbmdlIG9wZXJhdG9ycyB0byBwZXJmb3JtIGNvbXBhcmlzb25zLCBub3RcbiAqICBzdHJpY3QgZXF1YWxpdHkuXG4gKlxuICogICoqTm90ZToqKiBZb3Ugc2hvdWxkICoqc3Ryb25nbHkqKiBwcmVmZXIgY2FwYWJpbGl0eSBkZXRlY3Rpb24gdG8gYnJvd3NlclxuICogIHZlcnNpb24gZGV0ZWN0aW9uIHdoZXJlIGl0J3MgcmVhc29uYWJsZTpcbiAqXG4gKiAgICBodHRwOi8vd3d3LnF1aXJrc21vZGUub3JnL2pzL3N1cHBvcnQuaHRtbFxuICpcbiAqICBGdXJ0aGVyLCB3ZSBoYXZlIGEgbGFyZ2UgbnVtYmVyIG9mIG1hdHVyZSB3cmFwcGVyIGZ1bmN0aW9ucyBhbmQgY2xhc3Nlc1xuICogIHdoaWNoIGFic3RyYWN0IGF3YXkgbWFueSBicm93c2VyIGlycmVndWxhcml0aWVzLiBDaGVjayB0aGUgZG9jdW1lbnRhdGlvbixcbiAqICBncmVwIGZvciB0aGluZ3MsIG9yIGFzayBvbiBqYXZhc2NyaXB0QGxpc3RzLmZhY2Vib29rLmNvbSBiZWZvcmUgd3JpdGluZyB5ZXRcbiAqICBhbm90aGVyIGNvcHkgb2YgXCJldmVudCB8fCB3aW5kb3cuZXZlbnRcIi5cbiAqXG4gKi9cblxudmFyIF9wb3B1bGF0ZWQgPSBmYWxzZTtcblxuLy8gQnJvd3NlcnNcbnZhciBfaWUsIF9maXJlZm94LCBfb3BlcmEsIF93ZWJraXQsIF9jaHJvbWU7XG5cbi8vIEFjdHVhbCBJRSBicm93c2VyIGZvciBjb21wYXRpYmlsaXR5IG1vZGVcbnZhciBfaWVfcmVhbF92ZXJzaW9uO1xuXG4vLyBQbGF0Zm9ybXNcbnZhciBfb3N4LCBfd2luZG93cywgX2xpbnV4LCBfYW5kcm9pZDtcblxuLy8gQXJjaGl0ZWN0dXJlc1xudmFyIF93aW42NDtcblxuLy8gRGV2aWNlc1xudmFyIF9pcGhvbmUsIF9pcGFkLCBfbmF0aXZlO1xuXG52YXIgX21vYmlsZTtcblxuZnVuY3Rpb24gX3BvcHVsYXRlKCkge1xuICBpZiAoX3BvcHVsYXRlZCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIF9wb3B1bGF0ZWQgPSB0cnVlO1xuXG4gIC8vIFRvIHdvcmsgYXJvdW5kIGJ1Z2d5IEpTIGxpYnJhcmllcyB0aGF0IGNhbid0IGhhbmRsZSBtdWx0aS1kaWdpdFxuICAvLyB2ZXJzaW9uIG51bWJlcnMsIE9wZXJhIDEwJ3MgdXNlciBhZ2VudCBzdHJpbmcgY2xhaW1zIGl0J3MgT3BlcmFcbiAgLy8gOSwgdGhlbiBsYXRlciBpbmNsdWRlcyBhIFZlcnNpb24vWC5ZIGZpZWxkOlxuICAvL1xuICAvLyBPcGVyYS85LjgwIChmb28pIFByZXN0by8yLjIuMTUgVmVyc2lvbi8xMC4xMFxuICB2YXIgdWFzID0gbmF2aWdhdG9yLnVzZXJBZ2VudDtcbiAgdmFyIGFnZW50ID0gLyg/Ok1TSUUuKFxcZCtcXC5cXGQrKSl8KD86KD86RmlyZWZveHxHcmFuUGFyYWRpc298SWNld2Vhc2VsKS4oXFxkK1xcLlxcZCspKXwoPzpPcGVyYSg/Oi4rVmVyc2lvbi58LikoXFxkK1xcLlxcZCspKXwoPzpBcHBsZVdlYktpdC4oXFxkKyg/OlxcLlxcZCspPykpfCg/OlRyaWRlbnRcXC9cXGQrXFwuXFxkKy4qcnY6KFxcZCtcXC5cXGQrKSkvLmV4ZWModWFzKTtcbiAgdmFyIG9zICAgID0gLyhNYWMgT1MgWCl8KFdpbmRvd3MpfChMaW51eCkvLmV4ZWModWFzKTtcblxuICBfaXBob25lID0gL1xcYihpUGhvbmV8aVBbYW9dZCkvLmV4ZWModWFzKTtcbiAgX2lwYWQgPSAvXFxiKGlQW2FvXWQpLy5leGVjKHVhcyk7XG4gIF9hbmRyb2lkID0gL0FuZHJvaWQvaS5leGVjKHVhcyk7XG4gIF9uYXRpdmUgPSAvRkJBTlxcL1xcdys7L2kuZXhlYyh1YXMpO1xuICBfbW9iaWxlID0gL01vYmlsZS9pLmV4ZWModWFzKTtcblxuICAvLyBOb3RlIHRoYXQgdGhlIElFIHRlYW0gYmxvZyB3b3VsZCBoYXZlIHlvdSBiZWxpZXZlIHlvdSBzaG91bGQgYmUgY2hlY2tpbmdcbiAgLy8gZm9yICdXaW42NDsgeDY0Jy4gIEJ1dCBNU0ROIHRoZW4gcmV2ZWFscyB0aGF0IHlvdSBjYW4gYWN0dWFsbHkgYmUgY29taW5nXG4gIC8vIGZyb20gZWl0aGVyIHg2NCBvciBpYTY0OyAgc28gdWx0aW1hdGVseSwgeW91IHNob3VsZCBqdXN0IGNoZWNrIGZvciBXaW42NFxuICAvLyBhcyBpbiBpbmRpY2F0b3Igb2Ygd2hldGhlciB5b3UncmUgaW4gNjQtYml0IElFLiAgMzItYml0IElFIG9uIDY0LWJpdFxuICAvLyBXaW5kb3dzIHdpbGwgc2VuZCAnV09XNjQnIGluc3RlYWQuXG4gIF93aW42NCA9ICEhKC9XaW42NC8uZXhlYyh1YXMpKTtcblxuICBpZiAoYWdlbnQpIHtcbiAgICBfaWUgPSBhZ2VudFsxXSA/IHBhcnNlRmxvYXQoYWdlbnRbMV0pIDogKFxuICAgICAgICAgIGFnZW50WzVdID8gcGFyc2VGbG9hdChhZ2VudFs1XSkgOiBOYU4pO1xuICAgIC8vIElFIGNvbXBhdGliaWxpdHkgbW9kZVxuICAgIGlmIChfaWUgJiYgZG9jdW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRNb2RlKSB7XG4gICAgICBfaWUgPSBkb2N1bWVudC5kb2N1bWVudE1vZGU7XG4gICAgfVxuICAgIC8vIGdyYWIgdGhlIFwidHJ1ZVwiIGllIHZlcnNpb24gZnJvbSB0aGUgdHJpZGVudCB0b2tlbiBpZiBhdmFpbGFibGVcbiAgICB2YXIgdHJpZGVudCA9IC8oPzpUcmlkZW50XFwvKFxcZCsuXFxkKykpLy5leGVjKHVhcyk7XG4gICAgX2llX3JlYWxfdmVyc2lvbiA9IHRyaWRlbnQgPyBwYXJzZUZsb2F0KHRyaWRlbnRbMV0pICsgNCA6IF9pZTtcblxuICAgIF9maXJlZm94ID0gYWdlbnRbMl0gPyBwYXJzZUZsb2F0KGFnZW50WzJdKSA6IE5hTjtcbiAgICBfb3BlcmEgICA9IGFnZW50WzNdID8gcGFyc2VGbG9hdChhZ2VudFszXSkgOiBOYU47XG4gICAgX3dlYmtpdCAgPSBhZ2VudFs0XSA/IHBhcnNlRmxvYXQoYWdlbnRbNF0pIDogTmFOO1xuICAgIGlmIChfd2Via2l0KSB7XG4gICAgICAvLyBXZSBkbyBub3QgYWRkIHRoZSByZWdleHAgdG8gdGhlIGFib3ZlIHRlc3QsIGJlY2F1c2UgaXQgd2lsbCBhbHdheXNcbiAgICAgIC8vIG1hdGNoICdzYWZhcmknIG9ubHkgc2luY2UgJ0FwcGxlV2ViS2l0JyBhcHBlYXJzIGJlZm9yZSAnQ2hyb21lJyBpblxuICAgICAgLy8gdGhlIHVzZXJBZ2VudCBzdHJpbmcuXG4gICAgICBhZ2VudCA9IC8oPzpDaHJvbWVcXC8oXFxkK1xcLlxcZCspKS8uZXhlYyh1YXMpO1xuICAgICAgX2Nocm9tZSA9IGFnZW50ICYmIGFnZW50WzFdID8gcGFyc2VGbG9hdChhZ2VudFsxXSkgOiBOYU47XG4gICAgfSBlbHNlIHtcbiAgICAgIF9jaHJvbWUgPSBOYU47XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIF9pZSA9IF9maXJlZm94ID0gX29wZXJhID0gX2Nocm9tZSA9IF93ZWJraXQgPSBOYU47XG4gIH1cblxuICBpZiAob3MpIHtcbiAgICBpZiAob3NbMV0pIHtcbiAgICAgIC8vIERldGVjdCBPUyBYIHZlcnNpb24uICBJZiBubyB2ZXJzaW9uIG51bWJlciBtYXRjaGVzLCBzZXQgX29zeCB0byB0cnVlLlxuICAgICAgLy8gVmVyc2lvbiBleGFtcGxlczogIDEwLCAxMF82XzEsIDEwLjdcbiAgICAgIC8vIFBhcnNlcyB2ZXJzaW9uIG51bWJlciBhcyBhIGZsb2F0LCB0YWtpbmcgb25seSBmaXJzdCB0d28gc2V0cyBvZlxuICAgICAgLy8gZGlnaXRzLiAgSWYgb25seSBvbmUgc2V0IG9mIGRpZ2l0cyBpcyBmb3VuZCwgcmV0dXJucyBqdXN0IHRoZSBtYWpvclxuICAgICAgLy8gdmVyc2lvbiBudW1iZXIuXG4gICAgICB2YXIgdmVyID0gLyg/Ok1hYyBPUyBYIChcXGQrKD86Wy5fXVxcZCspPykpLy5leGVjKHVhcyk7XG5cbiAgICAgIF9vc3ggPSB2ZXIgPyBwYXJzZUZsb2F0KHZlclsxXS5yZXBsYWNlKCdfJywgJy4nKSkgOiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBfb3N4ID0gZmFsc2U7XG4gICAgfVxuICAgIF93aW5kb3dzID0gISFvc1syXTtcbiAgICBfbGludXggICA9ICEhb3NbM107XG4gIH0gZWxzZSB7XG4gICAgX29zeCA9IF93aW5kb3dzID0gX2xpbnV4ID0gZmFsc2U7XG4gIH1cbn1cblxudmFyIFVzZXJBZ2VudF9ERVBSRUNBVEVEID0ge1xuXG4gIC8qKlxuICAgKiAgQ2hlY2sgaWYgdGhlIFVBIGlzIEludGVybmV0IEV4cGxvcmVyLlxuICAgKlxuICAgKlxuICAgKiAgQHJldHVybiBmbG9hdHxOYU4gVmVyc2lvbiBudW1iZXIgKGlmIG1hdGNoKSBvciBOYU4uXG4gICAqL1xuICBpZTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIF9wb3B1bGF0ZSgpIHx8IF9pZTtcbiAgfSxcblxuICAvKipcbiAgICogQ2hlY2sgaWYgd2UncmUgaW4gSW50ZXJuZXQgRXhwbG9yZXIgY29tcGF0aWJpbGl0eSBtb2RlLlxuICAgKlxuICAgKiBAcmV0dXJuIGJvb2wgdHJ1ZSBpZiBpbiBjb21wYXRpYmlsaXR5IG1vZGUsIGZhbHNlIGlmXG4gICAqIG5vdCBjb21wYXRpYmlsaXR5IG1vZGUgb3Igbm90IGllXG4gICAqL1xuICBpZUNvbXBhdGliaWxpdHlNb2RlOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gX3BvcHVsYXRlKCkgfHwgKF9pZV9yZWFsX3ZlcnNpb24gPiBfaWUpO1xuICB9LFxuXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhlIGJyb3dzZXIgaXMgNjQtYml0IElFLiAgUmVhbGx5LCB0aGlzIGlzIGtpbmQgb2Ygd2VhayBzYXVjZTsgIHdlXG4gICAqIG9ubHkgbmVlZCB0aGlzIGJlY2F1c2UgU2t5cGUgY2FuJ3QgaGFuZGxlIDY0LWJpdCBJRSB5ZXQuICBXZSBuZWVkIHRvIHJlbW92ZVxuICAgKiB0aGlzIHdoZW4gd2UgZG9uJ3QgbmVlZCBpdCAtLSB0cmFja2VkIGJ5ICM2MDE5NTcuXG4gICAqL1xuICBpZTY0OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gVXNlckFnZW50X0RFUFJFQ0FURUQuaWUoKSAmJiBfd2luNjQ7XG4gIH0sXG5cbiAgLyoqXG4gICAqICBDaGVjayBpZiB0aGUgVUEgaXMgRmlyZWZveC5cbiAgICpcbiAgICpcbiAgICogIEByZXR1cm4gZmxvYXR8TmFOIFZlcnNpb24gbnVtYmVyIChpZiBtYXRjaCkgb3IgTmFOLlxuICAgKi9cbiAgZmlyZWZveDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIF9wb3B1bGF0ZSgpIHx8IF9maXJlZm94O1xuICB9LFxuXG5cbiAgLyoqXG4gICAqICBDaGVjayBpZiB0aGUgVUEgaXMgT3BlcmEuXG4gICAqXG4gICAqXG4gICAqICBAcmV0dXJuIGZsb2F0fE5hTiBWZXJzaW9uIG51bWJlciAoaWYgbWF0Y2gpIG9yIE5hTi5cbiAgICovXG4gIG9wZXJhOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gX3BvcHVsYXRlKCkgfHwgX29wZXJhO1xuICB9LFxuXG5cbiAgLyoqXG4gICAqICBDaGVjayBpZiB0aGUgVUEgaXMgV2ViS2l0LlxuICAgKlxuICAgKlxuICAgKiAgQHJldHVybiBmbG9hdHxOYU4gVmVyc2lvbiBudW1iZXIgKGlmIG1hdGNoKSBvciBOYU4uXG4gICAqL1xuICB3ZWJraXQ6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBfcG9wdWxhdGUoKSB8fCBfd2Via2l0O1xuICB9LFxuXG4gIC8qKlxuICAgKiAgRm9yIFB1c2hcbiAgICogIFdJTEwgQkUgUkVNT1ZFRCBWRVJZIFNPT04uIFVzZSBVc2VyQWdlbnRfREVQUkVDQVRFRC53ZWJraXRcbiAgICovXG4gIHNhZmFyaTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFVzZXJBZ2VudF9ERVBSRUNBVEVELndlYmtpdCgpO1xuICB9LFxuXG4gIC8qKlxuICAgKiAgQ2hlY2sgaWYgdGhlIFVBIGlzIGEgQ2hyb21lIGJyb3dzZXIuXG4gICAqXG4gICAqXG4gICAqICBAcmV0dXJuIGZsb2F0fE5hTiBWZXJzaW9uIG51bWJlciAoaWYgbWF0Y2gpIG9yIE5hTi5cbiAgICovXG4gIGNocm9tZSA6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBfcG9wdWxhdGUoKSB8fCBfY2hyb21lO1xuICB9LFxuXG5cbiAgLyoqXG4gICAqICBDaGVjayBpZiB0aGUgdXNlciBpcyBydW5uaW5nIFdpbmRvd3MuXG4gICAqXG4gICAqICBAcmV0dXJuIGJvb2wgYHRydWUnIGlmIHRoZSB1c2VyJ3MgT1MgaXMgV2luZG93cy5cbiAgICovXG4gIHdpbmRvd3M6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBfcG9wdWxhdGUoKSB8fCBfd2luZG93cztcbiAgfSxcblxuXG4gIC8qKlxuICAgKiAgQ2hlY2sgaWYgdGhlIHVzZXIgaXMgcnVubmluZyBNYWMgT1MgWC5cbiAgICpcbiAgICogIEByZXR1cm4gZmxvYXR8Ym9vbCAgIFJldHVybnMgYSBmbG9hdCBpZiBhIHZlcnNpb24gbnVtYmVyIGlzIGRldGVjdGVkLFxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgb3RoZXJ3aXNlIHRydWUvZmFsc2UuXG4gICAqL1xuICBvc3g6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBfcG9wdWxhdGUoKSB8fCBfb3N4O1xuICB9LFxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiB0aGUgdXNlciBpcyBydW5uaW5nIExpbnV4LlxuICAgKlxuICAgKiBAcmV0dXJuIGJvb2wgYHRydWUnIGlmIHRoZSB1c2VyJ3MgT1MgaXMgc29tZSBmbGF2b3Igb2YgTGludXguXG4gICAqL1xuICBsaW51eDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIF9wb3B1bGF0ZSgpIHx8IF9saW51eDtcbiAgfSxcblxuICAvKipcbiAgICogQ2hlY2sgaWYgdGhlIHVzZXIgaXMgcnVubmluZyBvbiBhbiBpUGhvbmUgb3IgaVBvZCBwbGF0Zm9ybS5cbiAgICpcbiAgICogQHJldHVybiBib29sIGB0cnVlJyBpZiB0aGUgdXNlciBpcyBydW5uaW5nIHNvbWUgZmxhdm9yIG9mIHRoZVxuICAgKiAgICBpUGhvbmUgT1MuXG4gICAqL1xuICBpcGhvbmU6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBfcG9wdWxhdGUoKSB8fCBfaXBob25lO1xuICB9LFxuXG4gIG1vYmlsZTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIF9wb3B1bGF0ZSgpIHx8IChfaXBob25lIHx8IF9pcGFkIHx8IF9hbmRyb2lkIHx8IF9tb2JpbGUpO1xuICB9LFxuXG4gIG5hdGl2ZUFwcDogZnVuY3Rpb24oKSB7XG4gICAgLy8gd2Vidmlld3MgaW5zaWRlIG9mIHRoZSBuYXRpdmUgYXBwc1xuICAgIHJldHVybiBfcG9wdWxhdGUoKSB8fCBfbmF0aXZlO1xuICB9LFxuXG4gIGFuZHJvaWQ6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBfcG9wdWxhdGUoKSB8fCBfYW5kcm9pZDtcbiAgfSxcblxuICBpcGFkOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gX3BvcHVsYXRlKCkgfHwgX2lwYWQ7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gVXNlckFnZW50X0RFUFJFQ0FURUQ7XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgaXNFdmVudFN1cHBvcnRlZFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0gcmVxdWlyZSgnLi9FeGVjdXRpb25FbnZpcm9ubWVudCcpO1xuXG52YXIgdXNlSGFzRmVhdHVyZTtcbmlmIChFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00pIHtcbiAgdXNlSGFzRmVhdHVyZSA9XG4gICAgZG9jdW1lbnQuaW1wbGVtZW50YXRpb24gJiZcbiAgICBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5oYXNGZWF0dXJlICYmXG4gICAgLy8gYWx3YXlzIHJldHVybnMgdHJ1ZSBpbiBuZXdlciBicm93c2VycyBhcyBwZXIgdGhlIHN0YW5kYXJkLlxuICAgIC8vIEBzZWUgaHR0cDovL2RvbS5zcGVjLndoYXR3Zy5vcmcvI2RvbS1kb21pbXBsZW1lbnRhdGlvbi1oYXNmZWF0dXJlXG4gICAgZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uaGFzRmVhdHVyZSgnJywgJycpICE9PSB0cnVlO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBhbiBldmVudCBpcyBzdXBwb3J0ZWQgaW4gdGhlIGN1cnJlbnQgZXhlY3V0aW9uIGVudmlyb25tZW50LlxuICpcbiAqIE5PVEU6IFRoaXMgd2lsbCBub3Qgd29yayBjb3JyZWN0bHkgZm9yIG5vbi1nZW5lcmljIGV2ZW50cyBzdWNoIGFzIGBjaGFuZ2VgLFxuICogYHJlc2V0YCwgYGxvYWRgLCBgZXJyb3JgLCBhbmQgYHNlbGVjdGAuXG4gKlxuICogQm9ycm93cyBmcm9tIE1vZGVybml6ci5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lU3VmZml4IEV2ZW50IG5hbWUsIGUuZy4gXCJjbGlja1wiLlxuICogQHBhcmFtIHs/Ym9vbGVhbn0gY2FwdHVyZSBDaGVjayBpZiB0aGUgY2FwdHVyZSBwaGFzZSBpcyBzdXBwb3J0ZWQuXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBldmVudCBpcyBzdXBwb3J0ZWQuXG4gKiBAaW50ZXJuYWxcbiAqIEBsaWNlbnNlIE1vZGVybml6ciAzLjAuMHByZSAoQ3VzdG9tIEJ1aWxkKSB8IE1JVFxuICovXG5mdW5jdGlvbiBpc0V2ZW50U3VwcG9ydGVkKGV2ZW50TmFtZVN1ZmZpeCwgY2FwdHVyZSkge1xuICBpZiAoIUV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSB8fFxuICAgICAgY2FwdHVyZSAmJiAhKCdhZGRFdmVudExpc3RlbmVyJyBpbiBkb2N1bWVudCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgZXZlbnROYW1lID0gJ29uJyArIGV2ZW50TmFtZVN1ZmZpeDtcbiAgdmFyIGlzU3VwcG9ydGVkID0gZXZlbnROYW1lIGluIGRvY3VtZW50O1xuXG4gIGlmICghaXNTdXBwb3J0ZWQpIHtcbiAgICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKGV2ZW50TmFtZSwgJ3JldHVybjsnKTtcbiAgICBpc1N1cHBvcnRlZCA9IHR5cGVvZiBlbGVtZW50W2V2ZW50TmFtZV0gPT09ICdmdW5jdGlvbic7XG4gIH1cblxuICBpZiAoIWlzU3VwcG9ydGVkICYmIHVzZUhhc0ZlYXR1cmUgJiYgZXZlbnROYW1lU3VmZml4ID09PSAnd2hlZWwnKSB7XG4gICAgLy8gVGhpcyBpcyB0aGUgb25seSB3YXkgdG8gdGVzdCBzdXBwb3J0IGZvciB0aGUgYHdoZWVsYCBldmVudCBpbiBJRTkrLlxuICAgIGlzU3VwcG9ydGVkID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uaGFzRmVhdHVyZSgnRXZlbnRzLndoZWVsJywgJzMuMCcpO1xuICB9XG5cbiAgcmV0dXJuIGlzU3VwcG9ydGVkO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzRXZlbnRTdXBwb3J0ZWQ7XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBub3JtYWxpemVXaGVlbFxuICogQHR5cGVjaGVja3NcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBVc2VyQWdlbnRfREVQUkVDQVRFRCA9IHJlcXVpcmUoJy4vVXNlckFnZW50X0RFUFJFQ0FURUQnKTtcblxudmFyIGlzRXZlbnRTdXBwb3J0ZWQgPSByZXF1aXJlKCcuL2lzRXZlbnRTdXBwb3J0ZWQnKTtcblxuXG4vLyBSZWFzb25hYmxlIGRlZmF1bHRzXG52YXIgUElYRUxfU1RFUCAgPSAxMDtcbnZhciBMSU5FX0hFSUdIVCA9IDQwO1xudmFyIFBBR0VfSEVJR0hUID0gODAwO1xuXG4vKipcbiAqIE1vdXNlIHdoZWVsIChhbmQgMi1maW5nZXIgdHJhY2twYWQpIHN1cHBvcnQgb24gdGhlIHdlYiBzdWNrcy4gIEl0IGlzXG4gKiBjb21wbGljYXRlZCwgdGh1cyB0aGlzIGRvYyBpcyBsb25nIGFuZCAoaG9wZWZ1bGx5KSBkZXRhaWxlZCBlbm91Z2ggdG8gYW5zd2VyXG4gKiB5b3VyIHF1ZXN0aW9ucy5cbiAqXG4gKiBJZiB5b3UgbmVlZCB0byByZWFjdCB0byB0aGUgbW91c2Ugd2hlZWwgaW4gYSBwcmVkaWN0YWJsZSB3YXksIHRoaXMgY29kZSBpc1xuICogbGlrZSB5b3VyIGJlc3Rlc3QgZnJpZW5kLiAqIGh1Z3MgKlxuICpcbiAqIEFzIG9mIHRvZGF5LCB0aGVyZSBhcmUgNCBET00gZXZlbnQgdHlwZXMgeW91IGNhbiBsaXN0ZW4gdG86XG4gKlxuICogICAnd2hlZWwnICAgICAgICAgICAgICAgIC0tIENocm9tZSgzMSspLCBGRigxNyspLCBJRSg5KylcbiAqICAgJ21vdXNld2hlZWwnICAgICAgICAgICAtLSBDaHJvbWUsIElFKDYrKSwgT3BlcmEsIFNhZmFyaVxuICogICAnTW96TW91c2VQaXhlbFNjcm9sbCcgIC0tIEZGKDMuNSBvbmx5ISkgKDIwMTAtMjAxMykgLS0gZG9uJ3QgYm90aGVyIVxuICogICAnRE9NTW91c2VTY3JvbGwnICAgICAgIC0tIEZGKDAuOS43Kykgc2luY2UgMjAwM1xuICpcbiAqIFNvIHdoYXQgdG8gZG8/ICBUaGUgaXMgdGhlIGJlc3Q6XG4gKlxuICogICBub3JtYWxpemVXaGVlbC5nZXRFdmVudFR5cGUoKTtcbiAqXG4gKiBJbiB5b3VyIGV2ZW50IGNhbGxiYWNrLCB1c2UgdGhpcyBjb2RlIHRvIGdldCBzYW5lIGludGVycHJldGF0aW9uIG9mIHRoZVxuICogZGVsdGFzLiAgVGhpcyBjb2RlIHdpbGwgcmV0dXJuIGFuIG9iamVjdCB3aXRoIHByb3BlcnRpZXM6XG4gKlxuICogICBzcGluWCAgIC0tIG5vcm1hbGl6ZWQgc3BpbiBzcGVlZCAodXNlIGZvciB6b29tKSAtIHggcGxhbmVcbiAqICAgc3BpblkgICAtLSBcIiAtIHkgcGxhbmVcbiAqICAgcGl4ZWxYICAtLSBub3JtYWxpemVkIGRpc3RhbmNlICh0byBwaXhlbHMpIC0geCBwbGFuZVxuICogICBwaXhlbFkgIC0tIFwiIC0geSBwbGFuZVxuICpcbiAqIFdoZWVsIHZhbHVlcyBhcmUgcHJvdmlkZWQgYnkgdGhlIGJyb3dzZXIgYXNzdW1pbmcgeW91IGFyZSB1c2luZyB0aGUgd2hlZWwgdG9cbiAqIHNjcm9sbCBhIHdlYiBwYWdlIGJ5IGEgbnVtYmVyIG9mIGxpbmVzIG9yIHBpeGVscyAob3IgcGFnZXMpLiAgVmFsdWVzIGNhbiB2YXJ5XG4gKiBzaWduaWZpY2FudGx5IG9uIGRpZmZlcmVudCBwbGF0Zm9ybXMgYW5kIGJyb3dzZXJzLCBmb3JnZXR0aW5nIHRoYXQgeW91IGNhblxuICogc2Nyb2xsIGF0IGRpZmZlcmVudCBzcGVlZHMuICBTb21lIGRldmljZXMgKGxpa2UgdHJhY2twYWRzKSBlbWl0IG1vcmUgZXZlbnRzXG4gKiBhdCBzbWFsbGVyIGluY3JlbWVudHMgd2l0aCBmaW5lIGdyYW51bGFyaXR5LCBhbmQgc29tZSBlbWl0IG1hc3NpdmUganVtcHMgd2l0aFxuICogbGluZWFyIHNwZWVkIG9yIGFjY2VsZXJhdGlvbi5cbiAqXG4gKiBUaGlzIGNvZGUgZG9lcyBpdHMgYmVzdCB0byBub3JtYWxpemUgdGhlIGRlbHRhcyBmb3IgeW91OlxuICpcbiAqICAgLSBzcGluIGlzIHRyeWluZyB0byBub3JtYWxpemUgaG93IGZhciB0aGUgd2hlZWwgd2FzIHNwdW4gKG9yIHRyYWNrcGFkXG4gKiAgICAgZHJhZ2dlZCkuICBUaGlzIGlzIHN1cGVyIHVzZWZ1bCBmb3Igem9vbSBzdXBwb3J0IHdoZXJlIHlvdSB3YW50IHRvXG4gKiAgICAgdGhyb3cgYXdheSB0aGUgY2h1bmt5IHNjcm9sbCBzdGVwcyBvbiB0aGUgUEMgYW5kIG1ha2UgdGhvc2UgZXF1YWwgdG9cbiAqICAgICB0aGUgc2xvdyBhbmQgc21vb3RoIHRpbnkgc3RlcHMgb24gdGhlIE1hYy4gS2V5IGRhdGE6IFRoaXMgY29kZSB0cmllcyB0b1xuICogICAgIHJlc29sdmUgYSBzaW5nbGUgc2xvdyBzdGVwIG9uIGEgd2hlZWwgdG8gMS5cbiAqXG4gKiAgIC0gcGl4ZWwgaXMgbm9ybWFsaXppbmcgdGhlIGRlc2lyZWQgc2Nyb2xsIGRlbHRhIGluIHBpeGVsIHVuaXRzLiAgWW91J2xsXG4gKiAgICAgZ2V0IHRoZSBjcmF6eSBkaWZmZXJlbmNlcyBiZXR3ZWVuIGJyb3dzZXJzLCBidXQgYXQgbGVhc3QgaXQnbGwgYmUgaW5cbiAqICAgICBwaXhlbHMhXG4gKlxuICogICAtIHBvc2l0aXZlIHZhbHVlIGluZGljYXRlcyBzY3JvbGxpbmcgRE9XTi9SSUdIVCwgbmVnYXRpdmUgVVAvTEVGVC4gIFRoaXNcbiAqICAgICBzaG91bGQgdHJhbnNsYXRlIHRvIHBvc2l0aXZlIHZhbHVlIHpvb21pbmcgSU4sIG5lZ2F0aXZlIHpvb21pbmcgT1VULlxuICogICAgIFRoaXMgbWF0Y2hlcyB0aGUgbmV3ZXIgJ3doZWVsJyBldmVudC5cbiAqXG4gKiBXaHkgYXJlIHRoZXJlIHNwaW5YLCBzcGluWSAob3IgcGl4ZWxzKT9cbiAqXG4gKiAgIC0gc3BpblggaXMgYSAyLWZpbmdlciBzaWRlIGRyYWcgb24gdGhlIHRyYWNrcGFkLCBhbmQgYSBzaGlmdCArIHdoZWVsIHR1cm5cbiAqICAgICB3aXRoIGEgbW91c2UuICBJdCByZXN1bHRzIGluIHNpZGUtc2Nyb2xsaW5nIGluIHRoZSBicm93c2VyIGJ5IGRlZmF1bHQuXG4gKlxuICogICAtIHNwaW5ZIGlzIHdoYXQgeW91IGV4cGVjdCAtLSBpdCdzIHRoZSBjbGFzc2ljIGF4aXMgb2YgYSBtb3VzZSB3aGVlbC5cbiAqXG4gKiAgIC0gSSBkcm9wcGVkIHNwaW5aL3BpeGVsWi4gIEl0IGlzIHN1cHBvcnRlZCBieSB0aGUgRE9NIDMgJ3doZWVsJyBldmVudCBhbmRcbiAqICAgICBwcm9iYWJseSBpcyBieSBicm93c2VycyBpbiBjb25qdW5jdGlvbiB3aXRoIGZhbmN5IDNEIGNvbnRyb2xsZXJzIC4uIGJ1dFxuICogICAgIHlvdSBrbm93LlxuICpcbiAqIEltcGxlbWVudGF0aW9uIGluZm86XG4gKlxuICogRXhhbXBsZXMgb2YgJ3doZWVsJyBldmVudCBpZiB5b3Ugc2Nyb2xsIHNsb3dseSAoZG93bikgYnkgb25lIHN0ZXAgd2l0aCBhblxuICogYXZlcmFnZSBtb3VzZTpcbiAqXG4gKiAgIE9TIFggKyBDaHJvbWUgIChtb3VzZSkgICAgIC0gICAgNCAgIHBpeGVsIGRlbHRhICAod2hlZWxEZWx0YSAtMTIwKVxuICogICBPUyBYICsgU2FmYXJpICAobW91c2UpICAgICAtICBOL0EgICBwaXhlbCBkZWx0YSAgKHdoZWVsRGVsdGEgIC0xMilcbiAqICAgT1MgWCArIEZpcmVmb3ggKG1vdXNlKSAgICAgLSAgICAwLjEgbGluZSAgZGVsdGEgICh3aGVlbERlbHRhICBOL0EpXG4gKiAgIFdpbjggKyBDaHJvbWUgIChtb3VzZSkgICAgIC0gIDEwMCAgIHBpeGVsIGRlbHRhICAod2hlZWxEZWx0YSAtMTIwKVxuICogICBXaW44ICsgRmlyZWZveCAobW91c2UpICAgICAtICAgIDMgICBsaW5lICBkZWx0YSAgKHdoZWVsRGVsdGEgLTEyMClcbiAqXG4gKiBPbiB0aGUgdHJhY2twYWQ6XG4gKlxuICogICBPUyBYICsgQ2hyb21lICAodHJhY2twYWQpICAtICAgIDIgICBwaXhlbCBkZWx0YSAgKHdoZWVsRGVsdGEgICAtNilcbiAqICAgT1MgWCArIEZpcmVmb3ggKHRyYWNrcGFkKSAgLSAgICAxICAgcGl4ZWwgZGVsdGEgICh3aGVlbERlbHRhICBOL0EpXG4gKlxuICogT24gb3RoZXIvb2xkZXIgYnJvd3NlcnMuLiBpdCdzIG1vcmUgY29tcGxpY2F0ZWQgYXMgdGhlcmUgY2FuIGJlIG11bHRpcGxlIGFuZFxuICogYWxzbyBtaXNzaW5nIGRlbHRhIHZhbHVlcy5cbiAqXG4gKiBUaGUgJ3doZWVsJyBldmVudCBpcyBtb3JlIHN0YW5kYXJkOlxuICpcbiAqIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy8jZXZlbnRzLXdoZWVsZXZlbnRzXG4gKlxuICogVGhlIGJhc2ljcyBpcyB0aGF0IGl0IGluY2x1ZGVzIGEgdW5pdCwgZGVsdGFNb2RlIChwaXhlbHMsIGxpbmVzLCBwYWdlcyksIGFuZFxuICogZGVsdGFYLCBkZWx0YVkgYW5kIGRlbHRhWi4gIFNvbWUgYnJvd3NlcnMgcHJvdmlkZSBvdGhlciB2YWx1ZXMgdG8gbWFpbnRhaW5cbiAqIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkgd2l0aCBvbGRlciBldmVudHMuICBUaG9zZSBvdGhlciB2YWx1ZXMgaGVscCB1c1xuICogYmV0dGVyIG5vcm1hbGl6ZSBzcGluIHNwZWVkLiAgRXhhbXBsZSBvZiB3aGF0IHRoZSBicm93c2VycyBwcm92aWRlOlxuICpcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICB8IGV2ZW50LndoZWVsRGVsdGEgfCBldmVudC5kZXRhaWxcbiAqICAgICAgICAtLS0tLS0tLS0tLS0tLS0tLS0rLS0tLS0tLS0tLS0tLS0tLS0tKy0tLS0tLS0tLS0tLS0tXG4gKiAgICAgICAgICBTYWZhcmkgdjUvT1MgWCAgfCAgICAgICAtMTIwICAgICAgIHwgICAgICAgMFxuICogICAgICAgICAgU2FmYXJpIHY1L1dpbjcgIHwgICAgICAgLTEyMCAgICAgICB8ICAgICAgIDBcbiAqICAgICAgICAgQ2hyb21lIHYxNy9PUyBYICB8ICAgICAgIC0xMjAgICAgICAgfCAgICAgICAwXG4gKiAgICAgICAgIENocm9tZSB2MTcvV2luNyAgfCAgICAgICAtMTIwICAgICAgIHwgICAgICAgMFxuICogICAgICAgICAgICAgICAgSUU5L1dpbjcgIHwgICAgICAgLTEyMCAgICAgICB8ICAgdW5kZWZpbmVkXG4gKiAgICAgICAgIEZpcmVmb3ggdjQvT1MgWCAgfCAgICAgdW5kZWZpbmVkICAgIHwgICAgICAgMVxuICogICAgICAgICBGaXJlZm94IHY0L1dpbjcgIHwgICAgIHVuZGVmaW5lZCAgICB8ICAgICAgIDNcbiAqXG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZVdoZWVsKC8qb2JqZWN0Ki8gZXZlbnQpIC8qb2JqZWN0Ki8ge1xuICB2YXIgc1ggPSAwLCBzWSA9IDAsICAgICAgIC8vIHNwaW5YLCBzcGluWVxuICAgICAgcFggPSAwLCBwWSA9IDA7ICAgICAgIC8vIHBpeGVsWCwgcGl4ZWxZXG5cbiAgLy8gTGVnYWN5XG4gIGlmICgnZGV0YWlsJyAgICAgIGluIGV2ZW50KSB7IHNZID0gZXZlbnQuZGV0YWlsOyB9XG4gIGlmICgnd2hlZWxEZWx0YScgIGluIGV2ZW50KSB7IHNZID0gLWV2ZW50LndoZWVsRGVsdGEgLyAxMjA7IH1cbiAgaWYgKCd3aGVlbERlbHRhWScgaW4gZXZlbnQpIHsgc1kgPSAtZXZlbnQud2hlZWxEZWx0YVkgLyAxMjA7IH1cbiAgaWYgKCd3aGVlbERlbHRhWCcgaW4gZXZlbnQpIHsgc1ggPSAtZXZlbnQud2hlZWxEZWx0YVggLyAxMjA7IH1cblxuICAvLyBzaWRlIHNjcm9sbGluZyBvbiBGRiB3aXRoIERPTU1vdXNlU2Nyb2xsXG4gIGlmICggJ2F4aXMnIGluIGV2ZW50ICYmIGV2ZW50LmF4aXMgPT09IGV2ZW50LkhPUklaT05UQUxfQVhJUyApIHtcbiAgICBzWCA9IHNZO1xuICAgIHNZID0gMDtcbiAgfVxuXG4gIHBYID0gc1ggKiBQSVhFTF9TVEVQO1xuICBwWSA9IHNZICogUElYRUxfU1RFUDtcblxuICBpZiAoJ2RlbHRhWScgaW4gZXZlbnQpIHsgcFkgPSBldmVudC5kZWx0YVk7IH1cbiAgaWYgKCdkZWx0YVgnIGluIGV2ZW50KSB7IHBYID0gZXZlbnQuZGVsdGFYOyB9XG5cbiAgaWYgKChwWCB8fCBwWSkgJiYgZXZlbnQuZGVsdGFNb2RlKSB7XG4gICAgaWYgKGV2ZW50LmRlbHRhTW9kZSA9PSAxKSB7ICAgICAgICAgIC8vIGRlbHRhIGluIExJTkUgdW5pdHNcbiAgICAgIHBYICo9IExJTkVfSEVJR0hUO1xuICAgICAgcFkgKj0gTElORV9IRUlHSFQ7XG4gICAgfSBlbHNlIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRlbHRhIGluIFBBR0UgdW5pdHNcbiAgICAgIHBYICo9IFBBR0VfSEVJR0hUO1xuICAgICAgcFkgKj0gUEFHRV9IRUlHSFQ7XG4gICAgfVxuICB9XG5cbiAgLy8gRmFsbC1iYWNrIGlmIHNwaW4gY2Fubm90IGJlIGRldGVybWluZWRcbiAgaWYgKHBYICYmICFzWCkgeyBzWCA9IChwWCA8IDEpID8gLTEgOiAxOyB9XG4gIGlmIChwWSAmJiAhc1kpIHsgc1kgPSAocFkgPCAxKSA/IC0xIDogMTsgfVxuXG4gIHJldHVybiB7IHNwaW5YICA6IHNYLFxuICAgICAgICAgICBzcGluWSAgOiBzWSxcbiAgICAgICAgICAgcGl4ZWxYIDogcFgsXG4gICAgICAgICAgIHBpeGVsWSA6IHBZIH07XG59XG5cblxuLyoqXG4gKiBUaGUgYmVzdCBjb21iaW5hdGlvbiBpZiB5b3UgcHJlZmVyIHNwaW5YICsgc3Bpblkgbm9ybWFsaXphdGlvbi4gIEl0IGZhdm9yc1xuICogdGhlIG9sZGVyIERPTU1vdXNlU2Nyb2xsIGZvciBGaXJlZm94LCBhcyBGRiBkb2VzIG5vdCBpbmNsdWRlIHdoZWVsRGVsdGEgd2l0aFxuICogJ3doZWVsJyBldmVudCwgbWFraW5nIHNwaW4gc3BlZWQgZGV0ZXJtaW5hdGlvbiBpbXBvc3NpYmxlLlxuICovXG5ub3JtYWxpemVXaGVlbC5nZXRFdmVudFR5cGUgPSBmdW5jdGlvbigpIC8qc3RyaW5nKi8ge1xuICByZXR1cm4gKFVzZXJBZ2VudF9ERVBSRUNBVEVELmZpcmVmb3goKSlcbiAgICAgICAgICAgPyAnRE9NTW91c2VTY3JvbGwnXG4gICAgICAgICAgIDogKGlzRXZlbnRTdXBwb3J0ZWQoJ3doZWVsJykpXG4gICAgICAgICAgICAgICA/ICd3aGVlbCdcbiAgICAgICAgICAgICAgIDogJ21vdXNld2hlZWwnO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBub3JtYWxpemVXaGVlbDtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgaXNPbGRJRSA9IGZ1bmN0aW9uIGlzT2xkSUUoKSB7XG4gIHZhciBtZW1vO1xuICByZXR1cm4gZnVuY3Rpb24gbWVtb3JpemUoKSB7XG4gICAgaWYgKHR5cGVvZiBtZW1vID09PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gVGVzdCBmb3IgSUUgPD0gOSBhcyBwcm9wb3NlZCBieSBCcm93c2VyaGFja3NcbiAgICAgIC8vIEBzZWUgaHR0cDovL2Jyb3dzZXJoYWNrcy5jb20vI2hhY2stZTcxZDg2OTJmNjUzMzQxNzNmZWU3MTVjMjIyY2I4MDVcbiAgICAgIC8vIFRlc3RzIGZvciBleGlzdGVuY2Ugb2Ygc3RhbmRhcmQgZ2xvYmFscyBpcyB0byBhbGxvdyBzdHlsZS1sb2FkZXJcbiAgICAgIC8vIHRvIG9wZXJhdGUgY29ycmVjdGx5IGludG8gbm9uLXN0YW5kYXJkIGVudmlyb25tZW50c1xuICAgICAgLy8gQHNlZSBodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlci9pc3N1ZXMvMTc3XG4gICAgICBtZW1vID0gQm9vbGVhbih3aW5kb3cgJiYgZG9jdW1lbnQgJiYgZG9jdW1lbnQuYWxsICYmICF3aW5kb3cuYXRvYik7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lbW87XG4gIH07XG59KCk7XG5cbnZhciBnZXRUYXJnZXQgPSBmdW5jdGlvbiBnZXRUYXJnZXQoKSB7XG4gIHZhciBtZW1vID0ge307XG4gIHJldHVybiBmdW5jdGlvbiBtZW1vcml6ZSh0YXJnZXQpIHtcbiAgICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTsgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblxuICAgICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbiAgfTtcbn0oKTtcblxudmFyIHN0eWxlc0luRG9tID0gW107XG5cbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5Eb20ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5Eb21baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXVxuICAgIH07XG5cbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGVzSW5Eb20ucHVzaCh7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IGFkZFN0eWxlKG9iaiwgb3B0aW9ucyksXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cblxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gIHZhciBhdHRyaWJ1dGVzID0gb3B0aW9ucy5hdHRyaWJ1dGVzIHx8IHt9O1xuXG4gIGlmICh0eXBlb2YgYXR0cmlidXRlcy5ub25jZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09ICd1bmRlZmluZWQnID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuXG4gICAgaWYgKG5vbmNlKSB7XG4gICAgICBhdHRyaWJ1dGVzLm5vbmNlID0gbm9uY2U7XG4gICAgfVxuICB9XG5cbiAgT2JqZWN0LmtleXMoYXR0cmlidXRlcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgc3R5bGUuc2V0QXR0cmlidXRlKGtleSwgYXR0cmlidXRlc1trZXldKTtcbiAgfSk7XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zLmluc2VydCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIG9wdGlvbnMuaW5zZXJ0KHN0eWxlKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KG9wdGlvbnMuaW5zZXJ0IHx8ICdoZWFkJyk7XG5cbiAgICBpZiAoIXRhcmdldCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgICB9XG5cbiAgICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuICB9XG5cbiAgcmV0dXJuIHN0eWxlO1xufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZS5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3R5bGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZSk7XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG52YXIgcmVwbGFjZVRleHQgPSBmdW5jdGlvbiByZXBsYWNlVGV4dCgpIHtcbiAgdmFyIHRleHRTdG9yZSA9IFtdO1xuICByZXR1cm4gZnVuY3Rpb24gcmVwbGFjZShpbmRleCwgcmVwbGFjZW1lbnQpIHtcbiAgICB0ZXh0U3RvcmVbaW5kZXhdID0gcmVwbGFjZW1lbnQ7XG4gICAgcmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJyk7XG4gIH07XG59KCk7XG5cbmZ1bmN0aW9uIGFwcGx5VG9TaW5nbGV0b25UYWcoc3R5bGUsIGluZGV4LCByZW1vdmUsIG9iaikge1xuICB2YXIgY3NzID0gcmVtb3ZlID8gJycgOiBvYmoubWVkaWEgPyBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpLmNvbmNhdChvYmouY3NzLCBcIn1cIikgOiBvYmouY3NzOyAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG4gIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gcmVwbGFjZVRleHQoaW5kZXgsIGNzcyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGNzc05vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpO1xuICAgIHZhciBjaGlsZE5vZGVzID0gc3R5bGUuY2hpbGROb2RlcztcblxuICAgIGlmIChjaGlsZE5vZGVzW2luZGV4XSkge1xuICAgICAgc3R5bGUucmVtb3ZlQ2hpbGQoY2hpbGROb2Rlc1tpbmRleF0pO1xuICAgIH1cblxuICAgIGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xuICAgICAgc3R5bGUuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGUuYXBwZW5kQ2hpbGQoY3NzTm9kZSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFwcGx5VG9UYWcoc3R5bGUsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gb2JqLmNzcztcbiAgdmFyIG1lZGlhID0gb2JqLm1lZGlhO1xuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuICBpZiAobWVkaWEpIHtcbiAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoJ21lZGlhJywgbWVkaWEpO1xuICB9IGVsc2Uge1xuICAgIHN0eWxlLnJlbW92ZUF0dHJpYnV0ZSgnbWVkaWEnKTtcbiAgfVxuXG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH0gLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuXG4gIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZS5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZS5yZW1vdmVDaGlsZChzdHlsZS5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgICBzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxuXG52YXIgc2luZ2xldG9uID0gbnVsbDtcbnZhciBzaW5nbGV0b25Db3VudGVyID0gMDtcblxuZnVuY3Rpb24gYWRkU3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBzdHlsZTtcbiAgdmFyIHVwZGF0ZTtcbiAgdmFyIHJlbW92ZTtcblxuICBpZiAob3B0aW9ucy5zaW5nbGV0b24pIHtcbiAgICB2YXIgc3R5bGVJbmRleCA9IHNpbmdsZXRvbkNvdW50ZXIrKztcbiAgICBzdHlsZSA9IHNpbmdsZXRvbiB8fCAoc2luZ2xldG9uID0gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpKTtcbiAgICB1cGRhdGUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIGZhbHNlKTtcbiAgICByZW1vdmUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIHRydWUpO1xuICB9IGVsc2Uge1xuICAgIHN0eWxlID0gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICAgIHVwZGF0ZSA9IGFwcGx5VG9UYWcuYmluZChudWxsLCBzdHlsZSwgb3B0aW9ucyk7XG5cbiAgICByZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpO1xuICAgIH07XG4gIH1cblxuICB1cGRhdGUob2JqKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB1cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVtb3ZlKCk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9OyAvLyBGb3JjZSBzaW5nbGUtdGFnIHNvbHV0aW9uIG9uIElFNi05LCB3aGljaCBoYXMgYSBoYXJkIGxpbWl0IG9uIHRoZSAjIG9mIDxzdHlsZT5cbiAgLy8gdGFncyBpdCB3aWxsIGFsbG93IG9uIGEgcGFnZVxuXG4gIGlmICghb3B0aW9ucy5zaW5nbGV0b24gJiYgdHlwZW9mIG9wdGlvbnMuc2luZ2xldG9uICE9PSAnYm9vbGVhbicpIHtcbiAgICBvcHRpb25zLnNpbmdsZXRvbiA9IGlzT2xkSUUoKTtcbiAgfVxuXG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcblxuICAgIGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobmV3TGlzdCkgIT09ICdbb2JqZWN0IEFycmF5XScpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRG9tW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuXG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuXG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuXG4gICAgICBpZiAoc3R5bGVzSW5Eb21bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRG9tW19pbmRleF0udXBkYXRlcigpO1xuXG4gICAgICAgIHN0eWxlc0luRG9tLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiZWxlY3Ryb25cIik7OyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImZzXCIpOzsiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHRpZihfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdKSB7XG5cdFx0cmV0dXJuIF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0uZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0bG9hZGVkOiBmYWxzZSxcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG5cdG1vZHVsZS5sb2FkZWQgPSB0cnVlO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gbW9kdWxlWydkZWZhdWx0J10gOlxuXHRcdCgpID0+IG1vZHVsZTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApIiwiX193ZWJwYWNrX3JlcXVpcmVfXy5ubWQgPSAobW9kdWxlKSA9PiB7XG5cdG1vZHVsZS5wYXRocyA9IFtdO1xuXHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdHJldHVybiBtb2R1bGU7XG59OyIsIi8qKlxyXG4gKiBNYWtlIGEgbWFwIGFuZCByZXR1cm4gYSBmdW5jdGlvbiBmb3IgY2hlY2tpbmcgaWYgYSBrZXlcclxuICogaXMgaW4gdGhhdCBtYXAuXHJcbiAqIElNUE9SVEFOVDogYWxsIGNhbGxzIG9mIHRoaXMgZnVuY3Rpb24gbXVzdCBiZSBwcmVmaXhlZCB3aXRoXHJcbiAqIFxcL1xcKiNcXF9cXF9QVVJFXFxfXFxfXFwqXFwvXHJcbiAqIFNvIHRoYXQgcm9sbHVwIGNhbiB0cmVlLXNoYWtlIHRoZW0gaWYgbmVjZXNzYXJ5LlxyXG4gKi9cclxuZnVuY3Rpb24gbWFrZU1hcChzdHIsIGV4cGVjdHNMb3dlckNhc2UpIHtcclxuICAgIGNvbnN0IG1hcCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XHJcbiAgICBjb25zdCBsaXN0ID0gc3RyLnNwbGl0KCcsJyk7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBtYXBbbGlzdFtpXV0gPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGV4cGVjdHNMb3dlckNhc2UgPyB2YWwgPT4gISFtYXBbdmFsLnRvTG93ZXJDYXNlKCldIDogdmFsID0+ICEhbWFwW3ZhbF07XHJcbn1cblxuLyoqXHJcbiAqIGRldiBvbmx5IGZsYWcgLT4gbmFtZSBtYXBwaW5nXHJcbiAqL1xyXG5jb25zdCBQYXRjaEZsYWdOYW1lcyA9IHtcclxuICAgIFsxIC8qIFRFWFQgKi9dOiBgVEVYVGAsXHJcbiAgICBbMiAvKiBDTEFTUyAqL106IGBDTEFTU2AsXHJcbiAgICBbNCAvKiBTVFlMRSAqL106IGBTVFlMRWAsXHJcbiAgICBbOCAvKiBQUk9QUyAqL106IGBQUk9QU2AsXHJcbiAgICBbMTYgLyogRlVMTF9QUk9QUyAqL106IGBGVUxMX1BST1BTYCxcclxuICAgIFszMiAvKiBIWURSQVRFX0VWRU5UUyAqL106IGBIWURSQVRFX0VWRU5UU2AsXHJcbiAgICBbNjQgLyogU1RBQkxFX0ZSQUdNRU5UICovXTogYFNUQUJMRV9GUkFHTUVOVGAsXHJcbiAgICBbMTI4IC8qIEtFWUVEX0ZSQUdNRU5UICovXTogYEtFWUVEX0ZSQUdNRU5UYCxcclxuICAgIFsyNTYgLyogVU5LRVlFRF9GUkFHTUVOVCAqL106IGBVTktFWUVEX0ZSQUdNRU5UYCxcclxuICAgIFs1MTIgLyogTkVFRF9QQVRDSCAqL106IGBORUVEX1BBVENIYCxcclxuICAgIFsxMDI0IC8qIERZTkFNSUNfU0xPVFMgKi9dOiBgRFlOQU1JQ19TTE9UU2AsXHJcbiAgICBbMjA0OCAvKiBERVZfUk9PVF9GUkFHTUVOVCAqL106IGBERVZfUk9PVF9GUkFHTUVOVGAsXHJcbiAgICBbLTEgLyogSE9JU1RFRCAqL106IGBIT0lTVEVEYCxcclxuICAgIFstMiAvKiBCQUlMICovXTogYEJBSUxgXHJcbn07XG5cbi8qKlxyXG4gKiBEZXYgb25seVxyXG4gKi9cclxuY29uc3Qgc2xvdEZsYWdzVGV4dCA9IHtcclxuICAgIFsxIC8qIFNUQUJMRSAqL106ICdTVEFCTEUnLFxyXG4gICAgWzIgLyogRFlOQU1JQyAqL106ICdEWU5BTUlDJyxcclxuICAgIFszIC8qIEZPUldBUkRFRCAqL106ICdGT1JXQVJERUQnXHJcbn07XG5cbmNvbnN0IEdMT0JBTFNfV0hJVEVfTElTVEVEID0gJ0luZmluaXR5LHVuZGVmaW5lZCxOYU4saXNGaW5pdGUsaXNOYU4scGFyc2VGbG9hdCxwYXJzZUludCxkZWNvZGVVUkksJyArXHJcbiAgICAnZGVjb2RlVVJJQ29tcG9uZW50LGVuY29kZVVSSSxlbmNvZGVVUklDb21wb25lbnQsTWF0aCxOdW1iZXIsRGF0ZSxBcnJheSwnICtcclxuICAgICdPYmplY3QsQm9vbGVhbixTdHJpbmcsUmVnRXhwLE1hcCxTZXQsSlNPTixJbnRsJztcclxuY29uc3QgaXNHbG9iYWxseVdoaXRlbGlzdGVkID0gLyojX19QVVJFX18qLyBtYWtlTWFwKEdMT0JBTFNfV0hJVEVfTElTVEVEKTtcblxuY29uc3QgcmFuZ2UgPSAyO1xyXG5mdW5jdGlvbiBnZW5lcmF0ZUNvZGVGcmFtZShzb3VyY2UsIHN0YXJ0ID0gMCwgZW5kID0gc291cmNlLmxlbmd0aCkge1xyXG4gICAgY29uc3QgbGluZXMgPSBzb3VyY2Uuc3BsaXQoL1xccj9cXG4vKTtcclxuICAgIGxldCBjb3VudCA9IDA7XHJcbiAgICBjb25zdCByZXMgPSBbXTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBjb3VudCArPSBsaW5lc1tpXS5sZW5ndGggKyAxO1xyXG4gICAgICAgIGlmIChjb3VudCA+PSBzdGFydCkge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBqID0gaSAtIHJhbmdlOyBqIDw9IGkgKyByYW5nZSB8fCBlbmQgPiBjb3VudDsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaiA8IDAgfHwgaiA+PSBsaW5lcy5sZW5ndGgpXHJcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBsaW5lID0gaiArIDE7XHJcbiAgICAgICAgICAgICAgICByZXMucHVzaChgJHtsaW5lfSR7JyAnLnJlcGVhdChNYXRoLm1heCgzIC0gU3RyaW5nKGxpbmUpLmxlbmd0aCwgMCkpfXwgICR7bGluZXNbal19YCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBsaW5lTGVuZ3RoID0gbGluZXNbal0ubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgaWYgKGogPT09IGkpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBwdXNoIHVuZGVybGluZVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhZCA9IHN0YXJ0IC0gKGNvdW50IC0gbGluZUxlbmd0aCkgKyAxO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxlbmd0aCA9IE1hdGgubWF4KDEsIGVuZCA+IGNvdW50ID8gbGluZUxlbmd0aCAtIHBhZCA6IGVuZCAtIHN0YXJ0KTtcclxuICAgICAgICAgICAgICAgICAgICByZXMucHVzaChgICAgfCAgYCArICcgJy5yZXBlYXQocGFkKSArICdeJy5yZXBlYXQobGVuZ3RoKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChqID4gaSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlbmQgPiBjb3VudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBsZW5ndGggPSBNYXRoLm1heChNYXRoLm1pbihlbmQgLSBjb3VudCwgbGluZUxlbmd0aCksIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXMucHVzaChgICAgfCAgYCArICdeJy5yZXBlYXQobGVuZ3RoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGNvdW50ICs9IGxpbmVMZW5ndGggKyAxO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiByZXMuam9pbignXFxuJyk7XHJcbn1cblxuLyoqXHJcbiAqIE9uIHRoZSBjbGllbnQgd2Ugb25seSBuZWVkIHRvIG9mZmVyIHNwZWNpYWwgY2FzZXMgZm9yIGJvb2xlYW4gYXR0cmlidXRlcyB0aGF0XHJcbiAqIGhhdmUgZGlmZmVyZW50IG5hbWVzIGZyb20gdGhlaXIgY29ycmVzcG9uZGluZyBkb20gcHJvcGVydGllczpcclxuICogLSBpdGVtc2NvcGUgLT4gTi9BXHJcbiAqIC0gYWxsb3dmdWxsc2NyZWVuIC0+IGFsbG93RnVsbHNjcmVlblxyXG4gKiAtIGZvcm1ub3ZhbGlkYXRlIC0+IGZvcm1Ob1ZhbGlkYXRlXHJcbiAqIC0gaXNtYXAgLT4gaXNNYXBcclxuICogLSBub21vZHVsZSAtPiBub01vZHVsZVxyXG4gKiAtIG5vdmFsaWRhdGUgLT4gbm9WYWxpZGF0ZVxyXG4gKiAtIHJlYWRvbmx5IC0+IHJlYWRPbmx5XHJcbiAqL1xyXG5jb25zdCBzcGVjaWFsQm9vbGVhbkF0dHJzID0gYGl0ZW1zY29wZSxhbGxvd2Z1bGxzY3JlZW4sZm9ybW5vdmFsaWRhdGUsaXNtYXAsbm9tb2R1bGUsbm92YWxpZGF0ZSxyZWFkb25seWA7XHJcbmNvbnN0IGlzU3BlY2lhbEJvb2xlYW5BdHRyID0gLyojX19QVVJFX18qLyBtYWtlTWFwKHNwZWNpYWxCb29sZWFuQXR0cnMpO1xyXG4vKipcclxuICogVGhlIGZ1bGwgbGlzdCBpcyBuZWVkZWQgZHVyaW5nIFNTUiB0byBwcm9kdWNlIHRoZSBjb3JyZWN0IGluaXRpYWwgbWFya3VwLlxyXG4gKi9cclxuY29uc3QgaXNCb29sZWFuQXR0ciA9IC8qI19fUFVSRV9fKi8gbWFrZU1hcChzcGVjaWFsQm9vbGVhbkF0dHJzICtcclxuICAgIGAsYXN5bmMsYXV0b2ZvY3VzLGF1dG9wbGF5LGNvbnRyb2xzLGRlZmF1bHQsZGVmZXIsZGlzYWJsZWQsaGlkZGVuLGAgK1xyXG4gICAgYGxvb3Asb3BlbixyZXF1aXJlZCxyZXZlcnNlZCxzY29wZWQsc2VhbWxlc3MsYCArXHJcbiAgICBgY2hlY2tlZCxtdXRlZCxtdWx0aXBsZSxzZWxlY3RlZGApO1xyXG5jb25zdCB1bnNhZmVBdHRyQ2hhclJFID0gL1s+Lz1cIidcXHUwMDA5XFx1MDAwYVxcdTAwMGNcXHUwMDIwXS87XHJcbmNvbnN0IGF0dHJWYWxpZGF0aW9uQ2FjaGUgPSB7fTtcclxuZnVuY3Rpb24gaXNTU1JTYWZlQXR0ck5hbWUobmFtZSkge1xyXG4gICAgaWYgKGF0dHJWYWxpZGF0aW9uQ2FjaGUuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcclxuICAgICAgICByZXR1cm4gYXR0clZhbGlkYXRpb25DYWNoZVtuYW1lXTtcclxuICAgIH1cclxuICAgIGNvbnN0IGlzVW5zYWZlID0gdW5zYWZlQXR0ckNoYXJSRS50ZXN0KG5hbWUpO1xyXG4gICAgaWYgKGlzVW5zYWZlKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihgdW5zYWZlIGF0dHJpYnV0ZSBuYW1lOiAke25hbWV9YCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gKGF0dHJWYWxpZGF0aW9uQ2FjaGVbbmFtZV0gPSAhaXNVbnNhZmUpO1xyXG59XHJcbmNvbnN0IHByb3BzVG9BdHRyTWFwID0ge1xyXG4gICAgYWNjZXB0Q2hhcnNldDogJ2FjY2VwdC1jaGFyc2V0JyxcclxuICAgIGNsYXNzTmFtZTogJ2NsYXNzJyxcclxuICAgIGh0bWxGb3I6ICdmb3InLFxyXG4gICAgaHR0cEVxdWl2OiAnaHR0cC1lcXVpdidcclxufTtcclxuLyoqXHJcbiAqIENTUyBwcm9wZXJ0aWVzIHRoYXQgYWNjZXB0IHBsYWluIG51bWJlcnNcclxuICovXHJcbmNvbnN0IGlzTm9Vbml0TnVtZXJpY1N0eWxlUHJvcCA9IC8qI19fUFVSRV9fKi8gbWFrZU1hcChgYW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudCxib3JkZXItaW1hZ2Utb3V0c2V0LGJvcmRlci1pbWFnZS1zbGljZSxgICtcclxuICAgIGBib3JkZXItaW1hZ2Utd2lkdGgsYm94LWZsZXgsYm94LWZsZXgtZ3JvdXAsYm94LW9yZGluYWwtZ3JvdXAsY29sdW1uLWNvdW50LGAgK1xyXG4gICAgYGNvbHVtbnMsZmxleCxmbGV4LWdyb3csZmxleC1wb3NpdGl2ZSxmbGV4LXNocmluayxmbGV4LW5lZ2F0aXZlLGZsZXgtb3JkZXIsYCArXHJcbiAgICBgZ3JpZC1yb3csZ3JpZC1yb3ctZW5kLGdyaWQtcm93LXNwYW4sZ3JpZC1yb3ctc3RhcnQsZ3JpZC1jb2x1bW4sYCArXHJcbiAgICBgZ3JpZC1jb2x1bW4tZW5kLGdyaWQtY29sdW1uLXNwYW4sZ3JpZC1jb2x1bW4tc3RhcnQsZm9udC13ZWlnaHQsbGluZS1jbGFtcCxgICtcclxuICAgIGBsaW5lLWhlaWdodCxvcGFjaXR5LG9yZGVyLG9ycGhhbnMsdGFiLXNpemUsd2lkb3dzLHotaW5kZXgsem9vbSxgICtcclxuICAgIC8vIFNWR1xyXG4gICAgYGZpbGwtb3BhY2l0eSxmbG9vZC1vcGFjaXR5LHN0b3Atb3BhY2l0eSxzdHJva2UtZGFzaGFycmF5LHN0cm9rZS1kYXNob2Zmc2V0LGAgK1xyXG4gICAgYHN0cm9rZS1taXRlcmxpbWl0LHN0cm9rZS1vcGFjaXR5LHN0cm9rZS13aWR0aGApO1xyXG4vKipcclxuICogS25vd24gYXR0cmlidXRlcywgdGhpcyBpcyB1c2VkIGZvciBzdHJpbmdpZmljYXRpb24gb2YgcnVudGltZSBzdGF0aWMgbm9kZXNcclxuICogc28gdGhhdCB3ZSBkb24ndCBzdHJpbmdpZnkgYmluZGluZ3MgdGhhdCBjYW5ub3QgYmUgc2V0IGZyb20gSFRNTC5cclxuICogRG9uJ3QgYWxzbyBmb3JnZXQgdG8gYWxsb3cgYGRhdGEtKmAgYW5kIGBhcmlhLSpgIVxyXG4gKiBHZW5lcmF0ZWQgZnJvbSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0F0dHJpYnV0ZXNcclxuICovXHJcbmNvbnN0IGlzS25vd25BdHRyID0gLyojX19QVVJFX18qLyBtYWtlTWFwKGBhY2NlcHQsYWNjZXB0LWNoYXJzZXQsYWNjZXNza2V5LGFjdGlvbixhbGlnbixhbGxvdyxhbHQsYXN5bmMsYCArXHJcbiAgICBgYXV0b2NhcGl0YWxpemUsYXV0b2NvbXBsZXRlLGF1dG9mb2N1cyxhdXRvcGxheSxiYWNrZ3JvdW5kLGJnY29sb3IsYCArXHJcbiAgICBgYm9yZGVyLGJ1ZmZlcmVkLGNhcHR1cmUsY2hhbGxlbmdlLGNoYXJzZXQsY2hlY2tlZCxjaXRlLGNsYXNzLGNvZGUsYCArXHJcbiAgICBgY29kZWJhc2UsY29sb3IsY29scyxjb2xzcGFuLGNvbnRlbnQsY29udGVudGVkaXRhYmxlLGNvbnRleHRtZW51LGNvbnRyb2xzLGAgK1xyXG4gICAgYGNvb3Jkcyxjcm9zc29yaWdpbixjc3AsZGF0YSxkYXRldGltZSxkZWNvZGluZyxkZWZhdWx0LGRlZmVyLGRpcixkaXJuYW1lLGAgK1xyXG4gICAgYGRpc2FibGVkLGRvd25sb2FkLGRyYWdnYWJsZSxkcm9wem9uZSxlbmN0eXBlLGVudGVya2V5aGludCxmb3IsZm9ybSxgICtcclxuICAgIGBmb3JtYWN0aW9uLGZvcm1lbmN0eXBlLGZvcm1tZXRob2QsZm9ybW5vdmFsaWRhdGUsZm9ybXRhcmdldCxoZWFkZXJzLGAgK1xyXG4gICAgYGhlaWdodCxoaWRkZW4saGlnaCxocmVmLGhyZWZsYW5nLGh0dHAtZXF1aXYsaWNvbixpZCxpbXBvcnRhbmNlLGludGVncml0eSxgICtcclxuICAgIGBpc21hcCxpdGVtcHJvcCxrZXl0eXBlLGtpbmQsbGFiZWwsbGFuZyxsYW5ndWFnZSxsb2FkaW5nLGxpc3QsbG9vcCxsb3csYCArXHJcbiAgICBgbWFuaWZlc3QsbWF4LG1heGxlbmd0aCxtaW5sZW5ndGgsbWVkaWEsbWluLG11bHRpcGxlLG11dGVkLG5hbWUsbm92YWxpZGF0ZSxgICtcclxuICAgIGBvcGVuLG9wdGltdW0scGF0dGVybixwaW5nLHBsYWNlaG9sZGVyLHBvc3RlcixwcmVsb2FkLHJhZGlvZ3JvdXAscmVhZG9ubHksYCArXHJcbiAgICBgcmVmZXJyZXJwb2xpY3kscmVsLHJlcXVpcmVkLHJldmVyc2VkLHJvd3Mscm93c3BhbixzYW5kYm94LHNjb3BlLHNjb3BlZCxgICtcclxuICAgIGBzZWxlY3RlZCxzaGFwZSxzaXplLHNpemVzLHNsb3Qsc3BhbixzcGVsbGNoZWNrLHNyYyxzcmNkb2Msc3JjbGFuZyxzcmNzZXQsYCArXHJcbiAgICBgc3RhcnQsc3RlcCxzdHlsZSxzdW1tYXJ5LHRhYmluZGV4LHRhcmdldCx0aXRsZSx0cmFuc2xhdGUsdHlwZSx1c2VtYXAsYCArXHJcbiAgICBgdmFsdWUsd2lkdGgsd3JhcGApO1xuXG5mdW5jdGlvbiBub3JtYWxpemVTdHlsZSh2YWx1ZSkge1xyXG4gICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XHJcbiAgICAgICAgY29uc3QgcmVzID0ge307XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWx1ZS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCBpdGVtID0gdmFsdWVbaV07XHJcbiAgICAgICAgICAgIGNvbnN0IG5vcm1hbGl6ZWQgPSBub3JtYWxpemVTdHlsZShpc1N0cmluZyhpdGVtKSA/IHBhcnNlU3RyaW5nU3R5bGUoaXRlbSkgOiBpdGVtKTtcclxuICAgICAgICAgICAgaWYgKG5vcm1hbGl6ZWQpIHtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIG5vcm1hbGl6ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXNba2V5XSA9IG5vcm1hbGl6ZWRba2V5XTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoaXNPYmplY3QodmFsdWUpKSB7XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgfVxyXG59XHJcbmNvbnN0IGxpc3REZWxpbWl0ZXJSRSA9IC87KD8hW14oXSpcXCkpL2c7XHJcbmNvbnN0IHByb3BlcnR5RGVsaW1pdGVyUkUgPSAvOiguKykvO1xyXG5mdW5jdGlvbiBwYXJzZVN0cmluZ1N0eWxlKGNzc1RleHQpIHtcclxuICAgIGNvbnN0IHJldCA9IHt9O1xyXG4gICAgY3NzVGV4dC5zcGxpdChsaXN0RGVsaW1pdGVyUkUpLmZvckVhY2goaXRlbSA9PiB7XHJcbiAgICAgICAgaWYgKGl0ZW0pIHtcclxuICAgICAgICAgICAgY29uc3QgdG1wID0gaXRlbS5zcGxpdChwcm9wZXJ0eURlbGltaXRlclJFKTtcclxuICAgICAgICAgICAgdG1wLmxlbmd0aCA+IDEgJiYgKHJldFt0bXBbMF0udHJpbSgpXSA9IHRtcFsxXS50cmltKCkpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHJldDtcclxufVxyXG5mdW5jdGlvbiBzdHJpbmdpZnlTdHlsZShzdHlsZXMpIHtcclxuICAgIGxldCByZXQgPSAnJztcclxuICAgIGlmICghc3R5bGVzKSB7XHJcbiAgICAgICAgcmV0dXJuIHJldDtcclxuICAgIH1cclxuICAgIGZvciAoY29uc3Qga2V5IGluIHN0eWxlcykge1xyXG4gICAgICAgIGNvbnN0IHZhbHVlID0gc3R5bGVzW2tleV07XHJcbiAgICAgICAgY29uc3Qgbm9ybWFsaXplZEtleSA9IGtleS5zdGFydHNXaXRoKGAtLWApID8ga2V5IDogaHlwaGVuYXRlKGtleSk7XHJcbiAgICAgICAgaWYgKGlzU3RyaW5nKHZhbHVlKSB8fFxyXG4gICAgICAgICAgICAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyAmJiBpc05vVW5pdE51bWVyaWNTdHlsZVByb3Aobm9ybWFsaXplZEtleSkpKSB7XHJcbiAgICAgICAgICAgIC8vIG9ubHkgcmVuZGVyIHZhbGlkIHZhbHVlc1xyXG4gICAgICAgICAgICByZXQgKz0gYCR7bm9ybWFsaXplZEtleX06JHt2YWx1ZX07YDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmV0O1xyXG59XHJcbmZ1bmN0aW9uIG5vcm1hbGl6ZUNsYXNzKHZhbHVlKSB7XHJcbiAgICBsZXQgcmVzID0gJyc7XHJcbiAgICBpZiAoaXNTdHJpbmcodmFsdWUpKSB7XHJcbiAgICAgICAgcmVzID0gdmFsdWU7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChpc0FycmF5KHZhbHVlKSkge1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmFsdWUubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgcmVzICs9IG5vcm1hbGl6ZUNsYXNzKHZhbHVlW2ldKSArICcgJztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChpc09iamVjdCh2YWx1ZSkpIHtcclxuICAgICAgICBmb3IgKGNvbnN0IG5hbWUgaW4gdmFsdWUpIHtcclxuICAgICAgICAgICAgaWYgKHZhbHVlW25hbWVdKSB7XHJcbiAgICAgICAgICAgICAgICByZXMgKz0gbmFtZSArICcgJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiByZXMudHJpbSgpO1xyXG59XG5cbi8vIFRoZXNlIHRhZyBjb25maWdzIGFyZSBzaGFyZWQgYmV0d2VlbiBjb21waWxlci1kb20gYW5kIHJ1bnRpbWUtZG9tLCBzbyB0aGV5XHJcbi8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudFxyXG5jb25zdCBIVE1MX1RBR1MgPSAnaHRtbCxib2R5LGJhc2UsaGVhZCxsaW5rLG1ldGEsc3R5bGUsdGl0bGUsYWRkcmVzcyxhcnRpY2xlLGFzaWRlLGZvb3RlciwnICtcclxuICAgICdoZWFkZXIsaDEsaDIsaDMsaDQsaDUsaDYsaGdyb3VwLG5hdixzZWN0aW9uLGRpdixkZCxkbCxkdCxmaWdjYXB0aW9uLCcgK1xyXG4gICAgJ2ZpZ3VyZSxwaWN0dXJlLGhyLGltZyxsaSxtYWluLG9sLHAscHJlLHVsLGEsYixhYmJyLGJkaSxiZG8sYnIsY2l0ZSxjb2RlLCcgK1xyXG4gICAgJ2RhdGEsZGZuLGVtLGksa2JkLG1hcmsscSxycCxydCxydGMscnVieSxzLHNhbXAsc21hbGwsc3BhbixzdHJvbmcsc3ViLHN1cCwnICtcclxuICAgICd0aW1lLHUsdmFyLHdicixhcmVhLGF1ZGlvLG1hcCx0cmFjayx2aWRlbyxlbWJlZCxvYmplY3QscGFyYW0sc291cmNlLCcgK1xyXG4gICAgJ2NhbnZhcyxzY3JpcHQsbm9zY3JpcHQsZGVsLGlucyxjYXB0aW9uLGNvbCxjb2xncm91cCx0YWJsZSx0aGVhZCx0Ym9keSx0ZCwnICtcclxuICAgICd0aCx0cixidXR0b24sZGF0YWxpc3QsZmllbGRzZXQsZm9ybSxpbnB1dCxsYWJlbCxsZWdlbmQsbWV0ZXIsb3B0Z3JvdXAsJyArXHJcbiAgICAnb3B0aW9uLG91dHB1dCxwcm9ncmVzcyxzZWxlY3QsdGV4dGFyZWEsZGV0YWlscyxkaWFsb2csbWVudSwnICtcclxuICAgICdzdW1tYXJ5LHRlbXBsYXRlLGJsb2NrcXVvdGUsaWZyYW1lLHRmb290JztcclxuLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvU1ZHL0VsZW1lbnRcclxuY29uc3QgU1ZHX1RBR1MgPSAnc3ZnLGFuaW1hdGUsYW5pbWF0ZU1vdGlvbixhbmltYXRlVHJhbnNmb3JtLGNpcmNsZSxjbGlwUGF0aCxjb2xvci1wcm9maWxlLCcgK1xyXG4gICAgJ2RlZnMsZGVzYyxkaXNjYXJkLGVsbGlwc2UsZmVCbGVuZCxmZUNvbG9yTWF0cml4LGZlQ29tcG9uZW50VHJhbnNmZXIsJyArXHJcbiAgICAnZmVDb21wb3NpdGUsZmVDb252b2x2ZU1hdHJpeCxmZURpZmZ1c2VMaWdodGluZyxmZURpc3BsYWNlbWVudE1hcCwnICtcclxuICAgICdmZURpc3RhbmNlTGlnaHQsZmVEcm9wU2hhZG93LGZlRmxvb2QsZmVGdW5jQSxmZUZ1bmNCLGZlRnVuY0csZmVGdW5jUiwnICtcclxuICAgICdmZUdhdXNzaWFuQmx1cixmZUltYWdlLGZlTWVyZ2UsZmVNZXJnZU5vZGUsZmVNb3JwaG9sb2d5LGZlT2Zmc2V0LCcgK1xyXG4gICAgJ2ZlUG9pbnRMaWdodCxmZVNwZWN1bGFyTGlnaHRpbmcsZmVTcG90TGlnaHQsZmVUaWxlLGZlVHVyYnVsZW5jZSxmaWx0ZXIsJyArXHJcbiAgICAnZm9yZWlnbk9iamVjdCxnLGhhdGNoLGhhdGNocGF0aCxpbWFnZSxsaW5lLGxpbmVhckdyYWRpZW50LG1hcmtlcixtYXNrLCcgK1xyXG4gICAgJ21lc2gsbWVzaGdyYWRpZW50LG1lc2hwYXRjaCxtZXNocm93LG1ldGFkYXRhLG1wYXRoLHBhdGgscGF0dGVybiwnICtcclxuICAgICdwb2x5Z29uLHBvbHlsaW5lLHJhZGlhbEdyYWRpZW50LHJlY3Qsc2V0LHNvbGlkY29sb3Isc3RvcCxzd2l0Y2gsc3ltYm9sLCcgK1xyXG4gICAgJ3RleHQsdGV4dFBhdGgsdGl0bGUsdHNwYW4sdW5rbm93bix1c2Usdmlldyc7XHJcbmNvbnN0IFZPSURfVEFHUyA9ICdhcmVhLGJhc2UsYnIsY29sLGVtYmVkLGhyLGltZyxpbnB1dCxsaW5rLG1ldGEscGFyYW0sc291cmNlLHRyYWNrLHdicic7XHJcbmNvbnN0IGlzSFRNTFRhZyA9IC8qI19fUFVSRV9fKi8gbWFrZU1hcChIVE1MX1RBR1MpO1xyXG5jb25zdCBpc1NWR1RhZyA9IC8qI19fUFVSRV9fKi8gbWFrZU1hcChTVkdfVEFHUyk7XHJcbmNvbnN0IGlzVm9pZFRhZyA9IC8qI19fUFVSRV9fKi8gbWFrZU1hcChWT0lEX1RBR1MpO1xuXG5jb25zdCBlc2NhcGVSRSA9IC9bXCInJjw+XS87XHJcbmZ1bmN0aW9uIGVzY2FwZUh0bWwoc3RyaW5nKSB7XHJcbiAgICBjb25zdCBzdHIgPSAnJyArIHN0cmluZztcclxuICAgIGNvbnN0IG1hdGNoID0gZXNjYXBlUkUuZXhlYyhzdHIpO1xyXG4gICAgaWYgKCFtYXRjaCkge1xyXG4gICAgICAgIHJldHVybiBzdHI7XHJcbiAgICB9XHJcbiAgICBsZXQgaHRtbCA9ICcnO1xyXG4gICAgbGV0IGVzY2FwZWQ7XHJcbiAgICBsZXQgaW5kZXg7XHJcbiAgICBsZXQgbGFzdEluZGV4ID0gMDtcclxuICAgIGZvciAoaW5kZXggPSBtYXRjaC5pbmRleDsgaW5kZXggPCBzdHIubGVuZ3RoOyBpbmRleCsrKSB7XHJcbiAgICAgICAgc3dpdGNoIChzdHIuY2hhckNvZGVBdChpbmRleCkpIHtcclxuICAgICAgICAgICAgY2FzZSAzNDogLy8gXCJcclxuICAgICAgICAgICAgICAgIGVzY2FwZWQgPSAnJnF1b3Q7JztcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIDM4OiAvLyAmXHJcbiAgICAgICAgICAgICAgICBlc2NhcGVkID0gJyZhbXA7JztcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIDM5OiAvLyAnXHJcbiAgICAgICAgICAgICAgICBlc2NhcGVkID0gJyYjMzk7JztcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIDYwOiAvLyA8XHJcbiAgICAgICAgICAgICAgICBlc2NhcGVkID0gJyZsdDsnO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgNjI6IC8vID5cclxuICAgICAgICAgICAgICAgIGVzY2FwZWQgPSAnJmd0Oyc7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobGFzdEluZGV4ICE9PSBpbmRleCkge1xyXG4gICAgICAgICAgICBodG1sICs9IHN0ci5zdWJzdHJpbmcobGFzdEluZGV4LCBpbmRleCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxhc3RJbmRleCA9IGluZGV4ICsgMTtcclxuICAgICAgICBodG1sICs9IGVzY2FwZWQ7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbGFzdEluZGV4ICE9PSBpbmRleCA/IGh0bWwgKyBzdHIuc3Vic3RyaW5nKGxhc3RJbmRleCwgaW5kZXgpIDogaHRtbDtcclxufVxyXG4vLyBodHRwczovL3d3dy53My5vcmcvVFIvaHRtbDUyL3N5bnRheC5odG1sI2NvbW1lbnRzXHJcbmNvbnN0IGNvbW1lbnRTdHJpcFJFID0gL14tPz58PCEtLXwtLT58LS0hPnw8IS0kL2c7XHJcbmZ1bmN0aW9uIGVzY2FwZUh0bWxDb21tZW50KHNyYykge1xyXG4gICAgcmV0dXJuIHNyYy5yZXBsYWNlKGNvbW1lbnRTdHJpcFJFLCAnJyk7XHJcbn1cblxuZnVuY3Rpb24gbG9vc2VDb21wYXJlQXJyYXlzKGEsIGIpIHtcclxuICAgIGlmIChhLmxlbmd0aCAhPT0gYi5sZW5ndGgpXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgbGV0IGVxdWFsID0gdHJ1ZTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBlcXVhbCAmJiBpIDwgYS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGVxdWFsID0gbG9vc2VFcXVhbChhW2ldLCBiW2ldKTtcclxuICAgIH1cclxuICAgIHJldHVybiBlcXVhbDtcclxufVxyXG5mdW5jdGlvbiBsb29zZUVxdWFsKGEsIGIpIHtcclxuICAgIGlmIChhID09PSBiKVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgbGV0IGFWYWxpZFR5cGUgPSBpc0RhdGUoYSk7XHJcbiAgICBsZXQgYlZhbGlkVHlwZSA9IGlzRGF0ZShiKTtcclxuICAgIGlmIChhVmFsaWRUeXBlIHx8IGJWYWxpZFR5cGUpIHtcclxuICAgICAgICByZXR1cm4gYVZhbGlkVHlwZSAmJiBiVmFsaWRUeXBlID8gYS5nZXRUaW1lKCkgPT09IGIuZ2V0VGltZSgpIDogZmFsc2U7XHJcbiAgICB9XHJcbiAgICBhVmFsaWRUeXBlID0gaXNBcnJheShhKTtcclxuICAgIGJWYWxpZFR5cGUgPSBpc0FycmF5KGIpO1xyXG4gICAgaWYgKGFWYWxpZFR5cGUgfHwgYlZhbGlkVHlwZSkge1xyXG4gICAgICAgIHJldHVybiBhVmFsaWRUeXBlICYmIGJWYWxpZFR5cGUgPyBsb29zZUNvbXBhcmVBcnJheXMoYSwgYikgOiBmYWxzZTtcclxuICAgIH1cclxuICAgIGFWYWxpZFR5cGUgPSBpc09iamVjdChhKTtcclxuICAgIGJWYWxpZFR5cGUgPSBpc09iamVjdChiKTtcclxuICAgIGlmIChhVmFsaWRUeXBlIHx8IGJWYWxpZFR5cGUpIHtcclxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWY6IHRoaXMgaWYgd2lsbCBwcm9iYWJseSBuZXZlciBiZSBjYWxsZWQgKi9cclxuICAgICAgICBpZiAoIWFWYWxpZFR5cGUgfHwgIWJWYWxpZFR5cGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBhS2V5c0NvdW50ID0gT2JqZWN0LmtleXMoYSkubGVuZ3RoO1xyXG4gICAgICAgIGNvbnN0IGJLZXlzQ291bnQgPSBPYmplY3Qua2V5cyhiKS5sZW5ndGg7XHJcbiAgICAgICAgaWYgKGFLZXlzQ291bnQgIT09IGJLZXlzQ291bnQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBhKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGFIYXNLZXkgPSBhLmhhc093blByb3BlcnR5KGtleSk7XHJcbiAgICAgICAgICAgIGNvbnN0IGJIYXNLZXkgPSBiLmhhc093blByb3BlcnR5KGtleSk7XHJcbiAgICAgICAgICAgIGlmICgoYUhhc0tleSAmJiAhYkhhc0tleSkgfHxcclxuICAgICAgICAgICAgICAgICghYUhhc0tleSAmJiBiSGFzS2V5KSB8fFxyXG4gICAgICAgICAgICAgICAgIWxvb3NlRXF1YWwoYVtrZXldLCBiW2tleV0pKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gU3RyaW5nKGEpID09PSBTdHJpbmcoYik7XHJcbn1cclxuZnVuY3Rpb24gbG9vc2VJbmRleE9mKGFyciwgdmFsKSB7XHJcbiAgICByZXR1cm4gYXJyLmZpbmRJbmRleChpdGVtID0+IGxvb3NlRXF1YWwoaXRlbSwgdmFsKSk7XHJcbn1cblxuLyoqXHJcbiAqIEZvciBjb252ZXJ0aW5nIHt7IGludGVycG9sYXRpb24gfX0gdmFsdWVzIHRvIGRpc3BsYXllZCBzdHJpbmdzLlxyXG4gKiBAcHJpdmF0ZVxyXG4gKi9cclxuY29uc3QgdG9EaXNwbGF5U3RyaW5nID0gKHZhbCkgPT4ge1xyXG4gICAgcmV0dXJuIHZhbCA9PSBudWxsXHJcbiAgICAgICAgPyAnJ1xyXG4gICAgICAgIDogaXNPYmplY3QodmFsKVxyXG4gICAgICAgICAgICA/IEpTT04uc3RyaW5naWZ5KHZhbCwgcmVwbGFjZXIsIDIpXHJcbiAgICAgICAgICAgIDogU3RyaW5nKHZhbCk7XHJcbn07XHJcbmNvbnN0IHJlcGxhY2VyID0gKF9rZXksIHZhbCkgPT4ge1xyXG4gICAgaWYgKGlzTWFwKHZhbCkpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBbYE1hcCgke3ZhbC5zaXplfSlgXTogWy4uLnZhbC5lbnRyaWVzKCldLnJlZHVjZSgoZW50cmllcywgW2tleSwgdmFsXSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgZW50cmllc1tgJHtrZXl9ID0+YF0gPSB2YWw7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZW50cmllcztcclxuICAgICAgICAgICAgfSwge30pXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGlzU2V0KHZhbCkpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBbYFNldCgke3ZhbC5zaXplfSlgXTogWy4uLnZhbC52YWx1ZXMoKV1cclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoaXNPYmplY3QodmFsKSAmJiAhaXNBcnJheSh2YWwpICYmICFpc1BsYWluT2JqZWN0KHZhbCkpIHtcclxuICAgICAgICByZXR1cm4gU3RyaW5nKHZhbCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdmFsO1xyXG59O1xuXG4vKipcclxuICogTGlzdCBvZiBAYmFiZWwvcGFyc2VyIHBsdWdpbnMgdGhhdCBhcmUgdXNlZCBmb3IgdGVtcGxhdGUgZXhwcmVzc2lvblxyXG4gKiB0cmFuc2Zvcm1zIGFuZCBTRkMgc2NyaXB0IHRyYW5zZm9ybXMuIEJ5IGRlZmF1bHQgd2UgZW5hYmxlIHByb3Bvc2FscyBzbGF0ZWRcclxuICogZm9yIEVTMjAyMC4gVGhpcyB3aWxsIG5lZWQgdG8gYmUgdXBkYXRlZCBhcyB0aGUgc3BlYyBtb3ZlcyBmb3J3YXJkLlxyXG4gKiBGdWxsIGxpc3QgYXQgaHR0cHM6Ly9iYWJlbGpzLmlvL2RvY3MvZW4vbmV4dC9iYWJlbC1wYXJzZXIjcGx1Z2luc1xyXG4gKi9cclxuY29uc3QgYmFiZWxQYXJzZXJEZWZhdWx0UGx1Z2lucyA9IFtcclxuICAgICdiaWdJbnQnLFxyXG4gICAgJ29wdGlvbmFsQ2hhaW5pbmcnLFxyXG4gICAgJ251bGxpc2hDb2FsZXNjaW5nT3BlcmF0b3InXHJcbl07XHJcbmNvbnN0IEVNUFRZX09CSiA9IChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKVxyXG4gICAgPyBPYmplY3QuZnJlZXplKHt9KVxyXG4gICAgOiB7fTtcclxuY29uc3QgRU1QVFlfQVJSID0gKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpID8gT2JqZWN0LmZyZWV6ZShbXSkgOiBbXTtcclxuY29uc3QgTk9PUCA9ICgpID0+IHsgfTtcclxuLyoqXHJcbiAqIEFsd2F5cyByZXR1cm4gZmFsc2UuXHJcbiAqL1xyXG5jb25zdCBOTyA9ICgpID0+IGZhbHNlO1xyXG5jb25zdCBvblJFID0gL15vblteYS16XS87XHJcbmNvbnN0IGlzT24gPSAoa2V5KSA9PiBvblJFLnRlc3Qoa2V5KTtcclxuY29uc3QgaXNNb2RlbExpc3RlbmVyID0gKGtleSkgPT4ga2V5LnN0YXJ0c1dpdGgoJ29uVXBkYXRlOicpO1xyXG5jb25zdCBleHRlbmQgPSBPYmplY3QuYXNzaWduO1xyXG5jb25zdCByZW1vdmUgPSAoYXJyLCBlbCkgPT4ge1xyXG4gICAgY29uc3QgaSA9IGFyci5pbmRleE9mKGVsKTtcclxuICAgIGlmIChpID4gLTEpIHtcclxuICAgICAgICBhcnIuc3BsaWNlKGksIDEpO1xyXG4gICAgfVxyXG59O1xyXG5jb25zdCBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XHJcbmNvbnN0IGhhc093biA9ICh2YWwsIGtleSkgPT4gaGFzT3duUHJvcGVydHkuY2FsbCh2YWwsIGtleSk7XHJcbmNvbnN0IGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xyXG5jb25zdCBpc01hcCA9ICh2YWwpID0+IHRvVHlwZVN0cmluZyh2YWwpID09PSAnW29iamVjdCBNYXBdJztcclxuY29uc3QgaXNTZXQgPSAodmFsKSA9PiB0b1R5cGVTdHJpbmcodmFsKSA9PT0gJ1tvYmplY3QgU2V0XSc7XHJcbmNvbnN0IGlzRGF0ZSA9ICh2YWwpID0+IHZhbCBpbnN0YW5jZW9mIERhdGU7XHJcbmNvbnN0IGlzRnVuY3Rpb24gPSAodmFsKSA9PiB0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nO1xyXG5jb25zdCBpc1N0cmluZyA9ICh2YWwpID0+IHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnO1xyXG5jb25zdCBpc1N5bWJvbCA9ICh2YWwpID0+IHR5cGVvZiB2YWwgPT09ICdzeW1ib2wnO1xyXG5jb25zdCBpc09iamVjdCA9ICh2YWwpID0+IHZhbCAhPT0gbnVsbCAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0JztcclxuY29uc3QgaXNQcm9taXNlID0gKHZhbCkgPT4ge1xyXG4gICAgcmV0dXJuIGlzT2JqZWN0KHZhbCkgJiYgaXNGdW5jdGlvbih2YWwudGhlbikgJiYgaXNGdW5jdGlvbih2YWwuY2F0Y2gpO1xyXG59O1xyXG5jb25zdCBvYmplY3RUb1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XHJcbmNvbnN0IHRvVHlwZVN0cmluZyA9ICh2YWx1ZSkgPT4gb2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XHJcbmNvbnN0IHRvUmF3VHlwZSA9ICh2YWx1ZSkgPT4ge1xyXG4gICAgLy8gZXh0cmFjdCBcIlJhd1R5cGVcIiBmcm9tIHN0cmluZ3MgbGlrZSBcIltvYmplY3QgUmF3VHlwZV1cIlxyXG4gICAgcmV0dXJuIHRvVHlwZVN0cmluZyh2YWx1ZSkuc2xpY2UoOCwgLTEpO1xyXG59O1xyXG5jb25zdCBpc1BsYWluT2JqZWN0ID0gKHZhbCkgPT4gdG9UeXBlU3RyaW5nKHZhbCkgPT09ICdbb2JqZWN0IE9iamVjdF0nO1xyXG5jb25zdCBpc0ludGVnZXJLZXkgPSAoa2V5KSA9PiBpc1N0cmluZyhrZXkpICYmXHJcbiAgICBrZXkgIT09ICdOYU4nICYmXHJcbiAgICBrZXlbMF0gIT09ICctJyAmJlxyXG4gICAgJycgKyBwYXJzZUludChrZXksIDEwKSA9PT0ga2V5O1xyXG5jb25zdCBpc1Jlc2VydmVkUHJvcCA9IC8qI19fUFVSRV9fKi8gbWFrZU1hcChcclxuLy8gdGhlIGxlYWRpbmcgY29tbWEgaXMgaW50ZW50aW9uYWwgc28gZW1wdHkgc3RyaW5nIFwiXCIgaXMgYWxzbyBpbmNsdWRlZFxyXG4nLGtleSxyZWYsJyArXHJcbiAgICAnb25Wbm9kZUJlZm9yZU1vdW50LG9uVm5vZGVNb3VudGVkLCcgK1xyXG4gICAgJ29uVm5vZGVCZWZvcmVVcGRhdGUsb25Wbm9kZVVwZGF0ZWQsJyArXHJcbiAgICAnb25Wbm9kZUJlZm9yZVVubW91bnQsb25Wbm9kZVVubW91bnRlZCcpO1xyXG5jb25zdCBjYWNoZVN0cmluZ0Z1bmN0aW9uID0gKGZuKSA9PiB7XHJcbiAgICBjb25zdCBjYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XHJcbiAgICByZXR1cm4gKChzdHIpID0+IHtcclxuICAgICAgICBjb25zdCBoaXQgPSBjYWNoZVtzdHJdO1xyXG4gICAgICAgIHJldHVybiBoaXQgfHwgKGNhY2hlW3N0cl0gPSBmbihzdHIpKTtcclxuICAgIH0pO1xyXG59O1xyXG5jb25zdCBjYW1lbGl6ZVJFID0gLy0oXFx3KS9nO1xyXG4vKipcclxuICogQHByaXZhdGVcclxuICovXHJcbmNvbnN0IGNhbWVsaXplID0gY2FjaGVTdHJpbmdGdW5jdGlvbigoc3RyKSA9PiB7XHJcbiAgICByZXR1cm4gc3RyLnJlcGxhY2UoY2FtZWxpemVSRSwgKF8sIGMpID0+IChjID8gYy50b1VwcGVyQ2FzZSgpIDogJycpKTtcclxufSk7XHJcbmNvbnN0IGh5cGhlbmF0ZVJFID0gL1xcQihbQS1aXSkvZztcclxuLyoqXHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG5jb25zdCBoeXBoZW5hdGUgPSBjYWNoZVN0cmluZ0Z1bmN0aW9uKChzdHIpID0+IHN0ci5yZXBsYWNlKGh5cGhlbmF0ZVJFLCAnLSQxJykudG9Mb3dlckNhc2UoKSk7XHJcbi8qKlxyXG4gKiBAcHJpdmF0ZVxyXG4gKi9cclxuY29uc3QgY2FwaXRhbGl6ZSA9IGNhY2hlU3RyaW5nRnVuY3Rpb24oKHN0cikgPT4gc3RyLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc3RyLnNsaWNlKDEpKTtcclxuLyoqXHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG5jb25zdCB0b0hhbmRsZXJLZXkgPSBjYWNoZVN0cmluZ0Z1bmN0aW9uKChzdHIpID0+IChzdHIgPyBgb24ke2NhcGl0YWxpemUoc3RyKX1gIDogYGApKTtcclxuLy8gY29tcGFyZSB3aGV0aGVyIGEgdmFsdWUgaGFzIGNoYW5nZWQsIGFjY291bnRpbmcgZm9yIE5hTi5cclxuY29uc3QgaGFzQ2hhbmdlZCA9ICh2YWx1ZSwgb2xkVmFsdWUpID0+IHZhbHVlICE9PSBvbGRWYWx1ZSAmJiAodmFsdWUgPT09IHZhbHVlIHx8IG9sZFZhbHVlID09PSBvbGRWYWx1ZSk7XHJcbmNvbnN0IGludm9rZUFycmF5Rm5zID0gKGZucywgYXJnKSA9PiB7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZucy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGZuc1tpXShhcmcpO1xyXG4gICAgfVxyXG59O1xyXG5jb25zdCBkZWYgPSAob2JqLCBrZXksIHZhbHVlKSA9PiB7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgdmFsdWVcclxuICAgIH0pO1xyXG59O1xyXG5jb25zdCB0b051bWJlciA9ICh2YWwpID0+IHtcclxuICAgIGNvbnN0IG4gPSBwYXJzZUZsb2F0KHZhbCk7XHJcbiAgICByZXR1cm4gaXNOYU4obikgPyB2YWwgOiBuO1xyXG59O1xyXG5sZXQgX2dsb2JhbFRoaXM7XHJcbmNvbnN0IGdldEdsb2JhbFRoaXMgPSAoKSA9PiB7XHJcbiAgICByZXR1cm4gKF9nbG9iYWxUaGlzIHx8XHJcbiAgICAgICAgKF9nbG9iYWxUaGlzID1cclxuICAgICAgICAgICAgdHlwZW9mIGdsb2JhbFRoaXMgIT09ICd1bmRlZmluZWQnXHJcbiAgICAgICAgICAgICAgICA/IGdsb2JhbFRoaXNcclxuICAgICAgICAgICAgICAgIDogdHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnXHJcbiAgICAgICAgICAgICAgICAgICAgPyBzZWxmXHJcbiAgICAgICAgICAgICAgICAgICAgOiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICA/IHdpbmRvd1xyXG4gICAgICAgICAgICAgICAgICAgICAgICA6IHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGdsb2JhbFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiB7fSkpO1xyXG59O1xuXG5leHBvcnQgeyBFTVBUWV9BUlIsIEVNUFRZX09CSiwgTk8sIE5PT1AsIFBhdGNoRmxhZ05hbWVzLCBiYWJlbFBhcnNlckRlZmF1bHRQbHVnaW5zLCBjYW1lbGl6ZSwgY2FwaXRhbGl6ZSwgZGVmLCBlc2NhcGVIdG1sLCBlc2NhcGVIdG1sQ29tbWVudCwgZXh0ZW5kLCBnZW5lcmF0ZUNvZGVGcmFtZSwgZ2V0R2xvYmFsVGhpcywgaGFzQ2hhbmdlZCwgaGFzT3duLCBoeXBoZW5hdGUsIGludm9rZUFycmF5Rm5zLCBpc0FycmF5LCBpc0Jvb2xlYW5BdHRyLCBpc0RhdGUsIGlzRnVuY3Rpb24sIGlzR2xvYmFsbHlXaGl0ZWxpc3RlZCwgaXNIVE1MVGFnLCBpc0ludGVnZXJLZXksIGlzS25vd25BdHRyLCBpc01hcCwgaXNNb2RlbExpc3RlbmVyLCBpc05vVW5pdE51bWVyaWNTdHlsZVByb3AsIGlzT2JqZWN0LCBpc09uLCBpc1BsYWluT2JqZWN0LCBpc1Byb21pc2UsIGlzUmVzZXJ2ZWRQcm9wLCBpc1NTUlNhZmVBdHRyTmFtZSwgaXNTVkdUYWcsIGlzU2V0LCBpc1NwZWNpYWxCb29sZWFuQXR0ciwgaXNTdHJpbmcsIGlzU3ltYm9sLCBpc1ZvaWRUYWcsIGxvb3NlRXF1YWwsIGxvb3NlSW5kZXhPZiwgbWFrZU1hcCwgbm9ybWFsaXplQ2xhc3MsIG5vcm1hbGl6ZVN0eWxlLCBvYmplY3RUb1N0cmluZywgcGFyc2VTdHJpbmdTdHlsZSwgcHJvcHNUb0F0dHJNYXAsIHJlbW92ZSwgc2xvdEZsYWdzVGV4dCwgc3RyaW5naWZ5U3R5bGUsIHRvRGlzcGxheVN0cmluZywgdG9IYW5kbGVyS2V5LCB0b051bWJlciwgdG9SYXdUeXBlLCB0b1R5cGVTdHJpbmcgfTtcbiIsImltcG9ydCB7IEVNUFRZX09CSiwgaXNBcnJheSwgaXNNYXAsIGlzSW50ZWdlcktleSwgaXNTeW1ib2wsIGV4dGVuZCwgaGFzT3duLCBpc09iamVjdCwgaGFzQ2hhbmdlZCwgY2FwaXRhbGl6ZSwgdG9SYXdUeXBlLCBkZWYsIGlzRnVuY3Rpb24sIE5PT1AgfSBmcm9tICdAdnVlL3NoYXJlZCc7XG5cbmNvbnN0IHRhcmdldE1hcCA9IG5ldyBXZWFrTWFwKCk7XHJcbmNvbnN0IGVmZmVjdFN0YWNrID0gW107XHJcbmxldCBhY3RpdmVFZmZlY3Q7XHJcbmNvbnN0IElURVJBVEVfS0VZID0gU3ltYm9sKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSA/ICdpdGVyYXRlJyA6ICcnKTtcclxuY29uc3QgTUFQX0tFWV9JVEVSQVRFX0tFWSA9IFN5bWJvbCgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgPyAnTWFwIGtleSBpdGVyYXRlJyA6ICcnKTtcclxuZnVuY3Rpb24gaXNFZmZlY3QoZm4pIHtcclxuICAgIHJldHVybiBmbiAmJiBmbi5faXNFZmZlY3QgPT09IHRydWU7XHJcbn1cclxuZnVuY3Rpb24gZWZmZWN0KGZuLCBvcHRpb25zID0gRU1QVFlfT0JKKSB7XHJcbiAgICBpZiAoaXNFZmZlY3QoZm4pKSB7XHJcbiAgICAgICAgZm4gPSBmbi5yYXc7XHJcbiAgICB9XHJcbiAgICBjb25zdCBlZmZlY3QgPSBjcmVhdGVSZWFjdGl2ZUVmZmVjdChmbiwgb3B0aW9ucyk7XHJcbiAgICBpZiAoIW9wdGlvbnMubGF6eSkge1xyXG4gICAgICAgIGVmZmVjdCgpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGVmZmVjdDtcclxufVxyXG5mdW5jdGlvbiBzdG9wKGVmZmVjdCkge1xyXG4gICAgaWYgKGVmZmVjdC5hY3RpdmUpIHtcclxuICAgICAgICBjbGVhbnVwKGVmZmVjdCk7XHJcbiAgICAgICAgaWYgKGVmZmVjdC5vcHRpb25zLm9uU3RvcCkge1xyXG4gICAgICAgICAgICBlZmZlY3Qub3B0aW9ucy5vblN0b3AoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWZmZWN0LmFjdGl2ZSA9IGZhbHNlO1xyXG4gICAgfVxyXG59XHJcbmxldCB1aWQgPSAwO1xyXG5mdW5jdGlvbiBjcmVhdGVSZWFjdGl2ZUVmZmVjdChmbiwgb3B0aW9ucykge1xyXG4gICAgY29uc3QgZWZmZWN0ID0gZnVuY3Rpb24gcmVhY3RpdmVFZmZlY3QoKSB7XHJcbiAgICAgICAgaWYgKCFlZmZlY3QuYWN0aXZlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBvcHRpb25zLnNjaGVkdWxlciA/IHVuZGVmaW5lZCA6IGZuKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghZWZmZWN0U3RhY2suaW5jbHVkZXMoZWZmZWN0KSkge1xyXG4gICAgICAgICAgICBjbGVhbnVwKGVmZmVjdCk7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBlbmFibGVUcmFja2luZygpO1xyXG4gICAgICAgICAgICAgICAgZWZmZWN0U3RhY2sucHVzaChlZmZlY3QpO1xyXG4gICAgICAgICAgICAgICAgYWN0aXZlRWZmZWN0ID0gZWZmZWN0O1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZuKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZmluYWxseSB7XHJcbiAgICAgICAgICAgICAgICBlZmZlY3RTdGFjay5wb3AoKTtcclxuICAgICAgICAgICAgICAgIHJlc2V0VHJhY2tpbmcoKTtcclxuICAgICAgICAgICAgICAgIGFjdGl2ZUVmZmVjdCA9IGVmZmVjdFN0YWNrW2VmZmVjdFN0YWNrLmxlbmd0aCAtIDFdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGVmZmVjdC5pZCA9IHVpZCsrO1xyXG4gICAgZWZmZWN0LmFsbG93UmVjdXJzZSA9ICEhb3B0aW9ucy5hbGxvd1JlY3Vyc2U7XHJcbiAgICBlZmZlY3QuX2lzRWZmZWN0ID0gdHJ1ZTtcclxuICAgIGVmZmVjdC5hY3RpdmUgPSB0cnVlO1xyXG4gICAgZWZmZWN0LnJhdyA9IGZuO1xyXG4gICAgZWZmZWN0LmRlcHMgPSBbXTtcclxuICAgIGVmZmVjdC5vcHRpb25zID0gb3B0aW9ucztcclxuICAgIHJldHVybiBlZmZlY3Q7XHJcbn1cclxuZnVuY3Rpb24gY2xlYW51cChlZmZlY3QpIHtcclxuICAgIGNvbnN0IHsgZGVwcyB9ID0gZWZmZWN0O1xyXG4gICAgaWYgKGRlcHMubGVuZ3RoKSB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkZXBzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGRlcHNbaV0uZGVsZXRlKGVmZmVjdCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRlcHMubGVuZ3RoID0gMDtcclxuICAgIH1cclxufVxyXG5sZXQgc2hvdWxkVHJhY2sgPSB0cnVlO1xyXG5jb25zdCB0cmFja1N0YWNrID0gW107XHJcbmZ1bmN0aW9uIHBhdXNlVHJhY2tpbmcoKSB7XHJcbiAgICB0cmFja1N0YWNrLnB1c2goc2hvdWxkVHJhY2spO1xyXG4gICAgc2hvdWxkVHJhY2sgPSBmYWxzZTtcclxufVxyXG5mdW5jdGlvbiBlbmFibGVUcmFja2luZygpIHtcclxuICAgIHRyYWNrU3RhY2sucHVzaChzaG91bGRUcmFjayk7XHJcbiAgICBzaG91bGRUcmFjayA9IHRydWU7XHJcbn1cclxuZnVuY3Rpb24gcmVzZXRUcmFja2luZygpIHtcclxuICAgIGNvbnN0IGxhc3QgPSB0cmFja1N0YWNrLnBvcCgpO1xyXG4gICAgc2hvdWxkVHJhY2sgPSBsYXN0ID09PSB1bmRlZmluZWQgPyB0cnVlIDogbGFzdDtcclxufVxyXG5mdW5jdGlvbiB0cmFjayh0YXJnZXQsIHR5cGUsIGtleSkge1xyXG4gICAgaWYgKCFzaG91bGRUcmFjayB8fCBhY3RpdmVFZmZlY3QgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGxldCBkZXBzTWFwID0gdGFyZ2V0TWFwLmdldCh0YXJnZXQpO1xyXG4gICAgaWYgKCFkZXBzTWFwKSB7XHJcbiAgICAgICAgdGFyZ2V0TWFwLnNldCh0YXJnZXQsIChkZXBzTWFwID0gbmV3IE1hcCgpKSk7XHJcbiAgICB9XHJcbiAgICBsZXQgZGVwID0gZGVwc01hcC5nZXQoa2V5KTtcclxuICAgIGlmICghZGVwKSB7XHJcbiAgICAgICAgZGVwc01hcC5zZXQoa2V5LCAoZGVwID0gbmV3IFNldCgpKSk7XHJcbiAgICB9XHJcbiAgICBpZiAoIWRlcC5oYXMoYWN0aXZlRWZmZWN0KSkge1xyXG4gICAgICAgIGRlcC5hZGQoYWN0aXZlRWZmZWN0KTtcclxuICAgICAgICBhY3RpdmVFZmZlY3QuZGVwcy5wdXNoKGRlcCk7XHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBhY3RpdmVFZmZlY3Qub3B0aW9ucy5vblRyYWNrKSB7XHJcbiAgICAgICAgICAgIGFjdGl2ZUVmZmVjdC5vcHRpb25zLm9uVHJhY2soe1xyXG4gICAgICAgICAgICAgICAgZWZmZWN0OiBhY3RpdmVFZmZlY3QsXHJcbiAgICAgICAgICAgICAgICB0YXJnZXQsXHJcbiAgICAgICAgICAgICAgICB0eXBlLFxyXG4gICAgICAgICAgICAgICAga2V5XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiB0cmlnZ2VyKHRhcmdldCwgdHlwZSwga2V5LCBuZXdWYWx1ZSwgb2xkVmFsdWUsIG9sZFRhcmdldCkge1xyXG4gICAgY29uc3QgZGVwc01hcCA9IHRhcmdldE1hcC5nZXQodGFyZ2V0KTtcclxuICAgIGlmICghZGVwc01hcCkge1xyXG4gICAgICAgIC8vIG5ldmVyIGJlZW4gdHJhY2tlZFxyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGNvbnN0IGVmZmVjdHMgPSBuZXcgU2V0KCk7XHJcbiAgICBjb25zdCBhZGQgPSAoZWZmZWN0c1RvQWRkKSA9PiB7XHJcbiAgICAgICAgaWYgKGVmZmVjdHNUb0FkZCkge1xyXG4gICAgICAgICAgICBlZmZlY3RzVG9BZGQuZm9yRWFjaChlZmZlY3QgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGVmZmVjdCAhPT0gYWN0aXZlRWZmZWN0IHx8IGVmZmVjdC5hbGxvd1JlY3Vyc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICBlZmZlY3RzLmFkZChlZmZlY3QpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgaWYgKHR5cGUgPT09IFwiY2xlYXJcIiAvKiBDTEVBUiAqLykge1xyXG4gICAgICAgIC8vIGNvbGxlY3Rpb24gYmVpbmcgY2xlYXJlZFxyXG4gICAgICAgIC8vIHRyaWdnZXIgYWxsIGVmZmVjdHMgZm9yIHRhcmdldFxyXG4gICAgICAgIGRlcHNNYXAuZm9yRWFjaChhZGQpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoa2V5ID09PSAnbGVuZ3RoJyAmJiBpc0FycmF5KHRhcmdldCkpIHtcclxuICAgICAgICBkZXBzTWFwLmZvckVhY2goKGRlcCwga2V5KSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChrZXkgPT09ICdsZW5ndGgnIHx8IGtleSA+PSBuZXdWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgYWRkKGRlcCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIC8vIHNjaGVkdWxlIHJ1bnMgZm9yIFNFVCB8IEFERCB8IERFTEVURVxyXG4gICAgICAgIGlmIChrZXkgIT09IHZvaWQgMCkge1xyXG4gICAgICAgICAgICBhZGQoZGVwc01hcC5nZXQoa2V5KSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGFsc28gcnVuIGZvciBpdGVyYXRpb24ga2V5IG9uIEFERCB8IERFTEVURSB8IE1hcC5TRVRcclxuICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSBcImFkZFwiIC8qIEFERCAqLzpcclxuICAgICAgICAgICAgICAgIGlmICghaXNBcnJheSh0YXJnZXQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWRkKGRlcHNNYXAuZ2V0KElURVJBVEVfS0VZKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzTWFwKHRhcmdldCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWRkKGRlcHNNYXAuZ2V0KE1BUF9LRVlfSVRFUkFURV9LRVkpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChpc0ludGVnZXJLZXkoa2V5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIG5ldyBpbmRleCBhZGRlZCB0byBhcnJheSAtPiBsZW5ndGggY2hhbmdlc1xyXG4gICAgICAgICAgICAgICAgICAgIGFkZChkZXBzTWFwLmdldCgnbGVuZ3RoJykpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJkZWxldGVcIiAvKiBERUxFVEUgKi86XHJcbiAgICAgICAgICAgICAgICBpZiAoIWlzQXJyYXkodGFyZ2V0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFkZChkZXBzTWFwLmdldChJVEVSQVRFX0tFWSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpc01hcCh0YXJnZXQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZChkZXBzTWFwLmdldChNQVBfS0VZX0lURVJBVEVfS0VZKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJzZXRcIiAvKiBTRVQgKi86XHJcbiAgICAgICAgICAgICAgICBpZiAoaXNNYXAodGFyZ2V0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFkZChkZXBzTWFwLmdldChJVEVSQVRFX0tFWSkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY29uc3QgcnVuID0gKGVmZmVjdCkgPT4ge1xyXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgZWZmZWN0Lm9wdGlvbnMub25UcmlnZ2VyKSB7XHJcbiAgICAgICAgICAgIGVmZmVjdC5vcHRpb25zLm9uVHJpZ2dlcih7XHJcbiAgICAgICAgICAgICAgICBlZmZlY3QsXHJcbiAgICAgICAgICAgICAgICB0YXJnZXQsXHJcbiAgICAgICAgICAgICAgICBrZXksXHJcbiAgICAgICAgICAgICAgICB0eXBlLFxyXG4gICAgICAgICAgICAgICAgbmV3VmFsdWUsXHJcbiAgICAgICAgICAgICAgICBvbGRWYWx1ZSxcclxuICAgICAgICAgICAgICAgIG9sZFRhcmdldFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGVmZmVjdC5vcHRpb25zLnNjaGVkdWxlcikge1xyXG4gICAgICAgICAgICBlZmZlY3Qub3B0aW9ucy5zY2hlZHVsZXIoZWZmZWN0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGVmZmVjdCgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBlZmZlY3RzLmZvckVhY2gocnVuKTtcclxufVxuXG5jb25zdCBidWlsdEluU3ltYm9scyA9IG5ldyBTZXQoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoU3ltYm9sKVxyXG4gICAgLm1hcChrZXkgPT4gU3ltYm9sW2tleV0pXHJcbiAgICAuZmlsdGVyKGlzU3ltYm9sKSk7XHJcbmNvbnN0IGdldCA9IC8qI19fUFVSRV9fKi8gY3JlYXRlR2V0dGVyKCk7XHJcbmNvbnN0IHNoYWxsb3dHZXQgPSAvKiNfX1BVUkVfXyovIGNyZWF0ZUdldHRlcihmYWxzZSwgdHJ1ZSk7XHJcbmNvbnN0IHJlYWRvbmx5R2V0ID0gLyojX19QVVJFX18qLyBjcmVhdGVHZXR0ZXIodHJ1ZSk7XHJcbmNvbnN0IHNoYWxsb3dSZWFkb25seUdldCA9IC8qI19fUFVSRV9fKi8gY3JlYXRlR2V0dGVyKHRydWUsIHRydWUpO1xyXG5jb25zdCBhcnJheUluc3RydW1lbnRhdGlvbnMgPSB7fTtcclxuWydpbmNsdWRlcycsICdpbmRleE9mJywgJ2xhc3RJbmRleE9mJ10uZm9yRWFjaChrZXkgPT4ge1xyXG4gICAgY29uc3QgbWV0aG9kID0gQXJyYXkucHJvdG90eXBlW2tleV07XHJcbiAgICBhcnJheUluc3RydW1lbnRhdGlvbnNba2V5XSA9IGZ1bmN0aW9uICguLi5hcmdzKSB7XHJcbiAgICAgICAgY29uc3QgYXJyID0gdG9SYXcodGhpcyk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGwgPSB0aGlzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG4gICAgICAgICAgICB0cmFjayhhcnIsIFwiZ2V0XCIgLyogR0VUICovLCBpICsgJycpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyB3ZSBydW4gdGhlIG1ldGhvZCB1c2luZyB0aGUgb3JpZ2luYWwgYXJncyBmaXJzdCAod2hpY2ggbWF5IGJlIHJlYWN0aXZlKVxyXG4gICAgICAgIGNvbnN0IHJlcyA9IG1ldGhvZC5hcHBseShhcnIsIGFyZ3MpO1xyXG4gICAgICAgIGlmIChyZXMgPT09IC0xIHx8IHJlcyA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgLy8gaWYgdGhhdCBkaWRuJ3Qgd29yaywgcnVuIGl0IGFnYWluIHVzaW5nIHJhdyB2YWx1ZXMuXHJcbiAgICAgICAgICAgIHJldHVybiBtZXRob2QuYXBwbHkoYXJyLCBhcmdzLm1hcCh0b1JhdykpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJlcztcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59KTtcclxuWydwdXNoJywgJ3BvcCcsICdzaGlmdCcsICd1bnNoaWZ0JywgJ3NwbGljZSddLmZvckVhY2goa2V5ID0+IHtcclxuICAgIGNvbnN0IG1ldGhvZCA9IEFycmF5LnByb3RvdHlwZVtrZXldO1xyXG4gICAgYXJyYXlJbnN0cnVtZW50YXRpb25zW2tleV0gPSBmdW5jdGlvbiAoLi4uYXJncykge1xyXG4gICAgICAgIHBhdXNlVHJhY2tpbmcoKTtcclxuICAgICAgICBjb25zdCByZXMgPSBtZXRob2QuYXBwbHkodGhpcywgYXJncyk7XHJcbiAgICAgICAgcmVzZXRUcmFja2luZygpO1xyXG4gICAgICAgIHJldHVybiByZXM7XHJcbiAgICB9O1xyXG59KTtcclxuZnVuY3Rpb24gY3JlYXRlR2V0dGVyKGlzUmVhZG9ubHkgPSBmYWxzZSwgc2hhbGxvdyA9IGZhbHNlKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gZ2V0KHRhcmdldCwga2V5LCByZWNlaXZlcikge1xyXG4gICAgICAgIGlmIChrZXkgPT09IFwiX192X2lzUmVhY3RpdmVcIiAvKiBJU19SRUFDVElWRSAqLykge1xyXG4gICAgICAgICAgICByZXR1cm4gIWlzUmVhZG9ubHk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGtleSA9PT0gXCJfX3ZfaXNSZWFkb25seVwiIC8qIElTX1JFQURPTkxZICovKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBpc1JlYWRvbmx5O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChrZXkgPT09IFwiX192X3Jhd1wiIC8qIFJBVyAqLyAmJlxyXG4gICAgICAgICAgICByZWNlaXZlciA9PT0gKGlzUmVhZG9ubHkgPyByZWFkb25seU1hcCA6IHJlYWN0aXZlTWFwKS5nZXQodGFyZ2V0KSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGFyZ2V0O1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCB0YXJnZXRJc0FycmF5ID0gaXNBcnJheSh0YXJnZXQpO1xyXG4gICAgICAgIGlmICghaXNSZWFkb25seSAmJiB0YXJnZXRJc0FycmF5ICYmIGhhc093bihhcnJheUluc3RydW1lbnRhdGlvbnMsIGtleSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFJlZmxlY3QuZ2V0KGFycmF5SW5zdHJ1bWVudGF0aW9ucywga2V5LCByZWNlaXZlcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHJlcyA9IFJlZmxlY3QuZ2V0KHRhcmdldCwga2V5LCByZWNlaXZlcik7XHJcbiAgICAgICAgaWYgKGlzU3ltYm9sKGtleSlcclxuICAgICAgICAgICAgPyBidWlsdEluU3ltYm9scy5oYXMoa2V5KVxyXG4gICAgICAgICAgICA6IGtleSA9PT0gYF9fcHJvdG9fX2AgfHwga2V5ID09PSBgX192X2lzUmVmYCkge1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIWlzUmVhZG9ubHkpIHtcclxuICAgICAgICAgICAgdHJhY2sodGFyZ2V0LCBcImdldFwiIC8qIEdFVCAqLywga2V5KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHNoYWxsb3cpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJlcztcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGlzUmVmKHJlcykpIHtcclxuICAgICAgICAgICAgLy8gcmVmIHVud3JhcHBpbmcgLSBkb2VzIG5vdCBhcHBseSBmb3IgQXJyYXkgKyBpbnRlZ2VyIGtleS5cclxuICAgICAgICAgICAgY29uc3Qgc2hvdWxkVW53cmFwID0gIXRhcmdldElzQXJyYXkgfHwgIWlzSW50ZWdlcktleShrZXkpO1xyXG4gICAgICAgICAgICByZXR1cm4gc2hvdWxkVW53cmFwID8gcmVzLnZhbHVlIDogcmVzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaXNPYmplY3QocmVzKSkge1xyXG4gICAgICAgICAgICAvLyBDb252ZXJ0IHJldHVybmVkIHZhbHVlIGludG8gYSBwcm94eSBhcyB3ZWxsLiB3ZSBkbyB0aGUgaXNPYmplY3QgY2hlY2tcclxuICAgICAgICAgICAgLy8gaGVyZSB0byBhdm9pZCBpbnZhbGlkIHZhbHVlIHdhcm5pbmcuIEFsc28gbmVlZCB0byBsYXp5IGFjY2VzcyByZWFkb25seVxyXG4gICAgICAgICAgICAvLyBhbmQgcmVhY3RpdmUgaGVyZSB0byBhdm9pZCBjaXJjdWxhciBkZXBlbmRlbmN5LlxyXG4gICAgICAgICAgICByZXR1cm4gaXNSZWFkb25seSA/IHJlYWRvbmx5KHJlcykgOiByZWFjdGl2ZShyZXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzO1xyXG4gICAgfTtcclxufVxyXG5jb25zdCBzZXQgPSAvKiNfX1BVUkVfXyovIGNyZWF0ZVNldHRlcigpO1xyXG5jb25zdCBzaGFsbG93U2V0ID0gLyojX19QVVJFX18qLyBjcmVhdGVTZXR0ZXIodHJ1ZSk7XHJcbmZ1bmN0aW9uIGNyZWF0ZVNldHRlcihzaGFsbG93ID0gZmFsc2UpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiBzZXQodGFyZ2V0LCBrZXksIHZhbHVlLCByZWNlaXZlcikge1xyXG4gICAgICAgIGNvbnN0IG9sZFZhbHVlID0gdGFyZ2V0W2tleV07XHJcbiAgICAgICAgaWYgKCFzaGFsbG93KSB7XHJcbiAgICAgICAgICAgIHZhbHVlID0gdG9SYXcodmFsdWUpO1xyXG4gICAgICAgICAgICBpZiAoIWlzQXJyYXkodGFyZ2V0KSAmJiBpc1JlZihvbGRWYWx1ZSkgJiYgIWlzUmVmKHZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgb2xkVmFsdWUudmFsdWUgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGhhZEtleSA9IGlzQXJyYXkodGFyZ2V0KSAmJiBpc0ludGVnZXJLZXkoa2V5KVxyXG4gICAgICAgICAgICA/IE51bWJlcihrZXkpIDwgdGFyZ2V0Lmxlbmd0aFxyXG4gICAgICAgICAgICA6IGhhc093bih0YXJnZXQsIGtleSk7XHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gUmVmbGVjdC5zZXQodGFyZ2V0LCBrZXksIHZhbHVlLCByZWNlaXZlcik7XHJcbiAgICAgICAgLy8gZG9uJ3QgdHJpZ2dlciBpZiB0YXJnZXQgaXMgc29tZXRoaW5nIHVwIGluIHRoZSBwcm90b3R5cGUgY2hhaW4gb2Ygb3JpZ2luYWxcclxuICAgICAgICBpZiAodGFyZ2V0ID09PSB0b1JhdyhyZWNlaXZlcikpIHtcclxuICAgICAgICAgICAgaWYgKCFoYWRLZXkpIHtcclxuICAgICAgICAgICAgICAgIHRyaWdnZXIodGFyZ2V0LCBcImFkZFwiIC8qIEFERCAqLywga2V5LCB2YWx1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoaGFzQ2hhbmdlZCh2YWx1ZSwgb2xkVmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICB0cmlnZ2VyKHRhcmdldCwgXCJzZXRcIiAvKiBTRVQgKi8sIGtleSwgdmFsdWUsIG9sZFZhbHVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiBkZWxldGVQcm9wZXJ0eSh0YXJnZXQsIGtleSkge1xyXG4gICAgY29uc3QgaGFkS2V5ID0gaGFzT3duKHRhcmdldCwga2V5KTtcclxuICAgIGNvbnN0IG9sZFZhbHVlID0gdGFyZ2V0W2tleV07XHJcbiAgICBjb25zdCByZXN1bHQgPSBSZWZsZWN0LmRlbGV0ZVByb3BlcnR5KHRhcmdldCwga2V5KTtcclxuICAgIGlmIChyZXN1bHQgJiYgaGFkS2V5KSB7XHJcbiAgICAgICAgdHJpZ2dlcih0YXJnZXQsIFwiZGVsZXRlXCIgLyogREVMRVRFICovLCBrZXksIHVuZGVmaW5lZCwgb2xkVmFsdWUpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5mdW5jdGlvbiBoYXModGFyZ2V0LCBrZXkpIHtcclxuICAgIGNvbnN0IHJlc3VsdCA9IFJlZmxlY3QuaGFzKHRhcmdldCwga2V5KTtcclxuICAgIGlmICghaXNTeW1ib2woa2V5KSB8fCAhYnVpbHRJblN5bWJvbHMuaGFzKGtleSkpIHtcclxuICAgICAgICB0cmFjayh0YXJnZXQsIFwiaGFzXCIgLyogSEFTICovLCBrZXkpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5mdW5jdGlvbiBvd25LZXlzKHRhcmdldCkge1xyXG4gICAgdHJhY2sodGFyZ2V0LCBcIml0ZXJhdGVcIiAvKiBJVEVSQVRFICovLCBpc0FycmF5KHRhcmdldCkgPyAnbGVuZ3RoJyA6IElURVJBVEVfS0VZKTtcclxuICAgIHJldHVybiBSZWZsZWN0Lm93bktleXModGFyZ2V0KTtcclxufVxyXG5jb25zdCBtdXRhYmxlSGFuZGxlcnMgPSB7XHJcbiAgICBnZXQsXHJcbiAgICBzZXQsXHJcbiAgICBkZWxldGVQcm9wZXJ0eSxcclxuICAgIGhhcyxcclxuICAgIG93bktleXNcclxufTtcclxuY29uc3QgcmVhZG9ubHlIYW5kbGVycyA9IHtcclxuICAgIGdldDogcmVhZG9ubHlHZXQsXHJcbiAgICBzZXQodGFyZ2V0LCBrZXkpIHtcclxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihgU2V0IG9wZXJhdGlvbiBvbiBrZXkgXCIke1N0cmluZyhrZXkpfVwiIGZhaWxlZDogdGFyZ2V0IGlzIHJlYWRvbmx5LmAsIHRhcmdldCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfSxcclxuICAgIGRlbGV0ZVByb3BlcnR5KHRhcmdldCwga2V5KSB7XHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYERlbGV0ZSBvcGVyYXRpb24gb24ga2V5IFwiJHtTdHJpbmcoa2V5KX1cIiBmYWlsZWQ6IHRhcmdldCBpcyByZWFkb25seS5gLCB0YXJnZXQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxufTtcclxuY29uc3Qgc2hhbGxvd1JlYWN0aXZlSGFuZGxlcnMgPSBleHRlbmQoe30sIG11dGFibGVIYW5kbGVycywge1xyXG4gICAgZ2V0OiBzaGFsbG93R2V0LFxyXG4gICAgc2V0OiBzaGFsbG93U2V0XHJcbn0pO1xyXG4vLyBQcm9wcyBoYW5kbGVycyBhcmUgc3BlY2lhbCBpbiB0aGUgc2Vuc2UgdGhhdCBpdCBzaG91bGQgbm90IHVud3JhcCB0b3AtbGV2ZWxcclxuLy8gcmVmcyAoaW4gb3JkZXIgdG8gYWxsb3cgcmVmcyB0byBiZSBleHBsaWNpdGx5IHBhc3NlZCBkb3duKSwgYnV0IHNob3VsZFxyXG4vLyByZXRhaW4gdGhlIHJlYWN0aXZpdHkgb2YgdGhlIG5vcm1hbCByZWFkb25seSBvYmplY3QuXHJcbmNvbnN0IHNoYWxsb3dSZWFkb25seUhhbmRsZXJzID0gZXh0ZW5kKHt9LCByZWFkb25seUhhbmRsZXJzLCB7XHJcbiAgICBnZXQ6IHNoYWxsb3dSZWFkb25seUdldFxyXG59KTtcblxuY29uc3QgdG9SZWFjdGl2ZSA9ICh2YWx1ZSkgPT4gaXNPYmplY3QodmFsdWUpID8gcmVhY3RpdmUodmFsdWUpIDogdmFsdWU7XHJcbmNvbnN0IHRvUmVhZG9ubHkgPSAodmFsdWUpID0+IGlzT2JqZWN0KHZhbHVlKSA/IHJlYWRvbmx5KHZhbHVlKSA6IHZhbHVlO1xyXG5jb25zdCB0b1NoYWxsb3cgPSAodmFsdWUpID0+IHZhbHVlO1xyXG5jb25zdCBnZXRQcm90byA9ICh2KSA9PiBSZWZsZWN0LmdldFByb3RvdHlwZU9mKHYpO1xyXG5mdW5jdGlvbiBnZXQkMSh0YXJnZXQsIGtleSwgaXNSZWFkb25seSA9IGZhbHNlLCBpc1NoYWxsb3cgPSBmYWxzZSkge1xyXG4gICAgLy8gIzE3NzI6IHJlYWRvbmx5KHJlYWN0aXZlKE1hcCkpIHNob3VsZCByZXR1cm4gcmVhZG9ubHkgKyByZWFjdGl2ZSB2ZXJzaW9uXHJcbiAgICAvLyBvZiB0aGUgdmFsdWVcclxuICAgIHRhcmdldCA9IHRhcmdldFtcIl9fdl9yYXdcIiAvKiBSQVcgKi9dO1xyXG4gICAgY29uc3QgcmF3VGFyZ2V0ID0gdG9SYXcodGFyZ2V0KTtcclxuICAgIGNvbnN0IHJhd0tleSA9IHRvUmF3KGtleSk7XHJcbiAgICBpZiAoa2V5ICE9PSByYXdLZXkpIHtcclxuICAgICAgICAhaXNSZWFkb25seSAmJiB0cmFjayhyYXdUYXJnZXQsIFwiZ2V0XCIgLyogR0VUICovLCBrZXkpO1xyXG4gICAgfVxyXG4gICAgIWlzUmVhZG9ubHkgJiYgdHJhY2socmF3VGFyZ2V0LCBcImdldFwiIC8qIEdFVCAqLywgcmF3S2V5KTtcclxuICAgIGNvbnN0IHsgaGFzIH0gPSBnZXRQcm90byhyYXdUYXJnZXQpO1xyXG4gICAgY29uc3Qgd3JhcCA9IGlzUmVhZG9ubHkgPyB0b1JlYWRvbmx5IDogaXNTaGFsbG93ID8gdG9TaGFsbG93IDogdG9SZWFjdGl2ZTtcclxuICAgIGlmIChoYXMuY2FsbChyYXdUYXJnZXQsIGtleSkpIHtcclxuICAgICAgICByZXR1cm4gd3JhcCh0YXJnZXQuZ2V0KGtleSkpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoaGFzLmNhbGwocmF3VGFyZ2V0LCByYXdLZXkpKSB7XHJcbiAgICAgICAgcmV0dXJuIHdyYXAodGFyZ2V0LmdldChyYXdLZXkpKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBoYXMkMShrZXksIGlzUmVhZG9ubHkgPSBmYWxzZSkge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gdGhpc1tcIl9fdl9yYXdcIiAvKiBSQVcgKi9dO1xyXG4gICAgY29uc3QgcmF3VGFyZ2V0ID0gdG9SYXcodGFyZ2V0KTtcclxuICAgIGNvbnN0IHJhd0tleSA9IHRvUmF3KGtleSk7XHJcbiAgICBpZiAoa2V5ICE9PSByYXdLZXkpIHtcclxuICAgICAgICAhaXNSZWFkb25seSAmJiB0cmFjayhyYXdUYXJnZXQsIFwiaGFzXCIgLyogSEFTICovLCBrZXkpO1xyXG4gICAgfVxyXG4gICAgIWlzUmVhZG9ubHkgJiYgdHJhY2socmF3VGFyZ2V0LCBcImhhc1wiIC8qIEhBUyAqLywgcmF3S2V5KTtcclxuICAgIHJldHVybiBrZXkgPT09IHJhd0tleVxyXG4gICAgICAgID8gdGFyZ2V0LmhhcyhrZXkpXHJcbiAgICAgICAgOiB0YXJnZXQuaGFzKGtleSkgfHwgdGFyZ2V0LmhhcyhyYXdLZXkpO1xyXG59XHJcbmZ1bmN0aW9uIHNpemUodGFyZ2V0LCBpc1JlYWRvbmx5ID0gZmFsc2UpIHtcclxuICAgIHRhcmdldCA9IHRhcmdldFtcIl9fdl9yYXdcIiAvKiBSQVcgKi9dO1xyXG4gICAgIWlzUmVhZG9ubHkgJiYgdHJhY2sodG9SYXcodGFyZ2V0KSwgXCJpdGVyYXRlXCIgLyogSVRFUkFURSAqLywgSVRFUkFURV9LRVkpO1xyXG4gICAgcmV0dXJuIFJlZmxlY3QuZ2V0KHRhcmdldCwgJ3NpemUnLCB0YXJnZXQpO1xyXG59XHJcbmZ1bmN0aW9uIGFkZCh2YWx1ZSkge1xyXG4gICAgdmFsdWUgPSB0b1Jhdyh2YWx1ZSk7XHJcbiAgICBjb25zdCB0YXJnZXQgPSB0b1Jhdyh0aGlzKTtcclxuICAgIGNvbnN0IHByb3RvID0gZ2V0UHJvdG8odGFyZ2V0KTtcclxuICAgIGNvbnN0IGhhZEtleSA9IHByb3RvLmhhcy5jYWxsKHRhcmdldCwgdmFsdWUpO1xyXG4gICAgdGFyZ2V0LmFkZCh2YWx1ZSk7XHJcbiAgICBpZiAoIWhhZEtleSkge1xyXG4gICAgICAgIHRyaWdnZXIodGFyZ2V0LCBcImFkZFwiIC8qIEFERCAqLywgdmFsdWUsIHZhbHVlKTtcclxuICAgIH1cclxuICAgIHJldHVybiB0aGlzO1xyXG59XHJcbmZ1bmN0aW9uIHNldCQxKGtleSwgdmFsdWUpIHtcclxuICAgIHZhbHVlID0gdG9SYXcodmFsdWUpO1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gdG9SYXcodGhpcyk7XHJcbiAgICBjb25zdCB7IGhhcywgZ2V0IH0gPSBnZXRQcm90byh0YXJnZXQpO1xyXG4gICAgbGV0IGhhZEtleSA9IGhhcy5jYWxsKHRhcmdldCwga2V5KTtcclxuICAgIGlmICghaGFkS2V5KSB7XHJcbiAgICAgICAga2V5ID0gdG9SYXcoa2V5KTtcclxuICAgICAgICBoYWRLZXkgPSBoYXMuY2FsbCh0YXJnZXQsIGtleSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICBjaGVja0lkZW50aXR5S2V5cyh0YXJnZXQsIGhhcywga2V5KTtcclxuICAgIH1cclxuICAgIGNvbnN0IG9sZFZhbHVlID0gZ2V0LmNhbGwodGFyZ2V0LCBrZXkpO1xyXG4gICAgdGFyZ2V0LnNldChrZXksIHZhbHVlKTtcclxuICAgIGlmICghaGFkS2V5KSB7XHJcbiAgICAgICAgdHJpZ2dlcih0YXJnZXQsIFwiYWRkXCIgLyogQUREICovLCBrZXksIHZhbHVlKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGhhc0NoYW5nZWQodmFsdWUsIG9sZFZhbHVlKSkge1xyXG4gICAgICAgIHRyaWdnZXIodGFyZ2V0LCBcInNldFwiIC8qIFNFVCAqLywga2V5LCB2YWx1ZSwgb2xkVmFsdWUpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaXM7XHJcbn1cclxuZnVuY3Rpb24gZGVsZXRlRW50cnkoa2V5KSB7XHJcbiAgICBjb25zdCB0YXJnZXQgPSB0b1Jhdyh0aGlzKTtcclxuICAgIGNvbnN0IHsgaGFzLCBnZXQgfSA9IGdldFByb3RvKHRhcmdldCk7XHJcbiAgICBsZXQgaGFkS2V5ID0gaGFzLmNhbGwodGFyZ2V0LCBrZXkpO1xyXG4gICAgaWYgKCFoYWRLZXkpIHtcclxuICAgICAgICBrZXkgPSB0b1JhdyhrZXkpO1xyXG4gICAgICAgIGhhZEtleSA9IGhhcy5jYWxsKHRhcmdldCwga2V5KTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgIGNoZWNrSWRlbnRpdHlLZXlzKHRhcmdldCwgaGFzLCBrZXkpO1xyXG4gICAgfVxyXG4gICAgY29uc3Qgb2xkVmFsdWUgPSBnZXQgPyBnZXQuY2FsbCh0YXJnZXQsIGtleSkgOiB1bmRlZmluZWQ7XHJcbiAgICAvLyBmb3J3YXJkIHRoZSBvcGVyYXRpb24gYmVmb3JlIHF1ZXVlaW5nIHJlYWN0aW9uc1xyXG4gICAgY29uc3QgcmVzdWx0ID0gdGFyZ2V0LmRlbGV0ZShrZXkpO1xyXG4gICAgaWYgKGhhZEtleSkge1xyXG4gICAgICAgIHRyaWdnZXIodGFyZ2V0LCBcImRlbGV0ZVwiIC8qIERFTEVURSAqLywga2V5LCB1bmRlZmluZWQsIG9sZFZhbHVlKTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuZnVuY3Rpb24gY2xlYXIoKSB7XHJcbiAgICBjb25zdCB0YXJnZXQgPSB0b1Jhdyh0aGlzKTtcclxuICAgIGNvbnN0IGhhZEl0ZW1zID0gdGFyZ2V0LnNpemUgIT09IDA7XHJcbiAgICBjb25zdCBvbGRUYXJnZXQgPSAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJylcclxuICAgICAgICA/IGlzTWFwKHRhcmdldClcclxuICAgICAgICAgICAgPyBuZXcgTWFwKHRhcmdldClcclxuICAgICAgICAgICAgOiBuZXcgU2V0KHRhcmdldClcclxuICAgICAgICA6IHVuZGVmaW5lZDtcclxuICAgIC8vIGZvcndhcmQgdGhlIG9wZXJhdGlvbiBiZWZvcmUgcXVldWVpbmcgcmVhY3Rpb25zXHJcbiAgICBjb25zdCByZXN1bHQgPSB0YXJnZXQuY2xlYXIoKTtcclxuICAgIGlmIChoYWRJdGVtcykge1xyXG4gICAgICAgIHRyaWdnZXIodGFyZ2V0LCBcImNsZWFyXCIgLyogQ0xFQVIgKi8sIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBvbGRUYXJnZXQpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5mdW5jdGlvbiBjcmVhdGVGb3JFYWNoKGlzUmVhZG9ubHksIGlzU2hhbGxvdykge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2ssIHRoaXNBcmcpIHtcclxuICAgICAgICBjb25zdCBvYnNlcnZlZCA9IHRoaXM7XHJcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gb2JzZXJ2ZWRbXCJfX3ZfcmF3XCIgLyogUkFXICovXTtcclxuICAgICAgICBjb25zdCByYXdUYXJnZXQgPSB0b1Jhdyh0YXJnZXQpO1xyXG4gICAgICAgIGNvbnN0IHdyYXAgPSBpc1JlYWRvbmx5ID8gdG9SZWFkb25seSA6IGlzU2hhbGxvdyA/IHRvU2hhbGxvdyA6IHRvUmVhY3RpdmU7XHJcbiAgICAgICAgIWlzUmVhZG9ubHkgJiYgdHJhY2socmF3VGFyZ2V0LCBcIml0ZXJhdGVcIiAvKiBJVEVSQVRFICovLCBJVEVSQVRFX0tFWSk7XHJcbiAgICAgICAgcmV0dXJuIHRhcmdldC5mb3JFYWNoKCh2YWx1ZSwga2V5KSA9PiB7XHJcbiAgICAgICAgICAgIC8vIGltcG9ydGFudDogbWFrZSBzdXJlIHRoZSBjYWxsYmFjayBpc1xyXG4gICAgICAgICAgICAvLyAxLiBpbnZva2VkIHdpdGggdGhlIHJlYWN0aXZlIG1hcCBhcyBgdGhpc2AgYW5kIDNyZCBhcmdcclxuICAgICAgICAgICAgLy8gMi4gdGhlIHZhbHVlIHJlY2VpdmVkIHNob3VsZCBiZSBhIGNvcnJlc3BvbmRpbmcgcmVhY3RpdmUvcmVhZG9ubHkuXHJcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjay5jYWxsKHRoaXNBcmcsIHdyYXAodmFsdWUpLCB3cmFwKGtleSksIG9ic2VydmVkKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbn1cclxuZnVuY3Rpb24gY3JlYXRlSXRlcmFibGVNZXRob2QobWV0aG9kLCBpc1JlYWRvbmx5LCBpc1NoYWxsb3cpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAoLi4uYXJncykge1xyXG4gICAgICAgIGNvbnN0IHRhcmdldCA9IHRoaXNbXCJfX3ZfcmF3XCIgLyogUkFXICovXTtcclxuICAgICAgICBjb25zdCByYXdUYXJnZXQgPSB0b1Jhdyh0YXJnZXQpO1xyXG4gICAgICAgIGNvbnN0IHRhcmdldElzTWFwID0gaXNNYXAocmF3VGFyZ2V0KTtcclxuICAgICAgICBjb25zdCBpc1BhaXIgPSBtZXRob2QgPT09ICdlbnRyaWVzJyB8fCAobWV0aG9kID09PSBTeW1ib2wuaXRlcmF0b3IgJiYgdGFyZ2V0SXNNYXApO1xyXG4gICAgICAgIGNvbnN0IGlzS2V5T25seSA9IG1ldGhvZCA9PT0gJ2tleXMnICYmIHRhcmdldElzTWFwO1xyXG4gICAgICAgIGNvbnN0IGlubmVySXRlcmF0b3IgPSB0YXJnZXRbbWV0aG9kXSguLi5hcmdzKTtcclxuICAgICAgICBjb25zdCB3cmFwID0gaXNSZWFkb25seSA/IHRvUmVhZG9ubHkgOiBpc1NoYWxsb3cgPyB0b1NoYWxsb3cgOiB0b1JlYWN0aXZlO1xyXG4gICAgICAgICFpc1JlYWRvbmx5ICYmXHJcbiAgICAgICAgICAgIHRyYWNrKHJhd1RhcmdldCwgXCJpdGVyYXRlXCIgLyogSVRFUkFURSAqLywgaXNLZXlPbmx5ID8gTUFQX0tFWV9JVEVSQVRFX0tFWSA6IElURVJBVEVfS0VZKTtcclxuICAgICAgICAvLyByZXR1cm4gYSB3cmFwcGVkIGl0ZXJhdG9yIHdoaWNoIHJldHVybnMgb2JzZXJ2ZWQgdmVyc2lvbnMgb2YgdGhlXHJcbiAgICAgICAgLy8gdmFsdWVzIGVtaXR0ZWQgZnJvbSB0aGUgcmVhbCBpdGVyYXRvclxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIC8vIGl0ZXJhdG9yIHByb3RvY29sXHJcbiAgICAgICAgICAgIG5leHQoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB7IHZhbHVlLCBkb25lIH0gPSBpbm5lckl0ZXJhdG9yLm5leHQoKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBkb25lXHJcbiAgICAgICAgICAgICAgICAgICAgPyB7IHZhbHVlLCBkb25lIH1cclxuICAgICAgICAgICAgICAgICAgICA6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGlzUGFpciA/IFt3cmFwKHZhbHVlWzBdKSwgd3JhcCh2YWx1ZVsxXSldIDogd3JhcCh2YWx1ZSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvbmVcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAvLyBpdGVyYWJsZSBwcm90b2NvbFxyXG4gICAgICAgICAgICBbU3ltYm9sLml0ZXJhdG9yXSgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH07XHJcbn1cclxuZnVuY3Rpb24gY3JlYXRlUmVhZG9ubHlNZXRob2QodHlwZSkge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICguLi5hcmdzKSB7XHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICBjb25zdCBrZXkgPSBhcmdzWzBdID8gYG9uIGtleSBcIiR7YXJnc1swXX1cIiBgIDogYGA7XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihgJHtjYXBpdGFsaXplKHR5cGUpfSBvcGVyYXRpb24gJHtrZXl9ZmFpbGVkOiB0YXJnZXQgaXMgcmVhZG9ubHkuYCwgdG9SYXcodGhpcykpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdHlwZSA9PT0gXCJkZWxldGVcIiAvKiBERUxFVEUgKi8gPyBmYWxzZSA6IHRoaXM7XHJcbiAgICB9O1xyXG59XHJcbmNvbnN0IG11dGFibGVJbnN0cnVtZW50YXRpb25zID0ge1xyXG4gICAgZ2V0KGtleSkge1xyXG4gICAgICAgIHJldHVybiBnZXQkMSh0aGlzLCBrZXkpO1xyXG4gICAgfSxcclxuICAgIGdldCBzaXplKCkge1xyXG4gICAgICAgIHJldHVybiBzaXplKHRoaXMpO1xyXG4gICAgfSxcclxuICAgIGhhczogaGFzJDEsXHJcbiAgICBhZGQsXHJcbiAgICBzZXQ6IHNldCQxLFxyXG4gICAgZGVsZXRlOiBkZWxldGVFbnRyeSxcclxuICAgIGNsZWFyLFxyXG4gICAgZm9yRWFjaDogY3JlYXRlRm9yRWFjaChmYWxzZSwgZmFsc2UpXHJcbn07XHJcbmNvbnN0IHNoYWxsb3dJbnN0cnVtZW50YXRpb25zID0ge1xyXG4gICAgZ2V0KGtleSkge1xyXG4gICAgICAgIHJldHVybiBnZXQkMSh0aGlzLCBrZXksIGZhbHNlLCB0cnVlKTtcclxuICAgIH0sXHJcbiAgICBnZXQgc2l6ZSgpIHtcclxuICAgICAgICByZXR1cm4gc2l6ZSh0aGlzKTtcclxuICAgIH0sXHJcbiAgICBoYXM6IGhhcyQxLFxyXG4gICAgYWRkLFxyXG4gICAgc2V0OiBzZXQkMSxcclxuICAgIGRlbGV0ZTogZGVsZXRlRW50cnksXHJcbiAgICBjbGVhcixcclxuICAgIGZvckVhY2g6IGNyZWF0ZUZvckVhY2goZmFsc2UsIHRydWUpXHJcbn07XHJcbmNvbnN0IHJlYWRvbmx5SW5zdHJ1bWVudGF0aW9ucyA9IHtcclxuICAgIGdldChrZXkpIHtcclxuICAgICAgICByZXR1cm4gZ2V0JDEodGhpcywga2V5LCB0cnVlKTtcclxuICAgIH0sXHJcbiAgICBnZXQgc2l6ZSgpIHtcclxuICAgICAgICByZXR1cm4gc2l6ZSh0aGlzLCB0cnVlKTtcclxuICAgIH0sXHJcbiAgICBoYXMoa2V5KSB7XHJcbiAgICAgICAgcmV0dXJuIGhhcyQxLmNhbGwodGhpcywga2V5LCB0cnVlKTtcclxuICAgIH0sXHJcbiAgICBhZGQ6IGNyZWF0ZVJlYWRvbmx5TWV0aG9kKFwiYWRkXCIgLyogQUREICovKSxcclxuICAgIHNldDogY3JlYXRlUmVhZG9ubHlNZXRob2QoXCJzZXRcIiAvKiBTRVQgKi8pLFxyXG4gICAgZGVsZXRlOiBjcmVhdGVSZWFkb25seU1ldGhvZChcImRlbGV0ZVwiIC8qIERFTEVURSAqLyksXHJcbiAgICBjbGVhcjogY3JlYXRlUmVhZG9ubHlNZXRob2QoXCJjbGVhclwiIC8qIENMRUFSICovKSxcclxuICAgIGZvckVhY2g6IGNyZWF0ZUZvckVhY2godHJ1ZSwgZmFsc2UpXHJcbn07XHJcbmNvbnN0IGl0ZXJhdG9yTWV0aG9kcyA9IFsna2V5cycsICd2YWx1ZXMnLCAnZW50cmllcycsIFN5bWJvbC5pdGVyYXRvcl07XHJcbml0ZXJhdG9yTWV0aG9kcy5mb3JFYWNoKG1ldGhvZCA9PiB7XHJcbiAgICBtdXRhYmxlSW5zdHJ1bWVudGF0aW9uc1ttZXRob2RdID0gY3JlYXRlSXRlcmFibGVNZXRob2QobWV0aG9kLCBmYWxzZSwgZmFsc2UpO1xyXG4gICAgcmVhZG9ubHlJbnN0cnVtZW50YXRpb25zW21ldGhvZF0gPSBjcmVhdGVJdGVyYWJsZU1ldGhvZChtZXRob2QsIHRydWUsIGZhbHNlKTtcclxuICAgIHNoYWxsb3dJbnN0cnVtZW50YXRpb25zW21ldGhvZF0gPSBjcmVhdGVJdGVyYWJsZU1ldGhvZChtZXRob2QsIGZhbHNlLCB0cnVlKTtcclxufSk7XHJcbmZ1bmN0aW9uIGNyZWF0ZUluc3RydW1lbnRhdGlvbkdldHRlcihpc1JlYWRvbmx5LCBzaGFsbG93KSB7XHJcbiAgICBjb25zdCBpbnN0cnVtZW50YXRpb25zID0gc2hhbGxvd1xyXG4gICAgICAgID8gc2hhbGxvd0luc3RydW1lbnRhdGlvbnNcclxuICAgICAgICA6IGlzUmVhZG9ubHlcclxuICAgICAgICAgICAgPyByZWFkb25seUluc3RydW1lbnRhdGlvbnNcclxuICAgICAgICAgICAgOiBtdXRhYmxlSW5zdHJ1bWVudGF0aW9ucztcclxuICAgIHJldHVybiAodGFyZ2V0LCBrZXksIHJlY2VpdmVyKSA9PiB7XHJcbiAgICAgICAgaWYgKGtleSA9PT0gXCJfX3ZfaXNSZWFjdGl2ZVwiIC8qIElTX1JFQUNUSVZFICovKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAhaXNSZWFkb25seTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoa2V5ID09PSBcIl9fdl9pc1JlYWRvbmx5XCIgLyogSVNfUkVBRE9OTFkgKi8pIHtcclxuICAgICAgICAgICAgcmV0dXJuIGlzUmVhZG9ubHk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGtleSA9PT0gXCJfX3ZfcmF3XCIgLyogUkFXICovKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0YXJnZXQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBSZWZsZWN0LmdldChoYXNPd24oaW5zdHJ1bWVudGF0aW9ucywga2V5KSAmJiBrZXkgaW4gdGFyZ2V0XHJcbiAgICAgICAgICAgID8gaW5zdHJ1bWVudGF0aW9uc1xyXG4gICAgICAgICAgICA6IHRhcmdldCwga2V5LCByZWNlaXZlcik7XHJcbiAgICB9O1xyXG59XHJcbmNvbnN0IG11dGFibGVDb2xsZWN0aW9uSGFuZGxlcnMgPSB7XHJcbiAgICBnZXQ6IGNyZWF0ZUluc3RydW1lbnRhdGlvbkdldHRlcihmYWxzZSwgZmFsc2UpXHJcbn07XHJcbmNvbnN0IHNoYWxsb3dDb2xsZWN0aW9uSGFuZGxlcnMgPSB7XHJcbiAgICBnZXQ6IGNyZWF0ZUluc3RydW1lbnRhdGlvbkdldHRlcihmYWxzZSwgdHJ1ZSlcclxufTtcclxuY29uc3QgcmVhZG9ubHlDb2xsZWN0aW9uSGFuZGxlcnMgPSB7XHJcbiAgICBnZXQ6IGNyZWF0ZUluc3RydW1lbnRhdGlvbkdldHRlcih0cnVlLCBmYWxzZSlcclxufTtcclxuZnVuY3Rpb24gY2hlY2tJZGVudGl0eUtleXModGFyZ2V0LCBoYXMsIGtleSkge1xyXG4gICAgY29uc3QgcmF3S2V5ID0gdG9SYXcoa2V5KTtcclxuICAgIGlmIChyYXdLZXkgIT09IGtleSAmJiBoYXMuY2FsbCh0YXJnZXQsIHJhd0tleSkpIHtcclxuICAgICAgICBjb25zdCB0eXBlID0gdG9SYXdUeXBlKHRhcmdldCk7XHJcbiAgICAgICAgY29uc29sZS53YXJuKGBSZWFjdGl2ZSAke3R5cGV9IGNvbnRhaW5zIGJvdGggdGhlIHJhdyBhbmQgcmVhY3RpdmUgYCArXHJcbiAgICAgICAgICAgIGB2ZXJzaW9ucyBvZiB0aGUgc2FtZSBvYmplY3Qke3R5cGUgPT09IGBNYXBgID8gYCBhcyBrZXlzYCA6IGBgfSwgYCArXHJcbiAgICAgICAgICAgIGB3aGljaCBjYW4gbGVhZCB0byBpbmNvbnNpc3RlbmNpZXMuIGAgK1xyXG4gICAgICAgICAgICBgQXZvaWQgZGlmZmVyZW50aWF0aW5nIGJldHdlZW4gdGhlIHJhdyBhbmQgcmVhY3RpdmUgdmVyc2lvbnMgYCArXHJcbiAgICAgICAgICAgIGBvZiBhbiBvYmplY3QgYW5kIG9ubHkgdXNlIHRoZSByZWFjdGl2ZSB2ZXJzaW9uIGlmIHBvc3NpYmxlLmApO1xyXG4gICAgfVxyXG59XG5cbmNvbnN0IHJlYWN0aXZlTWFwID0gbmV3IFdlYWtNYXAoKTtcclxuY29uc3QgcmVhZG9ubHlNYXAgPSBuZXcgV2Vha01hcCgpO1xyXG5mdW5jdGlvbiB0YXJnZXRUeXBlTWFwKHJhd1R5cGUpIHtcclxuICAgIHN3aXRjaCAocmF3VHlwZSkge1xyXG4gICAgICAgIGNhc2UgJ09iamVjdCc6XHJcbiAgICAgICAgY2FzZSAnQXJyYXknOlxyXG4gICAgICAgICAgICByZXR1cm4gMSAvKiBDT01NT04gKi87XHJcbiAgICAgICAgY2FzZSAnTWFwJzpcclxuICAgICAgICBjYXNlICdTZXQnOlxyXG4gICAgICAgIGNhc2UgJ1dlYWtNYXAnOlxyXG4gICAgICAgIGNhc2UgJ1dlYWtTZXQnOlxyXG4gICAgICAgICAgICByZXR1cm4gMiAvKiBDT0xMRUNUSU9OICovO1xyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgIHJldHVybiAwIC8qIElOVkFMSUQgKi87XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gZ2V0VGFyZ2V0VHlwZSh2YWx1ZSkge1xyXG4gICAgcmV0dXJuIHZhbHVlW1wiX192X3NraXBcIiAvKiBTS0lQICovXSB8fCAhT2JqZWN0LmlzRXh0ZW5zaWJsZSh2YWx1ZSlcclxuICAgICAgICA/IDAgLyogSU5WQUxJRCAqL1xyXG4gICAgICAgIDogdGFyZ2V0VHlwZU1hcCh0b1Jhd1R5cGUodmFsdWUpKTtcclxufVxyXG5mdW5jdGlvbiByZWFjdGl2ZSh0YXJnZXQpIHtcclxuICAgIC8vIGlmIHRyeWluZyB0byBvYnNlcnZlIGEgcmVhZG9ubHkgcHJveHksIHJldHVybiB0aGUgcmVhZG9ubHkgdmVyc2lvbi5cclxuICAgIGlmICh0YXJnZXQgJiYgdGFyZ2V0W1wiX192X2lzUmVhZG9ubHlcIiAvKiBJU19SRUFET05MWSAqL10pIHtcclxuICAgICAgICByZXR1cm4gdGFyZ2V0O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGNyZWF0ZVJlYWN0aXZlT2JqZWN0KHRhcmdldCwgZmFsc2UsIG11dGFibGVIYW5kbGVycywgbXV0YWJsZUNvbGxlY3Rpb25IYW5kbGVycyk7XHJcbn1cclxuLyoqXHJcbiAqIFJldHVybiBhIHNoYWxsb3dseS1yZWFjdGl2ZSBjb3B5IG9mIHRoZSBvcmlnaW5hbCBvYmplY3QsIHdoZXJlIG9ubHkgdGhlIHJvb3RcclxuICogbGV2ZWwgcHJvcGVydGllcyBhcmUgcmVhY3RpdmUuIEl0IGFsc28gZG9lcyBub3QgYXV0by11bndyYXAgcmVmcyAoZXZlbiBhdCB0aGVcclxuICogcm9vdCBsZXZlbCkuXHJcbiAqL1xyXG5mdW5jdGlvbiBzaGFsbG93UmVhY3RpdmUodGFyZ2V0KSB7XHJcbiAgICByZXR1cm4gY3JlYXRlUmVhY3RpdmVPYmplY3QodGFyZ2V0LCBmYWxzZSwgc2hhbGxvd1JlYWN0aXZlSGFuZGxlcnMsIHNoYWxsb3dDb2xsZWN0aW9uSGFuZGxlcnMpO1xyXG59XHJcbi8qKlxyXG4gKiBDcmVhdGVzIGEgcmVhZG9ubHkgY29weSBvZiB0aGUgb3JpZ2luYWwgb2JqZWN0LiBOb3RlIHRoZSByZXR1cm5lZCBjb3B5IGlzIG5vdFxyXG4gKiBtYWRlIHJlYWN0aXZlLCBidXQgYHJlYWRvbmx5YCBjYW4gYmUgY2FsbGVkIG9uIGFuIGFscmVhZHkgcmVhY3RpdmUgb2JqZWN0LlxyXG4gKi9cclxuZnVuY3Rpb24gcmVhZG9ubHkodGFyZ2V0KSB7XHJcbiAgICByZXR1cm4gY3JlYXRlUmVhY3RpdmVPYmplY3QodGFyZ2V0LCB0cnVlLCByZWFkb25seUhhbmRsZXJzLCByZWFkb25seUNvbGxlY3Rpb25IYW5kbGVycyk7XHJcbn1cclxuLyoqXHJcbiAqIFJldHVybnMgYSByZWFjdGl2ZS1jb3B5IG9mIHRoZSBvcmlnaW5hbCBvYmplY3QsIHdoZXJlIG9ubHkgdGhlIHJvb3QgbGV2ZWxcclxuICogcHJvcGVydGllcyBhcmUgcmVhZG9ubHksIGFuZCBkb2VzIE5PVCB1bndyYXAgcmVmcyBub3IgcmVjdXJzaXZlbHkgY29udmVydFxyXG4gKiByZXR1cm5lZCBwcm9wZXJ0aWVzLlxyXG4gKiBUaGlzIGlzIHVzZWQgZm9yIGNyZWF0aW5nIHRoZSBwcm9wcyBwcm94eSBvYmplY3QgZm9yIHN0YXRlZnVsIGNvbXBvbmVudHMuXHJcbiAqL1xyXG5mdW5jdGlvbiBzaGFsbG93UmVhZG9ubHkodGFyZ2V0KSB7XHJcbiAgICByZXR1cm4gY3JlYXRlUmVhY3RpdmVPYmplY3QodGFyZ2V0LCB0cnVlLCBzaGFsbG93UmVhZG9ubHlIYW5kbGVycywgcmVhZG9ubHlDb2xsZWN0aW9uSGFuZGxlcnMpO1xyXG59XHJcbmZ1bmN0aW9uIGNyZWF0ZVJlYWN0aXZlT2JqZWN0KHRhcmdldCwgaXNSZWFkb25seSwgYmFzZUhhbmRsZXJzLCBjb2xsZWN0aW9uSGFuZGxlcnMpIHtcclxuICAgIGlmICghaXNPYmplY3QodGFyZ2V0KSkge1xyXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgY29uc29sZS53YXJuKGB2YWx1ZSBjYW5ub3QgYmUgbWFkZSByZWFjdGl2ZTogJHtTdHJpbmcodGFyZ2V0KX1gKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRhcmdldDtcclxuICAgIH1cclxuICAgIC8vIHRhcmdldCBpcyBhbHJlYWR5IGEgUHJveHksIHJldHVybiBpdC5cclxuICAgIC8vIGV4Y2VwdGlvbjogY2FsbGluZyByZWFkb25seSgpIG9uIGEgcmVhY3RpdmUgb2JqZWN0XHJcbiAgICBpZiAodGFyZ2V0W1wiX192X3Jhd1wiIC8qIFJBVyAqL10gJiZcclxuICAgICAgICAhKGlzUmVhZG9ubHkgJiYgdGFyZ2V0W1wiX192X2lzUmVhY3RpdmVcIiAvKiBJU19SRUFDVElWRSAqL10pKSB7XHJcbiAgICAgICAgcmV0dXJuIHRhcmdldDtcclxuICAgIH1cclxuICAgIC8vIHRhcmdldCBhbHJlYWR5IGhhcyBjb3JyZXNwb25kaW5nIFByb3h5XHJcbiAgICBjb25zdCBwcm94eU1hcCA9IGlzUmVhZG9ubHkgPyByZWFkb25seU1hcCA6IHJlYWN0aXZlTWFwO1xyXG4gICAgY29uc3QgZXhpc3RpbmdQcm94eSA9IHByb3h5TWFwLmdldCh0YXJnZXQpO1xyXG4gICAgaWYgKGV4aXN0aW5nUHJveHkpIHtcclxuICAgICAgICByZXR1cm4gZXhpc3RpbmdQcm94eTtcclxuICAgIH1cclxuICAgIC8vIG9ubHkgYSB3aGl0ZWxpc3Qgb2YgdmFsdWUgdHlwZXMgY2FuIGJlIG9ic2VydmVkLlxyXG4gICAgY29uc3QgdGFyZ2V0VHlwZSA9IGdldFRhcmdldFR5cGUodGFyZ2V0KTtcclxuICAgIGlmICh0YXJnZXRUeXBlID09PSAwIC8qIElOVkFMSUQgKi8pIHtcclxuICAgICAgICByZXR1cm4gdGFyZ2V0O1xyXG4gICAgfVxyXG4gICAgY29uc3QgcHJveHkgPSBuZXcgUHJveHkodGFyZ2V0LCB0YXJnZXRUeXBlID09PSAyIC8qIENPTExFQ1RJT04gKi8gPyBjb2xsZWN0aW9uSGFuZGxlcnMgOiBiYXNlSGFuZGxlcnMpO1xyXG4gICAgcHJveHlNYXAuc2V0KHRhcmdldCwgcHJveHkpO1xyXG4gICAgcmV0dXJuIHByb3h5O1xyXG59XHJcbmZ1bmN0aW9uIGlzUmVhY3RpdmUodmFsdWUpIHtcclxuICAgIGlmIChpc1JlYWRvbmx5KHZhbHVlKSkge1xyXG4gICAgICAgIHJldHVybiBpc1JlYWN0aXZlKHZhbHVlW1wiX192X3Jhd1wiIC8qIFJBVyAqL10pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuICEhKHZhbHVlICYmIHZhbHVlW1wiX192X2lzUmVhY3RpdmVcIiAvKiBJU19SRUFDVElWRSAqL10pO1xyXG59XHJcbmZ1bmN0aW9uIGlzUmVhZG9ubHkodmFsdWUpIHtcclxuICAgIHJldHVybiAhISh2YWx1ZSAmJiB2YWx1ZVtcIl9fdl9pc1JlYWRvbmx5XCIgLyogSVNfUkVBRE9OTFkgKi9dKTtcclxufVxyXG5mdW5jdGlvbiBpc1Byb3h5KHZhbHVlKSB7XHJcbiAgICByZXR1cm4gaXNSZWFjdGl2ZSh2YWx1ZSkgfHwgaXNSZWFkb25seSh2YWx1ZSk7XHJcbn1cclxuZnVuY3Rpb24gdG9SYXcob2JzZXJ2ZWQpIHtcclxuICAgIHJldHVybiAoKG9ic2VydmVkICYmIHRvUmF3KG9ic2VydmVkW1wiX192X3Jhd1wiIC8qIFJBVyAqL10pKSB8fCBvYnNlcnZlZCk7XHJcbn1cclxuZnVuY3Rpb24gbWFya1Jhdyh2YWx1ZSkge1xyXG4gICAgZGVmKHZhbHVlLCBcIl9fdl9za2lwXCIgLyogU0tJUCAqLywgdHJ1ZSk7XHJcbiAgICByZXR1cm4gdmFsdWU7XHJcbn1cblxuY29uc3QgY29udmVydCA9ICh2YWwpID0+IGlzT2JqZWN0KHZhbCkgPyByZWFjdGl2ZSh2YWwpIDogdmFsO1xyXG5mdW5jdGlvbiBpc1JlZihyKSB7XHJcbiAgICByZXR1cm4gQm9vbGVhbihyICYmIHIuX192X2lzUmVmID09PSB0cnVlKTtcclxufVxyXG5mdW5jdGlvbiByZWYodmFsdWUpIHtcclxuICAgIHJldHVybiBjcmVhdGVSZWYodmFsdWUpO1xyXG59XHJcbmZ1bmN0aW9uIHNoYWxsb3dSZWYodmFsdWUpIHtcclxuICAgIHJldHVybiBjcmVhdGVSZWYodmFsdWUsIHRydWUpO1xyXG59XHJcbmNsYXNzIFJlZkltcGwge1xyXG4gICAgY29uc3RydWN0b3IoX3Jhd1ZhbHVlLCBfc2hhbGxvdyA9IGZhbHNlKSB7XHJcbiAgICAgICAgdGhpcy5fcmF3VmFsdWUgPSBfcmF3VmFsdWU7XHJcbiAgICAgICAgdGhpcy5fc2hhbGxvdyA9IF9zaGFsbG93O1xyXG4gICAgICAgIHRoaXMuX192X2lzUmVmID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLl92YWx1ZSA9IF9zaGFsbG93ID8gX3Jhd1ZhbHVlIDogY29udmVydChfcmF3VmFsdWUpO1xyXG4gICAgfVxyXG4gICAgZ2V0IHZhbHVlKCkge1xyXG4gICAgICAgIHRyYWNrKHRvUmF3KHRoaXMpLCBcImdldFwiIC8qIEdFVCAqLywgJ3ZhbHVlJyk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xyXG4gICAgfVxyXG4gICAgc2V0IHZhbHVlKG5ld1ZhbCkge1xyXG4gICAgICAgIGlmIChoYXNDaGFuZ2VkKHRvUmF3KG5ld1ZhbCksIHRoaXMuX3Jhd1ZhbHVlKSkge1xyXG4gICAgICAgICAgICB0aGlzLl9yYXdWYWx1ZSA9IG5ld1ZhbDtcclxuICAgICAgICAgICAgdGhpcy5fdmFsdWUgPSB0aGlzLl9zaGFsbG93ID8gbmV3VmFsIDogY29udmVydChuZXdWYWwpO1xyXG4gICAgICAgICAgICB0cmlnZ2VyKHRvUmF3KHRoaXMpLCBcInNldFwiIC8qIFNFVCAqLywgJ3ZhbHVlJywgbmV3VmFsKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gY3JlYXRlUmVmKHJhd1ZhbHVlLCBzaGFsbG93ID0gZmFsc2UpIHtcclxuICAgIGlmIChpc1JlZihyYXdWYWx1ZSkpIHtcclxuICAgICAgICByZXR1cm4gcmF3VmFsdWU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbmV3IFJlZkltcGwocmF3VmFsdWUsIHNoYWxsb3cpO1xyXG59XHJcbmZ1bmN0aW9uIHRyaWdnZXJSZWYocmVmKSB7XHJcbiAgICB0cmlnZ2VyKHRvUmF3KHJlZiksIFwic2V0XCIgLyogU0VUICovLCAndmFsdWUnLCAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgPyByZWYudmFsdWUgOiB2b2lkIDApO1xyXG59XHJcbmZ1bmN0aW9uIHVucmVmKHJlZikge1xyXG4gICAgcmV0dXJuIGlzUmVmKHJlZikgPyByZWYudmFsdWUgOiByZWY7XHJcbn1cclxuY29uc3Qgc2hhbGxvd1Vud3JhcEhhbmRsZXJzID0ge1xyXG4gICAgZ2V0OiAodGFyZ2V0LCBrZXksIHJlY2VpdmVyKSA9PiB1bnJlZihSZWZsZWN0LmdldCh0YXJnZXQsIGtleSwgcmVjZWl2ZXIpKSxcclxuICAgIHNldDogKHRhcmdldCwga2V5LCB2YWx1ZSwgcmVjZWl2ZXIpID0+IHtcclxuICAgICAgICBjb25zdCBvbGRWYWx1ZSA9IHRhcmdldFtrZXldO1xyXG4gICAgICAgIGlmIChpc1JlZihvbGRWYWx1ZSkgJiYgIWlzUmVmKHZhbHVlKSkge1xyXG4gICAgICAgICAgICBvbGRWYWx1ZS52YWx1ZSA9IHZhbHVlO1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBSZWZsZWN0LnNldCh0YXJnZXQsIGtleSwgdmFsdWUsIHJlY2VpdmVyKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn07XHJcbmZ1bmN0aW9uIHByb3h5UmVmcyhvYmplY3RXaXRoUmVmcykge1xyXG4gICAgcmV0dXJuIGlzUmVhY3RpdmUob2JqZWN0V2l0aFJlZnMpXHJcbiAgICAgICAgPyBvYmplY3RXaXRoUmVmc1xyXG4gICAgICAgIDogbmV3IFByb3h5KG9iamVjdFdpdGhSZWZzLCBzaGFsbG93VW53cmFwSGFuZGxlcnMpO1xyXG59XHJcbmNsYXNzIEN1c3RvbVJlZkltcGwge1xyXG4gICAgY29uc3RydWN0b3IoZmFjdG9yeSkge1xyXG4gICAgICAgIHRoaXMuX192X2lzUmVmID0gdHJ1ZTtcclxuICAgICAgICBjb25zdCB7IGdldCwgc2V0IH0gPSBmYWN0b3J5KCgpID0+IHRyYWNrKHRoaXMsIFwiZ2V0XCIgLyogR0VUICovLCAndmFsdWUnKSwgKCkgPT4gdHJpZ2dlcih0aGlzLCBcInNldFwiIC8qIFNFVCAqLywgJ3ZhbHVlJykpO1xyXG4gICAgICAgIHRoaXMuX2dldCA9IGdldDtcclxuICAgICAgICB0aGlzLl9zZXQgPSBzZXQ7XHJcbiAgICB9XHJcbiAgICBnZXQgdmFsdWUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldCgpO1xyXG4gICAgfVxyXG4gICAgc2V0IHZhbHVlKG5ld1ZhbCkge1xyXG4gICAgICAgIHRoaXMuX3NldChuZXdWYWwpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGN1c3RvbVJlZihmYWN0b3J5KSB7XHJcbiAgICByZXR1cm4gbmV3IEN1c3RvbVJlZkltcGwoZmFjdG9yeSk7XHJcbn1cclxuZnVuY3Rpb24gdG9SZWZzKG9iamVjdCkge1xyXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhaXNQcm94eShvYmplY3QpKSB7XHJcbiAgICAgICAgY29uc29sZS53YXJuKGB0b1JlZnMoKSBleHBlY3RzIGEgcmVhY3RpdmUgb2JqZWN0IGJ1dCByZWNlaXZlZCBhIHBsYWluIG9uZS5gKTtcclxuICAgIH1cclxuICAgIGNvbnN0IHJldCA9IGlzQXJyYXkob2JqZWN0KSA/IG5ldyBBcnJheShvYmplY3QubGVuZ3RoKSA6IHt9O1xyXG4gICAgZm9yIChjb25zdCBrZXkgaW4gb2JqZWN0KSB7XHJcbiAgICAgICAgcmV0W2tleV0gPSB0b1JlZihvYmplY3QsIGtleSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmV0O1xyXG59XHJcbmNsYXNzIE9iamVjdFJlZkltcGwge1xyXG4gICAgY29uc3RydWN0b3IoX29iamVjdCwgX2tleSkge1xyXG4gICAgICAgIHRoaXMuX29iamVjdCA9IF9vYmplY3Q7XHJcbiAgICAgICAgdGhpcy5fa2V5ID0gX2tleTtcclxuICAgICAgICB0aGlzLl9fdl9pc1JlZiA9IHRydWU7XHJcbiAgICB9XHJcbiAgICBnZXQgdmFsdWUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX29iamVjdFt0aGlzLl9rZXldO1xyXG4gICAgfVxyXG4gICAgc2V0IHZhbHVlKG5ld1ZhbCkge1xyXG4gICAgICAgIHRoaXMuX29iamVjdFt0aGlzLl9rZXldID0gbmV3VmFsO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIHRvUmVmKG9iamVjdCwga2V5KSB7XHJcbiAgICByZXR1cm4gaXNSZWYob2JqZWN0W2tleV0pXHJcbiAgICAgICAgPyBvYmplY3Rba2V5XVxyXG4gICAgICAgIDogbmV3IE9iamVjdFJlZkltcGwob2JqZWN0LCBrZXkpO1xyXG59XG5cbmNsYXNzIENvbXB1dGVkUmVmSW1wbCB7XHJcbiAgICBjb25zdHJ1Y3RvcihnZXR0ZXIsIF9zZXR0ZXIsIGlzUmVhZG9ubHkpIHtcclxuICAgICAgICB0aGlzLl9zZXR0ZXIgPSBfc2V0dGVyO1xyXG4gICAgICAgIHRoaXMuX2RpcnR5ID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLl9fdl9pc1JlZiA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5lZmZlY3QgPSBlZmZlY3QoZ2V0dGVyLCB7XHJcbiAgICAgICAgICAgIGxhenk6IHRydWUsXHJcbiAgICAgICAgICAgIHNjaGVkdWxlcjogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9kaXJ0eSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2RpcnR5ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyKHRvUmF3KHRoaXMpLCBcInNldFwiIC8qIFNFVCAqLywgJ3ZhbHVlJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzW1wiX192X2lzUmVhZG9ubHlcIiAvKiBJU19SRUFET05MWSAqL10gPSBpc1JlYWRvbmx5O1xyXG4gICAgfVxyXG4gICAgZ2V0IHZhbHVlKCkge1xyXG4gICAgICAgIGlmICh0aGlzLl9kaXJ0eSkge1xyXG4gICAgICAgICAgICB0aGlzLl92YWx1ZSA9IHRoaXMuZWZmZWN0KCk7XHJcbiAgICAgICAgICAgIHRoaXMuX2RpcnR5ID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRyYWNrKHRvUmF3KHRoaXMpLCBcImdldFwiIC8qIEdFVCAqLywgJ3ZhbHVlJyk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xyXG4gICAgfVxyXG4gICAgc2V0IHZhbHVlKG5ld1ZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy5fc2V0dGVyKG5ld1ZhbHVlKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBjb21wdXRlZChnZXR0ZXJPck9wdGlvbnMpIHtcclxuICAgIGxldCBnZXR0ZXI7XHJcbiAgICBsZXQgc2V0dGVyO1xyXG4gICAgaWYgKGlzRnVuY3Rpb24oZ2V0dGVyT3JPcHRpb25zKSkge1xyXG4gICAgICAgIGdldHRlciA9IGdldHRlck9yT3B0aW9ucztcclxuICAgICAgICBzZXR0ZXIgPSAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJylcclxuICAgICAgICAgICAgPyAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ1dyaXRlIG9wZXJhdGlvbiBmYWlsZWQ6IGNvbXB1dGVkIHZhbHVlIGlzIHJlYWRvbmx5Jyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgOiBOT09QO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgZ2V0dGVyID0gZ2V0dGVyT3JPcHRpb25zLmdldDtcclxuICAgICAgICBzZXR0ZXIgPSBnZXR0ZXJPck9wdGlvbnMuc2V0O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG5ldyBDb21wdXRlZFJlZkltcGwoZ2V0dGVyLCBzZXR0ZXIsIGlzRnVuY3Rpb24oZ2V0dGVyT3JPcHRpb25zKSB8fCAhZ2V0dGVyT3JPcHRpb25zLnNldCk7XHJcbn1cblxuZXhwb3J0IHsgSVRFUkFURV9LRVksIGNvbXB1dGVkLCBjdXN0b21SZWYsIGVmZmVjdCwgZW5hYmxlVHJhY2tpbmcsIGlzUHJveHksIGlzUmVhY3RpdmUsIGlzUmVhZG9ubHksIGlzUmVmLCBtYXJrUmF3LCBwYXVzZVRyYWNraW5nLCBwcm94eVJlZnMsIHJlYWN0aXZlLCByZWFkb25seSwgcmVmLCByZXNldFRyYWNraW5nLCBzaGFsbG93UmVhY3RpdmUsIHNoYWxsb3dSZWFkb25seSwgc2hhbGxvd1JlZiwgc3RvcCwgdG9SYXcsIHRvUmVmLCB0b1JlZnMsIHRyYWNrLCB0cmlnZ2VyLCB0cmlnZ2VyUmVmLCB1bnJlZiB9O1xuIiwiaW1wb3J0IHsgcGF1c2VUcmFja2luZywgcmVzZXRUcmFja2luZywgaXNSZWYsIHRvUmF3LCBzaGFsbG93UmVhY3RpdmUsIHRyaWdnZXIsIGlzUmVhY3RpdmUsIGVmZmVjdCwgc3RvcCwgcmVmLCBpc1Byb3h5LCBwcm94eVJlZnMsIHRvUmVmLCByZWFjdGl2ZSwgc2hhbGxvd1JlYWRvbmx5LCB0cmFjaywgY29tcHV0ZWQgYXMgY29tcHV0ZWQkMSwgaXNSZWFkb25seSB9IGZyb20gJ0B2dWUvcmVhY3Rpdml0eSc7XG5leHBvcnQgeyBjdXN0b21SZWYsIGlzUHJveHksIGlzUmVhY3RpdmUsIGlzUmVhZG9ubHksIGlzUmVmLCBtYXJrUmF3LCBwcm94eVJlZnMsIHJlYWN0aXZlLCByZWFkb25seSwgcmVmLCBzaGFsbG93UmVhY3RpdmUsIHNoYWxsb3dSZWFkb25seSwgc2hhbGxvd1JlZiwgdG9SYXcsIHRvUmVmLCB0b1JlZnMsIHRyaWdnZXJSZWYsIHVucmVmIH0gZnJvbSAnQHZ1ZS9yZWFjdGl2aXR5JztcbmltcG9ydCB7IGlzU3RyaW5nLCBpc0Z1bmN0aW9uLCBpc1Byb21pc2UsIGlzQXJyYXksIGV4dGVuZCwgRU1QVFlfT0JKLCB0b0hhbmRsZXJLZXksIHRvTnVtYmVyLCBoeXBoZW5hdGUsIGNhbWVsaXplLCBpc09uLCBoYXNPd24sIGlzTW9kZWxMaXN0ZW5lciwgZGVmLCBpc1Jlc2VydmVkUHJvcCwgRU1QVFlfQVJSLCBpc09iamVjdCwgY2FwaXRhbGl6ZSwgdG9SYXdUeXBlLCBtYWtlTWFwLCByZW1vdmUsIE5PT1AsIGhhc0NoYW5nZWQsIGlzU2V0LCBpc01hcCwgaW52b2tlQXJyYXlGbnMsIE5PLCBnZXRHbG9iYWxUaGlzLCBub3JtYWxpemVDbGFzcywgbm9ybWFsaXplU3R5bGUsIGlzR2xvYmFsbHlXaGl0ZWxpc3RlZCB9IGZyb20gJ0B2dWUvc2hhcmVkJztcbmV4cG9ydCB7IGNhbWVsaXplLCBjYXBpdGFsaXplLCB0b0Rpc3BsYXlTdHJpbmcsIHRvSGFuZGxlcktleSB9IGZyb20gJ0B2dWUvc2hhcmVkJztcblxuY29uc3Qgc3RhY2sgPSBbXTtcclxuZnVuY3Rpb24gcHVzaFdhcm5pbmdDb250ZXh0KHZub2RlKSB7XHJcbiAgICBzdGFjay5wdXNoKHZub2RlKTtcclxufVxyXG5mdW5jdGlvbiBwb3BXYXJuaW5nQ29udGV4dCgpIHtcclxuICAgIHN0YWNrLnBvcCgpO1xyXG59XHJcbmZ1bmN0aW9uIHdhcm4obXNnLCAuLi5hcmdzKSB7XHJcbiAgICAvLyBhdm9pZCBwcm9wcyBmb3JtYXR0aW5nIG9yIHdhcm4gaGFuZGxlciB0cmFja2luZyBkZXBzIHRoYXQgbWlnaHQgYmUgbXV0YXRlZFxyXG4gICAgLy8gZHVyaW5nIHBhdGNoLCBsZWFkaW5nIHRvIGluZmluaXRlIHJlY3Vyc2lvbi5cclxuICAgIHBhdXNlVHJhY2tpbmcoKTtcclxuICAgIGNvbnN0IGluc3RhbmNlID0gc3RhY2subGVuZ3RoID8gc3RhY2tbc3RhY2subGVuZ3RoIC0gMV0uY29tcG9uZW50IDogbnVsbDtcclxuICAgIGNvbnN0IGFwcFdhcm5IYW5kbGVyID0gaW5zdGFuY2UgJiYgaW5zdGFuY2UuYXBwQ29udGV4dC5jb25maWcud2FybkhhbmRsZXI7XHJcbiAgICBjb25zdCB0cmFjZSA9IGdldENvbXBvbmVudFRyYWNlKCk7XHJcbiAgICBpZiAoYXBwV2FybkhhbmRsZXIpIHtcclxuICAgICAgICBjYWxsV2l0aEVycm9ySGFuZGxpbmcoYXBwV2FybkhhbmRsZXIsIGluc3RhbmNlLCAxMSAvKiBBUFBfV0FSTl9IQU5ETEVSICovLCBbXHJcbiAgICAgICAgICAgIG1zZyArIGFyZ3Muam9pbignJyksXHJcbiAgICAgICAgICAgIGluc3RhbmNlICYmIGluc3RhbmNlLnByb3h5LFxyXG4gICAgICAgICAgICB0cmFjZVxyXG4gICAgICAgICAgICAgICAgLm1hcCgoeyB2bm9kZSB9KSA9PiBgYXQgPCR7Zm9ybWF0Q29tcG9uZW50TmFtZShpbnN0YW5jZSwgdm5vZGUudHlwZSl9PmApXHJcbiAgICAgICAgICAgICAgICAuam9pbignXFxuJyksXHJcbiAgICAgICAgICAgIHRyYWNlXHJcbiAgICAgICAgXSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBjb25zdCB3YXJuQXJncyA9IFtgW1Z1ZSB3YXJuXTogJHttc2d9YCwgLi4uYXJnc107XHJcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXHJcbiAgICAgICAgaWYgKHRyYWNlLmxlbmd0aCAmJlxyXG4gICAgICAgICAgICAvLyBhdm9pZCBzcGFtbWluZyBjb25zb2xlIGR1cmluZyB0ZXN0c1xyXG4gICAgICAgICAgICAhZmFsc2UpIHtcclxuICAgICAgICAgICAgd2FybkFyZ3MucHVzaChgXFxuYCwgLi4uZm9ybWF0VHJhY2UodHJhY2UpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc29sZS53YXJuKC4uLndhcm5BcmdzKTtcclxuICAgIH1cclxuICAgIHJlc2V0VHJhY2tpbmcoKTtcclxufVxyXG5mdW5jdGlvbiBnZXRDb21wb25lbnRUcmFjZSgpIHtcclxuICAgIGxldCBjdXJyZW50Vk5vZGUgPSBzdGFja1tzdGFjay5sZW5ndGggLSAxXTtcclxuICAgIGlmICghY3VycmVudFZOb2RlKSB7XHJcbiAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgfVxyXG4gICAgLy8gd2UgY2FuJ3QganVzdCB1c2UgdGhlIHN0YWNrIGJlY2F1c2UgaXQgd2lsbCBiZSBpbmNvbXBsZXRlIGR1cmluZyB1cGRhdGVzXHJcbiAgICAvLyB0aGF0IGRpZCBub3Qgc3RhcnQgZnJvbSB0aGUgcm9vdC4gUmUtY29uc3RydWN0IHRoZSBwYXJlbnQgY2hhaW4gdXNpbmdcclxuICAgIC8vIGluc3RhbmNlIHBhcmVudCBwb2ludGVycy5cclxuICAgIGNvbnN0IG5vcm1hbGl6ZWRTdGFjayA9IFtdO1xyXG4gICAgd2hpbGUgKGN1cnJlbnRWTm9kZSkge1xyXG4gICAgICAgIGNvbnN0IGxhc3QgPSBub3JtYWxpemVkU3RhY2tbMF07XHJcbiAgICAgICAgaWYgKGxhc3QgJiYgbGFzdC52bm9kZSA9PT0gY3VycmVudFZOb2RlKSB7XHJcbiAgICAgICAgICAgIGxhc3QucmVjdXJzZUNvdW50Kys7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBub3JtYWxpemVkU3RhY2sucHVzaCh7XHJcbiAgICAgICAgICAgICAgICB2bm9kZTogY3VycmVudFZOb2RlLFxyXG4gICAgICAgICAgICAgICAgcmVjdXJzZUNvdW50OiAwXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBwYXJlbnRJbnN0YW5jZSA9IGN1cnJlbnRWTm9kZS5jb21wb25lbnQgJiYgY3VycmVudFZOb2RlLmNvbXBvbmVudC5wYXJlbnQ7XHJcbiAgICAgICAgY3VycmVudFZOb2RlID0gcGFyZW50SW5zdGFuY2UgJiYgcGFyZW50SW5zdGFuY2Uudm5vZGU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbm9ybWFsaXplZFN0YWNrO1xyXG59XHJcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXHJcbmZ1bmN0aW9uIGZvcm1hdFRyYWNlKHRyYWNlKSB7XHJcbiAgICBjb25zdCBsb2dzID0gW107XHJcbiAgICB0cmFjZS5mb3JFYWNoKChlbnRyeSwgaSkgPT4ge1xyXG4gICAgICAgIGxvZ3MucHVzaCguLi4oaSA9PT0gMCA/IFtdIDogW2BcXG5gXSksIC4uLmZvcm1hdFRyYWNlRW50cnkoZW50cnkpKTtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIGxvZ3M7XHJcbn1cclxuZnVuY3Rpb24gZm9ybWF0VHJhY2VFbnRyeSh7IHZub2RlLCByZWN1cnNlQ291bnQgfSkge1xyXG4gICAgY29uc3QgcG9zdGZpeCA9IHJlY3Vyc2VDb3VudCA+IDAgPyBgLi4uICgke3JlY3Vyc2VDb3VudH0gcmVjdXJzaXZlIGNhbGxzKWAgOiBgYDtcclxuICAgIGNvbnN0IGlzUm9vdCA9IHZub2RlLmNvbXBvbmVudCA/IHZub2RlLmNvbXBvbmVudC5wYXJlbnQgPT0gbnVsbCA6IGZhbHNlO1xyXG4gICAgY29uc3Qgb3BlbiA9IGAgYXQgPCR7Zm9ybWF0Q29tcG9uZW50TmFtZSh2bm9kZS5jb21wb25lbnQsIHZub2RlLnR5cGUsIGlzUm9vdCl9YDtcclxuICAgIGNvbnN0IGNsb3NlID0gYD5gICsgcG9zdGZpeDtcclxuICAgIHJldHVybiB2bm9kZS5wcm9wc1xyXG4gICAgICAgID8gW29wZW4sIC4uLmZvcm1hdFByb3BzKHZub2RlLnByb3BzKSwgY2xvc2VdXHJcbiAgICAgICAgOiBbb3BlbiArIGNsb3NlXTtcclxufVxyXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xyXG5mdW5jdGlvbiBmb3JtYXRQcm9wcyhwcm9wcykge1xyXG4gICAgY29uc3QgcmVzID0gW107XHJcbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMocHJvcHMpO1xyXG4gICAga2V5cy5zbGljZSgwLCAzKS5mb3JFYWNoKGtleSA9PiB7XHJcbiAgICAgICAgcmVzLnB1c2goLi4uZm9ybWF0UHJvcChrZXksIHByb3BzW2tleV0pKTtcclxuICAgIH0pO1xyXG4gICAgaWYgKGtleXMubGVuZ3RoID4gMykge1xyXG4gICAgICAgIHJlcy5wdXNoKGAgLi4uYCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzO1xyXG59XHJcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXHJcbmZ1bmN0aW9uIGZvcm1hdFByb3Aoa2V5LCB2YWx1ZSwgcmF3KSB7XHJcbiAgICBpZiAoaXNTdHJpbmcodmFsdWUpKSB7XHJcbiAgICAgICAgdmFsdWUgPSBKU09OLnN0cmluZ2lmeSh2YWx1ZSk7XHJcbiAgICAgICAgcmV0dXJuIHJhdyA/IHZhbHVlIDogW2Ake2tleX09JHt2YWx1ZX1gXTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgfHxcclxuICAgICAgICB0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJyB8fFxyXG4gICAgICAgIHZhbHVlID09IG51bGwpIHtcclxuICAgICAgICByZXR1cm4gcmF3ID8gdmFsdWUgOiBbYCR7a2V5fT0ke3ZhbHVlfWBdO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoaXNSZWYodmFsdWUpKSB7XHJcbiAgICAgICAgdmFsdWUgPSBmb3JtYXRQcm9wKGtleSwgdG9SYXcodmFsdWUudmFsdWUpLCB0cnVlKTtcclxuICAgICAgICByZXR1cm4gcmF3ID8gdmFsdWUgOiBbYCR7a2V5fT1SZWY8YCwgdmFsdWUsIGA+YF07XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChpc0Z1bmN0aW9uKHZhbHVlKSkge1xyXG4gICAgICAgIHJldHVybiBbYCR7a2V5fT1mbiR7dmFsdWUubmFtZSA/IGA8JHt2YWx1ZS5uYW1lfT5gIDogYGB9YF07XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICB2YWx1ZSA9IHRvUmF3KHZhbHVlKTtcclxuICAgICAgICByZXR1cm4gcmF3ID8gdmFsdWUgOiBbYCR7a2V5fT1gLCB2YWx1ZV07XHJcbiAgICB9XHJcbn1cblxuY29uc3QgRXJyb3JUeXBlU3RyaW5ncyA9IHtcclxuICAgIFtcImJjXCIgLyogQkVGT1JFX0NSRUFURSAqL106ICdiZWZvcmVDcmVhdGUgaG9vaycsXHJcbiAgICBbXCJjXCIgLyogQ1JFQVRFRCAqL106ICdjcmVhdGVkIGhvb2snLFxyXG4gICAgW1wiYm1cIiAvKiBCRUZPUkVfTU9VTlQgKi9dOiAnYmVmb3JlTW91bnQgaG9vaycsXHJcbiAgICBbXCJtXCIgLyogTU9VTlRFRCAqL106ICdtb3VudGVkIGhvb2snLFxyXG4gICAgW1wiYnVcIiAvKiBCRUZPUkVfVVBEQVRFICovXTogJ2JlZm9yZVVwZGF0ZSBob29rJyxcclxuICAgIFtcInVcIiAvKiBVUERBVEVEICovXTogJ3VwZGF0ZWQnLFxyXG4gICAgW1wiYnVtXCIgLyogQkVGT1JFX1VOTU9VTlQgKi9dOiAnYmVmb3JlVW5tb3VudCBob29rJyxcclxuICAgIFtcInVtXCIgLyogVU5NT1VOVEVEICovXTogJ3VubW91bnRlZCBob29rJyxcclxuICAgIFtcImFcIiAvKiBBQ1RJVkFURUQgKi9dOiAnYWN0aXZhdGVkIGhvb2snLFxyXG4gICAgW1wiZGFcIiAvKiBERUFDVElWQVRFRCAqL106ICdkZWFjdGl2YXRlZCBob29rJyxcclxuICAgIFtcImVjXCIgLyogRVJST1JfQ0FQVFVSRUQgKi9dOiAnZXJyb3JDYXB0dXJlZCBob29rJyxcclxuICAgIFtcInJ0Y1wiIC8qIFJFTkRFUl9UUkFDS0VEICovXTogJ3JlbmRlclRyYWNrZWQgaG9vaycsXHJcbiAgICBbXCJydGdcIiAvKiBSRU5ERVJfVFJJR0dFUkVEICovXTogJ3JlbmRlclRyaWdnZXJlZCBob29rJyxcclxuICAgIFswIC8qIFNFVFVQX0ZVTkNUSU9OICovXTogJ3NldHVwIGZ1bmN0aW9uJyxcclxuICAgIFsxIC8qIFJFTkRFUl9GVU5DVElPTiAqL106ICdyZW5kZXIgZnVuY3Rpb24nLFxyXG4gICAgWzIgLyogV0FUQ0hfR0VUVEVSICovXTogJ3dhdGNoZXIgZ2V0dGVyJyxcclxuICAgIFszIC8qIFdBVENIX0NBTExCQUNLICovXTogJ3dhdGNoZXIgY2FsbGJhY2snLFxyXG4gICAgWzQgLyogV0FUQ0hfQ0xFQU5VUCAqL106ICd3YXRjaGVyIGNsZWFudXAgZnVuY3Rpb24nLFxyXG4gICAgWzUgLyogTkFUSVZFX0VWRU5UX0hBTkRMRVIgKi9dOiAnbmF0aXZlIGV2ZW50IGhhbmRsZXInLFxyXG4gICAgWzYgLyogQ09NUE9ORU5UX0VWRU5UX0hBTkRMRVIgKi9dOiAnY29tcG9uZW50IGV2ZW50IGhhbmRsZXInLFxyXG4gICAgWzcgLyogVk5PREVfSE9PSyAqL106ICd2bm9kZSBob29rJyxcclxuICAgIFs4IC8qIERJUkVDVElWRV9IT09LICovXTogJ2RpcmVjdGl2ZSBob29rJyxcclxuICAgIFs5IC8qIFRSQU5TSVRJT05fSE9PSyAqL106ICd0cmFuc2l0aW9uIGhvb2snLFxyXG4gICAgWzEwIC8qIEFQUF9FUlJPUl9IQU5ETEVSICovXTogJ2FwcCBlcnJvckhhbmRsZXInLFxyXG4gICAgWzExIC8qIEFQUF9XQVJOX0hBTkRMRVIgKi9dOiAnYXBwIHdhcm5IYW5kbGVyJyxcclxuICAgIFsxMiAvKiBGVU5DVElPTl9SRUYgKi9dOiAncmVmIGZ1bmN0aW9uJyxcclxuICAgIFsxMyAvKiBBU1lOQ19DT01QT05FTlRfTE9BREVSICovXTogJ2FzeW5jIGNvbXBvbmVudCBsb2FkZXInLFxyXG4gICAgWzE0IC8qIFNDSEVEVUxFUiAqL106ICdzY2hlZHVsZXIgZmx1c2guIFRoaXMgaXMgbGlrZWx5IGEgVnVlIGludGVybmFscyBidWcuICcgK1xyXG4gICAgICAgICdQbGVhc2Ugb3BlbiBhbiBpc3N1ZSBhdCBodHRwczovL25ldy1pc3N1ZS52dWVqcy5vcmcvP3JlcG89dnVlanMvdnVlLW5leHQnXHJcbn07XHJcbmZ1bmN0aW9uIGNhbGxXaXRoRXJyb3JIYW5kbGluZyhmbiwgaW5zdGFuY2UsIHR5cGUsIGFyZ3MpIHtcclxuICAgIGxldCByZXM7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHJlcyA9IGFyZ3MgPyBmbiguLi5hcmdzKSA6IGZuKCk7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgaGFuZGxlRXJyb3IoZXJyLCBpbnN0YW5jZSwgdHlwZSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzO1xyXG59XHJcbmZ1bmN0aW9uIGNhbGxXaXRoQXN5bmNFcnJvckhhbmRsaW5nKGZuLCBpbnN0YW5jZSwgdHlwZSwgYXJncykge1xyXG4gICAgaWYgKGlzRnVuY3Rpb24oZm4pKSB7XHJcbiAgICAgICAgY29uc3QgcmVzID0gY2FsbFdpdGhFcnJvckhhbmRsaW5nKGZuLCBpbnN0YW5jZSwgdHlwZSwgYXJncyk7XHJcbiAgICAgICAgaWYgKHJlcyAmJiBpc1Byb21pc2UocmVzKSkge1xyXG4gICAgICAgICAgICByZXMuY2F0Y2goZXJyID0+IHtcclxuICAgICAgICAgICAgICAgIGhhbmRsZUVycm9yKGVyciwgaW5zdGFuY2UsIHR5cGUpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlcztcclxuICAgIH1cclxuICAgIGNvbnN0IHZhbHVlcyA9IFtdO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmbi5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIHZhbHVlcy5wdXNoKGNhbGxXaXRoQXN5bmNFcnJvckhhbmRsaW5nKGZuW2ldLCBpbnN0YW5jZSwgdHlwZSwgYXJncykpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHZhbHVlcztcclxufVxyXG5mdW5jdGlvbiBoYW5kbGVFcnJvcihlcnIsIGluc3RhbmNlLCB0eXBlLCB0aHJvd0luRGV2ID0gdHJ1ZSkge1xyXG4gICAgY29uc3QgY29udGV4dFZOb2RlID0gaW5zdGFuY2UgPyBpbnN0YW5jZS52bm9kZSA6IG51bGw7XHJcbiAgICBpZiAoaW5zdGFuY2UpIHtcclxuICAgICAgICBsZXQgY3VyID0gaW5zdGFuY2UucGFyZW50O1xyXG4gICAgICAgIC8vIHRoZSBleHBvc2VkIGluc3RhbmNlIGlzIHRoZSByZW5kZXIgcHJveHkgdG8ga2VlcCBpdCBjb25zaXN0ZW50IHdpdGggMi54XHJcbiAgICAgICAgY29uc3QgZXhwb3NlZEluc3RhbmNlID0gaW5zdGFuY2UucHJveHk7XHJcbiAgICAgICAgLy8gaW4gcHJvZHVjdGlvbiB0aGUgaG9vayByZWNlaXZlcyBvbmx5IHRoZSBlcnJvciBjb2RlXHJcbiAgICAgICAgY29uc3QgZXJyb3JJbmZvID0gKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpID8gRXJyb3JUeXBlU3RyaW5nc1t0eXBlXSA6IHR5cGU7XHJcbiAgICAgICAgd2hpbGUgKGN1cikge1xyXG4gICAgICAgICAgICBjb25zdCBlcnJvckNhcHR1cmVkSG9va3MgPSBjdXIuZWM7XHJcbiAgICAgICAgICAgIGlmIChlcnJvckNhcHR1cmVkSG9va3MpIHtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZXJyb3JDYXB0dXJlZEhvb2tzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yQ2FwdHVyZWRIb29rc1tpXShlcnIsIGV4cG9zZWRJbnN0YW5jZSwgZXJyb3JJbmZvKSA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjdXIgPSBjdXIucGFyZW50O1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBhcHAtbGV2ZWwgaGFuZGxpbmdcclxuICAgICAgICBjb25zdCBhcHBFcnJvckhhbmRsZXIgPSBpbnN0YW5jZS5hcHBDb250ZXh0LmNvbmZpZy5lcnJvckhhbmRsZXI7XHJcbiAgICAgICAgaWYgKGFwcEVycm9ySGFuZGxlcikge1xyXG4gICAgICAgICAgICBjYWxsV2l0aEVycm9ySGFuZGxpbmcoYXBwRXJyb3JIYW5kbGVyLCBudWxsLCAxMCAvKiBBUFBfRVJST1JfSEFORExFUiAqLywgW2VyciwgZXhwb3NlZEluc3RhbmNlLCBlcnJvckluZm9dKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGxvZ0Vycm9yKGVyciwgdHlwZSwgY29udGV4dFZOb2RlLCB0aHJvd0luRGV2KTtcclxufVxyXG5mdW5jdGlvbiBsb2dFcnJvcihlcnIsIHR5cGUsIGNvbnRleHRWTm9kZSwgdGhyb3dJbkRldiA9IHRydWUpIHtcclxuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICBjb25zdCBpbmZvID0gRXJyb3JUeXBlU3RyaW5nc1t0eXBlXTtcclxuICAgICAgICBpZiAoY29udGV4dFZOb2RlKSB7XHJcbiAgICAgICAgICAgIHB1c2hXYXJuaW5nQ29udGV4dChjb250ZXh0Vk5vZGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB3YXJuKGBVbmhhbmRsZWQgZXJyb3Ike2luZm8gPyBgIGR1cmluZyBleGVjdXRpb24gb2YgJHtpbmZvfWAgOiBgYH1gKTtcclxuICAgICAgICBpZiAoY29udGV4dFZOb2RlKSB7XHJcbiAgICAgICAgICAgIHBvcFdhcm5pbmdDb250ZXh0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGNyYXNoIGluIGRldiBieSBkZWZhdWx0IHNvIGl0J3MgbW9yZSBub3RpY2VhYmxlXHJcbiAgICAgICAgaWYgKHRocm93SW5EZXYpIHtcclxuICAgICAgICAgICAgdGhyb3cgZXJyO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIC8vIHJlY292ZXIgaW4gcHJvZCB0byByZWR1Y2UgdGhlIGltcGFjdCBvbiBlbmQtdXNlclxyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcclxuICAgIH1cclxufVxuXG5sZXQgaXNGbHVzaGluZyA9IGZhbHNlO1xyXG5sZXQgaXNGbHVzaFBlbmRpbmcgPSBmYWxzZTtcclxuY29uc3QgcXVldWUgPSBbXTtcclxubGV0IGZsdXNoSW5kZXggPSAwO1xyXG5jb25zdCBwZW5kaW5nUHJlRmx1c2hDYnMgPSBbXTtcclxubGV0IGFjdGl2ZVByZUZsdXNoQ2JzID0gbnVsbDtcclxubGV0IHByZUZsdXNoSW5kZXggPSAwO1xyXG5jb25zdCBwZW5kaW5nUG9zdEZsdXNoQ2JzID0gW107XHJcbmxldCBhY3RpdmVQb3N0Rmx1c2hDYnMgPSBudWxsO1xyXG5sZXQgcG9zdEZsdXNoSW5kZXggPSAwO1xyXG5jb25zdCByZXNvbHZlZFByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoKTtcclxubGV0IGN1cnJlbnRGbHVzaFByb21pc2UgPSBudWxsO1xyXG5sZXQgY3VycmVudFByZUZsdXNoUGFyZW50Sm9iID0gbnVsbDtcclxuY29uc3QgUkVDVVJTSU9OX0xJTUlUID0gMTAwO1xyXG5mdW5jdGlvbiBuZXh0VGljayhmbikge1xyXG4gICAgY29uc3QgcCA9IGN1cnJlbnRGbHVzaFByb21pc2UgfHwgcmVzb2x2ZWRQcm9taXNlO1xyXG4gICAgcmV0dXJuIGZuID8gcC50aGVuKHRoaXMgPyBmbi5iaW5kKHRoaXMpIDogZm4pIDogcDtcclxufVxyXG5mdW5jdGlvbiBxdWV1ZUpvYihqb2IpIHtcclxuICAgIC8vIHRoZSBkZWR1cGUgc2VhcmNoIHVzZXMgdGhlIHN0YXJ0SW5kZXggYXJndW1lbnQgb2YgQXJyYXkuaW5jbHVkZXMoKVxyXG4gICAgLy8gYnkgZGVmYXVsdCB0aGUgc2VhcmNoIGluZGV4IGluY2x1ZGVzIHRoZSBjdXJyZW50IGpvYiB0aGF0IGlzIGJlaW5nIHJ1blxyXG4gICAgLy8gc28gaXQgY2Fubm90IHJlY3Vyc2l2ZWx5IHRyaWdnZXIgaXRzZWxmIGFnYWluLlxyXG4gICAgLy8gaWYgdGhlIGpvYiBpcyBhIHdhdGNoKCkgY2FsbGJhY2ssIHRoZSBzZWFyY2ggd2lsbCBzdGFydCB3aXRoIGEgKzEgaW5kZXggdG9cclxuICAgIC8vIGFsbG93IGl0IHJlY3Vyc2l2ZWx5IHRyaWdnZXIgaXRzZWxmIC0gaXQgaXMgdGhlIHVzZXIncyByZXNwb25zaWJpbGl0eSB0b1xyXG4gICAgLy8gZW5zdXJlIGl0IGRvZXNuJ3QgZW5kIHVwIGluIGFuIGluZmluaXRlIGxvb3AuXHJcbiAgICBpZiAoKCFxdWV1ZS5sZW5ndGggfHxcclxuICAgICAgICAhcXVldWUuaW5jbHVkZXMoam9iLCBpc0ZsdXNoaW5nICYmIGpvYi5hbGxvd1JlY3Vyc2UgPyBmbHVzaEluZGV4ICsgMSA6IGZsdXNoSW5kZXgpKSAmJlxyXG4gICAgICAgIGpvYiAhPT0gY3VycmVudFByZUZsdXNoUGFyZW50Sm9iKSB7XHJcbiAgICAgICAgcXVldWUucHVzaChqb2IpO1xyXG4gICAgICAgIHF1ZXVlRmx1c2goKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBxdWV1ZUZsdXNoKCkge1xyXG4gICAgaWYgKCFpc0ZsdXNoaW5nICYmICFpc0ZsdXNoUGVuZGluZykge1xyXG4gICAgICAgIGlzRmx1c2hQZW5kaW5nID0gdHJ1ZTtcclxuICAgICAgICBjdXJyZW50Rmx1c2hQcm9taXNlID0gcmVzb2x2ZWRQcm9taXNlLnRoZW4oZmx1c2hKb2JzKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBpbnZhbGlkYXRlSm9iKGpvYikge1xyXG4gICAgY29uc3QgaSA9IHF1ZXVlLmluZGV4T2Yoam9iKTtcclxuICAgIGlmIChpID4gLTEpIHtcclxuICAgICAgICBxdWV1ZS5zcGxpY2UoaSwgMSk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gcXVldWVDYihjYiwgYWN0aXZlUXVldWUsIHBlbmRpbmdRdWV1ZSwgaW5kZXgpIHtcclxuICAgIGlmICghaXNBcnJheShjYikpIHtcclxuICAgICAgICBpZiAoIWFjdGl2ZVF1ZXVlIHx8XHJcbiAgICAgICAgICAgICFhY3RpdmVRdWV1ZS5pbmNsdWRlcyhjYiwgY2IuYWxsb3dSZWN1cnNlID8gaW5kZXggKyAxIDogaW5kZXgpKSB7XHJcbiAgICAgICAgICAgIHBlbmRpbmdRdWV1ZS5wdXNoKGNiKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICAvLyBpZiBjYiBpcyBhbiBhcnJheSwgaXQgaXMgYSBjb21wb25lbnQgbGlmZWN5Y2xlIGhvb2sgd2hpY2ggY2FuIG9ubHkgYmVcclxuICAgICAgICAvLyB0cmlnZ2VyZWQgYnkgYSBqb2IsIHdoaWNoIGlzIGFscmVhZHkgZGVkdXBlZCBpbiB0aGUgbWFpbiBxdWV1ZSwgc29cclxuICAgICAgICAvLyB3ZSBjYW4gc2tpcCBkdXBsaWNhdGUgY2hlY2sgaGVyZSB0byBpbXByb3ZlIHBlcmZcclxuICAgICAgICBwZW5kaW5nUXVldWUucHVzaCguLi5jYik7XHJcbiAgICB9XHJcbiAgICBxdWV1ZUZsdXNoKCk7XHJcbn1cclxuZnVuY3Rpb24gcXVldWVQcmVGbHVzaENiKGNiKSB7XHJcbiAgICBxdWV1ZUNiKGNiLCBhY3RpdmVQcmVGbHVzaENicywgcGVuZGluZ1ByZUZsdXNoQ2JzLCBwcmVGbHVzaEluZGV4KTtcclxufVxyXG5mdW5jdGlvbiBxdWV1ZVBvc3RGbHVzaENiKGNiKSB7XHJcbiAgICBxdWV1ZUNiKGNiLCBhY3RpdmVQb3N0Rmx1c2hDYnMsIHBlbmRpbmdQb3N0Rmx1c2hDYnMsIHBvc3RGbHVzaEluZGV4KTtcclxufVxyXG5mdW5jdGlvbiBmbHVzaFByZUZsdXNoQ2JzKHNlZW4sIHBhcmVudEpvYiA9IG51bGwpIHtcclxuICAgIGlmIChwZW5kaW5nUHJlRmx1c2hDYnMubGVuZ3RoKSB7XHJcbiAgICAgICAgY3VycmVudFByZUZsdXNoUGFyZW50Sm9iID0gcGFyZW50Sm9iO1xyXG4gICAgICAgIGFjdGl2ZVByZUZsdXNoQ2JzID0gWy4uLm5ldyBTZXQocGVuZGluZ1ByZUZsdXNoQ2JzKV07XHJcbiAgICAgICAgcGVuZGluZ1ByZUZsdXNoQ2JzLmxlbmd0aCA9IDA7XHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICBzZWVuID0gc2VlbiB8fCBuZXcgTWFwKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvciAocHJlRmx1c2hJbmRleCA9IDA7IHByZUZsdXNoSW5kZXggPCBhY3RpdmVQcmVGbHVzaENicy5sZW5ndGg7IHByZUZsdXNoSW5kZXgrKykge1xyXG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICBjaGVja1JlY3Vyc2l2ZVVwZGF0ZXMoc2VlbiwgYWN0aXZlUHJlRmx1c2hDYnNbcHJlRmx1c2hJbmRleF0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGFjdGl2ZVByZUZsdXNoQ2JzW3ByZUZsdXNoSW5kZXhdKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGFjdGl2ZVByZUZsdXNoQ2JzID0gbnVsbDtcclxuICAgICAgICBwcmVGbHVzaEluZGV4ID0gMDtcclxuICAgICAgICBjdXJyZW50UHJlRmx1c2hQYXJlbnRKb2IgPSBudWxsO1xyXG4gICAgICAgIC8vIHJlY3Vyc2l2ZWx5IGZsdXNoIHVudGlsIGl0IGRyYWluc1xyXG4gICAgICAgIGZsdXNoUHJlRmx1c2hDYnMoc2VlbiwgcGFyZW50Sm9iKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBmbHVzaFBvc3RGbHVzaENicyhzZWVuKSB7XHJcbiAgICBpZiAocGVuZGluZ1Bvc3RGbHVzaENicy5sZW5ndGgpIHtcclxuICAgICAgICBjb25zdCBkZWR1cGVkID0gWy4uLm5ldyBTZXQocGVuZGluZ1Bvc3RGbHVzaENicyldO1xyXG4gICAgICAgIHBlbmRpbmdQb3N0Rmx1c2hDYnMubGVuZ3RoID0gMDtcclxuICAgICAgICAvLyAjMTk0NyBhbHJlYWR5IGhhcyBhY3RpdmUgcXVldWUsIG5lc3RlZCBmbHVzaFBvc3RGbHVzaENicyBjYWxsXHJcbiAgICAgICAgaWYgKGFjdGl2ZVBvc3RGbHVzaENicykge1xyXG4gICAgICAgICAgICBhY3RpdmVQb3N0Rmx1c2hDYnMucHVzaCguLi5kZWR1cGVkKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBhY3RpdmVQb3N0Rmx1c2hDYnMgPSBkZWR1cGVkO1xyXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgc2VlbiA9IHNlZW4gfHwgbmV3IE1hcCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBhY3RpdmVQb3N0Rmx1c2hDYnMuc29ydCgoYSwgYikgPT4gZ2V0SWQoYSkgLSBnZXRJZChiKSk7XHJcbiAgICAgICAgZm9yIChwb3N0Rmx1c2hJbmRleCA9IDA7IHBvc3RGbHVzaEluZGV4IDwgYWN0aXZlUG9zdEZsdXNoQ2JzLmxlbmd0aDsgcG9zdEZsdXNoSW5kZXgrKykge1xyXG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICBjaGVja1JlY3Vyc2l2ZVVwZGF0ZXMoc2VlbiwgYWN0aXZlUG9zdEZsdXNoQ2JzW3Bvc3RGbHVzaEluZGV4XSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYWN0aXZlUG9zdEZsdXNoQ2JzW3Bvc3RGbHVzaEluZGV4XSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBhY3RpdmVQb3N0Rmx1c2hDYnMgPSBudWxsO1xyXG4gICAgICAgIHBvc3RGbHVzaEluZGV4ID0gMDtcclxuICAgIH1cclxufVxyXG5jb25zdCBnZXRJZCA9IChqb2IpID0+IGpvYi5pZCA9PSBudWxsID8gSW5maW5pdHkgOiBqb2IuaWQ7XHJcbmZ1bmN0aW9uIGZsdXNoSm9icyhzZWVuKSB7XHJcbiAgICBpc0ZsdXNoUGVuZGluZyA9IGZhbHNlO1xyXG4gICAgaXNGbHVzaGluZyA9IHRydWU7XHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgc2VlbiA9IHNlZW4gfHwgbmV3IE1hcCgpO1xyXG4gICAgfVxyXG4gICAgZmx1c2hQcmVGbHVzaENicyhzZWVuKTtcclxuICAgIC8vIFNvcnQgcXVldWUgYmVmb3JlIGZsdXNoLlxyXG4gICAgLy8gVGhpcyBlbnN1cmVzIHRoYXQ6XHJcbiAgICAvLyAxLiBDb21wb25lbnRzIGFyZSB1cGRhdGVkIGZyb20gcGFyZW50IHRvIGNoaWxkLiAoYmVjYXVzZSBwYXJlbnQgaXMgYWx3YXlzXHJcbiAgICAvLyAgICBjcmVhdGVkIGJlZm9yZSB0aGUgY2hpbGQgc28gaXRzIHJlbmRlciBlZmZlY3Qgd2lsbCBoYXZlIHNtYWxsZXJcclxuICAgIC8vICAgIHByaW9yaXR5IG51bWJlcilcclxuICAgIC8vIDIuIElmIGEgY29tcG9uZW50IGlzIHVubW91bnRlZCBkdXJpbmcgYSBwYXJlbnQgY29tcG9uZW50J3MgdXBkYXRlLFxyXG4gICAgLy8gICAgaXRzIHVwZGF0ZSBjYW4gYmUgc2tpcHBlZC5cclxuICAgIHF1ZXVlLnNvcnQoKGEsIGIpID0+IGdldElkKGEpIC0gZ2V0SWQoYikpO1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBmb3IgKGZsdXNoSW5kZXggPSAwOyBmbHVzaEluZGV4IDwgcXVldWUubGVuZ3RoOyBmbHVzaEluZGV4KyspIHtcclxuICAgICAgICAgICAgY29uc3Qgam9iID0gcXVldWVbZmx1c2hJbmRleF07XHJcbiAgICAgICAgICAgIGlmIChqb2IpIHtcclxuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgICAgICBjaGVja1JlY3Vyc2l2ZVVwZGF0ZXMoc2Vlbiwgam9iKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhbGxXaXRoRXJyb3JIYW5kbGluZyhqb2IsIG51bGwsIDE0IC8qIFNDSEVEVUxFUiAqLyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBmaW5hbGx5IHtcclxuICAgICAgICBmbHVzaEluZGV4ID0gMDtcclxuICAgICAgICBxdWV1ZS5sZW5ndGggPSAwO1xyXG4gICAgICAgIGZsdXNoUG9zdEZsdXNoQ2JzKHNlZW4pO1xyXG4gICAgICAgIGlzRmx1c2hpbmcgPSBmYWxzZTtcclxuICAgICAgICBjdXJyZW50Rmx1c2hQcm9taXNlID0gbnVsbDtcclxuICAgICAgICAvLyBzb21lIHBvc3RGbHVzaENiIHF1ZXVlZCBqb2JzIVxyXG4gICAgICAgIC8vIGtlZXAgZmx1c2hpbmcgdW50aWwgaXQgZHJhaW5zLlxyXG4gICAgICAgIGlmIChxdWV1ZS5sZW5ndGggfHwgcGVuZGluZ1Bvc3RGbHVzaENicy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgZmx1c2hKb2JzKHNlZW4pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBjaGVja1JlY3Vyc2l2ZVVwZGF0ZXMoc2VlbiwgZm4pIHtcclxuICAgIGlmICghc2Vlbi5oYXMoZm4pKSB7XHJcbiAgICAgICAgc2Vlbi5zZXQoZm4sIDEpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgY29uc3QgY291bnQgPSBzZWVuLmdldChmbik7XHJcbiAgICAgICAgaWYgKGNvdW50ID4gUkVDVVJTSU9OX0xJTUlUKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgTWF4aW11bSByZWN1cnNpdmUgdXBkYXRlcyBleGNlZWRlZC4gYCArXHJcbiAgICAgICAgICAgICAgICBgVGhpcyBtZWFucyB5b3UgaGF2ZSBhIHJlYWN0aXZlIGVmZmVjdCB0aGF0IGlzIG11dGF0aW5nIGl0cyBvd24gYCArXHJcbiAgICAgICAgICAgICAgICBgZGVwZW5kZW5jaWVzIGFuZCB0aHVzIHJlY3Vyc2l2ZWx5IHRyaWdnZXJpbmcgaXRzZWxmLiBQb3NzaWJsZSBzb3VyY2VzIGAgK1xyXG4gICAgICAgICAgICAgICAgYGluY2x1ZGUgY29tcG9uZW50IHRlbXBsYXRlLCByZW5kZXIgZnVuY3Rpb24sIHVwZGF0ZWQgaG9vayBvciBgICtcclxuICAgICAgICAgICAgICAgIGB3YXRjaGVyIHNvdXJjZSBmdW5jdGlvbi5gKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHNlZW4uc2V0KGZuLCBjb3VudCArIDEpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1yZXN0cmljdGVkLWdsb2JhbHMgKi9cclxubGV0IGlzSG1yVXBkYXRpbmcgPSBmYWxzZTtcclxuY29uc3QgaG1yRGlydHlDb21wb25lbnRzID0gbmV3IFNldCgpO1xyXG4vLyBFeHBvc2UgdGhlIEhNUiBydW50aW1lIG9uIHRoZSBnbG9iYWwgb2JqZWN0XHJcbi8vIFRoaXMgbWFrZXMgaXQgZW50aXJlbHkgdHJlZS1zaGFrYWJsZSB3aXRob3V0IHBvbGx1dGluZyB0aGUgZXhwb3J0cyBhbmQgbWFrZXNcclxuLy8gaXQgZWFzaWVyIHRvIGJlIHVzZWQgaW4gdG9vbGluZ3MgbGlrZSB2dWUtbG9hZGVyXHJcbi8vIE5vdGU6IGZvciBhIGNvbXBvbmVudCB0byBiZSBlbGlnaWJsZSBmb3IgSE1SIGl0IGFsc28gbmVlZHMgdGhlIF9faG1ySWQgb3B0aW9uXHJcbi8vIHRvIGJlIHNldCBzbyB0aGF0IGl0cyBpbnN0YW5jZXMgY2FuIGJlIHJlZ2lzdGVyZWQgLyByZW1vdmVkLlxyXG5pZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICBjb25zdCBnbG9iYWxPYmplY3QgPSB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJ1xyXG4gICAgICAgID8gZ2xvYmFsXHJcbiAgICAgICAgOiB0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCdcclxuICAgICAgICAgICAgPyBzZWxmXHJcbiAgICAgICAgICAgIDogdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCdcclxuICAgICAgICAgICAgICAgID8gd2luZG93XHJcbiAgICAgICAgICAgICAgICA6IHt9O1xyXG4gICAgZ2xvYmFsT2JqZWN0Ll9fVlVFX0hNUl9SVU5USU1FX18gPSB7XHJcbiAgICAgICAgY3JlYXRlUmVjb3JkOiB0cnlXcmFwKGNyZWF0ZVJlY29yZCksXHJcbiAgICAgICAgcmVyZW5kZXI6IHRyeVdyYXAocmVyZW5kZXIpLFxyXG4gICAgICAgIHJlbG9hZDogdHJ5V3JhcChyZWxvYWQpXHJcbiAgICB9O1xyXG59XHJcbmNvbnN0IG1hcCA9IG5ldyBNYXAoKTtcclxuZnVuY3Rpb24gcmVnaXN0ZXJITVIoaW5zdGFuY2UpIHtcclxuICAgIGNvbnN0IGlkID0gaW5zdGFuY2UudHlwZS5fX2htcklkO1xyXG4gICAgbGV0IHJlY29yZCA9IG1hcC5nZXQoaWQpO1xyXG4gICAgaWYgKCFyZWNvcmQpIHtcclxuICAgICAgICBjcmVhdGVSZWNvcmQoaWQsIGluc3RhbmNlLnR5cGUpO1xyXG4gICAgICAgIHJlY29yZCA9IG1hcC5nZXQoaWQpO1xyXG4gICAgfVxyXG4gICAgcmVjb3JkLmluc3RhbmNlcy5hZGQoaW5zdGFuY2UpO1xyXG59XHJcbmZ1bmN0aW9uIHVucmVnaXN0ZXJITVIoaW5zdGFuY2UpIHtcclxuICAgIG1hcC5nZXQoaW5zdGFuY2UudHlwZS5fX2htcklkKS5pbnN0YW5jZXMuZGVsZXRlKGluc3RhbmNlKTtcclxufVxyXG5mdW5jdGlvbiBjcmVhdGVSZWNvcmQoaWQsIGNvbXBvbmVudCkge1xyXG4gICAgaWYgKCFjb21wb25lbnQpIHtcclxuICAgICAgICB3YXJuKGBITVIgQVBJIHVzYWdlIGlzIG91dCBvZiBkYXRlLlxcbmAgK1xyXG4gICAgICAgICAgICBgUGxlYXNlIHVwZ3JhZGUgdnVlLWxvYWRlci92aXRlL3JvbGx1cC1wbHVnaW4tdnVlIG9yIG90aGVyIHJlbGV2YW50IGAgK1xyXG4gICAgICAgICAgICBgZGVwZGVuZGVuY3kgdGhhdCBoYW5kbGVzIFZ1ZSBTRkMgY29tcGlsYXRpb24uYCk7XHJcbiAgICAgICAgY29tcG9uZW50ID0ge307XHJcbiAgICB9XHJcbiAgICBpZiAobWFwLmhhcyhpZCkpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBtYXAuc2V0KGlkLCB7XHJcbiAgICAgICAgY29tcG9uZW50OiBpc0NsYXNzQ29tcG9uZW50KGNvbXBvbmVudCkgPyBjb21wb25lbnQuX192Y2NPcHRzIDogY29tcG9uZW50LFxyXG4gICAgICAgIGluc3RhbmNlczogbmV3IFNldCgpXHJcbiAgICB9KTtcclxuICAgIHJldHVybiB0cnVlO1xyXG59XHJcbmZ1bmN0aW9uIHJlcmVuZGVyKGlkLCBuZXdSZW5kZXIpIHtcclxuICAgIGNvbnN0IHJlY29yZCA9IG1hcC5nZXQoaWQpO1xyXG4gICAgaWYgKCFyZWNvcmQpXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgaWYgKG5ld1JlbmRlcilcclxuICAgICAgICByZWNvcmQuY29tcG9uZW50LnJlbmRlciA9IG5ld1JlbmRlcjtcclxuICAgIC8vIEFycmF5LmZyb20gY3JlYXRlcyBhIHNuYXBzaG90IHdoaWNoIGF2b2lkcyB0aGUgc2V0IGJlaW5nIG11dGF0ZWQgZHVyaW5nXHJcbiAgICAvLyB1cGRhdGVzXHJcbiAgICBBcnJheS5mcm9tKHJlY29yZC5pbnN0YW5jZXMpLmZvckVhY2goaW5zdGFuY2UgPT4ge1xyXG4gICAgICAgIGlmIChuZXdSZW5kZXIpIHtcclxuICAgICAgICAgICAgaW5zdGFuY2UucmVuZGVyID0gbmV3UmVuZGVyO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpbnN0YW5jZS5yZW5kZXJDYWNoZSA9IFtdO1xyXG4gICAgICAgIC8vIHRoaXMgZmxhZyBmb3JjZXMgY2hpbGQgY29tcG9uZW50cyB3aXRoIHNsb3QgY29udGVudCB0byB1cGRhdGVcclxuICAgICAgICBpc0htclVwZGF0aW5nID0gdHJ1ZTtcclxuICAgICAgICBpbnN0YW5jZS51cGRhdGUoKTtcclxuICAgICAgICBpc0htclVwZGF0aW5nID0gZmFsc2U7XHJcbiAgICB9KTtcclxufVxyXG5mdW5jdGlvbiByZWxvYWQoaWQsIG5ld0NvbXApIHtcclxuICAgIGNvbnN0IHJlY29yZCA9IG1hcC5nZXQoaWQpO1xyXG4gICAgaWYgKCFyZWNvcmQpXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgLy8gQXJyYXkuZnJvbSBjcmVhdGVzIGEgc25hcHNob3Qgd2hpY2ggYXZvaWRzIHRoZSBzZXQgYmVpbmcgbXV0YXRlZCBkdXJpbmdcclxuICAgIC8vIHVwZGF0ZXNcclxuICAgIGNvbnN0IHsgY29tcG9uZW50LCBpbnN0YW5jZXMgfSA9IHJlY29yZDtcclxuICAgIGlmICghaG1yRGlydHlDb21wb25lbnRzLmhhcyhjb21wb25lbnQpKSB7XHJcbiAgICAgICAgLy8gMS4gVXBkYXRlIGV4aXN0aW5nIGNvbXAgZGVmaW5pdGlvbiB0byBtYXRjaCBuZXcgb25lXHJcbiAgICAgICAgbmV3Q29tcCA9IGlzQ2xhc3NDb21wb25lbnQobmV3Q29tcCkgPyBuZXdDb21wLl9fdmNjT3B0cyA6IG5ld0NvbXA7XHJcbiAgICAgICAgZXh0ZW5kKGNvbXBvbmVudCwgbmV3Q29tcCk7XHJcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gY29tcG9uZW50KSB7XHJcbiAgICAgICAgICAgIGlmICghKGtleSBpbiBuZXdDb21wKSkge1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlIGNvbXBvbmVudFtrZXldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIDIuIE1hcmsgY29tcG9uZW50IGRpcnR5LiBUaGlzIGZvcmNlcyB0aGUgcmVuZGVyZXIgdG8gcmVwbGFjZSB0aGUgY29tcG9uZW50XHJcbiAgICAgICAgLy8gb24gcGF0Y2guXHJcbiAgICAgICAgaG1yRGlydHlDb21wb25lbnRzLmFkZChjb21wb25lbnQpO1xyXG4gICAgICAgIC8vIDMuIE1ha2Ugc3VyZSB0byB1bm1hcmsgdGhlIGNvbXBvbmVudCBhZnRlciB0aGUgcmVsb2FkLlxyXG4gICAgICAgIHF1ZXVlUG9zdEZsdXNoQ2IoKCkgPT4ge1xyXG4gICAgICAgICAgICBobXJEaXJ0eUNvbXBvbmVudHMuZGVsZXRlKGNvbXBvbmVudCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBBcnJheS5mcm9tKGluc3RhbmNlcykuZm9yRWFjaChpbnN0YW5jZSA9PiB7XHJcbiAgICAgICAgaWYgKGluc3RhbmNlLnBhcmVudCkge1xyXG4gICAgICAgICAgICAvLyA0LiBGb3JjZSB0aGUgcGFyZW50IGluc3RhbmNlIHRvIHJlLXJlbmRlci4gVGhpcyB3aWxsIGNhdXNlIGFsbCB1cGRhdGVkXHJcbiAgICAgICAgICAgIC8vIGNvbXBvbmVudHMgdG8gYmUgdW5tb3VudGVkIGFuZCByZS1tb3VudGVkLiBRdWV1ZSB0aGUgdXBkYXRlIHNvIHRoYXQgd2VcclxuICAgICAgICAgICAgLy8gZG9uJ3QgZW5kIHVwIGZvcmNpbmcgdGhlIHNhbWUgcGFyZW50IHRvIHJlLXJlbmRlciBtdWx0aXBsZSB0aW1lcy5cclxuICAgICAgICAgICAgcXVldWVKb2IoaW5zdGFuY2UucGFyZW50LnVwZGF0ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGluc3RhbmNlLmFwcENvbnRleHQucmVsb2FkKSB7XHJcbiAgICAgICAgICAgIC8vIHJvb3QgaW5zdGFuY2UgbW91bnRlZCB2aWEgY3JlYXRlQXBwKCkgaGFzIGEgcmVsb2FkIG1ldGhvZFxyXG4gICAgICAgICAgICBpbnN0YW5jZS5hcHBDb250ZXh0LnJlbG9hZCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAvLyByb290IGluc3RhbmNlIGluc2lkZSB0cmVlIGNyZWF0ZWQgdmlhIHJhdyByZW5kZXIoKS4gRm9yY2UgcmVsb2FkLlxyXG4gICAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ1tITVJdIFJvb3Qgb3IgbWFudWFsbHkgbW91bnRlZCBpbnN0YW5jZSBtb2RpZmllZC4gRnVsbCByZWxvYWQgcmVxdWlyZWQuJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbn1cclxuZnVuY3Rpb24gdHJ5V3JhcChmbikge1xyXG4gICAgcmV0dXJuIChpZCwgYXJnKSA9PiB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgcmV0dXJuIGZuKGlkLCBhcmcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYFtITVJdIFNvbWV0aGluZyB3ZW50IHdyb25nIGR1cmluZyBWdWUgY29tcG9uZW50IGhvdC1yZWxvYWQuIGAgK1xyXG4gICAgICAgICAgICAgICAgYEZ1bGwgcmVsb2FkIHJlcXVpcmVkLmApO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn1cblxubGV0IGRldnRvb2xzO1xyXG5mdW5jdGlvbiBzZXREZXZ0b29sc0hvb2soaG9vaykge1xyXG4gICAgZGV2dG9vbHMgPSBob29rO1xyXG59XHJcbmZ1bmN0aW9uIGRldnRvb2xzSW5pdEFwcChhcHAsIHZlcnNpb24pIHtcclxuICAgIC8vIFRPRE8gcXVldWUgaWYgZGV2dG9vbHMgaXMgdW5kZWZpbmVkXHJcbiAgICBpZiAoIWRldnRvb2xzKVxyXG4gICAgICAgIHJldHVybjtcclxuICAgIGRldnRvb2xzLmVtaXQoXCJhcHA6aW5pdFwiIC8qIEFQUF9JTklUICovLCBhcHAsIHZlcnNpb24sIHtcclxuICAgICAgICBGcmFnbWVudCxcclxuICAgICAgICBUZXh0LFxyXG4gICAgICAgIENvbW1lbnQsXHJcbiAgICAgICAgU3RhdGljXHJcbiAgICB9KTtcclxufVxyXG5mdW5jdGlvbiBkZXZ0b29sc1VubW91bnRBcHAoYXBwKSB7XHJcbiAgICBpZiAoIWRldnRvb2xzKVxyXG4gICAgICAgIHJldHVybjtcclxuICAgIGRldnRvb2xzLmVtaXQoXCJhcHA6dW5tb3VudFwiIC8qIEFQUF9VTk1PVU5UICovLCBhcHApO1xyXG59XHJcbmNvbnN0IGRldnRvb2xzQ29tcG9uZW50QWRkZWQgPSAvKiNfX1BVUkVfXyovIGNyZWF0ZURldnRvb2xzQ29tcG9uZW50SG9vayhcImNvbXBvbmVudDphZGRlZFwiIC8qIENPTVBPTkVOVF9BRERFRCAqLyk7XHJcbmNvbnN0IGRldnRvb2xzQ29tcG9uZW50VXBkYXRlZCA9IC8qI19fUFVSRV9fKi8gY3JlYXRlRGV2dG9vbHNDb21wb25lbnRIb29rKFwiY29tcG9uZW50OnVwZGF0ZWRcIiAvKiBDT01QT05FTlRfVVBEQVRFRCAqLyk7XHJcbmNvbnN0IGRldnRvb2xzQ29tcG9uZW50UmVtb3ZlZCA9IC8qI19fUFVSRV9fKi8gY3JlYXRlRGV2dG9vbHNDb21wb25lbnRIb29rKFwiY29tcG9uZW50OnJlbW92ZWRcIiAvKiBDT01QT05FTlRfUkVNT1ZFRCAqLyk7XHJcbmZ1bmN0aW9uIGNyZWF0ZURldnRvb2xzQ29tcG9uZW50SG9vayhob29rKSB7XHJcbiAgICByZXR1cm4gKGNvbXBvbmVudCkgPT4ge1xyXG4gICAgICAgIGlmICghZGV2dG9vbHMpXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICBkZXZ0b29scy5lbWl0KGhvb2ssIGNvbXBvbmVudC5hcHBDb250ZXh0LmFwcCwgY29tcG9uZW50LnVpZCwgY29tcG9uZW50LnBhcmVudCA/IGNvbXBvbmVudC5wYXJlbnQudWlkIDogdW5kZWZpbmVkKTtcclxuICAgIH07XHJcbn1cclxuZnVuY3Rpb24gZGV2dG9vbHNDb21wb25lbnRFbWl0KGNvbXBvbmVudCwgZXZlbnQsIHBhcmFtcykge1xyXG4gICAgaWYgKCFkZXZ0b29scylcclxuICAgICAgICByZXR1cm47XHJcbiAgICBkZXZ0b29scy5lbWl0KFwiY29tcG9uZW50OmVtaXRcIiAvKiBDT01QT05FTlRfRU1JVCAqLywgY29tcG9uZW50LmFwcENvbnRleHQuYXBwLCBjb21wb25lbnQsIGV2ZW50LCBwYXJhbXMpO1xyXG59XG5cbmZ1bmN0aW9uIGVtaXQoaW5zdGFuY2UsIGV2ZW50LCAuLi5yYXdBcmdzKSB7XHJcbiAgICBjb25zdCBwcm9wcyA9IGluc3RhbmNlLnZub2RlLnByb3BzIHx8IEVNUFRZX09CSjtcclxuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICBjb25zdCB7IGVtaXRzT3B0aW9ucywgcHJvcHNPcHRpb25zOiBbcHJvcHNPcHRpb25zXSB9ID0gaW5zdGFuY2U7XHJcbiAgICAgICAgaWYgKGVtaXRzT3B0aW9ucykge1xyXG4gICAgICAgICAgICBpZiAoIShldmVudCBpbiBlbWl0c09wdGlvbnMpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXByb3BzT3B0aW9ucyB8fCAhKHRvSGFuZGxlcktleShldmVudCkgaW4gcHJvcHNPcHRpb25zKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHdhcm4oYENvbXBvbmVudCBlbWl0dGVkIGV2ZW50IFwiJHtldmVudH1cIiBidXQgaXQgaXMgbmVpdGhlciBkZWNsYXJlZCBpbiBgICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYHRoZSBlbWl0cyBvcHRpb24gbm9yIGFzIGFuIFwiJHt0b0hhbmRsZXJLZXkoZXZlbnQpfVwiIHByb3AuYCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB2YWxpZGF0b3IgPSBlbWl0c09wdGlvbnNbZXZlbnRdO1xyXG4gICAgICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24odmFsaWRhdG9yKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGlzVmFsaWQgPSB2YWxpZGF0b3IoLi4ucmF3QXJncyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpc1ZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdhcm4oYEludmFsaWQgZXZlbnQgYXJndW1lbnRzOiBldmVudCB2YWxpZGF0aW9uIGZhaWxlZCBmb3IgZXZlbnQgXCIke2V2ZW50fVwiLmApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGxldCBhcmdzID0gcmF3QXJncztcclxuICAgIGNvbnN0IGlzTW9kZWxMaXN0ZW5lciA9IGV2ZW50LnN0YXJ0c1dpdGgoJ3VwZGF0ZTonKTtcclxuICAgIC8vIGZvciB2LW1vZGVsIHVwZGF0ZTp4eHggZXZlbnRzLCBhcHBseSBtb2RpZmllcnMgb24gYXJnc1xyXG4gICAgY29uc3QgbW9kZWxBcmcgPSBpc01vZGVsTGlzdGVuZXIgJiYgZXZlbnQuc2xpY2UoNyk7XHJcbiAgICBpZiAobW9kZWxBcmcgJiYgbW9kZWxBcmcgaW4gcHJvcHMpIHtcclxuICAgICAgICBjb25zdCBtb2RpZmllcnNLZXkgPSBgJHttb2RlbEFyZyA9PT0gJ21vZGVsVmFsdWUnID8gJ21vZGVsJyA6IG1vZGVsQXJnfU1vZGlmaWVyc2A7XHJcbiAgICAgICAgY29uc3QgeyBudW1iZXIsIHRyaW0gfSA9IHByb3BzW21vZGlmaWVyc0tleV0gfHwgRU1QVFlfT0JKO1xyXG4gICAgICAgIGlmICh0cmltKSB7XHJcbiAgICAgICAgICAgIGFyZ3MgPSByYXdBcmdzLm1hcChhID0+IGEudHJpbSgpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAobnVtYmVyKSB7XHJcbiAgICAgICAgICAgIGFyZ3MgPSByYXdBcmdzLm1hcCh0b051bWJlcik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB8fCBfX1ZVRV9QUk9EX0RFVlRPT0xTX18pIHtcclxuICAgICAgICBkZXZ0b29sc0NvbXBvbmVudEVtaXQoaW5zdGFuY2UsIGV2ZW50LCBhcmdzKTtcclxuICAgIH1cclxuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICBjb25zdCBsb3dlckNhc2VFdmVudCA9IGV2ZW50LnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgaWYgKGxvd2VyQ2FzZUV2ZW50ICE9PSBldmVudCAmJiBwcm9wc1t0b0hhbmRsZXJLZXkobG93ZXJDYXNlRXZlbnQpXSkge1xyXG4gICAgICAgICAgICB3YXJuKGBFdmVudCBcIiR7bG93ZXJDYXNlRXZlbnR9XCIgaXMgZW1pdHRlZCBpbiBjb21wb25lbnQgYCArXHJcbiAgICAgICAgICAgICAgICBgJHtmb3JtYXRDb21wb25lbnROYW1lKGluc3RhbmNlLCBpbnN0YW5jZS50eXBlKX0gYnV0IHRoZSBoYW5kbGVyIGlzIHJlZ2lzdGVyZWQgZm9yIFwiJHtldmVudH1cIi4gYCArXHJcbiAgICAgICAgICAgICAgICBgTm90ZSB0aGF0IEhUTUwgYXR0cmlidXRlcyBhcmUgY2FzZS1pbnNlbnNpdGl2ZSBhbmQgeW91IGNhbm5vdCB1c2UgYCArXHJcbiAgICAgICAgICAgICAgICBgdi1vbiB0byBsaXN0ZW4gdG8gY2FtZWxDYXNlIGV2ZW50cyB3aGVuIHVzaW5nIGluLURPTSB0ZW1wbGF0ZXMuIGAgK1xyXG4gICAgICAgICAgICAgICAgYFlvdSBzaG91bGQgcHJvYmFibHkgdXNlIFwiJHtoeXBoZW5hdGUoZXZlbnQpfVwiIGluc3RlYWQgb2YgXCIke2V2ZW50fVwiLmApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIGNvbnZlcnQgaGFuZGxlciBuYW1lIHRvIGNhbWVsQ2FzZS4gU2VlIGlzc3VlICMyMjQ5XHJcbiAgICBsZXQgaGFuZGxlck5hbWUgPSB0b0hhbmRsZXJLZXkoY2FtZWxpemUoZXZlbnQpKTtcclxuICAgIGxldCBoYW5kbGVyID0gcHJvcHNbaGFuZGxlck5hbWVdO1xyXG4gICAgLy8gZm9yIHYtbW9kZWwgdXBkYXRlOnh4eCBldmVudHMsIGFsc28gdHJpZ2dlciBrZWJhYi1jYXNlIGVxdWl2YWxlbnRcclxuICAgIC8vIGZvciBwcm9wcyBwYXNzZWQgdmlhIGtlYmFiLWNhc2VcclxuICAgIGlmICghaGFuZGxlciAmJiBpc01vZGVsTGlzdGVuZXIpIHtcclxuICAgICAgICBoYW5kbGVyTmFtZSA9IHRvSGFuZGxlcktleShoeXBoZW5hdGUoZXZlbnQpKTtcclxuICAgICAgICBoYW5kbGVyID0gcHJvcHNbaGFuZGxlck5hbWVdO1xyXG4gICAgfVxyXG4gICAgaWYgKGhhbmRsZXIpIHtcclxuICAgICAgICBjYWxsV2l0aEFzeW5jRXJyb3JIYW5kbGluZyhoYW5kbGVyLCBpbnN0YW5jZSwgNiAvKiBDT01QT05FTlRfRVZFTlRfSEFORExFUiAqLywgYXJncyk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBvbmNlSGFuZGxlciA9IHByb3BzW2hhbmRsZXJOYW1lICsgYE9uY2VgXTtcclxuICAgIGlmIChvbmNlSGFuZGxlcikge1xyXG4gICAgICAgIGlmICghaW5zdGFuY2UuZW1pdHRlZCkge1xyXG4gICAgICAgICAgICAoaW5zdGFuY2UuZW1pdHRlZCA9IHt9KVtoYW5kbGVyTmFtZV0gPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChpbnN0YW5jZS5lbWl0dGVkW2hhbmRsZXJOYW1lXSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhbGxXaXRoQXN5bmNFcnJvckhhbmRsaW5nKG9uY2VIYW5kbGVyLCBpbnN0YW5jZSwgNiAvKiBDT01QT05FTlRfRVZFTlRfSEFORExFUiAqLywgYXJncyk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gbm9ybWFsaXplRW1pdHNPcHRpb25zKGNvbXAsIGFwcENvbnRleHQsIGFzTWl4aW4gPSBmYWxzZSkge1xyXG4gICAgaWYgKCFhcHBDb250ZXh0LmRlb3B0ICYmIGNvbXAuX19lbWl0cyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgcmV0dXJuIGNvbXAuX19lbWl0cztcclxuICAgIH1cclxuICAgIGNvbnN0IHJhdyA9IGNvbXAuZW1pdHM7XHJcbiAgICBsZXQgbm9ybWFsaXplZCA9IHt9O1xyXG4gICAgLy8gYXBwbHkgbWl4aW4vZXh0ZW5kcyBwcm9wc1xyXG4gICAgbGV0IGhhc0V4dGVuZHMgPSBmYWxzZTtcclxuICAgIGlmIChfX1ZVRV9PUFRJT05TX0FQSV9fICYmICFpc0Z1bmN0aW9uKGNvbXApKSB7XHJcbiAgICAgICAgY29uc3QgZXh0ZW5kRW1pdHMgPSAocmF3KSA9PiB7XHJcbiAgICAgICAgICAgIGhhc0V4dGVuZHMgPSB0cnVlO1xyXG4gICAgICAgICAgICBleHRlbmQobm9ybWFsaXplZCwgbm9ybWFsaXplRW1pdHNPcHRpb25zKHJhdywgYXBwQ29udGV4dCwgdHJ1ZSkpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgaWYgKCFhc01peGluICYmIGFwcENvbnRleHQubWl4aW5zLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBhcHBDb250ZXh0Lm1peGlucy5mb3JFYWNoKGV4dGVuZEVtaXRzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGNvbXAuZXh0ZW5kcykge1xyXG4gICAgICAgICAgICBleHRlbmRFbWl0cyhjb21wLmV4dGVuZHMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoY29tcC5taXhpbnMpIHtcclxuICAgICAgICAgICAgY29tcC5taXhpbnMuZm9yRWFjaChleHRlbmRFbWl0cyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKCFyYXcgJiYgIWhhc0V4dGVuZHMpIHtcclxuICAgICAgICByZXR1cm4gKGNvbXAuX19lbWl0cyA9IG51bGwpO1xyXG4gICAgfVxyXG4gICAgaWYgKGlzQXJyYXkocmF3KSkge1xyXG4gICAgICAgIHJhdy5mb3JFYWNoKGtleSA9PiAobm9ybWFsaXplZFtrZXldID0gbnVsbCkpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgZXh0ZW5kKG5vcm1hbGl6ZWQsIHJhdyk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gKGNvbXAuX19lbWl0cyA9IG5vcm1hbGl6ZWQpO1xyXG59XHJcbi8vIENoZWNrIGlmIGFuIGluY29taW5nIHByb3Aga2V5IGlzIGEgZGVjbGFyZWQgZW1pdCBldmVudCBsaXN0ZW5lci5cclxuLy8gZS5nLiBXaXRoIGBlbWl0czogeyBjbGljazogbnVsbCB9YCwgcHJvcHMgbmFtZWQgYG9uQ2xpY2tgIGFuZCBgb25jbGlja2AgYXJlXHJcbi8vIGJvdGggY29uc2lkZXJlZCBtYXRjaGVkIGxpc3RlbmVycy5cclxuZnVuY3Rpb24gaXNFbWl0TGlzdGVuZXIob3B0aW9ucywga2V5KSB7XHJcbiAgICBpZiAoIW9wdGlvbnMgfHwgIWlzT24oa2V5KSkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIGtleSA9IGtleS5zbGljZSgyKS5yZXBsYWNlKC9PbmNlJC8sICcnKTtcclxuICAgIHJldHVybiAoaGFzT3duKG9wdGlvbnMsIGtleVswXS50b0xvd2VyQ2FzZSgpICsga2V5LnNsaWNlKDEpKSB8fFxyXG4gICAgICAgIGhhc093bihvcHRpb25zLCBoeXBoZW5hdGUoa2V5KSkgfHxcclxuICAgICAgICBoYXNPd24ob3B0aW9ucywga2V5KSk7XHJcbn1cblxuLyoqXHJcbiAqIG1hcmsgdGhlIGN1cnJlbnQgcmVuZGVyaW5nIGluc3RhbmNlIGZvciBhc3NldCByZXNvbHV0aW9uIChlLmcuXHJcbiAqIHJlc29sdmVDb21wb25lbnQsIHJlc29sdmVEaXJlY3RpdmUpIGR1cmluZyByZW5kZXJcclxuICovXHJcbmxldCBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UgPSBudWxsO1xyXG5mdW5jdGlvbiBzZXRDdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UoaW5zdGFuY2UpIHtcclxuICAgIGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSA9IGluc3RhbmNlO1xyXG59XHJcbi8qKlxyXG4gKiBkZXYgb25seSBmbGFnIHRvIHRyYWNrIHdoZXRoZXIgJGF0dHJzIHdhcyB1c2VkIGR1cmluZyByZW5kZXIuXHJcbiAqIElmICRhdHRycyB3YXMgdXNlZCBkdXJpbmcgcmVuZGVyIHRoZW4gdGhlIHdhcm5pbmcgZm9yIGZhaWxlZCBhdHRyc1xyXG4gKiBmYWxsdGhyb3VnaCBjYW4gYmUgc3VwcHJlc3NlZC5cclxuICovXHJcbmxldCBhY2Nlc3NlZEF0dHJzID0gZmFsc2U7XHJcbmZ1bmN0aW9uIG1hcmtBdHRyc0FjY2Vzc2VkKCkge1xyXG4gICAgYWNjZXNzZWRBdHRycyA9IHRydWU7XHJcbn1cclxuZnVuY3Rpb24gcmVuZGVyQ29tcG9uZW50Um9vdChpbnN0YW5jZSkge1xyXG4gICAgY29uc3QgeyB0eXBlOiBDb21wb25lbnQsIHZub2RlLCBwcm94eSwgd2l0aFByb3h5LCBwcm9wcywgcHJvcHNPcHRpb25zOiBbcHJvcHNPcHRpb25zXSwgc2xvdHMsIGF0dHJzLCBlbWl0LCByZW5kZXIsIHJlbmRlckNhY2hlLCBkYXRhLCBzZXR1cFN0YXRlLCBjdHggfSA9IGluc3RhbmNlO1xyXG4gICAgbGV0IHJlc3VsdDtcclxuICAgIGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSA9IGluc3RhbmNlO1xyXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgIGFjY2Vzc2VkQXR0cnMgPSBmYWxzZTtcclxuICAgIH1cclxuICAgIHRyeSB7XHJcbiAgICAgICAgbGV0IGZhbGx0aHJvdWdoQXR0cnM7XHJcbiAgICAgICAgaWYgKHZub2RlLnNoYXBlRmxhZyAmIDQgLyogU1RBVEVGVUxfQ09NUE9ORU5UICovKSB7XHJcbiAgICAgICAgICAgIC8vIHdpdGhQcm94eSBpcyBhIHByb3h5IHdpdGggYSBkaWZmZXJlbnQgYGhhc2AgdHJhcCBvbmx5IGZvclxyXG4gICAgICAgICAgICAvLyBydW50aW1lLWNvbXBpbGVkIHJlbmRlciBmdW5jdGlvbnMgdXNpbmcgYHdpdGhgIGJsb2NrLlxyXG4gICAgICAgICAgICBjb25zdCBwcm94eVRvVXNlID0gd2l0aFByb3h5IHx8IHByb3h5O1xyXG4gICAgICAgICAgICByZXN1bHQgPSBub3JtYWxpemVWTm9kZShyZW5kZXIuY2FsbChwcm94eVRvVXNlLCBwcm94eVRvVXNlLCByZW5kZXJDYWNoZSwgcHJvcHMsIHNldHVwU3RhdGUsIGRhdGEsIGN0eCkpO1xyXG4gICAgICAgICAgICBmYWxsdGhyb3VnaEF0dHJzID0gYXR0cnM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBmdW5jdGlvbmFsXHJcbiAgICAgICAgICAgIGNvbnN0IHJlbmRlciA9IENvbXBvbmVudDtcclxuICAgICAgICAgICAgLy8gaW4gZGV2LCBtYXJrIGF0dHJzIGFjY2Vzc2VkIGlmIG9wdGlvbmFsIHByb3BzIChhdHRycyA9PT0gcHJvcHMpXHJcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgYXR0cnMgPT09IHByb3BzKSB7XHJcbiAgICAgICAgICAgICAgICBtYXJrQXR0cnNBY2Nlc3NlZCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJlc3VsdCA9IG5vcm1hbGl6ZVZOb2RlKHJlbmRlci5sZW5ndGggPiAxXHJcbiAgICAgICAgICAgICAgICA/IHJlbmRlcihwcm9wcywgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpXHJcbiAgICAgICAgICAgICAgICAgICAgPyB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGdldCBhdHRycygpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmtBdHRyc0FjY2Vzc2VkKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXR0cnM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNsb3RzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbWl0XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIDogeyBhdHRycywgc2xvdHMsIGVtaXQgfSlcclxuICAgICAgICAgICAgICAgIDogcmVuZGVyKHByb3BzLCBudWxsIC8qIHdlIGtub3cgaXQgZG9lc24ndCBuZWVkIGl0ICovKSk7XHJcbiAgICAgICAgICAgIGZhbGx0aHJvdWdoQXR0cnMgPSBDb21wb25lbnQucHJvcHNcclxuICAgICAgICAgICAgICAgID8gYXR0cnNcclxuICAgICAgICAgICAgICAgIDogZ2V0RnVuY3Rpb25hbEZhbGx0aHJvdWdoKGF0dHJzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gYXR0ciBtZXJnaW5nXHJcbiAgICAgICAgLy8gaW4gZGV2IG1vZGUsIGNvbW1lbnRzIGFyZSBwcmVzZXJ2ZWQsIGFuZCBpdCdzIHBvc3NpYmxlIGZvciBhIHRlbXBsYXRlXHJcbiAgICAgICAgLy8gdG8gaGF2ZSBjb21tZW50cyBhbG9uZyBzaWRlIHRoZSByb290IGVsZW1lbnQgd2hpY2ggbWFrZXMgaXQgYSBmcmFnbWVudFxyXG4gICAgICAgIGxldCByb290ID0gcmVzdWx0O1xyXG4gICAgICAgIGxldCBzZXRSb290ID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgcmVzdWx0LnBhdGNoRmxhZyAmIDIwNDggLyogREVWX1JPT1RfRlJBR01FTlQgKi8pIHtcclxuICAgICAgICAgICAgO1xyXG4gICAgICAgICAgICBbcm9vdCwgc2V0Um9vdF0gPSBnZXRDaGlsZFJvb3QocmVzdWx0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKENvbXBvbmVudC5pbmhlcml0QXR0cnMgIT09IGZhbHNlICYmIGZhbGx0aHJvdWdoQXR0cnMpIHtcclxuICAgICAgICAgICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKGZhbGx0aHJvdWdoQXR0cnMpO1xyXG4gICAgICAgICAgICBjb25zdCB7IHNoYXBlRmxhZyB9ID0gcm9vdDtcclxuICAgICAgICAgICAgaWYgKGtleXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc2hhcGVGbGFnICYgMSAvKiBFTEVNRU5UICovIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgc2hhcGVGbGFnICYgNiAvKiBDT01QT05FTlQgKi8pIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocHJvcHNPcHRpb25zICYmIGtleXMuc29tZShpc01vZGVsTGlzdGVuZXIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIGEgdi1tb2RlbCBsaXN0ZW5lciAob25VcGRhdGU6eHh4KSBoYXMgYSBjb3JyZXNwb25kaW5nIGRlY2xhcmVkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHByb3AsIGl0IGluZGljYXRlcyB0aGlzIGNvbXBvbmVudCBleHBlY3RzIHRvIGhhbmRsZSB2LW1vZGVsIGFuZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpdCBzaG91bGQgbm90IGZhbGx0aHJvdWdoLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyByZWxhdGVkOiAjMTU0MywgIzE2NDMsICMxOTg5XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZhbGx0aHJvdWdoQXR0cnMgPSBmaWx0ZXJNb2RlbExpc3RlbmVycyhmYWxsdGhyb3VnaEF0dHJzLCBwcm9wc09wdGlvbnMpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByb290ID0gY2xvbmVWTm9kZShyb290LCBmYWxsdGhyb3VnaEF0dHJzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhYWNjZXNzZWRBdHRycyAmJiByb290LnR5cGUgIT09IENvbW1lbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBhbGxBdHRycyA9IE9iamVjdC5rZXlzKGF0dHJzKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBldmVudEF0dHJzID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZXh0cmFBdHRycyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsID0gYWxsQXR0cnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGtleSA9IGFsbEF0dHJzW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNPbihrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpZ25vcmUgdi1tb2RlbCBoYW5kbGVycyB3aGVuIHRoZXkgZmFpbCB0byBmYWxsdGhyb3VnaFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpc01vZGVsTGlzdGVuZXIoa2V5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJlbW92ZSBgb25gLCBsb3dlcmNhc2UgZmlyc3QgbGV0dGVyIHRvIHJlZmxlY3QgZXZlbnQgY2FzaW5nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYWNjdXJhdGVseVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50QXR0cnMucHVzaChrZXlbMl0udG9Mb3dlckNhc2UoKSArIGtleS5zbGljZSgzKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHRyYUF0dHJzLnB1c2goa2V5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoZXh0cmFBdHRycy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2FybihgRXh0cmFuZW91cyBub24tcHJvcHMgYXR0cmlidXRlcyAoYCArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBgJHtleHRyYUF0dHJzLmpvaW4oJywgJyl9KSBgICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGB3ZXJlIHBhc3NlZCB0byBjb21wb25lbnQgYnV0IGNvdWxkIG5vdCBiZSBhdXRvbWF0aWNhbGx5IGluaGVyaXRlZCBgICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBiZWNhdXNlIGNvbXBvbmVudCByZW5kZXJzIGZyYWdtZW50IG9yIHRleHQgcm9vdCBub2Rlcy5gKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50QXR0cnMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdhcm4oYEV4dHJhbmVvdXMgbm9uLWVtaXRzIGV2ZW50IGxpc3RlbmVycyAoYCArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBgJHtldmVudEF0dHJzLmpvaW4oJywgJyl9KSBgICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGB3ZXJlIHBhc3NlZCB0byBjb21wb25lbnQgYnV0IGNvdWxkIG5vdCBiZSBhdXRvbWF0aWNhbGx5IGluaGVyaXRlZCBgICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBiZWNhdXNlIGNvbXBvbmVudCByZW5kZXJzIGZyYWdtZW50IG9yIHRleHQgcm9vdCBub2Rlcy4gYCArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBgSWYgdGhlIGxpc3RlbmVyIGlzIGludGVuZGVkIHRvIGJlIGEgY29tcG9uZW50IGN1c3RvbSBldmVudCBsaXN0ZW5lciBvbmx5LCBgICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBkZWNsYXJlIGl0IHVzaW5nIHRoZSBcImVtaXRzXCIgb3B0aW9uLmApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBpbmhlcml0IGRpcmVjdGl2ZXNcclxuICAgICAgICBpZiAodm5vZGUuZGlycykge1xyXG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFpc0VsZW1lbnRSb290KHJvb3QpKSB7XHJcbiAgICAgICAgICAgICAgICB3YXJuKGBSdW50aW1lIGRpcmVjdGl2ZSB1c2VkIG9uIGNvbXBvbmVudCB3aXRoIG5vbi1lbGVtZW50IHJvb3Qgbm9kZS4gYCArXHJcbiAgICAgICAgICAgICAgICAgICAgYFRoZSBkaXJlY3RpdmVzIHdpbGwgbm90IGZ1bmN0aW9uIGFzIGludGVuZGVkLmApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJvb3QuZGlycyA9IHJvb3QuZGlycyA/IHJvb3QuZGlycy5jb25jYXQodm5vZGUuZGlycykgOiB2bm9kZS5kaXJzO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBpbmhlcml0IHRyYW5zaXRpb24gZGF0YVxyXG4gICAgICAgIGlmICh2bm9kZS50cmFuc2l0aW9uKSB7XHJcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIWlzRWxlbWVudFJvb3Qocm9vdCkpIHtcclxuICAgICAgICAgICAgICAgIHdhcm4oYENvbXBvbmVudCBpbnNpZGUgPFRyYW5zaXRpb24+IHJlbmRlcnMgbm9uLWVsZW1lbnQgcm9vdCBub2RlIGAgK1xyXG4gICAgICAgICAgICAgICAgICAgIGB0aGF0IGNhbm5vdCBiZSBhbmltYXRlZC5gKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByb290LnRyYW5zaXRpb24gPSB2bm9kZS50cmFuc2l0aW9uO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIHNldFJvb3QpIHtcclxuICAgICAgICAgICAgc2V0Um9vdChyb290KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJlc3VsdCA9IHJvb3Q7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGVycikge1xyXG4gICAgICAgIGhhbmRsZUVycm9yKGVyciwgaW5zdGFuY2UsIDEgLyogUkVOREVSX0ZVTkNUSU9OICovKTtcclxuICAgICAgICByZXN1bHQgPSBjcmVhdGVWTm9kZShDb21tZW50KTtcclxuICAgIH1cclxuICAgIGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSA9IG51bGw7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcbi8qKlxyXG4gKiBkZXYgb25seVxyXG4gKiBJbiBkZXYgbW9kZSwgdGVtcGxhdGUgcm9vdCBsZXZlbCBjb21tZW50cyBhcmUgcmVuZGVyZWQsIHdoaWNoIHR1cm5zIHRoZVxyXG4gKiB0ZW1wbGF0ZSBpbnRvIGEgZnJhZ21lbnQgcm9vdCwgYnV0IHdlIG5lZWQgdG8gbG9jYXRlIHRoZSBzaW5nbGUgZWxlbWVudFxyXG4gKiByb290IGZvciBhdHRycyBhbmQgc2NvcGUgaWQgcHJvY2Vzc2luZy5cclxuICovXHJcbmNvbnN0IGdldENoaWxkUm9vdCA9ICh2bm9kZSkgPT4ge1xyXG4gICAgY29uc3QgcmF3Q2hpbGRyZW4gPSB2bm9kZS5jaGlsZHJlbjtcclxuICAgIGNvbnN0IGR5bmFtaWNDaGlsZHJlbiA9IHZub2RlLmR5bmFtaWNDaGlsZHJlbjtcclxuICAgIGNvbnN0IGNoaWxkUm9vdCA9IGZpbHRlclNpbmdsZVJvb3QocmF3Q2hpbGRyZW4pO1xyXG4gICAgaWYgKCFjaGlsZFJvb3QpIHtcclxuICAgICAgICByZXR1cm4gW3Zub2RlLCB1bmRlZmluZWRdO1xyXG4gICAgfVxyXG4gICAgY29uc3QgaW5kZXggPSByYXdDaGlsZHJlbi5pbmRleE9mKGNoaWxkUm9vdCk7XHJcbiAgICBjb25zdCBkeW5hbWljSW5kZXggPSBkeW5hbWljQ2hpbGRyZW4gPyBkeW5hbWljQ2hpbGRyZW4uaW5kZXhPZihjaGlsZFJvb3QpIDogLTE7XHJcbiAgICBjb25zdCBzZXRSb290ID0gKHVwZGF0ZWRSb290KSA9PiB7XHJcbiAgICAgICAgcmF3Q2hpbGRyZW5baW5kZXhdID0gdXBkYXRlZFJvb3Q7XHJcbiAgICAgICAgaWYgKGR5bmFtaWNDaGlsZHJlbikge1xyXG4gICAgICAgICAgICBpZiAoZHluYW1pY0luZGV4ID4gLTEpIHtcclxuICAgICAgICAgICAgICAgIGR5bmFtaWNDaGlsZHJlbltkeW5hbWljSW5kZXhdID0gdXBkYXRlZFJvb3Q7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAodXBkYXRlZFJvb3QucGF0Y2hGbGFnID4gMCkge1xyXG4gICAgICAgICAgICAgICAgdm5vZGUuZHluYW1pY0NoaWxkcmVuID0gWy4uLmR5bmFtaWNDaGlsZHJlbiwgdXBkYXRlZFJvb3RdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHJldHVybiBbbm9ybWFsaXplVk5vZGUoY2hpbGRSb290KSwgc2V0Um9vdF07XHJcbn07XHJcbmZ1bmN0aW9uIGZpbHRlclNpbmdsZVJvb3QoY2hpbGRyZW4pIHtcclxuICAgIGxldCBzaW5nbGVSb290O1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGNvbnN0IGNoaWxkID0gY2hpbGRyZW5baV07XHJcbiAgICAgICAgaWYgKGlzVk5vZGUoY2hpbGQpKSB7XHJcbiAgICAgICAgICAgIC8vIGlnbm9yZSB1c2VyIGNvbW1lbnRcclxuICAgICAgICAgICAgaWYgKGNoaWxkLnR5cGUgIT09IENvbW1lbnQgfHwgY2hpbGQuY2hpbGRyZW4gPT09ICd2LWlmJykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHNpbmdsZVJvb3QpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBoYXMgbW9yZSB0aGFuIDEgbm9uLWNvbW1lbnQgY2hpbGQsIHJldHVybiBub3dcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBzaW5nbGVSb290ID0gY2hpbGQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gc2luZ2xlUm9vdDtcclxufVxyXG5jb25zdCBnZXRGdW5jdGlvbmFsRmFsbHRocm91Z2ggPSAoYXR0cnMpID0+IHtcclxuICAgIGxldCByZXM7XHJcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBhdHRycykge1xyXG4gICAgICAgIGlmIChrZXkgPT09ICdjbGFzcycgfHwga2V5ID09PSAnc3R5bGUnIHx8IGlzT24oa2V5KSkge1xyXG4gICAgICAgICAgICAocmVzIHx8IChyZXMgPSB7fSkpW2tleV0gPSBhdHRyc1trZXldO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiByZXM7XHJcbn07XHJcbmNvbnN0IGZpbHRlck1vZGVsTGlzdGVuZXJzID0gKGF0dHJzLCBwcm9wcykgPT4ge1xyXG4gICAgY29uc3QgcmVzID0ge307XHJcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBhdHRycykge1xyXG4gICAgICAgIGlmICghaXNNb2RlbExpc3RlbmVyKGtleSkgfHwgIShrZXkuc2xpY2UoOSkgaW4gcHJvcHMpKSB7XHJcbiAgICAgICAgICAgIHJlc1trZXldID0gYXR0cnNba2V5XTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzO1xyXG59O1xyXG5jb25zdCBpc0VsZW1lbnRSb290ID0gKHZub2RlKSA9PiB7XHJcbiAgICByZXR1cm4gKHZub2RlLnNoYXBlRmxhZyAmIDYgLyogQ09NUE9ORU5UICovIHx8XHJcbiAgICAgICAgdm5vZGUuc2hhcGVGbGFnICYgMSAvKiBFTEVNRU5UICovIHx8XHJcbiAgICAgICAgdm5vZGUudHlwZSA9PT0gQ29tbWVudCAvLyBwb3RlbnRpYWwgdi1pZiBicmFuY2ggc3dpdGNoXHJcbiAgICApO1xyXG59O1xyXG5mdW5jdGlvbiBzaG91bGRVcGRhdGVDb21wb25lbnQocHJldlZOb2RlLCBuZXh0Vk5vZGUsIG9wdGltaXplZCkge1xyXG4gICAgY29uc3QgeyBwcm9wczogcHJldlByb3BzLCBjaGlsZHJlbjogcHJldkNoaWxkcmVuLCBjb21wb25lbnQgfSA9IHByZXZWTm9kZTtcclxuICAgIGNvbnN0IHsgcHJvcHM6IG5leHRQcm9wcywgY2hpbGRyZW46IG5leHRDaGlsZHJlbiwgcGF0Y2hGbGFnIH0gPSBuZXh0Vk5vZGU7XHJcbiAgICBjb25zdCBlbWl0cyA9IGNvbXBvbmVudC5lbWl0c09wdGlvbnM7XHJcbiAgICAvLyBQYXJlbnQgY29tcG9uZW50J3MgcmVuZGVyIGZ1bmN0aW9uIHdhcyBob3QtdXBkYXRlZC4gU2luY2UgdGhpcyBtYXkgaGF2ZVxyXG4gICAgLy8gY2F1c2VkIHRoZSBjaGlsZCBjb21wb25lbnQncyBzbG90cyBjb250ZW50IHRvIGhhdmUgY2hhbmdlZCwgd2UgbmVlZCB0b1xyXG4gICAgLy8gZm9yY2UgdGhlIGNoaWxkIHRvIHVwZGF0ZSBhcyB3ZWxsLlxyXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAocHJldkNoaWxkcmVuIHx8IG5leHRDaGlsZHJlbikgJiYgaXNIbXJVcGRhdGluZykge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgLy8gZm9yY2UgY2hpbGQgdXBkYXRlIGZvciBydW50aW1lIGRpcmVjdGl2ZSBvciB0cmFuc2l0aW9uIG9uIGNvbXBvbmVudCB2bm9kZS5cclxuICAgIGlmIChuZXh0Vk5vZGUuZGlycyB8fCBuZXh0Vk5vZGUudHJhbnNpdGlvbikge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgaWYgKG9wdGltaXplZCAmJiBwYXRjaEZsYWcgPj0gMCkge1xyXG4gICAgICAgIGlmIChwYXRjaEZsYWcgJiAxMDI0IC8qIERZTkFNSUNfU0xPVFMgKi8pIHtcclxuICAgICAgICAgICAgLy8gc2xvdCBjb250ZW50IHRoYXQgcmVmZXJlbmNlcyB2YWx1ZXMgdGhhdCBtaWdodCBoYXZlIGNoYW5nZWQsXHJcbiAgICAgICAgICAgIC8vIGUuZy4gaW4gYSB2LWZvclxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHBhdGNoRmxhZyAmIDE2IC8qIEZVTExfUFJPUFMgKi8pIHtcclxuICAgICAgICAgICAgaWYgKCFwcmV2UHJvcHMpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAhIW5leHRQcm9wcztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBwcmVzZW5jZSBvZiB0aGlzIGZsYWcgaW5kaWNhdGVzIHByb3BzIGFyZSBhbHdheXMgbm9uLW51bGxcclxuICAgICAgICAgICAgcmV0dXJuIGhhc1Byb3BzQ2hhbmdlZChwcmV2UHJvcHMsIG5leHRQcm9wcywgZW1pdHMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChwYXRjaEZsYWcgJiA4IC8qIFBST1BTICovKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGR5bmFtaWNQcm9wcyA9IG5leHRWTm9kZS5keW5hbWljUHJvcHM7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZHluYW1pY1Byb3BzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBrZXkgPSBkeW5hbWljUHJvcHNbaV07XHJcbiAgICAgICAgICAgICAgICBpZiAobmV4dFByb3BzW2tleV0gIT09IHByZXZQcm9wc1trZXldICYmXHJcbiAgICAgICAgICAgICAgICAgICAgIWlzRW1pdExpc3RlbmVyKGVtaXRzLCBrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICAvLyB0aGlzIHBhdGggaXMgb25seSB0YWtlbiBieSBtYW51YWxseSB3cml0dGVuIHJlbmRlciBmdW5jdGlvbnNcclxuICAgICAgICAvLyBzbyBwcmVzZW5jZSBvZiBhbnkgY2hpbGRyZW4gbGVhZHMgdG8gYSBmb3JjZWQgdXBkYXRlXHJcbiAgICAgICAgaWYgKHByZXZDaGlsZHJlbiB8fCBuZXh0Q2hpbGRyZW4pIHtcclxuICAgICAgICAgICAgaWYgKCFuZXh0Q2hpbGRyZW4gfHwgIW5leHRDaGlsZHJlbi4kc3RhYmxlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocHJldlByb3BzID09PSBuZXh0UHJvcHMpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIXByZXZQcm9wcykge1xyXG4gICAgICAgICAgICByZXR1cm4gISFuZXh0UHJvcHM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghbmV4dFByb3BzKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gaGFzUHJvcHNDaGFuZ2VkKHByZXZQcm9wcywgbmV4dFByb3BzLCBlbWl0cyk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbn1cclxuZnVuY3Rpb24gaGFzUHJvcHNDaGFuZ2VkKHByZXZQcm9wcywgbmV4dFByb3BzLCBlbWl0c09wdGlvbnMpIHtcclxuICAgIGNvbnN0IG5leHRLZXlzID0gT2JqZWN0LmtleXMobmV4dFByb3BzKTtcclxuICAgIGlmIChuZXh0S2V5cy5sZW5ndGggIT09IE9iamVjdC5rZXlzKHByZXZQcm9wcykubGVuZ3RoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5leHRLZXlzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgY29uc3Qga2V5ID0gbmV4dEtleXNbaV07XHJcbiAgICAgICAgaWYgKG5leHRQcm9wc1trZXldICE9PSBwcmV2UHJvcHNba2V5XSAmJlxyXG4gICAgICAgICAgICAhaXNFbWl0TGlzdGVuZXIoZW1pdHNPcHRpb25zLCBrZXkpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBmYWxzZTtcclxufVxyXG5mdW5jdGlvbiB1cGRhdGVIT0NIb3N0RWwoeyB2bm9kZSwgcGFyZW50IH0sIGVsIC8vIEhvc3ROb2RlXHJcbikge1xyXG4gICAgd2hpbGUgKHBhcmVudCAmJiBwYXJlbnQuc3ViVHJlZSA9PT0gdm5vZGUpIHtcclxuICAgICAgICAodm5vZGUgPSBwYXJlbnQudm5vZGUpLmVsID0gZWw7XHJcbiAgICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudDtcclxuICAgIH1cclxufVxuXG5jb25zdCBpc1N1c3BlbnNlID0gKHR5cGUpID0+IHR5cGUuX19pc1N1c3BlbnNlO1xyXG4vLyBTdXNwZW5zZSBleHBvc2VzIGEgY29tcG9uZW50LWxpa2UgQVBJLCBhbmQgaXMgdHJlYXRlZCBsaWtlIGEgY29tcG9uZW50XHJcbi8vIGluIHRoZSBjb21waWxlciwgYnV0IGludGVybmFsbHkgaXQncyBhIHNwZWNpYWwgYnVpbHQtaW4gdHlwZSB0aGF0IGhvb2tzXHJcbi8vIGRpcmVjdGx5IGludG8gdGhlIHJlbmRlcmVyLlxyXG5jb25zdCBTdXNwZW5zZUltcGwgPSB7XHJcbiAgICAvLyBJbiBvcmRlciB0byBtYWtlIFN1c3BlbnNlIHRyZWUtc2hha2FibGUsIHdlIG5lZWQgdG8gYXZvaWQgaW1wb3J0aW5nIGl0XHJcbiAgICAvLyBkaXJlY3RseSBpbiB0aGUgcmVuZGVyZXIuIFRoZSByZW5kZXJlciBjaGVja3MgZm9yIHRoZSBfX2lzU3VzcGVuc2UgZmxhZ1xyXG4gICAgLy8gb24gYSB2bm9kZSdzIHR5cGUgYW5kIGNhbGxzIHRoZSBgcHJvY2Vzc2AgbWV0aG9kLCBwYXNzaW5nIGluIHJlbmRlcmVyXHJcbiAgICAvLyBpbnRlcm5hbHMuXHJcbiAgICBfX2lzU3VzcGVuc2U6IHRydWUsXHJcbiAgICBwcm9jZXNzKG4xLCBuMiwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBvcHRpbWl6ZWQsIFxyXG4gICAgLy8gcGxhdGZvcm0tc3BlY2lmaWMgaW1wbCBwYXNzZWQgZnJvbSByZW5kZXJlclxyXG4gICAgcmVuZGVyZXJJbnRlcm5hbHMpIHtcclxuICAgICAgICBpZiAobjEgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBtb3VudFN1c3BlbnNlKG4yLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIG9wdGltaXplZCwgcmVuZGVyZXJJbnRlcm5hbHMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcGF0Y2hTdXNwZW5zZShuMSwgbjIsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIGlzU1ZHLCByZW5kZXJlckludGVybmFscyk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIGh5ZHJhdGU6IGh5ZHJhdGVTdXNwZW5zZSxcclxuICAgIGNyZWF0ZTogY3JlYXRlU3VzcGVuc2VCb3VuZGFyeVxyXG59O1xyXG4vLyBGb3JjZS1jYXN0ZWQgcHVibGljIHR5cGluZyBmb3IgaCBhbmQgVFNYIHByb3BzIGluZmVyZW5jZVxyXG5jb25zdCBTdXNwZW5zZSA9ICggU3VzcGVuc2VJbXBsXHJcbiAgICApO1xyXG5mdW5jdGlvbiBtb3VudFN1c3BlbnNlKHZub2RlLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIG9wdGltaXplZCwgcmVuZGVyZXJJbnRlcm5hbHMpIHtcclxuICAgIGNvbnN0IHsgcDogcGF0Y2gsIG86IHsgY3JlYXRlRWxlbWVudCB9IH0gPSByZW5kZXJlckludGVybmFscztcclxuICAgIGNvbnN0IGhpZGRlbkNvbnRhaW5lciA9IGNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgY29uc3Qgc3VzcGVuc2UgPSAodm5vZGUuc3VzcGVuc2UgPSBjcmVhdGVTdXNwZW5zZUJvdW5kYXJ5KHZub2RlLCBwYXJlbnRTdXNwZW5zZSwgcGFyZW50Q29tcG9uZW50LCBjb250YWluZXIsIGhpZGRlbkNvbnRhaW5lciwgYW5jaG9yLCBpc1NWRywgb3B0aW1pemVkLCByZW5kZXJlckludGVybmFscykpO1xyXG4gICAgLy8gc3RhcnQgbW91bnRpbmcgdGhlIGNvbnRlbnQgc3VidHJlZSBpbiBhbiBvZmYtZG9tIGNvbnRhaW5lclxyXG4gICAgcGF0Y2gobnVsbCwgKHN1c3BlbnNlLnBlbmRpbmdCcmFuY2ggPSB2bm9kZS5zc0NvbnRlbnQpLCBoaWRkZW5Db250YWluZXIsIG51bGwsIHBhcmVudENvbXBvbmVudCwgc3VzcGVuc2UsIGlzU1ZHKTtcclxuICAgIC8vIG5vdyBjaGVjayBpZiB3ZSBoYXZlIGVuY291bnRlcmVkIGFueSBhc3luYyBkZXBzXHJcbiAgICBpZiAoc3VzcGVuc2UuZGVwcyA+IDApIHtcclxuICAgICAgICAvLyBoYXMgYXN5bmNcclxuICAgICAgICAvLyBtb3VudCB0aGUgZmFsbGJhY2sgdHJlZVxyXG4gICAgICAgIHBhdGNoKG51bGwsIHZub2RlLnNzRmFsbGJhY2ssIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIG51bGwsIC8vIGZhbGxiYWNrIHRyZWUgd2lsbCBub3QgaGF2ZSBzdXNwZW5zZSBjb250ZXh0XHJcbiAgICAgICAgaXNTVkcpO1xyXG4gICAgICAgIHNldEFjdGl2ZUJyYW5jaChzdXNwZW5zZSwgdm5vZGUuc3NGYWxsYmFjayk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICAvLyBTdXNwZW5zZSBoYXMgbm8gYXN5bmMgZGVwcy4gSnVzdCByZXNvbHZlLlxyXG4gICAgICAgIHN1c3BlbnNlLnJlc29sdmUoKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBwYXRjaFN1c3BlbnNlKG4xLCBuMiwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgaXNTVkcsIHsgcDogcGF0Y2gsIHVtOiB1bm1vdW50LCBvOiB7IGNyZWF0ZUVsZW1lbnQgfSB9KSB7XHJcbiAgICBjb25zdCBzdXNwZW5zZSA9IChuMi5zdXNwZW5zZSA9IG4xLnN1c3BlbnNlKTtcclxuICAgIHN1c3BlbnNlLnZub2RlID0gbjI7XHJcbiAgICBuMi5lbCA9IG4xLmVsO1xyXG4gICAgY29uc3QgbmV3QnJhbmNoID0gbjIuc3NDb250ZW50O1xyXG4gICAgY29uc3QgbmV3RmFsbGJhY2sgPSBuMi5zc0ZhbGxiYWNrO1xyXG4gICAgY29uc3QgeyBhY3RpdmVCcmFuY2gsIHBlbmRpbmdCcmFuY2gsIGlzSW5GYWxsYmFjaywgaXNIeWRyYXRpbmcgfSA9IHN1c3BlbnNlO1xyXG4gICAgaWYgKHBlbmRpbmdCcmFuY2gpIHtcclxuICAgICAgICBzdXNwZW5zZS5wZW5kaW5nQnJhbmNoID0gbmV3QnJhbmNoO1xyXG4gICAgICAgIGlmIChpc1NhbWVWTm9kZVR5cGUobmV3QnJhbmNoLCBwZW5kaW5nQnJhbmNoKSkge1xyXG4gICAgICAgICAgICAvLyBzYW1lIHJvb3QgdHlwZSBidXQgY29udGVudCBtYXkgaGF2ZSBjaGFuZ2VkLlxyXG4gICAgICAgICAgICBwYXRjaChwZW5kaW5nQnJhbmNoLCBuZXdCcmFuY2gsIHN1c3BlbnNlLmhpZGRlbkNvbnRhaW5lciwgbnVsbCwgcGFyZW50Q29tcG9uZW50LCBzdXNwZW5zZSwgaXNTVkcpO1xyXG4gICAgICAgICAgICBpZiAoc3VzcGVuc2UuZGVwcyA8PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBzdXNwZW5zZS5yZXNvbHZlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoaXNJbkZhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgICAgICBwYXRjaChhY3RpdmVCcmFuY2gsIG5ld0ZhbGxiYWNrLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBudWxsLCAvLyBmYWxsYmFjayB0cmVlIHdpbGwgbm90IGhhdmUgc3VzcGVuc2UgY29udGV4dFxyXG4gICAgICAgICAgICAgICAgaXNTVkcpO1xyXG4gICAgICAgICAgICAgICAgc2V0QWN0aXZlQnJhbmNoKHN1c3BlbnNlLCBuZXdGYWxsYmFjayk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIHRvZ2dsZWQgYmVmb3JlIHBlbmRpbmcgdHJlZSBpcyByZXNvbHZlZFxyXG4gICAgICAgICAgICBzdXNwZW5zZS5wZW5kaW5nSWQrKztcclxuICAgICAgICAgICAgaWYgKGlzSHlkcmF0aW5nKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBpZiB0b2dnbGVkIGJlZm9yZSBoeWRyYXRpb24gaXMgZmluaXNoZWQsIHRoZSBjdXJyZW50IERPTSB0cmVlIGlzXHJcbiAgICAgICAgICAgICAgICAvLyBubyBsb25nZXIgdmFsaWQuIHNldCBpdCBhcyB0aGUgYWN0aXZlIGJyYW5jaCBzbyBpdCB3aWxsIGJlIHVubW91bnRlZFxyXG4gICAgICAgICAgICAgICAgLy8gd2hlbiByZXNvbHZlZFxyXG4gICAgICAgICAgICAgICAgc3VzcGVuc2UuaXNIeWRyYXRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHN1c3BlbnNlLmFjdGl2ZUJyYW5jaCA9IHBlbmRpbmdCcmFuY2g7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB1bm1vdW50KHBlbmRpbmdCcmFuY2gsIHBhcmVudENvbXBvbmVudCwgc3VzcGVuc2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIGluY3JlbWVudCBwZW5kaW5nIElELiB0aGlzIGlzIHVzZWQgdG8gaW52YWxpZGF0ZSBhc3luYyBjYWxsYmFja3NcclxuICAgICAgICAgICAgLy8gcmVzZXQgc3VzcGVuc2Ugc3RhdGVcclxuICAgICAgICAgICAgc3VzcGVuc2UuZGVwcyA9IDA7XHJcbiAgICAgICAgICAgIC8vIGRpc2NhcmQgZWZmZWN0cyBmcm9tIHBlbmRpbmcgYnJhbmNoXHJcbiAgICAgICAgICAgIHN1c3BlbnNlLmVmZmVjdHMubGVuZ3RoID0gMDtcclxuICAgICAgICAgICAgLy8gZGlzY2FyZCBwcmV2aW91cyBjb250YWluZXJcclxuICAgICAgICAgICAgc3VzcGVuc2UuaGlkZGVuQ29udGFpbmVyID0gY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgICAgIGlmIChpc0luRmFsbGJhY2spIHtcclxuICAgICAgICAgICAgICAgIC8vIGFscmVhZHkgaW4gZmFsbGJhY2sgc3RhdGVcclxuICAgICAgICAgICAgICAgIHBhdGNoKG51bGwsIG5ld0JyYW5jaCwgc3VzcGVuc2UuaGlkZGVuQ29udGFpbmVyLCBudWxsLCBwYXJlbnRDb21wb25lbnQsIHN1c3BlbnNlLCBpc1NWRyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoc3VzcGVuc2UuZGVwcyA8PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3VzcGVuc2UucmVzb2x2ZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGF0Y2goYWN0aXZlQnJhbmNoLCBuZXdGYWxsYmFjaywgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgbnVsbCwgLy8gZmFsbGJhY2sgdHJlZSB3aWxsIG5vdCBoYXZlIHN1c3BlbnNlIGNvbnRleHRcclxuICAgICAgICAgICAgICAgICAgICBpc1NWRyk7XHJcbiAgICAgICAgICAgICAgICAgICAgc2V0QWN0aXZlQnJhbmNoKHN1c3BlbnNlLCBuZXdGYWxsYmFjayk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoYWN0aXZlQnJhbmNoICYmIGlzU2FtZVZOb2RlVHlwZShuZXdCcmFuY2gsIGFjdGl2ZUJyYW5jaCkpIHtcclxuICAgICAgICAgICAgICAgIC8vIHRvZ2dsZWQgXCJiYWNrXCIgdG8gY3VycmVudCBhY3RpdmUgYnJhbmNoXHJcbiAgICAgICAgICAgICAgICBwYXRjaChhY3RpdmVCcmFuY2gsIG5ld0JyYW5jaCwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgc3VzcGVuc2UsIGlzU1ZHKTtcclxuICAgICAgICAgICAgICAgIC8vIGZvcmNlIHJlc29sdmVcclxuICAgICAgICAgICAgICAgIHN1c3BlbnNlLnJlc29sdmUodHJ1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBzd2l0Y2hlZCB0byBhIDNyZCBicmFuY2hcclxuICAgICAgICAgICAgICAgIHBhdGNoKG51bGwsIG5ld0JyYW5jaCwgc3VzcGVuc2UuaGlkZGVuQ29udGFpbmVyLCBudWxsLCBwYXJlbnRDb21wb25lbnQsIHN1c3BlbnNlLCBpc1NWRyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoc3VzcGVuc2UuZGVwcyA8PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3VzcGVuc2UucmVzb2x2ZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgaWYgKGFjdGl2ZUJyYW5jaCAmJiBpc1NhbWVWTm9kZVR5cGUobmV3QnJhbmNoLCBhY3RpdmVCcmFuY2gpKSB7XHJcbiAgICAgICAgICAgIC8vIHJvb3QgZGlkIG5vdCBjaGFuZ2UsIGp1c3Qgbm9ybWFsIHBhdGNoXHJcbiAgICAgICAgICAgIHBhdGNoKGFjdGl2ZUJyYW5jaCwgbmV3QnJhbmNoLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBzdXNwZW5zZSwgaXNTVkcpO1xyXG4gICAgICAgICAgICBzZXRBY3RpdmVCcmFuY2goc3VzcGVuc2UsIG5ld0JyYW5jaCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyByb290IG5vZGUgdG9nZ2xlZFxyXG4gICAgICAgICAgICAvLyBpbnZva2UgQHBlbmRpbmcgZXZlbnRcclxuICAgICAgICAgICAgY29uc3Qgb25QZW5kaW5nID0gbjIucHJvcHMgJiYgbjIucHJvcHMub25QZW5kaW5nO1xyXG4gICAgICAgICAgICBpZiAoaXNGdW5jdGlvbihvblBlbmRpbmcpKSB7XHJcbiAgICAgICAgICAgICAgICBvblBlbmRpbmcoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBtb3VudCBwZW5kaW5nIGJyYW5jaCBpbiBvZmYtZG9tIGNvbnRhaW5lclxyXG4gICAgICAgICAgICBzdXNwZW5zZS5wZW5kaW5nQnJhbmNoID0gbmV3QnJhbmNoO1xyXG4gICAgICAgICAgICBzdXNwZW5zZS5wZW5kaW5nSWQrKztcclxuICAgICAgICAgICAgcGF0Y2gobnVsbCwgbmV3QnJhbmNoLCBzdXNwZW5zZS5oaWRkZW5Db250YWluZXIsIG51bGwsIHBhcmVudENvbXBvbmVudCwgc3VzcGVuc2UsIGlzU1ZHKTtcclxuICAgICAgICAgICAgaWYgKHN1c3BlbnNlLmRlcHMgPD0gMCkge1xyXG4gICAgICAgICAgICAgICAgLy8gaW5jb21pbmcgYnJhbmNoIGhhcyBubyBhc3luYyBkZXBzLCByZXNvbHZlIG5vdy5cclxuICAgICAgICAgICAgICAgIHN1c3BlbnNlLnJlc29sdmUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHsgdGltZW91dCwgcGVuZGluZ0lkIH0gPSBzdXNwZW5zZTtcclxuICAgICAgICAgICAgICAgIGlmICh0aW1lb3V0ID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3VzcGVuc2UucGVuZGluZ0lkID09PSBwZW5kaW5nSWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1c3BlbnNlLmZhbGxiYWNrKG5ld0ZhbGxiYWNrKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0sIHRpbWVvdXQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodGltZW91dCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHN1c3BlbnNlLmZhbGxiYWNrKG5ld0ZhbGxiYWNrKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5sZXQgaGFzV2FybmVkID0gZmFsc2U7XHJcbmZ1bmN0aW9uIGNyZWF0ZVN1c3BlbnNlQm91bmRhcnkodm5vZGUsIHBhcmVudCwgcGFyZW50Q29tcG9uZW50LCBjb250YWluZXIsIGhpZGRlbkNvbnRhaW5lciwgYW5jaG9yLCBpc1NWRywgb3B0aW1pemVkLCByZW5kZXJlckludGVybmFscywgaXNIeWRyYXRpbmcgPSBmYWxzZSkge1xyXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFmYWxzZSAmJiAhaGFzV2FybmVkKSB7XHJcbiAgICAgICAgaGFzV2FybmVkID0gdHJ1ZTtcclxuICAgICAgICAvLyBAdHMtaWdub3JlIGBjb25zb2xlLmluZm9gIGNhbm5vdCBiZSBudWxsIGVycm9yXHJcbiAgICAgICAgY29uc29sZVtjb25zb2xlLmluZm8gPyAnaW5mbycgOiAnbG9nJ10oYDxTdXNwZW5zZT4gaXMgYW4gZXhwZXJpbWVudGFsIGZlYXR1cmUgYW5kIGl0cyBBUEkgd2lsbCBsaWtlbHkgY2hhbmdlLmApO1xyXG4gICAgfVxyXG4gICAgY29uc3QgeyBwOiBwYXRjaCwgbTogbW92ZSwgdW06IHVubW91bnQsIG46IG5leHQsIG86IHsgcGFyZW50Tm9kZSwgcmVtb3ZlIH0gfSA9IHJlbmRlcmVySW50ZXJuYWxzO1xyXG4gICAgY29uc3QgdGltZW91dCA9IHRvTnVtYmVyKHZub2RlLnByb3BzICYmIHZub2RlLnByb3BzLnRpbWVvdXQpO1xyXG4gICAgY29uc3Qgc3VzcGVuc2UgPSB7XHJcbiAgICAgICAgdm5vZGUsXHJcbiAgICAgICAgcGFyZW50LFxyXG4gICAgICAgIHBhcmVudENvbXBvbmVudCxcclxuICAgICAgICBpc1NWRyxcclxuICAgICAgICBjb250YWluZXIsXHJcbiAgICAgICAgaGlkZGVuQ29udGFpbmVyLFxyXG4gICAgICAgIGFuY2hvcixcclxuICAgICAgICBkZXBzOiAwLFxyXG4gICAgICAgIHBlbmRpbmdJZDogMCxcclxuICAgICAgICB0aW1lb3V0OiB0eXBlb2YgdGltZW91dCA9PT0gJ251bWJlcicgPyB0aW1lb3V0IDogLTEsXHJcbiAgICAgICAgYWN0aXZlQnJhbmNoOiBudWxsLFxyXG4gICAgICAgIHBlbmRpbmdCcmFuY2g6IG51bGwsXHJcbiAgICAgICAgaXNJbkZhbGxiYWNrOiB0cnVlLFxyXG4gICAgICAgIGlzSHlkcmF0aW5nLFxyXG4gICAgICAgIGlzVW5tb3VudGVkOiBmYWxzZSxcclxuICAgICAgICBlZmZlY3RzOiBbXSxcclxuICAgICAgICByZXNvbHZlKHJlc3VtZSA9IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgIGlmICghcmVzdW1lICYmICFzdXNwZW5zZS5wZW5kaW5nQnJhbmNoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBzdXNwZW5zZS5yZXNvbHZlKCkgaXMgY2FsbGVkIHdpdGhvdXQgYSBwZW5kaW5nIGJyYW5jaC5gKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChzdXNwZW5zZS5pc1VubW91bnRlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgc3VzcGVuc2UucmVzb2x2ZSgpIGlzIGNhbGxlZCBvbiBhbiBhbHJlYWR5IHVubW91bnRlZCBzdXNwZW5zZSBib3VuZGFyeS5gKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCB7IHZub2RlLCBhY3RpdmVCcmFuY2gsIHBlbmRpbmdCcmFuY2gsIHBlbmRpbmdJZCwgZWZmZWN0cywgcGFyZW50Q29tcG9uZW50LCBjb250YWluZXIgfSA9IHN1c3BlbnNlO1xyXG4gICAgICAgICAgICBpZiAoc3VzcGVuc2UuaXNIeWRyYXRpbmcpIHtcclxuICAgICAgICAgICAgICAgIHN1c3BlbnNlLmlzSHlkcmF0aW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoIXJlc3VtZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZGVsYXlFbnRlciA9IGFjdGl2ZUJyYW5jaCAmJlxyXG4gICAgICAgICAgICAgICAgICAgIHBlbmRpbmdCcmFuY2gudHJhbnNpdGlvbiAmJlxyXG4gICAgICAgICAgICAgICAgICAgIHBlbmRpbmdCcmFuY2gudHJhbnNpdGlvbi5tb2RlID09PSAnb3V0LWluJztcclxuICAgICAgICAgICAgICAgIGlmIChkZWxheUVudGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aXZlQnJhbmNoLnRyYW5zaXRpb24uYWZ0ZXJMZWF2ZSA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBlbmRpbmdJZCA9PT0gc3VzcGVuc2UucGVuZGluZ0lkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb3ZlKHBlbmRpbmdCcmFuY2gsIGNvbnRhaW5lciwgYW5jaG9yLCAwIC8qIEVOVEVSICovKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyB0aGlzIGlzIGluaXRpYWwgYW5jaG9yIG9uIG1vdW50XHJcbiAgICAgICAgICAgICAgICBsZXQgeyBhbmNob3IgfSA9IHN1c3BlbnNlO1xyXG4gICAgICAgICAgICAgICAgLy8gdW5tb3VudCBjdXJyZW50IGFjdGl2ZSB0cmVlXHJcbiAgICAgICAgICAgICAgICBpZiAoYWN0aXZlQnJhbmNoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgdGhlIGZhbGxiYWNrIHRyZWUgd2FzIG1vdW50ZWQsIGl0IG1heSBoYXZlIGJlZW4gbW92ZWRcclxuICAgICAgICAgICAgICAgICAgICAvLyBhcyBwYXJ0IG9mIGEgcGFyZW50IHN1c3BlbnNlLiBnZXQgdGhlIGxhdGVzdCBhbmNob3IgZm9yIGluc2VydGlvblxyXG4gICAgICAgICAgICAgICAgICAgIGFuY2hvciA9IG5leHQoYWN0aXZlQnJhbmNoKTtcclxuICAgICAgICAgICAgICAgICAgICB1bm1vdW50KGFjdGl2ZUJyYW5jaCwgcGFyZW50Q29tcG9uZW50LCBzdXNwZW5zZSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoIWRlbGF5RW50ZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBtb3ZlIGNvbnRlbnQgZnJvbSBvZmYtZG9tIGNvbnRhaW5lciB0byBhY3R1YWwgY29udGFpbmVyXHJcbiAgICAgICAgICAgICAgICAgICAgbW92ZShwZW5kaW5nQnJhbmNoLCBjb250YWluZXIsIGFuY2hvciwgMCAvKiBFTlRFUiAqLyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc2V0QWN0aXZlQnJhbmNoKHN1c3BlbnNlLCBwZW5kaW5nQnJhbmNoKTtcclxuICAgICAgICAgICAgc3VzcGVuc2UucGVuZGluZ0JyYW5jaCA9IG51bGw7XHJcbiAgICAgICAgICAgIHN1c3BlbnNlLmlzSW5GYWxsYmFjayA9IGZhbHNlO1xyXG4gICAgICAgICAgICAvLyBmbHVzaCBidWZmZXJlZCBlZmZlY3RzXHJcbiAgICAgICAgICAgIC8vIGNoZWNrIGlmIHRoZXJlIGlzIGEgcGVuZGluZyBwYXJlbnQgc3VzcGVuc2VcclxuICAgICAgICAgICAgbGV0IHBhcmVudCA9IHN1c3BlbnNlLnBhcmVudDtcclxuICAgICAgICAgICAgbGV0IGhhc1VucmVzb2x2ZWRBbmNlc3RvciA9IGZhbHNlO1xyXG4gICAgICAgICAgICB3aGlsZSAocGFyZW50KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocGFyZW50LnBlbmRpbmdCcmFuY2gpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBmb3VuZCBhIHBlbmRpbmcgcGFyZW50IHN1c3BlbnNlLCBtZXJnZSBidWZmZXJlZCBwb3N0IGpvYnNcclxuICAgICAgICAgICAgICAgICAgICAvLyBpbnRvIHRoYXQgcGFyZW50XHJcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50LmVmZmVjdHMucHVzaCguLi5lZmZlY3RzKTtcclxuICAgICAgICAgICAgICAgICAgICBoYXNVbnJlc29sdmVkQW5jZXN0b3IgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBubyBwZW5kaW5nIHBhcmVudCBzdXNwZW5zZSwgZmx1c2ggYWxsIGpvYnNcclxuICAgICAgICAgICAgaWYgKCFoYXNVbnJlc29sdmVkQW5jZXN0b3IpIHtcclxuICAgICAgICAgICAgICAgIHF1ZXVlUG9zdEZsdXNoQ2IoZWZmZWN0cyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc3VzcGVuc2UuZWZmZWN0cyA9IFtdO1xyXG4gICAgICAgICAgICAvLyBpbnZva2UgQHJlc29sdmUgZXZlbnRcclxuICAgICAgICAgICAgY29uc3Qgb25SZXNvbHZlID0gdm5vZGUucHJvcHMgJiYgdm5vZGUucHJvcHMub25SZXNvbHZlO1xyXG4gICAgICAgICAgICBpZiAoaXNGdW5jdGlvbihvblJlc29sdmUpKSB7XHJcbiAgICAgICAgICAgICAgICBvblJlc29sdmUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZmFsbGJhY2soZmFsbGJhY2tWTm9kZSkge1xyXG4gICAgICAgICAgICBpZiAoIXN1c3BlbnNlLnBlbmRpbmdCcmFuY2gpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCB7IHZub2RlLCBhY3RpdmVCcmFuY2gsIHBhcmVudENvbXBvbmVudCwgY29udGFpbmVyLCBpc1NWRyB9ID0gc3VzcGVuc2U7XHJcbiAgICAgICAgICAgIC8vIGludm9rZSBAZmFsbGJhY2sgZXZlbnRcclxuICAgICAgICAgICAgY29uc3Qgb25GYWxsYmFjayA9IHZub2RlLnByb3BzICYmIHZub2RlLnByb3BzLm9uRmFsbGJhY2s7XHJcbiAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKG9uRmFsbGJhY2spKSB7XHJcbiAgICAgICAgICAgICAgICBvbkZhbGxiYWNrKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgYW5jaG9yID0gbmV4dChhY3RpdmVCcmFuY2gpO1xyXG4gICAgICAgICAgICBjb25zdCBtb3VudEZhbGxiYWNrID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFzdXNwZW5zZS5pc0luRmFsbGJhY2spIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBtb3VudCB0aGUgZmFsbGJhY2sgdHJlZVxyXG4gICAgICAgICAgICAgICAgcGF0Y2gobnVsbCwgZmFsbGJhY2tWTm9kZSwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgbnVsbCwgLy8gZmFsbGJhY2sgdHJlZSB3aWxsIG5vdCBoYXZlIHN1c3BlbnNlIGNvbnRleHRcclxuICAgICAgICAgICAgICAgIGlzU1ZHKTtcclxuICAgICAgICAgICAgICAgIHNldEFjdGl2ZUJyYW5jaChzdXNwZW5zZSwgZmFsbGJhY2tWTm9kZSk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGNvbnN0IGRlbGF5RW50ZXIgPSBmYWxsYmFja1ZOb2RlLnRyYW5zaXRpb24gJiYgZmFsbGJhY2tWTm9kZS50cmFuc2l0aW9uLm1vZGUgPT09ICdvdXQtaW4nO1xyXG4gICAgICAgICAgICBpZiAoZGVsYXlFbnRlcikge1xyXG4gICAgICAgICAgICAgICAgYWN0aXZlQnJhbmNoLnRyYW5zaXRpb24uYWZ0ZXJMZWF2ZSA9IG1vdW50RmFsbGJhY2s7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gdW5tb3VudCBjdXJyZW50IGFjdGl2ZSBicmFuY2hcclxuICAgICAgICAgICAgdW5tb3VudChhY3RpdmVCcmFuY2gsIHBhcmVudENvbXBvbmVudCwgbnVsbCwgLy8gbm8gc3VzcGVuc2Ugc28gdW5tb3VudCBob29rcyBmaXJlIG5vd1xyXG4gICAgICAgICAgICB0cnVlIC8vIHNob3VsZFJlbW92ZVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICBzdXNwZW5zZS5pc0luRmFsbGJhY2sgPSB0cnVlO1xyXG4gICAgICAgICAgICBpZiAoIWRlbGF5RW50ZXIpIHtcclxuICAgICAgICAgICAgICAgIG1vdW50RmFsbGJhY2soKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbW92ZShjb250YWluZXIsIGFuY2hvciwgdHlwZSkge1xyXG4gICAgICAgICAgICBzdXNwZW5zZS5hY3RpdmVCcmFuY2ggJiZcclxuICAgICAgICAgICAgICAgIG1vdmUoc3VzcGVuc2UuYWN0aXZlQnJhbmNoLCBjb250YWluZXIsIGFuY2hvciwgdHlwZSk7XHJcbiAgICAgICAgICAgIHN1c3BlbnNlLmNvbnRhaW5lciA9IGNvbnRhaW5lcjtcclxuICAgICAgICB9LFxyXG4gICAgICAgIG5leHQoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBzdXNwZW5zZS5hY3RpdmVCcmFuY2ggJiYgbmV4dChzdXNwZW5zZS5hY3RpdmVCcmFuY2gpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcmVnaXN0ZXJEZXAoaW5zdGFuY2UsIHNldHVwUmVuZGVyRWZmZWN0KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGlzSW5QZW5kaW5nU3VzcGVuc2UgPSAhIXN1c3BlbnNlLnBlbmRpbmdCcmFuY2g7XHJcbiAgICAgICAgICAgIGlmIChpc0luUGVuZGluZ1N1c3BlbnNlKSB7XHJcbiAgICAgICAgICAgICAgICBzdXNwZW5zZS5kZXBzKys7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgaHlkcmF0ZWRFbCA9IGluc3RhbmNlLnZub2RlLmVsO1xyXG4gICAgICAgICAgICBpbnN0YW5jZVxyXG4gICAgICAgICAgICAgICAgLmFzeW5jRGVwLmNhdGNoKGVyciA9PiB7XHJcbiAgICAgICAgICAgICAgICBoYW5kbGVFcnJvcihlcnIsIGluc3RhbmNlLCAwIC8qIFNFVFVQX0ZVTkNUSU9OICovKTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC50aGVuKGFzeW5jU2V0dXBSZXN1bHQgPT4ge1xyXG4gICAgICAgICAgICAgICAgLy8gcmV0cnkgd2hlbiB0aGUgc2V0dXAoKSBwcm9taXNlIHJlc29sdmVzLlxyXG4gICAgICAgICAgICAgICAgLy8gY29tcG9uZW50IG1heSBoYXZlIGJlZW4gdW5tb3VudGVkIGJlZm9yZSByZXNvbHZlLlxyXG4gICAgICAgICAgICAgICAgaWYgKGluc3RhbmNlLmlzVW5tb3VudGVkIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgc3VzcGVuc2UuaXNVbm1vdW50ZWQgfHxcclxuICAgICAgICAgICAgICAgICAgICBzdXNwZW5zZS5wZW5kaW5nSWQgIT09IGluc3RhbmNlLnN1c3BlbnNlSWQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyByZXRyeSBmcm9tIHRoaXMgY29tcG9uZW50XHJcbiAgICAgICAgICAgICAgICBpbnN0YW5jZS5hc3luY1Jlc29sdmVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHsgdm5vZGUgfSA9IGluc3RhbmNlO1xyXG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHB1c2hXYXJuaW5nQ29udGV4dCh2bm9kZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBoYW5kbGVTZXR1cFJlc3VsdChpbnN0YW5jZSwgYXN5bmNTZXR1cFJlc3VsdCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoaHlkcmF0ZWRFbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHZub2RlIG1heSBoYXZlIGJlZW4gcmVwbGFjZWQgaWYgYW4gdXBkYXRlIGhhcHBlbmVkIGJlZm9yZSB0aGVcclxuICAgICAgICAgICAgICAgICAgICAvLyBhc3luYyBkZXAgaXMgcmVzb2x2ZWQuXHJcbiAgICAgICAgICAgICAgICAgICAgdm5vZGUuZWwgPSBoeWRyYXRlZEVsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgcGxhY2Vob2xkZXIgPSAhaHlkcmF0ZWRFbCAmJiBpbnN0YW5jZS5zdWJUcmVlLmVsO1xyXG4gICAgICAgICAgICAgICAgc2V0dXBSZW5kZXJFZmZlY3QoaW5zdGFuY2UsIHZub2RlLCBcclxuICAgICAgICAgICAgICAgIC8vIGNvbXBvbmVudCBtYXkgaGF2ZSBiZWVuIG1vdmVkIGJlZm9yZSByZXNvbHZlLlxyXG4gICAgICAgICAgICAgICAgLy8gaWYgdGhpcyBpcyBub3QgYSBoeWRyYXRpb24sIGluc3RhbmNlLnN1YlRyZWUgd2lsbCBiZSB0aGUgY29tbWVudFxyXG4gICAgICAgICAgICAgICAgLy8gcGxhY2Vob2xkZXIuXHJcbiAgICAgICAgICAgICAgICBwYXJlbnROb2RlKGh5ZHJhdGVkRWwgfHwgaW5zdGFuY2Uuc3ViVHJlZS5lbCksIFxyXG4gICAgICAgICAgICAgICAgLy8gYW5jaG9yIHdpbGwgbm90IGJlIHVzZWQgaWYgdGhpcyBpcyBoeWRyYXRpb24sIHNvIG9ubHkgbmVlZCB0b1xyXG4gICAgICAgICAgICAgICAgLy8gY29uc2lkZXIgdGhlIGNvbW1lbnQgcGxhY2Vob2xkZXIgY2FzZS5cclxuICAgICAgICAgICAgICAgIGh5ZHJhdGVkRWwgPyBudWxsIDogbmV4dChpbnN0YW5jZS5zdWJUcmVlKSwgc3VzcGVuc2UsIGlzU1ZHLCBvcHRpbWl6ZWQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBsYWNlaG9sZGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlKHBsYWNlaG9sZGVyKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHVwZGF0ZUhPQ0hvc3RFbChpbnN0YW5jZSwgdm5vZGUuZWwpO1xyXG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHBvcFdhcm5pbmdDb250ZXh0KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBvbmx5IGRlY3JlYXNlIGRlcHMgY291bnQgaWYgc3VzcGVuc2UgaXMgbm90IGFscmVhZHkgcmVzb2x2ZWRcclxuICAgICAgICAgICAgICAgIGlmIChpc0luUGVuZGluZ1N1c3BlbnNlICYmIC0tc3VzcGVuc2UuZGVwcyA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHN1c3BlbnNlLnJlc29sdmUoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICB1bm1vdW50KHBhcmVudFN1c3BlbnNlLCBkb1JlbW92ZSkge1xyXG4gICAgICAgICAgICBzdXNwZW5zZS5pc1VubW91bnRlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIGlmIChzdXNwZW5zZS5hY3RpdmVCcmFuY2gpIHtcclxuICAgICAgICAgICAgICAgIHVubW91bnQoc3VzcGVuc2UuYWN0aXZlQnJhbmNoLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBkb1JlbW92ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHN1c3BlbnNlLnBlbmRpbmdCcmFuY2gpIHtcclxuICAgICAgICAgICAgICAgIHVubW91bnQoc3VzcGVuc2UucGVuZGluZ0JyYW5jaCwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgZG9SZW1vdmUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHJldHVybiBzdXNwZW5zZTtcclxufVxyXG5mdW5jdGlvbiBoeWRyYXRlU3VzcGVuc2Uobm9kZSwgdm5vZGUsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBvcHRpbWl6ZWQsIHJlbmRlcmVySW50ZXJuYWxzLCBoeWRyYXRlTm9kZSkge1xyXG4gICAgLyogZXNsaW50LWRpc2FibGUgbm8tcmVzdHJpY3RlZC1nbG9iYWxzICovXHJcbiAgICBjb25zdCBzdXNwZW5zZSA9ICh2bm9kZS5zdXNwZW5zZSA9IGNyZWF0ZVN1c3BlbnNlQm91bmRhcnkodm5vZGUsIHBhcmVudFN1c3BlbnNlLCBwYXJlbnRDb21wb25lbnQsIG5vZGUucGFyZW50Tm9kZSwgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JyksIG51bGwsIGlzU1ZHLCBvcHRpbWl6ZWQsIHJlbmRlcmVySW50ZXJuYWxzLCB0cnVlIC8qIGh5ZHJhdGluZyAqLykpO1xyXG4gICAgLy8gdGhlcmUgYXJlIHR3byBwb3NzaWJsZSBzY2VuYXJpb3MgZm9yIHNlcnZlci1yZW5kZXJlZCBzdXNwZW5zZTpcclxuICAgIC8vIC0gc3VjY2Vzczogc3NyIGNvbnRlbnQgc2hvdWxkIGJlIGZ1bGx5IHJlc29sdmVkXHJcbiAgICAvLyAtIGZhaWx1cmU6IHNzciBjb250ZW50IHNob3VsZCBiZSB0aGUgZmFsbGJhY2sgYnJhbmNoLlxyXG4gICAgLy8gaG93ZXZlciwgb24gdGhlIGNsaWVudCB3ZSBkb24ndCByZWFsbHkga25vdyBpZiBpdCBoYXMgZmFpbGVkIG9yIG5vdFxyXG4gICAgLy8gYXR0ZW1wdCB0byBoeWRyYXRlIHRoZSBET00gYXNzdW1pbmcgaXQgaGFzIHN1Y2NlZWRlZCwgYnV0IHdlIHN0aWxsXHJcbiAgICAvLyBuZWVkIHRvIGNvbnN0cnVjdCBhIHN1c3BlbnNlIGJvdW5kYXJ5IGZpcnN0XHJcbiAgICBjb25zdCByZXN1bHQgPSBoeWRyYXRlTm9kZShub2RlLCAoc3VzcGVuc2UucGVuZGluZ0JyYW5jaCA9IHZub2RlLnNzQ29udGVudCksIHBhcmVudENvbXBvbmVudCwgc3VzcGVuc2UsIG9wdGltaXplZCk7XHJcbiAgICBpZiAoc3VzcGVuc2UuZGVwcyA9PT0gMCkge1xyXG4gICAgICAgIHN1c3BlbnNlLnJlc29sdmUoKTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLXJlc3RyaWN0ZWQtZ2xvYmFscyAqL1xyXG59XHJcbmZ1bmN0aW9uIG5vcm1hbGl6ZVN1c3BlbnNlQ2hpbGRyZW4odm5vZGUpIHtcclxuICAgIGNvbnN0IHsgc2hhcGVGbGFnLCBjaGlsZHJlbiB9ID0gdm5vZGU7XHJcbiAgICBsZXQgY29udGVudDtcclxuICAgIGxldCBmYWxsYmFjaztcclxuICAgIGlmIChzaGFwZUZsYWcgJiAzMiAvKiBTTE9UU19DSElMRFJFTiAqLykge1xyXG4gICAgICAgIGNvbnRlbnQgPSBub3JtYWxpemVTdXNwZW5zZVNsb3QoY2hpbGRyZW4uZGVmYXVsdCk7XHJcbiAgICAgICAgZmFsbGJhY2sgPSBub3JtYWxpemVTdXNwZW5zZVNsb3QoY2hpbGRyZW4uZmFsbGJhY2spO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgY29udGVudCA9IG5vcm1hbGl6ZVN1c3BlbnNlU2xvdChjaGlsZHJlbik7XHJcbiAgICAgICAgZmFsbGJhY2sgPSBub3JtYWxpemVWTm9kZShudWxsKTtcclxuICAgIH1cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgY29udGVudCxcclxuICAgICAgICBmYWxsYmFja1xyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiBub3JtYWxpemVTdXNwZW5zZVNsb3Qocykge1xyXG4gICAgaWYgKGlzRnVuY3Rpb24ocykpIHtcclxuICAgICAgICBzID0gcygpO1xyXG4gICAgfVxyXG4gICAgaWYgKGlzQXJyYXkocykpIHtcclxuICAgICAgICBjb25zdCBzaW5nbGVDaGlsZCA9IGZpbHRlclNpbmdsZVJvb3Qocyk7XHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhc2luZ2xlQ2hpbGQpIHtcclxuICAgICAgICAgICAgd2FybihgPFN1c3BlbnNlPiBzbG90cyBleHBlY3QgYSBzaW5nbGUgcm9vdCBub2RlLmApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzID0gc2luZ2xlQ2hpbGQ7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbm9ybWFsaXplVk5vZGUocyk7XHJcbn1cclxuZnVuY3Rpb24gcXVldWVFZmZlY3RXaXRoU3VzcGVuc2UoZm4sIHN1c3BlbnNlKSB7XHJcbiAgICBpZiAoc3VzcGVuc2UgJiYgc3VzcGVuc2UucGVuZGluZ0JyYW5jaCkge1xyXG4gICAgICAgIGlmIChpc0FycmF5KGZuKSkge1xyXG4gICAgICAgICAgICBzdXNwZW5zZS5lZmZlY3RzLnB1c2goLi4uZm4pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgc3VzcGVuc2UuZWZmZWN0cy5wdXNoKGZuKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBxdWV1ZVBvc3RGbHVzaENiKGZuKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBzZXRBY3RpdmVCcmFuY2goc3VzcGVuc2UsIGJyYW5jaCkge1xyXG4gICAgc3VzcGVuc2UuYWN0aXZlQnJhbmNoID0gYnJhbmNoO1xyXG4gICAgY29uc3QgeyB2bm9kZSwgcGFyZW50Q29tcG9uZW50IH0gPSBzdXNwZW5zZTtcclxuICAgIGNvbnN0IGVsID0gKHZub2RlLmVsID0gYnJhbmNoLmVsKTtcclxuICAgIC8vIGluIGNhc2Ugc3VzcGVuc2UgaXMgdGhlIHJvb3Qgbm9kZSBvZiBhIGNvbXBvbmVudCxcclxuICAgIC8vIHJlY3Vyc2l2ZWx5IHVwZGF0ZSB0aGUgSE9DIGVsXHJcbiAgICBpZiAocGFyZW50Q29tcG9uZW50ICYmIHBhcmVudENvbXBvbmVudC5zdWJUcmVlID09PSB2bm9kZSkge1xyXG4gICAgICAgIHBhcmVudENvbXBvbmVudC52bm9kZS5lbCA9IGVsO1xyXG4gICAgICAgIHVwZGF0ZUhPQ0hvc3RFbChwYXJlbnRDb21wb25lbnQsIGVsKTtcclxuICAgIH1cclxufVxuXG5sZXQgaXNSZW5kZXJpbmdDb21waWxlZFNsb3QgPSAwO1xyXG5jb25zdCBzZXRDb21waWxlZFNsb3RSZW5kZXJpbmcgPSAobikgPT4gKGlzUmVuZGVyaW5nQ29tcGlsZWRTbG90ICs9IG4pO1xyXG4vKipcclxuICogQ29tcGlsZXIgcnVudGltZSBoZWxwZXIgZm9yIHJlbmRlcmluZyBgPHNsb3QvPmBcclxuICogQHByaXZhdGVcclxuICovXHJcbmZ1bmN0aW9uIHJlbmRlclNsb3Qoc2xvdHMsIG5hbWUsIHByb3BzID0ge30sIFxyXG4vLyB0aGlzIGlzIG5vdCBhIHVzZXItZmFjaW5nIGZ1bmN0aW9uLCBzbyB0aGUgZmFsbGJhY2sgaXMgYWx3YXlzIGdlbmVyYXRlZCBieVxyXG4vLyB0aGUgY29tcGlsZXIgYW5kIGd1YXJhbnRlZWQgdG8gYmUgYSBmdW5jdGlvbiByZXR1cm5pbmcgYW4gYXJyYXlcclxuZmFsbGJhY2spIHtcclxuICAgIGxldCBzbG90ID0gc2xvdHNbbmFtZV07XHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIHNsb3QgJiYgc2xvdC5sZW5ndGggPiAxKSB7XHJcbiAgICAgICAgd2FybihgU1NSLW9wdGltaXplZCBzbG90IGZ1bmN0aW9uIGRldGVjdGVkIGluIGEgbm9uLVNTUi1vcHRpbWl6ZWQgcmVuZGVyIGAgK1xyXG4gICAgICAgICAgICBgZnVuY3Rpb24uIFlvdSBuZWVkIHRvIG1hcmsgdGhpcyBjb21wb25lbnQgd2l0aCAkZHluYW1pYy1zbG90cyBpbiB0aGUgYCArXHJcbiAgICAgICAgICAgIGBwYXJlbnQgdGVtcGxhdGUuYCk7XHJcbiAgICAgICAgc2xvdCA9ICgpID0+IFtdO1xyXG4gICAgfVxyXG4gICAgLy8gYSBjb21waWxlZCBzbG90IGRpc2FibGVzIGJsb2NrIHRyYWNraW5nIGJ5IGRlZmF1bHQgdG8gYXZvaWQgbWFudWFsXHJcbiAgICAvLyBpbnZvY2F0aW9uIGludGVyZmVyaW5nIHdpdGggdGVtcGxhdGUtYmFzZWQgYmxvY2sgdHJhY2tpbmcsIGJ1dCBpblxyXG4gICAgLy8gYHJlbmRlclNsb3RgIHdlIGNhbiBiZSBzdXJlIHRoYXQgaXQncyB0ZW1wbGF0ZS1iYXNlZCBzbyB3ZSBjYW4gZm9yY2VcclxuICAgIC8vIGVuYWJsZSBpdC5cclxuICAgIGlzUmVuZGVyaW5nQ29tcGlsZWRTbG90Kys7XHJcbiAgICBvcGVuQmxvY2soKTtcclxuICAgIGNvbnN0IHZhbGlkU2xvdENvbnRlbnQgPSBzbG90ICYmIGVuc3VyZVZhbGlkVk5vZGUoc2xvdChwcm9wcykpO1xyXG4gICAgY29uc3QgcmVuZGVyZWQgPSBjcmVhdGVCbG9jayhGcmFnbWVudCwgeyBrZXk6IHByb3BzLmtleSB8fCBgXyR7bmFtZX1gIH0sIHZhbGlkU2xvdENvbnRlbnQgfHwgKGZhbGxiYWNrID8gZmFsbGJhY2soKSA6IFtdKSwgdmFsaWRTbG90Q29udGVudCAmJiBzbG90cy5fID09PSAxIC8qIFNUQUJMRSAqL1xyXG4gICAgICAgID8gNjQgLyogU1RBQkxFX0ZSQUdNRU5UICovXHJcbiAgICAgICAgOiAtMiAvKiBCQUlMICovKTtcclxuICAgIGlzUmVuZGVyaW5nQ29tcGlsZWRTbG90LS07XHJcbiAgICByZXR1cm4gcmVuZGVyZWQ7XHJcbn1cclxuZnVuY3Rpb24gZW5zdXJlVmFsaWRWTm9kZSh2bm9kZXMpIHtcclxuICAgIHJldHVybiB2bm9kZXMuc29tZShjaGlsZCA9PiB7XHJcbiAgICAgICAgaWYgKCFpc1ZOb2RlKGNoaWxkKSlcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgaWYgKGNoaWxkLnR5cGUgPT09IENvbW1lbnQpXHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICBpZiAoY2hpbGQudHlwZSA9PT0gRnJhZ21lbnQgJiZcclxuICAgICAgICAgICAgIWVuc3VyZVZhbGlkVk5vZGUoY2hpbGQuY2hpbGRyZW4pKVxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9KVxyXG4gICAgICAgID8gdm5vZGVzXHJcbiAgICAgICAgOiBudWxsO1xyXG59XG5cbi8qKlxyXG4gKiBXcmFwIGEgc2xvdCBmdW5jdGlvbiB0byBtZW1vaXplIGN1cnJlbnQgcmVuZGVyaW5nIGluc3RhbmNlXHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG5mdW5jdGlvbiB3aXRoQ3R4KGZuLCBjdHggPSBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UpIHtcclxuICAgIGlmICghY3R4KVxyXG4gICAgICAgIHJldHVybiBmbjtcclxuICAgIGNvbnN0IHJlbmRlckZuV2l0aENvbnRleHQgPSAoLi4uYXJncykgPT4ge1xyXG4gICAgICAgIC8vIElmIGEgdXNlciBjYWxscyBhIGNvbXBpbGVkIHNsb3QgaW5zaWRlIGEgdGVtcGxhdGUgZXhwcmVzc2lvbiAoIzE3NDUpLCBpdFxyXG4gICAgICAgIC8vIGNhbiBtZXNzIHVwIGJsb2NrIHRyYWNraW5nLCBzbyBieSBkZWZhdWx0IHdlIG5lZWQgdG8gcHVzaCBhIG51bGwgYmxvY2sgdG9cclxuICAgICAgICAvLyBhdm9pZCB0aGF0LiBUaGlzIGlzbid0IG5lY2Vzc2FyeSBpZiByZW5kZXJpbmcgYSBjb21waWxlZCBgPHNsb3Q+YC5cclxuICAgICAgICBpZiAoIWlzUmVuZGVyaW5nQ29tcGlsZWRTbG90KSB7XHJcbiAgICAgICAgICAgIG9wZW5CbG9jayh0cnVlIC8qIG51bGwgYmxvY2sgdGhhdCBkaXNhYmxlcyB0cmFja2luZyAqLyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IG93bmVyID0gY3VycmVudFJlbmRlcmluZ0luc3RhbmNlO1xyXG4gICAgICAgIHNldEN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZShjdHgpO1xyXG4gICAgICAgIGNvbnN0IHJlcyA9IGZuKC4uLmFyZ3MpO1xyXG4gICAgICAgIHNldEN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZShvd25lcik7XHJcbiAgICAgICAgaWYgKCFpc1JlbmRlcmluZ0NvbXBpbGVkU2xvdCkge1xyXG4gICAgICAgICAgICBjbG9zZUJsb2NrKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXM7XHJcbiAgICB9O1xyXG4gICAgcmVuZGVyRm5XaXRoQ29udGV4dC5fYyA9IHRydWU7XHJcbiAgICByZXR1cm4gcmVuZGVyRm5XaXRoQ29udGV4dDtcclxufVxuXG4vLyBTRkMgc2NvcGVkIHN0eWxlIElEIG1hbmFnZW1lbnQuXHJcbmxldCBjdXJyZW50U2NvcGVJZCA9IG51bGw7XHJcbmNvbnN0IHNjb3BlSWRTdGFjayA9IFtdO1xyXG4vKipcclxuICogQHByaXZhdGVcclxuICovXHJcbmZ1bmN0aW9uIHB1c2hTY29wZUlkKGlkKSB7XHJcbiAgICBzY29wZUlkU3RhY2sucHVzaCgoY3VycmVudFNjb3BlSWQgPSBpZCkpO1xyXG59XHJcbi8qKlxyXG4gKiBAcHJpdmF0ZVxyXG4gKi9cclxuZnVuY3Rpb24gcG9wU2NvcGVJZCgpIHtcclxuICAgIHNjb3BlSWRTdGFjay5wb3AoKTtcclxuICAgIGN1cnJlbnRTY29wZUlkID0gc2NvcGVJZFN0YWNrW3Njb3BlSWRTdGFjay5sZW5ndGggLSAxXSB8fCBudWxsO1xyXG59XHJcbi8qKlxyXG4gKiBAcHJpdmF0ZVxyXG4gKi9cclxuZnVuY3Rpb24gd2l0aFNjb3BlSWQoaWQpIHtcclxuICAgIHJldHVybiAoKGZuKSA9PiB3aXRoQ3R4KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBwdXNoU2NvcGVJZChpZCk7XHJcbiAgICAgICAgY29uc3QgcmVzID0gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxuICAgICAgICBwb3BTY29wZUlkKCk7XHJcbiAgICAgICAgcmV0dXJuIHJlcztcclxuICAgIH0pKTtcclxufVxuXG5mdW5jdGlvbiBpbml0UHJvcHMoaW5zdGFuY2UsIHJhd1Byb3BzLCBpc1N0YXRlZnVsLCAvLyByZXN1bHQgb2YgYml0d2lzZSBmbGFnIGNvbXBhcmlzb25cclxuaXNTU1IgPSBmYWxzZSkge1xyXG4gICAgY29uc3QgcHJvcHMgPSB7fTtcclxuICAgIGNvbnN0IGF0dHJzID0ge307XHJcbiAgICBkZWYoYXR0cnMsIEludGVybmFsT2JqZWN0S2V5LCAxKTtcclxuICAgIHNldEZ1bGxQcm9wcyhpbnN0YW5jZSwgcmF3UHJvcHMsIHByb3BzLCBhdHRycyk7XHJcbiAgICAvLyB2YWxpZGF0aW9uXHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgdmFsaWRhdGVQcm9wcyhwcm9wcywgaW5zdGFuY2UpO1xyXG4gICAgfVxyXG4gICAgaWYgKGlzU3RhdGVmdWwpIHtcclxuICAgICAgICAvLyBzdGF0ZWZ1bFxyXG4gICAgICAgIGluc3RhbmNlLnByb3BzID0gaXNTU1IgPyBwcm9wcyA6IHNoYWxsb3dSZWFjdGl2ZShwcm9wcyk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBpZiAoIWluc3RhbmNlLnR5cGUucHJvcHMpIHtcclxuICAgICAgICAgICAgLy8gZnVuY3Rpb25hbCB3LyBvcHRpb25hbCBwcm9wcywgcHJvcHMgPT09IGF0dHJzXHJcbiAgICAgICAgICAgIGluc3RhbmNlLnByb3BzID0gYXR0cnM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBmdW5jdGlvbmFsIHcvIGRlY2xhcmVkIHByb3BzXHJcbiAgICAgICAgICAgIGluc3RhbmNlLnByb3BzID0gcHJvcHM7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaW5zdGFuY2UuYXR0cnMgPSBhdHRycztcclxufVxyXG5mdW5jdGlvbiB1cGRhdGVQcm9wcyhpbnN0YW5jZSwgcmF3UHJvcHMsIHJhd1ByZXZQcm9wcywgb3B0aW1pemVkKSB7XHJcbiAgICBjb25zdCB7IHByb3BzLCBhdHRycywgdm5vZGU6IHsgcGF0Y2hGbGFnIH0gfSA9IGluc3RhbmNlO1xyXG4gICAgY29uc3QgcmF3Q3VycmVudFByb3BzID0gdG9SYXcocHJvcHMpO1xyXG4gICAgY29uc3QgW29wdGlvbnNdID0gaW5zdGFuY2UucHJvcHNPcHRpb25zO1xyXG4gICAgaWYgKFxyXG4gICAgLy8gYWx3YXlzIGZvcmNlIGZ1bGwgZGlmZiBpbiBkZXZcclxuICAgIC8vIC0gIzE5NDIgaWYgaG1yIGlzIGVuYWJsZWQgd2l0aCBzZmMgY29tcG9uZW50XHJcbiAgICAvLyAtIHZpdGUjODcyIG5vbi1zZmMgY29tcG9uZW50IHVzZWQgYnkgc2ZjIGNvbXBvbmVudFxyXG4gICAgISgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiZcclxuICAgICAgICAoaW5zdGFuY2UudHlwZS5fX2htcklkIHx8XHJcbiAgICAgICAgICAgIChpbnN0YW5jZS5wYXJlbnQgJiYgaW5zdGFuY2UucGFyZW50LnR5cGUuX19obXJJZCkpKSAmJlxyXG4gICAgICAgIChvcHRpbWl6ZWQgfHwgcGF0Y2hGbGFnID4gMCkgJiZcclxuICAgICAgICAhKHBhdGNoRmxhZyAmIDE2IC8qIEZVTExfUFJPUFMgKi8pKSB7XHJcbiAgICAgICAgaWYgKHBhdGNoRmxhZyAmIDggLyogUFJPUFMgKi8pIHtcclxuICAgICAgICAgICAgLy8gQ29tcGlsZXItZ2VuZXJhdGVkIHByb3BzICYgbm8ga2V5cyBjaGFuZ2UsIGp1c3Qgc2V0IHRoZSB1cGRhdGVkXHJcbiAgICAgICAgICAgIC8vIHRoZSBwcm9wcy5cclxuICAgICAgICAgICAgY29uc3QgcHJvcHNUb1VwZGF0ZSA9IGluc3RhbmNlLnZub2RlLmR5bmFtaWNQcm9wcztcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcm9wc1RvVXBkYXRlLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBrZXkgPSBwcm9wc1RvVXBkYXRlW2ldO1xyXG4gICAgICAgICAgICAgICAgLy8gUFJPUFMgZmxhZyBndWFyYW50ZWVzIHJhd1Byb3BzIHRvIGJlIG5vbi1udWxsXHJcbiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHJhd1Byb3BzW2tleV07XHJcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucykge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGF0dHIgLyBwcm9wcyBzZXBhcmF0aW9uIHdhcyBkb25lIG9uIGluaXQgYW5kIHdpbGwgYmUgY29uc2lzdGVudFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGluIHRoaXMgY29kZSBwYXRoLCBzbyBqdXN0IGNoZWNrIGlmIGF0dHJzIGhhdmUgaXQuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGhhc093bihhdHRycywga2V5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyc1trZXldID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjYW1lbGl6ZWRLZXkgPSBjYW1lbGl6ZShrZXkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9wc1tjYW1lbGl6ZWRLZXldID0gcmVzb2x2ZVByb3BWYWx1ZShvcHRpb25zLCByYXdDdXJyZW50UHJvcHMsIGNhbWVsaXplZEtleSwgdmFsdWUsIGluc3RhbmNlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhdHRyc1trZXldID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICAvLyBmdWxsIHByb3BzIHVwZGF0ZS5cclxuICAgICAgICBzZXRGdWxsUHJvcHMoaW5zdGFuY2UsIHJhd1Byb3BzLCBwcm9wcywgYXR0cnMpO1xyXG4gICAgICAgIC8vIGluIGNhc2Ugb2YgZHluYW1pYyBwcm9wcywgY2hlY2sgaWYgd2UgbmVlZCB0byBkZWxldGUga2V5cyBmcm9tXHJcbiAgICAgICAgLy8gdGhlIHByb3BzIG9iamVjdFxyXG4gICAgICAgIGxldCBrZWJhYktleTtcclxuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiByYXdDdXJyZW50UHJvcHMpIHtcclxuICAgICAgICAgICAgaWYgKCFyYXdQcm9wcyB8fFxyXG4gICAgICAgICAgICAgICAgLy8gZm9yIGNhbWVsQ2FzZVxyXG4gICAgICAgICAgICAgICAgKCFoYXNPd24ocmF3UHJvcHMsIGtleSkgJiZcclxuICAgICAgICAgICAgICAgICAgICAvLyBpdCdzIHBvc3NpYmxlIHRoZSBvcmlnaW5hbCBwcm9wcyB3YXMgcGFzc2VkIGluIGFzIGtlYmFiLWNhc2VcclxuICAgICAgICAgICAgICAgICAgICAvLyBhbmQgY29udmVydGVkIHRvIGNhbWVsQ2FzZSAoIzk1NSlcclxuICAgICAgICAgICAgICAgICAgICAoKGtlYmFiS2V5ID0gaHlwaGVuYXRlKGtleSkpID09PSBrZXkgfHwgIWhhc093bihyYXdQcm9wcywga2ViYWJLZXkpKSkpIHtcclxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJhd1ByZXZQcm9wcyAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBmb3IgY2FtZWxDYXNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIChyYXdQcmV2UHJvcHNba2V5XSAhPT0gdW5kZWZpbmVkIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBmb3Iga2ViYWItY2FzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmF3UHJldlByb3BzW2tlYmFiS2V5XSAhPT0gdW5kZWZpbmVkKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9wc1trZXldID0gcmVzb2x2ZVByb3BWYWx1ZShvcHRpb25zLCByYXdQcm9wcyB8fCBFTVBUWV9PQkosIGtleSwgdW5kZWZpbmVkLCBpbnN0YW5jZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHByb3BzW2tleV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gaW4gdGhlIGNhc2Ugb2YgZnVuY3Rpb25hbCBjb21wb25lbnQgdy9vIHByb3BzIGRlY2xhcmF0aW9uLCBwcm9wcyBhbmRcclxuICAgICAgICAvLyBhdHRycyBwb2ludCB0byB0aGUgc2FtZSBvYmplY3Qgc28gaXQgc2hvdWxkIGFscmVhZHkgaGF2ZSBiZWVuIHVwZGF0ZWQuXHJcbiAgICAgICAgaWYgKGF0dHJzICE9PSByYXdDdXJyZW50UHJvcHMpIHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gYXR0cnMpIHtcclxuICAgICAgICAgICAgICAgIGlmICghcmF3UHJvcHMgfHwgIWhhc093bihyYXdQcm9wcywga2V5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBhdHRyc1trZXldO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gdHJpZ2dlciB1cGRhdGVzIGZvciAkYXR0cnMgaW4gY2FzZSBpdCdzIHVzZWQgaW4gY29tcG9uZW50IHNsb3RzXHJcbiAgICB0cmlnZ2VyKGluc3RhbmNlLCBcInNldFwiIC8qIFNFVCAqLywgJyRhdHRycycpO1xyXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiByYXdQcm9wcykge1xyXG4gICAgICAgIHZhbGlkYXRlUHJvcHMocHJvcHMsIGluc3RhbmNlKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBzZXRGdWxsUHJvcHMoaW5zdGFuY2UsIHJhd1Byb3BzLCBwcm9wcywgYXR0cnMpIHtcclxuICAgIGNvbnN0IFtvcHRpb25zLCBuZWVkQ2FzdEtleXNdID0gaW5zdGFuY2UucHJvcHNPcHRpb25zO1xyXG4gICAgaWYgKHJhd1Byb3BzKSB7XHJcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gcmF3UHJvcHMpIHtcclxuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSByYXdQcm9wc1trZXldO1xyXG4gICAgICAgICAgICAvLyBrZXksIHJlZiBhcmUgcmVzZXJ2ZWQgYW5kIG5ldmVyIHBhc3NlZCBkb3duXHJcbiAgICAgICAgICAgIGlmIChpc1Jlc2VydmVkUHJvcChrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBwcm9wIG9wdGlvbiBuYW1lcyBhcmUgY2FtZWxpemVkIGR1cmluZyBub3JtYWxpemF0aW9uLCBzbyB0byBzdXBwb3J0XHJcbiAgICAgICAgICAgIC8vIGtlYmFiIC0+IGNhbWVsIGNvbnZlcnNpb24gaGVyZSB3ZSBuZWVkIHRvIGNhbWVsaXplIHRoZSBrZXkuXHJcbiAgICAgICAgICAgIGxldCBjYW1lbEtleTtcclxuICAgICAgICAgICAgaWYgKG9wdGlvbnMgJiYgaGFzT3duKG9wdGlvbnMsIChjYW1lbEtleSA9IGNhbWVsaXplKGtleSkpKSkge1xyXG4gICAgICAgICAgICAgICAgcHJvcHNbY2FtZWxLZXldID0gdmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoIWlzRW1pdExpc3RlbmVyKGluc3RhbmNlLmVtaXRzT3B0aW9ucywga2V5KSkge1xyXG4gICAgICAgICAgICAgICAgLy8gQW55IG5vbi1kZWNsYXJlZCAoZWl0aGVyIGFzIGEgcHJvcCBvciBhbiBlbWl0dGVkIGV2ZW50KSBwcm9wcyBhcmUgcHV0XHJcbiAgICAgICAgICAgICAgICAvLyBpbnRvIGEgc2VwYXJhdGUgYGF0dHJzYCBvYmplY3QgZm9yIHNwcmVhZGluZy4gTWFrZSBzdXJlIHRvIHByZXNlcnZlXHJcbiAgICAgICAgICAgICAgICAvLyBvcmlnaW5hbCBrZXkgY2FzaW5nXHJcbiAgICAgICAgICAgICAgICBhdHRyc1trZXldID0gdmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAobmVlZENhc3RLZXlzKSB7XHJcbiAgICAgICAgY29uc3QgcmF3Q3VycmVudFByb3BzID0gdG9SYXcocHJvcHMpO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbmVlZENhc3RLZXlzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGtleSA9IG5lZWRDYXN0S2V5c1tpXTtcclxuICAgICAgICAgICAgcHJvcHNba2V5XSA9IHJlc29sdmVQcm9wVmFsdWUob3B0aW9ucywgcmF3Q3VycmVudFByb3BzLCBrZXksIHJhd0N1cnJlbnRQcm9wc1trZXldLCBpbnN0YW5jZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIHJlc29sdmVQcm9wVmFsdWUob3B0aW9ucywgcHJvcHMsIGtleSwgdmFsdWUsIGluc3RhbmNlKSB7XHJcbiAgICBjb25zdCBvcHQgPSBvcHRpb25zW2tleV07XHJcbiAgICBpZiAob3B0ICE9IG51bGwpIHtcclxuICAgICAgICBjb25zdCBoYXNEZWZhdWx0ID0gaGFzT3duKG9wdCwgJ2RlZmF1bHQnKTtcclxuICAgICAgICAvLyBkZWZhdWx0IHZhbHVlc1xyXG4gICAgICAgIGlmIChoYXNEZWZhdWx0ICYmIHZhbHVlID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgY29uc3QgZGVmYXVsdFZhbHVlID0gb3B0LmRlZmF1bHQ7XHJcbiAgICAgICAgICAgIGlmIChvcHQudHlwZSAhPT0gRnVuY3Rpb24gJiYgaXNGdW5jdGlvbihkZWZhdWx0VmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICBzZXRDdXJyZW50SW5zdGFuY2UoaW5zdGFuY2UpO1xyXG4gICAgICAgICAgICAgICAgdmFsdWUgPSBkZWZhdWx0VmFsdWUocHJvcHMpO1xyXG4gICAgICAgICAgICAgICAgc2V0Q3VycmVudEluc3RhbmNlKG51bGwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdmFsdWUgPSBkZWZhdWx0VmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gYm9vbGVhbiBjYXN0aW5nXHJcbiAgICAgICAgaWYgKG9wdFswIC8qIHNob3VsZENhc3QgKi9dKSB7XHJcbiAgICAgICAgICAgIGlmICghaGFzT3duKHByb3BzLCBrZXkpICYmICFoYXNEZWZhdWx0KSB7XHJcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKG9wdFsxIC8qIHNob3VsZENhc3RUcnVlICovXSAmJlxyXG4gICAgICAgICAgICAgICAgKHZhbHVlID09PSAnJyB8fCB2YWx1ZSA9PT0gaHlwaGVuYXRlKGtleSkpKSB7XHJcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdmFsdWU7XHJcbn1cclxuZnVuY3Rpb24gbm9ybWFsaXplUHJvcHNPcHRpb25zKGNvbXAsIGFwcENvbnRleHQsIGFzTWl4aW4gPSBmYWxzZSkge1xyXG4gICAgaWYgKCFhcHBDb250ZXh0LmRlb3B0ICYmIGNvbXAuX19wcm9wcykge1xyXG4gICAgICAgIHJldHVybiBjb21wLl9fcHJvcHM7XHJcbiAgICB9XHJcbiAgICBjb25zdCByYXcgPSBjb21wLnByb3BzO1xyXG4gICAgY29uc3Qgbm9ybWFsaXplZCA9IHt9O1xyXG4gICAgY29uc3QgbmVlZENhc3RLZXlzID0gW107XHJcbiAgICAvLyBhcHBseSBtaXhpbi9leHRlbmRzIHByb3BzXHJcbiAgICBsZXQgaGFzRXh0ZW5kcyA9IGZhbHNlO1xyXG4gICAgaWYgKF9fVlVFX09QVElPTlNfQVBJX18gJiYgIWlzRnVuY3Rpb24oY29tcCkpIHtcclxuICAgICAgICBjb25zdCBleHRlbmRQcm9wcyA9IChyYXcpID0+IHtcclxuICAgICAgICAgICAgaGFzRXh0ZW5kcyA9IHRydWU7XHJcbiAgICAgICAgICAgIGNvbnN0IFtwcm9wcywga2V5c10gPSBub3JtYWxpemVQcm9wc09wdGlvbnMocmF3LCBhcHBDb250ZXh0LCB0cnVlKTtcclxuICAgICAgICAgICAgZXh0ZW5kKG5vcm1hbGl6ZWQsIHByb3BzKTtcclxuICAgICAgICAgICAgaWYgKGtleXMpXHJcbiAgICAgICAgICAgICAgICBuZWVkQ2FzdEtleXMucHVzaCguLi5rZXlzKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIGlmICghYXNNaXhpbiAmJiBhcHBDb250ZXh0Lm1peGlucy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgYXBwQ29udGV4dC5taXhpbnMuZm9yRWFjaChleHRlbmRQcm9wcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChjb21wLmV4dGVuZHMpIHtcclxuICAgICAgICAgICAgZXh0ZW5kUHJvcHMoY29tcC5leHRlbmRzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGNvbXAubWl4aW5zKSB7XHJcbiAgICAgICAgICAgIGNvbXAubWl4aW5zLmZvckVhY2goZXh0ZW5kUHJvcHMpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmICghcmF3ICYmICFoYXNFeHRlbmRzKSB7XHJcbiAgICAgICAgcmV0dXJuIChjb21wLl9fcHJvcHMgPSBFTVBUWV9BUlIpO1xyXG4gICAgfVxyXG4gICAgaWYgKGlzQXJyYXkocmF3KSkge1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmF3Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIWlzU3RyaW5nKHJhd1tpXSkpIHtcclxuICAgICAgICAgICAgICAgIHdhcm4oYHByb3BzIG11c3QgYmUgc3RyaW5ncyB3aGVuIHVzaW5nIGFycmF5IHN5bnRheC5gLCByYXdbaV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IG5vcm1hbGl6ZWRLZXkgPSBjYW1lbGl6ZShyYXdbaV0pO1xyXG4gICAgICAgICAgICBpZiAodmFsaWRhdGVQcm9wTmFtZShub3JtYWxpemVkS2V5KSkge1xyXG4gICAgICAgICAgICAgICAgbm9ybWFsaXplZFtub3JtYWxpemVkS2V5XSA9IEVNUFRZX09CSjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2UgaWYgKHJhdykge1xyXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIWlzT2JqZWN0KHJhdykpIHtcclxuICAgICAgICAgICAgd2FybihgaW52YWxpZCBwcm9wcyBvcHRpb25zYCwgcmF3KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gcmF3KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG5vcm1hbGl6ZWRLZXkgPSBjYW1lbGl6ZShrZXkpO1xyXG4gICAgICAgICAgICBpZiAodmFsaWRhdGVQcm9wTmFtZShub3JtYWxpemVkS2V5KSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgb3B0ID0gcmF3W2tleV07XHJcbiAgICAgICAgICAgICAgICBjb25zdCBwcm9wID0gKG5vcm1hbGl6ZWRbbm9ybWFsaXplZEtleV0gPVxyXG4gICAgICAgICAgICAgICAgICAgIGlzQXJyYXkob3B0KSB8fCBpc0Z1bmN0aW9uKG9wdCkgPyB7IHR5cGU6IG9wdCB9IDogb3B0KTtcclxuICAgICAgICAgICAgICAgIGlmIChwcm9wKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYm9vbGVhbkluZGV4ID0gZ2V0VHlwZUluZGV4KEJvb2xlYW4sIHByb3AudHlwZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3RyaW5nSW5kZXggPSBnZXRUeXBlSW5kZXgoU3RyaW5nLCBwcm9wLnR5cGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHByb3BbMCAvKiBzaG91bGRDYXN0ICovXSA9IGJvb2xlYW5JbmRleCA+IC0xO1xyXG4gICAgICAgICAgICAgICAgICAgIHByb3BbMSAvKiBzaG91bGRDYXN0VHJ1ZSAqL10gPVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHJpbmdJbmRleCA8IDAgfHwgYm9vbGVhbkluZGV4IDwgc3RyaW5nSW5kZXg7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgdGhlIHByb3AgbmVlZHMgYm9vbGVhbiBjYXN0aW5nIG9yIGRlZmF1bHQgdmFsdWVcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYm9vbGVhbkluZGV4ID4gLTEgfHwgaGFzT3duKHByb3AsICdkZWZhdWx0JykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmVlZENhc3RLZXlzLnB1c2gobm9ybWFsaXplZEtleSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIChjb21wLl9fcHJvcHMgPSBbbm9ybWFsaXplZCwgbmVlZENhc3RLZXlzXSk7XHJcbn1cclxuZnVuY3Rpb24gdmFsaWRhdGVQcm9wTmFtZShrZXkpIHtcclxuICAgIGlmIChrZXlbMF0gIT09ICckJykge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgd2FybihgSW52YWxpZCBwcm9wIG5hbWU6IFwiJHtrZXl9XCIgaXMgYSByZXNlcnZlZCBwcm9wZXJ0eS5gKTtcclxuICAgIH1cclxuICAgIHJldHVybiBmYWxzZTtcclxufVxyXG4vLyB1c2UgZnVuY3Rpb24gc3RyaW5nIG5hbWUgdG8gY2hlY2sgdHlwZSBjb25zdHJ1Y3RvcnNcclxuLy8gc28gdGhhdCBpdCB3b3JrcyBhY3Jvc3Mgdm1zIC8gaWZyYW1lcy5cclxuZnVuY3Rpb24gZ2V0VHlwZShjdG9yKSB7XHJcbiAgICBjb25zdCBtYXRjaCA9IGN0b3IgJiYgY3Rvci50b1N0cmluZygpLm1hdGNoKC9eXFxzKmZ1bmN0aW9uIChcXHcrKS8pO1xyXG4gICAgcmV0dXJuIG1hdGNoID8gbWF0Y2hbMV0gOiAnJztcclxufVxyXG5mdW5jdGlvbiBpc1NhbWVUeXBlKGEsIGIpIHtcclxuICAgIHJldHVybiBnZXRUeXBlKGEpID09PSBnZXRUeXBlKGIpO1xyXG59XHJcbmZ1bmN0aW9uIGdldFR5cGVJbmRleCh0eXBlLCBleHBlY3RlZFR5cGVzKSB7XHJcbiAgICBpZiAoaXNBcnJheShleHBlY3RlZFR5cGVzKSkge1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBleHBlY3RlZFR5cGVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChpc1NhbWVUeXBlKGV4cGVjdGVkVHlwZXNbaV0sIHR5cGUpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGlzRnVuY3Rpb24oZXhwZWN0ZWRUeXBlcykpIHtcclxuICAgICAgICByZXR1cm4gaXNTYW1lVHlwZShleHBlY3RlZFR5cGVzLCB0eXBlKSA/IDAgOiAtMTtcclxuICAgIH1cclxuICAgIHJldHVybiAtMTtcclxufVxyXG4vKipcclxuICogZGV2IG9ubHlcclxuICovXHJcbmZ1bmN0aW9uIHZhbGlkYXRlUHJvcHMocHJvcHMsIGluc3RhbmNlKSB7XHJcbiAgICBjb25zdCByYXdWYWx1ZXMgPSB0b1Jhdyhwcm9wcyk7XHJcbiAgICBjb25zdCBvcHRpb25zID0gaW5zdGFuY2UucHJvcHNPcHRpb25zWzBdO1xyXG4gICAgZm9yIChjb25zdCBrZXkgaW4gb3B0aW9ucykge1xyXG4gICAgICAgIGxldCBvcHQgPSBvcHRpb25zW2tleV07XHJcbiAgICAgICAgaWYgKG9wdCA9PSBudWxsKVxyXG4gICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICB2YWxpZGF0ZVByb3Aoa2V5LCByYXdWYWx1ZXNba2V5XSwgb3B0LCAhaGFzT3duKHJhd1ZhbHVlcywga2V5KSk7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIGRldiBvbmx5XHJcbiAqL1xyXG5mdW5jdGlvbiB2YWxpZGF0ZVByb3AobmFtZSwgdmFsdWUsIHByb3AsIGlzQWJzZW50KSB7XHJcbiAgICBjb25zdCB7IHR5cGUsIHJlcXVpcmVkLCB2YWxpZGF0b3IgfSA9IHByb3A7XHJcbiAgICAvLyByZXF1aXJlZCFcclxuICAgIGlmIChyZXF1aXJlZCAmJiBpc0Fic2VudCkge1xyXG4gICAgICAgIHdhcm4oJ01pc3NpbmcgcmVxdWlyZWQgcHJvcDogXCInICsgbmFtZSArICdcIicpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIC8vIG1pc3NpbmcgYnV0IG9wdGlvbmFsXHJcbiAgICBpZiAodmFsdWUgPT0gbnVsbCAmJiAhcHJvcC5yZXF1aXJlZCkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIC8vIHR5cGUgY2hlY2tcclxuICAgIGlmICh0eXBlICE9IG51bGwgJiYgdHlwZSAhPT0gdHJ1ZSkge1xyXG4gICAgICAgIGxldCBpc1ZhbGlkID0gZmFsc2U7XHJcbiAgICAgICAgY29uc3QgdHlwZXMgPSBpc0FycmF5KHR5cGUpID8gdHlwZSA6IFt0eXBlXTtcclxuICAgICAgICBjb25zdCBleHBlY3RlZFR5cGVzID0gW107XHJcbiAgICAgICAgLy8gdmFsdWUgaXMgdmFsaWQgYXMgbG9uZyBhcyBvbmUgb2YgdGhlIHNwZWNpZmllZCB0eXBlcyBtYXRjaFxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdHlwZXMubGVuZ3RoICYmICFpc1ZhbGlkOyBpKyspIHtcclxuICAgICAgICAgICAgY29uc3QgeyB2YWxpZCwgZXhwZWN0ZWRUeXBlIH0gPSBhc3NlcnRUeXBlKHZhbHVlLCB0eXBlc1tpXSk7XHJcbiAgICAgICAgICAgIGV4cGVjdGVkVHlwZXMucHVzaChleHBlY3RlZFR5cGUgfHwgJycpO1xyXG4gICAgICAgICAgICBpc1ZhbGlkID0gdmFsaWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghaXNWYWxpZCkge1xyXG4gICAgICAgICAgICB3YXJuKGdldEludmFsaWRUeXBlTWVzc2FnZShuYW1lLCB2YWx1ZSwgZXhwZWN0ZWRUeXBlcykpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gY3VzdG9tIHZhbGlkYXRvclxyXG4gICAgaWYgKHZhbGlkYXRvciAmJiAhdmFsaWRhdG9yKHZhbHVlKSkge1xyXG4gICAgICAgIHdhcm4oJ0ludmFsaWQgcHJvcDogY3VzdG9tIHZhbGlkYXRvciBjaGVjayBmYWlsZWQgZm9yIHByb3AgXCInICsgbmFtZSArICdcIi4nKTtcclxuICAgIH1cclxufVxyXG5jb25zdCBpc1NpbXBsZVR5cGUgPSAvKiNfX1BVUkVfXyovIG1ha2VNYXAoJ1N0cmluZyxOdW1iZXIsQm9vbGVhbixGdW5jdGlvbixTeW1ib2wnKTtcclxuLyoqXHJcbiAqIGRldiBvbmx5XHJcbiAqL1xyXG5mdW5jdGlvbiBhc3NlcnRUeXBlKHZhbHVlLCB0eXBlKSB7XHJcbiAgICBsZXQgdmFsaWQ7XHJcbiAgICBjb25zdCBleHBlY3RlZFR5cGUgPSBnZXRUeXBlKHR5cGUpO1xyXG4gICAgaWYgKGlzU2ltcGxlVHlwZShleHBlY3RlZFR5cGUpKSB7XHJcbiAgICAgICAgY29uc3QgdCA9IHR5cGVvZiB2YWx1ZTtcclxuICAgICAgICB2YWxpZCA9IHQgPT09IGV4cGVjdGVkVHlwZS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgIC8vIGZvciBwcmltaXRpdmUgd3JhcHBlciBvYmplY3RzXHJcbiAgICAgICAgaWYgKCF2YWxpZCAmJiB0ID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgICAgICB2YWxpZCA9IHZhbHVlIGluc3RhbmNlb2YgdHlwZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChleHBlY3RlZFR5cGUgPT09ICdPYmplY3QnKSB7XHJcbiAgICAgICAgdmFsaWQgPSBpc09iamVjdCh2YWx1ZSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChleHBlY3RlZFR5cGUgPT09ICdBcnJheScpIHtcclxuICAgICAgICB2YWxpZCA9IGlzQXJyYXkodmFsdWUpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgdmFsaWQgPSB2YWx1ZSBpbnN0YW5jZW9mIHR5cGU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHZhbGlkLFxyXG4gICAgICAgIGV4cGVjdGVkVHlwZVxyXG4gICAgfTtcclxufVxyXG4vKipcclxuICogZGV2IG9ubHlcclxuICovXHJcbmZ1bmN0aW9uIGdldEludmFsaWRUeXBlTWVzc2FnZShuYW1lLCB2YWx1ZSwgZXhwZWN0ZWRUeXBlcykge1xyXG4gICAgbGV0IG1lc3NhZ2UgPSBgSW52YWxpZCBwcm9wOiB0eXBlIGNoZWNrIGZhaWxlZCBmb3IgcHJvcCBcIiR7bmFtZX1cIi5gICtcclxuICAgICAgICBgIEV4cGVjdGVkICR7ZXhwZWN0ZWRUeXBlcy5tYXAoY2FwaXRhbGl6ZSkuam9pbignLCAnKX1gO1xyXG4gICAgY29uc3QgZXhwZWN0ZWRUeXBlID0gZXhwZWN0ZWRUeXBlc1swXTtcclxuICAgIGNvbnN0IHJlY2VpdmVkVHlwZSA9IHRvUmF3VHlwZSh2YWx1ZSk7XHJcbiAgICBjb25zdCBleHBlY3RlZFZhbHVlID0gc3R5bGVWYWx1ZSh2YWx1ZSwgZXhwZWN0ZWRUeXBlKTtcclxuICAgIGNvbnN0IHJlY2VpdmVkVmFsdWUgPSBzdHlsZVZhbHVlKHZhbHVlLCByZWNlaXZlZFR5cGUpO1xyXG4gICAgLy8gY2hlY2sgaWYgd2UgbmVlZCB0byBzcGVjaWZ5IGV4cGVjdGVkIHZhbHVlXHJcbiAgICBpZiAoZXhwZWN0ZWRUeXBlcy5sZW5ndGggPT09IDEgJiZcclxuICAgICAgICBpc0V4cGxpY2FibGUoZXhwZWN0ZWRUeXBlKSAmJlxyXG4gICAgICAgICFpc0Jvb2xlYW4oZXhwZWN0ZWRUeXBlLCByZWNlaXZlZFR5cGUpKSB7XHJcbiAgICAgICAgbWVzc2FnZSArPSBgIHdpdGggdmFsdWUgJHtleHBlY3RlZFZhbHVlfWA7XHJcbiAgICB9XHJcbiAgICBtZXNzYWdlICs9IGAsIGdvdCAke3JlY2VpdmVkVHlwZX0gYDtcclxuICAgIC8vIGNoZWNrIGlmIHdlIG5lZWQgdG8gc3BlY2lmeSByZWNlaXZlZCB2YWx1ZVxyXG4gICAgaWYgKGlzRXhwbGljYWJsZShyZWNlaXZlZFR5cGUpKSB7XHJcbiAgICAgICAgbWVzc2FnZSArPSBgd2l0aCB2YWx1ZSAke3JlY2VpdmVkVmFsdWV9LmA7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbWVzc2FnZTtcclxufVxyXG4vKipcclxuICogZGV2IG9ubHlcclxuICovXHJcbmZ1bmN0aW9uIHN0eWxlVmFsdWUodmFsdWUsIHR5cGUpIHtcclxuICAgIGlmICh0eXBlID09PSAnU3RyaW5nJykge1xyXG4gICAgICAgIHJldHVybiBgXCIke3ZhbHVlfVwiYDtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKHR5cGUgPT09ICdOdW1iZXInKSB7XHJcbiAgICAgICAgcmV0dXJuIGAke051bWJlcih2YWx1ZSl9YDtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBgJHt2YWx1ZX1gO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBkZXYgb25seVxyXG4gKi9cclxuZnVuY3Rpb24gaXNFeHBsaWNhYmxlKHR5cGUpIHtcclxuICAgIGNvbnN0IGV4cGxpY2l0VHlwZXMgPSBbJ3N0cmluZycsICdudW1iZXInLCAnYm9vbGVhbiddO1xyXG4gICAgcmV0dXJuIGV4cGxpY2l0VHlwZXMuc29tZShlbGVtID0+IHR5cGUudG9Mb3dlckNhc2UoKSA9PT0gZWxlbSk7XHJcbn1cclxuLyoqXHJcbiAqIGRldiBvbmx5XHJcbiAqL1xyXG5mdW5jdGlvbiBpc0Jvb2xlYW4oLi4uYXJncykge1xyXG4gICAgcmV0dXJuIGFyZ3Muc29tZShlbGVtID0+IGVsZW0udG9Mb3dlckNhc2UoKSA9PT0gJ2Jvb2xlYW4nKTtcclxufVxuXG5mdW5jdGlvbiBpbmplY3RIb29rKHR5cGUsIGhvb2ssIHRhcmdldCA9IGN1cnJlbnRJbnN0YW5jZSwgcHJlcGVuZCA9IGZhbHNlKSB7XHJcbiAgICBpZiAodGFyZ2V0KSB7XHJcbiAgICAgICAgY29uc3QgaG9va3MgPSB0YXJnZXRbdHlwZV0gfHwgKHRhcmdldFt0eXBlXSA9IFtdKTtcclxuICAgICAgICAvLyBjYWNoZSB0aGUgZXJyb3IgaGFuZGxpbmcgd3JhcHBlciBmb3IgaW5qZWN0ZWQgaG9va3Mgc28gdGhlIHNhbWUgaG9va1xyXG4gICAgICAgIC8vIGNhbiBiZSBwcm9wZXJseSBkZWR1cGVkIGJ5IHRoZSBzY2hlZHVsZXIuIFwiX193ZWhcIiBzdGFuZHMgZm9yIFwid2l0aCBlcnJvclxyXG4gICAgICAgIC8vIGhhbmRsaW5nXCIuXHJcbiAgICAgICAgY29uc3Qgd3JhcHBlZEhvb2sgPSBob29rLl9fd2VoIHx8XHJcbiAgICAgICAgICAgIChob29rLl9fd2VoID0gKC4uLmFyZ3MpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICh0YXJnZXQuaXNVbm1vdW50ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBkaXNhYmxlIHRyYWNraW5nIGluc2lkZSBhbGwgbGlmZWN5Y2xlIGhvb2tzXHJcbiAgICAgICAgICAgICAgICAvLyBzaW5jZSB0aGV5IGNhbiBwb3RlbnRpYWxseSBiZSBjYWxsZWQgaW5zaWRlIGVmZmVjdHMuXHJcbiAgICAgICAgICAgICAgICBwYXVzZVRyYWNraW5nKCk7XHJcbiAgICAgICAgICAgICAgICAvLyBTZXQgY3VycmVudEluc3RhbmNlIGR1cmluZyBob29rIGludm9jYXRpb24uXHJcbiAgICAgICAgICAgICAgICAvLyBUaGlzIGFzc3VtZXMgdGhlIGhvb2sgZG9lcyBub3Qgc3luY2hyb25vdXNseSB0cmlnZ2VyIG90aGVyIGhvb2tzLCB3aGljaFxyXG4gICAgICAgICAgICAgICAgLy8gY2FuIG9ubHkgYmUgZmFsc2Ugd2hlbiB0aGUgdXNlciBkb2VzIHNvbWV0aGluZyByZWFsbHkgZnVua3kuXHJcbiAgICAgICAgICAgICAgICBzZXRDdXJyZW50SW5zdGFuY2UodGFyZ2V0KTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJlcyA9IGNhbGxXaXRoQXN5bmNFcnJvckhhbmRsaW5nKGhvb2ssIHRhcmdldCwgdHlwZSwgYXJncyk7XHJcbiAgICAgICAgICAgICAgICBzZXRDdXJyZW50SW5zdGFuY2UobnVsbCk7XHJcbiAgICAgICAgICAgICAgICByZXNldFRyYWNraW5nKCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICBpZiAocHJlcGVuZCkge1xyXG4gICAgICAgICAgICBob29rcy51bnNoaWZ0KHdyYXBwZWRIb29rKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGhvb2tzLnB1c2god3JhcHBlZEhvb2spO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gd3JhcHBlZEhvb2s7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICBjb25zdCBhcGlOYW1lID0gdG9IYW5kbGVyS2V5KEVycm9yVHlwZVN0cmluZ3NbdHlwZV0ucmVwbGFjZSgvIGhvb2skLywgJycpKTtcclxuICAgICAgICB3YXJuKGAke2FwaU5hbWV9IGlzIGNhbGxlZCB3aGVuIHRoZXJlIGlzIG5vIGFjdGl2ZSBjb21wb25lbnQgaW5zdGFuY2UgdG8gYmUgYCArXHJcbiAgICAgICAgICAgIGBhc3NvY2lhdGVkIHdpdGguIGAgK1xyXG4gICAgICAgICAgICBgTGlmZWN5Y2xlIGluamVjdGlvbiBBUElzIGNhbiBvbmx5IGJlIHVzZWQgZHVyaW5nIGV4ZWN1dGlvbiBvZiBzZXR1cCgpLmAgK1xyXG4gICAgICAgICAgICAoIGAgSWYgeW91IGFyZSB1c2luZyBhc3luYyBzZXR1cCgpLCBtYWtlIHN1cmUgdG8gcmVnaXN0ZXIgbGlmZWN5Y2xlIGAgK1xyXG4gICAgICAgICAgICAgICAgICAgIGBob29rcyBiZWZvcmUgdGhlIGZpcnN0IGF3YWl0IHN0YXRlbWVudC5gXHJcbiAgICAgICAgICAgICAgICApKTtcclxuICAgIH1cclxufVxyXG5jb25zdCBjcmVhdGVIb29rID0gKGxpZmVjeWNsZSkgPT4gKGhvb2ssIHRhcmdldCA9IGN1cnJlbnRJbnN0YW5jZSkgPT4gXHJcbi8vIHBvc3QtY3JlYXRlIGxpZmVjeWNsZSByZWdpc3RyYXRpb25zIGFyZSBub29wcyBkdXJpbmcgU1NSXHJcbiFpc0luU1NSQ29tcG9uZW50U2V0dXAgJiYgaW5qZWN0SG9vayhsaWZlY3ljbGUsIGhvb2ssIHRhcmdldCk7XHJcbmNvbnN0IG9uQmVmb3JlTW91bnQgPSBjcmVhdGVIb29rKFwiYm1cIiAvKiBCRUZPUkVfTU9VTlQgKi8pO1xyXG5jb25zdCBvbk1vdW50ZWQgPSBjcmVhdGVIb29rKFwibVwiIC8qIE1PVU5URUQgKi8pO1xyXG5jb25zdCBvbkJlZm9yZVVwZGF0ZSA9IGNyZWF0ZUhvb2soXCJidVwiIC8qIEJFRk9SRV9VUERBVEUgKi8pO1xyXG5jb25zdCBvblVwZGF0ZWQgPSBjcmVhdGVIb29rKFwidVwiIC8qIFVQREFURUQgKi8pO1xyXG5jb25zdCBvbkJlZm9yZVVubW91bnQgPSBjcmVhdGVIb29rKFwiYnVtXCIgLyogQkVGT1JFX1VOTU9VTlQgKi8pO1xyXG5jb25zdCBvblVubW91bnRlZCA9IGNyZWF0ZUhvb2soXCJ1bVwiIC8qIFVOTU9VTlRFRCAqLyk7XHJcbmNvbnN0IG9uUmVuZGVyVHJpZ2dlcmVkID0gY3JlYXRlSG9vayhcInJ0Z1wiIC8qIFJFTkRFUl9UUklHR0VSRUQgKi8pO1xyXG5jb25zdCBvblJlbmRlclRyYWNrZWQgPSBjcmVhdGVIb29rKFwicnRjXCIgLyogUkVOREVSX1RSQUNLRUQgKi8pO1xyXG5jb25zdCBvbkVycm9yQ2FwdHVyZWQgPSAoaG9vaywgdGFyZ2V0ID0gY3VycmVudEluc3RhbmNlKSA9PiB7XHJcbiAgICBpbmplY3RIb29rKFwiZWNcIiAvKiBFUlJPUl9DQVBUVVJFRCAqLywgaG9vaywgdGFyZ2V0KTtcclxufTtcblxuLy8gU2ltcGxlIGVmZmVjdC5cclxuZnVuY3Rpb24gd2F0Y2hFZmZlY3QoZWZmZWN0LCBvcHRpb25zKSB7XHJcbiAgICByZXR1cm4gZG9XYXRjaChlZmZlY3QsIG51bGwsIG9wdGlvbnMpO1xyXG59XHJcbi8vIGluaXRpYWwgdmFsdWUgZm9yIHdhdGNoZXJzIHRvIHRyaWdnZXIgb24gdW5kZWZpbmVkIGluaXRpYWwgdmFsdWVzXHJcbmNvbnN0IElOSVRJQUxfV0FUQ0hFUl9WQUxVRSA9IHt9O1xyXG4vLyBpbXBsZW1lbnRhdGlvblxyXG5mdW5jdGlvbiB3YXRjaChzb3VyY2UsIGNiLCBvcHRpb25zKSB7XHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFpc0Z1bmN0aW9uKGNiKSkge1xyXG4gICAgICAgIHdhcm4oYFxcYHdhdGNoKGZuLCBvcHRpb25zPylcXGAgc2lnbmF0dXJlIGhhcyBiZWVuIG1vdmVkIHRvIGEgc2VwYXJhdGUgQVBJLiBgICtcclxuICAgICAgICAgICAgYFVzZSBcXGB3YXRjaEVmZmVjdChmbiwgb3B0aW9ucz8pXFxgIGluc3RlYWQuIFxcYHdhdGNoXFxgIG5vdyBvbmx5IGAgK1xyXG4gICAgICAgICAgICBgc3VwcG9ydHMgXFxgd2F0Y2goc291cmNlLCBjYiwgb3B0aW9ucz8pIHNpZ25hdHVyZS5gKTtcclxuICAgIH1cclxuICAgIHJldHVybiBkb1dhdGNoKHNvdXJjZSwgY2IsIG9wdGlvbnMpO1xyXG59XHJcbmZ1bmN0aW9uIGRvV2F0Y2goc291cmNlLCBjYiwgeyBpbW1lZGlhdGUsIGRlZXAsIGZsdXNoLCBvblRyYWNrLCBvblRyaWdnZXIgfSA9IEVNUFRZX09CSiwgaW5zdGFuY2UgPSBjdXJyZW50SW5zdGFuY2UpIHtcclxuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIWNiKSB7XHJcbiAgICAgICAgaWYgKGltbWVkaWF0ZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHdhcm4oYHdhdGNoKCkgXCJpbW1lZGlhdGVcIiBvcHRpb24gaXMgb25seSByZXNwZWN0ZWQgd2hlbiB1c2luZyB0aGUgYCArXHJcbiAgICAgICAgICAgICAgICBgd2F0Y2goc291cmNlLCBjYWxsYmFjaywgb3B0aW9ucz8pIHNpZ25hdHVyZS5gKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGRlZXAgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB3YXJuKGB3YXRjaCgpIFwiZGVlcFwiIG9wdGlvbiBpcyBvbmx5IHJlc3BlY3RlZCB3aGVuIHVzaW5nIHRoZSBgICtcclxuICAgICAgICAgICAgICAgIGB3YXRjaChzb3VyY2UsIGNhbGxiYWNrLCBvcHRpb25zPykgc2lnbmF0dXJlLmApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNvbnN0IHdhcm5JbnZhbGlkU291cmNlID0gKHMpID0+IHtcclxuICAgICAgICB3YXJuKGBJbnZhbGlkIHdhdGNoIHNvdXJjZTogYCwgcywgYEEgd2F0Y2ggc291cmNlIGNhbiBvbmx5IGJlIGEgZ2V0dGVyL2VmZmVjdCBmdW5jdGlvbiwgYSByZWYsIGAgK1xyXG4gICAgICAgICAgICBgYSByZWFjdGl2ZSBvYmplY3QsIG9yIGFuIGFycmF5IG9mIHRoZXNlIHR5cGVzLmApO1xyXG4gICAgfTtcclxuICAgIGxldCBnZXR0ZXI7XHJcbiAgICBsZXQgZm9yY2VUcmlnZ2VyID0gZmFsc2U7XHJcbiAgICBpZiAoaXNSZWYoc291cmNlKSkge1xyXG4gICAgICAgIGdldHRlciA9ICgpID0+IHNvdXJjZS52YWx1ZTtcclxuICAgICAgICBmb3JjZVRyaWdnZXIgPSAhIXNvdXJjZS5fc2hhbGxvdztcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGlzUmVhY3RpdmUoc291cmNlKSkge1xyXG4gICAgICAgIGdldHRlciA9ICgpID0+IHNvdXJjZTtcclxuICAgICAgICBkZWVwID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGlzQXJyYXkoc291cmNlKSkge1xyXG4gICAgICAgIGdldHRlciA9ICgpID0+IHNvdXJjZS5tYXAocyA9PiB7XHJcbiAgICAgICAgICAgIGlmIChpc1JlZihzKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHMudmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoaXNSZWFjdGl2ZShzKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRyYXZlcnNlKHMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGlzRnVuY3Rpb24ocykpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjYWxsV2l0aEVycm9ySGFuZGxpbmcocywgaW5zdGFuY2UsIDIgLyogV0FUQ0hfR0VUVEVSICovKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiB3YXJuSW52YWxpZFNvdXJjZShzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoaXNGdW5jdGlvbihzb3VyY2UpKSB7XHJcbiAgICAgICAgaWYgKGNiKSB7XHJcbiAgICAgICAgICAgIC8vIGdldHRlciB3aXRoIGNiXHJcbiAgICAgICAgICAgIGdldHRlciA9ICgpID0+IGNhbGxXaXRoRXJyb3JIYW5kbGluZyhzb3VyY2UsIGluc3RhbmNlLCAyIC8qIFdBVENIX0dFVFRFUiAqLyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBubyBjYiAtPiBzaW1wbGUgZWZmZWN0XHJcbiAgICAgICAgICAgIGdldHRlciA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChpbnN0YW5jZSAmJiBpbnN0YW5jZS5pc1VubW91bnRlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChjbGVhbnVwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xlYW51cCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxXaXRoRXJyb3JIYW5kbGluZyhzb3VyY2UsIGluc3RhbmNlLCAzIC8qIFdBVENIX0NBTExCQUNLICovLCBbb25JbnZhbGlkYXRlXSk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgZ2V0dGVyID0gTk9PUDtcclxuICAgICAgICAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgd2FybkludmFsaWRTb3VyY2Uoc291cmNlKTtcclxuICAgIH1cclxuICAgIGlmIChjYiAmJiBkZWVwKSB7XHJcbiAgICAgICAgY29uc3QgYmFzZUdldHRlciA9IGdldHRlcjtcclxuICAgICAgICBnZXR0ZXIgPSAoKSA9PiB0cmF2ZXJzZShiYXNlR2V0dGVyKCkpO1xyXG4gICAgfVxyXG4gICAgbGV0IGNsZWFudXA7XHJcbiAgICBjb25zdCBvbkludmFsaWRhdGUgPSAoZm4pID0+IHtcclxuICAgICAgICBjbGVhbnVwID0gcnVubmVyLm9wdGlvbnMub25TdG9wID0gKCkgPT4ge1xyXG4gICAgICAgICAgICBjYWxsV2l0aEVycm9ySGFuZGxpbmcoZm4sIGluc3RhbmNlLCA0IC8qIFdBVENIX0NMRUFOVVAgKi8pO1xyXG4gICAgICAgIH07XHJcbiAgICB9O1xyXG4gICAgbGV0IG9sZFZhbHVlID0gaXNBcnJheShzb3VyY2UpID8gW10gOiBJTklUSUFMX1dBVENIRVJfVkFMVUU7XHJcbiAgICBjb25zdCBqb2IgPSAoKSA9PiB7XHJcbiAgICAgICAgaWYgKCFydW5uZXIuYWN0aXZlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGNiKSB7XHJcbiAgICAgICAgICAgIC8vIHdhdGNoKHNvdXJjZSwgY2IpXHJcbiAgICAgICAgICAgIGNvbnN0IG5ld1ZhbHVlID0gcnVubmVyKCk7XHJcbiAgICAgICAgICAgIGlmIChkZWVwIHx8IGZvcmNlVHJpZ2dlciB8fCBoYXNDaGFuZ2VkKG5ld1ZhbHVlLCBvbGRWYWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgIC8vIGNsZWFudXAgYmVmb3JlIHJ1bm5pbmcgY2IgYWdhaW5cclxuICAgICAgICAgICAgICAgIGlmIChjbGVhbnVwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xlYW51cCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2FsbFdpdGhBc3luY0Vycm9ySGFuZGxpbmcoY2IsIGluc3RhbmNlLCAzIC8qIFdBVENIX0NBTExCQUNLICovLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgbmV3VmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gcGFzcyB1bmRlZmluZWQgYXMgdGhlIG9sZCB2YWx1ZSB3aGVuIGl0J3MgY2hhbmdlZCBmb3IgdGhlIGZpcnN0IHRpbWVcclxuICAgICAgICAgICAgICAgICAgICBvbGRWYWx1ZSA9PT0gSU5JVElBTF9XQVRDSEVSX1ZBTFVFID8gdW5kZWZpbmVkIDogb2xkVmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgb25JbnZhbGlkYXRlXHJcbiAgICAgICAgICAgICAgICBdKTtcclxuICAgICAgICAgICAgICAgIG9sZFZhbHVlID0gbmV3VmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIHdhdGNoRWZmZWN0XHJcbiAgICAgICAgICAgIHJ1bm5lcigpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvLyBpbXBvcnRhbnQ6IG1hcmsgdGhlIGpvYiBhcyBhIHdhdGNoZXIgY2FsbGJhY2sgc28gdGhhdCBzY2hlZHVsZXIga25vd3NcclxuICAgIC8vIGl0IGlzIGFsbG93ZWQgdG8gc2VsZi10cmlnZ2VyICgjMTcyNylcclxuICAgIGpvYi5hbGxvd1JlY3Vyc2UgPSAhIWNiO1xyXG4gICAgbGV0IHNjaGVkdWxlcjtcclxuICAgIGlmIChmbHVzaCA9PT0gJ3N5bmMnKSB7XHJcbiAgICAgICAgc2NoZWR1bGVyID0gam9iO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoZmx1c2ggPT09ICdwb3N0Jykge1xyXG4gICAgICAgIHNjaGVkdWxlciA9ICgpID0+IHF1ZXVlUG9zdFJlbmRlckVmZmVjdChqb2IsIGluc3RhbmNlICYmIGluc3RhbmNlLnN1c3BlbnNlKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIC8vIGRlZmF1bHQ6ICdwcmUnXHJcbiAgICAgICAgc2NoZWR1bGVyID0gKCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoIWluc3RhbmNlIHx8IGluc3RhbmNlLmlzTW91bnRlZCkge1xyXG4gICAgICAgICAgICAgICAgcXVldWVQcmVGbHVzaENiKGpvYik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyB3aXRoICdwcmUnIG9wdGlvbiwgdGhlIGZpcnN0IGNhbGwgbXVzdCBoYXBwZW4gYmVmb3JlXHJcbiAgICAgICAgICAgICAgICAvLyB0aGUgY29tcG9uZW50IGlzIG1vdW50ZWQgc28gaXQgaXMgY2FsbGVkIHN5bmNocm9ub3VzbHkuXHJcbiAgICAgICAgICAgICAgICBqb2IoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICBjb25zdCBydW5uZXIgPSBlZmZlY3QoZ2V0dGVyLCB7XHJcbiAgICAgICAgbGF6eTogdHJ1ZSxcclxuICAgICAgICBvblRyYWNrLFxyXG4gICAgICAgIG9uVHJpZ2dlcixcclxuICAgICAgICBzY2hlZHVsZXJcclxuICAgIH0pO1xyXG4gICAgcmVjb3JkSW5zdGFuY2VCb3VuZEVmZmVjdChydW5uZXIsIGluc3RhbmNlKTtcclxuICAgIC8vIGluaXRpYWwgcnVuXHJcbiAgICBpZiAoY2IpIHtcclxuICAgICAgICBpZiAoaW1tZWRpYXRlKSB7XHJcbiAgICAgICAgICAgIGpvYigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgb2xkVmFsdWUgPSBydW5uZXIoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChmbHVzaCA9PT0gJ3Bvc3QnKSB7XHJcbiAgICAgICAgcXVldWVQb3N0UmVuZGVyRWZmZWN0KHJ1bm5lciwgaW5zdGFuY2UgJiYgaW5zdGFuY2Uuc3VzcGVuc2UpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgcnVubmVyKCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gKCkgPT4ge1xyXG4gICAgICAgIHN0b3AocnVubmVyKTtcclxuICAgICAgICBpZiAoaW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgcmVtb3ZlKGluc3RhbmNlLmVmZmVjdHMsIHJ1bm5lcik7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufVxyXG4vLyB0aGlzLiR3YXRjaFxyXG5mdW5jdGlvbiBpbnN0YW5jZVdhdGNoKHNvdXJjZSwgY2IsIG9wdGlvbnMpIHtcclxuICAgIGNvbnN0IHB1YmxpY1RoaXMgPSB0aGlzLnByb3h5O1xyXG4gICAgY29uc3QgZ2V0dGVyID0gaXNTdHJpbmcoc291cmNlKVxyXG4gICAgICAgID8gKCkgPT4gcHVibGljVGhpc1tzb3VyY2VdXHJcbiAgICAgICAgOiBzb3VyY2UuYmluZChwdWJsaWNUaGlzKTtcclxuICAgIHJldHVybiBkb1dhdGNoKGdldHRlciwgY2IuYmluZChwdWJsaWNUaGlzKSwgb3B0aW9ucywgdGhpcyk7XHJcbn1cclxuZnVuY3Rpb24gdHJhdmVyc2UodmFsdWUsIHNlZW4gPSBuZXcgU2V0KCkpIHtcclxuICAgIGlmICghaXNPYmplY3QodmFsdWUpIHx8IHNlZW4uaGFzKHZhbHVlKSkge1xyXG4gICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgIH1cclxuICAgIHNlZW4uYWRkKHZhbHVlKTtcclxuICAgIGlmIChpc1JlZih2YWx1ZSkpIHtcclxuICAgICAgICB0cmF2ZXJzZSh2YWx1ZS52YWx1ZSwgc2Vlbik7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChpc0FycmF5KHZhbHVlKSkge1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmFsdWUubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdHJhdmVyc2UodmFsdWVbaV0sIHNlZW4pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGlzU2V0KHZhbHVlKSB8fCBpc01hcCh2YWx1ZSkpIHtcclxuICAgICAgICB2YWx1ZS5mb3JFYWNoKCh2KSA9PiB7XHJcbiAgICAgICAgICAgIHRyYXZlcnNlKHYsIHNlZW4pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gdmFsdWUpIHtcclxuICAgICAgICAgICAgdHJhdmVyc2UodmFsdWVba2V5XSwgc2Vlbik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHZhbHVlO1xyXG59XG5cbmZ1bmN0aW9uIHVzZVRyYW5zaXRpb25TdGF0ZSgpIHtcclxuICAgIGNvbnN0IHN0YXRlID0ge1xyXG4gICAgICAgIGlzTW91bnRlZDogZmFsc2UsXHJcbiAgICAgICAgaXNMZWF2aW5nOiBmYWxzZSxcclxuICAgICAgICBpc1VubW91bnRpbmc6IGZhbHNlLFxyXG4gICAgICAgIGxlYXZpbmdWTm9kZXM6IG5ldyBNYXAoKVxyXG4gICAgfTtcclxuICAgIG9uTW91bnRlZCgoKSA9PiB7XHJcbiAgICAgICAgc3RhdGUuaXNNb3VudGVkID0gdHJ1ZTtcclxuICAgIH0pO1xyXG4gICAgb25CZWZvcmVVbm1vdW50KCgpID0+IHtcclxuICAgICAgICBzdGF0ZS5pc1VubW91bnRpbmcgPSB0cnVlO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gc3RhdGU7XHJcbn1cclxuY29uc3QgVHJhbnNpdGlvbkhvb2tWYWxpZGF0b3IgPSBbRnVuY3Rpb24sIEFycmF5XTtcclxuY29uc3QgQmFzZVRyYW5zaXRpb25JbXBsID0ge1xyXG4gICAgbmFtZTogYEJhc2VUcmFuc2l0aW9uYCxcclxuICAgIHByb3BzOiB7XHJcbiAgICAgICAgbW9kZTogU3RyaW5nLFxyXG4gICAgICAgIGFwcGVhcjogQm9vbGVhbixcclxuICAgICAgICBwZXJzaXN0ZWQ6IEJvb2xlYW4sXHJcbiAgICAgICAgLy8gZW50ZXJcclxuICAgICAgICBvbkJlZm9yZUVudGVyOiBUcmFuc2l0aW9uSG9va1ZhbGlkYXRvcixcclxuICAgICAgICBvbkVudGVyOiBUcmFuc2l0aW9uSG9va1ZhbGlkYXRvcixcclxuICAgICAgICBvbkFmdGVyRW50ZXI6IFRyYW5zaXRpb25Ib29rVmFsaWRhdG9yLFxyXG4gICAgICAgIG9uRW50ZXJDYW5jZWxsZWQ6IFRyYW5zaXRpb25Ib29rVmFsaWRhdG9yLFxyXG4gICAgICAgIC8vIGxlYXZlXHJcbiAgICAgICAgb25CZWZvcmVMZWF2ZTogVHJhbnNpdGlvbkhvb2tWYWxpZGF0b3IsXHJcbiAgICAgICAgb25MZWF2ZTogVHJhbnNpdGlvbkhvb2tWYWxpZGF0b3IsXHJcbiAgICAgICAgb25BZnRlckxlYXZlOiBUcmFuc2l0aW9uSG9va1ZhbGlkYXRvcixcclxuICAgICAgICBvbkxlYXZlQ2FuY2VsbGVkOiBUcmFuc2l0aW9uSG9va1ZhbGlkYXRvcixcclxuICAgICAgICAvLyBhcHBlYXJcclxuICAgICAgICBvbkJlZm9yZUFwcGVhcjogVHJhbnNpdGlvbkhvb2tWYWxpZGF0b3IsXHJcbiAgICAgICAgb25BcHBlYXI6IFRyYW5zaXRpb25Ib29rVmFsaWRhdG9yLFxyXG4gICAgICAgIG9uQWZ0ZXJBcHBlYXI6IFRyYW5zaXRpb25Ib29rVmFsaWRhdG9yLFxyXG4gICAgICAgIG9uQXBwZWFyQ2FuY2VsbGVkOiBUcmFuc2l0aW9uSG9va1ZhbGlkYXRvclxyXG4gICAgfSxcclxuICAgIHNldHVwKHByb3BzLCB7IHNsb3RzIH0pIHtcclxuICAgICAgICBjb25zdCBpbnN0YW5jZSA9IGdldEN1cnJlbnRJbnN0YW5jZSgpO1xyXG4gICAgICAgIGNvbnN0IHN0YXRlID0gdXNlVHJhbnNpdGlvblN0YXRlKCk7XHJcbiAgICAgICAgbGV0IHByZXZUcmFuc2l0aW9uS2V5O1xyXG4gICAgICAgIHJldHVybiAoKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkcmVuID0gc2xvdHMuZGVmYXVsdCAmJiBnZXRUcmFuc2l0aW9uUmF3Q2hpbGRyZW4oc2xvdHMuZGVmYXVsdCgpLCB0cnVlKTtcclxuICAgICAgICAgICAgaWYgKCFjaGlsZHJlbiB8fCAhY2hpbGRyZW4ubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gd2FybiBtdWx0aXBsZSBlbGVtZW50c1xyXG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIGNoaWxkcmVuLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICAgICAgICAgIHdhcm4oJzx0cmFuc2l0aW9uPiBjYW4gb25seSBiZSB1c2VkIG9uIGEgc2luZ2xlIGVsZW1lbnQgb3IgY29tcG9uZW50LiBVc2UgJyArXHJcbiAgICAgICAgICAgICAgICAgICAgJzx0cmFuc2l0aW9uLWdyb3VwPiBmb3IgbGlzdHMuJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gdGhlcmUncyBubyBuZWVkIHRvIHRyYWNrIHJlYWN0aXZpdHkgZm9yIHRoZXNlIHByb3BzIHNvIHVzZSB0aGUgcmF3XHJcbiAgICAgICAgICAgIC8vIHByb3BzIGZvciBhIGJpdCBiZXR0ZXIgcGVyZlxyXG4gICAgICAgICAgICBjb25zdCByYXdQcm9wcyA9IHRvUmF3KHByb3BzKTtcclxuICAgICAgICAgICAgY29uc3QgeyBtb2RlIH0gPSByYXdQcm9wcztcclxuICAgICAgICAgICAgLy8gY2hlY2sgbW9kZVxyXG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIG1vZGUgJiYgIVsnaW4tb3V0JywgJ291dC1pbicsICdkZWZhdWx0J10uaW5jbHVkZXMobW9kZSkpIHtcclxuICAgICAgICAgICAgICAgIHdhcm4oYGludmFsaWQgPHRyYW5zaXRpb24+IG1vZGU6ICR7bW9kZX1gKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBhdCB0aGlzIHBvaW50IGNoaWxkcmVuIGhhcyBhIGd1YXJhbnRlZWQgbGVuZ3RoIG9mIDEuXHJcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkID0gY2hpbGRyZW5bMF07XHJcbiAgICAgICAgICAgIGlmIChzdGF0ZS5pc0xlYXZpbmcpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBlbXB0eVBsYWNlaG9sZGVyKGNoaWxkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBpbiB0aGUgY2FzZSBvZiA8dHJhbnNpdGlvbj48a2VlcC1hbGl2ZS8+PC90cmFuc2l0aW9uPiwgd2UgbmVlZCB0b1xyXG4gICAgICAgICAgICAvLyBjb21wYXJlIHRoZSB0eXBlIG9mIHRoZSBrZXB0LWFsaXZlIGNoaWxkcmVuLlxyXG4gICAgICAgICAgICBjb25zdCBpbm5lckNoaWxkID0gZ2V0S2VlcEFsaXZlQ2hpbGQoY2hpbGQpO1xyXG4gICAgICAgICAgICBpZiAoIWlubmVyQ2hpbGQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBlbXB0eVBsYWNlaG9sZGVyKGNoaWxkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBlbnRlckhvb2tzID0gcmVzb2x2ZVRyYW5zaXRpb25Ib29rcyhpbm5lckNoaWxkLCByYXdQcm9wcywgc3RhdGUsIGluc3RhbmNlKTtcclxuICAgICAgICAgICAgc2V0VHJhbnNpdGlvbkhvb2tzKGlubmVyQ2hpbGQsIGVudGVySG9va3MpO1xyXG4gICAgICAgICAgICBjb25zdCBvbGRDaGlsZCA9IGluc3RhbmNlLnN1YlRyZWU7XHJcbiAgICAgICAgICAgIGNvbnN0IG9sZElubmVyQ2hpbGQgPSBvbGRDaGlsZCAmJiBnZXRLZWVwQWxpdmVDaGlsZChvbGRDaGlsZCk7XHJcbiAgICAgICAgICAgIGxldCB0cmFuc2l0aW9uS2V5Q2hhbmdlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBjb25zdCB7IGdldFRyYW5zaXRpb25LZXkgfSA9IGlubmVyQ2hpbGQudHlwZTtcclxuICAgICAgICAgICAgaWYgKGdldFRyYW5zaXRpb25LZXkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGtleSA9IGdldFRyYW5zaXRpb25LZXkoKTtcclxuICAgICAgICAgICAgICAgIGlmIChwcmV2VHJhbnNpdGlvbktleSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJldlRyYW5zaXRpb25LZXkgPSBrZXk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChrZXkgIT09IHByZXZUcmFuc2l0aW9uS2V5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJldlRyYW5zaXRpb25LZXkgPSBrZXk7XHJcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbktleUNoYW5nZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIGhhbmRsZSBtb2RlXHJcbiAgICAgICAgICAgIGlmIChvbGRJbm5lckNoaWxkICYmXHJcbiAgICAgICAgICAgICAgICBvbGRJbm5lckNoaWxkLnR5cGUgIT09IENvbW1lbnQgJiZcclxuICAgICAgICAgICAgICAgICghaXNTYW1lVk5vZGVUeXBlKGlubmVyQ2hpbGQsIG9sZElubmVyQ2hpbGQpIHx8IHRyYW5zaXRpb25LZXlDaGFuZ2VkKSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbGVhdmluZ0hvb2tzID0gcmVzb2x2ZVRyYW5zaXRpb25Ib29rcyhvbGRJbm5lckNoaWxkLCByYXdQcm9wcywgc3RhdGUsIGluc3RhbmNlKTtcclxuICAgICAgICAgICAgICAgIC8vIHVwZGF0ZSBvbGQgdHJlZSdzIGhvb2tzIGluIGNhc2Ugb2YgZHluYW1pYyB0cmFuc2l0aW9uXHJcbiAgICAgICAgICAgICAgICBzZXRUcmFuc2l0aW9uSG9va3Mob2xkSW5uZXJDaGlsZCwgbGVhdmluZ0hvb2tzKTtcclxuICAgICAgICAgICAgICAgIC8vIHN3aXRjaGluZyBiZXR3ZWVuIGRpZmZlcmVudCB2aWV3c1xyXG4gICAgICAgICAgICAgICAgaWYgKG1vZGUgPT09ICdvdXQtaW4nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUuaXNMZWF2aW5nID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAvLyByZXR1cm4gcGxhY2Vob2xkZXIgbm9kZSBhbmQgcXVldWUgdXBkYXRlIHdoZW4gbGVhdmUgZmluaXNoZXNcclxuICAgICAgICAgICAgICAgICAgICBsZWF2aW5nSG9va3MuYWZ0ZXJMZWF2ZSA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUuaXNMZWF2aW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluc3RhbmNlLnVwZGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVtcHR5UGxhY2Vob2xkZXIoY2hpbGQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAobW9kZSA9PT0gJ2luLW91dCcpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZWF2aW5nSG9va3MuZGVsYXlMZWF2ZSA9IChlbCwgZWFybHlSZW1vdmUsIGRlbGF5ZWRMZWF2ZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBsZWF2aW5nVk5vZGVzQ2FjaGUgPSBnZXRMZWF2aW5nTm9kZXNGb3JUeXBlKHN0YXRlLCBvbGRJbm5lckNoaWxkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGVhdmluZ1ZOb2Rlc0NhY2hlW1N0cmluZyhvbGRJbm5lckNoaWxkLmtleSldID0gb2xkSW5uZXJDaGlsZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZWFybHkgcmVtb3ZhbCBjYWxsYmFja1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbC5fbGVhdmVDYiA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVhcmx5UmVtb3ZlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbC5fbGVhdmVDYiA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBlbnRlckhvb2tzLmRlbGF5ZWRMZWF2ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZW50ZXJIb29rcy5kZWxheWVkTGVhdmUgPSBkZWxheWVkTGVhdmU7XHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gY2hpbGQ7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufTtcclxuLy8gZXhwb3J0IHRoZSBwdWJsaWMgdHlwZSBmb3IgaC90c3ggaW5mZXJlbmNlXHJcbi8vIGFsc28gdG8gYXZvaWQgaW5saW5lIGltcG9ydCgpIGluIGdlbmVyYXRlZCBkLnRzIGZpbGVzXHJcbmNvbnN0IEJhc2VUcmFuc2l0aW9uID0gQmFzZVRyYW5zaXRpb25JbXBsO1xyXG5mdW5jdGlvbiBnZXRMZWF2aW5nTm9kZXNGb3JUeXBlKHN0YXRlLCB2bm9kZSkge1xyXG4gICAgY29uc3QgeyBsZWF2aW5nVk5vZGVzIH0gPSBzdGF0ZTtcclxuICAgIGxldCBsZWF2aW5nVk5vZGVzQ2FjaGUgPSBsZWF2aW5nVk5vZGVzLmdldCh2bm9kZS50eXBlKTtcclxuICAgIGlmICghbGVhdmluZ1ZOb2Rlc0NhY2hlKSB7XHJcbiAgICAgICAgbGVhdmluZ1ZOb2Rlc0NhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcclxuICAgICAgICBsZWF2aW5nVk5vZGVzLnNldCh2bm9kZS50eXBlLCBsZWF2aW5nVk5vZGVzQ2FjaGUpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGxlYXZpbmdWTm9kZXNDYWNoZTtcclxufVxyXG4vLyBUaGUgdHJhbnNpdGlvbiBob29rcyBhcmUgYXR0YWNoZWQgdG8gdGhlIHZub2RlIGFzIHZub2RlLnRyYW5zaXRpb25cclxuLy8gYW5kIHdpbGwgYmUgY2FsbGVkIGF0IGFwcHJvcHJpYXRlIHRpbWluZyBpbiB0aGUgcmVuZGVyZXIuXHJcbmZ1bmN0aW9uIHJlc29sdmVUcmFuc2l0aW9uSG9va3Modm5vZGUsIHByb3BzLCBzdGF0ZSwgaW5zdGFuY2UpIHtcclxuICAgIGNvbnN0IHsgYXBwZWFyLCBtb2RlLCBwZXJzaXN0ZWQgPSBmYWxzZSwgb25CZWZvcmVFbnRlciwgb25FbnRlciwgb25BZnRlckVudGVyLCBvbkVudGVyQ2FuY2VsbGVkLCBvbkJlZm9yZUxlYXZlLCBvbkxlYXZlLCBvbkFmdGVyTGVhdmUsIG9uTGVhdmVDYW5jZWxsZWQsIG9uQmVmb3JlQXBwZWFyLCBvbkFwcGVhciwgb25BZnRlckFwcGVhciwgb25BcHBlYXJDYW5jZWxsZWQgfSA9IHByb3BzO1xyXG4gICAgY29uc3Qga2V5ID0gU3RyaW5nKHZub2RlLmtleSk7XHJcbiAgICBjb25zdCBsZWF2aW5nVk5vZGVzQ2FjaGUgPSBnZXRMZWF2aW5nTm9kZXNGb3JUeXBlKHN0YXRlLCB2bm9kZSk7XHJcbiAgICBjb25zdCBjYWxsSG9vayA9IChob29rLCBhcmdzKSA9PiB7XHJcbiAgICAgICAgaG9vayAmJlxyXG4gICAgICAgICAgICBjYWxsV2l0aEFzeW5jRXJyb3JIYW5kbGluZyhob29rLCBpbnN0YW5jZSwgOSAvKiBUUkFOU0lUSU9OX0hPT0sgKi8sIGFyZ3MpO1xyXG4gICAgfTtcclxuICAgIGNvbnN0IGhvb2tzID0ge1xyXG4gICAgICAgIG1vZGUsXHJcbiAgICAgICAgcGVyc2lzdGVkLFxyXG4gICAgICAgIGJlZm9yZUVudGVyKGVsKSB7XHJcbiAgICAgICAgICAgIGxldCBob29rID0gb25CZWZvcmVFbnRlcjtcclxuICAgICAgICAgICAgaWYgKCFzdGF0ZS5pc01vdW50ZWQpIHtcclxuICAgICAgICAgICAgICAgIGlmIChhcHBlYXIpIHtcclxuICAgICAgICAgICAgICAgICAgICBob29rID0gb25CZWZvcmVBcHBlYXIgfHwgb25CZWZvcmVFbnRlcjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBmb3Igc2FtZSBlbGVtZW50ICh2LXNob3cpXHJcbiAgICAgICAgICAgIGlmIChlbC5fbGVhdmVDYikge1xyXG4gICAgICAgICAgICAgICAgZWwuX2xlYXZlQ2IodHJ1ZSAvKiBjYW5jZWxsZWQgKi8pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIGZvciB0b2dnbGVkIGVsZW1lbnQgd2l0aCBzYW1lIGtleSAodi1pZilcclxuICAgICAgICAgICAgY29uc3QgbGVhdmluZ1ZOb2RlID0gbGVhdmluZ1ZOb2Rlc0NhY2hlW2tleV07XHJcbiAgICAgICAgICAgIGlmIChsZWF2aW5nVk5vZGUgJiZcclxuICAgICAgICAgICAgICAgIGlzU2FtZVZOb2RlVHlwZSh2bm9kZSwgbGVhdmluZ1ZOb2RlKSAmJlxyXG4gICAgICAgICAgICAgICAgbGVhdmluZ1ZOb2RlLmVsLl9sZWF2ZUNiKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBmb3JjZSBlYXJseSByZW1vdmFsIChub3QgY2FuY2VsbGVkKVxyXG4gICAgICAgICAgICAgICAgbGVhdmluZ1ZOb2RlLmVsLl9sZWF2ZUNiKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FsbEhvb2soaG9vaywgW2VsXSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnRlcihlbCkge1xyXG4gICAgICAgICAgICBsZXQgaG9vayA9IG9uRW50ZXI7XHJcbiAgICAgICAgICAgIGxldCBhZnRlckhvb2sgPSBvbkFmdGVyRW50ZXI7XHJcbiAgICAgICAgICAgIGxldCBjYW5jZWxIb29rID0gb25FbnRlckNhbmNlbGxlZDtcclxuICAgICAgICAgICAgaWYgKCFzdGF0ZS5pc01vdW50ZWQpIHtcclxuICAgICAgICAgICAgICAgIGlmIChhcHBlYXIpIHtcclxuICAgICAgICAgICAgICAgICAgICBob29rID0gb25BcHBlYXIgfHwgb25FbnRlcjtcclxuICAgICAgICAgICAgICAgICAgICBhZnRlckhvb2sgPSBvbkFmdGVyQXBwZWFyIHx8IG9uQWZ0ZXJFbnRlcjtcclxuICAgICAgICAgICAgICAgICAgICBjYW5jZWxIb29rID0gb25BcHBlYXJDYW5jZWxsZWQgfHwgb25FbnRlckNhbmNlbGxlZDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsZXQgY2FsbGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGNvbnN0IGRvbmUgPSAoZWwuX2VudGVyQ2IgPSAoY2FuY2VsbGVkKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY2FsbGVkKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIGNhbGxlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBpZiAoY2FuY2VsbGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FsbEhvb2soY2FuY2VsSG9vaywgW2VsXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjYWxsSG9vayhhZnRlckhvb2ssIFtlbF0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGhvb2tzLmRlbGF5ZWRMZWF2ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGhvb2tzLmRlbGF5ZWRMZWF2ZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWwuX2VudGVyQ2IgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBpZiAoaG9vaykge1xyXG4gICAgICAgICAgICAgICAgaG9vayhlbCwgZG9uZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoaG9vay5sZW5ndGggPD0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGRvbmUoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGRvbmUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbGVhdmUoZWwsIHJlbW92ZSkge1xyXG4gICAgICAgICAgICBjb25zdCBrZXkgPSBTdHJpbmcodm5vZGUua2V5KTtcclxuICAgICAgICAgICAgaWYgKGVsLl9lbnRlckNiKSB7XHJcbiAgICAgICAgICAgICAgICBlbC5fZW50ZXJDYih0cnVlIC8qIGNhbmNlbGxlZCAqLyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHN0YXRlLmlzVW5tb3VudGluZykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlbW92ZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhbGxIb29rKG9uQmVmb3JlTGVhdmUsIFtlbF0pO1xyXG4gICAgICAgICAgICBsZXQgY2FsbGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGNvbnN0IGRvbmUgPSAoZWwuX2xlYXZlQ2IgPSAoY2FuY2VsbGVkKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY2FsbGVkKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIGNhbGxlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICByZW1vdmUoKTtcclxuICAgICAgICAgICAgICAgIGlmIChjYW5jZWxsZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYWxsSG9vayhvbkxlYXZlQ2FuY2VsbGVkLCBbZWxdKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhbGxIb29rKG9uQWZ0ZXJMZWF2ZSwgW2VsXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbC5fbGVhdmVDYiA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgIGlmIChsZWF2aW5nVk5vZGVzQ2FjaGVba2V5XSA9PT0gdm5vZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBkZWxldGUgbGVhdmluZ1ZOb2Rlc0NhY2hlW2tleV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBsZWF2aW5nVk5vZGVzQ2FjaGVba2V5XSA9IHZub2RlO1xyXG4gICAgICAgICAgICBpZiAob25MZWF2ZSkge1xyXG4gICAgICAgICAgICAgICAgb25MZWF2ZShlbCwgZG9uZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAob25MZWF2ZS5sZW5ndGggPD0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGRvbmUoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGRvbmUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgY2xvbmUodm5vZGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc29sdmVUcmFuc2l0aW9uSG9va3Modm5vZGUsIHByb3BzLCBzdGF0ZSwgaW5zdGFuY2UpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICByZXR1cm4gaG9va3M7XHJcbn1cclxuLy8gdGhlIHBsYWNlaG9sZGVyIHJlYWxseSBvbmx5IGhhbmRsZXMgb25lIHNwZWNpYWwgY2FzZTogS2VlcEFsaXZlXHJcbi8vIGluIHRoZSBjYXNlIG9mIGEgS2VlcEFsaXZlIGluIGEgbGVhdmUgcGhhc2Ugd2UgbmVlZCB0byByZXR1cm4gYSBLZWVwQWxpdmVcclxuLy8gcGxhY2Vob2xkZXIgd2l0aCBlbXB0eSBjb250ZW50IHRvIGF2b2lkIHRoZSBLZWVwQWxpdmUgaW5zdGFuY2UgZnJvbSBiZWluZ1xyXG4vLyB1bm1vdW50ZWQuXHJcbmZ1bmN0aW9uIGVtcHR5UGxhY2Vob2xkZXIodm5vZGUpIHtcclxuICAgIGlmIChpc0tlZXBBbGl2ZSh2bm9kZSkpIHtcclxuICAgICAgICB2bm9kZSA9IGNsb25lVk5vZGUodm5vZGUpO1xyXG4gICAgICAgIHZub2RlLmNoaWxkcmVuID0gbnVsbDtcclxuICAgICAgICByZXR1cm4gdm5vZGU7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gZ2V0S2VlcEFsaXZlQ2hpbGQodm5vZGUpIHtcclxuICAgIHJldHVybiBpc0tlZXBBbGl2ZSh2bm9kZSlcclxuICAgICAgICA/IHZub2RlLmNoaWxkcmVuXHJcbiAgICAgICAgICAgID8gdm5vZGUuY2hpbGRyZW5bMF1cclxuICAgICAgICAgICAgOiB1bmRlZmluZWRcclxuICAgICAgICA6IHZub2RlO1xyXG59XHJcbmZ1bmN0aW9uIHNldFRyYW5zaXRpb25Ib29rcyh2bm9kZSwgaG9va3MpIHtcclxuICAgIGlmICh2bm9kZS5zaGFwZUZsYWcgJiA2IC8qIENPTVBPTkVOVCAqLyAmJiB2bm9kZS5jb21wb25lbnQpIHtcclxuICAgICAgICBzZXRUcmFuc2l0aW9uSG9va3Modm5vZGUuY29tcG9uZW50LnN1YlRyZWUsIGhvb2tzKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKCB2bm9kZS5zaGFwZUZsYWcgJiAxMjggLyogU1VTUEVOU0UgKi8pIHtcclxuICAgICAgICB2bm9kZS5zc0NvbnRlbnQudHJhbnNpdGlvbiA9IGhvb2tzLmNsb25lKHZub2RlLnNzQ29udGVudCk7XHJcbiAgICAgICAgdm5vZGUuc3NGYWxsYmFjay50cmFuc2l0aW9uID0gaG9va3MuY2xvbmUodm5vZGUuc3NGYWxsYmFjayk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICB2bm9kZS50cmFuc2l0aW9uID0gaG9va3M7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gZ2V0VHJhbnNpdGlvblJhd0NoaWxkcmVuKGNoaWxkcmVuLCBrZWVwQ29tbWVudCA9IGZhbHNlKSB7XHJcbiAgICBsZXQgcmV0ID0gW107XHJcbiAgICBsZXQga2V5ZWRGcmFnbWVudENvdW50ID0gMDtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBjb25zdCBjaGlsZCA9IGNoaWxkcmVuW2ldO1xyXG4gICAgICAgIC8vIGhhbmRsZSBmcmFnbWVudCBjaGlsZHJlbiBjYXNlLCBlLmcuIHYtZm9yXHJcbiAgICAgICAgaWYgKGNoaWxkLnR5cGUgPT09IEZyYWdtZW50KSB7XHJcbiAgICAgICAgICAgIGlmIChjaGlsZC5wYXRjaEZsYWcgJiAxMjggLyogS0VZRURfRlJBR01FTlQgKi8pXHJcbiAgICAgICAgICAgICAgICBrZXllZEZyYWdtZW50Q291bnQrKztcclxuICAgICAgICAgICAgcmV0ID0gcmV0LmNvbmNhdChnZXRUcmFuc2l0aW9uUmF3Q2hpbGRyZW4oY2hpbGQuY2hpbGRyZW4sIGtlZXBDb21tZW50KSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGNvbW1lbnQgcGxhY2Vob2xkZXJzIHNob3VsZCBiZSBza2lwcGVkLCBlLmcuIHYtaWZcclxuICAgICAgICBlbHNlIGlmIChrZWVwQ29tbWVudCB8fCBjaGlsZC50eXBlICE9PSBDb21tZW50KSB7XHJcbiAgICAgICAgICAgIHJldC5wdXNoKGNoaWxkKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyAjMTEyNiBpZiBhIHRyYW5zaXRpb24gY2hpbGRyZW4gbGlzdCBjb250YWlucyBtdWx0aXBsZSBzdWIgZnJhZ21lbnRzLCB0aGVzZVxyXG4gICAgLy8gZnJhZ21lbnRzIHdpbGwgYmUgbWVyZ2VkIGludG8gYSBmbGF0IGNoaWxkcmVuIGFycmF5LiBTaW5jZSBlYWNoIHYtZm9yXHJcbiAgICAvLyBmcmFnbWVudCBtYXkgY29udGFpbiBkaWZmZXJlbnQgc3RhdGljIGJpbmRpbmdzIGluc2lkZSwgd2UgbmVlZCB0byBkZS1vcFxyXG4gICAgLy8gdGhlc2UgY2hpbGRyZW4gdG8gZm9yY2UgZnVsbCBkaWZmcyB0byBlbnN1cmUgY29ycmVjdCBiZWhhdmlvci5cclxuICAgIGlmIChrZXllZEZyYWdtZW50Q291bnQgPiAxKSB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCByZXQubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgcmV0W2ldLnBhdGNoRmxhZyA9IC0yIC8qIEJBSUwgKi87XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJldDtcclxufVxuXG5jb25zdCBpc0tlZXBBbGl2ZSA9ICh2bm9kZSkgPT4gdm5vZGUudHlwZS5fX2lzS2VlcEFsaXZlO1xyXG5jb25zdCBLZWVwQWxpdmVJbXBsID0ge1xyXG4gICAgbmFtZTogYEtlZXBBbGl2ZWAsXHJcbiAgICAvLyBNYXJrZXIgZm9yIHNwZWNpYWwgaGFuZGxpbmcgaW5zaWRlIHRoZSByZW5kZXJlci4gV2UgYXJlIG5vdCB1c2luZyBhID09PVxyXG4gICAgLy8gY2hlY2sgZGlyZWN0bHkgb24gS2VlcEFsaXZlIGluIHRoZSByZW5kZXJlciwgYmVjYXVzZSBpbXBvcnRpbmcgaXQgZGlyZWN0bHlcclxuICAgIC8vIHdvdWxkIHByZXZlbnQgaXQgZnJvbSBiZWluZyB0cmVlLXNoYWtlbi5cclxuICAgIF9faXNLZWVwQWxpdmU6IHRydWUsXHJcbiAgICBpbmhlcml0UmVmOiB0cnVlLFxyXG4gICAgcHJvcHM6IHtcclxuICAgICAgICBpbmNsdWRlOiBbU3RyaW5nLCBSZWdFeHAsIEFycmF5XSxcclxuICAgICAgICBleGNsdWRlOiBbU3RyaW5nLCBSZWdFeHAsIEFycmF5XSxcclxuICAgICAgICBtYXg6IFtTdHJpbmcsIE51bWJlcl1cclxuICAgIH0sXHJcbiAgICBzZXR1cChwcm9wcywgeyBzbG90cyB9KSB7XHJcbiAgICAgICAgY29uc3QgY2FjaGUgPSBuZXcgTWFwKCk7XHJcbiAgICAgICAgY29uc3Qga2V5cyA9IG5ldyBTZXQoKTtcclxuICAgICAgICBsZXQgY3VycmVudCA9IG51bGw7XHJcbiAgICAgICAgY29uc3QgaW5zdGFuY2UgPSBnZXRDdXJyZW50SW5zdGFuY2UoKTtcclxuICAgICAgICBjb25zdCBwYXJlbnRTdXNwZW5zZSA9IGluc3RhbmNlLnN1c3BlbnNlO1xyXG4gICAgICAgIC8vIEtlZXBBbGl2ZSBjb21tdW5pY2F0ZXMgd2l0aCB0aGUgaW5zdGFudGlhdGVkIHJlbmRlcmVyIHZpYSB0aGVcclxuICAgICAgICAvLyBjdHggd2hlcmUgdGhlIHJlbmRlcmVyIHBhc3NlcyBpbiBpdHMgaW50ZXJuYWxzLFxyXG4gICAgICAgIC8vIGFuZCB0aGUgS2VlcEFsaXZlIGluc3RhbmNlIGV4cG9zZXMgYWN0aXZhdGUvZGVhY3RpdmF0ZSBpbXBsZW1lbnRhdGlvbnMuXHJcbiAgICAgICAgLy8gVGhlIHdob2xlIHBvaW50IG9mIHRoaXMgaXMgdG8gYXZvaWQgaW1wb3J0aW5nIEtlZXBBbGl2ZSBkaXJlY3RseSBpbiB0aGVcclxuICAgICAgICAvLyByZW5kZXJlciB0byBmYWNpbGl0YXRlIHRyZWUtc2hha2luZy5cclxuICAgICAgICBjb25zdCBzaGFyZWRDb250ZXh0ID0gaW5zdGFuY2UuY3R4O1xyXG4gICAgICAgIGNvbnN0IHsgcmVuZGVyZXI6IHsgcDogcGF0Y2gsIG06IG1vdmUsIHVtOiBfdW5tb3VudCwgbzogeyBjcmVhdGVFbGVtZW50IH0gfSB9ID0gc2hhcmVkQ29udGV4dDtcclxuICAgICAgICBjb25zdCBzdG9yYWdlQ29udGFpbmVyID0gY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgc2hhcmVkQ29udGV4dC5hY3RpdmF0ZSA9ICh2bm9kZSwgY29udGFpbmVyLCBhbmNob3IsIGlzU1ZHLCBvcHRpbWl6ZWQpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgaW5zdGFuY2UgPSB2bm9kZS5jb21wb25lbnQ7XHJcbiAgICAgICAgICAgIG1vdmUodm5vZGUsIGNvbnRhaW5lciwgYW5jaG9yLCAwIC8qIEVOVEVSICovLCBwYXJlbnRTdXNwZW5zZSk7XHJcbiAgICAgICAgICAgIC8vIGluIGNhc2UgcHJvcHMgaGF2ZSBjaGFuZ2VkXHJcbiAgICAgICAgICAgIHBhdGNoKGluc3RhbmNlLnZub2RlLCB2bm9kZSwgY29udGFpbmVyLCBhbmNob3IsIGluc3RhbmNlLCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIG9wdGltaXplZCk7XHJcbiAgICAgICAgICAgIHF1ZXVlUG9zdFJlbmRlckVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpbnN0YW5jZS5pc0RlYWN0aXZhdGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBpZiAoaW5zdGFuY2UuYSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGludm9rZUFycmF5Rm5zKGluc3RhbmNlLmEpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3Qgdm5vZGVIb29rID0gdm5vZGUucHJvcHMgJiYgdm5vZGUucHJvcHMub25Wbm9kZU1vdW50ZWQ7XHJcbiAgICAgICAgICAgICAgICBpZiAodm5vZGVIb29rKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaW52b2tlVk5vZGVIb29rKHZub2RlSG9vaywgaW5zdGFuY2UucGFyZW50LCB2bm9kZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sIHBhcmVudFN1c3BlbnNlKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHNoYXJlZENvbnRleHQuZGVhY3RpdmF0ZSA9ICh2bm9kZSkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBpbnN0YW5jZSA9IHZub2RlLmNvbXBvbmVudDtcclxuICAgICAgICAgICAgbW92ZSh2bm9kZSwgc3RvcmFnZUNvbnRhaW5lciwgbnVsbCwgMSAvKiBMRUFWRSAqLywgcGFyZW50U3VzcGVuc2UpO1xyXG4gICAgICAgICAgICBxdWV1ZVBvc3RSZW5kZXJFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGluc3RhbmNlLmRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaW52b2tlQXJyYXlGbnMoaW5zdGFuY2UuZGEpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3Qgdm5vZGVIb29rID0gdm5vZGUucHJvcHMgJiYgdm5vZGUucHJvcHMub25Wbm9kZVVubW91bnRlZDtcclxuICAgICAgICAgICAgICAgIGlmICh2bm9kZUhvb2spIHtcclxuICAgICAgICAgICAgICAgICAgICBpbnZva2VWTm9kZUhvb2sodm5vZGVIb29rLCBpbnN0YW5jZS5wYXJlbnQsIHZub2RlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGluc3RhbmNlLmlzRGVhY3RpdmF0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICB9LCBwYXJlbnRTdXNwZW5zZSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBmdW5jdGlvbiB1bm1vdW50KHZub2RlKSB7XHJcbiAgICAgICAgICAgIC8vIHJlc2V0IHRoZSBzaGFwZUZsYWcgc28gaXQgY2FuIGJlIHByb3Blcmx5IHVubW91bnRlZFxyXG4gICAgICAgICAgICByZXNldFNoYXBlRmxhZyh2bm9kZSk7XHJcbiAgICAgICAgICAgIF91bm1vdW50KHZub2RlLCBpbnN0YW5jZSwgcGFyZW50U3VzcGVuc2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmdW5jdGlvbiBwcnVuZUNhY2hlKGZpbHRlcikge1xyXG4gICAgICAgICAgICBjYWNoZS5mb3JFYWNoKCh2bm9kZSwga2V5KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuYW1lID0gZ2V0TmFtZSh2bm9kZS50eXBlKTtcclxuICAgICAgICAgICAgICAgIGlmIChuYW1lICYmICghZmlsdGVyIHx8ICFmaWx0ZXIobmFtZSkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJ1bmVDYWNoZUVudHJ5KGtleSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmdW5jdGlvbiBwcnVuZUNhY2hlRW50cnkoa2V5KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNhY2hlZCA9IGNhY2hlLmdldChrZXkpO1xyXG4gICAgICAgICAgICBpZiAoIWN1cnJlbnQgfHwgY2FjaGVkLnR5cGUgIT09IGN1cnJlbnQudHlwZSkge1xyXG4gICAgICAgICAgICAgICAgdW5tb3VudChjYWNoZWQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGN1cnJlbnQpIHtcclxuICAgICAgICAgICAgICAgIC8vIGN1cnJlbnQgYWN0aXZlIGluc3RhbmNlIHNob3VsZCBubyBsb25nZXIgYmUga2VwdC1hbGl2ZS5cclxuICAgICAgICAgICAgICAgIC8vIHdlIGNhbid0IHVubW91bnQgaXQgbm93IGJ1dCBpdCBtaWdodCBiZSBsYXRlciwgc28gcmVzZXQgaXRzIGZsYWcgbm93LlxyXG4gICAgICAgICAgICAgICAgcmVzZXRTaGFwZUZsYWcoY3VycmVudCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FjaGUuZGVsZXRlKGtleSk7XHJcbiAgICAgICAgICAgIGtleXMuZGVsZXRlKGtleSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHBydW5lIGNhY2hlIG9uIGluY2x1ZGUvZXhjbHVkZSBwcm9wIGNoYW5nZVxyXG4gICAgICAgIHdhdGNoKCgpID0+IFtwcm9wcy5pbmNsdWRlLCBwcm9wcy5leGNsdWRlXSwgKFtpbmNsdWRlLCBleGNsdWRlXSkgPT4ge1xyXG4gICAgICAgICAgICBpbmNsdWRlICYmIHBydW5lQ2FjaGUobmFtZSA9PiBtYXRjaGVzKGluY2x1ZGUsIG5hbWUpKTtcclxuICAgICAgICAgICAgZXhjbHVkZSAmJiBwcnVuZUNhY2hlKG5hbWUgPT4gIW1hdGNoZXMoZXhjbHVkZSwgbmFtZSkpO1xyXG4gICAgICAgIH0sIFxyXG4gICAgICAgIC8vIHBydW5lIHBvc3QtcmVuZGVyIGFmdGVyIGBjdXJyZW50YCBoYXMgYmVlbiB1cGRhdGVkXHJcbiAgICAgICAgeyBmbHVzaDogJ3Bvc3QnLCBkZWVwOiB0cnVlIH0pO1xyXG4gICAgICAgIC8vIGNhY2hlIHN1YiB0cmVlIGFmdGVyIHJlbmRlclxyXG4gICAgICAgIGxldCBwZW5kaW5nQ2FjaGVLZXkgPSBudWxsO1xyXG4gICAgICAgIGNvbnN0IGNhY2hlU3VidHJlZSA9ICgpID0+IHtcclxuICAgICAgICAgICAgLy8gZml4ICMxNjIxLCB0aGUgcGVuZGluZ0NhY2hlS2V5IGNvdWxkIGJlIDBcclxuICAgICAgICAgICAgaWYgKHBlbmRpbmdDYWNoZUtleSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBjYWNoZS5zZXQocGVuZGluZ0NhY2hlS2V5LCBnZXRJbm5lckNoaWxkKGluc3RhbmNlLnN1YlRyZWUpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgb25Nb3VudGVkKGNhY2hlU3VidHJlZSk7XHJcbiAgICAgICAgb25VcGRhdGVkKGNhY2hlU3VidHJlZSk7XHJcbiAgICAgICAgb25CZWZvcmVVbm1vdW50KCgpID0+IHtcclxuICAgICAgICAgICAgY2FjaGUuZm9yRWFjaChjYWNoZWQgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgeyBzdWJUcmVlLCBzdXNwZW5zZSB9ID0gaW5zdGFuY2U7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB2bm9kZSA9IGdldElubmVyQ2hpbGQoc3ViVHJlZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoY2FjaGVkLnR5cGUgPT09IHZub2RlLnR5cGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBjdXJyZW50IGluc3RhbmNlIHdpbGwgYmUgdW5tb3VudGVkIGFzIHBhcnQgb2Yga2VlcC1hbGl2ZSdzIHVubW91bnRcclxuICAgICAgICAgICAgICAgICAgICByZXNldFNoYXBlRmxhZyh2bm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gYnV0IGludm9rZSBpdHMgZGVhY3RpdmF0ZWQgaG9vayBoZXJlXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGEgPSB2bm9kZS5jb21wb25lbnQuZGE7XHJcbiAgICAgICAgICAgICAgICAgICAgZGEgJiYgcXVldWVQb3N0UmVuZGVyRWZmZWN0KGRhLCBzdXNwZW5zZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdW5tb3VudChjYWNoZWQpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gKCkgPT4ge1xyXG4gICAgICAgICAgICBwZW5kaW5nQ2FjaGVLZXkgPSBudWxsO1xyXG4gICAgICAgICAgICBpZiAoIXNsb3RzLmRlZmF1bHQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkcmVuID0gc2xvdHMuZGVmYXVsdCgpO1xyXG4gICAgICAgICAgICBjb25zdCByYXdWTm9kZSA9IGNoaWxkcmVuWzBdO1xyXG4gICAgICAgICAgICBpZiAoY2hpbGRyZW4ubGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHdhcm4oYEtlZXBBbGl2ZSBzaG91bGQgY29udGFpbiBleGFjdGx5IG9uZSBjb21wb25lbnQgY2hpbGQuYCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50ID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjaGlsZHJlbjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICghaXNWTm9kZShyYXdWTm9kZSkgfHxcclxuICAgICAgICAgICAgICAgICghKHJhd1ZOb2RlLnNoYXBlRmxhZyAmIDQgLyogU1RBVEVGVUxfQ09NUE9ORU5UICovKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICEocmF3Vk5vZGUuc2hhcGVGbGFnICYgMTI4IC8qIFNVU1BFTlNFICovKSkpIHtcclxuICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJhd1ZOb2RlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGxldCB2bm9kZSA9IGdldElubmVyQ2hpbGQocmF3Vk5vZGUpO1xyXG4gICAgICAgICAgICBjb25zdCBjb21wID0gdm5vZGUudHlwZTtcclxuICAgICAgICAgICAgY29uc3QgbmFtZSA9IGdldE5hbWUoY29tcCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHsgaW5jbHVkZSwgZXhjbHVkZSwgbWF4IH0gPSBwcm9wcztcclxuICAgICAgICAgICAgaWYgKChpbmNsdWRlICYmICghbmFtZSB8fCAhbWF0Y2hlcyhpbmNsdWRlLCBuYW1lKSkpIHx8XHJcbiAgICAgICAgICAgICAgICAoZXhjbHVkZSAmJiBuYW1lICYmIG1hdGNoZXMoZXhjbHVkZSwgbmFtZSkpKSB7XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50ID0gdm5vZGU7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmF3Vk5vZGU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3Qga2V5ID0gdm5vZGUua2V5ID09IG51bGwgPyBjb21wIDogdm5vZGUua2V5O1xyXG4gICAgICAgICAgICBjb25zdCBjYWNoZWRWTm9kZSA9IGNhY2hlLmdldChrZXkpO1xyXG4gICAgICAgICAgICAvLyBjbG9uZSB2bm9kZSBpZiBpdCdzIHJldXNlZCBiZWNhdXNlIHdlIGFyZSBnb2luZyB0byBtdXRhdGUgaXRcclxuICAgICAgICAgICAgaWYgKHZub2RlLmVsKSB7XHJcbiAgICAgICAgICAgICAgICB2bm9kZSA9IGNsb25lVk5vZGUodm5vZGUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHJhd1ZOb2RlLnNoYXBlRmxhZyAmIDEyOCAvKiBTVVNQRU5TRSAqLykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJhd1ZOb2RlLnNzQ29udGVudCA9IHZub2RlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vICMxNTEzIGl0J3MgcG9zc2libGUgZm9yIHRoZSByZXR1cm5lZCB2bm9kZSB0byBiZSBjbG9uZWQgZHVlIHRvIGF0dHJcclxuICAgICAgICAgICAgLy8gZmFsbHRocm91Z2ggb3Igc2NvcGVJZCwgc28gdGhlIHZub2RlIGhlcmUgbWF5IG5vdCBiZSB0aGUgZmluYWwgdm5vZGVcclxuICAgICAgICAgICAgLy8gdGhhdCBpcyBtb3VudGVkLiBJbnN0ZWFkIG9mIGNhY2hpbmcgaXQgZGlyZWN0bHksIHdlIHN0b3JlIHRoZSBwZW5kaW5nXHJcbiAgICAgICAgICAgIC8vIGtleSBhbmQgY2FjaGUgYGluc3RhbmNlLnN1YlRyZWVgICh0aGUgbm9ybWFsaXplZCB2bm9kZSkgaW5cclxuICAgICAgICAgICAgLy8gYmVmb3JlTW91bnQvYmVmb3JlVXBkYXRlIGhvb2tzLlxyXG4gICAgICAgICAgICBwZW5kaW5nQ2FjaGVLZXkgPSBrZXk7XHJcbiAgICAgICAgICAgIGlmIChjYWNoZWRWTm9kZSkge1xyXG4gICAgICAgICAgICAgICAgLy8gY29weSBvdmVyIG1vdW50ZWQgc3RhdGVcclxuICAgICAgICAgICAgICAgIHZub2RlLmVsID0gY2FjaGVkVk5vZGUuZWw7XHJcbiAgICAgICAgICAgICAgICB2bm9kZS5jb21wb25lbnQgPSBjYWNoZWRWTm9kZS5jb21wb25lbnQ7XHJcbiAgICAgICAgICAgICAgICBpZiAodm5vZGUudHJhbnNpdGlvbikge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHJlY3Vyc2l2ZWx5IHVwZGF0ZSB0cmFuc2l0aW9uIGhvb2tzIG9uIHN1YlRyZWVcclxuICAgICAgICAgICAgICAgICAgICBzZXRUcmFuc2l0aW9uSG9va3Modm5vZGUsIHZub2RlLnRyYW5zaXRpb24pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gYXZvaWQgdm5vZGUgYmVpbmcgbW91bnRlZCBhcyBmcmVzaFxyXG4gICAgICAgICAgICAgICAgdm5vZGUuc2hhcGVGbGFnIHw9IDUxMiAvKiBDT01QT05FTlRfS0VQVF9BTElWRSAqLztcclxuICAgICAgICAgICAgICAgIC8vIG1ha2UgdGhpcyBrZXkgdGhlIGZyZXNoZXN0XHJcbiAgICAgICAgICAgICAgICBrZXlzLmRlbGV0ZShrZXkpO1xyXG4gICAgICAgICAgICAgICAga2V5cy5hZGQoa2V5KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGtleXMuYWRkKGtleSk7XHJcbiAgICAgICAgICAgICAgICAvLyBwcnVuZSBvbGRlc3QgZW50cnlcclxuICAgICAgICAgICAgICAgIGlmIChtYXggJiYga2V5cy5zaXplID4gcGFyc2VJbnQobWF4LCAxMCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBwcnVuZUNhY2hlRW50cnkoa2V5cy52YWx1ZXMoKS5uZXh0KCkudmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIGF2b2lkIHZub2RlIGJlaW5nIHVubW91bnRlZFxyXG4gICAgICAgICAgICB2bm9kZS5zaGFwZUZsYWcgfD0gMjU2IC8qIENPTVBPTkVOVF9TSE9VTERfS0VFUF9BTElWRSAqLztcclxuICAgICAgICAgICAgY3VycmVudCA9IHZub2RlO1xyXG4gICAgICAgICAgICByZXR1cm4gcmF3Vk5vZGU7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufTtcclxuLy8gZXhwb3J0IHRoZSBwdWJsaWMgdHlwZSBmb3IgaC90c3ggaW5mZXJlbmNlXHJcbi8vIGFsc28gdG8gYXZvaWQgaW5saW5lIGltcG9ydCgpIGluIGdlbmVyYXRlZCBkLnRzIGZpbGVzXHJcbmNvbnN0IEtlZXBBbGl2ZSA9IEtlZXBBbGl2ZUltcGw7XHJcbmZ1bmN0aW9uIGdldE5hbWUoY29tcCkge1xyXG4gICAgcmV0dXJuIGNvbXAuZGlzcGxheU5hbWUgfHwgY29tcC5uYW1lO1xyXG59XHJcbmZ1bmN0aW9uIG1hdGNoZXMocGF0dGVybiwgbmFtZSkge1xyXG4gICAgaWYgKGlzQXJyYXkocGF0dGVybikpIHtcclxuICAgICAgICByZXR1cm4gcGF0dGVybi5zb21lKChwKSA9PiBtYXRjaGVzKHAsIG5hbWUpKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGlzU3RyaW5nKHBhdHRlcm4pKSB7XHJcbiAgICAgICAgcmV0dXJuIHBhdHRlcm4uc3BsaXQoJywnKS5pbmRleE9mKG5hbWUpID4gLTE7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChwYXR0ZXJuLnRlc3QpIHtcclxuICAgICAgICByZXR1cm4gcGF0dGVybi50ZXN0KG5hbWUpO1xyXG4gICAgfVxyXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cclxuICAgIHJldHVybiBmYWxzZTtcclxufVxyXG5mdW5jdGlvbiBvbkFjdGl2YXRlZChob29rLCB0YXJnZXQpIHtcclxuICAgIHJlZ2lzdGVyS2VlcEFsaXZlSG9vayhob29rLCBcImFcIiAvKiBBQ1RJVkFURUQgKi8sIHRhcmdldCk7XHJcbn1cclxuZnVuY3Rpb24gb25EZWFjdGl2YXRlZChob29rLCB0YXJnZXQpIHtcclxuICAgIHJlZ2lzdGVyS2VlcEFsaXZlSG9vayhob29rLCBcImRhXCIgLyogREVBQ1RJVkFURUQgKi8sIHRhcmdldCk7XHJcbn1cclxuZnVuY3Rpb24gcmVnaXN0ZXJLZWVwQWxpdmVIb29rKGhvb2ssIHR5cGUsIHRhcmdldCA9IGN1cnJlbnRJbnN0YW5jZSkge1xyXG4gICAgLy8gY2FjaGUgdGhlIGRlYWN0aXZhdGUgYnJhbmNoIGNoZWNrIHdyYXBwZXIgZm9yIGluamVjdGVkIGhvb2tzIHNvIHRoZSBzYW1lXHJcbiAgICAvLyBob29rIGNhbiBiZSBwcm9wZXJseSBkZWR1cGVkIGJ5IHRoZSBzY2hlZHVsZXIuIFwiX193ZGNcIiBzdGFuZHMgZm9yIFwid2l0aFxyXG4gICAgLy8gZGVhY3RpdmF0aW9uIGNoZWNrXCIuXHJcbiAgICBjb25zdCB3cmFwcGVkSG9vayA9IGhvb2suX193ZGMgfHxcclxuICAgICAgICAoaG9vay5fX3dkYyA9ICgpID0+IHtcclxuICAgICAgICAgICAgLy8gb25seSBmaXJlIHRoZSBob29rIGlmIHRoZSB0YXJnZXQgaW5zdGFuY2UgaXMgTk9UIGluIGEgZGVhY3RpdmF0ZWQgYnJhbmNoLlxyXG4gICAgICAgICAgICBsZXQgY3VycmVudCA9IHRhcmdldDtcclxuICAgICAgICAgICAgd2hpbGUgKGN1cnJlbnQpIHtcclxuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50LmlzRGVhY3RpdmF0ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50ID0gY3VycmVudC5wYXJlbnQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaG9vaygpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgaW5qZWN0SG9vayh0eXBlLCB3cmFwcGVkSG9vaywgdGFyZ2V0KTtcclxuICAgIC8vIEluIGFkZGl0aW9uIHRvIHJlZ2lzdGVyaW5nIGl0IG9uIHRoZSB0YXJnZXQgaW5zdGFuY2UsIHdlIHdhbGsgdXAgdGhlIHBhcmVudFxyXG4gICAgLy8gY2hhaW4gYW5kIHJlZ2lzdGVyIGl0IG9uIGFsbCBhbmNlc3RvciBpbnN0YW5jZXMgdGhhdCBhcmUga2VlcC1hbGl2ZSByb290cy5cclxuICAgIC8vIFRoaXMgYXZvaWRzIHRoZSBuZWVkIHRvIHdhbGsgdGhlIGVudGlyZSBjb21wb25lbnQgdHJlZSB3aGVuIGludm9raW5nIHRoZXNlXHJcbiAgICAvLyBob29rcywgYW5kIG1vcmUgaW1wb3J0YW50bHksIGF2b2lkcyB0aGUgbmVlZCB0byB0cmFjayBjaGlsZCBjb21wb25lbnRzIGluXHJcbiAgICAvLyBhcnJheXMuXHJcbiAgICBpZiAodGFyZ2V0KSB7XHJcbiAgICAgICAgbGV0IGN1cnJlbnQgPSB0YXJnZXQucGFyZW50O1xyXG4gICAgICAgIHdoaWxlIChjdXJyZW50ICYmIGN1cnJlbnQucGFyZW50KSB7XHJcbiAgICAgICAgICAgIGlmIChpc0tlZXBBbGl2ZShjdXJyZW50LnBhcmVudC52bm9kZSkpIHtcclxuICAgICAgICAgICAgICAgIGluamVjdFRvS2VlcEFsaXZlUm9vdCh3cmFwcGVkSG9vaywgdHlwZSwgdGFyZ2V0LCBjdXJyZW50KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjdXJyZW50ID0gY3VycmVudC5wYXJlbnQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGluamVjdFRvS2VlcEFsaXZlUm9vdChob29rLCB0eXBlLCB0YXJnZXQsIGtlZXBBbGl2ZVJvb3QpIHtcclxuICAgIC8vIGluamVjdEhvb2sgd3JhcHMgdGhlIG9yaWdpbmFsIGZvciBlcnJvciBoYW5kbGluZywgc28gbWFrZSBzdXJlIHRvIHJlbW92ZVxyXG4gICAgLy8gdGhlIHdyYXBwZWQgdmVyc2lvbi5cclxuICAgIGNvbnN0IGluamVjdGVkID0gaW5qZWN0SG9vayh0eXBlLCBob29rLCBrZWVwQWxpdmVSb290LCB0cnVlIC8qIHByZXBlbmQgKi8pO1xyXG4gICAgb25Vbm1vdW50ZWQoKCkgPT4ge1xyXG4gICAgICAgIHJlbW92ZShrZWVwQWxpdmVSb290W3R5cGVdLCBpbmplY3RlZCk7XHJcbiAgICB9LCB0YXJnZXQpO1xyXG59XHJcbmZ1bmN0aW9uIHJlc2V0U2hhcGVGbGFnKHZub2RlKSB7XHJcbiAgICBsZXQgc2hhcGVGbGFnID0gdm5vZGUuc2hhcGVGbGFnO1xyXG4gICAgaWYgKHNoYXBlRmxhZyAmIDI1NiAvKiBDT01QT05FTlRfU0hPVUxEX0tFRVBfQUxJVkUgKi8pIHtcclxuICAgICAgICBzaGFwZUZsYWcgLT0gMjU2IC8qIENPTVBPTkVOVF9TSE9VTERfS0VFUF9BTElWRSAqLztcclxuICAgIH1cclxuICAgIGlmIChzaGFwZUZsYWcgJiA1MTIgLyogQ09NUE9ORU5UX0tFUFRfQUxJVkUgKi8pIHtcclxuICAgICAgICBzaGFwZUZsYWcgLT0gNTEyIC8qIENPTVBPTkVOVF9LRVBUX0FMSVZFICovO1xyXG4gICAgfVxyXG4gICAgdm5vZGUuc2hhcGVGbGFnID0gc2hhcGVGbGFnO1xyXG59XHJcbmZ1bmN0aW9uIGdldElubmVyQ2hpbGQodm5vZGUpIHtcclxuICAgIHJldHVybiB2bm9kZS5zaGFwZUZsYWcgJiAxMjggLyogU1VTUEVOU0UgKi8gPyB2bm9kZS5zc0NvbnRlbnQgOiB2bm9kZTtcclxufVxuXG5jb25zdCBpc0ludGVybmFsS2V5ID0gKGtleSkgPT4ga2V5WzBdID09PSAnXycgfHwga2V5ID09PSAnJHN0YWJsZSc7XHJcbmNvbnN0IG5vcm1hbGl6ZVNsb3RWYWx1ZSA9ICh2YWx1ZSkgPT4gaXNBcnJheSh2YWx1ZSlcclxuICAgID8gdmFsdWUubWFwKG5vcm1hbGl6ZVZOb2RlKVxyXG4gICAgOiBbbm9ybWFsaXplVk5vZGUodmFsdWUpXTtcclxuY29uc3Qgbm9ybWFsaXplU2xvdCA9IChrZXksIHJhd1Nsb3QsIGN0eCkgPT4gd2l0aEN0eCgocHJvcHMpID0+IHtcclxuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgY3VycmVudEluc3RhbmNlKSB7XHJcbiAgICAgICAgd2FybihgU2xvdCBcIiR7a2V5fVwiIGludm9rZWQgb3V0c2lkZSBvZiB0aGUgcmVuZGVyIGZ1bmN0aW9uOiBgICtcclxuICAgICAgICAgICAgYHRoaXMgd2lsbCBub3QgdHJhY2sgZGVwZW5kZW5jaWVzIHVzZWQgaW4gdGhlIHNsb3QuIGAgK1xyXG4gICAgICAgICAgICBgSW52b2tlIHRoZSBzbG90IGZ1bmN0aW9uIGluc2lkZSB0aGUgcmVuZGVyIGZ1bmN0aW9uIGluc3RlYWQuYCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbm9ybWFsaXplU2xvdFZhbHVlKHJhd1Nsb3QocHJvcHMpKTtcclxufSwgY3R4KTtcclxuY29uc3Qgbm9ybWFsaXplT2JqZWN0U2xvdHMgPSAocmF3U2xvdHMsIHNsb3RzKSA9PiB7XHJcbiAgICBjb25zdCBjdHggPSByYXdTbG90cy5fY3R4O1xyXG4gICAgZm9yIChjb25zdCBrZXkgaW4gcmF3U2xvdHMpIHtcclxuICAgICAgICBpZiAoaXNJbnRlcm5hbEtleShrZXkpKVxyXG4gICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICBjb25zdCB2YWx1ZSA9IHJhd1Nsb3RzW2tleV07XHJcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24odmFsdWUpKSB7XHJcbiAgICAgICAgICAgIHNsb3RzW2tleV0gPSBub3JtYWxpemVTbG90KGtleSwgdmFsdWUsIGN0eCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHZhbHVlICE9IG51bGwpIHtcclxuICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICAgICAgd2FybihgTm9uLWZ1bmN0aW9uIHZhbHVlIGVuY291bnRlcmVkIGZvciBzbG90IFwiJHtrZXl9XCIuIGAgK1xyXG4gICAgICAgICAgICAgICAgICAgIGBQcmVmZXIgZnVuY3Rpb24gc2xvdHMgZm9yIGJldHRlciBwZXJmb3JtYW5jZS5gKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBub3JtYWxpemVkID0gbm9ybWFsaXplU2xvdFZhbHVlKHZhbHVlKTtcclxuICAgICAgICAgICAgc2xvdHNba2V5XSA9ICgpID0+IG5vcm1hbGl6ZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59O1xyXG5jb25zdCBub3JtYWxpemVWTm9kZVNsb3RzID0gKGluc3RhbmNlLCBjaGlsZHJlbikgPT4ge1xyXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhaXNLZWVwQWxpdmUoaW5zdGFuY2Uudm5vZGUpKSB7XHJcbiAgICAgICAgd2FybihgTm9uLWZ1bmN0aW9uIHZhbHVlIGVuY291bnRlcmVkIGZvciBkZWZhdWx0IHNsb3QuIGAgK1xyXG4gICAgICAgICAgICBgUHJlZmVyIGZ1bmN0aW9uIHNsb3RzIGZvciBiZXR0ZXIgcGVyZm9ybWFuY2UuYCk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBub3JtYWxpemVkID0gbm9ybWFsaXplU2xvdFZhbHVlKGNoaWxkcmVuKTtcclxuICAgIGluc3RhbmNlLnNsb3RzLmRlZmF1bHQgPSAoKSA9PiBub3JtYWxpemVkO1xyXG59O1xyXG5jb25zdCBpbml0U2xvdHMgPSAoaW5zdGFuY2UsIGNoaWxkcmVuKSA9PiB7XHJcbiAgICBpZiAoaW5zdGFuY2Uudm5vZGUuc2hhcGVGbGFnICYgMzIgLyogU0xPVFNfQ0hJTERSRU4gKi8pIHtcclxuICAgICAgICBjb25zdCB0eXBlID0gY2hpbGRyZW4uXztcclxuICAgICAgICBpZiAodHlwZSkge1xyXG4gICAgICAgICAgICBpbnN0YW5jZS5zbG90cyA9IGNoaWxkcmVuO1xyXG4gICAgICAgICAgICAvLyBtYWtlIGNvbXBpbGVyIG1hcmtlciBub24tZW51bWVyYWJsZVxyXG4gICAgICAgICAgICBkZWYoY2hpbGRyZW4sICdfJywgdHlwZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBub3JtYWxpemVPYmplY3RTbG90cyhjaGlsZHJlbiwgKGluc3RhbmNlLnNsb3RzID0ge30pKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBpbnN0YW5jZS5zbG90cyA9IHt9O1xyXG4gICAgICAgIGlmIChjaGlsZHJlbikge1xyXG4gICAgICAgICAgICBub3JtYWxpemVWTm9kZVNsb3RzKGluc3RhbmNlLCBjaGlsZHJlbik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZGVmKGluc3RhbmNlLnNsb3RzLCBJbnRlcm5hbE9iamVjdEtleSwgMSk7XHJcbn07XHJcbmNvbnN0IHVwZGF0ZVNsb3RzID0gKGluc3RhbmNlLCBjaGlsZHJlbikgPT4ge1xyXG4gICAgY29uc3QgeyB2bm9kZSwgc2xvdHMgfSA9IGluc3RhbmNlO1xyXG4gICAgbGV0IG5lZWREZWxldGlvbkNoZWNrID0gdHJ1ZTtcclxuICAgIGxldCBkZWxldGlvbkNvbXBhcmlzb25UYXJnZXQgPSBFTVBUWV9PQko7XHJcbiAgICBpZiAodm5vZGUuc2hhcGVGbGFnICYgMzIgLyogU0xPVFNfQ0hJTERSRU4gKi8pIHtcclxuICAgICAgICBjb25zdCB0eXBlID0gY2hpbGRyZW4uXztcclxuICAgICAgICBpZiAodHlwZSkge1xyXG4gICAgICAgICAgICAvLyBjb21waWxlZCBzbG90cy5cclxuICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBpc0htclVwZGF0aW5nKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBQYXJlbnQgd2FzIEhNUiB1cGRhdGVkIHNvIHNsb3QgY29udGVudCBtYXkgaGF2ZSBjaGFuZ2VkLlxyXG4gICAgICAgICAgICAgICAgLy8gZm9yY2UgdXBkYXRlIHNsb3RzIGFuZCBtYXJrIGluc3RhbmNlIGZvciBobXIgYXMgd2VsbFxyXG4gICAgICAgICAgICAgICAgZXh0ZW5kKHNsb3RzLCBjaGlsZHJlbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAodHlwZSA9PT0gMSAvKiBTVEFCTEUgKi8pIHtcclxuICAgICAgICAgICAgICAgIC8vIGNvbXBpbGVkIEFORCBzdGFibGUuXHJcbiAgICAgICAgICAgICAgICAvLyBubyBuZWVkIHRvIHVwZGF0ZSwgYW5kIHNraXAgc3RhbGUgc2xvdHMgcmVtb3ZhbC5cclxuICAgICAgICAgICAgICAgIG5lZWREZWxldGlvbkNoZWNrID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBjb21waWxlZCBidXQgZHluYW1pYyAodi1pZi92LWZvciBvbiBzbG90cykgLSB1cGRhdGUgc2xvdHMsIGJ1dCBza2lwXHJcbiAgICAgICAgICAgICAgICAvLyBub3JtYWxpemF0aW9uLlxyXG4gICAgICAgICAgICAgICAgZXh0ZW5kKHNsb3RzLCBjaGlsZHJlbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIG5lZWREZWxldGlvbkNoZWNrID0gIWNoaWxkcmVuLiRzdGFibGU7XHJcbiAgICAgICAgICAgIG5vcm1hbGl6ZU9iamVjdFNsb3RzKGNoaWxkcmVuLCBzbG90cyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRlbGV0aW9uQ29tcGFyaXNvblRhcmdldCA9IGNoaWxkcmVuO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoY2hpbGRyZW4pIHtcclxuICAgICAgICAvLyBub24gc2xvdCBvYmplY3QgY2hpbGRyZW4gKGRpcmVjdCB2YWx1ZSkgcGFzc2VkIHRvIGEgY29tcG9uZW50XHJcbiAgICAgICAgbm9ybWFsaXplVk5vZGVTbG90cyhpbnN0YW5jZSwgY2hpbGRyZW4pO1xyXG4gICAgICAgIGRlbGV0aW9uQ29tcGFyaXNvblRhcmdldCA9IHsgZGVmYXVsdDogMSB9O1xyXG4gICAgfVxyXG4gICAgLy8gZGVsZXRlIHN0YWxlIHNsb3RzXHJcbiAgICBpZiAobmVlZERlbGV0aW9uQ2hlY2spIHtcclxuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBzbG90cykge1xyXG4gICAgICAgICAgICBpZiAoIWlzSW50ZXJuYWxLZXkoa2V5KSAmJiAhKGtleSBpbiBkZWxldGlvbkNvbXBhcmlzb25UYXJnZXQpKSB7XHJcbiAgICAgICAgICAgICAgICBkZWxldGUgc2xvdHNba2V5XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufTtcblxuLyoqXHJcblJ1bnRpbWUgaGVscGVyIGZvciBhcHBseWluZyBkaXJlY3RpdmVzIHRvIGEgdm5vZGUuIEV4YW1wbGUgdXNhZ2U6XHJcblxuY29uc3QgY29tcCA9IHJlc29sdmVDb21wb25lbnQoJ2NvbXAnKVxyXG5jb25zdCBmb28gPSByZXNvbHZlRGlyZWN0aXZlKCdmb28nKVxyXG5jb25zdCBiYXIgPSByZXNvbHZlRGlyZWN0aXZlKCdiYXInKVxyXG5cbnJldHVybiB3aXRoRGlyZWN0aXZlcyhoKGNvbXApLCBbXHJcbiAgW2ZvbywgdGhpcy54XSxcclxuICBbYmFyLCB0aGlzLnldXHJcbl0pXHJcbiovXHJcbmNvbnN0IGlzQnVpbHRJbkRpcmVjdGl2ZSA9IC8qI19fUFVSRV9fKi8gbWFrZU1hcCgnYmluZCxjbG9hayxlbHNlLWlmLGVsc2UsZm9yLGh0bWwsaWYsbW9kZWwsb24sb25jZSxwcmUsc2hvdyxzbG90LHRleHQnKTtcclxuZnVuY3Rpb24gdmFsaWRhdGVEaXJlY3RpdmVOYW1lKG5hbWUpIHtcclxuICAgIGlmIChpc0J1aWx0SW5EaXJlY3RpdmUobmFtZSkpIHtcclxuICAgICAgICB3YXJuKCdEbyBub3QgdXNlIGJ1aWx0LWluIGRpcmVjdGl2ZSBpZHMgYXMgY3VzdG9tIGRpcmVjdGl2ZSBpZDogJyArIG5hbWUpO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBBZGRzIGRpcmVjdGl2ZXMgdG8gYSBWTm9kZS5cclxuICovXHJcbmZ1bmN0aW9uIHdpdGhEaXJlY3RpdmVzKHZub2RlLCBkaXJlY3RpdmVzKSB7XHJcbiAgICBjb25zdCBpbnRlcm5hbEluc3RhbmNlID0gY3VycmVudFJlbmRlcmluZ0luc3RhbmNlO1xyXG4gICAgaWYgKGludGVybmFsSW5zdGFuY2UgPT09IG51bGwpIHtcclxuICAgICAgICAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgd2Fybihgd2l0aERpcmVjdGl2ZXMgY2FuIG9ubHkgYmUgdXNlZCBpbnNpZGUgcmVuZGVyIGZ1bmN0aW9ucy5gKTtcclxuICAgICAgICByZXR1cm4gdm5vZGU7XHJcbiAgICB9XHJcbiAgICBjb25zdCBpbnN0YW5jZSA9IGludGVybmFsSW5zdGFuY2UucHJveHk7XHJcbiAgICBjb25zdCBiaW5kaW5ncyA9IHZub2RlLmRpcnMgfHwgKHZub2RlLmRpcnMgPSBbXSk7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRpcmVjdGl2ZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBsZXQgW2RpciwgdmFsdWUsIGFyZywgbW9kaWZpZXJzID0gRU1QVFlfT0JKXSA9IGRpcmVjdGl2ZXNbaV07XHJcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24oZGlyKSkge1xyXG4gICAgICAgICAgICBkaXIgPSB7XHJcbiAgICAgICAgICAgICAgICBtb3VudGVkOiBkaXIsXHJcbiAgICAgICAgICAgICAgICB1cGRhdGVkOiBkaXJcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgYmluZGluZ3MucHVzaCh7XHJcbiAgICAgICAgICAgIGRpcixcclxuICAgICAgICAgICAgaW5zdGFuY2UsXHJcbiAgICAgICAgICAgIHZhbHVlLFxyXG4gICAgICAgICAgICBvbGRWYWx1ZTogdm9pZCAwLFxyXG4gICAgICAgICAgICBhcmcsXHJcbiAgICAgICAgICAgIG1vZGlmaWVyc1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHZub2RlO1xyXG59XHJcbmZ1bmN0aW9uIGludm9rZURpcmVjdGl2ZUhvb2sodm5vZGUsIHByZXZWTm9kZSwgaW5zdGFuY2UsIG5hbWUpIHtcclxuICAgIGNvbnN0IGJpbmRpbmdzID0gdm5vZGUuZGlycztcclxuICAgIGNvbnN0IG9sZEJpbmRpbmdzID0gcHJldlZOb2RlICYmIHByZXZWTm9kZS5kaXJzO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBiaW5kaW5ncy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGNvbnN0IGJpbmRpbmcgPSBiaW5kaW5nc1tpXTtcclxuICAgICAgICBpZiAob2xkQmluZGluZ3MpIHtcclxuICAgICAgICAgICAgYmluZGluZy5vbGRWYWx1ZSA9IG9sZEJpbmRpbmdzW2ldLnZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBob29rID0gYmluZGluZy5kaXJbbmFtZV07XHJcbiAgICAgICAgaWYgKGhvb2spIHtcclxuICAgICAgICAgICAgY2FsbFdpdGhBc3luY0Vycm9ySGFuZGxpbmcoaG9vaywgaW5zdGFuY2UsIDggLyogRElSRUNUSVZFX0hPT0sgKi8sIFtcclxuICAgICAgICAgICAgICAgIHZub2RlLmVsLFxyXG4gICAgICAgICAgICAgICAgYmluZGluZyxcclxuICAgICAgICAgICAgICAgIHZub2RlLFxyXG4gICAgICAgICAgICAgICAgcHJldlZOb2RlXHJcbiAgICAgICAgICAgIF0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxuXG5mdW5jdGlvbiBjcmVhdGVBcHBDb250ZXh0KCkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBhcHA6IG51bGwsXHJcbiAgICAgICAgY29uZmlnOiB7XHJcbiAgICAgICAgICAgIGlzTmF0aXZlVGFnOiBOTyxcclxuICAgICAgICAgICAgcGVyZm9ybWFuY2U6IGZhbHNlLFxyXG4gICAgICAgICAgICBnbG9iYWxQcm9wZXJ0aWVzOiB7fSxcclxuICAgICAgICAgICAgb3B0aW9uTWVyZ2VTdHJhdGVnaWVzOiB7fSxcclxuICAgICAgICAgICAgaXNDdXN0b21FbGVtZW50OiBOTyxcclxuICAgICAgICAgICAgZXJyb3JIYW5kbGVyOiB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgIHdhcm5IYW5kbGVyOiB1bmRlZmluZWRcclxuICAgICAgICB9LFxyXG4gICAgICAgIG1peGluczogW10sXHJcbiAgICAgICAgY29tcG9uZW50czoge30sXHJcbiAgICAgICAgZGlyZWN0aXZlczoge30sXHJcbiAgICAgICAgcHJvdmlkZXM6IE9iamVjdC5jcmVhdGUobnVsbClcclxuICAgIH07XHJcbn1cclxubGV0IHVpZCA9IDA7XHJcbmZ1bmN0aW9uIGNyZWF0ZUFwcEFQSShyZW5kZXIsIGh5ZHJhdGUpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiBjcmVhdGVBcHAocm9vdENvbXBvbmVudCwgcm9vdFByb3BzID0gbnVsbCkge1xyXG4gICAgICAgIGlmIChyb290UHJvcHMgIT0gbnVsbCAmJiAhaXNPYmplY3Qocm9vdFByb3BzKSkge1xyXG4gICAgICAgICAgICAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgd2Fybihgcm9vdCBwcm9wcyBwYXNzZWQgdG8gYXBwLm1vdW50KCkgbXVzdCBiZSBhbiBvYmplY3QuYCk7XHJcbiAgICAgICAgICAgIHJvb3RQcm9wcyA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGNvbnRleHQgPSBjcmVhdGVBcHBDb250ZXh0KCk7XHJcbiAgICAgICAgY29uc3QgaW5zdGFsbGVkUGx1Z2lucyA9IG5ldyBTZXQoKTtcclxuICAgICAgICBsZXQgaXNNb3VudGVkID0gZmFsc2U7XHJcbiAgICAgICAgY29uc3QgYXBwID0gKGNvbnRleHQuYXBwID0ge1xyXG4gICAgICAgICAgICBfdWlkOiB1aWQrKyxcclxuICAgICAgICAgICAgX2NvbXBvbmVudDogcm9vdENvbXBvbmVudCxcclxuICAgICAgICAgICAgX3Byb3BzOiByb290UHJvcHMsXHJcbiAgICAgICAgICAgIF9jb250YWluZXI6IG51bGwsXHJcbiAgICAgICAgICAgIF9jb250ZXh0OiBjb250ZXh0LFxyXG4gICAgICAgICAgICB2ZXJzaW9uLFxyXG4gICAgICAgICAgICBnZXQgY29uZmlnKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbnRleHQuY29uZmlnO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzZXQgY29uZmlnKHYpIHtcclxuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgICAgICB3YXJuKGBhcHAuY29uZmlnIGNhbm5vdCBiZSByZXBsYWNlZC4gTW9kaWZ5IGluZGl2aWR1YWwgb3B0aW9ucyBpbnN0ZWFkLmApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB1c2UocGx1Z2luLCAuLi5vcHRpb25zKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaW5zdGFsbGVkUGx1Z2lucy5oYXMocGx1Z2luKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiB3YXJuKGBQbHVnaW4gaGFzIGFscmVhZHkgYmVlbiBhcHBsaWVkIHRvIHRhcmdldCBhcHAuYCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChwbHVnaW4gJiYgaXNGdW5jdGlvbihwbHVnaW4uaW5zdGFsbCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpbnN0YWxsZWRQbHVnaW5zLmFkZChwbHVnaW4pO1xyXG4gICAgICAgICAgICAgICAgICAgIHBsdWdpbi5pbnN0YWxsKGFwcCwgLi4ub3B0aW9ucyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChpc0Z1bmN0aW9uKHBsdWdpbikpIHtcclxuICAgICAgICAgICAgICAgICAgICBpbnN0YWxsZWRQbHVnaW5zLmFkZChwbHVnaW4pO1xyXG4gICAgICAgICAgICAgICAgICAgIHBsdWdpbihhcHAsIC4uLm9wdGlvbnMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2FybihgQSBwbHVnaW4gbXVzdCBlaXRoZXIgYmUgYSBmdW5jdGlvbiBvciBhbiBvYmplY3Qgd2l0aCBhbiBcImluc3RhbGxcIiBgICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYGZ1bmN0aW9uLmApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFwcDtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbWl4aW4obWl4aW4pIHtcclxuICAgICAgICAgICAgICAgIGlmIChfX1ZVRV9PUFRJT05TX0FQSV9fKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjb250ZXh0Lm1peGlucy5pbmNsdWRlcyhtaXhpbikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5taXhpbnMucHVzaChtaXhpbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGdsb2JhbCBtaXhpbiB3aXRoIHByb3BzL2VtaXRzIGRlLW9wdGltaXplcyBwcm9wcy9lbWl0c1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBub3JtYWxpemF0aW9uIGNhY2hpbmcuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtaXhpbi5wcm9wcyB8fCBtaXhpbi5lbWl0cykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5kZW9wdCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdhcm4oJ01peGluIGhhcyBhbHJlYWR5IGJlZW4gYXBwbGllZCB0byB0YXJnZXQgYXBwJyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAobWl4aW4ubmFtZSA/IGA6ICR7bWl4aW4ubmFtZX1gIDogJycpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgICAgICB3YXJuKCdNaXhpbnMgYXJlIG9ubHkgYXZhaWxhYmxlIGluIGJ1aWxkcyBzdXBwb3J0aW5nIE9wdGlvbnMgQVBJJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYXBwO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBjb21wb25lbnQobmFtZSwgY29tcG9uZW50KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGVDb21wb25lbnROYW1lKG5hbWUsIGNvbnRleHQuY29uZmlnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICghY29tcG9uZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbnRleHQuY29tcG9uZW50c1tuYW1lXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgY29udGV4dC5jb21wb25lbnRzW25hbWVdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2FybihgQ29tcG9uZW50IFwiJHtuYW1lfVwiIGhhcyBhbHJlYWR5IGJlZW4gcmVnaXN0ZXJlZCBpbiB0YXJnZXQgYXBwLmApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29udGV4dC5jb21wb25lbnRzW25hbWVdID0gY29tcG9uZW50O1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFwcDtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZGlyZWN0aXZlKG5hbWUsIGRpcmVjdGl2ZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbGlkYXRlRGlyZWN0aXZlTmFtZShuYW1lKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICghZGlyZWN0aXZlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbnRleHQuZGlyZWN0aXZlc1tuYW1lXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgY29udGV4dC5kaXJlY3RpdmVzW25hbWVdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2FybihgRGlyZWN0aXZlIFwiJHtuYW1lfVwiIGhhcyBhbHJlYWR5IGJlZW4gcmVnaXN0ZXJlZCBpbiB0YXJnZXQgYXBwLmApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29udGV4dC5kaXJlY3RpdmVzW25hbWVdID0gZGlyZWN0aXZlO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFwcDtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbW91bnQocm9vdENvbnRhaW5lciwgaXNIeWRyYXRlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWlzTW91bnRlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHZub2RlID0gY3JlYXRlVk5vZGUocm9vdENvbXBvbmVudCwgcm9vdFByb3BzKTtcclxuICAgICAgICAgICAgICAgICAgICAvLyBzdG9yZSBhcHAgY29udGV4dCBvbiB0aGUgcm9vdCBWTm9kZS5cclxuICAgICAgICAgICAgICAgICAgICAvLyB0aGlzIHdpbGwgYmUgc2V0IG9uIHRoZSByb290IGluc3RhbmNlIG9uIGluaXRpYWwgbW91bnQuXHJcbiAgICAgICAgICAgICAgICAgICAgdm5vZGUuYXBwQ29udGV4dCA9IGNvbnRleHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gSE1SIHJvb3QgcmVsb2FkXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0LnJlbG9hZCA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlcihjbG9uZVZOb2RlKHZub2RlKSwgcm9vdENvbnRhaW5lcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpc0h5ZHJhdGUgJiYgaHlkcmF0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBoeWRyYXRlKHZub2RlLCByb290Q29udGFpbmVyKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlcih2bm9kZSwgcm9vdENvbnRhaW5lcik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlzTW91bnRlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgYXBwLl9jb250YWluZXIgPSByb290Q29udGFpbmVyO1xyXG4gICAgICAgICAgICAgICAgICAgIHJvb3RDb250YWluZXIuX192dWVfYXBwX18gPSBhcHA7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB8fCBfX1ZVRV9QUk9EX0RFVlRPT0xTX18pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGV2dG9vbHNJbml0QXBwKGFwcCwgdmVyc2lvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2bm9kZS5jb21wb25lbnQucHJveHk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgICAgICB3YXJuKGBBcHAgaGFzIGFscmVhZHkgYmVlbiBtb3VudGVkLlxcbmAgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBgSWYgeW91IHdhbnQgdG8gcmVtb3VudCB0aGUgc2FtZSBhcHAsIG1vdmUgeW91ciBhcHAgY3JlYXRpb24gbG9naWMgYCArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGBpbnRvIGEgZmFjdG9yeSBmdW5jdGlvbiBhbmQgY3JlYXRlIGZyZXNoIGFwcCBpbnN0YW5jZXMgZm9yIGVhY2ggYCArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGBtb3VudCAtIGUuZy4gXFxgY29uc3QgY3JlYXRlTXlBcHAgPSAoKSA9PiBjcmVhdGVBcHAoQXBwKVxcYGApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB1bm1vdW50KCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGlzTW91bnRlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlbmRlcihudWxsLCBhcHAuX2NvbnRhaW5lcik7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB8fCBfX1ZVRV9QUk9EX0RFVlRPT0xTX18pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGV2dG9vbHNVbm1vdW50QXBwKGFwcCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2FybihgQ2Fubm90IHVubW91bnQgYW4gYXBwIHRoYXQgaXMgbm90IG1vdW50ZWQuYCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHByb3ZpZGUoa2V5LCB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBrZXkgaW4gY29udGV4dC5wcm92aWRlcykge1xyXG4gICAgICAgICAgICAgICAgICAgIHdhcm4oYEFwcCBhbHJlYWR5IHByb3ZpZGVzIHByb3BlcnR5IHdpdGgga2V5IFwiJHtTdHJpbmcoa2V5KX1cIi4gYCArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGBJdCB3aWxsIGJlIG92ZXJ3cml0dGVuIHdpdGggdGhlIG5ldyB2YWx1ZS5gKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIFR5cGVTY3JpcHQgZG9lc24ndCBhbGxvdyBzeW1ib2xzIGFzIGluZGV4IHR5cGVcclxuICAgICAgICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9NaWNyb3NvZnQvVHlwZVNjcmlwdC9pc3N1ZXMvMjQ1ODdcclxuICAgICAgICAgICAgICAgIGNvbnRleHQucHJvdmlkZXNba2V5XSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFwcDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBhcHA7XHJcbiAgICB9O1xyXG59XG5cbmxldCBoYXNNaXNtYXRjaCA9IGZhbHNlO1xyXG5jb25zdCBpc1NWR0NvbnRhaW5lciA9IChjb250YWluZXIpID0+IC9zdmcvLnRlc3QoY29udGFpbmVyLm5hbWVzcGFjZVVSSSkgJiYgY29udGFpbmVyLnRhZ05hbWUgIT09ICdmb3JlaWduT2JqZWN0JztcclxuY29uc3QgaXNDb21tZW50ID0gKG5vZGUpID0+IG5vZGUubm9kZVR5cGUgPT09IDggLyogQ09NTUVOVCAqLztcclxuLy8gTm90ZTogaHlkcmF0aW9uIGlzIERPTS1zcGVjaWZpY1xyXG4vLyBCdXQgd2UgaGF2ZSB0byBwbGFjZSBpdCBpbiBjb3JlIGR1ZSB0byB0aWdodCBjb3VwbGluZyB3aXRoIGNvcmUgLSBzcGxpdHRpbmdcclxuLy8gaXQgb3V0IGNyZWF0ZXMgYSB0b24gb2YgdW5uZWNlc3NhcnkgY29tcGxleGl0eS5cclxuLy8gSHlkcmF0aW9uIGFsc28gZGVwZW5kcyBvbiBzb21lIHJlbmRlcmVyIGludGVybmFsIGxvZ2ljIHdoaWNoIG5lZWRzIHRvIGJlXHJcbi8vIHBhc3NlZCBpbiB2aWEgYXJndW1lbnRzLlxyXG5mdW5jdGlvbiBjcmVhdGVIeWRyYXRpb25GdW5jdGlvbnMocmVuZGVyZXJJbnRlcm5hbHMpIHtcclxuICAgIGNvbnN0IHsgbXQ6IG1vdW50Q29tcG9uZW50LCBwOiBwYXRjaCwgbzogeyBwYXRjaFByb3AsIG5leHRTaWJsaW5nLCBwYXJlbnROb2RlLCByZW1vdmUsIGluc2VydCwgY3JlYXRlQ29tbWVudCB9IH0gPSByZW5kZXJlckludGVybmFscztcclxuICAgIGNvbnN0IGh5ZHJhdGUgPSAodm5vZGUsIGNvbnRhaW5lcikgPT4ge1xyXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIWNvbnRhaW5lci5oYXNDaGlsZE5vZGVzKCkpIHtcclxuICAgICAgICAgICAgd2FybihgQXR0ZW1wdGluZyB0byBoeWRyYXRlIGV4aXN0aW5nIG1hcmt1cCBidXQgY29udGFpbmVyIGlzIGVtcHR5LiBgICtcclxuICAgICAgICAgICAgICAgIGBQZXJmb3JtaW5nIGZ1bGwgbW91bnQgaW5zdGVhZC5gKTtcclxuICAgICAgICAgICAgcGF0Y2gobnVsbCwgdm5vZGUsIGNvbnRhaW5lcik7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaGFzTWlzbWF0Y2ggPSBmYWxzZTtcclxuICAgICAgICBoeWRyYXRlTm9kZShjb250YWluZXIuZmlyc3RDaGlsZCwgdm5vZGUsIG51bGwsIG51bGwpO1xyXG4gICAgICAgIGZsdXNoUG9zdEZsdXNoQ2JzKCk7XHJcbiAgICAgICAgaWYgKGhhc01pc21hdGNoICYmICFmYWxzZSkge1xyXG4gICAgICAgICAgICAvLyB0aGlzIGVycm9yIHNob3VsZCBzaG93IHVwIGluIHByb2R1Y3Rpb25cclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihgSHlkcmF0aW9uIGNvbXBsZXRlZCBidXQgY29udGFpbnMgbWlzbWF0Y2hlcy5gKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgY29uc3QgaHlkcmF0ZU5vZGUgPSAobm9kZSwgdm5vZGUsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIG9wdGltaXplZCA9IGZhbHNlKSA9PiB7XHJcbiAgICAgICAgY29uc3QgaXNGcmFnbWVudFN0YXJ0ID0gaXNDb21tZW50KG5vZGUpICYmIG5vZGUuZGF0YSA9PT0gJ1snO1xyXG4gICAgICAgIGNvbnN0IG9uTWlzbWF0Y2ggPSAoKSA9PiBoYW5kbGVNaXNtYXRjaChub2RlLCB2bm9kZSwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNGcmFnbWVudFN0YXJ0KTtcclxuICAgICAgICBjb25zdCB7IHR5cGUsIHJlZiwgc2hhcGVGbGFnIH0gPSB2bm9kZTtcclxuICAgICAgICBjb25zdCBkb21UeXBlID0gbm9kZS5ub2RlVHlwZTtcclxuICAgICAgICB2bm9kZS5lbCA9IG5vZGU7XHJcbiAgICAgICAgbGV0IG5leHROb2RlID0gbnVsbDtcclxuICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSBUZXh0OlxyXG4gICAgICAgICAgICAgICAgaWYgKGRvbVR5cGUgIT09IDMgLyogVEVYVCAqLykge1xyXG4gICAgICAgICAgICAgICAgICAgIG5leHROb2RlID0gb25NaXNtYXRjaCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUuZGF0YSAhPT0gdm5vZGUuY2hpbGRyZW4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGFzTWlzbWF0Y2ggPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdhcm4oYEh5ZHJhdGlvbiB0ZXh0IG1pc21hdGNoOmAgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBcXG4tIENsaWVudDogJHtKU09OLnN0cmluZ2lmeShub2RlLmRhdGEpfWAgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBcXG4tIFNlcnZlcjogJHtKU09OLnN0cmluZ2lmeSh2bm9kZS5jaGlsZHJlbil9YCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUuZGF0YSA9IHZub2RlLmNoaWxkcmVuO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBuZXh0Tm9kZSA9IG5leHRTaWJsaW5nKG5vZGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgQ29tbWVudDpcclxuICAgICAgICAgICAgICAgIGlmIChkb21UeXBlICE9PSA4IC8qIENPTU1FTlQgKi8gfHwgaXNGcmFnbWVudFN0YXJ0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV4dE5vZGUgPSBvbk1pc21hdGNoKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBuZXh0Tm9kZSA9IG5leHRTaWJsaW5nKG5vZGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgU3RhdGljOlxyXG4gICAgICAgICAgICAgICAgaWYgKGRvbVR5cGUgIT09IDEgLyogRUxFTUVOVCAqLykge1xyXG4gICAgICAgICAgICAgICAgICAgIG5leHROb2RlID0gb25NaXNtYXRjaCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gZGV0ZXJtaW5lIGFuY2hvciwgYWRvcHQgY29udGVudFxyXG4gICAgICAgICAgICAgICAgICAgIG5leHROb2RlID0gbm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAvLyBpZiB0aGUgc3RhdGljIHZub2RlIGhhcyBpdHMgY29udGVudCBzdHJpcHBlZCBkdXJpbmcgYnVpbGQsXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gYWRvcHQgaXQgZnJvbSB0aGUgc2VydmVyLXJlbmRlcmVkIEhUTUwuXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbmVlZFRvQWRvcHRDb250ZW50ID0gIXZub2RlLmNoaWxkcmVuLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZub2RlLnN0YXRpY0NvdW50OyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5lZWRUb0Fkb3B0Q29udGVudClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZub2RlLmNoaWxkcmVuICs9IG5leHROb2RlLm91dGVySFRNTDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGkgPT09IHZub2RlLnN0YXRpY0NvdW50IC0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdm5vZGUuYW5jaG9yID0gbmV4dE5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dE5vZGUgPSBuZXh0U2libGluZyhuZXh0Tm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXh0Tm9kZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIEZyYWdtZW50OlxyXG4gICAgICAgICAgICAgICAgaWYgKCFpc0ZyYWdtZW50U3RhcnQpIHtcclxuICAgICAgICAgICAgICAgICAgICBuZXh0Tm9kZSA9IG9uTWlzbWF0Y2goKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIG5leHROb2RlID0gaHlkcmF0ZUZyYWdtZW50KG5vZGUsIHZub2RlLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBvcHRpbWl6ZWQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICBpZiAoc2hhcGVGbGFnICYgMSAvKiBFTEVNRU5UICovKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRvbVR5cGUgIT09IDEgLyogRUxFTUVOVCAqLyB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2bm9kZS50eXBlICE9PSBub2RlLnRhZ05hbWUudG9Mb3dlckNhc2UoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXh0Tm9kZSA9IG9uTWlzbWF0Y2goKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHROb2RlID0gaHlkcmF0ZUVsZW1lbnQobm9kZSwgdm5vZGUsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIG9wdGltaXplZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoc2hhcGVGbGFnICYgNiAvKiBDT01QT05FTlQgKi8pIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyB3aGVuIHNldHRpbmcgdXAgdGhlIHJlbmRlciBlZmZlY3QsIGlmIHRoZSBpbml0aWFsIHZub2RlIGFscmVhZHlcclxuICAgICAgICAgICAgICAgICAgICAvLyBoYXMgLmVsIHNldCwgdGhlIGNvbXBvbmVudCB3aWxsIHBlcmZvcm0gaHlkcmF0aW9uIGluc3RlYWQgb2YgbW91bnRcclxuICAgICAgICAgICAgICAgICAgICAvLyBvbiBpdHMgc3ViLXRyZWUuXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29udGFpbmVyID0gcGFyZW50Tm9kZShub2RlKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBoeWRyYXRlQ29tcG9uZW50ID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb3VudENvbXBvbmVudCh2bm9kZSwgY29udGFpbmVyLCBudWxsLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWR0NvbnRhaW5lcihjb250YWluZXIpLCBvcHRpbWl6ZWQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gYXN5bmMgY29tcG9uZW50XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbG9hZEFzeW5jID0gdm5vZGUudHlwZS5fX2FzeW5jTG9hZGVyO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChsb2FkQXN5bmMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbG9hZEFzeW5jKCkudGhlbihoeWRyYXRlQ29tcG9uZW50KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGh5ZHJhdGVDb21wb25lbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gY29tcG9uZW50IG1heSBiZSBhc3luYywgc28gaW4gdGhlIGNhc2Ugb2YgZnJhZ21lbnRzIHdlIGNhbm5vdCByZWx5XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gb24gY29tcG9uZW50J3MgcmVuZGVyZWQgb3V0cHV0IHRvIGRldGVybWluZSB0aGUgZW5kIG9mIHRoZSBmcmFnbWVudFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGluc3RlYWQsIHdlIGRvIGEgbG9va2FoZWFkIHRvIGZpbmQgdGhlIGVuZCBhbmNob3Igbm9kZS5cclxuICAgICAgICAgICAgICAgICAgICBuZXh0Tm9kZSA9IGlzRnJhZ21lbnRTdGFydFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA/IGxvY2F0ZUNsb3NpbmdBc3luY0FuY2hvcihub2RlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA6IG5leHRTaWJsaW5nKG5vZGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoc2hhcGVGbGFnICYgNjQgLyogVEVMRVBPUlQgKi8pIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZG9tVHlwZSAhPT0gOCAvKiBDT01NRU5UICovKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHROb2RlID0gb25NaXNtYXRjaCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dE5vZGUgPSB2bm9kZS50eXBlLmh5ZHJhdGUobm9kZSwgdm5vZGUsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIG9wdGltaXplZCwgcmVuZGVyZXJJbnRlcm5hbHMsIGh5ZHJhdGVDaGlsZHJlbik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoIHNoYXBlRmxhZyAmIDEyOCAvKiBTVVNQRU5TRSAqLykge1xyXG4gICAgICAgICAgICAgICAgICAgIG5leHROb2RlID0gdm5vZGUudHlwZS5oeWRyYXRlKG5vZGUsIHZub2RlLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWR0NvbnRhaW5lcihwYXJlbnROb2RlKG5vZGUpKSwgb3B0aW1pemVkLCByZW5kZXJlckludGVybmFscywgaHlkcmF0ZU5vZGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2FybignSW52YWxpZCBIb3N0Vk5vZGUgdHlwZTonLCB0eXBlLCBgKCR7dHlwZW9mIHR5cGV9KWApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocmVmICE9IG51bGwpIHtcclxuICAgICAgICAgICAgc2V0UmVmKHJlZiwgbnVsbCwgcGFyZW50U3VzcGVuc2UsIHZub2RlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5leHROb2RlO1xyXG4gICAgfTtcclxuICAgIGNvbnN0IGh5ZHJhdGVFbGVtZW50ID0gKGVsLCB2bm9kZSwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgb3B0aW1pemVkKSA9PiB7XHJcbiAgICAgICAgb3B0aW1pemVkID0gb3B0aW1pemVkIHx8ICEhdm5vZGUuZHluYW1pY0NoaWxkcmVuO1xyXG4gICAgICAgIGNvbnN0IHsgcHJvcHMsIHBhdGNoRmxhZywgc2hhcGVGbGFnLCBkaXJzIH0gPSB2bm9kZTtcclxuICAgICAgICAvLyBza2lwIHByb3BzICYgY2hpbGRyZW4gaWYgdGhpcyBpcyBob2lzdGVkIHN0YXRpYyBub2Rlc1xyXG4gICAgICAgIGlmIChwYXRjaEZsYWcgIT09IC0xIC8qIEhPSVNURUQgKi8pIHtcclxuICAgICAgICAgICAgaWYgKGRpcnMpIHtcclxuICAgICAgICAgICAgICAgIGludm9rZURpcmVjdGl2ZUhvb2sodm5vZGUsIG51bGwsIHBhcmVudENvbXBvbmVudCwgJ2NyZWF0ZWQnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBwcm9wc1xyXG4gICAgICAgICAgICBpZiAocHJvcHMpIHtcclxuICAgICAgICAgICAgICAgIGlmICghb3B0aW1pemVkIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgKHBhdGNoRmxhZyAmIDE2IC8qIEZVTExfUFJPUFMgKi8gfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGF0Y2hGbGFnICYgMzIgLyogSFlEUkFURV9FVkVOVFMgKi8pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gcHJvcHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpc1Jlc2VydmVkUHJvcChrZXkpICYmIGlzT24oa2V5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0Y2hQcm9wKGVsLCBrZXksIG51bGwsIHByb3BzW2tleV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAocHJvcHMub25DbGljaykge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIEZhc3QgcGF0aCBmb3IgY2xpY2sgbGlzdGVuZXJzICh3aGljaCBpcyBtb3N0IG9mdGVuKSB0byBhdm9pZFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGl0ZXJhdGluZyB0aHJvdWdoIHByb3BzLlxyXG4gICAgICAgICAgICAgICAgICAgIHBhdGNoUHJvcChlbCwgJ29uQ2xpY2snLCBudWxsLCBwcm9wcy5vbkNsaWNrKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyB2bm9kZSAvIGRpcmVjdGl2ZSBob29rc1xyXG4gICAgICAgICAgICBsZXQgdm5vZGVIb29rcztcclxuICAgICAgICAgICAgaWYgKCh2bm9kZUhvb2tzID0gcHJvcHMgJiYgcHJvcHMub25Wbm9kZUJlZm9yZU1vdW50KSkge1xyXG4gICAgICAgICAgICAgICAgaW52b2tlVk5vZGVIb29rKHZub2RlSG9va3MsIHBhcmVudENvbXBvbmVudCwgdm5vZGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChkaXJzKSB7XHJcbiAgICAgICAgICAgICAgICBpbnZva2VEaXJlY3RpdmVIb29rKHZub2RlLCBudWxsLCBwYXJlbnRDb21wb25lbnQsICdiZWZvcmVNb3VudCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICgodm5vZGVIb29rcyA9IHByb3BzICYmIHByb3BzLm9uVm5vZGVNb3VudGVkKSB8fCBkaXJzKSB7XHJcbiAgICAgICAgICAgICAgICBxdWV1ZUVmZmVjdFdpdGhTdXNwZW5zZSgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdm5vZGVIb29rcyAmJiBpbnZva2VWTm9kZUhvb2sodm5vZGVIb29rcywgcGFyZW50Q29tcG9uZW50LCB2bm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZGlycyAmJiBpbnZva2VEaXJlY3RpdmVIb29rKHZub2RlLCBudWxsLCBwYXJlbnRDb21wb25lbnQsICdtb3VudGVkJyk7XHJcbiAgICAgICAgICAgICAgICB9LCBwYXJlbnRTdXNwZW5zZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gY2hpbGRyZW5cclxuICAgICAgICAgICAgaWYgKHNoYXBlRmxhZyAmIDE2IC8qIEFSUkFZX0NISUxEUkVOICovICYmXHJcbiAgICAgICAgICAgICAgICAvLyBza2lwIGlmIGVsZW1lbnQgaGFzIGlubmVySFRNTCAvIHRleHRDb250ZW50XHJcbiAgICAgICAgICAgICAgICAhKHByb3BzICYmIChwcm9wcy5pbm5lckhUTUwgfHwgcHJvcHMudGV4dENvbnRlbnQpKSkge1xyXG4gICAgICAgICAgICAgICAgbGV0IG5leHQgPSBoeWRyYXRlQ2hpbGRyZW4oZWwuZmlyc3RDaGlsZCwgdm5vZGUsIGVsLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBvcHRpbWl6ZWQpO1xyXG4gICAgICAgICAgICAgICAgbGV0IGhhc1dhcm5lZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgd2hpbGUgKG5leHQpIHtcclxuICAgICAgICAgICAgICAgICAgICBoYXNNaXNtYXRjaCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhaGFzV2FybmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdhcm4oYEh5ZHJhdGlvbiBjaGlsZHJlbiBtaXNtYXRjaCBpbiA8JHt2bm9kZS50eXBlfT46IGAgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYHNlcnZlciByZW5kZXJlZCBlbGVtZW50IGNvbnRhaW5zIG1vcmUgY2hpbGQgbm9kZXMgdGhhbiBjbGllbnQgdmRvbS5gKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGFzV2FybmVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhlIFNTUmVkIERPTSBjb250YWlucyBtb3JlIG5vZGVzIHRoYW4gaXQgc2hvdWxkLiBSZW1vdmUgdGhlbS5cclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjdXIgPSBuZXh0O1xyXG4gICAgICAgICAgICAgICAgICAgIG5leHQgPSBuZXh0Lm5leHRTaWJsaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZShjdXIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHNoYXBlRmxhZyAmIDggLyogVEVYVF9DSElMRFJFTiAqLykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGVsLnRleHRDb250ZW50ICE9PSB2bm9kZS5jaGlsZHJlbikge1xyXG4gICAgICAgICAgICAgICAgICAgIGhhc01pc21hdGNoID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2FybihgSHlkcmF0aW9uIHRleHQgY29udGVudCBtaXNtYXRjaCBpbiA8JHt2bm9kZS50eXBlfT46XFxuYCArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBgLSBDbGllbnQ6ICR7ZWwudGV4dENvbnRlbnR9XFxuYCArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBgLSBTZXJ2ZXI6ICR7dm5vZGUuY2hpbGRyZW59YCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZWwudGV4dENvbnRlbnQgPSB2bm9kZS5jaGlsZHJlbjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZWwubmV4dFNpYmxpbmc7XHJcbiAgICB9O1xyXG4gICAgY29uc3QgaHlkcmF0ZUNoaWxkcmVuID0gKG5vZGUsIHBhcmVudFZOb2RlLCBjb250YWluZXIsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIG9wdGltaXplZCkgPT4ge1xyXG4gICAgICAgIG9wdGltaXplZCA9IG9wdGltaXplZCB8fCAhIXBhcmVudFZOb2RlLmR5bmFtaWNDaGlsZHJlbjtcclxuICAgICAgICBjb25zdCBjaGlsZHJlbiA9IHBhcmVudFZOb2RlLmNoaWxkcmVuO1xyXG4gICAgICAgIGNvbnN0IGwgPSBjaGlsZHJlbi5sZW5ndGg7XHJcbiAgICAgICAgbGV0IGhhc1dhcm5lZCA9IGZhbHNlO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHZub2RlID0gb3B0aW1pemVkXHJcbiAgICAgICAgICAgICAgICA/IGNoaWxkcmVuW2ldXHJcbiAgICAgICAgICAgICAgICA6IChjaGlsZHJlbltpXSA9IG5vcm1hbGl6ZVZOb2RlKGNoaWxkcmVuW2ldKSk7XHJcbiAgICAgICAgICAgIGlmIChub2RlKSB7XHJcbiAgICAgICAgICAgICAgICBub2RlID0gaHlkcmF0ZU5vZGUobm9kZSwgdm5vZGUsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIG9wdGltaXplZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBoYXNNaXNtYXRjaCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFoYXNXYXJuZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICB3YXJuKGBIeWRyYXRpb24gY2hpbGRyZW4gbWlzbWF0Y2ggaW4gPCR7Y29udGFpbmVyLnRhZ05hbWUudG9Mb3dlckNhc2UoKX0+OiBgICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYHNlcnZlciByZW5kZXJlZCBlbGVtZW50IGNvbnRhaW5zIGZld2VyIGNoaWxkIG5vZGVzIHRoYW4gY2xpZW50IHZkb20uYCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaGFzV2FybmVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIHRoZSBTU1JlZCBET00gZGlkbid0IGNvbnRhaW4gZW5vdWdoIG5vZGVzLiBNb3VudCB0aGUgbWlzc2luZyBvbmVzLlxyXG4gICAgICAgICAgICAgICAgcGF0Y2gobnVsbCwgdm5vZGUsIGNvbnRhaW5lciwgbnVsbCwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkdDb250YWluZXIoY29udGFpbmVyKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5vZGU7XHJcbiAgICB9O1xyXG4gICAgY29uc3QgaHlkcmF0ZUZyYWdtZW50ID0gKG5vZGUsIHZub2RlLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBvcHRpbWl6ZWQpID0+IHtcclxuICAgICAgICBjb25zdCBjb250YWluZXIgPSBwYXJlbnROb2RlKG5vZGUpO1xyXG4gICAgICAgIGNvbnN0IG5leHQgPSBoeWRyYXRlQ2hpbGRyZW4obmV4dFNpYmxpbmcobm9kZSksIHZub2RlLCBjb250YWluZXIsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIG9wdGltaXplZCk7XHJcbiAgICAgICAgaWYgKG5leHQgJiYgaXNDb21tZW50KG5leHQpICYmIG5leHQuZGF0YSA9PT0gJ10nKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXh0U2libGluZygodm5vZGUuYW5jaG9yID0gbmV4dCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gZnJhZ21lbnQgZGlkbid0IGh5ZHJhdGUgc3VjY2Vzc2Z1bGx5LCBzaW5jZSB3ZSBkaWRuJ3QgZ2V0IGEgZW5kIGFuY2hvclxyXG4gICAgICAgICAgICAvLyBiYWNrLiBUaGlzIHNob3VsZCBoYXZlIGxlZCB0byBub2RlL2NoaWxkcmVuIG1pc21hdGNoIHdhcm5pbmdzLlxyXG4gICAgICAgICAgICBoYXNNaXNtYXRjaCA9IHRydWU7XHJcbiAgICAgICAgICAgIC8vIHNpbmNlIHRoZSBhbmNob3IgaXMgbWlzc2luZywgd2UgbmVlZCB0byBjcmVhdGUgb25lIGFuZCBpbnNlcnQgaXRcclxuICAgICAgICAgICAgaW5zZXJ0KCh2bm9kZS5hbmNob3IgPSBjcmVhdGVDb21tZW50KGBdYCkpLCBjb250YWluZXIsIG5leHQpO1xyXG4gICAgICAgICAgICByZXR1cm4gbmV4dDtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgY29uc3QgaGFuZGxlTWlzbWF0Y2ggPSAobm9kZSwgdm5vZGUsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzRnJhZ21lbnQpID0+IHtcclxuICAgICAgICBoYXNNaXNtYXRjaCA9IHRydWU7XHJcbiAgICAgICAgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmXHJcbiAgICAgICAgICAgIHdhcm4oYEh5ZHJhdGlvbiBub2RlIG1pc21hdGNoOlxcbi0gQ2xpZW50IHZub2RlOmAsIHZub2RlLnR5cGUsIGBcXG4tIFNlcnZlciByZW5kZXJlZCBET006YCwgbm9kZSwgbm9kZS5ub2RlVHlwZSA9PT0gMyAvKiBURVhUICovXHJcbiAgICAgICAgICAgICAgICA/IGAodGV4dClgXHJcbiAgICAgICAgICAgICAgICA6IGlzQ29tbWVudChub2RlKSAmJiBub2RlLmRhdGEgPT09ICdbJ1xyXG4gICAgICAgICAgICAgICAgICAgID8gYChzdGFydCBvZiBmcmFnbWVudClgXHJcbiAgICAgICAgICAgICAgICAgICAgOiBgYCk7XHJcbiAgICAgICAgdm5vZGUuZWwgPSBudWxsO1xyXG4gICAgICAgIGlmIChpc0ZyYWdtZW50KSB7XHJcbiAgICAgICAgICAgIC8vIHJlbW92ZSBleGNlc3NpdmUgZnJhZ21lbnQgbm9kZXNcclxuICAgICAgICAgICAgY29uc3QgZW5kID0gbG9jYXRlQ2xvc2luZ0FzeW5jQW5jaG9yKG5vZGUpO1xyXG4gICAgICAgICAgICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbmV4dCA9IG5leHRTaWJsaW5nKG5vZGUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKG5leHQgJiYgbmV4dCAhPT0gZW5kKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlKG5leHQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgbmV4dCA9IG5leHRTaWJsaW5nKG5vZGUpO1xyXG4gICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IHBhcmVudE5vZGUobm9kZSk7XHJcbiAgICAgICAgcmVtb3ZlKG5vZGUpO1xyXG4gICAgICAgIHBhdGNoKG51bGwsIHZub2RlLCBjb250YWluZXIsIG5leHQsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHQ29udGFpbmVyKGNvbnRhaW5lcikpO1xyXG4gICAgICAgIHJldHVybiBuZXh0O1xyXG4gICAgfTtcclxuICAgIGNvbnN0IGxvY2F0ZUNsb3NpbmdBc3luY0FuY2hvciA9IChub2RlKSA9PiB7XHJcbiAgICAgICAgbGV0IG1hdGNoID0gMDtcclxuICAgICAgICB3aGlsZSAobm9kZSkge1xyXG4gICAgICAgICAgICBub2RlID0gbmV4dFNpYmxpbmcobm9kZSk7XHJcbiAgICAgICAgICAgIGlmIChub2RlICYmIGlzQ29tbWVudChub2RlKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKG5vZGUuZGF0YSA9PT0gJ1snKVxyXG4gICAgICAgICAgICAgICAgICAgIG1hdGNoKys7XHJcbiAgICAgICAgICAgICAgICBpZiAobm9kZS5kYXRhID09PSAnXScpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2ggPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5leHRTaWJsaW5nKG5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2gtLTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5vZGU7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFtoeWRyYXRlLCBoeWRyYXRlTm9kZV07XHJcbn1cblxubGV0IHN1cHBvcnRlZDtcclxubGV0IHBlcmY7XHJcbmZ1bmN0aW9uIHN0YXJ0TWVhc3VyZShpbnN0YW5jZSwgdHlwZSkge1xyXG4gICAgaWYgKGluc3RhbmNlLmFwcENvbnRleHQuY29uZmlnLnBlcmZvcm1hbmNlICYmIGlzU3VwcG9ydGVkKCkpIHtcclxuICAgICAgICBwZXJmLm1hcmsoYHZ1ZS0ke3R5cGV9LSR7aW5zdGFuY2UudWlkfWApO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGVuZE1lYXN1cmUoaW5zdGFuY2UsIHR5cGUpIHtcclxuICAgIGlmIChpbnN0YW5jZS5hcHBDb250ZXh0LmNvbmZpZy5wZXJmb3JtYW5jZSAmJiBpc1N1cHBvcnRlZCgpKSB7XHJcbiAgICAgICAgY29uc3Qgc3RhcnRUYWcgPSBgdnVlLSR7dHlwZX0tJHtpbnN0YW5jZS51aWR9YDtcclxuICAgICAgICBjb25zdCBlbmRUYWcgPSBzdGFydFRhZyArIGA6ZW5kYDtcclxuICAgICAgICBwZXJmLm1hcmsoZW5kVGFnKTtcclxuICAgICAgICBwZXJmLm1lYXN1cmUoYDwke2Zvcm1hdENvbXBvbmVudE5hbWUoaW5zdGFuY2UsIGluc3RhbmNlLnR5cGUpfT4gJHt0eXBlfWAsIHN0YXJ0VGFnLCBlbmRUYWcpO1xyXG4gICAgICAgIHBlcmYuY2xlYXJNYXJrcyhzdGFydFRhZyk7XHJcbiAgICAgICAgcGVyZi5jbGVhck1hcmtzKGVuZFRhZyk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gaXNTdXBwb3J0ZWQoKSB7XHJcbiAgICBpZiAoc3VwcG9ydGVkICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICByZXR1cm4gc3VwcG9ydGVkO1xyXG4gICAgfVxyXG4gICAgLyogZXNsaW50LWRpc2FibGUgbm8tcmVzdHJpY3RlZC1nbG9iYWxzICovXHJcbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LnBlcmZvcm1hbmNlKSB7XHJcbiAgICAgICAgc3VwcG9ydGVkID0gdHJ1ZTtcclxuICAgICAgICBwZXJmID0gd2luZG93LnBlcmZvcm1hbmNlO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgc3VwcG9ydGVkID0gZmFsc2U7XHJcbiAgICB9XHJcbiAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLXJlc3RyaWN0ZWQtZ2xvYmFscyAqL1xyXG4gICAgcmV0dXJuIHN1cHBvcnRlZDtcclxufVxuXG4vKipcclxuICogVGhpcyBpcyBvbmx5IGNhbGxlZCBpbiBlc20tYnVuZGxlciBidWlsZHMuXHJcbiAqIEl0IGlzIGNhbGxlZCB3aGVuIGEgcmVuZGVyZXIgaXMgY3JlYXRlZCwgaW4gYGJhc2VDcmVhdGVSZW5kZXJlcmAgc28gdGhhdFxyXG4gKiBpbXBvcnRpbmcgcnVudGltZS1jb3JlIGlzIHNpZGUtZWZmZWN0cyBmcmVlLlxyXG4gKlxyXG4gKiBpc3RhbmJ1bC1pZ25vcmUtbmV4dFxyXG4gKi9cclxuZnVuY3Rpb24gaW5pdEZlYXR1cmVGbGFncygpIHtcclxuICAgIGxldCBuZWVkV2FybiA9IGZhbHNlO1xyXG4gICAgaWYgKHR5cGVvZiBfX1ZVRV9PUFRJT05TX0FQSV9fICE9PSAnYm9vbGVhbicpIHtcclxuICAgICAgICBuZWVkV2FybiA9IHRydWU7XHJcbiAgICAgICAgZ2V0R2xvYmFsVGhpcygpLl9fVlVFX09QVElPTlNfQVBJX18gPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgaWYgKHR5cGVvZiBfX1ZVRV9QUk9EX0RFVlRPT0xTX18gIT09ICdib29sZWFuJykge1xyXG4gICAgICAgIG5lZWRXYXJuID0gdHJ1ZTtcclxuICAgICAgICBnZXRHbG9iYWxUaGlzKCkuX19WVUVfUFJPRF9ERVZUT09MU19fID0gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIG5lZWRXYXJuKSB7XHJcbiAgICAgICAgY29uc29sZS53YXJuKGBZb3UgYXJlIHJ1bm5pbmcgdGhlIGVzbS1idW5kbGVyIGJ1aWxkIG9mIFZ1ZS4gSXQgaXMgcmVjb21tZW5kZWQgdG8gYCArXHJcbiAgICAgICAgICAgIGBjb25maWd1cmUgeW91ciBidW5kbGVyIHRvIGV4cGxpY2l0bHkgcmVwbGFjZSBmZWF0dXJlIGZsYWcgZ2xvYmFscyBgICtcclxuICAgICAgICAgICAgYHdpdGggYm9vbGVhbiBsaXRlcmFscyB0byBnZXQgcHJvcGVyIHRyZWUtc2hha2luZyBpbiB0aGUgZmluYWwgYnVuZGxlLiBgICtcclxuICAgICAgICAgICAgYFNlZSBodHRwOi8vbGluay52dWVqcy5vcmcvZmVhdHVyZS1mbGFncyBmb3IgbW9yZSBkZXRhaWxzLmApO1xyXG4gICAgfVxyXG59XG5cbi8vIGltcGxlbWVudGF0aW9uLCBjbG9zZSB0byBuby1vcFxyXG5mdW5jdGlvbiBkZWZpbmVDb21wb25lbnQob3B0aW9ucykge1xyXG4gICAgcmV0dXJuIGlzRnVuY3Rpb24ob3B0aW9ucykgPyB7IHNldHVwOiBvcHRpb25zLCBuYW1lOiBvcHRpb25zLm5hbWUgfSA6IG9wdGlvbnM7XHJcbn1cblxuY29uc3QgaXNBc3luY1dyYXBwZXIgPSAoaSkgPT4gISFpLnR5cGUuX19hc3luY0xvYWRlcjtcclxuZnVuY3Rpb24gZGVmaW5lQXN5bmNDb21wb25lbnQoc291cmNlKSB7XHJcbiAgICBpZiAoaXNGdW5jdGlvbihzb3VyY2UpKSB7XHJcbiAgICAgICAgc291cmNlID0geyBsb2FkZXI6IHNvdXJjZSB9O1xyXG4gICAgfVxyXG4gICAgY29uc3QgeyBsb2FkZXIsIGxvYWRpbmdDb21wb25lbnQ6IGxvYWRpbmdDb21wb25lbnQsIGVycm9yQ29tcG9uZW50OiBlcnJvckNvbXBvbmVudCwgZGVsYXkgPSAyMDAsIHRpbWVvdXQsIC8vIHVuZGVmaW5lZCA9IG5ldmVyIHRpbWVzIG91dFxyXG4gICAgc3VzcGVuc2libGUgPSB0cnVlLCBvbkVycm9yOiB1c2VyT25FcnJvciB9ID0gc291cmNlO1xyXG4gICAgbGV0IHBlbmRpbmdSZXF1ZXN0ID0gbnVsbDtcclxuICAgIGxldCByZXNvbHZlZENvbXA7XHJcbiAgICBsZXQgcmV0cmllcyA9IDA7XHJcbiAgICBjb25zdCByZXRyeSA9ICgpID0+IHtcclxuICAgICAgICByZXRyaWVzKys7XHJcbiAgICAgICAgcGVuZGluZ1JlcXVlc3QgPSBudWxsO1xyXG4gICAgICAgIHJldHVybiBsb2FkKCk7XHJcbiAgICB9O1xyXG4gICAgY29uc3QgbG9hZCA9ICgpID0+IHtcclxuICAgICAgICBsZXQgdGhpc1JlcXVlc3Q7XHJcbiAgICAgICAgcmV0dXJuIChwZW5kaW5nUmVxdWVzdCB8fFxyXG4gICAgICAgICAgICAodGhpc1JlcXVlc3QgPSBwZW5kaW5nUmVxdWVzdCA9IGxvYWRlcigpXHJcbiAgICAgICAgICAgICAgICAuY2F0Y2goZXJyID0+IHtcclxuICAgICAgICAgICAgICAgIGVyciA9IGVyciBpbnN0YW5jZW9mIEVycm9yID8gZXJyIDogbmV3IEVycm9yKFN0cmluZyhlcnIpKTtcclxuICAgICAgICAgICAgICAgIGlmICh1c2VyT25FcnJvcikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHVzZXJSZXRyeSA9ICgpID0+IHJlc29sdmUocmV0cnkoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHVzZXJGYWlsID0gKCkgPT4gcmVqZWN0KGVycik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJPbkVycm9yKGVyciwgdXNlclJldHJ5LCB1c2VyRmFpbCwgcmV0cmllcyArIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgZXJyO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oKGNvbXApID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzUmVxdWVzdCAhPT0gcGVuZGluZ1JlcXVlc3QgJiYgcGVuZGluZ1JlcXVlc3QpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGVuZGluZ1JlcXVlc3Q7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFjb21wKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2FybihgQXN5bmMgY29tcG9uZW50IGxvYWRlciByZXNvbHZlZCB0byB1bmRlZmluZWQuIGAgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBgSWYgeW91IGFyZSB1c2luZyByZXRyeSgpLCBtYWtlIHN1cmUgdG8gcmV0dXJuIGl0cyByZXR1cm4gdmFsdWUuYCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBpbnRlcm9wIG1vZHVsZSBkZWZhdWx0XHJcbiAgICAgICAgICAgICAgICBpZiAoY29tcCAmJlxyXG4gICAgICAgICAgICAgICAgICAgIChjb21wLl9fZXNNb2R1bGUgfHwgY29tcFtTeW1ib2wudG9TdHJpbmdUYWddID09PSAnTW9kdWxlJykpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb21wID0gY29tcC5kZWZhdWx0O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBjb21wICYmICFpc09iamVjdChjb21wKSAmJiAhaXNGdW5jdGlvbihjb21wKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBhc3luYyBjb21wb25lbnQgbG9hZCByZXN1bHQ6ICR7Y29tcH1gKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJlc29sdmVkQ29tcCA9IGNvbXA7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY29tcDtcclxuICAgICAgICAgICAgfSkpKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gZGVmaW5lQ29tcG9uZW50KHtcclxuICAgICAgICBfX2FzeW5jTG9hZGVyOiBsb2FkLFxyXG4gICAgICAgIG5hbWU6ICdBc3luY0NvbXBvbmVudFdyYXBwZXInLFxyXG4gICAgICAgIHNldHVwKCkge1xyXG4gICAgICAgICAgICBjb25zdCBpbnN0YW5jZSA9IGN1cnJlbnRJbnN0YW5jZTtcclxuICAgICAgICAgICAgLy8gYWxyZWFkeSByZXNvbHZlZFxyXG4gICAgICAgICAgICBpZiAocmVzb2x2ZWRDb21wKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKCkgPT4gY3JlYXRlSW5uZXJDb21wKHJlc29sdmVkQ29tcCwgaW5zdGFuY2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IG9uRXJyb3IgPSAoZXJyKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBwZW5kaW5nUmVxdWVzdCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICBoYW5kbGVFcnJvcihlcnIsIGluc3RhbmNlLCAxMyAvKiBBU1lOQ19DT01QT05FTlRfTE9BREVSICovLCAhZXJyb3JDb21wb25lbnQgLyogZG8gbm90IHRocm93IGluIGRldiBpZiB1c2VyIHByb3ZpZGVkIGVycm9yIGNvbXBvbmVudCAqLyk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIC8vIHN1c3BlbnNlLWNvbnRyb2xsZWQgb3IgU1NSLlxyXG4gICAgICAgICAgICBpZiAoKCBzdXNwZW5zaWJsZSAmJiBpbnN0YW5jZS5zdXNwZW5zZSkgfHxcclxuICAgICAgICAgICAgICAgIChmYWxzZSApKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbG9hZCgpXHJcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oY29tcCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICgpID0+IGNyZWF0ZUlubmVyQ29tcChjb21wLCBpbnN0YW5jZSk7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC5jYXRjaChlcnIgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIG9uRXJyb3IoZXJyKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKCkgPT4gZXJyb3JDb21wb25lbnRcclxuICAgICAgICAgICAgICAgICAgICAgICAgPyBjcmVhdGVWTm9kZShlcnJvckNvbXBvbmVudCwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3I6IGVyclxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA6IG51bGw7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBsb2FkZWQgPSByZWYoZmFsc2UpO1xyXG4gICAgICAgICAgICBjb25zdCBlcnJvciA9IHJlZigpO1xyXG4gICAgICAgICAgICBjb25zdCBkZWxheWVkID0gcmVmKCEhZGVsYXkpO1xyXG4gICAgICAgICAgICBpZiAoZGVsYXkpIHtcclxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGRlbGF5ZWQudmFsdWUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH0sIGRlbGF5KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGltZW91dCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWxvYWRlZC52YWx1ZSAmJiAhZXJyb3IudmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZXJyID0gbmV3IEVycm9yKGBBc3luYyBjb21wb25lbnQgdGltZWQgb3V0IGFmdGVyICR7dGltZW91dH1tcy5gKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb25FcnJvcihlcnIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvci52YWx1ZSA9IGVycjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LCB0aW1lb3V0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsb2FkKClcclxuICAgICAgICAgICAgICAgIC50aGVuKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIGxvYWRlZC52YWx1ZSA9IHRydWU7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAuY2F0Y2goZXJyID0+IHtcclxuICAgICAgICAgICAgICAgIG9uRXJyb3IoZXJyKTtcclxuICAgICAgICAgICAgICAgIGVycm9yLnZhbHVlID0gZXJyO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChsb2FkZWQudmFsdWUgJiYgcmVzb2x2ZWRDb21wKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUlubmVyQ29tcChyZXNvbHZlZENvbXAsIGluc3RhbmNlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGVycm9yLnZhbHVlICYmIGVycm9yQ29tcG9uZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZVZOb2RlKGVycm9yQ29tcG9uZW50LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiBlcnJvci52YWx1ZVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAobG9hZGluZ0NvbXBvbmVudCAmJiAhZGVsYXllZC52YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjcmVhdGVWTm9kZShsb2FkaW5nQ29tcG9uZW50KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufVxyXG5mdW5jdGlvbiBjcmVhdGVJbm5lckNvbXAoY29tcCwgeyB2bm9kZTogeyByZWYsIHByb3BzLCBjaGlsZHJlbiB9IH0pIHtcclxuICAgIGNvbnN0IHZub2RlID0gY3JlYXRlVk5vZGUoY29tcCwgcHJvcHMsIGNoaWxkcmVuKTtcclxuICAgIC8vIGVuc3VyZSBpbm5lciBjb21wb25lbnQgaW5oZXJpdHMgdGhlIGFzeW5jIHdyYXBwZXIncyByZWYgb3duZXJcclxuICAgIHZub2RlLnJlZiA9IHJlZjtcclxuICAgIHJldHVybiB2bm9kZTtcclxufVxuXG5jb25zdCBwcm9kRWZmZWN0T3B0aW9ucyA9IHtcclxuICAgIHNjaGVkdWxlcjogcXVldWVKb2IsXHJcbiAgICAvLyAjMTgwMSwgIzIwNDMgY29tcG9uZW50IHJlbmRlciBlZmZlY3RzIHNob3VsZCBhbGxvdyByZWN1cnNpdmUgdXBkYXRlc1xyXG4gICAgYWxsb3dSZWN1cnNlOiB0cnVlXHJcbn07XHJcbmZ1bmN0aW9uIGNyZWF0ZURldkVmZmVjdE9wdGlvbnMoaW5zdGFuY2UpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgc2NoZWR1bGVyOiBxdWV1ZUpvYixcclxuICAgICAgICBhbGxvd1JlY3Vyc2U6IHRydWUsXHJcbiAgICAgICAgb25UcmFjazogaW5zdGFuY2UucnRjID8gZSA9PiBpbnZva2VBcnJheUZucyhpbnN0YW5jZS5ydGMsIGUpIDogdm9pZCAwLFxyXG4gICAgICAgIG9uVHJpZ2dlcjogaW5zdGFuY2UucnRnID8gZSA9PiBpbnZva2VBcnJheUZucyhpbnN0YW5jZS5ydGcsIGUpIDogdm9pZCAwXHJcbiAgICB9O1xyXG59XHJcbmNvbnN0IHF1ZXVlUG9zdFJlbmRlckVmZmVjdCA9ICBxdWV1ZUVmZmVjdFdpdGhTdXNwZW5zZVxyXG4gICAgO1xyXG5jb25zdCBzZXRSZWYgPSAocmF3UmVmLCBvbGRSYXdSZWYsIHBhcmVudFN1c3BlbnNlLCB2bm9kZSkgPT4ge1xyXG4gICAgaWYgKGlzQXJyYXkocmF3UmVmKSkge1xyXG4gICAgICAgIHJhd1JlZi5mb3JFYWNoKChyLCBpKSA9PiBzZXRSZWYociwgb2xkUmF3UmVmICYmIChpc0FycmF5KG9sZFJhd1JlZikgPyBvbGRSYXdSZWZbaV0gOiBvbGRSYXdSZWYpLCBwYXJlbnRTdXNwZW5zZSwgdm5vZGUpKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBsZXQgdmFsdWU7XHJcbiAgICBpZiAoIXZub2RlIHx8IGlzQXN5bmNXcmFwcGVyKHZub2RlKSkge1xyXG4gICAgICAgIHZhbHVlID0gbnVsbDtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGlmICh2bm9kZS5zaGFwZUZsYWcgJiA0IC8qIFNUQVRFRlVMX0NPTVBPTkVOVCAqLykge1xyXG4gICAgICAgICAgICB2YWx1ZSA9IHZub2RlLmNvbXBvbmVudC5leHBvc2VkIHx8IHZub2RlLmNvbXBvbmVudC5wcm94eTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHZhbHVlID0gdm5vZGUuZWw7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY29uc3QgeyBpOiBvd25lciwgcjogcmVmIH0gPSByYXdSZWY7XHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFvd25lcikge1xyXG4gICAgICAgIHdhcm4oYE1pc3NpbmcgcmVmIG93bmVyIGNvbnRleHQuIHJlZiBjYW5ub3QgYmUgdXNlZCBvbiBob2lzdGVkIHZub2Rlcy4gYCArXHJcbiAgICAgICAgICAgIGBBIHZub2RlIHdpdGggcmVmIG11c3QgYmUgY3JlYXRlZCBpbnNpZGUgdGhlIHJlbmRlciBmdW5jdGlvbi5gKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBjb25zdCBvbGRSZWYgPSBvbGRSYXdSZWYgJiYgb2xkUmF3UmVmLnI7XHJcbiAgICBjb25zdCByZWZzID0gb3duZXIucmVmcyA9PT0gRU1QVFlfT0JKID8gKG93bmVyLnJlZnMgPSB7fSkgOiBvd25lci5yZWZzO1xyXG4gICAgY29uc3Qgc2V0dXBTdGF0ZSA9IG93bmVyLnNldHVwU3RhdGU7XHJcbiAgICAvLyB1bnNldCBvbGQgcmVmXHJcbiAgICBpZiAob2xkUmVmICE9IG51bGwgJiYgb2xkUmVmICE9PSByZWYpIHtcclxuICAgICAgICBpZiAoaXNTdHJpbmcob2xkUmVmKSkge1xyXG4gICAgICAgICAgICByZWZzW29sZFJlZl0gPSBudWxsO1xyXG4gICAgICAgICAgICBpZiAoaGFzT3duKHNldHVwU3RhdGUsIG9sZFJlZikpIHtcclxuICAgICAgICAgICAgICAgIHNldHVwU3RhdGVbb2xkUmVmXSA9IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoaXNSZWYob2xkUmVmKSkge1xyXG4gICAgICAgICAgICBvbGRSZWYudmFsdWUgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmIChpc1N0cmluZyhyZWYpKSB7XHJcbiAgICAgICAgY29uc3QgZG9TZXQgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIHJlZnNbcmVmXSA9IHZhbHVlO1xyXG4gICAgICAgICAgICBpZiAoaGFzT3duKHNldHVwU3RhdGUsIHJlZikpIHtcclxuICAgICAgICAgICAgICAgIHNldHVwU3RhdGVbcmVmXSA9IHZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvLyAjMTc4OTogZm9yIG5vbi1udWxsIHZhbHVlcywgc2V0IHRoZW0gYWZ0ZXIgcmVuZGVyXHJcbiAgICAgICAgLy8gbnVsbCB2YWx1ZXMgbWVhbnMgdGhpcyBpcyB1bm1vdW50IGFuZCBpdCBzaG91bGQgbm90IG92ZXJ3cml0ZSBhbm90aGVyXHJcbiAgICAgICAgLy8gcmVmIHdpdGggdGhlIHNhbWUga2V5XHJcbiAgICAgICAgaWYgKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGRvU2V0LmlkID0gLTE7XHJcbiAgICAgICAgICAgIHF1ZXVlUG9zdFJlbmRlckVmZmVjdChkb1NldCwgcGFyZW50U3VzcGVuc2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgZG9TZXQoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChpc1JlZihyZWYpKSB7XHJcbiAgICAgICAgY29uc3QgZG9TZXQgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIHJlZi52YWx1ZSA9IHZhbHVlO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgaWYgKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGRvU2V0LmlkID0gLTE7XHJcbiAgICAgICAgICAgIHF1ZXVlUG9zdFJlbmRlckVmZmVjdChkb1NldCwgcGFyZW50U3VzcGVuc2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgZG9TZXQoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChpc0Z1bmN0aW9uKHJlZikpIHtcclxuICAgICAgICBjYWxsV2l0aEVycm9ySGFuZGxpbmcocmVmLCBvd25lciwgMTIgLyogRlVOQ1RJT05fUkVGICovLCBbdmFsdWUsIHJlZnNdKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgIHdhcm4oJ0ludmFsaWQgdGVtcGxhdGUgcmVmIHR5cGU6JywgdmFsdWUsIGAoJHt0eXBlb2YgdmFsdWV9KWApO1xyXG4gICAgfVxyXG59O1xyXG4vKipcclxuICogVGhlIGNyZWF0ZVJlbmRlcmVyIGZ1bmN0aW9uIGFjY2VwdHMgdHdvIGdlbmVyaWMgYXJndW1lbnRzOlxyXG4gKiBIb3N0Tm9kZSBhbmQgSG9zdEVsZW1lbnQsIGNvcnJlc3BvbmRpbmcgdG8gTm9kZSBhbmQgRWxlbWVudCB0eXBlcyBpbiB0aGVcclxuICogaG9zdCBlbnZpcm9ubWVudC4gRm9yIGV4YW1wbGUsIGZvciBydW50aW1lLWRvbSwgSG9zdE5vZGUgd291bGQgYmUgdGhlIERPTVxyXG4gKiBgTm9kZWAgaW50ZXJmYWNlIGFuZCBIb3N0RWxlbWVudCB3b3VsZCBiZSB0aGUgRE9NIGBFbGVtZW50YCBpbnRlcmZhY2UuXHJcbiAqXHJcbiAqIEN1c3RvbSByZW5kZXJlcnMgY2FuIHBhc3MgaW4gdGhlIHBsYXRmb3JtIHNwZWNpZmljIHR5cGVzIGxpa2UgdGhpczpcclxuICpcclxuICogYGBgIGpzXHJcbiAqIGNvbnN0IHsgcmVuZGVyLCBjcmVhdGVBcHAgfSA9IGNyZWF0ZVJlbmRlcmVyPE5vZGUsIEVsZW1lbnQ+KHtcclxuICogICBwYXRjaFByb3AsXHJcbiAqICAgLi4ubm9kZU9wc1xyXG4gKiB9KVxyXG4gKiBgYGBcclxuICovXHJcbmZ1bmN0aW9uIGNyZWF0ZVJlbmRlcmVyKG9wdGlvbnMpIHtcclxuICAgIHJldHVybiBiYXNlQ3JlYXRlUmVuZGVyZXIob3B0aW9ucyk7XHJcbn1cclxuLy8gU2VwYXJhdGUgQVBJIGZvciBjcmVhdGluZyBoeWRyYXRpb24tZW5hYmxlZCByZW5kZXJlci5cclxuLy8gSHlkcmF0aW9uIGxvZ2ljIGlzIG9ubHkgdXNlZCB3aGVuIGNhbGxpbmcgdGhpcyBmdW5jdGlvbiwgbWFraW5nIGl0XHJcbi8vIHRyZWUtc2hha2FibGUuXHJcbmZ1bmN0aW9uIGNyZWF0ZUh5ZHJhdGlvblJlbmRlcmVyKG9wdGlvbnMpIHtcclxuICAgIHJldHVybiBiYXNlQ3JlYXRlUmVuZGVyZXIob3B0aW9ucywgY3JlYXRlSHlkcmF0aW9uRnVuY3Rpb25zKTtcclxufVxyXG4vLyBpbXBsZW1lbnRhdGlvblxyXG5mdW5jdGlvbiBiYXNlQ3JlYXRlUmVuZGVyZXIob3B0aW9ucywgY3JlYXRlSHlkcmF0aW9uRm5zKSB7XHJcbiAgICAvLyBjb21waWxlLXRpbWUgZmVhdHVyZSBmbGFncyBjaGVja1xyXG4gICAge1xyXG4gICAgICAgIGluaXRGZWF0dXJlRmxhZ3MoKTtcclxuICAgIH1cclxuICAgIGNvbnN0IHsgaW5zZXJ0OiBob3N0SW5zZXJ0LCByZW1vdmU6IGhvc3RSZW1vdmUsIHBhdGNoUHJvcDogaG9zdFBhdGNoUHJvcCwgZm9yY2VQYXRjaFByb3A6IGhvc3RGb3JjZVBhdGNoUHJvcCwgY3JlYXRlRWxlbWVudDogaG9zdENyZWF0ZUVsZW1lbnQsIGNyZWF0ZVRleHQ6IGhvc3RDcmVhdGVUZXh0LCBjcmVhdGVDb21tZW50OiBob3N0Q3JlYXRlQ29tbWVudCwgc2V0VGV4dDogaG9zdFNldFRleHQsIHNldEVsZW1lbnRUZXh0OiBob3N0U2V0RWxlbWVudFRleHQsIHBhcmVudE5vZGU6IGhvc3RQYXJlbnROb2RlLCBuZXh0U2libGluZzogaG9zdE5leHRTaWJsaW5nLCBzZXRTY29wZUlkOiBob3N0U2V0U2NvcGVJZCA9IE5PT1AsIGNsb25lTm9kZTogaG9zdENsb25lTm9kZSwgaW5zZXJ0U3RhdGljQ29udGVudDogaG9zdEluc2VydFN0YXRpY0NvbnRlbnQgfSA9IG9wdGlvbnM7XHJcbiAgICAvLyBOb3RlOiBmdW5jdGlvbnMgaW5zaWRlIHRoaXMgY2xvc3VyZSBzaG91bGQgdXNlIGBjb25zdCB4eHggPSAoKSA9PiB7fWBcclxuICAgIC8vIHN0eWxlIGluIG9yZGVyIHRvIHByZXZlbnQgYmVpbmcgaW5saW5lZCBieSBtaW5pZmllcnMuXHJcbiAgICBjb25zdCBwYXRjaCA9IChuMSwgbjIsIGNvbnRhaW5lciwgYW5jaG9yID0gbnVsbCwgcGFyZW50Q29tcG9uZW50ID0gbnVsbCwgcGFyZW50U3VzcGVuc2UgPSBudWxsLCBpc1NWRyA9IGZhbHNlLCBvcHRpbWl6ZWQgPSBmYWxzZSkgPT4ge1xyXG4gICAgICAgIC8vIHBhdGNoaW5nICYgbm90IHNhbWUgdHlwZSwgdW5tb3VudCBvbGQgdHJlZVxyXG4gICAgICAgIGlmIChuMSAmJiAhaXNTYW1lVk5vZGVUeXBlKG4xLCBuMikpIHtcclxuICAgICAgICAgICAgYW5jaG9yID0gZ2V0TmV4dEhvc3ROb2RlKG4xKTtcclxuICAgICAgICAgICAgdW5tb3VudChuMSwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIG4xID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG4yLnBhdGNoRmxhZyA9PT0gLTIgLyogQkFJTCAqLykge1xyXG4gICAgICAgICAgICBvcHRpbWl6ZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgbjIuZHluYW1pY0NoaWxkcmVuID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgeyB0eXBlLCByZWYsIHNoYXBlRmxhZyB9ID0gbjI7XHJcbiAgICAgICAgc3dpdGNoICh0eXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgVGV4dDpcclxuICAgICAgICAgICAgICAgIHByb2Nlc3NUZXh0KG4xLCBuMiwgY29udGFpbmVyLCBhbmNob3IpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgQ29tbWVudDpcclxuICAgICAgICAgICAgICAgIHByb2Nlc3NDb21tZW50Tm9kZShuMSwgbjIsIGNvbnRhaW5lciwgYW5jaG9yKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFN0YXRpYzpcclxuICAgICAgICAgICAgICAgIGlmIChuMSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbW91bnRTdGF0aWNOb2RlKG4yLCBjb250YWluZXIsIGFuY2hvciwgaXNTVkcpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGF0Y2hTdGF0aWNOb2RlKG4xLCBuMiwgY29udGFpbmVyLCBpc1NWRyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBGcmFnbWVudDpcclxuICAgICAgICAgICAgICAgIHByb2Nlc3NGcmFnbWVudChuMSwgbjIsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgb3B0aW1pemVkKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgaWYgKHNoYXBlRmxhZyAmIDEgLyogRUxFTUVOVCAqLykge1xyXG4gICAgICAgICAgICAgICAgICAgIHByb2Nlc3NFbGVtZW50KG4xLCBuMiwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBvcHRpbWl6ZWQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoc2hhcGVGbGFnICYgNiAvKiBDT01QT05FTlQgKi8pIHtcclxuICAgICAgICAgICAgICAgICAgICBwcm9jZXNzQ29tcG9uZW50KG4xLCBuMiwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBvcHRpbWl6ZWQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoc2hhcGVGbGFnICYgNjQgLyogVEVMRVBPUlQgKi8pIHtcclxuICAgICAgICAgICAgICAgICAgICB0eXBlLnByb2Nlc3MobjEsIG4yLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIG9wdGltaXplZCwgaW50ZXJuYWxzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKCBzaGFwZUZsYWcgJiAxMjggLyogU1VTUEVOU0UgKi8pIHtcclxuICAgICAgICAgICAgICAgICAgICB0eXBlLnByb2Nlc3MobjEsIG4yLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIG9wdGltaXplZCwgaW50ZXJuYWxzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHdhcm4oJ0ludmFsaWQgVk5vZGUgdHlwZTonLCB0eXBlLCBgKCR7dHlwZW9mIHR5cGV9KWApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBzZXQgcmVmXHJcbiAgICAgICAgaWYgKHJlZiAhPSBudWxsICYmIHBhcmVudENvbXBvbmVudCkge1xyXG4gICAgICAgICAgICBzZXRSZWYocmVmLCBuMSAmJiBuMS5yZWYsIHBhcmVudFN1c3BlbnNlLCBuMik7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGNvbnN0IHByb2Nlc3NUZXh0ID0gKG4xLCBuMiwgY29udGFpbmVyLCBhbmNob3IpID0+IHtcclxuICAgICAgICBpZiAobjEgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBob3N0SW5zZXJ0KChuMi5lbCA9IGhvc3RDcmVhdGVUZXh0KG4yLmNoaWxkcmVuKSksIGNvbnRhaW5lciwgYW5jaG9yKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGVsID0gKG4yLmVsID0gbjEuZWwpO1xyXG4gICAgICAgICAgICBpZiAobjIuY2hpbGRyZW4gIT09IG4xLmNoaWxkcmVuKSB7XHJcbiAgICAgICAgICAgICAgICBob3N0U2V0VGV4dChlbCwgbjIuY2hpbGRyZW4pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGNvbnN0IHByb2Nlc3NDb21tZW50Tm9kZSA9IChuMSwgbjIsIGNvbnRhaW5lciwgYW5jaG9yKSA9PiB7XHJcbiAgICAgICAgaWYgKG4xID09IG51bGwpIHtcclxuICAgICAgICAgICAgaG9zdEluc2VydCgobjIuZWwgPSBob3N0Q3JlYXRlQ29tbWVudChuMi5jaGlsZHJlbiB8fCAnJykpLCBjb250YWluZXIsIGFuY2hvcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyB0aGVyZSdzIG5vIHN1cHBvcnQgZm9yIGR5bmFtaWMgY29tbWVudHNcclxuICAgICAgICAgICAgbjIuZWwgPSBuMS5lbDtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgY29uc3QgbW91bnRTdGF0aWNOb2RlID0gKG4yLCBjb250YWluZXIsIGFuY2hvciwgaXNTVkcpID0+IHtcclxuICAgICAgICBbbjIuZWwsIG4yLmFuY2hvcl0gPSBob3N0SW5zZXJ0U3RhdGljQ29udGVudChuMi5jaGlsZHJlbiwgY29udGFpbmVyLCBhbmNob3IsIGlzU1ZHKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIERldiAvIEhNUiBvbmx5XHJcbiAgICAgKi9cclxuICAgIGNvbnN0IHBhdGNoU3RhdGljTm9kZSA9IChuMSwgbjIsIGNvbnRhaW5lciwgaXNTVkcpID0+IHtcclxuICAgICAgICAvLyBzdGF0aWMgbm9kZXMgYXJlIG9ubHkgcGF0Y2hlZCBkdXJpbmcgZGV2IGZvciBITVJcclxuICAgICAgICBpZiAobjIuY2hpbGRyZW4gIT09IG4xLmNoaWxkcmVuKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGFuY2hvciA9IGhvc3ROZXh0U2libGluZyhuMS5hbmNob3IpO1xyXG4gICAgICAgICAgICAvLyByZW1vdmUgZXhpc3RpbmdcclxuICAgICAgICAgICAgcmVtb3ZlU3RhdGljTm9kZShuMSk7XHJcbiAgICAgICAgICAgIFtuMi5lbCwgbjIuYW5jaG9yXSA9IGhvc3RJbnNlcnRTdGF0aWNDb250ZW50KG4yLmNoaWxkcmVuLCBjb250YWluZXIsIGFuY2hvciwgaXNTVkcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgbjIuZWwgPSBuMS5lbDtcclxuICAgICAgICAgICAgbjIuYW5jaG9yID0gbjEuYW5jaG9yO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBjb25zdCBtb3ZlU3RhdGljTm9kZSA9ICh7IGVsLCBhbmNob3IgfSwgY29udGFpbmVyLCBuZXh0U2libGluZykgPT4ge1xyXG4gICAgICAgIGxldCBuZXh0O1xyXG4gICAgICAgIHdoaWxlIChlbCAmJiBlbCAhPT0gYW5jaG9yKSB7XHJcbiAgICAgICAgICAgIG5leHQgPSBob3N0TmV4dFNpYmxpbmcoZWwpO1xyXG4gICAgICAgICAgICBob3N0SW5zZXJ0KGVsLCBjb250YWluZXIsIG5leHRTaWJsaW5nKTtcclxuICAgICAgICAgICAgZWwgPSBuZXh0O1xyXG4gICAgICAgIH1cclxuICAgICAgICBob3N0SW5zZXJ0KGFuY2hvciwgY29udGFpbmVyLCBuZXh0U2libGluZyk7XHJcbiAgICB9O1xyXG4gICAgY29uc3QgcmVtb3ZlU3RhdGljTm9kZSA9ICh7IGVsLCBhbmNob3IgfSkgPT4ge1xyXG4gICAgICAgIGxldCBuZXh0O1xyXG4gICAgICAgIHdoaWxlIChlbCAmJiBlbCAhPT0gYW5jaG9yKSB7XHJcbiAgICAgICAgICAgIG5leHQgPSBob3N0TmV4dFNpYmxpbmcoZWwpO1xyXG4gICAgICAgICAgICBob3N0UmVtb3ZlKGVsKTtcclxuICAgICAgICAgICAgZWwgPSBuZXh0O1xyXG4gICAgICAgIH1cclxuICAgICAgICBob3N0UmVtb3ZlKGFuY2hvcik7XHJcbiAgICB9O1xyXG4gICAgY29uc3QgcHJvY2Vzc0VsZW1lbnQgPSAobjEsIG4yLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIG9wdGltaXplZCkgPT4ge1xyXG4gICAgICAgIGlzU1ZHID0gaXNTVkcgfHwgbjIudHlwZSA9PT0gJ3N2Zyc7XHJcbiAgICAgICAgaWYgKG4xID09IG51bGwpIHtcclxuICAgICAgICAgICAgbW91bnRFbGVtZW50KG4yLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIG9wdGltaXplZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBwYXRjaEVsZW1lbnQobjEsIG4yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgb3B0aW1pemVkKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgY29uc3QgbW91bnRFbGVtZW50ID0gKHZub2RlLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIG9wdGltaXplZCkgPT4ge1xyXG4gICAgICAgIGxldCBlbDtcclxuICAgICAgICBsZXQgdm5vZGVIb29rO1xyXG4gICAgICAgIGNvbnN0IHsgdHlwZSwgcHJvcHMsIHNoYXBlRmxhZywgdHJhbnNpdGlvbiwgc2NvcGVJZCwgcGF0Y2hGbGFnLCBkaXJzIH0gPSB2bm9kZTtcclxuICAgICAgICBpZiAoIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJlxyXG4gICAgICAgICAgICB2bm9kZS5lbCAmJlxyXG4gICAgICAgICAgICBob3N0Q2xvbmVOb2RlICE9PSB1bmRlZmluZWQgJiZcclxuICAgICAgICAgICAgcGF0Y2hGbGFnID09PSAtMSAvKiBIT0lTVEVEICovKSB7XHJcbiAgICAgICAgICAgIC8vIElmIGEgdm5vZGUgaGFzIG5vbi1udWxsIGVsLCBpdCBtZWFucyBpdCdzIGJlaW5nIHJldXNlZC5cclxuICAgICAgICAgICAgLy8gT25seSBzdGF0aWMgdm5vZGVzIGNhbiBiZSByZXVzZWQsIHNvIGl0cyBtb3VudGVkIERPTSBub2RlcyBzaG91bGQgYmVcclxuICAgICAgICAgICAgLy8gZXhhY3RseSB0aGUgc2FtZSwgYW5kIHdlIGNhbiBzaW1wbHkgZG8gYSBjbG9uZSBoZXJlLlxyXG4gICAgICAgICAgICAvLyBvbmx5IGRvIHRoaXMgaW4gcHJvZHVjdGlvbiBzaW5jZSBjbG9uZWQgdHJlZXMgY2Fubm90IGJlIEhNUiB1cGRhdGVkLlxyXG4gICAgICAgICAgICBlbCA9IHZub2RlLmVsID0gaG9zdENsb25lTm9kZSh2bm9kZS5lbCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBlbCA9IHZub2RlLmVsID0gaG9zdENyZWF0ZUVsZW1lbnQodm5vZGUudHlwZSwgaXNTVkcsIHByb3BzICYmIHByb3BzLmlzKTtcclxuICAgICAgICAgICAgLy8gbW91bnQgY2hpbGRyZW4gZmlyc3QsIHNpbmNlIHNvbWUgcHJvcHMgbWF5IHJlbHkgb24gY2hpbGQgY29udGVudFxyXG4gICAgICAgICAgICAvLyBiZWluZyBhbHJlYWR5IHJlbmRlcmVkLCBlLmcuIGA8c2VsZWN0IHZhbHVlPmBcclxuICAgICAgICAgICAgaWYgKHNoYXBlRmxhZyAmIDggLyogVEVYVF9DSElMRFJFTiAqLykge1xyXG4gICAgICAgICAgICAgICAgaG9zdFNldEVsZW1lbnRUZXh0KGVsLCB2bm9kZS5jaGlsZHJlbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoc2hhcGVGbGFnICYgMTYgLyogQVJSQVlfQ0hJTERSRU4gKi8pIHtcclxuICAgICAgICAgICAgICAgIG1vdW50Q2hpbGRyZW4odm5vZGUuY2hpbGRyZW4sIGVsLCBudWxsLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRyAmJiB0eXBlICE9PSAnZm9yZWlnbk9iamVjdCcsIG9wdGltaXplZCB8fCAhIXZub2RlLmR5bmFtaWNDaGlsZHJlbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGRpcnMpIHtcclxuICAgICAgICAgICAgICAgIGludm9rZURpcmVjdGl2ZUhvb2sodm5vZGUsIG51bGwsIHBhcmVudENvbXBvbmVudCwgJ2NyZWF0ZWQnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBwcm9wc1xyXG4gICAgICAgICAgICBpZiAocHJvcHMpIHtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIHByb3BzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpc1Jlc2VydmVkUHJvcChrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhvc3RQYXRjaFByb3AoZWwsIGtleSwgbnVsbCwgcHJvcHNba2V5XSwgaXNTVkcsIHZub2RlLmNoaWxkcmVuLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCB1bm1vdW50Q2hpbGRyZW4pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICgodm5vZGVIb29rID0gcHJvcHMub25Wbm9kZUJlZm9yZU1vdW50KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGludm9rZVZOb2RlSG9vayh2bm9kZUhvb2ssIHBhcmVudENvbXBvbmVudCwgdm5vZGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIHNjb3BlSWRcclxuICAgICAgICAgICAgc2V0U2NvcGVJZChlbCwgc2NvcGVJZCwgdm5vZGUsIHBhcmVudENvbXBvbmVudCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgfHwgX19WVUVfUFJPRF9ERVZUT09MU19fKSB7XHJcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlbCwgJ19fdm5vZGUnLCB7XHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogdm5vZGUsXHJcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGVsLCAnX192dWVQYXJlbnRDb21wb25lbnQnLCB7XHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogcGFyZW50Q29tcG9uZW50LFxyXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2VcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChkaXJzKSB7XHJcbiAgICAgICAgICAgIGludm9rZURpcmVjdGl2ZUhvb2sodm5vZGUsIG51bGwsIHBhcmVudENvbXBvbmVudCwgJ2JlZm9yZU1vdW50Jyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vICMxNTgzIEZvciBpbnNpZGUgc3VzcGVuc2UgKyBzdXNwZW5zZSBub3QgcmVzb2x2ZWQgY2FzZSwgZW50ZXIgaG9vayBzaG91bGQgY2FsbCB3aGVuIHN1c3BlbnNlIHJlc29sdmVkXHJcbiAgICAgICAgLy8gIzE2ODkgRm9yIGluc2lkZSBzdXNwZW5zZSArIHN1c3BlbnNlIHJlc29sdmVkIGNhc2UsIGp1c3QgY2FsbCBpdFxyXG4gICAgICAgIGNvbnN0IG5lZWRDYWxsVHJhbnNpdGlvbkhvb2tzID0gKCFwYXJlbnRTdXNwZW5zZSB8fCAocGFyZW50U3VzcGVuc2UgJiYgIXBhcmVudFN1c3BlbnNlLnBlbmRpbmdCcmFuY2gpKSAmJlxyXG4gICAgICAgICAgICB0cmFuc2l0aW9uICYmXHJcbiAgICAgICAgICAgICF0cmFuc2l0aW9uLnBlcnNpc3RlZDtcclxuICAgICAgICBpZiAobmVlZENhbGxUcmFuc2l0aW9uSG9va3MpIHtcclxuICAgICAgICAgICAgdHJhbnNpdGlvbi5iZWZvcmVFbnRlcihlbCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGhvc3RJbnNlcnQoZWwsIGNvbnRhaW5lciwgYW5jaG9yKTtcclxuICAgICAgICBpZiAoKHZub2RlSG9vayA9IHByb3BzICYmIHByb3BzLm9uVm5vZGVNb3VudGVkKSB8fFxyXG4gICAgICAgICAgICBuZWVkQ2FsbFRyYW5zaXRpb25Ib29rcyB8fFxyXG4gICAgICAgICAgICBkaXJzKSB7XHJcbiAgICAgICAgICAgIHF1ZXVlUG9zdFJlbmRlckVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB2bm9kZUhvb2sgJiYgaW52b2tlVk5vZGVIb29rKHZub2RlSG9vaywgcGFyZW50Q29tcG9uZW50LCB2bm9kZSk7XHJcbiAgICAgICAgICAgICAgICBuZWVkQ2FsbFRyYW5zaXRpb25Ib29rcyAmJiB0cmFuc2l0aW9uLmVudGVyKGVsKTtcclxuICAgICAgICAgICAgICAgIGRpcnMgJiYgaW52b2tlRGlyZWN0aXZlSG9vayh2bm9kZSwgbnVsbCwgcGFyZW50Q29tcG9uZW50LCAnbW91bnRlZCcpO1xyXG4gICAgICAgICAgICB9LCBwYXJlbnRTdXNwZW5zZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGNvbnN0IHNldFNjb3BlSWQgPSAoZWwsIHNjb3BlSWQsIHZub2RlLCBwYXJlbnRDb21wb25lbnQpID0+IHtcclxuICAgICAgICBpZiAoc2NvcGVJZCkge1xyXG4gICAgICAgICAgICBob3N0U2V0U2NvcGVJZChlbCwgc2NvcGVJZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChwYXJlbnRDb21wb25lbnQpIHtcclxuICAgICAgICAgICAgY29uc3QgdHJlZU93bmVySWQgPSBwYXJlbnRDb21wb25lbnQudHlwZS5fX3Njb3BlSWQ7XHJcbiAgICAgICAgICAgIC8vIHZub2RlJ3Mgb3duIHNjb3BlSWQgYW5kIHRoZSBjdXJyZW50IHBhdGNoZWQgY29tcG9uZW50J3Mgc2NvcGVJZCBpc1xyXG4gICAgICAgICAgICAvLyBkaWZmZXJlbnQgLSB0aGlzIGlzIGEgc2xvdCBjb250ZW50IG5vZGUuXHJcbiAgICAgICAgICAgIGlmICh0cmVlT3duZXJJZCAmJiB0cmVlT3duZXJJZCAhPT0gc2NvcGVJZCkge1xyXG4gICAgICAgICAgICAgICAgaG9zdFNldFNjb3BlSWQoZWwsIHRyZWVPd25lcklkICsgJy1zJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbGV0IHN1YlRyZWUgPSBwYXJlbnRDb21wb25lbnQuc3ViVHJlZTtcclxuICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBzdWJUcmVlLnR5cGUgPT09IEZyYWdtZW50KSB7XHJcbiAgICAgICAgICAgICAgICBzdWJUcmVlID1cclxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXJTaW5nbGVSb290KHN1YlRyZWUuY2hpbGRyZW4pIHx8IHN1YlRyZWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHZub2RlID09PSBzdWJUcmVlKSB7XHJcbiAgICAgICAgICAgICAgICBzZXRTY29wZUlkKGVsLCBwYXJlbnRDb21wb25lbnQudm5vZGUuc2NvcGVJZCwgcGFyZW50Q29tcG9uZW50LnZub2RlLCBwYXJlbnRDb21wb25lbnQucGFyZW50KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBjb25zdCBtb3VudENoaWxkcmVuID0gKGNoaWxkcmVuLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIG9wdGltaXplZCwgc3RhcnQgPSAwKSA9PiB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IHN0YXJ0OyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgY29uc3QgY2hpbGQgPSAoY2hpbGRyZW5baV0gPSBvcHRpbWl6ZWRcclxuICAgICAgICAgICAgICAgID8gY2xvbmVJZk1vdW50ZWQoY2hpbGRyZW5baV0pXHJcbiAgICAgICAgICAgICAgICA6IG5vcm1hbGl6ZVZOb2RlKGNoaWxkcmVuW2ldKSk7XHJcbiAgICAgICAgICAgIHBhdGNoKG51bGwsIGNoaWxkLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIG9wdGltaXplZCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGNvbnN0IHBhdGNoRWxlbWVudCA9IChuMSwgbjIsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBvcHRpbWl6ZWQpID0+IHtcclxuICAgICAgICBjb25zdCBlbCA9IChuMi5lbCA9IG4xLmVsKTtcclxuICAgICAgICBsZXQgeyBwYXRjaEZsYWcsIGR5bmFtaWNDaGlsZHJlbiwgZGlycyB9ID0gbjI7XHJcbiAgICAgICAgLy8gIzE0MjYgdGFrZSB0aGUgb2xkIHZub2RlJ3MgcGF0Y2ggZmxhZyBpbnRvIGFjY291bnQgc2luY2UgdXNlciBtYXkgY2xvbmUgYVxyXG4gICAgICAgIC8vIGNvbXBpbGVyLWdlbmVyYXRlZCB2bm9kZSwgd2hpY2ggZGUtb3B0cyB0byBGVUxMX1BST1BTXHJcbiAgICAgICAgcGF0Y2hGbGFnIHw9IG4xLnBhdGNoRmxhZyAmIDE2IC8qIEZVTExfUFJPUFMgKi87XHJcbiAgICAgICAgY29uc3Qgb2xkUHJvcHMgPSBuMS5wcm9wcyB8fCBFTVBUWV9PQko7XHJcbiAgICAgICAgY29uc3QgbmV3UHJvcHMgPSBuMi5wcm9wcyB8fCBFTVBUWV9PQko7XHJcbiAgICAgICAgbGV0IHZub2RlSG9vaztcclxuICAgICAgICBpZiAoKHZub2RlSG9vayA9IG5ld1Byb3BzLm9uVm5vZGVCZWZvcmVVcGRhdGUpKSB7XHJcbiAgICAgICAgICAgIGludm9rZVZOb2RlSG9vayh2bm9kZUhvb2ssIHBhcmVudENvbXBvbmVudCwgbjIsIG4xKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGRpcnMpIHtcclxuICAgICAgICAgICAgaW52b2tlRGlyZWN0aXZlSG9vayhuMiwgbjEsIHBhcmVudENvbXBvbmVudCwgJ2JlZm9yZVVwZGF0ZScpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIGlzSG1yVXBkYXRpbmcpIHtcclxuICAgICAgICAgICAgLy8gSE1SIHVwZGF0ZWQsIGZvcmNlIGZ1bGwgZGlmZlxyXG4gICAgICAgICAgICBwYXRjaEZsYWcgPSAwO1xyXG4gICAgICAgICAgICBvcHRpbWl6ZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgZHluYW1pY0NoaWxkcmVuID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHBhdGNoRmxhZyA+IDApIHtcclxuICAgICAgICAgICAgLy8gdGhlIHByZXNlbmNlIG9mIGEgcGF0Y2hGbGFnIG1lYW5zIHRoaXMgZWxlbWVudCdzIHJlbmRlciBjb2RlIHdhc1xyXG4gICAgICAgICAgICAvLyBnZW5lcmF0ZWQgYnkgdGhlIGNvbXBpbGVyIGFuZCBjYW4gdGFrZSB0aGUgZmFzdCBwYXRoLlxyXG4gICAgICAgICAgICAvLyBpbiB0aGlzIHBhdGggb2xkIG5vZGUgYW5kIG5ldyBub2RlIGFyZSBndWFyYW50ZWVkIHRvIGhhdmUgdGhlIHNhbWUgc2hhcGVcclxuICAgICAgICAgICAgLy8gKGkuZS4gYXQgdGhlIGV4YWN0IHNhbWUgcG9zaXRpb24gaW4gdGhlIHNvdXJjZSB0ZW1wbGF0ZSlcclxuICAgICAgICAgICAgaWYgKHBhdGNoRmxhZyAmIDE2IC8qIEZVTExfUFJPUFMgKi8pIHtcclxuICAgICAgICAgICAgICAgIC8vIGVsZW1lbnQgcHJvcHMgY29udGFpbiBkeW5hbWljIGtleXMsIGZ1bGwgZGlmZiBuZWVkZWRcclxuICAgICAgICAgICAgICAgIHBhdGNoUHJvcHMoZWwsIG4yLCBvbGRQcm9wcywgbmV3UHJvcHMsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIGNsYXNzXHJcbiAgICAgICAgICAgICAgICAvLyB0aGlzIGZsYWcgaXMgbWF0Y2hlZCB3aGVuIHRoZSBlbGVtZW50IGhhcyBkeW5hbWljIGNsYXNzIGJpbmRpbmdzLlxyXG4gICAgICAgICAgICAgICAgaWYgKHBhdGNoRmxhZyAmIDIgLyogQ0xBU1MgKi8pIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAob2xkUHJvcHMuY2xhc3MgIT09IG5ld1Byb3BzLmNsYXNzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhvc3RQYXRjaFByb3AoZWwsICdjbGFzcycsIG51bGwsIG5ld1Byb3BzLmNsYXNzLCBpc1NWRyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gc3R5bGVcclxuICAgICAgICAgICAgICAgIC8vIHRoaXMgZmxhZyBpcyBtYXRjaGVkIHdoZW4gdGhlIGVsZW1lbnQgaGFzIGR5bmFtaWMgc3R5bGUgYmluZGluZ3NcclxuICAgICAgICAgICAgICAgIGlmIChwYXRjaEZsYWcgJiA0IC8qIFNUWUxFICovKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaG9zdFBhdGNoUHJvcChlbCwgJ3N0eWxlJywgb2xkUHJvcHMuc3R5bGUsIG5ld1Byb3BzLnN0eWxlLCBpc1NWRyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBwcm9wc1xyXG4gICAgICAgICAgICAgICAgLy8gVGhpcyBmbGFnIGlzIG1hdGNoZWQgd2hlbiB0aGUgZWxlbWVudCBoYXMgZHluYW1pYyBwcm9wL2F0dHIgYmluZGluZ3NcclxuICAgICAgICAgICAgICAgIC8vIG90aGVyIHRoYW4gY2xhc3MgYW5kIHN0eWxlLiBUaGUga2V5cyBvZiBkeW5hbWljIHByb3AvYXR0cnMgYXJlIHNhdmVkIGZvclxyXG4gICAgICAgICAgICAgICAgLy8gZmFzdGVyIGl0ZXJhdGlvbi5cclxuICAgICAgICAgICAgICAgIC8vIE5vdGUgZHluYW1pYyBrZXlzIGxpa2UgOltmb29dPVwiYmFyXCIgd2lsbCBjYXVzZSB0aGlzIG9wdGltaXphdGlvbiB0b1xyXG4gICAgICAgICAgICAgICAgLy8gYmFpbCBvdXQgYW5kIGdvIHRocm91Z2ggYSBmdWxsIGRpZmYgYmVjYXVzZSB3ZSBuZWVkIHRvIHVuc2V0IHRoZSBvbGQga2V5XHJcbiAgICAgICAgICAgICAgICBpZiAocGF0Y2hGbGFnICYgOCAvKiBQUk9QUyAqLykge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIHRoZSBmbGFnIGlzIHByZXNlbnQgdGhlbiBkeW5hbWljUHJvcHMgbXVzdCBiZSBub24tbnVsbFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHByb3BzVG9VcGRhdGUgPSBuMi5keW5hbWljUHJvcHM7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcm9wc1RvVXBkYXRlLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGtleSA9IHByb3BzVG9VcGRhdGVbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHByZXYgPSBvbGRQcm9wc1trZXldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXh0ID0gbmV3UHJvcHNba2V5XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5leHQgIT09IHByZXYgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChob3N0Rm9yY2VQYXRjaFByb3AgJiYgaG9zdEZvcmNlUGF0Y2hQcm9wKGVsLCBrZXkpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaG9zdFBhdGNoUHJvcChlbCwga2V5LCBwcmV2LCBuZXh0LCBpc1NWRywgbjEuY2hpbGRyZW4sIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHVubW91bnRDaGlsZHJlbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gdGV4dFxyXG4gICAgICAgICAgICAvLyBUaGlzIGZsYWcgaXMgbWF0Y2hlZCB3aGVuIHRoZSBlbGVtZW50IGhhcyBvbmx5IGR5bmFtaWMgdGV4dCBjaGlsZHJlbi5cclxuICAgICAgICAgICAgaWYgKHBhdGNoRmxhZyAmIDEgLyogVEVYVCAqLykge1xyXG4gICAgICAgICAgICAgICAgaWYgKG4xLmNoaWxkcmVuICE9PSBuMi5jaGlsZHJlbikge1xyXG4gICAgICAgICAgICAgICAgICAgIGhvc3RTZXRFbGVtZW50VGV4dChlbCwgbjIuY2hpbGRyZW4pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKCFvcHRpbWl6ZWQgJiYgZHluYW1pY0NoaWxkcmVuID09IG51bGwpIHtcclxuICAgICAgICAgICAgLy8gdW5vcHRpbWl6ZWQsIGZ1bGwgZGlmZlxyXG4gICAgICAgICAgICBwYXRjaFByb3BzKGVsLCBuMiwgb2xkUHJvcHMsIG5ld1Byb3BzLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGFyZUNoaWxkcmVuU1ZHID0gaXNTVkcgJiYgbjIudHlwZSAhPT0gJ2ZvcmVpZ25PYmplY3QnO1xyXG4gICAgICAgIGlmIChkeW5hbWljQ2hpbGRyZW4pIHtcclxuICAgICAgICAgICAgcGF0Y2hCbG9ja0NoaWxkcmVuKG4xLmR5bmFtaWNDaGlsZHJlbiwgZHluYW1pY0NoaWxkcmVuLCBlbCwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgYXJlQ2hpbGRyZW5TVkcpO1xyXG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIHBhcmVudENvbXBvbmVudCAmJiBwYXJlbnRDb21wb25lbnQudHlwZS5fX2htcklkKSB7XHJcbiAgICAgICAgICAgICAgICB0cmF2ZXJzZVN0YXRpY0NoaWxkcmVuKG4xLCBuMik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoIW9wdGltaXplZCkge1xyXG4gICAgICAgICAgICAvLyBmdWxsIGRpZmZcclxuICAgICAgICAgICAgcGF0Y2hDaGlsZHJlbihuMSwgbjIsIGVsLCBudWxsLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBhcmVDaGlsZHJlblNWRyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICgodm5vZGVIb29rID0gbmV3UHJvcHMub25Wbm9kZVVwZGF0ZWQpIHx8IGRpcnMpIHtcclxuICAgICAgICAgICAgcXVldWVQb3N0UmVuZGVyRWZmZWN0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgIHZub2RlSG9vayAmJiBpbnZva2VWTm9kZUhvb2sodm5vZGVIb29rLCBwYXJlbnRDb21wb25lbnQsIG4yLCBuMSk7XHJcbiAgICAgICAgICAgICAgICBkaXJzICYmIGludm9rZURpcmVjdGl2ZUhvb2sobjIsIG4xLCBwYXJlbnRDb21wb25lbnQsICd1cGRhdGVkJyk7XHJcbiAgICAgICAgICAgIH0sIHBhcmVudFN1c3BlbnNlKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLy8gVGhlIGZhc3QgcGF0aCBmb3IgYmxvY2tzLlxyXG4gICAgY29uc3QgcGF0Y2hCbG9ja0NoaWxkcmVuID0gKG9sZENoaWxkcmVuLCBuZXdDaGlsZHJlbiwgZmFsbGJhY2tDb250YWluZXIsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHKSA9PiB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuZXdDaGlsZHJlbi5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCBvbGRWTm9kZSA9IG9sZENoaWxkcmVuW2ldO1xyXG4gICAgICAgICAgICBjb25zdCBuZXdWTm9kZSA9IG5ld0NoaWxkcmVuW2ldO1xyXG4gICAgICAgICAgICAvLyBEZXRlcm1pbmUgdGhlIGNvbnRhaW5lciAocGFyZW50IGVsZW1lbnQpIGZvciB0aGUgcGF0Y2guXHJcbiAgICAgICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IFxyXG4gICAgICAgICAgICAvLyAtIEluIHRoZSBjYXNlIG9mIGEgRnJhZ21lbnQsIHdlIG5lZWQgdG8gcHJvdmlkZSB0aGUgYWN0dWFsIHBhcmVudFxyXG4gICAgICAgICAgICAvLyBvZiB0aGUgRnJhZ21lbnQgaXRzZWxmIHNvIGl0IGNhbiBtb3ZlIGl0cyBjaGlsZHJlbi5cclxuICAgICAgICAgICAgb2xkVk5vZGUudHlwZSA9PT0gRnJhZ21lbnQgfHxcclxuICAgICAgICAgICAgICAgIC8vIC0gSW4gdGhlIGNhc2Ugb2YgZGlmZmVyZW50IG5vZGVzLCB0aGVyZSBpcyBnb2luZyB0byBiZSBhIHJlcGxhY2VtZW50XHJcbiAgICAgICAgICAgICAgICAvLyB3aGljaCBhbHNvIHJlcXVpcmVzIHRoZSBjb3JyZWN0IHBhcmVudCBjb250YWluZXJcclxuICAgICAgICAgICAgICAgICFpc1NhbWVWTm9kZVR5cGUob2xkVk5vZGUsIG5ld1ZOb2RlKSB8fFxyXG4gICAgICAgICAgICAgICAgLy8gLSBJbiB0aGUgY2FzZSBvZiBhIGNvbXBvbmVudCwgaXQgY291bGQgY29udGFpbiBhbnl0aGluZy5cclxuICAgICAgICAgICAgICAgIG9sZFZOb2RlLnNoYXBlRmxhZyAmIDYgLyogQ09NUE9ORU5UICovIHx8XHJcbiAgICAgICAgICAgICAgICBvbGRWTm9kZS5zaGFwZUZsYWcgJiA2NCAvKiBURUxFUE9SVCAqL1xyXG4gICAgICAgICAgICAgICAgPyBob3N0UGFyZW50Tm9kZShvbGRWTm9kZS5lbClcclxuICAgICAgICAgICAgICAgIDogLy8gSW4gb3RoZXIgY2FzZXMsIHRoZSBwYXJlbnQgY29udGFpbmVyIGlzIG5vdCBhY3R1YWxseSB1c2VkIHNvIHdlXHJcbiAgICAgICAgICAgICAgICAgICAgLy8ganVzdCBwYXNzIHRoZSBibG9jayBlbGVtZW50IGhlcmUgdG8gYXZvaWQgYSBET00gcGFyZW50Tm9kZSBjYWxsLlxyXG4gICAgICAgICAgICAgICAgICAgIGZhbGxiYWNrQ29udGFpbmVyO1xyXG4gICAgICAgICAgICBwYXRjaChvbGRWTm9kZSwgbmV3Vk5vZGUsIGNvbnRhaW5lciwgbnVsbCwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIHRydWUpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBjb25zdCBwYXRjaFByb3BzID0gKGVsLCB2bm9kZSwgb2xkUHJvcHMsIG5ld1Byb3BzLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRykgPT4ge1xyXG4gICAgICAgIGlmIChvbGRQcm9wcyAhPT0gbmV3UHJvcHMpIHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gbmV3UHJvcHMpIHtcclxuICAgICAgICAgICAgICAgIC8vIGVtcHR5IHN0cmluZyBpcyBub3QgdmFsaWQgcHJvcFxyXG4gICAgICAgICAgICAgICAgaWYgKGlzUmVzZXJ2ZWRQcm9wKGtleSkpXHJcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuZXh0ID0gbmV3UHJvcHNba2V5XTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHByZXYgPSBvbGRQcm9wc1trZXldO1xyXG4gICAgICAgICAgICAgICAgaWYgKG5leHQgIT09IHByZXYgfHxcclxuICAgICAgICAgICAgICAgICAgICAoaG9zdEZvcmNlUGF0Y2hQcm9wICYmIGhvc3RGb3JjZVBhdGNoUHJvcChlbCwga2V5KSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBob3N0UGF0Y2hQcm9wKGVsLCBrZXksIHByZXYsIG5leHQsIGlzU1ZHLCB2bm9kZS5jaGlsZHJlbiwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgdW5tb3VudENoaWxkcmVuKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAob2xkUHJvcHMgIT09IEVNUFRZX09CSikge1xyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gb2xkUHJvcHMpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWlzUmVzZXJ2ZWRQcm9wKGtleSkgJiYgIShrZXkgaW4gbmV3UHJvcHMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhvc3RQYXRjaFByb3AoZWwsIGtleSwgb2xkUHJvcHNba2V5XSwgbnVsbCwgaXNTVkcsIHZub2RlLmNoaWxkcmVuLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCB1bm1vdW50Q2hpbGRyZW4pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBjb25zdCBwcm9jZXNzRnJhZ21lbnQgPSAobjEsIG4yLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIG9wdGltaXplZCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGZyYWdtZW50U3RhcnRBbmNob3IgPSAobjIuZWwgPSBuMSA/IG4xLmVsIDogaG9zdENyZWF0ZVRleHQoJycpKTtcclxuICAgICAgICBjb25zdCBmcmFnbWVudEVuZEFuY2hvciA9IChuMi5hbmNob3IgPSBuMSA/IG4xLmFuY2hvciA6IGhvc3RDcmVhdGVUZXh0KCcnKSk7XHJcbiAgICAgICAgbGV0IHsgcGF0Y2hGbGFnLCBkeW5hbWljQ2hpbGRyZW4gfSA9IG4yO1xyXG4gICAgICAgIGlmIChwYXRjaEZsYWcgPiAwKSB7XHJcbiAgICAgICAgICAgIG9wdGltaXplZCA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgaXNIbXJVcGRhdGluZykge1xyXG4gICAgICAgICAgICAvLyBITVIgdXBkYXRlZCwgZm9yY2UgZnVsbCBkaWZmXHJcbiAgICAgICAgICAgIHBhdGNoRmxhZyA9IDA7XHJcbiAgICAgICAgICAgIG9wdGltaXplZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBkeW5hbWljQ2hpbGRyZW4gPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobjEgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBob3N0SW5zZXJ0KGZyYWdtZW50U3RhcnRBbmNob3IsIGNvbnRhaW5lciwgYW5jaG9yKTtcclxuICAgICAgICAgICAgaG9zdEluc2VydChmcmFnbWVudEVuZEFuY2hvciwgY29udGFpbmVyLCBhbmNob3IpO1xyXG4gICAgICAgICAgICAvLyBhIGZyYWdtZW50IGNhbiBvbmx5IGhhdmUgYXJyYXkgY2hpbGRyZW5cclxuICAgICAgICAgICAgLy8gc2luY2UgdGhleSBhcmUgZWl0aGVyIGdlbmVyYXRlZCBieSB0aGUgY29tcGlsZXIsIG9yIGltcGxpY2l0bHkgY3JlYXRlZFxyXG4gICAgICAgICAgICAvLyBmcm9tIGFycmF5cy5cclxuICAgICAgICAgICAgbW91bnRDaGlsZHJlbihuMi5jaGlsZHJlbiwgY29udGFpbmVyLCBmcmFnbWVudEVuZEFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIG9wdGltaXplZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAocGF0Y2hGbGFnID4gMCAmJlxyXG4gICAgICAgICAgICAgICAgcGF0Y2hGbGFnICYgNjQgLyogU1RBQkxFX0ZSQUdNRU5UICovICYmXHJcbiAgICAgICAgICAgICAgICBkeW5hbWljQ2hpbGRyZW4pIHtcclxuICAgICAgICAgICAgICAgIC8vIGEgc3RhYmxlIGZyYWdtZW50ICh0ZW1wbGF0ZSByb290IG9yIDx0ZW1wbGF0ZSB2LWZvcj4pIGRvZXNuJ3QgbmVlZCB0b1xyXG4gICAgICAgICAgICAgICAgLy8gcGF0Y2ggY2hpbGRyZW4gb3JkZXIsIGJ1dCBpdCBtYXkgY29udGFpbiBkeW5hbWljQ2hpbGRyZW4uXHJcbiAgICAgICAgICAgICAgICBwYXRjaEJsb2NrQ2hpbGRyZW4objEuZHluYW1pY0NoaWxkcmVuLCBkeW5hbWljQ2hpbGRyZW4sIGNvbnRhaW5lciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcpO1xyXG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBwYXJlbnRDb21wb25lbnQgJiYgcGFyZW50Q29tcG9uZW50LnR5cGUuX19obXJJZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRyYXZlcnNlU3RhdGljQ2hpbGRyZW4objEsIG4yKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKFxyXG4gICAgICAgICAgICAgICAgLy8gIzIwODAgaWYgdGhlIHN0YWJsZSBmcmFnbWVudCBoYXMgYSBrZXksIGl0J3MgYSA8dGVtcGxhdGUgdi1mb3I+IHRoYXQgbWF5XHJcbiAgICAgICAgICAgICAgICAvLyAgZ2V0IG1vdmVkIGFyb3VuZC4gTWFrZSBzdXJlIGFsbCByb290IGxldmVsIHZub2RlcyBpbmhlcml0IGVsLlxyXG4gICAgICAgICAgICAgICAgLy8gIzIxMzQgb3IgaWYgaXQncyBhIGNvbXBvbmVudCByb290LCBpdCBtYXkgYWxzbyBnZXQgbW92ZWQgYXJvdW5kXHJcbiAgICAgICAgICAgICAgICAvLyBhcyB0aGUgY29tcG9uZW50IGlzIGJlaW5nIG1vdmVkLlxyXG4gICAgICAgICAgICAgICAgbjIua2V5ICE9IG51bGwgfHxcclxuICAgICAgICAgICAgICAgICAgICAocGFyZW50Q29tcG9uZW50ICYmIG4yID09PSBwYXJlbnRDb21wb25lbnQuc3ViVHJlZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0cmF2ZXJzZVN0YXRpY0NoaWxkcmVuKG4xLCBuMiwgdHJ1ZSAvKiBzaGFsbG93ICovKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIGtleWVkIC8gdW5rZXllZCwgb3IgbWFudWFsIGZyYWdtZW50cy5cclxuICAgICAgICAgICAgICAgIC8vIGZvciBrZXllZCAmIHVua2V5ZWQsIHNpbmNlIHRoZXkgYXJlIGNvbXBpbGVyIGdlbmVyYXRlZCBmcm9tIHYtZm9yLFxyXG4gICAgICAgICAgICAgICAgLy8gZWFjaCBjaGlsZCBpcyBndWFyYW50ZWVkIHRvIGJlIGEgYmxvY2sgc28gdGhlIGZyYWdtZW50IHdpbGwgbmV2ZXJcclxuICAgICAgICAgICAgICAgIC8vIGhhdmUgZHluYW1pY0NoaWxkcmVuLlxyXG4gICAgICAgICAgICAgICAgcGF0Y2hDaGlsZHJlbihuMSwgbjIsIGNvbnRhaW5lciwgZnJhZ21lbnRFbmRBbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBvcHRpbWl6ZWQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGNvbnN0IHByb2Nlc3NDb21wb25lbnQgPSAobjEsIG4yLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIG9wdGltaXplZCkgPT4ge1xyXG4gICAgICAgIGlmIChuMSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGlmIChuMi5zaGFwZUZsYWcgJiA1MTIgLyogQ09NUE9ORU5UX0tFUFRfQUxJVkUgKi8pIHtcclxuICAgICAgICAgICAgICAgIHBhcmVudENvbXBvbmVudC5jdHguYWN0aXZhdGUobjIsIGNvbnRhaW5lciwgYW5jaG9yLCBpc1NWRywgb3B0aW1pemVkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIG1vdW50Q29tcG9uZW50KG4yLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIG9wdGltaXplZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHVwZGF0ZUNvbXBvbmVudChuMSwgbjIsIG9wdGltaXplZCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGNvbnN0IG1vdW50Q29tcG9uZW50ID0gKGluaXRpYWxWTm9kZSwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBvcHRpbWl6ZWQpID0+IHtcclxuICAgICAgICBjb25zdCBpbnN0YW5jZSA9IChpbml0aWFsVk5vZGUuY29tcG9uZW50ID0gY3JlYXRlQ29tcG9uZW50SW5zdGFuY2UoaW5pdGlhbFZOb2RlLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlKSk7XHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBpbnN0YW5jZS50eXBlLl9faG1ySWQpIHtcclxuICAgICAgICAgICAgcmVnaXN0ZXJITVIoaW5zdGFuY2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgIHB1c2hXYXJuaW5nQ29udGV4dChpbml0aWFsVk5vZGUpO1xyXG4gICAgICAgICAgICBzdGFydE1lYXN1cmUoaW5zdGFuY2UsIGBtb3VudGApO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBpbmplY3QgcmVuZGVyZXIgaW50ZXJuYWxzIGZvciBrZWVwQWxpdmVcclxuICAgICAgICBpZiAoaXNLZWVwQWxpdmUoaW5pdGlhbFZOb2RlKSkge1xyXG4gICAgICAgICAgICBpbnN0YW5jZS5jdHgucmVuZGVyZXIgPSBpbnRlcm5hbHM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHJlc29sdmUgcHJvcHMgYW5kIHNsb3RzIGZvciBzZXR1cCBjb250ZXh0XHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICBzdGFydE1lYXN1cmUoaW5zdGFuY2UsIGBpbml0YCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHNldHVwQ29tcG9uZW50KGluc3RhbmNlKTtcclxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgIGVuZE1lYXN1cmUoaW5zdGFuY2UsIGBpbml0YCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHNldHVwKCkgaXMgYXN5bmMuIFRoaXMgY29tcG9uZW50IHJlbGllcyBvbiBhc3luYyBsb2dpYyB0byBiZSByZXNvbHZlZFxyXG4gICAgICAgIC8vIGJlZm9yZSBwcm9jZWVkaW5nXHJcbiAgICAgICAgaWYgKCBpbnN0YW5jZS5hc3luY0RlcCkge1xyXG4gICAgICAgICAgICBwYXJlbnRTdXNwZW5zZSAmJiBwYXJlbnRTdXNwZW5zZS5yZWdpc3RlckRlcChpbnN0YW5jZSwgc2V0dXBSZW5kZXJFZmZlY3QpO1xyXG4gICAgICAgICAgICAvLyBHaXZlIGl0IGEgcGxhY2Vob2xkZXIgaWYgdGhpcyBpcyBub3QgaHlkcmF0aW9uXHJcbiAgICAgICAgICAgIC8vIFRPRE8gaGFuZGxlIHNlbGYtZGVmaW5lZCBmYWxsYmFja1xyXG4gICAgICAgICAgICBpZiAoIWluaXRpYWxWTm9kZS5lbCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcGxhY2Vob2xkZXIgPSAoaW5zdGFuY2Uuc3ViVHJlZSA9IGNyZWF0ZVZOb2RlKENvbW1lbnQpKTtcclxuICAgICAgICAgICAgICAgIHByb2Nlc3NDb21tZW50Tm9kZShudWxsLCBwbGFjZWhvbGRlciwgY29udGFpbmVyLCBhbmNob3IpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgc2V0dXBSZW5kZXJFZmZlY3QoaW5zdGFuY2UsIGluaXRpYWxWTm9kZSwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgb3B0aW1pemVkKTtcclxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgIHBvcFdhcm5pbmdDb250ZXh0KCk7XHJcbiAgICAgICAgICAgIGVuZE1lYXN1cmUoaW5zdGFuY2UsIGBtb3VudGApO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBjb25zdCB1cGRhdGVDb21wb25lbnQgPSAobjEsIG4yLCBvcHRpbWl6ZWQpID0+IHtcclxuICAgICAgICBjb25zdCBpbnN0YW5jZSA9IChuMi5jb21wb25lbnQgPSBuMS5jb21wb25lbnQpO1xyXG4gICAgICAgIGlmIChzaG91bGRVcGRhdGVDb21wb25lbnQobjEsIG4yLCBvcHRpbWl6ZWQpKSB7XHJcbiAgICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgICAgIGluc3RhbmNlLmFzeW5jRGVwICYmXHJcbiAgICAgICAgICAgICAgICAhaW5zdGFuY2UuYXN5bmNSZXNvbHZlZCkge1xyXG4gICAgICAgICAgICAgICAgLy8gYXN5bmMgJiBzdGlsbCBwZW5kaW5nIC0ganVzdCB1cGRhdGUgcHJvcHMgYW5kIHNsb3RzXHJcbiAgICAgICAgICAgICAgICAvLyBzaW5jZSB0aGUgY29tcG9uZW50J3MgcmVhY3RpdmUgZWZmZWN0IGZvciByZW5kZXIgaXNuJ3Qgc2V0LXVwIHlldFxyXG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHB1c2hXYXJuaW5nQ29udGV4dChuMik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB1cGRhdGVDb21wb25lbnRQcmVSZW5kZXIoaW5zdGFuY2UsIG4yLCBvcHRpbWl6ZWQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHBvcFdhcm5pbmdDb250ZXh0KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBub3JtYWwgdXBkYXRlXHJcbiAgICAgICAgICAgICAgICBpbnN0YW5jZS5uZXh0ID0gbjI7XHJcbiAgICAgICAgICAgICAgICAvLyBpbiBjYXNlIHRoZSBjaGlsZCBjb21wb25lbnQgaXMgYWxzbyBxdWV1ZWQsIHJlbW92ZSBpdCB0byBhdm9pZFxyXG4gICAgICAgICAgICAgICAgLy8gZG91YmxlIHVwZGF0aW5nIHRoZSBzYW1lIGNoaWxkIGNvbXBvbmVudCBpbiB0aGUgc2FtZSBmbHVzaC5cclxuICAgICAgICAgICAgICAgIGludmFsaWRhdGVKb2IoaW5zdGFuY2UudXBkYXRlKTtcclxuICAgICAgICAgICAgICAgIC8vIGluc3RhbmNlLnVwZGF0ZSBpcyB0aGUgcmVhY3RpdmUgZWZmZWN0IHJ1bm5lci5cclxuICAgICAgICAgICAgICAgIGluc3RhbmNlLnVwZGF0ZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBubyB1cGRhdGUgbmVlZGVkLiBqdXN0IGNvcHkgb3ZlciBwcm9wZXJ0aWVzXHJcbiAgICAgICAgICAgIG4yLmNvbXBvbmVudCA9IG4xLmNvbXBvbmVudDtcclxuICAgICAgICAgICAgbjIuZWwgPSBuMS5lbDtcclxuICAgICAgICAgICAgaW5zdGFuY2Uudm5vZGUgPSBuMjtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgY29uc3Qgc2V0dXBSZW5kZXJFZmZlY3QgPSAoaW5zdGFuY2UsIGluaXRpYWxWTm9kZSwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgb3B0aW1pemVkKSA9PiB7XHJcbiAgICAgICAgLy8gY3JlYXRlIHJlYWN0aXZlIGVmZmVjdCBmb3IgcmVuZGVyaW5nXHJcbiAgICAgICAgaW5zdGFuY2UudXBkYXRlID0gZWZmZWN0KGZ1bmN0aW9uIGNvbXBvbmVudEVmZmVjdCgpIHtcclxuICAgICAgICAgICAgaWYgKCFpbnN0YW5jZS5pc01vdW50ZWQpIHtcclxuICAgICAgICAgICAgICAgIGxldCB2bm9kZUhvb2s7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB7IGVsLCBwcm9wcyB9ID0gaW5pdGlhbFZOb2RlO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgeyBibSwgbSwgcGFyZW50IH0gPSBpbnN0YW5jZTtcclxuICAgICAgICAgICAgICAgIC8vIGJlZm9yZU1vdW50IGhvb2tcclxuICAgICAgICAgICAgICAgIGlmIChibSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGludm9rZUFycmF5Rm5zKGJtKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIG9uVm5vZGVCZWZvcmVNb3VudFxyXG4gICAgICAgICAgICAgICAgaWYgKCh2bm9kZUhvb2sgPSBwcm9wcyAmJiBwcm9wcy5vblZub2RlQmVmb3JlTW91bnQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaW52b2tlVk5vZGVIb29rKHZub2RlSG9vaywgcGFyZW50LCBpbml0aWFsVk5vZGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gcmVuZGVyXHJcbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRNZWFzdXJlKGluc3RhbmNlLCBgcmVuZGVyYCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzdWJUcmVlID0gKGluc3RhbmNlLnN1YlRyZWUgPSByZW5kZXJDb21wb25lbnRSb290KGluc3RhbmNlKSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZW5kTWVhc3VyZShpbnN0YW5jZSwgYHJlbmRlcmApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGVsICYmIGh5ZHJhdGVOb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydE1lYXN1cmUoaW5zdGFuY2UsIGBoeWRyYXRlYCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHZub2RlIGhhcyBhZG9wdGVkIGhvc3Qgbm9kZSAtIHBlcmZvcm0gaHlkcmF0aW9uIGluc3RlYWQgb2YgbW91bnQuXHJcbiAgICAgICAgICAgICAgICAgICAgaHlkcmF0ZU5vZGUoaW5pdGlhbFZOb2RlLmVsLCBzdWJUcmVlLCBpbnN0YW5jZSwgcGFyZW50U3VzcGVuc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZW5kTWVhc3VyZShpbnN0YW5jZSwgYGh5ZHJhdGVgKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0TWVhc3VyZShpbnN0YW5jZSwgYHBhdGNoYCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHBhdGNoKG51bGwsIHN1YlRyZWUsIGNvbnRhaW5lciwgYW5jaG9yLCBpbnN0YW5jZSwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZE1lYXN1cmUoaW5zdGFuY2UsIGBwYXRjaGApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpbml0aWFsVk5vZGUuZWwgPSBzdWJUcmVlLmVsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gbW91bnRlZCBob29rXHJcbiAgICAgICAgICAgICAgICBpZiAobSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHF1ZXVlUG9zdFJlbmRlckVmZmVjdChtLCBwYXJlbnRTdXNwZW5zZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBvblZub2RlTW91bnRlZFxyXG4gICAgICAgICAgICAgICAgaWYgKCh2bm9kZUhvb2sgPSBwcm9wcyAmJiBwcm9wcy5vblZub2RlTW91bnRlZCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBxdWV1ZVBvc3RSZW5kZXJFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnZva2VWTm9kZUhvb2sodm5vZGVIb29rLCBwYXJlbnQsIGluaXRpYWxWTm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgcGFyZW50U3VzcGVuc2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gYWN0aXZhdGVkIGhvb2sgZm9yIGtlZXAtYWxpdmUgcm9vdHMuXHJcbiAgICAgICAgICAgICAgICAvLyAjMTc0MiBhY3RpdmF0ZWQgaG9vayBtdXN0IGJlIGFjY2Vzc2VkIGFmdGVyIGZpcnN0IHJlbmRlclxyXG4gICAgICAgICAgICAgICAgLy8gc2luY2UgdGhlIGhvb2sgbWF5IGJlIGluamVjdGVkIGJ5IGEgY2hpbGQga2VlcC1hbGl2ZVxyXG4gICAgICAgICAgICAgICAgY29uc3QgeyBhIH0gPSBpbnN0YW5jZTtcclxuICAgICAgICAgICAgICAgIGlmIChhICYmXHJcbiAgICAgICAgICAgICAgICAgICAgaW5pdGlhbFZOb2RlLnNoYXBlRmxhZyAmIDI1NiAvKiBDT01QT05FTlRfU0hPVUxEX0tFRVBfQUxJVkUgKi8pIHtcclxuICAgICAgICAgICAgICAgICAgICBxdWV1ZVBvc3RSZW5kZXJFZmZlY3QoYSwgcGFyZW50U3VzcGVuc2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaW5zdGFuY2UuaXNNb3VudGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIHVwZGF0ZUNvbXBvbmVudFxyXG4gICAgICAgICAgICAgICAgLy8gVGhpcyBpcyB0cmlnZ2VyZWQgYnkgbXV0YXRpb24gb2YgY29tcG9uZW50J3Mgb3duIHN0YXRlIChuZXh0OiBudWxsKVxyXG4gICAgICAgICAgICAgICAgLy8gT1IgcGFyZW50IGNhbGxpbmcgcHJvY2Vzc0NvbXBvbmVudCAobmV4dDogVk5vZGUpXHJcbiAgICAgICAgICAgICAgICBsZXQgeyBuZXh0LCBidSwgdSwgcGFyZW50LCB2bm9kZSB9ID0gaW5zdGFuY2U7XHJcbiAgICAgICAgICAgICAgICBsZXQgb3JpZ2luTmV4dCA9IG5leHQ7XHJcbiAgICAgICAgICAgICAgICBsZXQgdm5vZGVIb29rO1xyXG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHB1c2hXYXJuaW5nQ29udGV4dChuZXh0IHx8IGluc3RhbmNlLnZub2RlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChuZXh0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV4dC5lbCA9IHZub2RlLmVsO1xyXG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZUNvbXBvbmVudFByZVJlbmRlcihpbnN0YW5jZSwgbmV4dCwgb3B0aW1pemVkKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIG5leHQgPSB2bm9kZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIGJlZm9yZVVwZGF0ZSBob29rXHJcbiAgICAgICAgICAgICAgICBpZiAoYnUpIHtcclxuICAgICAgICAgICAgICAgICAgICBpbnZva2VBcnJheUZucyhidSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBvblZub2RlQmVmb3JlVXBkYXRlXHJcbiAgICAgICAgICAgICAgICBpZiAoKHZub2RlSG9vayA9IG5leHQucHJvcHMgJiYgbmV4dC5wcm9wcy5vblZub2RlQmVmb3JlVXBkYXRlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGludm9rZVZOb2RlSG9vayh2bm9kZUhvb2ssIHBhcmVudCwgbmV4dCwgdm5vZGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gcmVuZGVyXHJcbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRNZWFzdXJlKGluc3RhbmNlLCBgcmVuZGVyYCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuZXh0VHJlZSA9IHJlbmRlckNvbXBvbmVudFJvb3QoaW5zdGFuY2UpO1xyXG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGVuZE1lYXN1cmUoaW5zdGFuY2UsIGByZW5kZXJgKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IHByZXZUcmVlID0gaW5zdGFuY2Uuc3ViVHJlZTtcclxuICAgICAgICAgICAgICAgIGluc3RhbmNlLnN1YlRyZWUgPSBuZXh0VHJlZTtcclxuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgICAgICBzdGFydE1lYXN1cmUoaW5zdGFuY2UsIGBwYXRjaGApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcGF0Y2gocHJldlRyZWUsIG5leHRUcmVlLCBcclxuICAgICAgICAgICAgICAgIC8vIHBhcmVudCBtYXkgaGF2ZSBjaGFuZ2VkIGlmIGl0J3MgaW4gYSB0ZWxlcG9ydFxyXG4gICAgICAgICAgICAgICAgaG9zdFBhcmVudE5vZGUocHJldlRyZWUuZWwpLCBcclxuICAgICAgICAgICAgICAgIC8vIGFuY2hvciBtYXkgaGF2ZSBjaGFuZ2VkIGlmIGl0J3MgaW4gYSBmcmFnbWVudFxyXG4gICAgICAgICAgICAgICAgZ2V0TmV4dEhvc3ROb2RlKHByZXZUcmVlKSwgaW5zdGFuY2UsIHBhcmVudFN1c3BlbnNlLCBpc1NWRyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZW5kTWVhc3VyZShpbnN0YW5jZSwgYHBhdGNoYCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBuZXh0LmVsID0gbmV4dFRyZWUuZWw7XHJcbiAgICAgICAgICAgICAgICBpZiAob3JpZ2luTmV4dCA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHNlbGYtdHJpZ2dlcmVkIHVwZGF0ZS4gSW4gY2FzZSBvZiBIT0MsIHVwZGF0ZSBwYXJlbnQgY29tcG9uZW50XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdm5vZGUgZWwuIEhPQyBpcyBpbmRpY2F0ZWQgYnkgcGFyZW50IGluc3RhbmNlJ3Mgc3ViVHJlZSBwb2ludGluZ1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHRvIGNoaWxkIGNvbXBvbmVudCdzIHZub2RlXHJcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlSE9DSG9zdEVsKGluc3RhbmNlLCBuZXh0VHJlZS5lbCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyB1cGRhdGVkIGhvb2tcclxuICAgICAgICAgICAgICAgIGlmICh1KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcXVldWVQb3N0UmVuZGVyRWZmZWN0KHUsIHBhcmVudFN1c3BlbnNlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIG9uVm5vZGVVcGRhdGVkXHJcbiAgICAgICAgICAgICAgICBpZiAoKHZub2RlSG9vayA9IG5leHQucHJvcHMgJiYgbmV4dC5wcm9wcy5vblZub2RlVXBkYXRlZCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBxdWV1ZVBvc3RSZW5kZXJFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnZva2VWTm9kZUhvb2sodm5vZGVIb29rLCBwYXJlbnQsIG5leHQsIHZub2RlKTtcclxuICAgICAgICAgICAgICAgICAgICB9LCBwYXJlbnRTdXNwZW5zZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHx8IF9fVlVFX1BST0RfREVWVE9PTFNfXykge1xyXG4gICAgICAgICAgICAgICAgICAgIGRldnRvb2xzQ29tcG9uZW50VXBkYXRlZChpbnN0YW5jZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcG9wV2FybmluZ0NvbnRleHQoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSA/IGNyZWF0ZURldkVmZmVjdE9wdGlvbnMoaW5zdGFuY2UpIDogcHJvZEVmZmVjdE9wdGlvbnMpO1xyXG4gICAgfTtcclxuICAgIGNvbnN0IHVwZGF0ZUNvbXBvbmVudFByZVJlbmRlciA9IChpbnN0YW5jZSwgbmV4dFZOb2RlLCBvcHRpbWl6ZWQpID0+IHtcclxuICAgICAgICBuZXh0Vk5vZGUuY29tcG9uZW50ID0gaW5zdGFuY2U7XHJcbiAgICAgICAgY29uc3QgcHJldlByb3BzID0gaW5zdGFuY2Uudm5vZGUucHJvcHM7XHJcbiAgICAgICAgaW5zdGFuY2Uudm5vZGUgPSBuZXh0Vk5vZGU7XHJcbiAgICAgICAgaW5zdGFuY2UubmV4dCA9IG51bGw7XHJcbiAgICAgICAgdXBkYXRlUHJvcHMoaW5zdGFuY2UsIG5leHRWTm9kZS5wcm9wcywgcHJldlByb3BzLCBvcHRpbWl6ZWQpO1xyXG4gICAgICAgIHVwZGF0ZVNsb3RzKGluc3RhbmNlLCBuZXh0Vk5vZGUuY2hpbGRyZW4pO1xyXG4gICAgICAgIC8vIHByb3BzIHVwZGF0ZSBtYXkgaGF2ZSB0cmlnZ2VyZWQgcHJlLWZsdXNoIHdhdGNoZXJzLlxyXG4gICAgICAgIC8vIGZsdXNoIHRoZW0gYmVmb3JlIHRoZSByZW5kZXIgdXBkYXRlLlxyXG4gICAgICAgIGZsdXNoUHJlRmx1c2hDYnModW5kZWZpbmVkLCBpbnN0YW5jZS51cGRhdGUpO1xyXG4gICAgfTtcclxuICAgIGNvbnN0IHBhdGNoQ2hpbGRyZW4gPSAobjEsIG4yLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIG9wdGltaXplZCA9IGZhbHNlKSA9PiB7XHJcbiAgICAgICAgY29uc3QgYzEgPSBuMSAmJiBuMS5jaGlsZHJlbjtcclxuICAgICAgICBjb25zdCBwcmV2U2hhcGVGbGFnID0gbjEgPyBuMS5zaGFwZUZsYWcgOiAwO1xyXG4gICAgICAgIGNvbnN0IGMyID0gbjIuY2hpbGRyZW47XHJcbiAgICAgICAgY29uc3QgeyBwYXRjaEZsYWcsIHNoYXBlRmxhZyB9ID0gbjI7XHJcbiAgICAgICAgLy8gZmFzdCBwYXRoXHJcbiAgICAgICAgaWYgKHBhdGNoRmxhZyA+IDApIHtcclxuICAgICAgICAgICAgaWYgKHBhdGNoRmxhZyAmIDEyOCAvKiBLRVlFRF9GUkFHTUVOVCAqLykge1xyXG4gICAgICAgICAgICAgICAgLy8gdGhpcyBjb3VsZCBiZSBlaXRoZXIgZnVsbHkta2V5ZWQgb3IgbWl4ZWQgKHNvbWUga2V5ZWQgc29tZSBub3QpXHJcbiAgICAgICAgICAgICAgICAvLyBwcmVzZW5jZSBvZiBwYXRjaEZsYWcgbWVhbnMgY2hpbGRyZW4gYXJlIGd1YXJhbnRlZWQgdG8gYmUgYXJyYXlzXHJcbiAgICAgICAgICAgICAgICBwYXRjaEtleWVkQ2hpbGRyZW4oYzEsIGMyLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIG9wdGltaXplZCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAocGF0Y2hGbGFnICYgMjU2IC8qIFVOS0VZRURfRlJBR01FTlQgKi8pIHtcclxuICAgICAgICAgICAgICAgIC8vIHVua2V5ZWRcclxuICAgICAgICAgICAgICAgIHBhdGNoVW5rZXllZENoaWxkcmVuKGMxLCBjMiwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBvcHRpbWl6ZWQpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGNoaWxkcmVuIGhhcyAzIHBvc3NpYmlsaXRpZXM6IHRleHQsIGFycmF5IG9yIG5vIGNoaWxkcmVuLlxyXG4gICAgICAgIGlmIChzaGFwZUZsYWcgJiA4IC8qIFRFWFRfQ0hJTERSRU4gKi8pIHtcclxuICAgICAgICAgICAgLy8gdGV4dCBjaGlsZHJlbiBmYXN0IHBhdGhcclxuICAgICAgICAgICAgaWYgKHByZXZTaGFwZUZsYWcgJiAxNiAvKiBBUlJBWV9DSElMRFJFTiAqLykge1xyXG4gICAgICAgICAgICAgICAgdW5tb3VudENoaWxkcmVuKGMxLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoYzIgIT09IGMxKSB7XHJcbiAgICAgICAgICAgICAgICBob3N0U2V0RWxlbWVudFRleHQoY29udGFpbmVyLCBjMik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGlmIChwcmV2U2hhcGVGbGFnICYgMTYgLyogQVJSQVlfQ0hJTERSRU4gKi8pIHtcclxuICAgICAgICAgICAgICAgIC8vIHByZXYgY2hpbGRyZW4gd2FzIGFycmF5XHJcbiAgICAgICAgICAgICAgICBpZiAoc2hhcGVGbGFnICYgMTYgLyogQVJSQVlfQ0hJTERSRU4gKi8pIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyB0d28gYXJyYXlzLCBjYW5ub3QgYXNzdW1lIGFueXRoaW5nLCBkbyBmdWxsIGRpZmZcclxuICAgICAgICAgICAgICAgICAgICBwYXRjaEtleWVkQ2hpbGRyZW4oYzEsIGMyLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIG9wdGltaXplZCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBubyBuZXcgY2hpbGRyZW4sIGp1c3QgdW5tb3VudCBvbGRcclxuICAgICAgICAgICAgICAgICAgICB1bm1vdW50Q2hpbGRyZW4oYzEsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gcHJldiBjaGlsZHJlbiB3YXMgdGV4dCBPUiBudWxsXHJcbiAgICAgICAgICAgICAgICAvLyBuZXcgY2hpbGRyZW4gaXMgYXJyYXkgT1IgbnVsbFxyXG4gICAgICAgICAgICAgICAgaWYgKHByZXZTaGFwZUZsYWcgJiA4IC8qIFRFWFRfQ0hJTERSRU4gKi8pIHtcclxuICAgICAgICAgICAgICAgICAgICBob3N0U2V0RWxlbWVudFRleHQoY29udGFpbmVyLCAnJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBtb3VudCBuZXcgaWYgYXJyYXlcclxuICAgICAgICAgICAgICAgIGlmIChzaGFwZUZsYWcgJiAxNiAvKiBBUlJBWV9DSElMRFJFTiAqLykge1xyXG4gICAgICAgICAgICAgICAgICAgIG1vdW50Q2hpbGRyZW4oYzIsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgb3B0aW1pemVkKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBjb25zdCBwYXRjaFVua2V5ZWRDaGlsZHJlbiA9IChjMSwgYzIsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgb3B0aW1pemVkKSA9PiB7XHJcbiAgICAgICAgYzEgPSBjMSB8fCBFTVBUWV9BUlI7XHJcbiAgICAgICAgYzIgPSBjMiB8fCBFTVBUWV9BUlI7XHJcbiAgICAgICAgY29uc3Qgb2xkTGVuZ3RoID0gYzEubGVuZ3RoO1xyXG4gICAgICAgIGNvbnN0IG5ld0xlbmd0aCA9IGMyLmxlbmd0aDtcclxuICAgICAgICBjb25zdCBjb21tb25MZW5ndGggPSBNYXRoLm1pbihvbGRMZW5ndGgsIG5ld0xlbmd0aCk7XHJcbiAgICAgICAgbGV0IGk7XHJcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGNvbW1vbkxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG5leHRDaGlsZCA9IChjMltpXSA9IG9wdGltaXplZFxyXG4gICAgICAgICAgICAgICAgPyBjbG9uZUlmTW91bnRlZChjMltpXSlcclxuICAgICAgICAgICAgICAgIDogbm9ybWFsaXplVk5vZGUoYzJbaV0pKTtcclxuICAgICAgICAgICAgcGF0Y2goYzFbaV0sIG5leHRDaGlsZCwgY29udGFpbmVyLCBudWxsLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgb3B0aW1pemVkKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG9sZExlbmd0aCA+IG5ld0xlbmd0aCkge1xyXG4gICAgICAgICAgICAvLyByZW1vdmUgb2xkXHJcbiAgICAgICAgICAgIHVubW91bnRDaGlsZHJlbihjMSwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgdHJ1ZSwgZmFsc2UsIGNvbW1vbkxlbmd0aCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBtb3VudCBuZXdcclxuICAgICAgICAgICAgbW91bnRDaGlsZHJlbihjMiwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBvcHRpbWl6ZWQsIGNvbW1vbkxlbmd0aCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8vIGNhbiBiZSBhbGwta2V5ZWQgb3IgbWl4ZWRcclxuICAgIGNvbnN0IHBhdGNoS2V5ZWRDaGlsZHJlbiA9IChjMSwgYzIsIGNvbnRhaW5lciwgcGFyZW50QW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgb3B0aW1pemVkKSA9PiB7XHJcbiAgICAgICAgbGV0IGkgPSAwO1xyXG4gICAgICAgIGNvbnN0IGwyID0gYzIubGVuZ3RoO1xyXG4gICAgICAgIGxldCBlMSA9IGMxLmxlbmd0aCAtIDE7IC8vIHByZXYgZW5kaW5nIGluZGV4XHJcbiAgICAgICAgbGV0IGUyID0gbDIgLSAxOyAvLyBuZXh0IGVuZGluZyBpbmRleFxyXG4gICAgICAgIC8vIDEuIHN5bmMgZnJvbSBzdGFydFxyXG4gICAgICAgIC8vIChhIGIpIGNcclxuICAgICAgICAvLyAoYSBiKSBkIGVcclxuICAgICAgICB3aGlsZSAoaSA8PSBlMSAmJiBpIDw9IGUyKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG4xID0gYzFbaV07XHJcbiAgICAgICAgICAgIGNvbnN0IG4yID0gKGMyW2ldID0gb3B0aW1pemVkXHJcbiAgICAgICAgICAgICAgICA/IGNsb25lSWZNb3VudGVkKGMyW2ldKVxyXG4gICAgICAgICAgICAgICAgOiBub3JtYWxpemVWTm9kZShjMltpXSkpO1xyXG4gICAgICAgICAgICBpZiAoaXNTYW1lVk5vZGVUeXBlKG4xLCBuMikpIHtcclxuICAgICAgICAgICAgICAgIHBhdGNoKG4xLCBuMiwgY29udGFpbmVyLCBudWxsLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgb3B0aW1pemVkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGkrKztcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gMi4gc3luYyBmcm9tIGVuZFxyXG4gICAgICAgIC8vIGEgKGIgYylcclxuICAgICAgICAvLyBkIGUgKGIgYylcclxuICAgICAgICB3aGlsZSAoaSA8PSBlMSAmJiBpIDw9IGUyKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG4xID0gYzFbZTFdO1xyXG4gICAgICAgICAgICBjb25zdCBuMiA9IChjMltlMl0gPSBvcHRpbWl6ZWRcclxuICAgICAgICAgICAgICAgID8gY2xvbmVJZk1vdW50ZWQoYzJbZTJdKVxyXG4gICAgICAgICAgICAgICAgOiBub3JtYWxpemVWTm9kZShjMltlMl0pKTtcclxuICAgICAgICAgICAgaWYgKGlzU2FtZVZOb2RlVHlwZShuMSwgbjIpKSB7XHJcbiAgICAgICAgICAgICAgICBwYXRjaChuMSwgbjIsIGNvbnRhaW5lciwgbnVsbCwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIG9wdGltaXplZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlMS0tO1xyXG4gICAgICAgICAgICBlMi0tO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyAzLiBjb21tb24gc2VxdWVuY2UgKyBtb3VudFxyXG4gICAgICAgIC8vIChhIGIpXHJcbiAgICAgICAgLy8gKGEgYikgY1xyXG4gICAgICAgIC8vIGkgPSAyLCBlMSA9IDEsIGUyID0gMlxyXG4gICAgICAgIC8vIChhIGIpXHJcbiAgICAgICAgLy8gYyAoYSBiKVxyXG4gICAgICAgIC8vIGkgPSAwLCBlMSA9IC0xLCBlMiA9IDBcclxuICAgICAgICBpZiAoaSA+IGUxKSB7XHJcbiAgICAgICAgICAgIGlmIChpIDw9IGUyKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuZXh0UG9zID0gZTIgKyAxO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYW5jaG9yID0gbmV4dFBvcyA8IGwyID8gYzJbbmV4dFBvc10uZWwgOiBwYXJlbnRBbmNob3I7XHJcbiAgICAgICAgICAgICAgICB3aGlsZSAoaSA8PSBlMikge1xyXG4gICAgICAgICAgICAgICAgICAgIHBhdGNoKG51bGwsIChjMltpXSA9IG9wdGltaXplZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA/IGNsb25lSWZNb3VudGVkKGMyW2ldKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA6IG5vcm1hbGl6ZVZOb2RlKGMyW2ldKSksIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaSsrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIDQuIGNvbW1vbiBzZXF1ZW5jZSArIHVubW91bnRcclxuICAgICAgICAvLyAoYSBiKSBjXHJcbiAgICAgICAgLy8gKGEgYilcclxuICAgICAgICAvLyBpID0gMiwgZTEgPSAyLCBlMiA9IDFcclxuICAgICAgICAvLyBhIChiIGMpXHJcbiAgICAgICAgLy8gKGIgYylcclxuICAgICAgICAvLyBpID0gMCwgZTEgPSAwLCBlMiA9IC0xXHJcbiAgICAgICAgZWxzZSBpZiAoaSA+IGUyKSB7XHJcbiAgICAgICAgICAgIHdoaWxlIChpIDw9IGUxKSB7XHJcbiAgICAgICAgICAgICAgICB1bm1vdW50KGMxW2ldLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgIGkrKztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyA1LiB1bmtub3duIHNlcXVlbmNlXHJcbiAgICAgICAgLy8gW2kgLi4uIGUxICsgMV06IGEgYiBbYyBkIGVdIGYgZ1xyXG4gICAgICAgIC8vIFtpIC4uLiBlMiArIDFdOiBhIGIgW2UgZCBjIGhdIGYgZ1xyXG4gICAgICAgIC8vIGkgPSAyLCBlMSA9IDQsIGUyID0gNVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCBzMSA9IGk7IC8vIHByZXYgc3RhcnRpbmcgaW5kZXhcclxuICAgICAgICAgICAgY29uc3QgczIgPSBpOyAvLyBuZXh0IHN0YXJ0aW5nIGluZGV4XHJcbiAgICAgICAgICAgIC8vIDUuMSBidWlsZCBrZXk6aW5kZXggbWFwIGZvciBuZXdDaGlsZHJlblxyXG4gICAgICAgICAgICBjb25zdCBrZXlUb05ld0luZGV4TWFwID0gbmV3IE1hcCgpO1xyXG4gICAgICAgICAgICBmb3IgKGkgPSBzMjsgaSA8PSBlMjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuZXh0Q2hpbGQgPSAoYzJbaV0gPSBvcHRpbWl6ZWRcclxuICAgICAgICAgICAgICAgICAgICA/IGNsb25lSWZNb3VudGVkKGMyW2ldKVxyXG4gICAgICAgICAgICAgICAgICAgIDogbm9ybWFsaXplVk5vZGUoYzJbaV0pKTtcclxuICAgICAgICAgICAgICAgIGlmIChuZXh0Q2hpbGQua2V5ICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIGtleVRvTmV3SW5kZXhNYXAuaGFzKG5leHRDaGlsZC5rZXkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdhcm4oYER1cGxpY2F0ZSBrZXlzIGZvdW5kIGR1cmluZyB1cGRhdGU6YCwgSlNPTi5zdHJpbmdpZnkobmV4dENoaWxkLmtleSksIGBNYWtlIHN1cmUga2V5cyBhcmUgdW5pcXVlLmApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBrZXlUb05ld0luZGV4TWFwLnNldChuZXh0Q2hpbGQua2V5LCBpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyA1LjIgbG9vcCB0aHJvdWdoIG9sZCBjaGlsZHJlbiBsZWZ0IHRvIGJlIHBhdGNoZWQgYW5kIHRyeSB0byBwYXRjaFxyXG4gICAgICAgICAgICAvLyBtYXRjaGluZyBub2RlcyAmIHJlbW92ZSBub2RlcyB0aGF0IGFyZSBubyBsb25nZXIgcHJlc2VudFxyXG4gICAgICAgICAgICBsZXQgajtcclxuICAgICAgICAgICAgbGV0IHBhdGNoZWQgPSAwO1xyXG4gICAgICAgICAgICBjb25zdCB0b0JlUGF0Y2hlZCA9IGUyIC0gczIgKyAxO1xyXG4gICAgICAgICAgICBsZXQgbW92ZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgLy8gdXNlZCB0byB0cmFjayB3aGV0aGVyIGFueSBub2RlIGhhcyBtb3ZlZFxyXG4gICAgICAgICAgICBsZXQgbWF4TmV3SW5kZXhTb0ZhciA9IDA7XHJcbiAgICAgICAgICAgIC8vIHdvcmtzIGFzIE1hcDxuZXdJbmRleCwgb2xkSW5kZXg+XHJcbiAgICAgICAgICAgIC8vIE5vdGUgdGhhdCBvbGRJbmRleCBpcyBvZmZzZXQgYnkgKzFcclxuICAgICAgICAgICAgLy8gYW5kIG9sZEluZGV4ID0gMCBpcyBhIHNwZWNpYWwgdmFsdWUgaW5kaWNhdGluZyB0aGUgbmV3IG5vZGUgaGFzXHJcbiAgICAgICAgICAgIC8vIG5vIGNvcnJlc3BvbmRpbmcgb2xkIG5vZGUuXHJcbiAgICAgICAgICAgIC8vIHVzZWQgZm9yIGRldGVybWluaW5nIGxvbmdlc3Qgc3RhYmxlIHN1YnNlcXVlbmNlXHJcbiAgICAgICAgICAgIGNvbnN0IG5ld0luZGV4VG9PbGRJbmRleE1hcCA9IG5ldyBBcnJheSh0b0JlUGF0Y2hlZCk7XHJcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCB0b0JlUGF0Y2hlZDsgaSsrKVxyXG4gICAgICAgICAgICAgICAgbmV3SW5kZXhUb09sZEluZGV4TWFwW2ldID0gMDtcclxuICAgICAgICAgICAgZm9yIChpID0gczE7IGkgPD0gZTE7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcHJldkNoaWxkID0gYzFbaV07XHJcbiAgICAgICAgICAgICAgICBpZiAocGF0Y2hlZCA+PSB0b0JlUGF0Y2hlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGFsbCBuZXcgY2hpbGRyZW4gaGF2ZSBiZWVuIHBhdGNoZWQgc28gdGhpcyBjYW4gb25seSBiZSBhIHJlbW92YWxcclxuICAgICAgICAgICAgICAgICAgICB1bm1vdW50KHByZXZDaGlsZCwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBsZXQgbmV3SW5kZXg7XHJcbiAgICAgICAgICAgICAgICBpZiAocHJldkNoaWxkLmtleSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3SW5kZXggPSBrZXlUb05ld0luZGV4TWFwLmdldChwcmV2Q2hpbGQua2V5KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGtleS1sZXNzIG5vZGUsIHRyeSB0byBsb2NhdGUgYSBrZXktbGVzcyBub2RlIG9mIHRoZSBzYW1lIHR5cGVcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGogPSBzMjsgaiA8PSBlMjsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZXdJbmRleFRvT2xkSW5kZXhNYXBbaiAtIHMyXSA9PT0gMCAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNTYW1lVk5vZGVUeXBlKHByZXZDaGlsZCwgYzJbal0pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdJbmRleCA9IGo7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChuZXdJbmRleCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdW5tb3VudChwcmV2Q2hpbGQsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3SW5kZXhUb09sZEluZGV4TWFwW25ld0luZGV4IC0gczJdID0gaSArIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5ld0luZGV4ID49IG1heE5ld0luZGV4U29GYXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWF4TmV3SW5kZXhTb0ZhciA9IG5ld0luZGV4O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW92ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBwYXRjaChwcmV2Q2hpbGQsIGMyW25ld0luZGV4XSwgY29udGFpbmVyLCBudWxsLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgb3B0aW1pemVkKTtcclxuICAgICAgICAgICAgICAgICAgICBwYXRjaGVkKys7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gNS4zIG1vdmUgYW5kIG1vdW50XHJcbiAgICAgICAgICAgIC8vIGdlbmVyYXRlIGxvbmdlc3Qgc3RhYmxlIHN1YnNlcXVlbmNlIG9ubHkgd2hlbiBub2RlcyBoYXZlIG1vdmVkXHJcbiAgICAgICAgICAgIGNvbnN0IGluY3JlYXNpbmdOZXdJbmRleFNlcXVlbmNlID0gbW92ZWRcclxuICAgICAgICAgICAgICAgID8gZ2V0U2VxdWVuY2UobmV3SW5kZXhUb09sZEluZGV4TWFwKVxyXG4gICAgICAgICAgICAgICAgOiBFTVBUWV9BUlI7XHJcbiAgICAgICAgICAgIGogPSBpbmNyZWFzaW5nTmV3SW5kZXhTZXF1ZW5jZS5sZW5ndGggLSAxO1xyXG4gICAgICAgICAgICAvLyBsb29waW5nIGJhY2t3YXJkcyBzbyB0aGF0IHdlIGNhbiB1c2UgbGFzdCBwYXRjaGVkIG5vZGUgYXMgYW5jaG9yXHJcbiAgICAgICAgICAgIGZvciAoaSA9IHRvQmVQYXRjaGVkIC0gMTsgaSA+PSAwOyBpLS0pIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG5leHRJbmRleCA9IHMyICsgaTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG5leHRDaGlsZCA9IGMyW25leHRJbmRleF07XHJcbiAgICAgICAgICAgICAgICBjb25zdCBhbmNob3IgPSBuZXh0SW5kZXggKyAxIDwgbDIgPyBjMltuZXh0SW5kZXggKyAxXS5lbCA6IHBhcmVudEFuY2hvcjtcclxuICAgICAgICAgICAgICAgIGlmIChuZXdJbmRleFRvT2xkSW5kZXhNYXBbaV0gPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBtb3VudCBuZXdcclxuICAgICAgICAgICAgICAgICAgICBwYXRjaChudWxsLCBuZXh0Q2hpbGQsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChtb3ZlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIG1vdmUgaWY6XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhlcmUgaXMgbm8gc3RhYmxlIHN1YnNlcXVlbmNlIChlLmcuIGEgcmV2ZXJzZSlcclxuICAgICAgICAgICAgICAgICAgICAvLyBPUiBjdXJyZW50IG5vZGUgaXMgbm90IGFtb25nIHRoZSBzdGFibGUgc2VxdWVuY2VcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaiA8IDAgfHwgaSAhPT0gaW5jcmVhc2luZ05ld0luZGV4U2VxdWVuY2Vbal0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW92ZShuZXh0Q2hpbGQsIGNvbnRhaW5lciwgYW5jaG9yLCAyIC8qIFJFT1JERVIgKi8pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgai0tO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBjb25zdCBtb3ZlID0gKHZub2RlLCBjb250YWluZXIsIGFuY2hvciwgbW92ZVR5cGUsIHBhcmVudFN1c3BlbnNlID0gbnVsbCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHsgZWwsIHR5cGUsIHRyYW5zaXRpb24sIGNoaWxkcmVuLCBzaGFwZUZsYWcgfSA9IHZub2RlO1xyXG4gICAgICAgIGlmIChzaGFwZUZsYWcgJiA2IC8qIENPTVBPTkVOVCAqLykge1xyXG4gICAgICAgICAgICBtb3ZlKHZub2RlLmNvbXBvbmVudC5zdWJUcmVlLCBjb250YWluZXIsIGFuY2hvciwgbW92ZVR5cGUpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICggc2hhcGVGbGFnICYgMTI4IC8qIFNVU1BFTlNFICovKSB7XHJcbiAgICAgICAgICAgIHZub2RlLnN1c3BlbnNlLm1vdmUoY29udGFpbmVyLCBhbmNob3IsIG1vdmVUeXBlKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoc2hhcGVGbGFnICYgNjQgLyogVEVMRVBPUlQgKi8pIHtcclxuICAgICAgICAgICAgdHlwZS5tb3ZlKHZub2RlLCBjb250YWluZXIsIGFuY2hvciwgaW50ZXJuYWxzKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodHlwZSA9PT0gRnJhZ21lbnQpIHtcclxuICAgICAgICAgICAgaG9zdEluc2VydChlbCwgY29udGFpbmVyLCBhbmNob3IpO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBtb3ZlKGNoaWxkcmVuW2ldLCBjb250YWluZXIsIGFuY2hvciwgbW92ZVR5cGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGhvc3RJbnNlcnQodm5vZGUuYW5jaG9yLCBjb250YWluZXIsIGFuY2hvcik7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHR5cGUgPT09IFN0YXRpYykge1xyXG4gICAgICAgICAgICBtb3ZlU3RhdGljTm9kZSh2bm9kZSwgY29udGFpbmVyLCBhbmNob3IpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHNpbmdsZSBub2Rlc1xyXG4gICAgICAgIGNvbnN0IG5lZWRUcmFuc2l0aW9uID0gbW92ZVR5cGUgIT09IDIgLyogUkVPUkRFUiAqLyAmJlxyXG4gICAgICAgICAgICBzaGFwZUZsYWcgJiAxIC8qIEVMRU1FTlQgKi8gJiZcclxuICAgICAgICAgICAgdHJhbnNpdGlvbjtcclxuICAgICAgICBpZiAobmVlZFRyYW5zaXRpb24pIHtcclxuICAgICAgICAgICAgaWYgKG1vdmVUeXBlID09PSAwIC8qIEVOVEVSICovKSB7XHJcbiAgICAgICAgICAgICAgICB0cmFuc2l0aW9uLmJlZm9yZUVudGVyKGVsKTtcclxuICAgICAgICAgICAgICAgIGhvc3RJbnNlcnQoZWwsIGNvbnRhaW5lciwgYW5jaG9yKTtcclxuICAgICAgICAgICAgICAgIHF1ZXVlUG9zdFJlbmRlckVmZmVjdCgoKSA9PiB0cmFuc2l0aW9uLmVudGVyKGVsKSwgcGFyZW50U3VzcGVuc2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgeyBsZWF2ZSwgZGVsYXlMZWF2ZSwgYWZ0ZXJMZWF2ZSB9ID0gdHJhbnNpdGlvbjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJlbW92ZSA9ICgpID0+IGhvc3RJbnNlcnQoZWwsIGNvbnRhaW5lciwgYW5jaG9yKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHBlcmZvcm1MZWF2ZSA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBsZWF2ZShlbCwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZW1vdmUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWZ0ZXJMZWF2ZSAmJiBhZnRlckxlYXZlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgaWYgKGRlbGF5TGVhdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICBkZWxheUxlYXZlKGVsLCByZW1vdmUsIHBlcmZvcm1MZWF2ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBwZXJmb3JtTGVhdmUoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgaG9zdEluc2VydChlbCwgY29udGFpbmVyLCBhbmNob3IpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBjb25zdCB1bm1vdW50ID0gKHZub2RlLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBkb1JlbW92ZSA9IGZhbHNlLCBvcHRpbWl6ZWQgPSBmYWxzZSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHsgdHlwZSwgcHJvcHMsIHJlZiwgY2hpbGRyZW4sIGR5bmFtaWNDaGlsZHJlbiwgc2hhcGVGbGFnLCBwYXRjaEZsYWcsIGRpcnMgfSA9IHZub2RlO1xyXG4gICAgICAgIC8vIHVuc2V0IHJlZlxyXG4gICAgICAgIGlmIChyZWYgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICBzZXRSZWYocmVmLCBudWxsLCBwYXJlbnRTdXNwZW5zZSwgbnVsbCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChzaGFwZUZsYWcgJiAyNTYgLyogQ09NUE9ORU5UX1NIT1VMRF9LRUVQX0FMSVZFICovKSB7XHJcbiAgICAgICAgICAgIHBhcmVudENvbXBvbmVudC5jdHguZGVhY3RpdmF0ZSh2bm9kZSk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3Qgc2hvdWxkSW52b2tlRGlycyA9IHNoYXBlRmxhZyAmIDEgLyogRUxFTUVOVCAqLyAmJiBkaXJzO1xyXG4gICAgICAgIGxldCB2bm9kZUhvb2s7XHJcbiAgICAgICAgaWYgKCh2bm9kZUhvb2sgPSBwcm9wcyAmJiBwcm9wcy5vblZub2RlQmVmb3JlVW5tb3VudCkpIHtcclxuICAgICAgICAgICAgaW52b2tlVk5vZGVIb29rKHZub2RlSG9vaywgcGFyZW50Q29tcG9uZW50LCB2bm9kZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChzaGFwZUZsYWcgJiA2IC8qIENPTVBPTkVOVCAqLykge1xyXG4gICAgICAgICAgICB1bm1vdW50Q29tcG9uZW50KHZub2RlLmNvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGRvUmVtb3ZlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGlmICggc2hhcGVGbGFnICYgMTI4IC8qIFNVU1BFTlNFICovKSB7XHJcbiAgICAgICAgICAgICAgICB2bm9kZS5zdXNwZW5zZS51bm1vdW50KHBhcmVudFN1c3BlbnNlLCBkb1JlbW92ZSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHNob3VsZEludm9rZURpcnMpIHtcclxuICAgICAgICAgICAgICAgIGludm9rZURpcmVjdGl2ZUhvb2sodm5vZGUsIG51bGwsIHBhcmVudENvbXBvbmVudCwgJ2JlZm9yZVVubW91bnQnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZHluYW1pY0NoaWxkcmVuICYmXHJcbiAgICAgICAgICAgICAgICAvLyAjMTE1MzogZmFzdCBwYXRoIHNob3VsZCBub3QgYmUgdGFrZW4gZm9yIG5vbi1zdGFibGUgKHYtZm9yKSBmcmFnbWVudHNcclxuICAgICAgICAgICAgICAgICh0eXBlICE9PSBGcmFnbWVudCB8fFxyXG4gICAgICAgICAgICAgICAgICAgIChwYXRjaEZsYWcgPiAwICYmIHBhdGNoRmxhZyAmIDY0IC8qIFNUQUJMRV9GUkFHTUVOVCAqLykpKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBmYXN0IHBhdGggZm9yIGJsb2NrIG5vZGVzOiBvbmx5IG5lZWQgdG8gdW5tb3VudCBkeW5hbWljIGNoaWxkcmVuLlxyXG4gICAgICAgICAgICAgICAgdW5tb3VudENoaWxkcmVuKGR5bmFtaWNDaGlsZHJlbiwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgZmFsc2UsIHRydWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKCh0eXBlID09PSBGcmFnbWVudCAmJlxyXG4gICAgICAgICAgICAgICAgKHBhdGNoRmxhZyAmIDEyOCAvKiBLRVlFRF9GUkFHTUVOVCAqLyB8fFxyXG4gICAgICAgICAgICAgICAgICAgIHBhdGNoRmxhZyAmIDI1NiAvKiBVTktFWUVEX0ZSQUdNRU5UICovKSkgfHxcclxuICAgICAgICAgICAgICAgICghb3B0aW1pemVkICYmIHNoYXBlRmxhZyAmIDE2IC8qIEFSUkFZX0NISUxEUkVOICovKSkge1xyXG4gICAgICAgICAgICAgICAgdW5tb3VudENoaWxkcmVuKGNoaWxkcmVuLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBhbiB1bm1vdW50ZWQgdGVsZXBvcnQgc2hvdWxkIGFsd2F5cyByZW1vdmUgaXRzIGNoaWxkcmVuIGlmIG5vdCBkaXNhYmxlZFxyXG4gICAgICAgICAgICBpZiAoc2hhcGVGbGFnICYgNjQgLyogVEVMRVBPUlQgKi8gJiZcclxuICAgICAgICAgICAgICAgIChkb1JlbW92ZSB8fCAhaXNUZWxlcG9ydERpc2FibGVkKHZub2RlLnByb3BzKSkpIHtcclxuICAgICAgICAgICAgICAgIHZub2RlLnR5cGUucmVtb3ZlKHZub2RlLCBpbnRlcm5hbHMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChkb1JlbW92ZSkge1xyXG4gICAgICAgICAgICAgICAgcmVtb3ZlKHZub2RlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoKHZub2RlSG9vayA9IHByb3BzICYmIHByb3BzLm9uVm5vZGVVbm1vdW50ZWQpIHx8IHNob3VsZEludm9rZURpcnMpIHtcclxuICAgICAgICAgICAgcXVldWVQb3N0UmVuZGVyRWZmZWN0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgIHZub2RlSG9vayAmJiBpbnZva2VWTm9kZUhvb2sodm5vZGVIb29rLCBwYXJlbnRDb21wb25lbnQsIHZub2RlKTtcclxuICAgICAgICAgICAgICAgIHNob3VsZEludm9rZURpcnMgJiZcclxuICAgICAgICAgICAgICAgICAgICBpbnZva2VEaXJlY3RpdmVIb29rKHZub2RlLCBudWxsLCBwYXJlbnRDb21wb25lbnQsICd1bm1vdW50ZWQnKTtcclxuICAgICAgICAgICAgfSwgcGFyZW50U3VzcGVuc2UpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBjb25zdCByZW1vdmUgPSB2bm9kZSA9PiB7XHJcbiAgICAgICAgY29uc3QgeyB0eXBlLCBlbCwgYW5jaG9yLCB0cmFuc2l0aW9uIH0gPSB2bm9kZTtcclxuICAgICAgICBpZiAodHlwZSA9PT0gRnJhZ21lbnQpIHtcclxuICAgICAgICAgICAgcmVtb3ZlRnJhZ21lbnQoZWwsIGFuY2hvcik7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHR5cGUgPT09IFN0YXRpYykge1xyXG4gICAgICAgICAgICByZW1vdmVTdGF0aWNOb2RlKHZub2RlKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBwZXJmb3JtUmVtb3ZlID0gKCkgPT4ge1xyXG4gICAgICAgICAgICBob3N0UmVtb3ZlKGVsKTtcclxuICAgICAgICAgICAgaWYgKHRyYW5zaXRpb24gJiYgIXRyYW5zaXRpb24ucGVyc2lzdGVkICYmIHRyYW5zaXRpb24uYWZ0ZXJMZWF2ZSkge1xyXG4gICAgICAgICAgICAgICAgdHJhbnNpdGlvbi5hZnRlckxlYXZlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIGlmICh2bm9kZS5zaGFwZUZsYWcgJiAxIC8qIEVMRU1FTlQgKi8gJiZcclxuICAgICAgICAgICAgdHJhbnNpdGlvbiAmJlxyXG4gICAgICAgICAgICAhdHJhbnNpdGlvbi5wZXJzaXN0ZWQpIHtcclxuICAgICAgICAgICAgY29uc3QgeyBsZWF2ZSwgZGVsYXlMZWF2ZSB9ID0gdHJhbnNpdGlvbjtcclxuICAgICAgICAgICAgY29uc3QgcGVyZm9ybUxlYXZlID0gKCkgPT4gbGVhdmUoZWwsIHBlcmZvcm1SZW1vdmUpO1xyXG4gICAgICAgICAgICBpZiAoZGVsYXlMZWF2ZSkge1xyXG4gICAgICAgICAgICAgICAgZGVsYXlMZWF2ZSh2bm9kZS5lbCwgcGVyZm9ybVJlbW92ZSwgcGVyZm9ybUxlYXZlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHBlcmZvcm1MZWF2ZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBwZXJmb3JtUmVtb3ZlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGNvbnN0IHJlbW92ZUZyYWdtZW50ID0gKGN1ciwgZW5kKSA9PiB7XHJcbiAgICAgICAgLy8gRm9yIGZyYWdtZW50cywgZGlyZWN0bHkgcmVtb3ZlIGFsbCBjb250YWluZWQgRE9NIG5vZGVzLlxyXG4gICAgICAgIC8vIChmcmFnbWVudCBjaGlsZCBub2RlcyBjYW5ub3QgaGF2ZSB0cmFuc2l0aW9uKVxyXG4gICAgICAgIGxldCBuZXh0O1xyXG4gICAgICAgIHdoaWxlIChjdXIgIT09IGVuZCkge1xyXG4gICAgICAgICAgICBuZXh0ID0gaG9zdE5leHRTaWJsaW5nKGN1cik7XHJcbiAgICAgICAgICAgIGhvc3RSZW1vdmUoY3VyKTtcclxuICAgICAgICAgICAgY3VyID0gbmV4dDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaG9zdFJlbW92ZShlbmQpO1xyXG4gICAgfTtcclxuICAgIGNvbnN0IHVubW91bnRDb21wb25lbnQgPSAoaW5zdGFuY2UsIHBhcmVudFN1c3BlbnNlLCBkb1JlbW92ZSkgPT4ge1xyXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgaW5zdGFuY2UudHlwZS5fX2htcklkKSB7XHJcbiAgICAgICAgICAgIHVucmVnaXN0ZXJITVIoaW5zdGFuY2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCB7IGJ1bSwgZWZmZWN0cywgdXBkYXRlLCBzdWJUcmVlLCB1bSB9ID0gaW5zdGFuY2U7XHJcbiAgICAgICAgLy8gYmVmb3JlVW5tb3VudCBob29rXHJcbiAgICAgICAgaWYgKGJ1bSkge1xyXG4gICAgICAgICAgICBpbnZva2VBcnJheUZucyhidW0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZWZmZWN0cykge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGVmZmVjdHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHN0b3AoZWZmZWN0c1tpXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gdXBkYXRlIG1heSBiZSBudWxsIGlmIGEgY29tcG9uZW50IGlzIHVubW91bnRlZCBiZWZvcmUgaXRzIGFzeW5jXHJcbiAgICAgICAgLy8gc2V0dXAgaGFzIHJlc29sdmVkLlxyXG4gICAgICAgIGlmICh1cGRhdGUpIHtcclxuICAgICAgICAgICAgc3RvcCh1cGRhdGUpO1xyXG4gICAgICAgICAgICB1bm1vdW50KHN1YlRyZWUsIGluc3RhbmNlLCBwYXJlbnRTdXNwZW5zZSwgZG9SZW1vdmUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyB1bm1vdW50ZWQgaG9va1xyXG4gICAgICAgIGlmICh1bSkge1xyXG4gICAgICAgICAgICBxdWV1ZVBvc3RSZW5kZXJFZmZlY3QodW0sIHBhcmVudFN1c3BlbnNlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcXVldWVQb3N0UmVuZGVyRWZmZWN0KCgpID0+IHtcclxuICAgICAgICAgICAgaW5zdGFuY2UuaXNVbm1vdW50ZWQgPSB0cnVlO1xyXG4gICAgICAgIH0sIHBhcmVudFN1c3BlbnNlKTtcclxuICAgICAgICAvLyBBIGNvbXBvbmVudCB3aXRoIGFzeW5jIGRlcCBpbnNpZGUgYSBwZW5kaW5nIHN1c3BlbnNlIGlzIHVubW91bnRlZCBiZWZvcmVcclxuICAgICAgICAvLyBpdHMgYXN5bmMgZGVwIHJlc29sdmVzLiBUaGlzIHNob3VsZCByZW1vdmUgdGhlIGRlcCBmcm9tIHRoZSBzdXNwZW5zZSwgYW5kXHJcbiAgICAgICAgLy8gY2F1c2UgdGhlIHN1c3BlbnNlIHRvIHJlc29sdmUgaW1tZWRpYXRlbHkgaWYgdGhhdCB3YXMgdGhlIGxhc3QgZGVwLlxyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgICAgcGFyZW50U3VzcGVuc2UgJiZcclxuICAgICAgICAgICAgcGFyZW50U3VzcGVuc2UucGVuZGluZ0JyYW5jaCAmJlxyXG4gICAgICAgICAgICAhcGFyZW50U3VzcGVuc2UuaXNVbm1vdW50ZWQgJiZcclxuICAgICAgICAgICAgaW5zdGFuY2UuYXN5bmNEZXAgJiZcclxuICAgICAgICAgICAgIWluc3RhbmNlLmFzeW5jUmVzb2x2ZWQgJiZcclxuICAgICAgICAgICAgaW5zdGFuY2Uuc3VzcGVuc2VJZCA9PT0gcGFyZW50U3VzcGVuc2UucGVuZGluZ0lkKSB7XHJcbiAgICAgICAgICAgIHBhcmVudFN1c3BlbnNlLmRlcHMtLTtcclxuICAgICAgICAgICAgaWYgKHBhcmVudFN1c3BlbnNlLmRlcHMgPT09IDApIHtcclxuICAgICAgICAgICAgICAgIHBhcmVudFN1c3BlbnNlLnJlc29sdmUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHx8IF9fVlVFX1BST0RfREVWVE9PTFNfXykge1xyXG4gICAgICAgICAgICBkZXZ0b29sc0NvbXBvbmVudFJlbW92ZWQoaW5zdGFuY2UpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBjb25zdCB1bm1vdW50Q2hpbGRyZW4gPSAoY2hpbGRyZW4sIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGRvUmVtb3ZlID0gZmFsc2UsIG9wdGltaXplZCA9IGZhbHNlLCBzdGFydCA9IDApID0+IHtcclxuICAgICAgICBmb3IgKGxldCBpID0gc3RhcnQ7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB1bm1vdW50KGNoaWxkcmVuW2ldLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBkb1JlbW92ZSwgb3B0aW1pemVkKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgY29uc3QgZ2V0TmV4dEhvc3ROb2RlID0gdm5vZGUgPT4ge1xyXG4gICAgICAgIGlmICh2bm9kZS5zaGFwZUZsYWcgJiA2IC8qIENPTVBPTkVOVCAqLykge1xyXG4gICAgICAgICAgICByZXR1cm4gZ2V0TmV4dEhvc3ROb2RlKHZub2RlLmNvbXBvbmVudC5zdWJUcmVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCB2bm9kZS5zaGFwZUZsYWcgJiAxMjggLyogU1VTUEVOU0UgKi8pIHtcclxuICAgICAgICAgICAgcmV0dXJuIHZub2RlLnN1c3BlbnNlLm5leHQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGhvc3ROZXh0U2libGluZygodm5vZGUuYW5jaG9yIHx8IHZub2RlLmVsKSk7XHJcbiAgICB9O1xyXG4gICAgY29uc3QgcmVuZGVyID0gKHZub2RlLCBjb250YWluZXIpID0+IHtcclxuICAgICAgICBpZiAodm5vZGUgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBpZiAoY29udGFpbmVyLl92bm9kZSkge1xyXG4gICAgICAgICAgICAgICAgdW5tb3VudChjb250YWluZXIuX3Zub2RlLCBudWxsLCBudWxsLCB0cnVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcGF0Y2goY29udGFpbmVyLl92bm9kZSB8fCBudWxsLCB2bm9kZSwgY29udGFpbmVyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZmx1c2hQb3N0Rmx1c2hDYnMoKTtcclxuICAgICAgICBjb250YWluZXIuX3Zub2RlID0gdm5vZGU7XHJcbiAgICB9O1xyXG4gICAgY29uc3QgaW50ZXJuYWxzID0ge1xyXG4gICAgICAgIHA6IHBhdGNoLFxyXG4gICAgICAgIHVtOiB1bm1vdW50LFxyXG4gICAgICAgIG06IG1vdmUsXHJcbiAgICAgICAgcjogcmVtb3ZlLFxyXG4gICAgICAgIG10OiBtb3VudENvbXBvbmVudCxcclxuICAgICAgICBtYzogbW91bnRDaGlsZHJlbixcclxuICAgICAgICBwYzogcGF0Y2hDaGlsZHJlbixcclxuICAgICAgICBwYmM6IHBhdGNoQmxvY2tDaGlsZHJlbixcclxuICAgICAgICBuOiBnZXROZXh0SG9zdE5vZGUsXHJcbiAgICAgICAgbzogb3B0aW9uc1xyXG4gICAgfTtcclxuICAgIGxldCBoeWRyYXRlO1xyXG4gICAgbGV0IGh5ZHJhdGVOb2RlO1xyXG4gICAgaWYgKGNyZWF0ZUh5ZHJhdGlvbkZucykge1xyXG4gICAgICAgIFtoeWRyYXRlLCBoeWRyYXRlTm9kZV0gPSBjcmVhdGVIeWRyYXRpb25GbnMoaW50ZXJuYWxzKTtcclxuICAgIH1cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgcmVuZGVyLFxyXG4gICAgICAgIGh5ZHJhdGUsXHJcbiAgICAgICAgY3JlYXRlQXBwOiBjcmVhdGVBcHBBUEkocmVuZGVyLCBoeWRyYXRlKVxyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiBpbnZva2VWTm9kZUhvb2soaG9vaywgaW5zdGFuY2UsIHZub2RlLCBwcmV2Vk5vZGUgPSBudWxsKSB7XHJcbiAgICBjYWxsV2l0aEFzeW5jRXJyb3JIYW5kbGluZyhob29rLCBpbnN0YW5jZSwgNyAvKiBWTk9ERV9IT09LICovLCBbXHJcbiAgICAgICAgdm5vZGUsXHJcbiAgICAgICAgcHJldlZOb2RlXHJcbiAgICBdKTtcclxufVxyXG4vKipcclxuICogIzExNTZcclxuICogV2hlbiBhIGNvbXBvbmVudCBpcyBITVItZW5hYmxlZCwgd2UgbmVlZCB0byBtYWtlIHN1cmUgdGhhdCBhbGwgc3RhdGljIG5vZGVzXHJcbiAqIGluc2lkZSBhIGJsb2NrIGFsc28gaW5oZXJpdCB0aGUgRE9NIGVsZW1lbnQgZnJvbSB0aGUgcHJldmlvdXMgdHJlZSBzbyB0aGF0XHJcbiAqIEhNUiB1cGRhdGVzICh3aGljaCBhcmUgZnVsbCB1cGRhdGVzKSBjYW4gcmV0cmlldmUgdGhlIGVsZW1lbnQgZm9yIHBhdGNoaW5nLlxyXG4gKlxyXG4gKiAjMjA4MFxyXG4gKiBJbnNpZGUga2V5ZWQgYHRlbXBsYXRlYCBmcmFnbWVudCBzdGF0aWMgY2hpbGRyZW4sIGlmIGEgZnJhZ21lbnQgaXMgbW92ZWQsXHJcbiAqIHRoZSBjaGlsZHJlbiB3aWxsIGFsd2F5cyBtb3ZlZCBzbyB0aGF0IG5lZWQgaW5oZXJpdCBlbCBmb3JtIHByZXZpb3VzIG5vZGVzXHJcbiAqIHRvIGVuc3VyZSBjb3JyZWN0IG1vdmVkIHBvc2l0aW9uLlxyXG4gKi9cclxuZnVuY3Rpb24gdHJhdmVyc2VTdGF0aWNDaGlsZHJlbihuMSwgbjIsIHNoYWxsb3cgPSBmYWxzZSkge1xyXG4gICAgY29uc3QgY2gxID0gbjEuY2hpbGRyZW47XHJcbiAgICBjb25zdCBjaDIgPSBuMi5jaGlsZHJlbjtcclxuICAgIGlmIChpc0FycmF5KGNoMSkgJiYgaXNBcnJheShjaDIpKSB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaDEubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgLy8gdGhpcyBpcyBvbmx5IGNhbGxlZCBpbiB0aGUgb3B0aW1pemVkIHBhdGggc28gYXJyYXkgY2hpbGRyZW4gYXJlXHJcbiAgICAgICAgICAgIC8vIGd1YXJhbnRlZWQgdG8gYmUgdm5vZGVzXHJcbiAgICAgICAgICAgIGNvbnN0IGMxID0gY2gxW2ldO1xyXG4gICAgICAgICAgICBsZXQgYzIgPSBjaDJbaV07XHJcbiAgICAgICAgICAgIGlmIChjMi5zaGFwZUZsYWcgJiAxIC8qIEVMRU1FTlQgKi8gJiYgIWMyLmR5bmFtaWNDaGlsZHJlbikge1xyXG4gICAgICAgICAgICAgICAgaWYgKGMyLnBhdGNoRmxhZyA8PSAwIHx8IGMyLnBhdGNoRmxhZyA9PT0gMzIgLyogSFlEUkFURV9FVkVOVFMgKi8pIHtcclxuICAgICAgICAgICAgICAgICAgICBjMiA9IGNoMltpXSA9IGNsb25lSWZNb3VudGVkKGNoMltpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYzIuZWwgPSBjMS5lbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICghc2hhbGxvdylcclxuICAgICAgICAgICAgICAgICAgICB0cmF2ZXJzZVN0YXRpY0NoaWxkcmVuKGMxLCBjMik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gYWxzbyBpbmhlcml0IGZvciBjb21tZW50IG5vZGVzLCBidXQgbm90IHBsYWNlaG9sZGVycyAoZS5nLiB2LWlmIHdoaWNoXHJcbiAgICAgICAgICAgIC8vIHdvdWxkIGhhdmUgcmVjZWl2ZWQgLmVsIGR1cmluZyBibG9jayBwYXRjaClcclxuICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBjMi50eXBlID09PSBDb21tZW50ICYmICFjMi5lbCkge1xyXG4gICAgICAgICAgICAgICAgYzIuZWwgPSBjMS5lbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4vLyBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Mb25nZXN0X2luY3JlYXNpbmdfc3Vic2VxdWVuY2VcclxuZnVuY3Rpb24gZ2V0U2VxdWVuY2UoYXJyKSB7XHJcbiAgICBjb25zdCBwID0gYXJyLnNsaWNlKCk7XHJcbiAgICBjb25zdCByZXN1bHQgPSBbMF07XHJcbiAgICBsZXQgaSwgaiwgdSwgdiwgYztcclxuICAgIGNvbnN0IGxlbiA9IGFyci5sZW5ndGg7XHJcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICBjb25zdCBhcnJJID0gYXJyW2ldO1xyXG4gICAgICAgIGlmIChhcnJJICE9PSAwKSB7XHJcbiAgICAgICAgICAgIGogPSByZXN1bHRbcmVzdWx0Lmxlbmd0aCAtIDFdO1xyXG4gICAgICAgICAgICBpZiAoYXJyW2pdIDwgYXJySSkge1xyXG4gICAgICAgICAgICAgICAgcFtpXSA9IGo7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChpKTtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHUgPSAwO1xyXG4gICAgICAgICAgICB2ID0gcmVzdWx0Lmxlbmd0aCAtIDE7XHJcbiAgICAgICAgICAgIHdoaWxlICh1IDwgdikge1xyXG4gICAgICAgICAgICAgICAgYyA9ICgodSArIHYpIC8gMikgfCAwO1xyXG4gICAgICAgICAgICAgICAgaWYgKGFycltyZXN1bHRbY11dIDwgYXJySSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHUgPSBjICsgMTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHYgPSBjO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChhcnJJIDwgYXJyW3Jlc3VsdFt1XV0pIHtcclxuICAgICAgICAgICAgICAgIGlmICh1ID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHBbaV0gPSByZXN1bHRbdSAtIDFdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmVzdWx0W3VdID0gaTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHUgPSByZXN1bHQubGVuZ3RoO1xyXG4gICAgdiA9IHJlc3VsdFt1IC0gMV07XHJcbiAgICB3aGlsZSAodS0tID4gMCkge1xyXG4gICAgICAgIHJlc3VsdFt1XSA9IHY7XHJcbiAgICAgICAgdiA9IHBbdl07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XG5cbmNvbnN0IGlzVGVsZXBvcnQgPSAodHlwZSkgPT4gdHlwZS5fX2lzVGVsZXBvcnQ7XHJcbmNvbnN0IGlzVGVsZXBvcnREaXNhYmxlZCA9IChwcm9wcykgPT4gcHJvcHMgJiYgKHByb3BzLmRpc2FibGVkIHx8IHByb3BzLmRpc2FibGVkID09PSAnJyk7XHJcbmNvbnN0IGlzVGFyZ2V0U1ZHID0gKHRhcmdldCkgPT4gdHlwZW9mIFNWR0VsZW1lbnQgIT09ICd1bmRlZmluZWQnICYmIHRhcmdldCBpbnN0YW5jZW9mIFNWR0VsZW1lbnQ7XHJcbmNvbnN0IHJlc29sdmVUYXJnZXQgPSAocHJvcHMsIHNlbGVjdCkgPT4ge1xyXG4gICAgY29uc3QgdGFyZ2V0U2VsZWN0b3IgPSBwcm9wcyAmJiBwcm9wcy50bztcclxuICAgIGlmIChpc1N0cmluZyh0YXJnZXRTZWxlY3RvcikpIHtcclxuICAgICAgICBpZiAoIXNlbGVjdCkge1xyXG4gICAgICAgICAgICAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiZcclxuICAgICAgICAgICAgICAgIHdhcm4oYEN1cnJlbnQgcmVuZGVyZXIgZG9lcyBub3Qgc3VwcG9ydCBzdHJpbmcgdGFyZ2V0IGZvciBUZWxlcG9ydHMuIGAgK1xyXG4gICAgICAgICAgICAgICAgICAgIGAobWlzc2luZyBxdWVyeVNlbGVjdG9yIHJlbmRlcmVyIG9wdGlvbilgKTtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCB0YXJnZXQgPSBzZWxlY3QodGFyZ2V0U2VsZWN0b3IpO1xyXG4gICAgICAgICAgICBpZiAoIXRhcmdldCkge1xyXG4gICAgICAgICAgICAgICAgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgd2FybihgRmFpbGVkIHRvIGxvY2F0ZSBUZWxlcG9ydCB0YXJnZXQgd2l0aCBzZWxlY3RvciBcIiR7dGFyZ2V0U2VsZWN0b3J9XCIuIGAgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBgTm90ZSB0aGUgdGFyZ2V0IGVsZW1lbnQgbXVzdCBleGlzdCBiZWZvcmUgdGhlIGNvbXBvbmVudCBpcyBtb3VudGVkIC0gYCArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGBpLmUuIHRoZSB0YXJnZXQgY2Fubm90IGJlIHJlbmRlcmVkIGJ5IHRoZSBjb21wb25lbnQgaXRzZWxmLCBhbmQgYCArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGBpZGVhbGx5IHNob3VsZCBiZSBvdXRzaWRlIG9mIHRoZSBlbnRpcmUgVnVlIGNvbXBvbmVudCB0cmVlLmApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0YXJnZXQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhdGFyZ2V0U2VsZWN0b3IgJiYgIWlzVGVsZXBvcnREaXNhYmxlZChwcm9wcykpIHtcclxuICAgICAgICAgICAgd2FybihgSW52YWxpZCBUZWxlcG9ydCB0YXJnZXQ6ICR7dGFyZ2V0U2VsZWN0b3J9YCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0YXJnZXRTZWxlY3RvcjtcclxuICAgIH1cclxufTtcclxuY29uc3QgVGVsZXBvcnRJbXBsID0ge1xyXG4gICAgX19pc1RlbGVwb3J0OiB0cnVlLFxyXG4gICAgcHJvY2VzcyhuMSwgbjIsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgb3B0aW1pemVkLCBpbnRlcm5hbHMpIHtcclxuICAgICAgICBjb25zdCB7IG1jOiBtb3VudENoaWxkcmVuLCBwYzogcGF0Y2hDaGlsZHJlbiwgcGJjOiBwYXRjaEJsb2NrQ2hpbGRyZW4sIG86IHsgaW5zZXJ0LCBxdWVyeVNlbGVjdG9yLCBjcmVhdGVUZXh0LCBjcmVhdGVDb21tZW50IH0gfSA9IGludGVybmFscztcclxuICAgICAgICBjb25zdCBkaXNhYmxlZCA9IGlzVGVsZXBvcnREaXNhYmxlZChuMi5wcm9wcyk7XHJcbiAgICAgICAgY29uc3QgeyBzaGFwZUZsYWcsIGNoaWxkcmVuIH0gPSBuMjtcclxuICAgICAgICBpZiAobjEgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAvLyBpbnNlcnQgYW5jaG9ycyBpbiB0aGUgbWFpbiB2aWV3XHJcbiAgICAgICAgICAgIGNvbnN0IHBsYWNlaG9sZGVyID0gKG4yLmVsID0gKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpXHJcbiAgICAgICAgICAgICAgICA/IGNyZWF0ZUNvbW1lbnQoJ3RlbGVwb3J0IHN0YXJ0JylcclxuICAgICAgICAgICAgICAgIDogY3JlYXRlVGV4dCgnJykpO1xyXG4gICAgICAgICAgICBjb25zdCBtYWluQW5jaG9yID0gKG4yLmFuY2hvciA9IChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKVxyXG4gICAgICAgICAgICAgICAgPyBjcmVhdGVDb21tZW50KCd0ZWxlcG9ydCBlbmQnKVxyXG4gICAgICAgICAgICAgICAgOiBjcmVhdGVUZXh0KCcnKSk7XHJcbiAgICAgICAgICAgIGluc2VydChwbGFjZWhvbGRlciwgY29udGFpbmVyLCBhbmNob3IpO1xyXG4gICAgICAgICAgICBpbnNlcnQobWFpbkFuY2hvciwgY29udGFpbmVyLCBhbmNob3IpO1xyXG4gICAgICAgICAgICBjb25zdCB0YXJnZXQgPSAobjIudGFyZ2V0ID0gcmVzb2x2ZVRhcmdldChuMi5wcm9wcywgcXVlcnlTZWxlY3RvcikpO1xyXG4gICAgICAgICAgICBjb25zdCB0YXJnZXRBbmNob3IgPSAobjIudGFyZ2V0QW5jaG9yID0gY3JlYXRlVGV4dCgnJykpO1xyXG4gICAgICAgICAgICBpZiAodGFyZ2V0KSB7XHJcbiAgICAgICAgICAgICAgICBpbnNlcnQodGFyZ2V0QW5jaG9yLCB0YXJnZXQpO1xyXG4gICAgICAgICAgICAgICAgLy8gIzI2NTIgd2UgY291bGQgYmUgdGVsZXBvcnRpbmcgZnJvbSBhIG5vbi1TVkcgdHJlZSBpbnRvIGFuIFNWRyB0cmVlXHJcbiAgICAgICAgICAgICAgICBpc1NWRyA9IGlzU1ZHIHx8IGlzVGFyZ2V0U1ZHKHRhcmdldCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFkaXNhYmxlZCkge1xyXG4gICAgICAgICAgICAgICAgd2FybignSW52YWxpZCBUZWxlcG9ydCB0YXJnZXQgb24gbW91bnQ6JywgdGFyZ2V0LCBgKCR7dHlwZW9mIHRhcmdldH0pYCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgbW91bnQgPSAoY29udGFpbmVyLCBhbmNob3IpID0+IHtcclxuICAgICAgICAgICAgICAgIC8vIFRlbGVwb3J0ICphbHdheXMqIGhhcyBBcnJheSBjaGlsZHJlbi4gVGhpcyBpcyBlbmZvcmNlZCBpbiBib3RoIHRoZVxyXG4gICAgICAgICAgICAgICAgLy8gY29tcGlsZXIgYW5kIHZub2RlIGNoaWxkcmVuIG5vcm1hbGl6YXRpb24uXHJcbiAgICAgICAgICAgICAgICBpZiAoc2hhcGVGbGFnICYgMTYgLyogQVJSQVlfQ0hJTERSRU4gKi8pIHtcclxuICAgICAgICAgICAgICAgICAgICBtb3VudENoaWxkcmVuKGNoaWxkcmVuLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIG9wdGltaXplZCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGlmIChkaXNhYmxlZCkge1xyXG4gICAgICAgICAgICAgICAgbW91bnQoY29udGFpbmVyLCBtYWluQW5jaG9yKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICh0YXJnZXQpIHtcclxuICAgICAgICAgICAgICAgIG1vdW50KHRhcmdldCwgdGFyZ2V0QW5jaG9yKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gdXBkYXRlIGNvbnRlbnRcclxuICAgICAgICAgICAgbjIuZWwgPSBuMS5lbDtcclxuICAgICAgICAgICAgY29uc3QgbWFpbkFuY2hvciA9IChuMi5hbmNob3IgPSBuMS5hbmNob3IpO1xyXG4gICAgICAgICAgICBjb25zdCB0YXJnZXQgPSAobjIudGFyZ2V0ID0gbjEudGFyZ2V0KTtcclxuICAgICAgICAgICAgY29uc3QgdGFyZ2V0QW5jaG9yID0gKG4yLnRhcmdldEFuY2hvciA9IG4xLnRhcmdldEFuY2hvcik7XHJcbiAgICAgICAgICAgIGNvbnN0IHdhc0Rpc2FibGVkID0gaXNUZWxlcG9ydERpc2FibGVkKG4xLnByb3BzKTtcclxuICAgICAgICAgICAgY29uc3QgY3VycmVudENvbnRhaW5lciA9IHdhc0Rpc2FibGVkID8gY29udGFpbmVyIDogdGFyZ2V0O1xyXG4gICAgICAgICAgICBjb25zdCBjdXJyZW50QW5jaG9yID0gd2FzRGlzYWJsZWQgPyBtYWluQW5jaG9yIDogdGFyZ2V0QW5jaG9yO1xyXG4gICAgICAgICAgICBpc1NWRyA9IGlzU1ZHIHx8IGlzVGFyZ2V0U1ZHKHRhcmdldCk7XHJcbiAgICAgICAgICAgIGlmIChuMi5keW5hbWljQ2hpbGRyZW4pIHtcclxuICAgICAgICAgICAgICAgIC8vIGZhc3QgcGF0aCB3aGVuIHRoZSB0ZWxlcG9ydCBoYXBwZW5zIHRvIGJlIGEgYmxvY2sgcm9vdFxyXG4gICAgICAgICAgICAgICAgcGF0Y2hCbG9ja0NoaWxkcmVuKG4xLmR5bmFtaWNDaGlsZHJlbiwgbjIuZHluYW1pY0NoaWxkcmVuLCBjdXJyZW50Q29udGFpbmVyLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRyk7XHJcbiAgICAgICAgICAgICAgICAvLyBldmVuIGluIGJsb2NrIHRyZWUgbW9kZSB3ZSBuZWVkIHRvIG1ha2Ugc3VyZSBhbGwgcm9vdC1sZXZlbCBub2Rlc1xyXG4gICAgICAgICAgICAgICAgLy8gaW4gdGhlIHRlbGVwb3J0IGluaGVyaXQgcHJldmlvdXMgRE9NIHJlZmVyZW5jZXMgc28gdGhhdCB0aGV5IGNhblxyXG4gICAgICAgICAgICAgICAgLy8gYmUgbW92ZWQgaW4gZnV0dXJlIHBhdGNoZXMuXHJcbiAgICAgICAgICAgICAgICB0cmF2ZXJzZVN0YXRpY0NoaWxkcmVuKG4xLCBuMiwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoIW9wdGltaXplZCkge1xyXG4gICAgICAgICAgICAgICAgcGF0Y2hDaGlsZHJlbihuMSwgbjIsIGN1cnJlbnRDb250YWluZXIsIGN1cnJlbnRBbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZGlzYWJsZWQpIHtcclxuICAgICAgICAgICAgICAgIGlmICghd2FzRGlzYWJsZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBlbmFibGVkIC0+IGRpc2FibGVkXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gbW92ZSBpbnRvIG1haW4gY29udGFpbmVyXHJcbiAgICAgICAgICAgICAgICAgICAgbW92ZVRlbGVwb3J0KG4yLCBjb250YWluZXIsIG1haW5BbmNob3IsIGludGVybmFscywgMSAvKiBUT0dHTEUgKi8pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gdGFyZ2V0IGNoYW5nZWRcclxuICAgICAgICAgICAgICAgIGlmICgobjIucHJvcHMgJiYgbjIucHJvcHMudG8pICE9PSAobjEucHJvcHMgJiYgbjEucHJvcHMudG8pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV4dFRhcmdldCA9IChuMi50YXJnZXQgPSByZXNvbHZlVGFyZ2V0KG4yLnByb3BzLCBxdWVyeVNlbGVjdG9yKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5leHRUYXJnZXQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW92ZVRlbGVwb3J0KG4yLCBuZXh0VGFyZ2V0LCBudWxsLCBpbnRlcm5hbHMsIDAgLyogVEFSR0VUX0NIQU5HRSAqLyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3YXJuKCdJbnZhbGlkIFRlbGVwb3J0IHRhcmdldCBvbiB1cGRhdGU6JywgdGFyZ2V0LCBgKCR7dHlwZW9mIHRhcmdldH0pYCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAod2FzRGlzYWJsZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBkaXNhYmxlZCAtPiBlbmFibGVkXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gbW92ZSBpbnRvIHRlbGVwb3J0IHRhcmdldFxyXG4gICAgICAgICAgICAgICAgICAgIG1vdmVUZWxlcG9ydChuMiwgdGFyZ2V0LCB0YXJnZXRBbmNob3IsIGludGVybmFscywgMSAvKiBUT0dHTEUgKi8pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIHJlbW92ZSh2bm9kZSwgeyByOiByZW1vdmUsIG86IHsgcmVtb3ZlOiBob3N0UmVtb3ZlIH0gfSkge1xyXG4gICAgICAgIGNvbnN0IHsgc2hhcGVGbGFnLCBjaGlsZHJlbiwgYW5jaG9yIH0gPSB2bm9kZTtcclxuICAgICAgICBob3N0UmVtb3ZlKGFuY2hvcik7XHJcbiAgICAgICAgaWYgKHNoYXBlRmxhZyAmIDE2IC8qIEFSUkFZX0NISUxEUkVOICovKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHJlbW92ZShjaGlsZHJlbltpXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgbW92ZTogbW92ZVRlbGVwb3J0LFxyXG4gICAgaHlkcmF0ZTogaHlkcmF0ZVRlbGVwb3J0XHJcbn07XHJcbmZ1bmN0aW9uIG1vdmVUZWxlcG9ydCh2bm9kZSwgY29udGFpbmVyLCBwYXJlbnRBbmNob3IsIHsgbzogeyBpbnNlcnQgfSwgbTogbW92ZSB9LCBtb3ZlVHlwZSA9IDIgLyogUkVPUkRFUiAqLykge1xyXG4gICAgLy8gbW92ZSB0YXJnZXQgYW5jaG9yIGlmIHRoaXMgaXMgYSB0YXJnZXQgY2hhbmdlLlxyXG4gICAgaWYgKG1vdmVUeXBlID09PSAwIC8qIFRBUkdFVF9DSEFOR0UgKi8pIHtcclxuICAgICAgICBpbnNlcnQodm5vZGUudGFyZ2V0QW5jaG9yLCBjb250YWluZXIsIHBhcmVudEFuY2hvcik7XHJcbiAgICB9XHJcbiAgICBjb25zdCB7IGVsLCBhbmNob3IsIHNoYXBlRmxhZywgY2hpbGRyZW4sIHByb3BzIH0gPSB2bm9kZTtcclxuICAgIGNvbnN0IGlzUmVvcmRlciA9IG1vdmVUeXBlID09PSAyIC8qIFJFT1JERVIgKi87XHJcbiAgICAvLyBtb3ZlIG1haW4gdmlldyBhbmNob3IgaWYgdGhpcyBpcyBhIHJlLW9yZGVyLlxyXG4gICAgaWYgKGlzUmVvcmRlcikge1xyXG4gICAgICAgIGluc2VydChlbCwgY29udGFpbmVyLCBwYXJlbnRBbmNob3IpO1xyXG4gICAgfVxyXG4gICAgLy8gaWYgdGhpcyBpcyBhIHJlLW9yZGVyIGFuZCB0ZWxlcG9ydCBpcyBlbmFibGVkIChjb250ZW50IGlzIGluIHRhcmdldClcclxuICAgIC8vIGRvIG5vdCBtb3ZlIGNoaWxkcmVuLiBTbyB0aGUgb3Bwb3NpdGUgaXM6IG9ubHkgbW92ZSBjaGlsZHJlbiBpZiB0aGlzXHJcbiAgICAvLyBpcyBub3QgYSByZW9yZGVyLCBvciB0aGUgdGVsZXBvcnQgaXMgZGlzYWJsZWRcclxuICAgIGlmICghaXNSZW9yZGVyIHx8IGlzVGVsZXBvcnREaXNhYmxlZChwcm9wcykpIHtcclxuICAgICAgICAvLyBUZWxlcG9ydCBoYXMgZWl0aGVyIEFycmF5IGNoaWxkcmVuIG9yIG5vIGNoaWxkcmVuLlxyXG4gICAgICAgIGlmIChzaGFwZUZsYWcgJiAxNiAvKiBBUlJBWV9DSElMRFJFTiAqLykge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBtb3ZlKGNoaWxkcmVuW2ldLCBjb250YWluZXIsIHBhcmVudEFuY2hvciwgMiAvKiBSRU9SREVSICovKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIG1vdmUgbWFpbiB2aWV3IGFuY2hvciBpZiB0aGlzIGlzIGEgcmUtb3JkZXIuXHJcbiAgICBpZiAoaXNSZW9yZGVyKSB7XHJcbiAgICAgICAgaW5zZXJ0KGFuY2hvciwgY29udGFpbmVyLCBwYXJlbnRBbmNob3IpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGh5ZHJhdGVUZWxlcG9ydChub2RlLCB2bm9kZSwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgb3B0aW1pemVkLCB7IG86IHsgbmV4dFNpYmxpbmcsIHBhcmVudE5vZGUsIHF1ZXJ5U2VsZWN0b3IgfSB9LCBoeWRyYXRlQ2hpbGRyZW4pIHtcclxuICAgIGNvbnN0IHRhcmdldCA9ICh2bm9kZS50YXJnZXQgPSByZXNvbHZlVGFyZ2V0KHZub2RlLnByb3BzLCBxdWVyeVNlbGVjdG9yKSk7XHJcbiAgICBpZiAodGFyZ2V0KSB7XHJcbiAgICAgICAgLy8gaWYgbXVsdGlwbGUgdGVsZXBvcnRzIHJlbmRlcmVkIHRvIHRoZSBzYW1lIHRhcmdldCBlbGVtZW50LCB3ZSBuZWVkIHRvXHJcbiAgICAgICAgLy8gcGljayB1cCBmcm9tIHdoZXJlIHRoZSBsYXN0IHRlbGVwb3J0IGZpbmlzaGVkIGluc3RlYWQgb2YgdGhlIGZpcnN0IG5vZGVcclxuICAgICAgICBjb25zdCB0YXJnZXROb2RlID0gdGFyZ2V0Ll9scGEgfHwgdGFyZ2V0LmZpcnN0Q2hpbGQ7XHJcbiAgICAgICAgaWYgKHZub2RlLnNoYXBlRmxhZyAmIDE2IC8qIEFSUkFZX0NISUxEUkVOICovKSB7XHJcbiAgICAgICAgICAgIGlmIChpc1RlbGVwb3J0RGlzYWJsZWQodm5vZGUucHJvcHMpKSB7XHJcbiAgICAgICAgICAgICAgICB2bm9kZS5hbmNob3IgPSBoeWRyYXRlQ2hpbGRyZW4obmV4dFNpYmxpbmcobm9kZSksIHZub2RlLCBwYXJlbnROb2RlKG5vZGUpLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBvcHRpbWl6ZWQpO1xyXG4gICAgICAgICAgICAgICAgdm5vZGUudGFyZ2V0QW5jaG9yID0gdGFyZ2V0Tm9kZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHZub2RlLmFuY2hvciA9IG5leHRTaWJsaW5nKG5vZGUpO1xyXG4gICAgICAgICAgICAgICAgdm5vZGUudGFyZ2V0QW5jaG9yID0gaHlkcmF0ZUNoaWxkcmVuKHRhcmdldE5vZGUsIHZub2RlLCB0YXJnZXQsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIG9wdGltaXplZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGFyZ2V0Ll9scGEgPVxyXG4gICAgICAgICAgICAgICAgdm5vZGUudGFyZ2V0QW5jaG9yICYmIG5leHRTaWJsaW5nKHZub2RlLnRhcmdldEFuY2hvcik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHZub2RlLmFuY2hvciAmJiBuZXh0U2libGluZyh2bm9kZS5hbmNob3IpO1xyXG59XHJcbi8vIEZvcmNlLWNhc3RlZCBwdWJsaWMgdHlwaW5nIGZvciBoIGFuZCBUU1ggcHJvcHMgaW5mZXJlbmNlXHJcbmNvbnN0IFRlbGVwb3J0ID0gVGVsZXBvcnRJbXBsO1xuXG5jb25zdCBDT01QT05FTlRTID0gJ2NvbXBvbmVudHMnO1xyXG5jb25zdCBESVJFQ1RJVkVTID0gJ2RpcmVjdGl2ZXMnO1xyXG4vKipcclxuICogQHByaXZhdGVcclxuICovXHJcbmZ1bmN0aW9uIHJlc29sdmVDb21wb25lbnQobmFtZSkge1xyXG4gICAgcmV0dXJuIHJlc29sdmVBc3NldChDT01QT05FTlRTLCBuYW1lKSB8fCBuYW1lO1xyXG59XHJcbmNvbnN0IE5VTExfRFlOQU1JQ19DT01QT05FTlQgPSBTeW1ib2woKTtcclxuLyoqXHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG5mdW5jdGlvbiByZXNvbHZlRHluYW1pY0NvbXBvbmVudChjb21wb25lbnQpIHtcclxuICAgIGlmIChpc1N0cmluZyhjb21wb25lbnQpKSB7XHJcbiAgICAgICAgcmV0dXJuIHJlc29sdmVBc3NldChDT01QT05FTlRTLCBjb21wb25lbnQsIGZhbHNlKSB8fCBjb21wb25lbnQ7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICAvLyBpbnZhbGlkIHR5cGVzIHdpbGwgZmFsbHRocm91Z2ggdG8gY3JlYXRlVk5vZGUgYW5kIHJhaXNlIHdhcm5pbmdcclxuICAgICAgICByZXR1cm4gKGNvbXBvbmVudCB8fCBOVUxMX0RZTkFNSUNfQ09NUE9ORU5UKTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogQHByaXZhdGVcclxuICovXHJcbmZ1bmN0aW9uIHJlc29sdmVEaXJlY3RpdmUobmFtZSkge1xyXG4gICAgcmV0dXJuIHJlc29sdmVBc3NldChESVJFQ1RJVkVTLCBuYW1lKTtcclxufVxyXG4vLyBpbXBsZW1lbnRhdGlvblxyXG5mdW5jdGlvbiByZXNvbHZlQXNzZXQodHlwZSwgbmFtZSwgd2Fybk1pc3NpbmcgPSB0cnVlKSB7XHJcbiAgICBjb25zdCBpbnN0YW5jZSA9IGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSB8fCBjdXJyZW50SW5zdGFuY2U7XHJcbiAgICBpZiAoaW5zdGFuY2UpIHtcclxuICAgICAgICBjb25zdCBDb21wb25lbnQgPSBpbnN0YW5jZS50eXBlO1xyXG4gICAgICAgIC8vIHNlbGYgbmFtZSBoYXMgaGlnaGVzdCBwcmlvcml0eVxyXG4gICAgICAgIGlmICh0eXBlID09PSBDT01QT05FTlRTKSB7XHJcbiAgICAgICAgICAgIC8vIHNwZWNpYWwgc2VsZiByZWZlcmVuY2luZyBjYWxsIGdlbmVyYXRlZCBieSBjb21waWxlclxyXG4gICAgICAgICAgICAvLyBpbmZlcnJlZCBmcm9tIFNGQyBmaWxlbmFtZVxyXG4gICAgICAgICAgICBpZiAobmFtZSA9PT0gYF9zZWxmYCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIENvbXBvbmVudDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBzZWxmTmFtZSA9IENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBDb21wb25lbnQubmFtZTtcclxuICAgICAgICAgICAgaWYgKHNlbGZOYW1lICYmXHJcbiAgICAgICAgICAgICAgICAoc2VsZk5hbWUgPT09IG5hbWUgfHxcclxuICAgICAgICAgICAgICAgICAgICBzZWxmTmFtZSA9PT0gY2FtZWxpemUobmFtZSkgfHxcclxuICAgICAgICAgICAgICAgICAgICBzZWxmTmFtZSA9PT0gY2FwaXRhbGl6ZShjYW1lbGl6ZShuYW1lKSkpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gQ29tcG9uZW50O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHJlcyA9IFxyXG4gICAgICAgIC8vIGxvY2FsIHJlZ2lzdHJhdGlvblxyXG4gICAgICAgIC8vIGNoZWNrIGluc3RhbmNlW3R5cGVdIGZpcnN0IGZvciBjb21wb25lbnRzIHdpdGggbWl4aW4gb3IgZXh0ZW5kcy5cclxuICAgICAgICByZXNvbHZlKGluc3RhbmNlW3R5cGVdIHx8IENvbXBvbmVudFt0eXBlXSwgbmFtZSkgfHxcclxuICAgICAgICAgICAgLy8gZ2xvYmFsIHJlZ2lzdHJhdGlvblxyXG4gICAgICAgICAgICByZXNvbHZlKGluc3RhbmNlLmFwcENvbnRleHRbdHlwZV0sIG5hbWUpO1xyXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgd2Fybk1pc3NpbmcgJiYgIXJlcykge1xyXG4gICAgICAgICAgICB3YXJuKGBGYWlsZWQgdG8gcmVzb2x2ZSAke3R5cGUuc2xpY2UoMCwgLTEpfTogJHtuYW1lfWApO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgd2FybihgcmVzb2x2ZSR7Y2FwaXRhbGl6ZSh0eXBlLnNsaWNlKDAsIC0xKSl9IGAgK1xyXG4gICAgICAgICAgICBgY2FuIG9ubHkgYmUgdXNlZCBpbiByZW5kZXIoKSBvciBzZXR1cCgpLmApO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIHJlc29sdmUocmVnaXN0cnksIG5hbWUpIHtcclxuICAgIHJldHVybiAocmVnaXN0cnkgJiZcclxuICAgICAgICAocmVnaXN0cnlbbmFtZV0gfHxcclxuICAgICAgICAgICAgcmVnaXN0cnlbY2FtZWxpemUobmFtZSldIHx8XHJcbiAgICAgICAgICAgIHJlZ2lzdHJ5W2NhcGl0YWxpemUoY2FtZWxpemUobmFtZSkpXSkpO1xyXG59XG5cbmNvbnN0IEZyYWdtZW50ID0gU3ltYm9sKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSA/ICdGcmFnbWVudCcgOiB1bmRlZmluZWQpO1xyXG5jb25zdCBUZXh0ID0gU3ltYm9sKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSA/ICdUZXh0JyA6IHVuZGVmaW5lZCk7XHJcbmNvbnN0IENvbW1lbnQgPSBTeW1ib2woKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpID8gJ0NvbW1lbnQnIDogdW5kZWZpbmVkKTtcclxuY29uc3QgU3RhdGljID0gU3ltYm9sKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSA/ICdTdGF0aWMnIDogdW5kZWZpbmVkKTtcclxuLy8gU2luY2Ugdi1pZiBhbmQgdi1mb3IgYXJlIHRoZSB0d28gcG9zc2libGUgd2F5cyBub2RlIHN0cnVjdHVyZSBjYW4gZHluYW1pY2FsbHlcclxuLy8gY2hhbmdlLCBvbmNlIHdlIGNvbnNpZGVyIHYtaWYgYnJhbmNoZXMgYW5kIGVhY2ggdi1mb3IgZnJhZ21lbnQgYSBibG9jaywgd2VcclxuLy8gY2FuIGRpdmlkZSBhIHRlbXBsYXRlIGludG8gbmVzdGVkIGJsb2NrcywgYW5kIHdpdGhpbiBlYWNoIGJsb2NrIHRoZSBub2RlXHJcbi8vIHN0cnVjdHVyZSB3b3VsZCBiZSBzdGFibGUuIFRoaXMgYWxsb3dzIHVzIHRvIHNraXAgbW9zdCBjaGlsZHJlbiBkaWZmaW5nXHJcbi8vIGFuZCBvbmx5IHdvcnJ5IGFib3V0IHRoZSBkeW5hbWljIG5vZGVzIChpbmRpY2F0ZWQgYnkgcGF0Y2ggZmxhZ3MpLlxyXG5jb25zdCBibG9ja1N0YWNrID0gW107XHJcbmxldCBjdXJyZW50QmxvY2sgPSBudWxsO1xyXG4vKipcclxuICogT3BlbiBhIGJsb2NrLlxyXG4gKiBUaGlzIG11c3QgYmUgY2FsbGVkIGJlZm9yZSBgY3JlYXRlQmxvY2tgLiBJdCBjYW5ub3QgYmUgcGFydCBvZiBgY3JlYXRlQmxvY2tgXHJcbiAqIGJlY2F1c2UgdGhlIGNoaWxkcmVuIG9mIHRoZSBibG9jayBhcmUgZXZhbHVhdGVkIGJlZm9yZSBgY3JlYXRlQmxvY2tgIGl0c2VsZlxyXG4gKiBpcyBjYWxsZWQuIFRoZSBnZW5lcmF0ZWQgY29kZSB0eXBpY2FsbHkgbG9va3MgbGlrZSB0aGlzOlxyXG4gKlxyXG4gKiBgYGBqc1xyXG4gKiBmdW5jdGlvbiByZW5kZXIoKSB7XHJcbiAqICAgcmV0dXJuIChvcGVuQmxvY2soKSxjcmVhdGVCbG9jaygnZGl2JywgbnVsbCwgWy4uLl0pKVxyXG4gKiB9XHJcbiAqIGBgYFxyXG4gKiBkaXNhYmxlVHJhY2tpbmcgaXMgdHJ1ZSB3aGVuIGNyZWF0aW5nIGEgdi1mb3IgZnJhZ21lbnQgYmxvY2ssIHNpbmNlIGEgdi1mb3JcclxuICogZnJhZ21lbnQgYWx3YXlzIGRpZmZzIGl0cyBjaGlsZHJlbi5cclxuICpcclxuICogQHByaXZhdGVcclxuICovXHJcbmZ1bmN0aW9uIG9wZW5CbG9jayhkaXNhYmxlVHJhY2tpbmcgPSBmYWxzZSkge1xyXG4gICAgYmxvY2tTdGFjay5wdXNoKChjdXJyZW50QmxvY2sgPSBkaXNhYmxlVHJhY2tpbmcgPyBudWxsIDogW10pKTtcclxufVxyXG5mdW5jdGlvbiBjbG9zZUJsb2NrKCkge1xyXG4gICAgYmxvY2tTdGFjay5wb3AoKTtcclxuICAgIGN1cnJlbnRCbG9jayA9IGJsb2NrU3RhY2tbYmxvY2tTdGFjay5sZW5ndGggLSAxXSB8fCBudWxsO1xyXG59XHJcbi8vIFdoZXRoZXIgd2Ugc2hvdWxkIGJlIHRyYWNraW5nIGR5bmFtaWMgY2hpbGQgbm9kZXMgaW5zaWRlIGEgYmxvY2suXHJcbi8vIE9ubHkgdHJhY2tzIHdoZW4gdGhpcyB2YWx1ZSBpcyA+IDBcclxuLy8gV2UgYXJlIG5vdCB1c2luZyBhIHNpbXBsZSBib29sZWFuIGJlY2F1c2UgdGhpcyB2YWx1ZSBtYXkgbmVlZCB0byBiZVxyXG4vLyBpbmNyZW1lbnRlZC9kZWNyZW1lbnRlZCBieSBuZXN0ZWQgdXNhZ2Ugb2Ygdi1vbmNlIChzZWUgYmVsb3cpXHJcbmxldCBzaG91bGRUcmFjayA9IDE7XHJcbi8qKlxyXG4gKiBCbG9jayB0cmFja2luZyBzb21ldGltZXMgbmVlZHMgdG8gYmUgZGlzYWJsZWQsIGZvciBleGFtcGxlIGR1cmluZyB0aGVcclxuICogY3JlYXRpb24gb2YgYSB0cmVlIHRoYXQgbmVlZHMgdG8gYmUgY2FjaGVkIGJ5IHYtb25jZS4gVGhlIGNvbXBpbGVyIGdlbmVyYXRlc1xyXG4gKiBjb2RlIGxpa2UgdGhpczpcclxuICpcclxuICogYGBgIGpzXHJcbiAqIF9jYWNoZVsxXSB8fCAoXHJcbiAqICAgc2V0QmxvY2tUcmFja2luZygtMSksXHJcbiAqICAgX2NhY2hlWzFdID0gY3JlYXRlVk5vZGUoLi4uKSxcclxuICogICBzZXRCbG9ja1RyYWNraW5nKDEpLFxyXG4gKiAgIF9jYWNoZVsxXVxyXG4gKiApXHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBAcHJpdmF0ZVxyXG4gKi9cclxuZnVuY3Rpb24gc2V0QmxvY2tUcmFja2luZyh2YWx1ZSkge1xyXG4gICAgc2hvdWxkVHJhY2sgKz0gdmFsdWU7XHJcbn1cclxuLyoqXHJcbiAqIENyZWF0ZSBhIGJsb2NrIHJvb3Qgdm5vZGUuIFRha2VzIHRoZSBzYW1lIGV4YWN0IGFyZ3VtZW50cyBhcyBgY3JlYXRlVk5vZGVgLlxyXG4gKiBBIGJsb2NrIHJvb3Qga2VlcHMgdHJhY2sgb2YgZHluYW1pYyBub2RlcyB3aXRoaW4gdGhlIGJsb2NrIGluIHRoZVxyXG4gKiBgZHluYW1pY0NoaWxkcmVuYCBhcnJheS5cclxuICpcclxuICogQHByaXZhdGVcclxuICovXHJcbmZ1bmN0aW9uIGNyZWF0ZUJsb2NrKHR5cGUsIHByb3BzLCBjaGlsZHJlbiwgcGF0Y2hGbGFnLCBkeW5hbWljUHJvcHMpIHtcclxuICAgIGNvbnN0IHZub2RlID0gY3JlYXRlVk5vZGUodHlwZSwgcHJvcHMsIGNoaWxkcmVuLCBwYXRjaEZsYWcsIGR5bmFtaWNQcm9wcywgdHJ1ZSAvKiBpc0Jsb2NrOiBwcmV2ZW50IGEgYmxvY2sgZnJvbSB0cmFja2luZyBpdHNlbGYgKi8pO1xyXG4gICAgLy8gc2F2ZSBjdXJyZW50IGJsb2NrIGNoaWxkcmVuIG9uIHRoZSBibG9jayB2bm9kZVxyXG4gICAgdm5vZGUuZHluYW1pY0NoaWxkcmVuID0gY3VycmVudEJsb2NrIHx8IEVNUFRZX0FSUjtcclxuICAgIC8vIGNsb3NlIGJsb2NrXHJcbiAgICBjbG9zZUJsb2NrKCk7XHJcbiAgICAvLyBhIGJsb2NrIGlzIGFsd2F5cyBnb2luZyB0byBiZSBwYXRjaGVkLCBzbyB0cmFjayBpdCBhcyBhIGNoaWxkIG9mIGl0c1xyXG4gICAgLy8gcGFyZW50IGJsb2NrXHJcbiAgICBpZiAoc2hvdWxkVHJhY2sgPiAwICYmIGN1cnJlbnRCbG9jaykge1xyXG4gICAgICAgIGN1cnJlbnRCbG9jay5wdXNoKHZub2RlKTtcclxuICAgIH1cclxuICAgIHJldHVybiB2bm9kZTtcclxufVxyXG5mdW5jdGlvbiBpc1ZOb2RlKHZhbHVlKSB7XHJcbiAgICByZXR1cm4gdmFsdWUgPyB2YWx1ZS5fX3ZfaXNWTm9kZSA9PT0gdHJ1ZSA6IGZhbHNlO1xyXG59XHJcbmZ1bmN0aW9uIGlzU2FtZVZOb2RlVHlwZShuMSwgbjIpIHtcclxuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiZcclxuICAgICAgICBuMi5zaGFwZUZsYWcgJiA2IC8qIENPTVBPTkVOVCAqLyAmJlxyXG4gICAgICAgIGhtckRpcnR5Q29tcG9uZW50cy5oYXMobjIudHlwZSkpIHtcclxuICAgICAgICAvLyBITVIgb25seTogaWYgdGhlIGNvbXBvbmVudCBoYXMgYmVlbiBob3QtdXBkYXRlZCwgZm9yY2UgYSByZWxvYWQuXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG4xLnR5cGUgPT09IG4yLnR5cGUgJiYgbjEua2V5ID09PSBuMi5rZXk7XHJcbn1cclxubGV0IHZub2RlQXJnc1RyYW5zZm9ybWVyO1xyXG4vKipcclxuICogSW50ZXJuYWwgQVBJIGZvciByZWdpc3RlcmluZyBhbiBhcmd1bWVudHMgdHJhbnNmb3JtIGZvciBjcmVhdGVWTm9kZVxyXG4gKiB1c2VkIGZvciBjcmVhdGluZyBzdHVicyBpbiB0aGUgdGVzdC11dGlsc1xyXG4gKiBJdCBpcyAqaW50ZXJuYWwqIGJ1dCBuZWVkcyB0byBiZSBleHBvc2VkIGZvciB0ZXN0LXV0aWxzIHRvIHBpY2sgdXAgcHJvcGVyXHJcbiAqIHR5cGluZ3NcclxuICovXHJcbmZ1bmN0aW9uIHRyYW5zZm9ybVZOb2RlQXJncyh0cmFuc2Zvcm1lcikge1xyXG4gICAgdm5vZGVBcmdzVHJhbnNmb3JtZXIgPSB0cmFuc2Zvcm1lcjtcclxufVxyXG5jb25zdCBjcmVhdGVWTm9kZVdpdGhBcmdzVHJhbnNmb3JtID0gKC4uLmFyZ3MpID0+IHtcclxuICAgIHJldHVybiBfY3JlYXRlVk5vZGUoLi4uKHZub2RlQXJnc1RyYW5zZm9ybWVyXHJcbiAgICAgICAgPyB2bm9kZUFyZ3NUcmFuc2Zvcm1lcihhcmdzLCBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UpXHJcbiAgICAgICAgOiBhcmdzKSk7XHJcbn07XHJcbmNvbnN0IEludGVybmFsT2JqZWN0S2V5ID0gYF9fdkludGVybmFsYDtcclxuY29uc3Qgbm9ybWFsaXplS2V5ID0gKHsga2V5IH0pID0+IGtleSAhPSBudWxsID8ga2V5IDogbnVsbDtcclxuY29uc3Qgbm9ybWFsaXplUmVmID0gKHsgcmVmIH0pID0+IHtcclxuICAgIHJldHVybiAocmVmICE9IG51bGxcclxuICAgICAgICA/IGlzU3RyaW5nKHJlZikgfHwgaXNSZWYocmVmKSB8fCBpc0Z1bmN0aW9uKHJlZilcclxuICAgICAgICAgICAgPyB7IGk6IGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSwgcjogcmVmIH1cclxuICAgICAgICAgICAgOiByZWZcclxuICAgICAgICA6IG51bGwpO1xyXG59O1xyXG5jb25zdCBjcmVhdGVWTm9kZSA9ICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJylcclxuICAgID8gY3JlYXRlVk5vZGVXaXRoQXJnc1RyYW5zZm9ybVxyXG4gICAgOiBfY3JlYXRlVk5vZGUpO1xyXG5mdW5jdGlvbiBfY3JlYXRlVk5vZGUodHlwZSwgcHJvcHMgPSBudWxsLCBjaGlsZHJlbiA9IG51bGwsIHBhdGNoRmxhZyA9IDAsIGR5bmFtaWNQcm9wcyA9IG51bGwsIGlzQmxvY2tOb2RlID0gZmFsc2UpIHtcclxuICAgIGlmICghdHlwZSB8fCB0eXBlID09PSBOVUxMX0RZTkFNSUNfQ09NUE9ORU5UKSB7XHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhdHlwZSkge1xyXG4gICAgICAgICAgICB3YXJuKGBJbnZhbGlkIHZub2RlIHR5cGUgd2hlbiBjcmVhdGluZyB2bm9kZTogJHt0eXBlfS5gKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdHlwZSA9IENvbW1lbnQ7XHJcbiAgICB9XHJcbiAgICBpZiAoaXNWTm9kZSh0eXBlKSkge1xyXG4gICAgICAgIC8vIGNyZWF0ZVZOb2RlIHJlY2VpdmluZyBhbiBleGlzdGluZyB2bm9kZS4gVGhpcyBoYXBwZW5zIGluIGNhc2VzIGxpa2VcclxuICAgICAgICAvLyA8Y29tcG9uZW50IDppcz1cInZub2RlXCIvPlxyXG4gICAgICAgIC8vICMyMDc4IG1ha2Ugc3VyZSB0byBtZXJnZSByZWZzIGR1cmluZyB0aGUgY2xvbmUgaW5zdGVhZCBvZiBvdmVyd3JpdGluZyBpdFxyXG4gICAgICAgIGNvbnN0IGNsb25lZCA9IGNsb25lVk5vZGUodHlwZSwgcHJvcHMsIHRydWUgLyogbWVyZ2VSZWY6IHRydWUgKi8pO1xyXG4gICAgICAgIGlmIChjaGlsZHJlbikge1xyXG4gICAgICAgICAgICBub3JtYWxpemVDaGlsZHJlbihjbG9uZWQsIGNoaWxkcmVuKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGNsb25lZDtcclxuICAgIH1cclxuICAgIC8vIGNsYXNzIGNvbXBvbmVudCBub3JtYWxpemF0aW9uLlxyXG4gICAgaWYgKGlzQ2xhc3NDb21wb25lbnQodHlwZSkpIHtcclxuICAgICAgICB0eXBlID0gdHlwZS5fX3ZjY09wdHM7XHJcbiAgICB9XHJcbiAgICAvLyBjbGFzcyAmIHN0eWxlIG5vcm1hbGl6YXRpb24uXHJcbiAgICBpZiAocHJvcHMpIHtcclxuICAgICAgICAvLyBmb3IgcmVhY3RpdmUgb3IgcHJveHkgb2JqZWN0cywgd2UgbmVlZCB0byBjbG9uZSBpdCB0byBlbmFibGUgbXV0YXRpb24uXHJcbiAgICAgICAgaWYgKGlzUHJveHkocHJvcHMpIHx8IEludGVybmFsT2JqZWN0S2V5IGluIHByb3BzKSB7XHJcbiAgICAgICAgICAgIHByb3BzID0gZXh0ZW5kKHt9LCBwcm9wcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCB7IGNsYXNzOiBrbGFzcywgc3R5bGUgfSA9IHByb3BzO1xyXG4gICAgICAgIGlmIChrbGFzcyAmJiAhaXNTdHJpbmcoa2xhc3MpKSB7XHJcbiAgICAgICAgICAgIHByb3BzLmNsYXNzID0gbm9ybWFsaXplQ2xhc3Moa2xhc3MpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaXNPYmplY3Qoc3R5bGUpKSB7XHJcbiAgICAgICAgICAgIC8vIHJlYWN0aXZlIHN0YXRlIG9iamVjdHMgbmVlZCB0byBiZSBjbG9uZWQgc2luY2UgdGhleSBhcmUgbGlrZWx5IHRvIGJlXHJcbiAgICAgICAgICAgIC8vIG11dGF0ZWRcclxuICAgICAgICAgICAgaWYgKGlzUHJveHkoc3R5bGUpICYmICFpc0FycmF5KHN0eWxlKSkge1xyXG4gICAgICAgICAgICAgICAgc3R5bGUgPSBleHRlbmQoe30sIHN0eWxlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBwcm9wcy5zdHlsZSA9IG5vcm1hbGl6ZVN0eWxlKHN0eWxlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyBlbmNvZGUgdGhlIHZub2RlIHR5cGUgaW5mb3JtYXRpb24gaW50byBhIGJpdG1hcFxyXG4gICAgY29uc3Qgc2hhcGVGbGFnID0gaXNTdHJpbmcodHlwZSlcclxuICAgICAgICA/IDEgLyogRUxFTUVOVCAqL1xyXG4gICAgICAgIDogIGlzU3VzcGVuc2UodHlwZSlcclxuICAgICAgICAgICAgPyAxMjggLyogU1VTUEVOU0UgKi9cclxuICAgICAgICAgICAgOiBpc1RlbGVwb3J0KHR5cGUpXHJcbiAgICAgICAgICAgICAgICA/IDY0IC8qIFRFTEVQT1JUICovXHJcbiAgICAgICAgICAgICAgICA6IGlzT2JqZWN0KHR5cGUpXHJcbiAgICAgICAgICAgICAgICAgICAgPyA0IC8qIFNUQVRFRlVMX0NPTVBPTkVOVCAqL1xyXG4gICAgICAgICAgICAgICAgICAgIDogaXNGdW5jdGlvbih0eXBlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA/IDIgLyogRlVOQ1RJT05BTF9DT01QT05FTlQgKi9cclxuICAgICAgICAgICAgICAgICAgICAgICAgOiAwO1xyXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBzaGFwZUZsYWcgJiA0IC8qIFNUQVRFRlVMX0NPTVBPTkVOVCAqLyAmJiBpc1Byb3h5KHR5cGUpKSB7XHJcbiAgICAgICAgdHlwZSA9IHRvUmF3KHR5cGUpO1xyXG4gICAgICAgIHdhcm4oYFZ1ZSByZWNlaXZlZCBhIENvbXBvbmVudCB3aGljaCB3YXMgbWFkZSBhIHJlYWN0aXZlIG9iamVjdC4gVGhpcyBjYW4gYCArXHJcbiAgICAgICAgICAgIGBsZWFkIHRvIHVubmVjZXNzYXJ5IHBlcmZvcm1hbmNlIG92ZXJoZWFkLCBhbmQgc2hvdWxkIGJlIGF2b2lkZWQgYnkgYCArXHJcbiAgICAgICAgICAgIGBtYXJraW5nIHRoZSBjb21wb25lbnQgd2l0aCBcXGBtYXJrUmF3XFxgIG9yIHVzaW5nIFxcYHNoYWxsb3dSZWZcXGAgYCArXHJcbiAgICAgICAgICAgIGBpbnN0ZWFkIG9mIFxcYHJlZlxcYC5gLCBgXFxuQ29tcG9uZW50IHRoYXQgd2FzIG1hZGUgcmVhY3RpdmU6IGAsIHR5cGUpO1xyXG4gICAgfVxyXG4gICAgY29uc3Qgdm5vZGUgPSB7XHJcbiAgICAgICAgX192X2lzVk5vZGU6IHRydWUsXHJcbiAgICAgICAgW1wiX192X3NraXBcIiAvKiBTS0lQICovXTogdHJ1ZSxcclxuICAgICAgICB0eXBlLFxyXG4gICAgICAgIHByb3BzLFxyXG4gICAgICAgIGtleTogcHJvcHMgJiYgbm9ybWFsaXplS2V5KHByb3BzKSxcclxuICAgICAgICByZWY6IHByb3BzICYmIG5vcm1hbGl6ZVJlZihwcm9wcyksXHJcbiAgICAgICAgc2NvcGVJZDogY3VycmVudFNjb3BlSWQsXHJcbiAgICAgICAgY2hpbGRyZW46IG51bGwsXHJcbiAgICAgICAgY29tcG9uZW50OiBudWxsLFxyXG4gICAgICAgIHN1c3BlbnNlOiBudWxsLFxyXG4gICAgICAgIHNzQ29udGVudDogbnVsbCxcclxuICAgICAgICBzc0ZhbGxiYWNrOiBudWxsLFxyXG4gICAgICAgIGRpcnM6IG51bGwsXHJcbiAgICAgICAgdHJhbnNpdGlvbjogbnVsbCxcclxuICAgICAgICBlbDogbnVsbCxcclxuICAgICAgICBhbmNob3I6IG51bGwsXHJcbiAgICAgICAgdGFyZ2V0OiBudWxsLFxyXG4gICAgICAgIHRhcmdldEFuY2hvcjogbnVsbCxcclxuICAgICAgICBzdGF0aWNDb3VudDogMCxcclxuICAgICAgICBzaGFwZUZsYWcsXHJcbiAgICAgICAgcGF0Y2hGbGFnLFxyXG4gICAgICAgIGR5bmFtaWNQcm9wcyxcclxuICAgICAgICBkeW5hbWljQ2hpbGRyZW46IG51bGwsXHJcbiAgICAgICAgYXBwQ29udGV4dDogbnVsbFxyXG4gICAgfTtcclxuICAgIC8vIHZhbGlkYXRlIGtleVxyXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiB2bm9kZS5rZXkgIT09IHZub2RlLmtleSkge1xyXG4gICAgICAgIHdhcm4oYFZOb2RlIGNyZWF0ZWQgd2l0aCBpbnZhbGlkIGtleSAoTmFOKS4gVk5vZGUgdHlwZTpgLCB2bm9kZS50eXBlKTtcclxuICAgIH1cclxuICAgIG5vcm1hbGl6ZUNoaWxkcmVuKHZub2RlLCBjaGlsZHJlbik7XHJcbiAgICAvLyBub3JtYWxpemUgc3VzcGVuc2UgY2hpbGRyZW5cclxuICAgIGlmICggc2hhcGVGbGFnICYgMTI4IC8qIFNVU1BFTlNFICovKSB7XHJcbiAgICAgICAgY29uc3QgeyBjb250ZW50LCBmYWxsYmFjayB9ID0gbm9ybWFsaXplU3VzcGVuc2VDaGlsZHJlbih2bm9kZSk7XHJcbiAgICAgICAgdm5vZGUuc3NDb250ZW50ID0gY29udGVudDtcclxuICAgICAgICB2bm9kZS5zc0ZhbGxiYWNrID0gZmFsbGJhY2s7XHJcbiAgICB9XHJcbiAgICBpZiAoc2hvdWxkVHJhY2sgPiAwICYmXHJcbiAgICAgICAgLy8gYXZvaWQgYSBibG9jayBub2RlIGZyb20gdHJhY2tpbmcgaXRzZWxmXHJcbiAgICAgICAgIWlzQmxvY2tOb2RlICYmXHJcbiAgICAgICAgLy8gaGFzIGN1cnJlbnQgcGFyZW50IGJsb2NrXHJcbiAgICAgICAgY3VycmVudEJsb2NrICYmXHJcbiAgICAgICAgLy8gcHJlc2VuY2Ugb2YgYSBwYXRjaCBmbGFnIGluZGljYXRlcyB0aGlzIG5vZGUgbmVlZHMgcGF0Y2hpbmcgb24gdXBkYXRlcy5cclxuICAgICAgICAvLyBjb21wb25lbnQgbm9kZXMgYWxzbyBzaG91bGQgYWx3YXlzIGJlIHBhdGNoZWQsIGJlY2F1c2UgZXZlbiBpZiB0aGVcclxuICAgICAgICAvLyBjb21wb25lbnQgZG9lc24ndCBuZWVkIHRvIHVwZGF0ZSwgaXQgbmVlZHMgdG8gcGVyc2lzdCB0aGUgaW5zdGFuY2Ugb24gdG9cclxuICAgICAgICAvLyB0aGUgbmV4dCB2bm9kZSBzbyB0aGF0IGl0IGNhbiBiZSBwcm9wZXJseSB1bm1vdW50ZWQgbGF0ZXIuXHJcbiAgICAgICAgKHBhdGNoRmxhZyA+IDAgfHwgc2hhcGVGbGFnICYgNiAvKiBDT01QT05FTlQgKi8pICYmXHJcbiAgICAgICAgLy8gdGhlIEVWRU5UUyBmbGFnIGlzIG9ubHkgZm9yIGh5ZHJhdGlvbiBhbmQgaWYgaXQgaXMgdGhlIG9ubHkgZmxhZywgdGhlXHJcbiAgICAgICAgLy8gdm5vZGUgc2hvdWxkIG5vdCBiZSBjb25zaWRlcmVkIGR5bmFtaWMgZHVlIHRvIGhhbmRsZXIgY2FjaGluZy5cclxuICAgICAgICBwYXRjaEZsYWcgIT09IDMyIC8qIEhZRFJBVEVfRVZFTlRTICovKSB7XHJcbiAgICAgICAgY3VycmVudEJsb2NrLnB1c2godm5vZGUpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHZub2RlO1xyXG59XHJcbmZ1bmN0aW9uIGNsb25lVk5vZGUodm5vZGUsIGV4dHJhUHJvcHMsIG1lcmdlUmVmID0gZmFsc2UpIHtcclxuICAgIC8vIFRoaXMgaXMgaW50ZW50aW9uYWxseSBOT1QgdXNpbmcgc3ByZWFkIG9yIGV4dGVuZCB0byBhdm9pZCB0aGUgcnVudGltZVxyXG4gICAgLy8ga2V5IGVudW1lcmF0aW9uIGNvc3QuXHJcbiAgICBjb25zdCB7IHByb3BzLCByZWYsIHBhdGNoRmxhZyB9ID0gdm5vZGU7XHJcbiAgICBjb25zdCBtZXJnZWRQcm9wcyA9IGV4dHJhUHJvcHMgPyBtZXJnZVByb3BzKHByb3BzIHx8IHt9LCBleHRyYVByb3BzKSA6IHByb3BzO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBfX3ZfaXNWTm9kZTogdHJ1ZSxcclxuICAgICAgICBbXCJfX3Zfc2tpcFwiIC8qIFNLSVAgKi9dOiB0cnVlLFxyXG4gICAgICAgIHR5cGU6IHZub2RlLnR5cGUsXHJcbiAgICAgICAgcHJvcHM6IG1lcmdlZFByb3BzLFxyXG4gICAgICAgIGtleTogbWVyZ2VkUHJvcHMgJiYgbm9ybWFsaXplS2V5KG1lcmdlZFByb3BzKSxcclxuICAgICAgICByZWY6IGV4dHJhUHJvcHMgJiYgZXh0cmFQcm9wcy5yZWZcclxuICAgICAgICAgICAgPyAvLyAjMjA3OCBpbiB0aGUgY2FzZSBvZiA8Y29tcG9uZW50IDppcz1cInZub2RlXCIgcmVmPVwiZXh0cmFcIi8+XHJcbiAgICAgICAgICAgICAgICAvLyBpZiB0aGUgdm5vZGUgaXRzZWxmIGFscmVhZHkgaGFzIGEgcmVmLCBjbG9uZVZOb2RlIHdpbGwgbmVlZCB0byBtZXJnZVxyXG4gICAgICAgICAgICAgICAgLy8gdGhlIHJlZnMgc28gdGhlIHNpbmdsZSB2bm9kZSBjYW4gYmUgc2V0IG9uIG11bHRpcGxlIHJlZnNcclxuICAgICAgICAgICAgICAgIG1lcmdlUmVmICYmIHJlZlxyXG4gICAgICAgICAgICAgICAgICAgID8gaXNBcnJheShyZWYpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgID8gcmVmLmNvbmNhdChub3JtYWxpemVSZWYoZXh0cmFQcm9wcykpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDogW3JlZiwgbm9ybWFsaXplUmVmKGV4dHJhUHJvcHMpXVxyXG4gICAgICAgICAgICAgICAgICAgIDogbm9ybWFsaXplUmVmKGV4dHJhUHJvcHMpXHJcbiAgICAgICAgICAgIDogcmVmLFxyXG4gICAgICAgIHNjb3BlSWQ6IHZub2RlLnNjb3BlSWQsXHJcbiAgICAgICAgY2hpbGRyZW46IHZub2RlLmNoaWxkcmVuLFxyXG4gICAgICAgIHRhcmdldDogdm5vZGUudGFyZ2V0LFxyXG4gICAgICAgIHRhcmdldEFuY2hvcjogdm5vZGUudGFyZ2V0QW5jaG9yLFxyXG4gICAgICAgIHN0YXRpY0NvdW50OiB2bm9kZS5zdGF0aWNDb3VudCxcclxuICAgICAgICBzaGFwZUZsYWc6IHZub2RlLnNoYXBlRmxhZyxcclxuICAgICAgICAvLyBpZiB0aGUgdm5vZGUgaXMgY2xvbmVkIHdpdGggZXh0cmEgcHJvcHMsIHdlIGNhbiBubyBsb25nZXIgYXNzdW1lIGl0c1xyXG4gICAgICAgIC8vIGV4aXN0aW5nIHBhdGNoIGZsYWcgdG8gYmUgcmVsaWFibGUgYW5kIG5lZWQgdG8gYWRkIHRoZSBGVUxMX1BST1BTIGZsYWcuXHJcbiAgICAgICAgLy8gbm90ZTogcGVyc2VydmUgZmxhZyBmb3IgZnJhZ21lbnRzIHNpbmNlIHRoZXkgdXNlIHRoZSBmbGFnIGZvciBjaGlsZHJlblxyXG4gICAgICAgIC8vIGZhc3QgcGF0aHMgb25seS5cclxuICAgICAgICBwYXRjaEZsYWc6IGV4dHJhUHJvcHMgJiYgdm5vZGUudHlwZSAhPT0gRnJhZ21lbnRcclxuICAgICAgICAgICAgPyBwYXRjaEZsYWcgPT09IC0xIC8vIGhvaXN0ZWQgbm9kZVxyXG4gICAgICAgICAgICAgICAgPyAxNiAvKiBGVUxMX1BST1BTICovXHJcbiAgICAgICAgICAgICAgICA6IHBhdGNoRmxhZyB8IDE2IC8qIEZVTExfUFJPUFMgKi9cclxuICAgICAgICAgICAgOiBwYXRjaEZsYWcsXHJcbiAgICAgICAgZHluYW1pY1Byb3BzOiB2bm9kZS5keW5hbWljUHJvcHMsXHJcbiAgICAgICAgZHluYW1pY0NoaWxkcmVuOiB2bm9kZS5keW5hbWljQ2hpbGRyZW4sXHJcbiAgICAgICAgYXBwQ29udGV4dDogdm5vZGUuYXBwQ29udGV4dCxcclxuICAgICAgICBkaXJzOiB2bm9kZS5kaXJzLFxyXG4gICAgICAgIHRyYW5zaXRpb246IHZub2RlLnRyYW5zaXRpb24sXHJcbiAgICAgICAgLy8gVGhlc2Ugc2hvdWxkIHRlY2huaWNhbGx5IG9ubHkgYmUgbm9uLW51bGwgb24gbW91bnRlZCBWTm9kZXMuIEhvd2V2ZXIsXHJcbiAgICAgICAgLy8gdGhleSAqc2hvdWxkKiBiZSBjb3BpZWQgZm9yIGtlcHQtYWxpdmUgdm5vZGVzLiBTbyB3ZSBqdXN0IGFsd2F5cyBjb3B5XHJcbiAgICAgICAgLy8gdGhlbSBzaW5jZSB0aGVtIGJlaW5nIG5vbi1udWxsIGR1cmluZyBhIG1vdW50IGRvZXNuJ3QgYWZmZWN0IHRoZSBsb2dpYyBhc1xyXG4gICAgICAgIC8vIHRoZXkgd2lsbCBzaW1wbHkgYmUgb3ZlcndyaXR0ZW4uXHJcbiAgICAgICAgY29tcG9uZW50OiB2bm9kZS5jb21wb25lbnQsXHJcbiAgICAgICAgc3VzcGVuc2U6IHZub2RlLnN1c3BlbnNlLFxyXG4gICAgICAgIHNzQ29udGVudDogdm5vZGUuc3NDb250ZW50ICYmIGNsb25lVk5vZGUodm5vZGUuc3NDb250ZW50KSxcclxuICAgICAgICBzc0ZhbGxiYWNrOiB2bm9kZS5zc0ZhbGxiYWNrICYmIGNsb25lVk5vZGUodm5vZGUuc3NGYWxsYmFjayksXHJcbiAgICAgICAgZWw6IHZub2RlLmVsLFxyXG4gICAgICAgIGFuY2hvcjogdm5vZGUuYW5jaG9yXHJcbiAgICB9O1xyXG59XHJcbi8qKlxyXG4gKiBAcHJpdmF0ZVxyXG4gKi9cclxuZnVuY3Rpb24gY3JlYXRlVGV4dFZOb2RlKHRleHQgPSAnICcsIGZsYWcgPSAwKSB7XHJcbiAgICByZXR1cm4gY3JlYXRlVk5vZGUoVGV4dCwgbnVsbCwgdGV4dCwgZmxhZyk7XHJcbn1cclxuLyoqXHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG5mdW5jdGlvbiBjcmVhdGVTdGF0aWNWTm9kZShjb250ZW50LCBudW1iZXJPZk5vZGVzKSB7XHJcbiAgICAvLyBBIHN0YXRpYyB2bm9kZSBjYW4gY29udGFpbiBtdWx0aXBsZSBzdHJpbmdpZmllZCBlbGVtZW50cywgYW5kIHRoZSBudW1iZXJcclxuICAgIC8vIG9mIGVsZW1lbnRzIGlzIG5lY2Vzc2FyeSBmb3IgaHlkcmF0aW9uLlxyXG4gICAgY29uc3Qgdm5vZGUgPSBjcmVhdGVWTm9kZShTdGF0aWMsIG51bGwsIGNvbnRlbnQpO1xyXG4gICAgdm5vZGUuc3RhdGljQ291bnQgPSBudW1iZXJPZk5vZGVzO1xyXG4gICAgcmV0dXJuIHZub2RlO1xyXG59XHJcbi8qKlxyXG4gKiBAcHJpdmF0ZVxyXG4gKi9cclxuZnVuY3Rpb24gY3JlYXRlQ29tbWVudFZOb2RlKHRleHQgPSAnJywgXHJcbi8vIHdoZW4gdXNlZCBhcyB0aGUgdi1lbHNlIGJyYW5jaCwgdGhlIGNvbW1lbnQgbm9kZSBtdXN0IGJlIGNyZWF0ZWQgYXMgYVxyXG4vLyBibG9jayB0byBlbnN1cmUgY29ycmVjdCB1cGRhdGVzLlxyXG5hc0Jsb2NrID0gZmFsc2UpIHtcclxuICAgIHJldHVybiBhc0Jsb2NrXHJcbiAgICAgICAgPyAob3BlbkJsb2NrKCksIGNyZWF0ZUJsb2NrKENvbW1lbnQsIG51bGwsIHRleHQpKVxyXG4gICAgICAgIDogY3JlYXRlVk5vZGUoQ29tbWVudCwgbnVsbCwgdGV4dCk7XHJcbn1cclxuZnVuY3Rpb24gbm9ybWFsaXplVk5vZGUoY2hpbGQpIHtcclxuICAgIGlmIChjaGlsZCA9PSBudWxsIHx8IHR5cGVvZiBjaGlsZCA9PT0gJ2Jvb2xlYW4nKSB7XHJcbiAgICAgICAgLy8gZW1wdHkgcGxhY2Vob2xkZXJcclxuICAgICAgICByZXR1cm4gY3JlYXRlVk5vZGUoQ29tbWVudCk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChpc0FycmF5KGNoaWxkKSkge1xyXG4gICAgICAgIC8vIGZyYWdtZW50XHJcbiAgICAgICAgcmV0dXJuIGNyZWF0ZVZOb2RlKEZyYWdtZW50LCBudWxsLCBjaGlsZCk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICh0eXBlb2YgY2hpbGQgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgLy8gYWxyZWFkeSB2bm9kZSwgdGhpcyBzaG91bGQgYmUgdGhlIG1vc3QgY29tbW9uIHNpbmNlIGNvbXBpbGVkIHRlbXBsYXRlc1xyXG4gICAgICAgIC8vIGFsd2F5cyBwcm9kdWNlIGFsbC12bm9kZSBjaGlsZHJlbiBhcnJheXNcclxuICAgICAgICByZXR1cm4gY2hpbGQuZWwgPT09IG51bGwgPyBjaGlsZCA6IGNsb25lVk5vZGUoY2hpbGQpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgLy8gc3RyaW5ncyBhbmQgbnVtYmVyc1xyXG4gICAgICAgIHJldHVybiBjcmVhdGVWTm9kZShUZXh0LCBudWxsLCBTdHJpbmcoY2hpbGQpKTtcclxuICAgIH1cclxufVxyXG4vLyBvcHRpbWl6ZWQgbm9ybWFsaXphdGlvbiBmb3IgdGVtcGxhdGUtY29tcGlsZWQgcmVuZGVyIGZuc1xyXG5mdW5jdGlvbiBjbG9uZUlmTW91bnRlZChjaGlsZCkge1xyXG4gICAgcmV0dXJuIGNoaWxkLmVsID09PSBudWxsID8gY2hpbGQgOiBjbG9uZVZOb2RlKGNoaWxkKTtcclxufVxyXG5mdW5jdGlvbiBub3JtYWxpemVDaGlsZHJlbih2bm9kZSwgY2hpbGRyZW4pIHtcclxuICAgIGxldCB0eXBlID0gMDtcclxuICAgIGNvbnN0IHsgc2hhcGVGbGFnIH0gPSB2bm9kZTtcclxuICAgIGlmIChjaGlsZHJlbiA9PSBudWxsKSB7XHJcbiAgICAgICAgY2hpbGRyZW4gPSBudWxsO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoaXNBcnJheShjaGlsZHJlbikpIHtcclxuICAgICAgICB0eXBlID0gMTYgLyogQVJSQVlfQ0hJTERSRU4gKi87XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICh0eXBlb2YgY2hpbGRyZW4gPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgaWYgKHNoYXBlRmxhZyAmIDEgLyogRUxFTUVOVCAqLyB8fCBzaGFwZUZsYWcgJiA2NCAvKiBURUxFUE9SVCAqLykge1xyXG4gICAgICAgICAgICAvLyBOb3JtYWxpemUgc2xvdCB0byBwbGFpbiBjaGlsZHJlbiBmb3IgcGxhaW4gZWxlbWVudCBhbmQgVGVsZXBvcnRcclxuICAgICAgICAgICAgY29uc3Qgc2xvdCA9IGNoaWxkcmVuLmRlZmF1bHQ7XHJcbiAgICAgICAgICAgIGlmIChzbG90KSB7XHJcbiAgICAgICAgICAgICAgICAvLyBfYyBtYXJrZXIgaXMgYWRkZWQgYnkgd2l0aEN0eCgpIGluZGljYXRpbmcgdGhpcyBpcyBhIGNvbXBpbGVkIHNsb3RcclxuICAgICAgICAgICAgICAgIHNsb3QuX2MgJiYgc2V0Q29tcGlsZWRTbG90UmVuZGVyaW5nKDEpO1xyXG4gICAgICAgICAgICAgICAgbm9ybWFsaXplQ2hpbGRyZW4odm5vZGUsIHNsb3QoKSk7XHJcbiAgICAgICAgICAgICAgICBzbG90Ll9jICYmIHNldENvbXBpbGVkU2xvdFJlbmRlcmluZygtMSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdHlwZSA9IDMyIC8qIFNMT1RTX0NISUxEUkVOICovO1xyXG4gICAgICAgICAgICBjb25zdCBzbG90RmxhZyA9IGNoaWxkcmVuLl87XHJcbiAgICAgICAgICAgIGlmICghc2xvdEZsYWcgJiYgIShJbnRlcm5hbE9iamVjdEtleSBpbiBjaGlsZHJlbikpIHtcclxuICAgICAgICAgICAgICAgIGNoaWxkcmVuLl9jdHggPSBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoc2xvdEZsYWcgPT09IDMgLyogRk9SV0FSREVEICovICYmIGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSkge1xyXG4gICAgICAgICAgICAgICAgLy8gYSBjaGlsZCBjb21wb25lbnQgcmVjZWl2ZXMgZm9yd2FyZGVkIHNsb3RzIGZyb20gdGhlIHBhcmVudC5cclxuICAgICAgICAgICAgICAgIC8vIGl0cyBzbG90IHR5cGUgaXMgZGV0ZXJtaW5lZCBieSBpdHMgcGFyZW50J3Mgc2xvdCB0eXBlLlxyXG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZS52bm9kZS5wYXRjaEZsYWcgJiAxMDI0IC8qIERZTkFNSUNfU0xPVFMgKi8pIHtcclxuICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbi5fID0gMiAvKiBEWU5BTUlDICovO1xyXG4gICAgICAgICAgICAgICAgICAgIHZub2RlLnBhdGNoRmxhZyB8PSAxMDI0IC8qIERZTkFNSUNfU0xPVFMgKi87XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbi5fID0gMSAvKiBTVEFCTEUgKi87XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChpc0Z1bmN0aW9uKGNoaWxkcmVuKSkge1xyXG4gICAgICAgIGNoaWxkcmVuID0geyBkZWZhdWx0OiBjaGlsZHJlbiwgX2N0eDogY3VycmVudFJlbmRlcmluZ0luc3RhbmNlIH07XHJcbiAgICAgICAgdHlwZSA9IDMyIC8qIFNMT1RTX0NISUxEUkVOICovO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgY2hpbGRyZW4gPSBTdHJpbmcoY2hpbGRyZW4pO1xyXG4gICAgICAgIC8vIGZvcmNlIHRlbGVwb3J0IGNoaWxkcmVuIHRvIGFycmF5IHNvIGl0IGNhbiBiZSBtb3ZlZCBhcm91bmRcclxuICAgICAgICBpZiAoc2hhcGVGbGFnICYgNjQgLyogVEVMRVBPUlQgKi8pIHtcclxuICAgICAgICAgICAgdHlwZSA9IDE2IC8qIEFSUkFZX0NISUxEUkVOICovO1xyXG4gICAgICAgICAgICBjaGlsZHJlbiA9IFtjcmVhdGVUZXh0Vk5vZGUoY2hpbGRyZW4pXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHR5cGUgPSA4IC8qIFRFWFRfQ0hJTERSRU4gKi87XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgdm5vZGUuY2hpbGRyZW4gPSBjaGlsZHJlbjtcclxuICAgIHZub2RlLnNoYXBlRmxhZyB8PSB0eXBlO1xyXG59XHJcbmZ1bmN0aW9uIG1lcmdlUHJvcHMoLi4uYXJncykge1xyXG4gICAgY29uc3QgcmV0ID0gZXh0ZW5kKHt9LCBhcmdzWzBdKTtcclxuICAgIGZvciAobGV0IGkgPSAxOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGNvbnN0IHRvTWVyZ2UgPSBhcmdzW2ldO1xyXG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIHRvTWVyZ2UpIHtcclxuICAgICAgICAgICAgaWYgKGtleSA9PT0gJ2NsYXNzJykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHJldC5jbGFzcyAhPT0gdG9NZXJnZS5jbGFzcykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldC5jbGFzcyA9IG5vcm1hbGl6ZUNsYXNzKFtyZXQuY2xhc3MsIHRvTWVyZ2UuY2xhc3NdKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChrZXkgPT09ICdzdHlsZScpIHtcclxuICAgICAgICAgICAgICAgIHJldC5zdHlsZSA9IG5vcm1hbGl6ZVN0eWxlKFtyZXQuc3R5bGUsIHRvTWVyZ2Uuc3R5bGVdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChpc09uKGtleSkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGV4aXN0aW5nID0gcmV0W2tleV07XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpbmNvbWluZyA9IHRvTWVyZ2Vba2V5XTtcclxuICAgICAgICAgICAgICAgIGlmIChleGlzdGluZyAhPT0gaW5jb21pbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXRba2V5XSA9IGV4aXN0aW5nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgID8gW10uY29uY2F0KGV4aXN0aW5nLCB0b01lcmdlW2tleV0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDogaW5jb21pbmc7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoa2V5ICE9PSAnJykge1xyXG4gICAgICAgICAgICAgICAgcmV0W2tleV0gPSB0b01lcmdlW2tleV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmV0O1xyXG59XG5cbmZ1bmN0aW9uIHByb3ZpZGUoa2V5LCB2YWx1ZSkge1xyXG4gICAgaWYgKCFjdXJyZW50SW5zdGFuY2UpIHtcclxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgIHdhcm4oYHByb3ZpZGUoKSBjYW4gb25seSBiZSB1c2VkIGluc2lkZSBzZXR1cCgpLmApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGxldCBwcm92aWRlcyA9IGN1cnJlbnRJbnN0YW5jZS5wcm92aWRlcztcclxuICAgICAgICAvLyBieSBkZWZhdWx0IGFuIGluc3RhbmNlIGluaGVyaXRzIGl0cyBwYXJlbnQncyBwcm92aWRlcyBvYmplY3RcclxuICAgICAgICAvLyBidXQgd2hlbiBpdCBuZWVkcyB0byBwcm92aWRlIHZhbHVlcyBvZiBpdHMgb3duLCBpdCBjcmVhdGVzIGl0c1xyXG4gICAgICAgIC8vIG93biBwcm92aWRlcyBvYmplY3QgdXNpbmcgcGFyZW50IHByb3ZpZGVzIG9iamVjdCBhcyBwcm90b3R5cGUuXHJcbiAgICAgICAgLy8gdGhpcyB3YXkgaW4gYGluamVjdGAgd2UgY2FuIHNpbXBseSBsb29rIHVwIGluamVjdGlvbnMgZnJvbSBkaXJlY3RcclxuICAgICAgICAvLyBwYXJlbnQgYW5kIGxldCB0aGUgcHJvdG90eXBlIGNoYWluIGRvIHRoZSB3b3JrLlxyXG4gICAgICAgIGNvbnN0IHBhcmVudFByb3ZpZGVzID0gY3VycmVudEluc3RhbmNlLnBhcmVudCAmJiBjdXJyZW50SW5zdGFuY2UucGFyZW50LnByb3ZpZGVzO1xyXG4gICAgICAgIGlmIChwYXJlbnRQcm92aWRlcyA9PT0gcHJvdmlkZXMpIHtcclxuICAgICAgICAgICAgcHJvdmlkZXMgPSBjdXJyZW50SW5zdGFuY2UucHJvdmlkZXMgPSBPYmplY3QuY3JlYXRlKHBhcmVudFByb3ZpZGVzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gVFMgZG9lc24ndCBhbGxvdyBzeW1ib2wgYXMgaW5kZXggdHlwZVxyXG4gICAgICAgIHByb3ZpZGVzW2tleV0gPSB2YWx1ZTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBpbmplY3Qoa2V5LCBkZWZhdWx0VmFsdWUsIHRyZWF0RGVmYXVsdEFzRmFjdG9yeSA9IGZhbHNlKSB7XHJcbiAgICAvLyBmYWxsYmFjayB0byBgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlYCBzbyB0aGF0IHRoaXMgY2FuIGJlIGNhbGxlZCBpblxyXG4gICAgLy8gYSBmdW5jdGlvbmFsIGNvbXBvbmVudFxyXG4gICAgY29uc3QgaW5zdGFuY2UgPSBjdXJyZW50SW5zdGFuY2UgfHwgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlO1xyXG4gICAgaWYgKGluc3RhbmNlKSB7XHJcbiAgICAgICAgLy8gIzI0MDBcclxuICAgICAgICAvLyB0byBzdXBwb3J0IGBhcHAudXNlYCBwbHVnaW5zLFxyXG4gICAgICAgIC8vIGZhbGxiYWNrIHRvIGFwcENvbnRleHQncyBgcHJvdmlkZXNgIGlmIHRoZSBpbnRhbmNlIGlzIGF0IHJvb3RcclxuICAgICAgICBjb25zdCBwcm92aWRlcyA9IGluc3RhbmNlLnBhcmVudCA9PSBudWxsXHJcbiAgICAgICAgICAgID8gaW5zdGFuY2Uudm5vZGUuYXBwQ29udGV4dCAmJiBpbnN0YW5jZS52bm9kZS5hcHBDb250ZXh0LnByb3ZpZGVzXHJcbiAgICAgICAgICAgIDogaW5zdGFuY2UucGFyZW50LnByb3ZpZGVzO1xyXG4gICAgICAgIGlmIChwcm92aWRlcyAmJiBrZXkgaW4gcHJvdmlkZXMpIHtcclxuICAgICAgICAgICAgLy8gVFMgZG9lc24ndCBhbGxvdyBzeW1ib2wgYXMgaW5kZXggdHlwZVxyXG4gICAgICAgICAgICByZXR1cm4gcHJvdmlkZXNba2V5XTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRyZWF0RGVmYXVsdEFzRmFjdG9yeSAmJiBpc0Z1bmN0aW9uKGRlZmF1bHRWYWx1ZSlcclxuICAgICAgICAgICAgICAgID8gZGVmYXVsdFZhbHVlKClcclxuICAgICAgICAgICAgICAgIDogZGVmYXVsdFZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgd2FybihgaW5qZWN0aW9uIFwiJHtTdHJpbmcoa2V5KX1cIiBub3QgZm91bmQuYCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgd2FybihgaW5qZWN0KCkgY2FuIG9ubHkgYmUgdXNlZCBpbnNpZGUgc2V0dXAoKSBvciBmdW5jdGlvbmFsIGNvbXBvbmVudHMuYCk7XHJcbiAgICB9XHJcbn1cblxuZnVuY3Rpb24gY3JlYXRlRHVwbGljYXRlQ2hlY2tlcigpIHtcclxuICAgIGNvbnN0IGNhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcclxuICAgIHJldHVybiAodHlwZSwga2V5KSA9PiB7XHJcbiAgICAgICAgaWYgKGNhY2hlW2tleV0pIHtcclxuICAgICAgICAgICAgd2FybihgJHt0eXBlfSBwcm9wZXJ0eSBcIiR7a2V5fVwiIGlzIGFscmVhZHkgZGVmaW5lZCBpbiAke2NhY2hlW2tleV19LmApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgY2FjaGVba2V5XSA9IHR5cGU7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufVxyXG5sZXQgaXNJbkJlZm9yZUNyZWF0ZSA9IGZhbHNlO1xyXG5mdW5jdGlvbiBhcHBseU9wdGlvbnMoaW5zdGFuY2UsIG9wdGlvbnMsIGRlZmVycmVkRGF0YSA9IFtdLCBkZWZlcnJlZFdhdGNoID0gW10sIGRlZmVycmVkUHJvdmlkZSA9IFtdLCBhc01peGluID0gZmFsc2UpIHtcclxuICAgIGNvbnN0IHsgXHJcbiAgICAvLyBjb21wb3NpdGlvblxyXG4gICAgbWl4aW5zLCBleHRlbmRzOiBleHRlbmRzT3B0aW9ucywgXHJcbiAgICAvLyBzdGF0ZVxyXG4gICAgZGF0YTogZGF0YU9wdGlvbnMsIGNvbXB1dGVkOiBjb21wdXRlZE9wdGlvbnMsIG1ldGhvZHMsIHdhdGNoOiB3YXRjaE9wdGlvbnMsIHByb3ZpZGU6IHByb3ZpZGVPcHRpb25zLCBpbmplY3Q6IGluamVjdE9wdGlvbnMsIFxyXG4gICAgLy8gYXNzZXRzXHJcbiAgICBjb21wb25lbnRzLCBkaXJlY3RpdmVzLCBcclxuICAgIC8vIGxpZmVjeWNsZVxyXG4gICAgYmVmb3JlTW91bnQsIG1vdW50ZWQsIGJlZm9yZVVwZGF0ZSwgdXBkYXRlZCwgYWN0aXZhdGVkLCBkZWFjdGl2YXRlZCwgYmVmb3JlRGVzdHJveSwgYmVmb3JlVW5tb3VudCwgZGVzdHJveWVkLCB1bm1vdW50ZWQsIHJlbmRlciwgcmVuZGVyVHJhY2tlZCwgcmVuZGVyVHJpZ2dlcmVkLCBlcnJvckNhcHR1cmVkLCBcclxuICAgIC8vIHB1YmxpYyBBUElcclxuICAgIGV4cG9zZSB9ID0gb3B0aW9ucztcclxuICAgIGNvbnN0IHB1YmxpY1RoaXMgPSBpbnN0YW5jZS5wcm94eTtcclxuICAgIGNvbnN0IGN0eCA9IGluc3RhbmNlLmN0eDtcclxuICAgIGNvbnN0IGdsb2JhbE1peGlucyA9IGluc3RhbmNlLmFwcENvbnRleHQubWl4aW5zO1xyXG4gICAgaWYgKGFzTWl4aW4gJiYgcmVuZGVyICYmIGluc3RhbmNlLnJlbmRlciA9PT0gTk9PUCkge1xyXG4gICAgICAgIGluc3RhbmNlLnJlbmRlciA9IHJlbmRlcjtcclxuICAgIH1cclxuICAgIC8vIGFwcGx5T3B0aW9ucyBpcyBjYWxsZWQgbm9uLWFzLW1peGluIG9uY2UgcGVyIGluc3RhbmNlXHJcbiAgICBpZiAoIWFzTWl4aW4pIHtcclxuICAgICAgICBpc0luQmVmb3JlQ3JlYXRlID0gdHJ1ZTtcclxuICAgICAgICBjYWxsU3luY0hvb2soJ2JlZm9yZUNyZWF0ZScsIFwiYmNcIiAvKiBCRUZPUkVfQ1JFQVRFICovLCBvcHRpb25zLCBpbnN0YW5jZSwgZ2xvYmFsTWl4aW5zKTtcclxuICAgICAgICBpc0luQmVmb3JlQ3JlYXRlID0gZmFsc2U7XHJcbiAgICAgICAgLy8gZ2xvYmFsIG1peGlucyBhcmUgYXBwbGllZCBmaXJzdFxyXG4gICAgICAgIGFwcGx5TWl4aW5zKGluc3RhbmNlLCBnbG9iYWxNaXhpbnMsIGRlZmVycmVkRGF0YSwgZGVmZXJyZWRXYXRjaCwgZGVmZXJyZWRQcm92aWRlKTtcclxuICAgIH1cclxuICAgIC8vIGV4dGVuZGluZyBhIGJhc2UgY29tcG9uZW50Li4uXHJcbiAgICBpZiAoZXh0ZW5kc09wdGlvbnMpIHtcclxuICAgICAgICBhcHBseU9wdGlvbnMoaW5zdGFuY2UsIGV4dGVuZHNPcHRpb25zLCBkZWZlcnJlZERhdGEsIGRlZmVycmVkV2F0Y2gsIGRlZmVycmVkUHJvdmlkZSwgdHJ1ZSk7XHJcbiAgICB9XHJcbiAgICAvLyBsb2NhbCBtaXhpbnNcclxuICAgIGlmIChtaXhpbnMpIHtcclxuICAgICAgICBhcHBseU1peGlucyhpbnN0YW5jZSwgbWl4aW5zLCBkZWZlcnJlZERhdGEsIGRlZmVycmVkV2F0Y2gsIGRlZmVycmVkUHJvdmlkZSk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBjaGVja0R1cGxpY2F0ZVByb3BlcnRpZXMgPSAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgPyBjcmVhdGVEdXBsaWNhdGVDaGVja2VyKCkgOiBudWxsO1xyXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgIGNvbnN0IFtwcm9wc09wdGlvbnNdID0gaW5zdGFuY2UucHJvcHNPcHRpb25zO1xyXG4gICAgICAgIGlmIChwcm9wc09wdGlvbnMpIHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gcHJvcHNPcHRpb25zKSB7XHJcbiAgICAgICAgICAgICAgICBjaGVja0R1cGxpY2F0ZVByb3BlcnRpZXMoXCJQcm9wc1wiIC8qIFBST1BTICovLCBrZXkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gb3B0aW9ucyBpbml0aWFsaXphdGlvbiBvcmRlciAodG8gYmUgY29uc2lzdGVudCB3aXRoIFZ1ZSAyKTpcclxuICAgIC8vIC0gcHJvcHMgKGFscmVhZHkgZG9uZSBvdXRzaWRlIG9mIHRoaXMgZnVuY3Rpb24pXHJcbiAgICAvLyAtIGluamVjdFxyXG4gICAgLy8gLSBtZXRob2RzXHJcbiAgICAvLyAtIGRhdGEgKGRlZmVycmVkIHNpbmNlIGl0IHJlbGllcyBvbiBgdGhpc2AgYWNjZXNzKVxyXG4gICAgLy8gLSBjb21wdXRlZFxyXG4gICAgLy8gLSB3YXRjaCAoZGVmZXJyZWQgc2luY2UgaXQgcmVsaWVzIG9uIGB0aGlzYCBhY2Nlc3MpXHJcbiAgICBpZiAoaW5qZWN0T3B0aW9ucykge1xyXG4gICAgICAgIGlmIChpc0FycmF5KGluamVjdE9wdGlvbnMpKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW5qZWN0T3B0aW9ucy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qga2V5ID0gaW5qZWN0T3B0aW9uc1tpXTtcclxuICAgICAgICAgICAgICAgIGN0eFtrZXldID0gaW5qZWN0KGtleSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tEdXBsaWNhdGVQcm9wZXJ0aWVzKFwiSW5qZWN0XCIgLyogSU5KRUNUICovLCBrZXkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBpbmplY3RPcHRpb25zKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvcHQgPSBpbmplY3RPcHRpb25zW2tleV07XHJcbiAgICAgICAgICAgICAgICBpZiAoaXNPYmplY3Qob3B0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGN0eFtrZXldID0gaW5qZWN0KG9wdC5mcm9tIHx8IGtleSwgb3B0LmRlZmF1bHQsIHRydWUgLyogdHJlYXQgZGVmYXVsdCBmdW5jdGlvbiBhcyBmYWN0b3J5ICovKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGN0eFtrZXldID0gaW5qZWN0KG9wdCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tEdXBsaWNhdGVQcm9wZXJ0aWVzKFwiSW5qZWN0XCIgLyogSU5KRUNUICovLCBrZXkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKG1ldGhvZHMpIHtcclxuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBtZXRob2RzKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG1ldGhvZEhhbmRsZXIgPSBtZXRob2RzW2tleV07XHJcbiAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKG1ldGhvZEhhbmRsZXIpKSB7XHJcbiAgICAgICAgICAgICAgICBjdHhba2V5XSA9IG1ldGhvZEhhbmRsZXIuYmluZChwdWJsaWNUaGlzKTtcclxuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgICAgICBjaGVja0R1cGxpY2F0ZVByb3BlcnRpZXMoXCJNZXRob2RzXCIgLyogTUVUSE9EUyAqLywga2V5KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgIHdhcm4oYE1ldGhvZCBcIiR7a2V5fVwiIGhhcyB0eXBlIFwiJHt0eXBlb2YgbWV0aG9kSGFuZGxlcn1cIiBpbiB0aGUgY29tcG9uZW50IGRlZmluaXRpb24uIGAgK1xyXG4gICAgICAgICAgICAgICAgICAgIGBEaWQgeW91IHJlZmVyZW5jZSB0aGUgZnVuY3Rpb24gY29ycmVjdGx5P2ApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKCFhc01peGluKSB7XHJcbiAgICAgICAgaWYgKGRlZmVycmVkRGF0YS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgZGVmZXJyZWREYXRhLmZvckVhY2goZGF0YUZuID0+IHJlc29sdmVEYXRhKGluc3RhbmNlLCBkYXRhRm4sIHB1YmxpY1RoaXMpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGRhdGFPcHRpb25zKSB7XHJcbiAgICAgICAgICAgIHJlc29sdmVEYXRhKGluc3RhbmNlLCBkYXRhT3B0aW9ucywgcHVibGljVGhpcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgY29uc3QgcmF3RGF0YSA9IHRvUmF3KGluc3RhbmNlLmRhdGEpO1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiByYXdEYXRhKSB7XHJcbiAgICAgICAgICAgICAgICBjaGVja0R1cGxpY2F0ZVByb3BlcnRpZXMoXCJEYXRhXCIgLyogREFUQSAqLywga2V5KTtcclxuICAgICAgICAgICAgICAgIC8vIGV4cG9zZSBkYXRhIG9uIGN0eCBkdXJpbmcgZGV2XHJcbiAgICAgICAgICAgICAgICBpZiAoa2V5WzBdICE9PSAnJCcgJiYga2V5WzBdICE9PSAnXycpIHtcclxuICAgICAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3R4LCBrZXksIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBnZXQ6ICgpID0+IHJhd0RhdGFba2V5XSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0OiBOT09QXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChkYXRhT3B0aW9ucykge1xyXG4gICAgICAgIGRlZmVycmVkRGF0YS5wdXNoKGRhdGFPcHRpb25zKTtcclxuICAgIH1cclxuICAgIGlmIChjb21wdXRlZE9wdGlvbnMpIHtcclxuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBjb21wdXRlZE9wdGlvbnMpIHtcclxuICAgICAgICAgICAgY29uc3Qgb3B0ID0gY29tcHV0ZWRPcHRpb25zW2tleV07XHJcbiAgICAgICAgICAgIGNvbnN0IGdldCA9IGlzRnVuY3Rpb24ob3B0KVxyXG4gICAgICAgICAgICAgICAgPyBvcHQuYmluZChwdWJsaWNUaGlzLCBwdWJsaWNUaGlzKVxyXG4gICAgICAgICAgICAgICAgOiBpc0Z1bmN0aW9uKG9wdC5nZXQpXHJcbiAgICAgICAgICAgICAgICAgICAgPyBvcHQuZ2V0LmJpbmQocHVibGljVGhpcywgcHVibGljVGhpcylcclxuICAgICAgICAgICAgICAgICAgICA6IE5PT1A7XHJcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgZ2V0ID09PSBOT09QKSB7XHJcbiAgICAgICAgICAgICAgICB3YXJuKGBDb21wdXRlZCBwcm9wZXJ0eSBcIiR7a2V5fVwiIGhhcyBubyBnZXR0ZXIuYCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3Qgc2V0ID0gIWlzRnVuY3Rpb24ob3B0KSAmJiBpc0Z1bmN0aW9uKG9wdC5zZXQpXHJcbiAgICAgICAgICAgICAgICA/IG9wdC5zZXQuYmluZChwdWJsaWNUaGlzKVxyXG4gICAgICAgICAgICAgICAgOiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJylcclxuICAgICAgICAgICAgICAgICAgICA/ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2FybihgV3JpdGUgb3BlcmF0aW9uIGZhaWxlZDogY29tcHV0ZWQgcHJvcGVydHkgXCIke2tleX1cIiBpcyByZWFkb25seS5gKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgOiBOT09QO1xyXG4gICAgICAgICAgICBjb25zdCBjID0gY29tcHV0ZWQoe1xyXG4gICAgICAgICAgICAgICAgZ2V0LFxyXG4gICAgICAgICAgICAgICAgc2V0XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3R4LCBrZXksIHtcclxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBnZXQ6ICgpID0+IGMudmFsdWUsXHJcbiAgICAgICAgICAgICAgICBzZXQ6IHYgPT4gKGMudmFsdWUgPSB2KVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICAgICAgY2hlY2tEdXBsaWNhdGVQcm9wZXJ0aWVzKFwiQ29tcHV0ZWRcIiAvKiBDT01QVVRFRCAqLywga2V5KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmICh3YXRjaE9wdGlvbnMpIHtcclxuICAgICAgICBkZWZlcnJlZFdhdGNoLnB1c2god2F0Y2hPcHRpb25zKTtcclxuICAgIH1cclxuICAgIGlmICghYXNNaXhpbiAmJiBkZWZlcnJlZFdhdGNoLmxlbmd0aCkge1xyXG4gICAgICAgIGRlZmVycmVkV2F0Y2guZm9yRWFjaCh3YXRjaE9wdGlvbnMgPT4ge1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiB3YXRjaE9wdGlvbnMpIHtcclxuICAgICAgICAgICAgICAgIGNyZWF0ZVdhdGNoZXIod2F0Y2hPcHRpb25zW2tleV0sIGN0eCwgcHVibGljVGhpcywga2V5KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgaWYgKHByb3ZpZGVPcHRpb25zKSB7XHJcbiAgICAgICAgZGVmZXJyZWRQcm92aWRlLnB1c2gocHJvdmlkZU9wdGlvbnMpO1xyXG4gICAgfVxyXG4gICAgaWYgKCFhc01peGluICYmIGRlZmVycmVkUHJvdmlkZS5sZW5ndGgpIHtcclxuICAgICAgICBkZWZlcnJlZFByb3ZpZGUuZm9yRWFjaChwcm92aWRlT3B0aW9ucyA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHByb3ZpZGVzID0gaXNGdW5jdGlvbihwcm92aWRlT3B0aW9ucylcclxuICAgICAgICAgICAgICAgID8gcHJvdmlkZU9wdGlvbnMuY2FsbChwdWJsaWNUaGlzKVxyXG4gICAgICAgICAgICAgICAgOiBwcm92aWRlT3B0aW9ucztcclxuICAgICAgICAgICAgUmVmbGVjdC5vd25LZXlzKHByb3ZpZGVzKS5mb3JFYWNoKGtleSA9PiB7XHJcbiAgICAgICAgICAgICAgICBwcm92aWRlKGtleSwgcHJvdmlkZXNba2V5XSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgLy8gYXNzZXQgb3B0aW9ucy5cclxuICAgIC8vIFRvIHJlZHVjZSBtZW1vcnkgdXNhZ2UsIG9ubHkgY29tcG9uZW50cyB3aXRoIG1peGlucyBvciBleHRlbmRzIHdpbGwgaGF2ZVxyXG4gICAgLy8gcmVzb2x2ZWQgYXNzZXQgcmVnaXN0cnkgYXR0YWNoZWQgdG8gaW5zdGFuY2UuXHJcbiAgICBpZiAoYXNNaXhpbikge1xyXG4gICAgICAgIGlmIChjb21wb25lbnRzKSB7XHJcbiAgICAgICAgICAgIGV4dGVuZChpbnN0YW5jZS5jb21wb25lbnRzIHx8XHJcbiAgICAgICAgICAgICAgICAoaW5zdGFuY2UuY29tcG9uZW50cyA9IGV4dGVuZCh7fSwgaW5zdGFuY2UudHlwZS5jb21wb25lbnRzKSksIGNvbXBvbmVudHMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZGlyZWN0aXZlcykge1xyXG4gICAgICAgICAgICBleHRlbmQoaW5zdGFuY2UuZGlyZWN0aXZlcyB8fFxyXG4gICAgICAgICAgICAgICAgKGluc3RhbmNlLmRpcmVjdGl2ZXMgPSBleHRlbmQoe30sIGluc3RhbmNlLnR5cGUuZGlyZWN0aXZlcykpLCBkaXJlY3RpdmVzKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyBsaWZlY3ljbGUgb3B0aW9uc1xyXG4gICAgaWYgKCFhc01peGluKSB7XHJcbiAgICAgICAgY2FsbFN5bmNIb29rKCdjcmVhdGVkJywgXCJjXCIgLyogQ1JFQVRFRCAqLywgb3B0aW9ucywgaW5zdGFuY2UsIGdsb2JhbE1peGlucyk7XHJcbiAgICB9XHJcbiAgICBpZiAoYmVmb3JlTW91bnQpIHtcclxuICAgICAgICBvbkJlZm9yZU1vdW50KGJlZm9yZU1vdW50LmJpbmQocHVibGljVGhpcykpO1xyXG4gICAgfVxyXG4gICAgaWYgKG1vdW50ZWQpIHtcclxuICAgICAgICBvbk1vdW50ZWQobW91bnRlZC5iaW5kKHB1YmxpY1RoaXMpKTtcclxuICAgIH1cclxuICAgIGlmIChiZWZvcmVVcGRhdGUpIHtcclxuICAgICAgICBvbkJlZm9yZVVwZGF0ZShiZWZvcmVVcGRhdGUuYmluZChwdWJsaWNUaGlzKSk7XHJcbiAgICB9XHJcbiAgICBpZiAodXBkYXRlZCkge1xyXG4gICAgICAgIG9uVXBkYXRlZCh1cGRhdGVkLmJpbmQocHVibGljVGhpcykpO1xyXG4gICAgfVxyXG4gICAgaWYgKGFjdGl2YXRlZCkge1xyXG4gICAgICAgIG9uQWN0aXZhdGVkKGFjdGl2YXRlZC5iaW5kKHB1YmxpY1RoaXMpKTtcclxuICAgIH1cclxuICAgIGlmIChkZWFjdGl2YXRlZCkge1xyXG4gICAgICAgIG9uRGVhY3RpdmF0ZWQoZGVhY3RpdmF0ZWQuYmluZChwdWJsaWNUaGlzKSk7XHJcbiAgICB9XHJcbiAgICBpZiAoZXJyb3JDYXB0dXJlZCkge1xyXG4gICAgICAgIG9uRXJyb3JDYXB0dXJlZChlcnJvckNhcHR1cmVkLmJpbmQocHVibGljVGhpcykpO1xyXG4gICAgfVxyXG4gICAgaWYgKHJlbmRlclRyYWNrZWQpIHtcclxuICAgICAgICBvblJlbmRlclRyYWNrZWQocmVuZGVyVHJhY2tlZC5iaW5kKHB1YmxpY1RoaXMpKTtcclxuICAgIH1cclxuICAgIGlmIChyZW5kZXJUcmlnZ2VyZWQpIHtcclxuICAgICAgICBvblJlbmRlclRyaWdnZXJlZChyZW5kZXJUcmlnZ2VyZWQuYmluZChwdWJsaWNUaGlzKSk7XHJcbiAgICB9XHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIGJlZm9yZURlc3Ryb3kpIHtcclxuICAgICAgICB3YXJuKGBcXGBiZWZvcmVEZXN0cm95XFxgIGhhcyBiZWVuIHJlbmFtZWQgdG8gXFxgYmVmb3JlVW5tb3VudFxcYC5gKTtcclxuICAgIH1cclxuICAgIGlmIChiZWZvcmVVbm1vdW50KSB7XHJcbiAgICAgICAgb25CZWZvcmVVbm1vdW50KGJlZm9yZVVubW91bnQuYmluZChwdWJsaWNUaGlzKSk7XHJcbiAgICB9XHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIGRlc3Ryb3llZCkge1xyXG4gICAgICAgIHdhcm4oYFxcYGRlc3Ryb3llZFxcYCBoYXMgYmVlbiByZW5hbWVkIHRvIFxcYHVubW91bnRlZFxcYC5gKTtcclxuICAgIH1cclxuICAgIGlmICh1bm1vdW50ZWQpIHtcclxuICAgICAgICBvblVubW91bnRlZCh1bm1vdW50ZWQuYmluZChwdWJsaWNUaGlzKSk7XHJcbiAgICB9XHJcbiAgICBpZiAoaXNBcnJheShleHBvc2UpKSB7XHJcbiAgICAgICAgaWYgKCFhc01peGluKSB7XHJcbiAgICAgICAgICAgIGlmIChleHBvc2UubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBleHBvc2VkID0gaW5zdGFuY2UuZXhwb3NlZCB8fCAoaW5zdGFuY2UuZXhwb3NlZCA9IHByb3h5UmVmcyh7fSkpO1xyXG4gICAgICAgICAgICAgICAgZXhwb3NlLmZvckVhY2goa2V5ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBleHBvc2VkW2tleV0gPSB0b1JlZihwdWJsaWNUaGlzLCBrZXkpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoIWluc3RhbmNlLmV4cG9zZWQpIHtcclxuICAgICAgICAgICAgICAgIGluc3RhbmNlLmV4cG9zZWQgPSBFTVBUWV9PQko7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgIHdhcm4oYFRoZSBcXGBleHBvc2VcXGAgb3B0aW9uIGlzIGlnbm9yZWQgd2hlbiB1c2VkIGluIG1peGlucy5gKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gY2FsbFN5bmNIb29rKG5hbWUsIHR5cGUsIG9wdGlvbnMsIGluc3RhbmNlLCBnbG9iYWxNaXhpbnMpIHtcclxuICAgIGNhbGxIb29rRnJvbU1peGlucyhuYW1lLCB0eXBlLCBnbG9iYWxNaXhpbnMsIGluc3RhbmNlKTtcclxuICAgIGNvbnN0IHsgZXh0ZW5kczogYmFzZSwgbWl4aW5zIH0gPSBvcHRpb25zO1xyXG4gICAgaWYgKGJhc2UpIHtcclxuICAgICAgICBjYWxsSG9va0Zyb21FeHRlbmRzKG5hbWUsIHR5cGUsIGJhc2UsIGluc3RhbmNlKTtcclxuICAgIH1cclxuICAgIGlmIChtaXhpbnMpIHtcclxuICAgICAgICBjYWxsSG9va0Zyb21NaXhpbnMobmFtZSwgdHlwZSwgbWl4aW5zLCBpbnN0YW5jZSk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBzZWxmSG9vayA9IG9wdGlvbnNbbmFtZV07XHJcbiAgICBpZiAoc2VsZkhvb2spIHtcclxuICAgICAgICBjYWxsV2l0aEFzeW5jRXJyb3JIYW5kbGluZyhzZWxmSG9vay5iaW5kKGluc3RhbmNlLnByb3h5KSwgaW5zdGFuY2UsIHR5cGUpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGNhbGxIb29rRnJvbUV4dGVuZHMobmFtZSwgdHlwZSwgYmFzZSwgaW5zdGFuY2UpIHtcclxuICAgIGlmIChiYXNlLmV4dGVuZHMpIHtcclxuICAgICAgICBjYWxsSG9va0Zyb21FeHRlbmRzKG5hbWUsIHR5cGUsIGJhc2UuZXh0ZW5kcywgaW5zdGFuY2UpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgYmFzZUhvb2sgPSBiYXNlW25hbWVdO1xyXG4gICAgaWYgKGJhc2VIb29rKSB7XHJcbiAgICAgICAgY2FsbFdpdGhBc3luY0Vycm9ySGFuZGxpbmcoYmFzZUhvb2suYmluZChpbnN0YW5jZS5wcm94eSksIGluc3RhbmNlLCB0eXBlKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBjYWxsSG9va0Zyb21NaXhpbnMobmFtZSwgdHlwZSwgbWl4aW5zLCBpbnN0YW5jZSkge1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtaXhpbnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBjb25zdCBjaGFpbmVkTWl4aW5zID0gbWl4aW5zW2ldLm1peGlucztcclxuICAgICAgICBpZiAoY2hhaW5lZE1peGlucykge1xyXG4gICAgICAgICAgICBjYWxsSG9va0Zyb21NaXhpbnMobmFtZSwgdHlwZSwgY2hhaW5lZE1peGlucywgaW5zdGFuY2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBmbiA9IG1peGluc1tpXVtuYW1lXTtcclxuICAgICAgICBpZiAoZm4pIHtcclxuICAgICAgICAgICAgY2FsbFdpdGhBc3luY0Vycm9ySGFuZGxpbmcoZm4uYmluZChpbnN0YW5jZS5wcm94eSksIGluc3RhbmNlLCB0eXBlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gYXBwbHlNaXhpbnMoaW5zdGFuY2UsIG1peGlucywgZGVmZXJyZWREYXRhLCBkZWZlcnJlZFdhdGNoLCBkZWZlcnJlZFByb3ZpZGUpIHtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWl4aW5zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgYXBwbHlPcHRpb25zKGluc3RhbmNlLCBtaXhpbnNbaV0sIGRlZmVycmVkRGF0YSwgZGVmZXJyZWRXYXRjaCwgZGVmZXJyZWRQcm92aWRlLCB0cnVlKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiByZXNvbHZlRGF0YShpbnN0YW5jZSwgZGF0YUZuLCBwdWJsaWNUaGlzKSB7XHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFpc0Z1bmN0aW9uKGRhdGFGbikpIHtcclxuICAgICAgICB3YXJuKGBUaGUgZGF0YSBvcHRpb24gbXVzdCBiZSBhIGZ1bmN0aW9uLiBgICtcclxuICAgICAgICAgICAgYFBsYWluIG9iamVjdCB1c2FnZSBpcyBubyBsb25nZXIgc3VwcG9ydGVkLmApO1xyXG4gICAgfVxyXG4gICAgY29uc3QgZGF0YSA9IGRhdGFGbi5jYWxsKHB1YmxpY1RoaXMsIHB1YmxpY1RoaXMpO1xyXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBpc1Byb21pc2UoZGF0YSkpIHtcclxuICAgICAgICB3YXJuKGBkYXRhKCkgcmV0dXJuZWQgYSBQcm9taXNlIC0gbm90ZSBkYXRhKCkgY2Fubm90IGJlIGFzeW5jOyBJZiB5b3UgYCArXHJcbiAgICAgICAgICAgIGBpbnRlbmQgdG8gcGVyZm9ybSBkYXRhIGZldGNoaW5nIGJlZm9yZSBjb21wb25lbnQgcmVuZGVycywgdXNlIGAgK1xyXG4gICAgICAgICAgICBgYXN5bmMgc2V0dXAoKSArIDxTdXNwZW5zZT4uYCk7XHJcbiAgICB9XHJcbiAgICBpZiAoIWlzT2JqZWN0KGRhdGEpKSB7XHJcbiAgICAgICAgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIHdhcm4oYGRhdGEoKSBzaG91bGQgcmV0dXJuIGFuIG9iamVjdC5gKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGluc3RhbmNlLmRhdGEgPT09IEVNUFRZX09CSikge1xyXG4gICAgICAgIGluc3RhbmNlLmRhdGEgPSByZWFjdGl2ZShkYXRhKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIC8vIGV4aXN0aW5nIGRhdGE6IHRoaXMgaXMgYSBtaXhpbiBvciBleHRlbmRzLlxyXG4gICAgICAgIGV4dGVuZChpbnN0YW5jZS5kYXRhLCBkYXRhKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBjcmVhdGVXYXRjaGVyKHJhdywgY3R4LCBwdWJsaWNUaGlzLCBrZXkpIHtcclxuICAgIGNvbnN0IGdldHRlciA9IGtleS5pbmNsdWRlcygnLicpXHJcbiAgICAgICAgPyBjcmVhdGVQYXRoR2V0dGVyKHB1YmxpY1RoaXMsIGtleSlcclxuICAgICAgICA6ICgpID0+IHB1YmxpY1RoaXNba2V5XTtcclxuICAgIGlmIChpc1N0cmluZyhyYXcpKSB7XHJcbiAgICAgICAgY29uc3QgaGFuZGxlciA9IGN0eFtyYXddO1xyXG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKGhhbmRsZXIpKSB7XHJcbiAgICAgICAgICAgIHdhdGNoKGdldHRlciwgaGFuZGxlcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICB3YXJuKGBJbnZhbGlkIHdhdGNoIGhhbmRsZXIgc3BlY2lmaWVkIGJ5IGtleSBcIiR7cmF3fVwiYCwgaGFuZGxlcik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoaXNGdW5jdGlvbihyYXcpKSB7XHJcbiAgICAgICAgd2F0Y2goZ2V0dGVyLCByYXcuYmluZChwdWJsaWNUaGlzKSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChpc09iamVjdChyYXcpKSB7XHJcbiAgICAgICAgaWYgKGlzQXJyYXkocmF3KSkge1xyXG4gICAgICAgICAgICByYXcuZm9yRWFjaChyID0+IGNyZWF0ZVdhdGNoZXIociwgY3R4LCBwdWJsaWNUaGlzLCBrZXkpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGhhbmRsZXIgPSBpc0Z1bmN0aW9uKHJhdy5oYW5kbGVyKVxyXG4gICAgICAgICAgICAgICAgPyByYXcuaGFuZGxlci5iaW5kKHB1YmxpY1RoaXMpXHJcbiAgICAgICAgICAgICAgICA6IGN0eFtyYXcuaGFuZGxlcl07XHJcbiAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKGhhbmRsZXIpKSB7XHJcbiAgICAgICAgICAgICAgICB3YXRjaChnZXR0ZXIsIGhhbmRsZXIsIHJhdyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICB3YXJuKGBJbnZhbGlkIHdhdGNoIGhhbmRsZXIgc3BlY2lmaWVkIGJ5IGtleSBcIiR7cmF3LmhhbmRsZXJ9XCJgLCBoYW5kbGVyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgIHdhcm4oYEludmFsaWQgd2F0Y2ggb3B0aW9uOiBcIiR7a2V5fVwiYCwgcmF3KTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBjcmVhdGVQYXRoR2V0dGVyKGN0eCwgcGF0aCkge1xyXG4gICAgY29uc3Qgc2VnbWVudHMgPSBwYXRoLnNwbGl0KCcuJyk7XHJcbiAgICByZXR1cm4gKCkgPT4ge1xyXG4gICAgICAgIGxldCBjdXIgPSBjdHg7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZWdtZW50cy5sZW5ndGggJiYgY3VyOyBpKyspIHtcclxuICAgICAgICAgICAgY3VyID0gY3VyW3NlZ21lbnRzW2ldXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGN1cjtcclxuICAgIH07XHJcbn1cclxuZnVuY3Rpb24gcmVzb2x2ZU1lcmdlZE9wdGlvbnMoaW5zdGFuY2UpIHtcclxuICAgIGNvbnN0IHJhdyA9IGluc3RhbmNlLnR5cGU7XHJcbiAgICBjb25zdCB7IF9fbWVyZ2VkLCBtaXhpbnMsIGV4dGVuZHM6IGV4dGVuZHNPcHRpb25zIH0gPSByYXc7XHJcbiAgICBpZiAoX19tZXJnZWQpXHJcbiAgICAgICAgcmV0dXJuIF9fbWVyZ2VkO1xyXG4gICAgY29uc3QgZ2xvYmFsTWl4aW5zID0gaW5zdGFuY2UuYXBwQ29udGV4dC5taXhpbnM7XHJcbiAgICBpZiAoIWdsb2JhbE1peGlucy5sZW5ndGggJiYgIW1peGlucyAmJiAhZXh0ZW5kc09wdGlvbnMpXHJcbiAgICAgICAgcmV0dXJuIHJhdztcclxuICAgIGNvbnN0IG9wdGlvbnMgPSB7fTtcclxuICAgIGdsb2JhbE1peGlucy5mb3JFYWNoKG0gPT4gbWVyZ2VPcHRpb25zKG9wdGlvbnMsIG0sIGluc3RhbmNlKSk7XHJcbiAgICBtZXJnZU9wdGlvbnMob3B0aW9ucywgcmF3LCBpbnN0YW5jZSk7XHJcbiAgICByZXR1cm4gKHJhdy5fX21lcmdlZCA9IG9wdGlvbnMpO1xyXG59XHJcbmZ1bmN0aW9uIG1lcmdlT3B0aW9ucyh0bywgZnJvbSwgaW5zdGFuY2UpIHtcclxuICAgIGNvbnN0IHN0cmF0cyA9IGluc3RhbmNlLmFwcENvbnRleHQuY29uZmlnLm9wdGlvbk1lcmdlU3RyYXRlZ2llcztcclxuICAgIGNvbnN0IHsgbWl4aW5zLCBleHRlbmRzOiBleHRlbmRzT3B0aW9ucyB9ID0gZnJvbTtcclxuICAgIGV4dGVuZHNPcHRpb25zICYmIG1lcmdlT3B0aW9ucyh0bywgZXh0ZW5kc09wdGlvbnMsIGluc3RhbmNlKTtcclxuICAgIG1peGlucyAmJlxyXG4gICAgICAgIG1peGlucy5mb3JFYWNoKChtKSA9PiBtZXJnZU9wdGlvbnModG8sIG0sIGluc3RhbmNlKSk7XHJcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBmcm9tKSB7XHJcbiAgICAgICAgaWYgKHN0cmF0cyAmJiBoYXNPd24oc3RyYXRzLCBrZXkpKSB7XHJcbiAgICAgICAgICAgIHRvW2tleV0gPSBzdHJhdHNba2V5XSh0b1trZXldLCBmcm9tW2tleV0sIGluc3RhbmNlLnByb3h5LCBrZXkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdG9ba2V5XSA9IGZyb21ba2V5XTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cblxuLyoqXHJcbiAqICMyNDM3IEluIFZ1ZSAzLCBmdW5jdGlvbmFsIGNvbXBvbmVudHMgZG8gbm90IGhhdmUgYSBwdWJsaWMgaW5zdGFuY2UgcHJveHkgYnV0XHJcbiAqIHRoZXkgZXhpc3QgaW4gdGhlIGludGVybmFsIHBhcmVudCBjaGFpbi4gRm9yIGNvZGUgdGhhdCByZWxpZXMgb24gdHJhdmVyc2luZ1xyXG4gKiBwdWJsaWMgJHBhcmVudCBjaGFpbnMsIHNraXAgZnVuY3Rpb25hbCBvbmVzIGFuZCBnbyB0byB0aGUgcGFyZW50IGluc3RlYWQuXHJcbiAqL1xyXG5jb25zdCBnZXRQdWJsaWNJbnN0YW5jZSA9IChpKSA9PiBpICYmIChpLnByb3h5ID8gaS5wcm94eSA6IGdldFB1YmxpY0luc3RhbmNlKGkucGFyZW50KSk7XHJcbmNvbnN0IHB1YmxpY1Byb3BlcnRpZXNNYXAgPSBleHRlbmQoT2JqZWN0LmNyZWF0ZShudWxsKSwge1xyXG4gICAgJDogaSA9PiBpLFxyXG4gICAgJGVsOiBpID0+IGkudm5vZGUuZWwsXHJcbiAgICAkZGF0YTogaSA9PiBpLmRhdGEsXHJcbiAgICAkcHJvcHM6IGkgPT4gKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSA/IHNoYWxsb3dSZWFkb25seShpLnByb3BzKSA6IGkucHJvcHMpLFxyXG4gICAgJGF0dHJzOiBpID0+ICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgPyBzaGFsbG93UmVhZG9ubHkoaS5hdHRycykgOiBpLmF0dHJzKSxcclxuICAgICRzbG90czogaSA9PiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpID8gc2hhbGxvd1JlYWRvbmx5KGkuc2xvdHMpIDogaS5zbG90cyksXHJcbiAgICAkcmVmczogaSA9PiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpID8gc2hhbGxvd1JlYWRvbmx5KGkucmVmcykgOiBpLnJlZnMpLFxyXG4gICAgJHBhcmVudDogaSA9PiBnZXRQdWJsaWNJbnN0YW5jZShpLnBhcmVudCksXHJcbiAgICAkcm9vdDogaSA9PiBpLnJvb3QgJiYgaS5yb290LnByb3h5LFxyXG4gICAgJGVtaXQ6IGkgPT4gaS5lbWl0LFxyXG4gICAgJG9wdGlvbnM6IGkgPT4gKF9fVlVFX09QVElPTlNfQVBJX18gPyByZXNvbHZlTWVyZ2VkT3B0aW9ucyhpKSA6IGkudHlwZSksXHJcbiAgICAkZm9yY2VVcGRhdGU6IGkgPT4gKCkgPT4gcXVldWVKb2IoaS51cGRhdGUpLFxyXG4gICAgJG5leHRUaWNrOiBpID0+IG5leHRUaWNrLmJpbmQoaS5wcm94eSksXHJcbiAgICAkd2F0Y2g6IGkgPT4gKF9fVlVFX09QVElPTlNfQVBJX18gPyBpbnN0YW5jZVdhdGNoLmJpbmQoaSkgOiBOT09QKVxyXG59KTtcclxuY29uc3QgUHVibGljSW5zdGFuY2VQcm94eUhhbmRsZXJzID0ge1xyXG4gICAgZ2V0KHsgXzogaW5zdGFuY2UgfSwga2V5KSB7XHJcbiAgICAgICAgY29uc3QgeyBjdHgsIHNldHVwU3RhdGUsIGRhdGEsIHByb3BzLCBhY2Nlc3NDYWNoZSwgdHlwZSwgYXBwQ29udGV4dCB9ID0gaW5zdGFuY2U7XHJcbiAgICAgICAgLy8gbGV0IEB2dWUvcmVhY3Rpdml0eSBrbm93IGl0IHNob3VsZCBuZXZlciBvYnNlcnZlIFZ1ZSBwdWJsaWMgaW5zdGFuY2VzLlxyXG4gICAgICAgIGlmIChrZXkgPT09IFwiX192X3NraXBcIiAvKiBTS0lQICovKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBmb3IgaW50ZXJuYWwgZm9ybWF0dGVycyB0byBrbm93IHRoYXQgdGhpcyBpcyBhIFZ1ZSBpbnN0YW5jZVxyXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYga2V5ID09PSAnX19pc1Z1ZScpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGRhdGEgLyBwcm9wcyAvIGN0eFxyXG4gICAgICAgIC8vIFRoaXMgZ2V0dGVyIGdldHMgY2FsbGVkIGZvciBldmVyeSBwcm9wZXJ0eSBhY2Nlc3Mgb24gdGhlIHJlbmRlciBjb250ZXh0XHJcbiAgICAgICAgLy8gZHVyaW5nIHJlbmRlciBhbmQgaXMgYSBtYWpvciBob3RzcG90LiBUaGUgbW9zdCBleHBlbnNpdmUgcGFydCBvZiB0aGlzXHJcbiAgICAgICAgLy8gaXMgdGhlIG11bHRpcGxlIGhhc093bigpIGNhbGxzLiBJdCdzIG11Y2ggZmFzdGVyIHRvIGRvIGEgc2ltcGxlIHByb3BlcnR5XHJcbiAgICAgICAgLy8gYWNjZXNzIG9uIGEgcGxhaW4gb2JqZWN0LCBzbyB3ZSB1c2UgYW4gYWNjZXNzQ2FjaGUgb2JqZWN0ICh3aXRoIG51bGxcclxuICAgICAgICAvLyBwcm90b3R5cGUpIHRvIG1lbW9pemUgd2hhdCBhY2Nlc3MgdHlwZSBhIGtleSBjb3JyZXNwb25kcyB0by5cclxuICAgICAgICBsZXQgbm9ybWFsaXplZFByb3BzO1xyXG4gICAgICAgIGlmIChrZXlbMF0gIT09ICckJykge1xyXG4gICAgICAgICAgICBjb25zdCBuID0gYWNjZXNzQ2FjaGVba2V5XTtcclxuICAgICAgICAgICAgaWYgKG4gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwIC8qIFNFVFVQICovOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2V0dXBTdGF0ZVtrZXldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMSAvKiBEQVRBICovOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF0YVtrZXldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMyAvKiBDT05URVhUICovOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3R4W2tleV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyIC8qIFBST1BTICovOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJvcHNba2V5XTtcclxuICAgICAgICAgICAgICAgICAgICAvLyBkZWZhdWx0OiBqdXN0IGZhbGx0aHJvdWdoXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoc2V0dXBTdGF0ZSAhPT0gRU1QVFlfT0JKICYmIGhhc093bihzZXR1cFN0YXRlLCBrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICBhY2Nlc3NDYWNoZVtrZXldID0gMCAvKiBTRVRVUCAqLztcclxuICAgICAgICAgICAgICAgIHJldHVybiBzZXR1cFN0YXRlW2tleV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoZGF0YSAhPT0gRU1QVFlfT0JKICYmIGhhc093bihkYXRhLCBrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICBhY2Nlc3NDYWNoZVtrZXldID0gMSAvKiBEQVRBICovO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGFba2V5XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChcclxuICAgICAgICAgICAgLy8gb25seSBjYWNoZSBvdGhlciBwcm9wZXJ0aWVzIHdoZW4gaW5zdGFuY2UgaGFzIGRlY2xhcmVkICh0aHVzIHN0YWJsZSlcclxuICAgICAgICAgICAgLy8gcHJvcHNcclxuICAgICAgICAgICAgKG5vcm1hbGl6ZWRQcm9wcyA9IGluc3RhbmNlLnByb3BzT3B0aW9uc1swXSkgJiZcclxuICAgICAgICAgICAgICAgIGhhc093bihub3JtYWxpemVkUHJvcHMsIGtleSkpIHtcclxuICAgICAgICAgICAgICAgIGFjY2Vzc0NhY2hlW2tleV0gPSAyIC8qIFBST1BTICovO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHByb3BzW2tleV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoY3R4ICE9PSBFTVBUWV9PQkogJiYgaGFzT3duKGN0eCwga2V5KSkge1xyXG4gICAgICAgICAgICAgICAgYWNjZXNzQ2FjaGVba2V5XSA9IDMgLyogQ09OVEVYVCAqLztcclxuICAgICAgICAgICAgICAgIHJldHVybiBjdHhba2V5XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICghX19WVUVfT1BUSU9OU19BUElfXyB8fCAhaXNJbkJlZm9yZUNyZWF0ZSkge1xyXG4gICAgICAgICAgICAgICAgYWNjZXNzQ2FjaGVba2V5XSA9IDQgLyogT1RIRVIgKi87XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgcHVibGljR2V0dGVyID0gcHVibGljUHJvcGVydGllc01hcFtrZXldO1xyXG4gICAgICAgIGxldCBjc3NNb2R1bGUsIGdsb2JhbFByb3BlcnRpZXM7XHJcbiAgICAgICAgLy8gcHVibGljICR4eHggcHJvcGVydGllc1xyXG4gICAgICAgIGlmIChwdWJsaWNHZXR0ZXIpIHtcclxuICAgICAgICAgICAgaWYgKGtleSA9PT0gJyRhdHRycycpIHtcclxuICAgICAgICAgICAgICAgIHRyYWNrKGluc3RhbmNlLCBcImdldFwiIC8qIEdFVCAqLywga2V5KTtcclxuICAgICAgICAgICAgICAgIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBtYXJrQXR0cnNBY2Nlc3NlZCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBwdWJsaWNHZXR0ZXIoaW5zdGFuY2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChcclxuICAgICAgICAvLyBjc3MgbW9kdWxlIChpbmplY3RlZCBieSB2dWUtbG9hZGVyKVxyXG4gICAgICAgIChjc3NNb2R1bGUgPSB0eXBlLl9fY3NzTW9kdWxlcykgJiZcclxuICAgICAgICAgICAgKGNzc01vZHVsZSA9IGNzc01vZHVsZVtrZXldKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gY3NzTW9kdWxlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChjdHggIT09IEVNUFRZX09CSiAmJiBoYXNPd24oY3R4LCBrZXkpKSB7XHJcbiAgICAgICAgICAgIC8vIHVzZXIgbWF5IHNldCBjdXN0b20gcHJvcGVydGllcyB0byBgdGhpc2AgdGhhdCBzdGFydCB3aXRoIGAkYFxyXG4gICAgICAgICAgICBhY2Nlc3NDYWNoZVtrZXldID0gMyAvKiBDT05URVhUICovO1xyXG4gICAgICAgICAgICByZXR1cm4gY3R4W2tleV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKFxyXG4gICAgICAgIC8vIGdsb2JhbCBwcm9wZXJ0aWVzXHJcbiAgICAgICAgKChnbG9iYWxQcm9wZXJ0aWVzID0gYXBwQ29udGV4dC5jb25maWcuZ2xvYmFsUHJvcGVydGllcyksXHJcbiAgICAgICAgICAgIGhhc093bihnbG9iYWxQcm9wZXJ0aWVzLCBrZXkpKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZ2xvYmFsUHJvcGVydGllc1trZXldO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiZcclxuICAgICAgICAgICAgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlICYmXHJcbiAgICAgICAgICAgICghaXNTdHJpbmcoa2V5KSB8fFxyXG4gICAgICAgICAgICAgICAgLy8gIzEwOTEgYXZvaWQgaW50ZXJuYWwgaXNSZWYvaXNWTm9kZSBjaGVja3Mgb24gY29tcG9uZW50IGluc3RhbmNlIGxlYWRpbmdcclxuICAgICAgICAgICAgICAgIC8vIHRvIGluZmluaXRlIHdhcm5pbmcgbG9vcFxyXG4gICAgICAgICAgICAgICAga2V5LmluZGV4T2YoJ19fdicpICE9PSAwKSkge1xyXG4gICAgICAgICAgICBpZiAoZGF0YSAhPT0gRU1QVFlfT0JKICYmXHJcbiAgICAgICAgICAgICAgICAoa2V5WzBdID09PSAnJCcgfHwga2V5WzBdID09PSAnXycpICYmXHJcbiAgICAgICAgICAgICAgICBoYXNPd24oZGF0YSwga2V5KSkge1xyXG4gICAgICAgICAgICAgICAgd2FybihgUHJvcGVydHkgJHtKU09OLnN0cmluZ2lmeShrZXkpfSBtdXN0IGJlIGFjY2Vzc2VkIHZpYSAkZGF0YSBiZWNhdXNlIGl0IHN0YXJ0cyB3aXRoIGEgcmVzZXJ2ZWQgYCArXHJcbiAgICAgICAgICAgICAgICAgICAgYGNoYXJhY3RlciAoXCIkXCIgb3IgXCJfXCIpIGFuZCBpcyBub3QgcHJveGllZCBvbiB0aGUgcmVuZGVyIGNvbnRleHQuYCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB3YXJuKGBQcm9wZXJ0eSAke0pTT04uc3RyaW5naWZ5KGtleSl9IHdhcyBhY2Nlc3NlZCBkdXJpbmcgcmVuZGVyIGAgK1xyXG4gICAgICAgICAgICAgICAgICAgIGBidXQgaXMgbm90IGRlZmluZWQgb24gaW5zdGFuY2UuYCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgc2V0KHsgXzogaW5zdGFuY2UgfSwga2V5LCB2YWx1ZSkge1xyXG4gICAgICAgIGNvbnN0IHsgZGF0YSwgc2V0dXBTdGF0ZSwgY3R4IH0gPSBpbnN0YW5jZTtcclxuICAgICAgICBpZiAoc2V0dXBTdGF0ZSAhPT0gRU1QVFlfT0JKICYmIGhhc093bihzZXR1cFN0YXRlLCBrZXkpKSB7XHJcbiAgICAgICAgICAgIHNldHVwU3RhdGVba2V5XSA9IHZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChkYXRhICE9PSBFTVBUWV9PQkogJiYgaGFzT3duKGRhdGEsIGtleSkpIHtcclxuICAgICAgICAgICAgZGF0YVtrZXldID0gdmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGtleSBpbiBpbnN0YW5jZS5wcm9wcykge1xyXG4gICAgICAgICAgICAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiZcclxuICAgICAgICAgICAgICAgIHdhcm4oYEF0dGVtcHRpbmcgdG8gbXV0YXRlIHByb3AgXCIke2tleX1cIi4gUHJvcHMgYXJlIHJlYWRvbmx5LmAsIGluc3RhbmNlKTtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoa2V5WzBdID09PSAnJCcgJiYga2V5LnNsaWNlKDEpIGluIGluc3RhbmNlKSB7XHJcbiAgICAgICAgICAgIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJlxyXG4gICAgICAgICAgICAgICAgd2FybihgQXR0ZW1wdGluZyB0byBtdXRhdGUgcHVibGljIHByb3BlcnR5IFwiJHtrZXl9XCIuIGAgK1xyXG4gICAgICAgICAgICAgICAgICAgIGBQcm9wZXJ0aWVzIHN0YXJ0aW5nIHdpdGggJCBhcmUgcmVzZXJ2ZWQgYW5kIHJlYWRvbmx5LmAsIGluc3RhbmNlKTtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBrZXkgaW4gaW5zdGFuY2UuYXBwQ29udGV4dC5jb25maWcuZ2xvYmFsUHJvcGVydGllcykge1xyXG4gICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGN0eCwga2V5LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY3R4W2tleV0gPSB2YWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH0sXHJcbiAgICBoYXMoeyBfOiB7IGRhdGEsIHNldHVwU3RhdGUsIGFjY2Vzc0NhY2hlLCBjdHgsIGFwcENvbnRleHQsIHByb3BzT3B0aW9ucyB9IH0sIGtleSkge1xyXG4gICAgICAgIGxldCBub3JtYWxpemVkUHJvcHM7XHJcbiAgICAgICAgcmV0dXJuIChhY2Nlc3NDYWNoZVtrZXldICE9PSB1bmRlZmluZWQgfHxcclxuICAgICAgICAgICAgKGRhdGEgIT09IEVNUFRZX09CSiAmJiBoYXNPd24oZGF0YSwga2V5KSkgfHxcclxuICAgICAgICAgICAgKHNldHVwU3RhdGUgIT09IEVNUFRZX09CSiAmJiBoYXNPd24oc2V0dXBTdGF0ZSwga2V5KSkgfHxcclxuICAgICAgICAgICAgKChub3JtYWxpemVkUHJvcHMgPSBwcm9wc09wdGlvbnNbMF0pICYmIGhhc093bihub3JtYWxpemVkUHJvcHMsIGtleSkpIHx8XHJcbiAgICAgICAgICAgIGhhc093bihjdHgsIGtleSkgfHxcclxuICAgICAgICAgICAgaGFzT3duKHB1YmxpY1Byb3BlcnRpZXNNYXAsIGtleSkgfHxcclxuICAgICAgICAgICAgaGFzT3duKGFwcENvbnRleHQuY29uZmlnLmdsb2JhbFByb3BlcnRpZXMsIGtleSkpO1xyXG4gICAgfVxyXG59O1xyXG5pZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFmYWxzZSkge1xyXG4gICAgUHVibGljSW5zdGFuY2VQcm94eUhhbmRsZXJzLm93bktleXMgPSAodGFyZ2V0KSA9PiB7XHJcbiAgICAgICAgd2FybihgQXZvaWQgYXBwIGxvZ2ljIHRoYXQgcmVsaWVzIG9uIGVudW1lcmF0aW5nIGtleXMgb24gYSBjb21wb25lbnQgaW5zdGFuY2UuIGAgK1xyXG4gICAgICAgICAgICBgVGhlIGtleXMgd2lsbCBiZSBlbXB0eSBpbiBwcm9kdWN0aW9uIG1vZGUgdG8gYXZvaWQgcGVyZm9ybWFuY2Ugb3ZlcmhlYWQuYCk7XHJcbiAgICAgICAgcmV0dXJuIFJlZmxlY3Qub3duS2V5cyh0YXJnZXQpO1xyXG4gICAgfTtcclxufVxyXG5jb25zdCBSdW50aW1lQ29tcGlsZWRQdWJsaWNJbnN0YW5jZVByb3h5SGFuZGxlcnMgPSBleHRlbmQoe30sIFB1YmxpY0luc3RhbmNlUHJveHlIYW5kbGVycywge1xyXG4gICAgZ2V0KHRhcmdldCwga2V5KSB7XHJcbiAgICAgICAgLy8gZmFzdCBwYXRoIGZvciB1bnNjb3BhYmxlcyB3aGVuIHVzaW5nIGB3aXRoYCBibG9ja1xyXG4gICAgICAgIGlmIChrZXkgPT09IFN5bWJvbC51bnNjb3BhYmxlcykge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBQdWJsaWNJbnN0YW5jZVByb3h5SGFuZGxlcnMuZ2V0KHRhcmdldCwga2V5LCB0YXJnZXQpO1xyXG4gICAgfSxcclxuICAgIGhhcyhfLCBrZXkpIHtcclxuICAgICAgICBjb25zdCBoYXMgPSBrZXlbMF0gIT09ICdfJyAmJiAhaXNHbG9iYWxseVdoaXRlbGlzdGVkKGtleSk7XHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhaGFzICYmIFB1YmxpY0luc3RhbmNlUHJveHlIYW5kbGVycy5oYXMoXywga2V5KSkge1xyXG4gICAgICAgICAgICB3YXJuKGBQcm9wZXJ0eSAke0pTT04uc3RyaW5naWZ5KGtleSl9IHNob3VsZCBub3Qgc3RhcnQgd2l0aCBfIHdoaWNoIGlzIGEgcmVzZXJ2ZWQgcHJlZml4IGZvciBWdWUgaW50ZXJuYWxzLmApO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gaGFzO1xyXG4gICAgfVxyXG59KTtcclxuLy8gSW4gZGV2IG1vZGUsIHRoZSBwcm94eSB0YXJnZXQgZXhwb3NlcyB0aGUgc2FtZSBwcm9wZXJ0aWVzIGFzIHNlZW4gb24gYHRoaXNgXHJcbi8vIGZvciBlYXNpZXIgY29uc29sZSBpbnNwZWN0aW9uLiBJbiBwcm9kIG1vZGUgaXQgd2lsbCBiZSBhbiBlbXB0eSBvYmplY3Qgc29cclxuLy8gdGhlc2UgcHJvcGVydGllcyBkZWZpbml0aW9ucyBjYW4gYmUgc2tpcHBlZC5cclxuZnVuY3Rpb24gY3JlYXRlUmVuZGVyQ29udGV4dChpbnN0YW5jZSkge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0ge307XHJcbiAgICAvLyBleHBvc2UgaW50ZXJuYWwgaW5zdGFuY2UgZm9yIHByb3h5IGhhbmRsZXJzXHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBgX2AsIHtcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgZ2V0OiAoKSA9PiBpbnN0YW5jZVxyXG4gICAgfSk7XHJcbiAgICAvLyBleHBvc2UgcHVibGljIHByb3BlcnRpZXNcclxuICAgIE9iamVjdC5rZXlzKHB1YmxpY1Byb3BlcnRpZXNNYXApLmZvckVhY2goa2V5ID0+IHtcclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHtcclxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICAgICAgZ2V0OiAoKSA9PiBwdWJsaWNQcm9wZXJ0aWVzTWFwW2tleV0oaW5zdGFuY2UpLFxyXG4gICAgICAgICAgICAvLyBpbnRlcmNlcHRlZCBieSB0aGUgcHJveHkgc28gbm8gbmVlZCBmb3IgaW1wbGVtZW50YXRpb24sXHJcbiAgICAgICAgICAgIC8vIGJ1dCBuZWVkZWQgdG8gcHJldmVudCBzZXQgZXJyb3JzXHJcbiAgICAgICAgICAgIHNldDogTk9PUFxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgICAvLyBleHBvc2UgZ2xvYmFsIHByb3BlcnRpZXNcclxuICAgIGNvbnN0IHsgZ2xvYmFsUHJvcGVydGllcyB9ID0gaW5zdGFuY2UuYXBwQ29udGV4dC5jb25maWc7XHJcbiAgICBPYmplY3Qua2V5cyhnbG9iYWxQcm9wZXJ0aWVzKS5mb3JFYWNoKGtleSA9PiB7XHJcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCB7XHJcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgICAgIGdldDogKCkgPT4gZ2xvYmFsUHJvcGVydGllc1trZXldLFxyXG4gICAgICAgICAgICBzZXQ6IE5PT1BcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHRhcmdldDtcclxufVxyXG4vLyBkZXYgb25seVxyXG5mdW5jdGlvbiBleHBvc2VQcm9wc09uUmVuZGVyQ29udGV4dChpbnN0YW5jZSkge1xyXG4gICAgY29uc3QgeyBjdHgsIHByb3BzT3B0aW9uczogW3Byb3BzT3B0aW9uc10gfSA9IGluc3RhbmNlO1xyXG4gICAgaWYgKHByb3BzT3B0aW9ucykge1xyXG4gICAgICAgIE9iamVjdC5rZXlzKHByb3BzT3B0aW9ucykuZm9yRWFjaChrZXkgPT4ge1xyXG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3R4LCBrZXksIHtcclxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBnZXQ6ICgpID0+IGluc3RhbmNlLnByb3BzW2tleV0sXHJcbiAgICAgICAgICAgICAgICBzZXQ6IE5PT1BcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuLy8gZGV2IG9ubHlcclxuZnVuY3Rpb24gZXhwb3NlU2V0dXBTdGF0ZU9uUmVuZGVyQ29udGV4dChpbnN0YW5jZSkge1xyXG4gICAgY29uc3QgeyBjdHgsIHNldHVwU3RhdGUgfSA9IGluc3RhbmNlO1xyXG4gICAgT2JqZWN0LmtleXModG9SYXcoc2V0dXBTdGF0ZSkpLmZvckVhY2goa2V5ID0+IHtcclxuICAgICAgICBpZiAoa2V5WzBdID09PSAnJCcgfHwga2V5WzBdID09PSAnXycpIHtcclxuICAgICAgICAgICAgd2Fybihgc2V0dXAoKSByZXR1cm4gcHJvcGVydHkgJHtKU09OLnN0cmluZ2lmeShrZXkpfSBzaG91bGQgbm90IHN0YXJ0IHdpdGggXCIkXCIgb3IgXCJfXCIgYCArXHJcbiAgICAgICAgICAgICAgICBgd2hpY2ggYXJlIHJlc2VydmVkIHByZWZpeGVzIGZvciBWdWUgaW50ZXJuYWxzLmApO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjdHgsIGtleSwge1xyXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIGdldDogKCkgPT4gc2V0dXBTdGF0ZVtrZXldLFxyXG4gICAgICAgICAgICBzZXQ6IE5PT1BcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XG5cbmNvbnN0IGVtcHR5QXBwQ29udGV4dCA9IGNyZWF0ZUFwcENvbnRleHQoKTtcclxubGV0IHVpZCQxID0gMDtcclxuZnVuY3Rpb24gY3JlYXRlQ29tcG9uZW50SW5zdGFuY2Uodm5vZGUsIHBhcmVudCwgc3VzcGVuc2UpIHtcclxuICAgIGNvbnN0IHR5cGUgPSB2bm9kZS50eXBlO1xyXG4gICAgLy8gaW5oZXJpdCBwYXJlbnQgYXBwIGNvbnRleHQgLSBvciAtIGlmIHJvb3QsIGFkb3B0IGZyb20gcm9vdCB2bm9kZVxyXG4gICAgY29uc3QgYXBwQ29udGV4dCA9IChwYXJlbnQgPyBwYXJlbnQuYXBwQ29udGV4dCA6IHZub2RlLmFwcENvbnRleHQpIHx8IGVtcHR5QXBwQ29udGV4dDtcclxuICAgIGNvbnN0IGluc3RhbmNlID0ge1xyXG4gICAgICAgIHVpZDogdWlkJDErKyxcclxuICAgICAgICB2bm9kZSxcclxuICAgICAgICB0eXBlLFxyXG4gICAgICAgIHBhcmVudCxcclxuICAgICAgICBhcHBDb250ZXh0LFxyXG4gICAgICAgIHJvb3Q6IG51bGwsXHJcbiAgICAgICAgbmV4dDogbnVsbCxcclxuICAgICAgICBzdWJUcmVlOiBudWxsLFxyXG4gICAgICAgIHVwZGF0ZTogbnVsbCxcclxuICAgICAgICByZW5kZXI6IG51bGwsXHJcbiAgICAgICAgcHJveHk6IG51bGwsXHJcbiAgICAgICAgZXhwb3NlZDogbnVsbCxcclxuICAgICAgICB3aXRoUHJveHk6IG51bGwsXHJcbiAgICAgICAgZWZmZWN0czogbnVsbCxcclxuICAgICAgICBwcm92aWRlczogcGFyZW50ID8gcGFyZW50LnByb3ZpZGVzIDogT2JqZWN0LmNyZWF0ZShhcHBDb250ZXh0LnByb3ZpZGVzKSxcclxuICAgICAgICBhY2Nlc3NDYWNoZTogbnVsbCxcclxuICAgICAgICByZW5kZXJDYWNoZTogW10sXHJcbiAgICAgICAgLy8gbG9jYWwgcmVzb3ZsZWQgYXNzZXRzXHJcbiAgICAgICAgY29tcG9uZW50czogbnVsbCxcclxuICAgICAgICBkaXJlY3RpdmVzOiBudWxsLFxyXG4gICAgICAgIC8vIHJlc29sdmVkIHByb3BzIGFuZCBlbWl0cyBvcHRpb25zXHJcbiAgICAgICAgcHJvcHNPcHRpb25zOiBub3JtYWxpemVQcm9wc09wdGlvbnModHlwZSwgYXBwQ29udGV4dCksXHJcbiAgICAgICAgZW1pdHNPcHRpb25zOiBub3JtYWxpemVFbWl0c09wdGlvbnModHlwZSwgYXBwQ29udGV4dCksXHJcbiAgICAgICAgLy8gZW1pdFxyXG4gICAgICAgIGVtaXQ6IG51bGwsXHJcbiAgICAgICAgZW1pdHRlZDogbnVsbCxcclxuICAgICAgICAvLyBzdGF0ZVxyXG4gICAgICAgIGN0eDogRU1QVFlfT0JKLFxyXG4gICAgICAgIGRhdGE6IEVNUFRZX09CSixcclxuICAgICAgICBwcm9wczogRU1QVFlfT0JKLFxyXG4gICAgICAgIGF0dHJzOiBFTVBUWV9PQkosXHJcbiAgICAgICAgc2xvdHM6IEVNUFRZX09CSixcclxuICAgICAgICByZWZzOiBFTVBUWV9PQkosXHJcbiAgICAgICAgc2V0dXBTdGF0ZTogRU1QVFlfT0JKLFxyXG4gICAgICAgIHNldHVwQ29udGV4dDogbnVsbCxcclxuICAgICAgICAvLyBzdXNwZW5zZSByZWxhdGVkXHJcbiAgICAgICAgc3VzcGVuc2UsXHJcbiAgICAgICAgc3VzcGVuc2VJZDogc3VzcGVuc2UgPyBzdXNwZW5zZS5wZW5kaW5nSWQgOiAwLFxyXG4gICAgICAgIGFzeW5jRGVwOiBudWxsLFxyXG4gICAgICAgIGFzeW5jUmVzb2x2ZWQ6IGZhbHNlLFxyXG4gICAgICAgIC8vIGxpZmVjeWNsZSBob29rc1xyXG4gICAgICAgIC8vIG5vdCB1c2luZyBlbnVtcyBoZXJlIGJlY2F1c2UgaXQgcmVzdWx0cyBpbiBjb21wdXRlZCBwcm9wZXJ0aWVzXHJcbiAgICAgICAgaXNNb3VudGVkOiBmYWxzZSxcclxuICAgICAgICBpc1VubW91bnRlZDogZmFsc2UsXHJcbiAgICAgICAgaXNEZWFjdGl2YXRlZDogZmFsc2UsXHJcbiAgICAgICAgYmM6IG51bGwsXHJcbiAgICAgICAgYzogbnVsbCxcclxuICAgICAgICBibTogbnVsbCxcclxuICAgICAgICBtOiBudWxsLFxyXG4gICAgICAgIGJ1OiBudWxsLFxyXG4gICAgICAgIHU6IG51bGwsXHJcbiAgICAgICAgdW06IG51bGwsXHJcbiAgICAgICAgYnVtOiBudWxsLFxyXG4gICAgICAgIGRhOiBudWxsLFxyXG4gICAgICAgIGE6IG51bGwsXHJcbiAgICAgICAgcnRnOiBudWxsLFxyXG4gICAgICAgIHJ0YzogbnVsbCxcclxuICAgICAgICBlYzogbnVsbFxyXG4gICAgfTtcclxuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICBpbnN0YW5jZS5jdHggPSBjcmVhdGVSZW5kZXJDb250ZXh0KGluc3RhbmNlKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGluc3RhbmNlLmN0eCA9IHsgXzogaW5zdGFuY2UgfTtcclxuICAgIH1cclxuICAgIGluc3RhbmNlLnJvb3QgPSBwYXJlbnQgPyBwYXJlbnQucm9vdCA6IGluc3RhbmNlO1xyXG4gICAgaW5zdGFuY2UuZW1pdCA9IGVtaXQuYmluZChudWxsLCBpbnN0YW5jZSk7XHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHx8IF9fVlVFX1BST0RfREVWVE9PTFNfXykge1xyXG4gICAgICAgIGRldnRvb2xzQ29tcG9uZW50QWRkZWQoaW5zdGFuY2UpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGluc3RhbmNlO1xyXG59XHJcbmxldCBjdXJyZW50SW5zdGFuY2UgPSBudWxsO1xyXG5jb25zdCBnZXRDdXJyZW50SW5zdGFuY2UgPSAoKSA9PiBjdXJyZW50SW5zdGFuY2UgfHwgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlO1xyXG5jb25zdCBzZXRDdXJyZW50SW5zdGFuY2UgPSAoaW5zdGFuY2UpID0+IHtcclxuICAgIGN1cnJlbnRJbnN0YW5jZSA9IGluc3RhbmNlO1xyXG59O1xyXG5jb25zdCBpc0J1aWx0SW5UYWcgPSAvKiNfX1BVUkVfXyovIG1ha2VNYXAoJ3Nsb3QsY29tcG9uZW50Jyk7XHJcbmZ1bmN0aW9uIHZhbGlkYXRlQ29tcG9uZW50TmFtZShuYW1lLCBjb25maWcpIHtcclxuICAgIGNvbnN0IGFwcElzTmF0aXZlVGFnID0gY29uZmlnLmlzTmF0aXZlVGFnIHx8IE5PO1xyXG4gICAgaWYgKGlzQnVpbHRJblRhZyhuYW1lKSB8fCBhcHBJc05hdGl2ZVRhZyhuYW1lKSkge1xyXG4gICAgICAgIHdhcm4oJ0RvIG5vdCB1c2UgYnVpbHQtaW4gb3IgcmVzZXJ2ZWQgSFRNTCBlbGVtZW50cyBhcyBjb21wb25lbnQgaWQ6ICcgKyBuYW1lKTtcclxuICAgIH1cclxufVxyXG5sZXQgaXNJblNTUkNvbXBvbmVudFNldHVwID0gZmFsc2U7XHJcbmZ1bmN0aW9uIHNldHVwQ29tcG9uZW50KGluc3RhbmNlLCBpc1NTUiA9IGZhbHNlKSB7XHJcbiAgICBpc0luU1NSQ29tcG9uZW50U2V0dXAgPSBpc1NTUjtcclxuICAgIGNvbnN0IHsgcHJvcHMsIGNoaWxkcmVuLCBzaGFwZUZsYWcgfSA9IGluc3RhbmNlLnZub2RlO1xyXG4gICAgY29uc3QgaXNTdGF0ZWZ1bCA9IHNoYXBlRmxhZyAmIDQgLyogU1RBVEVGVUxfQ09NUE9ORU5UICovO1xyXG4gICAgaW5pdFByb3BzKGluc3RhbmNlLCBwcm9wcywgaXNTdGF0ZWZ1bCwgaXNTU1IpO1xyXG4gICAgaW5pdFNsb3RzKGluc3RhbmNlLCBjaGlsZHJlbik7XHJcbiAgICBjb25zdCBzZXR1cFJlc3VsdCA9IGlzU3RhdGVmdWxcclxuICAgICAgICA/IHNldHVwU3RhdGVmdWxDb21wb25lbnQoaW5zdGFuY2UsIGlzU1NSKVxyXG4gICAgICAgIDogdW5kZWZpbmVkO1xyXG4gICAgaXNJblNTUkNvbXBvbmVudFNldHVwID0gZmFsc2U7XHJcbiAgICByZXR1cm4gc2V0dXBSZXN1bHQ7XHJcbn1cclxuZnVuY3Rpb24gc2V0dXBTdGF0ZWZ1bENvbXBvbmVudChpbnN0YW5jZSwgaXNTU1IpIHtcclxuICAgIGNvbnN0IENvbXBvbmVudCA9IGluc3RhbmNlLnR5cGU7XHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgaWYgKENvbXBvbmVudC5uYW1lKSB7XHJcbiAgICAgICAgICAgIHZhbGlkYXRlQ29tcG9uZW50TmFtZShDb21wb25lbnQubmFtZSwgaW5zdGFuY2UuYXBwQ29udGV4dC5jb25maWcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoQ29tcG9uZW50LmNvbXBvbmVudHMpIHtcclxuICAgICAgICAgICAgY29uc3QgbmFtZXMgPSBPYmplY3Qua2V5cyhDb21wb25lbnQuY29tcG9uZW50cyk7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbmFtZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHZhbGlkYXRlQ29tcG9uZW50TmFtZShuYW1lc1tpXSwgaW5zdGFuY2UuYXBwQ29udGV4dC5jb25maWcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChDb21wb25lbnQuZGlyZWN0aXZlcykge1xyXG4gICAgICAgICAgICBjb25zdCBuYW1lcyA9IE9iamVjdC5rZXlzKENvbXBvbmVudC5kaXJlY3RpdmVzKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuYW1lcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdmFsaWRhdGVEaXJlY3RpdmVOYW1lKG5hbWVzW2ldKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIDAuIGNyZWF0ZSByZW5kZXIgcHJveHkgcHJvcGVydHkgYWNjZXNzIGNhY2hlXHJcbiAgICBpbnN0YW5jZS5hY2Nlc3NDYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XHJcbiAgICAvLyAxLiBjcmVhdGUgcHVibGljIGluc3RhbmNlIC8gcmVuZGVyIHByb3h5XHJcbiAgICAvLyBhbHNvIG1hcmsgaXQgcmF3IHNvIGl0J3MgbmV2ZXIgb2JzZXJ2ZWRcclxuICAgIGluc3RhbmNlLnByb3h5ID0gbmV3IFByb3h5KGluc3RhbmNlLmN0eCwgUHVibGljSW5zdGFuY2VQcm94eUhhbmRsZXJzKTtcclxuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICBleHBvc2VQcm9wc09uUmVuZGVyQ29udGV4dChpbnN0YW5jZSk7XHJcbiAgICB9XHJcbiAgICAvLyAyLiBjYWxsIHNldHVwKClcclxuICAgIGNvbnN0IHsgc2V0dXAgfSA9IENvbXBvbmVudDtcclxuICAgIGlmIChzZXR1cCkge1xyXG4gICAgICAgIGNvbnN0IHNldHVwQ29udGV4dCA9IChpbnN0YW5jZS5zZXR1cENvbnRleHQgPVxyXG4gICAgICAgICAgICBzZXR1cC5sZW5ndGggPiAxID8gY3JlYXRlU2V0dXBDb250ZXh0KGluc3RhbmNlKSA6IG51bGwpO1xyXG4gICAgICAgIGN1cnJlbnRJbnN0YW5jZSA9IGluc3RhbmNlO1xyXG4gICAgICAgIHBhdXNlVHJhY2tpbmcoKTtcclxuICAgICAgICBjb25zdCBzZXR1cFJlc3VsdCA9IGNhbGxXaXRoRXJyb3JIYW5kbGluZyhzZXR1cCwgaW5zdGFuY2UsIDAgLyogU0VUVVBfRlVOQ1RJT04gKi8sIFsocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgPyBzaGFsbG93UmVhZG9ubHkoaW5zdGFuY2UucHJvcHMpIDogaW5zdGFuY2UucHJvcHMsIHNldHVwQ29udGV4dF0pO1xyXG4gICAgICAgIHJlc2V0VHJhY2tpbmcoKTtcclxuICAgICAgICBjdXJyZW50SW5zdGFuY2UgPSBudWxsO1xyXG4gICAgICAgIGlmIChpc1Byb21pc2Uoc2V0dXBSZXN1bHQpKSB7XHJcbiAgICAgICAgICAgIGlmIChpc1NTUikge1xyXG4gICAgICAgICAgICAgICAgLy8gcmV0dXJuIHRoZSBwcm9taXNlIHNvIHNlcnZlci1yZW5kZXJlciBjYW4gd2FpdCBvbiBpdFxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNldHVwUmVzdWx0LnRoZW4oKHJlc29sdmVkUmVzdWx0KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlU2V0dXBSZXN1bHQoaW5zdGFuY2UsIHJlc29sdmVkUmVzdWx0KTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gYXN5bmMgc2V0dXAgcmV0dXJuZWQgUHJvbWlzZS5cclxuICAgICAgICAgICAgICAgIC8vIGJhaWwgaGVyZSBhbmQgd2FpdCBmb3IgcmUtZW50cnkuXHJcbiAgICAgICAgICAgICAgICBpbnN0YW5jZS5hc3luY0RlcCA9IHNldHVwUmVzdWx0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBoYW5kbGVTZXR1cFJlc3VsdChpbnN0YW5jZSwgc2V0dXBSZXN1bHQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGZpbmlzaENvbXBvbmVudFNldHVwKGluc3RhbmNlKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBoYW5kbGVTZXR1cFJlc3VsdChpbnN0YW5jZSwgc2V0dXBSZXN1bHQsIGlzU1NSKSB7XHJcbiAgICBpZiAoaXNGdW5jdGlvbihzZXR1cFJlc3VsdCkpIHtcclxuICAgICAgICAvLyBzZXR1cCByZXR1cm5lZCBhbiBpbmxpbmUgcmVuZGVyIGZ1bmN0aW9uXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpbnN0YW5jZS5yZW5kZXIgPSBzZXR1cFJlc3VsdDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChpc09iamVjdChzZXR1cFJlc3VsdCkpIHtcclxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIGlzVk5vZGUoc2V0dXBSZXN1bHQpKSB7XHJcbiAgICAgICAgICAgIHdhcm4oYHNldHVwKCkgc2hvdWxkIG5vdCByZXR1cm4gVk5vZGVzIGRpcmVjdGx5IC0gYCArXHJcbiAgICAgICAgICAgICAgICBgcmV0dXJuIGEgcmVuZGVyIGZ1bmN0aW9uIGluc3RlYWQuYCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHNldHVwIHJldHVybmVkIGJpbmRpbmdzLlxyXG4gICAgICAgIC8vIGFzc3VtaW5nIGEgcmVuZGVyIGZ1bmN0aW9uIGNvbXBpbGVkIGZyb20gdGVtcGxhdGUgaXMgcHJlc2VudC5cclxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHx8IF9fVlVFX1BST0RfREVWVE9PTFNfXykge1xyXG4gICAgICAgICAgICBpbnN0YW5jZS5kZXZ0b29sc1Jhd1NldHVwU3RhdGUgPSBzZXR1cFJlc3VsdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaW5zdGFuY2Uuc2V0dXBTdGF0ZSA9IHByb3h5UmVmcyhzZXR1cFJlc3VsdCk7XHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICBleHBvc2VTZXR1cFN0YXRlT25SZW5kZXJDb250ZXh0KGluc3RhbmNlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgc2V0dXBSZXN1bHQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIHdhcm4oYHNldHVwKCkgc2hvdWxkIHJldHVybiBhbiBvYmplY3QuIFJlY2VpdmVkOiAke3NldHVwUmVzdWx0ID09PSBudWxsID8gJ251bGwnIDogdHlwZW9mIHNldHVwUmVzdWx0fWApO1xyXG4gICAgfVxyXG4gICAgZmluaXNoQ29tcG9uZW50U2V0dXAoaW5zdGFuY2UpO1xyXG59XHJcbmxldCBjb21waWxlO1xyXG4vKipcclxuICogRm9yIHJ1bnRpbWUtZG9tIHRvIHJlZ2lzdGVyIHRoZSBjb21waWxlci5cclxuICogTm90ZSB0aGUgZXhwb3J0ZWQgbWV0aG9kIHVzZXMgYW55IHRvIGF2b2lkIGQudHMgcmVseWluZyBvbiB0aGUgY29tcGlsZXIgdHlwZXMuXHJcbiAqL1xyXG5mdW5jdGlvbiByZWdpc3RlclJ1bnRpbWVDb21waWxlcihfY29tcGlsZSkge1xyXG4gICAgY29tcGlsZSA9IF9jb21waWxlO1xyXG59XHJcbmZ1bmN0aW9uIGZpbmlzaENvbXBvbmVudFNldHVwKGluc3RhbmNlLCBpc1NTUikge1xyXG4gICAgY29uc3QgQ29tcG9uZW50ID0gaW5zdGFuY2UudHlwZTtcclxuICAgIC8vIHRlbXBsYXRlIC8gcmVuZGVyIGZ1bmN0aW9uIG5vcm1hbGl6YXRpb25cclxuICAgIGlmICghaW5zdGFuY2UucmVuZGVyKSB7XHJcbiAgICAgICAgLy8gY291bGQgYmUgc2V0IGZyb20gc2V0dXAoKVxyXG4gICAgICAgIGlmIChjb21waWxlICYmIENvbXBvbmVudC50ZW1wbGF0ZSAmJiAhQ29tcG9uZW50LnJlbmRlcikge1xyXG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICBzdGFydE1lYXN1cmUoaW5zdGFuY2UsIGBjb21waWxlYCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgQ29tcG9uZW50LnJlbmRlciA9IGNvbXBpbGUoQ29tcG9uZW50LnRlbXBsYXRlLCB7XHJcbiAgICAgICAgICAgICAgICBpc0N1c3RvbUVsZW1lbnQ6IGluc3RhbmNlLmFwcENvbnRleHQuY29uZmlnLmlzQ3VzdG9tRWxlbWVudCxcclxuICAgICAgICAgICAgICAgIGRlbGltaXRlcnM6IENvbXBvbmVudC5kZWxpbWl0ZXJzXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICBlbmRNZWFzdXJlKGluc3RhbmNlLCBgY29tcGlsZWApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGluc3RhbmNlLnJlbmRlciA9IChDb21wb25lbnQucmVuZGVyIHx8IE5PT1ApO1xyXG4gICAgICAgIC8vIGZvciBydW50aW1lLWNvbXBpbGVkIHJlbmRlciBmdW5jdGlvbnMgdXNpbmcgYHdpdGhgIGJsb2NrcywgdGhlIHJlbmRlclxyXG4gICAgICAgIC8vIHByb3h5IHVzZWQgbmVlZHMgYSBkaWZmZXJlbnQgYGhhc2AgaGFuZGxlciB3aGljaCBpcyBtb3JlIHBlcmZvcm1hbnQgYW5kXHJcbiAgICAgICAgLy8gYWxzbyBvbmx5IGFsbG93cyBhIHdoaXRlbGlzdCBvZiBnbG9iYWxzIHRvIGZhbGx0aHJvdWdoLlxyXG4gICAgICAgIGlmIChpbnN0YW5jZS5yZW5kZXIuX3JjKSB7XHJcbiAgICAgICAgICAgIGluc3RhbmNlLndpdGhQcm94eSA9IG5ldyBQcm94eShpbnN0YW5jZS5jdHgsIFJ1bnRpbWVDb21waWxlZFB1YmxpY0luc3RhbmNlUHJveHlIYW5kbGVycyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gc3VwcG9ydCBmb3IgMi54IG9wdGlvbnNcclxuICAgIGlmIChfX1ZVRV9PUFRJT05TX0FQSV9fKSB7XHJcbiAgICAgICAgY3VycmVudEluc3RhbmNlID0gaW5zdGFuY2U7XHJcbiAgICAgICAgcGF1c2VUcmFja2luZygpO1xyXG4gICAgICAgIGFwcGx5T3B0aW9ucyhpbnN0YW5jZSwgQ29tcG9uZW50KTtcclxuICAgICAgICByZXNldFRyYWNraW5nKCk7XHJcbiAgICAgICAgY3VycmVudEluc3RhbmNlID0gbnVsbDtcclxuICAgIH1cclxuICAgIC8vIHdhcm4gbWlzc2luZyB0ZW1wbGF0ZS9yZW5kZXJcclxuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIUNvbXBvbmVudC5yZW5kZXIgJiYgaW5zdGFuY2UucmVuZGVyID09PSBOT09QKSB7XHJcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXHJcbiAgICAgICAgaWYgKCFjb21waWxlICYmIENvbXBvbmVudC50ZW1wbGF0ZSkge1xyXG4gICAgICAgICAgICB3YXJuKGBDb21wb25lbnQgcHJvdmlkZWQgdGVtcGxhdGUgb3B0aW9uIGJ1dCBgICtcclxuICAgICAgICAgICAgICAgIGBydW50aW1lIGNvbXBpbGF0aW9uIGlzIG5vdCBzdXBwb3J0ZWQgaW4gdGhpcyBidWlsZCBvZiBWdWUuYCArXHJcbiAgICAgICAgICAgICAgICAoIGAgQ29uZmlndXJlIHlvdXIgYnVuZGxlciB0byBhbGlhcyBcInZ1ZVwiIHRvIFwidnVlL2Rpc3QvdnVlLmVzbS1idW5kbGVyLmpzXCIuYFxyXG4gICAgICAgICAgICAgICAgICAgICkgLyogc2hvdWxkIG5vdCBoYXBwZW4gKi8pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgd2FybihgQ29tcG9uZW50IGlzIG1pc3NpbmcgdGVtcGxhdGUgb3IgcmVuZGVyIGZ1bmN0aW9uLmApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5jb25zdCBhdHRySGFuZGxlcnMgPSB7XHJcbiAgICBnZXQ6ICh0YXJnZXQsIGtleSkgPT4ge1xyXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgbWFya0F0dHJzQWNjZXNzZWQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRhcmdldFtrZXldO1xyXG4gICAgfSxcclxuICAgIHNldDogKCkgPT4ge1xyXG4gICAgICAgIHdhcm4oYHNldHVwQ29udGV4dC5hdHRycyBpcyByZWFkb25seS5gKTtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9LFxyXG4gICAgZGVsZXRlUHJvcGVydHk6ICgpID0+IHtcclxuICAgICAgICB3YXJuKGBzZXR1cENvbnRleHQuYXR0cnMgaXMgcmVhZG9ubHkuYCk7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG59O1xyXG5mdW5jdGlvbiBjcmVhdGVTZXR1cENvbnRleHQoaW5zdGFuY2UpIHtcclxuICAgIGNvbnN0IGV4cG9zZSA9IGV4cG9zZWQgPT4ge1xyXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgaW5zdGFuY2UuZXhwb3NlZCkge1xyXG4gICAgICAgICAgICB3YXJuKGBleHBvc2UoKSBzaG91bGQgYmUgY2FsbGVkIG9ubHkgb25jZSBwZXIgc2V0dXAoKS5gKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaW5zdGFuY2UuZXhwb3NlZCA9IHByb3h5UmVmcyhleHBvc2VkKTtcclxuICAgIH07XHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgLy8gV2UgdXNlIGdldHRlcnMgaW4gZGV2IGluIGNhc2UgbGlicyBsaWtlIHRlc3QtdXRpbHMgb3ZlcndyaXRlIGluc3RhbmNlXHJcbiAgICAgICAgLy8gcHJvcGVydGllcyAob3ZlcndyaXRlcyBzaG91bGQgbm90IGJlIGRvbmUgaW4gcHJvZClcclxuICAgICAgICByZXR1cm4gT2JqZWN0LmZyZWV6ZSh7XHJcbiAgICAgICAgICAgIGdldCBwcm9wcygpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBpbnN0YW5jZS5wcm9wcztcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZ2V0IGF0dHJzKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm94eShpbnN0YW5jZS5hdHRycywgYXR0ckhhbmRsZXJzKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZ2V0IHNsb3RzKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNoYWxsb3dSZWFkb25seShpbnN0YW5jZS5zbG90cyk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGdldCBlbWl0KCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIChldmVudCwgLi4uYXJncykgPT4gaW5zdGFuY2UuZW1pdChldmVudCwgLi4uYXJncyk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGV4cG9zZVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgYXR0cnM6IGluc3RhbmNlLmF0dHJzLFxyXG4gICAgICAgICAgICBzbG90czogaW5zdGFuY2Uuc2xvdHMsXHJcbiAgICAgICAgICAgIGVtaXQ6IGluc3RhbmNlLmVtaXQsXHJcbiAgICAgICAgICAgIGV4cG9zZVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn1cclxuLy8gcmVjb3JkIGVmZmVjdHMgY3JlYXRlZCBkdXJpbmcgYSBjb21wb25lbnQncyBzZXR1cCgpIHNvIHRoYXQgdGhleSBjYW4gYmVcclxuLy8gc3RvcHBlZCB3aGVuIHRoZSBjb21wb25lbnQgdW5tb3VudHNcclxuZnVuY3Rpb24gcmVjb3JkSW5zdGFuY2VCb3VuZEVmZmVjdChlZmZlY3QsIGluc3RhbmNlID0gY3VycmVudEluc3RhbmNlKSB7XHJcbiAgICBpZiAoaW5zdGFuY2UpIHtcclxuICAgICAgICAoaW5zdGFuY2UuZWZmZWN0cyB8fCAoaW5zdGFuY2UuZWZmZWN0cyA9IFtdKSkucHVzaChlZmZlY3QpO1xyXG4gICAgfVxyXG59XHJcbmNvbnN0IGNsYXNzaWZ5UkUgPSAvKD86XnxbLV9dKShcXHcpL2c7XHJcbmNvbnN0IGNsYXNzaWZ5ID0gKHN0cikgPT4gc3RyLnJlcGxhY2UoY2xhc3NpZnlSRSwgYyA9PiBjLnRvVXBwZXJDYXNlKCkpLnJlcGxhY2UoL1stX10vZywgJycpO1xyXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xyXG5mdW5jdGlvbiBmb3JtYXRDb21wb25lbnROYW1lKGluc3RhbmNlLCBDb21wb25lbnQsIGlzUm9vdCA9IGZhbHNlKSB7XHJcbiAgICBsZXQgbmFtZSA9IGlzRnVuY3Rpb24oQ29tcG9uZW50KVxyXG4gICAgICAgID8gQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5uYW1lXHJcbiAgICAgICAgOiBDb21wb25lbnQubmFtZTtcclxuICAgIGlmICghbmFtZSAmJiBDb21wb25lbnQuX19maWxlKSB7XHJcbiAgICAgICAgY29uc3QgbWF0Y2ggPSBDb21wb25lbnQuX19maWxlLm1hdGNoKC8oW14vXFxcXF0rKVxcLlxcdyskLyk7XHJcbiAgICAgICAgaWYgKG1hdGNoKSB7XHJcbiAgICAgICAgICAgIG5hbWUgPSBtYXRjaFsxXTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAoIW5hbWUgJiYgaW5zdGFuY2UgJiYgaW5zdGFuY2UucGFyZW50KSB7XHJcbiAgICAgICAgLy8gdHJ5IHRvIGluZmVyIHRoZSBuYW1lIGJhc2VkIG9uIHJldmVyc2UgcmVzb2x1dGlvblxyXG4gICAgICAgIGNvbnN0IGluZmVyRnJvbVJlZ2lzdHJ5ID0gKHJlZ2lzdHJ5KSA9PiB7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIHJlZ2lzdHJ5KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocmVnaXN0cnlba2V5XSA9PT0gQ29tcG9uZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGtleTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgbmFtZSA9XHJcbiAgICAgICAgICAgIGluZmVyRnJvbVJlZ2lzdHJ5KGluc3RhbmNlLmNvbXBvbmVudHMgfHxcclxuICAgICAgICAgICAgICAgIGluc3RhbmNlLnBhcmVudC50eXBlLmNvbXBvbmVudHMpIHx8IGluZmVyRnJvbVJlZ2lzdHJ5KGluc3RhbmNlLmFwcENvbnRleHQuY29tcG9uZW50cyk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbmFtZSA/IGNsYXNzaWZ5KG5hbWUpIDogaXNSb290ID8gYEFwcGAgOiBgQW5vbnltb3VzYDtcclxufVxyXG5mdW5jdGlvbiBpc0NsYXNzQ29tcG9uZW50KHZhbHVlKSB7XHJcbiAgICByZXR1cm4gaXNGdW5jdGlvbih2YWx1ZSkgJiYgJ19fdmNjT3B0cycgaW4gdmFsdWU7XHJcbn1cblxuZnVuY3Rpb24gY29tcHV0ZWQoZ2V0dGVyT3JPcHRpb25zKSB7XHJcbiAgICBjb25zdCBjID0gY29tcHV0ZWQkMShnZXR0ZXJPck9wdGlvbnMpO1xyXG4gICAgcmVjb3JkSW5zdGFuY2VCb3VuZEVmZmVjdChjLmVmZmVjdCk7XHJcbiAgICByZXR1cm4gYztcclxufVxuXG4vLyBpbXBsZW1lbnRhdGlvblxyXG5mdW5jdGlvbiBkZWZpbmVQcm9wcygpIHtcclxuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICB3YXJuKGBkZWZpbmVQcm9wcygpIGlzIGEgY29tcGlsZXItaGludCBoZWxwZXIgdGhhdCBpcyBvbmx5IHVzYWJsZSBpbnNpZGUgYCArXHJcbiAgICAgICAgICAgIGA8c2NyaXB0IHNldHVwPiBvZiBhIHNpbmdsZSBmaWxlIGNvbXBvbmVudC4gSXRzIGFyZ3VtZW50cyBzaG91bGQgYmUgYCArXHJcbiAgICAgICAgICAgIGBjb21waWxlZCBhd2F5IGFuZCBwYXNzaW5nIGl0IGF0IHJ1bnRpbWUgaGFzIG5vIGVmZmVjdC5gKTtcclxuICAgIH1cclxuICAgIHJldHVybiBudWxsO1xyXG59XHJcbi8vIGltcGxlbWVudGF0aW9uXHJcbmZ1bmN0aW9uIGRlZmluZUVtaXQoKSB7XHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgd2FybihgZGVmaW5lRW1pdCgpIGlzIGEgY29tcGlsZXItaGludCBoZWxwZXIgdGhhdCBpcyBvbmx5IHVzYWJsZSBpbnNpZGUgYCArXHJcbiAgICAgICAgICAgIGA8c2NyaXB0IHNldHVwPiBvZiBhIHNpbmdsZSBmaWxlIGNvbXBvbmVudC4gSXRzIGFyZ3VtZW50cyBzaG91bGQgYmUgYCArXHJcbiAgICAgICAgICAgIGBjb21waWxlZCBhd2F5IGFuZCBwYXNzaW5nIGl0IGF0IHJ1bnRpbWUgaGFzIG5vIGVmZmVjdC5gKTtcclxuICAgIH1cclxuICAgIHJldHVybiBudWxsO1xyXG59XHJcbmZ1bmN0aW9uIHVzZUNvbnRleHQoKSB7XHJcbiAgICBjb25zdCBpID0gZ2V0Q3VycmVudEluc3RhbmNlKCk7XHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFpKSB7XHJcbiAgICAgICAgd2FybihgdXNlQ29udGV4dCgpIGNhbGxlZCB3aXRob3V0IGFjdGl2ZSBpbnN0YW5jZS5gKTtcclxuICAgIH1cclxuICAgIHJldHVybiBpLnNldHVwQ29udGV4dCB8fCAoaS5zZXR1cENvbnRleHQgPSBjcmVhdGVTZXR1cENvbnRleHQoaSkpO1xyXG59XG5cbi8vIEFjdHVhbCBpbXBsZW1lbnRhdGlvblxyXG5mdW5jdGlvbiBoKHR5cGUsIHByb3BzT3JDaGlsZHJlbiwgY2hpbGRyZW4pIHtcclxuICAgIGNvbnN0IGwgPSBhcmd1bWVudHMubGVuZ3RoO1xyXG4gICAgaWYgKGwgPT09IDIpIHtcclxuICAgICAgICBpZiAoaXNPYmplY3QocHJvcHNPckNoaWxkcmVuKSAmJiAhaXNBcnJheShwcm9wc09yQ2hpbGRyZW4pKSB7XHJcbiAgICAgICAgICAgIC8vIHNpbmdsZSB2bm9kZSB3aXRob3V0IHByb3BzXHJcbiAgICAgICAgICAgIGlmIChpc1ZOb2RlKHByb3BzT3JDaGlsZHJlbikpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjcmVhdGVWTm9kZSh0eXBlLCBudWxsLCBbcHJvcHNPckNoaWxkcmVuXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gcHJvcHMgd2l0aG91dCBjaGlsZHJlblxyXG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlVk5vZGUodHlwZSwgcHJvcHNPckNoaWxkcmVuKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIG9taXQgcHJvcHNcclxuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZVZOb2RlKHR5cGUsIG51bGwsIHByb3BzT3JDaGlsZHJlbik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgaWYgKGwgPiAzKSB7XHJcbiAgICAgICAgICAgIGNoaWxkcmVuID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAobCA9PT0gMyAmJiBpc1ZOb2RlKGNoaWxkcmVuKSkge1xyXG4gICAgICAgICAgICBjaGlsZHJlbiA9IFtjaGlsZHJlbl07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBjcmVhdGVWTm9kZSh0eXBlLCBwcm9wc09yQ2hpbGRyZW4sIGNoaWxkcmVuKTtcclxuICAgIH1cclxufVxuXG5jb25zdCBzc3JDb250ZXh0S2V5ID0gU3ltYm9sKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSA/IGBzc3JDb250ZXh0YCA6IGBgKTtcclxuY29uc3QgdXNlU1NSQ29udGV4dCA9ICgpID0+IHtcclxuICAgIHtcclxuICAgICAgICBjb25zdCBjdHggPSBpbmplY3Qoc3NyQ29udGV4dEtleSk7XHJcbiAgICAgICAgaWYgKCFjdHgpIHtcclxuICAgICAgICAgICAgd2FybihgU2VydmVyIHJlbmRlcmluZyBjb250ZXh0IG5vdCBwcm92aWRlZC4gTWFrZSBzdXJlIHRvIG9ubHkgY2FsbCBgICtcclxuICAgICAgICAgICAgICAgIGB1c2VTc3JDb250ZXh0KCkgY29uZGl0aW9uYWxseSBpbiB0aGUgc2VydmVyIGJ1aWxkLmApO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gY3R4O1xyXG4gICAgfVxyXG59O1xuXG5mdW5jdGlvbiBpbml0Q3VzdG9tRm9ybWF0dGVyKCkge1xyXG4gICAgLyogZXNsaW50LWRpc2FibGUgbm8tcmVzdHJpY3RlZC1nbG9iYWxzICovXHJcbiAgICBpZiAoIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB8fCB0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGNvbnN0IHZ1ZVN0eWxlID0geyBzdHlsZTogJ2NvbG9yOiMzYmE3NzYnIH07XHJcbiAgICBjb25zdCBudW1iZXJTdHlsZSA9IHsgc3R5bGU6ICdjb2xvcjojMGIxYmM5JyB9O1xyXG4gICAgY29uc3Qgc3RyaW5nU3R5bGUgPSB7IHN0eWxlOiAnY29sb3I6I2I2MmUyNCcgfTtcclxuICAgIGNvbnN0IGtleXdvcmRTdHlsZSA9IHsgc3R5bGU6ICdjb2xvcjojOWQyODhjJyB9O1xyXG4gICAgLy8gY3VzdG9tIGZvcm1hdHRlciBmb3IgQ2hyb21lXHJcbiAgICAvLyBodHRwczovL3d3dy5tYXR0emV1bmVydC5jb20vMjAxNi8wMi8xOS9jdXN0b20tY2hyb21lLWRldnRvb2xzLW9iamVjdC1mb3JtYXR0ZXJzLmh0bWxcclxuICAgIGNvbnN0IGZvcm1hdHRlciA9IHtcclxuICAgICAgICBoZWFkZXIob2JqKSB7XHJcbiAgICAgICAgICAgIC8vIFRPRE8gYWxzbyBmb3JtYXQgQ29tcG9uZW50UHVibGljSW5zdGFuY2UgJiBjdHguc2xvdHMvYXR0cnMgaW4gc2V0dXBcclxuICAgICAgICAgICAgaWYgKCFpc09iamVjdChvYmopKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAob2JqLl9faXNWdWUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbJ2RpdicsIHZ1ZVN0eWxlLCBgVnVlSW5zdGFuY2VgXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChpc1JlZihvYmopKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICAgICAgICAgICdkaXYnLFxyXG4gICAgICAgICAgICAgICAgICAgIHt9LFxyXG4gICAgICAgICAgICAgICAgICAgIFsnc3BhbicsIHZ1ZVN0eWxlLCBnZW5SZWZGbGFnKG9iaildLFxyXG4gICAgICAgICAgICAgICAgICAgICc8JyxcclxuICAgICAgICAgICAgICAgICAgICBmb3JtYXRWYWx1ZShvYmoudmFsdWUpLFxyXG4gICAgICAgICAgICAgICAgICAgIGA+YFxyXG4gICAgICAgICAgICAgICAgXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChpc1JlYWN0aXZlKG9iaikpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgICAgICAgICAgJ2RpdicsXHJcbiAgICAgICAgICAgICAgICAgICAge30sXHJcbiAgICAgICAgICAgICAgICAgICAgWydzcGFuJywgdnVlU3R5bGUsICdSZWFjdGl2ZSddLFxyXG4gICAgICAgICAgICAgICAgICAgICc8JyxcclxuICAgICAgICAgICAgICAgICAgICBmb3JtYXRWYWx1ZShvYmopLFxyXG4gICAgICAgICAgICAgICAgICAgIGA+JHtpc1JlYWRvbmx5KG9iaikgPyBgIChyZWFkb25seSlgIDogYGB9YFxyXG4gICAgICAgICAgICAgICAgXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChpc1JlYWRvbmx5KG9iaikpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgICAgICAgICAgJ2RpdicsXHJcbiAgICAgICAgICAgICAgICAgICAge30sXHJcbiAgICAgICAgICAgICAgICAgICAgWydzcGFuJywgdnVlU3R5bGUsICdSZWFkb25seSddLFxyXG4gICAgICAgICAgICAgICAgICAgICc8JyxcclxuICAgICAgICAgICAgICAgICAgICBmb3JtYXRWYWx1ZShvYmopLFxyXG4gICAgICAgICAgICAgICAgICAgICc+J1xyXG4gICAgICAgICAgICAgICAgXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGhhc0JvZHkob2JqKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBvYmogJiYgb2JqLl9faXNWdWU7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBib2R5KG9iaikge1xyXG4gICAgICAgICAgICBpZiAob2JqICYmIG9iai5fX2lzVnVlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICAgICAgICAgICdkaXYnLFxyXG4gICAgICAgICAgICAgICAgICAgIHt9LFxyXG4gICAgICAgICAgICAgICAgICAgIC4uLmZvcm1hdEluc3RhbmNlKG9iai4kKVxyXG4gICAgICAgICAgICAgICAgXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBmdW5jdGlvbiBmb3JtYXRJbnN0YW5jZShpbnN0YW5jZSkge1xyXG4gICAgICAgIGNvbnN0IGJsb2NrcyA9IFtdO1xyXG4gICAgICAgIGlmIChpbnN0YW5jZS50eXBlLnByb3BzICYmIGluc3RhbmNlLnByb3BzKSB7XHJcbiAgICAgICAgICAgIGJsb2Nrcy5wdXNoKGNyZWF0ZUluc3RhbmNlQmxvY2soJ3Byb3BzJywgdG9SYXcoaW5zdGFuY2UucHJvcHMpKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChpbnN0YW5jZS5zZXR1cFN0YXRlICE9PSBFTVBUWV9PQkopIHtcclxuICAgICAgICAgICAgYmxvY2tzLnB1c2goY3JlYXRlSW5zdGFuY2VCbG9jaygnc2V0dXAnLCBpbnN0YW5jZS5zZXR1cFN0YXRlKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChpbnN0YW5jZS5kYXRhICE9PSBFTVBUWV9PQkopIHtcclxuICAgICAgICAgICAgYmxvY2tzLnB1c2goY3JlYXRlSW5zdGFuY2VCbG9jaygnZGF0YScsIHRvUmF3KGluc3RhbmNlLmRhdGEpKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGNvbXB1dGVkID0gZXh0cmFjdEtleXMoaW5zdGFuY2UsICdjb21wdXRlZCcpO1xyXG4gICAgICAgIGlmIChjb21wdXRlZCkge1xyXG4gICAgICAgICAgICBibG9ja3MucHVzaChjcmVhdGVJbnN0YW5jZUJsb2NrKCdjb21wdXRlZCcsIGNvbXB1dGVkKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGluamVjdGVkID0gZXh0cmFjdEtleXMoaW5zdGFuY2UsICdpbmplY3QnKTtcclxuICAgICAgICBpZiAoaW5qZWN0ZWQpIHtcclxuICAgICAgICAgICAgYmxvY2tzLnB1c2goY3JlYXRlSW5zdGFuY2VCbG9jaygnaW5qZWN0ZWQnLCBpbmplY3RlZCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBibG9ja3MucHVzaChbXHJcbiAgICAgICAgICAgICdkaXYnLFxyXG4gICAgICAgICAgICB7fSxcclxuICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgICAgJ3NwYW4nLFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlOiBrZXl3b3JkU3R5bGUuc3R5bGUgKyAnO29wYWNpdHk6MC42NidcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAnJCAoaW50ZXJuYWwpOiAnXHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFsnb2JqZWN0JywgeyBvYmplY3Q6IGluc3RhbmNlIH1dXHJcbiAgICAgICAgXSk7XHJcbiAgICAgICAgcmV0dXJuIGJsb2NrcztcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGNyZWF0ZUluc3RhbmNlQmxvY2sodHlwZSwgdGFyZ2V0KSB7XHJcbiAgICAgICAgdGFyZ2V0ID0gZXh0ZW5kKHt9LCB0YXJnZXQpO1xyXG4gICAgICAgIGlmICghT2JqZWN0LmtleXModGFyZ2V0KS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFsnc3BhbicsIHt9XTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAgJ2RpdicsXHJcbiAgICAgICAgICAgIHsgc3R5bGU6ICdsaW5lLWhlaWdodDoxLjI1ZW07bWFyZ2luLWJvdHRvbTowLjZlbScgfSxcclxuICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgICAgJ2RpdicsXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6ICdjb2xvcjojNDc2NTgyJ1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHR5cGVcclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgICAgJ2RpdicsXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6ICdwYWRkaW5nLWxlZnQ6MS4yNWVtJ1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIC4uLk9iamVjdC5rZXlzKHRhcmdldCkubWFwKGtleSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ2RpdicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHt9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ3NwYW4nLCBrZXl3b3JkU3R5bGUsIGtleSArICc6ICddLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3JtYXRWYWx1ZSh0YXJnZXRba2V5XSwgZmFsc2UpXHJcbiAgICAgICAgICAgICAgICAgICAgXTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIF1cclxuICAgICAgICBdO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gZm9ybWF0VmFsdWUodiwgYXNSYXcgPSB0cnVlKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiB2ID09PSAnbnVtYmVyJykge1xyXG4gICAgICAgICAgICByZXR1cm4gWydzcGFuJywgbnVtYmVyU3R5bGUsIHZdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgdiA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFsnc3BhbicsIHN0cmluZ1N0eWxlLCBKU09OLnN0cmluZ2lmeSh2KV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiB2ID09PSAnYm9vbGVhbicpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFsnc3BhbicsIGtleXdvcmRTdHlsZSwgdl07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGlzT2JqZWN0KHYpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBbJ29iamVjdCcsIHsgb2JqZWN0OiBhc1JhdyA/IHRvUmF3KHYpIDogdiB9XTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBbJ3NwYW4nLCBzdHJpbmdTdHlsZSwgU3RyaW5nKHYpXTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBleHRyYWN0S2V5cyhpbnN0YW5jZSwgdHlwZSkge1xyXG4gICAgICAgIGNvbnN0IENvbXAgPSBpbnN0YW5jZS50eXBlO1xyXG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKENvbXApKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgZXh0cmFjdGVkID0ge307XHJcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gaW5zdGFuY2UuY3R4KSB7XHJcbiAgICAgICAgICAgIGlmIChpc0tleU9mVHlwZShDb21wLCBrZXksIHR5cGUpKSB7XHJcbiAgICAgICAgICAgICAgICBleHRyYWN0ZWRba2V5XSA9IGluc3RhbmNlLmN0eFtrZXldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBleHRyYWN0ZWQ7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBpc0tleU9mVHlwZShDb21wLCBrZXksIHR5cGUpIHtcclxuICAgICAgICBjb25zdCBvcHRzID0gQ29tcFt0eXBlXTtcclxuICAgICAgICBpZiAoKGlzQXJyYXkob3B0cykgJiYgb3B0cy5pbmNsdWRlcyhrZXkpKSB8fFxyXG4gICAgICAgICAgICAoaXNPYmplY3Qob3B0cykgJiYga2V5IGluIG9wdHMpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoQ29tcC5leHRlbmRzICYmIGlzS2V5T2ZUeXBlKENvbXAuZXh0ZW5kcywga2V5LCB0eXBlKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKENvbXAubWl4aW5zICYmIENvbXAubWl4aW5zLnNvbWUobSA9PiBpc0tleU9mVHlwZShtLCBrZXksIHR5cGUpKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBnZW5SZWZGbGFnKHYpIHtcclxuICAgICAgICBpZiAodi5fc2hhbGxvdykge1xyXG4gICAgICAgICAgICByZXR1cm4gYFNoYWxsb3dSZWZgO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodi5lZmZlY3QpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGBDb21wdXRlZFJlZmA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBgUmVmYDtcclxuICAgIH1cclxuICAgIGlmICh3aW5kb3cuZGV2dG9vbHNGb3JtYXR0ZXJzKSB7XHJcbiAgICAgICAgd2luZG93LmRldnRvb2xzRm9ybWF0dGVycy5wdXNoKGZvcm1hdHRlcik7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICB3aW5kb3cuZGV2dG9vbHNGb3JtYXR0ZXJzID0gW2Zvcm1hdHRlcl07XHJcbiAgICB9XHJcbn1cblxuLyoqXHJcbiAqIEFjdHVhbCBpbXBsZW1lbnRhdGlvblxyXG4gKi9cclxuZnVuY3Rpb24gcmVuZGVyTGlzdChzb3VyY2UsIHJlbmRlckl0ZW0pIHtcclxuICAgIGxldCByZXQ7XHJcbiAgICBpZiAoaXNBcnJheShzb3VyY2UpIHx8IGlzU3RyaW5nKHNvdXJjZSkpIHtcclxuICAgICAgICByZXQgPSBuZXcgQXJyYXkoc291cmNlLmxlbmd0aCk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGwgPSBzb3VyY2UubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHJldFtpXSA9IHJlbmRlckl0ZW0oc291cmNlW2ldLCBpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICh0eXBlb2Ygc291cmNlID09PSAnbnVtYmVyJykge1xyXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIU51bWJlci5pc0ludGVnZXIoc291cmNlKSkge1xyXG4gICAgICAgICAgICB3YXJuKGBUaGUgdi1mb3IgcmFuZ2UgZXhwZWN0IGFuIGludGVnZXIgdmFsdWUgYnV0IGdvdCAke3NvdXJjZX0uYCk7XHJcbiAgICAgICAgICAgIHJldHVybiBbXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0ID0gbmV3IEFycmF5KHNvdXJjZSk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzb3VyY2U7IGkrKykge1xyXG4gICAgICAgICAgICByZXRbaV0gPSByZW5kZXJJdGVtKGkgKyAxLCBpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChpc09iamVjdChzb3VyY2UpKSB7XHJcbiAgICAgICAgaWYgKHNvdXJjZVtTeW1ib2wuaXRlcmF0b3JdKSB7XHJcbiAgICAgICAgICAgIHJldCA9IEFycmF5LmZyb20oc291cmNlLCByZW5kZXJJdGVtKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xyXG4gICAgICAgICAgICByZXQgPSBuZXcgQXJyYXkoa2V5cy5sZW5ndGgpO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbCA9IGtleXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBrZXkgPSBrZXlzW2ldO1xyXG4gICAgICAgICAgICAgICAgcmV0W2ldID0gcmVuZGVySXRlbShzb3VyY2Vba2V5XSwga2V5LCBpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHJldCA9IFtdO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJldDtcclxufVxuXG4vKipcclxuICogRm9yIHByZWZpeGluZyBrZXlzIGluIHYtb249XCJvYmpcIiB3aXRoIFwib25cIlxyXG4gKiBAcHJpdmF0ZVxyXG4gKi9cclxuZnVuY3Rpb24gdG9IYW5kbGVycyhvYmopIHtcclxuICAgIGNvbnN0IHJldCA9IHt9O1xyXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhaXNPYmplY3Qob2JqKSkge1xyXG4gICAgICAgIHdhcm4oYHYtb24gd2l0aCBubyBhcmd1bWVudCBleHBlY3RzIGFuIG9iamVjdCB2YWx1ZS5gKTtcclxuICAgICAgICByZXR1cm4gcmV0O1xyXG4gICAgfVxyXG4gICAgZm9yIChjb25zdCBrZXkgaW4gb2JqKSB7XHJcbiAgICAgICAgcmV0W3RvSGFuZGxlcktleShrZXkpXSA9IG9ialtrZXldO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJldDtcclxufVxuXG4vKipcclxuICogQ29tcGlsZXIgcnVudGltZSBoZWxwZXIgZm9yIGNyZWF0aW5nIGR5bmFtaWMgc2xvdHMgb2JqZWN0XHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG5mdW5jdGlvbiBjcmVhdGVTbG90cyhzbG90cywgZHluYW1pY1Nsb3RzKSB7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGR5bmFtaWNTbG90cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGNvbnN0IHNsb3QgPSBkeW5hbWljU2xvdHNbaV07XHJcbiAgICAgICAgLy8gYXJyYXkgb2YgZHluYW1pYyBzbG90IGdlbmVyYXRlZCBieSA8dGVtcGxhdGUgdi1mb3I9XCIuLi5cIiAjWy4uLl0+XHJcbiAgICAgICAgaWYgKGlzQXJyYXkoc2xvdCkpIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBzbG90Lmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICBzbG90c1tzbG90W2pdLm5hbWVdID0gc2xvdFtqXS5mbjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChzbG90KSB7XHJcbiAgICAgICAgICAgIC8vIGNvbmRpdGlvbmFsIHNpbmdsZSBzbG90IGdlbmVyYXRlZCBieSA8dGVtcGxhdGUgdi1pZj1cIi4uLlwiICNmb28+XHJcbiAgICAgICAgICAgIHNsb3RzW3Nsb3QubmFtZV0gPSBzbG90LmZuO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBzbG90cztcclxufVxuXG4vLyBDb3JlIEFQSSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuY29uc3QgdmVyc2lvbiA9IFwiMy4wLjRcIjtcclxuLyoqXHJcbiAqIFNTUiB1dGlscyBmb3IgXFxAdnVlL3NlcnZlci1yZW5kZXJlci4gT25seSBleHBvc2VkIGluIGNqcyBidWlsZHMuXHJcbiAqIEBpbnRlcm5hbFxyXG4gKi9cclxuY29uc3Qgc3NyVXRpbHMgPSAoIG51bGwpO1xuXG5leHBvcnQgeyBCYXNlVHJhbnNpdGlvbiwgQ29tbWVudCwgRnJhZ21lbnQsIEtlZXBBbGl2ZSwgU3RhdGljLCBTdXNwZW5zZSwgVGVsZXBvcnQsIFRleHQsIGNhbGxXaXRoQXN5bmNFcnJvckhhbmRsaW5nLCBjYWxsV2l0aEVycm9ySGFuZGxpbmcsIGNsb25lVk5vZGUsIGNvbXB1dGVkLCBjcmVhdGVCbG9jaywgY3JlYXRlQ29tbWVudFZOb2RlLCBjcmVhdGVIeWRyYXRpb25SZW5kZXJlciwgY3JlYXRlUmVuZGVyZXIsIGNyZWF0ZVNsb3RzLCBjcmVhdGVTdGF0aWNWTm9kZSwgY3JlYXRlVGV4dFZOb2RlLCBjcmVhdGVWTm9kZSwgZGVmaW5lQXN5bmNDb21wb25lbnQsIGRlZmluZUNvbXBvbmVudCwgZGVmaW5lRW1pdCwgZGVmaW5lUHJvcHMsIGRldnRvb2xzLCBnZXRDdXJyZW50SW5zdGFuY2UsIGdldFRyYW5zaXRpb25SYXdDaGlsZHJlbiwgaCwgaGFuZGxlRXJyb3IsIGluaXRDdXN0b21Gb3JtYXR0ZXIsIGluamVjdCwgaXNWTm9kZSwgbWVyZ2VQcm9wcywgbmV4dFRpY2ssIG9uQWN0aXZhdGVkLCBvbkJlZm9yZU1vdW50LCBvbkJlZm9yZVVubW91bnQsIG9uQmVmb3JlVXBkYXRlLCBvbkRlYWN0aXZhdGVkLCBvbkVycm9yQ2FwdHVyZWQsIG9uTW91bnRlZCwgb25SZW5kZXJUcmFja2VkLCBvblJlbmRlclRyaWdnZXJlZCwgb25Vbm1vdW50ZWQsIG9uVXBkYXRlZCwgb3BlbkJsb2NrLCBwb3BTY29wZUlkLCBwcm92aWRlLCBwdXNoU2NvcGVJZCwgcXVldWVQb3N0Rmx1c2hDYiwgcmVnaXN0ZXJSdW50aW1lQ29tcGlsZXIsIHJlbmRlckxpc3QsIHJlbmRlclNsb3QsIHJlc29sdmVDb21wb25lbnQsIHJlc29sdmVEaXJlY3RpdmUsIHJlc29sdmVEeW5hbWljQ29tcG9uZW50LCByZXNvbHZlVHJhbnNpdGlvbkhvb2tzLCBzZXRCbG9ja1RyYWNraW5nLCBzZXREZXZ0b29sc0hvb2ssIHNldFRyYW5zaXRpb25Ib29rcywgc3NyQ29udGV4dEtleSwgc3NyVXRpbHMsIHRvSGFuZGxlcnMsIHRyYW5zZm9ybVZOb2RlQXJncywgdXNlQ29udGV4dCwgdXNlU1NSQ29udGV4dCwgdXNlVHJhbnNpdGlvblN0YXRlLCB2ZXJzaW9uLCB3YXJuLCB3YXRjaCwgd2F0Y2hFZmZlY3QsIHdpdGhDdHgsIHdpdGhEaXJlY3RpdmVzLCB3aXRoU2NvcGVJZCB9O1xuIiwiaW1wb3J0IHsgY2FtZWxpemUsIHdhcm4sIGNhbGxXaXRoQXN5bmNFcnJvckhhbmRsaW5nLCBnZXRDdXJyZW50SW5zdGFuY2UsIG9uTW91bnRlZCwgd2F0Y2hFZmZlY3QsIG9uVXBkYXRlZCwgRnJhZ21lbnQsIGgsIEJhc2VUcmFuc2l0aW9uLCB1c2VUcmFuc2l0aW9uU3RhdGUsIHRvUmF3LCBnZXRUcmFuc2l0aW9uUmF3Q2hpbGRyZW4sIHNldFRyYW5zaXRpb25Ib29rcywgcmVzb2x2ZVRyYW5zaXRpb25Ib29rcywgY3JlYXRlVk5vZGUsIGNyZWF0ZVJlbmRlcmVyLCBjcmVhdGVIeWRyYXRpb25SZW5kZXJlciB9IGZyb20gJ0B2dWUvcnVudGltZS1jb3JlJztcbmV4cG9ydCAqIGZyb20gJ0B2dWUvcnVudGltZS1jb3JlJztcbmltcG9ydCB7IGlzU3RyaW5nLCBpc0FycmF5LCBoeXBoZW5hdGUsIGNhcGl0YWxpemUsIGlzU3BlY2lhbEJvb2xlYW5BdHRyLCBpc09uLCBpc01vZGVsTGlzdGVuZXIsIGlzRnVuY3Rpb24sIEVNUFRZX09CSiwgZXh0ZW5kLCBpc09iamVjdCwgdG9OdW1iZXIsIGludm9rZUFycmF5Rm5zLCBsb29zZUluZGV4T2YsIGlzU2V0LCBsb29zZUVxdWFsLCBpc0hUTUxUYWcsIGlzU1ZHVGFnIH0gZnJvbSAnQHZ1ZS9zaGFyZWQnO1xuXG5jb25zdCBzdmdOUyA9ICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Zyc7XHJcbmNvbnN0IGRvYyA9ICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnID8gZG9jdW1lbnQgOiBudWxsKTtcclxubGV0IHRlbXBDb250YWluZXI7XHJcbmxldCB0ZW1wU1ZHQ29udGFpbmVyO1xyXG5jb25zdCBub2RlT3BzID0ge1xyXG4gICAgaW5zZXJ0OiAoY2hpbGQsIHBhcmVudCwgYW5jaG9yKSA9PiB7XHJcbiAgICAgICAgcGFyZW50Lmluc2VydEJlZm9yZShjaGlsZCwgYW5jaG9yIHx8IG51bGwpO1xyXG4gICAgfSxcclxuICAgIHJlbW92ZTogY2hpbGQgPT4ge1xyXG4gICAgICAgIGNvbnN0IHBhcmVudCA9IGNoaWxkLnBhcmVudE5vZGU7XHJcbiAgICAgICAgaWYgKHBhcmVudCkge1xyXG4gICAgICAgICAgICBwYXJlbnQucmVtb3ZlQ2hpbGQoY2hpbGQpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBjcmVhdGVFbGVtZW50OiAodGFnLCBpc1NWRywgaXMpID0+IGlzU1ZHXHJcbiAgICAgICAgPyBkb2MuY3JlYXRlRWxlbWVudE5TKHN2Z05TLCB0YWcpXHJcbiAgICAgICAgOiBkb2MuY3JlYXRlRWxlbWVudCh0YWcsIGlzID8geyBpcyB9IDogdW5kZWZpbmVkKSxcclxuICAgIGNyZWF0ZVRleHQ6IHRleHQgPT4gZG9jLmNyZWF0ZVRleHROb2RlKHRleHQpLFxyXG4gICAgY3JlYXRlQ29tbWVudDogdGV4dCA9PiBkb2MuY3JlYXRlQ29tbWVudCh0ZXh0KSxcclxuICAgIHNldFRleHQ6IChub2RlLCB0ZXh0KSA9PiB7XHJcbiAgICAgICAgbm9kZS5ub2RlVmFsdWUgPSB0ZXh0O1xyXG4gICAgfSxcclxuICAgIHNldEVsZW1lbnRUZXh0OiAoZWwsIHRleHQpID0+IHtcclxuICAgICAgICBlbC50ZXh0Q29udGVudCA9IHRleHQ7XHJcbiAgICB9LFxyXG4gICAgcGFyZW50Tm9kZTogbm9kZSA9PiBub2RlLnBhcmVudE5vZGUsXHJcbiAgICBuZXh0U2libGluZzogbm9kZSA9PiBub2RlLm5leHRTaWJsaW5nLFxyXG4gICAgcXVlcnlTZWxlY3Rvcjogc2VsZWN0b3IgPT4gZG9jLnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpLFxyXG4gICAgc2V0U2NvcGVJZChlbCwgaWQpIHtcclxuICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoaWQsICcnKTtcclxuICAgIH0sXHJcbiAgICBjbG9uZU5vZGUoZWwpIHtcclxuICAgICAgICByZXR1cm4gZWwuY2xvbmVOb2RlKHRydWUpO1xyXG4gICAgfSxcclxuICAgIC8vIF9fVU5TQUZFX19cclxuICAgIC8vIFJlYXNvbjogaW5uZXJIVE1MLlxyXG4gICAgLy8gU3RhdGljIGNvbnRlbnQgaGVyZSBjYW4gb25seSBjb21lIGZyb20gY29tcGlsZWQgdGVtcGxhdGVzLlxyXG4gICAgLy8gQXMgbG9uZyBhcyB0aGUgdXNlciBvbmx5IHVzZXMgdHJ1c3RlZCB0ZW1wbGF0ZXMsIHRoaXMgaXMgc2FmZS5cclxuICAgIGluc2VydFN0YXRpY0NvbnRlbnQoY29udGVudCwgcGFyZW50LCBhbmNob3IsIGlzU1ZHKSB7XHJcbiAgICAgICAgY29uc3QgdGVtcCA9IGlzU1ZHXHJcbiAgICAgICAgICAgID8gdGVtcFNWR0NvbnRhaW5lciB8fFxyXG4gICAgICAgICAgICAgICAgKHRlbXBTVkdDb250YWluZXIgPSBkb2MuY3JlYXRlRWxlbWVudE5TKHN2Z05TLCAnc3ZnJykpXHJcbiAgICAgICAgICAgIDogdGVtcENvbnRhaW5lciB8fCAodGVtcENvbnRhaW5lciA9IGRvYy5jcmVhdGVFbGVtZW50KCdkaXYnKSk7XHJcbiAgICAgICAgdGVtcC5pbm5lckhUTUwgPSBjb250ZW50O1xyXG4gICAgICAgIGNvbnN0IGZpcnN0ID0gdGVtcC5maXJzdENoaWxkO1xyXG4gICAgICAgIGxldCBub2RlID0gZmlyc3Q7XHJcbiAgICAgICAgbGV0IGxhc3QgPSBub2RlO1xyXG4gICAgICAgIHdoaWxlIChub2RlKSB7XHJcbiAgICAgICAgICAgIGxhc3QgPSBub2RlO1xyXG4gICAgICAgICAgICBub2RlT3BzLmluc2VydChub2RlLCBwYXJlbnQsIGFuY2hvcik7XHJcbiAgICAgICAgICAgIG5vZGUgPSB0ZW1wLmZpcnN0Q2hpbGQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBbZmlyc3QsIGxhc3RdO1xyXG4gICAgfVxyXG59O1xuXG4vLyBjb21waWxlciBzaG91bGQgbm9ybWFsaXplIGNsYXNzICsgOmNsYXNzIGJpbmRpbmdzIG9uIHRoZSBzYW1lIGVsZW1lbnRcclxuLy8gaW50byBhIHNpbmdsZSBiaW5kaW5nIFsnc3RhdGljQ2xhc3MnLCBkeW5hbWljXVxyXG5mdW5jdGlvbiBwYXRjaENsYXNzKGVsLCB2YWx1ZSwgaXNTVkcpIHtcclxuICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XHJcbiAgICAgICAgdmFsdWUgPSAnJztcclxuICAgIH1cclxuICAgIGlmIChpc1NWRykge1xyXG4gICAgICAgIGVsLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCB2YWx1ZSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICAvLyBkaXJlY3RseSBzZXR0aW5nIGNsYXNzTmFtZSBzaG91bGQgYmUgZmFzdGVyIHRoYW4gc2V0QXR0cmlidXRlIGluIHRoZW9yeVxyXG4gICAgICAgIC8vIGlmIHRoaXMgaXMgYW4gZWxlbWVudCBkdXJpbmcgYSB0cmFuc2l0aW9uLCB0YWtlIHRoZSB0ZW1wb3JhcnkgdHJhbnNpdGlvblxyXG4gICAgICAgIC8vIGNsYXNzZXMgaW50byBhY2NvdW50LlxyXG4gICAgICAgIGNvbnN0IHRyYW5zaXRpb25DbGFzc2VzID0gZWwuX3Z0YztcclxuICAgICAgICBpZiAodHJhbnNpdGlvbkNsYXNzZXMpIHtcclxuICAgICAgICAgICAgdmFsdWUgPSAodmFsdWVcclxuICAgICAgICAgICAgICAgID8gW3ZhbHVlLCAuLi50cmFuc2l0aW9uQ2xhc3Nlc11cclxuICAgICAgICAgICAgICAgIDogWy4uLnRyYW5zaXRpb25DbGFzc2VzXSkuam9pbignICcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbC5jbGFzc05hbWUgPSB2YWx1ZTtcclxuICAgIH1cclxufVxuXG5mdW5jdGlvbiBwYXRjaFN0eWxlKGVsLCBwcmV2LCBuZXh0KSB7XHJcbiAgICBjb25zdCBzdHlsZSA9IGVsLnN0eWxlO1xyXG4gICAgaWYgKCFuZXh0KSB7XHJcbiAgICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKCdzdHlsZScpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoaXNTdHJpbmcobmV4dCkpIHtcclxuICAgICAgICBpZiAocHJldiAhPT0gbmV4dCkge1xyXG4gICAgICAgICAgICBzdHlsZS5jc3NUZXh0ID0gbmV4dDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBuZXh0KSB7XHJcbiAgICAgICAgICAgIHNldFN0eWxlKHN0eWxlLCBrZXksIG5leHRba2V5XSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChwcmV2ICYmICFpc1N0cmluZyhwcmV2KSkge1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBwcmV2KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAobmV4dFtrZXldID09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXRTdHlsZShzdHlsZSwga2V5LCAnJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuY29uc3QgaW1wb3J0YW50UkUgPSAvXFxzKiFpbXBvcnRhbnQkLztcclxuZnVuY3Rpb24gc2V0U3R5bGUoc3R5bGUsIG5hbWUsIHZhbCkge1xyXG4gICAgaWYgKGlzQXJyYXkodmFsKSkge1xyXG4gICAgICAgIHZhbC5mb3JFYWNoKHYgPT4gc2V0U3R5bGUoc3R5bGUsIG5hbWUsIHYpKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGlmIChuYW1lLnN0YXJ0c1dpdGgoJy0tJykpIHtcclxuICAgICAgICAgICAgLy8gY3VzdG9tIHByb3BlcnR5IGRlZmluaXRpb25cclxuICAgICAgICAgICAgc3R5bGUuc2V0UHJvcGVydHkobmFtZSwgdmFsKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHByZWZpeGVkID0gYXV0b1ByZWZpeChzdHlsZSwgbmFtZSk7XHJcbiAgICAgICAgICAgIGlmIChpbXBvcnRhbnRSRS50ZXN0KHZhbCkpIHtcclxuICAgICAgICAgICAgICAgIC8vICFpbXBvcnRhbnRcclxuICAgICAgICAgICAgICAgIHN0eWxlLnNldFByb3BlcnR5KGh5cGhlbmF0ZShwcmVmaXhlZCksIHZhbC5yZXBsYWNlKGltcG9ydGFudFJFLCAnJyksICdpbXBvcnRhbnQnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHN0eWxlW3ByZWZpeGVkXSA9IHZhbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5jb25zdCBwcmVmaXhlcyA9IFsnV2Via2l0JywgJ01veicsICdtcyddO1xyXG5jb25zdCBwcmVmaXhDYWNoZSA9IHt9O1xyXG5mdW5jdGlvbiBhdXRvUHJlZml4KHN0eWxlLCByYXdOYW1lKSB7XHJcbiAgICBjb25zdCBjYWNoZWQgPSBwcmVmaXhDYWNoZVtyYXdOYW1lXTtcclxuICAgIGlmIChjYWNoZWQpIHtcclxuICAgICAgICByZXR1cm4gY2FjaGVkO1xyXG4gICAgfVxyXG4gICAgbGV0IG5hbWUgPSBjYW1lbGl6ZShyYXdOYW1lKTtcclxuICAgIGlmIChuYW1lICE9PSAnZmlsdGVyJyAmJiBuYW1lIGluIHN0eWxlKSB7XHJcbiAgICAgICAgcmV0dXJuIChwcmVmaXhDYWNoZVtyYXdOYW1lXSA9IG5hbWUpO1xyXG4gICAgfVxyXG4gICAgbmFtZSA9IGNhcGl0YWxpemUobmFtZSk7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHByZWZpeGVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgY29uc3QgcHJlZml4ZWQgPSBwcmVmaXhlc1tpXSArIG5hbWU7XHJcbiAgICAgICAgaWYgKHByZWZpeGVkIGluIHN0eWxlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAocHJlZml4Q2FjaGVbcmF3TmFtZV0gPSBwcmVmaXhlZCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJhd05hbWU7XHJcbn1cblxuY29uc3QgeGxpbmtOUyA9ICdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rJztcclxuZnVuY3Rpb24gcGF0Y2hBdHRyKGVsLCBrZXksIHZhbHVlLCBpc1NWRykge1xyXG4gICAgaWYgKGlzU1ZHICYmIGtleS5zdGFydHNXaXRoKCd4bGluazonKSkge1xyXG4gICAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZU5TKHhsaW5rTlMsIGtleS5zbGljZSg2LCBrZXkubGVuZ3RoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBlbC5zZXRBdHRyaWJ1dGVOUyh4bGlua05TLCBrZXksIHZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICAvLyBub3RlIHdlIGFyZSBvbmx5IGNoZWNraW5nIGJvb2xlYW4gYXR0cmlidXRlcyB0aGF0IGRvbid0IGhhdmUgYVxyXG4gICAgICAgIC8vIGNvcnJlc3BvbmRpbmcgZG9tIHByb3Agb2YgdGhlIHNhbWUgbmFtZSBoZXJlLlxyXG4gICAgICAgIGNvbnN0IGlzQm9vbGVhbiA9IGlzU3BlY2lhbEJvb2xlYW5BdHRyKGtleSk7XHJcbiAgICAgICAgaWYgKHZhbHVlID09IG51bGwgfHwgKGlzQm9vbGVhbiAmJiB2YWx1ZSA9PT0gZmFsc2UpKSB7XHJcbiAgICAgICAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgZWwuc2V0QXR0cmlidXRlKGtleSwgaXNCb29sZWFuID8gJycgOiB2YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XG5cbi8vIF9fVU5TQUZFX19cclxuLy8gZnVuY3Rpb25zLiBUaGUgdXNlciBpcyByZXNwb25zaWJsZSBmb3IgdXNpbmcgdGhlbSB3aXRoIG9ubHkgdHJ1c3RlZCBjb250ZW50LlxyXG5mdW5jdGlvbiBwYXRjaERPTVByb3AoZWwsIGtleSwgdmFsdWUsIFxyXG4vLyB0aGUgZm9sbG93aW5nIGFyZ3MgYXJlIHBhc3NlZCBvbmx5IGR1ZSB0byBwb3RlbnRpYWwgaW5uZXJIVE1ML3RleHRDb250ZW50XHJcbi8vIG92ZXJyaWRpbmcgZXhpc3RpbmcgVk5vZGVzLCBpbiB3aGljaCBjYXNlIHRoZSBvbGQgdHJlZSBtdXN0IGJlIHByb3Blcmx5XHJcbi8vIHVubW91bnRlZC5cclxucHJldkNoaWxkcmVuLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCB1bm1vdW50Q2hpbGRyZW4pIHtcclxuICAgIGlmIChrZXkgPT09ICdpbm5lckhUTUwnIHx8IGtleSA9PT0gJ3RleHRDb250ZW50Jykge1xyXG4gICAgICAgIGlmIChwcmV2Q2hpbGRyZW4pIHtcclxuICAgICAgICAgICAgdW5tb3VudENoaWxkcmVuKHByZXZDaGlsZHJlbiwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsW2tleV0gPSB2YWx1ZSA9PSBudWxsID8gJycgOiB2YWx1ZTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBpZiAoa2V5ID09PSAndmFsdWUnICYmIGVsLnRhZ05hbWUgIT09ICdQUk9HUkVTUycpIHtcclxuICAgICAgICAvLyBzdG9yZSB2YWx1ZSBhcyBfdmFsdWUgYXMgd2VsbCBzaW5jZVxyXG4gICAgICAgIC8vIG5vbi1zdHJpbmcgdmFsdWVzIHdpbGwgYmUgc3RyaW5naWZpZWQuXHJcbiAgICAgICAgZWwuX3ZhbHVlID0gdmFsdWU7XHJcbiAgICAgICAgY29uc3QgbmV3VmFsdWUgPSB2YWx1ZSA9PSBudWxsID8gJycgOiB2YWx1ZTtcclxuICAgICAgICBpZiAoZWwudmFsdWUgIT09IG5ld1ZhbHVlKSB7XHJcbiAgICAgICAgICAgIGVsLnZhbHVlID0gbmV3VmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGlmICh2YWx1ZSA9PT0gJycgfHwgdmFsdWUgPT0gbnVsbCkge1xyXG4gICAgICAgIGNvbnN0IHR5cGUgPSB0eXBlb2YgZWxba2V5XTtcclxuICAgICAgICBpZiAodmFsdWUgPT09ICcnICYmIHR5cGUgPT09ICdib29sZWFuJykge1xyXG4gICAgICAgICAgICAvLyBlLmcuIDxzZWxlY3QgbXVsdGlwbGU+IGNvbXBpbGVzIHRvIHsgbXVsdGlwbGU6ICcnIH1cclxuICAgICAgICAgICAgZWxba2V5XSA9IHRydWU7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodmFsdWUgPT0gbnVsbCAmJiB0eXBlID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAvLyBlLmcuIDxkaXYgOmlkPVwibnVsbFwiPlxyXG4gICAgICAgICAgICBlbFtrZXldID0gJyc7XHJcbiAgICAgICAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHR5cGUgPT09ICdudW1iZXInKSB7XHJcbiAgICAgICAgICAgIC8vIGUuZy4gPGltZyA6d2lkdGg9XCJudWxsXCI+XHJcbiAgICAgICAgICAgIGVsW2tleV0gPSAwO1xyXG4gICAgICAgICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIHNvbWUgcHJvcGVydGllcyBwZXJmb3JtIHZhbHVlIHZhbGlkYXRpb24gYW5kIHRocm93XHJcbiAgICB0cnkge1xyXG4gICAgICAgIGVsW2tleV0gPSB2YWx1ZTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICB3YXJuKGBGYWlsZWQgc2V0dGluZyBwcm9wIFwiJHtrZXl9XCIgb24gPCR7ZWwudGFnTmFtZS50b0xvd2VyQ2FzZSgpfT46IGAgK1xyXG4gICAgICAgICAgICAgICAgYHZhbHVlICR7dmFsdWV9IGlzIGludmFsaWQuYCwgZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XG5cbi8vIEFzeW5jIGVkZ2UgY2FzZSBmaXggcmVxdWlyZXMgc3RvcmluZyBhbiBldmVudCBsaXN0ZW5lcidzIGF0dGFjaCB0aW1lc3RhbXAuXHJcbmxldCBfZ2V0Tm93ID0gRGF0ZS5ub3c7XHJcbi8vIERldGVybWluZSB3aGF0IGV2ZW50IHRpbWVzdGFtcCB0aGUgYnJvd3NlciBpcyB1c2luZy4gQW5ub3lpbmdseSwgdGhlXHJcbi8vIHRpbWVzdGFtcCBjYW4gZWl0aGVyIGJlIGhpLXJlcyAocmVsYXRpdmUgdG8gcGFnZSBsb2FkKSBvciBsb3ctcmVzXHJcbi8vIChyZWxhdGl2ZSB0byBVTklYIGVwb2NoKSwgc28gaW4gb3JkZXIgdG8gY29tcGFyZSB0aW1lIHdlIGhhdmUgdG8gdXNlIHRoZVxyXG4vLyBzYW1lIHRpbWVzdGFtcCB0eXBlIHdoZW4gc2F2aW5nIHRoZSBmbHVzaCB0aW1lc3RhbXAuXHJcbmlmICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmXHJcbiAgICBfZ2V0Tm93KCkgPiBkb2N1bWVudC5jcmVhdGVFdmVudCgnRXZlbnQnKS50aW1lU3RhbXApIHtcclxuICAgIC8vIGlmIHRoZSBsb3ctcmVzIHRpbWVzdGFtcCB3aGljaCBpcyBiaWdnZXIgdGhhbiB0aGUgZXZlbnQgdGltZXN0YW1wXHJcbiAgICAvLyAod2hpY2ggaXMgZXZhbHVhdGVkIEFGVEVSKSBpdCBtZWFucyB0aGUgZXZlbnQgaXMgdXNpbmcgYSBoaS1yZXMgdGltZXN0YW1wLFxyXG4gICAgLy8gYW5kIHdlIG5lZWQgdG8gdXNlIHRoZSBoaS1yZXMgdmVyc2lvbiBmb3IgZXZlbnQgbGlzdGVuZXJzIGFzIHdlbGwuXHJcbiAgICBfZ2V0Tm93ID0gKCkgPT4gcGVyZm9ybWFuY2Uubm93KCk7XHJcbn1cclxuLy8gVG8gYXZvaWQgdGhlIG92ZXJoZWFkIG9mIHJlcGVhdGVkbHkgY2FsbGluZyBwZXJmb3JtYW5jZS5ub3coKSwgd2UgY2FjaGVcclxuLy8gYW5kIHVzZSB0aGUgc2FtZSB0aW1lc3RhbXAgZm9yIGFsbCBldmVudCBsaXN0ZW5lcnMgYXR0YWNoZWQgaW4gdGhlIHNhbWUgdGljay5cclxubGV0IGNhY2hlZE5vdyA9IDA7XHJcbmNvbnN0IHAgPSBQcm9taXNlLnJlc29sdmUoKTtcclxuY29uc3QgcmVzZXQgPSAoKSA9PiB7XHJcbiAgICBjYWNoZWROb3cgPSAwO1xyXG59O1xyXG5jb25zdCBnZXROb3cgPSAoKSA9PiBjYWNoZWROb3cgfHwgKHAudGhlbihyZXNldCksIChjYWNoZWROb3cgPSBfZ2V0Tm93KCkpKTtcclxuZnVuY3Rpb24gYWRkRXZlbnRMaXN0ZW5lcihlbCwgZXZlbnQsIGhhbmRsZXIsIG9wdGlvbnMpIHtcclxuICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGhhbmRsZXIsIG9wdGlvbnMpO1xyXG59XHJcbmZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXIoZWwsIGV2ZW50LCBoYW5kbGVyLCBvcHRpb25zKSB7XHJcbiAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBoYW5kbGVyLCBvcHRpb25zKTtcclxufVxyXG5mdW5jdGlvbiBwYXRjaEV2ZW50KGVsLCByYXdOYW1lLCBwcmV2VmFsdWUsIG5leHRWYWx1ZSwgaW5zdGFuY2UgPSBudWxsKSB7XHJcbiAgICAvLyB2ZWkgPSB2dWUgZXZlbnQgaW52b2tlcnNcclxuICAgIGNvbnN0IGludm9rZXJzID0gZWwuX3ZlaSB8fCAoZWwuX3ZlaSA9IHt9KTtcclxuICAgIGNvbnN0IGV4aXN0aW5nSW52b2tlciA9IGludm9rZXJzW3Jhd05hbWVdO1xyXG4gICAgaWYgKG5leHRWYWx1ZSAmJiBleGlzdGluZ0ludm9rZXIpIHtcclxuICAgICAgICAvLyBwYXRjaFxyXG4gICAgICAgIGV4aXN0aW5nSW52b2tlci52YWx1ZSA9IG5leHRWYWx1ZTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGNvbnN0IFtuYW1lLCBvcHRpb25zXSA9IHBhcnNlTmFtZShyYXdOYW1lKTtcclxuICAgICAgICBpZiAobmV4dFZhbHVlKSB7XHJcbiAgICAgICAgICAgIC8vIGFkZFxyXG4gICAgICAgICAgICBjb25zdCBpbnZva2VyID0gKGludm9rZXJzW3Jhd05hbWVdID0gY3JlYXRlSW52b2tlcihuZXh0VmFsdWUsIGluc3RhbmNlKSk7XHJcbiAgICAgICAgICAgIGFkZEV2ZW50TGlzdGVuZXIoZWwsIG5hbWUsIGludm9rZXIsIG9wdGlvbnMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChleGlzdGluZ0ludm9rZXIpIHtcclxuICAgICAgICAgICAgLy8gcmVtb3ZlXHJcbiAgICAgICAgICAgIHJlbW92ZUV2ZW50TGlzdGVuZXIoZWwsIG5hbWUsIGV4aXN0aW5nSW52b2tlciwgb3B0aW9ucyk7XHJcbiAgICAgICAgICAgIGludm9rZXJzW3Jhd05hbWVdID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5jb25zdCBvcHRpb25zTW9kaWZpZXJSRSA9IC8oPzpPbmNlfFBhc3NpdmV8Q2FwdHVyZSkkLztcclxuZnVuY3Rpb24gcGFyc2VOYW1lKG5hbWUpIHtcclxuICAgIGxldCBvcHRpb25zO1xyXG4gICAgaWYgKG9wdGlvbnNNb2RpZmllclJFLnRlc3QobmFtZSkpIHtcclxuICAgICAgICBvcHRpb25zID0ge307XHJcbiAgICAgICAgbGV0IG07XHJcbiAgICAgICAgd2hpbGUgKChtID0gbmFtZS5tYXRjaChvcHRpb25zTW9kaWZpZXJSRSkpKSB7XHJcbiAgICAgICAgICAgIG5hbWUgPSBuYW1lLnNsaWNlKDAsIG5hbWUubGVuZ3RoIC0gbVswXS5sZW5ndGgpO1xyXG4gICAgICAgICAgICBvcHRpb25zW21bMF0udG9Mb3dlckNhc2UoKV0gPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBbbmFtZS5zbGljZSgyKS50b0xvd2VyQ2FzZSgpLCBvcHRpb25zXTtcclxufVxyXG5mdW5jdGlvbiBjcmVhdGVJbnZva2VyKGluaXRpYWxWYWx1ZSwgaW5zdGFuY2UpIHtcclxuICAgIGNvbnN0IGludm9rZXIgPSAoZSkgPT4ge1xyXG4gICAgICAgIC8vIGFzeW5jIGVkZ2UgY2FzZSAjNjU2NjogaW5uZXIgY2xpY2sgZXZlbnQgdHJpZ2dlcnMgcGF0Y2gsIGV2ZW50IGhhbmRsZXJcclxuICAgICAgICAvLyBhdHRhY2hlZCB0byBvdXRlciBlbGVtZW50IGR1cmluZyBwYXRjaCwgYW5kIHRyaWdnZXJlZCBhZ2Fpbi4gVGhpc1xyXG4gICAgICAgIC8vIGhhcHBlbnMgYmVjYXVzZSBicm93c2VycyBmaXJlIG1pY3JvdGFzayB0aWNrcyBiZXR3ZWVuIGV2ZW50IHByb3BhZ2F0aW9uLlxyXG4gICAgICAgIC8vIHRoZSBzb2x1dGlvbiBpcyBzaW1wbGU6IHdlIHNhdmUgdGhlIHRpbWVzdGFtcCB3aGVuIGEgaGFuZGxlciBpcyBhdHRhY2hlZCxcclxuICAgICAgICAvLyBhbmQgdGhlIGhhbmRsZXIgd291bGQgb25seSBmaXJlIGlmIHRoZSBldmVudCBwYXNzZWQgdG8gaXQgd2FzIGZpcmVkXHJcbiAgICAgICAgLy8gQUZURVIgaXQgd2FzIGF0dGFjaGVkLlxyXG4gICAgICAgIGNvbnN0IHRpbWVTdGFtcCA9IGUudGltZVN0YW1wIHx8IF9nZXROb3coKTtcclxuICAgICAgICBpZiAodGltZVN0YW1wID49IGludm9rZXIuYXR0YWNoZWQgLSAxKSB7XHJcbiAgICAgICAgICAgIGNhbGxXaXRoQXN5bmNFcnJvckhhbmRsaW5nKHBhdGNoU3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKGUsIGludm9rZXIudmFsdWUpLCBpbnN0YW5jZSwgNSAvKiBOQVRJVkVfRVZFTlRfSEFORExFUiAqLywgW2VdKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgaW52b2tlci52YWx1ZSA9IGluaXRpYWxWYWx1ZTtcclxuICAgIGludm9rZXIuYXR0YWNoZWQgPSBnZXROb3coKTtcclxuICAgIHJldHVybiBpbnZva2VyO1xyXG59XHJcbmZ1bmN0aW9uIHBhdGNoU3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKGUsIHZhbHVlKSB7XHJcbiAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcclxuICAgICAgICBjb25zdCBvcmlnaW5hbFN0b3AgPSBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbjtcclxuICAgICAgICBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiA9ICgpID0+IHtcclxuICAgICAgICAgICAgb3JpZ2luYWxTdG9wLmNhbGwoZSk7XHJcbiAgICAgICAgICAgIGUuX3N0b3BwZWQgPSB0cnVlO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlLm1hcChmbiA9PiAoZSkgPT4gIWUuX3N0b3BwZWQgJiYgZm4oZSkpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgfVxyXG59XG5cbmNvbnN0IG5hdGl2ZU9uUkUgPSAvXm9uW2Etel0vO1xyXG5jb25zdCBmb3JjZVBhdGNoUHJvcCA9IChfLCBrZXkpID0+IGtleSA9PT0gJ3ZhbHVlJztcclxuY29uc3QgcGF0Y2hQcm9wID0gKGVsLCBrZXksIHByZXZWYWx1ZSwgbmV4dFZhbHVlLCBpc1NWRyA9IGZhbHNlLCBwcmV2Q2hpbGRyZW4sIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHVubW91bnRDaGlsZHJlbikgPT4ge1xyXG4gICAgc3dpdGNoIChrZXkpIHtcclxuICAgICAgICAvLyBzcGVjaWFsXHJcbiAgICAgICAgY2FzZSAnY2xhc3MnOlxyXG4gICAgICAgICAgICBwYXRjaENsYXNzKGVsLCBuZXh0VmFsdWUsIGlzU1ZHKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAnc3R5bGUnOlxyXG4gICAgICAgICAgICBwYXRjaFN0eWxlKGVsLCBwcmV2VmFsdWUsIG5leHRWYWx1ZSk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgIGlmIChpc09uKGtleSkpIHtcclxuICAgICAgICAgICAgICAgIC8vIGlnbm9yZSB2LW1vZGVsIGxpc3RlbmVyc1xyXG4gICAgICAgICAgICAgICAgaWYgKCFpc01vZGVsTGlzdGVuZXIoa2V5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHBhdGNoRXZlbnQoZWwsIGtleSwgcHJldlZhbHVlLCBuZXh0VmFsdWUsIHBhcmVudENvbXBvbmVudCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoc2hvdWxkU2V0QXNQcm9wKGVsLCBrZXksIG5leHRWYWx1ZSwgaXNTVkcpKSB7XHJcbiAgICAgICAgICAgICAgICBwYXRjaERPTVByb3AoZWwsIGtleSwgbmV4dFZhbHVlLCBwcmV2Q2hpbGRyZW4sIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHVubW91bnRDaGlsZHJlbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBzcGVjaWFsIGNhc2UgZm9yIDxpbnB1dCB2LW1vZGVsIHR5cGU9XCJjaGVja2JveFwiPiB3aXRoXHJcbiAgICAgICAgICAgICAgICAvLyA6dHJ1ZS12YWx1ZSAmIDpmYWxzZS12YWx1ZVxyXG4gICAgICAgICAgICAgICAgLy8gc3RvcmUgdmFsdWUgYXMgZG9tIHByb3BlcnRpZXMgc2luY2Ugbm9uLXN0cmluZyB2YWx1ZXMgd2lsbCBiZVxyXG4gICAgICAgICAgICAgICAgLy8gc3RyaW5naWZpZWQuXHJcbiAgICAgICAgICAgICAgICBpZiAoa2V5ID09PSAndHJ1ZS12YWx1ZScpIHtcclxuICAgICAgICAgICAgICAgICAgICBlbC5fdHJ1ZVZhbHVlID0gbmV4dFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoa2V5ID09PSAnZmFsc2UtdmFsdWUnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZWwuX2ZhbHNlVmFsdWUgPSBuZXh0VmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBwYXRjaEF0dHIoZWwsIGtleSwgbmV4dFZhbHVlLCBpc1NWRyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbn07XHJcbmZ1bmN0aW9uIHNob3VsZFNldEFzUHJvcChlbCwga2V5LCB2YWx1ZSwgaXNTVkcpIHtcclxuICAgIGlmIChpc1NWRykge1xyXG4gICAgICAgIC8vIG1vc3Qga2V5cyBtdXN0IGJlIHNldCBhcyBhdHRyaWJ1dGUgb24gc3ZnIGVsZW1lbnRzIHRvIHdvcmtcclxuICAgICAgICAvLyAuLi5leGNlcHQgaW5uZXJIVE1MXHJcbiAgICAgICAgaWYgKGtleSA9PT0gJ2lubmVySFRNTCcpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIG9yIG5hdGl2ZSBvbmNsaWNrIHdpdGggZnVuY3Rpb24gdmFsdWVzXHJcbiAgICAgICAgaWYgKGtleSBpbiBlbCAmJiBuYXRpdmVPblJFLnRlc3Qoa2V5KSAmJiBpc0Z1bmN0aW9uKHZhbHVlKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgLy8gc3BlbGxjaGVjayBhbmQgZHJhZ2dhYmxlIGFyZSBudW1lcmF0ZWQgYXR0cnMsIGhvd2V2ZXIgdGhlaXJcclxuICAgIC8vIGNvcnJlc3BvbmRpbmcgRE9NIHByb3BlcnRpZXMgYXJlIGFjdHVhbGx5IGJvb2xlYW5zIC0gdGhpcyBsZWFkcyB0b1xyXG4gICAgLy8gc2V0dGluZyBpdCB3aXRoIGEgc3RyaW5nIFwiZmFsc2VcIiB2YWx1ZSBsZWFkaW5nIGl0IHRvIGJlIGNvZXJjZWQgdG9cclxuICAgIC8vIGB0cnVlYCwgc28gd2UgbmVlZCB0byBhbHdheXMgdHJlYXQgdGhlbSBhcyBhdHRyaWJ1dGVzLlxyXG4gICAgLy8gTm90ZSB0aGF0IGBjb250ZW50RWRpdGFibGVgIGRvZXNuJ3QgaGF2ZSB0aGlzIHByb2JsZW06IGl0cyBET01cclxuICAgIC8vIHByb3BlcnR5IGlzIGFsc28gZW51bWVyYXRlZCBzdHJpbmcgdmFsdWVzLlxyXG4gICAgaWYgKGtleSA9PT0gJ3NwZWxsY2hlY2snIHx8IGtleSA9PT0gJ2RyYWdnYWJsZScpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICAvLyAjMTc4NyBmb3JtIGFzIGFuIGF0dHJpYnV0ZSBtdXN0IGJlIGEgc3RyaW5nLCB3aGlsZSBpdCBhY2NlcHRzIGFuIEVsZW1lbnQgYXNcclxuICAgIC8vIGEgcHJvcFxyXG4gICAgaWYgKGtleSA9PT0gJ2Zvcm0nICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICAvLyAjMTUyNiA8aW5wdXQgbGlzdD4gbXVzdCBiZSBzZXQgYXMgYXR0cmlidXRlXHJcbiAgICBpZiAoa2V5ID09PSAnbGlzdCcgJiYgZWwudGFnTmFtZSA9PT0gJ0lOUFVUJykge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIC8vIG5hdGl2ZSBvbmNsaWNrIHdpdGggc3RyaW5nIHZhbHVlLCBtdXN0IGJlIHNldCBhcyBhdHRyaWJ1dGVcclxuICAgIGlmIChuYXRpdmVPblJFLnRlc3Qoa2V5KSAmJiBpc1N0cmluZyh2YWx1ZSkpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICByZXR1cm4ga2V5IGluIGVsO1xyXG59XG5cbmZ1bmN0aW9uIHVzZUNzc01vZHVsZShuYW1lID0gJyRzdHlsZScpIHtcclxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXHJcbiAgICB7XHJcbiAgICAgICAgY29uc3QgaW5zdGFuY2UgPSBnZXRDdXJyZW50SW5zdGFuY2UoKTtcclxuICAgICAgICBpZiAoIWluc3RhbmNlKSB7XHJcbiAgICAgICAgICAgIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiB3YXJuKGB1c2VDc3NNb2R1bGUgbXVzdCBiZSBjYWxsZWQgaW5zaWRlIHNldHVwKClgKTtcclxuICAgICAgICAgICAgcmV0dXJuIEVNUFRZX09CSjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgbW9kdWxlcyA9IGluc3RhbmNlLnR5cGUuX19jc3NNb2R1bGVzO1xyXG4gICAgICAgIGlmICghbW9kdWxlcykge1xyXG4gICAgICAgICAgICAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgd2FybihgQ3VycmVudCBpbnN0YW5jZSBkb2VzIG5vdCBoYXZlIENTUyBtb2R1bGVzIGluamVjdGVkLmApO1xyXG4gICAgICAgICAgICByZXR1cm4gRU1QVFlfT0JKO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBtb2QgPSBtb2R1bGVzW25hbWVdO1xyXG4gICAgICAgIGlmICghbW9kKSB7XHJcbiAgICAgICAgICAgIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJlxyXG4gICAgICAgICAgICAgICAgd2FybihgQ3VycmVudCBpbnN0YW5jZSBkb2VzIG5vdCBoYXZlIENTUyBtb2R1bGUgbmFtZWQgXCIke25hbWV9XCIuYCk7XHJcbiAgICAgICAgICAgIHJldHVybiBFTVBUWV9PQko7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBtb2Q7XHJcbiAgICB9XHJcbn1cblxuLyoqXHJcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciBTRkMncyBDU1MgdmFyaWFibGUgaW5qZWN0aW9uIGZlYXR1cmUuXHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG5mdW5jdGlvbiB1c2VDc3NWYXJzKGdldHRlcikge1xyXG4gICAgY29uc3QgaW5zdGFuY2UgPSBnZXRDdXJyZW50SW5zdGFuY2UoKTtcclxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXHJcbiAgICBpZiAoIWluc3RhbmNlKSB7XHJcbiAgICAgICAgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmXHJcbiAgICAgICAgICAgIHdhcm4oYHVzZUNzc1ZhcnMgaXMgY2FsbGVkIHdpdGhvdXQgY3VycmVudCBhY3RpdmUgY29tcG9uZW50IGluc3RhbmNlLmApO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGNvbnN0IHNldFZhcnMgPSAoKSA9PiBzZXRWYXJzT25WTm9kZShpbnN0YW5jZS5zdWJUcmVlLCBnZXR0ZXIoaW5zdGFuY2UucHJveHkpKTtcclxuICAgIG9uTW91bnRlZCgoKSA9PiB3YXRjaEVmZmVjdChzZXRWYXJzLCB7IGZsdXNoOiAncG9zdCcgfSkpO1xyXG4gICAgb25VcGRhdGVkKHNldFZhcnMpO1xyXG59XHJcbmZ1bmN0aW9uIHNldFZhcnNPblZOb2RlKHZub2RlLCB2YXJzKSB7XHJcbiAgICBpZiAoIHZub2RlLnNoYXBlRmxhZyAmIDEyOCAvKiBTVVNQRU5TRSAqLykge1xyXG4gICAgICAgIGNvbnN0IHN1c3BlbnNlID0gdm5vZGUuc3VzcGVuc2U7XHJcbiAgICAgICAgdm5vZGUgPSBzdXNwZW5zZS5hY3RpdmVCcmFuY2g7XHJcbiAgICAgICAgaWYgKHN1c3BlbnNlLnBlbmRpbmdCcmFuY2ggJiYgIXN1c3BlbnNlLmlzSHlkcmF0aW5nKSB7XHJcbiAgICAgICAgICAgIHN1c3BlbnNlLmVmZmVjdHMucHVzaCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBzZXRWYXJzT25WTm9kZShzdXNwZW5zZS5hY3RpdmVCcmFuY2gsIHZhcnMpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyBkcmlsbCBkb3duIEhPQ3MgdW50aWwgaXQncyBhIG5vbi1jb21wb25lbnQgdm5vZGVcclxuICAgIHdoaWxlICh2bm9kZS5jb21wb25lbnQpIHtcclxuICAgICAgICB2bm9kZSA9IHZub2RlLmNvbXBvbmVudC5zdWJUcmVlO1xyXG4gICAgfVxyXG4gICAgaWYgKHZub2RlLnNoYXBlRmxhZyAmIDEgLyogRUxFTUVOVCAqLyAmJiB2bm9kZS5lbCkge1xyXG4gICAgICAgIGNvbnN0IHN0eWxlID0gdm5vZGUuZWwuc3R5bGU7XHJcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gdmFycykge1xyXG4gICAgICAgICAgICBzdHlsZS5zZXRQcm9wZXJ0eShgLS0ke2tleX1gLCB2YXJzW2tleV0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2UgaWYgKHZub2RlLnR5cGUgPT09IEZyYWdtZW50KSB7XHJcbiAgICAgICAgdm5vZGUuY2hpbGRyZW4uZm9yRWFjaChjID0+IHNldFZhcnNPblZOb2RlKGMsIHZhcnMpKTtcclxuICAgIH1cclxufVxuXG5jb25zdCBUUkFOU0lUSU9OID0gJ3RyYW5zaXRpb24nO1xyXG5jb25zdCBBTklNQVRJT04gPSAnYW5pbWF0aW9uJztcclxuLy8gRE9NIFRyYW5zaXRpb24gaXMgYSBoaWdoZXItb3JkZXItY29tcG9uZW50IGJhc2VkIG9uIHRoZSBwbGF0Zm9ybS1hZ25vc3RpY1xyXG4vLyBiYXNlIFRyYW5zaXRpb24gY29tcG9uZW50LCB3aXRoIERPTS1zcGVjaWZpYyBsb2dpYy5cclxuY29uc3QgVHJhbnNpdGlvbiA9IChwcm9wcywgeyBzbG90cyB9KSA9PiBoKEJhc2VUcmFuc2l0aW9uLCByZXNvbHZlVHJhbnNpdGlvblByb3BzKHByb3BzKSwgc2xvdHMpO1xyXG5UcmFuc2l0aW9uLmRpc3BsYXlOYW1lID0gJ1RyYW5zaXRpb24nO1xyXG5jb25zdCBET01UcmFuc2l0aW9uUHJvcHNWYWxpZGF0b3JzID0ge1xyXG4gICAgbmFtZTogU3RyaW5nLFxyXG4gICAgdHlwZTogU3RyaW5nLFxyXG4gICAgY3NzOiB7XHJcbiAgICAgICAgdHlwZTogQm9vbGVhbixcclxuICAgICAgICBkZWZhdWx0OiB0cnVlXHJcbiAgICB9LFxyXG4gICAgZHVyYXRpb246IFtTdHJpbmcsIE51bWJlciwgT2JqZWN0XSxcclxuICAgIGVudGVyRnJvbUNsYXNzOiBTdHJpbmcsXHJcbiAgICBlbnRlckFjdGl2ZUNsYXNzOiBTdHJpbmcsXHJcbiAgICBlbnRlclRvQ2xhc3M6IFN0cmluZyxcclxuICAgIGFwcGVhckZyb21DbGFzczogU3RyaW5nLFxyXG4gICAgYXBwZWFyQWN0aXZlQ2xhc3M6IFN0cmluZyxcclxuICAgIGFwcGVhclRvQ2xhc3M6IFN0cmluZyxcclxuICAgIGxlYXZlRnJvbUNsYXNzOiBTdHJpbmcsXHJcbiAgICBsZWF2ZUFjdGl2ZUNsYXNzOiBTdHJpbmcsXHJcbiAgICBsZWF2ZVRvQ2xhc3M6IFN0cmluZ1xyXG59O1xyXG5jb25zdCBUcmFuc2l0aW9uUHJvcHNWYWxpZGF0b3JzID0gKFRyYW5zaXRpb24ucHJvcHMgPSAvKiNfX1BVUkVfXyovIGV4dGVuZCh7fSwgQmFzZVRyYW5zaXRpb24ucHJvcHMsIERPTVRyYW5zaXRpb25Qcm9wc1ZhbGlkYXRvcnMpKTtcclxuZnVuY3Rpb24gcmVzb2x2ZVRyYW5zaXRpb25Qcm9wcyhyYXdQcm9wcykge1xyXG4gICAgbGV0IHsgbmFtZSA9ICd2JywgdHlwZSwgY3NzID0gdHJ1ZSwgZHVyYXRpb24sIGVudGVyRnJvbUNsYXNzID0gYCR7bmFtZX0tZW50ZXItZnJvbWAsIGVudGVyQWN0aXZlQ2xhc3MgPSBgJHtuYW1lfS1lbnRlci1hY3RpdmVgLCBlbnRlclRvQ2xhc3MgPSBgJHtuYW1lfS1lbnRlci10b2AsIGFwcGVhckZyb21DbGFzcyA9IGVudGVyRnJvbUNsYXNzLCBhcHBlYXJBY3RpdmVDbGFzcyA9IGVudGVyQWN0aXZlQ2xhc3MsIGFwcGVhclRvQ2xhc3MgPSBlbnRlclRvQ2xhc3MsIGxlYXZlRnJvbUNsYXNzID0gYCR7bmFtZX0tbGVhdmUtZnJvbWAsIGxlYXZlQWN0aXZlQ2xhc3MgPSBgJHtuYW1lfS1sZWF2ZS1hY3RpdmVgLCBsZWF2ZVRvQ2xhc3MgPSBgJHtuYW1lfS1sZWF2ZS10b2AgfSA9IHJhd1Byb3BzO1xyXG4gICAgY29uc3QgYmFzZVByb3BzID0ge307XHJcbiAgICBmb3IgKGNvbnN0IGtleSBpbiByYXdQcm9wcykge1xyXG4gICAgICAgIGlmICghKGtleSBpbiBET01UcmFuc2l0aW9uUHJvcHNWYWxpZGF0b3JzKSkge1xyXG4gICAgICAgICAgICBiYXNlUHJvcHNba2V5XSA9IHJhd1Byb3BzW2tleV07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKCFjc3MpIHtcclxuICAgICAgICByZXR1cm4gYmFzZVByb3BzO1xyXG4gICAgfVxyXG4gICAgY29uc3QgZHVyYXRpb25zID0gbm9ybWFsaXplRHVyYXRpb24oZHVyYXRpb24pO1xyXG4gICAgY29uc3QgZW50ZXJEdXJhdGlvbiA9IGR1cmF0aW9ucyAmJiBkdXJhdGlvbnNbMF07XHJcbiAgICBjb25zdCBsZWF2ZUR1cmF0aW9uID0gZHVyYXRpb25zICYmIGR1cmF0aW9uc1sxXTtcclxuICAgIGNvbnN0IHsgb25CZWZvcmVFbnRlciwgb25FbnRlciwgb25FbnRlckNhbmNlbGxlZCwgb25MZWF2ZSwgb25MZWF2ZUNhbmNlbGxlZCwgb25CZWZvcmVBcHBlYXIgPSBvbkJlZm9yZUVudGVyLCBvbkFwcGVhciA9IG9uRW50ZXIsIG9uQXBwZWFyQ2FuY2VsbGVkID0gb25FbnRlckNhbmNlbGxlZCB9ID0gYmFzZVByb3BzO1xyXG4gICAgY29uc3QgZmluaXNoRW50ZXIgPSAoZWwsIGlzQXBwZWFyLCBkb25lKSA9PiB7XHJcbiAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBpc0FwcGVhciA/IGFwcGVhclRvQ2xhc3MgOiBlbnRlclRvQ2xhc3MpO1xyXG4gICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgaXNBcHBlYXIgPyBhcHBlYXJBY3RpdmVDbGFzcyA6IGVudGVyQWN0aXZlQ2xhc3MpO1xyXG4gICAgICAgIGRvbmUgJiYgZG9uZSgpO1xyXG4gICAgfTtcclxuICAgIGNvbnN0IGZpbmlzaExlYXZlID0gKGVsLCBkb25lKSA9PiB7XHJcbiAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZVRvQ2xhc3MpO1xyXG4gICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVBY3RpdmVDbGFzcyk7XHJcbiAgICAgICAgZG9uZSAmJiBkb25lKCk7XHJcbiAgICB9O1xyXG4gICAgY29uc3QgbWFrZUVudGVySG9vayA9IChpc0FwcGVhcikgPT4ge1xyXG4gICAgICAgIHJldHVybiAoZWwsIGRvbmUpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgaG9vayA9IGlzQXBwZWFyID8gb25BcHBlYXIgOiBvbkVudGVyO1xyXG4gICAgICAgICAgICBjb25zdCByZXNvbHZlID0gKCkgPT4gZmluaXNoRW50ZXIoZWwsIGlzQXBwZWFyLCBkb25lKTtcclxuICAgICAgICAgICAgaG9vayAmJiBob29rKGVsLCByZXNvbHZlKTtcclxuICAgICAgICAgICAgbmV4dEZyYW1lKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgaXNBcHBlYXIgPyBhcHBlYXJGcm9tQ2xhc3MgOiBlbnRlckZyb21DbGFzcyk7XHJcbiAgICAgICAgICAgICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGlzQXBwZWFyID8gYXBwZWFyVG9DbGFzcyA6IGVudGVyVG9DbGFzcyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIShob29rICYmIGhvb2subGVuZ3RoID4gMSkpIHtcclxuICAgICAgICAgICAgICAgICAgICB3aGVuVHJhbnNpdGlvbkVuZHMoZWwsIHR5cGUsIGVudGVyRHVyYXRpb24sIHJlc29sdmUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG4gICAgfTtcclxuICAgIHJldHVybiBleHRlbmQoYmFzZVByb3BzLCB7XHJcbiAgICAgICAgb25CZWZvcmVFbnRlcihlbCkge1xyXG4gICAgICAgICAgICBvbkJlZm9yZUVudGVyICYmIG9uQmVmb3JlRW50ZXIoZWwpO1xyXG4gICAgICAgICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGVudGVyQWN0aXZlQ2xhc3MpO1xyXG4gICAgICAgICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGVudGVyRnJvbUNsYXNzKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIG9uQmVmb3JlQXBwZWFyKGVsKSB7XHJcbiAgICAgICAgICAgIG9uQmVmb3JlQXBwZWFyICYmIG9uQmVmb3JlQXBwZWFyKGVsKTtcclxuICAgICAgICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBhcHBlYXJBY3RpdmVDbGFzcyk7XHJcbiAgICAgICAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgYXBwZWFyRnJvbUNsYXNzKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIG9uRW50ZXI6IG1ha2VFbnRlckhvb2soZmFsc2UpLFxyXG4gICAgICAgIG9uQXBwZWFyOiBtYWtlRW50ZXJIb29rKHRydWUpLFxyXG4gICAgICAgIG9uTGVhdmUoZWwsIGRvbmUpIHtcclxuICAgICAgICAgICAgY29uc3QgcmVzb2x2ZSA9ICgpID0+IGZpbmlzaExlYXZlKGVsLCBkb25lKTtcclxuICAgICAgICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUFjdGl2ZUNsYXNzKTtcclxuICAgICAgICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUZyb21DbGFzcyk7XHJcbiAgICAgICAgICAgIC8vIHJlZiAjMjUzMSwgIzI1OTNcclxuICAgICAgICAgICAgLy8gZGlzYWJsaW5nIHRoZSB0cmFuc2l0aW9uIGJlZm9yZSBuZXh0RnJhbWUgZW5zdXJlcyBzdHlsZXMgZnJvbVxyXG4gICAgICAgICAgICAvLyAqLWxlYXZlLWZyb20gYW5kICotZW50ZXItZnJvbSBjbGFzc2VzIGFyZSBhcHBsaWVkIGluc3RhbnRseSBiZWZvcmVcclxuICAgICAgICAgICAgLy8gdGhlIHRyYW5zaXRpb24gc3RhcnRzLiBUaGlzIGlzIGFwcGxpZWQgZm9yIGVudGVyIHRyYW5zaXRpb24gYXMgd2VsbFxyXG4gICAgICAgICAgICAvLyBzbyB0aGF0IGl0IGFjY291bnRzIGZvciBgdmlzaWJpbGl0eTogaGlkZGVuYCBjYXNlcy5cclxuICAgICAgICAgICAgY29uc3QgY2FjaGVkVHJhbnNpdGlvbiA9IGVsLnN0eWxlLnRyYW5zaXRpb25Qcm9wZXJ0eTtcclxuICAgICAgICAgICAgZWwuc3R5bGUudHJhbnNpdGlvblByb3BlcnR5ID0gJ25vbmUnO1xyXG4gICAgICAgICAgICBuZXh0RnJhbWUoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgZWwuc3R5bGUudHJhbnNpdGlvblByb3BlcnR5ID0gY2FjaGVkVHJhbnNpdGlvbjtcclxuICAgICAgICAgICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVGcm9tQ2xhc3MpO1xyXG4gICAgICAgICAgICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZVRvQ2xhc3MpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCEob25MZWF2ZSAmJiBvbkxlYXZlLmxlbmd0aCA+IDEpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2hlblRyYW5zaXRpb25FbmRzKGVsLCB0eXBlLCBsZWF2ZUR1cmF0aW9uLCByZXNvbHZlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIG9uTGVhdmUgJiYgb25MZWF2ZShlbCwgcmVzb2x2ZSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBvbkVudGVyQ2FuY2VsbGVkKGVsKSB7XHJcbiAgICAgICAgICAgIGZpbmlzaEVudGVyKGVsLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIG9uRW50ZXJDYW5jZWxsZWQgJiYgb25FbnRlckNhbmNlbGxlZChlbCk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBvbkFwcGVhckNhbmNlbGxlZChlbCkge1xyXG4gICAgICAgICAgICBmaW5pc2hFbnRlcihlbCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIG9uQXBwZWFyQ2FuY2VsbGVkICYmIG9uQXBwZWFyQ2FuY2VsbGVkKGVsKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIG9uTGVhdmVDYW5jZWxsZWQoZWwpIHtcclxuICAgICAgICAgICAgZmluaXNoTGVhdmUoZWwpO1xyXG4gICAgICAgICAgICBvbkxlYXZlQ2FuY2VsbGVkICYmIG9uTGVhdmVDYW5jZWxsZWQoZWwpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59XHJcbmZ1bmN0aW9uIG5vcm1hbGl6ZUR1cmF0aW9uKGR1cmF0aW9uKSB7XHJcbiAgICBpZiAoZHVyYXRpb24gPT0gbnVsbCkge1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoaXNPYmplY3QoZHVyYXRpb24pKSB7XHJcbiAgICAgICAgcmV0dXJuIFtOdW1iZXJPZihkdXJhdGlvbi5lbnRlciksIE51bWJlck9mKGR1cmF0aW9uLmxlYXZlKV07XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBjb25zdCBuID0gTnVtYmVyT2YoZHVyYXRpb24pO1xyXG4gICAgICAgIHJldHVybiBbbiwgbl07XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gTnVtYmVyT2YodmFsKSB7XHJcbiAgICBjb25zdCByZXMgPSB0b051bWJlcih2YWwpO1xyXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSlcclxuICAgICAgICB2YWxpZGF0ZUR1cmF0aW9uKHJlcyk7XHJcbiAgICByZXR1cm4gcmVzO1xyXG59XHJcbmZ1bmN0aW9uIHZhbGlkYXRlRHVyYXRpb24odmFsKSB7XHJcbiAgICBpZiAodHlwZW9mIHZhbCAhPT0gJ251bWJlcicpIHtcclxuICAgICAgICB3YXJuKGA8dHJhbnNpdGlvbj4gZXhwbGljaXQgZHVyYXRpb24gaXMgbm90IGEgdmFsaWQgbnVtYmVyIC0gYCArXHJcbiAgICAgICAgICAgIGBnb3QgJHtKU09OLnN0cmluZ2lmeSh2YWwpfS5gKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGlzTmFOKHZhbCkpIHtcclxuICAgICAgICB3YXJuKGA8dHJhbnNpdGlvbj4gZXhwbGljaXQgZHVyYXRpb24gaXMgTmFOIC0gYCArXHJcbiAgICAgICAgICAgICd0aGUgZHVyYXRpb24gZXhwcmVzc2lvbiBtaWdodCBiZSBpbmNvcnJlY3QuJyk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBjbHMpIHtcclxuICAgIGNscy5zcGxpdCgvXFxzKy8pLmZvckVhY2goYyA9PiBjICYmIGVsLmNsYXNzTGlzdC5hZGQoYykpO1xyXG4gICAgKGVsLl92dGMgfHxcclxuICAgICAgICAoZWwuX3Z0YyA9IG5ldyBTZXQoKSkpLmFkZChjbHMpO1xyXG59XHJcbmZ1bmN0aW9uIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgY2xzKSB7XHJcbiAgICBjbHMuc3BsaXQoL1xccysvKS5mb3JFYWNoKGMgPT4gYyAmJiBlbC5jbGFzc0xpc3QucmVtb3ZlKGMpKTtcclxuICAgIGNvbnN0IHsgX3Z0YyB9ID0gZWw7XHJcbiAgICBpZiAoX3Z0Yykge1xyXG4gICAgICAgIF92dGMuZGVsZXRlKGNscyk7XHJcbiAgICAgICAgaWYgKCFfdnRjLnNpemUpIHtcclxuICAgICAgICAgICAgZWwuX3Z0YyA9IHVuZGVmaW5lZDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gbmV4dEZyYW1lKGNiKSB7XHJcbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xyXG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShjYik7XHJcbiAgICB9KTtcclxufVxyXG5sZXQgZW5kSWQgPSAwO1xyXG5mdW5jdGlvbiB3aGVuVHJhbnNpdGlvbkVuZHMoZWwsIGV4cGVjdGVkVHlwZSwgZXhwbGljaXRUaW1lb3V0LCByZXNvbHZlKSB7XHJcbiAgICBjb25zdCBpZCA9IChlbC5fZW5kSWQgPSArK2VuZElkKTtcclxuICAgIGNvbnN0IHJlc29sdmVJZk5vdFN0YWxlID0gKCkgPT4ge1xyXG4gICAgICAgIGlmIChpZCA9PT0gZWwuX2VuZElkKSB7XHJcbiAgICAgICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgaWYgKGV4cGxpY2l0VGltZW91dCkge1xyXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KHJlc29sdmVJZk5vdFN0YWxlLCBleHBsaWNpdFRpbWVvdXQpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgeyB0eXBlLCB0aW1lb3V0LCBwcm9wQ291bnQgfSA9IGdldFRyYW5zaXRpb25JbmZvKGVsLCBleHBlY3RlZFR5cGUpO1xyXG4gICAgaWYgKCF0eXBlKSB7XHJcbiAgICAgICAgcmV0dXJuIHJlc29sdmUoKTtcclxuICAgIH1cclxuICAgIGNvbnN0IGVuZEV2ZW50ID0gdHlwZSArICdlbmQnO1xyXG4gICAgbGV0IGVuZGVkID0gMDtcclxuICAgIGNvbnN0IGVuZCA9ICgpID0+IHtcclxuICAgICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKGVuZEV2ZW50LCBvbkVuZCk7XHJcbiAgICAgICAgcmVzb2x2ZUlmTm90U3RhbGUoKTtcclxuICAgIH07XHJcbiAgICBjb25zdCBvbkVuZCA9IChlKSA9PiB7XHJcbiAgICAgICAgaWYgKGUudGFyZ2V0ID09PSBlbCAmJiArK2VuZGVkID49IHByb3BDb3VudCkge1xyXG4gICAgICAgICAgICBlbmQoKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgaWYgKGVuZGVkIDwgcHJvcENvdW50KSB7XHJcbiAgICAgICAgICAgIGVuZCgpO1xyXG4gICAgICAgIH1cclxuICAgIH0sIHRpbWVvdXQgKyAxKTtcclxuICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoZW5kRXZlbnQsIG9uRW5kKTtcclxufVxyXG5mdW5jdGlvbiBnZXRUcmFuc2l0aW9uSW5mbyhlbCwgZXhwZWN0ZWRUeXBlKSB7XHJcbiAgICBjb25zdCBzdHlsZXMgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCk7XHJcbiAgICAvLyBKU0RPTSBtYXkgcmV0dXJuIHVuZGVmaW5lZCBmb3IgdHJhbnNpdGlvbiBwcm9wZXJ0aWVzXHJcbiAgICBjb25zdCBnZXRTdHlsZVByb3BlcnRpZXMgPSAoa2V5KSA9PiAoc3R5bGVzW2tleV0gfHwgJycpLnNwbGl0KCcsICcpO1xyXG4gICAgY29uc3QgdHJhbnNpdGlvbkRlbGF5cyA9IGdldFN0eWxlUHJvcGVydGllcyhUUkFOU0lUSU9OICsgJ0RlbGF5Jyk7XHJcbiAgICBjb25zdCB0cmFuc2l0aW9uRHVyYXRpb25zID0gZ2V0U3R5bGVQcm9wZXJ0aWVzKFRSQU5TSVRJT04gKyAnRHVyYXRpb24nKTtcclxuICAgIGNvbnN0IHRyYW5zaXRpb25UaW1lb3V0ID0gZ2V0VGltZW91dCh0cmFuc2l0aW9uRGVsYXlzLCB0cmFuc2l0aW9uRHVyYXRpb25zKTtcclxuICAgIGNvbnN0IGFuaW1hdGlvbkRlbGF5cyA9IGdldFN0eWxlUHJvcGVydGllcyhBTklNQVRJT04gKyAnRGVsYXknKTtcclxuICAgIGNvbnN0IGFuaW1hdGlvbkR1cmF0aW9ucyA9IGdldFN0eWxlUHJvcGVydGllcyhBTklNQVRJT04gKyAnRHVyYXRpb24nKTtcclxuICAgIGNvbnN0IGFuaW1hdGlvblRpbWVvdXQgPSBnZXRUaW1lb3V0KGFuaW1hdGlvbkRlbGF5cywgYW5pbWF0aW9uRHVyYXRpb25zKTtcclxuICAgIGxldCB0eXBlID0gbnVsbDtcclxuICAgIGxldCB0aW1lb3V0ID0gMDtcclxuICAgIGxldCBwcm9wQ291bnQgPSAwO1xyXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXHJcbiAgICBpZiAoZXhwZWN0ZWRUeXBlID09PSBUUkFOU0lUSU9OKSB7XHJcbiAgICAgICAgaWYgKHRyYW5zaXRpb25UaW1lb3V0ID4gMCkge1xyXG4gICAgICAgICAgICB0eXBlID0gVFJBTlNJVElPTjtcclxuICAgICAgICAgICAgdGltZW91dCA9IHRyYW5zaXRpb25UaW1lb3V0O1xyXG4gICAgICAgICAgICBwcm9wQ291bnQgPSB0cmFuc2l0aW9uRHVyYXRpb25zLmxlbmd0aDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChleHBlY3RlZFR5cGUgPT09IEFOSU1BVElPTikge1xyXG4gICAgICAgIGlmIChhbmltYXRpb25UaW1lb3V0ID4gMCkge1xyXG4gICAgICAgICAgICB0eXBlID0gQU5JTUFUSU9OO1xyXG4gICAgICAgICAgICB0aW1lb3V0ID0gYW5pbWF0aW9uVGltZW91dDtcclxuICAgICAgICAgICAgcHJvcENvdW50ID0gYW5pbWF0aW9uRHVyYXRpb25zLmxlbmd0aDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICB0aW1lb3V0ID0gTWF0aC5tYXgodHJhbnNpdGlvblRpbWVvdXQsIGFuaW1hdGlvblRpbWVvdXQpO1xyXG4gICAgICAgIHR5cGUgPVxyXG4gICAgICAgICAgICB0aW1lb3V0ID4gMFxyXG4gICAgICAgICAgICAgICAgPyB0cmFuc2l0aW9uVGltZW91dCA+IGFuaW1hdGlvblRpbWVvdXRcclxuICAgICAgICAgICAgICAgICAgICA/IFRSQU5TSVRJT05cclxuICAgICAgICAgICAgICAgICAgICA6IEFOSU1BVElPTlxyXG4gICAgICAgICAgICAgICAgOiBudWxsO1xyXG4gICAgICAgIHByb3BDb3VudCA9IHR5cGVcclxuICAgICAgICAgICAgPyB0eXBlID09PSBUUkFOU0lUSU9OXHJcbiAgICAgICAgICAgICAgICA/IHRyYW5zaXRpb25EdXJhdGlvbnMubGVuZ3RoXHJcbiAgICAgICAgICAgICAgICA6IGFuaW1hdGlvbkR1cmF0aW9ucy5sZW5ndGhcclxuICAgICAgICAgICAgOiAwO1xyXG4gICAgfVxyXG4gICAgY29uc3QgaGFzVHJhbnNmb3JtID0gdHlwZSA9PT0gVFJBTlNJVElPTiAmJlxyXG4gICAgICAgIC9cXGIodHJhbnNmb3JtfGFsbCkoLHwkKS8udGVzdChzdHlsZXNbVFJBTlNJVElPTiArICdQcm9wZXJ0eSddKTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgdHlwZSxcclxuICAgICAgICB0aW1lb3V0LFxyXG4gICAgICAgIHByb3BDb3VudCxcclxuICAgICAgICBoYXNUcmFuc2Zvcm1cclxuICAgIH07XHJcbn1cclxuZnVuY3Rpb24gZ2V0VGltZW91dChkZWxheXMsIGR1cmF0aW9ucykge1xyXG4gICAgd2hpbGUgKGRlbGF5cy5sZW5ndGggPCBkdXJhdGlvbnMubGVuZ3RoKSB7XHJcbiAgICAgICAgZGVsYXlzID0gZGVsYXlzLmNvbmNhdChkZWxheXMpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIE1hdGgubWF4KC4uLmR1cmF0aW9ucy5tYXAoKGQsIGkpID0+IHRvTXMoZCkgKyB0b01zKGRlbGF5c1tpXSkpKTtcclxufVxyXG4vLyBPbGQgdmVyc2lvbnMgb2YgQ2hyb21pdW0gKGJlbG93IDYxLjAuMzE2My4xMDApIGZvcm1hdHMgZmxvYXRpbmcgcG9pbnRlclxyXG4vLyBudW1iZXJzIGluIGEgbG9jYWxlLWRlcGVuZGVudCB3YXksIHVzaW5nIGEgY29tbWEgaW5zdGVhZCBvZiBhIGRvdC5cclxuLy8gSWYgY29tbWEgaXMgbm90IHJlcGxhY2VkIHdpdGggYSBkb3QsIHRoZSBpbnB1dCB3aWxsIGJlIHJvdW5kZWQgZG93blxyXG4vLyAoaS5lLiBhY3RpbmcgYXMgYSBmbG9vciBmdW5jdGlvbikgY2F1c2luZyB1bmV4cGVjdGVkIGJlaGF2aW9yc1xyXG5mdW5jdGlvbiB0b01zKHMpIHtcclxuICAgIHJldHVybiBOdW1iZXIocy5zbGljZSgwLCAtMSkucmVwbGFjZSgnLCcsICcuJykpICogMTAwMDtcclxufVxuXG5jb25zdCBwb3NpdGlvbk1hcCA9IG5ldyBXZWFrTWFwKCk7XHJcbmNvbnN0IG5ld1Bvc2l0aW9uTWFwID0gbmV3IFdlYWtNYXAoKTtcclxuY29uc3QgVHJhbnNpdGlvbkdyb3VwSW1wbCA9IHtcclxuICAgIG5hbWU6ICdUcmFuc2l0aW9uR3JvdXAnLFxyXG4gICAgcHJvcHM6IC8qI19fUFVSRV9fKi8gZXh0ZW5kKHt9LCBUcmFuc2l0aW9uUHJvcHNWYWxpZGF0b3JzLCB7XHJcbiAgICAgICAgdGFnOiBTdHJpbmcsXHJcbiAgICAgICAgbW92ZUNsYXNzOiBTdHJpbmdcclxuICAgIH0pLFxyXG4gICAgc2V0dXAocHJvcHMsIHsgc2xvdHMgfSkge1xyXG4gICAgICAgIGNvbnN0IGluc3RhbmNlID0gZ2V0Q3VycmVudEluc3RhbmNlKCk7XHJcbiAgICAgICAgY29uc3Qgc3RhdGUgPSB1c2VUcmFuc2l0aW9uU3RhdGUoKTtcclxuICAgICAgICBsZXQgcHJldkNoaWxkcmVuO1xyXG4gICAgICAgIGxldCBjaGlsZHJlbjtcclxuICAgICAgICBvblVwZGF0ZWQoKCkgPT4ge1xyXG4gICAgICAgICAgICAvLyBjaGlsZHJlbiBpcyBndWFyYW50ZWVkIHRvIGV4aXN0IGFmdGVyIGluaXRpYWwgcmVuZGVyXHJcbiAgICAgICAgICAgIGlmICghcHJldkNoaWxkcmVuLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IG1vdmVDbGFzcyA9IHByb3BzLm1vdmVDbGFzcyB8fCBgJHtwcm9wcy5uYW1lIHx8ICd2J30tbW92ZWA7XHJcbiAgICAgICAgICAgIGlmICghaGFzQ1NTVHJhbnNmb3JtKHByZXZDaGlsZHJlblswXS5lbCwgaW5zdGFuY2Uudm5vZGUuZWwsIG1vdmVDbGFzcykpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyB3ZSBkaXZpZGUgdGhlIHdvcmsgaW50byB0aHJlZSBsb29wcyB0byBhdm9pZCBtaXhpbmcgRE9NIHJlYWRzIGFuZCB3cml0ZXNcclxuICAgICAgICAgICAgLy8gaW4gZWFjaCBpdGVyYXRpb24gLSB3aGljaCBoZWxwcyBwcmV2ZW50IGxheW91dCB0aHJhc2hpbmcuXHJcbiAgICAgICAgICAgIHByZXZDaGlsZHJlbi5mb3JFYWNoKGNhbGxQZW5kaW5nQ2JzKTtcclxuICAgICAgICAgICAgcHJldkNoaWxkcmVuLmZvckVhY2gocmVjb3JkUG9zaXRpb24pO1xyXG4gICAgICAgICAgICBjb25zdCBtb3ZlZENoaWxkcmVuID0gcHJldkNoaWxkcmVuLmZpbHRlcihhcHBseVRyYW5zbGF0aW9uKTtcclxuICAgICAgICAgICAgLy8gZm9yY2UgcmVmbG93IHRvIHB1dCBldmVyeXRoaW5nIGluIHBvc2l0aW9uXHJcbiAgICAgICAgICAgIGZvcmNlUmVmbG93KCk7XHJcbiAgICAgICAgICAgIG1vdmVkQ2hpbGRyZW4uZm9yRWFjaChjID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGVsID0gYy5lbDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHN0eWxlID0gZWwuc3R5bGU7XHJcbiAgICAgICAgICAgICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIG1vdmVDbGFzcyk7XHJcbiAgICAgICAgICAgICAgICBzdHlsZS50cmFuc2Zvcm0gPSBzdHlsZS53ZWJraXRUcmFuc2Zvcm0gPSBzdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSAnJztcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNiID0gKGVsLl9tb3ZlQ2IgPSAoZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlICYmIGUudGFyZ2V0ICE9PSBlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghZSB8fCAvdHJhbnNmb3JtJC8udGVzdChlLnByb3BlcnR5TmFtZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIGNiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWwuX21vdmVDYiA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbW92ZUNsYXNzKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBjYik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiAoKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJhd1Byb3BzID0gdG9SYXcocHJvcHMpO1xyXG4gICAgICAgICAgICBjb25zdCBjc3NUcmFuc2l0aW9uUHJvcHMgPSByZXNvbHZlVHJhbnNpdGlvblByb3BzKHJhd1Byb3BzKTtcclxuICAgICAgICAgICAgY29uc3QgdGFnID0gcmF3UHJvcHMudGFnIHx8IEZyYWdtZW50O1xyXG4gICAgICAgICAgICBwcmV2Q2hpbGRyZW4gPSBjaGlsZHJlbjtcclxuICAgICAgICAgICAgY2hpbGRyZW4gPSBzbG90cy5kZWZhdWx0ID8gZ2V0VHJhbnNpdGlvblJhd0NoaWxkcmVuKHNsb3RzLmRlZmF1bHQoKSkgOiBbXTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY2hpbGQgPSBjaGlsZHJlbltpXTtcclxuICAgICAgICAgICAgICAgIGlmIChjaGlsZC5rZXkgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNldFRyYW5zaXRpb25Ib29rcyhjaGlsZCwgcmVzb2x2ZVRyYW5zaXRpb25Ib29rcyhjaGlsZCwgY3NzVHJhbnNpdGlvblByb3BzLCBzdGF0ZSwgaW5zdGFuY2UpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHdhcm4oYDxUcmFuc2l0aW9uR3JvdXA+IGNoaWxkcmVuIG11c3QgYmUga2V5ZWQuYCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHByZXZDaGlsZHJlbikge1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcmV2Q2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjaGlsZCA9IHByZXZDaGlsZHJlbltpXTtcclxuICAgICAgICAgICAgICAgICAgICBzZXRUcmFuc2l0aW9uSG9va3MoY2hpbGQsIHJlc29sdmVUcmFuc2l0aW9uSG9va3MoY2hpbGQsIGNzc1RyYW5zaXRpb25Qcm9wcywgc3RhdGUsIGluc3RhbmNlKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb25NYXAuc2V0KGNoaWxkLCBjaGlsZC5lbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZVZOb2RlKHRhZywgbnVsbCwgY2hpbGRyZW4pO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn07XHJcbmNvbnN0IFRyYW5zaXRpb25Hcm91cCA9IFRyYW5zaXRpb25Hcm91cEltcGw7XHJcbmZ1bmN0aW9uIGNhbGxQZW5kaW5nQ2JzKGMpIHtcclxuICAgIGNvbnN0IGVsID0gYy5lbDtcclxuICAgIGlmIChlbC5fbW92ZUNiKSB7XHJcbiAgICAgICAgZWwuX21vdmVDYigpO1xyXG4gICAgfVxyXG4gICAgaWYgKGVsLl9lbnRlckNiKSB7XHJcbiAgICAgICAgZWwuX2VudGVyQ2IoKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiByZWNvcmRQb3NpdGlvbihjKSB7XHJcbiAgICBuZXdQb3NpdGlvbk1hcC5zZXQoYywgYy5lbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSk7XHJcbn1cclxuZnVuY3Rpb24gYXBwbHlUcmFuc2xhdGlvbihjKSB7XHJcbiAgICBjb25zdCBvbGRQb3MgPSBwb3NpdGlvbk1hcC5nZXQoYyk7XHJcbiAgICBjb25zdCBuZXdQb3MgPSBuZXdQb3NpdGlvbk1hcC5nZXQoYyk7XHJcbiAgICBjb25zdCBkeCA9IG9sZFBvcy5sZWZ0IC0gbmV3UG9zLmxlZnQ7XHJcbiAgICBjb25zdCBkeSA9IG9sZFBvcy50b3AgLSBuZXdQb3MudG9wO1xyXG4gICAgaWYgKGR4IHx8IGR5KSB7XHJcbiAgICAgICAgY29uc3QgcyA9IGMuZWwuc3R5bGU7XHJcbiAgICAgICAgcy50cmFuc2Zvcm0gPSBzLndlYmtpdFRyYW5zZm9ybSA9IGB0cmFuc2xhdGUoJHtkeH1weCwke2R5fXB4KWA7XHJcbiAgICAgICAgcy50cmFuc2l0aW9uRHVyYXRpb24gPSAnMHMnO1xyXG4gICAgICAgIHJldHVybiBjO1xyXG4gICAgfVxyXG59XHJcbi8vIHRoaXMgaXMgcHV0IGluIGEgZGVkaWNhdGVkIGZ1bmN0aW9uIHRvIGF2b2lkIHRoZSBsaW5lIGZyb20gYmVpbmcgdHJlZXNoYWtlblxyXG5mdW5jdGlvbiBmb3JjZVJlZmxvdygpIHtcclxuICAgIHJldHVybiBkb2N1bWVudC5ib2R5Lm9mZnNldEhlaWdodDtcclxufVxyXG5mdW5jdGlvbiBoYXNDU1NUcmFuc2Zvcm0oZWwsIHJvb3QsIG1vdmVDbGFzcykge1xyXG4gICAgLy8gRGV0ZWN0IHdoZXRoZXIgYW4gZWxlbWVudCB3aXRoIHRoZSBtb3ZlIGNsYXNzIGFwcGxpZWQgaGFzXHJcbiAgICAvLyBDU1MgdHJhbnNpdGlvbnMuIFNpbmNlIHRoZSBlbGVtZW50IG1heSBiZSBpbnNpZGUgYW4gZW50ZXJpbmdcclxuICAgIC8vIHRyYW5zaXRpb24gYXQgdGhpcyB2ZXJ5IG1vbWVudCwgd2UgbWFrZSBhIGNsb25lIG9mIGl0IGFuZCByZW1vdmVcclxuICAgIC8vIGFsbCBvdGhlciB0cmFuc2l0aW9uIGNsYXNzZXMgYXBwbGllZCB0byBlbnN1cmUgb25seSB0aGUgbW92ZSBjbGFzc1xyXG4gICAgLy8gaXMgYXBwbGllZC5cclxuICAgIGNvbnN0IGNsb25lID0gZWwuY2xvbmVOb2RlKCk7XHJcbiAgICBpZiAoZWwuX3Z0Yykge1xyXG4gICAgICAgIGVsLl92dGMuZm9yRWFjaChjbHMgPT4ge1xyXG4gICAgICAgICAgICBjbHMuc3BsaXQoL1xccysvKS5mb3JFYWNoKGMgPT4gYyAmJiBjbG9uZS5jbGFzc0xpc3QucmVtb3ZlKGMpKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIG1vdmVDbGFzcy5zcGxpdCgvXFxzKy8pLmZvckVhY2goYyA9PiBjICYmIGNsb25lLmNsYXNzTGlzdC5hZGQoYykpO1xyXG4gICAgY2xvbmUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgIGNvbnN0IGNvbnRhaW5lciA9IChyb290Lm5vZGVUeXBlID09PSAxXHJcbiAgICAgICAgPyByb290XHJcbiAgICAgICAgOiByb290LnBhcmVudE5vZGUpO1xyXG4gICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGNsb25lKTtcclxuICAgIGNvbnN0IHsgaGFzVHJhbnNmb3JtIH0gPSBnZXRUcmFuc2l0aW9uSW5mbyhjbG9uZSk7XHJcbiAgICBjb250YWluZXIucmVtb3ZlQ2hpbGQoY2xvbmUpO1xyXG4gICAgcmV0dXJuIGhhc1RyYW5zZm9ybTtcclxufVxuXG5jb25zdCBnZXRNb2RlbEFzc2lnbmVyID0gKHZub2RlKSA9PiB7XHJcbiAgICBjb25zdCBmbiA9IHZub2RlLnByb3BzWydvblVwZGF0ZTptb2RlbFZhbHVlJ107XHJcbiAgICByZXR1cm4gaXNBcnJheShmbikgPyB2YWx1ZSA9PiBpbnZva2VBcnJheUZucyhmbiwgdmFsdWUpIDogZm47XHJcbn07XHJcbmZ1bmN0aW9uIG9uQ29tcG9zaXRpb25TdGFydChlKSB7XHJcbiAgICBlLnRhcmdldC5jb21wb3NpbmcgPSB0cnVlO1xyXG59XHJcbmZ1bmN0aW9uIG9uQ29tcG9zaXRpb25FbmQoZSkge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gZS50YXJnZXQ7XHJcbiAgICBpZiAodGFyZ2V0LmNvbXBvc2luZykge1xyXG4gICAgICAgIHRhcmdldC5jb21wb3NpbmcgPSBmYWxzZTtcclxuICAgICAgICB0cmlnZ2VyKHRhcmdldCwgJ2lucHV0Jyk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gdHJpZ2dlcihlbCwgdHlwZSkge1xyXG4gICAgY29uc3QgZSA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdIVE1MRXZlbnRzJyk7XHJcbiAgICBlLmluaXRFdmVudCh0eXBlLCB0cnVlLCB0cnVlKTtcclxuICAgIGVsLmRpc3BhdGNoRXZlbnQoZSk7XHJcbn1cclxuLy8gV2UgYXJlIGV4cG9ydGluZyB0aGUgdi1tb2RlbCBydW50aW1lIGRpcmVjdGx5IGFzIHZub2RlIGhvb2tzIHNvIHRoYXQgaXQgY2FuXHJcbi8vIGJlIHRyZWUtc2hha2VuIGluIGNhc2Ugdi1tb2RlbCBpcyBuZXZlciB1c2VkLlxyXG5jb25zdCB2TW9kZWxUZXh0ID0ge1xyXG4gICAgY3JlYXRlZChlbCwgeyBtb2RpZmllcnM6IHsgbGF6eSwgdHJpbSwgbnVtYmVyIH0gfSwgdm5vZGUpIHtcclxuICAgICAgICBlbC5fYXNzaWduID0gZ2V0TW9kZWxBc3NpZ25lcih2bm9kZSk7XHJcbiAgICAgICAgY29uc3QgY2FzdFRvTnVtYmVyID0gbnVtYmVyIHx8IGVsLnR5cGUgPT09ICdudW1iZXInO1xyXG4gICAgICAgIGFkZEV2ZW50TGlzdGVuZXIoZWwsIGxhenkgPyAnY2hhbmdlJyA6ICdpbnB1dCcsIGUgPT4ge1xyXG4gICAgICAgICAgICBpZiAoZS50YXJnZXQuY29tcG9zaW5nKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICBsZXQgZG9tVmFsdWUgPSBlbC52YWx1ZTtcclxuICAgICAgICAgICAgaWYgKHRyaW0pIHtcclxuICAgICAgICAgICAgICAgIGRvbVZhbHVlID0gZG9tVmFsdWUudHJpbSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGNhc3RUb051bWJlcikge1xyXG4gICAgICAgICAgICAgICAgZG9tVmFsdWUgPSB0b051bWJlcihkb21WYWx1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWwuX2Fzc2lnbihkb21WYWx1ZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaWYgKHRyaW0pIHtcclxuICAgICAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcihlbCwgJ2NoYW5nZScsICgpID0+IHtcclxuICAgICAgICAgICAgICAgIGVsLnZhbHVlID0gZWwudmFsdWUudHJpbSgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFsYXp5KSB7XHJcbiAgICAgICAgICAgIGFkZEV2ZW50TGlzdGVuZXIoZWwsICdjb21wb3NpdGlvbnN0YXJ0Jywgb25Db21wb3NpdGlvblN0YXJ0KTtcclxuICAgICAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcihlbCwgJ2NvbXBvc2l0aW9uZW5kJywgb25Db21wb3NpdGlvbkVuZCk7XHJcbiAgICAgICAgICAgIC8vIFNhZmFyaSA8IDEwLjIgJiBVSVdlYlZpZXcgZG9lc24ndCBmaXJlIGNvbXBvc2l0aW9uZW5kIHdoZW5cclxuICAgICAgICAgICAgLy8gc3dpdGNoaW5nIGZvY3VzIGJlZm9yZSBjb25maXJtaW5nIGNvbXBvc2l0aW9uIGNob2ljZVxyXG4gICAgICAgICAgICAvLyB0aGlzIGFsc28gZml4ZXMgdGhlIGlzc3VlIHdoZXJlIHNvbWUgYnJvd3NlcnMgZS5nLiBpT1MgQ2hyb21lXHJcbiAgICAgICAgICAgIC8vIGZpcmVzIFwiY2hhbmdlXCIgaW5zdGVhZCBvZiBcImlucHV0XCIgb24gYXV0b2NvbXBsZXRlLlxyXG4gICAgICAgICAgICBhZGRFdmVudExpc3RlbmVyKGVsLCAnY2hhbmdlJywgb25Db21wb3NpdGlvbkVuZCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIC8vIHNldCB2YWx1ZSBvbiBtb3VudGVkIHNvIGl0J3MgYWZ0ZXIgbWluL21heCBmb3IgdHlwZT1cInJhbmdlXCJcclxuICAgIG1vdW50ZWQoZWwsIHsgdmFsdWUgfSkge1xyXG4gICAgICAgIGVsLnZhbHVlID0gdmFsdWUgPT0gbnVsbCA/ICcnIDogdmFsdWU7XHJcbiAgICB9LFxyXG4gICAgYmVmb3JlVXBkYXRlKGVsLCB7IHZhbHVlLCBtb2RpZmllcnM6IHsgdHJpbSwgbnVtYmVyIH0gfSwgdm5vZGUpIHtcclxuICAgICAgICBlbC5fYXNzaWduID0gZ2V0TW9kZWxBc3NpZ25lcih2bm9kZSk7XHJcbiAgICAgICAgLy8gYXZvaWQgY2xlYXJpbmcgdW5yZXNvbHZlZCB0ZXh0LiAjMjMwMlxyXG4gICAgICAgIGlmIChlbC5jb21wb3NpbmcpXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICBpZiAoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCA9PT0gZWwpIHtcclxuICAgICAgICAgICAgaWYgKHRyaW0gJiYgZWwudmFsdWUudHJpbSgpID09PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICgobnVtYmVyIHx8IGVsLnR5cGUgPT09ICdudW1iZXInKSAmJiB0b051bWJlcihlbC52YWx1ZSkgPT09IHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgbmV3VmFsdWUgPSB2YWx1ZSA9PSBudWxsID8gJycgOiB2YWx1ZTtcclxuICAgICAgICBpZiAoZWwudmFsdWUgIT09IG5ld1ZhbHVlKSB7XHJcbiAgICAgICAgICAgIGVsLnZhbHVlID0gbmV3VmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59O1xyXG5jb25zdCB2TW9kZWxDaGVja2JveCA9IHtcclxuICAgIGNyZWF0ZWQoZWwsIF8sIHZub2RlKSB7XHJcbiAgICAgICAgZWwuX2Fzc2lnbiA9IGdldE1vZGVsQXNzaWduZXIodm5vZGUpO1xyXG4gICAgICAgIGFkZEV2ZW50TGlzdGVuZXIoZWwsICdjaGFuZ2UnLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IG1vZGVsVmFsdWUgPSBlbC5fbW9kZWxWYWx1ZTtcclxuICAgICAgICAgICAgY29uc3QgZWxlbWVudFZhbHVlID0gZ2V0VmFsdWUoZWwpO1xyXG4gICAgICAgICAgICBjb25zdCBjaGVja2VkID0gZWwuY2hlY2tlZDtcclxuICAgICAgICAgICAgY29uc3QgYXNzaWduID0gZWwuX2Fzc2lnbjtcclxuICAgICAgICAgICAgaWYgKGlzQXJyYXkobW9kZWxWYWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gbG9vc2VJbmRleE9mKG1vZGVsVmFsdWUsIGVsZW1lbnRWYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBmb3VuZCA9IGluZGV4ICE9PSAtMTtcclxuICAgICAgICAgICAgICAgIGlmIChjaGVja2VkICYmICFmb3VuZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFzc2lnbihtb2RlbFZhbHVlLmNvbmNhdChlbGVtZW50VmFsdWUpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKCFjaGVja2VkICYmIGZvdW5kKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZmlsdGVyZWQgPSBbLi4ubW9kZWxWYWx1ZV07XHJcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyZWQuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICAgICAgICAgICAgICBhc3NpZ24oZmlsdGVyZWQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGlzU2V0KG1vZGVsVmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjbG9uZWQgPSBuZXcgU2V0KG1vZGVsVmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNoZWNrZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBjbG9uZWQuYWRkKGVsZW1lbnRWYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjbG9uZWQuZGVsZXRlKGVsZW1lbnRWYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBhc3NpZ24oY2xvbmVkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGFzc2lnbihnZXRDaGVja2JveFZhbHVlKGVsLCBjaGVja2VkKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0sXHJcbiAgICAvLyBzZXQgaW5pdGlhbCBjaGVja2VkIG9uIG1vdW50IHRvIHdhaXQgZm9yIHRydWUtdmFsdWUvZmFsc2UtdmFsdWVcclxuICAgIG1vdW50ZWQ6IHNldENoZWNrZWQsXHJcbiAgICBiZWZvcmVVcGRhdGUoZWwsIGJpbmRpbmcsIHZub2RlKSB7XHJcbiAgICAgICAgZWwuX2Fzc2lnbiA9IGdldE1vZGVsQXNzaWduZXIodm5vZGUpO1xyXG4gICAgICAgIHNldENoZWNrZWQoZWwsIGJpbmRpbmcsIHZub2RlKTtcclxuICAgIH1cclxufTtcclxuZnVuY3Rpb24gc2V0Q2hlY2tlZChlbCwgeyB2YWx1ZSwgb2xkVmFsdWUgfSwgdm5vZGUpIHtcclxuICAgIGVsLl9tb2RlbFZhbHVlID0gdmFsdWU7XHJcbiAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcclxuICAgICAgICBlbC5jaGVja2VkID0gbG9vc2VJbmRleE9mKHZhbHVlLCB2bm9kZS5wcm9wcy52YWx1ZSkgPiAtMTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGlzU2V0KHZhbHVlKSkge1xyXG4gICAgICAgIGVsLmNoZWNrZWQgPSB2YWx1ZS5oYXModm5vZGUucHJvcHMudmFsdWUpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAodmFsdWUgIT09IG9sZFZhbHVlKSB7XHJcbiAgICAgICAgZWwuY2hlY2tlZCA9IGxvb3NlRXF1YWwodmFsdWUsIGdldENoZWNrYm94VmFsdWUoZWwsIHRydWUpKTtcclxuICAgIH1cclxufVxyXG5jb25zdCB2TW9kZWxSYWRpbyA9IHtcclxuICAgIGNyZWF0ZWQoZWwsIHsgdmFsdWUgfSwgdm5vZGUpIHtcclxuICAgICAgICBlbC5jaGVja2VkID0gbG9vc2VFcXVhbCh2YWx1ZSwgdm5vZGUucHJvcHMudmFsdWUpO1xyXG4gICAgICAgIGVsLl9hc3NpZ24gPSBnZXRNb2RlbEFzc2lnbmVyKHZub2RlKTtcclxuICAgICAgICBhZGRFdmVudExpc3RlbmVyKGVsLCAnY2hhbmdlJywgKCkgPT4ge1xyXG4gICAgICAgICAgICBlbC5fYXNzaWduKGdldFZhbHVlKGVsKSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9LFxyXG4gICAgYmVmb3JlVXBkYXRlKGVsLCB7IHZhbHVlLCBvbGRWYWx1ZSB9LCB2bm9kZSkge1xyXG4gICAgICAgIGVsLl9hc3NpZ24gPSBnZXRNb2RlbEFzc2lnbmVyKHZub2RlKTtcclxuICAgICAgICBpZiAodmFsdWUgIT09IG9sZFZhbHVlKSB7XHJcbiAgICAgICAgICAgIGVsLmNoZWNrZWQgPSBsb29zZUVxdWFsKHZhbHVlLCB2bm9kZS5wcm9wcy52YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59O1xyXG5jb25zdCB2TW9kZWxTZWxlY3QgPSB7XHJcbiAgICBjcmVhdGVkKGVsLCB7IHZhbHVlLCBtb2RpZmllcnM6IHsgbnVtYmVyIH0gfSwgdm5vZGUpIHtcclxuICAgICAgICBjb25zdCBpc1NldE1vZGVsID0gaXNTZXQodmFsdWUpO1xyXG4gICAgICAgIGFkZEV2ZW50TGlzdGVuZXIoZWwsICdjaGFuZ2UnLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHNlbGVjdGVkVmFsID0gQXJyYXkucHJvdG90eXBlLmZpbHRlclxyXG4gICAgICAgICAgICAgICAgLmNhbGwoZWwub3B0aW9ucywgKG8pID0+IG8uc2VsZWN0ZWQpXHJcbiAgICAgICAgICAgICAgICAubWFwKChvKSA9PiBudW1iZXIgPyB0b051bWJlcihnZXRWYWx1ZShvKSkgOiBnZXRWYWx1ZShvKSk7XHJcbiAgICAgICAgICAgIGVsLl9hc3NpZ24oZWwubXVsdGlwbGVcclxuICAgICAgICAgICAgICAgID8gaXNTZXRNb2RlbFxyXG4gICAgICAgICAgICAgICAgICAgID8gbmV3IFNldChzZWxlY3RlZFZhbClcclxuICAgICAgICAgICAgICAgICAgICA6IHNlbGVjdGVkVmFsXHJcbiAgICAgICAgICAgICAgICA6IHNlbGVjdGVkVmFsWzBdKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBlbC5fYXNzaWduID0gZ2V0TW9kZWxBc3NpZ25lcih2bm9kZSk7XHJcbiAgICB9LFxyXG4gICAgLy8gc2V0IHZhbHVlIGluIG1vdW50ZWQgJiB1cGRhdGVkIGJlY2F1c2UgPHNlbGVjdD4gcmVsaWVzIG9uIGl0cyBjaGlsZHJlblxyXG4gICAgLy8gPG9wdGlvbj5zLlxyXG4gICAgbW91bnRlZChlbCwgeyB2YWx1ZSB9KSB7XHJcbiAgICAgICAgc2V0U2VsZWN0ZWQoZWwsIHZhbHVlKTtcclxuICAgIH0sXHJcbiAgICBiZWZvcmVVcGRhdGUoZWwsIF9iaW5kaW5nLCB2bm9kZSkge1xyXG4gICAgICAgIGVsLl9hc3NpZ24gPSBnZXRNb2RlbEFzc2lnbmVyKHZub2RlKTtcclxuICAgIH0sXHJcbiAgICB1cGRhdGVkKGVsLCB7IHZhbHVlIH0pIHtcclxuICAgICAgICBzZXRTZWxlY3RlZChlbCwgdmFsdWUpO1xyXG4gICAgfVxyXG59O1xyXG5mdW5jdGlvbiBzZXRTZWxlY3RlZChlbCwgdmFsdWUpIHtcclxuICAgIGNvbnN0IGlzTXVsdGlwbGUgPSBlbC5tdWx0aXBsZTtcclxuICAgIGlmIChpc011bHRpcGxlICYmICFpc0FycmF5KHZhbHVlKSAmJiAhaXNTZXQodmFsdWUpKSB7XHJcbiAgICAgICAgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmXHJcbiAgICAgICAgICAgIHdhcm4oYDxzZWxlY3QgbXVsdGlwbGUgdi1tb2RlbD4gZXhwZWN0cyBhbiBBcnJheSBvciBTZXQgdmFsdWUgZm9yIGl0cyBiaW5kaW5nLCBgICtcclxuICAgICAgICAgICAgICAgIGBidXQgZ290ICR7T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKS5zbGljZSg4LCAtMSl9LmApO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGZvciAobGV0IGkgPSAwLCBsID0gZWwub3B0aW9ucy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcclxuICAgICAgICBjb25zdCBvcHRpb24gPSBlbC5vcHRpb25zW2ldO1xyXG4gICAgICAgIGNvbnN0IG9wdGlvblZhbHVlID0gZ2V0VmFsdWUob3B0aW9uKTtcclxuICAgICAgICBpZiAoaXNNdWx0aXBsZSkge1xyXG4gICAgICAgICAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgIG9wdGlvbi5zZWxlY3RlZCA9IGxvb3NlSW5kZXhPZih2YWx1ZSwgb3B0aW9uVmFsdWUpID4gLTE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBvcHRpb24uc2VsZWN0ZWQgPSB2YWx1ZS5oYXMob3B0aW9uVmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAobG9vc2VFcXVhbChnZXRWYWx1ZShvcHRpb24pLCB2YWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgIGVsLnNlbGVjdGVkSW5kZXggPSBpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKCFpc011bHRpcGxlKSB7XHJcbiAgICAgICAgZWwuc2VsZWN0ZWRJbmRleCA9IC0xO1xyXG4gICAgfVxyXG59XHJcbi8vIHJldHJpZXZlIHJhdyB2YWx1ZSBzZXQgdmlhIDp2YWx1ZSBiaW5kaW5nc1xyXG5mdW5jdGlvbiBnZXRWYWx1ZShlbCkge1xyXG4gICAgcmV0dXJuICdfdmFsdWUnIGluIGVsID8gZWwuX3ZhbHVlIDogZWwudmFsdWU7XHJcbn1cclxuLy8gcmV0cmlldmUgcmF3IHZhbHVlIGZvciB0cnVlLXZhbHVlIGFuZCBmYWxzZS12YWx1ZSBzZXQgdmlhIDp0cnVlLXZhbHVlIG9yIDpmYWxzZS12YWx1ZSBiaW5kaW5nc1xyXG5mdW5jdGlvbiBnZXRDaGVja2JveFZhbHVlKGVsLCBjaGVja2VkKSB7XHJcbiAgICBjb25zdCBrZXkgPSBjaGVja2VkID8gJ190cnVlVmFsdWUnIDogJ19mYWxzZVZhbHVlJztcclxuICAgIHJldHVybiBrZXkgaW4gZWwgPyBlbFtrZXldIDogY2hlY2tlZDtcclxufVxyXG5jb25zdCB2TW9kZWxEeW5hbWljID0ge1xyXG4gICAgY3JlYXRlZChlbCwgYmluZGluZywgdm5vZGUpIHtcclxuICAgICAgICBjYWxsTW9kZWxIb29rKGVsLCBiaW5kaW5nLCB2bm9kZSwgbnVsbCwgJ2NyZWF0ZWQnKTtcclxuICAgIH0sXHJcbiAgICBtb3VudGVkKGVsLCBiaW5kaW5nLCB2bm9kZSkge1xyXG4gICAgICAgIGNhbGxNb2RlbEhvb2soZWwsIGJpbmRpbmcsIHZub2RlLCBudWxsLCAnbW91bnRlZCcpO1xyXG4gICAgfSxcclxuICAgIGJlZm9yZVVwZGF0ZShlbCwgYmluZGluZywgdm5vZGUsIHByZXZWTm9kZSkge1xyXG4gICAgICAgIGNhbGxNb2RlbEhvb2soZWwsIGJpbmRpbmcsIHZub2RlLCBwcmV2Vk5vZGUsICdiZWZvcmVVcGRhdGUnKTtcclxuICAgIH0sXHJcbiAgICB1cGRhdGVkKGVsLCBiaW5kaW5nLCB2bm9kZSwgcHJldlZOb2RlKSB7XHJcbiAgICAgICAgY2FsbE1vZGVsSG9vayhlbCwgYmluZGluZywgdm5vZGUsIHByZXZWTm9kZSwgJ3VwZGF0ZWQnKTtcclxuICAgIH1cclxufTtcclxuZnVuY3Rpb24gY2FsbE1vZGVsSG9vayhlbCwgYmluZGluZywgdm5vZGUsIHByZXZWTm9kZSwgaG9vaykge1xyXG4gICAgbGV0IG1vZGVsVG9Vc2U7XHJcbiAgICBzd2l0Y2ggKGVsLnRhZ05hbWUpIHtcclxuICAgICAgICBjYXNlICdTRUxFQ1QnOlxyXG4gICAgICAgICAgICBtb2RlbFRvVXNlID0gdk1vZGVsU2VsZWN0O1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlICdURVhUQVJFQSc6XHJcbiAgICAgICAgICAgIG1vZGVsVG9Vc2UgPSB2TW9kZWxUZXh0O1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICBzd2l0Y2ggKHZub2RlLnByb3BzICYmIHZub2RlLnByb3BzLnR5cGUpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2NoZWNrYm94JzpcclxuICAgICAgICAgICAgICAgICAgICBtb2RlbFRvVXNlID0gdk1vZGVsQ2hlY2tib3g7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdyYWRpbyc6XHJcbiAgICAgICAgICAgICAgICAgICAgbW9kZWxUb1VzZSA9IHZNb2RlbFJhZGlvO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBtb2RlbFRvVXNlID0gdk1vZGVsVGV4dDtcclxuICAgICAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY29uc3QgZm4gPSBtb2RlbFRvVXNlW2hvb2tdO1xyXG4gICAgZm4gJiYgZm4oZWwsIGJpbmRpbmcsIHZub2RlLCBwcmV2Vk5vZGUpO1xyXG59XG5cbmNvbnN0IHN5c3RlbU1vZGlmaWVycyA9IFsnY3RybCcsICdzaGlmdCcsICdhbHQnLCAnbWV0YSddO1xyXG5jb25zdCBtb2RpZmllckd1YXJkcyA9IHtcclxuICAgIHN0b3A6IGUgPT4gZS5zdG9wUHJvcGFnYXRpb24oKSxcclxuICAgIHByZXZlbnQ6IGUgPT4gZS5wcmV2ZW50RGVmYXVsdCgpLFxyXG4gICAgc2VsZjogZSA9PiBlLnRhcmdldCAhPT0gZS5jdXJyZW50VGFyZ2V0LFxyXG4gICAgY3RybDogZSA9PiAhZS5jdHJsS2V5LFxyXG4gICAgc2hpZnQ6IGUgPT4gIWUuc2hpZnRLZXksXHJcbiAgICBhbHQ6IGUgPT4gIWUuYWx0S2V5LFxyXG4gICAgbWV0YTogZSA9PiAhZS5tZXRhS2V5LFxyXG4gICAgbGVmdDogZSA9PiAnYnV0dG9uJyBpbiBlICYmIGUuYnV0dG9uICE9PSAwLFxyXG4gICAgbWlkZGxlOiBlID0+ICdidXR0b24nIGluIGUgJiYgZS5idXR0b24gIT09IDEsXHJcbiAgICByaWdodDogZSA9PiAnYnV0dG9uJyBpbiBlICYmIGUuYnV0dG9uICE9PSAyLFxyXG4gICAgZXhhY3Q6IChlLCBtb2RpZmllcnMpID0+IHN5c3RlbU1vZGlmaWVycy5zb21lKG0gPT4gZVtgJHttfUtleWBdICYmICFtb2RpZmllcnMuaW5jbHVkZXMobSkpXHJcbn07XHJcbi8qKlxyXG4gKiBAcHJpdmF0ZVxyXG4gKi9cclxuY29uc3Qgd2l0aE1vZGlmaWVycyA9IChmbiwgbW9kaWZpZXJzKSA9PiB7XHJcbiAgICByZXR1cm4gKGV2ZW50LCAuLi5hcmdzKSA9PiB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtb2RpZmllcnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgY29uc3QgZ3VhcmQgPSBtb2RpZmllckd1YXJkc1ttb2RpZmllcnNbaV1dO1xyXG4gICAgICAgICAgICBpZiAoZ3VhcmQgJiYgZ3VhcmQoZXZlbnQsIG1vZGlmaWVycykpXHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmbihldmVudCwgLi4uYXJncyk7XHJcbiAgICB9O1xyXG59O1xyXG4vLyBLZXB0IGZvciAyLnggY29tcGF0LlxyXG4vLyBOb3RlOiBJRTExIGNvbXBhdCBmb3IgYHNwYWNlYmFyYCBhbmQgYGRlbGAgaXMgcmVtb3ZlZCBmb3Igbm93LlxyXG5jb25zdCBrZXlOYW1lcyA9IHtcclxuICAgIGVzYzogJ2VzY2FwZScsXHJcbiAgICBzcGFjZTogJyAnLFxyXG4gICAgdXA6ICdhcnJvdy11cCcsXHJcbiAgICBsZWZ0OiAnYXJyb3ctbGVmdCcsXHJcbiAgICByaWdodDogJ2Fycm93LXJpZ2h0JyxcclxuICAgIGRvd246ICdhcnJvdy1kb3duJyxcclxuICAgIGRlbGV0ZTogJ2JhY2tzcGFjZSdcclxufTtcclxuLyoqXHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG5jb25zdCB3aXRoS2V5cyA9IChmbiwgbW9kaWZpZXJzKSA9PiB7XHJcbiAgICByZXR1cm4gKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgaWYgKCEoJ2tleScgaW4gZXZlbnQpKVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgY29uc3QgZXZlbnRLZXkgPSBoeXBoZW5hdGUoZXZlbnQua2V5KTtcclxuICAgICAgICBpZiAoXHJcbiAgICAgICAgLy8gTm9uZSBvZiB0aGUgcHJvdmlkZWQga2V5IG1vZGlmaWVycyBtYXRjaCB0aGUgY3VycmVudCBldmVudCBrZXlcclxuICAgICAgICAhbW9kaWZpZXJzLnNvbWUoayA9PiBrID09PSBldmVudEtleSB8fCBrZXlOYW1lc1trXSA9PT0gZXZlbnRLZXkpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGZuKGV2ZW50KTtcclxuICAgIH07XHJcbn07XG5cbmNvbnN0IHZTaG93ID0ge1xyXG4gICAgYmVmb3JlTW91bnQoZWwsIHsgdmFsdWUgfSwgeyB0cmFuc2l0aW9uIH0pIHtcclxuICAgICAgICBlbC5fdm9kID0gZWwuc3R5bGUuZGlzcGxheSA9PT0gJ25vbmUnID8gJycgOiBlbC5zdHlsZS5kaXNwbGF5O1xyXG4gICAgICAgIGlmICh0cmFuc2l0aW9uICYmIHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHRyYW5zaXRpb24uYmVmb3JlRW50ZXIoZWwpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgc2V0RGlzcGxheShlbCwgdmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBtb3VudGVkKGVsLCB7IHZhbHVlIH0sIHsgdHJhbnNpdGlvbiB9KSB7XHJcbiAgICAgICAgaWYgKHRyYW5zaXRpb24gJiYgdmFsdWUpIHtcclxuICAgICAgICAgICAgdHJhbnNpdGlvbi5lbnRlcihlbCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIHVwZGF0ZWQoZWwsIHsgdmFsdWUsIG9sZFZhbHVlIH0sIHsgdHJhbnNpdGlvbiB9KSB7XHJcbiAgICAgICAgaWYgKHRyYW5zaXRpb24gJiYgdmFsdWUgIT09IG9sZFZhbHVlKSB7XHJcbiAgICAgICAgICAgIGlmICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgdHJhbnNpdGlvbi5iZWZvcmVFbnRlcihlbCk7XHJcbiAgICAgICAgICAgICAgICBzZXREaXNwbGF5KGVsLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgIHRyYW5zaXRpb24uZW50ZXIoZWwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdHJhbnNpdGlvbi5sZWF2ZShlbCwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHNldERpc3BsYXkoZWwsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBzZXREaXNwbGF5KGVsLCB2YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIGJlZm9yZVVubW91bnQoZWwsIHsgdmFsdWUgfSkge1xyXG4gICAgICAgIHNldERpc3BsYXkoZWwsIHZhbHVlKTtcclxuICAgIH1cclxufTtcclxuZnVuY3Rpb24gc2V0RGlzcGxheShlbCwgdmFsdWUpIHtcclxuICAgIGVsLnN0eWxlLmRpc3BsYXkgPSB2YWx1ZSA/IGVsLl92b2QgOiAnbm9uZSc7XHJcbn1cblxuY29uc3QgcmVuZGVyZXJPcHRpb25zID0gZXh0ZW5kKHsgcGF0Y2hQcm9wLCBmb3JjZVBhdGNoUHJvcCB9LCBub2RlT3BzKTtcclxuLy8gbGF6eSBjcmVhdGUgdGhlIHJlbmRlcmVyIC0gdGhpcyBtYWtlcyBjb3JlIHJlbmRlcmVyIGxvZ2ljIHRyZWUtc2hha2FibGVcclxuLy8gaW4gY2FzZSB0aGUgdXNlciBvbmx5IGltcG9ydHMgcmVhY3Rpdml0eSB1dGlsaXRpZXMgZnJvbSBWdWUuXHJcbmxldCByZW5kZXJlcjtcclxubGV0IGVuYWJsZWRIeWRyYXRpb24gPSBmYWxzZTtcclxuZnVuY3Rpb24gZW5zdXJlUmVuZGVyZXIoKSB7XHJcbiAgICByZXR1cm4gcmVuZGVyZXIgfHwgKHJlbmRlcmVyID0gY3JlYXRlUmVuZGVyZXIocmVuZGVyZXJPcHRpb25zKSk7XHJcbn1cclxuZnVuY3Rpb24gZW5zdXJlSHlkcmF0aW9uUmVuZGVyZXIoKSB7XHJcbiAgICByZW5kZXJlciA9IGVuYWJsZWRIeWRyYXRpb25cclxuICAgICAgICA/IHJlbmRlcmVyXHJcbiAgICAgICAgOiBjcmVhdGVIeWRyYXRpb25SZW5kZXJlcihyZW5kZXJlck9wdGlvbnMpO1xyXG4gICAgZW5hYmxlZEh5ZHJhdGlvbiA9IHRydWU7XHJcbiAgICByZXR1cm4gcmVuZGVyZXI7XHJcbn1cclxuLy8gdXNlIGV4cGxpY2l0IHR5cGUgY2FzdHMgaGVyZSB0byBhdm9pZCBpbXBvcnQoKSBjYWxscyBpbiByb2xsZWQtdXAgZC50c1xyXG5jb25zdCByZW5kZXIgPSAoKC4uLmFyZ3MpID0+IHtcclxuICAgIGVuc3VyZVJlbmRlcmVyKCkucmVuZGVyKC4uLmFyZ3MpO1xyXG59KTtcclxuY29uc3QgaHlkcmF0ZSA9ICgoLi4uYXJncykgPT4ge1xyXG4gICAgZW5zdXJlSHlkcmF0aW9uUmVuZGVyZXIoKS5oeWRyYXRlKC4uLmFyZ3MpO1xyXG59KTtcclxuY29uc3QgY3JlYXRlQXBwID0gKCguLi5hcmdzKSA9PiB7XHJcbiAgICBjb25zdCBhcHAgPSBlbnN1cmVSZW5kZXJlcigpLmNyZWF0ZUFwcCguLi5hcmdzKTtcclxuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICBpbmplY3ROYXRpdmVUYWdDaGVjayhhcHApO1xyXG4gICAgfVxyXG4gICAgY29uc3QgeyBtb3VudCB9ID0gYXBwO1xyXG4gICAgYXBwLm1vdW50ID0gKGNvbnRhaW5lck9yU2VsZWN0b3IpID0+IHtcclxuICAgICAgICBjb25zdCBjb250YWluZXIgPSBub3JtYWxpemVDb250YWluZXIoY29udGFpbmVyT3JTZWxlY3Rvcik7XHJcbiAgICAgICAgaWYgKCFjb250YWluZXIpXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICBjb25zdCBjb21wb25lbnQgPSBhcHAuX2NvbXBvbmVudDtcclxuICAgICAgICBpZiAoIWlzRnVuY3Rpb24oY29tcG9uZW50KSAmJiAhY29tcG9uZW50LnJlbmRlciAmJiAhY29tcG9uZW50LnRlbXBsYXRlKSB7XHJcbiAgICAgICAgICAgIGNvbXBvbmVudC50ZW1wbGF0ZSA9IGNvbnRhaW5lci5pbm5lckhUTUw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGNsZWFyIGNvbnRlbnQgYmVmb3JlIG1vdW50aW5nXHJcbiAgICAgICAgY29udGFpbmVyLmlubmVySFRNTCA9ICcnO1xyXG4gICAgICAgIGNvbnN0IHByb3h5ID0gbW91bnQoY29udGFpbmVyKTtcclxuICAgICAgICBjb250YWluZXIucmVtb3ZlQXR0cmlidXRlKCd2LWNsb2FrJyk7XHJcbiAgICAgICAgY29udGFpbmVyLnNldEF0dHJpYnV0ZSgnZGF0YS12LWFwcCcsICcnKTtcclxuICAgICAgICByZXR1cm4gcHJveHk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIGFwcDtcclxufSk7XHJcbmNvbnN0IGNyZWF0ZVNTUkFwcCA9ICgoLi4uYXJncykgPT4ge1xyXG4gICAgY29uc3QgYXBwID0gZW5zdXJlSHlkcmF0aW9uUmVuZGVyZXIoKS5jcmVhdGVBcHAoLi4uYXJncyk7XHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgaW5qZWN0TmF0aXZlVGFnQ2hlY2soYXBwKTtcclxuICAgIH1cclxuICAgIGNvbnN0IHsgbW91bnQgfSA9IGFwcDtcclxuICAgIGFwcC5tb3VudCA9IChjb250YWluZXJPclNlbGVjdG9yKSA9PiB7XHJcbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gbm9ybWFsaXplQ29udGFpbmVyKGNvbnRhaW5lck9yU2VsZWN0b3IpO1xyXG4gICAgICAgIGlmIChjb250YWluZXIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG1vdW50KGNvbnRhaW5lciwgdHJ1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHJldHVybiBhcHA7XHJcbn0pO1xyXG5mdW5jdGlvbiBpbmplY3ROYXRpdmVUYWdDaGVjayhhcHApIHtcclxuICAgIC8vIEluamVjdCBgaXNOYXRpdmVUYWdgXHJcbiAgICAvLyB0aGlzIGlzIHVzZWQgZm9yIGNvbXBvbmVudCBuYW1lIHZhbGlkYXRpb24gKGRldiBvbmx5KVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGFwcC5jb25maWcsICdpc05hdGl2ZVRhZycsIHtcclxuICAgICAgICB2YWx1ZTogKHRhZykgPT4gaXNIVE1MVGFnKHRhZykgfHwgaXNTVkdUYWcodGFnKSxcclxuICAgICAgICB3cml0YWJsZTogZmFsc2VcclxuICAgIH0pO1xyXG59XHJcbmZ1bmN0aW9uIG5vcm1hbGl6ZUNvbnRhaW5lcihjb250YWluZXIpIHtcclxuICAgIGlmIChpc1N0cmluZyhjb250YWluZXIpKSB7XHJcbiAgICAgICAgY29uc3QgcmVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihjb250YWluZXIpO1xyXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIXJlcykge1xyXG4gICAgICAgICAgICB3YXJuKGBGYWlsZWQgdG8gbW91bnQgYXBwOiBtb3VudCB0YXJnZXQgc2VsZWN0b3IgcmV0dXJuZWQgbnVsbC5gKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlcztcclxuICAgIH1cclxuICAgIHJldHVybiBjb250YWluZXI7XHJcbn1cblxuZXhwb3J0IHsgVHJhbnNpdGlvbiwgVHJhbnNpdGlvbkdyb3VwLCBjcmVhdGVBcHAsIGNyZWF0ZVNTUkFwcCwgaHlkcmF0ZSwgcmVuZGVyLCB1c2VDc3NNb2R1bGUsIHVzZUNzc1ZhcnMsIHZNb2RlbENoZWNrYm94LCB2TW9kZWxEeW5hbWljLCB2TW9kZWxSYWRpbywgdk1vZGVsU2VsZWN0LCB2TW9kZWxUZXh0LCB2U2hvdywgd2l0aEtleXMsIHdpdGhNb2RpZmllcnMgfTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG4pe3JldHVybnthbGw6bj1ufHxuZXcgTWFwLG9uOmZ1bmN0aW9uKHQsZSl7dmFyIGk9bi5nZXQodCk7aSYmaS5wdXNoKGUpfHxuLnNldCh0LFtlXSl9LG9mZjpmdW5jdGlvbih0LGUpe3ZhciBpPW4uZ2V0KHQpO2kmJmkuc3BsaWNlKGkuaW5kZXhPZihlKT4+PjAsMSl9LGVtaXQ6ZnVuY3Rpb24odCxlKXsobi5nZXQodCl8fFtdKS5zbGljZSgpLm1hcChmdW5jdGlvbihuKXtuKGUpfSksKG4uZ2V0KFwiKlwiKXx8W10pLnNsaWNlKCkubWFwKGZ1bmN0aW9uKG4pe24odCxlKX0pfX19XG4vLyMgc291cmNlTWFwcGluZ1VSTD1taXR0LmVzLmpzLm1hcFxuIiwiLyoqXHJcbiAqIEEgY29sbGVjdGlvbiBvZiBzaGltcyB0aGF0IHByb3ZpZGUgbWluaW1hbCBmdW5jdGlvbmFsaXR5IG9mIHRoZSBFUzYgY29sbGVjdGlvbnMuXHJcbiAqXHJcbiAqIFRoZXNlIGltcGxlbWVudGF0aW9ucyBhcmUgbm90IG1lYW50IHRvIGJlIHVzZWQgb3V0c2lkZSBvZiB0aGUgUmVzaXplT2JzZXJ2ZXJcclxuICogbW9kdWxlcyBhcyB0aGV5IGNvdmVyIG9ubHkgYSBsaW1pdGVkIHJhbmdlIG9mIHVzZSBjYXNlcy5cclxuICovXHJcbi8qIGVzbGludC1kaXNhYmxlIHJlcXVpcmUtanNkb2MsIHZhbGlkLWpzZG9jICovXHJcbnZhciBNYXBTaGltID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGlmICh0eXBlb2YgTWFwICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgIHJldHVybiBNYXA7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgaW5kZXggaW4gcHJvdmlkZWQgYXJyYXkgdGhhdCBtYXRjaGVzIHRoZSBzcGVjaWZpZWQga2V5LlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7QXJyYXk8QXJyYXk+fSBhcnJcclxuICAgICAqIEBwYXJhbSB7Kn0ga2V5XHJcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfVxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBnZXRJbmRleChhcnIsIGtleSkge1xyXG4gICAgICAgIHZhciByZXN1bHQgPSAtMTtcclxuICAgICAgICBhcnIuc29tZShmdW5jdGlvbiAoZW50cnksIGluZGV4KSB7XHJcbiAgICAgICAgICAgIGlmIChlbnRyeVswXSA9PT0ga2V5KSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBpbmRleDtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBmdW5jdGlvbiBjbGFzc18xKCkge1xyXG4gICAgICAgICAgICB0aGlzLl9fZW50cmllc19fID0gW107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjbGFzc18xLnByb3RvdHlwZSwgXCJzaXplXCIsIHtcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fX2VudHJpZXNfXy5sZW5ndGg7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBwYXJhbSB7Kn0ga2V5XHJcbiAgICAgICAgICogQHJldHVybnMgeyp9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY2xhc3NfMS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgICAgICB2YXIgaW5kZXggPSBnZXRJbmRleCh0aGlzLl9fZW50cmllc19fLCBrZXkpO1xyXG4gICAgICAgICAgICB2YXIgZW50cnkgPSB0aGlzLl9fZW50cmllc19fW2luZGV4XTtcclxuICAgICAgICAgICAgcmV0dXJuIGVudHJ5ICYmIGVudHJ5WzFdO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHBhcmFtIHsqfSBrZXlcclxuICAgICAgICAgKiBAcGFyYW0geyp9IHZhbHVlXHJcbiAgICAgICAgICogQHJldHVybnMge3ZvaWR9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY2xhc3NfMS5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXgodGhpcy5fX2VudHJpZXNfXywga2V5KTtcclxuICAgICAgICAgICAgaWYgKH5pbmRleCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fX2VudHJpZXNfX1tpbmRleF1bMV0gPSB2YWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX19lbnRyaWVzX18ucHVzaChba2V5LCB2YWx1ZV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAcGFyYW0geyp9IGtleVxyXG4gICAgICAgICAqIEByZXR1cm5zIHt2b2lkfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNsYXNzXzEucHJvdG90eXBlLmRlbGV0ZSA9IGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICAgICAgdmFyIGVudHJpZXMgPSB0aGlzLl9fZW50cmllc19fO1xyXG4gICAgICAgICAgICB2YXIgaW5kZXggPSBnZXRJbmRleChlbnRyaWVzLCBrZXkpO1xyXG4gICAgICAgICAgICBpZiAofmluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICBlbnRyaWVzLnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBwYXJhbSB7Kn0ga2V5XHJcbiAgICAgICAgICogQHJldHVybnMge3ZvaWR9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY2xhc3NfMS5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgICAgICByZXR1cm4gISF+Z2V0SW5kZXgodGhpcy5fX2VudHJpZXNfXywga2V5KTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEByZXR1cm5zIHt2b2lkfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNsYXNzXzEucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB0aGlzLl9fZW50cmllc19fLnNwbGljZSgwKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXHJcbiAgICAgICAgICogQHBhcmFtIHsqfSBbY3R4PW51bGxdXHJcbiAgICAgICAgICogQHJldHVybnMge3ZvaWR9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY2xhc3NfMS5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uIChjYWxsYmFjaywgY3R4KSB7XHJcbiAgICAgICAgICAgIGlmIChjdHggPT09IHZvaWQgMCkgeyBjdHggPSBudWxsOyB9XHJcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSB0aGlzLl9fZW50cmllc19fOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGVudHJ5ID0gX2FbX2ldO1xyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2suY2FsbChjdHgsIGVudHJ5WzFdLCBlbnRyeVswXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiBjbGFzc18xO1xyXG4gICAgfSgpKTtcclxufSkoKTtcblxuLyoqXHJcbiAqIERldGVjdHMgd2hldGhlciB3aW5kb3cgYW5kIGRvY3VtZW50IG9iamVjdHMgYXJlIGF2YWlsYWJsZSBpbiBjdXJyZW50IGVudmlyb25tZW50LlxyXG4gKi9cclxudmFyIGlzQnJvd3NlciA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmRvY3VtZW50ID09PSBkb2N1bWVudDtcblxuLy8gUmV0dXJucyBnbG9iYWwgb2JqZWN0IG9mIGEgY3VycmVudCBlbnZpcm9ubWVudC5cclxudmFyIGdsb2JhbCQxID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGlmICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJyAmJiBnbG9iYWwuTWF0aCA9PT0gTWF0aCkge1xyXG4gICAgICAgIHJldHVybiBnbG9iYWw7XHJcbiAgICB9XHJcbiAgICBpZiAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnICYmIHNlbGYuTWF0aCA9PT0gTWF0aCkge1xyXG4gICAgICAgIHJldHVybiBzZWxmO1xyXG4gICAgfVxyXG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5NYXRoID09PSBNYXRoKSB7XHJcbiAgICAgICAgcmV0dXJuIHdpbmRvdztcclxuICAgIH1cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xyXG4gICAgcmV0dXJuIEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XHJcbn0pKCk7XG5cbi8qKlxyXG4gKiBBIHNoaW0gZm9yIHRoZSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgd2hpY2ggZmFsbHMgYmFjayB0byB0aGUgc2V0VGltZW91dCBpZlxyXG4gKiBmaXJzdCBvbmUgaXMgbm90IHN1cHBvcnRlZC5cclxuICpcclxuICogQHJldHVybnMge251bWJlcn0gUmVxdWVzdHMnIGlkZW50aWZpZXIuXHJcbiAqL1xyXG52YXIgcmVxdWVzdEFuaW1hdGlvbkZyYW1lJDEgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgaWYgKHR5cGVvZiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAvLyBJdCdzIHJlcXVpcmVkIHRvIHVzZSBhIGJvdW5kZWQgZnVuY3Rpb24gYmVjYXVzZSBJRSBzb21ldGltZXMgdGhyb3dzXHJcbiAgICAgICAgLy8gYW4gXCJJbnZhbGlkIGNhbGxpbmcgb2JqZWN0XCIgZXJyb3IgaWYgckFGIGlzIGludm9rZWQgd2l0aG91dCB0aGUgZ2xvYmFsXHJcbiAgICAgICAgLy8gb2JqZWN0IG9uIHRoZSBsZWZ0IGhhbmQgc2lkZS5cclxuICAgICAgICByZXR1cm4gcmVxdWVzdEFuaW1hdGlvbkZyYW1lLmJpbmQoZ2xvYmFsJDEpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChjYWxsYmFjaykgeyByZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IHJldHVybiBjYWxsYmFjayhEYXRlLm5vdygpKTsgfSwgMTAwMCAvIDYwKTsgfTtcclxufSkoKTtcblxuLy8gRGVmaW5lcyBtaW5pbXVtIHRpbWVvdXQgYmVmb3JlIGFkZGluZyBhIHRyYWlsaW5nIGNhbGwuXHJcbnZhciB0cmFpbGluZ1RpbWVvdXQgPSAyO1xyXG4vKipcclxuICogQ3JlYXRlcyBhIHdyYXBwZXIgZnVuY3Rpb24gd2hpY2ggZW5zdXJlcyB0aGF0IHByb3ZpZGVkIGNhbGxiYWNrIHdpbGwgYmVcclxuICogaW52b2tlZCBvbmx5IG9uY2UgZHVyaW5nIHRoZSBzcGVjaWZpZWQgZGVsYXkgcGVyaW9kLlxyXG4gKlxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayAtIEZ1bmN0aW9uIHRvIGJlIGludm9rZWQgYWZ0ZXIgdGhlIGRlbGF5IHBlcmlvZC5cclxuICogQHBhcmFtIHtudW1iZXJ9IGRlbGF5IC0gRGVsYXkgYWZ0ZXIgd2hpY2ggdG8gaW52b2tlIGNhbGxiYWNrLlxyXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259XHJcbiAqL1xyXG5mdW5jdGlvbiB0aHJvdHRsZSAoY2FsbGJhY2ssIGRlbGF5KSB7XHJcbiAgICB2YXIgbGVhZGluZ0NhbGwgPSBmYWxzZSwgdHJhaWxpbmdDYWxsID0gZmFsc2UsIGxhc3RDYWxsVGltZSA9IDA7XHJcbiAgICAvKipcclxuICAgICAqIEludm9rZXMgdGhlIG9yaWdpbmFsIGNhbGxiYWNrIGZ1bmN0aW9uIGFuZCBzY2hlZHVsZXMgbmV3IGludm9jYXRpb24gaWZcclxuICAgICAqIHRoZSBcInByb3h5XCIgd2FzIGNhbGxlZCBkdXJpbmcgY3VycmVudCByZXF1ZXN0LlxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm5zIHt2b2lkfVxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiByZXNvbHZlUGVuZGluZygpIHtcclxuICAgICAgICBpZiAobGVhZGluZ0NhbGwpIHtcclxuICAgICAgICAgICAgbGVhZGluZ0NhbGwgPSBmYWxzZTtcclxuICAgICAgICAgICAgY2FsbGJhY2soKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRyYWlsaW5nQ2FsbCkge1xyXG4gICAgICAgICAgICBwcm94eSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQ2FsbGJhY2sgaW52b2tlZCBhZnRlciB0aGUgc3BlY2lmaWVkIGRlbGF5LiBJdCB3aWxsIGZ1cnRoZXIgcG9zdHBvbmVcclxuICAgICAqIGludm9jYXRpb24gb2YgdGhlIG9yaWdpbmFsIGZ1bmN0aW9uIGRlbGVnYXRpbmcgaXQgdG8gdGhlXHJcbiAgICAgKiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUuXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybnMge3ZvaWR9XHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIHRpbWVvdXRDYWxsYmFjaygpIHtcclxuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUkMShyZXNvbHZlUGVuZGluZyk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFNjaGVkdWxlcyBpbnZvY2F0aW9uIG9mIHRoZSBvcmlnaW5hbCBmdW5jdGlvbi5cclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJucyB7dm9pZH1cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gcHJveHkoKSB7XHJcbiAgICAgICAgdmFyIHRpbWVTdGFtcCA9IERhdGUubm93KCk7XHJcbiAgICAgICAgaWYgKGxlYWRpbmdDYWxsKSB7XHJcbiAgICAgICAgICAgIC8vIFJlamVjdCBpbW1lZGlhdGVseSBmb2xsb3dpbmcgY2FsbHMuXHJcbiAgICAgICAgICAgIGlmICh0aW1lU3RhbXAgLSBsYXN0Q2FsbFRpbWUgPCB0cmFpbGluZ1RpbWVvdXQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBTY2hlZHVsZSBuZXcgY2FsbCB0byBiZSBpbiBpbnZva2VkIHdoZW4gdGhlIHBlbmRpbmcgb25lIGlzIHJlc29sdmVkLlxyXG4gICAgICAgICAgICAvLyBUaGlzIGlzIGltcG9ydGFudCBmb3IgXCJ0cmFuc2l0aW9uc1wiIHdoaWNoIG5ldmVyIGFjdHVhbGx5IHN0YXJ0XHJcbiAgICAgICAgICAgIC8vIGltbWVkaWF0ZWx5IHNvIHRoZXJlIGlzIGEgY2hhbmNlIHRoYXQgd2UgbWlnaHQgbWlzcyBvbmUgaWYgY2hhbmdlXHJcbiAgICAgICAgICAgIC8vIGhhcHBlbnMgYW1pZHMgdGhlIHBlbmRpbmcgaW52b2NhdGlvbi5cclxuICAgICAgICAgICAgdHJhaWxpbmdDYWxsID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGxlYWRpbmdDYWxsID0gdHJ1ZTtcclxuICAgICAgICAgICAgdHJhaWxpbmdDYWxsID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQodGltZW91dENhbGxiYWNrLCBkZWxheSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxhc3RDYWxsVGltZSA9IHRpbWVTdGFtcDtcclxuICAgIH1cclxuICAgIHJldHVybiBwcm94eTtcclxufVxuXG4vLyBNaW5pbXVtIGRlbGF5IGJlZm9yZSBpbnZva2luZyB0aGUgdXBkYXRlIG9mIG9ic2VydmVycy5cclxudmFyIFJFRlJFU0hfREVMQVkgPSAyMDtcclxuLy8gQSBsaXN0IG9mIHN1YnN0cmluZ3Mgb2YgQ1NTIHByb3BlcnRpZXMgdXNlZCB0byBmaW5kIHRyYW5zaXRpb24gZXZlbnRzIHRoYXRcclxuLy8gbWlnaHQgYWZmZWN0IGRpbWVuc2lvbnMgb2Ygb2JzZXJ2ZWQgZWxlbWVudHMuXHJcbnZhciB0cmFuc2l0aW9uS2V5cyA9IFsndG9wJywgJ3JpZ2h0JywgJ2JvdHRvbScsICdsZWZ0JywgJ3dpZHRoJywgJ2hlaWdodCcsICdzaXplJywgJ3dlaWdodCddO1xyXG4vLyBDaGVjayBpZiBNdXRhdGlvbk9ic2VydmVyIGlzIGF2YWlsYWJsZS5cclxudmFyIG11dGF0aW9uT2JzZXJ2ZXJTdXBwb3J0ZWQgPSB0eXBlb2YgTXV0YXRpb25PYnNlcnZlciAhPT0gJ3VuZGVmaW5lZCc7XHJcbi8qKlxyXG4gKiBTaW5nbGV0b24gY29udHJvbGxlciBjbGFzcyB3aGljaCBoYW5kbGVzIHVwZGF0ZXMgb2YgUmVzaXplT2JzZXJ2ZXIgaW5zdGFuY2VzLlxyXG4gKi9cclxudmFyIFJlc2l6ZU9ic2VydmVyQ29udHJvbGxlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBSZXNpemVPYnNlcnZlckNvbnRyb2xsZXIuXHJcbiAgICAgKlxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyKCkge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEluZGljYXRlcyB3aGV0aGVyIERPTSBsaXN0ZW5lcnMgaGF2ZSBiZWVuIGFkZGVkLlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHByaXZhdGUge2Jvb2xlYW59XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5jb25uZWN0ZWRfID0gZmFsc2U7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGVsbHMgdGhhdCBjb250cm9sbGVyIGhhcyBzdWJzY3JpYmVkIGZvciBNdXRhdGlvbiBFdmVudHMuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcHJpdmF0ZSB7Ym9vbGVhbn1cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLm11dGF0aW9uRXZlbnRzQWRkZWRfID0gZmFsc2U7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogS2VlcHMgcmVmZXJlbmNlIHRvIHRoZSBpbnN0YW5jZSBvZiBNdXRhdGlvbk9ic2VydmVyLlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHByaXZhdGUge011dGF0aW9uT2JzZXJ2ZXJ9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5tdXRhdGlvbnNPYnNlcnZlcl8gPSBudWxsO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEEgbGlzdCBvZiBjb25uZWN0ZWQgb2JzZXJ2ZXJzLlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHByaXZhdGUge0FycmF5PFJlc2l6ZU9ic2VydmVyU1BJPn1cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLm9ic2VydmVyc18gPSBbXTtcclxuICAgICAgICB0aGlzLm9uVHJhbnNpdGlvbkVuZF8gPSB0aGlzLm9uVHJhbnNpdGlvbkVuZF8uYmluZCh0aGlzKTtcclxuICAgICAgICB0aGlzLnJlZnJlc2ggPSB0aHJvdHRsZSh0aGlzLnJlZnJlc2guYmluZCh0aGlzKSwgUkVGUkVTSF9ERUxBWSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEFkZHMgb2JzZXJ2ZXIgdG8gb2JzZXJ2ZXJzIGxpc3QuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtSZXNpemVPYnNlcnZlclNQSX0gb2JzZXJ2ZXIgLSBPYnNlcnZlciB0byBiZSBhZGRlZC5cclxuICAgICAqIEByZXR1cm5zIHt2b2lkfVxyXG4gICAgICovXHJcbiAgICBSZXNpemVPYnNlcnZlckNvbnRyb2xsZXIucHJvdG90eXBlLmFkZE9ic2VydmVyID0gZnVuY3Rpb24gKG9ic2VydmVyKSB7XHJcbiAgICAgICAgaWYgKCF+dGhpcy5vYnNlcnZlcnNfLmluZGV4T2Yob2JzZXJ2ZXIpKSB7XHJcbiAgICAgICAgICAgIHRoaXMub2JzZXJ2ZXJzXy5wdXNoKG9ic2VydmVyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gQWRkIGxpc3RlbmVycyBpZiB0aGV5IGhhdmVuJ3QgYmVlbiBhZGRlZCB5ZXQuXHJcbiAgICAgICAgaWYgKCF0aGlzLmNvbm5lY3RlZF8pIHtcclxuICAgICAgICAgICAgdGhpcy5jb25uZWN0XygpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFJlbW92ZXMgb2JzZXJ2ZXIgZnJvbSBvYnNlcnZlcnMgbGlzdC5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge1Jlc2l6ZU9ic2VydmVyU1BJfSBvYnNlcnZlciAtIE9ic2VydmVyIHRvIGJlIHJlbW92ZWQuXHJcbiAgICAgKiBAcmV0dXJucyB7dm9pZH1cclxuICAgICAqL1xyXG4gICAgUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyLnByb3RvdHlwZS5yZW1vdmVPYnNlcnZlciA9IGZ1bmN0aW9uIChvYnNlcnZlcikge1xyXG4gICAgICAgIHZhciBvYnNlcnZlcnMgPSB0aGlzLm9ic2VydmVyc187XHJcbiAgICAgICAgdmFyIGluZGV4ID0gb2JzZXJ2ZXJzLmluZGV4T2Yob2JzZXJ2ZXIpO1xyXG4gICAgICAgIC8vIFJlbW92ZSBvYnNlcnZlciBpZiBpdCdzIHByZXNlbnQgaW4gcmVnaXN0cnkuXHJcbiAgICAgICAgaWYgKH5pbmRleCkge1xyXG4gICAgICAgICAgICBvYnNlcnZlcnMuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gUmVtb3ZlIGxpc3RlbmVycyBpZiBjb250cm9sbGVyIGhhcyBubyBjb25uZWN0ZWQgb2JzZXJ2ZXJzLlxyXG4gICAgICAgIGlmICghb2JzZXJ2ZXJzLmxlbmd0aCAmJiB0aGlzLmNvbm5lY3RlZF8pIHtcclxuICAgICAgICAgICAgdGhpcy5kaXNjb25uZWN0XygpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEludm9rZXMgdGhlIHVwZGF0ZSBvZiBvYnNlcnZlcnMuIEl0IHdpbGwgY29udGludWUgcnVubmluZyB1cGRhdGVzIGluc29mYXJcclxuICAgICAqIGl0IGRldGVjdHMgY2hhbmdlcy5cclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJucyB7dm9pZH1cclxuICAgICAqL1xyXG4gICAgUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyLnByb3RvdHlwZS5yZWZyZXNoID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBjaGFuZ2VzRGV0ZWN0ZWQgPSB0aGlzLnVwZGF0ZU9ic2VydmVyc18oKTtcclxuICAgICAgICAvLyBDb250aW51ZSBydW5uaW5nIHVwZGF0ZXMgaWYgY2hhbmdlcyBoYXZlIGJlZW4gZGV0ZWN0ZWQgYXMgdGhlcmUgbWlnaHRcclxuICAgICAgICAvLyBiZSBmdXR1cmUgb25lcyBjYXVzZWQgYnkgQ1NTIHRyYW5zaXRpb25zLlxyXG4gICAgICAgIGlmIChjaGFuZ2VzRGV0ZWN0ZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5yZWZyZXNoKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogVXBkYXRlcyBldmVyeSBvYnNlcnZlciBmcm9tIG9ic2VydmVycyBsaXN0IGFuZCBub3RpZmllcyB0aGVtIG9mIHF1ZXVlZFxyXG4gICAgICogZW50cmllcy5cclxuICAgICAqXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgXCJ0cnVlXCIgaWYgYW55IG9ic2VydmVyIGhhcyBkZXRlY3RlZCBjaGFuZ2VzIGluXHJcbiAgICAgKiAgICAgIGRpbWVuc2lvbnMgb2YgaXQncyBlbGVtZW50cy5cclxuICAgICAqL1xyXG4gICAgUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyLnByb3RvdHlwZS51cGRhdGVPYnNlcnZlcnNfID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIC8vIENvbGxlY3Qgb2JzZXJ2ZXJzIHRoYXQgaGF2ZSBhY3RpdmUgb2JzZXJ2YXRpb25zLlxyXG4gICAgICAgIHZhciBhY3RpdmVPYnNlcnZlcnMgPSB0aGlzLm9ic2VydmVyc18uZmlsdGVyKGZ1bmN0aW9uIChvYnNlcnZlcikge1xyXG4gICAgICAgICAgICByZXR1cm4gb2JzZXJ2ZXIuZ2F0aGVyQWN0aXZlKCksIG9ic2VydmVyLmhhc0FjdGl2ZSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIC8vIERlbGl2ZXIgbm90aWZpY2F0aW9ucyBpbiBhIHNlcGFyYXRlIGN5Y2xlIGluIG9yZGVyIHRvIGF2b2lkIGFueVxyXG4gICAgICAgIC8vIGNvbGxpc2lvbnMgYmV0d2VlbiBvYnNlcnZlcnMsIGUuZy4gd2hlbiBtdWx0aXBsZSBpbnN0YW5jZXMgb2ZcclxuICAgICAgICAvLyBSZXNpemVPYnNlcnZlciBhcmUgdHJhY2tpbmcgdGhlIHNhbWUgZWxlbWVudCBhbmQgdGhlIGNhbGxiYWNrIG9mIG9uZVxyXG4gICAgICAgIC8vIG9mIHRoZW0gY2hhbmdlcyBjb250ZW50IGRpbWVuc2lvbnMgb2YgdGhlIG9ic2VydmVkIHRhcmdldC4gU29tZXRpbWVzXHJcbiAgICAgICAgLy8gdGhpcyBtYXkgcmVzdWx0IGluIG5vdGlmaWNhdGlvbnMgYmVpbmcgYmxvY2tlZCBmb3IgdGhlIHJlc3Qgb2Ygb2JzZXJ2ZXJzLlxyXG4gICAgICAgIGFjdGl2ZU9ic2VydmVycy5mb3JFYWNoKGZ1bmN0aW9uIChvYnNlcnZlcikgeyByZXR1cm4gb2JzZXJ2ZXIuYnJvYWRjYXN0QWN0aXZlKCk7IH0pO1xyXG4gICAgICAgIHJldHVybiBhY3RpdmVPYnNlcnZlcnMubGVuZ3RoID4gMDtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEluaXRpYWxpemVzIERPTSBsaXN0ZW5lcnMuXHJcbiAgICAgKlxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqIEByZXR1cm5zIHt2b2lkfVxyXG4gICAgICovXHJcbiAgICBSZXNpemVPYnNlcnZlckNvbnRyb2xsZXIucHJvdG90eXBlLmNvbm5lY3RfID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIC8vIERvIG5vdGhpbmcgaWYgcnVubmluZyBpbiBhIG5vbi1icm93c2VyIGVudmlyb25tZW50IG9yIGlmIGxpc3RlbmVyc1xyXG4gICAgICAgIC8vIGhhdmUgYmVlbiBhbHJlYWR5IGFkZGVkLlxyXG4gICAgICAgIGlmICghaXNCcm93c2VyIHx8IHRoaXMuY29ubmVjdGVkXykge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIFN1YnNjcmlwdGlvbiB0byB0aGUgXCJUcmFuc2l0aW9uZW5kXCIgZXZlbnQgaXMgdXNlZCBhcyBhIHdvcmthcm91bmQgZm9yXHJcbiAgICAgICAgLy8gZGVsYXllZCB0cmFuc2l0aW9ucy4gVGhpcyB3YXkgaXQncyBwb3NzaWJsZSB0byBjYXB0dXJlIGF0IGxlYXN0IHRoZVxyXG4gICAgICAgIC8vIGZpbmFsIHN0YXRlIG9mIGFuIGVsZW1lbnQuXHJcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIHRoaXMub25UcmFuc2l0aW9uRW5kXyk7XHJcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMucmVmcmVzaCk7XHJcbiAgICAgICAgaWYgKG11dGF0aW9uT2JzZXJ2ZXJTdXBwb3J0ZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5tdXRhdGlvbnNPYnNlcnZlcl8gPSBuZXcgTXV0YXRpb25PYnNlcnZlcih0aGlzLnJlZnJlc2gpO1xyXG4gICAgICAgICAgICB0aGlzLm11dGF0aW9uc09ic2VydmVyXy5vYnNlcnZlKGRvY3VtZW50LCB7XHJcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgY2hpbGRMaXN0OiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgY2hhcmFjdGVyRGF0YTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIHN1YnRyZWU6IHRydWVcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01TdWJ0cmVlTW9kaWZpZWQnLCB0aGlzLnJlZnJlc2gpO1xyXG4gICAgICAgICAgICB0aGlzLm11dGF0aW9uRXZlbnRzQWRkZWRfID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jb25uZWN0ZWRfID0gdHJ1ZTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFJlbW92ZXMgRE9NIGxpc3RlbmVycy5cclxuICAgICAqXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICogQHJldHVybnMge3ZvaWR9XHJcbiAgICAgKi9cclxuICAgIFJlc2l6ZU9ic2VydmVyQ29udHJvbGxlci5wcm90b3R5cGUuZGlzY29ubmVjdF8gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgLy8gRG8gbm90aGluZyBpZiBydW5uaW5nIGluIGEgbm9uLWJyb3dzZXIgZW52aXJvbm1lbnQgb3IgaWYgbGlzdGVuZXJzXHJcbiAgICAgICAgLy8gaGF2ZSBiZWVuIGFscmVhZHkgcmVtb3ZlZC5cclxuICAgICAgICBpZiAoIWlzQnJvd3NlciB8fCAhdGhpcy5jb25uZWN0ZWRfKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIHRoaXMub25UcmFuc2l0aW9uRW5kXyk7XHJcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMucmVmcmVzaCk7XHJcbiAgICAgICAgaWYgKHRoaXMubXV0YXRpb25zT2JzZXJ2ZXJfKSB7XHJcbiAgICAgICAgICAgIHRoaXMubXV0YXRpb25zT2JzZXJ2ZXJfLmRpc2Nvbm5lY3QoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMubXV0YXRpb25FdmVudHNBZGRlZF8pIHtcclxuICAgICAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignRE9NU3VidHJlZU1vZGlmaWVkJywgdGhpcy5yZWZyZXNoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5tdXRhdGlvbnNPYnNlcnZlcl8gPSBudWxsO1xyXG4gICAgICAgIHRoaXMubXV0YXRpb25FdmVudHNBZGRlZF8gPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmNvbm5lY3RlZF8gPSBmYWxzZTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFwiVHJhbnNpdGlvbmVuZFwiIGV2ZW50IGhhbmRsZXIuXHJcbiAgICAgKlxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqIEBwYXJhbSB7VHJhbnNpdGlvbkV2ZW50fSBldmVudFxyXG4gICAgICogQHJldHVybnMge3ZvaWR9XHJcbiAgICAgKi9cclxuICAgIFJlc2l6ZU9ic2VydmVyQ29udHJvbGxlci5wcm90b3R5cGUub25UcmFuc2l0aW9uRW5kXyA9IGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgIHZhciBfYiA9IF9hLnByb3BlcnR5TmFtZSwgcHJvcGVydHlOYW1lID0gX2IgPT09IHZvaWQgMCA/ICcnIDogX2I7XHJcbiAgICAgICAgLy8gRGV0ZWN0IHdoZXRoZXIgdHJhbnNpdGlvbiBtYXkgYWZmZWN0IGRpbWVuc2lvbnMgb2YgYW4gZWxlbWVudC5cclxuICAgICAgICB2YXIgaXNSZWZsb3dQcm9wZXJ0eSA9IHRyYW5zaXRpb25LZXlzLnNvbWUoZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgICAgICByZXR1cm4gISF+cHJvcGVydHlOYW1lLmluZGV4T2Yoa2V5KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBpZiAoaXNSZWZsb3dQcm9wZXJ0eSkge1xyXG4gICAgICAgICAgICB0aGlzLnJlZnJlc2goKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIGluc3RhbmNlIG9mIHRoZSBSZXNpemVPYnNlcnZlckNvbnRyb2xsZXIuXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybnMge1Jlc2l6ZU9ic2VydmVyQ29udHJvbGxlcn1cclxuICAgICAqL1xyXG4gICAgUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyLmdldEluc3RhbmNlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5pbnN0YW5jZV8pIHtcclxuICAgICAgICAgICAgdGhpcy5pbnN0YW5jZV8gPSBuZXcgUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLmluc3RhbmNlXztcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEhvbGRzIHJlZmVyZW5jZSB0byB0aGUgY29udHJvbGxlcidzIGluc3RhbmNlLlxyXG4gICAgICpcclxuICAgICAqIEBwcml2YXRlIHtSZXNpemVPYnNlcnZlckNvbnRyb2xsZXJ9XHJcbiAgICAgKi9cclxuICAgIFJlc2l6ZU9ic2VydmVyQ29udHJvbGxlci5pbnN0YW5jZV8gPSBudWxsO1xyXG4gICAgcmV0dXJuIFJlc2l6ZU9ic2VydmVyQ29udHJvbGxlcjtcclxufSgpKTtcblxuLyoqXHJcbiAqIERlZmluZXMgbm9uLXdyaXRhYmxlL2VudW1lcmFibGUgcHJvcGVydGllcyBvZiB0aGUgcHJvdmlkZWQgdGFyZ2V0IG9iamVjdC5cclxuICpcclxuICogQHBhcmFtIHtPYmplY3R9IHRhcmdldCAtIE9iamVjdCBmb3Igd2hpY2ggdG8gZGVmaW5lIHByb3BlcnRpZXMuXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wcyAtIFByb3BlcnRpZXMgdG8gYmUgZGVmaW5lZC5cclxuICogQHJldHVybnMge09iamVjdH0gVGFyZ2V0IG9iamVjdC5cclxuICovXHJcbnZhciBkZWZpbmVDb25maWd1cmFibGUgPSAoZnVuY3Rpb24gKHRhcmdldCwgcHJvcHMpIHtcclxuICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSBPYmplY3Qua2V5cyhwcm9wcyk7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgdmFyIGtleSA9IF9hW19pXTtcclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHtcclxuICAgICAgICAgICAgdmFsdWU6IHByb3BzW2tleV0sXHJcbiAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgICAgICB3cml0YWJsZTogZmFsc2UsXHJcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRhcmdldDtcclxufSk7XG5cbi8qKlxyXG4gKiBSZXR1cm5zIHRoZSBnbG9iYWwgb2JqZWN0IGFzc29jaWF0ZWQgd2l0aCBwcm92aWRlZCBlbGVtZW50LlxyXG4gKlxyXG4gKiBAcGFyYW0ge09iamVjdH0gdGFyZ2V0XHJcbiAqIEByZXR1cm5zIHtPYmplY3R9XHJcbiAqL1xyXG52YXIgZ2V0V2luZG93T2YgPSAoZnVuY3Rpb24gKHRhcmdldCkge1xyXG4gICAgLy8gQXNzdW1lIHRoYXQgdGhlIGVsZW1lbnQgaXMgYW4gaW5zdGFuY2Ugb2YgTm9kZSwgd2hpY2ggbWVhbnMgdGhhdCBpdFxyXG4gICAgLy8gaGFzIHRoZSBcIm93bmVyRG9jdW1lbnRcIiBwcm9wZXJ0eSBmcm9tIHdoaWNoIHdlIGNhbiByZXRyaWV2ZSBhXHJcbiAgICAvLyBjb3JyZXNwb25kaW5nIGdsb2JhbCBvYmplY3QuXHJcbiAgICB2YXIgb3duZXJHbG9iYWwgPSB0YXJnZXQgJiYgdGFyZ2V0Lm93bmVyRG9jdW1lbnQgJiYgdGFyZ2V0Lm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XHJcbiAgICAvLyBSZXR1cm4gdGhlIGxvY2FsIGdsb2JhbCBvYmplY3QgaWYgaXQncyBub3QgcG9zc2libGUgZXh0cmFjdCBvbmUgZnJvbVxyXG4gICAgLy8gcHJvdmlkZWQgZWxlbWVudC5cclxuICAgIHJldHVybiBvd25lckdsb2JhbCB8fCBnbG9iYWwkMTtcclxufSk7XG5cbi8vIFBsYWNlaG9sZGVyIG9mIGFuIGVtcHR5IGNvbnRlbnQgcmVjdGFuZ2xlLlxyXG52YXIgZW1wdHlSZWN0ID0gY3JlYXRlUmVjdEluaXQoMCwgMCwgMCwgMCk7XHJcbi8qKlxyXG4gKiBDb252ZXJ0cyBwcm92aWRlZCBzdHJpbmcgdG8gYSBudW1iZXIuXHJcbiAqXHJcbiAqIEBwYXJhbSB7bnVtYmVyfHN0cmluZ30gdmFsdWVcclxuICogQHJldHVybnMge251bWJlcn1cclxuICovXHJcbmZ1bmN0aW9uIHRvRmxvYXQodmFsdWUpIHtcclxuICAgIHJldHVybiBwYXJzZUZsb2F0KHZhbHVlKSB8fCAwO1xyXG59XHJcbi8qKlxyXG4gKiBFeHRyYWN0cyBib3JkZXJzIHNpemUgZnJvbSBwcm92aWRlZCBzdHlsZXMuXHJcbiAqXHJcbiAqIEBwYXJhbSB7Q1NTU3R5bGVEZWNsYXJhdGlvbn0gc3R5bGVzXHJcbiAqIEBwYXJhbSB7Li4uc3RyaW5nfSBwb3NpdGlvbnMgLSBCb3JkZXJzIHBvc2l0aW9ucyAodG9wLCByaWdodCwgLi4uKVxyXG4gKiBAcmV0dXJucyB7bnVtYmVyfVxyXG4gKi9cclxuZnVuY3Rpb24gZ2V0Qm9yZGVyc1NpemUoc3R5bGVzKSB7XHJcbiAgICB2YXIgcG9zaXRpb25zID0gW107XHJcbiAgICBmb3IgKHZhciBfaSA9IDE7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgIHBvc2l0aW9uc1tfaSAtIDFdID0gYXJndW1lbnRzW19pXTtcclxuICAgIH1cclxuICAgIHJldHVybiBwb3NpdGlvbnMucmVkdWNlKGZ1bmN0aW9uIChzaXplLCBwb3NpdGlvbikge1xyXG4gICAgICAgIHZhciB2YWx1ZSA9IHN0eWxlc1snYm9yZGVyLScgKyBwb3NpdGlvbiArICctd2lkdGgnXTtcclxuICAgICAgICByZXR1cm4gc2l6ZSArIHRvRmxvYXQodmFsdWUpO1xyXG4gICAgfSwgMCk7XHJcbn1cclxuLyoqXHJcbiAqIEV4dHJhY3RzIHBhZGRpbmdzIHNpemVzIGZyb20gcHJvdmlkZWQgc3R5bGVzLlxyXG4gKlxyXG4gKiBAcGFyYW0ge0NTU1N0eWxlRGVjbGFyYXRpb259IHN0eWxlc1xyXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBQYWRkaW5ncyBib3guXHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRQYWRkaW5ncyhzdHlsZXMpIHtcclxuICAgIHZhciBwb3NpdGlvbnMgPSBbJ3RvcCcsICdyaWdodCcsICdib3R0b20nLCAnbGVmdCddO1xyXG4gICAgdmFyIHBhZGRpbmdzID0ge307XHJcbiAgICBmb3IgKHZhciBfaSA9IDAsIHBvc2l0aW9uc18xID0gcG9zaXRpb25zOyBfaSA8IHBvc2l0aW9uc18xLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgIHZhciBwb3NpdGlvbiA9IHBvc2l0aW9uc18xW19pXTtcclxuICAgICAgICB2YXIgdmFsdWUgPSBzdHlsZXNbJ3BhZGRpbmctJyArIHBvc2l0aW9uXTtcclxuICAgICAgICBwYWRkaW5nc1twb3NpdGlvbl0gPSB0b0Zsb2F0KHZhbHVlKTtcclxuICAgIH1cclxuICAgIHJldHVybiBwYWRkaW5ncztcclxufVxyXG4vKipcclxuICogQ2FsY3VsYXRlcyBjb250ZW50IHJlY3RhbmdsZSBvZiBwcm92aWRlZCBTVkcgZWxlbWVudC5cclxuICpcclxuICogQHBhcmFtIHtTVkdHcmFwaGljc0VsZW1lbnR9IHRhcmdldCAtIEVsZW1lbnQgY29udGVudCByZWN0YW5nbGUgb2Ygd2hpY2ggbmVlZHNcclxuICogICAgICB0byBiZSBjYWxjdWxhdGVkLlxyXG4gKiBAcmV0dXJucyB7RE9NUmVjdEluaXR9XHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRTVkdDb250ZW50UmVjdCh0YXJnZXQpIHtcclxuICAgIHZhciBiYm94ID0gdGFyZ2V0LmdldEJCb3goKTtcclxuICAgIHJldHVybiBjcmVhdGVSZWN0SW5pdCgwLCAwLCBiYm94LndpZHRoLCBiYm94LmhlaWdodCk7XHJcbn1cclxuLyoqXHJcbiAqIENhbGN1bGF0ZXMgY29udGVudCByZWN0YW5nbGUgb2YgcHJvdmlkZWQgSFRNTEVsZW1lbnQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHRhcmdldCAtIEVsZW1lbnQgZm9yIHdoaWNoIHRvIGNhbGN1bGF0ZSB0aGUgY29udGVudCByZWN0YW5nbGUuXHJcbiAqIEByZXR1cm5zIHtET01SZWN0SW5pdH1cclxuICovXHJcbmZ1bmN0aW9uIGdldEhUTUxFbGVtZW50Q29udGVudFJlY3QodGFyZ2V0KSB7XHJcbiAgICAvLyBDbGllbnQgd2lkdGggJiBoZWlnaHQgcHJvcGVydGllcyBjYW4ndCBiZVxyXG4gICAgLy8gdXNlZCBleGNsdXNpdmVseSBhcyB0aGV5IHByb3ZpZGUgcm91bmRlZCB2YWx1ZXMuXHJcbiAgICB2YXIgY2xpZW50V2lkdGggPSB0YXJnZXQuY2xpZW50V2lkdGgsIGNsaWVudEhlaWdodCA9IHRhcmdldC5jbGllbnRIZWlnaHQ7XHJcbiAgICAvLyBCeSB0aGlzIGNvbmRpdGlvbiB3ZSBjYW4gY2F0Y2ggYWxsIG5vbi1yZXBsYWNlZCBpbmxpbmUsIGhpZGRlbiBhbmRcclxuICAgIC8vIGRldGFjaGVkIGVsZW1lbnRzLiBUaG91Z2ggZWxlbWVudHMgd2l0aCB3aWR0aCAmIGhlaWdodCBwcm9wZXJ0aWVzIGxlc3NcclxuICAgIC8vIHRoYW4gMC41IHdpbGwgYmUgZGlzY2FyZGVkIGFzIHdlbGwuXHJcbiAgICAvL1xyXG4gICAgLy8gV2l0aG91dCBpdCB3ZSB3b3VsZCBuZWVkIHRvIGltcGxlbWVudCBzZXBhcmF0ZSBtZXRob2RzIGZvciBlYWNoIG9mXHJcbiAgICAvLyB0aG9zZSBjYXNlcyBhbmQgaXQncyBub3QgcG9zc2libGUgdG8gcGVyZm9ybSBhIHByZWNpc2UgYW5kIHBlcmZvcm1hbmNlXHJcbiAgICAvLyBlZmZlY3RpdmUgdGVzdCBmb3IgaGlkZGVuIGVsZW1lbnRzLiBFLmcuIGV2ZW4galF1ZXJ5J3MgJzp2aXNpYmxlJyBmaWx0ZXJcclxuICAgIC8vIGdpdmVzIHdyb25nIHJlc3VsdHMgZm9yIGVsZW1lbnRzIHdpdGggd2lkdGggJiBoZWlnaHQgbGVzcyB0aGFuIDAuNS5cclxuICAgIGlmICghY2xpZW50V2lkdGggJiYgIWNsaWVudEhlaWdodCkge1xyXG4gICAgICAgIHJldHVybiBlbXB0eVJlY3Q7XHJcbiAgICB9XHJcbiAgICB2YXIgc3R5bGVzID0gZ2V0V2luZG93T2YodGFyZ2V0KS5nZXRDb21wdXRlZFN0eWxlKHRhcmdldCk7XHJcbiAgICB2YXIgcGFkZGluZ3MgPSBnZXRQYWRkaW5ncyhzdHlsZXMpO1xyXG4gICAgdmFyIGhvcml6UGFkID0gcGFkZGluZ3MubGVmdCArIHBhZGRpbmdzLnJpZ2h0O1xyXG4gICAgdmFyIHZlcnRQYWQgPSBwYWRkaW5ncy50b3AgKyBwYWRkaW5ncy5ib3R0b207XHJcbiAgICAvLyBDb21wdXRlZCBzdHlsZXMgb2Ygd2lkdGggJiBoZWlnaHQgYXJlIGJlaW5nIHVzZWQgYmVjYXVzZSB0aGV5IGFyZSB0aGVcclxuICAgIC8vIG9ubHkgZGltZW5zaW9ucyBhdmFpbGFibGUgdG8gSlMgdGhhdCBjb250YWluIG5vbi1yb3VuZGVkIHZhbHVlcy4gSXQgY291bGRcclxuICAgIC8vIGJlIHBvc3NpYmxlIHRvIHV0aWxpemUgdGhlIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBpZiBvbmx5IGl0J3MgZGF0YSB3YXNuJ3RcclxuICAgIC8vIGFmZmVjdGVkIGJ5IENTUyB0cmFuc2Zvcm1hdGlvbnMgbGV0IGFsb25lIHBhZGRpbmdzLCBib3JkZXJzIGFuZCBzY3JvbGwgYmFycy5cclxuICAgIHZhciB3aWR0aCA9IHRvRmxvYXQoc3R5bGVzLndpZHRoKSwgaGVpZ2h0ID0gdG9GbG9hdChzdHlsZXMuaGVpZ2h0KTtcclxuICAgIC8vIFdpZHRoICYgaGVpZ2h0IGluY2x1ZGUgcGFkZGluZ3MgYW5kIGJvcmRlcnMgd2hlbiB0aGUgJ2JvcmRlci1ib3gnIGJveFxyXG4gICAgLy8gbW9kZWwgaXMgYXBwbGllZCAoZXhjZXB0IGZvciBJRSkuXHJcbiAgICBpZiAoc3R5bGVzLmJveFNpemluZyA9PT0gJ2JvcmRlci1ib3gnKSB7XHJcbiAgICAgICAgLy8gRm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIHJlcXVpcmVkIHRvIGhhbmRsZSBJbnRlcm5ldCBFeHBsb3JlciB3aGljaFxyXG4gICAgICAgIC8vIGRvZXNuJ3QgaW5jbHVkZSBwYWRkaW5ncyBhbmQgYm9yZGVycyB0byBjb21wdXRlZCBDU1MgZGltZW5zaW9ucy5cclxuICAgICAgICAvL1xyXG4gICAgICAgIC8vIFdlIGNhbiBzYXkgdGhhdCBpZiBDU1MgZGltZW5zaW9ucyArIHBhZGRpbmdzIGFyZSBlcXVhbCB0byB0aGUgXCJjbGllbnRcIlxyXG4gICAgICAgIC8vIHByb3BlcnRpZXMgdGhlbiBpdCdzIGVpdGhlciBJRSwgYW5kIHRodXMgd2UgZG9uJ3QgbmVlZCB0byBzdWJ0cmFjdFxyXG4gICAgICAgIC8vIGFueXRoaW5nLCBvciBhbiBlbGVtZW50IG1lcmVseSBkb2Vzbid0IGhhdmUgcGFkZGluZ3MvYm9yZGVycyBzdHlsZXMuXHJcbiAgICAgICAgaWYgKE1hdGgucm91bmQod2lkdGggKyBob3JpelBhZCkgIT09IGNsaWVudFdpZHRoKSB7XHJcbiAgICAgICAgICAgIHdpZHRoIC09IGdldEJvcmRlcnNTaXplKHN0eWxlcywgJ2xlZnQnLCAncmlnaHQnKSArIGhvcml6UGFkO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoTWF0aC5yb3VuZChoZWlnaHQgKyB2ZXJ0UGFkKSAhPT0gY2xpZW50SGVpZ2h0KSB7XHJcbiAgICAgICAgICAgIGhlaWdodCAtPSBnZXRCb3JkZXJzU2l6ZShzdHlsZXMsICd0b3AnLCAnYm90dG9tJykgKyB2ZXJ0UGFkO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIEZvbGxvd2luZyBzdGVwcyBjYW4ndCBiZSBhcHBsaWVkIHRvIHRoZSBkb2N1bWVudCdzIHJvb3QgZWxlbWVudCBhcyBpdHNcclxuICAgIC8vIGNsaWVudFtXaWR0aC9IZWlnaHRdIHByb3BlcnRpZXMgcmVwcmVzZW50IHZpZXdwb3J0IGFyZWEgb2YgdGhlIHdpbmRvdy5cclxuICAgIC8vIEJlc2lkZXMsIGl0J3MgYXMgd2VsbCBub3QgbmVjZXNzYXJ5IGFzIHRoZSA8aHRtbD4gaXRzZWxmIG5laXRoZXIgaGFzXHJcbiAgICAvLyByZW5kZXJlZCBzY3JvbGwgYmFycyBub3IgaXQgY2FuIGJlIGNsaXBwZWQuXHJcbiAgICBpZiAoIWlzRG9jdW1lbnRFbGVtZW50KHRhcmdldCkpIHtcclxuICAgICAgICAvLyBJbiBzb21lIGJyb3dzZXJzIChvbmx5IGluIEZpcmVmb3gsIGFjdHVhbGx5KSBDU1Mgd2lkdGggJiBoZWlnaHRcclxuICAgICAgICAvLyBpbmNsdWRlIHNjcm9sbCBiYXJzIHNpemUgd2hpY2ggY2FuIGJlIHJlbW92ZWQgYXQgdGhpcyBzdGVwIGFzIHNjcm9sbFxyXG4gICAgICAgIC8vIGJhcnMgYXJlIHRoZSBvbmx5IGRpZmZlcmVuY2UgYmV0d2VlbiByb3VuZGVkIGRpbWVuc2lvbnMgKyBwYWRkaW5nc1xyXG4gICAgICAgIC8vIGFuZCBcImNsaWVudFwiIHByb3BlcnRpZXMsIHRob3VnaCB0aGF0IGlzIG5vdCBhbHdheXMgdHJ1ZSBpbiBDaHJvbWUuXHJcbiAgICAgICAgdmFyIHZlcnRTY3JvbGxiYXIgPSBNYXRoLnJvdW5kKHdpZHRoICsgaG9yaXpQYWQpIC0gY2xpZW50V2lkdGg7XHJcbiAgICAgICAgdmFyIGhvcml6U2Nyb2xsYmFyID0gTWF0aC5yb3VuZChoZWlnaHQgKyB2ZXJ0UGFkKSAtIGNsaWVudEhlaWdodDtcclxuICAgICAgICAvLyBDaHJvbWUgaGFzIGEgcmF0aGVyIHdlaXJkIHJvdW5kaW5nIG9mIFwiY2xpZW50XCIgcHJvcGVydGllcy5cclxuICAgICAgICAvLyBFLmcuIGZvciBhbiBlbGVtZW50IHdpdGggY29udGVudCB3aWR0aCBvZiAzMTQuMnB4IGl0IHNvbWV0aW1lcyBnaXZlc1xyXG4gICAgICAgIC8vIHRoZSBjbGllbnQgd2lkdGggb2YgMzE1cHggYW5kIGZvciB0aGUgd2lkdGggb2YgMzE0LjdweCBpdCBtYXkgZ2l2ZVxyXG4gICAgICAgIC8vIDMxNHB4LiBBbmQgaXQgZG9lc24ndCBoYXBwZW4gYWxsIHRoZSB0aW1lLiBTbyBqdXN0IGlnbm9yZSB0aGlzIGRlbHRhXHJcbiAgICAgICAgLy8gYXMgYSBub24tcmVsZXZhbnQuXHJcbiAgICAgICAgaWYgKE1hdGguYWJzKHZlcnRTY3JvbGxiYXIpICE9PSAxKSB7XHJcbiAgICAgICAgICAgIHdpZHRoIC09IHZlcnRTY3JvbGxiYXI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChNYXRoLmFicyhob3JpelNjcm9sbGJhcikgIT09IDEpIHtcclxuICAgICAgICAgICAgaGVpZ2h0IC09IGhvcml6U2Nyb2xsYmFyO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBjcmVhdGVSZWN0SW5pdChwYWRkaW5ncy5sZWZ0LCBwYWRkaW5ncy50b3AsIHdpZHRoLCBoZWlnaHQpO1xyXG59XHJcbi8qKlxyXG4gKiBDaGVja3Mgd2hldGhlciBwcm92aWRlZCBlbGVtZW50IGlzIGFuIGluc3RhbmNlIG9mIHRoZSBTVkdHcmFwaGljc0VsZW1lbnQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7RWxlbWVudH0gdGFyZ2V0IC0gRWxlbWVudCB0byBiZSBjaGVja2VkLlxyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICovXHJcbnZhciBpc1NWR0dyYXBoaWNzRWxlbWVudCA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICAvLyBTb21lIGJyb3dzZXJzLCBuYW1lbHkgSUUgYW5kIEVkZ2UsIGRvbid0IGhhdmUgdGhlIFNWR0dyYXBoaWNzRWxlbWVudFxyXG4gICAgLy8gaW50ZXJmYWNlLlxyXG4gICAgaWYgKHR5cGVvZiBTVkdHcmFwaGljc0VsZW1lbnQgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQpIHsgcmV0dXJuIHRhcmdldCBpbnN0YW5jZW9mIGdldFdpbmRvd09mKHRhcmdldCkuU1ZHR3JhcGhpY3NFbGVtZW50OyB9O1xyXG4gICAgfVxyXG4gICAgLy8gSWYgaXQncyBzbywgdGhlbiBjaGVjayB0aGF0IGVsZW1lbnQgaXMgYXQgbGVhc3QgYW4gaW5zdGFuY2Ugb2YgdGhlXHJcbiAgICAvLyBTVkdFbGVtZW50IGFuZCB0aGF0IGl0IGhhcyB0aGUgXCJnZXRCQm94XCIgbWV0aG9kLlxyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWV4dHJhLXBhcmVuc1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQpIHsgcmV0dXJuICh0YXJnZXQgaW5zdGFuY2VvZiBnZXRXaW5kb3dPZih0YXJnZXQpLlNWR0VsZW1lbnQgJiZcclxuICAgICAgICB0eXBlb2YgdGFyZ2V0LmdldEJCb3ggPT09ICdmdW5jdGlvbicpOyB9O1xyXG59KSgpO1xyXG4vKipcclxuICogQ2hlY2tzIHdoZXRoZXIgcHJvdmlkZWQgZWxlbWVudCBpcyBhIGRvY3VtZW50IGVsZW1lbnQgKDxodG1sPikuXHJcbiAqXHJcbiAqIEBwYXJhbSB7RWxlbWVudH0gdGFyZ2V0IC0gRWxlbWVudCB0byBiZSBjaGVja2VkLlxyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICovXHJcbmZ1bmN0aW9uIGlzRG9jdW1lbnRFbGVtZW50KHRhcmdldCkge1xyXG4gICAgcmV0dXJuIHRhcmdldCA9PT0gZ2V0V2luZG93T2YodGFyZ2V0KS5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XHJcbn1cclxuLyoqXHJcbiAqIENhbGN1bGF0ZXMgYW4gYXBwcm9wcmlhdGUgY29udGVudCByZWN0YW5nbGUgZm9yIHByb3ZpZGVkIGh0bWwgb3Igc3ZnIGVsZW1lbnQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7RWxlbWVudH0gdGFyZ2V0IC0gRWxlbWVudCBjb250ZW50IHJlY3RhbmdsZSBvZiB3aGljaCBuZWVkcyB0byBiZSBjYWxjdWxhdGVkLlxyXG4gKiBAcmV0dXJucyB7RE9NUmVjdEluaXR9XHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRDb250ZW50UmVjdCh0YXJnZXQpIHtcclxuICAgIGlmICghaXNCcm93c2VyKSB7XHJcbiAgICAgICAgcmV0dXJuIGVtcHR5UmVjdDtcclxuICAgIH1cclxuICAgIGlmIChpc1NWR0dyYXBoaWNzRWxlbWVudCh0YXJnZXQpKSB7XHJcbiAgICAgICAgcmV0dXJuIGdldFNWR0NvbnRlbnRSZWN0KHRhcmdldCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZ2V0SFRNTEVsZW1lbnRDb250ZW50UmVjdCh0YXJnZXQpO1xyXG59XHJcbi8qKlxyXG4gKiBDcmVhdGVzIHJlY3RhbmdsZSB3aXRoIGFuIGludGVyZmFjZSBvZiB0aGUgRE9NUmVjdFJlYWRPbmx5LlxyXG4gKiBTcGVjOiBodHRwczovL2RyYWZ0cy5meHRmLm9yZy9nZW9tZXRyeS8jZG9tcmVjdHJlYWRvbmx5XHJcbiAqXHJcbiAqIEBwYXJhbSB7RE9NUmVjdEluaXR9IHJlY3RJbml0IC0gT2JqZWN0IHdpdGggcmVjdGFuZ2xlJ3MgeC95IGNvb3JkaW5hdGVzIGFuZCBkaW1lbnNpb25zLlxyXG4gKiBAcmV0dXJucyB7RE9NUmVjdFJlYWRPbmx5fVxyXG4gKi9cclxuZnVuY3Rpb24gY3JlYXRlUmVhZE9ubHlSZWN0KF9hKSB7XHJcbiAgICB2YXIgeCA9IF9hLngsIHkgPSBfYS55LCB3aWR0aCA9IF9hLndpZHRoLCBoZWlnaHQgPSBfYS5oZWlnaHQ7XHJcbiAgICAvLyBJZiBET01SZWN0UmVhZE9ubHkgaXMgYXZhaWxhYmxlIHVzZSBpdCBhcyBhIHByb3RvdHlwZSBmb3IgdGhlIHJlY3RhbmdsZS5cclxuICAgIHZhciBDb25zdHIgPSB0eXBlb2YgRE9NUmVjdFJlYWRPbmx5ICE9PSAndW5kZWZpbmVkJyA/IERPTVJlY3RSZWFkT25seSA6IE9iamVjdDtcclxuICAgIHZhciByZWN0ID0gT2JqZWN0LmNyZWF0ZShDb25zdHIucHJvdG90eXBlKTtcclxuICAgIC8vIFJlY3RhbmdsZSdzIHByb3BlcnRpZXMgYXJlIG5vdCB3cml0YWJsZSBhbmQgbm9uLWVudW1lcmFibGUuXHJcbiAgICBkZWZpbmVDb25maWd1cmFibGUocmVjdCwge1xyXG4gICAgICAgIHg6IHgsIHk6IHksIHdpZHRoOiB3aWR0aCwgaGVpZ2h0OiBoZWlnaHQsXHJcbiAgICAgICAgdG9wOiB5LFxyXG4gICAgICAgIHJpZ2h0OiB4ICsgd2lkdGgsXHJcbiAgICAgICAgYm90dG9tOiBoZWlnaHQgKyB5LFxyXG4gICAgICAgIGxlZnQ6IHhcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHJlY3Q7XHJcbn1cclxuLyoqXHJcbiAqIENyZWF0ZXMgRE9NUmVjdEluaXQgb2JqZWN0IGJhc2VkIG9uIHRoZSBwcm92aWRlZCBkaW1lbnNpb25zIGFuZCB0aGUgeC95IGNvb3JkaW5hdGVzLlxyXG4gKiBTcGVjOiBodHRwczovL2RyYWZ0cy5meHRmLm9yZy9nZW9tZXRyeS8jZGljdGRlZi1kb21yZWN0aW5pdFxyXG4gKlxyXG4gKiBAcGFyYW0ge251bWJlcn0geCAtIFggY29vcmRpbmF0ZS5cclxuICogQHBhcmFtIHtudW1iZXJ9IHkgLSBZIGNvb3JkaW5hdGUuXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aCAtIFJlY3RhbmdsZSdzIHdpZHRoLlxyXG4gKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0IC0gUmVjdGFuZ2xlJ3MgaGVpZ2h0LlxyXG4gKiBAcmV0dXJucyB7RE9NUmVjdEluaXR9XHJcbiAqL1xyXG5mdW5jdGlvbiBjcmVhdGVSZWN0SW5pdCh4LCB5LCB3aWR0aCwgaGVpZ2h0KSB7XHJcbiAgICByZXR1cm4geyB4OiB4LCB5OiB5LCB3aWR0aDogd2lkdGgsIGhlaWdodDogaGVpZ2h0IH07XHJcbn1cblxuLyoqXHJcbiAqIENsYXNzIHRoYXQgaXMgcmVzcG9uc2libGUgZm9yIGNvbXB1dGF0aW9ucyBvZiB0aGUgY29udGVudCByZWN0YW5nbGUgb2ZcclxuICogcHJvdmlkZWQgRE9NIGVsZW1lbnQgYW5kIGZvciBrZWVwaW5nIHRyYWNrIG9mIGl0J3MgY2hhbmdlcy5cclxuICovXHJcbnZhciBSZXNpemVPYnNlcnZhdGlvbiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiBSZXNpemVPYnNlcnZhdGlvbi5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IHRhcmdldCAtIEVsZW1lbnQgdG8gYmUgb2JzZXJ2ZWQuXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIFJlc2l6ZU9ic2VydmF0aW9uKHRhcmdldCkge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEJyb2FkY2FzdGVkIHdpZHRoIG9mIGNvbnRlbnQgcmVjdGFuZ2xlLlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHR5cGUge251bWJlcn1cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLmJyb2FkY2FzdFdpZHRoID0gMDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBCcm9hZGNhc3RlZCBoZWlnaHQgb2YgY29udGVudCByZWN0YW5nbGUuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuYnJvYWRjYXN0SGVpZ2h0ID0gMDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBSZWZlcmVuY2UgdG8gdGhlIGxhc3Qgb2JzZXJ2ZWQgY29udGVudCByZWN0YW5nbGUuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcHJpdmF0ZSB7RE9NUmVjdEluaXR9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5jb250ZW50UmVjdF8gPSBjcmVhdGVSZWN0SW5pdCgwLCAwLCAwLCAwKTtcclxuICAgICAgICB0aGlzLnRhcmdldCA9IHRhcmdldDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogVXBkYXRlcyBjb250ZW50IHJlY3RhbmdsZSBhbmQgdGVsbHMgd2hldGhlciBpdCdzIHdpZHRoIG9yIGhlaWdodCBwcm9wZXJ0aWVzXHJcbiAgICAgKiBoYXZlIGNoYW5nZWQgc2luY2UgdGhlIGxhc3QgYnJvYWRjYXN0LlxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICovXHJcbiAgICBSZXNpemVPYnNlcnZhdGlvbi5wcm90b3R5cGUuaXNBY3RpdmUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHJlY3QgPSBnZXRDb250ZW50UmVjdCh0aGlzLnRhcmdldCk7XHJcbiAgICAgICAgdGhpcy5jb250ZW50UmVjdF8gPSByZWN0O1xyXG4gICAgICAgIHJldHVybiAocmVjdC53aWR0aCAhPT0gdGhpcy5icm9hZGNhc3RXaWR0aCB8fFxyXG4gICAgICAgICAgICByZWN0LmhlaWdodCAhPT0gdGhpcy5icm9hZGNhc3RIZWlnaHQpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogVXBkYXRlcyAnYnJvYWRjYXN0V2lkdGgnIGFuZCAnYnJvYWRjYXN0SGVpZ2h0JyBwcm9wZXJ0aWVzIHdpdGggYSBkYXRhXHJcbiAgICAgKiBmcm9tIHRoZSBjb3JyZXNwb25kaW5nIHByb3BlcnRpZXMgb2YgdGhlIGxhc3Qgb2JzZXJ2ZWQgY29udGVudCByZWN0YW5nbGUuXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybnMge0RPTVJlY3RJbml0fSBMYXN0IG9ic2VydmVkIGNvbnRlbnQgcmVjdGFuZ2xlLlxyXG4gICAgICovXHJcbiAgICBSZXNpemVPYnNlcnZhdGlvbi5wcm90b3R5cGUuYnJvYWRjYXN0UmVjdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgcmVjdCA9IHRoaXMuY29udGVudFJlY3RfO1xyXG4gICAgICAgIHRoaXMuYnJvYWRjYXN0V2lkdGggPSByZWN0LndpZHRoO1xyXG4gICAgICAgIHRoaXMuYnJvYWRjYXN0SGVpZ2h0ID0gcmVjdC5oZWlnaHQ7XHJcbiAgICAgICAgcmV0dXJuIHJlY3Q7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFJlc2l6ZU9ic2VydmF0aW9uO1xyXG59KCkpO1xuXG52YXIgUmVzaXplT2JzZXJ2ZXJFbnRyeSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiBSZXNpemVPYnNlcnZlckVudHJ5LlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7RWxlbWVudH0gdGFyZ2V0IC0gRWxlbWVudCB0aGF0IGlzIGJlaW5nIG9ic2VydmVkLlxyXG4gICAgICogQHBhcmFtIHtET01SZWN0SW5pdH0gcmVjdEluaXQgLSBEYXRhIG9mIHRoZSBlbGVtZW50J3MgY29udGVudCByZWN0YW5nbGUuXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIFJlc2l6ZU9ic2VydmVyRW50cnkodGFyZ2V0LCByZWN0SW5pdCkge1xyXG4gICAgICAgIHZhciBjb250ZW50UmVjdCA9IGNyZWF0ZVJlYWRPbmx5UmVjdChyZWN0SW5pdCk7XHJcbiAgICAgICAgLy8gQWNjb3JkaW5nIHRvIHRoZSBzcGVjaWZpY2F0aW9uIGZvbGxvd2luZyBwcm9wZXJ0aWVzIGFyZSBub3Qgd3JpdGFibGVcclxuICAgICAgICAvLyBhbmQgYXJlIGFsc28gbm90IGVudW1lcmFibGUgaW4gdGhlIG5hdGl2ZSBpbXBsZW1lbnRhdGlvbi5cclxuICAgICAgICAvL1xyXG4gICAgICAgIC8vIFByb3BlcnR5IGFjY2Vzc29ycyBhcmUgbm90IGJlaW5nIHVzZWQgYXMgdGhleSdkIHJlcXVpcmUgdG8gZGVmaW5lIGFcclxuICAgICAgICAvLyBwcml2YXRlIFdlYWtNYXAgc3RvcmFnZSB3aGljaCBtYXkgY2F1c2UgbWVtb3J5IGxlYWtzIGluIGJyb3dzZXJzIHRoYXRcclxuICAgICAgICAvLyBkb24ndCBzdXBwb3J0IHRoaXMgdHlwZSBvZiBjb2xsZWN0aW9ucy5cclxuICAgICAgICBkZWZpbmVDb25maWd1cmFibGUodGhpcywgeyB0YXJnZXQ6IHRhcmdldCwgY29udGVudFJlY3Q6IGNvbnRlbnRSZWN0IH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIFJlc2l6ZU9ic2VydmVyRW50cnk7XHJcbn0oKSk7XG5cbnZhciBSZXNpemVPYnNlcnZlclNQSSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBSZXNpemVPYnNlcnZlci5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge1Jlc2l6ZU9ic2VydmVyQ2FsbGJhY2t9IGNhbGxiYWNrIC0gQ2FsbGJhY2sgZnVuY3Rpb24gdGhhdCBpcyBpbnZva2VkXHJcbiAgICAgKiAgICAgIHdoZW4gb25lIG9mIHRoZSBvYnNlcnZlZCBlbGVtZW50cyBjaGFuZ2VzIGl0J3MgY29udGVudCBkaW1lbnNpb25zLlxyXG4gICAgICogQHBhcmFtIHtSZXNpemVPYnNlcnZlckNvbnRyb2xsZXJ9IGNvbnRyb2xsZXIgLSBDb250cm9sbGVyIGluc3RhbmNlIHdoaWNoXHJcbiAgICAgKiAgICAgIGlzIHJlc3BvbnNpYmxlIGZvciB0aGUgdXBkYXRlcyBvZiBvYnNlcnZlci5cclxuICAgICAqIEBwYXJhbSB7UmVzaXplT2JzZXJ2ZXJ9IGNhbGxiYWNrQ3R4IC0gUmVmZXJlbmNlIHRvIHRoZSBwdWJsaWNcclxuICAgICAqICAgICAgUmVzaXplT2JzZXJ2ZXIgaW5zdGFuY2Ugd2hpY2ggd2lsbCBiZSBwYXNzZWQgdG8gY2FsbGJhY2sgZnVuY3Rpb24uXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIFJlc2l6ZU9ic2VydmVyU1BJKGNhbGxiYWNrLCBjb250cm9sbGVyLCBjYWxsYmFja0N0eCkge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENvbGxlY3Rpb24gb2YgcmVzaXplIG9ic2VydmF0aW9ucyB0aGF0IGhhdmUgZGV0ZWN0ZWQgY2hhbmdlcyBpbiBkaW1lbnNpb25zXHJcbiAgICAgICAgICogb2YgZWxlbWVudHMuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcHJpdmF0ZSB7QXJyYXk8UmVzaXplT2JzZXJ2YXRpb24+fVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuYWN0aXZlT2JzZXJ2YXRpb25zXyA9IFtdO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFJlZ2lzdHJ5IG9mIHRoZSBSZXNpemVPYnNlcnZhdGlvbiBpbnN0YW5jZXMuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcHJpdmF0ZSB7TWFwPEVsZW1lbnQsIFJlc2l6ZU9ic2VydmF0aW9uPn1cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLm9ic2VydmF0aW9uc18gPSBuZXcgTWFwU2hpbSgpO1xyXG4gICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIGNhbGxiYWNrIHByb3ZpZGVkIGFzIHBhcmFtZXRlciAxIGlzIG5vdCBhIGZ1bmN0aW9uLicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmNhbGxiYWNrXyA9IGNhbGxiYWNrO1xyXG4gICAgICAgIHRoaXMuY29udHJvbGxlcl8gPSBjb250cm9sbGVyO1xyXG4gICAgICAgIHRoaXMuY2FsbGJhY2tDdHhfID0gY2FsbGJhY2tDdHg7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFN0YXJ0cyBvYnNlcnZpbmcgcHJvdmlkZWQgZWxlbWVudC5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IHRhcmdldCAtIEVsZW1lbnQgdG8gYmUgb2JzZXJ2ZWQuXHJcbiAgICAgKiBAcmV0dXJucyB7dm9pZH1cclxuICAgICAqL1xyXG4gICAgUmVzaXplT2JzZXJ2ZXJTUEkucHJvdG90eXBlLm9ic2VydmUgPSBmdW5jdGlvbiAodGFyZ2V0KSB7XHJcbiAgICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJzEgYXJndW1lbnQgcmVxdWlyZWQsIGJ1dCBvbmx5IDAgcHJlc2VudC4nKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gRG8gbm90aGluZyBpZiBjdXJyZW50IGVudmlyb25tZW50IGRvZXNuJ3QgaGF2ZSB0aGUgRWxlbWVudCBpbnRlcmZhY2UuXHJcbiAgICAgICAgaWYgKHR5cGVvZiBFbGVtZW50ID09PSAndW5kZWZpbmVkJyB8fCAhKEVsZW1lbnQgaW5zdGFuY2VvZiBPYmplY3QpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCEodGFyZ2V0IGluc3RhbmNlb2YgZ2V0V2luZG93T2YodGFyZ2V0KS5FbGVtZW50KSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdwYXJhbWV0ZXIgMSBpcyBub3Qgb2YgdHlwZSBcIkVsZW1lbnRcIi4nKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIG9ic2VydmF0aW9ucyA9IHRoaXMub2JzZXJ2YXRpb25zXztcclxuICAgICAgICAvLyBEbyBub3RoaW5nIGlmIGVsZW1lbnQgaXMgYWxyZWFkeSBiZWluZyBvYnNlcnZlZC5cclxuICAgICAgICBpZiAob2JzZXJ2YXRpb25zLmhhcyh0YXJnZXQpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgb2JzZXJ2YXRpb25zLnNldCh0YXJnZXQsIG5ldyBSZXNpemVPYnNlcnZhdGlvbih0YXJnZXQpKTtcclxuICAgICAgICB0aGlzLmNvbnRyb2xsZXJfLmFkZE9ic2VydmVyKHRoaXMpO1xyXG4gICAgICAgIC8vIEZvcmNlIHRoZSB1cGRhdGUgb2Ygb2JzZXJ2YXRpb25zLlxyXG4gICAgICAgIHRoaXMuY29udHJvbGxlcl8ucmVmcmVzaCgpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogU3RvcHMgb2JzZXJ2aW5nIHByb3ZpZGVkIGVsZW1lbnQuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtFbGVtZW50fSB0YXJnZXQgLSBFbGVtZW50IHRvIHN0b3Agb2JzZXJ2aW5nLlxyXG4gICAgICogQHJldHVybnMge3ZvaWR9XHJcbiAgICAgKi9cclxuICAgIFJlc2l6ZU9ic2VydmVyU1BJLnByb3RvdHlwZS51bm9ic2VydmUgPSBmdW5jdGlvbiAodGFyZ2V0KSB7XHJcbiAgICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJzEgYXJndW1lbnQgcmVxdWlyZWQsIGJ1dCBvbmx5IDAgcHJlc2VudC4nKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gRG8gbm90aGluZyBpZiBjdXJyZW50IGVudmlyb25tZW50IGRvZXNuJ3QgaGF2ZSB0aGUgRWxlbWVudCBpbnRlcmZhY2UuXHJcbiAgICAgICAgaWYgKHR5cGVvZiBFbGVtZW50ID09PSAndW5kZWZpbmVkJyB8fCAhKEVsZW1lbnQgaW5zdGFuY2VvZiBPYmplY3QpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCEodGFyZ2V0IGluc3RhbmNlb2YgZ2V0V2luZG93T2YodGFyZ2V0KS5FbGVtZW50KSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdwYXJhbWV0ZXIgMSBpcyBub3Qgb2YgdHlwZSBcIkVsZW1lbnRcIi4nKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIG9ic2VydmF0aW9ucyA9IHRoaXMub2JzZXJ2YXRpb25zXztcclxuICAgICAgICAvLyBEbyBub3RoaW5nIGlmIGVsZW1lbnQgaXMgbm90IGJlaW5nIG9ic2VydmVkLlxyXG4gICAgICAgIGlmICghb2JzZXJ2YXRpb25zLmhhcyh0YXJnZXQpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgb2JzZXJ2YXRpb25zLmRlbGV0ZSh0YXJnZXQpO1xyXG4gICAgICAgIGlmICghb2JzZXJ2YXRpb25zLnNpemUpIHtcclxuICAgICAgICAgICAgdGhpcy5jb250cm9sbGVyXy5yZW1vdmVPYnNlcnZlcih0aGlzKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBTdG9wcyBvYnNlcnZpbmcgYWxsIGVsZW1lbnRzLlxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm5zIHt2b2lkfVxyXG4gICAgICovXHJcbiAgICBSZXNpemVPYnNlcnZlclNQSS5wcm90b3R5cGUuZGlzY29ubmVjdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLmNsZWFyQWN0aXZlKCk7XHJcbiAgICAgICAgdGhpcy5vYnNlcnZhdGlvbnNfLmNsZWFyKCk7XHJcbiAgICAgICAgdGhpcy5jb250cm9sbGVyXy5yZW1vdmVPYnNlcnZlcih0aGlzKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIENvbGxlY3RzIG9ic2VydmF0aW9uIGluc3RhbmNlcyB0aGUgYXNzb2NpYXRlZCBlbGVtZW50IG9mIHdoaWNoIGhhcyBjaGFuZ2VkXHJcbiAgICAgKiBpdCdzIGNvbnRlbnQgcmVjdGFuZ2xlLlxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm5zIHt2b2lkfVxyXG4gICAgICovXHJcbiAgICBSZXNpemVPYnNlcnZlclNQSS5wcm90b3R5cGUuZ2F0aGVyQWN0aXZlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5jbGVhckFjdGl2ZSgpO1xyXG4gICAgICAgIHRoaXMub2JzZXJ2YXRpb25zXy5mb3JFYWNoKGZ1bmN0aW9uIChvYnNlcnZhdGlvbikge1xyXG4gICAgICAgICAgICBpZiAob2JzZXJ2YXRpb24uaXNBY3RpdmUoKSkge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuYWN0aXZlT2JzZXJ2YXRpb25zXy5wdXNoKG9ic2VydmF0aW9uKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogSW52b2tlcyBpbml0aWFsIGNhbGxiYWNrIGZ1bmN0aW9uIHdpdGggYSBsaXN0IG9mIFJlc2l6ZU9ic2VydmVyRW50cnlcclxuICAgICAqIGluc3RhbmNlcyBjb2xsZWN0ZWQgZnJvbSBhY3RpdmUgcmVzaXplIG9ic2VydmF0aW9ucy5cclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJucyB7dm9pZH1cclxuICAgICAqL1xyXG4gICAgUmVzaXplT2JzZXJ2ZXJTUEkucHJvdG90eXBlLmJyb2FkY2FzdEFjdGl2ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAvLyBEbyBub3RoaW5nIGlmIG9ic2VydmVyIGRvZXNuJ3QgaGF2ZSBhY3RpdmUgb2JzZXJ2YXRpb25zLlxyXG4gICAgICAgIGlmICghdGhpcy5oYXNBY3RpdmUoKSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBjdHggPSB0aGlzLmNhbGxiYWNrQ3R4XztcclxuICAgICAgICAvLyBDcmVhdGUgUmVzaXplT2JzZXJ2ZXJFbnRyeSBpbnN0YW5jZSBmb3IgZXZlcnkgYWN0aXZlIG9ic2VydmF0aW9uLlxyXG4gICAgICAgIHZhciBlbnRyaWVzID0gdGhpcy5hY3RpdmVPYnNlcnZhdGlvbnNfLm1hcChmdW5jdGlvbiAob2JzZXJ2YXRpb24pIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBSZXNpemVPYnNlcnZlckVudHJ5KG9ic2VydmF0aW9uLnRhcmdldCwgb2JzZXJ2YXRpb24uYnJvYWRjYXN0UmVjdCgpKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmNhbGxiYWNrXy5jYWxsKGN0eCwgZW50cmllcywgY3R4KTtcclxuICAgICAgICB0aGlzLmNsZWFyQWN0aXZlKCk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBDbGVhcnMgdGhlIGNvbGxlY3Rpb24gb2YgYWN0aXZlIG9ic2VydmF0aW9ucy5cclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJucyB7dm9pZH1cclxuICAgICAqL1xyXG4gICAgUmVzaXplT2JzZXJ2ZXJTUEkucHJvdG90eXBlLmNsZWFyQWN0aXZlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMuYWN0aXZlT2JzZXJ2YXRpb25zXy5zcGxpY2UoMCk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBUZWxscyB3aGV0aGVyIG9ic2VydmVyIGhhcyBhY3RpdmUgb2JzZXJ2YXRpb25zLlxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICovXHJcbiAgICBSZXNpemVPYnNlcnZlclNQSS5wcm90b3R5cGUuaGFzQWN0aXZlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmFjdGl2ZU9ic2VydmF0aW9uc18ubGVuZ3RoID4gMDtcclxuICAgIH07XHJcbiAgICByZXR1cm4gUmVzaXplT2JzZXJ2ZXJTUEk7XHJcbn0oKSk7XG5cbi8vIFJlZ2lzdHJ5IG9mIGludGVybmFsIG9ic2VydmVycy4gSWYgV2Vha01hcCBpcyBub3QgYXZhaWxhYmxlIHVzZSBjdXJyZW50IHNoaW1cclxuLy8gZm9yIHRoZSBNYXAgY29sbGVjdGlvbiBhcyBpdCBoYXMgYWxsIHJlcXVpcmVkIG1ldGhvZHMgYW5kIGJlY2F1c2UgV2Vha01hcFxyXG4vLyBjYW4ndCBiZSBmdWxseSBwb2x5ZmlsbGVkIGFueXdheS5cclxudmFyIG9ic2VydmVycyA9IHR5cGVvZiBXZWFrTWFwICE9PSAndW5kZWZpbmVkJyA/IG5ldyBXZWFrTWFwKCkgOiBuZXcgTWFwU2hpbSgpO1xyXG4vKipcclxuICogUmVzaXplT2JzZXJ2ZXIgQVBJLiBFbmNhcHN1bGF0ZXMgdGhlIFJlc2l6ZU9ic2VydmVyIFNQSSBpbXBsZW1lbnRhdGlvblxyXG4gKiBleHBvc2luZyBvbmx5IHRob3NlIG1ldGhvZHMgYW5kIHByb3BlcnRpZXMgdGhhdCBhcmUgZGVmaW5lZCBpbiB0aGUgc3BlYy5cclxuICovXHJcbnZhciBSZXNpemVPYnNlcnZlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBSZXNpemVPYnNlcnZlci5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge1Jlc2l6ZU9ic2VydmVyQ2FsbGJhY2t9IGNhbGxiYWNrIC0gQ2FsbGJhY2sgdGhhdCBpcyBpbnZva2VkIHdoZW5cclxuICAgICAqICAgICAgZGltZW5zaW9ucyBvZiB0aGUgb2JzZXJ2ZWQgZWxlbWVudHMgY2hhbmdlLlxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBSZXNpemVPYnNlcnZlcihjYWxsYmFjaykge1xyXG4gICAgICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBSZXNpemVPYnNlcnZlcikpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uLicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignMSBhcmd1bWVudCByZXF1aXJlZCwgYnV0IG9ubHkgMCBwcmVzZW50LicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgY29udHJvbGxlciA9IFJlc2l6ZU9ic2VydmVyQ29udHJvbGxlci5nZXRJbnN0YW5jZSgpO1xyXG4gICAgICAgIHZhciBvYnNlcnZlciA9IG5ldyBSZXNpemVPYnNlcnZlclNQSShjYWxsYmFjaywgY29udHJvbGxlciwgdGhpcyk7XHJcbiAgICAgICAgb2JzZXJ2ZXJzLnNldCh0aGlzLCBvYnNlcnZlcik7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gUmVzaXplT2JzZXJ2ZXI7XHJcbn0oKSk7XHJcbi8vIEV4cG9zZSBwdWJsaWMgbWV0aG9kcyBvZiBSZXNpemVPYnNlcnZlci5cclxuW1xyXG4gICAgJ29ic2VydmUnLFxyXG4gICAgJ3Vub2JzZXJ2ZScsXHJcbiAgICAnZGlzY29ubmVjdCdcclxuXS5mb3JFYWNoKGZ1bmN0aW9uIChtZXRob2QpIHtcclxuICAgIFJlc2l6ZU9ic2VydmVyLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBfYTtcclxuICAgICAgICByZXR1cm4gKF9hID0gb2JzZXJ2ZXJzLmdldCh0aGlzKSlbbWV0aG9kXS5hcHBseShfYSwgYXJndW1lbnRzKTtcclxuICAgIH07XHJcbn0pO1xuXG52YXIgaW5kZXggPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgLy8gRXhwb3J0IGV4aXN0aW5nIGltcGxlbWVudGF0aW9uIGlmIGF2YWlsYWJsZS5cclxuICAgIGlmICh0eXBlb2YgZ2xvYmFsJDEuUmVzaXplT2JzZXJ2ZXIgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgcmV0dXJuIGdsb2JhbCQxLlJlc2l6ZU9ic2VydmVyO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIFJlc2l6ZU9ic2VydmVyO1xyXG59KSgpO1xuXG5leHBvcnQgZGVmYXVsdCBpbmRleDtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldEJvdW5kaW5nQ2xpZW50UmVjdChlbGVtZW50KSB7XG4gIHZhciByZWN0ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgcmV0dXJuIHtcbiAgICB3aWR0aDogcmVjdC53aWR0aCxcbiAgICBoZWlnaHQ6IHJlY3QuaGVpZ2h0LFxuICAgIHRvcDogcmVjdC50b3AsXG4gICAgcmlnaHQ6IHJlY3QucmlnaHQsXG4gICAgYm90dG9tOiByZWN0LmJvdHRvbSxcbiAgICBsZWZ0OiByZWN0LmxlZnQsXG4gICAgeDogcmVjdC5sZWZ0LFxuICAgIHk6IHJlY3QudG9wXG4gIH07XG59IiwiLyo6OiBpbXBvcnQgdHlwZSB7IFdpbmRvdyB9IGZyb20gJy4uL3R5cGVzJzsgKi9cblxuLyo6OiBkZWNsYXJlIGZ1bmN0aW9uIGdldFdpbmRvdyhub2RlOiBOb2RlIHwgV2luZG93KTogV2luZG93OyAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0V2luZG93KG5vZGUpIHtcbiAgaWYgKG5vZGUudG9TdHJpbmcoKSAhPT0gJ1tvYmplY3QgV2luZG93XScpIHtcbiAgICB2YXIgb3duZXJEb2N1bWVudCA9IG5vZGUub3duZXJEb2N1bWVudDtcbiAgICByZXR1cm4gb3duZXJEb2N1bWVudCA/IG93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcgfHwgd2luZG93IDogd2luZG93O1xuICB9XG5cbiAgcmV0dXJuIG5vZGU7XG59IiwiaW1wb3J0IGdldFdpbmRvdyBmcm9tIFwiLi9nZXRXaW5kb3cuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFdpbmRvd1Njcm9sbChub2RlKSB7XG4gIHZhciB3aW4gPSBnZXRXaW5kb3cobm9kZSk7XG4gIHZhciBzY3JvbGxMZWZ0ID0gd2luLnBhZ2VYT2Zmc2V0O1xuICB2YXIgc2Nyb2xsVG9wID0gd2luLnBhZ2VZT2Zmc2V0O1xuICByZXR1cm4ge1xuICAgIHNjcm9sbExlZnQ6IHNjcm9sbExlZnQsXG4gICAgc2Nyb2xsVG9wOiBzY3JvbGxUb3BcbiAgfTtcbn0iLCJpbXBvcnQgZ2V0V2luZG93IGZyb20gXCIuL2dldFdpbmRvdy5qc1wiO1xuLyo6OiBkZWNsYXJlIGZ1bmN0aW9uIGlzRWxlbWVudChub2RlOiBtaXhlZCk6IGJvb2xlYW4gJWNoZWNrcyhub2RlIGluc3RhbmNlb2ZcbiAgRWxlbWVudCk7ICovXG5cbmZ1bmN0aW9uIGlzRWxlbWVudChub2RlKSB7XG4gIHZhciBPd25FbGVtZW50ID0gZ2V0V2luZG93KG5vZGUpLkVsZW1lbnQ7XG4gIHJldHVybiBub2RlIGluc3RhbmNlb2YgT3duRWxlbWVudCB8fCBub2RlIGluc3RhbmNlb2YgRWxlbWVudDtcbn1cbi8qOjogZGVjbGFyZSBmdW5jdGlvbiBpc0hUTUxFbGVtZW50KG5vZGU6IG1peGVkKTogYm9vbGVhbiAlY2hlY2tzKG5vZGUgaW5zdGFuY2VvZlxuICBIVE1MRWxlbWVudCk7ICovXG5cblxuZnVuY3Rpb24gaXNIVE1MRWxlbWVudChub2RlKSB7XG4gIHZhciBPd25FbGVtZW50ID0gZ2V0V2luZG93KG5vZGUpLkhUTUxFbGVtZW50O1xuICByZXR1cm4gbm9kZSBpbnN0YW5jZW9mIE93bkVsZW1lbnQgfHwgbm9kZSBpbnN0YW5jZW9mIEhUTUxFbGVtZW50O1xufVxuLyo6OiBkZWNsYXJlIGZ1bmN0aW9uIGlzU2hhZG93Um9vdChub2RlOiBtaXhlZCk6IGJvb2xlYW4gJWNoZWNrcyhub2RlIGluc3RhbmNlb2ZcbiAgU2hhZG93Um9vdCk7ICovXG5cblxuZnVuY3Rpb24gaXNTaGFkb3dSb290KG5vZGUpIHtcbiAgdmFyIE93bkVsZW1lbnQgPSBnZXRXaW5kb3cobm9kZSkuU2hhZG93Um9vdDtcbiAgcmV0dXJuIG5vZGUgaW5zdGFuY2VvZiBPd25FbGVtZW50IHx8IG5vZGUgaW5zdGFuY2VvZiBTaGFkb3dSb290O1xufVxuXG5leHBvcnQgeyBpc0VsZW1lbnQsIGlzSFRNTEVsZW1lbnQsIGlzU2hhZG93Um9vdCB9OyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldE5vZGVOYW1lKGVsZW1lbnQpIHtcbiAgcmV0dXJuIGVsZW1lbnQgPyAoZWxlbWVudC5ub2RlTmFtZSB8fCAnJykudG9Mb3dlckNhc2UoKSA6IG51bGw7XG59IiwiaW1wb3J0IHsgaXNFbGVtZW50IH0gZnJvbSBcIi4vaW5zdGFuY2VPZi5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0RG9jdW1lbnRFbGVtZW50KGVsZW1lbnQpIHtcbiAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtcmV0dXJuXTogYXNzdW1lIGJvZHkgaXMgYWx3YXlzIGF2YWlsYWJsZVxuICByZXR1cm4gKChpc0VsZW1lbnQoZWxlbWVudCkgPyBlbGVtZW50Lm93bmVyRG9jdW1lbnQgOiAvLyAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ11cbiAgZWxlbWVudC5kb2N1bWVudCkgfHwgd2luZG93LmRvY3VtZW50KS5kb2N1bWVudEVsZW1lbnQ7XG59IiwiaW1wb3J0IGdldEJvdW5kaW5nQ2xpZW50UmVjdCBmcm9tIFwiLi9nZXRCb3VuZGluZ0NsaWVudFJlY3QuanNcIjtcbmltcG9ydCBnZXREb2N1bWVudEVsZW1lbnQgZnJvbSBcIi4vZ2V0RG9jdW1lbnRFbGVtZW50LmpzXCI7XG5pbXBvcnQgZ2V0V2luZG93U2Nyb2xsIGZyb20gXCIuL2dldFdpbmRvd1Njcm9sbC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0V2luZG93U2Nyb2xsQmFyWChlbGVtZW50KSB7XG4gIC8vIElmIDxodG1sPiBoYXMgYSBDU1Mgd2lkdGggZ3JlYXRlciB0aGFuIHRoZSB2aWV3cG9ydCwgdGhlbiB0aGlzIHdpbGwgYmVcbiAgLy8gaW5jb3JyZWN0IGZvciBSVEwuXG4gIC8vIFBvcHBlciAxIGlzIGJyb2tlbiBpbiB0aGlzIGNhc2UgYW5kIG5ldmVyIGhhZCBhIGJ1ZyByZXBvcnQgc28gbGV0J3MgYXNzdW1lXG4gIC8vIGl0J3Mgbm90IGFuIGlzc3VlLiBJIGRvbid0IHRoaW5rIGFueW9uZSBldmVyIHNwZWNpZmllcyB3aWR0aCBvbiA8aHRtbD5cbiAgLy8gYW55d2F5LlxuICAvLyBCcm93c2VycyB3aGVyZSB0aGUgbGVmdCBzY3JvbGxiYXIgZG9lc24ndCBjYXVzZSBhbiBpc3N1ZSByZXBvcnQgYDBgIGZvclxuICAvLyB0aGlzIChlLmcuIEVkZ2UgMjAxOSwgSUUxMSwgU2FmYXJpKVxuICByZXR1cm4gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGdldERvY3VtZW50RWxlbWVudChlbGVtZW50KSkubGVmdCArIGdldFdpbmRvd1Njcm9sbChlbGVtZW50KS5zY3JvbGxMZWZ0O1xufSIsImltcG9ydCBnZXRXaW5kb3cgZnJvbSBcIi4vZ2V0V2luZG93LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpIHtcbiAgcmV0dXJuIGdldFdpbmRvdyhlbGVtZW50KS5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpO1xufSIsImltcG9ydCBnZXRDb21wdXRlZFN0eWxlIGZyb20gXCIuL2dldENvbXB1dGVkU3R5bGUuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzU2Nyb2xsUGFyZW50KGVsZW1lbnQpIHtcbiAgLy8gRmlyZWZveCB3YW50cyB1cyB0byBjaGVjayBgLXhgIGFuZCBgLXlgIHZhcmlhdGlvbnMgYXMgd2VsbFxuICB2YXIgX2dldENvbXB1dGVkU3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpLFxuICAgICAgb3ZlcmZsb3cgPSBfZ2V0Q29tcHV0ZWRTdHlsZS5vdmVyZmxvdyxcbiAgICAgIG92ZXJmbG93WCA9IF9nZXRDb21wdXRlZFN0eWxlLm92ZXJmbG93WCxcbiAgICAgIG92ZXJmbG93WSA9IF9nZXRDb21wdXRlZFN0eWxlLm92ZXJmbG93WTtcblxuICByZXR1cm4gL2F1dG98c2Nyb2xsfG92ZXJsYXl8aGlkZGVuLy50ZXN0KG92ZXJmbG93ICsgb3ZlcmZsb3dZICsgb3ZlcmZsb3dYKTtcbn0iLCJpbXBvcnQgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGZyb20gXCIuL2dldEJvdW5kaW5nQ2xpZW50UmVjdC5qc1wiO1xuaW1wb3J0IGdldE5vZGVTY3JvbGwgZnJvbSBcIi4vZ2V0Tm9kZVNjcm9sbC5qc1wiO1xuaW1wb3J0IGdldE5vZGVOYW1lIGZyb20gXCIuL2dldE5vZGVOYW1lLmpzXCI7XG5pbXBvcnQgeyBpc0hUTUxFbGVtZW50IH0gZnJvbSBcIi4vaW5zdGFuY2VPZi5qc1wiO1xuaW1wb3J0IGdldFdpbmRvd1Njcm9sbEJhclggZnJvbSBcIi4vZ2V0V2luZG93U2Nyb2xsQmFyWC5qc1wiO1xuaW1wb3J0IGdldERvY3VtZW50RWxlbWVudCBmcm9tIFwiLi9nZXREb2N1bWVudEVsZW1lbnQuanNcIjtcbmltcG9ydCBpc1Njcm9sbFBhcmVudCBmcm9tIFwiLi9pc1Njcm9sbFBhcmVudC5qc1wiOyAvLyBSZXR1cm5zIHRoZSBjb21wb3NpdGUgcmVjdCBvZiBhbiBlbGVtZW50IHJlbGF0aXZlIHRvIGl0cyBvZmZzZXRQYXJlbnQuXG4vLyBDb21wb3NpdGUgbWVhbnMgaXQgdGFrZXMgaW50byBhY2NvdW50IHRyYW5zZm9ybXMgYXMgd2VsbCBhcyBsYXlvdXQuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldENvbXBvc2l0ZVJlY3QoZWxlbWVudE9yVmlydHVhbEVsZW1lbnQsIG9mZnNldFBhcmVudCwgaXNGaXhlZCkge1xuICBpZiAoaXNGaXhlZCA9PT0gdm9pZCAwKSB7XG4gICAgaXNGaXhlZCA9IGZhbHNlO1xuICB9XG5cbiAgdmFyIGRvY3VtZW50RWxlbWVudCA9IGdldERvY3VtZW50RWxlbWVudChvZmZzZXRQYXJlbnQpO1xuICB2YXIgcmVjdCA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdChlbGVtZW50T3JWaXJ0dWFsRWxlbWVudCk7XG4gIHZhciBpc09mZnNldFBhcmVudEFuRWxlbWVudCA9IGlzSFRNTEVsZW1lbnQob2Zmc2V0UGFyZW50KTtcbiAgdmFyIHNjcm9sbCA9IHtcbiAgICBzY3JvbGxMZWZ0OiAwLFxuICAgIHNjcm9sbFRvcDogMFxuICB9O1xuICB2YXIgb2Zmc2V0cyA9IHtcbiAgICB4OiAwLFxuICAgIHk6IDBcbiAgfTtcblxuICBpZiAoaXNPZmZzZXRQYXJlbnRBbkVsZW1lbnQgfHwgIWlzT2Zmc2V0UGFyZW50QW5FbGVtZW50ICYmICFpc0ZpeGVkKSB7XG4gICAgaWYgKGdldE5vZGVOYW1lKG9mZnNldFBhcmVudCkgIT09ICdib2R5JyB8fCAvLyBodHRwczovL2dpdGh1Yi5jb20vcG9wcGVyanMvcG9wcGVyLWNvcmUvaXNzdWVzLzEwNzhcbiAgICBpc1Njcm9sbFBhcmVudChkb2N1bWVudEVsZW1lbnQpKSB7XG4gICAgICBzY3JvbGwgPSBnZXROb2RlU2Nyb2xsKG9mZnNldFBhcmVudCk7XG4gICAgfVxuXG4gICAgaWYgKGlzSFRNTEVsZW1lbnQob2Zmc2V0UGFyZW50KSkge1xuICAgICAgb2Zmc2V0cyA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdChvZmZzZXRQYXJlbnQpO1xuICAgICAgb2Zmc2V0cy54ICs9IG9mZnNldFBhcmVudC5jbGllbnRMZWZ0O1xuICAgICAgb2Zmc2V0cy55ICs9IG9mZnNldFBhcmVudC5jbGllbnRUb3A7XG4gICAgfSBlbHNlIGlmIChkb2N1bWVudEVsZW1lbnQpIHtcbiAgICAgIG9mZnNldHMueCA9IGdldFdpbmRvd1Njcm9sbEJhclgoZG9jdW1lbnRFbGVtZW50KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHg6IHJlY3QubGVmdCArIHNjcm9sbC5zY3JvbGxMZWZ0IC0gb2Zmc2V0cy54LFxuICAgIHk6IHJlY3QudG9wICsgc2Nyb2xsLnNjcm9sbFRvcCAtIG9mZnNldHMueSxcbiAgICB3aWR0aDogcmVjdC53aWR0aCxcbiAgICBoZWlnaHQ6IHJlY3QuaGVpZ2h0XG4gIH07XG59IiwiaW1wb3J0IGdldFdpbmRvd1Njcm9sbCBmcm9tIFwiLi9nZXRXaW5kb3dTY3JvbGwuanNcIjtcbmltcG9ydCBnZXRXaW5kb3cgZnJvbSBcIi4vZ2V0V2luZG93LmpzXCI7XG5pbXBvcnQgeyBpc0hUTUxFbGVtZW50IH0gZnJvbSBcIi4vaW5zdGFuY2VPZi5qc1wiO1xuaW1wb3J0IGdldEhUTUxFbGVtZW50U2Nyb2xsIGZyb20gXCIuL2dldEhUTUxFbGVtZW50U2Nyb2xsLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXROb2RlU2Nyb2xsKG5vZGUpIHtcbiAgaWYgKG5vZGUgPT09IGdldFdpbmRvdyhub2RlKSB8fCAhaXNIVE1MRWxlbWVudChub2RlKSkge1xuICAgIHJldHVybiBnZXRXaW5kb3dTY3JvbGwobm9kZSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGdldEhUTUxFbGVtZW50U2Nyb2xsKG5vZGUpO1xuICB9XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0SFRNTEVsZW1lbnRTY3JvbGwoZWxlbWVudCkge1xuICByZXR1cm4ge1xuICAgIHNjcm9sbExlZnQ6IGVsZW1lbnQuc2Nyb2xsTGVmdCxcbiAgICBzY3JvbGxUb3A6IGVsZW1lbnQuc2Nyb2xsVG9wXG4gIH07XG59IiwiLy8gUmV0dXJucyB0aGUgbGF5b3V0IHJlY3Qgb2YgYW4gZWxlbWVudCByZWxhdGl2ZSB0byBpdHMgb2Zmc2V0UGFyZW50LiBMYXlvdXRcbi8vIG1lYW5zIGl0IGRvZXNuJ3QgdGFrZSBpbnRvIGFjY291bnQgdHJhbnNmb3Jtcy5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldExheW91dFJlY3QoZWxlbWVudCkge1xuICByZXR1cm4ge1xuICAgIHg6IGVsZW1lbnQub2Zmc2V0TGVmdCxcbiAgICB5OiBlbGVtZW50Lm9mZnNldFRvcCxcbiAgICB3aWR0aDogZWxlbWVudC5vZmZzZXRXaWR0aCxcbiAgICBoZWlnaHQ6IGVsZW1lbnQub2Zmc2V0SGVpZ2h0XG4gIH07XG59IiwiaW1wb3J0IGdldE5vZGVOYW1lIGZyb20gXCIuL2dldE5vZGVOYW1lLmpzXCI7XG5pbXBvcnQgZ2V0RG9jdW1lbnRFbGVtZW50IGZyb20gXCIuL2dldERvY3VtZW50RWxlbWVudC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0UGFyZW50Tm9kZShlbGVtZW50KSB7XG4gIGlmIChnZXROb2RlTmFtZShlbGVtZW50KSA9PT0gJ2h0bWwnKSB7XG4gICAgcmV0dXJuIGVsZW1lbnQ7XG4gIH1cblxuICByZXR1cm4gKC8vIHRoaXMgaXMgYSBxdWlja2VyIChidXQgbGVzcyB0eXBlIHNhZmUpIHdheSB0byBzYXZlIHF1aXRlIHNvbWUgYnl0ZXMgZnJvbSB0aGUgYnVuZGxlXG4gICAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtcmV0dXJuXVxuICAgIC8vICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXVxuICAgIGVsZW1lbnQuYXNzaWduZWRTbG90IHx8IC8vIHN0ZXAgaW50byB0aGUgc2hhZG93IERPTSBvZiB0aGUgcGFyZW50IG9mIGEgc2xvdHRlZCBub2RlXG4gICAgZWxlbWVudC5wYXJlbnROb2RlIHx8IC8vIERPTSBFbGVtZW50IGRldGVjdGVkXG4gICAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtcmV0dXJuXTogbmVlZCBhIGJldHRlciB3YXkgdG8gaGFuZGxlIHRoaXMuLi5cbiAgICBlbGVtZW50Lmhvc3QgfHwgLy8gU2hhZG93Um9vdCBkZXRlY3RlZFxuICAgIC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLWNhbGxdOiBIVE1MRWxlbWVudCBpcyBhIE5vZGVcbiAgICBnZXREb2N1bWVudEVsZW1lbnQoZWxlbWVudCkgLy8gZmFsbGJhY2tcblxuICApO1xufSIsImltcG9ydCBnZXRQYXJlbnROb2RlIGZyb20gXCIuL2dldFBhcmVudE5vZGUuanNcIjtcbmltcG9ydCBpc1Njcm9sbFBhcmVudCBmcm9tIFwiLi9pc1Njcm9sbFBhcmVudC5qc1wiO1xuaW1wb3J0IGdldE5vZGVOYW1lIGZyb20gXCIuL2dldE5vZGVOYW1lLmpzXCI7XG5pbXBvcnQgeyBpc0hUTUxFbGVtZW50IH0gZnJvbSBcIi4vaW5zdGFuY2VPZi5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0U2Nyb2xsUGFyZW50KG5vZGUpIHtcbiAgaWYgKFsnaHRtbCcsICdib2R5JywgJyNkb2N1bWVudCddLmluZGV4T2YoZ2V0Tm9kZU5hbWUobm9kZSkpID49IDApIHtcbiAgICAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS1yZXR1cm5dOiBhc3N1bWUgYm9keSBpcyBhbHdheXMgYXZhaWxhYmxlXG4gICAgcmV0dXJuIG5vZGUub3duZXJEb2N1bWVudC5ib2R5O1xuICB9XG5cbiAgaWYgKGlzSFRNTEVsZW1lbnQobm9kZSkgJiYgaXNTY3JvbGxQYXJlbnQobm9kZSkpIHtcbiAgICByZXR1cm4gbm9kZTtcbiAgfVxuXG4gIHJldHVybiBnZXRTY3JvbGxQYXJlbnQoZ2V0UGFyZW50Tm9kZShub2RlKSk7XG59IiwiaW1wb3J0IGdldFNjcm9sbFBhcmVudCBmcm9tIFwiLi9nZXRTY3JvbGxQYXJlbnQuanNcIjtcbmltcG9ydCBnZXRQYXJlbnROb2RlIGZyb20gXCIuL2dldFBhcmVudE5vZGUuanNcIjtcbmltcG9ydCBnZXROb2RlTmFtZSBmcm9tIFwiLi9nZXROb2RlTmFtZS5qc1wiO1xuaW1wb3J0IGdldFdpbmRvdyBmcm9tIFwiLi9nZXRXaW5kb3cuanNcIjtcbmltcG9ydCBpc1Njcm9sbFBhcmVudCBmcm9tIFwiLi9pc1Njcm9sbFBhcmVudC5qc1wiO1xuLypcbmdpdmVuIGEgRE9NIGVsZW1lbnQsIHJldHVybiB0aGUgbGlzdCBvZiBhbGwgc2Nyb2xsIHBhcmVudHMsIHVwIHRoZSBsaXN0IG9mIGFuY2Vzb3JzXG51bnRpbCB3ZSBnZXQgdG8gdGhlIHRvcCB3aW5kb3cgb2JqZWN0LiBUaGlzIGxpc3QgaXMgd2hhdCB3ZSBhdHRhY2ggc2Nyb2xsIGxpc3RlbmVyc1xudG8sIGJlY2F1c2UgaWYgYW55IG9mIHRoZXNlIHBhcmVudCBlbGVtZW50cyBzY3JvbGwsIHdlJ2xsIG5lZWQgdG8gcmUtY2FsY3VsYXRlIHRoZVxucmVmZXJlbmNlIGVsZW1lbnQncyBwb3NpdGlvbi5cbiovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGxpc3RTY3JvbGxQYXJlbnRzKGVsZW1lbnQsIGxpc3QpIHtcbiAgaWYgKGxpc3QgPT09IHZvaWQgMCkge1xuICAgIGxpc3QgPSBbXTtcbiAgfVxuXG4gIHZhciBzY3JvbGxQYXJlbnQgPSBnZXRTY3JvbGxQYXJlbnQoZWxlbWVudCk7XG4gIHZhciBpc0JvZHkgPSBnZXROb2RlTmFtZShzY3JvbGxQYXJlbnQpID09PSAnYm9keSc7XG4gIHZhciB3aW4gPSBnZXRXaW5kb3coc2Nyb2xsUGFyZW50KTtcbiAgdmFyIHRhcmdldCA9IGlzQm9keSA/IFt3aW5dLmNvbmNhdCh3aW4udmlzdWFsVmlld3BvcnQgfHwgW10sIGlzU2Nyb2xsUGFyZW50KHNjcm9sbFBhcmVudCkgPyBzY3JvbGxQYXJlbnQgOiBbXSkgOiBzY3JvbGxQYXJlbnQ7XG4gIHZhciB1cGRhdGVkTGlzdCA9IGxpc3QuY29uY2F0KHRhcmdldCk7XG4gIHJldHVybiBpc0JvZHkgPyB1cGRhdGVkTGlzdCA6IC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLWNhbGxdOiBpc0JvZHkgdGVsbHMgdXMgdGFyZ2V0IHdpbGwgYmUgYW4gSFRNTEVsZW1lbnQgaGVyZVxuICB1cGRhdGVkTGlzdC5jb25jYXQobGlzdFNjcm9sbFBhcmVudHMoZ2V0UGFyZW50Tm9kZSh0YXJnZXQpKSk7XG59IiwiaW1wb3J0IGdldE5vZGVOYW1lIGZyb20gXCIuL2dldE5vZGVOYW1lLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc1RhYmxlRWxlbWVudChlbGVtZW50KSB7XG4gIHJldHVybiBbJ3RhYmxlJywgJ3RkJywgJ3RoJ10uaW5kZXhPZihnZXROb2RlTmFtZShlbGVtZW50KSkgPj0gMDtcbn0iLCJpbXBvcnQgZ2V0V2luZG93IGZyb20gXCIuL2dldFdpbmRvdy5qc1wiO1xuaW1wb3J0IGdldE5vZGVOYW1lIGZyb20gXCIuL2dldE5vZGVOYW1lLmpzXCI7XG5pbXBvcnQgZ2V0Q29tcHV0ZWRTdHlsZSBmcm9tIFwiLi9nZXRDb21wdXRlZFN0eWxlLmpzXCI7XG5pbXBvcnQgeyBpc0hUTUxFbGVtZW50IH0gZnJvbSBcIi4vaW5zdGFuY2VPZi5qc1wiO1xuaW1wb3J0IGlzVGFibGVFbGVtZW50IGZyb20gXCIuL2lzVGFibGVFbGVtZW50LmpzXCI7XG5pbXBvcnQgZ2V0UGFyZW50Tm9kZSBmcm9tIFwiLi9nZXRQYXJlbnROb2RlLmpzXCI7XG5pbXBvcnQgZ2V0RG9jdW1lbnRFbGVtZW50IGZyb20gXCIuL2dldERvY3VtZW50RWxlbWVudC5qc1wiO1xuXG5mdW5jdGlvbiBnZXRUcnVlT2Zmc2V0UGFyZW50KGVsZW1lbnQpIHtcbiAgaWYgKCFpc0hUTUxFbGVtZW50KGVsZW1lbnQpIHx8IC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9wb3BwZXJqcy9wb3BwZXItY29yZS9pc3N1ZXMvODM3XG4gIGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCkucG9zaXRpb24gPT09ICdmaXhlZCcpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciBvZmZzZXRQYXJlbnQgPSBlbGVtZW50Lm9mZnNldFBhcmVudDtcblxuICBpZiAob2Zmc2V0UGFyZW50KSB7XG4gICAgdmFyIGh0bWwgPSBnZXREb2N1bWVudEVsZW1lbnQob2Zmc2V0UGFyZW50KTtcblxuICAgIGlmIChnZXROb2RlTmFtZShvZmZzZXRQYXJlbnQpID09PSAnYm9keScgJiYgZ2V0Q29tcHV0ZWRTdHlsZShvZmZzZXRQYXJlbnQpLnBvc2l0aW9uID09PSAnc3RhdGljJyAmJiBnZXRDb21wdXRlZFN0eWxlKGh0bWwpLnBvc2l0aW9uICE9PSAnc3RhdGljJykge1xuICAgICAgcmV0dXJuIGh0bWw7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG9mZnNldFBhcmVudDtcbn0gLy8gYC5vZmZzZXRQYXJlbnRgIHJlcG9ydHMgYG51bGxgIGZvciBmaXhlZCBlbGVtZW50cywgd2hpbGUgYWJzb2x1dGUgZWxlbWVudHNcbi8vIHJldHVybiB0aGUgY29udGFpbmluZyBibG9ja1xuXG5cbmZ1bmN0aW9uIGdldENvbnRhaW5pbmdCbG9jayhlbGVtZW50KSB7XG4gIHZhciBjdXJyZW50Tm9kZSA9IGdldFBhcmVudE5vZGUoZWxlbWVudCk7XG5cbiAgd2hpbGUgKGlzSFRNTEVsZW1lbnQoY3VycmVudE5vZGUpICYmIFsnaHRtbCcsICdib2R5J10uaW5kZXhPZihnZXROb2RlTmFtZShjdXJyZW50Tm9kZSkpIDwgMCkge1xuICAgIHZhciBjc3MgPSBnZXRDb21wdXRlZFN0eWxlKGN1cnJlbnROb2RlKTsgLy8gVGhpcyBpcyBub24tZXhoYXVzdGl2ZSBidXQgY292ZXJzIHRoZSBtb3N0IGNvbW1vbiBDU1MgcHJvcGVydGllcyB0aGF0XG4gICAgLy8gY3JlYXRlIGEgY29udGFpbmluZyBibG9jay5cblxuICAgIGlmIChjc3MudHJhbnNmb3JtICE9PSAnbm9uZScgfHwgY3NzLnBlcnNwZWN0aXZlICE9PSAnbm9uZScgfHwgY3NzLndpbGxDaGFuZ2UgJiYgY3NzLndpbGxDaGFuZ2UgIT09ICdhdXRvJykge1xuICAgICAgcmV0dXJuIGN1cnJlbnROb2RlO1xuICAgIH0gZWxzZSB7XG4gICAgICBjdXJyZW50Tm9kZSA9IGN1cnJlbnROb2RlLnBhcmVudE5vZGU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59IC8vIEdldHMgdGhlIGNsb3Nlc3QgYW5jZXN0b3IgcG9zaXRpb25lZCBlbGVtZW50LiBIYW5kbGVzIHNvbWUgZWRnZSBjYXNlcyxcbi8vIHN1Y2ggYXMgdGFibGUgYW5jZXN0b3JzIGFuZCBjcm9zcyBicm93c2VyIGJ1Z3MuXG5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0T2Zmc2V0UGFyZW50KGVsZW1lbnQpIHtcbiAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdyhlbGVtZW50KTtcbiAgdmFyIG9mZnNldFBhcmVudCA9IGdldFRydWVPZmZzZXRQYXJlbnQoZWxlbWVudCk7XG5cbiAgd2hpbGUgKG9mZnNldFBhcmVudCAmJiBpc1RhYmxlRWxlbWVudChvZmZzZXRQYXJlbnQpICYmIGdldENvbXB1dGVkU3R5bGUob2Zmc2V0UGFyZW50KS5wb3NpdGlvbiA9PT0gJ3N0YXRpYycpIHtcbiAgICBvZmZzZXRQYXJlbnQgPSBnZXRUcnVlT2Zmc2V0UGFyZW50KG9mZnNldFBhcmVudCk7XG4gIH1cblxuICBpZiAob2Zmc2V0UGFyZW50ICYmIGdldE5vZGVOYW1lKG9mZnNldFBhcmVudCkgPT09ICdib2R5JyAmJiBnZXRDb21wdXRlZFN0eWxlKG9mZnNldFBhcmVudCkucG9zaXRpb24gPT09ICdzdGF0aWMnKSB7XG4gICAgcmV0dXJuIHdpbmRvdztcbiAgfVxuXG4gIHJldHVybiBvZmZzZXRQYXJlbnQgfHwgZ2V0Q29udGFpbmluZ0Jsb2NrKGVsZW1lbnQpIHx8IHdpbmRvdztcbn0iLCJleHBvcnQgdmFyIHRvcCA9ICd0b3AnO1xuZXhwb3J0IHZhciBib3R0b20gPSAnYm90dG9tJztcbmV4cG9ydCB2YXIgcmlnaHQgPSAncmlnaHQnO1xuZXhwb3J0IHZhciBsZWZ0ID0gJ2xlZnQnO1xuZXhwb3J0IHZhciBhdXRvID0gJ2F1dG8nO1xuZXhwb3J0IHZhciBiYXNlUGxhY2VtZW50cyA9IFt0b3AsIGJvdHRvbSwgcmlnaHQsIGxlZnRdO1xuZXhwb3J0IHZhciBzdGFydCA9ICdzdGFydCc7XG5leHBvcnQgdmFyIGVuZCA9ICdlbmQnO1xuZXhwb3J0IHZhciBjbGlwcGluZ1BhcmVudHMgPSAnY2xpcHBpbmdQYXJlbnRzJztcbmV4cG9ydCB2YXIgdmlld3BvcnQgPSAndmlld3BvcnQnO1xuZXhwb3J0IHZhciBwb3BwZXIgPSAncG9wcGVyJztcbmV4cG9ydCB2YXIgcmVmZXJlbmNlID0gJ3JlZmVyZW5jZSc7XG5leHBvcnQgdmFyIHZhcmlhdGlvblBsYWNlbWVudHMgPSAvKiNfX1BVUkVfXyovYmFzZVBsYWNlbWVudHMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHBsYWNlbWVudCkge1xuICByZXR1cm4gYWNjLmNvbmNhdChbcGxhY2VtZW50ICsgXCItXCIgKyBzdGFydCwgcGxhY2VtZW50ICsgXCItXCIgKyBlbmRdKTtcbn0sIFtdKTtcbmV4cG9ydCB2YXIgcGxhY2VtZW50cyA9IC8qI19fUFVSRV9fKi9bXS5jb25jYXQoYmFzZVBsYWNlbWVudHMsIFthdXRvXSkucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHBsYWNlbWVudCkge1xuICByZXR1cm4gYWNjLmNvbmNhdChbcGxhY2VtZW50LCBwbGFjZW1lbnQgKyBcIi1cIiArIHN0YXJ0LCBwbGFjZW1lbnQgKyBcIi1cIiArIGVuZF0pO1xufSwgW10pOyAvLyBtb2RpZmllcnMgdGhhdCBuZWVkIHRvIHJlYWQgdGhlIERPTVxuXG5leHBvcnQgdmFyIGJlZm9yZVJlYWQgPSAnYmVmb3JlUmVhZCc7XG5leHBvcnQgdmFyIHJlYWQgPSAncmVhZCc7XG5leHBvcnQgdmFyIGFmdGVyUmVhZCA9ICdhZnRlclJlYWQnOyAvLyBwdXJlLWxvZ2ljIG1vZGlmaWVyc1xuXG5leHBvcnQgdmFyIGJlZm9yZU1haW4gPSAnYmVmb3JlTWFpbic7XG5leHBvcnQgdmFyIG1haW4gPSAnbWFpbic7XG5leHBvcnQgdmFyIGFmdGVyTWFpbiA9ICdhZnRlck1haW4nOyAvLyBtb2RpZmllciB3aXRoIHRoZSBwdXJwb3NlIHRvIHdyaXRlIHRvIHRoZSBET00gKG9yIHdyaXRlIGludG8gYSBmcmFtZXdvcmsgc3RhdGUpXG5cbmV4cG9ydCB2YXIgYmVmb3JlV3JpdGUgPSAnYmVmb3JlV3JpdGUnO1xuZXhwb3J0IHZhciB3cml0ZSA9ICd3cml0ZSc7XG5leHBvcnQgdmFyIGFmdGVyV3JpdGUgPSAnYWZ0ZXJXcml0ZSc7XG5leHBvcnQgdmFyIG1vZGlmaWVyUGhhc2VzID0gW2JlZm9yZVJlYWQsIHJlYWQsIGFmdGVyUmVhZCwgYmVmb3JlTWFpbiwgbWFpbiwgYWZ0ZXJNYWluLCBiZWZvcmVXcml0ZSwgd3JpdGUsIGFmdGVyV3JpdGVdOyIsImltcG9ydCB7IG1vZGlmaWVyUGhhc2VzIH0gZnJvbSBcIi4uL2VudW1zLmpzXCI7IC8vIHNvdXJjZTogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNDk4NzUyNTVcblxuZnVuY3Rpb24gb3JkZXIobW9kaWZpZXJzKSB7XG4gIHZhciBtYXAgPSBuZXcgTWFwKCk7XG4gIHZhciB2aXNpdGVkID0gbmV3IFNldCgpO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIG1vZGlmaWVycy5mb3JFYWNoKGZ1bmN0aW9uIChtb2RpZmllcikge1xuICAgIG1hcC5zZXQobW9kaWZpZXIubmFtZSwgbW9kaWZpZXIpO1xuICB9KTsgLy8gT24gdmlzaXRpbmcgb2JqZWN0LCBjaGVjayBmb3IgaXRzIGRlcGVuZGVuY2llcyBhbmQgdmlzaXQgdGhlbSByZWN1cnNpdmVseVxuXG4gIGZ1bmN0aW9uIHNvcnQobW9kaWZpZXIpIHtcbiAgICB2aXNpdGVkLmFkZChtb2RpZmllci5uYW1lKTtcbiAgICB2YXIgcmVxdWlyZXMgPSBbXS5jb25jYXQobW9kaWZpZXIucmVxdWlyZXMgfHwgW10sIG1vZGlmaWVyLnJlcXVpcmVzSWZFeGlzdHMgfHwgW10pO1xuICAgIHJlcXVpcmVzLmZvckVhY2goZnVuY3Rpb24gKGRlcCkge1xuICAgICAgaWYgKCF2aXNpdGVkLmhhcyhkZXApKSB7XG4gICAgICAgIHZhciBkZXBNb2RpZmllciA9IG1hcC5nZXQoZGVwKTtcblxuICAgICAgICBpZiAoZGVwTW9kaWZpZXIpIHtcbiAgICAgICAgICBzb3J0KGRlcE1vZGlmaWVyKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIHJlc3VsdC5wdXNoKG1vZGlmaWVyKTtcbiAgfVxuXG4gIG1vZGlmaWVycy5mb3JFYWNoKGZ1bmN0aW9uIChtb2RpZmllcikge1xuICAgIGlmICghdmlzaXRlZC5oYXMobW9kaWZpZXIubmFtZSkpIHtcbiAgICAgIC8vIGNoZWNrIGZvciB2aXNpdGVkIG9iamVjdFxuICAgICAgc29ydChtb2RpZmllcik7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gb3JkZXJNb2RpZmllcnMobW9kaWZpZXJzKSB7XG4gIC8vIG9yZGVyIGJhc2VkIG9uIGRlcGVuZGVuY2llc1xuICB2YXIgb3JkZXJlZE1vZGlmaWVycyA9IG9yZGVyKG1vZGlmaWVycyk7IC8vIG9yZGVyIGJhc2VkIG9uIHBoYXNlXG5cbiAgcmV0dXJuIG1vZGlmaWVyUGhhc2VzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBwaGFzZSkge1xuICAgIHJldHVybiBhY2MuY29uY2F0KG9yZGVyZWRNb2RpZmllcnMuZmlsdGVyKGZ1bmN0aW9uIChtb2RpZmllcikge1xuICAgICAgcmV0dXJuIG1vZGlmaWVyLnBoYXNlID09PSBwaGFzZTtcbiAgICB9KSk7XG4gIH0sIFtdKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkZWJvdW5jZShmbikge1xuICB2YXIgcGVuZGluZztcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXBlbmRpbmcpIHtcbiAgICAgIHBlbmRpbmcgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBwZW5kaW5nID0gdW5kZWZpbmVkO1xuICAgICAgICAgIHJlc29sdmUoZm4oKSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBlbmRpbmc7XG4gIH07XG59IiwiaW1wb3J0IGdldENvbXBvc2l0ZVJlY3QgZnJvbSBcIi4vZG9tLXV0aWxzL2dldENvbXBvc2l0ZVJlY3QuanNcIjtcbmltcG9ydCBnZXRMYXlvdXRSZWN0IGZyb20gXCIuL2RvbS11dGlscy9nZXRMYXlvdXRSZWN0LmpzXCI7XG5pbXBvcnQgbGlzdFNjcm9sbFBhcmVudHMgZnJvbSBcIi4vZG9tLXV0aWxzL2xpc3RTY3JvbGxQYXJlbnRzLmpzXCI7XG5pbXBvcnQgZ2V0T2Zmc2V0UGFyZW50IGZyb20gXCIuL2RvbS11dGlscy9nZXRPZmZzZXRQYXJlbnQuanNcIjtcbmltcG9ydCBnZXRDb21wdXRlZFN0eWxlIGZyb20gXCIuL2RvbS11dGlscy9nZXRDb21wdXRlZFN0eWxlLmpzXCI7XG5pbXBvcnQgb3JkZXJNb2RpZmllcnMgZnJvbSBcIi4vdXRpbHMvb3JkZXJNb2RpZmllcnMuanNcIjtcbmltcG9ydCBkZWJvdW5jZSBmcm9tIFwiLi91dGlscy9kZWJvdW5jZS5qc1wiO1xuaW1wb3J0IHZhbGlkYXRlTW9kaWZpZXJzIGZyb20gXCIuL3V0aWxzL3ZhbGlkYXRlTW9kaWZpZXJzLmpzXCI7XG5pbXBvcnQgdW5pcXVlQnkgZnJvbSBcIi4vdXRpbHMvdW5pcXVlQnkuanNcIjtcbmltcG9ydCBnZXRCYXNlUGxhY2VtZW50IGZyb20gXCIuL3V0aWxzL2dldEJhc2VQbGFjZW1lbnQuanNcIjtcbmltcG9ydCBtZXJnZUJ5TmFtZSBmcm9tIFwiLi91dGlscy9tZXJnZUJ5TmFtZS5qc1wiO1xuaW1wb3J0IGRldGVjdE92ZXJmbG93IGZyb20gXCIuL3V0aWxzL2RldGVjdE92ZXJmbG93LmpzXCI7XG5pbXBvcnQgeyBpc0VsZW1lbnQgfSBmcm9tIFwiLi9kb20tdXRpbHMvaW5zdGFuY2VPZi5qc1wiO1xuaW1wb3J0IHsgYXV0byB9IGZyb20gXCIuL2VudW1zLmpzXCI7XG52YXIgSU5WQUxJRF9FTEVNRU5UX0VSUk9SID0gJ1BvcHBlcjogSW52YWxpZCByZWZlcmVuY2Ugb3IgcG9wcGVyIGFyZ3VtZW50IHByb3ZpZGVkLiBUaGV5IG11c3QgYmUgZWl0aGVyIGEgRE9NIGVsZW1lbnQgb3IgdmlydHVhbCBlbGVtZW50Lic7XG52YXIgSU5GSU5JVEVfTE9PUF9FUlJPUiA9ICdQb3BwZXI6IEFuIGluZmluaXRlIGxvb3AgaW4gdGhlIG1vZGlmaWVycyBjeWNsZSBoYXMgYmVlbiBkZXRlY3RlZCEgVGhlIGN5Y2xlIGhhcyBiZWVuIGludGVycnVwdGVkIHRvIHByZXZlbnQgYSBicm93c2VyIGNyYXNoLic7XG52YXIgREVGQVVMVF9PUFRJT05TID0ge1xuICBwbGFjZW1lbnQ6ICdib3R0b20nLFxuICBtb2RpZmllcnM6IFtdLFxuICBzdHJhdGVneTogJ2Fic29sdXRlJ1xufTtcblxuZnVuY3Rpb24gYXJlVmFsaWRFbGVtZW50cygpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiAhYXJncy5zb21lKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgcmV0dXJuICEoZWxlbWVudCAmJiB0eXBlb2YgZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QgPT09ICdmdW5jdGlvbicpO1xuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBvcHBlckdlbmVyYXRvcihnZW5lcmF0b3JPcHRpb25zKSB7XG4gIGlmIChnZW5lcmF0b3JPcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBnZW5lcmF0b3JPcHRpb25zID0ge307XG4gIH1cblxuICB2YXIgX2dlbmVyYXRvck9wdGlvbnMgPSBnZW5lcmF0b3JPcHRpb25zLFxuICAgICAgX2dlbmVyYXRvck9wdGlvbnMkZGVmID0gX2dlbmVyYXRvck9wdGlvbnMuZGVmYXVsdE1vZGlmaWVycyxcbiAgICAgIGRlZmF1bHRNb2RpZmllcnMgPSBfZ2VuZXJhdG9yT3B0aW9ucyRkZWYgPT09IHZvaWQgMCA/IFtdIDogX2dlbmVyYXRvck9wdGlvbnMkZGVmLFxuICAgICAgX2dlbmVyYXRvck9wdGlvbnMkZGVmMiA9IF9nZW5lcmF0b3JPcHRpb25zLmRlZmF1bHRPcHRpb25zLFxuICAgICAgZGVmYXVsdE9wdGlvbnMgPSBfZ2VuZXJhdG9yT3B0aW9ucyRkZWYyID09PSB2b2lkIDAgPyBERUZBVUxUX09QVElPTlMgOiBfZ2VuZXJhdG9yT3B0aW9ucyRkZWYyO1xuICByZXR1cm4gZnVuY3Rpb24gY3JlYXRlUG9wcGVyKHJlZmVyZW5jZSwgcG9wcGVyLCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IGRlZmF1bHRPcHRpb25zO1xuICAgIH1cblxuICAgIHZhciBzdGF0ZSA9IHtcbiAgICAgIHBsYWNlbWVudDogJ2JvdHRvbScsXG4gICAgICBvcmRlcmVkTW9kaWZpZXJzOiBbXSxcbiAgICAgIG9wdGlvbnM6IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgREVGQVVMVF9PUFRJT05TKSwgZGVmYXVsdE9wdGlvbnMpLFxuICAgICAgbW9kaWZpZXJzRGF0YToge30sXG4gICAgICBlbGVtZW50czoge1xuICAgICAgICByZWZlcmVuY2U6IHJlZmVyZW5jZSxcbiAgICAgICAgcG9wcGVyOiBwb3BwZXJcbiAgICAgIH0sXG4gICAgICBhdHRyaWJ1dGVzOiB7fSxcbiAgICAgIHN0eWxlczoge31cbiAgICB9O1xuICAgIHZhciBlZmZlY3RDbGVhbnVwRm5zID0gW107XG4gICAgdmFyIGlzRGVzdHJveWVkID0gZmFsc2U7XG4gICAgdmFyIGluc3RhbmNlID0ge1xuICAgICAgc3RhdGU6IHN0YXRlLFxuICAgICAgc2V0T3B0aW9uczogZnVuY3Rpb24gc2V0T3B0aW9ucyhvcHRpb25zKSB7XG4gICAgICAgIGNsZWFudXBNb2RpZmllckVmZmVjdHMoKTtcbiAgICAgICAgc3RhdGUub3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0T3B0aW9ucyksIHN0YXRlLm9wdGlvbnMpLCBvcHRpb25zKTtcbiAgICAgICAgc3RhdGUuc2Nyb2xsUGFyZW50cyA9IHtcbiAgICAgICAgICByZWZlcmVuY2U6IGlzRWxlbWVudChyZWZlcmVuY2UpID8gbGlzdFNjcm9sbFBhcmVudHMocmVmZXJlbmNlKSA6IHJlZmVyZW5jZS5jb250ZXh0RWxlbWVudCA/IGxpc3RTY3JvbGxQYXJlbnRzKHJlZmVyZW5jZS5jb250ZXh0RWxlbWVudCkgOiBbXSxcbiAgICAgICAgICBwb3BwZXI6IGxpc3RTY3JvbGxQYXJlbnRzKHBvcHBlcilcbiAgICAgICAgfTsgLy8gT3JkZXJzIHRoZSBtb2RpZmllcnMgYmFzZWQgb24gdGhlaXIgZGVwZW5kZW5jaWVzIGFuZCBgcGhhc2VgXG4gICAgICAgIC8vIHByb3BlcnRpZXNcblxuICAgICAgICB2YXIgb3JkZXJlZE1vZGlmaWVycyA9IG9yZGVyTW9kaWZpZXJzKG1lcmdlQnlOYW1lKFtdLmNvbmNhdChkZWZhdWx0TW9kaWZpZXJzLCBzdGF0ZS5vcHRpb25zLm1vZGlmaWVycykpKTsgLy8gU3RyaXAgb3V0IGRpc2FibGVkIG1vZGlmaWVyc1xuXG4gICAgICAgIHN0YXRlLm9yZGVyZWRNb2RpZmllcnMgPSBvcmRlcmVkTW9kaWZpZXJzLmZpbHRlcihmdW5jdGlvbiAobSkge1xuICAgICAgICAgIHJldHVybiBtLmVuYWJsZWQ7XG4gICAgICAgIH0pOyAvLyBWYWxpZGF0ZSB0aGUgcHJvdmlkZWQgbW9kaWZpZXJzIHNvIHRoYXQgdGhlIGNvbnN1bWVyIHdpbGwgZ2V0IHdhcm5lZFxuICAgICAgICAvLyBpZiBvbmUgb2YgdGhlIG1vZGlmaWVycyBpcyBpbnZhbGlkIGZvciBhbnkgcmVhc29uXG5cbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICAgIHZhciBtb2RpZmllcnMgPSB1bmlxdWVCeShbXS5jb25jYXQob3JkZXJlZE1vZGlmaWVycywgc3RhdGUub3B0aW9ucy5tb2RpZmllcnMpLCBmdW5jdGlvbiAoX3JlZikge1xuICAgICAgICAgICAgdmFyIG5hbWUgPSBfcmVmLm5hbWU7XG4gICAgICAgICAgICByZXR1cm4gbmFtZTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB2YWxpZGF0ZU1vZGlmaWVycyhtb2RpZmllcnMpO1xuXG4gICAgICAgICAgaWYgKGdldEJhc2VQbGFjZW1lbnQoc3RhdGUub3B0aW9ucy5wbGFjZW1lbnQpID09PSBhdXRvKSB7XG4gICAgICAgICAgICB2YXIgZmxpcE1vZGlmaWVyID0gc3RhdGUub3JkZXJlZE1vZGlmaWVycy5maW5kKGZ1bmN0aW9uIChfcmVmMikge1xuICAgICAgICAgICAgICB2YXIgbmFtZSA9IF9yZWYyLm5hbWU7XG4gICAgICAgICAgICAgIHJldHVybiBuYW1lID09PSAnZmxpcCc7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKCFmbGlwTW9kaWZpZXIpIHtcbiAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihbJ1BvcHBlcjogXCJhdXRvXCIgcGxhY2VtZW50cyByZXF1aXJlIHRoZSBcImZsaXBcIiBtb2RpZmllciBiZScsICdwcmVzZW50IGFuZCBlbmFibGVkIHRvIHdvcmsuJ10uam9pbignICcpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgX2dldENvbXB1dGVkU3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKHBvcHBlciksXG4gICAgICAgICAgICAgIG1hcmdpblRvcCA9IF9nZXRDb21wdXRlZFN0eWxlLm1hcmdpblRvcCxcbiAgICAgICAgICAgICAgbWFyZ2luUmlnaHQgPSBfZ2V0Q29tcHV0ZWRTdHlsZS5tYXJnaW5SaWdodCxcbiAgICAgICAgICAgICAgbWFyZ2luQm90dG9tID0gX2dldENvbXB1dGVkU3R5bGUubWFyZ2luQm90dG9tLFxuICAgICAgICAgICAgICBtYXJnaW5MZWZ0ID0gX2dldENvbXB1dGVkU3R5bGUubWFyZ2luTGVmdDsgLy8gV2Ugbm8gbG9uZ2VyIHRha2UgaW50byBhY2NvdW50IGBtYXJnaW5zYCBvbiB0aGUgcG9wcGVyLCBhbmQgaXQgY2FuXG4gICAgICAgICAgLy8gY2F1c2UgYnVncyB3aXRoIHBvc2l0aW9uaW5nLCBzbyB3ZSdsbCB3YXJuIHRoZSBjb25zdW1lclxuXG5cbiAgICAgICAgICBpZiAoW21hcmdpblRvcCwgbWFyZ2luUmlnaHQsIG1hcmdpbkJvdHRvbSwgbWFyZ2luTGVmdF0uc29tZShmdW5jdGlvbiAobWFyZ2luKSB7XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VGbG9hdChtYXJnaW4pO1xuICAgICAgICAgIH0pKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oWydQb3BwZXI6IENTUyBcIm1hcmdpblwiIHN0eWxlcyBjYW5ub3QgYmUgdXNlZCB0byBhcHBseSBwYWRkaW5nJywgJ2JldHdlZW4gdGhlIHBvcHBlciBhbmQgaXRzIHJlZmVyZW5jZSBlbGVtZW50IG9yIGJvdW5kYXJ5LicsICdUbyByZXBsaWNhdGUgbWFyZ2luLCB1c2UgdGhlIGBvZmZzZXRgIG1vZGlmaWVyLCBhcyB3ZWxsIGFzJywgJ3RoZSBgcGFkZGluZ2Agb3B0aW9uIGluIHRoZSBgcHJldmVudE92ZXJmbG93YCBhbmQgYGZsaXBgJywgJ21vZGlmaWVycy4nXS5qb2luKCcgJykpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJ1bk1vZGlmaWVyRWZmZWN0cygpO1xuICAgICAgICByZXR1cm4gaW5zdGFuY2UudXBkYXRlKCk7XG4gICAgICB9LFxuICAgICAgLy8gU3luYyB1cGRhdGUg4oCTIGl0IHdpbGwgYWx3YXlzIGJlIGV4ZWN1dGVkLCBldmVuIGlmIG5vdCBuZWNlc3NhcnkuIFRoaXNcbiAgICAgIC8vIGlzIHVzZWZ1bCBmb3IgbG93IGZyZXF1ZW5jeSB1cGRhdGVzIHdoZXJlIHN5bmMgYmVoYXZpb3Igc2ltcGxpZmllcyB0aGVcbiAgICAgIC8vIGxvZ2ljLlxuICAgICAgLy8gRm9yIGhpZ2ggZnJlcXVlbmN5IHVwZGF0ZXMgKGUuZy4gYHJlc2l6ZWAgYW5kIGBzY3JvbGxgIGV2ZW50cyksIGFsd2F5c1xuICAgICAgLy8gcHJlZmVyIHRoZSBhc3luYyBQb3BwZXIjdXBkYXRlIG1ldGhvZFxuICAgICAgZm9yY2VVcGRhdGU6IGZ1bmN0aW9uIGZvcmNlVXBkYXRlKCkge1xuICAgICAgICBpZiAoaXNEZXN0cm95ZWQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgX3N0YXRlJGVsZW1lbnRzID0gc3RhdGUuZWxlbWVudHMsXG4gICAgICAgICAgICByZWZlcmVuY2UgPSBfc3RhdGUkZWxlbWVudHMucmVmZXJlbmNlLFxuICAgICAgICAgICAgcG9wcGVyID0gX3N0YXRlJGVsZW1lbnRzLnBvcHBlcjsgLy8gRG9uJ3QgcHJvY2VlZCBpZiBgcmVmZXJlbmNlYCBvciBgcG9wcGVyYCBhcmUgbm90IHZhbGlkIGVsZW1lbnRzXG4gICAgICAgIC8vIGFueW1vcmVcblxuICAgICAgICBpZiAoIWFyZVZhbGlkRWxlbWVudHMocmVmZXJlbmNlLCBwb3BwZXIpKSB7XG4gICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihJTlZBTElEX0VMRU1FTlRfRVJST1IpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSAvLyBTdG9yZSB0aGUgcmVmZXJlbmNlIGFuZCBwb3BwZXIgcmVjdHMgdG8gYmUgcmVhZCBieSBtb2RpZmllcnNcblxuXG4gICAgICAgIHN0YXRlLnJlY3RzID0ge1xuICAgICAgICAgIHJlZmVyZW5jZTogZ2V0Q29tcG9zaXRlUmVjdChyZWZlcmVuY2UsIGdldE9mZnNldFBhcmVudChwb3BwZXIpLCBzdGF0ZS5vcHRpb25zLnN0cmF0ZWd5ID09PSAnZml4ZWQnKSxcbiAgICAgICAgICBwb3BwZXI6IGdldExheW91dFJlY3QocG9wcGVyKVxuICAgICAgICB9OyAvLyBNb2RpZmllcnMgaGF2ZSB0aGUgYWJpbGl0eSB0byByZXNldCB0aGUgY3VycmVudCB1cGRhdGUgY3ljbGUuIFRoZVxuICAgICAgICAvLyBtb3N0IGNvbW1vbiB1c2UgY2FzZSBmb3IgdGhpcyBpcyB0aGUgYGZsaXBgIG1vZGlmaWVyIGNoYW5naW5nIHRoZVxuICAgICAgICAvLyBwbGFjZW1lbnQsIHdoaWNoIHRoZW4gbmVlZHMgdG8gcmUtcnVuIGFsbCB0aGUgbW9kaWZpZXJzLCBiZWNhdXNlIHRoZVxuICAgICAgICAvLyBsb2dpYyB3YXMgcHJldmlvdXNseSByYW4gZm9yIHRoZSBwcmV2aW91cyBwbGFjZW1lbnQgYW5kIGlzIHRoZXJlZm9yZVxuICAgICAgICAvLyBzdGFsZS9pbmNvcnJlY3RcblxuICAgICAgICBzdGF0ZS5yZXNldCA9IGZhbHNlO1xuICAgICAgICBzdGF0ZS5wbGFjZW1lbnQgPSBzdGF0ZS5vcHRpb25zLnBsYWNlbWVudDsgLy8gT24gZWFjaCB1cGRhdGUgY3ljbGUsIHRoZSBgbW9kaWZpZXJzRGF0YWAgcHJvcGVydHkgZm9yIGVhY2ggbW9kaWZpZXJcbiAgICAgICAgLy8gaXMgZmlsbGVkIHdpdGggdGhlIGluaXRpYWwgZGF0YSBzcGVjaWZpZWQgYnkgdGhlIG1vZGlmaWVyLiBUaGlzIG1lYW5zXG4gICAgICAgIC8vIGl0IGRvZXNuJ3QgcGVyc2lzdCBhbmQgaXMgZnJlc2ggb24gZWFjaCB1cGRhdGUuXG4gICAgICAgIC8vIFRvIGVuc3VyZSBwZXJzaXN0ZW50IGRhdGEsIHVzZSBgJHtuYW1lfSNwZXJzaXN0ZW50YFxuXG4gICAgICAgIHN0YXRlLm9yZGVyZWRNb2RpZmllcnMuZm9yRWFjaChmdW5jdGlvbiAobW9kaWZpZXIpIHtcbiAgICAgICAgICByZXR1cm4gc3RhdGUubW9kaWZpZXJzRGF0YVttb2RpZmllci5uYW1lXSA9IE9iamVjdC5hc3NpZ24oe30sIG1vZGlmaWVyLmRhdGEpO1xuICAgICAgICB9KTtcbiAgICAgICAgdmFyIF9fZGVidWdfbG9vcHNfXyA9IDA7XG5cbiAgICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IHN0YXRlLm9yZGVyZWRNb2RpZmllcnMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICAgICAgX19kZWJ1Z19sb29wc19fICs9IDE7XG5cbiAgICAgICAgICAgIGlmIChfX2RlYnVnX2xvb3BzX18gPiAxMDApIHtcbiAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihJTkZJTklURV9MT09QX0VSUk9SKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHN0YXRlLnJlc2V0ID09PSB0cnVlKSB7XG4gICAgICAgICAgICBzdGF0ZS5yZXNldCA9IGZhbHNlO1xuICAgICAgICAgICAgaW5kZXggPSAtMTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBfc3RhdGUkb3JkZXJlZE1vZGlmaWUgPSBzdGF0ZS5vcmRlcmVkTW9kaWZpZXJzW2luZGV4XSxcbiAgICAgICAgICAgICAgZm4gPSBfc3RhdGUkb3JkZXJlZE1vZGlmaWUuZm4sXG4gICAgICAgICAgICAgIF9zdGF0ZSRvcmRlcmVkTW9kaWZpZTIgPSBfc3RhdGUkb3JkZXJlZE1vZGlmaWUub3B0aW9ucyxcbiAgICAgICAgICAgICAgX29wdGlvbnMgPSBfc3RhdGUkb3JkZXJlZE1vZGlmaWUyID09PSB2b2lkIDAgPyB7fSA6IF9zdGF0ZSRvcmRlcmVkTW9kaWZpZTIsXG4gICAgICAgICAgICAgIG5hbWUgPSBfc3RhdGUkb3JkZXJlZE1vZGlmaWUubmFtZTtcblxuICAgICAgICAgIGlmICh0eXBlb2YgZm4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHN0YXRlID0gZm4oe1xuICAgICAgICAgICAgICBzdGF0ZTogc3RhdGUsXG4gICAgICAgICAgICAgIG9wdGlvbnM6IF9vcHRpb25zLFxuICAgICAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgICAgICBpbnN0YW5jZTogaW5zdGFuY2VcbiAgICAgICAgICAgIH0pIHx8IHN0YXRlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIC8vIEFzeW5jIGFuZCBvcHRpbWlzdGljYWxseSBvcHRpbWl6ZWQgdXBkYXRlIOKAkyBpdCB3aWxsIG5vdCBiZSBleGVjdXRlZCBpZlxuICAgICAgLy8gbm90IG5lY2Vzc2FyeSAoZGVib3VuY2VkIHRvIHJ1biBhdCBtb3N0IG9uY2UtcGVyLXRpY2spXG4gICAgICB1cGRhdGU6IGRlYm91bmNlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgICAgaW5zdGFuY2UuZm9yY2VVcGRhdGUoKTtcbiAgICAgICAgICByZXNvbHZlKHN0YXRlKTtcbiAgICAgICAgfSk7XG4gICAgICB9KSxcbiAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICAgIGNsZWFudXBNb2RpZmllckVmZmVjdHMoKTtcbiAgICAgICAgaXNEZXN0cm95ZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBpZiAoIWFyZVZhbGlkRWxlbWVudHMocmVmZXJlbmNlLCBwb3BwZXIpKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoSU5WQUxJRF9FTEVNRU5UX0VSUk9SKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGluc3RhbmNlO1xuICAgIH1cblxuICAgIGluc3RhbmNlLnNldE9wdGlvbnMob3B0aW9ucykudGhlbihmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICAgIGlmICghaXNEZXN0cm95ZWQgJiYgb3B0aW9ucy5vbkZpcnN0VXBkYXRlKSB7XG4gICAgICAgIG9wdGlvbnMub25GaXJzdFVwZGF0ZShzdGF0ZSk7XG4gICAgICB9XG4gICAgfSk7IC8vIE1vZGlmaWVycyBoYXZlIHRoZSBhYmlsaXR5IHRvIGV4ZWN1dGUgYXJiaXRyYXJ5IGNvZGUgYmVmb3JlIHRoZSBmaXJzdFxuICAgIC8vIHVwZGF0ZSBjeWNsZSBydW5zLiBUaGV5IHdpbGwgYmUgZXhlY3V0ZWQgaW4gdGhlIHNhbWUgb3JkZXIgYXMgdGhlIHVwZGF0ZVxuICAgIC8vIGN5Y2xlLiBUaGlzIGlzIHVzZWZ1bCB3aGVuIGEgbW9kaWZpZXIgYWRkcyBzb21lIHBlcnNpc3RlbnQgZGF0YSB0aGF0XG4gICAgLy8gb3RoZXIgbW9kaWZpZXJzIG5lZWQgdG8gdXNlLCBidXQgdGhlIG1vZGlmaWVyIGlzIHJ1biBhZnRlciB0aGUgZGVwZW5kZW50XG4gICAgLy8gb25lLlxuXG4gICAgZnVuY3Rpb24gcnVuTW9kaWZpZXJFZmZlY3RzKCkge1xuICAgICAgc3RhdGUub3JkZXJlZE1vZGlmaWVycy5mb3JFYWNoKGZ1bmN0aW9uIChfcmVmMykge1xuICAgICAgICB2YXIgbmFtZSA9IF9yZWYzLm5hbWUsXG4gICAgICAgICAgICBfcmVmMyRvcHRpb25zID0gX3JlZjMub3B0aW9ucyxcbiAgICAgICAgICAgIG9wdGlvbnMgPSBfcmVmMyRvcHRpb25zID09PSB2b2lkIDAgPyB7fSA6IF9yZWYzJG9wdGlvbnMsXG4gICAgICAgICAgICBlZmZlY3QgPSBfcmVmMy5lZmZlY3Q7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBlZmZlY3QgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICB2YXIgY2xlYW51cEZuID0gZWZmZWN0KHtcbiAgICAgICAgICAgIHN0YXRlOiBzdGF0ZSxcbiAgICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgICAgICBpbnN0YW5jZTogaW5zdGFuY2UsXG4gICAgICAgICAgICBvcHRpb25zOiBvcHRpb25zXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICB2YXIgbm9vcEZuID0gZnVuY3Rpb24gbm9vcEZuKCkge307XG5cbiAgICAgICAgICBlZmZlY3RDbGVhbnVwRm5zLnB1c2goY2xlYW51cEZuIHx8IG5vb3BGbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNsZWFudXBNb2RpZmllckVmZmVjdHMoKSB7XG4gICAgICBlZmZlY3RDbGVhbnVwRm5zLmZvckVhY2goZnVuY3Rpb24gKGZuKSB7XG4gICAgICAgIHJldHVybiBmbigpO1xuICAgICAgfSk7XG4gICAgICBlZmZlY3RDbGVhbnVwRm5zID0gW107XG4gICAgfVxuXG4gICAgcmV0dXJuIGluc3RhbmNlO1xuICB9O1xufVxuZXhwb3J0IHZhciBjcmVhdGVQb3BwZXIgPSAvKiNfX1BVUkVfXyovcG9wcGVyR2VuZXJhdG9yKCk7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuZXhwb3J0IHsgZGV0ZWN0T3ZlcmZsb3cgfTsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtZXJnZUJ5TmFtZShtb2RpZmllcnMpIHtcbiAgdmFyIG1lcmdlZCA9IG1vZGlmaWVycy5yZWR1Y2UoZnVuY3Rpb24gKG1lcmdlZCwgY3VycmVudCkge1xuICAgIHZhciBleGlzdGluZyA9IG1lcmdlZFtjdXJyZW50Lm5hbWVdO1xuICAgIG1lcmdlZFtjdXJyZW50Lm5hbWVdID0gZXhpc3RpbmcgPyBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgZXhpc3RpbmcpLCBjdXJyZW50KSwge30sIHtcbiAgICAgIG9wdGlvbnM6IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgZXhpc3Rpbmcub3B0aW9ucyksIGN1cnJlbnQub3B0aW9ucyksXG4gICAgICBkYXRhOiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGV4aXN0aW5nLmRhdGEpLCBjdXJyZW50LmRhdGEpXG4gICAgfSkgOiBjdXJyZW50O1xuICAgIHJldHVybiBtZXJnZWQ7XG4gIH0sIHt9KTsgLy8gSUUxMSBkb2VzIG5vdCBzdXBwb3J0IE9iamVjdC52YWx1ZXNcblxuICByZXR1cm4gT2JqZWN0LmtleXMobWVyZ2VkKS5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBtZXJnZWRba2V5XTtcbiAgfSk7XG59IiwiaW1wb3J0IGdldFdpbmRvdyBmcm9tIFwiLi4vZG9tLXV0aWxzL2dldFdpbmRvdy5qc1wiOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cbnZhciBwYXNzaXZlID0ge1xuICBwYXNzaXZlOiB0cnVlXG59O1xuXG5mdW5jdGlvbiBlZmZlY3QoX3JlZikge1xuICB2YXIgc3RhdGUgPSBfcmVmLnN0YXRlLFxuICAgICAgaW5zdGFuY2UgPSBfcmVmLmluc3RhbmNlLFxuICAgICAgb3B0aW9ucyA9IF9yZWYub3B0aW9ucztcbiAgdmFyIF9vcHRpb25zJHNjcm9sbCA9IG9wdGlvbnMuc2Nyb2xsLFxuICAgICAgc2Nyb2xsID0gX29wdGlvbnMkc2Nyb2xsID09PSB2b2lkIDAgPyB0cnVlIDogX29wdGlvbnMkc2Nyb2xsLFxuICAgICAgX29wdGlvbnMkcmVzaXplID0gb3B0aW9ucy5yZXNpemUsXG4gICAgICByZXNpemUgPSBfb3B0aW9ucyRyZXNpemUgPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyRyZXNpemU7XG4gIHZhciB3aW5kb3cgPSBnZXRXaW5kb3coc3RhdGUuZWxlbWVudHMucG9wcGVyKTtcbiAgdmFyIHNjcm9sbFBhcmVudHMgPSBbXS5jb25jYXQoc3RhdGUuc2Nyb2xsUGFyZW50cy5yZWZlcmVuY2UsIHN0YXRlLnNjcm9sbFBhcmVudHMucG9wcGVyKTtcblxuICBpZiAoc2Nyb2xsKSB7XG4gICAgc2Nyb2xsUGFyZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChzY3JvbGxQYXJlbnQpIHtcbiAgICAgIHNjcm9sbFBhcmVudC5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBpbnN0YW5jZS51cGRhdGUsIHBhc3NpdmUpO1xuICAgIH0pO1xuICB9XG5cbiAgaWYgKHJlc2l6ZSkge1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBpbnN0YW5jZS51cGRhdGUsIHBhc3NpdmUpO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoc2Nyb2xsKSB7XG4gICAgICBzY3JvbGxQYXJlbnRzLmZvckVhY2goZnVuY3Rpb24gKHNjcm9sbFBhcmVudCkge1xuICAgICAgICBzY3JvbGxQYXJlbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgaW5zdGFuY2UudXBkYXRlLCBwYXNzaXZlKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChyZXNpemUpIHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCBpbnN0YW5jZS51cGRhdGUsIHBhc3NpdmUpO1xuICAgIH1cbiAgfTtcbn0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogJ2V2ZW50TGlzdGVuZXJzJyxcbiAgZW5hYmxlZDogdHJ1ZSxcbiAgcGhhc2U6ICd3cml0ZScsXG4gIGZuOiBmdW5jdGlvbiBmbigpIHt9LFxuICBlZmZlY3Q6IGVmZmVjdCxcbiAgZGF0YToge31cbn07IiwiaW1wb3J0IHsgYXV0byB9IGZyb20gXCIuLi9lbnVtcy5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0QmFzZVBsYWNlbWVudChwbGFjZW1lbnQpIHtcbiAgcmV0dXJuIHBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFZhcmlhdGlvbihwbGFjZW1lbnQpIHtcbiAgcmV0dXJuIHBsYWNlbWVudC5zcGxpdCgnLScpWzFdO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldE1haW5BeGlzRnJvbVBsYWNlbWVudChwbGFjZW1lbnQpIHtcbiAgcmV0dXJuIFsndG9wJywgJ2JvdHRvbSddLmluZGV4T2YocGxhY2VtZW50KSA+PSAwID8gJ3gnIDogJ3knO1xufSIsImltcG9ydCBnZXRCYXNlUGxhY2VtZW50IGZyb20gXCIuL2dldEJhc2VQbGFjZW1lbnQuanNcIjtcbmltcG9ydCBnZXRWYXJpYXRpb24gZnJvbSBcIi4vZ2V0VmFyaWF0aW9uLmpzXCI7XG5pbXBvcnQgZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50IGZyb20gXCIuL2dldE1haW5BeGlzRnJvbVBsYWNlbWVudC5qc1wiO1xuaW1wb3J0IHsgdG9wLCByaWdodCwgYm90dG9tLCBsZWZ0LCBzdGFydCwgZW5kIH0gZnJvbSBcIi4uL2VudW1zLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb21wdXRlT2Zmc2V0cyhfcmVmKSB7XG4gIHZhciByZWZlcmVuY2UgPSBfcmVmLnJlZmVyZW5jZSxcbiAgICAgIGVsZW1lbnQgPSBfcmVmLmVsZW1lbnQsXG4gICAgICBwbGFjZW1lbnQgPSBfcmVmLnBsYWNlbWVudDtcbiAgdmFyIGJhc2VQbGFjZW1lbnQgPSBwbGFjZW1lbnQgPyBnZXRCYXNlUGxhY2VtZW50KHBsYWNlbWVudCkgOiBudWxsO1xuICB2YXIgdmFyaWF0aW9uID0gcGxhY2VtZW50ID8gZ2V0VmFyaWF0aW9uKHBsYWNlbWVudCkgOiBudWxsO1xuICB2YXIgY29tbW9uWCA9IHJlZmVyZW5jZS54ICsgcmVmZXJlbmNlLndpZHRoIC8gMiAtIGVsZW1lbnQud2lkdGggLyAyO1xuICB2YXIgY29tbW9uWSA9IHJlZmVyZW5jZS55ICsgcmVmZXJlbmNlLmhlaWdodCAvIDIgLSBlbGVtZW50LmhlaWdodCAvIDI7XG4gIHZhciBvZmZzZXRzO1xuXG4gIHN3aXRjaCAoYmFzZVBsYWNlbWVudCkge1xuICAgIGNhc2UgdG9wOlxuICAgICAgb2Zmc2V0cyA9IHtcbiAgICAgICAgeDogY29tbW9uWCxcbiAgICAgICAgeTogcmVmZXJlbmNlLnkgLSBlbGVtZW50LmhlaWdodFxuICAgICAgfTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSBib3R0b206XG4gICAgICBvZmZzZXRzID0ge1xuICAgICAgICB4OiBjb21tb25YLFxuICAgICAgICB5OiByZWZlcmVuY2UueSArIHJlZmVyZW5jZS5oZWlnaHRcbiAgICAgIH07XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgcmlnaHQ6XG4gICAgICBvZmZzZXRzID0ge1xuICAgICAgICB4OiByZWZlcmVuY2UueCArIHJlZmVyZW5jZS53aWR0aCxcbiAgICAgICAgeTogY29tbW9uWVxuICAgICAgfTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSBsZWZ0OlxuICAgICAgb2Zmc2V0cyA9IHtcbiAgICAgICAgeDogcmVmZXJlbmNlLnggLSBlbGVtZW50LndpZHRoLFxuICAgICAgICB5OiBjb21tb25ZXG4gICAgICB9O1xuICAgICAgYnJlYWs7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgb2Zmc2V0cyA9IHtcbiAgICAgICAgeDogcmVmZXJlbmNlLngsXG4gICAgICAgIHk6IHJlZmVyZW5jZS55XG4gICAgICB9O1xuICB9XG5cbiAgdmFyIG1haW5BeGlzID0gYmFzZVBsYWNlbWVudCA/IGdldE1haW5BeGlzRnJvbVBsYWNlbWVudChiYXNlUGxhY2VtZW50KSA6IG51bGw7XG5cbiAgaWYgKG1haW5BeGlzICE9IG51bGwpIHtcbiAgICB2YXIgbGVuID0gbWFpbkF4aXMgPT09ICd5JyA/ICdoZWlnaHQnIDogJ3dpZHRoJztcblxuICAgIHN3aXRjaCAodmFyaWF0aW9uKSB7XG4gICAgICBjYXNlIHN0YXJ0OlxuICAgICAgICBvZmZzZXRzW21haW5BeGlzXSA9IG9mZnNldHNbbWFpbkF4aXNdIC0gKHJlZmVyZW5jZVtsZW5dIC8gMiAtIGVsZW1lbnRbbGVuXSAvIDIpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBlbmQ6XG4gICAgICAgIG9mZnNldHNbbWFpbkF4aXNdID0gb2Zmc2V0c1ttYWluQXhpc10gKyAocmVmZXJlbmNlW2xlbl0gLyAyIC0gZWxlbWVudFtsZW5dIC8gMik7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBkZWZhdWx0OlxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBvZmZzZXRzO1xufSIsImltcG9ydCB7IHRvcCwgbGVmdCwgcmlnaHQsIGJvdHRvbSB9IGZyb20gXCIuLi9lbnVtcy5qc1wiO1xuaW1wb3J0IGdldE9mZnNldFBhcmVudCBmcm9tIFwiLi4vZG9tLXV0aWxzL2dldE9mZnNldFBhcmVudC5qc1wiO1xuaW1wb3J0IGdldFdpbmRvdyBmcm9tIFwiLi4vZG9tLXV0aWxzL2dldFdpbmRvdy5qc1wiO1xuaW1wb3J0IGdldERvY3VtZW50RWxlbWVudCBmcm9tIFwiLi4vZG9tLXV0aWxzL2dldERvY3VtZW50RWxlbWVudC5qc1wiO1xuaW1wb3J0IGdldENvbXB1dGVkU3R5bGUgZnJvbSBcIi4uL2RvbS11dGlscy9nZXRDb21wdXRlZFN0eWxlLmpzXCI7XG5pbXBvcnQgZ2V0QmFzZVBsYWNlbWVudCBmcm9tIFwiLi4vdXRpbHMvZ2V0QmFzZVBsYWNlbWVudC5qc1wiOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cbnZhciB1bnNldFNpZGVzID0ge1xuICB0b3A6ICdhdXRvJyxcbiAgcmlnaHQ6ICdhdXRvJyxcbiAgYm90dG9tOiAnYXV0bycsXG4gIGxlZnQ6ICdhdXRvJ1xufTsgLy8gUm91bmQgdGhlIG9mZnNldHMgdG8gdGhlIG5lYXJlc3Qgc3VpdGFibGUgc3VicGl4ZWwgYmFzZWQgb24gdGhlIERQUi5cbi8vIFpvb21pbmcgY2FuIGNoYW5nZSB0aGUgRFBSLCBidXQgaXQgc2VlbXMgdG8gcmVwb3J0IGEgdmFsdWUgdGhhdCB3aWxsXG4vLyBjbGVhbmx5IGRpdmlkZSB0aGUgdmFsdWVzIGludG8gdGhlIGFwcHJvcHJpYXRlIHN1YnBpeGVscy5cblxuZnVuY3Rpb24gcm91bmRPZmZzZXRzQnlEUFIoX3JlZikge1xuICB2YXIgeCA9IF9yZWYueCxcbiAgICAgIHkgPSBfcmVmLnk7XG4gIHZhciB3aW4gPSB3aW5kb3c7XG4gIHZhciBkcHIgPSB3aW4uZGV2aWNlUGl4ZWxSYXRpbyB8fCAxO1xuICByZXR1cm4ge1xuICAgIHg6IE1hdGgucm91bmQoeCAqIGRwcikgLyBkcHIgfHwgMCxcbiAgICB5OiBNYXRoLnJvdW5kKHkgKiBkcHIpIC8gZHByIHx8IDBcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1hcFRvU3R5bGVzKF9yZWYyKSB7XG4gIHZhciBfT2JqZWN0JGFzc2lnbjI7XG5cbiAgdmFyIHBvcHBlciA9IF9yZWYyLnBvcHBlcixcbiAgICAgIHBvcHBlclJlY3QgPSBfcmVmMi5wb3BwZXJSZWN0LFxuICAgICAgcGxhY2VtZW50ID0gX3JlZjIucGxhY2VtZW50LFxuICAgICAgb2Zmc2V0cyA9IF9yZWYyLm9mZnNldHMsXG4gICAgICBwb3NpdGlvbiA9IF9yZWYyLnBvc2l0aW9uLFxuICAgICAgZ3B1QWNjZWxlcmF0aW9uID0gX3JlZjIuZ3B1QWNjZWxlcmF0aW9uLFxuICAgICAgYWRhcHRpdmUgPSBfcmVmMi5hZGFwdGl2ZSxcbiAgICAgIHJvdW5kT2Zmc2V0cyA9IF9yZWYyLnJvdW5kT2Zmc2V0cztcblxuICB2YXIgX3JlZjMgPSByb3VuZE9mZnNldHMgPyByb3VuZE9mZnNldHNCeURQUihvZmZzZXRzKSA6IG9mZnNldHMsXG4gICAgICBfcmVmMyR4ID0gX3JlZjMueCxcbiAgICAgIHggPSBfcmVmMyR4ID09PSB2b2lkIDAgPyAwIDogX3JlZjMkeCxcbiAgICAgIF9yZWYzJHkgPSBfcmVmMy55LFxuICAgICAgeSA9IF9yZWYzJHkgPT09IHZvaWQgMCA/IDAgOiBfcmVmMyR5O1xuXG4gIHZhciBoYXNYID0gb2Zmc2V0cy5oYXNPd25Qcm9wZXJ0eSgneCcpO1xuICB2YXIgaGFzWSA9IG9mZnNldHMuaGFzT3duUHJvcGVydHkoJ3knKTtcbiAgdmFyIHNpZGVYID0gbGVmdDtcbiAgdmFyIHNpZGVZID0gdG9wO1xuICB2YXIgd2luID0gd2luZG93O1xuXG4gIGlmIChhZGFwdGl2ZSkge1xuICAgIHZhciBvZmZzZXRQYXJlbnQgPSBnZXRPZmZzZXRQYXJlbnQocG9wcGVyKTtcblxuICAgIGlmIChvZmZzZXRQYXJlbnQgPT09IGdldFdpbmRvdyhwb3BwZXIpKSB7XG4gICAgICBvZmZzZXRQYXJlbnQgPSBnZXREb2N1bWVudEVsZW1lbnQocG9wcGVyKTtcbiAgICB9IC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLWNhc3RdOiBmb3JjZSB0eXBlIHJlZmluZW1lbnQsIHdlIGNvbXBhcmUgb2Zmc2V0UGFyZW50IHdpdGggd2luZG93IGFib3ZlLCBidXQgRmxvdyBkb2Vzbid0IGRldGVjdCBpdFxuXG4gICAgLyo6OiBvZmZzZXRQYXJlbnQgPSAob2Zmc2V0UGFyZW50OiBFbGVtZW50KTsgKi9cblxuXG4gICAgaWYgKHBsYWNlbWVudCA9PT0gdG9wKSB7XG4gICAgICBzaWRlWSA9IGJvdHRvbTtcbiAgICAgIHkgLT0gb2Zmc2V0UGFyZW50LmNsaWVudEhlaWdodCAtIHBvcHBlclJlY3QuaGVpZ2h0O1xuICAgICAgeSAqPSBncHVBY2NlbGVyYXRpb24gPyAxIDogLTE7XG4gICAgfVxuXG4gICAgaWYgKHBsYWNlbWVudCA9PT0gbGVmdCkge1xuICAgICAgc2lkZVggPSByaWdodDtcbiAgICAgIHggLT0gb2Zmc2V0UGFyZW50LmNsaWVudFdpZHRoIC0gcG9wcGVyUmVjdC53aWR0aDtcbiAgICAgIHggKj0gZ3B1QWNjZWxlcmF0aW9uID8gMSA6IC0xO1xuICAgIH1cbiAgfVxuXG4gIHZhciBjb21tb25TdHlsZXMgPSBPYmplY3QuYXNzaWduKHtcbiAgICBwb3NpdGlvbjogcG9zaXRpb25cbiAgfSwgYWRhcHRpdmUgJiYgdW5zZXRTaWRlcyk7XG5cbiAgaWYgKGdwdUFjY2VsZXJhdGlvbikge1xuICAgIHZhciBfT2JqZWN0JGFzc2lnbjtcblxuICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGNvbW1vblN0eWxlcyksIHt9LCAoX09iamVjdCRhc3NpZ24gPSB7fSwgX09iamVjdCRhc3NpZ25bc2lkZVldID0gaGFzWSA/ICcwJyA6ICcnLCBfT2JqZWN0JGFzc2lnbltzaWRlWF0gPSBoYXNYID8gJzAnIDogJycsIF9PYmplY3QkYXNzaWduLnRyYW5zZm9ybSA9ICh3aW4uZGV2aWNlUGl4ZWxSYXRpbyB8fCAxKSA8IDIgPyBcInRyYW5zbGF0ZShcIiArIHggKyBcInB4LCBcIiArIHkgKyBcInB4KVwiIDogXCJ0cmFuc2xhdGUzZChcIiArIHggKyBcInB4LCBcIiArIHkgKyBcInB4LCAwKVwiLCBfT2JqZWN0JGFzc2lnbikpO1xuICB9XG5cbiAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgY29tbW9uU3R5bGVzKSwge30sIChfT2JqZWN0JGFzc2lnbjIgPSB7fSwgX09iamVjdCRhc3NpZ24yW3NpZGVZXSA9IGhhc1kgPyB5ICsgXCJweFwiIDogJycsIF9PYmplY3QkYXNzaWduMltzaWRlWF0gPSBoYXNYID8geCArIFwicHhcIiA6ICcnLCBfT2JqZWN0JGFzc2lnbjIudHJhbnNmb3JtID0gJycsIF9PYmplY3QkYXNzaWduMikpO1xufVxuXG5mdW5jdGlvbiBjb21wdXRlU3R5bGVzKF9yZWY0KSB7XG4gIHZhciBzdGF0ZSA9IF9yZWY0LnN0YXRlLFxuICAgICAgb3B0aW9ucyA9IF9yZWY0Lm9wdGlvbnM7XG4gIHZhciBfb3B0aW9ucyRncHVBY2NlbGVyYXQgPSBvcHRpb25zLmdwdUFjY2VsZXJhdGlvbixcbiAgICAgIGdwdUFjY2VsZXJhdGlvbiA9IF9vcHRpb25zJGdwdUFjY2VsZXJhdCA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9vcHRpb25zJGdwdUFjY2VsZXJhdCxcbiAgICAgIF9vcHRpb25zJGFkYXB0aXZlID0gb3B0aW9ucy5hZGFwdGl2ZSxcbiAgICAgIGFkYXB0aXZlID0gX29wdGlvbnMkYWRhcHRpdmUgPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyRhZGFwdGl2ZSxcbiAgICAgIF9vcHRpb25zJHJvdW5kT2Zmc2V0cyA9IG9wdGlvbnMucm91bmRPZmZzZXRzLFxuICAgICAgcm91bmRPZmZzZXRzID0gX29wdGlvbnMkcm91bmRPZmZzZXRzID09PSB2b2lkIDAgPyB0cnVlIDogX29wdGlvbnMkcm91bmRPZmZzZXRzO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICB2YXIgdHJhbnNpdGlvblByb3BlcnR5ID0gZ2V0Q29tcHV0ZWRTdHlsZShzdGF0ZS5lbGVtZW50cy5wb3BwZXIpLnRyYW5zaXRpb25Qcm9wZXJ0eSB8fCAnJztcblxuICAgIGlmIChhZGFwdGl2ZSAmJiBbJ3RyYW5zZm9ybScsICd0b3AnLCAncmlnaHQnLCAnYm90dG9tJywgJ2xlZnQnXS5zb21lKGZ1bmN0aW9uIChwcm9wZXJ0eSkge1xuICAgICAgcmV0dXJuIHRyYW5zaXRpb25Qcm9wZXJ0eS5pbmRleE9mKHByb3BlcnR5KSA+PSAwO1xuICAgIH0pKSB7XG4gICAgICBjb25zb2xlLndhcm4oWydQb3BwZXI6IERldGVjdGVkIENTUyB0cmFuc2l0aW9ucyBvbiBhdCBsZWFzdCBvbmUgb2YgdGhlIGZvbGxvd2luZycsICdDU1MgcHJvcGVydGllczogXCJ0cmFuc2Zvcm1cIiwgXCJ0b3BcIiwgXCJyaWdodFwiLCBcImJvdHRvbVwiLCBcImxlZnRcIi4nLCAnXFxuXFxuJywgJ0Rpc2FibGUgdGhlIFwiY29tcHV0ZVN0eWxlc1wiIG1vZGlmaWVyXFwncyBgYWRhcHRpdmVgIG9wdGlvbiB0byBhbGxvdycsICdmb3Igc21vb3RoIHRyYW5zaXRpb25zLCBvciByZW1vdmUgdGhlc2UgcHJvcGVydGllcyBmcm9tIHRoZSBDU1MnLCAndHJhbnNpdGlvbiBkZWNsYXJhdGlvbiBvbiB0aGUgcG9wcGVyIGVsZW1lbnQgaWYgb25seSB0cmFuc2l0aW9uaW5nJywgJ29wYWNpdHkgb3IgYmFja2dyb3VuZC1jb2xvciBmb3IgZXhhbXBsZS4nLCAnXFxuXFxuJywgJ1dlIHJlY29tbWVuZCB1c2luZyB0aGUgcG9wcGVyIGVsZW1lbnQgYXMgYSB3cmFwcGVyIGFyb3VuZCBhbiBpbm5lcicsICdlbGVtZW50IHRoYXQgY2FuIGhhdmUgYW55IENTUyBwcm9wZXJ0eSB0cmFuc2l0aW9uZWQgZm9yIGFuaW1hdGlvbnMuJ10uam9pbignICcpKTtcbiAgICB9XG4gIH1cblxuICB2YXIgY29tbW9uU3R5bGVzID0ge1xuICAgIHBsYWNlbWVudDogZ2V0QmFzZVBsYWNlbWVudChzdGF0ZS5wbGFjZW1lbnQpLFxuICAgIHBvcHBlcjogc3RhdGUuZWxlbWVudHMucG9wcGVyLFxuICAgIHBvcHBlclJlY3Q6IHN0YXRlLnJlY3RzLnBvcHBlcixcbiAgICBncHVBY2NlbGVyYXRpb246IGdwdUFjY2VsZXJhdGlvblxuICB9O1xuXG4gIGlmIChzdGF0ZS5tb2RpZmllcnNEYXRhLnBvcHBlck9mZnNldHMgIT0gbnVsbCkge1xuICAgIHN0YXRlLnN0eWxlcy5wb3BwZXIgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLnN0eWxlcy5wb3BwZXIpLCBtYXBUb1N0eWxlcyhPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGNvbW1vblN0eWxlcyksIHt9LCB7XG4gICAgICBvZmZzZXRzOiBzdGF0ZS5tb2RpZmllcnNEYXRhLnBvcHBlck9mZnNldHMsXG4gICAgICBwb3NpdGlvbjogc3RhdGUub3B0aW9ucy5zdHJhdGVneSxcbiAgICAgIGFkYXB0aXZlOiBhZGFwdGl2ZSxcbiAgICAgIHJvdW5kT2Zmc2V0czogcm91bmRPZmZzZXRzXG4gICAgfSkpKTtcbiAgfVxuXG4gIGlmIChzdGF0ZS5tb2RpZmllcnNEYXRhLmFycm93ICE9IG51bGwpIHtcbiAgICBzdGF0ZS5zdHlsZXMuYXJyb3cgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLnN0eWxlcy5hcnJvdyksIG1hcFRvU3R5bGVzKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgY29tbW9uU3R5bGVzKSwge30sIHtcbiAgICAgIG9mZnNldHM6IHN0YXRlLm1vZGlmaWVyc0RhdGEuYXJyb3csXG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIGFkYXB0aXZlOiBmYWxzZSxcbiAgICAgIHJvdW5kT2Zmc2V0czogcm91bmRPZmZzZXRzXG4gICAgfSkpKTtcbiAgfVxuXG4gIHN0YXRlLmF0dHJpYnV0ZXMucG9wcGVyID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBzdGF0ZS5hdHRyaWJ1dGVzLnBvcHBlciksIHt9LCB7XG4gICAgJ2RhdGEtcG9wcGVyLXBsYWNlbWVudCc6IHN0YXRlLnBsYWNlbWVudFxuICB9KTtcbn0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogJ2NvbXB1dGVTdHlsZXMnLFxuICBlbmFibGVkOiB0cnVlLFxuICBwaGFzZTogJ2JlZm9yZVdyaXRlJyxcbiAgZm46IGNvbXB1dGVTdHlsZXMsXG4gIGRhdGE6IHt9XG59OyIsInZhciBoYXNoID0ge1xuICBsZWZ0OiAncmlnaHQnLFxuICByaWdodDogJ2xlZnQnLFxuICBib3R0b206ICd0b3AnLFxuICB0b3A6ICdib3R0b20nXG59O1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQocGxhY2VtZW50KSB7XG4gIHJldHVybiBwbGFjZW1lbnQucmVwbGFjZSgvbGVmdHxyaWdodHxib3R0b218dG9wL2csIGZ1bmN0aW9uIChtYXRjaGVkKSB7XG4gICAgcmV0dXJuIGhhc2hbbWF0Y2hlZF07XG4gIH0pO1xufSIsInZhciBoYXNoID0ge1xuICBzdGFydDogJ2VuZCcsXG4gIGVuZDogJ3N0YXJ0J1xufTtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldE9wcG9zaXRlVmFyaWF0aW9uUGxhY2VtZW50KHBsYWNlbWVudCkge1xuICByZXR1cm4gcGxhY2VtZW50LnJlcGxhY2UoL3N0YXJ0fGVuZC9nLCBmdW5jdGlvbiAobWF0Y2hlZCkge1xuICAgIHJldHVybiBoYXNoW21hdGNoZWRdO1xuICB9KTtcbn0iLCJpbXBvcnQgeyBpc1NoYWRvd1Jvb3QgfSBmcm9tIFwiLi9pbnN0YW5jZU9mLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb250YWlucyhwYXJlbnQsIGNoaWxkKSB7XG4gIHZhciByb290Tm9kZSA9IGNoaWxkLmdldFJvb3ROb2RlICYmIGNoaWxkLmdldFJvb3ROb2RlKCk7IC8vIEZpcnN0LCBhdHRlbXB0IHdpdGggZmFzdGVyIG5hdGl2ZSBtZXRob2RcblxuICBpZiAocGFyZW50LmNvbnRhaW5zKGNoaWxkKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9IC8vIHRoZW4gZmFsbGJhY2sgdG8gY3VzdG9tIGltcGxlbWVudGF0aW9uIHdpdGggU2hhZG93IERPTSBzdXBwb3J0XG4gIGVsc2UgaWYgKHJvb3ROb2RlICYmIGlzU2hhZG93Um9vdChyb290Tm9kZSkpIHtcbiAgICAgIHZhciBuZXh0ID0gY2hpbGQ7XG5cbiAgICAgIGRvIHtcbiAgICAgICAgaWYgKG5leHQgJiYgcGFyZW50LmlzU2FtZU5vZGUobmV4dCkpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSAvLyAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ106IG5lZWQgYSBiZXR0ZXIgd2F5IHRvIGhhbmRsZSB0aGlzLi4uXG5cblxuICAgICAgICBuZXh0ID0gbmV4dC5wYXJlbnROb2RlIHx8IG5leHQuaG9zdDtcbiAgICAgIH0gd2hpbGUgKG5leHQpO1xuICAgIH0gLy8gR2l2ZSB1cCwgdGhlIHJlc3VsdCBpcyBmYWxzZVxuXG5cbiAgcmV0dXJuIGZhbHNlO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlY3RUb0NsaWVudFJlY3QocmVjdCkge1xuICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCByZWN0KSwge30sIHtcbiAgICBsZWZ0OiByZWN0LngsXG4gICAgdG9wOiByZWN0LnksXG4gICAgcmlnaHQ6IHJlY3QueCArIHJlY3Qud2lkdGgsXG4gICAgYm90dG9tOiByZWN0LnkgKyByZWN0LmhlaWdodFxuICB9KTtcbn0iLCJpbXBvcnQgeyB2aWV3cG9ydCB9IGZyb20gXCIuLi9lbnVtcy5qc1wiO1xuaW1wb3J0IGdldFZpZXdwb3J0UmVjdCBmcm9tIFwiLi9nZXRWaWV3cG9ydFJlY3QuanNcIjtcbmltcG9ydCBnZXREb2N1bWVudFJlY3QgZnJvbSBcIi4vZ2V0RG9jdW1lbnRSZWN0LmpzXCI7XG5pbXBvcnQgbGlzdFNjcm9sbFBhcmVudHMgZnJvbSBcIi4vbGlzdFNjcm9sbFBhcmVudHMuanNcIjtcbmltcG9ydCBnZXRPZmZzZXRQYXJlbnQgZnJvbSBcIi4vZ2V0T2Zmc2V0UGFyZW50LmpzXCI7XG5pbXBvcnQgZ2V0RG9jdW1lbnRFbGVtZW50IGZyb20gXCIuL2dldERvY3VtZW50RWxlbWVudC5qc1wiO1xuaW1wb3J0IGdldENvbXB1dGVkU3R5bGUgZnJvbSBcIi4vZ2V0Q29tcHV0ZWRTdHlsZS5qc1wiO1xuaW1wb3J0IHsgaXNFbGVtZW50LCBpc0hUTUxFbGVtZW50IH0gZnJvbSBcIi4vaW5zdGFuY2VPZi5qc1wiO1xuaW1wb3J0IGdldEJvdW5kaW5nQ2xpZW50UmVjdCBmcm9tIFwiLi9nZXRCb3VuZGluZ0NsaWVudFJlY3QuanNcIjtcbmltcG9ydCBnZXRQYXJlbnROb2RlIGZyb20gXCIuL2dldFBhcmVudE5vZGUuanNcIjtcbmltcG9ydCBjb250YWlucyBmcm9tIFwiLi9jb250YWlucy5qc1wiO1xuaW1wb3J0IGdldE5vZGVOYW1lIGZyb20gXCIuL2dldE5vZGVOYW1lLmpzXCI7XG5pbXBvcnQgcmVjdFRvQ2xpZW50UmVjdCBmcm9tIFwiLi4vdXRpbHMvcmVjdFRvQ2xpZW50UmVjdC5qc1wiO1xuXG5mdW5jdGlvbiBnZXRJbm5lckJvdW5kaW5nQ2xpZW50UmVjdChlbGVtZW50KSB7XG4gIHZhciByZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGVsZW1lbnQpO1xuICByZWN0LnRvcCA9IHJlY3QudG9wICsgZWxlbWVudC5jbGllbnRUb3A7XG4gIHJlY3QubGVmdCA9IHJlY3QubGVmdCArIGVsZW1lbnQuY2xpZW50TGVmdDtcbiAgcmVjdC5ib3R0b20gPSByZWN0LnRvcCArIGVsZW1lbnQuY2xpZW50SGVpZ2h0O1xuICByZWN0LnJpZ2h0ID0gcmVjdC5sZWZ0ICsgZWxlbWVudC5jbGllbnRXaWR0aDtcbiAgcmVjdC53aWR0aCA9IGVsZW1lbnQuY2xpZW50V2lkdGg7XG4gIHJlY3QuaGVpZ2h0ID0gZWxlbWVudC5jbGllbnRIZWlnaHQ7XG4gIHJlY3QueCA9IHJlY3QubGVmdDtcbiAgcmVjdC55ID0gcmVjdC50b3A7XG4gIHJldHVybiByZWN0O1xufVxuXG5mdW5jdGlvbiBnZXRDbGllbnRSZWN0RnJvbU1peGVkVHlwZShlbGVtZW50LCBjbGlwcGluZ1BhcmVudCkge1xuICByZXR1cm4gY2xpcHBpbmdQYXJlbnQgPT09IHZpZXdwb3J0ID8gcmVjdFRvQ2xpZW50UmVjdChnZXRWaWV3cG9ydFJlY3QoZWxlbWVudCkpIDogaXNIVE1MRWxlbWVudChjbGlwcGluZ1BhcmVudCkgPyBnZXRJbm5lckJvdW5kaW5nQ2xpZW50UmVjdChjbGlwcGluZ1BhcmVudCkgOiByZWN0VG9DbGllbnRSZWN0KGdldERvY3VtZW50UmVjdChnZXREb2N1bWVudEVsZW1lbnQoZWxlbWVudCkpKTtcbn0gLy8gQSBcImNsaXBwaW5nIHBhcmVudFwiIGlzIGFuIG92ZXJmbG93YWJsZSBjb250YWluZXIgd2l0aCB0aGUgY2hhcmFjdGVyaXN0aWMgb2Zcbi8vIGNsaXBwaW5nIChvciBoaWRpbmcpIG92ZXJmbG93aW5nIGVsZW1lbnRzIHdpdGggYSBwb3NpdGlvbiBkaWZmZXJlbnQgZnJvbVxuLy8gYGluaXRpYWxgXG5cblxuZnVuY3Rpb24gZ2V0Q2xpcHBpbmdQYXJlbnRzKGVsZW1lbnQpIHtcbiAgdmFyIGNsaXBwaW5nUGFyZW50cyA9IGxpc3RTY3JvbGxQYXJlbnRzKGdldFBhcmVudE5vZGUoZWxlbWVudCkpO1xuICB2YXIgY2FuRXNjYXBlQ2xpcHBpbmcgPSBbJ2Fic29sdXRlJywgJ2ZpeGVkJ10uaW5kZXhPZihnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpLnBvc2l0aW9uKSA+PSAwO1xuICB2YXIgY2xpcHBlckVsZW1lbnQgPSBjYW5Fc2NhcGVDbGlwcGluZyAmJiBpc0hUTUxFbGVtZW50KGVsZW1lbnQpID8gZ2V0T2Zmc2V0UGFyZW50KGVsZW1lbnQpIDogZWxlbWVudDtcblxuICBpZiAoIWlzRWxlbWVudChjbGlwcGVyRWxlbWVudCkpIHtcbiAgICByZXR1cm4gW107XG4gIH0gLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtcmV0dXJuXTogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2Zsb3cvaXNzdWVzLzE0MTRcblxuXG4gIHJldHVybiBjbGlwcGluZ1BhcmVudHMuZmlsdGVyKGZ1bmN0aW9uIChjbGlwcGluZ1BhcmVudCkge1xuICAgIHJldHVybiBpc0VsZW1lbnQoY2xpcHBpbmdQYXJlbnQpICYmIGNvbnRhaW5zKGNsaXBwaW5nUGFyZW50LCBjbGlwcGVyRWxlbWVudCkgJiYgZ2V0Tm9kZU5hbWUoY2xpcHBpbmdQYXJlbnQpICE9PSAnYm9keSc7XG4gIH0pO1xufSAvLyBHZXRzIHRoZSBtYXhpbXVtIGFyZWEgdGhhdCB0aGUgZWxlbWVudCBpcyB2aXNpYmxlIGluIGR1ZSB0byBhbnkgbnVtYmVyIG9mXG4vLyBjbGlwcGluZyBwYXJlbnRzXG5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0Q2xpcHBpbmdSZWN0KGVsZW1lbnQsIGJvdW5kYXJ5LCByb290Qm91bmRhcnkpIHtcbiAgdmFyIG1haW5DbGlwcGluZ1BhcmVudHMgPSBib3VuZGFyeSA9PT0gJ2NsaXBwaW5nUGFyZW50cycgPyBnZXRDbGlwcGluZ1BhcmVudHMoZWxlbWVudCkgOiBbXS5jb25jYXQoYm91bmRhcnkpO1xuICB2YXIgY2xpcHBpbmdQYXJlbnRzID0gW10uY29uY2F0KG1haW5DbGlwcGluZ1BhcmVudHMsIFtyb290Qm91bmRhcnldKTtcbiAgdmFyIGZpcnN0Q2xpcHBpbmdQYXJlbnQgPSBjbGlwcGluZ1BhcmVudHNbMF07XG4gIHZhciBjbGlwcGluZ1JlY3QgPSBjbGlwcGluZ1BhcmVudHMucmVkdWNlKGZ1bmN0aW9uIChhY2NSZWN0LCBjbGlwcGluZ1BhcmVudCkge1xuICAgIHZhciByZWN0ID0gZ2V0Q2xpZW50UmVjdEZyb21NaXhlZFR5cGUoZWxlbWVudCwgY2xpcHBpbmdQYXJlbnQpO1xuICAgIGFjY1JlY3QudG9wID0gTWF0aC5tYXgocmVjdC50b3AsIGFjY1JlY3QudG9wKTtcbiAgICBhY2NSZWN0LnJpZ2h0ID0gTWF0aC5taW4ocmVjdC5yaWdodCwgYWNjUmVjdC5yaWdodCk7XG4gICAgYWNjUmVjdC5ib3R0b20gPSBNYXRoLm1pbihyZWN0LmJvdHRvbSwgYWNjUmVjdC5ib3R0b20pO1xuICAgIGFjY1JlY3QubGVmdCA9IE1hdGgubWF4KHJlY3QubGVmdCwgYWNjUmVjdC5sZWZ0KTtcbiAgICByZXR1cm4gYWNjUmVjdDtcbiAgfSwgZ2V0Q2xpZW50UmVjdEZyb21NaXhlZFR5cGUoZWxlbWVudCwgZmlyc3RDbGlwcGluZ1BhcmVudCkpO1xuICBjbGlwcGluZ1JlY3Qud2lkdGggPSBjbGlwcGluZ1JlY3QucmlnaHQgLSBjbGlwcGluZ1JlY3QubGVmdDtcbiAgY2xpcHBpbmdSZWN0LmhlaWdodCA9IGNsaXBwaW5nUmVjdC5ib3R0b20gLSBjbGlwcGluZ1JlY3QudG9wO1xuICBjbGlwcGluZ1JlY3QueCA9IGNsaXBwaW5nUmVjdC5sZWZ0O1xuICBjbGlwcGluZ1JlY3QueSA9IGNsaXBwaW5nUmVjdC50b3A7XG4gIHJldHVybiBjbGlwcGluZ1JlY3Q7XG59IiwiaW1wb3J0IGdldFdpbmRvdyBmcm9tIFwiLi9nZXRXaW5kb3cuanNcIjtcbmltcG9ydCBnZXREb2N1bWVudEVsZW1lbnQgZnJvbSBcIi4vZ2V0RG9jdW1lbnRFbGVtZW50LmpzXCI7XG5pbXBvcnQgZ2V0V2luZG93U2Nyb2xsQmFyWCBmcm9tIFwiLi9nZXRXaW5kb3dTY3JvbGxCYXJYLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRWaWV3cG9ydFJlY3QoZWxlbWVudCkge1xuICB2YXIgd2luID0gZ2V0V2luZG93KGVsZW1lbnQpO1xuICB2YXIgaHRtbCA9IGdldERvY3VtZW50RWxlbWVudChlbGVtZW50KTtcbiAgdmFyIHZpc3VhbFZpZXdwb3J0ID0gd2luLnZpc3VhbFZpZXdwb3J0O1xuICB2YXIgd2lkdGggPSBodG1sLmNsaWVudFdpZHRoO1xuICB2YXIgaGVpZ2h0ID0gaHRtbC5jbGllbnRIZWlnaHQ7XG4gIHZhciB4ID0gMDtcbiAgdmFyIHkgPSAwOyAvLyBOQjogVGhpcyBpc24ndCBzdXBwb3J0ZWQgb24gaU9TIDw9IDEyLiBJZiB0aGUga2V5Ym9hcmQgaXMgb3BlbiwgdGhlIHBvcHBlclxuICAvLyBjYW4gYmUgb2JzY3VyZWQgdW5kZXJuZWF0aCBpdC5cbiAgLy8gQWxzbywgYGh0bWwuY2xpZW50SGVpZ2h0YCBhZGRzIHRoZSBib3R0b20gYmFyIGhlaWdodCBpbiBTYWZhcmkgaU9TLCBldmVuXG4gIC8vIGlmIGl0IGlzbid0IG9wZW4sIHNvIGlmIHRoaXMgaXNuJ3QgYXZhaWxhYmxlLCB0aGUgcG9wcGVyIHdpbGwgYmUgZGV0ZWN0ZWRcbiAgLy8gdG8gb3ZlcmZsb3cgdGhlIGJvdHRvbSBvZiB0aGUgc2NyZWVuIHRvbyBlYXJseS5cblxuICBpZiAodmlzdWFsVmlld3BvcnQpIHtcbiAgICB3aWR0aCA9IHZpc3VhbFZpZXdwb3J0LndpZHRoO1xuICAgIGhlaWdodCA9IHZpc3VhbFZpZXdwb3J0LmhlaWdodDsgLy8gVXNlcyBMYXlvdXQgVmlld3BvcnQgKGxpa2UgQ2hyb21lOyBTYWZhcmkgZG9lcyBub3QgY3VycmVudGx5KVxuICAgIC8vIEluIENocm9tZSwgaXQgcmV0dXJucyBhIHZhbHVlIHZlcnkgY2xvc2UgdG8gMCAoKy8tKSBidXQgY29udGFpbnMgcm91bmRpbmdcbiAgICAvLyBlcnJvcnMgZHVlIHRvIGZsb2F0aW5nIHBvaW50IG51bWJlcnMsIHNvIHdlIG5lZWQgdG8gY2hlY2sgcHJlY2lzaW9uLlxuICAgIC8vIFNhZmFyaSByZXR1cm5zIGEgbnVtYmVyIDw9IDAsIHVzdWFsbHkgPCAtMSB3aGVuIHBpbmNoLXpvb21lZFxuICAgIC8vIEZlYXR1cmUgZGV0ZWN0aW9uIGZhaWxzIGluIG1vYmlsZSBlbXVsYXRpb24gbW9kZSBpbiBDaHJvbWUuXG4gICAgLy8gTWF0aC5hYnMod2luLmlubmVyV2lkdGggLyB2aXN1YWxWaWV3cG9ydC5zY2FsZSAtIHZpc3VhbFZpZXdwb3J0LndpZHRoKSA8XG4gICAgLy8gMC4wMDFcbiAgICAvLyBGYWxsYmFjayBoZXJlOiBcIk5vdCBTYWZhcmlcIiB1c2VyQWdlbnRcblxuICAgIGlmICghL14oKD8hY2hyb21lfGFuZHJvaWQpLikqc2FmYXJpL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSkge1xuICAgICAgeCA9IHZpc3VhbFZpZXdwb3J0Lm9mZnNldExlZnQ7XG4gICAgICB5ID0gdmlzdWFsVmlld3BvcnQub2Zmc2V0VG9wO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgd2lkdGg6IHdpZHRoLFxuICAgIGhlaWdodDogaGVpZ2h0LFxuICAgIHg6IHggKyBnZXRXaW5kb3dTY3JvbGxCYXJYKGVsZW1lbnQpLFxuICAgIHk6IHlcbiAgfTtcbn0iLCJpbXBvcnQgZ2V0RG9jdW1lbnRFbGVtZW50IGZyb20gXCIuL2dldERvY3VtZW50RWxlbWVudC5qc1wiO1xuaW1wb3J0IGdldENvbXB1dGVkU3R5bGUgZnJvbSBcIi4vZ2V0Q29tcHV0ZWRTdHlsZS5qc1wiO1xuaW1wb3J0IGdldFdpbmRvd1Njcm9sbEJhclggZnJvbSBcIi4vZ2V0V2luZG93U2Nyb2xsQmFyWC5qc1wiO1xuaW1wb3J0IGdldFdpbmRvd1Njcm9sbCBmcm9tIFwiLi9nZXRXaW5kb3dTY3JvbGwuanNcIjsgLy8gR2V0cyB0aGUgZW50aXJlIHNpemUgb2YgdGhlIHNjcm9sbGFibGUgZG9jdW1lbnQgYXJlYSwgZXZlbiBleHRlbmRpbmcgb3V0c2lkZVxuLy8gb2YgdGhlIGA8aHRtbD5gIGFuZCBgPGJvZHk+YCByZWN0IGJvdW5kcyBpZiBob3Jpem9udGFsbHkgc2Nyb2xsYWJsZVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXREb2N1bWVudFJlY3QoZWxlbWVudCkge1xuICB2YXIgaHRtbCA9IGdldERvY3VtZW50RWxlbWVudChlbGVtZW50KTtcbiAgdmFyIHdpblNjcm9sbCA9IGdldFdpbmRvd1Njcm9sbChlbGVtZW50KTtcbiAgdmFyIGJvZHkgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQuYm9keTtcbiAgdmFyIHdpZHRoID0gTWF0aC5tYXgoaHRtbC5zY3JvbGxXaWR0aCwgaHRtbC5jbGllbnRXaWR0aCwgYm9keSA/IGJvZHkuc2Nyb2xsV2lkdGggOiAwLCBib2R5ID8gYm9keS5jbGllbnRXaWR0aCA6IDApO1xuICB2YXIgaGVpZ2h0ID0gTWF0aC5tYXgoaHRtbC5zY3JvbGxIZWlnaHQsIGh0bWwuY2xpZW50SGVpZ2h0LCBib2R5ID8gYm9keS5zY3JvbGxIZWlnaHQgOiAwLCBib2R5ID8gYm9keS5jbGllbnRIZWlnaHQgOiAwKTtcbiAgdmFyIHggPSAtd2luU2Nyb2xsLnNjcm9sbExlZnQgKyBnZXRXaW5kb3dTY3JvbGxCYXJYKGVsZW1lbnQpO1xuICB2YXIgeSA9IC13aW5TY3JvbGwuc2Nyb2xsVG9wO1xuXG4gIGlmIChnZXRDb21wdXRlZFN0eWxlKGJvZHkgfHwgaHRtbCkuZGlyZWN0aW9uID09PSAncnRsJykge1xuICAgIHggKz0gTWF0aC5tYXgoaHRtbC5jbGllbnRXaWR0aCwgYm9keSA/IGJvZHkuY2xpZW50V2lkdGggOiAwKSAtIHdpZHRoO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB3aWR0aDogd2lkdGgsXG4gICAgaGVpZ2h0OiBoZWlnaHQsXG4gICAgeDogeCxcbiAgICB5OiB5XG4gIH07XG59IiwiaW1wb3J0IGdldEZyZXNoU2lkZU9iamVjdCBmcm9tIFwiLi9nZXRGcmVzaFNpZGVPYmplY3QuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1lcmdlUGFkZGluZ09iamVjdChwYWRkaW5nT2JqZWN0KSB7XG4gIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGdldEZyZXNoU2lkZU9iamVjdCgpKSwgcGFkZGluZ09iamVjdCk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0RnJlc2hTaWRlT2JqZWN0KCkge1xuICByZXR1cm4ge1xuICAgIHRvcDogMCxcbiAgICByaWdodDogMCxcbiAgICBib3R0b206IDAsXG4gICAgbGVmdDogMFxuICB9O1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGV4cGFuZFRvSGFzaE1hcCh2YWx1ZSwga2V5cykge1xuICByZXR1cm4ga2V5cy5yZWR1Y2UoZnVuY3Rpb24gKGhhc2hNYXAsIGtleSkge1xuICAgIGhhc2hNYXBba2V5XSA9IHZhbHVlO1xuICAgIHJldHVybiBoYXNoTWFwO1xuICB9LCB7fSk7XG59IiwiaW1wb3J0IGdldEJvdW5kaW5nQ2xpZW50UmVjdCBmcm9tIFwiLi4vZG9tLXV0aWxzL2dldEJvdW5kaW5nQ2xpZW50UmVjdC5qc1wiO1xuaW1wb3J0IGdldENsaXBwaW5nUmVjdCBmcm9tIFwiLi4vZG9tLXV0aWxzL2dldENsaXBwaW5nUmVjdC5qc1wiO1xuaW1wb3J0IGdldERvY3VtZW50RWxlbWVudCBmcm9tIFwiLi4vZG9tLXV0aWxzL2dldERvY3VtZW50RWxlbWVudC5qc1wiO1xuaW1wb3J0IGNvbXB1dGVPZmZzZXRzIGZyb20gXCIuL2NvbXB1dGVPZmZzZXRzLmpzXCI7XG5pbXBvcnQgcmVjdFRvQ2xpZW50UmVjdCBmcm9tIFwiLi9yZWN0VG9DbGllbnRSZWN0LmpzXCI7XG5pbXBvcnQgeyBjbGlwcGluZ1BhcmVudHMsIHJlZmVyZW5jZSwgcG9wcGVyLCBib3R0b20sIHRvcCwgcmlnaHQsIGJhc2VQbGFjZW1lbnRzLCB2aWV3cG9ydCB9IGZyb20gXCIuLi9lbnVtcy5qc1wiO1xuaW1wb3J0IHsgaXNFbGVtZW50IH0gZnJvbSBcIi4uL2RvbS11dGlscy9pbnN0YW5jZU9mLmpzXCI7XG5pbXBvcnQgbWVyZ2VQYWRkaW5nT2JqZWN0IGZyb20gXCIuL21lcmdlUGFkZGluZ09iamVjdC5qc1wiO1xuaW1wb3J0IGV4cGFuZFRvSGFzaE1hcCBmcm9tIFwiLi9leHBhbmRUb0hhc2hNYXAuanNcIjsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkZXRlY3RPdmVyZmxvdyhzdGF0ZSwgb3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgdmFyIF9vcHRpb25zID0gb3B0aW9ucyxcbiAgICAgIF9vcHRpb25zJHBsYWNlbWVudCA9IF9vcHRpb25zLnBsYWNlbWVudCxcbiAgICAgIHBsYWNlbWVudCA9IF9vcHRpb25zJHBsYWNlbWVudCA9PT0gdm9pZCAwID8gc3RhdGUucGxhY2VtZW50IDogX29wdGlvbnMkcGxhY2VtZW50LFxuICAgICAgX29wdGlvbnMkYm91bmRhcnkgPSBfb3B0aW9ucy5ib3VuZGFyeSxcbiAgICAgIGJvdW5kYXJ5ID0gX29wdGlvbnMkYm91bmRhcnkgPT09IHZvaWQgMCA/IGNsaXBwaW5nUGFyZW50cyA6IF9vcHRpb25zJGJvdW5kYXJ5LFxuICAgICAgX29wdGlvbnMkcm9vdEJvdW5kYXJ5ID0gX29wdGlvbnMucm9vdEJvdW5kYXJ5LFxuICAgICAgcm9vdEJvdW5kYXJ5ID0gX29wdGlvbnMkcm9vdEJvdW5kYXJ5ID09PSB2b2lkIDAgPyB2aWV3cG9ydCA6IF9vcHRpb25zJHJvb3RCb3VuZGFyeSxcbiAgICAgIF9vcHRpb25zJGVsZW1lbnRDb250ZSA9IF9vcHRpb25zLmVsZW1lbnRDb250ZXh0LFxuICAgICAgZWxlbWVudENvbnRleHQgPSBfb3B0aW9ucyRlbGVtZW50Q29udGUgPT09IHZvaWQgMCA/IHBvcHBlciA6IF9vcHRpb25zJGVsZW1lbnRDb250ZSxcbiAgICAgIF9vcHRpb25zJGFsdEJvdW5kYXJ5ID0gX29wdGlvbnMuYWx0Qm91bmRhcnksXG4gICAgICBhbHRCb3VuZGFyeSA9IF9vcHRpb25zJGFsdEJvdW5kYXJ5ID09PSB2b2lkIDAgPyBmYWxzZSA6IF9vcHRpb25zJGFsdEJvdW5kYXJ5LFxuICAgICAgX29wdGlvbnMkcGFkZGluZyA9IF9vcHRpb25zLnBhZGRpbmcsXG4gICAgICBwYWRkaW5nID0gX29wdGlvbnMkcGFkZGluZyA9PT0gdm9pZCAwID8gMCA6IF9vcHRpb25zJHBhZGRpbmc7XG4gIHZhciBwYWRkaW5nT2JqZWN0ID0gbWVyZ2VQYWRkaW5nT2JqZWN0KHR5cGVvZiBwYWRkaW5nICE9PSAnbnVtYmVyJyA/IHBhZGRpbmcgOiBleHBhbmRUb0hhc2hNYXAocGFkZGluZywgYmFzZVBsYWNlbWVudHMpKTtcbiAgdmFyIGFsdENvbnRleHQgPSBlbGVtZW50Q29udGV4dCA9PT0gcG9wcGVyID8gcmVmZXJlbmNlIDogcG9wcGVyO1xuICB2YXIgcmVmZXJlbmNlRWxlbWVudCA9IHN0YXRlLmVsZW1lbnRzLnJlZmVyZW5jZTtcbiAgdmFyIHBvcHBlclJlY3QgPSBzdGF0ZS5yZWN0cy5wb3BwZXI7XG4gIHZhciBlbGVtZW50ID0gc3RhdGUuZWxlbWVudHNbYWx0Qm91bmRhcnkgPyBhbHRDb250ZXh0IDogZWxlbWVudENvbnRleHRdO1xuICB2YXIgY2xpcHBpbmdDbGllbnRSZWN0ID0gZ2V0Q2xpcHBpbmdSZWN0KGlzRWxlbWVudChlbGVtZW50KSA/IGVsZW1lbnQgOiBlbGVtZW50LmNvbnRleHRFbGVtZW50IHx8IGdldERvY3VtZW50RWxlbWVudChzdGF0ZS5lbGVtZW50cy5wb3BwZXIpLCBib3VuZGFyeSwgcm9vdEJvdW5kYXJ5KTtcbiAgdmFyIHJlZmVyZW5jZUNsaWVudFJlY3QgPSBnZXRCb3VuZGluZ0NsaWVudFJlY3QocmVmZXJlbmNlRWxlbWVudCk7XG4gIHZhciBwb3BwZXJPZmZzZXRzID0gY29tcHV0ZU9mZnNldHMoe1xuICAgIHJlZmVyZW5jZTogcmVmZXJlbmNlQ2xpZW50UmVjdCxcbiAgICBlbGVtZW50OiBwb3BwZXJSZWN0LFxuICAgIHN0cmF0ZWd5OiAnYWJzb2x1dGUnLFxuICAgIHBsYWNlbWVudDogcGxhY2VtZW50XG4gIH0pO1xuICB2YXIgcG9wcGVyQ2xpZW50UmVjdCA9IHJlY3RUb0NsaWVudFJlY3QoT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBwb3BwZXJSZWN0KSwgcG9wcGVyT2Zmc2V0cykpO1xuICB2YXIgZWxlbWVudENsaWVudFJlY3QgPSBlbGVtZW50Q29udGV4dCA9PT0gcG9wcGVyID8gcG9wcGVyQ2xpZW50UmVjdCA6IHJlZmVyZW5jZUNsaWVudFJlY3Q7IC8vIHBvc2l0aXZlID0gb3ZlcmZsb3dpbmcgdGhlIGNsaXBwaW5nIHJlY3RcbiAgLy8gMCBvciBuZWdhdGl2ZSA9IHdpdGhpbiB0aGUgY2xpcHBpbmcgcmVjdFxuXG4gIHZhciBvdmVyZmxvd09mZnNldHMgPSB7XG4gICAgdG9wOiBjbGlwcGluZ0NsaWVudFJlY3QudG9wIC0gZWxlbWVudENsaWVudFJlY3QudG9wICsgcGFkZGluZ09iamVjdC50b3AsXG4gICAgYm90dG9tOiBlbGVtZW50Q2xpZW50UmVjdC5ib3R0b20gLSBjbGlwcGluZ0NsaWVudFJlY3QuYm90dG9tICsgcGFkZGluZ09iamVjdC5ib3R0b20sXG4gICAgbGVmdDogY2xpcHBpbmdDbGllbnRSZWN0LmxlZnQgLSBlbGVtZW50Q2xpZW50UmVjdC5sZWZ0ICsgcGFkZGluZ09iamVjdC5sZWZ0LFxuICAgIHJpZ2h0OiBlbGVtZW50Q2xpZW50UmVjdC5yaWdodCAtIGNsaXBwaW5nQ2xpZW50UmVjdC5yaWdodCArIHBhZGRpbmdPYmplY3QucmlnaHRcbiAgfTtcbiAgdmFyIG9mZnNldERhdGEgPSBzdGF0ZS5tb2RpZmllcnNEYXRhLm9mZnNldDsgLy8gT2Zmc2V0cyBjYW4gYmUgYXBwbGllZCBvbmx5IHRvIHRoZSBwb3BwZXIgZWxlbWVudFxuXG4gIGlmIChlbGVtZW50Q29udGV4dCA9PT0gcG9wcGVyICYmIG9mZnNldERhdGEpIHtcbiAgICB2YXIgb2Zmc2V0ID0gb2Zmc2V0RGF0YVtwbGFjZW1lbnRdO1xuICAgIE9iamVjdC5rZXlzKG92ZXJmbG93T2Zmc2V0cykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICB2YXIgbXVsdGlwbHkgPSBbcmlnaHQsIGJvdHRvbV0uaW5kZXhPZihrZXkpID49IDAgPyAxIDogLTE7XG4gICAgICB2YXIgYXhpcyA9IFt0b3AsIGJvdHRvbV0uaW5kZXhPZihrZXkpID49IDAgPyAneScgOiAneCc7XG4gICAgICBvdmVyZmxvd09mZnNldHNba2V5XSArPSBvZmZzZXRbYXhpc10gKiBtdWx0aXBseTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBvdmVyZmxvd09mZnNldHM7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gd2l0aGluKG1pbiwgdmFsdWUsIG1heCkge1xuICByZXR1cm4gTWF0aC5tYXgobWluLCBNYXRoLm1pbih2YWx1ZSwgbWF4KSk7XG59IiwiaW1wb3J0IHsgdG9wLCBib3R0b20sIGxlZnQsIHJpZ2h0IH0gZnJvbSBcIi4uL2VudW1zLmpzXCI7XG5pbXBvcnQgZGV0ZWN0T3ZlcmZsb3cgZnJvbSBcIi4uL3V0aWxzL2RldGVjdE92ZXJmbG93LmpzXCI7XG5cbmZ1bmN0aW9uIGdldFNpZGVPZmZzZXRzKG92ZXJmbG93LCByZWN0LCBwcmV2ZW50ZWRPZmZzZXRzKSB7XG4gIGlmIChwcmV2ZW50ZWRPZmZzZXRzID09PSB2b2lkIDApIHtcbiAgICBwcmV2ZW50ZWRPZmZzZXRzID0ge1xuICAgICAgeDogMCxcbiAgICAgIHk6IDBcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB0b3A6IG92ZXJmbG93LnRvcCAtIHJlY3QuaGVpZ2h0IC0gcHJldmVudGVkT2Zmc2V0cy55LFxuICAgIHJpZ2h0OiBvdmVyZmxvdy5yaWdodCAtIHJlY3Qud2lkdGggKyBwcmV2ZW50ZWRPZmZzZXRzLngsXG4gICAgYm90dG9tOiBvdmVyZmxvdy5ib3R0b20gLSByZWN0LmhlaWdodCArIHByZXZlbnRlZE9mZnNldHMueSxcbiAgICBsZWZ0OiBvdmVyZmxvdy5sZWZ0IC0gcmVjdC53aWR0aCAtIHByZXZlbnRlZE9mZnNldHMueFxuICB9O1xufVxuXG5mdW5jdGlvbiBpc0FueVNpZGVGdWxseUNsaXBwZWQob3ZlcmZsb3cpIHtcbiAgcmV0dXJuIFt0b3AsIHJpZ2h0LCBib3R0b20sIGxlZnRdLnNvbWUoZnVuY3Rpb24gKHNpZGUpIHtcbiAgICByZXR1cm4gb3ZlcmZsb3dbc2lkZV0gPj0gMDtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGhpZGUoX3JlZikge1xuICB2YXIgc3RhdGUgPSBfcmVmLnN0YXRlLFxuICAgICAgbmFtZSA9IF9yZWYubmFtZTtcbiAgdmFyIHJlZmVyZW5jZVJlY3QgPSBzdGF0ZS5yZWN0cy5yZWZlcmVuY2U7XG4gIHZhciBwb3BwZXJSZWN0ID0gc3RhdGUucmVjdHMucG9wcGVyO1xuICB2YXIgcHJldmVudGVkT2Zmc2V0cyA9IHN0YXRlLm1vZGlmaWVyc0RhdGEucHJldmVudE92ZXJmbG93O1xuICB2YXIgcmVmZXJlbmNlT3ZlcmZsb3cgPSBkZXRlY3RPdmVyZmxvdyhzdGF0ZSwge1xuICAgIGVsZW1lbnRDb250ZXh0OiAncmVmZXJlbmNlJ1xuICB9KTtcbiAgdmFyIHBvcHBlckFsdE92ZXJmbG93ID0gZGV0ZWN0T3ZlcmZsb3coc3RhdGUsIHtcbiAgICBhbHRCb3VuZGFyeTogdHJ1ZVxuICB9KTtcbiAgdmFyIHJlZmVyZW5jZUNsaXBwaW5nT2Zmc2V0cyA9IGdldFNpZGVPZmZzZXRzKHJlZmVyZW5jZU92ZXJmbG93LCByZWZlcmVuY2VSZWN0KTtcbiAgdmFyIHBvcHBlckVzY2FwZU9mZnNldHMgPSBnZXRTaWRlT2Zmc2V0cyhwb3BwZXJBbHRPdmVyZmxvdywgcG9wcGVyUmVjdCwgcHJldmVudGVkT2Zmc2V0cyk7XG4gIHZhciBpc1JlZmVyZW5jZUhpZGRlbiA9IGlzQW55U2lkZUZ1bGx5Q2xpcHBlZChyZWZlcmVuY2VDbGlwcGluZ09mZnNldHMpO1xuICB2YXIgaGFzUG9wcGVyRXNjYXBlZCA9IGlzQW55U2lkZUZ1bGx5Q2xpcHBlZChwb3BwZXJFc2NhcGVPZmZzZXRzKTtcbiAgc3RhdGUubW9kaWZpZXJzRGF0YVtuYW1lXSA9IHtcbiAgICByZWZlcmVuY2VDbGlwcGluZ09mZnNldHM6IHJlZmVyZW5jZUNsaXBwaW5nT2Zmc2V0cyxcbiAgICBwb3BwZXJFc2NhcGVPZmZzZXRzOiBwb3BwZXJFc2NhcGVPZmZzZXRzLFxuICAgIGlzUmVmZXJlbmNlSGlkZGVuOiBpc1JlZmVyZW5jZUhpZGRlbixcbiAgICBoYXNQb3BwZXJFc2NhcGVkOiBoYXNQb3BwZXJFc2NhcGVkXG4gIH07XG4gIHN0YXRlLmF0dHJpYnV0ZXMucG9wcGVyID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBzdGF0ZS5hdHRyaWJ1dGVzLnBvcHBlciksIHt9LCB7XG4gICAgJ2RhdGEtcG9wcGVyLXJlZmVyZW5jZS1oaWRkZW4nOiBpc1JlZmVyZW5jZUhpZGRlbixcbiAgICAnZGF0YS1wb3BwZXItZXNjYXBlZCc6IGhhc1BvcHBlckVzY2FwZWRcbiAgfSk7XG59IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICdoaWRlJyxcbiAgZW5hYmxlZDogdHJ1ZSxcbiAgcGhhc2U6ICdtYWluJyxcbiAgcmVxdWlyZXNJZkV4aXN0czogWydwcmV2ZW50T3ZlcmZsb3cnXSxcbiAgZm46IGhpZGVcbn07IiwiaW1wb3J0IHsgcG9wcGVyR2VuZXJhdG9yLCBkZXRlY3RPdmVyZmxvdyB9IGZyb20gXCIuL2NyZWF0ZVBvcHBlci5qc1wiO1xuaW1wb3J0IGV2ZW50TGlzdGVuZXJzIGZyb20gXCIuL21vZGlmaWVycy9ldmVudExpc3RlbmVycy5qc1wiO1xuaW1wb3J0IHBvcHBlck9mZnNldHMgZnJvbSBcIi4vbW9kaWZpZXJzL3BvcHBlck9mZnNldHMuanNcIjtcbmltcG9ydCBjb21wdXRlU3R5bGVzIGZyb20gXCIuL21vZGlmaWVycy9jb21wdXRlU3R5bGVzLmpzXCI7XG5pbXBvcnQgYXBwbHlTdHlsZXMgZnJvbSBcIi4vbW9kaWZpZXJzL2FwcGx5U3R5bGVzLmpzXCI7XG5pbXBvcnQgb2Zmc2V0IGZyb20gXCIuL21vZGlmaWVycy9vZmZzZXQuanNcIjtcbmltcG9ydCBmbGlwIGZyb20gXCIuL21vZGlmaWVycy9mbGlwLmpzXCI7XG5pbXBvcnQgcHJldmVudE92ZXJmbG93IGZyb20gXCIuL21vZGlmaWVycy9wcmV2ZW50T3ZlcmZsb3cuanNcIjtcbmltcG9ydCBhcnJvdyBmcm9tIFwiLi9tb2RpZmllcnMvYXJyb3cuanNcIjtcbmltcG9ydCBoaWRlIGZyb20gXCIuL21vZGlmaWVycy9oaWRlLmpzXCI7XG52YXIgZGVmYXVsdE1vZGlmaWVycyA9IFtldmVudExpc3RlbmVycywgcG9wcGVyT2Zmc2V0cywgY29tcHV0ZVN0eWxlcywgYXBwbHlTdHlsZXMsIG9mZnNldCwgZmxpcCwgcHJldmVudE92ZXJmbG93LCBhcnJvdywgaGlkZV07XG52YXIgY3JlYXRlUG9wcGVyID0gLyojX19QVVJFX18qL3BvcHBlckdlbmVyYXRvcih7XG4gIGRlZmF1bHRNb2RpZmllcnM6IGRlZmF1bHRNb2RpZmllcnNcbn0pOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cbmV4cG9ydCB7IGNyZWF0ZVBvcHBlciwgcG9wcGVyR2VuZXJhdG9yLCBkZWZhdWx0TW9kaWZpZXJzLCBkZXRlY3RPdmVyZmxvdyB9OyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cbmV4cG9ydCB7IGNyZWF0ZVBvcHBlciBhcyBjcmVhdGVQb3BwZXJMaXRlIH0gZnJvbSBcIi4vcG9wcGVyLWxpdGUuanNcIjsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5leHBvcnQgKiBmcm9tIFwiLi9tb2RpZmllcnMvaW5kZXguanNcIjsiLCJpbXBvcnQgY29tcHV0ZU9mZnNldHMgZnJvbSBcIi4uL3V0aWxzL2NvbXB1dGVPZmZzZXRzLmpzXCI7XG5cbmZ1bmN0aW9uIHBvcHBlck9mZnNldHMoX3JlZikge1xuICB2YXIgc3RhdGUgPSBfcmVmLnN0YXRlLFxuICAgICAgbmFtZSA9IF9yZWYubmFtZTtcbiAgLy8gT2Zmc2V0cyBhcmUgdGhlIGFjdHVhbCBwb3NpdGlvbiB0aGUgcG9wcGVyIG5lZWRzIHRvIGhhdmUgdG8gYmVcbiAgLy8gcHJvcGVybHkgcG9zaXRpb25lZCBuZWFyIGl0cyByZWZlcmVuY2UgZWxlbWVudFxuICAvLyBUaGlzIGlzIHRoZSBtb3N0IGJhc2ljIHBsYWNlbWVudCwgYW5kIHdpbGwgYmUgYWRqdXN0ZWQgYnlcbiAgLy8gdGhlIG1vZGlmaWVycyBpbiB0aGUgbmV4dCBzdGVwXG4gIHN0YXRlLm1vZGlmaWVyc0RhdGFbbmFtZV0gPSBjb21wdXRlT2Zmc2V0cyh7XG4gICAgcmVmZXJlbmNlOiBzdGF0ZS5yZWN0cy5yZWZlcmVuY2UsXG4gICAgZWxlbWVudDogc3RhdGUucmVjdHMucG9wcGVyLFxuICAgIHN0cmF0ZWd5OiAnYWJzb2x1dGUnLFxuICAgIHBsYWNlbWVudDogc3RhdGUucGxhY2VtZW50XG4gIH0pO1xufSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cblxuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAncG9wcGVyT2Zmc2V0cycsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIHBoYXNlOiAncmVhZCcsXG4gIGZuOiBwb3BwZXJPZmZzZXRzLFxuICBkYXRhOiB7fVxufTsiLCJpbXBvcnQgZ2V0Tm9kZU5hbWUgZnJvbSBcIi4uL2RvbS11dGlscy9nZXROb2RlTmFtZS5qc1wiO1xuaW1wb3J0IHsgaXNIVE1MRWxlbWVudCB9IGZyb20gXCIuLi9kb20tdXRpbHMvaW5zdGFuY2VPZi5qc1wiOyAvLyBUaGlzIG1vZGlmaWVyIHRha2VzIHRoZSBzdHlsZXMgcHJlcGFyZWQgYnkgdGhlIGBjb21wdXRlU3R5bGVzYCBtb2RpZmllclxuLy8gYW5kIGFwcGxpZXMgdGhlbSB0byB0aGUgSFRNTEVsZW1lbnRzIHN1Y2ggYXMgcG9wcGVyIGFuZCBhcnJvd1xuXG5mdW5jdGlvbiBhcHBseVN0eWxlcyhfcmVmKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYuc3RhdGU7XG4gIE9iamVjdC5rZXlzKHN0YXRlLmVsZW1lbnRzKS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdmFyIHN0eWxlID0gc3RhdGUuc3R5bGVzW25hbWVdIHx8IHt9O1xuICAgIHZhciBhdHRyaWJ1dGVzID0gc3RhdGUuYXR0cmlidXRlc1tuYW1lXSB8fCB7fTtcbiAgICB2YXIgZWxlbWVudCA9IHN0YXRlLmVsZW1lbnRzW25hbWVdOyAvLyBhcnJvdyBpcyBvcHRpb25hbCArIHZpcnR1YWwgZWxlbWVudHNcblxuICAgIGlmICghaXNIVE1MRWxlbWVudChlbGVtZW50KSB8fCAhZ2V0Tm9kZU5hbWUoZWxlbWVudCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIEZsb3cgZG9lc24ndCBzdXBwb3J0IHRvIGV4dGVuZCB0aGlzIHByb3BlcnR5LCBidXQgaXQncyB0aGUgbW9zdFxuICAgIC8vIGVmZmVjdGl2ZSB3YXkgdG8gYXBwbHkgc3R5bGVzIHRvIGFuIEhUTUxFbGVtZW50XG4gICAgLy8gJEZsb3dGaXhNZVtjYW5ub3Qtd3JpdGVdXG5cblxuICAgIE9iamVjdC5hc3NpZ24oZWxlbWVudC5zdHlsZSwgc3R5bGUpO1xuICAgIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGF0dHJpYnV0ZXNbbmFtZV07XG5cbiAgICAgIGlmICh2YWx1ZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSA9PT0gdHJ1ZSA/ICcnIDogdmFsdWUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gZWZmZWN0KF9yZWYyKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYyLnN0YXRlO1xuICB2YXIgaW5pdGlhbFN0eWxlcyA9IHtcbiAgICBwb3BwZXI6IHtcbiAgICAgIHBvc2l0aW9uOiBzdGF0ZS5vcHRpb25zLnN0cmF0ZWd5LFxuICAgICAgbGVmdDogJzAnLFxuICAgICAgdG9wOiAnMCcsXG4gICAgICBtYXJnaW46ICcwJ1xuICAgIH0sXG4gICAgYXJyb3c6IHtcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnXG4gICAgfSxcbiAgICByZWZlcmVuY2U6IHt9XG4gIH07XG4gIE9iamVjdC5hc3NpZ24oc3RhdGUuZWxlbWVudHMucG9wcGVyLnN0eWxlLCBpbml0aWFsU3R5bGVzLnBvcHBlcik7XG5cbiAgaWYgKHN0YXRlLmVsZW1lbnRzLmFycm93KSB7XG4gICAgT2JqZWN0LmFzc2lnbihzdGF0ZS5lbGVtZW50cy5hcnJvdy5zdHlsZSwgaW5pdGlhbFN0eWxlcy5hcnJvdyk7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIE9iamVjdC5rZXlzKHN0YXRlLmVsZW1lbnRzKS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICB2YXIgZWxlbWVudCA9IHN0YXRlLmVsZW1lbnRzW25hbWVdO1xuICAgICAgdmFyIGF0dHJpYnV0ZXMgPSBzdGF0ZS5hdHRyaWJ1dGVzW25hbWVdIHx8IHt9O1xuICAgICAgdmFyIHN0eWxlUHJvcGVydGllcyA9IE9iamVjdC5rZXlzKHN0YXRlLnN0eWxlcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSA/IHN0YXRlLnN0eWxlc1tuYW1lXSA6IGluaXRpYWxTdHlsZXNbbmFtZV0pOyAvLyBTZXQgYWxsIHZhbHVlcyB0byBhbiBlbXB0eSBzdHJpbmcgdG8gdW5zZXQgdGhlbVxuXG4gICAgICB2YXIgc3R5bGUgPSBzdHlsZVByb3BlcnRpZXMucmVkdWNlKGZ1bmN0aW9uIChzdHlsZSwgcHJvcGVydHkpIHtcbiAgICAgICAgc3R5bGVbcHJvcGVydHldID0gJyc7XG4gICAgICAgIHJldHVybiBzdHlsZTtcbiAgICAgIH0sIHt9KTsgLy8gYXJyb3cgaXMgb3B0aW9uYWwgKyB2aXJ0dWFsIGVsZW1lbnRzXG5cbiAgICAgIGlmICghaXNIVE1MRWxlbWVudChlbGVtZW50KSB8fCAhZ2V0Tm9kZU5hbWUoZWxlbWVudCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBPYmplY3QuYXNzaWduKGVsZW1lbnQuc3R5bGUsIHN0eWxlKTtcbiAgICAgIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmZvckVhY2goZnVuY3Rpb24gKGF0dHJpYnV0ZSkge1xuICAgICAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShhdHRyaWJ1dGUpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG59IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICdhcHBseVN0eWxlcycsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIHBoYXNlOiAnd3JpdGUnLFxuICBmbjogYXBwbHlTdHlsZXMsXG4gIGVmZmVjdDogZWZmZWN0LFxuICByZXF1aXJlczogWydjb21wdXRlU3R5bGVzJ11cbn07IiwiaW1wb3J0IGdldEJhc2VQbGFjZW1lbnQgZnJvbSBcIi4uL3V0aWxzL2dldEJhc2VQbGFjZW1lbnQuanNcIjtcbmltcG9ydCB7IHRvcCwgbGVmdCwgcmlnaHQsIHBsYWNlbWVudHMgfSBmcm9tIFwiLi4vZW51bXMuanNcIjtcbmV4cG9ydCBmdW5jdGlvbiBkaXN0YW5jZUFuZFNraWRkaW5nVG9YWShwbGFjZW1lbnQsIHJlY3RzLCBvZmZzZXQpIHtcbiAgdmFyIGJhc2VQbGFjZW1lbnQgPSBnZXRCYXNlUGxhY2VtZW50KHBsYWNlbWVudCk7XG4gIHZhciBpbnZlcnREaXN0YW5jZSA9IFtsZWZ0LCB0b3BdLmluZGV4T2YoYmFzZVBsYWNlbWVudCkgPj0gMCA/IC0xIDogMTtcblxuICB2YXIgX3JlZiA9IHR5cGVvZiBvZmZzZXQgPT09ICdmdW5jdGlvbicgPyBvZmZzZXQoT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCByZWN0cyksIHt9LCB7XG4gICAgcGxhY2VtZW50OiBwbGFjZW1lbnRcbiAgfSkpIDogb2Zmc2V0LFxuICAgICAgc2tpZGRpbmcgPSBfcmVmWzBdLFxuICAgICAgZGlzdGFuY2UgPSBfcmVmWzFdO1xuXG4gIHNraWRkaW5nID0gc2tpZGRpbmcgfHwgMDtcbiAgZGlzdGFuY2UgPSAoZGlzdGFuY2UgfHwgMCkgKiBpbnZlcnREaXN0YW5jZTtcbiAgcmV0dXJuIFtsZWZ0LCByaWdodF0uaW5kZXhPZihiYXNlUGxhY2VtZW50KSA+PSAwID8ge1xuICAgIHg6IGRpc3RhbmNlLFxuICAgIHk6IHNraWRkaW5nXG4gIH0gOiB7XG4gICAgeDogc2tpZGRpbmcsXG4gICAgeTogZGlzdGFuY2VcbiAgfTtcbn1cblxuZnVuY3Rpb24gb2Zmc2V0KF9yZWYyKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYyLnN0YXRlLFxuICAgICAgb3B0aW9ucyA9IF9yZWYyLm9wdGlvbnMsXG4gICAgICBuYW1lID0gX3JlZjIubmFtZTtcbiAgdmFyIF9vcHRpb25zJG9mZnNldCA9IG9wdGlvbnMub2Zmc2V0LFxuICAgICAgb2Zmc2V0ID0gX29wdGlvbnMkb2Zmc2V0ID09PSB2b2lkIDAgPyBbMCwgMF0gOiBfb3B0aW9ucyRvZmZzZXQ7XG4gIHZhciBkYXRhID0gcGxhY2VtZW50cy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgcGxhY2VtZW50KSB7XG4gICAgYWNjW3BsYWNlbWVudF0gPSBkaXN0YW5jZUFuZFNraWRkaW5nVG9YWShwbGFjZW1lbnQsIHN0YXRlLnJlY3RzLCBvZmZzZXQpO1xuICAgIHJldHVybiBhY2M7XG4gIH0sIHt9KTtcbiAgdmFyIF9kYXRhJHN0YXRlJHBsYWNlbWVudCA9IGRhdGFbc3RhdGUucGxhY2VtZW50XSxcbiAgICAgIHggPSBfZGF0YSRzdGF0ZSRwbGFjZW1lbnQueCxcbiAgICAgIHkgPSBfZGF0YSRzdGF0ZSRwbGFjZW1lbnQueTtcblxuICBpZiAoc3RhdGUubW9kaWZpZXJzRGF0YS5wb3BwZXJPZmZzZXRzICE9IG51bGwpIHtcbiAgICBzdGF0ZS5tb2RpZmllcnNEYXRhLnBvcHBlck9mZnNldHMueCArPSB4O1xuICAgIHN0YXRlLm1vZGlmaWVyc0RhdGEucG9wcGVyT2Zmc2V0cy55ICs9IHk7XG4gIH1cblxuICBzdGF0ZS5tb2RpZmllcnNEYXRhW25hbWVdID0gZGF0YTtcbn0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogJ29mZnNldCcsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIHBoYXNlOiAnbWFpbicsXG4gIHJlcXVpcmVzOiBbJ3BvcHBlck9mZnNldHMnXSxcbiAgZm46IG9mZnNldFxufTsiLCJpbXBvcnQgZ2V0T3Bwb3NpdGVQbGFjZW1lbnQgZnJvbSBcIi4uL3V0aWxzL2dldE9wcG9zaXRlUGxhY2VtZW50LmpzXCI7XG5pbXBvcnQgZ2V0QmFzZVBsYWNlbWVudCBmcm9tIFwiLi4vdXRpbHMvZ2V0QmFzZVBsYWNlbWVudC5qc1wiO1xuaW1wb3J0IGdldE9wcG9zaXRlVmFyaWF0aW9uUGxhY2VtZW50IGZyb20gXCIuLi91dGlscy9nZXRPcHBvc2l0ZVZhcmlhdGlvblBsYWNlbWVudC5qc1wiO1xuaW1wb3J0IGRldGVjdE92ZXJmbG93IGZyb20gXCIuLi91dGlscy9kZXRlY3RPdmVyZmxvdy5qc1wiO1xuaW1wb3J0IGNvbXB1dGVBdXRvUGxhY2VtZW50IGZyb20gXCIuLi91dGlscy9jb21wdXRlQXV0b1BsYWNlbWVudC5qc1wiO1xuaW1wb3J0IHsgYm90dG9tLCB0b3AsIHN0YXJ0LCByaWdodCwgbGVmdCwgYXV0byB9IGZyb20gXCIuLi9lbnVtcy5qc1wiO1xuaW1wb3J0IGdldFZhcmlhdGlvbiBmcm9tIFwiLi4vdXRpbHMvZ2V0VmFyaWF0aW9uLmpzXCI7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuZnVuY3Rpb24gZ2V0RXhwYW5kZWRGYWxsYmFja1BsYWNlbWVudHMocGxhY2VtZW50KSB7XG4gIGlmIChnZXRCYXNlUGxhY2VtZW50KHBsYWNlbWVudCkgPT09IGF1dG8pIHtcbiAgICByZXR1cm4gW107XG4gIH1cblxuICB2YXIgb3Bwb3NpdGVQbGFjZW1lbnQgPSBnZXRPcHBvc2l0ZVBsYWNlbWVudChwbGFjZW1lbnQpO1xuICByZXR1cm4gW2dldE9wcG9zaXRlVmFyaWF0aW9uUGxhY2VtZW50KHBsYWNlbWVudCksIG9wcG9zaXRlUGxhY2VtZW50LCBnZXRPcHBvc2l0ZVZhcmlhdGlvblBsYWNlbWVudChvcHBvc2l0ZVBsYWNlbWVudCldO1xufVxuXG5mdW5jdGlvbiBmbGlwKF9yZWYpIHtcbiAgdmFyIHN0YXRlID0gX3JlZi5zdGF0ZSxcbiAgICAgIG9wdGlvbnMgPSBfcmVmLm9wdGlvbnMsXG4gICAgICBuYW1lID0gX3JlZi5uYW1lO1xuXG4gIGlmIChzdGF0ZS5tb2RpZmllcnNEYXRhW25hbWVdLl9za2lwKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIF9vcHRpb25zJG1haW5BeGlzID0gb3B0aW9ucy5tYWluQXhpcyxcbiAgICAgIGNoZWNrTWFpbkF4aXMgPSBfb3B0aW9ucyRtYWluQXhpcyA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9vcHRpb25zJG1haW5BeGlzLFxuICAgICAgX29wdGlvbnMkYWx0QXhpcyA9IG9wdGlvbnMuYWx0QXhpcyxcbiAgICAgIGNoZWNrQWx0QXhpcyA9IF9vcHRpb25zJGFsdEF4aXMgPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyRhbHRBeGlzLFxuICAgICAgc3BlY2lmaWVkRmFsbGJhY2tQbGFjZW1lbnRzID0gb3B0aW9ucy5mYWxsYmFja1BsYWNlbWVudHMsXG4gICAgICBwYWRkaW5nID0gb3B0aW9ucy5wYWRkaW5nLFxuICAgICAgYm91bmRhcnkgPSBvcHRpb25zLmJvdW5kYXJ5LFxuICAgICAgcm9vdEJvdW5kYXJ5ID0gb3B0aW9ucy5yb290Qm91bmRhcnksXG4gICAgICBhbHRCb3VuZGFyeSA9IG9wdGlvbnMuYWx0Qm91bmRhcnksXG4gICAgICBfb3B0aW9ucyRmbGlwVmFyaWF0aW8gPSBvcHRpb25zLmZsaXBWYXJpYXRpb25zLFxuICAgICAgZmxpcFZhcmlhdGlvbnMgPSBfb3B0aW9ucyRmbGlwVmFyaWF0aW8gPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyRmbGlwVmFyaWF0aW8sXG4gICAgICBhbGxvd2VkQXV0b1BsYWNlbWVudHMgPSBvcHRpb25zLmFsbG93ZWRBdXRvUGxhY2VtZW50cztcbiAgdmFyIHByZWZlcnJlZFBsYWNlbWVudCA9IHN0YXRlLm9wdGlvbnMucGxhY2VtZW50O1xuICB2YXIgYmFzZVBsYWNlbWVudCA9IGdldEJhc2VQbGFjZW1lbnQocHJlZmVycmVkUGxhY2VtZW50KTtcbiAgdmFyIGlzQmFzZVBsYWNlbWVudCA9IGJhc2VQbGFjZW1lbnQgPT09IHByZWZlcnJlZFBsYWNlbWVudDtcbiAgdmFyIGZhbGxiYWNrUGxhY2VtZW50cyA9IHNwZWNpZmllZEZhbGxiYWNrUGxhY2VtZW50cyB8fCAoaXNCYXNlUGxhY2VtZW50IHx8ICFmbGlwVmFyaWF0aW9ucyA/IFtnZXRPcHBvc2l0ZVBsYWNlbWVudChwcmVmZXJyZWRQbGFjZW1lbnQpXSA6IGdldEV4cGFuZGVkRmFsbGJhY2tQbGFjZW1lbnRzKHByZWZlcnJlZFBsYWNlbWVudCkpO1xuICB2YXIgcGxhY2VtZW50cyA9IFtwcmVmZXJyZWRQbGFjZW1lbnRdLmNvbmNhdChmYWxsYmFja1BsYWNlbWVudHMpLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBwbGFjZW1lbnQpIHtcbiAgICByZXR1cm4gYWNjLmNvbmNhdChnZXRCYXNlUGxhY2VtZW50KHBsYWNlbWVudCkgPT09IGF1dG8gPyBjb21wdXRlQXV0b1BsYWNlbWVudChzdGF0ZSwge1xuICAgICAgcGxhY2VtZW50OiBwbGFjZW1lbnQsXG4gICAgICBib3VuZGFyeTogYm91bmRhcnksXG4gICAgICByb290Qm91bmRhcnk6IHJvb3RCb3VuZGFyeSxcbiAgICAgIHBhZGRpbmc6IHBhZGRpbmcsXG4gICAgICBmbGlwVmFyaWF0aW9uczogZmxpcFZhcmlhdGlvbnMsXG4gICAgICBhbGxvd2VkQXV0b1BsYWNlbWVudHM6IGFsbG93ZWRBdXRvUGxhY2VtZW50c1xuICAgIH0pIDogcGxhY2VtZW50KTtcbiAgfSwgW10pO1xuICB2YXIgcmVmZXJlbmNlUmVjdCA9IHN0YXRlLnJlY3RzLnJlZmVyZW5jZTtcbiAgdmFyIHBvcHBlclJlY3QgPSBzdGF0ZS5yZWN0cy5wb3BwZXI7XG4gIHZhciBjaGVja3NNYXAgPSBuZXcgTWFwKCk7XG4gIHZhciBtYWtlRmFsbGJhY2tDaGVja3MgPSB0cnVlO1xuICB2YXIgZmlyc3RGaXR0aW5nUGxhY2VtZW50ID0gcGxhY2VtZW50c1swXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHBsYWNlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgcGxhY2VtZW50ID0gcGxhY2VtZW50c1tpXTtcblxuICAgIHZhciBfYmFzZVBsYWNlbWVudCA9IGdldEJhc2VQbGFjZW1lbnQocGxhY2VtZW50KTtcblxuICAgIHZhciBpc1N0YXJ0VmFyaWF0aW9uID0gZ2V0VmFyaWF0aW9uKHBsYWNlbWVudCkgPT09IHN0YXJ0O1xuICAgIHZhciBpc1ZlcnRpY2FsID0gW3RvcCwgYm90dG9tXS5pbmRleE9mKF9iYXNlUGxhY2VtZW50KSA+PSAwO1xuICAgIHZhciBsZW4gPSBpc1ZlcnRpY2FsID8gJ3dpZHRoJyA6ICdoZWlnaHQnO1xuICAgIHZhciBvdmVyZmxvdyA9IGRldGVjdE92ZXJmbG93KHN0YXRlLCB7XG4gICAgICBwbGFjZW1lbnQ6IHBsYWNlbWVudCxcbiAgICAgIGJvdW5kYXJ5OiBib3VuZGFyeSxcbiAgICAgIHJvb3RCb3VuZGFyeTogcm9vdEJvdW5kYXJ5LFxuICAgICAgYWx0Qm91bmRhcnk6IGFsdEJvdW5kYXJ5LFxuICAgICAgcGFkZGluZzogcGFkZGluZ1xuICAgIH0pO1xuICAgIHZhciBtYWluVmFyaWF0aW9uU2lkZSA9IGlzVmVydGljYWwgPyBpc1N0YXJ0VmFyaWF0aW9uID8gcmlnaHQgOiBsZWZ0IDogaXNTdGFydFZhcmlhdGlvbiA/IGJvdHRvbSA6IHRvcDtcblxuICAgIGlmIChyZWZlcmVuY2VSZWN0W2xlbl0gPiBwb3BwZXJSZWN0W2xlbl0pIHtcbiAgICAgIG1haW5WYXJpYXRpb25TaWRlID0gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQobWFpblZhcmlhdGlvblNpZGUpO1xuICAgIH1cblxuICAgIHZhciBhbHRWYXJpYXRpb25TaWRlID0gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQobWFpblZhcmlhdGlvblNpZGUpO1xuICAgIHZhciBjaGVja3MgPSBbXTtcblxuICAgIGlmIChjaGVja01haW5BeGlzKSB7XG4gICAgICBjaGVja3MucHVzaChvdmVyZmxvd1tfYmFzZVBsYWNlbWVudF0gPD0gMCk7XG4gICAgfVxuXG4gICAgaWYgKGNoZWNrQWx0QXhpcykge1xuICAgICAgY2hlY2tzLnB1c2gob3ZlcmZsb3dbbWFpblZhcmlhdGlvblNpZGVdIDw9IDAsIG92ZXJmbG93W2FsdFZhcmlhdGlvblNpZGVdIDw9IDApO1xuICAgIH1cblxuICAgIGlmIChjaGVja3MuZXZlcnkoZnVuY3Rpb24gKGNoZWNrKSB7XG4gICAgICByZXR1cm4gY2hlY2s7XG4gICAgfSkpIHtcbiAgICAgIGZpcnN0Rml0dGluZ1BsYWNlbWVudCA9IHBsYWNlbWVudDtcbiAgICAgIG1ha2VGYWxsYmFja0NoZWNrcyA9IGZhbHNlO1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgY2hlY2tzTWFwLnNldChwbGFjZW1lbnQsIGNoZWNrcyk7XG4gIH1cblxuICBpZiAobWFrZUZhbGxiYWNrQ2hlY2tzKSB7XG4gICAgLy8gYDJgIG1heSBiZSBkZXNpcmVkIGluIHNvbWUgY2FzZXMg4oCTIHJlc2VhcmNoIGxhdGVyXG4gICAgdmFyIG51bWJlck9mQ2hlY2tzID0gZmxpcFZhcmlhdGlvbnMgPyAzIDogMTtcblxuICAgIHZhciBfbG9vcCA9IGZ1bmN0aW9uIF9sb29wKF9pKSB7XG4gICAgICB2YXIgZml0dGluZ1BsYWNlbWVudCA9IHBsYWNlbWVudHMuZmluZChmdW5jdGlvbiAocGxhY2VtZW50KSB7XG4gICAgICAgIHZhciBjaGVja3MgPSBjaGVja3NNYXAuZ2V0KHBsYWNlbWVudCk7XG5cbiAgICAgICAgaWYgKGNoZWNrcykge1xuICAgICAgICAgIHJldHVybiBjaGVja3Muc2xpY2UoMCwgX2kpLmV2ZXJ5KGZ1bmN0aW9uIChjaGVjaykge1xuICAgICAgICAgICAgcmV0dXJuIGNoZWNrO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgaWYgKGZpdHRpbmdQbGFjZW1lbnQpIHtcbiAgICAgICAgZmlyc3RGaXR0aW5nUGxhY2VtZW50ID0gZml0dGluZ1BsYWNlbWVudDtcbiAgICAgICAgcmV0dXJuIFwiYnJlYWtcIjtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgZm9yICh2YXIgX2kgPSBudW1iZXJPZkNoZWNrczsgX2kgPiAwOyBfaS0tKSB7XG4gICAgICB2YXIgX3JldCA9IF9sb29wKF9pKTtcblxuICAgICAgaWYgKF9yZXQgPT09IFwiYnJlYWtcIikgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgaWYgKHN0YXRlLnBsYWNlbWVudCAhPT0gZmlyc3RGaXR0aW5nUGxhY2VtZW50KSB7XG4gICAgc3RhdGUubW9kaWZpZXJzRGF0YVtuYW1lXS5fc2tpcCA9IHRydWU7XG4gICAgc3RhdGUucGxhY2VtZW50ID0gZmlyc3RGaXR0aW5nUGxhY2VtZW50O1xuICAgIHN0YXRlLnJlc2V0ID0gdHJ1ZTtcbiAgfVxufSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cblxuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAnZmxpcCcsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIHBoYXNlOiAnbWFpbicsXG4gIGZuOiBmbGlwLFxuICByZXF1aXJlc0lmRXhpc3RzOiBbJ29mZnNldCddLFxuICBkYXRhOiB7XG4gICAgX3NraXA6IGZhbHNlXG4gIH1cbn07IiwiaW1wb3J0IGdldFZhcmlhdGlvbiBmcm9tIFwiLi9nZXRWYXJpYXRpb24uanNcIjtcbmltcG9ydCB7IHZhcmlhdGlvblBsYWNlbWVudHMsIGJhc2VQbGFjZW1lbnRzLCBwbGFjZW1lbnRzIGFzIGFsbFBsYWNlbWVudHMgfSBmcm9tIFwiLi4vZW51bXMuanNcIjtcbmltcG9ydCBkZXRlY3RPdmVyZmxvdyBmcm9tIFwiLi9kZXRlY3RPdmVyZmxvdy5qc1wiO1xuaW1wb3J0IGdldEJhc2VQbGFjZW1lbnQgZnJvbSBcIi4vZ2V0QmFzZVBsYWNlbWVudC5qc1wiO1xuXG4vKjo6IHR5cGUgT3ZlcmZsb3dzTWFwID0geyBbQ29tcHV0ZWRQbGFjZW1lbnRdOiBudW1iZXIgfTsgKi9cblxuLyo7OyB0eXBlIE92ZXJmbG93c01hcCA9IHsgW2tleSBpbiBDb21wdXRlZFBsYWNlbWVudF06IG51bWJlciB9OyAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29tcHV0ZUF1dG9QbGFjZW1lbnQoc3RhdGUsIG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIHZhciBfb3B0aW9ucyA9IG9wdGlvbnMsXG4gICAgICBwbGFjZW1lbnQgPSBfb3B0aW9ucy5wbGFjZW1lbnQsXG4gICAgICBib3VuZGFyeSA9IF9vcHRpb25zLmJvdW5kYXJ5LFxuICAgICAgcm9vdEJvdW5kYXJ5ID0gX29wdGlvbnMucm9vdEJvdW5kYXJ5LFxuICAgICAgcGFkZGluZyA9IF9vcHRpb25zLnBhZGRpbmcsXG4gICAgICBmbGlwVmFyaWF0aW9ucyA9IF9vcHRpb25zLmZsaXBWYXJpYXRpb25zLFxuICAgICAgX29wdGlvbnMkYWxsb3dlZEF1dG9QID0gX29wdGlvbnMuYWxsb3dlZEF1dG9QbGFjZW1lbnRzLFxuICAgICAgYWxsb3dlZEF1dG9QbGFjZW1lbnRzID0gX29wdGlvbnMkYWxsb3dlZEF1dG9QID09PSB2b2lkIDAgPyBhbGxQbGFjZW1lbnRzIDogX29wdGlvbnMkYWxsb3dlZEF1dG9QO1xuICB2YXIgdmFyaWF0aW9uID0gZ2V0VmFyaWF0aW9uKHBsYWNlbWVudCk7XG4gIHZhciBwbGFjZW1lbnRzID0gdmFyaWF0aW9uID8gZmxpcFZhcmlhdGlvbnMgPyB2YXJpYXRpb25QbGFjZW1lbnRzIDogdmFyaWF0aW9uUGxhY2VtZW50cy5maWx0ZXIoZnVuY3Rpb24gKHBsYWNlbWVudCkge1xuICAgIHJldHVybiBnZXRWYXJpYXRpb24ocGxhY2VtZW50KSA9PT0gdmFyaWF0aW9uO1xuICB9KSA6IGJhc2VQbGFjZW1lbnRzO1xuICB2YXIgYWxsb3dlZFBsYWNlbWVudHMgPSBwbGFjZW1lbnRzLmZpbHRlcihmdW5jdGlvbiAocGxhY2VtZW50KSB7XG4gICAgcmV0dXJuIGFsbG93ZWRBdXRvUGxhY2VtZW50cy5pbmRleE9mKHBsYWNlbWVudCkgPj0gMDtcbiAgfSk7XG5cbiAgaWYgKGFsbG93ZWRQbGFjZW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgIGFsbG93ZWRQbGFjZW1lbnRzID0gcGxhY2VtZW50cztcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoWydQb3BwZXI6IFRoZSBgYWxsb3dlZEF1dG9QbGFjZW1lbnRzYCBvcHRpb24gZGlkIG5vdCBhbGxvdyBhbnknLCAncGxhY2VtZW50cy4gRW5zdXJlIHRoZSBgcGxhY2VtZW50YCBvcHRpb24gbWF0Y2hlcyB0aGUgdmFyaWF0aW9uJywgJ29mIHRoZSBhbGxvd2VkIHBsYWNlbWVudHMuJywgJ0ZvciBleGFtcGxlLCBcImF1dG9cIiBjYW5ub3QgYmUgdXNlZCB0byBhbGxvdyBcImJvdHRvbS1zdGFydFwiLicsICdVc2UgXCJhdXRvLXN0YXJ0XCIgaW5zdGVhZC4nXS5qb2luKCcgJykpO1xuICAgIH1cbiAgfSAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS10eXBlXTogRmxvdyBzZWVtcyB0byBoYXZlIHByb2JsZW1zIHdpdGggdHdvIGFycmF5IHVuaW9ucy4uLlxuXG5cbiAgdmFyIG92ZXJmbG93cyA9IGFsbG93ZWRQbGFjZW1lbnRzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBwbGFjZW1lbnQpIHtcbiAgICBhY2NbcGxhY2VtZW50XSA9IGRldGVjdE92ZXJmbG93KHN0YXRlLCB7XG4gICAgICBwbGFjZW1lbnQ6IHBsYWNlbWVudCxcbiAgICAgIGJvdW5kYXJ5OiBib3VuZGFyeSxcbiAgICAgIHJvb3RCb3VuZGFyeTogcm9vdEJvdW5kYXJ5LFxuICAgICAgcGFkZGluZzogcGFkZGluZ1xuICAgIH0pW2dldEJhc2VQbGFjZW1lbnQocGxhY2VtZW50KV07XG4gICAgcmV0dXJuIGFjYztcbiAgfSwge30pO1xuICByZXR1cm4gT2JqZWN0LmtleXMob3ZlcmZsb3dzKS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIG92ZXJmbG93c1thXSAtIG92ZXJmbG93c1tiXTtcbiAgfSk7XG59IiwiaW1wb3J0IHsgdG9wLCBsZWZ0LCByaWdodCwgYm90dG9tLCBzdGFydCB9IGZyb20gXCIuLi9lbnVtcy5qc1wiO1xuaW1wb3J0IGdldEJhc2VQbGFjZW1lbnQgZnJvbSBcIi4uL3V0aWxzL2dldEJhc2VQbGFjZW1lbnQuanNcIjtcbmltcG9ydCBnZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQgZnJvbSBcIi4uL3V0aWxzL2dldE1haW5BeGlzRnJvbVBsYWNlbWVudC5qc1wiO1xuaW1wb3J0IGdldEFsdEF4aXMgZnJvbSBcIi4uL3V0aWxzL2dldEFsdEF4aXMuanNcIjtcbmltcG9ydCB3aXRoaW4gZnJvbSBcIi4uL3V0aWxzL3dpdGhpbi5qc1wiO1xuaW1wb3J0IGdldExheW91dFJlY3QgZnJvbSBcIi4uL2RvbS11dGlscy9nZXRMYXlvdXRSZWN0LmpzXCI7XG5pbXBvcnQgZ2V0T2Zmc2V0UGFyZW50IGZyb20gXCIuLi9kb20tdXRpbHMvZ2V0T2Zmc2V0UGFyZW50LmpzXCI7XG5pbXBvcnQgZGV0ZWN0T3ZlcmZsb3cgZnJvbSBcIi4uL3V0aWxzL2RldGVjdE92ZXJmbG93LmpzXCI7XG5pbXBvcnQgZ2V0VmFyaWF0aW9uIGZyb20gXCIuLi91dGlscy9nZXRWYXJpYXRpb24uanNcIjtcbmltcG9ydCBnZXRGcmVzaFNpZGVPYmplY3QgZnJvbSBcIi4uL3V0aWxzL2dldEZyZXNoU2lkZU9iamVjdC5qc1wiO1xuXG5mdW5jdGlvbiBwcmV2ZW50T3ZlcmZsb3coX3JlZikge1xuICB2YXIgc3RhdGUgPSBfcmVmLnN0YXRlLFxuICAgICAgb3B0aW9ucyA9IF9yZWYub3B0aW9ucyxcbiAgICAgIG5hbWUgPSBfcmVmLm5hbWU7XG4gIHZhciBfb3B0aW9ucyRtYWluQXhpcyA9IG9wdGlvbnMubWFpbkF4aXMsXG4gICAgICBjaGVja01haW5BeGlzID0gX29wdGlvbnMkbWFpbkF4aXMgPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyRtYWluQXhpcyxcbiAgICAgIF9vcHRpb25zJGFsdEF4aXMgPSBvcHRpb25zLmFsdEF4aXMsXG4gICAgICBjaGVja0FsdEF4aXMgPSBfb3B0aW9ucyRhbHRBeGlzID09PSB2b2lkIDAgPyBmYWxzZSA6IF9vcHRpb25zJGFsdEF4aXMsXG4gICAgICBib3VuZGFyeSA9IG9wdGlvbnMuYm91bmRhcnksXG4gICAgICByb290Qm91bmRhcnkgPSBvcHRpb25zLnJvb3RCb3VuZGFyeSxcbiAgICAgIGFsdEJvdW5kYXJ5ID0gb3B0aW9ucy5hbHRCb3VuZGFyeSxcbiAgICAgIHBhZGRpbmcgPSBvcHRpb25zLnBhZGRpbmcsXG4gICAgICBfb3B0aW9ucyR0ZXRoZXIgPSBvcHRpb25zLnRldGhlcixcbiAgICAgIHRldGhlciA9IF9vcHRpb25zJHRldGhlciA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9vcHRpb25zJHRldGhlcixcbiAgICAgIF9vcHRpb25zJHRldGhlck9mZnNldCA9IG9wdGlvbnMudGV0aGVyT2Zmc2V0LFxuICAgICAgdGV0aGVyT2Zmc2V0ID0gX29wdGlvbnMkdGV0aGVyT2Zmc2V0ID09PSB2b2lkIDAgPyAwIDogX29wdGlvbnMkdGV0aGVyT2Zmc2V0O1xuICB2YXIgb3ZlcmZsb3cgPSBkZXRlY3RPdmVyZmxvdyhzdGF0ZSwge1xuICAgIGJvdW5kYXJ5OiBib3VuZGFyeSxcbiAgICByb290Qm91bmRhcnk6IHJvb3RCb3VuZGFyeSxcbiAgICBwYWRkaW5nOiBwYWRkaW5nLFxuICAgIGFsdEJvdW5kYXJ5OiBhbHRCb3VuZGFyeVxuICB9KTtcbiAgdmFyIGJhc2VQbGFjZW1lbnQgPSBnZXRCYXNlUGxhY2VtZW50KHN0YXRlLnBsYWNlbWVudCk7XG4gIHZhciB2YXJpYXRpb24gPSBnZXRWYXJpYXRpb24oc3RhdGUucGxhY2VtZW50KTtcbiAgdmFyIGlzQmFzZVBsYWNlbWVudCA9ICF2YXJpYXRpb247XG4gIHZhciBtYWluQXhpcyA9IGdldE1haW5BeGlzRnJvbVBsYWNlbWVudChiYXNlUGxhY2VtZW50KTtcbiAgdmFyIGFsdEF4aXMgPSBnZXRBbHRBeGlzKG1haW5BeGlzKTtcbiAgdmFyIHBvcHBlck9mZnNldHMgPSBzdGF0ZS5tb2RpZmllcnNEYXRhLnBvcHBlck9mZnNldHM7XG4gIHZhciByZWZlcmVuY2VSZWN0ID0gc3RhdGUucmVjdHMucmVmZXJlbmNlO1xuICB2YXIgcG9wcGVyUmVjdCA9IHN0YXRlLnJlY3RzLnBvcHBlcjtcbiAgdmFyIHRldGhlck9mZnNldFZhbHVlID0gdHlwZW9mIHRldGhlck9mZnNldCA9PT0gJ2Z1bmN0aW9uJyA/IHRldGhlck9mZnNldChPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLnJlY3RzKSwge30sIHtcbiAgICBwbGFjZW1lbnQ6IHN0YXRlLnBsYWNlbWVudFxuICB9KSkgOiB0ZXRoZXJPZmZzZXQ7XG4gIHZhciBkYXRhID0ge1xuICAgIHg6IDAsXG4gICAgeTogMFxuICB9O1xuXG4gIGlmICghcG9wcGVyT2Zmc2V0cykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChjaGVja01haW5BeGlzKSB7XG4gICAgdmFyIG1haW5TaWRlID0gbWFpbkF4aXMgPT09ICd5JyA/IHRvcCA6IGxlZnQ7XG4gICAgdmFyIGFsdFNpZGUgPSBtYWluQXhpcyA9PT0gJ3knID8gYm90dG9tIDogcmlnaHQ7XG4gICAgdmFyIGxlbiA9IG1haW5BeGlzID09PSAneScgPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG4gICAgdmFyIG9mZnNldCA9IHBvcHBlck9mZnNldHNbbWFpbkF4aXNdO1xuICAgIHZhciBtaW4gPSBwb3BwZXJPZmZzZXRzW21haW5BeGlzXSArIG92ZXJmbG93W21haW5TaWRlXTtcbiAgICB2YXIgbWF4ID0gcG9wcGVyT2Zmc2V0c1ttYWluQXhpc10gLSBvdmVyZmxvd1thbHRTaWRlXTtcbiAgICB2YXIgYWRkaXRpdmUgPSB0ZXRoZXIgPyAtcG9wcGVyUmVjdFtsZW5dIC8gMiA6IDA7XG4gICAgdmFyIG1pbkxlbiA9IHZhcmlhdGlvbiA9PT0gc3RhcnQgPyByZWZlcmVuY2VSZWN0W2xlbl0gOiBwb3BwZXJSZWN0W2xlbl07XG4gICAgdmFyIG1heExlbiA9IHZhcmlhdGlvbiA9PT0gc3RhcnQgPyAtcG9wcGVyUmVjdFtsZW5dIDogLXJlZmVyZW5jZVJlY3RbbGVuXTsgLy8gV2UgbmVlZCB0byBpbmNsdWRlIHRoZSBhcnJvdyBpbiB0aGUgY2FsY3VsYXRpb24gc28gdGhlIGFycm93IGRvZXNuJ3QgZ29cbiAgICAvLyBvdXRzaWRlIHRoZSByZWZlcmVuY2UgYm91bmRzXG5cbiAgICB2YXIgYXJyb3dFbGVtZW50ID0gc3RhdGUuZWxlbWVudHMuYXJyb3c7XG4gICAgdmFyIGFycm93UmVjdCA9IHRldGhlciAmJiBhcnJvd0VsZW1lbnQgPyBnZXRMYXlvdXRSZWN0KGFycm93RWxlbWVudCkgOiB7XG4gICAgICB3aWR0aDogMCxcbiAgICAgIGhlaWdodDogMFxuICAgIH07XG4gICAgdmFyIGFycm93UGFkZGluZ09iamVjdCA9IHN0YXRlLm1vZGlmaWVyc0RhdGFbJ2Fycm93I3BlcnNpc3RlbnQnXSA/IHN0YXRlLm1vZGlmaWVyc0RhdGFbJ2Fycm93I3BlcnNpc3RlbnQnXS5wYWRkaW5nIDogZ2V0RnJlc2hTaWRlT2JqZWN0KCk7XG4gICAgdmFyIGFycm93UGFkZGluZ01pbiA9IGFycm93UGFkZGluZ09iamVjdFttYWluU2lkZV07XG4gICAgdmFyIGFycm93UGFkZGluZ01heCA9IGFycm93UGFkZGluZ09iamVjdFthbHRTaWRlXTsgLy8gSWYgdGhlIHJlZmVyZW5jZSBsZW5ndGggaXMgc21hbGxlciB0aGFuIHRoZSBhcnJvdyBsZW5ndGgsIHdlIGRvbid0IHdhbnRcbiAgICAvLyB0byBpbmNsdWRlIGl0cyBmdWxsIHNpemUgaW4gdGhlIGNhbGN1bGF0aW9uLiBJZiB0aGUgcmVmZXJlbmNlIGlzIHNtYWxsXG4gICAgLy8gYW5kIG5lYXIgdGhlIGVkZ2Ugb2YgYSBib3VuZGFyeSwgdGhlIHBvcHBlciBjYW4gb3ZlcmZsb3cgZXZlbiBpZiB0aGVcbiAgICAvLyByZWZlcmVuY2UgaXMgbm90IG92ZXJmbG93aW5nIGFzIHdlbGwgKGUuZy4gdmlydHVhbCBlbGVtZW50cyB3aXRoIG5vXG4gICAgLy8gd2lkdGggb3IgaGVpZ2h0KVxuXG4gICAgdmFyIGFycm93TGVuID0gd2l0aGluKDAsIHJlZmVyZW5jZVJlY3RbbGVuXSwgYXJyb3dSZWN0W2xlbl0pO1xuICAgIHZhciBtaW5PZmZzZXQgPSBpc0Jhc2VQbGFjZW1lbnQgPyByZWZlcmVuY2VSZWN0W2xlbl0gLyAyIC0gYWRkaXRpdmUgLSBhcnJvd0xlbiAtIGFycm93UGFkZGluZ01pbiAtIHRldGhlck9mZnNldFZhbHVlIDogbWluTGVuIC0gYXJyb3dMZW4gLSBhcnJvd1BhZGRpbmdNaW4gLSB0ZXRoZXJPZmZzZXRWYWx1ZTtcbiAgICB2YXIgbWF4T2Zmc2V0ID0gaXNCYXNlUGxhY2VtZW50ID8gLXJlZmVyZW5jZVJlY3RbbGVuXSAvIDIgKyBhZGRpdGl2ZSArIGFycm93TGVuICsgYXJyb3dQYWRkaW5nTWF4ICsgdGV0aGVyT2Zmc2V0VmFsdWUgOiBtYXhMZW4gKyBhcnJvd0xlbiArIGFycm93UGFkZGluZ01heCArIHRldGhlck9mZnNldFZhbHVlO1xuICAgIHZhciBhcnJvd09mZnNldFBhcmVudCA9IHN0YXRlLmVsZW1lbnRzLmFycm93ICYmIGdldE9mZnNldFBhcmVudChzdGF0ZS5lbGVtZW50cy5hcnJvdyk7XG4gICAgdmFyIGNsaWVudE9mZnNldCA9IGFycm93T2Zmc2V0UGFyZW50ID8gbWFpbkF4aXMgPT09ICd5JyA/IGFycm93T2Zmc2V0UGFyZW50LmNsaWVudFRvcCB8fCAwIDogYXJyb3dPZmZzZXRQYXJlbnQuY2xpZW50TGVmdCB8fCAwIDogMDtcbiAgICB2YXIgb2Zmc2V0TW9kaWZpZXJWYWx1ZSA9IHN0YXRlLm1vZGlmaWVyc0RhdGEub2Zmc2V0ID8gc3RhdGUubW9kaWZpZXJzRGF0YS5vZmZzZXRbc3RhdGUucGxhY2VtZW50XVttYWluQXhpc10gOiAwO1xuICAgIHZhciB0ZXRoZXJNaW4gPSBwb3BwZXJPZmZzZXRzW21haW5BeGlzXSArIG1pbk9mZnNldCAtIG9mZnNldE1vZGlmaWVyVmFsdWUgLSBjbGllbnRPZmZzZXQ7XG4gICAgdmFyIHRldGhlck1heCA9IHBvcHBlck9mZnNldHNbbWFpbkF4aXNdICsgbWF4T2Zmc2V0IC0gb2Zmc2V0TW9kaWZpZXJWYWx1ZTtcbiAgICB2YXIgcHJldmVudGVkT2Zmc2V0ID0gd2l0aGluKHRldGhlciA/IE1hdGgubWluKG1pbiwgdGV0aGVyTWluKSA6IG1pbiwgb2Zmc2V0LCB0ZXRoZXIgPyBNYXRoLm1heChtYXgsIHRldGhlck1heCkgOiBtYXgpO1xuICAgIHBvcHBlck9mZnNldHNbbWFpbkF4aXNdID0gcHJldmVudGVkT2Zmc2V0O1xuICAgIGRhdGFbbWFpbkF4aXNdID0gcHJldmVudGVkT2Zmc2V0IC0gb2Zmc2V0O1xuICB9XG5cbiAgaWYgKGNoZWNrQWx0QXhpcykge1xuICAgIHZhciBfbWFpblNpZGUgPSBtYWluQXhpcyA9PT0gJ3gnID8gdG9wIDogbGVmdDtcblxuICAgIHZhciBfYWx0U2lkZSA9IG1haW5BeGlzID09PSAneCcgPyBib3R0b20gOiByaWdodDtcblxuICAgIHZhciBfb2Zmc2V0ID0gcG9wcGVyT2Zmc2V0c1thbHRBeGlzXTtcblxuICAgIHZhciBfbWluID0gX29mZnNldCArIG92ZXJmbG93W19tYWluU2lkZV07XG5cbiAgICB2YXIgX21heCA9IF9vZmZzZXQgLSBvdmVyZmxvd1tfYWx0U2lkZV07XG5cbiAgICB2YXIgX3ByZXZlbnRlZE9mZnNldCA9IHdpdGhpbihfbWluLCBfb2Zmc2V0LCBfbWF4KTtcblxuICAgIHBvcHBlck9mZnNldHNbYWx0QXhpc10gPSBfcHJldmVudGVkT2Zmc2V0O1xuICAgIGRhdGFbYWx0QXhpc10gPSBfcHJldmVudGVkT2Zmc2V0IC0gX29mZnNldDtcbiAgfVxuXG4gIHN0YXRlLm1vZGlmaWVyc0RhdGFbbmFtZV0gPSBkYXRhO1xufSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cblxuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAncHJldmVudE92ZXJmbG93JyxcbiAgZW5hYmxlZDogdHJ1ZSxcbiAgcGhhc2U6ICdtYWluJyxcbiAgZm46IHByZXZlbnRPdmVyZmxvdyxcbiAgcmVxdWlyZXNJZkV4aXN0czogWydvZmZzZXQnXVxufTsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRBbHRBeGlzKGF4aXMpIHtcbiAgcmV0dXJuIGF4aXMgPT09ICd4JyA/ICd5JyA6ICd4Jztcbn0iLCJpbXBvcnQgZ2V0QmFzZVBsYWNlbWVudCBmcm9tIFwiLi4vdXRpbHMvZ2V0QmFzZVBsYWNlbWVudC5qc1wiO1xuaW1wb3J0IGdldExheW91dFJlY3QgZnJvbSBcIi4uL2RvbS11dGlscy9nZXRMYXlvdXRSZWN0LmpzXCI7XG5pbXBvcnQgY29udGFpbnMgZnJvbSBcIi4uL2RvbS11dGlscy9jb250YWlucy5qc1wiO1xuaW1wb3J0IGdldE9mZnNldFBhcmVudCBmcm9tIFwiLi4vZG9tLXV0aWxzL2dldE9mZnNldFBhcmVudC5qc1wiO1xuaW1wb3J0IGdldE1haW5BeGlzRnJvbVBsYWNlbWVudCBmcm9tIFwiLi4vdXRpbHMvZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50LmpzXCI7XG5pbXBvcnQgd2l0aGluIGZyb20gXCIuLi91dGlscy93aXRoaW4uanNcIjtcbmltcG9ydCBtZXJnZVBhZGRpbmdPYmplY3QgZnJvbSBcIi4uL3V0aWxzL21lcmdlUGFkZGluZ09iamVjdC5qc1wiO1xuaW1wb3J0IGV4cGFuZFRvSGFzaE1hcCBmcm9tIFwiLi4vdXRpbHMvZXhwYW5kVG9IYXNoTWFwLmpzXCI7XG5pbXBvcnQgeyBsZWZ0LCByaWdodCwgYmFzZVBsYWNlbWVudHMsIHRvcCwgYm90dG9tIH0gZnJvbSBcIi4uL2VudW1zLmpzXCI7XG5pbXBvcnQgeyBpc0hUTUxFbGVtZW50IH0gZnJvbSBcIi4uL2RvbS11dGlscy9pbnN0YW5jZU9mLmpzXCI7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuZnVuY3Rpb24gYXJyb3coX3JlZikge1xuICB2YXIgX3N0YXRlJG1vZGlmaWVyc0RhdGEkO1xuXG4gIHZhciBzdGF0ZSA9IF9yZWYuc3RhdGUsXG4gICAgICBuYW1lID0gX3JlZi5uYW1lO1xuICB2YXIgYXJyb3dFbGVtZW50ID0gc3RhdGUuZWxlbWVudHMuYXJyb3c7XG4gIHZhciBwb3BwZXJPZmZzZXRzID0gc3RhdGUubW9kaWZpZXJzRGF0YS5wb3BwZXJPZmZzZXRzO1xuICB2YXIgYmFzZVBsYWNlbWVudCA9IGdldEJhc2VQbGFjZW1lbnQoc3RhdGUucGxhY2VtZW50KTtcbiAgdmFyIGF4aXMgPSBnZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQoYmFzZVBsYWNlbWVudCk7XG4gIHZhciBpc1ZlcnRpY2FsID0gW2xlZnQsIHJpZ2h0XS5pbmRleE9mKGJhc2VQbGFjZW1lbnQpID49IDA7XG4gIHZhciBsZW4gPSBpc1ZlcnRpY2FsID8gJ2hlaWdodCcgOiAnd2lkdGgnO1xuXG4gIGlmICghYXJyb3dFbGVtZW50IHx8ICFwb3BwZXJPZmZzZXRzKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHBhZGRpbmdPYmplY3QgPSBzdGF0ZS5tb2RpZmllcnNEYXRhW25hbWUgKyBcIiNwZXJzaXN0ZW50XCJdLnBhZGRpbmc7XG4gIHZhciBhcnJvd1JlY3QgPSBnZXRMYXlvdXRSZWN0KGFycm93RWxlbWVudCk7XG4gIHZhciBtaW5Qcm9wID0gYXhpcyA9PT0gJ3knID8gdG9wIDogbGVmdDtcbiAgdmFyIG1heFByb3AgPSBheGlzID09PSAneScgPyBib3R0b20gOiByaWdodDtcbiAgdmFyIGVuZERpZmYgPSBzdGF0ZS5yZWN0cy5yZWZlcmVuY2VbbGVuXSArIHN0YXRlLnJlY3RzLnJlZmVyZW5jZVtheGlzXSAtIHBvcHBlck9mZnNldHNbYXhpc10gLSBzdGF0ZS5yZWN0cy5wb3BwZXJbbGVuXTtcbiAgdmFyIHN0YXJ0RGlmZiA9IHBvcHBlck9mZnNldHNbYXhpc10gLSBzdGF0ZS5yZWN0cy5yZWZlcmVuY2VbYXhpc107XG4gIHZhciBhcnJvd09mZnNldFBhcmVudCA9IGdldE9mZnNldFBhcmVudChhcnJvd0VsZW1lbnQpO1xuICB2YXIgY2xpZW50U2l6ZSA9IGFycm93T2Zmc2V0UGFyZW50ID8gYXhpcyA9PT0gJ3knID8gYXJyb3dPZmZzZXRQYXJlbnQuY2xpZW50SGVpZ2h0IHx8IDAgOiBhcnJvd09mZnNldFBhcmVudC5jbGllbnRXaWR0aCB8fCAwIDogMDtcbiAgdmFyIGNlbnRlclRvUmVmZXJlbmNlID0gZW5kRGlmZiAvIDIgLSBzdGFydERpZmYgLyAyOyAvLyBNYWtlIHN1cmUgdGhlIGFycm93IGRvZXNuJ3Qgb3ZlcmZsb3cgdGhlIHBvcHBlciBpZiB0aGUgY2VudGVyIHBvaW50IGlzXG4gIC8vIG91dHNpZGUgb2YgdGhlIHBvcHBlciBib3VuZHNcblxuICB2YXIgbWluID0gcGFkZGluZ09iamVjdFttaW5Qcm9wXTtcbiAgdmFyIG1heCA9IGNsaWVudFNpemUgLSBhcnJvd1JlY3RbbGVuXSAtIHBhZGRpbmdPYmplY3RbbWF4UHJvcF07XG4gIHZhciBjZW50ZXIgPSBjbGllbnRTaXplIC8gMiAtIGFycm93UmVjdFtsZW5dIC8gMiArIGNlbnRlclRvUmVmZXJlbmNlO1xuICB2YXIgb2Zmc2V0ID0gd2l0aGluKG1pbiwgY2VudGVyLCBtYXgpOyAvLyBQcmV2ZW50cyBicmVha2luZyBzeW50YXggaGlnaGxpZ2h0aW5nLi4uXG5cbiAgdmFyIGF4aXNQcm9wID0gYXhpcztcbiAgc3RhdGUubW9kaWZpZXJzRGF0YVtuYW1lXSA9IChfc3RhdGUkbW9kaWZpZXJzRGF0YSQgPSB7fSwgX3N0YXRlJG1vZGlmaWVyc0RhdGEkW2F4aXNQcm9wXSA9IG9mZnNldCwgX3N0YXRlJG1vZGlmaWVyc0RhdGEkLmNlbnRlck9mZnNldCA9IG9mZnNldCAtIGNlbnRlciwgX3N0YXRlJG1vZGlmaWVyc0RhdGEkKTtcbn1cblxuZnVuY3Rpb24gZWZmZWN0KF9yZWYyKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYyLnN0YXRlLFxuICAgICAgb3B0aW9ucyA9IF9yZWYyLm9wdGlvbnMsXG4gICAgICBuYW1lID0gX3JlZjIubmFtZTtcbiAgdmFyIF9vcHRpb25zJGVsZW1lbnQgPSBvcHRpb25zLmVsZW1lbnQsXG4gICAgICBhcnJvd0VsZW1lbnQgPSBfb3B0aW9ucyRlbGVtZW50ID09PSB2b2lkIDAgPyAnW2RhdGEtcG9wcGVyLWFycm93XScgOiBfb3B0aW9ucyRlbGVtZW50LFxuICAgICAgX29wdGlvbnMkcGFkZGluZyA9IG9wdGlvbnMucGFkZGluZyxcbiAgICAgIHBhZGRpbmcgPSBfb3B0aW9ucyRwYWRkaW5nID09PSB2b2lkIDAgPyAwIDogX29wdGlvbnMkcGFkZGluZztcblxuICBpZiAoYXJyb3dFbGVtZW50ID09IG51bGwpIHtcbiAgICByZXR1cm47XG4gIH0gLy8gQ1NTIHNlbGVjdG9yXG5cblxuICBpZiAodHlwZW9mIGFycm93RWxlbWVudCA9PT0gJ3N0cmluZycpIHtcbiAgICBhcnJvd0VsZW1lbnQgPSBzdGF0ZS5lbGVtZW50cy5wb3BwZXIucXVlcnlTZWxlY3RvcihhcnJvd0VsZW1lbnQpO1xuXG4gICAgaWYgKCFhcnJvd0VsZW1lbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgaWYgKCFpc0hUTUxFbGVtZW50KGFycm93RWxlbWVudCkpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoWydQb3BwZXI6IFwiYXJyb3dcIiBlbGVtZW50IG11c3QgYmUgYW4gSFRNTEVsZW1lbnQgKG5vdCBhbiBTVkdFbGVtZW50KS4nLCAnVG8gdXNlIGFuIFNWRyBhcnJvdywgd3JhcCBpdCBpbiBhbiBIVE1MRWxlbWVudCB0aGF0IHdpbGwgYmUgdXNlZCBhcycsICd0aGUgYXJyb3cuJ10uam9pbignICcpKTtcbiAgICB9XG4gIH1cblxuICBpZiAoIWNvbnRhaW5zKHN0YXRlLmVsZW1lbnRzLnBvcHBlciwgYXJyb3dFbGVtZW50KSkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoWydQb3BwZXI6IFwiYXJyb3dcIiBtb2RpZmllclxcJ3MgYGVsZW1lbnRgIG11c3QgYmUgYSBjaGlsZCBvZiB0aGUgcG9wcGVyJywgJ2VsZW1lbnQuJ10uam9pbignICcpKTtcbiAgICB9XG5cbiAgICByZXR1cm47XG4gIH1cblxuICBzdGF0ZS5lbGVtZW50cy5hcnJvdyA9IGFycm93RWxlbWVudDtcbiAgc3RhdGUubW9kaWZpZXJzRGF0YVtuYW1lICsgXCIjcGVyc2lzdGVudFwiXSA9IHtcbiAgICBwYWRkaW5nOiBtZXJnZVBhZGRpbmdPYmplY3QodHlwZW9mIHBhZGRpbmcgIT09ICdudW1iZXInID8gcGFkZGluZyA6IGV4cGFuZFRvSGFzaE1hcChwYWRkaW5nLCBiYXNlUGxhY2VtZW50cykpXG4gIH07XG59IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICdhcnJvdycsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIHBoYXNlOiAnbWFpbicsXG4gIGZuOiBhcnJvdyxcbiAgZWZmZWN0OiBlZmZlY3QsXG4gIHJlcXVpcmVzOiBbJ3BvcHBlck9mZnNldHMnXSxcbiAgcmVxdWlyZXNJZkV4aXN0czogWydwcmV2ZW50T3ZlcmZsb3cnXVxufTsiLCJmdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuXG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTtcbiAgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7XG4gIHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG59XG5cbmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7XG4gIF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7XG4gICAgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTtcbiAgfTtcbiAgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTtcbn1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtcbiAgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gICAgby5fX3Byb3RvX18gPSBwO1xuICAgIHJldHVybiBvO1xuICB9O1xuXG4gIHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7XG59XG5cbmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7XG4gIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTtcbiAgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTtcbiAgaWYgKHR5cGVvZiBQcm94eSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gdHJ1ZTtcblxuICB0cnkge1xuICAgIERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoRGF0ZSwgW10sIGZ1bmN0aW9uICgpIHt9KSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gX2NvbnN0cnVjdChQYXJlbnQsIGFyZ3MsIENsYXNzKSB7XG4gIGlmIChfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkpIHtcbiAgICBfY29uc3RydWN0ID0gUmVmbGVjdC5jb25zdHJ1Y3Q7XG4gIH0gZWxzZSB7XG4gICAgX2NvbnN0cnVjdCA9IGZ1bmN0aW9uIF9jb25zdHJ1Y3QoUGFyZW50LCBhcmdzLCBDbGFzcykge1xuICAgICAgdmFyIGEgPSBbbnVsbF07XG4gICAgICBhLnB1c2guYXBwbHkoYSwgYXJncyk7XG4gICAgICB2YXIgQ29uc3RydWN0b3IgPSBGdW5jdGlvbi5iaW5kLmFwcGx5KFBhcmVudCwgYSk7XG4gICAgICB2YXIgaW5zdGFuY2UgPSBuZXcgQ29uc3RydWN0b3IoKTtcbiAgICAgIGlmIChDbGFzcykgX3NldFByb3RvdHlwZU9mKGluc3RhbmNlLCBDbGFzcy5wcm90b3R5cGUpO1xuICAgICAgcmV0dXJuIGluc3RhbmNlO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gX2NvbnN0cnVjdC5hcHBseShudWxsLCBhcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBfaXNOYXRpdmVGdW5jdGlvbihmbikge1xuICByZXR1cm4gRnVuY3Rpb24udG9TdHJpbmcuY2FsbChmbikuaW5kZXhPZihcIltuYXRpdmUgY29kZV1cIikgIT09IC0xO1xufVxuXG5mdW5jdGlvbiBfd3JhcE5hdGl2ZVN1cGVyKENsYXNzKSB7XG4gIHZhciBfY2FjaGUgPSB0eXBlb2YgTWFwID09PSBcImZ1bmN0aW9uXCIgPyBuZXcgTWFwKCkgOiB1bmRlZmluZWQ7XG5cbiAgX3dyYXBOYXRpdmVTdXBlciA9IGZ1bmN0aW9uIF93cmFwTmF0aXZlU3VwZXIoQ2xhc3MpIHtcbiAgICBpZiAoQ2xhc3MgPT09IG51bGwgfHwgIV9pc05hdGl2ZUZ1bmN0aW9uKENsYXNzKSkgcmV0dXJuIENsYXNzO1xuXG4gICAgaWYgKHR5cGVvZiBDbGFzcyAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBfY2FjaGUgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIGlmIChfY2FjaGUuaGFzKENsYXNzKSkgcmV0dXJuIF9jYWNoZS5nZXQoQ2xhc3MpO1xuXG4gICAgICBfY2FjaGUuc2V0KENsYXNzLCBXcmFwcGVyKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBXcmFwcGVyKCkge1xuICAgICAgcmV0dXJuIF9jb25zdHJ1Y3QoQ2xhc3MsIGFyZ3VtZW50cywgX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yKTtcbiAgICB9XG5cbiAgICBXcmFwcGVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoQ2xhc3MucHJvdG90eXBlLCB7XG4gICAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgICB2YWx1ZTogV3JhcHBlcixcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gX3NldFByb3RvdHlwZU9mKFdyYXBwZXIsIENsYXNzKTtcbiAgfTtcblxuICByZXR1cm4gX3dyYXBOYXRpdmVTdXBlcihDbGFzcyk7XG59XG5cbi8qIGVzbGludCBuby1jb25zb2xlOjAgKi9cbnZhciBmb3JtYXRSZWdFeHAgPSAvJVtzZGolXS9nO1xudmFyIHdhcm5pbmcgPSBmdW5jdGlvbiB3YXJuaW5nKCkge307IC8vIGRvbid0IHByaW50IHdhcm5pbmcgbWVzc2FnZSB3aGVuIGluIHByb2R1Y3Rpb24gZW52IG9yIG5vZGUgcnVudGltZVxuXG5pZiAodHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIHByb2Nlc3MuZW52ICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJykge1xuICB3YXJuaW5nID0gZnVuY3Rpb24gd2FybmluZyh0eXBlLCBlcnJvcnMpIHtcbiAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmIGNvbnNvbGUud2Fybikge1xuICAgICAgaWYgKGVycm9ycy5ldmVyeShmdW5jdGlvbiAoZSkge1xuICAgICAgICByZXR1cm4gdHlwZW9mIGUgPT09ICdzdHJpbmcnO1xuICAgICAgfSkpIHtcbiAgICAgICAgY29uc29sZS53YXJuKHR5cGUsIGVycm9ycyk7XG4gICAgICB9XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBjb252ZXJ0RmllbGRzRXJyb3IoZXJyb3JzKSB7XG4gIGlmICghZXJyb3JzIHx8ICFlcnJvcnMubGVuZ3RoKSByZXR1cm4gbnVsbDtcbiAgdmFyIGZpZWxkcyA9IHt9O1xuICBlcnJvcnMuZm9yRWFjaChmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICB2YXIgZmllbGQgPSBlcnJvci5maWVsZDtcbiAgICBmaWVsZHNbZmllbGRdID0gZmllbGRzW2ZpZWxkXSB8fCBbXTtcbiAgICBmaWVsZHNbZmllbGRdLnB1c2goZXJyb3IpO1xuICB9KTtcbiAgcmV0dXJuIGZpZWxkcztcbn1cbmZ1bmN0aW9uIGZvcm1hdCgpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHZhciBpID0gMTtcbiAgdmFyIGYgPSBhcmdzWzBdO1xuICB2YXIgbGVuID0gYXJncy5sZW5ndGg7XG5cbiAgaWYgKHR5cGVvZiBmID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGYuYXBwbHkobnVsbCwgYXJncy5zbGljZSgxKSk7XG4gIH1cblxuICBpZiAodHlwZW9mIGYgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFyIHN0ciA9IFN0cmluZyhmKS5yZXBsYWNlKGZvcm1hdFJlZ0V4cCwgZnVuY3Rpb24gKHgpIHtcbiAgICAgIGlmICh4ID09PSAnJSUnKSB7XG4gICAgICAgIHJldHVybiAnJSc7XG4gICAgICB9XG5cbiAgICAgIGlmIChpID49IGxlbikge1xuICAgICAgICByZXR1cm4geDtcbiAgICAgIH1cblxuICAgICAgc3dpdGNoICh4KSB7XG4gICAgICAgIGNhc2UgJyVzJzpcbiAgICAgICAgICByZXR1cm4gU3RyaW5nKGFyZ3NbaSsrXSk7XG5cbiAgICAgICAgY2FzZSAnJWQnOlxuICAgICAgICAgIHJldHVybiBOdW1iZXIoYXJnc1tpKytdKTtcblxuICAgICAgICBjYXNlICclaic6XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShhcmdzW2krK10pO1xuICAgICAgICAgIH0gY2F0Y2ggKF8pIHtcbiAgICAgICAgICAgIHJldHVybiAnW0NpcmN1bGFyXSc7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4geDtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gc3RyO1xuICB9XG5cbiAgcmV0dXJuIGY7XG59XG5cbmZ1bmN0aW9uIGlzTmF0aXZlU3RyaW5nVHlwZSh0eXBlKSB7XG4gIHJldHVybiB0eXBlID09PSAnc3RyaW5nJyB8fCB0eXBlID09PSAndXJsJyB8fCB0eXBlID09PSAnaGV4JyB8fCB0eXBlID09PSAnZW1haWwnIHx8IHR5cGUgPT09ICdkYXRlJyB8fCB0eXBlID09PSAncGF0dGVybic7XG59XG5cbmZ1bmN0aW9uIGlzRW1wdHlWYWx1ZSh2YWx1ZSwgdHlwZSkge1xuICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCB8fCB2YWx1ZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKHR5cGUgPT09ICdhcnJheScgJiYgQXJyYXkuaXNBcnJheSh2YWx1ZSkgJiYgIXZhbHVlLmxlbmd0aCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKGlzTmF0aXZlU3RyaW5nVHlwZSh0eXBlKSAmJiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmICF2YWx1ZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBhc3luY1BhcmFsbGVsQXJyYXkoYXJyLCBmdW5jLCBjYWxsYmFjaykge1xuICB2YXIgcmVzdWx0cyA9IFtdO1xuICB2YXIgdG90YWwgPSAwO1xuICB2YXIgYXJyTGVuZ3RoID0gYXJyLmxlbmd0aDtcblxuICBmdW5jdGlvbiBjb3VudChlcnJvcnMpIHtcbiAgICByZXN1bHRzLnB1c2guYXBwbHkocmVzdWx0cywgZXJyb3JzKTtcbiAgICB0b3RhbCsrO1xuXG4gICAgaWYgKHRvdGFsID09PSBhcnJMZW5ndGgpIHtcbiAgICAgIGNhbGxiYWNrKHJlc3VsdHMpO1xuICAgIH1cbiAgfVxuXG4gIGFyci5mb3JFYWNoKGZ1bmN0aW9uIChhKSB7XG4gICAgZnVuYyhhLCBjb3VudCk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBhc3luY1NlcmlhbEFycmF5KGFyciwgZnVuYywgY2FsbGJhY2spIHtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGFyckxlbmd0aCA9IGFyci5sZW5ndGg7XG5cbiAgZnVuY3Rpb24gbmV4dChlcnJvcnMpIHtcbiAgICBpZiAoZXJyb3JzICYmIGVycm9ycy5sZW5ndGgpIHtcbiAgICAgIGNhbGxiYWNrKGVycm9ycyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIG9yaWdpbmFsID0gaW5kZXg7XG4gICAgaW5kZXggPSBpbmRleCArIDE7XG5cbiAgICBpZiAob3JpZ2luYWwgPCBhcnJMZW5ndGgpIHtcbiAgICAgIGZ1bmMoYXJyW29yaWdpbmFsXSwgbmV4dCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhbGxiYWNrKFtdKTtcbiAgICB9XG4gIH1cblxuICBuZXh0KFtdKTtcbn1cblxuZnVuY3Rpb24gZmxhdHRlbk9iakFycihvYmpBcnIpIHtcbiAgdmFyIHJldCA9IFtdO1xuICBPYmplY3Qua2V5cyhvYmpBcnIpLmZvckVhY2goZnVuY3Rpb24gKGspIHtcbiAgICByZXQucHVzaC5hcHBseShyZXQsIG9iakFycltrXSk7XG4gIH0pO1xuICByZXR1cm4gcmV0O1xufVxuXG52YXIgQXN5bmNWYWxpZGF0aW9uRXJyb3IgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9FcnJvcikge1xuICBfaW5oZXJpdHNMb29zZShBc3luY1ZhbGlkYXRpb25FcnJvciwgX0Vycm9yKTtcblxuICBmdW5jdGlvbiBBc3luY1ZhbGlkYXRpb25FcnJvcihlcnJvcnMsIGZpZWxkcykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX0Vycm9yLmNhbGwodGhpcywgJ0FzeW5jIFZhbGlkYXRpb24gRXJyb3InKSB8fCB0aGlzO1xuICAgIF90aGlzLmVycm9ycyA9IGVycm9ycztcbiAgICBfdGhpcy5maWVsZHMgPSBmaWVsZHM7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgcmV0dXJuIEFzeW5jVmFsaWRhdGlvbkVycm9yO1xufSggLyojX19QVVJFX18qL193cmFwTmF0aXZlU3VwZXIoRXJyb3IpKTtcbmZ1bmN0aW9uIGFzeW5jTWFwKG9iakFyciwgb3B0aW9uLCBmdW5jLCBjYWxsYmFjaykge1xuICBpZiAob3B0aW9uLmZpcnN0KSB7XG4gICAgdmFyIF9wZW5kaW5nID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIG5leHQgPSBmdW5jdGlvbiBuZXh0KGVycm9ycykge1xuICAgICAgICBjYWxsYmFjayhlcnJvcnMpO1xuICAgICAgICByZXR1cm4gZXJyb3JzLmxlbmd0aCA/IHJlamVjdChuZXcgQXN5bmNWYWxpZGF0aW9uRXJyb3IoZXJyb3JzLCBjb252ZXJ0RmllbGRzRXJyb3IoZXJyb3JzKSkpIDogcmVzb2x2ZSgpO1xuICAgICAgfTtcblxuICAgICAgdmFyIGZsYXR0ZW5BcnIgPSBmbGF0dGVuT2JqQXJyKG9iakFycik7XG4gICAgICBhc3luY1NlcmlhbEFycmF5KGZsYXR0ZW5BcnIsIGZ1bmMsIG5leHQpO1xuICAgIH0pO1xuXG4gICAgX3BlbmRpbmdbXCJjYXRjaFwiXShmdW5jdGlvbiAoZSkge1xuICAgICAgcmV0dXJuIGU7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gX3BlbmRpbmc7XG4gIH1cblxuICB2YXIgZmlyc3RGaWVsZHMgPSBvcHRpb24uZmlyc3RGaWVsZHMgfHwgW107XG5cbiAgaWYgKGZpcnN0RmllbGRzID09PSB0cnVlKSB7XG4gICAgZmlyc3RGaWVsZHMgPSBPYmplY3Qua2V5cyhvYmpBcnIpO1xuICB9XG5cbiAgdmFyIG9iakFycktleXMgPSBPYmplY3Qua2V5cyhvYmpBcnIpO1xuICB2YXIgb2JqQXJyTGVuZ3RoID0gb2JqQXJyS2V5cy5sZW5ndGg7XG4gIHZhciB0b3RhbCA9IDA7XG4gIHZhciByZXN1bHRzID0gW107XG4gIHZhciBwZW5kaW5nID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgIHZhciBuZXh0ID0gZnVuY3Rpb24gbmV4dChlcnJvcnMpIHtcbiAgICAgIHJlc3VsdHMucHVzaC5hcHBseShyZXN1bHRzLCBlcnJvcnMpO1xuICAgICAgdG90YWwrKztcblxuICAgICAgaWYgKHRvdGFsID09PSBvYmpBcnJMZW5ndGgpIHtcbiAgICAgICAgY2FsbGJhY2socmVzdWx0cyk7XG4gICAgICAgIHJldHVybiByZXN1bHRzLmxlbmd0aCA/IHJlamVjdChuZXcgQXN5bmNWYWxpZGF0aW9uRXJyb3IocmVzdWx0cywgY29udmVydEZpZWxkc0Vycm9yKHJlc3VsdHMpKSkgOiByZXNvbHZlKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGlmICghb2JqQXJyS2V5cy5sZW5ndGgpIHtcbiAgICAgIGNhbGxiYWNrKHJlc3VsdHMpO1xuICAgICAgcmVzb2x2ZSgpO1xuICAgIH1cblxuICAgIG9iakFycktleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICB2YXIgYXJyID0gb2JqQXJyW2tleV07XG5cbiAgICAgIGlmIChmaXJzdEZpZWxkcy5pbmRleE9mKGtleSkgIT09IC0xKSB7XG4gICAgICAgIGFzeW5jU2VyaWFsQXJyYXkoYXJyLCBmdW5jLCBuZXh0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFzeW5jUGFyYWxsZWxBcnJheShhcnIsIGZ1bmMsIG5leHQpO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbiAgcGVuZGluZ1tcImNhdGNoXCJdKGZ1bmN0aW9uIChlKSB7XG4gICAgcmV0dXJuIGU7XG4gIH0pO1xuICByZXR1cm4gcGVuZGluZztcbn1cbmZ1bmN0aW9uIGNvbXBsZW1lbnRFcnJvcihydWxlKSB7XG4gIHJldHVybiBmdW5jdGlvbiAob2UpIHtcbiAgICBpZiAob2UgJiYgb2UubWVzc2FnZSkge1xuICAgICAgb2UuZmllbGQgPSBvZS5maWVsZCB8fCBydWxlLmZ1bGxGaWVsZDtcbiAgICAgIHJldHVybiBvZTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgbWVzc2FnZTogdHlwZW9mIG9lID09PSAnZnVuY3Rpb24nID8gb2UoKSA6IG9lLFxuICAgICAgZmllbGQ6IG9lLmZpZWxkIHx8IHJ1bGUuZnVsbEZpZWxkXG4gICAgfTtcbiAgfTtcbn1cbmZ1bmN0aW9uIGRlZXBNZXJnZSh0YXJnZXQsIHNvdXJjZSkge1xuICBpZiAoc291cmNlKSB7XG4gICAgZm9yICh2YXIgcyBpbiBzb3VyY2UpIHtcbiAgICAgIGlmIChzb3VyY2UuaGFzT3duUHJvcGVydHkocykpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gc291cmNlW3NdO1xuXG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHR5cGVvZiB0YXJnZXRbc10gPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgdGFyZ2V0W3NdID0gX2V4dGVuZHMoX2V4dGVuZHMoe30sIHRhcmdldFtzXSksIHZhbHVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0YXJnZXRbc10gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbi8qKlxuICogIFJ1bGUgZm9yIHZhbGlkYXRpbmcgcmVxdWlyZWQgZmllbGRzLlxuICpcbiAqICBAcGFyYW0gcnVsZSBUaGUgdmFsaWRhdGlvbiBydWxlLlxuICogIEBwYXJhbSB2YWx1ZSBUaGUgdmFsdWUgb2YgdGhlIGZpZWxkIG9uIHRoZSBzb3VyY2Ugb2JqZWN0LlxuICogIEBwYXJhbSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QgYmVpbmcgdmFsaWRhdGVkLlxuICogIEBwYXJhbSBlcnJvcnMgQW4gYXJyYXkgb2YgZXJyb3JzIHRoYXQgdGhpcyBydWxlIG1heSBhZGRcbiAqICB2YWxpZGF0aW9uIGVycm9ycyB0by5cbiAqICBAcGFyYW0gb3B0aW9ucyBUaGUgdmFsaWRhdGlvbiBvcHRpb25zLlxuICogIEBwYXJhbSBvcHRpb25zLm1lc3NhZ2VzIFRoZSB2YWxpZGF0aW9uIG1lc3NhZ2VzLlxuICovXG5cbmZ1bmN0aW9uIHJlcXVpcmVkKHJ1bGUsIHZhbHVlLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucywgdHlwZSkge1xuICBpZiAocnVsZS5yZXF1aXJlZCAmJiAoIXNvdXJjZS5oYXNPd25Qcm9wZXJ0eShydWxlLmZpZWxkKSB8fCBpc0VtcHR5VmFsdWUodmFsdWUsIHR5cGUgfHwgcnVsZS50eXBlKSkpIHtcbiAgICBlcnJvcnMucHVzaChmb3JtYXQob3B0aW9ucy5tZXNzYWdlcy5yZXF1aXJlZCwgcnVsZS5mdWxsRmllbGQpKTtcbiAgfVxufVxuXG4vKipcbiAqICBSdWxlIGZvciB2YWxpZGF0aW5nIHdoaXRlc3BhY2UuXG4gKlxuICogIEBwYXJhbSBydWxlIFRoZSB2YWxpZGF0aW9uIHJ1bGUuXG4gKiAgQHBhcmFtIHZhbHVlIFRoZSB2YWx1ZSBvZiB0aGUgZmllbGQgb24gdGhlIHNvdXJjZSBvYmplY3QuXG4gKiAgQHBhcmFtIHNvdXJjZSBUaGUgc291cmNlIG9iamVjdCBiZWluZyB2YWxpZGF0ZWQuXG4gKiAgQHBhcmFtIGVycm9ycyBBbiBhcnJheSBvZiBlcnJvcnMgdGhhdCB0aGlzIHJ1bGUgbWF5IGFkZFxuICogIHZhbGlkYXRpb24gZXJyb3JzIHRvLlxuICogIEBwYXJhbSBvcHRpb25zIFRoZSB2YWxpZGF0aW9uIG9wdGlvbnMuXG4gKiAgQHBhcmFtIG9wdGlvbnMubWVzc2FnZXMgVGhlIHZhbGlkYXRpb24gbWVzc2FnZXMuXG4gKi9cblxuZnVuY3Rpb24gd2hpdGVzcGFjZShydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMpIHtcbiAgaWYgKC9eXFxzKyQvLnRlc3QodmFsdWUpIHx8IHZhbHVlID09PSAnJykge1xuICAgIGVycm9ycy5wdXNoKGZvcm1hdChvcHRpb25zLm1lc3NhZ2VzLndoaXRlc3BhY2UsIHJ1bGUuZnVsbEZpZWxkKSk7XG4gIH1cbn1cblxuLyogZXNsaW50IG1heC1sZW46MCAqL1xuXG52YXIgcGF0dGVybiA9IHtcbiAgLy8gaHR0cDovL2VtYWlscmVnZXguY29tL1xuICBlbWFpbDogL14oKFtePD4oKVxcW1xcXVxcXFwuLDs6XFxzQFwiXSsoXFwuW148PigpXFxbXFxdXFxcXC4sOzpcXHNAXCJdKykqKXwoXCIuK1wiKSlAKChcXFtbMC05XXsxLDN9XFwuWzAtOV17MSwzfVxcLlswLTldezEsM31cXC5bMC05XXsxLDN9XSl8KChbYS16QS1aXFwtMC05XStcXC4pK1thLXpBLVpdezIsfSkpJC8sXG4gIHVybDogbmV3IFJlZ0V4cChcIl4oPyFtYWlsdG86KSg/Oig/Omh0dHB8aHR0cHN8ZnRwKTovL3wvLykoPzpcXFxcUysoPzo6XFxcXFMqKT9AKT8oPzooPzooPzpbMS05XVxcXFxkP3wxXFxcXGRcXFxcZHwyWzAxXVxcXFxkfDIyWzAtM10pKD86XFxcXC4oPzoxP1xcXFxkezEsMn18MlswLTRdXFxcXGR8MjVbMC01XSkpezJ9KD86XFxcXC4oPzpbMC05XVxcXFxkP3wxXFxcXGRcXFxcZHwyWzAtNF1cXFxcZHwyNVswLTRdKSl8KD86KD86W2EtelxcXFx1MDBhMS1cXFxcdWZmZmYwLTldKy0qKSpbYS16XFxcXHUwMGExLVxcXFx1ZmZmZjAtOV0rKSg/OlxcXFwuKD86W2EtelxcXFx1MDBhMS1cXFxcdWZmZmYwLTldKy0qKSpbYS16XFxcXHUwMGExLVxcXFx1ZmZmZjAtOV0rKSooPzpcXFxcLig/OlthLXpcXFxcdTAwYTEtXFxcXHVmZmZmXXsyLH0pKSl8bG9jYWxob3N0KSg/OjpcXFxcZHsyLDV9KT8oPzooL3xcXFxcP3wjKVteXFxcXHNdKik/JFwiLCAnaScpLFxuICBoZXg6IC9eIz8oW2EtZjAtOV17Nn18W2EtZjAtOV17M30pJC9pXG59O1xudmFyIHR5cGVzID0ge1xuICBpbnRlZ2VyOiBmdW5jdGlvbiBpbnRlZ2VyKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVzLm51bWJlcih2YWx1ZSkgJiYgcGFyc2VJbnQodmFsdWUsIDEwKSA9PT0gdmFsdWU7XG4gIH0sXG4gIFwiZmxvYXRcIjogZnVuY3Rpb24gZmxvYXQodmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZXMubnVtYmVyKHZhbHVlKSAmJiAhdHlwZXMuaW50ZWdlcih2YWx1ZSk7XG4gIH0sXG4gIGFycmF5OiBmdW5jdGlvbiBhcnJheSh2YWx1ZSkge1xuICAgIHJldHVybiBBcnJheS5pc0FycmF5KHZhbHVlKTtcbiAgfSxcbiAgcmVnZXhwOiBmdW5jdGlvbiByZWdleHAodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICByZXR1cm4gISFuZXcgUmVnRXhwKHZhbHVlKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9LFxuICBkYXRlOiBmdW5jdGlvbiBkYXRlKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZS5nZXRUaW1lID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiB2YWx1ZS5nZXRNb250aCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgdmFsdWUuZ2V0WWVhciA9PT0gJ2Z1bmN0aW9uJyAmJiAhaXNOYU4odmFsdWUuZ2V0VGltZSgpKTtcbiAgfSxcbiAgbnVtYmVyOiBmdW5jdGlvbiBudW1iZXIodmFsdWUpIHtcbiAgICBpZiAoaXNOYU4odmFsdWUpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcic7XG4gIH0sXG4gIG9iamVjdDogZnVuY3Rpb24gb2JqZWN0KHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgIXR5cGVzLmFycmF5KHZhbHVlKTtcbiAgfSxcbiAgbWV0aG9kOiBmdW5jdGlvbiBtZXRob2QodmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nO1xuICB9LFxuICBlbWFpbDogZnVuY3Rpb24gZW1haWwodmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiAhIXZhbHVlLm1hdGNoKHBhdHRlcm4uZW1haWwpICYmIHZhbHVlLmxlbmd0aCA8IDI1NTtcbiAgfSxcbiAgdXJsOiBmdW5jdGlvbiB1cmwodmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiAhIXZhbHVlLm1hdGNoKHBhdHRlcm4udXJsKTtcbiAgfSxcbiAgaGV4OiBmdW5jdGlvbiBoZXgodmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiAhIXZhbHVlLm1hdGNoKHBhdHRlcm4uaGV4KTtcbiAgfVxufTtcbi8qKlxuICogIFJ1bGUgZm9yIHZhbGlkYXRpbmcgdGhlIHR5cGUgb2YgYSB2YWx1ZS5cbiAqXG4gKiAgQHBhcmFtIHJ1bGUgVGhlIHZhbGlkYXRpb24gcnVsZS5cbiAqICBAcGFyYW0gdmFsdWUgVGhlIHZhbHVlIG9mIHRoZSBmaWVsZCBvbiB0aGUgc291cmNlIG9iamVjdC5cbiAqICBAcGFyYW0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0IGJlaW5nIHZhbGlkYXRlZC5cbiAqICBAcGFyYW0gZXJyb3JzIEFuIGFycmF5IG9mIGVycm9ycyB0aGF0IHRoaXMgcnVsZSBtYXkgYWRkXG4gKiAgdmFsaWRhdGlvbiBlcnJvcnMgdG8uXG4gKiAgQHBhcmFtIG9wdGlvbnMgVGhlIHZhbGlkYXRpb24gb3B0aW9ucy5cbiAqICBAcGFyYW0gb3B0aW9ucy5tZXNzYWdlcyBUaGUgdmFsaWRhdGlvbiBtZXNzYWdlcy5cbiAqL1xuXG5mdW5jdGlvbiB0eXBlKHJ1bGUsIHZhbHVlLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucykge1xuICBpZiAocnVsZS5yZXF1aXJlZCAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmVxdWlyZWQocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zKTtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgY3VzdG9tID0gWydpbnRlZ2VyJywgJ2Zsb2F0JywgJ2FycmF5JywgJ3JlZ2V4cCcsICdvYmplY3QnLCAnbWV0aG9kJywgJ2VtYWlsJywgJ251bWJlcicsICdkYXRlJywgJ3VybCcsICdoZXgnXTtcbiAgdmFyIHJ1bGVUeXBlID0gcnVsZS50eXBlO1xuXG4gIGlmIChjdXN0b20uaW5kZXhPZihydWxlVHlwZSkgPiAtMSkge1xuICAgIGlmICghdHlwZXNbcnVsZVR5cGVdKHZhbHVlKSkge1xuICAgICAgZXJyb3JzLnB1c2goZm9ybWF0KG9wdGlvbnMubWVzc2FnZXMudHlwZXNbcnVsZVR5cGVdLCBydWxlLmZ1bGxGaWVsZCwgcnVsZS50eXBlKSk7XG4gICAgfSAvLyBzdHJhaWdodCB0eXBlb2YgY2hlY2tcblxuICB9IGVsc2UgaWYgKHJ1bGVUeXBlICYmIHR5cGVvZiB2YWx1ZSAhPT0gcnVsZS50eXBlKSB7XG4gICAgZXJyb3JzLnB1c2goZm9ybWF0KG9wdGlvbnMubWVzc2FnZXMudHlwZXNbcnVsZVR5cGVdLCBydWxlLmZ1bGxGaWVsZCwgcnVsZS50eXBlKSk7XG4gIH1cbn1cblxuLyoqXG4gKiAgUnVsZSBmb3IgdmFsaWRhdGluZyBtaW5pbXVtIGFuZCBtYXhpbXVtIGFsbG93ZWQgdmFsdWVzLlxuICpcbiAqICBAcGFyYW0gcnVsZSBUaGUgdmFsaWRhdGlvbiBydWxlLlxuICogIEBwYXJhbSB2YWx1ZSBUaGUgdmFsdWUgb2YgdGhlIGZpZWxkIG9uIHRoZSBzb3VyY2Ugb2JqZWN0LlxuICogIEBwYXJhbSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QgYmVpbmcgdmFsaWRhdGVkLlxuICogIEBwYXJhbSBlcnJvcnMgQW4gYXJyYXkgb2YgZXJyb3JzIHRoYXQgdGhpcyBydWxlIG1heSBhZGRcbiAqICB2YWxpZGF0aW9uIGVycm9ycyB0by5cbiAqICBAcGFyYW0gb3B0aW9ucyBUaGUgdmFsaWRhdGlvbiBvcHRpb25zLlxuICogIEBwYXJhbSBvcHRpb25zLm1lc3NhZ2VzIFRoZSB2YWxpZGF0aW9uIG1lc3NhZ2VzLlxuICovXG5cbmZ1bmN0aW9uIHJhbmdlKHJ1bGUsIHZhbHVlLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucykge1xuICB2YXIgbGVuID0gdHlwZW9mIHJ1bGUubGVuID09PSAnbnVtYmVyJztcbiAgdmFyIG1pbiA9IHR5cGVvZiBydWxlLm1pbiA9PT0gJ251bWJlcic7XG4gIHZhciBtYXggPSB0eXBlb2YgcnVsZS5tYXggPT09ICdudW1iZXInOyAvLyDmraPliJnljLnphY3noIHngrnojIPlm7Tku45VKzAxMDAwMOS4gOebtOWIsFUrMTBGRkZG55qE5paH5a2X77yI6KGl5YWF5bmz6Z2iU3VwcGxlbWVudGFyeSBQbGFuZe+8iVxuXG4gIHZhciBzcFJlZ2V4cCA9IC9bXFx1RDgwMC1cXHVEQkZGXVtcXHVEQzAwLVxcdURGRkZdL2c7XG4gIHZhciB2YWwgPSB2YWx1ZTtcbiAgdmFyIGtleSA9IG51bGw7XG4gIHZhciBudW0gPSB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInO1xuICB2YXIgc3RyID0gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJztcbiAgdmFyIGFyciA9IEFycmF5LmlzQXJyYXkodmFsdWUpO1xuXG4gIGlmIChudW0pIHtcbiAgICBrZXkgPSAnbnVtYmVyJztcbiAgfSBlbHNlIGlmIChzdHIpIHtcbiAgICBrZXkgPSAnc3RyaW5nJztcbiAgfSBlbHNlIGlmIChhcnIpIHtcbiAgICBrZXkgPSAnYXJyYXknO1xuICB9IC8vIGlmIHRoZSB2YWx1ZSBpcyBub3Qgb2YgYSBzdXBwb3J0ZWQgdHlwZSBmb3IgcmFuZ2UgdmFsaWRhdGlvblxuICAvLyB0aGUgdmFsaWRhdGlvbiBydWxlIHJ1bGUgc2hvdWxkIHVzZSB0aGVcbiAgLy8gdHlwZSBwcm9wZXJ0eSB0byBhbHNvIHRlc3QgZm9yIGEgcGFydGljdWxhciB0eXBlXG5cblxuICBpZiAoIWtleSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmIChhcnIpIHtcbiAgICB2YWwgPSB2YWx1ZS5sZW5ndGg7XG4gIH1cblxuICBpZiAoc3RyKSB7XG4gICAgLy8g5aSE55CG56CB54K55aSn5LqOVSswMTAwMDDnmoTmloflrZdsZW5ndGjlsZ7mgKfkuI3lh4bnoa7nmoRidWfvvIzlpoJcIvCgrrfwoK638KCut1wiLmxlbmdodCAhPT0gM1xuICAgIHZhbCA9IHZhbHVlLnJlcGxhY2Uoc3BSZWdleHAsICdfJykubGVuZ3RoO1xuICB9XG5cbiAgaWYgKGxlbikge1xuICAgIGlmICh2YWwgIT09IHJ1bGUubGVuKSB7XG4gICAgICBlcnJvcnMucHVzaChmb3JtYXQob3B0aW9ucy5tZXNzYWdlc1trZXldLmxlbiwgcnVsZS5mdWxsRmllbGQsIHJ1bGUubGVuKSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKG1pbiAmJiAhbWF4ICYmIHZhbCA8IHJ1bGUubWluKSB7XG4gICAgZXJyb3JzLnB1c2goZm9ybWF0KG9wdGlvbnMubWVzc2FnZXNba2V5XS5taW4sIHJ1bGUuZnVsbEZpZWxkLCBydWxlLm1pbikpO1xuICB9IGVsc2UgaWYgKG1heCAmJiAhbWluICYmIHZhbCA+IHJ1bGUubWF4KSB7XG4gICAgZXJyb3JzLnB1c2goZm9ybWF0KG9wdGlvbnMubWVzc2FnZXNba2V5XS5tYXgsIHJ1bGUuZnVsbEZpZWxkLCBydWxlLm1heCkpO1xuICB9IGVsc2UgaWYgKG1pbiAmJiBtYXggJiYgKHZhbCA8IHJ1bGUubWluIHx8IHZhbCA+IHJ1bGUubWF4KSkge1xuICAgIGVycm9ycy5wdXNoKGZvcm1hdChvcHRpb25zLm1lc3NhZ2VzW2tleV0ucmFuZ2UsIHJ1bGUuZnVsbEZpZWxkLCBydWxlLm1pbiwgcnVsZS5tYXgpKTtcbiAgfVxufVxuXG52YXIgRU5VTSA9ICdlbnVtJztcbi8qKlxuICogIFJ1bGUgZm9yIHZhbGlkYXRpbmcgYSB2YWx1ZSBleGlzdHMgaW4gYW4gZW51bWVyYWJsZSBsaXN0LlxuICpcbiAqICBAcGFyYW0gcnVsZSBUaGUgdmFsaWRhdGlvbiBydWxlLlxuICogIEBwYXJhbSB2YWx1ZSBUaGUgdmFsdWUgb2YgdGhlIGZpZWxkIG9uIHRoZSBzb3VyY2Ugb2JqZWN0LlxuICogIEBwYXJhbSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QgYmVpbmcgdmFsaWRhdGVkLlxuICogIEBwYXJhbSBlcnJvcnMgQW4gYXJyYXkgb2YgZXJyb3JzIHRoYXQgdGhpcyBydWxlIG1heSBhZGRcbiAqICB2YWxpZGF0aW9uIGVycm9ycyB0by5cbiAqICBAcGFyYW0gb3B0aW9ucyBUaGUgdmFsaWRhdGlvbiBvcHRpb25zLlxuICogIEBwYXJhbSBvcHRpb25zLm1lc3NhZ2VzIFRoZSB2YWxpZGF0aW9uIG1lc3NhZ2VzLlxuICovXG5cbmZ1bmN0aW9uIGVudW1lcmFibGUocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zKSB7XG4gIHJ1bGVbRU5VTV0gPSBBcnJheS5pc0FycmF5KHJ1bGVbRU5VTV0pID8gcnVsZVtFTlVNXSA6IFtdO1xuXG4gIGlmIChydWxlW0VOVU1dLmluZGV4T2YodmFsdWUpID09PSAtMSkge1xuICAgIGVycm9ycy5wdXNoKGZvcm1hdChvcHRpb25zLm1lc3NhZ2VzW0VOVU1dLCBydWxlLmZ1bGxGaWVsZCwgcnVsZVtFTlVNXS5qb2luKCcsICcpKSk7XG4gIH1cbn1cblxuLyoqXG4gKiAgUnVsZSBmb3IgdmFsaWRhdGluZyBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBwYXR0ZXJuLlxuICpcbiAqICBAcGFyYW0gcnVsZSBUaGUgdmFsaWRhdGlvbiBydWxlLlxuICogIEBwYXJhbSB2YWx1ZSBUaGUgdmFsdWUgb2YgdGhlIGZpZWxkIG9uIHRoZSBzb3VyY2Ugb2JqZWN0LlxuICogIEBwYXJhbSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QgYmVpbmcgdmFsaWRhdGVkLlxuICogIEBwYXJhbSBlcnJvcnMgQW4gYXJyYXkgb2YgZXJyb3JzIHRoYXQgdGhpcyBydWxlIG1heSBhZGRcbiAqICB2YWxpZGF0aW9uIGVycm9ycyB0by5cbiAqICBAcGFyYW0gb3B0aW9ucyBUaGUgdmFsaWRhdGlvbiBvcHRpb25zLlxuICogIEBwYXJhbSBvcHRpb25zLm1lc3NhZ2VzIFRoZSB2YWxpZGF0aW9uIG1lc3NhZ2VzLlxuICovXG5cbmZ1bmN0aW9uIHBhdHRlcm4kMShydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMpIHtcbiAgaWYgKHJ1bGUucGF0dGVybikge1xuICAgIGlmIChydWxlLnBhdHRlcm4gaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICAgIC8vIGlmIGEgUmVnRXhwIGluc3RhbmNlIGlzIHBhc3NlZCwgcmVzZXQgYGxhc3RJbmRleGAgaW4gY2FzZSBpdHMgYGdsb2JhbGBcbiAgICAgIC8vIGZsYWcgaXMgYWNjaWRlbnRhbGx5IHNldCB0byBgdHJ1ZWAsIHdoaWNoIGluIGEgdmFsaWRhdGlvbiBzY2VuYXJpb1xuICAgICAgLy8gaXMgbm90IG5lY2Vzc2FyeSBhbmQgdGhlIHJlc3VsdCBtaWdodCBiZSBtaXNsZWFkaW5nXG4gICAgICBydWxlLnBhdHRlcm4ubGFzdEluZGV4ID0gMDtcblxuICAgICAgaWYgKCFydWxlLnBhdHRlcm4udGVzdCh2YWx1ZSkpIHtcbiAgICAgICAgZXJyb3JzLnB1c2goZm9ybWF0KG9wdGlvbnMubWVzc2FnZXMucGF0dGVybi5taXNtYXRjaCwgcnVsZS5mdWxsRmllbGQsIHZhbHVlLCBydWxlLnBhdHRlcm4pKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBydWxlLnBhdHRlcm4gPT09ICdzdHJpbmcnKSB7XG4gICAgICB2YXIgX3BhdHRlcm4gPSBuZXcgUmVnRXhwKHJ1bGUucGF0dGVybik7XG5cbiAgICAgIGlmICghX3BhdHRlcm4udGVzdCh2YWx1ZSkpIHtcbiAgICAgICAgZXJyb3JzLnB1c2goZm9ybWF0KG9wdGlvbnMubWVzc2FnZXMucGF0dGVybi5taXNtYXRjaCwgcnVsZS5mdWxsRmllbGQsIHZhbHVlLCBydWxlLnBhdHRlcm4pKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxudmFyIHJ1bGVzID0ge1xuICByZXF1aXJlZDogcmVxdWlyZWQsXG4gIHdoaXRlc3BhY2U6IHdoaXRlc3BhY2UsXG4gIHR5cGU6IHR5cGUsXG4gIHJhbmdlOiByYW5nZSxcbiAgXCJlbnVtXCI6IGVudW1lcmFibGUsXG4gIHBhdHRlcm46IHBhdHRlcm4kMVxufTtcblxuLyoqXG4gKiAgUGVyZm9ybXMgdmFsaWRhdGlvbiBmb3Igc3RyaW5nIHR5cGVzLlxuICpcbiAqICBAcGFyYW0gcnVsZSBUaGUgdmFsaWRhdGlvbiBydWxlLlxuICogIEBwYXJhbSB2YWx1ZSBUaGUgdmFsdWUgb2YgdGhlIGZpZWxkIG9uIHRoZSBzb3VyY2Ugb2JqZWN0LlxuICogIEBwYXJhbSBjYWxsYmFjayBUaGUgY2FsbGJhY2sgZnVuY3Rpb24uXG4gKiAgQHBhcmFtIHNvdXJjZSBUaGUgc291cmNlIG9iamVjdCBiZWluZyB2YWxpZGF0ZWQuXG4gKiAgQHBhcmFtIG9wdGlvbnMgVGhlIHZhbGlkYXRpb24gb3B0aW9ucy5cbiAqICBAcGFyYW0gb3B0aW9ucy5tZXNzYWdlcyBUaGUgdmFsaWRhdGlvbiBtZXNzYWdlcy5cbiAqL1xuXG5mdW5jdGlvbiBzdHJpbmcocnVsZSwgdmFsdWUsIGNhbGxiYWNrLCBzb3VyY2UsIG9wdGlvbnMpIHtcbiAgdmFyIGVycm9ycyA9IFtdO1xuICB2YXIgdmFsaWRhdGUgPSBydWxlLnJlcXVpcmVkIHx8ICFydWxlLnJlcXVpcmVkICYmIHNvdXJjZS5oYXNPd25Qcm9wZXJ0eShydWxlLmZpZWxkKTtcblxuICBpZiAodmFsaWRhdGUpIHtcbiAgICBpZiAoaXNFbXB0eVZhbHVlKHZhbHVlLCAnc3RyaW5nJykgJiYgIXJ1bGUucmVxdWlyZWQpIHtcbiAgICAgIHJldHVybiBjYWxsYmFjaygpO1xuICAgIH1cblxuICAgIHJ1bGVzLnJlcXVpcmVkKHJ1bGUsIHZhbHVlLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucywgJ3N0cmluZycpO1xuXG4gICAgaWYgKCFpc0VtcHR5VmFsdWUodmFsdWUsICdzdHJpbmcnKSkge1xuICAgICAgcnVsZXMudHlwZShydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMpO1xuICAgICAgcnVsZXMucmFuZ2UocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zKTtcbiAgICAgIHJ1bGVzLnBhdHRlcm4ocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zKTtcblxuICAgICAgaWYgKHJ1bGUud2hpdGVzcGFjZSA9PT0gdHJ1ZSkge1xuICAgICAgICBydWxlcy53aGl0ZXNwYWNlKHJ1bGUsIHZhbHVlLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgY2FsbGJhY2soZXJyb3JzKTtcbn1cblxuLyoqXG4gKiAgVmFsaWRhdGVzIGEgZnVuY3Rpb24uXG4gKlxuICogIEBwYXJhbSBydWxlIFRoZSB2YWxpZGF0aW9uIHJ1bGUuXG4gKiAgQHBhcmFtIHZhbHVlIFRoZSB2YWx1ZSBvZiB0aGUgZmllbGQgb24gdGhlIHNvdXJjZSBvYmplY3QuXG4gKiAgQHBhcmFtIGNhbGxiYWNrIFRoZSBjYWxsYmFjayBmdW5jdGlvbi5cbiAqICBAcGFyYW0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0IGJlaW5nIHZhbGlkYXRlZC5cbiAqICBAcGFyYW0gb3B0aW9ucyBUaGUgdmFsaWRhdGlvbiBvcHRpb25zLlxuICogIEBwYXJhbSBvcHRpb25zLm1lc3NhZ2VzIFRoZSB2YWxpZGF0aW9uIG1lc3NhZ2VzLlxuICovXG5cbmZ1bmN0aW9uIG1ldGhvZChydWxlLCB2YWx1ZSwgY2FsbGJhY2ssIHNvdXJjZSwgb3B0aW9ucykge1xuICB2YXIgZXJyb3JzID0gW107XG4gIHZhciB2YWxpZGF0ZSA9IHJ1bGUucmVxdWlyZWQgfHwgIXJ1bGUucmVxdWlyZWQgJiYgc291cmNlLmhhc093blByb3BlcnR5KHJ1bGUuZmllbGQpO1xuXG4gIGlmICh2YWxpZGF0ZSkge1xuICAgIGlmIChpc0VtcHR5VmFsdWUodmFsdWUpICYmICFydWxlLnJlcXVpcmVkKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgICB9XG5cbiAgICBydWxlcy5yZXF1aXJlZChydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMpO1xuXG4gICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJ1bGVzLnR5cGUocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zKTtcbiAgICB9XG4gIH1cblxuICBjYWxsYmFjayhlcnJvcnMpO1xufVxuXG4vKipcbiAqICBWYWxpZGF0ZXMgYSBudW1iZXIuXG4gKlxuICogIEBwYXJhbSBydWxlIFRoZSB2YWxpZGF0aW9uIHJ1bGUuXG4gKiAgQHBhcmFtIHZhbHVlIFRoZSB2YWx1ZSBvZiB0aGUgZmllbGQgb24gdGhlIHNvdXJjZSBvYmplY3QuXG4gKiAgQHBhcmFtIGNhbGxiYWNrIFRoZSBjYWxsYmFjayBmdW5jdGlvbi5cbiAqICBAcGFyYW0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0IGJlaW5nIHZhbGlkYXRlZC5cbiAqICBAcGFyYW0gb3B0aW9ucyBUaGUgdmFsaWRhdGlvbiBvcHRpb25zLlxuICogIEBwYXJhbSBvcHRpb25zLm1lc3NhZ2VzIFRoZSB2YWxpZGF0aW9uIG1lc3NhZ2VzLlxuICovXG5cbmZ1bmN0aW9uIG51bWJlcihydWxlLCB2YWx1ZSwgY2FsbGJhY2ssIHNvdXJjZSwgb3B0aW9ucykge1xuICB2YXIgZXJyb3JzID0gW107XG4gIHZhciB2YWxpZGF0ZSA9IHJ1bGUucmVxdWlyZWQgfHwgIXJ1bGUucmVxdWlyZWQgJiYgc291cmNlLmhhc093blByb3BlcnR5KHJ1bGUuZmllbGQpO1xuXG4gIGlmICh2YWxpZGF0ZSkge1xuICAgIGlmICh2YWx1ZSA9PT0gJycpIHtcbiAgICAgIHZhbHVlID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGlmIChpc0VtcHR5VmFsdWUodmFsdWUpICYmICFydWxlLnJlcXVpcmVkKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgICB9XG5cbiAgICBydWxlcy5yZXF1aXJlZChydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMpO1xuXG4gICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJ1bGVzLnR5cGUocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zKTtcbiAgICAgIHJ1bGVzLnJhbmdlKHJ1bGUsIHZhbHVlLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucyk7XG4gICAgfVxuICB9XG5cbiAgY2FsbGJhY2soZXJyb3JzKTtcbn1cblxuLyoqXG4gKiAgVmFsaWRhdGVzIGEgYm9vbGVhbi5cbiAqXG4gKiAgQHBhcmFtIHJ1bGUgVGhlIHZhbGlkYXRpb24gcnVsZS5cbiAqICBAcGFyYW0gdmFsdWUgVGhlIHZhbHVlIG9mIHRoZSBmaWVsZCBvbiB0aGUgc291cmNlIG9iamVjdC5cbiAqICBAcGFyYW0gY2FsbGJhY2sgVGhlIGNhbGxiYWNrIGZ1bmN0aW9uLlxuICogIEBwYXJhbSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QgYmVpbmcgdmFsaWRhdGVkLlxuICogIEBwYXJhbSBvcHRpb25zIFRoZSB2YWxpZGF0aW9uIG9wdGlvbnMuXG4gKiAgQHBhcmFtIG9wdGlvbnMubWVzc2FnZXMgVGhlIHZhbGlkYXRpb24gbWVzc2FnZXMuXG4gKi9cblxuZnVuY3Rpb24gX2Jvb2xlYW4ocnVsZSwgdmFsdWUsIGNhbGxiYWNrLCBzb3VyY2UsIG9wdGlvbnMpIHtcbiAgdmFyIGVycm9ycyA9IFtdO1xuICB2YXIgdmFsaWRhdGUgPSBydWxlLnJlcXVpcmVkIHx8ICFydWxlLnJlcXVpcmVkICYmIHNvdXJjZS5oYXNPd25Qcm9wZXJ0eShydWxlLmZpZWxkKTtcblxuICBpZiAodmFsaWRhdGUpIHtcbiAgICBpZiAoaXNFbXB0eVZhbHVlKHZhbHVlKSAmJiAhcnVsZS5yZXF1aXJlZCkge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gICAgfVxuXG4gICAgcnVsZXMucmVxdWlyZWQocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zKTtcblxuICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBydWxlcy50eXBlKHJ1bGUsIHZhbHVlLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucyk7XG4gICAgfVxuICB9XG5cbiAgY2FsbGJhY2soZXJyb3JzKTtcbn1cblxuLyoqXG4gKiAgVmFsaWRhdGVzIHRoZSByZWd1bGFyIGV4cHJlc3Npb24gdHlwZS5cbiAqXG4gKiAgQHBhcmFtIHJ1bGUgVGhlIHZhbGlkYXRpb24gcnVsZS5cbiAqICBAcGFyYW0gdmFsdWUgVGhlIHZhbHVlIG9mIHRoZSBmaWVsZCBvbiB0aGUgc291cmNlIG9iamVjdC5cbiAqICBAcGFyYW0gY2FsbGJhY2sgVGhlIGNhbGxiYWNrIGZ1bmN0aW9uLlxuICogIEBwYXJhbSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QgYmVpbmcgdmFsaWRhdGVkLlxuICogIEBwYXJhbSBvcHRpb25zIFRoZSB2YWxpZGF0aW9uIG9wdGlvbnMuXG4gKiAgQHBhcmFtIG9wdGlvbnMubWVzc2FnZXMgVGhlIHZhbGlkYXRpb24gbWVzc2FnZXMuXG4gKi9cblxuZnVuY3Rpb24gcmVnZXhwKHJ1bGUsIHZhbHVlLCBjYWxsYmFjaywgc291cmNlLCBvcHRpb25zKSB7XG4gIHZhciBlcnJvcnMgPSBbXTtcbiAgdmFyIHZhbGlkYXRlID0gcnVsZS5yZXF1aXJlZCB8fCAhcnVsZS5yZXF1aXJlZCAmJiBzb3VyY2UuaGFzT3duUHJvcGVydHkocnVsZS5maWVsZCk7XG5cbiAgaWYgKHZhbGlkYXRlKSB7XG4gICAgaWYgKGlzRW1wdHlWYWx1ZSh2YWx1ZSkgJiYgIXJ1bGUucmVxdWlyZWQpIHtcbiAgICAgIHJldHVybiBjYWxsYmFjaygpO1xuICAgIH1cblxuICAgIHJ1bGVzLnJlcXVpcmVkKHJ1bGUsIHZhbHVlLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucyk7XG5cbiAgICBpZiAoIWlzRW1wdHlWYWx1ZSh2YWx1ZSkpIHtcbiAgICAgIHJ1bGVzLnR5cGUocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zKTtcbiAgICB9XG4gIH1cblxuICBjYWxsYmFjayhlcnJvcnMpO1xufVxuXG4vKipcbiAqICBWYWxpZGF0ZXMgYSBudW1iZXIgaXMgYW4gaW50ZWdlci5cbiAqXG4gKiAgQHBhcmFtIHJ1bGUgVGhlIHZhbGlkYXRpb24gcnVsZS5cbiAqICBAcGFyYW0gdmFsdWUgVGhlIHZhbHVlIG9mIHRoZSBmaWVsZCBvbiB0aGUgc291cmNlIG9iamVjdC5cbiAqICBAcGFyYW0gY2FsbGJhY2sgVGhlIGNhbGxiYWNrIGZ1bmN0aW9uLlxuICogIEBwYXJhbSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QgYmVpbmcgdmFsaWRhdGVkLlxuICogIEBwYXJhbSBvcHRpb25zIFRoZSB2YWxpZGF0aW9uIG9wdGlvbnMuXG4gKiAgQHBhcmFtIG9wdGlvbnMubWVzc2FnZXMgVGhlIHZhbGlkYXRpb24gbWVzc2FnZXMuXG4gKi9cblxuZnVuY3Rpb24gaW50ZWdlcihydWxlLCB2YWx1ZSwgY2FsbGJhY2ssIHNvdXJjZSwgb3B0aW9ucykge1xuICB2YXIgZXJyb3JzID0gW107XG4gIHZhciB2YWxpZGF0ZSA9IHJ1bGUucmVxdWlyZWQgfHwgIXJ1bGUucmVxdWlyZWQgJiYgc291cmNlLmhhc093blByb3BlcnR5KHJ1bGUuZmllbGQpO1xuXG4gIGlmICh2YWxpZGF0ZSkge1xuICAgIGlmIChpc0VtcHR5VmFsdWUodmFsdWUpICYmICFydWxlLnJlcXVpcmVkKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgICB9XG5cbiAgICBydWxlcy5yZXF1aXJlZChydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMpO1xuXG4gICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJ1bGVzLnR5cGUocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zKTtcbiAgICAgIHJ1bGVzLnJhbmdlKHJ1bGUsIHZhbHVlLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucyk7XG4gICAgfVxuICB9XG5cbiAgY2FsbGJhY2soZXJyb3JzKTtcbn1cblxuLyoqXG4gKiAgVmFsaWRhdGVzIGEgbnVtYmVyIGlzIGEgZmxvYXRpbmcgcG9pbnQgbnVtYmVyLlxuICpcbiAqICBAcGFyYW0gcnVsZSBUaGUgdmFsaWRhdGlvbiBydWxlLlxuICogIEBwYXJhbSB2YWx1ZSBUaGUgdmFsdWUgb2YgdGhlIGZpZWxkIG9uIHRoZSBzb3VyY2Ugb2JqZWN0LlxuICogIEBwYXJhbSBjYWxsYmFjayBUaGUgY2FsbGJhY2sgZnVuY3Rpb24uXG4gKiAgQHBhcmFtIHNvdXJjZSBUaGUgc291cmNlIG9iamVjdCBiZWluZyB2YWxpZGF0ZWQuXG4gKiAgQHBhcmFtIG9wdGlvbnMgVGhlIHZhbGlkYXRpb24gb3B0aW9ucy5cbiAqICBAcGFyYW0gb3B0aW9ucy5tZXNzYWdlcyBUaGUgdmFsaWRhdGlvbiBtZXNzYWdlcy5cbiAqL1xuXG5mdW5jdGlvbiBmbG9hdEZuKHJ1bGUsIHZhbHVlLCBjYWxsYmFjaywgc291cmNlLCBvcHRpb25zKSB7XG4gIHZhciBlcnJvcnMgPSBbXTtcbiAgdmFyIHZhbGlkYXRlID0gcnVsZS5yZXF1aXJlZCB8fCAhcnVsZS5yZXF1aXJlZCAmJiBzb3VyY2UuaGFzT3duUHJvcGVydHkocnVsZS5maWVsZCk7XG5cbiAgaWYgKHZhbGlkYXRlKSB7XG4gICAgaWYgKGlzRW1wdHlWYWx1ZSh2YWx1ZSkgJiYgIXJ1bGUucmVxdWlyZWQpIHtcbiAgICAgIHJldHVybiBjYWxsYmFjaygpO1xuICAgIH1cblxuICAgIHJ1bGVzLnJlcXVpcmVkKHJ1bGUsIHZhbHVlLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucyk7XG5cbiAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcnVsZXMudHlwZShydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMpO1xuICAgICAgcnVsZXMucmFuZ2UocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zKTtcbiAgICB9XG4gIH1cblxuICBjYWxsYmFjayhlcnJvcnMpO1xufVxuXG4vKipcbiAqICBWYWxpZGF0ZXMgYW4gYXJyYXkuXG4gKlxuICogIEBwYXJhbSBydWxlIFRoZSB2YWxpZGF0aW9uIHJ1bGUuXG4gKiAgQHBhcmFtIHZhbHVlIFRoZSB2YWx1ZSBvZiB0aGUgZmllbGQgb24gdGhlIHNvdXJjZSBvYmplY3QuXG4gKiAgQHBhcmFtIGNhbGxiYWNrIFRoZSBjYWxsYmFjayBmdW5jdGlvbi5cbiAqICBAcGFyYW0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0IGJlaW5nIHZhbGlkYXRlZC5cbiAqICBAcGFyYW0gb3B0aW9ucyBUaGUgdmFsaWRhdGlvbiBvcHRpb25zLlxuICogIEBwYXJhbSBvcHRpb25zLm1lc3NhZ2VzIFRoZSB2YWxpZGF0aW9uIG1lc3NhZ2VzLlxuICovXG5cbmZ1bmN0aW9uIGFycmF5KHJ1bGUsIHZhbHVlLCBjYWxsYmFjaywgc291cmNlLCBvcHRpb25zKSB7XG4gIHZhciBlcnJvcnMgPSBbXTtcbiAgdmFyIHZhbGlkYXRlID0gcnVsZS5yZXF1aXJlZCB8fCAhcnVsZS5yZXF1aXJlZCAmJiBzb3VyY2UuaGFzT3duUHJvcGVydHkocnVsZS5maWVsZCk7XG5cbiAgaWYgKHZhbGlkYXRlKSB7XG4gICAgaWYgKCh2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHZhbHVlID09PSBudWxsKSAmJiAhcnVsZS5yZXF1aXJlZCkge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gICAgfVxuXG4gICAgcnVsZXMucmVxdWlyZWQocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zLCAnYXJyYXknKTtcblxuICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlICE9PSBudWxsKSB7XG4gICAgICBydWxlcy50eXBlKHJ1bGUsIHZhbHVlLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucyk7XG4gICAgICBydWxlcy5yYW5nZShydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMpO1xuICAgIH1cbiAgfVxuXG4gIGNhbGxiYWNrKGVycm9ycyk7XG59XG5cbi8qKlxuICogIFZhbGlkYXRlcyBhbiBvYmplY3QuXG4gKlxuICogIEBwYXJhbSBydWxlIFRoZSB2YWxpZGF0aW9uIHJ1bGUuXG4gKiAgQHBhcmFtIHZhbHVlIFRoZSB2YWx1ZSBvZiB0aGUgZmllbGQgb24gdGhlIHNvdXJjZSBvYmplY3QuXG4gKiAgQHBhcmFtIGNhbGxiYWNrIFRoZSBjYWxsYmFjayBmdW5jdGlvbi5cbiAqICBAcGFyYW0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0IGJlaW5nIHZhbGlkYXRlZC5cbiAqICBAcGFyYW0gb3B0aW9ucyBUaGUgdmFsaWRhdGlvbiBvcHRpb25zLlxuICogIEBwYXJhbSBvcHRpb25zLm1lc3NhZ2VzIFRoZSB2YWxpZGF0aW9uIG1lc3NhZ2VzLlxuICovXG5cbmZ1bmN0aW9uIG9iamVjdChydWxlLCB2YWx1ZSwgY2FsbGJhY2ssIHNvdXJjZSwgb3B0aW9ucykge1xuICB2YXIgZXJyb3JzID0gW107XG4gIHZhciB2YWxpZGF0ZSA9IHJ1bGUucmVxdWlyZWQgfHwgIXJ1bGUucmVxdWlyZWQgJiYgc291cmNlLmhhc093blByb3BlcnR5KHJ1bGUuZmllbGQpO1xuXG4gIGlmICh2YWxpZGF0ZSkge1xuICAgIGlmIChpc0VtcHR5VmFsdWUodmFsdWUpICYmICFydWxlLnJlcXVpcmVkKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgICB9XG5cbiAgICBydWxlcy5yZXF1aXJlZChydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMpO1xuXG4gICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJ1bGVzLnR5cGUocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zKTtcbiAgICB9XG4gIH1cblxuICBjYWxsYmFjayhlcnJvcnMpO1xufVxuXG52YXIgRU5VTSQxID0gJ2VudW0nO1xuLyoqXG4gKiAgVmFsaWRhdGVzIGFuIGVudW1lcmFibGUgbGlzdC5cbiAqXG4gKiAgQHBhcmFtIHJ1bGUgVGhlIHZhbGlkYXRpb24gcnVsZS5cbiAqICBAcGFyYW0gdmFsdWUgVGhlIHZhbHVlIG9mIHRoZSBmaWVsZCBvbiB0aGUgc291cmNlIG9iamVjdC5cbiAqICBAcGFyYW0gY2FsbGJhY2sgVGhlIGNhbGxiYWNrIGZ1bmN0aW9uLlxuICogIEBwYXJhbSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QgYmVpbmcgdmFsaWRhdGVkLlxuICogIEBwYXJhbSBvcHRpb25zIFRoZSB2YWxpZGF0aW9uIG9wdGlvbnMuXG4gKiAgQHBhcmFtIG9wdGlvbnMubWVzc2FnZXMgVGhlIHZhbGlkYXRpb24gbWVzc2FnZXMuXG4gKi9cblxuZnVuY3Rpb24gZW51bWVyYWJsZSQxKHJ1bGUsIHZhbHVlLCBjYWxsYmFjaywgc291cmNlLCBvcHRpb25zKSB7XG4gIHZhciBlcnJvcnMgPSBbXTtcbiAgdmFyIHZhbGlkYXRlID0gcnVsZS5yZXF1aXJlZCB8fCAhcnVsZS5yZXF1aXJlZCAmJiBzb3VyY2UuaGFzT3duUHJvcGVydHkocnVsZS5maWVsZCk7XG5cbiAgaWYgKHZhbGlkYXRlKSB7XG4gICAgaWYgKGlzRW1wdHlWYWx1ZSh2YWx1ZSkgJiYgIXJ1bGUucmVxdWlyZWQpIHtcbiAgICAgIHJldHVybiBjYWxsYmFjaygpO1xuICAgIH1cblxuICAgIHJ1bGVzLnJlcXVpcmVkKHJ1bGUsIHZhbHVlLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucyk7XG5cbiAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcnVsZXNbRU5VTSQxXShydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMpO1xuICAgIH1cbiAgfVxuXG4gIGNhbGxiYWNrKGVycm9ycyk7XG59XG5cbi8qKlxuICogIFZhbGlkYXRlcyBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBwYXR0ZXJuLlxuICpcbiAqICBQZXJmb3JtcyB2YWxpZGF0aW9uIHdoZW4gYSBydWxlIG9ubHkgY29udGFpbnNcbiAqICBhIHBhdHRlcm4gcHJvcGVydHkgYnV0IGlzIG5vdCBkZWNsYXJlZCBhcyBhIHN0cmluZyB0eXBlLlxuICpcbiAqICBAcGFyYW0gcnVsZSBUaGUgdmFsaWRhdGlvbiBydWxlLlxuICogIEBwYXJhbSB2YWx1ZSBUaGUgdmFsdWUgb2YgdGhlIGZpZWxkIG9uIHRoZSBzb3VyY2Ugb2JqZWN0LlxuICogIEBwYXJhbSBjYWxsYmFjayBUaGUgY2FsbGJhY2sgZnVuY3Rpb24uXG4gKiAgQHBhcmFtIHNvdXJjZSBUaGUgc291cmNlIG9iamVjdCBiZWluZyB2YWxpZGF0ZWQuXG4gKiAgQHBhcmFtIG9wdGlvbnMgVGhlIHZhbGlkYXRpb24gb3B0aW9ucy5cbiAqICBAcGFyYW0gb3B0aW9ucy5tZXNzYWdlcyBUaGUgdmFsaWRhdGlvbiBtZXNzYWdlcy5cbiAqL1xuXG5mdW5jdGlvbiBwYXR0ZXJuJDIocnVsZSwgdmFsdWUsIGNhbGxiYWNrLCBzb3VyY2UsIG9wdGlvbnMpIHtcbiAgdmFyIGVycm9ycyA9IFtdO1xuICB2YXIgdmFsaWRhdGUgPSBydWxlLnJlcXVpcmVkIHx8ICFydWxlLnJlcXVpcmVkICYmIHNvdXJjZS5oYXNPd25Qcm9wZXJ0eShydWxlLmZpZWxkKTtcblxuICBpZiAodmFsaWRhdGUpIHtcbiAgICBpZiAoaXNFbXB0eVZhbHVlKHZhbHVlLCAnc3RyaW5nJykgJiYgIXJ1bGUucmVxdWlyZWQpIHtcbiAgICAgIHJldHVybiBjYWxsYmFjaygpO1xuICAgIH1cblxuICAgIHJ1bGVzLnJlcXVpcmVkKHJ1bGUsIHZhbHVlLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucyk7XG5cbiAgICBpZiAoIWlzRW1wdHlWYWx1ZSh2YWx1ZSwgJ3N0cmluZycpKSB7XG4gICAgICBydWxlcy5wYXR0ZXJuKHJ1bGUsIHZhbHVlLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucyk7XG4gICAgfVxuICB9XG5cbiAgY2FsbGJhY2soZXJyb3JzKTtcbn1cblxuZnVuY3Rpb24gZGF0ZShydWxlLCB2YWx1ZSwgY2FsbGJhY2ssIHNvdXJjZSwgb3B0aW9ucykge1xuICAvLyBjb25zb2xlLmxvZygnaW50ZWdlciBydWxlIGNhbGxlZCAlaicsIHJ1bGUpO1xuICB2YXIgZXJyb3JzID0gW107XG4gIHZhciB2YWxpZGF0ZSA9IHJ1bGUucmVxdWlyZWQgfHwgIXJ1bGUucmVxdWlyZWQgJiYgc291cmNlLmhhc093blByb3BlcnR5KHJ1bGUuZmllbGQpOyAvLyBjb25zb2xlLmxvZygndmFsaWRhdGUgb24gJXMgdmFsdWUnLCB2YWx1ZSk7XG5cbiAgaWYgKHZhbGlkYXRlKSB7XG4gICAgaWYgKGlzRW1wdHlWYWx1ZSh2YWx1ZSwgJ2RhdGUnKSAmJiAhcnVsZS5yZXF1aXJlZCkge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gICAgfVxuXG4gICAgcnVsZXMucmVxdWlyZWQocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zKTtcblxuICAgIGlmICghaXNFbXB0eVZhbHVlKHZhbHVlLCAnZGF0ZScpKSB7XG4gICAgICB2YXIgZGF0ZU9iamVjdDtcblxuICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgICBkYXRlT2JqZWN0ID0gdmFsdWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkYXRlT2JqZWN0ID0gbmV3IERhdGUodmFsdWUpO1xuICAgICAgfVxuXG4gICAgICBydWxlcy50eXBlKHJ1bGUsIGRhdGVPYmplY3QsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zKTtcblxuICAgICAgaWYgKGRhdGVPYmplY3QpIHtcbiAgICAgICAgcnVsZXMucmFuZ2UocnVsZSwgZGF0ZU9iamVjdC5nZXRUaW1lKCksIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBjYWxsYmFjayhlcnJvcnMpO1xufVxuXG5mdW5jdGlvbiByZXF1aXJlZCQxKHJ1bGUsIHZhbHVlLCBjYWxsYmFjaywgc291cmNlLCBvcHRpb25zKSB7XG4gIHZhciBlcnJvcnMgPSBbXTtcbiAgdmFyIHR5cGUgPSBBcnJheS5pc0FycmF5KHZhbHVlKSA/ICdhcnJheScgOiB0eXBlb2YgdmFsdWU7XG4gIHJ1bGVzLnJlcXVpcmVkKHJ1bGUsIHZhbHVlLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucywgdHlwZSk7XG4gIGNhbGxiYWNrKGVycm9ycyk7XG59XG5cbmZ1bmN0aW9uIHR5cGUkMShydWxlLCB2YWx1ZSwgY2FsbGJhY2ssIHNvdXJjZSwgb3B0aW9ucykge1xuICB2YXIgcnVsZVR5cGUgPSBydWxlLnR5cGU7XG4gIHZhciBlcnJvcnMgPSBbXTtcbiAgdmFyIHZhbGlkYXRlID0gcnVsZS5yZXF1aXJlZCB8fCAhcnVsZS5yZXF1aXJlZCAmJiBzb3VyY2UuaGFzT3duUHJvcGVydHkocnVsZS5maWVsZCk7XG5cbiAgaWYgKHZhbGlkYXRlKSB7XG4gICAgaWYgKGlzRW1wdHlWYWx1ZSh2YWx1ZSwgcnVsZVR5cGUpICYmICFydWxlLnJlcXVpcmVkKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgICB9XG5cbiAgICBydWxlcy5yZXF1aXJlZChydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMsIHJ1bGVUeXBlKTtcblxuICAgIGlmICghaXNFbXB0eVZhbHVlKHZhbHVlLCBydWxlVHlwZSkpIHtcbiAgICAgIHJ1bGVzLnR5cGUocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zKTtcbiAgICB9XG4gIH1cblxuICBjYWxsYmFjayhlcnJvcnMpO1xufVxuXG4vKipcbiAqICBQZXJmb3JtcyB2YWxpZGF0aW9uIGZvciBhbnkgdHlwZS5cbiAqXG4gKiAgQHBhcmFtIHJ1bGUgVGhlIHZhbGlkYXRpb24gcnVsZS5cbiAqICBAcGFyYW0gdmFsdWUgVGhlIHZhbHVlIG9mIHRoZSBmaWVsZCBvbiB0aGUgc291cmNlIG9iamVjdC5cbiAqICBAcGFyYW0gY2FsbGJhY2sgVGhlIGNhbGxiYWNrIGZ1bmN0aW9uLlxuICogIEBwYXJhbSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QgYmVpbmcgdmFsaWRhdGVkLlxuICogIEBwYXJhbSBvcHRpb25zIFRoZSB2YWxpZGF0aW9uIG9wdGlvbnMuXG4gKiAgQHBhcmFtIG9wdGlvbnMubWVzc2FnZXMgVGhlIHZhbGlkYXRpb24gbWVzc2FnZXMuXG4gKi9cblxuZnVuY3Rpb24gYW55KHJ1bGUsIHZhbHVlLCBjYWxsYmFjaywgc291cmNlLCBvcHRpb25zKSB7XG4gIHZhciBlcnJvcnMgPSBbXTtcbiAgdmFyIHZhbGlkYXRlID0gcnVsZS5yZXF1aXJlZCB8fCAhcnVsZS5yZXF1aXJlZCAmJiBzb3VyY2UuaGFzT3duUHJvcGVydHkocnVsZS5maWVsZCk7XG5cbiAgaWYgKHZhbGlkYXRlKSB7XG4gICAgaWYgKGlzRW1wdHlWYWx1ZSh2YWx1ZSkgJiYgIXJ1bGUucmVxdWlyZWQpIHtcbiAgICAgIHJldHVybiBjYWxsYmFjaygpO1xuICAgIH1cblxuICAgIHJ1bGVzLnJlcXVpcmVkKHJ1bGUsIHZhbHVlLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucyk7XG4gIH1cblxuICBjYWxsYmFjayhlcnJvcnMpO1xufVxuXG52YXIgdmFsaWRhdG9ycyA9IHtcbiAgc3RyaW5nOiBzdHJpbmcsXG4gIG1ldGhvZDogbWV0aG9kLFxuICBudW1iZXI6IG51bWJlcixcbiAgXCJib29sZWFuXCI6IF9ib29sZWFuLFxuICByZWdleHA6IHJlZ2V4cCxcbiAgaW50ZWdlcjogaW50ZWdlcixcbiAgXCJmbG9hdFwiOiBmbG9hdEZuLFxuICBhcnJheTogYXJyYXksXG4gIG9iamVjdDogb2JqZWN0LFxuICBcImVudW1cIjogZW51bWVyYWJsZSQxLFxuICBwYXR0ZXJuOiBwYXR0ZXJuJDIsXG4gIGRhdGU6IGRhdGUsXG4gIHVybDogdHlwZSQxLFxuICBoZXg6IHR5cGUkMSxcbiAgZW1haWw6IHR5cGUkMSxcbiAgcmVxdWlyZWQ6IHJlcXVpcmVkJDEsXG4gIGFueTogYW55XG59O1xuXG5mdW5jdGlvbiBuZXdNZXNzYWdlcygpIHtcbiAgcmV0dXJuIHtcbiAgICBcImRlZmF1bHRcIjogJ1ZhbGlkYXRpb24gZXJyb3Igb24gZmllbGQgJXMnLFxuICAgIHJlcXVpcmVkOiAnJXMgaXMgcmVxdWlyZWQnLFxuICAgIFwiZW51bVwiOiAnJXMgbXVzdCBiZSBvbmUgb2YgJXMnLFxuICAgIHdoaXRlc3BhY2U6ICclcyBjYW5ub3QgYmUgZW1wdHknLFxuICAgIGRhdGU6IHtcbiAgICAgIGZvcm1hdDogJyVzIGRhdGUgJXMgaXMgaW52YWxpZCBmb3IgZm9ybWF0ICVzJyxcbiAgICAgIHBhcnNlOiAnJXMgZGF0ZSBjb3VsZCBub3QgYmUgcGFyc2VkLCAlcyBpcyBpbnZhbGlkICcsXG4gICAgICBpbnZhbGlkOiAnJXMgZGF0ZSAlcyBpcyBpbnZhbGlkJ1xuICAgIH0sXG4gICAgdHlwZXM6IHtcbiAgICAgIHN0cmluZzogJyVzIGlzIG5vdCBhICVzJyxcbiAgICAgIG1ldGhvZDogJyVzIGlzIG5vdCBhICVzIChmdW5jdGlvbiknLFxuICAgICAgYXJyYXk6ICclcyBpcyBub3QgYW4gJXMnLFxuICAgICAgb2JqZWN0OiAnJXMgaXMgbm90IGFuICVzJyxcbiAgICAgIG51bWJlcjogJyVzIGlzIG5vdCBhICVzJyxcbiAgICAgIGRhdGU6ICclcyBpcyBub3QgYSAlcycsXG4gICAgICBcImJvb2xlYW5cIjogJyVzIGlzIG5vdCBhICVzJyxcbiAgICAgIGludGVnZXI6ICclcyBpcyBub3QgYW4gJXMnLFxuICAgICAgXCJmbG9hdFwiOiAnJXMgaXMgbm90IGEgJXMnLFxuICAgICAgcmVnZXhwOiAnJXMgaXMgbm90IGEgdmFsaWQgJXMnLFxuICAgICAgZW1haWw6ICclcyBpcyBub3QgYSB2YWxpZCAlcycsXG4gICAgICB1cmw6ICclcyBpcyBub3QgYSB2YWxpZCAlcycsXG4gICAgICBoZXg6ICclcyBpcyBub3QgYSB2YWxpZCAlcydcbiAgICB9LFxuICAgIHN0cmluZzoge1xuICAgICAgbGVuOiAnJXMgbXVzdCBiZSBleGFjdGx5ICVzIGNoYXJhY3RlcnMnLFxuICAgICAgbWluOiAnJXMgbXVzdCBiZSBhdCBsZWFzdCAlcyBjaGFyYWN0ZXJzJyxcbiAgICAgIG1heDogJyVzIGNhbm5vdCBiZSBsb25nZXIgdGhhbiAlcyBjaGFyYWN0ZXJzJyxcbiAgICAgIHJhbmdlOiAnJXMgbXVzdCBiZSBiZXR3ZWVuICVzIGFuZCAlcyBjaGFyYWN0ZXJzJ1xuICAgIH0sXG4gICAgbnVtYmVyOiB7XG4gICAgICBsZW46ICclcyBtdXN0IGVxdWFsICVzJyxcbiAgICAgIG1pbjogJyVzIGNhbm5vdCBiZSBsZXNzIHRoYW4gJXMnLFxuICAgICAgbWF4OiAnJXMgY2Fubm90IGJlIGdyZWF0ZXIgdGhhbiAlcycsXG4gICAgICByYW5nZTogJyVzIG11c3QgYmUgYmV0d2VlbiAlcyBhbmQgJXMnXG4gICAgfSxcbiAgICBhcnJheToge1xuICAgICAgbGVuOiAnJXMgbXVzdCBiZSBleGFjdGx5ICVzIGluIGxlbmd0aCcsXG4gICAgICBtaW46ICclcyBjYW5ub3QgYmUgbGVzcyB0aGFuICVzIGluIGxlbmd0aCcsXG4gICAgICBtYXg6ICclcyBjYW5ub3QgYmUgZ3JlYXRlciB0aGFuICVzIGluIGxlbmd0aCcsXG4gICAgICByYW5nZTogJyVzIG11c3QgYmUgYmV0d2VlbiAlcyBhbmQgJXMgaW4gbGVuZ3RoJ1xuICAgIH0sXG4gICAgcGF0dGVybjoge1xuICAgICAgbWlzbWF0Y2g6ICclcyB2YWx1ZSAlcyBkb2VzIG5vdCBtYXRjaCBwYXR0ZXJuICVzJ1xuICAgIH0sXG4gICAgY2xvbmU6IGZ1bmN0aW9uIGNsb25lKCkge1xuICAgICAgdmFyIGNsb25lZCA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodGhpcykpO1xuICAgICAgY2xvbmVkLmNsb25lID0gdGhpcy5jbG9uZTtcbiAgICAgIHJldHVybiBjbG9uZWQ7XG4gICAgfVxuICB9O1xufVxudmFyIG1lc3NhZ2VzID0gbmV3TWVzc2FnZXMoKTtcblxuLyoqXG4gKiAgRW5jYXBzdWxhdGVzIGEgdmFsaWRhdGlvbiBzY2hlbWEuXG4gKlxuICogIEBwYXJhbSBkZXNjcmlwdG9yIEFuIG9iamVjdCBkZWNsYXJpbmcgdmFsaWRhdGlvbiBydWxlc1xuICogIGZvciB0aGlzIHNjaGVtYS5cbiAqL1xuXG5mdW5jdGlvbiBTY2hlbWEoZGVzY3JpcHRvcikge1xuICB0aGlzLnJ1bGVzID0gbnVsbDtcbiAgdGhpcy5fbWVzc2FnZXMgPSBtZXNzYWdlcztcbiAgdGhpcy5kZWZpbmUoZGVzY3JpcHRvcik7XG59XG5cblNjaGVtYS5wcm90b3R5cGUgPSB7XG4gIG1lc3NhZ2VzOiBmdW5jdGlvbiBtZXNzYWdlcyhfbWVzc2FnZXMpIHtcbiAgICBpZiAoX21lc3NhZ2VzKSB7XG4gICAgICB0aGlzLl9tZXNzYWdlcyA9IGRlZXBNZXJnZShuZXdNZXNzYWdlcygpLCBfbWVzc2FnZXMpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9tZXNzYWdlcztcbiAgfSxcbiAgZGVmaW5lOiBmdW5jdGlvbiBkZWZpbmUocnVsZXMpIHtcbiAgICBpZiAoIXJ1bGVzKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBjb25maWd1cmUgYSBzY2hlbWEgd2l0aCBubyBydWxlcycpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgcnVsZXMgIT09ICdvYmplY3QnIHx8IEFycmF5LmlzQXJyYXkocnVsZXMpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1J1bGVzIG11c3QgYmUgYW4gb2JqZWN0Jyk7XG4gICAgfVxuXG4gICAgdGhpcy5ydWxlcyA9IHt9O1xuICAgIHZhciB6O1xuICAgIHZhciBpdGVtO1xuXG4gICAgZm9yICh6IGluIHJ1bGVzKSB7XG4gICAgICBpZiAocnVsZXMuaGFzT3duUHJvcGVydHkoeikpIHtcbiAgICAgICAgaXRlbSA9IHJ1bGVzW3pdO1xuICAgICAgICB0aGlzLnJ1bGVzW3pdID0gQXJyYXkuaXNBcnJheShpdGVtKSA/IGl0ZW0gOiBbaXRlbV07XG4gICAgICB9XG4gICAgfVxuICB9LFxuICB2YWxpZGF0ZTogZnVuY3Rpb24gdmFsaWRhdGUoc291cmNlXywgbywgb2MpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgaWYgKG8gPT09IHZvaWQgMCkge1xuICAgICAgbyA9IHt9O1xuICAgIH1cblxuICAgIGlmIChvYyA9PT0gdm9pZCAwKSB7XG4gICAgICBvYyA9IGZ1bmN0aW9uIG9jKCkge307XG4gICAgfVxuXG4gICAgdmFyIHNvdXJjZSA9IHNvdXJjZV87XG4gICAgdmFyIG9wdGlvbnMgPSBvO1xuICAgIHZhciBjYWxsYmFjayA9IG9jO1xuXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBjYWxsYmFjayA9IG9wdGlvbnM7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLnJ1bGVzIHx8IE9iamVjdC5rZXlzKHRoaXMucnVsZXMpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb21wbGV0ZShyZXN1bHRzKSB7XG4gICAgICB2YXIgaTtcbiAgICAgIHZhciBlcnJvcnMgPSBbXTtcbiAgICAgIHZhciBmaWVsZHMgPSB7fTtcblxuICAgICAgZnVuY3Rpb24gYWRkKGUpIHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZSkpIHtcbiAgICAgICAgICB2YXIgX2Vycm9ycztcblxuICAgICAgICAgIGVycm9ycyA9IChfZXJyb3JzID0gZXJyb3JzKS5jb25jYXQuYXBwbHkoX2Vycm9ycywgZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZXJyb3JzLnB1c2goZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZm9yIChpID0gMDsgaSA8IHJlc3VsdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgYWRkKHJlc3VsdHNbaV0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWVycm9ycy5sZW5ndGgpIHtcbiAgICAgICAgZXJyb3JzID0gbnVsbDtcbiAgICAgICAgZmllbGRzID0gbnVsbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZpZWxkcyA9IGNvbnZlcnRGaWVsZHNFcnJvcihlcnJvcnMpO1xuICAgICAgfVxuXG4gICAgICBjYWxsYmFjayhlcnJvcnMsIGZpZWxkcyk7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMubWVzc2FnZXMpIHtcbiAgICAgIHZhciBtZXNzYWdlcyQxID0gdGhpcy5tZXNzYWdlcygpO1xuXG4gICAgICBpZiAobWVzc2FnZXMkMSA9PT0gbWVzc2FnZXMpIHtcbiAgICAgICAgbWVzc2FnZXMkMSA9IG5ld01lc3NhZ2VzKCk7XG4gICAgICB9XG5cbiAgICAgIGRlZXBNZXJnZShtZXNzYWdlcyQxLCBvcHRpb25zLm1lc3NhZ2VzKTtcbiAgICAgIG9wdGlvbnMubWVzc2FnZXMgPSBtZXNzYWdlcyQxO1xuICAgIH0gZWxzZSB7XG4gICAgICBvcHRpb25zLm1lc3NhZ2VzID0gdGhpcy5tZXNzYWdlcygpO1xuICAgIH1cblxuICAgIHZhciBhcnI7XG4gICAgdmFyIHZhbHVlO1xuICAgIHZhciBzZXJpZXMgPSB7fTtcbiAgICB2YXIga2V5cyA9IG9wdGlvbnMua2V5cyB8fCBPYmplY3Qua2V5cyh0aGlzLnJ1bGVzKTtcbiAgICBrZXlzLmZvckVhY2goZnVuY3Rpb24gKHopIHtcbiAgICAgIGFyciA9IF90aGlzLnJ1bGVzW3pdO1xuICAgICAgdmFsdWUgPSBzb3VyY2Vbel07XG4gICAgICBhcnIuZm9yRWFjaChmdW5jdGlvbiAocikge1xuICAgICAgICB2YXIgcnVsZSA9IHI7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBydWxlLnRyYW5zZm9ybSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGlmIChzb3VyY2UgPT09IHNvdXJjZV8pIHtcbiAgICAgICAgICAgIHNvdXJjZSA9IF9leHRlbmRzKHt9LCBzb3VyY2UpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhbHVlID0gc291cmNlW3pdID0gcnVsZS50cmFuc2Zvcm0odmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBydWxlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgcnVsZSA9IHtcbiAgICAgICAgICAgIHZhbGlkYXRvcjogcnVsZVxuICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcnVsZSA9IF9leHRlbmRzKHt9LCBydWxlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJ1bGUudmFsaWRhdG9yID0gX3RoaXMuZ2V0VmFsaWRhdGlvbk1ldGhvZChydWxlKTtcbiAgICAgICAgcnVsZS5maWVsZCA9IHo7XG4gICAgICAgIHJ1bGUuZnVsbEZpZWxkID0gcnVsZS5mdWxsRmllbGQgfHwgejtcbiAgICAgICAgcnVsZS50eXBlID0gX3RoaXMuZ2V0VHlwZShydWxlKTtcblxuICAgICAgICBpZiAoIXJ1bGUudmFsaWRhdG9yKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgc2VyaWVzW3pdID0gc2VyaWVzW3pdIHx8IFtdO1xuICAgICAgICBzZXJpZXNbel0ucHVzaCh7XG4gICAgICAgICAgcnVsZTogcnVsZSxcbiAgICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgICAgc291cmNlOiBzb3VyY2UsXG4gICAgICAgICAgZmllbGQ6IHpcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICB2YXIgZXJyb3JGaWVsZHMgPSB7fTtcbiAgICByZXR1cm4gYXN5bmNNYXAoc2VyaWVzLCBvcHRpb25zLCBmdW5jdGlvbiAoZGF0YSwgZG9JdCkge1xuICAgICAgdmFyIHJ1bGUgPSBkYXRhLnJ1bGU7XG4gICAgICB2YXIgZGVlcCA9IChydWxlLnR5cGUgPT09ICdvYmplY3QnIHx8IHJ1bGUudHlwZSA9PT0gJ2FycmF5JykgJiYgKHR5cGVvZiBydWxlLmZpZWxkcyA9PT0gJ29iamVjdCcgfHwgdHlwZW9mIHJ1bGUuZGVmYXVsdEZpZWxkID09PSAnb2JqZWN0Jyk7XG4gICAgICBkZWVwID0gZGVlcCAmJiAocnVsZS5yZXF1aXJlZCB8fCAhcnVsZS5yZXF1aXJlZCAmJiBkYXRhLnZhbHVlKTtcbiAgICAgIHJ1bGUuZmllbGQgPSBkYXRhLmZpZWxkO1xuXG4gICAgICBmdW5jdGlvbiBhZGRGdWxsZmllbGQoa2V5LCBzY2hlbWEpIHtcbiAgICAgICAgcmV0dXJuIF9leHRlbmRzKF9leHRlbmRzKHt9LCBzY2hlbWEpLCB7fSwge1xuICAgICAgICAgIGZ1bGxGaWVsZDogcnVsZS5mdWxsRmllbGQgKyBcIi5cIiArIGtleVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gY2IoZSkge1xuICAgICAgICBpZiAoZSA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgZSA9IFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGVycm9ycyA9IGU7XG5cbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGVycm9ycykpIHtcbiAgICAgICAgICBlcnJvcnMgPSBbZXJyb3JzXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghb3B0aW9ucy5zdXBwcmVzc1dhcm5pbmcgJiYgZXJyb3JzLmxlbmd0aCkge1xuICAgICAgICAgIFNjaGVtYS53YXJuaW5nKCdhc3luYy12YWxpZGF0b3I6JywgZXJyb3JzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlcnJvcnMubGVuZ3RoICYmIHJ1bGUubWVzc2FnZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgZXJyb3JzID0gW10uY29uY2F0KHJ1bGUubWVzc2FnZSk7XG4gICAgICAgIH1cblxuICAgICAgICBlcnJvcnMgPSBlcnJvcnMubWFwKGNvbXBsZW1lbnRFcnJvcihydWxlKSk7XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuZmlyc3QgJiYgZXJyb3JzLmxlbmd0aCkge1xuICAgICAgICAgIGVycm9yRmllbGRzW3J1bGUuZmllbGRdID0gMTtcbiAgICAgICAgICByZXR1cm4gZG9JdChlcnJvcnMpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFkZWVwKSB7XG4gICAgICAgICAgZG9JdChlcnJvcnMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIGlmIHJ1bGUgaXMgcmVxdWlyZWQgYnV0IHRoZSB0YXJnZXQgb2JqZWN0XG4gICAgICAgICAgLy8gZG9lcyBub3QgZXhpc3QgZmFpbCBhdCB0aGUgcnVsZSBsZXZlbCBhbmQgZG9uJ3RcbiAgICAgICAgICAvLyBnbyBkZWVwZXJcbiAgICAgICAgICBpZiAocnVsZS5yZXF1aXJlZCAmJiAhZGF0YS52YWx1ZSkge1xuICAgICAgICAgICAgaWYgKHJ1bGUubWVzc2FnZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgIGVycm9ycyA9IFtdLmNvbmNhdChydWxlLm1lc3NhZ2UpLm1hcChjb21wbGVtZW50RXJyb3IocnVsZSkpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChvcHRpb25zLmVycm9yKSB7XG4gICAgICAgICAgICAgIGVycm9ycyA9IFtvcHRpb25zLmVycm9yKHJ1bGUsIGZvcm1hdChvcHRpb25zLm1lc3NhZ2VzLnJlcXVpcmVkLCBydWxlLmZpZWxkKSldO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gZG9JdChlcnJvcnMpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBmaWVsZHNTY2hlbWEgPSB7fTtcblxuICAgICAgICAgIGlmIChydWxlLmRlZmF1bHRGaWVsZCkge1xuICAgICAgICAgICAgZm9yICh2YXIgayBpbiBkYXRhLnZhbHVlKSB7XG4gICAgICAgICAgICAgIGlmIChkYXRhLnZhbHVlLmhhc093blByb3BlcnR5KGspKSB7XG4gICAgICAgICAgICAgICAgZmllbGRzU2NoZW1hW2tdID0gcnVsZS5kZWZhdWx0RmllbGQ7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBmaWVsZHNTY2hlbWEgPSBfZXh0ZW5kcyhfZXh0ZW5kcyh7fSwgZmllbGRzU2NoZW1hKSwgZGF0YS5ydWxlLmZpZWxkcyk7XG5cbiAgICAgICAgICBmb3IgKHZhciBmIGluIGZpZWxkc1NjaGVtYSkge1xuICAgICAgICAgICAgaWYgKGZpZWxkc1NjaGVtYS5oYXNPd25Qcm9wZXJ0eShmKSkge1xuICAgICAgICAgICAgICB2YXIgZmllbGRTY2hlbWEgPSBBcnJheS5pc0FycmF5KGZpZWxkc1NjaGVtYVtmXSkgPyBmaWVsZHNTY2hlbWFbZl0gOiBbZmllbGRzU2NoZW1hW2ZdXTtcbiAgICAgICAgICAgICAgZmllbGRzU2NoZW1hW2ZdID0gZmllbGRTY2hlbWEubWFwKGFkZEZ1bGxmaWVsZC5iaW5kKG51bGwsIGYpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgc2NoZW1hID0gbmV3IFNjaGVtYShmaWVsZHNTY2hlbWEpO1xuICAgICAgICAgIHNjaGVtYS5tZXNzYWdlcyhvcHRpb25zLm1lc3NhZ2VzKTtcblxuICAgICAgICAgIGlmIChkYXRhLnJ1bGUub3B0aW9ucykge1xuICAgICAgICAgICAgZGF0YS5ydWxlLm9wdGlvbnMubWVzc2FnZXMgPSBvcHRpb25zLm1lc3NhZ2VzO1xuICAgICAgICAgICAgZGF0YS5ydWxlLm9wdGlvbnMuZXJyb3IgPSBvcHRpb25zLmVycm9yO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHNjaGVtYS52YWxpZGF0ZShkYXRhLnZhbHVlLCBkYXRhLnJ1bGUub3B0aW9ucyB8fCBvcHRpb25zLCBmdW5jdGlvbiAoZXJycykge1xuICAgICAgICAgICAgdmFyIGZpbmFsRXJyb3JzID0gW107XG5cbiAgICAgICAgICAgIGlmIChlcnJvcnMgJiYgZXJyb3JzLmxlbmd0aCkge1xuICAgICAgICAgICAgICBmaW5hbEVycm9ycy5wdXNoLmFwcGx5KGZpbmFsRXJyb3JzLCBlcnJvcnMpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZXJycyAmJiBlcnJzLmxlbmd0aCkge1xuICAgICAgICAgICAgICBmaW5hbEVycm9ycy5wdXNoLmFwcGx5KGZpbmFsRXJyb3JzLCBlcnJzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZG9JdChmaW5hbEVycm9ycy5sZW5ndGggPyBmaW5hbEVycm9ycyA6IG51bGwpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciByZXM7XG5cbiAgICAgIGlmIChydWxlLmFzeW5jVmFsaWRhdG9yKSB7XG4gICAgICAgIHJlcyA9IHJ1bGUuYXN5bmNWYWxpZGF0b3IocnVsZSwgZGF0YS52YWx1ZSwgY2IsIGRhdGEuc291cmNlLCBvcHRpb25zKTtcbiAgICAgIH0gZWxzZSBpZiAocnVsZS52YWxpZGF0b3IpIHtcbiAgICAgICAgcmVzID0gcnVsZS52YWxpZGF0b3IocnVsZSwgZGF0YS52YWx1ZSwgY2IsIGRhdGEuc291cmNlLCBvcHRpb25zKTtcblxuICAgICAgICBpZiAocmVzID09PSB0cnVlKSB7XG4gICAgICAgICAgY2IoKTtcbiAgICAgICAgfSBlbHNlIGlmIChyZXMgPT09IGZhbHNlKSB7XG4gICAgICAgICAgY2IocnVsZS5tZXNzYWdlIHx8IHJ1bGUuZmllbGQgKyBcIiBmYWlsc1wiKTtcbiAgICAgICAgfSBlbHNlIGlmIChyZXMgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAgIGNiKHJlcyk7XG4gICAgICAgIH0gZWxzZSBpZiAocmVzIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgICBjYihyZXMubWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHJlcyAmJiByZXMudGhlbikge1xuICAgICAgICByZXMudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIGNiKCk7XG4gICAgICAgIH0sIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgcmV0dXJuIGNiKGUpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LCBmdW5jdGlvbiAocmVzdWx0cykge1xuICAgICAgY29tcGxldGUocmVzdWx0cyk7XG4gICAgfSk7XG4gIH0sXG4gIGdldFR5cGU6IGZ1bmN0aW9uIGdldFR5cGUocnVsZSkge1xuICAgIGlmIChydWxlLnR5cGUgPT09IHVuZGVmaW5lZCAmJiBydWxlLnBhdHRlcm4gaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICAgIHJ1bGUudHlwZSA9ICdwYXR0ZXJuJztcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHJ1bGUudmFsaWRhdG9yICE9PSAnZnVuY3Rpb24nICYmIHJ1bGUudHlwZSAmJiAhdmFsaWRhdG9ycy5oYXNPd25Qcm9wZXJ0eShydWxlLnR5cGUpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoZm9ybWF0KCdVbmtub3duIHJ1bGUgdHlwZSAlcycsIHJ1bGUudHlwZSkpO1xuICAgIH1cblxuICAgIHJldHVybiBydWxlLnR5cGUgfHwgJ3N0cmluZyc7XG4gIH0sXG4gIGdldFZhbGlkYXRpb25NZXRob2Q6IGZ1bmN0aW9uIGdldFZhbGlkYXRpb25NZXRob2QocnVsZSkge1xuICAgIGlmICh0eXBlb2YgcnVsZS52YWxpZGF0b3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiBydWxlLnZhbGlkYXRvcjtcbiAgICB9XG5cbiAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHJ1bGUpO1xuICAgIHZhciBtZXNzYWdlSW5kZXggPSBrZXlzLmluZGV4T2YoJ21lc3NhZ2UnKTtcblxuICAgIGlmIChtZXNzYWdlSW5kZXggIT09IC0xKSB7XG4gICAgICBrZXlzLnNwbGljZShtZXNzYWdlSW5kZXgsIDEpO1xuICAgIH1cblxuICAgIGlmIChrZXlzLmxlbmd0aCA9PT0gMSAmJiBrZXlzWzBdID09PSAncmVxdWlyZWQnKSB7XG4gICAgICByZXR1cm4gdmFsaWRhdG9ycy5yZXF1aXJlZDtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsaWRhdG9yc1t0aGlzLmdldFR5cGUocnVsZSldIHx8IGZhbHNlO1xuICB9XG59O1xuXG5TY2hlbWEucmVnaXN0ZXIgPSBmdW5jdGlvbiByZWdpc3Rlcih0eXBlLCB2YWxpZGF0b3IpIHtcbiAgaWYgKHR5cGVvZiB2YWxpZGF0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCByZWdpc3RlciBhIHZhbGlkYXRvciBieSB0eXBlLCB2YWxpZGF0b3IgaXMgbm90IGEgZnVuY3Rpb24nKTtcbiAgfVxuXG4gIHZhbGlkYXRvcnNbdHlwZV0gPSB2YWxpZGF0b3I7XG59O1xuXG5TY2hlbWEud2FybmluZyA9IHdhcm5pbmc7XG5TY2hlbWEubWVzc2FnZXMgPSBtZXNzYWdlcztcblNjaGVtYS52YWxpZGF0b3JzID0gdmFsaWRhdG9ycztcblxuZXhwb3J0IGRlZmF1bHQgU2NoZW1hO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iLCJpbXBvcnR7ZGVmaW5lQ29tcG9uZW50IGFzIGUscmVmIGFzIHQsY29tcHV0ZWQgYXMgbCxvcGVuQmxvY2sgYXMgYSxjcmVhdGVCbG9jayBhcyBuLFRyYW5zaXRpb24gYXMgbyx3aXRoQ3R4IGFzIGksd2l0aERpcmVjdGl2ZXMgYXMgcixjcmVhdGVWTm9kZSBhcyBzLGNyZWF0ZUNvbW1lbnRWTm9kZSBhcyB1LHJlbmRlclNsb3QgYXMgZCxjcmVhdGVUZXh0Vk5vZGUgYXMgYyx0b0Rpc3BsYXlTdHJpbmcgYXMgcCx2U2hvdyBhcyBoLGdldEN1cnJlbnRJbnN0YW5jZSBhcyB2LHNoYWxsb3dSZWYgYXMgbSxyZWFjdGl2ZSBhcyBmLHdhdGNoRWZmZWN0IGFzIGcsaXNSZWYgYXMgYix3YXRjaCBhcyB5LG5leHRUaWNrIGFzIGssdG9SZWZzIGFzIEMscHJvdmlkZSBhcyB4LGluamVjdCBhcyB3LG9uTW91bnRlZCBhcyBfLG9uVXBkYXRlZCBhcyBTLEZyYWdtZW50IGFzIEUsbWVyZ2VQcm9wcyBhcyBNLHdpdGhNb2RpZmllcnMgYXMgVCxvblVubW91bnRlZCBhcyBOLGggYXMgRCxvbkJlZm9yZVVubW91bnQgYXMgTyxyZXNvbHZlQ29tcG9uZW50IGFzIFAscmVzb2x2ZUR5bmFtaWNDb21wb25lbnQgYXMgVixDb21tZW50IGFzIEksY2xvbmVWTm9kZSBhcyBBLG9uQWN0aXZhdGVkIGFzIEIsb25EZWFjdGl2YXRlZCBhcyBMLFRlbGVwb3J0IGFzIHoscmVzb2x2ZURpcmVjdGl2ZSBhcyBGLHdpdGhLZXlzIGFzICQsY3JlYXRlU2xvdHMgYXMgUixyZW5kZXJMaXN0IGFzIEgsdk1vZGVsQ2hlY2tib3ggYXMgVyx2TW9kZWxSYWRpbyBhcyBqLG9uQmVmb3JlVXBkYXRlIGFzIEssdk1vZGVsVGV4dCBhcyBZLHRvSGFuZGxlcnMgYXMgcSxyZW5kZXIgYXMgVSxpc1ZOb2RlIGFzIEcsb25CZWZvcmVNb3VudCBhcyBYLHVucmVmIGFzIFEsVHJhbnNpdGlvbkdyb3VwIGFzIFoscHVzaFNjb3BlSWQgYXMgSixwb3BTY29wZUlkIGFzIGVlLHdpdGhTY29wZUlkIGFzIHRlfWZyb21cInZ1ZVwiO2ltcG9ydCBsZSBmcm9tXCJsb2Rhc2gvZGVib3VuY2VcIjtpbXBvcnQgYWUgZnJvbVwibm9ybWFsaXplLXdoZWVsXCI7aW1wb3J0IG5lIGZyb21cIm1pdHRcIjtpbXBvcnQgb2UgZnJvbVwicmVzaXplLW9ic2VydmVyLXBvbHlmaWxsXCI7aW1wb3J0e2NyZWF0ZVBvcHBlciBhcyBpZX1mcm9tXCJAcG9wcGVyanMvY29yZVwiO2ltcG9ydCByZSBmcm9tXCJsb2Rhc2gvdGhyb3R0bGVcIjtpbXBvcnQgc2UgZnJvbVwiZGF5anNcIjtpbXBvcnQgdWUgZnJvbVwiZGF5anMvcGx1Z2luL2xvY2FsZURhdGFcIjtpbXBvcnQgZGUgZnJvbVwiZGF5anMvcGx1Z2luL2N1c3RvbVBhcnNlRm9ybWF0XCI7aW1wb3J0IGNlIGZyb21cImxvZGFzaC91bmlvblwiO2ltcG9ydCBwZSBmcm9tXCJsb2Rhc2gvaXNFcXVhbFwiO2ltcG9ydCBoZSBmcm9tXCJkYXlqcy9wbHVnaW4vYWR2YW5jZWRGb3JtYXRcIjtpbXBvcnQgdmUgZnJvbVwiZGF5anMvcGx1Z2luL3dlZWtPZlllYXJcIjtpbXBvcnQgbWUgZnJvbVwiZGF5anMvcGx1Z2luL3dlZWtZZWFyXCI7aW1wb3J0IGZlIGZyb21cImRheWpzL3BsdWdpbi9pc0xlYXBZZWFyXCI7aW1wb3J0IGdlIGZyb21cImRheWpzL3BsdWdpbi9pc1NhbWVPckFmdGVyXCI7aW1wb3J0IGJlIGZyb21cImRheWpzL3BsdWdpbi9pc1NhbWVPckJlZm9yZVwiO2ltcG9ydCB5ZSBmcm9tXCJhc3luYy12YWxpZGF0b3JcIjtjb25zdCBrZT17c3VjY2VzczpcImVsLWljb24tc3VjY2Vzc1wiLHdhcm5pbmc6XCJlbC1pY29uLXdhcm5pbmdcIixlcnJvcjpcImVsLWljb24tZXJyb3JcIn07dmFyIENlPWUoe25hbWU6XCJFbEFsZXJ0XCIscHJvcHM6e3RpdGxlOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiXCJ9LGRlc2NyaXB0aW9uOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiXCJ9LHR5cGU6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJpbmZvXCJ9LGNsb3NhYmxlOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMH0sY2xvc2VUZXh0Ont0eXBlOlN0cmluZyxkZWZhdWx0OlwiXCJ9LHNob3dJY29uOkJvb2xlYW4sY2VudGVyOkJvb2xlYW4sZWZmZWN0Ont0eXBlOlN0cmluZyxkZWZhdWx0OlwibGlnaHRcIix2YWxpZGF0b3I6ZT0+W1wibGlnaHRcIixcImRhcmtcIl0uaW5kZXhPZihlKT4tMX19LGVtaXRzOltcImNsb3NlXCJdLHNldHVwKGUsYSl7Y29uc3Qgbj10KCEwKSxvPWwoKCgpPT5cImVsLWFsZXJ0LS1cIitlLnR5cGUpKSxpPWwoKCgpPT5rZVtlLnR5cGVdfHxcImVsLWljb24taW5mb1wiKSkscj1sKCgoKT0+ZS5kZXNjcmlwdGlvbnx8YS5zbG90cy5kZWZhdWx0P1wiaXMtYmlnXCI6XCJcIikpLHM9bCgoKCk9PmUuZGVzY3JpcHRpb258fGEuc2xvdHMuZGVmYXVsdD9cImlzLWJvbGRcIjpcIlwiKSk7cmV0dXJue3Zpc2libGU6bix0eXBlQ2xhc3M6byxpY29uQ2xhc3M6aSxpc0JpZ0ljb246cixpc0JvbGRUaXRsZTpzLGNsb3NlOmU9PntuLnZhbHVlPSExLGEuZW1pdChcImNsb3NlXCIsZSl9fX19KTtjb25zdCB4ZT17Y2xhc3M6XCJlbC1hbGVydF9fY29udGVudFwifSx3ZT17a2V5OjEsY2xhc3M6XCJlbC1hbGVydF9fZGVzY3JpcHRpb25cIn07Q2UucmVuZGVyPWZ1bmN0aW9uKGUsdCxsLHYsbSxmKXtyZXR1cm4gYSgpLG4obyx7bmFtZTpcImVsLWFsZXJ0LWZhZGVcIn0se2RlZmF1bHQ6aSgoKCk9PltyKHMoXCJkaXZcIix7Y2xhc3M6W1wiZWwtYWxlcnRcIixbZS50eXBlQ2xhc3MsZS5jZW50ZXI/XCJpcy1jZW50ZXJcIjpcIlwiLFwiaXMtXCIrZS5lZmZlY3RdXSxyb2xlOlwiYWxlcnRcIn0sW2Uuc2hvd0ljb24/KGEoKSxuKFwiaVwiLHtrZXk6MCxjbGFzczpbXCJlbC1hbGVydF9faWNvblwiLFtlLmljb25DbGFzcyxlLmlzQmlnSWNvbl1dfSxudWxsLDIpKTp1KFwidi1pZlwiLCEwKSxzKFwiZGl2XCIseGUsW2UudGl0bGV8fGUuJHNsb3RzLnRpdGxlPyhhKCksbihcInNwYW5cIix7a2V5OjAsY2xhc3M6W1wiZWwtYWxlcnRfX3RpdGxlXCIsW2UuaXNCb2xkVGl0bGVdXX0sW2QoZS4kc2xvdHMsXCJ0aXRsZVwiLHt9LCgoKT0+W2MocChlLnRpdGxlKSwxKV0pKV0sMikpOnUoXCJ2LWlmXCIsITApLGUuJHNsb3RzLmRlZmF1bHR8fGUuZGVzY3JpcHRpb24/KGEoKSxuKFwicFwiLHdlLFtkKGUuJHNsb3RzLFwiZGVmYXVsdFwiLHt9LCgoKT0+W2MocChlLmRlc2NyaXB0aW9uKSwxKV0pKV0pKTp1KFwidi1pZlwiLCEwKSxlLmNsb3NhYmxlPyhhKCksbihcImlcIix7a2V5OjIsY2xhc3M6W1wiZWwtYWxlcnRfX2Nsb3NlYnRuXCIse1wiaXMtY3VzdG9tZWRcIjpcIlwiIT09ZS5jbG9zZVRleHQsXCJlbC1pY29uLWNsb3NlXCI6XCJcIj09PWUuY2xvc2VUZXh0fV0sb25DbGljazp0WzFdfHwodFsxXT0oLi4udCk9PmUuY2xvc2UoLi4udCkpfSxwKGUuY2xvc2VUZXh0KSwzKSk6dShcInYtaWZcIiwhMCldKV0sMiksW1toLGUudmlzaWJsZV1dKV0pKSxfOjF9KX0sQ2UuX19maWxlPVwicGFja2FnZXMvYWxlcnQvc3JjL2luZGV4LnZ1ZVwiLENlLmluc3RhbGw9ZT0+e2UuY29tcG9uZW50KENlLm5hbWUsQ2UpfTt2YXIgX2U9ZSh7bmFtZTpcIkVsQXNpZGVcIixwcm9wczp7d2lkdGg6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCIzMDBweFwifX19KTtfZS5yZW5kZXI9ZnVuY3Rpb24oZSx0LGwsbyxpLHIpe3JldHVybiBhKCksbihcImFzaWRlXCIse2NsYXNzOlwiZWwtYXNpZGVcIixzdHlsZTp7d2lkdGg6ZS53aWR0aH19LFtkKGUuJHNsb3RzLFwiZGVmYXVsdFwiKV0sNCl9LF9lLl9fZmlsZT1cInBhY2thZ2VzL2NvbnRhaW5lci9zcmMvYXNpZGUudnVlXCIsX2UuaW5zdGFsbD1lPT57ZS5jb21wb25lbnQoX2UubmFtZSxfZSl9O1wicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJk9iamVjdC5mcmVlemUoe30pLFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJk9iamVjdC5mcmVlemUoW10pO2NvbnN0IFNlPSgpPT57fSxFZT1PYmplY3QuYXNzaWduLE1lPUFycmF5LmlzQXJyYXksVGU9ZT0+XCJmdW5jdGlvblwiPT10eXBlb2YgZSxOZT1lPT5cInN0cmluZ1wiPT10eXBlb2YgZSxEZT1lPT5udWxsIT09ZSYmXCJvYmplY3RcIj09dHlwZW9mIGUsT2U9T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZyxQZT1lPT5PZS5jYWxsKGUpLFZlPWU9PlBlKGUpLnNsaWNlKDgsLTEpLEllPWU9Pntjb25zdCB0PU9iamVjdC5jcmVhdGUobnVsbCk7cmV0dXJuIGw9PnRbbF18fCh0W2xdPWUobCkpfSxBZT0vLShcXHcpL2csQmU9SWUoKGU9PmUucmVwbGFjZShBZSwoKGUsdCk9PnQ/dC50b1VwcGVyQ2FzZSgpOlwiXCIpKSkpLExlPUllKChlPT5lLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Uuc2xpY2UoMSkpKTt2YXIgemU9XCJ1bmRlZmluZWRcIj09dHlwZW9mIHdpbmRvdztjb25zdCBGZT0oZSx0PVwiXCIpPT57bGV0IGw9ZTtyZXR1cm4gdC5zcGxpdChcIi5cIikubWFwKChlPT57bD1udWxsPT1sP3ZvaWQgMDpsW2VdfSkpLGx9O2Z1bmN0aW9uICRlKGUsdCxsKXtsZXQgYT1lO2NvbnN0IG49KHQ9KHQ9dC5yZXBsYWNlKC9cXFsoXFx3KylcXF0vZyxcIi4kMVwiKSkucmVwbGFjZSgvXlxcLi8sXCJcIikpLnNwbGl0KFwiLlwiKTtsZXQgbz0wO2Zvcig7bzxuLmxlbmd0aC0xJiYoYXx8bCk7bysrKXtjb25zdCBlPW5bb107aWYoIShlIGluIGEpKXtpZihsKXRocm93IG5ldyBFcnJvcihcInBsZWFzZSB0cmFuc2ZlciBhIHZhbGlkIHByb3AgcGF0aCB0byBmb3JtIGl0ZW0hXCIpO2JyZWFrfWE9YVtlXX1yZXR1cm57bzphLGs6bltvXSx2Om51bGw9PWE/dm9pZCAwOmFbbltvXV19fWNvbnN0IFJlPSgpPT5NYXRoLmZsb29yKDFlNCpNYXRoLnJhbmRvbSgpKSxIZT1lPT5lfHwwPT09ZT9BcnJheS5pc0FycmF5KGUpP2U6W2VdOltdLFdlPWU9PlwiYm9vbGVhblwiPT10eXBlb2YgZTtmdW5jdGlvbiBqZShlKXtsZXQgdD0hMTtyZXR1cm4gZnVuY3Rpb24oLi4ubCl7dHx8KHQ9ITAsd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKCk9PntlLmFwcGx5KHRoaXMsbCksdD0hMX0pKSl9fWNvbnN0IEtlPWU9PntjbGVhclRpbWVvdXQoZS52YWx1ZSksZS52YWx1ZT1udWxsfTtmdW5jdGlvbiBZZShlKXtyZXR1cm4gT2JqZWN0LmtleXMoZSkubWFwKCh0PT5bdCxlW3RdXSkpfWZ1bmN0aW9uIHFlKCl7Y29uc3QgZT12KCk7cmV0dXJuXCIkRUxFTUVOVFwiaW4gZS5wcm94eT9lLnByb3h5LiRFTEVNRU5UOnt9fWNvbnN0IFVlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGUuZmluZCh0KX07ZnVuY3Rpb24gR2UoZSl7cmV0dXJuISEoIWUmJjAhPT1lfHxNZShlKSYmIWUubGVuZ3RofHxEZShlKSYmIU9iamVjdC5rZXlzKGUpLmxlbmd0aCl9ZnVuY3Rpb24gWGUoZSl7cmV0dXJuIGUucmVkdWNlKCgoZSx0KT0+e2NvbnN0IGw9QXJyYXkuaXNBcnJheSh0KT9YZSh0KTp0O3JldHVybiBlLmNvbmNhdChsKX0pLFtdKX1mdW5jdGlvbiBRZShlKXtyZXR1cm4gQXJyYXkuZnJvbShuZXcgU2V0KGUpKX1mdW5jdGlvbiBaZShlKXtyZXR1cm4gZS52YWx1ZX1jb25zdCBKZT1bXCJjbGFzc1wiLFwic3R5bGVcIl0sZXQ9L15vbltBLVpdLzt2YXIgdHQ9KGU9e30pPT57Y29uc3R7ZXhjbHVkZUxpc3RlbmVyczp0PSExLGV4Y2x1ZGVLZXlzOmw9W119PWUsYT12KCksbj1tKHt9KSxvPWwuY29uY2F0KEplKTtyZXR1cm4gYS5hdHRycz1mKGEuYXR0cnMpLGcoKCgpPT57Y29uc3QgZT1ZZShhLmF0dHJzKS5yZWR1Y2UoKChlLFtsLGFdKT0+KG8uaW5jbHVkZXMobCl8fHQmJmV0LnRlc3QobCl8fChlW2xdPWEpLGUpKSx7fSk7bi52YWx1ZT1lfSkpLG59O2NvbnN0IGx0PWZ1bmN0aW9uKGUsdCxsLGE9ITEpe2UmJnQmJmwmJmUuYWRkRXZlbnRMaXN0ZW5lcih0LGwsYSl9LGF0PWZ1bmN0aW9uKGUsdCxsKXtlJiZ0JiZsJiZlLnJlbW92ZUV2ZW50TGlzdGVuZXIodCxsLCExKX07ZnVuY3Rpb24gbnQoZSx0KXtpZighZXx8IXQpcmV0dXJuITE7aWYoLTEhPT10LmluZGV4T2YoXCIgXCIpKXRocm93IG5ldyBFcnJvcihcImNsYXNzTmFtZSBzaG91bGQgbm90IGNvbnRhaW4gc3BhY2UuXCIpO3JldHVybiBlLmNsYXNzTGlzdD9lLmNsYXNzTGlzdC5jb250YWlucyh0KTooXCIgXCIrZS5jbGFzc05hbWUrXCIgXCIpLmluZGV4T2YoXCIgXCIrdCtcIiBcIik+LTF9ZnVuY3Rpb24gb3QoZSx0KXtpZighZSlyZXR1cm47bGV0IGw9ZS5jbGFzc05hbWU7Y29uc3QgYT0odHx8XCJcIikuc3BsaXQoXCIgXCIpO2ZvcihsZXQgdD0wLG49YS5sZW5ndGg7dDxuO3QrKyl7Y29uc3Qgbj1hW3RdO24mJihlLmNsYXNzTGlzdD9lLmNsYXNzTGlzdC5hZGQobik6bnQoZSxuKXx8KGwrPVwiIFwiK24pKX1lLmNsYXNzTGlzdHx8KGUuY2xhc3NOYW1lPWwpfWZ1bmN0aW9uIGl0KGUsdCl7aWYoIWV8fCF0KXJldHVybjtjb25zdCBsPXQuc3BsaXQoXCIgXCIpO2xldCBhPVwiIFwiK2UuY2xhc3NOYW1lK1wiIFwiO2ZvcihsZXQgdD0wLG49bC5sZW5ndGg7dDxuO3QrKyl7Y29uc3Qgbj1sW3RdO24mJihlLmNsYXNzTGlzdD9lLmNsYXNzTGlzdC5yZW1vdmUobik6bnQoZSxuKSYmKGE9YS5yZXBsYWNlKFwiIFwiK24rXCIgXCIsXCIgXCIpKSl9ZS5jbGFzc0xpc3R8fChlLmNsYXNzTmFtZT0oYXx8XCJcIikucmVwbGFjZSgvXltcXHNcXHVGRUZGXSt8W1xcc1xcdUZFRkZdKyQvZyxcIlwiKSl9Y29uc3QgcnQ9ZnVuY3Rpb24oZSx0KXtpZighemUpe2lmKCFlfHwhdClyZXR1cm4gbnVsbDtcImZsb2F0XCI9PT0odD1CZSh0KSkmJih0PVwiY3NzRmxvYXRcIik7dHJ5e2NvbnN0IGw9ZS5zdHlsZVt0XTtpZihsKXJldHVybiBsO2NvbnN0IGE9ZG9jdW1lbnQuZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZShlLFwiXCIpO3JldHVybiBhP2FbdF06XCJcIn1jYXRjaChsKXtyZXR1cm4gZS5zdHlsZVt0XX19fSxzdD0oZSx0KT0+e2lmKHplKXJldHVybjtyZXR1cm4gcnQoZSxudWxsPT10P1wib3ZlcmZsb3dcIjp0P1wib3ZlcmZsb3cteVwiOlwib3ZlcmZsb3cteFwiKS5tYXRjaCgvKHNjcm9sbHxhdXRvKS8pfSx1dD0oZSx0KT0+e2lmKHplKXJldHVybjtsZXQgbD1lO2Zvcig7bDspe2lmKFt3aW5kb3csZG9jdW1lbnQsZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50XS5pbmNsdWRlcyhsKSlyZXR1cm4gd2luZG93O2lmKHN0KGwsdCkpcmV0dXJuIGw7bD1sLnBhcmVudE5vZGV9cmV0dXJuIGx9LGR0PWU9PntsZXQgdD0wLGw9ZTtmb3IoO2w7KXQrPWwub2Zmc2V0VG9wLGw9bC5vZmZzZXRQYXJlbnQ7cmV0dXJuIHR9LGN0PWU9PmUuc3RvcFByb3BhZ2F0aW9uKCk7bGV0IHB0O2Z1bmN0aW9uIGh0KCl7aWYoemUpcmV0dXJuIDA7aWYodm9pZCAwIT09cHQpcmV0dXJuIHB0O2NvbnN0IGU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtlLmNsYXNzTmFtZT1cImVsLXNjcm9sbGJhcl9fd3JhcFwiLGUuc3R5bGUudmlzaWJpbGl0eT1cImhpZGRlblwiLGUuc3R5bGUud2lkdGg9XCIxMDBweFwiLGUuc3R5bGUucG9zaXRpb249XCJhYnNvbHV0ZVwiLGUuc3R5bGUudG9wPVwiLTk5OTlweFwiLGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZSk7Y29uc3QgdD1lLm9mZnNldFdpZHRoO2Uuc3R5bGUub3ZlcmZsb3c9XCJzY3JvbGxcIjtjb25zdCBsPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7bC5zdHlsZS53aWR0aD1cIjEwMCVcIixlLmFwcGVuZENoaWxkKGwpO2NvbnN0IGE9bC5vZmZzZXRXaWR0aDtyZXR1cm4gZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGUpLHB0PXQtYSxwdH1jbGFzcyB2dCBleHRlbmRzIEVycm9ye2NvbnN0cnVjdG9yKGUpe3N1cGVyKGUpLHRoaXMubmFtZT1cIkVsZW1lbnRQbHVzRXJyb3JcIn19dmFyIG10PShlLHQpPT57dGhyb3cgbmV3IHZ0KGBbJHtlfV0gJHt0fWApfTtjb25zdCBmdD17dGFiOlwiVGFiXCIsZW50ZXI6XCJFbnRlclwiLHNwYWNlOlwiU3BhY2VcIixsZWZ0OlwiQXJyb3dMZWZ0XCIsdXA6XCJBcnJvd1VwXCIscmlnaHQ6XCJBcnJvd1JpZ2h0XCIsZG93bjpcIkFycm93RG93blwiLGVzYzpcIkVzY2FwZVwiLGRlbGV0ZTpcIkRlbGV0ZVwiLGJhY2tzcGFjZTpcIkJhY2tzcGFjZVwifSxndD1lPT57aWYoXCJ0ZXN0XCI9PT1wcm9jZXNzLmVudi5OT0RFX0VOVilyZXR1cm4hMDtyZXR1cm5cImZpeGVkXCIhPT1nZXRDb21wdXRlZFN0eWxlKGUpLnBvc2l0aW9uJiZudWxsIT09ZS5vZmZzZXRQYXJlbnR9LGJ0PWU9PkFycmF5LmZyb20oZS5xdWVyeVNlbGVjdG9yQWxsKCdhW2hyZWZdLGJ1dHRvbjpub3QoW2Rpc2FibGVkXSksYnV0dG9uOm5vdChbaGlkZGVuXSksOm5vdChbdGFiaW5kZXg9XCItMVwiXSksaW5wdXQ6bm90KFtkaXNhYmxlZF0pLGlucHV0Om5vdChbdHlwZT1cImhpZGRlblwiXSksc2VsZWN0Om5vdChbZGlzYWJsZWRdKSx0ZXh0YXJlYTpub3QoW2Rpc2FibGVkXSknKSkuZmlsdGVyKHl0KS5maWx0ZXIoZ3QpLHl0PWU9PntpZihlLnRhYkluZGV4PjB8fDA9PT1lLnRhYkluZGV4JiZudWxsIT09ZS5nZXRBdHRyaWJ1dGUoXCJ0YWJJbmRleFwiKSlyZXR1cm4hMDtpZihlLmRpc2FibGVkKXJldHVybiExO3N3aXRjaChlLm5vZGVOYW1lKXtjYXNlXCJBXCI6cmV0dXJuISFlLmhyZWYmJlwiaWdub3JlXCIhPT1lLnJlbDtjYXNlXCJJTlBVVFwiOnJldHVybiEoXCJoaWRkZW5cIj09PWUudHlwZXx8XCJmaWxlXCI9PT1lLnR5cGUpO2Nhc2VcIkJVVFRPTlwiOmNhc2VcIlNFTEVDVFwiOmNhc2VcIlRFWFRBUkVBXCI6cmV0dXJuITA7ZGVmYXVsdDpyZXR1cm4hMX19LGt0PWU9Pnt2YXIgdDtyZXR1cm4hIXl0KGUpJiYoeHQuSWdub3JlVXRpbEZvY3VzQ2hhbmdlcz0hMCxudWxsPT09KHQ9ZS5mb2N1cyl8fHZvaWQgMD09PXR8fHQuY2FsbChlKSx4dC5JZ25vcmVVdGlsRm9jdXNDaGFuZ2VzPSExLGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ9PT1lKX0sQ3Q9ZnVuY3Rpb24oZSx0LC4uLmwpe2xldCBhO2E9dC5pbmNsdWRlcyhcIm1vdXNlXCIpfHx0LmluY2x1ZGVzKFwiY2xpY2tcIik/XCJNb3VzZUV2ZW50c1wiOnQuaW5jbHVkZXMoXCJrZXlcIik/XCJLZXlib2FyZEV2ZW50XCI6XCJIVE1MRXZlbnRzXCI7Y29uc3Qgbj1kb2N1bWVudC5jcmVhdGVFdmVudChhKTtyZXR1cm4gbi5pbml0RXZlbnQodCwuLi5sKSxlLmRpc3BhdGNoRXZlbnQobiksZX0seHQ9e0lnbm9yZVV0aWxGb2N1c0NoYW5nZXM6ITEsZm9jdXNGaXJzdERlc2NlbmRhbnQ6ZnVuY3Rpb24oZSl7Zm9yKGxldCB0PTA7dDxlLmNoaWxkTm9kZXMubGVuZ3RoO3QrKyl7Y29uc3QgbD1lLmNoaWxkTm9kZXNbdF07aWYoa3QobCl8fHRoaXMuZm9jdXNGaXJzdERlc2NlbmRhbnQobCkpcmV0dXJuITB9cmV0dXJuITF9LGZvY3VzTGFzdERlc2NlbmRhbnQ6ZnVuY3Rpb24oZSl7Zm9yKGxldCB0PWUuY2hpbGROb2Rlcy5sZW5ndGgtMTt0Pj0wO3QtLSl7Y29uc3QgbD1lLmNoaWxkTm9kZXNbdF07aWYoa3QobCl8fHRoaXMuZm9jdXNMYXN0RGVzY2VuZGFudChsKSlyZXR1cm4hMH1yZXR1cm4hMX19LHd0PVtdO3plfHxsdChkb2N1bWVudCxcImtleWRvd25cIiwoZT0+e2lmKDAhPT13dC5sZW5ndGgmJmUuY29kZT09PWZ0LmVzYyl7d3Rbd3QubGVuZ3RoLTFdLmhhbmRsZUNsb3NlKCl9fSkpO2NvbnN0IF90PW5ldyBNYXA7bGV0IFN0O2Z1bmN0aW9uIEV0KGUsdCl7bGV0IGw9W107cmV0dXJuIEFycmF5LmlzQXJyYXkodC5hcmcpP2w9dC5hcmc6bC5wdXNoKHQuYXJnKSxmdW5jdGlvbihhLG4pe2NvbnN0IG89dC5pbnN0YW5jZS5wb3BwZXJSZWYsaT1hLnRhcmdldCxyPW4udGFyZ2V0LHM9IXR8fCF0Lmluc3RhbmNlLHU9IWl8fCFyLGQ9ZS5jb250YWlucyhpKXx8ZS5jb250YWlucyhyKSxjPWU9PT1pLHA9bC5sZW5ndGgmJmwuc29tZSgoZT0+bnVsbD09ZT92b2lkIDA6ZS5jb250YWlucyhpKSkpfHxsLmxlbmd0aCYmbC5pbmNsdWRlcyhyKSxoPW8mJihvLmNvbnRhaW5zKGkpfHxvLmNvbnRhaW5zKHIpKTtzfHx1fHxkfHxjfHxwfHxofHx0LnZhbHVlKCl9fXplfHwobHQoZG9jdW1lbnQsXCJtb3VzZWRvd25cIiwoZT0+U3Q9ZSkpLGx0KGRvY3VtZW50LFwibW91c2V1cFwiLChlPT57Zm9yKGNvbnN0e2RvY3VtZW50SGFuZGxlcjp0fW9mIF90LnZhbHVlcygpKXQoZSxTdCl9KSkpO2NvbnN0IE10PXtiZWZvcmVNb3VudChlLHQpe190LnNldChlLHtkb2N1bWVudEhhbmRsZXI6RXQoZSx0KSxiaW5kaW5nRm46dC52YWx1ZX0pfSx1cGRhdGVkKGUsdCl7X3Quc2V0KGUse2RvY3VtZW50SGFuZGxlcjpFdChlLHQpLGJpbmRpbmdGbjp0LnZhbHVlfSl9LHVubW91bnRlZChlKXtfdC5kZWxldGUoZSl9fTt2YXIgVHQ9e2JlZm9yZU1vdW50KGUsdCl7bGV0IGwsYT1udWxsO2NvbnN0IG49KCk9PnQudmFsdWUmJnQudmFsdWUoKSxvPSgpPT57RGF0ZS5ub3coKS1sPDEwMCYmbigpLGNsZWFySW50ZXJ2YWwoYSksYT1udWxsfTtsdChlLFwibW91c2Vkb3duXCIsKGU9PnswPT09ZS5idXR0b24mJihsPURhdGUubm93KCksZnVuY3Rpb24oZSx0LGwpe2NvbnN0IGE9ZnVuY3Rpb24oLi4ubil7bCYmbC5hcHBseSh0aGlzLG4pLGF0KGUsdCxhKX07bHQoZSx0LGEpfShkb2N1bWVudCxcIm1vdXNldXBcIixvKSxjbGVhckludGVydmFsKGEpLGE9c2V0SW50ZXJ2YWwobiwxMDApKX0pKX19O2NvbnN0IE50PXtiZWZvcmVNb3VudChlKXtlW1wiX3RyYXAtZm9jdXMtY2hpbGRyZW5cIl09YnQoZSksZVtcIl90cmFwLWZvY3VzLWhhbmRsZXJcIl09dD0+e3ZhciBsO2NvbnN0IGE9ZVtcIl90cmFwLWZvY3VzLWNoaWxkcmVuXCJdO2lmKGEubGVuZ3RoPjAmJnQuY29kZT09PWZ0LnRhYil7aWYoMT09PWEubGVuZ3RoKXJldHVybiB0LnByZXZlbnREZWZhdWx0KCksdm9pZChkb2N1bWVudC5hY3RpdmVFbGVtZW50IT09YVswXSYmYVswXS5mb2N1cygpKTtjb25zdCBlPXQuc2hpZnRLZXksbj10LnRhcmdldD09PWFbMF0sbz10LnRhcmdldD09PWFbYS5sZW5ndGgtMV07aWYobiYmZSYmKHQucHJldmVudERlZmF1bHQoKSxhW2EubGVuZ3RoLTFdLmZvY3VzKCkpLG8mJiFlJiYodC5wcmV2ZW50RGVmYXVsdCgpLGFbMF0uZm9jdXMoKSksXCJ0ZXN0XCI9PT1wcm9jZXNzLmVudi5OT0RFX0VOVil7Y29uc3Qgbj1hLmZpbmRJbmRleCgoZT0+ZT09PXQudGFyZ2V0KSk7LTEhPT1uJiYobnVsbD09PShsPWFbZT9uLTE6bisxXSl8fHZvaWQgMD09PWx8fGwuZm9jdXMoKSl9fX0sbHQoZG9jdW1lbnQsXCJrZXlkb3duXCIsZVtcIl90cmFwLWZvY3VzLWhhbmRsZXJcIl0pfSx1cGRhdGVkKGUpe2soKCgpPT57ZVtcIl90cmFwLWZvY3VzLWNoaWxkcmVuXCJdPWJ0KGUpfSkpfSx1bm1vdW50ZWQoZSl7YXQoZG9jdW1lbnQsXCJrZXlkb3duXCIsZVtcIl90cmFwLWZvY3VzLWhhbmRsZXJcIl0pfX0sRHQ9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIG5hdmlnYXRvciYmbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLmluZGV4T2YoXCJmaXJlZm94XCIpPi0xLE90PXtiZWZvcmVNb3VudChlLHQpeyFmdW5jdGlvbihlLHQpe2lmKGUmJmUuYWRkRXZlbnRMaXN0ZW5lcil7Y29uc3QgbD1mdW5jdGlvbihlKXtjb25zdCBsPWFlKGUpO3QmJnQuYXBwbHkodGhpcyxbZSxsXSl9O0R0P2UuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTU1vdXNlU2Nyb2xsXCIsbCk6ZS5vbm1vdXNld2hlZWw9bH19KGUsdC52YWx1ZSl9fSxQdD1cInVwZGF0ZTptb2RlbFZhbHVlXCIsVnQ9e3ZhbGlkYXRpbmc6XCJlbC1pY29uLWxvYWRpbmdcIixzdWNjZXNzOlwiZWwtaWNvbi1jaXJjbGUtY2hlY2tcIixlcnJvcjpcImVsLWljb24tY2lyY2xlLWNsb3NlXCJ9O2Z1bmN0aW9uIEl0KGUpe3JldHVybi8oWyhcXHVBQzAwLVxcdUQ3QUYpfChcXHUzMTMwLVxcdTMxOEYpXSkrL2dpLnRlc3QoZSl9Y29uc3QgQXQ9ZT0+W1wiXCIsXCJsYXJnZVwiLFwibWVkaXVtXCIsXCJzbWFsbFwiLFwibWluaVwiXS5pbmNsdWRlcyhlKSxCdD1cImVsLmZvcm0uYWRkRmllbGRcIixMdD1cImVsLmZvcm0ucmVtb3ZlRmllbGRcIjt2YXIgenQ9ZSh7bmFtZTpcIkVsRm9ybVwiLHByb3BzOnttb2RlbDpPYmplY3QscnVsZXM6T2JqZWN0LGxhYmVsUG9zaXRpb246U3RyaW5nLGxhYmVsV2lkdGg6U3RyaW5nLGxhYmVsU3VmZml4Ont0eXBlOlN0cmluZyxkZWZhdWx0OlwiXCJ9LGlubGluZTpCb29sZWFuLGlubGluZU1lc3NhZ2U6Qm9vbGVhbixzdGF0dXNJY29uOkJvb2xlYW4sc2hvd01lc3NhZ2U6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiEwfSxzaXplOlN0cmluZyxkaXNhYmxlZDpCb29sZWFuLHZhbGlkYXRlT25SdWxlQ2hhbmdlOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMH0saGlkZVJlcXVpcmVkQXN0ZXJpc2s6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiExfX0sc2V0dXAoZSx7ZW1pdDphfSl7Y29uc3Qgbj1uZSgpLG89W107eSgoKCk9PmUucnVsZXMpLCgoKT0+e28uZm9yRWFjaCgoZT0+e2UucmVtb3ZlVmFsaWRhdGVFdmVudHMoKSxlLmFkZFZhbGlkYXRlRXZlbnRzKCl9KSksZS52YWxpZGF0ZU9uUnVsZUNoYW5nZSYmcygoKCk9Pih7fSkpKX0pKSxuLm9uKEJ0LChlPT57ZSYmby5wdXNoKGUpfSkpLG4ub24oTHQsKGU9PntlLnByb3AmJm8uc3BsaWNlKG8uaW5kZXhPZihlKSwxKX0pKTtjb25zdCBpPSgpPT57ZS5tb2RlbD9vLmZvckVhY2goKGU9PntlLnJlc2V0RmllbGQoKX0pKTpjb25zb2xlLndhcm4oXCJbRWxlbWVudCBXYXJuXVtGb3JtXW1vZGVsIGlzIHJlcXVpcmVkIGZvciByZXNldEZpZWxkcyB0byB3b3JrLlwiKX0scj0oZT1bXSk9PnsoZS5sZW5ndGg/XCJzdHJpbmdcIj09dHlwZW9mIGU/by5maWx0ZXIoKHQ9PmU9PT10LnByb3ApKTpvLmZpbHRlcigodD0+ZS5pbmRleE9mKHQucHJvcCk+LTEpKTpvKS5mb3JFYWNoKChlPT57ZS5jbGVhclZhbGlkYXRlKCl9KSl9LHM9dD0+e2lmKCFlLm1vZGVsKXJldHVybiB2b2lkIGNvbnNvbGUud2FybihcIltFbGVtZW50IFdhcm5dW0Zvcm1dbW9kZWwgaXMgcmVxdWlyZWQgZm9yIHZhbGlkYXRlIHRvIHdvcmshXCIpO2xldCBsO1wiZnVuY3Rpb25cIiE9dHlwZW9mIHQmJihsPW5ldyBQcm9taXNlKCgoZSxsKT0+e3Q9ZnVuY3Rpb24odCxhKXt0P2UoITApOmwoYSl9fSkpKSwwPT09by5sZW5ndGgmJnQoITApO2xldCBhPSEwLG49MCxpPXt9O2Zvcihjb25zdCBlIG9mIG8pZS52YWxpZGF0ZShcIlwiLCgoZSxsKT0+e2UmJihhPSExKSxpPU9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSxpKSxsKSwrK249PT1vLmxlbmd0aCYmdChhLGkpfSkpO3JldHVybiBsfSx1PShlLHQpPT57ZT1bXS5jb25jYXQoZSk7Y29uc3QgbD1vLmZpbHRlcigodD0+LTEhPT1lLmluZGV4T2YodC5wcm9wKSkpO28ubGVuZ3RoP2wuZm9yRWFjaCgoZT0+e2UudmFsaWRhdGUoXCJcIix0KX0pKTpjb25zb2xlLndhcm4oXCJbRWxlbWVudCBXYXJuXXBsZWFzZSBwYXNzIGNvcnJlY3QgcHJvcHMhXCIpfSxkPWYoT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe2Zvcm1NaXR0Om59LEMoZSkpLHtyZXNldEZpZWxkczppLGNsZWFyVmFsaWRhdGU6cix2YWxpZGF0ZUZpZWxkOnUsZW1pdDphfSksZnVuY3Rpb24oKXtjb25zdCBlPXQoW10pO2Z1bmN0aW9uIGEodCl7Y29uc3QgbD1lLnZhbHVlLmluZGV4T2YodCk7cmV0dXJuLTE9PT1sJiZjb25zb2xlLndhcm4oXCJbRWxlbWVudCBXYXJuXVtFbGVtZW50Rm9ybV11bmV4cGVjdGVkIHdpZHRoIFwiK3QpLGx9cmV0dXJue2F1dG9MYWJlbFdpZHRoOmwoKCgpPT57aWYoIWUudmFsdWUubGVuZ3RoKXJldHVyblwiMFwiO2NvbnN0IHQ9TWF0aC5tYXgoLi4uZS52YWx1ZSk7cmV0dXJuIHQ/dCtcInB4XCI6XCJcIn0pKSxyZWdpc3RlckxhYmVsV2lkdGg6ZnVuY3Rpb24odCxsKXtpZih0JiZsKXtjb25zdCBuPWEobCk7ZS52YWx1ZS5zcGxpY2UobiwxLHQpfWVsc2UgdCYmZS52YWx1ZS5wdXNoKHQpfSxkZXJlZ2lzdGVyTGFiZWxXaWR0aDpmdW5jdGlvbih0KXtjb25zdCBsPWEodCk7bD4tMSYmZS52YWx1ZS5zcGxpY2UobCwxKX19fSgpKSk7cmV0dXJuIHgoXCJlbEZvcm1cIixkKSx7dmFsaWRhdGU6cyxyZXNldEZpZWxkczppLGNsZWFyVmFsaWRhdGU6cix2YWxpZGF0ZUZpZWxkOnV9fX0pO2xldCBGdDt6dC5yZW5kZXI9ZnVuY3Rpb24oZSx0LGwsbyxpLHIpe3JldHVybiBhKCksbihcImZvcm1cIix7Y2xhc3M6W1wiZWwtZm9ybVwiLFtlLmxhYmVsUG9zaXRpb24/XCJlbC1mb3JtLS1sYWJlbC1cIitlLmxhYmVsUG9zaXRpb246XCJcIix7XCJlbC1mb3JtLS1pbmxpbmVcIjplLmlubGluZX1dXX0sW2QoZS4kc2xvdHMsXCJkZWZhdWx0XCIpXSwyKX0senQuX19maWxlPVwicGFja2FnZXMvZm9ybS9zcmMvZm9ybS52dWVcIix6dC5pbnN0YWxsPWU9PntlLmNvbXBvbmVudCh6dC5uYW1lLHp0KX07Y29uc3QgJHQ9W1wibGV0dGVyLXNwYWNpbmdcIixcImxpbmUtaGVpZ2h0XCIsXCJwYWRkaW5nLXRvcFwiLFwicGFkZGluZy1ib3R0b21cIixcImZvbnQtZmFtaWx5XCIsXCJmb250LXdlaWdodFwiLFwiZm9udC1zaXplXCIsXCJ0ZXh0LXJlbmRlcmluZ1wiLFwidGV4dC10cmFuc2Zvcm1cIixcIndpZHRoXCIsXCJ0ZXh0LWluZGVudFwiLFwicGFkZGluZy1sZWZ0XCIsXCJwYWRkaW5nLXJpZ2h0XCIsXCJib3JkZXItd2lkdGhcIixcImJveC1zaXppbmdcIl07ZnVuY3Rpb24gUnQoZSx0PTEsbD1udWxsKXt2YXIgYTtGdHx8KEZ0PWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZXh0YXJlYVwiKSxkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKEZ0KSk7Y29uc3R7cGFkZGluZ1NpemU6bixib3JkZXJTaXplOm8sYm94U2l6aW5nOmksY29udGV4dFN0eWxlOnJ9PWZ1bmN0aW9uKGUpe2NvbnN0IHQ9d2luZG93LmdldENvbXB1dGVkU3R5bGUoZSksbD10LmdldFByb3BlcnR5VmFsdWUoXCJib3gtc2l6aW5nXCIpLGE9cGFyc2VGbG9hdCh0LmdldFByb3BlcnR5VmFsdWUoXCJwYWRkaW5nLWJvdHRvbVwiKSkrcGFyc2VGbG9hdCh0LmdldFByb3BlcnR5VmFsdWUoXCJwYWRkaW5nLXRvcFwiKSksbj1wYXJzZUZsb2F0KHQuZ2V0UHJvcGVydHlWYWx1ZShcImJvcmRlci1ib3R0b20td2lkdGhcIikpK3BhcnNlRmxvYXQodC5nZXRQcm9wZXJ0eVZhbHVlKFwiYm9yZGVyLXRvcC13aWR0aFwiKSk7cmV0dXJue2NvbnRleHRTdHlsZTokdC5tYXAoKGU9PmAke2V9OiR7dC5nZXRQcm9wZXJ0eVZhbHVlKGUpfWApKS5qb2luKFwiO1wiKSxwYWRkaW5nU2l6ZTphLGJvcmRlclNpemU6bixib3hTaXppbmc6bH19KGUpO0Z0LnNldEF0dHJpYnV0ZShcInN0eWxlXCIscitcIjtcXG4gIGhlaWdodDowICFpbXBvcnRhbnQ7XFxuICB2aXNpYmlsaXR5OmhpZGRlbiAhaW1wb3J0YW50O1xcbiAgb3ZlcmZsb3c6aGlkZGVuICFpbXBvcnRhbnQ7XFxuICBwb3NpdGlvbjphYnNvbHV0ZSAhaW1wb3J0YW50O1xcbiAgei1pbmRleDotMTAwMCAhaW1wb3J0YW50O1xcbiAgdG9wOjAgIWltcG9ydGFudDtcXG4gIHJpZ2h0OjAgIWltcG9ydGFudDtcXG5cIiksRnQudmFsdWU9ZS52YWx1ZXx8ZS5wbGFjZWhvbGRlcnx8XCJcIjtsZXQgcz1GdC5zY3JvbGxIZWlnaHQ7Y29uc3QgdT17fTtcImJvcmRlci1ib3hcIj09PWk/cys9bzpcImNvbnRlbnQtYm94XCI9PT1pJiYocy09biksRnQudmFsdWU9XCJcIjtjb25zdCBkPUZ0LnNjcm9sbEhlaWdodC1uO2lmKG51bGwhPT10KXtsZXQgZT1kKnQ7XCJib3JkZXItYm94XCI9PT1pJiYoZT1lK24rbykscz1NYXRoLm1heChlLHMpLHUubWluSGVpZ2h0PWUrXCJweFwifWlmKG51bGwhPT1sKXtsZXQgZT1kKmw7XCJib3JkZXItYm94XCI9PT1pJiYoZT1lK24rbykscz1NYXRoLm1pbihlLHMpfXJldHVybiB1LmhlaWdodD1zK1wicHhcIixudWxsPT09KGE9RnQucGFyZW50Tm9kZSl8fHZvaWQgMD09PWF8fGEucmVtb3ZlQ2hpbGQoRnQpLEZ0PW51bGwsdX1jb25zdCBIdD17c3VmZml4OlwiYXBwZW5kXCIscHJlZml4OlwicHJlcGVuZFwifTt2YXIgV3Q9ZSh7bmFtZTpcIkVsSW5wdXRcIixpbmhlcml0QXR0cnM6ITEscHJvcHM6e21vZGVsVmFsdWU6e3R5cGU6W1N0cmluZyxOdW1iZXJdLGRlZmF1bHQ6XCJcIn0sdHlwZTp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcInRleHRcIn0sc2l6ZTp7dHlwZTpTdHJpbmcsdmFsaWRhdG9yOkF0fSxyZXNpemU6e3R5cGU6U3RyaW5nLHZhbGlkYXRvcjplPT5bXCJub25lXCIsXCJib3RoXCIsXCJob3Jpem9udGFsXCIsXCJ2ZXJ0aWNhbFwiXS5pbmNsdWRlcyhlKX0sYXV0b3NpemU6e3R5cGU6W0Jvb2xlYW4sT2JqZWN0XSxkZWZhdWx0OiExfSxhdXRvY29tcGxldGU6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJvZmZcIix2YWxpZGF0b3I6ZT0+W1wib25cIixcIm9mZlwiXS5pbmNsdWRlcyhlKX0scGxhY2Vob2xkZXI6e3R5cGU6U3RyaW5nfSxmb3JtOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiXCJ9LGRpc2FibGVkOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMX0scmVhZG9ubHk6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiExfSxjbGVhcmFibGU6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiExfSxzaG93UGFzc3dvcmQ6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiExfSxzaG93V29yZExpbWl0Ont0eXBlOkJvb2xlYW4sZGVmYXVsdDohMX0sc3VmZml4SWNvbjp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIlwifSxwcmVmaXhJY29uOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiXCJ9LGxhYmVsOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiXCJ9LHRhYmluZGV4Ont0eXBlOlN0cmluZyxkZWZhdWx0OlwiXCJ9LHZhbGlkYXRlRXZlbnQ6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiEwfX0sZW1pdHM6W1B0LFwiaW5wdXRcIixcImNoYW5nZVwiLFwiZm9jdXNcIixcImJsdXJcIixcImNsZWFyXCIsXCJtb3VzZWxlYXZlXCIsXCJtb3VzZWVudGVyXCIsXCJrZXlkb3duXCJdLHNldHVwKGUsYSl7Y29uc3Qgbj12KCksbz10dCgpLGk9cWUoKSxyPXcoXCJlbEZvcm1cIix7fSkscz13KFwiZWxGb3JtSXRlbVwiLHt9KSx1PXQobnVsbCksZD10KG51bGwpLGM9dCghMSkscD10KCExKSxoPXQoITEpLGY9dCghMSksZz1tKHt9KSxiPWwoKCgpPT51LnZhbHVlfHxkLnZhbHVlKSksQz1sKCgoKT0+ZS5zaXplfHxzLnNpemV8fGkuc2l6ZSkpLHg9bCgoKCk9PnIuc3RhdHVzSWNvbikpLEU9bCgoKCk9PnMudmFsaWRhdGVTdGF0ZXx8XCJcIikpLE09bCgoKCk9PlZ0W0UudmFsdWVdKSksVD1sKCgoKT0+T2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LGcudmFsdWUpLHtyZXNpemU6ZS5yZXNpemV9KSkpLE49bCgoKCk9PmUuZGlzYWJsZWR8fHIuZGlzYWJsZWQpKSxEPWwoKCgpPT5udWxsPT09ZS5tb2RlbFZhbHVlfHx2b2lkIDA9PT1lLm1vZGVsVmFsdWU/XCJcIjpTdHJpbmcoZS5tb2RlbFZhbHVlKSkpLE89bCgoKCk9PmEuYXR0cnMubWF4bGVuZ3RoKSksUD1sKCgoKT0+ZS5jbGVhcmFibGUmJiFOLnZhbHVlJiYhZS5yZWFkb25seSYmRC52YWx1ZSYmKGMudmFsdWV8fHAudmFsdWUpKSksVj1sKCgoKT0+ZS5zaG93UGFzc3dvcmQmJiFOLnZhbHVlJiYhZS5yZWFkb25seSYmKCEhRC52YWx1ZXx8Yy52YWx1ZSkpKSxJPWwoKCgpPT5lLnNob3dXb3JkTGltaXQmJmEuYXR0cnMubWF4bGVuZ3RoJiYoXCJ0ZXh0XCI9PT1lLnR5cGV8fFwidGV4dGFyZWFcIj09PWUudHlwZSkmJiFOLnZhbHVlJiYhZS5yZWFkb25seSYmIWUuc2hvd1Bhc3N3b3JkKSksQT1sKCgoKT0+XCJudW1iZXJcIj09dHlwZW9mIGUubW9kZWxWYWx1ZT9TdHJpbmcoZS5tb2RlbFZhbHVlKS5sZW5ndGg6KGUubW9kZWxWYWx1ZXx8XCJcIikubGVuZ3RoKSksQj1sKCgoKT0+SS52YWx1ZSYmQS52YWx1ZT5PLnZhbHVlKSksTD0oKT0+e2NvbnN0e3R5cGU6dCxhdXRvc2l6ZTpsfT1lO2lmKCF6ZSYmXCJ0ZXh0YXJlYVwiPT09dClpZihsKXtjb25zdCBlPURlKGwpP2wubWluUm93czp2b2lkIDAsdD1EZShsKT9sLm1heFJvd3M6dm9pZCAwO2cudmFsdWU9UnQoZC52YWx1ZSxlLHQpfWVsc2UgZy52YWx1ZT17bWluSGVpZ2h0OlJ0KGQudmFsdWUpLm1pbkhlaWdodH19LHo9KCk9Pntjb25zdCBlPWIudmFsdWU7ZSYmZS52YWx1ZSE9PUQudmFsdWUmJihlLnZhbHVlPUQudmFsdWUpfSxGPWU9Pntjb25zdHtlbDp0fT1uLnZub2RlLGw9QXJyYXkuZnJvbSh0LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuZWwtaW5wdXRfX1wiK2UpKS5maW5kKChlPT5lLnBhcmVudE5vZGU9PT10KSk7aWYoIWwpcmV0dXJuO2NvbnN0IG89SHRbZV07YS5zbG90c1tvXT9sLnN0eWxlLnRyYW5zZm9ybT1gdHJhbnNsYXRlWCgke1wic3VmZml4XCI9PT1lP1wiLVwiOlwiXCJ9JHt0LnF1ZXJ5U2VsZWN0b3IoXCIuZWwtaW5wdXQtZ3JvdXBfX1wiK28pLm9mZnNldFdpZHRofXB4KWA6bC5yZW1vdmVBdHRyaWJ1dGUoXCJzdHlsZVwiKX0sJD0oKT0+e0YoXCJwcmVmaXhcIiksRihcInN1ZmZpeFwiKX0sUj1lPT57Y29uc3R7dmFsdWU6dH09ZS50YXJnZXQ7aC52YWx1ZXx8dCE9PUQudmFsdWUmJihhLmVtaXQoUHQsdCksYS5lbWl0KFwiaW5wdXRcIix0KSxrKHopKX0sSD0oKT0+e2soKCgpPT57Yi52YWx1ZS5mb2N1cygpfSkpfTt5KCgoKT0+ZS5tb2RlbFZhbHVlKSwodD0+e3ZhciBsO2soTCksZS52YWxpZGF0ZUV2ZW50JiYobnVsbD09PShsPXMuZm9ybUl0ZW1NaXR0KXx8dm9pZCAwPT09bHx8bC5lbWl0KFwiZWwuZm9ybS5jaGFuZ2VcIixbdF0pKX0pKSx5KEQsKCgpPT57eigpfSkpLHkoKCgpPT5lLnR5cGUpLCgoKT0+e2soKCgpPT57eigpLEwoKSwkKCl9KSl9KSksXygoKCk9Pnt6KCksJCgpLGsoTCl9KSksUygoKCk9PntrKCQpfSkpO3JldHVybntpbnB1dDp1LHRleHRhcmVhOmQsYXR0cnM6byxpbnB1dFNpemU6Qyx2YWxpZGF0ZVN0YXRlOkUsdmFsaWRhdGVJY29uOk0sdGV4dGFyZWFTdHlsZTpULGlucHV0RGlzYWJsZWQ6TixzaG93Q2xlYXI6UCxzaG93UHdkVmlzaWJsZTpWLGlzV29yZExpbWl0VmlzaWJsZTpJLHVwcGVyTGltaXQ6Tyx0ZXh0TGVuZ3RoOkEsaG92ZXJpbmc6cCxpbnB1dEV4Y2VlZDpCLHBhc3N3b3JkVmlzaWJsZTpmLGlucHV0T3JUZXh0YXJlYTpiLGhhbmRsZUlucHV0OlIsaGFuZGxlQ2hhbmdlOmU9PnthLmVtaXQoXCJjaGFuZ2VcIixlLnRhcmdldC52YWx1ZSl9LGhhbmRsZUZvY3VzOmU9PntjLnZhbHVlPSEwLGEuZW1pdChcImZvY3VzXCIsZSl9LGhhbmRsZUJsdXI6dD0+e3ZhciBsO2MudmFsdWU9ITEsYS5lbWl0KFwiYmx1clwiLHQpLGUudmFsaWRhdGVFdmVudCYmKG51bGw9PT0obD1zLmZvcm1JdGVtTWl0dCl8fHZvaWQgMD09PWx8fGwuZW1pdChcImVsLmZvcm0uYmx1clwiLFtlLm1vZGVsVmFsdWVdKSl9LGhhbmRsZUNvbXBvc2l0aW9uU3RhcnQ6KCk9PntoLnZhbHVlPSEwfSxoYW5kbGVDb21wb3NpdGlvblVwZGF0ZTplPT57Y29uc3QgdD1lLnRhcmdldC52YWx1ZSxsPXRbdC5sZW5ndGgtMV18fFwiXCI7aC52YWx1ZT0hSXQobCl9LGhhbmRsZUNvbXBvc2l0aW9uRW5kOmU9PntoLnZhbHVlJiYoaC52YWx1ZT0hMSxSKGUpKX0saGFuZGxlUGFzc3dvcmRWaXNpYmxlOigpPT57Zi52YWx1ZT0hZi52YWx1ZSxIKCl9LGNsZWFyOigpPT57YS5lbWl0KFB0LFwiXCIpLGEuZW1pdChcImNoYW5nZVwiLFwiXCIpLGEuZW1pdChcImNsZWFyXCIpfSxzZWxlY3Q6KCk9PntiLnZhbHVlLnNlbGVjdCgpfSxmb2N1czpILGJsdXI6KCk9PntiLnZhbHVlLmJsdXIoKX0sZ2V0U3VmZml4VmlzaWJsZTooKT0+YS5zbG90cy5zdWZmaXh8fGUuc3VmZml4SWNvbnx8UC52YWx1ZXx8ZS5zaG93UGFzc3dvcmR8fEkudmFsdWV8fEUudmFsdWUmJngudmFsdWUsb25Nb3VzZUxlYXZlOmU9PntwLnZhbHVlPSExLGEuZW1pdChcIm1vdXNlbGVhdmVcIixlKX0sb25Nb3VzZUVudGVyOmU9PntwLnZhbHVlPSEwLGEuZW1pdChcIm1vdXNlZW50ZXJcIixlKX0saGFuZGxlS2V5ZG93bjplPT57YS5lbWl0KFwia2V5ZG93blwiLGUpfX19fSk7Y29uc3QganQ9e2tleTowLGNsYXNzOlwiZWwtaW5wdXQtZ3JvdXBfX3ByZXBlbmRcIn0sS3Q9e2tleToyLGNsYXNzOlwiZWwtaW5wdXRfX3ByZWZpeFwifSxZdD17a2V5OjMsY2xhc3M6XCJlbC1pbnB1dF9fc3VmZml4XCJ9LHF0PXtjbGFzczpcImVsLWlucHV0X19zdWZmaXgtaW5uZXJcIn0sVXQ9e2tleTozLGNsYXNzOlwiZWwtaW5wdXRfX2NvdW50XCJ9LEd0PXtjbGFzczpcImVsLWlucHV0X19jb3VudC1pbm5lclwifSxYdD17a2V5OjQsY2xhc3M6XCJlbC1pbnB1dC1ncm91cF9fYXBwZW5kXCJ9LFF0PXtrZXk6MixjbGFzczpcImVsLWlucHV0X19jb3VudFwifTtXdC5yZW5kZXI9ZnVuY3Rpb24oZSx0LGwsbyxpLHIpe3JldHVybiBhKCksbihcImRpdlwiLHtjbGFzczpbXCJ0ZXh0YXJlYVwiPT09ZS50eXBlP1wiZWwtdGV4dGFyZWFcIjpcImVsLWlucHV0XCIsZS5pbnB1dFNpemU/XCJlbC1pbnB1dC0tXCIrZS5pbnB1dFNpemU6XCJcIix7XCJpcy1kaXNhYmxlZFwiOmUuaW5wdXREaXNhYmxlZCxcImlzLWV4Y2VlZFwiOmUuaW5wdXRFeGNlZWQsXCJlbC1pbnB1dC1ncm91cFwiOmUuJHNsb3RzLnByZXBlbmR8fGUuJHNsb3RzLmFwcGVuZCxcImVsLWlucHV0LWdyb3VwLS1hcHBlbmRcIjplLiRzbG90cy5hcHBlbmQsXCJlbC1pbnB1dC1ncm91cC0tcHJlcGVuZFwiOmUuJHNsb3RzLnByZXBlbmQsXCJlbC1pbnB1dC0tcHJlZml4XCI6ZS4kc2xvdHMucHJlZml4fHxlLnByZWZpeEljb24sXCJlbC1pbnB1dC0tc3VmZml4XCI6ZS4kc2xvdHMuc3VmZml4fHxlLnN1ZmZpeEljb258fGUuY2xlYXJhYmxlfHxlLnNob3dQYXNzd29yZH0sZS4kYXR0cnMuY2xhc3NdLHN0eWxlOmUuJGF0dHJzLnN0eWxlLG9uTW91c2VlbnRlcjp0WzE5XXx8KHRbMTldPSguLi50KT0+ZS5vbk1vdXNlRW50ZXIoLi4udCkpLG9uTW91c2VsZWF2ZTp0WzIwXXx8KHRbMjBdPSguLi50KT0+ZS5vbk1vdXNlTGVhdmUoLi4udCkpfSxbXCJ0ZXh0YXJlYVwiIT09ZS50eXBlPyhhKCksbihFLHtrZXk6MH0sW3UoXCIg5YmN572u5YWD57SgIFwiKSxlLiRzbG90cy5wcmVwZW5kPyhhKCksbihcImRpdlwiLGp0LFtkKGUuJHNsb3RzLFwicHJlcGVuZFwiKV0pKTp1KFwidi1pZlwiLCEwKSxcInRleHRhcmVhXCIhPT1lLnR5cGU/KGEoKSxuKFwiaW5wdXRcIixNKHtrZXk6MSxyZWY6XCJpbnB1dFwiLGNsYXNzOlwiZWwtaW5wdXRfX2lubmVyXCJ9LGUuYXR0cnMse3R5cGU6ZS5zaG93UGFzc3dvcmQ/ZS5wYXNzd29yZFZpc2libGU/XCJ0ZXh0XCI6XCJwYXNzd29yZFwiOmUudHlwZSxkaXNhYmxlZDplLmlucHV0RGlzYWJsZWQscmVhZG9ubHk6ZS5yZWFkb25seSxhdXRvY29tcGxldGU6ZS5hdXRvY29tcGxldGUsdGFiaW5kZXg6ZS50YWJpbmRleCxcImFyaWEtbGFiZWxcIjplLmxhYmVsLHBsYWNlaG9sZGVyOmUucGxhY2Vob2xkZXIsb25Db21wb3NpdGlvbnN0YXJ0OnRbMV18fCh0WzFdPSguLi50KT0+ZS5oYW5kbGVDb21wb3NpdGlvblN0YXJ0KC4uLnQpKSxvbkNvbXBvc2l0aW9udXBkYXRlOnRbMl18fCh0WzJdPSguLi50KT0+ZS5oYW5kbGVDb21wb3NpdGlvblVwZGF0ZSguLi50KSksb25Db21wb3NpdGlvbmVuZDp0WzNdfHwodFszXT0oLi4udCk9PmUuaGFuZGxlQ29tcG9zaXRpb25FbmQoLi4udCkpLG9uSW5wdXQ6dFs0XXx8KHRbNF09KC4uLnQpPT5lLmhhbmRsZUlucHV0KC4uLnQpKSxvbkZvY3VzOnRbNV18fCh0WzVdPSguLi50KT0+ZS5oYW5kbGVGb2N1cyguLi50KSksb25CbHVyOnRbNl18fCh0WzZdPSguLi50KT0+ZS5oYW5kbGVCbHVyKC4uLnQpKSxvbkNoYW5nZTp0WzddfHwodFs3XT0oLi4udCk9PmUuaGFuZGxlQ2hhbmdlKC4uLnQpKSxvbktleWRvd246dFs4XXx8KHRbOF09KC4uLnQpPT5lLmhhbmRsZUtleWRvd24oLi4udCkpfSksbnVsbCwxNixbXCJ0eXBlXCIsXCJkaXNhYmxlZFwiLFwicmVhZG9ubHlcIixcImF1dG9jb21wbGV0ZVwiLFwidGFiaW5kZXhcIixcImFyaWEtbGFiZWxcIixcInBsYWNlaG9sZGVyXCJdKSk6dShcInYtaWZcIiwhMCksdShcIiDliY3nva7lhoXlrrkgXCIpLGUuJHNsb3RzLnByZWZpeHx8ZS5wcmVmaXhJY29uPyhhKCksbihcInNwYW5cIixLdCxbZChlLiRzbG90cyxcInByZWZpeFwiKSxlLnByZWZpeEljb24/KGEoKSxuKFwiaVwiLHtrZXk6MCxjbGFzczpbXCJlbC1pbnB1dF9faWNvblwiLGUucHJlZml4SWNvbl19LG51bGwsMikpOnUoXCJ2LWlmXCIsITApXSkpOnUoXCJ2LWlmXCIsITApLHUoXCIg5ZCO572u5YaF5a65IFwiKSxlLmdldFN1ZmZpeFZpc2libGUoKT8oYSgpLG4oXCJzcGFuXCIsWXQsW3MoXCJzcGFuXCIscXQsW2Uuc2hvd0NsZWFyJiZlLnNob3dQd2RWaXNpYmxlJiZlLmlzV29yZExpbWl0VmlzaWJsZT91KFwidi1pZlwiLCEwKTooYSgpLG4oRSx7a2V5OjB9LFtkKGUuJHNsb3RzLFwic3VmZml4XCIpLGUuc3VmZml4SWNvbj8oYSgpLG4oXCJpXCIse2tleTowLGNsYXNzOltcImVsLWlucHV0X19pY29uXCIsZS5zdWZmaXhJY29uXX0sbnVsbCwyKSk6dShcInYtaWZcIiwhMCldLDY0KSksZS5zaG93Q2xlYXI/KGEoKSxuKFwiaVwiLHtrZXk6MSxjbGFzczpcImVsLWlucHV0X19pY29uIGVsLWljb24tY2lyY2xlLWNsb3NlIGVsLWlucHV0X19jbGVhclwiLG9uTW91c2Vkb3duOnRbOV18fCh0WzldPVQoKCgpPT57fSksW1wicHJldmVudFwiXSkpLG9uQ2xpY2s6dFsxMF18fCh0WzEwXT0oLi4udCk9PmUuY2xlYXIoLi4udCkpfSxudWxsLDMyKSk6dShcInYtaWZcIiwhMCksZS5zaG93UHdkVmlzaWJsZT8oYSgpLG4oXCJpXCIse2tleToyLGNsYXNzOlwiZWwtaW5wdXRfX2ljb24gZWwtaWNvbi12aWV3IGVsLWlucHV0X19jbGVhclwiLG9uQ2xpY2s6dFsxMV18fCh0WzExXT0oLi4udCk9PmUuaGFuZGxlUGFzc3dvcmRWaXNpYmxlKC4uLnQpKX0pKTp1KFwidi1pZlwiLCEwKSxlLmlzV29yZExpbWl0VmlzaWJsZT8oYSgpLG4oXCJzcGFuXCIsVXQsW3MoXCJzcGFuXCIsR3QscChlLnRleHRMZW5ndGgpK1wiL1wiK3AoZS51cHBlckxpbWl0KSwxKV0pKTp1KFwidi1pZlwiLCEwKV0pLGUudmFsaWRhdGVTdGF0ZT8oYSgpLG4oXCJpXCIse2tleTowLGNsYXNzOltcImVsLWlucHV0X19pY29uXCIsXCJlbC1pbnB1dF9fdmFsaWRhdGVJY29uXCIsZS52YWxpZGF0ZUljb25dfSxudWxsLDIpKTp1KFwidi1pZlwiLCEwKV0pKTp1KFwidi1pZlwiLCEwKSx1KFwiIOWQjue9ruWFg+e0oCBcIiksZS4kc2xvdHMuYXBwZW5kPyhhKCksbihcImRpdlwiLFh0LFtkKGUuJHNsb3RzLFwiYXBwZW5kXCIpXSkpOnUoXCJ2LWlmXCIsITApXSw2NCkpOihhKCksbihcInRleHRhcmVhXCIsTSh7a2V5OjEscmVmOlwidGV4dGFyZWFcIixjbGFzczpcImVsLXRleHRhcmVhX19pbm5lclwifSxlLmF0dHJzLHt0YWJpbmRleDplLnRhYmluZGV4LGRpc2FibGVkOmUuaW5wdXREaXNhYmxlZCxyZWFkb25seTplLnJlYWRvbmx5LGF1dG9jb21wbGV0ZTplLmF1dG9jb21wbGV0ZSxzdHlsZTplLnRleHRhcmVhU3R5bGUsXCJhcmlhLWxhYmVsXCI6ZS5sYWJlbCxvbkNvbXBvc2l0aW9uc3RhcnQ6dFsxMl18fCh0WzEyXT0oLi4udCk9PmUuaGFuZGxlQ29tcG9zaXRpb25TdGFydCguLi50KSksb25Db21wb3NpdGlvbnVwZGF0ZTp0WzEzXXx8KHRbMTNdPSguLi50KT0+ZS5oYW5kbGVDb21wb3NpdGlvblVwZGF0ZSguLi50KSksb25Db21wb3NpdGlvbmVuZDp0WzE0XXx8KHRbMTRdPSguLi50KT0+ZS5oYW5kbGVDb21wb3NpdGlvbkVuZCguLi50KSksb25JbnB1dDp0WzE1XXx8KHRbMTVdPSguLi50KT0+ZS5oYW5kbGVJbnB1dCguLi50KSksb25Gb2N1czp0WzE2XXx8KHRbMTZdPSguLi50KT0+ZS5oYW5kbGVGb2N1cyguLi50KSksb25CbHVyOnRbMTddfHwodFsxN109KC4uLnQpPT5lLmhhbmRsZUJsdXIoLi4udCkpLG9uQ2hhbmdlOnRbMThdfHwodFsxOF09KC4uLnQpPT5lLmhhbmRsZUNoYW5nZSguLi50KSl9KSxudWxsLDE2LFtcInRhYmluZGV4XCIsXCJkaXNhYmxlZFwiLFwicmVhZG9ubHlcIixcImF1dG9jb21wbGV0ZVwiLFwiYXJpYS1sYWJlbFwiXSkpLGUuaXNXb3JkTGltaXRWaXNpYmxlJiZcInRleHRhcmVhXCI9PT1lLnR5cGU/KGEoKSxuKFwic3BhblwiLFF0LHAoZS50ZXh0TGVuZ3RoKStcIi9cIitwKGUudXBwZXJMaW1pdCksMSkpOnUoXCJ2LWlmXCIsITApXSwzOCl9LFd0Ll9fZmlsZT1cInBhY2thZ2VzL2lucHV0L3NyYy9pbmRleC52dWVcIixXdC5pbnN0YWxsPWU9PntlLmNvbXBvbmVudChXdC5uYW1lLFd0KX07Y29uc3QgWnQ9ZnVuY3Rpb24oZSl7Zm9yKGNvbnN0IHQgb2YgZSl7Y29uc3QgZT10LnRhcmdldC5fX3Jlc2l6ZUxpc3RlbmVyc19ffHxbXTtlLmxlbmd0aCYmZS5mb3JFYWNoKChlPT57ZSgpfSkpfX0sSnQ9ZnVuY3Rpb24oZSx0KXshemUmJmUmJihlLl9fcmVzaXplTGlzdGVuZXJzX198fChlLl9fcmVzaXplTGlzdGVuZXJzX189W10sZS5fX3JvX189bmV3IG9lKFp0KSxlLl9fcm9fXy5vYnNlcnZlKGUpKSxlLl9fcmVzaXplTGlzdGVuZXJzX18ucHVzaCh0KSl9LGVsPWZ1bmN0aW9uKGUsdCl7ZSYmZS5fX3Jlc2l6ZUxpc3RlbmVyc19fJiYoZS5fX3Jlc2l6ZUxpc3RlbmVyc19fLnNwbGljZShlLl9fcmVzaXplTGlzdGVuZXJzX18uaW5kZXhPZih0KSwxKSxlLl9fcmVzaXplTGlzdGVuZXJzX18ubGVuZ3RofHxlLl9fcm9fXy5kaXNjb25uZWN0KCkpfSx0bD17dmVydGljYWw6e29mZnNldDpcIm9mZnNldEhlaWdodFwiLHNjcm9sbDpcInNjcm9sbFRvcFwiLHNjcm9sbFNpemU6XCJzY3JvbGxIZWlnaHRcIixzaXplOlwiaGVpZ2h0XCIsa2V5OlwidmVydGljYWxcIixheGlzOlwiWVwiLGNsaWVudDpcImNsaWVudFlcIixkaXJlY3Rpb246XCJ0b3BcIn0saG9yaXpvbnRhbDp7b2Zmc2V0Olwib2Zmc2V0V2lkdGhcIixzY3JvbGw6XCJzY3JvbGxMZWZ0XCIsc2Nyb2xsU2l6ZTpcInNjcm9sbFdpZHRoXCIsc2l6ZTpcIndpZHRoXCIsa2V5OlwiaG9yaXpvbnRhbFwiLGF4aXM6XCJYXCIsY2xpZW50OlwiY2xpZW50WFwiLGRpcmVjdGlvbjpcImxlZnRcIn19O2Z1bmN0aW9uIGxsKHttb3ZlOmUsc2l6ZTp0LGJhcjpsfSl7Y29uc3QgYT17fSxuPWB0cmFuc2xhdGUke2wuYXhpc30oJHtlfSUpYDtyZXR1cm4gYVtsLnNpemVdPXQsYS50cmFuc2Zvcm09bixhLm1zVHJhbnNmb3JtPW4sYS53ZWJraXRUcmFuc2Zvcm09bixhfXZhciBhbD1lKHtuYW1lOlwiQmFyXCIscHJvcHM6e3ZlcnRpY2FsOkJvb2xlYW4sc2l6ZTpTdHJpbmcsbW92ZTpOdW1iZXJ9LHNldHVwKGUpe2NvbnN0IGE9digpLG49dChudWxsKSxvPXcoXCJzY3JvbGwtYmFyLXdyYXBcIix7fSksaT1sKCgoKT0+dGxbZS52ZXJ0aWNhbD9cInZlcnRpY2FsXCI6XCJob3Jpem9udGFsXCJdKSkscj10KHt9KSxzPXQobnVsbCksdT1lPT57ZS5jdHJsS2V5fHwyPT09ZS5idXR0b258fChjKGUpLHIudmFsdWVbaS52YWx1ZS5heGlzXT1lLmN1cnJlbnRUYXJnZXRbaS52YWx1ZS5vZmZzZXRdLShlW2kudmFsdWUuY2xpZW50XS1lLmN1cnJlbnRUYXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClbaS52YWx1ZS5kaXJlY3Rpb25dKSl9LGQ9ZT0+e2NvbnN0IHQ9MTAwKihNYXRoLmFicyhlLnRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVtpLnZhbHVlLmRpcmVjdGlvbl0tZVtpLnZhbHVlLmNsaWVudF0pLW4udmFsdWVbaS52YWx1ZS5vZmZzZXRdLzIpL2Eudm5vZGUuZWxbaS52YWx1ZS5vZmZzZXRdO28udmFsdWVbaS52YWx1ZS5zY3JvbGxdPXQqby52YWx1ZVtpLnZhbHVlLnNjcm9sbFNpemVdLzEwMH0sYz1lPT57ZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKSxzLnZhbHVlPSEwLGx0KGRvY3VtZW50LFwibW91c2Vtb3ZlXCIscCksbHQoZG9jdW1lbnQsXCJtb3VzZXVwXCIsaCksZG9jdW1lbnQub25zZWxlY3RzdGFydD0oKT0+ITF9LHA9ZT0+e2lmKCExPT09cy52YWx1ZSlyZXR1cm47Y29uc3QgdD1yLnZhbHVlW2kudmFsdWUuYXhpc107aWYoIXQpcmV0dXJuO2NvbnN0IGw9MTAwKigtMSooYS52bm9kZS5lbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVtpLnZhbHVlLmRpcmVjdGlvbl0tZVtpLnZhbHVlLmNsaWVudF0pLShuLnZhbHVlW2kudmFsdWUub2Zmc2V0XS10KSkvYS52bm9kZS5lbFtpLnZhbHVlLm9mZnNldF07by52YWx1ZVtpLnZhbHVlLnNjcm9sbF09bCpvLnZhbHVlW2kudmFsdWUuc2Nyb2xsU2l6ZV0vMTAwfTtmdW5jdGlvbiBoKCl7cy52YWx1ZT0hMSxyLnZhbHVlW2kudmFsdWUuYXhpc109MCxhdChkb2N1bWVudCxcIm1vdXNlbW92ZVwiLHApLGRvY3VtZW50Lm9uc2VsZWN0c3RhcnQ9bnVsbH1yZXR1cm4gTigoKCk9PnthdChkb2N1bWVudCxcIm1vdXNldXBcIixoKX0pKSwoKT0+RChcImRpdlwiLHtjbGFzczpbXCJlbC1zY3JvbGxiYXJfX2JhclwiLFwiaXMtXCIraS52YWx1ZS5rZXldLG9uTW91c2Vkb3duOmR9LEQoXCJkaXZcIix7cmVmOm4sY2xhc3M6XCJlbC1zY3JvbGxiYXJfX3RodW1iXCIsb25Nb3VzZWRvd246dSxzdHlsZTpsbCh7c2l6ZTplLnNpemUsbW92ZTplLm1vdmUsYmFyOmkudmFsdWV9KX0pKX19KSxubD1lKHtuYW1lOlwiRWxTY3JvbGxiYXJcIixjb21wb25lbnRzOntCYXI6YWx9LHByb3BzOntuYXRpdmU6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiExfSx3cmFwU3R5bGU6e3R5cGU6W1N0cmluZyxBcnJheV0sZGVmYXVsdDpcIlwifSx3cmFwQ2xhc3M6e3R5cGU6W1N0cmluZyxBcnJheV0sZGVmYXVsdDpcIlwifSx2aWV3Q2xhc3M6e3R5cGU6W1N0cmluZyxBcnJheV0sZGVmYXVsdDpcIlwifSx2aWV3U3R5bGU6e3R5cGU6W1N0cmluZyxBcnJheV0sZGVmYXVsdDpcIlwifSxub3Jlc2l6ZTpCb29sZWFuLHRhZzp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcImRpdlwifX0sc2V0dXAoZSl7Y29uc3QgYT10KFwiMFwiKSxuPXQoXCIwXCIpLG89dCgwKSxpPXQoMCkscj10KG51bGwpLHM9dChudWxsKTt4KFwic2Nyb2xsLWJhci13cmFwXCIscik7Y29uc3QgdT0oKT0+e2lmKCFyLnZhbHVlKXJldHVybjtjb25zdCBlPTEwMCpyLnZhbHVlLmNsaWVudEhlaWdodC9yLnZhbHVlLnNjcm9sbEhlaWdodCx0PTEwMCpyLnZhbHVlLmNsaWVudFdpZHRoL3IudmFsdWUuc2Nyb2xsV2lkdGg7bi52YWx1ZT1lPDEwMD9lK1wiJVwiOlwiXCIsYS52YWx1ZT10PDEwMD90K1wiJVwiOlwiXCJ9O18oKCgpPT57ZS5uYXRpdmV8fChrKHUpLCFlLm5vcmVzaXplJiZKdChzLnZhbHVlLHUpKX0pKSxPKCgoKT0+e2UubmF0aXZlfHwhZS5ub3Jlc2l6ZSYmZWwocy52YWx1ZSx1KX0pKTtjb25zdCBkPWwoKCgpPT5odCgpKSksYz1sKCgoKT0+e2NvbnN0IHQ9aHQoKTtsZXQgbD1lLndyYXBTdHlsZTtpZih0KXtjb25zdCBhPWAtJHt0fXB4YCxuPWBtYXJnaW4tYm90dG9tOiAke2F9OyBtYXJnaW4tcmlnaHQ6ICR7YX07YDtBcnJheS5pc0FycmF5KGUud3JhcFN0eWxlKT8obD1mdW5jdGlvbihlKXtjb25zdCB0PXt9O2ZvcihsZXQgbD0wO2w8ZS5sZW5ndGg7bCsrKWVbbF0mJkVlKHQsZVtsXSk7cmV0dXJuIHR9KGUud3JhcFN0eWxlKSxsLm1hcmdpblJpZ2h0PWwubWFyZ2luQm90dG9tPWEpOlwic3RyaW5nXCI9PXR5cGVvZiBlLndyYXBTdHlsZT9sKz1uOmw9bn1yZXR1cm4gbH0pKTtyZXR1cm57bW92ZVg6byxtb3ZlWTppLHNpemVXaWR0aDphLHNpemVIZWlnaHQ6bixzdHlsZTpjLGd1dHRlcjpkLHdyYXA6cixyZXNpemU6cyx1cGRhdGU6dSxoYW5kbGVTY3JvbGw6KCk9PntlLm5hdGl2ZXx8KGkudmFsdWU9MTAwKnIudmFsdWUuc2Nyb2xsVG9wL3IudmFsdWUuY2xpZW50SGVpZ2h0LG8udmFsdWU9MTAwKnIudmFsdWUuc2Nyb2xsTGVmdC9yLnZhbHVlLmNsaWVudFdpZHRoKX19fX0pO2NvbnN0IG9sPXtjbGFzczpcImVsLXNjcm9sbGJhclwifTtubC5yZW5kZXI9ZnVuY3Rpb24oZSx0LGwsbyxyLGMpe2NvbnN0IHA9UChcImJhclwiKTtyZXR1cm4gYSgpLG4oXCJkaXZcIixvbCxbcyhcImRpdlwiLHtyZWY6XCJ3cmFwXCIsY2xhc3M6W2Uud3JhcENsYXNzLFwiZWwtc2Nyb2xsYmFyX193cmFwXCIsZS5uYXRpdmU/XCJcIjpcImVsLXNjcm9sbGJhcl9fd3JhcC0taGlkZGVuLWRlZmF1bHRcIl0sc3R5bGU6ZS5zdHlsZSxvblNjcm9sbDp0WzFdfHwodFsxXT0oLi4udCk9PmUuaGFuZGxlU2Nyb2xsKC4uLnQpKX0sWyhhKCksbihWKGUudGFnKSx7cmVmOlwicmVzaXplXCIsY2xhc3M6W1wiZWwtc2Nyb2xsYmFyX192aWV3XCIsZS52aWV3Q2xhc3NdLHN0eWxlOmUudmlld1N0eWxlfSx7ZGVmYXVsdDppKCgoKT0+W2QoZS4kc2xvdHMsXCJkZWZhdWx0XCIpXSkpLF86M30sOCxbXCJjbGFzc1wiLFwic3R5bGVcIl0pKV0sMzgpLGUubmF0aXZlP3UoXCJ2LWlmXCIsITApOihhKCksbihFLHtrZXk6MH0sW3MocCx7bW92ZTplLm1vdmVYLHNpemU6ZS5zaXplV2lkdGh9LG51bGwsOCxbXCJtb3ZlXCIsXCJzaXplXCJdKSxzKHAse3ZlcnRpY2FsOlwiXCIsbW92ZTplLm1vdmVZLHNpemU6ZS5zaXplSGVpZ2h0fSxudWxsLDgsW1wibW92ZVwiLFwic2l6ZVwiXSldLDY0KSldKX0sbmwuX19maWxlPVwicGFja2FnZXMvc2Nyb2xsYmFyL3NyYy9pbmRleC52dWVcIixubC5pbnN0YWxsPWU9PntlLmNvbXBvbmVudChubC5uYW1lLG5sKX07dmFyIGlsOyFmdW5jdGlvbihlKXtlW2UuVEVYVD0xXT1cIlRFWFRcIixlW2UuQ0xBU1M9Ml09XCJDTEFTU1wiLGVbZS5TVFlMRT00XT1cIlNUWUxFXCIsZVtlLlBST1BTPThdPVwiUFJPUFNcIixlW2UuRlVMTF9QUk9QUz0xNl09XCJGVUxMX1BST1BTXCIsZVtlLkhZRFJBVEVfRVZFTlRTPTMyXT1cIkhZRFJBVEVfRVZFTlRTXCIsZVtlLlNUQUJMRV9GUkFHTUVOVD02NF09XCJTVEFCTEVfRlJBR01FTlRcIixlW2UuS0VZRURfRlJBR01FTlQ9MTI4XT1cIktFWUVEX0ZSQUdNRU5UXCIsZVtlLlVOS0VZRURfRlJBR01FTlQ9MjU2XT1cIlVOS0VZRURfRlJBR01FTlRcIixlW2UuTkVFRF9QQVRDSD01MTJdPVwiTkVFRF9QQVRDSFwiLGVbZS5EWU5BTUlDX1NMT1RTPTEwMjRdPVwiRFlOQU1JQ19TTE9UU1wiLGVbZS5IT0lTVEVEPS0xXT1cIkhPSVNURURcIixlW2UuQkFJTD0tMl09XCJCQUlMXCJ9KGlsfHwoaWw9e30pKTtmdW5jdGlvbiBybChlLHQpe2lmKCEoZT0+ZS50eXBlPT09SSkoZSkpcmV0dXJuKGU9PmUudHlwZT09PUUpKGUpfHwoZT0+XCJ0ZW1wbGF0ZVwiPT09ZS50eXBlKShlKT90PjA/c2woZS5jaGlsZHJlbix0LTEpOnZvaWQgMDplfWNvbnN0IHNsPShlLHQ9Myk9PkFycmF5LmlzQXJyYXkoZSk/cmwoZVswXSx0KTpybChlLHQpO2Z1bmN0aW9uIHVsKGUsdCxsLG8saSl7cmV0dXJuIGEoKSxuKGUsdCxsLG8saSl9bGV0IGRsPXt9O2NvbnN0IGNsPWU9PntlLnByZXZlbnREZWZhdWx0KCksZS5zdG9wUHJvcGFnYXRpb24oKX0scGw9KCk9PntudWxsPT1nbHx8Z2wuZG9Pbk1vZGFsQ2xpY2soKX07bGV0IGhsLHZsPSExO2NvbnN0IG1sPWZ1bmN0aW9uKCl7aWYoemUpcmV0dXJuO2xldCBlPWdsLm1vZGFsRG9tO3JldHVybiBlP3ZsPSEwOih2bD0hMSxlPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksZ2wubW9kYWxEb209ZSxsdChlLFwidG91Y2htb3ZlXCIsY2wpLGx0KGUsXCJjbGlja1wiLHBsKSksZX0sZmw9e30sZ2w9e21vZGFsRmFkZTohMCxtb2RhbERvbTp2b2lkIDAsekluZGV4OmhsLGdldEluc3RhbmNlOmZ1bmN0aW9uKGUpe3JldHVybiBmbFtlXX0scmVnaXN0ZXI6ZnVuY3Rpb24oZSx0KXtlJiZ0JiYoZmxbZV09dCl9LGRlcmVnaXN0ZXI6ZnVuY3Rpb24oZSl7ZSYmKGZsW2VdPW51bGwsZGVsZXRlIGZsW2VdKX0sbmV4dFpJbmRleDpmdW5jdGlvbigpe3JldHVybisrZ2wuekluZGV4fSxtb2RhbFN0YWNrOltdLGRvT25Nb2RhbENsaWNrOmZ1bmN0aW9uKCl7Y29uc3QgZT1nbC5tb2RhbFN0YWNrW2dsLm1vZGFsU3RhY2subGVuZ3RoLTFdO2lmKCFlKXJldHVybjtjb25zdCB0PWdsLmdldEluc3RhbmNlKGUuaWQpO3QmJnQuY2xvc2VPbkNsaWNrTW9kYWwudmFsdWUmJnQuY2xvc2UoKX0sb3Blbk1vZGFsOmZ1bmN0aW9uKGUsdCxsLGEsbil7aWYoemUpcmV0dXJuO2lmKCFlfHx2b2lkIDA9PT10KXJldHVybjt0aGlzLm1vZGFsRmFkZT1uO2NvbnN0IG89dGhpcy5tb2RhbFN0YWNrO2ZvcihsZXQgdD0wLGw9by5sZW5ndGg7dDxsO3QrKyl7aWYob1t0XS5pZD09PWUpcmV0dXJufWNvbnN0IGk9bWwoKTtpZihvdChpLFwidi1tb2RhbFwiKSx0aGlzLm1vZGFsRmFkZSYmIXZsJiZvdChpLFwidi1tb2RhbC1lbnRlclwiKSxhKXthLnRyaW0oKS5zcGxpdCgvXFxzKy8pLmZvckVhY2goKGU9Pm90KGksZSkpKX1zZXRUaW1lb3V0KCgoKT0+e2l0KGksXCJ2LW1vZGFsLWVudGVyXCIpfSksMjAwKSxsJiZsLnBhcmVudE5vZGUmJjExIT09bC5wYXJlbnROb2RlLm5vZGVUeXBlP2wucGFyZW50Tm9kZS5hcHBlbmRDaGlsZChpKTpkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGkpLHQmJihpLnN0eWxlLnpJbmRleD1TdHJpbmcodCkpLGkudGFiSW5kZXg9MCxpLnN0eWxlLmRpc3BsYXk9XCJcIix0aGlzLm1vZGFsU3RhY2sucHVzaCh7aWQ6ZSx6SW5kZXg6dCxtb2RhbENsYXNzOmF9KX0sY2xvc2VNb2RhbDpmdW5jdGlvbihlKXtjb25zdCB0PXRoaXMubW9kYWxTdGFjayxsPW1sKCk7aWYodC5sZW5ndGg+MCl7Y29uc3QgYT10W3QubGVuZ3RoLTFdO2lmKGEuaWQ9PT1lKXtpZihhLm1vZGFsQ2xhc3Mpe2EubW9kYWxDbGFzcy50cmltKCkuc3BsaXQoL1xccysvKS5mb3JFYWNoKChlPT5pdChsLGUpKSl9dC5wb3AoKSx0Lmxlbmd0aD4wJiYobC5zdHlsZS56SW5kZXg9dFt0Lmxlbmd0aC0xXS56SW5kZXgpfWVsc2UgZm9yKGxldCBsPXQubGVuZ3RoLTE7bD49MDtsLS0paWYodFtsXS5pZD09PWUpe3Quc3BsaWNlKGwsMSk7YnJlYWt9fTA9PT10Lmxlbmd0aCYmKHRoaXMubW9kYWxGYWRlJiZvdChsLFwidi1tb2RhbC1sZWF2ZVwiKSxzZXRUaW1lb3V0KCgoKT0+ezA9PT10Lmxlbmd0aCYmKGwucGFyZW50Tm9kZSYmbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGwpLGwuc3R5bGUuZGlzcGxheT1cIm5vbmVcIixnbC5tb2RhbERvbT12b2lkIDApLGl0KGwsXCJ2LW1vZGFsLWxlYXZlXCIpfSksMjAwKSl9fTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZ2wsXCJ6SW5kZXhcIix7Y29uZmlndXJhYmxlOiEwLGdldDooKT0+KHZvaWQgMD09PWhsJiYoaGw9ZGxbXCJ6SW5kZXhcIl18fDJlMyksaGwpLHNldChlKXtobD1lfX0pO2Z1bmN0aW9uIGJsKGUsdD1bXSl7Y29uc3R7YXJyb3c6bCxhcnJvd09mZnNldDphLG9mZnNldDpuLGdwdUFjY2VsZXJhdGlvbjpvfT1lLGk9W3tuYW1lOlwib2Zmc2V0XCIsb3B0aW9uczp7b2Zmc2V0OlswLG51bGwhPW4/bjoxMl19fSx7bmFtZTpcInByZXZlbnRPdmVyZmxvd1wiLG9wdGlvbnM6e3BhZGRpbmc6e3RvcDoyLGJvdHRvbToyLGxlZnQ6NSxyaWdodDo1fX19LHtuYW1lOlwiZmxpcFwiLG9wdGlvbnM6e3BhZGRpbmc6NX19LHtuYW1lOlwiY29tcHV0ZVN0eWxlc1wiLG9wdGlvbnM6e2dwdUFjY2VsZXJhdGlvbjpvLGFkYXB0aXZlOm99fV07cmV0dXJuIGwmJmkucHVzaCh7bmFtZTpcImFycm93XCIsb3B0aW9uczp7ZWxlbWVudDpsLHBhZGRpbmc6bnVsbCE9YT9hOjV9fSksaS5wdXNoKC4uLnQpLGl9dmFyIHlsO3plfHxsdCh3aW5kb3csXCJrZXlkb3duXCIsKGZ1bmN0aW9uKGUpe2lmKGUuY29kZT09PWZ0LmVzYyl7Y29uc3QgZT1mdW5jdGlvbigpe2lmKCF6ZSYmZ2wubW9kYWxTdGFjay5sZW5ndGg+MCl7Y29uc3QgZT1nbC5tb2RhbFN0YWNrW2dsLm1vZGFsU3RhY2subGVuZ3RoLTFdO2lmKCFlKXJldHVybjtyZXR1cm4gZ2wuZ2V0SW5zdGFuY2UoZS5pZCl9fSgpO2UmJmUuY2xvc2VPblByZXNzRXNjYXBlLnZhbHVlJiYoZS5oYW5kbGVDbG9zZT9lLmhhbmRsZUNsb3NlKCk6ZS5oYW5kbGVBY3Rpb24/ZS5oYW5kbGVBY3Rpb24oXCJjYW5jZWxcIik6ZS5jbG9zZSgpKX19KSksZnVuY3Rpb24oZSl7ZS5EQVJLPVwiZGFya1wiLGUuTElHSFQ9XCJsaWdodFwifSh5bHx8KHlsPXt9KSk7dmFyIGtsPXthcnJvd09mZnNldDp7dHlwZTpOdW1iZXIsZGVmYXVsdDo1fSxhcHBlbmRUb0JvZHk6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiEwfSxib3VuZGFyaWVzUGFkZGluZzp7dHlwZTpOdW1iZXIsZGVmYXVsdDowfSxjb250ZW50Ont0eXBlOlN0cmluZyxkZWZhdWx0OlwiXCJ9LGNsYXNzOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiXCJ9LHN0eWxlOk9iamVjdCxjbG9zZURlbGF5Ont0eXBlOk51bWJlcixkZWZhdWx0OjIwMH0sY3V0b2ZmOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMX0sZGlzYWJsZWQ6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiExfSxlZmZlY3Q6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6eWwuREFSS30sZW50ZXJhYmxlOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMH0saGlkZUFmdGVyOnt0eXBlOk51bWJlcixkZWZhdWx0OjB9LG1hbnVhbE1vZGU6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiExfSxzaG93QWZ0ZXI6e3R5cGU6TnVtYmVyLGRlZmF1bHQ6MH0sb2Zmc2V0Ont0eXBlOk51bWJlcixkZWZhdWx0OjEyfSxwbGFjZW1lbnQ6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJib3R0b21cIn0scG9wcGVyQ2xhc3M6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJcIn0scHVyZTp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITF9LHBvcHBlck9wdGlvbnM6e3R5cGU6T2JqZWN0LGRlZmF1bHQ6KCk9Pm51bGx9LHNob3dBcnJvdzp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITB9LHN0cmF0ZWd5Ont0eXBlOlN0cmluZyxkZWZhdWx0OlwiZml4ZWRcIn0sdHJhbnNpdGlvbjp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcImVsLWZhZGUtaW4tbGluZWFyXCJ9LHRyaWdnZXI6e3R5cGU6W1N0cmluZyxBcnJheV0sZGVmYXVsdDpcImhvdmVyXCJ9LHZpc2libGU6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OnZvaWQgMH0sc3RvcFBvcHBlck1vdXNlRXZlbnQ6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiEwfSxncHVBY2NlbGVyYXRpb246e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiEwfX07ZnVuY3Rpb24gQ2woZSx7ZW1pdDphfSl7Y29uc3Qgbj10KG51bGwpLG89dChudWxsKSxpPXQobnVsbCkscj1cImVsLXBvcHBlci1cIitSZSgpO2xldCBzPW51bGwsdT1udWxsLGQ9bnVsbCxjPSExO2NvbnN0IHA9KCk9PmUubWFudWFsTW9kZXx8XCJtYW51YWxcIj09PWUudHJpZ2dlcixoPXQoe3pJbmRleDpnbC5uZXh0WkluZGV4KCl9KSx2PWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGwoKCgpPT57dmFyIGw7cmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7cGxhY2VtZW50OmUucGxhY2VtZW50fSxlLnBvcHBlck9wdGlvbnMpLHttb2RpZmllcnM6Ymwoe2Fycm93OnQuYXJyb3cudmFsdWUsYXJyb3dPZmZzZXQ6ZS5hcnJvd09mZnNldCxvZmZzZXQ6ZS5vZmZzZXQsZ3B1QWNjZWxlcmF0aW9uOmUuZ3B1QWNjZWxlcmF0aW9ufSxudWxsPT09KGw9ZS5wb3BwZXJPcHRpb25zKXx8dm9pZCAwPT09bD92b2lkIDA6bC5tb2RpZmllcnMpfSl9KSl9KGUse2Fycm93Om59KSxtPWYoe3Zpc2libGU6ISFlLnZpc2libGV9KSxnPWwoe2dldDooKT0+IWUuZGlzYWJsZWQmJihXZShlLnZpc2libGUpP2UudmlzaWJsZTptLnZpc2libGUpLHNldCh0KXtwKCl8fChXZShlLnZpc2libGUpP2EoXCJ1cGRhdGU6dmlzaWJsZVwiLHQpOm0udmlzaWJsZT10KX19KTtmdW5jdGlvbiBiKCl7ZS5oaWRlQWZ0ZXI+MCYmKGQ9d2luZG93LnNldFRpbWVvdXQoKCgpPT57aygpfSksZS5oaWRlQWZ0ZXIpKSxnLnZhbHVlPSEwfWZ1bmN0aW9uIGsoKXtnLnZhbHVlPSExfWZ1bmN0aW9uIEMoKXtjbGVhclRpbWVvdXQodSksY2xlYXJUaW1lb3V0KGQpfWNvbnN0IHg9KCk9PntwKCl8fGUuZGlzYWJsZWR8fChDKCksMD09PWUuc2hvd0FmdGVyP2IoKTp1PXdpbmRvdy5zZXRUaW1lb3V0KCgoKT0+e2IoKX0pLGUuc2hvd0FmdGVyKSl9LHc9KCk9PntwKCl8fChDKCksZS5jbG9zZURlbGF5PjA/ZD13aW5kb3cuc2V0VGltZW91dCgoKCk9PntfKCl9KSxlLmNsb3NlRGVsYXkpOl8oKSl9LF89KCk9PntrKCksZS5kaXNhYmxlZCYmRSghMCl9O2Z1bmN0aW9uIFMoKXtpZighWmUoZykpcmV0dXJuO2NvbnN0IGU9WmUobyksdD1WZShlKS5zdGFydHNXaXRoKFwiSFRNTFwiKT9lOmUuJGVsO3M9aWUodCxaZShpKSxaZSh2KSkscy51cGRhdGUoKX1mdW5jdGlvbiBFKGUpeyFzfHxaZShnKSYmIWV8fE0oKX1mdW5jdGlvbiBNKCl7dmFyIGU7bnVsbD09PShlPW51bGw9PXM/dm9pZCAwOnMuZGVzdHJveSl8fHZvaWQgMD09PWV8fGUuY2FsbChzKSxzPW51bGx9Y29uc3QgVD17fTtpZighcCgpKXtjb25zdCB0PSgpPT57WmUoZyk/dygpOngoKX0sbD1lPT57c3dpdGNoKGUuc3RvcFByb3BhZ2F0aW9uKCksZS50eXBlKXtjYXNlXCJjbGlja1wiOmM/Yz0hMTp0KCk7YnJlYWs7Y2FzZVwibW91c2VlbnRlclwiOngoKTticmVhaztjYXNlXCJtb3VzZWxlYXZlXCI6dygpO2JyZWFrO2Nhc2VcImZvY3VzXCI6Yz0hMCx4KCk7YnJlYWs7Y2FzZVwiYmx1clwiOmM9ITEsdygpfX0sYT1lPT57c3dpdGNoKGUpe2Nhc2VcImNsaWNrXCI6VC5vbkNsaWNrPWw7YnJlYWs7Y2FzZVwiaG92ZXJcIjpULm9uTW91c2VFbnRlcj1sLFQub25Nb3VzZUxlYXZlPWw7YnJlYWs7Y2FzZVwiZm9jdXNcIjpULm9uRm9jdXM9bCxULm9uQmx1cj1sfX07TWUoZS50cmlnZ2VyKT9PYmplY3QudmFsdWVzKGUudHJpZ2dlcikubWFwKGEpOmEoZS50cmlnZ2VyKX1yZXR1cm4geSh2LChlPT57cyYmKHMuc2V0T3B0aW9ucyhlKSxzLnVwZGF0ZSgpKX0pKSx5KGcsKGZ1bmN0aW9uKGUpe2UmJihoLnZhbHVlLnpJbmRleD1nbC5uZXh0WkluZGV4KCksUygpKX0pKSx7dXBkYXRlOmZ1bmN0aW9uKCl7WmUoZykmJihzP3MudXBkYXRlKCk6UygpKX0sZG9EZXN0cm95OkUsc2hvdzp4LGhpZGU6dyxvblBvcHBlck1vdXNlRW50ZXI6ZnVuY3Rpb24oKXtlLmVudGVyYWJsZSYmXCJjbGlja1wiIT09ZS50cmlnZ2VyJiZjbGVhclRpbWVvdXQoZCl9LG9uUG9wcGVyTW91c2VMZWF2ZTpmdW5jdGlvbigpe2NvbnN0e3RyaWdnZXI6dH09ZTtOZSh0KSYmKFwiY2xpY2tcIj09PXR8fFwiZm9jdXNcIj09PXQpfHwxPT09dC5sZW5ndGgmJihcImNsaWNrXCI9PT10WzBdfHxcImZvY3VzXCI9PT10WzBdKXx8dygpfSxvbkFmdGVyRW50ZXI6KCk9PnthKFwiYWZ0ZXItZW50ZXJcIil9LG9uQWZ0ZXJMZWF2ZTooKT0+e00oKSxhKFwiYWZ0ZXItbGVhdmVcIil9LG9uQmVmb3JlRW50ZXI6KCk9PnthKFwiYmVmb3JlLWVudGVyXCIpfSxvbkJlZm9yZUxlYXZlOigpPT57YShcImJlZm9yZS1sZWF2ZVwiKX0saW5pdGlhbGl6ZVBvcHBlcjpTLGlzTWFudWFsTW9kZTpwLGFycm93UmVmOm4sZXZlbnRzOlQscG9wcGVySWQ6cixwb3BwZXJJbnN0YW5jZTpzLHBvcHBlclJlZjppLHBvcHBlclN0eWxlOmgsdHJpZ2dlclJlZjpvLHZpc2liaWxpdHk6Z319ZnVuY3Rpb24geGwoZSx0KXtjb25zdHtlZmZlY3Q6bCxuYW1lOmEsc3RvcFBvcHBlck1vdXNlRXZlbnQ6bixwb3BwZXJDbGFzczp1LHBvcHBlclN0eWxlOmQscG9wcGVyUmVmOmMscHVyZTpwLHBvcHBlcklkOnYsdmlzaWJpbGl0eTptLG9uTW91c2VFbnRlcjpmLG9uTW91c2VMZWF2ZTpnLG9uQWZ0ZXJFbnRlcjpiLG9uQWZ0ZXJMZWF2ZTp5LG9uQmVmb3JlRW50ZXI6ayxvbkJlZm9yZUxlYXZlOkN9PWUseD1bdSxcImVsLXBvcHBlclwiLFwiaXMtXCIrbCxwP1wiaXMtcHVyZVwiOlwiXCJdLHc9bj9jdDpTZTtyZXR1cm4gcyhvLHtuYW1lOmEsb25BZnRlckVudGVyOmIsb25BZnRlckxlYXZlOnksb25CZWZvcmVFbnRlcjprLG9uQmVmb3JlTGVhdmU6Q30se2RlZmF1bHQ6aSgoKCk9PltyKHMoXCJkaXZcIix7XCJhcmlhLWhpZGRlblwiOlN0cmluZyghbSksY2xhc3M6eCxzdHlsZTpudWxsIT1kP2Q6e30saWQ6dixyZWY6bnVsbCE9Yz9jOlwicG9wcGVyUmVmXCIscm9sZTpcInRvb2x0aXBcIixvbk1vdXNlRW50ZXI6Zixvbk1vdXNlTGVhdmU6ZyxvbkNsaWNrOmN0LG9uTW91c2VEb3duOncsb25Nb3VzZVVwOnd9LHQsaWwuQ0xBU1N8aWwuU1RZTEV8aWwuUFJPUFN8aWwuSFlEUkFURV9FVkVOVFMsW1wiYXJpYS1oaWRkZW5cIixcIm9uTW91c2VlbnRlclwiLFwib25Nb3VzZWxlYXZlXCIsXCJvbk1vdXNlRG93blwiLFwib25Nb3VzZVVwXCIsXCJvbkNsaWNrXCIsXCJpZFwiXSksW1toLG1dXSldKSl9LGlsLlBST1BTLFtcIm5hbWVcIixcIm9uQWZ0ZXJFbnRlclwiLFwib25BZnRlckxlYXZlXCIsXCJvbkJlZm9yZUVudGVyXCIsXCJvbkJlZm9yZUxlYXZlXCJdKX1mdW5jdGlvbiB3bChlLHQpe2NvbnN0IGw9c2woZSwxKTtyZXR1cm4gbHx8bXQoXCJyZW5kZXJUcmlnZ2VyXCIsXCJ0cmlnZ2VyIGV4cGVjdHMgc2luZ2xlIHJvb3RlZCBub2RlXCIpLEEobCx0KX1mdW5jdGlvbiBfbChlKXtyZXR1cm4gZT8oYSgpLG4oXCJkaXZcIix7cmVmOlwiYXJyb3dSZWZcIixjbGFzczpcImVsLXBvcHBlcl9fYXJyb3dcIixcImRhdGEtcG9wcGVyLWFycm93XCI6XCJcIn0sbnVsbCxpbC5ORUVEX1BBVENIKSk6KGEoKSxuKEksbnVsbCxcIlwiKSl9dmFyIFNsPWUoe25hbWU6XCJFbFBvcHBlclwiLHByb3BzOmtsLGVtaXRzOltcInVwZGF0ZTp2aXNpYmxlXCIsXCJhZnRlci1lbnRlclwiLFwiYWZ0ZXItbGVhdmVcIixcImJlZm9yZS1lbnRlclwiLFwiYmVmb3JlLWxlYXZlXCJdLHNldHVwKGUsdCl7dC5zbG90cy50cmlnZ2VyfHxtdChcIkVsUG9wcGVyXCIsXCJUcmlnZ2VyIG11c3QgYmUgcHJvdmlkZWRcIik7Y29uc3QgbD1DbChlLHQpLGE9KCk9PmwuZG9EZXN0cm95KCEwKTtyZXR1cm4gXyhsLmluaXRpYWxpemVQb3BwZXIpLE8oYSksQihsLmluaXRpYWxpemVQb3BwZXIpLEwoYSksbH0scmVuZGVyKCl7dmFyIGU7Y29uc3R7JHNsb3RzOnQsYXBwZW5kVG9Cb2R5OmwsY2xhc3M6YSxzdHlsZTpuLGVmZmVjdDpvLGhpZGU6aSxvblBvcHBlck1vdXNlRW50ZXI6dSxvblBvcHBlck1vdXNlTGVhdmU6YyxvbkFmdGVyRW50ZXI6aCxvbkFmdGVyTGVhdmU6dixvbkJlZm9yZUVudGVyOm0sb25CZWZvcmVMZWF2ZTpmLHBvcHBlckNsYXNzOmcscG9wcGVySWQ6Yixwb3BwZXJTdHlsZTp5LHB1cmU6ayxzaG93QXJyb3c6Qyx0cmFuc2l0aW9uOngsdmlzaWJpbGl0eTp3LHN0b3BQb3BwZXJNb3VzZUV2ZW50Ol99PXRoaXMsUz10aGlzLmlzTWFudWFsTW9kZSgpLE09X2woQyksVD14bCh7ZWZmZWN0Om8sbmFtZTp4LHBvcHBlckNsYXNzOmcscG9wcGVySWQ6Yixwb3BwZXJTdHlsZTp5LHB1cmU6ayxzdG9wUG9wcGVyTW91c2VFdmVudDpfLG9uTW91c2VFbnRlcjp1LG9uTW91c2VMZWF2ZTpjLG9uQWZ0ZXJFbnRlcjpoLG9uQWZ0ZXJMZWF2ZTp2LG9uQmVmb3JlRW50ZXI6bSxvbkJlZm9yZUxlYXZlOmYsdmlzaWJpbGl0eTp3fSxbZCh0LFwiZGVmYXVsdFwiLHt9LCgoKT0+W3AodGhpcy5jb250ZW50KV0pKSxNXSksTj1udWxsPT09KGU9dC50cmlnZ2VyKXx8dm9pZCAwPT09ZT92b2lkIDA6ZS5jYWxsKHQpLEQ9T2JqZWN0LmFzc2lnbih7YXJpYURlc2NyaWJlZGJ5OmIsY2xhc3M6YSxzdHlsZTpuLHJlZjpcInRyaWdnZXJSZWZcIn0sdGhpcy5ldmVudHMpLE89Uz93bChOLEQpOnIod2woTixEKSxbW010LGldXSk7cmV0dXJuIHVsKEUsbnVsbCxbTyxzKHose3RvOlwiYm9keVwiLGRpc2FibGVkOiFsfSxbVF0saWwuUFJPUFMsW1wiZGlzYWJsZWRcIl0pXSl9fSk7U2wuX19maWxlPVwicGFja2FnZXMvcG9wcGVyL3NyYy9pbmRleC52dWVcIixTbC5pbnN0YWxsPWU9PntlLmNvbXBvbmVudChTbC5uYW1lLFNsKX07dmFyIEVsPWUoe25hbWU6XCJFbEF1dG9jb21wbGV0ZVwiLGNvbXBvbmVudHM6e0VsUG9wcGVyOlNsLEVsSW5wdXQ6V3QsRWxTY3JvbGxiYXI6bmx9LGRpcmVjdGl2ZXM6e2NsaWNrb3V0c2lkZTpNdH0saW5oZXJpdEF0dHJzOiExLHByb3BzOnt2YWx1ZUtleTp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcInZhbHVlXCJ9LG1vZGVsVmFsdWU6e3R5cGU6W1N0cmluZyxOdW1iZXJdLGRlZmF1bHQ6XCJcIn0sZGVib3VuY2U6e3R5cGU6TnVtYmVyLGRlZmF1bHQ6MzAwfSxwbGFjZW1lbnQ6e3R5cGU6U3RyaW5nLHZhbGlkYXRvcjplPT5bXCJ0b3BcIixcInRvcC1zdGFydFwiLFwidG9wLWVuZFwiLFwiYm90dG9tXCIsXCJib3R0b20tc3RhcnRcIixcImJvdHRvbS1lbmRcIl0uaW5jbHVkZXMoZSksZGVmYXVsdDpcImJvdHRvbS1zdGFydFwifSxmZXRjaFN1Z2dlc3Rpb25zOnt0eXBlOkZ1bmN0aW9uLGRlZmF1bHQ6U2V9LHBvcHBlckNsYXNzOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiXCJ9LHRyaWdnZXJPbkZvY3VzOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMH0sc2VsZWN0V2hlblVubWF0Y2hlZDp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITF9LGhpZGVMb2FkaW5nOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMX0scG9wcGVyQXBwZW5kVG9Cb2R5Ont0eXBlOkJvb2xlYW4sZGVmYXVsdDohMH0saGlnaGxpZ2h0Rmlyc3RJdGVtOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMX19LGVtaXRzOltQdCxcImlucHV0XCIsXCJjaGFuZ2VcIixcImZvY3VzXCIsXCJibHVyXCIsXCJjbGVhclwiLFwic2VsZWN0XCJdLHNldHVwKGUsYSl7Y29uc3Qgbj10dCgpLG89dChbXSksaT10KC0xKSxyPXQoXCJcIikscz10KCExKSx1PXQoITEpLGQ9dCghMSksYz10KG51bGwpLHA9dChudWxsKSxoPXQobnVsbCksdj1sKCgoKT0+XCJlbC1hdXRvY29tcGxldGUtXCIrUmUoKSkpLG09bCgoKCk9PihNZShvLnZhbHVlKSYmby52YWx1ZS5sZW5ndGg+MHx8ZC52YWx1ZSkmJnMudmFsdWUpKSxmPWwoKCgpPT4hZS5oaWRlTG9hZGluZyYmZC52YWx1ZSkpLGc9KCk9PntrKGgudmFsdWUudXBkYXRlKX07eShtLCgoKT0+e3IudmFsdWU9Yy52YWx1ZS4kZWwub2Zmc2V0V2lkdGgrXCJweFwifSkpLF8oKCgpPT57Yy52YWx1ZS5pbnB1dE9yVGV4dGFyZWEuc2V0QXR0cmlidXRlKFwicm9sZVwiLFwidGV4dGJveFwiKSxjLnZhbHVlLmlucHV0T3JUZXh0YXJlYS5zZXRBdHRyaWJ1dGUoXCJhcmlhLWF1dG9jb21wbGV0ZVwiLFwibGlzdFwiKSxjLnZhbHVlLmlucHV0T3JUZXh0YXJlYS5zZXRBdHRyaWJ1dGUoXCJhcmlhLWNvbnRyb2xzXCIsXCJpZFwiKSxjLnZhbHVlLmlucHV0T3JUZXh0YXJlYS5zZXRBdHRyaWJ1dGUoXCJhcmlhLWFjdGl2ZWRlc2NlbmRhbnRcIixgJHt2LnZhbHVlfS1pdGVtLSR7aS52YWx1ZX1gKTtjb25zdCBlPXAudmFsdWUucXVlcnlTZWxlY3RvcihcIi5lbC1hdXRvY29tcGxldGUtc3VnZ2VzdGlvbl9fbGlzdFwiKTtlLnNldEF0dHJpYnV0ZShcInJvbGVcIixcImxpc3Rib3hcIiksZS5zZXRBdHRyaWJ1dGUoXCJpZFwiLHYudmFsdWUpfSkpLFMoZyk7Y29uc3QgYj10PT57dS52YWx1ZXx8KGQudmFsdWU9ITAsZygpLGUuZmV0Y2hTdWdnZXN0aW9ucyh0LCh0PT57ZC52YWx1ZT0hMSx1LnZhbHVlfHwoTWUodCk/KG8udmFsdWU9dCxpLnZhbHVlPWUuaGlnaGxpZ2h0Rmlyc3RJdGVtPzA6LTEpOm10KFwiRWxBdXRvY29tcGxldGVcIixcImF1dG9jb21wbGV0ZSBzdWdnZXN0aW9ucyBtdXN0IGJlIGFuIGFycmF5XCIpKX0pKSl9LEM9bGUoYixlLmRlYm91bmNlKSx4PXQ9PnthLmVtaXQoXCJpbnB1dFwiLHRbZS52YWx1ZUtleV0pLGEuZW1pdChQdCx0W2UudmFsdWVLZXldKSxhLmVtaXQoXCJzZWxlY3RcIix0KSxrKCgoKT0+e28udmFsdWU9W10saS52YWx1ZT0tMX0pKX07cmV0dXJue2F0dHJzOm4sc3VnZ2VzdGlvbnM6byxoaWdobGlnaHRlZEluZGV4OmksZHJvcGRvd25XaWR0aDpyLGFjdGl2YXRlZDpzLHN1Z2dlc3Rpb25EaXNhYmxlZDp1LGxvYWRpbmc6ZCxpbnB1dFJlZjpjLHJlZ2lvblJlZjpwLHBvcHBlcjpoLGlkOnYsc3VnZ2VzdGlvblZpc2libGU6bSxzdWdnZXN0aW9uTG9hZGluZzpmLGdldERhdGE6YixoYW5kbGVJbnB1dDp0PT57aWYoYS5lbWl0KFwiaW5wdXRcIix0KSxhLmVtaXQoUHQsdCksdS52YWx1ZT0hMSwhZS50cmlnZ2VyT25Gb2N1cyYmIXQpcmV0dXJuIHUudmFsdWU9ITAsdm9pZChvLnZhbHVlPVtdKTtDKHQpfSxoYW5kbGVDaGFuZ2U6ZT0+e2EuZW1pdChcImNoYW5nZVwiLGUpfSxoYW5kbGVGb2N1czp0PT57cy52YWx1ZT0hMCxhLmVtaXQoXCJmb2N1c1wiLHQpLGUudHJpZ2dlck9uRm9jdXMmJkMoZS5tb2RlbFZhbHVlKX0saGFuZGxlQmx1cjplPT57YS5lbWl0KFwiYmx1clwiLGUpfSxoYW5kbGVDbGVhcjooKT0+e3MudmFsdWU9ITEsYS5lbWl0KFB0LFwiXCIpLGEuZW1pdChcImNsZWFyXCIpfSxoYW5kbGVLZXlFbnRlcjooKT0+e20udmFsdWUmJmkudmFsdWU+PTAmJmkudmFsdWU8by52YWx1ZS5sZW5ndGg/eChvLnZhbHVlW2kudmFsdWVdKTplLnNlbGVjdFdoZW5Vbm1hdGNoZWQmJihhLmVtaXQoXCJzZWxlY3RcIix7dmFsdWU6ZS5tb2RlbFZhbHVlfSksaygoKCk9PntvLnZhbHVlPVtdLGkudmFsdWU9LTF9KSkpfSxjbG9zZTooKT0+e3MudmFsdWU9ITF9LGZvY3VzOigpPT57Yy52YWx1ZS5mb2N1cygpfSxzZWxlY3Q6eCxoaWdobGlnaHQ6ZT0+e2lmKCFtLnZhbHVlfHxkLnZhbHVlKXJldHVybjtpZihlPDApcmV0dXJuIHZvaWQoaS52YWx1ZT0tMSk7ZT49by52YWx1ZS5sZW5ndGgmJihlPW8udmFsdWUubGVuZ3RoLTEpO2NvbnN0IHQ9cC52YWx1ZS5xdWVyeVNlbGVjdG9yKFwiLmVsLWF1dG9jb21wbGV0ZS1zdWdnZXN0aW9uX193cmFwXCIpLGw9dC5xdWVyeVNlbGVjdG9yQWxsKFwiLmVsLWF1dG9jb21wbGV0ZS1zdWdnZXN0aW9uX19saXN0IGxpXCIpW2VdLGE9dC5zY3JvbGxUb3Asbj1sLm9mZnNldFRvcDtuK2wuc2Nyb2xsSGVpZ2h0PmErdC5jbGllbnRIZWlnaHQmJih0LnNjcm9sbFRvcCs9bC5zY3JvbGxIZWlnaHQpLG48YSYmKHQuc2Nyb2xsVG9wLT1sLnNjcm9sbEhlaWdodCksaS52YWx1ZT1lLGMudmFsdWUuaW5wdXRPclRleHRhcmVhLnNldEF0dHJpYnV0ZShcImFyaWEtYWN0aXZlZGVzY2VuZGFudFwiLGAke3YudmFsdWV9LWl0ZW0tJHtpLnZhbHVlfWApfX19fSk7Y29uc3QgTWw9e2tleTowfSxUbD1zKFwiaVwiLHtjbGFzczpcImVsLWljb24tbG9hZGluZ1wifSxudWxsLC0xKTtFbC5yZW5kZXI9ZnVuY3Rpb24oZSx0LGwsbyx1LGgpe2NvbnN0IHY9UChcImVsLWlucHV0XCIpLG09UChcImVsLXNjcm9sbGJhclwiKSxmPVAoXCJlbC1wb3BwZXJcIiksZz1GKFwiY2xpY2tvdXRzaWRlXCIpO3JldHVybiBhKCksbihmLHtyZWY6XCJwb3BwZXJcIix2aXNpYmxlOmUuc3VnZ2VzdGlvblZpc2libGUsXCJvblVwZGF0ZTp2aXNpYmxlXCI6dFszXXx8KHRbM109dD0+ZS5zdWdnZXN0aW9uVmlzaWJsZT10KSxwbGFjZW1lbnQ6ZS5wbGFjZW1lbnQsXCJwb3BwZXItY2xhc3NcIjpcImVsLWF1dG9jb21wbGV0ZV9fcG9wcGVyIFwiK2UucG9wcGVyQ2xhc3MsXCJhcHBlbmQtdG8tYm9keVwiOmUucG9wcGVyQXBwZW5kVG9Cb2R5LHB1cmU6XCJcIixcIm1hbnVhbC1tb2RlXCI6XCJcIixlZmZlY3Q6XCJsaWdodFwiLHRyaWdnZXI6XCJjbGlja1wiLHRyYW5zaXRpb246XCJlbC16b29tLWluLXRvcFwiLFwiZ3B1LWFjY2VsZXJhdGlvblwiOiExfSx7dHJpZ2dlcjppKCgoKT0+W3IocyhcImRpdlwiLHtjbGFzczpbXCJlbC1hdXRvY29tcGxldGVcIixlLiRhdHRycy5jbGFzc10sc3R5bGU6ZS4kYXR0cnMuc3R5bGUscm9sZTpcImNvbWJvYm94XCIsXCJhcmlhLWhhc3BvcHVwXCI6XCJsaXN0Ym94XCIsXCJhcmlhLWV4cGFuZGVkXCI6ZS5zdWdnZXN0aW9uVmlzaWJsZSxcImFyaWEtb3duc1wiOmUuaWR9LFtzKHYsTSh7cmVmOlwiaW5wdXRSZWZcIn0sZS5hdHRycyx7XCJtb2RlbC12YWx1ZVwiOmUubW9kZWxWYWx1ZSxvbklucHV0OmUuaGFuZGxlSW5wdXQsb25DaGFuZ2U6ZS5oYW5kbGVDaGFuZ2Usb25Gb2N1czplLmhhbmRsZUZvY3VzLG9uQmx1cjplLmhhbmRsZUJsdXIsb25DbGVhcjplLmhhbmRsZUNsZWFyLG9uS2V5ZG93bjpbdFsxXXx8KHRbMV09JChUKCh0PT5lLmhpZ2hsaWdodChlLmhpZ2hsaWdodGVkSW5kZXgtMSkpLFtcInByZXZlbnRcIl0pLFtcInVwXCJdKSksdFsyXXx8KHRbMl09JChUKCh0PT5lLmhpZ2hsaWdodChlLmhpZ2hsaWdodGVkSW5kZXgrMSkpLFtcInByZXZlbnRcIl0pLFtcImRvd25cIl0pKSwkKFQoZS5oYW5kbGVLZXlFbnRlcixbXCJwcmV2ZW50XCJdKSxbXCJlbnRlclwiXSksJChUKGUuY2xvc2UsW1wicHJldmVudFwiXSksW1widGFiXCJdKV19KSxSKHtfOjJ9LFtlLiRzbG90cy5wcmVwZW5kP3tuYW1lOlwicHJlcGVuZFwiLGZuOmkoKCgpPT5bZChlLiRzbG90cyxcInByZXBlbmRcIildKSl9OnZvaWQgMCxlLiRzbG90cy5hcHBlbmQ/e25hbWU6XCJhcHBlbmRcIixmbjppKCgoKT0+W2QoZS4kc2xvdHMsXCJhcHBlbmRcIildKSl9OnZvaWQgMCxlLiRzbG90cy5wcmVmaXg/e25hbWU6XCJwcmVmaXhcIixmbjppKCgoKT0+W2QoZS4kc2xvdHMsXCJwcmVmaXhcIildKSl9OnZvaWQgMCxlLiRzbG90cy5zdWZmaXg/e25hbWU6XCJzdWZmaXhcIixmbjppKCgoKT0+W2QoZS4kc2xvdHMsXCJzdWZmaXhcIildKSl9OnZvaWQgMF0pLDEwNDAsW1wibW9kZWwtdmFsdWVcIixcIm9uSW5wdXRcIixcIm9uQ2hhbmdlXCIsXCJvbkZvY3VzXCIsXCJvbkJsdXJcIixcIm9uQ2xlYXJcIixcIm9uS2V5ZG93blwiXSldLDE0LFtcImFyaWEtZXhwYW5kZWRcIixcImFyaWEtb3duc1wiXSksW1tnLGUuY2xvc2VdXSldKSksZGVmYXVsdDppKCgoKT0+W3MoXCJkaXZcIix7cmVmOlwicmVnaW9uUmVmXCIsY2xhc3M6W1wiZWwtYXV0b2NvbXBsZXRlLXN1Z2dlc3Rpb25cIixlLnN1Z2dlc3Rpb25Mb2FkaW5nJiZcImlzLWxvYWRpbmdcIl0sc3R5bGU6e3dpZHRoOmUuZHJvcGRvd25XaWR0aCxvdXRsaW5lOlwibm9uZVwifSxyb2xlOlwicmVnaW9uXCJ9LFtzKG0se3RhZzpcInVsXCIsXCJ3cmFwLWNsYXNzXCI6XCJlbC1hdXRvY29tcGxldGUtc3VnZ2VzdGlvbl9fd3JhcFwiLFwidmlldy1jbGFzc1wiOlwiZWwtYXV0b2NvbXBsZXRlLXN1Z2dlc3Rpb25fX2xpc3RcIn0se2RlZmF1bHQ6aSgoKCk9PltlLnN1Z2dlc3Rpb25Mb2FkaW5nPyhhKCksbihcImxpXCIsTWwsW1RsXSkpOihhKCEwKSxuKEUse2tleToxfSxIKGUuc3VnZ2VzdGlvbnMsKCh0LGwpPT4oYSgpLG4oXCJsaVwiLHtpZDpgJHtlLmlkfS1pdGVtLSR7bH1gLGtleTpsLGNsYXNzOntoaWdobGlnaHRlZDplLmhpZ2hsaWdodGVkSW5kZXg9PT1sfSxyb2xlOlwib3B0aW9uXCIsXCJhcmlhLXNlbGVjdGVkXCI6ZS5oaWdobGlnaHRlZEluZGV4PT09bCxvbkNsaWNrOmw9PmUuc2VsZWN0KHQpfSxbZChlLiRzbG90cyxcImRlZmF1bHRcIix7aXRlbTp0fSwoKCk9PltjKHAodFtlLnZhbHVlS2V5XSksMSldKSldLDEwLFtcImlkXCIsXCJhcmlhLXNlbGVjdGVkXCIsXCJvbkNsaWNrXCJdKSkpKSwxMjgpKV0pKSxfOjF9KV0sNildKSksXzoxfSw4LFtcInZpc2libGVcIixcInBsYWNlbWVudFwiLFwicG9wcGVyLWNsYXNzXCIsXCJhcHBlbmQtdG8tYm9keVwiXSl9LEVsLl9fZmlsZT1cInBhY2thZ2VzL2F1dG9jb21wbGV0ZS9zcmMvaW5kZXgudnVlXCIsRWwuaW5zdGFsbD1lPT57ZS5jb21wb25lbnQoRWwubmFtZSxFbCl9O3ZhciBObD1lKHtuYW1lOlwiRWxBdmF0YXJcIixwcm9wczp7c2l6ZTp7dHlwZTpbTnVtYmVyLFN0cmluZ10sdmFsaWRhdG9yOmU9Plwic3RyaW5nXCI9PXR5cGVvZiBlP1tcImxhcmdlXCIsXCJtZWRpdW1cIixcInNtYWxsXCJdLmluY2x1ZGVzKGUpOlwibnVtYmVyXCI9PXR5cGVvZiBlLGRlZmF1bHQ6XCJsYXJnZVwifSxzaGFwZTp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcImNpcmNsZVwiLHZhbGlkYXRvcjplPT5bXCJjaXJjbGVcIixcInNxdWFyZVwiXS5pbmNsdWRlcyhlKX0saWNvbjpTdHJpbmcsc3JjOlN0cmluZyxhbHQ6U3RyaW5nLHNyY1NldDpTdHJpbmcsZml0Ont0eXBlOlN0cmluZyxkZWZhdWx0OlwiY292ZXJcIn19LGVtaXRzOltcImVycm9yXCJdLHNldHVwKGUse2VtaXQ6YX0pe2NvbnN0IG49dCghMSksbz1sKCgoKT0+e2NvbnN0e3NpemU6dCxpY29uOmwsc2hhcGU6YX09ZTtsZXQgbj1bXCJlbC1hdmF0YXJcIl07cmV0dXJuIHQmJlwic3RyaW5nXCI9PXR5cGVvZiB0JiZuLnB1c2goXCJlbC1hdmF0YXItLVwiK3QpLGwmJm4ucHVzaChcImVsLWF2YXRhci0taWNvblwiKSxhJiZuLnB1c2goXCJlbC1hdmF0YXItLVwiK2EpLG59KSksaT1sKCgoKT0+e2NvbnN0e3NpemU6dH09ZTtyZXR1cm5cIm51bWJlclwiPT10eXBlb2YgdD97aGVpZ2h0OnQrXCJweFwiLHdpZHRoOnQrXCJweFwiLGxpbmVIZWlnaHQ6dCtcInB4XCJ9Ont9fSkpLHI9bCgoKCk9Pih7b2JqZWN0Rml0OmUuZml0fSkpKTtyZXR1cm57aGFzTG9hZEVycm9yOm4sYXZhdGFyQ2xhc3M6byxzaXplU3R5bGU6aSxoYW5kbGVFcnJvcjpmdW5jdGlvbihlKXtuLnZhbHVlPSEwLGEoXCJlcnJvclwiLGUpfSxmaXRTdHlsZTpyfX19KTtObC5yZW5kZXI9ZnVuY3Rpb24oZSx0LGwsbyxpLHIpe3JldHVybiBhKCksbihcInNwYW5cIix7Y2xhc3M6ZS5hdmF0YXJDbGFzcyxzdHlsZTplLnNpemVTdHlsZX0sWyFlLnNyYyYmIWUuc3JjU2V0fHxlLmhhc0xvYWRFcnJvcj9lLmljb24/KGEoKSxuKFwiaVwiLHtrZXk6MSxjbGFzczplLmljb259LG51bGwsMikpOmQoZS4kc2xvdHMsXCJkZWZhdWx0XCIse2tleToyfSk6KGEoKSxuKFwiaW1nXCIse2tleTowLHNyYzplLnNyYyxhbHQ6ZS5hbHQsc3Jjc2V0OmUuc3JjU2V0LHN0eWxlOmUuZml0U3R5bGUsb25FcnJvcjp0WzFdfHwodFsxXT0oLi4udCk9PmUuaGFuZGxlRXJyb3IoLi4udCkpfSxudWxsLDQ0LFtcInNyY1wiLFwiYWx0XCIsXCJzcmNzZXRcIl0pKV0sNil9LE5sLl9fZmlsZT1cInBhY2thZ2VzL2F2YXRhci9zcmMvaW5kZXgudnVlXCIsTmwuaW5zdGFsbD1lPT57ZS5jb21wb25lbnQoTmwubmFtZSxObCl9O2NvbnN0IERsPWU9Pk1hdGgucG93KGUsMyk7dmFyIE9sPWUoe25hbWU6XCJFbEJhY2t0b3BcIixwcm9wczp7dmlzaWJpbGl0eUhlaWdodDp7dHlwZTpOdW1iZXIsZGVmYXVsdDoyMDB9LHRhcmdldDp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIlwifSxyaWdodDp7dHlwZTpOdW1iZXIsZGVmYXVsdDo0MH0sYm90dG9tOnt0eXBlOk51bWJlcixkZWZhdWx0OjQwfX0sZW1pdHM6W1wiY2xpY2tcIl0sc2V0dXAoZSxhKXtjb25zdCBuPXQobnVsbCksbz10KG51bGwpLGk9dCghMSkscj1sKCgoKT0+ZS5ib3R0b20rXCJweFwiKSkscz1sKCgoKT0+ZS5yaWdodCtcInB4XCIpKSx1PSgpPT57Y29uc3QgZT1EYXRlLm5vdygpLHQ9bi52YWx1ZS5zY3JvbGxUb3AsbD13aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lfHwoZT0+c2V0VGltZW91dChlLDE2KSksYT0oKT0+e2NvbnN0IG89KERhdGUubm93KCktZSkvNTAwO3ZhciBpO288MT8obi52YWx1ZS5zY3JvbGxUb3A9dCooMS0oKGk9byk8LjU/RGwoMippKS8yOjEtRGwoMiooMS1pKSkvMikpLGwoYSkpOm4udmFsdWUuc2Nyb2xsVG9wPTB9O2woYSl9LGQ9cmUoKCgpPT57aS52YWx1ZT1uLnZhbHVlLnNjcm9sbFRvcD49ZS52aXNpYmlsaXR5SGVpZ2h0fSksMzAwKTtyZXR1cm4gXygoKCk9PntpZihvLnZhbHVlPWRvY3VtZW50LG4udmFsdWU9ZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LGUudGFyZ2V0KXtpZihuLnZhbHVlPWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZS50YXJnZXQpLCFuLnZhbHVlKXRocm93IG5ldyBFcnJvcihcInRhcmdldCBpcyBub3QgZXhpc3RlZDogXCIrZS50YXJnZXQpO28udmFsdWU9bi52YWx1ZX1sdChvLnZhbHVlLFwic2Nyb2xsXCIsZCl9KSksTygoKCk9PnthdChvLnZhbHVlLFwic2Nyb2xsXCIsZCl9KSkse2VsOm4sY29udGFpbmVyOm8sdmlzaWJsZTppLHN0eWxlQm90dG9tOnIsc3R5bGVSaWdodDpzLGhhbmRsZUNsaWNrOmU9Pnt1KCksYS5lbWl0KFwiY2xpY2tcIixlKX19fX0pO2NvbnN0IFBsPXMoXCJpXCIse2NsYXNzOlwiZWwtaWNvbi1jYXJldC10b3BcIn0sbnVsbCwtMSk7T2wucmVuZGVyPWZ1bmN0aW9uKGUsdCxsLHIscyxjKXtyZXR1cm4gYSgpLG4obyx7bmFtZTpcImVsLWZhZGUtaW5cIn0se2RlZmF1bHQ6aSgoKCk9PltlLnZpc2libGU/KGEoKSxuKFwiZGl2XCIse2tleTowLHN0eWxlOntyaWdodDplLnN0eWxlUmlnaHQsYm90dG9tOmUuc3R5bGVCb3R0b219LGNsYXNzOlwiZWwtYmFja3RvcFwiLG9uQ2xpY2s6dFsxXXx8KHRbMV09VCgoKC4uLnQpPT5lLmhhbmRsZUNsaWNrKC4uLnQpKSxbXCJzdG9wXCJdKSl9LFtkKGUuJHNsb3RzLFwiZGVmYXVsdFwiLHt9LCgoKT0+W1BsXSkpXSw0KSk6dShcInYtaWZcIiwhMCldKSksXzoxfSl9LE9sLl9fZmlsZT1cInBhY2thZ2VzL2JhY2t0b3Avc3JjL2luZGV4LnZ1ZVwiLE9sLmluc3RhbGw9ZT0+e2UuY29tcG9uZW50KE9sLm5hbWUsT2wpfTt2YXIgVmw9ZSh7bmFtZTpcIkVsQmFkZ2VcIixwcm9wczp7dmFsdWU6e3R5cGU6W1N0cmluZyxOdW1iZXJdLGRlZmF1bHQ6XCJcIn0sbWF4Ont0eXBlOk51bWJlcixkZWZhdWx0Ojk5fSxpc0RvdDpCb29sZWFuLGhpZGRlbjpCb29sZWFuLHR5cGU6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJwcmltYXJ5XCIsdmFsaWRhdG9yOmU9PltcInByaW1hcnlcIixcInN1Y2Nlc3NcIixcIndhcm5pbmdcIixcImluZm9cIixcImRhbmdlclwiXS5pbmNsdWRlcyhlKX19LHNldHVwOmU9Pih7Y29udGVudDpsKCgoKT0+e2lmKGUuaXNEb3QpcmV0dXJuO2NvbnN0e3ZhbHVlOnQsbWF4Omx9PWU7cmV0dXJuXCJudW1iZXJcIj09dHlwZW9mIHQmJlwibnVtYmVyXCI9PXR5cGVvZiBsJiZsPHQ/bCtcIitcIjp0fSkpfSl9KTtjb25zdCBJbD17Y2xhc3M6XCJlbC1iYWRnZVwifTtWbC5yZW5kZXI9ZnVuY3Rpb24oZSx0LGwsdSxjLHYpe3JldHVybiBhKCksbihcImRpdlwiLElsLFtkKGUuJHNsb3RzLFwiZGVmYXVsdFwiKSxzKG8se25hbWU6XCJlbC16b29tLWluLWNlbnRlclwifSx7ZGVmYXVsdDppKCgoKT0+W3IocyhcInN1cFwiLHtjbGFzczpbXCJlbC1iYWRnZV9fY29udGVudFwiLFtcImVsLWJhZGdlX19jb250ZW50LS1cIitlLnR5cGUse1wiaXMtZml4ZWRcIjplLiRzbG90cy5kZWZhdWx0LFwiaXMtZG90XCI6ZS5pc0RvdH1dXSx0ZXh0Q29udGVudDpwKGUuY29udGVudCl9LG51bGwsMTAsW1widGV4dENvbnRlbnRcIl0pLFtbaCwhZS5oaWRkZW4mJihlLmNvbnRlbnR8fDA9PT1lLmNvbnRlbnR8fGUuaXNEb3QpXV0pXSkpLF86MX0pXSl9LFZsLl9fZmlsZT1cInBhY2thZ2VzL2JhZGdlL3NyYy9pbmRleC52dWVcIixWbC5pbnN0YWxsPWU9PntlLmNvbXBvbmVudChWbC5uYW1lLFZsKX07dmFyIEFsPWUoe25hbWU6XCJFbEJyZWFkY3J1bWJcIixwcm9wczp7c2VwYXJhdG9yOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiL1wifSxzZXBhcmF0b3JDbGFzczp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIlwifX0sc2V0dXAoZSl7Y29uc3QgbD10KG51bGwpO3JldHVybiB4KFwiYnJlYWRjcnVtYlwiLGUpLF8oKCgpPT57Y29uc3QgZT1sLnZhbHVlLnF1ZXJ5U2VsZWN0b3JBbGwoXCIuZWwtYnJlYWRjcnVtYl9faXRlbVwiKTtlLmxlbmd0aCYmZVtlLmxlbmd0aC0xXS5zZXRBdHRyaWJ1dGUoXCJhcmlhLWN1cnJlbnRcIixcInBhZ2VcIil9KSkse2JyZWFkY3J1bWI6bH19fSk7Y29uc3QgQmw9e3JlZjpcImJyZWFkY3J1bWJcIixjbGFzczpcImVsLWJyZWFkY3J1bWJcIixcImFyaWEtbGFiZWxcIjpcIkJyZWFkY3J1bWJcIixyb2xlOlwibmF2aWdhdGlvblwifTtBbC5yZW5kZXI9ZnVuY3Rpb24oZSx0LGwsbyxpLHIpe3JldHVybiBhKCksbihcImRpdlwiLEJsLFtkKGUuJHNsb3RzLFwiZGVmYXVsdFwiKV0sNTEyKX0sQWwuX19maWxlPVwicGFja2FnZXMvYnJlYWRjcnVtYi9zcmMvaW5kZXgudnVlXCIsQWwuaW5zdGFsbD1lPT57ZS5jb21wb25lbnQoQWwubmFtZSxBbCl9O3ZhciBMbD1lKHtuYW1lOlwiRWxCcmVhZGNydW1iSXRlbVwiLHByb3BzOnt0bzp7dHlwZTpbU3RyaW5nLE9iamVjdF0sZGVmYXVsdDpcIlwifSxyZXBsYWNlOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMX19LHNldHVwKGUpe2NvbnN0IGw9dChudWxsKSxhPXcoXCJicmVhZGNydW1iXCIpLG49digpLmFwcENvbnRleHQuY29uZmlnLmdsb2JhbFByb3BlcnRpZXMuJHJvdXRlcjtyZXR1cm4gXygoKCk9PntsLnZhbHVlLnNldEF0dHJpYnV0ZShcInJvbGVcIixcImxpbmtcIiksbC52YWx1ZS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwoKCk9PntlLnRvJiZuJiYoZS5yZXBsYWNlP24ucmVwbGFjZShlLnRvKTpuLnB1c2goZS50bykpfSkpfSkpLHtsaW5rOmwsc2VwYXJhdG9yOm51bGw9PWE/dm9pZCAwOmEuc2VwYXJhdG9yLHNlcGFyYXRvckNsYXNzOm51bGw9PWE/dm9pZCAwOmEuc2VwYXJhdG9yQ2xhc3N9fX0pO2NvbnN0IHpsPXtjbGFzczpcImVsLWJyZWFkY3J1bWJfX2l0ZW1cIn0sRmw9e2tleToxLGNsYXNzOlwiZWwtYnJlYWRjcnVtYl9fc2VwYXJhdG9yXCIscm9sZTpcInByZXNlbnRhdGlvblwifTtMbC5yZW5kZXI9ZnVuY3Rpb24oZSx0LGwsbyxpLHIpe3JldHVybiBhKCksbihcInNwYW5cIix6bCxbcyhcInNwYW5cIix7cmVmOlwibGlua1wiLGNsYXNzOltcImVsLWJyZWFkY3J1bWJfX2lubmVyXCIsZS50bz9cImlzLWxpbmtcIjpcIlwiXSxyb2xlOlwibGlua1wifSxbZChlLiRzbG90cyxcImRlZmF1bHRcIildLDIpLGUuc2VwYXJhdG9yQ2xhc3M/KGEoKSxuKFwiaVwiLHtrZXk6MCxjbGFzczpbXCJlbC1icmVhZGNydW1iX19zZXBhcmF0b3JcIixlLnNlcGFyYXRvckNsYXNzXX0sbnVsbCwyKSk6KGEoKSxuKFwic3BhblwiLEZsLHAoZS5zZXBhcmF0b3IpLDEpKV0pfSxMbC5fX2ZpbGU9XCJwYWNrYWdlcy9icmVhZGNydW1iL3NyYy9pdGVtLnZ1ZVwiLExsLmluc3RhbGw9ZT0+e2UuY29tcG9uZW50KExsLm5hbWUsTGwpfTt2YXIgJGw9ZSh7bmFtZTpcIkVsQnV0dG9uXCIscHJvcHM6e3R5cGU6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJkZWZhdWx0XCIsdmFsaWRhdG9yOmU9PltcImRlZmF1bHRcIixcInByaW1hcnlcIixcInN1Y2Nlc3NcIixcIndhcm5pbmdcIixcImluZm9cIixcImRhbmdlclwiLFwidGV4dFwiXS5pbmNsdWRlcyhlKX0sc2l6ZTp7dHlwZTpTdHJpbmcsdmFsaWRhdG9yOkF0fSxpY29uOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiXCJ9LG5hdGl2ZVR5cGU6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJidXR0b25cIix2YWxpZGF0b3I6ZT0+W1wiYnV0dG9uXCIsXCJzdWJtaXRcIixcInJlc2V0XCJdLmluY2x1ZGVzKGUpfSxsb2FkaW5nOkJvb2xlYW4sZGlzYWJsZWQ6Qm9vbGVhbixwbGFpbjpCb29sZWFuLGF1dG9mb2N1czpCb29sZWFuLHJvdW5kOkJvb2xlYW4sY2lyY2xlOkJvb2xlYW59LGVtaXRzOltcImNsaWNrXCJdLHNldHVwKGUsdCl7Y29uc3QgYT1xZSgpLG49dyhcImVsRm9ybVwiLHt9KSxvPXcoXCJlbEZvcm1JdGVtXCIse30pO3JldHVybntidXR0b25TaXplOmwoKCgpPT5lLnNpemV8fG8uc2l6ZXx8YS5zaXplKSksYnV0dG9uRGlzYWJsZWQ6bCgoKCk9PmUuZGlzYWJsZWR8fG4uZGlzYWJsZWQpKSxoYW5kbGVDbGljazplPT57dC5lbWl0KFwiY2xpY2tcIixlKX19fX0pO2NvbnN0IFJsPXtrZXk6MCxjbGFzczpcImVsLWljb24tbG9hZGluZ1wifSxIbD17a2V5OjJ9OyRsLnJlbmRlcj1mdW5jdGlvbihlLHQsbCxvLGkscil7cmV0dXJuIGEoKSxuKFwiYnV0dG9uXCIse2NsYXNzOltcImVsLWJ1dHRvblwiLGUudHlwZT9cImVsLWJ1dHRvbi0tXCIrZS50eXBlOlwiXCIsZS5idXR0b25TaXplP1wiZWwtYnV0dG9uLS1cIitlLmJ1dHRvblNpemU6XCJcIix7XCJpcy1kaXNhYmxlZFwiOmUuYnV0dG9uRGlzYWJsZWQsXCJpcy1sb2FkaW5nXCI6ZS5sb2FkaW5nLFwiaXMtcGxhaW5cIjplLnBsYWluLFwiaXMtcm91bmRcIjplLnJvdW5kLFwiaXMtY2lyY2xlXCI6ZS5jaXJjbGV9XSxkaXNhYmxlZDplLmJ1dHRvbkRpc2FibGVkfHxlLmxvYWRpbmcsYXV0b2ZvY3VzOmUuYXV0b2ZvY3VzLHR5cGU6ZS5uYXRpdmVUeXBlLG9uQ2xpY2s6dFsxXXx8KHRbMV09KC4uLnQpPT5lLmhhbmRsZUNsaWNrKC4uLnQpKX0sW2UubG9hZGluZz8oYSgpLG4oXCJpXCIsUmwpKTp1KFwidi1pZlwiLCEwKSxlLmljb24mJiFlLmxvYWRpbmc/KGEoKSxuKFwiaVwiLHtrZXk6MSxjbGFzczplLmljb259LG51bGwsMikpOnUoXCJ2LWlmXCIsITApLGUuJHNsb3RzLmRlZmF1bHQ/KGEoKSxuKFwic3BhblwiLEhsLFtkKGUuJHNsb3RzLFwiZGVmYXVsdFwiKV0pKTp1KFwidi1pZlwiLCEwKV0sMTAsW1wiZGlzYWJsZWRcIixcImF1dG9mb2N1c1wiLFwidHlwZVwiXSl9LCRsLl9fZmlsZT1cInBhY2thZ2VzL2J1dHRvbi9zcmMvYnV0dG9uLnZ1ZVwiLCRsLmluc3RhbGw9ZT0+e2UuY29tcG9uZW50KCRsLm5hbWUsJGwpfTt2YXIgV2w9ZSh7bmFtZTpcIkVsQnV0dG9uR3JvdXBcIn0pO2NvbnN0IGpsPXtjbGFzczpcImVsLWJ1dHRvbi1ncm91cFwifTtXbC5yZW5kZXI9ZnVuY3Rpb24oZSx0LGwsbyxpLHIpe3JldHVybiBhKCksbihcImRpdlwiLGpsLFtkKGUuJHNsb3RzLFwiZGVmYXVsdFwiKV0pfSxXbC5fX2ZpbGU9XCJwYWNrYWdlcy9idXR0b24vc3JjL2J1dHRvbi1ncm91cC52dWVcIixXbC5pbnN0YWxsPWU9PntlLmNvbXBvbmVudChXbC5uYW1lLFdsKX07bGV0IEtsPXtuYW1lOlwiZW5cIixlbDp7Y29sb3JwaWNrZXI6e2NvbmZpcm06XCJPS1wiLGNsZWFyOlwiQ2xlYXJcIn0sZGF0ZXBpY2tlcjp7bm93OlwiTm93XCIsdG9kYXk6XCJUb2RheVwiLGNhbmNlbDpcIkNhbmNlbFwiLGNsZWFyOlwiQ2xlYXJcIixjb25maXJtOlwiT0tcIixzZWxlY3REYXRlOlwiU2VsZWN0IGRhdGVcIixzZWxlY3RUaW1lOlwiU2VsZWN0IHRpbWVcIixzdGFydERhdGU6XCJTdGFydCBEYXRlXCIsc3RhcnRUaW1lOlwiU3RhcnQgVGltZVwiLGVuZERhdGU6XCJFbmQgRGF0ZVwiLGVuZFRpbWU6XCJFbmQgVGltZVwiLHByZXZZZWFyOlwiUHJldmlvdXMgWWVhclwiLG5leHRZZWFyOlwiTmV4dCBZZWFyXCIscHJldk1vbnRoOlwiUHJldmlvdXMgTW9udGhcIixuZXh0TW9udGg6XCJOZXh0IE1vbnRoXCIseWVhcjpcIlwiLG1vbnRoMTpcIkphbnVhcnlcIixtb250aDI6XCJGZWJydWFyeVwiLG1vbnRoMzpcIk1hcmNoXCIsbW9udGg0OlwiQXByaWxcIixtb250aDU6XCJNYXlcIixtb250aDY6XCJKdW5lXCIsbW9udGg3OlwiSnVseVwiLG1vbnRoODpcIkF1Z3VzdFwiLG1vbnRoOTpcIlNlcHRlbWJlclwiLG1vbnRoMTA6XCJPY3RvYmVyXCIsbW9udGgxMTpcIk5vdmVtYmVyXCIsbW9udGgxMjpcIkRlY2VtYmVyXCIsd2VlazpcIndlZWtcIix3ZWVrczp7c3VuOlwiU3VuXCIsbW9uOlwiTW9uXCIsdHVlOlwiVHVlXCIsd2VkOlwiV2VkXCIsdGh1OlwiVGh1XCIsZnJpOlwiRnJpXCIsc2F0OlwiU2F0XCJ9LG1vbnRoczp7amFuOlwiSmFuXCIsZmViOlwiRmViXCIsbWFyOlwiTWFyXCIsYXByOlwiQXByXCIsbWF5OlwiTWF5XCIsanVuOlwiSnVuXCIsanVsOlwiSnVsXCIsYXVnOlwiQXVnXCIsc2VwOlwiU2VwXCIsb2N0OlwiT2N0XCIsbm92OlwiTm92XCIsZGVjOlwiRGVjXCJ9fSxzZWxlY3Q6e2xvYWRpbmc6XCJMb2FkaW5nXCIsbm9NYXRjaDpcIk5vIG1hdGNoaW5nIGRhdGFcIixub0RhdGE6XCJObyBkYXRhXCIscGxhY2Vob2xkZXI6XCJTZWxlY3RcIn0sY2FzY2FkZXI6e25vTWF0Y2g6XCJObyBtYXRjaGluZyBkYXRhXCIsbG9hZGluZzpcIkxvYWRpbmdcIixwbGFjZWhvbGRlcjpcIlNlbGVjdFwiLG5vRGF0YTpcIk5vIGRhdGFcIn0scGFnaW5hdGlvbjp7Z290bzpcIkdvIHRvXCIscGFnZXNpemU6XCIvcGFnZVwiLHRvdGFsOlwiVG90YWwge3RvdGFsfVwiLHBhZ2VDbGFzc2lmaWVyOlwiXCJ9LG1lc3NhZ2Vib3g6e3RpdGxlOlwiTWVzc2FnZVwiLGNvbmZpcm06XCJPS1wiLGNhbmNlbDpcIkNhbmNlbFwiLGVycm9yOlwiSWxsZWdhbCBpbnB1dFwifSx1cGxvYWQ6e2RlbGV0ZVRpcDpcInByZXNzIGRlbGV0ZSB0byByZW1vdmVcIixkZWxldGU6XCJEZWxldGVcIixwcmV2aWV3OlwiUHJldmlld1wiLGNvbnRpbnVlOlwiQ29udGludWVcIn0sdGFibGU6e2VtcHR5VGV4dDpcIk5vIERhdGFcIixjb25maXJtRmlsdGVyOlwiQ29uZmlybVwiLHJlc2V0RmlsdGVyOlwiUmVzZXRcIixjbGVhckZpbHRlcjpcIkFsbFwiLHN1bVRleHQ6XCJTdW1cIn0sdHJlZTp7ZW1wdHlUZXh0OlwiTm8gRGF0YVwifSx0cmFuc2Zlcjp7bm9NYXRjaDpcIk5vIG1hdGNoaW5nIGRhdGFcIixub0RhdGE6XCJObyBkYXRhXCIsdGl0bGVzOltcIkxpc3QgMVwiLFwiTGlzdCAyXCJdLGZpbHRlclBsYWNlaG9sZGVyOlwiRW50ZXIga2V5d29yZFwiLG5vQ2hlY2tlZEZvcm1hdDpcInt0b3RhbH0gaXRlbXNcIixoYXNDaGVja2VkRm9ybWF0Olwie2NoZWNrZWR9L3t0b3RhbH0gY2hlY2tlZFwifSxpbWFnZTp7ZXJyb3I6XCJGQUlMRURcIn0scGFnZUhlYWRlcjp7dGl0bGU6XCJCYWNrXCJ9LHBvcGNvbmZpcm06e2NvbmZpcm1CdXR0b25UZXh0OlwiWWVzXCIsY2FuY2VsQnV0dG9uVGV4dDpcIk5vXCJ9fX07ZnVuY3Rpb24gWWwoZSx0KXtyZXR1cm4gZSYmdD9lLnJlcGxhY2UoL1xceyhcXHcrKVxcfS9nLCgoZSxsKT0+dFtsXSkpOmV9Y29uc3QgcWw9KGUsdCk9PntsZXQgbDtjb25zdCBhPWUuc3BsaXQoXCIuXCIpO2xldCBuPUtsO2ZvcihsZXQgZT0wLG89YS5sZW5ndGg7ZTxvO2UrKyl7aWYobD1uW2FbZV1dLGU9PT1vLTEpcmV0dXJuIFlsKGwsdCk7aWYoIWwpcmV0dXJuXCJcIjtuPWx9cmV0dXJuXCJcIn0sVWw9e2RhdGU6XCJZWVlZLU1NLUREXCIsd2VlazpcImdnZ2dbd113d1wiLHllYXI6XCJZWVlZXCIsbW9udGg6XCJZWVlZLU1NXCIsZGF0ZXRpbWU6XCJZWVlZLU1NLUREIEhIOm1tOnNzXCIsbW9udGhyYW5nZTpcIllZWVktTU1cIixkYXRlcmFuZ2U6XCJZWVlZLU1NLUREXCIsZGF0ZXRpbWVyYW5nZTpcIllZWVktTU0tREQgSEg6bW06c3NcIn0sR2w9e25hbWU6e3R5cGU6W0FycmF5LFN0cmluZ10sZGVmYXVsdDpcIlwifSxmb3JtYXQ6e3R5cGU6U3RyaW5nfSx0eXBlOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiXCJ9LGNsZWFyYWJsZTp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITB9LGNsZWFySWNvbjp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcImVsLWljb24tY2lyY2xlLWNsb3NlXCJ9LGVkaXRhYmxlOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMH0scHJlZml4SWNvbjp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIlwifSxzaXplOnt0eXBlOlN0cmluZyx2YWxpZGF0b3I6QXR9LHJlYWRvbmx5Ont0eXBlOkJvb2xlYW4sZGVmYXVsdDohMX0sZGlzYWJsZWQ6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiExfSxwbGFjZWhvbGRlcjp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIlwifSxtb2RlbFZhbHVlOnt0eXBlOltEYXRlLEFycmF5LFN0cmluZ10sZGVmYXVsdDpcIlwifSxyYW5nZVNlcGFyYXRvcjp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIi1cIn0sc3RhcnRQbGFjZWhvbGRlcjpTdHJpbmcsZW5kUGxhY2Vob2xkZXI6U3RyaW5nLGRlZmF1bHRWYWx1ZTp7dHlwZTpbRGF0ZSxBcnJheV19LGRlZmF1bHRUaW1lOnt0eXBlOltEYXRlLEFycmF5XX0saXNSYW5nZTp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITF9LGRpc2FibGVkSG91cnM6e3R5cGU6RnVuY3Rpb259LGRpc2FibGVkTWludXRlczp7dHlwZTpGdW5jdGlvbn0sZGlzYWJsZWRTZWNvbmRzOnt0eXBlOkZ1bmN0aW9ufSxkaXNhYmxlZERhdGU6e3R5cGU6RnVuY3Rpb259LGNlbGxDbGFzc05hbWU6e3R5cGU6RnVuY3Rpb259LHNob3J0Y3V0czp7dHlwZTpBcnJheSxkZWZhdWx0OigpPT5bXX0sYXJyb3dDb250cm9sOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMX0sdmFsaWRhdGVFdmVudDp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITB9fSxYbD1mdW5jdGlvbihlLHQpe2NvbnN0IGw9ZSBpbnN0YW5jZW9mIERhdGUsYT10IGluc3RhbmNlb2YgRGF0ZTtyZXR1cm4gbCYmYT9lLmdldFRpbWUoKT09PXQuZ2V0VGltZSgpOiFsJiYhYSYmZT09PXR9LFFsPWZ1bmN0aW9uKGUsdCl7Y29uc3QgbD1lIGluc3RhbmNlb2YgQXJyYXksYT10IGluc3RhbmNlb2YgQXJyYXk7cmV0dXJuIGwmJmE/ZS5sZW5ndGg9PT10Lmxlbmd0aCYmZS5ldmVyeSgoKGUsbCk9PlhsKGUsdFtsXSkpKTohbCYmIWEmJlhsKGUsdCl9O3ZhciBabD1lKHtuYW1lOlwiUGlja2VyXCIsY29tcG9uZW50czp7RWxJbnB1dDpXdCxFbFBvcHBlcjpTbH0sZGlyZWN0aXZlczp7Y2xpY2tvdXRzaWRlOk10fSxwcm9wczpHbCxlbWl0czpbXCJ1cGRhdGU6bW9kZWxWYWx1ZVwiLFwiY2hhbmdlXCIsXCJmb2N1c1wiLFwiYmx1clwiXSxzZXR1cChlLGEpe2NvbnN0IG49cWUoKSxvPXcoXCJlbEZvcm1cIix7fSksaT13KFwiZWxGb3JtSXRlbVwiLHt9KSxyPXQobnVsbCkscz10KCExKSx1PXQoITEpLGQ9dChudWxsKTt5KHMsKHQ9Pnt2YXIgbDt0P2QudmFsdWU9ZS5tb2RlbFZhbHVlOihULnZhbHVlPW51bGwsYS5lbWl0KFwiYmx1clwiKSxEKCksZS52YWxpZGF0ZUV2ZW50JiYobnVsbD09PShsPWkuZm9ybUl0ZW1NaXR0KXx8dm9pZCAwPT09bHx8bC5lbWl0KFwiZWwuZm9ybS5ibHVyXCIpKSl9KSk7Y29uc3QgYz10PT57dmFyIGw7UWwodCxkLnZhbHVlKXx8KGEuZW1pdChcImNoYW5nZVwiLHQpLGUudmFsaWRhdGVFdmVudCYmKG51bGw9PT0obD1pLmZvcm1JdGVtTWl0dCl8fHZvaWQgMD09PWx8fGwuZW1pdChcImVsLmZvcm0uY2hhbmdlXCIsdCkpKX0scD10PT57UWwoZS5tb2RlbFZhbHVlLHQpfHxhLmVtaXQoXCJ1cGRhdGU6bW9kZWxWYWx1ZVwiLHQpfSxoPWwoKCgpPT57aWYoci52YWx1ZSl7Y29uc3QgZT1FLnZhbHVlP3IudmFsdWU6ci52YWx1ZS4kZWw7cmV0dXJuW10uc2xpY2UuY2FsbChlLnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dFwiKSl9cmV0dXJuW119KSksdj1sKCgoKT0+ZS5kaXNhYmxlZHx8by5kaXNhYmxlZCkpLG09bCgoKCk9PntsZXQgdDtyZXR1cm4gUy52YWx1ZT9JLnZhbHVlLmdldERlZmF1bHRWYWx1ZSYmKHQ9SS52YWx1ZS5nZXREZWZhdWx0VmFsdWUoKSk6dD1BcnJheS5pc0FycmF5KGUubW9kZWxWYWx1ZSk/ZS5tb2RlbFZhbHVlLm1hcCgoZT0+c2UoZSkpKTpzZShlLm1vZGVsVmFsdWUpLEkudmFsdWUuZ2V0UmFuZ2VBdmFsaWFibGVUaW1lJiYodD1JLnZhbHVlLmdldFJhbmdlQXZhbGlhYmxlVGltZSh0KSksdH0pKSxmPWwoKCgpPT57aWYoIUkudmFsdWUucGFuZWxSZWFkeSlyZXR1cm47aWYoIWIudmFsdWUmJlMudmFsdWUpcmV0dXJuO2lmKCFzLnZhbHVlJiZTLnZhbHVlKXJldHVybjtjb25zdCBlPVAobS52YWx1ZSk7cmV0dXJuIEFycmF5LmlzQXJyYXkoVC52YWx1ZSk/W1QudmFsdWVbMF18fGUmJmVbMF18fFwiXCIsVC52YWx1ZVsxXXx8ZSYmZVsxXXx8XCJcIl06bnVsbCE9PVQudmFsdWU/VC52YWx1ZTplP2sudmFsdWU/ZS5qb2luKFwiLCBcIik6ZTpcIlwifSkpLGc9bCgoKCk9Pi0xIT09ZS50eXBlLmluZGV4T2YoXCJ0aW1lXCIpKSksYj1sKCgoKT0+MD09PWUudHlwZS5pbmRleE9mKFwidGltZVwiKSkpLGs9bCgoKCk9PlwiZGF0ZXNcIj09PWUudHlwZSkpLEM9bCgoKCk9PmUucHJlZml4SWNvbnx8KGcudmFsdWU/XCJlbC1pY29uLXRpbWVcIjpcImVsLWljb24tZGF0ZVwiKSkpLF89dCghMSksUz1sKCgoKT0+IWUubW9kZWxWYWx1ZXx8QXJyYXkuaXNBcnJheShlLm1vZGVsVmFsdWUpJiYhZS5tb2RlbFZhbHVlLmxlbmd0aCkpLEU9bCgoKCk9PmUudHlwZS5pbmRleE9mKFwicmFuZ2VcIik+LTEpKSxNPWwoKCgpPT5lLnNpemV8fGkuc2l6ZXx8bi5zaXplKSksVD10KG51bGwpLE49KCk9PntpZihULnZhbHVlKXtjb25zdCBlPU8oZi52YWx1ZSk7ZSYmVihlKSYmKHAoZS50b0RhdGUoKSksVC52YWx1ZT1udWxsKX1cIlwiPT09VC52YWx1ZSYmKHAobnVsbCksYyhudWxsKSxULnZhbHVlPW51bGwpfSxEPSgpPT57aC52YWx1ZS5mb3JFYWNoKChlPT5lLmJsdXIoKSkpfSxPPWU9PmU/SS52YWx1ZS5wYXJzZVVzZXJJbnB1dChlKTpudWxsLFA9ZT0+ZT9JLnZhbHVlLmZvcm1hdFRvU3RyaW5nKGUpOm51bGwsVj1lPT5JLnZhbHVlLmlzVmFsaWRWYWx1ZShlKSxJPXQoe30pO3JldHVybiB4KFwiRVBfUElDS0VSX0JBU0VcIix7cHJvcHM6ZX0pLHtpc0RhdGVzUGlja2VyOmssaGFuZGxlRW5kQ2hhbmdlOigpPT57Y29uc3QgZT1PKFQudmFsdWUmJlQudmFsdWVbMV0pO2lmKGUpe1QudmFsdWU9W2YudmFsdWVbMF0sUChlKV07Y29uc3QgdD1bbS52YWx1ZSYmbS52YWx1ZVswXSxlXTtWKHQpJiYocCh0KSxULnZhbHVlPW51bGwpfX0saGFuZGxlU3RhcnRDaGFuZ2U6KCk9Pntjb25zdCBlPU8oVC52YWx1ZSYmVC52YWx1ZVswXSk7aWYoZSl7VC52YWx1ZT1bUChlKSxmLnZhbHVlWzFdXTtjb25zdCB0PVtlLG0udmFsdWUmJm0udmFsdWVbMV1dO1YodCkmJihwKHQpLFQudmFsdWU9bnVsbCl9fSxoYW5kbGVTdGFydElucHV0OmU9PntULnZhbHVlP1QudmFsdWU9W2UudGFyZ2V0LnZhbHVlLFQudmFsdWVbMV1dOlQudmFsdWU9W2UudGFyZ2V0LnZhbHVlLG51bGxdfSxoYW5kbGVFbmRJbnB1dDplPT57VC52YWx1ZT9ULnZhbHVlPVtULnZhbHVlWzBdLGUudGFyZ2V0LnZhbHVlXTpULnZhbHVlPVtudWxsLGUudGFyZ2V0LnZhbHVlXX0sb25Vc2VySW5wdXQ6ZT0+e1QudmFsdWU9ZX0saGFuZGxlQ2hhbmdlOk4saGFuZGxlS2V5ZG93bjplPT57Y29uc3QgdD1lLmNvZGU7cmV0dXJuIHQ9PT1mdC5lc2M/KHMudmFsdWU9ITEsdm9pZCBlLnN0b3BQcm9wYWdhdGlvbigpKTp0IT09ZnQudGFiP3Q9PT1mdC5lbnRlcj8oKFwiXCI9PT1ULnZhbHVlfHxWKE8oZi52YWx1ZSkpKSYmKE4oKSxzLnZhbHVlPSExKSx2b2lkIGUuc3RvcFByb3BhZ2F0aW9uKCkpOnZvaWQoVC52YWx1ZT9lLnN0b3BQcm9wYWdhdGlvbigpOkkudmFsdWUuaGFuZGxlS2V5ZG93biYmSS52YWx1ZS5oYW5kbGVLZXlkb3duKGUpKTp2b2lkKEUudmFsdWU/c2V0VGltZW91dCgoKCk9PnstMT09PWgudmFsdWUuaW5kZXhPZihkb2N1bWVudC5hY3RpdmVFbGVtZW50KSYmKHMudmFsdWU9ITEsRCgpKX0pLDApOihOKCkscy52YWx1ZT0hMSxlLnN0b3BQcm9wYWdhdGlvbigpKSl9LG9uQ2xpY2tPdXRzaWRlOigpPT57cy52YWx1ZSYmKHMudmFsdWU9ITEpfSxwaWNrZXJTaXplOk0saXNSYW5nZUlucHV0OkUsb25Nb3VzZUxlYXZlOigpPT57Xy52YWx1ZT0hMX0sb25Nb3VzZUVudGVyOigpPT57ZS5yZWFkb25seXx8di52YWx1ZXx8IVMudmFsdWUmJmUuY2xlYXJhYmxlJiYoXy52YWx1ZT0hMCl9LG9uQ2xlYXJJY29uQ2xpY2s6dD0+e2UucmVhZG9ubHl8fHYudmFsdWV8fF8udmFsdWUmJih0LnN0b3BQcm9wYWdhdGlvbigpLHAobnVsbCksYyhudWxsKSxfLnZhbHVlPSExLHMudmFsdWU9ITEpfSxzaG93Q2xvc2U6Xyx0cmlnZ2VyQ2xhc3M6QyxvblBpY2s6KGU9XCJcIix0PSExKT0+e2xldCBsO3MudmFsdWU9dCxsPUFycmF5LmlzQXJyYXkoZSk/ZS5tYXAoKGU9PmUudG9EYXRlKCkpKTplP2UudG9EYXRlKCk6ZSxULnZhbHVlPW51bGwscChsKSxjKGwpfSxoYW5kbGVGb2N1czp0PT57ZS5yZWFkb25seXx8di52YWx1ZXx8KHMudmFsdWU9ITAsYS5lbWl0KFwiZm9jdXNcIix0KSl9LHBpY2tlclZpc2libGU6cyxwaWNrZXJBY3R1YWxWaXNpYmxlOnUsZGlzcGxheVZhbHVlOmYscGFyc2VkVmFsdWU6bSxzZXRTZWxlY3Rpb25SYW5nZTooZSx0LGwpPT57Y29uc3QgYT1oLnZhbHVlO2EubGVuZ3RoJiYobCYmXCJtaW5cIiE9PWw/XCJtYXhcIj09PWwmJihhWzFdLnNldFNlbGVjdGlvblJhbmdlKGUsdCksYVsxXS5mb2N1cygpKTooYVswXS5zZXRTZWxlY3Rpb25SYW5nZShlLHQpLGFbMF0uZm9jdXMoKSkpfSxyZWZDb250YWluZXI6cixwaWNrZXJEaXNhYmxlZDp2LG9uU2V0UGlja2VyT3B0aW9uOmU9PntJLnZhbHVlW2VbMF1dPWVbMV0sSS52YWx1ZS5wYW5lbFJlYWR5PSEwfX19fSk7Y29uc3QgSmw9e2NsYXNzOlwiZWwtcmFuZ2Utc2VwYXJhdG9yXCJ9O1psLnJlbmRlcj1mdW5jdGlvbihlLHQsbCxvLGMsaCl7Y29uc3Qgdj1QKFwiZWwtaW5wdXRcIiksbT1QKFwiZWwtcG9wcGVyXCIpLGY9RihcImNsaWNrb3V0c2lkZVwiKTtyZXR1cm4gYSgpLG4oRSxudWxsLFt1KFwiIHRvZG8gcG9wcGVyIHByb3BzIGFsaWduIGxlZnQgIFwiKSx1KFwiIHRvZG8gcG9wcGVyIGN1c3RvbSBwb3BwZXItY2xhc3MgIFwiKSx1KFwiIHRvZG8gYnVnIGhhbmRsZUtleWRvd24gZXZlbnQgdHdpY2UgIFwiKSxzKG0se3JlZjpcInBvcHBlclwiLHZpc2libGU6ZS5waWNrZXJWaXNpYmxlLFwib25VcGRhdGU6dmlzaWJsZVwiOnRbMThdfHwodFsxOF09dD0+ZS5waWNrZXJWaXNpYmxlPXQpLFwibWFudWFsLW1vZGVcIjpcIlwiLGVmZmVjdDpcImxpZ2h0XCIscHVyZTpcIlwiLHRyaWdnZXI6XCJjbGlja1wiLFwicG9wcGVyLWNsYXNzXCI6XCJlbC1waWNrZXJfX3BvcHBlclwiLHRyYW5zaXRpb246XCJlbC16b29tLWluLXRvcFwiLFwiZ3B1LWFjY2VsZXJhdGlvblwiOiExLFwic3RvcC1wb3BwZXItbW91c2UtZXZlbnRcIjohMSxcImFwcGVuZC10by1ib2R5XCI6XCJcIixvbkJlZm9yZUVudGVyOnRbMTldfHwodFsxOV09dD0+ZS5waWNrZXJBY3R1YWxWaXNpYmxlPSEwKSxvbkFmdGVyTGVhdmU6dFsyMF18fCh0WzIwXT10PT5lLnBpY2tlckFjdHVhbFZpc2libGU9ITEpfSx7dHJpZ2dlcjppKCgoKT0+W2UuaXNSYW5nZUlucHV0P3IoKGEoKSxuKFwiZGl2XCIse2tleToxLHJlZjpcInJlZkNvbnRhaW5lclwiLGNsYXNzOltcImVsLWRhdGUtZWRpdG9yIGVsLXJhbmdlLWVkaXRvciBlbC1pbnB1dF9faW5uZXJcIixbXCJlbC1kYXRlLWVkaXRvci0tXCIrZS50eXBlLGUucGlja2VyU2l6ZT9cImVsLXJhbmdlLWVkaXRvci0tXCIrZS5waWNrZXJTaXplOlwiXCIsZS5waWNrZXJEaXNhYmxlZD9cImlzLWRpc2FibGVkXCI6XCJcIixlLnBpY2tlclZpc2libGU/XCJpcy1hY3RpdmVcIjpcIlwiXV0sb25DbGljazp0WzEwXXx8KHRbMTBdPSguLi50KT0+ZS5oYW5kbGVGb2N1cyguLi50KSksb25Nb3VzZWVudGVyOnRbMTFdfHwodFsxMV09KC4uLnQpPT5lLm9uTW91c2VFbnRlciguLi50KSksb25Nb3VzZWxlYXZlOnRbMTJdfHwodFsxMl09KC4uLnQpPT5lLm9uTW91c2VMZWF2ZSguLi50KSksb25LZXlkb3duOnRbMTNdfHwodFsxM109KC4uLnQpPT5lLmhhbmRsZUtleWRvd24oLi4udCkpfSxbcyhcImlcIix7Y2xhc3M6W1wiZWwtaW5wdXRfX2ljb25cIixcImVsLXJhbmdlX19pY29uXCIsZS50cmlnZ2VyQ2xhc3NdfSxudWxsLDIpLHMoXCJpbnB1dFwiLHthdXRvY29tcGxldGU6XCJvZmZcIixuYW1lOmUubmFtZSYmZS5uYW1lWzBdLHBsYWNlaG9sZGVyOmUuc3RhcnRQbGFjZWhvbGRlcix2YWx1ZTplLmRpc3BsYXlWYWx1ZSYmZS5kaXNwbGF5VmFsdWVbMF0sZGlzYWJsZWQ6ZS5waWNrZXJEaXNhYmxlZCxyZWFkb25seTohZS5lZGl0YWJsZXx8ZS5yZWFkb25seSxjbGFzczpcImVsLXJhbmdlLWlucHV0XCIsb25JbnB1dDp0WzNdfHwodFszXT0oLi4udCk9PmUuaGFuZGxlU3RhcnRJbnB1dCguLi50KSksb25DaGFuZ2U6dFs0XXx8KHRbNF09KC4uLnQpPT5lLmhhbmRsZVN0YXJ0Q2hhbmdlKC4uLnQpKSxvbkZvY3VzOnRbNV18fCh0WzVdPSguLi50KT0+ZS5oYW5kbGVGb2N1cyguLi50KSl9LG51bGwsNDAsW1wibmFtZVwiLFwicGxhY2Vob2xkZXJcIixcInZhbHVlXCIsXCJkaXNhYmxlZFwiLFwicmVhZG9ubHlcIl0pLGQoZS4kc2xvdHMsXCJyYW5nZS1zZXBhcmF0b3JcIix7fSwoKCk9PltzKFwic3BhblwiLEpsLHAoZS5yYW5nZVNlcGFyYXRvciksMSldKSkscyhcImlucHV0XCIse2F1dG9jb21wbGV0ZTpcIm9mZlwiLG5hbWU6ZS5uYW1lJiZlLm5hbWVbMV0scGxhY2Vob2xkZXI6ZS5lbmRQbGFjZWhvbGRlcix2YWx1ZTplLmRpc3BsYXlWYWx1ZSYmZS5kaXNwbGF5VmFsdWVbMV0sZGlzYWJsZWQ6ZS5waWNrZXJEaXNhYmxlZCxyZWFkb25seTohZS5lZGl0YWJsZXx8ZS5yZWFkb25seSxjbGFzczpcImVsLXJhbmdlLWlucHV0XCIsb25Gb2N1czp0WzZdfHwodFs2XT0oLi4udCk9PmUuaGFuZGxlRm9jdXMoLi4udCkpLG9uSW5wdXQ6dFs3XXx8KHRbN109KC4uLnQpPT5lLmhhbmRsZUVuZElucHV0KC4uLnQpKSxvbkNoYW5nZTp0WzhdfHwodFs4XT0oLi4udCk9PmUuaGFuZGxlRW5kQ2hhbmdlKC4uLnQpKX0sbnVsbCw0MCxbXCJuYW1lXCIsXCJwbGFjZWhvbGRlclwiLFwidmFsdWVcIixcImRpc2FibGVkXCIsXCJyZWFkb25seVwiXSkscyhcImlcIix7Y2xhc3M6W1tlLnNob3dDbG9zZT9cIlwiK2UuY2xlYXJJY29uOlwiXCJdLFwiZWwtaW5wdXRfX2ljb24gZWwtcmFuZ2VfX2Nsb3NlLWljb25cIl0sb25DbGljazp0WzldfHwodFs5XT0oLi4udCk9PmUub25DbGVhckljb25DbGljayguLi50KSl9LG51bGwsMildLDM0KSksW1tmLGUub25DbGlja091dHNpZGVdXSk6cigoYSgpLG4odix7a2V5OjAscmVmOlwicmVmQ29udGFpbmVyXCIsXCJtb2RlbC12YWx1ZVwiOmUuZGlzcGxheVZhbHVlLG5hbWU6ZS5uYW1lLHNpemU6ZS5waWNrZXJTaXplLGRpc2FibGVkOmUucGlja2VyRGlzYWJsZWQscGxhY2Vob2xkZXI6ZS5wbGFjZWhvbGRlcixjbGFzczpbXCJlbC1kYXRlLWVkaXRvclwiLFwiZWwtZGF0ZS1lZGl0b3ItLVwiK2UudHlwZV0scmVhZG9ubHk6IWUuZWRpdGFibGV8fGUucmVhZG9ubHl8fGUuaXNEYXRlc1BpY2tlcnx8XCJ3ZWVrXCI9PT1lLnR5cGUsb25JbnB1dDplLm9uVXNlcklucHV0LG9uRm9jdXM6ZS5oYW5kbGVGb2N1cyxvbktleWRvd246ZS5oYW5kbGVLZXlkb3duLG9uQ2hhbmdlOmUuaGFuZGxlQ2hhbmdlLG9uTW91c2VlbnRlcjplLm9uTW91c2VFbnRlcixvbk1vdXNlbGVhdmU6ZS5vbk1vdXNlTGVhdmV9LHtwcmVmaXg6aSgoKCk9PltzKFwiaVwiLHtjbGFzczpbXCJlbC1pbnB1dF9faWNvblwiLGUudHJpZ2dlckNsYXNzXSxvbkNsaWNrOnRbMV18fCh0WzFdPSguLi50KT0+ZS5oYW5kbGVGb2N1cyguLi50KSl9LG51bGwsMildKSksc3VmZml4OmkoKCgpPT5bcyhcImlcIix7Y2xhc3M6W1wiZWwtaW5wdXRfX2ljb25cIixbZS5zaG93Q2xvc2U/XCJcIitlLmNsZWFySWNvbjpcIlwiXV0sb25DbGljazp0WzJdfHwodFsyXT0oLi4udCk9PmUub25DbGVhckljb25DbGljayguLi50KSl9LG51bGwsMildKSksXzoxfSw4LFtcIm1vZGVsLXZhbHVlXCIsXCJuYW1lXCIsXCJzaXplXCIsXCJkaXNhYmxlZFwiLFwicGxhY2Vob2xkZXJcIixcImNsYXNzXCIsXCJyZWFkb25seVwiLFwib25JbnB1dFwiLFwib25Gb2N1c1wiLFwib25LZXlkb3duXCIsXCJvbkNoYW5nZVwiLFwib25Nb3VzZWVudGVyXCIsXCJvbk1vdXNlbGVhdmVcIl0pKSxbW2YsZS5vbkNsaWNrT3V0c2lkZV1dKV0pKSxkZWZhdWx0OmkoKCgpPT5bZChlLiRzbG90cyxcImRlZmF1bHRcIixNKHt2aXNpYmxlOmUucGlja2VyVmlzaWJsZSxcImFjdHVhbC12aXNpYmxlXCI6ZS5waWNrZXJBY3R1YWxWaXNpYmxlLFwicGFyc2VkLXZhbHVlXCI6ZS5wYXJzZWRWYWx1ZSxmb3JtYXQ6ZS5mb3JtYXQsdHlwZTplLnR5cGUsXCJkZWZhdWx0LXZhbHVlXCI6ZS5kZWZhdWx0VmFsdWV9LGUuJGF0dHJzLHtvblBpY2s6dFsxNF18fCh0WzE0XT0oLi4udCk9PmUub25QaWNrKC4uLnQpKSxvblNlbGVjdFJhbmdlOnRbMTVdfHwodFsxNV09KC4uLnQpPT5lLnNldFNlbGVjdGlvblJhbmdlKC4uLnQpKSxvblNldFBpY2tlck9wdGlvbjp0WzE2XXx8KHRbMTZdPSguLi50KT0+ZS5vblNldFBpY2tlck9wdGlvbiguLi50KSksb25Nb3VzZWRvd246dFsxN118fCh0WzE3XT1UKCgoKT0+e30pLFtcInN0b3BcIl0pKX0pKV0pKSxfOjF9LDgsW1widmlzaWJsZVwiXSldLDY0KX0sWmwuX19maWxlPVwicGFja2FnZXMvdGltZS1waWNrZXIvc3JjL2NvbW1vbi9waWNrZXIudnVlXCI7Y29uc3QgZWE9KGUsdCxsKT0+e2NvbnN0IGE9W10sbj10JiZsKCk7Zm9yKGxldCB0PTA7dDxlO3QrKylhW3RdPSEhbiYmbi5pbmNsdWRlcyh0KTtyZXR1cm4gYX0sdGE9ZT0+ZS5tYXAoKChlLHQpPT5lfHx0KSkuZmlsdGVyKChlPT4hMCE9PWUpKSxsYT0oZSx0LGwpPT4oe2dldEhvdXJzTGlzdDoodCxsKT0+ZWEoMjQsZSwoKCk9PmUodCxsKSkpLGdldE1pbnV0ZXNMaXN0OihlLGwsYSk9PmVhKDYwLHQsKCgpPT50KGUsbCxhKSkpLGdldFNlY29uZHNMaXN0OihlLHQsYSxuKT0+ZWEoNjAsbCwoKCk9PmwoZSx0LGEsbikpKX0pLGFhPShlLHQsbCk9Pntjb25zdHtnZXRIb3Vyc0xpc3Q6YSxnZXRNaW51dGVzTGlzdDpuLGdldFNlY29uZHNMaXN0Om99PWxhKGUsdCxsKTtyZXR1cm57Z2V0QXZhbGlhYmxlSG91cnM6KGUsdCk9PnRhKGEoZSx0KSksZ2V0QXZhbGlhYmxlTWludXRlczooZSx0LGwpPT50YShuKGUsdCxsKSksZ2V0QXZhbGlhYmxlU2Vjb25kczooZSx0LGwsYSk9PnRhKG8oZSx0LGwsYSkpfX07dmFyIG5hPWUoe2RpcmVjdGl2ZXM6e3JlcGVhdENsaWNrOlR0fSxjb21wb25lbnRzOntFbFNjcm9sbGJhcjpubH0scHJvcHM6e3JvbGU6e3R5cGU6U3RyaW5nLHJlcXVpcmVkOiEwfSxzcGlubmVyRGF0ZTp7dHlwZTpPYmplY3QscmVxdWlyZWQ6ITB9LHNob3dTZWNvbmRzOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMH0sYXJyb3dDb250cm9sOkJvb2xlYW4sYW1QbU1vZGU6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJcIn0sZGlzYWJsZWRIb3Vyczp7dHlwZTpGdW5jdGlvbn0sZGlzYWJsZWRNaW51dGVzOnt0eXBlOkZ1bmN0aW9ufSxkaXNhYmxlZFNlY29uZHM6e3R5cGU6RnVuY3Rpb259fSxlbWl0czpbXCJjaGFuZ2VcIixcInNlbGVjdC1yYW5nZVwiLFwic2V0LW9wdGlvblwiXSxzZXR1cChlLGEpe2NvbnN0IG49dChudWxsKSxvPXQobnVsbCksaT10KG51bGwpLHI9dChudWxsKSxzPXtob3VyczpvLG1pbnV0ZXM6aSxzZWNvbmRzOnJ9LHU9bCgoKCk9Pntjb25zdCB0PVtcImhvdXJzXCIsXCJtaW51dGVzXCIsXCJzZWNvbmRzXCJdO3JldHVybiBlLnNob3dTZWNvbmRzP3Q6dC5zbGljZSgwLDIpfSkpLGQ9bCgoKCk9PmUuc3Bpbm5lckRhdGUuaG91cigpKSksYz1sKCgoKT0+ZS5zcGlubmVyRGF0ZS5taW51dGUoKSkpLHA9bCgoKCk9PmUuc3Bpbm5lckRhdGUuc2Vjb25kKCkpKSxoPWwoKCgpPT4oe2hvdXJzOmQsbWludXRlczpjLHNlY29uZHM6cH0pKSksdj1sKCgoKT0+SShlLnJvbGUpKSksbT1sKCgoKT0+QShkLnZhbHVlLGUucm9sZSkpKSxmPWwoKCgpPT5CKGQudmFsdWUsYy52YWx1ZSxlLnJvbGUpKSksZz1sKCgoKT0+KHtob3Vyczp2LG1pbnV0ZXM6bSxzZWNvbmRzOmZ9KSkpLGI9bCgoKCk9Pntjb25zdCBlPWQudmFsdWU7cmV0dXJuW2U+MD9lLTE6dm9pZCAwLGUsZTwyMz9lKzE6dm9pZCAwXX0pKSxDPWwoKCgpPT57Y29uc3QgZT1jLnZhbHVlO3JldHVybltlPjA/ZS0xOnZvaWQgMCxlLGU8NTk/ZSsxOnZvaWQgMF19KSkseD1sKCgoKT0+e2NvbnN0IGU9cC52YWx1ZTtyZXR1cm5bZT4wP2UtMTp2b2lkIDAsZSxlPDU5P2UrMTp2b2lkIDBdfSkpLHc9bCgoKCk9Pih7aG91cnM6YixtaW51dGVzOkMsc2Vjb25kczp4fSkpKSxTPWU9PntcImhvdXJzXCI9PT1lP2EuZW1pdChcInNlbGVjdC1yYW5nZVwiLDAsMik6XCJtaW51dGVzXCI9PT1lP2EuZW1pdChcInNlbGVjdC1yYW5nZVwiLDMsNSk6XCJzZWNvbmRzXCI9PT1lJiZhLmVtaXQoXCJzZWxlY3QtcmFuZ2VcIiw2LDgpLG4udmFsdWU9ZX0sRT1lPT57VChlLGgudmFsdWVbZV0udmFsdWUpfSxNPSgpPT57RShcImhvdXJzXCIpLEUoXCJtaW51dGVzXCIpLEUoXCJzZWNvbmRzXCIpfSxUPSh0LGwpPT57aWYoZS5hcnJvd0NvbnRyb2wpcmV0dXJuO2NvbnN0IGE9c1t0XTthLnZhbHVlJiYoYS52YWx1ZS4kZWwucXVlcnlTZWxlY3RvcihcIi5lbC1zY3JvbGxiYXJfX3dyYXBcIikuc2Nyb2xsVG9wPU1hdGgubWF4KDAsbCpOKHQpKSl9LE49ZT0+c1tlXS52YWx1ZS4kZWwucXVlcnlTZWxlY3RvcihcImxpXCIpLm9mZnNldEhlaWdodCxEPWU9PntuLnZhbHVlfHxTKFwiaG91cnNcIik7Y29uc3QgdD1uLnZhbHVlO2xldCBsPWgudmFsdWVbdF0udmFsdWU7Y29uc3QgYT1cImhvdXJzXCI9PT1uLnZhbHVlPzI0OjYwO2w9KGwrZSthKSVhLE8odCxsKSxUKHQsbCksaygoKCk9PlMobi52YWx1ZSkpKX0sTz0odCxsKT0+e2lmKCFnLnZhbHVlW3RdLnZhbHVlW2xdKXN3aXRjaCh0KXtjYXNlXCJob3Vyc1wiOmEuZW1pdChcImNoYW5nZVwiLGUuc3Bpbm5lckRhdGUuaG91cihsKS5taW51dGUoYy52YWx1ZSkuc2Vjb25kKHAudmFsdWUpKTticmVhaztjYXNlXCJtaW51dGVzXCI6YS5lbWl0KFwiY2hhbmdlXCIsZS5zcGlubmVyRGF0ZS5ob3VyKGQudmFsdWUpLm1pbnV0ZShsKS5zZWNvbmQocC52YWx1ZSkpO2JyZWFrO2Nhc2VcInNlY29uZHNcIjphLmVtaXQoXCJjaGFuZ2VcIixlLnNwaW5uZXJEYXRlLmhvdXIoZC52YWx1ZSkubWludXRlKGMudmFsdWUpLnNlY29uZChsKSl9fSxQPWU9PnNbZV0udmFsdWUuJGVsLm9mZnNldEhlaWdodCxWPSgpPT57Y29uc3QgZT1lPT57c1tlXS52YWx1ZSYmKHNbZV0udmFsdWUuJGVsLnF1ZXJ5U2VsZWN0b3IoXCIuZWwtc2Nyb2xsYmFyX193cmFwXCIpLm9uc2Nyb2xsPSgpPT57KGU9Pntjb25zdCB0PU1hdGgubWluKE1hdGgucm91bmQoKHNbZV0udmFsdWUuJGVsLnF1ZXJ5U2VsZWN0b3IoXCIuZWwtc2Nyb2xsYmFyX193cmFwXCIpLnNjcm9sbFRvcC0oLjUqUChlKS0xMCkvTihlKSszKS9OKGUpKSxcImhvdXJzXCI9PT1lPzIzOjU5KTtPKGUsdCl9KShlKX0pfTtlKFwiaG91cnNcIiksZShcIm1pbnV0ZXNcIiksZShcInNlY29uZHNcIil9O18oKCgpPT57aygoKCk9PnshZS5hcnJvd0NvbnRyb2wmJlYoKSxNKCksXCJzdGFydFwiPT09ZS5yb2xlJiZTKFwiaG91cnNcIil9KSl9KSk7YS5lbWl0KFwic2V0LW9wdGlvblwiLFtlLnJvbGUrXCJfc2Nyb2xsRG93blwiLERdKSxhLmVtaXQoXCJzZXQtb3B0aW9uXCIsW2Uucm9sZStcIl9lbWl0U2VsZWN0UmFuZ2VcIixTXSk7Y29uc3R7Z2V0SG91cnNMaXN0OkksZ2V0TWludXRlc0xpc3Q6QSxnZXRTZWNvbmRzTGlzdDpCfT1sYShlLmRpc2FibGVkSG91cnMsZS5kaXNhYmxlZE1pbnV0ZXMsZS5kaXNhYmxlZFNlY29uZHMpO3JldHVybiB5KCgoKT0+ZS5zcGlubmVyRGF0ZSksTSkse2dldFJlZklkOmU9PmBsaXN0JHtlLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Uuc2xpY2UoMSl9UmVmYCxzcGlubmVySXRlbXM6dSxjdXJyZW50U2Nyb2xsYmFyOm4saG91cnM6ZCxtaW51dGVzOmMsc2Vjb25kczpwLGhvdXJzTGlzdDp2LG1pbnV0ZXNMaXN0Om0sYXJyb3dIb3VyTGlzdDpiLGFycm93TWludXRlTGlzdDpDLGFycm93U2Vjb25kTGlzdDp4LGdldEFtUG1GbGFnOnQ9PntpZighISFlLmFtUG1Nb2RlKXJldHVyblwiXCI7bGV0IGw9dDwxMj9cIiBhbVwiOlwiIHBtXCI7cmV0dXJuXCJBXCI9PT1lLmFtUG1Nb2RlJiYobD1sLnRvVXBwZXJDYXNlKCkpLGx9LGVtaXRTZWxlY3RSYW5nZTpTLGFkanVzdEN1cnJlbnRTcGlubmVyOkUsdHlwZUl0ZW1IZWlnaHQ6TixsaXN0SG91cnNSZWY6byxsaXN0TWludXRlc1JlZjppLGxpc3RTZWNvbmRzUmVmOnIsb25JbmNyZWFzZUNsaWNrOigpPT57RCgxKX0sb25EZWNyZWFzZUNsaWNrOigpPT57RCgtMSl9LGhhbmRsZUNsaWNrOihlLHt2YWx1ZTp0LGRpc2FibGVkOmx9KT0+e2x8fChPKGUsdCksUyhlKSxUKGUsdCkpfSxzZWNvbmRzTGlzdDpmLHRpbWVQYXJ0c01hcDpoLGFycm93TGlzdE1hcDp3LGxpc3RNYXA6Z319fSk7Y29uc3Qgb2E9e2NsYXNzOlwiZWwtdGltZS1zcGlubmVyX19hcnJvdyBlbC1pY29uLWFycm93LXVwXCJ9LGlhPXtjbGFzczpcImVsLXRpbWUtc3Bpbm5lcl9fYXJyb3cgZWwtaWNvbi1hcnJvdy1kb3duXCJ9LHJhPXtjbGFzczpcImVsLXRpbWUtc3Bpbm5lcl9fbGlzdFwifTtuYS5yZW5kZXI9ZnVuY3Rpb24oZSx0LGwsbyxkLGgpe2NvbnN0IHY9UChcImVsLXNjcm9sbGJhclwiKSxtPUYoXCJyZXBlYXQtY2xpY2tcIik7cmV0dXJuIGEoKSxuKFwiZGl2XCIse2NsYXNzOltcImVsLXRpbWUtc3Bpbm5lclwiLHtcImhhcy1zZWNvbmRzXCI6ZS5zaG93U2Vjb25kc31dfSxbZS5hcnJvd0NvbnRyb2w/dShcInYtaWZcIiwhMCk6KGEoITApLG4oRSx7a2V5OjB9LEgoZS5zcGlubmVySXRlbXMsKHQ9PihhKCksbih2LHtrZXk6dCxyZWY6ZS5nZXRSZWZJZCh0KSxjbGFzczpcImVsLXRpbWUtc3Bpbm5lcl9fd3JhcHBlclwiLFwid3JhcC1zdHlsZVwiOlwibWF4LWhlaWdodDogaW5oZXJpdDtcIixcInZpZXctY2xhc3NcIjpcImVsLXRpbWUtc3Bpbm5lcl9fbGlzdFwiLG5vcmVzaXplOlwiXCIsdGFnOlwidWxcIixvbk1vdXNlZW50ZXI6bD0+ZS5lbWl0U2VsZWN0UmFuZ2UodCksb25Nb3VzZW1vdmU6bD0+ZS5hZGp1c3RDdXJyZW50U3Bpbm5lcih0KX0se2RlZmF1bHQ6aSgoKCk9PlsoYSghMCksbihFLG51bGwsSChlLmxpc3RNYXBbdF0udmFsdWUsKChsLG8pPT4oYSgpLG4oXCJsaVwiLHtrZXk6byxjbGFzczpbXCJlbC10aW1lLXNwaW5uZXJfX2l0ZW1cIix7YWN0aXZlOm89PT1lLnRpbWVQYXJ0c01hcFt0XS52YWx1ZSxkaXNhYmxlZDpsfV0sb25DbGljazphPT5lLmhhbmRsZUNsaWNrKHQse3ZhbHVlOm8sZGlzYWJsZWQ6bH0pfSxbXCJob3Vyc1wiPT09dD8oYSgpLG4oRSx7a2V5OjB9LFtjKHAoKFwiMFwiKyhlLmFtUG1Nb2RlP28lMTJ8fDEyOm8pKS5zbGljZSgtMikpK3AoZS5nZXRBbVBtRmxhZyhvKSksMSldLDY0KSk6KGEoKSxuKEUse2tleToxfSxbYyhwKChcIjBcIitvKS5zbGljZSgtMikpLDEpXSw2NCkpXSwxMCxbXCJvbkNsaWNrXCJdKSkpKSwxMjgpKV0pKSxfOjJ9LDEwMzIsW1wib25Nb3VzZWVudGVyXCIsXCJvbk1vdXNlbW92ZVwiXSkpKSksMTI4KSksZS5hcnJvd0NvbnRyb2w/KGEoITApLG4oRSx7a2V5OjF9LEgoZS5zcGlubmVySXRlbXMsKHQ9PihhKCksbihcImRpdlwiLHtrZXk6dCxjbGFzczpcImVsLXRpbWUtc3Bpbm5lcl9fd3JhcHBlciBpcy1hcnJvd1wiLG9uTW91c2VlbnRlcjpsPT5lLmVtaXRTZWxlY3RSYW5nZSh0KX0sW3IocyhcImlcIixvYSxudWxsLDUxMiksW1ttLGUub25EZWNyZWFzZUNsaWNrXV0pLHIocyhcImlcIixpYSxudWxsLDUxMiksW1ttLGUub25JbmNyZWFzZUNsaWNrXV0pLHMoXCJ1bFwiLHJhLFsoYSghMCksbihFLG51bGwsSChlLmFycm93TGlzdE1hcFt0XS52YWx1ZSwoKGwsbyk9PihhKCksbihcImxpXCIse2tleTpvLGNsYXNzOltcImVsLXRpbWUtc3Bpbm5lcl9faXRlbVwiLHthY3RpdmU6bD09PWUudGltZVBhcnRzTWFwW3RdLnZhbHVlLGRpc2FibGVkOmUubGlzdE1hcFt0XS52YWx1ZVtsXX1dfSxwKHZvaWQgMD09PWw/XCJcIjooXCIwXCIrKGUuYW1QbU1vZGU/bCUxMnx8MTI6bCkpLnNsaWNlKC0yKStlLmdldEFtUG1GbGFnKGwpKSwzKSkpKSwxMjgpKV0pXSw0MCxbXCJvbk1vdXNlZW50ZXJcIl0pKSkpLDEyOCkpOnUoXCJ2LWlmXCIsITApXSwyKX0sbmEuX19maWxlPVwicGFja2FnZXMvdGltZS1waWNrZXIvc3JjL3RpbWUtcGlja2VyLWNvbS9iYXNpYy10aW1lLXNwaW5uZXIudnVlXCI7dmFyIHNhPWUoe2NvbXBvbmVudHM6e1RpbWVTcGlubmVyOm5hfSxwcm9wczp7dmlzaWJsZTpCb29sZWFuLGFjdHVhbFZpc2libGU6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OnZvaWQgMH0sZGF0ZXRpbWVSb2xlOnt0eXBlOlN0cmluZ30scGFyc2VkVmFsdWU6e3R5cGU6W09iamVjdCxTdHJpbmddfSxmb3JtYXQ6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJcIn19LGVtaXRzOltcInBpY2tcIixcInNlbGVjdC1yYW5nZVwiLFwic2V0LXBpY2tlci1vcHRpb25cIl0sc2V0dXAoZSxhKXtjb25zdCBuPXQoWzAsMl0pLG89dChlLnBhcnNlZFZhbHVlKSxpPWwoKCgpPT52b2lkIDA9PT1lLmFjdHVhbFZpc2libGU/XCJlbC16b29tLWluLXRvcFwiOlwiXCIpKSxyPWwoKCgpPT5lLmZvcm1hdC5pbmNsdWRlcyhcInNzXCIpKSkscz1sKCgoKT0+ZS5mb3JtYXQuaW5jbHVkZXMoXCJBXCIpP1wiQVwiOmUuZm9ybWF0LmluY2x1ZGVzKFwiYVwiKT9cImFcIjpcIlwiKSksdT10PT57Y29uc3QgbD17aG91cjpnLG1pbnV0ZTpiLHNlY29uZDp5fTtsZXQgYT10O3JldHVybltcImhvdXJcIixcIm1pbnV0ZVwiLFwic2Vjb25kXCJdLmZvckVhY2goKHQ9PntpZihsW3RdKXtsZXQgbjtjb25zdCBvPWxbdF07bj1cIm1pbnV0ZVwiPT09dD9vKGEuaG91cigpLGUuZGF0ZXRpbWVSb2xlKTpcInNlY29uZFwiPT09dD9vKGEuaG91cigpLGEubWludXRlKCksZS5kYXRldGltZVJvbGUpOm8oZS5kYXRldGltZVJvbGUpLG4mJm4ubGVuZ3RoJiYhbi5pbmNsdWRlcyhhW3RdKCkpJiYoYT1hW3RdKG5bMF0pKX19KSksYX07YS5lbWl0KFwic2V0LXBpY2tlci1vcHRpb25cIixbXCJpc1ZhbGlkVmFsdWVcIixlPT57Y29uc3QgdD1zZShlKSxsPXUodCk7cmV0dXJuIHQuaXNTYW1lKGwpfV0pLGEuZW1pdChcInNldC1waWNrZXItb3B0aW9uXCIsW1wiZm9ybWF0VG9TdHJpbmdcIix0PT50P3QuZm9ybWF0KGUuZm9ybWF0KTpudWxsXSksYS5lbWl0KFwic2V0LXBpY2tlci1vcHRpb25cIixbXCJwYXJzZVVzZXJJbnB1dFwiLHQ9PnQ/c2UodCxlLmZvcm1hdCk6bnVsbF0pLGEuZW1pdChcInNldC1waWNrZXItb3B0aW9uXCIsW1wiaGFuZGxlS2V5ZG93blwiLGU9Pntjb25zdCB0PWUuY29kZTtpZih0PT09ZnQubGVmdHx8dD09PWZ0LnJpZ2h0KXtyZXR1cm4oZT0+e2NvbnN0IHQ9WzAsM10uY29uY2F0KHIudmFsdWU/WzZdOltdKSxsPVtcImhvdXJzXCIsXCJtaW51dGVzXCJdLmNvbmNhdChyLnZhbHVlP1tcInNlY29uZHNcIl06W10pLGE9KHQuaW5kZXhPZihuLnZhbHVlWzBdKStlK3QubGVuZ3RoKSV0Lmxlbmd0aDtkLnN0YXJ0X2VtaXRTZWxlY3RSYW5nZShsW2FdKX0pKHQ9PT1mdC5sZWZ0Py0xOjEpLHZvaWQgZS5wcmV2ZW50RGVmYXVsdCgpfWlmKHQ9PT1mdC51cHx8dD09PWZ0LmRvd24pe2NvbnN0IGw9dD09PWZ0LnVwPy0xOjE7cmV0dXJuIGQubWluX3Njcm9sbERvd24obCksdm9pZCBlLnByZXZlbnREZWZhdWx0KCl9fV0pLGEuZW1pdChcInNldC1waWNrZXItb3B0aW9uXCIsW1wiZ2V0UmFuZ2VBdmFsaWFibGVUaW1lXCIsdV0pLGEuZW1pdChcInNldC1waWNrZXItb3B0aW9uXCIsW1wiZ2V0RGVmYXVsdFZhbHVlXCIsKCk9PnNlKGYpXSk7Y29uc3QgZD17fSxjPXcoXCJFUF9QSUNLRVJfQkFTRVwiKSx7YXJyb3dDb250cm9sOnAsZGlzYWJsZWRIb3VyczpoLGRpc2FibGVkTWludXRlczp2LGRpc2FibGVkU2Vjb25kczptLGRlZmF1bHRWYWx1ZTpmfT1jLnByb3BzLHtnZXRBdmFsaWFibGVIb3VyczpnLGdldEF2YWxpYWJsZU1pbnV0ZXM6YixnZXRBdmFsaWFibGVTZWNvbmRzOnl9PWFhKGgsdixtKTtyZXR1cm57dHJhbnNpdGlvbk5hbWU6aSxhcnJvd0NvbnRyb2w6cCxvblNldE9wdGlvbjplPT57ZFtlWzBdXT1lWzFdfSx0OnFsLGhhbmRsZUNvbmZpcm06KHQ9ITEsbCk9PntsfHxhLmVtaXQoXCJwaWNrXCIsZS5wYXJzZWRWYWx1ZSx0KX0saGFuZGxlQ2hhbmdlOnQ9PntpZighZS52aXNpYmxlKXJldHVybjtjb25zdCBsPXUodCkubWlsbGlzZWNvbmQoMCk7YS5lbWl0KFwicGlja1wiLGwsITApfSxzZXRTZWxlY3Rpb25SYW5nZTooZSx0KT0+e2EuZW1pdChcInNlbGVjdC1yYW5nZVwiLGUsdCksbi52YWx1ZT1bZSx0XX0sYW1QbU1vZGU6cyxzaG93U2Vjb25kczpyLGhhbmRsZUNhbmNlbDooKT0+e2EuZW1pdChcInBpY2tcIixvLnZhbHVlLCExKX0sZGlzYWJsZWRIb3VyczpoLGRpc2FibGVkTWludXRlczp2LGRpc2FibGVkU2Vjb25kczptfX19KTtjb25zdCB1YT17a2V5OjAsY2xhc3M6XCJlbC10aW1lLXBhbmVsXCJ9LGRhPXtjbGFzczpcImVsLXRpbWUtcGFuZWxfX2Zvb3RlclwifTtzYS5yZW5kZXI9ZnVuY3Rpb24oZSx0LGwscixkLGMpe2NvbnN0IGg9UChcInRpbWUtc3Bpbm5lclwiKTtyZXR1cm4gYSgpLG4obyx7bmFtZTplLnRyYW5zaXRpb25OYW1lfSx7ZGVmYXVsdDppKCgoKT0+W2UuYWN0dWFsVmlzaWJsZXx8ZS52aXNpYmxlPyhhKCksbihcImRpdlwiLHVhLFtzKFwiZGl2XCIse2NsYXNzOltcImVsLXRpbWUtcGFuZWxfX2NvbnRlbnRcIix7XCJoYXMtc2Vjb25kc1wiOmUuc2hvd1NlY29uZHN9XX0sW3MoaCx7cmVmOlwic3Bpbm5lclwiLHJvbGU6ZS5kYXRldGltZVJvbGV8fFwic3RhcnRcIixcImFycm93LWNvbnRyb2xcIjplLmFycm93Q29udHJvbCxcInNob3ctc2Vjb25kc1wiOmUuc2hvd1NlY29uZHMsXCJhbS1wbS1tb2RlXCI6ZS5hbVBtTW9kZSxcInNwaW5uZXItZGF0ZVwiOmUucGFyc2VkVmFsdWUsXCJkaXNhYmxlZC1ob3Vyc1wiOmUuZGlzYWJsZWRIb3VycyxcImRpc2FibGVkLW1pbnV0ZXNcIjplLmRpc2FibGVkTWludXRlcyxcImRpc2FibGVkLXNlY29uZHNcIjplLmRpc2FibGVkU2Vjb25kcyxvbkNoYW5nZTplLmhhbmRsZUNoYW5nZSxvblNldE9wdGlvbjplLm9uU2V0T3B0aW9uLG9uU2VsZWN0UmFuZ2U6ZS5zZXRTZWxlY3Rpb25SYW5nZX0sbnVsbCw4LFtcInJvbGVcIixcImFycm93LWNvbnRyb2xcIixcInNob3ctc2Vjb25kc1wiLFwiYW0tcG0tbW9kZVwiLFwic3Bpbm5lci1kYXRlXCIsXCJkaXNhYmxlZC1ob3Vyc1wiLFwiZGlzYWJsZWQtbWludXRlc1wiLFwiZGlzYWJsZWQtc2Vjb25kc1wiLFwib25DaGFuZ2VcIixcIm9uU2V0T3B0aW9uXCIsXCJvblNlbGVjdFJhbmdlXCJdKV0sMikscyhcImRpdlwiLGRhLFtzKFwiYnV0dG9uXCIse3R5cGU6XCJidXR0b25cIixjbGFzczpcImVsLXRpbWUtcGFuZWxfX2J0biBjYW5jZWxcIixvbkNsaWNrOnRbMV18fCh0WzFdPSguLi50KT0+ZS5oYW5kbGVDYW5jZWwoLi4udCkpfSxwKGUudChcImVsLmRhdGVwaWNrZXIuY2FuY2VsXCIpKSwxKSxzKFwiYnV0dG9uXCIse3R5cGU6XCJidXR0b25cIixjbGFzczpcImVsLXRpbWUtcGFuZWxfX2J0biBjb25maXJtXCIsb25DbGljazp0WzJdfHwodFsyXT10PT5lLmhhbmRsZUNvbmZpcm0oKSl9LHAoZS50KFwiZWwuZGF0ZXBpY2tlci5jb25maXJtXCIpKSwxKV0pXSkpOnUoXCJ2LWlmXCIsITApXSkpLF86MX0sOCxbXCJuYW1lXCJdKX0sc2EuX19maWxlPVwicGFja2FnZXMvdGltZS1waWNrZXIvc3JjL3RpbWUtcGlja2VyLWNvbS9wYW5lbC10aW1lLXBpY2sudnVlXCI7Y29uc3QgY2E9KGUsdCk9Pntjb25zdCBsPVtdO2ZvcihsZXQgYT1lO2E8PXQ7YSsrKWwucHVzaChhKTtyZXR1cm4gbH07dmFyIHBhPWUoe2NvbXBvbmVudHM6e1RpbWVTcGlubmVyOm5hfSxwcm9wczp7dmlzaWJsZTpCb29sZWFuLGFjdHVhbFZpc2libGU6Qm9vbGVhbixwYXJzZWRWYWx1ZTp7dHlwZTpbQXJyYXksU3RyaW5nXX0sZm9ybWF0Ont0eXBlOlN0cmluZyxkZWZhdWx0OlwiXCJ9fSxlbWl0czpbXCJwaWNrXCIsXCJzZWxlY3QtcmFuZ2VcIixcInNldC1waWNrZXItb3B0aW9uXCJdLHNldHVwKGUsYSl7Y29uc3Qgbj1sKCgoKT0+ZS5wYXJzZWRWYWx1ZVswXSkpLG89bCgoKCk9PmUucGFyc2VkVmFsdWVbMV0pKSxpPXQoZS5wYXJzZWRWYWx1ZSkscj1sKCgoKT0+ZS5mb3JtYXQuaW5jbHVkZXMoXCJzc1wiKSkpLHM9bCgoKCk9PmUuZm9ybWF0LmluY2x1ZGVzKFwiQVwiKT9cIkFcIjplLmZvcm1hdC5pbmNsdWRlcyhcImFcIik/XCJhXCI6XCJcIikpLHU9dChbXSksZD10KFtdKSxjPShlLHQpPT57YS5lbWl0KFwicGlja1wiLFtlLHRdLCEwKX0scD1sKCgoKT0+bi52YWx1ZT5vLnZhbHVlKSksaD10KFswLDJdKSx2PWwoKCgpPT5yLnZhbHVlPzExOjgpKSxtPShlLHQpPT57Y29uc3QgbD1NP00oZSk6W10sYT1cInN0YXJ0XCI9PT1lLGk9KHR8fChhP28udmFsdWU6bi52YWx1ZSkpLmhvdXIoKSxyPWE/Y2EoaSsxLDIzKTpjYSgwLGktMSk7cmV0dXJuIGNlKGwscil9LGY9KGUsdCxsKT0+e2NvbnN0IGE9VD9UKGUsdCk6W10saT1cInN0YXJ0XCI9PT10LHI9bHx8KGk/by52YWx1ZTpuLnZhbHVlKTtpZihlIT09ci5ob3VyKCkpcmV0dXJuIGE7Y29uc3Qgcz1yLm1pbnV0ZSgpLHU9aT9jYShzKzEsNTkpOmNhKDAscy0xKTtyZXR1cm4gY2UoYSx1KX0sZz0oZSx0LGwsYSk9Pntjb25zdCBpPU4/TihlLHQsbCk6W10scj1cInN0YXJ0XCI9PT1sLHM9YXx8KHI/by52YWx1ZTpuLnZhbHVlKSx1PXMuaG91cigpLGQ9cy5taW51dGUoKTtpZihlIT09dXx8dCE9PWQpcmV0dXJuIGk7Y29uc3QgYz1zLnNlY29uZCgpLHA9cj9jYShjKzEsNTkpOmNhKDAsYy0xKTtyZXR1cm4gY2UoaSxwKX0sYj1lPT5lLm1hcCgoKHQsbCk9PngoZVswXSxlWzFdLDA9PT1sP1wic3RhcnRcIjpcImVuZFwiKSkpLHtnZXRBdmFsaWFibGVIb3Vyczp5LGdldEF2YWxpYWJsZU1pbnV0ZXM6ayxnZXRBdmFsaWFibGVTZWNvbmRzOkN9PWFhKG0sZixnKSx4PShlLHQsbCk9Pntjb25zdCBhPXtob3VyOnksbWludXRlOmssc2Vjb25kOkN9LG49XCJzdGFydFwiPT09bDtsZXQgbz1uP2U6dDtjb25zdCBpPW4/dDplO3JldHVybltcImhvdXJcIixcIm1pbnV0ZVwiLFwic2Vjb25kXCJdLmZvckVhY2goKGU9PntpZihhW2VdKXtsZXQgdDtjb25zdCByPWFbZV07aWYodD1cIm1pbnV0ZVwiPT09ZT9yKG8uaG91cigpLGwsaSk6XCJzZWNvbmRcIj09PWU/cihvLmhvdXIoKSxvLm1pbnV0ZSgpLGwsaSk6cihsLGkpLHQmJnQubGVuZ3RoJiYhdC5pbmNsdWRlcyhvW2VdKCkpKXtjb25zdCBsPW4/MDp0Lmxlbmd0aC0xO289b1tlXSh0W2xdKX19fSkpLG99O2EuZW1pdChcInNldC1waWNrZXItb3B0aW9uXCIsW1wiZm9ybWF0VG9TdHJpbmdcIix0PT50P0FycmF5LmlzQXJyYXkodCk/dC5tYXAoKHQ9PnQuZm9ybWF0KGUuZm9ybWF0KSkpOnQuZm9ybWF0KGUuZm9ybWF0KTpudWxsXSksYS5lbWl0KFwic2V0LXBpY2tlci1vcHRpb25cIixbXCJwYXJzZVVzZXJJbnB1dFwiLHQ9PnQ/QXJyYXkuaXNBcnJheSh0KT90Lm1hcCgodD0+c2UodCxlLmZvcm1hdCkpKTpzZSh0LGUuZm9ybWF0KTpudWxsXSksYS5lbWl0KFwic2V0LXBpY2tlci1vcHRpb25cIixbXCJpc1ZhbGlkVmFsdWVcIixlPT57Y29uc3QgdD1lLm1hcCgoZT0+c2UoZSkpKSxsPWIodCk7cmV0dXJuIHRbMF0uaXNTYW1lKGxbMF0pJiZ0WzFdLmlzU2FtZShsWzFdKX1dKSxhLmVtaXQoXCJzZXQtcGlja2VyLW9wdGlvblwiLFtcImhhbmRsZUtleWRvd25cIixlPT57Y29uc3QgdD1lLmNvZGU7aWYodD09PWZ0LmxlZnR8fHQ9PT1mdC5yaWdodCl7cmV0dXJuKGU9Pntjb25zdCB0PXIudmFsdWU/WzAsMyw2LDExLDE0LDE3XTpbMCwzLDgsMTFdLGw9W1wiaG91cnNcIixcIm1pbnV0ZXNcIl0uY29uY2F0KHIudmFsdWU/W1wic2Vjb25kc1wiXTpbXSksYT0odC5pbmRleE9mKGgudmFsdWVbMF0pK2UrdC5sZW5ndGgpJXQubGVuZ3RoLG49dC5sZW5ndGgvMjthPG4/Xy5zdGFydF9lbWl0U2VsZWN0UmFuZ2UobFthXSk6Xy5lbmRfZW1pdFNlbGVjdFJhbmdlKGxbYS1uXSl9KSh0PT09ZnQubGVmdD8tMToxKSx2b2lkIGUucHJldmVudERlZmF1bHQoKX1pZih0PT09ZnQudXB8fHQ9PT1mdC5kb3duKXtjb25zdCBsPXQ9PT1mdC51cD8tMToxLGE9aC52YWx1ZVswXTx2LnZhbHVlP1wic3RhcnRcIjpcImVuZFwiO3JldHVybiBfW2ErXCJfc2Nyb2xsRG93blwiXShsKSx2b2lkIGUucHJldmVudERlZmF1bHQoKX19XSksYS5lbWl0KFwic2V0LXBpY2tlci1vcHRpb25cIixbXCJnZXREZWZhdWx0VmFsdWVcIiwoKT0+QXJyYXkuaXNBcnJheShEKT9ELm1hcCgoZT0+c2UoZSkpKTpbc2UoRCksc2UoRCkuYWRkKDYwLFwibVwiKV1dKSxhLmVtaXQoXCJzZXQtcGlja2VyLW9wdGlvblwiLFtcImdldFJhbmdlQXZhbGlhYmxlVGltZVwiLGJdKTtjb25zdCBfPXt9LFM9dyhcIkVQX1BJQ0tFUl9CQVNFXCIpLHthcnJvd0NvbnRyb2w6RSxkaXNhYmxlZEhvdXJzOk0sZGlzYWJsZWRNaW51dGVzOlQsZGlzYWJsZWRTZWNvbmRzOk4sZGVmYXVsdFZhbHVlOkR9PVMucHJvcHM7cmV0dXJue2Fycm93Q29udHJvbDpFLG9uU2V0T3B0aW9uOmU9PntfW2VbMF1dPWVbMV19LHNldE1heFNlbGVjdGlvblJhbmdlOihlLHQpPT57YS5lbWl0KFwic2VsZWN0LXJhbmdlXCIsZSx0LFwibWF4XCIpLGgudmFsdWU9W2Urdi52YWx1ZSx0K3YudmFsdWVdfSxzZXRNaW5TZWxlY3Rpb25SYW5nZTooZSx0KT0+e2EuZW1pdChcInNlbGVjdC1yYW5nZVwiLGUsdCxcIm1pblwiKSxoLnZhbHVlPVtlLHRdfSxidG5Db25maXJtRGlzYWJsZWQ6cCxoYW5kbGVDYW5jZWw6KCk9PnthLmVtaXQoXCJwaWNrXCIsaS52YWx1ZSxudWxsKX0saGFuZGxlQ29uZmlybTooZT0hMSk9PnthLmVtaXQoXCJwaWNrXCIsW24udmFsdWUsby52YWx1ZV0sZSl9LHQ6cWwsc2hvd1NlY29uZHM6cixtaW5EYXRlOm4sbWF4RGF0ZTpvLGFtUG1Nb2RlOnMsaGFuZGxlTWluQ2hhbmdlOmU9PntjKGUubWlsbGlzZWNvbmQoMCksby52YWx1ZSl9LGhhbmRsZU1heENoYW5nZTplPT57YyhuLnZhbHVlLGUubWlsbGlzZWNvbmQoMCkpfSxtaW5TZWxlY3RhYmxlUmFuZ2U6dSxtYXhTZWxlY3RhYmxlUmFuZ2U6ZCxkaXNhYmxlZEhvdXJzXzptLGRpc2FibGVkTWludXRlc186ZixkaXNhYmxlZFNlY29uZHNfOmd9fX0pO2NvbnN0IGhhPXtrZXk6MCxjbGFzczpcImVsLXRpbWUtcmFuZ2UtcGlja2VyIGVsLXBpY2tlci1wYW5lbFwifSx2YT17Y2xhc3M6XCJlbC10aW1lLXJhbmdlLXBpY2tlcl9fY29udGVudFwifSxtYT17Y2xhc3M6XCJlbC10aW1lLXJhbmdlLXBpY2tlcl9fY2VsbFwifSxmYT17Y2xhc3M6XCJlbC10aW1lLXJhbmdlLXBpY2tlcl9faGVhZGVyXCJ9LGdhPXtjbGFzczpcImVsLXRpbWUtcmFuZ2UtcGlja2VyX19jZWxsXCJ9LGJhPXtjbGFzczpcImVsLXRpbWUtcmFuZ2UtcGlja2VyX19oZWFkZXJcIn0seWE9e2NsYXNzOlwiZWwtdGltZS1wYW5lbF9fZm9vdGVyXCJ9O3BhLnJlbmRlcj1mdW5jdGlvbihlLHQsbCxvLGkscil7Y29uc3QgZD1QKFwidGltZS1zcGlubmVyXCIpO3JldHVybiBlLmFjdHVhbFZpc2libGU/KGEoKSxuKFwiZGl2XCIsaGEsW3MoXCJkaXZcIix2YSxbcyhcImRpdlwiLG1hLFtzKFwiZGl2XCIsZmEscChlLnQoXCJlbC5kYXRlcGlja2VyLnN0YXJ0VGltZVwiKSksMSkscyhcImRpdlwiLHtjbGFzczpbe1wiaGFzLXNlY29uZHNcIjplLnNob3dTZWNvbmRzLFwiaXMtYXJyb3dcIjplLmFycm93Q29udHJvbH0sXCJlbC10aW1lLXJhbmdlLXBpY2tlcl9fYm9keSBlbC10aW1lLXBhbmVsX19jb250ZW50XCJdfSxbcyhkLHtyZWY6XCJtaW5TcGlubmVyXCIscm9sZTpcInN0YXJ0XCIsXCJzaG93LXNlY29uZHNcIjplLnNob3dTZWNvbmRzLFwiYW0tcG0tbW9kZVwiOmUuYW1QbU1vZGUsXCJhcnJvdy1jb250cm9sXCI6ZS5hcnJvd0NvbnRyb2wsXCJzcGlubmVyLWRhdGVcIjplLm1pbkRhdGUsXCJkaXNhYmxlZC1ob3Vyc1wiOmUuZGlzYWJsZWRIb3Vyc18sXCJkaXNhYmxlZC1taW51dGVzXCI6ZS5kaXNhYmxlZE1pbnV0ZXNfLFwiZGlzYWJsZWQtc2Vjb25kc1wiOmUuZGlzYWJsZWRTZWNvbmRzXyxvbkNoYW5nZTplLmhhbmRsZU1pbkNoYW5nZSxvblNldE9wdGlvbjplLm9uU2V0T3B0aW9uLG9uU2VsZWN0UmFuZ2U6ZS5zZXRNaW5TZWxlY3Rpb25SYW5nZX0sbnVsbCw4LFtcInNob3ctc2Vjb25kc1wiLFwiYW0tcG0tbW9kZVwiLFwiYXJyb3ctY29udHJvbFwiLFwic3Bpbm5lci1kYXRlXCIsXCJkaXNhYmxlZC1ob3Vyc1wiLFwiZGlzYWJsZWQtbWludXRlc1wiLFwiZGlzYWJsZWQtc2Vjb25kc1wiLFwib25DaGFuZ2VcIixcIm9uU2V0T3B0aW9uXCIsXCJvblNlbGVjdFJhbmdlXCJdKV0sMildKSxzKFwiZGl2XCIsZ2EsW3MoXCJkaXZcIixiYSxwKGUudChcImVsLmRhdGVwaWNrZXIuZW5kVGltZVwiKSksMSkscyhcImRpdlwiLHtjbGFzczpbe1wiaGFzLXNlY29uZHNcIjplLnNob3dTZWNvbmRzLFwiaXMtYXJyb3dcIjplLmFycm93Q29udHJvbH0sXCJlbC10aW1lLXJhbmdlLXBpY2tlcl9fYm9keSBlbC10aW1lLXBhbmVsX19jb250ZW50XCJdfSxbcyhkLHtyZWY6XCJtYXhTcGlubmVyXCIscm9sZTpcImVuZFwiLFwic2hvdy1zZWNvbmRzXCI6ZS5zaG93U2Vjb25kcyxcImFtLXBtLW1vZGVcIjplLmFtUG1Nb2RlLFwiYXJyb3ctY29udHJvbFwiOmUuYXJyb3dDb250cm9sLFwic3Bpbm5lci1kYXRlXCI6ZS5tYXhEYXRlLFwiZGlzYWJsZWQtaG91cnNcIjplLmRpc2FibGVkSG91cnNfLFwiZGlzYWJsZWQtbWludXRlc1wiOmUuZGlzYWJsZWRNaW51dGVzXyxcImRpc2FibGVkLXNlY29uZHNcIjplLmRpc2FibGVkU2Vjb25kc18sb25DaGFuZ2U6ZS5oYW5kbGVNYXhDaGFuZ2Usb25TZXRPcHRpb246ZS5vblNldE9wdGlvbixvblNlbGVjdFJhbmdlOmUuc2V0TWF4U2VsZWN0aW9uUmFuZ2V9LG51bGwsOCxbXCJzaG93LXNlY29uZHNcIixcImFtLXBtLW1vZGVcIixcImFycm93LWNvbnRyb2xcIixcInNwaW5uZXItZGF0ZVwiLFwiZGlzYWJsZWQtaG91cnNcIixcImRpc2FibGVkLW1pbnV0ZXNcIixcImRpc2FibGVkLXNlY29uZHNcIixcIm9uQ2hhbmdlXCIsXCJvblNldE9wdGlvblwiLFwib25TZWxlY3RSYW5nZVwiXSldLDIpXSldKSxzKFwiZGl2XCIseWEsW3MoXCJidXR0b25cIix7dHlwZTpcImJ1dHRvblwiLGNsYXNzOlwiZWwtdGltZS1wYW5lbF9fYnRuIGNhbmNlbFwiLG9uQ2xpY2s6dFsxXXx8KHRbMV09dD0+ZS5oYW5kbGVDYW5jZWwoKSl9LHAoZS50KFwiZWwuZGF0ZXBpY2tlci5jYW5jZWxcIikpLDEpLHMoXCJidXR0b25cIix7dHlwZTpcImJ1dHRvblwiLGNsYXNzOlwiZWwtdGltZS1wYW5lbF9fYnRuIGNvbmZpcm1cIixkaXNhYmxlZDplLmJ0bkNvbmZpcm1EaXNhYmxlZCxvbkNsaWNrOnRbMl18fCh0WzJdPXQ9PmUuaGFuZGxlQ29uZmlybSgpKX0scChlLnQoXCJlbC5kYXRlcGlja2VyLmNvbmZpcm1cIikpLDksW1wiZGlzYWJsZWRcIl0pXSldKSk6dShcInYtaWZcIiwhMCl9LHBhLl9fZmlsZT1cInBhY2thZ2VzL3RpbWUtcGlja2VyL3NyYy90aW1lLXBpY2tlci1jb20vcGFuZWwtdGltZS1yYW5nZS52dWVcIixzZS5leHRlbmQoZGUpO3ZhciBrYT1lKHtuYW1lOlwiRWxUaW1lUGlja2VyXCIsaW5zdGFsbDpudWxsLHByb3BzOk9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSxHbCkse2lzUmFuZ2U6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiExfX0pLHNldHVwKGUsdCl7Y29uc3QgbD1lLmlzUmFuZ2U/XCJ0aW1lcmFuZ2VcIjpcInRpbWVcIixhPWUuaXNSYW5nZT9wYTpzYTtyZXR1cm4oKT0+RChabCxPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe2Zvcm1hdDpcIkhIOm1tOnNzXCJ9LGUpLHt0eXBlOmwsXCJvblVwZGF0ZTptb2RlbFZhbHVlXCI6ZT0+dC5lbWl0KFwidXBkYXRlOm1vZGVsVmFsdWVcIixlKX0pLHtkZWZhdWx0OmU9PkQoYSxlKX0pfX0pO2NvbnN0IENhPWU9PkFycmF5LmZyb20oQXJyYXkoZSkua2V5cygpKSx4YT1lPT5lLnJlcGxhY2UoL1xcVz9tezEsMn18XFxXP1paL2csXCJcIikucmVwbGFjZSgvXFxXP2h7MSwyfXxcXFc/c3sxLDN9fFxcVz9hL2dpLFwiXCIpLnRyaW0oKSx3YT1lPT5lLnJlcGxhY2UoL1xcVz9EezEsMn18XFxXP0RvfFxcVz9kezEsNH18XFxXP017MSw0fXxcXFc/WXsyLDR9L2csXCJcIikudHJpbSgpO2thLmluc3RhbGw9ZT0+e2UuY29tcG9uZW50KGthLm5hbWUsa2EpfSxzZS5leHRlbmQodWUpO3ZhciBfYT1lKHtwcm9wczp7c2VsZWN0ZWREYXk6e3R5cGU6T2JqZWN0fSxyYW5nZTp7dHlwZTpBcnJheX0sZGF0ZTp7dHlwZTpPYmplY3R9LGhpZGVIZWFkZXI6e3R5cGU6Qm9vbGVhbn19LGVtaXRzOltcInBpY2tcIl0sc2V0dXAoZSxhKXtjb25zdCBuPXQoc2UoKS5sb2NhbGVEYXRhKCkud2Vla2RheXNTaG9ydCgpKSxvPXNlKCksaT1vLiRsb2NhbGUoKS53ZWVrU3RhcnR8fDAscj0odCxsKT0+e2xldCBhO3JldHVybiBhPVwicHJldlwiPT09bD9lLmRhdGUuc3RhcnRPZihcIm1vbnRoXCIpLnN1YnRyYWN0KDEsXCJtb250aFwiKS5kYXRlKHQpOlwibmV4dFwiPT09bD9lLmRhdGUuc3RhcnRPZihcIm1vbnRoXCIpLmFkZCgxLFwibW9udGhcIikuZGF0ZSh0KTplLmRhdGUuZGF0ZSh0KSxhfSxzPWwoKCgpPT5lLnJhbmdlJiZlLnJhbmdlLmxlbmd0aCkpLHU9bCgoKCk9PntsZXQgdD1bXTtpZihzLnZhbHVlKXtjb25zdFtsLGFdPWUucmFuZ2Usbj1DYShhLmRhdGUoKS1sLmRhdGUoKSsxKS5tYXAoKChlLHQpPT4oe3RleHQ6bC5kYXRlKCkrdCx0eXBlOlwiY3VycmVudFwifSkpKTtsZXQgbz1uLmxlbmd0aCU3O289MD09PW8/MDo3LW87Y29uc3QgaT1DYShvKS5tYXAoKChlLHQpPT4oe3RleHQ6dCsxLHR5cGU6XCJuZXh0XCJ9KSkpO3Q9bi5jb25jYXQoaSl9ZWxzZXtjb25zdCBsPWUuZGF0ZS5zdGFydE9mKFwibW9udGhcIikuZGF5KCl8fDc7dD1bLi4uKChlLHQpPT57Y29uc3QgbD1lLnN1YnRyYWN0KDEsXCJtb250aFwiKS5lbmRPZihcIm1vbnRoXCIpLmRhdGUoKTtyZXR1cm4gQ2EodCkubWFwKCgoZSxhKT0+bC0odC1hLTEpKSl9KShlLmRhdGUsbC1pKS5tYXAoKGU9Pih7dGV4dDplLHR5cGU6XCJwcmV2XCJ9KSkpLC4uLihlPT57Y29uc3QgdD1lLmRheXNJbk1vbnRoKCk7cmV0dXJuIENhKHQpLm1hcCgoKGUsdCk9PnQrMSkpfSkoZS5kYXRlKS5tYXAoKGU9Pih7dGV4dDplLHR5cGU6XCJjdXJyZW50XCJ9KSkpXTtjb25zdCBhPUNhKDQyLXQubGVuZ3RoKS5tYXAoKChlLHQpPT4oe3RleHQ6dCsxLHR5cGU6XCJuZXh0XCJ9KSkpO3Q9dC5jb25jYXQoYSl9cmV0dXJuKGU9PkNhKGUubGVuZ3RoLzcpLm1hcCgoKHQsbCk9Pntjb25zdCBhPTcqbDtyZXR1cm4gZS5zbGljZShhLGErNyl9KSkpKHQpfSkpLGQ9bCgoKCk9Pntjb25zdCBlPWk7cmV0dXJuIDA9PT1lP24udmFsdWU6bi52YWx1ZS5zbGljZShlKS5jb25jYXQobi52YWx1ZS5zbGljZSgwLGUpKX0pKTtyZXR1cm57aXNJblJhbmdlOnMsd2Vla0RheXM6ZCxyb3dzOnUsZ2V0Q2VsbENsYXNzOih7dGV4dDp0LHR5cGU6bH0pPT57Y29uc3QgYT1bbF07aWYoXCJjdXJyZW50XCI9PT1sKXtjb25zdCBuPXIodCxsKTtuLmlzU2FtZShlLnNlbGVjdGVkRGF5LFwiZGF5XCIpJiZhLnB1c2goXCJpcy1zZWxlY3RlZFwiKSxuLmlzU2FtZShvLFwiZGF5XCIpJiZhLnB1c2goXCJpcy10b2RheVwiKX1yZXR1cm4gYX0scGlja0RheTooe3RleHQ6ZSx0eXBlOnR9KT0+e2NvbnN0IGw9cihlLHQpO2EuZW1pdChcInBpY2tcIixsKX0sZ2V0U2xvdERhdGE6KHt0ZXh0OnQsdHlwZTpsfSk9Pntjb25zdCBhPXIodCxsKTtyZXR1cm57aXNTZWxlY3RlZDphLmlzU2FtZShlLnNlbGVjdGVkRGF5KSx0eXBlOmwrXCItbW9udGhcIixkYXk6YS5mb3JtYXQoXCJZWVlZLU1NLUREXCIpLGRhdGU6YS50b0RhdGUoKX19fX19KTtjb25zdCBTYT17a2V5OjB9LEVhPXtjbGFzczpcImVsLWNhbGVuZGFyLWRheVwifTtfYS5yZW5kZXI9ZnVuY3Rpb24oZSx0LGwsbyxpLHIpe3JldHVybiBhKCksbihcInRhYmxlXCIse2NsYXNzOntcImVsLWNhbGVuZGFyLXRhYmxlXCI6ITAsXCJpcy1yYW5nZVwiOmUuaXNJblJhbmdlfSxjZWxsc3BhY2luZzpcIjBcIixjZWxscGFkZGluZzpcIjBcIn0sW2UuaGlkZUhlYWRlcj91KFwidi1pZlwiLCEwKTooYSgpLG4oXCJ0aGVhZFwiLFNhLFsoYSghMCksbihFLG51bGwsSChlLndlZWtEYXlzLChlPT4oYSgpLG4oXCJ0aFwiLHtrZXk6ZX0scChlKSwxKSkpKSwxMjgpKV0pKSxzKFwidGJvZHlcIixudWxsLFsoYSghMCksbihFLG51bGwsSChlLnJvd3MsKCh0LGwpPT4oYSgpLG4oXCJ0clwiLHtrZXk6bCxjbGFzczp7XCJlbC1jYWxlbmRhci10YWJsZV9fcm93XCI6ITAsXCJlbC1jYWxlbmRhci10YWJsZV9fcm93LS1oaWRlLWJvcmRlclwiOjA9PT1sJiZlLmhpZGVIZWFkZXJ9fSxbKGEoITApLG4oRSxudWxsLEgodCwoKHQsbCk9PihhKCksbihcInRkXCIse2tleTpsLGNsYXNzOmUuZ2V0Q2VsbENsYXNzKHQpLG9uQ2xpY2s6bD0+ZS5waWNrRGF5KHQpfSxbcyhcImRpdlwiLEVhLFtkKGUuJHNsb3RzLFwiZGF0ZUNlbGxcIix7ZGF0YTplLmdldFNsb3REYXRhKHQpfSwoKCk9PltzKFwic3BhblwiLG51bGwscCh0LnRleHQpLDEpXSkpXSldLDEwLFtcIm9uQ2xpY2tcIl0pKSkpLDEyOCkpXSwyKSkpKSwxMjgpKV0pXSwyKX0sX2EuX19maWxlPVwicGFja2FnZXMvY2FsZW5kYXIvc3JjL2RhdGUtdGFibGUudnVlXCI7dmFyIE1hPWUoe25hbWU6XCJFbENhbGVuZGFyXCIsY29tcG9uZW50czp7RGF0ZVRhYmxlOl9hLEVsQnV0dG9uOiRsLEVsQnV0dG9uR3JvdXA6V2x9LHByb3BzOnttb2RlbFZhbHVlOnt0eXBlOkRhdGV9LHJhbmdlOnt0eXBlOkFycmF5LHZhbGlkYXRvcjplPT4hIUFycmF5LmlzQXJyYXkoZSkmJigyPT09ZS5sZW5ndGgmJmUuZXZlcnkoKGU9PmUgaW5zdGFuY2VvZiBEYXRlKSkpfX0sZW1pdHM6W1wiaW5wdXRcIixcInVwZGF0ZTptb2RlbFZhbHVlXCJdLHNldHVwKGUsYSl7Y29uc3Qgbj10KG51bGwpLG89c2UoKSxpPWwoKCgpPT5jLnZhbHVlLnN1YnRyYWN0KDEsXCJtb250aFwiKSkpLHI9bCgoKCk9PnNlKGMudmFsdWUpLmZvcm1hdChcIllZWVktTU1cIikpKSxzPWwoKCgpPT5jLnZhbHVlLmFkZCgxLFwibW9udGhcIikpKSx1PWwoKCgpPT57Y29uc3QgZT1cImVsLmRhdGVwaWNrZXIubW9udGhcIitjLnZhbHVlLmZvcm1hdChcIk1cIik7cmV0dXJuYCR7Yy52YWx1ZS55ZWFyKCl9ICR7cWwoXCJlbC5kYXRlcGlja2VyLnllYXJcIil9ICR7cWwoZSl9YH0pKSxkPWwoe2dldDooKT0+ZS5tb2RlbFZhbHVlP2MudmFsdWU6bi52YWx1ZSxzZXQoZSl7bi52YWx1ZT1lO2NvbnN0IHQ9ZS50b0RhdGUoKTthLmVtaXQoXCJpbnB1dFwiLHQpLGEuZW1pdChcInVwZGF0ZTptb2RlbFZhbHVlXCIsdCl9fSksYz1sKCgoKT0+ZS5tb2RlbFZhbHVlP3NlKGUubW9kZWxWYWx1ZSk6ZC52YWx1ZT9kLnZhbHVlOnAudmFsdWUubGVuZ3RoP3AudmFsdWVbMF1bMF06bykpLHA9bCgoKCk9PntpZighZS5yYW5nZSlyZXR1cm5bXTtjb25zdCB0PWUucmFuZ2UubWFwKChlPT5zZShlKSkpLFtsLGFdPXQ7aWYobC5pc0FmdGVyKGEpKXJldHVybiBjb25zb2xlLndhcm4oXCJbRWxlbWVudENhbGVuZGFyXWVuZCB0aW1lIHNob3VsZCBiZSBncmVhdGVyIHRoYW4gc3RhcnQgdGltZVwiKSxbXTtpZihsLmlzU2FtZShhLFwibW9udGhcIikpcmV0dXJuW1tsLnN0YXJ0T2YoXCJ3ZWVrXCIpLGEuZW5kT2YoXCJ3ZWVrXCIpXV07e2lmKGwuYWRkKDEsXCJtb250aFwiKS5tb250aCgpIT09YS5tb250aCgpKXJldHVybiBjb25zb2xlLndhcm4oXCJbRWxlbWVudENhbGVuZGFyXXN0YXJ0IHRpbWUgYW5kIGVuZCB0aW1lIGludGVydmFsIG11c3Qgbm90IGV4Y2VlZCB0d28gbW9udGhzXCIpLFtdO2NvbnN0IGU9YS5zdGFydE9mKFwibW9udGhcIiksdD1lLnN0YXJ0T2YoXCJ3ZWVrXCIpO2xldCBuPWU7cmV0dXJuIGUuaXNTYW1lKHQsXCJtb250aFwiKXx8KG49ZS5lbmRPZihcIndlZWtcIikuYWRkKDEsXCJkYXlcIikpLFtbbC5zdGFydE9mKFwid2Vla1wiKSxsLmVuZE9mKFwibW9udGhcIildLFtuLGEuZW5kT2YoXCJ3ZWVrXCIpXV19fSkpLGg9ZT0+e2QudmFsdWU9ZX07cmV0dXJue3NlbGVjdGVkRGF5Om4sY3VyTW9udGhEYXRlUHJlZml4OnIsaTE4bkRhdGU6dSxyZWFsU2VsZWN0ZWREYXk6ZCxkYXRlOmMsdmFsaWRhdGVkUmFuZ2U6cCxwaWNrRGF5Omgsc2VsZWN0RGF0ZTplPT57bGV0IHQ7dD1cInByZXYtbW9udGhcIj09PWU/aS52YWx1ZTpcIm5leHQtbW9udGhcIj09PWU/cy52YWx1ZTpvLHQuaXNTYW1lKGMudmFsdWUsXCJkYXlcIil8fGgodCl9LHQ6cWx9fX0pO2NvbnN0IFRhPXtjbGFzczpcImVsLWNhbGVuZGFyXCJ9LE5hPXtjbGFzczpcImVsLWNhbGVuZGFyX19oZWFkZXJcIn0sRGE9e2NsYXNzOlwiZWwtY2FsZW5kYXJfX3RpdGxlXCJ9LE9hPXtrZXk6MCxjbGFzczpcImVsLWNhbGVuZGFyX19idXR0b24tZ3JvdXBcIn0sUGE9e2tleTowLGNsYXNzOlwiZWwtY2FsZW5kYXJfX2JvZHlcIn0sVmE9e2tleToxLGNsYXNzOlwiZWwtY2FsZW5kYXJfX2JvZHlcIn07TWEucmVuZGVyPWZ1bmN0aW9uKGUsdCxsLG8scixoKXtjb25zdCB2PVAoXCJlbC1idXR0b25cIiksbT1QKFwiZWwtYnV0dG9uLWdyb3VwXCIpLGY9UChcImRhdGUtdGFibGVcIik7cmV0dXJuIGEoKSxuKFwiZGl2XCIsVGEsW3MoXCJkaXZcIixOYSxbcyhcImRpdlwiLERhLHAoZS5pMThuRGF0ZSksMSksMD09PWUudmFsaWRhdGVkUmFuZ2UubGVuZ3RoPyhhKCksbihcImRpdlwiLE9hLFtzKG0sbnVsbCx7ZGVmYXVsdDppKCgoKT0+W3Modix7c2l6ZTpcIm1pbmlcIixvbkNsaWNrOnRbMV18fCh0WzFdPXQ9PmUuc2VsZWN0RGF0ZShcInByZXYtbW9udGhcIikpfSx7ZGVmYXVsdDppKCgoKT0+W2MocChlLnQoXCJlbC5kYXRlcGlja2VyLnByZXZNb250aFwiKSksMSldKSksXzoxfSkscyh2LHtzaXplOlwibWluaVwiLG9uQ2xpY2s6dFsyXXx8KHRbMl09dD0+ZS5zZWxlY3REYXRlKFwidG9kYXlcIikpfSx7ZGVmYXVsdDppKCgoKT0+W2MocChlLnQoXCJlbC5kYXRlcGlja2VyLnRvZGF5XCIpKSwxKV0pKSxfOjF9KSxzKHYse3NpemU6XCJtaW5pXCIsb25DbGljazp0WzNdfHwodFszXT10PT5lLnNlbGVjdERhdGUoXCJuZXh0LW1vbnRoXCIpKX0se2RlZmF1bHQ6aSgoKCk9PltjKHAoZS50KFwiZWwuZGF0ZXBpY2tlci5uZXh0TW9udGhcIikpLDEpXSkpLF86MX0pXSkpLF86MX0pXSkpOnUoXCJ2LWlmXCIsITApXSksMD09PWUudmFsaWRhdGVkUmFuZ2UubGVuZ3RoPyhhKCksbihcImRpdlwiLFBhLFtzKGYse2RhdGU6ZS5kYXRlLFwic2VsZWN0ZWQtZGF5XCI6ZS5yZWFsU2VsZWN0ZWREYXksb25QaWNrOmUucGlja0RheX0sUih7XzoyfSxbZS4kc2xvdHMuZGF0ZUNlbGw/e25hbWU6XCJkYXRlQ2VsbFwiLGZuOmkoKHQ9PltkKGUuJHNsb3RzLFwiZGF0ZUNlbGxcIix0KV0pKX06dm9pZCAwXSksMTAzMixbXCJkYXRlXCIsXCJzZWxlY3RlZC1kYXlcIixcIm9uUGlja1wiXSldKSk6KGEoKSxuKFwiZGl2XCIsVmEsWyhhKCEwKSxuKEUsbnVsbCxIKGUudmFsaWRhdGVkUmFuZ2UsKCh0LGwpPT4oYSgpLG4oZix7a2V5OmwsZGF0ZTp0WzBdLFwic2VsZWN0ZWQtZGF5XCI6ZS5yZWFsU2VsZWN0ZWREYXkscmFuZ2U6dCxcImhpZGUtaGVhZGVyXCI6MCE9PWwsb25QaWNrOmUucGlja0RheX0sUih7XzoyfSxbZS4kc2xvdHMuZGF0ZUNlbGw/e25hbWU6XCJkYXRlQ2VsbFwiLGZuOmkoKHQ9PltkKGUuJHNsb3RzLFwiZGF0ZUNlbGxcIix0KV0pKX06dm9pZCAwXSksMTAzMixbXCJkYXRlXCIsXCJzZWxlY3RlZC1kYXlcIixcInJhbmdlXCIsXCJoaWRlLWhlYWRlclwiLFwib25QaWNrXCJdKSkpKSwxMjgpKV0pKV0pfSxNYS5fX2ZpbGU9XCJwYWNrYWdlcy9jYWxlbmRhci9zcmMvaW5kZXgudnVlXCIsTWEuaW5zdGFsbD1lPT57ZS5jb21wb25lbnQoTWEubmFtZSxNYSl9O3ZhciBJYT1lKHtuYW1lOlwiRWxDYXJkXCIscHJvcHM6e2hlYWRlcjp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIlwifSxib2R5U3R5bGU6e3R5cGU6W1N0cmluZyxPYmplY3QsQXJyYXldLGRlZmF1bHQ6XCJcIn0sc2hhZG93Ont0eXBlOlN0cmluZyxkZWZhdWx0OlwiXCJ9fX0pO2NvbnN0IEFhPXtrZXk6MCxjbGFzczpcImVsLWNhcmRfX2hlYWRlclwifTtJYS5yZW5kZXI9ZnVuY3Rpb24oZSx0LGwsbyxpLHIpe3JldHVybiBhKCksbihcImRpdlwiLG51bGwsW3MoXCJkaXZcIix7Y2xhc3M6W1wiZWwtY2FyZFwiLGUuc2hhZG93P1wiaXMtXCIrZS5zaGFkb3crXCItc2hhZG93XCI6XCJpcy1hbHdheXMtc2hhZG93XCJdfSxbZS4kc2xvdHMuaGVhZGVyfHxlLmhlYWRlcj8oYSgpLG4oXCJkaXZcIixBYSxbZChlLiRzbG90cyxcImhlYWRlclwiLHt9LCgoKT0+W2MocChlLmhlYWRlciksMSldKSldKSk6dShcInYtaWZcIiwhMCkscyhcImRpdlwiLHtjbGFzczpcImVsLWNhcmRfX2JvZHlcIixzdHlsZTplLmJvZHlTdHlsZX0sW2QoZS4kc2xvdHMsXCJkZWZhdWx0XCIpXSw0KV0sMildKX0sSWEuX19maWxlPVwicGFja2FnZXMvY2FyZC9zcmMvaW5kZXgudnVlXCIsSWEuaW5zdGFsbD1lPT57ZS5jb21wb25lbnQoSWEubmFtZSxJYSl9O3ZhciBCYT1lKHtuYW1lOlwiRWxDYXJvdXNlbFwiLHByb3BzOntpbml0aWFsSW5kZXg6e3R5cGU6TnVtYmVyLGRlZmF1bHQ6MH0saGVpZ2h0Ont0eXBlOlN0cmluZyxkZWZhdWx0OlwiXCJ9LHRyaWdnZXI6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJob3ZlclwifSxhdXRvcGxheTp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITB9LGludGVydmFsOnt0eXBlOk51bWJlcixkZWZhdWx0OjNlM30saW5kaWNhdG9yUG9zaXRpb246e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJcIn0saW5kaWNhdG9yOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMH0sYXJyb3c6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJob3ZlclwifSx0eXBlOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiXCJ9LGxvb3A6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiEwfSxkaXJlY3Rpb246e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJob3Jpem9udGFsXCIsdmFsaWRhdG9yOmU9PltcImhvcml6b250YWxcIixcInZlcnRpY2FsXCJdLmluY2x1ZGVzKGUpfX0sZW1pdHM6W1wiY2hhbmdlXCJdLHNldHVwKGUse2VtaXQ6YX0pe2NvbnN0IG49Zih7YWN0aXZlSW5kZXg6LTEsY29udGFpbmVyV2lkdGg6MCx0aW1lcjpudWxsLGhvdmVyOiExfSksbz10KG51bGwpLGk9dChbXSkscj10KDApLHM9dCgwKSx1PWwoKCgpPT5cIm5ldmVyXCIhPT1lLmFycm93JiZcInZlcnRpY2FsXCIhPT1lLmRpcmVjdGlvbikpLGQ9bCgoKCk9PmkudmFsdWUuc29tZSgoZT0+ZS5sYWJlbC50b1N0cmluZygpLmxlbmd0aD4wKSkpKSxjPWwoKCgpPT57Y29uc3QgdD1bXCJlbC1jYXJvdXNlbFwiLFwiZWwtY2Fyb3VzZWwtLVwiK2UuZGlyZWN0aW9uXTtyZXR1cm5cImNhcmRcIj09PWUudHlwZSYmdC5wdXNoKFwiZWwtY2Fyb3VzZWwtLWNhcmRcIiksdH0pKSxwPWwoKCgpPT57Y29uc3QgdD1bXCJlbC1jYXJvdXNlbF9faW5kaWNhdG9yc1wiLFwiZWwtY2Fyb3VzZWxfX2luZGljYXRvcnMtLVwiK2UuZGlyZWN0aW9uXTtyZXR1cm4gZC52YWx1ZSYmdC5wdXNoKFwiZWwtY2Fyb3VzZWxfX2luZGljYXRvcnMtLWxhYmVsc1wiKSxcIm91dHNpZGVcIiE9PWUuaW5kaWNhdG9yUG9zaXRpb24mJlwiY2FyZFwiIT09ZS50eXBlfHx0LnB1c2goXCJlbC1jYXJvdXNlbF9faW5kaWNhdG9ycy0tb3V0c2lkZVwiKSx0fSkpLGg9cmUoKGU9PntDKGUpfSksMzAwLHt0cmFpbGluZzohMH0pLHY9cmUoKHQ9PnshZnVuY3Rpb24odCl7XCJob3ZlclwiPT09ZS50cmlnZ2VyJiZ0IT09bi5hY3RpdmVJbmRleCYmKG4uYWN0aXZlSW5kZXg9dCl9KHQpfSksMzAwKTtmdW5jdGlvbiBtKCl7bi50aW1lciYmKGNsZWFySW50ZXJ2YWwobi50aW1lciksbi50aW1lcj1udWxsKX1mdW5jdGlvbiBnKCl7ZS5pbnRlcnZhbDw9MHx8IWUuYXV0b3BsYXl8fG4udGltZXJ8fChuLnRpbWVyPXNldEludGVydmFsKCgoKT0+YigpKSxlLmludGVydmFsKSl9Y29uc3QgYj0oKT0+e24uYWN0aXZlSW5kZXg8aS52YWx1ZS5sZW5ndGgtMT9uLmFjdGl2ZUluZGV4PW4uYWN0aXZlSW5kZXgrMTplLmxvb3AmJihuLmFjdGl2ZUluZGV4PTApfTtmdW5jdGlvbiBDKHQpe2lmKFwic3RyaW5nXCI9PXR5cGVvZiB0KXtjb25zdCBlPWkudmFsdWUuZmlsdGVyKChlPT5lLm5hbWU9PT10KSk7ZS5sZW5ndGg+MCYmKHQ9aS52YWx1ZS5pbmRleE9mKGVbMF0pKX1pZih0PU51bWJlcih0KSxpc05hTih0KXx8dCE9PU1hdGguZmxvb3IodCkpcmV0dXJuIHZvaWQgY29uc29sZS53YXJuKFwiW0VsZW1lbnQgV2Fybl1bQ2Fyb3VzZWxdaW5kZXggbXVzdCBiZSBhbiBpbnRlZ2VyLlwiKTtsZXQgbD1pLnZhbHVlLmxlbmd0aDtjb25zdCBhPW4uYWN0aXZlSW5kZXg7bi5hY3RpdmVJbmRleD10PDA/ZS5sb29wP2wtMTowOnQ+PWw/ZS5sb29wPzA6bC0xOnQsYT09PW4uYWN0aXZlSW5kZXgmJncoYSl9ZnVuY3Rpb24gdyhlKXtpLnZhbHVlLmZvckVhY2goKCh0LGwpPT57dC50cmFuc2xhdGVJdGVtKGwsbi5hY3RpdmVJbmRleCxlKX0pKX1yZXR1cm4geSgoKCk9Pm4uYWN0aXZlSW5kZXgpLCgoZSx0KT0+e3codCksdD4tMSYmYShcImNoYW5nZVwiLGUsdCl9KSkseSgoKCk9PmUuYXV0b3BsYXkpLChlPT57ZT9nKCk6bSgpfSkpLHkoKCgpPT5lLmxvb3ApLCgoKT0+e0Mobi5hY3RpdmVJbmRleCl9KSksXygoKCk9PntrKCgoKT0+e0p0KG8udmFsdWUsdyksby52YWx1ZSYmKHIudmFsdWU9by52YWx1ZS5vZmZzZXRXaWR0aCxzLnZhbHVlPW8udmFsdWUub2Zmc2V0SGVpZ2h0KSxlLmluaXRpYWxJbmRleDxpLnZhbHVlLmxlbmd0aCYmZS5pbml0aWFsSW5kZXg+PTAmJihuLmFjdGl2ZUluZGV4PWUuaW5pdGlhbEluZGV4KSxnKCl9KSl9KSksTygoKCk9PntvLnZhbHVlJiZlbChvLnZhbHVlLHcpLG0oKX0pKSx4KFwiaW5qZWN0Q2Fyb3VzZWxTY29wZVwiLHtkaXJlY3Rpb246ZS5kaXJlY3Rpb24sb2Zmc2V0V2lkdGg6cixvZmZzZXRIZWlnaHQ6cyx0eXBlOmUudHlwZSxpdGVtczppLGxvb3A6ZS5sb29wLHVwZGF0ZUl0ZW1zOmZ1bmN0aW9uKGUpe2kudmFsdWUucHVzaChlKX0sc2V0QWN0aXZlSXRlbTpDfSkse2RhdGE6bixwcm9wczplLGl0ZW1zOmksYXJyb3dEaXNwbGF5OnUsY2Fyb3VzZWxDbGFzc2VzOmMsaW5kaWNhdG9yc0NsYXNzZXM6cCxoYXNMYWJlbDpkLGhhbmRsZU1vdXNlRW50ZXI6ZnVuY3Rpb24oKXtuLmhvdmVyPSEwLG0oKX0saGFuZGxlTW91c2VMZWF2ZTpmdW5jdGlvbigpe24uaG92ZXI9ITEsZygpfSxoYW5kbGVJbmRpY2F0b3JDbGljazpmdW5jdGlvbihlKXtuLmFjdGl2ZUluZGV4PWV9LHRocm90dGxlZEFycm93Q2xpY2s6aCx0aHJvdHRsZWRJbmRpY2F0b3JIb3Zlcjp2LGhhbmRsZUJ1dHRvbkVudGVyOmZ1bmN0aW9uKHQpe1widmVydGljYWxcIiE9PWUuZGlyZWN0aW9uJiZpLnZhbHVlLmZvckVhY2goKChlLGwpPT57dD09PWZ1bmN0aW9uKGUsdCl7Y29uc3QgbD1pLnZhbHVlLmxlbmd0aDtyZXR1cm4gdD09PWwtMSYmZS5pblN0YWdlJiZpLnZhbHVlWzBdLmFjdGl2ZXx8ZS5pblN0YWdlJiZpLnZhbHVlW3QrMV0mJmkudmFsdWVbdCsxXS5hY3RpdmU/XCJsZWZ0XCI6ISEoMD09PXQmJmUuaW5TdGFnZSYmaS52YWx1ZVtsLTFdLmFjdGl2ZXx8ZS5pblN0YWdlJiZpLnZhbHVlW3QtMV0mJmkudmFsdWVbdC0xXS5hY3RpdmUpJiZcInJpZ2h0XCJ9KGUsbCkmJihlLmhvdmVyPSEwKX0pKX0saGFuZGxlQnV0dG9uTGVhdmU6ZnVuY3Rpb24oKXtcInZlcnRpY2FsXCIhPT1lLmRpcmVjdGlvbiYmaS52YWx1ZS5mb3JFYWNoKChlPT57ZS5ob3Zlcj0hMX0pKX0scHJldjpmdW5jdGlvbigpe0Mobi5hY3RpdmVJbmRleC0xKX0sbmV4dDpmdW5jdGlvbigpe0Mobi5hY3RpdmVJbmRleCsxKX0sc2V0QWN0aXZlSXRlbTpDLHJvb3Q6b319fSk7Y29uc3QgTGE9cyhcImlcIix7Y2xhc3M6XCJlbC1pY29uLWFycm93LWxlZnRcIn0sbnVsbCwtMSksemE9cyhcImlcIix7Y2xhc3M6XCJlbC1pY29uLWFycm93LXJpZ2h0XCJ9LG51bGwsLTEpLEZhPXtjbGFzczpcImVsLWNhcm91c2VsX19idXR0b25cIn0sJGE9e2tleTowfTtCYS5yZW5kZXI9ZnVuY3Rpb24oZSx0LGwsYyx2LG0pe3JldHVybiBhKCksbihcImRpdlwiLHtyZWY6XCJyb290XCIsY2xhc3M6ZS5jYXJvdXNlbENsYXNzZXMsb25Nb3VzZWVudGVyOnRbN118fCh0WzddPVQoKCguLi50KT0+ZS5oYW5kbGVNb3VzZUVudGVyKC4uLnQpKSxbXCJzdG9wXCJdKSksb25Nb3VzZWxlYXZlOnRbOF18fCh0WzhdPVQoKCguLi50KT0+ZS5oYW5kbGVNb3VzZUxlYXZlKC4uLnQpKSxbXCJzdG9wXCJdKSl9LFtzKFwiZGl2XCIse2NsYXNzOlwiZWwtY2Fyb3VzZWxfX2NvbnRhaW5lclwiLHN0eWxlOntoZWlnaHQ6ZS5oZWlnaHR9fSxbZS5hcnJvd0Rpc3BsYXk/KGEoKSxuKG8se2tleTowLG5hbWU6XCJjYXJvdXNlbC1hcnJvdy1sZWZ0XCJ9LHtkZWZhdWx0OmkoKCgpPT5bcihzKFwiYnV0dG9uXCIse3R5cGU6XCJidXR0b25cIixjbGFzczpcImVsLWNhcm91c2VsX19hcnJvdyBlbC1jYXJvdXNlbF9fYXJyb3ctLWxlZnRcIixvbk1vdXNlZW50ZXI6dFsxXXx8KHRbMV09dD0+ZS5oYW5kbGVCdXR0b25FbnRlcihcImxlZnRcIikpLG9uTW91c2VsZWF2ZTp0WzJdfHwodFsyXT0oLi4udCk9PmUuaGFuZGxlQnV0dG9uTGVhdmUoLi4udCkpLG9uQ2xpY2s6dFszXXx8KHRbM109VCgodD0+ZS50aHJvdHRsZWRBcnJvd0NsaWNrKGUuZGF0YS5hY3RpdmVJbmRleC0xKSksW1wic3RvcFwiXSkpfSxbTGFdLDU0NCksW1toLChcImFsd2F5c1wiPT09ZS5hcnJvd3x8ZS5kYXRhLmhvdmVyKSYmKGUucHJvcHMubG9vcHx8ZS5kYXRhLmFjdGl2ZUluZGV4PjApXV0pXSkpLF86MX0pKTp1KFwidi1pZlwiLCEwKSxlLmFycm93RGlzcGxheT8oYSgpLG4obyx7a2V5OjEsbmFtZTpcImNhcm91c2VsLWFycm93LXJpZ2h0XCJ9LHtkZWZhdWx0OmkoKCgpPT5bcihzKFwiYnV0dG9uXCIse3R5cGU6XCJidXR0b25cIixjbGFzczpcImVsLWNhcm91c2VsX19hcnJvdyBlbC1jYXJvdXNlbF9fYXJyb3ctLXJpZ2h0XCIsb25Nb3VzZWVudGVyOnRbNF18fCh0WzRdPXQ9PmUuaGFuZGxlQnV0dG9uRW50ZXIoXCJyaWdodFwiKSksb25Nb3VzZWxlYXZlOnRbNV18fCh0WzVdPSguLi50KT0+ZS5oYW5kbGVCdXR0b25MZWF2ZSguLi50KSksb25DbGljazp0WzZdfHwodFs2XT1UKCh0PT5lLnRocm90dGxlZEFycm93Q2xpY2soZS5kYXRhLmFjdGl2ZUluZGV4KzEpKSxbXCJzdG9wXCJdKSl9LFt6YV0sNTQ0KSxbW2gsKFwiYWx3YXlzXCI9PT1lLmFycm93fHxlLmRhdGEuaG92ZXIpJiYoZS5wcm9wcy5sb29wfHxlLmRhdGEuYWN0aXZlSW5kZXg8ZS5pdGVtcy5sZW5ndGgtMSldXSldKSksXzoxfSkpOnUoXCJ2LWlmXCIsITApLGQoZS4kc2xvdHMsXCJkZWZhdWx0XCIpXSw0KSxcIm5vbmVcIiE9PWUuaW5kaWNhdG9yUG9zaXRpb24/KGEoKSxuKFwidWxcIix7a2V5OjAsY2xhc3M6ZS5pbmRpY2F0b3JzQ2xhc3Nlc30sWyhhKCEwKSxuKEUsbnVsbCxIKGUuaXRlbXMsKCh0LGwpPT4oYSgpLG4oXCJsaVwiLHtrZXk6bCxjbGFzczpbXCJlbC1jYXJvdXNlbF9faW5kaWNhdG9yXCIsXCJlbC1jYXJvdXNlbF9faW5kaWNhdG9yLS1cIitlLmRpcmVjdGlvbix7XCJpcy1hY3RpdmVcIjpsPT09ZS5kYXRhLmFjdGl2ZUluZGV4fV0sb25Nb3VzZWVudGVyOnQ9PmUudGhyb3R0bGVkSW5kaWNhdG9ySG92ZXIobCksb25DbGljazpUKCh0PT5lLmhhbmRsZUluZGljYXRvckNsaWNrKGwpKSxbXCJzdG9wXCJdKX0sW3MoXCJidXR0b25cIixGYSxbZS5oYXNMYWJlbD8oYSgpLG4oXCJzcGFuXCIsJGEscCh0LmxhYmVsKSwxKSk6dShcInYtaWZcIiwhMCldKV0sNDIsW1wib25Nb3VzZWVudGVyXCIsXCJvbkNsaWNrXCJdKSkpKSwxMjgpKV0sMikpOnUoXCJ2LWlmXCIsITApXSwzNCl9LEJhLl9fZmlsZT1cInBhY2thZ2VzL2Nhcm91c2VsL3NyYy9tYWluLnZ1ZVwiLEJhLmluc3RhbGw9ZT0+e2UuY29tcG9uZW50KEJhLm5hbWUsQmEpfTt2YXIgUmE9ZSh7bmFtZTpcIkVsQ2Fyb3VzZWxJdGVtXCIscHJvcHM6e25hbWU6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJcIn0sbGFiZWw6e3R5cGU6W1N0cmluZyxOdW1iZXJdLGRlZmF1bHQ6XCJcIn19LHNldHVwKGUpe2NvbnN0IHQ9digpO3QudWlkO2NvbnN0IGE9Zih7aG92ZXI6ITEsdHJhbnNsYXRlOjAsc2NhbGU6MSxhY3RpdmU6ITEscmVhZHk6ITEsaW5TdGFnZTohMSxhbmltYXRpbmc6ITF9KSxuPXcoXCJpbmplY3RDYXJvdXNlbFNjb3BlXCIpLG89bCgoKCk9Pm4uZGlyZWN0aW9uKSksaT1sKCgoKT0+ZnVuY3Rpb24oZSl7Y29uc3QgdD1bXCJtcy1cIixcIndlYmtpdC1cIl07cmV0dXJuW1widHJhbnNmb3JtXCIsXCJ0cmFuc2l0aW9uXCIsXCJhbmltYXRpb25cIl0uZm9yRWFjaCgobD0+e2NvbnN0IGE9ZVtsXTtsJiZhJiZ0LmZvckVhY2goKHQ9PntlW3QrbF09YX0pKX0pKSxlfSh7dHJhbnNmb3JtOmAke1widmVydGljYWxcIj09PW8udmFsdWU/XCJ0cmFuc2xhdGVZXCI6XCJ0cmFuc2xhdGVYXCJ9KCR7YS50cmFuc2xhdGV9cHgpIHNjYWxlKCR7YS5zY2FsZX0pYH0pKSk7Y29uc3Qgcj0oZSx0LGwpPT57Y29uc3QgaT1uLnR5cGUscj1uLml0ZW1zLnZhbHVlLmxlbmd0aDtpZihcImNhcmRcIiE9PWkmJnZvaWQgMCE9PWwmJihhLmFuaW1hdGluZz1lPT09dHx8ZT09PWwpLGUhPT10JiZyPjImJm4ubG9vcCYmKGU9ZnVuY3Rpb24oZSx0LGwpe3JldHVybiAwPT09dCYmZT09PWwtMT8tMTp0PT09bC0xJiYwPT09ZT9sOmU8dC0xJiZ0LWU+PWwvMj9sKzE6ZT50KzEmJmUtdD49bC8yPy0yOmV9KGUsdCxyKSksXCJjYXJkXCI9PT1pKVwidmVydGljYWxcIj09PW8udmFsdWUmJmNvbnNvbGUud2FybihcIltFbGVtZW50IFdhcm5dW0Nhcm91c2VsXXZlcnRpY2FsIGRpcmVjdGlvbiBpcyBub3Qgc3VwcG9ydGVkIGluIGNhcmQgbW9kZVwiKSxhLmluU3RhZ2U9TWF0aC5yb3VuZChNYXRoLmFicyhlLXQpKTw9MSxhLmFjdGl2ZT1lPT09dCxhLnRyYW5zbGF0ZT1mdW5jdGlvbihlLHQpe2NvbnN0IGw9bi5vZmZzZXRXaWR0aC52YWx1ZTtyZXR1cm4gYS5pblN0YWdlP2wqKDEuMTcqKGUtdCkrMSkvNDplPHQ/LTEuODMqbC80OjMuODMqbC80fShlLHQpLGEuc2NhbGU9YS5hY3RpdmU/MTouODM7ZWxzZXthLmFjdGl2ZT1lPT09dDtjb25zdCBsPVwidmVydGljYWxcIj09PW8udmFsdWU7YS50cmFuc2xhdGU9ZnVuY3Rpb24oZSx0LGwpe3JldHVybiBuW2w/XCJvZmZzZXRIZWlnaHRcIjpcIm9mZnNldFdpZHRoXCJdLnZhbHVlKihlLXQpfShlLHQsbCl9YS5yZWFkeT0hMH07cmV0dXJuIF8oKCgpPT57bi51cGRhdGVJdGVtcyYmbi51cGRhdGVJdGVtcyhPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7dWlkOnQudWlkfSxlKSxDKGEpKSx7dHJhbnNsYXRlSXRlbTpyfSkpfSkpLHtkYXRhOmEsaXRlbVN0eWxlOmksdHJhbnNsYXRlSXRlbTpyLHR5cGU6bi50eXBlLGhhbmRsZUl0ZW1DbGljazpmdW5jdGlvbigpe2lmKG4mJlwiY2FyZFwiPT09bi50eXBlKXtjb25zdCBlPW4uaXRlbXMudmFsdWUubWFwKChlPT5lLnVpZCkpLmluZGV4T2YodC51aWQpO24uc2V0QWN0aXZlSXRlbShlKX19fX19KTtjb25zdCBIYT17a2V5OjAsY2xhc3M6XCJlbC1jYXJvdXNlbF9fbWFza1wifTtSYS5yZW5kZXI9ZnVuY3Rpb24oZSx0LGwsbyxpLHMpe3JldHVybiByKChhKCksbihcImRpdlwiLHtjbGFzczpbXCJlbC1jYXJvdXNlbF9faXRlbVwiLHtcImlzLWFjdGl2ZVwiOmUuZGF0YS5hY3RpdmUsXCJlbC1jYXJvdXNlbF9faXRlbS0tY2FyZFwiOlwiY2FyZFwiPT09ZS50eXBlLFwiaXMtaW4tc3RhZ2VcIjplLmRhdGEuaW5TdGFnZSxcImlzLWhvdmVyXCI6ZS5kYXRhLmhvdmVyLFwiaXMtYW5pbWF0aW5nXCI6ZS5kYXRhLmFuaW1hdGluZ31dLHN0eWxlOmUuaXRlbVN0eWxlLG9uQ2xpY2s6dFsxXXx8KHRbMV09KC4uLnQpPT5lLmhhbmRsZUl0ZW1DbGljayguLi50KSl9LFtcImNhcmRcIj09PWUudHlwZT9yKChhKCksbihcImRpdlwiLEhhLG51bGwsNTEyKSksW1toLCFlLmRhdGEuYWN0aXZlXV0pOnUoXCJ2LWlmXCIsITApLGQoZS4kc2xvdHMsXCJkZWZhdWx0XCIpXSw2KSksW1toLGUuZGF0YS5yZWFkeV1dKX0sUmEuX19maWxlPVwicGFja2FnZXMvY2Fyb3VzZWwvc3JjL2l0ZW0udnVlXCIsUmEuaW5zdGFsbD1lPT57ZS5jb21wb25lbnQoUmEubmFtZSxSYSl9O2NvbnN0IFdhPSgpPT57Y29uc3QgZT1xZSgpLHQ9dyhcImVsRm9ybVwiLHt9KSxhPXcoXCJlbEZvcm1JdGVtXCIse30pLG49dyhcIkNoZWNrYm94R3JvdXBcIix7fSksbz1sKCgoKT0+biYmXCJFbENoZWNrYm94R3JvdXBcIj09PShudWxsPT1uP3ZvaWQgMDpuLm5hbWUpKSksaT1sKCgoKT0+YS5zaXplKSk7cmV0dXJue2lzR3JvdXA6byxjaGVja2JveEdyb3VwOm4sZWxGb3JtOnQsRUxFTUVOVDplLGVsRm9ybUl0ZW1TaXplOmksZWxGb3JtSXRlbTphfX0samE9ZT0+e2NvbnN0e21vZGVsOmEsaXNMaW1pdEV4Y2VlZGVkOm59PShlPT57bGV0IGE9ITE7Y29uc3R7ZW1pdDpufT12KCkse2lzR3JvdXA6byxjaGVja2JveEdyb3VwOml9PVdhKCkscj10KCExKSxzPWwoKCgpPT57dmFyIHQ7cmV0dXJuIGk/bnVsbD09PSh0PWkubW9kZWxWYWx1ZSl8fHZvaWQgMD09PXQ/dm9pZCAwOnQudmFsdWU6ZS5tb2RlbFZhbHVlfSkpO3JldHVybnttb2RlbDpsKHtnZXQoKXt2YXIgdDtyZXR1cm4gby52YWx1ZT9zLnZhbHVlOm51bGwhPT0odD1lLm1vZGVsVmFsdWUpJiZ2b2lkIDAhPT10P3Q6YX0sc2V0KGUpe3ZhciB0O28udmFsdWUmJkFycmF5LmlzQXJyYXkoZSk/KHIudmFsdWU9ITEsdm9pZCAwIT09aS5taW4mJmUubGVuZ3RoPGkubWluLnZhbHVlJiYoci52YWx1ZT0hMCksdm9pZCAwIT09aS5tYXgmJmUubGVuZ3RoPmkubWF4LnZhbHVlJiYoci52YWx1ZT0hMCksITE9PT1yLnZhbHVlJiYobnVsbD09PSh0PW51bGw9PWk/dm9pZCAwOmkuY2hhbmdlRXZlbnQpfHx2b2lkIDA9PT10fHx0LmNhbGwoaSxlKSkpOihuKFB0LGUpLGE9ZSl9fSksaXNMaW1pdEV4Y2VlZGVkOnJ9fSkoZSkse2ZvY3VzOm8sc2l6ZTppLGlzQ2hlY2tlZDpyLGNoZWNrYm94U2l6ZTpzfT0oKGUse21vZGVsOmF9KT0+e2NvbnN0e2lzR3JvdXA6bixjaGVja2JveEdyb3VwOm8sZWxGb3JtSXRlbVNpemU6aSxFTEVNRU5UOnJ9PVdhKCkscz10KCExKSx1PWwoKCgpPT57dmFyIGU7cmV0dXJuKG51bGw9PT0oZT1udWxsPT1vP3ZvaWQgMDpvLmNoZWNrYm94R3JvdXBTaXplKXx8dm9pZCAwPT09ZT92b2lkIDA6ZS52YWx1ZSl8fGkudmFsdWV8fHIuc2l6ZX0pKTtyZXR1cm57aXNDaGVja2VkOmwoKCgpPT57Y29uc3QgdD1hLnZhbHVlO3JldHVyblwiW29iamVjdCBCb29sZWFuXVwiPT09UGUodCk/dDpBcnJheS5pc0FycmF5KHQpP3QuaW5jbHVkZXMoZS5sYWJlbCk6bnVsbCE9dD90PT09ZS50cnVlTGFiZWw6dm9pZCAwfSkpLGZvY3VzOnMsc2l6ZTp1LGNoZWNrYm94U2l6ZTpsKCgoKT0+e3ZhciB0O2NvbnN0IGw9ZS5zaXplfHxpLnZhbHVlfHxyLnNpemU7cmV0dXJuIG4udmFsdWUmJihudWxsPT09KHQ9bnVsbD09bz92b2lkIDA6by5jaGVja2JveEdyb3VwU2l6ZSl8fHZvaWQgMD09PXQ/dm9pZCAwOnQudmFsdWUpfHxsfSkpfX0pKGUse21vZGVsOmF9KSx7aXNEaXNhYmxlZDp1fT0oKGUse21vZGVsOnQsaXNDaGVja2VkOmF9KT0+e2NvbnN0e2VsRm9ybTpuLGlzR3JvdXA6byxjaGVja2JveEdyb3VwOml9PVdhKCkscj1sKCgoKT0+e3ZhciBlLGw7Y29uc3Qgbj1udWxsPT09KGU9aS5tYXgpfHx2b2lkIDA9PT1lP3ZvaWQgMDplLnZhbHVlLG89bnVsbD09PShsPWkubWluKXx8dm9pZCAwPT09bD92b2lkIDA6bC52YWx1ZTtyZXR1cm4hKCFuJiYhbykmJnQudmFsdWUubGVuZ3RoPj1uJiYhYS52YWx1ZXx8dC52YWx1ZS5sZW5ndGg8PW8mJmEudmFsdWV9KSk7cmV0dXJue2lzRGlzYWJsZWQ6bCgoKCk9Pnt2YXIgdDtjb25zdCBsPWUuZGlzYWJsZWR8fG4uZGlzYWJsZWQ7cmV0dXJuIG8udmFsdWU/KG51bGw9PT0odD1pLmRpc2FibGVkKXx8dm9pZCAwPT09dD92b2lkIDA6dC52YWx1ZSl8fGx8fHIudmFsdWU6ZS5kaXNhYmxlZHx8bi5kaXNhYmxlZH0pKSxpc0xpbWl0RGlzYWJsZWQ6cn19KShlLHttb2RlbDphLGlzQ2hlY2tlZDpyfSkse2hhbmRsZUNoYW5nZTpkfT0oKGUse2lzTGltaXRFeGNlZWRlZDp0fSk9Pntjb25zdHtlbEZvcm1JdGVtOmx9PVdhKCkse2VtaXQ6YX09digpO3JldHVybiB5KCgoKT0+ZS5tb2RlbFZhbHVlKSwoZT0+e3ZhciB0O251bGw9PT0odD1sLmZvcm1JdGVtTWl0dCl8fHZvaWQgMD09PXR8fHQuZW1pdChcImVsLmZvcm0uY2hhbmdlXCIsW2VdKX0pKSx7aGFuZGxlQ2hhbmdlOmZ1bmN0aW9uKGwpe3ZhciBuLG87aWYodC52YWx1ZSlyZXR1cm47Y29uc3QgaT1sLnRhcmdldC5jaGVja2VkP251bGw9PT0obj1lLnRydWVMYWJlbCl8fHZvaWQgMD09PW58fG46bnVsbCE9PShvPWUuZmFsc2VMYWJlbCkmJnZvaWQgMCE9PW8mJm87YShcImNoYW5nZVwiLGksbCl9fX0pKGUse2lzTGltaXRFeGNlZWRlZDpufSk7cmV0dXJuKChlLHttb2RlbDp0fSk9PntlLmNoZWNrZWQmJihBcnJheS5pc0FycmF5KHQudmFsdWUpJiYhdC52YWx1ZS5pbmNsdWRlcyhlLmxhYmVsKT90LnZhbHVlLnB1c2goZS5sYWJlbCk6dC52YWx1ZT1lLnRydWVMYWJlbHx8ITApfSkoZSx7bW9kZWw6YX0pLHtpc0NoZWNrZWQ6cixpc0Rpc2FibGVkOnUsY2hlY2tib3hTaXplOnMsbW9kZWw6YSxoYW5kbGVDaGFuZ2U6ZCxmb2N1czpvLHNpemU6aX19O3ZhciBLYT1lKHtuYW1lOlwiRWxDaGVja2JveFwiLHByb3BzOnttb2RlbFZhbHVlOnt0eXBlOltCb29sZWFuLE51bWJlcixTdHJpbmddLGRlZmF1bHQ6KCk9Pnt9fSxsYWJlbDp7dHlwZTpbQm9vbGVhbixOdW1iZXIsU3RyaW5nXX0saW5kZXRlcm1pbmF0ZTpCb29sZWFuLGRpc2FibGVkOkJvb2xlYW4sY2hlY2tlZDpCb29sZWFuLG5hbWU6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6dm9pZCAwfSx0cnVlTGFiZWw6e3R5cGU6W1N0cmluZyxOdW1iZXJdLGRlZmF1bHQ6dm9pZCAwfSxmYWxzZUxhYmVsOnt0eXBlOltTdHJpbmcsTnVtYmVyXSxkZWZhdWx0OnZvaWQgMH0saWQ6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6dm9pZCAwfSxjb250cm9sczp7dHlwZTpTdHJpbmcsZGVmYXVsdDp2b2lkIDB9LGJvcmRlcjpCb29sZWFuLHNpemU6e3R5cGU6U3RyaW5nLHZhbGlkYXRvcjpBdH19LGVtaXRzOltQdCxcImNoYW5nZVwiXSxzZXR1cChlKXtjb25zdHtmb2N1czp0LGlzQ2hlY2tlZDpsLGlzRGlzYWJsZWQ6YSxjaGVja2JveFNpemU6bixtb2RlbDpvLGhhbmRsZUNoYW5nZTppfT1qYShlKSxyPXYoKTtyZXR1cm4gXygoKCk9PntyLnZub2RlLmVsLnNldEF0dHJpYnV0ZShcImFyaWEtY29udHJvbHNcIixlLmNvbnRyb2xzKX0pKSx7Zm9jdXM6dCxpc0NoZWNrZWQ6bCxpc0Rpc2FibGVkOmEsY2hlY2tib3hTaXplOm4sbW9kZWw6byxoYW5kbGVDaGFuZ2U6aX19fSk7Y29uc3QgWWE9cyhcInNwYW5cIix7Y2xhc3M6XCJlbC1jaGVja2JveF9faW5uZXJcIn0sbnVsbCwtMSkscWE9e2tleTowLGNsYXNzOlwiZWwtY2hlY2tib3hfX2xhYmVsXCJ9O0thLnJlbmRlcj1mdW5jdGlvbihlLHQsbCxvLGksaCl7cmV0dXJuIGEoKSxuKFwibGFiZWxcIix7aWQ6ZS5pZCxjbGFzczpbXCJlbC1jaGVja2JveFwiLFtlLmJvcmRlciYmZS5jaGVja2JveFNpemU/XCJlbC1jaGVja2JveC0tXCIrZS5jaGVja2JveFNpemU6XCJcIix7XCJpcy1kaXNhYmxlZFwiOmUuaXNEaXNhYmxlZH0se1wiaXMtYm9yZGVyZWRcIjplLmJvcmRlcn0se1wiaXMtY2hlY2tlZFwiOmUuaXNDaGVja2VkfV1dfSxbcyhcInNwYW5cIix7Y2xhc3M6W1wiZWwtY2hlY2tib3hfX2lucHV0XCIse1wiaXMtZGlzYWJsZWRcIjplLmlzRGlzYWJsZWQsXCJpcy1jaGVja2VkXCI6ZS5pc0NoZWNrZWQsXCJpcy1pbmRldGVybWluYXRlXCI6ZS5pbmRldGVybWluYXRlLFwiaXMtZm9jdXNcIjplLmZvY3VzfV0sdGFiaW5kZXg6ISFlLmluZGV0ZXJtaW5hdGUmJjAscm9sZTohIWUuaW5kZXRlcm1pbmF0ZSYmXCJjaGVja2JveFwiLFwiYXJpYS1jaGVja2VkXCI6ISFlLmluZGV0ZXJtaW5hdGUmJlwibWl4ZWRcIn0sW1lhLGUudHJ1ZUxhYmVsfHxlLmZhbHNlTGFiZWw/cigoYSgpLG4oXCJpbnB1dFwiLHtrZXk6MCxcIm9uVXBkYXRlOm1vZGVsVmFsdWVcIjp0WzFdfHwodFsxXT10PT5lLm1vZGVsPXQpLGNoZWNrZWQ6ZS5pc0NoZWNrZWQsY2xhc3M6XCJlbC1jaGVja2JveF9fb3JpZ2luYWxcIix0eXBlOlwiY2hlY2tib3hcIixcImFyaWEtaGlkZGVuXCI6ZS5pbmRldGVybWluYXRlP1widHJ1ZVwiOlwiZmFsc2VcIixuYW1lOmUubmFtZSxkaXNhYmxlZDplLmlzRGlzYWJsZWQsXCJ0cnVlLXZhbHVlXCI6ZS50cnVlTGFiZWwsXCJmYWxzZS12YWx1ZVwiOmUuZmFsc2VMYWJlbCxvbkNoYW5nZTp0WzJdfHwodFsyXT0oLi4udCk9PmUuaGFuZGxlQ2hhbmdlKC4uLnQpKSxvbkZvY3VzOnRbM118fCh0WzNdPXQ9PmUuZm9jdXM9ITApLG9uQmx1cjp0WzRdfHwodFs0XT10PT5lLmZvY3VzPSExKX0sbnVsbCw0MCxbXCJjaGVja2VkXCIsXCJhcmlhLWhpZGRlblwiLFwibmFtZVwiLFwiZGlzYWJsZWRcIixcInRydWUtdmFsdWVcIixcImZhbHNlLXZhbHVlXCJdKSksW1tXLGUubW9kZWxdXSk6cigoYSgpLG4oXCJpbnB1dFwiLHtrZXk6MSxcIm9uVXBkYXRlOm1vZGVsVmFsdWVcIjp0WzVdfHwodFs1XT10PT5lLm1vZGVsPXQpLGNsYXNzOlwiZWwtY2hlY2tib3hfX29yaWdpbmFsXCIsdHlwZTpcImNoZWNrYm94XCIsXCJhcmlhLWhpZGRlblwiOmUuaW5kZXRlcm1pbmF0ZT9cInRydWVcIjpcImZhbHNlXCIsZGlzYWJsZWQ6ZS5pc0Rpc2FibGVkLHZhbHVlOmUubGFiZWwsbmFtZTplLm5hbWUsb25DaGFuZ2U6dFs2XXx8KHRbNl09KC4uLnQpPT5lLmhhbmRsZUNoYW5nZSguLi50KSksb25Gb2N1czp0WzddfHwodFs3XT10PT5lLmZvY3VzPSEwKSxvbkJsdXI6dFs4XXx8KHRbOF09dD0+ZS5mb2N1cz0hMSl9LG51bGwsNDAsW1wiYXJpYS1oaWRkZW5cIixcImRpc2FibGVkXCIsXCJ2YWx1ZVwiLFwibmFtZVwiXSkpLFtbVyxlLm1vZGVsXV0pXSwxMCxbXCJ0YWJpbmRleFwiLFwicm9sZVwiLFwiYXJpYS1jaGVja2VkXCJdKSxlLiRzbG90cy5kZWZhdWx0fHxlLmxhYmVsPyhhKCksbihcInNwYW5cIixxYSxbZChlLiRzbG90cyxcImRlZmF1bHRcIiksZS4kc2xvdHMuZGVmYXVsdD91KFwidi1pZlwiLCEwKTooYSgpLG4oRSx7a2V5OjB9LFtjKHAoZS5sYWJlbCksMSldLDY0KSldKSk6dShcInYtaWZcIiwhMCldLDEwLFtcImlkXCJdKX0sS2EuX19maWxlPVwicGFja2FnZXMvY2hlY2tib3gvc3JjL2NoZWNrYm94LnZ1ZVwiLEthLmluc3RhbGw9ZT0+e2UuY29tcG9uZW50KEthLm5hbWUsS2EpfTtjb25zdCBVYT0oKT0+e2NvbnN0IGU9cWUoKSxhPXcoXCJlbEZvcm1cIix7fSksbj13KFwiZWxGb3JtSXRlbVwiLHt9KSxvPXcoXCJSYWRpb0dyb3VwXCIse30pLGk9dCghMSkscj1sKCgoKT0+XCJFbFJhZGlvR3JvdXBcIj09PShudWxsPT1vP3ZvaWQgMDpvLm5hbWUpKSkscz1sKCgoKT0+bi5zaXplfHxlLnNpemUpKTtyZXR1cm57aXNHcm91cDpyLGZvY3VzOmkscmFkaW9Hcm91cDpvLGVsRm9ybTphLEVMRU1FTlQ6ZSxlbEZvcm1JdGVtU2l6ZTpzfX0sR2E9KGUse2lzR3JvdXA6dCxyYWRpb0dyb3VwOmEsZWxGb3JtOm4sbW9kZWw6b30pPT57Y29uc3QgaT1sKCgoKT0+dC52YWx1ZT9hLmRpc2FibGVkfHxlLmRpc2FibGVkfHxuLmRpc2FibGVkOmUuZGlzYWJsZWR8fG4uZGlzYWJsZWQpKSxyPWwoKCgpPT5pLnZhbHVlfHx0LnZhbHVlJiZvLnZhbHVlIT09ZS5sYWJlbD8tMTowKSk7cmV0dXJue2lzRGlzYWJsZWQ6aSx0YWJJbmRleDpyfX07dmFyIFhhPWUoe25hbWU6XCJFbFJhZGlvXCIsY29tcG9uZW50TmFtZTpcIkVsUmFkaW9cIixwcm9wczp7bW9kZWxWYWx1ZTp7dHlwZTpbQm9vbGVhbixTdHJpbmcsTnVtYmVyXSxkZWZhdWx0OlwiXCJ9LGxhYmVsOnt0eXBlOltCb29sZWFuLFN0cmluZyxOdW1iZXJdLGRlZmF1bHQ6XCJcIn0sZGlzYWJsZWQ6Qm9vbGVhbixuYW1lOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiXCJ9LGJvcmRlcjpCb29sZWFuLHNpemU6e3R5cGU6U3RyaW5nLHZhbGlkYXRvcjpBdH19LGVtaXRzOltQdCxcImNoYW5nZVwiXSxzZXR1cChlLGEpe2NvbnN0e2lzR3JvdXA6bixyYWRpb0dyb3VwOm8sZWxGb3JtSXRlbVNpemU6aSxFTEVNRU5UOnIsZm9jdXM6cyxlbEZvcm06dX09VWEoKSxkPXQoKSxjPWwoe2dldDooKT0+bi52YWx1ZT9vLm1vZGVsVmFsdWU6ZS5tb2RlbFZhbHVlLHNldCh0KXtuLnZhbHVlP28uY2hhbmdlRXZlbnQodCk6YS5lbWl0KFB0LHQpLGQudmFsdWUuY2hlY2tlZD1lLm1vZGVsVmFsdWU9PT1lLmxhYmVsfX0pLHt0YWJJbmRleDpwLGlzRGlzYWJsZWQ6aH09R2EoZSx7aXNHcm91cDpuLHJhZGlvR3JvdXA6byxlbEZvcm06dSxtb2RlbDpjfSksdj1sKCgoKT0+e2NvbnN0IHQ9ZS5zaXplfHxpLnZhbHVlfHxyLnNpemU7cmV0dXJuIG4udmFsdWUmJm8ucmFkaW9Hcm91cFNpemV8fHR9KSk7cmV0dXJue2ZvY3VzOnMsaXNHcm91cDpuLGlzRGlzYWJsZWQ6aCxtb2RlbDpjLHRhYkluZGV4OnAscmFkaW9TaXplOnYsaGFuZGxlQ2hhbmdlOmZ1bmN0aW9uKCl7aygoKCk9PnthLmVtaXQoXCJjaGFuZ2VcIixjLnZhbHVlKX0pKX0scmFkaW9SZWY6ZH19fSk7Y29uc3QgUWE9cyhcInNwYW5cIix7Y2xhc3M6XCJlbC1yYWRpb19faW5uZXJcIn0sbnVsbCwtMSk7dmFyIFphO1hhLnJlbmRlcj1mdW5jdGlvbihlLHQsbCxvLGksdSl7cmV0dXJuIGEoKSxuKFwibGFiZWxcIix7Y2xhc3M6W1wiZWwtcmFkaW9cIix7W1wiZWwtcmFkaW8tLVwiKyhlLnJhZGlvU2l6ZXx8XCJcIildOmUuYm9yZGVyJiZlLnJhZGlvU2l6ZSxcImlzLWRpc2FibGVkXCI6ZS5pc0Rpc2FibGVkLFwiaXMtZm9jdXNcIjplLmZvY3VzLFwiaXMtYm9yZGVyZWRcIjplLmJvcmRlcixcImlzLWNoZWNrZWRcIjplLm1vZGVsPT09ZS5sYWJlbH1dLHJvbGU6XCJyYWRpb1wiLFwiYXJpYS1jaGVja2VkXCI6ZS5tb2RlbD09PWUubGFiZWwsXCJhcmlhLWRpc2FibGVkXCI6ZS5pc0Rpc2FibGVkLHRhYmluZGV4OmUudGFiSW5kZXgsb25LZXlkb3duOnRbNl18fCh0WzZdPSQoVCgodD0+ZS5tb2RlbD1lLmlzRGlzYWJsZWQ/ZS5tb2RlbDplLmxhYmVsKSxbXCJzdG9wXCIsXCJwcmV2ZW50XCJdKSxbXCJzcGFjZVwiXSkpfSxbcyhcInNwYW5cIix7Y2xhc3M6W1wiZWwtcmFkaW9fX2lucHV0XCIse1wiaXMtZGlzYWJsZWRcIjplLmlzRGlzYWJsZWQsXCJpcy1jaGVja2VkXCI6ZS5tb2RlbD09PWUubGFiZWx9XX0sW1FhLHIocyhcImlucHV0XCIse3JlZjpcInJhZGlvUmVmXCIsXCJvblVwZGF0ZTptb2RlbFZhbHVlXCI6dFsxXXx8KHRbMV09dD0+ZS5tb2RlbD10KSxjbGFzczpcImVsLXJhZGlvX19vcmlnaW5hbFwiLHZhbHVlOmUubGFiZWwsdHlwZTpcInJhZGlvXCIsXCJhcmlhLWhpZGRlblwiOlwidHJ1ZVwiLG5hbWU6ZS5uYW1lLGRpc2FibGVkOmUuaXNEaXNhYmxlZCx0YWJpbmRleDpcIi0xXCIsb25Gb2N1czp0WzJdfHwodFsyXT10PT5lLmZvY3VzPSEwKSxvbkJsdXI6dFszXXx8KHRbM109dD0+ZS5mb2N1cz0hMSksb25DaGFuZ2U6dFs0XXx8KHRbNF09KC4uLnQpPT5lLmhhbmRsZUNoYW5nZSguLi50KSl9LG51bGwsNDAsW1widmFsdWVcIixcIm5hbWVcIixcImRpc2FibGVkXCJdKSxbW2osZS5tb2RlbF1dKV0sMikscyhcInNwYW5cIix7Y2xhc3M6XCJlbC1yYWRpb19fbGFiZWxcIixvbktleWRvd246dFs1XXx8KHRbNV09VCgoKCk9Pnt9KSxbXCJzdG9wXCJdKSl9LFtkKGUuJHNsb3RzLFwiZGVmYXVsdFwiLHt9LCgoKT0+W2MocChlLmxhYmVsKSwxKV0pKV0sMzIpXSw0MixbXCJhcmlhLWNoZWNrZWRcIixcImFyaWEtZGlzYWJsZWRcIixcInRhYmluZGV4XCJdKX0sWGEuX19maWxlPVwicGFja2FnZXMvcmFkaW8vc3JjL3JhZGlvLnZ1ZVwiLFhhLmluc3RhbGw9ZT0+e2UuY29tcG9uZW50KFhhLm5hbWUsWGEpfSxmdW5jdGlvbihlKXtlLkNMSUNLPVwiY2xpY2tcIixlLkhPVkVSPVwiaG92ZXJcIn0oWmF8fChaYT17fSkpO2NvbnN0IEphPVN5bWJvbCgpO3ZhciBlbj1lKHtuYW1lOlwiRWxDYXNjYWRlck5vZGVcIixjb21wb25lbnRzOntFbENoZWNrYm94OkthLEVsUmFkaW86WGEsTm9kZUNvbnRlbnQ6e3JlbmRlcigpe2NvbnN0e25vZGU6ZSxwYW5lbDp0fT10aGlzLiRwYXJlbnQse2RhdGE6bCxsYWJlbDphfT1lLHtyZW5kZXJMYWJlbEZuOm59PXQ7cmV0dXJuIEQoXCJzcGFuXCIse2NsYXNzOlwiZWwtY2FzY2FkZXItbm9kZV9fbGFiZWxcIn0sbj9uKHtub2RlOmUsZGF0YTpsfSk6YSl9fX0scHJvcHM6e25vZGU6e3R5cGU6T2JqZWN0LHJlcXVpcmVkOiEwfSxtZW51SWQ6U3RyaW5nfSxlbWl0czpbXCJleHBhbmRcIl0sc2V0dXAoZSx7ZW1pdDp0fSl7Y29uc3QgYT13KEphKSxuPWwoKCgpPT5hLmlzSG92ZXJNZW51KSksbz1sKCgoKT0+YS5jb25maWcubXVsdGlwbGUpKSxpPWwoKCgpPT5hLmNvbmZpZy5jaGVja1N0cmljdGx5KSkscj1sKCgoKT0+e3ZhciBlO3JldHVybiBudWxsPT09KGU9YS5jaGVja2VkTm9kZXNbMF0pfHx2b2lkIDA9PT1lP3ZvaWQgMDplLnVpZH0pKSxzPWwoKCgpPT5lLm5vZGUuaXNEaXNhYmxlZCkpLHU9bCgoKCk9PmUubm9kZS5pc0xlYWYpKSxkPWwoKCgpPT5pLnZhbHVlJiYhdS52YWx1ZXx8IXMudmFsdWUpKSxjPWwoKCgpPT5oKGEuZXhwYW5kaW5nTm9kZSkpKSxwPWwoKCgpPT5pLnZhbHVlJiZhLmNoZWNrZWROb2Rlcy5zb21lKGgpKSksaD10PT57dmFyIGw7Y29uc3R7bGV2ZWw6YSx1aWQ6bn09ZS5ub2RlO3JldHVybihudWxsPT09KGw9bnVsbD09dD92b2lkIDA6dC5wYXRoTm9kZXNbYS0xXSl8fHZvaWQgMD09PWw/dm9pZCAwOmwudWlkKT09PW59LHY9KCk9PntjLnZhbHVlfHxhLmV4cGFuZE5vZGUoZS5ub2RlKX0sbT0oKT0+e2EubGF6eUxvYWQoZS5ub2RlLCgoKT0+e3UudmFsdWV8fHYoKX0pKX0sZj0oKT0+e2NvbnN0e25vZGU6dH09ZTtkLnZhbHVlJiYhdC5sb2FkaW5nJiYodC5sb2FkZWQ/digpOm0oKSl9LGc9dD0+e2Uubm9kZS5sb2FkZWQ/KCh0PT57Y29uc3R7bm9kZTpsfT1lO3QhPT1sLmNoZWNrZWQmJmEuaGFuZGxlQ2hlY2tDaGFuZ2UobCx0KX0pKHQpLCFpLnZhbHVlJiZ2KCkpOm0oKX07cmV0dXJue3BhbmVsOmEsaXNIb3Zlck1lbnU6bixtdWx0aXBsZTpvLGNoZWNrU3RyaWN0bHk6aSxjaGVja2VkTm9kZUlkOnIsaXNEaXNhYmxlZDpzLGlzTGVhZjp1LGV4cGFuZGFibGU6ZCxpbkV4cGFuZGluZ1BhdGg6YyxpbkNoZWNrZWRQYXRoOnAsaGFuZGxlSG92ZXJFeHBhbmQ6ZT0+e24udmFsdWUmJihmKCksIXUudmFsdWUmJnQoXCJleHBhbmRcIixlKSl9LGhhbmRsZUV4cGFuZDpmLGhhbmRsZUNsaWNrOigpPT57bi52YWx1ZSYmIXUudmFsdWV8fCghdS52YWx1ZXx8cy52YWx1ZXx8aS52YWx1ZXx8by52YWx1ZT9mKCk6ZyghMCkpfSxoYW5kbGVDaGVjazpnfX19KTtjb25zdCB0bj1zKFwic3BhblwiLG51bGwsbnVsbCwtMSksbG49e2tleToyLGNsYXNzOlwiZWwtaWNvbi1jaGVjayBlbC1jYXNjYWRlci1ub2RlX19wcmVmaXhcIn0sYW49e2tleTowLGNsYXNzOlwiZWwtaWNvbi1sb2FkaW5nIGVsLWNhc2NhZGVyLW5vZGVfX3Bvc3RmaXhcIn0sbm49e2tleToxLGNsYXNzOlwiZWwtaWNvbi1hcnJvdy1yaWdodCBlbC1jYXNjYWRlci1ub2RlX19wb3N0Zml4XCJ9O2VuLnJlbmRlcj1mdW5jdGlvbihlLHQsbCxvLHIsZCl7Y29uc3QgYz1QKFwiZWwtY2hlY2tib3hcIikscD1QKFwiZWwtcmFkaW9cIiksaD1QKFwibm9kZS1jb250ZW50XCIpO3JldHVybiBhKCksbihcImxpXCIse2lkOmAke2UubWVudUlkfS0ke2Uubm9kZS51aWR9YCxyb2xlOlwibWVudWl0ZW1cIixcImFyaWEtaGFzcG9wdXBcIjohZS5pc0xlYWYsXCJhcmlhLW93bnNcIjplLmlzTGVhZj9udWxsOmUubWVudUlkLFwiYXJpYS1leHBhbmRlZFwiOmUuaW5FeHBhbmRpbmdQYXRoLHRhYmluZGV4OmUuZXhwYW5kYWJsZT8tMTpudWxsLGNsYXNzOltcImVsLWNhc2NhZGVyLW5vZGVcIixlLmNoZWNrU3RyaWN0bHkmJlwiaXMtc2VsZWN0YWJsZVwiLGUuaW5FeHBhbmRpbmdQYXRoJiZcImluLWFjdGl2ZS1wYXRoXCIsZS5pbkNoZWNrZWRQYXRoJiZcImluLWNoZWNrZWQtcGF0aFwiLGUubm9kZS5jaGVja2VkJiZcImlzLWFjdGl2ZVwiLCFlLmV4cGFuZGFibGUmJlwiaXMtZGlzYWJsZWRcIl0sb25Nb3VzZWVudGVyOnRbM118fCh0WzNdPSguLi50KT0+ZS5oYW5kbGVIb3ZlckV4cGFuZCguLi50KSksb25Gb2N1czp0WzRdfHwodFs0XT0oLi4udCk9PmUuaGFuZGxlSG92ZXJFeHBhbmQoLi4udCkpLG9uQ2xpY2s6dFs1XXx8KHRbNV09KC4uLnQpPT5lLmhhbmRsZUNsaWNrKC4uLnQpKX0sW3UoXCIgcHJlZml4IFwiKSxlLm11bHRpcGxlPyhhKCksbihjLHtrZXk6MCxcIm1vZGVsLXZhbHVlXCI6ZS5ub2RlLmNoZWNrZWQsaW5kZXRlcm1pbmF0ZTplLm5vZGUuaW5kZXRlcm1pbmF0ZSxkaXNhYmxlZDplLmlzRGlzYWJsZWQsb25DbGljazp0WzFdfHwodFsxXT1UKCgoKT0+e30pLFtcInN0b3BcIl0pKSxcIm9uVXBkYXRlOm1vZGVsVmFsdWVcIjplLmhhbmRsZUNoZWNrfSxudWxsLDgsW1wibW9kZWwtdmFsdWVcIixcImluZGV0ZXJtaW5hdGVcIixcImRpc2FibGVkXCIsXCJvblVwZGF0ZTptb2RlbFZhbHVlXCJdKSk6ZS5jaGVja1N0cmljdGx5PyhhKCksbihwLHtrZXk6MSxcIm1vZGVsLXZhbHVlXCI6ZS5jaGVja2VkTm9kZUlkLGxhYmVsOmUubm9kZS51aWQsZGlzYWJsZWQ6ZS5pc0Rpc2FibGVkLFwib25VcGRhdGU6bW9kZWxWYWx1ZVwiOmUuaGFuZGxlQ2hlY2ssb25DbGljazp0WzJdfHwodFsyXT1UKCgoKT0+e30pLFtcInN0b3BcIl0pKX0se2RlZmF1bHQ6aSgoKCk9Plt1KFwiXFxuICAgICAgICBBZGQgYW4gZW1wdHkgZWxlbWVudCB0byBhdm9pZCByZW5kZXIgbGFiZWwsXFxuICAgICAgICBkbyBub3QgdXNlIGVtcHR5IGZyYWdtZW50IGhlcmUgZm9yIGh0dHBzOi8vZ2l0aHViLmNvbS92dWVqcy92dWUtbmV4dC9wdWxsLzI0ODVcXG4gICAgICBcIiksdG5dKSksXzoxfSw4LFtcIm1vZGVsLXZhbHVlXCIsXCJsYWJlbFwiLFwiZGlzYWJsZWRcIixcIm9uVXBkYXRlOm1vZGVsVmFsdWVcIl0pKTplLmlzTGVhZiYmZS5ub2RlLmNoZWNrZWQ/KGEoKSxuKFwiaVwiLGxuKSk6dShcInYtaWZcIiwhMCksdShcIiBjb250ZW50IFwiKSxzKGgpLHUoXCIgcG9zdGZpeCBcIiksZS5pc0xlYWY/dShcInYtaWZcIiwhMCk6KGEoKSxuKEUse2tleTozfSxbZS5ub2RlLmxvYWRpbmc/KGEoKSxuKFwiaVwiLGFuKSk6KGEoKSxuKFwiaVwiLG5uKSldLDY0KSldLDQyLFtcImlkXCIsXCJhcmlhLWhhc3BvcHVwXCIsXCJhcmlhLW93bnNcIixcImFyaWEtZXhwYW5kZWRcIixcInRhYmluZGV4XCJdKX0sZW4uX19maWxlPVwicGFja2FnZXMvY2FzY2FkZXItcGFuZWwvc3JjL25vZGUudnVlXCI7dmFyIG9uPWUoe25hbWU6XCJFbENhc2NhZGVyTWVudVwiLGNvbXBvbmVudHM6e0VsU2Nyb2xsYmFyOm5sLEVsQ2FzY2FkZXJOb2RlOmVufSxwcm9wczp7bm9kZXM6e3R5cGU6QXJyYXkscmVxdWlyZWQ6ITB9LGluZGV4Ont0eXBlOk51bWJlcixyZXF1aXJlZDohMH19LHNldHVwKGUpe2NvbnN0IGE9digpLG49UmUoKTtsZXQgbz1udWxsLGk9bnVsbDtjb25zdCByPXcoSmEpLHM9dChudWxsKSx1PWwoKCgpPT4hZS5ub2Rlcy5sZW5ndGgpKSxkPWwoKCgpPT5gY2FzY2FkZXItbWVudS0ke259LSR7ZS5pbmRleH1gKSksYz0oKT0+e2kmJihjbGVhclRpbWVvdXQoaSksaT1udWxsKX0scD0oKT0+e3MudmFsdWUmJihzLnZhbHVlLmlubmVySFRNTD1cIlwiLGMoKSl9O3JldHVybntwYW5lbDpyLGhvdmVyWm9uZTpzLGlzRW1wdHk6dSxtZW51SWQ6ZCx0OnFsLGhhbmRsZUV4cGFuZDplPT57bz1lLnRhcmdldH0saGFuZGxlTW91c2VNb3ZlOmU9PntpZihyLmlzSG92ZXJNZW51JiZvJiZzLnZhbHVlKWlmKG8uY29udGFpbnMoZS50YXJnZXQpKXtjKCk7Y29uc3QgdD1hLnZub2RlLmVsLHtsZWZ0Omx9PXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkse29mZnNldFdpZHRoOm4sb2Zmc2V0SGVpZ2h0Oml9PXQscj1lLmNsaWVudFgtbCx1PW8ub2Zmc2V0VG9wLGQ9dStvLm9mZnNldEhlaWdodDtzLnZhbHVlLmlubmVySFRNTD1gXFxuICAgICAgICAgIDxwYXRoIHN0eWxlPVwicG9pbnRlci1ldmVudHM6IGF1dG87XCIgZmlsbD1cInRyYW5zcGFyZW50XCIgZD1cIk0ke3J9ICR7dX0gTCR7bn0gMCBWJHt1fSBaXCIgLz5cXG4gICAgICAgICAgPHBhdGggc3R5bGU9XCJwb2ludGVyLWV2ZW50czogYXV0bztcIiBmaWxsPVwidHJhbnNwYXJlbnRcIiBkPVwiTSR7cn0gJHtkfSBMJHtufSAke2l9IFYke2R9IFpcIiAvPlxcbiAgICAgICAgYH1lbHNlIGl8fChpPXdpbmRvdy5zZXRUaW1lb3V0KHAsci5jb25maWcuaG92ZXJUaHJlc2hvbGQpKX0sY2xlYXJIb3ZlclpvbmU6cH19fSk7Y29uc3Qgcm49e2tleTowLGNsYXNzOlwiZWwtY2FzY2FkZXItbWVudV9fZW1wdHktdGV4dFwifSxzbj17a2V5OjEscmVmOlwiaG92ZXJab25lXCIsY2xhc3M6XCJlbC1jYXNjYWRlci1tZW51X19ob3Zlci16b25lXCJ9O29uLnJlbmRlcj1mdW5jdGlvbihlLHQsbCxvLHIscyl7Y29uc3QgZD1QKFwiZWwtY2FzY2FkZXItbm9kZVwiKSxjPVAoXCJlbC1zY3JvbGxiYXJcIik7cmV0dXJuIGEoKSxuKGMse2lkOmUubWVudUlkLHRhZzpcInVsXCIscm9sZTpcIm1lbnVcIixjbGFzczpcImVsLWNhc2NhZGVyLW1lbnVcIixcIndyYXAtY2xhc3NcIjpcImVsLWNhc2NhZGVyLW1lbnVfX3dyYXBcIixcInZpZXctY2xhc3NcIjpbXCJlbC1jYXNjYWRlci1tZW51X19saXN0XCIsZS5pc0VtcHR5JiZcImlzLWVtcHR5XCJdLG9uTW91c2Vtb3ZlOmUuaGFuZGxlTW91c2VNb3ZlLG9uTW91c2VsZWF2ZTplLmNsZWFySG92ZXJab25lfSx7ZGVmYXVsdDppKCgoKT0+WyhhKCEwKSxuKEUsbnVsbCxIKGUubm9kZXMsKHQ9PihhKCksbihkLHtrZXk6dC51aWQsbm9kZTp0LFwibWVudS1pZFwiOmUubWVudUlkLG9uRXhwYW5kOmUuaGFuZGxlRXhwYW5kfSxudWxsLDgsW1wibm9kZVwiLFwibWVudS1pZFwiLFwib25FeHBhbmRcIl0pKSkpLDEyOCkpLGUuaXNFbXB0eT8oYSgpLG4oXCJkaXZcIixybixwKGUudChcImVsLmNhc2NhZGVyLm5vRGF0YVwiKSksMSkpOmUucGFuZWwuaXNIb3Zlck1lbnU/KGEoKSxuKFwic3ZnXCIsc24sbnVsbCw1MTIpKTp1KFwidi1pZlwiLCEwKV0pKSxfOjF9LDgsW1wiaWRcIixcInZpZXctY2xhc3NcIixcIm9uTW91c2Vtb3ZlXCIsXCJvbk1vdXNlbGVhdmVcIl0pfSxvbi5fX2ZpbGU9XCJwYWNrYWdlcy9jYXNjYWRlci1wYW5lbC9zcmMvbWVudS52dWVcIjtsZXQgdW49MDtjbGFzcyBkbntjb25zdHJ1Y3RvcihlLHQsbCxhPSExKXt0aGlzLmRhdGE9ZSx0aGlzLmNvbmZpZz10LHRoaXMucGFyZW50PWwsdGhpcy5yb290PWEsdGhpcy51aWQ9dW4rKyx0aGlzLmNoZWNrZWQ9ITEsdGhpcy5pbmRldGVybWluYXRlPSExLHRoaXMubG9hZGluZz0hMTtjb25zdHt2YWx1ZTpuLGxhYmVsOm8sY2hpbGRyZW46aX09dCxyPWVbaV0scz0oZT0+e2NvbnN0IHQ9W2VdO2xldHtwYXJlbnQ6bH09ZTtmb3IoO2w7KXQudW5zaGlmdChsKSxsPWwucGFyZW50O3JldHVybiB0fSkodGhpcyk7dGhpcy5sZXZlbD1hPzA6bD9sLmxldmVsKzE6MSx0aGlzLnZhbHVlPWVbbl0sdGhpcy5sYWJlbD1lW29dLHRoaXMucGF0aE5vZGVzPXMsdGhpcy5wYXRoVmFsdWVzPXMubWFwKChlPT5lLnZhbHVlKSksdGhpcy5wYXRoTGFiZWxzPXMubWFwKChlPT5lLmxhYmVsKSksdGhpcy5jaGlsZHJlbkRhdGE9cix0aGlzLmNoaWxkcmVuPShyfHxbXSkubWFwKChlPT5uZXcgZG4oZSx0LHRoaXMpKSksdGhpcy5sb2FkZWQ9IXQubGF6eXx8dGhpcy5pc0xlYWZ8fCFHZShyKX1nZXQgaXNEaXNhYmxlZCgpe2NvbnN0e2RhdGE6ZSxwYXJlbnQ6dCxjb25maWc6bH09dGhpcyx7ZGlzYWJsZWQ6YSxjaGVja1N0cmljdGx5Om59PWw7cmV0dXJuKFRlKGEpP2EoZSx0aGlzKTohIWVbYV0pfHwhbiYmKG51bGw9PXQ/dm9pZCAwOnQuaXNEaXNhYmxlZCl9Z2V0IGlzTGVhZigpe2NvbnN0e2RhdGE6ZSxjb25maWc6dCxjaGlsZHJlbkRhdGE6bCxsb2FkZWQ6YX09dGhpcyx7bGF6eTpuLGxlYWY6b309dCxpPVRlKG8pP28oZSx0aGlzKTplW29dO3JldHVybiB2b2lkIDA9PT1pPyEobiYmIWEpJiYhQXJyYXkuaXNBcnJheShsKTohIWl9Z2V0IHZhbHVlQnlPcHRpb24oKXtyZXR1cm4gdGhpcy5jb25maWcuZW1pdFBhdGg/dGhpcy5wYXRoVmFsdWVzOnRoaXMudmFsdWV9YXBwZW5kQ2hpbGQoZSl7Y29uc3R7Y2hpbGRyZW5EYXRhOnQsY2hpbGRyZW46bH09dGhpcyxhPW5ldyBkbihlLHRoaXMuY29uZmlnLHRoaXMpO3JldHVybiBBcnJheS5pc0FycmF5KHQpP3QucHVzaChlKTp0aGlzLmNoaWxkcmVuRGF0YT1bZV0sbC5wdXNoKGEpLGF9Y2FsY1RleHQoZSx0KXtjb25zdCBsPWU/dGhpcy5wYXRoTGFiZWxzLmpvaW4odCk6dGhpcy5sYWJlbDtyZXR1cm4gdGhpcy50ZXh0PWwsbH1icm9hZGNhc3QoZSwuLi50KXtjb25zdCBsPVwib25QYXJlbnRcIitMZShlKTt0aGlzLmNoaWxkcmVuLmZvckVhY2goKGE9PnthJiYoYS5icm9hZGNhc3QoZSwuLi50KSxhW2xdJiZhW2xdKC4uLnQpKX0pKX1lbWl0KGUsLi4udCl7Y29uc3R7cGFyZW50Omx9PXRoaXMsYT1cIm9uQ2hpbGRcIitMZShlKTtsJiYobFthXSYmbFthXSguLi50KSxsLmVtaXQoZSwuLi50KSl9b25QYXJlbnRDaGVjayhlKXt0aGlzLmlzRGlzYWJsZWR8fHRoaXMuc2V0Q2hlY2tTdGF0ZShlKX1vbkNoaWxkQ2hlY2soKXtjb25zdHtjaGlsZHJlbjplfT10aGlzLHQ9ZS5maWx0ZXIoKGU9PiFlLmlzRGlzYWJsZWQpKSxsPSEhdC5sZW5ndGgmJnQuZXZlcnkoKGU9PmUuY2hlY2tlZCkpO3RoaXMuc2V0Q2hlY2tTdGF0ZShsKX1zZXRDaGVja1N0YXRlKGUpe2NvbnN0IHQ9dGhpcy5jaGlsZHJlbi5sZW5ndGgsbD10aGlzLmNoaWxkcmVuLnJlZHVjZSgoKGUsdCk9PmUrKHQuY2hlY2tlZD8xOnQuaW5kZXRlcm1pbmF0ZT8uNTowKSksMCk7dGhpcy5jaGVja2VkPWUsdGhpcy5pbmRldGVybWluYXRlPWwhPT10JiZsPjB9ZG9DaGVjayhlKXtpZih0aGlzLmNoZWNrZWQ9PT1lKXJldHVybjtjb25zdHtjaGVja1N0cmljdGx5OnQsbXVsdGlwbGU6bH09dGhpcy5jb25maWc7dHx8IWw/dGhpcy5jaGVja2VkPWU6KHRoaXMuYnJvYWRjYXN0KFwiY2hlY2tcIixlKSx0aGlzLnNldENoZWNrU3RhdGUoZSksdGhpcy5lbWl0KFwiY2hlY2tcIikpfX1jb25zdCBjbj0oZSx0KT0+ZS5yZWR1Y2UoKChlLGwpPT4obC5pc0xlYWY/ZS5wdXNoKGwpOighdCYmZS5wdXNoKGwpLGU9ZS5jb25jYXQoY24obC5jaGlsZHJlbix0KSkpLGUpKSxbXSk7Y2xhc3MgcG57Y29uc3RydWN0b3IoZSx0KXt0aGlzLmNvbmZpZz10O2NvbnN0IGw9KGV8fFtdKS5tYXAoKGU9Pm5ldyBkbihlLHRoaXMuY29uZmlnKSkpO3RoaXMubm9kZXM9bCx0aGlzLmFsbE5vZGVzPWNuKGwsITEpLHRoaXMubGVhZk5vZGVzPWNuKGwsITApfWdldE5vZGVzKCl7cmV0dXJuIHRoaXMubm9kZXN9Z2V0RmxhdHRlZE5vZGVzKGUpe3JldHVybiBlP3RoaXMubGVhZk5vZGVzOnRoaXMuYWxsTm9kZXN9YXBwZW5kTm9kZShlLHQpe2NvbnN0IGw9dD90LmFwcGVuZENoaWxkKGUpOm5ldyBkbihlLHRoaXMuY29uZmlnKTt0fHx0aGlzLm5vZGVzLnB1c2gobCksdGhpcy5hbGxOb2Rlcy5wdXNoKGwpLGwuaXNMZWFmJiZ0aGlzLmxlYWZOb2Rlcy5wdXNoKGwpfWFwcGVuZE5vZGVzKGUsdCl7ZS5mb3JFYWNoKChlPT50aGlzLmFwcGVuZE5vZGUoZSx0KSkpfWdldE5vZGVCeVZhbHVlKGUsdD0hMSl7aWYoIWUmJjAhPT1lKXJldHVybiBudWxsO3JldHVybiB0aGlzLmdldEZsYXR0ZWROb2Rlcyh0KS5maWx0ZXIoKHQ9PnQudmFsdWU9PT1lfHxwZSh0LnBhdGhWYWx1ZXMsZSkpKVswXXx8bnVsbH1nZXRTYW1lTm9kZShlKXtpZighZSlyZXR1cm4gbnVsbDtyZXR1cm4gdGhpcy5nZXRGbGF0dGVkTm9kZXMoITEpLmZpbHRlcigoKHt2YWx1ZTp0LGxldmVsOmx9KT0+ZS52YWx1ZT09PXQmJmUubGV2ZWw9PT1sKSlbMF18fG51bGx9fWZ1bmN0aW9uIGhuKGUsdCl7aWYoemUpcmV0dXJuO2lmKCF0KXJldHVybiB2b2lkKGUuc2Nyb2xsVG9wPTApO2NvbnN0IGw9W107bGV0IGE9dC5vZmZzZXRQYXJlbnQ7Zm9yKDtudWxsIT09YSYmZSE9PWEmJmUuY29udGFpbnMoYSk7KWwucHVzaChhKSxhPWEub2Zmc2V0UGFyZW50O2NvbnN0IG49dC5vZmZzZXRUb3ArbC5yZWR1Y2UoKChlLHQpPT5lK3Qub2Zmc2V0VG9wKSwwKSxvPW4rdC5vZmZzZXRIZWlnaHQsaT1lLnNjcm9sbFRvcCxyPWkrZS5jbGllbnRIZWlnaHQ7bjxpP2Uuc2Nyb2xsVG9wPW46bz5yJiYoZS5zY3JvbGxUb3A9by1lLmNsaWVudEhlaWdodCl9Y29uc3Qgdm49e21vZGVsVmFsdWU6W051bWJlcixTdHJpbmcsQXJyYXldLG9wdGlvbnM6e3R5cGU6QXJyYXksZGVmYXVsdDooKT0+W119LHByb3BzOnt0eXBlOk9iamVjdCxkZWZhdWx0OigpPT4oe30pfX0sbW49e2V4cGFuZFRyaWdnZXI6WmEuQ0xJQ0ssbXVsdGlwbGU6ITEsY2hlY2tTdHJpY3RseTohMSxlbWl0UGF0aDohMCxsYXp5OiExLGxhenlMb2FkOlNlLHZhbHVlOlwidmFsdWVcIixsYWJlbDpcImxhYmVsXCIsY2hpbGRyZW46XCJjaGlsZHJlblwiLGxlYWY6XCJsZWFmXCIsZGlzYWJsZWQ6XCJkaXNhYmxlZFwiLGhvdmVyVGhyZXNob2xkOjUwMH0sZm49ZT0+IWUuZ2V0QXR0cmlidXRlKFwiYXJpYS1vd25zXCIpLGduPWU9PntpZighZSlyZXR1cm4gMDtjb25zdCB0PWUuaWQuc3BsaXQoXCItXCIpO3JldHVybiBOdW1iZXIodFt0Lmxlbmd0aC0yXSl9LGJuPWU9PntlJiYoZS5mb2N1cygpLCFmbihlKSYmZS5jbGljaygpKX07dmFyIHluPWUoe25hbWU6XCJFbENhc2NhZGVyUGFuZWxcIixjb21wb25lbnRzOntFbENhc2NhZGVyTWVudTpvbn0scHJvcHM6T2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LHZuKSx7Ym9yZGVyOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMH0scmVuZGVyTGFiZWw6RnVuY3Rpb259KSxlbWl0czpbUHQsXCJjaGFuZ2VcIixcImNsb3NlXCIsXCJleHBhbmQtY2hhbmdlXCJdLHNldHVwKGUse2VtaXQ6YSxzbG90czpufSl7bGV0IG89ITAsaT0hMTtjb25zdCByPShlPT5sKCgoKT0+T2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LG1uKSxlLnByb3BzKSkpKShlKSxzPXQobnVsbCksdT10KFtdKSxkPXQobnVsbCksYz10KFtdKSxwPXQobnVsbCksaD10KFtdKSx2PWwoKCgpPT5yLnZhbHVlLmV4cGFuZFRyaWdnZXI9PT1aYS5IT1ZFUikpLG09bCgoKCk9PmUucmVuZGVyTGFiZWx8fG4uZGVmYXVsdCkpLGc9KGUsdCk9Pntjb25zdCBsPXIudmFsdWU7KGU9ZXx8bmV3IGRuKHt9LGwsbnVsbCwhMCkpLmxvYWRpbmc9ITA7bC5sYXp5TG9hZChlLChsPT57Y29uc3QgYT1lLnJvb3Q/bnVsbDplO2wmJnMudmFsdWUuYXBwZW5kTm9kZXMobCxhKSxlLmxvYWRpbmc9ITEsZS5sb2FkZWQ9ITAsdCYmdChsKX0pKX0sYj0oZSx0KT0+e3ZhciBsO2NvbnN0e2xldmVsOm59PWUsbz1jLnZhbHVlLnNsaWNlKDAsbik7bGV0IGk7ZS5pc0xlYWY/aT1lLnBhdGhOb2Rlc1tuLTJdOihpPWUsby5wdXNoKGUuY2hpbGRyZW4pKSwobnVsbD09PShsPXAudmFsdWUpfHx2b2lkIDA9PT1sP3ZvaWQgMDpsLnVpZCkhPT0obnVsbD09aT92b2lkIDA6aS51aWQpJiYocC52YWx1ZT1lLGMudmFsdWU9bywhdCYmYShcImV4cGFuZC1jaGFuZ2VcIiwobnVsbD09ZT92b2lkIDA6ZS5wYXRoVmFsdWVzKXx8W10pKX0sQz0oZSx0LGw9ITApPT57Y29uc3R7Y2hlY2tTdHJpY3RseTpuLG11bHRpcGxlOm99PXIudmFsdWUscz1oLnZhbHVlWzBdO2k9ITAsIW8mJihudWxsPT1zfHxzLmRvQ2hlY2soITEpKSxlLmRvQ2hlY2sodCksRSgpLGwmJiFvJiYhbiYmYShcImNsb3NlXCIpfSx3PWU9PnMudmFsdWUuZ2V0RmxhdHRlZE5vZGVzKGUpLFM9ZT0+dyhlKS5maWx0ZXIoKGU9PmUuY2hlY2tlZCkpLEU9KCk9Pntjb25zdHtjaGVja1N0cmljdGx5OmUsbXVsdGlwbGU6dH09ci52YWx1ZSxsPSgoZSx0KT0+e2NvbnN0IGw9dC5zbGljZSgwKSxhPWwubWFwKChlPT5lLnVpZCkpLG49ZS5yZWR1Y2UoKChlLHQpPT57Y29uc3Qgbj1hLmluZGV4T2YodC51aWQpO3JldHVybiBuPi0xJiYoZS5wdXNoKHQpLGwuc3BsaWNlKG4sMSksYS5zcGxpY2UobiwxKSksZX0pLFtdKTtyZXR1cm4gbi5wdXNoKC4uLmwpLG59KShoLnZhbHVlLFMoIWUpKSxhPWwubWFwKChlPT5lLnZhbHVlQnlPcHRpb24pKTtoLnZhbHVlPWwsZC52YWx1ZT10P2E6YVswXXx8bnVsbH0sTT0odD0hMSxsPSExKT0+e2NvbnN0e21vZGVsVmFsdWU6YX09ZSx7bGF6eTpuLG11bHRpcGxlOnUsY2hlY2tTdHJpY3RseTpjfT1yLnZhbHVlLHA9IWM7aWYobyYmIWkmJihsfHwhcGUoYSxkLnZhbHVlKSkpaWYobiYmIXQpe2NvbnN0IGU9UWUoWGUoSGUoYSkpKS5tYXAoKGU9PnMudmFsdWUuZ2V0Tm9kZUJ5VmFsdWUoZSkpKS5maWx0ZXIoKGU9PiEhZSYmIWUubG9hZGVkJiYhZS5sb2FkaW5nKSk7ZS5sZW5ndGg/ZS5mb3JFYWNoKChlPT57ZyhlLCgoKT0+TSghMSxsKSkpfSkpOk0oITAsbCl9ZWxzZXtjb25zdCBlPVFlKCh1P0hlKGEpOlthXSkubWFwKChlPT5zLnZhbHVlLmdldE5vZGVCeVZhbHVlKGUscCkpKSk7VChlLCExKSxkLnZhbHVlPWF9fSxUPShlLHQ9ITApPT57Y29uc3R7Y2hlY2tTdHJpY3RseTpsfT1yLnZhbHVlLGE9aC52YWx1ZSxuPWUuZmlsdGVyKChlPT4hIWUmJihsfHxlLmlzTGVhZikpKSxvPXMudmFsdWUuZ2V0U2FtZU5vZGUocC52YWx1ZSksaT10JiZvfHxuWzBdO2k/aS5wYXRoTm9kZXMuZm9yRWFjaCgoZT0+YihlLCEwKSkpOnAudmFsdWU9bnVsbCxhLmZvckVhY2goKGU9PmUuZG9DaGVjayghMSkpKSxuLmZvckVhY2goKGU9PmUuZG9DaGVjayghMCkpKSxoLnZhbHVlPW4sayhOKX0sTj0oKT0+e3plfHx1LnZhbHVlLmZvckVhY2goKGU9Pntjb25zdCB0PW51bGw9PWU/dm9pZCAwOmUuJGVsO2lmKHQpe2huKHQucXVlcnlTZWxlY3RvcihcIi5lbC1zY3JvbGxiYXJfX3dyYXBcIiksdC5xdWVyeVNlbGVjdG9yKFwiLmVsLWNhc2NhZGVyLW5vZGUuaXMtYWN0aXZlXCIpfHx0LnF1ZXJ5U2VsZWN0b3IoXCIuZWwtY2FzY2FkZXItbm9kZS5pbi1hY3RpdmUtcGF0aFwiKSl9fSkpfTtyZXR1cm4geChKYSxmKHtjb25maWc6cixleHBhbmRpbmdOb2RlOnAsY2hlY2tlZE5vZGVzOmgsaXNIb3Zlck1lbnU6dixyZW5kZXJMYWJlbEZuOm0sbGF6eUxvYWQ6ZyxleHBhbmROb2RlOmIsaGFuZGxlQ2hlY2tDaGFuZ2U6Q30pKSx5KFtyLCgpPT5lLm9wdGlvbnNdLCgoKT0+e2NvbnN0e29wdGlvbnM6dH09ZSxsPXIudmFsdWU7aT0hMSxzLnZhbHVlPW5ldyBwbih0LGwpLGMudmFsdWU9W3MudmFsdWUuZ2V0Tm9kZXMoKV0sbC5sYXp5JiZHZShlLm9wdGlvbnMpPyhvPSExLGcobnVsbCwoKCk9PntvPSEwLE0oITEsITApfSkpKTpNKCExLCEwKX0pLHtkZWVwOiEwLGltbWVkaWF0ZTohMH0pLHkoKCgpPT5lLm1vZGVsVmFsdWUpLCgoKT0+e2k9ITEsTSgpfSkpLHkoZCwodD0+e3BlKHQsZS5tb2RlbFZhbHVlKXx8KGEoUHQsdCksYShcImNoYW5nZVwiLHQpKX0pKSxLKCgoKT0+dS52YWx1ZT1bXSkpLF8oKCgpPT4hR2UoZS5tb2RlbFZhbHVlKSYmTSgpKSkse21lbnVMaXN0OnUsbWVudXM6YyxjaGVja2VkTm9kZXM6aCxoYW5kbGVLZXlEb3duOmU9Pntjb25zdCB0PWUudGFyZ2V0LHtjb2RlOmx9PWU7c3dpdGNoKGwpe2Nhc2UgZnQudXA6Y2FzZSBmdC5kb3duOmNvbnN0IGU9bD09PWZ0LnVwPy0xOjE7Ym4oKChlLHQpPT57Y29uc3R7cGFyZW50Tm9kZTpsfT1lO2lmKCFsKXJldHVybiBudWxsO2NvbnN0IGE9bC5xdWVyeVNlbGVjdG9yQWxsKCcuZWwtY2FzY2FkZXItbm9kZVt0YWJpbmRleD1cIi0xXCJdJyk7cmV0dXJuIGFbQXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbChhLGUpK3RdfHxudWxsfSkodCxlKSk7YnJlYWs7Y2FzZSBmdC5sZWZ0OmNvbnN0IG49dS52YWx1ZVtnbih0KS0xXSxvPW51bGw9PW4/dm9pZCAwOm4uJGVsLnF1ZXJ5U2VsZWN0b3IoJy5lbC1jYXNjYWRlci1ub2RlW2FyaWEtZXhwYW5kZWQ9XCJ0cnVlXCJdJyk7Ym4obyk7YnJlYWs7Y2FzZSBmdC5yaWdodDpjb25zdCBpPXUudmFsdWVbZ24odCkrMV0scj1udWxsPT1pP3ZvaWQgMDppLiRlbC5xdWVyeVNlbGVjdG9yKCcuZWwtY2FzY2FkZXItbm9kZVt0YWJpbmRleD1cIi0xXCJdJyk7Ym4ocik7YnJlYWs7Y2FzZSBmdC5lbnRlcjooZT0+e2lmKCFlKXJldHVybjtjb25zdCB0PWUucXVlcnlTZWxlY3RvcihcImlucHV0XCIpO3Q/dC5jbGljaygpOmZuKGUpJiZlLmNsaWNrKCl9KSh0KTticmVhaztjYXNlIGZ0LmVzYzpjYXNlIGZ0LnRhYjphKFwiY2xvc2VcIil9fSxoYW5kbGVDaGVja0NoYW5nZTpDLGdldEZsYXR0ZWROb2Rlczp3LGdldENoZWNrZWROb2RlczpTLGNsZWFyQ2hlY2tlZE5vZGVzOigpPT57aC52YWx1ZS5mb3JFYWNoKChlPT5lLmRvQ2hlY2soITEpKSksRSgpfSxjYWxjdWxhdGVDaGVja2VkVmFsdWU6RSxzY3JvbGxUb0V4cGFuZGluZ05vZGU6Tn19fSk7eW4ucmVuZGVyPWZ1bmN0aW9uKGUsdCxsLG8saSxyKXtjb25zdCBzPVAoXCJlbC1jYXNjYWRlci1tZW51XCIpO3JldHVybiBhKCksbihcImRpdlwiLHtjbGFzczpbXCJlbC1jYXNjYWRlci1wYW5lbFwiLGUuYm9yZGVyJiZcImlzLWJvcmRlcmVkXCJdLG9uS2V5ZG93bjp0WzFdfHwodFsxXT0oLi4udCk9PmUuaGFuZGxlS2V5RG93biguLi50KSl9LFsoYSghMCksbihFLG51bGwsSChlLm1lbnVzLCgodCxsKT0+KGEoKSxuKHMse2tleTpsLHJlZjp0PT5lLm1lbnVMaXN0W2xdPXQsaW5kZXg6bCxub2Rlczp0fSxudWxsLDgsW1wiaW5kZXhcIixcIm5vZGVzXCJdKSkpKSwxMjgpKV0sMzQpfSx5bi5fX2ZpbGU9XCJwYWNrYWdlcy9jYXNjYWRlci1wYW5lbC9zcmMvaW5kZXgudnVlXCIseW4uaW5zdGFsbD1lPT57ZS5jb21wb25lbnQoeW4ubmFtZSx5bil9O3ZhciBrbj1lKHtuYW1lOlwiRWxUYWdcIixwcm9wczp7Y2xvc2FibGU6Qm9vbGVhbix0eXBlOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiXCJ9LGhpdDpCb29sZWFuLGRpc2FibGVUcmFuc2l0aW9uczpCb29sZWFuLGNvbG9yOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiXCJ9LHNpemU6e3R5cGU6U3RyaW5nLHZhbGlkYXRvcjpBdH0sZWZmZWN0Ont0eXBlOlN0cmluZyxkZWZhdWx0OlwibGlnaHRcIix2YWxpZGF0b3I6ZT0+LTEhPT1bXCJkYXJrXCIsXCJsaWdodFwiLFwicGxhaW5cIl0uaW5kZXhPZihlKX19LGVtaXRzOltcImNsb3NlXCIsXCJjbGlja1wiXSxzZXR1cChlLHQpe2NvbnN0IGE9cWUoKSxuPWwoKCgpPT5lLnNpemV8fGEuc2l6ZSkpLG89bCgoKCk9Pntjb25zdHt0eXBlOnQsaGl0OmwsZWZmZWN0OmF9PWU7cmV0dXJuW1wiZWwtdGFnXCIsdD9cImVsLXRhZy0tXCIrdDpcIlwiLG4udmFsdWU/XCJlbC10YWctLVwiK24udmFsdWU6XCJcIixhP1wiZWwtdGFnLS1cIithOlwiXCIsbCYmXCJpcy1oaXRcIl19KSk7cmV0dXJue3RhZ1NpemU6bixjbGFzc2VzOm8saGFuZGxlQ2xvc2U6ZT0+e2Uuc3RvcFByb3BhZ2F0aW9uKCksdC5lbWl0KFwiY2xvc2VcIixlKX0saGFuZGxlQ2xpY2s6ZT0+e3QuZW1pdChcImNsaWNrXCIsZSl9fX19KTtrbi5yZW5kZXI9ZnVuY3Rpb24oZSx0LGwscixjLHApe3JldHVybiBlLmRpc2FibGVUcmFuc2l0aW9ucz8oYSgpLG4obyx7a2V5OjEsbmFtZTpcImVsLXpvb20taW4tY2VudGVyXCJ9LHtkZWZhdWx0OmkoKCgpPT5bcyhcInNwYW5cIix7Y2xhc3M6ZS5jbGFzc2VzLHN0eWxlOntiYWNrZ3JvdW5kQ29sb3I6ZS5jb2xvcn0sb25DbGljazp0WzRdfHwodFs0XT0oLi4udCk9PmUuaGFuZGxlQ2xpY2soLi4udCkpfSxbZChlLiRzbG90cyxcImRlZmF1bHRcIiksZS5jbG9zYWJsZT8oYSgpLG4oXCJpXCIse2tleTowLGNsYXNzOlwiZWwtdGFnX19jbG9zZSBlbC1pY29uLWNsb3NlXCIsb25DbGljazp0WzNdfHwodFszXT0oLi4udCk9PmUuaGFuZGxlQ2xvc2UoLi4udCkpfSkpOnUoXCJ2LWlmXCIsITApXSw2KV0pKSxfOjN9KSk6KGEoKSxuKFwic3BhblwiLHtrZXk6MCxjbGFzczplLmNsYXNzZXMsc3R5bGU6e2JhY2tncm91bmRDb2xvcjplLmNvbG9yfSxvbkNsaWNrOnRbMl18fCh0WzJdPSguLi50KT0+ZS5oYW5kbGVDbGljayguLi50KSl9LFtkKGUuJHNsb3RzLFwiZGVmYXVsdFwiKSxlLmNsb3NhYmxlPyhhKCksbihcImlcIix7a2V5OjAsY2xhc3M6XCJlbC10YWdfX2Nsb3NlIGVsLWljb24tY2xvc2VcIixvbkNsaWNrOnRbMV18fCh0WzFdPSguLi50KT0+ZS5oYW5kbGVDbG9zZSguLi50KSl9KSk6dShcInYtaWZcIiwhMCldLDYpKX0sa24uX19maWxlPVwicGFja2FnZXMvdGFnL3NyYy9pbmRleC52dWVcIixrbi5pbnN0YWxsPWU9PntlLmNvbXBvbmVudChrbi5uYW1lLGtuKX07Y29uc3QgQ249e21lZGl1bTozNixzbWFsbDozMixtaW5pOjI4fSx4bj17bW9kaWZpZXJzOlt7bmFtZTpcImFycm93UG9zaXRpb25cIixlbmFibGVkOiEwLHBoYXNlOlwibWFpblwiLGZuOih7c3RhdGU6ZX0pPT57Y29uc3R7bW9kaWZpZXJzRGF0YTp0LGVsZW1lbnRzOmx9PWUse3JlZmVyZW5jZTphLGFycm93Om59PWw7dC5hcnJvdy54PXQuYXJyb3cueC0oYS5jbGllbnRXaWR0aC1uLmNsaWVudFdpZHRoKS8yKzM1fSxyZXF1aXJlczpbXCJhcnJvd1wiXX1dfTt2YXIgd249ZSh7bmFtZTpcIkVsQ2FzY2FkZXJcIixjb21wb25lbnRzOntFbENhc2NhZGVyUGFuZWw6eW4sRWxJbnB1dDpXdCxFbFBvcHBlcjpTbCxFbFNjcm9sbGJhcjpubCxFbFRhZzprbn0sZGlyZWN0aXZlczp7Q2xpY2tvdXRzaWRlOk10fSxwcm9wczpPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sdm4pLHtzaXplOnt0eXBlOlN0cmluZyx2YWxpZGF0b3I6QXR9LHBsYWNlaG9sZGVyOnt0eXBlOlN0cmluZyxkZWZhdWx0OigpPT5xbChcImVsLmNhc2NhZGVyLnBsYWNlaG9sZGVyXCIpfSxkaXNhYmxlZDpCb29sZWFuLGNsZWFyYWJsZTpCb29sZWFuLGZpbHRlcmFibGU6Qm9vbGVhbixmaWx0ZXJNZXRob2Q6e3R5cGU6RnVuY3Rpb24sZGVmYXVsdDooZSx0KT0+ZS50ZXh0LmluY2x1ZGVzKHQpfSxzZXBhcmF0b3I6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCIgLyBcIn0sc2hvd0FsbExldmVsczp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITB9LGNvbGxhcHNlVGFnczpCb29sZWFuLGRlYm91bmNlOnt0eXBlOk51bWJlcixkZWZhdWx0OjMwMH0sYmVmb3JlRmlsdGVyOnt0eXBlOkZ1bmN0aW9uLGRlZmF1bHQ6KCk9PiEwfSxwb3BwZXJDbGFzczp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIlwifX0pLGVtaXRzOltQdCxcImNoYW5nZVwiLFwiZm9jdXNcIixcImJsdXJcIixcInZpc2libGUtY2hhbmdlXCIsXCJleHBhbmQtY2hhbmdlXCIsXCJyZW1vdmUtdGFnXCJdLHNldHVwKGUse2VtaXQ6YX0pe2xldCBuPTAsbz0wO2NvbnN0IGk9cWUoKSxyPXcoXCJlbEZvcm1cIix7fSkscz13KFwiZWxGb3JtSXRlbVwiLHt9KSx1PXQobnVsbCksZD10KG51bGwpLGM9dChudWxsKSxwPXQobnVsbCksaD10KG51bGwpLHY9dCghMSksbT10KCExKSxmPXQoITEpLGc9dChcIlwiKSxiPXQoXCJcIiksQz10KFtdKSx4PXQoW10pLFM9bCgoKCk9PmUuZGlzYWJsZWR8fHIuZGlzYWJsZWQpKSxFPWwoKCgpPT5lLnNpemV8fHMuc2l6ZXx8aS5zaXplKSksTT1sKCgoKT0+W1wic21hbGxcIixcIm1pbmlcIl0uaW5jbHVkZXMoRS52YWx1ZSk/XCJtaW5pXCI6XCJzbWFsbFwiKSksVD1sKCgoKT0+ISFlLnByb3BzLm11bHRpcGxlKSksTj1sKCgoKT0+IWUuZmlsdGVyYWJsZXx8VC52YWx1ZSkpLEQ9bCgoKCk9PlQudmFsdWU/Yi52YWx1ZTpnLnZhbHVlKSksUD1sKCgoKT0+e3ZhciBlO3JldHVybihudWxsPT09KGU9cC52YWx1ZSl8fHZvaWQgMD09PWU/dm9pZCAwOmUuY2hlY2tlZE5vZGVzKXx8W119KSksVj1sKCgoKT0+ISghZS5jbGVhcmFibGV8fFMudmFsdWV8fGYudmFsdWV8fCFtLnZhbHVlKSYmISFQLnZhbHVlLmxlbmd0aCkpLEk9bCgoKCk9Pntjb25zdHtzaG93QWxsTGV2ZWxzOnQsc2VwYXJhdG9yOmx9PWUsYT1QLnZhbHVlO3JldHVybiBhLmxlbmd0aD9ULnZhbHVlP1wiIFwiOmFbMF0uY2FsY1RleHQodCxsKTpcIlwifSkpLEE9bCh7Z2V0OigpPT5lLm1vZGVsVmFsdWUsc2V0KGUpe3ZhciB0O2EoUHQsZSksYShcImNoYW5nZVwiLGUpLG51bGw9PT0odD1zLmZvcm1JdGVtTWl0dCl8fHZvaWQgMD09PXR8fHQuZW1pdChcImVsLmZvcm0uY2hhbmdlXCIsW2VdKX19KSxCPXQ9PntpZighUy52YWx1ZSYmKHQ9bnVsbCE9dD90OiF2LnZhbHVlKSE9PXYudmFsdWUpe2lmKHYudmFsdWU9dCxkLnZhbHVlLmlucHV0LnNldEF0dHJpYnV0ZShcImFyaWEtZXhwYW5kZWRcIix0KSx0KUwoKSxrKHAudmFsdWUuc2Nyb2xsVG9FeHBhbmRpbmdOb2RlKTtlbHNlIGlmKGUuZmlsdGVyYWJsZSl7Y29uc3R7dmFsdWU6ZX09STtnLnZhbHVlPWUsYi52YWx1ZT1lfWEoXCJ2aXNpYmxlLWNoYW5nZVwiLHQpfX0sTD0oKT0+e2sodS52YWx1ZS51cGRhdGUpfSx6PSgpPT57Zi52YWx1ZT0hMX0sRj10PT57Y29uc3R7c2hvd0FsbExldmVsczpsLHNlcGFyYXRvcjphfT1lO3JldHVybntub2RlOnQsa2V5OnQudWlkLHRleHQ6dC5jYWxjVGV4dChsLGEpLGhpdFN0YXRlOiExLGNsb3NhYmxlOiFTLnZhbHVlJiYhdC5pc0Rpc2FibGVkfX0sJD1lPT57Y29uc3R7bm9kZTp0fT1lO3QuZG9DaGVjayghMSkscC52YWx1ZS5jYWxjdWxhdGVDaGVja2VkVmFsdWUoKSxhKFwicmVtb3ZlLXRhZ1wiLHQudmFsdWVCeU9wdGlvbil9LFI9KCk9Pntjb25zdHtmaWx0ZXJNZXRob2Q6dCxzaG93QWxsTGV2ZWxzOmwsc2VwYXJhdG9yOmF9PWUsbj1wLnZhbHVlLmdldEZsYXR0ZWROb2RlcyghZS5wcm9wcy5jaGVja1N0cmljdGx5KS5maWx0ZXIoKGU9PiFlLmlzRGlzYWJsZWQmJihlLmNhbGNUZXh0KGwsYSksdChlLEQudmFsdWUpKSkpO1QudmFsdWUmJkMudmFsdWUuZm9yRWFjaCgoZT0+e2UuaGl0U3RhdGU9ITF9KSksZi52YWx1ZT0hMCx4LnZhbHVlPW4sTCgpfSxIPSgpPT57dmFyIGU7bGV0IHQ9bnVsbDt0PWYudmFsdWUmJmgudmFsdWU/aC52YWx1ZS4kZWwucXVlcnlTZWxlY3RvcihcIi5lbC1jYXNjYWRlcl9fc3VnZ2VzdGlvbi1pdGVtXCIpOm51bGw9PT0oZT1wLnZhbHVlKXx8dm9pZCAwPT09ZT92b2lkIDA6ZS4kZWwucXVlcnlTZWxlY3RvcignLmVsLWNhc2NhZGVyLW5vZGVbdGFiaW5kZXg9XCItMVwiXScpLHQmJih0LmZvY3VzKCksIWYudmFsdWUmJnQuY2xpY2soKSl9LFc9KCk9Pnt2YXIgZTtjb25zdCB0PWQudmFsdWUuaW5wdXQsbD1jLnZhbHVlLGE9bnVsbD09PShlPWgudmFsdWUpfHx2b2lkIDA9PT1lP3ZvaWQgMDplLiRlbDtpZighemUmJnQpe2lmKGEpe2EucXVlcnlTZWxlY3RvcihcIi5lbC1jYXNjYWRlcl9fc3VnZ2VzdGlvbi1saXN0XCIpLnN0eWxlLm1pbldpZHRoPXQub2Zmc2V0V2lkdGgrXCJweFwifWlmKGwpe2NvbnN0e29mZnNldEhlaWdodDplfT1sLGE9TWF0aC5tYXgoZSs2LG4pK1wicHhcIjt0LnN0eWxlLmhlaWdodD1hLEwoKX19fSxqPWxlKCgoKT0+e2NvbnN0e3ZhbHVlOnR9PUQ7aWYoIXQpcmV0dXJuO2NvbnN0IGw9ZS5iZWZvcmVGaWx0ZXIodCk7dmFyIGE7RGUoYT1sKSYmVGUoYS50aGVuKSYmVGUoYS5jYXRjaCk/bC50aGVuKFIpOiExIT09bD9SKCk6eigpfSksZS5kZWJvdW5jZSk7cmV0dXJuIHkoZixMKSx5KFtQLFNdLCgoKT0+e2lmKCFULnZhbHVlKXJldHVybjtjb25zdCB0PVAudmFsdWUsbD1bXTtpZih0Lmxlbmd0aCl7Y29uc3RbYSwuLi5uXT10LG89bi5sZW5ndGg7bC5wdXNoKEYoYSkpLG8mJihlLmNvbGxhcHNlVGFncz9sLnB1c2goe2tleTotMSx0ZXh0OlwiKyBcIitvLGNsb3NhYmxlOiExfSk6bi5mb3JFYWNoKChlPT5sLnB1c2goRihlKSkpKSl9Qy52YWx1ZT1sfSkpLHkoQywoKCk9PmsoVykpKSx5KEksKGU9PmcudmFsdWU9ZSkse2ltbWVkaWF0ZTohMH0pLF8oKCgpPT57Y29uc3QgZT1kLnZhbHVlLiRlbDtuPShudWxsPT1lP3ZvaWQgMDplLm9mZnNldEhlaWdodCl8fENuW0UudmFsdWVdfHw0MCxKdChlLFcpfSkpLE8oKCgpPT57ZWwoZC52YWx1ZS4kZWwsVyl9KSkse3BvcHBlck9wdGlvbnM6eG4scG9wcGVyOnUsaW5wdXQ6ZCx0YWdXcmFwcGVyOmMscGFuZWw6cCxzdWdnZXN0aW9uUGFuZWw6aCxwb3BwZXJWaXNpYmxlOnYsaW5wdXRIb3ZlcjptLGZpbHRlcmluZzpmLHByZXNlbnRUZXh0OkksY2hlY2tlZFZhbHVlOkEsaW5wdXRWYWx1ZTpnLHNlYXJjaElucHV0VmFsdWU6YixwcmVzZW50VGFnczpDLHN1Z2dlc3Rpb25zOngsaXNEaXNhYmxlZDpTLHJlYWxTaXplOkUsdGFnU2l6ZTpNLG11bHRpcGxlOlQscmVhZG9ubHk6TixjbGVhckJ0blZpc2libGU6Vix0OnFsLHRvZ2dsZVBvcHBlclZpc2libGU6QixoaWRlU3VnZ2VzdGlvblBhbmVsOnosZGVsZXRlVGFnOiQsZm9jdXNGaXJzdE5vZGU6SCxnZXRDaGVja2VkTm9kZXM6ZT0+cC52YWx1ZS5nZXRDaGVja2VkTm9kZXMoZSksaGFuZGxlRXhwYW5kQ2hhbmdlOmU9PntMKCksYShcImV4cGFuZC1jaGFuZ2VcIixlKX0saGFuZGxlS2V5RG93bjplPT57c3dpdGNoKGUuY29kZSl7Y2FzZSBmdC5lbnRlcjpCKCk7YnJlYWs7Y2FzZSBmdC5kb3duOkIoITApLGsoSCksZXZlbnQucHJldmVudERlZmF1bHQoKTticmVhaztjYXNlIGZ0LmVzYzpjYXNlIGZ0LnRhYjpCKCExKX19LGhhbmRsZUNsZWFyOigpPT57cC52YWx1ZS5jbGVhckNoZWNrZWROb2RlcygpLEIoITEpfSxoYW5kbGVTdWdnZXN0aW9uQ2xpY2s6ZT0+e2NvbnN0e2NoZWNrZWQ6dH09ZTtULnZhbHVlP3AudmFsdWUuaGFuZGxlQ2hlY2tDaGFuZ2UoZSwhdCwhMSk6KCF0JiZwLnZhbHVlLmhhbmRsZUNoZWNrQ2hhbmdlKGUsITAsITEpLEIoITEpKX0saGFuZGxlRGVsZXRlOigpPT57Y29uc3QgZT1DLnZhbHVlLHQ9ZVtlLmxlbmd0aC0xXTtvPWIudmFsdWU/MDpvKzEsdCYmbyYmKHQuaGl0U3RhdGU/JCh0KTp0LmhpdFN0YXRlPSEwKX0saGFuZGxlSW5wdXQ6KGUsdCk9Pnshdi52YWx1ZSYmQighMCksKG51bGw9PXQ/dm9pZCAwOnQuaXNDb21wb3NpbmcpfHwoZT9qKCk6eigpKX19fX0pO2NvbnN0IF9uPXtrZXk6MCxyZWY6XCJ0YWdXcmFwcGVyXCIsY2xhc3M6XCJlbC1jYXNjYWRlcl9fdGFnc1wifSxTbj17a2V5OjAsY2xhc3M6XCJlbC1pY29uLWNoZWNrXCJ9LEVuPXtjbGFzczpcImVsLWNhc2NhZGVyX19lbXB0eS10ZXh0XCJ9O3duLnJlbmRlcj1mdW5jdGlvbihlLHQsbCxvLGMsdil7Y29uc3QgbT1QKFwiZWwtaW5wdXRcIiksZj1QKFwiZWwtdGFnXCIpLGc9UChcImVsLWNhc2NhZGVyLXBhbmVsXCIpLGI9UChcImVsLXNjcm9sbGJhclwiKSx5PVAoXCJlbC1wb3BwZXJcIiksaz1GKFwiY2xpY2tvdXRzaWRlXCIpO3JldHVybiBhKCksbih5LHtyZWY6XCJwb3BwZXJcIix2aXNpYmxlOmUucG9wcGVyVmlzaWJsZSxcIm9uVXBkYXRlOnZpc2libGVcIjp0WzE2XXx8KHRbMTZdPXQ9PmUucG9wcGVyVmlzaWJsZT10KSx0cmlnZ2VyOlwibWFudWFsXCIscGxhY2VtZW50OlwiYm90dG9tLXN0YXJ0XCIsXCJwb3BwZXItY2xhc3NcIjpcImVsLWNhc2NhZGVyX19kcm9wZG93biBcIitlLnBvcHBlckNsYXNzLFwicG9wcGVyLW9wdGlvbnNcIjplLnBvcHBlck9wdGlvbnMsdHJhbnNpdGlvbjpcImVsLXpvb20taW4tdG9wXCIsXCJncHUtYWNjZWxlcmF0aW9uXCI6ITEsZWZmZWN0OlwibGlnaHRcIixwdXJlOlwiXCIsb25BZnRlckxlYXZlOmUuaGlkZVN1Z2dlc3Rpb25QYW5lbH0se3RyaWdnZXI6aSgoKCk9PltyKHMoXCJkaXZcIix7Y2xhc3M6W1wiZWwtY2FzY2FkZXJcIixlLnJlYWxTaXplJiZcImVsLWNhc2NhZGVyLS1cIitlLnJlYWxTaXplLHtcImlzLWRpc2FibGVkXCI6ZS5pc0Rpc2FibGVkfV0sb25DbGljazp0WzEwXXx8KHRbMTBdPSgpPT5lLnRvZ2dsZVBvcHBlclZpc2libGUoIWUucmVhZG9ubHl8fHZvaWQgMCkpLG9uS2V5ZG93bjp0WzExXXx8KHRbMTFdPSguLi50KT0+ZS5oYW5kbGVLZXlEb3duKC4uLnQpKSxvbk1vdXNlZW50ZXI6dFsxMl18fCh0WzEyXT10PT5lLmlucHV0SG92ZXI9ITApLG9uTW91c2VsZWF2ZTp0WzEzXXx8KHRbMTNdPXQ9PmUuaW5wdXRIb3Zlcj0hMSl9LFtzKG0se3JlZjpcImlucHV0XCIsbW9kZWxWYWx1ZTplLmlucHV0VmFsdWUsXCJvblVwZGF0ZTptb2RlbFZhbHVlXCI6dFszXXx8KHRbM109dD0+ZS5pbnB1dFZhbHVlPXQpLG1vZGVsTW9kaWZpZXJzOnt0cmltOiEwfSxwbGFjZWhvbGRlcjplLnBsYWNlaG9sZGVyLHJlYWRvbmx5OmUucmVhZG9ubHksZGlzYWJsZWQ6ZS5pc0Rpc2FibGVkLFwidmFsaWRhdGUtZXZlbnRcIjohMSxzaXplOmUucmVhbFNpemUsY2xhc3M6e1wiaXMtZm9jdXNcIjplLnBvcHBlclZpc2libGV9LG9uRm9jdXM6dFs0XXx8KHRbNF09dD0+ZS4kZW1pdChcImZvY3VzXCIsdCkpLG9uQmx1cjp0WzVdfHwodFs1XT10PT5lLiRlbWl0KFwiYmx1clwiLHQpKSxvbklucHV0OmUuaGFuZGxlSW5wdXR9LHtzdWZmaXg6aSgoKCk9PltlLmNsZWFyQnRuVmlzaWJsZT8oYSgpLG4oXCJpXCIse2tleTpcImNsZWFyXCIsY2xhc3M6XCJlbC1pbnB1dF9faWNvbiBlbC1pY29uLWNpcmNsZS1jbG9zZVwiLG9uQ2xpY2s6dFsxXXx8KHRbMV09VCgoKC4uLnQpPT5lLmhhbmRsZUNsZWFyKC4uLnQpKSxbXCJzdG9wXCJdKSl9KSk6KGEoKSxuKFwiaVwiLHtrZXk6XCJhcnJvdy1kb3duXCIsY2xhc3M6W1wiZWwtaW5wdXRfX2ljb25cIixcImVsLWljb24tYXJyb3ctZG93blwiLGUucG9wcGVyVmlzaWJsZSYmXCJpcy1yZXZlcnNlXCJdLG9uQ2xpY2s6dFsyXXx8KHRbMl09VCgodD0+ZS50b2dnbGVQb3BwZXJWaXNpYmxlKCkpLFtcInN0b3BcIl0pKX0sbnVsbCwyKSldKSksXzoxfSw4LFtcIm1vZGVsVmFsdWVcIixcInBsYWNlaG9sZGVyXCIsXCJyZWFkb25seVwiLFwiZGlzYWJsZWRcIixcInNpemVcIixcImNsYXNzXCIsXCJvbklucHV0XCJdKSxlLm11bHRpcGxlPyhhKCksbihcImRpdlwiLF9uLFsoYSghMCksbihFLG51bGwsSChlLnByZXNlbnRUYWdzLCh0PT4oYSgpLG4oZix7a2V5OnQua2V5LHR5cGU6XCJpbmZvXCIsc2l6ZTplLnRhZ1NpemUsaGl0OnQuaGl0U3RhdGUsY2xvc2FibGU6dC5jbG9zYWJsZSxcImRpc2FibGUtdHJhbnNpdGlvbnNcIjpcIlwiLG9uQ2xvc2U6bD0+ZS5kZWxldGVUYWcodCl9LHtkZWZhdWx0OmkoKCgpPT5bcyhcInNwYW5cIixudWxsLHAodC50ZXh0KSwxKV0pKSxfOjJ9LDEwMzIsW1wic2l6ZVwiLFwiaGl0XCIsXCJjbG9zYWJsZVwiLFwib25DbG9zZVwiXSkpKSksMTI4KSksZS5maWx0ZXJhYmxlJiYhZS5pc0Rpc2FibGVkP3IoKGEoKSxuKFwiaW5wdXRcIix7a2V5OjAsXCJvblVwZGF0ZTptb2RlbFZhbHVlXCI6dFs2XXx8KHRbNl09dD0+ZS5zZWFyY2hJbnB1dFZhbHVlPXQpLHR5cGU6XCJ0ZXh0XCIsY2xhc3M6XCJlbC1jYXNjYWRlcl9fc2VhcmNoLWlucHV0XCIscGxhY2Vob2xkZXI6ZS5wcmVzZW50VGV4dD9cIlwiOmUucGxhY2Vob2xkZXIsb25JbnB1dDp0WzddfHwodFs3XT10PT5lLmhhbmRsZUlucHV0KGUuc2VhcmNoSW5wdXRWYWx1ZSx0KSksb25DbGljazp0WzhdfHwodFs4XT1UKCh0PT5lLnRvZ2dsZVBvcHBlclZpc2libGUoITApKSxbXCJzdG9wXCJdKSksb25LZXlkb3duOnRbOV18fCh0WzldPSQoKCguLi50KT0+ZS5oYW5kbGVEZWxldGUoLi4udCkpLFtcImRlbGV0ZVwiXSkpfSxudWxsLDQwLFtcInBsYWNlaG9sZGVyXCJdKSksW1tZLGUuc2VhcmNoSW5wdXRWYWx1ZSx2b2lkIDAse3RyaW06ITB9XV0pOnUoXCJ2LWlmXCIsITApXSw1MTIpKTp1KFwidi1pZlwiLCEwKV0sMzQpLFtbaywoKT0+ZS50b2dnbGVQb3BwZXJWaXNpYmxlKCExKV1dKV0pKSxkZWZhdWx0OmkoKCgpPT5bcihzKGcse3JlZjpcInBhbmVsXCIsbW9kZWxWYWx1ZTplLmNoZWNrZWRWYWx1ZSxcIm9uVXBkYXRlOm1vZGVsVmFsdWVcIjp0WzE0XXx8KHRbMTRdPXQ9PmUuY2hlY2tlZFZhbHVlPXQpLG9wdGlvbnM6ZS5vcHRpb25zLHByb3BzOmUucHJvcHMsYm9yZGVyOiExLFwicmVuZGVyLWxhYmVsXCI6ZS4kc2xvdHMuZGVmYXVsdCxvbkV4cGFuZENoYW5nZTplLmhhbmRsZUV4cGFuZENoYW5nZSxvbkNsb3NlOnRbMTVdfHwodFsxNV09dD0+ZS50b2dnbGVQb3BwZXJWaXNpYmxlKCExKSl9LG51bGwsOCxbXCJtb2RlbFZhbHVlXCIsXCJvcHRpb25zXCIsXCJwcm9wc1wiLFwicmVuZGVyLWxhYmVsXCIsXCJvbkV4cGFuZENoYW5nZVwiXSksW1toLCFlLmZpbHRlcmluZ11dKSxlLmZpbHRlcmFibGU/cigoYSgpLG4oYix7a2V5OjAscmVmOlwic3VnZ2VzdGlvblBhbmVsXCIsdGFnOlwidWxcIixjbGFzczpcImVsLWNhc2NhZGVyX19zdWdnZXN0aW9uLXBhbmVsXCIsXCJ2aWV3LWNsYXNzXCI6XCJlbC1jYXNjYWRlcl9fc3VnZ2VzdGlvbi1saXN0XCJ9LHtkZWZhdWx0OmkoKCgpPT5bZS5zdWdnZXN0aW9ucy5sZW5ndGg/KGEoITApLG4oRSx7a2V5OjB9LEgoZS5zdWdnZXN0aW9ucywodD0+KGEoKSxuKFwibGlcIix7a2V5OnQudWlkLGNsYXNzOltcImVsLWNhc2NhZGVyX19zdWdnZXN0aW9uLWl0ZW1cIix0LmNoZWNrZWQmJlwiaXMtY2hlY2tlZFwiXSx0YWJpbmRleDotMSxvbkNsaWNrOmw9PmUuaGFuZGxlU3VnZ2VzdGlvbkNsaWNrKHQpfSxbcyhcInNwYW5cIixudWxsLHAodC50ZXh0KSwxKSx0LmNoZWNrZWQ/KGEoKSxuKFwiaVwiLFNuKSk6dShcInYtaWZcIiwhMCldLDEwLFtcIm9uQ2xpY2tcIl0pKSkpLDEyOCkpOmQoZS4kc2xvdHMsXCJlbXB0eVwiLHtrZXk6MX0sKCgpPT5bcyhcImxpXCIsRW4scChlLnQoXCJlbC5jYXNjYWRlci5ub01hdGNoXCIpKSwxKV0pKV0pKSxfOjF9LDUxMikpLFtbaCxlLmZpbHRlcmluZ11dKTp1KFwidi1pZlwiLCEwKV0pKSxfOjF9LDgsW1widmlzaWJsZVwiLFwicG9wcGVyLWNsYXNzXCIsXCJwb3BwZXItb3B0aW9uc1wiLFwib25BZnRlckxlYXZlXCJdKX0sd24uX19maWxlPVwicGFja2FnZXMvY2FzY2FkZXIvc3JjL2luZGV4LnZ1ZVwiLHduLmluc3RhbGw9ZT0+e2UuY29tcG9uZW50KHduLm5hbWUsd24pfTt2YXIgTW49ZSh7bmFtZTpcIkVsQ2hlY2tib3hCdXR0b25cIixwcm9wczp7bW9kZWxWYWx1ZTp7dHlwZTpbQm9vbGVhbixOdW1iZXIsU3RyaW5nXSxkZWZhdWx0OigpPT57fX0sbGFiZWw6e3R5cGU6W0Jvb2xlYW4sTnVtYmVyLFN0cmluZ119LGluZGV0ZXJtaW5hdGU6Qm9vbGVhbixkaXNhYmxlZDpCb29sZWFuLGNoZWNrZWQ6Qm9vbGVhbixuYW1lOnt0eXBlOlN0cmluZyxkZWZhdWx0OnZvaWQgMH0sdHJ1ZUxhYmVsOnt0eXBlOltTdHJpbmcsTnVtYmVyXSxkZWZhdWx0OnZvaWQgMH0sZmFsc2VMYWJlbDp7dHlwZTpbU3RyaW5nLE51bWJlcl0sZGVmYXVsdDp2b2lkIDB9fSxlbWl0czpbUHQsXCJjaGFuZ2VcIl0sc2V0dXAoZSl7Y29uc3R7Zm9jdXM6dCxpc0NoZWNrZWQ6YSxpc0Rpc2FibGVkOm4sc2l6ZTpvLG1vZGVsOmksaGFuZGxlQ2hhbmdlOnJ9PWphKGUpLHtjaGVja2JveEdyb3VwOnN9PVdhKCk7cmV0dXJue2ZvY3VzOnQsaXNDaGVja2VkOmEsaXNEaXNhYmxlZDpuLG1vZGVsOmksaGFuZGxlQ2hhbmdlOnIsYWN0aXZlU3R5bGU6bCgoKCk9Pnt2YXIgZSx0LGwsYSxuLG8saSxyO3JldHVybntiYWNrZ3JvdW5kQ29sb3I6bnVsbCE9PSh0PW51bGw9PT0oZT1udWxsPT1zP3ZvaWQgMDpzLmZpbGwpfHx2b2lkIDA9PT1lP3ZvaWQgMDplLnZhbHVlKSYmdm9pZCAwIT09dD90OlwiXCIsYm9yZGVyQ29sb3I6bnVsbCE9PShhPW51bGw9PT0obD1udWxsPT1zP3ZvaWQgMDpzLmZpbGwpfHx2b2lkIDA9PT1sP3ZvaWQgMDpsLnZhbHVlKSYmdm9pZCAwIT09YT9hOlwiXCIsY29sb3I6bnVsbCE9PShvPW51bGw9PT0obj1udWxsPT1zP3ZvaWQgMDpzLnRleHRDb2xvcil8fHZvaWQgMD09PW4/dm9pZCAwOm4udmFsdWUpJiZ2b2lkIDAhPT1vP286XCJcIixib3hTaGFkb3c6bnVsbCE9PShyPVwiLTFweCAwIDAgMCBcIisobnVsbD09PShpPW51bGw9PXM/dm9pZCAwOnMuZmlsbCl8fHZvaWQgMD09PWk/dm9pZCAwOmkudmFsdWUpKSYmdm9pZCAwIT09cj9yOlwiXCJ9fSkpLHNpemU6b319fSk7TW4ucmVuZGVyPWZ1bmN0aW9uKGUsdCxsLG8saSxzKXtyZXR1cm4gYSgpLG4oXCJsYWJlbFwiLHtjbGFzczpbXCJlbC1jaGVja2JveC1idXR0b25cIixbZS5zaXplP1wiZWwtY2hlY2tib3gtYnV0dG9uLS1cIitlLnNpemU6XCJcIix7XCJpcy1kaXNhYmxlZFwiOmUuaXNEaXNhYmxlZH0se1wiaXMtY2hlY2tlZFwiOmUuaXNDaGVja2VkfSx7XCJpcy1mb2N1c1wiOmUuZm9jdXN9XV0scm9sZTpcImNoZWNrYm94XCIsXCJhcmlhLWNoZWNrZWRcIjplLmlzQ2hlY2tlZCxcImFyaWEtZGlzYWJsZWRcIjplLmlzRGlzYWJsZWR9LFtlLnRydWVMYWJlbHx8ZS5mYWxzZUxhYmVsP3IoKGEoKSxuKFwiaW5wdXRcIix7a2V5OjAsXCJvblVwZGF0ZTptb2RlbFZhbHVlXCI6dFsxXXx8KHRbMV09dD0+ZS5tb2RlbD10KSxjaGVja2VkOmUuaXNDaGVja2VkLGNsYXNzOlwiZWwtY2hlY2tib3gtYnV0dG9uX19vcmlnaW5hbFwiLHR5cGU6XCJjaGVja2JveFwiLG5hbWU6ZS5uYW1lLGRpc2FibGVkOmUuaXNEaXNhYmxlZCxcInRydWUtdmFsdWVcIjplLnRydWVMYWJlbCxcImZhbHNlLXZhbHVlXCI6ZS5mYWxzZUxhYmVsLG9uQ2hhbmdlOnRbMl18fCh0WzJdPSguLi50KT0+ZS5oYW5kbGVDaGFuZ2UoLi4udCkpLG9uRm9jdXM6dFszXXx8KHRbM109dD0+ZS5mb2N1cz0hMCksb25CbHVyOnRbNF18fCh0WzRdPXQ9PmUuZm9jdXM9ITEpfSxudWxsLDQwLFtcImNoZWNrZWRcIixcIm5hbWVcIixcImRpc2FibGVkXCIsXCJ0cnVlLXZhbHVlXCIsXCJmYWxzZS12YWx1ZVwiXSkpLFtbVyxlLm1vZGVsXV0pOnIoKGEoKSxuKFwiaW5wdXRcIix7a2V5OjEsXCJvblVwZGF0ZTptb2RlbFZhbHVlXCI6dFs1XXx8KHRbNV09dD0+ZS5tb2RlbD10KSxjbGFzczpcImVsLWNoZWNrYm94LWJ1dHRvbl9fb3JpZ2luYWxcIix0eXBlOlwiY2hlY2tib3hcIixuYW1lOmUubmFtZSxkaXNhYmxlZDplLmlzRGlzYWJsZWQsdmFsdWU6ZS5sYWJlbCxvbkNoYW5nZTp0WzZdfHwodFs2XT0oLi4udCk9PmUuaGFuZGxlQ2hhbmdlKC4uLnQpKSxvbkZvY3VzOnRbN118fCh0WzddPXQ9PmUuZm9jdXM9ITApLG9uQmx1cjp0WzhdfHwodFs4XT10PT5lLmZvY3VzPSExKX0sbnVsbCw0MCxbXCJuYW1lXCIsXCJkaXNhYmxlZFwiLFwidmFsdWVcIl0pKSxbW1csZS5tb2RlbF1dKSxlLiRzbG90cy5kZWZhdWx0fHxlLmxhYmVsPyhhKCksbihcInNwYW5cIix7a2V5OjIsY2xhc3M6XCJlbC1jaGVja2JveC1idXR0b25fX2lubmVyXCIsc3R5bGU6ZS5pc0NoZWNrZWQ/ZS5hY3RpdmVTdHlsZTpudWxsfSxbZChlLiRzbG90cyxcImRlZmF1bHRcIix7fSwoKCk9PltjKHAoZS5sYWJlbCksMSldKSldLDQpKTp1KFwidi1pZlwiLCEwKV0sMTAsW1wiYXJpYS1jaGVja2VkXCIsXCJhcmlhLWRpc2FibGVkXCJdKX0sTW4uX19maWxlPVwicGFja2FnZXMvY2hlY2tib3gvc3JjL2NoZWNrYm94LWJ1dHRvbi52dWVcIixNbi5pbnN0YWxsPWU9PntlLmNvbXBvbmVudChNbi5uYW1lLE1uKX07dmFyIFRuPWUoe25hbWU6XCJFbENoZWNrYm94R3JvdXBcIixwcm9wczp7bW9kZWxWYWx1ZTp7dHlwZTpbT2JqZWN0LEJvb2xlYW4sQXJyYXldLGRlZmF1bHQ6KCk9Pnt9fSxkaXNhYmxlZDpCb29sZWFuLG1pbjp7dHlwZTpOdW1iZXIsZGVmYXVsdDp2b2lkIDB9LG1heDp7dHlwZTpOdW1iZXIsZGVmYXVsdDp2b2lkIDB9LHNpemU6e3R5cGU6U3RyaW5nLHZhbGlkYXRvcjpBdH0sZmlsbDp7dHlwZTpTdHJpbmcsZGVmYXVsdDp2b2lkIDB9LHRleHRDb2xvcjp7dHlwZTpTdHJpbmcsZGVmYXVsdDp2b2lkIDB9fSxlbWl0czpbUHQsXCJjaGFuZ2VcIl0sc2V0dXAoZSx0KXtjb25zdHtlbEZvcm1JdGVtOmEsZWxGb3JtSXRlbVNpemU6bixFTEVNRU5UOm99PVdhKCksaT1sKCgoKT0+ZS5zaXplfHxuLnZhbHVlfHxvLnNpemUpKSxyPWU9Pnt0LmVtaXQoUHQsZSksaygoKCk9Pnt0LmVtaXQoXCJjaGFuZ2VcIixlKX0pKX0scz1sKHtnZXQ6KCk9PmUubW9kZWxWYWx1ZSxzZXQoZSl7cihlKX19KTt4KFwiQ2hlY2tib3hHcm91cFwiLE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7bmFtZTpcIkVsQ2hlY2tib3hHcm91cFwiLG1vZGVsVmFsdWU6c30sQyhlKSkse2NoZWNrYm94R3JvdXBTaXplOmksY2hhbmdlRXZlbnQ6cn0pKSx5KCgoKT0+ZS5tb2RlbFZhbHVlKSwoZT0+e3ZhciB0O251bGw9PT0odD1hLmZvcm1JdGVtTWl0dCl8fHZvaWQgMD09PXR8fHQuZW1pdChcImVsLmZvcm0uY2hhbmdlXCIsW2VdKX0pKX19KTtjb25zdCBObj17Y2xhc3M6XCJlbC1jaGVja2JveC1ncm91cFwiLHJvbGU6XCJncm91cFwiLFwiYXJpYS1sYWJlbFwiOlwiY2hlY2tib3gtZ3JvdXBcIn07VG4ucmVuZGVyPWZ1bmN0aW9uKGUsdCxsLG8saSxyKXtyZXR1cm4gYSgpLG4oXCJkaXZcIixObixbZChlLiRzbG90cyxcImRlZmF1bHRcIildKX0sVG4uX19maWxlPVwicGFja2FnZXMvY2hlY2tib3gvc3JjL2NoZWNrYm94LWdyb3VwLnZ1ZVwiLFRuLmluc3RhbGw9ZT0+e2UuY29tcG9uZW50KFRuLm5hbWUsVG4pfTtjb25zdCBEbj1lKHtuYW1lOlwiRWxDb2xcIixwcm9wczp7c3Bhbjp7dHlwZTpOdW1iZXIsZGVmYXVsdDoyNH0sb2Zmc2V0Ont0eXBlOk51bWJlcixkZWZhdWx0OjB9LHB1bGw6e3R5cGU6TnVtYmVyLGRlZmF1bHQ6MH0scHVzaDp7dHlwZTpOdW1iZXIsZGVmYXVsdDowfSx4czp7dHlwZTpbTnVtYmVyLE9iamVjdF0sZGVmYXVsdDooKT0+KHt9KX0sc206e3R5cGU6W051bWJlcixPYmplY3RdLGRlZmF1bHQ6KCk9Pih7fSl9LG1kOnt0eXBlOltOdW1iZXIsT2JqZWN0XSxkZWZhdWx0OigpPT4oe30pfSxsZzp7dHlwZTpbTnVtYmVyLE9iamVjdF0sZGVmYXVsdDooKT0+KHt9KX0seGw6e3R5cGU6W051bWJlcixPYmplY3RdLGRlZmF1bHQ6KCk9Pih7fSl9fSxzZXR1cChlLHtzbG90czp0fSl7Y29uc3QgYT13KFwiRWxSb3dcIiwwKSxuPWwoKCgpPT5hP3tkaXNwbGF5OlwiYmxvY2tcIixtaW5IZWlnaHQ6XCIxcHhcIixwYWRkaW5nTGVmdDphLzIrXCJweFwiLHBhZGRpbmdSaWdodDphLzIrXCJweFwifTp7fSkpLG89bCgoKCk9Pntjb25zdCB0PVtdO1tcInNwYW5cIixcIm9mZnNldFwiLFwicHVsbFwiLFwicHVzaFwiXS5mb3JFYWNoKChsPT57Y29uc3QgYT1lW2xdO1wibnVtYmVyXCI9PXR5cGVvZiBhJiZhPj0wJiZ0LnB1c2goXCJzcGFuXCIhPT1sP2BlbC1jb2wtJHtsfS0ke2VbbF19YDpcImVsLWNvbC1cIitlW2xdKX0pKTtyZXR1cm5bXCJ4c1wiLFwic21cIixcIm1kXCIsXCJsZ1wiLFwieGxcIl0uZm9yRWFjaCgobD0+e2lmKFwibnVtYmVyXCI9PXR5cGVvZiBlW2xdKXQucHVzaChgZWwtY29sLSR7bH0tJHtlW2xdfWApO2Vsc2UgaWYoXCJvYmplY3RcIj09dHlwZW9mIGVbbF0pe2NvbnN0IGE9ZVtsXTtPYmplY3Qua2V5cyhhKS5mb3JFYWNoKChlPT57dC5wdXNoKFwic3BhblwiIT09ZT9gZWwtY29sLSR7bH0tJHtlfS0ke2FbZV19YDpgZWwtY29sLSR7bH0tJHthW2VdfWApfSkpfX0pKSx0fSkpO3JldHVybigpPT57dmFyIGU7cmV0dXJuIEQoXCJkaXZcIix7Y2xhc3M6W1wiZWwtY29sXCIsby52YWx1ZV0sc3R5bGU6bi52YWx1ZX0sbnVsbD09PShlPXQuZGVmYXVsdCl8fHZvaWQgMD09PWU/dm9pZCAwOmUuY2FsbCh0KSl9fX0pO0RuLmluc3RhbGw9ZT0+e2UuY29tcG9uZW50KERuLm5hbWUsRG4pfTt2YXIgT249ZSh7bmFtZTpcIkVsQ29sbGFwc2VcIixwcm9wczp7YWNjb3JkaW9uOkJvb2xlYW4sbW9kZWxWYWx1ZTp7dHlwZTpbQXJyYXksU3RyaW5nLE51bWJlcl0sZGVmYXVsdDooKT0+W119fSxlbWl0czpbUHQsXCJjaGFuZ2VcIl0sc2V0dXAoZSx7ZW1pdDpsfSl7Y29uc3QgYT10KFtdLmNvbmNhdChlLm1vZGVsVmFsdWUpKSxuPW5lKCksbz10PT57YS52YWx1ZT1bXS5jb25jYXQodCk7Y29uc3Qgbj1lLmFjY29yZGlvbj9hLnZhbHVlWzBdOmEudmFsdWU7bChQdCxuKSxsKFwiY2hhbmdlXCIsbil9LGk9dD0+e2lmKGUuYWNjb3JkaW9uKW8oIWEudmFsdWVbMF0mJjAhPT1hLnZhbHVlWzBdfHxhLnZhbHVlWzBdIT09dD90OlwiXCIpO2Vsc2V7bGV0IGU9YS52YWx1ZS5zbGljZSgwKTtjb25zdCBsPWUuaW5kZXhPZih0KTtsPi0xP2Uuc3BsaWNlKGwsMSk6ZS5wdXNoKHQpLG8oZSl9fTtyZXR1cm4geSgoKCk9PmUubW9kZWxWYWx1ZSksKCgpPT57YS52YWx1ZT1bXS5jb25jYXQoZS5tb2RlbFZhbHVlKX0pKSxuLm9uKFwiaXRlbS1jbGlja1wiLGkpLE4oKCgpPT57bi5hbGwuY2xlYXIoKX0pKSx4KFwiY29sbGFwc2VcIix7YWN0aXZlTmFtZXM6YSxjb2xsYXBzZU1pdHQ6bn0pLHthY3RpdmVOYW1lczphLHNldEFjdGl2ZU5hbWVzOm8saGFuZGxlSXRlbUNsaWNrOml9fX0pO2NvbnN0IFBuPXtjbGFzczpcImVsLWNvbGxhcHNlXCIscm9sZTpcInRhYmxpc3RcIixcImFyaWEtbXVsdGlzZWxlY3RhYmxlXCI6XCJ0cnVlXCJ9O09uLnJlbmRlcj1mdW5jdGlvbihlLHQsbCxvLGkscil7cmV0dXJuIGEoKSxuKFwiZGl2XCIsUG4sW2QoZS4kc2xvdHMsXCJkZWZhdWx0XCIpXSl9LE9uLl9fZmlsZT1cInBhY2thZ2VzL2NvbGxhcHNlL3NyYy9jb2xsYXBzZS52dWVcIixPbi5pbnN0YWxsPWU9PntlLmNvbXBvbmVudChPbi5uYW1lLE9uKX07dmFyIFZuPWUoe25hbWU6XCJFbENvbGxhcHNlVHJhbnNpdGlvblwiLHNldHVwOigpPT4oe29uOntiZWZvcmVFbnRlcihlKXtvdChlLFwiY29sbGFwc2UtdHJhbnNpdGlvblwiKSxlLmRhdGFzZXR8fChlLmRhdGFzZXQ9e30pLGUuZGF0YXNldC5vbGRQYWRkaW5nVG9wPWUuc3R5bGUucGFkZGluZ1RvcCxlLmRhdGFzZXQub2xkUGFkZGluZ0JvdHRvbT1lLnN0eWxlLnBhZGRpbmdCb3R0b20sZS5zdHlsZS5oZWlnaHQ9XCIwXCIsZS5zdHlsZS5wYWRkaW5nVG9wPTAsZS5zdHlsZS5wYWRkaW5nQm90dG9tPTB9LGVudGVyKGUpe2UuZGF0YXNldC5vbGRPdmVyZmxvdz1lLnN0eWxlLm92ZXJmbG93LDAhPT1lLnNjcm9sbEhlaWdodD8oZS5zdHlsZS5oZWlnaHQ9ZS5zY3JvbGxIZWlnaHQrXCJweFwiLGUuc3R5bGUucGFkZGluZ1RvcD1lLmRhdGFzZXQub2xkUGFkZGluZ1RvcCxlLnN0eWxlLnBhZGRpbmdCb3R0b209ZS5kYXRhc2V0Lm9sZFBhZGRpbmdCb3R0b20pOihlLnN0eWxlLmhlaWdodD1cIlwiLGUuc3R5bGUucGFkZGluZ1RvcD1lLmRhdGFzZXQub2xkUGFkZGluZ1RvcCxlLnN0eWxlLnBhZGRpbmdCb3R0b209ZS5kYXRhc2V0Lm9sZFBhZGRpbmdCb3R0b20pLGUuc3R5bGUub3ZlcmZsb3c9XCJoaWRkZW5cIn0sYWZ0ZXJFbnRlcihlKXtpdChlLFwiY29sbGFwc2UtdHJhbnNpdGlvblwiKSxlLnN0eWxlLmhlaWdodD1cIlwiLGUuc3R5bGUub3ZlcmZsb3c9ZS5kYXRhc2V0Lm9sZE92ZXJmbG93fSxiZWZvcmVMZWF2ZShlKXtlLmRhdGFzZXR8fChlLmRhdGFzZXQ9e30pLGUuZGF0YXNldC5vbGRQYWRkaW5nVG9wPWUuc3R5bGUucGFkZGluZ1RvcCxlLmRhdGFzZXQub2xkUGFkZGluZ0JvdHRvbT1lLnN0eWxlLnBhZGRpbmdCb3R0b20sZS5kYXRhc2V0Lm9sZE92ZXJmbG93PWUuc3R5bGUub3ZlcmZsb3csZS5zdHlsZS5oZWlnaHQ9ZS5zY3JvbGxIZWlnaHQrXCJweFwiLGUuc3R5bGUub3ZlcmZsb3c9XCJoaWRkZW5cIn0sbGVhdmUoZSl7MCE9PWUuc2Nyb2xsSGVpZ2h0JiYob3QoZSxcImNvbGxhcHNlLXRyYW5zaXRpb25cIiksZS5zdHlsZS50cmFuc2l0aW9uUHJvcGVydHk9XCJoZWlnaHRcIixlLnN0eWxlLmhlaWdodD0wLGUuc3R5bGUucGFkZGluZ1RvcD0wLGUuc3R5bGUucGFkZGluZ0JvdHRvbT0wKX0sYWZ0ZXJMZWF2ZShlKXtpdChlLFwiY29sbGFwc2UtdHJhbnNpdGlvblwiKSxlLnN0eWxlLmhlaWdodD1cIlwiLGUuc3R5bGUub3ZlcmZsb3c9ZS5kYXRhc2V0Lm9sZE92ZXJmbG93LGUuc3R5bGUucGFkZGluZ1RvcD1lLmRhdGFzZXQub2xkUGFkZGluZ1RvcCxlLnN0eWxlLnBhZGRpbmdCb3R0b209ZS5kYXRhc2V0Lm9sZFBhZGRpbmdCb3R0b219fX0pfSk7Vm4ucmVuZGVyPWZ1bmN0aW9uKGUsdCxsLHIscyx1KXtyZXR1cm4gYSgpLG4obyxxKGUub24pLHtkZWZhdWx0OmkoKCgpPT5bZChlLiRzbG90cyxcImRlZmF1bHRcIildKSksXzozfSwxNil9LFZuLl9fZmlsZT1cInBhY2thZ2VzL3RyYW5zaXRpb24vY29sbGFwc2UtdHJhbnNpdGlvbi9pbmRleC52dWVcIixWbi5pbnN0YWxsPWU9PntlLmNvbXBvbmVudChWbi5uYW1lLFZuKX07dmFyIEluPWUoe25hbWU6XCJFbENvbGxhcHNlSXRlbVwiLGNvbXBvbmVudHM6e0VsQ29sbGFwc2VUcmFuc2l0aW9uOlZufSxwcm9wczp7dGl0bGU6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJcIn0sbmFtZTp7dHlwZTpbU3RyaW5nLE51bWJlcl0sZGVmYXVsdDooKT0+UmUoKX0sZGlzYWJsZWQ6Qm9vbGVhbn0sc2V0dXAoZSl7Y29uc3QgYT13KFwiY29sbGFwc2VcIiksbj1udWxsPT1hP3ZvaWQgMDphLmNvbGxhcHNlTWl0dCxvPXQoe2hlaWdodDpcImF1dG9cIixkaXNwbGF5OlwiYmxvY2tcIn0pLGk9dCgwKSxyPXQoITEpLHM9dCghMSksdT10KFJlKCkpO3JldHVybntpc0FjdGl2ZTpsKCgoKT0+KG51bGw9PWE/dm9pZCAwOmEuYWN0aXZlTmFtZXMudmFsdWUuaW5kZXhPZihlLm5hbWUpKT4tMSkpLGNvbnRlbnRXcmFwU3R5bGU6byxjb250ZW50SGVpZ2h0OmksZm9jdXNpbmc6cixpc0NsaWNrOnMsaWQ6dSxoYW5kbGVGb2N1czooKT0+e3NldFRpbWVvdXQoKCgpPT57cy52YWx1ZT9zLnZhbHVlPSExOnIudmFsdWU9ITB9KSw1MCl9LGhhbmRsZUhlYWRlckNsaWNrOigpPT57ZS5kaXNhYmxlZHx8KG51bGw9PW58fG4uZW1pdChcIml0ZW0tY2xpY2tcIixlLm5hbWUpLHIudmFsdWU9ITEscy52YWx1ZT0hMCl9LGhhbmRsZUVudGVyQ2xpY2s6KCk9PntudWxsPT1ufHxuLmVtaXQoXCJpdGVtLWNsaWNrXCIsZS5uYW1lKX0sY29sbGFwc2U6YX19fSk7Y29uc3QgQW49e2NsYXNzOlwiZWwtY29sbGFwc2UtaXRlbV9fY29udGVudFwifTtJbi5yZW5kZXI9ZnVuY3Rpb24oZSx0LGwsbyx1LHYpe2NvbnN0IG09UChcImVsLWNvbGxhcHNlLXRyYW5zaXRpb25cIik7cmV0dXJuIGEoKSxuKFwiZGl2XCIse2NsYXNzOltcImVsLWNvbGxhcHNlLWl0ZW1cIix7XCJpcy1hY3RpdmVcIjplLmlzQWN0aXZlLFwiaXMtZGlzYWJsZWRcIjplLmRpc2FibGVkfV19LFtzKFwiZGl2XCIse3JvbGU6XCJ0YWJcIixcImFyaWEtZXhwYW5kZWRcIjplLmlzQWN0aXZlLFwiYXJpYS1jb250cm9sc1wiOlwiZWwtY29sbGFwc2UtY29udGVudC1cIitlLmlkLFwiYXJpYS1kZXNjcmliZWRieVwiOlwiZWwtY29sbGFwc2UtY29udGVudC1cIitlLmlkfSxbcyhcImRpdlwiLHtpZDpcImVsLWNvbGxhcHNlLWhlYWQtXCIrZS5pZCxjbGFzczpbXCJlbC1jb2xsYXBzZS1pdGVtX19oZWFkZXJcIix7Zm9jdXNpbmc6ZS5mb2N1c2luZyxcImlzLWFjdGl2ZVwiOmUuaXNBY3RpdmV9XSxyb2xlOlwiYnV0dG9uXCIsdGFiaW5kZXg6ZS5kaXNhYmxlZD8tMTowLG9uQ2xpY2s6dFsxXXx8KHRbMV09KC4uLnQpPT5lLmhhbmRsZUhlYWRlckNsaWNrKC4uLnQpKSxvbktleXVwOnRbMl18fCh0WzJdPSQoVCgoKC4uLnQpPT5lLmhhbmRsZUVudGVyQ2xpY2soLi4udCkpLFtcInN0b3BcIl0pLFtcInNwYWNlXCIsXCJlbnRlclwiXSkpLG9uRm9jdXM6dFszXXx8KHRbM109KC4uLnQpPT5lLmhhbmRsZUZvY3VzKC4uLnQpKSxvbkJsdXI6dFs0XXx8KHRbNF09dD0+ZS5mb2N1c2luZz0hMSl9LFtkKGUuJHNsb3RzLFwidGl0bGVcIix7fSwoKCk9PltjKHAoZS50aXRsZSksMSldKSkscyhcImlcIix7Y2xhc3M6W1wiZWwtY29sbGFwc2UtaXRlbV9fYXJyb3cgZWwtaWNvbi1hcnJvdy1yaWdodFwiLHtcImlzLWFjdGl2ZVwiOmUuaXNBY3RpdmV9XX0sbnVsbCwyKV0sNDIsW1wiaWRcIixcInRhYmluZGV4XCJdKV0sOCxbXCJhcmlhLWV4cGFuZGVkXCIsXCJhcmlhLWNvbnRyb2xzXCIsXCJhcmlhLWRlc2NyaWJlZGJ5XCJdKSxzKG0sbnVsbCx7ZGVmYXVsdDppKCgoKT0+W3IocyhcImRpdlwiLHtpZDpcImVsLWNvbGxhcHNlLWNvbnRlbnQtXCIrZS5pZCxjbGFzczpcImVsLWNvbGxhcHNlLWl0ZW1fX3dyYXBcIixyb2xlOlwidGFicGFuZWxcIixcImFyaWEtaGlkZGVuXCI6IWUuaXNBY3RpdmUsXCJhcmlhLWxhYmVsbGVkYnlcIjpcImVsLWNvbGxhcHNlLWhlYWQtXCIrZS5pZH0sW3MoXCJkaXZcIixBbixbZChlLiRzbG90cyxcImRlZmF1bHRcIildKV0sOCxbXCJpZFwiLFwiYXJpYS1oaWRkZW5cIixcImFyaWEtbGFiZWxsZWRieVwiXSksW1toLGUuaXNBY3RpdmVdXSldKSksXzozfSldLDIpfSxJbi5fX2ZpbGU9XCJwYWNrYWdlcy9jb2xsYXBzZS9zcmMvY29sbGFwc2UtaXRlbS52dWVcIixJbi5pbnN0YWxsPWU9PntlLmNvbXBvbmVudChJbi5uYW1lLEluKX07Y29uc3QgQm49ZnVuY3Rpb24oZSx0LGwpe3JldHVybltlLHQqbC8oKGU9KDItdCkqbCk8MT9lOjItZSl8fDAsZS8yXX0sTG49ZnVuY3Rpb24oZSx0KXt2YXIgbDtcInN0cmluZ1wiPT10eXBlb2YobD1lKSYmLTEhPT1sLmluZGV4T2YoXCIuXCIpJiYxPT09cGFyc2VGbG9hdChsKSYmKGU9XCIxMDAlXCIpO2NvbnN0IGE9ZnVuY3Rpb24oZSl7cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIGUmJi0xIT09ZS5pbmRleE9mKFwiJVwiKX0oZSk7cmV0dXJuIGU9TWF0aC5taW4odCxNYXRoLm1heCgwLHBhcnNlRmxvYXQoZStcIlwiKSkpLGEmJihlPXBhcnNlSW50KGUqdCtcIlwiLDEwKS8xMDApLE1hdGguYWJzKGUtdCk8MWUtNj8xOmUldC9wYXJzZUZsb2F0KHQpfSx6bj17MTA6XCJBXCIsMTE6XCJCXCIsMTI6XCJDXCIsMTM6XCJEXCIsMTQ6XCJFXCIsMTU6XCJGXCJ9LEZuPXtBOjEwLEI6MTEsQzoxMixEOjEzLEU6MTQsRjoxNX0sJG49ZnVuY3Rpb24oZSl7cmV0dXJuIDI9PT1lLmxlbmd0aD8xNiooRm5bZVswXS50b1VwcGVyQ2FzZSgpXXx8K2VbMF0pKyhGbltlWzFdLnRvVXBwZXJDYXNlKCldfHwrZVsxXSk6Rm5bZVsxXS50b1VwcGVyQ2FzZSgpXXx8K2VbMV19LFJuPWZ1bmN0aW9uKGUsdCxsKXtlPUxuKGUsMjU1KSx0PUxuKHQsMjU1KSxsPUxuKGwsMjU1KTtjb25zdCBhPU1hdGgubWF4KGUsdCxsKSxuPU1hdGgubWluKGUsdCxsKTtsZXQgbztjb25zdCBpPWEscj1hLW4scz0wPT09YT8wOnIvYTtpZihhPT09bilvPTA7ZWxzZXtzd2l0Y2goYSl7Y2FzZSBlOm89KHQtbCkvcisodDxsPzY6MCk7YnJlYWs7Y2FzZSB0Om89KGwtZSkvcisyO2JyZWFrO2Nhc2UgbDpvPShlLXQpL3IrNH1vLz02fXJldHVybntoOjM2MCpvLHM6MTAwKnMsdjoxMDAqaX19LEhuPWZ1bmN0aW9uKGUsdCxsKXtlPTYqTG4oZSwzNjApLHQ9TG4odCwxMDApLGw9TG4obCwxMDApO2NvbnN0IGE9TWF0aC5mbG9vcihlKSxuPWUtYSxvPWwqKDEtdCksaT1sKigxLW4qdCkscj1sKigxLSgxLW4pKnQpLHM9YSU2LHU9W2wsaSxvLG8scixsXVtzXSxkPVtyLGwsbCxpLG8sb11bc10sYz1bbyxvLHIsbCxsLGldW3NdO3JldHVybntyOk1hdGgucm91bmQoMjU1KnUpLGc6TWF0aC5yb3VuZCgyNTUqZCksYjpNYXRoLnJvdW5kKDI1NSpjKX19O2NsYXNzIFdue2NvbnN0cnVjdG9yKGUpe3RoaXMuX2h1ZT0wLHRoaXMuX3NhdHVyYXRpb249MTAwLHRoaXMuX3ZhbHVlPTEwMCx0aGlzLl9hbHBoYT0xMDAsdGhpcy5lbmFibGVBbHBoYT0hMSx0aGlzLmZvcm1hdD1cImhleFwiLHRoaXMudmFsdWU9XCJcIixlPWV8fHt9O2Zvcihjb25zdCB0IGluIGUpZS5oYXNPd25Qcm9wZXJ0eSh0KSYmKHRoaXNbdF09ZVt0XSk7dGhpcy5kb09uQ2hhbmdlKCl9c2V0KGUsdCl7aWYoMSE9PWFyZ3VtZW50cy5sZW5ndGh8fFwib2JqZWN0XCIhPXR5cGVvZiBlKXRoaXNbXCJfXCIrZV09dCx0aGlzLmRvT25DaGFuZ2UoKTtlbHNlIGZvcihjb25zdCB0IGluIGUpZS5oYXNPd25Qcm9wZXJ0eSh0KSYmdGhpcy5zZXQodCxlW3RdKX1nZXQoZSl7cmV0dXJuIHRoaXNbXCJfXCIrZV19dG9SZ2IoKXtyZXR1cm4gSG4odGhpcy5faHVlLHRoaXMuX3NhdHVyYXRpb24sdGhpcy5fdmFsdWUpfWZyb21TdHJpbmcoZSl7aWYoIWUpcmV0dXJuIHRoaXMuX2h1ZT0wLHRoaXMuX3NhdHVyYXRpb249MTAwLHRoaXMuX3ZhbHVlPTEwMCx2b2lkIHRoaXMuZG9PbkNoYW5nZSgpO2NvbnN0IHQ9KGUsdCxsKT0+e3RoaXMuX2h1ZT1NYXRoLm1heCgwLE1hdGgubWluKDM2MCxlKSksdGhpcy5fc2F0dXJhdGlvbj1NYXRoLm1heCgwLE1hdGgubWluKDEwMCx0KSksdGhpcy5fdmFsdWU9TWF0aC5tYXgoMCxNYXRoLm1pbigxMDAsbCkpLHRoaXMuZG9PbkNoYW5nZSgpfTtpZigtMSE9PWUuaW5kZXhPZihcImhzbFwiKSl7Y29uc3QgbD1lLnJlcGxhY2UoL2hzbGF8aHNsfFxcKHxcXCkvZ20sXCJcIikuc3BsaXQoL1xcc3wsL2cpLmZpbHRlcigoZT0+XCJcIiE9PWUpKS5tYXAoKChlLHQpPT50PjI/cGFyc2VGbG9hdChlKTpwYXJzZUludChlLDEwKSkpO2lmKDQ9PT1sLmxlbmd0aD90aGlzLl9hbHBoYT1NYXRoLmZsb29yKDEwMCpwYXJzZUZsb2F0KGxbM10pKTozPT09bC5sZW5ndGgmJih0aGlzLl9hbHBoYT0xMDApLGwubGVuZ3RoPj0zKXtjb25zdHtoOmUsczphLHY6bn09ZnVuY3Rpb24oZSx0LGwpe2wvPTEwMDtsZXQgYT10Lz0xMDA7Y29uc3Qgbj1NYXRoLm1heChsLC4wMSk7cmV0dXJuIHQqPShsKj0yKTw9MT9sOjItbCxhKj1uPD0xP246Mi1uLHtoOmUsczoxMDAqKDA9PT1sPzIqYS8obithKToyKnQvKGwrdCkpLHY6KGwrdCkvMioxMDB9fShsWzBdLGxbMV0sbFsyXSk7dChlLGEsbil9fWVsc2UgaWYoLTEhPT1lLmluZGV4T2YoXCJoc3ZcIikpe2NvbnN0IGw9ZS5yZXBsYWNlKC9oc3ZhfGhzdnxcXCh8XFwpL2dtLFwiXCIpLnNwbGl0KC9cXHN8LC9nKS5maWx0ZXIoKGU9PlwiXCIhPT1lKSkubWFwKCgoZSx0KT0+dD4yP3BhcnNlRmxvYXQoZSk6cGFyc2VJbnQoZSwxMCkpKTs0PT09bC5sZW5ndGg/dGhpcy5fYWxwaGE9TWF0aC5mbG9vcigxMDAqcGFyc2VGbG9hdChsWzNdKSk6Mz09PWwubGVuZ3RoJiYodGhpcy5fYWxwaGE9MTAwKSxsLmxlbmd0aD49MyYmdChsWzBdLGxbMV0sbFsyXSl9ZWxzZSBpZigtMSE9PWUuaW5kZXhPZihcInJnYlwiKSl7Y29uc3QgbD1lLnJlcGxhY2UoL3JnYmF8cmdifFxcKHxcXCkvZ20sXCJcIikuc3BsaXQoL1xcc3wsL2cpLmZpbHRlcigoZT0+XCJcIiE9PWUpKS5tYXAoKChlLHQpPT50PjI/cGFyc2VGbG9hdChlKTpwYXJzZUludChlLDEwKSkpO2lmKDQ9PT1sLmxlbmd0aD90aGlzLl9hbHBoYT1NYXRoLmZsb29yKDEwMCpwYXJzZUZsb2F0KGxbM10pKTozPT09bC5sZW5ndGgmJih0aGlzLl9hbHBoYT0xMDApLGwubGVuZ3RoPj0zKXtjb25zdHtoOmUsczphLHY6bn09Um4obFswXSxsWzFdLGxbMl0pO3QoZSxhLG4pfX1lbHNlIGlmKC0xIT09ZS5pbmRleE9mKFwiI1wiKSl7Y29uc3QgbD1lLnJlcGxhY2UoXCIjXCIsXCJcIikudHJpbSgpO2lmKCEvXig/OlswLTlhLWZBLUZdezN9KXsxLDJ9JC8udGVzdChsKSlyZXR1cm47bGV0IGEsbixvOzM9PT1sLmxlbmd0aD8oYT0kbihsWzBdK2xbMF0pLG49JG4obFsxXStsWzFdKSxvPSRuKGxbMl0rbFsyXSkpOjYhPT1sLmxlbmd0aCYmOCE9PWwubGVuZ3RofHwoYT0kbihsLnN1YnN0cmluZygwLDIpKSxuPSRuKGwuc3Vic3RyaW5nKDIsNCkpLG89JG4obC5zdWJzdHJpbmcoNCw2KSkpLDg9PT1sLmxlbmd0aD90aGlzLl9hbHBoYT1NYXRoLmZsb29yKCRuKGwuc3Vic3RyaW5nKDYpKS8yNTUqMTAwKTozIT09bC5sZW5ndGgmJjYhPT1sLmxlbmd0aHx8KHRoaXMuX2FscGhhPTEwMCk7Y29uc3R7aDppLHM6cix2OnN9PVJuKGEsbixvKTt0KGkscixzKX19Y29tcGFyZShlKXtyZXR1cm4gTWF0aC5hYnMoZS5faHVlLXRoaXMuX2h1ZSk8MiYmTWF0aC5hYnMoZS5fc2F0dXJhdGlvbi10aGlzLl9zYXR1cmF0aW9uKTwxJiZNYXRoLmFicyhlLl92YWx1ZS10aGlzLl92YWx1ZSk8MSYmTWF0aC5hYnMoZS5fYWxwaGEtdGhpcy5fYWxwaGEpPDF9ZG9PbkNoYW5nZSgpe2NvbnN0e19odWU6ZSxfc2F0dXJhdGlvbjp0LF92YWx1ZTpsLF9hbHBoYTphLGZvcm1hdDpufT10aGlzO2lmKHRoaXMuZW5hYmxlQWxwaGEpc3dpdGNoKG4pe2Nhc2VcImhzbFwiOmNvbnN0IG49Qm4oZSx0LzEwMCxsLzEwMCk7dGhpcy52YWx1ZT1gaHNsYSgke2V9LCAke01hdGgucm91bmQoMTAwKm5bMV0pfSUsICR7TWF0aC5yb3VuZCgxMDAqblsyXSl9JSwgJHthLzEwMH0pYDticmVhaztjYXNlXCJoc3ZcIjp0aGlzLnZhbHVlPWBoc3ZhKCR7ZX0sICR7TWF0aC5yb3VuZCh0KX0lLCAke01hdGgucm91bmQobCl9JSwgJHthLzEwMH0pYDticmVhaztkZWZhdWx0OmNvbnN0e3I6byxnOmksYjpyfT1IbihlLHQsbCk7dGhpcy52YWx1ZT1gcmdiYSgke299LCAke2l9LCAke3J9LCAke2EvMTAwfSlgfWVsc2Ugc3dpdGNoKG4pe2Nhc2VcImhzbFwiOmNvbnN0IGE9Qm4oZSx0LzEwMCxsLzEwMCk7dGhpcy52YWx1ZT1gaHNsKCR7ZX0sICR7TWF0aC5yb3VuZCgxMDAqYVsxXSl9JSwgJHtNYXRoLnJvdW5kKDEwMCphWzJdKX0lKWA7YnJlYWs7Y2FzZVwiaHN2XCI6dGhpcy52YWx1ZT1gaHN2KCR7ZX0sICR7TWF0aC5yb3VuZCh0KX0lLCAke01hdGgucm91bmQobCl9JSlgO2JyZWFrO2Nhc2VcInJnYlwiOmNvbnN0e3I6bixnOm8sYjppfT1IbihlLHQsbCk7dGhpcy52YWx1ZT1gcmdiKCR7bn0sICR7b30sICR7aX0pYDticmVhaztkZWZhdWx0OnRoaXMudmFsdWU9ZnVuY3Rpb24oe3I6ZSxnOnQsYjpsfSl7Y29uc3QgYT1mdW5jdGlvbihlKXtlPU1hdGgubWluKE1hdGgucm91bmQoZSksMjU1KTtjb25zdCB0PU1hdGguZmxvb3IoZS8xNiksbD1lJTE2O3JldHVyblwiXCIrKHpuW3RdfHx0KSsoem5bbF18fGwpfTtyZXR1cm4gaXNOYU4oZSl8fGlzTmFOKHQpfHxpc05hTihsKT9cIlwiOlwiI1wiK2EoZSkrYSh0KSthKGwpfShIbihlLHQsbCkpfX19bGV0IGpuPSExO2NvbnN0IEtuPSgpPT4hMTtmdW5jdGlvbiBZbihlLHQpe2lmKHplKXJldHVybjtjb25zdCBsPWZ1bmN0aW9uKGUpe3ZhciBsO251bGw9PT0obD10LmRyYWcpfHx2b2lkIDA9PT1sfHxsLmNhbGwodCxlKX0sYT1mdW5jdGlvbihlKXt2YXIgbjthdChkb2N1bWVudCxcIm1vdXNlbW92ZVwiLGwpLGF0KGRvY3VtZW50LFwibW91c2V1cFwiLGEpLGF0KGRvY3VtZW50LFwic2VsZWN0c3RhcnRcIixLbiksYXQoZG9jdW1lbnQsXCJkcmFnc3RhcnRcIixLbiksam49ITEsbnVsbD09PShuPXQuZW5kKXx8dm9pZCAwPT09bnx8bi5jYWxsKHQsZSl9O2x0KGUsXCJtb3VzZWRvd25cIiwoZnVuY3Rpb24oZSl7dmFyIG47am58fChsdChkb2N1bWVudCxcInNlbGVjdHN0YXJ0XCIsS24pLGx0KGRvY3VtZW50LFwiZHJhZ3N0YXJ0XCIsS24pLGx0KGRvY3VtZW50LFwibW91c2Vtb3ZlXCIsbCksbHQoZG9jdW1lbnQsXCJtb3VzZXVwXCIsYSksam49ITAsbnVsbD09PShuPXQuc3RhcnQpfHx2b2lkIDA9PT1ufHxuLmNhbGwodCxlKSl9KSl9dmFyIHFuPWUoe25hbWU6XCJFbFNsUGFuZWxcIixwcm9wczp7Y29sb3I6e3R5cGU6T2JqZWN0LHJlcXVpcmVkOiEwfX0sc2V0dXAoZSl7Y29uc3QgYT12KCksbj10KDApLG89dCgwKSxpPXQoXCJoc2woMCwgMTAwJSwgNTAlKVwiKSxyPWwoKCgpPT4oe2h1ZTplLmNvbG9yLmdldChcImh1ZVwiKSx2YWx1ZTplLmNvbG9yLmdldChcInZhbHVlXCIpfSkpKTtmdW5jdGlvbiBzKCl7Y29uc3QgdD1lLmNvbG9yLmdldChcInNhdHVyYXRpb25cIiksbD1lLmNvbG9yLmdldChcInZhbHVlXCIpLHI9YS52bm9kZS5lbDtsZXR7Y2xpZW50V2lkdGg6cyxjbGllbnRIZWlnaHQ6dX09cjtvLnZhbHVlPXQqcy8xMDAsbi52YWx1ZT0oMTAwLWwpKnUvMTAwLGkudmFsdWU9XCJoc2woXCIrZS5jb2xvci5nZXQoXCJodWVcIikrXCIsIDEwMCUsIDUwJSlcIn1mdW5jdGlvbiB1KHQpe2NvbnN0IGw9YS52bm9kZS5lbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtsZXQgaT10LmNsaWVudFgtbC5sZWZ0LHI9dC5jbGllbnRZLWwudG9wO2k9TWF0aC5tYXgoMCxpKSxpPU1hdGgubWluKGksbC53aWR0aCkscj1NYXRoLm1heCgwLHIpLHI9TWF0aC5taW4ocixsLmhlaWdodCksby52YWx1ZT1pLG4udmFsdWU9cixlLmNvbG9yLnNldCh7c2F0dXJhdGlvbjppL2wud2lkdGgqMTAwLHZhbHVlOjEwMC1yL2wuaGVpZ2h0KjEwMH0pfXJldHVybiB5KHIsKCgpPT57cygpfSkpLF8oKCgpPT57WW4oYS52bm9kZS5lbCx7ZHJhZzplPT57dShlKX0sZW5kOmU9Pnt1KGUpfX0pLHMoKX0pKSx7Y3Vyc29yVG9wOm4sY3Vyc29yTGVmdDpvLGJhY2tncm91bmQ6aSxjb2xvclZhbHVlOnIsaGFuZGxlRHJhZzp1LHVwZGF0ZTpzfX19KTtjb25zdCBVbj1zKFwiZGl2XCIse2NsYXNzOlwiZWwtY29sb3Itc3ZwYW5lbF9fd2hpdGVcIn0sbnVsbCwtMSksR249cyhcImRpdlwiLHtjbGFzczpcImVsLWNvbG9yLXN2cGFuZWxfX2JsYWNrXCJ9LG51bGwsLTEpLFhuPXMoXCJkaXZcIixudWxsLG51bGwsLTEpO3FuLnJlbmRlcj1mdW5jdGlvbihlLHQsbCxvLGkscil7cmV0dXJuIGEoKSxuKFwiZGl2XCIse2NsYXNzOlwiZWwtY29sb3Itc3ZwYW5lbFwiLHN0eWxlOntiYWNrZ3JvdW5kQ29sb3I6ZS5iYWNrZ3JvdW5kfX0sW1VuLEduLHMoXCJkaXZcIix7Y2xhc3M6XCJlbC1jb2xvci1zdnBhbmVsX19jdXJzb3JcIixzdHlsZTp7dG9wOmUuY3Vyc29yVG9wK1wicHhcIixsZWZ0OmUuY3Vyc29yTGVmdCtcInB4XCJ9fSxbWG5dLDQpXSw0KX0scW4uX19maWxlPVwicGFja2FnZXMvY29sb3ItcGlja2VyL3NyYy9jb21wb25lbnRzL3N2LXBhbmVsLnZ1ZVwiO3ZhciBRbj1lKHtuYW1lOlwiRWxDb2xvckh1ZVNsaWRlclwiLHByb3BzOntjb2xvcjp7dHlwZTpPYmplY3QscmVxdWlyZWQ6ITB9LHZlcnRpY2FsOkJvb2xlYW59LHNldHVwKGUpe2NvbnN0IGE9digpLG49dChudWxsKSxvPXQobnVsbCksaT10KDApLHI9dCgwKSxzPWwoKCgpPT5lLmNvbG9yLmdldChcImh1ZVwiKSkpO2Z1bmN0aW9uIHUodCl7Y29uc3QgbD1hLnZub2RlLmVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO2xldCBvO2lmKGUudmVydGljYWwpe2xldCBlPXQuY2xpZW50WS1sLnRvcDtlPU1hdGgubWluKGUsbC5oZWlnaHQtbi52YWx1ZS5vZmZzZXRIZWlnaHQvMiksZT1NYXRoLm1heChuLnZhbHVlLm9mZnNldEhlaWdodC8yLGUpLG89TWF0aC5yb3VuZCgoZS1uLnZhbHVlLm9mZnNldEhlaWdodC8yKS8obC5oZWlnaHQtbi52YWx1ZS5vZmZzZXRIZWlnaHQpKjM2MCl9ZWxzZXtsZXQgZT10LmNsaWVudFgtbC5sZWZ0O2U9TWF0aC5taW4oZSxsLndpZHRoLW4udmFsdWUub2Zmc2V0V2lkdGgvMiksZT1NYXRoLm1heChuLnZhbHVlLm9mZnNldFdpZHRoLzIsZSksbz1NYXRoLnJvdW5kKChlLW4udmFsdWUub2Zmc2V0V2lkdGgvMikvKGwud2lkdGgtbi52YWx1ZS5vZmZzZXRXaWR0aCkqMzYwKX1lLmNvbG9yLnNldChcImh1ZVwiLG8pfWZ1bmN0aW9uIGQoKXtpLnZhbHVlPWZ1bmN0aW9uKCl7Y29uc3QgdD1hLnZub2RlLmVsO2lmKGUudmVydGljYWwpcmV0dXJuIDA7Y29uc3QgbD1lLmNvbG9yLmdldChcImh1ZVwiKTtyZXR1cm4gdD9NYXRoLnJvdW5kKGwqKHQub2Zmc2V0V2lkdGgtbi52YWx1ZS5vZmZzZXRXaWR0aC8yKS8zNjApOjB9KCksci52YWx1ZT1mdW5jdGlvbigpe2NvbnN0IHQ9YS52bm9kZS5lbDtpZighZS52ZXJ0aWNhbClyZXR1cm4gMDtjb25zdCBsPWUuY29sb3IuZ2V0KFwiaHVlXCIpO3JldHVybiB0P01hdGgucm91bmQobCoodC5vZmZzZXRIZWlnaHQtbi52YWx1ZS5vZmZzZXRIZWlnaHQvMikvMzYwKTowfSgpfXJldHVybiB5KHMsKCgpPT57ZCgpfSkpLF8oKCgpPT57Y29uc3QgZT17ZHJhZzplPT57dShlKX0sZW5kOmU9Pnt1KGUpfX07WW4oby52YWx1ZSxlKSxZbihuLnZhbHVlLGUpLGQoKX0pKSx7YmFyOm8sdGh1bWI6bix0aHVtYkxlZnQ6aSx0aHVtYlRvcDpyLGh1ZVZhbHVlOnMsaGFuZGxlQ2xpY2s6ZnVuY3Rpb24oZSl7ZS50YXJnZXQhPT1uLnZhbHVlJiZ1KGUpfSx1cGRhdGU6ZH19fSk7UW4ucmVuZGVyPWZ1bmN0aW9uKGUsdCxsLG8saSxyKXtyZXR1cm4gYSgpLG4oXCJkaXZcIix7Y2xhc3M6W1wiZWwtY29sb3ItaHVlLXNsaWRlclwiLHtcImlzLXZlcnRpY2FsXCI6ZS52ZXJ0aWNhbH1dfSxbcyhcImRpdlwiLHtyZWY6XCJiYXJcIixjbGFzczpcImVsLWNvbG9yLWh1ZS1zbGlkZXJfX2JhclwiLG9uQ2xpY2s6dFsxXXx8KHRbMV09KC4uLnQpPT5lLmhhbmRsZUNsaWNrKC4uLnQpKX0sbnVsbCw1MTIpLHMoXCJkaXZcIix7cmVmOlwidGh1bWJcIixjbGFzczpcImVsLWNvbG9yLWh1ZS1zbGlkZXJfX3RodW1iXCIsc3R5bGU6e2xlZnQ6ZS50aHVtYkxlZnQrXCJweFwiLHRvcDplLnRodW1iVG9wK1wicHhcIn19LG51bGwsNCldLDIpfSxRbi5fX2ZpbGU9XCJwYWNrYWdlcy9jb2xvci1waWNrZXIvc3JjL2NvbXBvbmVudHMvaHVlLXNsaWRlci52dWVcIjt2YXIgWm49ZSh7bmFtZTpcIkVsQ29sb3JBbHBoYVNsaWRlclwiLHByb3BzOntjb2xvcjp7dHlwZTpPYmplY3QscmVxdWlyZWQ6ITB9LHZlcnRpY2FsOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMX19LHNldHVwKGUpe2NvbnN0IGw9digpLGE9dChudWxsKSxuPXQobnVsbCksbz10KDApLGk9dCgwKSxyPXQobnVsbCk7ZnVuY3Rpb24gcyh0KXtjb25zdCBuPWwudm5vZGUuZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7aWYoZS52ZXJ0aWNhbCl7bGV0IGw9dC5jbGllbnRZLW4udG9wO2w9TWF0aC5tYXgoYS52YWx1ZS5vZmZzZXRIZWlnaHQvMixsKSxsPU1hdGgubWluKGwsbi5oZWlnaHQtYS52YWx1ZS5vZmZzZXRIZWlnaHQvMiksZS5jb2xvci5zZXQoXCJhbHBoYVwiLE1hdGgucm91bmQoKGwtYS52YWx1ZS5vZmZzZXRIZWlnaHQvMikvKG4uaGVpZ2h0LWEudmFsdWUub2Zmc2V0SGVpZ2h0KSoxMDApKX1lbHNle2xldCBsPXQuY2xpZW50WC1uLmxlZnQ7bD1NYXRoLm1heChhLnZhbHVlLm9mZnNldFdpZHRoLzIsbCksbD1NYXRoLm1pbihsLG4ud2lkdGgtYS52YWx1ZS5vZmZzZXRXaWR0aC8yKSxlLmNvbG9yLnNldChcImFscGhhXCIsTWF0aC5yb3VuZCgobC1hLnZhbHVlLm9mZnNldFdpZHRoLzIpLyhuLndpZHRoLWEudmFsdWUub2Zmc2V0V2lkdGgpKjEwMCkpfX1mdW5jdGlvbiB1KCl7by52YWx1ZT1mdW5jdGlvbigpe2lmKGUudmVydGljYWwpcmV0dXJuIDA7Y29uc3QgdD1sLnZub2RlLmVsLG49ZS5jb2xvci5nZXQoXCJhbHBoYVwiKTtyZXR1cm4gdD9NYXRoLnJvdW5kKG4qKHQub2Zmc2V0V2lkdGgtYS52YWx1ZS5vZmZzZXRXaWR0aC8yKS8xMDApOjB9KCksaS52YWx1ZT1mdW5jdGlvbigpe2NvbnN0IHQ9bC52bm9kZS5lbDtpZighZS52ZXJ0aWNhbClyZXR1cm4gMDtjb25zdCBuPWUuY29sb3IuZ2V0KFwiYWxwaGFcIik7cmV0dXJuIHQ/TWF0aC5yb3VuZChuKih0Lm9mZnNldEhlaWdodC1hLnZhbHVlLm9mZnNldEhlaWdodC8yKS8xMDApOjB9KCksci52YWx1ZT1mdW5jdGlvbigpe2lmKGUuY29sb3ImJmUuY29sb3IudmFsdWUpe2NvbnN0e3I6dCxnOmwsYjphfT1lLmNvbG9yLnRvUmdiKCk7cmV0dXJuYGxpbmVhci1ncmFkaWVudCh0byByaWdodCwgcmdiYSgke3R9LCAke2x9LCAke2F9LCAwKSAwJSwgcmdiYSgke3R9LCAke2x9LCAke2F9LCAxKSAxMDAlKWB9cmV0dXJuIG51bGx9KCl9cmV0dXJuIHkoKCgpPT5lLmNvbG9yLmdldChcImFscGhhXCIpKSwoKCk9Pnt1KCl9KSkseSgoKCk9PmUuY29sb3IudmFsdWUpLCgoKT0+e3UoKX0pKSxfKCgoKT0+e2NvbnN0IGU9e2RyYWc6ZT0+e3MoZSl9LGVuZDplPT57cyhlKX19O1luKG4udmFsdWUsZSksWW4oYS52YWx1ZSxlKSx1KCl9KSkse3RodW1iOmEsYmFyOm4sdGh1bWJMZWZ0Om8sdGh1bWJUb3A6aSxiYWNrZ3JvdW5kOnIsaGFuZGxlQ2xpY2s6ZnVuY3Rpb24oZSl7ZS50YXJnZXQhPT1hLnZhbHVlJiZzKGUpfSx1cGRhdGU6dX19fSk7Wm4ucmVuZGVyPWZ1bmN0aW9uKGUsdCxsLG8saSxyKXtyZXR1cm4gYSgpLG4oXCJkaXZcIix7Y2xhc3M6W1wiZWwtY29sb3ItYWxwaGEtc2xpZGVyXCIse1wiaXMtdmVydGljYWxcIjplLnZlcnRpY2FsfV19LFtzKFwiZGl2XCIse3JlZjpcImJhclwiLGNsYXNzOlwiZWwtY29sb3ItYWxwaGEtc2xpZGVyX19iYXJcIixzdHlsZTp7YmFja2dyb3VuZDplLmJhY2tncm91bmR9LG9uQ2xpY2s6dFsxXXx8KHRbMV09KC4uLnQpPT5lLmhhbmRsZUNsaWNrKC4uLnQpKX0sbnVsbCw0KSxzKFwiZGl2XCIse3JlZjpcInRodW1iXCIsY2xhc3M6XCJlbC1jb2xvci1hbHBoYS1zbGlkZXJfX3RodW1iXCIsc3R5bGU6e2xlZnQ6ZS50aHVtYkxlZnQrXCJweFwiLHRvcDplLnRodW1iVG9wK1wicHhcIn19LG51bGwsNCldLDIpfSxabi5fX2ZpbGU9XCJwYWNrYWdlcy9jb2xvci1waWNrZXIvc3JjL2NvbXBvbmVudHMvYWxwaGEtc2xpZGVyLnZ1ZVwiO3ZhciBKbj1lKHtwcm9wczp7Y29sb3JzOnt0eXBlOkFycmF5LHJlcXVpcmVkOiEwfSxjb2xvcjp7dHlwZTpPYmplY3QscmVxdWlyZWQ6ITB9fSxzZXR1cChlKXtjb25zdHtjdXJyZW50Q29sb3I6bH09YW8oKSxhPXQobihlLmNvbG9ycyxlLmNvbG9yKSk7ZnVuY3Rpb24gbihlLHQpe3JldHVybiBlLm1hcCgoZT0+e2NvbnN0IGw9bmV3IFduO3JldHVybiBsLmVuYWJsZUFscGhhPSEwLGwuZm9ybWF0PVwicmdiYVwiLGwuZnJvbVN0cmluZyhlKSxsLnNlbGVjdGVkPWwudmFsdWU9PT10LnZhbHVlLGx9KSl9cmV0dXJuIHkobCwoZT0+e2NvbnN0IHQ9bmV3IFduO3QuZnJvbVN0cmluZyhlKSxhLnZhbHVlLmZvckVhY2goKGU9PntlLnNlbGVjdGVkPXQuY29tcGFyZShlKX0pKX0pKSxnKCgoKT0+e2EudmFsdWU9bihlLmNvbG9ycyxlLmNvbG9yKX0pKSx7cmdiYUNvbG9yczphLGhhbmRsZVNlbGVjdDpmdW5jdGlvbih0KXtlLmNvbG9yLmZyb21TdHJpbmcoZS5jb2xvcnNbdF0pfX19fSk7Y29uc3QgZW89e2NsYXNzOlwiZWwtY29sb3ItcHJlZGVmaW5lXCJ9LHRvPXtjbGFzczpcImVsLWNvbG9yLXByZWRlZmluZV9fY29sb3JzXCJ9O0puLnJlbmRlcj1mdW5jdGlvbihlLHQsbCxvLGkscil7cmV0dXJuIGEoKSxuKFwiZGl2XCIsZW8sW3MoXCJkaXZcIix0byxbKGEoITApLG4oRSxudWxsLEgoZS5yZ2JhQ29sb3JzLCgodCxsKT0+KGEoKSxuKFwiZGl2XCIse2tleTplLmNvbG9yc1tsXSxjbGFzczpbXCJlbC1jb2xvci1wcmVkZWZpbmVfX2NvbG9yLXNlbGVjdG9yXCIse3NlbGVjdGVkOnQuc2VsZWN0ZWQsXCJpcy1hbHBoYVwiOnQuX2FscGhhPDEwMH1dLG9uQ2xpY2s6dD0+ZS5oYW5kbGVTZWxlY3QobCl9LFtzKFwiZGl2XCIse3N0eWxlOntcImJhY2tncm91bmQtY29sb3JcIjp0LnZhbHVlfX0sbnVsbCw0KV0sMTAsW1wib25DbGlja1wiXSkpKSksMTI4KSldKV0pfSxKbi5fX2ZpbGU9XCJwYWNrYWdlcy9jb2xvci1waWNrZXIvc3JjL2NvbXBvbmVudHMvcHJlZGVmaW5lLnZ1ZVwiO2NvbnN0IGxvPVN5bWJvbCgpLGFvPSgpPT53KGxvKTt2YXIgbm89ZSh7bmFtZTpcIkVsQ29sb3JQaWNrZXJcIixjb21wb25lbnRzOntFbFBvcHBlcjpTbCxFbElucHV0Old0LFN2UGFuZWw6cW4sSHVlU2xpZGVyOlFuLEFscGhhU2xpZGVyOlpuLEVsQnV0dG9uOiRsLFByZWRlZmluZTpKbn0sZGlyZWN0aXZlczp7Q2xpY2tPdXRzaWRlOk10fSxwcm9wczp7bW9kZWxWYWx1ZTpTdHJpbmcsc2hvd0FscGhhOkJvb2xlYW4sY29sb3JGb3JtYXQ6U3RyaW5nLGRpc2FibGVkOkJvb2xlYW4sc2l6ZTp7dHlwZTpTdHJpbmcsdmFsaWRhdG9yOkF0fSxwb3BwZXJDbGFzczpTdHJpbmcscHJlZGVmaW5lOkFycmF5fSxlbWl0czp7Y2hhbmdlOm51bGwsXCJhY3RpdmUtY2hhbmdlXCI6bnVsbCxbUHRdOm51bGx9LHNldHVwKGUse2VtaXQ6YX0pe2NvbnN0IG49cWUoKSxvPXcoXCJlbEZvcm1cIix7fSksaT13KFwiZWxGb3JtSXRlbVwiLHt9KSxyPXQobnVsbCkscz10KG51bGwpLHU9dChudWxsKSxkPXQobnVsbCksYz1mKG5ldyBXbih7ZW5hYmxlQWxwaGE6ZS5zaG93QWxwaGEsZm9ybWF0OmUuY29sb3JGb3JtYXR9KSkscD10KCExKSxoPXQoITEpLHY9dChcIlwiKSxtPWwoKCgpPT5lLm1vZGVsVmFsdWV8fGgudmFsdWU/ZnVuY3Rpb24oZSx0KXtpZighKGUgaW5zdGFuY2VvZiBXbikpdGhyb3cgRXJyb3IoXCJjb2xvciBzaG91bGQgYmUgaW5zdGFuY2Ugb2YgX2NvbG9yIENsYXNzXCIpO2NvbnN0e3I6bCxnOmEsYjpufT1lLnRvUmdiKCk7cmV0dXJuIHQ/YHJnYmEoJHtsfSwgJHthfSwgJHtufSwgJHtlLmdldChcImFscGhhXCIpLzEwMH0pYDpgcmdiKCR7bH0sICR7YX0sICR7bn0pYH0oYyxlLnNob3dBbHBoYSk6XCJ0cmFuc3BhcmVudFwiKSksZz1sKCgoKT0+ZS5zaXplfHxpLnNpemV8fG4uc2l6ZSkpLGI9bCgoKCk9PmUuZGlzYWJsZWR8fG8uZGlzYWJsZWQpKSxDPWwoKCgpPT5lLm1vZGVsVmFsdWV8fGgudmFsdWU/Yy52YWx1ZTpcIlwiKSk7eSgoKCk9PmUubW9kZWxWYWx1ZSksKGU9PntlP2UmJmUhPT1jLnZhbHVlJiZjLmZyb21TdHJpbmcoZSk6aC52YWx1ZT0hMX0pKSx5KEMsKGU9Pnt2LnZhbHVlPWUsYShcImFjdGl2ZS1jaGFuZ2VcIixlKX0pKSx5KCgoKT0+Yy52YWx1ZSksKCgpPT57ZS5tb2RlbFZhbHVlfHxoLnZhbHVlfHwoaC52YWx1ZT0hMCl9KSk7Y29uc3QgUz1sZSgoZnVuY3Rpb24oZSl7cC52YWx1ZT1lfSksMTAwKTtmdW5jdGlvbiBFKCl7aygoKCk9PntlLm1vZGVsVmFsdWU/Yy5mcm9tU3RyaW5nKGUubW9kZWxWYWx1ZSk6aC52YWx1ZT0hMX0pKX1yZXR1cm4gXygoKCk9PntlLm1vZGVsVmFsdWUmJihjLmZyb21TdHJpbmcoZS5tb2RlbFZhbHVlKSx2LnZhbHVlPUMudmFsdWUpfSkpLHkocCwoKCk9PntrKCgoKT0+e3ZhciBlLHQsbDtudWxsPT09KGU9ci52YWx1ZSl8fHZvaWQgMD09PWV8fGUudXBkYXRlKCksbnVsbD09PSh0PXMudmFsdWUpfHx2b2lkIDA9PT10fHx0LnVwZGF0ZSgpLG51bGw9PT0obD11LnZhbHVlKXx8dm9pZCAwPT09bHx8bC51cGRhdGUoKX0pKX0pKSx4KGxvLHtjdXJyZW50Q29sb3I6Q30pLHtjb2xvcjpjLGNvbG9yRGlzYWJsZWQ6Yixjb2xvclNpemU6ZyxkaXNwbGF5ZWRDb2xvcjptLHNob3dQYW5lbENvbG9yOmgsc2hvd1BpY2tlcjpwLGN1c3RvbUlucHV0OnYsaGFuZGxlQ29uZmlybTpmdW5jdGlvbigpe2MuZnJvbVN0cmluZyh2LnZhbHVlKX0saGlkZTpmdW5jdGlvbigpe1MoITEpLEUoKX0saGFuZGxlVHJpZ2dlcjpmdW5jdGlvbigpe2IudmFsdWV8fFMoIXAudmFsdWUpfSxjbGVhcjpmdW5jdGlvbigpe3ZhciB0O1MoITEpLGEoUHQsbnVsbCksYShcImNoYW5nZVwiLG51bGwpLG51bGwhPT1lLm1vZGVsVmFsdWUmJihudWxsPT09KHQ9aS5mb3JtSXRlbU1pdHQpfHx2b2lkIDA9PT10fHx0LmVtaXQoXCJlbC5mb3JtLmNoYW5nZVwiLG51bGwpKSxFKCl9LGNvbmZpcm1WYWx1ZTpmdW5jdGlvbigpe3ZhciBlO2NvbnN0IHQ9Yy52YWx1ZTthKFB0LHQpLGEoXCJjaGFuZ2VcIix0KSxudWxsPT09KGU9aS5mb3JtSXRlbU1pdHQpfHx2b2lkIDA9PT1lfHxlLmVtaXQoXCJlbC5mb3JtLmNoYW5nZVwiLHQpLFMoITEpfSx0OnFsLGh1ZTpyLHN2UGFuZWw6cyxhbHBoYTp1LHBvcHBlcjpkfX19KTtjb25zdCBvbz17Y2xhc3M6XCJlbC1jb2xvci1kcm9wZG93bl9fbWFpbi13cmFwcGVyXCJ9LGlvPXtjbGFzczpcImVsLWNvbG9yLWRyb3Bkb3duX19idG5zXCJ9LHJvPXtjbGFzczpcImVsLWNvbG9yLWRyb3Bkb3duX192YWx1ZVwifSxzbz17a2V5OjAsY2xhc3M6XCJlbC1jb2xvci1waWNrZXJfX21hc2tcIn0sdW89e2tleTowLGNsYXNzOlwiZWwtY29sb3ItcGlja2VyX19lbXB0eSBlbC1pY29uLWNsb3NlXCJ9LGNvPXtjbGFzczpcImVsLWNvbG9yLXBpY2tlcl9faWNvbiBlbC1pY29uLWFycm93LWRvd25cIn07bm8ucmVuZGVyPWZ1bmN0aW9uKGUsdCxsLG8sZCx2KXtjb25zdCBtPVAoXCJodWUtc2xpZGVyXCIpLGY9UChcInN2LXBhbmVsXCIpLGc9UChcImFscGhhLXNsaWRlclwiKSxiPVAoXCJwcmVkZWZpbmVcIikseT1QKFwiZWwtaW5wdXRcIiksaz1QKFwiZWwtYnV0dG9uXCIpLEM9UChcImVsLXBvcHBlclwiKSx4PUYoXCJjbGljay1vdXRzaWRlXCIpO3JldHVybiBhKCksbihDLHtyZWY6XCJwb3BwZXJcIix2aXNpYmxlOmUuc2hvd1BpY2tlcixcIm9uVXBkYXRlOnZpc2libGVcIjp0WzNdfHwodFszXT10PT5lLnNob3dQaWNrZXI9dCksZWZmZWN0OlwibGlnaHRcIixcIm1hbnVhbC1tb2RlXCI6XCJcIix0cmlnZ2VyOlwiY2xpY2tcIixcInNob3ctYXJyb3dcIjohMSxvZmZzZXQ6MCx0cmFuc2l0aW9uOlwiZWwtem9vbS1pbi10b3BcIixcImdwdS1hY2NlbGVyYXRpb25cIjohMSxcInBvcHBlci1jbGFzc1wiOlwiZWwtY29sb3ItcGlja2VyX19wYW5lbCBlbC1jb2xvci1kcm9wZG93biBcIitlLnBvcHBlckNsYXNzLFwic3RvcC1wb3BwZXItbW91c2UtZXZlbnRcIjohMX0se2RlZmF1bHQ6aSgoKCk9PltyKHMoXCJkaXZcIixudWxsLFtzKFwiZGl2XCIsb28sW3MobSx7cmVmOlwiaHVlXCIsY2xhc3M6XCJodWUtc2xpZGVyXCIsY29sb3I6ZS5jb2xvcix2ZXJ0aWNhbDpcIlwifSxudWxsLDgsW1wiY29sb3JcIl0pLHMoZix7cmVmOlwic3ZQYW5lbFwiLGNvbG9yOmUuY29sb3J9LG51bGwsOCxbXCJjb2xvclwiXSldKSxlLnNob3dBbHBoYT8oYSgpLG4oZyx7a2V5OjAscmVmOlwiYWxwaGFcIixjb2xvcjplLmNvbG9yfSxudWxsLDgsW1wiY29sb3JcIl0pKTp1KFwidi1pZlwiLCEwKSxlLnByZWRlZmluZT8oYSgpLG4oYix7a2V5OjEscmVmOlwicHJlZGVmaW5lXCIsY29sb3I6ZS5jb2xvcixjb2xvcnM6ZS5wcmVkZWZpbmV9LG51bGwsOCxbXCJjb2xvclwiLFwiY29sb3JzXCJdKSk6dShcInYtaWZcIiwhMCkscyhcImRpdlwiLGlvLFtzKFwic3BhblwiLHJvLFtzKHkse21vZGVsVmFsdWU6ZS5jdXN0b21JbnB1dCxcIm9uVXBkYXRlOm1vZGVsVmFsdWVcIjp0WzFdfHwodFsxXT10PT5lLmN1c3RvbUlucHV0PXQpLFwidmFsaWRhdGUtZXZlbnRcIjohMSxzaXplOlwibWluaVwiLG9uS2V5dXA6JChlLmhhbmRsZUNvbmZpcm0sW1wiZW50ZXJcIl0pLG9uQmx1cjplLmhhbmRsZUNvbmZpcm19LG51bGwsOCxbXCJtb2RlbFZhbHVlXCIsXCJvbktleXVwXCIsXCJvbkJsdXJcIl0pXSkscyhrLHtzaXplOlwibWluaVwiLHR5cGU6XCJ0ZXh0XCIsY2xhc3M6XCJlbC1jb2xvci1kcm9wZG93bl9fbGluay1idG5cIixvbkNsaWNrOmUuY2xlYXJ9LHtkZWZhdWx0OmkoKCgpPT5bYyhwKGUudChcImVsLmNvbG9ycGlja2VyLmNsZWFyXCIpKSwxKV0pKSxfOjF9LDgsW1wib25DbGlja1wiXSkscyhrLHtwbGFpbjpcIlwiLHNpemU6XCJtaW5pXCIsY2xhc3M6XCJlbC1jb2xvci1kcm9wZG93bl9fYnRuXCIsb25DbGljazplLmNvbmZpcm1WYWx1ZX0se2RlZmF1bHQ6aSgoKCk9PltjKHAoZS50KFwiZWwuY29sb3JwaWNrZXIuY29uZmlybVwiKSksMSldKSksXzoxfSw4LFtcIm9uQ2xpY2tcIl0pXSldLDUxMiksW1t4LGUuaGlkZV1dKV0pKSx0cmlnZ2VyOmkoKCgpPT5bcyhcImRpdlwiLHtjbGFzczpbXCJlbC1jb2xvci1waWNrZXJcIixlLmNvbG9yRGlzYWJsZWQ/XCJpcy1kaXNhYmxlZFwiOlwiXCIsZS5jb2xvclNpemU/XCJlbC1jb2xvci1waWNrZXItLVwiK2UuY29sb3JTaXplOlwiXCJdfSxbZS5jb2xvckRpc2FibGVkPyhhKCksbihcImRpdlwiLHNvKSk6dShcInYtaWZcIiwhMCkscyhcImRpdlwiLHtjbGFzczpcImVsLWNvbG9yLXBpY2tlcl9fdHJpZ2dlclwiLG9uQ2xpY2s6dFsyXXx8KHRbMl09KC4uLnQpPT5lLmhhbmRsZVRyaWdnZXIoLi4udCkpfSxbcyhcInNwYW5cIix7Y2xhc3M6W1wiZWwtY29sb3ItcGlja2VyX19jb2xvclwiLHtcImlzLWFscGhhXCI6ZS5zaG93QWxwaGF9XX0sW3MoXCJzcGFuXCIse2NsYXNzOlwiZWwtY29sb3ItcGlja2VyX19jb2xvci1pbm5lclwiLHN0eWxlOntiYWNrZ3JvdW5kQ29sb3I6ZS5kaXNwbGF5ZWRDb2xvcn19LG51bGwsNCksZS5tb2RlbFZhbHVlfHxlLnNob3dQYW5lbENvbG9yP3UoXCJ2LWlmXCIsITApOihhKCksbihcInNwYW5cIix1bykpXSwyKSxyKHMoXCJzcGFuXCIsY28sbnVsbCw1MTIpLFtbaCxlLm1vZGVsVmFsdWV8fGUuc2hvd1BhbmVsQ29sb3JdXSldKV0sMildKSksXzoxfSw4LFtcInZpc2libGVcIixcInBvcHBlci1jbGFzc1wiXSl9LG5vLl9fZmlsZT1cInBhY2thZ2VzL2NvbG9yLXBpY2tlci9zcmMvaW5kZXgudnVlXCIsbm8uaW5zdGFsbD1lPT57ZS5jb21wb25lbnQobm8ubmFtZSxubyl9O3ZhciBwbz1lKHtuYW1lOlwiRWxDb250YWluZXJcIixwcm9wczp7ZGlyZWN0aW9uOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiXCJ9fSxzZXR1cDooZSx7c2xvdHM6dH0pPT4oe2lzVmVydGljYWw6bCgoKCk9PntpZihcInZlcnRpY2FsXCI9PT1lLmRpcmVjdGlvbilyZXR1cm4hMDtpZihcImhvcml6b250YWxcIj09PWUuZGlyZWN0aW9uKXJldHVybiExO2lmKHQmJnQuZGVmYXVsdCl7cmV0dXJuIHQuZGVmYXVsdCgpLnNvbWUoKGU9Pntjb25zdCB0PWUudHlwZS5uYW1lO3JldHVyblwiRWxIZWFkZXJcIj09PXR8fFwiRWxGb290ZXJcIj09PXR9KSl9cmV0dXJuITF9KSl9KX0pO3BvLnJlbmRlcj1mdW5jdGlvbihlLHQsbCxvLGkscil7cmV0dXJuIGEoKSxuKFwic2VjdGlvblwiLHtjbGFzczpbXCJlbC1jb250YWluZXJcIix7XCJpcy12ZXJ0aWNhbFwiOmUuaXNWZXJ0aWNhbH1dfSxbZChlLiRzbG90cyxcImRlZmF1bHRcIildLDIpfSxwby5fX2ZpbGU9XCJwYWNrYWdlcy9jb250YWluZXIvc3JjL2NvbnRhaW5lci52dWVcIixwby5pbnN0YWxsPWU9PntlLmNvbXBvbmVudChwby5uYW1lLHBvKX07dmFyIGhvPWUoe3Byb3BzOntkYXRlOnt0eXBlOk9iamVjdH0sbWluRGF0ZTp7dHlwZTpPYmplY3R9LG1heERhdGU6e3R5cGU6T2JqZWN0fSxwYXJzZWRWYWx1ZTp7dHlwZTpbT2JqZWN0LEFycmF5XX0sc2VsZWN0aW9uTW9kZTp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcImRheVwifSxzaG93V2Vla051bWJlcjp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITF9LGRpc2FibGVkRGF0ZTp7dHlwZTpGdW5jdGlvbn0sY2VsbENsYXNzTmFtZTp7dHlwZTpGdW5jdGlvbn0scmFuZ2VTdGF0ZTp7dHlwZTpPYmplY3QsZGVmYXVsdDooKT0+KHtlbmREYXRlOm51bGwsc2VsZWN0aW5nOiExfSl9fSxlbWl0czpbXCJjaGFuZ2VyYW5nZVwiLFwicGlja1wiLFwic2VsZWN0XCJdLHNldHVwKGUsYSl7Y29uc3Qgbj10KG51bGwpLG89dChudWxsKSxpPXQoW1tdLFtdLFtdLFtdLFtdLFtdXSkscj1lLmRhdGUuJGxvY2FsZSgpLndlZWtTdGFydHx8NyxzPWUuZGF0ZS5sb2NhbGUoXCJlblwiKS5sb2NhbGVEYXRhKCkud2Vla2RheXNTaG9ydCgpLm1hcCgoZT0+ZS50b0xvd2VyQ2FzZSgpKSksdT1sKCgoKT0+cj4zPzctcjotcikpLGQ9bCgoKCk9Pntjb25zdCB0PWUuZGF0ZS5zdGFydE9mKFwibW9udGhcIik7cmV0dXJuIHQuc3VidHJhY3QodC5kYXkoKXx8NyxcImRheVwiKX0pKSxjPWwoKCgpPT5zLmNvbmNhdChzKS5zbGljZShyLHIrNykpKSxwPWwoKCgpPT57Y29uc3QgdD1lLmRhdGUuc3RhcnRPZihcIm1vbnRoXCIpLGw9dC5kYXkoKXx8NyxhPXQuZGF5c0luTW9udGgoKSxuPXQuc3VidHJhY3QoMSxcIm1vbnRoXCIpLmRheXNJbk1vbnRoKCksbz11LnZhbHVlLHI9aS52YWx1ZTtsZXQgcz0xO2NvbnN0IGM9XCJkYXRlc1wiPT09ZS5zZWxlY3Rpb25Nb2RlP0hlKGUucGFyc2VkVmFsdWUpOltdLHA9c2UoKS5zdGFydE9mKFwiZGF5XCIpO2ZvcihsZXQgdD0wO3Q8Njt0Kyspe2NvbnN0IGk9clt0XTtlLnNob3dXZWVrTnVtYmVyJiYoaVswXXx8KGlbMF09e3R5cGU6XCJ3ZWVrXCIsdGV4dDpkLnZhbHVlLmFkZCg3KnQrMSxcImRheVwiKS53ZWVrKCl9KSk7Zm9yKGxldCByPTA7cjw3O3IrKyl7bGV0IHU9aVtlLnNob3dXZWVrTnVtYmVyP3IrMTpyXTt1fHwodT17cm93OnQsY29sdW1uOnIsdHlwZTpcIm5vcm1hbFwiLGluUmFuZ2U6ITEsc3RhcnQ6ITEsZW5kOiExfSk7Y29uc3QgaD03KnQrcix2PWQudmFsdWUuYWRkKGgtbyxcImRheVwiKTt1LnR5cGU9XCJub3JtYWxcIjtjb25zdCBtPWUucmFuZ2VTdGF0ZS5lbmREYXRlfHxlLm1heERhdGV8fGUucmFuZ2VTdGF0ZS5zZWxlY3RpbmcmJmUubWluRGF0ZTt1LmluUmFuZ2U9ZS5taW5EYXRlJiZ2LmlzU2FtZU9yQWZ0ZXIoZS5taW5EYXRlLFwiZGF5XCIpJiZtJiZ2LmlzU2FtZU9yQmVmb3JlKG0sXCJkYXlcIiksdS5zdGFydD1lLm1pbkRhdGUmJnYuaXNTYW1lKGUubWluRGF0ZSxcImRheVwiKSx1LmVuZD1tJiZ2LmlzU2FtZShtLFwiZGF5XCIpO2lmKHYuaXNTYW1lKHAsXCJkYXlcIikmJih1LnR5cGU9XCJ0b2RheVwiKSx0Pj0wJiZ0PD0xKXtjb25zdCBlPWwrbzwwPzcrbCtvOmwrbztyKzcqdD49ZT91LnRleHQ9cysrOih1LnRleHQ9bi0oZS1yJTcpKzErNyp0LHUudHlwZT1cInByZXYtbW9udGhcIil9ZWxzZSBzPD1hP3UudGV4dD1zKys6KHUudGV4dD1zKystYSx1LnR5cGU9XCJuZXh0LW1vbnRoXCIpO2NvbnN0IGY9di50b0RhdGUoKTt1LnNlbGVjdGVkPWMuZmluZCgoZT0+ZS52YWx1ZU9mKCk9PT12LnZhbHVlT2YoKSkpLHUuZGlzYWJsZWQ9ZS5kaXNhYmxlZERhdGUmJmUuZGlzYWJsZWREYXRlKGYpLHUuY3VzdG9tQ2xhc3M9ZS5jZWxsQ2xhc3NOYW1lJiZlLmNlbGxDbGFzc05hbWUoZiksaVtlLnNob3dXZWVrTnVtYmVyP3IrMTpyXT11fWlmKFwid2Vla1wiPT09ZS5zZWxlY3Rpb25Nb2RlKXtjb25zdCB0PWUuc2hvd1dlZWtOdW1iZXI/MTowLGw9ZS5zaG93V2Vla051bWJlcj83OjYsYT12KGlbdCsxXSk7aVt0XS5pblJhbmdlPWEsaVt0XS5zdGFydD1hLGlbbF0uaW5SYW5nZT1hLGlbbF0uZW5kPWF9fXJldHVybiByfSkpLGg9KHQsbCk9Pntjb25zdCBhPTcqdCsobC0oZS5zaG93V2Vla051bWJlcj8xOjApKS11LnZhbHVlO3JldHVybiBkLnZhbHVlLmFkZChhLFwiZGF5XCIpfSx2PXQ9PntpZihcIndlZWtcIiE9PWUuc2VsZWN0aW9uTW9kZSlyZXR1cm4hMTtsZXQgbD1lLmRhdGUuc3RhcnRPZihcImRheVwiKTtpZihcInByZXYtbW9udGhcIj09PXQudHlwZSYmKGw9bC5zdWJ0cmFjdCgxLFwibW9udGhcIikpLFwibmV4dC1tb250aFwiPT09dC50eXBlJiYobD1sLmFkZCgxLFwibW9udGhcIikpLGw9bC5kYXRlKHBhcnNlSW50KHQudGV4dCwxMCkpLGUucGFyc2VkVmFsdWUmJiFBcnJheS5pc0FycmF5KGUucGFyc2VkVmFsdWUpKXtjb25zdCB0PShlLnBhcnNlZFZhbHVlLmRheSgpLXIrNyklNy0xO3JldHVybiBlLnBhcnNlZFZhbHVlLnN1YnRyYWN0KHQsXCJkYXlcIikuaXNTYW1lKGwsXCJkYXlcIil9cmV0dXJuITF9O3JldHVybntoYW5kbGVNb3VzZU1vdmU6dD0+e2lmKCFlLnJhbmdlU3RhdGUuc2VsZWN0aW5nKXJldHVybjtsZXQgbD10LnRhcmdldDtpZihcIlNQQU5cIj09PWwudGFnTmFtZSYmKGw9bC5wYXJlbnROb2RlLnBhcmVudE5vZGUpLFwiRElWXCI9PT1sLnRhZ05hbWUmJihsPWwucGFyZW50Tm9kZSksXCJURFwiIT09bC50YWdOYW1lKXJldHVybjtjb25zdCBpPWwucGFyZW50Tm9kZS5yb3dJbmRleC0xLHI9bC5jZWxsSW5kZXg7cC52YWx1ZVtpXVtyXS5kaXNhYmxlZHx8aT09PW4udmFsdWUmJnI9PT1vLnZhbHVlfHwobi52YWx1ZT1pLG8udmFsdWU9cixhLmVtaXQoXCJjaGFuZ2VyYW5nZVwiLHtzZWxlY3Rpbmc6ITAsZW5kRGF0ZTpoKGkscil9KSl9LHQ6cWwscm93czpwLGlzV2Vla0FjdGl2ZTp2LGdldENlbGxDbGFzc2VzOnQ9PntsZXQgbD1bXTtyZXR1cm5cIm5vcm1hbFwiIT09dC50eXBlJiZcInRvZGF5XCIhPT10LnR5cGV8fHQuZGlzYWJsZWQ/bC5wdXNoKHQudHlwZSk6KGwucHVzaChcImF2YWlsYWJsZVwiKSxcInRvZGF5XCI9PT10LnR5cGUmJmwucHVzaChcInRvZGF5XCIpKSxcImRheVwiIT09ZS5zZWxlY3Rpb25Nb2RlfHxcIm5vcm1hbFwiIT09dC50eXBlJiZcInRvZGF5XCIhPT10LnR5cGV8fCEoKHQsbCk9PiEhbCYmc2UobCkuaXNTYW1lKGUuZGF0ZS5kYXRlKE51bWJlcih0LnRleHQpKSxcImRheVwiKSkodCxlLnBhcnNlZFZhbHVlKXx8bC5wdXNoKFwiY3VycmVudFwiKSwhdC5pblJhbmdlfHxcIm5vcm1hbFwiIT09dC50eXBlJiZcInRvZGF5XCIhPT10LnR5cGUmJlwid2Vla1wiIT09ZS5zZWxlY3Rpb25Nb2RlfHwobC5wdXNoKFwiaW4tcmFuZ2VcIiksdC5zdGFydCYmbC5wdXNoKFwic3RhcnQtZGF0ZVwiKSx0LmVuZCYmbC5wdXNoKFwiZW5kLWRhdGVcIikpLHQuZGlzYWJsZWQmJmwucHVzaChcImRpc2FibGVkXCIpLHQuc2VsZWN0ZWQmJmwucHVzaChcInNlbGVjdGVkXCIpLHQuY3VzdG9tQ2xhc3MmJmwucHVzaCh0LmN1c3RvbUNsYXNzKSxsLmpvaW4oXCIgXCIpfSxXRUVLUzpjLGhhbmRsZUNsaWNrOnQ9PntsZXQgbD10LnRhcmdldDtpZihcIlNQQU5cIj09PWwudGFnTmFtZSYmKGw9bC5wYXJlbnROb2RlLnBhcmVudE5vZGUpLFwiRElWXCI9PT1sLnRhZ05hbWUmJihsPWwucGFyZW50Tm9kZSksXCJURFwiIT09bC50YWdOYW1lKXJldHVybjtjb25zdCBuPWwucGFyZW50Tm9kZS5yb3dJbmRleC0xLG89XCJ3ZWVrXCI9PT1lLnNlbGVjdGlvbk1vZGU/MTpsLmNlbGxJbmRleCxpPXAudmFsdWVbbl1bb107aWYoaS5kaXNhYmxlZHx8XCJ3ZWVrXCI9PT1pLnR5cGUpcmV0dXJuO2NvbnN0IHI9aChuLG8pO2lmKFwicmFuZ2VcIj09PWUuc2VsZWN0aW9uTW9kZSllLnJhbmdlU3RhdGUuc2VsZWN0aW5nPyhyPj1lLm1pbkRhdGU/YS5lbWl0KFwicGlja1wiLHttaW5EYXRlOmUubWluRGF0ZSxtYXhEYXRlOnJ9KTphLmVtaXQoXCJwaWNrXCIse21pbkRhdGU6cixtYXhEYXRlOmUubWluRGF0ZX0pLGEuZW1pdChcInNlbGVjdFwiLCExKSk6KGEuZW1pdChcInBpY2tcIix7bWluRGF0ZTpyLG1heERhdGU6bnVsbH0pLGEuZW1pdChcInNlbGVjdFwiLCEwKSk7ZWxzZSBpZihcImRheVwiPT09ZS5zZWxlY3Rpb25Nb2RlKWEuZW1pdChcInBpY2tcIixyKTtlbHNlIGlmKFwid2Vla1wiPT09ZS5zZWxlY3Rpb25Nb2RlKXtjb25zdCBlPXIud2VlaygpLHQ9ci55ZWFyKCkrXCJ3XCIrZTthLmVtaXQoXCJwaWNrXCIse3llYXI6ci55ZWFyKCksd2VlazplLHZhbHVlOnQsZGF0ZTpyfSl9ZWxzZSBpZihcImRhdGVzXCI9PT1lLnNlbGVjdGlvbk1vZGUpe2NvbnN0IHQ9aS5zZWxlY3RlZD9IZShlLnBhcnNlZFZhbHVlKS5maWx0ZXIoKGU9PmUudmFsdWVPZigpIT09ci52YWx1ZU9mKCkpKTpIZShlLnBhcnNlZFZhbHVlKS5jb25jYXQoW3JdKTthLmVtaXQoXCJwaWNrXCIsdCl9fX19fSk7Y29uc3Qgdm89e2tleTowfTtoby5yZW5kZXI9ZnVuY3Rpb24oZSx0LGwsbyxpLHIpe3JldHVybiBhKCksbihcInRhYmxlXCIse2NlbGxzcGFjaW5nOlwiMFwiLGNlbGxwYWRkaW5nOlwiMFwiLGNsYXNzOltcImVsLWRhdGUtdGFibGVcIix7XCJpcy13ZWVrLW1vZGVcIjpcIndlZWtcIj09PWUuc2VsZWN0aW9uTW9kZX1dLG9uQ2xpY2s6dFsxXXx8KHRbMV09KC4uLnQpPT5lLmhhbmRsZUNsaWNrKC4uLnQpKSxvbk1vdXNlbW92ZTp0WzJdfHwodFsyXT0oLi4udCk9PmUuaGFuZGxlTW91c2VNb3ZlKC4uLnQpKX0sW3MoXCJ0Ym9keVwiLG51bGwsW3MoXCJ0clwiLG51bGwsW2Uuc2hvd1dlZWtOdW1iZXI/KGEoKSxuKFwidGhcIix2byxwKGUudChcImVsLmRhdGVwaWNrZXIud2Vla1wiKSksMSkpOnUoXCJ2LWlmXCIsITApLChhKCEwKSxuKEUsbnVsbCxIKGUuV0VFS1MsKCh0LGwpPT4oYSgpLG4oXCJ0aFwiLHtrZXk6bH0scChlLnQoXCJlbC5kYXRlcGlja2VyLndlZWtzLlwiK3QpKSwxKSkpKSwxMjgpKV0pLChhKCEwKSxuKEUsbnVsbCxIKGUucm93cywoKHQsbCk9PihhKCksbihcInRyXCIse2tleTpsLGNsYXNzOltcImVsLWRhdGUtdGFibGVfX3Jvd1wiLHtjdXJyZW50OmUuaXNXZWVrQWN0aXZlKHRbMV0pfV19LFsoYSghMCksbihFLG51bGwsSCh0LCgodCxsKT0+KGEoKSxuKFwidGRcIix7a2V5OmwsY2xhc3M6ZS5nZXRDZWxsQ2xhc3Nlcyh0KX0sW3MoXCJkaXZcIixudWxsLFtzKFwic3BhblwiLG51bGwscCh0LnRleHQpLDEpXSldLDIpKSkpLDEyOCkpXSwyKSkpKSwxMjgpKV0pXSwzNCl9LGhvLl9fZmlsZT1cInBhY2thZ2VzL2RhdGUtcGlja2VyL3NyYy9kYXRlLXBpY2tlci1jb20vYmFzaWMtZGF0ZS10YWJsZS52dWVcIjt2YXIgbW89ZSh7cHJvcHM6e2Rpc2FibGVkRGF0ZTp7dHlwZTpGdW5jdGlvbn0sc2VsZWN0aW9uTW9kZTp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIm1vbnRoXCJ9LG1pbkRhdGU6e3R5cGU6T2JqZWN0fSxtYXhEYXRlOnt0eXBlOk9iamVjdH0sZGF0ZTp7dHlwZTpPYmplY3R9LHBhcnNlZFZhbHVlOnt0eXBlOk9iamVjdH0scmFuZ2VTdGF0ZTp7dHlwZTpPYmplY3QsZGVmYXVsdDooKT0+KHtlbmREYXRlOm51bGwsc2VsZWN0aW5nOiExfSl9fSxlbWl0czpbXCJjaGFuZ2VyYW5nZVwiLFwicGlja1wiLFwic2VsZWN0XCJdLHNldHVwKGUsYSl7Y29uc3Qgbj10KGUuZGF0ZS5sb2NhbGUoXCJlblwiKS5sb2NhbGVEYXRhKCkubW9udGhzU2hvcnQoKS5tYXAoKGU9PmUudG9Mb3dlckNhc2UoKSkpKSxvPXQoW1tdLFtdLFtdXSksaT10KG51bGwpLHI9dChudWxsKSxzPWwoKCgpPT57Y29uc3QgdD1vLnZhbHVlLGw9c2UoKS5zdGFydE9mKFwibW9udGhcIik7Zm9yKGxldCBhPTA7YTwzO2ErKyl7Y29uc3Qgbj10W2FdO2ZvcihsZXQgdD0wO3Q8NDt0Kyspe2xldCBvPW5bdF07b3x8KG89e3JvdzphLGNvbHVtbjp0LHR5cGU6XCJub3JtYWxcIixpblJhbmdlOiExLHN0YXJ0OiExLGVuZDohMX0pLG8udHlwZT1cIm5vcm1hbFwiO2NvbnN0IGk9NCphK3Qscj1lLmRhdGUuc3RhcnRPZihcInllYXJcIikubW9udGgoaSkscz1lLnJhbmdlU3RhdGUuZW5kRGF0ZXx8ZS5tYXhEYXRlfHxlLnJhbmdlU3RhdGUuc2VsZWN0aW5nJiZlLm1pbkRhdGU7by5pblJhbmdlPWUubWluRGF0ZSYmci5pc1NhbWVPckFmdGVyKGUubWluRGF0ZSxcIm1vbnRoXCIpJiZzJiZyLmlzU2FtZU9yQmVmb3JlKHMsXCJtb250aFwiKSxvLnN0YXJ0PWUubWluRGF0ZSYmci5pc1NhbWUoZS5taW5EYXRlLFwibW9udGhcIiksby5lbmQ9cyYmci5pc1NhbWUocyxcIm1vbnRoXCIpO2wuaXNTYW1lKHIpJiYoby50eXBlPVwidG9kYXlcIiksby50ZXh0PWk7bGV0IHU9ci50b0RhdGUoKTtvLmRpc2FibGVkPWUuZGlzYWJsZWREYXRlJiZlLmRpc2FibGVkRGF0ZSh1KSxuW3RdPW99fXJldHVybiB0fSkpO3JldHVybntoYW5kbGVNb3VzZU1vdmU6dD0+e2lmKCFlLnJhbmdlU3RhdGUuc2VsZWN0aW5nKXJldHVybjtsZXQgbD10LnRhcmdldDtpZihcIkFcIj09PWwudGFnTmFtZSYmKGw9bC5wYXJlbnROb2RlLnBhcmVudE5vZGUpLFwiRElWXCI9PT1sLnRhZ05hbWUmJihsPWwucGFyZW50Tm9kZSksXCJURFwiIT09bC50YWdOYW1lKXJldHVybjtjb25zdCBuPWwucGFyZW50Tm9kZS5yb3dJbmRleCxvPWwuY2VsbEluZGV4O3MudmFsdWVbbl1bb10uZGlzYWJsZWR8fG49PT1pLnZhbHVlJiZvPT09ci52YWx1ZXx8KGkudmFsdWU9bixyLnZhbHVlPW8sYS5lbWl0KFwiY2hhbmdlcmFuZ2VcIix7c2VsZWN0aW5nOiEwLGVuZERhdGU6ZS5kYXRlLnN0YXJ0T2YoXCJ5ZWFyXCIpLm1vbnRoKDQqbitvKX0pKX0saGFuZGxlTW9udGhUYWJsZUNsaWNrOnQ9PntsZXQgbD10LnRhcmdldDtpZihcIkFcIj09PWwudGFnTmFtZSYmKGw9bC5wYXJlbnROb2RlLnBhcmVudE5vZGUpLFwiRElWXCI9PT1sLnRhZ05hbWUmJihsPWwucGFyZW50Tm9kZSksXCJURFwiIT09bC50YWdOYW1lKXJldHVybjtpZihudChsLFwiZGlzYWJsZWRcIikpcmV0dXJuO2NvbnN0IG49bC5jZWxsSW5kZXgsbz00KmwucGFyZW50Tm9kZS5yb3dJbmRleCtuLGk9ZS5kYXRlLnN0YXJ0T2YoXCJ5ZWFyXCIpLm1vbnRoKG8pO1wicmFuZ2VcIj09PWUuc2VsZWN0aW9uTW9kZT9lLnJhbmdlU3RhdGUuc2VsZWN0aW5nPyhpPj1lLm1pbkRhdGU/YS5lbWl0KFwicGlja1wiLHttaW5EYXRlOmUubWluRGF0ZSxtYXhEYXRlOml9KTphLmVtaXQoXCJwaWNrXCIse21pbkRhdGU6aSxtYXhEYXRlOmUubWluRGF0ZX0pLGEuZW1pdChcInNlbGVjdFwiLCExKSk6KGEuZW1pdChcInBpY2tcIix7bWluRGF0ZTppLG1heERhdGU6bnVsbH0pLGEuZW1pdChcInNlbGVjdFwiLCEwKSk6YS5lbWl0KFwicGlja1wiLG8pfSxyb3dzOnMsZ2V0Q2VsbFN0eWxlOnQ9Pntjb25zdCBsPXt9LGE9ZS5kYXRlLnllYXIoKSxuPW5ldyBEYXRlLG89dC50ZXh0O3JldHVybiBsLmRpc2FibGVkPSEhZS5kaXNhYmxlZERhdGUmJigoZSx0KT0+e2NvbnN0IGw9c2UoKS5zdGFydE9mKFwibW9udGhcIikubW9udGgodCkueWVhcihlKSxhPWwuZGF5c0luTW9udGgoKTtyZXR1cm4gQ2EoYSkubWFwKChlPT5sLmFkZChlLFwiZGF5XCIpLnRvRGF0ZSgpKSl9KShhLG8pLmV2ZXJ5KGUuZGlzYWJsZWREYXRlKSxsLmN1cnJlbnQ9SGUoZS5wYXJzZWRWYWx1ZSkuZmluZEluZGV4KChlPT5lLnllYXIoKT09PWEmJmUubW9udGgoKT09PW8pKT49MCxsLnRvZGF5PW4uZ2V0RnVsbFllYXIoKT09PWEmJm4uZ2V0TW9udGgoKT09PW8sdC5pblJhbmdlJiYobFtcImluLXJhbmdlXCJdPSEwLHQuc3RhcnQmJihsW1wic3RhcnQtZGF0ZVwiXT0hMCksdC5lbmQmJihsW1wiZW5kLWRhdGVcIl09ITApKSxsfSx0OnFsLG1vbnRoczpufX19KTtjb25zdCBmbz17Y2xhc3M6XCJjZWxsXCJ9O21vLnJlbmRlcj1mdW5jdGlvbihlLHQsbCxvLGkscil7cmV0dXJuIGEoKSxuKFwidGFibGVcIix7Y2xhc3M6XCJlbC1tb250aC10YWJsZVwiLG9uQ2xpY2s6dFsxXXx8KHRbMV09KC4uLnQpPT5lLmhhbmRsZU1vbnRoVGFibGVDbGljayguLi50KSksb25Nb3VzZW1vdmU6dFsyXXx8KHRbMl09KC4uLnQpPT5lLmhhbmRsZU1vdXNlTW92ZSguLi50KSl9LFtzKFwidGJvZHlcIixudWxsLFsoYSghMCksbihFLG51bGwsSChlLnJvd3MsKCh0LGwpPT4oYSgpLG4oXCJ0clwiLHtrZXk6bH0sWyhhKCEwKSxuKEUsbnVsbCxIKHQsKCh0LGwpPT4oYSgpLG4oXCJ0ZFwiLHtrZXk6bCxjbGFzczplLmdldENlbGxTdHlsZSh0KX0sW3MoXCJkaXZcIixudWxsLFtzKFwiYVwiLGZvLHAoZS50KFwiZWwuZGF0ZXBpY2tlci5tb250aHMuXCIrZS5tb250aHNbdC50ZXh0XSkpLDEpXSldLDIpKSkpLDEyOCkpXSkpKSksMTI4KSldKV0sMzIpfSxtby5fX2ZpbGU9XCJwYWNrYWdlcy9kYXRlLXBpY2tlci9zcmMvZGF0ZS1waWNrZXItY29tL2Jhc2ljLW1vbnRoLXRhYmxlLnZ1ZVwiO3ZhciBnbz1lKHtwcm9wczp7ZGlzYWJsZWREYXRlOnt0eXBlOkZ1bmN0aW9ufSxwYXJzZWRWYWx1ZTp7dHlwZTpPYmplY3R9LGRhdGU6e3R5cGU6T2JqZWN0fX0sZW1pdHM6W1wicGlja1wiXSxzZXR1cDooZSx0KT0+KHtzdGFydFllYXI6bCgoKCk9PjEwKk1hdGguZmxvb3IoZS5kYXRlLnllYXIoKS8xMCkpKSxnZXRDZWxsU3R5bGU6dD0+e2NvbnN0IGw9e30sYT1zZSgpO3JldHVybiBsLmRpc2FibGVkPSEhZS5kaXNhYmxlZERhdGUmJihlPT57Y29uc3QgdD1zZSgpLnN0YXJ0T2YoXCJ5ZWFyXCIpLGw9c2UoZSkuaXNMZWFwWWVhcigpPzM2NjozNjU7cmV0dXJuIENhKGwpLm1hcCgoZT0+dC5hZGQoZSxcImRheVwiKS50b0RhdGUoKSkpfSkodCkuZXZlcnkoZS5kaXNhYmxlZERhdGUpLGwuY3VycmVudD1IZShlLnBhcnNlZFZhbHVlKS5maW5kSW5kZXgoKGU9PmUueWVhcigpPT09dCkpPj0wLGwudG9kYXk9YS55ZWFyKCk9PT10LGx9LGhhbmRsZVllYXJUYWJsZUNsaWNrOmU9Pntjb25zdCBsPWUudGFyZ2V0O2lmKFwiQVwiPT09bC50YWdOYW1lKXtpZihudChsLnBhcmVudE5vZGUsXCJkaXNhYmxlZFwiKSlyZXR1cm47Y29uc3QgZT1sLnRleHRDb250ZW50fHxsLmlubmVyVGV4dDt0LmVtaXQoXCJwaWNrXCIsTnVtYmVyKGUpKX19fSl9KTtjb25zdCBibz17Y2xhc3M6XCJjZWxsXCJ9LHlvPXtjbGFzczpcImNlbGxcIn0sa289e2NsYXNzOlwiY2VsbFwifSxDbz17Y2xhc3M6XCJjZWxsXCJ9LHhvPXtjbGFzczpcImNlbGxcIn0sd289e2NsYXNzOlwiY2VsbFwifSxfbz17Y2xhc3M6XCJjZWxsXCJ9LFNvPXtjbGFzczpcImNlbGxcIn0sRW89e2NsYXNzOlwiY2VsbFwifSxNbz17Y2xhc3M6XCJjZWxsXCJ9LFRvPXMoXCJ0ZFwiLG51bGwsbnVsbCwtMSksTm89cyhcInRkXCIsbnVsbCxudWxsLC0xKTtnby5yZW5kZXI9ZnVuY3Rpb24oZSx0LGwsbyxpLHIpe3JldHVybiBhKCksbihcInRhYmxlXCIse2NsYXNzOlwiZWwteWVhci10YWJsZVwiLG9uQ2xpY2s6dFsxXXx8KHRbMV09KC4uLnQpPT5lLmhhbmRsZVllYXJUYWJsZUNsaWNrKC4uLnQpKX0sW3MoXCJ0Ym9keVwiLG51bGwsW3MoXCJ0clwiLG51bGwsW3MoXCJ0ZFwiLHtjbGFzczpbXCJhdmFpbGFibGVcIixlLmdldENlbGxTdHlsZShlLnN0YXJ0WWVhciswKV19LFtzKFwiYVwiLGJvLHAoZS5zdGFydFllYXIpLDEpXSwyKSxzKFwidGRcIix7Y2xhc3M6W1wiYXZhaWxhYmxlXCIsZS5nZXRDZWxsU3R5bGUoZS5zdGFydFllYXIrMSldfSxbcyhcImFcIix5byxwKGUuc3RhcnRZZWFyKzEpLDEpXSwyKSxzKFwidGRcIix7Y2xhc3M6W1wiYXZhaWxhYmxlXCIsZS5nZXRDZWxsU3R5bGUoZS5zdGFydFllYXIrMildfSxbcyhcImFcIixrbyxwKGUuc3RhcnRZZWFyKzIpLDEpXSwyKSxzKFwidGRcIix7Y2xhc3M6W1wiYXZhaWxhYmxlXCIsZS5nZXRDZWxsU3R5bGUoZS5zdGFydFllYXIrMyldfSxbcyhcImFcIixDbyxwKGUuc3RhcnRZZWFyKzMpLDEpXSwyKV0pLHMoXCJ0clwiLG51bGwsW3MoXCJ0ZFwiLHtjbGFzczpbXCJhdmFpbGFibGVcIixlLmdldENlbGxTdHlsZShlLnN0YXJ0WWVhcis0KV19LFtzKFwiYVwiLHhvLHAoZS5zdGFydFllYXIrNCksMSldLDIpLHMoXCJ0ZFwiLHtjbGFzczpbXCJhdmFpbGFibGVcIixlLmdldENlbGxTdHlsZShlLnN0YXJ0WWVhcis1KV19LFtzKFwiYVwiLHdvLHAoZS5zdGFydFllYXIrNSksMSldLDIpLHMoXCJ0ZFwiLHtjbGFzczpbXCJhdmFpbGFibGVcIixlLmdldENlbGxTdHlsZShlLnN0YXJ0WWVhcis2KV19LFtzKFwiYVwiLF9vLHAoZS5zdGFydFllYXIrNiksMSldLDIpLHMoXCJ0ZFwiLHtjbGFzczpbXCJhdmFpbGFibGVcIixlLmdldENlbGxTdHlsZShlLnN0YXJ0WWVhcis3KV19LFtzKFwiYVwiLFNvLHAoZS5zdGFydFllYXIrNyksMSldLDIpXSkscyhcInRyXCIsbnVsbCxbcyhcInRkXCIse2NsYXNzOltcImF2YWlsYWJsZVwiLGUuZ2V0Q2VsbFN0eWxlKGUuc3RhcnRZZWFyKzgpXX0sW3MoXCJhXCIsRW8scChlLnN0YXJ0WWVhcis4KSwxKV0sMikscyhcInRkXCIse2NsYXNzOltcImF2YWlsYWJsZVwiLGUuZ2V0Q2VsbFN0eWxlKGUuc3RhcnRZZWFyKzkpXX0sW3MoXCJhXCIsTW8scChlLnN0YXJ0WWVhcis5KSwxKV0sMiksVG8sTm9dKV0pXSl9LGdvLl9fZmlsZT1cInBhY2thZ2VzL2RhdGUtcGlja2VyL3NyYy9kYXRlLXBpY2tlci1jb20vYmFzaWMteWVhci10YWJsZS52dWVcIjt2YXIgRG89ZSh7Y29tcG9uZW50czp7RGF0ZVRhYmxlOmhvLEVsSW5wdXQ6V3QsRWxCdXR0b246JGwsVGltZVBpY2tQYW5lbDpzYSxNb250aFRhYmxlOm1vLFllYXJUYWJsZTpnb30sZGlyZWN0aXZlczp7Y2xpY2tvdXRzaWRlOk10fSxwcm9wczp7dmlzaWJsZTp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITF9LHBhcnNlZFZhbHVlOnt0eXBlOltPYmplY3QsQXJyYXldfSxmb3JtYXQ6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJcIn0sdHlwZTp7dHlwZTpTdHJpbmcscmVxdWlyZWQ6ITB9fSxlbWl0czpbXCJwaWNrXCIsXCJzZXQtcGlja2VyLW9wdGlvblwiXSxzZXR1cChlLGEpe2NvbnN0IG49dChzZSgpKSxvPWwoKCgpPT5uLnZhbHVlLm1vbnRoKCkpKSxpPWwoKCgpPT5uLnZhbHVlLnllYXIoKSkpLHI9dChbXSkscz10KG51bGwpLHU9dChudWxsKSxkPXQ9PiEoci52YWx1ZS5sZW5ndGg+MCl8fChyLnZhbHVlLGUuZm9ybWF0LCEwKSxjPWU9PntpZihnLnZhbHVlKXJldHVybiBlLm1pbGxpc2Vjb25kKDApO2lmKFApe3JldHVybiBzZShQKS55ZWFyKGUueWVhcigpKS5tb250aChlLm1vbnRoKCkpLmRhdGUoZS5kYXRlKCkpfXJldHVybiBlLnN0YXJ0T2YoXCJkYXlcIil9LHA9KGUsLi4udCk9PntpZihlKWlmKEFycmF5LmlzQXJyYXkoZSkpe2NvbnN0IGw9ZS5tYXAoYyk7YS5lbWl0KFwicGlja1wiLGwsLi4udCl9ZWxzZSBhLmVtaXQoXCJwaWNrXCIsYyhlKSwuLi50KTtlbHNlIGEuZW1pdChcInBpY2tcIixlLC4uLnQpO3MudmFsdWU9bnVsbCx1LnZhbHVlPW51bGx9LGg9dChcImRhdGVcIiksdj1sKCgoKT0+e2NvbnN0IGU9cWwoXCJlbC5kYXRlcGlja2VyLnllYXJcIik7aWYoXCJ5ZWFyXCI9PT1oLnZhbHVlKXtjb25zdCB0PTEwKk1hdGguZmxvb3IoaS52YWx1ZS8xMCk7cmV0dXJuIGU/dCtcIiBcIitlK1wiIC0gXCIrKHQrOSkrXCIgXCIrZTp0K1wiIC0gXCIrKHQrOSl9cmV0dXJuIGkudmFsdWUrXCIgXCIrZX0pKSxtPWwoKCgpPT5bXCJ3ZWVrXCIsXCJtb250aFwiLFwieWVhclwiLFwiZGF0ZXNcIl0uaW5jbHVkZXMoZS50eXBlKT9lLnR5cGU6XCJkYXlcIikpO3koKCgpPT5tLnZhbHVlKSwoZT0+e1tcIm1vbnRoXCIsXCJ5ZWFyXCJdLmluY2x1ZGVzKGUpP2gudmFsdWU9ZTpoLnZhbHVlPVwiZGF0ZVwifSkse2ltbWVkaWF0ZTohMH0pO2NvbnN0IGY9bCgoKCk9PiEhTi5sZW5ndGgpKSxnPWwoKCgpPT5cImRhdGV0aW1lXCI9PT1lLnR5cGV8fFwiZGF0ZXRpbWVyYW5nZVwiPT09ZS50eXBlKSksYj1sKCgoKT0+Zy52YWx1ZXx8XCJkYXRlc1wiPT09bS52YWx1ZSkpLGs9bCgoKCk9PndhKGUuZm9ybWF0KSkpLEM9bCgoKCk9PnhhKGUuZm9ybWF0KSkpLHg9bCgoKCk9PnUudmFsdWU/dS52YWx1ZTplLnBhcnNlZFZhbHVlfHxWPyhlLnBhcnNlZFZhbHVlfHxuLnZhbHVlKS5mb3JtYXQoay52YWx1ZSk6dm9pZCAwKSksXz1sKCgoKT0+cy52YWx1ZT9zLnZhbHVlOmUucGFyc2VkVmFsdWV8fFY/KGUucGFyc2VkVmFsdWV8fG4udmFsdWUpLmZvcm1hdChDLnZhbHVlKTp2b2lkIDApKSxTPXQoITEpLEU9KCk9PnNlKFYpLE09ZT0+e2NvbnN0IHQ9e3llYXI6ezM4Oi00LDQwOjQsMzc6LTEsMzk6MSxvZmZzZXQ6KGUsdCk9PmUuc2V0RnVsbFllYXIoZS5nZXRGdWxsWWVhcigpK3QpfSxtb250aDp7Mzg6LTQsNDA6NCwzNzotMSwzOToxLG9mZnNldDooZSx0KT0+ZS5zZXRNb250aChlLmdldE1vbnRoKCkrdCl9LHdlZWs6ezM4Oi0xLDQwOjEsMzc6LTEsMzk6MSxvZmZzZXQ6KGUsdCk9PmUuc2V0RGF0ZShlLmdldERhdGUoKSs3KnQpfSxkYXk6ezM4Oi03LDQwOjcsMzc6LTEsMzk6MSxvZmZzZXQ6KGUsdCk9PmUuc2V0RGF0ZShlLmdldERhdGUoKSt0KX19LGw9bi52YWx1ZS50b0RhdGUoKTtmb3IoO01hdGguYWJzKG4udmFsdWUuZGlmZihsLFwieWVhclwiLCEwKSk8MTspe2NvbnN0IG89dFttLnZhbHVlXTtpZihvLm9mZnNldChsLG9bZV0pLEQmJkQobCkpY29udGludWU7Y29uc3QgaT1zZShsKTtuLnZhbHVlPWksYS5lbWl0KFwicGlja1wiLGksITApO2JyZWFrfX07YS5lbWl0KFwic2V0LXBpY2tlci1vcHRpb25cIixbXCJpc1ZhbGlkVmFsdWVcIixlPT5lLmlzVmFsaWQoKSYmKCFEfHwhRChlLnRvRGF0ZSgpKSldKSxhLmVtaXQoXCJzZXQtcGlja2VyLW9wdGlvblwiLFtcImZvcm1hdFRvU3RyaW5nXCIsdD0+XCJkYXRlc1wiPT09bS52YWx1ZT90Lm1hcCgodD0+dC5mb3JtYXQoZS5mb3JtYXQpKSk6dC5mb3JtYXQoZS5mb3JtYXQpXSksYS5lbWl0KFwic2V0LXBpY2tlci1vcHRpb25cIixbXCJwYXJzZVVzZXJJbnB1dFwiLHQ9PnNlKHQsZS5mb3JtYXQpXSksYS5lbWl0KFwic2V0LXBpY2tlci1vcHRpb25cIixbXCJoYW5kbGVLZXlkb3duXCIsdD0+e2NvbnN0e2NvZGU6bCxrZXlDb2RlOmF9PXQsbz1bZnQudXAsZnQuZG93bixmdC5sZWZ0LGZ0LnJpZ2h0XTtlLnZpc2libGUmJiFTLnZhbHVlJiYoby5pbmNsdWRlcyhsKSYmKE0oYSksdC5zdG9wUHJvcGFnYXRpb24oKSx0LnByZXZlbnREZWZhdWx0KCkpLGw9PT1mdC5lbnRlciYmbnVsbD09PXMudmFsdWUmJm51bGw9PT11LnZhbHVlJiZwKG4sITEpKX1dKTtjb25zdCBUPXcoXCJFUF9QSUNLRVJfQkFTRVwiKSx7c2hvcnRjdXRzOk4sZGlzYWJsZWREYXRlOkQsY2VsbENsYXNzTmFtZTpPLGRlZmF1bHRUaW1lOlAsZGVmYXVsdFZhbHVlOlYsYXJyb3dDb250cm9sOkl9PVQucHJvcHM7cmV0dXJuIHkoKCgpPT5lLnBhcnNlZFZhbHVlKSwoZT0+e2lmKGUpe2lmKFwiZGF0ZXNcIj09PW0udmFsdWUpcmV0dXJuO2lmKEFycmF5LmlzQXJyYXkoZSkpcmV0dXJuO24udmFsdWU9ZX1lbHNlIG4udmFsdWU9RSgpfSkse2ltbWVkaWF0ZTohMH0pLHtoYW5kbGVUaW1lUGljazoodCxsLGEpPT57Y29uc3Qgbz1lLnBhcnNlZFZhbHVlP2UucGFyc2VkVmFsdWUuaG91cih0LmhvdXIoKSkubWludXRlKHQubWludXRlKCkpLnNlY29uZCh0LnNlY29uZCgpKTp0O24udmFsdWU9byxwKG4udmFsdWUsITApLGF8fChTLnZhbHVlPWwpfSxoYW5kbGVUaW1lUGlja0Nsb3NlOigpPT57Uy52YWx1ZT0hMX0sb25UaW1lUGlja2VySW5wdXRGb2N1czooKT0+e1MudmFsdWU9ITB9LHRpbWVQaWNrZXJWaXNpYmxlOlMsdmlzaWJsZVRpbWU6eCx2aXNpYmxlRGF0ZTpfLHNob3dUaW1lOmcsY2hhbmdlVG9Ob3c6KCk9Pntjb25zdCBlPXNlKCkudG9EYXRlKCk7RCYmRChlKXx8IWQoKXx8KG4udmFsdWU9c2UoKSxwKG4udmFsdWUpKX0sb25Db25maXJtOigpPT57aWYoXCJkYXRlc1wiPT09bS52YWx1ZSlwKGUucGFyc2VkVmFsdWUpO2Vsc2V7bGV0IHQ9ZS5wYXJzZWRWYWx1ZTtpZighdCl7Y29uc3QgZT1zZShQKSxsPUUoKTt0PWUueWVhcihsLnllYXIoKSkubW9udGgobC5tb250aCgpKS5kYXRlKGwuZGF0ZSgpKX1uLnZhbHVlPXQscCh0KX19LGZvb3RlclZpc2libGU6YixoYW5kbGVZZWFyUGljazplPT57XCJ5ZWFyXCI9PT1tLnZhbHVlPyhuLnZhbHVlPW4udmFsdWUuc3RhcnRPZihcInllYXJcIikueWVhcihlKSxwKG4udmFsdWUpKToobi52YWx1ZT1uLnZhbHVlLnllYXIoZSksaC52YWx1ZT1cIm1vbnRoXCIpfSxzaG93TW9udGhQaWNrZXI6KCk9PntoLnZhbHVlPVwibW9udGhcIn0sc2hvd1llYXJQaWNrZXI6KCk9PntoLnZhbHVlPVwieWVhclwifSxoYW5kbGVNb250aFBpY2s6ZT0+e24udmFsdWU9bi52YWx1ZS5zdGFydE9mKFwibW9udGhcIikubW9udGgoZSksXCJtb250aFwiPT09bS52YWx1ZT9wKG4udmFsdWUpOmgudmFsdWU9XCJkYXRlXCJ9LGhhc1Nob3J0Y3V0czpmLHNob3J0Y3V0czpOLGFycm93Q29udHJvbDpJLGRpc2FibGVkRGF0ZTpELGNlbGxDbGFzc05hbWU6TyxzZWxlY3Rpb25Nb2RlOm0saGFuZGxlU2hvcnRjdXRDbGljazplPT57ZS52YWx1ZT9wKHNlKGUudmFsdWUpKTplLm9uQ2xpY2smJmUub25DbGljayhhKX0scHJldlllYXJfOigpPT57XCJ5ZWFyXCI9PT1oLnZhbHVlP24udmFsdWU9bi52YWx1ZS5zdWJ0cmFjdCgxMCxcInllYXJcIik6bi52YWx1ZT1uLnZhbHVlLnN1YnRyYWN0KDEsXCJ5ZWFyXCIpfSxuZXh0WWVhcl86KCk9PntcInllYXJcIj09PWgudmFsdWU/bi52YWx1ZT1uLnZhbHVlLmFkZCgxMCxcInllYXJcIik6bi52YWx1ZT1uLnZhbHVlLmFkZCgxLFwieWVhclwiKX0scHJldk1vbnRoXzooKT0+e24udmFsdWU9bi52YWx1ZS5zdWJ0cmFjdCgxLFwibW9udGhcIil9LG5leHRNb250aF86KCk9PntuLnZhbHVlPW4udmFsdWUuYWRkKDEsXCJtb250aFwiKX0saW5uZXJEYXRlOm4sdDpxbCx5ZWFyTGFiZWw6dixjdXJyZW50VmlldzpoLG1vbnRoOm8saGFuZGxlRGF0ZVBpY2s6dD0+e2lmKFwiZGF5XCI9PT1tLnZhbHVlKXtsZXQgbD1lLnBhcnNlZFZhbHVlP2UucGFyc2VkVmFsdWUueWVhcih0LnllYXIoKSkubW9udGgodC5tb250aCgpKS5kYXRlKHQuZGF0ZSgpKTp0O2QoKXx8KGw9ci52YWx1ZVswXVswXS55ZWFyKHQueWVhcigpKS5tb250aCh0Lm1vbnRoKCkpLmRhdGUodC5kYXRlKCkpKSxuLnZhbHVlPWwscChsLGcudmFsdWUpfWVsc2VcIndlZWtcIj09PW0udmFsdWU/cCh0LmRhdGUpOlwiZGF0ZXNcIj09PW0udmFsdWUmJnAodCwhMCl9LGhhbmRsZVZpc2libGVUaW1lQ2hhbmdlOmU9Pntjb25zdCB0PXNlKGUsay52YWx1ZSk7dC5pc1ZhbGlkKCkmJmQoKSYmKG4udmFsdWU9dC55ZWFyKG4udmFsdWUueWVhcigpKS5tb250aChuLnZhbHVlLm1vbnRoKCkpLmRhdGUobi52YWx1ZS5kYXRlKCkpLHUudmFsdWU9bnVsbCxTLnZhbHVlPSExLHAobi52YWx1ZSwhMCkpfSxoYW5kbGVWaXNpYmxlRGF0ZUNoYW5nZTplPT57Y29uc3QgdD1zZShlLEMudmFsdWUpO2lmKHQuaXNWYWxpZCgpKXtpZihEJiZEKHQudG9EYXRlKCkpKXJldHVybjtuLnZhbHVlPXQuaG91cihuLnZhbHVlLmhvdXIoKSkubWludXRlKG4udmFsdWUubWludXRlKCkpLnNlY29uZChuLnZhbHVlLnNlY29uZCgpKSxzLnZhbHVlPW51bGwscChuLnZhbHVlLCEwKX19LHRpbWVGb3JtYXQ6ayx1c2VySW5wdXRUaW1lOnUsdXNlcklucHV0RGF0ZTpzfX19KTtjb25zdCBPbz17Y2xhc3M6XCJlbC1waWNrZXItcGFuZWxfX2JvZHktd3JhcHBlclwifSxQbz17a2V5OjAsY2xhc3M6XCJlbC1waWNrZXItcGFuZWxfX3NpZGViYXJcIn0sVm89e2NsYXNzOlwiZWwtcGlja2VyLXBhbmVsX19ib2R5XCJ9LElvPXtrZXk6MCxjbGFzczpcImVsLWRhdGUtcGlja2VyX190aW1lLWhlYWRlclwifSxBbz17Y2xhc3M6XCJlbC1kYXRlLXBpY2tlcl9fZWRpdG9yLXdyYXBcIn0sQm89e2NsYXNzOlwiZWwtZGF0ZS1waWNrZXJfX2VkaXRvci13cmFwXCJ9LExvPXtjbGFzczpcImVsLXBpY2tlci1wYW5lbF9fY29udGVudFwifSx6bz17Y2xhc3M6XCJlbC1waWNrZXItcGFuZWxfX2Zvb3RlclwifTtEby5yZW5kZXI9ZnVuY3Rpb24oZSx0LGwsbyx2LG0pe2NvbnN0IGY9UChcImVsLWlucHV0XCIpLGc9UChcInRpbWUtcGljay1wYW5lbFwiKSxiPVAoXCJkYXRlLXRhYmxlXCIpLHk9UChcInllYXItdGFibGVcIiksaz1QKFwibW9udGgtdGFibGVcIiksQz1QKFwiZWwtYnV0dG9uXCIpLHg9RihcImNsaWNrb3V0c2lkZVwiKTtyZXR1cm4gYSgpLG4oXCJkaXZcIix7Y2xhc3M6W1wiZWwtcGlja2VyLXBhbmVsIGVsLWRhdGUtcGlja2VyXCIsW3tcImhhcy1zaWRlYmFyXCI6ZS4kc2xvdHMuc2lkZWJhcnx8ZS5oYXNTaG9ydGN1dHMsXCJoYXMtdGltZVwiOmUuc2hvd1RpbWV9XV19LFtzKFwiZGl2XCIsT28sW2QoZS4kc2xvdHMsXCJzaWRlYmFyXCIse2NsYXNzOlwiZWwtcGlja2VyLXBhbmVsX19zaWRlYmFyXCJ9KSxlLmhhc1Nob3J0Y3V0cz8oYSgpLG4oXCJkaXZcIixQbyxbKGEoITApLG4oRSxudWxsLEgoZS5zaG9ydGN1dHMsKCh0LGwpPT4oYSgpLG4oXCJidXR0b25cIix7a2V5OmwsdHlwZTpcImJ1dHRvblwiLGNsYXNzOlwiZWwtcGlja2VyLXBhbmVsX19zaG9ydGN1dFwiLG9uQ2xpY2s6bD0+ZS5oYW5kbGVTaG9ydGN1dENsaWNrKHQpfSxwKHQudGV4dCksOSxbXCJvbkNsaWNrXCJdKSkpKSwxMjgpKV0pKTp1KFwidi1pZlwiLCEwKSxzKFwiZGl2XCIsVm8sW2Uuc2hvd1RpbWU/KGEoKSxuKFwiZGl2XCIsSW8sW3MoXCJzcGFuXCIsQW8sW3MoZix7cGxhY2Vob2xkZXI6ZS50KFwiZWwuZGF0ZXBpY2tlci5zZWxlY3REYXRlXCIpLFwibW9kZWwtdmFsdWVcIjplLnZpc2libGVEYXRlLHNpemU6XCJzbWFsbFwiLG9uSW5wdXQ6dFsxXXx8KHRbMV09dD0+ZS51c2VySW5wdXREYXRlPXQpLG9uQ2hhbmdlOmUuaGFuZGxlVmlzaWJsZURhdGVDaGFuZ2V9LG51bGwsOCxbXCJwbGFjZWhvbGRlclwiLFwibW9kZWwtdmFsdWVcIixcIm9uQ2hhbmdlXCJdKV0pLHIocyhcInNwYW5cIixCbyxbcyhmLHtwbGFjZWhvbGRlcjplLnQoXCJlbC5kYXRlcGlja2VyLnNlbGVjdFRpbWVcIiksXCJtb2RlbC12YWx1ZVwiOmUudmlzaWJsZVRpbWUsc2l6ZTpcInNtYWxsXCIsb25Gb2N1czplLm9uVGltZVBpY2tlcklucHV0Rm9jdXMsb25JbnB1dDp0WzJdfHwodFsyXT10PT5lLnVzZXJJbnB1dFRpbWU9dCksb25DaGFuZ2U6ZS5oYW5kbGVWaXNpYmxlVGltZUNoYW5nZX0sbnVsbCw4LFtcInBsYWNlaG9sZGVyXCIsXCJtb2RlbC12YWx1ZVwiLFwib25Gb2N1c1wiLFwib25DaGFuZ2VcIl0pLHMoZyx7dmlzaWJsZTplLnRpbWVQaWNrZXJWaXNpYmxlLGZvcm1hdDplLnRpbWVGb3JtYXQsXCJ0aW1lLWFycm93LWNvbnRyb2xcIjplLmFycm93Q29udHJvbCxcInBhcnNlZC12YWx1ZVwiOmUuaW5uZXJEYXRlLG9uUGljazplLmhhbmRsZVRpbWVQaWNrfSxudWxsLDgsW1widmlzaWJsZVwiLFwiZm9ybWF0XCIsXCJ0aW1lLWFycm93LWNvbnRyb2xcIixcInBhcnNlZC12YWx1ZVwiLFwib25QaWNrXCJdKV0sNTEyKSxbW3gsZS5oYW5kbGVUaW1lUGlja0Nsb3NlXV0pXSkpOnUoXCJ2LWlmXCIsITApLHIocyhcImRpdlwiLHtjbGFzczpbXCJlbC1kYXRlLXBpY2tlcl9faGVhZGVyXCIse1wiZWwtZGF0ZS1waWNrZXJfX2hlYWRlci0tYm9yZGVyZWRcIjpcInllYXJcIj09PWUuY3VycmVudFZpZXd8fFwibW9udGhcIj09PWUuY3VycmVudFZpZXd9XX0sW3MoXCJidXR0b25cIix7dHlwZTpcImJ1dHRvblwiLFwiYXJpYS1sYWJlbFwiOmUudChcImVsLmRhdGVwaWNrZXIucHJldlllYXJcIiksY2xhc3M6XCJlbC1waWNrZXItcGFuZWxfX2ljb24tYnRuIGVsLWRhdGUtcGlja2VyX19wcmV2LWJ0biBlbC1pY29uLWQtYXJyb3ctbGVmdFwiLG9uQ2xpY2s6dFszXXx8KHRbM109KC4uLnQpPT5lLnByZXZZZWFyXyguLi50KSl9LG51bGwsOCxbXCJhcmlhLWxhYmVsXCJdKSxyKHMoXCJidXR0b25cIix7dHlwZTpcImJ1dHRvblwiLFwiYXJpYS1sYWJlbFwiOmUudChcImVsLmRhdGVwaWNrZXIucHJldk1vbnRoXCIpLGNsYXNzOlwiZWwtcGlja2VyLXBhbmVsX19pY29uLWJ0biBlbC1kYXRlLXBpY2tlcl9fcHJldi1idG4gZWwtaWNvbi1hcnJvdy1sZWZ0XCIsb25DbGljazp0WzRdfHwodFs0XT0oLi4udCk9PmUucHJldk1vbnRoXyguLi50KSl9LG51bGwsOCxbXCJhcmlhLWxhYmVsXCJdKSxbW2gsXCJkYXRlXCI9PT1lLmN1cnJlbnRWaWV3XV0pLHMoXCJzcGFuXCIse3JvbGU6XCJidXR0b25cIixjbGFzczpcImVsLWRhdGUtcGlja2VyX19oZWFkZXItbGFiZWxcIixvbkNsaWNrOnRbNV18fCh0WzVdPSguLi50KT0+ZS5zaG93WWVhclBpY2tlciguLi50KSl9LHAoZS55ZWFyTGFiZWwpLDEpLHIocyhcInNwYW5cIix7cm9sZTpcImJ1dHRvblwiLGNsYXNzOltcImVsLWRhdGUtcGlja2VyX19oZWFkZXItbGFiZWxcIix7YWN0aXZlOlwibW9udGhcIj09PWUuY3VycmVudFZpZXd9XSxvbkNsaWNrOnRbNl18fCh0WzZdPSguLi50KT0+ZS5zaG93TW9udGhQaWNrZXIoLi4udCkpfSxwKGUudChcImVsLmRhdGVwaWNrZXIubW9udGhcIisoZS5tb250aCsxKSkpLDMpLFtbaCxcImRhdGVcIj09PWUuY3VycmVudFZpZXddXSkscyhcImJ1dHRvblwiLHt0eXBlOlwiYnV0dG9uXCIsXCJhcmlhLWxhYmVsXCI6ZS50KFwiZWwuZGF0ZXBpY2tlci5uZXh0WWVhclwiKSxjbGFzczpcImVsLXBpY2tlci1wYW5lbF9faWNvbi1idG4gZWwtZGF0ZS1waWNrZXJfX25leHQtYnRuIGVsLWljb24tZC1hcnJvdy1yaWdodFwiLG9uQ2xpY2s6dFs3XXx8KHRbN109KC4uLnQpPT5lLm5leHRZZWFyXyguLi50KSl9LG51bGwsOCxbXCJhcmlhLWxhYmVsXCJdKSxyKHMoXCJidXR0b25cIix7dHlwZTpcImJ1dHRvblwiLFwiYXJpYS1sYWJlbFwiOmUudChcImVsLmRhdGVwaWNrZXIubmV4dE1vbnRoXCIpLGNsYXNzOlwiZWwtcGlja2VyLXBhbmVsX19pY29uLWJ0biBlbC1kYXRlLXBpY2tlcl9fbmV4dC1idG4gZWwtaWNvbi1hcnJvdy1yaWdodFwiLG9uQ2xpY2s6dFs4XXx8KHRbOF09KC4uLnQpPT5lLm5leHRNb250aF8oLi4udCkpfSxudWxsLDgsW1wiYXJpYS1sYWJlbFwiXSksW1toLFwiZGF0ZVwiPT09ZS5jdXJyZW50Vmlld11dKV0sMiksW1toLFwidGltZVwiIT09ZS5jdXJyZW50Vmlld11dKSxzKFwiZGl2XCIsTG8sW1wiZGF0ZVwiPT09ZS5jdXJyZW50Vmlldz8oYSgpLG4oYix7a2V5OjAsXCJzZWxlY3Rpb24tbW9kZVwiOmUuc2VsZWN0aW9uTW9kZSxkYXRlOmUuaW5uZXJEYXRlLFwicGFyc2VkLXZhbHVlXCI6ZS5wYXJzZWRWYWx1ZSxcImRpc2FibGVkLWRhdGVcIjplLmRpc2FibGVkRGF0ZSxvblBpY2s6ZS5oYW5kbGVEYXRlUGlja30sbnVsbCw4LFtcInNlbGVjdGlvbi1tb2RlXCIsXCJkYXRlXCIsXCJwYXJzZWQtdmFsdWVcIixcImRpc2FibGVkLWRhdGVcIixcIm9uUGlja1wiXSkpOnUoXCJ2LWlmXCIsITApLFwieWVhclwiPT09ZS5jdXJyZW50Vmlldz8oYSgpLG4oeSx7a2V5OjEsZGF0ZTplLmlubmVyRGF0ZSxcImRpc2FibGVkLWRhdGVcIjplLmRpc2FibGVkRGF0ZSxcInBhcnNlZC12YWx1ZVwiOmUucGFyc2VkVmFsdWUsb25QaWNrOmUuaGFuZGxlWWVhclBpY2t9LG51bGwsOCxbXCJkYXRlXCIsXCJkaXNhYmxlZC1kYXRlXCIsXCJwYXJzZWQtdmFsdWVcIixcIm9uUGlja1wiXSkpOnUoXCJ2LWlmXCIsITApLFwibW9udGhcIj09PWUuY3VycmVudFZpZXc/KGEoKSxuKGsse2tleToyLGRhdGU6ZS5pbm5lckRhdGUsXCJwYXJzZWQtdmFsdWVcIjplLnBhcnNlZFZhbHVlLFwiZGlzYWJsZWQtZGF0ZVwiOmUuZGlzYWJsZWREYXRlLG9uUGljazplLmhhbmRsZU1vbnRoUGlja30sbnVsbCw4LFtcImRhdGVcIixcInBhcnNlZC12YWx1ZVwiLFwiZGlzYWJsZWQtZGF0ZVwiLFwib25QaWNrXCJdKSk6dShcInYtaWZcIiwhMCldKV0pXSkscihzKFwiZGl2XCIsem8sW3IocyhDLHtzaXplOlwibWluaVwiLHR5cGU6XCJ0ZXh0XCIsY2xhc3M6XCJlbC1waWNrZXItcGFuZWxfX2xpbmstYnRuXCIsb25DbGljazplLmNoYW5nZVRvTm93fSx7ZGVmYXVsdDppKCgoKT0+W2MocChlLnQoXCJlbC5kYXRlcGlja2VyLm5vd1wiKSksMSldKSksXzoxfSw4LFtcIm9uQ2xpY2tcIl0pLFtbaCxcImRhdGVzXCIhPT1lLnNlbGVjdGlvbk1vZGVdXSkscyhDLHtwbGFpbjpcIlwiLHNpemU6XCJtaW5pXCIsY2xhc3M6XCJlbC1waWNrZXItcGFuZWxfX2xpbmstYnRuXCIsb25DbGljazplLm9uQ29uZmlybX0se2RlZmF1bHQ6aSgoKCk9PltjKHAoZS50KFwiZWwuZGF0ZXBpY2tlci5jb25maXJtXCIpKSwxKV0pKSxfOjF9LDgsW1wib25DbGlja1wiXSldLDUxMiksW1toLGUuZm9vdGVyVmlzaWJsZSYmXCJkYXRlXCI9PT1lLmN1cnJlbnRWaWV3XV0pXSwyKX0sRG8uX19maWxlPVwicGFja2FnZXMvZGF0ZS1waWNrZXIvc3JjL2RhdGUtcGlja2VyLWNvbS9wYW5lbC1kYXRlLXBpY2sudnVlXCI7dmFyIEZvPWUoe2RpcmVjdGl2ZXM6e2NsaWNrb3V0c2lkZTpNdH0sY29tcG9uZW50czp7VGltZVBpY2tQYW5lbDpzYSxEYXRlVGFibGU6aG8sRWxJbnB1dDpXdCxFbEJ1dHRvbjokbH0scHJvcHM6e3VubGlua1BhbmVsczpCb29sZWFuLHBhcnNlZFZhbHVlOnt0eXBlOkFycmF5fSx0eXBlOnt0eXBlOlN0cmluZyxyZXF1aXJlZDohMH19LGVtaXRzOltcInBpY2tcIixcInNldC1waWNrZXItb3B0aW9uXCJdLHNldHVwKGUsYSl7Y29uc3Qgbj10KHNlKCkpLG89dChzZSgpLmFkZCgxLFwibW9udGhcIikpLGk9dChudWxsKSxyPXQobnVsbCkscz10KHttaW46bnVsbCxtYXg6bnVsbH0pLHU9dCh7bWluOm51bGwsbWF4Om51bGx9KSxkPWwoKCgpPT5uLnZhbHVlLnllYXIoKStcIiBcIitxbChcImVsLmRhdGVwaWNrZXIueWVhclwiKStcIiBcIitxbChcImVsLmRhdGVwaWNrZXIubW9udGhcIisobi52YWx1ZS5tb250aCgpKzEpKSkpLGM9bCgoKCk9Pm8udmFsdWUueWVhcigpK1wiIFwiK3FsKFwiZWwuZGF0ZXBpY2tlci55ZWFyXCIpK1wiIFwiK3FsKFwiZWwuZGF0ZXBpY2tlci5tb250aFwiKyhvLnZhbHVlLm1vbnRoKCkrMSkpKSkscD1sKCgoKT0+bi52YWx1ZS55ZWFyKCkpKSxoPWwoKCgpPT5uLnZhbHVlLm1vbnRoKCkpKSx2PWwoKCgpPT5vLnZhbHVlLnllYXIoKSkpLG09bCgoKCk9Pm8udmFsdWUubW9udGgoKSkpLGY9bCgoKCk9PiEhTC5sZW5ndGgpKSxnPWwoKCgpPT5udWxsIT09cy52YWx1ZS5taW4/cy52YWx1ZS5taW46aS52YWx1ZT9pLnZhbHVlLmZvcm1hdChfLnZhbHVlKTpcIlwiKSksYj1sKCgoKT0+bnVsbCE9PXMudmFsdWUubWF4P3MudmFsdWUubWF4OnIudmFsdWV8fGkudmFsdWU/KHIudmFsdWV8fGkudmFsdWUpLmZvcm1hdChfLnZhbHVlKTpcIlwiKSksaz1sKCgoKT0+bnVsbCE9PXUudmFsdWUubWluP3UudmFsdWUubWluOmkudmFsdWU/aS52YWx1ZS5mb3JtYXQoeC52YWx1ZSk6XCJcIikpLEM9bCgoKCk9Pm51bGwhPT11LnZhbHVlLm1heD91LnZhbHVlLm1heDpyLnZhbHVlfHxpLnZhbHVlPyhyLnZhbHVlfHxpLnZhbHVlKS5mb3JtYXQoeC52YWx1ZSk6XCJcIikpLHg9bCgoKCk9PndhKCQpKSksXz1sKCgoKT0+eGEoJCkpKSxTPWwoKCgpPT57Y29uc3QgdD0oaC52YWx1ZSsxKSUxMixsPWgudmFsdWUrMT49MTI/MTowO3JldHVybiBlLnVubGlua1BhbmVscyYmbmV3IERhdGUocC52YWx1ZStsLHQpPG5ldyBEYXRlKHYudmFsdWUsbS52YWx1ZSl9KSksRT1sKCgoKT0+ZS51bmxpbmtQYW5lbHMmJjEyKnYudmFsdWUrbS52YWx1ZS0oMTIqcC52YWx1ZStoLnZhbHVlKzEpPj0xMikpLE09ZT0+QXJyYXkuaXNBcnJheShlKSYmZSYmZVswXSYmZVsxXSYmZVswXS52YWx1ZU9mKCk8PWVbMV0udmFsdWVPZigpLFQ9dCh7ZW5kRGF0ZTpudWxsLHNlbGVjdGluZzohMX0pLE49bCgoKCk9PiEoaS52YWx1ZSYmci52YWx1ZSYmIVQudmFsdWUuc2VsZWN0aW5nJiZNKFtpLnZhbHVlLHIudmFsdWVdKSkpKSxEPWwoKCgpPT5cImRhdGV0aW1lXCI9PT1lLnR5cGV8fFwiZGF0ZXRpbWVyYW5nZVwiPT09ZS50eXBlKSksTz0oZT0hMSk9PntNKFtpLnZhbHVlLHIudmFsdWVdKSYmYS5lbWl0KFwicGlja1wiLFtpLnZhbHVlLHIudmFsdWVdLGUpfSxQPShlLHQpPT57aWYoZSl7aWYoUil7cmV0dXJuIHNlKFJbdF18fFIpLnllYXIoZS55ZWFyKCkpLm1vbnRoKGUubW9udGgoKSkuZGF0ZShlLmRhdGUoKSl9cmV0dXJuIGV9fSxWPXQoITEpLEk9dCghMSksQT0oKT0+e2xldCB0O2lmKEFycmF5LmlzQXJyYXkoSCkpe2NvbnN0IHQ9c2UoSFswXSk7bGV0IGw9c2UoSFsxXSk7cmV0dXJuIGUudW5saW5rUGFuZWxzfHwobD10LmFkZCgxLFwibW9udGhcIikpLFt0LGxdfXJldHVybiB0PUg/c2UoSCk6c2UoKSxbdCx0LmFkZCgxLFwibW9udGhcIildfTthLmVtaXQoXCJzZXQtcGlja2VyLW9wdGlvblwiLFtcImZvcm1hdFRvU3RyaW5nXCIsZT0+ZS5tYXAoKGU9PmUuZm9ybWF0KCQpKSldKTtjb25zdCBCPXcoXCJFUF9QSUNLRVJfQkFTRVwiKSx7c2hvcnRjdXRzOkwsZGlzYWJsZWREYXRlOnosY2VsbENsYXNzTmFtZTpGLGZvcm1hdDokLGRlZmF1bHRUaW1lOlIsZGVmYXVsdFZhbHVlOkgsYXJyb3dDb250cm9sOld9PUIucHJvcHM7cmV0dXJuIHkoKCgpPT5lLnBhcnNlZFZhbHVlKSwodD0+e2lmKHQmJjI9PT10Lmxlbmd0aClpZihpLnZhbHVlPXRbMF0sci52YWx1ZT10WzFdLG4udmFsdWU9aS52YWx1ZSxlLnVubGlua1BhbmVscyYmci52YWx1ZSl7Y29uc3QgZT1pLnZhbHVlLnllYXIoKSx0PWkudmFsdWUubW9udGgoKSxsPXIudmFsdWUueWVhcigpLGE9ci52YWx1ZS5tb250aCgpO28udmFsdWU9ZT09PWwmJnQ9PT1hP3IudmFsdWUuYWRkKDEsXCJtb250aFwiKTpyLnZhbHVlfWVsc2Ugby52YWx1ZT1uLnZhbHVlLmFkZCgxLFwibW9udGhcIik7ZWxzZXtjb25zdCBlPUEoKTtuLnZhbHVlPWVbMF0sby52YWx1ZT1lWzFdfX0pLHtpbW1lZGlhdGU6ITB9KSx7c2hvcnRjdXRzOkwsZGlzYWJsZWREYXRlOnosY2VsbENsYXNzTmFtZTpGLG1pblRpbWVQaWNrZXJWaXNpYmxlOlYsbWF4VGltZVBpY2tlclZpc2libGU6SSxoYW5kbGVNaW5UaW1lQ2xvc2U6KCk9PntWLnZhbHVlPSExfSxoYW5kbGVNYXhUaW1lQ2xvc2U6KCk9PntJLnZhbHVlPSExfSxoYW5kbGVTaG9ydGN1dENsaWNrOmU9PntlLnZhbHVlP2EuZW1pdChcInBpY2tcIixbc2UoZS52YWx1ZVswXSksc2UoZS52YWx1ZVsxXSldKTplLm9uQ2xpY2smJmUub25DbGljayhhKX0scmFuZ2VTdGF0ZTpULG1pbkRhdGU6aSxtYXhEYXRlOnIsaGFuZGxlUmFuZ2VQaWNrOihlLHQ9ITApPT57Y29uc3QgbD1QKGUubWluRGF0ZSwwKSxhPVAoZS5tYXhEYXRlLDEpO3IudmFsdWU9PT1hJiZpLnZhbHVlPT09bHx8KHIudmFsdWU9YSxpLnZhbHVlPWwsdCYmIUQudmFsdWUmJk8oKSl9LG9uU2VsZWN0OmU9PntULnZhbHVlLnNlbGVjdGluZz1lLGV8fChULnZhbHVlLmVuZERhdGU9bnVsbCl9LGhhbmRsZUNoYW5nZVJhbmdlOmU9PntULnZhbHVlPWV9LGJ0bkRpc2FibGVkOk4sZW5hYmxlWWVhckFycm93OkUsZW5hYmxlTW9udGhBcnJvdzpTLHJpZ2h0UHJldk1vbnRoOigpPT57by52YWx1ZT1vLnZhbHVlLnN1YnRyYWN0KDEsXCJtb250aFwiKX0scmlnaHRQcmV2WWVhcjooKT0+e28udmFsdWU9by52YWx1ZS5zdWJ0cmFjdCgxLFwieWVhclwiKX0scmlnaHROZXh0TW9udGg6KCk9PntlLnVubGlua1BhbmVscz9vLnZhbHVlPW8udmFsdWUuYWRkKDEsXCJtb250aFwiKToobi52YWx1ZT1uLnZhbHVlLmFkZCgxLFwibW9udGhcIiksby52YWx1ZT1uLnZhbHVlLmFkZCgxLFwibW9udGhcIikpfSxyaWdodE5leHRZZWFyOigpPT57ZS51bmxpbmtQYW5lbHM/by52YWx1ZT1vLnZhbHVlLmFkZCgxLFwieWVhclwiKToobi52YWx1ZT1uLnZhbHVlLmFkZCgxLFwieWVhclwiKSxvLnZhbHVlPW4udmFsdWUuYWRkKDEsXCJtb250aFwiKSl9LGxlZnRQcmV2TW9udGg6KCk9PntuLnZhbHVlPW4udmFsdWUuc3VidHJhY3QoMSxcIm1vbnRoXCIpLGUudW5saW5rUGFuZWxzfHwoby52YWx1ZT1uLnZhbHVlLmFkZCgxLFwibW9udGhcIikpfSxsZWZ0UHJldlllYXI6KCk9PntuLnZhbHVlPW4udmFsdWUuc3VidHJhY3QoMSxcInllYXJcIiksZS51bmxpbmtQYW5lbHN8fChvLnZhbHVlPW4udmFsdWUuYWRkKDEsXCJtb250aFwiKSl9LGxlZnROZXh0TW9udGg6KCk9PntuLnZhbHVlPW4udmFsdWUuYWRkKDEsXCJtb250aFwiKX0sbGVmdE5leHRZZWFyOigpPT57bi52YWx1ZT1uLnZhbHVlLmFkZCgxLFwieWVhclwiKX0saGFzU2hvcnRjdXRzOmYsbGVmdExhYmVsOmQscmlnaHRMYWJlbDpjLGxlZnREYXRlOm4scmlnaHREYXRlOm8sc2hvd1RpbWU6RCx0OnFsLG1pblZpc2libGVEYXRlOmcsbWF4VmlzaWJsZURhdGU6YixtaW5WaXNpYmxlVGltZTprLG1heFZpc2libGVUaW1lOkMsYXJyb3dDb250cm9sOlcsaGFuZGxlRGF0ZUlucHV0Oih0LGwpPT57cy52YWx1ZVtsXT10O2NvbnN0IGE9c2UodCxfLnZhbHVlKTtpZihhLmlzVmFsaWQoKSl7aWYoeiYmeihhLnRvRGF0ZSgpKSlyZXR1cm47XCJtaW5cIj09PWw/KG4udmFsdWU9YSxpLnZhbHVlPShpLnZhbHVlfHxuLnZhbHVlKS55ZWFyKGEueWVhcigpKS5tb250aChhLm1vbnRoKCkpLmRhdGUoYS5kYXRlKCkpLGUudW5saW5rUGFuZWxzfHwoby52YWx1ZT1hLmFkZCgxLFwibW9udGhcIiksci52YWx1ZT1pLnZhbHVlLmFkZCgxLFwibW9udGhcIikpKTooby52YWx1ZT1hLHIudmFsdWU9KHIudmFsdWV8fG8udmFsdWUpLnllYXIoYS55ZWFyKCkpLm1vbnRoKGEubW9udGgoKSkuZGF0ZShhLmRhdGUoKSksZS51bmxpbmtQYW5lbHN8fChuLnZhbHVlPWEuc3VidHJhY3QoMSxcIm1vbnRoXCIpLGkudmFsdWU9ci52YWx1ZS5zdWJ0cmFjdCgxLFwibW9udGhcIikpKX19LGhhbmRsZURhdGVDaGFuZ2U6KGUsdCk9PntzLnZhbHVlW3RdPW51bGx9LGhhbmRsZVRpbWVJbnB1dDooZSx0KT0+e3UudmFsdWVbdF09ZTtjb25zdCBsPXNlKGUseC52YWx1ZSk7bC5pc1ZhbGlkKCkmJihcIm1pblwiPT09dD8oVi52YWx1ZT0hMCxpLnZhbHVlPShpLnZhbHVlfHxuLnZhbHVlKS5ob3VyKGwuaG91cigpKS5taW51dGUobC5taW51dGUoKSkuc2Vjb25kKGwuc2Vjb25kKCkpLHIudmFsdWUmJiFyLnZhbHVlLmlzQmVmb3JlKGkudmFsdWUpfHwoci52YWx1ZT1pLnZhbHVlKSk6KEkudmFsdWU9ITAsci52YWx1ZT0oci52YWx1ZXx8by52YWx1ZSkuaG91cihsLmhvdXIoKSkubWludXRlKGwubWludXRlKCkpLnNlY29uZChsLnNlY29uZCgpKSxvLnZhbHVlPXIudmFsdWUsci52YWx1ZSYmci52YWx1ZS5pc0JlZm9yZShpLnZhbHVlKSYmKGkudmFsdWU9ci52YWx1ZSkpKX0saGFuZGxlVGltZUNoYW5nZTooZSx0KT0+e3UudmFsdWVbdF09bnVsbCxcIm1pblwiPT09dD8obi52YWx1ZT1pLnZhbHVlLFYudmFsdWU9ITEpOihvLnZhbHVlPXIudmFsdWUsSS52YWx1ZT0hMSl9LGhhbmRsZU1pblRpbWVQaWNrOihlLHQsbCk9Pnt1LnZhbHVlLm1pbnx8KGUmJihuLnZhbHVlPWUsaS52YWx1ZT0oaS52YWx1ZXx8bi52YWx1ZSkuaG91cihlLmhvdXIoKSkubWludXRlKGUubWludXRlKCkpLnNlY29uZChlLnNlY29uZCgpKSksbHx8KFYudmFsdWU9dCksci52YWx1ZSYmIXIudmFsdWUuaXNCZWZvcmUoaS52YWx1ZSl8fChyLnZhbHVlPWkudmFsdWUpKX0saGFuZGxlTWF4VGltZVBpY2s6KGUsdCxsKT0+e3UudmFsdWUubWF4fHwoZSYmKG8udmFsdWU9ZSxyLnZhbHVlPShyLnZhbHVlfHxvLnZhbHVlKS5ob3VyKGUuaG91cigpKS5taW51dGUoZS5taW51dGUoKSkuc2Vjb25kKGUuc2Vjb25kKCkpKSxsfHwoSS52YWx1ZT10KSxyLnZhbHVlJiZyLnZhbHVlLmlzQmVmb3JlKGkudmFsdWUpJiYoaS52YWx1ZT1yLnZhbHVlKSl9LGhhbmRsZUNsZWFyOigpPT57aS52YWx1ZT1udWxsLHIudmFsdWU9bnVsbCxuLnZhbHVlPUEoKVswXSxvLnZhbHVlPW4udmFsdWUuYWRkKDEsXCJtb250aFwiKSxhLmVtaXQoXCJwaWNrXCIsbnVsbCl9LGhhbmRsZUNvbmZpcm06Tyx0aW1lRm9ybWF0Onh9fX0pO2NvbnN0ICRvPXtjbGFzczpcImVsLXBpY2tlci1wYW5lbF9fYm9keS13cmFwcGVyXCJ9LFJvPXtrZXk6MCxjbGFzczpcImVsLXBpY2tlci1wYW5lbF9fc2lkZWJhclwifSxIbz17Y2xhc3M6XCJlbC1waWNrZXItcGFuZWxfX2JvZHlcIn0sV289e2tleTowLGNsYXNzOlwiZWwtZGF0ZS1yYW5nZS1waWNrZXJfX3RpbWUtaGVhZGVyXCJ9LGpvPXtjbGFzczpcImVsLWRhdGUtcmFuZ2UtcGlja2VyX19lZGl0b3JzLXdyYXBcIn0sS289e2NsYXNzOlwiZWwtZGF0ZS1yYW5nZS1waWNrZXJfX3RpbWUtcGlja2VyLXdyYXBcIn0sWW89e2NsYXNzOlwiZWwtZGF0ZS1yYW5nZS1waWNrZXJfX3RpbWUtcGlja2VyLXdyYXBcIn0scW89cyhcInNwYW5cIix7Y2xhc3M6XCJlbC1pY29uLWFycm93LXJpZ2h0XCJ9LG51bGwsLTEpLFVvPXtjbGFzczpcImVsLWRhdGUtcmFuZ2UtcGlja2VyX19lZGl0b3JzLXdyYXAgaXMtcmlnaHRcIn0sR289e2NsYXNzOlwiZWwtZGF0ZS1yYW5nZS1waWNrZXJfX3RpbWUtcGlja2VyLXdyYXBcIn0sWG89e2NsYXNzOlwiZWwtZGF0ZS1yYW5nZS1waWNrZXJfX3RpbWUtcGlja2VyLXdyYXBcIn0sUW89e2NsYXNzOlwiZWwtcGlja2VyLXBhbmVsX19jb250ZW50IGVsLWRhdGUtcmFuZ2UtcGlja2VyX19jb250ZW50IGlzLWxlZnRcIn0sWm89e2NsYXNzOlwiZWwtZGF0ZS1yYW5nZS1waWNrZXJfX2hlYWRlclwifSxKbz17Y2xhc3M6XCJlbC1waWNrZXItcGFuZWxfX2NvbnRlbnQgZWwtZGF0ZS1yYW5nZS1waWNrZXJfX2NvbnRlbnQgaXMtcmlnaHRcIn0sZWk9e2NsYXNzOlwiZWwtZGF0ZS1yYW5nZS1waWNrZXJfX2hlYWRlclwifSx0aT17a2V5OjAsY2xhc3M6XCJlbC1waWNrZXItcGFuZWxfX2Zvb3RlclwifTtGby5yZW5kZXI9ZnVuY3Rpb24oZSx0LGwsbyxoLHYpe2NvbnN0IG09UChcImVsLWlucHV0XCIpLGY9UChcInRpbWUtcGljay1wYW5lbFwiKSxnPVAoXCJkYXRlLXRhYmxlXCIpLGI9UChcImVsLWJ1dHRvblwiKSx5PUYoXCJjbGlja291dHNpZGVcIik7cmV0dXJuIGEoKSxuKFwiZGl2XCIse2NsYXNzOltcImVsLXBpY2tlci1wYW5lbCBlbC1kYXRlLXJhbmdlLXBpY2tlclwiLFt7XCJoYXMtc2lkZWJhclwiOmUuJHNsb3RzLnNpZGViYXJ8fGUuaGFzU2hvcnRjdXRzLFwiaGFzLXRpbWVcIjplLnNob3dUaW1lfV1dfSxbcyhcImRpdlwiLCRvLFtkKGUuJHNsb3RzLFwic2lkZWJhclwiLHtjbGFzczpcImVsLXBpY2tlci1wYW5lbF9fc2lkZWJhclwifSksZS5oYXNTaG9ydGN1dHM/KGEoKSxuKFwiZGl2XCIsUm8sWyhhKCEwKSxuKEUsbnVsbCxIKGUuc2hvcnRjdXRzLCgodCxsKT0+KGEoKSxuKFwiYnV0dG9uXCIse2tleTpsLHR5cGU6XCJidXR0b25cIixjbGFzczpcImVsLXBpY2tlci1wYW5lbF9fc2hvcnRjdXRcIixvbkNsaWNrOmw9PmUuaGFuZGxlU2hvcnRjdXRDbGljayh0KX0scCh0LnRleHQpLDksW1wib25DbGlja1wiXSkpKSksMTI4KSldKSk6dShcInYtaWZcIiwhMCkscyhcImRpdlwiLEhvLFtlLnNob3dUaW1lPyhhKCksbihcImRpdlwiLFdvLFtzKFwic3BhblwiLGpvLFtzKFwic3BhblwiLEtvLFtzKG0se3NpemU6XCJzbWFsbFwiLGRpc2FibGVkOmUucmFuZ2VTdGF0ZS5zZWxlY3RpbmcscGxhY2Vob2xkZXI6ZS50KFwiZWwuZGF0ZXBpY2tlci5zdGFydERhdGVcIiksY2xhc3M6XCJlbC1kYXRlLXJhbmdlLXBpY2tlcl9fZWRpdG9yXCIsXCJtb2RlbC12YWx1ZVwiOmUubWluVmlzaWJsZURhdGUsb25JbnB1dDp0WzFdfHwodFsxXT10PT5lLmhhbmRsZURhdGVJbnB1dCh0LFwibWluXCIpKSxvbkNoYW5nZTp0WzJdfHwodFsyXT10PT5lLmhhbmRsZURhdGVDaGFuZ2UodCxcIm1pblwiKSl9LG51bGwsOCxbXCJkaXNhYmxlZFwiLFwicGxhY2Vob2xkZXJcIixcIm1vZGVsLXZhbHVlXCJdKV0pLHIocyhcInNwYW5cIixZbyxbcyhtLHtzaXplOlwic21hbGxcIixjbGFzczpcImVsLWRhdGUtcmFuZ2UtcGlja2VyX19lZGl0b3JcIixkaXNhYmxlZDplLnJhbmdlU3RhdGUuc2VsZWN0aW5nLHBsYWNlaG9sZGVyOmUudChcImVsLmRhdGVwaWNrZXIuc3RhcnRUaW1lXCIpLFwibW9kZWwtdmFsdWVcIjplLm1pblZpc2libGVUaW1lLG9uRm9jdXM6dFszXXx8KHRbM109dD0+ZS5taW5UaW1lUGlja2VyVmlzaWJsZT0hMCksb25JbnB1dDp0WzRdfHwodFs0XT10PT5lLmhhbmRsZVRpbWVJbnB1dCh0LFwibWluXCIpKSxvbkNoYW5nZTp0WzVdfHwodFs1XT10PT5lLmhhbmRsZVRpbWVDaGFuZ2UodCxcIm1pblwiKSl9LG51bGwsOCxbXCJkaXNhYmxlZFwiLFwicGxhY2Vob2xkZXJcIixcIm1vZGVsLXZhbHVlXCJdKSxzKGYse3Zpc2libGU6ZS5taW5UaW1lUGlja2VyVmlzaWJsZSxmb3JtYXQ6ZS50aW1lRm9ybWF0LFwiZGF0ZXRpbWUtcm9sZVwiOlwic3RhcnRcIixcInRpbWUtYXJyb3ctY29udHJvbFwiOmUuYXJyb3dDb250cm9sLFwicGFyc2VkLXZhbHVlXCI6ZS5sZWZ0RGF0ZSxvblBpY2s6ZS5oYW5kbGVNaW5UaW1lUGlja30sbnVsbCw4LFtcInZpc2libGVcIixcImZvcm1hdFwiLFwidGltZS1hcnJvdy1jb250cm9sXCIsXCJwYXJzZWQtdmFsdWVcIixcIm9uUGlja1wiXSldLDUxMiksW1t5LGUuaGFuZGxlTWluVGltZUNsb3NlXV0pXSkscW8scyhcInNwYW5cIixVbyxbcyhcInNwYW5cIixHbyxbcyhtLHtzaXplOlwic21hbGxcIixjbGFzczpcImVsLWRhdGUtcmFuZ2UtcGlja2VyX19lZGl0b3JcIixkaXNhYmxlZDplLnJhbmdlU3RhdGUuc2VsZWN0aW5nLHBsYWNlaG9sZGVyOmUudChcImVsLmRhdGVwaWNrZXIuZW5kRGF0ZVwiKSxcIm1vZGVsLXZhbHVlXCI6ZS5tYXhWaXNpYmxlRGF0ZSxyZWFkb25seTohZS5taW5EYXRlLG9uSW5wdXQ6dFs2XXx8KHRbNl09dD0+ZS5oYW5kbGVEYXRlSW5wdXQodCxcIm1heFwiKSksb25DaGFuZ2U6dFs3XXx8KHRbN109dD0+ZS5oYW5kbGVEYXRlQ2hhbmdlKHQsXCJtYXhcIikpfSxudWxsLDgsW1wiZGlzYWJsZWRcIixcInBsYWNlaG9sZGVyXCIsXCJtb2RlbC12YWx1ZVwiLFwicmVhZG9ubHlcIl0pXSkscihzKFwic3BhblwiLFhvLFtzKG0se3NpemU6XCJzbWFsbFwiLGNsYXNzOlwiZWwtZGF0ZS1yYW5nZS1waWNrZXJfX2VkaXRvclwiLGRpc2FibGVkOmUucmFuZ2VTdGF0ZS5zZWxlY3RpbmcscGxhY2Vob2xkZXI6ZS50KFwiZWwuZGF0ZXBpY2tlci5lbmRUaW1lXCIpLFwibW9kZWwtdmFsdWVcIjplLm1heFZpc2libGVUaW1lLHJlYWRvbmx5OiFlLm1pbkRhdGUsb25Gb2N1czp0WzhdfHwodFs4XT10PT5lLm1pbkRhdGUmJihlLm1heFRpbWVQaWNrZXJWaXNpYmxlPSEwKSksb25JbnB1dDp0WzldfHwodFs5XT10PT5lLmhhbmRsZVRpbWVJbnB1dCh0LFwibWF4XCIpKSxvbkNoYW5nZTp0WzEwXXx8KHRbMTBdPXQ9PmUuaGFuZGxlVGltZUNoYW5nZSh0LFwibWF4XCIpKX0sbnVsbCw4LFtcImRpc2FibGVkXCIsXCJwbGFjZWhvbGRlclwiLFwibW9kZWwtdmFsdWVcIixcInJlYWRvbmx5XCJdKSxzKGYse1wiZGF0ZXRpbWUtcm9sZVwiOlwiZW5kXCIsdmlzaWJsZTplLm1heFRpbWVQaWNrZXJWaXNpYmxlLGZvcm1hdDplLnRpbWVGb3JtYXQsXCJ0aW1lLWFycm93LWNvbnRyb2xcIjplLmFycm93Q29udHJvbCxcInBhcnNlZC12YWx1ZVwiOmUucmlnaHREYXRlLG9uUGljazplLmhhbmRsZU1heFRpbWVQaWNrfSxudWxsLDgsW1widmlzaWJsZVwiLFwiZm9ybWF0XCIsXCJ0aW1lLWFycm93LWNvbnRyb2xcIixcInBhcnNlZC12YWx1ZVwiLFwib25QaWNrXCJdKV0sNTEyKSxbW3ksZS5oYW5kbGVNYXhUaW1lQ2xvc2VdXSldKV0pKTp1KFwidi1pZlwiLCEwKSxzKFwiZGl2XCIsUW8sW3MoXCJkaXZcIixabyxbcyhcImJ1dHRvblwiLHt0eXBlOlwiYnV0dG9uXCIsY2xhc3M6XCJlbC1waWNrZXItcGFuZWxfX2ljb24tYnRuIGVsLWljb24tZC1hcnJvdy1sZWZ0XCIsb25DbGljazp0WzExXXx8KHRbMTFdPSguLi50KT0+ZS5sZWZ0UHJldlllYXIoLi4udCkpfSkscyhcImJ1dHRvblwiLHt0eXBlOlwiYnV0dG9uXCIsY2xhc3M6XCJlbC1waWNrZXItcGFuZWxfX2ljb24tYnRuIGVsLWljb24tYXJyb3ctbGVmdFwiLG9uQ2xpY2s6dFsxMl18fCh0WzEyXT0oLi4udCk9PmUubGVmdFByZXZNb250aCguLi50KSl9KSxlLnVubGlua1BhbmVscz8oYSgpLG4oXCJidXR0b25cIix7a2V5OjAsdHlwZTpcImJ1dHRvblwiLGRpc2FibGVkOiFlLmVuYWJsZVllYXJBcnJvdyxjbGFzczpbe1wiaXMtZGlzYWJsZWRcIjohZS5lbmFibGVZZWFyQXJyb3d9LFwiZWwtcGlja2VyLXBhbmVsX19pY29uLWJ0biBlbC1pY29uLWQtYXJyb3ctcmlnaHRcIl0sb25DbGljazp0WzEzXXx8KHRbMTNdPSguLi50KT0+ZS5sZWZ0TmV4dFllYXIoLi4udCkpfSxudWxsLDEwLFtcImRpc2FibGVkXCJdKSk6dShcInYtaWZcIiwhMCksZS51bmxpbmtQYW5lbHM/KGEoKSxuKFwiYnV0dG9uXCIse2tleToxLHR5cGU6XCJidXR0b25cIixkaXNhYmxlZDohZS5lbmFibGVNb250aEFycm93LGNsYXNzOlt7XCJpcy1kaXNhYmxlZFwiOiFlLmVuYWJsZU1vbnRoQXJyb3d9LFwiZWwtcGlja2VyLXBhbmVsX19pY29uLWJ0biBlbC1pY29uLWFycm93LXJpZ2h0XCJdLG9uQ2xpY2s6dFsxNF18fCh0WzE0XT0oLi4udCk9PmUubGVmdE5leHRNb250aCguLi50KSl9LG51bGwsMTAsW1wiZGlzYWJsZWRcIl0pKTp1KFwidi1pZlwiLCEwKSxzKFwiZGl2XCIsbnVsbCxwKGUubGVmdExhYmVsKSwxKV0pLHMoZyx7XCJzZWxlY3Rpb24tbW9kZVwiOlwicmFuZ2VcIixkYXRlOmUubGVmdERhdGUsXCJtaW4tZGF0ZVwiOmUubWluRGF0ZSxcIm1heC1kYXRlXCI6ZS5tYXhEYXRlLFwicmFuZ2Utc3RhdGVcIjplLnJhbmdlU3RhdGUsXCJkaXNhYmxlZC1kYXRlXCI6ZS5kaXNhYmxlZERhdGUsXCJjZWxsLWNsYXNzLW5hbWVcIjplLmNlbGxDbGFzc05hbWUsb25DaGFuZ2VyYW5nZTplLmhhbmRsZUNoYW5nZVJhbmdlLG9uUGljazplLmhhbmRsZVJhbmdlUGljayxvblNlbGVjdDplLm9uU2VsZWN0fSxudWxsLDgsW1wiZGF0ZVwiLFwibWluLWRhdGVcIixcIm1heC1kYXRlXCIsXCJyYW5nZS1zdGF0ZVwiLFwiZGlzYWJsZWQtZGF0ZVwiLFwiY2VsbC1jbGFzcy1uYW1lXCIsXCJvbkNoYW5nZXJhbmdlXCIsXCJvblBpY2tcIixcIm9uU2VsZWN0XCJdKV0pLHMoXCJkaXZcIixKbyxbcyhcImRpdlwiLGVpLFtlLnVubGlua1BhbmVscz8oYSgpLG4oXCJidXR0b25cIix7a2V5OjAsdHlwZTpcImJ1dHRvblwiLGRpc2FibGVkOiFlLmVuYWJsZVllYXJBcnJvdyxjbGFzczpbe1wiaXMtZGlzYWJsZWRcIjohZS5lbmFibGVZZWFyQXJyb3d9LFwiZWwtcGlja2VyLXBhbmVsX19pY29uLWJ0biBlbC1pY29uLWQtYXJyb3ctbGVmdFwiXSxvbkNsaWNrOnRbMTVdfHwodFsxNV09KC4uLnQpPT5lLnJpZ2h0UHJldlllYXIoLi4udCkpfSxudWxsLDEwLFtcImRpc2FibGVkXCJdKSk6dShcInYtaWZcIiwhMCksZS51bmxpbmtQYW5lbHM/KGEoKSxuKFwiYnV0dG9uXCIse2tleToxLHR5cGU6XCJidXR0b25cIixkaXNhYmxlZDohZS5lbmFibGVNb250aEFycm93LGNsYXNzOlt7XCJpcy1kaXNhYmxlZFwiOiFlLmVuYWJsZU1vbnRoQXJyb3d9LFwiZWwtcGlja2VyLXBhbmVsX19pY29uLWJ0biBlbC1pY29uLWFycm93LWxlZnRcIl0sb25DbGljazp0WzE2XXx8KHRbMTZdPSguLi50KT0+ZS5yaWdodFByZXZNb250aCguLi50KSl9LG51bGwsMTAsW1wiZGlzYWJsZWRcIl0pKTp1KFwidi1pZlwiLCEwKSxzKFwiYnV0dG9uXCIse3R5cGU6XCJidXR0b25cIixjbGFzczpcImVsLXBpY2tlci1wYW5lbF9faWNvbi1idG4gZWwtaWNvbi1kLWFycm93LXJpZ2h0XCIsb25DbGljazp0WzE3XXx8KHRbMTddPSguLi50KT0+ZS5yaWdodE5leHRZZWFyKC4uLnQpKX0pLHMoXCJidXR0b25cIix7dHlwZTpcImJ1dHRvblwiLGNsYXNzOlwiZWwtcGlja2VyLXBhbmVsX19pY29uLWJ0biBlbC1pY29uLWFycm93LXJpZ2h0XCIsb25DbGljazp0WzE4XXx8KHRbMThdPSguLi50KT0+ZS5yaWdodE5leHRNb250aCguLi50KSl9KSxzKFwiZGl2XCIsbnVsbCxwKGUucmlnaHRMYWJlbCksMSldKSxzKGcse1wic2VsZWN0aW9uLW1vZGVcIjpcInJhbmdlXCIsZGF0ZTplLnJpZ2h0RGF0ZSxcIm1pbi1kYXRlXCI6ZS5taW5EYXRlLFwibWF4LWRhdGVcIjplLm1heERhdGUsXCJyYW5nZS1zdGF0ZVwiOmUucmFuZ2VTdGF0ZSxcImRpc2FibGVkLWRhdGVcIjplLmRpc2FibGVkRGF0ZSxcImNlbGwtY2xhc3MtbmFtZVwiOmUuY2VsbENsYXNzTmFtZSxvbkNoYW5nZXJhbmdlOmUuaGFuZGxlQ2hhbmdlUmFuZ2Usb25QaWNrOmUuaGFuZGxlUmFuZ2VQaWNrLG9uU2VsZWN0OmUub25TZWxlY3R9LG51bGwsOCxbXCJkYXRlXCIsXCJtaW4tZGF0ZVwiLFwibWF4LWRhdGVcIixcInJhbmdlLXN0YXRlXCIsXCJkaXNhYmxlZC1kYXRlXCIsXCJjZWxsLWNsYXNzLW5hbWVcIixcIm9uQ2hhbmdlcmFuZ2VcIixcIm9uUGlja1wiLFwib25TZWxlY3RcIl0pXSldKV0pLGUuc2hvd1RpbWU/KGEoKSxuKFwiZGl2XCIsdGksW3MoYix7c2l6ZTpcIm1pbmlcIix0eXBlOlwidGV4dFwiLGNsYXNzOlwiZWwtcGlja2VyLXBhbmVsX19saW5rLWJ0blwiLG9uQ2xpY2s6ZS5oYW5kbGVDbGVhcn0se2RlZmF1bHQ6aSgoKCk9PltjKHAoZS50KFwiZWwuZGF0ZXBpY2tlci5jbGVhclwiKSksMSldKSksXzoxfSw4LFtcIm9uQ2xpY2tcIl0pLHMoYix7cGxhaW46XCJcIixzaXplOlwibWluaVwiLGNsYXNzOlwiZWwtcGlja2VyLXBhbmVsX19saW5rLWJ0blwiLGRpc2FibGVkOmUuYnRuRGlzYWJsZWQsb25DbGljazp0WzE5XXx8KHRbMTldPXQ9PmUuaGFuZGxlQ29uZmlybSghMSkpfSx7ZGVmYXVsdDppKCgoKT0+W2MocChlLnQoXCJlbC5kYXRlcGlja2VyLmNvbmZpcm1cIikpLDEpXSkpLF86MX0sOCxbXCJkaXNhYmxlZFwiXSldKSk6dShcInYtaWZcIiwhMCldLDIpfSxGby5fX2ZpbGU9XCJwYWNrYWdlcy9kYXRlLXBpY2tlci9zcmMvZGF0ZS1waWNrZXItY29tL3BhbmVsLWRhdGUtcmFuZ2UudnVlXCI7dmFyIGxpPWUoe2NvbXBvbmVudHM6e01vbnRoVGFibGU6bW99LHByb3BzOnt1bmxpbmtQYW5lbHM6Qm9vbGVhbixwYXJzZWRWYWx1ZTp7dHlwZTpBcnJheX19LGVtaXRzOltcInBpY2tcIixcInNldC1waWNrZXItb3B0aW9uXCJdLHNldHVwKGUsYSl7Y29uc3Qgbj10KHNlKCkpLG89dChzZSgpLmFkZCgxLFwieWVhclwiKSksaT1sKCgoKT0+ISFnLmxlbmd0aCkpLHI9bCgoKCk9PmAke24udmFsdWUueWVhcigpfSAke3FsKFwiZWwuZGF0ZXBpY2tlci55ZWFyXCIpfWApKSxzPWwoKCgpPT5gJHtvLnZhbHVlLnllYXIoKX0gJHtxbChcImVsLmRhdGVwaWNrZXIueWVhclwiKX1gKSksdT1sKCgoKT0+bi52YWx1ZS55ZWFyKCkpKSxkPWwoKCgpPT5vLnZhbHVlLnllYXIoKT09PW4udmFsdWUueWVhcigpP24udmFsdWUueWVhcigpKzE6by52YWx1ZS55ZWFyKCkpKSxjPWwoKCgpPT5lLnVubGlua1BhbmVscyYmZC52YWx1ZT51LnZhbHVlKzEpKSxwPXQobnVsbCksaD10KG51bGwpLHY9dCh7ZW5kRGF0ZTpudWxsLHNlbGVjdGluZzohMX0pLG09KGU9ITEpPT57dmFyIHQ7dD1bcC52YWx1ZSxoLnZhbHVlXSxBcnJheS5pc0FycmF5KHQpJiZ0JiZ0WzBdJiZ0WzFdJiZ0WzBdLnZhbHVlT2YoKTw9dFsxXS52YWx1ZU9mKCkmJmEuZW1pdChcInBpY2tcIixbcC52YWx1ZSxoLnZhbHVlXSxlKX07YS5lbWl0KFwic2V0LXBpY2tlci1vcHRpb25cIixbXCJmb3JtYXRUb1N0cmluZ1wiLGU9PmUubWFwKChlPT5lLmZvcm1hdChrKSkpXSk7Y29uc3QgZj13KFwiRVBfUElDS0VSX0JBU0VcIikse3Nob3J0Y3V0czpnLGRpc2FibGVkRGF0ZTpiLGZvcm1hdDprLGRlZmF1bHRWYWx1ZTpDfT1mLnByb3BzO3JldHVybiB5KCgoKT0+ZS5wYXJzZWRWYWx1ZSksKHQ9PntpZih0JiYyPT09dC5sZW5ndGgpaWYocC52YWx1ZT10WzBdLGgudmFsdWU9dFsxXSxuLnZhbHVlPXAudmFsdWUsZS51bmxpbmtQYW5lbHMmJmgudmFsdWUpe2NvbnN0IGU9cC52YWx1ZS55ZWFyKCksdD1oLnZhbHVlLnllYXIoKTtvLnZhbHVlPWU9PT10P2gudmFsdWUuYWRkKDEsXCJ5ZWFyXCIpOmgudmFsdWV9ZWxzZSBvLnZhbHVlPW4udmFsdWUuYWRkKDEsXCJ5ZWFyXCIpO2Vsc2V7Y29uc3QgdD0oKCk9PntsZXQgdDtpZihBcnJheS5pc0FycmF5KEMpKXtjb25zdCB0PXNlKENbMF0pO2xldCBsPXNlKENbMV0pO3JldHVybiBlLnVubGlua1BhbmVsc3x8KGw9dC5hZGQoMSxcInllYXJcIikpLFt0LGxdfXJldHVybiB0PUM/c2UoQyk6c2UoKSxbdCx0LmFkZCgxLFwieWVhclwiKV19KSgpO24udmFsdWU9dFswXSxvLnZhbHVlPXRbMV19fSkse2ltbWVkaWF0ZTohMH0pLHtzaG9ydGN1dHM6ZyxkaXNhYmxlZERhdGU6YixvblNlbGVjdDplPT57di52YWx1ZS5zZWxlY3Rpbmc9ZSxlfHwodi52YWx1ZS5lbmREYXRlPW51bGwpfSxoYW5kbGVSYW5nZVBpY2s6KGUsdD0hMCk9Pntjb25zdCBsPWUubWluRGF0ZSxhPWUubWF4RGF0ZTtoLnZhbHVlPT09YSYmcC52YWx1ZT09PWx8fChoLnZhbHVlPWEscC52YWx1ZT1sLHQmJm0oKSl9LHJhbmdlU3RhdGU6dixoYW5kbGVDaGFuZ2VSYW5nZTplPT57di52YWx1ZT1lfSxtaW5EYXRlOnAsbWF4RGF0ZTpoLGVuYWJsZVllYXJBcnJvdzpjLGxlZnRMYWJlbDpyLHJpZ2h0TGFiZWw6cyxsZWZ0TmV4dFllYXI6KCk9PntuLnZhbHVlPW4udmFsdWUuYWRkKDEsXCJ5ZWFyXCIpfSxsZWZ0UHJldlllYXI6KCk9PntuLnZhbHVlPW4udmFsdWUuc3VidHJhY3QoMSxcInllYXJcIiksZS51bmxpbmtQYW5lbHN8fChvLnZhbHVlPW8udmFsdWUuc3VidHJhY3QoMSxcInllYXJcIikpfSxyaWdodE5leHRZZWFyOigpPT57ZS51bmxpbmtQYW5lbHN8fChuLnZhbHVlPW4udmFsdWUuYWRkKDEsXCJ5ZWFyXCIpKSxvLnZhbHVlPW8udmFsdWUuYWRkKDEsXCJ5ZWFyXCIpfSxyaWdodFByZXZZZWFyOigpPT57by52YWx1ZT1vLnZhbHVlLnN1YnRyYWN0KDEsXCJ5ZWFyXCIpfSx0OnFsLGxlZnREYXRlOm4scmlnaHREYXRlOm8saGFzU2hvcnRjdXRzOmksaGFuZGxlU2hvcnRjdXRDbGljazplPT57ZS52YWx1ZT9hLmVtaXQoXCJwaWNrXCIsW3NlKGUudmFsdWVbMF0pLHNlKGUudmFsdWVbMV0pXSk6ZS5vbkNsaWNrJiZlLm9uQ2xpY2soYSl9fX19KTtjb25zdCBhaT17Y2xhc3M6XCJlbC1waWNrZXItcGFuZWxfX2JvZHktd3JhcHBlclwifSxuaT17a2V5OjAsY2xhc3M6XCJlbC1waWNrZXItcGFuZWxfX3NpZGViYXJcIn0sb2k9e2NsYXNzOlwiZWwtcGlja2VyLXBhbmVsX19ib2R5XCJ9LGlpPXtjbGFzczpcImVsLXBpY2tlci1wYW5lbF9fY29udGVudCBlbC1kYXRlLXJhbmdlLXBpY2tlcl9fY29udGVudCBpcy1sZWZ0XCJ9LHJpPXtjbGFzczpcImVsLWRhdGUtcmFuZ2UtcGlja2VyX19oZWFkZXJcIn0sc2k9e2NsYXNzOlwiZWwtcGlja2VyLXBhbmVsX19jb250ZW50IGVsLWRhdGUtcmFuZ2UtcGlja2VyX19jb250ZW50IGlzLXJpZ2h0XCJ9LHVpPXtjbGFzczpcImVsLWRhdGUtcmFuZ2UtcGlja2VyX19oZWFkZXJcIn07bGkucmVuZGVyPWZ1bmN0aW9uKGUsdCxsLG8saSxyKXtjb25zdCBjPVAoXCJtb250aC10YWJsZVwiKTtyZXR1cm4gYSgpLG4oXCJkaXZcIix7Y2xhc3M6W1wiZWwtcGlja2VyLXBhbmVsIGVsLWRhdGUtcmFuZ2UtcGlja2VyXCIsW3tcImhhcy1zaWRlYmFyXCI6ZS4kc2xvdHMuc2lkZWJhcnx8ZS5oYXNTaG9ydGN1dHN9XV19LFtzKFwiZGl2XCIsYWksW2QoZS4kc2xvdHMsXCJzaWRlYmFyXCIse2NsYXNzOlwiZWwtcGlja2VyLXBhbmVsX19zaWRlYmFyXCJ9KSxlLmhhc1Nob3J0Y3V0cz8oYSgpLG4oXCJkaXZcIixuaSxbKGEoITApLG4oRSxudWxsLEgoZS5zaG9ydGN1dHMsKCh0LGwpPT4oYSgpLG4oXCJidXR0b25cIix7a2V5OmwsdHlwZTpcImJ1dHRvblwiLGNsYXNzOlwiZWwtcGlja2VyLXBhbmVsX19zaG9ydGN1dFwiLG9uQ2xpY2s6bD0+ZS5oYW5kbGVTaG9ydGN1dENsaWNrKHQpfSxwKHQudGV4dCksOSxbXCJvbkNsaWNrXCJdKSkpKSwxMjgpKV0pKTp1KFwidi1pZlwiLCEwKSxzKFwiZGl2XCIsb2ksW3MoXCJkaXZcIixpaSxbcyhcImRpdlwiLHJpLFtzKFwiYnV0dG9uXCIse3R5cGU6XCJidXR0b25cIixjbGFzczpcImVsLXBpY2tlci1wYW5lbF9faWNvbi1idG4gZWwtaWNvbi1kLWFycm93LWxlZnRcIixvbkNsaWNrOnRbMV18fCh0WzFdPSguLi50KT0+ZS5sZWZ0UHJldlllYXIoLi4udCkpfSksZS51bmxpbmtQYW5lbHM/KGEoKSxuKFwiYnV0dG9uXCIse2tleTowLHR5cGU6XCJidXR0b25cIixkaXNhYmxlZDohZS5lbmFibGVZZWFyQXJyb3csY2xhc3M6W3tcImlzLWRpc2FibGVkXCI6IWUuZW5hYmxlWWVhckFycm93fSxcImVsLXBpY2tlci1wYW5lbF9faWNvbi1idG4gZWwtaWNvbi1kLWFycm93LXJpZ2h0XCJdLG9uQ2xpY2s6dFsyXXx8KHRbMl09KC4uLnQpPT5lLmxlZnROZXh0WWVhciguLi50KSl9LG51bGwsMTAsW1wiZGlzYWJsZWRcIl0pKTp1KFwidi1pZlwiLCEwKSxzKFwiZGl2XCIsbnVsbCxwKGUubGVmdExhYmVsKSwxKV0pLHMoYyx7XCJzZWxlY3Rpb24tbW9kZVwiOlwicmFuZ2VcIixkYXRlOmUubGVmdERhdGUsXCJtaW4tZGF0ZVwiOmUubWluRGF0ZSxcIm1heC1kYXRlXCI6ZS5tYXhEYXRlLFwicmFuZ2Utc3RhdGVcIjplLnJhbmdlU3RhdGUsXCJkaXNhYmxlZC1kYXRlXCI6ZS5kaXNhYmxlZERhdGUsb25DaGFuZ2VyYW5nZTplLmhhbmRsZUNoYW5nZVJhbmdlLG9uUGljazplLmhhbmRsZVJhbmdlUGljayxvblNlbGVjdDplLm9uU2VsZWN0fSxudWxsLDgsW1wiZGF0ZVwiLFwibWluLWRhdGVcIixcIm1heC1kYXRlXCIsXCJyYW5nZS1zdGF0ZVwiLFwiZGlzYWJsZWQtZGF0ZVwiLFwib25DaGFuZ2VyYW5nZVwiLFwib25QaWNrXCIsXCJvblNlbGVjdFwiXSldKSxzKFwiZGl2XCIsc2ksW3MoXCJkaXZcIix1aSxbZS51bmxpbmtQYW5lbHM/KGEoKSxuKFwiYnV0dG9uXCIse2tleTowLHR5cGU6XCJidXR0b25cIixkaXNhYmxlZDohZS5lbmFibGVZZWFyQXJyb3csY2xhc3M6W3tcImlzLWRpc2FibGVkXCI6IWUuZW5hYmxlWWVhckFycm93fSxcImVsLXBpY2tlci1wYW5lbF9faWNvbi1idG4gZWwtaWNvbi1kLWFycm93LWxlZnRcIl0sb25DbGljazp0WzNdfHwodFszXT0oLi4udCk9PmUucmlnaHRQcmV2WWVhciguLi50KSl9LG51bGwsMTAsW1wiZGlzYWJsZWRcIl0pKTp1KFwidi1pZlwiLCEwKSxzKFwiYnV0dG9uXCIse3R5cGU6XCJidXR0b25cIixjbGFzczpcImVsLXBpY2tlci1wYW5lbF9faWNvbi1idG4gZWwtaWNvbi1kLWFycm93LXJpZ2h0XCIsb25DbGljazp0WzRdfHwodFs0XT0oLi4udCk9PmUucmlnaHROZXh0WWVhciguLi50KSl9KSxzKFwiZGl2XCIsbnVsbCxwKGUucmlnaHRMYWJlbCksMSldKSxzKGMse1wic2VsZWN0aW9uLW1vZGVcIjpcInJhbmdlXCIsZGF0ZTplLnJpZ2h0RGF0ZSxcIm1pbi1kYXRlXCI6ZS5taW5EYXRlLFwibWF4LWRhdGVcIjplLm1heERhdGUsXCJyYW5nZS1zdGF0ZVwiOmUucmFuZ2VTdGF0ZSxcImRpc2FibGVkLWRhdGVcIjplLmRpc2FibGVkRGF0ZSxvbkNoYW5nZXJhbmdlOmUuaGFuZGxlQ2hhbmdlUmFuZ2Usb25QaWNrOmUuaGFuZGxlUmFuZ2VQaWNrLG9uU2VsZWN0OmUub25TZWxlY3R9LG51bGwsOCxbXCJkYXRlXCIsXCJtaW4tZGF0ZVwiLFwibWF4LWRhdGVcIixcInJhbmdlLXN0YXRlXCIsXCJkaXNhYmxlZC1kYXRlXCIsXCJvbkNoYW5nZXJhbmdlXCIsXCJvblBpY2tcIixcIm9uU2VsZWN0XCJdKV0pXSldKV0sMil9LGxpLl9fZmlsZT1cInBhY2thZ2VzL2RhdGUtcGlja2VyL3NyYy9kYXRlLXBpY2tlci1jb20vcGFuZWwtbW9udGgtcmFuZ2UudnVlXCIsc2UuZXh0ZW5kKGZlKSxzZS5leHRlbmQodWUpLHNlLmV4dGVuZChoZSksc2UuZXh0ZW5kKGRlKSxzZS5leHRlbmQodmUpLHNlLmV4dGVuZChtZSksc2UuZXh0ZW5kKGdlKSxzZS5leHRlbmQoYmUpO3ZhciBkaT1lKHtuYW1lOlwiRWxEYXRlUGlja2VyXCIsaW5zdGFsbDpudWxsLHByb3BzOk9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSxHbCkse3R5cGU6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJkYXRlXCJ9fSksc2V0dXAoZSx0KXtjb25zdCBsPVVsW2UudHlwZV18fFwiWVlZWS1NTS1ERFwiO3JldHVybigpPT5EKFpsLE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7Zm9ybWF0Omx9LGUpLHt0eXBlOmUudHlwZSxcIm9uVXBkYXRlOm1vZGVsVmFsdWVcIjplPT50LmVtaXQoXCJ1cGRhdGU6bW9kZWxWYWx1ZVwiLGUpfSkse2RlZmF1bHQ6dD0+e3JldHVybiBEKFwiZGF0ZXJhbmdlXCI9PT0obD1lLnR5cGUpfHxcImRhdGV0aW1lcmFuZ2VcIj09PWw/Rm86XCJtb250aHJhbmdlXCI9PT1sP2xpOkRvLHQpO3ZhciBsfX0pfX0pO2RpLmluc3RhbGw9ZT0+e2UuY29tcG9uZW50KGRpLm5hbWUsZGkpfTt2YXIgY2k9ZSh7bmFtZTpcIkVsT3ZlcmxheVwiLHByb3BzOnttYXNrOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMH0sb3ZlcmxheUNsYXNzOnt0eXBlOlN0cmluZ30sekluZGV4Ont0eXBlOk51bWJlcn19LGVtaXRzOltcImNsaWNrXCJdLHNldHVwKGUse3Nsb3RzOnQsZW1pdDpsfSl7Y29uc3QgYT0oKT0+e2woXCJjbGlja1wiKX07cmV0dXJuKCk9PmUubWFzaz9zKFwiZGl2XCIse2NsYXNzOltcImVsLW92ZXJsYXlcIixlLm92ZXJsYXlDbGFzc10sc3R5bGU6e3pJbmRleDplLnpJbmRleH0sb25DbGljazphfSxbZCh0LFwiZGVmYXVsdFwiKV0saWwuU1RZTEV8aWwuQ0xBU1N8aWwuUFJPUFMsW1wib25DbGlja1wiXSk6ZCh0LFwiZGVmYXVsdFwiKX19KTtjaS5fX2ZpbGU9XCJwYWNrYWdlcy9vdmVybGF5L3NyYy9pbmRleC52dWVcIjtmdW5jdGlvbiBwaShlLGEsbil7Y29uc3Qgbz10KCExKSxpPXQoITEpLHI9dChudWxsKSxzPXQobnVsbCksdT10KG51bGwpLGQ9dCghMSksYz10KGUuekluZGV4fHxnbC5uZXh0WkluZGV4KCkpLHA9dChudWxsKSxoPWwoKCgpPT57Y29uc3QgdD17fTtyZXR1cm4gZS5mdWxsc2NyZWVufHwodC5tYXJnaW5Ub3A9ZS50b3AsZS53aWR0aCYmKHQud2lkdGg9ZS53aWR0aCkpLHR9KSk7ZnVuY3Rpb24gdigpe0tlKHUpLEtlKHMpLGUub3BlbkRlbGF5JiZlLm9wZW5EZWxheT4wP3MudmFsdWU9d2luZG93LnNldFRpbWVvdXQoKCgpPT57cy52YWx1ZT1udWxsLEMoKX0pLGUub3BlbkRlbGF5KTpDKCl9ZnVuY3Rpb24gbSgpe0tlKHMpLEtlKHUpLGUuY2xvc2VEZWxheSYmZS5jbG9zZURlbGF5PjA/dS52YWx1ZT13aW5kb3cuc2V0VGltZW91dCgoKCk9Pnt1LnZhbHVlPW51bGwseCgpfSksZS5jbG9zZURlbGF5KTp4KCl9ZnVuY3Rpb24gZihlKXtlfHwoaS52YWx1ZT0hMCxvLnZhbHVlPSExKX1mdW5jdGlvbiBnKCl7ZS5iZWZvcmVDbG9zZT9lLmJlZm9yZUNsb3NlKGYpOm0oKX1mdW5jdGlvbiBDKCl7emV8fChvLnZhbHVlPSEwKX1mdW5jdGlvbiB4KCl7by52YWx1ZT0hMX1yZXR1cm4gZS5sb2NrU2Nyb2xsJiYoZT0+e2IoZSl8fG10KFwiW3VzZUxvY2tTY3JlZW5dXCIsXCJZb3UgbmVlZCB0byBwYXNzIGEgcmVmIHBhcmFtIHRvIHRoaXMgZnVuY3Rpb25cIik7bGV0IHQ9MCxsPSExLGE9XCIwXCIsbj0wO3koZSwoZT0+e2lmKGUpe2w9IW50KGRvY3VtZW50LmJvZHksXCJlbC1wb3B1cC1wYXJlbnQtLWhpZGRlblwiKSxsJiYoYT1kb2N1bWVudC5ib2R5LnN0eWxlLnBhZGRpbmdSaWdodCxuPXBhcnNlSW50KHJ0KGRvY3VtZW50LmJvZHksXCJwYWRkaW5nUmlnaHRcIiksMTApKSx0PWh0KCk7Y29uc3QgZT1kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0PGRvY3VtZW50LmJvZHkuc2Nyb2xsSGVpZ2h0LG89cnQoZG9jdW1lbnQuYm9keSxcIm92ZXJmbG93WVwiKTt0PjAmJihlfHxcInNjcm9sbFwiPT09bykmJmwmJihkb2N1bWVudC5ib2R5LnN0eWxlLnBhZGRpbmdSaWdodD1uK3QrXCJweFwiKSxvdChkb2N1bWVudC5ib2R5LFwiZWwtcG9wdXAtcGFyZW50LS1oaWRkZW5cIil9ZWxzZSBsJiYoZG9jdW1lbnQuYm9keS5zdHlsZS5wYWRkaW5nUmlnaHQ9YSxpdChkb2N1bWVudC5ib2R5LFwiZWwtcG9wdXAtcGFyZW50LS1oaWRkZW5cIikpLGw9ITB9KSl9KShvKSxlLmNsb3NlT25QcmVzc0VzY2FwZSYmKChlLHQpPT57eSgoKCk9PnQudmFsdWUpLCh0PT57dD93dC5wdXNoKGUpOnd0LnNwbGljZSh3dC5maW5kSW5kZXgoKHQ9PnQ9PT1lKSksMSl9KSl9KSh7aGFuZGxlQ2xvc2U6Z30sbyksKChlLHQpPT57bGV0IGw7eSgoKCk9PmUudmFsdWUpLChlPT57dmFyIGEsbjtlPyhsPWRvY3VtZW50LmFjdGl2ZUVsZW1lbnQsYih0KSYmKG51bGw9PT0obj0oYT10LnZhbHVlKS5mb2N1cyl8fHZvaWQgMD09PW58fG4uY2FsbChhKSkpOlwidGVzdGluZ1wiPT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/bC5mb2N1cy5jYWxsKGwpOmwuZm9jdXMoKX0pKX0pKG8pLHkoKCgpPT5lLm1vZGVsVmFsdWUpLCh0PT57dD8oaS52YWx1ZT0hMSxkLnZhbHVlPSEwLHYoKSxhLmVtaXQoXCJvcGVuXCIpLGMudmFsdWU9ZS56SW5kZXg/Yy52YWx1ZSsrOmdsLm5leHRaSW5kZXgoKSxrKCgoKT0+e24udmFsdWUmJihuLnZhbHVlLnNjcm9sbFRvcD0wKX0pKSk6KG0oKSxpLnZhbHVlfHxhLmVtaXQoXCJjbG9zZVwiKSl9KSksXygoKCk9PntlLm1vZGVsVmFsdWUmJihvLnZhbHVlPSEwLGQudmFsdWU9ITAsdigpKX0pKSx7YWZ0ZXJFbnRlcjpmdW5jdGlvbigpe2EuZW1pdChcIm9wZW5lZFwiKX0sYWZ0ZXJMZWF2ZTpmdW5jdGlvbigpe2EuZW1pdChcImNsb3NlZFwiKSxhLmVtaXQoUHQsITEpLGUuZGVzdHJveU9uQ2xvc2UmJihkLnZhbHVlPSExKX0saGFuZGxlQ2xvc2U6Zyxvbk1vZGFsQ2xpY2s6ZnVuY3Rpb24oKXtlLmNsb3NlT25DbGlja01vZGFsJiZnKCl9LGNsb3NlZDppLGRpYWxvZ1JlZjpyLHN0eWxlOmgscmVuZGVyZWQ6ZCxtb2RhbFJlZjpwLHZpc2libGU6byx6SW5kZXg6Y319dmFyIGhpPWUoe25hbWU6XCJFbERpYWxvZ1wiLGNvbXBvbmVudHM6e1wiZWwtb3ZlcmxheVwiOmNpfSxkaXJlY3RpdmVzOntUcmFwRm9jdXM6TnR9LHByb3BzOnthcHBlbmRUb0JvZHk6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiExfSxiZWZvcmVDbG9zZTp7dHlwZTpGdW5jdGlvbn0sZGVzdHJveU9uQ2xvc2U6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiExfSxjZW50ZXI6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiExfSxjdXN0b21DbGFzczp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIlwifSxjbG9zZU9uQ2xpY2tNb2RhbDp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITB9LGNsb3NlT25QcmVzc0VzY2FwZTp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITB9LGZ1bGxzY3JlZW46e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiExfSxsb2NrU2Nyb2xsOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMH0sbW9kYWw6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiEwfSxzaG93Q2xvc2U6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiEwfSx0aXRsZTp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIlwifSxvcGVuRGVsYXk6e3R5cGU6TnVtYmVyLGRlZmF1bHQ6MH0sY2xvc2VEZWxheTp7dHlwZTpOdW1iZXIsZGVmYXVsdDowfSx0b3A6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCIxNXZoXCJ9LG1vZGVsVmFsdWU6e3R5cGU6Qm9vbGVhbixyZXF1aXJlZDohMH0sbW9kYWxDbGFzczpTdHJpbmcsd2lkdGg6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCI1MCVcIix2YWxpZGF0b3I6ZT0+W1wicHhcIixcInJlbVwiLFwiZW1cIixcInZ3XCIsXCIlXCIsXCJ2bWluXCIsXCJ2bWF4XCJdLnNvbWUoKHQ9PmUuZW5kc1dpdGgodCkpKX0sekluZGV4Ont0eXBlOk51bWJlcn19LGVtaXRzOltcIm9wZW5cIixcIm9wZW5lZFwiLFwiY2xvc2VcIixcImNsb3NlZFwiLFB0XSxzZXR1cChlLGwpe2NvbnN0IGE9dChudWxsKTtyZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LHBpKGUsbCxhKSkse2RpYWxvZ1JlZjphfSl9fSk7Y29uc3Qgdmk9e2NsYXNzOlwiZWwtZGlhbG9nX19oZWFkZXJcIn0sbWk9e2NsYXNzOlwiZWwtZGlhbG9nX190aXRsZVwifSxmaT1zKFwiaVwiLHtjbGFzczpcImVsLWRpYWxvZ19fY2xvc2UgZWwtaWNvbiBlbC1pY29uLWNsb3NlXCJ9LG51bGwsLTEpLGdpPXtrZXk6MCxjbGFzczpcImVsLWRpYWxvZ19fYm9keVwifSxiaT17a2V5OjEsY2xhc3M6XCJlbC1kaWFsb2dfX2Zvb3RlclwifTtoaS5yZW5kZXI9ZnVuY3Rpb24oZSx0LGwsYyx2LG0pe2NvbnN0IGY9UChcImVsLW92ZXJsYXlcIiksZz1GKFwidHJhcC1mb2N1c1wiKTtyZXR1cm4gYSgpLG4oeix7dG86XCJib2R5XCIsZGlzYWJsZWQ6IWUuYXBwZW5kVG9Cb2R5fSxbcyhvLHtuYW1lOlwiZGlhbG9nLWZhZGVcIixvbkFmdGVyRW50ZXI6ZS5hZnRlckVudGVyLG9uQWZ0ZXJMZWF2ZTplLmFmdGVyTGVhdmV9LHtkZWZhdWx0OmkoKCgpPT5bcihzKGYse21hc2s6ZS5tb2RhbCxcIm92ZXJsYXktY2xhc3NcIjplLm1vZGFsQ2xhc3MsXCJ6LWluZGV4XCI6ZS56SW5kZXgsb25DbGljazplLm9uTW9kYWxDbGlja30se2RlZmF1bHQ6aSgoKCk9PltyKHMoXCJkaXZcIix7cmVmOlwiZGlhbG9nUmVmXCIsY2xhc3M6W1wiZWwtZGlhbG9nXCIse1wiaXMtZnVsbHNjcmVlblwiOmUuZnVsbHNjcmVlbixcImVsLWRpYWxvZy0tY2VudGVyXCI6ZS5jZW50ZXJ9LGUuY3VzdG9tQ2xhc3NdLFwiYXJpYS1tb2RhbFwiOlwidHJ1ZVwiLHJvbGU6XCJkaWFsb2dcIixcImFyaWEtbGFiZWxcIjplLnRpdGxlfHxcImRpYWxvZ1wiLHN0eWxlOmUuc3R5bGUsb25DbGljazp0WzJdfHwodFsyXT1lPT5lLnN0b3BQcm9wYWdhdGlvbigpKX0sW3MoXCJkaXZcIix2aSxbZChlLiRzbG90cyxcInRpdGxlXCIse30sKCgpPT5bcyhcInNwYW5cIixtaSxwKGUudGl0bGUpLDEpXSkpLGUuc2hvd0Nsb3NlPyhhKCksbihcImJ1dHRvblwiLHtrZXk6MCxcImFyaWEtbGFiZWxcIjpcImNsb3NlXCIsY2xhc3M6XCJlbC1kaWFsb2dfX2hlYWRlcmJ0blwiLHR5cGU6XCJidXR0b25cIixvbkNsaWNrOnRbMV18fCh0WzFdPSguLi50KT0+ZS5oYW5kbGVDbG9zZSguLi50KSl9LFtmaV0pKTp1KFwidi1pZlwiLCEwKV0pLGUucmVuZGVyZWQ/KGEoKSxuKFwiZGl2XCIsZ2ksW2QoZS4kc2xvdHMsXCJkZWZhdWx0XCIpXSkpOnUoXCJ2LWlmXCIsITApLGUuJHNsb3RzLmZvb3Rlcj8oYSgpLG4oXCJkaXZcIixiaSxbZChlLiRzbG90cyxcImZvb3RlclwiKV0pKTp1KFwidi1pZlwiLCEwKV0sMTQsW1wiYXJpYS1sYWJlbFwiXSksW1tnXV0pXSkpLF86M30sOCxbXCJtYXNrXCIsXCJvdmVybGF5LWNsYXNzXCIsXCJ6LWluZGV4XCIsXCJvbkNsaWNrXCJdKSxbW2gsZS52aXNpYmxlXV0pXSkpLF86MX0sOCxbXCJvbkFmdGVyRW50ZXJcIixcIm9uQWZ0ZXJMZWF2ZVwiXSldLDgsW1wiZGlzYWJsZWRcIl0pfSxoaS5fX2ZpbGU9XCJwYWNrYWdlcy9kaWFsb2cvc3JjL2luZGV4LnZ1ZVwiLGhpLmluc3RhbGw9ZT0+e2UuY29tcG9uZW50KGhpLm5hbWUsaGkpfTt2YXIgeWk9ZSh7bmFtZTpcIkVsRGl2aWRlclwiLHByb3BzOntkaXJlY3Rpb246e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJob3Jpem9udGFsXCIsdmFsaWRhdG9yOmU9Pi0xIT09W1wiaG9yaXpvbnRhbFwiLFwidmVydGljYWxcIl0uaW5kZXhPZihlKX0sY29udGVudFBvc2l0aW9uOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiY2VudGVyXCIsdmFsaWRhdG9yOmU9Pi0xIT09W1wibGVmdFwiLFwiY2VudGVyXCIsXCJyaWdodFwiXS5pbmRleE9mKGUpfX19KTt5aS5yZW5kZXI9ZnVuY3Rpb24oZSx0LGwsbyxpLHIpe3JldHVybiBhKCksbihcImRpdlwiLHtjbGFzczpbXCJlbC1kaXZpZGVyXCIsXCJlbC1kaXZpZGVyLS1cIitlLmRpcmVjdGlvbl19LFtlLiRzbG90cy5kZWZhdWx0JiZcInZlcnRpY2FsXCIhPT1lLmRpcmVjdGlvbj8oYSgpLG4oXCJkaXZcIix7a2V5OjAsY2xhc3M6W1wiZWwtZGl2aWRlcl9fdGV4dFwiLFwiaXMtXCIrZS5jb250ZW50UG9zaXRpb25dfSxbZChlLiRzbG90cyxcImRlZmF1bHRcIildLDIpKTp1KFwidi1pZlwiLCEwKV0sMil9LHlpLl9fZmlsZT1cInBhY2thZ2VzL2RpdmlkZXIvc3JjL2luZGV4LnZ1ZVwiLHlpLmluc3RhbGw9ZT0+e2UuY29tcG9uZW50KHlpLm5hbWUseWkpfTt2YXIga2k9ZSh7bmFtZTpcIkVsRHJhd2VyXCIsY29tcG9uZW50czp7W2NpLm5hbWVdOmNpfSxkaXJlY3RpdmVzOntUcmFwRm9jdXM6TnR9LHByb3BzOnttb2RlbFZhbHVlOnt0eXBlOkJvb2xlYW4scmVxdWlyZWQ6ITB9LGFwcGVuZFRvQm9keTp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITF9LGJlZm9yZUNsb3NlOkZ1bmN0aW9uLGN1c3RvbUNsYXNzOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiXCJ9LGRpcmVjdGlvbjp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcInJ0bFwiLHZhbGlkYXRvcjplPT4tMSE9PVtcImx0clwiLFwicnRsXCIsXCJ0dGJcIixcImJ0dFwiXS5pbmRleE9mKGUpfSxzaG93Q2xvc2U6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiEwfSxzaXplOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiMzAlXCJ9LHRpdGxlOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiXCJ9LGNsb3NlT25DbGlja01vZGFsOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMH0sd2l0aEhlYWRlcjp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITB9LG9wZW5EZWxheTp7dHlwZTpOdW1iZXIsZGVmYXVsdDowfSxjbG9zZURlbGF5Ont0eXBlOk51bWJlcixkZWZhdWx0OjB9LHpJbmRleDpOdW1iZXIsbW9kYWw6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiEwfSxtb2RhbEZhZGU6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiEwfSxtb2RhbENsYXNzOlN0cmluZyxsb2NrU2Nyb2xsOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMH0sY2xvc2VPblByZXNzRXNjYXBlOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMH0sZGVzdHJveU9uQ2xvc2U6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiExfX0sZW1pdHM6W1wib3BlblwiLFwib3BlbmVkXCIsXCJjbG9zZVwiLFwiY2xvc2VkXCIsXCJ1cGRhdGU6bW9kZWxWYWx1ZVwiXSxzZXR1cChlLGEpe2NvbnN0IG49dChudWxsKTtyZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LHBpKGUsYSxuKSkse2RyYXdlclJlZjpuLGlzSG9yaXpvbnRhbDpsKCgoKT0+XCJydGxcIj09PWUuZGlyZWN0aW9ufHxcImx0clwiPT09ZS5kaXJlY3Rpb24pKX0pfX0pO2NvbnN0IENpPXtrZXk6MCxpZDpcImVsLWRyYXdlcl9fdGl0bGVcIixjbGFzczpcImVsLWRyYXdlcl9faGVhZGVyXCJ9LHhpPXMoXCJpXCIse2NsYXNzOlwiZWwtZHJhd2VyX19jbG9zZSBlbC1pY29uIGVsLWljb24tY2xvc2VcIn0sbnVsbCwtMSksd2k9e2tleToxLGNsYXNzOlwiZWwtZHJhd2VyX19ib2R5XCJ9O2tpLnJlbmRlcj1mdW5jdGlvbihlLHQsbCxjLHYsbSl7Y29uc3QgZj1QKFwiZWwtb3ZlcmxheVwiKSxnPUYoXCJ0cmFwLWZvY3VzXCIpO3JldHVybiBhKCksbih6LHt0bzpcImJvZHlcIixkaXNhYmxlZDohZS5hcHBlbmRUb0JvZHl9LFtzKG8se25hbWU6XCJlbC1kcmF3ZXItZmFkZVwiLG9uQWZ0ZXJFbnRlcjplLmFmdGVyRW50ZXIsb25BZnRlckxlYXZlOmUuYWZ0ZXJMZWF2ZX0se2RlZmF1bHQ6aSgoKCk9PltyKHMoZix7bWFzazplLm1vZGFsLFwib3ZlcmxheS1jbGFzc1wiOmUubW9kYWxDbGFzcyxcInotaW5kZXhcIjplLnpJbmRleCxvbkNsaWNrOmUub25Nb2RhbENsaWNrfSx7ZGVmYXVsdDppKCgoKT0+W3MoXCJkaXZcIix7Y2xhc3M6W1wiZWwtZHJhd2VyX19jb250YWluZXJcIix7XCJlbC1kcmF3ZXJfX29wZW5cIjplLnZpc2libGV9XSx0YWJpbmRleDpcIi0xXCIscm9sZTpcImRvY3VtZW50XCJ9LFtyKHMoXCJkaXZcIix7cmVmOlwiZHJhd2VyUmVmXCIsXCJhcmlhLW1vZGFsXCI6XCJ0cnVlXCIsXCJhcmlhLWxhYmVsbGVkYnlcIjpcImVsLWRyYXdlcl9fdGl0bGVcIixcImFyaWEtbGFiZWxcIjplLnRpdGxlLGNsYXNzOltcImVsLWRyYXdlclwiLFtlLmRpcmVjdGlvbixlLmN1c3RvbUNsYXNzXV0sc3R5bGU6ZS5pc0hvcml6b250YWw/XCJ3aWR0aDogXCIrZS5zaXplOlwiaGVpZ2h0OiBcIitlLnNpemUscm9sZTpcImRpYWxvZ1wiLHRhYmluZGV4OlwiLTFcIixvbkNsaWNrOnRbMl18fCh0WzJdPVQoKCgpPT57fSksW1wic3RvcFwiXSkpfSxbZS53aXRoSGVhZGVyPyhhKCksbihcImhlYWRlclwiLENpLFtkKGUuJHNsb3RzLFwidGl0bGVcIix7fSwoKCk9PltzKFwic3BhblwiLHtyb2xlOlwiaGVhZGluZ1wiLHRhYmluZGV4OlwiLTFcIix0aXRsZTplLnRpdGxlfSxwKGUudGl0bGUpLDksW1widGl0bGVcIl0pXSkpLGUuc2hvd0Nsb3NlPyhhKCksbihcImJ1dHRvblwiLHtrZXk6MCxcImFyaWEtbGFiZWxcIjpcImNsb3NlIFwiKyhlLnRpdGxlfHxcImRyYXdlclwiKSxjbGFzczpcImVsLWRyYXdlcl9fY2xvc2UtYnRuXCIsdHlwZTpcImJ1dHRvblwiLG9uQ2xpY2s6dFsxXXx8KHRbMV09KC4uLnQpPT5lLmhhbmRsZUNsb3NlKC4uLnQpKX0sW3hpXSw4LFtcImFyaWEtbGFiZWxcIl0pKTp1KFwidi1pZlwiLCEwKV0pKTp1KFwidi1pZlwiLCEwKSxlLnJlbmRlcmVkPyhhKCksbihcInNlY3Rpb25cIix3aSxbZChlLiRzbG90cyxcImRlZmF1bHRcIildKSk6dShcInYtaWZcIiwhMCldLDE0LFtcImFyaWEtbGFiZWxcIl0pLFtbZ11dKV0sMildKSksXzoxfSw4LFtcIm1hc2tcIixcIm92ZXJsYXktY2xhc3NcIixcInotaW5kZXhcIixcIm9uQ2xpY2tcIl0pLFtbaCxlLnZpc2libGVdXSldKSksXzoxfSw4LFtcIm9uQWZ0ZXJFbnRlclwiLFwib25BZnRlckxlYXZlXCJdKV0sOCxbXCJkaXNhYmxlZFwiXSl9LGtpLl9fZmlsZT1cInBhY2thZ2VzL2RyYXdlci9zcmMvaW5kZXgudnVlXCIsa2kuaW5zdGFsbD1lPT57ZS5jb21wb25lbnQoa2kubmFtZSxraSl9O2NvbnN0IF9pPSgpPT57Y29uc3QgZT1xZSgpLHQ9dyhcImVsRHJvcGRvd25cIix7fSksYT1sKCgoKT0+bnVsbD09dD92b2lkIDA6dC5kcm9wZG93blNpemUpKTtyZXR1cm57RUxFTUVOVDplLGVsRHJvcGRvd246dCxfZWxEcm9wZG93blNpemU6YX19LFNpPShlLGwsYSk9Pntjb25zdCBuPXQobnVsbCksbz10KG51bGwpLGk9dChudWxsKSxyPXQoXCJkcm9wZG93bi1tZW51LVwiK1JlKCkpO2Z1bmN0aW9uIHMoKXt2YXIgZTtsLnNldEF0dHJpYnV0ZShcInRhYmluZGV4XCIsXCItMVwiKSxudWxsPT09KGU9by52YWx1ZSl8fHZvaWQgMD09PWV8fGUuZm9yRWFjaCgoZT0+e2Uuc2V0QXR0cmlidXRlKFwidGFiaW5kZXhcIixcIi0xXCIpfSkpfWZ1bmN0aW9uIHUoZSl7cygpLG51bGw9PWV8fGUuc2V0QXR0cmlidXRlKFwidGFiaW5kZXhcIixcIjBcIil9ZnVuY3Rpb24gZChlKXtjb25zdCB0PWUuY29kZTtbZnQudXAsZnQuZG93bl0uaW5jbHVkZXModCk/KHMoKSx1KG4udmFsdWVbMF0pLG4udmFsdWVbMF0uZm9jdXMoKSxlLnByZXZlbnREZWZhdWx0KCksZS5zdG9wUHJvcGFnYXRpb24oKSk6dD09PWZ0LmVudGVyP2EuaGFuZGxlQ2xpY2soKTpbZnQudGFiLGZ0LmVzY10uaW5jbHVkZXModCkmJmEuaGlkZSgpfWZ1bmN0aW9uIGMoZSl7Y29uc3QgdD1lLmNvZGUsbD1lLnRhcmdldCxpPW8udmFsdWUuaW5kZXhPZihsKSxyPW8udmFsdWUubGVuZ3RoLTE7bGV0IGQ7W2Z0LnVwLGZ0LmRvd25dLmluY2x1ZGVzKHQpPyhkPXQ9PT1mdC51cD8wIT09aT9pLTE6MDppPHI/aSsxOnIscygpLHUobi52YWx1ZVtkXSksbi52YWx1ZVtkXS5mb2N1cygpLGUucHJldmVudERlZmF1bHQoKSxlLnN0b3BQcm9wYWdhdGlvbigpKTp0PT09ZnQuZW50ZXI/KHAoKSxsLmNsaWNrKCksYS5wcm9wcy5oaWRlT25DbGljayYmYS5oaWRlKCkpOltmdC50YWIsZnQuZXNjXS5pbmNsdWRlcyh0KSYmKGEuaGlkZSgpLHAoKSl9ZnVuY3Rpb24gcCgpe2wuZm9jdXMoKX1pLnZhbHVlPW51bGw9PWU/dm9pZCAwOmUuc3ViVHJlZS5lbCxuLnZhbHVlPWkudmFsdWUucXVlcnlTZWxlY3RvckFsbChcIlt0YWJpbmRleD0nLTEnXVwiKSxvLnZhbHVlPVtdLnNsaWNlLmNhbGwobi52YWx1ZSksbHQobCxcImtleWRvd25cIixkKSxsdChpLnZhbHVlLFwia2V5ZG93blwiLGMsITApLGkudmFsdWUuc2V0QXR0cmlidXRlKFwiaWRcIixyLnZhbHVlKSxsLnNldEF0dHJpYnV0ZShcImFyaWEtaGFzcG9wdXBcIixcImxpc3RcIiksbC5zZXRBdHRyaWJ1dGUoXCJhcmlhLWNvbnRyb2xzXCIsci52YWx1ZSksYS5wcm9wcy5zcGxpdEJ1dHRvbnx8KGwuc2V0QXR0cmlidXRlKFwicm9sZVwiLFwiYnV0dG9uXCIpLGwuc2V0QXR0cmlidXRlKFwidGFiaW5kZXhcIixhLnByb3BzLnRhYmluZGV4KSxvdChsLFwiZWwtZHJvcGRvd24tc2VsZmRlZmluZVwiKSl9O3ZhciBFaT1lKHtuYW1lOlwiRWxEcm9wZG93blwiLGNvbXBvbmVudHM6e0VsQnV0dG9uOiRsLEVsQnV0dG9uR3JvdXA6V2wsRWxQb3BwZXI6U2x9LHByb3BzOnt0cmlnZ2VyOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiaG92ZXJcIn0sdHlwZTpTdHJpbmcsc2l6ZTp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIlwifSxzcGxpdEJ1dHRvbjpCb29sZWFuLGhpZGVPbkNsaWNrOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMH0scGxhY2VtZW50Ont0eXBlOlN0cmluZyxkZWZhdWx0OlwiYm90dG9tXCJ9LHNob3dUaW1lb3V0Ont0eXBlOk51bWJlcixkZWZhdWx0OjE1MH0saGlkZVRpbWVvdXQ6e3R5cGU6TnVtYmVyLGRlZmF1bHQ6MTUwfSx0YWJpbmRleDp7dHlwZTpOdW1iZXIsZGVmYXVsdDowfSxlZmZlY3Q6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJsaWdodFwifX0sZW1pdHM6W1widmlzaWJsZS1jaGFuZ2VcIixcImNsaWNrXCIsXCJjb21tYW5kXCJdLHNldHVwKGUse2VtaXQ6YX0pe2NvbnN0IG49digpLHtFTEVNRU5UOm99PV9pKCksaT10KG51bGwpLHI9dCghMSk7eSgoKCk9PnIudmFsdWUpLChlPT57dmFyIHQsbDtlJiYobnVsbD09PShsPW51bGw9PT0odD1kLnZhbHVlKXx8dm9pZCAwPT09dD92b2lkIDA6dC5mb2N1cyl8fHZvaWQgMD09PWx8fGwuY2FsbCh0KSksZXx8ZnVuY3Rpb24oKXt2YXIgZSx0O251bGw9PT0odD1udWxsPT09KGU9ZC52YWx1ZSl8fHZvaWQgMD09PWU/dm9pZCAwOmUuYmx1cil8fHZvaWQgMD09PXR8fHQuY2FsbChlKX0oKSxhKFwidmlzaWJsZS1jaGFuZ2VcIixlKX0pKTtjb25zdCBzPXQoITEpO3koKCgpPT5zLnZhbHVlKSwoZT0+e2NvbnN0IHQ9ZC52YWx1ZTt0JiYoZT9vdCh0LFwiZm9jdXNpbmdcIik6aXQodCxcImZvY3VzaW5nXCIpKX0pKTtjb25zdCB1PXQobnVsbCksZD1sKCgoKT0+e3ZhciB0LGwsYSxuO2NvbnN0IG89bnVsbCE9PShhPW51bGw9PT0obD1udWxsPT09KHQ9dS52YWx1ZSl8fHZvaWQgMD09PXQ/dm9pZCAwOnQuJHJlZnMudHJpZ2dlclJlZil8fHZvaWQgMD09PWw/dm9pZCAwOmwuY2hpbGRyZW5bMF0pJiZ2b2lkIDAhPT1hP2E6e307cmV0dXJuIGUuc3BsaXRCdXR0b24/bnVsbD09PShuPW8uY2hpbGRyZW4pfHx2b2lkIDA9PT1uP3ZvaWQgMDpuWzFdOm99KSk7ZnVuY3Rpb24gYygpe3ZhciBlOyhudWxsPT09KGU9ZC52YWx1ZSl8fHZvaWQgMD09PWU/dm9pZCAwOmUuZGlzYWJsZWQpfHwoci52YWx1ZT9oKCk6cCgpKX1mdW5jdGlvbiBwKCl7dmFyIHQ7KG51bGw9PT0odD1kLnZhbHVlKXx8dm9pZCAwPT09dD92b2lkIDA6dC5kaXNhYmxlZCl8fChpLnZhbHVlJiZjbGVhclRpbWVvdXQoaS52YWx1ZSksaS52YWx1ZT13aW5kb3cuc2V0VGltZW91dCgoKCk9PntyLnZhbHVlPSEwfSksXCJjbGlja1wiPT09ZS50cmlnZ2VyPzA6ZS5zaG93VGltZW91dCkpfWZ1bmN0aW9uIGgoKXt2YXIgdDsobnVsbD09PSh0PWQudmFsdWUpfHx2b2lkIDA9PT10P3ZvaWQgMDp0LmRpc2FibGVkKXx8KG0oKSxlLnRhYmluZGV4Pj0wJiZmKGQudmFsdWUpLGNsZWFyVGltZW91dChpLnZhbHVlKSxpLnZhbHVlPXdpbmRvdy5zZXRUaW1lb3V0KCgoKT0+e3IudmFsdWU9ITF9KSxcImNsaWNrXCI9PT1lLnRyaWdnZXI/MDplLmhpZGVUaW1lb3V0KSl9ZnVuY3Rpb24gbSgpe3ZhciBlO251bGw9PT0oZT1kLnZhbHVlKXx8dm9pZCAwPT09ZXx8ZS5zZXRBdHRyaWJ1dGUoXCJ0YWJpbmRleFwiLFwiLTFcIil9ZnVuY3Rpb24gZihlKXttKCksbnVsbD09ZXx8ZS5zZXRBdHRyaWJ1dGUoXCJ0YWJpbmRleFwiLFwiMFwiKX1jb25zdCBnPWwoKCgpPT5lLnNpemV8fG8uc2l6ZSkpO3goXCJlbERyb3Bkb3duXCIse2luc3RhbmNlOm4sZHJvcGRvd25TaXplOmcsdmlzaWJsZTpyLGhhbmRsZUNsaWNrOmMsY29tbWFuZEhhbmRsZXI6ZnVuY3Rpb24oLi4uZSl7YShcImNvbW1hbmRcIiwuLi5lKX0sc2hvdzpwLGhpZGU6aCx0cmlnZ2VyOmwoKCgpPT5lLnRyaWdnZXIpKSxoaWRlT25DbGljazpsKCgoKT0+ZS5oaWRlT25DbGljaykpLHRyaWdnZXJFbG06ZH0pLF8oKCgpPT57ZS5zcGxpdEJ1dHRvbnx8KGx0KGQudmFsdWUsXCJmb2N1c1wiLCgoKT0+e3MudmFsdWU9ITB9KSksbHQoZC52YWx1ZSxcImJsdXJcIiwoKCk9PntzLnZhbHVlPSExfSkpLGx0KGQudmFsdWUsXCJjbGlja1wiLCgoKT0+e3MudmFsdWU9ITF9KSkpLFwiaG92ZXJcIj09PWUudHJpZ2dlcj8obHQoZC52YWx1ZSxcIm1vdXNlZW50ZXJcIixwKSxsdChkLnZhbHVlLFwibW91c2VsZWF2ZVwiLGgpKTpcImNsaWNrXCI9PT1lLnRyaWdnZXImJmx0KGQudmFsdWUsXCJjbGlja1wiLGMpLE9iamVjdC5hc3NpZ24obix7aGFuZGxlQ2xpY2s6YyxoaWRlOmgscmVzZXRUYWJpbmRleDpmfSl9KSk7cmV0dXJue3Zpc2libGU6cixkcm9wZG93blNpemU6ZyxoYW5kbGVyTWFpbkJ1dHRvbkNsaWNrOmU9PnthKFwiY2xpY2tcIixlKSxoKCl9LHRyaWdnZXJWbm9kZTp1fX19KTtjb25zdCBNaT17Y2xhc3M6XCJlbC1kcm9wZG93blwifSxUaT1zKFwiaVwiLHtjbGFzczpcImVsLWRyb3Bkb3duX19pY29uIGVsLWljb24tYXJyb3ctZG93blwifSxudWxsLC0xKTtFaS5yZW5kZXI9ZnVuY3Rpb24oZSx0LGwsbyxyLHUpe2NvbnN0IGM9UChcImVsLWJ1dHRvblwiKSxwPVAoXCJlbC1idXR0b24tZ3JvdXBcIiksaD1QKFwiZWwtcG9wcGVyXCIpO3JldHVybiBhKCksbihoLHtyZWY6XCJ0cmlnZ2VyVm5vZGVcIix2aXNpYmxlOmUudmlzaWJsZSxcIm9uVXBkYXRlOnZpc2libGVcIjp0WzFdfHwodFsxXT10PT5lLnZpc2libGU9dCkscGxhY2VtZW50OmUucGxhY2VtZW50LGVmZmVjdDplLmVmZmVjdCxwdXJlOlwiXCIsXCJtYW51YWwtbW9kZVwiOiEwLHRyaWdnZXI6W2UudHJpZ2dlcl0sXCJwb3BwZXItY2xhc3NcIjpcImVsLWRyb3Bkb3duX19wb3BwZXJcIixcImFwcGVuZC10by1ib2R5XCI6XCJcIix0cmFuc2l0aW9uOlwiZWwtem9vbS1pbi10b3BcIixcImdwdS1hY2NlbGVyYXRpb25cIjohMX0se2RlZmF1bHQ6aSgoKCk9PltkKGUuJHNsb3RzLFwiZHJvcGRvd25cIildKSksdHJpZ2dlcjppKCgoKT0+W3MoXCJkaXZcIixNaSxbZS5zcGxpdEJ1dHRvbj8oYSgpLG4ocCx7a2V5OjF9LHtkZWZhdWx0OmkoKCgpPT5bcyhjLHtzaXplOmUuZHJvcGRvd25TaXplLHR5cGU6ZS50eXBlLG9uQ2xpY2s6ZS5oYW5kbGVyTWFpbkJ1dHRvbkNsaWNrfSx7ZGVmYXVsdDppKCgoKT0+W2QoZS4kc2xvdHMsXCJkZWZhdWx0XCIpXSkpLF86M30sOCxbXCJzaXplXCIsXCJ0eXBlXCIsXCJvbkNsaWNrXCJdKSxzKGMse3NpemU6ZS5kcm9wZG93blNpemUsdHlwZTplLnR5cGUsY2xhc3M6XCJlbC1kcm9wZG93bl9fY2FyZXQtYnV0dG9uXCJ9LHtkZWZhdWx0OmkoKCgpPT5bVGldKSksXzoxfSw4LFtcInNpemVcIixcInR5cGVcIl0pXSkpLF86MX0pKTpkKGUuJHNsb3RzLFwiZGVmYXVsdFwiLHtrZXk6MH0pXSldKSksXzoxfSw4LFtcInZpc2libGVcIixcInBsYWNlbWVudFwiLFwiZWZmZWN0XCIsXCJ0cmlnZ2VyXCJdKX0sRWkuX19maWxlPVwicGFja2FnZXMvZHJvcGRvd24vc3JjL2Ryb3Bkb3duLnZ1ZVwiLEVpLmluc3RhbGw9ZT0+e2UuY29tcG9uZW50KEVpLm5hbWUsRWkpfTt2YXIgTmk9ZSh7bmFtZTpcIkVsRHJvcGRvd25JdGVtXCIscHJvcHM6e2NvbW1hbmQ6e3R5cGU6W09iamVjdCxTdHJpbmcsTnVtYmVyXSxkZWZhdWx0OigpPT4oe30pfSxkaXNhYmxlZDpCb29sZWFuLGRpdmlkZWQ6Qm9vbGVhbixpY29uOlN0cmluZ30sc2V0dXAoZSl7Y29uc3R7ZWxEcm9wZG93bjp0fT1faSgpLGw9digpO3JldHVybntoYW5kbGVDbGljazpmdW5jdGlvbihhKXt2YXIgbixvO3QuaGlkZU9uQ2xpY2sudmFsdWUmJihudWxsPT09KG49dC5oYW5kbGVDbGljayl8fHZvaWQgMD09PW58fG4uY2FsbCh0KSksbnVsbD09PShvPXQuY29tbWFuZEhhbmRsZXIpfHx2b2lkIDA9PT1vfHxvLmNhbGwodCxlLmNvbW1hbmQsbCxhKX19fX0pO05pLnJlbmRlcj1mdW5jdGlvbihlLHQsbCxvLGkscil7cmV0dXJuIGEoKSxuKFwibGlcIix7Y2xhc3M6W1wiZWwtZHJvcGRvd24tbWVudV9faXRlbVwiLHtcImlzLWRpc2FibGVkXCI6ZS5kaXNhYmxlZCxcImVsLWRyb3Bkb3duLW1lbnVfX2l0ZW0tLWRpdmlkZWRcIjplLmRpdmlkZWR9XSxcImFyaWEtZGlzYWJsZWRcIjplLmRpc2FibGVkLHRhYmluZGV4OmUuZGlzYWJsZWQ/bnVsbDotMSxvbkNsaWNrOnRbMV18fCh0WzFdPSguLi50KT0+ZS5oYW5kbGVDbGljayguLi50KSl9LFtlLmljb24/KGEoKSxuKFwiaVwiLHtrZXk6MCxjbGFzczplLmljb259LG51bGwsMikpOnUoXCJ2LWlmXCIsITApLGQoZS4kc2xvdHMsXCJkZWZhdWx0XCIpXSwxMCxbXCJhcmlhLWRpc2FibGVkXCIsXCJ0YWJpbmRleFwiXSl9LE5pLl9fZmlsZT1cInBhY2thZ2VzL2Ryb3Bkb3duL3NyYy9kcm9wZG93bi1pdGVtLnZ1ZVwiLE5pLmluc3RhbGw9ZT0+e2UuY29tcG9uZW50KE5pLm5hbWUsTmkpfTt2YXIgRGk9ZSh7bmFtZTpcIkVsRHJvcGRvd25NZW51XCIsZGlyZWN0aXZlczp7Q2xpY2tPdXRzaWRlOk10fSxzZXR1cCgpe2NvbnN0e19lbERyb3Bkb3duU2l6ZTplLGVsRHJvcGRvd246dH09X2koKSxsPWUudmFsdWU7ZnVuY3Rpb24gYSgpe3ZhciBlO251bGw9PT0oZT10LmhpZGUpfHx2b2lkIDA9PT1lfHxlLmNhbGwodCl9cmV0dXJuIF8oKCgpPT57Y29uc3QgZT12KCk7U2koZSx0LnRyaWdnZXJFbG0udmFsdWUsdC5pbnN0YW5jZSl9KSkse3NpemU6bCxzaG93OmZ1bmN0aW9uKCl7dmFyIGU7bnVsbD09PShlPXQuc2hvdyl8fHZvaWQgMD09PWV8fGUuY2FsbCh0KX0saGlkZTpmdW5jdGlvbigpe1wiY2xpY2tcIiE9PXQudHJpZ2dlci52YWx1ZSYmYSgpfSxpbm5lckhpZGU6YSx0cmlnZ2VyRWxtOnQudHJpZ2dlckVsbX19fSk7RGkucmVuZGVyPWZ1bmN0aW9uKGUsdCxsLG8saSxzKXtjb25zdCB1PUYoXCJjbGlja091dHNpZGVcIik7cmV0dXJuIHIoKGEoKSxuKFwidWxcIix7Y2xhc3M6W1tlLnNpemUmJlwiZWwtZHJvcGRvd24tbWVudS0tXCIrZS5zaXplXSxcImVsLWRyb3Bkb3duLW1lbnVcIl0sb25Nb3VzZWVudGVyOnRbMV18fCh0WzFdPVQoKCguLi50KT0+ZS5zaG93KC4uLnQpKSxbXCJzdG9wXCJdKSksb25Nb3VzZWxlYXZlOnRbMl18fCh0WzJdPVQoKCguLi50KT0+ZS5oaWRlKC4uLnQpKSxbXCJzdG9wXCJdKSl9LFtkKGUuJHNsb3RzLFwiZGVmYXVsdFwiKV0sMzQpKSxbW3UsZS5pbm5lckhpZGUsZS50cmlnZ2VyRWxtXV0pfSxEaS5fX2ZpbGU9XCJwYWNrYWdlcy9kcm9wZG93bi9zcmMvZHJvcGRvd24tbWVudS52dWVcIixEaS5pbnN0YWxsPWU9PntlLmNvbXBvbmVudChEaS5uYW1lLERpKX07dmFyIE9pPWUoe25hbWU6XCJFbEZvb3RlclwiLHByb3BzOntoZWlnaHQ6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCI2MHB4XCJ9fX0pO09pLnJlbmRlcj1mdW5jdGlvbihlLHQsbCxvLGkscil7cmV0dXJuIGEoKSxuKFwiZm9vdGVyXCIse2NsYXNzOlwiZWwtZm9vdGVyXCIsc3R5bGU6e2hlaWdodDplLmhlaWdodH19LFtkKGUuJHNsb3RzLFwiZGVmYXVsdFwiKV0sNCl9LE9pLl9fZmlsZT1cInBhY2thZ2VzL2NvbnRhaW5lci9zcmMvZm9vdGVyLnZ1ZVwiLE9pLmluc3RhbGw9ZT0+e2UuY29tcG9uZW50KE9pLm5hbWUsT2kpfTt2YXIgUGk9ZSh7bmFtZTpcIkVsTGFiZWxXcmFwXCIscHJvcHM6e2lzQXV0b1dpZHRoOkJvb2xlYW4sdXBkYXRlQWxsOkJvb2xlYW59LHNldHVwKGUse3Nsb3RzOmx9KXtjb25zdCBhPXQobnVsbCksbj13KFwiZWxGb3JtXCIpLG89dyhcImVsRm9ybUl0ZW1cIiksaT10KDApO3koaSwoKHQsbCk9PntlLnVwZGF0ZUFsbCYmKG4ucmVnaXN0ZXJMYWJlbFdpZHRoKHQsbCksby51cGRhdGVDb21wdXRlZExhYmVsV2lkdGgodCkpfSkpO2NvbnN0IHI9KHQ9XCJ1cGRhdGVcIik9PntrKCgoKT0+e2wuZGVmYXVsdCYmZS5pc0F1dG9XaWR0aCYmKFwidXBkYXRlXCI9PT10P2kudmFsdWU9KCgpPT57dmFyIGU7aWYobnVsbD09PShlPWEudmFsdWUpfHx2b2lkIDA9PT1lP3ZvaWQgMDplLmZpcnN0RWxlbWVudENoaWxkKXtjb25zdCBlPXdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGEudmFsdWUuZmlyc3RFbGVtZW50Q2hpbGQpLndpZHRoO3JldHVybiBNYXRoLmNlaWwocGFyc2VGbG9hdChlKSl9cmV0dXJuIDB9KSgpOlwicmVtb3ZlXCI9PT10JiZuLmRlcmVnaXN0ZXJMYWJlbFdpZHRoKGkudmFsdWUpKX0pKX0scz0oKT0+cihcInVwZGF0ZVwiKTtyZXR1cm4gXygoKCk9PntKdChhLnZhbHVlLmZpcnN0RWxlbWVudENoaWxkLHMpLHMoKX0pKSxTKHMpLE8oKCgpPT57cihcInJlbW92ZVwiKSxlbChhLnZhbHVlLmZpcnN0RWxlbWVudENoaWxkLHMpfSkpLGZ1bmN0aW9uKCl7dmFyIHQsbztpZighbClyZXR1cm4gbnVsbDtpZihlLmlzQXV0b1dpZHRoKXtjb25zdCBlPW4uYXV0b0xhYmVsV2lkdGgsbz17fTtpZihlJiZcImF1dG9cIiE9PWUpe2NvbnN0IHQ9cGFyc2VJbnQoZSwxMCktaS52YWx1ZTt0JiYoby5tYXJnaW5MZWZ0PXQrXCJweFwiKX1yZXR1cm4gRChcImRpdlwiLHtyZWY6YSxjbGFzczpbXCJlbC1mb3JtLWl0ZW1fX2xhYmVsLXdyYXBcIl0sc3R5bGU6b30sbnVsbD09PSh0PWwuZGVmYXVsdCl8fHZvaWQgMD09PXQ/dm9pZCAwOnQuY2FsbChsKSl9cmV0dXJuIEQoRSx7cmVmOmF9LG51bGw9PT0obz1sLmRlZmF1bHQpfHx2b2lkIDA9PT1vP3ZvaWQgMDpvLmNhbGwobCkpfX19KSxWaT1lKHtuYW1lOlwiRWxGb3JtSXRlbVwiLGNvbXBvbmVudE5hbWU6XCJFbEZvcm1JdGVtXCIsY29tcG9uZW50czp7TGFiZWxXcmFwOlBpfSxwcm9wczp7bGFiZWw6U3RyaW5nLGxhYmVsV2lkdGg6U3RyaW5nLHByb3A6U3RyaW5nLHJlcXVpcmVkOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDp2b2lkIDB9LHJ1bGVzOltPYmplY3QsQXJyYXldLGVycm9yOlN0cmluZyx2YWxpZGF0ZVN0YXR1czpTdHJpbmcsZm9yOlN0cmluZyxpbmxpbmVNZXNzYWdlOnt0eXBlOltTdHJpbmcsQm9vbGVhbl0sZGVmYXVsdDpcIlwifSxzaG93TWVzc2FnZTp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITB9LHNpemU6e3R5cGVzOlN0cmluZyx2YWxpZGF0b3I6QXR9fSxzZXR1cChlKXtjb25zdCBhPW5lKCksbj1xZSgpLG89dyhcImVsRm9ybVwiLHt9KSxpPXQoXCJcIikscj10KFwiXCIpLHM9dCghMSksdT10KFwiXCIpLGQ9digpLGM9bCgoKCk9PntsZXQgZT1kLnBhcmVudDtmb3IoO2UmJlwiRWxGb3JtXCIhPT1lLnR5cGUubmFtZTspe2lmKFwiRWxGb3JtSXRlbVwiPT09ZS50eXBlLm5hbWUpcmV0dXJuITA7ZT1lLnBhcmVudH1yZXR1cm4hMX0pKTtsZXQgcD12b2lkIDA7eSgoKCk9PmUuZXJyb3IpLChlPT57ci52YWx1ZT1lLGkudmFsdWU9ZT9cImVycm9yXCI6XCJcIn0pLHtpbW1lZGlhdGU6ITB9KSx5KCgoKT0+ZS52YWxpZGF0ZVN0YXR1cyksKGU9PntpLnZhbHVlPWV9KSk7Y29uc3QgaD1sKCgoKT0+ZS5mb3J8fGUucHJvcCkpLG09bCgoKCk9PntpZihcInRvcFwiPT09by5sYWJlbFBvc2l0aW9uKXJldHVybnt9O2NvbnN0IHQ9ZS5sYWJlbFdpZHRofHxvLmxhYmVsV2lkdGg7cmV0dXJuIHQ/e3dpZHRoOnR9Ont9fSkpLGc9bCgoKCk9PntpZihcInRvcFwiPT09by5sYWJlbFBvc2l0aW9ufHxvLmlubGluZSlyZXR1cm57fTtpZighZS5sYWJlbCYmIWUubGFiZWxXaWR0aCYmYy52YWx1ZSlyZXR1cm57fTtjb25zdCB0PWUubGFiZWxXaWR0aHx8by5sYWJlbFdpZHRoLGw9e307cmV0dXJuXCJhdXRvXCI9PT10P1wiYXV0b1wiPT09ZS5sYWJlbFdpZHRoP2wubWFyZ2luTGVmdD11LnZhbHVlOlwiYXV0b1wiPT09by5sYWJlbFdpZHRoJiYobC5tYXJnaW5MZWZ0PW8uYXV0b0xhYmVsV2lkdGgpOmwubWFyZ2luTGVmdD10LGx9KSksYj1sKCgoKT0+e2NvbnN0IHQ9by5tb2RlbDtpZighdHx8IWUucHJvcClyZXR1cm47bGV0IGw9ZS5wcm9wO3JldHVybi0xIT09bC5pbmRleE9mKFwiOlwiKSYmKGw9bC5yZXBsYWNlKC86LyxcIi5cIikpLCRlKHQsbCwhMCkudn0pKSxTPWwoKCgpPT57bGV0IGU9TigpLHQ9ITE7cmV0dXJuIGUmJmUubGVuZ3RoJiZlLmV2ZXJ5KChlPT4hZS5yZXF1aXJlZHx8KHQ9ITAsITEpKSksdH0pKSxFPWwoKCgpPT5lLnNpemV8fG8uc2l6ZSkpLE09bCgoKCk9PkUudmFsdWV8fG4uc2l6ZSkpLFQ9KHQsbD1TZSk9PntzLnZhbHVlPSExO2NvbnN0IGE9RCh0KTtpZigoIWF8fDA9PT1hLmxlbmd0aCkmJnZvaWQgMD09PWUucmVxdWlyZWQpcmV0dXJuIHZvaWQgbCgpO2kudmFsdWU9XCJ2YWxpZGF0aW5nXCI7Y29uc3Qgbj17fTthJiZhLmxlbmd0aD4wJiZhLmZvckVhY2goKGU9PntkZWxldGUgZS50cmlnZ2VyfSkpLG5bZS5wcm9wXT1hO2NvbnN0IHU9bmV3IHllKG4pLGQ9e307ZFtlLnByb3BdPWIudmFsdWUsdS52YWxpZGF0ZShkLHtmaXJzdEZpZWxkczohMH0sKCh0LGEpPT57dmFyIG47aS52YWx1ZT10P1wiZXJyb3JcIjpcInN1Y2Nlc3NcIixyLnZhbHVlPXQ/dFswXS5tZXNzYWdlOlwiXCIsbChyLnZhbHVlLGEpLG51bGw9PT0obj1vLmVtaXQpfHx2b2lkIDA9PT1ufHxuLmNhbGwobyxcInZhbGlkYXRlXCIsZS5wcm9wLCF0LHIudmFsdWV8fG51bGwpfSkpfSxOPSgpPT57Y29uc3QgdD1vLnJ1bGVzLGw9ZS5ydWxlcyxhPXZvaWQgMCE9PWUucmVxdWlyZWQ/e3JlcXVpcmVkOiEhZS5yZXF1aXJlZH06W10sbj0kZSh0LGUucHJvcHx8XCJcIiwhMSksaT10P24ub1tlLnByb3B8fFwiXCJdfHxuLnY6W107cmV0dXJuW10uY29uY2F0KGx8fGl8fFtdKS5jb25jYXQoYSl9LEQ9ZT0+TigpLmZpbHRlcigodD0+IXQudHJpZ2dlcnx8XCJcIj09PWV8fChBcnJheS5pc0FycmF5KHQudHJpZ2dlcik/dC50cmlnZ2VyLmluZGV4T2YoZSk+LTE6dC50cmlnZ2VyPT09ZSkpKS5tYXAoKGU9Pk9iamVjdC5hc3NpZ24oe30sZSkpKSxQPSgpPT57VChcImJsdXJcIil9LFY9KCk9PntzLnZhbHVlP3MudmFsdWU9ITE6VChcImNoYW5nZVwiKX0sST0oKT0+eyhOKCkubGVuZ3RofHx2b2lkIDAhPT1lLnJlcXVpcmVkKSYmKGEub24oXCJlbC5mb3JtLmJsdXJcIixQKSxhLm9uKFwiZWwuZm9ybS5jaGFuZ2VcIixWKSl9LEE9ZihPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sQyhlKSkse3NpemU6TSx2YWxpZGF0ZVN0YXRlOmkscmVtb3ZlVmFsaWRhdGVFdmVudHM6KCk9PnthLm9mZihcImVsLmZvcm0uYmx1clwiLFApLGEub2ZmKFwiZWwuZm9ybS5jaGFuZ2VcIixWKX0sYWRkVmFsaWRhdGVFdmVudHM6SSxyZXNldEZpZWxkOigpPT57aS52YWx1ZT1cIlwiLHIudmFsdWU9XCJcIjtsZXQgdD1vLm1vZGVsLGw9Yi52YWx1ZSxhPWUucHJvcDstMSE9PWEuaW5kZXhPZihcIjpcIikmJihhPWEucmVwbGFjZSgvOi8sXCIuXCIpKTtsZXQgbj0kZSh0LGEsITApO3MudmFsdWU9ITAsQXJyYXkuaXNBcnJheShsKT9uLm9bbi5rXT1bXS5jb25jYXQocCk6bi5vW24ua109cCxrKCgoKT0+e3MudmFsdWU9ITF9KSl9LGNsZWFyVmFsaWRhdGU6KCk9PntpLnZhbHVlPVwiXCIsci52YWx1ZT1cIlwiLHMudmFsdWU9ITF9LHZhbGlkYXRlOlQsZm9ybUl0ZW1NaXR0OmEsdXBkYXRlQ29tcHV0ZWRMYWJlbFdpZHRoOmU9Pnt1LnZhbHVlPWU/ZStcInB4XCI6XCJcIn19KSk7XygoKCk9Pnt2YXIgdDtpZihlLnByb3Ape251bGw9PT0odD1vLmZvcm1NaXR0KXx8dm9pZCAwPT09dHx8dC5lbWl0KFwiZWwuZm9ybS5hZGRGaWVsZFwiLEEpO2xldCBlPWIudmFsdWU7cD1BcnJheS5pc0FycmF5KGUpP1suLi5lXTplLEkoKX19KSksTygoKCk9Pnt2YXIgZTtudWxsPT09KGU9by5mb3JtTWl0dCl8fHZvaWQgMD09PWV8fGUuZW1pdChcImVsLmZvcm0ucmVtb3ZlRmllbGRcIixBKX0pKSx4KFwiZWxGb3JtSXRlbVwiLEEpO3JldHVybntmb3JtSXRlbUNsYXNzOmwoKCgpPT5be1wiZWwtZm9ybS1pdGVtLS1mZWVkYmFja1wiOm8uc3RhdHVzSWNvbixcImlzLWVycm9yXCI6XCJlcnJvclwiPT09aS52YWx1ZSxcImlzLXZhbGlkYXRpbmdcIjpcInZhbGlkYXRpbmdcIj09PWkudmFsdWUsXCJpcy1zdWNjZXNzXCI6XCJzdWNjZXNzXCI9PT1pLnZhbHVlLFwiaXMtcmVxdWlyZWRcIjpTLnZhbHVlfHxlLnJlcXVpcmVkLFwiaXMtbm8tYXN0ZXJpc2tcIjpvLmhpZGVSZXF1aXJlZEFzdGVyaXNrfSxNLnZhbHVlP1wiZWwtZm9ybS1pdGVtLS1cIitNLnZhbHVlOlwiXCJdKSksc2hvdWxkU2hvd0Vycm9yOmwoKCgpPT5cImVycm9yXCI9PT1pLnZhbHVlJiZlLnNob3dNZXNzYWdlJiZvLnNob3dNZXNzYWdlKSksZWxGb3JtOm8sbGFiZWxTdHlsZTptLGNvbnRlbnRTdHlsZTpnLHZhbGlkYXRlTWVzc2FnZTpyLGxhYmVsRm9yOmh9fX0pO1ZpLnJlbmRlcj1mdW5jdGlvbihlLHQsbCxyLGgsdil7Y29uc3QgbT1QKFwiTGFiZWxXcmFwXCIpO3JldHVybiBhKCksbihcImRpdlwiLHtjbGFzczpbXCJlbC1mb3JtLWl0ZW1cIixlLmZvcm1JdGVtQ2xhc3NdfSxbcyhtLHtcImlzLWF1dG8td2lkdGhcIjpcImF1dG9cIj09PWUubGFiZWxTdHlsZS53aWR0aCxcInVwZGF0ZS1hbGxcIjpcImF1dG9cIj09PWUuZWxGb3JtLmxhYmVsV2lkdGh9LHtkZWZhdWx0OmkoKCgpPT5bZS5sYWJlbHx8ZS4kc2xvdHMubGFiZWw/KGEoKSxuKFwibGFiZWxcIix7a2V5OjAsZm9yOmUubGFiZWxGb3IsY2xhc3M6XCJlbC1mb3JtLWl0ZW1fX2xhYmVsXCIsc3R5bGU6ZS5sYWJlbFN0eWxlfSxbZChlLiRzbG90cyxcImxhYmVsXCIse30sKCgpPT5bYyhwKGUubGFiZWwrZS5lbEZvcm0ubGFiZWxTdWZmaXgpLDEpXSkpXSwxMixbXCJmb3JcIl0pKTp1KFwidi1pZlwiLCEwKV0pKSxfOjF9LDgsW1wiaXMtYXV0by13aWR0aFwiLFwidXBkYXRlLWFsbFwiXSkscyhcImRpdlwiLHtjbGFzczpcImVsLWZvcm0taXRlbV9fY29udGVudFwiLHN0eWxlOmUuY29udGVudFN0eWxlfSxbZChlLiRzbG90cyxcImRlZmF1bHRcIikscyhvLHtuYW1lOlwiZWwtem9vbS1pbi10b3BcIn0se2RlZmF1bHQ6aSgoKCk9PltlLnNob3VsZFNob3dFcnJvcj9kKGUuJHNsb3RzLFwiZXJyb3JcIix7a2V5OjAsZXJyb3I6ZS52YWxpZGF0ZU1lc3NhZ2V9LCgoKT0+W3MoXCJkaXZcIix7Y2xhc3M6W1wiZWwtZm9ybS1pdGVtX19lcnJvclwiLHtcImVsLWZvcm0taXRlbV9fZXJyb3ItLWlubGluZVwiOlwiYm9vbGVhblwiPT10eXBlb2YgZS5pbmxpbmVNZXNzYWdlP2UuaW5saW5lTWVzc2FnZTplLmVsRm9ybS5pbmxpbmVNZXNzYWdlfHwhMX1dfSxwKGUudmFsaWRhdGVNZXNzYWdlKSwzKV0pKTp1KFwidi1pZlwiLCEwKV0pKSxfOjF9KV0sNCldLDIpfSxWaS5fX2ZpbGU9XCJwYWNrYWdlcy9mb3JtL3NyYy9mb3JtLWl0ZW0udnVlXCIsVmkuaW5zdGFsbD1lPT57ZS5jb21wb25lbnQoVmkubmFtZSxWaSl9O3ZhciBJaT1lKHtuYW1lOlwiRWxIZWFkZXJcIixwcm9wczp7aGVpZ2h0Ont0eXBlOlN0cmluZyxkZWZhdWx0OlwiNjBweFwifX19KTtJaS5yZW5kZXI9ZnVuY3Rpb24oZSx0LGwsbyxpLHIpe3JldHVybiBhKCksbihcImhlYWRlclwiLHtjbGFzczpcImVsLWhlYWRlclwiLHN0eWxlOntoZWlnaHQ6ZS5oZWlnaHR9fSxbZChlLiRzbG90cyxcImRlZmF1bHRcIildLDQpfSxJaS5fX2ZpbGU9XCJwYWNrYWdlcy9jb250YWluZXIvc3JjL2hlYWRlci52dWVcIixJaS5pbnN0YWxsPWU9PntlLmNvbXBvbmVudChJaS5uYW1lLElpKX07dmFyIEFpPWUoe25hbWU6XCJFbEljb25cIixwcm9wczp7bmFtZTp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIlwifX19KTtBaS5yZW5kZXI9ZnVuY3Rpb24oZSx0LGwsbyxpLHIpe3JldHVybiBhKCksbihcImlcIix7Y2xhc3M6XCJlbC1pY29uLVwiK2UubmFtZX0sbnVsbCwyKX0sQWkuX19maWxlPVwicGFja2FnZXMvaWNvbi9zcmMvaW5kZXgudnVlXCIsQWkuaW5zdGFsbD1lPT57ZS5jb21wb25lbnQoQWkubmFtZSxBaSl9O2NvbnN0IEJpPXtDT05UQUlOOntuYW1lOlwiY29udGFpblwiLGljb246XCJlbC1pY29uLWZ1bGwtc2NyZWVuXCJ9LE9SSUdJTkFMOntuYW1lOlwib3JpZ2luYWxcIixpY29uOlwiZWwtaWNvbi1jLXNjYWxlLXRvLW9yaWdpbmFsXCJ9fSxMaT0hemUmJndpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC9maXJlZm94L2kpP1wiRE9NTW91c2VTY3JvbGxcIjpcIm1vdXNld2hlZWxcIjt2YXIgemk9ZSh7bmFtZTpcIkVsSW1hZ2VWaWV3ZXJcIixwcm9wczp7dXJsTGlzdDp7dHlwZTpBcnJheSxkZWZhdWx0OigpPT5bXX0sekluZGV4Ont0eXBlOk51bWJlcixkZWZhdWx0OjJlM30sb25Td2l0Y2g6e3R5cGU6RnVuY3Rpb24sZGVmYXVsdDooKT0+KHt9KX0sb25DbG9zZTp7dHlwZTpGdW5jdGlvbixkZWZhdWx0OigpPT4oe30pfSxpbml0aWFsSW5kZXg6e3R5cGU6TnVtYmVyLGRlZmF1bHQ6MH19LHNldHVwKGUpe2xldCBhPW51bGwsbj1udWxsLG89bnVsbDtjb25zdCBpPXQoITApLHI9dChlLmluaXRpYWxJbmRleCkscz10KCEwKSx1PXQobnVsbCksZD10KG51bGwpLGM9dChCaS5DT05UQUlOKTtsZXQgcD10KHtzY2FsZToxLGRlZzowLG9mZnNldFg6MCxvZmZzZXRZOjAsZW5hYmxlVHJhbnNpdGlvbjohMX0pO2NvbnN0IGg9bCgoKCk9Pntjb25zdHt1cmxMaXN0OnR9PWU7cmV0dXJuIHQubGVuZ3RoPD0xfSkpLHY9bCgoKCk9PjA9PT1yLnZhbHVlKSksbT1sKCgoKT0+MD09PXIudmFsdWUpKSxmPWwoKCgpPT5lLnVybExpc3Rbci52YWx1ZV0pKSxnPWwoKCgpPT57Y29uc3R7c2NhbGU6ZSxkZWc6dCxvZmZzZXRYOmwsb2Zmc2V0WTphLGVuYWJsZVRyYW5zaXRpb246bn09cC52YWx1ZSxvPXt0cmFuc2Zvcm06YHNjYWxlKCR7ZX0pIHJvdGF0ZSgke3R9ZGVnKWAsdHJhbnNpdGlvbjpuP1widHJhbnNmb3JtIC4zc1wiOlwiXCIsXCJtYXJnaW4tbGVmdFwiOmwrXCJweFwiLFwibWFyZ2luLXRvcFwiOmErXCJweFwifTtyZXR1cm4gYy52YWx1ZS5uYW1lPT09QmkuQ09OVEFJTi5uYW1lJiYoby5tYXhXaWR0aD1vLm1heEhlaWdodD1cIjEwMCVcIiksb30pKTtmdW5jdGlvbiBiKCl7YXQoZG9jdW1lbnQsXCJrZXlkb3duXCIsYSksYXQoZG9jdW1lbnQsTGksbiksYT1udWxsLG49bnVsbCxlLm9uQ2xvc2UoKX1mdW5jdGlvbiBDKCl7cC52YWx1ZT17c2NhbGU6MSxkZWc6MCxvZmZzZXRYOjAsb2Zmc2V0WTowLGVuYWJsZVRyYW5zaXRpb246ITF9fWZ1bmN0aW9uIHgoKXtpZihpLnZhbHVlKXJldHVybjtjb25zdCBlPU9iamVjdC5rZXlzKEJpKSx0PU9iamVjdC52YWx1ZXMoQmkpLGw9Yy52YWx1ZS5uYW1lLGE9KHQuZmluZEluZGV4KChlPT5lLm5hbWU9PT1sKSkrMSklZS5sZW5ndGg7Yy52YWx1ZT1CaVtlW2FdXSxDKCl9ZnVuY3Rpb24gdygpe2lmKHYudmFsdWUmJiFzLnZhbHVlKXJldHVybjtjb25zdCB0PWUudXJsTGlzdC5sZW5ndGg7ci52YWx1ZT0oci52YWx1ZS0xK3QpJXR9ZnVuY3Rpb24gUygpe2lmKG0udmFsdWUmJiFzLnZhbHVlKXJldHVybjtjb25zdCB0PWUudXJsTGlzdC5sZW5ndGg7ci52YWx1ZT0oci52YWx1ZSsxKSV0fWZ1bmN0aW9uIEUoZSx0PXt9KXtpZihpLnZhbHVlKXJldHVybjtjb25zdHt6b29tUmF0ZTpsLHJvdGF0ZURlZzphLGVuYWJsZVRyYW5zaXRpb246bn09T2JqZWN0LmFzc2lnbih7em9vbVJhdGU6LjIscm90YXRlRGVnOjkwLGVuYWJsZVRyYW5zaXRpb246ITB9LHQpO3N3aXRjaChlKXtjYXNlXCJ6b29tT3V0XCI6cC52YWx1ZS5zY2FsZT4uMiYmKHAudmFsdWUuc2NhbGU9cGFyc2VGbG9hdCgocC52YWx1ZS5zY2FsZS1sKS50b0ZpeGVkKDMpKSk7YnJlYWs7Y2FzZVwiem9vbUluXCI6cC52YWx1ZS5zY2FsZT1wYXJzZUZsb2F0KChwLnZhbHVlLnNjYWxlK2wpLnRvRml4ZWQoMykpO2JyZWFrO2Nhc2VcImNsb2NlbGlzZVwiOnAudmFsdWUuZGVnKz1hO2JyZWFrO2Nhc2VcImFudGljbG9jZWxpc2VcIjpwLnZhbHVlLmRlZy09YX1wLnZhbHVlLmVuYWJsZVRyYW5zaXRpb249bn1yZXR1cm4geShmLCgoKT0+e2soKCgpPT57ZC52YWx1ZS5jb21wbGV0ZXx8KGkudmFsdWU9ITApfSkpfSkpLHkociwodD0+e0MoKSxlLm9uU3dpdGNoKHQpfSkpLF8oKCgpPT57dmFyIGU7YT1qZSgoZT0+e3N3aXRjaChlLmNvZGUpe2Nhc2UgZnQuZXNjOmIoKTticmVhaztjYXNlIGZ0LnNwYWNlOngoKTticmVhaztjYXNlIGZ0LmxlZnQ6dygpO2JyZWFrO2Nhc2UgZnQudXA6RShcInpvb21JblwiKTticmVhaztjYXNlIGZ0LnJpZ2h0OlMoKTticmVhaztjYXNlIGZ0LmRvd246RShcInpvb21PdXRcIil9fSkpLG49amUoKGU9PntFKChlLndoZWVsRGVsdGE/ZS53aGVlbERlbHRhOi1lLmRldGFpbCk+MD9cInpvb21JblwiOlwiem9vbU91dFwiLHt6b29tUmF0ZTouMDE1LGVuYWJsZVRyYW5zaXRpb246ITF9KX0pKSxsdChkb2N1bWVudCxcImtleWRvd25cIixhKSxsdChkb2N1bWVudCxMaSxuKSxudWxsPT09KGU9dS52YWx1ZSl8fHZvaWQgMD09PWV8fGUuZm9jdXMoKX0pKSx7aW5kZXg6cix3cmFwcGVyOnUsaW1nOmQsaW5maW5pdGU6ITAsbG9hZGluZzohMSxpc1NpbmdsZTpoLGlzRmlyc3Q6dixpc0xhc3Q6bSxjdXJyZW50SW1nOmYsaW1nU3R5bGU6Zyxtb2RlOmMsaGFuZGxlQWN0aW9uczpFLHByZXY6dyxuZXh0OlMsaGlkZTpiLHRvZ2dsZU1vZGU6eCxoYW5kbGVJbWdMb2FkOmZ1bmN0aW9uKCl7aS52YWx1ZT0hMX0saGFuZGxlSW1nRXJyb3I6ZnVuY3Rpb24oZSl7aS52YWx1ZT0hMSxlLnRhcmdldC5hbHQ9cWwoXCJlbC5pbWFnZS5lcnJvclwiKX0saGFuZGxlTW91c2VEb3duOmZ1bmN0aW9uKGUpe2lmKGkudmFsdWV8fDAhPT1lLmJ1dHRvbilyZXR1cm47Y29uc3R7b2Zmc2V0WDp0LG9mZnNldFk6bH09cC52YWx1ZSxhPWUucGFnZVgsbj1lLnBhZ2VZO289amUoKGU9PntwLnZhbHVlPU9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSxwLnZhbHVlKSx7b2Zmc2V0WDp0K2UucGFnZVgtYSxvZmZzZXRZOmwrZS5wYWdlWS1ufSl9KSksbHQoZG9jdW1lbnQsXCJtb3VzZW1vdmVcIixvKSxsdChkb2N1bWVudCxcIm1vdXNldXBcIiwoKCk9PnthdChkb2N1bWVudCxcIm1vdXNlbW92ZVwiLG8pfSkpLGUucHJldmVudERlZmF1bHQoKX19fX0pO2NvbnN0IEZpPXMoXCJkaXZcIix7Y2xhc3M6XCJlbC1pbWFnZS12aWV3ZXJfX21hc2tcIn0sbnVsbCwtMSksJGk9cyhcImlcIix7Y2xhc3M6XCJlbC1pY29uLWNpcmNsZS1jbG9zZVwifSxudWxsLC0xKSxSaT1zKFwiaVwiLHtjbGFzczpcImVsLWljb24tYXJyb3ctbGVmdFwifSxudWxsLC0xKSxIaT1zKFwiaVwiLHtjbGFzczpcImVsLWljb24tYXJyb3ctcmlnaHRcIn0sbnVsbCwtMSksV2k9e2NsYXNzOlwiZWwtaW1hZ2Utdmlld2VyX19idG4gZWwtaW1hZ2Utdmlld2VyX19hY3Rpb25zXCJ9LGppPXtjbGFzczpcImVsLWltYWdlLXZpZXdlcl9fYWN0aW9uc19faW5uZXJcIn0sS2k9cyhcImlcIix7Y2xhc3M6XCJlbC1pbWFnZS12aWV3ZXJfX2FjdGlvbnNfX2RpdmlkZXJcIn0sbnVsbCwtMSksWWk9cyhcImlcIix7Y2xhc3M6XCJlbC1pbWFnZS12aWV3ZXJfX2FjdGlvbnNfX2RpdmlkZXJcIn0sbnVsbCwtMSkscWk9e2NsYXNzOlwiZWwtaW1hZ2Utdmlld2VyX19jYW52YXNcIn07emkucmVuZGVyPWZ1bmN0aW9uKGUsdCxsLGQsYyxwKXtyZXR1cm4gYSgpLG4obyx7bmFtZTpcInZpZXdlci1mYWRlXCJ9LHtkZWZhdWx0OmkoKCgpPT5bcyhcImRpdlwiLHtyZWY6XCJ3cmFwcGVyXCIsdGFiaW5kZXg6XCItMVwiLGNsYXNzOlwiZWwtaW1hZ2Utdmlld2VyX193cmFwcGVyXCIsc3R5bGU6e1wiei1pbmRleFwiOmUuekluZGV4fX0sW0ZpLHUoXCIgQ0xPU0UgXCIpLHMoXCJzcGFuXCIse2NsYXNzOlwiZWwtaW1hZ2Utdmlld2VyX19idG4gZWwtaW1hZ2Utdmlld2VyX19jbG9zZVwiLG9uQ2xpY2s6dFsxXXx8KHRbMV09KC4uLnQpPT5lLmhpZGUoLi4udCkpfSxbJGldKSx1KFwiIEFSUk9XIFwiKSxlLmlzU2luZ2xlP3UoXCJ2LWlmXCIsITApOihhKCksbihFLHtrZXk6MH0sW3MoXCJzcGFuXCIse2NsYXNzOltcImVsLWltYWdlLXZpZXdlcl9fYnRuIGVsLWltYWdlLXZpZXdlcl9fcHJldlwiLHtcImlzLWRpc2FibGVkXCI6IWUuaW5maW5pdGUmJmUuaXNGaXJzdH1dLG9uQ2xpY2s6dFsyXXx8KHRbMl09KC4uLnQpPT5lLnByZXYoLi4udCkpfSxbUmldLDIpLHMoXCJzcGFuXCIse2NsYXNzOltcImVsLWltYWdlLXZpZXdlcl9fYnRuIGVsLWltYWdlLXZpZXdlcl9fbmV4dFwiLHtcImlzLWRpc2FibGVkXCI6IWUuaW5maW5pdGUmJmUuaXNMYXN0fV0sb25DbGljazp0WzNdfHwodFszXT0oLi4udCk9PmUubmV4dCguLi50KSl9LFtIaV0sMildLDY0KSksdShcIiBBQ1RJT05TIFwiKSxzKFwiZGl2XCIsV2ksW3MoXCJkaXZcIixqaSxbcyhcImlcIix7Y2xhc3M6XCJlbC1pY29uLXpvb20tb3V0XCIsb25DbGljazp0WzRdfHwodFs0XT10PT5lLmhhbmRsZUFjdGlvbnMoXCJ6b29tT3V0XCIpKX0pLHMoXCJpXCIse2NsYXNzOlwiZWwtaWNvbi16b29tLWluXCIsb25DbGljazp0WzVdfHwodFs1XT10PT5lLmhhbmRsZUFjdGlvbnMoXCJ6b29tSW5cIikpfSksS2kscyhcImlcIix7Y2xhc3M6ZS5tb2RlLmljb24sb25DbGljazp0WzZdfHwodFs2XT0oLi4udCk9PmUudG9nZ2xlTW9kZSguLi50KSl9LG51bGwsMiksWWkscyhcImlcIix7Y2xhc3M6XCJlbC1pY29uLXJlZnJlc2gtbGVmdFwiLG9uQ2xpY2s6dFs3XXx8KHRbN109dD0+ZS5oYW5kbGVBY3Rpb25zKFwiYW50aWNsb2NlbGlzZVwiKSl9KSxzKFwiaVwiLHtjbGFzczpcImVsLWljb24tcmVmcmVzaC1yaWdodFwiLG9uQ2xpY2s6dFs4XXx8KHRbOF09dD0+ZS5oYW5kbGVBY3Rpb25zKFwiY2xvY2VsaXNlXCIpKX0pXSldKSx1KFwiIENBTlZBUyBcIikscyhcImRpdlwiLHFpLFsoYSghMCksbihFLG51bGwsSChlLnVybExpc3QsKChsLG8pPT5yKChhKCksbihcImltZ1wiLHtyZWY6XCJpbWdcIixrZXk6bCxzcmM6ZS5jdXJyZW50SW1nLHN0eWxlOmUuaW1nU3R5bGUsY2xhc3M6XCJlbC1pbWFnZS12aWV3ZXJfX2ltZ1wiLG9uTG9hZDp0WzldfHwodFs5XT0oLi4udCk9PmUuaGFuZGxlSW1nTG9hZCguLi50KSksb25FcnJvcjp0WzEwXXx8KHRbMTBdPSguLi50KT0+ZS5oYW5kbGVJbWdFcnJvciguLi50KSksb25Nb3VzZWRvd246dFsxMV18fCh0WzExXT0oLi4udCk9PmUuaGFuZGxlTW91c2VEb3duKC4uLnQpKX0sbnVsbCw0NCxbXCJzcmNcIl0pKSxbW2gsbz09PWUuaW5kZXhdXSkpKSwxMjgpKV0pXSw0KV0pKSxfOjF9KX0semkuX19maWxlPVwicGFja2FnZXMvaW1hZ2Uvc3JjL2ltYWdlLXZpZXdlci52dWVcIjtjb25zdCBVaT0oKT0+dm9pZCAwIT09ZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlLm9iamVjdEZpdCxHaT1cIm5vbmVcIixYaT1cImNvbnRhaW5cIixRaT1cImNvdmVyXCIsWmk9XCJmaWxsXCIsSmk9XCJzY2FsZS1kb3duXCI7bGV0IGVyPVwiXCI7dmFyIHRyPWUoe25hbWU6XCJFbEltYWdlXCIsY29tcG9uZW50czp7SW1hZ2VWaWV3ZXI6eml9LGluaGVyaXRBdHRyczohMSxwcm9wczp7c3JjOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiXCJ9LGZpdDp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIlwifSxsYXp5Ont0eXBlOkJvb2xlYW4sZGVmYXVsdDohMX0sc2Nyb2xsQ29udGFpbmVyOnt0eXBlOltTdHJpbmcsT2JqZWN0XSxkZWZhdWx0Om51bGx9LHByZXZpZXdTcmNMaXN0Ont0eXBlOkFycmF5LGRlZmF1bHQ6KCk9PltdfSx6SW5kZXg6e3R5cGU6TnVtYmVyLGRlZmF1bHQ6MmUzfX0sZW1pdHM6W1wiZXJyb3JcIl0sc2V0dXAoZSx7ZW1pdDphfSl7Y29uc3Qgbj10dCgpLG89dCghMSksaT10KCEwKSxyPXQoMCkscz10KDApLHU9dCghMSksZD10KG51bGwpO2xldCBjPW51bGwscD1udWxsO2NvbnN0IGg9bCgoKCk9Pntjb25zdHtmaXQ6dH09ZTtyZXR1cm4hemUmJnQ/VWkoKT97XCJvYmplY3QtZml0XCI6dH06ZnVuY3Rpb24oZSl7Y29uc3QgdD1yLnZhbHVlLGw9cy52YWx1ZTtpZighZC52YWx1ZSlyZXR1cm57fTtjb25zdHtjbGllbnRXaWR0aDphLGNsaWVudEhlaWdodDpufT1kLnZhbHVlO2lmKCEodCYmbCYmYSYmbikpcmV0dXJue307Y29uc3Qgbz10L2w8MTtpZihlPT09Smkpe2U9dDxhJiZsPG4/R2k6WGl9c3dpdGNoKGUpe2Nhc2UgR2k6cmV0dXJue3dpZHRoOlwiYXV0b1wiLGhlaWdodDpcImF1dG9cIn07Y2FzZSBYaTpyZXR1cm4gbz97d2lkdGg6XCJhdXRvXCJ9OntoZWlnaHQ6XCJhdXRvXCJ9O2Nhc2UgUWk6cmV0dXJuIG8/e2hlaWdodDpcImF1dG9cIn06e3dpZHRoOlwiYXV0b1wifTtkZWZhdWx0OnJldHVybnt9fX0odCk6e319KSksdj1sKCgoKT0+e2NvbnN0e2ZpdDp0fT1lO3JldHVybiF6ZSYmIVVpKCkmJnQhPT1aaX0pKSxtPWwoKCgpPT57Y29uc3R7cHJldmlld1NyY0xpc3Q6dH09ZTtyZXR1cm4gQXJyYXkuaXNBcnJheSh0KSYmdC5sZW5ndGg+MH0pKSxmPWwoKCgpPT57Y29uc3R7c3JjOnQscHJldmlld1NyY0xpc3Q6bH09ZTtsZXQgYT0wO2NvbnN0IG49bC5pbmRleE9mKHQpO3JldHVybiBuPj0wJiYoYT1uKSxhfSkpO2NvbnN0IGc9KCk9PntpZih6ZSlyZXR1cm47Y29uc3QgdD1uLnZhbHVlO2kudmFsdWU9ITAsby52YWx1ZT0hMTtjb25zdCBsPW5ldyBJbWFnZTtsLm9ubG9hZD1lPT5mdW5jdGlvbihlLHQpe3IudmFsdWU9dC53aWR0aCxzLnZhbHVlPXQuaGVpZ2h0LGkudmFsdWU9ITEsby52YWx1ZT0hMX0oMCxsKSxsLm9uZXJyb3I9YixPYmplY3Qua2V5cyh0KS5mb3JFYWNoKChlPT57Y29uc3QgYT10W2VdO2wuc2V0QXR0cmlidXRlKGUsYSl9KSksbC5zcmM9ZS5zcmN9O2Z1bmN0aW9uIGIoZSl7aS52YWx1ZT0hMSxvLnZhbHVlPSEwLGEoXCJlcnJvclwiLGUpfWZ1bmN0aW9uIEMoKXsoKGUsdCk9PntpZih6ZXx8IWV8fCF0KXJldHVybiExO2NvbnN0IGw9ZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtsZXQgYTtyZXR1cm4gYT1bd2luZG93LGRvY3VtZW50LGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxudWxsLHZvaWQgMF0uaW5jbHVkZXModCk/e3RvcDowLHJpZ2h0OndpbmRvdy5pbm5lcldpZHRoLGJvdHRvbTp3aW5kb3cuaW5uZXJIZWlnaHQsbGVmdDowfTp0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLGwudG9wPGEuYm90dG9tJiZsLmJvdHRvbT5hLnRvcCYmbC5yaWdodD5hLmxlZnQmJmwubGVmdDxhLnJpZ2h0fSkoZC52YWx1ZSxjKSYmKGcoKSx3KCkpfWZ1bmN0aW9uIHgoKXtpZih6ZSlyZXR1cm47Y29uc3R7c2Nyb2xsQ29udGFpbmVyOnR9PWU7dmFyIGw7Yz0obD10KSYmMT09PWwubm9kZVR5cGU/dDpOZSh0KSYmXCJcIiE9PXQ/ZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0KTp1dChkLnZhbHVlKSxjJiYocD1yZShDLDIwMCksbHQoYyxcInNjcm9sbFwiLHApLHNldFRpbWVvdXQoKCgpPT5DKCkpLDEwMCkpfWZ1bmN0aW9uIHcoKXshemUmJmMmJnAmJihhdChjLFwic2Nyb2xsXCIscCksYz1udWxsLHA9bnVsbCl9cmV0dXJuIHkoKCgpPT5lLnNyYyksKCgpPT57ZygpfSkpLF8oKCgpPT57ZS5sYXp5P2soeCk6ZygpfSkpLE8oKCgpPT57ZS5sYXp5JiZ3KCl9KSkse2F0dHJzOm4sbG9hZGluZzppLGhhc0xvYWRFcnJvcjpvLHNob3dWaWV3ZXI6dSxpbWdXaWR0aDpyLGltZ0hlaWdodDpzLGltYWdlU3R5bGU6aCxhbGlnbkNlbnRlcjp2LHByZXZpZXc6bSxpbWFnZUluZGV4OmYsY2xpY2tIYW5kbGVyOmZ1bmN0aW9uKCl7bS52YWx1ZSYmKGVyPWRvY3VtZW50LmJvZHkuc3R5bGUub3ZlcmZsb3csZG9jdW1lbnQuYm9keS5zdHlsZS5vdmVyZmxvdz1cImhpZGRlblwiLHUudmFsdWU9ITApfSxjbG9zZVZpZXdlcjpmdW5jdGlvbigpe2RvY3VtZW50LmJvZHkuc3R5bGUub3ZlcmZsb3c9ZXIsdS52YWx1ZT0hMX0sY29udGFpbmVyOmQsaGFuZGxlRXJyb3I6Yix0OnFsfX19KTtjb25zdCBscj1zKFwiZGl2XCIse2NsYXNzOlwiZWwtaW1hZ2VfX3BsYWNlaG9sZGVyXCJ9LG51bGwsLTEpLGFyPXtjbGFzczpcImVsLWltYWdlX19lcnJvclwifTtcbi8qISAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG5cblBlcm1pc3Npb24gdG8gdXNlLCBjb3B5LCBtb2RpZnksIGFuZC9vciBkaXN0cmlidXRlIHRoaXMgc29mdHdhcmUgZm9yIGFueVxucHVycG9zZSB3aXRoIG9yIHdpdGhvdXQgZmVlIGlzIGhlcmVieSBncmFudGVkLlxuXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiIEFORCBUSEUgQVVUSE9SIERJU0NMQUlNUyBBTEwgV0FSUkFOVElFUyBXSVRIXG5SRUdBUkQgVE8gVEhJUyBTT0ZUV0FSRSBJTkNMVURJTkcgQUxMIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFlcbkFORCBGSVRORVNTLiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SIEJFIExJQUJMRSBGT1IgQU5ZIFNQRUNJQUwsIERJUkVDVCxcbklORElSRUNULCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgT1IgQU5ZIERBTUFHRVMgV0hBVFNPRVZFUiBSRVNVTFRJTkcgRlJPTVxuTE9TUyBPRiBVU0UsIERBVEEgT1IgUFJPRklUUywgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIE5FR0xJR0VOQ0UgT1Jcbk9USEVSIFRPUlRJT1VTIEFDVElPTiwgQVJJU0lORyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBVU0UgT1JcblBFUkZPUk1BTkNFIE9GIFRISVMgU09GVFdBUkUuXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuZnVuY3Rpb24gbnIoZSx0LGwsYSl7cmV0dXJuIG5ldyhsfHwobD1Qcm9taXNlKSkoKGZ1bmN0aW9uKG4sbyl7ZnVuY3Rpb24gaShlKXt0cnl7cyhhLm5leHQoZSkpfWNhdGNoKGUpe28oZSl9fWZ1bmN0aW9uIHIoZSl7dHJ5e3MoYS50aHJvdyhlKSl9Y2F0Y2goZSl7byhlKX19ZnVuY3Rpb24gcyhlKXt2YXIgdDtlLmRvbmU/bihlLnZhbHVlKToodD1lLnZhbHVlLHQgaW5zdGFuY2VvZiBsP3Q6bmV3IGwoKGZ1bmN0aW9uKGUpe2UodCl9KSkpLnRoZW4oaSxyKX1zKChhPWEuYXBwbHkoZSx0fHxbXSkpLm5leHQoKSl9KSl9dHIucmVuZGVyPWZ1bmN0aW9uKGUsdCxsLG8saSxyKXtjb25zdCBjPVAoXCJpbWFnZS12aWV3ZXJcIik7cmV0dXJuIGEoKSxuKFwiZGl2XCIse3JlZjpcImNvbnRhaW5lclwiLGNsYXNzOltcImVsLWltYWdlXCIsZS4kYXR0cnMuY2xhc3NdLHN0eWxlOmUuJGF0dHJzLnN0eWxlfSxbZS5sb2FkaW5nP2QoZS4kc2xvdHMsXCJwbGFjZWhvbGRlclwiLHtrZXk6MH0sKCgpPT5bbHJdKSk6ZS5oYXNMb2FkRXJyb3I/ZChlLiRzbG90cyxcImVycm9yXCIse2tleToxfSwoKCk9PltzKFwiZGl2XCIsYXIscChlLnQoXCJlbC5pbWFnZS5lcnJvclwiKSksMSldKSk6KGEoKSxuKFwiaW1nXCIsTSh7a2V5OjIsY2xhc3M6XCJlbC1pbWFnZV9faW5uZXJcIn0sZS5hdHRycyx7c3JjOmUuc3JjLHN0eWxlOmUuaW1hZ2VTdHlsZSxjbGFzczp7XCJlbC1pbWFnZV9faW5uZXItLWNlbnRlclwiOmUuYWxpZ25DZW50ZXIsXCJlbC1pbWFnZV9fcHJldmlld1wiOmUucHJldmlld30sb25DbGljazp0WzFdfHwodFsxXT0oLi4udCk9PmUuY2xpY2tIYW5kbGVyKC4uLnQpKX0pLG51bGwsMTYsW1wic3JjXCJdKSksZS5wcmV2aWV3PyhhKCksbihFLHtrZXk6M30sW2Uuc2hvd1ZpZXdlcj8oYSgpLG4oYyx7a2V5OjAsXCJ6LWluZGV4XCI6ZS56SW5kZXgsXCJpbml0aWFsLWluZGV4XCI6ZS5pbWFnZUluZGV4LFwib24tY2xvc2VcIjplLmNsb3NlVmlld2VyLFwidXJsLWxpc3RcIjplLnByZXZpZXdTcmNMaXN0fSxudWxsLDgsW1wiei1pbmRleFwiLFwiaW5pdGlhbC1pbmRleFwiLFwib24tY2xvc2VcIixcInVybC1saXN0XCJdKSk6dShcInYtaWZcIiwhMCldLDY0KSk6dShcInYtaWZcIiwhMCldLDYpfSx0ci5fX2ZpbGU9XCJwYWNrYWdlcy9pbWFnZS9zcmMvaW5kZXgudnVlXCIsdHIuaW5zdGFsbD1lPT57ZS5jb21wb25lbnQodHIubmFtZSx0cil9O2NvbnN0IG9yPVwiRWxJbmZpbml0ZVNjcm9sbFwiLGlyPXtkZWxheTp7dHlwZTpOdW1iZXIsZGVmYXVsdDoyMDB9LGRpc3RhbmNlOnt0eXBlOk51bWJlcixkZWZhdWx0OjB9LGRpc2FibGVkOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMX0saW1tZWRpYXRlOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMH19LHJyPShlLHQpPT5ZZShpcikucmVkdWNlKCgobCxbYSxuXSk9Pnt2YXIgbyxpO2NvbnN0e3R5cGU6cixkZWZhdWx0OnN9PW4sdT1lLmdldEF0dHJpYnV0ZShcImluZmluaXRlLXNjcm9sbC1cIithKTtsZXQgZD1udWxsIT09KGk9bnVsbCE9PShvPXRbdV0pJiZ2b2lkIDAhPT1vP286dSkmJnZvaWQgMCE9PWk/aTpzO3JldHVybiBkPVwiZmFsc2VcIiE9PWQmJmQsZD1yKGQpLGxbYV09TnVtYmVyLmlzTmFOKGQpP3M6ZCxsfSkse30pLHNyPWU9Pntjb25zdHtvYnNlcnZlcjp0fT1lW29yXTt0JiYodC5kaXNjb25uZWN0KCksZGVsZXRlIGVbb3JdLm9ic2VydmVyKX0sdXI9KGUsdCk9Pntjb25zdHtjb250YWluZXI6bCxjb250YWluZXJFbDphLGluc3RhbmNlOm4sb2JzZXJ2ZXI6byxsYXN0U2Nyb2xsVG9wOml9PWVbb3JdLHtkaXNhYmxlZDpyLGRpc3RhbmNlOnN9PXJyKGUsbikse2NsaWVudEhlaWdodDp1LHNjcm9sbEhlaWdodDpkLHNjcm9sbFRvcDpjfT1hLHA9Yy1pO2lmKGVbb3JdLmxhc3RTY3JvbGxUb3A9YyxvfHxyfHxwPDApcmV0dXJuO2xldCBoPSExO2lmKGw9PT1lKWg9ZC0odStjKTw9cztlbHNle2NvbnN0e2NsaWVudFRvcDp0LHNjcm9sbEhlaWdodDpsfT1lO2g9Yyt1Pj0oKGUsdCk9Pk1hdGguYWJzKGR0KGUpLWR0KHQpKSkoZSxhKSt0K2wtc31oJiZ0LmNhbGwobil9O2Z1bmN0aW9uIGRyKGUsdCl7Y29uc3R7Y29udGFpbmVyRWw6bCxpbnN0YW5jZTphfT1lW29yXSx7ZGlzYWJsZWQ6bn09cnIoZSxhKTtufHwobC5zY3JvbGxIZWlnaHQ8PWwuY2xpZW50SGVpZ2h0P3QuY2FsbChhKTpzcihlKSl9Y29uc3QgY3I9e21vdW50ZWQoZSx0KXtyZXR1cm4gbnIodGhpcyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbiooKXtjb25zdHtpbnN0YW5jZTpsLHZhbHVlOmF9PXQ7VGUoYSl8fG10KG9yLFwiJ3YtaW5maW5pdGUtc2Nyb2xsJyBiaW5kaW5nIHZhbHVlIG11c3QgYmUgYSBmdW5jdGlvblwiKSx5aWVsZCBrKCk7Y29uc3R7ZGVsYXk6bixpbW1lZGlhdGU6b309cnIoZSxsKSxpPXV0KGUsITApLHI9aT09PXdpbmRvdz9kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ6aSxzPXJlKHVyLmJpbmQobnVsbCxlLGEpLG4pO2lmKGkpe2lmKGVbb3JdPXtpbnN0YW5jZTpsLGNvbnRhaW5lcjppLGNvbnRhaW5lckVsOnIsZGVsYXk6bixjYjphLG9uU2Nyb2xsOnMsbGFzdFNjcm9sbFRvcDpyLnNjcm9sbFRvcH0sbyl7Y29uc3QgdD1uZXcgTXV0YXRpb25PYnNlcnZlcihyZShkci5iaW5kKG51bGwsZSxhKSw1MCkpO2Vbb3JdLm9ic2VydmVyPXQsdC5vYnNlcnZlKGUse2NoaWxkTGlzdDohMCxzdWJ0cmVlOiEwfSksZHIoZSxhKX1pLmFkZEV2ZW50TGlzdGVuZXIoXCJzY3JvbGxcIixzKX19KSl9LHVubW91bnRlZChlKXtjb25zdHtjb250YWluZXI6dCxvblNjcm9sbDpsfT1lW29yXTtudWxsPT10fHx0LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJzY3JvbGxcIixsKSxzcihlKX0saW5zdGFsbDplPT57ZS5kaXJlY3RpdmUoXCJJbmZpbml0ZVNjcm9sbFwiLGNyKX19O3ZhciBwcj1lKHtuYW1lOlwiRWxJbnB1dE51bWJlclwiLGNvbXBvbmVudHM6e0VsSW5wdXQ6V3R9LGRpcmVjdGl2ZXM6e1JlcGVhdENsaWNrOlR0fSxwcm9wczp7c3RlcDp7dHlwZTpOdW1iZXIsZGVmYXVsdDoxfSxzdGVwU3RyaWN0bHk6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiExfSxtYXg6e3R5cGU6TnVtYmVyLGRlZmF1bHQ6MS8wfSxtaW46e3R5cGU6TnVtYmVyLGRlZmF1bHQ6LTEvMH0sbW9kZWxWYWx1ZTp7dHlwZTpOdW1iZXIsZGVmYXVsdDowfSxkaXNhYmxlZDp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITF9LHNpemU6e3R5cGU6U3RyaW5nLHZhbGlkYXRvcjpBdH0sY29udHJvbHM6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiEwfSxjb250cm9sc1Bvc2l0aW9uOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiXCJ9LG5hbWU6U3RyaW5nLGxhYmVsOlN0cmluZyxwbGFjZWhvbGRlcjpTdHJpbmcscHJlY2lzaW9uOnt0eXBlOk51bWJlcix2YWxpZGF0b3I6ZT0+ZT49MCYmZT09PXBhcnNlSW50KGUrXCJcIiwxMCl9fSxlbWl0czpbXCJ1cGRhdGU6bW9kZWxWYWx1ZVwiLFwiY2hhbmdlXCIsXCJpbnB1dFwiLFwiYmx1clwiLFwiZm9jdXNcIl0sc2V0dXAoZSx7ZW1pdDphfSl7Y29uc3Qgbj1xZSgpLG89dyhcImVsRm9ybVwiLHt9KSxpPXcoXCJlbEZvcm1JdGVtXCIse30pLHI9dChudWxsKSxzPWYoe2N1cnJlbnRWYWx1ZTowLHVzZXJJbnB1dDpudWxsfSksdT1sKCgoKT0+QyhlLm1vZGVsVmFsdWUpPGUubWluKSksZD1sKCgoKT0+ayhlLm1vZGVsVmFsdWUpPmUubWF4KSksYz1sKCgoKT0+e2NvbnN0IHQ9YihlLnN0ZXApO3JldHVybiB2b2lkIDAhPT1lLnByZWNpc2lvbj8odD5lLnByZWNpc2lvbiYmY29uc29sZS53YXJuKFwiW0VsZW1lbnQgV2Fybl1bSW5wdXROdW1iZXJdcHJlY2lzaW9uIHNob3VsZCBub3QgYmUgbGVzcyB0aGFuIHRoZSBkZWNpbWFsIHBsYWNlcyBvZiBzdGVwXCIpLGUucHJlY2lzaW9uKTpNYXRoLm1heChiKGUubW9kZWxWYWx1ZSksdCl9KSkscD1sKCgoKT0+ZS5jb250cm9scyYmXCJyaWdodFwiPT09ZS5jb250cm9sc1Bvc2l0aW9uKSksaD1sKCgoKT0+ZS5zaXplfHxpLnNpemV8fG4uc2l6ZSkpLHY9bCgoKCk9PmUuZGlzYWJsZWR8fG8uZGlzYWJsZWQpKSxtPWwoKCgpPT57aWYobnVsbCE9PXMudXNlcklucHV0KXJldHVybiBzLnVzZXJJbnB1dDtsZXQgdD1zLmN1cnJlbnRWYWx1ZTtyZXR1cm5cIm51bWJlclwiPT10eXBlb2YgdCYmdm9pZCAwIT09ZS5wcmVjaXNpb24mJih0PXQudG9GaXhlZChlLnByZWNpc2lvbikpLHR9KSksZz0oZSx0KT0+KHZvaWQgMD09PXQmJih0PWMudmFsdWUpLHBhcnNlRmxvYXQoTWF0aC5yb3VuZChlKk1hdGgucG93KDEwLHQpKS9NYXRoLnBvdygxMCx0KStcIlwiKSksYj1lPT57aWYodm9pZCAwPT09ZSlyZXR1cm4gMDtjb25zdCB0PWUudG9TdHJpbmcoKSxsPXQuaW5kZXhPZihcIi5cIik7bGV0IGE9MDtyZXR1cm4tMSE9PWwmJihhPXQubGVuZ3RoLWwtMSksYX0saz10PT57aWYoXCJudW1iZXJcIiE9dHlwZW9mIHQmJnZvaWQgMCE9PXQpcmV0dXJuIHMuY3VycmVudFZhbHVlO2NvbnN0IGw9TWF0aC5wb3coMTAsYy52YWx1ZSk7cmV0dXJuIGcoKGwqdCtsKmUuc3RlcCkvbCl9LEM9dD0+e2lmKFwibnVtYmVyXCIhPXR5cGVvZiB0JiZ2b2lkIDAhPT10KXJldHVybiBzLmN1cnJlbnRWYWx1ZTtjb25zdCBsPU1hdGgucG93KDEwLGMudmFsdWUpO3JldHVybiBnKChsKnQtbCplLnN0ZXApL2wpfSx4PXQ9Pntjb25zdCBsPXMuY3VycmVudFZhbHVlO1wibnVtYmVyXCI9PXR5cGVvZiB0JiZ2b2lkIDAhPT1lLnByZWNpc2lvbiYmKHQ9Zyh0LGUucHJlY2lzaW9uKSksdD49ZS5tYXgmJih0PWUubWF4KSx0PD1lLm1pbiYmKHQ9ZS5taW4pLGwhPT10JiYocy51c2VySW5wdXQ9bnVsbCxhKFwidXBkYXRlOm1vZGVsVmFsdWVcIix0KSxhKFwiaW5wdXRcIix0KSxhKFwiY2hhbmdlXCIsdCxsKSxzLmN1cnJlbnRWYWx1ZT10KX07cmV0dXJuIHkoKCgpPT5lLm1vZGVsVmFsdWUpLCh0PT57bGV0IGw9dm9pZCAwPT09dD90Ok51bWJlcih0KTtpZih2b2lkIDAhPT1sKXtpZihpc05hTihsKSlyZXR1cm47aWYoZS5zdGVwU3RyaWN0bHkpe2NvbnN0IHQ9YihlLnN0ZXApLGE9TWF0aC5wb3coMTAsdCk7bD1NYXRoLnJvdW5kKGwvZS5zdGVwKSphKmUuc3RlcC9hfXZvaWQgMCE9PWUucHJlY2lzaW9uJiYobD1nKGwsZS5wcmVjaXNpb24pKX1sPj1lLm1heCYmKGw9ZS5tYXgpLGw8PWUubWluJiYobD1lLm1pbikscy5jdXJyZW50VmFsdWU9bCxzLnVzZXJJbnB1dD1udWxsfSkse2ltbWVkaWF0ZTohMH0pLF8oKCgpPT57bGV0IHQ9ci52YWx1ZS5pbnB1dDt0LnNldEF0dHJpYnV0ZShcInJvbGVcIixcInNwaW5idXR0b25cIiksdC5zZXRBdHRyaWJ1dGUoXCJhcmlhLXZhbHVlbWF4XCIsZS5tYXgpLHQuc2V0QXR0cmlidXRlKFwiYXJpYS12YWx1ZW1pblwiLGUubWluKSx0LnNldEF0dHJpYnV0ZShcImFyaWEtdmFsdWVub3dcIixzLmN1cnJlbnRWYWx1ZSksdC5zZXRBdHRyaWJ1dGUoXCJhcmlhLWRpc2FibGVkXCIsdi52YWx1ZSl9KSksUygoKCk9PntyLnZhbHVlLmlucHV0LnNldEF0dHJpYnV0ZShcImFyaWEtdmFsdWVub3dcIixzLmN1cnJlbnRWYWx1ZSl9KSkse2lucHV0OnIsZGlzcGxheVZhbHVlOm0saGFuZGxlSW5wdXQ6ZT0+cy51c2VySW5wdXQ9ZSxoYW5kbGVJbnB1dENoYW5nZTplPT57Y29uc3QgdD1cIlwiPT09ZT92b2lkIDA6TnVtYmVyKGUpO2lzTmFOKHQpJiZcIlwiIT09ZXx8eCh0KSxzLnVzZXJJbnB1dD1udWxsfSxjb250cm9sc0F0UmlnaHQ6cCxkZWNyZWFzZTooKT0+e2lmKHYudmFsdWV8fHUudmFsdWUpcmV0dXJuO2NvbnN0IHQ9ZS5tb2RlbFZhbHVlfHwwLGw9Qyh0KTt4KGwpfSxpbmNyZWFzZTooKT0+e2lmKHYudmFsdWV8fGQudmFsdWUpcmV0dXJuO2NvbnN0IHQ9ZS5tb2RlbFZhbHVlfHwwLGw9ayh0KTt4KGwpfSxpbnB1dE51bWJlclNpemU6aCxpbnB1dE51bWJlckRpc2FibGVkOnYsbWF4RGlzYWJsZWQ6ZCxtaW5EaXNhYmxlZDp1fX19KTtwci5yZW5kZXI9ZnVuY3Rpb24oZSx0LGwsbyxpLGQpe2NvbnN0IGM9UChcImVsLWlucHV0XCIpLHA9RihcInJlcGVhdC1jbGlja1wiKTtyZXR1cm4gYSgpLG4oXCJkaXZcIix7Y2xhc3M6W1wiZWwtaW5wdXQtbnVtYmVyXCIsZS5pbnB1dE51bWJlclNpemU/XCJlbC1pbnB1dC1udW1iZXItLVwiK2UuaW5wdXROdW1iZXJTaXplOlwiXCIse1wiaXMtZGlzYWJsZWRcIjplLmlucHV0TnVtYmVyRGlzYWJsZWR9LHtcImlzLXdpdGhvdXQtY29udHJvbHNcIjohZS5jb250cm9sc30se1wiaXMtY29udHJvbHMtcmlnaHRcIjplLmNvbnRyb2xzQXRSaWdodH1dLG9uRHJhZ3N0YXJ0OnRbNV18fCh0WzVdPVQoKCgpPT57fSksW1wicHJldmVudFwiXSkpfSxbZS5jb250cm9scz9yKChhKCksbihcInNwYW5cIix7a2V5OjAsY2xhc3M6W1wiZWwtaW5wdXQtbnVtYmVyX19kZWNyZWFzZVwiLHtcImlzLWRpc2FibGVkXCI6ZS5taW5EaXNhYmxlZH1dLHJvbGU6XCJidXR0b25cIixvbktleWRvd246dFsxXXx8KHRbMV09JCgoKC4uLnQpPT5lLmRlY3JlYXNlKC4uLnQpKSxbXCJlbnRlclwiXSkpfSxbcyhcImlcIix7Y2xhc3M6XCJlbC1pY29uLVwiKyhlLmNvbnRyb2xzQXRSaWdodD9cImFycm93LWRvd25cIjpcIm1pbnVzXCIpfSxudWxsLDIpXSwzNCkpLFtbcCxlLmRlY3JlYXNlXV0pOnUoXCJ2LWlmXCIsITApLGUuY29udHJvbHM/cigoYSgpLG4oXCJzcGFuXCIse2tleToxLGNsYXNzOltcImVsLWlucHV0LW51bWJlcl9faW5jcmVhc2VcIix7XCJpcy1kaXNhYmxlZFwiOmUubWF4RGlzYWJsZWR9XSxyb2xlOlwiYnV0dG9uXCIsb25LZXlkb3duOnRbMl18fCh0WzJdPSQoKCguLi50KT0+ZS5pbmNyZWFzZSguLi50KSksW1wiZW50ZXJcIl0pKX0sW3MoXCJpXCIse2NsYXNzOlwiZWwtaWNvbi1cIisoZS5jb250cm9sc0F0UmlnaHQ/XCJhcnJvdy11cFwiOlwicGx1c1wiKX0sbnVsbCwyKV0sMzQpKSxbW3AsZS5pbmNyZWFzZV1dKTp1KFwidi1pZlwiLCEwKSxzKGMse3JlZjpcImlucHV0XCIsXCJtb2RlbC12YWx1ZVwiOmUuZGlzcGxheVZhbHVlLHBsYWNlaG9sZGVyOmUucGxhY2Vob2xkZXIsZGlzYWJsZWQ6ZS5pbnB1dE51bWJlckRpc2FibGVkLHNpemU6ZS5pbnB1dE51bWJlclNpemUsbWF4OmUubWF4LG1pbjplLm1pbixuYW1lOmUubmFtZSxsYWJlbDplLmxhYmVsLG9uS2V5ZG93bjpbJChUKGUuaW5jcmVhc2UsW1wicHJldmVudFwiXSksW1widXBcIl0pLCQoVChlLmRlY3JlYXNlLFtcInByZXZlbnRcIl0pLFtcImRvd25cIl0pXSxvbkJsdXI6dFszXXx8KHRbM109dD0+ZS4kZW1pdChcImJsdXJcIix0KSksb25Gb2N1czp0WzRdfHwodFs0XT10PT5lLiRlbWl0KFwiZm9jdXNcIix0KSksb25JbnB1dDplLmhhbmRsZUlucHV0LG9uQ2hhbmdlOmUuaGFuZGxlSW5wdXRDaGFuZ2V9LG51bGwsOCxbXCJtb2RlbC12YWx1ZVwiLFwicGxhY2Vob2xkZXJcIixcImRpc2FibGVkXCIsXCJzaXplXCIsXCJtYXhcIixcIm1pblwiLFwibmFtZVwiLFwibGFiZWxcIixcIm9uS2V5ZG93blwiLFwib25JbnB1dFwiLFwib25DaGFuZ2VcIl0pXSwzNCl9LHByLl9fZmlsZT1cInBhY2thZ2VzL2lucHV0LW51bWJlci9zcmMvaW5kZXgudnVlXCIscHIuaW5zdGFsbD1lPT57ZS5jb21wb25lbnQocHIubmFtZSxwcil9O3ZhciBocj1lKHtuYW1lOlwiRWxMaW5rXCIscHJvcHM6e3R5cGU6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJkZWZhdWx0XCIsdmFsaWRhdG9yOmU9PltcImRlZmF1bHRcIixcInByaW1hcnlcIixcInN1Y2Nlc3NcIixcIndhcm5pbmdcIixcImluZm9cIixcImRhbmdlclwiXS5pbmNsdWRlcyhlKX0sdW5kZXJsaW5lOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMH0sZGlzYWJsZWQ6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiExfSxocmVmOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiXCJ9LGljb246e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJcIn19LGVtaXRzOltcImNsaWNrXCJdLHNldHVwOihlLHtlbWl0OnR9KT0+KHtoYW5kbGVDbGljazpmdW5jdGlvbihsKXtlLmRpc2FibGVkfHx0KFwiY2xpY2tcIixsKX19KX0pO2NvbnN0IHZyPXtrZXk6MSxjbGFzczpcImVsLWxpbmstLWlubmVyXCJ9O2hyLnJlbmRlcj1mdW5jdGlvbihlLHQsbCxvLGkscil7cmV0dXJuIGEoKSxuKFwiYVwiLHtjbGFzczpbXCJlbC1saW5rXCIsZS50eXBlP1wiZWwtbGluay0tXCIrZS50eXBlOlwiXCIsZS5kaXNhYmxlZCYmXCJpcy1kaXNhYmxlZFwiLGUudW5kZXJsaW5lJiYhZS5kaXNhYmxlZCYmXCJpcy11bmRlcmxpbmVcIl0saHJlZjplLmRpc2FibGVkP251bGw6ZS5ocmVmLG9uQ2xpY2s6dFsxXXx8KHRbMV09KC4uLnQpPT5lLmhhbmRsZUNsaWNrKC4uLnQpKX0sW2UuaWNvbj8oYSgpLG4oXCJpXCIse2tleTowLGNsYXNzOmUuaWNvbn0sbnVsbCwyKSk6dShcInYtaWZcIiwhMCksZS4kc2xvdHMuZGVmYXVsdD8oYSgpLG4oXCJzcGFuXCIsdnIsW2QoZS4kc2xvdHMsXCJkZWZhdWx0XCIpXSkpOnUoXCJ2LWlmXCIsITApLGUuJHNsb3RzLmljb24/ZChlLiRzbG90cyxcImljb25cIix7a2V5OjJ9KTp1KFwidi1pZlwiLCEwKV0sMTAsW1wiaHJlZlwiXSl9LGhyLl9fZmlsZT1cInBhY2thZ2VzL2xpbmsvc3JjL2luZGV4LnZ1ZVwiLGhyLmluc3RhbGw9ZT0+e2UuY29tcG9uZW50KGhyLm5hbWUsaHIpfTtjb25zdCBtcj17cGFyZW50Om51bGwsYmFja2dyb3VuZDpcIlwiLHNwaW5uZXI6ITEsdGV4dDpudWxsLGZ1bGxzY3JlZW46ITAsYm9keTohMSxsb2NrOiExLGN1c3RvbUNsYXNzOlwiXCJ9LGZyPXtmdWxsc2NyZWVuTG9hZGluZzpudWxsfSxncj0oZSx0LGwpPT57XCJhYnNvbHV0ZVwiIT09bC5vcmlnaW5hbFBvc2l0aW9uLnZhbHVlJiZcImZpeGVkXCIhPT1sLm9yaWdpbmFsUG9zaXRpb24udmFsdWU/b3QodCxcImVsLWxvYWRpbmctcGFyZW50LS1yZWxhdGl2ZVwiKTppdCh0LFwiZWwtbG9hZGluZy1wYXJlbnQtLXJlbGF0aXZlXCIpLGUuZnVsbHNjcmVlbiYmZS5sb2NrP290KHQsXCJlbC1sb2FkaW5nLXBhcmVudC0taGlkZGVuXCIpOml0KHQsXCJlbC1sb2FkaW5nLXBhcmVudC0taGlkZGVuXCIpfSxicj1mdW5jdGlvbihlPXt9KXtpZih6ZSlyZXR1cm47XCJzdHJpbmdcIj09dHlwZW9mKGU9T2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LG1yKSxlKSkudGFyZ2V0JiYoZS50YXJnZXQ9ZG9jdW1lbnQucXVlcnlTZWxlY3RvcihlLnRhcmdldCkpLGUudGFyZ2V0PWUudGFyZ2V0fHxkb2N1bWVudC5ib2R5LGUudGFyZ2V0IT09ZG9jdW1lbnQuYm9keT9lLmZ1bGxzY3JlZW49ITE6ZS5ib2R5PSEwLGUuZnVsbHNjcmVlbiYmZnIuZnVsbHNjcmVlbkxvYWRpbmcmJmZyLmZ1bGxzY3JlZW5Mb2FkaW5nLmNsb3NlKCk7Y29uc3QgbD1lLmJvZHk/ZG9jdW1lbnQuYm9keTplLnRhcmdldDtlLnBhcmVudD1sO2NvbnN0IGE9ZnVuY3Rpb24oe29wdGlvbnM6ZSxnbG9iYWxMb2FkaW5nT3B0aW9uOmx9KXtsZXQgYT1udWxsLG49bnVsbDtjb25zdCBpPXQoITEpLHI9ZihPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sZSkse29yaWdpbmFsUG9zaXRpb246XCJcIixvcmlnaW5hbE92ZXJmbG93OlwiXCIsdmlzaWJsZTohZS5oYXNPd25Qcm9wZXJ0eShcInZpc2libGVcIil8fGUudmlzaWJsZX0pKTtmdW5jdGlvbiB1KCl7Y29uc3QgZT1yLnBhcmVudDtlLnZMb2FkaW5nQWRkQ2xhc3NMaXN0fHwoaXQoZSxcImVsLWxvYWRpbmctcGFyZW50LS1yZWxhdGl2ZVwiKSxpdChlLFwiZWwtbG9hZGluZy1wYXJlbnQtLWhpZGRlblwiKSksYS5lbCYmYS5lbC5wYXJlbnROb2RlJiZhLmVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoYS5lbCl9Y29uc3QgZD1PYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sQyhyKSkse3NldFRleHQ6ZnVuY3Rpb24oZSl7ci50ZXh0PWV9LGNsb3NlOmZ1bmN0aW9uKCl7ci5wYXJlbnQudkxvYWRpbmdBZGRDbGFzc0xpc3Q9bnVsbCxyLmZ1bGxzY3JlZW4mJihsLmZ1bGxzY3JlZW5Mb2FkaW5nPXZvaWQgMCksaS52YWx1ZT0hMCxjbGVhclRpbWVvdXQobiksbj13aW5kb3cuc2V0VGltZW91dCgoKCk9PntpLnZhbHVlJiYoaS52YWx1ZT0hMSx1KCkpfSksNDAwKSxyLnZpc2libGU9ITF9LGhhbmRsZUFmdGVyTGVhdmU6ZnVuY3Rpb24oKXtpLnZhbHVlJiYoaS52YWx1ZT0hMSx1KCkpfX0pO3JldHVybiBhPXMoe25hbWU6XCJFbExvYWRpbmdcIixzZXR1cDooKT0+ZCxyZW5kZXIoKXtjb25zdCBlPUQoXCJzdmdcIix7Y2xhc3M6XCJjaXJjdWxhclwiLHZpZXdCb3g6XCIyNSAyNSA1MCA1MFwifSxbRChcImNpcmNsZVwiLHtjbGFzczpcInBhdGhcIixjeDpcIjUwXCIsY3k6XCI1MFwiLHI6XCIyMFwiLGZpbGw6XCJub25lXCJ9KV0pLHQ9RChcImlcIix7Y2xhc3M6dGhpcy5zcGlubmVyfSksbD1EKFwicFwiLHtjbGFzczpcImVsLWxvYWRpbmctdGV4dFwifSxbdGhpcy50ZXh0XSk7cmV0dXJuIEQobyx7bmFtZTpcImVsLWxvYWRpbmctZmFkZVwiLG9uQWZ0ZXJMZWF2ZTp0aGlzLmhhbmRsZUFmdGVyTGVhdmV9LHtkZWZhdWx0OigpPT5EKFwiZGl2XCIse3N0eWxlOntiYWNrZ3JvdW5kQ29sb3I6dGhpcy5iYWNrZ3JvdW5kfHxcIlwiLGRpc3BsYXk6dGhpcy52aXNpYmxlP1wiaW5oZXJpdFwiOlwibm9uZVwifSxjbGFzczpbXCJlbC1sb2FkaW5nLW1hc2tcIix0aGlzLmN1c3RvbUNsYXNzLHRoaXMuZnVsbHNjcmVlbj9cImlzLWZ1bGxzY3JlZW5cIjpcIlwiXX0sW0QoXCJkaXZcIix7Y2xhc3M6XCJlbC1sb2FkaW5nLXNwaW5uZXJcIn0sW3RoaXMuc3Bpbm5lcj90OmUsdGhpcy50ZXh0P2w6bnVsbF0pXSl9KX19KSxVKGEsZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSksT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LGQpLHt2bTphLGdldCAkZWwoKXtyZXR1cm4gYS5lbH19KX0oe29wdGlvbnM6ZSxnbG9iYWxMb2FkaW5nT3B0aW9uOmZyfSk7cmV0dXJuKChlLHQsbCk9Pntjb25zdCBhPXt9O2UuZnVsbHNjcmVlbj8obC5vcmlnaW5hbFBvc2l0aW9uLnZhbHVlPXJ0KGRvY3VtZW50LmJvZHksXCJwb3NpdGlvblwiKSxsLm9yaWdpbmFsT3ZlcmZsb3cudmFsdWU9cnQoZG9jdW1lbnQuYm9keSxcIm92ZXJmbG93XCIpLGEuekluZGV4PVN0cmluZyhnbC5uZXh0WkluZGV4KCkpKTplLmJvZHk/KGwub3JpZ2luYWxQb3NpdGlvbi52YWx1ZT1ydChkb2N1bWVudC5ib2R5LFwicG9zaXRpb25cIiksW1widG9wXCIsXCJsZWZ0XCJdLmZvckVhY2goKHQ9Pntjb25zdCBsPVwidG9wXCI9PT10P1wic2Nyb2xsVG9wXCI6XCJzY3JvbGxMZWZ0XCI7YVt0XT1lLnRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVt0XStkb2N1bWVudC5ib2R5W2xdK2RvY3VtZW50LmRvY3VtZW50RWxlbWVudFtsXS1wYXJzZUludChydChkb2N1bWVudC5ib2R5LFwibWFyZ2luLVwiK3QpLDEwKStcInB4XCJ9KSksW1wiaGVpZ2h0XCIsXCJ3aWR0aFwiXS5mb3JFYWNoKCh0PT57YVt0XT1lLnRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVt0XStcInB4XCJ9KSkpOmwub3JpZ2luYWxQb3NpdGlvbi52YWx1ZT1ydCh0LFwicG9zaXRpb25cIiksT2JqZWN0LmtleXMoYSkuZm9yRWFjaCgoZT0+e2wuJGVsLnN0eWxlW2VdPWFbZV19KSl9KShlLGwsYSksZ3IoZSxsLGEpLGUucGFyZW50LnZMb2FkaW5nQWRkQ2xhc3NMaXN0PSgpPT57Z3IoZSxsLGEpfSxsLmFwcGVuZENoaWxkKGEuJGVsKSxlLmZ1bGxzY3JlZW4mJihmci5mdWxsc2NyZWVuTG9hZGluZz1hKSxhfSx5cj17bW91bnRlZChlLHQpe2NvbnN0IGw9ZS5nZXRBdHRyaWJ1dGUoXCJlbGVtZW50LWxvYWRpbmctdGV4dFwiKSxhPWUuZ2V0QXR0cmlidXRlKFwiZWxlbWVudC1sb2FkaW5nLXNwaW5uZXJcIiksbj1lLmdldEF0dHJpYnV0ZShcImVsZW1lbnQtbG9hZGluZy1iYWNrZ3JvdW5kXCIpLG89ZS5nZXRBdHRyaWJ1dGUoXCJlbGVtZW50LWxvYWRpbmctY3VzdG9tLWNsYXNzXCIpLGk9dC5pbnN0YW5jZSxyPWJyKHt0ZXh0OmkmJmlbbF18fGwsc3Bpbm5lcjppJiZpW2FdfHxhLGJhY2tncm91bmQ6aSYmaVtuXXx8bixjdXN0b21DbGFzczppJiZpW29dfHxvLGZ1bGxzY3JlZW46ISF0Lm1vZGlmaWVycy5mdWxsc2NyZWVuLHRhcmdldDp0Lm1vZGlmaWVycy5mdWxsc2NyZWVuP251bGw6ZSxib2R5OiEhdC5tb2RpZmllcnMuYm9keSx2aXNpYmxlOiEhdC52YWx1ZSxsb2NrOiEhdC5tb2RpZmllcnMubG9ja30pO2UuaW5zdGFuY2U9cn0sdXBkYXRlZChlLHQpe2NvbnN0IGw9ZS5pbnN0YW5jZTtsJiYobC5zZXRUZXh0KGUuZ2V0QXR0cmlidXRlKFwiZWxlbWVudC1sb2FkaW5nLXRleHRcIikpLHQub2xkVmFsdWUhPT10LnZhbHVlJiYodC52YWx1ZSYmIWwudmlzaWJsZS52YWx1ZT9sLnZpc2libGUudmFsdWU9ITA6bC52aXNpYmxlLnZhbHVlPSExKSl9LHVubW91bnRlZChlKXt2YXIgdDtudWxsPT09KHQ9bnVsbD09ZT92b2lkIDA6ZS5pbnN0YW5jZSl8fHZvaWQgMD09PXR8fHQuY2xvc2UoKX19O3ZhciBrcj17aW5zdGFsbChlKXtlLmRpcmVjdGl2ZShcImxvYWRpbmdcIix5ciksZS5jb25maWcuZ2xvYmFsUHJvcGVydGllcy4kbG9hZGluZz1icn0sZGlyZWN0aXZlOnlyLHNlcnZpY2U6YnJ9LENyPWUoe25hbWU6XCJFbE1haW5cIn0pO2NvbnN0IHhyPXtjbGFzczpcImVsLW1haW5cIn07Q3IucmVuZGVyPWZ1bmN0aW9uKGUsdCxsLG8saSxyKXtyZXR1cm4gYSgpLG4oXCJtYWluXCIseHIsW2QoZS4kc2xvdHMsXCJkZWZhdWx0XCIpXSl9LENyLl9fZmlsZT1cInBhY2thZ2VzL2NvbnRhaW5lci9zcmMvbWFpbi52dWVcIixDci5pbnN0YWxsPWU9PntlLmNvbXBvbmVudChDci5uYW1lLENyKX07Y2xhc3Mgd3J7Y29uc3RydWN0b3IoZSx0KXt0aGlzLnBhcmVudD1lLHRoaXMuZG9tTm9kZT10LHRoaXMuc3ViSW5kZXg9MCx0aGlzLnN1YkluZGV4PTAsdGhpcy5pbml0KCl9aW5pdCgpe3RoaXMuc3ViTWVudUl0ZW1zPXRoaXMuZG9tTm9kZS5xdWVyeVNlbGVjdG9yQWxsKFwibGlcIiksdGhpcy5hZGRMaXN0ZW5lcnMoKX1nb3RvU3ViSW5kZXgoZSl7ZT09PXRoaXMuc3ViTWVudUl0ZW1zLmxlbmd0aD9lPTA6ZTwwJiYoZT10aGlzLnN1Yk1lbnVJdGVtcy5sZW5ndGgtMSksdGhpcy5zdWJNZW51SXRlbXNbZV0uZm9jdXMoKSx0aGlzLnN1YkluZGV4PWV9YWRkTGlzdGVuZXJzKCl7Y29uc3QgZT10aGlzLnBhcmVudC5kb21Ob2RlO0FycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwodGhpcy5zdWJNZW51SXRlbXMsKHQ9Pnt0LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsKHQ9PntsZXQgbD0hMTtzd2l0Y2godC5jb2RlKXtjYXNlIGZ0LmRvd246dGhpcy5nb3RvU3ViSW5kZXgodGhpcy5zdWJJbmRleCsxKSxsPSEwO2JyZWFrO2Nhc2UgZnQudXA6dGhpcy5nb3RvU3ViSW5kZXgodGhpcy5zdWJJbmRleC0xKSxsPSEwO2JyZWFrO2Nhc2UgZnQudGFiOkN0KGUsXCJtb3VzZWxlYXZlXCIpO2JyZWFrO2Nhc2UgZnQuZW50ZXI6Y2FzZSBmdC5zcGFjZTpsPSEwLHQuY3VycmVudFRhcmdldC5jbGljaygpfXJldHVybiBsJiYodC5wcmV2ZW50RGVmYXVsdCgpLHQuc3RvcFByb3BhZ2F0aW9uKCkpLCExfSkpfSkpfX1jbGFzcyBfcntjb25zdHJ1Y3RvcihlKXt0aGlzLmRvbU5vZGU9ZSx0aGlzLnN1Ym1lbnU9bnVsbCx0aGlzLnN1Ym1lbnU9bnVsbCx0aGlzLmluaXQoKX1pbml0KCl7dGhpcy5kb21Ob2RlLnNldEF0dHJpYnV0ZShcInRhYmluZGV4XCIsXCIwXCIpO2NvbnN0IGU9dGhpcy5kb21Ob2RlLnF1ZXJ5U2VsZWN0b3IoXCIuZWwtbWVudVwiKTtlJiYodGhpcy5zdWJtZW51PW5ldyB3cih0aGlzLGUpKSx0aGlzLmFkZExpc3RlbmVycygpfWFkZExpc3RlbmVycygpe3RoaXMuZG9tTm9kZS5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLChlPT57bGV0IHQ9ITE7c3dpdGNoKGUuY29kZSl7Y2FzZSBmdC5kb3duOkN0KGUuY3VycmVudFRhcmdldCxcIm1vdXNlZW50ZXJcIiksdGhpcy5zdWJtZW51JiZ0aGlzLnN1Ym1lbnUuZ290b1N1YkluZGV4KDApLHQ9ITA7YnJlYWs7Y2FzZSBmdC51cDpDdChlLmN1cnJlbnRUYXJnZXQsXCJtb3VzZWVudGVyXCIpLHRoaXMuc3VibWVudSYmdGhpcy5zdWJtZW51LmdvdG9TdWJJbmRleCh0aGlzLnN1Ym1lbnUuc3ViTWVudUl0ZW1zLmxlbmd0aC0xKSx0PSEwO2JyZWFrO2Nhc2UgZnQudGFiOkN0KGUuY3VycmVudFRhcmdldCxcIm1vdXNlbGVhdmVcIik7YnJlYWs7Y2FzZSBmdC5lbnRlcjpjYXNlIGZ0LnNwYWNlOnQ9ITAsZS5jdXJyZW50VGFyZ2V0LmNsaWNrKCl9dCYmZS5wcmV2ZW50RGVmYXVsdCgpfSkpfX1jbGFzcyBTcntjb25zdHJ1Y3RvcihlKXt0aGlzLmRvbU5vZGU9ZSx0aGlzLmluaXQoKX1pbml0KCl7Y29uc3QgZT10aGlzLmRvbU5vZGUuY2hpbGROb2RlcztbXS5maWx0ZXIuY2FsbChlLChlPT4xPT09ZS5ub2RlVHlwZSkpLmZvckVhY2goKGU9PntuZXcgX3IoZSl9KSl9fXZhciBFcj1lKHtuYW1lOlwiRWxNZW51Q29sbGFwc2VUcmFuc2l0aW9uXCIsc2V0dXA6KCk9Pih7b246e2JlZm9yZUVudGVyKGUpe2Uuc3R5bGUub3BhY2l0eT0uMn0sZW50ZXIoZSl7b3QoZSxcImVsLW9wYWNpdHktdHJhbnNpdGlvblwiKSxlLnN0eWxlLm9wYWNpdHk9MX0sYWZ0ZXJFbnRlcihlKXtpdChlLFwiZWwtb3BhY2l0eS10cmFuc2l0aW9uXCIpLGUuc3R5bGUub3BhY2l0eT1cIlwifSxiZWZvcmVMZWF2ZShlKXtlLmRhdGFzZXR8fChlLmRhdGFzZXQ9e30pLG50KGUsXCJlbC1tZW51LS1jb2xsYXBzZVwiKT8oaXQoZSxcImVsLW1lbnUtLWNvbGxhcHNlXCIpLGUuZGF0YXNldC5vbGRPdmVyZmxvdz1lLnN0eWxlLm92ZXJmbG93LGUuZGF0YXNldC5zY3JvbGxXaWR0aD1lLmNsaWVudFdpZHRoLG90KGUsXCJlbC1tZW51LS1jb2xsYXBzZVwiKSk6KG90KGUsXCJlbC1tZW51LS1jb2xsYXBzZVwiKSxlLmRhdGFzZXQub2xkT3ZlcmZsb3c9ZS5zdHlsZS5vdmVyZmxvdyxlLmRhdGFzZXQuc2Nyb2xsV2lkdGg9ZS5jbGllbnRXaWR0aCxpdChlLFwiZWwtbWVudS0tY29sbGFwc2VcIikpLGUuc3R5bGUud2lkdGg9ZS5zY3JvbGxXaWR0aCtcInB4XCIsZS5zdHlsZS5vdmVyZmxvdz1cImhpZGRlblwifSxsZWF2ZShlKXtvdChlLFwiaG9yaXpvbnRhbC1jb2xsYXBzZS10cmFuc2l0aW9uXCIpLGUuc3R5bGUud2lkdGg9ZS5kYXRhc2V0LnNjcm9sbFdpZHRoK1wicHhcIn19fSl9KTtmdW5jdGlvbiBNcihlPVwiXCIpe2NvbnN0IGw9dChcIlwiKTtyZXR1cm4gZT8obC52YWx1ZT1mdW5jdGlvbihlLHQ9LjIpe2xldHtyZWQ6bCxncmVlbjphLGJsdWU6bn09ZnVuY3Rpb24oZSl7bGV0IHQ9ZS5yZXBsYWNlKFwiI1wiLFwiXCIpO2lmKC9eWzAtOWEtZkEtRl17M30kLy50ZXN0KHQpKXtjb25zdCBlPXQuc3BsaXQoXCJcIik7Zm9yKGxldCB0PTI7dD49MDt0LS0pZS5zcGxpY2UodCwwLGVbdF0pO3Q9ZS5qb2luKFwiXCIpfXJldHVybi9eWzAtOWEtZkEtRl17Nn0kLy50ZXN0KHQpP3tyZWQ6cGFyc2VJbnQodC5zbGljZSgwLDIpLDE2KSxncmVlbjpwYXJzZUludCh0LnNsaWNlKDIsNCksMTYpLGJsdWU6cGFyc2VJbnQodC5zbGljZSg0LDYpLDE2KX06e3JlZDoyNTUsZ3JlZW46MjU1LGJsdWU6MjU1fX0oZSk7cmV0dXJuIHQ+MD8obCo9MS10LGEqPTEtdCxuKj0xLXQpOihsKz0oMjU1LWwpKnQsYSs9KDI1NS1hKSp0LG4rPSgyNTUtbikqdCksYHJnYigke01hdGgucm91bmQobCl9LCAke01hdGgucm91bmQoYSl9LCAke01hdGgucm91bmQobil9KWB9KGUpLGwpOmx9RXIucmVuZGVyPWZ1bmN0aW9uKGUsdCxsLHIscyx1KXtyZXR1cm4gYSgpLG4obyxNKHttb2RlOlwib3V0LWluXCJ9LHEoZS5vbikpLHtkZWZhdWx0OmkoKCgpPT5bZChlLiRzbG90cyxcImRlZmF1bHRcIildKSksXzozfSwxNil9LEVyLl9fZmlsZT1cInBhY2thZ2VzL21lbnUvc3JjL21lbnUtY29sbGFwc2UtdHJhbnNpdGlvbi52dWVcIjt2YXIgVHI9ZSh7bmFtZTpcIkVsTWVudVwiLGNvbXBvbmVudE5hbWU6XCJFbE1lbnVcIixjb21wb25lbnRzOntFbE1lbnVDb2xsYXBzZVRyYW5zaXRpb246RXJ9LHByb3BzOnttb2RlOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwidmVydGljYWxcIn0sZGVmYXVsdEFjdGl2ZTp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIlwifSxkZWZhdWx0T3BlbmVkczpBcnJheSx1bmlxdWVPcGVuZWQ6Qm9vbGVhbixyb3V0ZXI6Qm9vbGVhbixtZW51VHJpZ2dlcjp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcImhvdmVyXCJ9LGNvbGxhcHNlOkJvb2xlYW4sYmFja2dyb3VuZENvbG9yOnt0eXBlOlN0cmluZ30sdGV4dENvbG9yOnt0eXBlOlN0cmluZ30sYWN0aXZlVGV4dENvbG9yOnt0eXBlOlN0cmluZ30sY29sbGFwc2VUcmFuc2l0aW9uOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMH19LGVtaXRzOltcImNsb3NlXCIsXCJvcGVuXCIsXCJzZWxlY3RcIl0sc2V0dXAoZSxhKXtjb25zdCBuPXQoZS5kZWZhdWx0T3BlbmVkcyYmIWUuY29sbGFwc2U/ZS5kZWZhdWx0T3BlbmVkcy5zbGljZSgwKTpbXSksbz12KCksaT10KGUuZGVmYXVsdEFjdGl2ZSkscj10KHt9KSxzPXQoe30pLHU9dCghMSksZD1uZSgpLGM9by5hcHBDb250ZXh0LmNvbmZpZy5nbG9iYWxQcm9wZXJ0aWVzLiRyb3V0ZXIscD1NcihlLmJhY2tncm91bmRDb2xvciksaD1sKCgoKT0+XCJob3Jpem9udGFsXCI9PT1lLm1vZGV8fFwidmVydGljYWxcIj09PWUubW9kZSYmZS5jb2xsYXBzZSkpLG09KCk9Pntjb25zdCB0PWkudmFsdWUsbD1yLnZhbHVlW3RdO2lmKCFsfHxcImhvcml6b250YWxcIj09PWUubW9kZXx8ZS5jb2xsYXBzZSlyZXR1cm47bC5pbmRleFBhdGguZm9yRWFjaCgoZT0+e2xldCB0PXMudmFsdWVbZV07dCYmayhlLG51bGw9PXQ/dm9pZCAwOnQuaW5kZXhQYXRoKX0pKX0sZj1lPT57cy52YWx1ZVtlLmluZGV4XT1lfSxnPWU9PntkZWxldGUgcy52YWx1ZVtlLmluZGV4XX0saz0odCxsKT0+e24udmFsdWUuaW5jbHVkZXModCl8fChlLnVuaXF1ZU9wZW5lZCYmKG4udmFsdWU9bi52YWx1ZS5maWx0ZXIoKGU9Pi0xIT09KGIobCk/bC52YWx1ZTpsKS5pbmRleE9mKGUpKSkpLG4udmFsdWUucHVzaCh0KSl9LEM9ZT0+e2NvbnN0IHQ9bi52YWx1ZS5pbmRleE9mKGUpOy0xIT09dCYmbi52YWx1ZS5zcGxpY2UodCwxKX0sdz1lPT57Y29uc3R7aW5kZXg6dCxpbmRleFBhdGg6bH09ZTtuLnZhbHVlLmluY2x1ZGVzKHQpPyhDKHQpLGEuZW1pdChcImNsb3NlXCIsdCxsLnZhbHVlKSk6KGsodCxsKSxhLmVtaXQoXCJvcGVuXCIsdCxsLnZhbHVlKSl9LFM9dD0+e2NvbnN0e2luZGV4OmwsaW5kZXhQYXRoOm99PXQscj1udWxsIT09dC5pbmRleCxzPWkudmFsdWU7ciYmKGkudmFsdWU9dC5pbmRleCksYS5lbWl0KFwic2VsZWN0XCIsbCxvLnZhbHVlLHQpLChcImhvcml6b250YWxcIj09PWUubW9kZXx8ZS5jb2xsYXBzZSkmJihuLnZhbHVlPVtdKSxlLnJvdXRlciYmYyYmciYmRSh0LChlPT57aWYoaS52YWx1ZT1zLGUpe2lmKFwiTmF2aWdhdGlvbkR1cGxpY2F0ZWRcIj09PWUubmFtZSlyZXR1cm47Y29uc29sZS5lcnJvcihlKX19KSl9LEU9KGUsdCk9PntsZXQgbD1lLnJvdXRlfHxlLmluZGV4O3RyeXtudWxsPT1jfHxjLnB1c2gobCwoKCk9Pm51bGwpLHQpfWNhdGNoKGUpe2NvbnNvbGUuZXJyb3IoZSl9fSxNPXQ9Pntjb25zdCBsPXIudmFsdWUsYT1sW3RdfHxsW2kudmFsdWVdfHxsW2UuZGVmYXVsdEFjdGl2ZV07YT8oaS52YWx1ZT1hLmluZGV4LG0oKSk6dS52YWx1ZT91LnZhbHVlPSExOmkudmFsdWU9bnVsbH07cmV0dXJuIHkoKCgpPT5lLmRlZmF1bHRBY3RpdmUpLChlPT57cltlXXx8KGkudmFsdWU9XCJcIiksTShlKX0pKSx5KHIudmFsdWUsKCgpPT57TSgpfSkpLHkoKCgpPT5lLmNvbGxhcHNlKSwoKHQsbCk9Pnt0IT09bCYmKHUudmFsdWU9ITApLHQmJihuLnZhbHVlPVtdKSxkLmVtaXQoXCJyb290TWVudTp0b2dnbGUtY29sbGFwc2VcIixCb29sZWFuKGUuY29sbGFwc2UpKX0pKSx4KFwicm9vdE1lbnVcIix7cHJvcHM6ZSxvcGVuZWRNZW51czpuLGl0ZW1zOnIsc3VibWVudXM6cyxob3ZlckJhY2tncm91bmQ6cCxhY3RpdmVJbmRleDppLGlzTWVudVBvcHVwOmgsbWV0aG9kczp7YWRkTWVudUl0ZW06ZT0+e3IudmFsdWVbZS5pbmRleF09ZX0scmVtb3ZlTWVudUl0ZW06ZT0+e2RlbGV0ZSByLnZhbHVlW2UuaW5kZXhdfSxhZGRTdWJNZW51OmYscmVtb3ZlU3ViTWVudTpnLG9wZW5NZW51OmssY2xvc2VNZW51OkN9LHJvb3RNZW51RW1pdDpkLmVtaXQscm9vdE1lbnVPbjpkLm9ufSkseChcInN1Yk1lbnU6XCIrby51aWQse2FkZFN1Yk1lbnU6ZixyZW1vdmVTdWJNZW51Omd9KSxfKCgoKT0+e20oKSxkLm9uKFwibWVudUl0ZW06aXRlbS1jbGlja1wiLFMpLGQub24oXCJzdWJtZW51OnN1Ym1lbnUtY2xpY2tcIix3KSxcImhvcml6b250YWxcIj09PWUubW9kZSYmbmV3IFNyKG8udm5vZGUuZWwpfSkpLHtob3ZlckJhY2tncm91bmQ6cCxpc01lbnVQb3B1cDpoLHByb3BzOmUsb3BlbjplPT57Y29uc3R7aW5kZXhQYXRoOnR9PXMudmFsdWVbZS50b1N0cmluZygpXTt0LmZvckVhY2goKGU9PmsoZSx0KSkpfSxjbG9zZTplPT57QyhlKX19fX0pO2Z1bmN0aW9uIE5yKGUsdCl7Y29uc3QgYT13KFwicm9vdE1lbnVcIiksbj1sKCgoKT0+e2xldCBsPWUucGFyZW50O2NvbnN0IGE9W3RdO2Zvcig7XCJFbE1lbnVcIiE9PWwudHlwZS5uYW1lOylsLnByb3BzLmluZGV4JiZhLnVuc2hpZnQobC5wcm9wcy5pbmRleCksbD1sLnBhcmVudDtyZXR1cm4gYX0pKTtyZXR1cm57cGFyZW50TWVudTpsKCgoKT0+e2xldCB0PWUucGFyZW50O2Zvcig7dCYmLTE9PT1bXCJFbE1lbnVcIixcIkVsU3VibWVudVwiXS5pbmRleE9mKHQudHlwZS5uYW1lKTspdD10LnBhcmVudDtyZXR1cm4gdH0pKSxwYWRkaW5nU3R5bGU6bCgoKCk9PntsZXQgdD1lLnBhcmVudDtpZihcInZlcnRpY2FsXCIhPT1hLnByb3BzLm1vZGUpcmV0dXJue307bGV0IGw9MjA7aWYoYS5wcm9wcy5jb2xsYXBzZSlsPTIwO2Vsc2UgZm9yKDt0JiZcIkVsTWVudVwiIT09dC50eXBlLm5hbWU7KVwiRWxTdWJtZW51XCI9PT10LnR5cGUubmFtZSYmKGwrPTIwKSx0PXQucGFyZW50O3JldHVybntwYWRkaW5nTGVmdDpsK1wicHhcIn19KSksaW5kZXhQYXRoOm59fVRyLnJlbmRlcj1mdW5jdGlvbihlLHQsbCxvLHIscyl7Y29uc3QgdT1QKFwiZWwtbWVudS1jb2xsYXBzZS10cmFuc2l0aW9uXCIpO3JldHVybiBlLnByb3BzLmNvbGxhcHNlVHJhbnNpdGlvbj8oYSgpLG4odSx7a2V5OjB9LHtkZWZhdWx0OmkoKCgpPT5bKGEoKSxuKFwidWxcIix7a2V5OitlLnByb3BzLmNvbGxhcHNlLHJvbGU6XCJtZW51YmFyXCIsc3R5bGU6e2JhY2tncm91bmRDb2xvcjplLnByb3BzLmJhY2tncm91bmRDb2xvcnx8XCJcIn0sY2xhc3M6e1wiZWwtbWVudVwiOiEwLFwiZWwtbWVudS0taG9yaXpvbnRhbFwiOlwiaG9yaXpvbnRhbFwiPT09ZS5tb2RlLFwiZWwtbWVudS0tY29sbGFwc2VcIjplLnByb3BzLmNvbGxhcHNlfX0sW2QoZS4kc2xvdHMsXCJkZWZhdWx0XCIpXSw2KSldKSksXzozfSkpOihhKCksbihcInVsXCIse2tleTorZS5wcm9wcy5jb2xsYXBzZSxyb2xlOlwibWVudWJhclwiLHN0eWxlOntiYWNrZ3JvdW5kQ29sb3I6ZS5wcm9wcy5iYWNrZ3JvdW5kQ29sb3J8fFwiXCJ9LGNsYXNzOntcImVsLW1lbnVcIjohMCxcImVsLW1lbnUtLWhvcml6b250YWxcIjpcImhvcml6b250YWxcIj09PWUubW9kZSxcImVsLW1lbnUtLWNvbGxhcHNlXCI6ZS5wcm9wcy5jb2xsYXBzZX19LFtkKGUuJHNsb3RzLFwiZGVmYXVsdFwiKV0sNikpfSxUci5fX2ZpbGU9XCJwYWNrYWdlcy9tZW51L3NyYy9tZW51LnZ1ZVwiLFRyLmluc3RhbGw9ZT0+e2UuY29tcG9uZW50KFRyLm5hbWUsVHIpfTt2YXIgRHI9ZSh7bmFtZTpcIkVsVG9vbHRpcFwiLGNvbXBvbmVudHM6e0VsUG9wcGVyOlNsfSxwcm9wczp7ZWZmZWN0Ont0eXBlOlN0cmluZyxkZWZhdWx0OlwiZGFya1wifSxjbGFzczp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIlwifSxjb250ZW50Ont0eXBlOlN0cmluZyxkZWZhdWx0OlwiXCJ9LGRpc2FibGVkOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMX0sZW50ZXJhYmxlOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMH0saGlkZUFmdGVyOnt0eXBlOk51bWJlcixkZWZhdWx0OjB9LG1hbnVhbDp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITF9LG1vZGVsVmFsdWU6e3R5cGU6Qm9vbGVhbix2YWxpZGF0b3I6ZT0+XCJib29sZWFuXCI9PXR5cGVvZiBlLGRlZmF1bHQ6dm9pZCAwfSxvZmZzZXQ6e3R5cGU6TnVtYmVyLGRlZmF1bHQ6MTJ9LG9wZW5EZWxheTp7dHlwZTpOdW1iZXIsZGVmYXVsdDowfSxwbGFjZW1lbnQ6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJib3R0b21cIn0scG9wcGVyT3B0aW9uczp7dHlwZTpPYmplY3QsZGVmYXVsdDooKT0+bnVsbH0sc2hvd0FmdGVyOnt0eXBlOk51bWJlcixkZWZhdWx0OjB9LHRyYW5zaXRpb246e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJlbC1mYWRlLWluLWxpbmVhclwifSx0cmlnZ2VyOnt0eXBlOltTdHJpbmcsQXJyYXldLGRlZmF1bHQ6KCk9PltcImhvdmVyXCJdfSx2aXNpYmxlQXJyb3c6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiEwfX0sZW1pdHM6W1B0XSxzZXR1cChlLGwpe2UubWFudWFsJiZ2b2lkIDA9PT1lLm1vZGVsVmFsdWUmJm10KFwiW0VsVG9vbHRpcF1cIixcIllvdSBuZWVkIHRvIHBhc3MgYSB2LW1vZGVsIHRvIGVsLXRvb2x0aXAgd2hlbiBgbWFudWFsYCBpcyB0cnVlXCIpO2NvbnN0IGE9dChudWxsKTtyZXR1cm57cG9wcGVyOmEsb25VcGRhdGVWaXNpYmxlOmU9PntsLmVtaXQoUHQsZSl9LHVwZGF0ZVBvcHBlcjooKT0+YS52YWx1ZS51cGRhdGUoKX19LHJlbmRlcigpe2NvbnN0eyRzbG90czplLGNvbnRlbnQ6dCxkaXNhYmxlZDpsLGVmZmVjdDphLGVudGVyYWJsZTpuLGhpZGVBZnRlcjpvLG1hbnVhbDppLG9mZnNldDpyLG9wZW5EZWxheTpzLG9uVXBkYXRlVmlzaWJsZTp1LHBsYWNlbWVudDpkLHBvcHBlck9wdGlvbnM6YyxzaG93QWZ0ZXI6cCx0cmFuc2l0aW9uOmgsdHJpZ2dlcjp2LHZpc2libGVBcnJvdzptfT10aGlzO3JldHVybiBEKFNsLHtyZWY6XCJwb3BwZXJcIixhcHBlbmRUb0JvZHk6ITAsY2xhc3M6dGhpcy5jbGFzcyxkaXNhYmxlZDpsLGVmZmVjdDphLGVudGVyYWJsZTpuLGhpZGVBZnRlcjpvLG1hbnVhbE1vZGU6aSxvZmZzZXQ6cixwbGFjZW1lbnQ6ZCxzaG93QWZ0ZXI6c3x8cCxzaG93QXJyb3c6bSx0cmFuc2l0aW9uOmgsdHJpZ2dlcjp2LHBvcHBlck9wdGlvbnM6Yyx2aXNpYmxlOnRoaXMubW9kZWxWYWx1ZSxcIm9uVXBkYXRlOnZpc2libGVcIjp1fSx7ZGVmYXVsdDooKT0+ZS5jb250ZW50P2UuY29udGVudCgpOnQsdHJpZ2dlcjooKT0+ZS5kZWZhdWx0KCl9KX19KTtEci5pbnN0YWxsPWU9PntlLmNvbXBvbmVudChEci5uYW1lLERyKX07dmFyIE9yPWUoe25hbWU6XCJFbE1lbnVJdGVtXCIsY29tcG9uZW50TmFtZTpcIkVsTWVudUl0ZW1cIixjb21wb25lbnRzOntFbFRvb2x0aXA6RHJ9LHByb3BzOntpbmRleDp7ZGVmYXVsdDpudWxsLHZhbGlkYXRvcjplPT5cInN0cmluZ1wiPT10eXBlb2YgZXx8bnVsbD09PWV9LHJvdXRlOltTdHJpbmcsT2JqZWN0XSxkaXNhYmxlZDpCb29sZWFufSxlbWl0czpbXCJjbGlja1wiXSxzZXR1cChlLHtlbWl0OnQsc2xvdHM6YX0pe2NvbnN0IG49digpLG89dyhcInJvb3RNZW51XCIpLHtwYXJlbnRNZW51OmkscGFkZGluZ1N0eWxlOnIsaW5kZXhQYXRoOnN9PU5yKG4sZS5pbmRleCkse2FkZFN1Yk1lbnU6dSxyZW1vdmVTdWJNZW51OmR9PXcoXCJzdWJNZW51OlwiK2kudmFsdWUudWlkKSxjPWwoKCgpPT5lLmluZGV4PT09by5hY3RpdmVJbmRleC52YWx1ZSkpLHA9bCgoKCk9Pm8uaG92ZXJCYWNrZ3JvdW5kLnZhbHVlKSksaD1sKCgoKT0+by5wcm9wcy5iYWNrZ3JvdW5kQ29sb3J8fFwiXCIpKSxtPWwoKCgpPT5vLnByb3BzLmFjdGl2ZVRleHRDb2xvcnx8XCJcIikpLGY9bCgoKCk9Pm8ucHJvcHMudGV4dENvbG9yfHxcIlwiKSksZz1sKCgoKT0+by5wcm9wcy5tb2RlKSksYj1sKCgoKT0+XCJFbE1lbnVcIiE9PWkudmFsdWUudHlwZS5uYW1lKSkseT1sKCgoKT0+e2NvbnN0IGU9e2NvbG9yOmMudmFsdWU/bS52YWx1ZTpmLnZhbHVlLGJvcmRlckJvdHRvbUNvbG9yOlwiXCJ9O3JldHVyblwiaG9yaXpvbnRhbFwiIT09Zy52YWx1ZXx8Yi52YWx1ZXx8KGUuYm9yZGVyQm90dG9tQ29sb3I9Yy52YWx1ZT9vLnByb3BzLmFjdGl2ZVRleHRDb2xvcj9tLnZhbHVlOlwiXCI6XCJ0cmFuc3BhcmVudFwiKSxlfSkpO3JldHVybiBfKCgoKT0+e3Uoe2luZGV4OmUuaW5kZXgsaW5kZXhQYXRoOnMsYWN0aXZlOmN9KSxvLm1ldGhvZHMuYWRkTWVudUl0ZW0oe2luZGV4OmUuaW5kZXgsaW5kZXhQYXRoOnMsYWN0aXZlOmN9KX0pKSxPKCgoKT0+e2Qoe2luZGV4OmUuaW5kZXgsaW5kZXhQYXRoOnMsYWN0aXZlOmN9KSxvLm1ldGhvZHMucmVtb3ZlTWVudUl0ZW0oe2luZGV4OmUuaW5kZXgsaW5kZXhQYXRoOnMsYWN0aXZlOmN9KX0pKSx7cGFyZW50TWVudTppLHJvb3RNZW51Om8sc2xvdHM6YSxwYWRkaW5nU3R5bGU6cixpdGVtU3R5bGU6eSxiYWNrZ3JvdW5kQ29sb3I6aCxhY3RpdmU6YyxoYW5kbGVDbGljazooKT0+e2UuZGlzYWJsZWR8fChvLnJvb3RNZW51RW1pdChcIm1lbnVJdGVtOml0ZW0tY2xpY2tcIix7aW5kZXg6ZS5pbmRleCxpbmRleFBhdGg6cyxyb3V0ZTplLnJvdXRlfSksdChcImNsaWNrXCIse2luZGV4OmUuaW5kZXgsaW5kZXhQYXRoOnMudmFsdWV9KSl9LG9uTW91c2VFbnRlcjooKT0+eyhcImhvcml6b250YWxcIiE9PWcudmFsdWV8fG8ucHJvcHMuYmFja2dyb3VuZENvbG9yKSYmKG4udm5vZGUuZWwuc3R5bGUuYmFja2dyb3VuZENvbG9yPXAudmFsdWUpfSxvbk1vdXNlTGVhdmU6KCk9PnsoXCJob3Jpem9udGFsXCIhPT1nLnZhbHVlfHxvLnByb3BzLmJhY2tncm91bmRDb2xvcikmJihuLnZub2RlLmVsLnN0eWxlLmJhY2tncm91bmRDb2xvcj1oLnZhbHVlKX19fX0pO2NvbnN0IFByPXtzdHlsZTp7cG9zaXRpb246XCJhYnNvbHV0ZVwiLGxlZnQ6XCIwXCIsdG9wOlwiMFwiLGhlaWdodDpcIjEwMCVcIix3aWR0aDpcIjEwMCVcIixkaXNwbGF5OlwiaW5saW5lLWJsb2NrXCIsXCJib3gtc2l6aW5nXCI6XCJib3JkZXItYm94XCIscGFkZGluZzpcIjAgMjBweFwifX07T3IucmVuZGVyPWZ1bmN0aW9uKGUsdCxsLG8scix1KXtjb25zdCBjPVAoXCJlbC10b29sdGlwXCIpO3JldHVybiBhKCksbihcImxpXCIse2NsYXNzOltcImVsLW1lbnUtaXRlbVwiLHtcImlzLWFjdGl2ZVwiOmUuYWN0aXZlLFwiaXMtZGlzYWJsZWRcIjplLmRpc2FibGVkfV0scm9sZTpcIm1lbnVpdGVtXCIsdGFiaW5kZXg6XCItMVwiLHN0eWxlOltlLnBhZGRpbmdTdHlsZSxlLml0ZW1TdHlsZSx7YmFja2dyb3VuZENvbG9yOmUuYmFja2dyb3VuZENvbG9yfV0sb25DbGljazp0WzFdfHwodFsxXT0oLi4udCk9PmUuaGFuZGxlQ2xpY2soLi4udCkpLG9uTW91c2VlbnRlcjp0WzJdfHwodFsyXT0oLi4udCk9PmUub25Nb3VzZUVudGVyKC4uLnQpKSxvbkZvY3VzOnRbM118fCh0WzNdPSguLi50KT0+ZS5vbk1vdXNlRW50ZXIoLi4udCkpLG9uQmx1cjp0WzRdfHwodFs0XT0oLi4udCk9PmUub25Nb3VzZUxlYXZlKC4uLnQpKSxvbk1vdXNlbGVhdmU6dFs1XXx8KHRbNV09KC4uLnQpPT5lLm9uTW91c2VMZWF2ZSguLi50KSl9LFtcIkVsTWVudVwiPT09ZS5wYXJlbnRNZW51LnR5cGUubmFtZSYmZS5yb290TWVudS5wcm9wcy5jb2xsYXBzZSYmZS5zbG90cy50aXRsZT8oYSgpLG4oYyx7a2V5OjAsZWZmZWN0OlwiZGFya1wiLHBsYWNlbWVudDpcInJpZ2h0XCJ9LHtjb250ZW50OmkoKCgpPT5bZChlLiRzbG90cyxcInRpdGxlXCIpXSkpLGRlZmF1bHQ6aSgoKCk9PltzKFwiZGl2XCIsUHIsW2QoZS4kc2xvdHMsXCJkZWZhdWx0XCIpXSldKSksXzozfSkpOihhKCksbihFLHtrZXk6MX0sW2QoZS4kc2xvdHMsXCJkZWZhdWx0XCIpLGQoZS4kc2xvdHMsXCJ0aXRsZVwiKV0sNjQpKV0sMzgpfSxPci5fX2ZpbGU9XCJwYWNrYWdlcy9tZW51L3NyYy9tZW51SXRlbS52dWVcIixPci5pbnN0YWxsPWU9PntlLmNvbXBvbmVudChPci5uYW1lLE9yKX07dmFyIFZyPWUoe25hbWU6XCJFbE1lbnVJdGVtR3JvdXBcIixwcm9wczp7fX0pO1ZyLnJlbmRlcj1mdW5jdGlvbihlLHQsbCxvLGkscil7cmV0dXJuIGEoKSxuKFwiZGl2XCIsbnVsbCxbZChlLiRzbG90cyxcImRlZmF1bHRcIildKX0sVnIuX19maWxlPVwicGFja2FnZXMvbWVudS9zcmMvbWVudUl0ZW1Hcm91cC52dWVcIixWci5pbnN0YWxsPWU9PntlLmNvbXBvbmVudChWci5uYW1lLFZyKX07Y29uc3QgSXI9e3N1Y2Nlc3M6XCJzdWNjZXNzXCIsaW5mbzpcImluZm9cIix3YXJuaW5nOlwid2FybmluZ1wiLGVycm9yOlwiZXJyb3JcIn07dmFyIEFyPWUoe25hbWU6XCJFbE1lc3NhZ2VcIixwcm9wczp7Y3VzdG9tQ2xhc3M6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJcIn0sY2VudGVyOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMX0sZGFuZ2Vyb3VzbHlVc2VIVE1MU3RyaW5nOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMX0sZHVyYXRpb246e3R5cGU6TnVtYmVyLGRlZmF1bHQ6M2UzfSxpY29uQ2xhc3M6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJcIn0saWQ6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJcIn0sbWVzc2FnZTp7dHlwZTpbU3RyaW5nLE9iamVjdF0sZGVmYXVsdDpcIlwifSxvbkNsb3NlOnt0eXBlOkZ1bmN0aW9uLHJlcXVpcmVkOiEwfSxzaG93Q2xvc2U6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiExfSx0eXBlOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiaW5mb1wifSxvZmZzZXQ6e3R5cGU6TnVtYmVyLGRlZmF1bHQ6MjB9LHpJbmRleDp7dHlwZTpOdW1iZXIsZGVmYXVsdDowfX0sc2V0dXA6ZT0+KHt0eXBlQ2xhc3M6bCgoKCk9Pntjb25zdCB0PWUudHlwZTtyZXR1cm4gdCYmSXJbdF0/XCJlbC1tZXNzYWdlX19pY29uIGVsLWljb24tXCIrSXJbdF06XCJcIn0pKSxjdXN0b21TdHlsZTpsKCgoKT0+KHt0b3A6ZS5vZmZzZXQrXCJweFwiLHpJbmRleDplLnpJbmRleH0pKSksdmlzaWJsZTp0KCExKSxjbG9zZWQ6dCghMSksdGltZXI6dChudWxsKX0pLHdhdGNoOntjbG9zZWQoZSl7ZSYmKHRoaXMudmlzaWJsZT0hMSxsdCh0aGlzLiRlbCxcInRyYW5zaXRpb25lbmRcIix0aGlzLmRlc3Ryb3lFbGVtZW50KSl9fSxtb3VudGVkKCl7dGhpcy5zdGFydFRpbWVyKCksdGhpcy52aXNpYmxlPSEwLGx0KGRvY3VtZW50LFwia2V5ZG93blwiLHRoaXMua2V5ZG93bil9LGJlZm9yZVVubW91bnQoKXthdChkb2N1bWVudCxcImtleWRvd25cIix0aGlzLmtleWRvd24pfSxtZXRob2RzOntkZXN0cm95RWxlbWVudCgpe3RoaXMudmlzaWJsZT0hMSxhdCh0aGlzLiRlbCxcInRyYW5zaXRpb25lbmRcIix0aGlzLmRlc3Ryb3lFbGVtZW50KSx0aGlzLm9uQ2xvc2UoKX0sc3RhcnRUaW1lcigpe3RoaXMuZHVyYXRpb24+MCYmKHRoaXMudGltZXI9c2V0VGltZW91dCgoKCk9Pnt0aGlzLmNsb3NlZHx8dGhpcy5jbG9zZSgpfSksdGhpcy5kdXJhdGlvbikpfSxjbGVhclRpbWVyKCl7Y2xlYXJUaW1lb3V0KHRoaXMudGltZXIpLHRoaXMudGltZXI9bnVsbH0sY2xvc2UoKXt0aGlzLmNsb3NlZD0hMCx0aGlzLnRpbWVyPW51bGx9LGtleWRvd24oe2NvZGU6ZX0pe2U9PT1mdC5lc2M/dGhpcy5jbG9zZWR8fHRoaXMuY2xvc2UoKTp0aGlzLnN0YXJ0VGltZXIoKX19fSk7Y29uc3QgQnI9e2tleTowLGNsYXNzOlwiZWwtbWVzc2FnZV9fY29udGVudFwifTtsZXQgTHI7QXIucmVuZGVyPWZ1bmN0aW9uKGUsdCxsLGMsdixtKXtyZXR1cm4gYSgpLG4obyx7bmFtZTpcImVsLW1lc3NhZ2UtZmFkZVwifSx7ZGVmYXVsdDppKCgoKT0+W3IocyhcImRpdlwiLHtpZDplLmlkLGNsYXNzOltcImVsLW1lc3NhZ2VcIixlLnR5cGUmJiFlLmljb25DbGFzcz9cImVsLW1lc3NhZ2UtLVwiK2UudHlwZTpcIlwiLGUuY2VudGVyP1wiaXMtY2VudGVyXCI6XCJcIixlLnNob3dDbG9zZT9cImlzLWNsb3NhYmxlXCI6XCJcIixlLmN1c3RvbUNsYXNzXSxzdHlsZTplLmN1c3RvbVN0eWxlLHJvbGU6XCJhbGVydFwiLG9uTW91c2VlbnRlcjp0WzJdfHwodFsyXT0oLi4udCk9PmUuY2xlYXJUaW1lciguLi50KSksb25Nb3VzZWxlYXZlOnRbM118fCh0WzNdPSguLi50KT0+ZS5zdGFydFRpbWVyKC4uLnQpKX0sW2UudHlwZXx8ZS5pY29uQ2xhc3M/KGEoKSxuKFwiaVwiLHtrZXk6MCxjbGFzczpbZS50eXBlQ2xhc3MsZS5pY29uQ2xhc3NdfSxudWxsLDIpKTp1KFwidi1pZlwiLCEwKSxkKGUuJHNsb3RzLFwiZGVmYXVsdFwiLHt9LCgoKT0+W2UuZGFuZ2Vyb3VzbHlVc2VIVE1MU3RyaW5nPyhhKCksbihFLHtrZXk6MX0sW3UoXCIgQ2F1dGlvbiBoZXJlLCBtZXNzYWdlIGNvdWxkJ3ZlIGJlZW4gY29tcHJvbWlzZWQsIG5ldmVyIHVzZSB1c2VyJ3MgaW5wdXQgYXMgbWVzc2FnZSBcIiksdShcIiAgZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIFwiKSxzKFwicFwiLHtjbGFzczpcImVsLW1lc3NhZ2VfX2NvbnRlbnRcIixpbm5lckhUTUw6ZS5tZXNzYWdlfSxudWxsLDgsW1wiaW5uZXJIVE1MXCJdKV0sNjQpKTooYSgpLG4oXCJwXCIsQnIscChlLm1lc3NhZ2UpLDEpKV0pKSxlLnNob3dDbG9zZT8oYSgpLG4oXCJkaXZcIix7a2V5OjEsY2xhc3M6XCJlbC1tZXNzYWdlX19jbG9zZUJ0biBlbC1pY29uLWNsb3NlXCIsb25DbGljazp0WzFdfHwodFsxXT1UKCgoLi4udCk9PmUuY2xvc2UoLi4udCkpLFtcInN0b3BcIl0pKX0pKTp1KFwidi1pZlwiLCEwKV0sNDYsW1wiaWRcIl0pLFtbaCxlLnZpc2libGVdXSldKSksXzozfSl9LEFyLl9fZmlsZT1cInBhY2thZ2VzL21lc3NhZ2Uvc3JjL2luZGV4LnZ1ZVwiO2NvbnN0IHpyPVtdO2xldCBGcj0xO2NvbnN0ICRyPWZ1bmN0aW9uKGU9e30pe2lmKHplKXJldHVybjtcInN0cmluZ1wiPT10eXBlb2YgZSYmKGU9e21lc3NhZ2U6ZX0pO2xldCB0PWUsbD1lLm9mZnNldHx8MjA7enIuZm9yRWFjaCgoKHt2bTplfSk9PntsKz0oZS5lbC5vZmZzZXRIZWlnaHR8fDApKzE2fSkpLGwrPTE2O2NvbnN0IGE9XCJtZXNzYWdlX1wiK0ZyKyssbj10Lm9uQ2xvc2U7dD1PYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sdCkse29uQ2xvc2U6KCk9PnshZnVuY3Rpb24oZSx0KXtjb25zdCBsPXpyLmZpbmRJbmRleCgoKHt2bTp0fSk9Pntjb25zdHtpZDpsfT10LmNvbXBvbmVudC5wcm9wcztyZXR1cm4gZT09PWx9KSk7aWYoLTE9PT1sKXJldHVybjtjb25zdHt2bTphLCRlbDpufT16cltsXTtpZighYSlyZXR1cm47bnVsbD09dHx8dChhKTtjb25zdCBvPWEuZWwub2Zmc2V0SGVpZ2h0O1UobnVsbCxuKSxrKCgoKT0+e2RvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQobil9KSksenIuc3BsaWNlKGwsMSk7Y29uc3QgaT16ci5sZW5ndGg7aWYoaTwxKXJldHVybjtmb3IobGV0IGU9bDtlPGk7ZSsrKXtjb25zdCB0PXBhcnNlSW50KHpyW2VdLnZtLmVsLnN0eWxlLnRvcCwxMCktby0xNjt6cltlXS52bS5jb21wb25lbnQucHJvcHMub2Zmc2V0PXQsenJbZV0udm0uY29tcG9uZW50LnByb3BzLnZlcnRPZmZzZXQ9dH19KGEsbil9LG9mZnNldDpsLGlkOmEsekluZGV4OmdsLm5leHRaSW5kZXgoKX0pO2NvbnN0IG89ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtvLmNsYXNzTmFtZT1cImNvbnRhaW5lcl9cIithO2NvbnN0IGk9dC5tZXNzYWdlO3JldHVybiBMcj1zKEFyLHQsRyh0Lm1lc3NhZ2UpP3tkZWZhdWx0OigpPT5pfTpudWxsKSxVKExyLG8pLHpyLnB1c2goe3ZtOkxyLCRlbDpvfSksZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChvKSx7Y2xvc2U6dC5vbkNsb3NlfX07bGV0IFJyO1tcInN1Y2Nlc3NcIixcIndhcm5pbmdcIixcImluZm9cIixcImVycm9yXCJdLmZvckVhY2goKGU9PnskcltlXT10PT4oXCJzdHJpbmdcIj09dHlwZW9mIHQ/dD17bWVzc2FnZTp0LHR5cGU6ZX06dC50eXBlPWUsJHIodCkpfSkpLCRyLmNsb3NlQWxsPWZ1bmN0aW9uKCl7Zm9yKGxldCBlPXpyLmxlbmd0aC0xO2U+PTA7ZS0tKXt6cltlXS52bS5jb21wb25lbnQuY3R4LmNsb3NlKCl9fSwkci5pbnN0YWxsPWU9PntlLmNvbmZpZy5nbG9iYWxQcm9wZXJ0aWVzLiRtZXNzYWdlPSRyfTtjbGFzcyBIcntjb25zdHJ1Y3RvcihlLHQsbCl7aWYodGhpcy5kaWFsb2dOb2RlPWUsdGhpcy5mb2N1c0FmdGVyQ2xvc2VkPXQsdGhpcy5mb2N1c0ZpcnN0PWwsdGhpcy5sYXN0Rm9jdXM9bnVsbCxudWxsPT09dGhpcy5kaWFsb2dOb2RlfHxcImRpYWxvZ1wiIT09dGhpcy5kaWFsb2dOb2RlLmdldEF0dHJpYnV0ZShcInJvbGVcIikpdGhyb3cgbmV3IEVycm9yKFwiRGlhbG9nKCkgcmVxdWlyZXMgYSBET00gZWxlbWVudCB3aXRoIEFSSUEgcm9sZSBvZiBkaWFsb2cuXCIpO3RoaXMuZm9jdXNBZnRlckNsb3NlZD1cInN0cmluZ1wiPT10eXBlb2YgdD9kb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0KTpcIm9iamVjdFwiPT10eXBlb2YgdD90Om51bGwsdGhpcy5mb2N1c0ZpcnN0PVwic3RyaW5nXCI9PXR5cGVvZiBsP2RvY3VtZW50LmdldEVsZW1lbnRCeUlkKGwpOlwib2JqZWN0XCI9PXR5cGVvZiBsP2w6bnVsbCx0aGlzLmZvY3VzRmlyc3Q/dGhpcy5mb2N1c0ZpcnN0LmZvY3VzKCk6eHQuZm9jdXNGaXJzdERlc2NlbmRhbnQodGhpcy5kaWFsb2dOb2RlKSx0aGlzLmxhc3RGb2N1cz1kb2N1bWVudC5hY3RpdmVFbGVtZW50LFJyPWU9Pnt0aGlzLnRyYXBGb2N1cyhlKX0sdGhpcy5hZGRMaXN0ZW5lcnMoKX1hZGRMaXN0ZW5lcnMoKXtkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiZm9jdXNcIixSciwhMCl9cmVtb3ZlTGlzdGVuZXJzKCl7ZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImZvY3VzXCIsUnIsITApfWNsb3NlRGlhbG9nKCl7dGhpcy5yZW1vdmVMaXN0ZW5lcnMoKSx0aGlzLmZvY3VzQWZ0ZXJDbG9zZWQmJnNldFRpbWVvdXQoKCgpPT57dGhpcy5mb2N1c0FmdGVyQ2xvc2VkLmZvY3VzKCl9KSl9dHJhcEZvY3VzKGUpe3h0Lklnbm9yZVV0aWxGb2N1c0NoYW5nZXN8fCh0aGlzLmRpYWxvZ05vZGUuY29udGFpbnMoZS50YXJnZXQpP3RoaXMubGFzdEZvY3VzPWUudGFyZ2V0Oih4dC5mb2N1c0ZpcnN0RGVzY2VuZGFudCh0aGlzLmRpYWxvZ05vZGUpLHRoaXMubGFzdEZvY3VzPT09ZG9jdW1lbnQuYWN0aXZlRWxlbWVudCYmeHQuZm9jdXNMYXN0RGVzY2VuZGFudCh0aGlzLmRpYWxvZ05vZGUpLHRoaXMubGFzdEZvY3VzPWRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpKX19bGV0IFdyLGpyPTE7bGV0IEtyO2NvbnN0IFlyPXtzdWNjZXNzOlwic3VjY2Vzc1wiLGluZm86XCJpbmZvXCIsd2FybmluZzpcIndhcm5pbmdcIixlcnJvcjpcImVycm9yXCJ9O3ZhciBxcj1lKHtuYW1lOlwiRWxNZXNzYWdlQm94XCIsY29tcG9uZW50czp7RWxCdXR0b246JGwsRWxJbnB1dDpXdH0scHJvcHM6e29wZW5EZWxheTp7dHlwZTpOdW1iZXIsZGVmYXVsdDowfSxjbG9zZURlbGF5Ont0eXBlOk51bWJlcixkZWZhdWx0OjB9LHpJbmRleDpOdW1iZXIsbW9kYWxGYWRlOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMH0sbW9kYWxDbGFzczp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIlwifSxtb2RhbEFwcGVuZFRvQm9keTp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITF9LG1vZGFsOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMH0sbG9ja1Njcm9sbDp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITB9LHNob3dDbG9zZTp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITB9LGNsb3NlT25DbGlja01vZGFsOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMH0sY2xvc2VPblByZXNzRXNjYXBlOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMH0sY2xvc2VPbkhhc2hDaGFuZ2U6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiEwfSxjZW50ZXI6e2RlZmF1bHQ6ITEsdHlwZTpCb29sZWFufSxyb3VuZEJ1dHRvbjp7ZGVmYXVsdDohMSx0eXBlOkJvb2xlYW59fSxzZXR1cChlKXtsZXQgdDtjb25zdCBhPSgoZSx0LGw9XCJyb290XCIpPT57bGV0IGEsbj0hMSxvPSExLGk9bnVsbCxyPW51bGw7Y29uc3Qgcz12KCksdT1mKHtvcGVuZWQ6ITEsYm9keVBhZGRpbmdSaWdodDpudWxsLGNvbXB1dGVkQm9keVBhZGRpbmdSaWdodDowLHdpdGhvdXRIaWRkZW5DbGFzczohMCxyZW5kZXJlZDohMSx2aXNpYmxlOiExfSk7WCgoKCk9Pntjb25zdHtoYW5kbGVDbG9zZTp0LGhhbmRsZUFjdGlvbjpsfT1zLnByb3h5O2E9XCJwb3B1cC1cIitqcisrLGdsLnJlZ2lzdGVyKGEsT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LEMoZSkpLHtjbG9zZTpwLGhhbmRsZUNsb3NlOnQsaGFuZGxlQWN0aW9uOmx9KSl9KSksTygoKCk9PntnbC5kZXJlZ2lzdGVyKGEpLGdsLmNsb3NlTW9kYWwoYSksbSgpfSkpO2NvbnN0IGQ9dD0+e2lmKHplKXJldHVybjtpZih1Lm9wZW5lZClyZXR1cm47bj0hMDtjb25zdCBpPXMucmVmc1tsXSxyPXQubW9kYWwsZD10LnpJbmRleDtpZihkJiYoZ2wuekluZGV4PWQpLHImJihvJiYoZ2wuY2xvc2VNb2RhbChhKSxvPSExKSxnbC5vcGVuTW9kYWwoYSxnbC5uZXh0WkluZGV4KCksZS5tb2RhbEFwcGVuZFRvQm9keT92b2lkIDA6aSx0Lm1vZGFsQ2xhc3MsdC5tb2RhbEZhZGUpLHQubG9ja1Njcm9sbCkpe3Uud2l0aG91dEhpZGRlbkNsYXNzPSFudChkb2N1bWVudC5ib2R5LFwiZWwtcG9wdXAtcGFyZW50LS1oaWRkZW5cIiksdS53aXRob3V0SGlkZGVuQ2xhc3MmJih1LmJvZHlQYWRkaW5nUmlnaHQ9ZG9jdW1lbnQuYm9keS5zdHlsZS5wYWRkaW5nUmlnaHQsdS5jb21wdXRlZEJvZHlQYWRkaW5nUmlnaHQ9cGFyc2VJbnQocnQoZG9jdW1lbnQuYm9keSxcInBhZGRpbmdSaWdodFwiKSwxMCkpLFdyPWh0KCk7Y29uc3QgZT1kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0PGRvY3VtZW50LmJvZHkuc2Nyb2xsSGVpZ2h0LHQ9cnQoZG9jdW1lbnQuYm9keSxcIm92ZXJmbG93WVwiKTtXcj4wJiYoZXx8XCJzY3JvbGxcIj09PXQpJiZ1LndpdGhvdXRIaWRkZW5DbGFzcyYmKGRvY3VtZW50LmJvZHkuc3R5bGUucGFkZGluZ1JpZ2h0PXUuY29tcHV0ZWRCb2R5UGFkZGluZ1JpZ2h0K1dyK1wicHhcIiksb3QoZG9jdW1lbnQuYm9keSxcImVsLXBvcHVwLXBhcmVudC0taGlkZGVuXCIpfVwic3RhdGljXCI9PT1nZXRDb21wdXRlZFN0eWxlKGkpLnBvc2l0aW9uJiYoaS5zdHlsZS5wb3NpdGlvbj1cImFic29sdXRlXCIpLGkuc3R5bGUuekluZGV4PVN0cmluZyhnbC5uZXh0WkluZGV4KCkpLHUub3BlbmVkPSEwLGgoKX0sYz1mdW5jdGlvbih0KXt1LnJlbmRlcmVkfHwodS5yZW5kZXJlZD0hMCk7Y29uc3QgbD1PYmplY3QuYXNzaWduKHt9LGV8fHMucHJveHksdCk7aSYmKGNsZWFyVGltZW91dChpKSxpPW51bGwpLGNsZWFyVGltZW91dChyKTtjb25zdCBhPU51bWJlcihsLm9wZW5EZWxheSk7YT4wP3I9c2V0VGltZW91dCgoKCk9PntyPW51bGwsZChsKX0pLGEpOmQobCl9LHA9KCk9PntudWxsIT09ciYmKGNsZWFyVGltZW91dChyKSxyPW51bGwpLGNsZWFyVGltZW91dChpKTtjb25zdCBsPU51bWJlcihlLmNsb3NlRGVsYXkpO2w+MD9pPXNldFRpbWVvdXQoKCgpPT57aT1udWxsLHQoKX0pLGwpOnQoKX0saD0oKT0+e249ITF9LG09KCk9PntlLm1vZGFsJiZ1LndpdGhvdXRIaWRkZW5DbGFzcyYmKGRvY3VtZW50LmJvZHkuc3R5bGUucGFkZGluZ1JpZ2h0PXUuYm9keVBhZGRpbmdSaWdodCxpdChkb2N1bWVudC5ib2R5LFwiZWwtcG9wdXAtcGFyZW50LS1oaWRkZW5cIikpLHUud2l0aG91dEhpZGRlbkNsYXNzPSEwfTtyZXR1cm4geSgoKCk9PnUudmlzaWJsZSksKGU9Pm5yKHZvaWQgMCx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbiooKXtpZihlKXtpZihuKXJldHVybjt1LnJlbmRlcmVkfHwodS5yZW5kZXJlZD0hMCx5aWVsZCBrKCkpLGMoKX1lbHNlIHAoKX0pKSkpLHtzdGF0ZTp1LG9wZW46YyxjbG9zZTpwLGRvQWZ0ZXJDbG9zZTooKT0+e2dsLmNsb3NlTW9kYWwoYSksbz0hMX0sdXBkYXRlQ2xvc2luZ0ZsYWc6ZT0+e289ZX0scmVzdG9yZUJvZHlTdHlsZTptfX0pKGUscyksbj1mKHt1aWQ6MSx0aXRsZTp2b2lkIDAsbWVzc2FnZTpcIlwiLHR5cGU6XCJcIixpY29uQ2xhc3M6XCJcIixjdXN0b21DbGFzczpcIlwiLHNob3dJbnB1dDohMSxpbnB1dFZhbHVlOm51bGwsaW5wdXRQbGFjZWhvbGRlcjpcIlwiLGlucHV0VHlwZTpcInRleHRcIixpbnB1dFBhdHRlcm46bnVsbCxpbnB1dFZhbGlkYXRvcjpudWxsLGlucHV0RXJyb3JNZXNzYWdlOlwiXCIsc2hvd0NvbmZpcm1CdXR0b246ITAsc2hvd0NhbmNlbEJ1dHRvbjohMSxhY3Rpb246XCJcIixjb25maXJtQnV0dG9uVGV4dDpcIlwiLGNhbmNlbEJ1dHRvblRleHQ6XCJcIixjb25maXJtQnV0dG9uTG9hZGluZzohMSxjYW5jZWxCdXR0b25Mb2FkaW5nOiExLGNvbmZpcm1CdXR0b25DbGFzczpcIlwiLGNvbmZpcm1CdXR0b25EaXNhYmxlZDohMSxjYW5jZWxCdXR0b25DbGFzczpcIlwiLGVkaXRvckVycm9yTWVzc2FnZTpudWxsLGNhbGxiYWNrOm51bGwsZGFuZ2Vyb3VzbHlVc2VIVE1MU3RyaW5nOiExLGZvY3VzQWZ0ZXJDbG9zZWQ6bnVsbCxpc09uQ29tcG9zaXRpb246ITEsZGlzdGluZ3Vpc2hDYW5jZWxBbmRDbG9zZTohMSx0eXBlJDpcIlwiLHZpc2libGU6ITEsdmFsaWRhdGVFcnJvcjohMX0pLG89bCgoKCk9Pm4uaWNvbkNsYXNzfHwobi50eXBlJiZZcltuLnR5cGVdP1wiZWwtaWNvbi1cIitZcltuLnR5cGVdOlwiXCIpKSksaT1sKCgoKT0+ISFuLm1lc3NhZ2UpKSxyPWwoKCgpPT5cImVsLWJ1dHRvbi0tcHJpbWFyeSBcIituLmNvbmZpcm1CdXR0b25DbGFzcykpO2Z1bmN0aW9uIHMoKXtuLnZpc2libGUmJihuLnZpc2libGU9ITEsYS51cGRhdGVDbG9zaW5nRmxhZyghMCksS3IuY2xvc2VEaWFsb2coKSxlLmxvY2tTY3JvbGwmJnNldFRpbWVvdXQoYS5yZXN0b3JlQm9keVN0eWxlLDIwMCksYS5zdGF0ZS5vcGVuZWQ9ITEsYS5kb0FmdGVyQ2xvc2UoKSxzZXRUaW1lb3V0KCgoKT0+e24uYWN0aW9uJiZuLmNhbGxiYWNrKG4uYWN0aW9uLG4pfSkpKX15KCgoKT0+bi5pbnB1dFZhbHVlKSwoZT0+bnIodGhpcyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbiooKXt5aWVsZCBrKCksXCJwcm9tcHRcIj09PW4udHlwZSQmJm51bGwhPT1lJiZjKCl9KSkpLHtpbW1lZGlhdGU6ITB9KSx5KCgoKT0+bi52aXNpYmxlKSwoZT0+e2Euc3RhdGUudmlzaWJsZT1lLGUmJihuLnVpZCsrLFwiYWxlcnRcIiE9PW4udHlwZSQmJlwiY29uZmlybVwiIT09bi50eXBlJHx8aygpLnRoZW4oKCgpPT57dC5yZWZzLmNvbmZpcm0uJGVsLmZvY3VzKCl9KSksbi5mb2N1c0FmdGVyQ2xvc2VkPWRvY3VtZW50LmFjdGl2ZUVsZW1lbnQsS3I9bmV3IEhyKHQudm5vZGUuZWwsbi5mb2N1c0FmdGVyQ2xvc2VkLHUoKSkpLFwicHJvbXB0XCI9PT1uLnR5cGUkJiYoZT9rKCkudGhlbigoKCk9Pnt0LnJlZnMuaW5wdXQmJnQucmVmcy5pbnB1dC4kZWwmJnAoKS5mb2N1cygpfSkpOihuLmVkaXRvckVycm9yTWVzc2FnZT1cIlwiLG4udmFsaWRhdGVFcnJvcj0hMSkpfSkpLFgoKCgpPT57dD12KCksdC5zZXR1cEluc3RhbGw9e3N0YXRlOm4sZG9DbG9zZTpzfX0pKSxfKCgoKT0+bnIodGhpcyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbiooKXt5aWVsZCBrKCksZS5jbG9zZU9uSGFzaENoYW5nZSYmbHQod2luZG93LFwiaGFzaGNoYW5nZVwiLGEuY2xvc2UpfSkpKSksTygoKCk9PntlLmNsb3NlT25IYXNoQ2hhbmdlJiZhdCh3aW5kb3csXCJoYXNoY2hhbmdlXCIsYS5jbG9zZSksc2V0VGltZW91dCgoKCk9PntLci5jbG9zZURpYWxvZygpfSkpfSkpO2NvbnN0IHU9KCk9Pntjb25zdCBlPXQudm5vZGUuZWwucXVlcnlTZWxlY3RvcihcIi5lbC1tZXNzYWdlLWJveF9fYnRucyAuZWwtYnV0dG9uXCIpLGw9dC52bm9kZS5lbC5xdWVyeVNlbGVjdG9yKFwiLmVsLW1lc3NhZ2UtYm94X19idG5zIC5lbC1tZXNzYWdlLWJveF9fdGl0bGVcIik7cmV0dXJuIGV8fGx9LGQ9ZT0+eyhcInByb21wdFwiIT09bi50eXBlJHx8XCJjb25maXJtXCIhPT1lfHxjKCkpJiYobi5hY3Rpb249ZSxcImZ1bmN0aW9uXCI9PXR5cGVvZiB0LnNldHVwSW5zdGFsbC5zdGF0ZS5iZWZvcmVDbG9zZT8odC5zZXR1cEluc3RhbGwuc3RhdGUuY2xvc2U9ZnVuY3Rpb24oKXtjb25zdCBlPW4udWlkO3JldHVybigpPT5ucih0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKigpe3lpZWxkIGsoKSxlPT09bi51aWQmJnMoKX0pKX0oKSx0LnNldHVwSW5zdGFsbC5zdGF0ZS5iZWZvcmVDbG9zZShlLG4sYS5jbG9zZSkpOnMoKSl9LGM9KCk9PntpZihcInByb21wdFwiPT09bi50eXBlJCl7Y29uc3QgZT1uLmlucHV0UGF0dGVybjtpZihlJiYhZS50ZXN0KG4uaW5wdXRWYWx1ZXx8XCJcIikpcmV0dXJuIG4uZWRpdG9yRXJyb3JNZXNzYWdlPW4uaW5wdXRFcnJvck1lc3NhZ2V8fHFsKFwiZWwubWVzc2FnZWJveC5lcnJvclwiKSxuLnZhbGlkYXRlRXJyb3I9ITAsITE7Y29uc3QgdD1uLmlucHV0VmFsaWRhdG9yO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIHQpe2NvbnN0IGU9dChuLmlucHV0VmFsdWUpO2lmKCExPT09ZSlyZXR1cm4gbi5lZGl0b3JFcnJvck1lc3NhZ2U9bi5pbnB1dEVycm9yTWVzc2FnZXx8cWwoXCJlbC5tZXNzYWdlYm94LmVycm9yXCIpLG4udmFsaWRhdGVFcnJvcj0hMCwhMTtpZihcInN0cmluZ1wiPT10eXBlb2YgZSlyZXR1cm4gbi5lZGl0b3JFcnJvck1lc3NhZ2U9ZSxuLnZhbGlkYXRlRXJyb3I9ITAsITF9fXJldHVybiBuLmVkaXRvckVycm9yTWVzc2FnZT1cIlwiLG4udmFsaWRhdGVFcnJvcj0hMSwhMH0scD0oKT0+e2NvbnN0IGU9dC5yZWZzLmlucHV0LiRyZWZzO3JldHVybiBlLmlucHV0fHxlLnRleHRhcmVhfTtyZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LEMobikpLHtoYXNNZXNzYWdlOmksaWNvbjpvLGNvbmZpcm1CdXR0b25DbGFzc2VzOnIsaGFuZGxlV3JhcHBlckNsaWNrOigpPT57ZS5jbG9zZU9uQ2xpY2tNb2RhbCYmZChuLmRpc3Rpbmd1aXNoQ2FuY2VsQW5kQ2xvc2U/XCJjbG9zZVwiOlwiY2FuY2VsXCIpfSxoYW5kbGVJbnB1dEVudGVyOigpPT57aWYoXCJ0ZXh0YXJlYVwiIT09bi5pbnB1dFR5cGUpcmV0dXJuIGQoXCJjb25maXJtXCIpfSxoYW5kbGVBY3Rpb246ZCxoYW5kbGVDbG9zZTooKT0+e2QoXCJjbG9zZVwiKX0sdDpxbCxkb0Nsb3NlOnN9KX19KTtjb25zdCBVcj17a2V5OjAsY2xhc3M6XCJlbC1tZXNzYWdlLWJveF9faGVhZGVyXCJ9LEdyPXtjbGFzczpcImVsLW1lc3NhZ2UtYm94X190aXRsZVwifSxYcj1zKFwiaVwiLHtjbGFzczpcImVsLW1lc3NhZ2UtYm94X19jbG9zZSBlbC1pY29uLWNsb3NlXCJ9LG51bGwsLTEpLFFyPXtjbGFzczpcImVsLW1lc3NhZ2UtYm94X19jb250ZW50XCJ9LFpyPXtjbGFzczpcImVsLW1lc3NhZ2UtYm94X19jb250YWluZXJcIn0sSnI9e2tleToxLGNsYXNzOlwiZWwtbWVzc2FnZS1ib3hfX21lc3NhZ2VcIn0sZXM9e2tleTowfSx0cz17Y2xhc3M6XCJlbC1tZXNzYWdlLWJveF9faW5wdXRcIn0sbHM9e2NsYXNzOlwiZWwtbWVzc2FnZS1ib3hfX2J0bnNcIn07bGV0IGFzLG5zO3FyLnJlbmRlcj1mdW5jdGlvbihlLHQsbCx2LG0sZil7Y29uc3QgZz1QKFwiZWwtaW5wdXRcIiksYj1QKFwiZWwtYnV0dG9uXCIpO3JldHVybiBhKCksbihvLHtuYW1lOlwibXNnYm94LWZhZGVcIn0se2RlZmF1bHQ6aSgoKCk9PltyKHMoXCJkaXZcIix7cmVmOlwicm9vdFwiLFwiYXJpYS1sYWJlbFwiOmUudGl0bGV8fFwiZGlhbG9nXCIsY2xhc3M6XCJlbC1tZXNzYWdlLWJveF9fd3JhcHBlclwiLHRhYmluZGV4OlwiLTFcIixyb2xlOlwiZGlhbG9nXCIsXCJhcmlhLW1vZGFsXCI6XCJ0cnVlXCIsb25DbGljazp0WzhdfHwodFs4XT1UKCgoLi4udCk9PmUuaGFuZGxlV3JhcHBlckNsaWNrKC4uLnQpKSxbXCJzZWxmXCJdKSl9LFtzKFwiZGl2XCIse2NsYXNzOltcImVsLW1lc3NhZ2UtYm94XCIsW2UuY3VzdG9tQ2xhc3MsZS5jZW50ZXImJlwiZWwtbWVzc2FnZS1ib3gtLWNlbnRlclwiXV19LFtudWxsIT09ZS50aXRsZSYmdm9pZCAwIT09ZS50aXRsZT8oYSgpLG4oXCJkaXZcIixVcixbcyhcImRpdlwiLEdyLFtlLmljb24mJmUuY2VudGVyPyhhKCksbihcImRpdlwiLHtrZXk6MCxjbGFzczpbXCJlbC1tZXNzYWdlLWJveF9fc3RhdHVzXCIsZS5pY29uXX0sbnVsbCwyKSk6dShcInYtaWZcIiwhMCkscyhcInNwYW5cIixudWxsLHAoZS50aXRsZSksMSldKSxlLnNob3dDbG9zZT8oYSgpLG4oXCJidXR0b25cIix7a2V5OjAsdHlwZTpcImJ1dHRvblwiLGNsYXNzOlwiZWwtbWVzc2FnZS1ib3hfX2hlYWRlcmJ0blwiLFwiYXJpYS1sYWJlbFwiOlwiQ2xvc2VcIixvbkNsaWNrOnRbMV18fCh0WzFdPXQ9PmUuaGFuZGxlQWN0aW9uKGUuZGlzdGluZ3Vpc2hDYW5jZWxBbmRDbG9zZT9cImNsb3NlXCI6XCJjYW5jZWxcIikpLG9uS2V5ZG93bjp0WzJdfHwodFsyXT0kKCh0PT5lLmhhbmRsZUFjdGlvbihlLmRpc3Rpbmd1aXNoQ2FuY2VsQW5kQ2xvc2U/XCJjbG9zZVwiOlwiY2FuY2VsXCIpKSxbXCJlbnRlclwiXSkpfSxbWHJdLDMyKSk6dShcInYtaWZcIiwhMCldKSk6dShcInYtaWZcIiwhMCkscyhcImRpdlwiLFFyLFtzKFwiZGl2XCIsWnIsW2UuaWNvbiYmIWUuY2VudGVyJiZlLmhhc01lc3NhZ2U/KGEoKSxuKFwiZGl2XCIse2tleTowLGNsYXNzOltcImVsLW1lc3NhZ2UtYm94X19zdGF0dXNcIixlLmljb25dfSxudWxsLDIpKTp1KFwidi1pZlwiLCEwKSxlLmhhc01lc3NhZ2U/KGEoKSxuKFwiZGl2XCIsSnIsW2QoZS4kc2xvdHMsXCJkZWZhdWx0XCIse30sKCgpPT5bZS5kYW5nZXJvdXNseVVzZUhUTUxTdHJpbmc/KGEoKSxuKFwicFwiLHtrZXk6MSxpbm5lckhUTUw6ZS5tZXNzYWdlfSxudWxsLDgsW1wiaW5uZXJIVE1MXCJdKSk6KGEoKSxuKFwicFwiLGVzLHAoZS5tZXNzYWdlKSwxKSldKSldKSk6dShcInYtaWZcIiwhMCldKSxyKHMoXCJkaXZcIix0cyxbcyhnLHtyZWY6XCJpbnB1dFwiLG1vZGVsVmFsdWU6ZS5pbnB1dFZhbHVlLFwib25VcGRhdGU6bW9kZWxWYWx1ZVwiOnRbM118fCh0WzNdPXQ9PmUuaW5wdXRWYWx1ZT10KSx0eXBlOmUuaW5wdXRUeXBlLHBsYWNlaG9sZGVyOmUuaW5wdXRQbGFjZWhvbGRlcixjbGFzczp7aW52YWxpZDplLnZhbGlkYXRlRXJyb3J9LG9uS2V5ZG93bjokKGUuaGFuZGxlSW5wdXRFbnRlcixbXCJlbnRlclwiXSl9LG51bGwsOCxbXCJtb2RlbFZhbHVlXCIsXCJ0eXBlXCIsXCJwbGFjZWhvbGRlclwiLFwiY2xhc3NcIixcIm9uS2V5ZG93blwiXSkscyhcImRpdlwiLHtjbGFzczpcImVsLW1lc3NhZ2UtYm94X19lcnJvcm1zZ1wiLHN0eWxlOnt2aXNpYmlsaXR5OmUuZWRpdG9yRXJyb3JNZXNzYWdlP1widmlzaWJsZVwiOlwiaGlkZGVuXCJ9fSxwKGUuZWRpdG9yRXJyb3JNZXNzYWdlKSw1KV0sNTEyKSxbW2gsZS5zaG93SW5wdXRdXSldKSxzKFwiZGl2XCIsbHMsW2Uuc2hvd0NhbmNlbEJ1dHRvbj8oYSgpLG4oYix7a2V5OjAsbG9hZGluZzplLmNhbmNlbEJ1dHRvbkxvYWRpbmcsY2xhc3M6W2UuY2FuY2VsQnV0dG9uQ2xhc3NdLHJvdW5kOmUucm91bmRCdXR0b24sc2l6ZTpcInNtYWxsXCIsb25DbGljazp0WzRdfHwodFs0XT10PT5lLmhhbmRsZUFjdGlvbihcImNhbmNlbFwiKSksb25LZXlkb3duOnRbNV18fCh0WzVdPSQoKHQ9PmUuaGFuZGxlQWN0aW9uKFwiY2FuY2VsXCIpKSxbXCJlbnRlclwiXSkpfSx7ZGVmYXVsdDppKCgoKT0+W2MocChlLmNhbmNlbEJ1dHRvblRleHR8fGUudChcImVsLm1lc3NhZ2Vib3guY2FuY2VsXCIpKSwxKV0pKSxfOjF9LDgsW1wibG9hZGluZ1wiLFwiY2xhc3NcIixcInJvdW5kXCJdKSk6dShcInYtaWZcIiwhMCkscihzKGIse3JlZjpcImNvbmZpcm1cIixsb2FkaW5nOmUuY29uZmlybUJ1dHRvbkxvYWRpbmcsY2xhc3M6W2UuY29uZmlybUJ1dHRvbkNsYXNzZXNdLHJvdW5kOmUucm91bmRCdXR0b24sZGlzYWJsZWQ6ZS5jb25maXJtQnV0dG9uRGlzYWJsZWQsc2l6ZTpcInNtYWxsXCIsb25DbGljazp0WzZdfHwodFs2XT10PT5lLmhhbmRsZUFjdGlvbihcImNvbmZpcm1cIikpLG9uS2V5ZG93bjp0WzddfHwodFs3XT0kKCh0PT5lLmhhbmRsZUFjdGlvbihcImNvbmZpcm1cIikpLFtcImVudGVyXCJdKSl9LHtkZWZhdWx0OmkoKCgpPT5bYyhwKGUuY29uZmlybUJ1dHRvblRleHR8fGUudChcImVsLm1lc3NhZ2Vib3guY29uZmlybVwiKSksMSldKSksXzoxfSw4LFtcImxvYWRpbmdcIixcImNsYXNzXCIsXCJyb3VuZFwiLFwiZGlzYWJsZWRcIl0pLFtbaCxlLnNob3dDb25maXJtQnV0dG9uXV0pXSldLDIpXSw4LFtcImFyaWEtbGFiZWxcIl0pLFtbaCxlLnZpc2libGVdXSldKSksXzoxfSl9LHFyLl9fZmlsZT1cInBhY2thZ2VzL21lc3NhZ2UtYm94L3NyYy9pbmRleC52dWVcIjtjb25zdCBvcz1bXCJsb2NrU2Nyb2xsXCIsXCJzaG93Q2xvc2VcIixcImNsb3NlT25DbGlja01vZGFsXCIsXCJjbG9zZU9uUHJlc3NFc2NhcGVcIixcImNsb3NlT25IYXNoQ2hhbmdlXCIsXCJjZW50ZXJcIixcInJvdW5kQnV0dG9uXCIsXCJjbG9zZURlbGF5XCIsXCJ6SW5kZXhcIixcIm1vZGFsXCIsXCJtb2RhbEZhZGVcIixcIm1vZGFsQ2xhc3NcIixcIm1vZGFsQXBwZW5kVG9Cb2R5XCIsXCJsb2NrU2Nyb2xsXCJdLGlzPXt0aXRsZTpudWxsLG1lc3NhZ2U6XCJcIix0eXBlOlwiXCIsaWNvbkNsYXNzOlwiXCIsc2hvd0lucHV0OiExLHNob3dDbG9zZTohMCxtb2RhbEZhZGU6ITAsbG9ja1Njcm9sbDohMCxjbG9zZU9uQ2xpY2tNb2RhbDohMCxjbG9zZU9uUHJlc3NFc2NhcGU6ITAsY2xvc2VPbkhhc2hDaGFuZ2U6ITAsaW5wdXRWYWx1ZTpudWxsLGlucHV0UGxhY2Vob2xkZXI6XCJcIixpbnB1dFR5cGU6XCJ0ZXh0XCIsaW5wdXRQYXR0ZXJuOm51bGwsaW5wdXRWYWxpZGF0b3I6bnVsbCxpbnB1dEVycm9yTWVzc2FnZTpcIlwiLHNob3dDb25maXJtQnV0dG9uOiEwLHNob3dDYW5jZWxCdXR0b246ITEsY29uZmlybUJ1dHRvblBvc2l0aW9uOlwicmlnaHRcIixjb25maXJtQnV0dG9uSGlnaGxpZ2h0OiExLGNhbmNlbEJ1dHRvbkhpZ2hsaWdodDohMSxjb25maXJtQnV0dG9uVGV4dDpcIlwiLGNhbmNlbEJ1dHRvblRleHQ6XCJcIixjb25maXJtQnV0dG9uQ2xhc3M6XCJcIixjYW5jZWxCdXR0b25DbGFzczpcIlwiLGN1c3RvbUNsYXNzOlwiXCIsYmVmb3JlQ2xvc2U6bnVsbCxkYW5nZXJvdXNseVVzZUhUTUxTdHJpbmc6ITEsY2VudGVyOiExLHJvdW5kQnV0dG9uOiExLGRpc3Rpbmd1aXNoQ2FuY2VsQW5kQ2xvc2U6ITF9O2xldCBycz1bXTtjb25zdCBzcz0oZSx0KT0+e2lmKGFzKXtjb25zdCBsPWFzLmNhbGxiYWNrO1wiZnVuY3Rpb25cIj09dHlwZW9mIGwmJih0LnNob3dJbnB1dD9sKHQuaW5wdXRWYWx1ZSxlKTpsKGUpKSxhcy5yZXNvbHZlJiYoXCJjb25maXJtXCI9PT1lP3Quc2hvd0lucHV0P2FzLnJlc29sdmUoe3ZhbHVlOnQuaW5wdXRWYWx1ZSxhY3Rpb246ZX0pOmFzLnJlc29sdmUoZSk6IWFzLnJlamVjdHx8XCJjYW5jZWxcIiE9PWUmJlwiY2xvc2VcIiE9PWV8fGFzLnJlamVjdChlKSl9fSx1cz0oKT0+bnIodm9pZCAwLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKigpe2lmKG5zfHwoKCk9Pntjb25zdCBlPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksdD1zKHFyKTtVKHQsZSksbnM9dC5jb21wb25lbnR9KSgpLCghbnN8fCFucy5zZXR1cEluc3RhbGwuc3RhdGUudmlzaWJsZSkmJnJzLmxlbmd0aD4wKXtjb25zdCBlPXt9LHQ9e307YXM9cnMuc2hpZnQoKTtjb25zdCBsPWFzLm9wdGlvbnM7T2JqZWN0LmtleXMobCkuZm9yRWFjaCgoYT0+e29zLmluY2x1ZGVzKGEpP2VbYV09bFthXTp0W2FdPWxbYV19KSk7Y29uc3QgYT1ucy5wcm9wcztmb3IoY29uc3QgdCBpbiBlKWUuaGFzT3duUHJvcGVydHkodCkmJihhW3RdPWVbdF0pO2NvbnN0IG49bnMuc2V0dXBJbnN0YWxsLnN0YXRlO24uYWN0aW9uPVwiXCIsdm9pZCAwPT09bC5jYWxsYmFjayYmKGwuY2FsbGJhY2s9c3MpO2Zvcihjb25zdCBlIGluIHQpdC5oYXNPd25Qcm9wZXJ0eShlKSYmKG5bZV09dFtlXSk7RyhsLm1lc3NhZ2UpJiYobnMuc2xvdHMuZGVmYXVsdD0oKT0+W2wubWVzc2FnZV0pO2NvbnN0IG89bC5jYWxsYmFjaztuLmNhbGxiYWNrPShlLHQpPT57byhlLHQpLHVzKCl9LGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQobnMudm5vZGUuZWwpLG4udmlzaWJsZT0hMH19KSksZHM9ZnVuY3Rpb24oZSx0KXtpZighemUpe2lmKFwic3RyaW5nXCI9PXR5cGVvZiBlfHxHKGUpPyhlPXttZXNzYWdlOmV9LFwic3RyaW5nXCI9PXR5cGVvZiB0JiYoZS50aXRsZT10KSk6ZS5jYWxsYmFjayYmIXQmJih0PWUuY2FsbGJhY2spLFwidW5kZWZpbmVkXCIhPXR5cGVvZiBQcm9taXNlKXJldHVybiBuZXcgUHJvbWlzZSgoKGwsYSk9Pntycy5wdXNoKHtvcHRpb25zOk9iamVjdC5hc3NpZ24oe30saXMsZSksY2FsbGJhY2s6dCxyZXNvbHZlOmwscmVqZWN0OmF9KSx1cygpfSkpO3JzLnB1c2goe29wdGlvbnM6T2JqZWN0LmFzc2lnbih7fSxpcyxlKSxjYWxsYmFjazp0fSksdXMoKX19O2RzLmFsZXJ0PShlLHQsbCk9PihcIm9iamVjdFwiPT10eXBlb2YgdD8obD10LHQ9XCJcIik6dm9pZCAwPT09dCYmKHQ9XCJcIiksZHMoT2JqZWN0LmFzc2lnbih7dGl0bGU6dCxtZXNzYWdlOmUsdHlwZSQ6XCJhbGVydFwiLGNsb3NlT25QcmVzc0VzY2FwZTohMSxjbG9zZU9uQ2xpY2tNb2RhbDohMX0sbCkpKSxkcy5jb25maXJtPShlLHQsbCk9PihcIm9iamVjdFwiPT10eXBlb2YgdD8obD10LHQ9XCJcIik6dm9pZCAwPT09dCYmKHQ9XCJcIiksZHMoT2JqZWN0LmFzc2lnbih7dGl0bGU6dCxtZXNzYWdlOmUsdHlwZSQ6XCJjb25maXJtXCIsc2hvd0NhbmNlbEJ1dHRvbjohMH0sbCkpKSxkcy5wcm9tcHQ9KGUsdCxsKT0+KFwib2JqZWN0XCI9PXR5cGVvZiB0PyhsPXQsdD1cIlwiKTp2b2lkIDA9PT10JiYodD1cIlwiKSxkcyhPYmplY3QuYXNzaWduKHt0aXRsZTp0LG1lc3NhZ2U6ZSxzaG93Q2FuY2VsQnV0dG9uOiEwLHNob3dJbnB1dDohMCx0eXBlJDpcInByb21wdFwifSxsKSkpLGRzLmNsb3NlPSgpPT57bnMuc2V0dXBJbnN0YWxsLmRvQ2xvc2UoKSxucy5zZXR1cEluc3RhbGwuc3RhdGUudmlzaWJsZT0hMSxycz1bXSxhcz1udWxsfSxkcy5pbnN0YWxsPWU9PntlLmNvbmZpZy5nbG9iYWxQcm9wZXJ0aWVzLiRtc2dib3g9ZHMsZS5jb25maWcuZ2xvYmFsUHJvcGVydGllcy4kbWVzc2FnZUJveD1kcyxlLmNvbmZpZy5nbG9iYWxQcm9wZXJ0aWVzLiRhbGVydD1kcy5hbGVydCxlLmNvbmZpZy5nbG9iYWxQcm9wZXJ0aWVzLiRjb25maXJtPWRzLmNvbmZpcm0sZS5jb25maWcuZ2xvYmFsUHJvcGVydGllcy4kcHJvbXB0PWRzLnByb21wdH07Y29uc3QgY3M9e3N1Y2Nlc3M6XCJzdWNjZXNzXCIsaW5mbzpcImluZm9cIix3YXJuaW5nOlwid2FybmluZ1wiLGVycm9yOlwiZXJyb3JcIn07dmFyIHBzPWUoe25hbWU6XCJFbE5vdGlmaWNhdGlvblwiLHByb3BzOntjdXN0b21DbGFzczp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIlwifSxkYW5nZXJvdXNseVVzZUhUTUxTdHJpbmc6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiExfSxkdXJhdGlvbjp7dHlwZTpOdW1iZXIsZGVmYXVsdDo0NTAwfSxpY29uQ2xhc3M6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJcIn0saWQ6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJcIn0sbWVzc2FnZTp7dHlwZTpbU3RyaW5nLE9iamVjdF0sZGVmYXVsdDpcIlwifSxvZmZzZXQ6e3R5cGU6TnVtYmVyLGRlZmF1bHQ6MH0sb25DbGljazp7dHlwZTpGdW5jdGlvbixkZWZhdWx0OigpPT57fX0sb25DbG9zZTp7dHlwZTpGdW5jdGlvbixyZXF1aXJlZDohMH0scG9zaXRpb246e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJ0b3AtcmlnaHRcIn0sc2hvd0Nsb3NlOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMH0sdGl0bGU6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJcIn0sdHlwZTp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIlwifSx6SW5kZXg6e3R5cGU6TnVtYmVyLGRlZmF1bHQ6MH19LGVtaXRzOltcImNsb3NlXCIsXCJjbGlja1wiXSxzZXR1cChlKXtjb25zdCBhPWwoKCgpPT57Y29uc3QgdD1lLnR5cGU7cmV0dXJuIHQmJmNzW3RdP1wiZWwtaWNvbi1cIitjc1t0XTpcIlwifSkpLG49bCgoKCk9PmUucG9zaXRpb24uaW5kZXhPZihcInJpZ2h0XCIpPjE/XCJyaWdodFwiOlwibGVmdFwiKSksbz1sKCgoKT0+ZS5wb3NpdGlvbi5zdGFydHNXaXRoKFwidG9wXCIpP1widG9wXCI6XCJib3R0b21cIikpLGk9bCgoKCk9Pih7W28udmFsdWVdOmUub2Zmc2V0K1wicHhcIn0pKSkscj10KCExKSxzPXQoITEpLHU9dChudWxsKTtyZXR1cm57aG9yaXpvbnRhbENsYXNzOm4sdHlwZUNsYXNzOmEscG9zaXRpb25TdHlsZTppLHZlcnRpY2FsUHJvcGVydHk6byx2aXNpYmxlOnIsY2xvc2VkOnMsdGltZXI6dX19LHdhdGNoOntjbG9zZWQoZSl7ZSYmKHRoaXMudmlzaWJsZT0hMSxsdCh0aGlzLiRlbCxcInRyYW5zaXRpb25lbmRcIix0aGlzLmRlc3Ryb3lFbGVtZW50KSl9fSxtb3VudGVkKCl7dGhpcy5kdXJhdGlvbj4wJiYodGhpcy50aW1lcj1zZXRUaW1lb3V0KCgoKT0+e3RoaXMuY2xvc2VkfHx0aGlzLmNsb3NlKCl9KSx0aGlzLmR1cmF0aW9uKSksdGhpcy52aXNpYmxlPSEwLGx0KGRvY3VtZW50LFwia2V5ZG93blwiLHRoaXMua2V5ZG93bil9LGJlZm9yZVVubW91bnQoKXthdChkb2N1bWVudCxcImtleWRvd25cIix0aGlzLmtleWRvd24pfSxtZXRob2RzOntkZXN0cm95RWxlbWVudCgpe3RoaXMudmlzaWJsZT0hMSxhdCh0aGlzLiRlbCxcInRyYW5zaXRpb25lbmRcIix0aGlzLmRlc3Ryb3lFbGVtZW50KSx0aGlzLm9uQ2xvc2UoKX0sc3RhcnRUaW1lcigpe3RoaXMuZHVyYXRpb24+MCYmKHRoaXMudGltZXI9c2V0VGltZW91dCgoKCk9Pnt0aGlzLmNsb3NlZHx8dGhpcy5jbG9zZSgpfSksdGhpcy5kdXJhdGlvbikpfSxjbGVhclRpbWVyKCl7Y2xlYXJUaW1lb3V0KHRoaXMudGltZXIpLHRoaXMudGltZXI9bnVsbH0sY2xpY2soKXtudWxsPT10aGlzfHx0aGlzLm9uQ2xpY2soKX0sY2xvc2UoKXt0aGlzLmNsb3NlZD0hMCx0aGlzLnRpbWVyPW51bGx9LGtleWRvd24oe2NvZGU6ZX0pe2U9PT1mdC5kZWxldGV8fGU9PT1mdC5iYWNrc3BhY2U/dGhpcy5jbGVhclRpbWVyKCk6ZT09PWZ0LmVzYz90aGlzLmNsb3NlZHx8dGhpcy5jbG9zZSgpOnRoaXMuc3RhcnRUaW1lcigpfX19KTtjb25zdCBocz17Y2xhc3M6XCJlbC1ub3RpZmljYXRpb25fX2NvbnRlbnRcIn0sdnM9e2tleTowfTtsZXQgbXM7cHMucmVuZGVyPWZ1bmN0aW9uKGUsdCxsLGMsdixtKXtyZXR1cm4gYSgpLG4obyx7bmFtZTpcImVsLW5vdGlmaWNhdGlvbi1mYWRlXCJ9LHtkZWZhdWx0OmkoKCgpPT5bcihzKFwiZGl2XCIse2lkOmUuaWQsY2xhc3M6W1wiZWwtbm90aWZpY2F0aW9uXCIsZS5jdXN0b21DbGFzcyxlLmhvcml6b250YWxDbGFzc10sc3R5bGU6ZS5wb3NpdGlvblN0eWxlLHJvbGU6XCJhbGVydFwiLG9uTW91c2VlbnRlcjp0WzJdfHwodFsyXT10PT5lLmNsZWFyVGltZXIoKSksb25Nb3VzZWxlYXZlOnRbM118fCh0WzNdPXQ9PmUuc3RhcnRUaW1lcigpKSxvbkNsaWNrOnRbNF18fCh0WzRdPSguLi50KT0+ZS5jbGljayguLi50KSl9LFtlLnR5cGV8fGUuaWNvbkNsYXNzPyhhKCksbihcImlcIix7a2V5OjAsY2xhc3M6W1wiZWwtbm90aWZpY2F0aW9uX19pY29uXCIsW2UudHlwZUNsYXNzLGUuaWNvbkNsYXNzXV19LG51bGwsMikpOnUoXCJ2LWlmXCIsITApLHMoXCJkaXZcIix7Y2xhc3M6W1wiZWwtbm90aWZpY2F0aW9uX19ncm91cFwiLHtcImlzLXdpdGgtaWNvblwiOmUudHlwZUNsYXNzfHxlLmljb25DbGFzc31dfSxbcyhcImgyXCIse2NsYXNzOlwiZWwtbm90aWZpY2F0aW9uX190aXRsZVwiLHRleHRDb250ZW50OnAoZS50aXRsZSl9LG51bGwsOCxbXCJ0ZXh0Q29udGVudFwiXSkscihzKFwiZGl2XCIsaHMsW2QoZS4kc2xvdHMsXCJkZWZhdWx0XCIse30sKCgpPT5bZS5kYW5nZXJvdXNseVVzZUhUTUxTdHJpbmc/KGEoKSxuKEUse2tleToxfSxbdShcIiBDYXV0aW9uIGhlcmUsIG1lc3NhZ2UgY291bGQndmUgYmVlbiBjb21wcm9taXplZCwgbmVydmVyIHVzZSB1c2VyJ3MgaW5wdXQgYXMgbWVzc2FnZSBcIiksdShcIiBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgXCIpLHMoXCJwXCIse2lubmVySFRNTDplLm1lc3NhZ2V9LG51bGwsOCxbXCJpbm5lckhUTUxcIl0pXSw2NCkpOihhKCksbihcInBcIix2cyxwKGUubWVzc2FnZSksMSkpXSkpXSw1MTIpLFtbaCxlLm1lc3NhZ2VdXSksZS5zaG93Q2xvc2U/KGEoKSxuKFwiZGl2XCIse2tleTowLGNsYXNzOlwiZWwtbm90aWZpY2F0aW9uX19jbG9zZUJ0biBlbC1pY29uLWNsb3NlXCIsb25DbGljazp0WzFdfHwodFsxXT1UKCgoLi4udCk9PmUuY2xvc2UoLi4udCkpLFtcInN0b3BcIl0pKX0pKTp1KFwidi1pZlwiLCEwKV0sMildLDQ2LFtcImlkXCJdKSxbW2gsZS52aXNpYmxlXV0pXSkpLF86M30pfSxwcy5fX2ZpbGU9XCJwYWNrYWdlcy9ub3RpZmljYXRpb24vc3JjL2luZGV4LnZ1ZVwiO2NvbnN0IGZzPVtdO2xldCBncz0xO2NvbnN0IGJzPWZ1bmN0aW9uKGU9e30pe2lmKHplKXJldHVybjtjb25zdCB0PWUucG9zaXRpb258fFwidG9wLXJpZ2h0XCI7bGV0IGw9ZS5vZmZzZXR8fDA7ZnMuZmlsdGVyKCgoe3ZtOmV9KT0+ZS5jb21wb25lbnQucHJvcHMucG9zaXRpb249PT10KSkuZm9yRWFjaCgoKHt2bTplfSk9PntsKz0oZS5lbC5vZmZzZXRIZWlnaHR8fDApKzE2fSkpLGwrPTE2O2NvbnN0IGE9XCJub3RpZmljYXRpb25fXCIrZ3MrKyxuPWUub25DbG9zZTtlPU9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7ZGFuZ2Vyb3VzbHlVc2VIVE1MU3RyaW5nOiExLGR1cmF0aW9uOjQ1MDAscG9zaXRpb246XCJ0b3AtcmlnaHRcIixzaG93Q2xvc2U6ITB9LGUpLHtvbkNsb3NlOigpPT57IWZ1bmN0aW9uKGUsdCl7Y29uc3QgbD1mcy5maW5kSW5kZXgoKCh7dm06dH0pPT57Y29uc3R7aWQ6bH09dC5jb21wb25lbnQucHJvcHM7cmV0dXJuIGU9PT1sfSkpO2lmKC0xPT09bClyZXR1cm47Y29uc3R7dm06YSwkZWw6bn09ZnNbbF07aWYoIWEpcmV0dXJuO251bGw9PXR8fHQoYSk7Y29uc3Qgbz1hLmVsLm9mZnNldEhlaWdodDtVKG51bGwsbiksZnMuc3BsaWNlKGwsMSk7Y29uc3QgaT1mcy5sZW5ndGg7aWYoaygoKCk9Pntkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKG4pfSkpLGk8MSlyZXR1cm47Y29uc3Qgcj1hLnByb3BzLnBvc2l0aW9uO2ZvcihsZXQgZT1sO2U8aTtlKyspaWYoZnNbZV0udm0uY29tcG9uZW50LnByb3BzLnBvc2l0aW9uPT09cil7Y29uc3QgdD1hLnByb3BzLnBvc2l0aW9uLnNwbGl0KFwiLVwiKVswXSxsPXBhcnNlSW50KGZzW2VdLnZtLmVsLnN0eWxlW3RdLDEwKS1vLTE2O2ZzW2VdLnZtLmNvbXBvbmVudC5wcm9wcy5vZmZzZXQ9bCxyZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCgpPT57VShmc1tlXS52bSxmc1tlXS4kZWwpfSkpfX0oYSxuKX0sb2Zmc2V0OmwsaWQ6YSx6SW5kZXg6Z2wubmV4dFpJbmRleCgpfSk7Y29uc3Qgbz1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO3JldHVybiBvLmNsYXNzTmFtZT1cImNvbnRhaW5lcl9cIithLG8uc3R5bGUuekluZGV4PVN0cmluZygpLG1zPXMocHMsZSxHKGUubWVzc2FnZSk/e2RlZmF1bHQ6KCk9PmUubWVzc2FnZX06bnVsbCksVShtcyxvKSxmcy5wdXNoKHt2bTptcywkZWw6b30pLGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQobykse2Nsb3NlOmUub25DbG9zZX19O1tcInN1Y2Nlc3NcIixcIndhcm5pbmdcIixcImluZm9cIixcImVycm9yXCJdLmZvckVhY2goKGU9PntPYmplY3QuYXNzaWduKGJzLHtbZV06KHQ9e30pPT4oKFwic3RyaW5nXCI9PXR5cGVvZiB0fHxHKHQpKSYmKHQ9e21lc3NhZ2U6dH0pLHQudHlwZT1lLGJzKHQpKX0pfSkpLGJzLmluc3RhbGw9ZT0+e2UuY29uZmlnLmdsb2JhbFByb3BlcnRpZXMuJG5vdGlmeT1ic307Y29uc3QgeXM9U3ltYm9sKFwiU2VsZWN0R3JvdXBcIiksa3M9U3ltYm9sKFwiU2VsZWN0XCIpLENzPVwiZWxPcHRpb25RdWVyeUNoYW5nZVwiLHhzPVwiZWxPcHRpb25Hcm91cFF1ZXJ5Q2hhbmdlXCI7ZnVuY3Rpb24gd3MoZSx0KXtjb25zdCBhPXcoa3MpLG49dyh5cyx7ZGlzYWJsZWQ6ITF9KSxvPWwoKCgpPT5cIltvYmplY3Qgb2JqZWN0XVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUudmFsdWUpLnRvTG93ZXJDYXNlKCkpKSxpPWwoKCgpPT5hLnByb3BzLm11bHRpcGxlP3AoYS5wcm9wcy5tb2RlbFZhbHVlLGUudmFsdWUpOmgoZS52YWx1ZSxhLnByb3BzLm1vZGVsVmFsdWUpKSkscj1sKCgoKT0+e2lmKGEucHJvcHMubXVsdGlwbGUpe2NvbnN0IGU9YS5wcm9wcy5tb2RlbFZhbHVlfHxbXTtyZXR1cm4haS52YWx1ZSYmZS5sZW5ndGg+PWEucHJvcHMubXVsdGlwbGVMaW1pdCYmYS5wcm9wcy5tdWx0aXBsZUxpbWl0PjB9cmV0dXJuITF9KSkscz1sKCgoKT0+ZS5sYWJlbHx8KG8udmFsdWU/XCJcIjplLnZhbHVlKSkpLHU9bCgoKCk9PmUudmFsdWV8fGUubGFiZWx8fFwiXCIpKSxkPWwoKCgpPT5lLmRpc2FibGVkfHx0Lmdyb3VwRGlzYWJsZWR8fHIudmFsdWUpKSxjPXYoKSxwPShlPVtdLHQpPT57aWYoby52YWx1ZSl7Y29uc3QgbD1hLnByb3BzLnZhbHVlS2V5O3JldHVybiBlJiZlLnNvbWUoKGU9PkZlKGUsbCk9PT1GZSh0LGwpKSl9cmV0dXJuIGUmJmUuaW5kZXhPZih0KT4tMX0saD0oZSx0KT0+e2lmKG8udmFsdWUpe2NvbnN0e3ZhbHVlS2V5Omx9PWEucHJvcHM7cmV0dXJuIEZlKGUsbCk9PT1GZSh0LGwpfXJldHVybiBlPT09dH07cmV0dXJuIHkoKCgpPT5zLnZhbHVlKSwoKCk9PntlLmNyZWF0ZWR8fGEucHJvcHMucmVtb3RlfHxhLnNldFNlbGVjdGVkKCl9KSkseSgoKCk9PmUudmFsdWUpLCgodCxsKT0+e2NvbnN0e3JlbW90ZTpuLHZhbHVlS2V5Om99PWEucHJvcHM7aWYoIWUuY3JlYXRlZCYmIW4pe2lmKG8mJlwib2JqZWN0XCI9PXR5cGVvZiB0JiZcIm9iamVjdFwiPT10eXBlb2YgbCYmdFtvXT09PWxbb10pcmV0dXJuO2Euc2V0U2VsZWN0ZWQoKX19KSksYS5zZWxlY3RFbWl0dGVyLm9uKENzLChsPT57Y29uc3Qgbj1uZXcgUmVnRXhwKCgoZT1cIlwiKT0+U3RyaW5nKGUpLnJlcGxhY2UoL1t8XFxcXHt9KClbXFxdXiQrKj8uXS9nLFwiXFxcXCQmXCIpKShsKSxcImlcIik7dC52aXNpYmxlPW4udGVzdChzLnZhbHVlKXx8ZS5jcmVhdGVkLHQudmlzaWJsZXx8YS5maWx0ZXJlZE9wdGlvbnNDb3VudC0tfSkpLHtzZWxlY3Q6YSxjdXJyZW50TGFiZWw6cyxjdXJyZW50VmFsdWU6dSxpdGVtU2VsZWN0ZWQ6aSxpc0Rpc2FibGVkOmQsaG92ZXJJdGVtOigpPT57ZS5kaXNhYmxlZHx8bi5kaXNhYmxlZHx8KGEuaG92ZXJJbmRleD1hLm9wdGlvbnMuaW5kZXhPZihjKSl9fX12YXIgX3M9ZSh7bmFtZTpcIkVsT3B0aW9uXCIsY29tcG9uZW50TmFtZTpcIkVsT3B0aW9uXCIscHJvcHM6e3ZhbHVlOntyZXF1aXJlZDohMCx0eXBlOltTdHJpbmcsTnVtYmVyLE9iamVjdF19LGxhYmVsOltTdHJpbmcsTnVtYmVyXSxjcmVhdGVkOkJvb2xlYW4sZGlzYWJsZWQ6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiExfX0sc2V0dXAoZSl7Y29uc3QgdD1mKHtpbmRleDotMSxncm91cERpc2FibGVkOiExLHZpc2libGU6ITAsaGl0U3RhdGU6ITEsaG92ZXI6ITF9KSx7Y3VycmVudExhYmVsOmwsaXRlbVNlbGVjdGVkOmEsaXNEaXNhYmxlZDpuLHNlbGVjdDpvLGhvdmVySXRlbTppfT13cyhlLHQpLHt2aXNpYmxlOnIsaG92ZXI6c309Qyh0KSx1PXYoKS5wcm94eTtyZXR1cm4gby5vbk9wdGlvbkNyZWF0ZSh1KSxPKCgoKT0+e2NvbnN0e3NlbGVjdGVkOnR9PW87bGV0IGw9by5wcm9wcy5tdWx0aXBsZT90Olt0XSxhPW8uY2FjaGVkT3B0aW9ucy5pbmRleE9mKHUpLG49bnVsbD09bD92b2lkIDA6bC5pbmRleE9mKHUpO2E+LTEmJm48MCYmby5jYWNoZWRPcHRpb25zLnNwbGljZShhLDEpLG8ub25PcHRpb25EZXN0cm95KG8ub3B0aW9ucy5tYXAoKGU9PmUudmFsdWUpKS5pbmRleE9mKGUudmFsdWUpKX0pKSx7Y3VycmVudExhYmVsOmwsaXRlbVNlbGVjdGVkOmEsaXNEaXNhYmxlZDpuLHNlbGVjdDpvLGhvdmVySXRlbTppLHZpc2libGU6cixob3ZlcjpzLHNlbGVjdE9wdGlvbkNsaWNrOmZ1bmN0aW9uKCl7ITAhPT1lLmRpc2FibGVkJiYhMCE9PXQuZ3JvdXBEaXNhYmxlZCYmby5oYW5kbGVPcHRpb25TZWxlY3QodSwhMCl9fX19KTtfcy5yZW5kZXI9ZnVuY3Rpb24oZSx0LGwsbyxpLHUpe3JldHVybiByKChhKCksbihcImxpXCIse2NsYXNzOltcImVsLXNlbGVjdC1kcm9wZG93bl9faXRlbVwiLHtzZWxlY3RlZDplLml0ZW1TZWxlY3RlZCxcImlzLWRpc2FibGVkXCI6ZS5pc0Rpc2FibGVkLGhvdmVyOmUuaG92ZXJ9XSxvbk1vdXNlZW50ZXI6dFsxXXx8KHRbMV09KC4uLnQpPT5lLmhvdmVySXRlbSguLi50KSksb25DbGljazp0WzJdfHwodFsyXT1UKCgoLi4udCk9PmUuc2VsZWN0T3B0aW9uQ2xpY2soLi4udCkpLFtcInN0b3BcIl0pKX0sW2QoZS4kc2xvdHMsXCJkZWZhdWx0XCIse30sKCgpPT5bcyhcInNwYW5cIixudWxsLHAoZS5jdXJyZW50TGFiZWwpLDEpXSkpXSwzNCkpLFtbaCxlLnZpc2libGVdXSl9LF9zLl9fZmlsZT1cInBhY2thZ2VzL3NlbGVjdC9zcmMvb3B0aW9uLnZ1ZVwiO3ZhciBTcz1lKHtuYW1lOlwiRWxTZWxlY3REcm9wZG93blwiLGNvbXBvbmVudE5hbWU6XCJFbFNlbGVjdERyb3Bkb3duXCIsc2V0dXAoKXtjb25zdCBlPXcoa3MpLGE9bCgoKCk9PmUucHJvcHMucG9wcGVyQ2xhc3MpKSxuPWwoKCgpPT5lLnByb3BzLm11bHRpcGxlKSksbz10KFwiXCIpO2Z1bmN0aW9uIGkoKXt2YXIgdDtvLnZhbHVlPShudWxsPT09KHQ9ZS5zZWxlY3RXcmFwcGVyKXx8dm9pZCAwPT09dD92b2lkIDA6dC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCkrXCJweFwifXJldHVybiBfKCgoKT0+e0p0KGUuc2VsZWN0V3JhcHBlcixpKX0pKSxPKCgoKT0+e2VsKGUuc2VsZWN0V3JhcHBlcixpKX0pKSx7bWluV2lkdGg6byxwb3BwZXJDbGFzczphLGlzTXVsdGlwbGU6bn19fSk7U3MucmVuZGVyPWZ1bmN0aW9uKGUsdCxsLG8saSxyKXtyZXR1cm4gYSgpLG4oXCJkaXZcIix7Y2xhc3M6W1wiZWwtc2VsZWN0LWRyb3Bkb3duXCIsW3tcImlzLW11bHRpcGxlXCI6ZS5pc011bHRpcGxlfSxlLnBvcHBlckNsYXNzXV0sc3R5bGU6e21pbldpZHRoOmUubWluV2lkdGh9fSxbZChlLiRzbG90cyxcImRlZmF1bHRcIildLDYpfSxTcy5fX2ZpbGU9XCJwYWNrYWdlcy9zZWxlY3Qvc3JjL3NlbGVjdC1kcm9wZG93bi52dWVcIjtjb25zdCBFcz0oZSxhLG4pPT57Y29uc3Qgbz1xZSgpLGk9dChudWxsKSxyPXQobnVsbCkscz10KG51bGwpLHU9dChudWxsKSxkPXQobnVsbCksYz10KG51bGwpLHA9dCgtMSksaD13KFwiZWxGb3JtXCIse30pLHY9dyhcImVsRm9ybUl0ZW1cIix7fSksbT1sKCgoKT0+IWUuZmlsdGVyYWJsZXx8ZS5tdWx0aXBsZXx8ISghemUmJiFpc05hTihOdW1iZXIoZG9jdW1lbnQuRE9DVU1FTlRfTk9ERSkpKSYmISghemUmJm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZihcIkVkZ2VcIik+LTEpJiYhYS52aXNpYmxlKSksZj1sKCgoKT0+ZS5kaXNhYmxlZHx8aC5kaXNhYmxlZCkpLGc9bCgoKCk9Pntjb25zdCB0PWUubXVsdGlwbGU/QXJyYXkuaXNBcnJheShlLm1vZGVsVmFsdWUpJiZlLm1vZGVsVmFsdWUubGVuZ3RoPjA6dm9pZCAwIT09ZS5tb2RlbFZhbHVlJiZudWxsIT09ZS5tb2RlbFZhbHVlJiZcIlwiIT09ZS5tb2RlbFZhbHVlO3JldHVybiBlLmNsZWFyYWJsZSYmIWYudmFsdWUmJmEuaW5wdXRIb3ZlcmluZyYmdH0pKSxiPWwoKCgpPT5lLnJlbW90ZSYmZS5maWx0ZXJhYmxlP1wiXCI6YS52aXNpYmxlP1wiYXJyb3ctdXAgaXMtcmV2ZXJzZVwiOlwiYXJyb3ctdXBcIikpLEM9bCgoKCk9PmUucmVtb3RlPzMwMDowKSkseD1sKCgoKT0+ZS5sb2FkaW5nP2UubG9hZGluZ1RleHR8fHFsKFwiZWwuc2VsZWN0LmxvYWRpbmdcIik6KCFlLnJlbW90ZXx8XCJcIiE9PWEucXVlcnl8fDAhPT1hLm9wdGlvbnMubGVuZ3RoKSYmKGUuZmlsdGVyYWJsZSYmYS5xdWVyeSYmYS5vcHRpb25zLmxlbmd0aD4wJiYwPT09YS5maWx0ZXJlZE9wdGlvbnNDb3VudD9lLm5vTWF0Y2hUZXh0fHxxbChcImVsLnNlbGVjdC5ub01hdGNoXCIpOjA9PT1hLm9wdGlvbnMubGVuZ3RoP2Uubm9EYXRhVGV4dHx8cWwoXCJlbC5zZWxlY3Qubm9EYXRhXCIpOm51bGwpKSksXz1sKCgoKT0+e2NvbnN0IHQ9YS5vcHRpb25zLmZpbHRlcigoZT0+IWUuY3JlYXRlZCkpLnNvbWUoKGU9PmUuY3VycmVudExhYmVsPT09YS5xdWVyeSkpO3JldHVybiBlLmZpbHRlcmFibGUmJmUuYWxsb3dDcmVhdGUmJlwiXCIhPT1hLnF1ZXJ5JiYhdH0pKSxTPWwoKCgpPT5lLnNpemV8fHYuc2l6ZXx8by5zaXplKSksRT1sKCgoKT0+W1wic21hbGxcIixcIm1pbmlcIl0uaW5kZXhPZihTLnZhbHVlKT4tMT9cIm1pbmlcIjpcInNtYWxsXCIpKSxNPWwoKCgpPT5hLnZpc2libGUmJiExIT09eC52YWx1ZSkpO3koKCgpPT5mLnZhbHVlKSwoKCk9PntrKCgoKT0+e1QoKX0pKX0pKSx5KCgoKT0+ZS5wbGFjZWhvbGRlciksKGU9PnthLmNhY2hlZFBsYWNlSG9sZGVyPWEuY3VycmVudFBsYWNlaG9sZGVyPWV9KSkseSgoKCk9PmUubW9kZWxWYWx1ZSksKCh0LGwpPT57dmFyIG47ZS5tdWx0aXBsZSYmKFQoKSx0JiZ0Lmxlbmd0aD4wfHxyLnZhbHVlJiZcIlwiIT09YS5xdWVyeT9hLmN1cnJlbnRQbGFjZWhvbGRlcj1cIlwiOmEuY3VycmVudFBsYWNlaG9sZGVyPWEuY2FjaGVkUGxhY2VIb2xkZXIsZS5maWx0ZXJhYmxlJiYhZS5yZXNlcnZlS2V5d29yZCYmKGEucXVlcnk9XCJcIixOKGEucXVlcnkpKSksUCgpLGUuZmlsdGVyYWJsZSYmIWUubXVsdGlwbGUmJihhLmlucHV0TGVuZ3RoPTIwKSxwZSh0LGwpfHxudWxsPT09KG49di5mb3JtSXRlbU1pdHQpfHx2b2lkIDA9PT1ufHxuLmVtaXQoXCJlbC5mb3JtLmNoYW5nZVwiLHQpfSkse2ZsdXNoOlwicG9zdFwifSkseSgoKCk9PmEudmlzaWJsZSksKHQ9Pnt2YXIgbCxvO3Q/KG51bGw9PT0obz1udWxsPT09KGw9cy52YWx1ZSl8fHZvaWQgMD09PWw/dm9pZCAwOmwudXBkYXRlKXx8dm9pZCAwPT09b3x8by5jYWxsKGwpLGUuZmlsdGVyYWJsZSYmKGEucXVlcnk9ZS5yZW1vdGU/XCJcIjphLnNlbGVjdGVkTGFiZWwsTihhLnF1ZXJ5KSxlLm11bHRpcGxlP3IudmFsdWUuZm9jdXMoKTooZS5yZW1vdGV8fChhLnNlbGVjdEVtaXR0ZXIuZW1pdChcImVsT3B0aW9uUXVlcnlDaGFuZ2VcIixcIlwiKSxhLnNlbGVjdEVtaXR0ZXIuZW1pdChcImVsT3B0aW9uR3JvdXBRdWVyeUNoYW5nZVwiKSksYS5zZWxlY3RlZExhYmVsJiYoYS5jdXJyZW50UGxhY2Vob2xkZXI9YS5zZWxlY3RlZExhYmVsLGEuc2VsZWN0ZWRMYWJlbD1cIlwiKSkpKTooci52YWx1ZSYmci52YWx1ZS5ibHVyKCksYS5xdWVyeT1cIlwiLGEucHJldmlvdXNRdWVyeT1udWxsLGEuc2VsZWN0ZWRMYWJlbD1cIlwiLGEuaW5wdXRMZW5ndGg9MjAsYS5tZW51VmlzaWJsZU9uRm9jdXM9ITEsSSgpLGsoKCgpPT57ci52YWx1ZSYmXCJcIj09PXIudmFsdWUudmFsdWUmJjA9PT1hLnNlbGVjdGVkLmxlbmd0aCYmKGEuY3VycmVudFBsYWNlaG9sZGVyPWEuY2FjaGVkUGxhY2VIb2xkZXIpfSkpLGUubXVsdGlwbGV8fChhLnNlbGVjdGVkJiYoZS5maWx0ZXJhYmxlJiZlLmFsbG93Q3JlYXRlJiZhLmNyZWF0ZWRTZWxlY3RlZCYmYS5jcmVhdGVkTGFiZWw/YS5zZWxlY3RlZExhYmVsPWEuY3JlYXRlZExhYmVsOmEuc2VsZWN0ZWRMYWJlbD1hLnNlbGVjdGVkLmN1cnJlbnRMYWJlbCxlLmZpbHRlcmFibGUmJihhLnF1ZXJ5PWEuc2VsZWN0ZWRMYWJlbCkpLGUuZmlsdGVyYWJsZSYmKGEuY3VycmVudFBsYWNlaG9sZGVyPWEuY2FjaGVkUGxhY2VIb2xkZXIpKSksbi5lbWl0KFwidmlzaWJsZS1jaGFuZ2VcIix0KX0pKSx5KCgoKT0+Wy4uLmEub3B0aW9uc10pLCgoKT0+e3ZhciB0LGwsbjtpZih6ZSlyZXR1cm47bnVsbD09PShsPW51bGw9PT0odD1zLnZhbHVlKXx8dm9pZCAwPT09dD92b2lkIDA6dC51cGRhdGUpfHx2b2lkIDA9PT1sfHxsLmNhbGwodCksZS5tdWx0aXBsZSYmVCgpO2NvbnN0IG89KG51bGw9PT0obj1kLnZhbHVlKXx8dm9pZCAwPT09bj92b2lkIDA6bi5xdWVyeVNlbGVjdG9yQWxsKFwiaW5wdXRcIikpfHxbXTstMT09PVtdLmluZGV4T2YuY2FsbChvLGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpJiZQKCksZS5kZWZhdWx0Rmlyc3RPcHRpb24mJihlLmZpbHRlcmFibGV8fGUucmVtb3RlKSYmYS5maWx0ZXJlZE9wdGlvbnNDb3VudCYmTygpfSkpLHkoKCgpPT5hLmhvdmVySW5kZXgpLChlPT57XCJudW1iZXJcIj09dHlwZW9mIGUmJmU+LTEmJihwLnZhbHVlPWEub3B0aW9uc1tlXXx8e30pLGEub3B0aW9ucy5mb3JFYWNoKChlPT57ZS5ob3Zlcj1wLnZhbHVlPT09ZX0pKX0pKTtjb25zdCBUPSgpPT57ZS5jb2xsYXBzZVRhZ3MmJiFlLmZpbHRlcmFibGV8fGsoKCgpPT57dmFyIGUsdDtpZighaS52YWx1ZSlyZXR1cm47Y29uc3QgbD1pLnZhbHVlLiRlbC5jaGlsZE5vZGVzLG49W10uZmlsdGVyLmNhbGwobCwoZT0+XCJJTlBVVFwiPT09ZS50YWdOYW1lKSlbMF0sbz11LnZhbHVlLHI9YS5pbml0aWFsSW5wdXRIZWlnaHR8fDQwO24uc3R5bGUuaGVpZ2h0PTA9PT1hLnNlbGVjdGVkLmxlbmd0aD9yK1wicHhcIjpNYXRoLm1heChvP28uY2xpZW50SGVpZ2h0KyhvLmNsaWVudEhlaWdodD5yPzY6MCk6MCxyKStcInB4XCIsYS52aXNpYmxlJiYhMSE9PXgudmFsdWUmJihudWxsPT09KHQ9bnVsbD09PShlPXMudmFsdWUpfHx2b2lkIDA9PT1lP3ZvaWQgMDplLnVwZGF0ZSl8fHZvaWQgMD09PXR8fHQuY2FsbChlKSl9KSl9LE49dD0+e2EucHJldmlvdXNRdWVyeT09PXR8fGEuaXNPbkNvbXBvc2l0aW9ufHwobnVsbCE9PWEucHJldmlvdXNRdWVyeXx8XCJmdW5jdGlvblwiIT10eXBlb2YgZS5maWx0ZXJNZXRob2QmJlwiZnVuY3Rpb25cIiE9dHlwZW9mIGUucmVtb3RlTWV0aG9kPyhhLnByZXZpb3VzUXVlcnk9dCxrKCgoKT0+e3ZhciBlLHQ7YS52aXNpYmxlJiYobnVsbD09PSh0PW51bGw9PT0oZT1zLnZhbHVlKXx8dm9pZCAwPT09ZT92b2lkIDA6ZS51cGRhdGUpfHx2b2lkIDA9PT10fHx0LmNhbGwoZSkpfSkpLGEuaG92ZXJJbmRleD0tMSxlLm11bHRpcGxlJiZlLmZpbHRlcmFibGUmJmsoKCgpPT57Y29uc3QgdD0xNSpyLnZhbHVlLmxlbmd0aCsyMDthLmlucHV0TGVuZ3RoPWUuY29sbGFwc2VUYWdzP01hdGgubWluKDUwLHQpOnQsRCgpLFQoKX0pKSxlLnJlbW90ZSYmXCJmdW5jdGlvblwiPT10eXBlb2YgZS5yZW1vdGVNZXRob2Q/KGEuaG92ZXJJbmRleD0tMSxlLnJlbW90ZU1ldGhvZCh0KSk6XCJmdW5jdGlvblwiPT10eXBlb2YgZS5maWx0ZXJNZXRob2Q/KGUuZmlsdGVyTWV0aG9kKHQpLGEuc2VsZWN0RW1pdHRlci5lbWl0KFwiZWxPcHRpb25Hcm91cFF1ZXJ5Q2hhbmdlXCIpKTooYS5maWx0ZXJlZE9wdGlvbnNDb3VudD1hLm9wdGlvbnNDb3VudCxhLnNlbGVjdEVtaXR0ZXIuZW1pdChcImVsT3B0aW9uUXVlcnlDaGFuZ2VcIix0KSxhLnNlbGVjdEVtaXR0ZXIuZW1pdChcImVsT3B0aW9uR3JvdXBRdWVyeUNoYW5nZVwiKSksZS5kZWZhdWx0Rmlyc3RPcHRpb24mJihlLmZpbHRlcmFibGV8fGUucmVtb3RlKSYmYS5maWx0ZXJlZE9wdGlvbnNDb3VudCYmTygpKTphLnByZXZpb3VzUXVlcnk9dCl9LEQ9KCk9PntcIlwiIT09YS5jdXJyZW50UGxhY2Vob2xkZXImJihhLmN1cnJlbnRQbGFjZWhvbGRlcj1yLnZhbHVlP1wiXCI6YS5jYWNoZWRQbGFjZUhvbGRlcil9LE89KCk9PnthLmhvdmVySW5kZXg9LTE7bGV0IGU9ITE7Zm9yKGxldCB0PWEub3B0aW9ucy5sZW5ndGgtMTt0Pj0wO3QtLSlpZihhLm9wdGlvbnNbdF0uY3JlYXRlZCl7ZT0hMCxhLmhvdmVySW5kZXg9dDticmVha31pZighZSlmb3IobGV0IGU9MDtlIT09YS5vcHRpb25zLmxlbmd0aDsrK2Upe2NvbnN0IHQ9YS5vcHRpb25zW2VdO2lmKGEucXVlcnkpe2lmKCF0LmRpc2FibGVkJiYhdC5ncm91cERpc2FibGVkJiZ0LnZpc2libGUpe2EuaG92ZXJJbmRleD1lO2JyZWFrfX1lbHNlIGlmKHQuaXRlbVNlbGVjdGVkKXthLmhvdmVySW5kZXg9ZTticmVha319fSxQPSgpPT57dmFyIHQ7aWYoIWUubXVsdGlwbGUpe2NvbnN0IGw9VihlLm1vZGVsVmFsdWUpO3JldHVybihudWxsPT09KHQ9bC5wcm9wcyl8fHZvaWQgMD09PXQ/dm9pZCAwOnQuY3JlYXRlZCk/KGEuY3JlYXRlZExhYmVsPWwucHJvcHMudmFsdWUsYS5jcmVhdGVkU2VsZWN0ZWQ9ITApOmEuY3JlYXRlZFNlbGVjdGVkPSExLGEuc2VsZWN0ZWRMYWJlbD1sLmN1cnJlbnRMYWJlbCxhLnNlbGVjdGVkPWwsdm9pZChlLmZpbHRlcmFibGUmJihhLnF1ZXJ5PWEuc2VsZWN0ZWRMYWJlbCkpfWNvbnN0IGw9W107QXJyYXkuaXNBcnJheShlLm1vZGVsVmFsdWUpJiZlLm1vZGVsVmFsdWUuZm9yRWFjaCgoZT0+e2wucHVzaChWKGUpKX0pKSxhLnNlbGVjdGVkPWwsaygoKCk9PntUKCl9KSl9LFY9dD0+e2xldCBsO2NvbnN0IG49XCJvYmplY3RcIj09PVZlKHQpLnRvTG93ZXJDYXNlKCksbz1cIm51bGxcIj09PVZlKHQpLnRvTG93ZXJDYXNlKCksaT1cInVuZGVmaW5lZFwiPT09VmUodCkudG9Mb3dlckNhc2UoKTtmb3IobGV0IG89YS5jYWNoZWRPcHRpb25zLmxlbmd0aC0xO28+PTA7by0tKXtjb25zdCBpPWEuY2FjaGVkT3B0aW9uc1tvXTtpZihuP0ZlKGkudmFsdWUsZS52YWx1ZUtleSk9PT1GZSh0LGUudmFsdWVLZXkpOmkudmFsdWU9PT10KXtsPXt2YWx1ZTp0LGN1cnJlbnRMYWJlbDppLmN1cnJlbnRMYWJlbH07YnJlYWt9fWlmKGwpcmV0dXJuIGw7Y29uc3Qgcj17dmFsdWU6dCxjdXJyZW50TGFiZWw6bnx8b3x8aT9cIlwiOnR9O3JldHVybiBlLm11bHRpcGxlJiYoci5oaXRTdGF0ZT0hMSkscn0sST0oKT0+e3NldFRpbWVvdXQoKCgpPT57ZS5tdWx0aXBsZT9hLnNlbGVjdGVkLmxlbmd0aD4wP2EuaG92ZXJJbmRleD1NYXRoLm1pbi5hcHBseShudWxsLGEuc2VsZWN0ZWQubWFwKChlPT5hLm9wdGlvbnMuaW5kZXhPZihlKSkpKTphLmhvdmVySW5kZXg9LTE6YS5ob3ZlckluZGV4PWEub3B0aW9ucy5pbmRleE9mKGEuc2VsZWN0ZWQpfSksMzAwKX0sQT0oKT0+e3ZhciBlO2EuaW5wdXRXaWR0aD1udWxsPT09KGU9aS52YWx1ZSl8fHZvaWQgMD09PWU/dm9pZCAwOmUuJGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRofSxCPWxlKCgoKT0+e2UuZmlsdGVyYWJsZSYmYS5xdWVyeSE9PWEuc2VsZWN0ZWRMYWJlbCYmKGEucXVlcnk9YS5zZWxlY3RlZExhYmVsLE4oYS5xdWVyeSkpfSksQy52YWx1ZSksTD1sZSgoZT0+e04oZS50YXJnZXQudmFsdWUpfSksQy52YWx1ZSksej10PT57cGUoZS5tb2RlbFZhbHVlLHQpfHxuLmVtaXQoXCJjaGFuZ2VcIix0KX0sRj10PT57dC5zdG9wUHJvcGFnYXRpb24oKTtjb25zdCBsPWUubXVsdGlwbGU/W106XCJcIjtuLmVtaXQoUHQsbCkseihsKSxhLnZpc2libGU9ITEsbi5lbWl0KFwiY2xlYXJcIil9LCQ9KHQsbCk9PntpZihlLm11bHRpcGxlKXtjb25zdCBsPShlLm1vZGVsVmFsdWV8fFtdKS5zbGljZSgpLG89UihsLHQudmFsdWUpO28+LTE/bC5zcGxpY2UobywxKTooZS5tdWx0aXBsZUxpbWl0PD0wfHxsLmxlbmd0aDxlLm11bHRpcGxlTGltaXQpJiZsLnB1c2godC52YWx1ZSksbi5lbWl0KFB0LGwpLHoobCksdC5jcmVhdGVkJiYoYS5xdWVyeT1cIlwiLE4oXCJcIiksYS5pbnB1dExlbmd0aD0yMCksZS5maWx0ZXJhYmxlJiZyLnZhbHVlLmZvY3VzKCl9ZWxzZSBuLmVtaXQoUHQsdC52YWx1ZSkseih0LnZhbHVlKSxhLnZpc2libGU9ITE7YS5pc1NpbGVudEJsdXI9bCxIKCksYS52aXNpYmxlfHxrKCgoKT0+e1codCl9KSl9LFI9KHQ9W10sbCk9PntpZighRGUobCkpcmV0dXJuIHQuaW5kZXhPZihsKTtjb25zdCBhPWUudmFsdWVLZXk7bGV0IG49LTE7cmV0dXJuIHQuc29tZSgoKGUsdCk9PkZlKGUsYSk9PT1GZShsLGEpJiYobj10LCEwKSkpLG59LEg9KCk9PnthLnNvZnRGb2N1cz0hMDtjb25zdCBlPXIudmFsdWV8fGkudmFsdWU7ZSYmZS5mb2N1cygpfSxXPWU9Pnt2YXIgdCxsLGEsbjtjb25zdCBvPUFycmF5LmlzQXJyYXkoZSk/bnVsbD09PSh0PWVbMF0pfHx2b2lkIDA9PT10P3ZvaWQgMDp0LiRlbDplLiRlbDtpZihzLnZhbHVlJiZvKXtjb25zdCBlPW51bGw9PT0obj1udWxsPT09KGE9bnVsbD09PShsPXMudmFsdWUpfHx2b2lkIDA9PT1sP3ZvaWQgMDpsLiRlbCl8fHZvaWQgMD09PWE/dm9pZCAwOmEucXVlcnlTZWxlY3Rvcil8fHZvaWQgMD09PW4/dm9pZCAwOm4uY2FsbChhLFwiLmVsLXNlbGVjdC1kcm9wZG93bl9fd3JhcFwiKTtlJiZobihlLG8pfX0saj1lPT57aWYoIUFycmF5LmlzQXJyYXkoYS5zZWxlY3RlZCkpcmV0dXJuO2NvbnN0IHQ9YS5zZWxlY3RlZFthLnNlbGVjdGVkLmxlbmd0aC0xXTtyZXR1cm4gdD8hMD09PWV8fCExPT09ZT8odC5oaXRTdGF0ZT1lLGUpOih0LmhpdFN0YXRlPSF0LmhpdFN0YXRlLHQuaGl0U3RhdGUpOnZvaWQgMH0sSz0oKT0+e2UuYXV0b21hdGljRHJvcGRvd258fGYudmFsdWV8fChhLm1lbnVWaXNpYmxlT25Gb2N1cz9hLm1lbnVWaXNpYmxlT25Gb2N1cz0hMTphLnZpc2libGU9IWEudmlzaWJsZSxhLnZpc2libGUmJihyLnZhbHVlfHxpLnZhbHVlKS5mb2N1cygpKX0sWT1sKCgoKT0+YS5vcHRpb25zLmZpbHRlcigoZT0+ZS52aXNpYmxlKSkuZXZlcnkoKGU9PmUuZGlzYWJsZWQpKSkpLHE9ZT0+e2lmKGEudmlzaWJsZSl7aWYoMCE9PWEub3B0aW9ucy5sZW5ndGgmJjAhPT1hLmZpbHRlcmVkT3B0aW9uc0NvdW50JiYhWS52YWx1ZSl7XCJuZXh0XCI9PT1lPyhhLmhvdmVySW5kZXgrKyxhLmhvdmVySW5kZXg9PT1hLm9wdGlvbnMubGVuZ3RoJiYoYS5ob3ZlckluZGV4PTApKTpcInByZXZcIj09PWUmJihhLmhvdmVySW5kZXgtLSxhLmhvdmVySW5kZXg8MCYmKGEuaG92ZXJJbmRleD1hLm9wdGlvbnMubGVuZ3RoLTEpKTtjb25zdCB0PWEub3B0aW9uc1thLmhvdmVySW5kZXhdOyEwIT09dC5kaXNhYmxlZCYmITAhPT10Lmdyb3VwRGlzYWJsZWQmJnQudmlzaWJsZXx8cShlKSxrKCgoKT0+VyhwLnZhbHVlKSkpfX1lbHNlIGEudmlzaWJsZT0hMH07cmV0dXJue3NlbGVjdFNpemU6UyxoYW5kbGVSZXNpemU6KCk9Pnt2YXIgdCxsO0EoKSxudWxsPT09KGw9bnVsbD09PSh0PXMudmFsdWUpfHx2b2lkIDA9PT10P3ZvaWQgMDp0LnVwZGF0ZSl8fHZvaWQgMD09PWx8fGwuY2FsbCh0KSxlLm11bHRpcGxlJiZUKCl9LGRlYm91bmNlZE9uSW5wdXRDaGFuZ2U6QixkZWJvdW5jZWRRdWVyeUNoYW5nZTpMLGRlbGV0ZVByZXZUYWc6dD0+e2lmKHQudGFyZ2V0LnZhbHVlLmxlbmd0aDw9MCYmIWooKSl7Y29uc3QgdD1lLm1vZGVsVmFsdWUuc2xpY2UoKTt0LnBvcCgpLG4uZW1pdChQdCx0KSx6KHQpfX0sZGVsZXRlVGFnOih0LGwpPT57Y29uc3Qgbz1hLnNlbGVjdGVkLmluZGV4T2YobCk7aWYobz4tMSYmIWYudmFsdWUpe2NvbnN0IHQ9ZS5tb2RlbFZhbHVlLnNsaWNlKCk7dC5zcGxpY2UobywxKSxuLmVtaXQoUHQsdCkseih0KSxuLmVtaXQoXCJyZW1vdmUtdGFnXCIsbC52YWx1ZSl9dC5zdG9wUHJvcGFnYXRpb24oKX0sZGVsZXRlU2VsZWN0ZWQ6RixoYW5kbGVPcHRpb25TZWxlY3Q6JCxzY3JvbGxUb09wdGlvbjpXLHJlYWRvbmx5Om0scmVzZXRJbnB1dEhlaWdodDpULHNob3dDbG9zZTpnLGljb25DbGFzczpiLHNob3dOZXdPcHRpb246Xyxjb2xsYXBzZVRhZ1NpemU6RSxzZXRTZWxlY3RlZDpQLG1hbmFnZVBsYWNlaG9sZGVyOkQsc2VsZWN0RGlzYWJsZWQ6ZixlbXB0eVRleHQ6eCx0b2dnbGVMYXN0T3B0aW9uSGl0U3RhdGU6aixyZXNldElucHV0U3RhdGU6ZT0+e2UuY29kZSE9PWZ0LmJhY2tzcGFjZSYmaighMSksYS5pbnB1dExlbmd0aD0xNSpyLnZhbHVlLmxlbmd0aCsyMCxUKCl9LGhhbmRsZUNvbXBvc2l0aW9uOmU9Pntjb25zdCB0PWUudGFyZ2V0LnZhbHVlO2lmKFwiY29tcG9zaXRpb25lbmRcIj09PWUudHlwZSlhLmlzT25Db21wb3NpdGlvbj0hMSxrKCgoKT0+Tih0KSkpO2Vsc2V7Y29uc3QgZT10W3QubGVuZ3RoLTFdfHxcIlwiO2EuaXNPbkNvbXBvc2l0aW9uPSFJdChlKX19LG9uT3B0aW9uQ3JlYXRlOmU9PnthLm9wdGlvbnNDb3VudCsrLGEuZmlsdGVyZWRPcHRpb25zQ291bnQrKyxhLm9wdGlvbnMucHVzaChlKSxhLmNhY2hlZE9wdGlvbnMucHVzaChlKX0sb25PcHRpb25EZXN0cm95OmU9PntlPi0xJiYoYS5vcHRpb25zQ291bnQtLSxhLmZpbHRlcmVkT3B0aW9uc0NvdW50LS0sYS5vcHRpb25zLnNwbGljZShlLDEpKX0saGFuZGxlTWVudUVudGVyOigpPT57aygoKCk9PlcoYS5zZWxlY3RlZCkpKX0saGFuZGxlRm9jdXM6dD0+e2Euc29mdEZvY3VzP2Euc29mdEZvY3VzPSExOigoZS5hdXRvbWF0aWNEcm9wZG93bnx8ZS5maWx0ZXJhYmxlKSYmKGEudmlzaWJsZT0hMCxlLmZpbHRlcmFibGUmJihhLm1lbnVWaXNpYmxlT25Gb2N1cz0hMCkpLG4uZW1pdChcImZvY3VzXCIsdCkpfSxibHVyOigpPT57YS52aXNpYmxlPSExLGkudmFsdWUuYmx1cigpfSxoYW5kbGVCbHVyOmU9PntrKCgoKT0+e2EuaXNTaWxlbnRCbHVyP2EuaXNTaWxlbnRCbHVyPSExOm4uZW1pdChcImJsdXJcIixlKX0pKSxhLnNvZnRGb2N1cz0hMX0saGFuZGxlQ2xlYXJDbGljazplPT57RihlKX0saGFuZGxlQ2xvc2U6KCk9PnthLnZpc2libGU9ITF9LHRvZ2dsZU1lbnU6SyxzZWxlY3RPcHRpb246KCk9PnthLnZpc2libGU/YS5vcHRpb25zW2EuaG92ZXJJbmRleF0mJiQoYS5vcHRpb25zW2EuaG92ZXJJbmRleF0sdm9pZCAwKTpLKCl9LGdldFZhbHVlS2V5OnQ9PkRlKHQudmFsdWUpP0ZlKHQudmFsdWUsZS52YWx1ZUtleSk6dC52YWx1ZSxuYXZpZ2F0ZU9wdGlvbnM6cSxkcm9wTWVudVZpc2libGU6TSxyZWZlcmVuY2U6aSxpbnB1dDpyLHBvcHBlcjpzLHRhZ3M6dSxzZWxlY3RXcmFwcGVyOmQsc2Nyb2xsYmFyOmN9fTt2YXIgTXM9ZSh7bmFtZTpcIkVsU2VsZWN0XCIsY29tcG9uZW50TmFtZTpcIkVsU2VsZWN0XCIsY29tcG9uZW50czp7RWxJbnB1dDpXdCxFbFNlbGVjdE1lbnU6U3MsRWxPcHRpb246X3MsRWxUYWc6a24sRWxTY3JvbGxiYXI6bmwsRWxQb3BwZXI6U2x9LGRpcmVjdGl2ZXM6e0NsaWNrT3V0c2lkZTpNdH0scHJvcHM6e25hbWU6U3RyaW5nLGlkOlN0cmluZyxtb2RlbFZhbHVlOltBcnJheSxTdHJpbmcsTnVtYmVyXSxhdXRvY29tcGxldGU6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJvZmZcIn0sYXV0b21hdGljRHJvcGRvd246Qm9vbGVhbixzaXplOnt0eXBlOlN0cmluZyx2YWxpZGF0b3I6QXR9LGRpc2FibGVkOkJvb2xlYW4sY2xlYXJhYmxlOkJvb2xlYW4sZmlsdGVyYWJsZTpCb29sZWFuLGFsbG93Q3JlYXRlOkJvb2xlYW4sbG9hZGluZzpCb29sZWFuLHBvcHBlckNsYXNzOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiXCJ9LHJlbW90ZTpCb29sZWFuLGxvYWRpbmdUZXh0OlN0cmluZyxub01hdGNoVGV4dDpTdHJpbmcsbm9EYXRhVGV4dDpTdHJpbmcscmVtb3RlTWV0aG9kOkZ1bmN0aW9uLGZpbHRlck1ldGhvZDpGdW5jdGlvbixtdWx0aXBsZTpCb29sZWFuLG11bHRpcGxlTGltaXQ6e3R5cGU6TnVtYmVyLGRlZmF1bHQ6MH0scGxhY2Vob2xkZXI6e3R5cGU6U3RyaW5nfSxkZWZhdWx0Rmlyc3RPcHRpb246Qm9vbGVhbixyZXNlcnZlS2V5d29yZDpCb29sZWFuLHZhbHVlS2V5Ont0eXBlOlN0cmluZyxkZWZhdWx0OlwidmFsdWVcIn0sY29sbGFwc2VUYWdzOkJvb2xlYW4scG9wcGVyQXBwZW5kVG9Cb2R5Ont0eXBlOkJvb2xlYW4sZGVmYXVsdDohMH0sY2xlYXJJY29uOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiZWwtaWNvbi1jaXJjbGUtY2xvc2VcIn19LGVtaXRzOltQdCxcImNoYW5nZVwiLFwicmVtb3ZlLXRhZ1wiLFwiY2xlYXJcIixcInZpc2libGUtY2hhbmdlXCIsXCJmb2N1c1wiLFwiYmx1clwiXSxzZXR1cChlLHQpe2NvbnN0IGw9ZnVuY3Rpb24oZSl7Y29uc3QgdD1uZSgpO3JldHVybiBmKHtvcHRpb25zOltdLGNhY2hlZE9wdGlvbnM6W10sY3JlYXRlZExhYmVsOm51bGwsY3JlYXRlZFNlbGVjdGVkOiExLHNlbGVjdGVkOmUubXVsdGlwbGU/W106e30saW5wdXRMZW5ndGg6MjAsaW5wdXRXaWR0aDowLGluaXRpYWxJbnB1dEhlaWdodDowLG9wdGlvbnNDb3VudDowLGZpbHRlcmVkT3B0aW9uc0NvdW50OjAsdmlzaWJsZTohMSxzb2Z0Rm9jdXM6ITEsc2VsZWN0ZWRMYWJlbDpcIlwiLGhvdmVySW5kZXg6LTEscXVlcnk6XCJcIixwcmV2aW91c1F1ZXJ5Om51bGwsaW5wdXRIb3ZlcmluZzohMSxjYWNoZWRQbGFjZUhvbGRlcjpcIlwiLGN1cnJlbnRQbGFjZWhvbGRlcjpxbChcImVsLnNlbGVjdC5wbGFjZWhvbGRlclwiKSxtZW51VmlzaWJsZU9uRm9jdXM6ITEsaXNPbkNvbXBvc2l0aW9uOiExLGlzU2lsZW50Qmx1cjohMSxzZWxlY3RFbWl0dGVyOnR9KX0oZSkse3NlbGVjdFNpemU6YSxyZWFkb25seTpuLGhhbmRsZVJlc2l6ZTpvLGNvbGxhcHNlVGFnU2l6ZTppLGRlYm91bmNlZE9uSW5wdXRDaGFuZ2U6cixkZWJvdW5jZWRRdWVyeUNoYW5nZTpzLGRlbGV0ZVByZXZUYWc6dSxkZWxldGVUYWc6ZCxkZWxldGVTZWxlY3RlZDpjLGhhbmRsZU9wdGlvblNlbGVjdDpwLHNjcm9sbFRvT3B0aW9uOmgsc2V0U2VsZWN0ZWQ6dixyZXNldElucHV0SGVpZ2h0Om0sbWFuYWdlUGxhY2Vob2xkZXI6ZyxzaG93Q2xvc2U6YixzZWxlY3REaXNhYmxlZDp5LGljb25DbGFzczp3LHNob3dOZXdPcHRpb246UyxlbXB0eVRleHQ6RSx0b2dnbGVMYXN0T3B0aW9uSGl0U3RhdGU6TSxyZXNldElucHV0U3RhdGU6VCxoYW5kbGVDb21wb3NpdGlvbjpOLG9uT3B0aW9uQ3JlYXRlOkQsb25PcHRpb25EZXN0cm95OlAsaGFuZGxlTWVudUVudGVyOlYsaGFuZGxlRm9jdXM6SSxibHVyOkEsaGFuZGxlQmx1cjpCLGhhbmRsZUNsZWFyQ2xpY2s6TCxoYW5kbGVDbG9zZTp6LHRvZ2dsZU1lbnU6RixzZWxlY3RPcHRpb246JCxnZXRWYWx1ZUtleTpSLG5hdmlnYXRlT3B0aW9uczpILGRyb3BNZW51VmlzaWJsZTpXLHJlZmVyZW5jZTpqLGlucHV0OksscG9wcGVyOlksdGFnczpxLHNlbGVjdFdyYXBwZXI6VSxzY3JvbGxiYXI6R309RXMoZSxsLHQpLHtmb2N1czpYfT0oUT1qLHtmb2N1czooKT0+e3ZhciBlLHQ7bnVsbD09PSh0PW51bGw9PT0oZT1RLnZhbHVlKXx8dm9pZCAwPT09ZT92b2lkIDA6ZS5mb2N1cyl8fHZvaWQgMD09PXR8fHQuY2FsbChlKX19KTt2YXIgUTtjb25zdHtpbnB1dFdpZHRoOlosc2VsZWN0ZWQ6SixpbnB1dExlbmd0aDplZSxmaWx0ZXJlZE9wdGlvbnNDb3VudDp0ZSx2aXNpYmxlOmxlLHNvZnRGb2N1czphZSxzZWxlY3RlZExhYmVsOm9lLGhvdmVySW5kZXg6aWUscXVlcnk6cmUsaW5wdXRIb3ZlcmluZzpzZSxjdXJyZW50UGxhY2Vob2xkZXI6dWUsbWVudVZpc2libGVPbkZvY3VzOmRlLGlzT25Db21wb3NpdGlvbjpjZSxpc1NpbGVudEJsdXI6cGUsb3B0aW9uczpoZSxjYWNoZWRPcHRpb25zOnZlLG9wdGlvbnNDb3VudDptZX09QyhsKTtyZXR1cm4geChrcyxmKHtwcm9wczplLG9wdGlvbnM6aGUsY2FjaGVkT3B0aW9uczp2ZSxvcHRpb25zQ291bnQ6bWUsZmlsdGVyZWRPcHRpb25zQ291bnQ6dGUsaG92ZXJJbmRleDppZSxoYW5kbGVPcHRpb25TZWxlY3Q6cCxzZWxlY3RFbWl0dGVyOmwuc2VsZWN0RW1pdHRlcixvbk9wdGlvbkNyZWF0ZTpELG9uT3B0aW9uRGVzdHJveTpQLHNlbGVjdFdyYXBwZXI6VSxzZWxlY3RlZDpKLHNldFNlbGVjdGVkOnZ9KSksXygoKCk9PntpZihsLmNhY2hlZFBsYWNlSG9sZGVyPXVlLnZhbHVlPWUucGxhY2Vob2xkZXJ8fHFsKFwiZWwuc2VsZWN0LnBsYWNlaG9sZGVyXCIpLGUubXVsdGlwbGUmJkFycmF5LmlzQXJyYXkoZS5tb2RlbFZhbHVlKSYmZS5tb2RlbFZhbHVlLmxlbmd0aD4wJiYodWUudmFsdWU9XCJcIiksSnQoVS52YWx1ZSxvKSxqLnZhbHVlJiZqLnZhbHVlLiRlbCl7Y29uc3QgZT17bWVkaXVtOjM2LHNtYWxsOjMyLG1pbmk6Mjh9LHQ9ai52YWx1ZS5pbnB1dDtsLmluaXRpYWxJbnB1dEhlaWdodD10LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodHx8ZVthLnZhbHVlXX1lLnJlbW90ZSYmZS5tdWx0aXBsZSYmbSgpLGsoKCgpPT57ai52YWx1ZS4kZWwmJihaLnZhbHVlPWoudmFsdWUuJGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoKX0pKSx2KCl9KSksTygoKCk9PntlbChVLnZhbHVlLG8pfSkpLGUubXVsdGlwbGUmJiFBcnJheS5pc0FycmF5KGUubW9kZWxWYWx1ZSkmJnQuZW1pdChQdCxbXSksIWUubXVsdGlwbGUmJkFycmF5LmlzQXJyYXkoZS5tb2RlbFZhbHVlKSYmdC5lbWl0KFB0LFwiXCIpLHtzZWxlY3RTaXplOmEscmVhZG9ubHk6bixoYW5kbGVSZXNpemU6byxjb2xsYXBzZVRhZ1NpemU6aSxkZWJvdW5jZWRPbklucHV0Q2hhbmdlOnIsZGVib3VuY2VkUXVlcnlDaGFuZ2U6cyxkZWxldGVQcmV2VGFnOnUsZGVsZXRlVGFnOmQsZGVsZXRlU2VsZWN0ZWQ6YyxoYW5kbGVPcHRpb25TZWxlY3Q6cCxzY3JvbGxUb09wdGlvbjpoLGlucHV0V2lkdGg6WixzZWxlY3RlZDpKLGlucHV0TGVuZ3RoOmVlLGZpbHRlcmVkT3B0aW9uc0NvdW50OnRlLHZpc2libGU6bGUsc29mdEZvY3VzOmFlLHNlbGVjdGVkTGFiZWw6b2UsaG92ZXJJbmRleDppZSxxdWVyeTpyZSxpbnB1dEhvdmVyaW5nOnNlLGN1cnJlbnRQbGFjZWhvbGRlcjp1ZSxtZW51VmlzaWJsZU9uRm9jdXM6ZGUsaXNPbkNvbXBvc2l0aW9uOmNlLGlzU2lsZW50Qmx1cjpwZSxvcHRpb25zOmhlLHJlc2V0SW5wdXRIZWlnaHQ6bSxtYW5hZ2VQbGFjZWhvbGRlcjpnLHNob3dDbG9zZTpiLHNlbGVjdERpc2FibGVkOnksaWNvbkNsYXNzOncsc2hvd05ld09wdGlvbjpTLGVtcHR5VGV4dDpFLHRvZ2dsZUxhc3RPcHRpb25IaXRTdGF0ZTpNLHJlc2V0SW5wdXRTdGF0ZTpULGhhbmRsZUNvbXBvc2l0aW9uOk4saGFuZGxlTWVudUVudGVyOlYsaGFuZGxlRm9jdXM6SSxibHVyOkEsaGFuZGxlQmx1cjpCLGhhbmRsZUNsZWFyQ2xpY2s6TCxoYW5kbGVDbG9zZTp6LHRvZ2dsZU1lbnU6RixzZWxlY3RPcHRpb246JCxnZXRWYWx1ZUtleTpSLG5hdmlnYXRlT3B0aW9uczpILGRyb3BNZW51VmlzaWJsZTpXLGZvY3VzOlgscmVmZXJlbmNlOmosaW5wdXQ6Syxwb3BwZXI6WSx0YWdzOnEsc2VsZWN0V3JhcHBlcjpVLHNjcm9sbGJhcjpHfX19KTtjb25zdCBUcz17Y2xhc3M6XCJzZWxlY3QtdHJpZ2dlclwifSxOcz17a2V5OjB9LERzPXtjbGFzczpcImVsLXNlbGVjdF9fdGFncy10ZXh0XCJ9LE9zPXtjbGFzczpcImVsLXNlbGVjdF9fdGFncy10ZXh0XCJ9LFBzPXtjbGFzczpcImVsLXNlbGVjdF9fdGFncy10ZXh0XCJ9LFZzPXtrZXk6MSxjbGFzczpcImVsLXNlbGVjdC1kcm9wZG93bl9fZW1wdHlcIn07TXMucmVuZGVyPWZ1bmN0aW9uKGUsdCxsLGMsdixtKXtjb25zdCBmPVAoXCJlbC10YWdcIiksZz1QKFwiZWwtaW5wdXRcIiksYj1QKFwiZWwtb3B0aW9uXCIpLHk9UChcImVsLXNjcm9sbGJhclwiKSxrPVAoXCJlbC1zZWxlY3QtbWVudVwiKSxDPVAoXCJlbC1wb3BwZXJcIikseD1GKFwiY2xpY2tPdXRzaWRlXCIpO3JldHVybiByKChhKCksbihcImRpdlwiLHtyZWY6XCJzZWxlY3RXcmFwcGVyXCIsY2xhc3M6W1wiZWwtc2VsZWN0XCIsW2Uuc2VsZWN0U2l6ZT9cImVsLXNlbGVjdC0tXCIrZS5zZWxlY3RTaXplOlwiXCJdXSxvbkNsaWNrOnRbMjZdfHwodFsyNl09VCgoKC4uLnQpPT5lLnRvZ2dsZU1lbnUoLi4udCkpLFtcInN0b3BcIl0pKX0sW3MoQyx7cmVmOlwicG9wcGVyXCIsdmlzaWJsZTplLmRyb3BNZW51VmlzaWJsZSxcIm9uVXBkYXRlOnZpc2libGVcIjp0WzI1XXx8KHRbMjVdPXQ9PmUuZHJvcE1lbnVWaXNpYmxlPXQpLHBsYWNlbWVudDpcImJvdHRvbS1zdGFydFwiLFwiYXBwZW5kLXRvLWJvZHlcIjplLnBvcHBlckFwcGVuZFRvQm9keSxcInBvcHBlci1jbGFzc1wiOlwiZWwtc2VsZWN0X19wb3BwZXIgXCIrZS5wb3BwZXJDbGFzcyxcIm1hbnVhbC1tb2RlXCI6XCJcIixlZmZlY3Q6XCJsaWdodFwiLHB1cmU6XCJcIix0cmlnZ2VyOlwiY2xpY2tcIix0cmFuc2l0aW9uOlwiZWwtem9vbS1pbi10b3BcIixcImdwdS1hY2NlbGVyYXRpb25cIjohMSxvbkJlZm9yZUVudGVyOmUuaGFuZGxlTWVudUVudGVyfSx7dHJpZ2dlcjppKCgoKT0+W3MoXCJkaXZcIixUcyxbZS5tdWx0aXBsZT8oYSgpLG4oXCJkaXZcIix7a2V5OjAscmVmOlwidGFnc1wiLGNsYXNzOlwiZWwtc2VsZWN0X190YWdzXCIsc3R5bGU6e1wibWF4LXdpZHRoXCI6ZS5pbnB1dFdpZHRoLTMyK1wicHhcIix3aWR0aDpcIjEwMCVcIn19LFtlLmNvbGxhcHNlVGFncyYmZS5zZWxlY3RlZC5sZW5ndGg/KGEoKSxuKFwic3BhblwiLE5zLFtzKGYse2Nsb3NhYmxlOiFlLnNlbGVjdERpc2FibGVkLHNpemU6ZS5jb2xsYXBzZVRhZ1NpemUsaGl0OmUuc2VsZWN0ZWRbMF0uaGl0U3RhdGUsdHlwZTpcImluZm9cIixcImRpc2FibGUtdHJhbnNpdGlvbnNcIjpcIlwiLG9uQ2xvc2U6dFsxXXx8KHRbMV09dD0+ZS5kZWxldGVUYWcodCxlLnNlbGVjdGVkWzBdKSl9LHtkZWZhdWx0OmkoKCgpPT5bcyhcInNwYW5cIixEcyxwKGUuc2VsZWN0ZWRbMF0uY3VycmVudExhYmVsKSwxKV0pKSxfOjF9LDgsW1wiY2xvc2FibGVcIixcInNpemVcIixcImhpdFwiXSksZS5zZWxlY3RlZC5sZW5ndGg+MT8oYSgpLG4oZix7a2V5OjAsY2xvc2FibGU6ITEsc2l6ZTplLmNvbGxhcHNlVGFnU2l6ZSx0eXBlOlwiaW5mb1wiLFwiZGlzYWJsZS10cmFuc2l0aW9uc1wiOlwiXCJ9LHtkZWZhdWx0OmkoKCgpPT5bcyhcInNwYW5cIixPcyxcIisgXCIrcChlLnNlbGVjdGVkLmxlbmd0aC0xKSwxKV0pKSxfOjF9LDgsW1wic2l6ZVwiXSkpOnUoXCJ2LWlmXCIsITApXSkpOnUoXCJ2LWlmXCIsITApLHUoXCIgPGRpdj4gXCIpLGUuY29sbGFwc2VUYWdzP3UoXCJ2LWlmXCIsITApOihhKCksbihvLHtrZXk6MSxvbkFmdGVyTGVhdmU6ZS5yZXNldElucHV0SGVpZ2h0fSx7ZGVmYXVsdDppKCgoKT0+W3MoXCJzcGFuXCIsbnVsbCxbKGEoITApLG4oRSxudWxsLEgoZS5zZWxlY3RlZCwodD0+KGEoKSxuKGYse2tleTplLmdldFZhbHVlS2V5KHQpLGNsb3NhYmxlOiFlLnNlbGVjdERpc2FibGVkLHNpemU6ZS5jb2xsYXBzZVRhZ1NpemUsaGl0OnQuaGl0U3RhdGUsdHlwZTpcImluZm9cIixcImRpc2FibGUtdHJhbnNpdGlvbnNcIjpcIlwiLG9uQ2xvc2U6bD0+ZS5kZWxldGVUYWcobCx0KX0se2RlZmF1bHQ6aSgoKCk9PltzKFwic3BhblwiLFBzLHAodC5jdXJyZW50TGFiZWwpLDEpXSkpLF86Mn0sMTAzMixbXCJjbG9zYWJsZVwiLFwic2l6ZVwiLFwiaGl0XCIsXCJvbkNsb3NlXCJdKSkpKSwxMjgpKV0pXSkpLF86MX0sOCxbXCJvbkFmdGVyTGVhdmVcIl0pKSx1KFwiIDwvZGl2PiBcIiksZS5maWx0ZXJhYmxlP3IoKGEoKSxuKFwiaW5wdXRcIix7a2V5OjIscmVmOlwiaW5wdXRcIixcIm9uVXBkYXRlOm1vZGVsVmFsdWVcIjp0WzJdfHwodFsyXT10PT5lLnF1ZXJ5PXQpLHR5cGU6XCJ0ZXh0XCIsY2xhc3M6W1wiZWwtc2VsZWN0X19pbnB1dFwiLFtlLnNlbGVjdFNpemU/XCJpcy1cIitlLnNlbGVjdFNpemU6XCJcIl1dLGRpc2FibGVkOmUuc2VsZWN0RGlzYWJsZWQsYXV0b2NvbXBsZXRlOmUuYXV0b2NvbXBsZXRlLHN0eWxlOntcImZsZXgtZ3Jvd1wiOlwiMVwiLHdpZHRoOmUuaW5wdXRMZW5ndGgvKGUuaW5wdXRXaWR0aC0zMikrXCIlXCIsXCJtYXgtd2lkdGhcIjplLmlucHV0V2lkdGgtNDIrXCJweFwifSxvbkZvY3VzOnRbM118fCh0WzNdPSguLi50KT0+ZS5oYW5kbGVGb2N1cyguLi50KSksb25CbHVyOnRbNF18fCh0WzRdPXQ9PmUuc29mdEZvY3VzPSExKSxvbktleXVwOnRbNV18fCh0WzVdPSguLi50KT0+ZS5tYW5hZ2VQbGFjZWhvbGRlciguLi50KSksb25LZXlkb3duOlt0WzZdfHwodFs2XT0oLi4udCk9PmUucmVzZXRJbnB1dFN0YXRlKC4uLnQpKSx0WzddfHwodFs3XT0kKFQoKHQ9PmUubmF2aWdhdGVPcHRpb25zKFwibmV4dFwiKSksW1wicHJldmVudFwiXSksW1wiZG93blwiXSkpLHRbOF18fCh0WzhdPSQoVCgodD0+ZS5uYXZpZ2F0ZU9wdGlvbnMoXCJwcmV2XCIpKSxbXCJwcmV2ZW50XCJdKSxbXCJ1cFwiXSkpLHRbOV18fCh0WzldPSQoVCgodD0+ZS52aXNpYmxlPSExKSxbXCJzdG9wXCIsXCJwcmV2ZW50XCJdKSxbXCJlc2NcIl0pKSx0WzEwXXx8KHRbMTBdPSQoVCgoKC4uLnQpPT5lLnNlbGVjdE9wdGlvbiguLi50KSksW1wic3RvcFwiLFwicHJldmVudFwiXSksW1wiZW50ZXJcIl0pKSx0WzExXXx8KHRbMTFdPSQoKCguLi50KT0+ZS5kZWxldGVQcmV2VGFnKC4uLnQpKSxbXCJkZWxldGVcIl0pKSx0WzEyXXx8KHRbMTJdPSQoKHQ9PmUudmlzaWJsZT0hMSksW1widGFiXCJdKSldLG9uQ29tcG9zaXRpb25zdGFydDp0WzEzXXx8KHRbMTNdPSguLi50KT0+ZS5oYW5kbGVDb21wb3NpdGlvbiguLi50KSksb25Db21wb3NpdGlvbnVwZGF0ZTp0WzE0XXx8KHRbMTRdPSguLi50KT0+ZS5oYW5kbGVDb21wb3NpdGlvbiguLi50KSksb25Db21wb3NpdGlvbmVuZDp0WzE1XXx8KHRbMTVdPSguLi50KT0+ZS5oYW5kbGVDb21wb3NpdGlvbiguLi50KSksb25JbnB1dDp0WzE2XXx8KHRbMTZdPSguLi50KT0+ZS5kZWJvdW5jZWRRdWVyeUNoYW5nZSguLi50KSl9LG51bGwsNDYsW1wiZGlzYWJsZWRcIixcImF1dG9jb21wbGV0ZVwiXSkpLFtbWSxlLnF1ZXJ5XV0pOnUoXCJ2LWlmXCIsITApXSw0KSk6dShcInYtaWZcIiwhMCkscyhnLHtpZDplLmlkLHJlZjpcInJlZmVyZW5jZVwiLG1vZGVsVmFsdWU6ZS5zZWxlY3RlZExhYmVsLFwib25VcGRhdGU6bW9kZWxWYWx1ZVwiOnRbMThdfHwodFsxOF09dD0+ZS5zZWxlY3RlZExhYmVsPXQpLHR5cGU6XCJ0ZXh0XCIscGxhY2Vob2xkZXI6ZS5jdXJyZW50UGxhY2Vob2xkZXIsbmFtZTplLm5hbWUsYXV0b2NvbXBsZXRlOmUuYXV0b2NvbXBsZXRlLHNpemU6ZS5zZWxlY3RTaXplLGRpc2FibGVkOmUuc2VsZWN0RGlzYWJsZWQscmVhZG9ubHk6ZS5yZWFkb25seSxcInZhbGlkYXRlLWV2ZW50XCI6ITEsY2xhc3M6e1wiaXMtZm9jdXNcIjplLnZpc2libGV9LHRhYmluZGV4OmUubXVsdGlwbGUmJmUuZmlsdGVyYWJsZT9cIi0xXCI6bnVsbCxvbkZvY3VzOmUuaGFuZGxlRm9jdXMsb25CbHVyOmUuaGFuZGxlQmx1cixvbklucHV0OmUuZGVib3VuY2VkT25JbnB1dENoYW5nZSxvblBhc3RlOmUuZGVib3VuY2VkT25JbnB1dENoYW5nZSxvbktleWRvd246W3RbMTldfHwodFsxOV09JChUKCh0PT5lLm5hdmlnYXRlT3B0aW9ucyhcIm5leHRcIikpLFtcInN0b3BcIixcInByZXZlbnRcIl0pLFtcImRvd25cIl0pKSx0WzIwXXx8KHRbMjBdPSQoVCgodD0+ZS5uYXZpZ2F0ZU9wdGlvbnMoXCJwcmV2XCIpKSxbXCJzdG9wXCIsXCJwcmV2ZW50XCJdKSxbXCJ1cFwiXSkpLCQoVChlLnNlbGVjdE9wdGlvbixbXCJzdG9wXCIsXCJwcmV2ZW50XCJdKSxbXCJlbnRlclwiXSksdFsyMV18fCh0WzIxXT0kKFQoKHQ9PmUudmlzaWJsZT0hMSksW1wic3RvcFwiLFwicHJldmVudFwiXSksW1wiZXNjXCJdKSksdFsyMl18fCh0WzIyXT0kKCh0PT5lLnZpc2libGU9ITEpLFtcInRhYlwiXSkpXSxvbk1vdXNlZW50ZXI6dFsyM118fCh0WzIzXT10PT5lLmlucHV0SG92ZXJpbmc9ITApLG9uTW91c2VsZWF2ZTp0WzI0XXx8KHRbMjRdPXQ9PmUuaW5wdXRIb3ZlcmluZz0hMSl9LFIoe3N1ZmZpeDppKCgoKT0+W3IocyhcImlcIix7Y2xhc3M6W1wiZWwtc2VsZWN0X19jYXJldFwiLFwiZWwtaW5wdXRfX2ljb25cIixcImVsLWljb24tXCIrZS5pY29uQ2xhc3NdfSxudWxsLDIpLFtbaCwhZS5zaG93Q2xvc2VdXSksZS5zaG93Q2xvc2U/KGEoKSxuKFwiaVwiLHtrZXk6MCxjbGFzczpcImVsLXNlbGVjdF9fY2FyZXQgZWwtaW5wdXRfX2ljb24gXCIrZS5jbGVhckljb24sb25DbGljazp0WzE3XXx8KHRbMTddPSguLi50KT0+ZS5oYW5kbGVDbGVhckNsaWNrKC4uLnQpKX0sbnVsbCwyKSk6dShcInYtaWZcIiwhMCldKSksXzoyfSxbZS4kc2xvdHMucHJlZml4P3tuYW1lOlwicHJlZml4XCIsZm46aSgoKCk9PltkKGUuJHNsb3RzLFwicHJlZml4XCIpXSkpfTp2b2lkIDBdKSwxMDMyLFtcImlkXCIsXCJtb2RlbFZhbHVlXCIsXCJwbGFjZWhvbGRlclwiLFwibmFtZVwiLFwiYXV0b2NvbXBsZXRlXCIsXCJzaXplXCIsXCJkaXNhYmxlZFwiLFwicmVhZG9ubHlcIixcImNsYXNzXCIsXCJ0YWJpbmRleFwiLFwib25Gb2N1c1wiLFwib25CbHVyXCIsXCJvbklucHV0XCIsXCJvblBhc3RlXCIsXCJvbktleWRvd25cIl0pXSldKSksZGVmYXVsdDppKCgoKT0+W3MoayxudWxsLHtkZWZhdWx0OmkoKCgpPT5bcihzKHkse3JlZjpcInNjcm9sbGJhclwiLHRhZzpcInVsXCIsXCJ3cmFwLWNsYXNzXCI6XCJlbC1zZWxlY3QtZHJvcGRvd25fX3dyYXBcIixcInZpZXctY2xhc3NcIjpcImVsLXNlbGVjdC1kcm9wZG93bl9fbGlzdFwiLGNsYXNzOntcImlzLWVtcHR5XCI6IWUuYWxsb3dDcmVhdGUmJmUucXVlcnkmJjA9PT1lLmZpbHRlcmVkT3B0aW9uc0NvdW50fX0se2RlZmF1bHQ6aSgoKCk9PltlLnNob3dOZXdPcHRpb24/KGEoKSxuKGIse2tleTowLHZhbHVlOmUucXVlcnksY3JlYXRlZDohMH0sbnVsbCw4LFtcInZhbHVlXCJdKSk6dShcInYtaWZcIiwhMCksZChlLiRzbG90cyxcImRlZmF1bHRcIildKSksXzozfSw4LFtcImNsYXNzXCJdKSxbW2gsZS5vcHRpb25zLmxlbmd0aD4wJiYhZS5sb2FkaW5nXV0pLGUuZW1wdHlUZXh0JiYoIWUuYWxsb3dDcmVhdGV8fGUubG9hZGluZ3x8ZS5hbGxvd0NyZWF0ZSYmMD09PWUub3B0aW9ucy5sZW5ndGgpPyhhKCksbihFLHtrZXk6MH0sW2UuJHNsb3RzLmVtcHR5P2QoZS4kc2xvdHMsXCJlbXB0eVwiLHtrZXk6MH0pOihhKCksbihcInBcIixWcyxwKGUuZW1wdHlUZXh0KSwxKSldLDY0KSk6dShcInYtaWZcIiwhMCldKSksXzoxfSldKSksXzoxfSw4LFtcInZpc2libGVcIixcImFwcGVuZC10by1ib2R5XCIsXCJwb3BwZXItY2xhc3NcIixcIm9uQmVmb3JlRW50ZXJcIl0pXSwyKSksW1t4LGUuaGFuZGxlQ2xvc2VdXSl9LE1zLl9fZmlsZT1cInBhY2thZ2VzL3NlbGVjdC9zcmMvc2VsZWN0LnZ1ZVwiLE1zLmluc3RhbGw9ZT0+e2UuY29tcG9uZW50KE1zLm5hbWUsTXMpfSxfcy5pbnN0YWxsPWU9PntlLmNvbXBvbmVudChfcy5uYW1lLF9zKX07dmFyIElzPWUoe25hbWU6XCJFbE9wdGlvbkdyb3VwXCIsY29tcG9uZW50TmFtZTpcIkVsT3B0aW9uR3JvdXBcIixwcm9wczp7bGFiZWw6U3RyaW5nLGRpc2FibGVkOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMX19LHNldHVwKGUpe2NvbnN0IGw9dCghMCk7eCh5cyxmKE9iamVjdC5hc3NpZ24oe30sQyhlKSkpKTtjb25zdCBhPXcoa3MpO3JldHVybiBhLnNlbGVjdEVtaXR0ZXIub24oeHMsKCgpPT57dmFyIGU7bC52YWx1ZT1udWxsPT09KGU9bnVsbD09YT92b2lkIDA6YS5vcHRpb25zKXx8dm9pZCAwPT09ZT92b2lkIDA6ZS5zb21lKChlPT4hMD09PWUudmlzaWJsZSkpfSkpLHt2aXNpYmxlOmx9fX0pO2NvbnN0IEFzPXtjbGFzczpcImVsLXNlbGVjdC1ncm91cF9fd3JhcFwifSxCcz17Y2xhc3M6XCJlbC1zZWxlY3QtZ3JvdXBfX3RpdGxlXCJ9LExzPXtjbGFzczpcImVsLXNlbGVjdC1ncm91cFwifTtJcy5yZW5kZXI9ZnVuY3Rpb24oZSx0LGwsbyxpLHUpe3JldHVybiByKChhKCksbihcInVsXCIsQXMsW3MoXCJsaVwiLEJzLHAoZS5sYWJlbCksMSkscyhcImxpXCIsbnVsbCxbcyhcInVsXCIsTHMsW2QoZS4kc2xvdHMsXCJkZWZhdWx0XCIpXSldKV0sNTEyKSksW1toLGUudmlzaWJsZV1dKX0sSXMuX19maWxlPVwicGFja2FnZXMvc2VsZWN0L3NyYy9vcHRpb24tZ3JvdXAudnVlXCIsSXMuaW5zdGFsbD1lPT57ZS5jb21wb25lbnQoSXMubmFtZSxJcyl9O3ZhciB6cz1lKHtuYW1lOlwiRWxQYWdlSGVhZGVyXCIscHJvcHM6e3RpdGxlOnt0eXBlOlN0cmluZyxkZWZhdWx0OigpPT5xbChcImVsLnBhZ2VIZWFkZXIudGl0bGVcIil9LGNvbnRlbnQ6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJcIn19LGVtaXRzOltcImJhY2tcIl0sc2V0dXA6KGUse2VtaXQ6dH0pPT4oe2hhbmRsZUNsaWNrOmZ1bmN0aW9uKCl7dChcImJhY2tcIil9fSl9KTtjb25zdCBGcz17Y2xhc3M6XCJlbC1wYWdlLWhlYWRlclwifSwkcz1zKFwiaVwiLHtjbGFzczpcImVsLWljb24tYmFja1wifSxudWxsLC0xKSxScz17Y2xhc3M6XCJlbC1wYWdlLWhlYWRlcl9fdGl0bGVcIn0sSHM9e2NsYXNzOlwiZWwtcGFnZS1oZWFkZXJfX2NvbnRlbnRcIn07enMucmVuZGVyPWZ1bmN0aW9uKGUsdCxsLG8saSxyKXtyZXR1cm4gYSgpLG4oXCJkaXZcIixGcyxbcyhcImRpdlwiLHtjbGFzczpcImVsLXBhZ2UtaGVhZGVyX19sZWZ0XCIsb25DbGljazp0WzFdfHwodFsxXT0oLi4udCk9PmUuaGFuZGxlQ2xpY2soLi4udCkpfSxbJHMscyhcImRpdlwiLFJzLFtkKGUuJHNsb3RzLFwidGl0bGVcIix7fSwoKCk9PltjKHAoZS50aXRsZSksMSldKSldKV0pLHMoXCJkaXZcIixIcyxbZChlLiRzbG90cyxcImNvbnRlbnRcIix7fSwoKCk9PltjKHAoZS5jb250ZW50KSwxKV0pKV0pXSl9LHpzLl9fZmlsZT1cInBhY2thZ2VzL3BhZ2UtaGVhZGVyL3NyYy9pbmRleC52dWVcIix6cy5pbnN0YWxsPWU9PntlLmNvbXBvbmVudCh6cy5uYW1lLHpzKX07dmFyIFdzPWUoe25hbWU6XCJQcmV2XCIscHJvcHM6e2Rpc2FibGVkOkJvb2xlYW4sY3VycmVudFBhZ2U6e3R5cGU6TnVtYmVyLGRlZmF1bHQ6MX0scHJldlRleHQ6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJcIn19LHNldHVwOmU9Pih7aW50ZXJuYWxEaXNhYmxlZDpsKCgoKT0+ZS5kaXNhYmxlZHx8ZS5jdXJyZW50UGFnZTw9MSkpfSl9KTtjb25zdCBqcz17a2V5OjB9LEtzPXtrZXk6MSxjbGFzczpcImVsLWljb24gZWwtaWNvbi1hcnJvdy1sZWZ0XCJ9O1dzLnJlbmRlcj1mdW5jdGlvbihlLHQsbCxvLGkscil7cmV0dXJuIGEoKSxuKFwiYnV0dG9uXCIse3R5cGU6XCJidXR0b25cIixjbGFzczpcImJ0bi1wcmV2XCIsZGlzYWJsZWQ6ZS5pbnRlcm5hbERpc2FibGVkLG9uQ2xpY2s6dFsxXXx8KHRbMV09VCgoKCk9Pnt9KSxbXCJzZWxmXCIsXCJwcmV2ZW50XCJdKSl9LFtlLnByZXZUZXh0PyhhKCksbihcInNwYW5cIixqcyxwKGUucHJldlRleHQpLDEpKTooYSgpLG4oXCJpXCIsS3MpKV0sOCxbXCJkaXNhYmxlZFwiXSl9LFdzLl9fZmlsZT1cInBhY2thZ2VzL3BhZ2luYXRpb24vc3JjL3ByZXYudnVlXCI7dmFyIFlzPWUoe25hbWU6XCJOZXh0XCIscHJvcHM6e2Rpc2FibGVkOkJvb2xlYW4sY3VycmVudFBhZ2U6e3R5cGU6TnVtYmVyLGRlZmF1bHQ6MX0scGFnZUNvdW50Ont0eXBlOk51bWJlcixkZWZhdWx0OjUwfSxuZXh0VGV4dDp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIlwifX0sc2V0dXA6ZT0+KHtpbnRlcm5hbERpc2FibGVkOmwoKCgpPT5lLmRpc2FibGVkfHxlLmN1cnJlbnRQYWdlPT09ZS5wYWdlQ291bnR8fDA9PT1lLnBhZ2VDb3VudCkpfSl9KTtjb25zdCBxcz17a2V5OjB9LFVzPXtrZXk6MSxjbGFzczpcImVsLWljb24gZWwtaWNvbi1hcnJvdy1yaWdodFwifTtZcy5yZW5kZXI9ZnVuY3Rpb24oZSx0LGwsbyxpLHIpe3JldHVybiBhKCksbihcImJ1dHRvblwiLHt0eXBlOlwiYnV0dG9uXCIsY2xhc3M6XCJidG4tbmV4dFwiLGRpc2FibGVkOmUuaW50ZXJuYWxEaXNhYmxlZCxvbkNsaWNrOnRbMV18fCh0WzFdPVQoKCgpPT57fSksW1wic2VsZlwiLFwicHJldmVudFwiXSkpfSxbZS5uZXh0VGV4dD8oYSgpLG4oXCJzcGFuXCIscXMscChlLm5leHRUZXh0KSwxKSk6KGEoKSxuKFwiaVwiLFVzKSldLDgsW1wiZGlzYWJsZWRcIl0pfSxZcy5fX2ZpbGU9XCJwYWNrYWdlcy9wYWdpbmF0aW9uL3NyYy9uZXh0LnZ1ZVwiO2NvbnN0IEdzPSgpPT57Y29uc3QgZT13KFwicGFnaW5hdGlvblwiLHt9KTtyZXR1cm57cGFnaW5hdGlvbjplLHBhZ2VDb3VudDplLnBhZ2VDb3VudCxkaXNhYmxlZDplLmRpc2FibGVkLGN1cnJlbnRQYWdlOmUuY3VycmVudFBhZ2V9fTt2YXIgWHM9ZSh7bmFtZTpcIlNpemVzXCIsY29tcG9uZW50czp7RWxTZWxlY3Q6TXMsRWxPcHRpb246X3N9LHByb3BzOntwYWdlU2l6ZTpOdW1iZXIscGFnZVNpemVzOnt0eXBlOkFycmF5LGRlZmF1bHQ6KCk9PlsxMCwyMCwzMCw0MCw1MCwxMDBdfSxwb3BwZXJDbGFzczp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIlwifSxkaXNhYmxlZDpCb29sZWFufSxlbWl0czpbXCJwYWdlLXNpemUtY2hhbmdlXCJdLHNldHVwKGUse2VtaXQ6YX0pe2NvbnN0e3BhZ2luYXRpb246bn09R3MoKSxvPXQoZS5wYWdlU2l6ZSk7eSgoKCk9PmUucGFnZVNpemVzKSwoKHQsbCk9PntpZighcGUodCxsKSYmQXJyYXkuaXNBcnJheSh0KSl7Y29uc3QgbD10LmluZGV4T2YoZS5wYWdlU2l6ZSk+LTE/ZS5wYWdlU2l6ZTplLnBhZ2VTaXplc1swXTthKFwicGFnZS1zaXplLWNoYW5nZVwiLGwpfX0pKSx5KCgoKT0+ZS5wYWdlU2l6ZSksKGU9PntvLnZhbHVlPWV9KSk7Y29uc3QgaT1sKCgoKT0+ZS5wYWdlU2l6ZXMpKTtyZXR1cm57dDpxbCxpbm5lclBhZ2VzaXplczppLGlubmVyUGFnZVNpemU6byxoYW5kbGVDaGFuZ2U6ZnVuY3Rpb24oZSl7ZSE9PW8udmFsdWUmJihvLnZhbHVlPWUsbnVsbD09bnx8bi5oYW5kbGVTaXplc0NoYW5nZShOdW1iZXIoZSkpKX19fX0pO2NvbnN0IFFzPXtjbGFzczpcImVsLXBhZ2luYXRpb25fX3NpemVzXCJ9O1hzLnJlbmRlcj1mdW5jdGlvbihlLHQsbCxvLHIsdSl7Y29uc3QgZD1QKFwiZWwtb3B0aW9uXCIpLGM9UChcImVsLXNlbGVjdFwiKTtyZXR1cm4gYSgpLG4oXCJzcGFuXCIsUXMsW3MoYyx7XCJtb2RlbC12YWx1ZVwiOmUuaW5uZXJQYWdlU2l6ZSxkaXNhYmxlZDplLmRpc2FibGVkLFwicG9wcGVyLWNsYXNzXCI6ZS5wb3BwZXJDbGFzcyxzaXplOlwibWluaVwiLG9uQ2hhbmdlOmUuaGFuZGxlQ2hhbmdlfSx7ZGVmYXVsdDppKCgoKT0+WyhhKCEwKSxuKEUsbnVsbCxIKGUuaW5uZXJQYWdlc2l6ZXMsKHQ9PihhKCksbihkLHtrZXk6dCx2YWx1ZTp0LGxhYmVsOnQrZS50KFwiZWwucGFnaW5hdGlvbi5wYWdlc2l6ZVwiKX0sbnVsbCw4LFtcInZhbHVlXCIsXCJsYWJlbFwiXSkpKSksMTI4KSldKSksXzoxfSw4LFtcIm1vZGVsLXZhbHVlXCIsXCJkaXNhYmxlZFwiLFwicG9wcGVyLWNsYXNzXCIsXCJvbkNoYW5nZVwiXSldKX0sWHMuX19maWxlPVwicGFja2FnZXMvcGFnaW5hdGlvbi9zcmMvc2l6ZXMudnVlXCI7dmFyIFpzPWUoe2NvbXBvbmVudHM6e0VsSW5wdXQ6V3R9LHNldHVwKCl7Y29uc3R7cGFnaW5hdGlvbjplLHBhZ2VDb3VudDphLGRpc2FibGVkOm4sY3VycmVudFBhZ2U6b309R3MoKSxpPXQobnVsbCkscj1sKCgoKT0+e3ZhciBlO3JldHVybiBudWxsIT09KGU9aS52YWx1ZSkmJnZvaWQgMCE9PWU/ZTpvLnZhbHVlfSkpO3JldHVybnt0OnFsLHVzZXJJbnB1dDppLHBhZ2VDb3VudDphLGRpc2FibGVkOm4saGFuZGxlSW5wdXQ6ZnVuY3Rpb24oZSl7aS52YWx1ZT1OdW1iZXIoZSl9LGhhbmRsZUNoYW5nZTpmdW5jdGlvbih0KXtudWxsPT1lfHxlLmNoYW5nZUV2ZW50KE51bWJlcih0KSksaS52YWx1ZT1udWxsfSxpbm5lclZhbHVlOnJ9fX0pO2NvbnN0IEpzPXtjbGFzczpcImVsLXBhZ2luYXRpb25fX2p1bXBcIn07WnMucmVuZGVyPWZ1bmN0aW9uKGUsdCxsLG8saSxyKXtjb25zdCB1PVAoXCJlbC1pbnB1dFwiKTtyZXR1cm4gYSgpLG4oXCJzcGFuXCIsSnMsW2MocChlLnQoXCJlbC5wYWdpbmF0aW9uLmdvdG9cIikpK1wiIFwiLDEpLHModSx7Y2xhc3M6XCJlbC1wYWdpbmF0aW9uX19lZGl0b3IgaXMtaW4tcGFnaW5hdGlvblwiLG1pbjoxLG1heDplLnBhZ2VDb3VudCxkaXNhYmxlZDplLmRpc2FibGVkLFwibW9kZWwtdmFsdWVcIjplLmlubmVyVmFsdWUsdHlwZTpcIm51bWJlclwiLFwib25VcGRhdGU6bW9kZWxWYWx1ZVwiOmUuaGFuZGxlSW5wdXQsb25DaGFuZ2U6ZS5oYW5kbGVDaGFuZ2V9LG51bGwsOCxbXCJtYXhcIixcImRpc2FibGVkXCIsXCJtb2RlbC12YWx1ZVwiLFwib25VcGRhdGU6bW9kZWxWYWx1ZVwiLFwib25DaGFuZ2VcIl0pLGMoXCIgXCIrcChlLnQoXCJlbC5wYWdpbmF0aW9uLnBhZ2VDbGFzc2lmaWVyXCIpKSwxKV0pfSxacy5fX2ZpbGU9XCJwYWNrYWdlcy9wYWdpbmF0aW9uL3NyYy9qdW1wZXIudnVlXCI7dmFyIGV1PWUoe25hbWU6XCJUb3RhbFwiLHByb3BzOnt0b3RhbDp7dHlwZTpOdW1iZXIsZGVmYXVsdDoxZTN9fSxzZXR1cDooKT0+KHt0OnFsfSl9KTtjb25zdCB0dT17Y2xhc3M6XCJlbC1wYWdpbmF0aW9uX190b3RhbFwifTtldS5yZW5kZXI9ZnVuY3Rpb24oZSx0LGwsbyxpLHIpe3JldHVybiBhKCksbihcInNwYW5cIix0dSxwKGUudChcImVsLnBhZ2luYXRpb24udG90YWxcIix7dG90YWw6ZS50b3RhbH0pKSwxKX0sZXUuX19maWxlPVwicGFja2FnZXMvcGFnaW5hdGlvbi9zcmMvdG90YWwudnVlXCI7dmFyIGx1PWUoe25hbWU6XCJFbFBhZ2VyXCIscHJvcHM6e2N1cnJlbnRQYWdlOnt0eXBlOk51bWJlcixkZWZhdWx0OjF9LHBhZ2VDb3VudDp7dHlwZTpOdW1iZXJ9LHBhZ2VyQ291bnQ6e3R5cGU6TnVtYmVyLGRlZmF1bHQ6N30sZGlzYWJsZWQ6Qm9vbGVhbn0sZW1pdHM6W1wiY2hhbmdlXCJdLHNldHVwKGUse2VtaXQ6YX0pe2NvbnN0IG49dCghMSksbz10KCExKSxpPXQoXCJlbC1pY29uLW1vcmVcIikscj10KFwiZWwtaWNvbi1tb3JlXCIpLHM9bCgoKCk9Pntjb25zdCB0PWUucGFnZXJDb3VudCxsPSh0LTEpLzIsYT1OdW1iZXIoZS5jdXJyZW50UGFnZSksbj1OdW1iZXIoZS5wYWdlQ291bnQpO2xldCBvPSExLGk9ITE7bj50JiYoYT50LWwmJihvPSEwKSxhPG4tbCYmKGk9ITApKTtjb25zdCByPVtdO2lmKG8mJiFpKXtmb3IobGV0IGU9bi0odC0yKTtlPG47ZSsrKXIucHVzaChlKX1lbHNlIGlmKCFvJiZpKWZvcihsZXQgZT0yO2U8dDtlKyspci5wdXNoKGUpO2Vsc2UgaWYobyYmaSl7Y29uc3QgZT1NYXRoLmZsb29yKHQvMiktMTtmb3IobGV0IHQ9YS1lO3Q8PWErZTt0Kyspci5wdXNoKHQpfWVsc2UgZm9yKGxldCBlPTI7ZTxuO2UrKylyLnB1c2goZSk7cmV0dXJuIHJ9KSk7cmV0dXJuIGcoKCgpPT57Y29uc3QgdD0oZS5wYWdlckNvdW50LTEpLzI7bi52YWx1ZT0hMSxvLnZhbHVlPSExLGUucGFnZUNvdW50PmUucGFnZXJDb3VudCYmKGUuY3VycmVudFBhZ2U+ZS5wYWdlckNvdW50LXQmJihuLnZhbHVlPSEwKSxlLmN1cnJlbnRQYWdlPGUucGFnZUNvdW50LXQmJihvLnZhbHVlPSEwKSl9KSksZygoKCk9PntuLnZhbHVlfHwoci52YWx1ZT1cImVsLWljb24tbW9yZVwiKX0pKSxnKCgoKT0+e28udmFsdWV8fChpLnZhbHVlPVwiZWwtaWNvbi1tb3JlXCIpfSkpLHtzaG93UHJldk1vcmU6bixzaG93TmV4dE1vcmU6byxxdWlja25leHRJY29uQ2xhc3M6aSxxdWlja3ByZXZJY29uQ2xhc3M6cixwYWdlcnM6cyxvbk1vdXNlZW50ZXI6ZnVuY3Rpb24odCl7ZS5kaXNhYmxlZHx8KFwibGVmdFwiPT09dD9yLnZhbHVlPVwiZWwtaWNvbi1kLWFycm93LWxlZnRcIjppLnZhbHVlPVwiZWwtaWNvbi1kLWFycm93LXJpZ2h0XCIpfSxvblBhZ2VyQ2xpY2s6ZnVuY3Rpb24odCl7Y29uc3QgbD10LnRhcmdldDtpZihcInVsXCI9PT1sLnRhZ05hbWUudG9Mb3dlckNhc2UoKXx8ZS5kaXNhYmxlZClyZXR1cm47bGV0IG49TnVtYmVyKGwudGV4dENvbnRlbnQpO2NvbnN0IG89ZS5wYWdlQ291bnQsaT1lLmN1cnJlbnRQYWdlLHI9ZS5wYWdlckNvdW50LTI7bC5jbGFzc05hbWUuaW5jbHVkZXMoXCJtb3JlXCIpJiYobC5jbGFzc05hbWUuaW5jbHVkZXMoXCJxdWlja3ByZXZcIik/bj1pLXI6bC5jbGFzc05hbWUuaW5jbHVkZXMoXCJxdWlja25leHRcIikmJihuPWkrcikpLGlzTmFOKG4pfHwobjwxJiYobj0xKSxuPm8mJihuPW8pKSxuIT09aSYmYShcImNoYW5nZVwiLG4pfX19fSk7bHUucmVuZGVyPWZ1bmN0aW9uKGUsdCxsLG8saSxyKXtyZXR1cm4gYSgpLG4oXCJ1bFwiLHtjbGFzczpcImVsLXBhZ2VyXCIsb25DbGljazp0WzVdfHwodFs1XT0oLi4udCk9PmUub25QYWdlckNsaWNrKC4uLnQpKX0sW2UucGFnZUNvdW50PjA/KGEoKSxuKFwibGlcIix7a2V5OjAsY2xhc3M6W3thY3RpdmU6MT09PWUuY3VycmVudFBhZ2UsZGlzYWJsZWQ6ZS5kaXNhYmxlZH0sXCJudW1iZXJcIl19LFwiIDEgXCIsMikpOnUoXCJ2LWlmXCIsITApLGUuc2hvd1ByZXZNb3JlPyhhKCksbihcImxpXCIse2tleToxLGNsYXNzOltcImVsLWljb24gbW9yZSBidG4tcXVpY2twcmV2XCIsW2UucXVpY2twcmV2SWNvbkNsYXNzLHtkaXNhYmxlZDplLmRpc2FibGVkfV1dLG9uTW91c2VlbnRlcjp0WzFdfHwodFsxXT10PT5lLm9uTW91c2VlbnRlcihcImxlZnRcIikpLG9uTW91c2VsZWF2ZTp0WzJdfHwodFsyXT10PT5lLnF1aWNrcHJldkljb25DbGFzcz1cImVsLWljb24tbW9yZVwiKX0sbnVsbCwzNCkpOnUoXCJ2LWlmXCIsITApLChhKCEwKSxuKEUsbnVsbCxIKGUucGFnZXJzLCh0PT4oYSgpLG4oXCJsaVwiLHtrZXk6dCxjbGFzczpbe2FjdGl2ZTplLmN1cnJlbnRQYWdlPT09dCxkaXNhYmxlZDplLmRpc2FibGVkfSxcIm51bWJlclwiXX0scCh0KSwzKSkpKSwxMjgpKSxlLnNob3dOZXh0TW9yZT8oYSgpLG4oXCJsaVwiLHtrZXk6MixjbGFzczpbXCJlbC1pY29uIG1vcmUgYnRuLXF1aWNrbmV4dFwiLFtlLnF1aWNrbmV4dEljb25DbGFzcyx7ZGlzYWJsZWQ6ZS5kaXNhYmxlZH1dXSxvbk1vdXNlZW50ZXI6dFszXXx8KHRbM109dD0+ZS5vbk1vdXNlZW50ZXIoXCJyaWdodFwiKSksb25Nb3VzZWxlYXZlOnRbNF18fCh0WzRdPXQ9PmUucXVpY2tuZXh0SWNvbkNsYXNzPVwiZWwtaWNvbi1tb3JlXCIpfSxudWxsLDM0KSk6dShcInYtaWZcIiwhMCksZS5wYWdlQ291bnQ+MT8oYSgpLG4oXCJsaVwiLHtrZXk6MyxjbGFzczpbe2FjdGl2ZTplLmN1cnJlbnRQYWdlPT09ZS5wYWdlQ291bnQsZGlzYWJsZWQ6ZS5kaXNhYmxlZH0sXCJudW1iZXJcIl19LHAoZS5wYWdlQ291bnQpLDMpKTp1KFwidi1pZlwiLCEwKV0pfSxsdS5fX2ZpbGU9XCJwYWNrYWdlcy9wYWdpbmF0aW9uL3NyYy9wYWdlci52dWVcIjtjb25zdCBhdT1lPT5OdW1iZXIuaXNOYU4oZSk/MTA6ZTt2YXIgbnU9ZSh7bmFtZTpcIkVsUGFnaW5hdGlvblwiLGNvbXBvbmVudHM6e1ByZXY6V3MsTmV4dDpZcyxTaXplczpYcyxKdW1wZXI6WnMsVG90YWw6ZXUsUGFnZXI6bHV9LHByb3BzOntwYWdlU2l6ZTp7dHlwZTpOdW1iZXIsZGVmYXVsdDoxMH0sc21hbGw6Qm9vbGVhbix0b3RhbDp7dHlwZTpOdW1iZXJ9LHBhZ2VDb3VudDp7dHlwZTpOdW1iZXJ9LHBhZ2VyQ291bnQ6e3R5cGU6TnVtYmVyLHZhbGlkYXRvcjplPT4oMHxlKT09PWUmJmU+NCYmZTwyMiYmZSUyPT0xLGRlZmF1bHQ6N30sY3VycmVudFBhZ2U6e3R5cGU6TnVtYmVyLGRlZmF1bHQ6MX0sbGF5b3V0Ont0eXBlOlN0cmluZyxkZWZhdWx0OlwicHJldiwgcGFnZXIsIG5leHQsIGp1bXBlciwgLT4sIHRvdGFsXCJ9LHBhZ2VTaXplczp7dHlwZTpBcnJheSxkZWZhdWx0OigpPT5bMTAsMjAsMzAsNDAsNTAsMTAwXX0scG9wcGVyQ2xhc3M6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJcIn0scHJldlRleHQ6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJcIn0sbmV4dFRleHQ6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJcIn0sYmFja2dyb3VuZDpCb29sZWFuLGRpc2FibGVkOkJvb2xlYW4saGlkZU9uU2luZ2xlUGFnZTpCb29sZWFufSxlbWl0czpbXCJzaXplLWNoYW5nZVwiLFwiY3VycmVudC1jaGFuZ2VcIixcInByZXYtY2xpY2tcIixcIm5leHQtY2xpY2tcIixcInVwZGF0ZTpjdXJyZW50UGFnZVwiLFwidXBkYXRlOnBhZ2VTaXplXCJdLHNldHVwKGUse2VtaXQ6YX0pe2NvbnN0IG49dCgtMSksbz10KCExKSxpPXQoYXUoZS5wYWdlU2l6ZSkpLHI9bCgoKCk9PlwibnVtYmVyXCI9PXR5cGVvZiBlLnRvdGFsP01hdGgubWF4KDEsTWF0aC5jZWlsKGUudG90YWwvaS52YWx1ZSkpOlwibnVtYmVyXCI9PXR5cGVvZiBlLnBhZ2VDb3VudD9NYXRoLm1heCgxLGUucGFnZUNvdW50KTpudWxsKSkscz10KGMoZS5jdXJyZW50UGFnZSkpO2Z1bmN0aW9uIHUoKXtrKCgoKT0+eyhzLnZhbHVlIT09bi52YWx1ZXx8by52YWx1ZSkmJihuLnZhbHVlPXMudmFsdWUsby52YWx1ZT0hMSl9KSl9ZnVuY3Rpb24gZChlKXtzLnZhbHVlPWMoZSksby52YWx1ZT0hMH1mdW5jdGlvbiBjKGUpe2xldCB0O1wic3RyaW5nXCI9PXR5cGVvZiBlJiYoZT1wYXJzZUludChlLDEwKSk7cmV0dXJuXCJudW1iZXJcIj09dHlwZW9mIHIudmFsdWU/ZTwxP3Q9MTplPnIudmFsdWUmJih0PXIudmFsdWUpOihpc05hTihlKXx8ZTwxKSYmKHQ9MSksKHZvaWQgMD09PXQmJmlzTmFOKGUpfHwwPT09dCkmJih0PTEpLHZvaWQgMD09PXQ/ZTp0fXJldHVybiB5KCgoKT0+YyhlLmN1cnJlbnRQYWdlKSksKGU9PntzLnZhbHVlPWV9KSkseSgoKCk9PmUucGFnZVNpemUpLChlPT57aS52YWx1ZT1hdShlKX0pKSx5KHMsKGU9PnthKFwidXBkYXRlOmN1cnJlbnRQYWdlXCIsZSksYShcImN1cnJlbnQtY2hhbmdlXCIsZSl9KSkseSgoKCk9PnIudmFsdWUpLChlPT57Y29uc3QgdD1zLnZhbHVlO2U+MCYmMD09PXQ/cy52YWx1ZT0xOnQ+ZSYmKHMudmFsdWU9MD09PWU/MTplLG8udmFsdWUmJnUoKSksby52YWx1ZT0hMX0pKSx4KFwicGFnaW5hdGlvblwiLHtwYWdlQ291bnQ6bCgoKCk9PmUucGFnZUNvdW50KSksZGlzYWJsZWQ6bCgoKCk9PmUuZGlzYWJsZWQpKSxjdXJyZW50UGFnZTpsKCgoKT0+cy52YWx1ZSkpLGNoYW5nZUV2ZW50OmQsaGFuZGxlU2l6ZXNDaGFuZ2U6ZnVuY3Rpb24oZSl7by52YWx1ZT0hMCxpLnZhbHVlPWUsYShcInNpemUtY2hhbmdlXCIsZSl9fSkse2ludGVybmFsQ3VycmVudFBhZ2U6cyxpbnRlcm5hbFBhZ2VTaXplOmksbGFzdEVtaXR0ZWRQYWdlOm4sdXNlckNoYW5nZVBhZ2VTaXplOm8saW50ZXJuYWxQYWdlQ291bnQ6cixnZXRWYWxpZEN1cnJlbnRQYWdlOmMsZW1pdENoYW5nZTp1LGhhbmRsZUN1cnJlbnRDaGFuZ2U6ZCxwcmV2OmZ1bmN0aW9uKCl7aWYoZS5kaXNhYmxlZClyZXR1cm47Y29uc3QgdD1zLnZhbHVlLTE7cy52YWx1ZT1jKHQpLGEoXCJwcmV2LWNsaWNrXCIscyksdSgpfSxuZXh0OmZ1bmN0aW9uKCl7aWYoZS5kaXNhYmxlZClyZXR1cm47Y29uc3QgdD1zLnZhbHVlKzE7cy52YWx1ZT1jKHQpLGEoXCJuZXh0LWNsaWNrXCIscy52YWx1ZSksdSgpfX19LHJlbmRlcigpe3ZhciBlLHQsbDtjb25zdCBhPXRoaXMubGF5b3V0O2lmKCFhKXJldHVybiBudWxsO2lmKHRoaXMuaGlkZU9uU2luZ2xlUGFnZSYmKCF0aGlzLmludGVybmFsUGFnZUNvdW50fHwxPT09dGhpcy5pbnRlcm5hbFBhZ2VDb3VudCkpcmV0dXJuIG51bGw7Y29uc3Qgbj1EKFwiZGl2XCIse2NsYXNzOltcImVsLXBhZ2luYXRpb25cIix7XCJpcy1iYWNrZ3JvdW5kXCI6dGhpcy5iYWNrZ3JvdW5kLFwiZWwtcGFnaW5hdGlvbi0tc21hbGxcIjp0aGlzLnNtYWxsfV19KSxvPVtdLGk9RChcImRpdlwiLHtjbGFzczpcImVsLXBhZ2luYXRpb25fX3JpZ2h0d3JhcHBlclwifSkscj17cHJldjpEKFdzLHtkaXNhYmxlZDp0aGlzLmRpc2FibGVkLGN1cnJlbnRQYWdlOnRoaXMuaW50ZXJuYWxDdXJyZW50UGFnZSxwcmV2VGV4dDp0aGlzLnByZXZUZXh0LG9uQ2xpY2s6dGhpcy5wcmV2fSksanVtcGVyOkQoWnMpLHBhZ2VyOkQobHUse2N1cnJlbnRQYWdlOnRoaXMuaW50ZXJuYWxDdXJyZW50UGFnZSxwYWdlQ291bnQ6dGhpcy5pbnRlcm5hbFBhZ2VDb3VudCxwYWdlckNvdW50OnRoaXMucGFnZXJDb3VudCxvbkNoYW5nZTp0aGlzLmhhbmRsZUN1cnJlbnRDaGFuZ2UsZGlzYWJsZWQ6dGhpcy5kaXNhYmxlZH0pLG5leHQ6RChZcyx7ZGlzYWJsZWQ6dGhpcy5kaXNhYmxlZCxjdXJyZW50UGFnZTp0aGlzLmludGVybmFsQ3VycmVudFBhZ2UscGFnZUNvdW50OnRoaXMuaW50ZXJuYWxQYWdlQ291bnQsbmV4dFRleHQ6dGhpcy5uZXh0VGV4dCxvbkNsaWNrOnRoaXMubmV4dH0pLHNpemVzOkQoWHMse3BhZ2VTaXplOnRoaXMucGFnZVNpemUscGFnZVNpemVzOnRoaXMucGFnZVNpemVzLHBvcHBlckNsYXNzOnRoaXMucG9wcGVyQ2xhc3MsZGlzYWJsZWQ6dGhpcy5kaXNhYmxlZH0pLHNsb3Q6bnVsbCE9PShsPW51bGw9PT0odD1udWxsPT09KGU9dGhpcy4kc2xvdHMpfHx2b2lkIDA9PT1lP3ZvaWQgMDplLmRlZmF1bHQpfHx2b2lkIDA9PT10P3ZvaWQgMDp0LmNhbGwoZSkpJiZ2b2lkIDAhPT1sP2w6bnVsbCx0b3RhbDpEKGV1LHt0b3RhbDp0aGlzLnRvdGFsfSl9LHM9YS5zcGxpdChcIixcIikubWFwKChlPT5lLnRyaW0oKSkpO2xldCB1PSExO3JldHVybiBzLmZvckVhY2goKGU9PntcIi0+XCIhPT1lP3V8fG8ucHVzaChyW2VdKTp1PSEwfSkpLHUmJm8udW5zaGlmdChpKSxEKG4se30sbyl9fSk7bnUuaW5zdGFsbD1lPT57ZS5jb21wb25lbnQobnUubmFtZSxudSl9O3ZhciBvdT1lKHtuYW1lOlwiRWxQb3Bjb25maXJtXCIsY29tcG9uZW50czp7RWxCdXR0b246JGwsRWxQb3BwZXI6U2x9LHByb3BzOnt0aXRsZTp7dHlwZTpTdHJpbmd9LGNvbmZpcm1CdXR0b25UZXh0Ont0eXBlOlN0cmluZ30sY2FuY2VsQnV0dG9uVGV4dDp7dHlwZTpTdHJpbmd9LGNvbmZpcm1CdXR0b25UeXBlOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwicHJpbWFyeVwifSxjYW5jZWxCdXR0b25UeXBlOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwidGV4dFwifSxpY29uOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiZWwtaWNvbi1xdWVzdGlvblwifSxpY29uQ29sb3I6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCIjZjkwXCJ9LGhpZGVJY29uOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMX19LGVtaXRzOltcImNvbmZpcm1cIixcImNhbmNlbFwiXSxzZXR1cChlLHtlbWl0OmF9KXtjb25zdCBuPXQoITEpLG89bCgoKCk9PmUuY29uZmlybUJ1dHRvblRleHR8fHFsKFwiZWwucG9wY29uZmlybS5jb25maXJtQnV0dG9uVGV4dFwiKSkpLGk9bCgoKCk9PmUuY2FuY2VsQnV0dG9uVGV4dHx8cWwoXCJlbC5wb3Bjb25maXJtLmNhbmNlbEJ1dHRvblRleHRcIikpKTtyZXR1cm57dmlzaWJsZTpuLGNvbmZpcm06KCk9PntuLnZhbHVlPSExLGEoXCJjb25maXJtXCIpfSxjYW5jZWw6KCk9PntuLnZhbHVlPSExLGEoXCJjYW5jZWxcIil9LGNvbmZpcm1CdXR0b25UZXh0XzpvLGNhbmNlbEJ1dHRvblRleHRfOml9fX0pO2NvbnN0IGl1PXtjbGFzczpcImVsLXBvcGNvbmZpcm1cIn0scnU9e2NsYXNzOlwiZWwtcG9wY29uZmlybV9fbWFpblwifSxzdT17Y2xhc3M6XCJlbC1wb3Bjb25maXJtX19hY3Rpb25cIn07b3UucmVuZGVyPWZ1bmN0aW9uKGUsdCxsLG8scixoKXtjb25zdCB2PVAoXCJlbC1idXR0b25cIiksbT1QKFwiZWwtcG9wcGVyXCIpO3JldHVybiBhKCksbihtLHt2aXNpYmxlOmUudmlzaWJsZSxcIm9uVXBkYXRlOnZpc2libGVcIjp0WzFdfHwodFsxXT10PT5lLnZpc2libGU9dCksdHJpZ2dlcjpbXCJjbGlja1wiXSxlZmZlY3Q6XCJsaWdodFwiLFwicG9wcGVyLWNsYXNzXCI6XCJlbC1wb3BvdmVyXCIsXCJhcHBlbmQtdG8tYm9keVwiOlwiXCJ9LHt0cmlnZ2VyOmkoKCgpPT5bZChlLiRzbG90cyxcInJlZmVyZW5jZVwiKV0pKSxkZWZhdWx0OmkoKCgpPT5bcyhcImRpdlwiLGl1LFtzKFwicFwiLHJ1LFtlLmhpZGVJY29uP3UoXCJ2LWlmXCIsITApOihhKCksbihcImlcIix7a2V5OjAsY2xhc3M6W2UuaWNvbixcImVsLXBvcGNvbmZpcm1fX2ljb25cIl0sc3R5bGU6e2NvbG9yOmUuaWNvbkNvbG9yfX0sbnVsbCw2KSksYyhcIiBcIitwKGUudGl0bGUpLDEpXSkscyhcImRpdlwiLHN1LFtzKHYse3NpemU6XCJtaW5pXCIsdHlwZTplLmNhbmNlbEJ1dHRvblR5cGUsb25DbGljazplLmNhbmNlbH0se2RlZmF1bHQ6aSgoKCk9PltjKHAoZS5jYW5jZWxCdXR0b25UZXh0XyksMSldKSksXzoxfSw4LFtcInR5cGVcIixcIm9uQ2xpY2tcIl0pLHModix7c2l6ZTpcIm1pbmlcIix0eXBlOmUuY29uZmlybUJ1dHRvblR5cGUsb25DbGljazplLmNvbmZpcm19LHtkZWZhdWx0OmkoKCgpPT5bYyhwKGUuY29uZmlybUJ1dHRvblRleHRfKSwxKV0pKSxfOjF9LDgsW1widHlwZVwiLFwib25DbGlja1wiXSldKV0pXSkpLF86MX0sOCxbXCJ2aXNpYmxlXCJdKX0sb3UuX19maWxlPVwicGFja2FnZXMvcG9wY29uZmlybS9zcmMvaW5kZXgudnVlXCIsb3UuaW5zdGFsbD1lPT57ZS5jb21wb25lbnQob3UubmFtZSxvdSl9O2NvbnN0IHV1PVtcInVwZGF0ZTp2aXNpYmxlXCIsXCJhZnRlci1lbnRlclwiLFwiYWZ0ZXItbGVhdmVcIixcInNob3dcIixcImhpZGVcIl0sZHU9e2tleTowLGNsYXNzOlwiZWwtcG9wb3Zlcl9fdGl0bGVcIixyb2xlOlwidGl0bGVcIn07dmFyIGN1PWUoe25hbWU6XCJFbFBvcG92ZXJcIixjb21wb25lbnRzOntFbFBvcHBlcjpTbH0scHJvcHM6T2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LGtsKSx7Y29udGVudDp7dHlwZTpTdHJpbmd9LHRyaWdnZXI6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJjbGlja1wifSx0aXRsZTp7dHlwZTpTdHJpbmd9LHRyYW5zaXRpb246e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJmYWRlLWluLWxpbmVhclwifSx3aWR0aDp7dHlwZTpbU3RyaW5nLE51bWJlcl0sZGVmYXVsdDoxNTB9LGFwcGVuZFRvQm9keTp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITB9fSksZW1pdHM6dXUsc2V0dXAoZSx0KXt2YXIgYSxuO1wicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FVk4mJmUudmlzaWJsZSYmIXQuc2xvdHMucmVmZXJlbmNlJiYoYT1cIkVsUG9wb3ZlclwiLG49XCJcXG4gICAgICAgIFlvdSBjYW5ub3QgaW5pdCBwb3BvdmVyIHdpdGhvdXQgZ2l2ZW4gcmVmZXJlbmNlXFxuICAgICAgXCIsY29uc29sZS53YXJuKG5ldyB2dChgWyR7YX1dICR7bn1gKSkpO3JldHVybiBmdW5jdGlvbihlLHQpe2NvbnN0IGE9bCgoKCk9PntsZXQgdDtyZXR1cm4gdD1OZShlLndpZHRoKT9lLndpZHRoOmUud2lkdGgrXCJweFwiLHt3aWR0aDp0LHpJbmRleDpnbC5uZXh0WkluZGV4KCl9fSkpLG49Q2woZSx0KTtyZXR1cm4geShuLnZpc2liaWxpdHksKGU9Pnt0LmVtaXQoZT9cInNob3dcIjpcImhpZGVcIil9KSksT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LG4pLHtwb3BwZXJTdHlsZTphfSl9KGUsdCl9LHJlbmRlcigpe2NvbnN0eyRzbG90czplfT10aGlzLHQ9ZS5yZWZlcmVuY2U/ZS5yZWZlcmVuY2UoKTpudWxsLGw9KGE9dGhpcy50aXRsZSxuPVwiZGl2XCIsbz1kdSxpPXAodGhpcy50aXRsZSksaD1pbC5URVhULGE/dWwobixvLGksaCx2KTp1KFwidi1pZlwiLCEwKSk7dmFyIGEsbixvLGksaCx2O2NvbnN0IG09ZChlLFwiZGVmYXVsdFwiLHt9LCgoKT0+W2MocCh0aGlzLmNvbnRlbnQpLGlsLlRFWFQpXSkpLHtldmVudHM6ZixvbkFmdGVyRW50ZXI6ZyxvbkFmdGVyTGVhdmU6YixvblBvcHBlck1vdXNlRW50ZXI6eSxvblBvcHBlck1vdXNlTGVhdmU6ayxwb3BwZXJTdHlsZTpDLHBvcHBlcklkOngscG9wcGVyQ2xhc3M6dyxzaG93QXJyb3c6Xyx0cmFuc2l0aW9uOlMsdmlzaWJpbGl0eTpNfT10aGlzLFQ9W3RoaXMuY29udGVudD9cImVsLXBvcG92ZXItLXBsYWluXCI6XCJcIixcImVsLXBvcG92ZXJcIix3XS5qb2luKFwiIFwiKTtsZXQgTj14bCh7ZWZmZWN0OnlsLkxJR0hULG5hbWU6Uyxwb3BwZXJDbGFzczpULHBvcHBlclN0eWxlOkMscG9wcGVySWQ6eCx2aXNpYmlsaXR5Ok0sb25Nb3VzZUVudGVyOnksb25Nb3VzZUxlYXZlOmssb25BZnRlckVudGVyOmcsb25BZnRlckxlYXZlOmIsc3RvcFBvcHBlck1vdXNlRXZlbnQ6ITB9LFtsLG0sX2woXyldKTtjb25zdCBEPXQ/d2wodCxPYmplY3QuYXNzaWduKHthcmlhRGVzY3JpYmVkYnk6eCxyZWY6XCJ0cmlnZ2VyUmVmXCIsb25Nb3VzZURvd246Y3Qsb25Nb3VzZVVwOmN0fSxmKSk6dShcInYtaWZcIiwhMCk7cmV0dXJuIHVsKEUsbnVsbCxbXCJjbGlja1wiPT09dGhpcy50cmlnZ2VyP3IoRCxbW010LHRoaXMuaGlkZV1dKTpELHMoeix7ZGlzYWJsZWQ6IXRoaXMuYXBwZW5kVG9Cb2R5LHRvOlwiYm9keVwifSxbTl0saWwuUFJPUFMsW1wiZGlzYWJsZWRcIl0pXSl9fSk7Y3UuX19maWxlPVwicGFja2FnZXMvcG9wb3Zlci9zcmMvaW5kZXgudnVlXCI7Y29uc3QgcHU9KGUsdCxsKT0+e2NvbnN0IGE9dC5hcmd8fHQudmFsdWUsbj1sLmRpcnNbMF0uaW5zdGFuY2UuJHJlZnNbYV07biYmKG4udHJpZ2dlclJlZj1lLE9iamVjdC5lbnRyaWVzKG4uZXZlbnRzKS5tYXAoKChbdCxsXSk9PntsdChlLHQudG9Mb3dlckNhc2UoKS5zbGljZSgyKSxsKX0pKSl9O3ZhciBodT17bW91bnRlZChlLHQsbCl7cHUoZSx0LGwpfSx1cGRhdGVkKGUsdCxsKXtwdShlLHQsbCl9fTtjdS5pbnN0YWxsPWU9PntlLmNvbXBvbmVudChjdS5uYW1lLGN1KSxlLmRpcmVjdGl2ZShcInBvcG92ZXJcIixodSl9LGN1LmRpcmVjdGl2ZT1odTt2YXIgdnU9ZSh7bmFtZTpcIkVsUHJvZ3Jlc3NcIixwcm9wczp7dHlwZTp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcImxpbmVcIix2YWxpZGF0b3I6ZT0+W1wibGluZVwiLFwiY2lyY2xlXCIsXCJkYXNoYm9hcmRcIl0uaW5kZXhPZihlKT4tMX0scGVyY2VudGFnZTp7dHlwZTpOdW1iZXIsZGVmYXVsdDowLHJlcXVpcmVkOiEwLHZhbGlkYXRvcjplPT5lPj0wJiZlPD0xMDB9LHN0YXR1czp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIlwiLHZhbGlkYXRvcjplPT5bXCJcIixcInN1Y2Nlc3NcIixcImV4Y2VwdGlvblwiLFwid2FybmluZ1wiXS5pbmRleE9mKGUpPi0xfSxzdHJva2VXaWR0aDp7dHlwZTpOdW1iZXIsZGVmYXVsdDo2fSxzdHJva2VMaW5lY2FwOnt0eXBlOlN0cmluZyxkZWZhdWx0Olwicm91bmRcIn0sdGV4dEluc2lkZTp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITF9LHdpZHRoOnt0eXBlOk51bWJlcixkZWZhdWx0OjEyNn0sc2hvd1RleHQ6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiEwfSxjb2xvcjp7dHlwZTpbU3RyaW5nLEFycmF5LEZ1bmN0aW9uXSxkZWZhdWx0OlwiXCJ9LGZvcm1hdDp7dHlwZTpGdW5jdGlvbixkZWZhdWx0OmU9PmUrXCIlXCJ9fSxzZXR1cChlKXtjb25zdCB0PWwoKCgpPT4oe3dpZHRoOmUucGVyY2VudGFnZStcIiVcIixiYWNrZ3JvdW5kQ29sb3I6bShlLnBlcmNlbnRhZ2UpfSkpKSxhPWwoKCgpPT4oZS5zdHJva2VXaWR0aC9lLndpZHRoKjEwMCkudG9GaXhlZCgxKSkpLG49bCgoKCk9PlwiY2lyY2xlXCI9PT1lLnR5cGV8fFwiZGFzaGJvYXJkXCI9PT1lLnR5cGU/cGFyc2VJbnQoXCJcIisoNTAtcGFyc2VGbG9hdChhLnZhbHVlKS8yKSwxMCk6MCkpLG89bCgoKCk9Pntjb25zdCB0PW4udmFsdWUsbD1cImRhc2hib2FyZFwiPT09ZS50eXBlO3JldHVybmBcXG4gICAgICAgICAgTSA1MCA1MFxcbiAgICAgICAgICBtIDAgJHtsP1wiXCI6XCItXCJ9JHt0fVxcbiAgICAgICAgICBhICR7dH0gJHt0fSAwIDEgMSAwICR7bD9cIi1cIjpcIlwifSR7Mip0fVxcbiAgICAgICAgICBhICR7dH0gJHt0fSAwIDEgMSAwICR7bD9cIlwiOlwiLVwifSR7Mip0fVxcbiAgICAgICAgICBgfSkpLGk9bCgoKCk9PjIqTWF0aC5QSSpuLnZhbHVlKSkscj1sKCgoKT0+XCJkYXNoYm9hcmRcIj09PWUudHlwZT8uNzU6MSkpLHM9bCgoKCk9Pi0xKmkudmFsdWUqKDEtci52YWx1ZSkvMitcInB4XCIpKSx1PWwoKCgpPT4oe3N0cm9rZURhc2hhcnJheTpgJHtpLnZhbHVlKnIudmFsdWV9cHgsICR7aS52YWx1ZX1weGAsc3Ryb2tlRGFzaG9mZnNldDpzLnZhbHVlfSkpKSxkPWwoKCgpPT4oe3N0cm9rZURhc2hhcnJheTpgJHtpLnZhbHVlKnIudmFsdWUqKGUucGVyY2VudGFnZS8xMDApfXB4LCAke2kudmFsdWV9cHhgLHN0cm9rZURhc2hvZmZzZXQ6cy52YWx1ZSx0cmFuc2l0aW9uOlwic3Ryb2tlLWRhc2hhcnJheSAwLjZzIGVhc2UgMHMsIHN0cm9rZSAwLjZzIGVhc2VcIn0pKSksYz1sKCgoKT0+e2xldCB0O2lmKGUuY29sb3IpdD1tKGUucGVyY2VudGFnZSk7ZWxzZSBzd2l0Y2goZS5zdGF0dXMpe2Nhc2VcInN1Y2Nlc3NcIjp0PVwiIzEzY2U2NlwiO2JyZWFrO2Nhc2VcImV4Y2VwdGlvblwiOnQ9XCIjZmY0OTQ5XCI7YnJlYWs7Y2FzZVwid2FybmluZ1wiOnQ9XCIjZTZhMjNjXCI7YnJlYWs7ZGVmYXVsdDp0PVwiIzIwYTBmZlwifXJldHVybiB0fSkpLHA9bCgoKCk9Plwid2FybmluZ1wiPT09ZS5zdGF0dXM/XCJlbC1pY29uLXdhcm5pbmdcIjpcImxpbmVcIj09PWUudHlwZT9cInN1Y2Nlc3NcIj09PWUuc3RhdHVzP1wiZWwtaWNvbi1jaXJjbGUtY2hlY2tcIjpcImVsLWljb24tY2lyY2xlLWNsb3NlXCI6XCJzdWNjZXNzXCI9PT1lLnN0YXR1cz9cImVsLWljb24tY2hlY2tcIjpcImVsLWljb24tY2xvc2VcIikpLGg9bCgoKCk9PlwibGluZVwiPT09ZS50eXBlPzEyKy40KmUuc3Ryb2tlV2lkdGg6LjExMTExMSplLndpZHRoKzIpKSx2PWwoKCgpPT5lLmZvcm1hdChlLnBlcmNlbnRhZ2UpKSksbT10PT57dmFyIGw7Y29uc3R7Y29sb3I6YX09ZTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBhKXJldHVybiBhKHQpO2lmKFwic3RyaW5nXCI9PXR5cGVvZiBhKXJldHVybiBhO3tjb25zdCBlPTEwMC9hLmxlbmd0aCxuPWEubWFwKCgodCxsKT0+XCJzdHJpbmdcIj09dHlwZW9mIHQ/e2NvbG9yOnQscGVyY2VudGFnZToobCsxKSplfTp0KSkuc29ydCgoKGUsdCk9PmUucGVyY2VudGFnZS10LnBlcmNlbnRhZ2UpKTtmb3IobGV0IGU9MDtlPG4ubGVuZ3RoO2UrKylpZihuW2VdLnBlcmNlbnRhZ2U+dClyZXR1cm4gbltlXS5jb2xvcjtyZXR1cm4gbnVsbD09PShsPW5bbi5sZW5ndGgtMV0pfHx2b2lkIDA9PT1sP3ZvaWQgMDpsLmNvbG9yfX07cmV0dXJue2JhclN0eWxlOnQscmVsYXRpdmVTdHJva2VXaWR0aDphLHJhZGl1czpuLHRyYWNrUGF0aDpvLHBlcmltZXRlcjppLHJhdGU6cixzdHJva2VEYXNob2Zmc2V0OnMsdHJhaWxQYXRoU3R5bGU6dSxjaXJjbGVQYXRoU3R5bGU6ZCxzdHJva2U6YyxpY29uQ2xhc3M6cCxwcm9ncmVzc1RleHRTaXplOmgsY29udGVudDp2LGdldEN1cnJlbnRDb2xvcjptfX19KTtjb25zdCBtdT17a2V5OjAsY2xhc3M6XCJlbC1wcm9ncmVzcy1iYXJcIn0sZnU9e2tleTowLGNsYXNzOlwiZWwtcHJvZ3Jlc3MtYmFyX19pbm5lclRleHRcIn0sZ3U9e3ZpZXdCb3g6XCIwIDAgMTAwIDEwMFwifTt2dS5yZW5kZXI9ZnVuY3Rpb24oZSx0LGwsbyxpLHIpe3JldHVybiBhKCksbihcImRpdlwiLHtjbGFzczpbXCJlbC1wcm9ncmVzc1wiLFtcImVsLXByb2dyZXNzLS1cIitlLnR5cGUsZS5zdGF0dXM/XCJpcy1cIitlLnN0YXR1czpcIlwiLHtcImVsLXByb2dyZXNzLS13aXRob3V0LXRleHRcIjohZS5zaG93VGV4dCxcImVsLXByb2dyZXNzLS10ZXh0LWluc2lkZVwiOmUudGV4dEluc2lkZX1dXSxyb2xlOlwicHJvZ3Jlc3NiYXJcIixcImFyaWEtdmFsdWVub3dcIjplLnBlcmNlbnRhZ2UsXCJhcmlhLXZhbHVlbWluXCI6XCIwXCIsXCJhcmlhLXZhbHVlbWF4XCI6XCIxMDBcIn0sW1wibGluZVwiPT09ZS50eXBlPyhhKCksbihcImRpdlwiLG11LFtzKFwiZGl2XCIse2NsYXNzOlwiZWwtcHJvZ3Jlc3MtYmFyX19vdXRlclwiLHN0eWxlOntoZWlnaHQ6ZS5zdHJva2VXaWR0aCtcInB4XCJ9fSxbcyhcImRpdlwiLHtjbGFzczpcImVsLXByb2dyZXNzLWJhcl9faW5uZXJcIixzdHlsZTplLmJhclN0eWxlfSxbZS5zaG93VGV4dCYmZS50ZXh0SW5zaWRlPyhhKCksbihcImRpdlwiLGZ1LHAoZS5jb250ZW50KSwxKSk6dShcInYtaWZcIiwhMCldLDQpXSw0KV0pKTooYSgpLG4oXCJkaXZcIix7a2V5OjEsY2xhc3M6XCJlbC1wcm9ncmVzcy1jaXJjbGVcIixzdHlsZTp7aGVpZ2h0OmUud2lkdGgrXCJweFwiLHdpZHRoOmUud2lkdGgrXCJweFwifX0sWyhhKCksbihcInN2Z1wiLGd1LFtzKFwicGF0aFwiLHtjbGFzczpcImVsLXByb2dyZXNzLWNpcmNsZV9fdHJhY2tcIixkOmUudHJhY2tQYXRoLHN0cm9rZTpcIiNlNWU5ZjJcIixcInN0cm9rZS13aWR0aFwiOmUucmVsYXRpdmVTdHJva2VXaWR0aCxmaWxsOlwibm9uZVwiLHN0eWxlOmUudHJhaWxQYXRoU3R5bGV9LG51bGwsMTIsW1wiZFwiLFwic3Ryb2tlLXdpZHRoXCJdKSxzKFwicGF0aFwiLHtjbGFzczpcImVsLXByb2dyZXNzLWNpcmNsZV9fcGF0aFwiLGQ6ZS50cmFja1BhdGgsc3Ryb2tlOmUuc3Ryb2tlLGZpbGw6XCJub25lXCIsXCJzdHJva2UtbGluZWNhcFwiOmUuc3Ryb2tlTGluZWNhcCxcInN0cm9rZS13aWR0aFwiOmUucGVyY2VudGFnZT9lLnJlbGF0aXZlU3Ryb2tlV2lkdGg6MCxzdHlsZTplLmNpcmNsZVBhdGhTdHlsZX0sbnVsbCwxMixbXCJkXCIsXCJzdHJva2VcIixcInN0cm9rZS1saW5lY2FwXCIsXCJzdHJva2Utd2lkdGhcIl0pXSkpXSw0KSksZS5zaG93VGV4dCYmIWUudGV4dEluc2lkZT8oYSgpLG4oXCJkaXZcIix7a2V5OjIsY2xhc3M6XCJlbC1wcm9ncmVzc19fdGV4dFwiLHN0eWxlOntmb250U2l6ZTplLnByb2dyZXNzVGV4dFNpemUrXCJweFwifX0sW2Uuc3RhdHVzPyhhKCksbihcImlcIix7a2V5OjEsY2xhc3M6ZS5pY29uQ2xhc3N9LG51bGwsMikpOihhKCksbihFLHtrZXk6MH0sW2MocChlLmNvbnRlbnQpLDEpXSw2NCkpXSw0KSk6dShcInYtaWZcIiwhMCldLDEwLFtcImFyaWEtdmFsdWVub3dcIl0pfSx2dS5fX2ZpbGU9XCJwYWNrYWdlcy9wcm9ncmVzcy9zcmMvaW5kZXgudnVlXCIsdnUuaW5zdGFsbD1lPT57ZS5jb21wb25lbnQodnUubmFtZSx2dSl9O3ZhciBidT1lKHtuYW1lOlwiRWxSYWRpb0J1dHRvblwiLHByb3BzOntsYWJlbDp7dHlwZTpbQm9vbGVhbixTdHJpbmcsTnVtYmVyXSxkZWZhdWx0OlwiXCJ9LGRpc2FibGVkOkJvb2xlYW4sbmFtZTp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIlwifX0sc2V0dXAoZSl7Y29uc3R7aXNHcm91cDp0LHJhZGlvR3JvdXA6YSxlbEZvcm1JdGVtU2l6ZTpuLEVMRU1FTlQ6byxmb2N1czppLGVsRm9ybTpyfT1VYSgpLHM9bCgoKCk9PmEucmFkaW9Hcm91cFNpemV8fG4udmFsdWV8fG8uc2l6ZSkpLHU9bCh7Z2V0OigpPT5hLm1vZGVsVmFsdWUsc2V0KGUpe2EuY2hhbmdlRXZlbnQoZSl9fSkse2lzRGlzYWJsZWQ6ZCx0YWJJbmRleDpjfT1HYShlLHttb2RlbDp1LGVsRm9ybTpyLHJhZGlvR3JvdXA6YSxpc0dyb3VwOnR9KTtyZXR1cm57aXNHcm91cDp0LHNpemU6cyxpc0Rpc2FibGVkOmQsdGFiSW5kZXg6Yyx2YWx1ZTp1LGZvY3VzOmksYWN0aXZlU3R5bGU6bCgoKCk9Pih7YmFja2dyb3VuZENvbG9yOmEuZmlsbHx8XCJcIixib3JkZXJDb2xvcjphLmZpbGx8fFwiXCIsYm94U2hhZG93OmEuZmlsbD9cIi0xcHggMCAwIDAgXCIrYS5maWxsOlwiXCIsY29sb3I6YS50ZXh0Q29sb3J8fFwiXCJ9KSkpfX19KTtidS5yZW5kZXI9ZnVuY3Rpb24oZSx0LGwsbyxpLHUpe3JldHVybiBhKCksbihcImxhYmVsXCIse2NsYXNzOltcImVsLXJhZGlvLWJ1dHRvblwiLFtlLnNpemU/XCJlbC1yYWRpby1idXR0b24tLVwiK2Uuc2l6ZTpcIlwiLHtcImlzLWFjdGl2ZVwiOmUudmFsdWU9PT1lLmxhYmVsLFwiaXMtZGlzYWJsZWRcIjplLmlzRGlzYWJsZWQsXCJpcy1mb2N1c1wiOmUuZm9jdXN9XV0scm9sZTpcInJhZGlvXCIsXCJhcmlhLWNoZWNrZWRcIjplLnZhbHVlPT09ZS5sYWJlbCxcImFyaWEtZGlzYWJsZWRcIjplLmlzRGlzYWJsZWQsdGFiaW5kZXg6ZS50YWJJbmRleCxvbktleWRvd246dFs1XXx8KHRbNV09JChUKCh0PT5lLnZhbHVlPWUuaXNEaXNhYmxlZD9lLnZhbHVlOmUubGFiZWwpLFtcInN0b3BcIixcInByZXZlbnRcIl0pLFtcInNwYWNlXCJdKSl9LFtyKHMoXCJpbnB1dFwiLHtcIm9uVXBkYXRlOm1vZGVsVmFsdWVcIjp0WzFdfHwodFsxXT10PT5lLnZhbHVlPXQpLGNsYXNzOlwiZWwtcmFkaW8tYnV0dG9uX19vcmlnLXJhZGlvXCIsdmFsdWU6ZS5sYWJlbCx0eXBlOlwicmFkaW9cIixuYW1lOmUubmFtZSxkaXNhYmxlZDplLmlzRGlzYWJsZWQsdGFiaW5kZXg6XCItMVwiLG9uRm9jdXM6dFsyXXx8KHRbMl09dD0+ZS5mb2N1cz0hMCksb25CbHVyOnRbM118fCh0WzNdPXQ9PmUuZm9jdXM9ITEpfSxudWxsLDQwLFtcInZhbHVlXCIsXCJuYW1lXCIsXCJkaXNhYmxlZFwiXSksW1tqLGUudmFsdWVdXSkscyhcInNwYW5cIix7Y2xhc3M6XCJlbC1yYWRpby1idXR0b25fX2lubmVyXCIsc3R5bGU6ZS52YWx1ZT09PWUubGFiZWw/ZS5hY3RpdmVTdHlsZTpudWxsLG9uS2V5ZG93bjp0WzRdfHwodFs0XT1UKCgoKT0+e30pLFtcInN0b3BcIl0pKX0sW2QoZS4kc2xvdHMsXCJkZWZhdWx0XCIse30sKCgpPT5bYyhwKGUubGFiZWwpLDEpXSkpXSwzNildLDQyLFtcImFyaWEtY2hlY2tlZFwiLFwiYXJpYS1kaXNhYmxlZFwiLFwidGFiaW5kZXhcIl0pfSxidS5fX2ZpbGU9XCJwYWNrYWdlcy9yYWRpby9zcmMvcmFkaW8tYnV0dG9uLnZ1ZVwiLGJ1Lmluc3RhbGw9ZT0+e2UuY29tcG9uZW50KGJ1Lm5hbWUsYnUpfTt2YXIgeXU9ZSh7bmFtZTpcIkVsUmFkaW9Hcm91cFwiLGNvbXBvbmVudE5hbWU6XCJFbFJhZGlvR3JvdXBcIixwcm9wczp7bW9kZWxWYWx1ZTp7dHlwZTpbQm9vbGVhbixTdHJpbmcsTnVtYmVyXSxkZWZhdWx0OlwiXCJ9LHNpemU6e3R5cGU6U3RyaW5nLHZhbGlkYXRvcjpBdH0sZmlsbDp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIlwifSx0ZXh0Q29sb3I6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJcIn0sZGlzYWJsZWQ6Qm9vbGVhbn0sZW1pdHM6W1B0LFwiY2hhbmdlXCJdLHNldHVwKGUsYSl7Y29uc3Qgbj10KG51bGwpLG89dyhcImVsRm9ybUl0ZW1cIix7fSksaT1sKCgoKT0+ZS5zaXplfHxvLnNpemUpKTt4KFwiUmFkaW9Hcm91cFwiLGYoT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHtuYW1lOlwiRWxSYWRpb0dyb3VwXCJ9LEMoZSkpLHtyYWRpb0dyb3VwU2l6ZTppLGNoYW5nZUV2ZW50OmU9PnthLmVtaXQoUHQsZSksaygoKCk9PnthLmVtaXQoXCJjaGFuZ2VcIixlKX0pKX19KSkpLHkoKCgpPT5lLm1vZGVsVmFsdWUpLChlPT57dmFyIHQ7bnVsbD09PSh0PW8uZm9ybUl0ZW1NaXR0KXx8dm9pZCAwPT09dHx8dC5lbWl0KFwiZWwuZm9ybS5jaGFuZ2VcIixbZV0pfSkpO3JldHVybiBfKCgoKT0+e2NvbnN0IGU9bi52YWx1ZS5xdWVyeVNlbGVjdG9yQWxsKFwiW3R5cGU9cmFkaW9dXCIpLHQ9ZVswXTshQXJyYXkuZnJvbShlKS5zb21lKChlPT5lLmNoZWNrZWQpKSYmdCYmKHQudGFiSW5kZXg9MCl9KSkse2hhbmRsZUtleWRvd246ZT0+e2NvbnN0IHQ9ZS50YXJnZXQsbD1cIklOUFVUXCI9PT10Lm5vZGVOYW1lP1wiW3R5cGU9cmFkaW9dXCI6XCJbcm9sZT1yYWRpb11cIixhPW4udmFsdWUucXVlcnlTZWxlY3RvckFsbChsKSxvPWEubGVuZ3RoLGk9QXJyYXkuZnJvbShhKS5pbmRleE9mKHQpLHI9bi52YWx1ZS5xdWVyeVNlbGVjdG9yQWxsKFwiW3JvbGU9cmFkaW9dXCIpO2xldCBzPW51bGw7c3dpdGNoKGUuY29kZSl7Y2FzZSBmdC5sZWZ0OmNhc2UgZnQudXA6ZS5zdG9wUHJvcGFnYXRpb24oKSxlLnByZXZlbnREZWZhdWx0KCkscz0wPT09aT9vLTE6aS0xO2JyZWFrO2Nhc2UgZnQucmlnaHQ6Y2FzZSBmdC5kb3duOmUuc3RvcFByb3BhZ2F0aW9uKCksZS5wcmV2ZW50RGVmYXVsdCgpLHM9aT09PW8tMT8wOmkrMX1udWxsIT09cyYmKHJbc10uY2xpY2soKSxyW3NdLmZvY3VzKCkpfSxyYWRpb0dyb3VwU2l6ZTppLHJhZGlvR3JvdXA6bn19fSk7eXUucmVuZGVyPWZ1bmN0aW9uKGUsdCxsLG8saSxyKXtyZXR1cm4gYSgpLG4oXCJkaXZcIix7cmVmOlwicmFkaW9Hcm91cFwiLGNsYXNzOlwiZWwtcmFkaW8tZ3JvdXBcIixyb2xlOlwicmFkaW9ncm91cFwiLG9uS2V5ZG93bjp0WzFdfHwodFsxXT0oLi4udCk9PmUuaGFuZGxlS2V5ZG93biguLi50KSl9LFtkKGUuJHNsb3RzLFwiZGVmYXVsdFwiKV0sNTQ0KX0seXUuX19maWxlPVwicGFja2FnZXMvcmFkaW8vc3JjL3JhZGlvLWdyb3VwLnZ1ZVwiLHl1Lmluc3RhbGw9ZT0+e2UuY29tcG9uZW50KHl1Lm5hbWUseXUpfTt2YXIga3U9ZSh7bmFtZTpcIkVsUmF0ZVwiLHByb3BzOnttb2RlbFZhbHVlOnt0eXBlOk51bWJlcixkZWZhdWx0OjB9LGxvd1RocmVzaG9sZDp7dHlwZTpOdW1iZXIsZGVmYXVsdDoyfSxoaWdoVGhyZXNob2xkOnt0eXBlOk51bWJlcixkZWZhdWx0OjR9LG1heDp7dHlwZTpOdW1iZXIsZGVmYXVsdDo1fSxjb2xvcnM6e3R5cGU6W0FycmF5LE9iamVjdF0sZGVmYXVsdDooKT0+W1wiI0Y3QkEyQVwiLFwiI0Y3QkEyQVwiLFwiI0Y3QkEyQVwiXX0sdm9pZENvbG9yOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiI0M2RDFERVwifSxkaXNhYmxlZFZvaWRDb2xvcjp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIiNFRkYyRjdcIn0saWNvbkNsYXNzZXM6e3R5cGU6W0FycmF5LE9iamVjdF0sZGVmYXVsdDooKT0+W1wiZWwtaWNvbi1zdGFyLW9uXCIsXCJlbC1pY29uLXN0YXItb25cIixcImVsLWljb24tc3Rhci1vblwiXX0sdm9pZEljb25DbGFzczp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcImVsLWljb24tc3Rhci1vZmZcIn0sZGlzYWJsZWRWb2lkSWNvbkNsYXNzOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiZWwtaWNvbi1zdGFyLW9uXCJ9LGRpc2FibGVkOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMX0sYWxsb3dIYWxmOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMX0sc2hvd1RleHQ6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiExfSxzaG93U2NvcmU6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiExfSx0ZXh0Q29sb3I6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCIjMWYyZDNkXCJ9LHRleHRzOnt0eXBlOkFycmF5LGRlZmF1bHQ6KCk9PltcIkV4dHJlbWVseSBiYWRcIixcIkRpc2FwcG9pbnRlZFwiLFwiRmFpclwiLFwiU2F0aXNmaWVkXCIsXCJTdXJwcmlzZVwiXX0sc2NvcmVUZW1wbGF0ZTp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcInt2YWx1ZX1cIn19LGVtaXRzOltcInVwZGF0ZTptb2RlbFZhbHVlXCIsXCJjaGFuZ2VcIl0sc2V0dXAoZSx7ZW1pdDphfSl7Y29uc3Qgbj13KFwiZWxGb3JtXCIse30pLG89dChlLm1vZGVsVmFsdWUpLGk9bCgoKCk9PmUuZGlzYWJsZWR8fG4uZGlzYWJsZWQpKSxyPWwoKCgpPT57bGV0IHQ9XCJcIjtyZXR1cm4gZS5zaG93U2NvcmU/dD1lLnNjb3JlVGVtcGxhdGUucmVwbGFjZSgvXFx7XFxzKnZhbHVlXFxzKlxcfS8saS52YWx1ZT9cIlwiK2UubW9kZWxWYWx1ZTpcIlwiK28udmFsdWUpOmUuc2hvd1RleHQmJih0PWUudGV4dHNbTWF0aC5jZWlsKG8udmFsdWUpLTFdKSx0fSkpO2Z1bmN0aW9uIHMoZSx0KXtjb25zdCBsPU9iamVjdC5rZXlzKHQpLmZpbHRlcigobD0+e2NvbnN0IGE9dFtsXTtyZXR1cm4hIURlKGEpJiZhLmV4Y2x1ZGVkP2U8bDplPD1sfSkpLnNvcnQoKChlLHQpPT5lLXQpKSxhPXRbbFswXV07cmV0dXJuIERlKGEpP2EudmFsdWU6YXx8XCJcIn1jb25zdCB1PWwoKCgpPT4xMDAqZS5tb2RlbFZhbHVlLTEwMCpNYXRoLmZsb29yKGUubW9kZWxWYWx1ZSkpKSxkPWwoKCgpPT5NZShlLmNvbG9ycyk/e1tlLmxvd1RocmVzaG9sZF06ZS5jb2xvcnNbMF0sW2UuaGlnaFRocmVzaG9sZF06e3ZhbHVlOmUuY29sb3JzWzFdLGV4Y2x1ZGVkOiEwfSxbZS5tYXhdOmUuY29sb3JzWzJdfTplLmNvbG9ycykpLGM9bCgoKCk9PnMoby52YWx1ZSxkLnZhbHVlKSkpLHA9bCgoKCk9PntsZXQgdD1cIlwiO3JldHVybiBpLnZhbHVlP3Q9dS52YWx1ZStcIiVcIjplLmFsbG93SGFsZiYmKHQ9XCI1MCVcIikse2NvbG9yOmMudmFsdWUsd2lkdGg6dH19KSksaD1sKCgoKT0+TWUoZS5pY29uQ2xhc3Nlcyk/e1tlLmxvd1RocmVzaG9sZF06ZS5pY29uQ2xhc3Nlc1swXSxbZS5oaWdoVGhyZXNob2xkXTp7dmFsdWU6ZS5pY29uQ2xhc3Nlc1sxXSxleGNsdWRlZDohMH0sW2UubWF4XTplLmljb25DbGFzc2VzWzJdfTplLmljb25DbGFzc2VzKSksdj1sKCgoKT0+cyhlLm1vZGVsVmFsdWUsaC52YWx1ZSkpKSxtPWwoKCgpPT5pLnZhbHVlP2UuZGlzYWJsZWRWb2lkSWNvbkNsYXNzOmUudm9pZEljb25DbGFzcykpLGY9bCgoKCk9PnMoby52YWx1ZSxoLnZhbHVlKSkpLGc9bCgoKCk9PntsZXQgdD1BcnJheShlLm1heCksbD1vLnZhbHVlO3JldHVybiB0LmZpbGwoZi52YWx1ZSwwLGwpLHQuZmlsbChtLnZhbHVlLGwsZS5tYXgpLHR9KSksYj10KCEwKTt5KCgoKT0+ZS5tb2RlbFZhbHVlKSwodD0+e28udmFsdWU9dCxiLnZhbHVlPWUubW9kZWxWYWx1ZSE9PU1hdGguZmxvb3IoZS5tb2RlbFZhbHVlKX0pKTtjb25zdCBrPXQoLTEpO3JldHVybiBlLm1vZGVsVmFsdWV8fGEoXCJ1cGRhdGU6bW9kZWxWYWx1ZVwiLDApLHtob3ZlckluZGV4OmssY3VycmVudFZhbHVlOm8scmF0ZURpc2FibGVkOmksdGV4dDpyLGRlY2ltYWxTdHlsZTpwLGRlY2ltYWxJY29uQ2xhc3M6dixjbGFzc2VzOmcsc2hvd0RlY2ltYWxJY29uOmZ1bmN0aW9uKHQpe2xldCBsPWkudmFsdWUmJnUudmFsdWU+MCYmdC0xPGUubW9kZWxWYWx1ZSYmdD5lLm1vZGVsVmFsdWUsYT1lLmFsbG93SGFsZiYmYi52YWx1ZSYmdC0uNTw9by52YWx1ZSYmdD5vLnZhbHVlO3JldHVybiBsfHxhfSxnZXRJY29uU3R5bGU6ZnVuY3Rpb24odCl7Y29uc3QgbD1pLnZhbHVlP2UuZGlzYWJsZWRWb2lkQ29sb3I6ZS52b2lkQ29sb3I7cmV0dXJue2NvbG9yOnQ8PW8udmFsdWU/Yy52YWx1ZTpsfX0sc2VsZWN0VmFsdWU6ZnVuY3Rpb24odCl7aS52YWx1ZXx8KGUuYWxsb3dIYWxmJiZiLnZhbHVlPyhhKFwidXBkYXRlOm1vZGVsVmFsdWVcIixvLnZhbHVlKSxhKFwiY2hhbmdlXCIsdGhpcy5jdXJyZW50VmFsdWUpKTooYShcInVwZGF0ZTptb2RlbFZhbHVlXCIsdCksYShcImNoYW5nZVwiLHQpKSl9LGhhbmRsZUtleTpmdW5jdGlvbih0KXtpZihpLnZhbHVlKXJldHVybjtsZXQgbD1vLnZhbHVlO2NvbnN0IG49dC5jb2RlO3JldHVybiBuPT09ZnQudXB8fG49PT1mdC5yaWdodD8oZS5hbGxvd0hhbGY/bCs9LjU6bCs9MSx0LnN0b3BQcm9wYWdhdGlvbigpLHQucHJldmVudERlZmF1bHQoKSk6biE9PWZ0LmxlZnQmJm4hPT1mdC5kb3dufHwoZS5hbGxvd0hhbGY/bC09LjU6bC09MSx0LnN0b3BQcm9wYWdhdGlvbigpLHQucHJldmVudERlZmF1bHQoKSksbD1sPDA/MDpsLGw9bD5lLm1heD9lLm1heDpsLGEoXCJ1cGRhdGU6bW9kZWxWYWx1ZVwiLGwpLGEoXCJjaGFuZ2VcIixsKSxsfSxzZXRDdXJyZW50VmFsdWU6ZnVuY3Rpb24odCxsKXtpZighaS52YWx1ZSl7aWYoZS5hbGxvd0hhbGYpe2xldCBlPWwudGFyZ2V0O250KGUsXCJlbC1yYXRlX19pdGVtXCIpJiYoZT1lLnF1ZXJ5U2VsZWN0b3IoXCIuZWwtcmF0ZV9faWNvblwiKSksbnQoZSxcImVsLXJhdGVfX2RlY2ltYWxcIikmJihlPWUucGFyZW50Tm9kZSksYi52YWx1ZT0yKmwub2Zmc2V0WDw9ZS5jbGllbnRXaWR0aCxvLnZhbHVlPWIudmFsdWU/dC0uNTp0fWVsc2Ugby52YWx1ZT10O2sudmFsdWU9dH19LHJlc2V0Q3VycmVudFZhbHVlOmZ1bmN0aW9uKCl7aS52YWx1ZXx8KGUuYWxsb3dIYWxmJiYoYi52YWx1ZT1lLm1vZGVsVmFsdWUhPT1NYXRoLmZsb29yKGUubW9kZWxWYWx1ZSkpLG8udmFsdWU9ZS5tb2RlbFZhbHVlLGsudmFsdWU9LTEpfX19fSk7a3UucmVuZGVyPWZ1bmN0aW9uKGUsdCxsLG8saSxyKXtyZXR1cm4gYSgpLG4oXCJkaXZcIix7Y2xhc3M6XCJlbC1yYXRlXCIscm9sZTpcInNsaWRlclwiLFwiYXJpYS12YWx1ZW5vd1wiOmUuY3VycmVudFZhbHVlLFwiYXJpYS12YWx1ZXRleHRcIjplLnRleHQsXCJhcmlhLXZhbHVlbWluXCI6XCIwXCIsXCJhcmlhLXZhbHVlbWF4XCI6ZS5tYXgsdGFiaW5kZXg6XCIwXCIsb25LZXlkb3duOnRbMl18fCh0WzJdPSguLi50KT0+ZS5oYW5kbGVLZXkoLi4udCkpfSxbKGEoITApLG4oRSxudWxsLEgoZS5tYXgsKChsLG8pPT4oYSgpLG4oXCJzcGFuXCIse2tleTpvLGNsYXNzOlwiZWwtcmF0ZV9faXRlbVwiLHN0eWxlOntjdXJzb3I6ZS5yYXRlRGlzYWJsZWQ/XCJhdXRvXCI6XCJwb2ludGVyXCJ9LG9uTW91c2Vtb3ZlOnQ9PmUuc2V0Q3VycmVudFZhbHVlKGwsdCksb25Nb3VzZWxlYXZlOnRbMV18fCh0WzFdPSguLi50KT0+ZS5yZXNldEN1cnJlbnRWYWx1ZSguLi50KSksb25DbGljazp0PT5lLnNlbGVjdFZhbHVlKGwpfSxbcyhcImlcIix7Y2xhc3M6W1tlLmNsYXNzZXNbbC0xXSx7aG92ZXI6ZS5ob3ZlckluZGV4PT09bH1dLFwiZWwtcmF0ZV9faWNvblwiXSxzdHlsZTplLmdldEljb25TdHlsZShsKX0sW2Uuc2hvd0RlY2ltYWxJY29uKGwpPyhhKCksbihcImlcIix7a2V5OjAsY2xhc3M6W2UuZGVjaW1hbEljb25DbGFzcyxcImVsLXJhdGVfX2RlY2ltYWxcIl0sc3R5bGU6ZS5kZWNpbWFsU3R5bGV9LG51bGwsNikpOnUoXCJ2LWlmXCIsITApXSw2KV0sNDQsW1wib25Nb3VzZW1vdmVcIixcIm9uQ2xpY2tcIl0pKSkpLDEyOCkpLGUuc2hvd1RleHR8fGUuc2hvd1Njb3JlPyhhKCksbihcInNwYW5cIix7a2V5OjAsY2xhc3M6XCJlbC1yYXRlX190ZXh0XCIsc3R5bGU6e2NvbG9yOmUudGV4dENvbG9yfX0scChlLnRleHQpLDUpKTp1KFwidi1pZlwiLCEwKV0sNDAsW1wiYXJpYS12YWx1ZW5vd1wiLFwiYXJpYS12YWx1ZXRleHRcIixcImFyaWEtdmFsdWVtYXhcIl0pfSxrdS5fX2ZpbGU9XCJwYWNrYWdlcy9yYXRlL3NyYy9pbmRleC52dWVcIixrdS5pbnN0YWxsPWU9PntlLmNvbXBvbmVudChrdS5uYW1lLGt1KX07dmFyIEN1PWUoe25hbWU6XCJFbFJvd1wiLHByb3BzOnt0YWc6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJkaXZcIn0sZ3V0dGVyOnt0eXBlOk51bWJlcixkZWZhdWx0OjB9LHR5cGU6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJcIn0sanVzdGlmeTp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcInN0YXJ0XCJ9LGFsaWduOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwidG9wXCJ9fSxzZXR1cChlLHtzbG90czp0fSl7eChcIkVsUm93XCIsZS5ndXR0ZXIpO2NvbnN0IGE9bCgoKCk9Pntjb25zdCB0PXtkaXNwbGF5OlwiZmxleFwiLGZsZXhXcmFwOlwid3JhcFwiLG1hcmdpbkxlZnQ6XCJcIixtYXJnaW5SaWdodDpcIlwifTtyZXR1cm4gZS5ndXR0ZXImJih0Lm1hcmdpbkxlZnQ9YC0ke2UuZ3V0dGVyLzJ9cHhgLHQubWFyZ2luUmlnaHQ9dC5tYXJnaW5MZWZ0KSx0fSkpO3JldHVybigpPT57dmFyIGw7cmV0dXJuIEQoZS50YWcse2NsYXNzOltcImVsLXJvd1wiLFwic3RhcnRcIiE9PWUuanVzdGlmeT9cImlzLWp1c3RpZnktXCIrZS5qdXN0aWZ5OlwiXCIsXCJ0b3BcIiE9PWUuYWxpZ24/XCJpcy1hbGlnbi1cIitlLmFsaWduOlwiXCIsXCJmbGV4XCI9PT1lLnR5cGU/XCJlbC1yb3ctLWZsZXhcIjpcIlwiXSxzdHlsZTphLnZhbHVlfSxudWxsPT09KGw9dC5kZWZhdWx0KXx8dm9pZCAwPT09bD92b2lkIDA6bC5jYWxsKHQpKX19fSk7Q3UuaW5zdGFsbD1lPT57ZS5jb21wb25lbnQoQ3UubmFtZSxDdSl9O2NvbnN0IHh1PShlLGEsbik9Pntjb25zdHtkaXNhYmxlZDpvLG1pbjppLG1heDpyLHN0ZXA6cyxzaG93VG9vbHRpcDp1LHByZWNpc2lvbjpkLHNsaWRlclNpemU6Yyxmb3JtYXRUb29sdGlwOnAsZW1pdENoYW5nZTpoLHJlc2V0U2l6ZTp2LHVwZGF0ZURyYWdnaW5nOm19PXcoXCJTbGlkZXJQcm92aWRlclwiKSx7dG9vbHRpcDpmLHRvb2x0aXBWaXNpYmxlOmcsZm9ybWF0VmFsdWU6YixkaXNwbGF5VG9vbHRpcDpDLGhpZGVUb29sdGlwOnh9PSgoZSxhLG4pPT57Y29uc3Qgbz10KG51bGwpLGk9dCghMSkscj1sKCgoKT0+YS52YWx1ZSBpbnN0YW5jZW9mIEZ1bmN0aW9uKSkscz1sKCgoKT0+ci52YWx1ZSYmYS52YWx1ZShlLm1vZGVsVmFsdWUpfHxlLm1vZGVsVmFsdWUpKTtyZXR1cm57dG9vbHRpcDpvLHRvb2x0aXBWaXNpYmxlOmksZm9ybWF0VmFsdWU6cyxkaXNwbGF5VG9vbHRpcDooKT0+e24udmFsdWUmJihpLnZhbHVlPSEwKX0saGlkZVRvb2x0aXA6KCk9PntuLnZhbHVlJiYoaS52YWx1ZT0hMSl9fX0pKGUscCx1KSxfPWwoKCgpPT4oZS5tb2RlbFZhbHVlLWkudmFsdWUpLyhyLnZhbHVlLWkudmFsdWUpKjEwMCtcIiVcIikpLFM9bCgoKCk9PmUudmVydGljYWw/e2JvdHRvbTpfLnZhbHVlfTp7bGVmdDpfLnZhbHVlfSkpLEU9ZT0+e2xldCB0LGw7cmV0dXJuXCJ0b3VjaHN0YXJ0XCI9PT1lLnR5cGU/KGw9ZS50b3VjaGVzWzBdLmNsaWVudFksdD1lLnRvdWNoZXNbMF0uY2xpZW50WCk6KGw9ZS5jbGllbnRZLHQ9ZS5jbGllbnRYKSx7Y2xpZW50WDp0LGNsaWVudFk6bH19LE09dD0+e2EuZHJhZ2dpbmc9ITAsYS5pc0NsaWNrPSEwO2NvbnN0e2NsaWVudFg6bCxjbGllbnRZOm59PUUodCk7ZS52ZXJ0aWNhbD9hLnN0YXJ0WT1uOmEuc3RhcnRYPWwsYS5zdGFydFBvc2l0aW9uPXBhcnNlRmxvYXQoXy52YWx1ZSksYS5uZXdQb3NpdGlvbj1hLnN0YXJ0UG9zaXRpb259LFQ9dD0+e2lmKGEuZHJhZ2dpbmcpe2xldCBsO2EuaXNDbGljaz0hMSxDKCksdigpO2NvbnN0e2NsaWVudFg6bixjbGllbnRZOm99PUUodCk7ZS52ZXJ0aWNhbD8oYS5jdXJyZW50WT1vLGw9KGEuc3RhcnRZLWEuY3VycmVudFkpL2MudmFsdWUqMTAwKTooYS5jdXJyZW50WD1uLGw9KGEuY3VycmVudFgtYS5zdGFydFgpL2MudmFsdWUqMTAwKSxhLm5ld1Bvc2l0aW9uPWEuc3RhcnRQb3NpdGlvbitsLEQoYS5uZXdQb3NpdGlvbil9fSxOPSgpPT57YS5kcmFnZ2luZyYmKHNldFRpbWVvdXQoKCgpPT57YS5kcmFnZ2luZz0hMSx4KCksYS5pc0NsaWNrfHwoRChhLm5ld1Bvc2l0aW9uKSxoKCkpfSksMCksYXQod2luZG93LFwibW91c2Vtb3ZlXCIsVCksYXQod2luZG93LFwidG91Y2htb3ZlXCIsVCksYXQod2luZG93LFwibW91c2V1cFwiLE4pLGF0KHdpbmRvdyxcInRvdWNoZW5kXCIsTiksYXQod2luZG93LFwiY29udGV4dG1lbnVcIixOKSl9LEQ9dD0+bnIodm9pZCAwLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKigpe2lmKG51bGw9PT10fHxpc05hTih0KSlyZXR1cm47dDwwP3Q9MDp0PjEwMCYmKHQ9MTAwKTtjb25zdCBsPTEwMC8oKHIudmFsdWUtaS52YWx1ZSkvcy52YWx1ZSk7bGV0IG89TWF0aC5yb3VuZCh0L2wpKmwqKHIudmFsdWUtaS52YWx1ZSkqLjAxK2kudmFsdWU7bz1wYXJzZUZsb2F0KG8udG9GaXhlZChkLnZhbHVlKSksbihQdCxvKSxhLmRyYWdnaW5nfHxlLm1vZGVsVmFsdWU9PT1hLm9sZFZhbHVlfHwoYS5vbGRWYWx1ZT1lLm1vZGVsVmFsdWUpLHlpZWxkIGsoKSxhLmRyYWdnaW5nJiZDKCksZi52YWx1ZS51cGRhdGVQb3BwZXIoKX0pKTtyZXR1cm4geSgoKCk9PmEuZHJhZ2dpbmcpLChlPT57bShlKX0pKSx7dG9vbHRpcDpmLHRvb2x0aXBWaXNpYmxlOmcsc2hvd1Rvb2x0aXA6dSx3cmFwcGVyU3R5bGU6Uyxmb3JtYXRWYWx1ZTpiLGhhbmRsZU1vdXNlRW50ZXI6KCk9PnthLmhvdmVyaW5nPSEwLEMoKX0saGFuZGxlTW91c2VMZWF2ZTooKT0+e2EuaG92ZXJpbmc9ITEseCgpfSxvbkJ1dHRvbkRvd246ZT0+e28udmFsdWV8fChlLnByZXZlbnREZWZhdWx0KCksTShlKSxsdCh3aW5kb3csXCJtb3VzZW1vdmVcIixUKSxsdCh3aW5kb3csXCJ0b3VjaG1vdmVcIixUKSxsdCh3aW5kb3csXCJtb3VzZXVwXCIsTiksbHQod2luZG93LFwidG91Y2hlbmRcIixOKSxsdCh3aW5kb3csXCJjb250ZXh0bWVudVwiLE4pKX0sb25MZWZ0S2V5RG93bjooKT0+e28udmFsdWV8fChhLm5ld1Bvc2l0aW9uPXBhcnNlRmxvYXQoXy52YWx1ZSktcy52YWx1ZS8oci52YWx1ZS1pLnZhbHVlKSoxMDAsRChhLm5ld1Bvc2l0aW9uKSxoKCkpfSxvblJpZ2h0S2V5RG93bjooKT0+e28udmFsdWV8fChhLm5ld1Bvc2l0aW9uPXBhcnNlRmxvYXQoXy52YWx1ZSkrcy52YWx1ZS8oci52YWx1ZS1pLnZhbHVlKSoxMDAsRChhLm5ld1Bvc2l0aW9uKSxoKCkpfSxzZXRQb3NpdGlvbjpEfX07dmFyIHd1PWUoe25hbWU6XCJFbFNsaWRlckJ1dHRvblwiLGNvbXBvbmVudHM6e0VsVG9vbHRpcDpEcn0scHJvcHM6e21vZGVsVmFsdWU6e3R5cGU6TnVtYmVyLGRlZmF1bHQ6MH0sdmVydGljYWw6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiExfSx0b29sdGlwQ2xhc3M6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJcIn19LGVtaXRzOltQdF0sc2V0dXAoZSx7ZW1pdDp0fSl7Y29uc3QgbD1mKHtob3ZlcmluZzohMSxkcmFnZ2luZzohMSxpc0NsaWNrOiExLHN0YXJ0WDowLGN1cnJlbnRYOjAsc3RhcnRZOjAsY3VycmVudFk6MCxzdGFydFBvc2l0aW9uOjAsbmV3UG9zaXRpb246MCxvbGRWYWx1ZTplLm1vZGVsVmFsdWV9KSx7dG9vbHRpcDphLHNob3dUb29sdGlwOm4sdG9vbHRpcFZpc2libGU6byx3cmFwcGVyU3R5bGU6aSxmb3JtYXRWYWx1ZTpyLGhhbmRsZU1vdXNlRW50ZXI6cyxoYW5kbGVNb3VzZUxlYXZlOnUsb25CdXR0b25Eb3duOmQsb25MZWZ0S2V5RG93bjpjLG9uUmlnaHRLZXlEb3duOnAsc2V0UG9zaXRpb246aH09eHUoZSxsLHQpLHtob3ZlcmluZzp2LGRyYWdnaW5nOm19PUMobCk7cmV0dXJue3Rvb2x0aXA6YSx0b29sdGlwVmlzaWJsZTpvLHNob3dUb29sdGlwOm4sd3JhcHBlclN0eWxlOmksZm9ybWF0VmFsdWU6cixoYW5kbGVNb3VzZUVudGVyOnMsaGFuZGxlTW91c2VMZWF2ZTp1LG9uQnV0dG9uRG93bjpkLG9uTGVmdEtleURvd246YyxvblJpZ2h0S2V5RG93bjpwLHNldFBvc2l0aW9uOmgsaG92ZXJpbmc6dixkcmFnZ2luZzptfX19KTt3dS5yZW5kZXI9ZnVuY3Rpb24oZSx0LGwsbyxyLHUpe2NvbnN0IGQ9UChcImVsLXRvb2x0aXBcIik7cmV0dXJuIGEoKSxuKFwiZGl2XCIse3JlZjpcImJ1dHRvblwiLGNsYXNzOltcImVsLXNsaWRlcl9fYnV0dG9uLXdyYXBwZXJcIix7aG92ZXI6ZS5ob3ZlcmluZyxkcmFnZ2luZzplLmRyYWdnaW5nfV0sc3R5bGU6ZS53cmFwcGVyU3R5bGUsdGFiaW5kZXg6XCIwXCIsb25Nb3VzZWVudGVyOnRbMl18fCh0WzJdPSguLi50KT0+ZS5oYW5kbGVNb3VzZUVudGVyKC4uLnQpKSxvbk1vdXNlbGVhdmU6dFszXXx8KHRbM109KC4uLnQpPT5lLmhhbmRsZU1vdXNlTGVhdmUoLi4udCkpLG9uTW91c2Vkb3duOnRbNF18fCh0WzRdPSguLi50KT0+ZS5vbkJ1dHRvbkRvd24oLi4udCkpLG9uVG91Y2hzdGFydDp0WzVdfHwodFs1XT0oLi4udCk9PmUub25CdXR0b25Eb3duKC4uLnQpKSxvbkZvY3VzOnRbNl18fCh0WzZdPSguLi50KT0+ZS5oYW5kbGVNb3VzZUVudGVyKC4uLnQpKSxvbkJsdXI6dFs3XXx8KHRbN109KC4uLnQpPT5lLmhhbmRsZU1vdXNlTGVhdmUoLi4udCkpLG9uS2V5ZG93bjpbdFs4XXx8KHRbOF09JCgoKC4uLnQpPT5lLm9uTGVmdEtleURvd24oLi4udCkpLFtcImxlZnRcIl0pKSx0WzldfHwodFs5XT0kKCgoLi4udCk9PmUub25SaWdodEtleURvd24oLi4udCkpLFtcInJpZ2h0XCJdKSksdFsxMF18fCh0WzEwXT0kKFQoKCguLi50KT0+ZS5vbkxlZnRLZXlEb3duKC4uLnQpKSxbXCJwcmV2ZW50XCJdKSxbXCJkb3duXCJdKSksdFsxMV18fCh0WzExXT0kKFQoKCguLi50KT0+ZS5vblJpZ2h0S2V5RG93biguLi50KSksW1wicHJldmVudFwiXSksW1widXBcIl0pKV19LFtzKGQse3JlZjpcInRvb2x0aXBcIixtb2RlbFZhbHVlOmUudG9vbHRpcFZpc2libGUsXCJvblVwZGF0ZTptb2RlbFZhbHVlXCI6dFsxXXx8KHRbMV09dD0+ZS50b29sdGlwVmlzaWJsZT10KSxwbGFjZW1lbnQ6XCJ0b3BcIixcInBvcHBlci1jbGFzc1wiOmUudG9vbHRpcENsYXNzLGRpc2FibGVkOiFlLnNob3dUb29sdGlwLG1hbnVhbDpcIlwifSx7Y29udGVudDppKCgoKT0+W3MoXCJzcGFuXCIsbnVsbCxwKGUuZm9ybWF0VmFsdWUpLDEpXSkpLGRlZmF1bHQ6aSgoKCk9PltzKFwiZGl2XCIse2NsYXNzOltcImVsLXNsaWRlcl9fYnV0dG9uXCIse2hvdmVyOmUuaG92ZXJpbmcsZHJhZ2dpbmc6ZS5kcmFnZ2luZ31dfSxudWxsLDIpXSkpLF86MX0sOCxbXCJtb2RlbFZhbHVlXCIsXCJwb3BwZXItY2xhc3NcIixcImRpc2FibGVkXCJdKV0sMzgpfSx3dS5fX2ZpbGU9XCJwYWNrYWdlcy9zbGlkZXIvc3JjL2J1dHRvbi52dWVcIjt2YXIgX3U9ZSh7bmFtZTpcIkVsTWFya2VyXCIscHJvcHM6e21hcms6e3R5cGU6W1N0cmluZyxPYmplY3RdLGRlZmF1bHQ6KCk9Pnt9fX0sc2V0dXA6ZT0+KHtsYWJlbDpsKCgoKT0+XCJzdHJpbmdcIj09dHlwZW9mIGUubWFyaz9lLm1hcms6ZS5tYXJrLmxhYmVsKSl9KSxyZW5kZXIoKXt2YXIgZTtyZXR1cm4gRChcImRpdlwiLHtjbGFzczpcImVsLXNsaWRlcl9fbWFya3MtdGV4dFwiLHN0eWxlOm51bGw9PT0oZT10aGlzLm1hcmspfHx2b2lkIDA9PT1lP3ZvaWQgMDplLnN0eWxlfSx0aGlzLmxhYmVsKX19KTtfdS5fX2ZpbGU9XCJwYWNrYWdlcy9zbGlkZXIvc3JjL21hcmtlci52dWVcIjt2YXIgU3U9ZSh7bmFtZTpcIkVsU2xpZGVyXCIsY29tcG9uZW50czp7RWxJbnB1dE51bWJlcjpwcixTbGlkZXJCdXR0b246d3UsU2xpZGVyTWFya2VyOl91fSxwcm9wczp7bW9kZWxWYWx1ZTp7dHlwZTpbTnVtYmVyLEFycmF5XSxkZWZhdWx0OjB9LG1pbjp7dHlwZTpOdW1iZXIsZGVmYXVsdDowfSxtYXg6e3R5cGU6TnVtYmVyLGRlZmF1bHQ6MTAwfSxzdGVwOnt0eXBlOk51bWJlcixkZWZhdWx0OjF9LHNob3dJbnB1dDp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITF9LHNob3dJbnB1dENvbnRyb2xzOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMH0saW5wdXRTaXplOnt0eXBlOlN0cmluZyxkZWZhdWx0Olwic21hbGxcIn0sc2hvd1N0b3BzOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMX0sc2hvd1Rvb2x0aXA6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiEwfSxmb3JtYXRUb29sdGlwOnt0eXBlOkZ1bmN0aW9uLGRlZmF1bHQ6dm9pZCAwfSxkaXNhYmxlZDp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITF9LHJhbmdlOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMX0sdmVydGljYWw6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiExfSxoZWlnaHQ6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJcIn0sZGVib3VuY2U6e3R5cGU6TnVtYmVyLGRlZmF1bHQ6MzAwfSxsYWJlbDp7dHlwZTpTdHJpbmcsZGVmYXVsdDp2b2lkIDB9LHRvb2x0aXBDbGFzczp7dHlwZTpTdHJpbmcsZGVmYXVsdDp2b2lkIDB9LG1hcmtzOk9iamVjdH0sZW1pdHM6W1B0LFwiY2hhbmdlXCJdLHNldHVwKGUse2VtaXQ6YX0pe2NvbnN0IG49Zih7Zmlyc3RWYWx1ZTpudWxsLHNlY29uZFZhbHVlOm51bGwsb2xkVmFsdWU6bnVsbCxkcmFnZ2luZzohMSxzbGlkZXJTaXplOjF9KSx7ZWxGb3JtSXRlbTpvLHNsaWRlcjppLGZpcnN0QnV0dG9uOnIsc2Vjb25kQnV0dG9uOnMsc2xpZGVyRGlzYWJsZWQ6dSxtaW5WYWx1ZTpkLG1heFZhbHVlOmMscnVud2F5U3R5bGU6cCxiYXJTdHlsZTpoLHJlc2V0U2l6ZTp2LGVtaXRDaGFuZ2U6bSxvblNsaWRlckNsaWNrOmd9PSgoZSxhLG4pPT57Y29uc3Qgbz13KFwiZWxGb3JtXCIse30pLGk9dyhcImVsRm9ybUl0ZW1cIix7fSkscj10KG51bGwpLHM9dChudWxsKSx1PXQobnVsbCksZD17Zmlyc3RCdXR0b246cyxzZWNvbmRCdXR0b246dX0sYz1sKCgoKT0+ZS5kaXNhYmxlZHx8by5kaXNhYmxlZHx8ITEpKSxwPWwoKCgpPT5NYXRoLm1pbihhLmZpcnN0VmFsdWUsYS5zZWNvbmRWYWx1ZSkpKSxoPWwoKCgpPT5NYXRoLm1heChhLmZpcnN0VmFsdWUsYS5zZWNvbmRWYWx1ZSkpKSx2PWwoKCgpPT5lLnJhbmdlPzEwMCooaC52YWx1ZS1wLnZhbHVlKS8oZS5tYXgtZS5taW4pK1wiJVwiOjEwMCooYS5maXJzdFZhbHVlLWUubWluKS8oZS5tYXgtZS5taW4pK1wiJVwiKSksbT1sKCgoKT0+ZS5yYW5nZT8xMDAqKHAudmFsdWUtZS5taW4pLyhlLm1heC1lLm1pbikrXCIlXCI6XCIwJVwiKSksZj1sKCgoKT0+ZS52ZXJ0aWNhbD97aGVpZ2h0OmUuaGVpZ2h0fTp7fSkpLGc9bCgoKCk9PmUudmVydGljYWw/e2hlaWdodDp2LnZhbHVlLGJvdHRvbTptLnZhbHVlfTp7d2lkdGg6di52YWx1ZSxsZWZ0Om0udmFsdWV9KSksYj0oKT0+e3IudmFsdWUmJihhLnNsaWRlclNpemU9ci52YWx1ZVtcImNsaWVudFwiKyhlLnZlcnRpY2FsP1wiSGVpZ2h0XCI6XCJXaWR0aFwiKV0pfSx5PXQ9Pntjb25zdCBsPWUubWluK3QqKGUubWF4LWUubWluKS8xMDA7aWYoIWUucmFuZ2UpcmV0dXJuIHZvaWQgcy52YWx1ZS5zZXRQb3NpdGlvbih0KTtsZXQgbjtuPU1hdGguYWJzKHAudmFsdWUtbCk8TWF0aC5hYnMoaC52YWx1ZS1sKT9hLmZpcnN0VmFsdWU8YS5zZWNvbmRWYWx1ZT9cImZpcnN0QnV0dG9uXCI6XCJzZWNvbmRCdXR0b25cIjphLmZpcnN0VmFsdWU+YS5zZWNvbmRWYWx1ZT9cImZpcnN0QnV0dG9uXCI6XCJzZWNvbmRCdXR0b25cIixkW25dLnZhbHVlLnNldFBvc2l0aW9uKHQpfSxDPSgpPT5ucih2b2lkIDAsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24qKCl7eWllbGQgaygpLG4oXCJjaGFuZ2VcIixlLnJhbmdlP1twLnZhbHVlLGgudmFsdWVdOmUubW9kZWxWYWx1ZSl9KSk7cmV0dXJue2VsRm9ybUl0ZW06aSxzbGlkZXI6cixmaXJzdEJ1dHRvbjpzLHNlY29uZEJ1dHRvbjp1LHNsaWRlckRpc2FibGVkOmMsbWluVmFsdWU6cCxtYXhWYWx1ZTpoLHJ1bndheVN0eWxlOmYsYmFyU3R5bGU6ZyxyZXNldFNpemU6YixzZXRQb3NpdGlvbjp5LGVtaXRDaGFuZ2U6QyxvblNsaWRlckNsaWNrOnQ9PntpZighYy52YWx1ZSYmIWEuZHJhZ2dpbmcpe2lmKGIoKSxlLnZlcnRpY2FsKXtjb25zdCBlPXIudmFsdWUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuYm90dG9tO3koKGUtdC5jbGllbnRZKS9hLnNsaWRlclNpemUqMTAwKX1lbHNle2NvbnN0IGU9ci52YWx1ZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0O3koKHQuY2xpZW50WC1lKS9hLnNsaWRlclNpemUqMTAwKX1DKCl9fX19KShlLG4sYSkse3N0b3BzOmIsZ2V0U3RvcFN0eWxlOnl9PSgoZSx0LGEsbik9Pih7c3RvcHM6bCgoKCk9PntpZighZS5zaG93U3RvcHN8fGUubWluPmUubWF4KXJldHVybltdO2lmKDA9PT1lLnN0ZXApcmV0dXJuXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmY29uc29sZS53YXJuKFwiW0VsZW1lbnQgV2Fybl1bU2xpZGVyXXN0ZXAgc2hvdWxkIG5vdCBiZSAwLlwiKSxbXTtjb25zdCBsPShlLm1heC1lLm1pbikvZS5zdGVwLG89MTAwKmUuc3RlcC8oZS5tYXgtZS5taW4pLGk9QXJyYXkuZnJvbSh7bGVuZ3RoOmwtMX0pLm1hcCgoKGUsdCk9Pih0KzEpKm8pKTtyZXR1cm4gZS5yYW5nZT9pLmZpbHRlcigodD0+dDwxMDAqKGEudmFsdWUtZS5taW4pLyhlLm1heC1lLm1pbil8fHQ+MTAwKihuLnZhbHVlLWUubWluKS8oZS5tYXgtZS5taW4pKSk6aS5maWx0ZXIoKGw9Pmw+MTAwKih0LmZpcnN0VmFsdWUtZS5taW4pLyhlLm1heC1lLm1pbikpKX0pKSxnZXRTdG9wU3R5bGU6dD0+ZS52ZXJ0aWNhbD97Ym90dG9tOnQrXCIlXCJ9OntsZWZ0OnQrXCIlXCJ9fSkpKGUsbixkLGMpLF89KGU9PmwoKCgpPT5lLm1hcmtzP09iamVjdC5rZXlzKGUubWFya3MpLm1hcChwYXJzZUZsb2F0KS5zb3J0KCgoZSx0KT0+ZS10KSkuZmlsdGVyKCh0PT50PD1lLm1heCYmdD49ZS5taW4pKS5tYXAoKHQ9Pih7cG9pbnQ6dCxwb3NpdGlvbjoxMDAqKHQtZS5taW4pLyhlLm1heC1lLm1pbiksbWFyazplLm1hcmtzW3RdfSkpKTpbXSkpKShlKTtFdShlLG4sZCxjLGEsbyk7Y29uc3QgUz1sKCgoKT0+e2xldCB0PVtlLm1pbixlLm1heCxlLnN0ZXBdLm1hcCgoZT0+e2xldCB0PShcIlwiK2UpLnNwbGl0KFwiLlwiKVsxXTtyZXR1cm4gdD90Lmxlbmd0aDowfSkpO3JldHVybiBNYXRoLm1heC5hcHBseShudWxsLHQpfSkpLHtzbGlkZXJXcmFwcGVyOkV9PU11KGUsbix2KSx7Zmlyc3RWYWx1ZTpNLHNlY29uZFZhbHVlOlQsb2xkVmFsdWU6TixkcmFnZ2luZzpELHNsaWRlclNpemU6T309QyhuKTtyZXR1cm4geChcIlNsaWRlclByb3ZpZGVyXCIsT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LEMoZSkpLHtzbGlkZXJTaXplOk8sZGlzYWJsZWQ6dSxwcmVjaXNpb246UyxlbWl0Q2hhbmdlOm0scmVzZXRTaXplOnYsdXBkYXRlRHJhZ2dpbmc6ZT0+e24uZHJhZ2dpbmc9ZX19KSkse2ZpcnN0VmFsdWU6TSxzZWNvbmRWYWx1ZTpULG9sZFZhbHVlOk4sZHJhZ2dpbmc6RCxzbGlkZXJTaXplOk8sc2xpZGVyOmksZmlyc3RCdXR0b246cixzZWNvbmRCdXR0b246cyxzbGlkZXJEaXNhYmxlZDp1LHJ1bndheVN0eWxlOnAsYmFyU3R5bGU6aCxlbWl0Q2hhbmdlOm0sb25TbGlkZXJDbGljazpnLGdldFN0b3BTdHlsZTp5LHN0b3BzOmIsbWFya0xpc3Q6XyxzbGlkZXJXcmFwcGVyOkV9fX0pO2NvbnN0IEV1PShlLHQsbCxhLG4sbyk9Pntjb25zdCBpPWU9PntuKFB0LGUpfSxyPSgpPT5lLnJhbmdlPyFbbC52YWx1ZSxhLnZhbHVlXS5ldmVyeSgoKGUsbCk9PmU9PT10Lm9sZFZhbHVlW2xdKSk6ZS5tb2RlbFZhbHVlIT09dC5vbGRWYWx1ZSxzPSgpPT57dmFyIG4scztpZihlLm1pbj5lLm1heClyZXR1cm4gdm9pZCBtdChcIlNsaWRlclwiLFwibWluIHNob3VsZCBub3QgYmUgZ3JlYXRlciB0aGFuIG1heC5cIik7Y29uc3QgdT1lLm1vZGVsVmFsdWU7ZS5yYW5nZSYmQXJyYXkuaXNBcnJheSh1KT91WzFdPGUubWluP2koW2UubWluLGUubWluXSk6dVswXT5lLm1heD9pKFtlLm1heCxlLm1heF0pOnVbMF08ZS5taW4/aShbZS5taW4sdVsxXV0pOnVbMV0+ZS5tYXg/aShbdVswXSxlLm1heF0pOih0LmZpcnN0VmFsdWU9dVswXSx0LnNlY29uZFZhbHVlPXVbMV0scigpJiYobnVsbD09PShuPW8uZm9ybUl0ZW1NaXR0KXx8dm9pZCAwPT09bnx8bi5lbWl0KFwiZWwuZm9ybS5jaGFuZ2VcIixbbC52YWx1ZSxhLnZhbHVlXSksdC5vbGRWYWx1ZT11LnNsaWNlKCkpKTplLnJhbmdlfHxcIm51bWJlclwiIT10eXBlb2YgdXx8aXNOYU4odSl8fCh1PGUubWluP2koZS5taW4pOnU+ZS5tYXg/aShlLm1heCk6KHQuZmlyc3RWYWx1ZT11LHIoKSYmKG51bGw9PT0ocz1vLmZvcm1JdGVtTWl0dCl8fHZvaWQgMD09PXN8fHMuZW1pdChcImVsLmZvcm0uY2hhbmdlXCIsdSksdC5vbGRWYWx1ZT11KSkpfTt5KCgoKT0+dC5kcmFnZ2luZyksKGU9PntlfHxzKCl9KSkseSgoKCk9PnQuZmlyc3RWYWx1ZSksKHQ9PntlLnJhbmdlP2koW2wudmFsdWUsYS52YWx1ZV0pOmkodCl9KSkseSgoKCk9PnQuc2Vjb25kVmFsdWUpLCgoKT0+e2UucmFuZ2UmJmkoW2wudmFsdWUsYS52YWx1ZV0pfSkpLHkoKCgpPT5lLm1vZGVsVmFsdWUpLCgoZSxsKT0+e3QuZHJhZ2dpbmd8fEFycmF5LmlzQXJyYXkoZSkmJkFycmF5LmlzQXJyYXkobCkmJmUuZXZlcnkoKChlLHQpPT5lPT09bFt0XSkpfHxzKCl9KSkseSgoKCk9PltlLm1pbixlLm1heF0pLCgoKT0+e3MoKX0pKX0sTXU9KGUsbCxhKT0+e2NvbnN0IG49dChudWxsKTtyZXR1cm4gXygoKCk9Pm5yKHZvaWQgMCx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbiooKXtsZXQgdDtlLnJhbmdlPyhBcnJheS5pc0FycmF5KGUubW9kZWxWYWx1ZSk/KGwuZmlyc3RWYWx1ZT1NYXRoLm1heChlLm1pbixlLm1vZGVsVmFsdWVbMF0pLGwuc2Vjb25kVmFsdWU9TWF0aC5taW4oZS5tYXgsZS5tb2RlbFZhbHVlWzFdKSk6KGwuZmlyc3RWYWx1ZT1lLm1pbixsLnNlY29uZFZhbHVlPWUubWF4KSxsLm9sZFZhbHVlPVtsLmZpcnN0VmFsdWUsbC5zZWNvbmRWYWx1ZV0sdD1gJHtsLmZpcnN0VmFsdWV9LSR7bC5zZWNvbmRWYWx1ZX1gKTooXCJudW1iZXJcIiE9dHlwZW9mIGUubW9kZWxWYWx1ZXx8aXNOYU4oZS5tb2RlbFZhbHVlKT9sLmZpcnN0VmFsdWU9ZS5taW46bC5maXJzdFZhbHVlPU1hdGgubWluKGUubWF4LE1hdGgubWF4KGUubWluLGUubW9kZWxWYWx1ZSkpLGwub2xkVmFsdWU9bC5maXJzdFZhbHVlLHQ9bC5maXJzdFZhbHVlKSxuLnZhbHVlLnNldEF0dHJpYnV0ZShcImFyaWEtdmFsdWV0ZXh0XCIsdCksbi52YWx1ZS5zZXRBdHRyaWJ1dGUoXCJhcmlhLWxhYmVsXCIsZS5sYWJlbD9lLmxhYmVsOmBzbGlkZXIgYmV0d2VlbiAke2UubWlufSBhbmQgJHtlLm1heH1gKSxsdCh3aW5kb3csXCJyZXNpemVcIixhKSx5aWVsZCBrKCksYSgpfSkpKSksTygoKCk9PnthdCh3aW5kb3csXCJyZXNpemVcIixhKX0pKSx7c2xpZGVyV3JhcHBlcjpufX0sVHU9e2tleToxfSxOdT17Y2xhc3M6XCJlbC1zbGlkZXJfX21hcmtzXCJ9O1N1LnJlbmRlcj1mdW5jdGlvbihlLHQsbCxvLGkscil7Y29uc3QgZD1QKFwiZWwtaW5wdXQtbnVtYmVyXCIpLGM9UChcInNsaWRlci1idXR0b25cIikscD1QKFwic2xpZGVyLW1hcmtlclwiKTtyZXR1cm4gYSgpLG4oXCJkaXZcIix7cmVmOlwic2xpZGVyV3JhcHBlclwiLGNsYXNzOltcImVsLXNsaWRlclwiLHtcImlzLXZlcnRpY2FsXCI6ZS52ZXJ0aWNhbCxcImVsLXNsaWRlci0td2l0aC1pbnB1dFwiOmUuc2hvd0lucHV0fV0scm9sZTpcInNsaWRlclwiLFwiYXJpYS12YWx1ZW1pblwiOmUubWluLFwiYXJpYS12YWx1ZW1heFwiOmUubWF4LFwiYXJpYS1vcmllbnRhdGlvblwiOmUudmVydGljYWw/XCJ2ZXJ0aWNhbFwiOlwiaG9yaXpvbnRhbFwiLFwiYXJpYS1kaXNhYmxlZFwiOmUuc2xpZGVyRGlzYWJsZWR9LFtlLnNob3dJbnB1dCYmIWUucmFuZ2U/KGEoKSxuKGQse2tleTowLHJlZjpcImlucHV0XCIsbW9kZWxWYWx1ZTplLmZpcnN0VmFsdWUsXCJvblVwZGF0ZTptb2RlbFZhbHVlXCI6dFsxXXx8KHRbMV09dD0+ZS5maXJzdFZhbHVlPXQpLGNsYXNzOlwiZWwtc2xpZGVyX19pbnB1dFwiLHN0ZXA6ZS5zdGVwLGRpc2FibGVkOmUuc2xpZGVyRGlzYWJsZWQsY29udHJvbHM6ZS5zaG93SW5wdXRDb250cm9scyxtaW46ZS5taW4sbWF4OmUubWF4LGRlYm91bmNlOmUuZGVib3VuY2Usc2l6ZTplLmlucHV0U2l6ZSxvbkNoYW5nZTplLmVtaXRDaGFuZ2V9LG51bGwsOCxbXCJtb2RlbFZhbHVlXCIsXCJzdGVwXCIsXCJkaXNhYmxlZFwiLFwiY29udHJvbHNcIixcIm1pblwiLFwibWF4XCIsXCJkZWJvdW5jZVwiLFwic2l6ZVwiLFwib25DaGFuZ2VcIl0pKTp1KFwidi1pZlwiLCEwKSxzKFwiZGl2XCIse3JlZjpcInNsaWRlclwiLGNsYXNzOltcImVsLXNsaWRlcl9fcnVud2F5XCIse1wic2hvdy1pbnB1dFwiOmUuc2hvd0lucHV0LGRpc2FibGVkOmUuc2xpZGVyRGlzYWJsZWR9XSxzdHlsZTplLnJ1bndheVN0eWxlLG9uQ2xpY2s6dFs0XXx8KHRbNF09KC4uLnQpPT5lLm9uU2xpZGVyQ2xpY2soLi4udCkpfSxbcyhcImRpdlwiLHtjbGFzczpcImVsLXNsaWRlcl9fYmFyXCIsc3R5bGU6ZS5iYXJTdHlsZX0sbnVsbCw0KSxzKGMse3JlZjpcImZpcnN0QnV0dG9uXCIsbW9kZWxWYWx1ZTplLmZpcnN0VmFsdWUsXCJvblVwZGF0ZTptb2RlbFZhbHVlXCI6dFsyXXx8KHRbMl09dD0+ZS5maXJzdFZhbHVlPXQpLHZlcnRpY2FsOmUudmVydGljYWwsXCJ0b29sdGlwLWNsYXNzXCI6ZS50b29sdGlwQ2xhc3N9LG51bGwsOCxbXCJtb2RlbFZhbHVlXCIsXCJ2ZXJ0aWNhbFwiLFwidG9vbHRpcC1jbGFzc1wiXSksZS5yYW5nZT8oYSgpLG4oYyx7a2V5OjAscmVmOlwic2Vjb25kQnV0dG9uXCIsbW9kZWxWYWx1ZTplLnNlY29uZFZhbHVlLFwib25VcGRhdGU6bW9kZWxWYWx1ZVwiOnRbM118fCh0WzNdPXQ9PmUuc2Vjb25kVmFsdWU9dCksdmVydGljYWw6ZS52ZXJ0aWNhbCxcInRvb2x0aXAtY2xhc3NcIjplLnRvb2x0aXBDbGFzc30sbnVsbCw4LFtcIm1vZGVsVmFsdWVcIixcInZlcnRpY2FsXCIsXCJ0b29sdGlwLWNsYXNzXCJdKSk6dShcInYtaWZcIiwhMCksZS5zaG93U3RvcHM/KGEoKSxuKFwiZGl2XCIsVHUsWyhhKCEwKSxuKEUsbnVsbCxIKGUuc3RvcHMsKCh0LGwpPT4oYSgpLG4oXCJkaXZcIix7a2V5OmwsY2xhc3M6XCJlbC1zbGlkZXJfX3N0b3BcIixzdHlsZTplLmdldFN0b3BTdHlsZSh0KX0sbnVsbCw0KSkpKSwxMjgpKV0pKTp1KFwidi1pZlwiLCEwKSxlLm1hcmtMaXN0Lmxlbmd0aD4wPyhhKCksbihFLHtrZXk6Mn0sW3MoXCJkaXZcIixudWxsLFsoYSghMCksbihFLG51bGwsSChlLm1hcmtMaXN0LCgodCxsKT0+KGEoKSxuKFwiZGl2XCIse2tleTpsLHN0eWxlOmUuZ2V0U3RvcFN0eWxlKHQucG9zaXRpb24pLGNsYXNzOlwiZWwtc2xpZGVyX19zdG9wIGVsLXNsaWRlcl9fbWFya3Mtc3RvcFwifSxudWxsLDQpKSkpLDEyOCkpXSkscyhcImRpdlwiLE51LFsoYSghMCksbihFLG51bGwsSChlLm1hcmtMaXN0LCgodCxsKT0+KGEoKSxuKHAse2tleTpsLG1hcms6dC5tYXJrLHN0eWxlOmUuZ2V0U3RvcFN0eWxlKHQucG9zaXRpb24pfSxudWxsLDgsW1wibWFya1wiLFwic3R5bGVcIl0pKSkpLDEyOCkpXSldLDY0KSk6dShcInYtaWZcIiwhMCldLDYpXSwxMCxbXCJhcmlhLXZhbHVlbWluXCIsXCJhcmlhLXZhbHVlbWF4XCIsXCJhcmlhLW9yaWVudGF0aW9uXCIsXCJhcmlhLWRpc2FibGVkXCJdKX0sU3UuX19maWxlPVwicGFja2FnZXMvc2xpZGVyL3NyYy9pbmRleC52dWVcIixTdS5pbnN0YWxsPWU9PntlLmNvbXBvbmVudChTdS5uYW1lLFN1KX07dmFyIER1PWUoe25hbWU6XCJFbFN0ZXBcIixwcm9wczp7dGl0bGU6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJcIn0saWNvbjp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIlwifSxkZXNjcmlwdGlvbjp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIlwifSxzdGF0dXM6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJcIix2YWxpZGF0b3I6ZT0+W1wiXCIsXCJ3YWl0XCIsXCJwcm9jZXNzXCIsXCJmaW5pc2hcIixcImVycm9yXCIsXCJzdWNjZXNzXCJdLmluY2x1ZGVzKGUpfX0sc2V0dXAoZSl7Y29uc3QgYT10KC0xKSxuPXQoe30pLG89dChcIlwiKSxpPXcoXCJFbFN0ZXBzXCIpLHI9digpO18oKCgpPT57eShbKCk9PmkucHJvcHMuYWN0aXZlLCgpPT5pLnByb3BzLnByb2Nlc3NTdGF0dXMsKCk9PmkucHJvcHMuZmluaXNoU3RhdHVzXSwoKFtlXSk9Pnt4KGUpfSkse2ltbWVkaWF0ZTohMH0pfSkpLE8oKCgpPT57aS5zdGVwcy52YWx1ZT1pLnN0ZXBzLnZhbHVlLmZpbHRlcigoZT0+ZS51aWQhPT1yLnVpZCkpfSkpO2NvbnN0IHM9bCgoKCk9PmUuc3RhdHVzfHxvLnZhbHVlKSksdT1sKCgoKT0+e2NvbnN0IGU9aS5zdGVwcy52YWx1ZVthLnZhbHVlLTFdO3JldHVybiBlP2UuY3VycmVudFN0YXR1czpcIndhaXRcIn0pKSxkPWwoKCgpPT5pLnByb3BzLmFsaWduQ2VudGVyKSksYz1sKCgoKT0+XCJ2ZXJ0aWNhbFwiPT09aS5wcm9wcy5kaXJlY3Rpb24pKSxwPWwoKCgpPT5pLnByb3BzLnNpbXBsZSkpLGg9bCgoKCk9Pmkuc3RlcHMudmFsdWUubGVuZ3RoKSksbT1sKCgoKT0+e3ZhciBlO3JldHVybihudWxsPT09KGU9aS5zdGVwcy52YWx1ZVtoLnZhbHVlLTFdKXx8dm9pZCAwPT09ZT92b2lkIDA6ZS51aWQpPT09ci51aWR9KSksZz1sKCgoKT0+cC52YWx1ZT9cIlwiOmkucHJvcHMuc3BhY2UpKSxiPWwoKCgpPT57Y29uc3QgZT17ZmxleEJhc2lzOlwibnVtYmVyXCI9PXR5cGVvZiBnLnZhbHVlP2cudmFsdWUrXCJweFwiOmcudmFsdWU/Zy52YWx1ZToxMDAvKGgudmFsdWUtKGQudmFsdWU/MDoxKSkrXCIlXCJ9O3JldHVybiBjLnZhbHVlfHxtLnZhbHVlJiYoZS5tYXhXaWR0aD0xMDAvaC52YWx1ZStcIiVcIiksZX0pKSxrPWU9PnthLnZhbHVlPWV9LEM9ZT0+e2xldCB0PTEwMDtjb25zdCBsPXt9O2wudHJhbnNpdGlvbkRlbGF5PTE1MCphLnZhbHVlK1wibXNcIixlPT09aS5wcm9wcy5wcm9jZXNzU3RhdHVzP3Q9MDpcIndhaXRcIj09PWUmJih0PTAsbC50cmFuc2l0aW9uRGVsYXk9LTE1MCphLnZhbHVlK1wibXNcIiksbC5ib3JkZXJXaWR0aD10JiYhcC52YWx1ZT9cIjFweFwiOjAsbFtcInZlcnRpY2FsXCI9PT1pLnByb3BzLmRpcmVjdGlvbj9cImhlaWdodFwiOlwid2lkdGhcIl09dCtcIiVcIixuLnZhbHVlPWx9LHg9ZT0+e2U+YS52YWx1ZT9vLnZhbHVlPWkucHJvcHMuZmluaXNoU3RhdHVzOmU9PT1hLnZhbHVlJiZcImVycm9yXCIhPT11LnZhbHVlP28udmFsdWU9aS5wcm9wcy5wcm9jZXNzU3RhdHVzOm8udmFsdWU9XCJ3YWl0XCI7Y29uc3QgdD1pLnN0ZXBzLnZhbHVlW2gudmFsdWUtMV07dCYmdC5jYWxjUHJvZ3Jlc3Moby52YWx1ZSl9LFM9Zih7dWlkOmwoKCgpPT5yLnVpZCkpLGN1cnJlbnRTdGF0dXM6cyxzZXRJbmRleDprLGNhbGNQcm9ncmVzczpDfSk7cmV0dXJuIGkuc3RlcHMudmFsdWU9Wy4uLmkuc3RlcHMudmFsdWUsU10se2luZGV4OmEsbGluZVN0eWxlOm4sY3VycmVudFN0YXR1czpzLGlzQ2VudGVyOmQsaXNWZXJ0aWNhbDpjLGlzU2ltcGxlOnAsaXNMYXN0Om0sc3BhY2U6ZyxzdHlsZTpiLHBhcmVudDppLHNldEluZGV4OmssY2FsY1Byb2dyZXNzOkMsdXBkYXRlU3RhdHVzOnh9fX0pO2NvbnN0IE91PXtjbGFzczpcImVsLXN0ZXBfX2xpbmVcIn0sUHU9e2tleToxLGNsYXNzOlwiZWwtc3RlcF9faWNvbi1pbm5lclwifSxWdT17Y2xhc3M6XCJlbC1zdGVwX19tYWluXCJ9LEl1PXtrZXk6MCxjbGFzczpcImVsLXN0ZXBfX2Fycm93XCJ9O0R1LnJlbmRlcj1mdW5jdGlvbihlLHQsbCxvLGkscil7cmV0dXJuIGEoKSxuKFwiZGl2XCIse3N0eWxlOmUuc3R5bGUsY2xhc3M6W1wiZWwtc3RlcFwiLGUuaXNTaW1wbGU/XCJpcy1zaW1wbGVcIjpcImlzLVwiK2UucGFyZW50LnByb3BzLmRpcmVjdGlvbixlLmlzTGFzdCYmIWUuc3BhY2UmJiFlLmlzQ2VudGVyJiZcImlzLWZsZXhcIixlLmlzQ2VudGVyJiYhZS5pc1ZlcnRpY2FsJiYhZS5pc1NpbXBsZSYmXCJpcy1jZW50ZXJcIl19LFt1KFwiIGljb24gJiBsaW5lIFwiKSxzKFwiZGl2XCIse2NsYXNzOltcImVsLXN0ZXBfX2hlYWRcIixcImlzLVwiK2UuY3VycmVudFN0YXR1c119LFtzKFwiZGl2XCIsT3UsW3MoXCJpXCIse2NsYXNzOlwiZWwtc3RlcF9fbGluZS1pbm5lclwiLHN0eWxlOmUubGluZVN0eWxlfSxudWxsLDQpXSkscyhcImRpdlwiLHtjbGFzczpbXCJlbC1zdGVwX19pY29uXCIsXCJpcy1cIisoZS5pY29uP1wiaWNvblwiOlwidGV4dFwiKV19LFtcInN1Y2Nlc3NcIiE9PWUuY3VycmVudFN0YXR1cyYmXCJlcnJvclwiIT09ZS5jdXJyZW50U3RhdHVzP2QoZS4kc2xvdHMsXCJpY29uXCIse2tleTowfSwoKCk9PltlLmljb24/KGEoKSxuKFwiaVwiLHtrZXk6MCxjbGFzczpbXCJlbC1zdGVwX19pY29uLWlubmVyXCIsZS5pY29uXX0sbnVsbCwyKSk6dShcInYtaWZcIiwhMCksZS5pY29ufHxlLmlzU2ltcGxlP3UoXCJ2LWlmXCIsITApOihhKCksbihcImRpdlwiLFB1LHAoZS5pbmRleCsxKSwxKSldKSk6KGEoKSxuKFwiaVwiLHtrZXk6MSxjbGFzczpbXCJlbC1zdGVwX19pY29uLWlubmVyXCIsXCJpcy1zdGF0dXNcIixcImVsLWljb24tXCIrKFwic3VjY2Vzc1wiPT09ZS5jdXJyZW50U3RhdHVzP1wiY2hlY2tcIjpcImNsb3NlXCIpXX0sbnVsbCwyKSldLDIpXSwyKSx1KFwiIHRpdGxlICYgZGVzY3JpcHRpb24gXCIpLHMoXCJkaXZcIixWdSxbcyhcImRpdlwiLHtjbGFzczpbXCJlbC1zdGVwX190aXRsZVwiLFwiaXMtXCIrZS5jdXJyZW50U3RhdHVzXX0sW2QoZS4kc2xvdHMsXCJ0aXRsZVwiLHt9LCgoKT0+W2MocChlLnRpdGxlKSwxKV0pKV0sMiksZS5pc1NpbXBsZT8oYSgpLG4oXCJkaXZcIixJdSkpOihhKCksbihcImRpdlwiLHtrZXk6MSxjbGFzczpbXCJlbC1zdGVwX19kZXNjcmlwdGlvblwiLFwiaXMtXCIrZS5jdXJyZW50U3RhdHVzXX0sW2QoZS4kc2xvdHMsXCJkZXNjcmlwdGlvblwiLHt9LCgoKT0+W2MocChlLmRlc2NyaXB0aW9uKSwxKV0pKV0sMikpXSldLDYpfSxEdS5fX2ZpbGU9XCJwYWNrYWdlcy9zdGVwcy9zcmMvaXRlbS52dWVcIixEdS5pbnN0YWxsPWU9PntlLmNvbXBvbmVudChEdS5uYW1lLER1KX07dmFyIEF1PWUoe25hbWU6XCJFbFN0ZXBzXCIscHJvcHM6e3NwYWNlOnt0eXBlOltOdW1iZXIsU3RyaW5nXSxkZWZhdWx0OlwiXCJ9LGFjdGl2ZTp7dHlwZTpOdW1iZXIsZGVmYXVsdDowfSxkaXJlY3Rpb246e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJob3Jpem9udGFsXCIsdmFsaWRhdG9yOmU9PltcImhvcml6b250YWxcIixcInZlcnRpY2FsXCJdLmluY2x1ZGVzKGUpfSxhbGlnbkNlbnRlcjp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITF9LHNpbXBsZTp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITF9LGZpbmlzaFN0YXR1czp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcImZpbmlzaFwiLHZhbGlkYXRvcjplPT5bXCJ3YWl0XCIsXCJwcm9jZXNzXCIsXCJmaW5pc2hcIixcImVycm9yXCIsXCJzdWNjZXNzXCJdLmluY2x1ZGVzKGUpfSxwcm9jZXNzU3RhdHVzOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwicHJvY2Vzc1wiLHZhbGlkYXRvcjplPT5bXCJ3YWl0XCIsXCJwcm9jZXNzXCIsXCJmaW5pc2hcIixcImVycm9yXCIsXCJzdWNjZXNzXCJdLmluY2x1ZGVzKGUpfX0sZW1pdHM6W1wiY2hhbmdlXCJdLHNldHVwKGUse2VtaXQ6bH0pe2NvbnN0IGE9dChbXSk7cmV0dXJuIHkoYSwoKCk9PnthLnZhbHVlLmZvckVhY2goKChlLHQpPT57ZS5zZXRJbmRleCh0KX0pKX0pKSx4KFwiRWxTdGVwc1wiLHtwcm9wczplLHN0ZXBzOmF9KSx5KCgoKT0+ZS5hY3RpdmUpLCgoZSx0KT0+e2woXCJjaGFuZ2VcIixlLHQpfSkpLHtzdGVwczphfX19KTtBdS5yZW5kZXI9ZnVuY3Rpb24oZSx0LGwsbyxpLHIpe3JldHVybiBhKCksbihcImRpdlwiLHtjbGFzczpbXCJlbC1zdGVwc1wiLGUuc2ltcGxlP1wiZWwtc3RlcHMtLXNpbXBsZVwiOlwiZWwtc3RlcHMtLVwiK2UuZGlyZWN0aW9uXX0sW2QoZS4kc2xvdHMsXCJkZWZhdWx0XCIpXSwyKX0sQXUuX19maWxlPVwicGFja2FnZXMvc3RlcHMvc3JjL2luZGV4LnZ1ZVwiLEF1Lmluc3RhbGw9ZT0+e2UuY29tcG9uZW50KEF1Lm5hbWUsQXUpfTt2YXIgQnU9ZSh7bmFtZTpcIkVsU3VibWVudVwiLGNvbXBvbmVudE5hbWU6XCJFbFN1Ym1lbnVcIixjb21wb25lbnRzOntFbENvbGxhcHNlVHJhbnNpdGlvbjpWbixFbFBvcHBlcjpTbH0scHJvcHM6e2luZGV4Ont0eXBlOlN0cmluZyxyZXF1aXJlZDohMH0sc2hvd1RpbWVvdXQ6e3R5cGU6TnVtYmVyLGRlZmF1bHQ6MzAwfSxoaWRlVGltZW91dDp7dHlwZTpOdW1iZXIsZGVmYXVsdDozMDB9LHBvcHBlckNsYXNzOlN0cmluZyxkaXNhYmxlZDpCb29sZWFuLHBvcHBlckFwcGVuZFRvQm9keTp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6dm9pZCAwfX0sc2V0dXAoZSl7Y29uc3QgYT1mKHtwb3BwZXJKUzpudWxsLHRpbWVvdXQ6bnVsbCxpdGVtczp7fSxzdWJtZW51czp7fSxjdXJyZW50UGxhY2VtZW50OlwiXCIsbW91c2VJbkNoaWxkOiExLG9wZW5lZDohMX0pLG49dChudWxsKSxvPXQobnVsbCksaT12KCkse3BhZGRpbmdTdHlsZTpyLGluZGV4UGF0aDpzLHBhcmVudE1lbnU6dX09TnIoaSxlLmluZGV4KSx7b3BlbmVkTWVudXM6ZCxpc01lbnVQb3B1cDpjLGhvdmVyQmFja2dyb3VuZDpwLG1ldGhvZHM6aCxwcm9wczptLG1ldGhvZHM6e2Nsb3NlTWVudTpnfSxyb290TWVudU9uOmIscm9vdE1lbnVFbWl0Onl9PXcoXCJyb290TWVudVwiKSx7YWRkU3ViTWVudTprLHJlbW92ZVN1Yk1lbnU6QyxoYW5kbGVNb3VzZWxlYXZlOlN9PXcoXCJzdWJNZW51OlwiK3UudmFsdWUudWlkKSxFPWwoKCgpPT5cImhvcml6b250YWxcIj09PUIudmFsdWUmJk0udmFsdWV8fFwidmVydGljYWxcIj09PUIudmFsdWUmJiFtLmNvbGxhcHNlP1wiZWwtaWNvbi1hcnJvdy1kb3duXCI6XCJlbC1pY29uLWFycm93LXJpZ2h0XCIpKSxNPWwoKCgpPT57bGV0IGU9ITAsdD1pLnBhcmVudDtmb3IoO3QmJlwiRWxNZW51XCIhPT10LnR5cGUubmFtZTspe2lmKFtcIkVsU3VibWVudVwiLFwiRWxNZW51SXRlbUdyb3VwXCJdLmluY2x1ZGVzKHQudHlwZS5uYW1lKSl7ZT0hMTticmVha310PXQucGFyZW50fXJldHVybiBlfSkpLFQ9bCgoKCk9PnZvaWQgMD09PWUucG9wcGVyQXBwZW5kVG9Cb2R5P00udmFsdWU6Qm9vbGVhbihlLnBvcHBlckFwcGVuZFRvQm9keSkpKSxOPWwoKCgpPT5tLmNvbGxhcHNlP1wiZWwtem9vbS1pbi1sZWZ0XCI6XCJlbC16b29tLWluLXRvcFwiKSksRD1sKCgoKT0+ZC52YWx1ZS5pbmNsdWRlcyhlLmluZGV4KSkpLFA9bCgoKCk9PntsZXQgZT0hMTtjb25zdCB0PWEuc3VibWVudXMsbD1hLml0ZW1zO3JldHVybiBPYmplY3Qua2V5cyhsKS5mb3JFYWNoKCh0PT57bFt0XS5hY3RpdmUmJihlPSEwKX0pKSxPYmplY3Qua2V5cyh0KS5mb3JFYWNoKChsPT57dFtsXS5hY3RpdmUmJihlPSEwKX0pKSxlfSkpLFY9bCgoKCk9Pm0uYmFja2dyb3VuZENvbG9yfHxcIlwiKSksST1sKCgoKT0+bS5hY3RpdmVUZXh0Q29sb3J8fFwiXCIpKSxBPWwoKCgpPT5tLnRleHRDb2xvcnx8XCJcIikpLEI9bCgoKCk9Pm0ubW9kZSkpLEw9bCgoKCk9PlwiaG9yaXpvbnRhbFwiIT09Qi52YWx1ZT97Y29sb3I6QS52YWx1ZX06e2JvcmRlckJvdHRvbUNvbG9yOlAudmFsdWU/bS5hY3RpdmVUZXh0Q29sb3I/SS52YWx1ZTpcIlwiOlwidHJhbnNwYXJlbnRcIixjb2xvcjpQLnZhbHVlP0kudmFsdWU6QS52YWx1ZX0pKSx6PW5lKCksRj1lPT57dmFyIHQ7ZT9XKCk6bnVsbD09PSh0PW8udmFsdWUpfHx2b2lkIDA9PT10fHx0LmRvRGVzdHJveSgpfSwkPWU9PnthLnN1Ym1lbnVzW2UuaW5kZXhdPWV9LFI9ZT0+e2RlbGV0ZSBhLnN1Ym1lbnVzW2UuaW5kZXhdfSxIPSh0PSExKT0+e1wiY2xpY2tcIj09PW0ubWVudVRyaWdnZXImJlwiaG9yaXpvbnRhbFwiPT09bS5tb2RlfHwhbS5jb2xsYXBzZSYmXCJ2ZXJ0aWNhbFwiPT09bS5tb2RlfHwoei5lbWl0KFwic3VibWVudTptb3VzZS1sZWF2ZS1jaGlsZFwiKSxjbGVhclRpbWVvdXQoYS50aW1lb3V0KSxhLnRpbWVvdXQ9c2V0VGltZW91dCgoKCk9PnshYS5tb3VzZUluQ2hpbGQmJmcoZS5pbmRleCl9KSxlLmhpZGVUaW1lb3V0KSxULnZhbHVlJiZ0JiZcIkVsU3VibWVudVwiPT09aS5wYXJlbnQudHlwZS5uYW1lJiZTKCEwKSl9LFc9KCk9PnthLmN1cnJlbnRQbGFjZW1lbnQ9XCJob3Jpem9udGFsXCI9PT1CLnZhbHVlJiZNLnZhbHVlP1wiYm90dG9tLXN0YXJ0XCI6XCJyaWdodC1zdGFydFwifTtyZXR1cm4geChcInN1Yk1lbnU6XCIraS51aWQse2FkZFN1Yk1lbnU6JCxyZW1vdmVTdWJNZW51OlIsaGFuZGxlTW91c2VsZWF2ZTpIfSksWCgoKCk9PntiKFwicm9vdE1lbnU6dG9nZ2xlLWNvbGxhcHNlXCIsKGU9PntGKGUpfSkpLHoub24oXCJzdWJtZW51Om1vdXNlLWVudGVyLWNoaWxkXCIsKCgpPT57YS5tb3VzZUluQ2hpbGQ9ITAsY2xlYXJUaW1lb3V0KGEudGltZW91dCl9KSksei5vbihcInN1Ym1lbnU6bW91c2UtbGVhdmUtY2hpbGRcIiwoKCk9PnthLm1vdXNlSW5DaGlsZD0hMSxjbGVhclRpbWVvdXQoYS50aW1lb3V0KX0pKX0pKSxfKCgoKT0+e2guYWRkU3ViTWVudSh7aW5kZXg6ZS5pbmRleCxpbmRleFBhdGg6cyxhY3RpdmU6UH0pLGsoe2luZGV4OmUuaW5kZXgsaW5kZXhQYXRoOnMsYWN0aXZlOlB9KSxXKCl9KSksTygoKCk9PntDKHtpbmRleDplLmluZGV4LGluZGV4UGF0aDpzLGFjdGl2ZTpQfSksaC5yZW1vdmVTdWJNZW51KHtpbmRleDplLmluZGV4LGluZGV4UGF0aDpzLGFjdGl2ZTpQfSl9KSkse2RhdGE6YSxwcm9wczplLG1vZGU6QixhY3RpdmU6UCxpc01lbnVQb3B1cDpjLG9wZW5lZDpELHBhZGRpbmdTdHlsZTpyLHRpdGxlU3R5bGU6TCxiYWNrZ3JvdW5kQ29sb3I6Vixyb290UHJvcHM6bSxtZW51VHJhbnNpdGlvbk5hbWU6TixzdWJtZW51VGl0bGVJY29uOkUsYXBwZW5kVG9Cb2R5OlQsaGFuZGxlQ2xpY2s6KCk9Pntjb25zdCB0PWUuZGlzYWJsZWQ7XCJob3ZlclwiPT09bS5tZW51VHJpZ2dlciYmXCJob3Jpem9udGFsXCI9PT1tLm1vZGV8fG0uY29sbGFwc2UmJlwidmVydGljYWxcIj09PW0ubW9kZXx8dHx8eShcInN1Ym1lbnU6c3VibWVudS1jbGlja1wiLHtpbmRleDplLmluZGV4LGluZGV4UGF0aDpzfSl9LGhhbmRsZU1vdXNlZW50ZXI6KHQsbD1lLnNob3dUaW1lb3V0KT0+e2lmKCEoXCJBY3RpdmVYT2JqZWN0XCJpbiB3aW5kb3cpJiZcImZvY3VzXCI9PT10LnR5cGUmJiF0LnJlbGF0ZWRUYXJnZXQpcmV0dXJuO2NvbnN0IG49ZS5kaXNhYmxlZDtcImNsaWNrXCI9PT1tLm1lbnVUcmlnZ2VyJiZcImhvcml6b250YWxcIj09PW0ubW9kZXx8IW0uY29sbGFwc2UmJlwidmVydGljYWxcIj09PW0ubW9kZXx8bnx8KHouZW1pdChcInN1Ym1lbnU6bW91c2UtZW50ZXItY2hpbGRcIiksY2xlYXJUaW1lb3V0KGEudGltZW91dCksYS50aW1lb3V0PXNldFRpbWVvdXQoKCgpPT57aC5vcGVuTWVudShlLmluZGV4LHMpfSksbCksVC52YWx1ZSYmdS52YWx1ZS52bm9kZS5lbC5kaXNwYXRjaEV2ZW50KG5ldyBNb3VzZUV2ZW50KFwibW91c2VlbnRlclwiKSkpfSxoYW5kbGVNb3VzZWxlYXZlOkgsaGFuZGxlVGl0bGVNb3VzZWVudGVyOigpPT57dmFyIGU7aWYoXCJob3Jpem9udGFsXCI9PT1CLnZhbHVlJiYhbS5iYWNrZ3JvdW5kQ29sb3IpcmV0dXJuO2NvbnN0IHQ9KG51bGw9PT0oZT1vLnZhbHVlKXx8dm9pZCAwPT09ZT92b2lkIDA6ZS50cmlnZ2VyUmVmKXx8bi52YWx1ZTt0JiYodC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3I9cC52YWx1ZSl9LGhhbmRsZVRpdGxlTW91c2VsZWF2ZTooKT0+e3ZhciBlO2lmKFwiaG9yaXpvbnRhbFwiPT09Qi52YWx1ZSYmIW0uYmFja2dyb3VuZENvbG9yKXJldHVybjtjb25zdCB0PShudWxsPT09KGU9by52YWx1ZSl8fHZvaWQgMD09PWU/dm9pZCAwOmUudHJpZ2dlclJlZil8fG4udmFsdWU7dCYmKHQuc3R5bGUuYmFja2dyb3VuZENvbG9yPW0uYmFja2dyb3VuZENvbG9yfHxcIlwiKX0sYWRkSXRlbTplPT57YS5pdGVtc1tlLmluZGV4XT1lfSxyZW1vdmVJdGVtOmU9PntkZWxldGUgYS5pdGVtc1tlLmluZGV4XX0sYWRkU3ViTWVudTokLHJlbW92ZVN1Yk1lbnU6Uixwb3BwZXJWbm9kZTpvLHZlcnRpY2FsVGl0bGVSZWY6bn19fSk7QnUucmVuZGVyPWZ1bmN0aW9uKGUsdCxsLGMscCx2KXtjb25zdCBtPVAoXCJlbC1wb3BwZXJcIiksZj1QKFwiZWwtY29sbGFwc2UtdHJhbnNpdGlvblwiKTtyZXR1cm4gYSgpLG4oXCJsaVwiLHtjbGFzczpbXCJlbC1zdWJtZW51XCIsZS5hY3RpdmUmJlwiaXMtYWN0aXZlXCIsZS5vcGVuZWQmJlwiaXMtb3BlbmVkXCIsZS5kaXNhYmxlZCYmXCJpcy1kaXNhYmxlZFwiXSxyb2xlOlwibWVudWl0ZW1cIixcImFyaWEtaGFzcG9wdXBcIjpcInRydWVcIixcImFyaWEtZXhwYW5kZWRcIjpcIm9wZW5lZFwiLG9uTW91c2VlbnRlcjp0WzExXXx8KHRbMTFdPSguLi50KT0+ZS5oYW5kbGVNb3VzZWVudGVyKC4uLnQpKSxvbk1vdXNlbGVhdmU6dFsxMl18fCh0WzEyXT0oKT0+ZS5oYW5kbGVNb3VzZWxlYXZlKCExKSksb25Gb2N1czp0WzEzXXx8KHRbMTNdPSguLi50KT0+ZS5oYW5kbGVNb3VzZWVudGVyKC4uLnQpKX0sW2UuaXNNZW51UG9wdXA/KGEoKSxuKG0se2tleTowLHJlZjpcInBvcHBlclZub2RlXCIsdmlzaWJsZTplLm9wZW5lZCxcIm9uVXBkYXRlOnZpc2libGVcIjp0WzddfHwodFs3XT10PT5lLm9wZW5lZD10KSxcIm1hbnVhbC1tb2RlXCI6ITAsZWZmZWN0OlwibGlnaHRcIixwdXJlOiEwLG9mZnNldDo2LFwic2hvdy1hcnJvd1wiOiExLFwicG9wcGVyLWNsYXNzXCI6ZS5wcm9wcy5wb3BwZXJDbGFzcyxwbGFjZW1lbnQ6ZS5kYXRhLmN1cnJlbnRQbGFjZW1lbnQsXCJhcHBlbmQtdG8tYm9keVwiOmUuYXBwZW5kVG9Cb2R5fSx7ZGVmYXVsdDppKCgoKT0+W3Mobyx7bmFtZTplLm1lbnVUcmFuc2l0aW9uTmFtZX0se2RlZmF1bHQ6aSgoKCk9PltyKHMoXCJkaXZcIix7cmVmOlwibWVudVwiLGNsYXNzOltcImVsLW1lbnUtLVwiK2UubW9kZSxlLnByb3BzLnBvcHBlckNsYXNzXSxvbk1vdXNlZW50ZXI6dFsxXXx8KHRbMV09dD0+ZS5oYW5kbGVNb3VzZWVudGVyKHQsMTAwKSksb25Nb3VzZWxlYXZlOnRbMl18fCh0WzJdPSgpPT5lLmhhbmRsZU1vdXNlbGVhdmUoITApKSxvbkZvY3VzOnRbM118fCh0WzNdPXQ9PmUuaGFuZGxlTW91c2VlbnRlcih0LDEwMCkpfSxbcyhcInVsXCIse3JvbGU6XCJtZW51XCIsY2xhc3M6W1wiZWwtbWVudSBlbC1tZW51LS1wb3B1cFwiLFwiZWwtbWVudS0tcG9wdXAtXCIrZS5kYXRhLmN1cnJlbnRQbGFjZW1lbnRdLHN0eWxlOntiYWNrZ3JvdW5kQ29sb3I6ZS5yb290UHJvcHMuYmFja2dyb3VuZENvbG9yfHxcIlwifX0sW2QoZS4kc2xvdHMsXCJkZWZhdWx0XCIpXSw2KV0sMzQpLFtbaCxlLm9wZW5lZF1dKV0pKSxfOjN9LDgsW1wibmFtZVwiXSldKSksdHJpZ2dlcjppKCgoKT0+W3MoXCJkaXZcIix7Y2xhc3M6XCJlbC1zdWJtZW51X190aXRsZVwiLHN0eWxlOltlLnBhZGRpbmdTdHlsZSxlLnRpdGxlU3R5bGUse2JhY2tncm91bmRDb2xvcjplLmJhY2tncm91bmRDb2xvcn1dLG9uQ2xpY2s6dFs0XXx8KHRbNF09KC4uLnQpPT5lLmhhbmRsZUNsaWNrKC4uLnQpKSxvbk1vdXNlZW50ZXI6dFs1XXx8KHRbNV09KC4uLnQpPT5lLmhhbmRsZVRpdGxlTW91c2VlbnRlciguLi50KSksb25Nb3VzZWxlYXZlOnRbNl18fCh0WzZdPSguLi50KT0+ZS5oYW5kbGVUaXRsZU1vdXNlbGVhdmUoLi4udCkpfSxbZChlLiRzbG90cyxcInRpdGxlXCIpLHMoXCJpXCIse2NsYXNzOltcImVsLXN1Ym1lbnVfX2ljb24tYXJyb3dcIixlLnN1Ym1lbnVUaXRsZUljb25dfSxudWxsLDIpXSwzNildKSksXzoxfSw4LFtcInZpc2libGVcIixcInBvcHBlci1jbGFzc1wiLFwicGxhY2VtZW50XCIsXCJhcHBlbmQtdG8tYm9keVwiXSkpOnUoXCJ2LWlmXCIsITApLGUuaXNNZW51UG9wdXA/dShcInYtaWZcIiwhMCk6KGEoKSxuKFwiZGl2XCIse2tleToxLHJlZjpcInZlcnRpY2FsVGl0bGVSZWZcIixjbGFzczpcImVsLXN1Ym1lbnVfX3RpdGxlXCIsc3R5bGU6W2UucGFkZGluZ1N0eWxlLGUudGl0bGVTdHlsZSx7YmFja2dyb3VuZENvbG9yOmUuYmFja2dyb3VuZENvbG9yfV0sb25DbGljazp0WzhdfHwodFs4XT0oLi4udCk9PmUuaGFuZGxlQ2xpY2soLi4udCkpLG9uTW91c2VlbnRlcjp0WzldfHwodFs5XT0oLi4udCk9PmUuaGFuZGxlVGl0bGVNb3VzZWVudGVyKC4uLnQpKSxvbk1vdXNlbGVhdmU6dFsxMF18fCh0WzEwXT0oLi4udCk9PmUuaGFuZGxlVGl0bGVNb3VzZWxlYXZlKC4uLnQpKX0sW2QoZS4kc2xvdHMsXCJ0aXRsZVwiKSxzKFwiaVwiLHtjbGFzczpbXCJlbC1zdWJtZW51X19pY29uLWFycm93XCIsZS5zdWJtZW51VGl0bGVJY29uXX0sbnVsbCwyKV0sMzYpKSxlLmlzTWVudVBvcHVwP3UoXCJ2LWlmXCIsITApOihhKCksbihmLHtrZXk6Mn0se2RlZmF1bHQ6aSgoKCk9PltyKHMoXCJ1bFwiLHtyb2xlOlwibWVudVwiLGNsYXNzOlwiZWwtbWVudSBlbC1tZW51LS1pbmxpbmVcIixzdHlsZTp7YmFja2dyb3VuZENvbG9yOmUucm9vdFByb3BzLmJhY2tncm91bmRDb2xvcnx8XCJcIn19LFtkKGUuJHNsb3RzLFwiZGVmYXVsdFwiKV0sNCksW1toLGUub3BlbmVkXV0pXSkpLF86M30pKV0sMzQpfSxCdS5fX2ZpbGU9XCJwYWNrYWdlcy9tZW51L3NyYy9zdWJtZW51LnZ1ZVwiLEJ1Lmluc3RhbGw9ZT0+e2UuY29tcG9uZW50KEJ1Lm5hbWUsQnUpfTt2YXIgTHU9ZSh7bmFtZTpcIkVsU3dpdGNoXCIscHJvcHM6e21vZGVsVmFsdWU6e3R5cGU6W0Jvb2xlYW4sU3RyaW5nLE51bWJlcl0sZGVmYXVsdDohMX0sdmFsdWU6e3R5cGU6W0Jvb2xlYW4sU3RyaW5nLE51bWJlcl0sZGVmYXVsdDohMX0sZGlzYWJsZWQ6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiExfSx3aWR0aDp7dHlwZTpOdW1iZXIsZGVmYXVsdDo0MH0sYWN0aXZlSWNvbkNsYXNzOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiXCJ9LGluYWN0aXZlSWNvbkNsYXNzOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiXCJ9LGFjdGl2ZVRleHQ6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJcIn0saW5hY3RpdmVUZXh0Ont0eXBlOlN0cmluZyxkZWZhdWx0OlwiXCJ9LGFjdGl2ZUNvbG9yOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiXCJ9LGluYWN0aXZlQ29sb3I6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJcIn0sYWN0aXZlVmFsdWU6e3R5cGU6W0Jvb2xlYW4sU3RyaW5nLE51bWJlcl0sZGVmYXVsdDohMH0saW5hY3RpdmVWYWx1ZTp7dHlwZTpbQm9vbGVhbixTdHJpbmcsTnVtYmVyXSxkZWZhdWx0OiExfSxuYW1lOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiXCJ9LHZhbGlkYXRlRXZlbnQ6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiEwfSxpZDp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIlwifSxsb2FkaW5nOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMX19LGVtaXRzOltcInVwZGF0ZTptb2RlbFZhbHVlXCIsXCJjaGFuZ2VcIixcImlucHV0XCJdLHNldHVwKGUsYSl7Y29uc3Qgbj13KFwiZWxGb3JtXCIse30pLG89dyhcImVsRm9ybUl0ZW1cIix7fSksaT10KGUud2lkdGgpLHI9dCghMSE9PWUubW9kZWxWYWx1ZSkscz10KG51bGwpLHU9dChudWxsKTt5KCgoKT0+ZS5tb2RlbFZhbHVlKSwoKCk9PntyLnZhbHVlPSEwfSkpLHkoKCgpPT5lLnZhbHVlKSwoKCk9PntyLnZhbHVlPSExfSkpO2NvbnN0IGQ9bCgoKCk9PnIudmFsdWU/ZS5tb2RlbFZhbHVlOmUudmFsdWUpKSxjPWwoKCgpPT5kLnZhbHVlPT09ZS5hY3RpdmVWYWx1ZSkpO35bZS5hY3RpdmVWYWx1ZSxlLmluYWN0aXZlVmFsdWVdLmluZGV4T2YoZC52YWx1ZSl8fChhLmVtaXQoXCJ1cGRhdGU6bW9kZWxWYWx1ZVwiLGUuaW5hY3RpdmVWYWx1ZSksYS5lbWl0KFwiY2hhbmdlXCIsZS5pbmFjdGl2ZVZhbHVlKSxhLmVtaXQoXCJpbnB1dFwiLGUuaW5hY3RpdmVWYWx1ZSkpLHkoYywoKCk9Pnt2YXIgdDtzLnZhbHVlLmNoZWNrZWQ9Yy52YWx1ZSwoZS5hY3RpdmVDb2xvcnx8ZS5pbmFjdGl2ZUNvbG9yKSYmdigpLGUudmFsaWRhdGVFdmVudCYmKG51bGw9PT0odD1vLmZvcm1JdGVtTWl0dCl8fHZvaWQgMD09PXR8fHQuZW1pdChcImVsLmZvcm0uY2hhbmdlXCIsW2QudmFsdWVdKSl9KSk7Y29uc3QgcD1sKCgoKT0+ZS5kaXNhYmxlZHx8ZS5sb2FkaW5nfHwobnx8e30pLmRpc2FibGVkKSksaD0oKT0+e2NvbnN0IHQ9Yy52YWx1ZT9lLmluYWN0aXZlVmFsdWU6ZS5hY3RpdmVWYWx1ZTthLmVtaXQoXCJ1cGRhdGU6bW9kZWxWYWx1ZVwiLHQpLGEuZW1pdChcImNoYW5nZVwiLHQpLGEuZW1pdChcImlucHV0XCIsdCksaygoKCk9PntzLnZhbHVlLmNoZWNrZWQ9Yy52YWx1ZX0pKX0sdj0oKT0+e2NvbnN0IHQ9Yy52YWx1ZT9lLmFjdGl2ZUNvbG9yOmUuaW5hY3RpdmVDb2xvcixsPXUudmFsdWU7bC5zdHlsZS5ib3JkZXJDb2xvcj10LGwuc3R5bGUuYmFja2dyb3VuZENvbG9yPXQsbC5jaGlsZHJlblswXS5zdHlsZS5jb2xvcj10fTtyZXR1cm4gXygoKCk9PntpLnZhbHVlPWkudmFsdWV8fDQwLChlLmFjdGl2ZVZhbHVlfHxlLmluYWN0aXZlVmFsdWUpJiZ2KCkscy52YWx1ZS5jaGVja2VkPWMudmFsdWV9KSkse2lucHV0OnMsY29yZTp1LGNvcmVXaWR0aDppLHN3aXRjaERpc2FibGVkOnAsY2hlY2tlZDpjLGhhbmRsZUNoYW5nZTpoLHN3aXRjaFZhbHVlOigpPT57IXAudmFsdWUmJmgoKX19fX0pO2NvbnN0IHp1PXtjbGFzczpcImVsLXN3aXRjaF9fYWN0aW9uXCJ9LEZ1PXtrZXk6MCxjbGFzczpcImVsLWljb24tbG9hZGluZ1wifTtMdS5yZW5kZXI9ZnVuY3Rpb24oZSx0LGwsbyxpLHIpe3JldHVybiBhKCksbihcImRpdlwiLHtjbGFzczpbXCJlbC1zd2l0Y2hcIix7XCJpcy1kaXNhYmxlZFwiOmUuc3dpdGNoRGlzYWJsZWQsXCJpcy1jaGVja2VkXCI6ZS5jaGVja2VkfV0scm9sZTpcInN3aXRjaFwiLFwiYXJpYS1jaGVja2VkXCI6ZS5jaGVja2VkLFwiYXJpYS1kaXNhYmxlZFwiOmUuc3dpdGNoRGlzYWJsZWQsb25DbGljazp0WzNdfHwodFszXT1UKCgoLi4udCk9PmUuc3dpdGNoVmFsdWUoLi4udCkpLFtcInByZXZlbnRcIl0pKX0sW3MoXCJpbnB1dFwiLHtpZDplLmlkLHJlZjpcImlucHV0XCIsY2xhc3M6XCJlbC1zd2l0Y2hfX2lucHV0XCIsdHlwZTpcImNoZWNrYm94XCIsbmFtZTplLm5hbWUsXCJ0cnVlLXZhbHVlXCI6ZS5hY3RpdmVWYWx1ZSxcImZhbHNlLXZhbHVlXCI6ZS5pbmFjdGl2ZVZhbHVlLGRpc2FibGVkOmUuc3dpdGNoRGlzYWJsZWQsb25DaGFuZ2U6dFsxXXx8KHRbMV09KC4uLnQpPT5lLmhhbmRsZUNoYW5nZSguLi50KSksb25LZXlkb3duOnRbMl18fCh0WzJdPSQoKCguLi50KT0+ZS5zd2l0Y2hWYWx1ZSguLi50KSksW1wiZW50ZXJcIl0pKX0sbnVsbCw0MCxbXCJpZFwiLFwibmFtZVwiLFwidHJ1ZS12YWx1ZVwiLFwiZmFsc2UtdmFsdWVcIixcImRpc2FibGVkXCJdKSxlLmluYWN0aXZlSWNvbkNsYXNzfHxlLmluYWN0aXZlVGV4dD8oYSgpLG4oXCJzcGFuXCIse2tleTowLGNsYXNzOltcImVsLXN3aXRjaF9fbGFiZWxcIixcImVsLXN3aXRjaF9fbGFiZWwtLWxlZnRcIixlLmNoZWNrZWQ/XCJcIjpcImlzLWFjdGl2ZVwiXX0sW2UuaW5hY3RpdmVJY29uQ2xhc3M/KGEoKSxuKFwiaVwiLHtrZXk6MCxjbGFzczpbZS5pbmFjdGl2ZUljb25DbGFzc119LG51bGwsMikpOnUoXCJ2LWlmXCIsITApLCFlLmluYWN0aXZlSWNvbkNsYXNzJiZlLmluYWN0aXZlVGV4dD8oYSgpLG4oXCJzcGFuXCIse2tleToxLFwiYXJpYS1oaWRkZW5cIjplLmNoZWNrZWR9LHAoZS5pbmFjdGl2ZVRleHQpLDksW1wiYXJpYS1oaWRkZW5cIl0pKTp1KFwidi1pZlwiLCEwKV0sMikpOnUoXCJ2LWlmXCIsITApLHMoXCJzcGFuXCIse3JlZjpcImNvcmVcIixjbGFzczpcImVsLXN3aXRjaF9fY29yZVwiLHN0eWxlOnt3aWR0aDplLmNvcmVXaWR0aCtcInB4XCJ9fSxbcyhcImRpdlwiLHp1LFtlLmxvYWRpbmc/KGEoKSxuKFwiaVwiLEZ1KSk6dShcInYtaWZcIiwhMCldKV0sNCksZS5hY3RpdmVJY29uQ2xhc3N8fGUuYWN0aXZlVGV4dD8oYSgpLG4oXCJzcGFuXCIse2tleToxLGNsYXNzOltcImVsLXN3aXRjaF9fbGFiZWxcIixcImVsLXN3aXRjaF9fbGFiZWwtLXJpZ2h0XCIsZS5jaGVja2VkP1wiaXMtYWN0aXZlXCI6XCJcIl19LFtlLmFjdGl2ZUljb25DbGFzcz8oYSgpLG4oXCJpXCIse2tleTowLGNsYXNzOltlLmFjdGl2ZUljb25DbGFzc119LG51bGwsMikpOnUoXCJ2LWlmXCIsITApLCFlLmFjdGl2ZUljb25DbGFzcyYmZS5hY3RpdmVUZXh0PyhhKCksbihcInNwYW5cIix7a2V5OjEsXCJhcmlhLWhpZGRlblwiOiFlLmNoZWNrZWR9LHAoZS5hY3RpdmVUZXh0KSw5LFtcImFyaWEtaGlkZGVuXCJdKSk6dShcInYtaWZcIiwhMCldLDIpKTp1KFwidi1pZlwiLCEwKV0sMTAsW1wiYXJpYS1jaGVja2VkXCIsXCJhcmlhLWRpc2FibGVkXCJdKX0sTHUuX19maWxlPVwicGFja2FnZXMvc3dpdGNoL3NyYy9pbmRleC52dWVcIixMdS5pbnN0YWxsPWU9PntlLmNvbXBvbmVudChMdS5uYW1lLEx1KX07dmFyICR1PWUoe25hbWU6XCJFbFRhYlBhbmVcIixwcm9wczp7bGFiZWw6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJcIn0sbmFtZTp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIlwifSxjbG9zYWJsZTpCb29sZWFuLGRpc2FibGVkOkJvb2xlYW4sbGF6eTpCb29sZWFufSxzZXR1cChlKXtjb25zdCBhPXQobnVsbCksbj10KCExKSxvPXcoXCJyb290VGFic1wiKSxpPXcoXCJ1cGRhdGVQYW5lU3RhdGVcIik7aWYoIW98fCFpKXRocm93IG5ldyBFcnJvcihcIkVsVGFiUGFuZSBtdXN0IHVzZSB3aXRoIEVsVGFic1wiKTtjb25zdCByPWwoKCgpPT5lLmNsb3NhYmxlfHxvLnByb3BzLmNsb3NhYmxlKSkscz1sKCgoKT0+e2NvbnN0IHQ9by5jdXJyZW50TmFtZS52YWx1ZT09PShlLm5hbWV8fGEudmFsdWUpO3JldHVybiB0JiYobi52YWx1ZT0hMCksdH0pKSx1PWwoKCgpPT5lLm5hbWV8fGEudmFsdWUpKSxkPWwoKCgpPT4hZS5sYXp5fHxuLnZhbHVlfHxzLnZhbHVlKSksYz12KCk7cmV0dXJuIGkoe3VpZDpjLnVpZCxpbnN0YW5jZTpjLHByb3BzOmUscGFuZU5hbWU6dSxhY3RpdmU6cyxpbmRleDphLGlzQ2xvc2FibGU6cn0pLHtpbmRleDphLGxvYWRlZDpuLGlzQ2xvc2FibGU6cixhY3RpdmU6cyxwYW5lTmFtZTp1LHNob3VsZEJlUmVuZGVyOmR9fX0pOyR1LnJlbmRlcj1mdW5jdGlvbihlLHQsbCxvLGkscyl7cmV0dXJuIGUuc2hvdWxkQmVSZW5kZXI/cigoYSgpLG4oXCJkaXZcIix7a2V5OjAsaWQ6XCJwYW5lLVwiK2UucGFuZU5hbWUsY2xhc3M6XCJlbC10YWItcGFuZVwiLHJvbGU6XCJ0YWJwYW5lbFwiLFwiYXJpYS1oaWRkZW5cIjohZS5hY3RpdmUsXCJhcmlhLWxhYmVsbGVkYnlcIjpcInRhYi1cIitlLnBhbmVOYW1lfSxbZChlLiRzbG90cyxcImRlZmF1bHRcIildLDgsW1wiaWRcIixcImFyaWEtaGlkZGVuXCIsXCJhcmlhLWxhYmVsbGVkYnlcIl0pKSxbW2gsZS5hY3RpdmVdXSk6dShcInYtaWZcIiwhMCl9LCR1Ll9fZmlsZT1cInBhY2thZ2VzL3RhYnMvc3JjL3RhYi1wYW5lLnZ1ZVwiLCR1Lmluc3RhbGw9ZT0+e2UuY29tcG9uZW50KCR1Lm5hbWUsJHUpfTtjb25zdCBSdT1mdW5jdGlvbihlKXtsZXQgdD1lLnRhcmdldDtmb3IoO3QmJlwiSFRNTFwiIT09dC50YWdOYW1lLnRvVXBwZXJDYXNlKCk7KXtpZihcIlREXCI9PT10LnRhZ05hbWUudG9VcHBlckNhc2UoKSlyZXR1cm4gdDt0PXQucGFyZW50Tm9kZX1yZXR1cm4gbnVsbH0sSHU9ZnVuY3Rpb24oZSl7cmV0dXJuIG51bGwhPT1lJiZcIm9iamVjdFwiPT10eXBlb2YgZX0sV3U9ZnVuY3Rpb24oZSx0LGwsYSxuKXtpZighdCYmIWEmJighbnx8QXJyYXkuaXNBcnJheShuKSYmIW4ubGVuZ3RoKSlyZXR1cm4gZTtsPVwic3RyaW5nXCI9PXR5cGVvZiBsP1wiZGVzY2VuZGluZ1wiPT09bD8tMToxOmwmJmw8MD8tMToxO2NvbnN0IG89YT9udWxsOmZ1bmN0aW9uKGwsYSl7cmV0dXJuIG4/KEFycmF5LmlzQXJyYXkobil8fChuPVtuXSksbi5tYXAoKGZ1bmN0aW9uKHQpe3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiB0P0ZlKGwsdCk6dChsLGEsZSl9KSkpOihcIiRrZXlcIiE9PXQmJkh1KGwpJiZcIiR2YWx1ZVwiaW4gbCYmKGw9bC4kdmFsdWUpLFtIdShsKT9GZShsLHQpOmxdKX07cmV0dXJuIGUubWFwKChmdW5jdGlvbihlLHQpe3JldHVybnt2YWx1ZTplLGluZGV4OnQsa2V5Om8/byhlLHQpOm51bGx9fSkpLnNvcnQoKGZ1bmN0aW9uKGUsdCl7bGV0IG49ZnVuY3Rpb24oZSx0KXtpZihhKXJldHVybiBhKGUudmFsdWUsdC52YWx1ZSk7Zm9yKGxldCBsPTAsYT1lLmtleS5sZW5ndGg7bDxhO2wrKyl7aWYoZS5rZXlbbF08dC5rZXlbbF0pcmV0dXJuLTE7aWYoZS5rZXlbbF0+dC5rZXlbbF0pcmV0dXJuIDF9cmV0dXJuIDB9KGUsdCk7cmV0dXJuIG58fChuPWUuaW5kZXgtdC5pbmRleCksbipsfSkpLm1hcCgoZT0+ZS52YWx1ZSkpfSxqdT1mdW5jdGlvbihlLHQpe2xldCBsPW51bGw7cmV0dXJuIGUuY29sdW1ucy5mb3JFYWNoKChmdW5jdGlvbihlKXtlLmlkPT09dCYmKGw9ZSl9KSksbH0sS3U9ZnVuY3Rpb24oZSx0KXtjb25zdCBsPSh0LmNsYXNzTmFtZXx8XCJcIikubWF0Y2goL2VsLXRhYmxlX1teXFxzXSsvZ20pO3JldHVybiBsP2p1KGUsbFswXSk6bnVsbH0sWXU9KGUsdCk9PntpZighZSl0aHJvdyBuZXcgRXJyb3IoXCJyb3cgaXMgcmVxdWlyZWQgd2hlbiBnZXQgcm93IGlkZW50aXR5XCIpO2lmKFwic3RyaW5nXCI9PXR5cGVvZiB0KXtpZih0LmluZGV4T2YoXCIuXCIpPDApcmV0dXJuIGVbdF07Y29uc3QgbD10LnNwbGl0KFwiLlwiKTtsZXQgYT1lO2ZvcihsZXQgZT0wO2U8bC5sZW5ndGg7ZSsrKWE9YVtsW2VdXTtyZXR1cm4gYX1pZihcImZ1bmN0aW9uXCI9PXR5cGVvZiB0KXJldHVybiB0LmNhbGwobnVsbCxlKX0scXU9ZnVuY3Rpb24oZSx0KXtjb25zdCBsPXt9O3JldHVybihlfHxbXSkuZm9yRWFjaCgoKGUsYSk9PntsW1l1KGUsdCldPXtyb3c6ZSxpbmRleDphfX0pKSxsfTtmdW5jdGlvbiBVdShlLHQpe3JldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSx0KX1mdW5jdGlvbiBHdShlKXtyZXR1cm4gdm9pZCAwIT09ZSYmKGU9cGFyc2VJbnQoZSwxMCksaXNOYU4oZSkmJihlPW51bGwpKSxlfWZ1bmN0aW9uIFh1KGUpe3JldHVyblwibnVtYmVyXCI9PXR5cGVvZiBlP2U6XCJzdHJpbmdcIj09dHlwZW9mIGU/L15cXGQrKD86cHgpPyQvLnRlc3QoZSk/cGFyc2VJbnQoZSwxMCk6ZTpudWxsfWZ1bmN0aW9uIFF1KGUsdCxsKXtsZXQgYT0hMTtjb25zdCBuPWUuaW5kZXhPZih0KSxvPS0xIT09bixpPSgpPT57ZS5wdXNoKHQpLGE9ITB9LHI9KCk9PntlLnNwbGljZShuLDEpLGE9ITB9O3JldHVyblwiYm9vbGVhblwiPT10eXBlb2YgbD9sJiYhbz9pKCk6IWwmJm8mJnIoKTpvP3IoKTppKCksYX1mdW5jdGlvbiBadShlLHQsbD1cImNoaWxkcmVuXCIsYT1cImhhc0NoaWxkcmVuXCIpe2NvbnN0IG49ZT0+IShBcnJheS5pc0FycmF5KGUpJiZlLmxlbmd0aCk7ZnVuY3Rpb24gbyhlLGkscil7dChlLGksciksaS5mb3JFYWNoKChlPT57aWYoZVthXSlyZXR1cm4gdm9pZCB0KGUsbnVsbCxyKzEpO2NvbnN0IGk9ZVtsXTtuKGkpfHxvKGUsaSxyKzEpfSkpfWUuZm9yRWFjaCgoZT0+e2lmKGVbYV0pcmV0dXJuIHZvaWQgdChlLG51bGwsMCk7Y29uc3QgaT1lW2xdO24oaSl8fG8oZSxpLDApfSkpfWNvbnN0IEp1PWU9Pntjb25zdCB0PVtdO3JldHVybiBlLmZvckVhY2goKGU9PntlLmNoaWxkcmVuP3QucHVzaC5hcHBseSh0LEp1KGUuY2hpbGRyZW4pKTp0LnB1c2goZSl9KSksdH07ZnVuY3Rpb24gZWQoKXtjb25zdCBlPXYoKSxhPXQobnVsbCksbj10KFtdKSxvPXQoW10pLGk9dCghMSkscj10KFtdKSxzPXQoW10pLHU9dChbXSksZD10KFtdKSxjPXQoW10pLHA9dChbXSksaD10KFtdKSxtPXQoW10pLGY9dCgwKSxnPXQoMCksYj10KDApLGs9dCghMSksQz10KFtdKSx4PXQoITEpLHc9dCghMSksXz10KG51bGwpLFM9dCh7fSksRT10KG51bGwpLE09dChudWxsKSxUPXQobnVsbCksTj10KG51bGwpLEQ9dChudWxsKSxPPSgpPT57ZC52YWx1ZT1yLnZhbHVlLmZpbHRlcigoZT0+ITA9PT1lLmZpeGVkfHxcImxlZnRcIj09PWUuZml4ZWQpKSxjLnZhbHVlPXIudmFsdWUuZmlsdGVyKChlPT5cInJpZ2h0XCI9PT1lLmZpeGVkKSksZC52YWx1ZS5sZW5ndGg+MCYmci52YWx1ZVswXSYmXCJzZWxlY3Rpb25cIj09PXIudmFsdWVbMF0udHlwZSYmIXIudmFsdWVbMF0uZml4ZWQmJihyLnZhbHVlWzBdLmZpeGVkPSEwLGQudmFsdWUudW5zaGlmdChyLnZhbHVlWzBdKSk7Y29uc3QgZT1yLnZhbHVlLmZpbHRlcigoZT0+IWUuZml4ZWQpKTtzLnZhbHVlPVtdLmNvbmNhdChkLnZhbHVlKS5jb25jYXQoZSkuY29uY2F0KGMudmFsdWUpO2NvbnN0IHQ9SnUoZSksbD1KdShkLnZhbHVlKSxhPUp1KGMudmFsdWUpO2YudmFsdWU9dC5sZW5ndGgsZy52YWx1ZT1sLmxlbmd0aCxiLnZhbHVlPWEubGVuZ3RoLHUudmFsdWU9W10uY29uY2F0KGwpLmNvbmNhdCh0KS5jb25jYXQoYSksaS52YWx1ZT1kLnZhbHVlLmxlbmd0aD4wfHxjLnZhbHVlLmxlbmd0aD4wfSxQPShlLHQsbCk9PntNLnZhbHVlJiZNLnZhbHVlIT09ZSYmKE0udmFsdWUub3JkZXI9bnVsbCksTS52YWx1ZT1lLFQudmFsdWU9dCxOLnZhbHVlPWx9LFY9KCk9PntsZXQgZT1RKG8pO09iamVjdC5rZXlzKFMudmFsdWUpLmZvckVhY2goKHQ9Pntjb25zdCBsPVMudmFsdWVbdF07aWYoIWx8fDA9PT1sLmxlbmd0aClyZXR1cm47Y29uc3QgYT1qdSh7Y29sdW1uczp1LnZhbHVlfSx0KTthJiZhLmZpbHRlck1ldGhvZCYmKGU9ZS5maWx0ZXIoKGU9Pmwuc29tZSgodD0+YS5maWx0ZXJNZXRob2QuY2FsbChudWxsLHQsZSxhKSkpKSkpfSkpLEUudmFsdWU9ZX0sST0oKT0+e24udmFsdWU9KChlLHQpPT57Y29uc3QgbD10LnNvcnRpbmdDb2x1bW47cmV0dXJuIGwmJlwic3RyaW5nXCIhPXR5cGVvZiBsLnNvcnRhYmxlP1d1KGUsdC5zb3J0UHJvcCx0LnNvcnRPcmRlcixsLnNvcnRNZXRob2QsbC5zb3J0QnkpOmV9KShFLnZhbHVlLHtzb3J0aW5nQ29sdW1uOk0udmFsdWUsc29ydFByb3A6VC52YWx1ZSxzb3J0T3JkZXI6Ti52YWx1ZX0pfSx7c2V0RXhwYW5kUm93S2V5czpBLHRvZ2dsZVJvd0V4cGFuc2lvbjpCLHVwZGF0ZUV4cGFuZFJvd3M6TCxzdGF0ZXM6eixpc1Jvd0V4cGFuZGVkOkZ9PWZ1bmN0aW9uKGUpe2NvbnN0IGw9digpLGE9dCghMSksbj10KFtdKTtyZXR1cm57dXBkYXRlRXhwYW5kUm93czooKT0+e2NvbnN0IHQ9ZS5kYXRhLnZhbHVlfHxbXSxsPWUucm93S2V5LnZhbHVlO2lmKGEudmFsdWUpbi52YWx1ZT10LnNsaWNlKCk7ZWxzZSBpZihsKXtjb25zdCBlPXF1KG4udmFsdWUsbCk7bi52YWx1ZT10LnJlZHVjZSgoKHQsYSk9Pntjb25zdCBuPVl1KGEsbCk7cmV0dXJuIGVbbl0mJnQucHVzaChhKSx0fSksW10pfWVsc2Ugbi52YWx1ZT1bXX0sdG9nZ2xlUm93RXhwYW5zaW9uOihlLHQpPT57UXUobi52YWx1ZSxlLHQpJiYobC5lbWl0KFwiZXhwYW5kLWNoYW5nZVwiLGUsbi52YWx1ZS5zbGljZSgpKSxsLnN0b3JlLnNjaGVkdWxlTGF5b3V0KCkpfSxzZXRFeHBhbmRSb3dLZXlzOnQ9PntsLnN0b3JlLmFzc2VydFJvd0tleSgpO2NvbnN0IGE9ZS5kYXRhLnZhbHVlfHxbXSxvPWUucm93S2V5LnZhbHVlLGk9cXUoYSxvKTtuLnZhbHVlPXQucmVkdWNlKCgoZSx0KT0+e2NvbnN0IGw9aVt0XTtyZXR1cm4gbCYmZS5wdXNoKGwucm93KSxlfSksW10pfSxpc1Jvd0V4cGFuZGVkOnQ9Pntjb25zdCBsPWUucm93S2V5LnZhbHVlO3JldHVybiBsPyEhcXUobi52YWx1ZSxsKVtZdSh0LGwpXTotMSE9PW4udmFsdWUuaW5kZXhPZih0KX0sc3RhdGVzOntleHBhbmRSb3dzOm4sZGVmYXVsdEV4cGFuZEFsbDphfX19KHtkYXRhOm4scm93S2V5OmF9KSx7dXBkYXRlVHJlZUV4cGFuZEtleXM6JCx0b2dnbGVUcmVlRXhwYW5zaW9uOlIsbG9hZE9yVG9nZ2xlOkgsc3RhdGVzOld9PWZ1bmN0aW9uKGUpe2NvbnN0IGE9dChbXSksbj10KHt9KSxvPXQoMTYpLGk9dCghMSkscj10KHt9KSxzPXQoXCJoYXNDaGlsZHJlblwiKSx1PXQoXCJjaGlsZHJlblwiKSxkPXYoKSxjPWwoKCgpPT57aWYoIWUucm93S2V5LnZhbHVlKXJldHVybnt9O2NvbnN0IHQ9ZS5kYXRhLnZhbHVlfHxbXTtyZXR1cm4gaCh0KX0pKSxwPWwoKCgpPT57Y29uc3QgdD1lLnJvd0tleS52YWx1ZSxsPU9iamVjdC5rZXlzKHIudmFsdWUpLGE9e307cmV0dXJuIGwubGVuZ3RoPyhsLmZvckVhY2goKGU9PntpZihyLnZhbHVlW2VdLmxlbmd0aCl7Y29uc3QgbD17Y2hpbGRyZW46W119O3IudmFsdWVbZV0uZm9yRWFjaCgoZT0+e2NvbnN0IG49WXUoZSx0KTtsLmNoaWxkcmVuLnB1c2gobiksZVtzLnZhbHVlXSYmIWFbbl0mJihhW25dPXtjaGlsZHJlbjpbXX0pfSkpLGFbZV09bH19KSksYSk6YX0pKSxoPXQ9Pntjb25zdCBsPWUucm93S2V5LnZhbHVlLGE9e307cmV0dXJuIFp1KHQsKChlLHQsbik9Pntjb25zdCBvPVl1KGUsbCk7QXJyYXkuaXNBcnJheSh0KT9hW29dPXtjaGlsZHJlbjp0Lm1hcCgoZT0+WXUoZSxsKSkpLGxldmVsOm59OmkudmFsdWUmJihhW29dPXtjaGlsZHJlbjpbXSxsYXp5OiEwLGxldmVsOm59KX0pLHUudmFsdWUscy52YWx1ZSksYX0sbT0oKT0+e3ZhciBlLHQ7Y29uc3QgbD1jLnZhbHVlLG89cC52YWx1ZSxyPU9iamVjdC5rZXlzKGwpLHM9e307aWYoci5sZW5ndGgpe2NvbnN0IHQ9UShuKSx1PW51bGw9PT0oZT1kLnN0b3JlKXx8dm9pZCAwPT09ZT92b2lkIDA6ZS5zdGF0ZXMuZGVmYXVsdEV4cGFuZEFsbC52YWx1ZSxjPVtdLHA9KGUsdCk9Pntjb25zdCBsPXV8fGEudmFsdWUmJi0xIT09YS52YWx1ZS5pbmRleE9mKHQpO3JldHVybiEhKGUmJmUuZXhwYW5kZWR8fGwpfTtyLmZvckVhY2goKGU9Pntjb25zdCBhPXRbZV0sbj1PYmplY3QuYXNzaWduKHt9LGxbZV0pO2lmKG4uZXhwYW5kZWQ9cChhLGUpLG4ubGF6eSl7Y29uc3R7bG9hZGVkOnQ9ITEsbG9hZGluZzpsPSExfT1hfHx7fTtuLmxvYWRlZD0hIXQsbi5sb2FkaW5nPSEhbCxjLnB1c2goZSl9c1tlXT1ufSkpO2NvbnN0IGg9T2JqZWN0LmtleXMobyk7aS52YWx1ZSYmaC5sZW5ndGgmJmMubGVuZ3RoJiZoLmZvckVhY2goKGU9Pntjb25zdCBsPXRbZV0sYT1vW2VdLmNoaWxkcmVuO2lmKC0xIT09Yy5pbmRleE9mKGUpKXtpZigwIT09c1tlXS5jaGlsZHJlbi5sZW5ndGgpdGhyb3cgbmV3IEVycm9yKFwiW0VsVGFibGVdY2hpbGRyZW4gbXVzdCBiZSBhbiBlbXB0eSBhcnJheS5cIik7c1tlXS5jaGlsZHJlbj1hfWVsc2V7Y29uc3R7bG9hZGVkOnQ9ITEsbG9hZGluZzpuPSExfT1sfHx7fTtzW2VdPXtsYXp5OiEwLGxvYWRlZDohIXQsbG9hZGluZzohIW4sZXhwYW5kZWQ6cChsLGUpLGNoaWxkcmVuOmEsbGV2ZWw6XCJcIn19fSkpfW4udmFsdWU9cyxudWxsPT09KHQ9ZC5zdG9yZSl8fHZvaWQgMD09PXR8fHQudXBkYXRlVGFibGVTY3JvbGxZKCl9O3koKCgpPT5jLnZhbHVlKSxtKSx5KCgoKT0+cC52YWx1ZSksbSk7Y29uc3QgZj0odCxsKT0+e2Quc3RvcmUuYXNzZXJ0Um93S2V5KCk7Y29uc3QgYT1lLnJvd0tleS52YWx1ZSxvPVl1KHQsYSksaT1vJiZuLnZhbHVlW29dO2lmKG8mJmkmJlwiZXhwYW5kZWRcImluIGkpe2NvbnN0IGU9aS5leHBhbmRlZDtsPXZvaWQgMD09PWw/IWkuZXhwYW5kZWQ6bCxuLnZhbHVlW29dLmV4cGFuZGVkPWwsZSE9PWwmJmQuZW1pdChcImV4cGFuZC1jaGFuZ2VcIix0LGwpLGQuc3RvcmUudXBkYXRlVGFibGVTY3JvbGxZKCl9fSxnPShlLHQsbCk9Pntjb25zdHtsb2FkOmF9PWQucHJvcHM7YSYmIW4udmFsdWVbdF0ubG9hZGVkJiYobi52YWx1ZVt0XS5sb2FkaW5nPSEwLGEoZSxsLChsPT57aWYoIUFycmF5LmlzQXJyYXkobCkpdGhyb3cgbmV3IEVycm9yKFwiW0VsVGFibGVdIGRhdGEgbXVzdCBiZSBhbiBhcnJheVwiKTtuLnZhbHVlW3RdLmxvYWRpbmc9ITEsbi52YWx1ZVt0XS5sb2FkZWQ9ITAsbi52YWx1ZVt0XS5leHBhbmRlZD0hMCxsLmxlbmd0aCYmKHIudmFsdWVbdF09bCksZC5lbWl0KFwiZXhwYW5kLWNoYW5nZVwiLGUsITApfSkpKX07cmV0dXJue2xvYWREYXRhOmcsbG9hZE9yVG9nZ2xlOnQ9PntkLnN0b3JlLmFzc2VydFJvd0tleSgpO2NvbnN0IGw9ZS5yb3dLZXkudmFsdWUsYT1ZdSh0LGwpLG89bi52YWx1ZVthXTtpLnZhbHVlJiZvJiZcImxvYWRlZFwiaW4gbyYmIW8ubG9hZGVkP2codCxhLG8pOmYodCx2b2lkIDApfSx0b2dnbGVUcmVlRXhwYW5zaW9uOmYsdXBkYXRlVHJlZUV4cGFuZEtleXM6ZT0+e2EudmFsdWU9ZSxtKCl9LHVwZGF0ZVRyZWVEYXRhOm0sbm9ybWFsaXplOmgsc3RhdGVzOntleHBhbmRSb3dLZXlzOmEsdHJlZURhdGE6bixpbmRlbnQ6byxsYXp5OmksbGF6eVRyZWVOb2RlTWFwOnIsbGF6eUNvbHVtbklkZW50aWZpZXI6cyxjaGlsZHJlbkNvbHVtbk5hbWU6dX19fSh7ZGF0YTpuLHJvd0tleTphfSkse3VwZGF0ZUN1cnJlbnRSb3dEYXRhOmosdXBkYXRlQ3VycmVudFJvdzpLLHNldEN1cnJlbnRSb3dLZXk6WSxzdGF0ZXM6cX09ZnVuY3Rpb24oZSl7Y29uc3QgbD12KCksYT10KG51bGwpLG49dChudWxsKSxvPSgpPT57YS52YWx1ZT1udWxsfSxpPXQ9Pntjb25zdHtkYXRhOmw9W10scm93S2V5OmF9PWU7bGV0IG89bnVsbDthLnZhbHVlJiYobz1VZShRKGwpLChlPT5ZdShlLGEudmFsdWUpPT09dCkpKSxuLnZhbHVlPW99O3JldHVybntzZXRDdXJyZW50Um93S2V5OmU9PntsLnN0b3JlLmFzc2VydFJvd0tleSgpLGEudmFsdWU9ZSxpKGUpfSxyZXN0b3JlQ3VycmVudFJvd0tleTpvLHNldEN1cnJlbnRSb3dCeUtleTppLHVwZGF0ZUN1cnJlbnRSb3c6ZT0+e2NvbnN0IHQ9bi52YWx1ZTtpZihlJiZlIT09dClyZXR1cm4gbi52YWx1ZT1lLHZvaWQgbC5lbWl0KFwiY3VycmVudC1jaGFuZ2VcIixuLnZhbHVlLHQpOyFlJiZ0JiYobi52YWx1ZT1udWxsLGwuZW1pdChcImN1cnJlbnQtY2hhbmdlXCIsbnVsbCx0KSl9LHVwZGF0ZUN1cnJlbnRSb3dEYXRhOigpPT57Y29uc3QgdD1lLnJvd0tleS52YWx1ZSxyPWUuZGF0YS52YWx1ZXx8W10scz1uLnZhbHVlO2lmKC0xPT09ci5pbmRleE9mKHMpJiZzKXtpZih0KXtjb25zdCBlPVl1KHMsdCk7aShlKX1lbHNlIG4udmFsdWU9bnVsbDtudWxsPT09bi52YWx1ZSYmbC5lbWl0KFwiY3VycmVudC1jaGFuZ2VcIixudWxsLHMpfWVsc2UgYS52YWx1ZSYmKGkoYS52YWx1ZSksbygpKX0sc3RhdGVzOntfY3VycmVudFJvd0tleTphLGN1cnJlbnRSb3c6bn19fSh7ZGF0YTpuLHJvd0tleTphfSk7cmV0dXJue2Fzc2VydFJvd0tleTooKT0+e2lmKCFhLnZhbHVlKXRocm93IG5ldyBFcnJvcihcIltFbFRhYmxlXSBwcm9wIHJvdy1rZXkgaXMgcmVxdWlyZWRcIil9LHVwZGF0ZUNvbHVtbnM6TyxzY2hlZHVsZUxheW91dDoodCxsPSExKT0+e3QmJk8oKSxsP2Uuc3RhdGUuZG9MYXlvdXQoKTplLnN0YXRlLmRlYm91bmNlZFVwZGF0ZUxheW91dCgpfSxpc1NlbGVjdGVkOmU9PkMudmFsdWUuaW5kZXhPZihlKT4tMSxjbGVhclNlbGVjdGlvbjooKT0+e2sudmFsdWU9ITE7Qy52YWx1ZS5sZW5ndGgmJihDLnZhbHVlPVtdLGUuZW1pdChcInNlbGVjdGlvbi1jaGFuZ2VcIixbXSkpfSxjbGVhblNlbGVjdGlvbjooKT0+e2xldCB0O2lmKGEudmFsdWUpe3Q9W107Y29uc3QgZT1xdShDLnZhbHVlLGEudmFsdWUpLGw9cXUobi52YWx1ZSxhLnZhbHVlKTtmb3IoY29uc3QgYSBpbiBlKWUuaGFzT3duUHJvcGVydHkoYSkmJiFsW2FdJiZ0LnB1c2goZVthXS5yb3cpfWVsc2UgdD1DLnZhbHVlLmZpbHRlcigoZT0+LTE9PT1uLnZhbHVlLmluZGV4T2YoZSkpKTtpZih0Lmxlbmd0aCl7Y29uc3QgbD1DLnZhbHVlLmZpbHRlcigoZT0+LTE9PT10LmluZGV4T2YoZSkpKTtDLnZhbHVlPWwsZS5lbWl0KFwic2VsZWN0aW9uLWNoYW5nZVwiLGwuc2xpY2UoKSl9fSx0b2dnbGVSb3dTZWxlY3Rpb246KHQsbCxhPSEwKT0+e2lmKFF1KEMudmFsdWUsdCxsKSl7Y29uc3QgbD0oQy52YWx1ZXx8W10pLnNsaWNlKCk7YSYmZS5lbWl0KFwic2VsZWN0XCIsbCx0KSxlLmVtaXQoXCJzZWxlY3Rpb24tY2hhbmdlXCIsbCl9fSxfdG9nZ2xlQWxsU2VsZWN0aW9uOigpPT57Y29uc3QgdD13LnZhbHVlPyFrLnZhbHVlOiEoay52YWx1ZXx8Qy52YWx1ZS5sZW5ndGgpO2sudmFsdWU9dDtsZXQgbD0hMTtuLnZhbHVlLmZvckVhY2goKChlLGEpPT57Xy52YWx1ZT9fLnZhbHVlLmNhbGwobnVsbCxlLGEpJiZRdShDLnZhbHVlLGUsdCkmJihsPSEwKTpRdShDLnZhbHVlLGUsdCkmJihsPSEwKX0pKSxsJiZlLmVtaXQoXCJzZWxlY3Rpb24tY2hhbmdlXCIsQy52YWx1ZT9DLnZhbHVlLnNsaWNlKCk6W10pLGUuZW1pdChcInNlbGVjdC1hbGxcIixDLnZhbHVlKX0sdXBkYXRlU2VsZWN0aW9uQnlSb3dLZXk6KCk9Pntjb25zdCBlPXF1KEMudmFsdWUsYS52YWx1ZSk7bi52YWx1ZS5mb3JFYWNoKCh0PT57Y29uc3QgbD1ZdSh0LGEudmFsdWUpLG49ZVtsXTtuJiYoQy52YWx1ZVtuLmluZGV4XT10KX0pKX0sdXBkYXRlQWxsU2VsZWN0ZWQ6KCk9Pnt2YXIgZTtpZigwPT09KG51bGw9PT0oZT1uLnZhbHVlKXx8dm9pZCAwPT09ZT92b2lkIDA6ZS5sZW5ndGgpKXJldHVybiB2b2lkKGsudmFsdWU9ITEpO2xldCB0O2EudmFsdWUmJih0PXF1KEMudmFsdWUsYS52YWx1ZSkpO2xldCBsPSEwLG89MDtmb3IobGV0IGU9MCxyPShuLnZhbHVlfHxbXSkubGVuZ3RoO2U8cjtlKyspe2NvbnN0IHI9bi52YWx1ZVtlXSxzPV8udmFsdWUmJl8udmFsdWUuY2FsbChudWxsLHIsZSk7aWYoaT1yLHQ/dFtZdShpLGEudmFsdWUpXTotMSE9PUMudmFsdWUuaW5kZXhPZihpKSlvKys7ZWxzZSBpZighXy52YWx1ZXx8cyl7bD0hMTticmVha319dmFyIGk7MD09PW8mJihsPSExKSxrLnZhbHVlPWx9LHVwZGF0ZUZpbHRlcnM6KGUsdCk9PntBcnJheS5pc0FycmF5KGUpfHwoZT1bZV0pO2NvbnN0IGw9e307cmV0dXJuIGUuZm9yRWFjaCgoZT0+e1MudmFsdWVbZS5pZF09dCxsW2UuY29sdW1uS2V5fHxlLmlkXT10fSkpLGx9LHVwZGF0ZUN1cnJlbnRSb3c6Syx1cGRhdGVTb3J0OlAsZXhlY0ZpbHRlcjpWLGV4ZWNTb3J0OkksZXhlY1F1ZXJ5OmU9PntlJiZlLmZpbHRlcnx8VigpLEkoKX0sY2xlYXJGaWx0ZXI6dD0+e2NvbnN0e3RhYmxlSGVhZGVyOmwsZml4ZWRUYWJsZUhlYWRlcjphLHJpZ2h0Rml4ZWRUYWJsZUhlYWRlcjpufT1lLnJlZnM7bGV0IG89e307bCYmKG89T2JqZWN0LmFzc2lnbihvLGwuZmlsdGVyUGFuZWxzKSksYSYmKG89T2JqZWN0LmFzc2lnbihvLGEuZmlsdGVyUGFuZWxzKSksbiYmKG89T2JqZWN0LmFzc2lnbihvLG4uZmlsdGVyUGFuZWxzKSk7Y29uc3QgaT1PYmplY3Qua2V5cyhvKTtpZihpLmxlbmd0aClpZihcInN0cmluZ1wiPT10eXBlb2YgdCYmKHQ9W3RdKSxBcnJheS5pc0FycmF5KHQpKXtjb25zdCBsPXQubWFwKChlPT5mdW5jdGlvbihlLHQpe2xldCBsPW51bGw7Zm9yKGxldCBhPTA7YTxlLmNvbHVtbnMubGVuZ3RoO2ErKyl7Y29uc3Qgbj1lLmNvbHVtbnNbYV07aWYobi5jb2x1bW5LZXk9PT10KXtsPW47YnJlYWt9fXJldHVybiBsfSh7Y29sdW1uczp1LnZhbHVlfSxlKSkpO2kuZm9yRWFjaCgoZT0+e2NvbnN0IHQ9bC5maW5kKCh0PT50LmlkPT09ZSkpO3QmJih0LmZpbHRlcmVkVmFsdWU9W10pfSkpLGUuc3RvcmUuY29tbWl0KFwiZmlsdGVyQ2hhbmdlXCIse2NvbHVtbjpsLHZhbHVlczpbXSxzaWxlbnQ6ITAsbXVsdGk6ITB9KX1lbHNlIGkuZm9yRWFjaCgoZT0+e2NvbnN0IHQ9dS52YWx1ZS5maW5kKCh0PT50LmlkPT09ZSkpO3QmJih0LmZpbHRlcmVkVmFsdWU9W10pfSkpLFMudmFsdWU9e30sZS5zdG9yZS5jb21taXQoXCJmaWx0ZXJDaGFuZ2VcIix7Y29sdW1uOnt9LHZhbHVlczpbXSxzaWxlbnQ6ITB9KX0sY2xlYXJTb3J0OigpPT57TS52YWx1ZSYmKFAobnVsbCxudWxsLG51bGwpLGUuc3RvcmUuY29tbWl0KFwiY2hhbmdlU29ydENvbmRpdGlvblwiLHtzaWxlbnQ6ITB9KSl9LHRvZ2dsZVJvd0V4cGFuc2lvbjpCLHNldEV4cGFuZFJvd0tleXNBZGFwdGVyOmU9PntBKGUpLCQoZSl9LHNldEN1cnJlbnRSb3dLZXk6WSx0b2dnbGVSb3dFeHBhbnNpb25BZGFwdGVyOihlLHQpPT57dS52YWx1ZS5zb21lKCgoe3R5cGU6ZX0pPT5cImV4cGFuZFwiPT09ZSkpP0IoZSx0KTpSKGUsdCl9LGlzUm93RXhwYW5kZWQ6Rix1cGRhdGVFeHBhbmRSb3dzOkwsdXBkYXRlQ3VycmVudFJvd0RhdGE6aixsb2FkT3JUb2dnbGU6SCxzdGF0ZXM6T2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe3Jvd0tleTphLGRhdGE6bixfZGF0YTpvLGlzQ29tcGxleDppLF9jb2x1bW5zOnIsb3JpZ2luQ29sdW1uczpzLGNvbHVtbnM6dSxmaXhlZENvbHVtbnM6ZCxyaWdodEZpeGVkQ29sdW1uczpjLGxlYWZDb2x1bW5zOnAsZml4ZWRMZWFmQ29sdW1uczpoLHJpZ2h0Rml4ZWRMZWFmQ29sdW1uczptLGxlYWZDb2x1bW5zTGVuZ3RoOmYsZml4ZWRMZWFmQ29sdW1uc0xlbmd0aDpnLHJpZ2h0Rml4ZWRMZWFmQ29sdW1uc0xlbmd0aDpiLGlzQWxsU2VsZWN0ZWQ6ayxzZWxlY3Rpb246QyxyZXNlcnZlU2VsZWN0aW9uOngsc2VsZWN0T25JbmRldGVybWluYXRlOncsc2VsZWN0YWJsZTpfLGZpbHRlcnM6UyxmaWx0ZXJlZERhdGE6RSxzb3J0aW5nQ29sdW1uOk0sc29ydFByb3A6VCxzb3J0T3JkZXI6Tixob3ZlclJvdzpEfSx6KSxXKSxxKX19ZnVuY3Rpb24gdGQoZSx0KXtyZXR1cm4gZS5tYXAoKGU9Pnt2YXIgbDtyZXR1cm4gZS5pZD09PXQuaWQ/dDooKG51bGw9PT0obD1lLmNoaWxkcmVuKXx8dm9pZCAwPT09bD92b2lkIDA6bC5sZW5ndGgpPjAmJihlLmNoaWxkcmVuPXRkKGUuY2hpbGRyZW4sdCkpLGUpfSkpfWZ1bmN0aW9uIGxkKGUsdD17fSl7aWYoIWUpdGhyb3cgbmV3IEVycm9yKFwiVGFibGUgaXMgcmVxdWlyZWQuXCIpO2NvbnN0IGw9ZnVuY3Rpb24oKXtjb25zdCBlPXYoKSx0PXtzZXREYXRhKHQsbCl7Y29uc3QgYT1RKHQuZGF0YSkhPT1sO3QuZGF0YS52YWx1ZT1sLHQuX2RhdGEudmFsdWU9bCxlLnN0b3JlLmV4ZWNRdWVyeSgpLGUuc3RvcmUudXBkYXRlQ3VycmVudFJvd0RhdGEoKSxlLnN0b3JlLnVwZGF0ZUV4cGFuZFJvd3MoKSxRKHQucmVzZXJ2ZVNlbGVjdGlvbik/KGUuc3RvcmUuYXNzZXJ0Um93S2V5KCksZS5zdG9yZS51cGRhdGVTZWxlY3Rpb25CeVJvd0tleSgpKTphP2Uuc3RvcmUuY2xlYXJTZWxlY3Rpb24oKTplLnN0b3JlLmNsZWFuU2VsZWN0aW9uKCksZS5zdG9yZS51cGRhdGVBbGxTZWxlY3RlZCgpLGUuc3RvcmUudXBkYXRlVGFibGVTY3JvbGxZKCl9LGluc2VydENvbHVtbih0LGwsYSxuKXtpZihhPC0xKXJldHVybjtjb25zdCBvPVEodC5fY29sdW1ucyk7aWYobil7biYmIW4uY2hpbGRyZW4mJihuLmNoaWxkcmVuPVtdKSxuLmNoaWxkcmVuLnB1c2gobCk7Y29uc3QgZT10ZChvLG4pO3QuX2NvbHVtbnMudmFsdWU9ZX1lbHNlIG8uc3BsaWNlKGEsMCxsKSx0Ll9jb2x1bW5zLnZhbHVlPW87XCJzZWxlY3Rpb25cIj09PWwudHlwZSYmKHQuc2VsZWN0YWJsZS52YWx1ZT1sLnNlbGVjdGFibGUsdC5yZXNlcnZlU2VsZWN0aW9uLnZhbHVlPWwucmVzZXJ2ZVNlbGVjdGlvbiksZS4kcmVhZHkmJihlLnN0b3JlLnVwZGF0ZUNvbHVtbnMoKSxlLnN0b3JlLnNjaGVkdWxlTGF5b3V0KCkpfSxyZW1vdmVDb2x1bW4odCxsLGEpe2NvbnN0IG49USh0Ll9jb2x1bW5zKXx8W107YT8oYS5jaGlsZHJlbi5zcGxpY2UoYS5jaGlsZHJlbi5maW5kSW5kZXgoKGU9PmUuaWQ9PT1sLmlkKSksMSksdC5fY29sdW1ucy52YWx1ZT10ZChuLGEpKToobi5zcGxpY2Uobi5pbmRleE9mKGwpLDEpLHQuX2NvbHVtbnMudmFsdWU9biksZS4kcmVhZHkmJihlLnN0b3JlLnVwZGF0ZUNvbHVtbnMoKSxlLnN0b3JlLnNjaGVkdWxlTGF5b3V0KCkpfSxzb3J0KHQsbCl7Y29uc3R7cHJvcDphLG9yZGVyOm4saW5pdDpvfT1sO2lmKGEpe2NvbnN0IGw9VWUoUSh0LmNvbHVtbnMpLChlPT5lLnByb3BlcnR5PT09YSkpO2wmJihsLm9yZGVyPW4sZS5zdG9yZS51cGRhdGVTb3J0KGwsYSxuKSxlLnN0b3JlLmNvbW1pdChcImNoYW5nZVNvcnRDb25kaXRpb25cIix7aW5pdDpvfSkpfX0sY2hhbmdlU29ydENvbmRpdGlvbih0LGwpe2NvbnN0e3NvcnRpbmdDb2x1bW46YSxzb3J0UHJvcDpuLHNvcnRPcmRlcjpvfT10O251bGw9PT1RKG8pJiYodC5zb3J0aW5nQ29sdW1uLnZhbHVlPW51bGwsdC5zb3J0UHJvcC52YWx1ZT1udWxsKSxlLnN0b3JlLmV4ZWNRdWVyeSh7ZmlsdGVyOiEwfSksbCYmKGwuc2lsZW50fHxsLmluaXQpfHxlLmVtaXQoXCJzb3J0LWNoYW5nZVwiLHtjb2x1bW46UShhKSxwcm9wOlEobiksb3JkZXI6UShvKX0pLGUuc3RvcmUudXBkYXRlVGFibGVTY3JvbGxZKCl9LGZpbHRlckNoYW5nZSh0LGwpe2NvbnN0e2NvbHVtbjphLHZhbHVlczpuLHNpbGVudDpvfT1sLGk9ZS5zdG9yZS51cGRhdGVGaWx0ZXJzKGEsbik7ZS5zdG9yZS5leGVjUXVlcnkoKSxvfHxlLmVtaXQoXCJmaWx0ZXItY2hhbmdlXCIsaSksZS5zdG9yZS51cGRhdGVUYWJsZVNjcm9sbFkoKX0sdG9nZ2xlQWxsU2VsZWN0aW9uKCl7ZS5zdG9yZS50b2dnbGVBbGxTZWxlY3Rpb24oKX0scm93U2VsZWN0ZWRDaGFuZ2VkKHQsbCl7ZS5zdG9yZS50b2dnbGVSb3dTZWxlY3Rpb24obCksZS5zdG9yZS51cGRhdGVBbGxTZWxlY3RlZCgpfSxzZXRIb3ZlclJvdyhlLHQpe2UuaG92ZXJSb3cudmFsdWU9dH0sc2V0Q3VycmVudFJvdyh0LGwpe2Uuc3RvcmUudXBkYXRlQ3VycmVudFJvdyhsKX19LGw9ZWQoKTtyZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LGwpLHttdXRhdGlvbnM6dCxjb21taXQ6ZnVuY3Rpb24odCwuLi5sKXtjb25zdCBhPWUuc3RvcmUubXV0YXRpb25zO2lmKCFhW3RdKXRocm93IG5ldyBFcnJvcihcIkFjdGlvbiBub3QgZm91bmQ6IFwiK3QpO2FbdF0uYXBwbHkoZSxbZS5zdG9yZS5zdGF0ZXNdLmNvbmNhdChsKSl9LHVwZGF0ZVRhYmxlU2Nyb2xsWTpmdW5jdGlvbigpe2soZS5sYXlvdXQudXBkYXRlU2Nyb2xsWS5hcHBseShlLmxheW91dCkpfX0pfSgpO3JldHVybiBsLnRvZ2dsZUFsbFNlbGVjdGlvbj1sZShsLl90b2dnbGVBbGxTZWxlY3Rpb24sMTApLE9iamVjdC5rZXlzKHQpLmZvckVhY2goKGU9PntsLnN0YXRlc1tlXS52YWx1ZT10W2VdfSkpLGx9Y2xhc3MgYWR7Y29uc3RydWN0b3IoZSl7dGhpcy5vYnNlcnZlcnM9W10sdGhpcy50YWJsZT1udWxsLHRoaXMuc3RvcmU9bnVsbCx0aGlzLmNvbHVtbnM9W10sdGhpcy5maXQ9ITAsdGhpcy5zaG93SGVhZGVyPSEwLHRoaXMuaGVpZ2h0PXQobnVsbCksdGhpcy5zY3JvbGxYPXQoITEpLHRoaXMuc2Nyb2xsWT10KCExKSx0aGlzLmJvZHlXaWR0aD10KG51bGwpLHRoaXMuZml4ZWRXaWR0aD10KG51bGwpLHRoaXMucmlnaHRGaXhlZFdpZHRoPXQobnVsbCksdGhpcy50YWJsZUhlaWdodD10KG51bGwpLHRoaXMuaGVhZGVySGVpZ2h0PXQoNDQpLHRoaXMuYXBwZW5kSGVpZ2h0PXQoMCksdGhpcy5mb290ZXJIZWlnaHQ9dCg0NCksdGhpcy52aWV3cG9ydEhlaWdodD10KG51bGwpLHRoaXMuYm9keUhlaWdodD10KG51bGwpLHRoaXMuZml4ZWRCb2R5SGVpZ2h0PXQobnVsbCksdGhpcy5ndXR0ZXJXaWR0aD1odCgpO2Zvcihjb25zdCB0IGluIGUpZS5oYXNPd25Qcm9wZXJ0eSh0KSYmKGIodGhpc1t0XSk/dGhpc1t0XS52YWx1ZT1lW3RdOnRoaXNbdF09ZVt0XSk7aWYoIXRoaXMudGFibGUpdGhyb3cgbmV3IEVycm9yKFwidGFibGUgaXMgcmVxdWlyZWQgZm9yIFRhYmxlIExheW91dFwiKTtpZighdGhpcy5zdG9yZSl0aHJvdyBuZXcgRXJyb3IoXCJzdG9yZSBpcyByZXF1aXJlZCBmb3IgVGFibGUgTGF5b3V0XCIpfXVwZGF0ZVNjcm9sbFkoKXtpZihudWxsPT09dGhpcy5oZWlnaHQudmFsdWUpcmV0dXJuITE7Y29uc3QgZT10aGlzLnRhYmxlLnJlZnMuYm9keVdyYXBwZXI7aWYodGhpcy50YWJsZS52bm9kZS5lbCYmZSl7Y29uc3QgdD1lLnF1ZXJ5U2VsZWN0b3IoXCIuZWwtdGFibGVfX2JvZHlcIiksbD10aGlzLnNjcm9sbFkudmFsdWUsYT10Lm9mZnNldEhlaWdodD50aGlzLmJvZHlIZWlnaHQudmFsdWU7cmV0dXJuIHRoaXMuc2Nyb2xsWS52YWx1ZT1hLGwhPT1hfXJldHVybiExfXNldEhlaWdodChlLHQ9XCJoZWlnaHRcIil7aWYoemUpcmV0dXJuO2NvbnN0IGw9dGhpcy50YWJsZS52bm9kZS5lbDtpZihlPVh1KGUpLHRoaXMuaGVpZ2h0LnZhbHVlPU51bWJlcihlKSwhbCYmKGV8fDA9PT1lKSlyZXR1cm4gaygoKCk9PnRoaXMuc2V0SGVpZ2h0KGUsdCkpKTtcIm51bWJlclwiPT10eXBlb2YgZT8obC5zdHlsZVt0XT1lK1wicHhcIix0aGlzLnVwZGF0ZUVsc0hlaWdodCgpKTpcInN0cmluZ1wiPT10eXBlb2YgZSYmKGwuc3R5bGVbdF09ZSx0aGlzLnVwZGF0ZUVsc0hlaWdodCgpKX1zZXRNYXhIZWlnaHQoZSl7dGhpcy5zZXRIZWlnaHQoZSxcIm1heC1oZWlnaHRcIil9Z2V0RmxhdHRlbkNvbHVtbnMoKXtjb25zdCBlPVtdO3JldHVybiB0aGlzLnRhYmxlLnN0b3JlLnN0YXRlcy5jb2x1bW5zLnZhbHVlLmZvckVhY2goKHQ9Pnt0LmlzQ29sdW1uR3JvdXA/ZS5wdXNoLmFwcGx5KGUsdC5jb2x1bW5zKTplLnB1c2godCl9KSksZX11cGRhdGVFbHNIZWlnaHQoKXtpZighdGhpcy50YWJsZS4kcmVhZHkpcmV0dXJuIGsoKCgpPT50aGlzLnVwZGF0ZUVsc0hlaWdodCgpKSk7Y29uc3R7aGVhZGVyV3JhcHBlcjplLGFwcGVuZFdyYXBwZXI6dCxmb290ZXJXcmFwcGVyOmx9PXRoaXMudGFibGUucmVmcyxhPXQsbj1lLG89bDtpZih0aGlzLmFwcGVuZEhlaWdodC52YWx1ZT1hP2Eub2Zmc2V0SGVpZ2h0OjAsdGhpcy5zaG93SGVhZGVyJiYhbilyZXR1cm47Y29uc3QgaT1uP24ucXVlcnlTZWxlY3RvcihcIi5lbC10YWJsZV9faGVhZGVyIHRyXCIpOm51bGwscj10aGlzLmhlYWRlckRpc3BsYXlOb25lKGkpLHM9dGhpcy5oZWFkZXJIZWlnaHQudmFsdWU9dGhpcy5zaG93SGVhZGVyP24ub2Zmc2V0SGVpZ2h0OjA7aWYodGhpcy5zaG93SGVhZGVyJiYhciYmbi5vZmZzZXRXaWR0aD4wJiYodGhpcy50YWJsZS5zdG9yZS5zdGF0ZXMuY29sdW1ucy52YWx1ZXx8W10pLmxlbmd0aD4wJiZzPDIpcmV0dXJuIGsoKCgpPT50aGlzLnVwZGF0ZUVsc0hlaWdodCgpKSk7Y29uc3QgdT10aGlzLnRhYmxlSGVpZ2h0LnZhbHVlPXRoaXMudGFibGUudm5vZGUuZWwuY2xpZW50SGVpZ2h0LGQ9dGhpcy5mb290ZXJIZWlnaHQudmFsdWU9bz9vLm9mZnNldEhlaWdodDowO251bGwhPT10aGlzLmhlaWdodC52YWx1ZSYmKHRoaXMuYm9keUhlaWdodC52YWx1ZT11LXMtZCsobz8xOjApKSx0aGlzLmZpeGVkQm9keUhlaWdodC52YWx1ZT10aGlzLnNjcm9sbFgudmFsdWU/dGhpcy5ib2R5SGVpZ2h0LnZhbHVlLXRoaXMuZ3V0dGVyV2lkdGg6dGhpcy5ib2R5SGVpZ2h0LnZhbHVlO2NvbnN0IGM9ISh0aGlzLnN0b3JlLnN0YXRlcy5kYXRhLnZhbHVlJiZ0aGlzLnN0b3JlLnN0YXRlcy5kYXRhLnZhbHVlLmxlbmd0aCk7dGhpcy52aWV3cG9ydEhlaWdodC52YWx1ZT10aGlzLnNjcm9sbFgudmFsdWU/dS0oYz8wOnRoaXMuZ3V0dGVyV2lkdGgpOnUsdGhpcy51cGRhdGVTY3JvbGxZKCksdGhpcy5ub3RpZnlPYnNlcnZlcnMoXCJzY3JvbGxhYmxlXCIpfWhlYWRlckRpc3BsYXlOb25lKGUpe2lmKCFlKXJldHVybiEwO2xldCB0PWU7Zm9yKDtcIkRJVlwiIT09dC50YWdOYW1lOyl7aWYoXCJub25lXCI9PT1nZXRDb21wdXRlZFN0eWxlKHQpLmRpc3BsYXkpcmV0dXJuITA7dD10LnBhcmVudEVsZW1lbnR9cmV0dXJuITF9dXBkYXRlQ29sdW1uc1dpZHRoKCl7aWYoemUpcmV0dXJuO2NvbnN0IGU9dGhpcy5maXQsdD10aGlzLnRhYmxlLnZub2RlLmVsLmNsaWVudFdpZHRoO2xldCBsPTA7Y29uc3QgYT10aGlzLmdldEZsYXR0ZW5Db2x1bW5zKCksbj1hLmZpbHRlcigoZT0+XCJudW1iZXJcIiE9dHlwZW9mIGUud2lkdGgpKTtpZihhLmZvckVhY2goKGU9PntcIm51bWJlclwiPT10eXBlb2YgZS53aWR0aCYmZS5yZWFsV2lkdGgmJihlLnJlYWxXaWR0aD1udWxsKX0pKSxuLmxlbmd0aD4wJiZlKXthLmZvckVhY2goKGU9PntsKz1lLndpZHRofHxlLm1pbldpZHRofHw4MH0pKTtjb25zdCBlPXRoaXMuc2Nyb2xsWS52YWx1ZT90aGlzLmd1dHRlcldpZHRoOjA7aWYobDw9dC1lKXt0aGlzLnNjcm9sbFgudmFsdWU9ITE7Y29uc3QgYT10LWUtbDtpZigxPT09bi5sZW5ndGgpblswXS5yZWFsV2lkdGg9KG5bMF0ubWluV2lkdGh8fDgwKSthO2Vsc2V7Y29uc3QgZT1hL24ucmVkdWNlKCgoZSx0KT0+ZSsodC5taW5XaWR0aHx8ODApKSwwKTtsZXQgdD0wO24uZm9yRWFjaCgoKGwsYSk9PntpZigwPT09YSlyZXR1cm47Y29uc3Qgbj1NYXRoLmZsb29yKChsLm1pbldpZHRofHw4MCkqZSk7dCs9bixsLnJlYWxXaWR0aD0obC5taW5XaWR0aHx8ODApK259KSksblswXS5yZWFsV2lkdGg9KG5bMF0ubWluV2lkdGh8fDgwKSthLXR9fWVsc2UgdGhpcy5zY3JvbGxYLnZhbHVlPSEwLG4uZm9yRWFjaCgoZnVuY3Rpb24oZSl7ZS5yZWFsV2lkdGg9ZS5taW5XaWR0aH0pKTt0aGlzLmJvZHlXaWR0aC52YWx1ZT1NYXRoLm1heChsLHQpLHRoaXMudGFibGUuc3RhdGUucmVzaXplU3RhdGUudmFsdWUud2lkdGg9dGhpcy5ib2R5V2lkdGgudmFsdWV9ZWxzZSBhLmZvckVhY2goKGU9PntlLndpZHRofHxlLm1pbldpZHRoP2UucmVhbFdpZHRoPWUud2lkdGh8fGUubWluV2lkdGg6ZS5yZWFsV2lkdGg9ODAsbCs9ZS5yZWFsV2lkdGh9KSksdGhpcy5zY3JvbGxYLnZhbHVlPWw+dCx0aGlzLmJvZHlXaWR0aC52YWx1ZT1sO2NvbnN0IG89dGhpcy5zdG9yZS5zdGF0ZXMuZml4ZWRDb2x1bW5zLnZhbHVlO2lmKG8ubGVuZ3RoPjApe2xldCBlPTA7by5mb3JFYWNoKChmdW5jdGlvbih0KXtlKz10LnJlYWxXaWR0aHx8dC53aWR0aH0pKSx0aGlzLmZpeGVkV2lkdGgudmFsdWU9ZX1jb25zdCBpPXRoaXMuc3RvcmUuc3RhdGVzLnJpZ2h0Rml4ZWRDb2x1bW5zLnZhbHVlO2lmKGkubGVuZ3RoPjApe2xldCBlPTA7aS5mb3JFYWNoKChmdW5jdGlvbih0KXtlKz10LnJlYWxXaWR0aHx8dC53aWR0aH0pKSx0aGlzLnJpZ2h0Rml4ZWRXaWR0aC52YWx1ZT1lfXRoaXMubm90aWZ5T2JzZXJ2ZXJzKFwiY29sdW1uc1wiKSx0aGlzLnVwZGF0ZUVsc0hlaWdodCgpfWFkZE9ic2VydmVyKGUpe3RoaXMub2JzZXJ2ZXJzLnB1c2goZSl9cmVtb3ZlT2JzZXJ2ZXIoZSl7Y29uc3QgdD10aGlzLm9ic2VydmVycy5pbmRleE9mKGUpOy0xIT09dCYmdGhpcy5vYnNlcnZlcnMuc3BsaWNlKHQsMSl9bm90aWZ5T2JzZXJ2ZXJzKGUpe3RoaXMub2JzZXJ2ZXJzLmZvckVhY2goKHQ9Pnt2YXIgbCxhO3N3aXRjaChlKXtjYXNlXCJjb2x1bW5zXCI6bnVsbD09PShsPXQuc3RhdGUpfHx2b2lkIDA9PT1sfHxsLm9uQ29sdW1uc0NoYW5nZSh0aGlzKTticmVhaztjYXNlXCJzY3JvbGxhYmxlXCI6bnVsbD09PShhPXQuc3RhdGUpfHx2b2lkIDA9PT1hfHxhLm9uU2Nyb2xsYWJsZUNoYW5nZSh0aGlzKTticmVhaztkZWZhdWx0OnRocm93IG5ldyBFcnJvcihgVGFibGUgTGF5b3V0IGRvbid0IGhhdmUgZXZlbnQgJHtlfS5gKX19KSl9fXZhciBuZD1lKHtuYW1lOlwiRWxUYWJsZUZpbHRlclBhbmVsXCIsY29tcG9uZW50czp7RWxDaGVja2JveDpLYSxFbENoZWNrYm94R3JvdXA6VG4sRWxTY3JvbGxiYXI6bmwsRWxQb3BwZXI6U2x9LHByb3BzOntwbGFjZW1lbnQ6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJib3R0b20tc3RhcnRcIn0sc3RvcmU6e3R5cGU6T2JqZWN0fSxjb2x1bW46e3R5cGU6T2JqZWN0fSx1cERhdGFDb2x1bW46e3R5cGU6RnVuY3Rpb259fSxzZXR1cChlKXtjb25zdCBhPXYoKSxuPWEucGFyZW50O24uZmlsdGVyUGFuZWxzLnZhbHVlW2UuY29sdW1uLmlkXXx8KG4uZmlsdGVyUGFuZWxzLnZhbHVlW2UuY29sdW1uLmlkXT1hKTtjb25zdCBvPXQoITEpLGk9bCgoKCk9PmUuY29sdW1uJiZlLmNvbHVtbi5maWx0ZXJzKSkscj1sKHtnZXQ6KCk9PihlLmNvbHVtbi5maWx0ZXJlZFZhbHVlfHxbXSlbMF0sc2V0OmU9PntzLnZhbHVlJiYobnVsbCE9ZT9zLnZhbHVlLnNwbGljZSgwLDEsZSk6cy52YWx1ZS5zcGxpY2UoMCwxKSl9fSkscz1sKHtnZXQ6KCk9PmUuY29sdW1uJiZlLmNvbHVtbi5maWx0ZXJlZFZhbHVlfHxbXSxzZXQodCl7ZS5jb2x1bW4mJmUudXBEYXRhQ29sdW1uKFwiZmlsdGVyZWRWYWx1ZVwiLHQpfX0pLHU9bCgoKCk9PiFlLmNvbHVtbnx8ZS5jb2x1bW4uZmlsdGVyTXVsdGlwbGUpKSxkPSgpPT57by52YWx1ZT0hMX0sYz10PT57ZS5zdG9yZS5jb21taXQoXCJmaWx0ZXJDaGFuZ2VcIix7Y29sdW1uOmUuY29sdW1uLHZhbHVlczp0fSksZS5zdG9yZS51cGRhdGVBbGxTZWxlY3RlZCgpfTtyZXR1cm4geShvLCh0PT57ZS5jb2x1bW4mJmUudXBEYXRhQ29sdW1uKFwiZmlsdGVyT3BlbmVkXCIsdCl9KSx7aW1tZWRpYXRlOiEwfSkse3Rvb2x0aXBWaXNpYmxlOm8sbXVsdGlwbGU6dSxmaWx0ZXJlZFZhbHVlOnMsZmlsdGVyVmFsdWU6cixmaWx0ZXJzOmksaGFuZGxlQ29uZmlybTooKT0+e2Mocy52YWx1ZSksZCgpfSxoYW5kbGVSZXNldDooKT0+e3MudmFsdWU9W10sYyhzLnZhbHVlKSxkKCl9LGhhbmRsZVNlbGVjdDplPT57ci52YWx1ZT1lLGMobnVsbCE9ZT9zLnZhbHVlOltdKSxkKCl9LGlzQWN0aXZlOmU9PmUudmFsdWU9PT1yLnZhbHVlLHQ6cWwsc2hvd0ZpbHRlclBhbmVsOmU9PntlLnN0b3BQcm9wYWdhdGlvbigpLG8udmFsdWU9ITB9fX19KTtjb25zdCBvZD17a2V5OjB9LGlkPXtjbGFzczpcImVsLXRhYmxlLWZpbHRlcl9fY29udGVudFwifSxyZD17Y2xhc3M6XCJlbC10YWJsZS1maWx0ZXJfX2JvdHRvbVwifSxzZD17a2V5OjEsY2xhc3M6XCJlbC10YWJsZS1maWx0ZXJfX2xpc3RcIn07ZnVuY3Rpb24gdWQoZSl7Y29uc3QgdD12KCk7WCgoKCk9PnthLnZhbHVlLmFkZE9ic2VydmVyKHQpfSkpLF8oKCgpPT57bihhLnZhbHVlKSxvKGEudmFsdWUpfSkpLFMoKCgpPT57bihhLnZhbHVlKSxvKGEudmFsdWUpfSkpLE4oKCgpPT57YS52YWx1ZS5yZW1vdmVPYnNlcnZlcih0KX0pKTtjb25zdCBhPWwoKCgpPT57Y29uc3QgdD1lLmxheW91dDtpZighdCl0aHJvdyBuZXcgRXJyb3IoXCJDYW4gbm90IGZpbmQgdGFibGUgbGF5b3V0LlwiKTtyZXR1cm4gdH0pKSxuPXQ9Pnt2YXIgbDtjb25zdCBhPW51bGw9PT0obD1lLnZub2RlLmVsKXx8dm9pZCAwPT09bD92b2lkIDA6bC5xdWVyeVNlbGVjdG9yQWxsKFwiY29sZ3JvdXAgPiBjb2xcIik7aWYoIWEubGVuZ3RoKXJldHVybjtjb25zdCBuPXQuZ2V0RmxhdHRlbkNvbHVtbnMoKSxvPXt9O24uZm9yRWFjaCgoZT0+e29bZS5pZF09ZX0pKTtmb3IobGV0IGU9MCx0PWEubGVuZ3RoO2U8dDtlKyspe2NvbnN0IHQ9YVtlXSxsPXQuZ2V0QXR0cmlidXRlKFwibmFtZVwiKSxuPW9bbF07biYmdC5zZXRBdHRyaWJ1dGUoXCJ3aWR0aFwiLG4ucmVhbFdpZHRofHxuLndpZHRoKX19LG89dD0+e2NvbnN0IGw9ZS52bm9kZS5lbC5xdWVyeVNlbGVjdG9yQWxsKFwiY29sZ3JvdXAgPiBjb2xbbmFtZT1ndXR0ZXJdXCIpO2ZvcihsZXQgZT0wLGE9bC5sZW5ndGg7ZTxhO2UrKyl7bFtlXS5zZXRBdHRyaWJ1dGUoXCJ3aWR0aFwiLHQuc2Nyb2xsWS52YWx1ZT90Lmd1dHRlcldpZHRoOlwiMFwiKX1jb25zdCBhPWUudm5vZGUuZWwucXVlcnlTZWxlY3RvckFsbChcInRoLmd1dHRlclwiKTtmb3IobGV0IGU9MCxsPWEubGVuZ3RoO2U8bDtlKyspe2NvbnN0IGw9YVtlXTtsLnN0eWxlLndpZHRoPXQuc2Nyb2xsWS52YWx1ZT90Lmd1dHRlcldpZHRoK1wicHhcIjpcIjBcIixsLnN0eWxlLmRpc3BsYXk9dC5zY3JvbGxZLnZhbHVlP1wiXCI6XCJub25lXCJ9fTtyZXR1cm57dGFibGVMYXlvdXQ6YS52YWx1ZSxvbkNvbHVtbnNDaGFuZ2U6bixvblNjcm9sbGFibGVDaGFuZ2U6b319ZnVuY3Rpb24gZGQoZSl7Y29uc3QgdD12KCkucGFyZW50LGw9dC5zdG9yZS5zdGF0ZXM7cmV0dXJue2dldEhlYWRlclJvd1N0eWxlOmU9Pntjb25zdCBsPXQucHJvcHMuaGVhZGVyUm93U3R5bGU7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgbD9sLmNhbGwobnVsbCx7cm93SW5kZXg6ZX0pOmx9LGdldEhlYWRlclJvd0NsYXNzOmU9Pntjb25zdCBsPVtdLGE9dC5wcm9wcy5oZWFkZXJSb3dDbGFzc05hbWU7cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIGE/bC5wdXNoKGEpOlwiZnVuY3Rpb25cIj09dHlwZW9mIGEmJmwucHVzaChhLmNhbGwobnVsbCx7cm93SW5kZXg6ZX0pKSxsLmpvaW4oXCIgXCIpfSxnZXRIZWFkZXJDZWxsU3R5bGU6KGUsbCxhLG4pPT57Y29uc3Qgbz10LnByb3BzLmhlYWRlckNlbGxTdHlsZTtyZXR1cm5cImZ1bmN0aW9uXCI9PXR5cGVvZiBvP28uY2FsbChudWxsLHtyb3dJbmRleDplLGNvbHVtbkluZGV4Omwscm93OmEsY29sdW1uOm59KTpvfSxnZXRIZWFkZXJDZWxsQ2xhc3M6KGEsbixvLGkpPT57Y29uc3Qgcj1baS5pZCxpLm9yZGVyLGkuaGVhZGVyQWxpZ24saS5jbGFzc05hbWUsaS5sYWJlbENsYXNzTmFtZV07MD09PWEmJigodCxhKT0+e2xldCBuPTA7Zm9yKGxldCBlPTA7ZTx0O2UrKyluKz1hW2VdLmNvbFNwYW47Y29uc3Qgbz1uK2FbdF0uY29sU3Bhbi0xO3JldHVyblwibGVmdFwiPT09ZS5maXhlZD9vPj1sLmZpeGVkTGVhZkNvbHVtbnNMZW5ndGgudmFsdWU6XCJyaWdodFwiPT09ZS5maXhlZD9uPGwuY29sdW1ucy52YWx1ZS5sZW5ndGgtbC5yaWdodEZpeGVkTGVhZkNvbHVtbnNMZW5ndGgudmFsdWU6bzxsLmZpeGVkTGVhZkNvbHVtbnNMZW5ndGgudmFsdWV8fG4+PWwuY29sdW1ucy52YWx1ZS5sZW5ndGgtbC5yaWdodEZpeGVkTGVhZkNvbHVtbnNMZW5ndGgudmFsdWV9KShuLG8pJiZyLnB1c2goXCJpcy1oaWRkZW5cIiksaS5jaGlsZHJlbnx8ci5wdXNoKFwiaXMtbGVhZlwiKSxpLnNvcnRhYmxlJiZyLnB1c2goXCJpcy1zb3J0YWJsZVwiKTtjb25zdCBzPXQucHJvcHMuaGVhZGVyQ2VsbENsYXNzTmFtZTtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2Ygcz9yLnB1c2gocyk6XCJmdW5jdGlvblwiPT10eXBlb2YgcyYmci5wdXNoKHMuY2FsbChudWxsLHtyb3dJbmRleDphLGNvbHVtbkluZGV4Om4scm93Om8sY29sdW1uOml9KSksci5qb2luKFwiIFwiKX19fW5kLnJlbmRlcj1mdW5jdGlvbihlLHQsbCxvLHIsdSl7Y29uc3QgZD1QKFwiZWwtY2hlY2tib3hcIiksaD1QKFwiZWwtY2hlY2tib3gtZ3JvdXBcIiksdj1QKFwiZWwtc2Nyb2xsYmFyXCIpLG09UChcImVsLXBvcHBlclwiKTtyZXR1cm4gYSgpLG4obSx7cmVmOlwidG9vbHRpcFwiLHZpc2libGU6ZS50b29sdGlwVmlzaWJsZSxcIm9uVXBkYXRlOnZpc2libGVcIjp0WzZdfHwodFs2XT10PT5lLnRvb2x0aXBWaXNpYmxlPXQpLG9mZnNldDowLHBsYWNlbWVudDplLnBsYWNlbWVudCxcInNob3ctYXJyb3dcIjohMSx0cmlnZ2VyOlwiY2xpY2tcIixlZmZlY3Q6XCJsaWdodFwiLHB1cmU6XCJcIixcInBvcHBlci1jbGFzc1wiOlwiZWwtdGFibGUtZmlsdGVyXCIsXCJhcHBlbmQtdG8tYm9keVwiOlwiXCJ9LHtkZWZhdWx0OmkoKCgpPT5bZS5tdWx0aXBsZT8oYSgpLG4oXCJkaXZcIixvZCxbcyhcImRpdlwiLGlkLFtzKHYse1wid3JhcC1jbGFzc1wiOlwiZWwtdGFibGUtZmlsdGVyX193cmFwXCJ9LHtkZWZhdWx0OmkoKCgpPT5bcyhoLHttb2RlbFZhbHVlOmUuZmlsdGVyZWRWYWx1ZSxcIm9uVXBkYXRlOm1vZGVsVmFsdWVcIjp0WzFdfHwodFsxXT10PT5lLmZpbHRlcmVkVmFsdWU9dCksY2xhc3M6XCJlbC10YWJsZS1maWx0ZXJfX2NoZWNrYm94LWdyb3VwXCJ9LHtkZWZhdWx0OmkoKCgpPT5bKGEoITApLG4oRSxudWxsLEgoZS5maWx0ZXJzLChlPT4oYSgpLG4oZCx7a2V5OmUudmFsdWUsbGFiZWw6ZS52YWx1ZX0se2RlZmF1bHQ6aSgoKCk9PltjKHAoZS50ZXh0KSwxKV0pKSxfOjJ9LDEwMzIsW1wibGFiZWxcIl0pKSkpLDEyOCkpXSkpLF86MX0sOCxbXCJtb2RlbFZhbHVlXCJdKV0pKSxfOjF9KV0pLHMoXCJkaXZcIixyZCxbcyhcImJ1dHRvblwiLHtjbGFzczp7XCJpcy1kaXNhYmxlZFwiOjA9PT1lLmZpbHRlcmVkVmFsdWUubGVuZ3RofSxkaXNhYmxlZDowPT09ZS5maWx0ZXJlZFZhbHVlLmxlbmd0aCx0eXBlOlwiXCIsb25DbGljazp0WzJdfHwodFsyXT0oLi4udCk9PmUuaGFuZGxlQ29uZmlybSguLi50KSl9LHAoZS50KFwiZWwudGFibGUuY29uZmlybUZpbHRlclwiKSksMTEsW1wiZGlzYWJsZWRcIl0pLHMoXCJidXR0b25cIix7dHlwZTpcIlwiLG9uQ2xpY2s6dFszXXx8KHRbM109KC4uLnQpPT5lLmhhbmRsZVJlc2V0KC4uLnQpKX0scChlLnQoXCJlbC50YWJsZS5yZXNldEZpbHRlclwiKSksMSldKV0pKTooYSgpLG4oXCJ1bFwiLHNkLFtzKFwibGlcIix7Y2xhc3M6W3tcImlzLWFjdGl2ZVwiOnZvaWQgMD09PWUuZmlsdGVyVmFsdWV8fG51bGw9PT1lLmZpbHRlclZhbHVlfSxcImVsLXRhYmxlLWZpbHRlcl9fbGlzdC1pdGVtXCJdLG9uQ2xpY2s6dFs0XXx8KHRbNF09dD0+ZS5oYW5kbGVTZWxlY3QobnVsbCkpfSxwKGUudChcImVsLnRhYmxlLmNsZWFyRmlsdGVyXCIpKSwzKSwoYSghMCksbihFLG51bGwsSChlLmZpbHRlcnMsKHQ9PihhKCksbihcImxpXCIse2tleTp0LnZhbHVlLGNsYXNzOlt7XCJpcy1hY3RpdmVcIjplLmlzQWN0aXZlKHQpfSxcImVsLXRhYmxlLWZpbHRlcl9fbGlzdC1pdGVtXCJdLGxhYmVsOnQudmFsdWUsb25DbGljazpsPT5lLmhhbmRsZVNlbGVjdCh0LnZhbHVlKX0scCh0LnRleHQpLDExLFtcImxhYmVsXCIsXCJvbkNsaWNrXCJdKSkpKSwxMjgpKV0pKV0pKSx0cmlnZ2VyOmkoKCgpPT5bcyhcInNwYW5cIix7Y2xhc3M6XCJlbC10YWJsZV9fY29sdW1uLWZpbHRlci10cmlnZ2VyIGVsLW5vbmUtb3V0bGluZVwiLG9uQ2xpY2s6dFs1XXx8KHRbNV09KC4uLnQpPT5lLnNob3dGaWx0ZXJQYW5lbCguLi50KSl9LFtzKFwiaVwiLHtjbGFzczpbXCJlbC1pY29uLWFycm93LWRvd25cIixlLmNvbHVtbi5maWx0ZXJPcGVuZWQ/XCJlbC1pY29uLWFycm93LXVwXCI6XCJcIl19LG51bGwsMildKV0pKSxfOjF9LDgsW1widmlzaWJsZVwiLFwicGxhY2VtZW50XCJdKX0sbmQuX19maWxlPVwicGFja2FnZXMvdGFibGUvc3JjL2ZpbHRlci1wYW5lbC52dWVcIjtjb25zdCBjZD1lPT57Y29uc3QgdD1bXTtyZXR1cm4gZS5mb3JFYWNoKChlPT57ZS5jaGlsZHJlbj8odC5wdXNoKGUpLHQucHVzaC5hcHBseSh0LGNkKGUuY2hpbGRyZW4pKSk6dC5wdXNoKGUpfSkpLHR9O2Z1bmN0aW9uIHBkKGUpe2NvbnN0IHQ9digpLnBhcmVudCxhPWwoKCgpPT4oZT0+e2xldCB0PTE7Y29uc3QgbD0oZSxhKT0+e2lmKGEmJihlLmxldmVsPWEubGV2ZWwrMSx0PGUubGV2ZWwmJih0PWUubGV2ZWwpKSxlLmNoaWxkcmVuKXtsZXQgdD0wO2UuY2hpbGRyZW4uZm9yRWFjaCgoYT0+e2woYSxlKSx0Kz1hLmNvbFNwYW59KSksZS5jb2xTcGFuPXR9ZWxzZSBlLmNvbFNwYW49MX07ZS5mb3JFYWNoKChlPT57ZS5sZXZlbD0xLGwoZSx2b2lkIDApfSkpO2NvbnN0IGE9W107Zm9yKGxldCBlPTA7ZTx0O2UrKylhLnB1c2goW10pO3JldHVybiBjZChlKS5mb3JFYWNoKChlPT57ZS5jaGlsZHJlbj9lLnJvd1NwYW49MTplLnJvd1NwYW49dC1lLmxldmVsKzEsYVtlLmxldmVsLTFdLnB1c2goZSl9KSksYX0pKGUuc3RvcmUuc3RhdGVzLm9yaWdpbkNvbHVtbnMudmFsdWUpKSk7cmV0dXJue2lzR3JvdXA6bCgoKCk9Pntjb25zdCBlPWEudmFsdWUubGVuZ3RoPjE7cmV0dXJuIGUmJih0LnN0YXRlLmlzR3JvdXAudmFsdWU9ITApLGV9KSksdG9nZ2xlQWxsU2VsZWN0aW9uOmU9PntlLnN0b3BQcm9wYWdhdGlvbigpLHQuc3RvcmUuY29tbWl0KFwidG9nZ2xlQWxsU2VsZWN0aW9uXCIpfSxjb2x1bW5Sb3dzOmF9fWZ1bmN0aW9uIGhkKCl7cmV0dXJuIEQoXCJjb2xcIix7bmFtZTpcImd1dHRlclwifSl9ZnVuY3Rpb24gdmQoZSx0PSExKXtyZXR1cm4gRChcImNvbGdyb3VwXCIse30sWy4uLmUubWFwKChlPT5EKFwiY29sXCIse25hbWU6ZS5pZCxrZXk6ZS5pZH0pKSksdCYmaGQoKV0pfXZhciBtZD1lKHtuYW1lOlwiRWxUYWJsZUhlYWRlclwiLGNvbXBvbmVudHM6e0VsQ2hlY2tib3g6S2F9LHByb3BzOntmaXhlZDp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIlwifSxzdG9yZTp7cmVxdWlyZWQ6ITAsdHlwZTpPYmplY3R9LGJvcmRlcjpCb29sZWFuLGRlZmF1bHRTb3J0Ont0eXBlOk9iamVjdCxkZWZhdWx0OigpPT4oe3Byb3A6XCJcIixvcmRlcjpcIlwifSl9fSxzZXR1cChlLHtlbWl0OmF9KXtjb25zdCBuPXYoKSxvPW4ucGFyZW50LGk9by5zdG9yZS5zdGF0ZXMscj10KHt9KSx7dGFibGVMYXlvdXQ6cyxvbkNvbHVtbnNDaGFuZ2U6dSxvblNjcm9sbGFibGVDaGFuZ2U6ZH09dWQobyksYz1sKCgoKT0+IWUuZml4ZWQmJnMuZ3V0dGVyV2lkdGgpKTtfKCgoKT0+e2soKCgpPT57Y29uc3R7cHJvcDp0LG9yZGVyOmx9PWUuZGVmYXVsdFNvcnQ7by5zdG9yZS5jb21taXQoXCJzb3J0XCIse3Byb3A6dCxvcmRlcjpsLGluaXQ6ITB9KX0pKX0pKTtjb25zdHtoYW5kbGVIZWFkZXJDbGljazpwLGhhbmRsZUhlYWRlckNvbnRleHRNZW51OmgsaGFuZGxlTW91c2VEb3duOm0saGFuZGxlTW91c2VNb3ZlOmYsaGFuZGxlTW91c2VPdXQ6ZyxoYW5kbGVTb3J0Q2xpY2s6YixoYW5kbGVGaWx0ZXJDbGljazp5fT1mdW5jdGlvbihlLGwpe2NvbnN0IGE9digpLG49YS5wYXJlbnQsbz1lPT57ZS5zdG9wUHJvcGFnYXRpb24oKX0saT10KG51bGwpLHI9dCghMSkscz10KHt9KSx1PSh0LGwsYSk9Pnt0LnN0b3BQcm9wYWdhdGlvbigpO2NvbnN0IG89bC5vcmRlcj09PWE/bnVsbDphfHwoKHtvcmRlcjplLHNvcnRPcmRlcnM6dH0pPT57aWYoXCJcIj09PWUpcmV0dXJuIHRbMF07Y29uc3QgbD10LmluZGV4T2YoZXx8bnVsbCk7cmV0dXJuIHRbbD50Lmxlbmd0aC0yPzA6bCsxXX0pKGwpO2xldCBpPXQudGFyZ2V0O2Zvcig7aSYmXCJUSFwiIT09aS50YWdOYW1lOylpPWkucGFyZW50Tm9kZTtpZihpJiZcIlRIXCI9PT1pLnRhZ05hbWUmJm50KGksXCJub2NsaWNrXCIpKXJldHVybiB2b2lkIGl0KGksXCJub2NsaWNrXCIpO2lmKCFsLnNvcnRhYmxlKXJldHVybjtjb25zdCByPWUuc3RvcmUuc3RhdGVzO2xldCBzLHU9ci5zb3J0UHJvcC52YWx1ZTtjb25zdCBkPXIuc29ydGluZ0NvbHVtbi52YWx1ZTsoZCE9PWx8fGQ9PT1sJiZudWxsPT09ZC5vcmRlcikmJihkJiYoZC5vcmRlcj1udWxsKSxyLnNvcnRpbmdDb2x1bW4udmFsdWU9bCx1PWwucHJvcGVydHkpLHM9bC5vcmRlcj1vfHxudWxsLHIuc29ydFByb3AudmFsdWU9dSxyLnNvcnRPcmRlci52YWx1ZT1zLG4uc3RvcmUuY29tbWl0KFwiY2hhbmdlU29ydENvbmRpdGlvblwiKX07cmV0dXJue2hhbmRsZUhlYWRlckNsaWNrOihlLHQpPT57IXQuZmlsdGVycyYmdC5zb3J0YWJsZT91KGUsdCwhMSk6dC5maWx0ZXJhYmxlJiYhdC5zb3J0YWJsZSYmbyhlKSxuLmVtaXQoXCJoZWFkZXItY2xpY2tcIix0LGUpfSxoYW5kbGVIZWFkZXJDb250ZXh0TWVudTooZSx0KT0+e24uZW1pdChcImhlYWRlci1jb250ZXh0bWVudVwiLHQsZSl9LGhhbmRsZU1vdXNlRG93bjoodCxvKT0+e2lmKCF6ZSYmIShvLmNoaWxkcmVuJiZvLmNoaWxkcmVuLmxlbmd0aD4wKSYmaS52YWx1ZSYmZS5ib3JkZXIpe3IudmFsdWU9ITA7Y29uc3QgdT1uO2woXCJzZXQtZHJhZy12aXNpYmxlXCIsITApO2NvbnN0IGQ9dS52bm9kZS5lbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0LGM9YS52bm9kZS5lbC5xdWVyeVNlbGVjdG9yKFwidGguXCIrby5pZCkscD1jLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLGg9cC5sZWZ0LWQrMzA7b3QoYyxcIm5vY2xpY2tcIikscy52YWx1ZT17c3RhcnRNb3VzZUxlZnQ6dC5jbGllbnRYLHN0YXJ0TGVmdDpwLnJpZ2h0LWQsc3RhcnRDb2x1bW5MZWZ0OnAubGVmdC1kLHRhYmxlTGVmdDpkfTtjb25zdCB2PXUucmVmcy5yZXNpemVQcm94eTt2LnN0eWxlLmxlZnQ9cy52YWx1ZS5zdGFydExlZnQrXCJweFwiLGRvY3VtZW50Lm9uc2VsZWN0c3RhcnQ9ZnVuY3Rpb24oKXtyZXR1cm4hMX0sZG9jdW1lbnQub25kcmFnc3RhcnQ9ZnVuY3Rpb24oKXtyZXR1cm4hMX07Y29uc3QgbT1lPT57Y29uc3QgdD1lLmNsaWVudFgtcy52YWx1ZS5zdGFydE1vdXNlTGVmdCxsPXMudmFsdWUuc3RhcnRMZWZ0K3Q7di5zdHlsZS5sZWZ0PU1hdGgubWF4KGgsbCkrXCJweFwifSxmPSgpPT57aWYoci52YWx1ZSl7Y29uc3R7c3RhcnRDb2x1bW5MZWZ0OmEsc3RhcnRMZWZ0Om59PXMudmFsdWUsZD1wYXJzZUludCh2LnN0eWxlLmxlZnQsMTApLWE7by53aWR0aD1vLnJlYWxXaWR0aD1kLHUuZW1pdChcImhlYWRlci1kcmFnZW5kXCIsby53aWR0aCxuLWEsbyx0KSxlLnN0b3JlLnNjaGVkdWxlTGF5b3V0KCExLCEwKSxkb2N1bWVudC5ib2R5LnN0eWxlLmN1cnNvcj1cIlwiLHIudmFsdWU9ITEsaS52YWx1ZT1udWxsLHMudmFsdWU9e30sbChcInNldC1kcmFnLXZpc2libGVcIiwhMSl9ZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLG0pLGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsZiksZG9jdW1lbnQub25zZWxlY3RzdGFydD1udWxsLGRvY3VtZW50Lm9uZHJhZ3N0YXJ0PW51bGwsc2V0VGltZW91dCgoZnVuY3Rpb24oKXtpdChjLFwibm9jbGlja1wiKX0pLDApfTtkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsbSksZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIixmKX19LGhhbmRsZU1vdXNlTW92ZToodCxsKT0+e2lmKGwuY2hpbGRyZW4mJmwuY2hpbGRyZW4ubGVuZ3RoPjApcmV0dXJuO2xldCBhPXQudGFyZ2V0O2Zvcig7YSYmXCJUSFwiIT09YS50YWdOYW1lOylhPWEucGFyZW50Tm9kZTtpZihsJiZsLnJlc2l6YWJsZSYmIXIudmFsdWUmJmUuYm9yZGVyKXtjb25zdCBlPWEuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksbj1kb2N1bWVudC5ib2R5LnN0eWxlO2Uud2lkdGg+MTImJmUucmlnaHQtdC5wYWdlWDw4PyhuLmN1cnNvcj1cImNvbC1yZXNpemVcIixudChhLFwiaXMtc29ydGFibGVcIikmJihhLnN0eWxlLmN1cnNvcj1cImNvbC1yZXNpemVcIiksaS52YWx1ZT1sKTpyLnZhbHVlfHwobi5jdXJzb3I9XCJcIixudChhLFwiaXMtc29ydGFibGVcIikmJihhLnN0eWxlLmN1cnNvcj1cInBvaW50ZXJcIiksaS52YWx1ZT1udWxsKX19LGhhbmRsZU1vdXNlT3V0OigpPT57emV8fChkb2N1bWVudC5ib2R5LnN0eWxlLmN1cnNvcj1cIlwiKX0saGFuZGxlU29ydENsaWNrOnUsaGFuZGxlRmlsdGVyQ2xpY2s6b319KGUsYSkse2dldEhlYWRlclJvd1N0eWxlOkMsZ2V0SGVhZGVyUm93Q2xhc3M6eCxnZXRIZWFkZXJDZWxsU3R5bGU6dyxnZXRIZWFkZXJDZWxsQ2xhc3M6U309ZGQoZSkse2lzR3JvdXA6RSx0b2dnbGVBbGxTZWxlY3Rpb246TSxjb2x1bW5Sb3dzOlR9PXBkKGUpO3JldHVybiBuLnN0YXRlPXtvbkNvbHVtbnNDaGFuZ2U6dSxvblNjcm9sbGFibGVDaGFuZ2U6ZH0sbi5maWx0ZXJQYW5lbHM9cix7Y29sdW1uczppLmNvbHVtbnMsZmlsdGVyUGFuZWxzOnIsaGFzR3V0dGVyOmMsb25Db2x1bW5zQ2hhbmdlOnUsb25TY3JvbGxhYmxlQ2hhbmdlOmQsY29sdW1uUm93czpULGdldEhlYWRlclJvd0NsYXNzOngsZ2V0SGVhZGVyUm93U3R5bGU6QyxnZXRIZWFkZXJDZWxsQ2xhc3M6UyxnZXRIZWFkZXJDZWxsU3R5bGU6dyxoYW5kbGVIZWFkZXJDbGljazpwLGhhbmRsZUhlYWRlckNvbnRleHRNZW51OmgsaGFuZGxlTW91c2VEb3duOm0saGFuZGxlTW91c2VNb3ZlOmYsaGFuZGxlTW91c2VPdXQ6ZyxoYW5kbGVTb3J0Q2xpY2s6YixoYW5kbGVGaWx0ZXJDbGljazp5LGlzR3JvdXA6RSx0b2dnbGVBbGxTZWxlY3Rpb246TX19LHJlbmRlcigpe3JldHVybiBEKFwidGFibGVcIix7Ym9yZGVyOlwiMFwiLGNlbGxwYWRkaW5nOlwiMFwiLGNlbGxzcGFjaW5nOlwiMFwiLGNsYXNzOlwiZWwtdGFibGVfX2hlYWRlclwifSxbdmQodGhpcy5jb2x1bW5zLHRoaXMuaGFzR3V0dGVyKSxEKFwidGhlYWRcIix7Y2xhc3M6e1wiaXMtZ3JvdXBcIjp0aGlzLmlzR3JvdXAsXCJoYXMtZ3V0dGVyXCI6dGhpcy5oYXNHdXR0ZXJ9fSx0aGlzLmNvbHVtblJvd3MubWFwKCgoZSx0KT0+RChcInRyXCIse2NsYXNzOnRoaXMuZ2V0SGVhZGVyUm93Q2xhc3ModCksa2V5OnQsc3R5bGU6dGhpcy5nZXRIZWFkZXJSb3dTdHlsZSh0KX0sZS5tYXAoKChsLGEpPT5EKFwidGhcIix7Y2xhc3M6dGhpcy5nZXRIZWFkZXJDZWxsQ2xhc3ModCxhLGUsbCksY29sc3BhbjpsLmNvbFNwYW4sa2V5OmwuaWQrXCItdGhlYWRcIixyb3dTcGFuOmwucm93U3BhbixzdHlsZTp0aGlzLmdldEhlYWRlckNlbGxTdHlsZSh0LGEsZSxsKSxvbkNsaWNrOmU9PnRoaXMuaGFuZGxlSGVhZGVyQ2xpY2soZSxsKSxvbkNvbnRleHRtZW51OmU9PnRoaXMuaGFuZGxlSGVhZGVyQ29udGV4dE1lbnUoZSxsKSxvbk1vdXNlZG93bjplPT50aGlzLmhhbmRsZU1vdXNlRG93bihlLGwpLG9uTW91c2VNb3ZlOmU9PnRoaXMuaGFuZGxlTW91c2VNb3ZlKGUsbCksb25Nb3VzZW91dDp0aGlzLmhhbmRsZU1vdXNlT3V0fSxbRChcImRpdlwiLHtjbGFzczpbXCJjZWxsXCIsbC5maWx0ZXJlZFZhbHVlJiZsLmZpbHRlcmVkVmFsdWUubGVuZ3RoPjA/XCJoaWdobGlnaHRcIjpcIlwiLGwubGFiZWxDbGFzc05hbWVdfSxbbC5yZW5kZXJIZWFkZXI/bC5yZW5kZXJIZWFkZXIoe2NvbHVtbjpsLCRpbmRleDphLHN0b3JlOnRoaXMuc3RvcmUsX3NlbGY6dGhpcy4kcGFyZW50fSk6bC5sYWJlbCxsLnNvcnRhYmxlJiZEKFwic3BhblwiLHtvbkNsaWNrOmU9PnRoaXMuaGFuZGxlU29ydENsaWNrKGUsbCksY2xhc3M6XCJjYXJldC13cmFwcGVyXCJ9LFtEKFwiaVwiLHtvbkNsaWNrOmU9PnRoaXMuaGFuZGxlU29ydENsaWNrKGUsbCxcImFzY2VuZGluZ1wiKSxjbGFzczpcInNvcnQtY2FyZXQgYXNjZW5kaW5nXCJ9KSxEKFwiaVwiLHtvbkNsaWNrOmU9PnRoaXMuaGFuZGxlU29ydENsaWNrKGUsbCxcImRlc2NlbmRpbmdcIiksY2xhc3M6XCJzb3J0LWNhcmV0IGRlc2NlbmRpbmdcIn0pXSksbC5maWx0ZXJhYmxlJiZEKG5kLHtzdG9yZTp0aGlzLiRwYXJlbnQuc3RvcmUscGxhY2VtZW50OmwuZmlsdGVyUGxhY2VtZW50fHxcImJvdHRvbS1zdGFydFwiLGNvbHVtbjpsLHVwRGF0YUNvbHVtbjooZSx0KT0+e2xbZV09dH19KV0pXSkpKSkpKSldKX19KTtmdW5jdGlvbiBmZChlKXtjb25zdCBsPXYoKS5wYXJlbnQsYT10KCExKSxuPXQoXCJcIiksbz10KEQoXCJkaXZcIikpLGk9KHQsYSxuKT0+e2NvbnN0IG89bCxpPVJ1KHQpO2xldCByO2kmJihyPUt1KHtjb2x1bW5zOmUuc3RvcmUuc3RhdGVzLmNvbHVtbnMudmFsdWV9LGkpLHImJm8uZW1pdChcImNlbGwtXCIrbixhLHIsaSx0KSksby5lbWl0KFwicm93LVwiK24sYSxyLHQpfTtyZXR1cm57aGFuZGxlRG91YmxlQ2xpY2s6KGUsdCk9PntpKGUsdCxcImRibGNsaWNrXCIpfSxoYW5kbGVDbGljazoodCxsKT0+e2Uuc3RvcmUuY29tbWl0KFwic2V0Q3VycmVudFJvd1wiLGwpLGkodCxsLFwiY2xpY2tcIil9LGhhbmRsZUNvbnRleHRNZW51OihlLHQpPT57aShlLHQsXCJjb250ZXh0bWVudVwiKX0saGFuZGxlTW91c2VFbnRlcjpsZSgoZnVuY3Rpb24odCl7ZS5zdG9yZS5jb21taXQoXCJzZXRIb3ZlclJvd1wiLHQpfSksMzApLGhhbmRsZU1vdXNlTGVhdmU6bGUoKGZ1bmN0aW9uKCl7ZS5zdG9yZS5jb21taXQoXCJzZXRIb3ZlclJvd1wiLG51bGwpfSksMzApLGhhbmRsZUNlbGxNb3VzZUVudGVyOih0LGEpPT57Y29uc3Qgbj1sLG89UnUodCk7aWYobyl7Y29uc3QgbD1LdSh7Y29sdW1uczplLnN0b3JlLnN0YXRlcy5jb2x1bW5zLnZhbHVlfSxvKSxpPW4uaG92ZXJTdGF0ZT17Y2VsbDpvLGNvbHVtbjpsLHJvdzphfTtuLmVtaXQoXCJjZWxsLW1vdXNlLWVudGVyXCIsaS5yb3csaS5jb2x1bW4saS5jZWxsLHQpfWNvbnN0IGk9dC50YXJnZXQucXVlcnlTZWxlY3RvcihcIi5jZWxsXCIpO2lmKCFudChpLFwiZWwtdG9vbHRpcFwiKXx8IWkuY2hpbGROb2Rlcy5sZW5ndGgpcmV0dXJuO2NvbnN0IHI9ZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtyLnNldFN0YXJ0KGksMCksci5zZXRFbmQoaSxpLmNoaWxkTm9kZXMubGVuZ3RoKTsoci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCsoKHBhcnNlSW50KHJ0KGksXCJwYWRkaW5nTGVmdFwiKSwxMCl8fDApKyhwYXJzZUludChydChpLFwicGFkZGluZ1JpZ2h0XCIpLDEwKXx8MCkpPmkub2Zmc2V0V2lkdGh8fGkuc2Nyb2xsV2lkdGg+aS5vZmZzZXRXaWR0aCkmJmZ1bmN0aW9uKGUsdCxsKXtmdW5jdGlvbiBhKCl7byYmby51cGRhdGUoKX1mdW5jdGlvbiBuKCl7dHJ5e28mJm8uZGVzdHJveSgpLGkmJmRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoaSksYXQoZSxcIm1vdXNlZW50ZXJcIixhKX1jYXRjaChlKXt9fWF0KGUsXCJtb3VzZWxlYXZlXCIsbik7bGV0IG89bnVsbDtjb25zdCBpPWZ1bmN0aW9uKCl7Y29uc3QgZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO3JldHVybiBlLmNsYXNzTmFtZT1cImVsLXRvb2x0aXBfX3BvcHBlciBpcy1kYXJrXCIsZS5pbm5lckhUTUw9dCxkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGUpLGV9KCkscj1mdW5jdGlvbigpe2NvbnN0IGU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtyZXR1cm4gZS5jbGFzc05hbWU9XCJlbC1wb3BwZXJfX2Fycm93XCIsZS5zdHlsZS5ib3R0b209XCItNHB4XCIsZX0oKTtpLmFwcGVuZENoaWxkKHIpLG89aWUoZSxpLE9iamVjdC5hc3NpZ24oe21vZGlmaWVyczpbe25hbWU6XCJvZmZzZXRcIixvcHRpb25zOntvZmZzZXQ6WzAsOF19fSx7bmFtZTpcImFycm93XCIsb3B0aW9uczp7ZWxlbWVudDpyLHBhZGRpbmc6MTB9fV19LGwpKSxsdChlLFwibW91c2VlbnRlclwiLGEpLGx0KGUsXCJtb3VzZWxlYXZlXCIsbil9KG8sby5pbm5lclRleHR8fG8udGV4dENvbnRlbnQse3BsYWNlbWVudDpcInRvcFwiLHN0cmF0ZWd5OlwiZml4ZWRcIn0pfSxoYW5kbGVDZWxsTW91c2VMZWF2ZTplPT57YS52YWx1ZT0hMTtpZighUnUoZSkpcmV0dXJuO2NvbnN0IHQ9bC5ob3ZlclN0YXRlO2wuZW1pdChcImNlbGwtbW91c2UtbGVhdmVcIixudWxsPT10P3ZvaWQgMDp0LnJvdyxudWxsPT10P3ZvaWQgMDp0LmNvbHVtbixudWxsPT10P3ZvaWQgMDp0LmNlbGwsZSl9LHRvb2x0aXBWaXNpYmxlOmEsdG9vbHRpcENvbnRlbnQ6bix0b29sdGlwVHJpZ2dlcjpvfX1mdW5jdGlvbiBnZChlKXtjb25zdCB0PXYoKS5wYXJlbnQse2hhbmRsZURvdWJsZUNsaWNrOmEsaGFuZGxlQ2xpY2s6bixoYW5kbGVDb250ZXh0TWVudTpvLGhhbmRsZU1vdXNlRW50ZXI6aSxoYW5kbGVNb3VzZUxlYXZlOnIsaGFuZGxlQ2VsbE1vdXNlRW50ZXI6cyxoYW5kbGVDZWxsTW91c2VMZWF2ZTp1LHRvb2x0aXBWaXNpYmxlOmQsdG9vbHRpcENvbnRlbnQ6Yyx0b29sdGlwVHJpZ2dlcjpwfT1mZChlKSx7Z2V0Um93U3R5bGU6aCxnZXRSb3dDbGFzczptLGdldENlbGxTdHlsZTpmLGdldENlbGxDbGFzczpnLGdldFNwYW46YixnZXRDb2xzcGFuUmVhbFdpZHRoOnl9PWZ1bmN0aW9uKGUpe2NvbnN0IHQ9digpLnBhcmVudCxsPXQ9PlwibGVmdFwiPT09ZS5maXhlZD90Pj1lLnN0b3JlLnN0YXRlcy5maXhlZExlYWZDb2x1bW5zTGVuZ3RoLnZhbHVlOlwicmlnaHRcIj09PWUuZml4ZWQ/dDxlLnN0b3JlLnN0YXRlcy5jb2x1bW5zLnZhbHVlLmxlbmd0aC1lLnN0b3JlLnN0YXRlcy5yaWdodEZpeGVkTGVhZkNvbHVtbnNMZW5ndGgudmFsdWU6dDxlLnN0b3JlLnN0YXRlcy5maXhlZExlYWZDb2x1bW5zTGVuZ3RoLnZhbHVlfHx0Pj1lLnN0b3JlLnN0YXRlcy5jb2x1bW5zLnZhbHVlLmxlbmd0aC1lLnN0b3JlLnN0YXRlcy5yaWdodEZpeGVkTGVhZkNvbHVtbnNMZW5ndGgudmFsdWU7cmV0dXJue2dldFJvd1N0eWxlOihlLGwpPT57Y29uc3QgYT10LnByb3BzLnJvd1N0eWxlO3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIGE/YS5jYWxsKG51bGwse3JvdzplLHJvd0luZGV4Omx9KTphfHxudWxsfSxnZXRSb3dDbGFzczoobCxhKT0+e2NvbnN0IG49W1wiZWwtdGFibGVfX3Jvd1wiXTt0LnByb3BzLmhpZ2hsaWdodEN1cnJlbnRSb3cmJmw9PT1lLnN0b3JlLnN0YXRlcy5jdXJyZW50Um93LnZhbHVlJiZuLnB1c2goXCJjdXJyZW50LXJvd1wiKSxlLnN0cmlwZSYmYSUyPT0xJiZuLnB1c2goXCJlbC10YWJsZV9fcm93LS1zdHJpcGVkXCIpO2NvbnN0IG89dC5wcm9wcy5yb3dDbGFzc05hbWU7cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIG8/bi5wdXNoKG8pOlwiZnVuY3Rpb25cIj09dHlwZW9mIG8mJm4ucHVzaChvLmNhbGwobnVsbCx7cm93Omwscm93SW5kZXg6YX0pKSxlLnN0b3JlLnN0YXRlcy5leHBhbmRSb3dzLnZhbHVlLmluZGV4T2YobCk+LTEmJm4ucHVzaChcImV4cGFuZGVkXCIpLG59LGdldENlbGxTdHlsZTooZSxsLGEsbik9Pntjb25zdCBvPXQucHJvcHMuY2VsbFN0eWxlO3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIG8/by5jYWxsKG51bGwse3Jvd0luZGV4OmUsY29sdW1uSW5kZXg6bCxyb3c6YSxjb2x1bW46bn0pOm99LGdldENlbGxDbGFzczooZSxhLG4sbyk9Pntjb25zdCBpPVtvLmlkLG8uYWxpZ24sby5jbGFzc05hbWVdO2woYSkmJmkucHVzaChcImlzLWhpZGRlblwiKTtjb25zdCByPXQucHJvcHMuY2VsbENsYXNzTmFtZTtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2Ygcj9pLnB1c2gocik6XCJmdW5jdGlvblwiPT10eXBlb2YgciYmaS5wdXNoKHIuY2FsbChudWxsLHtyb3dJbmRleDplLGNvbHVtbkluZGV4OmEscm93Om4sY29sdW1uOm99KSksaS5qb2luKFwiIFwiKX0sZ2V0U3BhbjooZSxsLGEsbik9PntsZXQgbz0xLGk9MTtjb25zdCByPXQucHJvcHMuc3Bhbk1ldGhvZDtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiByKXtjb25zdCB0PXIoe3JvdzplLGNvbHVtbjpsLHJvd0luZGV4OmEsY29sdW1uSW5kZXg6bn0pO0FycmF5LmlzQXJyYXkodCk/KG89dFswXSxpPXRbMV0pOlwib2JqZWN0XCI9PXR5cGVvZiB0JiYobz10LnJvd3NwYW4saT10LmNvbHNwYW4pfXJldHVybntyb3dzcGFuOm8sY29sc3BhbjppfX0sZ2V0Q29sc3BhblJlYWxXaWR0aDooZSx0LGwpPT50PDE/ZVtsXS5yZWFsV2lkdGg6ZS5tYXAoKCh7cmVhbFdpZHRoOmV9KT0+ZSkpLnNsaWNlKGwsbCt0KS5yZWR1Y2UoKChlLHQpPT5lK3QpLC0xKSxpc0NvbHVtbkhpZGRlbjpsfX0oZSksaz1sKCgoKT0+e3JldHVybiB0PWUuc3RvcmUuc3RhdGVzLmNvbHVtbnMudmFsdWUsbD0oe3R5cGU6ZX0pPT5cImRlZmF1bHRcIj09PWUsdC5maW5kSW5kZXgobCk7dmFyIHQsbH0pKSxDPShlLGwpPT57Y29uc3QgYT10LnByb3BzLnJvd0tleTtyZXR1cm4gYT9ZdShlLGEpOmx9LHg9KGwsZCxjKT0+e2NvbnN0e2luZGVudDpwLGNvbHVtbnM6dn09ZS5zdG9yZS5zdGF0ZXMseD1tKGwsZCk7bGV0IHc9ITA7YyYmKHgucHVzaChcImVsLXRhYmxlX19yb3ctLWxldmVsLVwiK2MubGV2ZWwpLHc9Yy5kaXNwbGF5KTtyZXR1cm4gRChcInRyXCIse3N0eWxlOlt3P251bGw6e2Rpc3BsYXk6XCJub25lXCJ9LGgobCxkKV0sY2xhc3M6eCxrZXk6QyhsLGQpLG9uRGJsY2xpY2s6ZT0+YShlLGwpLG9uQ2xpY2s6ZT0+bihlLGwpLG9uQ29udGV4dG1lbnU6ZT0+byhlLGwpLG9uTW91c2VlbnRlcjooKT0+aShkKSxvbk1vdXNlbGVhdmU6cn0sdi52YWx1ZS5tYXAoKChhLG4pPT57Y29uc3R7cm93c3BhbjpvLGNvbHNwYW46aX09YihsLGEsZCxuKTtpZighb3x8IWkpcmV0dXJuIG51bGw7Y29uc3Qgcj1PYmplY3QuYXNzaWduKHt9LGEpO3IucmVhbFdpZHRoPXkodi52YWx1ZSxpLG4pO2NvbnN0IGg9e3N0b3JlOmUuc3RvcmUsX3NlbGY6ZS5jb250ZXh0fHx0LGNvbHVtbjpyLHJvdzpsLCRpbmRleDpkfTtyZXR1cm4gbj09PWsudmFsdWUmJmMmJihoLnRyZWVOb2RlPXtpbmRlbnQ6Yy5sZXZlbCpwLnZhbHVlLGxldmVsOmMubGV2ZWx9LFwiYm9vbGVhblwiPT10eXBlb2YgYy5leHBhbmRlZCYmKGgudHJlZU5vZGUuZXhwYW5kZWQ9Yy5leHBhbmRlZCxcImxvYWRpbmdcImluIGMmJihoLnRyZWVOb2RlLmxvYWRpbmc9Yy5sb2FkaW5nKSxcIm5vTGF6eUNoaWxkcmVuXCJpbiBjJiYoaC50cmVlTm9kZS5ub0xhenlDaGlsZHJlbj1jLm5vTGF6eUNoaWxkcmVuKSkpLEQoXCJ0ZFwiLHtzdHlsZTpmKGQsbixsLGEpLGNsYXNzOmcoZCxuLGwsYSkscm93c3BhbjpvLGNvbHNwYW46aSxvbk1vdXNlZW50ZXI6ZT0+cyhlLGwpLG9uTW91c2VsZWF2ZTp1fSxbYS5yZW5kZXJDZWxsKGgpXSl9KSkpfTtyZXR1cm57d3JhcHBlZFJvd1JlbmRlcjoobCxhKT0+e2NvbnN0IG49ZS5zdG9yZSx7aXNSb3dFeHBhbmRlZDpvLGFzc2VydFJvd0tleTppfT1uLHt0cmVlRGF0YTpyLGxhenlUcmVlTm9kZU1hcDpzLGNoaWxkcmVuQ29sdW1uTmFtZTp1LHJvd0tleTpkfT1uLnN0YXRlcztpZihuLnN0YXRlcy5jb2x1bW5zLnZhbHVlLnNvbWUoKCh7dHlwZTplfSk9PlwiZXhwYW5kXCI9PT1lKSkmJm8obCkpe2NvbnN0IGU9dC5yZW5kZXJFeHBhbmRlZCxvPXgobCxhLHZvaWQgMCk7cmV0dXJuIGU/W1tvLEQoXCJ0clwiLHtrZXk6XCJleHBhbmRlZC1yb3dfX1wiK28ua2V5fSxbRChcInRkXCIse2NvbHNwYW46bi5zdGF0ZXMuY29sdW1ucy52YWx1ZS5sZW5ndGgsY2xhc3M6XCJlbC10YWJsZV9fZXhwYW5kZWQtY2VsbFwifSxbZSh7cm93OmwsJGluZGV4OmEsc3RvcmU6bn0pXSldKV1dOihjb25zb2xlLmVycm9yKFwiW0VsZW1lbnQgRXJyb3JdcmVuZGVyRXhwYW5kZWQgaXMgcmVxdWlyZWQuXCIpLG8pfWlmKE9iamVjdC5rZXlzKHIudmFsdWUpLmxlbmd0aCl7aSgpO2NvbnN0IGU9WXUobCxkLnZhbHVlKTtsZXQgdD1yLnZhbHVlW2VdLG49bnVsbDt0JiYobj17ZXhwYW5kZWQ6dC5leHBhbmRlZCxsZXZlbDp0LmxldmVsLGRpc3BsYXk6ITB9LFwiYm9vbGVhblwiPT10eXBlb2YgdC5sYXp5JiYoXCJib29sZWFuXCI9PXR5cGVvZiB0LmxvYWRlZCYmdC5sb2FkZWQmJihuLm5vTGF6eUNoaWxkcmVuPSEodC5jaGlsZHJlbiYmdC5jaGlsZHJlbi5sZW5ndGgpKSxuLmxvYWRpbmc9dC5sb2FkaW5nKSk7Y29uc3Qgbz1beChsLGEsbildO2lmKHQpe2xldCBuPTA7Y29uc3QgaT0oZSxsKT0+e2UmJmUubGVuZ3RoJiZsJiZlLmZvckVhY2goKGU9Pntjb25zdCBjPXtkaXNwbGF5OmwuZGlzcGxheSYmbC5leHBhbmRlZCxsZXZlbDpsLmxldmVsKzEsZXhwYW5kZWQ6ITEsbm9MYXp5Q2hpbGRyZW46ITEsbG9hZGluZzohMX0scD1ZdShlLGQudmFsdWUpO2lmKG51bGw9PXApdGhyb3cgbmV3IEVycm9yKFwiZm9yIG5lc3RlZCBkYXRhIGl0ZW0sIHJvdy1rZXkgaXMgcmVxdWlyZWQuXCIpO2lmKHQ9T2JqZWN0LmFzc2lnbih7fSxyLnZhbHVlW3BdKSx0JiYoYy5leHBhbmRlZD10LmV4cGFuZGVkLHQubGV2ZWw9dC5sZXZlbHx8Yy5sZXZlbCx0LmRpc3BsYXk9ISghdC5leHBhbmRlZHx8IWMuZGlzcGxheSksXCJib29sZWFuXCI9PXR5cGVvZiB0LmxhenkmJihcImJvb2xlYW5cIj09dHlwZW9mIHQubG9hZGVkJiZ0LmxvYWRlZCYmKGMubm9MYXp5Q2hpbGRyZW49ISh0LmNoaWxkcmVuJiZ0LmNoaWxkcmVuLmxlbmd0aCkpLGMubG9hZGluZz10LmxvYWRpbmcpKSxuKyssby5wdXNoKHgoZSxhK24sYykpLHQpe2NvbnN0IGw9cy52YWx1ZVtwXXx8ZVt1LnZhbHVlXTtpKGwsdCl9fSkpfTt0LmRpc3BsYXk9ITA7Y29uc3QgYz1zLnZhbHVlW2VdfHxsW3UudmFsdWVdO2koYyx0KX1yZXR1cm4gb31yZXR1cm4geChsLGEsdm9pZCAwKX0sdG9vbHRpcFZpc2libGU6ZCx0b29sdGlwQ29udGVudDpjLHRvb2x0aXBUcmlnZ2VyOnB9fXZhciBiZD1lKHtuYW1lOlwiRWxUYWJsZUJvZHlcIixwcm9wczp7c3RvcmU6e3JlcXVpcmVkOiEwLHR5cGU6T2JqZWN0fSxzdHJpcGU6Qm9vbGVhbixjb250ZXh0OntkZWZhdWx0OigpPT4oe30pLHR5cGU6T2JqZWN0fSxyb3dDbGFzc05hbWU6W1N0cmluZyxGdW5jdGlvbl0scm93U3R5bGU6W09iamVjdCxGdW5jdGlvbl0sZml4ZWQ6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJcIn0saGlnaGxpZ2h0OkJvb2xlYW59LHNldHVwKGUpe2NvbnN0IHQ9digpLGw9dC5wYXJlbnQse3dyYXBwZWRSb3dSZW5kZXI6YSx0b29sdGlwVmlzaWJsZTpuLHRvb2x0aXBDb250ZW50Om8sdG9vbHRpcFRyaWdnZXI6aX09Z2QoZSkse29uQ29sdW1uc0NoYW5nZTpyLG9uU2Nyb2xsYWJsZUNoYW5nZTpzfT11ZChsKTtyZXR1cm4geShlLnN0b3JlLnN0YXRlcy5ob3ZlclJvdywoKGwsYSk9PntpZighZS5zdG9yZS5zdGF0ZXMuaXNDb21wbGV4LnZhbHVlfHx6ZSlyZXR1cm47bGV0IG49d2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZTtufHwobj1lPT53aW5kb3cuc2V0VGltZW91dChlLDE2KSksbigoKCk9Pntjb25zdCBlPXQudm5vZGUuZWwucXVlcnlTZWxlY3RvckFsbChcIi5lbC10YWJsZV9fcm93XCIpLG49ZVthXSxvPWVbbF07biYmaXQobixcImhvdmVyLXJvd1wiKSxvJiZvdChvLFwiaG92ZXItcm93XCIpfSkpfSkpLHtvbkNvbHVtbnNDaGFuZ2U6cixvblNjcm9sbGFibGVDaGFuZ2U6cyx3cmFwcGVkUm93UmVuZGVyOmEsdG9vbHRpcFZpc2libGU6bix0b29sdGlwQ29udGVudDpvLHRvb2x0aXBUcmlnZ2VyOml9fSxyZW5kZXIoKXtjb25zdCBlPXRoaXMuc3RvcmUuc3RhdGVzLmRhdGEudmFsdWV8fFtdO3JldHVybiBEKFwidGFibGVcIix7Y2xhc3M6XCJlbC10YWJsZV9fYm9keVwiLGNlbGxzcGFjaW5nOlwiMFwiLGNlbGxwYWRkaW5nOlwiMFwiLGJvcmRlcjpcIjBcIn0sW3ZkKHRoaXMuc3RvcmUuc3RhdGVzLmNvbHVtbnMudmFsdWUpLEQoXCJ0Ym9keVwiLHt9LFtlLnJlZHVjZSgoKGUsdCk9PmUuY29uY2F0KHRoaXMud3JhcHBlZFJvd1JlbmRlcih0LGUubGVuZ3RoKSkpLFtdKV0pXSl9fSk7ZnVuY3Rpb24geWQoZSl7Y29uc3QgdD12KCkucGFyZW50LGE9dC5zdG9yZSx7bGVmdEZpeGVkTGVhZkNvdW50Om4scmlnaHRGaXhlZExlYWZDb3VudDpvLGNvbHVtbnNDb3VudDppLGxlZnRGaXhlZENvdW50OnIscmlnaHRGaXhlZENvdW50OnMsY29sdW1uczp1fT1mdW5jdGlvbigpe2NvbnN0IGU9digpLnBhcmVudC5zdG9yZTtyZXR1cm57bGVmdEZpeGVkTGVhZkNvdW50OmwoKCgpPT5lLnN0YXRlcy5maXhlZExlYWZDb2x1bW5zTGVuZ3RoLnZhbHVlKSkscmlnaHRGaXhlZExlYWZDb3VudDpsKCgoKT0+ZS5zdGF0ZXMucmlnaHRGaXhlZENvbHVtbnMudmFsdWUubGVuZ3RoKSksY29sdW1uc0NvdW50OmwoKCgpPT5lLnN0YXRlcy5jb2x1bW5zLnZhbHVlLmxlbmd0aCkpLGxlZnRGaXhlZENvdW50OmwoKCgpPT5lLnN0YXRlcy5maXhlZENvbHVtbnMudmFsdWUubGVuZ3RoKSkscmlnaHRGaXhlZENvdW50OmwoKCgpPT5lLnN0YXRlcy5yaWdodEZpeGVkQ29sdW1ucy52YWx1ZS5sZW5ndGgpKSxjb2x1bW5zOmUuc3RhdGVzLmNvbHVtbnN9fSgpLGQ9bCgoKCk9PiFlLmZpeGVkJiZ0LmxheW91dC5ndXR0ZXJXaWR0aCkpO3JldHVybntoYXNHdXR0ZXI6ZCxnZXRSb3dDbGFzc2VzOih0LGwpPT57Y29uc3QgdT1bdC5pZCx0LmFsaWduLHQubGFiZWxDbGFzc05hbWVdO3JldHVybiB0LmNsYXNzTmFtZSYmdS5wdXNoKHQuY2xhc3NOYW1lKSwoKHQsbCxhKT0+e2lmKGUuZml4ZWR8fFwibGVmdFwiPT09ZS5maXhlZClyZXR1cm4gdD49bi52YWx1ZTtpZihcInJpZ2h0XCI9PT1lLmZpeGVkKXtsZXQgZT0wO2ZvcihsZXQgYT0wO2E8dDthKyspZSs9bFthXS5jb2xTcGFuO3JldHVybiBlPGkudmFsdWUtby52YWx1ZX1yZXR1cm4hKGUuZml4ZWR8fCFhLmZpeGVkKXx8dDxyLnZhbHVlfHx0Pj1pLnZhbHVlLXMudmFsdWV9KShsLGEuc3RhdGVzLmNvbHVtbnMudmFsdWUsdCkmJnUucHVzaChcImlzLWhpZGRlblwiKSx0LmNoaWxkcmVufHx1LnB1c2goXCJpcy1sZWFmXCIpLHV9LGNvbHVtbnM6dX19dmFyIGtkPWUoe25hbWU6XCJFbFRhYmxlRm9vdGVyXCIscHJvcHM6e2ZpeGVkOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiXCJ9LHN0b3JlOntyZXF1aXJlZDohMCx0eXBlOk9iamVjdH0sc3VtbWFyeU1ldGhvZDpGdW5jdGlvbixzdW1UZXh0OlN0cmluZyxib3JkZXI6Qm9vbGVhbixkZWZhdWx0U29ydDp7dHlwZTpPYmplY3QsZGVmYXVsdDooKT0+KHtwcm9wOlwiXCIsb3JkZXI6XCJcIn0pfX0sc2V0dXAoZSl7Y29uc3R7aGFzR3V0dGVyOnQsZ2V0Um93Q2xhc3NlczpsLGNvbHVtbnM6YX09eWQoZSk7cmV0dXJue2dldFJvd0NsYXNzZXM6bCxoYXNHdXR0ZXI6dCxjb2x1bW5zOmF9fSxyZW5kZXIoKXtsZXQgZT1bXTtyZXR1cm4gdGhpcy5zdW1tYXJ5TWV0aG9kP2U9dGhpcy5zdW1tYXJ5TWV0aG9kKHtjb2x1bW5zOnRoaXMuY29sdW1ucyxkYXRhOnRoaXMuc3RvcmUuc3RhdGVzLmRhdGEudmFsdWV9KTp0aGlzLmNvbHVtbnMuZm9yRWFjaCgoKHQsbCk9PntpZigwPT09bClyZXR1cm4gdm9pZChlW2xdPXRoaXMuc3VtVGV4dCk7Y29uc3QgYT10aGlzLnN0b3JlLnN0YXRlcy5kYXRhLnZhbHVlLm1hcCgoZT0+TnVtYmVyKGVbdC5wcm9wZXJ0eV0pKSksbj1bXTtsZXQgbz0hMDthLmZvckVhY2goKGU9PntpZighaXNOYU4oZSkpe289ITE7Y29uc3QgdD0oXCJcIitlKS5zcGxpdChcIi5cIilbMV07bi5wdXNoKHQ/dC5sZW5ndGg6MCl9fSkpO2NvbnN0IGk9TWF0aC5tYXguYXBwbHkobnVsbCxuKTtlW2xdPW8/XCJcIjphLnJlZHVjZSgoKGUsdCk9Pntjb25zdCBsPU51bWJlcih0KTtyZXR1cm4gaXNOYU4obCk/ZTpwYXJzZUZsb2F0KChlK3QpLnRvRml4ZWQoTWF0aC5taW4oaSwyMCkpKX0pLDApfSkpLEQoXCJ0YWJsZVwiLHtjbGFzczpcImVsLXRhYmxlX19mb290ZXJcIixjZWxsc3BhY2luZzpcIjBcIixjZWxscGFkZGluZzpcIjBcIixib3JkZXI6XCIwXCJ9LFt2ZCh0aGlzLmNvbHVtbnMsdGhpcy5oYXNHdXR0ZXIpLEQoXCJ0Ym9keVwiLHtjbGFzczpbe1wiaGFzLWd1dHRlclwiOnRoaXMuaGFzR3V0dGVyfV19LFtEKFwidHJcIix7fSxbLi4udGhpcy5jb2x1bW5zLm1hcCgoKHQsbCk9PkQoXCJ0ZFwiLHtrZXk6bCxjb2xzcGFuOnQuY29sU3Bhbixyb3dzcGFuOnQucm93U3BhbixjbGFzczp0aGlzLmdldFJvd0NsYXNzZXModCxsKX0sW0QoXCJkaXZcIix7Y2xhc3M6W1wiY2VsbFwiLHQubGFiZWxDbGFzc05hbWVdfSxbZVtsXV0pXSkpKSx0aGlzLmhhc0d1dHRlciYmaGQoKV0pXSldKX19KTtsZXQgQ2Q9MTt2YXIgeGQ9ZSh7bmFtZTpcIkVsVGFibGVcIixkaXJlY3RpdmVzOntNb3VzZXdoZWVsOk90fSxjb21wb25lbnRzOntUYWJsZUhlYWRlcjptZCxUYWJsZUJvZHk6YmQsVGFibGVGb290ZXI6a2R9LHByb3BzOntkYXRhOnt0eXBlOkFycmF5LGRlZmF1bHQ6ZnVuY3Rpb24oKXtyZXR1cm5bXX19LHNpemU6U3RyaW5nLHdpZHRoOltTdHJpbmcsTnVtYmVyXSxoZWlnaHQ6W1N0cmluZyxOdW1iZXJdLG1heEhlaWdodDpbU3RyaW5nLE51bWJlcl0sZml0Ont0eXBlOkJvb2xlYW4sZGVmYXVsdDohMH0sc3RyaXBlOkJvb2xlYW4sYm9yZGVyOkJvb2xlYW4scm93S2V5OltTdHJpbmcsRnVuY3Rpb25dLHNob3dIZWFkZXI6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiEwfSxzaG93U3VtbWFyeTpCb29sZWFuLHN1bVRleHQ6U3RyaW5nLHN1bW1hcnlNZXRob2Q6RnVuY3Rpb24scm93Q2xhc3NOYW1lOltTdHJpbmcsRnVuY3Rpb25dLHJvd1N0eWxlOltPYmplY3QsRnVuY3Rpb25dLGNlbGxDbGFzc05hbWU6W1N0cmluZyxGdW5jdGlvbl0sY2VsbFN0eWxlOltPYmplY3QsRnVuY3Rpb25dLGhlYWRlclJvd0NsYXNzTmFtZTpbU3RyaW5nLEZ1bmN0aW9uXSxoZWFkZXJSb3dTdHlsZTpbT2JqZWN0LEZ1bmN0aW9uXSxoZWFkZXJDZWxsQ2xhc3NOYW1lOltTdHJpbmcsRnVuY3Rpb25dLGhlYWRlckNlbGxTdHlsZTpbT2JqZWN0LEZ1bmN0aW9uXSxoaWdobGlnaHRDdXJyZW50Um93OkJvb2xlYW4sY3VycmVudFJvd0tleTpbU3RyaW5nLE51bWJlcl0sZW1wdHlUZXh0OlN0cmluZyxleHBhbmRSb3dLZXlzOkFycmF5LGRlZmF1bHRFeHBhbmRBbGw6Qm9vbGVhbixkZWZhdWx0U29ydDpPYmplY3QsdG9vbHRpcEVmZmVjdDpTdHJpbmcsc3Bhbk1ldGhvZDpGdW5jdGlvbixzZWxlY3RPbkluZGV0ZXJtaW5hdGU6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiEwfSxpbmRlbnQ6e3R5cGU6TnVtYmVyLGRlZmF1bHQ6MTZ9LHRyZWVQcm9wczp7dHlwZTpPYmplY3QsZGVmYXVsdDooKT0+KHtoYXNDaGlsZHJlbjpcImhhc0NoaWxkcmVuXCIsY2hpbGRyZW46XCJjaGlsZHJlblwifSl9LGxhenk6Qm9vbGVhbixsb2FkOkZ1bmN0aW9ufSxlbWl0czpbXCJzZWxlY3RcIixcInNlbGVjdC1hbGxcIixcInNlbGVjdGlvbi1jaGFuZ2VcIixcImNlbGwtbW91c2UtZW50ZXJcIixcImNlbGwtbW91c2UtbGVhdmVcIixcImNlbGwtY2xpY2tcIixcImNlbGwtZGJsY2xpY2tcIixcInJvdy1jbGlja1wiLFwicm93LWNvbnRleHRtZW51XCIsXCJyb3ctZGJsY2xpY2tcIixcImhlYWRlci1jbGlja1wiLFwiaGVhZGVyLWNvbnRleHRtZW51XCIsXCJzb3J0LWNoYW5nZVwiLFwiZmlsdGVyLWNoYW5nZVwiLFwiY3VycmVudC1jaGFuZ2VcIixcImhlYWRlci1kcmFnZW5kXCIsXCJleHBhbmQtY2hhbmdlXCJdLHNldHVwKGUpe2xldCBhPXYoKTtjb25zdCBuPWxkKGEse3Jvd0tleTplLnJvd0tleSxkZWZhdWx0RXhwYW5kQWxsOmUuZGVmYXVsdEV4cGFuZEFsbCxzZWxlY3RPbkluZGV0ZXJtaW5hdGU6ZS5zZWxlY3RPbkluZGV0ZXJtaW5hdGUsaW5kZW50OmUuaW5kZW50LGxhenk6ZS5sYXp5LGxhenlDb2x1bW5JZGVudGlmaWVyOmUudHJlZVByb3BzLmhhc0NoaWxkcmVufHxcImhhc0NoaWxkcmVuXCIsY2hpbGRyZW5Db2x1bW5OYW1lOmUudHJlZVByb3BzLmNoaWxkcmVufHxcImNoaWxkcmVuXCIsZGF0YTplLmRhdGF9KTthLnN0b3JlPW47Y29uc3Qgbz1uZXcgYWQoe3N0b3JlOmEuc3RvcmUsdGFibGU6YSxmaXQ6ZS5maXQsc2hvd0hlYWRlcjplLnNob3dIZWFkZXJ9KTthLmxheW91dD1vO2NvbnN0IGk9bCgoKCk9PmUuaGVpZ2h0fHxlLm1heEhlaWdodHx8bi5zdGF0ZXMuZml4ZWRDb2x1bW5zLnZhbHVlLmxlbmd0aD4wfHxuLnN0YXRlcy5yaWdodEZpeGVkQ29sdW1ucy52YWx1ZS5sZW5ndGg+MCkpLHtzZXRDdXJyZW50Um93OnIsdG9nZ2xlUm93U2VsZWN0aW9uOnMsY2xlYXJTZWxlY3Rpb246dSxjbGVhckZpbHRlcjpkLHRvZ2dsZUFsbFNlbGVjdGlvbjpjLHRvZ2dsZVJvd0V4cGFuc2lvbjpwLGNsZWFyU29ydDpoLGRvTGF5b3V0Om0sc29ydDpmfT1mdW5jdGlvbihlLHQsbCl7cmV0dXJue3NldEN1cnJlbnRSb3c6dD0+e2UuY29tbWl0KFwic2V0Q3VycmVudFJvd1wiLHQpfSx0b2dnbGVSb3dTZWxlY3Rpb246KHQsbCk9PntlLnRvZ2dsZVJvd1NlbGVjdGlvbih0LGwsITEpLGUudXBkYXRlQWxsU2VsZWN0ZWQoKX0sY2xlYXJTZWxlY3Rpb246KCk9PntlLmNsZWFyU2VsZWN0aW9uKCl9LGNsZWFyRmlsdGVyOnQ9PntlLmNsZWFyRmlsdGVyKHQpfSx0b2dnbGVBbGxTZWxlY3Rpb246KCk9PntlLmNvbW1pdChcInRvZ2dsZUFsbFNlbGVjdGlvblwiKX0sdG9nZ2xlUm93RXhwYW5zaW9uOih0LGwpPT57ZS50b2dnbGVSb3dFeHBhbnNpb25BZGFwdGVyKHQsbCl9LGNsZWFyU29ydDooKT0+e2UuY2xlYXJTb3J0KCl9LGRvTGF5b3V0OigpPT57bC52YWx1ZSYmdC51cGRhdGVFbHNIZWlnaHQoKSx0LnVwZGF0ZUNvbHVtbnNXaWR0aCgpfSxzb3J0Oih0LGwpPT57ZS5jb21taXQoXCJzb3J0XCIse3Byb3A6dCxvcmRlcjpsfSl9fX0obixvLGkpLHtpc0hpZGRlbjpiLHJlbmRlckV4cGFuZGVkOmssc2V0RHJhZ1Zpc2libGU6Qyxpc0dyb3VwOngsaGFuZGxlTW91c2VMZWF2ZTp3LGhhbmRsZUhlYWRlckZvb3Rlck1vdXNld2hlZWw6Uyx0YWJsZVNpemU6RSxib2R5SGVpZ2h0Ok0sZW1wdHlCbG9ja1N0eWxlOlQsaGFuZGxlRml4ZWRNb3VzZXdoZWVsOkQsZml4ZWRIZWlnaHQ6TyxmaXhlZEJvZHlIZWlnaHQ6UCxyZXNpemVQcm94eVZpc2libGU6Vixib2R5V2lkdGg6SSxyZXNpemVTdGF0ZTpBLHNjcm9sbFBvc2l0aW9uOkJ9PWZ1bmN0aW9uKGUsYSxuLG8saSl7Y29uc3Qgcj10KCExKSxzPXQobnVsbCksdT10KCExKSxkPXQoe3dpZHRoOm51bGwsaGVpZ2h0Om51bGx9KSxjPXQoITEpLHA9dChcImxlZnRcIik7ZygoKCk9PnthLnNldEhlaWdodChlLmhlaWdodCl9KSksZygoKCk9PnthLnNldE1heEhlaWdodChlLm1heEhlaWdodCl9KSksZygoKCk9PntuLnN0YXRlcy5yb3dLZXkudmFsdWUmJm4uc2V0Q3VycmVudFJvd0tleShlLmN1cnJlbnRSb3dLZXkpfSkpLHkoKCgpPT5lLmRhdGEpLCgoKT0+e28uc3RvcmUuY29tbWl0KFwic2V0RGF0YVwiLGUuZGF0YSl9KSx7aW1tZWRpYXRlOiEwfSksZygoKCk9PntlLmV4cGFuZFJvd0tleXMmJm4uc2V0RXhwYW5kUm93S2V5c0FkYXB0ZXIoZS5leHBhbmRSb3dLZXlzKX0pKTtjb25zdCBoPWwoKCgpPT5lLmhlaWdodHx8ZS5tYXhIZWlnaHR8fG4uc3RhdGVzLmZpeGVkQ29sdW1ucy52YWx1ZS5sZW5ndGg+MHx8bi5zdGF0ZXMucmlnaHRGaXhlZENvbHVtbnMudmFsdWUubGVuZ3RoPjApKTtfKCgoKT0+e20oKSxuLnVwZGF0ZUNvbHVtbnMoKSxpKCksZC52YWx1ZT17d2lkdGg6by52bm9kZS5lbC5vZmZzZXRXaWR0aCxoZWlnaHQ6by52bm9kZS5lbC5vZmZzZXRIZWlnaHR9LG4uc3RhdGVzLmNvbHVtbnMudmFsdWUuZm9yRWFjaCgoZT0+e2UuZmlsdGVyZWRWYWx1ZSYmZS5maWx0ZXJlZFZhbHVlLmxlbmd0aCYmby5zdG9yZS5jb21taXQoXCJmaWx0ZXJDaGFuZ2VcIix7Y29sdW1uOmUsdmFsdWVzOmUuZmlsdGVyZWRWYWx1ZSxzaWxlbnQ6ITB9KX0pKSxvLiRyZWFkeT0hMH0pKTtjb25zdCB2PXJlKChmdW5jdGlvbigpe2NvbnN0e3Njcm9sbExlZnQ6ZSxzY3JvbGxUb3A6dCxvZmZzZXRXaWR0aDpsLHNjcm9sbFdpZHRoOmF9PW8ucmVmcy5ib2R5V3JhcHBlcix7aGVhZGVyV3JhcHBlcjpuLGZvb3RlcldyYXBwZXI6aSxmaXhlZEJvZHlXcmFwcGVyOnIscmlnaHRGaXhlZEJvZHlXcmFwcGVyOnN9PW8ucmVmcztuJiYobi5zY3JvbGxMZWZ0PWUpLGkmJihpLnNjcm9sbExlZnQ9ZSksciYmKHIuc2Nyb2xsVG9wPXQpLHMmJihzLnNjcm9sbFRvcD10KTtjb25zdCB1PWEtbC0xO3AudmFsdWU9ZT49dT9cInJpZ2h0XCI6MD09PWU/XCJsZWZ0XCI6XCJtaWRkbGVcIn0pLDEwKSxtPSgpPT57by5yZWZzLmJvZHlXcmFwcGVyLmFkZEV2ZW50TGlzdGVuZXIoXCJzY3JvbGxcIix2LHtwYXNzaXZlOiEwfSksZS5maXQmJkp0KG8udm5vZGUuZWwsYil9O04oKCgpPT57ZigpfSkpO2NvbnN0IGY9KCk9Pnt2YXIgdDtudWxsPT09KHQ9by5yZWZzLmJvZHlXcmFwcGVyKXx8dm9pZCAwPT09dHx8dC5yZW1vdmVFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsdiwhMCksZS5maXQmJmVsKG8udm5vZGUuZWwsYil9LGI9KCk9PntpZighby4kcmVhZHkpcmV0dXJuO2xldCB0PSExO2NvbnN0IGw9by52bm9kZS5lbCx7d2lkdGg6YSxoZWlnaHQ6bn09ZC52YWx1ZSxyPWwub2Zmc2V0V2lkdGg7YSE9PXImJih0PSEwKTtjb25zdCBzPWwub2Zmc2V0SGVpZ2h0OyhlLmhlaWdodHx8aC52YWx1ZSkmJm4hPT1zJiYodD0hMCksdCYmKGQudmFsdWU9e3dpZHRoOnIsaGVpZ2h0OnN9LGkoKSl9LGs9bCgoKCk9PmUuc2l6ZSkpLEM9bCgoKCk9Pntjb25zdHtib2R5V2lkdGg6ZSxzY3JvbGxZOnQsZ3V0dGVyV2lkdGg6bH09YTtyZXR1cm4gZS52YWx1ZT9lLnZhbHVlLSh0LnZhbHVlP2w6MCkrXCJweFwiOlwiXCJ9KSk7cmV0dXJue2lzSGlkZGVuOnIscmVuZGVyRXhwYW5kZWQ6cyxzZXREcmFnVmlzaWJsZTplPT57dS52YWx1ZT1lfSxpc0dyb3VwOmMsaGFuZGxlTW91c2VMZWF2ZTooKT0+e28uc3RvcmUuY29tbWl0KFwic2V0SG92ZXJSb3dcIixudWxsKSxvLmhvdmVyU3RhdGUmJihvLmhvdmVyU3RhdGU9bnVsbCl9LGhhbmRsZUhlYWRlckZvb3Rlck1vdXNld2hlZWw6KGUsdCk9Pntjb25zdHtwaXhlbFg6bCxwaXhlbFk6YX09dDtNYXRoLmFicyhsKT49TWF0aC5hYnMoYSkmJihvLnJlZnMuYm9keVdyYXBwZXIuc2Nyb2xsTGVmdCs9dC5waXhlbFgvNSl9LHRhYmxlU2l6ZTprLGJvZHlIZWlnaHQ6bCgoKCk9Pntjb25zdCB0PWEuaGVhZGVySGVpZ2h0LnZhbHVlfHwwLGw9YS5ib2R5SGVpZ2h0LnZhbHVlLG49YS5mb290ZXJIZWlnaHQudmFsdWV8fDA7aWYoZS5oZWlnaHQpcmV0dXJue2hlaWdodDpsP2wrXCJweFwiOlwiXCJ9O2lmKGUubWF4SGVpZ2h0KXtjb25zdCBsPVh1KGUubWF4SGVpZ2h0KTtpZihcIm51bWJlclwiPT10eXBlb2YgbClyZXR1cm57XCJtYXgtaGVpZ2h0XCI6bC1uLShlLnNob3dIZWFkZXI/dDowKStcInB4XCJ9fXJldHVybnt9fSkpLGVtcHR5QmxvY2tTdHlsZTpsKCgoKT0+e2lmKGUuZGF0YSYmZS5kYXRhLmxlbmd0aClyZXR1cm4gbnVsbDtsZXQgdD1cIjEwMCVcIjtyZXR1cm4gYS5hcHBlbmRIZWlnaHQudmFsdWUmJih0PWBjYWxjKDEwMCUgLSAke2EuYXBwZW5kSGVpZ2h0LnZhbHVlfXB4KWApLHt3aWR0aDpDLnZhbHVlLGhlaWdodDp0fX0pKSxoYW5kbGVGaXhlZE1vdXNld2hlZWw6KGUsdCk9Pntjb25zdCBsPW8ucmVmcy5ib2R5V3JhcHBlcjtpZihNYXRoLmFicyh0LnNwaW5ZKT4wKXtjb25zdCBhPWwuc2Nyb2xsVG9wO3QucGl4ZWxZPDAmJjAhPT1hJiZlLnByZXZlbnREZWZhdWx0KCksdC5waXhlbFk+MCYmbC5zY3JvbGxIZWlnaHQtbC5jbGllbnRIZWlnaHQ+YSYmZS5wcmV2ZW50RGVmYXVsdCgpLGwuc2Nyb2xsVG9wKz1NYXRoLmNlaWwodC5waXhlbFkvNSl9ZWxzZSBsLnNjcm9sbExlZnQrPU1hdGguY2VpbCh0LnBpeGVsWC81KX0sZml4ZWRIZWlnaHQ6bCgoKCk9PmUubWF4SGVpZ2h0P2Uuc2hvd1N1bW1hcnk/e2JvdHRvbTowfTp7Ym90dG9tOmEuc2Nyb2xsWC52YWx1ZSYmZS5kYXRhLmxlbmd0aD9hLmd1dHRlcldpZHRoK1wicHhcIjpcIlwifTplLnNob3dTdW1tYXJ5P3toZWlnaHQ6YS50YWJsZUhlaWdodC52YWx1ZT9hLnRhYmxlSGVpZ2h0LnZhbHVlK1wicHhcIjpcIlwifTp7aGVpZ2h0OmEudmlld3BvcnRIZWlnaHQudmFsdWU/YS52aWV3cG9ydEhlaWdodC52YWx1ZStcInB4XCI6XCJcIn0pKSxmaXhlZEJvZHlIZWlnaHQ6bCgoKCk9PntpZihlLmhlaWdodClyZXR1cm57aGVpZ2h0OmEuZml4ZWRCb2R5SGVpZ2h0LnZhbHVlP2EuZml4ZWRCb2R5SGVpZ2h0LnZhbHVlK1wicHhcIjpcIlwifTtpZihlLm1heEhlaWdodCl7bGV0IHQ9WHUoZS5tYXhIZWlnaHQpO2lmKFwibnVtYmVyXCI9PXR5cGVvZiB0KXJldHVybiB0PWEuc2Nyb2xsWC52YWx1ZT90LWEuZ3V0dGVyV2lkdGg6dCxlLnNob3dIZWFkZXImJih0LT1hLmhlYWRlckhlaWdodC52YWx1ZSksdC09YS5mb290ZXJIZWlnaHQudmFsdWUse1wibWF4LWhlaWdodFwiOnQrXCJweFwifX1yZXR1cm57fX0pKSxyZXNpemVQcm94eVZpc2libGU6dSxib2R5V2lkdGg6QyxyZXNpemVTdGF0ZTpkLHNjcm9sbFBvc2l0aW9uOnB9fShlLG8sbixhLG0pLEw9bGUoKCgpPT5tKCkpLDUwKSx6PVwiZWwtdGFibGVfXCIrQ2QrKztyZXR1cm4gYS50YWJsZUlkPXosYS5zdGF0ZT17aXNHcm91cDp4LHJlc2l6ZVN0YXRlOkEsZG9MYXlvdXQ6bSxkZWJvdW5jZWRVcGRhdGVMYXlvdXQ6TH0se2xheW91dDpvLHN0b3JlOm4saGFuZGxlSGVhZGVyRm9vdGVyTW91c2V3aGVlbDpTLGhhbmRsZU1vdXNlTGVhdmU6dyx0YWJsZUlkOnosdGFibGVTaXplOkUsaXNIaWRkZW46YixyZW5kZXJFeHBhbmRlZDprLHJlc2l6ZVByb3h5VmlzaWJsZTpWLHJlc2l6ZVN0YXRlOkEsaXNHcm91cDp4LHNjcm9sbFBvc2l0aW9uOkIsYm9keVdpZHRoOkksYm9keUhlaWdodDpNLGVtcHR5QmxvY2tTdHlsZTpULGRlYm91bmNlZFVwZGF0ZUxheW91dDpMLGhhbmRsZUZpeGVkTW91c2V3aGVlbDpELGZpeGVkSGVpZ2h0Ok8sZml4ZWRCb2R5SGVpZ2h0OlAsc2V0Q3VycmVudFJvdzpyLHRvZ2dsZVJvd1NlbGVjdGlvbjpzLGNsZWFyU2VsZWN0aW9uOnUsY2xlYXJGaWx0ZXI6ZCx0b2dnbGVBbGxTZWxlY3Rpb246Yyx0b2dnbGVSb3dFeHBhbnNpb246cCxjbGVhclNvcnQ6aCxkb0xheW91dDptLHNvcnQ6Zix0OnFsLHNldERyYWdWaXNpYmxlOkMsY29udGV4dDphfX19KTtjb25zdCB3ZD17cmVmOlwiaGlkZGVuQ29sdW1uc1wiLGNsYXNzOlwiaGlkZGVuLWNvbHVtbnNcIn0sX2Q9e2tleTowLHJlZjpcImhlYWRlcldyYXBwZXJcIixjbGFzczpcImVsLXRhYmxlX19oZWFkZXItd3JhcHBlclwifSxTZD17Y2xhc3M6XCJlbC10YWJsZV9fZW1wdHktdGV4dFwifSxFZD17a2V5OjEscmVmOlwiYXBwZW5kV3JhcHBlclwiLGNsYXNzOlwiZWwtdGFibGVfX2FwcGVuZC13cmFwcGVyXCJ9LE1kPXtrZXk6MSxyZWY6XCJmb290ZXJXcmFwcGVyXCIsY2xhc3M6XCJlbC10YWJsZV9fZm9vdGVyLXdyYXBwZXJcIn0sVGQ9e2tleTowLHJlZjpcImZpeGVkSGVhZGVyV3JhcHBlclwiLGNsYXNzOlwiZWwtdGFibGVfX2ZpeGVkLWhlYWRlci13cmFwcGVyXCJ9LE5kPXtrZXk6MSxyZWY6XCJmaXhlZEZvb3RlcldyYXBwZXJcIixjbGFzczpcImVsLXRhYmxlX19maXhlZC1mb290ZXItd3JhcHBlclwifSxEZD17a2V5OjAscmVmOlwicmlnaHRGaXhlZEhlYWRlcldyYXBwZXJcIixjbGFzczpcImVsLXRhYmxlX19maXhlZC1oZWFkZXItd3JhcHBlclwifSxPZD17a2V5OjEscmVmOlwicmlnaHRGaXhlZEZvb3RlcldyYXBwZXJcIixjbGFzczpcImVsLXRhYmxlX19maXhlZC1mb290ZXItd3JhcHBlclwifSxQZD17cmVmOlwicmVzaXplUHJveHlcIixjbGFzczpcImVsLXRhYmxlX19jb2x1bW4tcmVzaXplLXByb3h5XCJ9O3hkLnJlbmRlcj1mdW5jdGlvbihlLHQsbCxvLGksdil7Y29uc3QgbT1QKFwidGFibGUtaGVhZGVyXCIpLGY9UChcInRhYmxlLWJvZHlcIiksZz1QKFwidGFibGUtZm9vdGVyXCIpLGI9RihcIm1vdXNld2hlZWxcIik7cmV0dXJuIGEoKSxuKFwiZGl2XCIse2NsYXNzOltbe1wiZWwtdGFibGUtLWZpdFwiOmUuZml0LFwiZWwtdGFibGUtLXN0cmlwZWRcIjplLnN0cmlwZSxcImVsLXRhYmxlLS1ib3JkZXJcIjplLmJvcmRlcnx8ZS5pc0dyb3VwLFwiZWwtdGFibGUtLWhpZGRlblwiOmUuaXNIaWRkZW4sXCJlbC10YWJsZS0tZ3JvdXBcIjplLmlzR3JvdXAsXCJlbC10YWJsZS0tZmx1aWQtaGVpZ2h0XCI6ZS5tYXhIZWlnaHQsXCJlbC10YWJsZS0tc2Nyb2xsYWJsZS14XCI6ZS5sYXlvdXQuc2Nyb2xsWC52YWx1ZSxcImVsLXRhYmxlLS1zY3JvbGxhYmxlLXlcIjplLmxheW91dC5zY3JvbGxZLnZhbHVlLFwiZWwtdGFibGUtLWVuYWJsZS1yb3ctaG92ZXJcIjohZS5zdG9yZS5zdGF0ZXMuaXNDb21wbGV4LnZhbHVlLFwiZWwtdGFibGUtLWVuYWJsZS1yb3ctdHJhbnNpdGlvblwiOjAhPT0oZS5zdG9yZS5zdGF0ZXMuZGF0YS52YWx1ZXx8W10pLmxlbmd0aCYmKGUuc3RvcmUuc3RhdGVzLmRhdGEudmFsdWV8fFtdKS5sZW5ndGg8MTAwfSxlLnRhYmxlU2l6ZT9cImVsLXRhYmxlLS1cIitlLnRhYmxlU2l6ZTpcIlwiXSxcImVsLXRhYmxlXCJdLG9uTW91c2VsZWF2ZTp0WzFdfHwodFsxXT10PT5lLmhhbmRsZU1vdXNlTGVhdmUoKSl9LFtzKFwiZGl2XCIsd2QsW2QoZS4kc2xvdHMsXCJkZWZhdWx0XCIpXSw1MTIpLGUuc2hvd0hlYWRlcj9yKChhKCksbihcImRpdlwiLF9kLFtzKG0se3JlZjpcInRhYmxlSGVhZGVyXCIsYm9yZGVyOmUuYm9yZGVyLFwiZGVmYXVsdC1zb3J0XCI6ZS5kZWZhdWx0U29ydCxzdG9yZTplLnN0b3JlLHN0eWxlOnt3aWR0aDplLmxheW91dC5ib2R5V2lkdGgudmFsdWU/ZS5sYXlvdXQuYm9keVdpZHRoLnZhbHVlK1wicHhcIjpcIlwifSxvblNldERyYWdWaXNpYmxlOmUuc2V0RHJhZ1Zpc2libGV9LG51bGwsOCxbXCJib3JkZXJcIixcImRlZmF1bHQtc29ydFwiLFwic3RvcmVcIixcInN0eWxlXCIsXCJvblNldERyYWdWaXNpYmxlXCJdKV0sNTEyKSksW1tiLGUuaGFuZGxlSGVhZGVyRm9vdGVyTW91c2V3aGVlbF1dKTp1KFwidi1pZlwiLCEwKSxzKFwiZGl2XCIse3JlZjpcImJvZHlXcmFwcGVyXCIsY2xhc3M6W1tlLmxheW91dC5zY3JvbGxYLnZhbHVlP1wiaXMtc2Nyb2xsaW5nLVwiK2Uuc2Nyb2xsUG9zaXRpb246XCJpcy1zY3JvbGxpbmctbm9uZVwiXSxcImVsLXRhYmxlX19ib2R5LXdyYXBwZXJcIl0sc3R5bGU6W2UuYm9keUhlaWdodF19LFtzKGYse2NvbnRleHQ6ZS5jb250ZXh0LGhpZ2hsaWdodDplLmhpZ2hsaWdodEN1cnJlbnRSb3csXCJyb3ctY2xhc3MtbmFtZVwiOmUucm93Q2xhc3NOYW1lLFwicm93LXN0eWxlXCI6ZS5yb3dTdHlsZSxzdG9yZTplLnN0b3JlLHN0cmlwZTplLnN0cmlwZSxzdHlsZTp7d2lkdGg6ZS5ib2R5V2lkdGh9fSxudWxsLDgsW1wiY29udGV4dFwiLFwiaGlnaGxpZ2h0XCIsXCJyb3ctY2xhc3MtbmFtZVwiLFwicm93LXN0eWxlXCIsXCJzdG9yZVwiLFwic3RyaXBlXCIsXCJzdHlsZVwiXSksZS5kYXRhJiYwIT09ZS5kYXRhLmxlbmd0aD91KFwidi1pZlwiLCEwKTooYSgpLG4oXCJkaXZcIix7a2V5OjAscmVmOlwiZW1wdHlCbG9ja1wiLHN0eWxlOmUuZW1wdHlCbG9ja1N0eWxlLGNsYXNzOlwiZWwtdGFibGVfX2VtcHR5LWJsb2NrXCJ9LFtzKFwic3BhblwiLFNkLFtkKGUuJHNsb3RzLFwiZW1wdHlcIix7fSwoKCk9PltjKHAoZS5lbXB0eVRleHR8fGUudChcImVsLnRhYmxlLmVtcHR5VGV4dFwiKSksMSldKSldKV0sNCkpLGUuJHNsb3RzLmFwcGVuZD8oYSgpLG4oXCJkaXZcIixFZCxbZChlLiRzbG90cyxcImFwcGVuZFwiKV0sNTEyKSk6dShcInYtaWZcIiwhMCldLDYpLGUuc2hvd1N1bW1hcnk/cigoYSgpLG4oXCJkaXZcIixNZCxbcyhnLHtib3JkZXI6ZS5ib3JkZXIsXCJkZWZhdWx0LXNvcnRcIjplLmRlZmF1bHRTb3J0LHN0b3JlOmUuc3RvcmUsc3R5bGU6e3dpZHRoOmUubGF5b3V0LmJvZHlXaWR0aC52YWx1ZT9lLmxheW91dC5ib2R5V2lkdGgudmFsdWUrXCJweFwiOlwiXCJ9LFwic3VtLXRleHRcIjplLnN1bVRleHR8fGUudChcImVsLnRhYmxlLnN1bVRleHRcIiksXCJzdW1tYXJ5LW1ldGhvZFwiOmUuc3VtbWFyeU1ldGhvZH0sbnVsbCw4LFtcImJvcmRlclwiLFwiZGVmYXVsdC1zb3J0XCIsXCJzdG9yZVwiLFwic3R5bGVcIixcInN1bS10ZXh0XCIsXCJzdW1tYXJ5LW1ldGhvZFwiXSldLDUxMikpLFtbaCxlLmRhdGEmJmUuZGF0YS5sZW5ndGg+MF0sW2IsZS5oYW5kbGVIZWFkZXJGb290ZXJNb3VzZXdoZWVsXV0pOnUoXCJ2LWlmXCIsITApLGUuc3RvcmUuc3RhdGVzLmZpeGVkQ29sdW1ucy52YWx1ZS5sZW5ndGg+MD9yKChhKCksbihcImRpdlwiLHtrZXk6MixyZWY6XCJmaXhlZFdyYXBwZXJcIixzdHlsZTpbe3dpZHRoOmUubGF5b3V0LmZpeGVkV2lkdGgudmFsdWU/ZS5sYXlvdXQuZml4ZWRXaWR0aC52YWx1ZStcInB4XCI6XCJcIn0sZS5maXhlZEhlaWdodF0sY2xhc3M6XCJlbC10YWJsZV9fZml4ZWRcIn0sW2Uuc2hvd0hlYWRlcj8oYSgpLG4oXCJkaXZcIixUZCxbcyhtLHtyZWY6XCJmaXhlZFRhYmxlSGVhZGVyXCIsYm9yZGVyOmUuYm9yZGVyLHN0b3JlOmUuc3RvcmUsc3R5bGU6e3dpZHRoOmUuYm9keVdpZHRofSxmaXhlZDpcImxlZnRcIixvblNldERyYWdWaXNpYmxlOmUuc2V0RHJhZ1Zpc2libGV9LG51bGwsOCxbXCJib3JkZXJcIixcInN0b3JlXCIsXCJzdHlsZVwiLFwib25TZXREcmFnVmlzaWJsZVwiXSldLDUxMikpOnUoXCJ2LWlmXCIsITApLHMoXCJkaXZcIix7cmVmOlwiZml4ZWRCb2R5V3JhcHBlclwiLHN0eWxlOlt7dG9wOmUubGF5b3V0LmhlYWRlckhlaWdodC52YWx1ZStcInB4XCJ9LGUuZml4ZWRCb2R5SGVpZ2h0XSxjbGFzczpcImVsLXRhYmxlX19maXhlZC1ib2R5LXdyYXBwZXJcIn0sW3MoZix7aGlnaGxpZ2h0OmUuaGlnaGxpZ2h0Q3VycmVudFJvdyxcInJvdy1jbGFzcy1uYW1lXCI6ZS5yb3dDbGFzc05hbWUsXCJyb3ctc3R5bGVcIjplLnJvd1N0eWxlLHN0b3JlOmUuc3RvcmUsc3RyaXBlOmUuc3RyaXBlLHN0eWxlOnt3aWR0aDplLmJvZHlXaWR0aH0sZml4ZWQ6XCJsZWZ0XCJ9LG51bGwsOCxbXCJoaWdobGlnaHRcIixcInJvdy1jbGFzcy1uYW1lXCIsXCJyb3ctc3R5bGVcIixcInN0b3JlXCIsXCJzdHJpcGVcIixcInN0eWxlXCJdKSxlLiRzbG90cy5hcHBlbmQ/KGEoKSxuKFwiZGl2XCIse2tleTowLHN0eWxlOntoZWlnaHQ6ZS5sYXlvdXQuYXBwZW5kSGVpZ2h0LnZhbHVlK1wicHhcIn0sY2xhc3M6XCJlbC10YWJsZV9fYXBwZW5kLWd1dHRlclwifSxudWxsLDQpKTp1KFwidi1pZlwiLCEwKV0sNCksZS5zaG93U3VtbWFyeT9yKChhKCksbihcImRpdlwiLE5kLFtzKGcse2JvcmRlcjplLmJvcmRlcixzdG9yZTplLnN0b3JlLHN0eWxlOnt3aWR0aDplLmJvZHlXaWR0aH0sXCJzdW0tdGV4dFwiOmUuc3VtVGV4dHx8ZS50KFwiZWwudGFibGUuc3VtVGV4dFwiKSxcInN1bW1hcnktbWV0aG9kXCI6ZS5zdW1tYXJ5TWV0aG9kLGZpeGVkOlwibGVmdFwifSxudWxsLDgsW1wiYm9yZGVyXCIsXCJzdG9yZVwiLFwic3R5bGVcIixcInN1bS10ZXh0XCIsXCJzdW1tYXJ5LW1ldGhvZFwiXSldLDUxMikpLFtbaCxlLmRhdGEmJmUuZGF0YS5sZW5ndGg+MF1dKTp1KFwidi1pZlwiLCEwKV0sNCkpLFtbYixlLmhhbmRsZUZpeGVkTW91c2V3aGVlbF1dKTp1KFwidi1pZlwiLCEwKSxlLnN0b3JlLnN0YXRlcy5yaWdodEZpeGVkQ29sdW1ucy52YWx1ZS5sZW5ndGg+MD9yKChhKCksbihcImRpdlwiLHtrZXk6MyxyZWY6XCJyaWdodEZpeGVkV3JhcHBlclwiLHN0eWxlOlt7d2lkdGg6ZS5sYXlvdXQucmlnaHRGaXhlZFdpZHRoLnZhbHVlP2UubGF5b3V0LnJpZ2h0Rml4ZWRXaWR0aC52YWx1ZStcInB4XCI6XCJcIixyaWdodDplLmxheW91dC5zY3JvbGxZLnZhbHVlPyhlLmJvcmRlcj9lLmxheW91dC5ndXR0ZXJXaWR0aDplLmxheW91dC5ndXR0ZXJXaWR0aHx8MCkrXCJweFwiOlwiXCJ9LGUuZml4ZWRIZWlnaHRdLGNsYXNzOlwiZWwtdGFibGVfX2ZpeGVkLXJpZ2h0XCJ9LFtlLnNob3dIZWFkZXI/KGEoKSxuKFwiZGl2XCIsRGQsW3MobSx7cmVmOlwicmlnaHRGaXhlZFRhYmxlSGVhZGVyXCIsYm9yZGVyOmUuYm9yZGVyLHN0b3JlOmUuc3RvcmUsc3R5bGU6e3dpZHRoOmUuYm9keVdpZHRofSxmaXhlZDpcInJpZ2h0XCIsb25TZXREcmFnVmlzaWJsZTplLnNldERyYWdWaXNpYmxlfSxudWxsLDgsW1wiYm9yZGVyXCIsXCJzdG9yZVwiLFwic3R5bGVcIixcIm9uU2V0RHJhZ1Zpc2libGVcIl0pXSw1MTIpKTp1KFwidi1pZlwiLCEwKSxzKFwiZGl2XCIse3JlZjpcInJpZ2h0Rml4ZWRCb2R5V3JhcHBlclwiLHN0eWxlOlt7dG9wOmUubGF5b3V0LmhlYWRlckhlaWdodC52YWx1ZStcInB4XCJ9LGUuZml4ZWRCb2R5SGVpZ2h0XSxjbGFzczpcImVsLXRhYmxlX19maXhlZC1ib2R5LXdyYXBwZXJcIn0sW3MoZix7aGlnaGxpZ2h0OmUuaGlnaGxpZ2h0Q3VycmVudFJvdyxcInJvdy1jbGFzcy1uYW1lXCI6ZS5yb3dDbGFzc05hbWUsXCJyb3ctc3R5bGVcIjplLnJvd1N0eWxlLHN0b3JlOmUuc3RvcmUsc3RyaXBlOmUuc3RyaXBlLHN0eWxlOnt3aWR0aDplLmJvZHlXaWR0aH0sZml4ZWQ6XCJyaWdodFwifSxudWxsLDgsW1wiaGlnaGxpZ2h0XCIsXCJyb3ctY2xhc3MtbmFtZVwiLFwicm93LXN0eWxlXCIsXCJzdG9yZVwiLFwic3RyaXBlXCIsXCJzdHlsZVwiXSksZS4kc2xvdHMuYXBwZW5kPyhhKCksbihcImRpdlwiLHtrZXk6MCxzdHlsZTp7aGVpZ2h0OmUubGF5b3V0LmFwcGVuZEhlaWdodC52YWx1ZStcInB4XCJ9LGNsYXNzOlwiZWwtdGFibGVfX2FwcGVuZC1ndXR0ZXJcIn0sbnVsbCw0KSk6dShcInYtaWZcIiwhMCldLDQpLGUuc2hvd1N1bW1hcnk/cigoYSgpLG4oXCJkaXZcIixPZCxbcyhnLHtib3JkZXI6ZS5ib3JkZXIsc3RvcmU6ZS5zdG9yZSxzdHlsZTp7d2lkdGg6ZS5ib2R5V2lkdGh9LFwic3VtLXRleHRcIjplLnN1bVRleHR8fGUudChcImVsLnRhYmxlLnN1bVRleHRcIiksXCJzdW1tYXJ5LW1ldGhvZFwiOmUuc3VtbWFyeU1ldGhvZCxmaXhlZDpcInJpZ2h0XCJ9LG51bGwsOCxbXCJib3JkZXJcIixcInN0b3JlXCIsXCJzdHlsZVwiLFwic3VtLXRleHRcIixcInN1bW1hcnktbWV0aG9kXCJdKV0sNTEyKSksW1toLGUuZGF0YSYmZS5kYXRhLmxlbmd0aD4wXV0pOnUoXCJ2LWlmXCIsITApXSw0KSksW1tiLGUuaGFuZGxlRml4ZWRNb3VzZXdoZWVsXV0pOnUoXCJ2LWlmXCIsITApLGUuc3RvcmUuc3RhdGVzLnJpZ2h0Rml4ZWRDb2x1bW5zLnZhbHVlLmxlbmd0aD4wPyhhKCksbihcImRpdlwiLHtrZXk6NCxyZWY6XCJyaWdodEZpeGVkUGF0Y2hcIixzdHlsZTp7d2lkdGg6ZS5sYXlvdXQuc2Nyb2xsWS52YWx1ZT9lLmxheW91dC5ndXR0ZXJXaWR0aCtcInB4XCI6XCIwXCIsaGVpZ2h0OmUubGF5b3V0LmhlYWRlckhlaWdodC52YWx1ZStcInB4XCJ9LGNsYXNzOlwiZWwtdGFibGVfX2ZpeGVkLXJpZ2h0LXBhdGNoXCJ9LG51bGwsNCkpOnUoXCJ2LWlmXCIsITApLHIocyhcImRpdlwiLFBkLG51bGwsNTEyKSxbW2gsZS5yZXNpemVQcm94eVZpc2libGVdXSldLDM0KX0seGQuX19maWxlPVwicGFja2FnZXMvdGFibGUvc3JjL3RhYmxlLnZ1ZVwiLHhkLmluc3RhbGw9ZT0+e2UuY29tcG9uZW50KHhkLm5hbWUseGQpfTtjb25zdCBWZD17ZGVmYXVsdDp7b3JkZXI6XCJcIn0sc2VsZWN0aW9uOnt3aWR0aDo0OCxtaW5XaWR0aDo0OCxyZWFsV2lkdGg6NDgsb3JkZXI6XCJcIixjbGFzc05hbWU6XCJlbC10YWJsZS1jb2x1bW4tLXNlbGVjdGlvblwifSxleHBhbmQ6e3dpZHRoOjQ4LG1pbldpZHRoOjQ4LHJlYWxXaWR0aDo0OCxvcmRlcjpcIlwifSxpbmRleDp7d2lkdGg6NDgsbWluV2lkdGg6NDgscmVhbFdpZHRoOjQ4LG9yZGVyOlwiXCJ9fSxJZD17c2VsZWN0aW9uOntyZW5kZXJIZWFkZXI6ZnVuY3Rpb24oe3N0b3JlOmV9KXtjb25zdCB0PWU7cmV0dXJuIEQoS2Ese2Rpc2FibGVkOnQuc3RhdGVzLmRhdGEudmFsdWUmJjA9PT10LnN0YXRlcy5kYXRhLnZhbHVlLmxlbmd0aCxpbmRldGVybWluYXRlOnQuc3RhdGVzLnNlbGVjdGlvbi52YWx1ZS5sZW5ndGg+MCYmIXQuc3RhdGVzLmlzQWxsU2VsZWN0ZWQudmFsdWUsb25DbGljazp0LnRvZ2dsZUFsbFNlbGVjdGlvbixtb2RlbFZhbHVlOnQuc3RhdGVzLmlzQWxsU2VsZWN0ZWQudmFsdWV9KX0scmVuZGVyQ2VsbDpmdW5jdGlvbih7cm93OmUsY29sdW1uOnQsc3RvcmU6bCwkaW5kZXg6YX0pe3JldHVybiBEKEthLHtkaXNhYmxlZDohIXQuc2VsZWN0YWJsZSYmIXQuc2VsZWN0YWJsZS5jYWxsKG51bGwsZSxhKSxvbklucHV0OigpPT57bC5jb21taXQoXCJyb3dTZWxlY3RlZENoYW5nZWRcIixlKX0sbmF0aXZlT25DbGljazplPT5lLnN0b3BQcm9wYWdhdGlvbigpLG1vZGVsVmFsdWU6bC5pc1NlbGVjdGVkKGUpfSl9LHNvcnRhYmxlOiExLHJlc2l6YWJsZTohMX0saW5kZXg6e3JlbmRlckhlYWRlcjpmdW5jdGlvbih7Y29sdW1uOmV9KXtyZXR1cm4gZS5sYWJlbHx8XCIjXCJ9LHJlbmRlckNlbGw6ZnVuY3Rpb24oe2NvbHVtbjplLCRpbmRleDp0fSl7bGV0IGw9dCsxO2NvbnN0IGE9ZS5pbmRleDtyZXR1cm5cIm51bWJlclwiPT10eXBlb2YgYT9sPXQrYTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBhJiYobD1hKHQpKSxEKFwiZGl2XCIse30sW2xdKX0sc29ydGFibGU6ITF9LGV4cGFuZDp7cmVuZGVySGVhZGVyOmZ1bmN0aW9uKHtjb2x1bW46ZX0pe3JldHVybiBlLmxhYmVsfHxcIlwifSxyZW5kZXJDZWxsOmZ1bmN0aW9uKHtyb3c6ZSxzdG9yZTp0fSl7Y29uc3QgbD10LGE9ZSxuPVtcImVsLXRhYmxlX19leHBhbmQtaWNvblwiXTtsLnN0YXRlcy5leHBhbmRSb3dzLnZhbHVlLmluZGV4T2YoYSk+LTEmJm4ucHVzaChcImVsLXRhYmxlX19leHBhbmQtaWNvbi0tZXhwYW5kZWRcIik7cmV0dXJuIEQoXCJkaXZcIix7Y2xhc3M6bixvbkNsaWNrOmZ1bmN0aW9uKGUpe2Uuc3RvcFByb3BhZ2F0aW9uKCksbC50b2dnbGVSb3dFeHBhbnNpb24oYSl9fSxbRChcImlcIix7Y2xhc3M6XCJlbC1pY29uIGVsLWljb24tYXJyb3ctcmlnaHRcIn0pXSl9LHNvcnRhYmxlOiExLHJlc2l6YWJsZTohMSxjbGFzc05hbWU6XCJlbC10YWJsZV9fZXhwYW5kLWNvbHVtblwifX07ZnVuY3Rpb24gQWQoe3JvdzplLGNvbHVtbjp0LCRpbmRleDpsfSl7Y29uc3QgYT10LnByb3BlcnR5LG49YSYmJGUoZSxhLCExKS52O3JldHVybiB0JiZ0LmZvcm1hdHRlcj90LmZvcm1hdHRlcihlLHQsbixsKTpufWZ1bmN0aW9uIEJkKGUsYSxuKXtjb25zdCBvPXYoKSxpPXQoXCJcIikscj10KCExKSxzPXQoKSx1PXQoKTtnKCgoKT0+e3MudmFsdWU9ZS5hbGlnbj9cImlzLVwiK2UuYWxpZ246bnVsbCxzLnZhbHVlfSkpLGcoKCgpPT57dS52YWx1ZT1lLmhlYWRlckFsaWduP1wiaXMtXCIrZS5oZWFkZXJBbGlnbjpzLnZhbHVlLHUudmFsdWV9KSk7Y29uc3QgZD1sKCgoKT0+e2xldCBlPW8udm5vZGUudlBhcmVudHx8by5wYXJlbnQ7Zm9yKDtlJiYhZS50YWJsZUlkJiYhZS5jb2x1bW5JZDspZT1lLnZub2RlLnZQYXJlbnR8fGUucGFyZW50O3JldHVybiBlfSkpLGM9dChHdShlLndpZHRoKSkscD10KCh2b2lkIDAhPT0oaD1lLm1pbldpZHRoKSYmKGg9R3UoaCksaXNOYU4oaCkmJihoPTgwKSksaCkpO3ZhciBoO3JldHVybntjb2x1bW5JZDppLHJlYWxBbGlnbjpzLGlzU3ViQ29sdW1uOnIscmVhbEhlYWRlckFsaWduOnUsY29sdW1uT3JUYWJsZVBhcmVudDpkLHNldENvbHVtbldpZHRoOmU9PihjLnZhbHVlJiYoZS53aWR0aD1jLnZhbHVlKSxwLnZhbHVlJiYoZS5taW5XaWR0aD1wLnZhbHVlKSxlLm1pbldpZHRofHwoZS5taW5XaWR0aD04MCksZS5yZWFsV2lkdGg9dm9pZCAwPT09ZS53aWR0aD9lLm1pbldpZHRoOmUud2lkdGgsZSksc2V0Q29sdW1uRm9yY2VkUHJvcHM6ZT0+e2NvbnN0IHQ9ZS50eXBlLGw9SWRbdF18fHt9O3JldHVybiBPYmplY3Qua2V5cyhsKS5mb3JFYWNoKCh0PT57Y29uc3QgYT1sW3RdO3ZvaWQgMCE9PWEmJihlW3RdPVwiY2xhc3NOYW1lXCI9PT10P2Ake2VbdF19ICR7YX1gOmEpfSkpLGV9LHNldENvbHVtblJlbmRlcnM6dD0+e2UucmVuZGVySGVhZGVyP2NvbnNvbGUud2FybihcIltFbGVtZW50IFdhcm5dW1RhYmxlQ29sdW1uXUNvbXBhcmluZyB0byByZW5kZXItaGVhZGVyLCBzY29wZWQtc2xvdCBoZWFkZXIgaXMgZWFzaWVyIHRvIHVzZS4gV2UgcmVjb21tZW5kIHVzZXJzIHRvIHVzZSBzY29wZWQtc2xvdCBoZWFkZXIuXCIpOlwic2VsZWN0aW9uXCIhPT10LnR5cGUmJih0LnJlbmRlckhlYWRlcj1lPT57by5jb2x1bW5Db25maWcudmFsdWUubGFiZWw7Y29uc3QgbD1hLmhlYWRlcjtyZXR1cm4gbD9sKGUpOnQubGFiZWx9KTtsZXQgbD10LnJlbmRlckNlbGw7cmV0dXJuXCJleHBhbmRcIj09PXQudHlwZT8odC5yZW5kZXJDZWxsPWU9PkQoXCJkaXZcIix7Y2xhc3M6XCJjZWxsXCJ9LFtsKGUpXSksbi52YWx1ZS5yZW5kZXJFeHBhbmRlZD1lPT5hLmRlZmF1bHQ/YS5kZWZhdWx0KGUpOmEuZGVmYXVsdCk6KGw9bHx8QWQsdC5yZW5kZXJDZWxsPWU9PntsZXQgbj1udWxsO249YS5kZWZhdWx0P2EuZGVmYXVsdChlKTpsKGUpO2NvbnN0IGk9ZnVuY3Rpb24oe3JvdzplLHRyZWVOb2RlOnQsc3RvcmU6bH0pe2NvbnN0IGE9ZSxuPWwsbz10O2lmKCFvKXJldHVybiBudWxsO2NvbnN0IGk9W10scj1mdW5jdGlvbihlKXtlLnN0b3BQcm9wYWdhdGlvbigpLG4ubG9hZE9yVG9nZ2xlKGEpfTtpZihvLmluZGVudCYmaS5wdXNoKEQoXCJzcGFuXCIse2NsYXNzOlwiZWwtdGFibGVfX2luZGVudFwiLHN0eWxlOntcInBhZGRpbmctbGVmdFwiOm8uaW5kZW50K1wicHhcIn19KSksXCJib29sZWFuXCIhPXR5cGVvZiBvLmV4cGFuZGVkfHxvLm5vTGF6eUNoaWxkcmVuKWkucHVzaChEKFwic3BhblwiLHtjbGFzczpcImVsLXRhYmxlX19wbGFjZWhvbGRlclwifSkpO2Vsc2V7Y29uc3QgZT1bXCJlbC10YWJsZV9fZXhwYW5kLWljb25cIixvLmV4cGFuZGVkP1wiZWwtdGFibGVfX2V4cGFuZC1pY29uLS1leHBhbmRlZFwiOlwiXCJdO2xldCB0PVtcImVsLWljb24tYXJyb3ctcmlnaHRcIl07by5sb2FkaW5nJiYodD1bXCJlbC1pY29uLWxvYWRpbmdcIl0pLGkucHVzaChEKFwiZGl2XCIse2NsYXNzOmUsb25DbGljazpyfSxbRChcImlcIix7Y2xhc3M6dH0pXSkpfXJldHVybiBpfShlKSxyPXtjbGFzczpcImNlbGxcIixzdHlsZTp7fX07cmV0dXJuIHQuc2hvd092ZXJmbG93VG9vbHRpcCYmKHIuY2xhc3MrPVwiIGVsLXRvb2x0aXBcIixyLnN0eWxlPXt3aWR0aDooZS5jb2x1bW4ucmVhbFdpZHRofHxlLmNvbHVtbi53aWR0aCktMStcInB4XCJ9KSwoZT0+e2Z1bmN0aW9uIHQoZSl7dmFyIHQ7XCJFbFRhYmxlQ29sdW1uXCI9PT0obnVsbD09PSh0PW51bGw9PWU/dm9pZCAwOmUudHlwZSl8fHZvaWQgMD09PXQ/dm9pZCAwOnQubmFtZSkmJihlLnZQYXJlbnQ9byl9ZSBpbnN0YW5jZW9mIEFycmF5P2UuZm9yRWFjaCgoZT0+dChlKSkpOnQoZSl9KShuKSxEKFwiZGl2XCIscixbaSxuXSl9KSx0fSxnZXRQcm9wc0RhdGE6KC4uLnQpPT50LnJlZHVjZSgoKHQsbCk9PihBcnJheS5pc0FycmF5KGwpJiZsLmZvckVhY2goKGw9Pnt0W2xdPWVbbF19KSksdCkpLHt9KSxnZXRDb2x1bW5FbEluZGV4OihlLHQpPT5bXS5pbmRleE9mLmNhbGwoZSx0KX19bGV0IExkPTE7dmFyIHpkPWUoe25hbWU6XCJFbFRhYmxlQ29sdW1uXCIsY29tcG9uZW50czp7RWxDaGVja2JveDpLYX0scHJvcHM6e3R5cGU6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJkZWZhdWx0XCJ9LGxhYmVsOlN0cmluZyxjbGFzc05hbWU6U3RyaW5nLGxhYmVsQ2xhc3NOYW1lOlN0cmluZyxwcm9wZXJ0eTpTdHJpbmcscHJvcDpTdHJpbmcsd2lkdGg6e3R5cGU6W09iamVjdCxOdW1iZXIsU3RyaW5nXSxkZWZhdWx0OigpPT4oe30pfSxtaW5XaWR0aDp7dHlwZTpbT2JqZWN0LE51bWJlcixTdHJpbmddLGRlZmF1bHQ6KCk9Pih7fSl9LHJlbmRlckhlYWRlcjpGdW5jdGlvbixzb3J0YWJsZTp7dHlwZTpbQm9vbGVhbixTdHJpbmddLGRlZmF1bHQ6ITF9LHNvcnRNZXRob2Q6RnVuY3Rpb24sc29ydEJ5OltTdHJpbmcsRnVuY3Rpb24sQXJyYXldLHJlc2l6YWJsZTp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITB9LGNvbHVtbktleTpTdHJpbmcsYWxpZ246U3RyaW5nLGhlYWRlckFsaWduOlN0cmluZyxzaG93VG9vbHRpcFdoZW5PdmVyZmxvdzpCb29sZWFuLHNob3dPdmVyZmxvd1Rvb2x0aXA6Qm9vbGVhbixmaXhlZDpbQm9vbGVhbixTdHJpbmddLGZvcm1hdHRlcjpGdW5jdGlvbixzZWxlY3RhYmxlOkZ1bmN0aW9uLHJlc2VydmVTZWxlY3Rpb246Qm9vbGVhbixmaWx0ZXJNZXRob2Q6RnVuY3Rpb24sZmlsdGVyZWRWYWx1ZTpBcnJheSxmaWx0ZXJzOkFycmF5LGZpbHRlclBsYWNlbWVudDpTdHJpbmcsZmlsdGVyTXVsdGlwbGU6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiEwfSxpbmRleDpbTnVtYmVyLEZ1bmN0aW9uXSxzb3J0T3JkZXJzOnt0eXBlOkFycmF5LGRlZmF1bHQ6KCk9PltcImFzY2VuZGluZ1wiLFwiZGVzY2VuZGluZ1wiLG51bGxdLHZhbGlkYXRvcjplPT5lLmV2ZXJ5KChlPT5bXCJhc2NlbmRpbmdcIixcImRlc2NlbmRpbmdcIixudWxsXS5pbmRleE9mKGUpPi0xKSl9fSxzZXR1cChlLHtzbG90czphfSl7Y29uc3Qgbj12KCksbz10KHt9KSxpPWUscj1sKCgoKT0+e2xldCBlPW4ucGFyZW50O2Zvcig7ZSYmIWUudGFibGVJZDspZT1lLnBhcmVudDtyZXR1cm4gZX0pKSx7cmVnaXN0ZXJOb3JtYWxXYXRjaGVyczpzLHJlZ2lzdGVyQ29tcGxleFdhdGNoZXJzOnV9PWZ1bmN0aW9uKGUsdCl7Y29uc3QgbD12KCk7cmV0dXJue3JlZ2lzdGVyQ29tcGxleFdhdGNoZXJzOigpPT57Y29uc3QgYT17cmVhbFdpZHRoOlwid2lkdGhcIixyZWFsTWluV2lkdGg6XCJtaW5XaWR0aFwifSxuPVtcImZpeGVkXCJdLnJlZHVjZSgoKGUsdCk9PihlW3RdPXQsZSkpLGEpO09iamVjdC5rZXlzKG4pLmZvckVhY2goKG49Pntjb25zdCBvPWFbbl07dC5oYXNPd25Qcm9wZXJ0eShvKSYmeSgoKCk9PnRbb10pLCh0PT57bC5jb2x1bW5Db25maWcudmFsdWVbb109dDtjb25zdCBhPVwiZml4ZWRcIj09PW87ZS52YWx1ZS5zdG9yZS5zY2hlZHVsZUxheW91dChhKX0pKX0pKX0scmVnaXN0ZXJOb3JtYWxXYXRjaGVyczooKT0+e2NvbnN0IGU9e3Byb3A6XCJwcm9wZXJ0eVwiLHJlYWxBbGlnbjpcImFsaWduXCIscmVhbEhlYWRlckFsaWduOlwiaGVhZGVyQWxpZ25cIn0sYT1bXCJsYWJlbFwiLFwicHJvcGVydHlcIixcImZpbHRlcnNcIixcImZpbHRlck11bHRpcGxlXCIsXCJzb3J0YWJsZVwiLFwiaW5kZXhcIixcImZvcm1hdHRlclwiLFwiY2xhc3NOYW1lXCIsXCJsYWJlbENsYXNzTmFtZVwiLFwic2hvd092ZXJmbG93VG9vbHRpcFwiXS5yZWR1Y2UoKChlLHQpPT4oZVt0XT10LGUpKSxlKTtPYmplY3Qua2V5cyhhKS5mb3JFYWNoKChhPT57Y29uc3Qgbj1lW2FdO3QuaGFzT3duUHJvcGVydHkobikmJnkoKCgpPT50W25dKSwoZT0+e2wuY29sdW1uQ29uZmlnLnZhbHVlW25dPWV9KSl9KSl9fX0ocixpKSx7Y29sdW1uSWQ6ZCxpc1N1YkNvbHVtbjpjLHJlYWxIZWFkZXJBbGlnbjpwLGNvbHVtbk9yVGFibGVQYXJlbnQ6aCxzZXRDb2x1bW5XaWR0aDptLHNldENvbHVtbkZvcmNlZFByb3BzOmYsc2V0Q29sdW1uUmVuZGVyczpnLGdldFByb3BzRGF0YTpiLGdldENvbHVtbkVsSW5kZXg6ayxyZWFsQWxpZ246Q309QmQoaSxhLHIpLHg9aC52YWx1ZTtkLnZhbHVlPSh4LnRhYmxlSWR8fHguY29sdW1uSWQpK1wiX2NvbHVtbl9cIitMZCsrLFgoKCgpPT57Yy52YWx1ZT1yLnZhbHVlIT09eDtjb25zdCBlPWkudHlwZXx8XCJkZWZhdWx0XCIsdD1cIlwiPT09aS5zb3J0YWJsZXx8aS5zb3J0YWJsZSxsPU9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSxWZFtlXSkse2lkOmQudmFsdWUsdHlwZTplLHByb3BlcnR5OmkucHJvcHx8aS5wcm9wZXJ0eSxhbGlnbjpDLGhlYWRlckFsaWduOnAsc2hvd092ZXJmbG93VG9vbHRpcDppLnNob3dPdmVyZmxvd1Rvb2x0aXB8fGkuc2hvd1Rvb2x0aXBXaGVuT3ZlcmZsb3csZmlsdGVyYWJsZTppLmZpbHRlcnN8fGkuZmlsdGVyTWV0aG9kLGZpbHRlcmVkVmFsdWU6W10sZmlsdGVyUGxhY2VtZW50OlwiXCIsaXNDb2x1bW5Hcm91cDohMSxmaWx0ZXJPcGVuZWQ6ITEsc29ydGFibGU6dCxpbmRleDppLmluZGV4fSk7bGV0IGE9YihbXCJjb2x1bW5LZXlcIixcImxhYmVsXCIsXCJjbGFzc05hbWVcIixcImxhYmVsQ2xhc3NOYW1lXCIsXCJ0eXBlXCIsXCJyZW5kZXJIZWFkZXJcIixcImZvcm1hdHRlclwiLFwiZml4ZWRcIixcInJlc2l6YWJsZVwiXSxbXCJzb3J0TWV0aG9kXCIsXCJzb3J0QnlcIixcInNvcnRPcmRlcnNcIl0sW1wic2VsZWN0YWJsZVwiLFwicmVzZXJ2ZVNlbGVjdGlvblwiXSxbXCJmaWx0ZXJNZXRob2RcIixcImZpbHRlcnNcIixcImZpbHRlck11bHRpcGxlXCIsXCJmaWx0ZXJPcGVuZWRcIixcImZpbHRlcmVkVmFsdWVcIixcImZpbHRlclBsYWNlbWVudFwiXSk7YT1mdW5jdGlvbihlLHQpe2NvbnN0IGw9e307bGV0IGE7Zm9yKGEgaW4gZSlsW2FdPWVbYV07Zm9yKGEgaW4gdClpZihVdSh0LGEpKXtjb25zdCBlPXRbYV07dm9pZCAwIT09ZSYmKGxbYV09ZSl9cmV0dXJuIGx9KGwsYSk7YT1mdW5jdGlvbiguLi5lKXtyZXR1cm4gMD09PWUubGVuZ3RoP2U9PmU6MT09PWUubGVuZ3RoP2VbMF06ZS5yZWR1Y2UoKChlLHQpPT4oLi4ubCk9PmUodCguLi5sKSkpKX0oZyxtLGYpKGEpLG8udmFsdWU9YSxzKCksdSgpfSkpLF8oKCgpPT57dmFyIGU7Y29uc3QgdD1oLnZhbHVlLGw9Yy52YWx1ZT90LnZub2RlLmVsLmNoaWxkcmVuOm51bGw9PT0oZT10LnJlZnMuaGlkZGVuQ29sdW1ucyl8fHZvaWQgMD09PWU/dm9pZCAwOmUuY2hpbGRyZW4sYT1rKGx8fFtdLG4udm5vZGUuZWwpO3IudmFsdWUuc3RvcmUuY29tbWl0KFwiaW5zZXJ0Q29sdW1uXCIsby52YWx1ZSxhLGMudmFsdWU/dC5jb2x1bW5Db25maWcudmFsdWU6bnVsbCl9KSksbi5jb2x1bW5JZD1kLnZhbHVlLG4uY29sdW1uQ29uZmlnPW99LHJlbmRlcigpe3ZhciBlLHQ7dHJ5e3JldHVybiBEKFwiZGl2XCIsbnVsbD09PSh0PShlPXRoaXMuJHNsb3RzKS5kZWZhdWx0KXx8dm9pZCAwPT09dD92b2lkIDA6dC5jYWxsKGUse3N0b3JlOnt9LF9zZWxmOnt9LGNvbHVtbjp7fSxyb3c6e30sJGluZGV4Oi0xfSkpfWNhdGNoKGUpe3JldHVybiBEKFwiZGl2XCIpfX19KTt6ZC5pbnN0YWxsPWU9PntlLmNvbXBvbmVudCh6ZC5uYW1lLHpkKX07dmFyIEZkPWUoe25hbWU6XCJFbFRhYkJhclwiLHByb3BzOnt0YWJzOnt0eXBlOkFycmF5LGRlZmF1bHQ6KCk9PltdfX0sc2V0dXAoZSl7Y29uc3QgbD13KFwicm9vdFRhYnNcIik7aWYoIWwpdGhyb3cgbmV3IEVycm9yKFwiRWxUYWJCYXIgbXVzdCB1c2Ugd2l0aCBFbFRhYnNcIik7Y29uc3QgYT12KCksbj0oKT0+e2xldCB0PXt9LG49MCxvPTA7Y29uc3QgaT1bXCJ0b3BcIixcImJvdHRvbVwiXS5pbmNsdWRlcyhsLnByb3BzLnRhYlBvc2l0aW9uKT9cIndpZHRoXCI6XCJoZWlnaHRcIixyPVwid2lkdGhcIj09PWk/XCJ4XCI6XCJ5XCI7ZS50YWJzLmV2ZXJ5KCh0PT57dmFyIGw7bGV0IHI9bnVsbD09PShsPWEucGFyZW50LnJlZnMpfHx2b2lkIDA9PT1sP3ZvaWQgMDpsW1widGFiLVwiK3QucGFuZU5hbWVdO2lmKCFyKXJldHVybiExO2lmKHQuYWN0aXZlKXtvPXJbXCJjbGllbnRcIitMZShpKV07Y29uc3QgdD13aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShyKTtyZXR1cm5cIndpZHRoXCI9PT1pJiYoZS50YWJzLmxlbmd0aD4xJiYoby09cGFyc2VGbG9hdCh0LnBhZGRpbmdMZWZ0KStwYXJzZUZsb2F0KHQucGFkZGluZ1JpZ2h0KSksbis9cGFyc2VGbG9hdCh0LnBhZGRpbmdMZWZ0KSksITF9cmV0dXJuIG4rPXJbXCJjbGllbnRcIitMZShpKV0sITB9KSk7Y29uc3Qgcz1gdHJhbnNsYXRlJHtMZShyKX0oJHtufXB4KWA7cmV0dXJuIHRbaV09bytcInB4XCIsdC50cmFuc2Zvcm09cyx0Lm1zVHJhbnNmb3JtPXMsdC53ZWJraXRUcmFuc2Zvcm09cyx0fSxvPXQobigpKTtyZXR1cm4geSgoKCk9PmUudGFicyksKCgpPT57aygoKCk9PntvLnZhbHVlPW4oKX0pKX0pKSx7cm9vdFRhYnM6bCxiYXJTdHlsZTpvfX19KTtGZC5yZW5kZXI9ZnVuY3Rpb24oZSx0LGwsbyxpLHIpe3JldHVybiBhKCksbihcImRpdlwiLHtjbGFzczpbXCJlbC10YWJzX19hY3RpdmUtYmFyXCIsXCJpcy1cIitlLnJvb3RUYWJzLnByb3BzLnRhYlBvc2l0aW9uXSxzdHlsZTplLmJhclN0eWxlfSxudWxsLDYpfSxGZC5fX2ZpbGU9XCJwYWNrYWdlcy90YWJzL3NyYy90YWItYmFyLnZ1ZVwiO3ZhciAkZD1lKHtuYW1lOlwiRWxUYWJOYXZcIixjb21wb25lbnRzOntUYWJCYXI6RmR9LHByb3BzOntwYW5lczp7dHlwZTpBcnJheSxkZWZhdWx0OigpPT5bXX0sY3VycmVudE5hbWU6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJcIn0sZWRpdGFibGU6Qm9vbGVhbixvblRhYkNsaWNrOnt0eXBlOkZ1bmN0aW9uLGRlZmF1bHQ6U2V9LG9uVGFiUmVtb3ZlOnt0eXBlOkZ1bmN0aW9uLGRlZmF1bHQ6U2V9LHR5cGU6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJcIn0sc3RyZXRjaDpCb29sZWFufSxzZXR1cCgpe2NvbnN0IGU9dyhcInJvb3RUYWJzXCIpO2lmKCFlKXRocm93IG5ldyBFcnJvcihcIkVsVGFiTmF2IG11c3QgdXNlIHdpdGggRWxUYWJzXCIpO2NvbnN0IGE9dCghMSksbj10KDApLG89dCghMSksaT10KCEwKSxyPXQobnVsbCkscz10KG51bGwpLHU9dChudWxsKSxkPWwoKCgpPT5bXCJ0b3BcIixcImJvdHRvbVwiXS5pbmNsdWRlcyhlLnByb3BzLnRhYlBvc2l0aW9uKT9cIndpZHRoXCI6XCJoZWlnaHRcIikpLGM9bCgoKCk9Pih7dHJhbnNmb3JtOmB0cmFuc2xhdGUke1wid2lkdGhcIj09PWQudmFsdWU/XCJYXCI6XCJZXCJ9KC0ke24udmFsdWV9cHgpYH0pKSkscD0oKT0+e2lmKCFhLnZhbHVlKXJldHVybjtjb25zdCB0PXMudmFsdWUsbD11LnZhbHVlLnF1ZXJ5U2VsZWN0b3IoXCIuaXMtYWN0aXZlXCIpO2lmKCFsKXJldHVybjtjb25zdCBvPXIudmFsdWUsaT1bXCJ0b3BcIixcImJvdHRvbVwiXS5pbmNsdWRlcyhlLnByb3BzLnRhYlBvc2l0aW9uKSxkPWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksYz1vLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLHA9aT90Lm9mZnNldFdpZHRoLWMud2lkdGg6dC5vZmZzZXRIZWlnaHQtYy5oZWlnaHQsaD1uLnZhbHVlO2xldCB2PWg7aT8oZC5sZWZ0PGMubGVmdCYmKHY9aC0oYy5sZWZ0LWQubGVmdCkpLGQucmlnaHQ+Yy5yaWdodCYmKHY9aCtkLnJpZ2h0LWMucmlnaHQpKTooZC50b3A8Yy50b3AmJih2PWgtKGMudG9wLWQudG9wKSksZC5ib3R0b20+Yy5ib3R0b20mJih2PWgrKGQuYm90dG9tLWMuYm90dG9tKSkpLHY9TWF0aC5tYXgodiwwKSxuLnZhbHVlPU1hdGgubWluKHYscCl9LGg9KCk9PntpZighcy52YWx1ZSlyZXR1cm47Y29uc3QgZT1zLnZhbHVlW1wib2Zmc2V0XCIrTGUoZC52YWx1ZSldLHQ9ci52YWx1ZVtcIm9mZnNldFwiK0xlKGQudmFsdWUpXSxsPW4udmFsdWU7aWYodDxlKXtjb25zdCBsPW4udmFsdWU7YS52YWx1ZT1hLnZhbHVlfHx7fSxhLnZhbHVlLnByZXY9bCxhLnZhbHVlLm5leHQ9bCt0PGUsZS1sPHQmJihuLnZhbHVlPWUtdCl9ZWxzZSBhLnZhbHVlPSExLGw+MCYmKG4udmFsdWU9MCl9LHY9KCk9PntpLnZhbHVlJiYoby52YWx1ZT0hMCl9LG09KCk9Pntjb25zdCBlPWRvY3VtZW50LnZpc2liaWxpdHlTdGF0ZTtcImhpZGRlblwiPT09ZT9pLnZhbHVlPSExOlwidmlzaWJsZVwiPT09ZSYmc2V0VGltZW91dCgoKCk9PntpLnZhbHVlPSEwfSksNTApfSxmPSgpPT57aS52YWx1ZT0hMX0sZz0oKT0+e3NldFRpbWVvdXQoKCgpPT57aS52YWx1ZT0hMH0pLDUwKX07cmV0dXJuIFMoKCgpPT57aCgpfSkpLF8oKCgpPT57SnQodS52YWx1ZSxoKSxsdChkb2N1bWVudCxcInZpc2liaWxpdHljaGFuZ2VcIixtKSxsdCh3aW5kb3csXCJibHVyXCIsZiksbHQod2luZG93LFwiZm9jdXNcIixnKSxzZXRUaW1lb3V0KCgoKT0+e3AoKX0pLDApfSkpLE8oKCgpPT57dS52YWx1ZSYmZWwodS52YWx1ZSxoKSxhdChkb2N1bWVudCxcInZpc2liaWxpdHljaGFuZ2VcIixtKSxhdCh3aW5kb3csXCJibHVyXCIsZiksYXQod2luZG93LFwiZm9jdXNcIixnKX0pKSx7cm9vdFRhYnM6ZSxzY3JvbGxhYmxlOmEsbmF2T2Zmc2V0Om4saXNGb2N1czpvLGZvY3VzYWJsZTppLG5hdlNjcm9sbCQ6cixuYXYkOnMsZWwkOnUsc2l6ZU5hbWU6ZCxuYXZTdHlsZTpjLHNjcm9sbFByZXY6KCk9Pntjb25zdCBlPXIudmFsdWVbXCJvZmZzZXRcIitMZShkLnZhbHVlKV0sdD1uLnZhbHVlO2lmKCF0KXJldHVybjtsZXQgbD10PmU/dC1lOjA7bi52YWx1ZT1sfSxzY3JvbGxOZXh0OigpPT57Y29uc3QgZT1zLnZhbHVlW1wib2Zmc2V0XCIrTGUoZC52YWx1ZSldLHQ9ci52YWx1ZVtcIm9mZnNldFwiK0xlKGQudmFsdWUpXSxsPW4udmFsdWU7aWYoZS1sPD10KXJldHVybjtsZXQgYT1lLWw+Mip0P2wrdDplLXQ7bi52YWx1ZT1hfSxzY3JvbGxUb0FjdGl2ZVRhYjpwLHVwZGF0ZTpoLGNoYW5nZVRhYjplPT57Y29uc3QgdD1lLmNvZGU7bGV0IGwsYSxuO2NvbnN0e3VwOm8sZG93bjppLGxlZnQ6cixyaWdodDpzfT1mdDstMSE9PVtvLGkscixzXS5pbmRleE9mKHQpJiYobj1lLmN1cnJlbnRUYXJnZXQucXVlcnlTZWxlY3RvckFsbChcIltyb2xlPXRhYl1cIiksYT1BcnJheS5wcm90b3R5cGUuaW5kZXhPZi5jYWxsKG4sZS50YXJnZXQpLGw9dD09PXJ8fHQ9PT1vPzA9PT1hP24ubGVuZ3RoLTE6YS0xOmE8bi5sZW5ndGgtMT9hKzE6MCxuW2xdLmZvY3VzKCksbltsXS5jbGljaygpLHYoKSl9LHNldEZvY3VzOnYscmVtb3ZlRm9jdXM6KCk9PntvLnZhbHVlPSExfSx2aXNpYmlsaXR5Q2hhbmdlSGFuZGxlcjptLHdpbmRvd0JsdXJIYW5kbGVyOmYsd2luZG93Rm9jdXNIYW5kbGVyOmd9fSxyZW5kZXIoKXtjb25zdHt0eXBlOmUscGFuZXM6dCxlZGl0YWJsZTpsLHN0cmV0Y2g6YSxvblRhYkNsaWNrOm4sb25UYWJSZW1vdmU6byxuYXZTdHlsZTppLHNjcm9sbGFibGU6cixzY3JvbGxOZXh0OnMsc2Nyb2xsUHJldjp1LGNoYW5nZVRhYjpkLHNldEZvY3VzOmMscmVtb3ZlRm9jdXM6cCxyb290VGFiczpoLGlzRm9jdXM6dn09dGhpcyxtPXI/W0QoXCJzcGFuXCIse2NsYXNzOltcImVsLXRhYnNfX25hdi1wcmV2XCIsci5wcmV2P1wiXCI6XCJpcy1kaXNhYmxlZFwiXSxvbkNsaWNrOnV9LFtEKFwiaVwiLHtjbGFzczpcImVsLWljb24tYXJyb3ctbGVmdFwifSldKSxEKFwic3BhblwiLHtjbGFzczpbXCJlbC10YWJzX19uYXYtbmV4dFwiLHIubmV4dD9cIlwiOlwiaXMtZGlzYWJsZWRcIl0sb25DbGljazpzfSxbRChcImlcIix7Y2xhc3M6XCJlbC1pY29uLWFycm93LXJpZ2h0XCJ9KV0pXTpudWxsLGY9dC5tYXAoKChlLHQpPT57dmFyIGEsaTtsZXQgcj1lLnByb3BzLm5hbWV8fGUuaW5kZXh8fFwiXCIrdDtjb25zdCBzPWUuaXNDbG9zYWJsZXx8bDtlLmluZGV4PVwiXCIrdDtjb25zdCB1PXM/RChcInNwYW5cIix7Y2xhc3M6XCJlbC1pY29uLWNsb3NlXCIsb25DbGljazp0PT57byhlLHQpfX0pOm51bGwsZD0obnVsbD09PShpPShhPWUuaW5zdGFuY2Uuc2xvdHMpLmxhYmVsKXx8dm9pZCAwPT09aT92b2lkIDA6aS5jYWxsKGEpKXx8ZS5wcm9wcy5sYWJlbCxtPWUuYWN0aXZlPzA6LTE7cmV0dXJuIEQoXCJkaXZcIix7Y2xhc3M6e1wiZWwtdGFic19faXRlbVwiOiEwLFtcImlzLVwiK2gucHJvcHMudGFiUG9zaXRpb25dOiEwLFwiaXMtYWN0aXZlXCI6ZS5hY3RpdmUsXCJpcy1kaXNhYmxlZFwiOmUucHJvcHMuZGlzYWJsZWQsXCJpcy1jbG9zYWJsZVwiOnMsXCJpcy1mb2N1c1wiOnZ9LGlkOlwidGFiLVwiK3Isa2V5OlwidGFiLVwiK3IsXCJhcmlhLWNvbnRyb2xzXCI6XCJwYW5lLVwiK3Iscm9sZTpcInRhYlwiLFwiYXJpYS1zZWxlY3RlZFwiOmUuYWN0aXZlLHJlZjpcInRhYi1cIityLHRhYmluZGV4Om0sb25Gb2N1czooKT0+e2MoKX0sb25CbHVyOigpPT57cCgpfSxvbkNsaWNrOnQ9PntwKCksbihlLHIsdCl9LG9uS2V5ZG93bjp0PT57IXN8fHQuY29kZSE9PWZ0LmRlbGV0ZSYmdC5jb2RlIT09ZnQuYmFja3NwYWNlfHxvKGUsdCl9fSxbZCx1XSl9KSk7cmV0dXJuIEQoXCJkaXZcIix7cmVmOlwiZWwkXCIsY2xhc3M6W1wiZWwtdGFic19fbmF2LXdyYXBcIixyP1wiaXMtc2Nyb2xsYWJsZVwiOlwiXCIsXCJpcy1cIitoLnByb3BzLnRhYlBvc2l0aW9uXX0sW20sRChcImRpdlwiLHtjbGFzczpcImVsLXRhYnNfX25hdi1zY3JvbGxcIixyZWY6XCJuYXZTY3JvbGwkXCJ9LFtEKFwiZGl2XCIse2NsYXNzOltcImVsLXRhYnNfX25hdlwiLFwiaXMtXCIraC5wcm9wcy50YWJQb3NpdGlvbixhJiZbXCJ0b3BcIixcImJvdHRvbVwiXS5pbmNsdWRlcyhoLnByb3BzLnRhYlBvc2l0aW9uKT9cImlzLXN0cmV0Y2hcIjpcIlwiXSxyZWY6XCJuYXYkXCIsc3R5bGU6aSxyb2xlOlwidGFibGlzdFwiLG9uS2V5ZG93bjpkfSxbZT9udWxsOkQoRmQse3RhYnM6dH0pLGZdKV0pXSl9fSk7JGQuX19maWxlPVwicGFja2FnZXMvdGFicy9zcmMvdGFiLW5hdi52dWVcIjt2YXIgUmQ9ZSh7bmFtZTpcIkVsVGFic1wiLGNvbXBvbmVudHM6e1RhYk5hdjokZH0scHJvcHM6e3R5cGU6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJcIn0sYWN0aXZlTmFtZTp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIlwifSxjbG9zYWJsZTpCb29sZWFuLGFkZGFibGU6Qm9vbGVhbixtb2RlbFZhbHVlOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiXCJ9LGVkaXRhYmxlOkJvb2xlYW4sdGFiUG9zaXRpb246e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJ0b3BcIn0sYmVmb3JlTGVhdmU6e3R5cGU6RnVuY3Rpb24sZGVmYXVsdDpudWxsfSxzdHJldGNoOkJvb2xlYW59LGVtaXRzOltcInRhYi1jbGlja1wiLFwiZWRpdFwiLFwidGFiLXJlbW92ZVwiLFwidGFiLWFkZFwiLFwiaW5wdXRcIixcInVwZGF0ZTptb2RlbFZhbHVlXCJdLHNldHVwKGUsbCl7Y29uc3QgYT10KG51bGwpLG49dChlLm1vZGVsVmFsdWV8fGUuYWN0aXZlTmFtZXx8XCIwXCIpLG89dChbXSksaT12KCkscj17fTt4KFwicm9vdFRhYnNcIix7cHJvcHM6ZSxjdXJyZW50TmFtZTpufSkseChcInVwZGF0ZVBhbmVTdGF0ZVwiLChlPT57cltlLnVpZF09ZX0pKSx5KCgoKT0+ZS5hY3RpdmVOYW1lKSwoZT0+e2MoZSl9KSkseSgoKCk9PmUubW9kZWxWYWx1ZSksKGU9PntjKGUpfSkpLHkobiwoKCk9PnthLnZhbHVlJiZrKCgoKT0+e2EudmFsdWUuJG5leHRUaWNrKCgoKT0+e2EudmFsdWUuc2Nyb2xsVG9BY3RpdmVUYWIoKX0pKX0pKSx1KCEwKX0pKTtjb25zdCBzPShlLHQ9W10pPT4oQXJyYXkuZnJvbShlLmNoaWxkcmVufHxbXSkuZm9yRWFjaCgoZT0+e2xldCBsPWUudHlwZTtsPWwubmFtZXx8bCxcIkVsVGFiUGFuZVwiPT09bCYmZS5jb21wb25lbnQ/dC5wdXNoKGUuY29tcG9uZW50KTpsIT09RSYmXCJ0ZW1wbGF0ZVwiIT09bHx8cyhlLHQpfSkpLHQpLHU9KGU9ITEpPT57aWYobC5zbG90cy5kZWZhdWx0KXtjb25zdCB0PWkuc3ViVHJlZS5jaGlsZHJlbixsPUFycmF5LmZyb20odCkuZmluZCgoKHtwcm9wczplfSk9PlwiZWwtdGFic19fY29udGVudFwiPT09ZS5jbGFzcykpO2lmKCFsKXJldHVybjtjb25zdCBhPXMobCkubWFwKChlPT5yW2UudWlkXSkpLG49IShhLmxlbmd0aD09PW8udmFsdWUubGVuZ3RoJiZhLmV2ZXJ5KCgoZSx0KT0+ZS51aWQ9PT1vLnZhbHVlW3RdLnVpZCkpKTsoZXx8bikmJihvLnZhbHVlPWEpfWVsc2UgMCE9PW8udmFsdWUubGVuZ3RoJiYoby52YWx1ZT1bXSl9LGQ9ZT0+e24udmFsdWU9ZSxsLmVtaXQoXCJpbnB1dFwiLGUpLGwuZW1pdChcInVwZGF0ZTptb2RlbFZhbHVlXCIsZSl9LGM9dD0+e2lmKG4udmFsdWUhPT10JiZlLmJlZm9yZUxlYXZlKXtjb25zdCBsPWUuYmVmb3JlTGVhdmUodCxuLnZhbHVlKTtsJiZsLnRoZW4/bC50aGVuKCgoKT0+e2QodCksYS52YWx1ZSYmYS52YWx1ZS5yZW1vdmVGb2N1cygpfSksKCgpPT57fSkpOiExIT09bCYmZCh0KX1lbHNlIGQodCl9O3JldHVybiBTKCgoKT0+e3UoKX0pKSxfKCgoKT0+e3UoKX0pKSx7bmF2JDphLGhhbmRsZVRhYkNsaWNrOihlLHQsYSk9PntlLnByb3BzLmRpc2FibGVkfHwoYyh0KSxsLmVtaXQoXCJ0YWItY2xpY2tcIixlLGEpKX0saGFuZGxlVGFiUmVtb3ZlOihlLHQpPT57ZS5wcm9wcy5kaXNhYmxlZHx8KHQuc3RvcFByb3BhZ2F0aW9uKCksbC5lbWl0KFwiZWRpdFwiLGUucHJvcHMubmFtZSxcInJlbW92ZVwiKSxsLmVtaXQoXCJ0YWItcmVtb3ZlXCIsZS5wcm9wcy5uYW1lKSl9LGhhbmRsZVRhYkFkZDooKT0+e2wuZW1pdChcImVkaXRcIixudWxsLFwiYWRkXCIpLGwuZW1pdChcInRhYi1hZGRcIil9LGN1cnJlbnROYW1lOm4scGFuZXM6b319LHJlbmRlcigpe3ZhciBlO2xldHt0eXBlOnQsaGFuZGxlVGFiQ2xpY2s6bCxoYW5kbGVUYWJSZW1vdmU6YSxoYW5kbGVUYWJBZGQ6bixjdXJyZW50TmFtZTpvLHBhbmVzOmksZWRpdGFibGU6cixhZGRhYmxlOnMsdGFiUG9zaXRpb246dSxzdHJldGNoOmR9PXRoaXM7Y29uc3QgYz1yfHxzP0QoXCJzcGFuXCIse2NsYXNzOlwiZWwtdGFic19fbmV3LXRhYlwiLHRhYmluZGV4OlwiMFwiLG9uQ2xpY2s6bixvbktleWRvd246ZT0+e2UuY29kZT09PWZ0LmVudGVyJiZuKCl9fSxbRChcImlcIix7Y2xhc3M6XCJlbC1pY29uLXBsdXNcIn0pXSk6bnVsbCxwPUQoXCJkaXZcIix7Y2xhc3M6W1wiZWwtdGFic19faGVhZGVyXCIsXCJpcy1cIit1XX0sW2MsRCgkZCx7Y3VycmVudE5hbWU6byxlZGl0YWJsZTpyLHR5cGU6dCxwYW5lczppLHN0cmV0Y2g6ZCxyZWY6XCJuYXYkXCIsb25UYWJDbGljazpsLG9uVGFiUmVtb3ZlOmF9KV0pLGg9RChcImRpdlwiLHtjbGFzczpcImVsLXRhYnNfX2NvbnRlbnRcIn0sbnVsbD09PShlPXRoaXMuJHNsb3RzKXx8dm9pZCAwPT09ZT92b2lkIDA6ZS5kZWZhdWx0KCkpO3JldHVybiBEKFwiZGl2XCIse2NsYXNzOntcImVsLXRhYnNcIjohMCxcImVsLXRhYnMtLWNhcmRcIjpcImNhcmRcIj09PXQsW1wiZWwtdGFicy0tXCIrdV06ITAsXCJlbC10YWJzLS1ib3JkZXItY2FyZFwiOlwiYm9yZGVyLWNhcmRcIj09PXR9fSxcImJvdHRvbVwiIT09dT9bcCxoXTpbaCxwXSl9fSk7UmQuX19maWxlPVwicGFja2FnZXMvdGFicy9zcmMvdGFicy52dWVcIixSZC5pbnN0YWxsPWU9PntlLmNvbXBvbmVudChSZC5uYW1lLFJkKX07Y29uc3QgSGQ9ZT0+e2NvbnN0IHQ9KGV8fFwiXCIpLnNwbGl0KFwiOlwiKTtpZih0Lmxlbmd0aD49Mil7cmV0dXJue2hvdXJzOnBhcnNlSW50KHRbMF0sMTApLG1pbnV0ZXM6cGFyc2VJbnQodFsxXSwxMCl9fXJldHVybiBudWxsfSxXZD0oZSx0KT0+e2NvbnN0IGw9SGQoZSksYT1IZCh0KSxuPWwubWludXRlcys2MCpsLmhvdXJzLG89YS5taW51dGVzKzYwKmEuaG91cnM7cmV0dXJuIG49PT1vPzA6bj5vPzE6LTF9LGpkPShlLHQpPT57Y29uc3QgbD1IZChlKSxhPUhkKHQpLG49e2hvdXJzOmwuaG91cnMsbWludXRlczpsLm1pbnV0ZXN9O3JldHVybiBuLm1pbnV0ZXMrPWEubWludXRlcyxuLmhvdXJzKz1hLmhvdXJzLG4uaG91cnMrPU1hdGguZmxvb3Iobi5taW51dGVzLzYwKSxuLm1pbnV0ZXM9bi5taW51dGVzJTYwLChlPT4oZS5ob3VyczwxMD9cIjBcIitlLmhvdXJzOmUuaG91cnMpK1wiOlwiKyhlLm1pbnV0ZXM8MTA/XCIwXCIrZS5taW51dGVzOmUubWludXRlcykpKG4pfTt2YXIgS2Q9ZSh7bmFtZTpcIkVsVGltZVNlbGVjdFwiLGNvbXBvbmVudHM6e0VsU2VsZWN0Ok1zLEVsT3B0aW9uOl9zfSxtb2RlbDp7cHJvcDpcInZhbHVlXCIsZXZlbnQ6XCJjaGFuZ2VcIn0scHJvcHM6e21vZGVsVmFsdWU6U3RyaW5nLGVkaXRhYmxlOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMH0sY2xlYXJhYmxlOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMH0sc2l6ZTp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIlwiLHZhbGlkYXRvcjplPT4hZXx8LTEhPT1bXCJtZWRpdW1cIixcInNtYWxsXCIsXCJtaW5pXCJdLmluZGV4T2YoZSl9LHBsYWNlaG9sZGVyOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiXCJ9LHN0YXJ0Ont0eXBlOlN0cmluZyxkZWZhdWx0OlwiMDk6MDBcIn0sZW5kOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiMTg6MDBcIn0sc3RlcDp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIjAwOjMwXCJ9LG1pblRpbWU6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJcIn0sbWF4VGltZTp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIlwifSxuYW1lOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiXCJ9LHByZWZpeEljb246e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJlbC1pY29uLXRpbWVcIn0sY2xlYXJJY29uOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiZWwtaWNvbi1jaXJjbGUtY2xvc2VcIn19LGVtaXRzOltcImNoYW5nZVwiLFwiYmx1clwiLFwiZm9jdXNcIixcInVwZGF0ZTptb2RlbFZhbHVlXCJdLHNldHVwOmU9Pih7dmFsdWU6dChlLm1vZGVsVmFsdWUpLGl0ZW1zOmwoKCgpPT57Y29uc3QgdD1bXTtpZihlLnN0YXJ0JiZlLmVuZCYmZS5zdGVwKXtsZXQgbD1lLnN0YXJ0O2Zvcig7V2QobCxlLmVuZCk8PTA7KXQucHVzaCh7dmFsdWU6bCxkaXNhYmxlZDpXZChsLGUubWluVGltZXx8XCItMTotMVwiKTw9MHx8V2QobCxlLm1heFRpbWV8fFwiMTAwOjEwMFwiKT49MH0pLGw9amQobCxlLnN0ZXApfXJldHVybiB0fSkpfSl9KTtLZC5yZW5kZXI9ZnVuY3Rpb24oZSx0LGwsbyxyLHUpe2NvbnN0IGQ9UChcImVsLW9wdGlvblwiKSxjPVAoXCJlbC1zZWxlY3RcIik7cmV0dXJuIGEoKSxuKGMse21vZGVsVmFsdWU6ZS52YWx1ZSxcIm9uVXBkYXRlOm1vZGVsVmFsdWVcIjp0WzFdfHwodFsxXT10PT5lLnZhbHVlPXQpLGRpc2FibGVkOiFlLmVkaXRhYmxlLGNsZWFyYWJsZTplLmNsZWFyYWJsZSxcImNsZWFyLWljb25cIjplLmNsZWFySWNvbixzaXplOmUuc2l6ZSxwbGFjZWhvbGRlcjplLnBsYWNlaG9sZGVyLFwiZGVmYXVsdC1maXJzdC1vcHRpb25cIjpcIlwiLGZpbHRlcmFibGU6XCJcIixvbkNoYW5nZTp0WzJdfHwodFsyXT10PT57ZS4kZW1pdChcImNoYW5nZVwiLHQpLGUuJGVtaXQoXCJ1cGRhdGU6bW9kZWxWYWx1ZVwiLHQpfSksb25CbHVyOnRbM118fCh0WzNdPXQ9PmUuJGVtaXQoXCJibHVyXCIsdCkpLG9uRm9jdXM6dFs0XXx8KHRbNF09dD0+ZS4kZW1pdChcImZvY3VzXCIsdCkpfSx7cHJlZml4OmkoKCgpPT5bcyhcImlcIix7Y2xhc3M6XCJlbC1pbnB1dF9faWNvbiBcIitlLnByZWZpeEljb259LG51bGwsMildKSksZGVmYXVsdDppKCgoKT0+WyhhKCEwKSxuKEUsbnVsbCxIKGUuaXRlbXMsKGU9PihhKCksbihkLHtrZXk6ZS52YWx1ZSxsYWJlbDplLnZhbHVlLHZhbHVlOmUudmFsdWUsZGlzYWJsZWQ6ZS5kaXNhYmxlZH0sbnVsbCw4LFtcImxhYmVsXCIsXCJ2YWx1ZVwiLFwiZGlzYWJsZWRcIl0pKSkpLDEyOCkpXSkpLF86MX0sOCxbXCJtb2RlbFZhbHVlXCIsXCJkaXNhYmxlZFwiLFwiY2xlYXJhYmxlXCIsXCJjbGVhci1pY29uXCIsXCJzaXplXCIsXCJwbGFjZWhvbGRlclwiXSl9LEtkLl9fZmlsZT1cInBhY2thZ2VzL3RpbWUtc2VsZWN0L3NyYy90aW1lLXNlbGVjdC52dWVcIixLZC5pbnN0YWxsPWU9PntlLmNvbXBvbmVudChLZC5uYW1lLEtkKX07dmFyIFlkPWUoe25hbWU6XCJFbFRpbWVsaW5lXCIsc2V0dXA6KGUsdCk9Pih4KFwidGltZWxpbmVcIix0KSwoKT0+e3ZhciBlLGw7cmV0dXJuIEQoXCJ1bFwiLHtjbGFzczp7XCJlbC10aW1lbGluZVwiOiEwfX0sbnVsbD09PShsPShlPXQuc2xvdHMpLmRlZmF1bHQpfHx2b2lkIDA9PT1sP3ZvaWQgMDpsLmNhbGwoZSkpfSl9KTtZZC5fX2ZpbGU9XCJwYWNrYWdlcy90aW1lbGluZS9zcmMvaW5kZXgudnVlXCIsWWQuaW5zdGFsbD1lPT57ZS5jb21wb25lbnQoWWQubmFtZSxZZCl9O3ZhciBxZD1lKHtuYW1lOlwiRWxUaW1lbGluZUl0ZW1cIixwcm9wczp7dGltZXN0YW1wOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiXCJ9LGhpZGVUaW1lc3RhbXA6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiExfSxwbGFjZW1lbnQ6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJib3R0b21cIn0sdHlwZTp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIlwifSxjb2xvcjp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIlwifSxzaXplOnt0eXBlOlN0cmluZyxkZWZhdWx0Olwibm9ybWFsXCJ9LGljb246e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJcIn19LHNldHVwKCl7dyhcInRpbWVsaW5lXCIpfX0pO2NvbnN0IFVkPXtjbGFzczpcImVsLXRpbWVsaW5lLWl0ZW1cIn0sR2Q9cyhcImRpdlwiLHtjbGFzczpcImVsLXRpbWVsaW5lLWl0ZW1fX3RhaWxcIn0sbnVsbCwtMSksWGQ9e2tleToxLGNsYXNzOlwiZWwtdGltZWxpbmUtaXRlbV9fZG90XCJ9LFFkPXtjbGFzczpcImVsLXRpbWVsaW5lLWl0ZW1fX3dyYXBwZXJcIn0sWmQ9e2tleTowLGNsYXNzOlwiZWwtdGltZWxpbmUtaXRlbV9fdGltZXN0YW1wIGlzLXRvcFwifSxKZD17Y2xhc3M6XCJlbC10aW1lbGluZS1pdGVtX19jb250ZW50XCJ9LGVjPXtrZXk6MSxjbGFzczpcImVsLXRpbWVsaW5lLWl0ZW1fX3RpbWVzdGFtcCBpcy1ib3R0b21cIn07cWQucmVuZGVyPWZ1bmN0aW9uKGUsdCxsLG8saSxyKXtyZXR1cm4gYSgpLG4oXCJsaVwiLFVkLFtHZCxlLiRzbG90cy5kb3Q/dShcInYtaWZcIiwhMCk6KGEoKSxuKFwiZGl2XCIse2tleTowLGNsYXNzOltcImVsLXRpbWVsaW5lLWl0ZW1fX25vZGVcIixbXCJlbC10aW1lbGluZS1pdGVtX19ub2RlLS1cIisoZS5zaXplfHxcIlwiKSxcImVsLXRpbWVsaW5lLWl0ZW1fX25vZGUtLVwiKyhlLnR5cGV8fFwiXCIpXV0sc3R5bGU6e2JhY2tncm91bmRDb2xvcjplLmNvbG9yfX0sW2UuaWNvbj8oYSgpLG4oXCJpXCIse2tleTowLGNsYXNzOltcImVsLXRpbWVsaW5lLWl0ZW1fX2ljb25cIixlLmljb25dfSxudWxsLDIpKTp1KFwidi1pZlwiLCEwKV0sNikpLGUuJHNsb3RzLmRvdD8oYSgpLG4oXCJkaXZcIixYZCxbZChlLiRzbG90cyxcImRvdFwiKV0pKTp1KFwidi1pZlwiLCEwKSxzKFwiZGl2XCIsUWQsW2UuaGlkZVRpbWVzdGFtcHx8XCJ0b3BcIiE9PWUucGxhY2VtZW50P3UoXCJ2LWlmXCIsITApOihhKCksbihcImRpdlwiLFpkLHAoZS50aW1lc3RhbXApLDEpKSxzKFwiZGl2XCIsSmQsW2QoZS4kc2xvdHMsXCJkZWZhdWx0XCIpXSksZS5oaWRlVGltZXN0YW1wfHxcImJvdHRvbVwiIT09ZS5wbGFjZW1lbnQ/dShcInYtaWZcIiwhMCk6KGEoKSxuKFwiZGl2XCIsZWMscChlLnRpbWVzdGFtcCksMSkpXSldKX0scWQuX19maWxlPVwicGFja2FnZXMvdGltZWxpbmUvc3JjL2l0ZW0udnVlXCIscWQuaW5zdGFsbD1lPT57ZS5jb21wb25lbnQocWQubmFtZSxxZCl9O3ZhciB0Yz1lKHtuYW1lOlwiRWxUcmFuc2ZlclBhbmVsXCIsY29tcG9uZW50czp7RWxDaGVja2JveEdyb3VwOlRuLEVsQ2hlY2tib3g6S2EsRWxJbnB1dDpXdCxPcHRpb25Db250ZW50Oih7b3B0aW9uOmV9KT0+ZX0scHJvcHM6e2RhdGE6e3R5cGU6QXJyYXksZGVmYXVsdDooKT0+W119LG9wdGlvblJlbmRlcjpGdW5jdGlvbixwbGFjZWhvbGRlcjpTdHJpbmcsdGl0bGU6U3RyaW5nLGZpbHRlcmFibGU6Qm9vbGVhbixmb3JtYXQ6T2JqZWN0LGZpbHRlck1ldGhvZDpGdW5jdGlvbixkZWZhdWx0Q2hlY2tlZDpBcnJheSxwcm9wczpPYmplY3R9LGVtaXRzOltcImNoZWNrZWQtY2hhbmdlXCJdLHNldHVwKGUse2VtaXQ6dCxzbG90czphfSl7Y29uc3Qgbj1mKHtjaGVja2VkOltdLGFsbENoZWNrZWQ6ITEscXVlcnk6XCJcIixpbnB1dEhvdmVyOiExLGNoZWNrQ2hhbmdlQnlVc2VyOiEwfSkse2xhYmVsUHJvcDpvLGtleVByb3A6aSxkaXNhYmxlZFByb3A6cixmaWx0ZXJlZERhdGE6cyxjaGVja2VkU3VtbWFyeTp1LGlzSW5kZXRlcm1pbmF0ZTpkLGhhbmRsZUFsbENoZWNrZWRDaGFuZ2U6Y309KChlLHQsYSk9Pntjb25zdCBuPWwoKCgpPT5lLnByb3BzLmxhYmVsfHxcImxhYmVsXCIpKSxvPWwoKCgpPT5lLnByb3BzLmtleXx8XCJrZXlcIikpLGk9bCgoKCk9PmUucHJvcHMuZGlzYWJsZWR8fFwiZGlzYWJsZWRcIikpLHI9bCgoKCk9PmUuZGF0YS5maWx0ZXIoKGw9PlwiZnVuY3Rpb25cIj09dHlwZW9mIGUuZmlsdGVyTWV0aG9kP2UuZmlsdGVyTWV0aG9kKHQucXVlcnksbCk6KGxbbi52YWx1ZV18fGxbby52YWx1ZV0udG9TdHJpbmcoKSkudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyh0LnF1ZXJ5LnRvTG93ZXJDYXNlKCkpKSkpKSxzPWwoKCgpPT5yLnZhbHVlLmZpbHRlcigoZT0+IWVbaS52YWx1ZV0pKSkpLHU9bCgoKCk9Pntjb25zdCBsPXQuY2hlY2tlZC5sZW5ndGgsYT1lLmRhdGEubGVuZ3RoLHtub0NoZWNrZWQ6bixoYXNDaGVja2VkOm99PWUuZm9ybWF0O3JldHVybiBuJiZvP2w+MD9vLnJlcGxhY2UoL1xcJHtjaGVja2VkfS9nLGwudG9TdHJpbmcoKSkucmVwbGFjZSgvXFwke3RvdGFsfS9nLGEudG9TdHJpbmcoKSk6bi5yZXBsYWNlKC9cXCR7dG90YWx9L2csYS50b1N0cmluZygpKTpgJHtsfS8ke2F9YH0pKSxkPWwoKCgpPT57Y29uc3QgZT10LmNoZWNrZWQubGVuZ3RoO3JldHVybiBlPjAmJmU8cy52YWx1ZS5sZW5ndGh9KSksYz0oKT0+e2NvbnN0IGU9cy52YWx1ZS5tYXAoKGU9PmVbby52YWx1ZV0pKTt0LmFsbENoZWNrZWQ9ZS5sZW5ndGg+MCYmZS5ldmVyeSgoZT0+dC5jaGVja2VkLmluY2x1ZGVzKGUpKSl9O3JldHVybiB5KCgoKT0+dC5jaGVja2VkKSwoKGUsbCk9PntpZihjKCksdC5jaGVja0NoYW5nZUJ5VXNlcil7Y29uc3QgdD1lLmNvbmNhdChsKS5maWx0ZXIoKHQ9PiFlLmluY2x1ZGVzKHQpfHwhbC5pbmNsdWRlcyh0KSkpO2EoXCJjaGVja2VkLWNoYW5nZVwiLGUsdCl9ZWxzZSBhKFwiY2hlY2tlZC1jaGFuZ2VcIixlKSx0LmNoZWNrQ2hhbmdlQnlVc2VyPSEwfSkpLHkocywoKCk9PntjKCl9KSkseSgoKCk9PmUuZGF0YSksKCgpPT57Y29uc3QgZT1bXSxsPXIudmFsdWUubWFwKChlPT5lW28udmFsdWVdKSk7dC5jaGVja2VkLmZvckVhY2goKHQ9PntsLmluY2x1ZGVzKHQpJiZlLnB1c2godCl9KSksdC5jaGVja0NoYW5nZUJ5VXNlcj0hMSx0LmNoZWNrZWQ9ZX0pKSx5KCgoKT0+ZS5kZWZhdWx0Q2hlY2tlZCksKChlLGwpPT57aWYobCYmZS5sZW5ndGg9PT1sLmxlbmd0aCYmZS5ldmVyeSgoZT0+bC5pbmNsdWRlcyhlKSkpKXJldHVybjtjb25zdCBhPVtdLG49cy52YWx1ZS5tYXAoKGU9PmVbby52YWx1ZV0pKTtlLmZvckVhY2goKGU9PntuLmluY2x1ZGVzKGUpJiZhLnB1c2goZSl9KSksdC5jaGVja0NoYW5nZUJ5VXNlcj0hMSx0LmNoZWNrZWQ9YX0pLHtpbW1lZGlhdGU6ITB9KSx7bGFiZWxQcm9wOm4sa2V5UHJvcDpvLGRpc2FibGVkUHJvcDppLGZpbHRlcmVkRGF0YTpyLGNoZWNrYWJsZURhdGE6cyxjaGVja2VkU3VtbWFyeTp1LGlzSW5kZXRlcm1pbmF0ZTpkLHVwZGF0ZUFsbENoZWNrZWQ6YyxoYW5kbGVBbGxDaGVja2VkQ2hhbmdlOmU9Pnt0LmNoZWNrZWQ9ZT9zLnZhbHVlLm1hcCgoZT0+ZVtvLnZhbHVlXSkpOltdfX19KShlLG4sdCkscD1sKCgoKT0+bi5xdWVyeS5sZW5ndGg+MCYmMD09PXMudmFsdWUubGVuZ3RoKSksaD1sKCgoKT0+bi5xdWVyeS5sZW5ndGg+MCYmbi5pbnB1dEhvdmVyP1wiY2lyY2xlLWNsb3NlXCI6XCJzZWFyY2hcIikpLHY9bCgoKCk9PiEhYS5kZWZhdWx0KClbMF0uY2hpbGRyZW4ubGVuZ3RoKSkse2NoZWNrZWQ6bSxhbGxDaGVja2VkOmcscXVlcnk6YixpbnB1dEhvdmVyOmssY2hlY2tDaGFuZ2VCeVVzZXI6eH09QyhuKTtyZXR1cm57bGFiZWxQcm9wOm8sa2V5UHJvcDppLGRpc2FibGVkUHJvcDpyLGZpbHRlcmVkRGF0YTpzLGNoZWNrZWRTdW1tYXJ5OnUsaXNJbmRldGVybWluYXRlOmQsaGFuZGxlQWxsQ2hlY2tlZENoYW5nZTpjLGNoZWNrZWQ6bSxhbGxDaGVja2VkOmcscXVlcnk6YixpbnB1dEhvdmVyOmssY2hlY2tDaGFuZ2VCeVVzZXI6eCxoYXNOb01hdGNoOnAsaW5wdXRJY29uOmgsaGFzRm9vdGVyOnYsY2xlYXJRdWVyeTooKT0+e1wiY2lyY2xlLWNsb3NlXCI9PT1oLnZhbHVlJiYobi5xdWVyeT1cIlwiKX0sdDpxbH19fSk7Y29uc3QgbGM9e2NsYXNzOlwiZWwtdHJhbnNmZXItcGFuZWxcIn0sYWM9e2NsYXNzOlwiZWwtdHJhbnNmZXItcGFuZWxfX2hlYWRlclwifSxuYz17a2V5OjAsY2xhc3M6XCJlbC10cmFuc2Zlci1wYW5lbF9fZm9vdGVyXCJ9O3RjLnJlbmRlcj1mdW5jdGlvbihlLHQsbCxvLHYsbSl7Y29uc3QgZj1QKFwiZWwtY2hlY2tib3hcIiksZz1QKFwiZWwtaW5wdXRcIiksYj1QKFwib3B0aW9uLWNvbnRlbnRcIikseT1QKFwiZWwtY2hlY2tib3gtZ3JvdXBcIik7cmV0dXJuIGEoKSxuKFwiZGl2XCIsbGMsW3MoXCJwXCIsYWMsW3MoZix7bW9kZWxWYWx1ZTplLmFsbENoZWNrZWQsXCJvblVwZGF0ZTptb2RlbFZhbHVlXCI6dFsxXXx8KHRbMV09dD0+ZS5hbGxDaGVja2VkPXQpLGluZGV0ZXJtaW5hdGU6ZS5pc0luZGV0ZXJtaW5hdGUsb25DaGFuZ2U6ZS5oYW5kbGVBbGxDaGVja2VkQ2hhbmdlfSx7ZGVmYXVsdDppKCgoKT0+W2MocChlLnRpdGxlKStcIiBcIiwxKSxzKFwic3BhblwiLG51bGwscChlLmNoZWNrZWRTdW1tYXJ5KSwxKV0pKSxfOjF9LDgsW1wibW9kZWxWYWx1ZVwiLFwiaW5kZXRlcm1pbmF0ZVwiLFwib25DaGFuZ2VcIl0pXSkscyhcImRpdlwiLHtjbGFzczpbXCJlbC10cmFuc2Zlci1wYW5lbF9fYm9keVwiLGUuaGFzRm9vdGVyP1wiaXMtd2l0aC1mb290ZXJcIjpcIlwiXX0sW2UuZmlsdGVyYWJsZT8oYSgpLG4oZyx7a2V5OjAsbW9kZWxWYWx1ZTplLnF1ZXJ5LFwib25VcGRhdGU6bW9kZWxWYWx1ZVwiOnRbM118fCh0WzNdPXQ9PmUucXVlcnk9dCksY2xhc3M6XCJlbC10cmFuc2Zlci1wYW5lbF9fZmlsdGVyXCIsc2l6ZTpcInNtYWxsXCIscGxhY2Vob2xkZXI6ZS5wbGFjZWhvbGRlcixvbk1vdXNlZW50ZXI6dFs0XXx8KHRbNF09dD0+ZS5pbnB1dEhvdmVyPSEwKSxvbk1vdXNlbGVhdmU6dFs1XXx8KHRbNV09dD0+ZS5pbnB1dEhvdmVyPSExKX0se3ByZWZpeDppKCgoKT0+W3MoXCJpXCIse2NsYXNzOltcImVsLWlucHV0X19pY29uXCIsXCJlbC1pY29uLVwiK2UuaW5wdXRJY29uXSxvbkNsaWNrOnRbMl18fCh0WzJdPSguLi50KT0+ZS5jbGVhclF1ZXJ5KC4uLnQpKX0sbnVsbCwyKV0pKSxfOjF9LDgsW1wibW9kZWxWYWx1ZVwiLFwicGxhY2Vob2xkZXJcIl0pKTp1KFwidi1pZlwiLCEwKSxyKHMoeSx7bW9kZWxWYWx1ZTplLmNoZWNrZWQsXCJvblVwZGF0ZTptb2RlbFZhbHVlXCI6dFs2XXx8KHRbNl09dD0+ZS5jaGVja2VkPXQpLGNsYXNzOlt7XCJpcy1maWx0ZXJhYmxlXCI6ZS5maWx0ZXJhYmxlfSxcImVsLXRyYW5zZmVyLXBhbmVsX19saXN0XCJdfSx7ZGVmYXVsdDppKCgoKT0+WyhhKCEwKSxuKEUsbnVsbCxIKGUuZmlsdGVyZWREYXRhLCh0PT4oYSgpLG4oZix7a2V5OnRbZS5rZXlQcm9wXSxjbGFzczpcImVsLXRyYW5zZmVyLXBhbmVsX19pdGVtXCIsbGFiZWw6dFtlLmtleVByb3BdLGRpc2FibGVkOnRbZS5kaXNhYmxlZFByb3BdfSx7ZGVmYXVsdDppKCgoKT0+W3MoYix7b3B0aW9uOmUub3B0aW9uUmVuZGVyKHQpfSxudWxsLDgsW1wib3B0aW9uXCJdKV0pKSxfOjJ9LDEwMzIsW1wibGFiZWxcIixcImRpc2FibGVkXCJdKSkpKSwxMjgpKV0pKSxfOjF9LDgsW1wibW9kZWxWYWx1ZVwiLFwiY2xhc3NcIl0pLFtbaCwhZS5oYXNOb01hdGNoJiZlLmRhdGEubGVuZ3RoPjBdXSkscihzKFwicFwiLHtjbGFzczpcImVsLXRyYW5zZmVyLXBhbmVsX19lbXB0eVwifSxwKGUuaGFzTm9NYXRjaD9lLnQoXCJlbC50cmFuc2Zlci5ub01hdGNoXCIpOmUudChcImVsLnRyYW5zZmVyLm5vRGF0YVwiKSksNTEzKSxbW2gsZS5oYXNOb01hdGNofHwwPT09ZS5kYXRhLmxlbmd0aF1dKV0sMiksZS5oYXNGb290ZXI/KGEoKSxuKFwicFwiLG5jLFtkKGUuJHNsb3RzLFwiZGVmYXVsdFwiKV0pKTp1KFwidi1pZlwiLCEwKV0pfSx0Yy5fX2ZpbGU9XCJwYWNrYWdlcy90cmFuc2Zlci9zcmMvdHJhbnNmZXItcGFuZWwudnVlXCI7Y29uc3Qgb2M9XCJjaGFuZ2VcIjt2YXIgaWM9ZSh7bmFtZTpcIkVsVHJhbnNmZXJcIixjb21wb25lbnRzOntUcmFuc2ZlclBhbmVsOnRjLEVsQnV0dG9uOiRsfSxwcm9wczp7ZGF0YTp7dHlwZTpBcnJheSxkZWZhdWx0OigpPT5bXX0sdGl0bGVzOnt0eXBlOkFycmF5LGRlZmF1bHQ6KCk9PltdfSxidXR0b25UZXh0czp7dHlwZTpBcnJheSxkZWZhdWx0OigpPT5bXX0sZmlsdGVyUGxhY2Vob2xkZXI6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJcIn0sZmlsdGVyTWV0aG9kOkZ1bmN0aW9uLGxlZnREZWZhdWx0Q2hlY2tlZDp7dHlwZTpBcnJheSxkZWZhdWx0OigpPT5bXX0scmlnaHREZWZhdWx0Q2hlY2tlZDp7dHlwZTpBcnJheSxkZWZhdWx0OigpPT5bXX0scmVuZGVyQ29udGVudDpGdW5jdGlvbixtb2RlbFZhbHVlOnt0eXBlOkFycmF5LGRlZmF1bHQ6KCk9PltdfSxmb3JtYXQ6e3R5cGU6T2JqZWN0LGRlZmF1bHQ6KCk9Pih7fSl9LGZpbHRlcmFibGU6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiExfSxwcm9wczp7dHlwZTpPYmplY3QsZGVmYXVsdDooKT0+KHtsYWJlbDpcImxhYmVsXCIsa2V5Olwia2V5XCIsZGlzYWJsZWQ6XCJkaXNhYmxlZFwifSl9LHRhcmdldE9yZGVyOnt0eXBlOlN0cmluZyxkZWZhdWx0Olwib3JpZ2luYWxcIix2YWxpZGF0b3I6ZT0+W1wib3JpZ2luYWxcIixcInB1c2hcIixcInVuc2hpZnRcIl0uaW5jbHVkZXMoZSl9fSxlbWl0czpbUHQsb2MsXCJsZWZ0LWNoZWNrLWNoYW5nZVwiLFwicmlnaHQtY2hlY2stY2hhbmdlXCJdLHNldHVwKGUse2VtaXQ6YSxzbG90czpufSl7Y29uc3Qgbz13KFwiZWxGb3JtSXRlbVwiLHt9KSxpPWYoe2xlZnRDaGVja2VkOltdLHJpZ2h0Q2hlY2tlZDpbXX0pLHtwcm9wc0tleTpyLHNvdXJjZURhdGE6cyx0YXJnZXREYXRhOnV9PShlPT57Y29uc3QgdD1sKCgoKT0+ZS5wcm9wcy5rZXkpKSxhPWwoKCgpPT5lLmRhdGEucmVkdWNlKCgoZSxsKT0+KGVbbFt0LnZhbHVlXV09bCkmJmUpLHt9KSkpLG49bCgoKCk9PmUuZGF0YS5maWx0ZXIoKGw9PiFlLm1vZGVsVmFsdWUuaW5jbHVkZXMobFt0LnZhbHVlXSkpKSkpLG89bCgoKCk9Plwib3JpZ2luYWxcIj09PWUudGFyZ2V0T3JkZXI/ZS5kYXRhLmZpbHRlcigobD0+ZS5tb2RlbFZhbHVlLmluY2x1ZGVzKGxbdC52YWx1ZV0pKSk6ZS5tb2RlbFZhbHVlLnJlZHVjZSgoKGUsdCk9Pntjb25zdCBsPWEudmFsdWVbdF07cmV0dXJuIGwmJmUucHVzaChsKSxlfSksW10pKSk7cmV0dXJue3Byb3BzS2V5OnQsc291cmNlRGF0YTpuLHRhcmdldERhdGE6b319KShlKSx7b25Tb3VyY2VDaGVja2VkQ2hhbmdlOmQsb25UYXJnZXRDaGVja2VkQ2hhbmdlOmN9PSgoZSx0KT0+KHtvblNvdXJjZUNoZWNrZWRDaGFuZ2U6KGwsYSk9PntlLmxlZnRDaGVja2VkPWwsdm9pZCAwIT09YSYmdChcImxlZnQtY2hlY2stY2hhbmdlXCIsbCxhKX0sb25UYXJnZXRDaGVja2VkQ2hhbmdlOihsLGEpPT57ZS5yaWdodENoZWNrZWQ9bCx2b2lkIDAhPT1hJiZ0KFwicmlnaHQtY2hlY2stY2hhbmdlXCIsbCxhKX19KSkoaSxhKSx7YWRkVG9MZWZ0OnAsYWRkVG9SaWdodDpofT0oKGUsdCxsLGEpPT57Y29uc3Qgbj0oZSx0LGwpPT57YShQdCxlKSxhKG9jLGUsdCxsKX07cmV0dXJue2FkZFRvTGVmdDooKT0+e2NvbnN0IGw9ZS5tb2RlbFZhbHVlLnNsaWNlKCk7dC5yaWdodENoZWNrZWQuZm9yRWFjaCgoZT0+e2NvbnN0IHQ9bC5pbmRleE9mKGUpO3Q+LTEmJmwuc3BsaWNlKHQsMSl9KSksbihsLFwibGVmdFwiLHQucmlnaHRDaGVja2VkKX0sYWRkVG9SaWdodDooKT0+e2xldCBhPWUubW9kZWxWYWx1ZS5zbGljZSgpO2NvbnN0IG89ZS5kYXRhLmZpbHRlcigoYT0+e2NvbnN0IG49YVtsLnZhbHVlXTtyZXR1cm4gdC5sZWZ0Q2hlY2tlZC5pbmNsdWRlcyhuKSYmIWUubW9kZWxWYWx1ZS5pbmNsdWRlcyhuKX0pKS5tYXAoKGU9PmVbbC52YWx1ZV0pKTthPVwidW5zaGlmdFwiPT09ZS50YXJnZXRPcmRlcj9vLmNvbmNhdChhKTphLmNvbmNhdChvKSxuKGEsXCJyaWdodFwiLHQubGVmdENoZWNrZWQpfX19KShlLGkscixhKSx2PXQobnVsbCksbT10KG51bGwpLGc9bCgoKCk9PjI9PT1lLmJ1dHRvblRleHRzLmxlbmd0aCkpLGI9bCgoKCk9PmUudGl0bGVzWzBdfHxxbChcImVsLnRyYW5zZmVyLnRpdGxlcy4wXCIpKSksaz1sKCgoKT0+ZS50aXRsZXNbMV18fHFsKFwiZWwudHJhbnNmZXIudGl0bGVzLjFcIikpKSx4PWwoKCgpPT5lLmZpbHRlclBsYWNlaG9sZGVyfHxxbChcImVsLnRyYW5zZmVyLmZpbHRlclBsYWNlaG9sZGVyXCIpKSk7eSgoKCk9PmUubW9kZWxWYWx1ZSksKGU9Pnt2YXIgdDtudWxsPT09KHQ9by5mb3JtSXRlbU1pdHQpfHx2b2lkIDA9PT10fHx0LmVtaXQoXCJlbC5mb3JtLmNoYW5nZVwiLGUpfSkpO2NvbnN0IF89bCgoKCk9PnQ9PmUucmVuZGVyQ29udGVudD9lLnJlbmRlckNvbnRlbnQoRCx0KTpuLmRlZmF1bHQ/bi5kZWZhdWx0KHtvcHRpb246dH0pOkQoXCJzcGFuXCIsdFtlLnByb3BzLmxhYmVsXXx8dFtlLnByb3BzLmtleV0pKSk7cmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7c291cmNlRGF0YTpzLHRhcmdldERhdGE6dSxvblNvdXJjZUNoZWNrZWRDaGFuZ2U6ZCxvblRhcmdldENoZWNrZWRDaGFuZ2U6YyxhZGRUb0xlZnQ6cCxhZGRUb1JpZ2h0Omh9LEMoaSkpLHtoYXNCdXR0b25UZXh0czpnLGxlZnRQYW5lbFRpdGxlOmIscmlnaHRQYW5lbFRpdGxlOmsscGFuZWxGaWx0ZXJQbGFjZWhvbGRlcjp4LGNsZWFyUXVlcnk6ZT0+e1wibGVmdFwiPT09ZT92LnZhbHVlLnF1ZXJ5PVwiXCI6XCJyaWdodFwiPT09ZSYmKG0udmFsdWUucXVlcnk9XCJcIil9LG9wdGlvblJlbmRlcjpffSl9fSk7Y29uc3QgcmM9e2NsYXNzOlwiZWwtdHJhbnNmZXJcIn0sc2M9e2NsYXNzOlwiZWwtdHJhbnNmZXJfX2J1dHRvbnNcIn0sdWM9cyhcImlcIix7Y2xhc3M6XCJlbC1pY29uLWFycm93LWxlZnRcIn0sbnVsbCwtMSksZGM9e2tleTowfSxjYz17a2V5OjB9LHBjPXMoXCJpXCIse2NsYXNzOlwiZWwtaWNvbi1hcnJvdy1yaWdodFwifSxudWxsLC0xKTtpYy5yZW5kZXI9ZnVuY3Rpb24oZSx0LGwsbyxyLGMpe2NvbnN0IGg9UChcInRyYW5zZmVyLXBhbmVsXCIpLHY9UChcImVsLWJ1dHRvblwiKTtyZXR1cm4gYSgpLG4oXCJkaXZcIixyYyxbcyhoLHtyZWY6XCJsZWZ0UGFuZWxcIixkYXRhOmUuc291cmNlRGF0YSxcIm9wdGlvbi1yZW5kZXJcIjplLm9wdGlvblJlbmRlcixwbGFjZWhvbGRlcjplLnBhbmVsRmlsdGVyUGxhY2Vob2xkZXIsdGl0bGU6ZS5sZWZ0UGFuZWxUaXRsZSxmaWx0ZXJhYmxlOmUuZmlsdGVyYWJsZSxmb3JtYXQ6ZS5mb3JtYXQsXCJmaWx0ZXItbWV0aG9kXCI6ZS5maWx0ZXJNZXRob2QsXCJkZWZhdWx0LWNoZWNrZWRcIjplLmxlZnREZWZhdWx0Q2hlY2tlZCxwcm9wczplLnByb3BzLG9uQ2hlY2tlZENoYW5nZTplLm9uU291cmNlQ2hlY2tlZENoYW5nZX0se2RlZmF1bHQ6aSgoKCk9PltkKGUuJHNsb3RzLFwibGVmdC1mb290ZXJcIildKSksXzozfSw4LFtcImRhdGFcIixcIm9wdGlvbi1yZW5kZXJcIixcInBsYWNlaG9sZGVyXCIsXCJ0aXRsZVwiLFwiZmlsdGVyYWJsZVwiLFwiZm9ybWF0XCIsXCJmaWx0ZXItbWV0aG9kXCIsXCJkZWZhdWx0LWNoZWNrZWRcIixcInByb3BzXCIsXCJvbkNoZWNrZWRDaGFuZ2VcIl0pLHMoXCJkaXZcIixzYyxbcyh2LHt0eXBlOlwicHJpbWFyeVwiLGNsYXNzOltcImVsLXRyYW5zZmVyX19idXR0b25cIixlLmhhc0J1dHRvblRleHRzP1wiaXMtd2l0aC10ZXh0c1wiOlwiXCJdLGRpc2FibGVkOjA9PT1lLnJpZ2h0Q2hlY2tlZC5sZW5ndGgsb25DbGljazplLmFkZFRvTGVmdH0se2RlZmF1bHQ6aSgoKCk9Plt1Yyx2b2lkIDAhPT1lLmJ1dHRvblRleHRzWzBdPyhhKCksbihcInNwYW5cIixkYyxwKGUuYnV0dG9uVGV4dHNbMF0pLDEpKTp1KFwidi1pZlwiLCEwKV0pKSxfOjF9LDgsW1wiY2xhc3NcIixcImRpc2FibGVkXCIsXCJvbkNsaWNrXCJdKSxzKHYse3R5cGU6XCJwcmltYXJ5XCIsY2xhc3M6W1wiZWwtdHJhbnNmZXJfX2J1dHRvblwiLGUuaGFzQnV0dG9uVGV4dHM/XCJpcy13aXRoLXRleHRzXCI6XCJcIl0sZGlzYWJsZWQ6MD09PWUubGVmdENoZWNrZWQubGVuZ3RoLG9uQ2xpY2s6ZS5hZGRUb1JpZ2h0fSx7ZGVmYXVsdDppKCgoKT0+W3ZvaWQgMCE9PWUuYnV0dG9uVGV4dHNbMV0/KGEoKSxuKFwic3BhblwiLGNjLHAoZS5idXR0b25UZXh0c1sxXSksMSkpOnUoXCJ2LWlmXCIsITApLHBjXSkpLF86MX0sOCxbXCJjbGFzc1wiLFwiZGlzYWJsZWRcIixcIm9uQ2xpY2tcIl0pXSkscyhoLHtyZWY6XCJyaWdodFBhbmVsXCIsZGF0YTplLnRhcmdldERhdGEsXCJvcHRpb24tcmVuZGVyXCI6ZS5vcHRpb25SZW5kZXIscGxhY2Vob2xkZXI6ZS5wYW5lbEZpbHRlclBsYWNlaG9sZGVyLGZpbHRlcmFibGU6ZS5maWx0ZXJhYmxlLGZvcm1hdDplLmZvcm1hdCxcImZpbHRlci1tZXRob2RcIjplLmZpbHRlck1ldGhvZCx0aXRsZTplLnJpZ2h0UGFuZWxUaXRsZSxcImRlZmF1bHQtY2hlY2tlZFwiOmUucmlnaHREZWZhdWx0Q2hlY2tlZCxwcm9wczplLnByb3BzLG9uQ2hlY2tlZENoYW5nZTplLm9uVGFyZ2V0Q2hlY2tlZENoYW5nZX0se2RlZmF1bHQ6aSgoKCk9PltkKGUuJHNsb3RzLFwicmlnaHQtZm9vdGVyXCIpXSkpLF86M30sOCxbXCJkYXRhXCIsXCJvcHRpb24tcmVuZGVyXCIsXCJwbGFjZWhvbGRlclwiLFwiZmlsdGVyYWJsZVwiLFwiZm9ybWF0XCIsXCJmaWx0ZXItbWV0aG9kXCIsXCJ0aXRsZVwiLFwiZGVmYXVsdC1jaGVja2VkXCIsXCJwcm9wc1wiLFwib25DaGVja2VkQ2hhbmdlXCJdKV0pfSxpYy5fX2ZpbGU9XCJwYWNrYWdlcy90cmFuc2Zlci9zcmMvaW5kZXgudnVlXCIsaWMuaW5zdGFsbD1lPT57ZS5jb21wb25lbnQoaWMubmFtZSxpYyl9O2NvbnN0IGhjPVwiJHRyZWVOb2RlSWRcIix2Yz1mdW5jdGlvbihlLHQpe3QmJiF0W2hjXSYmT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsaGMse3ZhbHVlOmUuaWQsZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITEsd3JpdGFibGU6ITF9KX0sbWM9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZT90W2VdOnRbaGNdfSxmYz1lPT57bGV0IHQ9ITAsbD0hMCxhPSEwO2ZvcihsZXQgbj0wLG89ZS5sZW5ndGg7bjxvO24rKyl7Y29uc3Qgbz1lW25dOyghMCE9PW8uY2hlY2tlZHx8by5pbmRldGVybWluYXRlKSYmKHQ9ITEsby5kaXNhYmxlZHx8KGE9ITEpKSwoITEhPT1vLmNoZWNrZWR8fG8uaW5kZXRlcm1pbmF0ZSkmJihsPSExKX1yZXR1cm57YWxsOnQsbm9uZTpsLGFsbFdpdGhvdXREaXNhYmxlOmEsaGFsZjohdCYmIWx9fSxnYz1mdW5jdGlvbihlKXtpZigwPT09ZS5jaGlsZE5vZGVzLmxlbmd0aClyZXR1cm47Y29uc3R7YWxsOnQsbm9uZTpsLGhhbGY6YX09ZmMoZS5jaGlsZE5vZGVzKTt0PyhlLmNoZWNrZWQ9ITAsZS5pbmRldGVybWluYXRlPSExKTphPyhlLmNoZWNrZWQ9ITEsZS5pbmRldGVybWluYXRlPSEwKTpsJiYoZS5jaGVja2VkPSExLGUuaW5kZXRlcm1pbmF0ZT0hMSk7Y29uc3Qgbj1lLnBhcmVudDtuJiYwIT09bi5sZXZlbCYmKGUuc3RvcmUuY2hlY2tTdHJpY3RseXx8Z2MobikpfSxiYz1mdW5jdGlvbihlLHQpe2NvbnN0IGw9ZS5zdG9yZS5wcm9wcyxhPWUuZGF0YXx8e30sbj1sW3RdO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIG4pcmV0dXJuIG4oYSxlKTtpZihcInN0cmluZ1wiPT10eXBlb2YgbilyZXR1cm4gYVtuXTtpZih2b2lkIDA9PT1uKXtjb25zdCBlPWFbdF07cmV0dXJuIHZvaWQgMD09PWU/XCJcIjplfX07bGV0IHljPTA7Y2xhc3Mga2N7Y29uc3RydWN0b3IoZSl7dGhpcy5pZD15YysrLHRoaXMudGV4dD1udWxsLHRoaXMuY2hlY2tlZD0hMSx0aGlzLmluZGV0ZXJtaW5hdGU9ITEsdGhpcy5kYXRhPW51bGwsdGhpcy5leHBhbmRlZD0hMSx0aGlzLnBhcmVudD1udWxsLHRoaXMudmlzaWJsZT0hMCx0aGlzLmlzQ3VycmVudD0hMSx0aGlzLmNhbkZvY3VzPSExO2Zvcihjb25zdCB0IGluIGUpZS5oYXNPd25Qcm9wZXJ0eSh0KSYmKHRoaXNbdF09ZVt0XSk7dGhpcy5sZXZlbD0wLHRoaXMubG9hZGVkPSExLHRoaXMuY2hpbGROb2Rlcz1bXSx0aGlzLmxvYWRpbmc9ITEsdGhpcy5wYXJlbnQmJih0aGlzLmxldmVsPXRoaXMucGFyZW50LmxldmVsKzEpO2NvbnN0IHQ9dGhpcy5zdG9yZTtpZighdCl0aHJvdyBuZXcgRXJyb3IoXCJbTm9kZV1zdG9yZSBpcyByZXF1aXJlZCFcIik7dC5yZWdpc3Rlck5vZGUodGhpcyk7Y29uc3QgbD10LnByb3BzO2lmKGwmJnZvaWQgMCE9PWwuaXNMZWFmKXtjb25zdCBlPWJjKHRoaXMsXCJpc0xlYWZcIik7XCJib29sZWFuXCI9PXR5cGVvZiBlJiYodGhpcy5pc0xlYWZCeVVzZXI9ZSl9aWYoITAhPT10LmxhenkmJnRoaXMuZGF0YT8odGhpcy5zZXREYXRhKHRoaXMuZGF0YSksdC5kZWZhdWx0RXhwYW5kQWxsJiYodGhpcy5leHBhbmRlZD0hMCx0aGlzLmNhbkZvY3VzPSEwKSk6dGhpcy5sZXZlbD4wJiZ0LmxhenkmJnQuZGVmYXVsdEV4cGFuZEFsbCYmdGhpcy5leHBhbmQoKSxBcnJheS5pc0FycmF5KHRoaXMuZGF0YSl8fHZjKHRoaXMsdGhpcy5kYXRhKSwhdGhpcy5kYXRhKXJldHVybjtjb25zdCBhPXQuZGVmYXVsdEV4cGFuZGVkS2V5cyxuPXQua2V5O24mJmEmJi0xIT09YS5pbmRleE9mKHRoaXMua2V5KSYmdGhpcy5leHBhbmQobnVsbCx0LmF1dG9FeHBhbmRQYXJlbnQpLG4mJnZvaWQgMCE9PXQuY3VycmVudE5vZGVLZXkmJnRoaXMua2V5PT09dC5jdXJyZW50Tm9kZUtleSYmKHQuY3VycmVudE5vZGU9dGhpcyx0LmN1cnJlbnROb2RlLmlzQ3VycmVudD0hMCksdC5sYXp5JiZ0Ll9pbml0RGVmYXVsdENoZWNrZWROb2RlKHRoaXMpLHRoaXMudXBkYXRlTGVhZlN0YXRlKCksIXRoaXMucGFyZW50fHwxIT09dGhpcy5sZXZlbCYmITAhPT10aGlzLnBhcmVudC5leHBhbmRlZHx8KHRoaXMuY2FuRm9jdXM9ITApfXNldERhdGEoZSl7bGV0IHQ7QXJyYXkuaXNBcnJheShlKXx8dmModGhpcyxlKSx0aGlzLmRhdGE9ZSx0aGlzLmNoaWxkTm9kZXM9W10sdD0wPT09dGhpcy5sZXZlbCYmdGhpcy5kYXRhIGluc3RhbmNlb2YgQXJyYXk/dGhpcy5kYXRhOmJjKHRoaXMsXCJjaGlsZHJlblwiKXx8W107Zm9yKGxldCBlPTAsbD10Lmxlbmd0aDtlPGw7ZSsrKXRoaXMuaW5zZXJ0Q2hpbGQoe2RhdGE6dFtlXX0pfWdldCBsYWJlbCgpe3JldHVybiBiYyh0aGlzLFwibGFiZWxcIil9Z2V0IGtleSgpe2NvbnN0IGU9dGhpcy5zdG9yZS5rZXk7cmV0dXJuIHRoaXMuZGF0YT90aGlzLmRhdGFbZV06bnVsbH1nZXQgZGlzYWJsZWQoKXtyZXR1cm4gYmModGhpcyxcImRpc2FibGVkXCIpfWdldCBuZXh0U2libGluZygpe2NvbnN0IGU9dGhpcy5wYXJlbnQ7aWYoZSl7Y29uc3QgdD1lLmNoaWxkTm9kZXMuaW5kZXhPZih0aGlzKTtpZih0Pi0xKXJldHVybiBlLmNoaWxkTm9kZXNbdCsxXX1yZXR1cm4gbnVsbH1nZXQgcHJldmlvdXNTaWJsaW5nKCl7Y29uc3QgZT10aGlzLnBhcmVudDtpZihlKXtjb25zdCB0PWUuY2hpbGROb2Rlcy5pbmRleE9mKHRoaXMpO2lmKHQ+LTEpcmV0dXJuIHQ+MD9lLmNoaWxkTm9kZXNbdC0xXTpudWxsfXJldHVybiBudWxsfWNvbnRhaW5zKGUsdD0hMCl7cmV0dXJuKHRoaXMuY2hpbGROb2Rlc3x8W10pLnNvbWUoKGw9Pmw9PT1lfHx0JiZsLmNvbnRhaW5zKGUpKSl9cmVtb3ZlKCl7Y29uc3QgZT10aGlzLnBhcmVudDtlJiZlLnJlbW92ZUNoaWxkKHRoaXMpfWluc2VydENoaWxkKGUsdCxsKXtpZighZSl0aHJvdyBuZXcgRXJyb3IoXCJpbnNlcnRDaGlsZCBlcnJvcjogY2hpbGQgaXMgcmVxdWlyZWQuXCIpO2lmKCEoZSBpbnN0YW5jZW9mIGtjKSl7aWYoIWwpe2NvbnN0IGw9dGhpcy5nZXRDaGlsZHJlbighMCk7LTE9PT1sLmluZGV4T2YoZS5kYXRhKSYmKHZvaWQgMD09PXR8fHQ8MD9sLnB1c2goZS5kYXRhKTpsLnNwbGljZSh0LDAsZS5kYXRhKSl9T2JqZWN0LmFzc2lnbihlLHtwYXJlbnQ6dGhpcyxzdG9yZTp0aGlzLnN0b3JlfSksZT1uZXcga2MoZSl9ZS5sZXZlbD10aGlzLmxldmVsKzEsdm9pZCAwPT09dHx8dDwwP3RoaXMuY2hpbGROb2Rlcy5wdXNoKGUpOnRoaXMuY2hpbGROb2Rlcy5zcGxpY2UodCwwLGUpLHRoaXMudXBkYXRlTGVhZlN0YXRlKCl9aW5zZXJ0QmVmb3JlKGUsdCl7bGV0IGw7dCYmKGw9dGhpcy5jaGlsZE5vZGVzLmluZGV4T2YodCkpLHRoaXMuaW5zZXJ0Q2hpbGQoZSxsKX1pbnNlcnRBZnRlcihlLHQpe2xldCBsO3QmJihsPXRoaXMuY2hpbGROb2Rlcy5pbmRleE9mKHQpLC0xIT09bCYmKGwrPTEpKSx0aGlzLmluc2VydENoaWxkKGUsbCl9cmVtb3ZlQ2hpbGQoZSl7Y29uc3QgdD10aGlzLmdldENoaWxkcmVuKCl8fFtdLGw9dC5pbmRleE9mKGUuZGF0YSk7bD4tMSYmdC5zcGxpY2UobCwxKTtjb25zdCBhPXRoaXMuY2hpbGROb2Rlcy5pbmRleE9mKGUpO2E+LTEmJih0aGlzLnN0b3JlJiZ0aGlzLnN0b3JlLmRlcmVnaXN0ZXJOb2RlKGUpLGUucGFyZW50PW51bGwsdGhpcy5jaGlsZE5vZGVzLnNwbGljZShhLDEpKSx0aGlzLnVwZGF0ZUxlYWZTdGF0ZSgpfXJlbW92ZUNoaWxkQnlEYXRhKGUpe2xldCB0PW51bGw7Zm9yKGxldCBsPTA7bDx0aGlzLmNoaWxkTm9kZXMubGVuZ3RoO2wrKylpZih0aGlzLmNoaWxkTm9kZXNbbF0uZGF0YT09PWUpe3Q9dGhpcy5jaGlsZE5vZGVzW2xdO2JyZWFrfXQmJnRoaXMucmVtb3ZlQ2hpbGQodCl9ZXhwYW5kKGUsdCl7Y29uc3QgbD0oKT0+e2lmKHQpe2xldCBlPXRoaXMucGFyZW50O2Zvcig7ZS5sZXZlbD4wOyllLmV4cGFuZGVkPSEwLGU9ZS5wYXJlbnR9dGhpcy5leHBhbmRlZD0hMCxlJiZlKCksdGhpcy5jaGlsZE5vZGVzLmZvckVhY2goKGU9PntlLmNhbkZvY3VzPSEwfSkpfTt0aGlzLnNob3VsZExvYWREYXRhKCk/dGhpcy5sb2FkRGF0YSgoZT0+e0FycmF5LmlzQXJyYXkoZSkmJih0aGlzLmNoZWNrZWQ/dGhpcy5zZXRDaGVja2VkKCEwLCEwKTp0aGlzLnN0b3JlLmNoZWNrU3RyaWN0bHl8fGdjKHRoaXMpLGwoKSl9KSk6bCgpfWRvQ3JlYXRlQ2hpbGRyZW4oZSx0PXt9KXtlLmZvckVhY2goKGU9Pnt0aGlzLmluc2VydENoaWxkKE9iamVjdC5hc3NpZ24oe2RhdGE6ZX0sdCksdm9pZCAwLCEwKX0pKX1jb2xsYXBzZSgpe3RoaXMuZXhwYW5kZWQ9ITEsdGhpcy5jaGlsZE5vZGVzLmZvckVhY2goKGU9PntlLmNhbkZvY3VzPSExfSkpfXNob3VsZExvYWREYXRhKCl7cmV0dXJuITA9PT10aGlzLnN0b3JlLmxhenkmJnRoaXMuc3RvcmUubG9hZCYmIXRoaXMubG9hZGVkfXVwZGF0ZUxlYWZTdGF0ZSgpe2lmKCEwPT09dGhpcy5zdG9yZS5sYXp5JiYhMCE9PXRoaXMubG9hZGVkJiZ2b2lkIDAhPT10aGlzLmlzTGVhZkJ5VXNlcilyZXR1cm4gdm9pZCh0aGlzLmlzTGVhZj10aGlzLmlzTGVhZkJ5VXNlcik7Y29uc3QgZT10aGlzLmNoaWxkTm9kZXM7IXRoaXMuc3RvcmUubGF6eXx8ITA9PT10aGlzLnN0b3JlLmxhenkmJiEwPT09dGhpcy5sb2FkZWQ/dGhpcy5pc0xlYWY9IWV8fDA9PT1lLmxlbmd0aDp0aGlzLmlzTGVhZj0hMX1zZXRDaGVja2VkKGUsdCxsLGEpe2lmKHRoaXMuaW5kZXRlcm1pbmF0ZT1cImhhbGZcIj09PWUsdGhpcy5jaGVja2VkPSEwPT09ZSx0aGlzLnN0b3JlLmNoZWNrU3RyaWN0bHkpcmV0dXJuO2lmKCF0aGlzLnNob3VsZExvYWREYXRhKCl8fHRoaXMuc3RvcmUuY2hlY2tEZXNjZW5kYW50cyl7Y29uc3R7YWxsOmwsYWxsV2l0aG91dERpc2FibGU6bn09ZmModGhpcy5jaGlsZE5vZGVzKTt0aGlzLmlzTGVhZnx8bHx8IW58fCh0aGlzLmNoZWNrZWQ9ITEsZT0hMSk7Y29uc3Qgbz0oKT0+e2lmKHQpe2NvbnN0IGw9dGhpcy5jaGlsZE5vZGVzO2ZvcihsZXQgbj0wLG89bC5sZW5ndGg7bjxvO24rKyl7Y29uc3Qgbz1sW25dO2E9YXx8ITEhPT1lO2NvbnN0IGk9by5kaXNhYmxlZD9vLmNoZWNrZWQ6YTtvLnNldENoZWNrZWQoaSx0LCEwLGEpfWNvbnN0e2hhbGY6bixhbGw6b309ZmMobCk7b3x8KHRoaXMuY2hlY2tlZD1vLHRoaXMuaW5kZXRlcm1pbmF0ZT1uKX19O2lmKHRoaXMuc2hvdWxkTG9hZERhdGEoKSlyZXR1cm4gdm9pZCB0aGlzLmxvYWREYXRhKCgoKT0+e28oKSxnYyh0aGlzKX0pLHtjaGVja2VkOiExIT09ZX0pO28oKX1jb25zdCBuPXRoaXMucGFyZW50O24mJjAhPT1uLmxldmVsJiYobHx8Z2MobikpfWdldENoaWxkcmVuKGU9ITEpe2lmKDA9PT10aGlzLmxldmVsKXJldHVybiB0aGlzLmRhdGE7Y29uc3QgdD10aGlzLmRhdGE7aWYoIXQpcmV0dXJuIG51bGw7Y29uc3QgbD10aGlzLnN0b3JlLnByb3BzO2xldCBhPVwiY2hpbGRyZW5cIjtyZXR1cm4gbCYmKGE9bC5jaGlsZHJlbnx8XCJjaGlsZHJlblwiKSx2b2lkIDA9PT10W2FdJiYodFthXT1udWxsKSxlJiYhdFthXSYmKHRbYV09W10pLHRbYV19dXBkYXRlQ2hpbGRyZW4oKXtjb25zdCBlPXRoaXMuZ2V0Q2hpbGRyZW4oKXx8W10sdD10aGlzLmNoaWxkTm9kZXMubWFwKChlPT5lLmRhdGEpKSxsPXt9LGE9W107ZS5mb3JFYWNoKCgoZSxuKT0+e2NvbnN0IG89ZVtoY107ISFvJiZ0LmZpbmRJbmRleCgoZT0+ZVtoY109PT1vKSk+PTA/bFtvXT17aW5kZXg6bixkYXRhOmV9OmEucHVzaCh7aW5kZXg6bixkYXRhOmV9KX0pKSx0aGlzLnN0b3JlLmxhenl8fHQuZm9yRWFjaCgoZT0+e2xbZVtoY11dfHx0aGlzLnJlbW92ZUNoaWxkQnlEYXRhKGUpfSkpLGEuZm9yRWFjaCgoKHtpbmRleDplLGRhdGE6dH0pPT57dGhpcy5pbnNlcnRDaGlsZCh7ZGF0YTp0fSxlKX0pKSx0aGlzLnVwZGF0ZUxlYWZTdGF0ZSgpfWxvYWREYXRhKGUsdD17fSl7aWYoITAhPT10aGlzLnN0b3JlLmxhenl8fCF0aGlzLnN0b3JlLmxvYWR8fHRoaXMubG9hZGVkfHx0aGlzLmxvYWRpbmcmJiFPYmplY3Qua2V5cyh0KS5sZW5ndGgpZSYmZS5jYWxsKHRoaXMpO2Vsc2V7dGhpcy5sb2FkaW5nPSEwO2NvbnN0IGw9bD0+e3RoaXMubG9hZGVkPSEwLHRoaXMubG9hZGluZz0hMSx0aGlzLmNoaWxkTm9kZXM9W10sdGhpcy5kb0NyZWF0ZUNoaWxkcmVuKGwsdCksdGhpcy51cGRhdGVMZWFmU3RhdGUoKSxlJiZlLmNhbGwodGhpcyxsKX07dGhpcy5zdG9yZS5sb2FkKHRoaXMsbCl9fX1jbGFzcyBDY3tjb25zdHJ1Y3RvcihlKXt0aGlzLmN1cnJlbnROb2RlPW51bGwsdGhpcy5jdXJyZW50Tm9kZUtleT1udWxsO2Zvcihjb25zdCB0IGluIGUpZS5oYXNPd25Qcm9wZXJ0eSh0KSYmKHRoaXNbdF09ZVt0XSk7aWYodGhpcy5ub2Rlc01hcD17fSx0aGlzLnJvb3Q9bmV3IGtjKHtkYXRhOnRoaXMuZGF0YSxzdG9yZTp0aGlzfSksdGhpcy5sYXp5JiZ0aGlzLmxvYWQpeygwLHRoaXMubG9hZCkodGhpcy5yb290LChlPT57dGhpcy5yb290LmRvQ3JlYXRlQ2hpbGRyZW4oZSksdGhpcy5faW5pdERlZmF1bHRDaGVja2VkTm9kZXMoKX0pKX1lbHNlIHRoaXMuX2luaXREZWZhdWx0Q2hlY2tlZE5vZGVzKCl9ZmlsdGVyKGUpe2NvbnN0IHQ9dGhpcy5maWx0ZXJOb2RlTWV0aG9kLGw9dGhpcy5sYXp5LGE9ZnVuY3Rpb24obil7Y29uc3Qgbz1uLnJvb3Q/bi5yb290LmNoaWxkTm9kZXM6bi5jaGlsZE5vZGVzO2lmKG8uZm9yRWFjaCgobD0+e2wudmlzaWJsZT10LmNhbGwobCxlLGwuZGF0YSxsKSxhKGwpfSkpLCFuLnZpc2libGUmJm8ubGVuZ3RoKXtsZXQgZT0hMDtlPSFvLnNvbWUoKGU9PmUudmlzaWJsZSkpLG4ucm9vdD9uLnJvb3QudmlzaWJsZT0hMT09PWU6bi52aXNpYmxlPSExPT09ZX1lJiYoIW4udmlzaWJsZXx8bi5pc0xlYWZ8fGx8fG4uZXhwYW5kKCkpfTthKHRoaXMpfXNldERhdGEoZSl7ZSE9PXRoaXMucm9vdC5kYXRhPyh0aGlzLnJvb3Quc2V0RGF0YShlKSx0aGlzLl9pbml0RGVmYXVsdENoZWNrZWROb2RlcygpKTp0aGlzLnJvb3QudXBkYXRlQ2hpbGRyZW4oKX1nZXROb2RlKGUpe2lmKGUgaW5zdGFuY2VvZiBrYylyZXR1cm4gZTtjb25zdCB0PVwib2JqZWN0XCIhPXR5cGVvZiBlP2U6bWModGhpcy5rZXksZSk7cmV0dXJuIHRoaXMubm9kZXNNYXBbdF18fG51bGx9aW5zZXJ0QmVmb3JlKGUsdCl7Y29uc3QgbD10aGlzLmdldE5vZGUodCk7bC5wYXJlbnQuaW5zZXJ0QmVmb3JlKHtkYXRhOmV9LGwpfWluc2VydEFmdGVyKGUsdCl7Y29uc3QgbD10aGlzLmdldE5vZGUodCk7bC5wYXJlbnQuaW5zZXJ0QWZ0ZXIoe2RhdGE6ZX0sbCl9cmVtb3ZlKGUpe2NvbnN0IHQ9dGhpcy5nZXROb2RlKGUpO3QmJnQucGFyZW50JiYodD09PXRoaXMuY3VycmVudE5vZGUmJih0aGlzLmN1cnJlbnROb2RlPW51bGwpLHQucGFyZW50LnJlbW92ZUNoaWxkKHQpKX1hcHBlbmQoZSx0KXtjb25zdCBsPXQ/dGhpcy5nZXROb2RlKHQpOnRoaXMucm9vdDtsJiZsLmluc2VydENoaWxkKHtkYXRhOmV9KX1faW5pdERlZmF1bHRDaGVja2VkTm9kZXMoKXtjb25zdCBlPXRoaXMuZGVmYXVsdENoZWNrZWRLZXlzfHxbXSx0PXRoaXMubm9kZXNNYXA7ZS5mb3JFYWNoKChlPT57Y29uc3QgbD10W2VdO2wmJmwuc2V0Q2hlY2tlZCghMCwhdGhpcy5jaGVja1N0cmljdGx5KX0pKX1faW5pdERlZmF1bHRDaGVja2VkTm9kZShlKXstMSE9PSh0aGlzLmRlZmF1bHRDaGVja2VkS2V5c3x8W10pLmluZGV4T2YoZS5rZXkpJiZlLnNldENoZWNrZWQoITAsIXRoaXMuY2hlY2tTdHJpY3RseSl9c2V0RGVmYXVsdENoZWNrZWRLZXkoZSl7ZSE9PXRoaXMuZGVmYXVsdENoZWNrZWRLZXlzJiYodGhpcy5kZWZhdWx0Q2hlY2tlZEtleXM9ZSx0aGlzLl9pbml0RGVmYXVsdENoZWNrZWROb2RlcygpKX1yZWdpc3Rlck5vZGUoZSl7Y29uc3QgdD10aGlzLmtleTtpZihlJiZlLmRhdGEpaWYodCl7dm9pZCAwIT09ZS5rZXkmJih0aGlzLm5vZGVzTWFwW2Uua2V5XT1lKX1lbHNlIHRoaXMubm9kZXNNYXBbZS5pZF09ZX1kZXJlZ2lzdGVyTm9kZShlKXt0aGlzLmtleSYmZSYmZS5kYXRhJiYoZS5jaGlsZE5vZGVzLmZvckVhY2goKGU9Pnt0aGlzLmRlcmVnaXN0ZXJOb2RlKGUpfSkpLGRlbGV0ZSB0aGlzLm5vZGVzTWFwW2Uua2V5XSl9Z2V0Q2hlY2tlZE5vZGVzKGU9ITEsdD0hMSl7Y29uc3QgbD1bXSxhPWZ1bmN0aW9uKG4peyhuLnJvb3Q/bi5yb290LmNoaWxkTm9kZXM6bi5jaGlsZE5vZGVzKS5mb3JFYWNoKChuPT57KG4uY2hlY2tlZHx8dCYmbi5pbmRldGVybWluYXRlKSYmKCFlfHxlJiZuLmlzTGVhZikmJmwucHVzaChuLmRhdGEpLGEobil9KSl9O3JldHVybiBhKHRoaXMpLGx9Z2V0Q2hlY2tlZEtleXMoZT0hMSl7cmV0dXJuIHRoaXMuZ2V0Q2hlY2tlZE5vZGVzKGUpLm1hcCgoZT0+KGV8fHt9KVt0aGlzLmtleV0pKX1nZXRIYWxmQ2hlY2tlZE5vZGVzKCl7Y29uc3QgZT1bXSx0PWZ1bmN0aW9uKGwpeyhsLnJvb3Q/bC5yb290LmNoaWxkTm9kZXM6bC5jaGlsZE5vZGVzKS5mb3JFYWNoKChsPT57bC5pbmRldGVybWluYXRlJiZlLnB1c2gobC5kYXRhKSx0KGwpfSkpfTtyZXR1cm4gdCh0aGlzKSxlfWdldEhhbGZDaGVja2VkS2V5cygpe3JldHVybiB0aGlzLmdldEhhbGZDaGVja2VkTm9kZXMoKS5tYXAoKGU9PihlfHx7fSlbdGhpcy5rZXldKSl9X2dldEFsbE5vZGVzKCl7Y29uc3QgZT1bXSx0PXRoaXMubm9kZXNNYXA7Zm9yKGNvbnN0IGwgaW4gdCl0Lmhhc093blByb3BlcnR5KGwpJiZlLnB1c2godFtsXSk7cmV0dXJuIGV9dXBkYXRlQ2hpbGRyZW4oZSx0KXtjb25zdCBsPXRoaXMubm9kZXNNYXBbZV07aWYoIWwpcmV0dXJuO2NvbnN0IGE9bC5jaGlsZE5vZGVzO2ZvcihsZXQgZT1hLmxlbmd0aC0xO2U+PTA7ZS0tKXtjb25zdCB0PWFbZV07dGhpcy5yZW1vdmUodC5kYXRhKX1mb3IobGV0IGU9MCxhPXQubGVuZ3RoO2U8YTtlKyspe2NvbnN0IGE9dFtlXTt0aGlzLmFwcGVuZChhLGwuZGF0YSl9fV9zZXRDaGVja2VkS2V5cyhlLHQ9ITEsbCl7Y29uc3QgYT10aGlzLl9nZXRBbGxOb2RlcygpLnNvcnQoKChlLHQpPT50LmxldmVsLWUubGV2ZWwpKSxuPU9iamVjdC5jcmVhdGUobnVsbCksbz1PYmplY3Qua2V5cyhsKTthLmZvckVhY2goKGU9PmUuc2V0Q2hlY2tlZCghMSwhMSkpKTtmb3IobGV0IGw9MCxpPWEubGVuZ3RoO2w8aTtsKyspe2NvbnN0IGk9YVtsXSxyPWkuZGF0YVtlXS50b1N0cmluZygpO2lmKCEoby5pbmRleE9mKHIpPi0xKSl7aS5jaGVja2VkJiYhbltyXSYmaS5zZXRDaGVja2VkKCExLCExKTtjb250aW51ZX1sZXQgcz1pLnBhcmVudDtmb3IoO3MmJnMubGV2ZWw+MDspbltzLmRhdGFbZV1dPSEwLHM9cy5wYXJlbnQ7aWYoaS5pc0xlYWZ8fHRoaXMuY2hlY2tTdHJpY3RseSlpLnNldENoZWNrZWQoITAsITEpO2Vsc2UgaWYoaS5zZXRDaGVja2VkKCEwLCEwKSx0KXtpLnNldENoZWNrZWQoITEsITEpO2NvbnN0IGU9ZnVuY3Rpb24odCl7dC5jaGlsZE5vZGVzLmZvckVhY2goKHQ9Pnt0LmlzTGVhZnx8dC5zZXRDaGVja2VkKCExLCExKSxlKHQpfSkpfTtlKGkpfX19c2V0Q2hlY2tlZE5vZGVzKGUsdD0hMSl7Y29uc3QgbD10aGlzLmtleSxhPXt9O2UuZm9yRWFjaCgoZT0+e2FbKGV8fHt9KVtsXV09ITB9KSksdGhpcy5fc2V0Q2hlY2tlZEtleXMobCx0LGEpfXNldENoZWNrZWRLZXlzKGUsdD0hMSl7dGhpcy5kZWZhdWx0Q2hlY2tlZEtleXM9ZTtjb25zdCBsPXRoaXMua2V5LGE9e307ZS5mb3JFYWNoKChlPT57YVtlXT0hMH0pKSx0aGlzLl9zZXRDaGVja2VkS2V5cyhsLHQsYSl9c2V0RGVmYXVsdEV4cGFuZGVkS2V5cyhlKXtlPWV8fFtdLHRoaXMuZGVmYXVsdEV4cGFuZGVkS2V5cz1lLGUuZm9yRWFjaCgoZT0+e2NvbnN0IHQ9dGhpcy5nZXROb2RlKGUpO3QmJnQuZXhwYW5kKG51bGwsdGhpcy5hdXRvRXhwYW5kUGFyZW50KX0pKX1zZXRDaGVja2VkKGUsdCxsKXtjb25zdCBhPXRoaXMuZ2V0Tm9kZShlKTthJiZhLnNldENoZWNrZWQoISF0LGwpfWdldEN1cnJlbnROb2RlKCl7cmV0dXJuIHRoaXMuY3VycmVudE5vZGV9c2V0Q3VycmVudE5vZGUoZSl7Y29uc3QgdD10aGlzLmN1cnJlbnROb2RlO3QmJih0LmlzQ3VycmVudD0hMSksdGhpcy5jdXJyZW50Tm9kZT1lLHRoaXMuY3VycmVudE5vZGUuaXNDdXJyZW50PSEwfXNldFVzZXJDdXJyZW50Tm9kZShlKXtjb25zdCB0PWVbdGhpcy5rZXldLGw9dGhpcy5ub2Rlc01hcFt0XTt0aGlzLnNldEN1cnJlbnROb2RlKGwpfXNldEN1cnJlbnROb2RlS2V5KGUpe2lmKG51bGw9PWUpcmV0dXJuIHRoaXMuY3VycmVudE5vZGUmJih0aGlzLmN1cnJlbnROb2RlLmlzQ3VycmVudD0hMSksdm9pZCh0aGlzLmN1cnJlbnROb2RlPW51bGwpO2NvbnN0IHQ9dGhpcy5nZXROb2RlKGUpO3QmJnRoaXMuc2V0Q3VycmVudE5vZGUodCl9fXZhciB4Yz1lKHtuYW1lOlwiRWxUcmVlTm9kZUNvbnRlbnRcIixwcm9wczp7bm9kZTp7dHlwZTpPYmplY3QscmVxdWlyZWQ6ITB9LHJlbmRlckNvbnRlbnQ6RnVuY3Rpb259LHNldHVwKGUpe2NvbnN0IHQ9dyhcIk5vZGVJbnN0YW5jZVwiKSxsPXcoXCJSb290VHJlZVwiKTtyZXR1cm4oKT0+e2NvbnN0IGE9ZS5ub2RlLHtkYXRhOm4sc3RvcmU6b309YTtyZXR1cm4gZS5yZW5kZXJDb250ZW50P2UucmVuZGVyQ29udGVudChELHtfc2VsZjp0LG5vZGU6YSxkYXRhOm4sc3RvcmU6b30pOmwuY3R4LnNsb3RzLmRlZmF1bHQ/bC5jdHguc2xvdHMuZGVmYXVsdCh7bm9kZTphLGRhdGE6bn0pOkQoXCJzcGFuXCIse2NsYXNzOlwiZWwtdHJlZS1ub2RlX19sYWJlbFwifSxbYS5sYWJlbF0pfX19KTtmdW5jdGlvbiB3YyhlKXtjb25zdCB0PXcoXCJUcmVlTm9kZU1hcFwiLG51bGwpLGw9e3RyZWVOb2RlRXhwYW5kOnQ9PntlLm5vZGUhPT10JiZlLm5vZGUuY29sbGFwc2UoKX0sY2hpbGRyZW46W119O3JldHVybiB0JiZ0LmNoaWxkcmVuLnB1c2gobCkseChcIlRyZWVOb2RlTWFwXCIsbCkse2Jyb2FkY2FzdEV4cGFuZGVkOnQ9PntpZihlLmFjY29yZGlvbilmb3IoY29uc3QgZSBvZiBsLmNoaWxkcmVuKWUudHJlZU5vZGVFeHBhbmQodCl9fX14Yy5fX2ZpbGU9XCJwYWNrYWdlcy90cmVlL3NyYy90cmVlLW5vZGUtY29udGVudC52dWVcIjt2YXIgX2M9ZSh7bmFtZTpcIkVsVHJlZU5vZGVcIixjb21wb25lbnRzOntFbENvbGxhcHNlVHJhbnNpdGlvbjpWbixFbENoZWNrYm94OkthLE5vZGVDb250ZW50OnhjfSxwcm9wczp7bm9kZTp7dHlwZTprYyxkZWZhdWx0OigpPT4oe30pfSxwcm9wczp7dHlwZTpPYmplY3QsZGVmYXVsdDooKT0+KHt9KX0scmVuZGVyQ29udGVudDpGdW5jdGlvbixyZW5kZXJBZnRlckV4cGFuZDpCb29sZWFuLHNob3dDaGVja2JveDp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITF9fSxlbWl0czpbXCJub2RlLWV4cGFuZFwiXSxzZXR1cChlLGwpe2NvbnN0e2Jyb2FkY2FzdEV4cGFuZGVkOmF9PXdjKGUpLG49dyhcIlJvb3RUcmVlXCIpLG89dCghMSksaT10KCExKSxyPXQobnVsbCkscz10KG51bGwpLHU9dChudWxsKSx7ZW1pdHRlcjpkfT17ZW1pdHRlcjp3KFwiRHJhZ05vZGVFbWl0dGVyXCIpfSxjPXYoKTt4KFwiTm9kZUluc3RhbmNlXCIsYyksbnx8Y29uc29sZS53YXJuKFwiQ2FuIG5vdCBmaW5kIG5vZGUncyB0cmVlLlwiKSxlLm5vZGUuZXhwYW5kZWQmJihvLnZhbHVlPSEwLGkudmFsdWU9ITApO2NvbnN0IHA9bi5wcm9wcy5jaGlsZHJlbnx8XCJjaGlsZHJlblwiO3koKCgpPT5lLm5vZGUuZGF0YVtwXSksKCgpPT57ZS5ub2RlLnVwZGF0ZUNoaWxkcmVuKCl9KSkseSgoKCk9PmUubm9kZS5pbmRldGVybWluYXRlKSwodD0+e2goZS5ub2RlLmNoZWNrZWQsdCl9KSkseSgoKCk9PmUubm9kZS5jaGVja2VkKSwodD0+e2godCxlLm5vZGUuaW5kZXRlcm1pbmF0ZSl9KSkseSgoKCk9PmUubm9kZS5leHBhbmRlZCksKGU9PntrKCgoKT0+by52YWx1ZT1lKSksZSYmKGkudmFsdWU9ITApfSkpO2NvbnN0IGg9KHQsbCk9PntyLnZhbHVlIT09dCYmcy52YWx1ZSE9PWwmJm4uY3R4LmVtaXQoXCJjaGVjay1jaGFuZ2VcIixlLm5vZGUuZGF0YSx0LGwpLHIudmFsdWU9dCxzLnZhbHVlPWx9LG09KCk9PntlLm5vZGUuaXNMZWFmfHwoby52YWx1ZT8obi5jdHguZW1pdChcIm5vZGUtY29sbGFwc2VcIixlLm5vZGUuZGF0YSxlLm5vZGUsYyksZS5ub2RlLmNvbGxhcHNlKCkpOihlLm5vZGUuZXhwYW5kKCksbC5lbWl0KFwibm9kZS1leHBhbmRcIixlLm5vZGUuZGF0YSxlLm5vZGUsYykpKX0sZj0odCxsKT0+e2Uubm9kZS5zZXRDaGVja2VkKGwudGFyZ2V0LmNoZWNrZWQsIW4ucHJvcHMuY2hlY2tTdHJpY3RseSksaygoKCk9Pntjb25zdCB0PW4uc3RvcmUudmFsdWU7bi5jdHguZW1pdChcImNoZWNrXCIsZS5ub2RlLmRhdGEse2NoZWNrZWROb2Rlczp0LmdldENoZWNrZWROb2RlcygpLGNoZWNrZWRLZXlzOnQuZ2V0Q2hlY2tlZEtleXMoKSxoYWxmQ2hlY2tlZE5vZGVzOnQuZ2V0SGFsZkNoZWNrZWROb2RlcygpLGhhbGZDaGVja2VkS2V5czp0LmdldEhhbGZDaGVja2VkS2V5cygpfSl9KSl9O3JldHVybntub2RlJDp1LHRyZWU6bixleHBhbmRlZDpvLGNoaWxkTm9kZVJlbmRlcmVkOmksb2xkQ2hlY2tlZDpyLG9sZEluZGV0ZXJtaW5hdGU6cyxlbWl0dGVyOmQscGFyZW50OnBhcmVudCxnZXROb2RlS2V5OmU9Pm1jKG4ucHJvcHMubm9kZUtleSxlLmRhdGEpLGhhbmRsZVNlbGVjdENoYW5nZTpoLGhhbmRsZUNsaWNrOigpPT57Y29uc3QgdD1uLnN0b3JlLnZhbHVlO3Quc2V0Q3VycmVudE5vZGUoZS5ub2RlKSxuLmN0eC5lbWl0KFwiY3VycmVudC1jaGFuZ2VcIix0LmN1cnJlbnROb2RlP3QuY3VycmVudE5vZGUuZGF0YTpudWxsLHQuY3VycmVudE5vZGUpLG4uY3VycmVudE5vZGUudmFsdWU9ZS5ub2RlLG4ucHJvcHMuZXhwYW5kT25DbGlja05vZGUmJm0oKSxuLnByb3BzLmNoZWNrT25DbGlja05vZGUmJiFlLm5vZGUuZGlzYWJsZWQmJmYobnVsbCx7dGFyZ2V0OntjaGVja2VkOiFlLm5vZGUuY2hlY2tlZH19KSxuLmN0eC5lbWl0KFwibm9kZS1jbGlja1wiLGUubm9kZS5kYXRhLGUubm9kZSxjKX0saGFuZGxlQ29udGV4dE1lbnU6dD0+e24uaW5zdGFuY2Uudm5vZGUucHJvcHMub25Ob2RlQ29udGV4dG1lbnUmJih0LnN0b3BQcm9wYWdhdGlvbigpLHQucHJldmVudERlZmF1bHQoKSksbi5jdHguZW1pdChcIm5vZGUtY29udGV4dG1lbnVcIix0LGUubm9kZS5kYXRhLGUubm9kZSxjKX0saGFuZGxlRXhwYW5kSWNvbkNsaWNrOm0saGFuZGxlQ2hlY2tDaGFuZ2U6ZixoYW5kbGVDaGlsZE5vZGVFeHBhbmQ6KGUsdCxsKT0+e2EodCksbi5jdHguZW1pdChcIm5vZGUtZXhwYW5kXCIsZSx0LGwpfSxoYW5kbGVEcmFnU3RhcnQ6dD0+e24ucHJvcHMuZHJhZ2dhYmxlJiZkLmVtaXQoXCJ0cmVlLW5vZGUtZHJhZy1zdGFydFwiLHtldmVudDp0LHRyZWVOb2RlOmV9KX0saGFuZGxlRHJhZ092ZXI6dD0+e24ucHJvcHMuZHJhZ2dhYmxlJiYoZC5lbWl0KFwidHJlZS1ub2RlLWRyYWctb3ZlclwiLHtldmVudDp0LHRyZWVOb2RlOnskZWw6dS52YWx1ZSxub2RlOmUubm9kZX19KSx0LnByZXZlbnREZWZhdWx0KCkpfSxoYW5kbGVEcm9wOmU9PntlLnByZXZlbnREZWZhdWx0KCl9LGhhbmRsZURyYWdFbmQ6ZT0+e24ucHJvcHMuZHJhZ2dhYmxlJiZkLmVtaXQoXCJ0cmVlLW5vZGUtZHJhZy1lbmRcIixlKX19fX0pO2NvbnN0IFNjPXtrZXk6MSxjbGFzczpcImVsLXRyZWUtbm9kZV9fbG9hZGluZy1pY29uIGVsLWljb24tbG9hZGluZ1wifTtfYy5yZW5kZXI9ZnVuY3Rpb24oZSx0LGwsbyxkLGMpe2NvbnN0IHA9UChcImVsLWNoZWNrYm94XCIpLHY9UChcIm5vZGUtY29udGVudFwiKSxtPVAoXCJlbC10cmVlLW5vZGVcIiksZj1QKFwiZWwtY29sbGFwc2UtdHJhbnNpdGlvblwiKTtyZXR1cm4gcigoYSgpLG4oXCJkaXZcIix7cmVmOlwibm9kZSRcIixjbGFzczpbXCJlbC10cmVlLW5vZGVcIix7XCJpcy1leHBhbmRlZFwiOmUuZXhwYW5kZWQsXCJpcy1jdXJyZW50XCI6ZS5ub2RlLmlzQ3VycmVudCxcImlzLWhpZGRlblwiOiFlLm5vZGUudmlzaWJsZSxcImlzLWZvY3VzYWJsZVwiOiFlLm5vZGUuZGlzYWJsZWQsXCJpcy1jaGVja2VkXCI6IWUubm9kZS5kaXNhYmxlZCYmZS5ub2RlLmNoZWNrZWR9XSxyb2xlOlwidHJlZWl0ZW1cIix0YWJpbmRleDpcIi0xXCIsXCJhcmlhLWV4cGFuZGVkXCI6ZS5leHBhbmRlZCxcImFyaWEtZGlzYWJsZWRcIjplLm5vZGUuZGlzYWJsZWQsXCJhcmlhLWNoZWNrZWRcIjplLm5vZGUuY2hlY2tlZCxkcmFnZ2FibGU6ZS50cmVlLnByb3BzLmRyYWdnYWJsZSxcImRhdGEta2V5XCI6ZS5nZXROb2RlS2V5KGUubm9kZSksb25DbGljazp0WzNdfHwodFszXT1UKCgoLi4udCk9PmUuaGFuZGxlQ2xpY2soLi4udCkpLFtcInN0b3BcIl0pKSxvbkNvbnRleHRtZW51OnRbNF18fCh0WzRdPSguLi50KT0+ZS5oYW5kbGVDb250ZXh0TWVudSguLi50KSksb25EcmFnc3RhcnQ6dFs1XXx8KHRbNV09VCgoKC4uLnQpPT5lLmhhbmRsZURyYWdTdGFydCguLi50KSksW1wic3RvcFwiXSkpLG9uRHJhZ292ZXI6dFs2XXx8KHRbNl09VCgoKC4uLnQpPT5lLmhhbmRsZURyYWdPdmVyKC4uLnQpKSxbXCJzdG9wXCJdKSksb25EcmFnZW5kOnRbN118fCh0WzddPVQoKCguLi50KT0+ZS5oYW5kbGVEcmFnRW5kKC4uLnQpKSxbXCJzdG9wXCJdKSksb25Ecm9wOnRbOF18fCh0WzhdPVQoKCguLi50KT0+ZS5oYW5kbGVEcm9wKC4uLnQpKSxbXCJzdG9wXCJdKSl9LFtzKFwiZGl2XCIse2NsYXNzOlwiZWwtdHJlZS1ub2RlX19jb250ZW50XCIsc3R5bGU6e1wicGFkZGluZy1sZWZ0XCI6KGUubm9kZS5sZXZlbC0xKSplLnRyZWUucHJvcHMuaW5kZW50K1wicHhcIn19LFtzKFwic3BhblwiLHtjbGFzczpbe1wiaXMtbGVhZlwiOmUubm9kZS5pc0xlYWYsZXhwYW5kZWQ6IWUubm9kZS5pc0xlYWYmJmUuZXhwYW5kZWR9LFwiZWwtdHJlZS1ub2RlX19leHBhbmQtaWNvblwiLGUudHJlZS5wcm9wcy5pY29uQ2xhc3M/ZS50cmVlLnByb3BzLmljb25DbGFzczpcImVsLWljb24tY2FyZXQtcmlnaHRcIl0sb25DbGljazp0WzFdfHwodFsxXT1UKCgoLi4udCk9PmUuaGFuZGxlRXhwYW5kSWNvbkNsaWNrKC4uLnQpKSxbXCJzdG9wXCJdKSl9LG51bGwsMiksZS5zaG93Q2hlY2tib3g/KGEoKSxuKHAse2tleTowLFwibW9kZWwtdmFsdWVcIjplLm5vZGUuY2hlY2tlZCxpbmRldGVybWluYXRlOmUubm9kZS5pbmRldGVybWluYXRlLGRpc2FibGVkOiEhZS5ub2RlLmRpc2FibGVkLG9uQ2xpY2s6dFsyXXx8KHRbMl09VCgoKCk9Pnt9KSxbXCJzdG9wXCJdKSksb25DaGFuZ2U6ZS5oYW5kbGVDaGVja0NoYW5nZX0sbnVsbCw4LFtcIm1vZGVsLXZhbHVlXCIsXCJpbmRldGVybWluYXRlXCIsXCJkaXNhYmxlZFwiLFwib25DaGFuZ2VcIl0pKTp1KFwidi1pZlwiLCEwKSxlLm5vZGUubG9hZGluZz8oYSgpLG4oXCJzcGFuXCIsU2MpKTp1KFwidi1pZlwiLCEwKSxzKHYse25vZGU6ZS5ub2RlLFwicmVuZGVyLWNvbnRlbnRcIjplLnJlbmRlckNvbnRlbnR9LG51bGwsOCxbXCJub2RlXCIsXCJyZW5kZXItY29udGVudFwiXSldLDQpLHMoZixudWxsLHtkZWZhdWx0OmkoKCgpPT5bIWUucmVuZGVyQWZ0ZXJFeHBhbmR8fGUuY2hpbGROb2RlUmVuZGVyZWQ/cigoYSgpLG4oXCJkaXZcIix7a2V5OjAsY2xhc3M6XCJlbC10cmVlLW5vZGVfX2NoaWxkcmVuXCIscm9sZTpcImdyb3VwXCIsXCJhcmlhLWV4cGFuZGVkXCI6ZS5leHBhbmRlZH0sWyhhKCEwKSxuKEUsbnVsbCxIKGUubm9kZS5jaGlsZE5vZGVzLCh0PT4oYSgpLG4obSx7a2V5OmUuZ2V0Tm9kZUtleSh0KSxcInJlbmRlci1jb250ZW50XCI6ZS5yZW5kZXJDb250ZW50LFwicmVuZGVyLWFmdGVyLWV4cGFuZFwiOmUucmVuZGVyQWZ0ZXJFeHBhbmQsXCJzaG93LWNoZWNrYm94XCI6ZS5zaG93Q2hlY2tib3gsbm9kZTp0LG9uTm9kZUV4cGFuZDplLmhhbmRsZUNoaWxkTm9kZUV4cGFuZH0sbnVsbCw4LFtcInJlbmRlci1jb250ZW50XCIsXCJyZW5kZXItYWZ0ZXItZXhwYW5kXCIsXCJzaG93LWNoZWNrYm94XCIsXCJub2RlXCIsXCJvbk5vZGVFeHBhbmRcIl0pKSkpLDEyOCkpXSw4LFtcImFyaWEtZXhwYW5kZWRcIl0pKSxbW2gsZS5leHBhbmRlZF1dKTp1KFwidi1pZlwiLCEwKV0pKSxfOjF9KV0sNDIsW1wiYXJpYS1leHBhbmRlZFwiLFwiYXJpYS1kaXNhYmxlZFwiLFwiYXJpYS1jaGVja2VkXCIsXCJkcmFnZ2FibGVcIixcImRhdGEta2V5XCJdKSksW1toLGUubm9kZS52aXNpYmxlXV0pfSxfYy5fX2ZpbGU9XCJwYWNrYWdlcy90cmVlL3NyYy90cmVlLW5vZGUudnVlXCI7dmFyIEVjPWUoe25hbWU6XCJFbFRyZWVcIixjb21wb25lbnRzOntFbFRyZWVOb2RlOl9jfSxwcm9wczp7ZGF0YTp7dHlwZTpBcnJheX0sZW1wdHlUZXh0Ont0eXBlOlN0cmluZyxkZWZhdWx0OigpPT5xbChcImVsLnRyZWUuZW1wdHlUZXh0XCIpfSxyZW5kZXJBZnRlckV4cGFuZDp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITB9LG5vZGVLZXk6U3RyaW5nLGNoZWNrU3RyaWN0bHk6Qm9vbGVhbixkZWZhdWx0RXhwYW5kQWxsOkJvb2xlYW4sZXhwYW5kT25DbGlja05vZGU6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiEwfSxjaGVja09uQ2xpY2tOb2RlOkJvb2xlYW4sY2hlY2tEZXNjZW5kYW50czp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITF9LGF1dG9FeHBhbmRQYXJlbnQ6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiEwfSxkZWZhdWx0Q2hlY2tlZEtleXM6QXJyYXksZGVmYXVsdEV4cGFuZGVkS2V5czpBcnJheSxjdXJyZW50Tm9kZUtleTpbU3RyaW5nLE51bWJlcl0scmVuZGVyQ29udGVudDpGdW5jdGlvbixzaG93Q2hlY2tib3g6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiExfSxkcmFnZ2FibGU6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiExfSxhbGxvd0RyYWc6RnVuY3Rpb24sYWxsb3dEcm9wOkZ1bmN0aW9uLHByb3BzOnt0eXBlOk9iamVjdCxkZWZhdWx0OigpPT4oe2NoaWxkcmVuOlwiY2hpbGRyZW5cIixsYWJlbDpcImxhYmVsXCIsZGlzYWJsZWQ6XCJkaXNhYmxlZFwifSl9LGxhenk6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiExfSxoaWdobGlnaHRDdXJyZW50OkJvb2xlYW4sbG9hZDpGdW5jdGlvbixmaWx0ZXJOb2RlTWV0aG9kOkZ1bmN0aW9uLGFjY29yZGlvbjpCb29sZWFuLGluZGVudDp7dHlwZTpOdW1iZXIsZGVmYXVsdDoxOH0saWNvbkNsYXNzOlN0cmluZ30sZW1pdHM6W1wiY2hlY2stY2hhbmdlXCIsXCJjdXJyZW50LWNoYW5nZVwiLFwibm9kZS1jbGlja1wiLFwibm9kZS1jb250ZXh0bWVudVwiLFwibm9kZS1jb2xsYXBzZVwiLFwibm9kZS1leHBhbmRcIixcImNoZWNrXCIsXCJub2RlLWRyYWctc3RhcnRcIixcIm5vZGUtZHJhZy1lbmRcIixcIm5vZGUtZHJvcFwiLFwibm9kZS1kcmFnLWxlYXZlXCIsXCJub2RlLWRyYWctZW50ZXJcIixcIm5vZGUtZHJhZy1vdmVyXCJdLHNldHVwKGUsYSl7Y29uc3Qgbj10KG5ldyBDYyh7a2V5OmUubm9kZUtleSxkYXRhOmUuZGF0YSxsYXp5OmUubGF6eSxwcm9wczplLnByb3BzLGxvYWQ6ZS5sb2FkLGN1cnJlbnROb2RlS2V5OmUuY3VycmVudE5vZGVLZXksY2hlY2tTdHJpY3RseTplLmNoZWNrU3RyaWN0bHksY2hlY2tEZXNjZW5kYW50czplLmNoZWNrRGVzY2VuZGFudHMsZGVmYXVsdENoZWNrZWRLZXlzOmUuZGVmYXVsdENoZWNrZWRLZXlzLGRlZmF1bHRFeHBhbmRlZEtleXM6ZS5kZWZhdWx0RXhwYW5kZWRLZXlzLGF1dG9FeHBhbmRQYXJlbnQ6ZS5hdXRvRXhwYW5kUGFyZW50LGRlZmF1bHRFeHBhbmRBbGw6ZS5kZWZhdWx0RXhwYW5kQWxsLGZpbHRlck5vZGVNZXRob2Q6ZS5maWx0ZXJOb2RlTWV0aG9kfSkpLG89dChuLnZhbHVlLnJvb3QpLGk9dChudWxsKSxyPXQobnVsbCkscz10KG51bGwpLHticm9hZGNhc3RFeHBhbmRlZDp1fT13YyhlKSx7ZHJhZ1N0YXRlOmR9PWZ1bmN0aW9uKHtwcm9wczplLGN0eDpsLGVsJDphLGRyb3BJbmRpY2F0b3IkOm4sc3RvcmU6b30pe2NvbnN0IGk9bmUoKTt4KFwiRHJhZ05vZGVFbWl0dGVyXCIsaSk7Y29uc3Qgcj10KHtzaG93RHJvcEluZGljYXRvcjohMSxkcmFnZ2luZ05vZGU6bnVsbCxkcm9wTm9kZTpudWxsLGFsbG93RHJvcDohMCxkcm9wVHlwZTpudWxsfSk7cmV0dXJuIGkub24oXCJ0cmVlLW5vZGUtZHJhZy1zdGFydFwiLCgoe2V2ZW50OnQsdHJlZU5vZGU6YX0pPT57aWYoY29uc29sZS5sb2codCxhKSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBlLmFsbG93RHJhZyYmIWUuYWxsb3dEcmFnKGEubm9kZSkpcmV0dXJuIHQucHJldmVudERlZmF1bHQoKSwhMTt0LmRhdGFUcmFuc2Zlci5lZmZlY3RBbGxvd2VkPVwibW92ZVwiO3RyeXt0LmRhdGFUcmFuc2Zlci5zZXREYXRhKFwidGV4dC9wbGFpblwiLFwiXCIpfWNhdGNoKGUpe31yLnZhbHVlLmRyYWdnaW5nTm9kZT1hLGwuZW1pdChcIm5vZGUtZHJhZy1zdGFydFwiLGEubm9kZSx0KX0pKSxpLm9uKFwidHJlZS1ub2RlLWRyYWctb3ZlclwiLCgoe2V2ZW50OnQsdHJlZU5vZGU6b30pPT57Y29uc3QgaT1vLHM9ci52YWx1ZS5kcm9wTm9kZTtzJiZzIT09aSYmaXQocy4kZWwsXCJpcy1kcm9wLWlubmVyXCIpO2NvbnN0IHU9ci52YWx1ZS5kcmFnZ2luZ05vZGU7aWYoIXV8fCFpKXJldHVybjtsZXQgZD0hMCxjPSEwLHA9ITAsaD0hMDtcImZ1bmN0aW9uXCI9PXR5cGVvZiBlLmFsbG93RHJvcCYmKGQ9ZS5hbGxvd0Ryb3AodS5ub2RlLGkubm9kZSxcInByZXZcIiksaD1jPWUuYWxsb3dEcm9wKHUubm9kZSxpLm5vZGUsXCJpbm5lclwiKSxwPWUuYWxsb3dEcm9wKHUubm9kZSxpLm5vZGUsXCJuZXh0XCIpKSx0LmRhdGFUcmFuc2Zlci5kcm9wRWZmZWN0PWM/XCJtb3ZlXCI6XCJub25lXCIsKGR8fGN8fHApJiZzIT09aSYmKHMmJmwuZW1pdChcIm5vZGUtZHJhZy1sZWF2ZVwiLHUubm9kZSxzLm5vZGUsdCksbC5lbWl0KFwibm9kZS1kcmFnLWVudGVyXCIsdS5ub2RlLGkubm9kZSx0KSksKGR8fGN8fHApJiYoci52YWx1ZS5kcm9wTm9kZT1pKSxpLm5vZGUubmV4dFNpYmxpbmc9PT11Lm5vZGUmJihwPSExKSxpLm5vZGUucHJldmlvdXNTaWJsaW5nPT09dS5ub2RlJiYoZD0hMSksaS5ub2RlLmNvbnRhaW5zKHUubm9kZSwhMSkmJihjPSExKSwodS5ub2RlPT09aS5ub2RlfHx1Lm5vZGUuY29udGFpbnMoaS5ub2RlKSkmJihkPSExLGM9ITEscD0hMSk7Y29uc3Qgdj1pLiRlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxtPWEudmFsdWUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7bGV0IGY7Y29uc3QgZz1kP2M/LjI1OnA/LjQ1OjE6LTEsYj1wP2M/Ljc1OmQ/LjU1OjA6MTtsZXQgeT0tOTk5OTtjb25zdCBrPXQuY2xpZW50WS12LnRvcDtmPWs8di5oZWlnaHQqZz9cImJlZm9yZVwiOms+di5oZWlnaHQqYj9cImFmdGVyXCI6Yz9cImlubmVyXCI6XCJub25lXCI7Y29uc3QgQz1pLiRlbC5xdWVyeVNlbGVjdG9yKFwiLmVsLXRyZWUtbm9kZV9fZXhwYW5kLWljb25cIikuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkseD1uLnZhbHVlO1wiYmVmb3JlXCI9PT1mP3k9Qy50b3AtbS50b3A6XCJhZnRlclwiPT09ZiYmKHk9Qy5ib3R0b20tbS50b3ApLHguc3R5bGUudG9wPXkrXCJweFwiLHguc3R5bGUubGVmdD1DLnJpZ2h0LW0ubGVmdCtcInB4XCIsXCJpbm5lclwiPT09Zj9vdChpLiRlbCxcImlzLWRyb3AtaW5uZXJcIik6aXQoaS4kZWwsXCJpcy1kcm9wLWlubmVyXCIpLHIudmFsdWUuc2hvd0Ryb3BJbmRpY2F0b3I9XCJiZWZvcmVcIj09PWZ8fFwiYWZ0ZXJcIj09PWYsci52YWx1ZS5hbGxvd0Ryb3A9ci52YWx1ZS5zaG93RHJvcEluZGljYXRvcnx8aCxyLnZhbHVlLmRyb3BUeXBlPWYsbC5lbWl0KFwibm9kZS1kcmFnLW92ZXJcIix1Lm5vZGUsaS5ub2RlLHQpfSkpLGkub24oXCJ0cmVlLW5vZGUtZHJhZy1lbmRcIiwoZT0+e2NvbnN0e2RyYWdnaW5nTm9kZTp0LGRyb3BUeXBlOmEsZHJvcE5vZGU6bn09ci52YWx1ZTtpZihlLnByZXZlbnREZWZhdWx0KCksZS5kYXRhVHJhbnNmZXIuZHJvcEVmZmVjdD1cIm1vdmVcIix0JiZuKXtjb25zdCBpPXtkYXRhOnQubm9kZS5kYXRhfTtcIm5vbmVcIiE9PWEmJnQubm9kZS5yZW1vdmUoKSxcImJlZm9yZVwiPT09YT9uLm5vZGUucGFyZW50Lmluc2VydEJlZm9yZShpLG4ubm9kZSk6XCJhZnRlclwiPT09YT9uLm5vZGUucGFyZW50Lmluc2VydEFmdGVyKGksbi5ub2RlKTpcImlubmVyXCI9PT1hJiZuLm5vZGUuaW5zZXJ0Q2hpbGQoaSksXCJub25lXCIhPT1hJiZvLnZhbHVlLnJlZ2lzdGVyTm9kZShpKSxpdChuLiRlbCxcImlzLWRyb3AtaW5uZXJcIiksbC5lbWl0KFwibm9kZS1kcmFnLWVuZFwiLHQubm9kZSxuLm5vZGUsYSxlKSxcIm5vbmVcIiE9PWEmJmwuZW1pdChcIm5vZGUtZHJvcFwiLHQubm9kZSxuLm5vZGUsYSxlKX10JiYhbiYmbC5lbWl0KFwibm9kZS1kcmFnLWVuZFwiLHQubm9kZSxudWxsLGEsZSksci52YWx1ZS5zaG93RHJvcEluZGljYXRvcj0hMSxyLnZhbHVlLmRyYWdnaW5nTm9kZT1udWxsLHIudmFsdWUuZHJvcE5vZGU9bnVsbCxyLnZhbHVlLmFsbG93RHJvcD0hMH0pKSx7ZHJhZ1N0YXRlOnJ9fSh7cHJvcHM6ZSxjdHg6YSxlbCQ6cixkcm9wSW5kaWNhdG9yJDpzLHN0b3JlOm59KTshZnVuY3Rpb24oe2VsJDplfSxsKXtjb25zdCBhPXQoW10pLG49dChbXSk7XygoKCk9PntpKCksbHQoZS52YWx1ZSxcImtleWRvd25cIixvKX0pKSxPKCgoKT0+e2F0KGUudmFsdWUsXCJrZXlkb3duXCIsbyl9KSksUygoKCk9PnthLnZhbHVlPUFycmF5LmZyb20oZS52YWx1ZS5xdWVyeVNlbGVjdG9yQWxsKFwiW3JvbGU9dHJlZWl0ZW1dXCIpKSxuLnZhbHVlPUFycmF5LmZyb20oZS52YWx1ZS5xdWVyeVNlbGVjdG9yQWxsKFwiaW5wdXRbdHlwZT1jaGVja2JveF1cIikpfSkpLHkobiwoZT0+e2UuZm9yRWFjaCgoZT0+e2Uuc2V0QXR0cmlidXRlKFwidGFiaW5kZXhcIixcIi0xXCIpfSkpfSkpO2NvbnN0IG89dD0+e2NvbnN0IG49dC50YXJnZXQ7aWYoLTE9PT1uLmNsYXNzTmFtZS5pbmRleE9mKFwiZWwtdHJlZS1ub2RlXCIpKXJldHVybjtjb25zdCBvPXQuY29kZTthLnZhbHVlPUFycmF5LmZyb20oZS52YWx1ZS5xdWVyeVNlbGVjdG9yQWxsKFwiLmlzLWZvY3VzYWJsZVtyb2xlPXRyZWVpdGVtXVwiKSk7Y29uc3QgaT1hLnZhbHVlLmluZGV4T2Yobik7bGV0IHI7aWYoW2Z0LnVwLGZ0LmRvd25dLmluZGV4T2Yobyk+LTEpe2lmKHQucHJldmVudERlZmF1bHQoKSxvPT09ZnQudXApe3I9LTE9PT1pPzA6MCE9PWk/aS0xOmEudmFsdWUubGVuZ3RoLTE7Y29uc3QgZT1yO2Zvcig7IWwudmFsdWUuZ2V0Tm9kZShhLnZhbHVlW3JdLmRhdGFzZXQua2V5KS5jYW5Gb2N1czspe2lmKHItLSxyPT09ZSl7cj0tMTticmVha31yPDAmJihyPWEudmFsdWUubGVuZ3RoLTEpfX1lbHNle3I9LTE9PT1pPzA6aTxhLnZhbHVlLmxlbmd0aC0xP2krMTowO2NvbnN0IGU9cjtmb3IoOyFsLnZhbHVlLmdldE5vZGUoYS52YWx1ZVtyXS5kYXRhc2V0LmtleSkuY2FuRm9jdXM7KXtpZihyKysscj09PWUpe3I9LTE7YnJlYWt9cj49YS52YWx1ZS5sZW5ndGgmJihyPTApfX0tMSE9PXImJmEudmFsdWVbcl0uZm9jdXMoKX1bZnQubGVmdCxmdC5yaWdodF0uaW5kZXhPZihvKT4tMSYmKHQucHJldmVudERlZmF1bHQoKSxuLmNsaWNrKCkpO2NvbnN0IHM9bi5xdWVyeVNlbGVjdG9yKCdbdHlwZT1cImNoZWNrYm94XCJdJyk7W2Z0LmVudGVyLGZ0LnNwYWNlXS5pbmRleE9mKG8pPi0xJiZzJiYodC5wcmV2ZW50RGVmYXVsdCgpLHMuY2xpY2soKSl9LGk9KCk9Pnt2YXIgdDthLnZhbHVlPUFycmF5LmZyb20oZS52YWx1ZS5xdWVyeVNlbGVjdG9yQWxsKFwiLmlzLWZvY3VzYWJsZVtyb2xlPXRyZWVpdGVtXVwiKSksbi52YWx1ZT1BcnJheS5mcm9tKGUudmFsdWUucXVlcnlTZWxlY3RvckFsbChcImlucHV0W3R5cGU9Y2hlY2tib3hdXCIpKTtjb25zdCBsPWUudmFsdWUucXVlcnlTZWxlY3RvckFsbChcIi5pcy1jaGVja2VkW3JvbGU9dHJlZWl0ZW1dXCIpO2wubGVuZ3RoP2xbMF0uc2V0QXR0cmlidXRlKFwidGFiaW5kZXhcIixcIjBcIik6bnVsbD09PSh0PWEudmFsdWVbMF0pfHx2b2lkIDA9PT10fHx0LnNldEF0dHJpYnV0ZShcInRhYmluZGV4XCIsXCIwXCIpfX0oe2VsJDpyfSxuKTtjb25zdCBjPWwoKCgpPT57Y29uc3R7Y2hpbGROb2RlczplfT1vLnZhbHVlO3JldHVybiFlfHwwPT09ZS5sZW5ndGh8fGUuZXZlcnkoKCh7dmlzaWJsZTplfSk9PiFlKSl9KSk7eSgoKCk9PmUuZGVmYXVsdENoZWNrZWRLZXlzKSwoZT0+e24udmFsdWUuc2V0RGVmYXVsdENoZWNrZWRLZXkoZSl9KSkseSgoKCk9PmUuZGVmYXVsdEV4cGFuZGVkS2V5cyksKGU9PntuLnZhbHVlLmRlZmF1bHRFeHBhbmRlZEtleXM9ZSxuLnZhbHVlLnNldERlZmF1bHRFeHBhbmRlZEtleXMoZSl9KSkseSgoKCk9PmUuZGF0YSksKGU9PntuLnZhbHVlLnNldERhdGEoZSl9KSkseSgoKCk9PmUuY2hlY2tTdHJpY3RseSksKGU9PntuLnZhbHVlLmNoZWNrU3RyaWN0bHk9ZX0pKTtjb25zdCBwPSgpPT57Y29uc3QgZT1uLnZhbHVlLmdldEN1cnJlbnROb2RlKCk7cmV0dXJuIGU/ZS5kYXRhOm51bGx9O3JldHVybiB4KFwiUm9vdFRyZWVcIix7Y3R4OmEscHJvcHM6ZSxzdG9yZTpuLHJvb3Q6byxjdXJyZW50Tm9kZTppLGluc3RhbmNlOnYoKX0pLHtzdG9yZTpuLHJvb3Q6byxjdXJyZW50Tm9kZTppLGRyYWdTdGF0ZTpkLGVsJDpyLGRyb3BJbmRpY2F0b3IkOnMsaXNFbXB0eTpjLGZpbHRlcjp0PT57aWYoIWUuZmlsdGVyTm9kZU1ldGhvZCl0aHJvdyBuZXcgRXJyb3IoXCJbVHJlZV0gZmlsdGVyTm9kZU1ldGhvZCBpcyByZXF1aXJlZCB3aGVuIGZpbHRlclwiKTtuLnZhbHVlLmZpbHRlcih0KX0sZ2V0Tm9kZUtleTp0PT5tYyhlLm5vZGVLZXksdC5kYXRhKSxnZXROb2RlUGF0aDp0PT57aWYoIWUubm9kZUtleSl0aHJvdyBuZXcgRXJyb3IoXCJbVHJlZV0gbm9kZUtleSBpcyByZXF1aXJlZCBpbiBnZXROb2RlUGF0aFwiKTtjb25zdCBsPW4udmFsdWUuZ2V0Tm9kZSh0KTtpZighbClyZXR1cm5bXTtjb25zdCBhPVtsLmRhdGFdO2xldCBpPWwucGFyZW50O2Zvcig7aSYmaSE9PW8udmFsdWU7KWEucHVzaChpLmRhdGEpLGk9aS5wYXJlbnQ7cmV0dXJuIGEucmV2ZXJzZSgpfSxnZXRDaGVja2VkTm9kZXM6KGUsdCk9Pm4udmFsdWUuZ2V0Q2hlY2tlZE5vZGVzKGUsdCksZ2V0Q2hlY2tlZEtleXM6ZT0+bi52YWx1ZS5nZXRDaGVja2VkS2V5cyhlKSxnZXRDdXJyZW50Tm9kZTpwLGdldEN1cnJlbnRLZXk6KCk9PntpZighZS5ub2RlS2V5KXRocm93IG5ldyBFcnJvcihcIltUcmVlXSBub2RlS2V5IGlzIHJlcXVpcmVkIGluIGdldEN1cnJlbnRLZXlcIik7Y29uc3QgdD1wKCk7cmV0dXJuIHQ/dFtlLm5vZGVLZXldOm51bGx9LHNldENoZWNrZWROb2RlczoodCxsKT0+e2lmKCFlLm5vZGVLZXkpdGhyb3cgbmV3IEVycm9yKFwiW1RyZWVdIG5vZGVLZXkgaXMgcmVxdWlyZWQgaW4gc2V0Q2hlY2tlZE5vZGVzXCIpO24udmFsdWUuc2V0Q2hlY2tlZE5vZGVzKHQsbCl9LHNldENoZWNrZWRLZXlzOih0LGwpPT57aWYoIWUubm9kZUtleSl0aHJvdyBuZXcgRXJyb3IoXCJbVHJlZV0gbm9kZUtleSBpcyByZXF1aXJlZCBpbiBzZXRDaGVja2VkS2V5c1wiKTtuLnZhbHVlLnNldENoZWNrZWRLZXlzKHQsbCl9LHNldENoZWNrZWQ6KGUsdCxsKT0+e24udmFsdWUuc2V0Q2hlY2tlZChlLHQsbCl9LGdldEhhbGZDaGVja2VkTm9kZXM6KCk9Pm4udmFsdWUuZ2V0SGFsZkNoZWNrZWROb2RlcygpLGdldEhhbGZDaGVja2VkS2V5czooKT0+bi52YWx1ZS5nZXRIYWxmQ2hlY2tlZEtleXMoKSxzZXRDdXJyZW50Tm9kZTp0PT57aWYoIWUubm9kZUtleSl0aHJvdyBuZXcgRXJyb3IoXCJbVHJlZV0gbm9kZUtleSBpcyByZXF1aXJlZCBpbiBzZXRDdXJyZW50Tm9kZVwiKTtuLnZhbHVlLnNldFVzZXJDdXJyZW50Tm9kZSh0KX0sc2V0Q3VycmVudEtleTp0PT57aWYoIWUubm9kZUtleSl0aHJvdyBuZXcgRXJyb3IoXCJbVHJlZV0gbm9kZUtleSBpcyByZXF1aXJlZCBpbiBzZXRDdXJyZW50S2V5XCIpO24udmFsdWUuc2V0Q3VycmVudE5vZGVLZXkodCl9LGdldE5vZGU6ZT0+bi52YWx1ZS5nZXROb2RlKGUpLHJlbW92ZTplPT57bi52YWx1ZS5yZW1vdmUoZSl9LGFwcGVuZDooZSx0KT0+e24udmFsdWUuYXBwZW5kKGUsdCl9LGluc2VydEJlZm9yZTooZSx0KT0+e24udmFsdWUuaW5zZXJ0QmVmb3JlKGUsdCl9LGluc2VydEFmdGVyOihlLHQpPT57bi52YWx1ZS5pbnNlcnRBZnRlcihlLHQpfSxoYW5kbGVOb2RlRXhwYW5kOihlLHQsbCk9Pnt1KHQpLGEuZW1pdChcIm5vZGUtZXhwYW5kXCIsZSx0LGwpfSx1cGRhdGVLZXlDaGlsZHJlbjoodCxsKT0+e2lmKCFlLm5vZGVLZXkpdGhyb3cgbmV3IEVycm9yKFwiW1RyZWVdIG5vZGVLZXkgaXMgcmVxdWlyZWQgaW4gdXBkYXRlS2V5Q2hpbGRcIik7bi52YWx1ZS51cGRhdGVDaGlsZHJlbih0LGwpfX19fSk7Y29uc3QgTWM9e2tleTowLGNsYXNzOlwiZWwtdHJlZV9fZW1wdHktYmxvY2tcIn0sVGM9e2NsYXNzOlwiZWwtdHJlZV9fZW1wdHktdGV4dFwifSxOYz17cmVmOlwiZHJvcEluZGljYXRvciRcIixjbGFzczpcImVsLXRyZWVfX2Ryb3AtaW5kaWNhdG9yXCJ9O2Z1bmN0aW9uIERjKGUsdCxsKXtsZXQgYTthPWwucmVzcG9uc2U/XCJcIisobC5yZXNwb25zZS5lcnJvcnx8bC5yZXNwb25zZSk6bC5yZXNwb25zZVRleHQ/XCJcIitsLnJlc3BvbnNlVGV4dDpgZmFpbCB0byBwb3N0ICR7ZX0gJHtsLnN0YXR1c31gO2NvbnN0IG49bmV3IEVycm9yKGEpO3JldHVybiBuLnN0YXR1cz1sLnN0YXR1cyxuLm1ldGhvZD1cInBvc3RcIixuLnVybD1lLG59ZnVuY3Rpb24gT2MoZSl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFhNTEh0dHBSZXF1ZXN0KXJldHVybjtjb25zdCB0PW5ldyBYTUxIdHRwUmVxdWVzdCxsPWUuYWN0aW9uO3QudXBsb2FkJiYodC51cGxvYWQub25wcm9ncmVzcz1mdW5jdGlvbih0KXt0LnRvdGFsPjAmJih0LnBlcmNlbnQ9dC5sb2FkZWQvdC50b3RhbCoxMDApLGUub25Qcm9ncmVzcyh0KX0pO2NvbnN0IGE9bmV3IEZvcm1EYXRhO2UuZGF0YSYmT2JqZWN0LmtleXMoZS5kYXRhKS5mb3JFYWNoKCh0PT57YS5hcHBlbmQodCxlLmRhdGFbdF0pfSkpLGEuYXBwZW5kKGUuZmlsZW5hbWUsZS5maWxlLGUuZmlsZS5uYW1lKSx0Lm9uZXJyb3I9ZnVuY3Rpb24oKXtlLm9uRXJyb3IoRGMobCwwLHQpKX0sdC5vbmxvYWQ9ZnVuY3Rpb24oKXtpZih0LnN0YXR1czwyMDB8fHQuc3RhdHVzPj0zMDApcmV0dXJuIGUub25FcnJvcihEYyhsLDAsdCkpO2Uub25TdWNjZXNzKGZ1bmN0aW9uKGUpe2NvbnN0IHQ9ZS5yZXNwb25zZVRleHR8fGUucmVzcG9uc2U7aWYoIXQpcmV0dXJuIHQ7dHJ5e3JldHVybiBKU09OLnBhcnNlKHQpfWNhdGNoKGUpe3JldHVybiB0fX0odCkpfSx0Lm9wZW4oXCJwb3N0XCIsbCwhMCksZS53aXRoQ3JlZGVudGlhbHMmJlwid2l0aENyZWRlbnRpYWxzXCJpbiB0JiYodC53aXRoQ3JlZGVudGlhbHM9ITApO2NvbnN0IG49ZS5oZWFkZXJzfHx7fTtmb3IoY29uc3QgZSBpbiBuKW4uaGFzT3duUHJvcGVydHkoZSkmJm51bGwhPT1uW2VdJiZ0LnNldFJlcXVlc3RIZWFkZXIoZSxuW2VdKTtyZXR1cm4gdC5zZW5kKGEpLHR9RWMucmVuZGVyPWZ1bmN0aW9uKGUsdCxsLG8saSxkKXtjb25zdCBjPVAoXCJlbC10cmVlLW5vZGVcIik7cmV0dXJuIGEoKSxuKFwiZGl2XCIse3JlZjpcImVsJFwiLGNsYXNzOltcImVsLXRyZWVcIix7XCJlbC10cmVlLS1oaWdobGlnaHQtY3VycmVudFwiOmUuaGlnaGxpZ2h0Q3VycmVudCxcImlzLWRyYWdnaW5nXCI6ISFlLmRyYWdTdGF0ZS5kcmFnZ2luZ05vZGUsXCJpcy1kcm9wLW5vdC1hbGxvd1wiOiFlLmRyYWdTdGF0ZS5hbGxvd0Ryb3AsXCJpcy1kcm9wLWlubmVyXCI6XCJpbm5lclwiPT09ZS5kcmFnU3RhdGUuZHJvcFR5cGV9XSxyb2xlOlwidHJlZVwifSxbKGEoITApLG4oRSxudWxsLEgoZS5yb290LmNoaWxkTm9kZXMsKHQ9PihhKCksbihjLHtrZXk6ZS5nZXROb2RlS2V5KHQpLG5vZGU6dCxwcm9wczplLnByb3BzLFwicmVuZGVyLWFmdGVyLWV4cGFuZFwiOmUucmVuZGVyQWZ0ZXJFeHBhbmQsXCJzaG93LWNoZWNrYm94XCI6ZS5zaG93Q2hlY2tib3gsXCJyZW5kZXItY29udGVudFwiOmUucmVuZGVyQ29udGVudCxvbk5vZGVFeHBhbmQ6ZS5oYW5kbGVOb2RlRXhwYW5kfSxudWxsLDgsW1wibm9kZVwiLFwicHJvcHNcIixcInJlbmRlci1hZnRlci1leHBhbmRcIixcInNob3ctY2hlY2tib3hcIixcInJlbmRlci1jb250ZW50XCIsXCJvbk5vZGVFeHBhbmRcIl0pKSkpLDEyOCkpLGUuaXNFbXB0eT8oYSgpLG4oXCJkaXZcIixNYyxbcyhcInNwYW5cIixUYyxwKGUuZW1wdHlUZXh0KSwxKV0pKTp1KFwidi1pZlwiLCEwKSxyKHMoXCJkaXZcIixOYyxudWxsLDUxMiksW1toLGUuZHJhZ1N0YXRlLnNob3dEcm9wSW5kaWNhdG9yXV0pXSwyKX0sRWMuX19maWxlPVwicGFja2FnZXMvdHJlZS9zcmMvdHJlZS52dWVcIixFYy5pbnN0YWxsPWU9PntlLmNvbXBvbmVudChFYy5uYW1lLEVjKX07dmFyIFBjPWUoe25hbWU6XCJFbFVwbG9hZExpc3RcIixjb21wb25lbnRzOntFbFByb2dyZXNzOnZ1fSxwcm9wczp7ZmlsZXM6e3R5cGU6QXJyYXksZGVmYXVsdDooKT0+W119LGRpc2FibGVkOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMX0saGFuZGxlUHJldmlldzp7dHlwZTpGdW5jdGlvbixkZWZhdWx0OigpPT5TZX0sbGlzdFR5cGU6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJ0ZXh0XCJ9fSxlbWl0czpbXCJyZW1vdmVcIl0sc2V0dXA6KGUse2VtaXQ6bH0pPT4oe2ZvY3VzaW5nOnQoITEpLHBhcnNlUGVyY2VudGFnZTplPT5wYXJzZUludChlLDEwKSxoYW5kbGVDbGljazp0PT57ZS5oYW5kbGVQcmV2aWV3KHQpfSxoYW5kbGVSZW1vdmU6KGUsdCk9PntsKFwicmVtb3ZlXCIsdCl9LG9uRmlsZUNsaWNrZWQ6ZT0+e2UudGFyZ2V0LmZvY3VzKCl9LHQ6cWx9KX0pO2NvbnN0IFZjPXMoXCJpXCIse2NsYXNzOlwiZWwtaWNvbi1kb2N1bWVudFwifSxudWxsLC0xKSxJYz17Y2xhc3M6XCJlbC11cGxvYWQtbGlzdF9faXRlbS1zdGF0dXMtbGFiZWxcIn0sQWM9e2tleToyLGNsYXNzOlwiZWwtaWNvbi1jbG9zZS10aXBcIn0sQmM9e2tleTo0LGNsYXNzOlwiZWwtdXBsb2FkLWxpc3RfX2l0ZW0tYWN0aW9uc1wifSxMYz1zKFwiaVwiLHtjbGFzczpcImVsLWljb24tem9vbS1pblwifSxudWxsLC0xKSx6Yz1zKFwiaVwiLHtjbGFzczpcImVsLWljb24tZGVsZXRlXCJ9LG51bGwsLTEpO1BjLnJlbmRlcj1mdW5jdGlvbihlLHQsbCxvLHIsaCl7Y29uc3Qgdj1QKFwiZWwtcHJvZ3Jlc3NcIik7cmV0dXJuIGEoKSxuKFose3RhZzpcInVsXCIsY2xhc3M6W1wiZWwtdXBsb2FkLWxpc3RcIixcImVsLXVwbG9hZC1saXN0LS1cIitlLmxpc3RUeXBlLHtcImlzLWRpc2FibGVkXCI6ZS5kaXNhYmxlZH1dLG5hbWU6XCJlbC1saXN0XCJ9LHtkZWZhdWx0OmkoKCgpPT5bKGEoITApLG4oRSxudWxsLEgoZS5maWxlcywoKGwsbyk9PihhKCksbihcImxpXCIse2tleTpvLGNsYXNzOltcImVsLXVwbG9hZC1saXN0X19pdGVtXCIsXCJpcy1cIitsLnN0YXR1cyxlLmZvY3VzaW5nP1wiZm9jdXNpbmdcIjpcIlwiXSx0YWJpbmRleDpcIjBcIixvbktleWRvd246JCgodD0+IWUuZGlzYWJsZWQmJmUuaGFuZGxlUmVtb3ZlKHQsbCkpLFtcImRlbGV0ZVwiXSksb25Gb2N1czp0WzFdfHwodFsxXT10PT5lLmZvY3VzaW5nPSEwKSxvbkJsdXI6dFsyXXx8KHRbMl09dD0+ZS5mb2N1c2luZz0hMSksb25DbGljazp0WzNdfHwodFszXT0oLi4udCk9PmUub25GaWxlQ2xpY2tlZCguLi50KSl9LFtkKGUuJHNsb3RzLFwiZGVmYXVsdFwiLHtmaWxlOmx9LCgoKT0+W1widXBsb2FkaW5nXCIhPT1sLnN0YXR1cyYmW1wicGljdHVyZS1jYXJkXCIsXCJwaWN0dXJlXCJdLmluY2x1ZGVzKGUubGlzdFR5cGUpPyhhKCksbihcImltZ1wiLHtrZXk6MCxjbGFzczpcImVsLXVwbG9hZC1saXN0X19pdGVtLXRodW1ibmFpbFwiLHNyYzpsLnVybCxhbHQ6XCJcIn0sbnVsbCw4LFtcInNyY1wiXSkpOnUoXCJ2LWlmXCIsITApLHMoXCJhXCIse2NsYXNzOlwiZWwtdXBsb2FkLWxpc3RfX2l0ZW0tbmFtZVwiLG9uQ2xpY2s6dD0+ZS5oYW5kbGVDbGljayhsKX0sW1ZjLGMocChsLm5hbWUpLDEpXSw4LFtcIm9uQ2xpY2tcIl0pLHMoXCJsYWJlbFwiLEljLFtzKFwiaVwiLHtjbGFzczp7XCJlbC1pY29uLXVwbG9hZC1zdWNjZXNzXCI6ITAsXCJlbC1pY29uLWNpcmNsZS1jaGVja1wiOlwidGV4dFwiPT09ZS5saXN0VHlwZSxcImVsLWljb24tY2hlY2tcIjpbXCJwaWN0dXJlLWNhcmRcIixcInBpY3R1cmVcIl0uaW5jbHVkZXMoZS5saXN0VHlwZSl9fSxudWxsLDIpXSksZS5kaXNhYmxlZD91KFwidi1pZlwiLCEwKTooYSgpLG4oXCJpXCIse2tleToxLGNsYXNzOlwiZWwtaWNvbi1jbG9zZVwiLG9uQ2xpY2s6dD0+ZS5oYW5kbGVSZW1vdmUodCxsKX0sbnVsbCw4LFtcIm9uQ2xpY2tcIl0pKSx1KFwiIER1ZSB0byBjbG9zZSBidG4gb25seSBhcHBlYXJzIHdoZW4gbGkgZ2V0cyBmb2N1c2VkIGRpc2FwcGVhcnMgYWZ0ZXIgbGkgZ2V0cyBibHVycmVkLCB0aHVzIGtleWJvYXJkIG5hdmlnYXRpb24gY2FuIG5ldmVyIHJlYWNoIGNsb3NlIGJ0blwiKSx1KFwiIFRoaXMgaXMgYSBidWcgd2hpY2ggbmVlZHMgdG8gYmUgZml4ZWQgXCIpLHUoXCIgVE9ETzogRml4IHRoZSBpbmNvcnJlY3QgbmF2aWdhdGlvbiBpbnRlcmFjdGlvbiBcIiksZS5kaXNhYmxlZD91KFwidi1pZlwiLCEwKTooYSgpLG4oXCJpXCIsQWMscChlLnQoXCJlbC51cGxvYWQuZGVsZXRlVGlwXCIpKSwxKSksXCJ1cGxvYWRpbmdcIj09PWwuc3RhdHVzPyhhKCksbih2LHtrZXk6Myx0eXBlOlwicGljdHVyZS1jYXJkXCI9PT1lLmxpc3RUeXBlP1wiY2lyY2xlXCI6XCJsaW5lXCIsXCJzdHJva2Utd2lkdGhcIjpcInBpY3R1cmUtY2FyZFwiPT09ZS5saXN0VHlwZT82OjIscGVyY2VudGFnZTplLnBhcnNlUGVyY2VudGFnZShsLnBlcmNlbnRhZ2UpfSxudWxsLDgsW1widHlwZVwiLFwic3Ryb2tlLXdpZHRoXCIsXCJwZXJjZW50YWdlXCJdKSk6dShcInYtaWZcIiwhMCksXCJwaWN0dXJlLWNhcmRcIj09PWUubGlzdFR5cGU/KGEoKSxuKFwic3BhblwiLEJjLFtzKFwic3BhblwiLHtjbGFzczpcImVsLXVwbG9hZC1saXN0X19pdGVtLXByZXZpZXdcIixvbkNsaWNrOnQ9PmUuaGFuZGxlUHJldmlldyhsKX0sW0xjXSw4LFtcIm9uQ2xpY2tcIl0pLGUuZGlzYWJsZWQ/dShcInYtaWZcIiwhMCk6KGEoKSxuKFwic3BhblwiLHtrZXk6MCxjbGFzczpcImVsLXVwbG9hZC1saXN0X19pdGVtLWRlbGV0ZVwiLG9uQ2xpY2s6dD0+ZS5oYW5kbGVSZW1vdmUodCxsKX0sW3pjXSw4LFtcIm9uQ2xpY2tcIl0pKV0pKTp1KFwidi1pZlwiLCEwKV0pKV0sNDIsW1wib25LZXlkb3duXCJdKSkpKSwxMjgpKV0pKSxfOjF9LDgsW1wiY2xhc3NcIl0pfSxQYy5fX2ZpbGU9XCJwYWNrYWdlcy91cGxvYWQvc3JjL3VwbG9hZC1saXN0LnZ1ZVwiO3ZhciBGYz1lKHtuYW1lOlwiRWxVcGxvYWREcmFnXCIscHJvcHM6e2Rpc2FibGVkOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMX19LGVtaXRzOltcImZpbGVcIl0sc2V0dXAoZSx7ZW1pdDpsfSl7Y29uc3QgYT13KFwidXBsb2FkZXJcIix7fSksbj10KCExKTtyZXR1cm57ZHJhZ292ZXI6bixvbkRyb3A6ZnVuY3Rpb24odCl7aWYoZS5kaXNhYmxlZHx8IWEpcmV0dXJuO2NvbnN0IG89YS5hY2NlcHQ7bi52YWx1ZT0hMSxsKFwiZmlsZVwiLG8/QXJyYXkuZnJvbSh0LmRhdGFUcmFuc2Zlci5maWxlcykuZmlsdGVyKChlPT57Y29uc3R7dHlwZTp0LG5hbWU6bH09ZSxhPWwuaW5kZXhPZihcIi5cIik+LTE/XCIuXCIrbC5zcGxpdChcIi5cIikucG9wKCk6XCJcIixuPXQucmVwbGFjZSgvXFwvLiokLyxcIlwiKTtyZXR1cm4gby5zcGxpdChcIixcIikubWFwKChlPT5lLnRyaW0oKSkpLmZpbHRlcigoZT0+ZSkpLnNvbWUoKGU9PmUuc3RhcnRzV2l0aChcIi5cIik/YT09PWU6L1xcL1xcKiQvLnRlc3QoZSk/bj09PWUucmVwbGFjZSgvXFwvXFwqJC8sXCJcIik6ISEvXlteXFwvXStcXC9bXlxcL10rJC8udGVzdChlKSYmdD09PWUpKX0pKTp0LmRhdGFUcmFuc2Zlci5maWxlcyl9LG9uRHJhZ292ZXI6ZnVuY3Rpb24oKXtlLmRpc2FibGVkfHwobi52YWx1ZT0hMCl9fX19KTtGYy5yZW5kZXI9ZnVuY3Rpb24oZSx0LGwsbyxpLHIpe3JldHVybiBhKCksbihcImRpdlwiLHtjbGFzczp7XCJlbC11cGxvYWQtZHJhZ2dlclwiOiEwLFwiaXMtZHJhZ292ZXJcIjplLmRyYWdvdmVyfSxvbkRyb3A6dFsxXXx8KHRbMV09VCgoKC4uLnQpPT5lLm9uRHJvcCguLi50KSksW1wicHJldmVudFwiXSkpLG9uRHJhZ292ZXI6dFsyXXx8KHRbMl09VCgoKC4uLnQpPT5lLm9uRHJhZ292ZXIoLi4udCkpLFtcInByZXZlbnRcIl0pKSxvbkRyYWdsZWF2ZTp0WzNdfHwodFszXT1UKCh0PT5lLmRyYWdvdmVyPSExKSxbXCJwcmV2ZW50XCJdKSl9LFtkKGUuJHNsb3RzLFwiZGVmYXVsdFwiKV0sMzQpfSxGYy5fX2ZpbGU9XCJwYWNrYWdlcy91cGxvYWQvc3JjL3VwbG9hZC1kcmFnZ2VyLnZ1ZVwiO3ZhciAkYz1lKHtjb21wb25lbnRzOntVcGxvYWREcmFnZ2VyOkZjfSxwcm9wczp7dHlwZTp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIlwifSxhY3Rpb246e3R5cGU6U3RyaW5nLHJlcXVpcmVkOiEwfSxuYW1lOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiZmlsZVwifSxkYXRhOnt0eXBlOk9iamVjdCxkZWZhdWx0OigpPT5udWxsfSxoZWFkZXJzOnt0eXBlOk9iamVjdCxkZWZhdWx0OigpPT5udWxsfSx3aXRoQ3JlZGVudGlhbHM6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiExfSxtdWx0aXBsZTp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6bnVsbH0sYWNjZXB0Ont0eXBlOlN0cmluZyxkZWZhdWx0OlwiXCJ9LG9uU3RhcnQ6e3R5cGU6RnVuY3Rpb24sZGVmYXVsdDpTZX0sb25Qcm9ncmVzczp7dHlwZTpGdW5jdGlvbixkZWZhdWx0OlNlfSxvblN1Y2Nlc3M6e3R5cGU6RnVuY3Rpb24sZGVmYXVsdDpTZX0sb25FcnJvcjp7dHlwZTpGdW5jdGlvbixkZWZhdWx0OlNlfSxiZWZvcmVVcGxvYWQ6e3R5cGU6RnVuY3Rpb24sZGVmYXVsdDpTZX0sZHJhZzp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITF9LG9uUHJldmlldzp7dHlwZTpGdW5jdGlvbixkZWZhdWx0OlNlfSxvblJlbW92ZTp7dHlwZTpGdW5jdGlvbixkZWZhdWx0OlNlfSxmaWxlTGlzdDp7dHlwZTpBcnJheSxkZWZhdWx0OigpPT5bXX0sYXV0b1VwbG9hZDp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITB9LGxpc3RUeXBlOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwidGV4dFwifSxodHRwUmVxdWVzdDp7dHlwZTpGdW5jdGlvbixkZWZhdWx0OigpPT5PY30sZGlzYWJsZWQ6Qm9vbGVhbixsaW1pdDp7dHlwZTpOdW1iZXIsZGVmYXVsdDpudWxsfSxvbkV4Y2VlZDp7dHlwZTpGdW5jdGlvbixkZWZhdWx0OlNlfX0sc2V0dXAoZSl7Y29uc3QgbD10KHt9KSxhPXQoITEpLG49dChudWxsKTtmdW5jdGlvbiBvKHQpe2lmKGUubGltaXQmJmUuZmlsZUxpc3QubGVuZ3RoK3QubGVuZ3RoPmUubGltaXQpcmV0dXJuIHZvaWQgZS5vbkV4Y2VlZCh0LGUuZmlsZUxpc3QpO2xldCBsPUFycmF5LmZyb20odCk7ZS5tdWx0aXBsZXx8KGw9bC5zbGljZSgwLDEpKSwwIT09bC5sZW5ndGgmJmwuZm9yRWFjaCgodD0+e2Uub25TdGFydCh0KSxlLmF1dG9VcGxvYWQmJmkodCl9KSl9ZnVuY3Rpb24gaSh0KXtpZihuLnZhbHVlLnZhbHVlPW51bGwsIWUuYmVmb3JlVXBsb2FkKXJldHVybiByKHQpO2NvbnN0IGw9ZS5iZWZvcmVVcGxvYWQodCk7bCBpbnN0YW5jZW9mIFByb21pc2U/bC50aGVuKChlPT57Y29uc3QgbD1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSk7aWYoXCJbb2JqZWN0IEZpbGVdXCI9PT1sfHxcIltvYmplY3QgQmxvYl1cIj09PWwpe1wiW29iamVjdCBCbG9iXVwiPT09bCYmKGU9bmV3IEZpbGUoW2VdLHQubmFtZSx7dHlwZTp0LnR5cGV9KSk7Zm9yKGNvbnN0IGwgaW4gdCl0Lmhhc093blByb3BlcnR5KGwpJiYoZVtsXT10W2xdKTtyKGUpfWVsc2Ugcih0KX0pKS5jYXRjaCgoKCk9PntlLm9uUmVtb3ZlKG51bGwsdCl9KSk6ITEhPT1sP3IodCk6ZS5vblJlbW92ZShudWxsLHQpfWZ1bmN0aW9uIHIodCl7Y29uc3R7dWlkOmF9PXQsbj17aGVhZGVyczplLmhlYWRlcnMsd2l0aENyZWRlbnRpYWxzOmUud2l0aENyZWRlbnRpYWxzLGZpbGU6dCxkYXRhOmUuZGF0YSxmaWxlbmFtZTplLm5hbWUsYWN0aW9uOmUuYWN0aW9uLG9uUHJvZ3Jlc3M6bD0+e2Uub25Qcm9ncmVzcyhsLHQpfSxvblN1Y2Nlc3M6bj0+e2Uub25TdWNjZXNzKG4sdCksZGVsZXRlIGwudmFsdWVbYV19LG9uRXJyb3I6bj0+e2Uub25FcnJvcihuLHQpLGRlbGV0ZSBsLnZhbHVlW2FdfX0sbz1lLmh0dHBSZXF1ZXN0KG4pO2wudmFsdWVbYV09byxvIGluc3RhbmNlb2YgUHJvbWlzZSYmby50aGVuKG4ub25TdWNjZXNzLG4ub25FcnJvcil9ZnVuY3Rpb24gcygpe2UuZGlzYWJsZWR8fChuLnZhbHVlLnZhbHVlPW51bGwsbi52YWx1ZS5jbGljaygpKX1yZXR1cm57cmVxczpsLG1vdXNlb3ZlcjphLGlucHV0UmVmOm4sYWJvcnQ6ZnVuY3Rpb24oZSl7Y29uc3QgdD1sLnZhbHVlO2lmKGUpe2xldCBsPWU7ZS51aWQmJihsPWUudWlkKSx0W2xdJiZ0W2xdLmFib3J0KCl9ZWxzZSBPYmplY3Qua2V5cyh0KS5mb3JFYWNoKChlPT57dFtlXSYmdFtlXS5hYm9ydCgpLGRlbGV0ZSB0W2VdfSkpfSxwb3N0OnIsaGFuZGxlQ2hhbmdlOmZ1bmN0aW9uKGUpe2NvbnN0IHQ9ZS50YXJnZXQuZmlsZXM7dCYmbyh0KX0saGFuZGxlQ2xpY2s6cyxoYW5kbGVLZXlkb3duOmZ1bmN0aW9uKCl7cygpfSx1cGxvYWQ6aSx1cGxvYWRGaWxlczpvfX19KTtmdW5jdGlvbiBSYyhlLHQpe3JldHVybiB0LmZpbmQoKHQ9PnQudWlkPT09ZS51aWQpKX1mdW5jdGlvbiBIYyhlKXtyZXR1cm4gRGF0ZS5ub3coKStlfSRjLnJlbmRlcj1mdW5jdGlvbihlLHQsbCxvLHIsdSl7Y29uc3QgYz1QKFwidXBsb2FkLWRyYWdnZXJcIik7cmV0dXJuIGEoKSxuKFwiZGl2XCIse2NsYXNzOltcImVsLXVwbG9hZFwiLFwiZWwtdXBsb2FkLS1cIitlLmxpc3RUeXBlXSx0YWJpbmRleDpcIjBcIixvbkNsaWNrOnRbMl18fCh0WzJdPSguLi50KT0+ZS5oYW5kbGVDbGljayguLi50KSksb25LZXlkb3duOnRbM118fCh0WzNdPSQoVCgoKC4uLnQpPT5lLmhhbmRsZUtleWRvd24oLi4udCkpLFtcInNlbGZcIl0pLFtcImVudGVyXCIsXCJzcGFjZVwiXSkpfSxbZS5kcmFnPyhhKCksbihjLHtrZXk6MCxkaXNhYmxlZDplLmRpc2FibGVkLG9uRmlsZTplLnVwbG9hZEZpbGVzfSx7ZGVmYXVsdDppKCgoKT0+W2QoZS4kc2xvdHMsXCJkZWZhdWx0XCIpXSkpLF86M30sOCxbXCJkaXNhYmxlZFwiLFwib25GaWxlXCJdKSk6ZChlLiRzbG90cyxcImRlZmF1bHRcIix7a2V5OjF9KSxzKFwiaW5wdXRcIix7cmVmOlwiaW5wdXRSZWZcIixjbGFzczpcImVsLXVwbG9hZF9faW5wdXRcIix0eXBlOlwiZmlsZVwiLG5hbWU6ZS5uYW1lLG11bHRpcGxlOmUubXVsdGlwbGUsYWNjZXB0OmUuYWNjZXB0LG9uQ2hhbmdlOnRbMV18fCh0WzFdPSguLi50KT0+ZS5oYW5kbGVDaGFuZ2UoLi4udCkpfSxudWxsLDQwLFtcIm5hbWVcIixcIm11bHRpcGxlXCIsXCJhY2NlcHRcIl0pXSwzNCl9LCRjLl9fZmlsZT1cInBhY2thZ2VzL3VwbG9hZC9zcmMvdXBsb2FkLnZ1ZVwiO3ZhciBXYz1lPT57Y29uc3QgbD10KFtdKSxhPXQobnVsbCk7bGV0IG49MTtyZXR1cm4geSgoKCk9PmUubGlzdFR5cGUpLCh0PT57XCJwaWN0dXJlLWNhcmRcIiE9PXQmJlwicGljdHVyZVwiIT09dHx8KGwudmFsdWU9bC52YWx1ZS5tYXAoKHQ9PntpZighdC51cmwmJnQucmF3KXRyeXt0LnVybD1VUkwuY3JlYXRlT2JqZWN0VVJMKHQucmF3KX1jYXRjaChhKXtlLm9uRXJyb3IoYSx0LGwudmFsdWUpfXJldHVybiB0fSkpKX0pKSx5KCgoKT0+ZS5maWxlTGlzdCksKGU9PntsLnZhbHVlPWUubWFwKChlPT4oZS51aWQ9ZS51aWR8fEhjKG4rKyksZS5zdGF0dXM9ZS5zdGF0dXN8fFwic3VjY2Vzc1wiLGUpKSl9KSx7aW1tZWRpYXRlOiEwLGRlZXA6ITB9KSx7Y2xlYXJGaWxlczpmdW5jdGlvbigpe2wudmFsdWU9W119LGhhbmRsZUVycm9yOmZ1bmN0aW9uKHQsYSl7Y29uc3Qgbj1SYyhhLGwudmFsdWUpO24uc3RhdHVzPVwiZmFpbFwiLGwudmFsdWUuc3BsaWNlKGwudmFsdWUuaW5kZXhPZihuKSwxKSxlLm9uRXJyb3IodCxuLGwudmFsdWUpLGUub25DaGFuZ2UobixsLnZhbHVlKX0saGFuZGxlUHJvZ3Jlc3M6ZnVuY3Rpb24odCxhKXtjb25zdCBuPVJjKGEsbC52YWx1ZSk7ZS5vblByb2dyZXNzKHQsbixsLnZhbHVlKSxuLnN0YXR1cz1cInVwbG9hZGluZ1wiLG4ucGVyY2VudGFnZT10LnBlcmNlbnR8fDB9LGhhbmRsZVN0YXJ0OmZ1bmN0aW9uKHQpe2NvbnN0IGE9SGMobisrKTt0LnVpZD1hO2NvbnN0IG89e25hbWU6dC5uYW1lLHBlcmNlbnRhZ2U6MCxzdGF0dXM6XCJyZWFkeVwiLHNpemU6dC5zaXplLHJhdzp0LHVpZDphfTtpZihcInBpY3R1cmUtY2FyZFwiPT09ZS5saXN0VHlwZXx8XCJwaWN0dXJlXCI9PT1lLmxpc3RUeXBlKXRyeXtvLnVybD1VUkwuY3JlYXRlT2JqZWN0VVJMKHQpfWNhdGNoKHQpe2NvbnNvbGUuZXJyb3IoXCJbRWxlbWVudCBFcnJvcl1bVXBsb2FkXVwiLHQpLGUub25FcnJvcih0LG8sbC52YWx1ZSl9bC52YWx1ZS5wdXNoKG8pLGUub25DaGFuZ2UobyxsLnZhbHVlKX0saGFuZGxlU3VjY2VzczpmdW5jdGlvbih0LGEpe2NvbnN0IG49UmMoYSxsLnZhbHVlKTtuJiYobi5zdGF0dXM9XCJzdWNjZXNzXCIsbi5yZXNwb25zZT10LGUub25TdWNjZXNzKHQsbixsLnZhbHVlKSxlLm9uQ2hhbmdlKG4sbC52YWx1ZSkpfSxoYW5kbGVSZW1vdmU6ZnVuY3Rpb24odCxuKXtuJiYodD1SYyhuLGwudmFsdWUpKTtjb25zdCBvPSgpPT57IWZ1bmN0aW9uKGUpe2EudmFsdWUuYWJvcnQoZSl9KHQpO2NvbnN0IG49bC52YWx1ZTtuLnNwbGljZShuLmluZGV4T2YodCksMSksZS5vblJlbW92ZSh0LG4pfTtpZihlLmJlZm9yZVJlbW92ZSl7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgZS5iZWZvcmVSZW1vdmUpe2NvbnN0IGE9ZS5iZWZvcmVSZW1vdmUodCxsLnZhbHVlKTthIGluc3RhbmNlb2YgUHJvbWlzZT9hLnRoZW4oKCgpPT57bygpfSkpLmNhdGNoKFNlKTohMSE9PWEmJm8oKX19ZWxzZSBvKCl9LHN1Ym1pdDpmdW5jdGlvbigpe2wudmFsdWUuZmlsdGVyKChlPT5cInJlYWR5XCI9PT1lLnN0YXR1cykpLmZvckVhY2goKGU9PnthLnZhbHVlLnVwbG9hZChlLnJhdyl9KSl9LHVwbG9hZEZpbGVzOmwsdXBsb2FkUmVmOmF9fSxqYz1lKHtuYW1lOlwiRWxVcGxvYWRcIixjb21wb25lbnRzOntVcGxvYWQ6JGMsVXBsb2FkTGlzdDpQY30scHJvcHM6e2FjdGlvbjp7dHlwZTpTdHJpbmcscmVxdWlyZWQ6ITB9LGhlYWRlcnM6e3R5cGU6T2JqZWN0LGRlZmF1bHQ6KCk9Pih7fSl9LGRhdGE6e3R5cGU6T2JqZWN0LGRlZmF1bHQ6KCk9Pih7fSl9LG11bHRpcGxlOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMX0sbmFtZTp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcImZpbGVcIn0sZHJhZzp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITF9LHdpdGhDcmVkZW50aWFsczpCb29sZWFuLHNob3dGaWxlTGlzdDp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITB9LGFjY2VwdDp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIlwifSx0eXBlOnt0eXBlOlN0cmluZyxkZWZhdWx0Olwic2VsZWN0XCJ9LGJlZm9yZVVwbG9hZDp7dHlwZTpGdW5jdGlvbixkZWZhdWx0OlNlfSxiZWZvcmVSZW1vdmU6e3R5cGU6RnVuY3Rpb24sZGVmYXVsdDpTZX0sb25SZW1vdmU6e3R5cGU6RnVuY3Rpb24sZGVmYXVsdDpTZX0sb25DaGFuZ2U6e3R5cGU6RnVuY3Rpb24sZGVmYXVsdDpTZX0sb25QcmV2aWV3Ont0eXBlOkZ1bmN0aW9uLGRlZmF1bHQ6U2V9LG9uU3VjY2Vzczp7dHlwZTpGdW5jdGlvbixkZWZhdWx0OlNlfSxvblByb2dyZXNzOnt0eXBlOkZ1bmN0aW9uLGRlZmF1bHQ6U2V9LG9uRXJyb3I6e3R5cGU6RnVuY3Rpb24sZGVmYXVsdDpTZX0sZmlsZUxpc3Q6e3R5cGU6QXJyYXksZGVmYXVsdDooKT0+W119LGF1dG9VcGxvYWQ6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiEwfSxsaXN0VHlwZTp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcInRleHRcIn0saHR0cFJlcXVlc3Q6e3R5cGU6RnVuY3Rpb24sZGVmYXVsdDpPY30sZGlzYWJsZWQ6Qm9vbGVhbixsaW1pdDp7dHlwZTpOdW1iZXIsZGVmYXVsdDpudWxsfSxvbkV4Y2VlZDp7dHlwZTpGdW5jdGlvbixkZWZhdWx0OigpPT5TZX19LHNldHVwKGUpe2NvbnN0IGE9dyhcImVsRm9ybVwiLHt9KSxuPWwoKCgpPT5lLmRpc2FibGVkfHxhLmRpc2FibGVkKSkse2NsZWFyRmlsZXM6byxoYW5kbGVFcnJvcjppLGhhbmRsZVByb2dyZXNzOnIsaGFuZGxlU3RhcnQ6cyxoYW5kbGVTdWNjZXNzOnUsaGFuZGxlUmVtb3ZlOmQsc3VibWl0OmMsdXBsb2FkUmVmOnAsdXBsb2FkRmlsZXM6aH09V2MoZSk7cmV0dXJuIHgoXCJ1cGxvYWRlclwiLHYoKSksTygoKCk9PntoLnZhbHVlLmZvckVhY2goKGU9PntlLnVybCYmMD09PWUudXJsLmluZGV4T2YoXCJibG9iOlwiKSYmVVJMLnJldm9rZU9iamVjdFVSTChlLnVybCl9KSl9KSkse2RyYWdPdmVyOnQoITEpLGRyYWdpbmc6dCghMSksaGFuZGxlRXJyb3I6aSxoYW5kbGVQcm9ncmVzczpyLGhhbmRsZVJlbW92ZTpkLGhhbmRsZVN0YXJ0OnMsaGFuZGxlU3VjY2Vzczp1LHVwbG9hZERpc2FibGVkOm4sdXBsb2FkRmlsZXM6aCx1cGxvYWRSZWY6cCxzdWJtaXQ6YyxjbGVhckZpbGVzOm99fSxyZW5kZXIoKXt2YXIgZSx0O2xldCBsO2w9dGhpcy5zaG93RmlsZUxpc3Q/RChQYyx7ZGlzYWJsZWQ6dGhpcy51cGxvYWREaXNhYmxlZCxsaXN0VHlwZTp0aGlzLmxpc3RUeXBlLGZpbGVzOnRoaXMudXBsb2FkRmlsZXMsb25SZW1vdmU6dGhpcy5oYW5kbGVSZW1vdmUsaGFuZGxlUHJldmlldzp0aGlzLm9uUHJldmlld30sdGhpcy4kc2xvdHMuZmlsZT97ZGVmYXVsdDplPT50aGlzLiRzbG90cy5maWxlKHtmaWxlOmUuZmlsZX0pfTpudWxsKTpudWxsO2NvbnN0IGE9e3R5cGU6dGhpcy50eXBlLGRyYWc6dGhpcy5kcmFnLGFjdGlvbjp0aGlzLmFjdGlvbixtdWx0aXBsZTp0aGlzLm11bHRpcGxlLFwiYmVmb3JlLXVwbG9hZFwiOnRoaXMuYmVmb3JlVXBsb2FkLFwid2l0aC1jcmVkZW50aWFsc1wiOnRoaXMud2l0aENyZWRlbnRpYWxzLGhlYWRlcnM6dGhpcy5oZWFkZXJzLG5hbWU6dGhpcy5uYW1lLGRhdGE6dGhpcy5kYXRhLGFjY2VwdDp0aGlzLmFjY2VwdCxmaWxlTGlzdDp0aGlzLnVwbG9hZEZpbGVzLGF1dG9VcGxvYWQ6dGhpcy5hdXRvVXBsb2FkLGxpc3RUeXBlOnRoaXMubGlzdFR5cGUsZGlzYWJsZWQ6dGhpcy51cGxvYWREaXNhYmxlZCxsaW1pdDp0aGlzLmxpbWl0LFwib24tZXhjZWVkXCI6dGhpcy5vbkV4Y2VlZCxcIm9uLXN0YXJ0XCI6dGhpcy5oYW5kbGVTdGFydCxcIm9uLXByb2dyZXNzXCI6dGhpcy5oYW5kbGVQcm9ncmVzcyxcIm9uLXN1Y2Nlc3NcIjp0aGlzLmhhbmRsZVN1Y2Nlc3MsXCJvbi1lcnJvclwiOnRoaXMuaGFuZGxlRXJyb3IsXCJvbi1wcmV2aWV3XCI6dGhpcy5vblByZXZpZXcsXCJvbi1yZW1vdmVcIjp0aGlzLmhhbmRsZVJlbW92ZSxcImh0dHAtcmVxdWVzdFwiOnRoaXMuaHR0cFJlcXVlc3QscmVmOlwidXBsb2FkUmVmXCJ9LG49dGhpcy4kc2xvdHMudHJpZ2dlcnx8dGhpcy4kc2xvdHMuZGVmYXVsdCxvPUQoJGMsYSx7ZGVmYXVsdDooKT0+bnVsbD09bj92b2lkIDA6bigpfSk7cmV0dXJuIEQoXCJkaXZcIixbXCJwaWN0dXJlLWNhcmRcIj09PXRoaXMubGlzdFR5cGU/bDpudWxsLHRoaXMuJHNsb3RzLnRyaWdnZXI/W28sdGhpcy4kc2xvdHMuZGVmYXVsdCgpXTpvLG51bGw9PT0odD0oZT10aGlzLiRzbG90cykudGlwKXx8dm9pZCAwPT09dD92b2lkIDA6dC5jYWxsKGUpLFwicGljdHVyZS1jYXJkXCIhPT10aGlzLmxpc3RUeXBlP2w6bnVsbF0pfX0pO2pjLl9fZmlsZT1cInBhY2thZ2VzL3VwbG9hZC9zcmMvaW5kZXgudnVlXCIsamMuaW5zdGFsbD1lPT57ZS5jb21wb25lbnQoamMubmFtZSxqYyl9O3ZhciBLYz1lKHtuYW1lOlwiRWxWaXJ0dWFsTGlzdEl0ZW1cIixwcm9wczp7fSxzZXR1cCgpe2NvbnN0IGU9dCgpO3JldHVybiBfKCgoKT0+e30pKSxTKCgoKT0+e30pKSx7aXRlbVJlZjplfX19KTtjb25zdCBZYz10ZShcImRhdGEtdi0wOWQxZWRkYlwiKTtKKFwiZGF0YS12LTA5ZDFlZGRiXCIpO2NvbnN0IHFjPXtyZWY6XCJpdGVtUmVmXCIsY2xhc3M6XCJlbC12bF9faXRlbVwifTtlZSgpO2NvbnN0IFVjPVljKCgoZSx0LGwsbyxpLHIpPT4oYSgpLG4oXCJkaXZcIixxYyxbZChlLiRzbG90cyxcImRlZmF1bHRcIildLDUxMikpKSk7S2MucmVuZGVyPVVjLEtjLl9fc2NvcGVJZD1cImRhdGEtdi0wOWQxZWRkYlwiLEtjLl9fZmlsZT1cInBhY2thZ2VzL3ZpcnR1YWwtbGlzdC9zcmMvdmlydHVhbC1pdGVtLnZ1ZVwiO3ZhciBHYz1lKHtuYW1lOlwiRWxWaXJ0dWFsTGlzdFwiLGNvbXBvbmVudHM6e1tLYy5uYW1lXTpLY30scHJvcHM6e2RpcmVjdGlvbjp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcInZcIn0sZGF0YTp7dHlwZTpBcnJheSxyZXF1aXJlZDohMH0saXRlbVNpemU6e3R5cGU6TnVtYmVyLHJlcXVpcmVkOiEwfSx3aW5kb3dTaXplOnt0eXBlOk51bWJlcixyZXF1aXJlZDohMH0scG9vbFNpemU6e3R5cGU6TnVtYmVyLGRlZmF1bHQ6MjB9fSxzZXR1cDplPT5mdW5jdGlvbihlKXtjb25zdCBhPXQoKSxuPXQoMCksbz10KDApLGk9dCghMCkscj10KFwiXCIpLHM9dChcIlwiKSx1PXQoKSxkPXQoXCJcIik7eSgoKCk9PmUuZGlyZWN0aW9uKSwoZT0+e2NvbnN0IHQ9XCJ2XCI9PT1lO2kudmFsdWU9dCxyLnZhbHVlPVwiY2xpZW50XCIrKHQ/XCJIZWlnaHRcIjpcIldpZHRoXCIpLHMudmFsdWU9XCJzY3JvbGxcIisodD9cIlRvcFwiOlwiTGVmdFwiKSx1LnZhbHVlPXQ/XCJZXCI6XCJYXCIsZC52YWx1ZT10P1wiaGVpZ2h0XCI6XCJ3aWR0aFwifSkse2ltbWVkaWF0ZTohMH0pLHkoKCgpPT5lLnBvb2xTaXplKSwoZT0+e28udmFsdWU9TWF0aC5mbG9vcihlLzMpfSkse2ltbWVkaWF0ZTohMH0pO2NvbnN0IGM9bCgoKCk9PmUucG9vbFNpemUrMipaZShvKSkpLHA9bCgoKCk9Pk1hdGgubWF4KDAsTWF0aC5mbG9vcihaZShuKS9lLml0ZW1TaXplKS1aZShvKSkpKSxoPWwoKCgpPT4oe1taZShkKV06ZS53aW5kb3dTaXplK1wicHhcIn0pKSksdj1sKCgoKT0+KHtbWmUoZCldOmUuZGF0YS5sZW5ndGgqZS5pdGVtU2l6ZStcInB4XCJ9KSkpLG09bCgoKCk9Pntjb25zdCB0PVplKHApKmUuaXRlbVNpemU7cmV0dXJue3RyYW5zZm9ybTpgdHJhbnNsYXRlJHtaZSh1KX0oJHt0fXB4KWB9fSkpLGY9bCgoKCk9Pih7W1plKGQpXTplLml0ZW1TaXplK1wicHhcIn0pKSk7bGV0IGc9bnVsbDtjb25zdCBiPWwoKCgpPT57Y29uc3QgdD1aZShwKSxsPU1hdGgubWluKGUuZGF0YS5sZW5ndGgtdCxaZShjKSk7cmV0dXJuIGUuZGF0YS5zbGljZSh0LHQrbCl9KSk7cmV0dXJue3ZpZXdwb3J0UmVmOmEsY29udGVudFN0eWxlOnYsaXRlbUNvbnRhaW5lclN0eWxlOm0saXRlbVN0eWxlOmYsdmlld3BvcnRTdHlsZTpoLHN0YXJ0Tm9kZTpwLHJlbmRlcmluZ0l0ZW1zOmMsd2luZG93OmIsb25TY3JvbGw6ZT0+e2cmJmNhbmNlbEFuaW1hdGlvbkZyYW1lKGcpLGc9cmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgoKT0+e24udmFsdWU9ZS50YXJnZXRbWmUocyldfSkpfSxzY3JvbGxUbzoodCxsPVwiaGVhZFwiKT0+e2lmKHplKXJldHVybjtsZXQgbztzd2l0Y2goKHQ8MHx8dD5lLmRhdGEubGVuZ3RoKSYmbXQoXCJFbFZpcnR1YWxMaXN0XVwiLFwiT3V0IG9mIGxpc3QgcmFuZ2VcIiksbCl7Y2FzZVwiaGVhZFwiOm89dCplLml0ZW1TaXplO2JyZWFrO2Nhc2VcImNlbnRlclwiOm89KHQtTWF0aC5mbG9vcihNYXRoLmZsb29yKGUud2luZG93U2l6ZS9lLml0ZW1TaXplKS8yKSkqZS5pdGVtU2l6ZTticmVhaztjYXNlXCJ0YWlsXCI6bz0odC1NYXRoLmZsb29yKGUud2luZG93U2l6ZS9lLml0ZW1TaXplKSsxKSplLml0ZW1TaXplO2JyZWFrO2RlZmF1bHQ6bXQoXCJbRWxWaXJ0dWFsTGlzdF1cIixcIlVuc3VwcG9ydGVkIGFsaWdubWVudFwiKX1yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCgpPT57bi52YWx1ZT1vLGEudmFsdWVbWmUocyldPW99KSl9fX0oZSl9KTtHYy5yZW5kZXI9ZnVuY3Rpb24oZSx0LGwsbyxyLHUpe2NvbnN0IGM9UChcImVsLXZpcnR1YWwtbGlzdC1pdGVtXCIpO3JldHVybiBhKCksbihcImRpdlwiLHtyZWY6XCJ2aWV3cG9ydFJlZlwiLGNsYXNzOlwiZWwtdmxfX3ZpZXdwb3J0XCIsc3R5bGU6ZS52aWV3cG9ydFN0eWxlLG9uU2Nyb2xsUGFzc2l2ZTp0WzFdfHwodFsxXT0oLi4udCk9PmUub25TY3JvbGwoLi4udCkpfSxbcyhcImRpdlwiLHtjbGFzczpcImVsLXZsX19jb250ZW50XCIsc3R5bGU6ZS5jb250ZW50U3R5bGV9LFtzKFwiZGl2XCIse2NsYXNzOlwiZWwtdmxfX2l0ZW0tY29udGFpbmVyXCIsc3R5bGU6ZS5pdGVtQ29udGFpbmVyU3R5bGUsXCJkYXRhLWRpcmVjdGlvblwiOmUuZGlyZWN0aW9ufSxbKGEoITApLG4oRSxudWxsLEgoZS53aW5kb3csKCh0LGwpPT4oYSgpLG4oYyx7a2V5OmwsY2xhc3M6XCJlbC12bF9faXRlbVwiLHN0eWxlOmUuaXRlbVN0eWxlfSx7ZGVmYXVsdDppKCgoKT0+W2QoZS4kc2xvdHMsXCJkZWZhdWx0XCIse2l0ZW06dH0pXSkpLF86Mn0sMTAzMixbXCJzdHlsZVwiXSkpKSksMTI4KSldLDEyLFtcImRhdGEtZGlyZWN0aW9uXCJdKV0sNCldLDM2KX0sR2MuX19maWxlPVwicGFja2FnZXMvdmlydHVhbC1saXN0L3NyYy9pbmRleC52dWVcIixHYy5pbnN0YWxsPWU9PntlLmNvbXBvbmVudChHYy5uYW1lLEdjKX07Y29uc3QgWGM9XCIxLjAuMS1iZXRhLjlcIixRYz1lPT57S2w9ZXx8S2wsS2wubmFtZSYmc2UubG9jYWxlKEtsLm5hbWUpfSxaYz17c2l6ZTpcIlwiLHpJbmRleDoyZTN9LEpjPVtDZSxfZSxFbCxObCxPbCxWbCxBbCxMbCwkbCxXbCxNYSxJYSxCYSxSYSx3bix5bixLYSxNbixUbixEbixPbixJbixWbixubyxwbyxkaSxoaSx5aSxraSxFaSxOaSxEaSxPaSx6dCxWaSxJaSxBaSx0cixXdCxwcixocixDcixUcixPcixWcixfcyxJcyx6cyxudSxvdSxjdSxTbCx2dSxYYSxidSx5dSxrdSxDdSxubCxNcyxTdSxEdSxBdSxCdSxMdSwkdSx4ZCx6ZCxSZCxrbixrYSxLZCxZZCxxZCxEcixpYyxFYyxqYyxHY10sZXA9W2NyLGtyLCRyLGRzLGJzXSx0cD0oZSx0KT0+e2NvbnN0IGw9T2JqZWN0LmFzc2lnbihaYyx0KTtRYyhsLmxvY2FsZSksZS5jb25maWcuZ2xvYmFsUHJvcGVydGllcy4kRUxFTUVOVD1sLChlPT57ZGw9ZX0pKGwpLEpjLmZvckVhY2goKHQ9PntlLmNvbXBvbmVudCh0Lm5hbWUsdCl9KSksZXAuZm9yRWFjaCgodD0+e2UudXNlKHQpfSkpfTt2YXIgbHA9e3ZlcnNpb246XCIxLjAuMS1iZXRhLjlcIixpbnN0YWxsOnRwfTtleHBvcnQgZGVmYXVsdCBscDtleHBvcnR7Q2UgYXMgRWxBbGVydCxfZSBhcyBFbEFzaWRlLEVsIGFzIEVsQXV0b2NvbXBsZXRlLE5sIGFzIEVsQXZhdGFyLE9sIGFzIEVsQmFja3RvcCxWbCBhcyBFbEJhZGdlLEFsIGFzIEVsQnJlYWRjcnVtYixMbCBhcyBFbEJyZWFkY3J1bWJJdGVtLCRsIGFzIEVsQnV0dG9uLFdsIGFzIEVsQnV0dG9uR3JvdXAsTWEgYXMgRWxDYWxlbmRhcixJYSBhcyBFbENhcmQsQmEgYXMgRWxDYXJvdXNlbCxSYSBhcyBFbENhcm91c2VsSXRlbSx3biBhcyBFbENhc2NhZGVyLHluIGFzIEVsQ2FzY2FkZXJQYW5lbCxLYSBhcyBFbENoZWNrYm94LE1uIGFzIEVsQ2hlY2tib3hCdXR0b24sVG4gYXMgRWxDaGVja2JveEdyb3VwLERuIGFzIEVsQ29sLE9uIGFzIEVsQ29sbGFwc2UsSW4gYXMgRWxDb2xsYXBzZUl0ZW0sVm4gYXMgRWxDb2xsYXBzZVRyYW5zaXRpb24sbm8gYXMgRWxDb2xvclBpY2tlcixwbyBhcyBFbENvbnRhaW5lcixkaSBhcyBFbERhdGVQaWNrZXIsaGkgYXMgRWxEaWFsb2cseWkgYXMgRWxEaXZpZGVyLGtpIGFzIEVsRHJhd2VyLEVpIGFzIEVsRHJvcGRvd24sTmkgYXMgRWxEcm9wZG93bkl0ZW0sRGkgYXMgRWxEcm9wZG93bk1lbnUsT2kgYXMgRWxGb290ZXIsenQgYXMgRWxGb3JtLFZpIGFzIEVsRm9ybUl0ZW0sSWkgYXMgRWxIZWFkZXIsQWkgYXMgRWxJY29uLHRyIGFzIEVsSW1hZ2UsY3IgYXMgRWxJbmZpbml0ZVNjcm9sbCxXdCBhcyBFbElucHV0LHByIGFzIEVsSW5wdXROdW1iZXIsaHIgYXMgRWxMaW5rLGtyIGFzIEVsTG9hZGluZyxDciBhcyBFbE1haW4sVHIgYXMgRWxNZW51LE9yIGFzIEVsTWVudUl0ZW0sVnIgYXMgRWxNZW51SXRlbUdyb3VwLCRyIGFzIEVsTWVzc2FnZSxkcyBhcyBFbE1lc3NhZ2VCb3gsYnMgYXMgRWxOb3RpZmljYXRpb24sX3MgYXMgRWxPcHRpb24sSXMgYXMgRWxPcHRpb25Hcm91cCx6cyBhcyBFbFBhZ2VIZWFkZXIsbnUgYXMgRWxQYWdpbmF0aW9uLG91IGFzIEVsUG9wY29uZmlybSxjdSBhcyBFbFBvcG92ZXIsU2wgYXMgRWxQb3BwZXIsdnUgYXMgRWxQcm9ncmVzcyxYYSBhcyBFbFJhZGlvLGJ1IGFzIEVsUmFkaW9CdXR0b24seXUgYXMgRWxSYWRpb0dyb3VwLGt1IGFzIEVsUmF0ZSxDdSBhcyBFbFJvdyxubCBhcyBFbFNjcm9sbGJhcixNcyBhcyBFbFNlbGVjdCxTdSBhcyBFbFNsaWRlcixEdSBhcyBFbFN0ZXAsQXUgYXMgRWxTdGVwcyxCdSBhcyBFbFN1Ym1lbnUsTHUgYXMgRWxTd2l0Y2gsJHUgYXMgRWxUYWJQYW5lLHhkIGFzIEVsVGFibGUsemQgYXMgRWxUYWJsZUNvbHVtbixSZCBhcyBFbFRhYnMsa24gYXMgRWxUYWcsa2EgYXMgRWxUaW1lUGlja2VyLEtkIGFzIEVsVGltZVNlbGVjdCxZZCBhcyBFbFRpbWVsaW5lLHFkIGFzIEVsVGltZWxpbmVJdGVtLERyIGFzIEVsVG9vbHRpcCxpYyBhcyBFbFRyYW5zZmVyLEVjIGFzIEVsVHJlZSxqYyBhcyBFbFVwbG9hZCxHYyBhcyBFbFZpcnR1YWxMaXN0LHRwIGFzIGluc3RhbGwsUWMgYXMgbG9jYWxlLFhjIGFzIHZlcnNpb259O1xuIiwiPHRlbXBsYXRlPlxyXG4gIDxwPnt7IG1zZyB9fSA8L3A+XHJcbiAgPGJ1dHRvbiBjbGFzcz1cImJ0blwiPueCueWHuzwvYnV0dG9uPlxyXG48L3RlbXBsYXRlPlxyXG48c2NyaXB0PlxyXG4gIGV4cG9ydCBkZWZhdWx0IHtcclxuICAgIG5hbWU6J0hlbGxvV29ybGQnLFxyXG4gICAgcHJvcHM6e1xyXG4gICAgICBtc2c6U3RyaW5nXHJcbiAgICB9XHJcbiAgfVxyXG48L3NjcmlwdD5cclxuPHN0eWxlIGxhbmc9XCJsZXNzXCI+XHJcbmJ1dHRvbntcclxuICBiYWNrZ3JvdW5kIDojZmZmO1xyXG4gIHBhZGRpbmc6IDIwcHg7XHJcbn1cclxuLmJ0bntcclxuICBiYWNrZ3JvdW5kOiByZWJlY2NhcHVycGxlO1xyXG59XHJcbjwvc3R5bGU+IiwiaW1wb3J0IGFwaSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgICAgICAgaW1wb3J0IGNvbnRlbnQgZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvZGlzdC9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL2xlc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3QvaW5kZXguanM/P3J1bGVTZXRbMV0ucnVsZXNbM10udXNlWzBdIS4vSGVsbG93b3JsZC52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD0zMjY0NDE0ZiZsYW5nPWxlc3NcIjtcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgZGVmYXVsdCBjb250ZW50LmxvY2FscyB8fCB7fTsiLCJpbXBvcnQgeyByZW5kZXIgfSBmcm9tIFwiLi9IZWxsb3dvcmxkLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0zMjY0NDE0ZlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL0hlbGxvd29ybGQudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzXCJcbmV4cG9ydCAqIGZyb20gXCIuL0hlbGxvd29ybGQudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzXCJcblxuaW1wb3J0IFwiLi9IZWxsb3dvcmxkLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTMyNjQ0MTRmJmxhbmc9bGVzc1wiXG5zY3JpcHQucmVuZGVyID0gcmVuZGVyXG5cbmV4cG9ydCBkZWZhdWx0IHNjcmlwdCIsIjx0ZW1wbGF0ZT5cclxuICA8ZGl2IGNsYXNzPVwibWFpblwiPlxyXG4gICAgPGRpdiBjbGFzcz1cInNpZGVcIiBzdHlsZT1cIi13ZWJraXQtYXBwLXJlZ2lvbjogZHJhZ1wiPlxyXG4gICAgICA8ZGl2IGNsYXNzPVwibG9nb1wiIHN0eWxlPVwiLXdlYmtpdC1hcHAtcmVnaW9uOiBkcmFnXCI+XHJcbiAgICAgICAgPHN2ZyB2aWV3Qm94PVwiMCAwIDEwMjQgMTAyNFwiIHdpZHRoPVwiNTBcIiBoZWlnaHQ9XCI1NlwiPlxyXG4gICAgICAgICAgPHBhdGggZD1cIk05NTguMTM2IDE5MmgtNDMyLjY0bC00NS4wMyAxNzQuMi0xNi4xNjYgMTE0LjQ4NCA4Ni42NTggMjQxLjY5IDEzLjkxNCAyOTMuMjc4aDM5My4yNjZjMzYuMzY4IDAgNjUuODY0LTI5LjQ5NiA2NS44NjQtNjUuODY0VjI1Ny44NjRDMTAyNCAyMjEuNDk2IDk5NC41MDQgMTkyIDk1OC4xMzYgMTkyelwiIGZpbGw9XCIjRTZFNkU2XCIgcC1pZD1cIjYzMTFcIj48L3BhdGg+XHJcbiAgICAgICAgICA8cGF0aCBkPVwiTTczNy4zOTIgODMybC0xNzIuNTIyIDE4My42NTJMNTAzLjc2NCA4MzJsMjQuOTMyLTY2Ljk1OHpcIiBmaWxsPVwiIzNBNUJCQ1wiIHAtaWQ9XCI2MzEyXCI+PC9wYXRoPlxyXG4gICAgICAgICAgPHBhdGggZD1cIk05MzkuMTMgNDg4LjM0OHYtNDEuNzRoLTE1OC42MDh2LTU4LjQzNGgtNDEuNzR2NTguNDM0SDU5NS44NHY0MS43NGgyMzEuNzhjLTEyLjg5MiAyNy4xNDQtMzUuMjQyIDcwLjQzLTY1Ljk1NiAxMTYuMDctMjguMjY0LTM1LjI5OC00Ni4xMjQtNTkuODYyLTQ2LjMzNi02MC4xNTRsLTEyLjI1OC0xNi44OS0zMy43ODQgMjQuNTEgMTIuMjU0IDE2Ljg5YzAuOTU0IDEuMzE2IDIxLjc1MiAyOS45MjYgNTQuNjc2IDcwLjYtMjIuNDQ0IDI3LjQ5OC02My42MTYgNzIuMjEyLTg1LjMxIDkzLjkwNGwyOS41MTIgMjkuNTEyYzE4LjcyNC0xOC43MjQgNTcuNTQ4LTYwLjQyOCA4Mi44NTItOTAuNjU0IDMyLjkxOCAzOS4xMDYgNjUuMDQ2IDc0LjM4OCA5NS43MDggMTA1LjA1MmwxNC43NTYgMTQuNzU2IDI5LjUxNi0yOS41MS0xNC43NTYtMTQuNzU2Qzg1Ni44MTYgNzE2IDgyMy40NTYgNjc5LjE1IDc4OS4yIDYzOC4wOGM0NC4yNjYtNjMuNjQ2IDcyLjk2LTEyMy45MTIgODQuNC0xNDkuNzMyaDY1LjUzelwiIGZpbGw9XCIjODA4MDgwXCIgcC1pZD1cIjYzMTNcIj48L3BhdGg+XHJcbiAgICAgICAgICA8cGF0aCBkPVwiTTY5OC42NTggNzE1LjA0Nkw3MzcuMzkyIDgzMkg2NS44NjRDMjkuNDY4IDgzMiAwIDgwMi41MDQgMCA3NjYuMTM2Vjc0LjIxMkMwIDM3Ljg0NCAyOS40NjggOC4zNDggNjUuODY0IDguMzQ4aDM5OC44MzJMNTI1LjQ5NiAxOTJsOTEuMjE0IDI3NS40NzggODEuOTQ4IDI0Ny41Njh6XCIgZmlsbD1cIiM1MThFRjhcIiBwLWlkPVwiNjMxNFwiPjwvcGF0aD48cGF0aCBkPVwiTTI5OC42MDIgNTc0Ljc0OGMtODUuNTQgMC0xNTUuMTMtNjkuNTktMTU1LjEzLTE1NS4xM3M2OS41OS0xNTUuMTMgMTU1LjEzLTE1NS4xM2M0MS40MDggMCA4MC4zNjQgMTYuMTMgMTA5LjY5IDQ1LjQyNGwtMjkuNDk4IDI5LjUzMmMtMjEuNDQ2LTIxLjQyLTQ5LjkyMi0zMy4yMTYtODAuMTk0LTMzLjIxNi02Mi41MjYgMC0xMTMuMzkyIDUwLjg2Ni0xMTMuMzkyIDExMy4zOTJzNTAuODY2IDExMy4zOTIgMTEzLjM5MiAxMTMuMzkyYzU1LjM5NiAwIDEwMS42NC0zOS45MzQgMTExLjQ2Ni05Mi41MjJoLTExMS40NjJ2LTQxLjc0aDE1NS4xM3YyMC44N2MtMC4wMDIgODUuNTM4LTY5LjU5MiAxNTUuMTI4LTE1NS4xMzIgMTU1LjEyOHpcIiBmaWxsPVwiI0ZGRkZGRlwiIHAtaWQ9XCI2MzE1XCI+PC9wYXRoPlxyXG4gICAgICAgIDwvc3ZnPlxyXG4gICAgICAgIDxoMT7lj6/op4bljJbnv7vor5E8L2gxPlxyXG4gICAgICA8L2Rpdj5cclxuICAgICAgPGRpdiBjbGFzcz1cImVudHJ5XCI+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cInNlbGVjdC1maWxlXCI+XHJcbiAgICAgICAgICA8aW5wdXQgY2xhc3M9XCJpbnB1dC1maWxlXCIgQGNoYW5nZT1cImVudHJ5RmlsZVwiIHR5cGU9XCJmaWxlXCIgbmFtZT1cIuWvvOWFpVwiPlxyXG4gICAgICAgICAgPGJ1dHRvbj4rIOWvvOWFpeivreiogOWMhTwvYnV0dG9uPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICA8L2Rpdj5cclxuICAgICAgPGRpdiBjbGFzcz1cImNhdGFsb2dcIj5cclxuICAgICAgICA8aDQ+5qih5Z2X55uu5b2VPC9oND5cclxuICAgICAgICA8ZWwtaW5wdXQgY2xhc3M9XCJzZWFyY2gtdGV4dFwiXHJcbiAgICAgICAgICBwbGFjZWhvbGRlcj1cIui+k+WFpeWFs+mUruWtl+i/m+ihjOi/h+a7pFwiXHJcbiAgICAgICAgICBzaXplPVwibWluaVwiXHJcbiAgICAgICAgICB2LW1vZGVsPVwiZmlsdGVyVGV4dFwiPlxyXG4gICAgICAgIDwvZWwtaW5wdXQ+XHJcbiAgICAgICAgPGVsLXRyZWUgcmVmPVwidHJlZVwiIFxyXG4gICAgICAgIDpkYXRhPVwidHJlZURhdGFcIiBcclxuICAgICAgICBub2RlLWtleT1cImlkXCJcclxuICAgICAgICBoaWdobGlnaHQtY3VycmVudFxyXG4gICAgICAgIEBub2RlLWNvbnRleHRtZW51PVwiY3JlYXRNZW51XCJcclxuICAgICAgICBAY3VycmVudC1jaGFuZ2U9XCJjbGlja0xvY2FsTm9kZVwiXHJcbiAgICAgICAgOmZpbHRlci1ub2RlLW1ldGhvZD1cImZpbHRlck5vZGVcIj48L2VsLXRyZWU+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgICA8ZGl2IGNsYXNzPVwib3V0cHV0XCI+XHJcbiAgICAgICAgPCEtLSA8YnV0dG9uIGNsYXNzPVwiZml4ZWRsYlwiIEBjbGljaz1cImV4cG9ydExhbmdcIj7lr7zlh7o8L2J1dHRvbj4gLS0+XHJcbiAgICAgICAgPHAgdGl0bGU9XCLmioDmnK/mlK/mjIFcIj53aXRoIDxhIEBjbGljaz1cImFib3V0TWUodGhpcylcIiBocmVmPVwiamF2YXNjcmlwdDpcIj7imaU8L2E+IGJ5IE11RmVuZzwvcD5cclxuICAgICAgPC9kaXY+XHJcbiAgICA8L2Rpdj5cclxuICAgIDxkaXYgY2xhc3M9XCJjb250ZW50XCI+XHJcbiAgICAgIDwhLS0gPGgyPlNlbnNlR3VhcmQgaTE4bi10b29sczwvaDI+IC0tPlxyXG4gICAgICA8ZGl2IGNsYXNzPVwibWFpbi1oZWFkZVwiPlxyXG4gICAgICAgIDxoMz7kuK3mlofljIU8c3BhbiB2LWlmPVwibGFuZ0ZpbGUuemgubmFtZVwiPjogPHNwYW4gY2xhc3M9XCJncmF5XCI+e3tsYW5nRmlsZS56aC5maWxlfX08L3NwYW4+IDxidXR0b24gdGl0bGU9XCLlr7zlh7rkuK3mlofor63oqIDljIVcIiBjbGFzcz1cIm1pbmlcIiBAY2xpY2s9XCJleHBvcnRMYW5nKGxhbmdGaWxlLnpoKVwiPuKepeWvvOWHujwvYnV0dG9uPjwvc3Bhbj48L2gzPlxyXG4gICAgICAgIDxoMz7oi7HmlofljIU8c3BhbiB2LWlmPVwibGFuZ0ZpbGUuZW4ubmFtZVwiPjogPHNwYW4gY2xhc3M9XCJncmF5XCI+e3tsYW5nRmlsZS5lbi5maWxlfX08L3NwYW4+IDxidXR0b24gdGl0bGU9XCLlr7zlh7roi7Hmlofor63oqIDljIVcIiBjbGFzcz1cIm1pbmlcIiBAY2xpY2s9XCJleHBvcnRMYW5nKGxhbmdGaWxlLmVuKVwiPuKepeWvvOWHujwvYnV0dG9uPjwvc3Bhbj48L2gzPlxyXG4gICAgICA8L2Rpdj5cclxuICAgICAgPHNlY3Rpb24gcmVmPVwicGFnZUNvblwiPlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJub2RhdGFcIiB2LWlmPVwiT2JqZWN0LmtleXMobGFuZy56aCkubGVuZ3RoID09IDAgJiYgT2JqZWN0LmtleXMobGFuZy5lbikubGVuZ3RoID09IDBcIj5cclxuICAgICAgICAgIOivt+WFiOWvvOWFpeivreiogOWMheaWh+S7tjo8YnI+XHJcbiAgICAgICAgICA8c3Bhbj7mlK/mjIEuanNvbu+8jOaIlmpzb27moLzlvI/nmoQoLmpzLy50cynmlofku7bjgII8L3NwYW4+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cImt2XCI+XHJcbiAgICAgICAgICA8ZGwgdi1mb3I9XCIodmFsLCBrZXkpIGluIGxhbmcuemhcIiA6a2V5PVwia2V5XCI+XHJcbiAgICAgICAgICAgIDxkdCA6cmVmPVwia2V5XCIgOm5hbWU9XCJrZXlcIj48ZW0gdi10ZXh0PVwia2V5XCIgQGlucHV0PVwia2V5ID0gJGV2ZW50LnRhcmdldC5pbm5lclRleHRcIj48L2VtPjwvZHQ+XHJcbiAgICAgICAgICAgIDxkZD5cclxuICAgICAgICAgICAgICA8ZGl2IHYtaWY9XCJ0eXBlb2YgdmFsID09ICdzdHJpbmcnXCI+XHJcbiAgICAgICAgICAgICAgICA8IS0tIDxsYWJlbD48L2xhYmVsPiAtLT5cclxuICAgICAgICAgICAgICAgIDx0ZXh0YXJlYSA6Y2xhc3M9XCJrZXlcIiB2LXRyZXNpemU9XCJjaGFuZ2VkXCIgcGxhY2Vob2xkZXI9XCLor7fovpPlhaVcIiBhdXRvSGVpZ2h0PVwidHJ1ZVwiIHYtbW9kZWw9XCJsYW5nLnpoW2tleV1cIj48L3RleHRhcmVhPlxyXG4gICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgIDx1bCB2LWVsc2U+XHJcbiAgICAgICAgICAgICAgICA8bGkgdi1mb3I9XCIoaXRlbSwgaW5kZXgpIGluIGxhbmcuemhba2V5XVwiIDprZXk9XCJpbmRleFwiPlxyXG4gICAgICAgICAgICAgICAgICA8ZW0+e3tpbmRleH19PC9lbT5cclxuICAgICAgICAgICAgICAgICAgPGRpdiB2LWlmPVwidHlwZW9mIGxhbmcuemhba2V5XVtpbmRleF0gPT0gJ3N0cmluZydcIj5cclxuICAgICAgICAgICAgICAgICAgICA8dGV4dGFyZWEgOmNsYXNzPVwiaW5kZXhcIiB2LXRyZXNpemU9XCJjaGFuZ2VkXCIgcGxhY2Vob2xkZXI9XCLor7fovpPlhaVcIiBhdXRvSGVpZ2h0PVwidHJ1ZVwiIHYtbW9kZWw9XCJsYW5nLnpoW2tleV1baW5kZXhdXCI+PC90ZXh0YXJlYT5cclxuICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgIDxkaXYgdi1lbHNlIGNsYXNzPVwiY2hpbGQtaXRlbVwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDx1bD5cclxuICAgICAgICAgICAgICAgICAgICAgIDxsaSB2LWZvcj1cIihjaGlsZGl0ZW0sIG4pIGluIGxhbmcuemhba2V5XVtpbmRleF1cIiA6a2V5PVwiblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZW0+e3tufX08L2VtPjxicj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRleHRhcmVhIDpjbGFzcz1cImluZGV4XCIgdi10cmVzaXplPVwiY2hhbmdlZFwiIHBsYWNlaG9sZGVyPVwi6K+36L6T5YWlXCIgYXV0b0hlaWdodD1cInRydWVcIiB2LW1vZGVsPVwibGFuZy56aFtrZXldW2luZGV4XVtuXVwiPjwvdGV4dGFyZWE+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvdWw+XHJcbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICA8L3VsPlxyXG4gICAgICAgICAgICA8L2RkPlxyXG4gICAgICAgICAgPC9kbD5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwia3ZcIj5cclxuICAgICAgICAgIDxkbCB2LWZvcj1cIih2YWwsIGtleSkgaW4gbGFuZy5lblwiIDprZXk9XCJrZXlcIj5cclxuICAgICAgICAgICAgPGR0PjxlbT57e2tleX19PC9lbT48L2R0PlxyXG4gICAgICAgICAgICA8ZGQ+XHJcbiAgICAgICAgICAgICAgPGRpdiB2LWlmPVwidHlwZW9mIGxhbmcuZW5ba2V5XSA9PSAnc3RyaW5nJ1wiPlxyXG4gICAgICAgICAgICAgICAgPCEtLSA8bGFiZWwgZm9yPVwiXCI+PC9sYWJlbD4gLS0+XHJcbiAgICAgICAgICAgICAgICA8dGV4dGFyZWEgc3R5bGU9XCJyZXNpemU6bm9uZVwiIDpjbGFzcz1cImtleVwiIHYtdHJlc2l6ZT1cImNoYW5nZWRcIiBwbGFjZWhvbGRlcj1cIuivt+i+k+WFpVwiIGF1dG9IZWlnaHQ9XCJ0cnVlXCIgdi1tb2RlbD1cImxhbmcuZW5ba2V5XVwiPjwvdGV4dGFyZWE+XHJcbiAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgPHVsIHYtZWxzZT5cclxuICAgICAgICAgICAgICAgIDxsaSB2LWZvcj1cIihpdGVtLCBpbmRleCkgaW4gbGFuZy5lbltrZXldXCIgOmtleT1cImluZGV4XCI+XHJcbiAgICAgICAgICAgICAgICAgIDxlbT57e2luZGV4fX08L2VtPlxyXG4gICAgICAgICAgICAgICAgICA8ZGl2IHYtaWY9XCJ0eXBlb2YgbGFuZy5lbltrZXldW2luZGV4XSA9PSAnc3RyaW5nJ1wiPlxyXG4gICAgICAgICAgICAgICAgICAgIDx0ZXh0YXJlYSA6Y2xhc3M9XCJpbmRleFwiIHYtdHJlc2l6ZT1cImNoYW5nZWRcIiBwbGFjZWhvbGRlcj1cIuivt+i+k+WFpVwiIGF1dG9IZWlnaHQ9XCJ0cnVlXCIgdi1tb2RlbD1cImxhbmcuZW5ba2V5XVtpbmRleF1cIj48L3RleHRhcmVhPlxyXG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgPGRpdiB2LWVsc2UgY2xhc3M9XCJjaGlsZC1pdGVtXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHVsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgPGxpIHYtZm9yPVwiKGNoaWxkaXRlbSwgbikgaW4gbGFuZy5lbltrZXldW2luZGV4XVwiIDprZXk9XCJuXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxlbT57e259fTwvZW0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZXh0YXJlYSA6Y2xhc3M9XCJpbmRleFwiIHYtdHJlc2l6ZT1cImNoYW5nZWRcIiBwbGFjZWhvbGRlcj1cIuivt+i+k+WFpVwiIGF1dG9IZWlnaHQ9XCJ0cnVlXCIgdi1tb2RlbD1cImxhbmcuZW5ba2V5XVtpbmRleF1bbl1cIj48L3RleHRhcmVhPlxyXG4gICAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgICAgICA8L3VsPlxyXG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgICAgPC91bD5cclxuICAgICAgICAgICAgPC9kZD5cclxuICAgICAgICAgIDwvZGw+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPGVsLWRpYWxvZ1xyXG4gICAgICAgICAgd2lkdGg9XCI1MDBweFwiXHJcbiAgICAgICAgICB2LW1vZGVsPVwiZGlhbG9nU2hvd1Zpc2libGVcIj5cclxuICAgICAgICAgIDx0ZW1wbGF0ZSBjbGFzcz1cImRpYWxvZy10aXRsZVwiIHYtc2xvdDp0aXRsZT57e2N1cnJlbnRNb2R1bGV9fTogPGVtPua3u+WKoOWtkOmhuTwvZW0+PC90ZW1wbGF0ZT5cclxuICAgICAgICAgIDxlbC1mb3JtIDptb2RlbD1cImZvcm1cIiByZWY9XCJyZWdpb25SdWxlc1wiIDpydWxlcz1cInJlZ2lvblJ1bGVzXCI+XHJcbiAgICAgICAgICAgIDxlbC1mb3JtLWl0ZW0gbGFiZWw9XCJrZXk6XCIgOmxhYmVsLXdpZHRoPVwiZm9ybUxhYmVsV2lkdGhcIiBwcm9wPVwia2V5XCI+XHJcbiAgICAgICAgICAgICAgPGVsLWlucHV0IHNpemU9XCJzbWFsbFwiIHYtbW9kZWw9XCJmb3JtLmtleVwiIG1heGxlbmd0aD1cIjQwXCIgYXV0b2NvbXBsZXRlPVwib2ZmXCI+PC9lbC1pbnB1dD5cclxuICAgICAgICAgICAgPC9lbC1mb3JtLWl0ZW0+XHJcbiAgICAgICAgICAgIDxlbC1mb3JtLWl0ZW0gbGFiZWw9XCLkuK3mloc6XCIgOmxhYmVsLXdpZHRoPVwiZm9ybUxhYmVsV2lkdGhcIiBwcm9wPVwiemhWYWx1ZVwiPlxyXG4gICAgICAgICAgICAgIDxlbC1pbnB1dCBzaXplPVwic21hbGxcIiB2LW1vZGVsPVwiZm9ybS56aFZhbHVlXCIgbWF4bGVuZ3RoPVwiMTAwXCIgYXV0b2NvbXBsZXRlPVwib2ZmXCI+PC9lbC1pbnB1dD5cclxuICAgICAgICAgICAgPC9lbC1mb3JtLWl0ZW0+XHJcbiAgICAgICAgICAgIDxlbC1mb3JtLWl0ZW0gbGFiZWw9XCLoi7Hmloc6XCIgOmxhYmVsLXdpZHRoPVwiZm9ybUxhYmVsV2lkdGhcIiBwcm9wPVwiZW5WYWx1ZVwiPlxyXG4gICAgICAgICAgICAgIDxlbC1pbnB1dCBzaXplPVwic21hbGxcIiB2LW1vZGVsPVwiZm9ybS5lblZhbHVlXCIgbWF4bGVuZ3RoPVwiMTAwXCIgYXV0b2NvbXBsZXRlPVwib2ZmXCI+PC9lbC1pbnB1dD5cclxuICAgICAgICAgICAgPC9lbC1mb3JtLWl0ZW0+XHJcbiAgICAgICAgICA8L2VsLWZvcm0+XHJcbiAgICAgICAgICA8dGVtcGxhdGUgdi1zbG90OmZvb3RlciBjbGFzcz1cImRpYWxvZy1mb290ZXJcIj5cclxuICAgICAgICAgICAgPGVsLWJ1dHRvbiBzaXplPVwic21hbGxcIiB0eXBlPVwicHJpbWFyeVwiIDpsb2FkaW5nPVwiaXNTdWJtaXRcIiBAY2xpY2s9XCJhZGRJdGVtXCI+56Gu5a6aPC9lbC1idXR0b24+XHJcbiAgICAgICAgICAgIDxlbC1idXR0b24gc2l6ZT1cInNtYWxsXCIgdHlwZT1cImluZm9cIiBAY2xpY2s9XCJkaWFsb2dTaG93VmlzaWJsZSA9IGZhbHNlXCI+5Y+W5raIPC9lbC1idXR0b24+XHJcbiAgICAgICAgICA8L3RlbXBsYXRlPlxyXG4gICAgICAgIDwvZWwtZGlhbG9nPlxyXG4gICAgICA8L3NlY3Rpb24+XHJcbiAgICAgIFxyXG4gICAgPC9kaXY+XHJcbiAgICBcclxuICA8L2Rpdj5cclxuPC90ZW1wbGF0ZT5cclxuPHNjcmlwdD5cclxuY29uc3Qge2lwY1JlbmRlcmVyfSA9IHJlcXVpcmUoJ2VsZWN0cm9uJylcclxuY29uc3QgeyByZW1vdGUsc2hlbGwgfSA9IHJlcXVpcmUoJ2VsZWN0cm9uJylcclxuY29uc3QgeyBNZW51LCBNZW51SXRlbSB9ID0gcmVtb3RlXHJcbmNvbnN0IGZzID0gcmVxdWlyZSgnZnMnKVxyXG5cclxuaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50LCBvbk1vdW50ZWQsIHJlYWN0aXZlICx0b1JlZnMsd2F0Y2gscmVmIH0gZnJvbSAndnVlJ1xyXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb21wb25lbnQoe1xyXG4gIHNldHVwKHByb3BzLCBjdHgpIHtcclxuICAgIGNvbnN0IHN0YXRlID0gcmVhY3RpdmUoe1xyXG4gICAgICBmb3JtOntcclxuICAgICAgICBrZXk6JycsXHJcbiAgICAgICAgZW5WYWx1ZTonJyxcclxuICAgICAgICB6aFZhbHVlOicnXHJcbiAgICAgIH0sXHJcbiAgICAgIGZvcm1MYWJlbFdpZHRoOic4MHB4JyxcclxuICAgICAgcmVnaW9uUnVsZXM6e1xyXG4gICAgICAgIGtleTogW1xyXG4gICAgICAgICAgeyByZXF1aXJlZDogdHJ1ZSwgdHJpZ2dlcjogJ2JsdXInIH0sXHJcbiAgICAgICAgICB7IG1heDogNDAsIG1lc3NhZ2U6ICcnLCB0cmlnZ2VyOiAnYmx1cid9XHJcbiAgICAgICAgXSxcclxuICAgICAgICBlblZhbHVlOiBbXHJcbiAgICAgICAgICB7IHJlcXVpcmVkOiB0cnVlLCB0cmlnZ2VyOiAnYmx1cicgfSxcclxuICAgICAgICAgIHsgbWF4OiA0MCwgbWVzc2FnZTogJycsIHRyaWdnZXI6ICdibHVyJyB9XHJcbiAgICAgICAgXSxcclxuICAgICAgICB6aFZhbHVlOiBbXHJcbiAgICAgICAgICB7IHJlcXVpcmVkOiB0cnVlLCB0cmlnZ2VyOiAnYmx1cicgfSxcclxuICAgICAgICAgIHsgbWF4OiA0MCwgbWVzc2FnZTogJycsIHRyaWdnZXI6ICdibHVyJyB9XHJcbiAgICAgICAgXVxyXG4gICAgICB9LFxyXG4gICAgICBpc1N1Ym1pdDpmYWxzZSxcclxuICAgICAgY3VycmVudE1vZHVsZTonJyxcclxuICAgICAgbmFtZTogJ+mmlumhtScsXHJcbiAgICAgIHBhdGg6ICcvaG9tZScsXHJcbiAgICAgIGxhbmc6IHtcclxuICAgICAgICBlbjoge30sXHJcbiAgICAgICAgemg6IHt9XHJcbiAgICAgIH0sXHJcbiAgICAgIGxhbmdGaWxlOntcclxuICAgICAgICBlbjp7XHJcbiAgICAgICAgICBuYW1lOicnLFxyXG4gICAgICAgICAgZmlsZTonJ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgemg6e1xyXG4gICAgICAgICAgbmFtZTonJyxcclxuICAgICAgICAgIGZpbGU6JydcclxuICAgICAgICB9XHJcbiAgICAgIH0sXHJcbiAgICAgIGZpbHRlclRleHQ6JycsXHJcbiAgICAgIHRyZWVEYXRhOltdLFxyXG4gICAgICBjb250ZXh0TWVudTpuZXcgTWVudSgpLFxyXG4gICAgICBkaWFsb2dTaG93VmlzaWJsZTpmYWxzZVxyXG4gICAgfSk7XHJcbiAgICBjb25zdCByZWdpb25SdWxlcyA9IHJlZihudWxsKVxyXG5cclxuICAgIG9uTW91bnRlZCgoKT0+IHtcclxuICAgICAgLy90aGlzLnRyZWVJbml0KCk7XHJcbiAgICAgIGNvbnNvbGUubG9nKHJlZ2lvblJ1bGVzLnZhbHVlKVxyXG4gICAgICBjb250ZXh0TWVudUluaXQoKTtcclxuICAgIH0pO1xyXG4gIGZ1bmN0aW9uIGFib3V0TWUoKXtcclxuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICBzaGVsbC5vcGVuRXh0ZXJuYWwoJ2h0dHBzOi8vZ2l0aHViLmNvbS9hcnRza2luL2kxOG4tdG9vbHMnKTtcclxuICB9XHJcbiAgZnVuY3Rpb24gZmlsdGVyTm9kZSh2YWx1ZSwgZGF0YSkge1xyXG4gICAgaWYgKCF2YWx1ZSkgcmV0dXJuIHRydWU7XHJcbiAgICByZXR1cm4gZGF0YS5sYWJlbC5pbmRleE9mKHZhbHVlKSAhPT0gLTE7XHJcbiAgfVxyXG4gIGZ1bmN0aW9uIGNsaWNrTG9jYWxOb2RlKGRhdGEsbm9kZSl7XHJcbiAgICAvL2NvbnNvbGUubG9nKGRhdGEsbm9kZSlcclxuICAgIC8vbGV0IGl0ZW1OYW1lID0gZGF0YS5sYWJlbDtcclxuICAgIC8vZGF0YS5sYWJlbCA9IHJlZihudWxsKS52YWx1ZTtcclxuXHJcbiAgICAvL2NvbnNvbGUubG9nKGRhdGEubGFiZWwpXHJcbiAgICAvL2xldCB0YXJnZXRFbCA9IGl0ZW1OYW1lXHJcblxyXG4gICAgLy8gaWYodGhpcy4kcmVmc1tpdGVtTmFtZV0ubGVuZ3RoPjApe1xyXG4gICAgLy8gICB0YXJnZXRFbCA9IHRoaXMuJHJlZnNbaXRlbU5hbWVdWzBdXHJcbiAgICAvLyB9ZWxzZXtcclxuICAgIC8vICAgdGFyZ2V0RWwgPSB0aGlzLiRyZWZzW2l0ZW1OYW1lXVxyXG4gICAgLy8gfVxyXG4gICAgLy90YXJnZXRFbC5zY3JvbGxJbnRvVmlldygpLy97YmVoYXZpb3I6XCJzbW9vdGhcIn1cclxuICB9XHJcblxyXG4gIGNvbnN0IGVudHJ5RmlsZT0gKGUpID0+IHtcclxuICAgIGxldCBnZXRmaWxlID0gZS50YXJnZXQuZmlsZXNbMF1cclxuICAgIC8vIGNvbnNvbGUubG9nKGdldGZpbGUpXHJcbiAgICBsZXQgZmlsZU5hbWUgPSBnZXRmaWxlLm5hbWU7XHJcbiAgICBsZXQgbGFuZ05hbWUgPSAnJ1xyXG4gICAgaWYoZmlsZU5hbWUuaW5jbHVkZXMoJ3poJykgfHwgZmlsZU5hbWUuaW5jbHVkZXMoJ2NuJykgfHwgZ2V0ZmlsZS5wYXRoLmluY2x1ZGVzKCd6aCcpKXtcclxuICAgICAgbGFuZ05hbWUgPSAnemgnXHJcbiAgICB9XHJcbiAgICBpZihmaWxlTmFtZS5pbmNsdWRlcygnZW4nKSB8fCBmaWxlTmFtZS5pbmNsdWRlcygnRU4nKSB8fCBnZXRmaWxlLnBhdGguaW5jbHVkZXMoJ2VuJykpe1xyXG4gICAgICBsYW5nTmFtZSA9ICdlbidcclxuICAgIH1cclxuXHJcbiAgICBzdGF0ZS5sYW5nRmlsZVtsYW5nTmFtZV0uZmlsZSA9IGZpbGVOYW1lO1xyXG4gICAgc3RhdGUubGFuZ0ZpbGVbbGFuZ05hbWVdLm5hbWUgPSBsYW5nTmFtZTtcclxuICAgIGNvbnNvbGUubG9nKHN0YXRlKVxyXG5cclxuICAgIGZzLnJlYWRGaWxlKGdldGZpbGUucGF0aCwgJ3V0Zi04JywgKGVyciwgcmVzdWx0KSA9PiB7XHJcbiAgICAgIGxldCB0b0pzb24gPSByZXN1bHQuc3Vic3RyaW5nKHJlc3VsdC5pbmRleE9mKCd7JykpXHJcbiAgICAgIGlmIChlcnIpIHtcclxuICAgICAgICBjb25zb2xlLmxvZygn5Ye66ZSZJyxlcnIpLy8gZXNsaW50LWRpc2FibGUtbGluZVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHN0YXRlLmxhbmdbbGFuZ05hbWVdID0gSlNPTi5wYXJzZSh0b0pzb24pXHJcbiAgICAgICAgdHJlZUluaXQobGFuZ05hbWUsSlNPTi5wYXJzZSh0b0pzb24pKVxyXG4gICAgICB9XHJcbiAgICB9KVxyXG4gICAgLy8gY29uc29sZS5sb2coZnMucmVhZEZpbGVTeW5jKGdldGZpbGUucGF0aCkudG9TdHJpbmcoKSlcclxuICAgIC8vIGxldCByZXN1bHQgPSBKU09OLnBhcnNlKGZzLnJlYWRGaWxlU3luYyhnZXRmaWxlLnBhdGgpKVxyXG4gICAgLy8gY29uc29sZS5sb2cocmVzdWx0KVxyXG4gICAgLy9pcGNSZW5kZXJlci5zZW5kKCdvcGVuLWZpbGUtZGlhbG9nJylcclxuICB9XHJcbiAgY29uc3QgdHJlZUluaXQgPShsYW5nLHRyZWVEYXRhKT0+e1xyXG4gICAgc3RhdGUudHJlZURhdGEgPSBbXTtcclxuICAgIGxldCB0cmVlSnNvbiA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodHJlZURhdGEpKVxyXG4gICAgLy9jb25zb2xlLmxvZyhzdGF0ZS50cmVlRGF0YSlcclxuICAgIGdldEpzb25EYXRhKHRyZWVKc29uKVxyXG4gICAgZnVuY3Rpb24gZ2V0SnNvbkRhdGEoanNvbkRhdGEsa2V5KXtcclxuICAgICAgLy9jb25zb2xlLmxvZyhqc29uRGF0YSwpXHJcbiAgICAgIE9iamVjdC5lbnRyaWVzKGpzb25EYXRhKS5tYXAoKGl0ZW0pPT57XHJcbiAgICAgICAgLy9jb25zb2xlLmxvZyhpdGVtLHR5cGVvZiBpdGVtWzFdKVxyXG4gICAgICAgIFxyXG4gICAgICAgIGlmKHR5cGVvZiBpdGVtWzFdID09ICdvYmplY3QnKXtcclxuICAgICAgICAgIGxldCB0cmVlSXRlbSA9IHtcclxuICAgICAgICAgICAgbGFiZWw6aXRlbVswXSxcclxuICAgICAgICAgICAgdmFsdWU6JydcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHN0YXRlLnRyZWVEYXRhLnB1c2godHJlZUl0ZW0pXHJcbiAgICAgICAgfVxyXG4gICAgICB9KVxyXG4gICAgICBjb25zb2xlLmxvZyhzdGF0ZS50cmVlRGF0YSlcclxuICAgIH1cclxuICB9XHJcbiAgXHJcbiAgZnVuY3Rpb24gc2VsZWN0RmlsZSAoZSkge1xyXG4gICAgLy9pcGNSZW5kZXJlci5zZW5kKCdvcGVuLWZpbGUtZGlhbG9nJylcclxuICB9XHJcbiAgZnVuY3Rpb24gY2hhbmdlZCAoZSkge1xyXG4gICAgLy8gdGhpcy4kcmVmc1tlLmNsYXNzTmFtZV1bMV0uc3R5bGUuaGVpZ2h0ID0gdGhpcy4kcmVmc1tlLmNsYXNzTmFtZV1bMF0uc3R5bGUuaGVpZ2h0XHJcbiAgfVxyXG4gIGZ1bmN0aW9uIGNvbnRleHRNZW51SW5pdCgpe1xyXG4gICAgc3RhdGUuY29udGV4dE1lbnUuYXBwZW5kKG5ldyBNZW51SXRlbSh7IGxhYmVsOiAn5paw5bu65a2Q6aG5JywgY2xpY2s6KCk9PiB7IHNob3dBZGRJdGVtKCkgfSB9KSlcclxuICAgIC8vIHRoaXMuY29udGV4dE1lbnUuYXBwZW5kKG5ldyBNZW51SXRlbSh7IHR5cGU6ICdzZXBhcmF0b3InIH0pKVxyXG4gICAgLy8gdGhpcy5jb250ZXh0TWVudS5hcHBlbmQobmV3IE1lbnVJdGVtKHsgbGFiZWw6ICfmlrDlu7rmqKHlnZcnIH0pKVxyXG4gIH1cclxuICBmdW5jdGlvbiBzaG93QWRkSXRlbSgpe1xyXG4gICAgc3RhdGUuZGlhbG9nU2hvd1Zpc2libGUgPSB0cnVlO1xyXG4gIH1cclxuICBmdW5jdGlvbiAgYWRkSXRlbSgpe1xyXG4gICAgbGV0IHJlZ2lvbkVsID0gcmVnaW9uUnVsZXMudmFsdWVcclxuICAgIFxyXG4gICAgcmVnaW9uRWwudmFsaWRhdGUoKHZhbGlkKSA9PiB7XHJcbiAgICAgIGlmICh2YWxpZCkge1xyXG4gICAgICAgIHN0YXRlLmlzU3VibWl0ID0gdHJ1ZTtcclxuICAgICAgICBjb25zb2xlLmxvZyhzdGF0ZS5sYW5nRmlsZSlcclxuICAgICAgICBpZihzdGF0ZS5sYW5nICYmIHN0YXRlLmxhbmcuemggJiYgc3RhdGUubGFuZ0ZpbGUuemguZmlsZSl7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZyhzdGF0ZS5sYW5nLnpoW3N0YXRlLmN1cnJlbnRNb2R1bGVdKVxyXG4gICAgICAgICAgc3RhdGUubGFuZy56aFtzdGF0ZS5jdXJyZW50TW9kdWxlXVtzdGF0ZS5mb3JtLmtleV0gPSBzdGF0ZS5mb3JtLnpoVmFsdWVcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYoc3RhdGUubGFuZyAmJiBzdGF0ZS5sYW5nLmVuICYmIHN0YXRlLmxhbmdGaWxlLmVuLmZpbGUpe1xyXG4gICAgICAgICAgY29uc29sZS5sb2coc3RhdGUubGFuZylcclxuICAgICAgICAgIHN0YXRlLmxhbmcuZW5bc3RhdGUuY3VycmVudE1vZHVsZV1bc3RhdGUuZm9ybS5rZXldID0gc3RhdGUuZm9ybS5lblZhbHVlXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHNldFRpbWVvdXQoKCk9PntcclxuICAgICAgICAgIHN0YXRlLmlzU3VibWl0ID0gZmFsc2U7XHJcbiAgICAgICAgICBzdGF0ZS5kaWFsb2dTaG93VmlzaWJsZSA9IGZhbHNlXHJcbiAgICAgICAgICBjb25zb2xlLmxvZyhzdGF0ZS5sYW5nKVxyXG4gICAgICAgIH0sMTAwKVxyXG4gICAgICB9XHJcbiAgICB9KVxyXG4gIH1cclxuICBmdW5jdGlvbiBjcmVhdE1lbnUoZXYsZGF0YSxub2RlLHNlbGYpe1xyXG4gICAgZXYucHJldmVudERlZmF1bHQoKVxyXG4gICAgLy9jb25zb2xlLmxvZyhldixkYXRhLG5vZGUsc2VsZilcclxuICAgIHN0YXRlLmN1cnJlbnRNb2R1bGUgPSBkYXRhLmxhYmVsXHJcbiAgICBzdGF0ZS5jb250ZXh0TWVudS5wb3B1cCh7IHdpbmRvdzogcmVtb3RlLmdldEN1cnJlbnRXaW5kb3coKSB9KVxyXG4gIH1cclxuICBmdW5jdGlvbiBleHBvcnRMYW5nIChjdXJyZW50bGFuZykge1xyXG4gICAgLy9jb25zb2xlLmxvZyh0aGlzKVxyXG4gICAgbGV0IHN0ciA9IEpTT04uc3RyaW5naWZ5KHRoaXMubGFuZ1tjdXJyZW50bGFuZy5uYW1lXSwgJycsICdcXHQnKVxyXG4gICAgbGV0IHNhdmVTdHIgPSBgZXhwb3J0IGRlZmF1bHQgJHtzdHJ9YFxyXG4gICAgY29uc29sZS5sb2coc2F2ZVN0cilcclxuICAgIGlwY1JlbmRlcmVyLnNlbmQoJ3NhdmUtZGlhbG9nJyxjdXJyZW50bGFuZy5maWxlKVxyXG4gICAgaXBjUmVuZGVyZXIub24oJ3NhdmUtZmlsZScsIChldmVudCwgcGF0aCkgPT4ge1xyXG4gICAgICBpZighcGF0aC5jYW5jZWxlZCl7XHJcbiAgICAgICAgbGV0IGZpbGVQYXRoID0gcGF0aC5maWxlUGF0aFxyXG4gICAgICAgIGZzLndyaXRlRmlsZShmaWxlUGF0aCwgc2F2ZVN0ciwgJ3V0Zi04JywgKGVyciwgZGF0YSkgPT4ge1xyXG4gICAgICAgICAgaWYgKGVycikgdGhyb3cgZXJyO1xyXG4gICAgICAgICAgY29uc29sZS5sb2coJ+aWh+S7tuW3suiiq+S/neWtmCcpO1xyXG4gICAgICAgICAgY29uc3Qgbm90aWZpY2F0aW9uID0ge1xyXG4gICAgICAgICAgICB0aXRsZTon5a+85Ye65oiQ5YqfJyxcclxuICAgICAgICAgICAgYm9keTon5a+85Ye655uu5b2V5Li6OicrZmlsZVBhdGhcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGNvbnN0IG5vdGljZVN1Y2Nlc3MgPSBuZXcgd2luZG93Lk5vdGlmaWNhdGlvbihub3RpZmljYXRpb24udGl0bGUsbm90aWZpY2F0aW9uKVxyXG4gICAgICAgIH0pXHJcbiAgICAgIH1cclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIC4uLnRvUmVmcyhzdGF0ZSksXHJcbiAgICAgIGVudHJ5RmlsZSxcclxuICAgICAgdHJlZUluaXQsXHJcbiAgICAgIGNsaWNrTG9jYWxOb2RlLFxyXG4gICAgICBjcmVhdE1lbnUsXHJcbiAgICAgIGZpbHRlck5vZGUsXHJcbiAgICAgIGV4cG9ydExhbmcsXHJcbiAgICAgIGNvbnRleHRNZW51SW5pdCxcclxuICAgICAgc2hvd0FkZEl0ZW0sXHJcbiAgICAgIGFkZEl0ZW0sXHJcbiAgICAgIHJlZ2lvblJ1bGVzXHJcbiAgICB9XHJcbiAgfVxyXG4vLyBmaWx0ZXJUZXh0KHZhbCkge1xyXG4vLyAgICAgICB0aGlzLiRyZWZzLnRyZWUuZmlsdGVyKHZhbCk7XHJcbi8vICAgICB9XHJcbiAgLy8gd2F0Y2goKCkgPT4gdmFsLG5ld1ZhbCA9PiB7XHJcbiAgLy8gICBkYXRhLmN1cnJlbnRNb2R1bGUgPSBuZXdWYWxcclxuICAvLyB9KVxyXG59KVxyXG48L3NjcmlwdD5cclxuPHN0eWxlIGxhbmc9XCJsZXNzXCI+XHJcbkBpbXBvcnQgJy4vaG9tZS5sZXNzJztcclxuPC9zdHlsZT4iLCJpbXBvcnQgYXBpIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICAgICAgICBpbXBvcnQgY29udGVudCBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L3N0eWxlUG9zdExvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvbGVzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvZGlzdC9pbmRleC5qcz8/cnVsZVNldFsxXS5ydWxlc1szXS51c2VbMF0hLi9ob21lLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTI2NzRiNmIyJmxhbmc9bGVzc1wiO1xuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCBkZWZhdWx0IGNvbnRlbnQubG9jYWxzIHx8IHt9OyIsImltcG9ydCB7IHJlbmRlciB9IGZyb20gXCIuL2hvbWUudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTI2NzRiNmIyXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vaG9tZS52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anNcIlxuZXhwb3J0ICogZnJvbSBcIi4vaG9tZS52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anNcIlxuXG5pbXBvcnQgXCIuL2hvbWUudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9MjY3NGI2YjImbGFuZz1sZXNzXCJcbnNjcmlwdC5yZW5kZXIgPSByZW5kZXJcblxuZXhwb3J0IGRlZmF1bHQgc2NyaXB0IiwiPHRlbXBsYXRlPlxuXG4gIDwhLS0gPEhlbGxvV29ybGQgbXNnPVwiaGVsbG8gVnVlM1wiPjwvSGVsbG9Xb3JsZD4gLS0+XG4gIDxIb21lUGFnZT48L0hvbWVQYWdlPlxuXG48L3RlbXBsYXRlPlxuPHNjcmlwdD5cbiAgaW1wb3J0IEhlbGxvV29ybGQgZnJvbSAnLi9jb21wb25lbnRzL0hlbGxvd29ybGQudnVlJ1xuICBpbXBvcnQgSG9tZVBhZ2UgZnJvbSAnLi9wYWdlL2hvbWUudnVlJ1xuICBleHBvcnQgZGVmYXVsdCB7XG4gICAgbmFtZTonQXBwJyxcbiAgICBjb21wb25lbnRzOntcbiAgICAgIEhlbGxvV29ybGQsSG9tZVBhZ2VcbiAgICB9XG4gIH1cbjwvc2NyaXB0PlxuXG48c3R5bGUgbGFuZz1cImxlc3NcIj5cbi5hcHB7XG4gIGJvcmRlcjoxcHggc29saWQgI2NjYztcbn1cbjwvc3R5bGU+IiwiaW1wb3J0IGFwaSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgICAgICAgaW1wb3J0IGNvbnRlbnQgZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvZGlzdC9zdHlsZVBvc3RMb2FkZXIuanMhLi4vbm9kZV9tb2R1bGVzL2xlc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3QvaW5kZXguanM/P3J1bGVTZXRbMV0ucnVsZXNbM10udXNlWzBdIS4vQXBwLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTJmZjcyNzEyJmxhbmc9bGVzc1wiO1xuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCBkZWZhdWx0IGNvbnRlbnQubG9jYWxzIHx8IHt9OyIsImltcG9ydCB7IHJlbmRlciB9IGZyb20gXCIuL0FwcC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9MmZmNzI3MTJcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9BcHAudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzXCJcbmV4cG9ydCAqIGZyb20gXCIuL0FwcC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anNcIlxuXG5pbXBvcnQgXCIuL0FwcC52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD0yZmY3MjcxMiZsYW5nPWxlc3NcIlxuc2NyaXB0LnJlbmRlciA9IHJlbmRlclxuXG5leHBvcnQgZGVmYXVsdCBzY3JpcHQiLCJcbmltcG9ydCB7IGNyZWF0ZUFwcCB9IGZyb20gJ3Z1ZSdcbmltcG9ydCBFbGVtZW50UGx1cyBmcm9tICdlbGVtZW50LXBsdXMnO1xuXG5pbXBvcnQgQXBwIGZyb20gJy4vQXBwLnZ1ZSdcblxubGV0IGFwcCA9IGNyZWF0ZUFwcChBcHApXG5hcHAudXNlKEVsZW1lbnRQbHVzKVxuXG5hcHAuZGlyZWN0aXZlKCd0cmVzaXplJywge1xuICBiaW5kIChlbCwgYmluZGluZykge1xuICAgIGxldCB3aWR0aCA9ICcnXG4gICAgbGV0IGhlaWdodCA9ICcnXG4gICAgbGV0IGNsYXNzTmFtZSA9ICcnXG4gICAgLy8gY29uc29sZS5sb2coY2xhc3NOYW1lKVxuICAgIGZ1bmN0aW9uIGdldCAoKSB7XG4gICAgICBjb25zdCBzdHlsZSA9IGRvY3VtZW50LmRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGUoZWwpXG4gICAgICAvLyBjb25zb2xlLmxvZyhzdHlsZSlcbiAgICAgIGlmICh3aWR0aCAhPT0gc3R5bGUud2lkdGggfHwgaGVpZ2h0ICE9PSBzdHlsZS5oZWlnaHQpIHtcbiAgICAgICAgY2xhc3NOYW1lID0gZWwuY2xhc3NMaXN0WzBdXG4gICAgICAgIGJpbmRpbmcudmFsdWUoe3dpZHRoLCBoZWlnaHQsIGNsYXNzTmFtZX0pXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGVsLmNsYXNzTGlzdClcbiAgICAgIH1cbiAgICAgIHdpZHRoID0gc3R5bGUud2lkdGhcbiAgICAgIGhlaWdodCA9IHN0eWxlLmhlaWdodFxuICAgICAgY2xhc3NOYW1lID0gc3R5bGUuY2xhc3NOYW1lXG4gICAgfVxuXG4gICAgZWwuX192dWVSZWl6ZV9fID0gc2V0SW50ZXJ2YWwoZ2V0LCA0MDApXG4gIH0sXG4gIHVuYmluZCAoZWwpIHtcbiAgICBjbGVhckludGVydmFsKGVsLl9fdnVlUmVpemVfXylcbiAgfVxufSlcblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5hcHAubW91bnQoXCIjYXBwXCIpIl0sInNvdXJjZVJvb3QiOiIifQ==